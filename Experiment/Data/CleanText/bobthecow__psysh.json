{
    "bobthecow": "Thanks!\n. Done: https://packagist.org/packages/psy/psysh\n. Heh. Oops. I bet you can guess which of those paths I tested with :P\n. Heh. Yep. That :)\nI was probably writing bash at the time and typo'd it.\n. Fixed. Thanks for pointing it out.\n. I'm not sure. Try adding this line just after the <?php in your psysh phar:\nvar_dump(php_sapi_name(), basename(__FILE__), basename($_SERVER['argv'][0]), basename(realpath($_SERVER['argv'][0])));\nand tell me what it says?\n. I don't have a PHP 5.3 install to play with, unfortunately, and my system doesn't feel like compiling PHP for some reason. Here's my test case, working in PHP 5.4:\nphp\n<?php\nrequire_once './bin/psysh';\necho \"before\\n\";\n\\Psy\\Shell::debug();\necho \"after\\n\";\nAnd the output:\n\n. No, put that line in the psysh phar, not in your test file.\n. Wait! I just noticed your window title, and think I figured it out.\nThe directory you're in is a local checkout of the master branch of the psysh codebase, right? If so, bin/psysh isn't a phar at all. It's the script which is executed by the phar when you run it directly.\nhttps://github.com/bobthecow/psysh/blob/master/src/Psy/Compiler.php#L163-L165\nThe phar I was referring to isn't in the repo. It's at psysh.org/psysh. That is the one you can require in your project without it automatically executing :)\nAlso, I should work on actually writing documentation. That'd be a great start :P\n. Thanks!\n. Good question. I haven't seen that before. I'll take a look.\n. Got it.\nYou're hard-coding a minimum stability of \"dev\" in the wp-cli local install composer.json, which bubbles down to PsySH and all its dependencies. One of PsySH's dependencies made a change that broke PsySH's automatic semicolon insertion, but the change isn't in a tagged release yet.\nSo when you run psysh by itself, or when I run my test suite, or whatever, we're getting the stable version of the dependency, but when you install PsySH via composer inside wp-cli, you get the dev version and everything breaks.\nI'll get a fix out for this, since my dependency did the breaking, but this sort of thing will prolly come back to bite you again in the future. The way \"minimum-stability\": \"dev\" propagates in Composer is kinda crazy. I'd avoid using it by default, and only mark explicit things as allowing dev stability.\n. Kk. composer update and PsySH should now work with either dev or stable stability.\n. Thank you. Good catch. I've updated the hosted psysh phar as well.\n. Yes, this needs to happen, but I've been putting it off for too long. Hence the meta redirect :)\nSorry it took me a bit to respond, I've been traveling and have had limited access to interwebs. I'll take a look at this tomorrow.\n. Okay. This is merged into the feature/gh-pages-site.\u00a0I also updated it to Bootstrap v3.0, added some simple styles, and switched index.html to Markdown.\nI'd like to add more custom style, so that it doesn't look like a generic Bootstrap site, but I'll push it live in the interim.\n. Great! Get rid of the bonus () after new AssignThisVariablePass and you've got yourself a deal :)\n. I agree that support for named constants would be awesome\u2026 I'm just not sure if it should be another command :)\nI've been thinking that I'd like to merge ls, ls-classes and ls-functions into one super-awesome ls-anything command.\nls already does double-duty with \"list defined variables\" and \"list class or instance methods, constants, and properties\". In Bash, you don't have a separate command for listing directories, and symlinks, and files. You just have ls. I think I'd like to follow that precedent. Something like this:\nList constants\n\nls --constants: List all defined constants.\nls --constants --user: List all user-defined constants (get_defined_constants(true)['user']).\nls --constants --category date: Equivalent to get_defined_constants(true)['date'].\nls --constants Foo: List defined constants in the Foo namespace.\n\nList  functions\n\nls --functions: List all defined functions.\nls --functions --user: List all user-defined functions.\nls --functions --internal: List all core PHP functions.\nls --functions Foo: List defined functions in the Foo namespace.\n\nList classes\n\nls --classes: List all defined classes.\nls --classes --user: List all user-defined classes.\nls --classes Foo: List classes in the Foo namespace.\n\nList variables\n\nls --vars: List all local variables.\nls --globals: List all global variables.\n\nList ( class | interface | trait ) things\n\nls Bar: List all things Bar.\nls --constants Bar: List all Bar class constants.\nls --methods Bar: List all Bar class methods.\nls --properties Bar: List all Bar class properties.\n\nList instance things\n\nls $baz: List all things $baz.\nls --constants $baz: List Baz class constants.\nls --methods $baz: List Baz class methods.\nls --properties $baz: List Baz class \u2014\u00a0and $baz instance \u2014 properties.\n\nCommon options\n\nls --all \u2026: Include protected and private properties, methods, etc.\nls --long \u2026: Vertical format, analogous to ls -l in Bash.\nls --grep \"foo\" \u2026: Search the listed stuffs by regex or substring.\nls --grep \"foo\" --invert \u2026: Inverted search (requires --grep).\n\nAnd ls\u2026\nCalled by itself, is equivalent to ls --vars, just like it currently is.\nGiving us\u2026\nA command signature that looks something like this:\nls [--vars] [-c|--constants] [-f|--functions] [-k|--classes] [-I|--interfaces]\n    [-t|--traits] [-p|--properties] [-m|--methods] [-G|--grep=\"...\"]\n    [-i|--insensitive] [-v|--invert] [-g|--globals] [-n|--internal] [-u|--user]\n    [-C|--category=\"...\"] [-a|--all] [-l|--long] [target]\n. Obviously, not all options would make sense for all variants on ls. So we'd throw a validation error, just like we currently do if you call ls-classes --invert without a --grep :)\n. And if you ask for more than one thing, we give you more than one thing. Just like we show both constants and methods when you call ls DateTime, we could show functions and classes if you ask for both.\n```\n\n\n\nls --classes --functions --constants Foo\nConstants: Foo\\BAR, Foo\\BACON\nFunctions: Foo\\baz, Foo\\qux\nClasses: Foo\\Quux\nls --classes --functions --constants --grep /a/i Foo\nConstants: Foo\\BAR, Foo\\BACON\nFunctions: Foo\\baz\n``\n. Likewise, if there's ambiguity in your[scope]argument, we can show everything that matches. Say you have both a namespace and a class calledFoo`:\n\n\n\n```\n\n\n\nls --constants Foo\nFoo namespace constants: Foo\\BAR\nFoo class constants: BAZ\n```\n. Yeah, they're currently implemented as three commands because it kinda made sense to group the functionality that way. I sort of always had a grand unification theory somewhere in the back of my mind :)\n\n\n\nI'm thinking it would make sense to break out multiple \"lister\" classes to keep the monolithic command from getting too hairy. Then the command would simply decide, for any given argument list, which listers should be run. Option validation could be handled at that level, keeping things sane when future ways of listing things are added.\n\nOh, and can --category get -C as a shortcut?\n\nSure. Updated the wall-o-text above.\n. Each \"lister\" would basically be one of the current ListingCommand subclasses: one for listing classes, one for listing functions, one for listing constants, and one for listing stuff about classes or instances.\n. Tell you what. Open a pull request against the super-ls feature branch with your ls-defines command and I'll make that into the ls --constants lister.\n. Yeah, PSR-2. PHPCS is wrong about the command definitions:\nhttps://github.com/php-fig/fig-standards/issues/61\nhttps://gist.github.com/philsturgeon/6320152\nAnd it's being fixed:\nhttps://groups.google.com/forum/#!topic/php-fig/qTROKw07848\n:)\n. See also, the discussion here: https://github.com/zendframework/zf2/issues/4390\n. \n\n. Okay, I think this is feature complete other than namespace support (e.g. ls --classes MyNamespace type calls):\nhttps://github.com/bobthecow/psysh/compare/feature;super-ls\n. Annnd merged. The new ls is double plus awesomer :)\nGive it a spin when you get a minute. I'ma use it for a couple of days then upload a new Phar.\n. Thanks :)\nI've got some thoughts on improving the targeting bit at the end (e.g. ls --functions Foo), and I'll add namespace support for ls --constants --functions --classes --interfaces --traits while I'm at it.\n. Oh, sorry, I missed your update to that PR. It's merged now :)\n. Awesome. Thanks :)\n. Done and passing: https://travis-ci.org/bobthecow/psysh\n. \u2026\u00a0Except for the with/without readline part. I'll work on that one of these days :)\n. > .psysh directory created in C:\\ . Don't know is this something you can change for windows to use the %HOMEPATH% variable?\nMebbe, but I don't use PHP on Windows so you're going to have to help me out :)\nOn 'nix systems, it's based on the $HOME environment variable. What actual shell are you using with ConEmu? Do you mind running php -i and looking through the environment variables to find the one that specifies your home directory?\n\nAlso, I can barely read the blue text against a semi transparent over black background in conemu. Any chance of making it brighter or is there a way for me to do that?\n\nThis is a common problem with default color schemes, unfortunately. It's exacerbated by the fact that console app developers really only have 7 colors (plus bold variants) to work with, so they're bound to use all the ones that don't work for your config :)\nYou should be able to fix it in your shell. I'd recommend switching to something like Solarized Dark, which ensures that all colors have high enough contrast to be visible. It looks like Solarized is even built into ConEmu:\nhttps://code.google.com/p/conemu-maximus5/wiki/Settings#Colors\n. Do you mind testing this build? It should have a fix for your home directory:\nhttp://i.0x7f.us/psysh.zip\n. But the phar you downloaded didn't work? It should have the same changes in it :(\n. Great to hear! I'll ship that fix in the next release.\n. Since you're using a pre-release version now, be sure to check out the new and improved ls command. Let me know if it does anything wonky for you :)\n. Heh :)\n. Thanks!\n. Thank you. One of these days I'll get around to writing test coverage for commands so I don't refactor and miss bits anymore :-/\n. Hmm. What OS are you running? which is supposed to fail silently :-/\n. PS: Thanks!\n. The reason it's happening is that PHP deprecated readline in favor of libedit... but they didn't implement the entire readline API. So PsySH is figuring out what level of readline-ish support is available. You can see it happening here. You're getting that warning when it's checking Libedit::isSupported() (here)\u2026\nIt ends up using the next one (LibeditTransient) which works just fine.\u00a0But what doesn't make sense is that which unvis is doing anything besides returning null or a path.\n. What happens when you run this on the command line?\nwhich unvis 2>/dev/null\nHow 'bout this?\nwhich unvis 2>/dev/null || echo \"nope\"\n. Great! Committing a fix now.\n. No problem. Let me know if you run into any more problems.\n. Thanks!\n. That's fixed in the latest version :P\n. See 925cf5c9f016604e69795ebf5822f9953d10f40d\n. But only if you're using 5.4 or higher, as anyone who values their sanity is doing :)\n. On a somewhat related note: how would you feel if PsySH pinged GitHub when it first started up to check whether there's an update?\n. > I would be surprised, in a rather bad way.\nYeah... that's why I haven't implemented it yet.\nBut it's not surprising for text editors, or other apps, or composer. And since there's no composer equivalent to global package installation and gem update, it's not super easy to have a centralized check for updates to things like psysh.\n. Wait, really? I totally missed that.\nHrm. Looks like my installed version of composer doesn't do that.\n. Yeah. That was added after the current tagged release.\n. Nate is right, I was considering a notice (There's an update available!) not automatically updating.\nStill creepy?\n. But if you have pcntl enabled, I could use a background fork :)\n. I'd also throttle it, so it only checked once per n (days|weeks).\n. > What if I don't have the cURL extension installed?\nI dunno. I haven't thought that far ahead. I generally don't like adding dependencies for things that are simple, and I don't like things that degrade the user experience. So whatever I end up doing, it won't do either of those :)\n. > One last thing: what if I'm perfectly happy with the version I currently have installed and don't want to receive update notifications, ever? How can I disable them?\nI'd add a config option to ~/.psysh/rc.php, as usually.\n. Is there anything else we should assert about the constructor while we've got it handy?\n. Thanks. Sorry it took so long to merge this, I've been crazy busy :)\n. Thanks. Sorry, I intended that to be a $this anyway. I wonder where the self came from :P \n. Thanks!\n. That's really interesting, and I'm completely unable to reproduce it :)\nIt sounds like you've got basically the same setup as me, so it's strange that you can convince yours to do something mine doesn't.\nRun this in psysh and let me know which readline adapter it's using for you? It'll probably be either libedit or libedit transient.\n$p = ${'__psysh__'}\nls -alp $p\nAlso, which execution loop?\n. Got it!\nThe problem is actually that the first fork doesn't happen until after this line... which is where the readline history is loaded. Which means, at each iteration of your loop, you're loading the full psysh readline history into the exact same PHP process. And as we can see here, the history isn't being cleared before it's read. Which means it doubles each loop iteration and spirals out of control.\nThe fix would be super straightforward, were it not for PHP 5.5.7's segfaulty awfulness :(\n. Here's the culprit. It's supposedly a fix for this bug... but I'd rather have readline_clear_history() than uncooked input on STDOUT, personally.\nI verified it by reverting that change and building PHP 5.5.7, and no more segfaults!\n. This is blocked by context-aware code cleaners, which we don't have just yet. I'll close it for now, but possibly revisit in the future.\n. Overall, this looks great! I'd been meaning to write a pure-PHP unvis for a while, but hadn't gotten around to it. Thanks for that :)\nDo you mind running everything through php-cs-fixer and phpcs to get it PSR-1/2ified?\nA couple of notes:\n- I didn't like the \"erase duplicates\" option initially, because they would really mess up things with code blocks (e.g. never writing the closing brace). That would make it a lot harder to replay history. But as of ce7f34d code blocks only take up one line of history so that shouldn't be a problem.\n- We do need test coverage for that assumption though.\n- Yoda conditions can go die in a fire.\n- Additional comments inline.\n. Also, you should rebase this onto the latest master branch, so that you get the code block history fix and so that I can use the merge button on GitHub.\n. :+1:\n. The two new config options should be added to the README.\nAdding a default history size limit isn't a problem, but I think it should be much bigger than 1024. Maybe 250k or so? I've gotten above 5000 and not had any problems. I'd have to benchmark it to see if 250k is too big, but that's what fish uses and they usually make good decisions :)\n. Anything else that needs done before this is merged?\n. Thank you so much for your work on this. It's been merged into master and will go in the next dist build.\n. Good catch. That was lost in the change that buffered code blocks and added them as a single history entry. Fixed now :)\n. For number 2, you can simply run ./psysh /home/some/include.php. Or as many additional files as you want, in fact.\n. For number 1, you can make use of the fact that rc.php is code, not just data, and do whatever you want :)\n``` php\n<?php\nswitch (isset($_SERVER['ENV']) ? $_SERVER['ENV'] : null) {\n    case 'development':\n    case 'dev':\n        return [\n            'defaultIncludes' => [...]\n            'commands' => [new \\Psy\\Command\\ParseCommand],\n        ];\ndefault:\n    return [\n        'defaultIncludes' => [...],\n    ];\n\n}\n```\nThen (from most shells) you'd run:\nbash\nENV=dev ./psysh\n. Awesome!\n. I'm going to close this issue. Feel free to reopen if you run into any more limitations with this.\n. Good catch. My only concern would be if something else set an error handler between when we set and when we restore, but since we're just doing a loop with reflection in there, it's fine.\n. I'll get this merged once I have a chance to write a test for it. Unless you want to, to speed the process along ;)\n. Never mind, I can't test it because PHPUnit already has an error handler installed, so the old version doesn't fail (it's restoring properly via the set_error_handler($oldHandler) call. Oh well :)\n. Honestly, I don't use code that triggers errors all that much, so it hasn't been a huge concern of mine :)\nHow's this for you?\n\n. Thanks!\n. No, that shouldn't be happening. Can you give me more info about your setup?\nOperating system, Shell, Terminal app, PHP version, libedit/readline/none of the above, etc?\n. Until we sort this out, you can also terminate with the \"exit\" command.\n. Is that the PHP version that shipped with your OS?\n\nNot sure how to tell if I have readine/libedit enabled\n\nIf you hit up inside psysh, does it show you your last command?\n. Nope. Looks like it's PHP-without-readline related. I was just able to reproduce it by running psysh with readline disabled. I'll see if I can sort it out.\nSide note: you'll like your life a lot better if you run a readline-enabled PHP :)\n. How 'bout we just fix it, instead? ;)\n. In PHP 5.4+ you can run your application using the built-in CLI SAPI web-server. PsySH works great with that :)\n. @kor3k that seems like a different issue... can you run psysh normally?\n. @kor3k do you mind opening a new issue for this with as much information as you can?\n. @gpoulin2 Hmm. That's either a regression or an issue with PHP versions or something. Do you mind opening another issue for that?\n. It's fixed :)\n. I don't think there are too many instances of this. PsySH does target anything PHP 5.3+, so any more of these you find should be fixed as well.\n. Great. Thanks for checking!\n. This is true. \"Automatic semicolon insertion\" isn't intended to imply that psysh changes the semantics of the language, only that, if any given input would be valid if it had a semicolon at the end of it, we'll go ahead and pretend you had one to begin with. It's trying to save you from the \"why didn't the thing i just typed return anything? Oh yeah, semicolon\".\nI'd welcome a pull request with more precise documentation.\n. Let's leave the installation instructions in the readme for now. I'm actually considering removing the config documentation from the website as well, and putting a link back to the readme. Things like that don't seem to do a great job of advertising, so we'd be a lot better off with more awesome examples :)\n. @henrikbjorn either of these should do the trick:\n```\n\n\n\ndoc SomeClass::methodName\ndoc $instance->method\n``\n. Or runhelp docin PsySH and it shows you :)\n. @michabbb You should be using the SQLite 3.x driver (i.e.sqlite) not the legacy 2.x driver (sqlite2). Also, @Zauberfisch is right. If you have any more trouble with this, please open a new issue :)\n. [That's on the planned feature list](https://github.com/bobthecow/psysh/blob/master/src/Psy/Shell.php#L218-L220). I'd welcome a pull request if you want to take a shot at it :)\n. I don't think it's possible for psysh to change the meaning of tab, since that's handled by readline or libedit. It may be possible for you change your libedit configuration in.editrcthough. \n. If you're not gettingctrl-rand.inputrc` support, you probably don't have PHP compiled with readline (or libedit) support, so you're getting the dumb fallback? Check:\n\n\n\n```\nPsy Shell v0.2.1 (PHP 5.6.4 \u2014 cli) by Justin Hileman\n\n\n\n\\Psy\\Readline\\Libedit::isSupported()\n=> true\n\\Psy\\Readline\\GNUReadline::isSupported()\n=> false\n\\Psy\\Readline\\Transient::isSupported()\n=> true\n``\n. Yeah, libedit uses.editrc`: http://www.freebsd.org/cgi/man.cgi?query=editrc&sektion=5\n. no worries :)\n. Fixed by #141 \n. Thanks! \n. Interesting. It's probably due to the size of the output, maybe a pager or pipe issue in terminal. I'll take a look when I get a minute. Do you mind putting together a smaller reproducible test case?\n. This works, though:\n\n\n\n```\n\n\n\nfile_get_contents('http://www.reddit.com/'); null\n=> null\n```\n\n\n\nWhich leads me to believe it's a problem processing either the size or the content of that page.\n. ```\n\n\n\n$r = file_get_contents('http://www.reddit.com/'); null\n=> null\nstrlen($r)\n=> 114117\nsubstr($r, 0, 10000)\n=> ...\nsubstr($r, 0, 20000)\n=> ...\nsubstr($r, 0, 30000)\n=> ...\nsubstr($r, 0, 40000)\n```\n\n\n\nand it crashed on 40k.\n```\n\n\n\nsubstr($r, 30000, 30000)\n=> ...\nsubstr($r, 30000, 40000)\n```\n\n\n\nand it crashed again. There's something about that size of string, not the content of it. I'll keep digging.\n. And here's the culprit. Using RegExp to escape characters in a string that size is probably asking for trouble. I'll split it into chunks before escaping it.\n. Nope. Just kidding. The escaping is working fine. It must be something about rendering an escaped string that long? Still digging :)\n. Got it. It's this bug upstream: https://github.com/symfony/symfony/issues/9462\npcre is segfaulting because of the complexity of the regular expression they're parsing console output with.\n. This is fixed by symfony/symfony#10231 ... I'm not sure how long it'll take to get it released, but once that happens PsySH will be set.\n. @fabpot Thanks. I'll cut a new release.\n. @camspiers Thanks for reporting this. @fabpot thank you for the fix.\nA new version of PsySH has been pushed to psysh.org, and it can file_get_contents reddit. If that's what you're into.\n. Thanks. \n. If you use the psysh phar, you can just require that and don't need an autoloader at all. Otherwise, you can use any PSR-0 compliant autoloader by registering path/to/psysh/src as the base directory for Psy.\nYou'll need to install and register psysh's dependencies as well, i.e. symfony/console and nikic/php-parser, and the process for that should be about the same.\n. PHP autoloaders don't override... you can register additional autoloaders, but having psysh's autoloader registered wouldn't keep you from registering your own. \n. @michabbb I think I figured out what's happening here (or at least what happened to @richardjortega).\nDid you install psysh globally with Composer, and were you, by chance, requiring the bin/psysh file rather than Composer's autoload.php? If so, I just pushed a change to the develop branch that makes bin/psysh act like an autoloader when you include it, rather than having it spin up a shell immediately.\n. :+1:\n. Hmm. That's an interesting one. It's technically not incorrect, since that's the class it's currently running in\u2026 Maybe we could fake it the same way we fake the __FILE__ and __DIR__ magic constants.\n. @hason There's a (partial) fix for this in the develop branch (see commit above).\nIt only fixes get_class(), get_called_class(), get_class(null) and get_called_class(null) calls. It doesn't check types on passed arguments, for example.\n. The partial fix has been released in v0.1.1. Since an argument-aware fix will have to wait until we have context-aware code cleaners, I've added a TODO to revisit it for a full solution later. I'm going to close this as fixed.\n. Thanks for the bug report. This has been fixed in the develop branch. I'll cut a release soon.\n. This has been released in v0.1.1. Thanks again!\n. Yeah, I've used it. I think PsySH is better, but I'm probably a bit biased.\n. Because PsySH surprises me less often :)\nIf you're looking for features that are better, try these on for size.\n. @kor3k This should be fixed in the develop branch. Do you mind giving it a shot?\nAlso, install PHP with Readline or Libedit. It will make things so much awesomer.\n. @kor3k it doesn't have a hard dependency. Hence \"It will make things so much awesomer\" instead of \"it is required\" :)\n. This fix has been released in v0.1.2\n. PsySH uses either libedit or readline, if they're available, both of which should respect your .inputrc or (more likely) .editrc file. I don't personally use vim bindings, but I believe this should help?\nhttps://geminstallthat.wordpress.com/2008/10/19/adding-vi-keybindings-to-irb-scriptconsole-mysql/\nIf you're using a lame version of PHP, there's a chance it was compiled without libedit or readline support, in which case you should probably fix that :)\n. I take it that fixed your bindings?\n. That's strange. How do you manage to get a trace with zero entries in it?\n. Right, of course. I was thinking about this from the require end, where it would always have at least one item in the backtrace. But if you execute it directly, it would be empty. Thanks :)\n. This has been released as v0.1.3. Thanks again!\n. Oh, you're right. I broke it with a fix for another issue :-/\n. Okay. This has been fixed in v0.1.4. Go ahead and download the new phar.\nThanks for reporting the issue!\n. No problem.\n. Thanks for reporting this. It's been fixed in the develop branch, if you want to give that a shot. I'll get a release out shortly.\n\n. And released. Update to v0.1.5 for the new ArrayObject goodness. Or at least less of the old ArrayObject badness :)\n. I agree. I'm not entirely sure what the best way to do this is, but I wanted a fix for the bug in the interim.\n. Yeah, that's been the general philosophy behind presenters.\nWith the MongoCursor, it suppresses some fields entirely, and suppresses others when they don't provide any useful information (skip: 0, etc).\nUsers can also use ls to get properties of ArrayObjects, the same way you would get private properties on any other object:\n\n. Hmm. Actually, they're not showing up for ls for some reason. But that would be a bug in ls :)\n. Ahh. Got it. That's due to ArrayObject itself messing with things.\n. It seems that reflection (and thus ls) respects the STD_PROP_LIST constructor flag.\n\nvar_dump must cheat to get at the properties ;)\n. Yeah, reflection has no access to properties set on ArrayObjects which are constructed without the STD_PROP_LIST flag. We could do something crazy like serializing them and parsing, since the properties show up in serialize output. Or var_dump and parsing, since the properties show up in var_dump output. But frankly, I don't think I care that much :)\n. Yeah. Yay Reflection. Yay PHP!\n. The existing implementation was commented out because this sort of thing is problematic :P\nI've been leaning toward creating a Completer service (or set of services) much like the Enumerators used by ListCommand. In fact, the Enumerators might actually be reusable as a source for method names, properties, etc.\n. Closing in favor of #141 \n. Good catch. I think I'm going to flip it around so that the defaults are included during getIncludes() rather than during the setting.\n. Thanks for reporting this. It's been fixed in v0.1.7.\n. That is a good question. I'll look into it when I get a minute :)\n. Yep. I've meant to do this for a while \u2014 the extension points were already there, they just weren't wired up to command line options. So now they are :)\nIt's in the develop branch, and works there. It'll go into the next release.\n. Yes, yes it should escape quotes. php -a Is categorically wrong here. \nEither you echo it, in which case you see no quote at the start and end of the string, but the middle quotes are not escaped, or you dump/inspect it, in which case the string starts and ends with a quote, and the quotes in the middle have to be escaped. \n. I take it you're referring to the output of var_dump?\n. \n. No worries :)\n. Yes, the gdb style interface would (will?) be nice. It's a big undertaking though :)\nYou can have the modified values now, though!\nphp\nextract(\\Psy\\Shell::debug(get_defined_vars()));\n. Oh, interesting. Thanks for that @moolen!\n. Thanks to @5tevan, this is fixed in the development branch. It'll go out in the next release :)\n. This should be fixed (as of v0.8.0). Let me know if you run into any issues.. The problem is just what it said. PsySH tried to create a .psysh directory in your $HOME but didn't have permission. This is probably because $HOME is set to /, and PHP almost certainly doesn't have write permission in your root directory.\nThe easiest answer is probably to make a .psysh directory yourself and change the owner/permissions so that PHP can write to it. I can also catch that error and give a more descriptive message.\n. It's not trying to write something in the project root. It's trying to write something in your home directory. Because that's where dotfiles go :)\nThat is the full directory it's trying to write to. $HOME/.psysh. In your case, $HOME == /, so that's //.psysh.\n. No, it's not ~, it's the value of $HOME, which, for some reason, is / for the user you're running psysh under. Maybe something to do with your VM?\n\nIn your case, $HOME == /, so that's //.psysh.\n\nThat's in your root directory.\n. @taylorren How are you running your PHP app?\n. To use PsySH inside a request context, you need to run it with the built-in PHP SAPI command line server. Something like this:\nsh\nphp -S localhost:3000 -t web web/index.php\n\u2026\u00a0or something like that :)\n. It's just the return symbol. It's a Unicode character, though, so if your shell doesn't handle Unicode characters it'll show up as a little box, usually. There's a lot on Cygwin localization here, but I'd guess your $LANG is set to something ASCII. If that's the case, try running this:\nset LANG=en_US.UTF-8\nthen run psysh and see if the character works properly.\n. @CMCDragonkai Any luck with the Cygwin localization?\n. If you echo a UTF-8 character in your shell, does it work?\necho \u2713\n. Okay then, maybe it's PHP? What happens when you run this?\nphp -r \"echo '\u2713';\"\n. Okay, what happens if you put that echo statement in a php file and run it? What happens if you run it from within PsySH?\n. if you echo something with \\n at the end of it, does it have a percent sign?\n. So that % sign serves the same purpose as the \u23ce in PsySH. It's indicating that your shell inserted a newline for you so that the prompt wouldn't be stuck on the end of the line you echoed.\n. No, the box is a \"return\" character, it's just used for the same thing :)\n. oh, can you echo that actual character? \u23ce\n. maybe it's just missing in the windows shell font?\n. \n. But I'm using Source Code Pro in my terminal, and it's not missing the return character :-/\n. Oh, no, the Mac version of the font. I don't usually do dev on Windows boxen, so I don't customize fonts there :)\n. Alright. I'm glad we got that worked out. Do you feel like \"use a better font\" is a good enough answer to this for future users, or should I add a config option for not using UTF-8 characters in PsySH output?\n. Are you using the Phar version of PsySH? It might have something to do with that...\nDo you mind cloning the git repo and running php bin/psysh from there to see if it works any better?\n. I'd be happy to accept a pull request to that effect.\n. This has been implemented and is in develop. It'll be in the next release.\n. I agree, and I looked into this a bit. A few things to work through:\n- What happens when you installed as a project dependency via Composer and are running it from ./vendor/bin?\n- What happens when you installed globally via Composer?\n- What happens if you're running from source vs phar?\nPossibly the self-update command is only available when installed via phar, and not even added to any of the local directory or Composer based installs.\nAdditionally, it takes quite a bit to make downloads work reliably. If you get a minute, check out the source for Composer's self update command\u2026 There's a lot of overhead (guzzle or similar, for one) and a lot of code to make it happen. Is it worth adding that complexity, not to mention adding another dependency? I don't know. Maybe?\nI agree, though, it would be awesome to have. We'll keep this issue open in the meantime :)\n. Oh, oops. Updating!\nYou can always get the current release from the releases tab here on GitHub :). Heh. Fair enough. We'll get a self-update one of these days :P . Hmm. Interesting. 1 - 1 prints 0 too. I'll look into this.\n. Thanks for reporting this. I've got a fix in the develop branch, and it will be in the next release.\n. Eww. That's definitely a Symfony thing. I'm running OS X and I don't see that, though. Maybe it's your terminal or shell settings?\n. I'm using iterm2 with Mavericks. Are you using iterm or iterm2? If you're still on iterm, try upgrading?\n. I've got the appropriate color codes in Terminal and iTerm2, with both bash and fish shells on Mavericks. Mind trying Terminal and other shells if you've got 'em?\n. Let us know when you find it so we can let others know :)\n. Ahh, yeah. That'll do it.\nThe default works because it's using less -R:\n\nLike -r, but only ANSI \"color\" escape sequences are output in \"raw\" form.  Unlike -r, the screen appearance is maintained correctly in most cases.  ANSI \"color\" escape sequences are sequences  of  the form:\nESC [ ... m\nwhere the \"...\" is zero or more color specification characters For the purpose of keeping track of screen appearance, ANSI color escape sequences are assumed to not move the cursor.  You can make less think that characters other than \"m\" can end ANSI color escape sequences by setting the environment variable LESSANSIENDCHARS to the list of characters which can end a color escape sequence.  And  you can make less think that characters other than the standard ones may appear between the ESC and the m by setting the environment variable LESSANSIMIDCHARS to the list of characters which can appear.\n\n... actually it's using less -R -S -F -X, which does \"raw color codes\", \"chop long lines\" (i.e. scroll to the right instead of wrapping), \"quit if one screen\" so it doesn't page things that are really short, and \"disable init\", which keeps it from clearing the screen before paging.\n. Okay, I'll close this as it's not an issue with PsySH, per se, but it'll hang around in case someone searches for similar issues :)\n. Nobody should kill themselves over GitHub issues :)\n. @oxfist It's likely not a readline issue here.\nIn order to debug a web request, you need to serve your app using the CLI SAPI built-in web server. Are you using that?\n. > During web request debugging, the prompt \">>>\" doesn't appear\nThat should still appear... It does for me. When you're debugging a web request do you have readline enabled (can you hit \"up\" and get the last line you typed)?\n\nIf some error happens such as syntax error or typo, web request debugging mode has finished automatically.\n\nWhat operating system are you using? Does PsySH normally recover from errors when you run it from the command line? Are the resulting messages red or white?\n\nThe strings \"#!/usr/bin/env php\" still appears at the top of web page. Is this intended?\n\nAs far as I know, the only way to prevent that is to use Composer (or source) install instead of the Phar and autoload the code. Yay PHP! :)\n\nget_defined_vars() which is used in the document doesn't get the variables outside class. So It's difficult to load complete program state in an ordinary MVC framework such as CakePHP.\n\nYou can pass whatever variables you want to the shell... in many cases, the defined variables are enough. But if you want to pass in global variables, or class member variables, or $this you absolutely can. (Note that you can't name $this this when you pass it in, since that's a magic variable name and will be overridden to point to the shell)\nphp\nclass Foo {\n  public function doSomething() {\n    \\Psy\\Shell::debug(array('_this' => $this));\n  }\n  public function getSomethingElse() {\n    return 'else';\n  }\n}\nthen...\n```\n\n\n\n$_this->getSomethingElse()\n=> \"else\"\n```\n. Thanks for the bug report. This has been fixed in v0.1.10 :)\n. No problem.\n. Not impossible :)\n\n\n\n\n. This has been fixed in the develop branch. Feel free to give it a spin there and make sure it acts like you'd expect.\nI'm not going to release this just yet\u2026\u00a0I'll sit on it for a bit and see if I can figure out why the code that was supposed to make this work before wasn't.\n. ^ There's the right fix :)\n. This has been released in v0.1.11. Thanks for reporting it :)\n. That sounds like you're missing readline/libedit support. It might be because you've got a slightly different PHP config or version when you're running phpunit. Mind checking that out?\n. Run phpinfo(INFO_GENERAL) in both places, make sure they're using the same php.ini file and the same PHP version :)\n. $this isn't in get_defined_variables().. you can pass it in if you want though.\nphp\n    public function save($object = '', $related_field = '')\n        require('/Users/saul/projects/Paddle8/psych');\n        \\Psy\\Shell::debug(['this' => $this]);\n. As I'm sure you've figured out, that sentence meant you can do ls --functions to list functions.\n\nI'll look into the fatal error though. That should definitely not be happening.\n. I totally agree. Leaving this issue open until I get around to that :)\n. We check the php version before calling bindTo\u2026 it'd be simple enough to check that we're not running hhvm as well. \n. (installing hhvm so i can play with it)\n. Annnd it failed. BRB, finding a Vagrant box.\n. That commit gets it started ^\nThe full test suite doesn't currently pass, but at least now you can run it on HHVM :)\n. As of HHVM 3.5.0 the loop binds properly, so that's been updated. I added a fix for another HHVM bug that kept builds from passing (see 7fd995d). But right now my dev machine doesn't have a working HHVM instance, and I spent an hour last night building and re-building and finally gave up. So HHVM tests still don't pass, is what I'm saying. I'd welcome pull requests from anyone who's into that sort of thing, though, because I don't think it'll take much to get things working.\n. PsySH has been working with HHVM for ages now. I guess I should close this :)\n. dev-master would be the wrong version constraint ;)\nLet's go with composer global require psy/psysh:~0.1?\n. Good call, thanks.\n. Fixed :)\n. Unfortunately we're a bit limited by libedit on exactly how the interaction works when you edit something in your history. I don't know that there's any way to tell whether you hit enter at the end of the block of lines, or in the middle, so we can't tell whether to execute it or add a newline.\n. I've looked into this a bit. Because we're not dealing with input one keystroke at a time, we can't hijack the enter keystroke. We could switch to one-character-at-a-time input, but that's not a trivial undertaking, and just for overriding what happens when you press enter it might not be worthwhile.\n. Perhaps I'm missing something, but I'm not sure I see the point... You don't move your .bashrc, or your .profile, or your .vim folder. The reason for the config flag isn't so you can globally change the location of your config file, it's so that you can sometimes use different config files.\n. But 90% of other programs don't ;)\n. Full XDG Base Directory support has been implemented in be01ae42aa46f60b2690813d510ed7782449d9a7 and is in the xdg-base-directory-support feature branch\u2026 I'll need to add backwards compatibility and a migration so we don't strand existing users, but I'm okay with using this going forward.\n. Okay. I think I've settled on something I'm happy with. The current implementation supports (in order of priority):\n- An explicit --config flag on the psysh binary.\n- A $PSYSH_CONFIG environment variable.\n- config.php or rc.php in any of the following:\n  - ~/.psysh/\n  - $XDG_CONFIG_HOME/psysh\n  - A psysh directory in any of the $XDG_CONFIG_DIRS directories\nAdditionally, the php_manual.sqlite data file can be explicitly set in the config file specified above, or it will be found in:\n- ~/.psysh/\n- $XDG_DATA_HOME/psysh\n- A psysh directory in any of the $XDG_DATA_DIRS directories\nFinally, all named pipes now support a runtimeDir explicitly set in the config file specified above, or $XDG_RUNTIME_DIR/psysh (if XDG_RUNTIME_DIR is present), and fall back to the previous default \u2014 a psysh directory under sys_get_temp_dir().\n. Added bonus: this is 100% backwards compatible :)\n. This has been merged into develop and will go out in the next release. Let me know if you have any issues.\n. PsySH changes errors into exceptions so that it can actually deal with them rather than having your code crash and burn. If you can come up with a way to do that without throwing exceptions, I'm happy to hear it :)\n. FWIW, if you didn't catch that exception it would have shown you exactly that, because it's throwing an ErrorException for the error.\n. Symfony follows SemVer, so it should just work. I'd be happy to accept a pull request if you want to test it, otherwise I'll update when I get a minute.\n. Yes, it is possible, but it depends on (1) you having libedit or readline compiled into your PHP, and (2) you having the proper key bindings configured in your shell.\nCan you use the arrow keys to navigate history when you run php -a?\n. No problem, glad you got it sorted out :)\n. Thanks for the composer.json update, @staabm :)\n. Thanks! This has been merged into develop and will go out in the next release.\n. Return values are intentionally not syntax highlighted. If you use the dump or ls commands you will get the colored representation.\n. Probably because the return values were cyan before there was any highlighting (or dump command) available at all.\nI'm not opposed to changing return values to be syntax highlighted, but it will be a bit more complex than this \u2014\u00a0the <return>...</return> wrapper will need to be removed, for one, and tests updated. I'm not sure what else it will take.\n. No, keep it open. It still needs to be implemented :)\n. This has been merged into develop. Thanks :)\n. > Note: This project is experimental, so the API is subject to change.\nHrm. :-/\nI'd accept a pull request that changes to v1.0.0beta1 if you have a minute, otherwise I probably won't get to it for a little while.\n. > With the new PHP 5.6 release today, this issue has become even more important. The new 5.6 syntax requires the newer 1.0 release of PHP-Parser.\nAgreed. PR? ;)\n. It turns out that it already Just Works.\nhttps://github.com/nikic/PHP-Parser/blob/master/lib/PhpParser/Autoloader.php#L38-L229\nThanks for the magic @nikic :)\n. This has been merged into develop. Feel free to check it out :)\n. :+1: Thanks! Do you mind making this pull request against develop?\n. :+1: \n. Thanks again!\n. Mind testing a fix for me? Open Psy\\Output\\ShellOutput and replace all 'white' with null:\n``` diff\ndiff --git a/src/Psy/Output/ShellOutput.php b/src/Psy/Output/ShellOutput.php\nindex f54b07c..a9ef1f1 100644\n--- a/src/Psy/Output/ShellOutput.php\n+++ b/src/Psy/Output/ShellOutput.php\n@@ -175,19 +175,19 @@ class ShellOutput extends ConsoleOutput\n     $formatter->setStyle('warning', new OutputFormatterStyle('black', 'yellow'));\n     $formatter->setStyle('aside',   new OutputFormatterStyle('blue'));\n\n\n$formatter->setStyle('strong',  new OutputFormatterStyle('white', null, array('bold')));\n$formatter->setStyle('strong',  new OutputFormatterStyle(null, null, array('bold')));\n         $formatter->setStyle('return',  new OutputFormatterStyle('cyan'));\n         $formatter->setStyle('urgent',  new OutputFormatterStyle('red'));\n         $formatter->setStyle('hidden',  new OutputFormatterStyle('black')); // Visibility\n\n\n$formatter->setStyle('public',    new OutputFormatterStyle('white', null, array('bold')));\n$formatter->setStyle('public',    new OutputFormatterStyle(null, null, array('bold')));\n     $formatter->setStyle('protected', new OutputFormatterStyle('yellow'));\n     $formatter->setStyle('private',   new OutputFormatterStyle('red'));\n     $formatter->setStyle('global',    new OutputFormatterStyle('cyan', null, array('bold')));\n     $formatter->setStyle('const',     new OutputFormatterStyle('cyan'));\n     $formatter->setStyle('class',     new OutputFormatterStyle('blue', null, array('underscore')));\n$formatter->setStyle('function',  new OutputFormatterStyle('white'));\n\n$formatter->setStyle('function',  new OutputFormatterStyle(null));\n// Types\n $formatter->setStyle('number',   new OutputFormatterStyle('magenta'));\n```\n. Really? That's interesting. I was able to reproduce your issue, but applying the change above fixed it for me.\n. Here's the results I'm seeing \u2014 top is before the change, bottom is after:\n\n\n\n\n\n. Great! It'll be in the next release.\n. Soon. Possibly this weekend? I've got a few more things I'd like to get into it, as it's going to have (slight) BC breaks. So I'd like to get all of those over at once. \n84, #90, plus a few other things that I've been meaning to do.\n. Oops. Should have been against dev\n. Sweet!\n. Thanks for doing this!\nI'm not 100% sold on adding the flag param. I'm not opposed, either, it just feels like a bit of a code smell :)\nAdditionally, at this point, the $color param is basically dead weight. Everywhere a presenter is used, it's used with color. I'd like to remove it, since that should be fully backwards compatible. But then that would leave this flag hanging out there, and the flag would conflict with any code calling present or presentRef with $color == true.\nWould it work to define a third method, presentAll or something? I'm not sure that's the approach I want to take, but I do prefer multiple functions rather than bitmask parameters.\nWhat do you think?\n. I pushed a branch removing the $color param\u2026\nhttps://github.com/bobthecow/psysh/compare/develop...feature/always-colorful\nI guess it wouldn't be horrible to stick the $options param back in where that was. Nobody consumes presenters, they just write their own. So they might unintentionally get (or not get) what they think is a color param but is actually a verbose flag. Not the end of the world, and certainly wouldn't break anything before they update their presenters.\n\nIn my case for ezsh, I basically only need protected properties for value objects. \n\nDo ezpublish value objects have an interface or base class? Would it make sense to create presenters explicitly for them?\n. No, I wouldn't make you rebase against mine. You wrote yours first, that'd be kind of a jerk move :)\nI feel like having multiple levels of verbosity might be a bit overkill at this stage, so I'm inclined to stick with just --all to match ls -a. We can always add more granularity and control later. If you're writing dedicated presenters for your classes anyway, this might mitigate some of the issues, right? Does this work for you or would you still like to see more granularity?\nIt doesn't look like options are necessary for presentRef, which would make sense, because presentRef doesn't ever present properties. The one issue with that might be the Scalar Presenter, it might need to implement present in terms of presentRef instead of the opposite like it currently does. That said, it's not like either direction would include properties with that presenter, so it might be a complete non-issue.\nSo:\n- [ ] Do you mind making sure the parameter documentation is consistent between all the classes? It looks like some are documented and some are not.\n- [ ] Remove options param from presentRef signature?\n- [ ] It would be great to see at least a bit of test coverage for this :)\n. Thanks for all your work on this! It's been merged into develop, and will be in the next release.\nI added colored property names to indicate protected/private as well :)\n. Done! Thanks again for your contributions. \n. I've always thought of the >>> as PsySH's \"logo\", personally :)\n. You might be right. They were using it long before PsySH.\n. Huh. Many things might be the problem. Unfortunately I've never seen that happen (or even heard of it) so you're going to need to give me more information so I can help you :)\nWhat OS, OS version, PHP version, and style of psysh (composer global install, git checkout, phar) are you running?\n. > I solved that, the problem was open_basedir directive in php.ini.\nYeah, that shouldn't cause a segfault :)\nWhat did you have open_basedir set to? Was that a default value?\n. Yes :)\nStart your app using the built-in SAPI CLI server rather than Apache or Nginx (e.g. php -S localhost:8000 index.php).\n. With the open_basedir issue, did you get an actual segfault, or did you get something more like this?\n```\nPHP Warning:  is_file(): open_basedir restriction in effect. File(/Users/justin/.composer/vendor/psy/psysh/bin/../vendor/autoload.php) is not within the allowed path(s): (/Users/justin/Projects) in /Users/justin/.composer/vendor/psy/psysh/bin/psysh on line 14\nPHP Stack trace:\nPHP   1. {main}() /Users/justin/.composer/vendor/psy/psysh/bin/psysh:0\nPHP   2. is_file() /Users/justin/.composer/vendor/psy/psysh/bin/psysh:14\n\u2026\n```\n. Never mind, I was just able to reproduce it. I'll try to track this down.\nMeanwhile, do you mind opening new issues for problems or questions you have that are unrelated to your initial issue? It makes things easier to keep straight :)\n. Somewhat related: open_basedir is a huge pain. There doesn't seem to be a way to tell beforehand whether an is_dir or is_file will cause a problem without parsing the ini setting yourself.\n. The directory you start the server from is the \"root\" as far as the cli-server is concerned. If you want to run the server from a different root, start it in a different directory. You can also specify the front controller by using a file name other than index.php, and you can specify the base directory by passing a -t foo/ option. See the docs page for more info.\n. Maybe I don't understand what you're asking. You \"pass the URL\" via a browser, just like you do for every web server...\n. Run php -S localhost:8000 index.php, then visit http://localhost:8000/test/me in your browser.\n. For now, you need to run it from the CLI server. In the future there will be more options, but they're a lot more complicated and haven't been implemented yet :)\n. Would it make sense to parse open_basedir restrictions and try to avoid looking for config files outside the open_basedir folders? How much complication should we add to work around a bug in PHP?\n. I see the appeal of this, but it seems outside the scope of the website. If PsySH were to distribute older pre-compiled Phar versions, they would likely be distributed via GitHub releases instead of uploaded to the psysh.org.\nIs there a reason your ebuild wouldn't compile its own Phar for the requested version?\n. Are you running an up to date version of PsySH? (Latest is v0.2.0)\n. Sorry about that. We've been waiting on a tagged release of php-xdg-base-dir for a month now. If I had known it would take this long, I would have added a note to the install instructions.\n. @JoakimLofgren Yep, it's tagged.\nThe fix for this has been released in v0.2.1, so you don't need to require @dev anymore!\n. See #138 for a WIP implementation of this :)\n. Oh! This exists now, as the timeit command \ud83d\ude04 . This has already been fixed in the develop branch:\nhttps://github.com/bobthecow/psysh/blob/develop/composer.json\nWe're just waiting on a tagged release from one other dependency (also a @dev) before tagging an updated PsySH release. (See dnoegel/php-xdg-base-dir#1)\n. Nope, it's a bug from a change in the underlying PHP parser library that we didn't catch. Thanks for the heads up!\n. Your fix has been released in v0.2.1. Thanks again!\n. Thanks for taking a look at this (and thanks for the test coverage!). I'll fix those two issues and merge your changes into the development branch.\n. This is now in develop, and will be in the next release. Thanks again!\n. No worries at all.\n. The \"unserialize\" error at the end doesn't matter. That's just PHP telling you you won't have access to your Test class object once you leave the shell. I've just pushed a fix for that into the develop branch.\nI'm not sure what's going on with bind, I'll see what I can come up with.\n. I think I figured out what's happening. I'm just not sure how to work around it :)\nEvery bit of code you run in PsySH is executed inside a closure. This includes any files you include or require. See, for example, this line, where the files passed in from the command line are included (e.g. psysh test.php).\nIf you define a closure inside a closure defined inside a class (or inside a file included by a closure defined inside a class), it will inherit the scope of the outer closure. That means that $this will be defined inside the inside closure, and it'll refer to the class the outside closure was defined inside. It's a little weird and unexpected to have a value for $this inside the file you included in PsySH, so the shell explicitly unbinds its execution closure from itself, which kills the $this (unless it has another $this value from where you started the shell\u2026\u00a0in that case it'll bind to the other $this instead). See this block.\nUnfortunately PHP's closures don't deal well with switching bindings. Unbinding the $this still leaves us in the scope of the class where the closure was defined, but now we're in 'static' instead of object scope. And that's a crappy place to be, because PHP doesn't let you get back out of static scope, even if you want to. Here's the relevant snippet from the docs:\n\nThis function will ensure that for a non-static closure, having a bound instance will imply being scoped and vice-versa. To this end, non-static closures that are given a scope but a NULL instance are made static and non-static non-scoped closures that are given a non-null instance are scoped to an unspecified class.\n\nIf a closure ever has static scope, it can never be re-bound in an object scope. If it ever has object or static scope, it can never be re-bound with no class scope\u2026\u00a0at least as far as I can tell.\nSo when PsySH defines the loop execution closure, it gets object scope. It then unbinds the closure so that $this will go away, and it becomes static scope instead. This static scope then infects all closures defined inside the REPL, and all closures defined in files included into the REPL, and there's no way to re-bind them to object scope or no-scope.\nSounds pretty bleak, huh? Yay PHP!\nI started out this novel of a comment explaining what I thought was the problem, and why PHP acted that way, and how there wasn't any way to work around it, but in the process of fact checking my assumptions, I just came up with a (super-ghetto) way to work around it!\nI'll push that to a feature branch in a second :)\n. On Windows it should be in\nphp\ngetenv('HOMEDRIVE') . '\\\\' . getenv('HOMEPATH') . '\\\\.local\\\\share\\\\psysh\\\\'\n. Are you running the latest version of psysh?\n. Ahh. The default config and data directories changed in v0.2.0. They now follow the XDG basedir spec (with fallback for the old defaults). If you're running v0.1.12 you'd put the manual db file in .psysh under %USERPROFILE%.\n. Re: the config directory on Windows \u2014\u00a0do you know of any PHP packages that use something besides dotfiles on Windows? What does Composer use?\n. Thanks for the info. Let's keep this issue open as a potential future enhancement.\n. :+1:\n. Thanks for catching that! This has been merged into the develop branch and will go out in the next release.\n. Why 2.4.2?\n. But it actually requires something out of 2.3.10, otherwise I wouldn't have set that :)\n. Oh hey, what do you know:\nhttps://github.com/bobthecow/psysh/commit/7dd09a989eb491b5871240812ff902776b22f527#commitcomment-5428122\n:)\n. Do you know of any projects with dependency version test coverage? I've added it manually for one project that has been bitten by dependencies with BC breaks in the past, but it'd be nice to actually be able to generate a build matrix that at least tests the extents of the dependency version range, even if it doesn't test every possible version.\n. Also, thanks for the update :)\n. Yeah, that's what I'm doing, too: https://github.com/bobthecow/genghis/blob/master/.travis.yml\nI guess I was just hoping there was something less manual :P\n. They do with a global install, unfortunately :(\n. It's not that we want them. It's what composer does.\ncomposer g require psy/psysh:@stable\n\u2026 installs PHPUnit and Symfony Finder :-/\n. Composer global installs are weird.\n. I'm going to hold off on this one for now, due to the global composer issue. Feel free to open an issue with them.\n. It's tagged as 0.1. That's not a semver tag, so I'm not going to assume anything about it :)\n. No, 0.1 is not a SemVer tag. 0.1.0 is. SemVer tags always have a patch version. If a developer doesn't use SemVer tags, I can't assume anything about whether they're using SemVer.\n. I know that translates to 0.1.0.0. That's intentional :)\nThe developer of php-xdg-base-dir has given no indication that the project is following SemVer, so it would be irresponsible to assume that. Given how new the project is, I'd prefer to err on the side of caution, restricting it to an overly strict version constraint rather than releasing something that will most likely break with future dependency changes.\n. > > SemVer tags always have a patch version. If a developer doesn't use SemVer tags\n\nI have no idea what you mean? It has a patch version, it's just 0.\n\nLook at semver.org. Find one example of a version number on that page that doesn't have at least major, minor and patch versions. That's the bare minimum number of chunks in a SemVer version. You can optionally include more for beta and rev versions, but you can't ever have fewer chunks. See mojombo/semver#237\nSo, given that the dev has not indicated that this project follows SemVer, and given that they're not using SemVer versions for their tags, I see no reason to assume that v0.1 will be in any way compatible with v0.1.1, or even that such a version number will exist.\nThe added complication here is that, per SemVer, even devs who follow SemVer don't have to preserve backwards compatibility between patch versions when < 1.0. See mojombo/semver#221\n. You can use the magic variable $_e to get the last exception (which, incidentally, is also the last error because PsySH throws error exceptions).\n. Don't touch $__psysh__. You're not supposed to know that one's there ;)\n. For $_e you can also use the wtf command if you're just looking for the message and the stack trace.\n. I agree that the other two should be documented, though. Maybe at http://psysh.org/#usage ?\n. psysh.org is community contributed as well :)\nhttps://github.com/bobthecow/psysh/tree/gh-pages\n. Good catch. I'll take a look at it and see if I can get it to make sense.\n. Update: the fix for this is actually quite a bit of work. I've got an initial shot at it, but it's not all fixed just yet. Sorry about the delay.\n. Huh. That's really interesting. I can't reproduce it on my box, but all I have installed are 5.5 and 5.6... I'm installing 5.3 now to try to reproduce it.\n. Ok, there's a fix for it in develop, you can try that out and confirm if you want :)\n. This is a weird one, by the way.\nIt only happens in PHP 5.3, and only with a certain type of \"parse error\" \u2014\u00a0this exact one, i haven't found any others that do it. I feel like if empty() does this, isset() should as well, since they both have the same semantics around what they can be called on. They both are language constructs rather than functions, so they both result in \"parse errors\" when they're called on something besides a variable (in PHP <5.5, at least), even though PHP knows exactly how to parse them :)\n... but isset() works correctly, resulting in a \"catchable\" parse error. So I don't know what's up with that. But I've got a fix in that fakes an actual parse error if it notices you calling empty() with anything besides a variable.\n. For me, continue halts the process in 5.3, 5.4 and 5.6.\n. But at least you can exit PsySH after continue in 5.3 :)\n. I'm not sure I understand. Those changes are definitely in both the develop and master branches:\nhttps://github.com/bobthecow/psysh/compare/develop...503cdb5\nhttps://github.com/bobthecow/psysh/compare/develop...fc6fff4\nhttps://github.com/bobthecow/psysh/compare/develop...8b6a236\nhttps://github.com/bobthecow/psysh/compare/master...503cdb5\nhttps://github.com/bobthecow/psysh/compare/master...fc6fff4\nhttps://github.com/bobthecow/psysh/compare/master...8b6a236\n. Sorry, I've been trying to fix another issue or two before shipping v0.3 with that update. Until then, you can use @dev as your version constraint to get the newer Symfony dependency.\n. Sorry about the delay. I intended to get another fix into this release but the scope has crept a bit\u2026 from \"fix a bug in X\" to \"refactor X\" to \"write a new library and polish up an older tool that should have been open sourced years ago and use those to refactor X in a way that is maintainable and easier to understand\".\nI'll just table that one and cut a release without it for now :)\n(Read: In the next day or so, if not today)\n. Wrap it in an extract():\nphp\n$age = 10;\nextract(\\Psy\\Shell::debug(get_defined_vars()));\nprint $age;\n``` sh\nPsy Shell v0.2.1 (PHP 5.6.3 \u2014 cli) by Justin Hileman\n\n\n\n$age = 20\n=> 20\nexit\nExit:  Goodbye.\n20\u23ce\n```\n. No problem!\n. Yes. That is the (eventual) plan. If you'd like to see it sooner, we'd happily accept a pull request :)\n. Yes, you did. Sorry, I haven't had a chance to answer. I'll get on that :)\n. I originally thought that this would be a good opportunity to refactor a bit of the PsySH internals and make it use more of a client/server model for regular use as well. Essentially, split out the readline/input and stdout/output into a \"Client\", and move the execution loop into a \"Server\", both of which are owned by the Shell app.\n\n\n\nThis way you could use stream_select to handle input from readline/input, and output from stdout/output. It would make everything more responsive. It would make it possible to interrupt long running operations with ctrl-c without killing the entire shell. It would mean that the actual \"doing work\" part of psysh would simply be receiving code to evaluate and returning a string with output. psysh commands could then run on the \"client\" for the most part, but reach over to the \"server\" when they needed to interact with state. And ultimately, it would open the door for a lot more \"client\" types \u2014\u00a0a socket.io-based web client, a console based command to make one psysh instance into a client for another, etc. \nThe more I think about it, the deeper this rabbit hole gets, though, so it might be worth writing a simpler version now and working toward that in the future :)\n. The bare minimum you'd need is a socket-based \\Psy\\Readline, a socket based \\Psy\\Output\\ShellOutput, a way to get \\Psy\\Shell to open up a pair of sockets and use those instead of  the default input/output pair, and a way to connect as a \"client\". This should either be a web based client or a psysh command\u2026 the command version seems like a simpler place to start?\n. :)\n. I've thought a bit about better ways to do this, but, to be honest, I never considered eval() :P\nWhat about using a function in the \\Psy namespace rather than a static method?\nphp\neval(\\Psy\\sh());\n. > Updated. I had to run composer dumpautoload to get it to autoload the helper file.\nJust to confirm, you had to dump autoload because of:\n\nIf you need to update the autoloader because of new classes in a classmap package for example, you can use \"dump-autoload\" to do that without having to go through an install or update.\n\n\u2026 not:\n\nAdditionally, it can dump an optimized autoloader that converts PSR-0/4 packages into classmap ones for performance reasons.\n\n\u2026 right?\n. I think I'd prefer to call it functions.php. What do you think?\n. Thanks!\n. Oh no! We totally missed out. We could have made the command:\nphp\neval(\\Psy\\evil());\n. Awesome :)\n. How much control over the output does this library give? It'd be nice if the line numbers matched (color, delimiter) the ones in history command, for example.\n. > I can't update the delimiter without making a pr to the color repo.\nFair enough.\nThe one thing that rubs me wrong is that hardcoded backtrace index. I think I'd prefer to search the trace for Psy\\Shell::debug, or files inside the psysh project, or something.\n. Oh, do you mind adding the dependencies to \\Psy\\Compiler so that the Phar build script keeps working?\ndiff\ndiff --git a/src/Psy/Compiler.php b/src/Psy/Compiler.php\nindex 549715a..c2cd418 100644\n--- a/src/Psy/Compiler.php\n+++ b/src/Psy/Compiler.php\n@@ -54,6 +54,8 @@ class Compiler\n             ->name('*.php')\n             ->exclude('Tests')\n             ->in(__DIR__ . '/../../vendor/dnoegel/php-xdg-base-dir/src')\n+            ->in(__DIR__ . '/../../vendor/jakub-onderka/php-console-color')\n+            ->in(__DIR__ . '/../../vendor/jakub-onderka/php-console-highlighter')\n             ->in(__DIR__ . '/../../vendor/nikic/php-parser/lib')\n             ->in(__DIR__ . '/../../vendor/symfony/console')\n             ->in(__DIR__ . '/../../vendor/symfony/yaml');\n. Great! Thanks for this command. It'll go out in the next release.\n. > When is the next release planned?\nI've been meaning to get it out for a couple of days, so as soon as I can close out the active pull requests :)\n. :+1: Merging that other PR then.\n. Yes, yes it would.\n. Thanks for opening the pull request!\nI've been using php-cs-fixer to fix most coding style things automatically. There's a .php_cs file in the repo, which sets up the rules that should be enforced. I just pushed an update that adds php-cs-fixer composer so that it doesn't have to be installed globally like I have it. I've also added it (in --dry-run mode) to the travis config:\nhttps://github.com/bobthecow/psysh/compare/develop...feature/php-cs-fixer\nI'm not sure whether we need both PHPCS and php-cs-fixer. If I had to choose between the two, I'd probably choose the fixer, since I'm too lazy to fix most of these myself :)\nThoughts?\n. See #126\n. It does look like PHPCS fixed at least one thing that php-cs-fixer missed, so maybe it wouldn't hurt to run both on Travis?\n. Yeah, it's nicer to have things reported separately. But for now, running cs checks on travis does the trick :)\n. Fixed by #125!\n. If there's one thing I disagree with PHPCS's interpretation of PSR-2 on, it's the spaces inside method calls. Is there anyone ever who finds this:\n\neasier to read than this?\n\n. It doesn't do any fixes during Travis (thanks to the --diff and --dry-run flags). It just runs there to enforce the standard. The cool thing is that you can run it during development and it'll automagically fix most CS issues for you.\n. How much does it slow down Travis? Because it's also useful for humans, who should theoretically be running php-cs-fixer as well :P\n. We're using 2.0.*@dev right now. Has default caching been added already?\n. Good to know, thanks.\n. Yep. Agreed. Let's do that :)\n. So if cache is being enabled by default, would it make sense to ship a .php_cs.dist with it enabled, then in .travis.yml do something like this?\nyml\nbefore_script:\n  - echo \"<?php $config = require __DIR__ . '/.php_cs.dist\"; $config->setUsingCache(false); return $config;\" >> \".php_cs\"\n. Oh? I thought a lot of the new checks were only in 2.0. I'm happy to move to stable if it'll cover the same stuff.\n. :+1:\n. Switched to stable in f8736bc58033765de9a96c6c2a87c11c277efbf2\n. @blainesch Was there a reason for dev-master?\n. Oh, never mind. I just realized you answered in the other thread.\nFor dependencies of libraries, it's always advisable to depend on actual released versions unless you require a feature that hasn't been released yet. In this case, we don't, so we'll use a tagged release.\n. Oh, yes. Thanks for catching that :)\n. Thanks, it's been fixed now. Hopefully that clears things up for people :)\n. Grrr. Deprecation notices in PHP are disruptive enough that they don't really seem SemVer backwards compatible.\n. You can pass false to the TableHelper constructor to suppress the deprecation notice there, but you can't do anything about getting a deprecation notice during HelperSet::get, which is where we get our TableHelper.\nHonestly, I'm inclined to change error levels to exclude E_USER_DEPRECATED just for this call. I'm not going to let a backwards compatibility break bully me into breaking backwards compatibility for my users :)\n. But I don't think that's fair to my users. Because of the nature of this project, I'd prefer to support the widest range of versions of our dependencies as possible.\nI'm not interested in maintaining multiple versions of the project to provide bug fixes to people still stuck with older dependencies.\nI'd really rather my users didn't even realize that one of my dependencies pulled a dick move and made it so they had to choose between requiring an upgrade on a point release and not getting any more bug fixes or new features from PsySH.\nSemVer is supposed to save us from things like this, but the nature of PHP's deprecation notices violate the spirit of that. \n. ``` diff\ndiff --git a/src/Psy/Command/HelpCommand.php b/src/Psy/Command/HelpCommand.php\nindex 81eba2e..dd40ab4 100644\n--- a/src/Psy/Command/HelpCommand.php\n+++ b/src/Psy/Command/HelpCommand.php\n@@ -66,7 +66,12 @@ class HelpCommand extends Command\n             // list available commands\n             $commands = $this->getApplication()->all();\n\n$table = $this->getApplication()->getHelperSet()->get('table')\n$old = error_reporting();\nerror_reporting($old & ~E_USER_DEPRECATED);\n$table = $this->getApplication()->getHelperSet()->get('table');\nerror_reporting($old);\n+\n$table\n                 ->setRows(array())\n                 ->setLayout(TableHelper::LAYOUT_BORDERLESS)\n                 ->setHorizontalBorderChar('')\ndiff --git a/src/Psy/Command/ListCommand.php b/src/Psy/Command/ListCommand.php\nindex 1d6ff24..d5f5edc 100644\n--- a/src/Psy/Command/ListCommand.php\n+++ b/src/Psy/Command/ListCommand.php\n@@ -279,7 +279,12 @@ HELP\n      */\n     private function getTable()\n     {\nreturn $this->getApplication()->getHelperSet()->get('table')\n$old = error_reporting();\nerror_reporting($old & ~E_USER_DEPRECATED);\n$table = $this->getApplication()->getHelperSet()->get('table');\nerror_reporting($old);\n+\nreturn $table\n             ->setLayout(TableHelper::LAYOUT_BORDERLESS)\n             ->setHorizontalBorderChar('')\n             ->setCrossingChar('');\n``\n. Ooh. TheShellOutputstuff is because I'm a moron! But the rest of it is still valid.\n. I feel like the correct output would prolly not to tell them aboutbin/psysh\u2026 I'm open to suggestions about what to actually show. mebbe an Easter egg?\n. Oops. I didn't realize this PR was against master. If you want to open it againstdevelop, that'd be great, otherwise I can cherry pick.\n. :+1: \n. @blainesch You mean where list doesn't work?\n. The return value of$this->fileInfo()is['file' => ..., 'line' => ...]. You can't uselist()to get variables out of that, because it has non-numeric indices. So forlist()to work, you'd need to changefileInfo`'s return. That's all I was saying :)\n\n```\nPsy Shell v0.3.2 (PHP 5.6.4 \u2014 cli) by Justin Hileman\n\n\n\n$foo = ['file'=>1,'line'=>2]\n=> [\n       \"file\" => 1,\n       \"line\" => 2\n   ]\nlist($file, $line) = $foo;\nPHP error:  Undefined offset: 1 on line 1\n$file\nPHP error:  Undefined variable: file on line 1\n$line\nPHP error:  Undefined variable: line on line 1\n$bar = [1,2]\n=> [\n       1,\n       2\n   ]\nlist($file, $line) = $bar;\n=> [\n       1,\n       2\n   ]\n$file\n=> 1\n$line\n=> 2\n``\n. Yeah, but that's so much uglier. We're the one who definesfileInfo, and this is the only place it's used, so why wouldn't we just change it to make it work withlistif that's the intent?\n. @blainesch Right now it usesextract(), which does need to change. This PR is a valid solution, but usinglist()would be as well. I don't have a strong preference either way, so I'm going to merge this version :)\n. @blainesch Likeeval, sometimes people useextractfor stupid things, so it bothers people. If there's a non-extract way of doing the exact same thing, which doesn't really make it harder to understand, I'm not opposed to doing it that way instead. Also, IDEs and Xdebug don't play nice withextract(see @hason's point 2 above).\n.~2.5means2., >=3.5.0, so that should support 2.6 just fine. \n.2., >=2.5.0` rather :)\n. Nice!\n. There's currently no way to eval arbitrary code from outside a shell instance, but it shouldn't be hard to add:\n\n\n\n``` diff\ndiff --git a/src/Psy/ExecutionLoop/Loop.php b/src/Psy/ExecutionLoop/Loop.php\nindex bf281cd..8220105 100644\n--- a/src/Psy/ExecutionLoop/Loop.php\n+++ b/src/Psy/ExecutionLoop/Loop.php\n@@ -135,4 +135,51 @@ class Loop\n     {\n         // no-op\n     }\n+\n+    public function evaluate(Shell $shell, $code)\n+    {\n+        $closure = function($psysh, $psysh_code) {\n+            extract($psysh->getScopeVariables());\n+\n+            try {\n+                // evaluate the supplied code\n+                ob_start();\n+\n+                set_error_handler(array($psysh, 'handleError'));\n+                $ = eval($psysh_code);\n+                restore_error_handler();\n+\n+                $psysh_out = ob_get_contents();\n+                ob_end_clean();\n+\n+                $psysh->writeStdout($psysh_out);\n+                return $;\n+            } catch (\\Exception $_e) {\n+                restore_error_handler();\n+                if (ob_get_level() > 0) {\n+                    ob_end_clean();\n+                }\n+                $psysh->writeException($_e);\n+            }\n+        };\n+\n+        // bind the closure to $this from the shell scope variables...\n+        // skip binding on HHVM, see https://github.com/facebook/hhvm/issues/1203\n+        if (version_compare(PHP_VERSION, '5.4', '>=') && !defined('HHVM_VERSION')) {\n+            $that = null;\n+            try {\n+                $that = $shell->getScopeVariable('this');\n+            } catch (\\InvalidArgumentException $e) {\n+                // well, it was worth a shot\n+            }\n+\n+            if (is_object($that)) {\n+                $loop = $loop->bindTo($that, get_class($that));\n+            } else {\n+                $loop = $loop->bindTo(null);\n+            }\n+        }\n+\n+        return $closure($shell, $code);\n+    }\n }\ndiff --git a/src/Psy/Shell.php b/src/Psy/Shell.php\nindex e3171de..92fe0c2 100644\n--- a/src/Psy/Shell.php\n+++ b/src/Psy/Shell.php\n@@ -244,6 +244,14 @@ class Shell extends Application\n         $this->loop->run($this);\n     }\n\npublic function evaluate($code)\n{\n$code = $this->cleaner->clean(array($code));\n+\n// Wheee!\nreturn $this->loop->evaluate($this, $code);\n}\n+\n     /**\nRead user input.\n  *\n```\n\n\n\nUsing that \u2014\u00a0or something like that, but actually tested :) \u2014 you can call $shell->evaluate($code) and it'll return the result.\n. There have been several times in the past that I've almost implemented this for other commands, so it's probably not overkill.\n. You mean rather than starting a sub-shell? The downside to that is that it would modify this shell's state. The last error, the return value, the current variable state, etc would all be changed when you were just \"benchmarking\" something\u2026\u00a0it might make sense to have explicit side effects possible, but it would be weird for it to extend to things like the return value and last error, IMO.\n. Sorry, I haven't had time to do a more in-depth review yet, and you're absolutely right that it'll take a bit more. To be honest, I've got a bit of a crazy week or two ahead of me and don't see getting this shipped before then.\nRight now I'm thinking that I'd like to get v0.4.0 out the door (asap) with autocomplete and everything currently in the develop branch, and get the loop refactor, composer sandboxes, etc into v0.5.0.\n. Oh wow. Sorry it took so long to get into a release.\nThis has been merged into the feature/execute branch, which will (barring any issues) be merged into develop shortly and released with v0.9.x.. It's likely an issue with your autoloader, and it's probably not finding RedBean_Facade. You can test this by replacing R:: with the full class name.\nThis works for me:\nphp\n<?php\nuse StdClass as S;\n$s = new S;\n```\n$ psysh test.php\nPsy Shell v0.3.2 (PHP 5.6.4 \u2014 cli) by Justin Hileman\n\n\n\nls -al\n\n\n\nVariables:\n  $s   \n  $_   null\n``\n.$this` is weird, you're usually better off assigning it to a different variable, unfortunately :-/\nHow are you getting into psysh?\n. The eval method doesn't support this, unfortunately, so you'd need to use the longer, uglier invocation.\nI just pushed a change to add $this support to the eval method, though. Check out develop :)\n. This has shipped in v0.3.3, and binding $this is even now mentioned in Usage! http://psysh.org/#usage\n. :+1:!\n. Thanks for taking this on :)\n. Yeah, I'm not sure. It's not your file, though, so it's not your problem :)\n. I like the autocomplete matchers approach. This could make it possible for things like ezsh (ezComponents shell, based on PsySH) to add their own matchers for their own crazy model stuff :)\n. Cool. Thanks!\n. I can't wait to have this. What's your take on the current status?\n. Sorry I wasn't completely clear. Yes, I was looking for a high level opinion on the state of the code and this feature.\nThe autocompleter doesn't need to be perfect on the first pass... The CodeCleaner went through a couple of releases before it was more than just an ugly hack. Presenters used to be hardcoded, but now are extensible. It's better to have any autocompleter than to wait until we have the perfect autocompleter :)\nThat said, it'd be nice to have something extensible. So if it's a small amount of work, we should look into that. If it's a large amount of work, maybe we hold off. I was mostly asking about that because if we need to fundamentally rethink anything about the architecture to allow it, it'd be nice to know that beforehand, even if we don't change it now. If we might need to make a backwards compatibility break to the public api or config options, we should think that through now as well.\nAs far as readline weird behaviors, I hear you. It's a pretty awkward API, and it doesn't always do what it seems like it should :)\nMaybe it would be best to make sure the architecture, interfaces, configuration and implementation are where we want them, even if we can't complete everything right away. For example, if namespaced things don't work, we could ship completion for variables and non-namespaced classes, functions, and constants first. Any completion is better than the current completion, so let's not focus too much on getting all of the matchers implemented. We can ship the first iteration with some matchers disabled if we need to.\nMake sense?\n. :+1: this is looking really good!\n. @Markcial This looks like it's basically good to merge. Are we waiting on anything else?\n. OK, let's get this shipped!\nI updated, fixed and added docblocks here:\nhttps://github.com/bobthecow/psysh/compare/develop...feature/tab-completion\nI also had to change config just a bit so that specifying custom matchers would actually work. In the process, I wrote two custom matchers (for MongoDB) but they're disabled by default. This way there's even an example to add to the README section about adding custom matchers :)\n@Markcial I added license headers to the new files in f66804d. We don't have a formal CLA, but it'd be great to get a :+1: indicating you're okay with this :)\n. Also, after I merge this, I need to update all the license header dates.\n. Oh, and if you want @author attribution, let me know what to use and I'll add that to these files.\n. Ok, this has been merged into develop and will be in the next release. Thanks for all the work!\n. This one was all you :)\n. I've considered doing things with SuperClosure in the past, but have run into issues where PHP was too dumb about things to let me use it, so I'm not sure I'm comfortable 1) making it a dependency, and 2) recommending it over the eval version that works, for what is a relatively small gain :)\nphp\neval(\\Psy\\sh());\n\\Psy\\dbg();\n. Now, if you wanted to write a PHP extension that added a debug keyword, that would be a huge win :)\n. Heh. Me too :)\nI'm marking this as an enhancement and closing it for now.\n. This might actually fix the issues I was running into before: https://github.com/jeremeamia/super_closure/issues/34\n\u2026 but it's hard to say without extensive testing :)\n. Nah. I didn't see any downside, and the manual page on debug_backtrace says it's an improvement, so I figured why not? :)\n. Cool. We'll ship this change in the next release then :)\n. Thanks, this has been merged into develop and will go out in the next release :)\n. That sounds like an awesome idea for a command. I probably wouldn't make it import since that doesn't do a good job of conveying that \"this will go on the internet, download and install a package, and include it in your current psysh session\", but something like that would be rad :)\n. I like the idea of having composer in the name. Could also use packagist in the name since that's what it's using.\nMaybe composer-require foo/bar @stable?\n. Awesome!\n. @Markcial if we ship this one as a separate plugin, it could actually add composer as a dependency for that plugin, right?\n. True :)\n. But they are added to the history\u2026\n\n. Ahh. Yes. That's not just a fatal error, that's a fatal error that PsySH didn't manage to prevent.\nYou can tell the difference because the almost-fatal errors are red and don't print a stack trace. The actual fatal errors usually have two stack traces, and are black and white.\nI just pushed a fix for the actual fatal error. If you use that version, your command will get added to the history :)\n\n. Thanks for checking!\nIf you see any more of those white-fatal-errors, let me know so I can fix them (where possible).\n. Oh, that one should definitely have been caught. We have something checking for that. I wonder how it slipped through? I'll take a look.\n. Ahh. That parses as something different than what we were checking for. Fixing now :)\n. Done.\n. That's strange. PsySH should work great with UTF-8. I can't reproduce it on OS X, but I'll give it a shot in Ubuntu. Does it work with php -a?\n. What is the output of readline_info?\n. Okay, so it's compiled with libedit. Your shell is likely using readline. Maybe Ubuntu has crap libedit bindings/defaults?\n. > One suggestion is to re-compile PHP w/o --with-libedit.\nIf you do that, make sure to compile --with-readline. It's pretty awful with neither :)\n. I've found the easiest thing to do is throw the Linux box away and get a Mac ;)\n. If you disable readline in your psysh config, does it work with UTF-8 characters?\n. Unfortunately it also breaks other awesome things (like the upcoming tab completion) so that's not really a viable solution. It does seem to indicate that the issue is with libedit as suspected.\n. You shouldn't need to recompile, you can just install the php5-readline package, right?\nhttp://packages.ubuntu.com/trusty/php5-readline\nEdit: maybe never mind. It looks like that one might be libedit, despite the name :-/\n. @tkn98 (or anyone else with a system that exhibits this issue) if you run psysh inside rlwrap does it fix UTF-8 input?\n. rlwrap isn't as nice as real readline support compiled into PHP, because PsySH doesn't have access to it. So we can't do fancy tab completion or anything. But it is better than no readline at all :)\n. Closing this, as there's not a whole lot we can do from the PsySH end.\nNote that if you install hoa/console (or use the -compat pre-built Phars, which include it) you can get back some of the features you lose by disabling readline. It implements readline in userland  PHP, so it's not perfect, but it's better than nothing :). Thanks for the fix! This has been merged and released in v0.3.5.\n. The one advantage to the super awkward fix in b3ec103 is that it also works in PHP < 5.4 and HHVM < 2.5, but you know what? I don't really care :)\n. Great! Thank you. This has been merged into develop and will be in the next point release.\n. Yes, it would be great! We have plans, but not a timeline or spec or anything concrete like that yet. Feel free to chime in on #121 with feedback, ideas or offers to help :)\n. Looks good :)\n. The sandbox command (I like the name, btw) is a bit unwieldy. I think it would probably make sense to split out subcommands and run them from the parent command, a bit like what composer global does:\nhttps://github.com/composer/composer/blob/master/src/Composer/Command/GlobalCommand.php#L53-L81\n. For the sandbox subcommands:\nsandbox create (alias: add)\nsandbox create bananas\nsandbox list\nsandbox list --grep nana\nsandbox which\nsandbox use bananas (alias: switch)\nsandbox clear\nsandbox clear foo\nsandbox delete\nsandbox delete foo\nsandbox exit (not sure about this one. maybe reset?)\n. Additionally, I feel like there's room for proxying more than just composer's require...\nbrowse, clear-cache, depends, dump-autoload, home, info, remove, require, run-script, and search all seem like they could at least be useful inside PsySH, if not 100% essential to have :)\nSo given that, it might make sense to have composer be a general command that proxies to (a whitelisted subset of) composer calls.\nIf we go that route, I'd make composer be the command for dealing with the local project, and add some of the composer subcommands to sandbox:\nsandbox require mustache/mustache\nsandbox remove mustache/mustache\nThat would make the two commands (somewhat) analogous, but have a clear distinction between \"this is going to be used for temporary stuff\" vs \"this is becoming a project dependency\".\n. If composer install fails, we could tell the user to just download the phar themselves and put it in the current directory :)\n. (not at a computer now so I can't check this myself, but does composer install let you specify an install directory? If so, it might make sense for us to install  it in one of the psysh config or data directories. \n. The composer sub-application approach is nice. My one concern  would be that composer might not  have as flexible dependency version requirements as we do. That's fine for them, because they ship as a phar, but for us, we have to be pretty forgiving, since we often run inside other symfony apps. So if the composer phar expects one version of a symfony component, and the current project (and thus psysh) is stuck on a different one, there is no real way to enforce the dependency versions and make sure things stay sane.  \n. @taluu things that start with -- are options not arguments, so they're eaten by the original command. This is how it needs to be done. See composer global, they have to do it there too. \n. But then psysh becomes dependant on all of composer, and all of their dependencies. And psysh's phar becomes huge and bloated. \n. We can't make psysh depend on something like composer for just one command, which many users will likely never even need. That's just too much. \n. It won't, I promise :)\nI don't take adding dependencies lightly, since every one adds a potential for conflict and incompatibility with a user project. \n. Also, every psysh dependency has to be shoehorned into the phar, and that doesn't need to be any bigger than it has to be :)\n. @Markcial leave it for now, and I'll look into it. My rule of thumb is that if it's just a convenience wrapper, I leave it out and handle the inconvenience myself. If the dependency does something material, and we use a decent amount of the library's features, and the library doesn't introduce onerous dependencies or version requirements, then it's probably okay. Symfony components usually meet most of these criteria though.\n. The Symfony Process component is 3200 lines of code. Only 1400 if you exclude the comments. To put that in perspective, all of PsySH is 6000 lines of code :)\n. Except all the lines get bundled into the psysh phar, so at some level they do matter.\nLines of code is not the only reason for using (or not using) a package. It's just one data point in weighing whether to add another dependency. But they are indicative of the relative complexity and feature set of this package. Since those 1500 lines of code are replacing approximately 5 lines of code that we write ourselves, it seems prudent to actually consider them rather than just blindly tacking on another dependency.   \nDependencies themselves aren't bad, per se. But they definitely aren't without cost, either. Every dependency we add, and every version constraint we require, excludes some number of potential users. Because in real life, not every project keeps up with the latest releases of all their dependencies. In the interest of not adding to the inevitable dependency hell, I prefer to weigh each one on its merits before deciding to accept its cost.\nAdditionally, each dependency adds some amount of work for the maintainers of this package. SemVer helps mitigate this cost, but Symfony doesn't actually follow SemVer. So every release of every Symfony component adds the potential for BC breaks and a drain on the contributors of this library and all projects that depend on it. \nNote that this isn't theoretical. It's actually a problem, and actually happens in real life. See the Table(Helper) BC break we had to work around in the latest release. \nSo is it worth adding this dependency? Maybe.\nBut it has to bring something material to the table. And I'm not convinced this particular dependency does. For our needs. For this feature. At this time. All of those factors may change, and I'm happy to revisit this decision.\nSince you weren't in my head during the process of weighing the options, I'll give you the benefit of the doubt.\nFor the record, though, what's actually bullshit is getting worked up over how an open source project comes to a different conclusion than you when weighing costs and benefits of a decision such as this.\nYou're still gonna use the feature, even though it might be implemented in a way that you disagree with, despite the fact that those implementation details are just that, implementation details, and you won't even be able to tell the difference between the two when using the product? Despite the fact that the project was given to you for free, and then you asked for another feature and someone else took their own time to write it and give that to you for free as well? How gracious of you. \nDon't be a dick about open source. \n. I'm not offended. I just don't think it's appropriate to direct abuse at open source projects or contributors.\nGiven the context of the entire thread, e.g.:\n\nI don't take adding dependencies lightly, since every one adds a potential for conflict and incompatibility with a user project.\n\n\u2026\u00a0and:\n\nAlso, every psysh dependency has to be shoehorned into the phar, and that doesn't need to be any bigger than it has to be :)\n\n\u2026 and:\n\nMy rule of thumb is that if it's just a convenience wrapper, I leave it out and handle the inconvenience myself. If the dependency does something material, and we use a decent amount of the library's features, and the library doesn't introduce onerous dependencies or version requirements, then it's probably okay.\n\n\u2026\u00a0my comment was shorthand for \"This is a relatively big library, of which we're using a very very small part. We don't really need it, since this is a fairly insignificant sub-feature of a feature \u2014\u00a0which approximately 0% of our users will need. So it would probably be best if we didn't force everyone else take on the overhead and potential headache of the additional dependency.\"\nI thought it was clear from the context, but it obviously wasn't. If you'd asked, I would have pointed these things out :)\n. I have been thinking about extensibility, but I haven't come up with anything I love yet. Open an issue and let's talk :)\n. :+1: Yes, let's :)\n. Not right now, but pull requests are welcome :) . My understanding is that the ob_start callback is supposed to be for filtering the output buffer, not for executing a side effect. Is using it like this going to cause us any trouble?\n. Shell::writeStdout always writes full lines, and it appends a newline glyph to the end of input when outputs text that doesn't end in a newline. For example, this:\nphp\n$foo = 5;\nwhile ($foo) {\n  echo '.';\n  sleep(1);\n  $foo--; \n}\n... will output this:\n.\u23ce\n.\u23ce\n.\u23ce\n.\u23ce\n.\u23ce\n=> null\nWhich is certainly not what I'd expect :)\n. Yes, I understand the reason for this, and :+1: for that :)\nI'm just worried about the fact that we're using a side effect inside the output callback. From reading the documentation, it looks like that callback is only meant to let you modify the text of the output buffer before it's flushed, and it even has warnings about calling functions that could mess with output.\n. Got it!\n```\n\n\n\n$foo = 5; while ($foo) { echo '.'; sleep(1); $foo--; }\n.....\u23ce\n=> null\n```\n\n\n\nJust a second, I'll push it.\n. Here's what I ended up with:\nhttps://github.com/bobthecow/psysh/compare/develop...feature/incremental-flush\nIt handles both the incremental and the final flush. As a bonus, it now outputs the implicit newline when doing an ob_end_clean during error handling, as well!\nI'm still a little worried about using a side effect of the callback to actually render our output. With the current default output, I don't think it's a problem, but since it's possible to use other types of output, it could potentially bite us later. That said, it's probably worth letting future us deal with that problem :)\n. No problem! This has been merged into develop and will go out in the next release.\n. But we're not using 3.0, yet, so there's absolutely no reason for Symfony to be complaining so loud :)\nWhat version of PsySH and Symfony Console are you running?\n. This is a backwards compatibility break. Please take it up with Symfony :)\n. Well that wasn't very helpful.\nI'll try to get a better fix in before 2.7 ships. I'm also happy to accept pull requests if you need it sooner :)\n. No problem!\n. I haven't taken any time to dig into why, but it's definitely not working right just yet:\n\n. Do you mind re-opening this pull request against develop?\n. @Markcial This has all been fixed in develop :)\n. I'm going to cherry pick some stuff out of it. I'll close when I'm done.\n. Your additional fixes cherry-picked into develop here: 12fee02e2ed8bcdd16828a34f79e168c241a92a6\n. Closing this since it's already in develop.\n. @GrahamCampbell hates smiles :(\n. Somewhat relevant: http://www.xkcd.com/541/\n. Somewhat relevant:\n\n. It's not a required dependency, it's a highly suggested dependency :)\nI've added it to composer.json as well, so Composer will let you know that you should install it if it's not already installed.\nThe trouble with adding it to the documentation is that (1) nobody reads documentation, and (2) your specific solution only works for your specific linux distro. There are dozens of packages or compile flags or .dll or .so files, or whatever other ways that everyone else should get that extension. In fact, it comes pre-compiled in PHP for many (most?) users. The best PsySH can really do is tell you the extension is missing, not how to get it.\n. :+1: :)\n. Thanks! This has been merged into the develop branch, and will be shipped with the next release.\n. For now, you need to be running your application in the command line PHP server for the breakpoint to work.\nbash\nphp -S localhost:3000 index.php # or whatever your front controller's name is...\nSee #121 for conversation around making it work without the command line server.\n. Oh, then maybe I misunderstood what you were asking. What happens when you hit that controller with eval(\\Psy\\sh()) in it?\n. I'll set up a Symfony app and see if I can reproduce. What Symfony version are you running? Can you paste me the output of php -v, psysh -v and php -i | grep -i readline?\n. I'm about to ship a patch release without your changes in it. I'm not ignoring you, I'm just ignoring your pull requests until I have time to actually review ;)\n. Because you need to merge develop (or rebase) to get the .styleci.yml file.\n. (I just updated your title to what the fix does, and your first comment to link this PR with the issue it fixes)\n. I think it'd be nice to have on master as well. Being able to execute arbitrary things on the execution loop enables a lot of things: the timer command, upgrading commands with a target to be able to reason about return values and not just variables (like dump $foo->bar()), etc.\nWe're going to need the forking, unfortunately. PHP just dies far too often to run without it, and there's really no way for us to stop it.\n. Oh, I just thought of a really simple \"cancelable loop\" \u2026\u00a0I'm not sure if it's the best way to do it, but it'd probably work: use the normal pcntl-based forking loop, and register a signal handler that listens for ctrl+c and sends the current child fork a sigkill. The parent would \"recover\", effectively canceling the current operation. Thoughts on that?\n. There already are two loops. The forking one uses pcntl. The other loop doesn't. The user can already choose between them (by disabling pcntl in their config). I'm not sure what you're suggesting doing differently :)\n. But that's the \"forking\" part of \"forking loop\" :)\n. Yeah. We probably need more test coverage for this sort of thing.\nCan you tell me the output of php -i | grep -i readline?\n. Hmm. Check the output around it? php -i | grep -i -C10 readline\n. That's strange. What's the output from function_exists('readline_list_history')?\n. Okay, I think I know what's going on. One more: readline_info()\n. Bingo!\nWhen PHP decided to switch over to libedit instead of GNU readline by default, they did a really crap job. They only implemented part of the API. It's still not all the way implemented.\nPsySH works around the incomplete implementation where we can (see the Libedit readline wrapper).\nBut apparently they used to support even less of the API when they first made the switch. Ugh. I guess we'll add a check for that function's existence before calling it.\n. Okay. There's a fix in the develop branch. Give it a shot and let me know if you have any other issues.\n. :+1:\nNo problem! I'll try to get a release out today so everyone else benefits. Let me know if you run into any other 5.3 issues.\n. Done. Download v0.4.1 from http://psysh.org for great justice!\n. Check dump -h :)\n- dump -a $object dumps private and protected properties.\n- dump --depth 100 $object dumps deeper than the default 10. Be careful with this, as it doesn't do recursion checking :P\n. Presenters and VarDumper are made to do the exact same thing. Presenters just do it in a prettier way ;)\n. It looks like you're using the dev version of Laravel, right?\nThe Eloquent Model presenter only shows attributes (not all the wiring that's there for making it an active record style ORM). And it only shows attributes with values, IIRC. So if you have a password set, it'll show you the password when you dump with -a. This is on purpose :)\nSee the screenshots in this comment: https://github.com/laravel/framework/pull/7208#issuecomment-75386250\n. A Presenter should not show everything that's in var_dump... there's always var_dump if you need that. A Presenter should show what you would most likely want to see when you try to view a value. It specifically hides empty and uninteresting things.\nIt's entirely possible that an Eloquent Model presenter should be presenting more than it currently does. In fact, it's probably quite likely. But it definitely shouldn't be showing everything from dump() or var_dump()\n. I know almost nothing about how models are actually used in Laravel IRL, so if there's something that should be in the presenter, I'd love to know :)\n. Here's a dump of what I'm thinking:\nThere are basically three (easy) extension points for PsySH (and quite a few not-as-easy ones, but let's focus on the easy ones first)\u2026 Commands, Presenters and Tab Completion Matchers. So a plugin implementation would at the very least need to provide a way to discover those three.\nI'd prefer to have things \"just work\" where possible. So while adding a line to your config file would do the trick, it would be awesome if you could install plugins just by installing them. As I see it, there are a couple of ways to get this to work.\nPlugin discovery via interface wouldn't really work, because autoloading. There's no way to iterate through all possible classes and check their interfaces. A better approach would probably be to leverage composer for the default case, then users who don't composer could do a slightly more manual and less \"just works\" version that involves adding something to their config.\nEven in the composer-based \"just works\" version, I'd like to keep things lightweight. This means that a heavy Symfony-style plugin system won't happen. Something like this, though, might:\n``` php\n<?php\nnamespace Psy\\DoctrinePlugin;\nuse Doctrine\\ORM\\Tools\\Console\\Command;\nuse Psy\\DoctrinePlugin\\Matchers;\nuse Psy\\DoctrinePlugin\\Presenters;\nuse Psy\\Plugins;\nuse Psy\\Plugins\\PluginInterface;\nclass Plugin implements PluginInterface\n{\n    public static function register()\n    {\n        Plugins::register('doctrine', CLASS);\n    }\npublic static function getCommands()\n{\n    return array(\n        // These are the usual doctrine command line commands, which just\n        // happen to be Symfony Console commands, so we can use 'em without\n        // any wrapping or local code :)\n        new Command\\RunDqlCommand(),\n        new Command\\ValidateSchemaCommand(),\n    );\n}\n\npublic static function getPresenters()\n{\n    return array(\n        new Presenters\\DoctrineModelPresenter(),\n        new Presenters\\DoctrineRepositoryPresenter(),\n    );\n}\n\npublic static function getMatchers()\n{\n    return array(\n        new Matchers\\DoctrineModelMatcher(),\n        new Matchers\\DoctrineRepositoryMatcher(),\n    );\n}\n\n}\n```\nThen Psy\\Plugins would be a global registry that keeps a static list of plugins that are available, and Configuration::getPresenters, etc, would check registered plugins and add their Presenters, etc, to the list of defaults.\n(Note that this is very much like what Twig does, as suggested by @Taluu, but with a global registry component)\nIn the non-composer version of this, you'd just have to autoload your plugin somehow, and call Psy\\DoctrinePlugin::register() in your the config file.\nIn the composer version, it's even awesomer. Each plugin would simply add a register.php file to autoload.files in their composer.json:\n``` php\n<?php\nPsy\\DoctrinePlugin\\Plugin::register();\n```\nThen if your project adds a dev (or production) dependency on a plugin, that plugin will automatically register itself and be available for PsySH to use without you even touching your config :)\nThe next step here would be to add a \"global\" installation as well, for everyone who uses PsySH outside of a project. For that, I'd just make the PsySH config folder (or maybe a subfolder?) a composer project that depends on the plugins you want to install. Then you'd have a bonus autoloader from that composer project, and Configuration would check for it by convention (and maybe configuration) the same way it checks for the manual db file, or whatever else.\nThe ultimate awesomeness would then be to have a command for adding dependencies to this \"global\" plugins composer project, automatically downloading them, and autoloading them right into the current console. This would basically rip off (extend) everything @Markcial's composer and sandbox stuff already does :)\n. > Even if I think that also having a classic way to register an extension\nThat's where I was getting at with the \"non-composer\" comments. If you don't want to go the composer-based route (because you hate yourself, maybe?) then you can always manually call register() at the top of your own config file and it will work just the same.\n. If you don't want to use composer or static, you can totally still use plugins without either. You can also only register part of what a plugin offers, if that's what you're into:\nphp\nreturn array(\n  'presenters' => array_merge(\\Psy\\DoctrinePlugin\\Plugin::getPresenters(), ...),\n  'commands' => array_merge(\\Psy\\DoctrinePlugin\\Plugin::getCommands(), ...),\n);\n\u2026 but realistically, approximately zero of our users will do that. It's not a use case we need to optimize for. We need to optimize for the most common use case of \"this project uses doctrine, so i should require psy/doctrine-plugin in my composer.json\" :)\n. That's the point of using autoload.files in composer.json. Then the plugin is registered when autoloader is loaded.\n. No, the plugin adds it.\n. And yes, that would be one required bit of boilerplate for a plugin to be automatically registrable. I don't think that's too much to ask of a plugin developer :P\n. Naming thoughts. Which of these looks better for package names?\n- psy/doctrine\n- psy/doctrine-plugin\n- psy/psysh-doctrine\n- psy/doctrine-psysh\n. I like the way the node and ruby communities have a parentproject-subproject convention in their package names, so I'm leaning toward psy/psysh-doctrine.\n(Or fred/psysh-doctrine or whatever)\n. But the psy/ part is related to who develops it, not what it's for.\n. If you shipped a psysh plugin, you'd call it taluu/doctrine-plugin? Now it has no context. taluu/psysh-doctrine does, and would even if someone else forked your package to add their own things, and published it under their own vendor prefix.\n. > The next step would be to have a \"core extension\", so that Psysh is really minimal when shipped ? :)\nNope nope. PsySH should ship with everything that's generally applicable. No assembly required. Else why do we bother giving people a phar?\nThere are a handful of things that should be moved out of PsySH once this is available. The MongoDB presenters and Tab Completion Matchers, the PHPParser command... These aren't enabled by default, but they don't really need to be shipped with PsySH itself once there's an easy way to extend it.\n. Right, developers can use whatever they want. But we can say \"the convention is $vendor/psysh-$plugin right in the docs for \"how to make a plugin\" and hopefully influence developers to make good decisions ;)\n. But what would you remove? There aren't any presenters shipped by default that shouldn't be there (other than the mongo ones that aren't enabled). You need all of those in order to actually have output for your REPL. You could make a case for removing commands, but I don't think you could make a very strong one. There aren't a lot of extraneous commands.\nI don't like abstraction and compartmentalization just for the sake of abstraction and compartmentalization. \"Make everything a plugin!\" goes too far, in my opinion. PsySH isn't supposed to be 100%. It's opinionated. It's a REPL, not a REPL framework. :)\n. @Markcial a way to remove things might be nice to have, but for the most part I'm not convinced it's necessary. For example, later presenters win over earlier ones. So the defaults are easily overridden by adding another presenter that claims to present the same thing.\nAgain, this isn't about creating a REPL framework, it's about creating an opinionated REPL that usually does the right thing. That's why people like it more than the other options. That's a core value proposition of PsySH :)\n. Nice!\n. https://github.com/bobthecow/psysh-mongodb\n. :)\n. I've been thinking a bit more about this.\nPsySH is a weird library, because it can be installed locally or globally, as either a Composer dependency or a Phar. So we need to support each of those use cases as much as we can without making things crappy. This means several things, to which I have several answers. The things first, then the answers :)\n\nPlugins shouldn't depend on PsySH\nThat's just asking for dependency hell. And it means they wouldn't play nice with the Phar installs, which, IMHO, are one of the best ways to do it (see #170 for some issues with the alternatives).\nPlugins should be installable both globally and locally\nWhatever solution we come up with, it needs to be able to load both sorts of plugins.\nA Configuration should be able to load only specific plugins\nSome users use project or environment specific PsySH config files. For them, it would make a ton of sense to be able to explicitly load a subset of all available plugins.\n\nPlugins shouldn't depend on PsySH\nSince plugins don't depend on PsySH itself, they must depend on something else\nMy vote is a super lightweight plugin registry library, based on @Markcial's PluginManager work. It should have no dependencies, and serve only as a container for collecting plugins which have been registered. Because it will be both bundled in the Phar and installed locally to the plugins via Composer, it must be 100% compatible no matter which version is found first. It should essentially never have a backwards compatibility break, ever.\nHere's what I'm thinking for that: https://github.com/bobthecow/psysh-plugin-registry\nWith this, plugins depend on just the registry, keeping us from getting into dependency hell with multiple PsySH versions (see psysh-mongodb, for example):\njson\n    \"require\": {\n        \"psy/plugin-registry\": \"~1.0\"\n    },\nAnd because it has the lightweight, (probably) future-proof API, it should be resilient to improvements to plugins. If we decide that plugins should be able to provide alternate execution loops, for example, we'd add a new interface to the plugin registry package, and any plugin can implement the ExecutionLoopProvider interface. If the PsySH instance that's loading plugins from the registry supports them, the plugin's execution loop(s) may be used. But if any of the pieces involved are on an older version, everything should degrade gracefully.\nPlugins should be installable both globally and locally\nPlugins installed globally prolly belong somewhere in $XDG_DATA_DIRS (e.g. ~/.local/share/psysh/plugins).\nPlugins installed locally prolly belong in the project's composer requirements (or dev requirements).\nIdeally, a single PsySH instance should be able to load plugins from both places, and have everything work out okay. And this isn't as complicated as it sounds, fwiw.\nNote that I haven't addressed how plugins get into ~/.local/share/psysh/plugins. That'll be the subject of a future issue or pull request, once the composer/sandbox command pull request is finished :)\nA Configuration should be able to load only specific plugins\nThis should be straightforward enough. The Registry knows the names of plugins. The Configuration has a property for suppressing plugin registration. We can use these two together for awesome :)\nTo completely disable automatically registered plugins, via PsySH config:\n``` php\n<?php\nreturn [\n  'registerPlugins' => false\n];\n```\nTo enable only specific plugins, via PsySH config:\n``` php\n<?php\nreturn [\n  'registerPlugins' => ['psy/psysh-mongodb', 'markcial/psysh-twitter']\n];\n``\n. This also ties in quite nicely with thepsyshbin/phar change I just made (see #172). This means that if psysh is a dependency of the current project, running the globalpsysh` will use that project's autoloader to load the local version of psysh instead \u2014\u00a0along with all the automatically registered plugins for that project.\n. I wasn't suggesting using an environment variable to define where things are installed. I think that's just complication for complication's sake. I was suggesting using XDG, which is a very well defined standard :)\nI'm not suggesting reinventing autoloading, or package management. Composer does a great job at that.\nI'm not suggesting giving users a way to execute arbitrary code via environment variables. There's already a perfectly good way to do that. Your PsySH config file is made out of code instead of JSON or YAML for a reason :)\nThis isn't to say I'd stop you from using environment variables to load plugins. You can do that all you want. You can put plugins wherever you want, and load them however you want. Your config file is PHP. Go crazy. I'm just saying it's probably not a good idea to enable that by default, as a blessed code path.\nI'm suggesting having a single canonical place where plugins are automatically loaded from, e.g. ~/.local/share/psysh/plugins. This would be a Composer project. If you wanted to put phar files in there, that would be perfectly legal, you'd just have to add them to the autoload section in ~/.local/share/psysh/plugins/composer.json. Additionally, if you're using PsySH locally in a project, for example, the way Laravel does, you could install plugins specifically for that project in that project's composer.json (dev) dependencies. Then it'll work too, because autoload magic.\nSo my suggestion is to give two automatic, default ways to load plugins automatically, without any configuration or craziness. If you want to load them a different way, or scatter them out over your hard drive, or whatever, go for it. Just add a line or two to your PsySH config that executes some arbitrary code to do what you're looking for. But that's not a good default user experience :)\n. Actually, do you mind splitting this commit? I'm not entirely sure what the fixes are, so it'd be helpful to have a commit (or commits) just for them, with a descriptive commit message.\n. Let's leave off the dynamic stuff, and get this first set of fixes and improvements merged?\n. Yeah, I can do that. Is there a specific point where I should merge to? Do you feel like the things that are here are ready?\n. Sounds good. Commits up to 442e86b has been merged into develop.\n. I don't really have a preference WRT tokens. If the token constants (not the constant values, but the names themselves) are consistent and backwards compatible from 5.3 to 7.0, we probably can just use those ones, no?\n. Yeah. Global installs in Composer are pretty broken. I feel like composer g update and composer g require should imply --no-dev and --update-no-dev unless specified otherwise. TBH, I'm considering removing global install instructions in favor of just using the phar if you want a global.\n. I'll merge this because it's closer to correct. You're right, that we'll need to figure out global installs, but this isn't any worse with global installs than it already is :)\n. This was fixed with the \"bin launcher\" support in v0.5.0. Now, you can install globally and locally, and it will run the version you have installed locally, even if you just do psysh to call the global phar or composer installation.\n. One more piece, configuration-wise. I think we should have a disableAutoRegister (or some other name meaning something like that) static method on the plugin manager which could be called in a config file or shell wrapper to prevent automatically registering plugins. \n. Hmm. The order things happen might need to be tweaked. We want presenters defined in the config file to be registered after automatically discovered ones, so that they can be locally overridden, but we also want to be able to suppress automatic registration inside the config file.\n. More commentary back on the main thread :)\nhttps://github.com/bobthecow/psysh/issues/166#issuecomment-77422344\n. @GrahamCampbell Thoughts on this approach? I feel like this way we can recommend the global install, but still be able to play nice with users who have, e.g., a local project which depends on older psysh. They could still just run psysh from their project directory and it'd work.\n. There is a development branch because of http://nvie.com/posts/a-successful-git-branching-model/\n. You're describing git-flow. He calls 'em \"hotfixes\", you call 'em \"work on patch releases\" but it's the same basic model. Two development paths, one for small things that should be applied directly to master, the other for bigger changes, possibly backwards compatibility breaks, which should go in a development branch.\n. To be honest, developing a framework is one thing. But for a library the size of this, there is seldom need for two parallel development tracks. When that need arises, for example to revert a backwards compatibility break in a stable release, I do a patch off of master. But for the most part, non-urgent small changes get dropped into develop, and big changes get merged into develop as they're ready, and I try to release fairly soon after things get merged. If there are only small changes waiting to ship, it's a patch release. If there are big changes too, I ship a point release. I don't see much need for more structure than that, for something the size of a project like this.\nGiven that, and how often we end up needing \"hotfix\" type patches, it wouldn't hurt to only have one master/develop branch, and to occasionally just deal with the awkwardness of releasing a patch by starting a branch at the last tag. But ultimately, either way works and I haven't spent much time thinking about it :)\n. Thanks for taking a shot at this.\nAll things being equal, I prefer code cleaners that don't actually change the user's code. If there's a way to enforce or warn or throw exceptions from the cleaner itself rather than replacing a block of input with completely different code, we should do that :)\nAs far as the result, we should make it match exactly what PHP does, but without failing. So if PHP has a fatal error, we should throw a FatalErrorException. If PHP just triggers a warning, we can trigger a warning. Our messages and codes and everything should be as close to the PHP native functionality as possible.\nIdeally, the user will never even know we did anything. That's what we're going for here.\n. (I just updated your title to what the fix does, and your first comment to link this PR with the issue it fixes)\n. My priority is always to execute code that's as close as possible to what the user entered. This is why ValidClassName and other passes like that just validate what they can, and let everything else through. It's better to let a user fail because they did something dumb than to do something unexpected to their code trying to save them from themselves. We shouldn't inconvenience people doing the right thing in the name of protecting people that are trying to do the wrong thing :)\nSo far, we've just been letting things through if they're variables or expressions. See, for example, every validation in ValidClassNamePass:\nhttps://github.com/bobthecow/psysh/blob/master/src/Psy/CodeCleaner/ValidClassNamePass.php#L115\nI don't know that there is a better solution, as most expressions could have side effects, so we don't want to just evaluate them and see what they are. Variables should be okay, but array or property access wouldn't be.\nWe might not need a better solution, to be honest. I'm hopeful that more and more things will be catchable as PHP continues to improve. See, for example, the Catchable \"call to a member function of a non-object\" RFC in PHP 7. A few more improvements like that, and we can just let the language do its job and catch the errors and exceptions that result :)\n. You know, it looks like PHP isn't getting any better at handling this case. Screw it. Let's do runtime validation for things like this when we can't do static analysis.\nI'm cherry-picking this into the develop branch.. This is now in develop and will go out in the next stable release. Thank you for contributing :). I don't think it's possible to have tab completion or history without readline. If you don't have readline (or libedit) enabled in your PHP, you're running a degraded experience for any command line usage, and there's not much we can do about it from our end.\nIt's mentioned if you install via Composer (see the \"Suggests\" list in composer.json or on the PsySH Packagist page), but we could do a better job of calling it out on the website.\n. @cevarief Run this in PsySH and tell me what it says?\n```\n\n\n\n$c = new Psy\\Configuration\n$c->getReadline()\n``\n. Does your PsySH config file disable readline, by any chance? It should be supported iffunction_exists('readline')`, but you're getting the Transient implementation.\n. Yeah, that's not right. If you're running the latest PsySH, and you're getting a Libedit or GNUReadline service back when you call getReadline, you should have tab completion :)\n. @cevarief Do you mind opening a new issue with as much detail as possible, since your issue isn't really related? (feel free to copy/paste as much of your comments from here as needed)\n. A note about readline/libedit has been added to the tab completion feature section of psysh.org. It seemed best to mention it in context, where users would be fairly likely to notice after their tab completion didn't work :)\n\n\n\nClosing this for now. Feel free to send a PR against the gh-pages branch (or the README in develop branch) if you have a better idea on how to let people know.\nClosing for now.\n. Yes, that's the plan. One of these days.\nThe intent is to run the target through PHPParser. If it's a variable name, use the current implementation. If it's an expression, evaluate it and use the result as the target. This depends on $shell->eval() or something similar, so we're well on our way to having better targets :)\n. Oh, sorry about that. It's been fixed in develop. For now, comment out the tab completion matchers or use the dev branch? I'll try to get a release out soon.\n. This has been fixed in v0.4.2!\n. I do know about VarDumper, and it's a great library for what it's intended, but it's not the best fit for a REPL for a couple of reasons. First, it requires PHP >= 5.5.9, which would cut off a large number of our users. Second, it's a good general purpose tool intended to replace var_dump() or serialize(), while Presenters in PsySH are intended as an opinionated, extensible, specialized tool for viewing relevant data.\nAs an example, here's what an Exception looks like when it's printed as a return value in PsySH:\n\nHere's what it looks like when you use the dump command to get a bit more info:\n\nYou'll notice that this triggered output paging, so there's quite a bit of info there. If we just care about some high level things, we can use --depth to limit the dump as well:\n\nNow compare that to VarDumper output:\n\n\u2026\u00a0and:\n\n\u2026 and:\n\n\u2026\u00a0and:\n\n\u2026\u00a0and I got bored screenshotting things after I made it about 1/10th of the way through the output :)\nJust think of how awful that would be if the return value from your line of code was an exception? Now all your code, all your context, the return values of your last few commands, and everything you've typed is thousands of lines back in your window scroll buffer. Depending on your terminal settings, it might be gone forever. And it would do that every time you touch an exception. \nSure, that could be fixed by buffering the output from the dumper and sending it through the output pager. Sure it could be fixed by registering custom cloners in VarDumper that limit output to something more sane. But there's no way of registering variable depth dumpers. There's no way of dumping only public properties by default, and dumping protected and private properties with another command. It's not as usable by default, nor as flexible as the approach PsySH currently uses.\nPresenters try to show you the exact right amount of data the first time (i.e. the implicit return value print).  They try to show you all the data, but in a manageable manner, when you use the dump command.\nThat's why there are explicit presenters for more than just generic objects and arrays. That's why frameworks often ship their own presenters, for their own specific needs. And that's why we're working on a plugin architecture, to make it super easy to register presenters for anything you want.\nThat said, when you need more info than the implicit return value printing or the dump command will give you, you should use dump() yourself. It's still better at what it's made for :)\n. Oh, I didn't notice that I was looking at master branch, thanks for pointing that out. I do know about the VarDumper API. I do know about Casters :)\nMy point remains: the purpose and implementation of VarDumper is just plain wrong for a REPL. Look at those screenshots again. You don't want all of that information. You want a very limited, opinionated subset of information. So we could switch to VarDumper instead of PresenterManager, but we'd still have to reimplement all the existing Presenters in terms of VarDumper \u2014\u00a0essentially writing our own opinionated Casters. Twice (once for the REPL return value, once for dump) \u2026\u00a0which would lose any of the benefit of using existing Casters.\nYes, I do plan to fix references. That's one thing from VarDumper that PsySH is really lacking. But that doesn't warrant switching, it warrants fixing references in PresenterManager ;)\n. Done. Thanks @nicolas-grekas :)\n. Thanks for trying PsySH, and for reporting the issue, and thanks for taking a shot at this! I never noticed that single quoted multiline strings were breaking.\nThe trouble with regexp-based parsing is that it doesn't work :)\n\nWe're using an actual PHP parser to decide whether the statement entered is \"complete\" or not, and in general, it works really well. For example, here's what the current implementation does if you use a multi-line string with double quotes:\n\nAnd here's what it does with HEREDOC strings:\n\nUsually, when a statement is incomplete, PHP's parse error is \"Unexpected EOF\". PsySH detects when your input has that syntax error and lets you keep typing on the next line. For some reason PHP doesn't seem to use the same parse error with single quoted strings:\n\nSo in this case, the correct answer is to make the current \"is this statement finished?\" logic detect PHP's weird response and treat it like it does the \"Unexpected EOF\" syntax errors.\n. My initial shot at it seems to work:\n\n\u2026\u00a0but I am worried about potential side effects. I'm trying to find other types of invalid input that have an \"unexpected T_ENCAPSED_AND_WHITESPACE\" syntax error, because if there are any, this will treat them like an unclosed multi-line string, and that'll be confusing to people.\n. Found one! If we treat \"unexpected T_ENCAPSED_AND_WHITESPACE\" errors just like we treat \"unexpected EOF\" (i.e. if we don't throw a parse error, and just let you keep typing on the next line) we get this weird case:\n\nThere's no way letting you keep typing input after you've entered function 'what will ever result in valid code, so it should be throwing an error like it does when you type function \"what \u2026\u00a0but because of the special case we added letting you keep typing if you have an unclosed single-quoted string, it's acting as if you might possibly type something that'll make up for the fact that you started out with completely invalid code :)\n. Annnd a workaround for a workaround :)\n\nWe're getting somewhere, but I'm still not super comfortable about it. I'll keep playing :)\n. Okay. My fix (along with quite a few test cases) is in the fix/multiline-single-quote-string branch, if you want to check it out :)\nI'm still not completely happy, but it seems to be better than the current multiline string weirdness, at the very least.\n. Got it! See the latest in fix/multiline-single-quote-string. It now supports single-quoted multiline strings and also detects false positives on the parse error message :)\n. Here's the full fix (along with a bunch of test coverage): https://github.com/bobthecow/psysh/compare/fix/multiline-single-quote-string\n. You can:\njson\n\"psy/psysh\": \"dev-fix/multiline-single-quote-string\"\n\nP.S.: The status text in your terminal looks amazing, is that custom app or custom dot files?\n\nIt's a fish shell theme called bobthefish, which you can install via oh-my-fish.\n. It'll automatically close when the feature branch is released. I prefer to keep 'em open until then :)\n. Okay. This is in develop, and will be in v0.5.0 (hopefully released shortly?)\n. I imagine it's broken in the manual db, but I'm not sure why it would be. I'd expect encoding to either be broken all the time, or work all the time, not just be broken for one character (in this case, it looks like the character is \u3067).\nI'm able to reproduce it on my Mac as well, but I get the appropriate output when I run echo \"\u3067\" in either psysh or php -a.\nSo it's likely a result of some broken parsing or string replacement when building the manual database. The weird thing is, the three bytes it's outputting manually are definitely the bytes of the UTF character, so it's not the usual mojibake where part of a unicode character is misinterpreted:\n\u3067\nHIRAGANA LETTER DE\nUnicode: U+3067, UTF-8: E3 81 A7\n. Oh. It's doing a word wrap right in the middle of a unicode character.\n. htmlwrap needs to be updated to use mbstring versions of all the functions it calls.\n. Also, htmlwrap is expecting space delimited strings. TBH I don't know the best practices as far as how to wrap Japanese or Chinese characters, I'd welcome any suggestions you have there :)\n. Would it be appropriate to hard wrap after a certain number of characters, rather than looking for a space like it's currently doing? What are the wrapping rules in Japanese?\n. BAM!\n\nAnd I implemented Kinsoku Shori!\nDo me a favor? Download the manual db file from here and make sure it's not doing anything dumb, since I don't actually know what it says :)\n. The new manual versions have been shipped, you can download them from the links in the README. It's still got a few issues, but it's better than the old ones, and very much better for the CJK versions. I'll count this one as done. Feel free to re-open (or open a new issue) if you run into anything else :)\n. Thanks! This has been merged into develop and will go out in the next release.\n. @GrahamCampbell I had a great chat with @nicolas-grekas, and there's a chance we'll replace presenters entirely with VarDumper in 0.5.0... When is Laravel 5.1 slated to land? If we do switch to VarDumper, it'd be good to get PsySH 0.5.0 in it, and swap out the Presenters for the new shiny.\n. @nicolas-grekas Thanks for putting so much work into this. It's looking really good. A few more feedbacks\u2026 I'm not sure if any of these belong in the \"psysh opinionated dumper\" code, as they'd make it inconsistent with the way VarDumper works everywhere else, so maybe they're improvements that can be made to VarDumper itself?\n1. In my opinion, the closer things are to standard PHP code, the easier it is to understand them at a glance, as it doesn't require (as much) context switching. As an example, it might make sense to use HEREDOC instead of triple quoted strings for multi-line string dumping. Other things are less cruicial, but also mismatched with standard PHP representations, like the (string) representation of a resource, which uses #165 vs the VarDumper @165 representation.\n2. On the same note, it feels weird for array elements not to be separated by commas. It would feel more consistent for object properties to have commas after them as well, but it seems like there's a valid case either way\u2026\u00a0with array elements, though, missing commas just seems wrong.\n3. VarDumper highlights everything, which feels like overkill. It would be easier to understand at a glance, for example, if :, =>, [ and { were printed in the default terminal color, and if the quotes on strings were the same color as the string but unbolded.\n4. Per PEP-8 (the canonical python coding standard, and the community convention of the only language I'm familiar with that uses triple quoted strings) the start of the string is on the same line as the opening quotes, the lines in the middle are aligned with the start of both sets of triple quotes, and the quotes at the end are on their own line:\n\"\"\"this\n   is\n   a\n   triple\n   quoted\n   string\n   \"\"\"\nVarDumper does it exactly backwards of each of those rules :)\n\"\"\"\n     this\n     is\n     a\n     triple\n     quoted\n     string\"\"\"\n. Commas make things seem easier to parse. I'm almost never in a situation where an extra column is problematic. But I am occasionally in a situation where it's not easy to tell where array elements begin or end, especially as things get more complex. This is contrived, but I feel like commas would make this clearer:\n\nHow 'bout we split the difference and separate array elements with a dark grey comma, so it's not very visible?\nThe triple quoted string formatting does\u00a0rub me wrong. We're appropriating a feature from another language, but doing it wrong. It's like when a human language borrows a word but completely mispronounces it. Anyone who knows how it's supposed to be will be irritated. I don't want the PsySH output to be different than VarDumper, I want VarDumper to do it right ;)\nAgain, none of these things are blockers. I'm happy to approve this as-is. Everything from here out is just bonus awesomeness.\n. Huh. There's something strange going on with \\t:\n\n. :+1: looking good!\n. - Yay commas! :)\n- :+1: for the new way resources and refs are presented, because of the reasons I stated before (not having to context switch, being more familiar, etc). It feels like an improved version of (string) $resource and var_dump($obj), in ways which aren't surprising, which has always been my goal with dumping things\u2026\u00a0That said, if you strongly prefer @123 for refs and the :stream style annotation,  I don't think it's a problem to keep it the way it was. Using two different glyphs for the ids makes it a bit more clear that a resource is most definitely not an object.\n- I hadn't thought of it, but I do think I like showing newlines explicitly in \"\"\" strings. One of the things PsySH stole from Fish shell is that when stdout doesn't end with a newline (so it has to add one implicitly) it lets you know, so it's very obvious the difference between echo \"foo\\n\" and echo \"foo\". Especially with non-visible characters, :+1: for making them visible.\n- Style-wise, I liked the inverted black-on-green color highlighting for control characters that we had before.\n- If a shell has 256 color support, it seems like it might be a win to use 38;5;247 (the color VarDumper uses for refs) for things like refs and commas rather than default, to make those less-important things a bit less visually strong (and maybe =>? maybe even for the + and such on property names?).\n- I don't have a strong preference on short strings with newlines being shown on one line or not. I think I'd lean slightly toward one line like you changed it to, because it's a bit more concise, and solves for the not-uncommon case of having a single-line string that ends with a newline (\"foo\\n\").\n. :+1: That seems like an entirely reasonable middle ground.\n. Yeah, I tend to err on the side of supporting the minimum version possible for whatever our combination of dependencies allows, as long as that's not too arduous for us to maintain. In this case, there's no difference at all in our project\u2026 might as well support the ugly version just in case someone's stuck on 2.7.0 for a bit :)\n. It does, however, mean that PsySH requires PHP 5.3.9 now. Do you mind updating composer.json for that?\n. It's no harder for us to support 5.3.9 than 5.4+. It makes sense for all our users to update, but see two comments ago re: supporting older versions :)\n. It'd be awesome if Packagist could give package maintainers insight into PHP and dependency versions that package users are running. I'd feel better about dropping support for older versions if I knew how many people I'd be abandoning.\n. I mean on a per-package basis. For example, I'd guess that Mustache.php users are running older versions than PsySH users, on average, if for no other reason than several WordPress plugins and themes use Mustache.php.\n. Right. That's what I'm saying. For this project, I care how many PsySH users would be unable to update if I dropped support for 5.3.x. For another project, I'd care about how many users of that project would be affected. In my example, I'm almost positive that dropping 5.3.x support in Mustache.php would affect a significant number of mustache users.\n. Also, because of Ubuntu LTS I'm super reluctant to drop support for 5.3. It sucks, but there are a lot of Ubuntu servers out there. As it is, requiring 5.3.9 abandons anyone running CentOS LTS who isn't compiling their own PHP.\n. It's a significant portion, but way less than 90% ;)\nLaravel has 3233 installs today, PsySH has 7400. Monthly installs have about the same breakdown. And Laravel has been updated quite a bit more often than PsySH, so the version updates are probably skewing the numbers even more toward Laravel.\n. Okay, I'll merge this as is. I'm open to suggestions on the StyleCI thing, but I'm not going to make @nicolas-grekas fix it, because he didn't break it.\n. :boom: \n. Oh, I might be wrong about that. I just checked laravel/laravel, not laravel/framework. The framework has 12k installs, so the version updates are really skewing the numbers. It's hard to say :)\n. @nicolas-grekas Wanna take a shot at a PR for ezsh? I think that's the only other project with custom presenters.\nhttps://github.com/lolautruche/ezsh/tree/master/src/Presenter\n. Thanks!\n. Of course!\n. @avindra In the meantime, you can install the dev version to get the PHP 7 fixes. Either add it as a composer dependency, or if you're using the prebuilt phar, you can check out the repo and build a new phar version. Let me know if you need more details on either of those :)\n. @GrahamCampbell Heh :)\n. Everything is passing in PHP 7 in the develop branch. Are there any other known issues?\n. Heh :)\n. I'm familiar with the list of changes. I was just wondering if anyone had run into any other issues with PsySH in PHP 7. It seems to be working now, per the tests, but I haven't bothered setting up PHP 7 to try it out myself yet :)\n. Interesting. Apparently PHP Parser (as of 1.2.0) now rewrites things based on the use statements? The changelog mentions a \"use builder\" and \"namespace builder\", and I imagine they're the culprits.\nThe tests should prolly support both ways, since PsySH works (and will continue to work) with older versions of PHP Parser.\n. Or maybe it's that PHP-Parser's use statement parsing is no longer compatible, so the UseStatement CodeCleaner pass isn't able to rewrite use statements. I bet that's it.\n. In other words, 1.2 is a BC break? Sweet.\n. The problem with this is that we have to yank all previous releases of PsySH to keep things from resolving to an older version of PsySH if there's a dependency conflict. I wish people were more careful about SemVer :-/\n. @nikic Awesome. Tests pass when that check is replaced with an else.\n. :+1: Awesome. Thanks all. @nikic, thanks for the quick reply.\n. You know, if we're going to do a minor version bump, I'd like to see if we can get some of the other PRs into it. Maybe we ship a point release with the PHP-Parser fix first, then get this out after?\n. :+1: this PR looks good though.\n. v0.4.4 is out with the initial fix, I'll merge this one into develop and we'll get started on v0.5.0 changes :)\n. Thanks! Merging this despite the (unrelated) build failure :)\nWhich reminds me, one of these days we should update to use typed array notation instead of just array.\n. :+1: \n. Since this is broken IRL right now, I'd like to get it shipped. Is there anything else that should go in the point release that isn't already in develop?\n. - artisan tinker for Laravel\n- eZ Debug Shell for eZ Publish\n- drush-psysh for Drupal\n- magerun console command for Magento\n- sf1-psysh-bootstrap for Symfony\n- sf2-psysh-bootstrap for Symfony2\n- symfony-repl for Symfony2\n- psymf for Symfony2\n- wp-cli shell for WordPress\n. @GrahamCampbell Speaking of, Laravel docs basically don't even mention tinker.\n. These have been added to the README (in develop, it'll be updated on the repo home once that's merged to master).\n. :+1: \n. The use statements in a file are specific to that file. There's no way in PHP to \"load\" the use statements of one file into another file or interactive session.\n. Yeaaaah. That's a thing that happens. Unfortunately, due to the nature of PHP's json encoding error handling, I don't actually know how to stop it from happening. Short of writing our own JSON encoder, I guess.\nWe use JSON encoding when rendering return values which include array keys, function signatures and scalars. In writing the return value from json_decode, we're calling json_encode(null) (successfully) which overwrites the error returned by json_last_error with JSON_ERROR_NONE.\nYou can work around it by doing something like this:\nphp\n$arr = json_decode($str, true); $err = json_last_error();\n\u2026\u00a0which ensures that the \"last error\" is captured before it has a chance to be overwritten.\n. No problem!\n. Thanks for reporting. There's a fix in a70709b (in the develop branch) and it'll go in the next release.\n. That is really strange. As far as I know, the only thing that writes to the disk at all is hist command when called with --save.\nDo you have the exact input that did this? Can you reproduce it?\n. Yeah. Even without pcntl (i.e. on windows) psysh should just be catching that syntax error and reporting back with a fake \"parse error\". Unfortunately my windows VM is completely hosed right now, and I don't have time to fight with it.\nDoes this happen every time you enter that input? What happens if you just enter the array argument and not the function call?\n. Wanna know a secret?\n\n. That's not due to eager use of eval, that's because PsySH is trying to save you from yourself. It's a fake fatal error (you can tell the difference because real fatal errors are white text on black, and will exit to the terminal if you're on Windows). This particular fake fatal error is trying to save you from something like this:\nphp\nclass A {} class A {}\nFiguring out whether user input is like yours, which is okay, or like mine, which will fatal error, is most likely equivalent to the halting problem, so we won't ever solve it :)\nSo the real question is, which is more important? Keeping you from redefining a class (/interface/trait/etc) in the same (e.g. copy pasted) input, or letting you conditionally define the same class? PsySH usually errs on the side of letting you do anything that's valid, and trying to protect you from as many invalid things as possible, but in this case I don't have a strong opinion.\n. IIRC, many moons ago, @nateabele started working on a runkit extension for psysh. That'd probably be the best way for something like this to work. Maybe a handful of commands to undefine or rename classes, methods, etc?\n. Is there something else we can use besides runkit to allow meddling with things that PHP doesn't like you meddling with?\n. > \u2026so at least one thing is probably rong.\nPlease tell me you spelled \u201cwrong\u201d wrong on purpose ;)\n. Try \\Psy\\Shell::debug(get_defined_vars()) instead of eval(\\Psy\\sh())\n. The problem was that PsySH was (mistakenly) returning the file handle variable that you'd passed in initially, and it wasn't happy about making the round trip (because PHP can't serialize/unserialize resources). This has been fixed in the develop branch, feel free to test that out and confirm :)\n. I'm not sure, as I've never tried using PsySH with Atoum, but there should be a way to get it to work\u2026 I won't be able to take a look until tonight or tomorrow, but in the meantime, try adding this to your psysh config: \nphp\n'usePcntl' => false,\n. Oh, yeah, that makes total sense. I didn't realize they were running in concurrent subprocesses by default. That would definitely mess with PsySH :)\n. I'm not entirely sure what you're asking. Do you mind giving an example?\n. You can insert a literal tab character by typing ctrl+v tab.\n. That's a feature of readline and libedit, which PsySH uses to handle all input. That hotkey also works for inserting a literal tab in Bash, as well.\n. You have access to them via the -a flag on the dump and ls commands.\n. Ooh, that sounds like the exact opposite of how you want Ctrl+D to work :-/\nUnfortunately I have no experience with Windows or MSYS2 or anything of the sort, so I don't have any particular insight into fixing this. I'd start with disabling readline, and seeing if that helps. Add this to ~/.config/psysh/config.php (or maybe C:\\Users\\{USER}\\AppData\\Roaming\\PsySH\\config.php, since you're on Windows?):\nphp\nreturn [\n  'useReadline' => false,\n];\n. Thanks for reporting this. It has been fixed in the development branch, and will go out in the 0.5.0 release!\n. This project doesn't really follow git flow, since it's probably less applicable to open source projects than to teams. We don't really care where you do your work, as long as pull requests for all pre-release code end up in develop.\nAnd yeah, it'd prolly make sense to add that to CONTRIBUTING. I thought it was already there, TBH.\n. Talk to me a bit more about this. \n. Yeah, that makes sense.\nDo you mind switching to PHP 5.3-style arrays so this passes CI? :)\n. @GrahamCampbell I'll merge without a rebase. I know they're not his errors :)\n. @GrahamCampbell that just means we need to get this merged into master :P \n. Thanks for adding this!\nI've kept the list of projects for frameworks with multiple integrations in chronological order, with the oldest implementations first. Move this one to the end of the list and I'll merge :)\n. They're still all integrations, even if they're not bundles ;)\nIn time, one of these integrations will likely become the de facto way to do it, and we can recommend that. Until then, I'd rather keep links to older or less awesome projects than remove 'em preemptively.\n. Thanks!\n. Nope. master is always a stable release in this repo. v0.5.0 will be out very soon, though (likely this weekend?)\n. LGTM. Thanks for getting this fixed. I'll merge after Travis gets around to checking things out :)\n. Sorry, life and work has been crazy the past few weeks. I'll get on this :)\n. I'd wanted to work through some of the pull requests \u2014 possibly fleshing out the plugin manager idea a bit and moving some of them to plugins \u2014\u00a0but I'm leaning toward just shipping what we have as v0.5.0, since it's stable and works and has a decent amount of changes already. Thoughts?\nSorry, @Markcial, I know you've been waiting on me for a while :(\n. Done: https://github.com/bobthecow/psysh/releases/tag/v0.5.0\n. :+1:\n. Crap, you're right. I got my twiddles and my hats mixed up :(\n. Yeah, a --quiet option would prolly make sense, though I'm not sure how much use a REPL has from outside the REPL :)\nThe visible \"return\" character is an idea stolen from the Fish shell. Try this in php -a and psysh (and any other PHP REPLs you might have handy):\n```\n\n\n\necho \"wat\";\necho \"wat\\n\";\n```\n\n\n\nYou have four options, and most REPLs and shells pick the wrong one:\n1. You can never add a newline to output. This means if you echo \"foo\"; the prompt for your next line gets mashed into the output from the current. This is what php -a used to do, and what Bash currently does, and it's pretty ugly.\n2. You can always add a newline to output. This means if you echo \"bar\"; everything is fine, and the next line's prompt isn't in a weird place, but if you echo \"baz\\n\"; then you get an ugly extra newline after your output and before the next line's prompt. There are several shells and REPLs which choose this path. It's less ugly, but still ugly.\n3. You can detect whether the output ends in a newline, and add one yourself if it doesn't. This means your prompt is never mashed onto the same line as the output, and it's never hanging out two lines below. Unfortunately, it also makes it impossible to tell whether your output ended in a newline or not. This is what php -a currently does.\n4. You can detect whether the output ends in a newline, and add one yourself if it doesn't, but let the user know what you did. That's what Fish and PsySH do: the \u23ce character is added any time an implicit newline had to be added to the output to keep things sane. That's why it's in a different color as well.\nYou can see it implemented here.\n. It's because PsySH is detecting fatal errors and stopping them before they happen. In this case, your code is also stopping them before they happen, but there's no way PsySH can know that without solving the halting problem :(\nThe ultimate answer is to wait until PHP ships better fatal error handling (should be in 7.0?) and we can remove some of those checks (at least for non-windows users). Until then, we have to choose between protecting you from yourself, and occasionally hitting input that should be valid but which looks a lot like it's invalid.\n. I'll give it both a \"wontfix\" and \"someday\" :)\n. It works both ways, let's trust users to update to the latest one they can, rather than forcing a (potential) incompatibility with other libraries' dependencies.\n. (Sorry, was already in the middle of the hotfix when you opened this PR)\n. @nicolas-grekas agreed, we should keep compatibility with both. do you want to take a shot at a PR for that?\n. Closing in favor of #235 which maintains backwards compatibility.\n. Thanks for reporting. This has been fixed in v0.5.2 :)\n. @GrahamCampbell I did like the old style Closure formatting, where it showed you the actual function signature :)\n. @paolodina It's not your fault, the formatting for Closures isn't as intuitive as it could be. For future reference, anything starting with => is the output of the previous command. Errors are in RED and stand out a lot more :)\n. /cc @GrahamCampbell \n. It would be awesome to show less when dumping a Closure, not more :)\nCompare:\n\n\nMy preference would be to show the old style for most output, and the new style (maybe with the signature as well?) for dump --all and possibly regular dump.\n. @nicolas-grekas I'm all about removing redundant or obvious information where possible. We probably don't need to tell users that an anonymous function is an object of type Closure because all anonymous functions are objects of type Closure ;)\nIs there a straightforward way to render it just like before (or maybe with #177 in between the parens)? If not, that's cool, but I feel like that's the most information dense way to represent anonymous functions and it'd be awesome if we could do it again.\n. Presenters have been removed. Casters have been added :)\n. I'm closing this one due to inactivity. If you have further questions, please feel free to re-open it :)\n. You should be able to ignore them by changing your error_reporting level. See http://php.net/manual/en/errorfunc.configuration.php#ini.error-reporting\n. It's suppressing the error itself, but it is telling you about it :)\nI think the confusion arises because PsySH respects error_reporting, but logs all warnings and errors regardless of the current level.\nCheck out the dev branch. I've added an additional errorLoggingLevel configuration option, which allows overriding this default. If you set it to 0, all error_reporting level errors will still be thrown, but no additional errors will be logged.\nYou can also set it to any valid error_reporting values, e.g. E_ALL & ~E_NOTICE, which should do the trick for you.\n. No problem at all.\n. Sure. We can try it out :)\n. Everything should be wired up and running again. Any idea why this one fails on StyleCI but work (with equivalent config) locally?\nhttps://styleci.io/analyses/86ngn8\n. PSR2 is a jerk.\n. I re-read that section of PSR-2, and I think I disagree.\n\nIn the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.\n\nI read this as \"\u2026there MUST be (at least) one space after each comma.\" Whoever wrote that check reads it as \"\u2026there MUST be (exactly) one space after each comma.\" You could make an argument about what was intended by that statement, but it does allow both interpretations. And when a standard is ambiguous, it has to allow all reasonable interpretations.\nWhere do I open a bug report for this argument fixer? :)\n. I disagree. Anyway, it's kind of a moot point, since it's highly unlikely they'll change it, and it's highly unlikely either of us will convince the other that their interpretation is correct. Closing for now ;)\n. What does Psy\\info() say?. Yeah, it looks like something's not working with your readline.\nThat PHP version looks a lot like a version that ships with OS X, not like one installed via Homebrew. What does which -a php say?. Oh, yep. That'll do it!. The PHP version installed via XAMPP (/Applications/XAMPP/xamppfiles/bin/php) is being used when you run psysh, not the version from Homebrew (/usr/local/bin/php). So even though the Homebrew installed PHP came with readline, you're not getting it in your psysh sessions.\nChange your $PATH so that /usr/local/bin comes before XAMPP's bin and you'll be fine :). This should be fixed as of v0.5.0. Do you mind verifying your PsySH version number?\n. No worries!\n. How would you feel if PsySH checked for updates periodically and added a note to the welcome message?\n. Oh, nice. I didn't know about long_array_syntax.\nI'll merge this for now, but I think the method_argument_space fixer is wrong. See my comment on #222 :)\n. It doesn't actually matter what they meant. Unless they update the spec (which they almost certainly won't) then it's ambiguous and both readings are valid. \n. I didn't mean the spec can't change. I meant the spec almost certainly won't. I've been around the FIG long enough to realize that :P \n. The local config file should only be loaded if an explicit config file was not provided. For example, \n``` bash\npsysh --config myconfig.php\nor\nPSYSH_CONFIG=myconfig.php psysh\n```\n\u2026 skips the global config file in favor of an alternate config file. If PsySH was invoked like this, we don't want to merge in .psysh.php on top of the explicit config.\n. Do you mind adding this to Psy\\info as well?\nhttps://github.com/bobthecow/psysh/blob/master/src/Psy/functions.php#L35\n. The StyleCI issue should go away if you rebase onto the current develop branch.\n. Awesome, thanks!\n. That one is likely broken on the PsySH end, to be honest.\nThe parse tree changes for anonymous classes (as you might expect) but there's a good chance that our code is making assumptions about it that no longer hold. If I had to guess, it's because anonymous classes don't have names, and somewhere we're trying to save the names of the classes we know about :)\nThanks for reporting. I'll take a look into it.\n. This is fixed in develop and will go out in the next release. Thanks for the bug report!\n. If it's automatic, daily is fine. If it's prompting, daily would be super annoying :)\n. Once we've established that their current version is outdated, we can just add \"Update available\" to the header every time it starts. Something like:\n```\nPsy Shell v0.6.0-dev (PHP 7.0.0RC1 \u2014 cli) by Justin Hileman\nUpdate available\u00a0\u2014\u00a0http://psysh.org\n\n\n\n``\n. :+1:\n. Can you show me the output ofPsy\\info()`? If you can't get it to run in the shell, make a file like...\n\n\n\nphp\n<?php\nvar_dump(\\Psy\\info());\nand call it via ./psysh info.php\n. Strange. So maybe a bug in 5.6.12 then? I tried reproducing it with PHP versions I had handy, and was unsuccessful, but I don't think I got around to installing 5.6.12 to test there.\n. Sorry about the delayed response.\nIs your filesystem case sensitive? It should be PsySH not PsySh, so that might be it.\nOtherwise, run Psy\\info() in psysh and let me know what it says?\n. Sorry for dropping the ball on this. Do you mind checking getenv('APPDATA') inside PsySH and seeing what it says?\n. Oh, and getenv('HOME')\n. So the bug here is that the presence of a HOME environment variable is throwing off the AppData directory support. I'll get a fix in for that :)\n. @digfish Can you confirm that you have getenv('HOME') as well?\n. The indent would be a bit difficult, as we can't really parse an incomplete statement, so we can't really tell anything but the fact that the previous line is continued. We could tokenize the code, and build our own partial AST to decide how indented something should be, but (so far) that has felt like more trouble than it's worth.\nWe do accept pull requests, though :)\n. Thanks @nicolas-grekas!\n. This has been fixed in develop. After way too long a delay \ud83d\ude2c\nThanks for reporting it! The fix will go out with the next stable release.. I believe argv should always be present in $_SERVER. How are you running it?\n. I mean how are you invoking PsySH?\n. And that code is being run in a web request via Apache?\n. Sorry about all that. I think I've got a fix in 62f59b66\n. @GrahamCampbell That was a different issue. The issue fixed here is that PHP lets you call ::class on anything, whether it exists or not, and it just returns the fully-qualified name you referred to it as.\nphp\nuse ImaginaryNamespace\\ImaginaryClass;\necho ImaginaryClass::class;\n\u2026\u00a0works in PHP even if there's no such namespace and no such class.\n. @lvht I'm not sure when the next release will be yet. Feel free to use the dev version in the meantime :)\n. but you might need an @dev depending on your minimum stability settings, yeah?\n. Thanks! A few things:\n- Please develop against the develop branch, as that has the most recent code and is where we stage things for the next release.\n- PsySH supports PHP < 5.5 as well, so there needs to be a version check here.\n- ClassName::CLASS should be supported as well.\n- I'd like to see some test coverage for this. It should be as simple as adding a line or two to an array :)\n. Looks good, thanks!\n(I'll try to get that StyleCI issue resolved post-merge)\n. This might already be fixed in the dev branch, if you want to take a look there.\n. Sorry about the wait. This has been fixed in develop and will go in the next point release.\n. I'm not seeing this behavior on v0.6.0-dev. Do you mind checking the dev branch to see if it's resolved?\n. This still looks fine to me\u2026 (v0.7.1, PHP v7.0.3, El Capitan)\nMaybe it was just the wrong version of PHP / OS that was getting you?\n. I'm really sorry, the config example on psysh.org was a bit out of date. Presenters have been deprecated in favor of VarDumper Casters. I've updated it to the latest example config from the project README.\nI would not recommend just copying that example config though. The default settings are almost always the right ones, and the example shows you how to override all of them to be the wrong ones :)\n. As for the location: the old config location was in ~/.psysh. The new, preferred location is ~/.config/psysh, and that's reflected in the readme. PsySH supports both, though, so if you had an outdated config in the old location it would have still read it. \nAgain, don't just use the config from the readme. The defaults are almost always they right ones for everyone, including you. Unless you have something specific that you need to override, you shouldn't need a config file at all. The config example in the readme tells you how to change every option away from the defaults :)\n. The methods are available via ls -l DOMAttr.\nIt's strange that the documentation isn't working, though, because doc DOMAttr::isId works. I'll look into that.\n. @rkgrep it's been fixed in PsySH, but only on HEAD. If you want to use PsySH with Symfony 3.x before the 0.6.0 release, change your dependency to 0.6.x-dev.\n. :+1: \n. I don't know of any blockers, other than confidence in the stability of a dependency on an unreleased Symfony 3.x.\nI'm traveling this week, but I'm happy to cut a release next week unless there's something more we want to get in 0.6.0.\n. @GrahamCampbell how are you feeling about the current state of the dev branch? Anything you want to see in it?\n. :ship:d\n. Thanks.\n. :+1: \n. Thanks for getting this going!\nLet's make our own parser factory of some sort so we don't duplicate the parser creation logic. It should probably have an optional \"support php 7\" flag, which defaults to \"is this currently php 7?\" but could be passed as an arg from the parse command.\n. :+1:\nFill in the missing docs that @GrahamCampbell pointed out, and change that one bit of reflection, and we're good to merge. Thanks!\n. @alexeyshockov around? i've got a bit of time right now, and won't have a chance to look at this again for a week or so, so i wanted to merge soon :)\n. Looking good. Thank you!\n. The first directory isn't just as good as AppData. Just like XDG is the \"right\" place to put these files on *nix, AppData is the \"right\" place to put them on Windows. The fact that the existence of a HOME environment variable throws off the AppData support is a bug which should be fixed :)\n. > On the other hand, I currently have 49 dot directories in my HOME directory :)\nPsySH tries to be better than those 48 other libraries, though ;)\n. :)\n. This is an issue with readline and libedit (the libraries used to get user input by almost every command line thing ever, including PsySH) and I don't know that there's a way to fix it other than disabling tab completion :(\nhttp://superuser.com/questions/926028/completion-when-pasting-bash-command-beginning-with-tabs\n. As far as I can tell, it's not possible with the PHP readline bindings. The tab characters seem to trigger tab completion immediately, before I have access to them on the readline buffer :-/\n. Oh! I forgot to update this diff. This is fixed as of v0.8.11 (the readline way) if you use readline (not libedit) and a reasonably modern terminal app. Enable useBracketedPaste in your psysh config and enjoy :)\nhttps://github.com/bobthecow/psysh/releases/tag/v0.8.11\n. Can you paste the output of \\Psy\\info()?. Yeah. It\u2019s because you\u2019ve got libedit rather than GNU readline :(. :+1: cool, i'll check that out.\n. Yep, merged!\n. How did you stop it from moving the comments around?\n. Heh. I suppose that works :)\n. Thanks!\n. :+1: \n. The use is actually working, the false is a bug :)\n. Okay, a fix is in the dev branch. Thanks for reporting!\n. > This feature isn't working. \nThis feature doesn't exist ;)\nIf you're trying to list classes in a namespace, you could do it like this:\nsh\nls -l --classes --grep MyPersonalNameSpace\n. you won't see autoloaded classes until you've loaded them, because that's how autoloading works :)\n. There are no standard methods on PHP objects, and ls doesn't currently have a way of excluding inherited methods, but that's a great idea. \n. Craaap. That's what I get for mocking that entire code path while testing it, rather than spinning up a Windows machine :(\n. Thanks for the fix. I'll get a release cut tonight.\n. Thanks again. This has been merged and released as a hotfix in v0.6.1.\n. If you add psysh to your project's (dev) dependencies, it will :)\n. No worries, it's not in the documentation.\nIt's actually a side effect of a change that shipped a few versions ago where a globally installed psysh tries to defer to the current composer project's required version if one exists. And it does that by using the local composer autoloader rather than the globally installed one.\n. Nice!\nWhat happens if you do this:\nphp\nif (false) {\n  exit;\n} else {\n  echo \"do something cool!\";\n}\n:)\n. Master is failing on StyleCI, so since this was originally created against master it might be failing as well?\n@damiankloip Do you mind rebasing against the dev branch?\n. You could probably rewrite the AST to throw an exception on execution, rather than throwing an exception on parse?\n. That's exactly the way forward I'd use. It's not even that horrible if you break it up a bit:\n``` php\nuse PhpParser\\Node\\Stmt\\Throw_;\nuse PhpParser\\Node\\Expr\\New_;\nuse PhpParser\\Node\\Name;\nuse PhpParser\\Node\\Arg;\nuse PhpParser\\Node\\Scalar\\String_;\n$args = array(new Arg(new String_('Goodbye.')));\n$stmt = new Throw_(new New_(new Name('Psy\\Exception\\BreakException'), $args));\nreturn $stmt;\n``\n. oh, the return business might be from the implicit return pass? looks like phpparser parsesexit;anddie;the same.\n. Somewhat relatedphp -a` shenanigans:\n\n. Looks good to me. Thanks!\n. Thanks, this seems like a reasonable fix. @Markcial any thoughts?\n. Thank you!\n. [copying my responses from the gitter channel]\nPsySH should work for that.\nYou should be able to use PsySH by swapping out the input and output classes for something that maps to the ZMQ.\n\nAnd is possible to use their classes as a dependency for another composer package? Or the distribution only has the PHAR binary?\n\nYeah, it works as either a phar or a composer dependency. The projects that ship with it (Laravel, Drush, etc) all use it that way. The phar is mostly for convenience.\nI think there are a couple of issues on the repo about interactive web shells, someone might have already done some of the work.\n\nI've integrated psysh into a framework-less project (we mostly use libraries through Composer instead), pretty painlessly. Making a myapp shell command was as simple as adding psysh in composer.json and writing a few lines of code.\n\nFor the jupyter integration it shouldn't be much more than that. Shell::run accepts an InputInterface and OutputInterface instance. By default they use stdin and stdout. But you could just as easily pass in a pair of services that talk to jupyter.\nyou might not even need input interface, actually. you might want shell eval instead. depends on how it's easiest to map to jupyter.\nwait, i'm misremembering. you wouldn't use inputinterface at all. that's for the command line arguments.\nyou'd implement an outputinterface service (like https://github.com/bobthecow/psysh/blob/master/src/Psy/Output/ShellOutput.php) and a readline service (like https://github.com/bobthecow/psysh/blob/master/src/Psy/Readline/Transient.php)\n(the readline instance would give you access to history as well)\n. (for posterity) check out https://github.com/Litipk/Jupyter-PHP and please contribute :)\n. I don't know, I haven't run into this before. What OS are you running? How did you install PHP? Can you get me the output of \\Psy\\info()?\n. Wow, sorry, I couldn't come up with anything for this, but I dropped the ball on responding. Were you able to resolve this?\nThat (max_fd=7) looks suspicious. Can you paste the output of ulimit -a?\n. I have no idea, and I haven't been able to reproduce on any of my Linux boxes. If you can figure out anything further, I'd appreciate it :)\nIn the meantime, you can probably work around it by disabling pcntl support in your PsySH config file:\n```php\n<?php\nreturn ['usePcntl' => false];\n``. Try running it insiderlwrap?\n. Oh, nice! Thanks @msheakoski \n. I've added auseUnicodeconfig option in thedevelop` branch. It lets you explicitly disable PsySH-generated unicode character output, which should do the trick for you.\nAt some point I plan to add code point detection for Windows users which will toggle the useUnicode option automatically, depending on the current code point. But for now, it'll be available via a config option :)\n. This has been fixed in the latest release. Please set 'useUnicode' => false in your psysh config to use alternate glyphs.\n. :+1: \nDoes it make sense to add support for invoking force color via a command line flag as well?\n$ psysh --force-color ...\n. looks good to me.\nThe one other thing to consider is whether to have a three-state color option, i.e. true/false/auto. IIRC some windows users run into trouble with colors with some combination of cygwin or third party terminals, or something. If we go that route, flags could be --color and --no-color, corresponding to 'forceColor' => true and 'forceColor' => false. If not set at all, it would be auto as it currently does by default.\n. > Both colorization libraries PsySH uses are taking Windows terminals into account in their auto-detection functions:\nRight. I seem to recall something about that sort of auto detection failing in some circumstances, which is why most Symfony console based apps (e.g. composer) have --ansi and --no-ansi flags for forcing either direction.\nThat said, I don't have a strong opinion either way :)\n. Sounds good. Thanks @toddmazierski :)\n. @toddmazierski Any update on this? Thanks!\n. No worries. Thanks \n. :+1:\n. Oh, this test case probably should be gated behind a check for PHP 7. It worked with an older version of PHP Parser 1.x, but my guess is that it was unintentional on their part?\n. That seems reasonable, since we support it :)\n. This should be fixed by nikic/PHP-Parser@719ca71d4ac80e1985dcd91dd8ec5a47db58ad80. I'll take a look and see.\n. Yeah, it looks like that commit fixes the parse error. Once PHP-Parser cuts a new release, parsing it will work as expected. It might take some shenanigans to get the strict types declaration to carry over between lines (kind of like the way we do namespaces), but that would prolly be mostly copypaste.\n. \nLet's see your php -a do that :P \n. This is fixed in develop and will go out in the next release. Note that you'll need to upgrade to the latest PHP Parser release for it to work.\n. I'm assuming Ubuntu? sudo apt-get install php7.0-readline :)\n. @kbirmhrjn Please let me know if this didn't fix the issue for you, and we can reopen.\n. :+1:\n. You either require it, or you require an autoloader that knows where it is.\nDid you install it locally or globally via Composer? Do you use Composer for your project already, or is this the only thing you're using composer for?\n. :+1: Glad to hear :)\n. Run history --clear from inside PsySH.\n. Looking good. Add a comment to that one class and squash everything?\n. Great. Thank you!\n. Unfortunately, this is impossible to represent using Symfony's OutputFormatter, due to a bug/limitation in their escaping logic. Here, PsySH escapes and wraps the string:\nphp\n$value = \"<{$style}>\" . $this->formatter->escape($value) . \"</{$style}>\";\n\u2026 which in your case would return <string>\\</string>, the OutputFormatter code to spit out a green string.\nBut, it turns out OutputFormatter escapes literal < characters by adding a \\ in front of them:\nphp\npublic static function escape($text)\n{\n    return preg_replace('/([^\\\\\\\\]?)</', '$1\\\\<', $text);\n}\n\u2026\u00a0so your output is something more like <string>&lt;/string>. Which wouldn't really be a problem except that OutputFormatter doesn't have a way of escaping that \\ to prevent it from escaping the < \ud83d\ude15\nTrying to escape it ourselves just results in more \\ in front of the </string>:\n\nThis is a long way of saying we need to take the issue up with Symfony, but unfortunately it's probably not possible to solve given their naive string representation.\n. @mpyw I've got something that works. See symfony/symfony#17908 :smile: \n. :+1: Thanks!\n. Thanks, this has been merged into the develop branch.\n. you should be able to launch psysh with env vars (depending on your shell, something like XDEBUG_CONFIG=\"idekey=atom\" psysh ...) and those will pass through to everything.\n. You're right, it's PHP-Parser. But they added support for this recently. You might need to grab the psysh dev branch (or update dependencies yourself) to get it though?\n. This works great in v0.7.0. Upgrade :)\n. No problem. \n. Thank you for reporting. This has been fixed in the develop branch and will go out in the next point release.\n. This fix is included in v0.7.1.\n. Hmm. Interesting. I'll take a look. \n. Not all that strange. PHP's stupid empty implementation strikes again.\nhttps://github.com/bobthecow/psysh/blob/master/src/Psy/Shell.php#L605\n. Oh, I know why it does this. It's still stupid :)\n. Each of those except '0' is an empty version of whatever type they are. Empty string? ''. Empty array? []. Empty number? 0 or 0.0...\n'0' is not an empty string.\n. Because PHP made bad decisions a long time ago, and never breaks backwards compatibility.\n. the '\\0' one is interesting. to me, that's more empty than '0' :P \n. OK. Should be fixed in develop. The only thing I'm not sure about is the === on the string comparison\u2026\u00a0I couldn't get output buffering to send the ob_start callback anything but a string, but i'm not positive it'd never get null or false something dumb. Could add an explicit (string) thunk just in case.\n. The fix was released in v0.7.1. Thanks again for reporting!\n. I've been meaning to sort this out for a while. Unfortunately, it's not possible to use SSL with a non-github.io domain on GitHub Pages. I could use Cloudflare or similar to use SSL for psysh.org, but it'd still have an unsecure connection between Cloudflare and GitHub's servers.\nThe psysh binary should probably be hosted on the releases page anyway, so moving it there isn't a problem, but that does mean the actual download path is a moving target. We could use shortlinks to work around that, but it'd have to be a shortlink that can be updated, because having different download instructions for every release is a pain.\nIdeas?\n. Alright, this should do for now. The instructions have been updated to say:\n~ $ wget https://git.io/psysh\n~ $ chmod +x psysh\n~ $ ./psysh\n\n. Unfortunately, not smart enough to autocomplete instances that aren't stored in variables. This should work though?\nnew WhateverClass\n$_->[tab]\n. Thanks for the bug report. At the very least we should make those errors go away :)\n. Alright. The notice is fixed in develop, and that will go out in the next release.\n. I personally think everyone should be using PHP 7 at this point.\nSome projects are plumbing, and some projects are porcelain. I see PsySH more as plumbing. And while it's awesome to have new high efficiency washing machines, and low flow shower heads, and fancy double-flush-volume toilets, it's not the plumbing's place to tell you that it's time to upgrade :)\nPsySH needs to just work, wherever you put it. So until it's more of a pain than it's worth to support 5.3, or something comes along that can't be just as easily backwards compatible, I'm not inclined to drop it.\n. :)\n. Symfony Console had a bug escaping slashes \u2014\u00a0see #282 and symfony/symfony#17914\nIt looks like the fix made it into releases v2.3.38, v2.7.10, v2.8.3 and v3.0.3. Update your symfony/console dependency and see if it persists?\nIf you installed PsySH directly, just download a fresh copy. It's fixed in the last few phar releases as well.\n. Great!\n. Nope! PsySH is a REPL, and doesn't support (true) breakpoints, catchpoints, stepping, continuing, etc. \nI've long thought it would be great to add support to run PsySH as a remote client for phpdbg, but I haven't had the time or inspiration to implement that yet :)\n. It's possible to disable them, but not to change what colors they are. Why do you ask?\n. Yeah, if it's going to supply a background color, it should supply foreground as well :)\n. It looks like the Symfony VarDumper component might be missing a dependency on the iconv polyfill. cc @nicolas-grekas \n. That seems entirely reasonable, but also leads to unexpected things like this. Should we add a suggested dependency on ext-iconv, with a message about how to install the polyfill then?\n. Though in this exact case, that wouldn't help, because this is the pre-packaged phar rather than a composer install. For that I suppose we could ship a polyfilled version of psysh. We definitely don't want to include it by default, since that increases the size of the phar by ~2.5x :-/\nAre there any other assumed extensions that aren't declared? I'm more than happy to ship a bloated version along with the regular one just to make peoples' lives easier, I just need to know what to put in it :)\n. The next release will include four versions of the phar: normal, \"compat\" (which includes polyfills for intl and readline), and php 5.3 versions of both. They'll be available via the repo's releases page.\n. Check out https://github.com/bobthecow/psysh/releases for the \"compat\" releases, which include the intl polyfill (and a bonus readline one as well).. You can just call psysh using the PHP version you want. If you're using the phar in pwd, it'd be something like this:\n/path/to/php/version ./psysh\n. What happens if you run chcp 65001 before starting PsySH?\n. I've never had much luck getting unicode to work on Windows. What happens if you launch cmd with the /U flag?\n. Thank you for this!\nI'm a bit reluctant to add hoa/console to suggested dependencies, at least with the current text, because most(?) people will not need it. Should it be a runtime warning instead? Maybe more descriptive text would help?\n\nA pure PHP readline implementation. You'll want this if your PHP install doesn't already support readline or libedit.\n\nBut a suggested dependency doesn't help people who use the phar-based install :(\nFor the phar-based install, I could see building Hoa\\Console into the phar\u00a0by default. It looks like it would increase the size of the file by about 25-30%. I just pushed a commit that offsets it a bit by making the existing phar lighter by 10%, but that's still a non-trivial amount of code to add to support a small subset of users.\nAlternatively, we could do what we do when the user is missing ext-pdo-sqlite: add it to composer suggested dependencies, but also add a runtime warning for users who run into it with a phar-based install.\n297 has a similar issue, but with ext-iconv.\nProbably the best thing to do is what was suggested there: to add a more descriptive suggested dependency message to keep users from unintentionally installing this, and also to ship a second (bloated) phar. If a user tries to use the phar-based install but is missing something we want, we can warn at runtime that they should download the bloated phar. That phar would include Hoa\\Console as a readline polyfill, Symfony's iconv polyfill, and anything else we come across like this.\nHow's that sound?\n. Thanks @zonuexe!\n. @Hywan any sense for how much work it'd be to get Hoa\\Console autocomplete working with PsySH's current autocompletion? That'd be nice to support as well :)\n. @Hywan PsySH currently has readline-based completion support, provided by AutoCompleter. It's not using the Psy\\Readline abstraction, but could be changed to use that. If that were the case, it should be as simple as implementing readline_completion_function and readline_info as part of the Psy\\Readline interface.\n. You can specify the data directory to be under /tmp. Is that enough?\n. it calls sys_get_temp_dir, so it does what it should on Windows as well.\n. I guess it'd be up to you to guarantee that each session had a unique subfolder of /tmp. You could easily do this in the psysh config file, since that is just PHP, and is executed at the start of every session.\nWe really should add support for ephemeral history. Would detecting that the data directory doesn't have write permissions be enough, or should it be a config?\n. Oh! This issue has been fixed in develop. If the history file can't be written, it just runs without one. . Thanks for your contribution.\nWhy should we do this? As @GrahamCampbell said in the other PR:\n\nThe reverse refactor would also make a valid PR if you see what I mean.\n\nYou could send the opposite commit, with the exact same commit message and pull request title, and it would be just as valid. \n. Oh, just kidding, this was fixed by 4f557d1a0f7e44be33e0c1224b2a5ccf2acc5949 in v0.7.1\n. Where did you get your PHP 5.3 on El Capitan?\n. Hmm. I haven't been able to sort this out yet. Something about the phar compilation doesn't play nice with PHP 5.3, or at least the default settings on OS X + homebrew PHP 5.3.\nI'll keep digging, but in the meantime, the composer-based install works just fine :)\n. You shouldn't need to modify the composer dependency, but if you're using the same install with different PHP versions you might get incompatible versions installed.\nThe next release will ship prebuilt phars specifically for php 5.3, though.\n. Check out https://github.com/bobthecow/psysh/releases for PHP 5.3 specific releases :). >function name to lower case\nThis is just PHP \u00af\\_(\u30c4)_/\u00af \n```\n\n\n\nfunction fooBarBaz(){}\nget_defined_functions()['user']\n=> [\n     \"composerrequired5d4e921bd47fcc9f760ee0015dd744a\",\n     \"composer\\autoload\\includefile\",\n     \"mb_ord\",\n     \"mb_chr\",\n     \"mb_scrub\",\n     \"curry\",\n     \"xcallable\",\n     \"resolve\",\n     \"dump\",\n     \"psy\\sh\",\n     \"psy\\debug\",\n     \"psy\\info\",\n     \"psy\\bin\",\n     \"foobarbaz\",\n   ]\n```\n\n\nadd extra space on the end\n\nThis (and the double completion) should be fixed soon!. Thank you for reporting. This is fixed in the dev branch and will go out in the next release.\n. Nice!\n. Merged. It'll go out in the next stable release. Thanks again!\n. I assume that doesn't happen if you use arrow or tab keys in your shell? Can you paste the output of Psy\\info()?\n. Okay. Your PHP was compiled without readline or libedit support. On Ubuntu, you'd fix this by installing php-readline. Give that a shot?\nsudo apt-get install php-readline\n. Great!\n. I'm unable to reproduce this locally, but I can think of a few things to check:\n- does your local composer.json share any dependencies with PsySH?\n- what happens when you start up the PHAR version and just type 2000?\n- what happens when you start up the PHAR version, load vendor/autoload.php and type 2000?\n- what happens when you run the PHAR version from inside a script that has already loaded your autoloader?\n```\n<?php\nrequire_once 'vendor/autoload.php';\nrequire 'psysh';\neval(Psy\\sh());\n```\n\u2026\u00a0can you reproduce now?\n. No worries. I'm glad you got it sorted :)\n. Thanks for getting this started.\n. Guzzle is a pretty hefty dependency for effectively doing the same thing as this:\n$url = 'https://api.github.com/repos/bobthecow/psysh/releases/latest';\n$context = stream_context_create(['http' => ['user_agent' => 'PsySH/0.7.2']]);\n$contents = json_decode(file_get_contents($url, false, $context));\n. Just to save you from some more code style issues, I'm going to merge #316. Do you mind squashing and rebasing after that so we can get a clean diff to work with?\n. No worries. It's merged now :)\nHave a good night!\n. Hmm. Looking at Console\\Output, it looks like writeLn(null) and writeLn([]) don't do anything anyway, so it shouldn't have written an empty line if getVersionCheckResult returned null. I wouldn't have guessed that from the function name :)\n. \u00af_(\u30c4)_/\u00af\nMy only concern was with not printing a random newline for users without updates, especially since that will almost always be the case :)\nThe old way was fine, but a bit ambiguous, so I'd lean slightly toward the new way. That said, if I knew writeLn didn't write a line if the result was null, I wouldn't have asked you to change it :)\n. This is looking good. My one remaining concern is that it slows down startup considerably. On my system, with good hardware and a decently fast internet connection, just starting psysh went from ~30 ms to ~500 ms. I imagine it's a lot worse if you don't have a quick machine and quick interwebs.\nI'd be happy to merge as-is, but I wouldn't want this to go into a stable release without some support for check intervals and caching results.\n. Yep, it's fine to do that as a separate PR. Want to squash and rebase this against develop and I'll merge?\nFor the interval, a 1 week default seems reasonable. Maybe support \"always\", \"daily\", \"weekly\" and \"never\"?\nFor caching, I'd just go with a JSON file in $XDG_CACHE_HOME || .psysh || $APPDATA/PsySH. See ConfigPaths for how we deal with other config directory types.\n. Thanks, merged!\n. See the last few comments.  This isn't going to land in a stable release without the ability to disable it. \n. Thank you for reporting. This has been fixed in the development branch and will go out in the next release!\n. Many framework or app specific PsySH adapters already do this sort of thing. For a great example, see ezsh: https://github.com/lolautruche/ezsh/blob/master/README.md\nYou can also set up an include file via your psysh config or by passing it on the command line. You can also do anything you want inside the config file, because it's just PHP :)\nThe one thing you can't do is pass things to be evaluated as psysh input (rather than PHP code), which is what I believe @sdbruder is looking for here. \n. That sounds kind of insane. But if you want to take a shot at it, I'm happy to review pull requests and make suggestions :)\n. This is a limitation of PHP, unfortunately. I would recommend installing a copy of PsySH via composer, and requiring the composer autoload in your wp-cli config.\n. Thanks for reporting. This has been fixed in the develop branch and will go out in the next release.\n. Heh. isset and empty are language constructs, not functions, because PHP is awesome like that :)\nI just pushed a fix to develop branch. It'll go out in the next release.\n. Does PHP 7.1 not have an xdebug config to disable? can we make that line more robust, so it disables if it detects the config, rather than special casing versions we don't think will have it?\n. (php --ini | grep xdebug) && phpenv config-rm xdebug.ini\n?\n. oh, good to know. is 3.x required for 7.1?\n. \ud83c\udd92 \n. oh, that xdebug thing prolly needs an || true on the end to keep it from barfing when the result of grep is false.\n. Thanks! Any ideas why hhvm didn't finish? The xdebug change?. [[ \"$TRAVIS_PHP_VERSION\" != hhvm* ]] && (php --ini | grep xdebug) && phpenv config-rm xdebug.ini || true\n\u2026\u00a0ought to do the trick?. Awesome. Thank you.. @GrahamCampbell Because if you spin up the built-in webserver from the command line, you can put in an eval(\\Psy\\sh()) call in a request handler, interrupt the response, and mess with things in realtime. It's pretty ok :)\n. Awesome. Works like a charm. Thanks @5tevan!\n. https://git.io/psysh :)\n. I don't know much about composer scripts, but it looks like it's running command line executables in a non-interactive subshell or something. Defining a PHP callback-style script works great, though:\n``` php\nnamespace MyVendor;\nclass Scripts {\n    public static function psysh() {\n        eval(Psy\\sh());\n    }\n}\n```\njson\n{\n    ...\n    \"require\": {\n        \"psy/psysh\": \"^0.7.2\",\n        ...\n    },\n    \"scripts\": {\n        \"fly\": \"MyVendor\\\\Scripts::psysh\"\n    }\n}\n. Closing, as this is an issue with Composer, not PsySH. See composer/composer#5856 \ud83d\ude04 . Thanks for the feature request. This will now happen by default for any Psy\\Shell::debug() or eval(Psy\\sh()) calls. \nIt might be worth adding a config setting to suppress this, but mebbe we'll wait until someone complains :P. It's in the develop branch and will go out with the next stable release.. I've been waiting on the 3.x stable release of PHP Parser for full PHP 7.1 support, so I haven't cut a release yet. It's on beta 3, so hopefully it'll be out any day now?\nIn the meantime, it's pretty easy to build the phar yourself to pull in the latest var-dumper. . I'm working on a release now :). The fancy new automatic release build stuff I had set up on CI timed out, so I'll get the prebuilt phar released\u2026\u00a0hopefully tonight?. This is already fixed in the dev branch. I just need to cut a new release so it shows up in master :). You should be able to run psysh index.php, but I've never used it so I don't know for sure.. Were you able to get this sorted out?. Try again with v0.8.0? (released approximately 30 seconds after you opened this issue \ud83d\ude1b). Okay. Thank you for reporting. I'll take a look at it this evening.. @asolopovas Sorry about the delay! I haven't been able to reproduce, and I was waiting to get my Windows VM to behave again so I could check there\u2026\u00a0Odds of that happening any time soon are kinda slim. Do you mind doing some remote debugging in the meantime?\nJust paste the result of running readline_info() inside psysh?. That's not nearly enough info :-/\nDoes Psy\\info() work for you?. Oh, that was a bug in the last version of psysh. Update to the latest release and try again?. Oh, yeah. That won't work. I just pushed a change to develop which should help with the output. But it doesn't help with your strangely missing readline info :(. @jens1o can you show me the output of \\Psy\\info()?. Thanks! And now the output of readline_info()?. That's really strange. It knows you're 15 characters into the line, but doesn't show us the actual line. I don't think we're going to be able to do autocomplete with whatever is going on here. For comparison, here's readline_info() on a well-behaved system:\n=> [\n     \"line_buffer\" => \"readline_info()\",\n     \"point\" => 15,\n     \"end\" => 15,\n     \"mark\" => 0,\n     \"done\" => 1,\n     \"pending_input\" => 0,\n     \"prompt\" => \">>> \",\n     \"terminal_name\" => \"xterm-256color\",\n     \"library_version\" => \"7.0\",\n     \"readline_name\" => \"other\",\n     \"attempted_completion_over\" => 0,\n   ]\nWe could probably make it work without end, mark, done, and pending_input, if it at least provided line_buffer.\nSorry, I don't know what to do here other than disable tab completion on systems like this :(. Okay. I just pushed a fix for the exception, and a workaround that should actually provide some autocomplete results for you now. They won't be amazing, so no promises :)\nDo you mind giving the develop branch a spin?. Soon \ud83d\ude04 . Fixed a while ago.. gaah. thanks, fixed.\nthe tag is stuck with it though :(. It works fine for me as well.\nDo you mind pasting the output from Psy\\info()?. Nothing particularly suspicious here\u2026\u00a0maybe it's the size of the response? Google's http response is pretty small; it's just a redirect. Their https response is a fairly large page, with a lot of css and js inlined into it. Try it with a small page like https://example.org?. Closing this due to inactivity and my inability to reproduce. Feel free to reopen if you're still experiencing this :). Yep. The automatic build via CI failed, so I'll have to upload a manual build. I'm planning on taking care of that this weekend.. Sorry about the delay. The version on psysh.org has been updated.. The is_writable check was in the wrong place, because a directory that doesn't exist by definition isn't writable, which is why CI was failing. But I've merged this PR along with a fix. Thanks!. Thanks for reporting! This has been fixed in the develop branch, and will go out in the next release. In the meantime, feel free to test out the dev branch and let me know if it's not working as you'd expect :). ```\n\n\n\nfunction foo(){}\n=> null\nif (!function_exists('foo')) { function foo(){} } else { echo '\u00af_(\u30c4)/\u00af'; }\n\u00af_(\u30c4)/\u00af\u23ce\n=> null\n``. Thank you for reporting this. It has been fixed in thedevelopbranch, and will go out in the next stable release..passthruis probably the wrong approach to use PsySH. I won't go as far as saying it's unsupported, but I doubt it'll ever work cleanly. A better approach would be to either executepsyshand pass your app's bootstrap file as an include, or write a custom wrapper that programmatically starts thePsy\\Shell` inside your app's environment.\n\n\n\nFrom bcit-ci/CodeIgniter4#367 it looks like you're moving away from passthru anyway, so should we close this issue?. https://git.io/psysh is an https link, and redirects to just that link :)\nOh! It's on the website but not the README. I'll change that.. Thanks for reporting! There should be a fix for this in develop now. Do you mind giving it a spin to make sure it solves your problems?. Thanks. I'll close the issue (or rather, it'll close itself) when this is merged into master. . Autocomplete in PsySH definitely inserts more spaces than it needs to, and I'd love to fix that. But in this case, I'm not able to replicate your exact issue locally...\n```\n\n\n\ninclude_once './foo[tab]\n```\n\n\n\ncompletes to\n```\n\n\n\ninclude_once './foo.php'\n```\n\n\n\n\u2026\u00a0as does the double-quote version of the same.. Great. Thank you for your contribution!. Thanks!\nDo you mind opening this against the develop branch?. Great, thanks :). If you have pctnl installed / enabled, it does handle this (though not as gracefully as some other issues).. This has been fixed in develop and will go out in the next stable release. Thanks for reporting!. psysh just reads from stdin, so it's possible to do something like this:\nbash\necho '42' | psysh | pbcopy\n\u2026 but this does bring along a lot of other baggage. Ideally if input comes from stdin we'd suppress the prompt, and if stdout is being piped somewhere, we'd suppress all the other stuff, and just show the eval result.\n. For the \\\\n issue, it should be using color to disambiguate. Does it show the \\ and \\n in different colors for you?\nSome backslash issues are fixed with #359, but the ones with \\< (and all sorts of variants around it) persist because that's how symphony console escapes their color tags, and IIRC they have some logic in there to prevent double escaping\u2026\u00a0I'll keep this issue around and try to make some more progress on a fix for this.. If we're going to add a feature like this, the config option should be called register_globals :trollface: \nSeriously, this is kind of horribad. I understand the reasoning, but I'm reluctant to make this a configurable feature for PsySH. I wouldn't want to legitimize it in any way by adding a config option for it :)\nThat said, it's totally possible, and it's not nearly as awful as #354 would be.\nAll you need is a code cleaner pass:\n```php\nclass MyCodeAbusesGlobals extends \\Psy\\CodeCleaner\\CodeCleanerPass\n{\n    private static $superglobals = array(\n        'GLOBALS', '_SERVER', '_ENV', '_FILES', '_COOKIE', '_POST', '_GET', '_SESSION'\n    );\npublic function beforeTraverse(array $nodes)\n{\n    $names = array();\n    foreach (array_diff(array_keys($GLOBALS), self::$superglobals) as $name) {\n        array_push($names, new \\PhpParser\\Node\\Expr\\Variable($name));\n    }\n\n    array_unshift($nodes, new \\PhpParser\\Node\\Stmt\\Global_($names));\n\n    return $nodes;\n}\n\n}\n```\n\u2026\u00a0then, where you call new \\Psy\\Shell, do a slightly more complicated dance:\n```php\n$traverser = new \\PhpParser\\NodeTraverser();\n$codeCleaner = new \\Psy\\CodeCleaner(null, null, $traverser);\n// add this after initializing the code cleaner so all the default passes get added first\n$traverser->addVisitor(new MyCodeAbusesGlobals());\n$config = new \\Psy\\Configuration(array(\n    'codeCleaner' => $codeCleaner,\n));\n$shell = new \\Psy\\Shell($config);\n$shell->run();\n```\n\u2026\u00a0and you're set!\n\nglobaltest.php gist\n. i copy/pasted just the bit i actually needed to test this. see the gist :)\nsure! you can use that code.. > If I understand correctly, this is not a perfect simulation of global scope\nCorrect, it's not actually global scope, but is pretty close. All global variables will always be visible and usable as soon as they're declared, as this code cleaner pass runs every time code is executed. In my screenshot / example, $wgReadOnly was defined before the shell started running, but $wgReadOnlyFile was only declared when I ran wfConfiguredReadOnlyReason. Both of them ended up as real globals, available in local scope.\nThe one difference between this and actually running the REPL in global scope is that newly created variables inside the local scope won't automatically become globals, but if you run global $foo before you assign something to that, $foo will be a real global, just like all the others.\nI feel like this is a fine compromise, and is actually preferable, as it lets you work with a legacy codebase that Does Things Wrong, but doesn't encourage you to continue doing the Wrong stuff yourself :)\n. Also, I don't have a Gerrit account, and am not going to set one up for a comment this trivial, but with this code cleaner you shouldn't need (and shouldn't use) $shell->setScopeVariables( $GLOBALS ); anymore.. Closing in favor of the response in #353 . Do you mind switching the PR target to the develop branch?. Grr. Those merge commits.\nI cherry picked just the one commit into develop. Thanks for the PR :). Can you paste the output from Psy\\info()?. Ahh. Right. That's fixed in the dev branch. Sorry \ud83d\ude10 \nWhat does readline_info say?. It makes perfect sense to add here. PHP's really cool about catching things it knows nothing about. We already added handling for \\Error (and \\TypeError) inside the loop:\nhttps://github.com/bobthecow/psysh/blob/701e8a1cc426ee170f1296f5d9f6b8a26ad25c4a/src/Psy/ExecutionLoop/Loop.php#L108\n\u2026\u00a0but I guess I'd never serialized anything that threw an \\Error :). Do you mind switching the PR target to the develop branch?. Oh, right. Those merge commits. Grr.. Thanks! This will go into the next stable release, which should be in the next couple of days.. Yeah. I've been considering going that route as well :-/. --config :). Sorry, I made that comment from my phone. I meant to come back and leave a longer comment, but you closed the issue and I forgot :(\n--config is by far the easiest. If you want something a bit more \u2026\u00a0automatic(?) you can do that, too, because your config file is PHP. I've added a few more examples covering that sort of thing to the Config section of the PsySH website.. I'm not opposed to this, but it's not as simple as just exposing the config object.\nIf it were possible to change configuration at runtime, I would probably do it via a command (config set --require-semicolons?) rather than direct access to $__psysh__->config. The difficulty with exposing it directly is that it's a combination configuration object and DIC, and there are quite a few things that simply can't be changed at runtime.\nSome don't make sense to change. Some would need to swap out service implementations as config changes (readline, forking loop, etc). Actually you couldn't swap out the forking loop for a non-forking loop at runtime, so that would go in the \"doesn't make sense to change\" camp.. What valid PHP code do you think config set --require-semicolons might conflict with? :)\nHonestly, this would be possible, but a non-trivial amount of work to get fully working. How do you see yourself using this? Why not just spin up another session rather than changing configuration at runtime?. But what values, specifically, do you want to change at runtime?. Cool. I'm going to close this for now. Feel free to reopen if you have any additional issues.. I just installed from your composer.json and everything worked. I think the hint is here:\n\nInstallation request for symfony/var-dumper (locked at v3.2.6) -> satisfiable by symfony/var-dumper[v3.2.6].\n\nWhy is Var Dumper locked at v3.2.6? Delete your composer.lock and re-install?. No worries. Glad we could help get it sorted!. Oh, youre right. I really need to start automatically generating that so we don't have to manually keep it in sync. . :+1: Glad we could sort it out so quickly ;). To install it, you can grab the latest release and just copy the Phar file over. \nI don't think you'll be able to use it without command line access, though. Did you have a specific use case in mind?. I'm afraid not. PsySH is an interactive PHP session that runs from the command line, much like Composer and Artisan themselves do \u2014 sharing a lot of the same code, in fact!\nIf you can't run Composer or Artisan, then PsySH isn't going to help. . Great! Do you mind changing the merge target to the develop branch?. Thank you. . The text of the error is intentionally the same as what PHP itself would display. The color is added as a bonus to let you know the severity of the error.\nAny time PsySH catches an Exception (or an error rethrown as an ErrorException) for you, it saves the exception to $_e so you can learn more about it:\n\nIn PHP, it turns out, treating an array like an object is just a notice, but treating an object of stdClass like an array is a fatal error. \u00af\\_(\u30c4)_/\u00af \nN.b. the fact that PHP throws an error for the second case and lets you deal with it is new, and way awesomer than it was before. It used to just dump you back out on the command line without warning. PsySH could kind of intercept that and save you from yourself, but it couldn't even give you a pretty red exception. It looked more like this:\n\n. I guess we could change the prefix to Fatal error for the E_ERROR errors we catch, to match what older versions of PHP said when that happened. But that's inconsistent with what current PHP does, now that it handles them so they're not really \"fatal\".. No problem!. This has been added to the shiny new manual :)\nhttps://github.com/bobthecow/psysh/wiki/Configuration#per-project-phpini-files. Oh, good call. Fixing :). i usually use ls --classes --grep X (and --functions, etc) to find function, class and method names. it accepts regex or just substring for the --grep argument.. The previous version of wtf was a regression which caused it to print the stack trace several times :)\nwtf -a will always show the full trace. Does that work for you?. How's this?\n\nWith this change, it always shows three lines by default. It gives you a hint (and the number of additional lines) if it suppresses any. And if it would only cut off a couple of lines, it just shows them all rather than saying \"to see 1 more\" or \"to see 2 more\".. Thanks for the report. I'll check it out!. Here you go!\n\nThis is fixed in develop. I'll get a release cut shortly.. This has been released in v0.8.5. Thanks again for reporting :). :+1:\nI'm planning on dropping PHP 5.3 support with the 0.9 release, but haven't wanted to make a backwards compatibility break just for the sake of this, so I haven't yet :). I meant more that I want to batch several backwards compatibility breaks in one. So v0.9.0 removes PHP 5.3 support and cleans up other things that need it. . Do you mind updating the base to the 0.9.x-dev branch?. >At least consider making this 5.6...\nProjects should be strict about supporting only the newest PHP and dependency versions.\nFrameworks should be opinionated and forward looking, encouraging projects to update to the newest PHP and dependency versions.\nLibraries should be as compatible with as many versions of PHP and their dependencies as is reasonable to support. \nPsySH is a library \ud83d\ude03 . Thanks!. @castarco Take a look at this? It's a backwards compatibility break, but as far as I can tell almost nobody is affected by it. Jupyter-PHP might be the exception.\nI looked through the code, and I think the only thing you'll need to change is the class name for the constant on this line\u2026 Am I missing anything? Is removing the configurable loop going to cause you any trouble?. Thanks! This has been merged into develop.. I'm not super familiar with the Laravel/Lumen relationship, but it looks like laravel/tinker isn't a direct replacement, as Lumen itself doesn't depend on illuminate/console, and its artisan uses symfony/console directly instead.\nShould we keep links to both packages around, or does anyone who wants tinker just have to incur an additional dependency?\nIs there any advantage to maintaining a separate and more specialized Lumen-specific tinker?. Great. Thanks for the context :). Yep. It's already merged into develop (see above) and will show up in master with the next release. . This should be generalized to more cases. die (and exit) is an expression and can be used anywhere an expression could be used. throw is a statement, so it basically only works on its own line. Other perfectly valid PHP cases that fail:\nphp\nif (exit) { echo \"wat\"; }\nexit or die;\nswitch (die) { }\nfor ($i = 1; $i < 10; die) {}\nI mean, lots of these sort of cases make no sense, but \u00af\\_(\u30c4)_/\u00af\nWe just need our replacement to always be an expression rather than a statement. So that simplifies this diff by removing any special casing.\nIf we add a BreakException::exit static method, which simply throws a BreakException, it's even easier :)\nphp\nif ($node instanceof Exit_) {\n  return new StaticCall(new FullyQualifiedName('Psy\\Exception\\BreakException'), 'exit');\n}. Awesome. Thank you!. I'm not super happy about exit_, but I'll merge and we can think about what else to call it \ud83d\ude1b . Please alphabetize :). Thanks!. Yep! This is fixed. Unfortunately Laravel 5.2 is pinned to an older version of PsySH, and they probably won't cut a new release. So your options are:\n\nUpgrade to Laravel 5.4\nDowngrade to an older PHP version that doesn't throw this error\nCall \\Psy\\Shell::debug, passing args manually, and don't pass a $this argument, to keep PsySH from esploding (this should theoretically work, though i haven't actually tried it)\nSome Composer shenanigans to convince it to let you install a different version of PsySH (it should be backwards compatible, just not allowed by the Laravel composer dependencies)\nUpgrade to Laravel 5.4 (pick this option!)\n. See #176 for why this is a bit complicated to fix, but I just pushed a workaround to the develop branch and it'll go out in the next stable release.\n\nClosing as a duplicate of #175 . Constant support has been added to doc in the develop branch, and will go out in the next release :) . Oh. Yeah. I bet I know why this is happening. \nIt prolly works if you just pass $b, $a, right?. Sigh. This is why you don't design languages where core code and extensions can implement APIs that wouldn't be possible in userland code.\nPer PHP docs, the signature for array_multisort is\u2026\nbool array_multisort ( array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $... ]]] )\n\u2026\u00a0but if you ask \\ReflectionFunction, the interface is\u2026\nbool array_multisort ( array &$arr1, mixed $&sort_order, mixed &$sort_flags [, mixed &$...] )\nSo when trying to save you from yourself, psysh correctly(?) prevents you from passing things to the second and third argument which can't be passed by reference. But \\ReflectionFunction is lying.\nThe only way I can see to handle this is to add a blacklist of core / extension functions and methods where we can't get their correct signature via reflection.. It's not, really. It's that Reflection is incapable of describing the actual API for this function:\nbool array_multisort(array &$arr1, array &$arr2)\nbool array_multisort(array &$arr1, int $sort_order, array &$arr2, int $sort_order2)\nbool array_multisort(array &$arr1, int $sort_order, int $sort_flags, array &$arr2, int $sort_order2, int $sort_flags2)\nbool array_multisort(array &$arr1, int $sort_order, int $sort_flags, array &$arr2, array &$arr3)\nYou can't tell whether a given argument will be passed by reference without knowing the values for all the preceding arguments. Hence,\n\nThis is why you don't design languages where core code and extensions can implement APIs that wouldn't be possible in userland code.\n\n\ud83d\ude15. Good news! I went through all the functions in get_defined_functions in PHP 7.1.5 and it looks like array_multisort is the only one with this class of problem.. This has been fixed in the develop branch. It'll go out in the next release.\n\nThanks for reporting the issue!. There's already a PsySH kernel for Jupyter, the language agnostic IPython successor: https://github.com/Litipk/Jupyter-PHP\nAs for Rodeo or RStudio, they're both fairly focused on data, plotting, visualizations, etc. Most of their features wouldn't really make sense with PHP, let alone with PsySH. Are there specific features from these that you'd like to see in a PsySH-aware GUI?\n. Thank you for reporting this. It is fixed in develop. Once it passes CI I'll cut a new release.\n. :+1:. Thanks!. thanks.. Aahhh! Sorry for the delay, I meant to respond to this but got behind on all the open source things :)\nThank you so much for the PR. I think the documentation generation can be folded up into the manual updates I'm doing. It's totally possible to pull this from the manual source itself and automate all the things. I'll look into that. . Sorry for the huge delay. v1.3.0 manual files now include all the constants (class constants, magic constants, normal constants).\nI just pushed a change to develop to add support to the doc command. So as of the next release, it'll show documentation for constants if you've got a new enough manual db :) . Unfortunately I don't think we have access to readline in that way\u2026\u00a0the PHP implementations of readline are almost an afterthought :(. I'm going to close this for now. Feel free to reopen if/when PHP readline support is improved enough to do it with a hotkey :). Oh, good catch. getcwd() is completely portable. We should be using that here (like we do everywhere else in our code).\nThis has been fixed in the dev branch, and will go out with the next release. Thank you!\n. For things like this, my rule of thumb is that we shouldn't be less useful than php -a. Looks like we meet that bar already \ud83d\ude04 \n\n. Every input in a REPL is an eval, and gotos aren't supported between eval calls. Because what would that even do?. use history replay!\nin a REPL / eval context, goto doesn't really make sense because there's no previous execution to go back to. we could probably fake it by trying to replay history back to where the label was, but it gets complicated in all but the most trivial cases. we'd have to deal with rewriting part or all of the command containing the label (for example, if you goto a label inside a complicated if statement or something. \nbut!\nyou can view, filter, search and replay your history using the hist command. check it out and see if it meets your needs :). Keeping them here is fine :)\nCan you run \\Psy\\info() and paste the result?. Do you mind looking at the history file listed above and seeing whether (1) it exists and (2) it has anything in it?. if you're up for a bit more debugging\u2026\n```php\n$hist = file_get_contents(\"C:/Users/Jens/AppData/Roaming/PsySH/psysh_history\");\n// confirm that it successfully opened\n$rows = explode(\"\\n\", $hist);\n// confirm that it exploded\narray_shift($rows)\n// tell me what that line output is \ud83d\udc46\n``. Oh, completely unrelated, but you can drop the \"Load and merge local config\" bit from your config file. PsySH does that by default now.. I think I know the issue. There should be a magic line at the top of every readline and libedit history file that is justHiStOrY_V2`. Somehow yours is missing this, which means the history command doesn't read it thinking it's not a valid history file. \nThe number of ways PHP manages to screw up readline implementation never ceases to amaze me \ud83d\ude15\nWhat kind of PHP are you running? And can you send the output of readline_info()?. Sorry. By \"kind\" I meant where did you get it? WAMP, or official Windows binaries, or cygwin or that crazy embedded Ubuntu thing, or something else entirely?. Thanks for the PR!\nThe yield handling is perfect. I think the goto / label handling is a bit heavy handed. for example, this is perfectly valid code:\nphp\nif (true) {\n  start:\n  echo \"wat\";\n  if (rand(0, 1)) {\n    goto start;\n  }\n}\nIt might make sense to do something like we do for \"valid class\" and \"valid method\" validation, where we keep track of things that were defined on the way in, then error when something does a goto to a label that wasn't defined during this eval?. Thanks! This has been merged into the develop branch and will go out with the next release.. :+1:. Oh wow. I didn't realize it had been that long.\nYou're absolutely right. I've got an incomplete update to the manual build process that I've been meaning to finish, but since it's been so long, I should release an updated version using the old build process in the meantime.. The process is a bit manual right now, and kind of a pain, which was part of the reason for the rewrite I mentioned :). The manual files have been updated :). Good question. I'd guess that a bunch of stuff related to older PHP 5.x versions was removed?\nBut I can take a look and see if there are any glaring omissions when I get a minute. . Yeah, at a glance nothing seems really off. It added ~300 new doc entries (like ReflectionGenerator) and removed ~300 doc entries (like HttpRequest and friends).. If you iterate through each entry in the manual and write it to disk, you end up with almost exactly the same amount of disk space. I'm guessing the majority of the difference is in the sqlite driver / version used to generate it?\n$ du -s *docs \n79640   newdocs\n79704   olddocs. I did realize that the manual builder script wasn't handling namespaced classes, though, so I just updated it and rebuilt them all. So you prolly want to download the updated manual anyway :). I did push them (and verified by downloading). Where were you trying to download them from?. I've pushed another build with some improvements on the last, as well.\nThe english manual is back up to 9.1mb :). I don't think we need to complain about unreachable labels. php -a doesn't, so they're valid PHP code. And PsySH shouldn't ever reject valid PHP code. When in doubt, let the user break their session rather than rejecting valid code :)\nIn this case, someone might be pasting a snippet of code from a tutorial, or might be running the same code with or without a goto at the end, or any number of valid reasons to have a label they never reach.\nphp\nif (true) {\n  hello:\n  start:\n  echo \"wat\";\n  if (rand(0, 1)) {\n    goto start;\n  }\n}. @zonuexe poke ;). Thanks for reporting this! It's an issue with an underlying library, but I've added a workaround to the develop branch. Do you mind checking it out and making sure things work as you'd expect?. Hmm. Is en_US not available on your machine? Try changing 'en_US' here, here and here to 'C'?. Okay. Now it's using C :). It used to do this, but it makes TravisCI hang indefinitely, which breaks automatic releases :(\nhttps://github.com/bobthecow/psysh/commit/532266b57a8a16680f3567e9118c6a7ee1f751da#diff-acb3f5be54feac3ac5f98d46a1863ca0. Yeah :-/. Okay, we'll give it a shot on the next release. Thanks for digging into it :)\nOut of curiosity, how did you reproduce it?. Huh. I wonder if it's a difference in /usr/bin/env? Does it reproduce if you use the path to PHP directly?. Huh. Oh well :). Ha! Good catch. I don't think that's ever been a valid URL :). Okay, this has been merged into develop and will go in the next stable release.. No worries at all. Thanks for the pull request!. Thanks for the PR! I'd love to understand this a bit more, and see whether we can get where you need to be without a config option :)\nCan you give me an example of what you're currently seeing, and what you'd like to see?\nHow would you feel about showing numeric array indexes only for dump but not for return values?. Do you mind rebasing so I can merge?. Awesome! Thanks again. . Thank you!. Yep yep! Working on it :). PsySH was matching the output for errors on some older PHP version, but it's prolly time for an upgrade. Pushing changes to match php -a in 7.x :). It kind of works :)\nCan you post a specific example that fails?. Hmm. Yeah, I can see why that would fail.\nYou run into the same thing with PHP's interactive shell (or with just running things from a file) if you make the require call inside a closure (which is what PsySH is doing):\nphp > $foo = function () { require 'global_test.php'; };\nphp > $foo();\nOther than not wrapping the execution inside a closure, which is bad for a whole host of other reasons, I can't see an easy way to fix this.. I've looked into it a bit more, and I don't have any clever fixes. Feel free to reopen if you have any ideas, but unfortunately i'm going to have to \"wontfix\" for now :( . doc DateTime::createFromFormat :). No problem! :). I think this is still valuable for people who don't have a PHP or terminal or readline version that supports bracketed paste\u2026\u00a0IIRC PHP with libedit doesn't?. Thank you! A see the small fixes inline :)\nAlso:\n\nPlease change the merge target to the develop branch.\nIt would be nice to support edit $variable, especially edit $__file to edit the magic shell variable supplied by doc ClassName, show functionName, etc. See ThrowUpCommand for an example of a ContextAware command that pulls variables out of the shell context.\nIff a file argument is supplied, we probably don't want to edit-and-execute, at least by default. Maybe add a flag for --eval or --exec or something, and have it default to true if no file arg is supplied, and false if one is?. Thank you :). This one is great! There's a ton of duplicated code between the matchers, though. Can the object and class method matchers extend the function matcher? Or can they all extend an abstract function matcher or something?. Looking good. Just two quick fixes!. \ud83c\udf89 \u203c\ufe0f . Yeah, it looks like Travis started building 5.3 with trusty instead of precise. I re-ran develop build and it used precise, so I'm re-running the builds for these pull requests to see if they resolve themselves.. Nope. No luck. I'll try explicitly using precise for 5.3.. Yep, that worked!\n\nhttps://travis-ci.org/bobthecow/psysh/builds/271876437\nDo you mind rebasing (this and the other branches) so we can get a green build before merging?. With this one, I can't get it to actually complete as anything useful\u2026\u00a0If I type Psy\\Shell and hit tab a couple of times, it adds an extraneous space after Psy\\Shell, then it shows Psy\\Shell:: and Shell.\nBut if I actually try to complete the Psy\\Shell::, I end up with Psy\\Shell Psy\\Shell:: on my line.. If that's the case, would it make sense to hold off on this one unless/until the updates to PHP are released?. Sounds good!. Thank you for reporting this. It's been fixed in the develop branch and will go out in the next release.. Unfortunately this isn't really possible. If you're still using 5.x there is a PHP extension called \"runkit\" which allows this. And PsySH even has support for that! But runkit doesn't support PHP 7, and the closest available option doesn't really support what we'd need for code reloading :(. Unfortunately neither of those allows re-importing files like runkit did.. Ideally\u2014and with the runkit code reloader this is possible\u2014any existing objects you have would be redefined whenever you update their code.\nSomething like Soft Mocks works by importing a different version every time you import code, but even if we got it working correctly, it would never update existing objects to match the new code.\nSo if you create an object, then change its source code, then create an identical object, they won't have the same type. In my opinion, this is a worse place (read: less predictable and less understandable) to be in than having to reload your shell to pick up code changes.\nWe'd also have to deal with all the gymnastics of mapping \"user typed App/User, but we imported as another name, so remap on the fly to the right name, but be sure to remap back whenever we're showing objects or names to the user\u2026\u00a0and be sure not to forget values like $foo::class\". It's a not an easy proposition :)\nWhile it doesn't come with a built-in ability to re-import files, UOPZ has at least some of the functionality necessary to do code reloading: If we wrote a fairly sophisticated code reloader, we could delete and redefine methods on existing classes, and change them from private to public or vice versa. We could change the inheritance or interfaces of an already defined class. We could replace functions. And we could redefine constants. All of this would work with objects already instantiated in the shell.\nAnd this might be enough. I've definitely considered exploring it. If you want to take a shot, I'd welcome a pull request :). Replaying input might work, but not for anything that's stateful. Database access, filesystem access, etc all break.. Thanks!. This is better as of 342d4d85, which will be in the next stable release. You do still need to do both doc Countable and ls -l Countable to get all the info available on php.net, though.. :+1:. Absolutely. Pull requests are always welcome :). Thanks again for the fix :). Open the pull request against the develop branch :). Gah. Sorry. \nOkay, do\u2026\nreturn foo &&\n    bar;\n?. Thanks!. By default it checks weekly. You can override it by setting updateCheck to \"monthly\" or \"never\" in your PsySH config.\nBut we really should have a faster timeout than 10+ seconds. I'll limit the update check request to 3 seconds for now.. Okay, this should be much better after b2df62d. Thanks for reporting!\n. The argument to reset is passed by reference so it's a fatal error to call it with a literal value rather than a variable name. It's the same in PsySH or PHP in interactive mode:\n\nIt does work great if you assign it to a variable first:\n\n. oh no! thanks, i'll get that updated this evening :). This has been fixed. Thanks again!. To be honest, I'm not sold on the premise. Did you test it?\nRegexes are faster than you think ;)\nYour implementation is pretty quick in the best case (if the pattern is found at the start of a string) but suffers quite a bit in the average and worst case:\nstrpos (match at start):   2.1370\nstrpos (match at middle): 83.4229\nstrpos (match at end):    84.7981\nstrpos (no match):        84.6062\nThere are 4013 defined functions, classes, interfaces and constants when I spin up a fresh psysh shell. It is extremely likely that most or all of the time only a couple of these will match the current input (i.e. it's usually the worst case above, not the best). So despite convincing best case performance, it's not what we should be optimizing for.\nThe existing regex-based implementation works pretty well across the board:\nRegex (match at start):    3.8769\nRegex (match at middle):   3.6940\nRegex (match at end):      3.5827\nRegex (no match):          3.7838\nWhen testing a matching string (remember: least common thing this will do) it's around 80% slower than strpos. But when testing a string that matches at the middle or end it's slightly faster than finding a match at the start because it only has to test one character before it knows the pattern doesn't match!\nA bonus implementation I just wrote using substr performs a bit better than the regex-based version:\nsubstr (match at start):   2.9382\nsubstr (match at middle):  2.9085\nsubstr (match at end):     2.9813\nsubstr (no match):         2.9530\n... but honestly, not enough better to worry about. Keep in mind that the difference between these are microscopic. The numbers listed above are in seconds, but I had to do 2.5 million iterations just to make the tests take seconds rather than fractions of seconds that are too small to measure.\n. The weird characters are Unicode. If you can figure out how to get your shell into UTF-8 mode, it\u2019ll look great. If you can\u2019t get that sorted, set useUnicode to false in your psysh config and it\u2019ll stop (but you won\u2019t get the pretty newline glyph that\u2019s currently making your powershell ugly) . See #69 for more discussion on this. . This is a really interesting idea, and solves a real problem.\nSo far, my recommendation would be to use a global install or phar, plus add a dev dependency on psysh. Then running psysh defers to the locally installed version that's guaranteed to be compatible with your local dependencies. But yes, this does add complication.\nI'm a bit skeptical about how smoothly rewriting dependencies will work with an interactive environment like psysh, but if it's seamless, that's awesome. If you want to take a shot at building a phar with php-scoper, I'd be happy to check it out :). > the code used should be refactored to avoid those patchers which are very brittle by nature. \nTo be honest, the HOA Console dependency in the compat PHAR is what I'm most worried about, and the things I'm worried about are pretty foundational to the way that project writes code.\n\nwhy not using box to build the PHAR?\n\nBecause box didn't exist when I first started building the PHAR?\n\nPull requests accepted ;). I was referring to \"seamless\" from the end user's point of view, not the library developer's.\nLook at the shenanigans we do with code rewriting just to make it seem like whatever the user types just works. I'm not opposed to all manner of insanity on our end, as long as none of it leaks through to the user.. Yeah, switching to box is fine. We'd want to make sure we can keep the PHAR something close to the same size (or smaller). We'd also want to make sure our fancypants autoloader stuff in the PHAR stub still works.. Can you paste the output of Psy\\info()?\nShell history requires readline, and I believe this isn\u2019t available in PHP under Windows. It can be installed in Cygwin, but might require a \u2014with-readline flag? \nThe prompt should be showing up, though. I\u2019ll take a look at that.. Looks like you've got readline anyway. It should be working :(. Readline support under Cygwin appears to be incomplete. See this comment on php.net:\nhttp://php.net/manual/en/function.readline.php#121244\nClosing this because there's not much we can do on our end. Sorry :(. Thanks @kip-13!\nDo you mind starting a page in the wiki about this?. Sure. Thank you!. It works great!\n\nMy guess is that you've got an older version of PHP Parser, maybe via some transitive dependency? Try composer update and see if that sorts it out?. (Closing, but feel free to reopen if the issue persists). Thanks for reporting this. It looks like a Windows incompatibility in an underlying library. I'll work on a fix, but in the meantime, you should be able to work around it by creating a directory (I'd use C:\\Users\\<User>\\AppData\\Local\\Temp\\psysh-runtime-dir-fallback or something) and setting the XDG_RUNTIME_DIR environment variable to that path.. (reopening because this isn't actually solved yet). composer update should fix it. This was fixed in v0.8.13.. Can any of you tell me what flavor of PHP you have installed on Windows? Everything works as expected when installing PHP via XAMPP and WSL. I haven't been able to reproduce this issue. The following would be super helpful, if any/all of you can provide it:\n\nWindows version\nApp you're using for a shell (cmd.exe, etc)\nPHP version, and how it was installed\nThe output of psy\\info()\n\nThanks!. Thanks, I was able to reproduce it. I think I have a fix!. Yep, looks good on my Windows VM. If any of you can test the develop branch to verify, that'd be awesome. The fix will go out in the next stable release!. Yours doesn't look like quite the same issue, but probably related.\nCan you paste the output from lstat(\"/tmp/php-xdg-runtime-dir-fallback-ec2-user\")?. @deeem @potsed what does getmyuid() say for both of you on these machines?. @deeem for some reason your psysh temp directory is owned by root, and you clearly aren't root.. Okay. I've pushed a really aggressive workaround to the develop branch, and plan on cutting a stable release ASAP. If you can test that branch before I do, that'd be great!. No need for dev-develop! This fix was released in v0.8.15 :). But for interactive shells, Ctrl+C to kill the line is common. Then (sometimes) a second Ctrl+C to kill the shell.. Thanks for reporting! This has been fixed and will go out in the next stable release.. Open an issue with Symfony?\ncc @nicolas-grekas . This is an issue with PHP in general\u2026 \n\nI'm not sure how much PsySH could do to avoid this, other than injecting runtime checks into functions like array_unique that have implicit string conversions :-/. yeah, i agree. i wasn't suggesting we do that, just saying it's probably the only way it can be done :). I'm unable to reproduce this, with almost identical configuration. I can't think of a reason why it would inconsistently autocomplete, except for code that's auto-loaded. For example, I wouldn't expect it to autocomplete a class name that hasn't loaded yet... but methods on existing objects? There should be no problem here.. I'd be curious to know whether 1f9bc08 fixes this for you.. Thanks!. This should be fixed as of v0.8.15!. Awesome. Thank you for sharing :) . Yeah, even running in the foreground like this, rather than a daemon, php-fpm isn't running the actual PHP process. It's a process manager running a pool of processes.\nIn order to work interactively, psysh must be the active process, or must be run by a process that pipes stdin and stdout to and from psysh. php-fpm doesn't do that, apache doesn't do that, and nginx doesn't do that, even if you're running them in the foreground.. The documentation has been updated to include PHP-FPM :). I just updated the \"Usage\" section to include PHP-FPM as \"unsupported\":\n\nUnfortunately, debugging through a web server like Apache or nginx or PHP-FPM is also not supported. Debugging is only supported when running PHP scripts from the command line or through PHP's built-in web server. If you're interested in helping add this functionality, see Github issue 121.. Thanks!. Hrm.\n\nIt looks like Composer has started taking advantage of PHP 7+ features, so the bundled Composer code in the psysh Phar is exploding on older PHP version. We'll need to start building a Phar on PHP 5.x, like we already do for the legacy PHP 5.3 build.\nAfter we fix that, the Homebrew recipe will likely need to be updated to grab the appropriate Phar version depending on your linked PHP version. Or split into multiple phpx-psysh recipes? Right now I think it just always grabs the latest. We should probably take it up with the maintainers of homebrew-php to figure out the best way to make this work.. Okay, I've released v0.8.17 which should fix this issue. We just need to wait for Travis to finish the build, and Homebrew test bot to pick up the updated version and prep a release :). You\u2019re right, this is definitely not solved. It seemed like the change would work, based on local testing. I\u2019ll give it another shot. . I got it. I (incorrectly) assumed the Homebrew formula was using the pre-built phars, and updated the process so that they would be built to work on most PHP versions.\nBut Homebrew doesn't do that. It uses Composer to install from source. Which wouldn't be a bad thing, except that they bottle the result from PHP 7.1.x and reuse it for every other install. This pulls in the 7.1+ features in Symfony 4.0.\nUnfortunately there's no good answer for this, at least as far as I can see.\n\nWe could split the psysh formula into php53-psysh, php54-psysh, etc. But that's awkward, and doesn't match what any of the other composer-installable formulas use.\nWe could stop recommending installing via Homebrew for anyone not running PHP 7.1. But that'd be a shame.\nWe could recommend building from source (i.e. skipping the bottle) for everyone using PHP < 7.1: brew install -s psysh.\n\nThe last option actually works great, and seems like the least-bad option, at least until we have a better Homebrew install story available.. homebrew-php is done, and it looks like psysh won't make the jump into homebrew-core, so this is kind of a moot point now :(\ncurrent recommendation is to use one of the other installation methods.. There isn't currently, but you should be able to easily do this with a custom command!. It seems like spaces could work, since indenting should only matter on wrapped lines. We just skip history for blocks where the first line starts with a space?. See 417b921 :)\nThanks for the request!\nNote that this is only in the dev branch at this point, and the exact details might change a bit before it lands in master. In this case, we might add a config setting for opting into (or out of) this behavior.. Thanks!. Is this a good idea? With PHP's track record for backwards compatibility, I imagine PsySH will keep working beyond PHP 7.x.. My worry with that is that a project will set a psysh dependency to 0.9.* and never update it\u2026 note that this already happens. Check packagist for v0.6.x installs\u2026\u00a0there's a steady trickle of them, years later.\nI don't want PsySH to be the only reason one of those projects gets stuck with an old version of PHP.\nGranted, I could fix (most of) this at whatever future point PHP 8.x ships by cutting a new PsySH release for every semver major and minor version we've ever shipped, which just bumps the PHP constraint. But that sounds like a lot of work for very little gain. And it only solves for projects that use semver constraints for their PsySH dependency. Hard coded versions will never pick it up without an update :(. @GrahamCampbell I can't quite make myself comfortable with this.\nIn principle, I agree with bounding dependencies. In this specific case, though, I'm less worried about PHP shipping backwards compatibility breaks than I am worried about other libraries pinning their PsySH version and not updating, sticking end users with a hard to resolve dependency.\n@Taluu I agree completely, for projects. For libraries, which are used as dependencies by a lot of other projects, I've gotta err on the side of compatibility. The tighter dependencies are locked down, the greater the chance that we can put end users into a position where they can't possibly meet the version constraints of all the packages they want to use together.. This is an issue with your PHP config, not with PsySH. Set an explicit timezone in php.ini to fix this!\nini\ndate.timezone = America/Los_Angeles ; or UTC, or whatever. No problem!. Yeah, this is the same issue as #445.\nHomebrew is making some drastic changes to the PHP formulas, so I'm waiting on doing anything crazy here until that all settles down. In the meantime, I can build the stable version with Symfony 3.x rather than 4.x so it'll be compatible with PHP 5.. I'm not sure about the value of adding this as a feature to PsySH, as I haven't personally had or heard of much use for it. Where is your $driver coming from? If it's coming from a wrapper of some sort, that might be the ideal place to add it?. you need to pass the class scope through. you can pass $this as the second argument to debug or you can use the shortcut eval(Psy\\sh()) (which does just that). Thanks for reporting! This is a bug in an underlying library, and I've raised the issue there:\nnikic/PHP-Parser#459. This is fixed as of v3.1.4 of PHP Parser :). The PsySH execution context doesn't automatically inherit use statements from where it's called (though this doesn't sound like a horrible idea, if it isn't too weird to implement). This means, from inside PsySH, you'll have to either use the full class name, or enter a use statement yourself.. I mean, you're calling a function. It would be kind of weird if a function call passed the caller's use statements through to the callee.\nThat said, it probably should. If we can figure it out. Wanna take a shot at it, @GrahamCampbell? :). Wait! What could this be??!?!!\n\n(Coming soon to a dev branch near you). This is the same issue as #445. You can work around it by skipping the bottle and building from source: brew install -s psysh.. Great, thank you!. Thanks!. Thanks again :). Nope! :)\nThis function exists to work with PHP Parser before and after they added ParserFactory. In older versions, you had to instantiate Parser directly, and pass it a specific Lexer. Now you have to user ParserFactory to create one.\nYou'll notice that this whole function has two implementations, depending on whether hasKindsSupport returns true. And that only returns true if a ParserFactory class exists. So this code runs only on (much) older versions of PHP Parser.\n. It's not really possible to replace the default shell with PsySH, because it's not a drop-in replacement. Additionally, this wouldn't really help with developers who aren't familiar with PsySH because they won't have it installed anyway.\nThe best bet for you would be to add an alias so you can keep typing php -a but end up in psysh :) . Congrats! You've accidentally discovered the keyboard shortcut to send the SIGQUIT signal on *nix machines!\nThis is exactly what programs are supposed to do when you press ctrl-4 :)\n\n. Those are color escape codes. Somehow PsySH thinks you're in a terminal emulator and shell that knows about color, but your terminal emulator and shell aren't interpreting the color codes correctly. It's probably unrelated to the manual itself, though.\nIf you run ls -al --functions do you see color or escape codes in the output?. Fair enough.. I'm afraid this will never work, because shell_exec isn't interactive.\nWell, it kind of is, but it buffers all stdout output so it can return it as a string. Try it with this file:\necho \"<?php var_dump(shell_exec('psysh'));\" > test.php\nphp test.php\nEverything should pause. Type (carefully, because you can't see the output) help, press enter, then type exit and press enter. You should get something like this:\n\nPython, apparently, puts their prompt on stderr instead of stdout, so the output of the python interactive shell is still buffered until the session is finished, but the input displays:\n\nEither way, it's still pretty worthless. I'd suggest not using shell_exec if you're looking for something interactive :). you'll be happy/sad to note that:\n\nthe next release includes live code reloading! including replacing the underlying class of a current object, on the fly, without losing the object itself! it's absolutely incredible!\nbut it doesn't work on PHP 7 :(\n\ni've thought a lot about this. i've even considered a very similar approach to this :)\nunfortunately this kind of approach has got a lot of caveats, and ultimately doesn't even \"reload\", as you've pointed out. i've always figured ctrl+d -> up -> enter wasn't any slower than a command, and it actually gives you a fresh start.. VarDumper is the \u201cP\u201d in our REPL. We kind of need it :)\nVarDumper only creates a global dump function if one isn\u2019t already defined:\nhttps://github.com/symfony/var-dumper/blob/master/Resources/functions/dump.php\nIf Contao did the same, you wouldn\u2019t have a problem. \nIf you can\u2019t convince them to do that, ensuring that Contao\u2019s version is defined first will prevent collisions. \n. Yeah, PsySH doesn\u2019t use dump anywhere.. In this case, the issue is the error at the bottom: because you're using a \"same method name as class name\" legacy constructor, you get a deprecation warning, but it keeps working.\nThe real issue is that you define a return time for your legacy constructor, but legacy constructors can't have a return type. You can confirm this by removing the return type for that method:\n\nI'd highly recommend not using legacy constructors. They're weird. You can do this by not naming methods the same as the class, or by defining your class in a namespace:\n\n\u2026\u00a0or by providing an explicit constructor:\n\n. Unfortunately not quitting the shell isn't possible with uncatchable fatal errors on Windows, and apparently adding a return type to a constructor is an uncatchable fatal error.. Ha! Got a fix:\n\n. Alright. I've got a workaround that seems to be okay. It'll be in the next stable release. Thanks for reporting!. No problem :). this change has already been made on the develop branch where active development happens!. Ugh. Get a Mac ;). \u2026\u00a0Half serious. With pcntl \u2014\u00a0i.e. on Linux or Mac or even WSL \u2014 this sort of thing is a lot less bad.. Thank you!\nAs much as possible, I'd prefer for error messages to match exactly what the uncaught fatal error would have said.\n>>> list(\"a\" => $a) = array(\"a\" => 1)\n\nOn PHP 7.0, for example, the actual error from the above code is:\nPHP Parse error:  syntax error, unexpected '=>' (T_DOUBLE_ARROW), expecting :: (T_PAAMAYIM_NEKUDOTAYIM) in php shell code on line 1\n\nBut this pass gives us:\nPHP Parse error: Syntax error, unexpected T_CONSTANT_ENCAPSED_STRING, expecting ',' or ')' on line 1\n\nIt seems like there might be other cases where this would be true with that same message. Is there an easy(ish) way to get the proper message(s) here?\nAlso, I couldn't get Assignments can only happen to writable values to trigger at all. It looks like you have that error message in the test case, but it's unused. What is it guarding against?\n. Thanks again for this. I've resolved the merge conflicts and merged it into develop :) . Hi, thanks for reporting this. I think I know what\u2019s happening. \nIt\u2019s a bug only in PHP 5.3 so in the meantime you can work around it by using a newer version of PHP :). :+1:. Please make this change against the develop branch :) . Unfortunately it's not quite this simple :( \nPHP Parser 4.x has a bunch of backwards compatibility breaks. I've got fixes for the ones exposed by the PsySH test suite, but at runtime we need to accept all manner of craziness from users, so I'd like to spend some time going through that list and making sure we won't be caught by things that aren't covered.\nSee #476 . Something was wrong with the previous PR. The code fixed here definitely failed before I opened the PR :) . For example\u2026 \nhttps://travis-ci.org/bobthecow/psysh/jobs/358195657. Yes, more code coverage would be great. The code affected here has about the best coverage in the whole project, though. If you ignore branches that aren't relevant in PHP 7.x and PHP Parser 4.x, the CodeCleaner code has 98%+ coverage :) . this is slated for the next release. it was merged into the development branch last week, which is where stable releases are cut from :) . thanks! do you mind pointing this at the develop branch so I can merge it? (that'll also fix the styleci issues). thank you :) . Installation seems to have failed in a couple of places, most notably when trying to download the actual repo.\nI bet if you open vendor/psy/psysh in your project it won't be there. Which would make it hard to include :)\nI don't know too much about debugging composer issues, but I'd start with\ncomposer clear-cache\ncomposer install psy/psysh\n\u2026 to try to get a successful install?. call it with -vvv for super verbose output in case it clarifies what's timing out?\nor you can try to manually check out the git repo in case it's an issue with git or something?. Ha! Glad you were able to track that down :) . It sounds like your PHP install doesn\u2019t have readline support. Do you mind pasting the output of Psy\\info()?. Oh! Re update available: I cut a new release last night but forgot to update the one on the website. I\u2019ll fix that this evening :). Yep :(\nWhere did you get your PHP install from? That's not the version that came with High Sierra.... It\u2019s not quite that simple, since there are backwards compatibility breaks in 4.0 (see #476). \nBut! They\u2019re already taken care of. You can use the develop branch (or 0.9.x-dev via Composer) if you need it right now. . I'm not sure, I probably just missed it when merging the PHP 5.4+ PR.\nTested and it works great, so let's add it back!. In keeping with our long, rich tradition of releasing v0.x.1 as fast as possible after v0.x.0, this has gone out as v0.9.1. Thanks for catching it \ud83d\ude04 . Thanks for reporting this, and for the thorough investigation! I just pushed a fix in b5c2b73d93d138b2fcd1b16c1fc1b438f33fb013, and will cut a release once that passes CI.. No problem!. Thank you for reporting this. It's been fixed in the develop branch and will go out in the next release.. I'm unable to reproduce it in a docker machine on my end. To help narrow it down a bit, can you paste the output of \\Psy\\info()? Additionally, do you have a Dockerfile you can share, or even what your base image is?\n. Hmm. Even with that Dockerfile, I'm unable to reproduce this. I'm not sure if something in env-check.sh or envsubst or your php.ini or debug.ini is messing with things, though, because I don't have access to any of those. \nDo you mind commenting out those lines and seeing if the issue persists?. :+1: sounds good!. Why should doc be special? What about ls and show? :) . Sorry about the delay. I finally tracked down and fixed the namespaced class property and method completion! (It was an existing bug; see 1f9bc08)\nThis looks good to me.. Thanks for your contribution. This will go out in the next stable release.. You can't.\nBut! I just pushed a feature branch that would add support. I'm not 100% sold on this approach, but check out feature/bound-class and see if that does the trick for you?\n(P.S. use eval(\\Psy\\sh()) invocation rather than calling \\Psy\\Shell::debug directly!). Bound class support has been merged into develop and will go out with the next stable release!\nI've also added support for static and self to all the reflecting commands (ls, show, doc, etc) for both static and regular class scope.. From a fresh install, the makefile won't work (because composer bin box install hasn't run) but it won't tell you why, and the error (vendor/bin/box: no such file or directory) isn't the least bit helpful :P . The -compat builds used to (unintentionally) exclude ~10MB of intl strings. Now they're not excluded, and it's making the PHARs huge. I'm looking into what exactly our dependency needs, to see if we can explicitly exclude some of them. A few things we're including that we definitely don't need, though:\nvendor/hoa/console/Documentation\nvendor/hoa/ustring/Documentation\nvendor/nikic/php-parser/grammar\nvendor/nikic/php-parser/test_old. I'm still seeing ~1.7MB box-build phars, at a minimum. How did you get 649KB?. Ha! It looks like symfony/intl doesn't do us any good at all\u2026 We were including it for VarDumper, but that doesn't even use it if the intl extension isn't loaded.\n\u00af\\_(\u30c4)_/\u00af \nRemoving symfony/intl from the compat builds brings 'em down to ~2.3MB, which is still 25% more than before box, but definitely much more reasonable.\n. Ok. After digging through dependencies of all the dependencies, the *-compat builds should include symfony/polyfill-iconv, symfony/polyfill-mbstring and hoa/console. That puts them at ~3.6MB, and includes as many things as we can reasonably polyfill (iconv, mbstring, and readline, respectively).\nEvery other extension we might want can't be (or hasn't been) polyfilled.\nSo let's add symfony/polyfill-iconv and symfony/polyfill-mbstring in place of symfony/intl.. The requirement checks shouldn't run if we're just using the stub as an autoloader.\nThe thing I really like about the current stub is that it doesn't require anything to run. Not even ext-phar. So if you've got multiple PHP versions, and have a global PsySH install, you can run the global psysh phar with local composer-installed PsySH code, even if your current version of PHP is super dumb and doesn't support anything at all.\nWe definitely wouldn't want requirement checks to run in that case, since they're about compatibility with the guts of the phar, not about compatibility with the code that's actually going to run :) . >\u2026 they were just compressed at one point which you probably don't want \u2026\nGot it. Yep, we don't want a compressed phar. \n\nNote that Box requirement checker takes 280KB with ~30 files.\n\nCool. I'm not trying to nitpick on size, I'm mostly using it as a gauge for whether we're including a bunch of stuff we don't actually need.\n\nYou can also have a great diff thanks to box info --list\n\nYep. That's what I've been using to track things down :) . >I get the previous error of I can't seem to be able to start psysh and I don't really get why :/\nThis time it's for a different reason :)\nhttps://github.com/bobthecow/psysh/blob/master/bin/psysh#L99-L100. Let's keep the build/stub version. We can always improve on that in future pull requests.. Checked all four variations, and the contents of the phars looks right. Sizes look right too:\n|                         | was | now |\n|-------------------------|---------|---------|\n| psysh.phar              | 1.3M    | 1.6M    |\n| psysh-compat.phar       | 1.7M    | 3.2M    |\n| psysh-php54.phar        | 1.2M    | 1.5M    |\n| psysh-php54-compat.phar | 1.5M    | 3.0M    |\nThat's + ~300k for the box requirements checker, and + ~ 1.2MB to each of the compat builds for the new polyfills.. Thanks so much for taking this on! I'll open a pull request shortly for you to review with a few more ideas.\nSide note: I missed it this time, but please open pull requests against develop rather than master :) . Heh. Interesting.\nI mean, it's not surprising that it does this. But it's a bit surprising that I have never run into it.\nFor a quick fix, changing those lines into any equivalent (valid) PHP that doesn't start with a string with exactly that value will work around it. For example:\n```\n\n\n\n(\"q\")\n=> \"q\"\n;\"q\"\n=> \"q\"\n$q = \"q\"\n=> \"q\"\n``. This has been fixed in thedevelop` branch and will go out with the next stable release. Thanks for reporting it :) . The original issue is undeniably a bug. What you're asking for now isn't quite as clear cut :)\n\n\n\nThere are quite a few commands that are awesome when used in the middle of code, and the command system is intentionally built so that they work that way. For example, the buffer command is worthless if it doesn't work when there's actually code in the buffer.\nCommands like sudo and throw-up are also kind of cool when used along with code:\n```\n\n\n\nclass Sekrit {\n...   private $password = 'hunter2';\n... }\n$sekrit = new Sekrit\n=> Sekrit {#1757}\n```\n\n\n\n```\n\n\n\nfunction get($obj, $prop) {\n...   sudo return $obj->$prop;\n... }\n```\n\n\n\n```\n\n\n\nget($sekrit, 'password')\n=> \"hunter2\"\n```\n\n\n\n```\n\n\n\nfunction set($obj, $prop, $val = null) {\n...   sudo $obj->$prop = $val;\n... }\n```\n\n\n\n```\n\n\n\nset($sekrit, 'password', 'monkeymonkeymonkeymonkeymonkey')\n=> null\nget($sekrit, 'password')\n=> \"monkeymonkeymonkeymonkeymonkey\"\n``\n. I'm with you on 1. I think we can safely say that inside a string context, there's no reason to run a command \u2014\u00a0even thebuffer` command. In fact, I'm pushing a fix for it now.\n\n\n\nI'm not there yet on 2 or 3, though. \nIn practice, I think fixing these two \u2014 the previous bug with quoted command names, and the issue with open strings \u2014\u00a0should be sufficient to prevent most if not all real-world issues. After all, it took six years for the string issues to even come up ;). Double newlines doesn\u2019t fix the issue, though, it just defers it a bit :) And it makes closing brackets inconsistent with the way PsySH works the rest of the time. \nIf you end the line with a \\ it will let PsySH know that you wish to continue your code on the next line, much like Bash and most other shells.  \nTo get pasting to do the right thing, use readline-enabled PHP, and a modern terminal app, and enable bracketed paste (set useBracketedPaste to true in PsySH config). . I just pushed a naive implementation in feature/require-newline-after-block. It leaves all lines ending with } open, including functions and classes where there's no chance that the user intended to add an else. Try that out and let me know what you think?\nAfter playing with it for a while, I don't think I love it. The inconsistency added between this and other input is strange, and it would be even worse if only input which could have an else were left open.. There aren't any backwards compatibility breaks in develop so far, so if I were to cut a release right now it'd be 0.9.4.. Yeah, the isolated version would likely be v0.10.. >Doesn't semver dictate new features require a minor version bump?\nNot for v0.x.. The real answer is that I should release a v1.0 some day and then Server will do what you expect ;)\nClosing for now.. @theofidry \u261d\ufe0f \ud83d\ude04 . Thanks!. I haven't been able to reproduce this. Since you've got a consistent repro, do you mind testing this as a workaround?\n```diff\ndiff --git a/src/ExecutionLoop/ProcessForker.php b/src/ExecutionLoop/ProcessForker.php\nindex 1a5bb7a..f7f3966 100644\n--- a/src/ExecutionLoop/ProcessForker.php\n+++ b/src/ExecutionLoop/ProcessForker.php\n@@ -65,9 +65,19 @@ class ProcessForker extends AbstractListener\n             $read   = [$down];\n             $write  = null;\n             $except = null;\n-            if (stream_select($read, $write, $except, null) === false) {\n-                throw new \\RuntimeException('Error waiting for execution loop');\n-            }\n+\n+            do {\n+                $n = stream_select($read, $write, $except, null);\n+\n+                if ($n === 0) {\n+                    throw new \\RuntimeException('Process timed out waiting for execution loop');\n+                } elseif ($n === false) {\n+                    $err = error_get_last();\n+                    if (!isset($err['message']) || stripos($err['message'], 'interrupted system call') === false) {\n+                        throw new \\RuntimeException('Error waiting for execution loop');\n+                    }\n+                }\n+            } while ($n < 1);\n         $content = stream_get_contents($down);\n         fclose($down);\n\n```. poke @tgr :). Great, thanks!\nI've pushed the fix to develop and it'll be out in the next stable release.\nY'all should update to v0.9 ;). something like \u2026\n```diff\ndiff --git a/src/ExecutionLoop/ProcessForker.php b/src/ExecutionLoop/ProcessForker.php\nindex bbf6225..7cf71b1 100644\n--- a/src/ExecutionLoop/ProcessForker.php\n+++ b/src/ExecutionLoop/ProcessForker.php\n@@ -67,7 +67,7 @@ class ProcessForker extends AbstractListener\n             $except = null;\n         do {\n\n\n$n = stream_select($read, $write, $except, null);\n$n = @stream_select($read, $write, $except, null);         if ($n === 0) {\n             throw new \\RuntimeException('Process timed out waiting for execution loop');\n\n@@ -76,7 +76,7 @@ class ProcessForker extends AbstractListener\n             if ($n === false) {\n                 $err = error_get_last();\n                 if (!isset($err['message']) || stripos($err['message'], 'interrupted system call') === false) {\n-                        throw new \\RuntimeException('Error waiting for execution loop');\n+                        throw new \\RuntimeException(sprintf('Error waiting for execution loop: %s', $err['message']));\n                 }\n             }\n         } while ($n < 1);\n```\n\n\nI'm open to this. I haven't seen what the actual experience is like, but if it's a warning that isn't actionable, and doesn't have any effect on the session, then i'm all for suppressing it.. It does seem like a pretty worthless warning. It's not actionable, and really, the user doesn't care if it took us two tries to stream_select. I'll add the change above.. Okay, we're now suppressing the stream select error if it's an interrupted system call, and throwing it as a runtime exception otherwise.. I'm not able to reproduce this. Can you share a minimal test case?\n```php\nnamespace A {\n    class B {\n        const C = 'see';\n    }\n}\nclass D {\n    private function e($f) {\n        return [$f];\n    }\n}\n$g = [];\n$g[A\\B::C] = 'c';\n$d = new D();\nsudo $h = $d->e($g[A\\B::C]); // => ['c']\n```. @tgr were you able to get this resolved?. (nudge)\ndid you come up with a test case? . Closing since I\u2019m still not able to repro. Feel free to re-open with a test case!. I'm not entirely sure what's up here, but it seems to have something to do with limitations in readline :-/ . Thanks for digging into this further.\nSomething like that should work for the Transient readline implementation, but it won't work for GNUReadline or Libedit, because those don't end with \\n when they're finished.\nSo I'd prefer to push it down into Transient rather than changing Shell::getInput:\n```diff\ndiff --git a/src/Readline/Transient.php b/src/Readline/Transient.php\nindex e238fdf..cad1070 100644\n--- a/src/Readline/Transient.php\n+++ b/src/Readline/Transient.php\n@@ -106,7 +106,13 @@ class Transient implements Readline\n     {\n         echo $prompt;\n\nreturn \\rtrim(\\fgets($this->getStdin(), 1024));\n$input = '';\ndo {\n$line = \\fgets($this->getStdin(), 1024);\n$input .= $line;\n} while (substr($line, -1) !== \"\\n\");\n+\nreturn \\rtrim($input);\n     }\n```\n\nNote that I'm still doing the \\rtrim to remove the final \\n, to match what \\readline returns.. >I'm thinking there may be a reason, on the basis that a limit was imposed in the first place, but I don't know what the reason would be.\nI'm not sure either \ud83d\ude42\nThe length parameter on fgets dates back to the initial commit in this repo. If I had to guess, I imagine it's there because it was to support PHP 4.3 in the script I used as a predecessor to this project long before open sourcing it.\n\nI'll add that once psysh was doing the right thing, I then found myself hitting a 4096 character limit\u2026 In this instance the excess was simply discarded, and there didn't appear to be anything that psysh could do about it.\n\nThis was the behavior I was noticing in my investigations back in May, when I said:\n\nI'm not entirely sure what's up here, but it seems to have something to do with limitations in readline :-/\n\nIt makes a lot of sense that this is a limitation in tty / line editing, and seems consistent with what I observed. \n\nI've now tried HoaConsole which (a) seems quirky, but (b) seemingly does not have the same issue as Transient, so that seemed like it should provide insight into the issue.\nI could see it was using stty -icanon so I tried that in my terminal.\n\nYep, that's exactly where I went when investigating this in May :) \nHoaConsole is a little weird. It basically reimplements readline, in userland PHP, on top of lower level raw mode tty input. At one point I considered going a similar route with the Transient implementation, but we ended up adding support for HoaConsole based readline instead. I figure there's no need for two projects to take on that mess \ud83d\ude1b \n\nI've updated the description of useReadline\u2026\n\nPerfect, thank you. I've removed the limit on fgets in dc01559782f3f97b4b1bfffdcfff505992c5083c as well.. Thank you so much for being so thorough with this. With the documentation change and raising the limit on fgets, there's probably not much more we can do here, right?. cc @theofidry \n. Thank you for reporting this. It is a regression since v0.8.x. I've pushed a change that should fix it!. Also by pressing the up arrow :). Right. You need a version of PHP compiled with readline or libedit in order for the arrow keys to work, and the one in Git Bash probably doesn't have it. I believe you can fix that with dlls, though I haven't done this myself, so I can't give specifics.\nAlternatively, if you have hoa/console installed, it will polyfill some support for arrow keys and the like. If you're using phar installs, grab one of the ones with -compat in the name. If you're using Composer, run composer require --dev hoa/console.. Oh, sorry about that! The automated release failed so I had to do everything manually this time and forgot That piece :-). Download updated. Thanks again!. \n. You're absolutely right, thanks for raising this issue!\nIt looks like the parsing was a big part of it, but even bigger (for non-trivial test cases) was serializing the return value and passing it back out after execution.\nI've got a fix that improves things a ton by injecting instrumentation into the actual code, so it's starting the timer after parsing and starting execution, and ending it before serializing the return value. It's still not exactly the same\u2014because there's still some overhead for adding the instrumentation\u2014but it's probably close enough now:\n\n. Contrast that with the current implementation :) \n\n. Thanks for reporting. This has been fixed in develop and will go out with the next release!. You need to call setScopeVariables on a Shell instance. There are tons of ways to do this :) \nThe easiest is probably to add a breakpoint inside whatever PHP code you want. That's like that standard eval(\\Psy\\sh()) invocation, but you can explicitly pass it variables you want in scope by calling it directly:\nphp\n// set up your container\n\\Psy\\debug(['container' => $container]);\nIf you want a bit more control, you should interact with Shell directly, rather than using one of the breakpoint helpers.\nAn example of this is ezsh, which has their own command line script for launching a shell.\nAs part of that script, they set up the config, create a shell, add scope variables, add in include argument, and add EzShell specific commands. The part you're looking for is where they're setting scope variables here.\nAnother option is to build a command for another command line app, which is what PsyshBundle (for Symfony), Laravel Tinker, Drush, Magerunner and many others do. PsyshBundle does it via the Symfony dependency injection container, so it's a bit harder to follow, but it's very similar to the \"your own binary\" approach that ezsh does. Here's where they set up the DI configuration to inject scope variables.\nIf you wanted to add scope variables to Tinker's command, you'd do it here, right around where you add commands.\nHope this helps!. >Do I understand correctly that setScopeVariables call has no effect after the shell has been already loaded?\nIt is supposed to work, though not because it's intended to be used like that \ud83d\ude42\nUnfortunately there was a regression in v0.9.4 which kept scope variables set that way from being propagated back into the current execution scope. They were still available to other commands, but not to user input. I just pushed a fix (003c71b5f7a5a8dbfd228388846637f2157dbad1) which will go out in the next release.. Closing this out. Feel free to comment or re-open if you have additional issues :) . Yep, this is a great idea! Wanna open a pull request? \ud83d\ude09. It always forks, if your PHP install has the pcntl and posix extensions.\nIf you don't have those two extensions (i.e. Windows but not WSL or Cygwin users) it has a non-forking mode which doesn't fork at all\u2026 which is a bit less awesome, because uncatchable fatal errors drop you back out to the command line rather than continuing. But we can probably ignore these users, as I doubt we'd be able to implement in-browser breakpoints without forks.\nFor everyone else, basically:\n\nUpon starting PsySH, we fork into a main process and a worker process which actually does things. \nThe main process then just stops and waits for the other process to finish.\nOnce it's finished, the main process reads and unserializes the REPL session return value from a socket, and returns that value.\n\n\nThe worker process immediately forks to create a savegame process, which also just stops and waits.\nThe worker process executes user input.\nIf it succeeds, the worker kills the last savegame and creates a new one.\nIf the worker dies (because of an uncatchable fatal error) the savegame picks up where the worker left off, becomes the new worker, and continues execution.\n\n\nIf the user input was exit, serialize the return value, send it back to the main process via our handy socket, then kill the worker thread.\nIf the worker thread is still around: goto 3.\n. Heh. Thanks!\n\nI figured basically everything had the ctype extension so I didn't worry about including it as a dependency. If there are distros that don't have it, it's simple enough to use a regular expression for that :) \nI've removed the one call to ctype_alpha in 4b48964bbbde4165666d9eb632fc3783e54f24fa and that'll go out in the next release.\nI've also checked against all the other polyfills Symfony provides, and core PsySH code doesn't have a dependency on any of them. So thanks for the nudge.. What docker image are you using? . This should be fixed in the current release. Let me know if you're still having issues.. if you turn off forking in psysh does it resolve the issue? set usePcntl to false in your psysh config to give it a shot.. Closing this due to inactivity. @imikemiller feel free to reopen if the above didn't resolve your issue!. The implicit dump for return values is supposed to be printing a short dump. The dump command is there if you want more info. If it's not doing that now, we should fix it :) . That line only gets run if hasKindsSupport is false, i.e. if there's no class called \\PhpParser\\ParserFactory. And that is only true in PHP Parser v1.x. And in PHP Parser v1.x, PhpParser\\Parser is a class, not an interface :) . It works in PsySH as well, just like it does in bash.\nIf it's not working for you, you probably don't have readline (or libedit) enabled in your PHP install.. Whichever one you can get. They\u2019re basically equivalent.. what does \\Psy\\info() inside a psysh session say?. It looks like libedit is to blame.\nIf you add bind to the end of ~/.editrc then start psysh it'll dump your current libedit bindings.\nOn my local PHP install (with libedit rather than readline) it doesn't include em-inc-search-prev. Additionally, ^R seems to be bound by default to ed-redisplay by default, which is definitely nothing like reverse-i-search.\nAdding bind \"^R\" em-inc-search-prev to ~/.editrc seems to fix it.\nI guess, in answer to your previous question, readline is the best of the two :P . what do you see bound to ^R if you add bind to your ~/.editrc and launch psysh?\ni imagine you'll have the same issue with php -a, right?. Closing as this due to inactivity. It also seems to be an environmental issue, and the libedit config I listed above fixed the issue for me. Please feel free to re-open if you think there's something more we can do on our end.. Thanks for reporting! This has been fixed and will go out in the next release.. I think most people likely don't have multiple versions of psysh installed, and most of the time this will say cli in bin, so it's probably not super useful information in general, but you can totally add this to your welcome message, by adding this to your psysh config:\n```php\n<?php\nreturn [\n  'startupMessage' => sprintf(\n    'Running in %s', basename(dirname($_SERVER['PHP_SELF']))\n  ),\n];\n```\n\u2026 or something like that :) . Thanks!. yeah, it looks like our list of \"valid\" instanceof calls isn't quite right.\narray(1) instanceof stdClass, (1+1) instanceof stdClass and DateTime::ISO8601 instanceof stdClass all fail.. When installed as a project dependency, psysh automatically includes composer autoload, so if your project is also using composer autoload, it just works as you'd expect.\nIf you're using a globally installed psysh, you can get this same behavior by requiring Composer autoload to your psysh config file\u2026 or by adding whatever other autoloading you want :) . Thanks for reporting this. It's been fixed in 33caffea6c08f64868e1c4acb6b0d10813846066 and will go out with the next release :) . ohhh, interesting:\n[\n  PhpParser\\Node\\Stmt\\Expression {#2335\n    type: \"Stmt_Expression\",\n    attributes: [\n      \"startLine\" => 1,\n      \"endLine\" => 1,\n    ],\n    expr: PhpParser\\Node\\Expr\\ArrayDimFetch {#2868\n      type: \"Expr_ArrayDimFetch\",\n      attributes: [\n        \"startLine\" => 1,\n        \"endLine\" => 1,\n      ],\n      var: PhpParser\\Node\\Expr\\ArrayDimFetch {#2866\n        type: \"Expr_ArrayDimFetch\",\n        attributes: [\n          \"startLine\" => 1,\n          \"endLine\" => 1,\n        ],\n        var: PhpParser\\Node\\Expr\\ArrayDimFetch {#2864\n          type: \"Expr_ArrayDimFetch\",\n          attributes: [\n            \"startLine\" => 1,\n            \"endLine\" => 1,\n          ],\n          var: PhpParser\\Node\\Expr\\Variable {#2862\n            type: \"Expr_Variable\",\n            attributes: [\n              \"startLine\" => 1,\n              \"endLine\" => 1,\n            ],\n            name: \"a\",\n          },\nI meant to make that \"if you're asking about an array index or a property, just accept it and move on\", but I figured the ->var reference would be on the ArrayDimFetch or PropertyFetch, not nested like that. I'll fix the fix when I get a minute :) . $d = [];\n$x = new \\stdClass;\n$x->a = 1;\n$x->b = 2;\n[$d[$x->a + $x->b]] = [7];\nthis one already worked, since it doesn't have nested array or property fetches to get to the $d :) . ugh. one more:\nfunction x() {\n  static $y; \n  if (!$y) $y = new StdClass;\n  return $y;\n}\n[x()->a, x()->b] = [1,2];\nx();\n. Okay. I think that's probably it?. Did you mean to type 0b10 and 0b10*2?. Hey, no worries :) . thanks for reporting. this is a let's encrypt certificate, and it's supposed to be managed automatically by GitHub Pages, but seems to be acting up. i kicked things and we'll see if that resolves it :) . it looks like that worked. thanks again!. This is probably #510 which is https://github.com/humbug/box/issues/253 which seems to be fixed by https://github.com/humbug/box/pull/284 so the next build of psysh. >But the bloated repository size is disrespect for library users.\n\"seriously\" and three question marks in your issue subject is disrespect for library maintainers.\n\nDon't be a jerk about open source. You'll get further in life.\nYou shouldn't set Composer up to install from source. It's a lot slower, as you've noticed.\nIf you don't want to change it globally, you can fix the issue yourself by setting the preferred-install config option on a per-package basis, to use dist for just the slow ones.\nThere's also a process-timeout config option for Composer that increases the timeout, in case you ignore numbers 2 and 3 and ever run into another large repo.\nThe size of this repo has been fixed.\nSeriously, don't be a jerk.. You're right. That codecov report is kind of obnoxious. But I can't figure out if there's a good way to disable it :( \n\nDo you mind pointing this PR at develop rather than master? I think that'll fix the negative coverage, too.. Thanks for reporting!\nApparently it's not possible to change git.io links, so I've updated it to a slightly longer one and the install instructions work again :) . Thanks! Do you mind pointing this pull request at the develop branch?. Oh, I'm sorry! I saw that master and thought it was on the into side not the from side :). WAIT WHAT\nPHP 5.4: 1.24 minutes\nPHP 5.5: 1.12 minutes\nPHP 5.6: 1.08 minutes\nPHP 7.0: 51.41 seconds\nPHP 7.1: 39.2 seconds\nPHP 7.2: 42.23 seconds\nPHP 7.3: 926 ms\nThanks for updating! Do you mind pointing this PR at the develop branch? That'll fix the codecov results, too :) . Thank you.. Thanks!. Thanks!. Wow. Is it really 400x slower to build the phars this way?. > Will update shortly\n\ud83d\udc4d . my first couple of builds were a little weird, but make clean cleaned it up and they seem to be building fine now. which is a smell that we missed something in our makefile, but i can't figure out what it would be :( \nI found a couple of references that didn't get scoped properly.\nin all the phars:\n$messages = \\array_map(['Symfony\\\\Component\\\\Console\\\\Formatter\\\\OutputFormatter', 'escape'], $messages);\nswitch ($ns = \\substr($name, 0, $len)) {\n                        case 'Symfony\\\\Bridge\\\\':\n                        case 'Symfony\\\\Bundle\\\\':\n                        case 'Symfony\\\\Component\\\\':\n                            $ns = 'Symfony\\\\';\n                            $len = \\strlen($ns);\n                            break;\n                    }\nprivate function classNameFromNodeType(string $nodeType) : string\n    {\n        $className = 'PhpParser\\\\Node\\\\' . \\strtr($nodeType, '_', '\\\\');\n        if (\\class_exists($className)) {\n            return $className;\n        }\nin the 5.4 phars:\nprotected function readComment()\n    {\n        $className = $this->reader->getAttribute('isDocComment') === 'true' ? 'PhpParser\\\\Comment\\\\Doc' : 'PhpParser\\\\Comment';\n        return new $className($this->reader->readString(), $this->parseInt($this->reader->getAttribute('line')));\n    }\nif (\\defined($name = 'PhpParser\\\\Parser\\\\Tokens::' . $name)) {\npublic static function autoload($class)\n    {\n        if (0 === \\strpos($class, 'PhpParser\\\\')) {\n            $fileName = __DIR__ . \\strtr(\\substr($class, 9), '\\\\', '/') . '.php';\n            if (\\file_exists($fileName)) {\n                require $fileName;\n            }\n        }\n    }\npublic static $defaultCasters = array('_HumbugBoxa0c4b7107ccc\\\\Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\CutStub' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\StubCaster::castStub', '_HumbugBoxa0c4b7107ccc\\\\Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\CutArrayStub' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\StubCaster::castCutArray', '_HumbugBoxa0c4b7107ccc\\\\Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ConstStub' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\StubCaster::castStub', '_HumbugBoxa0c4b7107ccc\\\\Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\EnumStub' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\StubCaster::castEnum', 'Closure' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ReflectionCaster::castClosure', 'Generator' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ReflectionCaster::castGenerator', 'ReflectionType' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ReflectionCaster::castType', 'ReflectionGenerator' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ReflectionCaster::castReflectionGenerator', 'ReflectionClass' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ReflectionCaster::castClass', 'ReflectionFunctionAbstract' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ReflectionCaster::castFunctionAbstract', 'ReflectionMethod' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ReflectionCaster::castMethod', 'ReflectionParameter' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ReflectionCaster::castParameter', 'ReflectionProperty' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ReflectionCaster::castProperty', 'ReflectionExtension' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ReflectionCaster::castExtension', 'ReflectionZendExtension' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ReflectionCaster::castZendExtension', '_HumbugBoxa0c4b7107ccc\\\\Doctrine\\\\Common\\\\Persistence\\\\ObjectManager' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\StubCaster::cutInternals', '_HumbugBoxa0c4b7107ccc\\\\Doctrine\\\\Common\\\\Proxy\\\\Proxy' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DoctrineCaster::castCommonProxy', '_HumbugBoxa0c4b7107ccc\\\\Doctrine\\\\ORM\\\\Proxy\\\\Proxy' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DoctrineCaster::castOrmProxy', '_HumbugBoxa0c4b7107ccc\\\\Doctrine\\\\ORM\\\\PersistentCollection' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DoctrineCaster::castPersistentCollection', 'DOMException' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castException', 'DOMStringList' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castLength', 'DOMNameList' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castLength', 'DOMImplementation' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castImplementation', 'DOMImplementationList' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castLength', 'DOMNode' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castNode', 'DOMNameSpaceNode' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castNameSpaceNode', 'DOMDocument' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castDocument', 'DOMNodeList' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castLength', 'DOMNamedNodeMap' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castLength', 'DOMCharacterData' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castCharacterData', 'DOMAttr' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castAttr', 'DOMElement' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castElement', 'DOMText' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castText', 'DOMTypeinfo' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castTypeinfo', 'DOMDomError' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castDomError', 'DOMLocator' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castLocator', 'DOMDocumentType' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castDocumentType', 'DOMNotation' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castNotation', 'DOMEntity' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castEntity', 'DOMProcessingInstruction' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castProcessingInstruction', 'DOMXPath' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\DOMCaster::castXPath', 'ErrorException' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ExceptionCaster::castErrorException', 'Exception' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ExceptionCaster::castException', 'Error' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ExceptionCaster::castError', '_HumbugBoxa0c4b7107ccc\\\\Symfony\\\\Component\\\\DependencyInjection\\\\ContainerInterface' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\StubCaster::cutInternals', '_HumbugBoxa0c4b7107ccc\\\\Symfony\\\\Component\\\\VarDumper\\\\Exception\\\\ThrowingCasterException' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ExceptionCaster::castThrowingCasterException', '_HumbugBoxa0c4b7107ccc\\\\Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\TraceStub' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ExceptionCaster::castTraceStub', '_HumbugBoxa0c4b7107ccc\\\\Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\FrameStub' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ExceptionCaster::castFrameStub', 'PHPUnit_Framework_MockObject_MockObject' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\StubCaster::cutInternals', '_HumbugBoxa0c4b7107ccc\\\\Prophecy\\\\Prophecy\\\\ProphecySubjectInterface' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\StubCaster::cutInternals', '_HumbugBoxa0c4b7107ccc\\\\Mockery\\\\MockInterface' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\StubCaster::cutInternals', 'PDO' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\PdoCaster::castPdo', 'PDOStatement' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\PdoCaster::castPdoStatement', 'AMQPConnection' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\AmqpCaster::castConnection', 'AMQPChannel' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\AmqpCaster::castChannel', 'AMQPQueue' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\AmqpCaster::castQueue', 'AMQPExchange' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\AmqpCaster::castExchange', 'AMQPEnvelope' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\AmqpCaster::castEnvelope', 'ArrayObject' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\SplCaster::castArrayObject', 'ArrayIterator' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\SplCaster::castArrayIterator', 'SplDoublyLinkedList' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\SplCaster::castDoublyLinkedList', 'SplFileInfo' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\SplCaster::castFileInfo', 'SplFileObject' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\SplCaster::castFileObject', 'SplFixedArray' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\SplCaster::castFixedArray', 'SplHeap' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\SplCaster::castHeap', 'SplObjectStorage' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\SplCaster::castObjectStorage', 'SplPriorityQueue' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\SplCaster::castHeap', 'OuterIterator' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\SplCaster::castOuterIterator', 'MongoCursorInterface' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\MongoCaster::castCursor', ':curl' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ResourceCaster::castCurl', ':dba' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ResourceCaster::castDba', ':dba persistent' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ResourceCaster::castDba', ':gd' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ResourceCaster::castGd', ':mysql link' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ResourceCaster::castMysqlLink', ':pgsql large object' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\PgSqlCaster::castLargeObject', ':pgsql link' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\PgSqlCaster::castLink', ':pgsql link persistent' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\PgSqlCaster::castLink', ':pgsql result' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\PgSqlCaster::castResult', ':process' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ResourceCaster::castProcess', ':stream' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ResourceCaster::castStream', ':persistent stream' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ResourceCaster::castStream', ':stream-context' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\ResourceCaster::castStreamContext', ':xml' => 'Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\XmlResourceCaster::castXml');\n$a = $this->callCaster('Symfony\\\\Component\\\\VarDumper\\\\Caster\\\\Caster::castObject', $obj, $classInfo[0], null, $isNested);\nreturn \\call_user_func_array(array('Symfony\\\\Component\\\\Debug\\\\Exception\\\\FlattenException', $method), $args);\nin the compat phars:\n\\_HumbugBoxb886a4cd1570\\Hoa\\Consistency::registerShutdownFunction(xcallable('Hoa\\\\Console\\\\Mouse::untrack'));\n\\_HumbugBoxb886a4cd1570\\Hoa\\Consistency::registerShutdownFunction(xcallable('Hoa\\\\Console\\\\Console::restoreInteraction'));\nif ('Hoa\\\\Core' === \\substr($classname, 0, 8) && \\false !== ($pos = \\strpos($classname, '\\\\', 10)) && 'Bin\\\\' !== \\substr($classname, 9, 4)) {\nif ($this->_owner == 'Hoa\\\\Core\\\\Core') {\n            $class = 'HoaCoreCore';\n            $this->_parameters = $parameters;\n            $path = $this->zFormat($parameters['protocol.Data/Etc/Configuration']) . '.Cache' . DS . 'HoaCoreCore.php';\n        } else {. this sort of thing could be a linter / warning that php scoper emits. i found all the prefixes in my composer classmap, then searched the built phar for them:\n[^\\\\](XdgBaseDir|Symfony|Psr|PhpParser|JakubOnderka|Hoa)\\\\. thank you. it's looking good!\ni hacked the tests up a bit to get them to run against the scoped phar rather than the composer vendor directory:\n\nIt was a surprisingly small diff \ud83d\ude42\n\n```diff\ndiff --git a/autoload.php b/autoload.php\nnew file mode 100644\nindex 0000000..d33678e\n--- /dev/null\n+++ b/autoload.php\n@@ -0,0 +1,13 @@\n+php\n+\n+/*\n+ * This file is part of Psy Shell.\n+ *\n+ * (c) 2012-2018 Justin Hileman\n+ *\n+ * For the full copyright and license information, please view the LICENSE\n+ * file that was distributed with this source code.\n+ */\n+\n+require __DIR__ . '/build/psysh/psysh';\n+require __DIR__ . '/vendor/autoload.php';\ndiff --git a/bin/psysh b/bin/psysh\nindex 7dbd203..5c7b915 100755\n--- a/bin/psysh\n+++ b/bin/psysh\n@@ -13,6 +13,8 @@\n // Try to find an autoloader for a local psysh version.\n // We'll wrap this whole mess in a Closure so it doesn't leak any globals.\n call_user_func(function () {\n+    return;\n+\n     $cwd = null;\n\n     // Find the cwd arg (if present)\ndiff --git a/composer.json b/composer.json\nindex 4588ba6..90c7432 100644\n--- a/composer.json\n+++ b/composer.json\n@@ -23,7 +23,6 @@\n         \"jakub-onderka/php-console-highlighter\": \"0.3.*|0.4.*\"\n     },\n     \"require-dev\": {\n-        \"phpunit/phpunit\": \"~4.8.35|~5.0|~6.0|~7.0\",\n         \"hoa/console\": \"~2.15|~3.16\",\n         \"bamarni/composer-bin-plugin\": \"^1.2\"\n     },\n@@ -34,12 +33,6 @@\n         \"ext-pdo-sqlite\": \"The doc command requires SQLite to work.\",\n         \"hoa/console\": \"A pure PHP readline implementation. You'll want this if your PHP install doesn't already support readline or libedit.\"\n     },\n-    \"autoload\": {\n-        \"files\": [\"src/functions.php\"],\n-        \"psr-4\": {\n-            \"Psy\\\\\": \"src/\"\n-        }\n-    },\n     \"autoload-dev\": {\n         \"psr-4\": {\n             \"Psy\\\\Test\\\\\": \"test/\"\ndiff --git a/phpunit.xml.dist b/phpunit.xml.dist\nindex 3534fca..e82a430 100644\n--- a/phpunit.xml.dist\n+++ b/phpunit.xml.dist\n@@ -1,5 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?\n-\n+\n\n./test\n\ndiff --git a/test/CodeCleaner/CodeCleanerTestCase.php b/test/CodeCleaner/CodeCleanerTestCase.php\nindex 6962c11..c86ca99 100644\n--- a/test/CodeCleaner/CodeCleanerTestCase.php\n+++ b/test/CodeCleaner/CodeCleanerTestCase.php\n@@ -11,7 +11,7 @@\n\n namespace Psy\\Test\\CodeCleaner;\n\n-use PhpParser\\NodeTraverser;\n+use _HumbugBox29e42959e764\\PhpParser\\NodeTraverser;\n use Psy\\CodeCleaner\\CodeCleanerPass;\n use Psy\\Test\\ParserTestCase;\n\ndiff --git a/test/CodeCleaner/NoReturnValueTest.php b/test/CodeCleaner/NoReturnValueTest.php\nindex 11e9d01..21b6fc1 100644\n--- a/test/CodeCleaner/NoReturnValueTest.php\n+++ b/test/CodeCleaner/NoReturnValueTest.php\n@@ -11,7 +11,7 @@\n\n namespace Psy\\Test\\CodeCleaner;\n\n-use PhpParser\\Node\\Stmt\\Expression;\n+use _HumbugBox29e42959e764\\PhpParser\\Node\\Stmt\\Expression;\n use Psy\\CodeCleaner\\NoReturnValue;\n use Psy\\Test\\ParserTestCase;\n\ndiff --git a/test/Command/ExitCommandTest.php b/test/Command/ExitCommandTest.php\nindex 45626be..a174bf6 100644\n--- a/test/Command/ExitCommandTest.php\n+++ b/test/Command/ExitCommandTest.php\n@@ -11,8 +11,8 @@\n\n namespace Symfony\\Component\\Console\\Tests\\Command;\n\n+use _HumbugBox29e42959e764\\Symfony\\Component\\Console\\Tester\\CommandTester;\n use Psy\\Command\\ExitCommand;\n-use Symfony\\Component\\Console\\Tester\\CommandTester;\n\n class ExitCommandTest extends \\PHPUnit\\Framework\\TestCase\n {\ndiff --git a/test/Command/ThrowUpCommandTest.php b/test/Command/ThrowUpCommandTest.php\nindex 511c580..3ad3d28 100644\n--- a/test/Command/ThrowUpCommandTest.php\n+++ b/test/Command/ThrowUpCommandTest.php\n@@ -11,9 +11,9 @@\n\n namespace Symfony\\Component\\Console\\Tests\\Command;\n\n+use _HumbugBox29e42959e764\\Symfony\\Component\\Console\\Tester\\CommandTester;\n use Psy\\Command\\ThrowUpCommand;\n use Psy\\Shell;\n-use Symfony\\Component\\Console\\Tester\\CommandTester;\n\n class ThrowUpCommandTest extends \\PHPUnit\\Framework\\TestCase\n {\n@@ -76,7 +76,7 @@ class ThrowUpCommandTest extends \\PHPUnit\\Framework\\TestCase\n     }\n\n     /**\n-     * @expectedException \\PhpParser\\Error\n+     * @expectedException \\_HumbugBox29e42959e764\\PhpParser\\Error\n      * @expectedExceptionMessage Syntax error, unexpected ')' on line 1\n      */\n     public function testParseErrorThrowsException()\ndiff --git a/test/Command/TimeitCommand/TimeitVisitorTest.php b/test/Command/TimeitCommand/TimeitVisitorTest.php\nindex 1f31735..1918070 100644\n--- a/test/Command/TimeitCommand/TimeitVisitorTest.php\n+++ b/test/Command/TimeitCommand/TimeitVisitorTest.php\n@@ -11,7 +11,7 @@\n\n namespace Psy\\Test\\Command\\TimeitCommand;\n\n-use PhpParser\\NodeTraverser;\n+use _HumbugBox29e42959e764\\PhpParser\\NodeTraverser;\n use Psy\\Command\\TimeitCommand\\TimeitVisitor;\n use Psy\\Test\\ParserTestCase;\n\ndiff --git a/test/ConfigurationTest.php b/test/ConfigurationTest.php\nindex b7b6c0c..dab1e1e 100644\n--- a/test/ConfigurationTest.php\n+++ b/test/ConfigurationTest.php\n@@ -11,11 +11,11 @@\n\n namespace Psy\\Test;\n\n+use _HumbugBox29e42959e764\\Symfony\\Component\\Console\\Output\\ConsoleOutput;\n use Psy\\CodeCleaner;\n use Psy\\Configuration;\n use Psy\\Output\\PassthruPager;\n use Psy\\VersionUpdater\\GitHubChecker;\n-use Symfony\\Component\\Console\\Output\\ConsoleOutput;\n\n class ConfigurationTest extends \\PHPUnit\\Framework\\TestCase\n {\ndiff --git a/test/Exception/ParseErrorExceptionTest.php b/test/Exception/ParseErrorExceptionTest.php\nindex 446b938..c99c441 100644\n--- a/test/Exception/ParseErrorExceptionTest.php\n+++ b/test/Exception/ParseErrorExceptionTest.php\n@@ -20,7 +20,7 @@ class ParseErrorExceptionTest extends \\PHPUnit\\Framework\\TestCase\n         $e = new ParseErrorException();\n\n         $this->assertInstanceOf('Psy\\Exception\\Exception', $e);\n-        $this->assertInstanceOf('PhpParser\\Error', $e);\n+        $this->assertInstanceOf('\\_HumbugBox29e42959e764\\PhpParser\\Error', $e);\n         $this->assertInstanceOf('Psy\\Exception\\ParseErrorException', $e);\n     }\n\n@@ -34,7 +34,7 @@ class ParseErrorExceptionTest extends \\PHPUnit\\Framework\\TestCase\n\n     public function testConstructFromParseError()\n     {\n-        $e = ParseErrorException::fromParseError(new \\PhpParser\\Error('{msg}'));\n+        $e = ParseErrorException::fromParseError(new \\_HumbugBox29e42959e764\\PhpParser\\Error('{msg}'));\n\n         $this->assertContains('{msg}', $e->getRawMessage());\n         $this->assertContains('PHP Parse error:', $e->getMessage());\ndiff --git a/test/Formatter/SignatureFormatterTest.php b/test/Formatter/SignatureFormatterTest.php\nindex 096e6ae..3ee5d5f 100644\n--- a/test/Formatter/SignatureFormatterTest.php\n+++ b/test/Formatter/SignatureFormatterTest.php\n@@ -54,8 +54,8 @@ class SignatureFormatterTest extends \\PHPUnit\\Framework\\TestCase\n             [\n                 new \\ReflectionClass('Psy\\CodeCleaner\\CodeCleanerPass'),\n                 'abstract class Psy\\CodeCleaner\\CodeCleanerPass '\n-                . 'extends PhpParser\\NodeVisitorAbstract '\n-                . 'implements PhpParser\\NodeVisitor',\n+                . 'extends _HumbugBox29e42959e764\\PhpParser\\NodeVisitorAbstract '\n+                . 'implements _HumbugBox29e42959e764\\PhpParser\\NodeVisitor',\n             ],\n             [\n                 new \\ReflectionFunction('array_chunk'),\ndiff --git a/test/Input/CodeArgumentTest.php b/test/Input/CodeArgumentTest.php\nindex c396152..5579021 100644\n--- a/test/Input/CodeArgumentTest.php\n+++ b/test/Input/CodeArgumentTest.php\n@@ -11,8 +11,8 @@\n\n namespace Psy\\Test\\Input;\n\n+use _HumbugBox29e42959e764\\Symfony\\Component\\Console\\Input\\InputArgument;\n use Psy\\Input\\CodeArgument;\n-use Symfony\\Component\\Console\\Input\\InputArgument;\n\n class CodeArgumentTest extends \\PHPUnit\\Framework\\TestCase\n {\ndiff --git a/test/Input/FilterOptionsTest.php b/test/Input/FilterOptionsTest.php\nindex 7ed8919..e854094 100644\n--- a/test/Input/FilterOptionsTest.php\n+++ b/test/Input/FilterOptionsTest.php\n@@ -11,9 +11,9 @@\n\n namespace Psy\\Test\\Input;\n\n+use _HumbugBox29e42959e764\\Symfony\\Component\\Console\\Input\\InputDefinition;\n+use _HumbugBox29e42959e764\\Symfony\\Component\\Console\\Input\\StringInput;\n use Psy\\Input\\FilterOptions;\n-use Symfony\\Component\\Console\\Input\\InputDefinition;\n-use Symfony\\Component\\Console\\Input\\StringInput;\n\n class FilterOptionsTest extends \\PHPUnit\\Framework\\TestCase\n {\ndiff --git a/test/Input/ShellInputTest.php b/test/Input/ShellInputTest.php\nindex f19d126..0cb49fa 100644\n--- a/test/Input/ShellInputTest.php\n+++ b/test/Input/ShellInputTest.php\n@@ -11,11 +11,11 @@\n\n namespace Psy\\Test\\Input;\n\n+use _HumbugBox29e42959e764\\Symfony\\Component\\Console\\Input\\InputArgument;\n+use _HumbugBox29e42959e764\\Symfony\\Component\\Console\\Input\\InputDefinition;\n+use _HumbugBox29e42959e764\\Symfony\\Component\\Console\\Input\\InputOption;\n use Psy\\Input\\CodeArgument;\n use Psy\\Input\\ShellInput;\n-use Symfony\\Component\\Console\\Input\\InputArgument;\n-use Symfony\\Component\\Console\\Input\\InputDefinition;\n-use Symfony\\Component\\Console\\Input\\InputOption;\n\n class ShellInputTest extends \\PHPUnit\\Framework\\TestCase\n {\ndiff --git a/test/ParserTestCase.php b/test/ParserTestCase.php\nindex a0740b6..96708c5 100644\n--- a/test/ParserTestCase.php\n+++ b/test/ParserTestCase.php\n@@ -11,7 +11,7 @@\n\n namespace Psy\\Test;\n\n-use PhpParser\\PrettyPrinter\\Standard as Printer;\n+use _HumbugBox29e42959e764\\PhpParser\\PrettyPrinter\\Standard as Printer;\n use Psy\\Exception\\ParseErrorException;\n use Psy\\ParserFactory;\n\n@@ -33,7 +33,7 @@ class ParserTestCase extends \\PHPUnit\\Framework\\TestCase\n         $code = $prefix . $code;\n         try {\n             return $this->getParser()->parse($code);\n-        } catch (\\PhpParser\\Error $e) {\n+        } catch (\\_HumbugBox29e42959e764\\PhpParser\\Error $e) {\n             if (!$this->parseErrorIsEOF($e)) {\n                 throw ParseErrorException::fromParseError($e);\n             }\n@@ -41,7 +41,7 @@ class ParserTestCase extends \\PHPUnit\\Framework\\TestCase\n             try {\n                 // Unexpected EOF, try again with an implicit semicolon\n                 return $this->getParser()->parse($code . ';');\n-            } catch (\\PhpParser\\Error $e) {\n+            } catch (\\_HumbugBox29e42959e764\\PhpParser\\Error $e) {\n                 return false;\n             }\n         }\n@@ -88,7 +88,7 @@ class ParserTestCase extends \\PHPUnit\\Framework\\TestCase\n         return $this->printer;\n     }\n\n-    private function parseErrorIsEOF(\\PhpParser\\Error $e)\n+    private function parseErrorIsEOF(\\_HumbugBox29e42959e764\\PhpParser\\Error $e)\n     {\n         $msg = $e->getRawMessage();\n\ndiff --git a/test/ShellTest.php b/test/ShellTest.php\nindex 809af02..2be6236 100644\n--- a/test/ShellTest.php\n+++ b/test/ShellTest.php\n@@ -11,12 +11,12 @@\n\n namespace Psy\\Test;\n\n+use _HumbugBox29e42959e764\\Symfony\\Component\\Console\\Output\\StreamOutput;\n use Psy\\Configuration;\n use Psy\\Exception\\ErrorException;\n use Psy\\Exception\\ParseErrorException;\n use Psy\\Shell;\n use Psy\\TabCompletion\\Matcher\\ClassMethodsMatcher;\n-use Symfony\\Component\\Console\\Output\\StreamOutput;\n\n class ShellTest extends \\PHPUnit\\Framework\\TestCase\n {\n@@ -218,7 +218,7 @@ class ShellTest extends \\PHPUnit\\Framework\\TestCase\n     {\n         $shell = new Shell($this->getConfig());\n\n-        $this->assertInstanceOf('Symfony\\Component\\Console\\Application', $shell);\n+        $this->assertInstanceOf('_HumbugBox29e42959e764\\Symfony\\Component\\Console\\Application', $shell);\n         $this->assertContains(Shell::VERSION, $shell->getVersion());\n         $this->assertContains(PHP_VERSION, $shell->getVersion());\n         $this->assertContains(PHP_SAPI, $shell->getVersion());\ndiff --git a/test/Sudo/SudoVisitorTest.php b/test/Sudo/SudoVisitorTest.php\nindex 1f2042c..9db150b 100644\n--- a/test/Sudo/SudoVisitorTest.php\n+++ b/test/Sudo/SudoVisitorTest.php\n@@ -11,7 +11,7 @@\n\n namespace Psy\\Test\\Sudo;\n\n-use PhpParser\\NodeTraverser;\n+use _HumbugBox29e42959e764\\PhpParser\\NodeTraverser;\n use Psy\\Sudo\\SudoVisitor;\n use Psy\\Test\\ParserTestCase;\n\ndiff --git a/vendor-bin/phpunit/composer.json b/vendor-bin/phpunit/composer.json\nnew file mode 100644\nindex 0000000..526dba5\n--- /dev/null\n+++ b/vendor-bin/phpunit/composer.json\n@@ -0,0 +1,5 @@\n+{\n+    \"require\": {\n+        \"phpunit/phpunit\": \"^6\"\n+    }\n+}\n```\n\n\nThe only failure was with Hoa\\Console, which isn't super surprising because it's not included in the non-compat phar, so it would be looking for it in the vendor directory anyway:\n```\n1) Psy\\Test\\Readline\\HoaConsoleTest::testHistory\nError: Class '_HumbugBox29e42959e764\\Hoa\\Console\\Readline\\Readline' not found\nphar:///Users/justin/Projects/public/psysh/build/psysh/psysh/src/Readline/HoaConsole.php:16\n/Users/justin/Projects/public/psysh/test/Readline/HoaConsoleTest.php:20\n```. Oh, sorry that wasn\u2019t super clear. This is a failure of the tests, not a test failure. \nI ran everything against the normal (non-compat) phar, which meant it was missing Hoa Console entirely. So there\u2019s no way that test could have passed.. I've restarted it three times :-/ . We got a passing build :). It's going to have to be v0.10.0 because it breaks backwards compatibility (ever so slightly) if you're using the phar to load code rather than to just run psysh. I'll have to think about ETA a bit because there are some other breaking changes I was considering :). @theofidry this has made builds super flaky and slow. we're going to need to do something differently :(. Yeah, see https://travis-ci.org/bobthecow/psysh/jobs/459223331 for example. I re-ran it a couple of times and didn't get a passing build. To make matters worse, it takes 10 or 15 minutes longer to run, just to eventually fail.. @theofidry @GrahamCampbell any reason not to do this?. it is possible to autocomplete class names if (1) you\u2019re using a readline implementation which supports autocomplete and (2) you\u2019ve already autoloaded the file that defines that class.. @theofidry i've been kicking around the idea of \"autoload warmers\" for a while. wanna make one? \ud83d\ude04 \ni imagine it would be an interface, and maybe a couple of implementations. one based on composer, that reads either configs or generated autoloaders, uses them to enumerate all possible classes. another could be symfony finder based, and walk the filesystem according to the finder rules.\nin all cases, we probably just want them to emit a list of files which possibly / probably contain classes, then use php parser to parse the file and make sure (1) it's valid PHP and won't error, (2) it contains only class and function definitions at the top level, not things that probably have side effects.\n. It has something to do with forking / pcntl. I'm trying to sort it out. In the meantime, you can use PsySH by disabling pcntl support, by adding this to your config file:\nphp\nreturn [\n  'usePcntl' => false,\n];. Ok, got it!\nHomebrew-installed PHP 7.3.0 on Mojave segfaults when calling preg_match from a child process.\nRepro:\n```php\n<?php\nif (preg_match('/./', 'a')) echo \"pre-fork works\\n\";\n$pid = pcntl_fork();\nif ($pid == -1) {\n    die('fail');\n} elseif ($pid) {\n    if (preg_match('/./', 'a')) echo \"parent works\\n\";\n    pcntl_wait($status);\n    if (pcntl_wifsignaled($status) && pcntl_wtermsig($status) == SIGSEGV) {\n        die('child process segfaulted');\n    }\n} else {\n    if (preg_match('/./', 'a')) echo \"child works\\n\";\n}\n```\nIn PHP < 7.3, this results in:\npre-fork works\nparent works\nchild works\nBut in PHP 7.3, we get:\npre-fork works\nparent works\nchild process segfaulted\nI'm not sure what the extent of this issue is. 3v4l.org doesn't have PCNTL so we can't test there. All versions of PHP that Travis tests worked. That said, Travis is testing RC3, so it might be a bug introduced between that and the stable release?\nAre y'all on Homebrew + Mojave? Can anyone repro this with other PHP 7.3 versions or sources or operating systems?\n. >Just to let you know: same problem with PHP7.3 running on macOS High Sierra\nAlso installed via Homebrew?. It fails for both bottled and built-from-source PHP 7.3 via Homebrew.. See also that whole page under the \"your config file\" link in my comment \ud83d\ude09 . Not that I know of. Wanna take it over there? :). Thanks. JSON in the worst. . It works with PHP\u2019s built in webserver, but you have to be running it as a foreground process in your interactive shell. . Same error in PHP 7.2.\nI think the underlying issue is likely with PHP-Parser. It parses $a = [,]; without complaint, which means, after we write the AST back to PHP, we don't have an invalid array anymore:\n\n. Since this is an issue in PHP-Parser, closing this one in favor of nikic/PHP-Parser#561 :). It's a bug in Homebrew PHP. See https://github.com/bobthecow/psysh/issues/540#issuecomment-445546060 for a workaround.. Thank you for reporting this! It's fixed in develop and will go out with the next release.\n\n. The security risk here is that PsySH might allow arbitrary code execution on your system.\nWhich I guarantee it will do, because PsySH is a REPL, and the whole point of a REPL is to allow arbitrary code execution on your system.\nI see that you\u2019ve also opened sebastianbergmann/phpunit#3516, carlos-meneses/laravel-mpdf#9, jmespath/jmespath.php#43 and nikic/PHP-Parser#579.\nI would highly recommend that you hire an expert to help you understand the security implications of these issues, assess your risk, and work out possible mitigation. . Ha! Thanks for reporting this.\nThere's an ls command in psysh, and it has the alias list. Until pretty recently, it wasn't ambiguous because it could only take a static argument, e.g. list $a.\nBut commands like ls now accept expressions as well (which is awesome) so now it's ambiguous when you type list ($a, $b) = [1, 2] whether you mean ls (result of expression) or the PHP keyword. And I never noticed because I never use a space after list \ud83d\ude04 \nI'll remove the list alias. In the meantime, you can always get the non-command version by prefixing with ;\u2026\n\n. I pushed a fix in beef754, and it will go out in the next stable release.. If you're using PsySH installed via Phar or global Composer install, it might conflict with locally installed versions of Symfony\\Console. Adding psy/psysh as a dev dependency in Composer should fix it!. does it always refuse to write, or just on some operating systems or implementations? should we detect the return false and warn about it then?. Thank you! This has been merged into the develop branch and will go into the next release :). You can do this! You have access to the Configuration object in your config file, and your config file is PHP so you can do basically anything:\n```php\n<?php\n$config->setHistoryFile(\u2018whatever\u2019 . $code . $you->want());\n. Per CS, there should be an empty line before these `return` statements.\n. Good question. I don't actually remember. I just do it because I like to have _some_ rule to be consistent, not because I have any love for any particular style :)\n. You prolly meant `||` instead of `|` here (though it does, technically, work).\n. Copypasta here.\n. this condition confuses me :)\n. This should probably run after the NamespacePass, right?\n. php\n        if ($node instanceof NamespaceStatement) {\n            $this->namespace = isset($node->name) ? $node->name->parts : array();\n        } elseif ($node instanceof ClassStatement) {\n        // Bail early if this is PHP 5.3.3 and we have a namespaced class\n        if (!empty($this->namespace) && $this->isPHP533) {\n            return;\n        }\n\n        $constructor = null;\n        foreach ($node->stmts as $stmt) {\n            if ($stmt instanceof ClassMethod) {\n                // Bail early if we find a new-style constructor\n                if ('__construct' === strtolower($stmt->name)) {\n                    return;\n                }\n\n                // We found a possible old-style constructor\n                // (unless there is also a __construct method)\n                if (strtolower($node->name) === strtolower($stmt->name)) {\n                    $constructor = $stmt;\n                }\n            }\n        }\n\n        if ($constructor && $constructor->isStatic()) {\n            throw new FatalErrorException(sprintf(\n                'Constructor %s::%s() cannot be static',\n                implode('\\\\', array_merge($this->namespace, (array) $node->name)),\n                $constructor->name\n            ));\n        }\n    }\n\n``\n.$historySizeand$eraseDupsaren't set unless$this->useReadline()above. If you're going to use them in the Transient readline, you'll need to move them out of the conditional block above.\n. Let's make that$resor$ret. I'm not a fan of single character variables outside of loops.\n. This comment is a lie :)\n. It is :)\n. These member variables should be declared private.\n.readline_clear_history` started doing that a lot of places when I installed php 5.5.7.\nI did 939eec2 in a fit of stupid after I started getting segfaults :-/\n. I know this isn't technically you, but we should use a better test for libedit here, since it'll actually execute with both libedit and readline implementations. This should do?\nphp\nif (!function_exists('readline') || readline_info('library_version') !== 'Editline wrapper') // ...\n. Why not run this up through 127 or 255? That'd give us coverage of all ascii characters.\n. https://bugs.php.net/bug.php?id=66412\nFeel free to comment if you have more info :)\n. Works for me.\n. It passes on mine as well. OS X, PHP 5.5.7 installed via Homebrew (with patched libedit to work around the segfault).\n. Does Travis have GNU readline support? The skip at the top of this test case doesn't exclude non-libedit builds.\n. do we need to ignore *.pyc as well?\n. php-cs-fixer did this, right? The space in anonymous functions must be a recent change.\n. Heh. Interesting that it found this one. I guess that's one downside of using regexp instead of a parser and generator to reformat code.\n. No, it's fine like this. It just shows how naive their parser is.\n. Actually, COLOR_FMT should be updated to match as well. Mind sticking a space after the </keyword>?\n. Ahh, right. I forgot this was Python 3.\n. This will actually fail if the line is 0 because PHP is an awful, horrible kludge :(\n. These guys are heredocs to guilt me into actually writing the full help description of everything :)\n. Ugly code is usually a surprisingly good motivator.\n. How about \"Enables support for arrow-key history navigation, and showing and manipulating command history.\"?\n. History replay is supported regardless of whether you have readline or libedit, it's just slightly better if you're not using the fallback version :)\n. Should $propertyFilter default to \\ReflectionProperty::IS_PUBLIC?\n. Storing this in the currentScope doesn't do anything, since the only place it gets checked is non-variable and non-expression function calls (see below). I think it should be enough to change the if (!$name instanceof Expression) to if (!$name instanceof Expression && !$name instanceof Variable).\n. Nope nope! Fix your global .gitignore rather than littering your editor's particular flavor of detritus in every open source project you touch ;)\n. With fast_finish, will the whole matrix still run, or will it stop all pending jobs as soon as one (that isn't hhvm) fails?\n. Cool. Easy enough to revert if that turns out not to be the case.\n. :+1: \n. s/Psych/PsySH/\n. Why is two spaces correct here?\n. Sorry about the inconsistency. We should use two space indent :)\n. It's possible to have backtrace entries with no 'class' or 'function'. I got it to happen by wrapping stuff in my .config/psysh/config.php file in closures :)\n\nPHP Notice:  Undefined index: class in .../psysh/src/Psy/Command/WhereamiCommand.php on line 64\n\nShould add isset() on these to keep from getting warnings.\n. or maybe even:\nphp\nif (!isset($backtrace['class']) || !isset($backtrace['function'])) {\n    continue;\n}\n. :+1: for ~2.0\n. This should only be in require-dev. \n. There should be a space after functionm (here and above). \n. Since phpcs seems to have no opinion about the file name, I'd prefer to use one that's a bit more indicative of what it's used for\u2026 I've been trying to see if there's a good precedent for phpcs ruleset file names. I think the closest I've found is simply phpcs.xml In the project root. \n. PHP is weird.\n. :+1: \n. https://github.com/bobthecow/psysh/blob/develop/.php_cs#L8\n. list doesn't work unless fileInfo returns [$file, $line] instead of compact('file', 'line')\n. http://php.net/list\n. This should probably be run in $sh, not eval() here, right?\n. Class name and command should match.\n. I was going to comment that I'd prefer injecting dependencies via the constructor, but it looks like you've already written it that way :) Let's use that here?\n. I'd love to be able to test this... Can we extract the guts of callback() into a function that takes $input, $index, readline_info() so that we can pass in fake data?\n. Would it make sense to check the arity of the function being completed and only add the closing paren if it's a function that doesn't accept args?\n. (possibly caching that info on this object to keep from looking it up all the time)\n. We should add fake functions (control structures or keywords that masquerade as functions) here as well. Prolly store them in a static var on this class?\n['declare', 'print', 'require', 'require_once', 'import', 'import_once', 'echo', 'empty']\n\u2026\u00a0I'm sure I'm missing a few, but that's a start :)\nI don't think we need to go as far as including switch, if/else, the various sorts of loops, etc, because those have a bunch of curly brace baggage. But we should include the ones that look and act like functions.\n. It doesn't have to be in v1 of the feature.\n. Nice! Of those, it seems like these would make the most sense:\n'array'\n'clone'\n'declare'\n'die'\n'echo'\n'empty'\n'eval'\n'exit'\n'include'\n'include_once'\n'isset'\n'list'\n'print'\n'require'\n'require_once'\n'unset'\nThose are the most function-like of them, and the ones that I would be most likely to expect to have completed. There are a few more that are function-like but don't make much sense in a REPL context, and the rest of them are either complex control structures, or things that would need to be completed without parens, so let's hold off on them.\n. potential for bugs here: $info['line_buffer'] seems to be quite literally the buffer they use for input, and it often contains things that aren't part of the current line (e.g. left over from the last line). We should do $line = substr($info['line_buffer'], 0, $info['end']) somewhere early on in this function and always refer to that instead.\n. agreed. but we're likely not using it at all, so i didn't worry too much about it :)\n. We should check whether the Readline implementation supports tab completion rather than setting one up and having it just sit there :)\n. (sorry, meant to leave that comment on getTabCompletion, not setTabCompletion)\n. I think I'd prefer to move instantiation of this service to Configuration, where other services are instantiated. That way users can interact with it in the psysh config file, much the same way they can interact with commands, presenters and other extension points.\nThen I could return this from my config:\nphp\nreturn [\n  'tabCompletionMatchers' => [\n    new EloquentModelMatcher(),\n    new FancyPantsMatcher()\n  ]\n]\n\u2026\u00a0and get some custom matchers that meet my needs, to go with the default set.\nAlong with that we would probably have to change to a ContextAwareInterface style dependency injection for the matchers that depend on context, shell, etc, so that users wouldn't have to have access to those things when setting up the initial configuration. Commands already do this (see ReflectingCommand, WtfCommand).\nMaybe we use the config as an autocompleter factory, and just activate it here?\nphp\nif ($this->config->getTabCompletion()) {\n  $this->completion = $this->config->getAutoCompleter();\n  $this->completion->activate();\n}\nI haven't thought through this completely, but it seems like a direction we should head :)\n. do we need a deactivate? if we exit a psysh debugging session and end up back in a regular php -a or something, will this screw everything up?\n. should this be completing with a $ since there isn't one in the input yet?\n. let's move the $start to right before running $sh->execute() so that we have as little overhead as possible here.\n. I've been thinking about this a bit, and the more I consider it the more I feel that we need a different input string parsing type.\nRight now, all command input is parsed like command line args. We would really be better served by a hybrid between command line args and \"just give me the string they typed\". Here, for example, if you're trying to time foo($bar, 'baz') you'll run into problems, because InputArgument will just grab part of that as target :-/ \n. This will put $executionClosure in the local scope while running the REPL. I've been very careful to only expose $__psysh__ so that the amount of unexpected PsySH stuff \"leaking\" into the REPL is very limited. And then I added a CodeCleaner pass to make it hard for you to even touch that one variable :P\nIs there a way to do this without exposing another variable name?\n. This is a regression, it reverts the fix for #106 \n. Again, we're leaking a variable into local scope. This one's even more problematic, because it's way more likely that someone would have a variable called $code, which would be extracted on line 44 below and executed :-/\nIt's really looking like having a second code path just for execute() would be far cleaner.\n. For example, handling BreakException only makes sense if you could be executing commands, not if you're evaluating code.\n. Right, I didn't notice that there was another level of closure when I made that comment :)\n. There is not a test for that. I'll take a look.\n. :+1: This seems like a good approach to the issue.\nIt could also be extended in the future if we have a whole string input command that uses flags, so we could do something like timeit --verbose foo() and be able to process options as well. But not yet :)\n. Since there is now an execution closure, does the loop closure still need to be a closure? Could we move all of this mess into the run method itself, and save ourselves from the weird variables and convoluted interaction here?\nIf we do, we would probably have to do something about the user-defined includes, because they'd still want to be executed in a closure\u2026\nThis isn't a request to change anything yet, I'm not even sure if it's a good idea. I'm just asking what you think :)\n. Maybe we should not complete variables until they type a $ then, for now? So:\n- 12 + clone [tab][tab] wouldn't include variable names\n- 12 + clone $[tab][tab] would include variable names\nOr is it weird about leaving the $ that they already typed?\n. okay.\n. oh, did you try it with pcntl (forking loop) disabled? that might make a difference, too, depending on how readline completions deal with forks.\n. :+1: \n. extension_loaded('readline') obvs ;)\n. Don't worry too much about it. I'll take a look in a bit.\n. this should store the completer instance on $this->completer like config does with all other services.\n. addTabCompletionMatchers hasn't been implemented yet?\n. maybe add an if (empty($this->tabCompletionMatchers)) guard here? I know it's protected, so we don't need to worry about random users calling it a second time, but that'll help guard against future changes doing something dumb and re-initializing these :)\n. returning an empty string here keeps it from autocompleting file names and dumb things like that, yeah?\n. should be using $this->getVariable\n. $this->getVariable again :)\n. It looks like only three matchers actually need ContextAware (ObjectAttributes, ObjectMethods, and Variables). Let's extend this with a ContextAwareMatcher (or AbstractContextAwareMatcher, I don't care which name) for them to extend so that only those three matchers are actually ContextAware.\n. Let's use Configuration::getRuntimeDir instead of sys_get_temp_dir for the base directory.\n. this will need to be @file_exists because PHP triggers errors if you check a file outside of open_basedir restrictions.\n. possibly store this on the first call to use a sandbox, rather than when the command is created?\n. use an @ here as well, same reason.\n. we don't need this output, it's just saying \"trying to do what you asked\", after which it'll say either \"did what you asked\" or \"didn't do what you asked\"\u2026\u00a0so the trying bit is redundant :)\n. let's use concatenation or sprintf rather than weird interpolation.\n. no, that's fine. i was just confirming the reason for the empty string.\ni agree, we should do this. there are only a few cases where completing filenames makes sense. we can have a matcher specifically for that one of these days :)\n. should this the static?\n. should this be static as well?\n. It looks like we're not currently using this anywhere.\n. This should be 1 in PHP >= 5.4, since that's no longer a special case.\n. Or it could just be :). Who says your punctuation trumps my emoticon?\n. oh. except this. good catch.\n. I don't think this is how @internal works.\n. I added a /** @var */ annotation for $name, just in case :)\n. This is now addTabCompletionMatchers for consistency with existing things, and consistency with what the words mean :)\n. If it's the keys, you probably don't need to array_unique it ;)\n. No worries. I'll never say no to more test coverage.\n. symfony/finder is required by bin/compile\n. By removing these from composer dev requirements, you force contributors to maintain a global installed copy that stays in sync with whatever version we expect to have. Is there any downside to leaving them here so that people can still run vendor/bin/php-cs-fixer fix before committing?\n. But that workflow requires people to commit things that are wrong. It doesn't empower them to actually do it right the first time. They essentially have to break a build to see that they've done something wrong, and that's not a good experience at all. Travis isn't there as a first defense, it's the backup in case a failing test gets through. StyleCI should be the same.\n. Me too \u2014 save for when new rules are introduced between builds, see FriendsOfPHP/PHP-CS-Fixer#1038\u00a0\u2014\u00a0but most people don't.\nIt feels like that's moving in the wrong direction. It's fine for PHPUnit, because it's old enough to be almost completely stable and backwards compatible. php-cs-fixer is such a moving target that just using whatever version someone happens to have globally installed is almost guaranteed to be wrong.\n. Yeah, but since I'm using it, I'd prefer not to rely on a dependency of a dependency, since that's not guaranteed to remain the case.\n. Good question. We could rewrite the requirements before building :P\n. tbh, how much does the plugin name matter?\n. what use would you have for an instance of a plugin?\n. I think it'd just override the previous one.\n. It'd be super useful for plugins which depend on plugins. For example, Drupal, Laravel and EZ all depend on some parts of Symfony. So if there were a Symfony plugin, perhaps those others would want the Symfony commands, but not presenters or matchers. Or if there were a Doctrine plugin, I could see wanting the ability to present and match Doctrine models, but not expose all the Doctrine console commands, because they are legion.\n. But it doesn't make sense as an object. It's an object with no responsibility :)\n. Honestly, if PHP could autoload functions, I'd prefer it be a function. There's absolutely no reason to be beholden to objects :)\n. Please add (bool) here.\n. This method doesn't feel quite right. It doesn't feel like it should be this plugin's responsibility to worry about any other configuration, and in the current implementation, every plugin has a chance to mess with the global configuration. Yeah, I get that this is final, but it still feels wrong. The manager should be responsible for doing the merging.\n. Why not have the manager call getCommands, getMatchers, etc on each plugin and merge those, respectively? I'd much prefer something explicit like that at the manager level.\n. But what if there are two people with DevToolsPlugin or AwesomePlugin? Is disambiguating by the first part of the short class name the best way to go?\n. Add an abstract static function that plugins have to implement and call it a day. That way plugins can just use their Packagist package names. Mine can be called bobthecow/psysh-devtools and yours can be called markcial/psysh-devtools, and we'll never collide :)\n. For consistency with existing managers, this should prolly be called PluginManager.\n. How long ago did the caret operator ship? I checked the composer changelog but didn't see it.\n. :+1: Sweet. Works for me.\n. Wow, that's a pretty clever way of handling this :)\n. I think this one was better the default way\u2026\u00a0as an <aside> it's a bit too bright.\n. :+1: makes sense.\n. I'd like to see a test case to assert this, just to keep us from making a change that regresses in the future, once we don't have the context of this pull request :)\n. let's call it 'local config file', just to match how we're using it.\n. Yeah, let's do that.\n. Thanks!\n. But this works on 5.3 :)\n``` php\n        if ($parser === null) {\n            $parserFactory = new ParserFactory();\n            $parser = $parserFactory->createParser();\n        }\n    $this->parser    = $parser;\n\n``\n. This should beVALUE_REQUIRED.\n. I'm not sure I loveparser-kindas an option name. I don't have a better suggestion right now, other than to drop theparser-prefix, since that's kind of implied by the command :)\n. theelse returnis unnecessary.\n.Install PHP Parser v2.x to specify parser kindor something like that?\n. Why don't we add a private static property rather than using reflection for something that will almost never change?\n. Add a newline here for readability.\n. I'd like to enumerate the possible parser kinds, probably in the<< Hope we will see PHP version increment in the requirements soon...\nProbably not, at least until it becomes too arduous to support. PsySH is useful even for people whose legacy support needs preclude them from using PHP 5.4+ :)\n. I'd prefer changing it. I don't like reflection at runtime any more than we have to.\nAnd yeah, I know, I'm the creator of a REPL that does an obscene amount of runtime reflection :)\n. just use an inheritDoc tag :)\n. is it smart enough to exclude vendor if we run it on __DIR__?\n. These comments are necessary, they're how the compiler knows where to put the phar autoloader code.\n. :+1:\n. This fails if you've ever done a bin/build because there's a second vendor directory just for phar builds called build-vendor, and it checks that. Mind adding that as an exclusion?\n(And yeah, I really should test phar builds on CI)\n. Do you mind adding a docblock to this, since it's a protected method?\n. I would personally use a constructor argument for this, rather than getters and setters. That simplifies things here as well as Shell::getDefaultCommands :)\n. Let's throw an error if both --color and --no-color are specified. \n. Isn't this a 5.4+ thing? PsySH still supports 5.3 :)\n. TBH I don't see the advantage of using a class for this over just using three constants and checking equality in services that consume it. Convince me?\n. It feels like all of these are twisting ourselves into contortions to work around PHP's lack of enums and the ability to typehint against them :)\nRemember that these are personal configuration options, not mission critical framework integrations. If something goes wrong, the user just has the wrong color preferences.\nIn keeping with the Robustness Principle, operators don't really matter. Sure, you should be using the constants. But if you pass something in that == the value of the constant, that should be good enough for PsySH. The same way we don't throw an error if you pass something that == false to one of the boolean configs, we just silently convert it into what we were expecting.\nNow, if you pass something that isn't == one of the available options, it's totally reasonable to validate it when setting and throw an exception. But we could do that with one line of code, vs the 100 line class approach.\nIFF this were a strongly typed language, with expressive typehinting, and enums, and all sorts of other things, then we could use those language features to do this \"right\". But we still wouldn't use classes for it :P\n. Mind adding a docblock to this class?\n. Let's call this $hoaReadline for consistency with the rest of the codebase.\n. Can we poke Hoa to get a proper API for history access? I'd rather not depend on reflection on a private member :(\n. This looks unused?\n. Looks like we didn't need it. Thanks @zonuexe!\n. It'd be cleaner than this :)\nUnfortunately, we need to support all the way back to PHP 5.3, so unless it's ported to the legacy version as well, it won't do us a ton of good.\n. Psy\\Readline is an abstraction over the whole readline API. But redisplay isn't currently used in PsySH, so it's more there for completeness than anything else. If Hoa\\Console supports it and it's trivial, we should add it for if/whenever PsySH needs to use that.\n. I wouldn't worry about it, personally. it's not really a big deal, since nothing uses it :)\n. probably call it Yii 2 instead of Yii 2 framework to be consistent with the other links?\n. this probably doesn't need to write the output, since you already did it inside getVersionCheck?\n. Configuration acts as our factory and dependency injection container, especially for simple things like this.\n. i'm afraid this change will be a deal breaker.\n\n. if it fails, \"unable to check for updates\" is probably a better message than \"yep! totally up to date!\"\n. 10% use 5.2.\n80% use <= 5.5. That's a huge difference. \n. The rest of the project uses the annotation style for expected exceptions. I don't have a strong preference, but we should prolly keep it consistent :)\n. something whitespacey happened here.\n. leftover use statement.\n. leftover use or\u2026\u00a0?\n. Oh, this is checking for a TypeError. This isn't going to work on anything less than PHP 7.\n. shorthand array syntax doesn't work in PHP 5.3\nside note: if someone wants to make an argument for dropping support for older PHP, this would be way more compelling to me than \"it's deprecated so we should force users to upgrade\" :P \n. Not going to happen. \n. Does this add an extra newline when there's nothing to report from the version checker?\n. I'd prefer if it didn't :)\n. i think falling back to a NoopChecker when the user hasn't explicitly turned off update checking is probably grounds for showing an error message or warning of some sort.. this problem needs to be solved for the history file as well. any thoughts on a more general solution?. If $path exists and is writable, but $dir isn't writable, we probably shouldn't treat that as an error. . Please use $checkFile for consistency. . Leave the slash off the file name?. we don't do yoda here ;). this would write an empty line if startupMessage was '', right? it probably should be suppressed then, too.. for the example, let's use a full closing tag rather than the </> shortcut. that one is a bit weird without context :). Good catch! You've still got to catch \\Exception for PHP 5.x, though, so it doesn't make a huge difference.. The regular loop does different things with Error vs TypeError vs Exception, so let's leave it there.. Sure. Might as well use Throwable here. It should be more future proof. You know, in case PHP 8 decides we should be able to throw more than just Errors and Exceptions :). Prolly don't need two . :). Fixed!. \u261d\ufe0f . Please pass in the \"runtime dir\" from Shell::config in the constructor and use that rather than sys_get_temp_dir. It's effectively the same, but can be overridden via XDG for systems that support it.. Your escapeshellarg change broke file_get_contents.\n. Also, please name the tempfile with externaledit or similar as the prefix; psysh is too generic.\n. I'd call the whole thing edit and skip the externaledit business entirely :). i'd prefer passing it in the constructor. this value is required for making this command work properly; there's no need to add a setter :). call it runtimeDir for consistency with XDG and everywhere else we call it that?. should be VALUE_NONE; this is a boolean flag.. unfortunately this is a public method, so we won't be able to break backwards compatibility. right now.\nbut! $info['end'] is supposed to be a thing already, and we're using it below. we could work the $end param from the callback into the $info array to augment and/or replace that one, or we could just use that one?\nor we could add the $end param to the end here, but that's just a bit awkward.\nor we could rename this method and add a deprecated stub of a method called processCallback that still takes the old arguments. i think i like this third option best :). don't use empty, use === ''. because php.\n```php\n\n\n\nempty('0')\n=> true\n``. do all the possible combinations of readline and libedit and php versions all provide$end` for this callback? documentation is sadly lacking here :(\n\n\n\nif not, should we fall back to the end in readline_info if it's available?. please use types for arguments where possible.. use var_export here to escape the string and add quotes to it.. mind adding a @throws comment here?. Please add this one to your global gitignore rather than leaving it as a little present in every open source project you contribute to :). We're not 100% consistent, but most Boolean getters in Configuration don't use get prefix. Let's call this method forceArrayIndexes. . return $this-config->getPrompt() ?: static::PROMPT;. this should implode on , (with a space).. After using this for a bit, it feels like var_export isn't 100% right here.  for example, var_export(array()) is a bit ugly:\nPsy\\Shell::debug($vars = array (\n),$boundObject = NULL)\nIdeally, this would complete as:\nPsy\\Shell::debug($vars = [], $boundObject = NULL). Since it's just for default values, a few simple transforms would probably be fine. The most common case where var export is wrong will likely be an empty array? We could start by special casing just that one. And maybe deal with new lines?. How about this:\n```php\nfunction stringify($value) {\n  if (is_array($value)) {\n    $chunks = [];\n    foreach ($value as $key => $val) {\n      if ($key !== count($chunks)) {\n        return false;\n      }\n  $chunks[] = stringify($val);\n}\n\nreturn '[' . implode(', ', $chunks) . ']';\n\n}\n// Use json_encode because it's a close enough approximation of what we're\n  // looking for with strings, numbers, booleans and null...\n  return json_encode($value);\n}\n```\nIf we can encode this as a \"clean\" array, do that, as above. but if stringify returns false, bail completely and don't complete default parameters.\nUsing json_encode rather than var_export solves for \\n in strings, and special casing all arrays prevents it from generating invalid PHP.\nAs a bonus, it'll give us true, false, and null rather than the more shouty TRUE, FALSE and NULL that var_exports returns.\nAs an extra bonus, it doesn't use output buffering internally so we can use it wherever we want :). poke :). No worries. Just wanted to make sure it didn't get dropped.. it would be nice to leave off the keyString if the array has consecutive zero-based numeric indices.. this will leave a trailing , which is a bit awkward.. \u261d\ufe0f still this :). because of the magic space inserted after tab completion, this inserts five spaces for the first tab stop, then nine spaces for each additional tab stop. why don't we hijack this and return three spaces? then it's always four space indents :). unnecessary interpolation here.. let's do it with no space inside the brackets \u2014\u00a0[1, 2, 3] instead of [ 1, 2, 3 ].. you can skip all the lastKey business by checking the length of chunksSequential\u2026\n$allSequential = $allSequential && is_numeric($key) && $key === count($chunksSequential);. i understand that tabs and spaces are different. but practically, one looks like you'd expect, and the other looks really bad. so \u00af\\_(\u30c4)_/\u00af . I know it's completely arbitrary, and the linter didn't even complain, but for a multiline return I prefer to wrap it in parens (as if it were a multi line array). . php\nreturn (\n    AbstractMatcher::startsWith($input, $var) &&\n    // also check that we do not suggest invoking a super method(__construct, __wakeup, \u2026)\n    !AbstractMatcher::startsWith('__', $var)\n);. you can't use empty with strings in PHP.\nphp\nempty(\"0\")\n\u0ca0_\u0ca0 . :+1:. this is method_argument_space, right? is that the one we disabled because it prevents lining up arguments on consecutive lines?. :+1:. I did think about this when cleaning this up. I'm not sure we do. handleError should only handle errors during eval (or as close to it as possible). If we put it in a finally, it'll handle errors in the flush/clean, as well as errors in setting scope variables. We could narrow it down to just handling errors in eval and the ob_end_flush, which is probably good enough\u2026\n```diff\ndiff --git a/src/Psy/ExecutionClosure.php b/src/Psy/ExecutionClosure.php\nindex 7dfd7eb..5e57d12 100644\n--- a/src/Psy/ExecutionClosure.php\n+++ b/src/Psy/ExecutionClosure.php\n@@ -32,30 +32,20 @@ class ExecutionClosure\n             // evaluate the current code buffer\n             ob_start([$__psysh__, 'writeStdout'], 1);\n\n-\n                 set_error_handler([$psysh, 'handleError']);\n                 $_ = eval($psysh->onExecute($psysh->flushCode() ?: ExecutionClosure::NOOP_INPUT));\n-                restore_error_handler();\n\n// Has to be done before the finally or it'll get cleaned rather than flushed.\n                 ob_end_flush();\n-\n$psysh->setScopeVariables(get_defined_vars());\n} catch (\\Throwable $_e) {\n} finally {\n                 restore_error_handler();\n                 if (ob_get_level() > 0) {\n                     ob_end_clean();\n                 }\n-\nthrow $_e;\n} catch (\\Exception $_e) {\nrestore_error_handler();\nif (ob_get_level() > 0) {\nob_end_clean();\n\n}\n\n\nthrow $_e;\n             }\n\n\n$psysh->setScopeVariables(get_defined_vars());\n+\n             return $_;\n         };\n ```\n\n\n... but it's all a moot point because finally is PHP 5.5+ and this version of PsySH is still targeting >= 5.4 :(. Yeah, I guess if one of the last few lines errored, it'll call it twice. Fixing.. Done. Thanks for catching this.. i think this one is supposed to be Psy\\Exception\\ErrorException, so we're missing a use statement at the top, not a slash here.. this should be @param string $var Variable name. see, this is why i don't document tests :P . please use camelcase for variable names :). this is a super scary clean script \ud83d\ude2c . you didn't add it to composer.json \ud83d\ude1b . This does a few things that aren't captured in the current makefile:\n\nuses a separate composer root, to ensure that the vendor directory is clean (and to build without screwing with the user's current vendor directory)\nprefers stable, doesn't install dev dependencies\nuses an optimized autoloader and classmap-authoritative to put more of the burden of autoloading on build time rather than runtime. This is the part that builds the package for releases. We shouldn't delete it until we have a replacement.. this isn't used?. if the lock file is outdated, this doesn't work. it needs to run composer update.. Not only does this blow away uncommitted changes (without asking), but it does it while ignoring local and global git excludes. So even if your git status doesn't show anything dirty, it will delete things you explicitly excluded.\n\nWe should be explicit about what we make dirty, and explicit about cleaning them. This is why the current build always builds everything into build/ and installs composer dependencies needed for build in build-vendor/. Then we can blow those two things away, and ignore everything else.. 1 is what makes it so we can run composer update without messing with the user's versions or even worrying about them at all. It uses build-vendor/ to install a fresh set of dependencies, as up-to-date as dependency hell will allow :). I mean this is what builds the tarballs. We need this for releases. Makefile would be a great place for it.. The reason for the previous code was to rename all the phars on the way in to just be psysh. Unfortunately the options to do this aren\u2019t portable, hence the \u201cif BSD\u201d business. . working dir copypasta. working dir copypasta. we can leave off the php version check higher in the package script, since we're packing all at once.. let's keep the existing psysh-${PKG_VERSION}*.tar.gz naming pattern.. hoa/console is a dev dependency because tests :) . let's not copy the composer.lock file over. the current installed state shouldn't have any impact on the built phars.. I think I tried building on 7.2, 7.1 and 7.0, and the one that worked most consistently across PHP versions was 7.0. Let's keep that, for now, and possibly bump it later.. Yeah, I can see that. But you could also add a new command down at the bottom of the file, and never thing about adding .PHONY because none of the targets down there have it :) \nI feel like having cleaner command definitions outweighs downsides.\nI did just move the .PHONY and .DEFAULT_GOAL next to the list of commands, since that's what they're used for. That is probably a good balance?. This one is incorrect; the method returns either Table or TableHelper.. was there a box version change that this happened in? should we bump our composer.json to reflect it?. if this means \"things that shouldn't be renamed\", then Psy\\sh, Psy\\debug, and Psy\\info belong in this list as well.. Until the next time the lock file is updated ;) . We're using the system-installed PHPUnit on CI. I'm pretty sure there's no one version of PHPUnit that can work on all the versions of PHP we currently test, so using composer bin there is a bit problematic.\nUnfortunately, the Travis system-installed PHPUnit is outdated on PHP 5.5, apparently, so the build is failing.. Yeah, makes sense.. ",
    "navidnahidi": "Seems all three are the same file 'test3.php'\nNew file:\ncat test3.php \n<?php\nvar_dump(php_sapi_name(), basename(FILE), basename($_SERVER['argv'][0]), basename(realpath($_SERVER['argv'][0])));\nrequire_once './bin/psysh';\necho \"before\\n\";\n\\Psy\\Shell::debug();\necho \"after\\n\";\nScreenshot:\n\n. Added an echo before the require statement to verify it's the require statement:\n\n. Oh my bad, sorry about that.  Here you go:\n\n. Was wondering why it wasn't binary.  Now it makes perfect sense.  Yes documentation would help a lot, seems like a really useful and powerful tool.  Thanks!\n. HIt me up if I can help with anything though.\n. ",
    "scribu": "Works fine now. Thanks!\n. Fix confirmed; thanks.\n. > On a somewhat related note: how would you feel if PsySH pinged GitHub when it first started up to check whether there's an update?\nI would be surprised, in a rather bad way. It makes sense for composer to do that, since it deals with downloading packages, but not a console tool like Psysh.\n. > And since there's no composer equivalent to global package installation\nYes, there is: composer global\n. It's not in the changelog yet: https://github.com/composer/composer/pull/2172\n. Yes, I was also talking about the update notice.\nOne of the main benefits of a REPL is that you can quickly run some code with it.\nSo, making an HTTP request on startup would be quite annoying, because it would significantly increase the delay until I can do what I want to do: test some code snippet.\n. > But if you have pcntl enabled, I could use a background fork :)\nAnd show the update notice on exit. Fine.\nWhat if I don't have the cURL extension installed? Are you going to use a library like Requests, just for this?\n. One last thing: what if I'm perfectly happy with the version I currently have installed and don't want to receive update notifications, ever? How can I disable them?\n. @nateabele I'm trying to make a larger point: that this adds a whole layer of complexity, for little benefit.\n. > since when is an HTTP request such a layer of complexity?\nSince PHP.\n. Oh, I forgot that there already is a config file.\n. ",
    "Pythagory": "Sweet! :smile: \n. ",
    "ramondelafuente": "That looks pretty awesome... \nI was wondering why there where separate commands in the first place, but looking at the internals it did seem justified (and it made adding my own command quite straightforward).\nBecause this is a single monolithic command, a concern would also be with the vaidation-error thrown on \"arguments that don't make sense\".  You'd have to revisit all options when adding new arguments in the future... (like --category, which does not make sense without -c). But maybe all the bases are already covered with \"ls\", I can't think of anything else to list :-)\nOh, and can --category get -C as a shortcut?\n```\n\n\n\nls -cC xhprof\n```\n\n\n\nAgain: pretty awsome stuff... \n. I'll clean that up a little first, but sure. Going to be after work though :)\n. I actually ended up using the configuration you described for super-ls.\nShould I follow a coding standard for this? I usually assume PSR-2  (and still manage to get everything wrong), but PHPCS didn't like the command definitions. I left those in place like you wrote the other ls- commands.\n. Yeah I saw Phil Sturgeon's tweet about it recently - and we've hit that CS \"issue\" with Silex (closures as arguments) ourselves.\n. :+1: Good job!\n. I might be mis-interpreting something, but the Shell() class has a getSeverity() method that returns warning or error - but it's never suppressed.\nAlso, the ShellTest has a testHandlingErrors method that sets error_reporting to & ~E_USER_NOTICE and asserts this:\n$this->assertContains('PHP error:', $streamContents);\n$this->assertContains('wheee',      $streamContents);\n$this->assertContains('line 13',    $streamContents);\nwhile the testNotHandlingErrors throws an Exception.\nThat led me to believe that it's not possible to suppress the output of E_USER_NOTICE.\n. It does. :+1: (and some more :+1:  :+1:  :+1:  for writing the whole thing within hours of the issue) \n. Is that a Symfony2 coding standard? It's not a PSR-2 requirement right?\n(although I agree I still managed to mess this up by being inconsistent with the blank lines)\n. ",
    "hason": "Rebased.\n. The same request in symfony/symfony#10094 and experimental implementation for the Tracy nette/tracy@59d9c81 - see in action http://vimeo.com/72138480\n. We should use https://github.com/hoaproject/Console#readline\n. This is standard behaviour. The function debug_backtrace returns an empty array in top level http://3v4l.org/L9Dbc\n. @marcioAlmada :+1:\n. The purpose of this PR was to solve:\n1. an error message in PHP: PHP Notice:  Undefined offset: 3 in /psysh/src/Psy/Command/WhereamiCommand.php on line 75\n2. error messages in PHPStorm: Undefined variable 'file' and Undefined variable 'line'\n. Fixed.\n. Yes, you are right.\n. Yes, because $file and $line variables are not declared for IDE (magic).\n. @bobthecow I don't see the function list.\n. ",
    "bjori": "There is no standard way of checking for deprecated properties no., its not a language feature. \n-Hannes\n. No.. deprecating properties isn't a language feature.\nWe do it in our property handler (imagine __get handler) , just like we have our own implementation of read-only properties.\nPHP doesn't have any way of setting flags on properties (from userland), so until it is possible to mark properties read-only or deprecated then there isn't anyway of extracting this info from Reflection\n. ",
    "jmikola": "@bjori: Are property accessors deprecated in the same manner as methods/functions? If so, perhaps isDeprecated() should exist in the ReflectionProperty API. I wouldn't mind tackling that as a core contribution :)\n. ",
    "isimmons": "php -i shows HOMEPATH and sure enough when I echo $_SERVER['HOMEPATH'] I get Users/myusername.\nApparently windows splits HOME up into HOMEDRIVE and HOMEPATH.\nI'm using cmd.exe through conemu. \nFor colors, thanks for the tip. I haven't actually picked a color theme so it's what ever is default. I'll look into that and it will probably help.\nYeah actually my transparency was just set to high. Changed to solorized and it was worse but then adjusted transparency and it's all good. Thanks\n. ok I replaced the existing phar with that one. Then ran psysh. It did not create a .psysh directory in homepath and still used the existing one in C:\\ for docs. \nMoving the one at C:\\ to my home directory causes message PHP manual not found\n. Oh, sorry. Then I added the changes you made in the commit and it works :-)\n. Yeah sorry I must have done something wrong. Just deleted the .psysh directories and ran it again.\nWith the new phar in place it just created the .pshsh directory on first run in my home directory.\nThen dropping in the manual and running doc is working.\nSo all is good\n. @bobthecow  Just saw that last comment. I'll play around with it today and let ya know. So far ls --help works :-) \n. ",
    "sailorsteve": "I had the same issue as @isimmons of being unable to read the blue text on a dark background on Windows. I am using Git Bash inside of Console2. For those who may be experiencing the same thing, Console2 makes it easy to map the console colors. Go to Edit -> Settings..., select Console and remap blue to something lighter. All is now good!\n. ",
    "marcioAlmada": "\nIt ends up using the next one (LibeditTransient) which works just fine. But what doesn't make sense is that which unvis is doing anything besides returning null or a path.\n\nExactly! I'm running psysh with Fedora OS, by the way. At first I thought it had something to do with my phpbrew installation, but it happens with system wide PHP too.\nI was using ubuntu a month ago and I don't remember to see this warning. Maybe it happens only with Fedora (19) or might have started after some recent update.\n. which unvis 2>/dev/null\nOutput is suppressed.\nwhich unvis 2>/dev/null || echo \"nope\"\nAs expected, string \"nope\" is echoed.\n. thanks!\n. You've just won the internet, sir! What an interesting project you have here.\nNo problem, I'll build from develop while I wait for an update ;)\n. Thank you too ;)\n. > If you can come up with a way to do that without throwing exceptions, I'm happy to hear it\nThat's what I'm trying to figure out right now. Maybe we could avoid errors-to-exception conversion by registering an error handler that simply pushes errors into a stack accessible by the Shell class.\nOr maybe add a flag to disable error handling at all, for the \"special\" cases.\n. ",
    "nateabele": "Brilliant!\n. I think what @bobthecow explained has to do with checking and notifying the user, not with silently auto-updating behind the scenes. For a tool that's still under heavy development, it makes perfect sense.\n. My, aren't we particular...\n. > For a tool that's still under heavy development, it makes perfect sense.\nNot saying it needs to be a permanent thing, and since when is an HTTP request such a layer of complexity?\n. @CMCDragonkai You're more than welcome to evaluate the two and articulate any features of Boris that you miss in PsySH, and we can talk about those.\n. Internet: ready your opinion engine...\n. Same. Although a stylized version of the >>> against a little black terminal icon a la OSX might be nice. Too bad there's no such thing as an Open Source designer. ;-)\n. I had this thought cross my mind once, but then I immediately realized it was fraught with peril.\n. Yeah: https://github.com/bobthecow/psysh/tree/runkit\nI'll poke around and make sure that's up-to-date with my local. It still has a number of issues that need to be worked out, not the least of which is that runkit is not exactly, completely... uh, maintained.\n. This seems promising: https://github.com/krakjoe/uopz\n\nThe following opcodes can be overloaded by uopz:\n[...]\n- ZEND_FETCH_CLASS\n. Okay, I rebased my local changes and pushed to the branch, in case someone wants to use it as a point of reference. The rebase was a little hairy, so at least one thing is probably rong.\n. :wink:\n. \n",
    "ju1ius": "Using psysh directly from the shell and from Psy\\Shell::debug yields the same result.\n```\n\n\n\n$p = ${'psysh'}\n=>  {}\nls -alp $p\n\n\n\nClass Properties:\n  $cleaner      \n  $code         false\n  $codeBuffer   []\n  $config       \n  $context      \n  $includes     []\n  $inputBuffer  null\n  $loop         \n  $output       \n  $readline     \n``\n. A more complete description of the issue:\nI'm writing a Packrat parser that has anapply_rulemethod which is called recursively for each rule of the grammar.\nAt the end of the method, I callPsy\\Shell::debug(get_defined_vars());to inspect the current state of the parser.\nWhen I run the script, psysh is called on first invocation ofapply_rule`.\nI  then inspect a few variables, and the history is updated in a normal way (lines are appended)\nThen press Ctrl-D to jump to next invocation, and inspect variables again. Then the history doubles in size.\nAs far as I understand, a new subshell is created each time I press Ctrl-D and the code reaches the next Psy\\Shell::debug call. So the problem might be that the subshell and the parent shell both write their history to the history file at the same time.\n. Here is a little script to illustrate the problem:\n``` php\n<?php\nrequire_once DIR.'/vendor/autoload.php';\n$histfile = '/home/ju1ius/.psysh/history';\nwhile(true) {\n    $histsize = filesize($histfile);\n    \\Psy\\Shell::debug(get_defined_vars());\n    // print $histsize in psysh then press Ctrl-D\n    // rinse, repeat, watch it grow\n}\n```\n. Oh an by the way I rebased the commits on your master branch.\n. Hurray !\n. > Adding a default history size limit isn't a problem, but I think it should be much bigger than 1024.\nWell, you decide. For now it defaults to 0, which means unlimited history.\n. > Adding a default history size limit isn't a problem, but I think it should be much bigger than 1024.\nThinking about it, if the default size is that big, then the hist command should default to something like hist --tail 10, so that you don't clutter your terminal with > 250k lines when you forget an option.\n. why not the following ? \nphp\nif (function_exists('readline') && !function_exists('readline_list_history'))\n. This Python module allows us to access strvis/strunvis from python, so we avoid the pain of writing/compiling dummy C programs.\nRequires Python 3\n. Mmmmh, strange, the Travis builds fail on this one, but on my box, all test pass...\nDo you have the same issue ?\n. Nope. As of Python 3 all *.pyc files are stored under a __pycache__ directory in the script's / module's directory.\nSo ignoring just the __pycache__ directory is enough.\n. Yep\n. Does this need to be reverted ?\n. ",
    "jamesshannon": "Hi.\nThanks for the suggestions. After my post, I was playing with the rc.php idea, but running into issues as $config didn't have anything interesting. I had forgotten about $_SERVER.\nI ended up cheating and including from within the rc.php. I had to set a bunch of defines and do other stuff, anyways.\nI based it off of the $_SERVER[\"PWD'] value, and made it greedy (so, like git, you can run it in /x/y/z, and it'll work up the path to find that /x is valid root).\nI'm really liking this.\n. ",
    "benglass": "OS: OS X 10.6.8\nTerminal App: iTerm 2 (also happens with regular old Terminal)\nPHP Version: 5.3.17\nShell: zsh (it also happens with bash)\nNot sure how to tell if I have readine/libedit enabled.\n. No, up does not show the last command.\nI just ssh'd into a centos server and was able to reproduce the same issue so perhaps its related to my terminal (although it happens in both terminal and iterm2)\n. You are probably right about that\n. Did a little digging around in the code and its a result of using $this inside of an anonymous function before php 5.4.0\nI know I know I should update php 5.3 but it would be nice to be able to use this on servers where that is not an option. Also the composer.json file indicates php 5.3.0 is required.\nAny idea how common this is in the code? I'd be willing to submit a PR to refactor it if you are amenable.\n. Awesome thanks.\n. I just looked through all the files with anonymous functions and the word this in them and that was the only place I could find the issue.\n. ",
    "avindra": "Can confirm that installing the readline extension fixes the issue. It is infinitely better now.\n@bobthecow: Can you include a note on the main website, or even better, in the command line itself if readline is not installed? It's not clear that readline is really needed for proper functionality.\n. That was my thought too. In any case, it is not documented anywhere.\nhttp://psysh.org/\nThere is a slight mention of potential issues in the \"optional\" configuration section, but that's about it.\nUnless there is another documentation site I'm not aware of.\n. Thanks for looking into it... unfortunately, I downloaded the new release of psysh and am still seeing the error:\nFatal error: \"Scalar\\String\" cannot be used as a type declaration in phar:///app/php/bin/psysh/vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php on line 86\n. Hm, I just tried compiling the phar with /app/psysh/bin# ./compile. It put out the phar file, but when I try to use it I see :\n```\n./psysh.phar\nFatal error: \"string\" cannot be used as a class name in phar:///app/psysh/bin/psysh.phar/src/Psy/CodeCleaner/MagicConstantsPass.php on line 19\n```\nHere is the php version:\nphp -v\nPHP 7.0.0-dev (cli) (built: Mar 26 2015 19:19:40)\nCopyright (c) 1997-2015 The PHP Group\nZend Engine v3.0.0-dev, Copyright (c) 1998-2015 Zend Technologies\nI am on the master branch.\n. D'oh! Checking out develop works:\n```\n:/app/psysh/bin# ./psysh.phar\nPsy Shell v0.4.4 (PHP 7.0.0-dev \u2014 cli) by Justin Hileman\n\n\n\n2 + 2;\n=> 4\n```\n\n\n\nThanks guys.\n. ",
    "gonzalo123": "Django has one cool feature that I think we can create with psysh. In error pages ther's an interctive console. The same than psysh but in the browser instead of server's console.\nI think if instead of read/write from stdin, if we use a websocket connection (for example with Rachet) we can move the interactive console to the browser. Maybe I need to think about it a little bit more, but it should be possible.\n. ",
    "kor3k": "@bobthecow please can you tell exactly how to make it work?  \ni have a simple php file with just autoloading and \\Psy\\Shell::debug call.\nbut when i run the php built-in cli server and request that file via http, the cli starts indefinitely flooding with errors:\n[Thu Mar 06 17:02:25 2014] PHP Notice:  Use of undefined constant STDIN - assumed 'STDIN' in C:\\wamp\\www\\ratchet\\vendor\\psy\\psysh\\src\\Psy\\Readline\\Transient.php on line 102\n[Thu Mar 06 17:02:25 2014] PHP Warning:  fgets() expects parameter 1 to be resource, string given in C:\\wamp\\www\\ratchet\\vendor\\psy\\psysh\\src\\Psy\\Readline\\Transient.php on line 102\n. @bobthecow yes, in cli it works like a charm.  php version is 5.5.10-win64-ts\n. @bobthecow  https://github.com/bobthecow/psysh/issues/54\n. @bobthecow it works now, thank you a lot.\nabout the readline/libedit, i am not sure if that's even possible on windows. quoting this php manual comment:\n\nFinally, if you're running on Windows, you're probably screwed. From what I'm seeing in other comments here, you don't have readline, and without readline there is no interactive shell.\n\nmaybe getting the php's source and compiling it with readline/libedit could work, but that is kinda overkill.\nnot everyone is able/willing to install readline, so imho psysh should not hard-depend on it.\n. ",
    "CMCDragonkai": "One way would be making psysh launch a simple TCP server just listening of any random port. Then as part of Monolog, you can write a psysh handler that pipes the logs to psysh, allowing you to see the logs in real time but also not affecting your application (unlike Tracy). Kind of like how Firebug currently works, but in this case, no need for a browser. A simple Curl/HTTPie is good enough to trigger requests.\n. Currently when I double tap \"tab\", this tells me the current files at the current working directory. This is actually pretty cool. (It allows to me see what I need to do if I'm working with the filesystem, it's all a new bash terminal for me as I'm more familiar with PHP than Bash). But I also want \"tab\" to represent 4 spaces. This could be an option on the rc.php. Currently I have to hit the spacebar multiple times to get nested functions. So perhaps tab can be used for indentation, for file completion and function completion in different contexts?\n. Are you able to elaborate in what way is it better?\n. It couldn't be the LANG, because I echoed it and it came back as:\nen_GB.UTF-8\n. Yep! It does.\n. (CMCDragonkai@dragoon-surface)[1157] ~ % php -r \"echo '\u2713';\"\n\u2713%\nFor some reason, there's always a % after anything I echo via PHP. Even just a simple string.\n. ```\n(CMCDragonkai@dragoon-surface)[1162] ~ % nano test.php\n(CMCDragonkai@dragoon-surface)[1163] ~ % php test.php\n\u2713%\n(CMCDragonkai@dragoon-surface)[1164] ~ % cat test.php\n<?php\necho '\u2713';\n.\n(CMCDragonkai@dragoon-surface)[1165] ~ % php -r 'echo \"\u2713\\n\";'\n\u2713\n```\nYep the \\n removes the %.\n. Oh! The box mark is the percentage sign!\n```\nPsy Shell v0.1.8 (PHP 5.5.11 \u2014 cli) by Justin Hileman\n\n\n\necho \"\u2713\\n\";\n\u2713\n=> null\n. Yea the box is return character, but it doesn't look like a return character that I see on ubuntu, it's just a crossed box.\n.\necho \"\u2713\";\n\u2713\u23ce\n=> null\n```\n. Yep it's the font. It shows it as a box, but when I copy it into github it shows the return character. The font must not have the return character.\n. Ok we've solved the mystery. It's the font. I was using Adobe Source Code Pro. Thanks for the help.\n. Windows version of the font...? I'll ask on that place?\n. Hmm, I'm not sure if it's the font or something else, but it's not a big deal at the moment. Because I just tested by copying the raw return character into the terminal and tried echoing it, and it worked:\n\n\n\n(CMCDragonkai@dragoon-surface)[1176] ~ % php -r \"echo '\u2713\u23ce';\"\n\u2713\u23ce%\nBut of course the psysh still gives a box character. Also when I select highlight the return character, it turns into a box. Too many dependencies!\n. I'll try later and come back to you.\n. Should that wiki be suggesting .user.ini not .php.ini?. ",
    "ghost": "@bobthecow It works with the built-in web server, however when hitting ctrl-d the request doesn't continue (the browser is still waiting for answer from the server). When launched from the command line it works as expected (the PHP script is resumed when hitting ctrl-d)\n. Thanks for the extract. You should consider add it as a Pro Tip\u2122 on psysh.org.\n. If it can be useful, I realized that when I kill the web server with ctrl-c the following response is sent to the client (browser)\n```\nHTTP/1.1 200 OK\nHost: localhost:8000\nConnection: close\nX-Powered-By: PHP/5.5.9-1ubuntu4\nCache-Control: no-cache\nDate: Wed, 23 Apr 2014 09:12:34 GMT\nContent-Type: application/json\nX-Debug-Token: 9f24e5\n{\"name\":\"test\"}\n```\nThe {\"name\":\"test\"} is the Json response created by my app.\nIf I put many \\Psy\\Shell::debug(get_defined_vars()); in rows, the PHP execution is not resumed after quitting the first shell. After killing the web server, I hit the second and subsequent psysh  shell the way I would expect (quit one shell with ctrl+d, the other one appear alone)\nEach time I quit a shell the client (I used curl) received:\nHTTP/1.1 200 OK\nHost: localhost:8000\nConnection: close\nX-Powered-By: PHP/5.5.9-1ubuntu4\nContent-type: text/html\n. It's late, but I encountered this problem and created a package for it. You can find it here: https://github.com/mitghi/php5\n. ",
    "Markcial": "Hi, i saw an open issue on the symfony component for this, would be nice to have a web debugger with stack trace. Is there any PR started on this, should i start from scratch? is there anyone who had tried something with that? thanks\n. Sorry for the .gitignore commit, will remember to not buggy other repos :), glad to help in such a nice tool! :smiley: \n. a little teaser : \n\nthe downsides, some more dependencies, looking if they are really necessary.\n. I had in fact a experiment that worked, but needs heavy refactor of the shell class, in order to have the experiment working the shell needs a public api of the eval method, so a websocket server is listening for incoming connections and preserve the context. I will dig back in time in my git history, maybe the experiment is still there, ping you back in a couple of days.\n. I know that it would be a killer feature. I heavily tried to get it working successfully, but the inner design of PHP makes really hard to share states and object representations between PHP threads. And PHP is meant to be used as a single shot worker, not a daemon serving data.\nThe feature would work for simple variables and states that can be easily serialized in json, but not for complex objects that might include things like sockets, resources, closures, and so on.\nFor unserializable objects this feature would be a complete dead end, i am sorry about this.\nI will try to post the source of the samples, but i will have to start again from scratch because seems that i  lost the source on some backup.\n. I appreciate the interest on this feature but currently i have a lot of code waiting for review that would imply subsequent newer features, the code completion currently needs some eval of the current object for example, currently the PySH shell doesn't haves a somewhat public api for evaluating objects. The interactive shell via browser needs too that public api for evaluating.\nThere is a lot of stuff going on, and before getting this thing done, those features would need get to master, not all, but the ones that imply a non forking process for object preservation instead of serialization and the other one that exposes the shell execution to a public method.\nNon forking process loop => https://github.com/bobthecow/psysh/pull/163\nPublic api for the execute method in the shell => https://github.com/bobthecow/psysh/pull/138\nWhat i mean, if you really want a feature like that, start doing code reviews of the currently pending PR i did long time ago, and maybe we can do a fresh start via a more extensible PySH shell.\n/cc @bobthecow \n. Yeah i thought about adding a method for the loop class, but i thought it would be a little bit overkill. but now that i know that you agree about this I will do the evaluate function on the loop class and use it inside the command. Just give me a couple of days because the testing and stuff. Thanks\n. Another way to solve this could be making a public api to the beforeLoop and the afterLoop, this way the commands will have access to add their own routines, for example adding a tick with the time, or maybe benchmarking memory usage, etc\n. You are completely right, you know the psysh codebase better than me and i was not thinking on the downsides. Netx week i will push the experiment with the subshell and the evaluate method. I will try to add some testing too for that evaluate method.\n. Ping! do we have any news about this ticket? i know that the loop has a heavy rewrite that needs good review, but the new loop maybe could help me with this ticket => https://github.com/bobthecow/psysh/issues/154 i have a functional experiment, but i think that the current quirky code i ended in my experiment, would be a lot more cleaner with the splitted functions made in this loop.\n. I supposed so, then if you don't mind i will do the quirky PR with the CancellableForkingLoop as a different class so anyone can test it without loosing the normal ForkingLoop linking here with a note explaining there is a candidate for the shell loop refactor, so anyone whom might be interested can review and have a peek to this slightly hidden piece of code in the non-related issue name.\n. I am waiting for a code review. Sorry\n. I added a phpunit test case with a simple test, so you have a quickstart for testing the tabcompletion class, i have runned out of time for today, but maybe for next week i will add some of the ideas you submitted in the thread\n. I am sorry for the failed tests, but i don't know what does the PHPCS means with that error code, i will dig a little bit more, but if you have any input about this ping me here so i can solve the failed tests, thanks\n. Hi Justin, seems to be that there is an open discussion about the conditional that breaks the PSR-2 specs and makes the CodeSniffer warn about an error https://github.com/squizlabs/PHP_CodeSniffer/pull/188 the issue seems to be closed and merged, so maybe an update of the library will fix this.\n. Unfortunatelly i tried the latest version of CodeSniffer (the one you were already using) and this patch is too recent to be applied, it might be avaliable for the next release. I found a workaround for that and is assigning a boolean for the multiline condition and then put that boolean in the enclosed condition, if you wan't the tests to pass until CS is updated i can rewrite the condition on that file so the TravisBot can finally mark the tests as succesful\n. Glad you liked it, i will work a little bit more on this through the weekend, i know that currently all the code is a little bit messy and hacky, just fiddling. I expect to have cleaned the mess and write tests too for the next weekend.\n. I am still working on it, i found that the readline has some quirks with the namespaces, if the user inputs a namespaced class like Foo\\Bar\\Spam:: the input only receives the non namespaced part, Spam:: it adds another bit of complexity but i will deal with it. There is another thing that will be a nice to have, reflect the classes or objects to detect if they accept params or not, in case they accept params autocomplete with open parenthesis and add the coma after the param. So it will take a little bit of time too. I will keep yo up to date when i had completed some more code and tests.\n. What do you mean with \"what's your take on the current status\". I am a non native english speaker sorry. Do you want my opinion on your thoughts or my status on the code? If you meant my opinion, i think that you are completelly right, the autocompleter has no means if you cannot add your own completers because of personallized code like symfony, code igniter, etcetera. But if the autocompleter needs to be done this way i need to spend a little bit more time, because we will need some interfaces for contractual reasons when the end users write their own matchers, and maybe we need to allow them to add the rulers for better matching capabilities. About the context, you are right too, my bad, i must had used the contextaware pattern, i will rewrite the matchers for that and use a factory, so the autocompleter can get their dependencies.  BTW i found a weird behaviour in readline with the backslash, i need to dig a bit about this. With all that pending stuff you have commented here, i might be done in a week or two, depending on my spare time.\n. I agree, expect a PR in a couple of hours, i did some rewrite and made it configurable\n. basic functionality is here, but anyways needs more testing, still need to reflect the methods looking if parameters are needed, add more complex tests, etcetera, but basic completion works, i will keep adding more functionalities and explain in a brief doc how to add your own matchers.\n. maybe some docs, but for eveything else i think that it has decent features for basic tab completion.\n. I am :+1:  with the license. About the @author tag, the details of my name and email so anyone needing something can ping me is fine. Marc Garcia <markcial@gmail.com>\n. Cheers!!! :beers:  congratulations on the new feature!! :smiley:\n. its a good point, after 3 hours of looking at the debug_backtrace I had suddenly felt really sad with the PHP functionalities, but i came into this, as a informational note the PR is here, but if you reject it won't be a shame and I will completely understand.\n. wish i could, i am not as badass writing extensions as nikic. Maybe in the long run. :)\n. Good news everyone, i found a library for php extensions, is possible to have a shorter syntax without troubles only installing the module, some screenshots will follow\n\n\nThe library used is PHP-CPP and it could be easily compiled, but it is a whole new level of dependencies, if you are interested i can open a whole new repository for the module and maybe some helper functions for psysh.\n. Cool!! i like that too, i made a little experiment and it succeeded!\n\nI will open a PR tomorrow and post the code, i will need to test how it works without composer installed and install if it is missing.\n. Current development of this issue here https://github.com/bobthecow/psysh/pull/152\n. The PR related to this feature is ready, @bobthecow decides when to ship it, in the meanwhile feel free to review the PR here => https://github.com/bobthecow/psysh/pull/152\n. The #121 is still in a very premature state and it depends on a separate thread with a psysh server that has a execute method that runs some code and evaluates in return preserving the context, I was trying to use as few libraries as possible so the vendor folder doesn't gets all bluffed, anyways i will post the code i have until the moment.\nAbout the current issue, the libraries are created inside the temporary folder of each system, a call made by the sys_get_temp_dir function. If you write some tests would be very nice from you, I made the PR in a hurry without testing i am sorry about that.\nAnyways there is a little pending point i have to fix yet, the composer command still needs to have the composer file path, that might be a optional parameter in the configuration that if it is missing, then it must download the composer and BTW it will also need docs that will help the psysh user to not avoid this point if he already has composer installed. For that last step let me find some time to fix that.\nAnd finally one thing that i am not 100% sure about this PR, maybe this PR will ship as a separated plugin, there is a work in progress for that, all that information about this is here => https://github.com/bobthecow/psysh/issues/166\n. Yes, it can be added as a dependency, downloaded as a phar file, or added via config parameter set by the plugin, whatever causes less trouble.\n. LOL, that is true too :D\n. Might be related to this, https://bugs.launchpad.net/ubuntu/+source/libedit/+bug/816758, it happens to me too in my docker images based on debian or ubuntu, but not on my Mac\n. About this comment https://github.com/bobthecow/psysh/pull/152#issuecomment-74602341, it would make sense if we has a base library for sandbox, i tried to make it all encapsed on a single command file. But if you think that it is necessary to have a wider range of use for the functions it can be moved as a service.\nAnd about this one, https://github.com/bobthecow/psysh/pull/152#issuecomment-74602977 i will try to make some experiments, because the proc_open way i solved the composer related thingies maybe is not the best solution. Because of different systems like windows, and because the parameters as you said for sandbox. I will post the updated PR if i get with something interesting.\n. Hi there! i finally managed to add a lot more potential to the composer shell, i include the phar file and create a composer application that receives the composer calls, in other words, right now the composer shell is freaking awesome, it accepts completely all the syntax that it uses via CLI, i still have to create the methods for, sandbox require and sandbox remove, but the version we have right now is pretty decent IMHO. :sunglasses: \n. @bobthecow Yes you can specify the path to the phar file, if it is not specified it downloads the phar locally via a process through php, which might surely be installed because of all the code is made in php obviously.\n@Taluu The CLI has nothing to do with this, i include the phar as a library, so i am not 100% sure that setting the phar path via the CLI call will affect to the command.\nAbout the composer dependencies, if the end user is concerned about this, he can set the phar path in the config as you said, or maybe like @Taluu said, include the library in the composer.json file. but having it as a dependency for the library only keeps the library up to date whenever the user runs update on the psysh project, but if the user sets the configuration it will use the selfupdated phar, well so far, i guess that a configured path to the phar might be ok, my point.\n. maybe the composer folks can provide a way to do a \"discovery mode\" for the composer.phar, so 3rd parties like psysh could ask something like : composer phar-location, this way the calls will be pretty straightforward.\n. @bobthecow Ok  to the process dependency from symfony or should i rollback to the proc_open solution?\n. i rolled back to the previous command without the symfony process dependency.\n. the proc_open is supposed to be a little help, not a core feature. We do not rely on it that heavily.\n. if you already have it installed, which might be the 90% of the people using it, you only need to set the parameter in the config and it will use that phar instead.\n. Not offended, but saying thanks is nicer than the comments before. :smiley: \n. Experiment in development here => https://github.com/bobthecow/psysh/pull/163\n. It happened to me on some functions when using the shell : https://github.com/bobthecow/psysh/issues/153\n. do we have a way to have the feedback on long running operations but without losing the current benefits ? I'd like to have the newlines when i do single line operations, but i would like to have the feedback on expensive operations run in the shell too.\n. oh nice! great job!\n. I really appreciate the effort, in our team we use the shell not only for testing but for administrative techie tasks, so this is a really nice feature for us, thanks a lot!\n. This PR might seem unrelated https://github.com/bobthecow/psysh/pull/138 but it has a loop refactor proposal that could involve this forking loop, linked here just as a side not for any visitor in this thread.\n. Ok, thanks for the hint, don't waste your time on that. I will check for that later and write a test covering the case.\n. done, i will close this PR then\n. douh! didn't knew it, well, close this PR then :laughing: \n. nice! :+1: \n. yeah \u00af_(\u30c4)_/\u00af\n. xkcd, classy :D\n. well played xD\n. With this refactor the forking loop keeps variables in scope without sending serialized variables over the pipes, seen here => https://github.com/bobthecow/psysh/issues/106.\nThe idea with this forking loop is to keep the main process open and spawn new ones that die afterwards, instead of spawning a new child, passing the vars, kill the parent etcetera.\n. don't worry, i just do the PR so the latest versions can be available for anyone interested. I know you are busy, take it easy, it's ok really. I'd rather prefer you to do the reviews without the hustle, but thanks for pinging me back about this :D\n. The support for php5.4 has been dropped? why the style CI is asking me to replace the array function calls by the square brackets?\n. ah ok, just a moment then, thanks\n. State of this PR, does it need to cover some more cases? I will write the tests for that. Currently this ForkingLoop does not uses pcntl at all, only uses a single thread and preserves state by catching exceptions and calling again the run method, if you are not confident enough with the pcntless forking loop, i might be able to split it apart to another forking loop, having both of them, the pcntl one and this one, letting the config serve the pcntl by default.\nI guess that having this on master would be nice the public api from the shell opens a lot of possibilities, Expl.: remote debugging with a server querying the public execute method on a cli server with the shell.\nIf you need something that i am able to do, just tell me. Thanks\n. I don't mind splitting the forking loop on two, the cancel can be done on both of them. But when i said if there were some more cases to cover i meant the ones when php dies without way to recover. This way i can add some more tests. And with that maybe some day PHP might not need to fork processes continously and it might be able to deal with the errors gracefully without shutting down. Then the pcntl will not be necessary.\nThe pcntl loop has its owns pros and cons, it can be used without worrying about it to have a fatal error that closes everything but the closures or other non serializable objects are missing when transferring information to the child thread.\nThe loop that doesn't uses pcntl can preserve the context of variables and non serializable objects, but on non recoverable fatal errors it exits blatantly.\nBased on that, my vote is to have both of them and the user choses what he wants, preserve callbacks but without fatal error recovery, or miss the non serializable objects but a rock heavy shell.\nSo if you agree with that, i will split on two forking loops with their own cancellable extends.\n. Yes, there are two loops, but in this PR i did a complete rewrite of both of them.\nFor example, the forking loop i did doesn't uses the pcntl no more:\n``` php\n    protected function replay(Shell $shell, $executionClosure)\n    {\n        try {\n            // get input\n            $shell->getInput();\n        $shell->beforeLoop();\n        $executionClosure($shell);\n        $shell->afterLoop();\n    } catch (BreakException $e) {\n        throw $e;\n    } catch (\\Exception $e) {\n        $shell->resetCodeBuffer();\n        $shell->writeException($e);\n        $this->replay($shell, $executionClosure);\n    }\n}\n\n```\nWith this, whenever the exception is successfully handled the shell goes on with the same context calling the same function (replay) again. Presderving closures, database connections, file resources, etc, but when the php throws a fatal non recoverable error, the loop just stops, the flaw that the pcntl doesn't have. But if you want to use a lot of anonymous functions, file resources or database connections, the pcntl choice brings a little trouble there.\n. Yes, maybe it is for the name that it is confusing. I did a \"recursive\" loop\n. have you tried to do a ls -la $object?\n\n. why? it shows public, private or protected properties; mehods or constants.\n\n. I sincerely don't see where is the trouble, the list command would fit for all of your needs, if you think that the feature needs more completion you are free to collaborate with a PR, but IMHO the list command is enough. Maybe the repo owner is able to help you better with your issue.\n. You can roll your own commands with the configuration, http://psysh.org/#configure you only need to have the psr0 path defined, extend the basecommand class, and then create the new instance in the commands parameter. Anyways, to load commands from a subfolder if they extend  a class might be another option.\n. The ways that came into my mind of registering plugins are; with a base folder that has classes that implements some kind of PluginInterface, with a command with calls like plugin add \"class\" or with the configuration. My two cents here.\n. Well then it depends which layers are explosed publicly, @bobthecow might have a better knowdledge about this. If something cames up i might be able to help a little bit, i will keep an eye open o this thread then.\n. WHOA! that scalated quickly :laughing: \n. Well in briefly i have to say, is a really nice feature to add to the psy, making it really extensible and personallizable, anyways i would recommend some api methods call for disabling some presenters or matchers or commands, i mean, maybe someone develops a plugin and it possibly conflicts with another shipped element, maybe someone want to use a matcher for files and doesnt want to use the default one.\n. Well, totally agree. the main issue with libraries is that there is no perfect fit, so the opinionated/agnosthic pattern is nice for all the different comunities that would want a nice REPL for their environment.\nwith all that said, i am willing to help, so count me in.\n. I am currently working on a couple of experiments, but when i got this experiments in a decent state i might be able to work on a experiment for this ticket, maybe on mid march.\n. Draft open for review here => https://github.com/bobthecow/psysh/pull/171 it has a working sample, simply write :\n\n\\Psy\\Plugin\\DemoPlugin::register();\n$config = \\Psy\\Plugin\\Manager::getConfiguration();\n$shell = new Shell(new Configuration($config));\n$shell->run();\n\n\n. Hi! I am currently fiddling with the code and i am wondering how to set the link to the plugin in a passive but non intrussive way. I tried to code a discovery function but it might not be the best solution. because the plugin manager will need to be called every time, check for vendor packages, decode the installed files etc, maybe a little bit too much.\nBut then digging in the composer docs i found this https://getcomposer.org/doc/articles/scripts.md and @bobthecow already mentioned to use a post install script, so maybe it is the best chance, but after having the post install script as a start point i don't know where to store the \"plugin refs\", maybe a file called \".plugin-registry\" in the root folder? dunno.. i am a little bit stuck, i am pinging here so maybe anyone has a good idea about this.\n. nevermind, i finally understood what the autoload.files was for, i created a package in packagist : https://packagist.org/packages/markcial/psysh-twitter, i fiddled a little bit with the composer.json file and it worked like a charm.\nFollow this steps to reproduce:\n- composer init\n- paste this in the composer.json file:\n  \n  {\n  \"name\": \"meh/whatever\",\n  \"require\": {\n      \"markcial/psysh-twitter\": \"dev-master\",\n      \"psy/psysh\": \"dev-plugin_manager\"\n  },\n  \"repositories\": [\n    {\n      \"type\": \"vcs\",\n      \"url\":  \"git@github.com:Markcial/psysh.git\"\n    }\n  ]\n  }\n  \n- composer install.\n- run vendor/bin/psysh\n- and finally >>> twitter --help\n\n. Wow, so much plugin aware shell! nice :D\n. Great explanation. I agree about the idea of using a environment variable where phar packages can be added. So the plugin registry might be able to check for the phar packages. Then the registry might be able to ask the plugin for a bootstrap method that could return a closure that loads all necessary stuff or a file path for inclusion that might bootstrap instead. This way the plugin knows how to get loaded and delegates to the registry for this task. I will try to pull an example to your registry repository.\n. Well, my idea. I will post it here.\nI was thinking about using two environment variables, so it can be system wide.\n``` php\n$paths = array(\n    \"Psy\\MongodbPlugin\\\" => \"/usr/local/share/psysh/plugins/psysh-mongodb.phar/src\",\n    \"Psy\\AwesomePlugin\\\" => \"~/.local/plugins/awesome-plugin/src\"\n);\n$bootstraps = array(\n    \"Psy\\MongodbPlugin\\Plugin::register\",\n    \"Psy\\AwesomePlugin\\Plugin::register\"\n);\nputenv(\"PSYSH_CLASSPATH=\" . json_encode($paths));\nputenv(\"PSYSH_BOOTSTRAPS=\" . json_encode($bootstraps));\n```\nThen the registry might be able to work over this environment variables.\n``` php\n    public static function bootstrap()\n    {\n        if (!$paths = getenv('PSYSH_CLASSPATH')) {\n            // warn about missing environment variable\n        }\n    $paths = json_decode($paths, true);\n    $loader = new ClassLoader();\n    $loader->addClassMap($paths);\n\n    if (!$bootstraps = getenv('PSYSH_BOOTSTRAPS')) {\n        // warn about missing environment variable\n    }\n    $bootstraps = json_decode($bootstraps, true);\n    foreach ($bootstraps as $bootstrap) {\n        call_user_func($bootstrap);\n    }\n}\n\n```\nIt is only a idea, but configuration files can be fine too, but then you have to check for local files, then global, rewrite over the file, etc. IMHO is a huge mess, but a wide env variable can be worked over on it, loaded, modified and reworked.\nBTW, the pahr itselves could add settings to that environment variable and export it to the system via call to a file or command.\nEDIT\nAfter some little bit of meditation, seems to be that the plugin manager might not have dependencies, but some of the plugins might have some instead. So when the plugins will get loaded will search for its libraries and then throw exceptions for repeated classes, redefinition of functions etc.\nA possible solution could be to use a loader that will not depend on composer, but might be able to understand composer, so if the phar is shipped, it will have the composer.json files or composer.lock, the loader checks for the libraries, if they are not found, download them with the composer command. this way the composer handles dependencies, but will not conflict. Dunno, just some ideas that came through my mind.\n. Sorry, i replied agreeing topics that other ones said, not yours. So it's my fault for not detailing it precisely, my apologies.\nI doesn't mean to reinvent autoloading, just using the composer autoloading out of the phar package. so the dependencies are not held inside the package, and can be updated in a place where the phar package can be able to load this libraries.\nAbout the configuration part, you are right. But then the plugin registry would need one important dependency, psysh itself for its configuration, because registry should be able to know which plugins should be called or not. If i have a global install of psysh-plugin1 that uses cool-lib-v1.0 and a local install of psysh-plugin2 that uses cool-lib-v2.0 which has conflicts with its prior version, you decide to load psysh-plugin2, then the configuration part would look like this : \nphp\nreturn [\n  'registerPlugins' => ['psy/psysh-plugin2']\n];\nregistry would try to load the psr0 paths, and will warn about a library conflict (i suppose, i have not tested but my experience tolds me so). maybe a solution could be if the plugins could be referenced without inclusion, but AFAIK PHP does not work like that.\n. sure, no problem. Maybe today you will have the patch and the upgrades on a separate commits.\n. Are you able to merge until certain commit? I would like to have the PR open so i can do more commits whenever possible, i have a busy week, but maybe for the next week i will be able to solve some of the TODOs still not done.\n. If you don't mind use this commit as merge point https://github.com/Markcial/psysh/commit/442e86b7dcde9a7e09fbf39cf728f064d19855b2 the other one after has a still premature version of a file matcher, i am not convinced yet about pushing it to master, maybe a little bit more later, thanks.\n. Is a work in progress, the code in this feature heavily relies on code subject to change, it will possibly not be the same after some more code iterations.\nAnyways, i will take note about the suggestion and try to remember the reason why i did the token matcher this way, maybe it was not necessary and can be refactored as you are saying, i am currently unable to explain it, i will need some time to grasp again the old code and keep adding more support for some more missing features.\nOnce said this, thanks.\n. Just give me a couple of days and i will be able to help, maybe even i will be able to do a little bit of docs for the matchers. I am currently a little bit busy with my main work, but i expect to get my open sourced tickets done somewhere in the current and next month.\nAs far as i can remember, i did the matchers this way because some php versions use some variables, and another ones are possibly missing in another PHP versions, one clear example is the nekutodallin token, that has been renamed to double semicolon or something like that, so if you \"hardcode\" the token you will have a little bit more consistency, but that is a thing that might need more testing between versioning or even a better solution.\nAttached there is a sample between how the constant names changes between php versions.\n\nAnyways, if you get along with a better solution i will fully embrace it, of course :)\n. some constants are only from newer versions for example the variadic token, the yield token etc...\nBut anyways it should be handled gracefully even without the constants, so the warning must be caught.\nWell @dlussky , to test if it works without storing the variables, simply replace all the self::{TOKEN_NAME} by token_name({TOKEN_NAME}) and if all the tests pass, then it is ok edit or with the changes you proposed too.\nIf you need it quick, you can do the tests by your own, if you can wait a week or so, i will do it by myself, whatever you choose it is ok\n. I am waiting for newer features like public eval api.\n@dlussky any successful result using constants?\n. Hi, maybe an import function encapsed on the Psysh namespace might help, like the ones encapsed on the functions.php file.\nin pseudocode might look like this :\n``` php\nnamespace Psy;\nfunction import($library) // library vendor Ex: \"psy/psysh\"\n{\n   static $loader;\n   if (!isset($loader)) {\n     $loader = new Loader();\n   }\n   // when looking for library, check for its composer file with the autoload data, if library found but without composer warn about this.\n   // look for local dependencies in vendor folder, return on success\n   // look for global dependencies in the home folder, return on success\n   // look for phar dependencies finally, return on success.\n   // throw warning if libraries not found.\n}\n```\nfor the loader, maybe one encapsed in the psysh namespace with the full functionalities could help, you can check out this one, feel fre to use it changing the name. It's ok for me.\nThis way, you can do a file like this one :\n``` php\nrequire 'psysh.library';\nuse Psy;\nimport('symfony/console');\n$console = new \\Symfony\\Component\\Console\\Application();\n```\nor\n``` php\nrequire 'psysh.library';\nPsy\\import('symfony/console');\n$console = new \\Symfony\\Component\\Console\\Application();\n``\n. Good catch, after the$this->init` which loads the files and stuff might be ok, right?\n. ok,then i temporarily add the function call at the end, later we could be able to add test coverage or tweak it as needed.\n. Ok, sorry, i will be more descriptive on the PR. from now on. About this, you are right, but it's a bit complicated with the throw keyword, it is a little difficult to use.\nI tried with :\n``` php\nphp > return (stream_resolve_include_path($file) && require $file) ||\u00a0(throw new Exception);\nPHP Parse error:  syntax error, unexpected 'throw' (T_THROW) in php shell code on line 1\nParse error: syntax error, unexpected 'throw' (T_THROW) in php shell code on line 1\n```\nor\n``` php\nphp > return (stream_resolve_include_path($file) && require $file) ?:\u00a0(throw new Exception);\nPHP Parse error:  syntax error, unexpected 'throw' (T_THROW) in php shell code on line 1\nParse error: syntax error, unexpected 'throw' (T_THROW) in php shell code on line 1\n```\nthen i thought, maybe trigger_error.. but then:\n``` php\nphp > return (stream_resolve_include_path($file) && require $file) ?:\u00a0trigger_error('error');\nPHP Fatal error:  Call to undefined function \u00a0trigger_error() in php shell code on line 1\nFatal error: Call to undefined function \u00a0trigger_error() in php shell code on line 1\n```\nand\n``` php\nphp > return (stream_resolve_include_path($file) && require $file) ||\u00a0trigger_error('error');\nPHP Fatal error:  Call to undefined function \u00a0trigger_error() in php shell code on line 1\nFatal error: Call to undefined function \u00a0trigger_error() in php shell code on line 1\n```\nI am un happy too with the solution, but my PR is here if anyone needs it, or it could help to have anyone a better idea.\nAnyways, my solution has a serious flaw, the require has lost all the context from the vars, so maybe needs to be really heavily rethinked, but whatever, i will do a newer commit if i discover how to improve it.\nEDIT\nSorry i went out of topic again, about the thing you said about using the exception from within the code cleaner. i tried too, but the thing that the user might want to require could be a var, could be a function, could be a variable, whatever thing the php interpreter can convert to a string. So if there is any sample where code cleaner can resolve the tokens to a value that i can use would be really helpful, because then i try to stream_resolve_include_path or file_exists and then throw the ErrorException if the result is false.\n. I know that newer versions of PHP deal more gracefully with stuff like that, glad to know they are into it. If we are not able to evaluate nothing, i am completely stuck on this. If some day i can work a solution that makes not necessary to evaluate the content sent by the user i will post it here. Thanks\n. He really made a good statement there, so +1 about this.\nMaybe a option or parameter that sets the session as interactive and make that session able to set unset classes declarations. I know it will be tricky and complicated, but maybe it would be a nice feature for a testing environment not production related\n. don't worry i was busy too, whatever you need ping me back. :D\n. :+1:  it's ok for me\n. Do you mind giving me a hint about the proper command for running the code inside the shell? I tried some things and i ended doing the eval directly. I will review the code again to see what i can find, but if you know the exact command would be nice. Thanks\n. in just a minute\n. ah ok, it wont be much trouble, just give me a moment\n. Yes, It could be done with reflection, but as you said, the objects might need to be cached because the reflected entities would be spending huge amounts of memory if they are not stored in a certain reference. I will dig on that anyways, but it will take me a couple of days more maybe\n. i can do a copypasta from this comment on the php site and then send to the completion callback if the input matches\n. I supposed, i was only preparing the files for the tests and checking the errors from the travis bot, i will resubmit code in a moment\n. ok, and it can be tested too then\n. the readline ignores inputs like dollar or backslash, is a weird behaviour that i am currently digging about.\n. yes, you are right, i will add the deactivate on __destruct\n. is ok for me, with module_loaded('readline') is enough?\n. I will need to add a additional class, for this, but it is possible\n. the executionClosure scope is not visible, because is the closure that has the context of the call, the issue related to the code variable is in fact leaked an could drive to errors, but this one has no visibility, i might better came along with a better solution for the code variable anyways, i am trying get a working solution for that.\n. do we have a test for that, or can you explain me how to add it to the tests? thanks\n. after a bit of testing seems to be that is not necessary to uninstall the completion function, i will skip this step.\n. I suppose it doesn't make a big difference, i did the closure in a separated function for a cleaner method calls, but being the main loop closure it doesn't matter if it is created as a lambda or received as a parameter from a function, so my vote is to have it in a sepparated function for a cleaner structure, but it is not relevant so if you want it in the loop call it wouldnt be a problem at all and it wouldnt take more than a minute to commit. TL;DR as you decide.\n. I will test that in a docker VM. but i will put that in the bottom list for the TODO.\n. I am trying to do as you say, i am trying by splitting the code by tokens in a lexer non strict way with token_get_all function, i came out with a solution named rulers that i am currently removing because i do not like to have that huge amount of files for simple rules. I will push a new set of files by the end of the day so you can check how it works, but mainly is like you say, is a little bit weird because the completion shows the variables without the dollars.\n. I will check for that, didn't knew that symfony had one.\n. For the other command i am not sure if it doesn't have downsides, but for this command if i let the engine parse the options we will end with composer calls that have missing some arguments, for example, if the application parses the options and arguments, you will not be able to do a call like this for example : composer search foo --only-names\n. Ok, i will check that, maybe today i will update the PR\n. yes sorry, i was tired of file path completions, but maybe some day with a matcher could be added too.\n. if you are referring to this note : \n\nNote: For our purposes here, a letter is a-z, A-Z, and the ASCII characters from 127 through 255 (0x7f-0xff).\n\nIt means the content of the variable or constant, not the name, the real regex is not like this, or you will end getting constant names as weird as \"T\ufffdOT\ufffd\u007f\u007f\u007f\u007f\", being all this chars in this contant inside the ranges defined in the note,but definitively are not a valid constant name.\n. Okay, so you really think that chars like this are valid for a variable or constant name?\n\n>>> print '\\x5f'\n_\n>>> print '\\x5d'\n]\n>>> print '\\x5c'\n\\\n>>> print '\\x5e'\n^\n\nI can trust the docs until some point, but this is certainly confusing.\nEDIT \nmy bad i was looking to the other side of the range, i got confused, but anyways, the other side of the range has very weird chars like whitespaces or so.\n. I will add the regular expression because the docs, but some of the chars in this range are whitespaces or non legible chars.\n. I only replaced as csfixer asked, should we open a issue that the smileys should be used as a punctuation chars?\n. then even looking wrong, csfixer wants it this way. I am not really sure about what to do about this kind of rules, if i rollback to the prior state travis will refuse the builds.\n. What do you mean? the csfixer wants sentence closers, the problem is not the smiley. It currently succesfully builds and is not the smileys fault.\n. So you mean to waste my time on this only because it doesn't likes you? ah, nice point, then feel free to replace it yourself\n. oh sorry, my IDE must had auto completed that one, just skip it. I didn't meant to add this one.\n. @GrahamCampbell you forgot this one :grin: \n. Sorry my bad. I tried to add matchers via config and threw an error. I will double check the calls and maybe a test for that.\n. What is the reason behind that? why the plugin has to be able to modify the manager? The manager should not be accessible, if the manager goes public we might be needing some intermediate layer for protection like the registry one you said before.\n. I am not sure too, maybe automation is not the solution, but maybe writting the name for all the plugins is not necessary. I leave this like this temporarily, but i am not convinced too.\n. the configuration is merged, the configurations are preserved, but the commands, matchers or presenters are not removed.\n. what if they only want the matchers for the plugin but not the presenters or the commands? I do not see a problem to expose publicly that methods, are only getters with static data.\n. new __CLASS__ is an alias of new static, so it's only about coding style.\n. :+1: \n. totally agree, i am not convinced yet, i was waiting to get with a good idea to put there, let's see.\n. yes, the name is the unique key indexer. see  src/Psy/Plugin/Manager.php line 16, so if anyone adds a plugin with the same name it will be overwritten like a FIFO pile.\n. the methods indeed are accessible, but no the plugins variable. maybe an exception if someone tries to register an already registered plugin, but why another intermediate layer for plugin handling?\n. objects can hold static calls too, it doesn't matter, you can call ClassName::method or $object::method. BTW, done this way we have the AbstractPlugin enforcer on the register function.\n. So true, at first was thinking about using the full namespaced class. Anyways i am not yet convinced about this, maybe is hould open up this method and get a default naming.\n. ok\n. ",
    "henrikbjorn": "how do you use it with a class method?\n. That is f..... awesome! Thanks :)\n. Yup :)\n. ",
    "michabbb": "hi, i always get this error, when using the \"doc\" command:\n\n\n\ndoc preg_replace\nPDOException with message 'could not find driver'\nprint_r(PDO::getAvailableDrivers());\nArray\n(\n    [0] => mysql\n    [1] => sqlite2\n)\nsqlite module is installed and doc is downloaded.... any idea ? \nthx\n. thx, i will test, sorry for posting wrong....\n. thanks for your feedback, working with composer, i was able to run psysh, but another project which has its complete own autoloading mechanisms, my own classes won\u00b4t be found, i think because the whole autoloader inside psysh overrides mine... that\u00b4s why i opened this issue...  is there a way to ignore the psysh autoloader internal stuff ?\n. long time ago, i will test it and let you now...\n. seems to work now ;)\n. \n\n\n",
    "Zauberfisch": "@michabbb I am not associated with this project in any way, but may I still suggest you open up a new issue for your new problem? \nposting ones problems into other threads results in confusion and is usually considered bad manners.\n. ",
    "grota": "I stumbled upon this issue while figuring out what initialization files does psysh use, because it seemed to me like the readline support was pretty basic (no CTRL-R support, no ~/.inputrc sourcing).\nMy 2 questions are:\n- is this correct behavior?\n- can we get more readline awesomeness out of php (and into psysh)?\n:+1: for hoa's library for what is worth.\n. yep, I got\n```\nPsy Shell v0.3.0 (PHP 5.5.9-1ubuntu4.5 \u2014 cli) by Justin Hileman\n\n\n\n\\Psy\\Readline\\Libedit::isSupported()\n=> true\n\\Psy\\Readline\\GNUReadline::isSupported()\n=> false\n\\Psy\\Readline\\Transient::isSupported()\n=> true\n```\n\n\n\nbut also\n\u276f php -i |grep Readline\nReadline Support => enabled\nReadline library => EditLine wrapper\ndoes that mean that I have to craft a .editrc instead of my .inputrc?\n. roger that, sorry for having hijacked the thread a little bit\n. ",
    "camspiers": "Thanks for looking into this. Really awesome. I think your suggestion is good too.\n. Great news. Thanks @fabpot and @bobthecow \n. @bobthecow haha :) thanks!\n. ",
    "fabpot": "2.3.10 has just been released with this fix included.\n. ",
    "richardjortega": "@michabbb this gist I wrote may help, maybe you ran into similar problems I did while setting up: https://gist.github.com/richardjortega/9397258\n. ",
    "still-dreaming-1": "@henrikbjorn I have found using psysh from inside vimshell to work really well. Then you will truly have Vim bindings.\n. > That sounds kind of insane\nThat is good news! When I sound insane it usually means I am onto something great. Also, any sufficiently innovative idea is almost by definition going to sound insane to the majority of people. Anyway, I agree the exact way of developing I described sounds pretty annoying, and I'm sure it would also lead to performance issues for at least some versions of PHP, if not all of them. But I think it could be incorporated into very helpful tools. It would be nice to get more of a \"live\" feel when programming in PHP. Perhaps a REPL could be integrated into an editor or IDE in such a way that the REPL is executing code at the same time you edit your code in a source file. This may at times involve redefining a method in the REPL, which could be emulated by replacing methods with closures and then reassigning the closure variable. Alternatively, the REPL could start over to avoid naming collisions from redefining a method, but that could have performance issues. Of course all that is beside the point.\nAs far as how to show the code inside the closure, the only thing I can think of is grab it from a file. So as it is being typed into the REPL, it could be saved to a file, or at least something that gets registered as one, and then the file could be run as the REPL's way of executing the code. Then reflection could tell you which file it is from and show you the source code from it.\nIt does sound interesting to attempt myself. Right now I'm pretty maxed out on projects... Maybe some day.\n. ",
    "jesseleite": "Awesome thanks for tip!  Having trouble binding ESC to jk in my .inputrc file though.  Any of you doing this?  Internet says to add this to my ~/.inputrc file:\n```\nset editing-mode vi\nset keymap vi-insert\n\"jk\": vi-movement-mode\n```\nThe set editing-mode vi works, but the jk mapping doesn't seem to :(\n. ",
    "rstruber": "Perfect! Thanks for fixing that so quickly.\n. Closing this because I committed on a branch off master rather than develop. Will resubmit pull request.\n. If so I can't figure out which setting. I'm using iterm / mavericks. I did find some evidence that at some point echo stopped supporting \\e (http://superuser.com/questions/33914/why-doesnt-echo-support-e-escape-when-using-the-e-argument-in-macosx). \nWhat version of OS X are you running?\nEither way this isn't your problem so feel free to close it if you don't feel like figuring this one out (I wouldn't if I were in your shoes).\n. iterm2\n. I considered that terminal may work, but it gives the same output. I might make a new user and see if there's some config file in ~ that's causing an issue.\n. Worked with a new user. I guess I will start selectively moving out configuration files until I find one that fixes it!\n. Narrowed this down to .psysh/rc.php, \"pager\" configuration option. If I set this to more or less, I get output like in the screen capture. If I leave this out of rc.php I get the correct output. shrug I have nothing helpful to offer here! Haha.\n. ",
    "Rican7": "Wow, that was quick! Haha\nBut really, I was reporting this so I could go home and make a PR, but thank you! :+1: \n. Now, the only other thing to consider is whether or not the Presenter is presenting the ArrayObject \"correctly\"/\"accurately\". While I think it makes sense to show only the stored array values, as that's most likely how it will be used, ArrayObject's can technically have other properties (it doesn't implement __get or __set).\nCheck this out:\n\nI think that presenting only the array makes more sense for an SplFixedArray, but even those can technically have properties too. :/\n. Absolutely. Not an easy decision.\nI think it might make sense to only represent the array. If someone's curious about the exact information, they can just var_dump().\nHiding fields seems to be what you do for MongoCursor's too, which makes sense. The Presenters are for readability and clarity, not exact representation, correct?\n. Woah, I didn't even know about ls!\nI've just been using psysh as a REPL, I didn't even know about its meta features. Damn!\nBut yea, ls seems to only give me back the class definition (like the manual) of an ArrayObject, and dump still doesn't respect the ArrayObject flags. :/\n\n. Really? Reflection can't even access the properties? Well, that's dump. #lolphp\nBut yea, if Reflection can't get at them, then fuck it.\n. With the new PHP 5.6 release today, this issue has become even more important. The new 5.6 syntax requires the newer 1.0 release of PHP-Parser.\nEven though PHP-Parser is in beta, @nikic seems to be very comfortable with suggesting its use:\n\nThis is the last release on the 0.9 branch. All users on PHP >= 5.3 are encouraged to use version 1.0 instead, which is mostly compatible.\n. Haha, I could give it a shot once I grab some free time in a few days.\n. I'm traveling currently, but I'll definitely test it out once I have the chance tonight/tomorrow-morning.\n\nThanks for the quick fix! :+1:\n. Just gave it a decently thorough PHP 5.6 test. Seems that everything is working well!\n\n\n. Oh. Awesome. :smiley:\nThanks for the quick response. Feel free to close this, then.\n. :+1:\n. Not sure, but this miiiiight have something to do with #193.\n. Ahh, I see, that's interesting. I understand, yea, because otherwise it would fatally error and the shell session would halt completely, correct?\nIf that's the case, then feel free to close this as invalid. And thank you for the explanation. \ud83d\udc4d\n. Haha. Sounds good. Thanks man. \ud83d\udc4d\n. ",
    "zachflower": "I just stumbled upon this issue and\u2014while I'm not exactly sure how to automatically compensate for the problem within psysh\u2014this can be accomplished manually by piping the output of the command directly into the current login session, like so:\nexec('nano randomfile > `tty`'). Oh snap, definitely mixed feelings! Sad not to have been able to contribute, but delighted that there's something coming down the pike (hopefully something with PHP 7 support coming shortly after) \ud83d\ude04\n\nI will go ahead and close this PR then.\nUnrelated: You are one of the most respectful and communicative maintainers I've seen in open source. Just thought I'd say thank you and keep being awesome \ud83e\udd18. ",
    "Pym": "Yes, I was referring to the output of var_dump for php -a.\nOK, it was more of a misunderstanding on my part then. Thank you for enlightening me!\n. ",
    "oxfist": "The title of this issue is somehow misleading because it's actually the built-in web server that is not resumed after running a psysh session.\nAlso this happens to me with a plain PHP web app in Ubuntu 12.04 so I think it's definitely a bug regarding control not being passed correctly back to the built-in web server, because the response is sent to the browser only when the web server is killed.\n. I'm gonna go kill myself for not checking the currently opened issues before opening a new one. Sorry!\n. Maybe installing the readline module for PHP solves this particular problem. It did for me.\n. ",
    "sabudaye": "+1\n. ",
    "moolen": "+1\nIm actually getting dropped into a second psysh shell but it takes about 60 seconds.\nim running PHP 5.5.9-1ubuntu4.4 (cli) (built: Sep  4 2014 06:56:34)\nThe server code to reproduce:\n``` PHP\n<?php\nrequire 'vendor/autoload.php';\n$first = \"foo\";\n\\Psy\\Shell::debug(get_defined_vars());\n$second = \"bar\";\n\\Psy\\Shell::debug(get_defined_vars());\necho $first . \"\\n\";\necho $second . \"\\n\";\n```\nim using curl to send the request:\ncurl -i http://localhost:3000\nIt takes about 60s to get to the second shell.\nAbout 60 seconds after i exited the second shell the output is transferred to the client, but the connection never gets closed.\n. a workaround: set the default_socket_timeout in your /etc/php5/cli/php.ini to 1 second.\nso you have a lower latency between the breakpoints... \n. ",
    "oniric85": "+1 I've the same problem, is there any update on this? I can help if you need more information.\n. I'm having similar problems in Windows in cmd and cygwin too. When I echo something in Psysh I see the box character which I found out is U+23CE. I'm now using Adobe Source Code Pro too as console font but I still see the boxed character. Am I supposed to see the Return character instead? Seems difficult to find a font with that glyph.\n. With Babelmap tool it seems like that codepoint is in the following font on my system (Windows 10):\nCambria\nCambria Math\nSegoe UI Symbol\nYu Gothic\nYu Gothic UI\nIs there anything I could do to help you solve this issue?\n. ",
    "ricpelo": "+1 here too.\n. ",
    "andreiglingeanu": "Amazing!\n. @bobthecow There's no way of dropping a break point into the already executing PHP code with phpdbh, just like we are able to do with psysh. Good reading. Do you have some better ideas?\n\nLink\n. I managed this thing by building small commands I use everytime, they are constructed like this:\nwp-path.bash\nbash\nwp eval 'echo ABSPATH;' | tail -n 1\nNot very pretty, but it works for me.\n. It kind of worked for me too sometimes and sometimes it didn't. I don't have a proper explanation for it too :). ",
    "taylorren": "Hi Bob, \nThanks for the reply. \nThe web root for the site is mapped to ~/trusty/web. Itself is already a 777 directory (for testing purpose). I manually created .psysh under that directory and it has 777 too. The same problem appears all the same. \nNoticed in #0 error above, it does not give out the full path of the directory where PsySH tries to create a .psysh directory. It would help if that could display a full path in the error message. \nAny update soon? \n. Same again. I created another .psysh under my ~ directory and 777 it. Same error. \n. Hi Bob, \nThanks. Finally, it is working. \nStill need your support:\n1. I tried to visit that page with \\Psy debug line from a remote machine. The display of the page is fine but I can't see the Psy shell. Expected. \n2. I tried to visit that page in my VM using \"curl trusty/add/3/3\", it just displayed 6. Not invoking the shell either. \nAny further hints?\n. No further hints?\n. @bobthecow \n1. Remote visit via standard LAMP configuration. \n2. Local run via curl. \nSlim is a web framework so I am trying to see if I can use PsySH to help to debug my program. \n. ",
    "theofidry": "@taylorren, PsySH does not work with a web server like Apache or so I heard. However it should works with the PHP built in server. \n. That would be awesome\n. Another solution would be to replace the interactive shell of the IDE when\nusing xdebug.\nOn Friday, 18 March 2016, Blaine Schmeisser notifications@github.com\nwrote:\n\n@Markcial https://github.com/Markcial, maybe we should start by getting\nin the abstraction layer that just works for the current implementation so\nthis isn't such a large project? You probably already have this done, so\nmaybe just tear the rest out for now? Or maybe there's another way to break\nup this work?\nIt seems like there is a LOT of interest, so making this a more iterative\napproach is probably the best option.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/bobthecow/psysh/issues/121#issuecomment-198534676\n. Hmm actually I'm using the Symfony server (php app/console server:start) which uses the build-in PHP server.\n. I wait for ages and an error is returned once the timeout is reached.\n. Maybe it's my require that is not good. I cannot check at the moment so I'll tell you that when I can get my hand on it again.\n. ``` bash\n$ php -v\nPHP 5.6.6-1+deb.sury.org~trusty+1 (cli) (built: Feb 20 2015 11:22:10) \nCopyright (c) 1997-2015 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies\n    with Zend OPcache v7.0.4-dev, Copyright (c) 1999-2015, by Zend Technologies\n    with Xdebug v2.3.0, Copyright (c) 2002-2015, by Derick Rethans\n\n$ psysh -v\nPsy Shell v0.3.5 (PHP 5.6.6-1+deb.sury.org~trusty+1 \u2014 cli)\n$ php -i | grep -i readline\n/etc/php5/cli/conf.d/20-readline.ini,\nreadline\nReadline Support => enabled\nReadline library => EditLine wrapper\n``\n. Found something? Still can't get it working :(\n. I properly retested on Symfony2. The include works fine, however impossible to make theeval(\\Psy\\sh());no matter how I run the server, viaphp app/console server:runorphp app/console server:start.\n. I've found a bundle and forked it to add some things: [theofidry/PsyshBundle](https://github.com/theofidry/PsyshBundle). Now I can properly start a PsySH shell and use Symfony component in it. But the use case of the breakpoint (using theeval(\\Psy\\sh());`) has yet to work with the Symfony build-in server. At this point, I do not know if it comes from PsySH or the wrapper used by Sensio for the Symfony build-in server. Do you have any idea?\n. It works! Thanks @jrobeson and sorry for the late answer :)\n. @titolendable you might want to take a look at PsyshBundle for a Symfony integration ;)\n. I don't know, at the time I've written the doc it was working (cf. PsySH with breakpoints). I haven't tested it since then as for breakpoints I find more convenient to use XDebug with an IDE like phpStorm. Would be awesome if the interactive shell provided with phpStorm while doing step by step debugging would be PsySH though.\n. Fix for #292 I guess; @Markcial any update on that one?\n. @Markcial is there any plan to get them soon? Just asking as this issue has been pending for over a year.\nIn the meantime if you have some workarounds... It's tedious to have to type the FQCN each time...\n. Edit: corrected the link.\n. Okay fixed, thanks :)\n. @bobthecow Thanks for the links! You really should mention them on the website or README !\n. Great thanks!\n. Could it be possible to add theofidry/PsyshBundle to the list too?\nThere is some use cases in the doc. It's a first draft but the gist of it is there. It will need a little bit of rewording and some screenshot to make it more readable and friendly, but the uses cases are not all Symfony specific and any feedback is welcome!\n. ping @bobthecow \n. Cf. #208 \n. too bad :( Still thanks for the help\n. Actually I would like to have your opinion on this: there is currently 3 bundles for PsySH integration in Symfony:\n- navitronic/psymf\n- varas/sf2-psysh-bootstrap\n- luxifer/symfony-repl\nBefore making my own, I checked the 3 others. Out of them, only navitronic/psymf seemed to provider a real integration with Symfony as a Bundle. The others are simple php scripts working with require on bootstrap and kernel and such. It works, but it's not a bundle.\nSo out of the 3 working, only navitronic/psymf is designed as a Symfony bundle, which IMO is the best integration for this framework. First I planned to do a fork and merge back my changes to that project. As its author was not very reactive and that I did lots of work on my own to, I'm keeping my fork as it is.\nMy point is, should we really mention the 4 of them? Since 2 of them are not real integration on Symfony and the 2 others are quite the same, 1 active which refer to the non active, wouldn't just mentioning one be enough?\n. done :)\n. @bobthecow when will this be merged to the master branch? Since it's really just a part of the doc and not related to any new feature, wouldn't it be possible to cherry pick this commit?\n. Ok great!\n. @bobthecow like it provided it's not too often (maybe something like very month?), but maybe a dedicated ticket for that would be more suited so that people may share their though on it :)\n. :+1: :)\nI would let the default at monthly check: weekly seems a bit too much and it would also be the same frequency as composer check.\n. Maybe you can do an automatic check daily but in that case it would be better to leave things at showing a notice to tell the user an update is available.\n. My bad wrong error\n. I naively tried to change https://github.com/bobthecow/psysh/blob/master/src/Psy/TabCompletion/Matcher/ClassNamesMatcher.php#L45 for including short class names as well:\n``` php\narray_filter(\n                get_declared_classes(),\n                function ($className) use ($quotedClass) {\n                    $shortClassName = substr($className, strrpos($className, '\\') + 1);\n                $classNameMatch = AbstractMatcher::startsWith($quotedClass, $className);\n                $shortClassNameMatch = AbstractMatcher::startsWith($quotedClass, $shortClassName);\n\n                return $classNameMatch || $shortClassNameMatch;\n            }\n        )\n\n```\nBut somehow psysh just becomes unresponsive after that :/\n. I would expect the possibility of not having any history at all and be the default if the user has no permission on the passed dir, or fallback en /tmp (but is it /tmp on Windows?).\nBut otherwise that's an acceptable workaround.\n. If you create an history file in in /tmp, how do you know which session is associated to it? I mean another user should not get the same history file.\n. Well in the end it's just a matter of CS preferences. I do think the less indent you have, the more readable it tend to be, but I would also understand if not everyone shares this opinion.\n. See #292 and #167.\n. @bobthecow I would consider this PR (needs to be rebased but still). Despite being annoying to depend on dev-master, there is a few changes which would be really great. An alternative would be to get write access on the repository to manage it or a fork.... ping @bobthecow. >if it's seamless, that's awesome\nDream on \ud83d\ude06 Jokes aside there is likely to be a few hurdles simply because there is bound to be some dynamic code somewhere that requires special handling.\nFor now I'm handling them with patchers but ideally the code used should be refactored to avoid those patchers which are very brittle by nature.\nI'll give it a shot and come with a PoC when I find some time. Another related questions though: why not using box to build the PHAR? That could remove some bits of custom code.. >Because box didn't exist when I first started building the PHAR?\nFair enough, didn't check that hehe. Is there a strong feeling to keep things that way or if that removes some code and the PHAR size don't change much it's ok?\n\nI was referring to \"seamless\" from the end user's point of view, not the library developer's.\n\nDefinitely, the user should never have to worry about this kind of thing.. @bobthecow I wouldn't personally expect PsySH to modify the behaviour of those functions to add extra checks. My only complain here is that the exit is quite brutal.\nMaybe having a error handler registered (if none is already registered) to not exit but display the error instead?. Yes I noticed it but I was really confused at the autoloading part in the first place... I'll give you the diff later of the files shipped in the PHAR (you can see it with box info psysh.phar --list which I couldn't yet. I also find suspicious that big diff provided you were already removing the test dependencies...\nSo you need that custom stub :/ It's a shame it would be nicer not to have to bug I guess it can't be helped.. Update:\n\nBuild on master\n\n```\ntime bin/build                                                                                                                                                                                                                      tfidry@Theos-MBP\nBuilding phar\nLoading composer repositories with package information\nUpdating dependencies\nDependency resolution completed in 0.196 seconds\nAnalyzed 3499 packages to resolve dependencies\nAnalyzed 153119 rules to resolve dependencies\nDependency resolution completed in 0.000 seconds\nPackage operations: 8 installs, 0 updates, 0 removals\nInstalls: dnoegel/php-xdg-base-dir:0.1, symfony/polyfill-mbstring:v1.8.0, symfony/console:v4.0.9, symfony/polyfill-php72:v1.8.0, symfony/var-dumper:v4.0.9, nikic/php-parser:v4.0.1, jakub-onderka/php-console-color:0.1, jakub-onderka/php-console-highlighter:v0.3.2\n  - Installing dnoegel/php-xdg-base-dir (0.1): Loading from cache\n Extracting archive  - Installing symfony/polyfill-mbstring (v1.8.0): Loading from cache\n Extracting archive  - Installing symfony/console (v4.0.9): Loading from cache\n Extracting archive  - Installing symfony/polyfill-php72 (v1.8.0): Loading from cache\n Extracting archive  - Installing symfony/var-dumper (v4.0.9): Loading from cache\n Extracting archive  - Installing nikic/php-parser (v4.0.1): Loading from cache\n Extracting archive  - Installing jakub-onderka/php-console-color (0.1): Loading from cache\n Extracting archive  - Installing jakub-onderka/php-console-highlighter (v0.3.2): Loading from cache\n Extracting archiveGenerating optimized autoload files\nBuilding compat phar\nUsing version ^4.0 for symfony/intl\nUsing version ^3.17 for hoa/console\ncomposer-compat.json has been updated\nLoading composer repositories with package information\nUpdating dependencies\nDependency resolution completed in 0.193 seconds\nAnalyzed 3741 packages to resolve dependencies\nAnalyzed 152854 rules to resolve dependencies\nDependency resolution completed in 0.000 seconds\nPackage operations: 19 installs, 0 updates, 0 removals\nInstalls: dnoegel/php-xdg-base-dir:0.1, symfony/polyfill-mbstring:v1.8.0, symfony/console:v4.0.9, symfony/polyfill-php72:v1.8.0, symfony/var-dumper:v4.0.9, nikic/php-parser:v4.0.1, jakub-onderka/php-console-color:0.1, jakub-onderka/php-console-highlighter:v0.3.2, hoa/exception:1.17.01.16, hoa/event:1.17.01.13, hoa/consistency:1.17.05.02, hoa/ustring:4.17.01.16, hoa/protocol:1.17.01.14, hoa/stream:1.17.02.21, hoa/iterator:2.17.01.10, hoa/file:1.17.07.11, hoa/console:3.17.05.02, symfony/polyfill-intl-icu:v1.8.0, symfony/intl:v4.0.9\n  - Installing dnoegel/php-xdg-base-dir (0.1): Loading from cache\n Extracting archive  - Installing symfony/polyfill-mbstring (v1.8.0): Loading from cache\n Extracting archive  - Installing symfony/console (v4.0.9): Loading from cache\n Extracting archive  - Installing symfony/polyfill-php72 (v1.8.0): Loading from cache\n Extracting archive  - Installing symfony/var-dumper (v4.0.9): Loading from cache\n Extracting archive  - Installing nikic/php-parser (v4.0.1): Loading from cache\n Extracting archive  - Installing jakub-onderka/php-console-color (0.1): Loading from cache\n Extracting archive  - Installing jakub-onderka/php-console-highlighter (v0.3.2): Loading from cache\n Extracting archive  - Installing hoa/exception (1.17.01.16): Loading from cache\n Extracting archive  - Installing hoa/event (1.17.01.13): Loading from cache\n Extracting archive  - Installing hoa/consistency (1.17.05.02): Loading from cache\n Extracting archive  - Installing hoa/ustring (4.17.01.16): Loading from cache\n Extracting archive  - Installing hoa/protocol (1.17.01.14): Loading from cache\n Extracting archive  - Installing hoa/stream (1.17.02.21): Loading from cache\n Extracting archive  - Installing hoa/iterator (2.17.01.10): Loading from cache\n Extracting archive  - Installing hoa/file (1.17.07.11): Loading from cache\n Extracting archive  - Installing hoa/console (3.17.05.02): Loading from cache\n Extracting archive  - Installing symfony/polyfill-intl-icu (v1.8.0): Loading from cache\n Extracting archive  - Installing symfony/intl (v4.0.9): Loading from cache\n Extracting archiveWriting lock file\nGenerating optimized autoload files\nbin/build  11.00s user 7.50s system 80% cpu 22.871 total\n```\n\n\n\n`psysh.phar` details\n\n```\n\nAPI Version: 1.1.0\n\nArchive Compression: None\n\nSignature: SHA-1\nSignature Hash: 836F3DCC6DDDD54EAA2771FBC1E34192F4DE3E4A\n\nMetadata: None\n\nContents: 486 files (1.22MB)\nbuild-vendor/\n  autoload.php [NONE]\n  composer/\n    ClassLoader.php [NONE]\n    autoload_classmap.php [NONE]\n    autoload_files.php [NONE]\n    autoload_namespaces.php [NONE]\n    autoload_psr4.php [NONE]\n    autoload_real.php [NONE]\n    autoload_static.php [NONE]\n  dnoegel/\n    php-xdg-base-dir/\n      src/\n        Xdg.php [NONE]\n  jakub-onderka/\n    php-console-color/\n      example.php [NONE]\n      src/\n        JakubOnderka/\n          PhpConsoleColor/\n            ConsoleColor.php [NONE]\n            InvalidStyleException.php [NONE]\n    php-console-highlighter/\n      examples/\n        snippet.php [NONE]\n        whole_file.php [NONE]\n        whole_file_line_numbers.php [NONE]\n      src/\n        JakubOnderka/\n          PhpConsoleHighlighter/\n            Highlighter.php [NONE]\n  nikic/\n    php-parser/\n      grammar/\n        rebuildParsers.php [NONE]\n      lib/\n        PhpParser/\n          Builder/\n            Class_.php [NONE]\n            Declaration.php [NONE]\n            FunctionLike.php [NONE]\n            Function_.php [NONE]\n            Interface_.php [NONE]\n            Method.php [NONE]\n            Namespace_.php [NONE]\n            Param.php [NONE]\n            Property.php [NONE]\n            Trait_.php [NONE]\n            Use_.php [NONE]\n          Builder.php [NONE]\n          BuilderFactory.php [NONE]\n          BuilderHelpers.php [NONE]\n          Comment/\n            Doc.php [NONE]\n          Comment.php [NONE]\n          ConstExprEvaluationException.php [NONE]\n          ConstExprEvaluator.php [NONE]\n          Error.php [NONE]\n          ErrorHandler/\n            Collecting.php [NONE]\n            Throwing.php [NONE]\n          ErrorHandler.php [NONE]\n          Internal/\n            DiffElem.php [NONE]\n            Differ.php [NONE]\n            PrintableNewAnonClassNode.php [NONE]\n            TokenStream.php [NONE]\n          JsonDecoder.php [NONE]\n          Lexer/\n            Emulative.php [NONE]\n          Lexer.php [NONE]\n          NameContext.php [NONE]\n          Node/\n            Arg.php [NONE]\n            Const_.php [NONE]\n            Expr/\n              ArrayDimFetch.php [NONE]\n              ArrayItem.php [NONE]\n              Array_.php [NONE]\n              Assign.php [NONE]\n              AssignOp/\n                BitwiseAnd.php [NONE]\n                BitwiseOr.php [NONE]\n                BitwiseXor.php [NONE]\n                Concat.php [NONE]\n                Div.php [NONE]\n                Minus.php [NONE]\n                Mod.php [NONE]\n                Mul.php [NONE]\n                Plus.php [NONE]\n                Pow.php [NONE]\n                ShiftLeft.php [NONE]\n                ShiftRight.php [NONE]\n              AssignOp.php [NONE]\n              AssignRef.php [NONE]\n              BinaryOp/\n                BitwiseAnd.php [NONE]\n                BitwiseOr.php [NONE]\n                BitwiseXor.php [NONE]\n                BooleanAnd.php [NONE]\n                BooleanOr.php [NONE]\n                Coalesce.php [NONE]\n                Concat.php [NONE]\n                Div.php [NONE]\n                Equal.php [NONE]\n                Greater.php [NONE]\n                GreaterOrEqual.php [NONE]\n                Identical.php [NONE]\n                LogicalAnd.php [NONE]\n                LogicalOr.php [NONE]\n                LogicalXor.php [NONE]\n                Minus.php [NONE]\n                Mod.php [NONE]\n                Mul.php [NONE]\n                NotEqual.php [NONE]\n                NotIdentical.php [NONE]\n                Plus.php [NONE]\n                Pow.php [NONE]\n                ShiftLeft.php [NONE]\n                ShiftRight.php [NONE]\n                Smaller.php [NONE]\n                SmallerOrEqual.php [NONE]\n                Spaceship.php [NONE]\n              BinaryOp.php [NONE]\n              BitwiseNot.php [NONE]\n              BooleanNot.php [NONE]\n              Cast/\n                Array_.php [NONE]\n                Bool_.php [NONE]\n                Double.php [NONE]\n                Int_.php [NONE]\n                Object_.php [NONE]\n                String_.php [NONE]\n                Unset_.php [NONE]\n              Cast.php [NONE]\n              ClassConstFetch.php [NONE]\n              Clone_.php [NONE]\n              Closure.php [NONE]\n              ClosureUse.php [NONE]\n              ConstFetch.php [NONE]\n              Empty_.php [NONE]\n              Error.php [NONE]\n              ErrorSuppress.php [NONE]\n              Eval_.php [NONE]\n              Exit_.php [NONE]\n              FuncCall.php [NONE]\n              Include_.php [NONE]\n              Instanceof_.php [NONE]\n              Isset_.php [NONE]\n              List_.php [NONE]\n              MethodCall.php [NONE]\n              New_.php [NONE]\n              PostDec.php [NONE]\n              PostInc.php [NONE]\n              PreDec.php [NONE]\n              PreInc.php [NONE]\n              Print_.php [NONE]\n              PropertyFetch.php [NONE]\n              ShellExec.php [NONE]\n              StaticCall.php [NONE]\n              StaticPropertyFetch.php [NONE]\n              Ternary.php [NONE]\n              UnaryMinus.php [NONE]\n              UnaryPlus.php [NONE]\n              Variable.php [NONE]\n              YieldFrom.php [NONE]\n              Yield_.php [NONE]\n            Expr.php [NONE]\n            FunctionLike.php [NONE]\n            Identifier.php [NONE]\n            Name/\n              FullyQualified.php [NONE]\n              Relative.php [NONE]\n            Name.php [NONE]\n            NullableType.php [NONE]\n            Param.php [NONE]\n            Scalar/\n              DNumber.php [NONE]\n              Encapsed.php [NONE]\n              EncapsedStringPart.php [NONE]\n              LNumber.php [NONE]\n              MagicConst/\n                Class_.php [NONE]\n                Dir.php [NONE]\n                File.php [NONE]\n                Function_.php [NONE]\n                Line.php [NONE]\n                Method.php [NONE]\n                Namespace_.php [NONE]\n                Trait_.php [NONE]\n              MagicConst.php [NONE]\n              String_.php [NONE]\n            Scalar.php [NONE]\n            Stmt/\n              Break_.php [NONE]\n              Case_.php [NONE]\n              Catch_.php [NONE]\n              ClassConst.php [NONE]\n              ClassLike.php [NONE]\n              ClassMethod.php [NONE]\n              Class_.php [NONE]\n              Const_.php [NONE]\n              Continue_.php [NONE]\n              DeclareDeclare.php [NONE]\n              Declare_.php [NONE]\n              Do_.php [NONE]\n              Echo_.php [NONE]\n              ElseIf_.php [NONE]\n              Else_.php [NONE]\n              Expression.php [NONE]\n              Finally_.php [NONE]\n              For_.php [NONE]\n              Foreach_.php [NONE]\n              Function_.php [NONE]\n              Global_.php [NONE]\n              Goto_.php [NONE]\n              GroupUse.php [NONE]\n              HaltCompiler.php [NONE]\n              If_.php [NONE]\n              InlineHTML.php [NONE]\n              Interface_.php [NONE]\n              Label.php [NONE]\n              Namespace_.php [NONE]\n              Nop.php [NONE]\n              Property.php [NONE]\n              PropertyProperty.php [NONE]\n              Return_.php [NONE]\n              StaticVar.php [NONE]\n              Static_.php [NONE]\n              Switch_.php [NONE]\n              Throw_.php [NONE]\n              TraitUse.php [NONE]\n              TraitUseAdaptation/\n                Alias.php [NONE]\n                Precedence.php [NONE]\n              TraitUseAdaptation.php [NONE]\n              Trait_.php [NONE]\n              TryCatch.php [NONE]\n              Unset_.php [NONE]\n              UseUse.php [NONE]\n              Use_.php [NONE]\n              While_.php [NONE]\n            Stmt.php [NONE]\n            VarLikeIdentifier.php [NONE]\n          Node.php [NONE]\n          NodeAbstract.php [NONE]\n          NodeDumper.php [NONE]\n          NodeFinder.php [NONE]\n          NodeTraverser.php [NONE]\n          NodeTraverserInterface.php [NONE]\n          NodeVisitor/\n            CloningVisitor.php [NONE]\n            FindingVisitor.php [NONE]\n            FirstFindingVisitor.php [NONE]\n            NameResolver.php [NONE]\n          NodeVisitor.php [NONE]\n          NodeVisitorAbstract.php [NONE]\n          Parser/\n            Multiple.php [NONE]\n            Php5.php [NONE]\n            Php7.php [NONE]\n            Tokens.php [NONE]\n          Parser.php [NONE]\n          ParserAbstract.php [NONE]\n          ParserFactory.php [NONE]\n          PrettyPrinter/\n            Standard.php [NONE]\n          PrettyPrinterAbstract.php [NONE]\n      test_old/\n        run.php [NONE]\n  symfony/\n    console/\n      Application.php [NONE]\n      Command/\n        Command.php [NONE]\n        HelpCommand.php [NONE]\n        ListCommand.php [NONE]\n        LockableTrait.php [NONE]\n      CommandLoader/\n        CommandLoaderInterface.php [NONE]\n        ContainerCommandLoader.php [NONE]\n        FactoryCommandLoader.php [NONE]\n      ConsoleEvents.php [NONE]\n      DependencyInjection/\n        AddConsoleCommandPass.php [NONE]\n      Descriptor/\n        ApplicationDescription.php [NONE]\n        Descriptor.php [NONE]\n        DescriptorInterface.php [NONE]\n        JsonDescriptor.php [NONE]\n        MarkdownDescriptor.php [NONE]\n        TextDescriptor.php [NONE]\n        XmlDescriptor.php [NONE]\n      Event/\n        ConsoleCommandEvent.php [NONE]\n        ConsoleErrorEvent.php [NONE]\n        ConsoleEvent.php [NONE]\n        ConsoleTerminateEvent.php [NONE]\n      EventListener/\n        ErrorListener.php [NONE]\n      Exception/\n        CommandNotFoundException.php [NONE]\n        ExceptionInterface.php [NONE]\n        InvalidArgumentException.php [NONE]\n        InvalidOptionException.php [NONE]\n        LogicException.php [NONE]\n        RuntimeException.php [NONE]\n      Formatter/\n        OutputFormatter.php [NONE]\n        OutputFormatterInterface.php [NONE]\n        OutputFormatterStyle.php [NONE]\n        OutputFormatterStyleInterface.php [NONE]\n        OutputFormatterStyleStack.php [NONE]\n      Helper/\n        DebugFormatterHelper.php [NONE]\n        DescriptorHelper.php [NONE]\n        FormatterHelper.php [NONE]\n        Helper.php [NONE]\n        HelperInterface.php [NONE]\n        HelperSet.php [NONE]\n        InputAwareHelper.php [NONE]\n        ProcessHelper.php [NONE]\n        ProgressBar.php [NONE]\n        ProgressIndicator.php [NONE]\n        QuestionHelper.php [NONE]\n        SymfonyQuestionHelper.php [NONE]\n        Table.php [NONE]\n        TableCell.php [NONE]\n        TableSeparator.php [NONE]\n        TableStyle.php [NONE]\n      Input/\n        ArgvInput.php [NONE]\n        ArrayInput.php [NONE]\n        Input.php [NONE]\n        InputArgument.php [NONE]\n        InputAwareInterface.php [NONE]\n        InputDefinition.php [NONE]\n        InputInterface.php [NONE]\n        InputOption.php [NONE]\n        StreamableInputInterface.php [NONE]\n        StringInput.php [NONE]\n      Logger/\n        ConsoleLogger.php [NONE]\n      Output/\n        BufferedOutput.php [NONE]\n        ConsoleOutput.php [NONE]\n        ConsoleOutputInterface.php [NONE]\n        NullOutput.php [NONE]\n        Output.php [NONE]\n        OutputInterface.php [NONE]\n        StreamOutput.php [NONE]\n      Question/\n        ChoiceQuestion.php [NONE]\n        ConfirmationQuestion.php [NONE]\n        Question.php [NONE]\n      Style/\n        OutputStyle.php [NONE]\n        StyleInterface.php [NONE]\n        SymfonyStyle.php [NONE]\n      Terminal.php [NONE]\n      Tester/\n        ApplicationTester.php [NONE]\n        CommandTester.php [NONE]\n    polyfill-mbstring/\n      Mbstring.php [NONE]\n      Resources/\n        unidata/\n          lowerCase.php [NONE]\n          upperCase.php [NONE]\n      bootstrap.php [NONE]\n    polyfill-php72/\n      Php72.php [NONE]\n      bootstrap.php [NONE]\n    var-dumper/\n      Caster/\n        AmqpCaster.php [NONE]\n        ArgsStub.php [NONE]\n        Caster.php [NONE]\n        ClassStub.php [NONE]\n        ConstStub.php [NONE]\n        CutArrayStub.php [NONE]\n        CutStub.php [NONE]\n        DOMCaster.php [NONE]\n        DateCaster.php [NONE]\n        DoctrineCaster.php [NONE]\n        EnumStub.php [NONE]\n        ExceptionCaster.php [NONE]\n        FrameStub.php [NONE]\n        LinkStub.php [NONE]\n        PdoCaster.php [NONE]\n        PgSqlCaster.php [NONE]\n        RedisCaster.php [NONE]\n        ReflectionCaster.php [NONE]\n        ResourceCaster.php [NONE]\n        SplCaster.php [NONE]\n        StubCaster.php [NONE]\n        SymfonyCaster.php [NONE]\n        TraceStub.php [NONE]\n        XmlReaderCaster.php [NONE]\n        XmlResourceCaster.php [NONE]\n      Cloner/\n        AbstractCloner.php [NONE]\n        ClonerInterface.php [NONE]\n        Cursor.php [NONE]\n        Data.php [NONE]\n        DumperInterface.php [NONE]\n        Stub.php [NONE]\n        VarCloner.php [NONE]\n      Dumper/\n        AbstractDumper.php [NONE]\n        CliDumper.php [NONE]\n        DataDumperInterface.php [NONE]\n        HtmlDumper.php [NONE]\n      Exception/\n        ThrowingCasterException.php [NONE]\n      Resources/\n        functions/\n          dump.php [NONE]\n      VarDumper.php [NONE]\nsrc/\n  CodeCleaner/\n    AbstractClassPass.php [NONE]\n    AssignThisVariablePass.php [NONE]\n    CallTimePassByReferencePass.php [NONE]\n    CalledClassPass.php [NONE]\n    CodeCleanerPass.php [NONE]\n    ExitPass.php [NONE]\n    FinalClassPass.php [NONE]\n    FunctionContextPass.php [NONE]\n    FunctionReturnInWriteContextPass.php [NONE]\n    ImplicitReturnPass.php [NONE]\n    InstanceOfPass.php [NONE]\n    LeavePsyshAlonePass.php [NONE]\n    LegacyEmptyPass.php [NONE]\n    LoopContextPass.php [NONE]\n    MagicConstantsPass.php [NONE]\n    NamespaceAwarePass.php [NONE]\n    NamespacePass.php [NONE]\n    NoReturnValue.php [NONE]\n    PassableByReferencePass.php [NONE]\n    RequirePass.php [NONE]\n    StrictTypesPass.php [NONE]\n    UseStatementPass.php [NONE]\n    ValidClassNamePass.php [NONE]\n    ValidConstantPass.php [NONE]\n    ValidConstructorPass.php [NONE]\n    ValidFunctionNamePass.php [NONE]\n  CodeCleaner.php [NONE]\n  Command/\n    BufferCommand.php [NONE]\n    ClearCommand.php [NONE]\n    Command.php [NONE]\n    DocCommand.php [NONE]\n    DumpCommand.php [NONE]\n    EditCommand.php [NONE]\n    ExitCommand.php [NONE]\n    HelpCommand.php [NONE]\n    HistoryCommand.php [NONE]\n    ListCommand/\n      ClassConstantEnumerator.php [NONE]\n      ClassEnumerator.php [NONE]\n      ConstantEnumerator.php [NONE]\n      Enumerator.php [NONE]\n      FunctionEnumerator.php [NONE]\n      GlobalVariableEnumerator.php [NONE]\n      InterfaceEnumerator.php [NONE]\n      MethodEnumerator.php [NONE]\n      PropertyEnumerator.php [NONE]\n      TraitEnumerator.php [NONE]\n      VariableEnumerator.php [NONE]\n    ListCommand.php [NONE]\n    ParseCommand.php [NONE]\n    PsyVersionCommand.php [NONE]\n    ReflectingCommand.php [NONE]\n    ShowCommand.php [NONE]\n    SudoCommand.php [NONE]\n    ThrowUpCommand.php [NONE]\n    TimeitCommand.php [NONE]\n    TraceCommand.php [NONE]\n    WhereamiCommand.php [NONE]\n    WtfCommand.php [NONE]\n  ConfigPaths.php [NONE]\n  Configuration.php [NONE]\n  ConsoleColorFactory.php [NONE]\n  Context.php [NONE]\n  ContextAware.php [NONE]\n  Exception/\n    BreakException.php [NONE]\n    DeprecatedException.php [NONE]\n    ErrorException.php [NONE]\n    Exception.php [NONE]\n    FatalErrorException.php [NONE]\n    ParseErrorException.php [NONE]\n    RuntimeException.php [NONE]\n    ThrowUpException.php [NONE]\n    TypeErrorException.php [NONE]\n  ExecutionClosure.php [NONE]\n  ExecutionLoop/\n    AbstractListener.php [NONE]\n    Listener.php [NONE]\n    ProcessForker.php [NONE]\n    RunkitReloader.php [NONE]\n  ExecutionLoop.php [NONE]\n  Formatter/\n    CodeFormatter.php [NONE]\n    DocblockFormatter.php [NONE]\n    Formatter.php [NONE]\n    SignatureFormatter.php [NONE]\n  Input/\n    CodeArgument.php [NONE]\n    FilterOptions.php [NONE]\n    ShellInput.php [NONE]\n    SilentInput.php [NONE]\n  Output/\n    OutputPager.php [NONE]\n    PassthruPager.php [NONE]\n    ProcOutputPager.php [NONE]\n    ShellOutput.php [NONE]\n  ParserFactory.php [NONE]\n  Readline/\n    GNUReadline.php [NONE]\n    HoaConsole.php [NONE]\n    Libedit.php [NONE]\n    Readline.php [NONE]\n    Transient.php [NONE]\n  Reflection/\n    ReflectionConstant.php [NONE]\n    ReflectionLanguageConstruct.php [NONE]\n    ReflectionLanguageConstructParameter.php [NONE]\n  Shell.php [NONE]\n  Sudo/\n    SudoVisitor.php [NONE]\n  Sudo.php [NONE]\n  TabCompletion/\n    AutoCompleter.php [NONE]\n    Matcher/\n      AbstractContextAwareMatcher.php [NONE]\n      AbstractDefaultParametersMatcher.php [NONE]\n      AbstractMatcher.php [NONE]\n      ClassAttributesMatcher.php [NONE]\n      ClassMethodDefaultParametersMatcher.php [NONE]\n      ClassMethodsMatcher.php [NONE]\n      ClassNamesMatcher.php [NONE]\n      CommandsMatcher.php [NONE]\n      ConstantsMatcher.php [NONE]\n      FunctionDefaultParametersMatcher.php [NONE]\n      FunctionsMatcher.php [NONE]\n      KeywordsMatcher.php [NONE]\n      MongoClientMatcher.php [NONE]\n      MongoDatabaseMatcher.php [NONE]\n      ObjectAttributesMatcher.php [NONE]\n      ObjectMethodDefaultParametersMatcher.php [NONE]\n      ObjectMethodsMatcher.php [NONE]\n      VariablesMatcher.php [NONE]\n  Util/\n    Docblock.php [NONE]\n    Json.php [NONE]\n    Mirror.php [NONE]\n    Str.php [NONE]\n  VarDumper/\n    Cloner.php [NONE]\n    Dumper.php [NONE]\n    Presenter.php [NONE]\n    PresenterAware.php [NONE]\n  VersionUpdater/\n    Checker.php [NONE]\n    GitHubChecker.php [NONE]\n    IntervalChecker.php [NONE]\n    NoopChecker.php [NONE]\n  functions.php [NONE]\n\n```\n\n\n\n`psysh-compat.phar` details\n\n```\n\nAPI Version: 1.1.0\n\nArchive Compression: None\n\nSignature: SHA-1\nSignature Hash: E37FB485B661875D07CE6A4B626B8057EB76C9EE\n\nMetadata: None\n\nContents: 701 files (1.63MB)\nbuild-vendor/\n  autoload.php [NONE]\n  composer/\n    ClassLoader.php [NONE]\n    autoload_classmap.php [NONE]\n    autoload_files.php [NONE]\n    autoload_namespaces.php [NONE]\n    autoload_psr4.php [NONE]\n    autoload_real.php [NONE]\n    autoload_static.php [NONE]\n  dnoegel/\n    php-xdg-base-dir/\n      src/\n        Xdg.php [NONE]\n  hoa/\n    consistency/\n      Autoloader.php [NONE]\n      Consistency.php [NONE]\n      Exception.php [NONE]\n      Prelude.php [NONE]\n      Xcallable.php [NONE]\n    console/\n      Bin/\n        Termcap.php [NONE]\n      Chrome/\n        Editor.php [NONE]\n        Exception.php [NONE]\n        Pager.php [NONE]\n        Text.php [NONE]\n      Console.php [NONE]\n      Cursor.php [NONE]\n      Dispatcher/\n        Kit.php [NONE]\n      Exception.php [NONE]\n      GetOption.php [NONE]\n      Input.php [NONE]\n      Mouse.php [NONE]\n      Output.php [NONE]\n      Parser.php [NONE]\n      Processus.php [NONE]\n      Readline/\n        Autocompleter/\n          Aggregate.php [NONE]\n          Autocompleter.php [NONE]\n          Path.php [NONE]\n          Word.php [NONE]\n        Password.php [NONE]\n        Readline.php [NONE]\n      Tput.php [NONE]\n      Window.php [NONE]\n    event/\n      Bucket.php [NONE]\n      Event.php [NONE]\n      Exception.php [NONE]\n      Listenable.php [NONE]\n      Listener.php [NONE]\n      Listens.php [NONE]\n      Source.php [NONE]\n    exception/\n      Error.php [NONE]\n      Exception.php [NONE]\n      Group.php [NONE]\n      Idle.php [NONE]\n    file/\n      Directory.php [NONE]\n      Exception/\n        Exception.php [NONE]\n        FileDoesNotExist.php [NONE]\n      File.php [NONE]\n      Finder.php [NONE]\n      Generic.php [NONE]\n      Link/\n        Link.php [NONE]\n        Read.php [NONE]\n        ReadWrite.php [NONE]\n        Write.php [NONE]\n      Read.php [NONE]\n      ReadWrite.php [NONE]\n      SplFileInfo.php [NONE]\n      Temporary/\n        Read.php [NONE]\n        ReadWrite.php [NONE]\n        Temporary.php [NONE]\n        Write.php [NONE]\n      Watcher.php [NONE]\n      Write.php [NONE]\n    iterator/\n      Aggregate.php [NONE]\n      Append.php [NONE]\n      Buffer.php [NONE]\n      CallbackFilter.php [NONE]\n      CallbackGenerator.php [NONE]\n      Counter.php [NONE]\n      Demultiplexer.php [NONE]\n      Directory.php [NONE]\n      Exception.php [NONE]\n      FileSystem.php [NONE]\n      Filter.php [NONE]\n      Glob.php [NONE]\n      Infinite.php [NONE]\n      Iterator.php [NONE]\n      IteratorIterator.php [NONE]\n      Limit.php [NONE]\n      Lookahead.php [NONE]\n      Lookbehind.php [NONE]\n      Map.php [NONE]\n      Mock.php [NONE]\n      Multiple.php [NONE]\n      NoRewind.php [NONE]\n      Outer.php [NONE]\n      Recursive/\n        CallbackFilter.php [NONE]\n        Directory.php [NONE]\n        Filter.php [NONE]\n        Iterator.php [NONE]\n        Map.php [NONE]\n        Mock.php [NONE]\n        Recursive.php [NONE]\n        RegularExpression.php [NONE]\n      RegularExpression.php [NONE]\n      Repeater.php [NONE]\n      Seekable.php [NONE]\n      SplFileInfo.php [NONE]\n    protocol/\n      Bin/\n        Resolve.php [NONE]\n      Exception.php [NONE]\n      Node/\n        Library.php [NONE]\n        Node.php [NONE]\n      Protocol.php [NONE]\n      Wrapper.php [NONE]\n    stream/\n      Bucket.php [NONE]\n      Composite.php [NONE]\n      Context.php [NONE]\n      Exception.php [NONE]\n      Filter/\n        Basic.php [NONE]\n        Exception.php [NONE]\n        Filter.php [NONE]\n        LateComputed.php [NONE]\n      IStream/\n        Bufferable.php [NONE]\n        In.php [NONE]\n        Lockable.php [NONE]\n        Out.php [NONE]\n        Pathable.php [NONE]\n        Pointable.php [NONE]\n        Statable.php [NONE]\n        Stream.php [NONE]\n        Structural.php [NONE]\n        Touchable.php [NONE]\n      Stream.php [NONE]\n      Wrapper/\n        Exception.php [NONE]\n        IWrapper/\n          File.php [NONE]\n          IWrapper.php [NONE]\n          Stream.php [NONE]\n        Wrapper.php [NONE]\n    ustring/\n      Bin/\n        Fromcode.php [NONE]\n        Tocode.php [NONE]\n      Exception.php [NONE]\n      Search.php [NONE]\n      Ustring.php [NONE]\n  jakub-onderka/\n    php-console-color/\n      example.php [NONE]\n      src/\n        JakubOnderka/\n          PhpConsoleColor/\n            ConsoleColor.php [NONE]\n            InvalidStyleException.php [NONE]\n    php-console-highlighter/\n      examples/\n        snippet.php [NONE]\n        whole_file.php [NONE]\n        whole_file_line_numbers.php [NONE]\n      src/\n        JakubOnderka/\n          PhpConsoleHighlighter/\n            Highlighter.php [NONE]\n  nikic/\n    php-parser/\n      grammar/\n        rebuildParsers.php [NONE]\n      lib/\n        PhpParser/\n          Builder/\n            Class_.php [NONE]\n            Declaration.php [NONE]\n            FunctionLike.php [NONE]\n            Function_.php [NONE]\n            Interface_.php [NONE]\n            Method.php [NONE]\n            Namespace_.php [NONE]\n            Param.php [NONE]\n            Property.php [NONE]\n            Trait_.php [NONE]\n            Use_.php [NONE]\n          Builder.php [NONE]\n          BuilderFactory.php [NONE]\n          BuilderHelpers.php [NONE]\n          Comment/\n            Doc.php [NONE]\n          Comment.php [NONE]\n          ConstExprEvaluationException.php [NONE]\n          ConstExprEvaluator.php [NONE]\n          Error.php [NONE]\n          ErrorHandler/\n            Collecting.php [NONE]\n            Throwing.php [NONE]\n          ErrorHandler.php [NONE]\n          Internal/\n            DiffElem.php [NONE]\n            Differ.php [NONE]\n            PrintableNewAnonClassNode.php [NONE]\n            TokenStream.php [NONE]\n          JsonDecoder.php [NONE]\n          Lexer/\n            Emulative.php [NONE]\n          Lexer.php [NONE]\n          NameContext.php [NONE]\n          Node/\n            Arg.php [NONE]\n            Const_.php [NONE]\n            Expr/\n              ArrayDimFetch.php [NONE]\n              ArrayItem.php [NONE]\n              Array_.php [NONE]\n              Assign.php [NONE]\n              AssignOp/\n                BitwiseAnd.php [NONE]\n                BitwiseOr.php [NONE]\n                BitwiseXor.php [NONE]\n                Concat.php [NONE]\n                Div.php [NONE]\n                Minus.php [NONE]\n                Mod.php [NONE]\n                Mul.php [NONE]\n                Plus.php [NONE]\n                Pow.php [NONE]\n                ShiftLeft.php [NONE]\n                ShiftRight.php [NONE]\n              AssignOp.php [NONE]\n              AssignRef.php [NONE]\n              BinaryOp/\n                BitwiseAnd.php [NONE]\n                BitwiseOr.php [NONE]\n                BitwiseXor.php [NONE]\n                BooleanAnd.php [NONE]\n                BooleanOr.php [NONE]\n                Coalesce.php [NONE]\n                Concat.php [NONE]\n                Div.php [NONE]\n                Equal.php [NONE]\n                Greater.php [NONE]\n                GreaterOrEqual.php [NONE]\n                Identical.php [NONE]\n                LogicalAnd.php [NONE]\n                LogicalOr.php [NONE]\n                LogicalXor.php [NONE]\n                Minus.php [NONE]\n                Mod.php [NONE]\n                Mul.php [NONE]\n                NotEqual.php [NONE]\n                NotIdentical.php [NONE]\n                Plus.php [NONE]\n                Pow.php [NONE]\n                ShiftLeft.php [NONE]\n                ShiftRight.php [NONE]\n                Smaller.php [NONE]\n                SmallerOrEqual.php [NONE]\n                Spaceship.php [NONE]\n              BinaryOp.php [NONE]\n              BitwiseNot.php [NONE]\n              BooleanNot.php [NONE]\n              Cast/\n                Array_.php [NONE]\n                Bool_.php [NONE]\n                Double.php [NONE]\n                Int_.php [NONE]\n                Object_.php [NONE]\n                String_.php [NONE]\n                Unset_.php [NONE]\n              Cast.php [NONE]\n              ClassConstFetch.php [NONE]\n              Clone_.php [NONE]\n              Closure.php [NONE]\n              ClosureUse.php [NONE]\n              ConstFetch.php [NONE]\n              Empty_.php [NONE]\n              Error.php [NONE]\n              ErrorSuppress.php [NONE]\n              Eval_.php [NONE]\n              Exit_.php [NONE]\n              FuncCall.php [NONE]\n              Include_.php [NONE]\n              Instanceof_.php [NONE]\n              Isset_.php [NONE]\n              List_.php [NONE]\n              MethodCall.php [NONE]\n              New_.php [NONE]\n              PostDec.php [NONE]\n              PostInc.php [NONE]\n              PreDec.php [NONE]\n              PreInc.php [NONE]\n              Print_.php [NONE]\n              PropertyFetch.php [NONE]\n              ShellExec.php [NONE]\n              StaticCall.php [NONE]\n              StaticPropertyFetch.php [NONE]\n              Ternary.php [NONE]\n              UnaryMinus.php [NONE]\n              UnaryPlus.php [NONE]\n              Variable.php [NONE]\n              YieldFrom.php [NONE]\n              Yield_.php [NONE]\n            Expr.php [NONE]\n            FunctionLike.php [NONE]\n            Identifier.php [NONE]\n            Name/\n              FullyQualified.php [NONE]\n              Relative.php [NONE]\n            Name.php [NONE]\n            NullableType.php [NONE]\n            Param.php [NONE]\n            Scalar/\n              DNumber.php [NONE]\n              Encapsed.php [NONE]\n              EncapsedStringPart.php [NONE]\n              LNumber.php [NONE]\n              MagicConst/\n                Class_.php [NONE]\n                Dir.php [NONE]\n                File.php [NONE]\n                Function_.php [NONE]\n                Line.php [NONE]\n                Method.php [NONE]\n                Namespace_.php [NONE]\n                Trait_.php [NONE]\n              MagicConst.php [NONE]\n              String_.php [NONE]\n            Scalar.php [NONE]\n            Stmt/\n              Break_.php [NONE]\n              Case_.php [NONE]\n              Catch_.php [NONE]\n              ClassConst.php [NONE]\n              ClassLike.php [NONE]\n              ClassMethod.php [NONE]\n              Class_.php [NONE]\n              Const_.php [NONE]\n              Continue_.php [NONE]\n              DeclareDeclare.php [NONE]\n              Declare_.php [NONE]\n              Do_.php [NONE]\n              Echo_.php [NONE]\n              ElseIf_.php [NONE]\n              Else_.php [NONE]\n              Expression.php [NONE]\n              Finally_.php [NONE]\n              For_.php [NONE]\n              Foreach_.php [NONE]\n              Function_.php [NONE]\n              Global_.php [NONE]\n              Goto_.php [NONE]\n              GroupUse.php [NONE]\n              HaltCompiler.php [NONE]\n              If_.php [NONE]\n              InlineHTML.php [NONE]\n              Interface_.php [NONE]\n              Label.php [NONE]\n              Namespace_.php [NONE]\n              Nop.php [NONE]\n              Property.php [NONE]\n              PropertyProperty.php [NONE]\n              Return_.php [NONE]\n              StaticVar.php [NONE]\n              Static_.php [NONE]\n              Switch_.php [NONE]\n              Throw_.php [NONE]\n              TraitUse.php [NONE]\n              TraitUseAdaptation/\n                Alias.php [NONE]\n                Precedence.php [NONE]\n              TraitUseAdaptation.php [NONE]\n              Trait_.php [NONE]\n              TryCatch.php [NONE]\n              Unset_.php [NONE]\n              UseUse.php [NONE]\n              Use_.php [NONE]\n              While_.php [NONE]\n            Stmt.php [NONE]\n            VarLikeIdentifier.php [NONE]\n          Node.php [NONE]\n          NodeAbstract.php [NONE]\n          NodeDumper.php [NONE]\n          NodeFinder.php [NONE]\n          NodeTraverser.php [NONE]\n          NodeTraverserInterface.php [NONE]\n          NodeVisitor/\n            CloningVisitor.php [NONE]\n            FindingVisitor.php [NONE]\n            FirstFindingVisitor.php [NONE]\n            NameResolver.php [NONE]\n          NodeVisitor.php [NONE]\n          NodeVisitorAbstract.php [NONE]\n          Parser/\n            Multiple.php [NONE]\n            Php5.php [NONE]\n            Php7.php [NONE]\n            Tokens.php [NONE]\n          Parser.php [NONE]\n          ParserAbstract.php [NONE]\n          ParserFactory.php [NONE]\n          PrettyPrinter/\n            Standard.php [NONE]\n          PrettyPrinterAbstract.php [NONE]\n      test_old/\n        run.php [NONE]\n  symfony/\n    console/\n      Application.php [NONE]\n      Command/\n        Command.php [NONE]\n        HelpCommand.php [NONE]\n        ListCommand.php [NONE]\n        LockableTrait.php [NONE]\n      CommandLoader/\n        CommandLoaderInterface.php [NONE]\n        ContainerCommandLoader.php [NONE]\n        FactoryCommandLoader.php [NONE]\n      ConsoleEvents.php [NONE]\n      DependencyInjection/\n        AddConsoleCommandPass.php [NONE]\n      Descriptor/\n        ApplicationDescription.php [NONE]\n        Descriptor.php [NONE]\n        DescriptorInterface.php [NONE]\n        JsonDescriptor.php [NONE]\n        MarkdownDescriptor.php [NONE]\n        TextDescriptor.php [NONE]\n        XmlDescriptor.php [NONE]\n      Event/\n        ConsoleCommandEvent.php [NONE]\n        ConsoleErrorEvent.php [NONE]\n        ConsoleEvent.php [NONE]\n        ConsoleTerminateEvent.php [NONE]\n      EventListener/\n        ErrorListener.php [NONE]\n      Exception/\n        CommandNotFoundException.php [NONE]\n        ExceptionInterface.php [NONE]\n        InvalidArgumentException.php [NONE]\n        InvalidOptionException.php [NONE]\n        LogicException.php [NONE]\n        RuntimeException.php [NONE]\n      Formatter/\n        OutputFormatter.php [NONE]\n        OutputFormatterInterface.php [NONE]\n        OutputFormatterStyle.php [NONE]\n        OutputFormatterStyleInterface.php [NONE]\n        OutputFormatterStyleStack.php [NONE]\n      Helper/\n        DebugFormatterHelper.php [NONE]\n        DescriptorHelper.php [NONE]\n        FormatterHelper.php [NONE]\n        Helper.php [NONE]\n        HelperInterface.php [NONE]\n        HelperSet.php [NONE]\n        InputAwareHelper.php [NONE]\n        ProcessHelper.php [NONE]\n        ProgressBar.php [NONE]\n        ProgressIndicator.php [NONE]\n        QuestionHelper.php [NONE]\n        SymfonyQuestionHelper.php [NONE]\n        Table.php [NONE]\n        TableCell.php [NONE]\n        TableSeparator.php [NONE]\n        TableStyle.php [NONE]\n      Input/\n        ArgvInput.php [NONE]\n        ArrayInput.php [NONE]\n        Input.php [NONE]\n        InputArgument.php [NONE]\n        InputAwareInterface.php [NONE]\n        InputDefinition.php [NONE]\n        InputInterface.php [NONE]\n        InputOption.php [NONE]\n        StreamableInputInterface.php [NONE]\n        StringInput.php [NONE]\n      Logger/\n        ConsoleLogger.php [NONE]\n      Output/\n        BufferedOutput.php [NONE]\n        ConsoleOutput.php [NONE]\n        ConsoleOutputInterface.php [NONE]\n        NullOutput.php [NONE]\n        Output.php [NONE]\n        OutputInterface.php [NONE]\n        StreamOutput.php [NONE]\n      Question/\n        ChoiceQuestion.php [NONE]\n        ConfirmationQuestion.php [NONE]\n        Question.php [NONE]\n      Style/\n        OutputStyle.php [NONE]\n        StyleInterface.php [NONE]\n        SymfonyStyle.php [NONE]\n      Terminal.php [NONE]\n      Tester/\n        ApplicationTester.php [NONE]\n        CommandTester.php [NONE]\n    intl/\n      Collator/\n        Collator.php [NONE]\n      Data/\n        Bundle/\n          Compiler/\n            BundleCompilerInterface.php [NONE]\n            GenrbCompiler.php [NONE]\n          Reader/\n            BufferedBundleReader.php [NONE]\n            BundleEntryReader.php [NONE]\n            BundleEntryReaderInterface.php [NONE]\n            BundleReaderInterface.php [NONE]\n            IntlBundleReader.php [NONE]\n            JsonBundleReader.php [NONE]\n            PhpBundleReader.php [NONE]\n          Writer/\n            BundleWriterInterface.php [NONE]\n            JsonBundleWriter.php [NONE]\n            PhpBundleWriter.php [NONE]\n            TextBundleWriter.php [NONE]\n        Generator/\n          AbstractDataGenerator.php [NONE]\n          CurrencyDataGenerator.php [NONE]\n          GeneratorConfig.php [NONE]\n          LanguageDataGenerator.php [NONE]\n          LocaleDataGenerator.php [NONE]\n          RegionDataGenerator.php [NONE]\n          ScriptDataGenerator.php [NONE]\n        Provider/\n          CurrencyDataProvider.php [NONE]\n          LanguageDataProvider.php [NONE]\n          LocaleDataProvider.php [NONE]\n          RegionDataProvider.php [NONE]\n          ScriptDataProvider.php [NONE]\n        Util/\n          ArrayAccessibleResourceBundle.php [NONE]\n          LocaleScanner.php [NONE]\n          RecursiveArrayAccess.php [NONE]\n          RingBuffer.php [NONE]\n      DateFormatter/\n        DateFormat/\n          AmPmTransformer.php [NONE]\n          DayOfWeekTransformer.php [NONE]\n          DayOfYearTransformer.php [NONE]\n          DayTransformer.php [NONE]\n          FullTransformer.php [NONE]\n          Hour1200Transformer.php [NONE]\n          Hour1201Transformer.php [NONE]\n          Hour2400Transformer.php [NONE]\n          Hour2401Transformer.php [NONE]\n          HourTransformer.php [NONE]\n          MinuteTransformer.php [NONE]\n          MonthTransformer.php [NONE]\n          QuarterTransformer.php [NONE]\n          SecondTransformer.php [NONE]\n          TimezoneTransformer.php [NONE]\n          Transformer.php [NONE]\n          YearTransformer.php [NONE]\n        IntlDateFormatter.php [NONE]\n      Exception/\n        BadMethodCallException.php [NONE]\n        ExceptionInterface.php [NONE]\n        InvalidArgumentException.php [NONE]\n        MethodArgumentNotImplementedException.php [NONE]\n        MethodArgumentValueNotImplementedException.php [NONE]\n        MethodNotImplementedException.php [NONE]\n        MissingResourceException.php [NONE]\n        NotImplementedException.php [NONE]\n        OutOfBoundsException.php [NONE]\n        ResourceBundleNotFoundException.php [NONE]\n        RuntimeException.php [NONE]\n        UnexpectedTypeException.php [NONE]\n      Globals/\n        IntlGlobals.php [NONE]\n      Intl.php [NONE]\n      Locale/\n        Locale.php [NONE]\n      Locale.php [NONE]\n      NumberFormatter/\n        NumberFormatter.php [NONE]\n      ResourceBundle/\n        CurrencyBundle.php [NONE]\n        CurrencyBundleInterface.php [NONE]\n        LanguageBundle.php [NONE]\n        LanguageBundleInterface.php [NONE]\n        LocaleBundle.php [NONE]\n        LocaleBundleInterface.php [NONE]\n        RegionBundle.php [NONE]\n        RegionBundleInterface.php [NONE]\n        ResourceBundleInterface.php [NONE]\n      Resources/\n        bin/\n          autoload.php [NONE]\n          common.php [NONE]\n          update-data.php [NONE]\n        stubs/\n          Collator.php [NONE]\n          IntlDateFormatter.php [NONE]\n          Locale.php [NONE]\n          NumberFormatter.php [NONE]\n      Util/\n        IcuVersion.php [NONE]\n        IntlTestHelper.php [NONE]\n        SvnCommit.php [NONE]\n        SvnRepository.php [NONE]\n        Version.php [NONE]\n    polyfill-intl-icu/\n      bootstrap.php [NONE]\n    polyfill-mbstring/\n      Mbstring.php [NONE]\n      Resources/\n        unidata/\n          lowerCase.php [NONE]\n          upperCase.php [NONE]\n      bootstrap.php [NONE]\n    polyfill-php72/\n      Php72.php [NONE]\n      bootstrap.php [NONE]\n    var-dumper/\n      Caster/\n        AmqpCaster.php [NONE]\n        ArgsStub.php [NONE]\n        Caster.php [NONE]\n        ClassStub.php [NONE]\n        ConstStub.php [NONE]\n        CutArrayStub.php [NONE]\n        CutStub.php [NONE]\n        DOMCaster.php [NONE]\n        DateCaster.php [NONE]\n        DoctrineCaster.php [NONE]\n        EnumStub.php [NONE]\n        ExceptionCaster.php [NONE]\n        FrameStub.php [NONE]\n        LinkStub.php [NONE]\n        PdoCaster.php [NONE]\n        PgSqlCaster.php [NONE]\n        RedisCaster.php [NONE]\n        ReflectionCaster.php [NONE]\n        ResourceCaster.php [NONE]\n        SplCaster.php [NONE]\n        StubCaster.php [NONE]\n        SymfonyCaster.php [NONE]\n        TraceStub.php [NONE]\n        XmlReaderCaster.php [NONE]\n        XmlResourceCaster.php [NONE]\n      Cloner/\n        AbstractCloner.php [NONE]\n        ClonerInterface.php [NONE]\n        Cursor.php [NONE]\n        Data.php [NONE]\n        DumperInterface.php [NONE]\n        Stub.php [NONE]\n        VarCloner.php [NONE]\n      Dumper/\n        AbstractDumper.php [NONE]\n        CliDumper.php [NONE]\n        DataDumperInterface.php [NONE]\n        HtmlDumper.php [NONE]\n      Exception/\n        ThrowingCasterException.php [NONE]\n      Resources/\n        functions/\n          dump.php [NONE]\n      VarDumper.php [NONE]\nsrc/\n  CodeCleaner/\n    AbstractClassPass.php [NONE]\n    AssignThisVariablePass.php [NONE]\n    CallTimePassByReferencePass.php [NONE]\n    CalledClassPass.php [NONE]\n    CodeCleanerPass.php [NONE]\n    ExitPass.php [NONE]\n    FinalClassPass.php [NONE]\n    FunctionContextPass.php [NONE]\n    FunctionReturnInWriteContextPass.php [NONE]\n    ImplicitReturnPass.php [NONE]\n    InstanceOfPass.php [NONE]\n    LeavePsyshAlonePass.php [NONE]\n    LegacyEmptyPass.php [NONE]\n    LoopContextPass.php [NONE]\n    MagicConstantsPass.php [NONE]\n    NamespaceAwarePass.php [NONE]\n    NamespacePass.php [NONE]\n    NoReturnValue.php [NONE]\n    PassableByReferencePass.php [NONE]\n    RequirePass.php [NONE]\n    StrictTypesPass.php [NONE]\n    UseStatementPass.php [NONE]\n    ValidClassNamePass.php [NONE]\n    ValidConstantPass.php [NONE]\n    ValidConstructorPass.php [NONE]\n    ValidFunctionNamePass.php [NONE]\n  CodeCleaner.php [NONE]\n  Command/\n    BufferCommand.php [NONE]\n    ClearCommand.php [NONE]\n    Command.php [NONE]\n    DocCommand.php [NONE]\n    DumpCommand.php [NONE]\n    EditCommand.php [NONE]\n    ExitCommand.php [NONE]\n    HelpCommand.php [NONE]\n    HistoryCommand.php [NONE]\n    ListCommand/\n      ClassConstantEnumerator.php [NONE]\n      ClassEnumerator.php [NONE]\n      ConstantEnumerator.php [NONE]\n      Enumerator.php [NONE]\n      FunctionEnumerator.php [NONE]\n      GlobalVariableEnumerator.php [NONE]\n      InterfaceEnumerator.php [NONE]\n      MethodEnumerator.php [NONE]\n      PropertyEnumerator.php [NONE]\n      TraitEnumerator.php [NONE]\n      VariableEnumerator.php [NONE]\n    ListCommand.php [NONE]\n    ParseCommand.php [NONE]\n    PsyVersionCommand.php [NONE]\n    ReflectingCommand.php [NONE]\n    ShowCommand.php [NONE]\n    SudoCommand.php [NONE]\n    ThrowUpCommand.php [NONE]\n    TimeitCommand.php [NONE]\n    TraceCommand.php [NONE]\n    WhereamiCommand.php [NONE]\n    WtfCommand.php [NONE]\n  ConfigPaths.php [NONE]\n  Configuration.php [NONE]\n  ConsoleColorFactory.php [NONE]\n  Context.php [NONE]\n  ContextAware.php [NONE]\n  Exception/\n    BreakException.php [NONE]\n    DeprecatedException.php [NONE]\n    ErrorException.php [NONE]\n    Exception.php [NONE]\n    FatalErrorException.php [NONE]\n    ParseErrorException.php [NONE]\n    RuntimeException.php [NONE]\n    ThrowUpException.php [NONE]\n    TypeErrorException.php [NONE]\n  ExecutionClosure.php [NONE]\n  ExecutionLoop/\n    AbstractListener.php [NONE]\n    Listener.php [NONE]\n    ProcessForker.php [NONE]\n    RunkitReloader.php [NONE]\n  ExecutionLoop.php [NONE]\n  Formatter/\n    CodeFormatter.php [NONE]\n    DocblockFormatter.php [NONE]\n    Formatter.php [NONE]\n    SignatureFormatter.php [NONE]\n  Input/\n    CodeArgument.php [NONE]\n    FilterOptions.php [NONE]\n    ShellInput.php [NONE]\n    SilentInput.php [NONE]\n  Output/\n    OutputPager.php [NONE]\n    PassthruPager.php [NONE]\n    ProcOutputPager.php [NONE]\n    ShellOutput.php [NONE]\n  ParserFactory.php [NONE]\n  Readline/\n    GNUReadline.php [NONE]\n    HoaConsole.php [NONE]\n    Libedit.php [NONE]\n    Readline.php [NONE]\n    Transient.php [NONE]\n  Reflection/\n    ReflectionConstant.php [NONE]\n    ReflectionLanguageConstruct.php [NONE]\n    ReflectionLanguageConstructParameter.php [NONE]\n  Shell.php [NONE]\n  Sudo/\n    SudoVisitor.php [NONE]\n  Sudo.php [NONE]\n  TabCompletion/\n    AutoCompleter.php [NONE]\n    Matcher/\n      AbstractContextAwareMatcher.php [NONE]\n      AbstractDefaultParametersMatcher.php [NONE]\n      AbstractMatcher.php [NONE]\n      ClassAttributesMatcher.php [NONE]\n      ClassMethodDefaultParametersMatcher.php [NONE]\n      ClassMethodsMatcher.php [NONE]\n      ClassNamesMatcher.php [NONE]\n      CommandsMatcher.php [NONE]\n      ConstantsMatcher.php [NONE]\n      FunctionDefaultParametersMatcher.php [NONE]\n      FunctionsMatcher.php [NONE]\n      KeywordsMatcher.php [NONE]\n      MongoClientMatcher.php [NONE]\n      MongoDatabaseMatcher.php [NONE]\n      ObjectAttributesMatcher.php [NONE]\n      ObjectMethodDefaultParametersMatcher.php [NONE]\n      ObjectMethodsMatcher.php [NONE]\n      VariablesMatcher.php [NONE]\n  Util/\n    Docblock.php [NONE]\n    Json.php [NONE]\n    Mirror.php [NONE]\n    Str.php [NONE]\n  VarDumper/\n    Cloner.php [NONE]\n    Dumper.php [NONE]\n    Presenter.php [NONE]\n    PresenterAware.php [NONE]\n  VersionUpdater/\n    Checker.php [NONE]\n    GitHubChecker.php [NONE]\n    IntervalChecker.php [NONE]\n    NoopChecker.php [NONE]\n  functions.php [NONE]\n\n```\n\n\n\nBuild with Box\n\n```\ntime make build                                                                                                                                                                                                                tfidry@Theos-MBP\nThe composer.lock file is not synchronized with the composer.json file\nbin/build-stub\nrm -rf build/psysh || true\nmkdir build/psysh\ncp -R bin src box.json.dist composer.json composer.lock build/stub build/psysh/\ncomposer update --working-dir build/psysh --prefer-stable --no-dev --no-progress --classmap-authoritative --no-interaction --verbose --prefer-dist\nLoading composer repositories with package information\nUpdating dependencies\nDependency resolution completed in 0.113 seconds\nAnalyzed 3084 packages to resolve dependencies\nAnalyzed 116494 rules to resolve dependencies\nDependency resolution completed in 0.000 seconds\nPackage operations: 9 installs, 0 updates, 0 removals\nInstalls: dnoegel/php-xdg-base-dir:0.1, psr/log:1.0.2, symfony/debug:v3.4.9, symfony/polyfill-mbstring:v1.8.0, symfony/console:v3.4.9, symfony/var-dumper:v3.4.9, nikic/php-parser:v4.0.1, jakub-onderka/php-console-color:0.1, jakub-onderka/php-console-highlighter:v0.3.2\n  - Installing dnoegel/php-xdg-base-dir (0.1): Loading from cache\n Extracting archive  - Installing psr/log (1.0.2): Loading from cache\n Extracting archive  - Installing symfony/debug (v3.4.9): Loading from cache\n Extracting archive  - Installing symfony/polyfill-mbstring (v1.8.0): Loading from cache\n Extracting archive  - Installing symfony/console (v3.4.9): Loading from cache\n Extracting archive  - Installing symfony/var-dumper (v3.4.9): Loading from cache\n Extracting archive  - Installing nikic/php-parser (v4.0.1): Loading from cache\n Extracting archive  - Installing jakub-onderka/php-console-color (0.1): Loading from cache\n Extracting archive  - Installing jakub-onderka/php-console-highlighter (v0.3.2): Loading from cache\n Extracting archiveWriting lock file\nGenerating optimized autoload files\nvendor/bin/box compile --working-dir build/psysh\n\n    ____\n   / __ )____  _  __\n  / __  / __ \\| |/_/\n / /_/ / /_/ />  <\n/_____/\\____/_/|_|\n\n\nBox (repo)\n\n\n // Loading the configuration file \"/Users/tfidry/Project/psysh/build/psysh/box.json.dist\".\n\nBuilding the PHAR \"/Users/tfidry/Project/psysh/build/psysh/bin/psysh.phar\"\n? Registering compactors\n  + KevinGH\\Box\\Compactor\\Php\n? Adding main file: /Users/tfidry/Project/psysh/build/psysh/bin/psysh\n? Adding requirements checker\n? Adding binary files\n    > No file found\n? Adding files\n    > 516 file(s)\n? Using stub file: /Users/tfidry/Project/psysh/build/psysh/stub\n? No compression\n? Setting file permissions to 0755\n* Done.\n\n // You can inspect the generated PHAR with the \"info\" command.\n\n // PHAR size: 1.72MB\n // Memory usage: 8.60MB (peak: 21.38MB), time: 1.04s\n\ncp build/psysh/bin/psysh.phar build/psysh.phar\nrm -rf build/psysh-compat || true\nmkdir build/psysh-compat\ncp -R bin src box.json.dist composer.json composer.lock build/stub build/psysh-compat/\ncomposer require --working-dir build/psysh-compat symfony/intl hoa/console --no-progress --no-update --no-interaction --verbose\nUsing version ^3.4 for symfony/intl\nUsing version ^3.17 for hoa/console\n./composer.json has been updated\ncomposer update --working-dir build/psysh-compat --prefer-stable --no-dev --no-progress --classmap-authoritative --no-interaction --verbose --prefer-dist\nLoading composer repositories with package information\nUpdating dependencies\nDependency resolution completed in 0.138 seconds\nAnalyzed 3459 packages to resolve dependencies\nAnalyzed 117077 rules to resolve dependencies\nDependency resolution completed in 0.000 seconds\nPackage operations: 20 installs, 0 updates, 0 removals\nInstalls: dnoegel/php-xdg-base-dir:0.1, psr/log:1.0.2, symfony/debug:v3.4.9, symfony/polyfill-mbstring:v1.8.0, symfony/console:v3.4.9, symfony/var-dumper:v3.4.9, nikic/php-parser:v4.0.1, jakub-onderka/php-console-color:0.1, jakub-onderka/php-console-highlighter:v0.3.2, hoa/exception:1.17.01.16, hoa/event:1.17.01.13, hoa/consistency:1.17.05.02, hoa/ustring:4.17.01.16, hoa/protocol:1.17.01.14, hoa/stream:1.17.02.21, hoa/iterator:2.17.01.10, hoa/file:1.17.07.11, hoa/console:3.17.05.02, symfony/polyfill-intl-icu:v1.8.0, symfony/intl:v3.4.9\n  - Installing dnoegel/php-xdg-base-dir (0.1): Loading from cache\n Extracting archive  - Installing psr/log (1.0.2): Loading from cache\n Extracting archive  - Installing symfony/debug (v3.4.9): Loading from cache\n Extracting archive  - Installing symfony/polyfill-mbstring (v1.8.0): Loading from cache\n Extracting archive  - Installing symfony/console (v3.4.9): Loading from cache\n Extracting archive  - Installing symfony/var-dumper (v3.4.9): Loading from cache\n Extracting archive  - Installing nikic/php-parser (v4.0.1): Loading from cache\n Extracting archive  - Installing jakub-onderka/php-console-color (0.1): Loading from cache\n Extracting archive  - Installing jakub-onderka/php-console-highlighter (v0.3.2): Loading from cache\n Extracting archive  - Installing hoa/exception (1.17.01.16): Loading from cache\n Extracting archive  - Installing hoa/event (1.17.01.13): Loading from cache\n Extracting archive  - Installing hoa/consistency (1.17.05.02): Loading from cache\n Extracting archive  - Installing hoa/ustring (4.17.01.16): Loading from cache\n Extracting archive  - Installing hoa/protocol (1.17.01.14): Loading from cache\n Extracting archive  - Installing hoa/stream (1.17.02.21): Loading from cache\n Extracting archive  - Installing hoa/iterator (2.17.01.10): Loading from cache\n Extracting archive  - Installing hoa/file (1.17.07.11): Loading from cache\n Extracting archive  - Installing hoa/console (3.17.05.02): Loading from cache\n Extracting archive  - Installing symfony/polyfill-intl-icu (v1.8.0): Loading from cache\n Extracting archive  - Installing symfony/intl (v3.4.9): Loading from cache\n Extracting archiveWriting lock file\nGenerating optimized autoload files\nvendor/bin/box compile --working-dir build/psysh-compat\n\n    ____\n   / __ )____  _  __\n  / __  / __ \\| |/_/\n / /_/ / /_/ />  <\n/_____/\\____/_/|_|\n\n\nBox (repo)\n\n\n // Loading the configuration file \"/Users/tfidry/Project/psysh/build/psysh-compat/box.json.dist\".\n\nBuilding the PHAR \"/Users/tfidry/Project/psysh/build/psysh-compat/bin/psysh.phar\"\n? Registering compactors\n  + KevinGH\\Box\\Compactor\\Php\n? Adding main file: /Users/tfidry/Project/psysh/build/psysh-compat/bin/psysh\n? Adding requirements checker\n? Adding binary files\n    > No file found\n? Adding files\n    > 1778 file(s)\n? Using stub file: /Users/tfidry/Project/psysh/build/psysh-compat/stub\n? No compression\n? Setting file permissions to 0755\n* Done.\n\n // You can inspect the generated PHAR with the \"info\" command.\n\n // PHAR size: 10.71MB\n // Memory usage: 9.59MB (peak: 22.44MB), time: 2.19s\n\ncp build/psysh-compat/bin/psysh.phar build/psysh-compat.phar\nrm -rf build/psysh-php54 ||\u00a0true\nmkdir build/psysh-php54\ncp -R bin src box.json.dist composer.json composer.lock build/stub build/psysh-php54/\ncomposer config --working-dir build/psysh-php54 platform.php 5.4\ncomposer update --working-dir build/psysh-php54 --prefer-stable --no-dev --no-progress --classmap-authoritative --no-interaction --verbose --prefer-dist\nLoading composer repositories with package information\nUpdating dependencies\nDependency resolution completed in 0.201 seconds\nAnalyzed 3084 packages to resolve dependencies\nAnalyzed 116495 rules to resolve dependencies\nDependency resolution completed in 0.000 seconds\nPackage operations: 9 installs, 0 updates, 0 removals\nInstalls: dnoegel/php-xdg-base-dir:0.1, psr/log:1.0.2, symfony/debug:v2.8.39, symfony/polyfill-mbstring:v1.8.0, symfony/console:v2.8.39, symfony/var-dumper:v2.8.39, nikic/php-parser:v2.1.1, jakub-onderka/php-console-color:0.1, jakub-onderka/php-console-highlighter:v0.3.2\n  - Installing dnoegel/php-xdg-base-dir (0.1): Loading from cache\n Extracting archive  - Installing psr/log (1.0.2): Loading from cache\n Extracting archive  - Installing symfony/debug (v2.8.39): Loading from cache\n Extracting archive  - Installing symfony/polyfill-mbstring (v1.8.0): Loading from cache\n Extracting archive  - Installing symfony/console (v2.8.39): Loading from cache\n Extracting archive  - Installing symfony/var-dumper (v2.8.39): Loading from cache\n Extracting archive  - Installing nikic/php-parser (v2.1.1): Loading from cache\n Extracting archive  - Installing jakub-onderka/php-console-color (0.1): Loading from cache\n Extracting archive  - Installing jakub-onderka/php-console-highlighter (v0.3.2): Loading from cache\n Extracting archiveWriting lock file\nGenerating optimized autoload files\nvendor/bin/box compile --working-dir build/psysh-php54\n\n    ____\n   / __ )____  _  __\n  / __  / __ \\| |/_/\n / /_/ / /_/ />  <\n/_____/\\____/_/|_|\n\n\nBox (repo)\n\n\n // Loading the configuration file \"/Users/tfidry/Project/psysh/build/psysh-php54/box.json.dist\".\n\nBuilding the PHAR \"/Users/tfidry/Project/psysh/build/psysh-php54/bin/psysh.phar\"\n? Registering compactors\n  + KevinGH\\Box\\Compactor\\Php\n? Adding main file: /Users/tfidry/Project/psysh/build/psysh-php54/bin/psysh\n? Adding requirements checker\n? Adding binary files\n    > No file found\n? Adding files\n    > 490 file(s)\n? Using stub file: /Users/tfidry/Project/psysh/build/psysh-php54/stub\n? No compression\n? Setting file permissions to 0755\n* Done.\n\n // You can inspect the generated PHAR with the \"info\" command.\n\n // PHAR size: 1.56MB\n // Memory usage: 8.50MB (peak: 21.20MB), time: 0.96s\n\ncp build/psysh-php54/bin/psysh.phar build/psysh-php54.phar\nrm -rf build/psysh-php54-compat || true\nmkdir build/psysh-php54-compat\ncp -R bin src box.json.dist composer.json composer.lock build/stub build/psysh-php54-compat/\ncomposer config --working-dir build/psysh-php54-compat platform.php 5.4\ncomposer require --working-dir build/psysh-php54-compat symfony/intl hoa/console:^2.15 --no-progress --no-update --no-interaction --verbose\nUsing version ^2.8 for symfony/intl\n./composer.json has been updated\ncomposer update --working-dir build/psysh-php54-compat --prefer-stable --no-dev --no-progress --classmap-authoritative --no-interaction --verbose --prefer-dist\nLoading composer repositories with package information\nUpdating dependencies\nDependency resolution completed in 0.201 seconds\nAnalyzed 3425 packages to resolve dependencies\nAnalyzed 117918 rules to resolve dependencies\nDependency resolution completed in 0.000 seconds\nPackage operations: 16 installs, 0 updates, 0 removals\nInstalls: dnoegel/php-xdg-base-dir:0.1, psr/log:1.0.2, symfony/debug:v2.8.39, symfony/polyfill-mbstring:v1.8.0, symfony/console:v2.8.39, symfony/var-dumper:v2.8.39, nikic/php-parser:v2.1.1, jakub-onderka/php-console-color:0.1, jakub-onderka/php-console-highlighter:v0.3.2, hoa/core:2.15.11.09, hoa/ustring:3.15.11.09, hoa/stream:0.15.10.26, hoa/console:2.15.07.27, symfony/polyfill-php54:v1.8.0, symfony/polyfill-intl-icu:v1.8.0, symfony/intl:v2.8.39\n  - Installing dnoegel/php-xdg-base-dir (0.1): Loading from cache\n Extracting archive  - Installing psr/log (1.0.2): Loading from cache\n Extracting archive  - Installing symfony/debug (v2.8.39): Loading from cache\n Extracting archive  - Installing symfony/polyfill-mbstring (v1.8.0): Loading from cache\n Extracting archive  - Installing symfony/console (v2.8.39): Loading from cache\n Extracting archive  - Installing symfony/var-dumper (v2.8.39): Loading from cache\n Extracting archive  - Installing nikic/php-parser (v2.1.1): Loading from cache\n Extracting archive  - Installing jakub-onderka/php-console-color (0.1): Loading from cache\n Extracting archive  - Installing jakub-onderka/php-console-highlighter (v0.3.2): Loading from cache\n Extracting archive  - Installing hoa/core (2.15.11.09): Loading from cache\n Extracting archive  - Installing hoa/ustring (3.15.11.09): Loading from cache\n Extracting archive  - Installing hoa/stream (0.15.10.26): Loading from cache\n Extracting archive  - Installing hoa/console (2.15.07.27): Loading from cache\n Extracting archive  - Installing symfony/polyfill-php54 (v1.8.0): Loading from cache\n Extracting archive  - Installing symfony/polyfill-intl-icu (v1.8.0): Loading from cache\n Extracting archive  - Installing symfony/intl (v2.8.39): Loading from cache\n Extracting archivePackage hoa/core is abandoned, you should avoid using it. Use hoa/consistency instead.\nWriting lock file\nGenerating optimized autoload files\nvendor/bin/box compile --working-dir build/psysh-php54-compat\n\n    ____\n   / __ )____  _  __\n  / __  / __ \\| |/_/\n / /_/ / /_/ />  <\n/_____/\\____/_/|_|\n\n\nBox (repo)\n\n\n // Loading the configuration file\n // \"/Users/tfidry/Project/psysh/build/psysh-php54-compat/box.json.dist\".\n\nBuilding the PHAR \"/Users/tfidry/Project/psysh/build/psysh-php54-compat/bin/psysh.phar\"\n? Registering compactors\n  + KevinGH\\Box\\Compactor\\Php\n? Adding main file: /Users/tfidry/Project/psysh/build/psysh-php54-compat/bin/psysh\n? Adding requirements checker\n? Adding binary files\n    > No file found\n? Adding files\n    > 1687 file(s)\n? Using stub file: /Users/tfidry/Project/psysh/build/psysh-php54-compat/stub\n? No compression\n? Setting file permissions to 0755\n* Done.\n\n // You can inspect the generated PHAR with the \"info\" command.\n\n // PHAR size: 10.47MB\n // Memory usage: 9.45MB (peak: 22.18MB), time: 2.11s\n\ncp build/psysh-php54-compat/bin/psysh.phar build/psysh-php54-compat.phar\nmake build  15.94s user 6.00s system 88% cpu 24.721 total\n```\n\n\nBox `psysh.phar` details\n\n```\n\nAPI Version: 1.1.0\n\nArchive Compression: None\n\nSignature: SHA-1\nSignature Hash: 56342F0F6550C8FD32AEC386B22730657E98B8A6\n\nMetadata: None\n\nContents: 554 files (1.72MB)\n.box/\n  .requirements.php [NONE]\n  bin/\n    check-requirements.php [NONE]\n  check_requirements.php [NONE]\n  composer.json [NONE]\n  composer.lock [NONE]\n  src/\n    Checker.php [NONE]\n    IO.php [NONE]\n    Printer.php [NONE]\n    Requirement.php [NONE]\n    RequirementCollection.php [NONE]\n    Terminal.php [NONE]\n  vendor/\n    autoload.php [NONE]\n    composer/\n      ClassLoader.php [NONE]\n      LICENSE [NONE]\n      autoload_classmap.php [NONE]\n      autoload_namespaces.php [NONE]\n      autoload_psr4.php [NONE]\n      autoload_real.php [NONE]\n      autoload_static.php [NONE]\n      installed.json [NONE]\n      semver/\n        src/\n          Comparator.php [NONE]\n          Constraint/\n            AbstractConstraint.php [NONE]\n            Constraint.php [NONE]\n            ConstraintInterface.php [NONE]\n            EmptyConstraint.php [NONE]\n            MultiConstraint.php [NONE]\n          Semver.php [NONE]\n          VersionParser.php [NONE]\nbin/\n  psysh [NONE]\ncomposer.json [NONE]\ncomposer.lock [NONE]\nsrc/\n  CodeCleaner/\n    AbstractClassPass.php [NONE]\n    AssignThisVariablePass.php [NONE]\n    CallTimePassByReferencePass.php [NONE]\n    CalledClassPass.php [NONE]\n    CodeCleanerPass.php [NONE]\n    ExitPass.php [NONE]\n    FinalClassPass.php [NONE]\n    FunctionContextPass.php [NONE]\n    FunctionReturnInWriteContextPass.php [NONE]\n    ImplicitReturnPass.php [NONE]\n    InstanceOfPass.php [NONE]\n    LeavePsyshAlonePass.php [NONE]\n    LegacyEmptyPass.php [NONE]\n    LoopContextPass.php [NONE]\n    MagicConstantsPass.php [NONE]\n    NamespaceAwarePass.php [NONE]\n    NamespacePass.php [NONE]\n    NoReturnValue.php [NONE]\n    PassableByReferencePass.php [NONE]\n    RequirePass.php [NONE]\n    StrictTypesPass.php [NONE]\n    UseStatementPass.php [NONE]\n    ValidClassNamePass.php [NONE]\n    ValidConstantPass.php [NONE]\n    ValidConstructorPass.php [NONE]\n    ValidFunctionNamePass.php [NONE]\n  CodeCleaner.php [NONE]\n  Command/\n    BufferCommand.php [NONE]\n    ClearCommand.php [NONE]\n    Command.php [NONE]\n    DocCommand.php [NONE]\n    DumpCommand.php [NONE]\n    EditCommand.php [NONE]\n    ExitCommand.php [NONE]\n    HelpCommand.php [NONE]\n    HistoryCommand.php [NONE]\n    ListCommand/\n      ClassConstantEnumerator.php [NONE]\n      ClassEnumerator.php [NONE]\n      ConstantEnumerator.php [NONE]\n      Enumerator.php [NONE]\n      FunctionEnumerator.php [NONE]\n      GlobalVariableEnumerator.php [NONE]\n      InterfaceEnumerator.php [NONE]\n      MethodEnumerator.php [NONE]\n      PropertyEnumerator.php [NONE]\n      TraitEnumerator.php [NONE]\n      VariableEnumerator.php [NONE]\n    ListCommand.php [NONE]\n    ParseCommand.php [NONE]\n    PsyVersionCommand.php [NONE]\n    ReflectingCommand.php [NONE]\n    ShowCommand.php [NONE]\n    SudoCommand.php [NONE]\n    ThrowUpCommand.php [NONE]\n    TimeitCommand.php [NONE]\n    TraceCommand.php [NONE]\n    WhereamiCommand.php [NONE]\n    WtfCommand.php [NONE]\n  ConfigPaths.php [NONE]\n  Configuration.php [NONE]\n  ConsoleColorFactory.php [NONE]\n  Context.php [NONE]\n  ContextAware.php [NONE]\n  Exception/\n    BreakException.php [NONE]\n    DeprecatedException.php [NONE]\n    ErrorException.php [NONE]\n    Exception.php [NONE]\n    FatalErrorException.php [NONE]\n    ParseErrorException.php [NONE]\n    RuntimeException.php [NONE]\n    ThrowUpException.php [NONE]\n    TypeErrorException.php [NONE]\n  ExecutionClosure.php [NONE]\n  ExecutionLoop/\n    AbstractListener.php [NONE]\n    Listener.php [NONE]\n    ProcessForker.php [NONE]\n    RunkitReloader.php [NONE]\n  ExecutionLoop.php [NONE]\n  Formatter/\n    CodeFormatter.php [NONE]\n    DocblockFormatter.php [NONE]\n    Formatter.php [NONE]\n    SignatureFormatter.php [NONE]\n  Input/\n    CodeArgument.php [NONE]\n    FilterOptions.php [NONE]\n    ShellInput.php [NONE]\n    SilentInput.php [NONE]\n  Output/\n    OutputPager.php [NONE]\n    PassthruPager.php [NONE]\n    ProcOutputPager.php [NONE]\n    ShellOutput.php [NONE]\n  ParserFactory.php [NONE]\n  Readline/\n    GNUReadline.php [NONE]\n    HoaConsole.php [NONE]\n    Libedit.php [NONE]\n    Readline.php [NONE]\n    Transient.php [NONE]\n  Reflection/\n    ReflectionConstant.php [NONE]\n    ReflectionLanguageConstruct.php [NONE]\n    ReflectionLanguageConstructParameter.php [NONE]\n  Shell.php [NONE]\n  Sudo/\n    SudoVisitor.php [NONE]\n  Sudo.php [NONE]\n  TabCompletion/\n    AutoCompleter.php [NONE]\n    Matcher/\n      AbstractContextAwareMatcher.php [NONE]\n      AbstractDefaultParametersMatcher.php [NONE]\n      AbstractMatcher.php [NONE]\n      ClassAttributesMatcher.php [NONE]\n      ClassMethodDefaultParametersMatcher.php [NONE]\n      ClassMethodsMatcher.php [NONE]\n      ClassNamesMatcher.php [NONE]\n      CommandsMatcher.php [NONE]\n      ConstantsMatcher.php [NONE]\n      FunctionDefaultParametersMatcher.php [NONE]\n      FunctionsMatcher.php [NONE]\n      KeywordsMatcher.php [NONE]\n      MongoClientMatcher.php [NONE]\n      MongoDatabaseMatcher.php [NONE]\n      ObjectAttributesMatcher.php [NONE]\n      ObjectMethodDefaultParametersMatcher.php [NONE]\n      ObjectMethodsMatcher.php [NONE]\n      VariablesMatcher.php [NONE]\n  Util/\n    Docblock.php [NONE]\n    Json.php [NONE]\n    Mirror.php [NONE]\n    Str.php [NONE]\n  VarDumper/\n    Cloner.php [NONE]\n    Dumper.php [NONE]\n    Presenter.php [NONE]\n    PresenterAware.php [NONE]\n  VersionUpdater/\n    Checker.php [NONE]\n    GitHubChecker.php [NONE]\n    IntervalChecker.php [NONE]\n    NoopChecker.php [NONE]\n  functions.php [NONE]\nvendor/\n  autoload.php [NONE]\n  composer/\n    ClassLoader.php [NONE]\n    LICENSE [NONE]\n    autoload_classmap.php [NONE]\n    autoload_files.php [NONE]\n    autoload_namespaces.php [NONE]\n    autoload_psr4.php [NONE]\n    autoload_real.php [NONE]\n    autoload_static.php [NONE]\n    installed.json [NONE]\n  dnoegel/\n    php-xdg-base-dir/\n      src/\n        Xdg.php [NONE]\n  jakub-onderka/\n    php-console-color/\n      example.php [NONE]\n      src/\n        JakubOnderka/\n          PhpConsoleColor/\n            ConsoleColor.php [NONE]\n            InvalidStyleException.php [NONE]\n    php-console-highlighter/\n      src/\n        JakubOnderka/\n          PhpConsoleHighlighter/\n            Highlighter.php [NONE]\n  nikic/\n    php-parser/\n      bin/\n        php-parse [NONE]\n      grammar/\n        parser.template [NONE]\n        php5.y [NONE]\n        php7.y [NONE]\n        rebuildParsers.php [NONE]\n        tokens.template [NONE]\n        tokens.y [NONE]\n      lib/\n        PhpParser/\n          Builder/\n            Class_.php [NONE]\n            Declaration.php [NONE]\n            FunctionLike.php [NONE]\n            Function_.php [NONE]\n            Interface_.php [NONE]\n            Method.php [NONE]\n            Namespace_.php [NONE]\n            Param.php [NONE]\n            Property.php [NONE]\n            Trait_.php [NONE]\n            Use_.php [NONE]\n          Builder.php [NONE]\n          BuilderFactory.php [NONE]\n          BuilderHelpers.php [NONE]\n          Comment/\n            Doc.php [NONE]\n          Comment.php [NONE]\n          ConstExprEvaluationException.php [NONE]\n          ConstExprEvaluator.php [NONE]\n          Error.php [NONE]\n          ErrorHandler/\n            Collecting.php [NONE]\n            Throwing.php [NONE]\n          ErrorHandler.php [NONE]\n          Internal/\n            DiffElem.php [NONE]\n            Differ.php [NONE]\n            PrintableNewAnonClassNode.php [NONE]\n            TokenStream.php [NONE]\n          JsonDecoder.php [NONE]\n          Lexer/\n            Emulative.php [NONE]\n          Lexer.php [NONE]\n          NameContext.php [NONE]\n          Node/\n            Arg.php [NONE]\n            Const_.php [NONE]\n            Expr/\n              ArrayDimFetch.php [NONE]\n              ArrayItem.php [NONE]\n              Array_.php [NONE]\n              Assign.php [NONE]\n              AssignOp/\n                BitwiseAnd.php [NONE]\n                BitwiseOr.php [NONE]\n                BitwiseXor.php [NONE]\n                Concat.php [NONE]\n                Div.php [NONE]\n                Minus.php [NONE]\n                Mod.php [NONE]\n                Mul.php [NONE]\n                Plus.php [NONE]\n                Pow.php [NONE]\n                ShiftLeft.php [NONE]\n                ShiftRight.php [NONE]\n              AssignOp.php [NONE]\n              AssignRef.php [NONE]\n              BinaryOp/\n                BitwiseAnd.php [NONE]\n                BitwiseOr.php [NONE]\n                BitwiseXor.php [NONE]\n                BooleanAnd.php [NONE]\n                BooleanOr.php [NONE]\n                Coalesce.php [NONE]\n                Concat.php [NONE]\n                Div.php [NONE]\n                Equal.php [NONE]\n                Greater.php [NONE]\n                GreaterOrEqual.php [NONE]\n                Identical.php [NONE]\n                LogicalAnd.php [NONE]\n                LogicalOr.php [NONE]\n                LogicalXor.php [NONE]\n                Minus.php [NONE]\n                Mod.php [NONE]\n                Mul.php [NONE]\n                NotEqual.php [NONE]\n                NotIdentical.php [NONE]\n                Plus.php [NONE]\n                Pow.php [NONE]\n                ShiftLeft.php [NONE]\n                ShiftRight.php [NONE]\n                Smaller.php [NONE]\n                SmallerOrEqual.php [NONE]\n                Spaceship.php [NONE]\n              BinaryOp.php [NONE]\n              BitwiseNot.php [NONE]\n              BooleanNot.php [NONE]\n              Cast/\n                Array_.php [NONE]\n                Bool_.php [NONE]\n                Double.php [NONE]\n                Int_.php [NONE]\n                Object_.php [NONE]\n                String_.php [NONE]\n                Unset_.php [NONE]\n              Cast.php [NONE]\n              ClassConstFetch.php [NONE]\n              Clone_.php [NONE]\n              Closure.php [NONE]\n              ClosureUse.php [NONE]\n              ConstFetch.php [NONE]\n              Empty_.php [NONE]\n              Error.php [NONE]\n              ErrorSuppress.php [NONE]\n              Eval_.php [NONE]\n              Exit_.php [NONE]\n              FuncCall.php [NONE]\n              Include_.php [NONE]\n              Instanceof_.php [NONE]\n              Isset_.php [NONE]\n              List_.php [NONE]\n              MethodCall.php [NONE]\n              New_.php [NONE]\n              PostDec.php [NONE]\n              PostInc.php [NONE]\n              PreDec.php [NONE]\n              PreInc.php [NONE]\n              Print_.php [NONE]\n              PropertyFetch.php [NONE]\n              ShellExec.php [NONE]\n              StaticCall.php [NONE]\n              StaticPropertyFetch.php [NONE]\n              Ternary.php [NONE]\n              UnaryMinus.php [NONE]\n              UnaryPlus.php [NONE]\n              Variable.php [NONE]\n              YieldFrom.php [NONE]\n              Yield_.php [NONE]\n            Expr.php [NONE]\n            FunctionLike.php [NONE]\n            Identifier.php [NONE]\n            Name/\n              FullyQualified.php [NONE]\n              Relative.php [NONE]\n            Name.php [NONE]\n            NullableType.php [NONE]\n            Param.php [NONE]\n            Scalar/\n              DNumber.php [NONE]\n              Encapsed.php [NONE]\n              EncapsedStringPart.php [NONE]\n              LNumber.php [NONE]\n              MagicConst/\n                Class_.php [NONE]\n                Dir.php [NONE]\n                File.php [NONE]\n                Function_.php [NONE]\n                Line.php [NONE]\n                Method.php [NONE]\n                Namespace_.php [NONE]\n                Trait_.php [NONE]\n              MagicConst.php [NONE]\n              String_.php [NONE]\n            Scalar.php [NONE]\n            Stmt/\n              Break_.php [NONE]\n              Case_.php [NONE]\n              Catch_.php [NONE]\n              ClassConst.php [NONE]\n              ClassLike.php [NONE]\n              ClassMethod.php [NONE]\n              Class_.php [NONE]\n              Const_.php [NONE]\n              Continue_.php [NONE]\n              DeclareDeclare.php [NONE]\n              Declare_.php [NONE]\n              Do_.php [NONE]\n              Echo_.php [NONE]\n              ElseIf_.php [NONE]\n              Else_.php [NONE]\n              Expression.php [NONE]\n              Finally_.php [NONE]\n              For_.php [NONE]\n              Foreach_.php [NONE]\n              Function_.php [NONE]\n              Global_.php [NONE]\n              Goto_.php [NONE]\n              GroupUse.php [NONE]\n              HaltCompiler.php [NONE]\n              If_.php [NONE]\n              InlineHTML.php [NONE]\n              Interface_.php [NONE]\n              Label.php [NONE]\n              Namespace_.php [NONE]\n              Nop.php [NONE]\n              Property.php [NONE]\n              PropertyProperty.php [NONE]\n              Return_.php [NONE]\n              StaticVar.php [NONE]\n              Static_.php [NONE]\n              Switch_.php [NONE]\n              Throw_.php [NONE]\n              TraitUse.php [NONE]\n              TraitUseAdaptation/\n                Alias.php [NONE]\n                Precedence.php [NONE]\n              TraitUseAdaptation.php [NONE]\n              Trait_.php [NONE]\n              TryCatch.php [NONE]\n              Unset_.php [NONE]\n              UseUse.php [NONE]\n              Use_.php [NONE]\n              While_.php [NONE]\n            Stmt.php [NONE]\n            VarLikeIdentifier.php [NONE]\n          Node.php [NONE]\n          NodeAbstract.php [NONE]\n          NodeDumper.php [NONE]\n          NodeFinder.php [NONE]\n          NodeTraverser.php [NONE]\n          NodeTraverserInterface.php [NONE]\n          NodeVisitor/\n            CloningVisitor.php [NONE]\n            FindingVisitor.php [NONE]\n            FirstFindingVisitor.php [NONE]\n            NameResolver.php [NONE]\n          NodeVisitor.php [NONE]\n          NodeVisitorAbstract.php [NONE]\n          Parser/\n            Multiple.php [NONE]\n            Php5.php [NONE]\n            Php7.php [NONE]\n            Tokens.php [NONE]\n          Parser.php [NONE]\n          ParserAbstract.php [NONE]\n          ParserFactory.php [NONE]\n          PrettyPrinter/\n            Standard.php [NONE]\n          PrettyPrinterAbstract.php [NONE]\n      test_old/\n        run-php-src.sh [NONE]\n        run.php [NONE]\n  psr/\n    log/\n      Psr/\n        Log/\n          AbstractLogger.php [NONE]\n          InvalidArgumentException.php [NONE]\n          LogLevel.php [NONE]\n          LoggerAwareInterface.php [NONE]\n          LoggerAwareTrait.php [NONE]\n          LoggerInterface.php [NONE]\n          LoggerTrait.php [NONE]\n          NullLogger.php [NONE]\n  symfony/\n    console/\n      Application.php [NONE]\n      Command/\n        Command.php [NONE]\n        HelpCommand.php [NONE]\n        ListCommand.php [NONE]\n        LockableTrait.php [NONE]\n      CommandLoader/\n        CommandLoaderInterface.php [NONE]\n        ContainerCommandLoader.php [NONE]\n        FactoryCommandLoader.php [NONE]\n      ConsoleEvents.php [NONE]\n      DependencyInjection/\n        AddConsoleCommandPass.php [NONE]\n      Descriptor/\n        ApplicationDescription.php [NONE]\n        Descriptor.php [NONE]\n        DescriptorInterface.php [NONE]\n        JsonDescriptor.php [NONE]\n        MarkdownDescriptor.php [NONE]\n        TextDescriptor.php [NONE]\n        XmlDescriptor.php [NONE]\n      Event/\n        ConsoleCommandEvent.php [NONE]\n        ConsoleErrorEvent.php [NONE]\n        ConsoleEvent.php [NONE]\n        ConsoleExceptionEvent.php [NONE]\n        ConsoleTerminateEvent.php [NONE]\n      EventListener/\n        ErrorListener.php [NONE]\n      Exception/\n        CommandNotFoundException.php [NONE]\n        ExceptionInterface.php [NONE]\n        InvalidArgumentException.php [NONE]\n        InvalidOptionException.php [NONE]\n        LogicException.php [NONE]\n        RuntimeException.php [NONE]\n      Formatter/\n        OutputFormatter.php [NONE]\n        OutputFormatterInterface.php [NONE]\n        OutputFormatterStyle.php [NONE]\n        OutputFormatterStyleInterface.php [NONE]\n        OutputFormatterStyleStack.php [NONE]\n      Helper/\n        DebugFormatterHelper.php [NONE]\n        DescriptorHelper.php [NONE]\n        FormatterHelper.php [NONE]\n        Helper.php [NONE]\n        HelperInterface.php [NONE]\n        HelperSet.php [NONE]\n        InputAwareHelper.php [NONE]\n        ProcessHelper.php [NONE]\n        ProgressBar.php [NONE]\n        ProgressIndicator.php [NONE]\n        QuestionHelper.php [NONE]\n        SymfonyQuestionHelper.php [NONE]\n        Table.php [NONE]\n        TableCell.php [NONE]\n        TableSeparator.php [NONE]\n        TableStyle.php [NONE]\n      Input/\n        ArgvInput.php [NONE]\n        ArrayInput.php [NONE]\n        Input.php [NONE]\n        InputArgument.php [NONE]\n        InputAwareInterface.php [NONE]\n        InputDefinition.php [NONE]\n        InputInterface.php [NONE]\n        InputOption.php [NONE]\n        StreamableInputInterface.php [NONE]\n        StringInput.php [NONE]\n      Logger/\n        ConsoleLogger.php [NONE]\n      Output/\n        BufferedOutput.php [NONE]\n        ConsoleOutput.php [NONE]\n        ConsoleOutputInterface.php [NONE]\n        NullOutput.php [NONE]\n        Output.php [NONE]\n        OutputInterface.php [NONE]\n        StreamOutput.php [NONE]\n      Question/\n        ChoiceQuestion.php [NONE]\n        ConfirmationQuestion.php [NONE]\n        Question.php [NONE]\n      Resources/\n        bin/\n          hiddeninput.exe [NONE]\n      Style/\n        OutputStyle.php [NONE]\n        StyleInterface.php [NONE]\n        SymfonyStyle.php [NONE]\n      Terminal.php [NONE]\n      Tester/\n        ApplicationTester.php [NONE]\n        CommandTester.php [NONE]\n    debug/\n      BufferingLogger.php [NONE]\n      Debug.php [NONE]\n      DebugClassLoader.php [NONE]\n      ErrorHandler.php [NONE]\n      Exception/\n        ClassNotFoundException.php [NONE]\n        ContextErrorException.php [NONE]\n        FatalErrorException.php [NONE]\n        FatalThrowableError.php [NONE]\n        FlattenException.php [NONE]\n        OutOfMemoryException.php [NONE]\n        SilencedErrorContext.php [NONE]\n        UndefinedFunctionException.php [NONE]\n        UndefinedMethodException.php [NONE]\n      ExceptionHandler.php [NONE]\n      FatalErrorHandler/\n        ClassNotFoundFatalErrorHandler.php [NONE]\n        FatalErrorHandlerInterface.php [NONE]\n        UndefinedFunctionFatalErrorHandler.php [NONE]\n        UndefinedMethodFatalErrorHandler.php [NONE]\n      Resources/\n        ext/\n          config.m4 [NONE]\n          config.w32 [NONE]\n          php_symfony_debug.h [NONE]\n          symfony_debug.c [NONE]\n    polyfill-mbstring/\n      Mbstring.php [NONE]\n      Resources/\n        unidata/\n          lowerCase.php [NONE]\n          upperCase.php [NONE]\n      bootstrap.php [NONE]\n    var-dumper/\n      Caster/\n        AmqpCaster.php [NONE]\n        ArgsStub.php [NONE]\n        Caster.php [NONE]\n        ClassStub.php [NONE]\n        ConstStub.php [NONE]\n        CutArrayStub.php [NONE]\n        CutStub.php [NONE]\n        DOMCaster.php [NONE]\n        DateCaster.php [NONE]\n        DoctrineCaster.php [NONE]\n        EnumStub.php [NONE]\n        ExceptionCaster.php [NONE]\n        FrameStub.php [NONE]\n        LinkStub.php [NONE]\n        MongoCaster.php [NONE]\n        PdoCaster.php [NONE]\n        PgSqlCaster.php [NONE]\n        RedisCaster.php [NONE]\n        ReflectionCaster.php [NONE]\n        ResourceCaster.php [NONE]\n        SplCaster.php [NONE]\n        StubCaster.php [NONE]\n        SymfonyCaster.php [NONE]\n        TraceStub.php [NONE]\n        XmlReaderCaster.php [NONE]\n        XmlResourceCaster.php [NONE]\n      Cloner/\n        AbstractCloner.php [NONE]\n        ClonerInterface.php [NONE]\n        Cursor.php [NONE]\n        Data.php [NONE]\n        DumperInterface.php [NONE]\n        Stub.php [NONE]\n        VarCloner.php [NONE]\n      Dumper/\n        AbstractDumper.php [NONE]\n        CliDumper.php [NONE]\n        DataDumperInterface.php [NONE]\n        HtmlDumper.php [NONE]\n      Exception/\n        ThrowingCasterException.php [NONE]\n      Resources/\n        functions/\n          dump.php [NONE]\n      VarDumper.php [NONE]\n\n```\n\n\n\nBox `psysh-compat.phar` details\n\n```\n\nAPI Version: 1.1.0\n\nArchive Compression: None\n\nSignature: SHA-1\nSignature Hash: 2ED90F77341ADC290E006E786342E63A4052B5AF\n\nMetadata: None\n\nContents: 1816 files (10.71MB)\n.box/\n  .requirements.php [NONE]\n  bin/\n    check-requirements.php [NONE]\n  check_requirements.php [NONE]\n  composer.json [NONE]\n  composer.lock [NONE]\n  src/\n    Checker.php [NONE]\n    IO.php [NONE]\n    Printer.php [NONE]\n    Requirement.php [NONE]\n    RequirementCollection.php [NONE]\n    Terminal.php [NONE]\n  vendor/\n    autoload.php [NONE]\n    composer/\n      ClassLoader.php [NONE]\n      LICENSE [NONE]\n      autoload_classmap.php [NONE]\n      autoload_namespaces.php [NONE]\n      autoload_psr4.php [NONE]\n      autoload_real.php [NONE]\n      autoload_static.php [NONE]\n      installed.json [NONE]\n      semver/\n        src/\n          Comparator.php [NONE]\n          Constraint/\n            AbstractConstraint.php [NONE]\n            Constraint.php [NONE]\n            ConstraintInterface.php [NONE]\n            EmptyConstraint.php [NONE]\n            MultiConstraint.php [NONE]\n          Semver.php [NONE]\n          VersionParser.php [NONE]\nbin/\n  psysh [NONE]\ncomposer.json [NONE]\ncomposer.lock [NONE]\nsrc/\n  CodeCleaner/\n    AbstractClassPass.php [NONE]\n    AssignThisVariablePass.php [NONE]\n    CallTimePassByReferencePass.php [NONE]\n    CalledClassPass.php [NONE]\n    CodeCleanerPass.php [NONE]\n    ExitPass.php [NONE]\n    FinalClassPass.php [NONE]\n    FunctionContextPass.php [NONE]\n    FunctionReturnInWriteContextPass.php [NONE]\n    ImplicitReturnPass.php [NONE]\n    InstanceOfPass.php [NONE]\n    LeavePsyshAlonePass.php [NONE]\n    LegacyEmptyPass.php [NONE]\n    LoopContextPass.php [NONE]\n    MagicConstantsPass.php [NONE]\n    NamespaceAwarePass.php [NONE]\n    NamespacePass.php [NONE]\n    NoReturnValue.php [NONE]\n    PassableByReferencePass.php [NONE]\n    RequirePass.php [NONE]\n    StrictTypesPass.php [NONE]\n    UseStatementPass.php [NONE]\n    ValidClassNamePass.php [NONE]\n    ValidConstantPass.php [NONE]\n    ValidConstructorPass.php [NONE]\n    ValidFunctionNamePass.php [NONE]\n  CodeCleaner.php [NONE]\n  Command/\n    BufferCommand.php [NONE]\n    ClearCommand.php [NONE]\n    Command.php [NONE]\n    DocCommand.php [NONE]\n    DumpCommand.php [NONE]\n    EditCommand.php [NONE]\n    ExitCommand.php [NONE]\n    HelpCommand.php [NONE]\n    HistoryCommand.php [NONE]\n    ListCommand/\n      ClassConstantEnumerator.php [NONE]\n      ClassEnumerator.php [NONE]\n      ConstantEnumerator.php [NONE]\n      Enumerator.php [NONE]\n      FunctionEnumerator.php [NONE]\n      GlobalVariableEnumerator.php [NONE]\n      InterfaceEnumerator.php [NONE]\n      MethodEnumerator.php [NONE]\n      PropertyEnumerator.php [NONE]\n      TraitEnumerator.php [NONE]\n      VariableEnumerator.php [NONE]\n    ListCommand.php [NONE]\n    ParseCommand.php [NONE]\n    PsyVersionCommand.php [NONE]\n    ReflectingCommand.php [NONE]\n    ShowCommand.php [NONE]\n    SudoCommand.php [NONE]\n    ThrowUpCommand.php [NONE]\n    TimeitCommand.php [NONE]\n    TraceCommand.php [NONE]\n    WhereamiCommand.php [NONE]\n    WtfCommand.php [NONE]\n  ConfigPaths.php [NONE]\n  Configuration.php [NONE]\n  ConsoleColorFactory.php [NONE]\n  Context.php [NONE]\n  ContextAware.php [NONE]\n  Exception/\n    BreakException.php [NONE]\n    DeprecatedException.php [NONE]\n    ErrorException.php [NONE]\n    Exception.php [NONE]\n    FatalErrorException.php [NONE]\n    ParseErrorException.php [NONE]\n    RuntimeException.php [NONE]\n    ThrowUpException.php [NONE]\n    TypeErrorException.php [NONE]\n  ExecutionClosure.php [NONE]\n  ExecutionLoop/\n    AbstractListener.php [NONE]\n    Listener.php [NONE]\n    ProcessForker.php [NONE]\n    RunkitReloader.php [NONE]\n  ExecutionLoop.php [NONE]\n  Formatter/\n    CodeFormatter.php [NONE]\n    DocblockFormatter.php [NONE]\n    Formatter.php [NONE]\n    SignatureFormatter.php [NONE]\n  Input/\n    CodeArgument.php [NONE]\n    FilterOptions.php [NONE]\n    ShellInput.php [NONE]\n    SilentInput.php [NONE]\n  Output/\n    OutputPager.php [NONE]\n    PassthruPager.php [NONE]\n    ProcOutputPager.php [NONE]\n    ShellOutput.php [NONE]\n  ParserFactory.php [NONE]\n  Readline/\n    GNUReadline.php [NONE]\n    HoaConsole.php [NONE]\n    Libedit.php [NONE]\n    Readline.php [NONE]\n    Transient.php [NONE]\n  Reflection/\n    ReflectionConstant.php [NONE]\n    ReflectionLanguageConstruct.php [NONE]\n    ReflectionLanguageConstructParameter.php [NONE]\n  Shell.php [NONE]\n  Sudo/\n    SudoVisitor.php [NONE]\n  Sudo.php [NONE]\n  TabCompletion/\n    AutoCompleter.php [NONE]\n    Matcher/\n      AbstractContextAwareMatcher.php [NONE]\n      AbstractDefaultParametersMatcher.php [NONE]\n      AbstractMatcher.php [NONE]\n      ClassAttributesMatcher.php [NONE]\n      ClassMethodDefaultParametersMatcher.php [NONE]\n      ClassMethodsMatcher.php [NONE]\n      ClassNamesMatcher.php [NONE]\n      CommandsMatcher.php [NONE]\n      ConstantsMatcher.php [NONE]\n      FunctionDefaultParametersMatcher.php [NONE]\n      FunctionsMatcher.php [NONE]\n      KeywordsMatcher.php [NONE]\n      MongoClientMatcher.php [NONE]\n      MongoDatabaseMatcher.php [NONE]\n      ObjectAttributesMatcher.php [NONE]\n      ObjectMethodDefaultParametersMatcher.php [NONE]\n      ObjectMethodsMatcher.php [NONE]\n      VariablesMatcher.php [NONE]\n  Util/\n    Docblock.php [NONE]\n    Json.php [NONE]\n    Mirror.php [NONE]\n    Str.php [NONE]\n  VarDumper/\n    Cloner.php [NONE]\n    Dumper.php [NONE]\n    Presenter.php [NONE]\n    PresenterAware.php [NONE]\n  VersionUpdater/\n    Checker.php [NONE]\n    GitHubChecker.php [NONE]\n    IntervalChecker.php [NONE]\n    NoopChecker.php [NONE]\n  functions.php [NONE]\nvendor/\n  autoload.php [NONE]\n  composer/\n    ClassLoader.php [NONE]\n    LICENSE [NONE]\n    autoload_classmap.php [NONE]\n    autoload_files.php [NONE]\n    autoload_namespaces.php [NONE]\n    autoload_psr4.php [NONE]\n    autoload_real.php [NONE]\n    autoload_static.php [NONE]\n    installed.json [NONE]\n  dnoegel/\n    php-xdg-base-dir/\n      src/\n        Xdg.php [NONE]\n  hoa/\n    consistency/\n      Autoloader.php [NONE]\n      Consistency.php [NONE]\n      Exception.php [NONE]\n      Prelude.php [NONE]\n      Xcallable.php [NONE]\n    console/\n      Bin/\n        Termcap.php [NONE]\n      Chrome/\n        Editor.php [NONE]\n        Exception.php [NONE]\n        Pager.php [NONE]\n        Text.php [NONE]\n      Console.php [NONE]\n      Cursor.php [NONE]\n      Dispatcher/\n        Kit.php [NONE]\n      Documentation/\n        En/\n          Index.xyl [NONE]\n        Fr/\n          Index.xyl [NONE]\n        Image/\n          Readline_autocompleters.gif [NONE]\n      Exception.php [NONE]\n      GetOption.php [NONE]\n      Input.php [NONE]\n      Mouse.php [NONE]\n      Output.php [NONE]\n      Parser.php [NONE]\n      Processus.php [NONE]\n      Readline/\n        Autocompleter/\n          Aggregate.php [NONE]\n          Autocompleter.php [NONE]\n          Path.php [NONE]\n          Word.php [NONE]\n        Password.php [NONE]\n        Readline.php [NONE]\n      Terminfo/\n        77/\n          windows-ansi [NONE]\n        78/\n          xterm [NONE]\n          xterm-256color [NONE]\n      Tput.php [NONE]\n      Window.php [NONE]\n    event/\n      Bucket.php [NONE]\n      Event.php [NONE]\n      Exception.php [NONE]\n      Listenable.php [NONE]\n      Listener.php [NONE]\n      Listens.php [NONE]\n      Source.php [NONE]\n    exception/\n      Error.php [NONE]\n      Exception.php [NONE]\n      Group.php [NONE]\n      Idle.php [NONE]\n    file/\n      Directory.php [NONE]\n      Exception/\n        Exception.php [NONE]\n        FileDoesNotExist.php [NONE]\n      File.php [NONE]\n      Finder.php [NONE]\n      Generic.php [NONE]\n      Link/\n        Link.php [NONE]\n        Read.php [NONE]\n        ReadWrite.php [NONE]\n        Write.php [NONE]\n      Read.php [NONE]\n      ReadWrite.php [NONE]\n      SplFileInfo.php [NONE]\n      Temporary/\n        Read.php [NONE]\n        ReadWrite.php [NONE]\n        Temporary.php [NONE]\n        Write.php [NONE]\n      Watcher.php [NONE]\n      Write.php [NONE]\n    iterator/\n      Aggregate.php [NONE]\n      Append.php [NONE]\n      Buffer.php [NONE]\n      CallbackFilter.php [NONE]\n      CallbackGenerator.php [NONE]\n      Counter.php [NONE]\n      Demultiplexer.php [NONE]\n      Directory.php [NONE]\n      Exception.php [NONE]\n      FileSystem.php [NONE]\n      Filter.php [NONE]\n      Glob.php [NONE]\n      Infinite.php [NONE]\n      Iterator.php [NONE]\n      IteratorIterator.php [NONE]\n      Limit.php [NONE]\n      Lookahead.php [NONE]\n      Lookbehind.php [NONE]\n      Map.php [NONE]\n      Mock.php [NONE]\n      Multiple.php [NONE]\n      NoRewind.php [NONE]\n      Outer.php [NONE]\n      Recursive/\n        CallbackFilter.php [NONE]\n        Directory.php [NONE]\n        Filter.php [NONE]\n        Iterator.php [NONE]\n        Map.php [NONE]\n        Mock.php [NONE]\n        Recursive.php [NONE]\n        RegularExpression.php [NONE]\n      RegularExpression.php [NONE]\n      Repeater.php [NONE]\n      Seekable.php [NONE]\n      SplFileInfo.php [NONE]\n    protocol/\n      Bin/\n        Resolve.php [NONE]\n      Exception.php [NONE]\n      Node/\n        Library.php [NONE]\n        Node.php [NONE]\n      Protocol.php [NONE]\n      Wrapper.php [NONE]\n    stream/\n      Bucket.php [NONE]\n      Composite.php [NONE]\n      Context.php [NONE]\n      Exception.php [NONE]\n      Filter/\n        Basic.php [NONE]\n        Exception.php [NONE]\n        Filter.php [NONE]\n        LateComputed.php [NONE]\n      IStream/\n        Bufferable.php [NONE]\n        In.php [NONE]\n        Lockable.php [NONE]\n        Out.php [NONE]\n        Pathable.php [NONE]\n        Pointable.php [NONE]\n        Statable.php [NONE]\n        Stream.php [NONE]\n        Structural.php [NONE]\n        Touchable.php [NONE]\n      Stream.php [NONE]\n      Wrapper/\n        Exception.php [NONE]\n        IWrapper/\n          File.php [NONE]\n          IWrapper.php [NONE]\n          Stream.php [NONE]\n        Wrapper.php [NONE]\n    ustring/\n      Bin/\n        Fromcode.php [NONE]\n        Tocode.php [NONE]\n      Documentation/\n        En/\n          Index.xyl [NONE]\n        Fr/\n          Index.xyl [NONE]\n      Exception.php [NONE]\n      Search.php [NONE]\n      Ustring.php [NONE]\n  jakub-onderka/\n    php-console-color/\n      example.php [NONE]\n      src/\n        JakubOnderka/\n          PhpConsoleColor/\n            ConsoleColor.php [NONE]\n            InvalidStyleException.php [NONE]\n    php-console-highlighter/\n      src/\n        JakubOnderka/\n          PhpConsoleHighlighter/\n            Highlighter.php [NONE]\n  nikic/\n    php-parser/\n      bin/\n        php-parse [NONE]\n      grammar/\n        parser.template [NONE]\n        php5.y [NONE]\n        php7.y [NONE]\n        rebuildParsers.php [NONE]\n        tokens.template [NONE]\n        tokens.y [NONE]\n      lib/\n        PhpParser/\n          Builder/\n            Class_.php [NONE]\n            Declaration.php [NONE]\n            FunctionLike.php [NONE]\n            Function_.php [NONE]\n            Interface_.php [NONE]\n            Method.php [NONE]\n            Namespace_.php [NONE]\n            Param.php [NONE]\n            Property.php [NONE]\n            Trait_.php [NONE]\n            Use_.php [NONE]\n          Builder.php [NONE]\n          BuilderFactory.php [NONE]\n          BuilderHelpers.php [NONE]\n          Comment/\n            Doc.php [NONE]\n          Comment.php [NONE]\n          ConstExprEvaluationException.php [NONE]\n          ConstExprEvaluator.php [NONE]\n          Error.php [NONE]\n          ErrorHandler/\n            Collecting.php [NONE]\n            Throwing.php [NONE]\n          ErrorHandler.php [NONE]\n          Internal/\n            DiffElem.php [NONE]\n            Differ.php [NONE]\n            PrintableNewAnonClassNode.php [NONE]\n            TokenStream.php [NONE]\n          JsonDecoder.php [NONE]\n          Lexer/\n            Emulative.php [NONE]\n          Lexer.php [NONE]\n          NameContext.php [NONE]\n          Node/\n            Arg.php [NONE]\n            Const_.php [NONE]\n            Expr/\n              ArrayDimFetch.php [NONE]\n              ArrayItem.php [NONE]\n              Array_.php [NONE]\n              Assign.php [NONE]\n              AssignOp/\n                BitwiseAnd.php [NONE]\n                BitwiseOr.php [NONE]\n                BitwiseXor.php [NONE]\n                Concat.php [NONE]\n                Div.php [NONE]\n                Minus.php [NONE]\n                Mod.php [NONE]\n                Mul.php [NONE]\n                Plus.php [NONE]\n                Pow.php [NONE]\n                ShiftLeft.php [NONE]\n                ShiftRight.php [NONE]\n              AssignOp.php [NONE]\n              AssignRef.php [NONE]\n              BinaryOp/\n                BitwiseAnd.php [NONE]\n                BitwiseOr.php [NONE]\n                BitwiseXor.php [NONE]\n                BooleanAnd.php [NONE]\n                BooleanOr.php [NONE]\n                Coalesce.php [NONE]\n                Concat.php [NONE]\n                Div.php [NONE]\n                Equal.php [NONE]\n                Greater.php [NONE]\n                GreaterOrEqual.php [NONE]\n                Identical.php [NONE]\n                LogicalAnd.php [NONE]\n                LogicalOr.php [NONE]\n                LogicalXor.php [NONE]\n                Minus.php [NONE]\n                Mod.php [NONE]\n                Mul.php [NONE]\n                NotEqual.php [NONE]\n                NotIdentical.php [NONE]\n                Plus.php [NONE]\n                Pow.php [NONE]\n                ShiftLeft.php [NONE]\n                ShiftRight.php [NONE]\n                Smaller.php [NONE]\n                SmallerOrEqual.php [NONE]\n                Spaceship.php [NONE]\n              BinaryOp.php [NONE]\n              BitwiseNot.php [NONE]\n              BooleanNot.php [NONE]\n              Cast/\n                Array_.php [NONE]\n                Bool_.php [NONE]\n                Double.php [NONE]\n                Int_.php [NONE]\n                Object_.php [NONE]\n                String_.php [NONE]\n                Unset_.php [NONE]\n              Cast.php [NONE]\n              ClassConstFetch.php [NONE]\n              Clone_.php [NONE]\n              Closure.php [NONE]\n              ClosureUse.php [NONE]\n              ConstFetch.php [NONE]\n              Empty_.php [NONE]\n              Error.php [NONE]\n              ErrorSuppress.php [NONE]\n              Eval_.php [NONE]\n              Exit_.php [NONE]\n              FuncCall.php [NONE]\n              Include_.php [NONE]\n              Instanceof_.php [NONE]\n              Isset_.php [NONE]\n              List_.php [NONE]\n              MethodCall.php [NONE]\n              New_.php [NONE]\n              PostDec.php [NONE]\n              PostInc.php [NONE]\n              PreDec.php [NONE]\n              PreInc.php [NONE]\n              Print_.php [NONE]\n              PropertyFetch.php [NONE]\n              ShellExec.php [NONE]\n              StaticCall.php [NONE]\n              StaticPropertyFetch.php [NONE]\n              Ternary.php [NONE]\n              UnaryMinus.php [NONE]\n              UnaryPlus.php [NONE]\n              Variable.php [NONE]\n              YieldFrom.php [NONE]\n              Yield_.php [NONE]\n            Expr.php [NONE]\n            FunctionLike.php [NONE]\n            Identifier.php [NONE]\n            Name/\n              FullyQualified.php [NONE]\n              Relative.php [NONE]\n            Name.php [NONE]\n            NullableType.php [NONE]\n            Param.php [NONE]\n            Scalar/\n              DNumber.php [NONE]\n              Encapsed.php [NONE]\n              EncapsedStringPart.php [NONE]\n              LNumber.php [NONE]\n              MagicConst/\n                Class_.php [NONE]\n                Dir.php [NONE]\n                File.php [NONE]\n                Function_.php [NONE]\n                Line.php [NONE]\n                Method.php [NONE]\n                Namespace_.php [NONE]\n                Trait_.php [NONE]\n              MagicConst.php [NONE]\n              String_.php [NONE]\n            Scalar.php [NONE]\n            Stmt/\n              Break_.php [NONE]\n              Case_.php [NONE]\n              Catch_.php [NONE]\n              ClassConst.php [NONE]\n              ClassLike.php [NONE]\n              ClassMethod.php [NONE]\n              Class_.php [NONE]\n              Const_.php [NONE]\n              Continue_.php [NONE]\n              DeclareDeclare.php [NONE]\n              Declare_.php [NONE]\n              Do_.php [NONE]\n              Echo_.php [NONE]\n              ElseIf_.php [NONE]\n              Else_.php [NONE]\n              Expression.php [NONE]\n              Finally_.php [NONE]\n              For_.php [NONE]\n              Foreach_.php [NONE]\n              Function_.php [NONE]\n              Global_.php [NONE]\n              Goto_.php [NONE]\n              GroupUse.php [NONE]\n              HaltCompiler.php [NONE]\n              If_.php [NONE]\n              InlineHTML.php [NONE]\n              Interface_.php [NONE]\n              Label.php [NONE]\n              Namespace_.php [NONE]\n              Nop.php [NONE]\n              Property.php [NONE]\n              PropertyProperty.php [NONE]\n              Return_.php [NONE]\n              StaticVar.php [NONE]\n              Static_.php [NONE]\n              Switch_.php [NONE]\n              Throw_.php [NONE]\n              TraitUse.php [NONE]\n              TraitUseAdaptation/\n                Alias.php [NONE]\n                Precedence.php [NONE]\n              TraitUseAdaptation.php [NONE]\n              Trait_.php [NONE]\n              TryCatch.php [NONE]\n              Unset_.php [NONE]\n              UseUse.php [NONE]\n              Use_.php [NONE]\n              While_.php [NONE]\n            Stmt.php [NONE]\n            VarLikeIdentifier.php [NONE]\n          Node.php [NONE]\n          NodeAbstract.php [NONE]\n          NodeDumper.php [NONE]\n          NodeFinder.php [NONE]\n          NodeTraverser.php [NONE]\n          NodeTraverserInterface.php [NONE]\n          NodeVisitor/\n            CloningVisitor.php [NONE]\n            FindingVisitor.php [NONE]\n            FirstFindingVisitor.php [NONE]\n            NameResolver.php [NONE]\n          NodeVisitor.php [NONE]\n          NodeVisitorAbstract.php [NONE]\n          Parser/\n            Multiple.php [NONE]\n            Php5.php [NONE]\n            Php7.php [NONE]\n            Tokens.php [NONE]\n          Parser.php [NONE]\n          ParserAbstract.php [NONE]\n          ParserFactory.php [NONE]\n          PrettyPrinter/\n            Standard.php [NONE]\n          PrettyPrinterAbstract.php [NONE]\n      test_old/\n        run-php-src.sh [NONE]\n        run.php [NONE]\n  psr/\n    log/\n      Psr/\n        Log/\n          AbstractLogger.php [NONE]\n          InvalidArgumentException.php [NONE]\n          LogLevel.php [NONE]\n          LoggerAwareInterface.php [NONE]\n          LoggerAwareTrait.php [NONE]\n          LoggerInterface.php [NONE]\n          LoggerTrait.php [NONE]\n          NullLogger.php [NONE]\n  symfony/\n    console/\n      Application.php [NONE]\n      Command/\n        Command.php [NONE]\n        HelpCommand.php [NONE]\n        ListCommand.php [NONE]\n        LockableTrait.php [NONE]\n      CommandLoader/\n        CommandLoaderInterface.php [NONE]\n        ContainerCommandLoader.php [NONE]\n        FactoryCommandLoader.php [NONE]\n      ConsoleEvents.php [NONE]\n      DependencyInjection/\n        AddConsoleCommandPass.php [NONE]\n      Descriptor/\n        ApplicationDescription.php [NONE]\n        Descriptor.php [NONE]\n        DescriptorInterface.php [NONE]\n        JsonDescriptor.php [NONE]\n        MarkdownDescriptor.php [NONE]\n        TextDescriptor.php [NONE]\n        XmlDescriptor.php [NONE]\n      Event/\n        ConsoleCommandEvent.php [NONE]\n        ConsoleErrorEvent.php [NONE]\n        ConsoleEvent.php [NONE]\n        ConsoleExceptionEvent.php [NONE]\n        ConsoleTerminateEvent.php [NONE]\n      EventListener/\n        ErrorListener.php [NONE]\n      Exception/\n        CommandNotFoundException.php [NONE]\n        ExceptionInterface.php [NONE]\n        InvalidArgumentException.php [NONE]\n        InvalidOptionException.php [NONE]\n        LogicException.php [NONE]\n        RuntimeException.php [NONE]\n      Formatter/\n        OutputFormatter.php [NONE]\n        OutputFormatterInterface.php [NONE]\n        OutputFormatterStyle.php [NONE]\n        OutputFormatterStyleInterface.php [NONE]\n        OutputFormatterStyleStack.php [NONE]\n      Helper/\n        DebugFormatterHelper.php [NONE]\n        DescriptorHelper.php [NONE]\n        FormatterHelper.php [NONE]\n        Helper.php [NONE]\n        HelperInterface.php [NONE]\n        HelperSet.php [NONE]\n        InputAwareHelper.php [NONE]\n        ProcessHelper.php [NONE]\n        ProgressBar.php [NONE]\n        ProgressIndicator.php [NONE]\n        QuestionHelper.php [NONE]\n        SymfonyQuestionHelper.php [NONE]\n        Table.php [NONE]\n        TableCell.php [NONE]\n        TableSeparator.php [NONE]\n        TableStyle.php [NONE]\n      Input/\n        ArgvInput.php [NONE]\n        ArrayInput.php [NONE]\n        Input.php [NONE]\n        InputArgument.php [NONE]\n        InputAwareInterface.php [NONE]\n        InputDefinition.php [NONE]\n        InputInterface.php [NONE]\n        InputOption.php [NONE]\n        StreamableInputInterface.php [NONE]\n        StringInput.php [NONE]\n      Logger/\n        ConsoleLogger.php [NONE]\n      Output/\n        BufferedOutput.php [NONE]\n        ConsoleOutput.php [NONE]\n        ConsoleOutputInterface.php [NONE]\n        NullOutput.php [NONE]\n        Output.php [NONE]\n        OutputInterface.php [NONE]\n        StreamOutput.php [NONE]\n      Question/\n        ChoiceQuestion.php [NONE]\n        ConfirmationQuestion.php [NONE]\n        Question.php [NONE]\n      Resources/\n        bin/\n          hiddeninput.exe [NONE]\n      Style/\n        OutputStyle.php [NONE]\n        StyleInterface.php [NONE]\n        SymfonyStyle.php [NONE]\n      Terminal.php [NONE]\n      Tester/\n        ApplicationTester.php [NONE]\n        CommandTester.php [NONE]\n    debug/\n      BufferingLogger.php [NONE]\n      Debug.php [NONE]\n      DebugClassLoader.php [NONE]\n      ErrorHandler.php [NONE]\n      Exception/\n        ClassNotFoundException.php [NONE]\n        ContextErrorException.php [NONE]\n        FatalErrorException.php [NONE]\n        FatalThrowableError.php [NONE]\n        FlattenException.php [NONE]\n        OutOfMemoryException.php [NONE]\n        SilencedErrorContext.php [NONE]\n        UndefinedFunctionException.php [NONE]\n        UndefinedMethodException.php [NONE]\n      ExceptionHandler.php [NONE]\n      FatalErrorHandler/\n        ClassNotFoundFatalErrorHandler.php [NONE]\n        FatalErrorHandlerInterface.php [NONE]\n        UndefinedFunctionFatalErrorHandler.php [NONE]\n        UndefinedMethodFatalErrorHandler.php [NONE]\n      Resources/\n        ext/\n          config.m4 [NONE]\n          config.w32 [NONE]\n          php_symfony_debug.h [NONE]\n          symfony_debug.c [NONE]\n    intl/\n      Collator/\n        Collator.php [NONE]\n      Data/\n        Bundle/\n          Compiler/\n            BundleCompilerInterface.php [NONE]\n            GenrbCompiler.php [NONE]\n          Reader/\n            BufferedBundleReader.php [NONE]\n            BundleEntryReader.php [NONE]\n            BundleEntryReaderInterface.php [NONE]\n            BundleReaderInterface.php [NONE]\n            IntlBundleReader.php [NONE]\n            JsonBundleReader.php [NONE]\n            PhpBundleReader.php [NONE]\n          Writer/\n            BundleWriterInterface.php [NONE]\n            JsonBundleWriter.php [NONE]\n            PhpBundleWriter.php [NONE]\n            TextBundleWriter.php [NONE]\n        Generator/\n          AbstractDataGenerator.php [NONE]\n          CurrencyDataGenerator.php [NONE]\n          GeneratorConfig.php [NONE]\n          LanguageDataGenerator.php [NONE]\n          LocaleDataGenerator.php [NONE]\n          RegionDataGenerator.php [NONE]\n          ScriptDataGenerator.php [NONE]\n        Provider/\n          CurrencyDataProvider.php [NONE]\n          LanguageDataProvider.php [NONE]\n          LocaleDataProvider.php [NONE]\n          RegionDataProvider.php [NONE]\n          ScriptDataProvider.php [NONE]\n        Util/\n          ArrayAccessibleResourceBundle.php [NONE]\n          LocaleScanner.php [NONE]\n          RecursiveArrayAccess.php [NONE]\n          RingBuffer.php [NONE]\n      DateFormatter/\n        DateFormat/\n          AmPmTransformer.php [NONE]\n          DayOfWeekTransformer.php [NONE]\n          DayOfYearTransformer.php [NONE]\n          DayTransformer.php [NONE]\n          FullTransformer.php [NONE]\n          Hour1200Transformer.php [NONE]\n          Hour1201Transformer.php [NONE]\n          Hour2400Transformer.php [NONE]\n          Hour2401Transformer.php [NONE]\n          HourTransformer.php [NONE]\n          MinuteTransformer.php [NONE]\n          MonthTransformer.php [NONE]\n          QuarterTransformer.php [NONE]\n          SecondTransformer.php [NONE]\n          TimezoneTransformer.php [NONE]\n          Transformer.php [NONE]\n          YearTransformer.php [NONE]\n        IntlDateFormatter.php [NONE]\n      Exception/\n        BadMethodCallException.php [NONE]\n        ExceptionInterface.php [NONE]\n        InvalidArgumentException.php [NONE]\n        MethodArgumentNotImplementedException.php [NONE]\n        MethodArgumentValueNotImplementedException.php [NONE]\n        MethodNotImplementedException.php [NONE]\n        MissingResourceException.php [NONE]\n        NotImplementedException.php [NONE]\n        OutOfBoundsException.php [NONE]\n        ResourceBundleNotFoundException.php [NONE]\n        RuntimeException.php [NONE]\n        UnexpectedTypeException.php [NONE]\n      Globals/\n        IntlGlobals.php [NONE]\n      Intl.php [NONE]\n      Locale/\n        Locale.php [NONE]\n      Locale.php [NONE]\n      NumberFormatter/\n        NumberFormatter.php [NONE]\n      ResourceBundle/\n        CurrencyBundle.php [NONE]\n        CurrencyBundleInterface.php [NONE]\n        LanguageBundle.php [NONE]\n        LanguageBundleInterface.php [NONE]\n        LocaleBundle.php [NONE]\n        LocaleBundleInterface.php [NONE]\n        RegionBundle.php [NONE]\n        RegionBundleInterface.php [NONE]\n        ResourceBundleInterface.php [NONE]\n      Resources/\n        bin/\n          autoload.php [NONE]\n          common.php [NONE]\n          icu.ini [NONE]\n          update-data.php [NONE]\n        data/\n          currencies/\n            af.json [NONE]\n            af_NA.json [NONE]\n            ak.json [NONE]\n            am.json [NONE]\n            ar.json [NONE]\n            ar_DJ.json [NONE]\n            ar_ER.json [NONE]\n            ar_KM.json [NONE]\n            ar_LB.json [NONE]\n            ar_SO.json [NONE]\n            ar_SS.json [NONE]\n            as.json [NONE]\n            az.json [NONE]\n            az_Cyrl.json [NONE]\n            be.json [NONE]\n            bg.json [NONE]\n            bm.json [NONE]\n            bn.json [NONE]\n            bo.json [NONE]\n            bo_IN.json [NONE]\n            br.json [NONE]\n            bs.json [NONE]\n            bs_Cyrl.json [NONE]\n            ca.json [NONE]\n            ca_FR.json [NONE]\n            ce.json [NONE]\n            cs.json [NONE]\n            cy.json [NONE]\n            da.json [NONE]\n            de.json [NONE]\n            de_CH.json [NONE]\n            de_LI.json [NONE]\n            de_LU.json [NONE]\n            dz.json [NONE]\n            ee.json [NONE]\n            el.json [NONE]\n            en.json [NONE]\n            en_001.json [NONE]\n            en_150.json [NONE]\n            en_AG.json [NONE]\n            en_AI.json [NONE]\n            en_AU.json [NONE]\n            en_BB.json [NONE]\n            en_BI.json [NONE]\n            en_BM.json [NONE]\n            en_BS.json [NONE]\n            en_BW.json [NONE]\n            en_BZ.json [NONE]\n            en_CA.json [NONE]\n            en_CC.json [NONE]\n            en_CK.json [NONE]\n            en_CX.json [NONE]\n            en_DK.json [NONE]\n            en_DM.json [NONE]\n            en_ER.json [NONE]\n            en_FJ.json [NONE]\n            en_FK.json [NONE]\n            en_GB.json [NONE]\n            en_GD.json [NONE]\n            en_GG.json [NONE]\n            en_GH.json [NONE]\n            en_GI.json [NONE]\n            en_GM.json [NONE]\n            en_GY.json [NONE]\n            en_IM.json [NONE]\n            en_JE.json [NONE]\n            en_JM.json [NONE]\n            en_KE.json [NONE]\n            en_KI.json [NONE]\n            en_KN.json [NONE]\n            en_KY.json [NONE]\n            en_LC.json [NONE]\n            en_LR.json [NONE]\n            en_LS.json [NONE]\n            en_MG.json [NONE]\n            en_MO.json [NONE]\n            en_MS.json [NONE]\n            en_MT.json [NONE]\n            en_MU.json [NONE]\n            en_MW.json [NONE]\n            en_MY.json [NONE]\n            en_NA.json [NONE]\n            en_NF.json [NONE]\n            en_NG.json [NONE]\n            en_NH.json [NONE]\n            en_NR.json [NONE]\n            en_NU.json [NONE]\n            en_NZ.json [NONE]\n            en_PG.json [NONE]\n            en_PH.json [NONE]\n            en_PK.json [NONE]\n            en_PN.json [NONE]\n            en_RW.json [NONE]\n            en_SB.json [NONE]\n            en_SC.json [NONE]\n            en_SE.json [NONE]\n            en_SG.json [NONE]\n            en_SH.json [NONE]\n            en_SL.json [NONE]\n            en_SS.json [NONE]\n            en_SX.json [NONE]\n            en_SZ.json [NONE]\n            en_TK.json [NONE]\n            en_TO.json [NONE]\n            en_TT.json [NONE]\n            en_TV.json [NONE]\n            en_TZ.json [NONE]\n            en_UG.json [NONE]\n            en_VC.json [NONE]\n            en_VU.json [NONE]\n            en_WS.json [NONE]\n            en_ZA.json [NONE]\n            en_ZM.json [NONE]\n            es.json [NONE]\n            es_419.json [NONE]\n            es_AR.json [NONE]\n            es_BO.json [NONE]\n            es_BR.json [NONE]\n            es_BZ.json [NONE]\n            es_CL.json [NONE]\n            es_CO.json [NONE]\n            es_CR.json [NONE]\n            es_CU.json [NONE]\n            es_DO.json [NONE]\n            es_EC.json [NONE]\n            es_GQ.json [NONE]\n            es_GT.json [NONE]\n            es_HN.json [NONE]\n            es_MX.json [NONE]\n            es_NI.json [NONE]\n            es_PA.json [NONE]\n            es_PE.json [NONE]\n            es_PH.json [NONE]\n            es_PR.json [NONE]\n            es_PY.json [NONE]\n            es_SV.json [NONE]\n            es_US.json [NONE]\n            es_UY.json [NONE]\n            es_VE.json [NONE]\n            et.json [NONE]\n            eu.json [NONE]\n            fa.json [NONE]\n            fa_AF.json [NONE]\n            ff.json [NONE]\n            ff_GN.json [NONE]\n            ff_MR.json [NONE]\n            fi.json [NONE]\n            fo.json [NONE]\n            fo_DK.json [NONE]\n            fr.json [NONE]\n            fr_BI.json [NONE]\n            fr_CA.json [NONE]\n            fr_CD.json [NONE]\n            fr_DJ.json [NONE]\n            fr_DZ.json [NONE]\n            fr_GN.json [NONE]\n            fr_HT.json [NONE]\n            fr_KM.json [NONE]\n            fr_LU.json [NONE]\n            fr_MG.json [NONE]\n            fr_MR.json [NONE]\n            fr_MU.json [NONE]\n            fr_RW.json [NONE]\n            fr_SC.json [NONE]\n            fr_SY.json [NONE]\n            fr_TN.json [NONE]\n            fr_VU.json [NONE]\n            fy.json [NONE]\n            ga.json [NONE]\n            gd.json [NONE]\n            gl.json [NONE]\n            gu.json [NONE]\n            ha.json [NONE]\n            ha_GH.json [NONE]\n            he.json [NONE]\n            hi.json [NONE]\n            hr.json [NONE]\n            hr_BA.json [NONE]\n            hu.json [NONE]\n            hy.json [NONE]\n            id.json [NONE]\n            ig.json [NONE]\n            ii.json [NONE]\n            in.json [NONE]\n            is.json [NONE]\n            it.json [NONE]\n            iw.json [NONE]\n            ja.json [NONE]\n            ka.json [NONE]\n            ki.json [NONE]\n            kk.json [NONE]\n            kl.json [NONE]\n            km.json [NONE]\n            kn.json [NONE]\n            ko.json [NONE]\n            ks.json [NONE]\n            ky.json [NONE]\n            lb.json [NONE]\n            lg.json [NONE]\n            ln.json [NONE]\n            ln_AO.json [NONE]\n            lo.json [NONE]\n            lt.json [NONE]\n            lu.json [NONE]\n            lv.json [NONE]\n            meta.json [NONE]\n            mg.json [NONE]\n            mk.json [NONE]\n            ml.json [NONE]\n            mn.json [NONE]\n            mo.json [NONE]\n            mr.json [NONE]\n            ms.json [NONE]\n            ms_BN.json [NONE]\n            ms_SG.json [NONE]\n            mt.json [NONE]\n            my.json [NONE]\n            nb.json [NONE]\n            nd.json [NONE]\n            ne.json [NONE]\n            nl.json [NONE]\n            nl_AW.json [NONE]\n            nl_BQ.json [NONE]\n            nl_CW.json [NONE]\n            nl_SR.json [NONE]\n            nl_SX.json [NONE]\n            nn.json [NONE]\n            no.json [NONE]\n            om.json [NONE]\n            om_KE.json [NONE]\n            or.json [NONE]\n            os.json [NONE]\n            os_RU.json [NONE]\n            pa.json [NONE]\n            pa_Arab.json [NONE]\n            pl.json [NONE]\n            ps.json [NONE]\n            pt.json [NONE]\n            pt_AO.json [NONE]\n            pt_CV.json [NONE]\n            pt_LU.json [NONE]\n            pt_MO.json [NONE]\n            pt_MZ.json [NONE]\n            pt_PT.json [NONE]\n            pt_ST.json [NONE]\n            qu.json [NONE]\n            qu_BO.json [NONE]\n            qu_EC.json [NONE]\n            rm.json [NONE]\n            rn.json [NONE]\n            ro.json [NONE]\n            ro_MD.json [NONE]\n            root.json [NONE]\n            ru.json [NONE]\n            ru_BY.json [NONE]\n            ru_KG.json [NONE]\n            ru_KZ.json [NONE]\n            ru_MD.json [NONE]\n            rw.json [NONE]\n            se.json [NONE]\n            se_SE.json [NONE]\n            sg.json [NONE]\n            sh.json [NONE]\n            si.json [NONE]\n            sk.json [NONE]\n            sl.json [NONE]\n            sn.json [NONE]\n            so.json [NONE]\n            so_DJ.json [NONE]\n            so_ET.json [NONE]\n            so_KE.json [NONE]\n            sq.json [NONE]\n            sq_MK.json [NONE]\n            sr.json [NONE]\n            sr_Latn.json [NONE]\n            sv.json [NONE]\n            sw.json [NONE]\n            sw_CD.json [NONE]\n            sw_UG.json [NONE]\n            ta.json [NONE]\n            ta_LK.json [NONE]\n            ta_MY.json [NONE]\n            ta_SG.json [NONE]\n            te.json [NONE]\n            tg.json [NONE]\n            th.json [NONE]\n            ti.json [NONE]\n            ti_ER.json [NONE]\n            tl.json [NONE]\n            to.json [NONE]\n            tr.json [NONE]\n            tt.json [NONE]\n            ug.json [NONE]\n            uk.json [NONE]\n            ur.json [NONE]\n            ur_IN.json [NONE]\n            uz.json [NONE]\n            uz_Arab.json [NONE]\n            uz_Cyrl.json [NONE]\n            vi.json [NONE]\n            wo.json [NONE]\n            yi.json [NONE]\n            yo.json [NONE]\n            yo_BJ.json [NONE]\n            zh.json [NONE]\n            zh_HK.json [NONE]\n            zh_Hans_HK.json [NONE]\n            zh_Hans_MO.json [NONE]\n            zh_Hans_SG.json [NONE]\n            zh_Hant.json [NONE]\n            zh_Hant_HK.json [NONE]\n            zh_Hant_MO.json [NONE]\n            zh_MO.json [NONE]\n            zh_SG.json [NONE]\n            zu.json [NONE]\n          languages/\n            af.json [NONE]\n            ak.json [NONE]\n            am.json [NONE]\n            ar.json [NONE]\n            ar_EG.json [NONE]\n            ar_LY.json [NONE]\n            ar_SA.json [NONE]\n            as.json [NONE]\n            az.json [NONE]\n            az_Cyrl.json [NONE]\n            be.json [NONE]\n            bg.json [NONE]\n            bm.json [NONE]\n            bn.json [NONE]\n            bn_IN.json [NONE]\n            bo.json [NONE]\n            br.json [NONE]\n            bs.json [NONE]\n            bs_Cyrl.json [NONE]\n            ca.json [NONE]\n            ce.json [NONE]\n            cs.json [NONE]\n            cy.json [NONE]\n            da.json [NONE]\n            de.json [NONE]\n            de_AT.json [NONE]\n            de_CH.json [NONE]\n            de_LU.json [NONE]\n            dz.json [NONE]\n            ee.json [NONE]\n            el.json [NONE]\n            en.json [NONE]\n            en_AU.json [NONE]\n            en_CA.json [NONE]\n            en_GB.json [NONE]\n            en_IN.json [NONE]\n            en_NZ.json [NONE]\n            eo.json [NONE]\n            es.json [NONE]\n            es_419.json [NONE]\n            es_AR.json [NONE]\n            es_BO.json [NONE]\n            es_CL.json [NONE]\n            es_CO.json [NONE]\n            es_CR.json [NONE]\n            es_DO.json [NONE]\n            es_EC.json [NONE]\n            es_GT.json [NONE]\n            es_HN.json [NONE]\n            es_MX.json [NONE]\n            es_NI.json [NONE]\n            es_PA.json [NONE]\n            es_PE.json [NONE]\n            es_PR.json [NONE]\n            es_PY.json [NONE]\n            es_SV.json [NONE]\n            es_US.json [NONE]\n            es_VE.json [NONE]\n            et.json [NONE]\n            eu.json [NONE]\n            fa.json [NONE]\n            fa_AF.json [NONE]\n            ff.json [NONE]\n            fi.json [NONE]\n            fo.json [NONE]\n            fr.json [NONE]\n            fr_BE.json [NONE]\n            fr_CA.json [NONE]\n            fr_CH.json [NONE]\n            fy.json [NONE]\n            ga.json [NONE]\n            gd.json [NONE]\n            gl.json [NONE]\n            gu.json [NONE]\n            gv.json [NONE]\n            ha.json [NONE]\n            he.json [NONE]\n            hi.json [NONE]\n            hr.json [NONE]\n            hu.json [NONE]\n            hy.json [NONE]\n            id.json [NONE]\n            ig.json [NONE]\n            ii.json [NONE]\n            in.json [NONE]\n            is.json [NONE]\n            it.json [NONE]\n            iw.json [NONE]\n            ja.json [NONE]\n            ka.json [NONE]\n            ki.json [NONE]\n            kk.json [NONE]\n            kl.json [NONE]\n            km.json [NONE]\n            kn.json [NONE]\n            ko.json [NONE]\n            ks.json [NONE]\n            kw.json [NONE]\n            ky.json [NONE]\n            lb.json [NONE]\n            lg.json [NONE]\n            ln.json [NONE]\n            lo.json [NONE]\n            lt.json [NONE]\n            lu.json [NONE]\n            lv.json [NONE]\n            meta.json [NONE]\n            mg.json [NONE]\n            mk.json [NONE]\n            ml.json [NONE]\n            mn.json [NONE]\n            mo.json [NONE]\n            mr.json [NONE]\n            ms.json [NONE]\n            mt.json [NONE]\n            my.json [NONE]\n            nb.json [NONE]\n            nd.json [NONE]\n            ne.json [NONE]\n            nl.json [NONE]\n            nn.json [NONE]\n            no.json [NONE]\n            om.json [NONE]\n            or.json [NONE]\n            os.json [NONE]\n            pa.json [NONE]\n            pa_Arab.json [NONE]\n            pl.json [NONE]\n            ps.json [NONE]\n            pt.json [NONE]\n            pt_PT.json [NONE]\n            qu.json [NONE]\n            rm.json [NONE]\n            rn.json [NONE]\n            ro.json [NONE]\n            ro_MD.json [NONE]\n            ru.json [NONE]\n            rw.json [NONE]\n            se.json [NONE]\n            se_FI.json [NONE]\n            sg.json [NONE]\n            sh.json [NONE]\n            sh_BA.json [NONE]\n            si.json [NONE]\n            sk.json [NONE]\n            sl.json [NONE]\n            sn.json [NONE]\n            so.json [NONE]\n            sq.json [NONE]\n            sr.json [NONE]\n            sr_BA.json [NONE]\n            sr_Cyrl_BA.json [NONE]\n            sr_Cyrl_ME.json [NONE]\n            sr_Cyrl_XK.json [NONE]\n            sr_Latn.json [NONE]\n            sr_Latn_BA.json [NONE]\n            sr_Latn_ME.json [NONE]\n            sr_Latn_XK.json [NONE]\n            sr_ME.json [NONE]\n            sr_XK.json [NONE]\n            sv.json [NONE]\n            sv_FI.json [NONE]\n            sw.json [NONE]\n            sw_CD.json [NONE]\n            sw_KE.json [NONE]\n            ta.json [NONE]\n            te.json [NONE]\n            tg.json [NONE]\n            th.json [NONE]\n            ti.json [NONE]\n            tl.json [NONE]\n            to.json [NONE]\n            tr.json [NONE]\n            tt.json [NONE]\n            ug.json [NONE]\n            uk.json [NONE]\n            ur.json [NONE]\n            ur_IN.json [NONE]\n            uz.json [NONE]\n            uz_Arab.json [NONE]\n            uz_Cyrl.json [NONE]\n            vi.json [NONE]\n            wo.json [NONE]\n            yi.json [NONE]\n            yo.json [NONE]\n            yo_BJ.json [NONE]\n            zh.json [NONE]\n            zh_HK.json [NONE]\n            zh_Hant.json [NONE]\n            zh_Hant_HK.json [NONE]\n            zu.json [NONE]\n          locales/\n            af.json [NONE]\n            ak.json [NONE]\n            am.json [NONE]\n            ar.json [NONE]\n            ar_EG.json [NONE]\n            ar_LY.json [NONE]\n            ar_SA.json [NONE]\n            as.json [NONE]\n            az.json [NONE]\n            az_AZ.json [NONE]\n            az_Cyrl.json [NONE]\n            be.json [NONE]\n            bg.json [NONE]\n            bm.json [NONE]\n            bn.json [NONE]\n            bn_IN.json [NONE]\n            bo.json [NONE]\n            br.json [NONE]\n            bs.json [NONE]\n            bs_BA.json [NONE]\n            bs_Cyrl.json [NONE]\n            ca.json [NONE]\n            ce.json [NONE]\n            cs.json [NONE]\n            cy.json [NONE]\n            da.json [NONE]\n            de.json [NONE]\n            de_AT.json [NONE]\n            de_CH.json [NONE]\n            de_LU.json [NONE]\n            dz.json [NONE]\n            ee.json [NONE]\n            el.json [NONE]\n            en.json [NONE]\n            en_AU.json [NONE]\n            en_CA.json [NONE]\n            en_GB.json [NONE]\n            en_IN.json [NONE]\n            en_NH.json [NONE]\n            en_RH.json [NONE]\n            eo.json [NONE]\n            es.json [NONE]\n            es_419.json [NONE]\n            es_AR.json [NONE]\n            es_BO.json [NONE]\n            es_CL.json [NONE]\n            es_CO.json [NONE]\n            es_CR.json [NONE]\n            es_DO.json [NONE]\n            es_EC.json [NONE]\n            es_GT.json [NONE]\n            es_HN.json [NONE]\n            es_MX.json [NONE]\n            es_NI.json [NONE]\n            es_PA.json [NONE]\n            es_PE.json [NONE]\n            es_PR.json [NONE]\n            es_PY.json [NONE]\n            es_SV.json [NONE]\n            es_US.json [NONE]\n            es_VE.json [NONE]\n            et.json [NONE]\n            eu.json [NONE]\n            fa.json [NONE]\n            fa_AF.json [NONE]\n            ff.json [NONE]\n            fi.json [NONE]\n            fo.json [NONE]\n            fr.json [NONE]\n            fr_BE.json [NONE]\n            fr_CA.json [NONE]\n            fr_CH.json [NONE]\n            fy.json [NONE]\n            ga.json [NONE]\n            gd.json [NONE]\n            gl.json [NONE]\n            gu.json [NONE]\n            gv.json [NONE]\n            ha.json [NONE]\n            he.json [NONE]\n            hi.json [NONE]\n            hr.json [NONE]\n            hu.json [NONE]\n            hy.json [NONE]\n            id.json [NONE]\n            ig.json [NONE]\n            ii.json [NONE]\n            in.json [NONE]\n            in_ID.json [NONE]\n            is.json [NONE]\n            it.json [NONE]\n            iw.json [NONE]\n            iw_IL.json [NONE]\n            ja.json [NONE]\n            ka.json [NONE]\n            ki.json [NONE]\n            kk.json [NONE]\n            kl.json [NONE]\n            km.json [NONE]\n            kn.json [NONE]\n            ko.json [NONE]\n            ko_KP.json [NONE]\n            ks.json [NONE]\n            kw.json [NONE]\n            ky.json [NONE]\n            lb.json [NONE]\n            lg.json [NONE]\n            ln.json [NONE]\n            lo.json [NONE]\n            lt.json [NONE]\n            lu.json [NONE]\n            lv.json [NONE]\n            meta.json [NONE]\n            mg.json [NONE]\n            mk.json [NONE]\n            ml.json [NONE]\n            mn.json [NONE]\n            mo.json [NONE]\n            mr.json [NONE]\n            ms.json [NONE]\n            mt.json [NONE]\n            my.json [NONE]\n            nb.json [NONE]\n            nd.json [NONE]\n            ne.json [NONE]\n            nl.json [NONE]\n            nn.json [NONE]\n            no.json [NONE]\n            no_NO.json [NONE]\n            no_NO_NY.json [NONE]\n            om.json [NONE]\n            or.json [NONE]\n            os.json [NONE]\n            pa.json [NONE]\n            pa_Arab.json [NONE]\n            pa_IN.json [NONE]\n            pa_PK.json [NONE]\n            pl.json [NONE]\n            ps.json [NONE]\n            pt.json [NONE]\n            pt_PT.json [NONE]\n            qu.json [NONE]\n            rm.json [NONE]\n            rn.json [NONE]\n            ro.json [NONE]\n            ro_MD.json [NONE]\n            ru.json [NONE]\n            ru_UA.json [NONE]\n            rw.json [NONE]\n            se.json [NONE]\n            se_FI.json [NONE]\n            sg.json [NONE]\n            sh.json [NONE]\n            sh_BA.json [NONE]\n            sh_CS.json [NONE]\n            sh_YU.json [NONE]\n            si.json [NONE]\n            sk.json [NONE]\n            sl.json [NONE]\n            sn.json [NONE]\n            so.json [NONE]\n            sq.json [NONE]\n            sr.json [NONE]\n            sr_BA.json [NONE]\n            sr_CS.json [NONE]\n            sr_Cyrl_BA.json [NONE]\n            sr_Cyrl_CS.json [NONE]\n            sr_Cyrl_ME.json [NONE]\n            sr_Cyrl_XK.json [NONE]\n            sr_Cyrl_YU.json [NONE]\n            sr_Latn.json [NONE]\n            sr_Latn_BA.json [NONE]\n            sr_Latn_CS.json [NONE]\n            sr_Latn_ME.json [NONE]\n            sr_Latn_XK.json [NONE]\n            sr_Latn_YU.json [NONE]\n            sr_ME.json [NONE]\n            sr_RS.json [NONE]\n            sr_XK.json [NONE]\n            sr_YU.json [NONE]\n            sv.json [NONE]\n            sv_FI.json [NONE]\n            sw.json [NONE]\n            sw_CD.json [NONE]\n            sw_KE.json [NONE]\n            ta.json [NONE]\n            te.json [NONE]\n            tg.json [NONE]\n            th.json [NONE]\n            ti.json [NONE]\n            tl.json [NONE]\n            tl_PH.json [NONE]\n            to.json [NONE]\n            tr.json [NONE]\n            tt.json [NONE]\n            ug.json [NONE]\n            uk.json [NONE]\n            ur.json [NONE]\n            ur_IN.json [NONE]\n            uz.json [NONE]\n            uz_AF.json [NONE]\n            uz_Arab.json [NONE]\n            uz_Cyrl.json [NONE]\n            uz_UZ.json [NONE]\n            vi.json [NONE]\n            wo.json [NONE]\n            yi.json [NONE]\n            yo.json [NONE]\n            yo_BJ.json [NONE]\n            zh.json [NONE]\n            zh_CN.json [NONE]\n            zh_HK.json [NONE]\n            zh_Hant.json [NONE]\n            zh_Hant_HK.json [NONE]\n            zh_MO.json [NONE]\n            zh_SG.json [NONE]\n            zh_TW.json [NONE]\n            zu.json [NONE]\n          regions/\n            af.json [NONE]\n            ak.json [NONE]\n            am.json [NONE]\n            ar.json [NONE]\n            ar_LY.json [NONE]\n            ar_SA.json [NONE]\n            as.json [NONE]\n            az.json [NONE]\n            az_Cyrl.json [NONE]\n            be.json [NONE]\n            bg.json [NONE]\n            bm.json [NONE]\n            bn.json [NONE]\n            bn_IN.json [NONE]\n            bo.json [NONE]\n            bo_IN.json [NONE]\n            br.json [NONE]\n            bs.json [NONE]\n            bs_Cyrl.json [NONE]\n            ca.json [NONE]\n            ce.json [NONE]\n            cs.json [NONE]\n            cy.json [NONE]\n            da.json [NONE]\n            de.json [NONE]\n            de_AT.json [NONE]\n            de_CH.json [NONE]\n            dz.json [NONE]\n            ee.json [NONE]\n            el.json [NONE]\n            en.json [NONE]\n            en_GB.json [NONE]\n            eo.json [NONE]\n            es.json [NONE]\n            es_419.json [NONE]\n            es_AR.json [NONE]\n            es_BO.json [NONE]\n            es_CL.json [NONE]\n            es_CO.json [NONE]\n            es_CR.json [NONE]\n            es_DO.json [NONE]\n            es_EC.json [NONE]\n            es_GT.json [NONE]\n            es_HN.json [NONE]\n            es_MX.json [NONE]\n            es_NI.json [NONE]\n            es_PA.json [NONE]\n            es_PE.json [NONE]\n            es_PR.json [NONE]\n            es_PY.json [NONE]\n            es_SV.json [NONE]\n            es_US.json [NONE]\n            es_VE.json [NONE]\n            et.json [NONE]\n            eu.json [NONE]\n            fa.json [NONE]\n            fa_AF.json [NONE]\n            ff.json [NONE]\n            fi.json [NONE]\n            fo.json [NONE]\n            fr.json [NONE]\n            fr_BE.json [NONE]\n            fr_CA.json [NONE]\n            fy.json [NONE]\n            ga.json [NONE]\n            gd.json [NONE]\n            gl.json [NONE]\n            gu.json [NONE]\n            gv.json [NONE]\n            ha.json [NONE]\n            he.json [NONE]\n            hi.json [NONE]\n            hr.json [NONE]\n            hu.json [NONE]\n            hy.json [NONE]\n            id.json [NONE]\n            ig.json [NONE]\n            ii.json [NONE]\n            in.json [NONE]\n            is.json [NONE]\n            it.json [NONE]\n            iw.json [NONE]\n            ja.json [NONE]\n            ka.json [NONE]\n            ki.json [NONE]\n            kk.json [NONE]\n            kl.json [NONE]\n            km.json [NONE]\n            kn.json [NONE]\n            ko.json [NONE]\n            ko_KP.json [NONE]\n            ks.json [NONE]\n            kw.json [NONE]\n            ky.json [NONE]\n            lb.json [NONE]\n            lg.json [NONE]\n            ln.json [NONE]\n            lo.json [NONE]\n            lt.json [NONE]\n            lu.json [NONE]\n            lv.json [NONE]\n            meta.json [NONE]\n            mg.json [NONE]\n            mk.json [NONE]\n            ml.json [NONE]\n            mn.json [NONE]\n            mo.json [NONE]\n            mr.json [NONE]\n            ms.json [NONE]\n            mt.json [NONE]\n            my.json [NONE]\n            nb.json [NONE]\n            nd.json [NONE]\n            ne.json [NONE]\n            nl.json [NONE]\n            nn.json [NONE]\n            no.json [NONE]\n            om.json [NONE]\n            or.json [NONE]\n            os.json [NONE]\n            pa.json [NONE]\n            pa_Arab.json [NONE]\n            pl.json [NONE]\n            ps.json [NONE]\n            pt.json [NONE]\n            pt_PT.json [NONE]\n            qu.json [NONE]\n            rm.json [NONE]\n            rn.json [NONE]\n            ro.json [NONE]\n            ro_MD.json [NONE]\n            ru.json [NONE]\n            ru_UA.json [NONE]\n            rw.json [NONE]\n            se.json [NONE]\n            se_FI.json [NONE]\n            sg.json [NONE]\n            sh.json [NONE]\n            sh_BA.json [NONE]\n            si.json [NONE]\n            sk.json [NONE]\n            sl.json [NONE]\n            sn.json [NONE]\n            so.json [NONE]\n            sq.json [NONE]\n            sr.json [NONE]\n            sr_BA.json [NONE]\n            sr_Cyrl_BA.json [NONE]\n            sr_Cyrl_ME.json [NONE]\n            sr_Cyrl_XK.json [NONE]\n            sr_Latn.json [NONE]\n            sr_Latn_BA.json [NONE]\n            sr_Latn_ME.json [NONE]\n            sr_Latn_XK.json [NONE]\n            sr_ME.json [NONE]\n            sr_XK.json [NONE]\n            sv.json [NONE]\n            sw.json [NONE]\n            sw_CD.json [NONE]\n            sw_KE.json [NONE]\n            ta.json [NONE]\n            te.json [NONE]\n            tg.json [NONE]\n            th.json [NONE]\n            ti.json [NONE]\n            tl.json [NONE]\n            to.json [NONE]\n            tr.json [NONE]\n            tt.json [NONE]\n            ug.json [NONE]\n            uk.json [NONE]\n            ur.json [NONE]\n            ur_IN.json [NONE]\n            uz.json [NONE]\n            uz_Arab.json [NONE]\n            uz_Cyrl.json [NONE]\n            vi.json [NONE]\n            wo.json [NONE]\n            yi.json [NONE]\n            yo.json [NONE]\n            yo_BJ.json [NONE]\n            zh.json [NONE]\n            zh_HK.json [NONE]\n            zh_Hant.json [NONE]\n            zh_Hant_HK.json [NONE]\n            zu.json [NONE]\n          scripts/\n            af.json [NONE]\n            am.json [NONE]\n            ar.json [NONE]\n            as.json [NONE]\n            az.json [NONE]\n            az_Cyrl.json [NONE]\n            be.json [NONE]\n            bg.json [NONE]\n            bn.json [NONE]\n            bo.json [NONE]\n            br.json [NONE]\n            bs.json [NONE]\n            bs_Cyrl.json [NONE]\n            ca.json [NONE]\n            ce.json [NONE]\n            cs.json [NONE]\n            cy.json [NONE]\n            da.json [NONE]\n            de.json [NONE]\n            dz.json [NONE]\n            ee.json [NONE]\n            el.json [NONE]\n            en.json [NONE]\n            en_AU.json [NONE]\n            en_GB.json [NONE]\n            en_IN.json [NONE]\n            es.json [NONE]\n            es_419.json [NONE]\n            es_MX.json [NONE]\n            es_US.json [NONE]\n            et.json [NONE]\n            eu.json [NONE]\n            fa.json [NONE]\n            fa_AF.json [NONE]\n            fi.json [NONE]\n            fo.json [NONE]\n            fr.json [NONE]\n            fr_CA.json [NONE]\n            fy.json [NONE]\n            ga.json [NONE]\n            gd.json [NONE]\n            gl.json [NONE]\n            gu.json [NONE]\n            he.json [NONE]\n            hi.json [NONE]\n            hr.json [NONE]\n            hu.json [NONE]\n            hy.json [NONE]\n            id.json [NONE]\n            ii.json [NONE]\n            in.json [NONE]\n            is.json [NONE]\n            it.json [NONE]\n            iw.json [NONE]\n            ja.json [NONE]\n            ka.json [NONE]\n            kk.json [NONE]\n            km.json [NONE]\n            kn.json [NONE]\n            ko.json [NONE]\n            ks.json [NONE]\n            ky.json [NONE]\n            lb.json [NONE]\n            lo.json [NONE]\n            lt.json [NONE]\n            lv.json [NONE]\n            meta.json [NONE]\n            mk.json [NONE]\n            ml.json [NONE]\n            mn.json [NONE]\n            mr.json [NONE]\n            ms.json [NONE]\n            mt.json [NONE]\n            my.json [NONE]\n            nb.json [NONE]\n            ne.json [NONE]\n            nl.json [NONE]\n            nn.json [NONE]\n            no.json [NONE]\n            om.json [NONE]\n            or.json [NONE]\n            os.json [NONE]\n            pa.json [NONE]\n            pa_Arab.json [NONE]\n            pl.json [NONE]\n            ps.json [NONE]\n            pt.json [NONE]\n            pt_PT.json [NONE]\n            rm.json [NONE]\n            ro.json [NONE]\n            ru.json [NONE]\n            se.json [NONE]\n            se_FI.json [NONE]\n            sh.json [NONE]\n            si.json [NONE]\n            sk.json [NONE]\n            sl.json [NONE]\n            so.json [NONE]\n            sq.json [NONE]\n            sr.json [NONE]\n            sr_Latn.json [NONE]\n            sv.json [NONE]\n            sw.json [NONE]\n            ta.json [NONE]\n            te.json [NONE]\n            tg.json [NONE]\n            th.json [NONE]\n            ti.json [NONE]\n            tl.json [NONE]\n            to.json [NONE]\n            tr.json [NONE]\n            tt.json [NONE]\n            ug.json [NONE]\n            uk.json [NONE]\n            ur.json [NONE]\n            uz.json [NONE]\n            uz_Arab.json [NONE]\n            uz_Cyrl.json [NONE]\n            vi.json [NONE]\n            wo.json [NONE]\n            yi.json [NONE]\n            zh.json [NONE]\n            zh_HK.json [NONE]\n            zh_Hant.json [NONE]\n            zh_Hant_HK.json [NONE]\n            zu.json [NONE]\n          svn-info.txt [NONE]\n          version.txt [NONE]\n        stubs/\n          Collator.php [NONE]\n          IntlDateFormatter.php [NONE]\n          Locale.php [NONE]\n          NumberFormatter.php [NONE]\n      Util/\n        IcuVersion.php [NONE]\n        IntlTestHelper.php [NONE]\n        SvnCommit.php [NONE]\n        SvnRepository.php [NONE]\n        Version.php [NONE]\n    polyfill-intl-icu/\n      bootstrap.php [NONE]\n    polyfill-mbstring/\n      Mbstring.php [NONE]\n      Resources/\n        unidata/\n          lowerCase.php [NONE]\n          upperCase.php [NONE]\n      bootstrap.php [NONE]\n    var-dumper/\n      Caster/\n        AmqpCaster.php [NONE]\n        ArgsStub.php [NONE]\n        Caster.php [NONE]\n        ClassStub.php [NONE]\n        ConstStub.php [NONE]\n        CutArrayStub.php [NONE]\n        CutStub.php [NONE]\n        DOMCaster.php [NONE]\n        DateCaster.php [NONE]\n        DoctrineCaster.php [NONE]\n        EnumStub.php [NONE]\n        ExceptionCaster.php [NONE]\n        FrameStub.php [NONE]\n        LinkStub.php [NONE]\n        MongoCaster.php [NONE]\n        PdoCaster.php [NONE]\n        PgSqlCaster.php [NONE]\n        RedisCaster.php [NONE]\n        ReflectionCaster.php [NONE]\n        ResourceCaster.php [NONE]\n        SplCaster.php [NONE]\n        StubCaster.php [NONE]\n        SymfonyCaster.php [NONE]\n        TraceStub.php [NONE]\n        XmlReaderCaster.php [NONE]\n        XmlResourceCaster.php [NONE]\n      Cloner/\n        AbstractCloner.php [NONE]\n        ClonerInterface.php [NONE]\n        Cursor.php [NONE]\n        Data.php [NONE]\n        DumperInterface.php [NONE]\n        Stub.php [NONE]\n        VarCloner.php [NONE]\n      Dumper/\n        AbstractDumper.php [NONE]\n        CliDumper.php [NONE]\n        DataDumperInterface.php [NONE]\n        HtmlDumper.php [NONE]\n      Exception/\n        ThrowingCasterException.php [NONE]\n      Resources/\n        functions/\n          dump.php [NONE]\n      VarDumper.php [NONE]\n\n```\n\n\n. @bobthecow ready for another round. >I'm still seeing ~1.7MB box-build phars, at a minimum. How did you get 649KB?\nI see the same, they were just compressed at one point which you probably don't want unless you don't mind the PHAR not being usable because the user does not have the zlib extension loaded. Addressed most comments if not all.\nNote that Box requirement checker takes 280KB with ~30 files.\nYou can also have a great diff thanks to box info --list which lists all the files so you can compare the result or pharaoh. I also think the stub could be reworked a bit to run the requirement checker as the very very first thing when in the PHAR, before the autoloading. I made a suggestion with a different stub which would remove the need for the build-stub script, however I get the previous error of I can't seem to be able to start psysh and I don't really get why :/. >Let's keep the build/stub version. We can always improve on that in future pull requests.\nWhat I don't like about the current stub generation is:\n\nYou need to generate it\nYou need to know about Box internal for the requirement checker and disabling it on Box end will break the stub\nIt requires some pattern based replacements in the current bin\nThe current requirement check is not the first thing done although IMO it should\n\nBut let's do that then, it can always be improved later.\n\nThat's + ~300k for the box requirements checker, and + ~ 1.2MB to each of the compat builds for the new polyfills.\n\nSounds right. The deployment in Travis need to be updated still though. @bobthecow do you plan to have an isolated version with PHP-Scoper for 0.10?. Well first of:\n- Chill: being angry and rude won't get your anywhere, the most likely answer you will get from it is \"fuck off\"\n- The size of the repo is not chocking: it's not a trivial project and it is also well tested.\nThat said if you are really concerned about this issue, feel free to politely do a pull request to add a .gitattributes file in order to exclude directories like test and vendor-bin from the package download.\nAn alternative is also to download only the necessary files with --prefer-dist (or you can configure it in your composer.json file) which will likely reduce the size of the projects downloaded since you won't download the git history anymore. >But the bloated repository size is disrespect for library users.\nMouthful complains on OSS projects are disrespect for maintainers who don't owe you anything. If you feel it is an issue, instead of complaining you should attempt to fix it. Especially since I already gave the solution above, you just need to open a pull request with the right .gitattributes file...\nMaybe this article could be a good read for you.. @bobthecow is the Codecov report in PRs really necessary? I think the link in the checks should be enough, no need for a message + email. Done :). @bobthecow seems to be working but I'm a bit concerned at the lack of e2e tests. That said I'm not sure I'm willing to dig too deep into that either \ud83d\ude05 . For sure, all files are parsed with PHP-Parser and the resulting AST tree iterated over for analysis/change.... >Knowing HOA, it's going to need something; possibly completely excluded as well? Since it's only used in the *-compat builds\nArg, right, I had to add a couple of patches for it in Box itself... will do and test it here as well\n\nI'm kind of leaning towards excluding all of Psy namespace from php-scoper.\n[...] The biggest worry is with third-party dependencies, not with psy/psysh itself\n\nThat's fair enough.\nWill update shortly. Updated. I try to get PhpScoper be able to scope as much as possible but there is\nthings a bit hard to guess so not sure how the linting would work :/\nOn Fri 16 Nov 2018 at 17:55, Justin Hileman notifications@github.com\nwrote:\n\nthis sort of thing could be a linter / warning that php scoper emits. i\nfound all the prefixes in my composer classmap, then searched the built\nphar for them:\n^\\\\\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/bobthecow/psysh/pull/536#issuecomment-439456917, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gT96IXCX3j5wEDacSQ2xhLoUwHvHks5uvu4IgaJpZM4YcldI\n.\n. Got the same feeling about them makzfile but couldn\u2019t figure out why yet\n\nOn Fri 16 Nov 2018 at 21:11, Th\u00e9o FIDRY theo.fidry@gmail.com wrote:\n\nI try to get PhpScoper be able to scope as much as possible but there is\nthings a bit hard to guess so not sure how the linting would work :/\nOn Fri 16 Nov 2018 at 17:55, Justin Hileman notifications@github.com\nwrote:\n\nthis sort of thing could be a linter / warning that php scoper emits. i\nfound all the prefixes in my composer classmap, then searched the built\nphar for them:\n^\\\\\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/bobthecow/psysh/pull/536#issuecomment-439456917, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gT96IXCX3j5wEDacSQ2xhLoUwHvHks5uvu4IgaJpZM4YcldI\n.\n\n\n. @bobthecow updated. @bobthecow cool! How can I reproduce it to fix the Readline thingy?. Oh I see. I think the failing build in the CI needs a restart and it should be green. Is there anything else missing?. maybe we cna add --no-parallel. It's gonna be super slow though :(. Nice! I hope not too many issues will arise with the scoping \ud83e\udd1e\n\nAny ETA about when this is gonna be released?\nOn Tue 20 Nov 2018 at 06:22, Justin Hileman notifications@github.com\nwrote:\n\nWe got a passing build :)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/bobthecow/psysh/pull/536#issuecomment-440143226, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gRnE8iXHC_EMVSJmsfUCa1_CGs_Dks5uw5GCgaJpZM4YcldI\n.\n. The issue with that unstable build?. Regarding the error:\n[ERROR] Amp\\Parallel\\Sync\\ChannelException: The channel closed unexpectedly.   \n\nI think we should report it. It's happening often enough and without a clear reason so it might be a legit  bug. It is also worth noting I never had it neither in PHP-Scoper or in Box itself although I'm using it extensively and the codebase is not any smaller.\nMeanwhile you can do box compile --no-parallel as an alternative. It is much slower but at least it won't cause that failure.\nIf Travis fails due to the long build time, you can do like I'm doing here with PHP-Scoper.. @bobthecow so what is the missing part for the auto-completion? Loading all the code we potentially want to auto-complete?. PsySH doesn't support web servers, see #121. According to Jordi's stats, PHP <= 5.5 is more around 40% than 80 (in May 2016). Plus it's not like bumping the PHP version requirement is gonna break old releases... As @Taluu it's also the responsibility of library maintainers to push libraries. If there's always a good support for older versions, nobody is going to upgrade.\n. @bobthecow drop support for PHP < 5.6 :P\n. also array is not very useful here... Just bump to 7.1 and use typehints \ud83d\ude04 . Just don't do it when you have uncommitted changes :P If you have a way to check that so we could bail out at that time that would be \ud83d\udc4c I didn't find anything :/\nNote that it has never been a big deal for me because even when I did the mistake PHPStorm has always been able to restore everything without an issue. Weird... I'll have to. I'm not sure to follow 1, but 2 & 3 are done by Box to avoid too much faff to the users. You mean it builds all the PHARs right? Or you mean it packages them in tar.gz? If the second I think this should be done in the Makefile instead. true, can be removed. I would eventually add an @echo but I wouldn't do composer update, updating your deps (for an app, not a lib) should be done more careful reviewing which deps needs to be updated, what changed and see that everything is compatible. Unless you have enough e2e tests to test the PHAR and being able to blindly update everything in absolute confidence. >but it does it while ignoring local and global git excludes\nHm I forgot about that part, I probably didn't mind it because the only thing not committed I never needed was that .idea... But I see how this can be an issue. Maybe we can change that to a softer one.\n\nWe should be explicit about what we make dirty, and explicit about cleaning them. This is why the current build always builds everything into build/ and installs composer dependencies needed for build in build-vendor/. Then we can blow those two things away, and ignore everything else.\n\nIt's a fair PoV and we can adjust to change it. My usage was slightly different and more extreme: I really wanted to get rid of everything (except IDE config) that I wouldn't get after a git clone. I used it a lot to make sure that git clone project; cd project; make smth just worked without any user step (although I ended up failing on that for Box since it needs docker...). I added the / prefix, it's usually a better practice to ensure those rules applies only to this project.\n. so I updated the script, there is only two artefact directories ever created: dist and build. Everything is in there. Done. So the PHP 5.4 PHARs are being built thanks to the Composer platform.php option which ensures the deps are installed as everything was on 5.4. So the 4 PHARs are generated here instead of 2 PHARs in two separate builds.\nNote that the non PHP 5.4 PHAR is currently built in 7.1, you may want to lower that. I opened an issue https://github.com/humbug/box/issues/206 to be able to remove the main script since your stub ditches it. It's however a minor optimization that shouldn't be blocking. Updated the makefile for it to never change whatever you currently have in composer.json, composer.lock or vendor. maybe that could be a one liner... not sure about it. Hm, I think I messed up an update at one point, sorry didn't see I removed it. indeed that's more elegant.... the reason I went with multiple PHONY is that it's easy to check you didn't forget one. You see a rule and you can see if it's a command by the presence of the PHONY target. Without it you easily add a new command and completely forget about it. nice trick. I think it's ok either way. You don't have that many commands so it's ok, I've been bitten a couple of times by some missing .PHONY target and easier to manage the other way but I also had more commands, so harder to track. Yep there was one, but .lock is commited for Box so it's ok. Fair. how about moving this into the Makefile?\n```\nPHPUNIT=vendor/bin/phpunit\n.PHONY test\ntest: $(PHPUNIT)\n$(PHPUNIT)t: vendor-bin/phpunit\n    composer bin phpunit install\n    touch $@\n```\nThis way the DX is not affected by it either. I think you are currently missing the install step for PHPUnit, but moving it to the makefile would also solve that issue IMO.. and how you deal with people who want to build it for testing purposes?. Ah I see, maybe that's fine then. ",
    "starrychloe": "I have a slightly different problem. I cannot get PsySh to accept any UTF characters, even if I type them in manually. \n```\n$  echo $LANG\nen_US.UTF-8\n$ yii kw/shell\nPsy Shell v0.7.2 (PHP 5.6.24 \u2014 cli) by Justin Hileman\n\n\n\necho \"\";\n=> null\n```\n\n\n\nThe echo was supposed to be echo \"\u2713\";, which I copied and pasted. When I turn on my international keyboard and try to type \u00e9, then it doesn't echo any characters at all. It works in the Bash shell and terminal.\n$ echo caf\u00e9\ncaf\u00e9\nWindows 8.1, Cygwin 2.5.2\n. ",
    "dlinnemeyer": "Thanks. I'll try to get that up sometime in the next week or two.\n. Awesome; thanks. I'm looking forward to it.\n. Thanks.\n. Thanks for checking into it.\n. ",
    "harikt": "Hey @bobthecow ,\nThis is a nice feature to have. But I do understand the complexity it may need. Why I am here was \nI tried to update to latest version today downloading via wget https://git.io/psys\nAfter moving downloaded file to /usr/local/bin and executing psysh it shows \n\nPsy Shell v0.8.15 (PHP 7.1.10-1+ubuntu16.04.1+deb.sury.org+1 \u2014 cli) by Justin Hileman\nNew version is available (current: v0.8.15, latest: v0.8.17)\n\nSo was wondering if there is a command :) .. What confused me was which one I should download :D .. ",
    "staabm": "you should kill yourself for not linking to the already opened issue ;-)\nhttps://github.com/bobthecow/psysh/issues/67\n. absolutely, just kidding =)\n. @bobthecow this should be mentioned in the composer.json within the suggest section\n. see https://github.com/php/php-src/blob/master/UPGRADING for a list of changes in php7\n. I would love having something like this in whoops, but I guess it needs to be some kind of external optional feature because it might double the codebase in terms of lines of code I guess?. I am happy to change it. Wasnt aware what the ext supports in this project :-)\n. ",
    "tarky": "@oxfist @bobthecow \nThanks a lot! and sorry for late reply.\nAs @bobthecow said, with built-in web server and \"php -S localhost:8000\", web request debugging works.\nI hope the document explain that for php beginners. Anyway, such a great tool!\nLet me share points I noticed.\n\u30fbDuring web request debugging, the prompt \">>>\" doesn't appear\n\u30fbIf some error happens such as syntax error or typo, web request debugging mode has finished automatically.\n\u30fbThe strings \"#!/usr/bin/env php\" still appears at the top of web page. Is this intended?\n\u30fbget_defined_vars() which is used in the document doesn't get the variables outside class. So It's difficult to load complete program state in an ordinary MVC framework such as CakePHP. \n. @bobthecow Thank you very much for detailed answer.\n\n\nDuring web request debugging, the prompt \">>>\" doesn't appear\n\nThat should still appear... It does for me. When you're debugging a web request do you have readline enabled (can you hit \"up\" and get the last line you typed)?\n\nI hit \"up\". But last line doesn't appear. Instead  strange strings ^[[A appear as follows.  So readline might be disabled. I googled the way to install readline. But It's difficult for me. Is there easy tutorial for installing readline?\nListening on http://localhost:8000\nDocument root is /Path/to/mayApp/app/webroot\nPress Ctrl-C to quit.\nPsy Shell v0.1.8 (PHP 5.5.9 \u2014 cli-server) by Justin Hileman\n^[[A\n\n\nIf some error happens such as syntax error or typo, web request debugging mode has finished automatically.\n\nWhat operating system are you using? Does PsySH normally recover from errors when you run it from the command line? Are the resulting messages red or white?\n\nI'm using Mac OS X 10.8.5 as follows. \n[My enviroment]\nOS X 10.8.5\nPHP/5.9.9(XAMPP)\nComposer\nthe resulting message is as follows.\nLine 1 is my command which lacks the end of single quotation. Line2 is the resulting message. The font color is white on red background.\n$this->Theme->find('all);\nPHP Parse error: Syntax error, unexpected T_ENCAPSED_AND_WHITESPACE on line 1\n\n\nThe strings \"#!/usr/bin/env php\" still appears at the top of web page. Is this intended?\n\nAs far as I know, the only way to prevent that is to use Composer (or source) install instead of the Phar and autoload the code. Yay PHP! :)\n\nI'm already using Composer. I used composer global require psy/psysh, as done in the document.\n\n\nget_defined_vars() which is used in the document doesn't get the variables outside class. So It's difficult to load complete program state in an ordinary MVC framework such as CakePHP.\n\nYou can pass whatever variables you want to the shell... in many cases, the defined variables are enough. But if you want to pass in global variables, or class member variables, or $this you absolutely can. \n\nYes. As you say, I can pass $this. But there could exist many variables other than $this such as $_SERVER ,$_SESSION , $_GET etc. Off course, even only $this is greatly helpful.\n\n(Note that you can't name $this this when you pass it in, since that's a magic variable name and will be overridden to point to the shell)\n\nFor me, namig $this to $this looks working for some reason. If possible, there will be problem sooner or later\n. ",
    "kfriend": "Awesome! Thanks for the quick turnaround.\n. ",
    "paolodina": "Hi, I get this:\n```\n$ psysh \nPsy Shell v0.5.1 (PHP 5.5.9-1ubuntu4.11 \u2014 cli) by Justin Hileman\n\n\n\n$foo = function() {};\n=> Closure {#173\n     file: \"/home/vagrant/.composer/vendor/psy/psysh/src/Psy/ExecutionLoop/Loop.php(76) : eval()'d code\"\n     line: \"1 to 2\"\n   }\n```\n\n\n\nAny hint?\n. I'm really sorry, first time using php.\n. ",
    "GrahamCampbell": "Please create a new issue instead of commenting on closed issues.\n. Sending to develop...\n. What this means in terms of supported versions:\n- Any 2.3.x provided that it is 2.3.10 or greater\n- Any 2.4.x provided that it is 2.4.2 or greater\n- Any 2.5.x\n- Any 2.6.x\n- Any 2.7.x\n. Because we're forcing 2.3.10, so the equivalent 2.4 release is 2.4.2 to contain the same fixes. It would be a lot simpler if we just said: ~2.3 tbh.\n. That's quite poor design on composer's side. :(\n. I don't understand why we'd want dev-dependencies globally installed???\n. Yeh, maybe we need to take this up on the composer repo.\n. 0.1 still follows semver. semver has rules specifically for 0.x releases. We can assume no bc breaks in patch releases, but they may be in minor releases, thus 0.1.x should be safe.\n. @bobthecow Composer doesn't work like that. 0.1 translates to 0.1.0.0 under the hood in composer. This really needs to be changed to 0.1.*.\n\nSemVer tags always have a patch version. If a developer doesn't use SemVer tags\n\nI have no idea what you mean? It has a patch version, it's just 0.\n. What? That's not actually what you've done here. What you've done is allowed 2.6.0, but not 2.6.1.\nAlso, you've sent this to the wrong branch.\n. I already fixed this on the develop branch: https://github.com/bobthecow/psysh/pull/111.\n. @bobthecow What's the ETA on this please? Are we talking days, or weeks, just so I know what to expect. :)\n. The fixes seem to match symfony's coding style which builds on psr-2.\n. I don't even like the idea of running cs fixers in travis. I actually built my own service to deal with this: https://github.com/StyleCI/StyleCI. Example: https://github.com/thephpleague/factory-muffin/pull/359.\n. You can configure it a .php_cs config file. :)\n. PHP Parse error:  syntax error, unexpected ',' in /home/travis/build/bobthecow/psysh/src/Psy/Formatter/DocblockFormatter.php on line 116\n. https://github.com/blainesch/psysh/pull/1\n. :+1:\n. @bobthecow Funny you should say that. php-cs-fixer 2.0 will be introducing .dist config like phpunit has, so users can add .php_cs to their .gitignore file, and can commit a .php_cs.dist file. Also, caching will be enabled by default in 2.0 too. :)\n. No, not yet. I'll link you to the pulls, one sec...\n. Caching:\nhttps://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/865\nhttps://github.com/FriendsOfPHP/PHP-CS-Fixer/pull/873\nDist file:\nhttps://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/804\nhttps://github.com/FriendsOfPHP/PHP-CS-Fixer/pull/829\n. Also, note the default level in 2.0 was recently changed from symfony to psr-2, you will probably want to switch to the symfony level in the config otherwise you've suddenly lost a lot of the fixers that were enabled.\n. That's why I normally specify the level in my config, incase it changes - that way people with old versions still get the correct level, and so do people with new versions.\n. No, if I were you, I'd disable it in the dist. People can enable it in their local config if they want to.\n. Ping @bobthecow.\n. I assume you meant 0.3, not 3.0. :)\n. If we raise the minimum symfony version to 2.5 in 0.4, then we can switch to using this new class, and avoid the deprecation warnings.\n. I really don't like the depreciation php warnings symfony generates. They should just delete methods in 3.0, without warnings in 2.x code.\n. I'm happy to prepare pull request to upgrade us to ~2.5 symfony and use the new classes.\nIs that something you'd be interested in - where by people needing symfony 2.3/2.4 can just use an older version of psysh.\n. Symfony doesn't follow semver. They just mainly follow it. They freely admit that. It's a target for symfony 3.0+ to adhere to semver more strictly.\n. Any news on this?\n. I don't really like this idea tbh, sorry.\n. :-1: for dependence on composer. I don't want every laravel app to be download composer...\n. Ah, you're using my new docblock fixers. :)\n. lol\n. :)\n. Any news on this?\n. @bobthecow I've restored stuff to the composer.json as you asked. :)\n. I still worry that they're going to cause conflicts on global installs, say if people want to use php-cs-fixer 2.0, or an older version of phpcs.\n. Maybe we should recommend using a phar file, and adding it to your PATH in windows, or the equivalent for other OSs.\n. I'm confused as to why you have a develop branch tbh. It would make more sense to commit anything going into the next patch release straight to the master, and use develop to work on the next minor release.\n. I don't think that makes sense. We have tags that do the same thing...\n. No major framework follows that model. Work on patch releases never goes in a develop branch for any decent framework I've ever come across.\n. Right, you have been working on all the 0.3.x and 0.4.x patch releases on the develop branch, rather than on the master?\n. Is this a bug? I thought this was intentional, because those features require that extension.\n. I think we'd have to wait until symfony 2.7.0 was released before using this?\n. If we add this, then it means psysh won't work on L5.0 anymore. People using Laravel 5.0.x will be stuck with an old version of psysh. That said, I still like this, I just don't think this should go into psysh for another 8 weeks at least.\n. @nicolas-grekas No, the blocker is that laravel 5.0.x forces the 2.6.x symfony component so composer won't allow them to be installed together, so will select an earlier version of psysh.\n. Would be cool to get this into psysh 0.5.0. :)\n. Laravel 5.0 will be dropped in a few days time and 5.1 needs symfony 2.7, so we're in business.\n. Symfony will land today or tomorrow I think, and laravel is due about a week later, or there abouts (I'm not able to reveal the actual release date, sorry).\n. Should we bump the symfony version first?\n. \"symfony/var-dumper\": \"^2.7.2|~3.0\",\n. Then as soon as symfony v2.7.2 is tagged, then we're in a position to do a develop->master merge here.\n. I still think we should enforce the pretty version. :)\n. Yeh, true. But who would want to use that after 2.7.2 is out?\n. Meh, tbh, I'm not massively fussed. Mergy mergy!\n. I think it would make sense for us to bump to 5.4+. 5.3 isn't maintained.\n. If not, deffo 5.3.9+.\n. k :)\n. > It'd be awesome if Packagist could give package maintainers insight into PHP and dependency versions \nThey did a blog post a few months back actually.\n. http://seld.be/notes/my-view-of-php-version-adoption\n. I don't think it really matters what package maintainers do. Surely what's of more interest is the version of php real people are actually using?\n. :+1:\n. @bobthecow What are we going to do about StyleCI? Should we disable the preincrrementation fixer?\n. @bobthecow Hmmm. Yeh, that would be useful. I suspect 90% of the installs of psysh are due to laravel though?\n. laravel/laravel doesn't get many installs. laravel/framework is the one that'll have MANY installs per month. :)\n. How does https://github.com/bobthecow/psysh/pull/209 look?\n. This has already been fixed by php-parser. One sec...\n. @avindra Yes. It's not fixed in that release. Fixing php 7 is relatively low priority, and required us to rename classes, so the fix will only be included in 0.5.0, whenever that gets released.\n. You need the develop branch. :)\n. Oops - we forgot to update the version constant on the develop ranch, lol.\n. > Are there any other known issues?\nD'no. I've never actually used php 7 before, lol.\n. Has anyone got any idea what's going on with the tests here?\n. @bobthecow Though, that means our current release is broken though - we're using 1.x, so we're getting all changes from 1.2.x.\n. @bobthecow It's not meant to be? Ping @nikic.\n. @bobthecow Give @nikic some time. It's possible we can fix this in the next patch release of php parser.\n. I'll send a pull fix that separately then.\n. @bobthecow https://github.com/bobthecow/psysh/pull/188\n. Alrightly. How does this look now?\n. @bobthecow Fine with me. :)\n. Yeh, probably. :)\n. Tests seem to be passing. :)\n. That php7 thing.\n. I'm rebasing it now.\n. That link you've posted for laravel is incorrect. It's for laravel 4 which doesn't use psysh, it uses boris.\n. That link is still wrong.\n. Laravel 5 natively uses psysh. Look: https://github.com/laravel/framework/blob/5.0/src/Illuminate/Foundation/Console/TinkerCommand.php.\n. I'm the one that moved Laravel over to it, and then @bobthecow awesomeified it.\n. It should get autoclosed by github when 0.5.0 is released.\n. I ran this code in artisan tinker:\nphp\nApp\\User::forceCreate(array(\n    'name' => 'Steven'\n    'email' => 'steven@example.org'\n));\nTaken from https://github.com/laravel/framework/issues/8268.\n. Fresh laravel/laravel install btw. :)\n. Wrong branch. Needs to go to develop.\n. Rebasing should allow styleci to pass.\n. Ironic that people won't see this until it's too late since it's on the develop branch. ;P\n. Green. :)\n. Awesome. :)\n. Great. I'll get that laravel PR sorted out then.\n. @bobthecow Your php parser change is broken and needs reverting asap please. It prevents installs on Laravel 5.1 as it prevents us using 1.3.\n^1.2.1 allows all 1.x equal to or greater than 1.2.1, but you changed it to use ~1.2.1 which doesn't allow installs on 1.3. :(\n. https://github.com/bobthecow/psysh/pull/213\n. I chose 1.3 due to the php 7 fixes.\n. Great this is fixed now. :)\n. Sure. Glad this is fixed, whichever way. :)\n. It's because symfony 3 seems to have changed the method signature.\n. Install using --prefer-stable and you shouldn't have this issue.\n. @paolodina That's not an error...\n. That's us describing the closure you've made.\n. Yeh, me too.\n. Casters have been removed in 0.5.\n. Probably because we don't use the same version of php-cs-fixer that's public. Ours is better. :P\n. This looks to be psr2 related though.\n. PSR2 doesn't allow those spaces there.\n. You could turn off the function argument fixer?\n. > In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.\nThat means exactly one. It's just badly worded. If it meant one or more, I think it would have said \"more than one\".\n. Do you have all the extensions installed.\n. Where there any dependencies \"suggested\" when you ran composer install?\n. Please close this and send to the develop branch.\n. There you go @bobthecow. Sorry I didn't get to this earlier. :)\n. I think it's right. Maybe you need to make an issue for the PSR team to look at?\n. Only they can collectively confirm what that rule actually meant, then we can take it from there. :)\n. > Unless they update the spec (which they almost certainly won't) then it's ambiguous and both readings are valid.\nI agree it's ambiguous, but I don't agree that the spec can't change. \"Bug fixes\" are surely a good thing, and the specs aren't never changed. As I said, it's not for me to say. You'd have to ask on the mailing list or something. :)\n. > I meant the spec almost certainly won't.\nLol, yeh, I know what you mean. It still might be worth getting some clarification though.\n. > I would let the default at monthly check\nMonthly is way too long IMO. Daily would make more sense.\n. > If it's prompting, daily would be super annoying :)\nMayby we need an option for people to reply to the prompt with \"remind me later\"?\n. Yeh, maybe. We'd need to make sure subsequent warnings are unobtrusive though. I'd probably want the initial warning to be quite clear though.\n. I thought this was already fixed?\n. Right. :)\n. NB, you can use 0.6.* to install it.\n. Rather than 0.5.*.\n. Yeh. ;)\n. What about on the latest version?\n. I think this is intentional is it not?\n. Due to the way the internals work.\n. Looks like you're using an old version. Presenters don't exist anymore.\n. https://github.com/bobthecow/psysh/commit/b80a2f679649e007f7d87df9f8da40bddf93e9a4\n. Already been fixed.\n. > This happened on a fresh laravel 5.2 installation. Looks like invalid dependency.\nNot an invalid dependency. Laravel 5.2 is NOT ready yet. We're waiting for a v0.6.0 release here, which will happen before Laravel v5.2.0 is marked as stable, and ready for use.\n. > change your dependency to 0.6.x-dev.\nNot possible since laravel has a hard dependency on 0.5.x. As soon as 0.6.0 is tagged, we'll change it.\n. I think the plan for Laravel 5.2 is to release it in about 5 or 6 weeks.\n. That's not an official statement though. Just my personal guess. I've not actually talked to Taylor about when he plans to release, recently.\n. Great. :)\n. Give me a few mins. :)\n. Ok, I think we're ready now. :)\n. :-1:\n. We should retain compatibility with both 1.x and 2.x.\n. Something like this would be fine: https://github.com/jeremeamia/super_closure/pull/70/files.\n. Maybe the other class alias fixes should be moved to another PR too?\n. Maybe just make them two commits and keep them both in here, then just rebase if the other PR's merged.\n. Asside from a few more minor things I've just commented, this is looking pretty good now. :+1:\n. :+1:\n. Should be targetted at the develop branch rather than the master.\n. If you like, I can add it for you. Just let me know. :)\n. Does this look ok @bobthecow?\n. How about that?\n. I just stopped fixing the file. We weren't fixing it before anyway.\n. https://github.com/GrahamForks/psysh/commit/b3af2a5227544779faeb22ce022441d358c2be52\n. All done @bobthecow. :)\n. Please send to the develop branch.\n. Please send to the develop branch.\n. What's going on with StyleCI here? Does this need rebasing?\n. Please send PRs to the develop branch.\n. This is intentional.\n. PHP 7 is ONLY supported if you use PHP-Parser 2.x.\n. > Require PHP-Parser 2.x in development\nNo. We also want to allow 1.x for PHP 5.\n. This is a bug in php-parser 1.x allowing itself to be installed on php 7. That's out of our control.\n. Ok, then, our min version must reflect what's needed to get most thing to work, not everything.\n. > Oh, this test case probably should be gated behind a check for PHP 7.\nThe issue was present on PHP 5. I just originally assumed it was due to PHP 7.\n\nAh, sorry, I should have mentioned this in the original description, but I'm using PHP 5.\n. Let me send a PR to replicate this.\n. https://github.com/bobthecow/psysh/pull/274\n. Let's see what travis actually does here.\n. There is indeed an error. Looks like we need to skip that test on php parser 1.x.\n. Maybe we need to work php-parser 1.x test into the travis build matrix?\n. This can be closed now?\n. Oh, wait, no. No php-parser release yet. ;(\n. This is NOT a bug in psysh. This is just how php's echo function works. 0 is cast to empty string, and 1 is cast to the string \"1\".\n. Hmmm. You're right. Very strange.\n. Sure. ;)\n. Maybe in like 5 years' time, we can bump psysh onto PHP 7 only? :P\n. Have you got mb-string installed?\n. ?\n. There's nothing wrong with them. The reverse refactor would also make a valid PR if you see what I mean.\n. Is there a way to disable this (say for if bundled with laravel)?\n. NB Currently this code never actually resolves php parser 3.x since it's not stable.\n. > oh, good to know. is 3.x required for 7.1?\n\nYeh, php parser 2.x doesn't parse php 7.1 code, though can parse older code on php 7.1 just fine.\n. Ok, rebased this on develop.. Ok, PHP-Parser made some breaking changes. Will investigate.. It seems the getRawLine method has been deprecated in both v1 and v2, and was removed in v3. Safe for us to just use the new getStartLine method since it's present in all versions.. @bobthecow Looks good now I think. This is needed in order to get Laravel properly onto PHP 7.1 since class preloader also depends on PHPParser.. Passing now. :). Why would you be running this on a web server?\n. Interesting. I was just curious as to why you'd do that. :)\n. develop branch is ready now :). > It looks like var-dumper was moved into Symfony core and can no longer be installed alongside of it. \nNo, symfony all components are in the core as well as being separate packages.\nPlease post your composer.json file.. Please try with the latest v0.8.3 release. I think this was already fixed.. > How about going to PHP7\n\ud83d\udc4e Don't see the need for this package to kill support tbh. Maybe in another 2 years. I think php 5.4 is fine in this instance.. > This is s a dev tool\nNot really, actually. I use this in production with Laravel apps all the time.. > You're debugging on live prod ? Logging in CLI on prod ? That sounds like some really horrible ideas...\nI don't see anything wrong with making database queries on production, through the artisan tinker command. Often my apps are architected using a command bus, so it's not uncommon for me to dispatch commands, using the command line, for things that do not exist on the admin web interface yet.. Looks pretty good. :+1: . > I'm not super familiar with the Laravel/Lumen relationship, but it looks like laravel/tinker isn't a direct replacement, as Lumen itself doesn't depend on illuminate/console, and its artisan uses symfony/console directly instead.\nIt is a replacement, and it ships with the Lumen core. :). (Oh, we changed our mind on putting it in lumen core, but I can assure you it is the official package for both Laravel and Lumen - I wrote it myself). The whole point of us having a laravel/tinker package was to:\n\nMake it available in lumen.\nMake it an optional dependency in Laravel, since php parser is jumping through versions very quickly, so not everyone can keep up.. Also, we put it in the offical composer suggest: https://github.com/laravel/lumen-framework/blob/5.4/composer.json#L51. Is this going to merged then, since laravel/tinker is the official package for lumen?. Ah, cool. \ud83d\udc4d . Yeh, Laravel 5.2 is not supported anymore. I'd recommend getting on to php 7.1 and Laravel 5.4 asap. Laravel 5.5 will be out soon too. Also, the newer laravel versions don't have a hard dependency on psysh to avoid just this issue, so you can upgrade that component, without Laravel having to maintain it's BC, and without it forcing php parser on people.. Takes 10-15 seconds of composer time.. Meh. Not sure we should add support for goto tbh.. Why though. What uses case is there for that?. Nice. \ud83d\udc4d \n\nPlease send to develop though. :P. These violations would have already been automatically fixed. :P. Take a look at develop branch. It'll get the fixes first.. I'd recommend that version constraints are always bounded. It doesn't hurt to raise the bound later down the line if it works with 8.x, but impossible to do the opposite.. Your decision, but I think the least worst option is to always bound dependencies. :). Have you decided what to do here?. > The PsySH execution context doesn't automatically inherit use statements from where it's called\nYeh, I found that out yesterday the hard way after typing out a lot of code, then having to go back. :P. This will have the side effect of breaking any code that calls php -a though?. Is there anything we can do to easily increase the test coverage? I noticed on the previous PR, no tests failed. :P. \ud83d\udc4d . \ud83d\udea2 . So is php 5.4, and 5.5, and symfony 2.4, 2.5, and 2.6 was ages ago. Why does that matter? It's not the job of this package to force people not to use them. If it works fine, there's no real case for not supporting them.. > Seriously, update if you can.\nIf people can, then they will. Nobody's saying people have to use 2.3, but if they need too, then can. ;). btw https://symfony.com/roadmap?version=2.4#checker :P. > There aren't any backwards compatibility breaks in develop so far, so if I were to cut a release right now it'd be 0.9.4.\nDoesn't semver dictate new features require a minor version bump?. \ud83d\udc4d . Does it work after uninstalling xdebug?. xdebug 2.7.0beta1 is not actually compatible fully with php 7.3 yet. No release or even master of xdebug fully works yet.. Does it work after full uninstallation of the plugin, not just disabling?. > xdebug works very well with php 7.3 from what I have tested, has no issue with it.\nThere are various known issues documented on xdebug's github, including a failing test suite.. If this is bug in homebrew's version of the build, perhaps try building php using php-build? You can install phpenv using brew, and then it uses php-build under the hood.\nhttps://github.com/phpenv/phpenv\nhttps://github.com/php-build/php-build. php 7.3.1 is available on mac via phpenv. Does it work with phpenv + phpbuild?. :/. Is this supported in PHP 7.3?. Sorry, I meant 7.2.. As soon as the php builds pass, the entire build will be marked as green, regardless of what hhvm has done, so if it's still running, that doesn't matter, since we don't really care if it passes at this point.\n. That bit is indented wrong. The rest of the file was correct.\n. My pull is correct then. :)\n. 2.0.* would be better, or even ~2.0. It's a bad idea to lock on a patch version like that.\n. I already pointed that out yesterday. :)\n. better to use list?\n. This is a super terrible version constraint, and is already broken....\n. This looks wrong.\n. >  smileys should be used as a punctuation chars?\nI disagree. They are not sentence closers.\n. Delete the :) to pass.\n. :). looks stupid. It should just be ..\n. https://i.starbs.net/p2Y0\n. @bobthecow phpunit requires symfony finder. I can add it back if you like. :)\n. > By removing these from composer dev requirements, you force contributors to maintain a global installed copy that stays in sync with whatever version we expect to have. Is there any downside to leaving them here so that people can still run vendor/bin/php-cs-fixer fix before committing?\nI think it's fine for people to have them globally installed otherwise we're adding time to our travis build. Some projects even expect contributors to have a global install of phpunit too.\n. StyleCI makes it super easy for contributors to download a diff then can apply using \"git apply\" anyway. I think this is arguably faster than running php-cs-fixer on their system - it runs much slower for people with xdebug installed for example.\n. StyleCI does have a new feature coming up where by you will be able to run a command line tool that will upload the code to our servers, analyse it, and then download and apply the fixes.\n. > But that workflow requires people to commit things that are wrong.\nPeople can still use global installs. I'd totally recommend that. php-cs-fixer works well as a global install.\n. > It doesn't empower them to actually do it right the first time.\nI normally write code that passes StyleCI's checks first time, lol.\n. Is there a way to skip install on travis?\n. Without having 2 different composer.json files?\n. Ages ago now. Probably over 2 months. Let me check for you...\n. It was 8th December 2014: https://github.com/composer/composer/pull/2596.\n. Should this class be made final perhapse?\n. this could result in a fatal error\n. you need to convert the throwable object to an exception first\n. Should be reverted.\n. ?\n. ?\n. just use the prefer php 7 one, and be done with it surely?\n. this is now an unused import\n. That should be fixed in a separate PR then.\n. this class doesn't exist on 1.x\n. you need to update this\n. you can't just update the version constraint to allow 1.x again, but leave the code here that only works on 2.x\n. this code is duplicated - we need to find a way to avoid that\n. hmmm, only create the parser factory if we need it surely?\n. ie, $this->parser    = $parser    ?: (new ParserFactory())->createParser();\n. we should add an if statement then\n. > But this works on 5.3 :)\nYeh. :P\n. missing short description\n. missing short description\n. missing short description\n. some phpdoc would be nice here so we know what name actually is\n. php-cs-fixer was moving these comments about, so i removed them - i'll see what i can do here\n. yes, it is :)\n. https://github.com/FriendsOfPHP/PHP-CS-Fixer/blob/1.11/Symfony/CS/Finder/DefaultFinder.php\n. Sure. :)\n. CS checks failing because this is not a valid short description. Provide one first, then leave a newline, and add this description.\n. PHP 5.5 is EOL now too. Everyone should be on PHP 5.6+ unless they are making security fixes and building PHP themselves.\n. I'd recommend bumping to 5.5.9 actually.\n. You should allow the use of guzzle 5 too to avoid conflicting with everything.\n. That would allow us to only have to bump to PHP 5.4 too.\n. No need for this constructor now. same. this change is wrong. ah, wait, no, just confusing variable name :). the comment still needs editing though. With this change, is there any version dependent php parser code that can go?. Not sure how useful this phpdoc is tbh. ;). Not sure how useful this phpdoc is. :P. This comment is misleading, since we do not fall through. \ud83d\udc4e for adding it.. This was not fixed by StyleCI because the fixer is turned off in the configuration.. Bit of a hack to get PHP-CS-Fixer to work. :trollface: . Confusing method name perhaps? Better to name it shouldBindClosure?. Why do we need the &?. Why the &. Objects are already passed by reference.. Probably want this in a finally?. Are we sure we want to call this again if we already called it?. ",
    "wulftone": "I'd love to, but I have no idea how.  \n. Unfortunately, they appear precisely the same:\nPHP Version => 5.4.28\nLoaded Configuration File => /usr/local/etc/php/5.4/php.ini\nIf it helps, here's the PHPUnit info:\n// PHPUnit 3.7.37 by Sebastian Bergmann.\nphpunit also displays its own colors fine when running with --colors, but not in psy shell.\n. ",
    "kenjis": "I have colored output but no >>> at first. But once an error is outputted, >>> appears.\n```\nPHPUnit 4.8.6 by Sebastian Bergmann and contributors.\nPsy Shell v0.6.0-dev (PHP 5.5.26 \u2014 cli) by Justin Hileman\nls\nVariables: $mock, $mock2, $this\nls\nVariables: $mock, $mock2, $this\nshow\nRuntimeException with message 'Not enough arguments.'\n\n\n\nls\nVariables: $mock, $mock2, $this\n```\n. \n\n\n",
    "toddmazierski": "Hi, all! I had trouble getting ANSI colors to appear in PHPUnit when debugging with PsySH, too. When running PHPUnit (a fairly old version\u20144.1.5), the following value:\nphp\n@posix_isatty(STDOUT)\n\u2026returns false, so the following two dependencies automatically disable colors:\n- StreamOutput in Symfony\n- ConsoleColor in PHP Console Color\nBoth libraries do support overriding this auto-detection mechanism ($decorated in Symfony, setForceStyle() in PHP Console Color), so perhaps Psysh could support a \"force\" configuration flag itself, and pass it along.\nHope that's useful!\n. Will do, @GrahamCampbell, as soon as I correct these failed checks!\n. Moved to #272.\n. > Does it make sense to add support for invoking force color via a command line flag as well?\nIt does to me! I'll make that change. :+1: \n. Ready for re-review, @bobthecow! Thanks for the feedback. :smile: \nI'll squash everything into a single commit if it's a \"go\" to merge.\n. > The one other thing to consider is whether to have a three-state color option, i.e. true/false/auto.\nBoth colorization libraries PsySH uses are taking Windows terminals into account in their auto-detection functions:\n- StreamOutput in Symfony\n- ConsoleColor in PHP Console Color\nBecause of this, I don't think PsySH needs to be concerned about a third --no-color configuration state.\nThat said, I'm curious to hear your thoughts, and I'm happy to help if it's decided that's the way to go. :smile: \n. > \u2026most Symfony console based apps (e.g. composer) have --ansi and --no-ansi flags for forcing either direction.\nHmm\u2026consistency is important. And having to deprecate & rename a configuration flag just because we didn't take into account all possible states sounds annoying.\nI'm convinced. :smile:  If you'll allow me a few more days, I'll make that modification. Thanks for discussing, @bobthecow!\n. My apologies for the delay, @bobthecow! I'll wrap this up this weekend.\n. Moving to #279!\n. Hi, @GrahamCampbell! I'm not entirely sure I'm following. If a developer has the minimum version of PHP-Parser installed, and s/he runs the unit tests, a test failure ought to be expected?\n. > This is a bug in php-parser 1.x allowing itself to be installed on php 7. That's out of our control.\nAh, sorry, I should have mentioned this in the original description, but I'm using PHP 5.\n. Fair enough! :smile: Just thought I'd make note of it. Thanks for considering it.\n. DocBlock added and commits squashed, @bobthecow! Thanks for all your help.\n. Ah! I was wondering about that. Will do. :+1: \n. Ah, I didn't know that! These 5.3 test failures confirm it.\n. :+1: \n. > Convince me?\nI'm happy to try! If unsuccessful, constants and equality it is. :+1: A few design reasons to consider an alternative, though:\nType hinting\nBecause color mode is a class, type hinting can be used to help prevent bugs (and aid in debugging existing ones).\nExample: class and functions\nIf an invalid value is assigned, a clear error happens immediately:\nphp\n(new \\Psy\\Configuration)->setColorMode('oops');\nPHP error:  Argument 1 passed to Psy\\Configuration::setColorMode() must be an instance of Psy\\ColorMode, string given, called in...\nExample: constants and equality\nIf an invalid value is assigned, nothing happens immediately:\nphp\n(new \\Psy\\Configuration)->setColorMode('oops'); // => null\nHowever, a less clear error might happen later on (ex. call on a non-object).\nSilent failures\nEquality can lead to silent failures, since nearly anything can be compared to anything.\nExample: class and functions\nFor example, imagine that the colorMode has not been assigned due to an initialization bug, so it's null:\n``` php\n$config->colorMode(); // => null\nif ($config->colorMode()->isAuto()) {\n    // ...\n}\n```\nA fairly clear error happens immediately:\nPHP Fatal error:  Call to a member function isAuto() on a non-object...\nExample: constants and equality\nHowever, imagine the same scenario as above, but with constants and equality:\n``` php\n$config->colorMode(); // => null\nif ($config->colorMode() === \\Psy::COLOR_MODE_AUTO) {\n    // ...\n}\n```\nNo error occurs. However, a less clear error might happen later on.\nSkipped use of constants\nDevelopers are sometimes tempted (myself included) to simply skip using the constants (ex. to keep their code terse). This can lead to unintended bugs:\nphp\nif ($config->colorMode() === 'automatic') {\n    // (will never execute since \"automatic\" is not a valid setting)\n}\nUnintented operators\nSince equality is not a concrete, public interface, developers may be tempted to use other operators the author didn't intend. For example, == instead of ===, or worse:\nphp\nif (preg_match('/auto/', $config->colorMode())) {\n    // ...\n}\nThere are a couple of other reasons (difficult to mock in tests, bound to static behavior), but I think these are the most complelling! Thanks for considering it!\n. > It feels like all of these are twisting ourselves into contortions to work around PHP's lack of enums and the ability to typehint against them :)\nHa! Now that may very well be the case. :smile:\nThat said, I very much appreciate you entertaining my arguments, @bobthecow! Reworking the code now to use constants and equality. \n. :+1: This class has been removed entirely, so the checks should come back clean now.\n. ",
    "saulshanabrook": "ok thanks!\nOn Thu, Jul 3, 2014 at 4:15 PM, Justin Hileman notifications@github.com\nwrote:\n\n$this isn't in get_defined_variables().. you can pass it in if you want\nthough.\npublic function save($object = '', $related_field = '')\n    require('/Users/saul/projects/Paddle8/psych');\n    \\Psy\\Shell::debug(['this' => $this]);\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/bobthecow/psysh/issues/79#issuecomment-47979502.\n\n\nSaul Shanabrook\nabout.me/shanabrook\n[image: Saul Shanabrook on about.me]\n   http://about.me/shanabrook\n. ",
    "Rarst": "Yeah, I figured that after the fact. :) But some fool-proofing here won't hurt. :)\n. I am hesitant to PR that since I don't use psysh actively enough (so far) to quickly poke around and make sure nothing explodes horribly from the change. :)\nNo urgent/hard need, mostly just bringing it to your attention that 0.9 branch seems to be getting closed there, so packages are likely to ask for 1.x now.\n. ",
    "kostajh": "That seems sensible. Thanks!\n. @bobthecow you might want to update README.md as well which references dev-master\n. Sorry it broke your nice homepage layout (the composer instructions are now on two lines), thanks for merging.\n. ",
    "flip111": "Perhaps ctrl + enter could be used to insert new lines?\n. I put php_manual.sqlite in C:\\Users\\flip111\\.local\\share\\psysh but this didn't work. (command: doc array_map)\nSome additional things which could be interesting:\n- On windows %HOMEDRIVE%%HOMEPATH% is the same as %USERPROFILE%.\n- Creating folders starting with a dot can be a bit problematic in windows because it can not be done from the GUI, instead you have to use mkdir so this is not really user friendly.\n- Windows puts program configuration in %APPDATA% which is something like C:\\Users\\flip111\\AppData\\Roaming This is best practice on windows.\n. v0.1.12 b69799e14bea3c0e3d0f3e99dabe2026303ef21f of 16 august https://github.com/bobthecow/psysh/commit/b69799e14bea3c0e3d0f3e99dabe2026303ef21f\n. yes fixed, ty\n. here is an example where Composer put a globally installed package %APPDATA&\\Composer\\vendor\\psy\\psysh --> C:\\Users\\flip111\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\n. After defining a function\n```\n\u00bb psysh                                                                                  [13:52:55]\nPsy Shell v0.7.2 (PHP 7.0.8-0ubuntu0.16.04.2 \u2014 cli) by Justin Hileman\n\n\n\nfunction signalToHierarchy($signal) {\n...   $bracket = strpos($signal, '[');\n...   if ($bracket === false) {\n...     $first = $signal;\n...     $second = false;\n...   } else {\n...     $first = substr($signal, 0, $bracket);\n...     $second = substr($signal, $bracket, -1);\n...   }\n... \n...   var_dump($first, $second);\n... }\n=> null\n```\n\n\n\nWhen i type sig it tab-completes to signaltohierarchy, this seems odd because of:\n1. function name to lower case\n2. add extra space on the end\nthen when i press tab once more it just prints signaltohierarchy another time. So i end up with signaltohierarchy signaltohierarchy\nthis is weird too\n. ",
    "jrobeson": "i've definitely moved my vim folder! :) (possible via VIMINIT env var) I've also set my less history file and some others as per this spec:\nhttp://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html\nI'm definintely not asking you to implement that spec just for desktop linux users though. I just want to be able to match it as 90% of other other programs do.\nAlthough even git supports this spec out of the box. \n. many projects allow both permanently, like git itself. i personally always prefer the xdg styles because i don't like a cluttered home, but that isn't the case for everyone.\nI bet most people don't even know git supports it automatically.\nJust move ~/.gitconfig to ~/.config/git/config and it works\n. :)  I'll install it soon and check it out.\n. definitely not a problem on Fedora (and thus likely not to be a problem on RHEL/CentOS)\n. according to http://stackoverflow.com/questions/9538435/symfony2-with-php-5-4-built-in-server#9555588 you should be able to run it directly by passing the path to the router file. \nbash\ncd /path/to/symfony/web\nphp -S ../vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/config/router_dev.php\nif that doesn't work due to pathing issues, try copying the router_dev.php to /web\nI can't test it because my app fully requires SSL, so the php webserver is out.\n. ",
    "max-voloshin": "@bobthecow, good to know, thanks for reply!\n. Oh my bad.. I also have noticed failed tests on Travis :(\nMay you describe reasons for this behavior? Why return values should be not syntax highlighted? I really don't see advantages here..\n. @bobthecow , thanks for explanation!\n. @bobthecow, great! Thank to you too:)\n. ",
    "szepeviktor": "Thank you very much for pointing that out.\nbash\napt-get install php5-readline\n. Thank you!\n. PHP readline must be available on all platforms.\n. brew install php56 --with-readline\n*This is just an example, please add all extensions you need.\n. Thanks.. ",
    "ezmiller": "what about on a mac, where apt-get is not available?\n. @szepeviktor not sure how to interpret what you wrote: if it's not available in Brew, do you know where it would be available?\n\n. @szepeviktor thanks!\n. What can I run on  Mac, where apt-get isn't available. I looked for php5-readline in brew, but it's not there.\n. +1 I'd like a solution too, but I'm on Mac. \n. This isn't maybe a perfect solution, but it's working for me on os x:\nBash\nbrew update\nbrew install rlwrap\nrlwrap psysh\n. ",
    "pilif": "Sure. I didn't realize there was a develop branch. I'll also fix the use of [] for 5.3 compatibility. \n. closing this. I will reopen it against develop\n. ",
    "lolautruche": "Same result :-(\n. Actually you're right, I was confused by the local dependencies of ezsh...\nSo good to me :)\n. Awesome, thanks :). When do you plan it (just curious) ?\n. Alright, thanks for the awesome work!\n. Advantage of this kind of parameters is that you can add more without having to change the interface, so that can become very handy as you may be able to variate the presentation very easily.\nI'm not in favor of having an additional method for this, as it's just a (small) variation of the presentation, nothing more.\nAs for the $color parameter, it may be dead but it's still there :smile: . Once you want to remove it, you'll just have to refactor a bit, but that won't change anything to the code I wrote :wink: .\nOne more thing, I'm not really convinced by the fact of displaying protected AND private properties with only one option activation. It may be too verbose. In my case for ezsh, I basically only need protected properties for value objects. Private ones can add a lot of noise...\n. Do you want me to rebase my branch against feature/always-colorful (and reopen another PR)? \nFor ezsh, yes eZ Publish value objects do have interfaces. I was actually planning to implement dedicated presenters. \n. Just updated the PR. I did all you requested :smiley: .\n. Thanks for merging this PR! Can't wait for the release :-)\n. @bobthecow Many thanks for this hint :smiley: \n. Could have been, but this argument is passed by presentValue() anyway, so didn't sound to make it have a default value.\n. ",
    "yuvii": "But isn't >>> a bit too generic? (also, my first association with this is python)\n. Ok here's another one\n\nNow, admittedly, I'm a bad at picking colors. But it's pretty neat, right?\n. ",
    "branquito": "I solved that, the problem was open_basedir directive in php.ini. So now I can run psysh and enter the console. However small problem again with doc as for version 5.5.8 of php, I could not install proper pdo sqlite3 driver, but I can live without that. Serious problem though when I tried to debug using psysh putting \\Psy\\Shell::debug(get_defined_vars()); into my source code, I get Warning: mkdir(): Permission denied in phar:///home/username/psysh/src/Psy/Configuration.php on line 419?\n. I am running my app in browser, or should I run it in a console? How it will drop to psy shell?\n. It was set like this : open_basedir = /srv/http/:/home/:/tmp/:/usr/share/pear/:/usr/share/webapps/:/usr/local/bin/\n. But that was the time I had it installed via composer, I don't know if the problem would persist now, being installed via wget into my home dir. How should I resolve my second issue, the debugging one? ANy idea? :)\n. Ok that worked, but now, how and where to pass route to app, in browser I did from my public dir, /test/me.  I tried appending to localhost:8080 where the server is running, but no page there. Although I got into Psy Shell, and was able to see variables using ls --vars\nRegarding your last question, yes it was something like that.\n. Maybe my question was unclear, I don't know how to pass the url string. My app does some simple routing based on url, to decide which controller/method to use. How to pass that 'url' as php -S index.php/test/me doesn't work?\n. That's what I did in the first place, now it works, last time I tried it said route not found. Ok thanks for help. So I can not serve with apache like I normally do, but only with this embedded server? Because then I have to switch anytime I want to debug, or is that a must? ;) \n. Ok, thanks kindly for your help. ,-)\nOn Oct 1, 2014 6:39 PM, \"Justin Hileman\" notifications@github.com wrote:\n\nFor now, you need to run it from the CLI server. In the future there will\nbe more options, but they're a lot more complicated and haven't been\nimplemented yet :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/bobthecow/psysh/issues/99#issuecomment-57495994.\n. \n",
    "dequis": "Hey! I had the same segfault issue, debugged it a bit and submitted a bug report with patch here: https://bugs.php.net/bug.php?id=69054\nMore specifically, I got the following ErrorException from laravel:\n```\n$ php artisan tinker\nexception 'ErrorException' with message 'is_file(): open_basedir restriction in effect. File(/etc/xdg/psysh/config.php) is not within the allowed path(s): (/srv/http/:/home/:/tmp/:/usr/share/pear/)' in /home/dx/test/asd/sonar/laravel/vendor/psy/psysh/src/Psy/Configuration.php:132\nStack trace:\n0 [internal function]: Illuminate\\Foundation\\Bootstrap\\HandleExceptions->handleError(2, 'is_file(): open...', '/home/dx/test/a...', 132, Array)\n1 /home/dx/test/asd/sonar/laravel/vendor/psy/psysh/src/Psy/Configuration.php(132): is_file('/etc/xdg/psysh/...')\n2 /home/dx/test/asd/sonar/laravel/vendor/psy/psysh/src/Psy/Configuration.php(105): Psy\\Configuration->getConfigFile()\n3 /home/dx/test/asd/sonar/laravel/vendor/psy/psysh/src/Psy/Configuration.php(89): Psy\\Configuration->init()\n4 /home/dx/test/asd/sonar/laravel/vendor/psy/psysh/src/Psy/Shell.php(68): Psy\\Configuration->__construct()\n5 /home/dx/test/asd/sonar/laravel/vendor/laravel/framework/src/Illuminate/Foundation/Console/TinkerCommand.php(31): Psy\\Shell->__construct()\n6 [internal function]: Illuminate\\Foundation\\Console\\TinkerCommand->fire()\n7 /home/dx/test/asd/sonar/laravel/vendor/laravel/framework/src/Illuminate/Container/Container.php(523): call_user_func_array(Array, Array)\n8 /home/dx/test/asd/sonar/laravel/vendor/laravel/framework/src/Illuminate/Console/Command.php(115): Illuminate\\Container\\Container->call(Array)\n9 /home/dx/test/asd/sonar/laravel/vendor/symfony/console/Symfony/Component/Console/Command/Command.php(253): Illuminate\\Console\\Command->execute(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))\n10 /home/dx/test/asd/sonar/laravel/vendor/laravel/framework/src/Illuminate/Console/Command.php(101): Symfony\\Component\\Console\\Command\\Command->run(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))\n11 /home/dx/test/asd/sonar/laravel/vendor/symfony/console/Symfony/Component/Console/Application.php(874): Illuminate\\Console\\Command->run(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))\n12 /home/dx/test/asd/sonar/laravel/vendor/symfony/console/Symfony/Component/Console/Application.php(195): Symfony\\Component\\Console\\Application->doRunCommand(Object(Illuminate\\Foundation\\Console\\TinkerCommand), Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))\n13 /home/dx/test/asd/sonar/laravel/vendor/symfony/console/Symfony/Component/Console/Application.php(126): Symfony\\Component\\Console\\Application->doRun(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))\n14 /home/dx/test/asd/sonar/laravel/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php(91): Symfony\\Component\\Console\\Application->run(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))\n15 /home/dx/test/asd/sonar/laravel/artisan(36): Illuminate\\Foundation\\Console\\Kernel->handle(Object(Symfony\\Component\\Console\\Input\\ArgvInput), Object(Symfony\\Component\\Console\\Output\\ConsoleOutput))\n16 {main}\n```\nWhen I workarounded it by adding @ before is_file to ignore the errors, i got the segfault instead.\n. The segfault is really nasty so I think it's worth workarounding it. Parsing open_basedir isn't needed - that would only prevent the ErrorException, which i believe you can get the same effect by prepending @ to the is_file. You should probably check if open_basedir is defined when calling readline_read_history() to avoid the segfault\nAnd... after writing that I figured I could send those changes as a pull request, so here: https://github.com/bobthecow/psysh/pull/150\n. Bug fixed here https://github.com/php/php-src/commit/a620b7904023202b8b4a5d7792368bd752c432e9 (will be in the next point release)\n. ",
    "Tatsh": "GitHub releases would be fine to grab source files from, and compile with, but the issue there is dependencies. We do not have ebuilds yet for Symfony Console and other packages. We do not run composer during a build (or for any other languages, pip, gem, etc). We could make ebuilds, but that creates a compatibility mess to solve eventually.\nSo to me, like the PHPUnit ebuild, a phar file preferred. It would be cool if these were put together with the releases. On GitHub it's very easy to include a binary file with your release.\n. On Gentoo, we can get the tar.gz/zip from GitHub releases in our ebuilds. So this issue appears to be solved.\n. ",
    "sagikazarmark": "Turned ot I am not, but I installed it with the @stable version constrain.\nThe reason why the 0.1.2 version gets installed is that the latest version relies on a dev stable package(dnoegel/php-xdg-base-dir).\nMaybe a warning to allow dev stability packages would be appropriate.\n. No problem, finally sorted it out.\n. ",
    "JoakimLofgren": "@bobthecow  It seems to be tagged to 0.1 now?\nhttps://packagist.org/packages/dnoegel/php-xdg-base-dir\n. ",
    "jacobbednarz": "@CMCDragonkai in the meantime, you could try jacobbednarz/php-bench. That allows you to profile multiple functions or snippets against each other.\nWould also love to see this in a REPL though.\n. ",
    "tiagobrito": "I got it. Just type exit and it will continue the current execution\n. ",
    "matthieuprat": "Great, thanks!\n. ",
    "barryvdh": "@bobthecow You mean something like this? http://frankneff.ch/quality-assurance/2014/04/19/use-travis-build-matrix-to-test-against-multiple-symfony-versions/\n. Okay did not know that. That's useful, but not quite the same.\n. Yes but it doesn't give the current state and nested properties etc, right?\nThe dump method is just a different thing then the list command.\n. I think it's probably 2 things\n- The dump command uses the Presenters, so you can't use a Presenter to give a simplified version of an object and still dump all information.\n- Instead of using the default Object dumper, the VarDumper could be used for deeper/more robust information.\n. Well I'm okay with submitting a PR myself but would like some feedback first.\n. Okay maybe it's just me or the Laravel specific presenters, but for example, when I create a Laravel Model, the output from dump -a is the same as just returning the object.\nls -la does help, but doesn't nest. See the differences:\n```\n\n\n\n$user = new App\\User(['name' => 'Barry vd. Heuvel']);\n=>  {\n       name: \"Barry vd. Heuvel\"\n   }\ndump --all $user\n {\n    name: \"Barry vd. Heuvel\"\n}\ndump -a --depth 10 $user\n {\n    name: \"Barry vd. Heuvel\"\n}\ndump($user)\nApp\\User {#796\n  #table: \"users\"\n  #fillable: array:3 [\n    0 => \"name\"\n    1 => \"email\"\n    2 => \"password\"\n  ]\n  #hidden: array:2 [\n    0 => \"password\"\n    1 => \"remember_token\"\n  ]\n  #connection: null\n  #primaryKey: \"id\"\n  #perPage: 15\n  +incrementing: true\n  +timestamps: true\n  #attributes: array:1 [\n    \"name\" => \"Barry vd. Heuvel\"\n  ]\n  #original: []\n  #relations: []\n  #visible: []\n  #appends: []\n  #guarded: array:1 [\n    0 => \"*\"\n  ]\n  #dates: []\n  #casts: []\n  #touches: []\n  #observables: []\n  #with: []\n  #morphClass: null\n  +exists: false\n}\n=> null\nls -la $user\n\n\n\nClass Constants:\n  CREATED_AT   \"created_at\"\n  UPDATED_AT   \"updated_at\"\nClass Properties:\n  $appends           []\n  $attributes        Array(1)\n  $booted            Array(1)\n  $casts             []\n  $connection        null\n  $dates             []\n  $dispatcher        \n  $exists            false\n  $fillable          Array(3)\n  $globalScopes      []\n  $guarded           Array(1)\n  $hidden            Array(2)\n  $incrementing      true\n  $manyMethods       Array(3)\n  $morphClass        null\n  $mutatorCache      Array(1)\n  $observables       []\n  $original          []\n  $perPage           15\n  $primaryKey        \"id\"\n  $relations         []\n  $resolver          \n  $snakeAttributes   true\n  $table             \"users\"\n  $timestamps        true\n  $touches           []\n  $unguarded         false\n  $visible           []\n  $with              []\n```\nFor example, the hidden array isn't visible in the dump. I'm guessing that that would be expected with the dump --all option.\n. Okay I guess I was just confused by the terminology then, between var_dump($a), dump $a, ls -la $a and just $a.\nWill just use dump($a) when I need it then ;) Thanks anyways\n. I think it will still run all tests, but just reports the results faster.\n. ",
    "pschulz": "You made my day. \nAre the special / magic variables documented somewhere? If not, then it would be a perfect start for a Github Wiki page :-)\n| Variable | Description |\n| --- | --- |\n| $_ | Last result |\n| $_e | Last exception or error |\n| $psysh | The PsySH shell object reference |\n. Any place is better than not documented :-)\nhttp://psysh.org/#usage, README.md, Github Wiki - everything is okay.\nThe latter could be used for community contribution, couldn't it?\nBTW Thanks for this great tool, Justin.\n. I can confirm that as well. With 5.4 it works. The exception message also looks slightly different than in 5.3.\n```\nPatricks-MacBook-Pro:~ patrick$ /usr/bin/php psysh \nPsy Shell v0.2.1 (PHP 5.4.30 \u2014 cli) by Justin Hileman\n\n\n\nempty(null)\nPHP Parse error:  parse error, expecting `\":: (T_PAAMAYIM_NEKUDOTAYIM)\"' in /Users/patrick/.composer/vendor/psy/psysh/src/Psy/ExecutionLoop/Loop.php(67) : eval()'d code on line 1\nPHP Stack trace:\nPHP   1. {main}() /Users/patrick/.composer/vendor/psy/psysh/bin/psysh:0\nPHP   2. call_user_func() /Users/patrick/.composer/vendor/psy/psysh/bin/psysh:100\nPHP   3. {closure:/Users/patrick/.composer/vendor/psy/psysh/bin/psysh:40-100}() /Users/patrick/.composer/vendor/psy/psysh/bin/psysh:100\nPHP   4. Psy\\Shell->run() /Users/patrick/.composer/vendor/psy/psysh/bin/psysh:99\nPHP   5. Symfony\\Component\\Console\\Application->run() /Users/patrick/.composer/vendor/psy/psysh/src/Psy/Shell.php:215\nPHP   6. Psy\\Shell->doRun() /Users/patrick/.composer/vendor/symfony/console/Symfony/Component/Console/Application.php:124\nPHP   7. Psy\\ExecutionLoop\\Loop->run() /Users/patrick/.composer/vendor/psy/psysh/src/Psy/Shell.php:243\nPHP   8. Psy\\ExecutionLoop\\Loop::Psy\\ExecutionLoop{closure}() /Users/patrick/.composer/vendor/psy/psysh/src/Psy/ExecutionLoop/Loop.php:114\n=> false\nquit\nExit:  Goodbye.\nPatricks-MacBook-Pro:~ patrick$\n```\n. \"confirmed\" the fix.\n\n\n\nI agree, that's weird. What about all the other language constructs? \nBTW continue is a nice one, because it just throws the exception on 5.3, but in 5.4 it completely halts the PHP process.\n. Yes, this seems to be more exact.\n. I afraid you missed the cleanup commit of develop branch (remove the var_dump) as well as the tests.\n503cdb5, fc6fff4 and 8b6a236\n. Sorry, my fault.\n. ",
    "prisis": "ops...\n. ",
    "blainesch": "Thanks!\n. @bobthecow I started working on this and ran into a few ways of doing it. I sent you an email, maybe you could point me the right direction on how you would like to see it going? I could paste it in here if that makes it easier.\n. What about an input_server on one port, and output_server on another port. The client would connect to both of them based on the configuration. That way we keep the same abstraction we have now, but we'd have to maintain two connections. Thoughts?\n. Any update on this?\n. @Markcial, maybe we should start by getting in the abstraction layer that just works for the current implementation so this isn't such a large project? You probably already have this done, so maybe just tear the rest out for now? Or maybe there's another way to break up this work?\nIt seems like there is a LOT of interest, so making this a more iterative approach is probably the best option.\n. It's a very simple function that returns a string... besides an integration test which none appear to currently exist, I can't think of a way to test this.\n. Updated. I had to run composer dumpautoload to get it to autoload the helper file.\n. Updated. Right, it's not to optimize it. Composer caches what files it autoloads in ./vendor/composer/autoload_files.php and this needed to be updated via composer dumpautoload.\n. Updated.\n. :see_no_evil: just don't look!\n. \n. Updated so this works with #122\n. \nUpdated [:\n. I can't update the delimiter without making a pr to the color repo.\nhttps://github.com/JakubOnderka/PHP-Console-Highlighter/blob/master/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php#L259\n. I added the dependencies to Compiler.php and removed the hardcoded index on the backtrace.\n. Good catch, I pushed the update.\n. When is the next release planned? I'd love to wrap up the remote stuff before then, but I might not have enough time.\n. Getting the latest changes, vs locking the version down, an be good or bad depending on other constraints. I'd be alright with changing it, especially considering the lock file isn't committed.\n. What standard does the project try and aim for? psr2?\n. Updated... a few times... darn you hhvm!\n. Fixes #124 \n. @bobthecow I agree, it does look nicer. Want to add a phpcs xml file to the repo that says we want all the psr2 things except that one?\n. Updated, all systems are go.\n\n. Updated.\n. What does the cs fixer do exactly? If it fixes them during travis, does it then commit it? Or just fail it?\n. Yup, got it.\n. Is the correct output to find where they created the psych connection in the bin file (bin/psysh:63)? Or to tell them they are in the matrix?\n. What's the use case where this doesn't work? It appears to just be using different syntax preferences..\n. @bobthecow extract vs list. I don't see one not working and the other working... it's just a different approach?\n. Because array's guarantee order:\nlist($a, $b) = array_values(array('file' => 'foo', 'line' => 10));\n. My preference, unless it's actually broken, is to leave it alone.\n. @bobthecow I guess I just don't see the problem with extract?\n. In code using the eval method: eval(\\Psy\\sh())\n. Didn't realize that was an option :+1:\nHow much does it actually save though? PHP doesn't copy until you attempt to edit them, do you have any benchmarks?\n. On second though, I might be wrong. I'm assuming it does a \"copy on edit\" but it probably contains a copy of a non-changed item. For instance, passing a complex object into a method is probably preserved in every state so you can debug it better, thus a copy of each item is potentially generated.\n. um. Will investigate.\n. @GrahamCampbell I just made it consistent with this.\n. I know. We should make a cool repl debugger to make it less weird and help us out.\n. ",
    "jakefolio": "Any progress on this? Is there a branch or fork where it's being worked on @Markcial?\n. ",
    "mikedfunk": "+1\n. ",
    "castarco": "@Markcial meanwhile, there is a PHP \"kernel\" for Jupyter. It's far from perfect, but it's based on PsySH and takes advantage of the Jupyter Notebook frontend, Nteract and other frontends... :\n\nhttps://github.com/Litipk/Jupyter-PHP. Hello, what's the current state of this feature? ^^U\n. As far as I can see, the code looks nice (I don't know how PsySH works internally).\nI think it needs adding specific tests, since this is a relatively complex feature, and I couldn't find new tests in the PR.\n\nI understand the commands purpose, but if I obtain more info about where will be created the sandbox directories I can try to add those tests.\nI'm very interested in this feature because if it's combined with #121 , then it's possible to obtain something similar to the iPython Notebook , but with PHP (and probably more modular and flexible, but with less features).\n. @Taluu I was working on this problem on a related project ( https://github.com/Litipk/Jupyter-PHP ) , I didn't push my code to the remote repository because it was completely experimental (and because my laptop was stolen with a ton of work :cry: ), but I can tell that I experimented two major problems:\n\nComposer is not modular at all, it's very difficult to use its code (in a clean way) for non-CLI\n      applications. It seems that they love super-tight coupling :hankey: . I did it, but I'm not proud of the results...\nThe auto-generated class used from Composer to handler the autoloading process works as a\n      damn singleton, and this makes reusing Composer's autoloading code something in between\n      of impossible and useless.\n\nI know that the context should be provided before, but I'll provide the context now: I was interested on dealing with composer dependencies through Jupyter-PHP commands to make easier creating super-portable PHP \"notebooks\" (we have a single file per notebook, so we need alternative ways to declare dependencies).. Hi, what's the state of this PR? I think that reading the complete thread is not enough to completely understand the current situation.\nI'm interested on this feature since I'm maintaining the PHP kernel for Jupyter and packages isolation is very interesting for this usage case.\nBest regards.. If this branch is dead... maybe it should be removed.. I'm not sure what's convenient. Redefining two times the same class in the same command is clearly wrong and the intuition says me that the user should be protected from doing it. But, your comment has made me think and I've done an experiment:\n\nPsySH doesn't let me to redefine the class, even if I'm in an interactive session which exists mainly for experimentation (the code that I write to the console isn't for production environments).\nI don't know which are the associated problems of letting the users to redefine classes in interactive sessions, I'm sure there are a lot of problems, but I think it's worth to capture in a public text why it's preferable one option over another option.\n. @bobthecow done. The diff is the same, but some commits have been automatically added to this PR .. @bobthecow I think that removing PHP 5.3 support is not only for the sake of doing it. There are multiple and serious reasons for doing it.\nPHP 5.3 support ended more than 3 years ago (including security fixes), almost every important project that depends on PsySH has bumped its minimum requirements.\nI think that the same reasoning applies to PHP 5.4 & 5.5, but I prefer to be conservative on this regard, and this is the reason why I only removed PHP 5.3 support in this PR.. Ok, in a few minutes this PR will be retargeted to the 0.9 branch.. Done.. @bobthecow go ahead, I'll adapt the code :+1: . done. done. Done. I don't understand the question.. ",
    "keradus": "I can't see any slowdown on Travis while using cache.\nBut hey! Let us keep .dist with default cache for users, and allow to disable it by command line for Travis run !\n. @bobthecow I strongly suggest you to not rely on 2.0-dev version yet.\nIt brings you no new functionallity and it will brings few BC breaks. No need to follow each one of them and changing the way of your projects are using PHP CS Fixer if 2.0-dev brings you no new feature.\nJust wait for stable one.\n. There are no new fixers in 2.0-dev version.\nYou can watch 2.0 progress here: https://github.com/FriendsOfPHP/PHP-CS-Fixer/milestones/v2.0\nNew features, if possible, are merged into 1.x line. BC breaking changes goes into 2.x\n. PHP CS Fixer (so style ci which relies on it) could fix it automatically indeed, yet for some reason those two were not applied to repo.. still, PSR2 violation, what's more, no harm adding it, and it looks better with it as well.. else after return/break/continue/throw is always sad.. yes. yet, i didn't enabled the rule or apply it globally, this was the line where space was simply missing, and you are talking about cases where there were multiple spaces for aligning purposes. ",
    "Anahkiasen": "\nI assume you meant 0.3, not 3.0. :)\n\nOops my bad, typo, updated :)\n. ",
    "damiankloip": "@bobthecow what do we need to do to get this done? This is a very handy feature!\n. Thanks, closing in favour of https://github.com/bobthecow/psysh/pull/266\n. Thanks, closing in favour of https://github.com/bobthecow/psysh/pull/265\n. Sorry, forgot to merge develop from upstream. This was rebase against develop already.\n. @bobthecow Youch! Fair point. Any ideas about the best way to not bail out at the first sniff of exit? :)\n. I did try something on leaveNode() but this seems to get out of hand fast..\nphp\nreturn new Node\\Stmt\\Throw_(new Node\\Expr\\New_(new Node\\Name('Psy\\Exception\\BreakException'), [new Node\\Arg(new Node\\Scalar\\String_('Goodbye.'))]));\nSo doesn't seem like a good way forward maybe.. Maybe this is a fools errand, in general :)\n. Sure, that makes it read better. I am wondering if this method will always work? Let me update the PR anyway.\n. @bobthecow pushed that change. I don't know the PhpParser too well, that code gives output like this:\nreturn throw new Psy\\Exception\\BreakException('Goodbye.');;\nAh, so a call to 'exit;' once evaled is 'return die;', that explains the above I guess.\n. @bobthecow Yeah, seems the ImplicitReturnPass was an issue. Seems to work much better now. Please give it a try.\n. Just updated the tests for the change to using leaveNode too.\n. Awesome, thanks both.\n. Don't worry, rebasing onto develop now, we should be getting rid of those pesky merge commits any second.. @Taluu I can just use git rebase --onto develop master and be done with it. Interactive rebase I'd have to do more work for sure.. Sounds great. Thanks @bobthecow . If it helps, I do something which I think should help you out for my drush (Drupal) setup - creating aliases for each entity/model:\n```php\nforeach ($em->getDefinitions() as $entity_type) {\n  $class = $entity_type->getClass();\n  class_alias($class, (new \\ReflectionClass($class))->getShortName());\n}\n```\nThat gets the class name only from the namespace, but simplified, if you just wanted to create aliases you can just do:\nphp\nclass_alias($class, $alias);\n// I.e.\nclass_alias(User::class, 'User'); // Or something.\n.. and include that file in your psysh config file (~/.config/psysh/config.php):\nphp\n$config['defaultIncludes'][] = 'path/to/your/include';\nMore info at http://psysh.org/#configure . See the defaultIncludes documentation there.. Sure, np\n. Thought it makes sense to also add a new item to the data provider to check that no implicit return is added now.\n. Yeah, plus in the regular Loop class it catches Error too already. @bobthecow Do you want me to change it to Throwable?. No, I mean this ForkingLoop hunk :). ",
    "Taluu": "How about autoload then ? Or even composer (let's be crazy :D), as its name should imply the \"go on the internet, download the package, include it in the current session\"...\n. Or even use Symfony's process component. :D\n. Refreshing a bit this issue, how about using https://github.com/sensiolabs/melody as an inspiration (not a direct dependency; we could even use that if it's installed) ?. On the CLI, yes, through a -d argument\n. Then maybe we should discard composer's cli, and require it directly in the json file ? And then be able to use directly composer from its source ?\n. OK now I get why the input is kinda reparsed... Too bad :(\n. @bobthecow yes, that's also what I thought\n. I think this is really a wrong argument against the process. Specially if you base yourself on the number of code lines, specially as the process component does all the needed abstraction on linux, mac, windows or whatever (it is tested against those environment, etc, etc)\nBTW, the \"1400 lines with the comments\", you also take into account the lines which are not used (such as the PhpProcess, the ProcessBuilder, ...). All in all, with the comments and if you use the thing (because you won't load it until necessary), it is only a matter of 1000 lines (with comments) tops.\nI really think this is a bullshit argument, which is clearly a NIH syndrome. And also because this feature will need some maintainance... Good luck with that.\nI'm still gonna use the feature if it is released (I suggested it after all), but meh, you now know my point of view.\n. Just to run the composer install, which is I think the whole concept behind that feature....\n. Fair enough, just saw where and why the Proc_open is called. But I still think the LOC argument is not the right one. And that the NIH syndrome should be avoided, even if it's for something minor such as the composer installation\n. Let me then answer on some points. :)\n\nLines of code is not the only reason for using (or not using) a package. It's just one data point in weighing whether to add another dependency. But they are indicative of the relative complexity and feature set of this package. Since those 1500 lines of code are replacing approximately 5 lines of code that we write ourselves, it seems prudent to actually consider them rather than just blindly tacking on another dependency.\nDependencies themselves aren't bad, per se. But they definitely aren't without cost, either. Every dependency we add, and every version constraint we require, excludes some number of potential users. Because in real life, not every project keeps up with the latest releases of all their dependencies. In the interest of not adding to the inevitable dependency hell, I prefer to weigh each one on its merits before deciding to accept its cost.\n\nFair enough, I'm not really developping anything on PHARs (...just using them), so you may have a point here. As I already said earlier, I saw that the proc_open is not used on a critical path for this feature, so \"meh, fine\".\n\nAdditionally, each dependency adds some amount of work for the maintainers of this package. SemVer helps mitigate this cost, but Symfony doesn't actually follow SemVer. So every release of every Symfony component adds the potential for BC breaks and a drain on the contributors of this library and all projects that depend on it.\nNote that this isn't theoretical. It's actually a problem, and actually happens in real life. See the Table(Helper) BC break we had to work around in the latest release.\n\nIt does actually follow semver, since the 2.3. The tablehelper you're quoting, for example, is only deprecated till the 3.0... they removed the deprecation notice because it was bothering everybody else, which is understandable. But on a general point of view, yes, it is also understandable to be careful against library that does not follow exactly the semver standard. :)\n\nYou're still gonna use the feature, even though it might be implemented in a way that you disagree with, despite the fact that those implementation details are just that, implementation details, and you won't even be able to tell the difference between the two when using the product? Despite the fact that the project was given to you for free, and then you asked for another feature and someone else took their own time to write it and give that to you for free as well? How gracious of you.\n\nActually, even though it is not implemented in a way I do agree with, I still think the project worthwhile to be used, and I'm even thankful (truly !) that there is something that can ease my development workflow. \nIt was just that I had the impression that the LOC argument was the only thing taken into account (and not all the dependency stuff, which means at each release you must indeed be careful, yadi yadi yada), which is AFAIC not enough for me something to agree with. But, with the other arguments you just enounced right there, I am really fine with those.\nBTW, I wasn't talking about this feature en particular (I wanted to do it myself to contribute but meh, @Markcial was faster :D), but I was really just suprised on the sole argument before the whole speech.\nIf I offended you (or @Markcial), then I'm really sorry, and again, thanks for the work you invested in this application. :)\n. Once again, if I seemed rash, I'm sorry, as this was far from my intentions (I do have to fix that).\nBut then again, maybe thinking of a solution to be able to register plugins would be great, so that anybody could actually register its own command (or whatever) with its own dependencies would be great... Should I open a ticket ? Or I could have missed something in Psysh which already allows that...\n. done : #166\n. Yep, but with a Plugin, you may also register not only commands, and I think that this is baseline for such a system. Anyhow, it seems @bobthecow that is interested in such a discussion, as it seems he already tried to approach such a system, without being satisfied.\nJust creating the issue so that we can brainstorm on that matter.  ;)\nIt is already great though that we can register commands... Maybe push the config thing but for plugins ? So that they may live as full fledged plugins.\n. I don't know if registering a plugin through the app (via a plugin command) wouldn't be too late, as the app is already launched. I was also thinking of an interface to implement, and then somewhere (such as the config file ?) register the plugin.\nwhen the app is launched, it then checks all the plugin to instanciate, and registers all the stuff that goes along with it (such as commands, printers, presenters, ....)\n. This seems to be what I first thought about using something similar to Twig then (it registers an extension, which basically registers all its dependencies on the go). So I'm all +1 for that, even though I didn't go deeper with the things you're suggesting with the autoload.files, but it would be awesome.\nEven if I think that also having a classic way to register an extension (such as a basic \"plugins\" key in the config file if it is a global installation, with a basic new Psy\\MyPlugin array element) would also be awesome... But just for the global installation though ?\n. I'm not a huge fan of the static things, but on an object point of view and also a pratical point of view, it seems to be the right thing to do.\nWhat was bothering me with the autoload-files way, was that you need to use your composer.json for that. But if the files are loaded after the classes declarations are loaded (and thus, PsySh is accessible) then this seems a good solution (I've never used this mechanism, shame on me)\n\nBut I think I got messed up with composer, as I thought is was too coupled with the project where it doesn't. My bad !\n. > \u2026 but realistically, approximately zero of our users will do that\nDon't worry, neither will I. :D\nMaybe do something with a composer script, to automatically register an extension ? Even though it is kinda the same thing when requiring a plugin / symfony bundle actually (you need to register it yourself in your app / whatever)... I don't think this should be the main concern (maybe over another iteration ?)\n. Yup, but then you must have a register.php file with the plugin, and you must think of adding it in your autoload-files (or script, or whatever)\n. Oooh, I didn't see it like that. It makes senses\n. Meh, as long as it is documented, it should be fine ! :D\n. doctrine-plugin if I had to pick one, as the psy is already kind of indicative that this is related psysh (you don't see too often symfony/symfony-oauth-bundle or package/symfony/symfony-oauth-bundle for example).\nThe next step would be to have a \"core extension\", so that Psysh is really minimal when shipped ? :)\n. Yup you're right, but my point was that for example the hwioauthbundle (curse that thing), it is hwi/oauth-bundle, no hwi/sf2-oauth-bundle... there aren't any standards on that, so I guess the developper should use what he feels like. I'd me more inclined to have a psysh to be honest, as plugin is too generic. Unless you may fine a cool name that easily identifies a plugin (such as bundle for synfony2, gem for rubies, ...) :D\n. Still taking Twig as an example, it registers all the core matters in a Core extension, but it is there for the basic installation (on the phar, it should be there, but not on the other ways to install it, such as by composer) ?\nOr register them in a Core extension that is registered within the core, removable if the user doesn't have any uses for it (should add a way to remove a plugin btw ?)\n. I'm probably too engaged towards a REPL Framework, but what you're saying makes sense... I'm still convinced that some things that are currently shipped with Psysh should be put into an extension (such as the presenters you listed, ...). I wouldn't be able to say which exactly, but still, it would need some thinking. \nMaybe in another iteration though, this is already a feature big enough to develop ;)\n. If I can help for anything, don't mind to ask :)\n. It also works in php -r (had this problem too a short while ago).\nBut I'm not sure this isn't a problem with PHP-Parser rather than psysh\n. I'd say 10 years. :trollface: \nMore seriously, maybe it is not the plumbing role to do that, but, by doing that, it motivates the \"plumbing\" to be upgraded. Look at what did Sf 2 and Zf 2 did, by supporting only phjp 5.3 while it was not even released... Now everybody is using php 5.3. Because it required the plumbing to be upgraded.\n. I ranted about the php version, but I agree that guzzle isn't really necessary, a simple fgc is more than enough\n. interactive rebase o/\n(imo you should drop the dev / master duality branches, and use only the master for dev, especially as you already have the release/x branches...). yup, just removing the commits, and that's pretty much it. But we digress, and --onto is also a good solution ;}. How about going to PHP7 ? PHP 5.4 is dead too (and PHP 5.5 too). And according to the composer stats, more than 50% are using at least PHP 7.0 (Reminder : This is s a dev tool, so even the composer stats may not be really on par).\n\nI'm planning on dropping PHP 5.3 support with the 0.9 release, but haven't wanted to make a backwards compatibility break just for the sake of this, so I haven't yet :)\n\nDrop PHP5 while you're at it.... You're debugging on live prod ? Logging in CLI on prod ? That sounds like some really horrible ideas...\n5.4 has been given the death flag for something like 2 years, and php 5.5 for something like a year. At least consider making this 5.6...\nAnyway, as it's 0.9, BC Breaks are tolerated (that's the whole point of semantic versioning). And those who don't use the required php version, they can stick to 0.8 (composer's solver is smart, you know). If a cool new feature got your interest, you can either upgrade your env or backport it (but then the support doesn't fall to this package maintainers).... You shouldn't event consider the older versions IMO. If the guy doesn't want to upgrade, too bad for him. If he wants the new features, he should upgrade. And that's especially true for 0.x versions.. And why readd it, as it was completely discontinued ? https://symfony.com/roadmap?version=2.3#checker\nSeriously, update if you can. I know it's just \"ehhh just a requirement\", but then it is forgotten. But I already triggered the (probably sterile...) debate, so won't look at that any more (look at supported versions I mean. not psysh :P).... Didn't even mention 2.4, 2.5 and 2.6 because 2.3 was a lts that was finished a year ago. Yes, it is indeed a library to not push people to upgrade. But it's not a library's job either to support unmaintained libraries.. How about using the real regex, [a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]* ?\n. why don't you use Symfony's Process component instead ?\n. Why splitting the input manually, when you could just iterate over the args ? You could even have only a args argument rather than bothering with a command-name argument...\n. same thing here, why do you bother to parse the input when it should already been parsed by the Application ?\n. https://github.com/symfony/Process :)\nwith this, you do not have to bother anymore with the proc_open functions, unix, windows, etc\n. With only a args (mandatory) array parameter, couldn't you rebuild the input, and then pass it to the process ?\n. Nope, this is a valid name...\n\nVariable names follow the same rules as other labels in PHP. A valid variable name starts with a letter or underscore, followed by any number of letters, numbers, or underscores. As a regular expression, it would be expressed thus: '[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*'\n\nI'm refering to the text before the note\n. and a constant is not always caps (it is a standard, yes, but still, define('foo', 'bar'); foo; is valid)\n. Well, the spec also says so : https://github.com/php/php-langspec/blob/master/spec/09-lexical-structure.md#names\n\nNames\nSyntax\n```\n variable-name::\n   $   name\nname::\n   name-nondigit\n   name   name-nondigit\n   name   digit\nname-nondigit::\n    nondigit\n    one of the characters U+007f\u2013U+00ff\nnondigit:: one of\n   _\n   a   b   c   d   e   f   g   h   i   j   k   l   m\n   n   o   p   q   r   s   t   u   v   w   x   y   z\n   A   B   C   D   E   F   G   H   I   J   K   L   M\n   N   O   P   Q   R   S   T   U   V   W   X   Y   Z\n```\ndigit is defined in \u00a7\u00a7\n. I'm not sure that this is really relevant, I think it should be an abstract\n. I'm not quite sure that this class should be static (Or otherwise it should be called something else, such as PluginRegistry ?) ; thus, we would need to pass the Manager instance to the register method of the Plugin\n. you forgot some things here. You're overwrting the $configuration with the last plugin found in the $plugins array, and overwriting the parameter $configuration, so it is not correct anymore with the 2nd+ plugin...\n. only the register function should be static imho, as it initializes the plugin\n. all the getX methods should be protected imho, and this getConfig should be the only one accessible with the getName\n. With the method you used, it is accessible though... it should also check that the plugin is not already registered\n. oh, them I don't think it should merge anything, it should just return the brute configuration rather than try to merge it with something else\n\nEven though it is really subjective, I think it could be confusing (at least I was confused :x)\n. Almost none but still, for a registry (such as the Manager) it could be good to ensure that a plugin is registered only once. Never tried to register a same command more than once, but wouldn't it cause problems ?\n. as an object point of view I guess (I still have Twig's extensions system in mind, which allows from an object pov to instantiate an extension)\n. Seems fair, even though (still on a (quite) subjective object pov) I don't know if there is really any interest for the thing that registers the plugin to have any access to other methods\n. Yes, but it is a value-objet, not just a class :D\n. Then @Markcial's register method in the AbstractPlugin is wrong. Why instanciate the plugin when all it should do is just a  __CLASS__ instead ?\n(Still subjective, but I really don't like static if I can help otherwise :D)\n. I was refering to only register the class name, not make an instance of it : Manager::register(__CLASS__, static::getName())\n. Mmh nay it is wrong, as __CLASS__ is not statictly bound, it will return \"AbstractPlugin\" here. So it should use get_called_class() instead : Manager::register(get_called_class(), static::getName())\n. I've been thinking about this method, and I do agree that having \"2\" entry point (one through a getConfiguration and one through the getters) is two much. More over, this method is doing a merge to \"chain\" the methods, and I don't think that this should be the scope of this method. it should just return a plain array if it is left as-is\n. so basically, :+1: @bobthecow \n. yes that's what I was referring to, let the plugin manager call by itself the getters\n. But php 5.5 is almost dead and won't receive any updates really soon. \"Forcing\" an update to at ;east 5.6 (the ones stuck at < 5.6 can still use previous versions, that's all) is IMO the best factor to motivate upgrades...\nOtherwise, let'sjust support 5.2 as there are still 10% usage :trollface: \n. my point is still valid : following and supporting * stable * versions of php is what will help deprecated / unmaintained versions to stay what they should be, dead.\nAs you are following semver (and even without that actually, as in the semver, it doesn't say you should bump major versions on dependency upgrades...), if someone wants to have a psysh that supports an old version of php, they should just use a previous version that supports it. Then it's up to you to keep or not a support (if it was up to me, well... there should not be any, except one or two previous versions at most)\nEspecially as psysh is a dev tool. But once again, it's only my opinion, I'll still be using psysh, even though I may not agree with some points, as it is still awesome :}\n. p.s : these stats are meaningless IMO, as the percentages of versions usage on websites is not quite the same as the percentage of usage of php versions and psysh usage.... especially as A LOT of providers are NOT upgrading and letting sites rot on old php versions.\n. Here goes...\n- PHP 5.5 is now officially dead for some weeks... php 5.3 is not receiving support for something like 5 (!!) years.\n- Still the ramblings about the fact that's it up to lib developper to upgrade and thus promote new versions. Why bother when everything works nicely with the same setup ?\n- no need to do itsy beetsy things to go around deprecated or now inexistant limitations of older versions.\n- Once again, psysh is a dev tool... nowadays, you really have to be fucked up for not having at least 5.5 in your local machine.\n- Awesome features in recent versions, such as traits, optimizations (see above), generators, awesome autoloading in composer since 5.6, constant resolved at execution, ... and so on\nSorry for the langage on some points (especially before the last one, in which i don't want to be offensive (Well okay maybe a little :D )), but there you go. :}\n. instead you should catch Throwable $e. ",
    "hackel": "Maybe it's only for fatal errors?  Try entering a::b:\n``` console\nPsy Shell v0.3.3 (PHP 5.6.3-1+deb.sury.org~trusty+1 \u2014 cli) by Justin Hileman\n\n\n\n;\n=> false\na::b\nPHP Fatal error:  Class 'a' not found in /vendor/psy/psysh/src/Psy/ExecutionLoop/Loop.php(67) : eval()'d code on line 1\nPHP Stack trace:\nPHP   1. {main}() /vendor/psy/psysh/bin/psysh:0\nPHP   2. call_user_func:{/vendor/psy/psysh/bin/psysh:100}() /vendor/psy/psysh/bin/psysh:100\nPHP   3. {closure:/vendor/psy/psysh/bin/psysh:40-100}() /vendor/psy/psysh/bin/psysh:100\nPHP   4. Psy\\Shell->run() /vendor/psy/psysh/bin/psysh:99\nPHP   5. Symfony\\Component\\Console\\Application->run() /vendor/psy/psysh/src/Psy/Shell.php:233\nPHP   6. Psy\\Shell->doRun() /vendor/symfony/console/Symfony/Component/Console/Application.php:126\nPHP   7. Psy\\ExecutionLoop\\ForkingLoop->run() /vendor/psy/psysh/src/Psy/Shell.php:261\nPHP   8. Psy\\ExecutionLoop\\Loop->run() /vendor/psy/psysh/src/Psy/ExecutionLoop/ForkingLoop.php:79\nPHP   9. Psy\\ExecutionLoop\\Loop::Psy\\ExecutionLoop{closure}() /vendor/psy/psysh/src/Psy/ExecutionLoop/Loop.php:113\nPHP  10. eval() /vendor/psy/psysh/src/Psy/ExecutionLoop/Loop.php:67\n\n\n\nFatal error: Class 'a' not found in /vendor/psy/psysh/src/Psy/ExecutionLoop/Loop.php(67) : eval()'d code on line 1\nCall Stack:\n    0.0005     240464   1. {main}() /vendor/psy/psysh/bin/psysh:0\n    0.0901    1409296   2. call_user_func:{/vendor/psy/psysh/bin/psysh:100}() /vendor/psy/psysh/bin/psysh:100\n    0.0901    1409624   3. {closure:/vendor/psy/psysh/bin/psysh:40-100}() /vendor/psy/psysh/bin/psysh:100\n    0.3699    6192432   4. Psy\\Shell->run() /vendor/psy/psysh/bin/psysh:99\n    0.4077    6488728   5. Symfony\\Component\\Console\\Application->run() /vendor/psy/psysh/src/Psy/Shell.php:233\n    0.4078    6490888   6. Psy\\Shell->doRun() /vendor/symfony/console/Symfony/Component/Console/Application.php:126\n    0.4089    6493392   7. Psy\\ExecutionLoop\\ForkingLoop->run() /vendor/psy/psysh/src/Psy/Shell.php:261\n    0.4098    6494072   8. Psy\\ExecutionLoop\\Loop->run() /vendor/psy/psysh/src/Psy/ExecutionLoop/ForkingLoop.php:79\n    0.4103    6511648   9. Psy\\ExecutionLoop\\Loop::Psy\\ExecutionLoop{closure}() /vendor/psy/psysh/src/Psy/ExecutionLoop/Loop.php:113\n   13.4608    6713792  10. eval('return a::b;') /vendor/psy/psysh/src/Psy/ExecutionLoop/Loop.php:67\n\n\n\nhistory --tail 2\n187: ;\n188: history --tail 2\n```\n. Brilliant, you're the man!  Working well in 0.3.5.\n. Found another one.  I guess this should have been pretty obvious considering the previous example!  Thanks again for your work on this, it's a great tool.\n\n\n\n``` console\nPsy Shell v0.4.1 (PHP 5.6.6-1+deb.sury.org~utopic+1 \u2014 cli) by Justin Hileman\n\n\n\n;\n=> false\na::b();\nPHP Fatal error:  Class 'a' not found in /home/hackel/dev/arcstone/quirks/vendor/psy/psysh/src/Psy/ExecutionLoop/Loop.php(76) : eval()'d code on line 1\nPHP Stack trace:\nPHP   1. {main}() /home/hackel/dev/arcstone/quirks/vendor/psy/psysh/bin/psysh:0\nPHP   2. call_user_func:{/home/hackel/dev/arcstone/quirks/vendor/psy/psysh/bin/psysh:123}() /home/hackel/dev/arcstone/quirks/vendor/psy/psysh/bin/psysh:123\nPHP   3. {closure:/home/hackel/dev/arcstone/quirks/vendor/psy/psysh/bin/psysh:53-123}() /home/hackel/dev/arcstone/quirks/vendor/psy/psysh/bin/psysh:123\nPHP   4. Psy\\Shell->run() /home/hackel/dev/arcstone/quirks/vendor/psy/psysh/bin/psysh:113\nPHP   5. Symfony\\Component\\Console\\Application->run() /home/hackel/dev/arcstone/quirks/vendor/psy/psysh/src/Psy/Shell.php:282\nPHP   6. Psy\\Shell->doRun() /home/hackel/dev/arcstone/quirks/vendor/symfony/console/Symfony/Component/Console/Application.php:126\nPHP   7. Psy\\ExecutionLoop\\ForkingLoop->run() /home/hackel/dev/arcstone/quirks/vendor/psy/psysh/src/Psy/Shell.php:313\nPHP   8. Psy\\ExecutionLoop\\Loop->run() /home/hackel/dev/arcstone/quirks/vendor/psy/psysh/src/Psy/ExecutionLoop/ForkingLoop.php:79\nPHP   9. Psy\\ExecutionLoop{closure}() /home/hackel/dev/arcstone/quirks/vendor/psy/psysh/src/Psy/ExecutionLoop/Loop.php:128\nPHP  10. eval() /home/hackel/dev/arcstone/quirks/vendor/psy/psysh/src/Psy/ExecutionLoop/Loop.php:76\nhistory --tail 2\n255: ;\n256: history --tail 2\n```\n. \n\n\n",
    "tkn98": "Good to know this works on your platform. I also suspected this might be a platform issue.\nYour nose is good, too. php -a has the exact same problems.\nPerhaps this is a wrong compiled binary library on Ubuntu's PHP package?\nThis puzzle piece pops to mind: Makefile bash autocompletion issue with PHP generated targets - It's php cli related on ubuntu.\n. ```\n\n\n\nreadline_info();\n=> [\n       \"line_buffer\"               => \"readline_info();\\n\",\n       \"point\"                     => 0,\n       \"end\"                       => 0,\n       \"library_version\"           => \"EditLine wrapper\",\n       \"readline_name\"             => \"\",\n       \"attempted_completion_over\" => 0\n   ]\n```\n. as far as I learned libedit has been written for BSD systems and has problems with linux architecture. One example for such kind of problems is libedit: patch to fix unexpected behavior on Linux (Jan 2011).\n\n\n\nOne suggestion is to re-compile PHP w/o --with-libedit.\n. Yes, I replaced the --width-libedit=... with --with-readline. Gilles provided some guideline just libreadline-dev was missing for me. However tests didn't ran through so it stopped again with error. This might take some time until I will successfully manage to create that package.\n. Well, it's not that I would personally farvor that, however, this is a corporate desktop an I'm bound to the policy so I need to stick with kubuntu on this one. In any case it was my first PHP binary packaging from sources on that system so it's not that astonishing it didn't went flawlessly through taken I'm really new to this.\n. @Markcial: Thanks for sharing, that looks related indeed.\n. @bobthecow: Disabling readline in ~/.config/psysh/config.php\n\n'useReadline' => false,\n\nmake it work with UTF-8 characters both for typing as well as for pasting.\n. @bobthecow: Yes, that php-readline is compile with libedit. That's why I thought it might be easier to recompile just that module but just with the readline C lib.\n. @jrobeson: Do you know which readline library is used on Fedora for php5-readline (or php)? And on Fedora Remi does the packages, they normally just work top-notch and are up-to-the-date.\nI dunno why I can't manage to find a solution on my office box here, I'm a bit disappointed I have to admit. Tried once to recompile the php-5 readline module but tests didn't went through two times and it was all over my head.\n. Most likely CentOS 6.6 doesn't have libedit fixed as well.\n. @ikari7789: thanks for sharing. Apart from some typos in that sequence I could also recompile on my Ubuntu system however I'm such a noob with this as it does not work (tm). It's perhaps just either not working (/usr/lib has new files and/or I need to reload something but prevent a reboot as I think this should not be necessary. In any case, thanks so far for the configure lines.\n. @ikari7789: So one library can only loaded once on a running system then I guess. The system here is under configuration management as well, so this shouldn't be an issue. Also it's a developer box. But thanks for the reminder :) I'll try a reboot and see if the system still comes up.\n. @bobthecow  I just tested rlwrap with php -a on that system. It does not make any difference regarding character encoding. So no, this didn't help, but thanks for the tip, I was not aware of rlwrap yet! :+1: \n. ",
    "ikari7789": "I'm having the same problem on CentOS 6.6 in a VM. Any Japanese that I type is just gobbled up by the system and sent into the netherworld. Disabling readline does fix it, but makes it a real crapshoot to use. I'm also using Remi's PHP5.6 packages. readline is included as a part of the php-cli package in CentOS. If you look at the php.spec that they use to create the RPM, it seems they build it with libedit instead of readline due to licensing reasons, but I don't see why there can't be a way to enable readline support later on. Japanese input works fine for our custom compiled PHP (which we use for our production servers) which uses --with-readline.\n. Fixed it by hackishly installing the latest version on top of the system version. Since it's a VM I don't care much, but it seems to fix the problem. For anyone else that is experience the same problem and doesn't mind a hacky solution, they can try this. I rebooted afterwards and it worked.\nwget http://thrysoee.dk/editline/libedit-20150325-3.1.tar.gz\ntar xzvf http://thrysoee.dk/editline/libedit-20150325-3.1.tar.gz\ncp libedit-20150325-3.1\n./configure --prefix=/usr --enable-widec\nmake\nsudo make install\n. @tkn98 I would advise to not do such a destructive operation in any kind of a stable environment as there could be unexpected side-affects. Though you should be able to recover from it if you just reinstall the system libedit package and remove any additional files that are generated by the new version that don't exist in the original version. The reboot may not be necessary, but since I'm working in a disposable VM, I can handle the 30 second reboot window. No idea what libedit is hooked into that needs restarted.\n. ",
    "icedfish": "@bobthecow I tried to use psysh inside rlwrap (version: PHP 5.5.9-1ubuntu4.14 ), it seems still not  working.\n. ",
    "h311ion": "Just if someone bumps into same problem - on ubuntu 15.10 with installed php5-readline - i just reinstalled (apt remove/install php5-readline) and problem gone.\n. ",
    "yangliuyu": "I use psysh via php artisan tinker (part of laravel) in a customized docker instance (official php 7.1.5-alpine) which can not input utf8 characters like Chinese. \nThe php in docker is compiled with --with-libedit and libedit version used is libedit-20150325.3.1-r3. It is not likely change php with --with-readline since it will build the php image from scratch. When I try to download the latest libedit and compile it, it pass the configure but failed at make as \nmake[3]: Entering directory '/var/www/tmp/libedit-20170329-3.1/src'\nmake[3]: Warning: File 'Makefile' has modification time 2016 s in the future\n  CC       chared.lo\nIn file included from el.h:50:0,\n                 from chared.c:51:\nchartype.h:41:3: error: #error wchar_t must store ISO 10646 characters\n  #error wchar_t must store ISO 10646 characters\nSome patch may fix this problem but may need some extra effort.\nThe php installed on my mac via homebrew is compiled with readline works well.\n--with-readline=/usr/local/opt/readline \nThe workaround for me is to add a config.php under ~/.config/psysh with the content as @tkn98 already mentioned. But the tab completion and history function not work.\n```\n<?php\nreturn [\n    'useReadline' => false,\n];\n```. ",
    "jeremeamia": ":+1:\n. ",
    "eode": "..would this have the happy side-effect of dropping back to the prompt instead of quitting, or should I open a new ticket for that?\n. ",
    "sehgal10": "So whats the progress or alternative to this? Do we have any workaround than Ctrl + C?. ",
    "antonioribeiro": "The problem is not really on 3.0, it was removed from it, but in 2.7.*. But it all started with me trying to use Laravel dev-master (5.1), wich requires symfony 2.7 :)\nThe whole problem is in getHelperSet(), which unconditionally raises that exception. TableHelper itself doesn't if you instantiate it with false;\n. I did: https://github.com/symfony/symfony/issues/13732.\n. Nice, thank you! :)\n. ",
    "johnbendi": "I installed via composer and still get this:\nSQLite PDO driver not found\n. I used composer to install. How should I be installing newest version?\n. Okay. I used wget method. Thanks.\n. ",
    "titolendable": "thanks @jrobeson that did the trick, it works. I wonder why it doesn't work with the symfony server:run command. When I execute the following command, it gets stuck as @theofidry described: \n$php app/console server:run 0.0.0.0:8080 --router=vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/config/router_dev.php\n. @theofidry I am using it, maybe I am missing something, but I do not think the bundle provides a way to start the server, only to fire the shel with the symfony kernel booted. I run $php app/console psysh, but what I would like is to make it work with http requests. Something I accomplished using @jrobeson's suggestion but not with the native symfony server:run command. Am I doing something wrong?\n. ",
    "neronmoon": "+1 here. Any progress?. ",
    "mrdziuban": "It just returns one line that says readline\n. The output around it is:\n```\nLinked Version => 1.2.3.4\nDirective => Local Value => Master Value\nzlib.output_compression => Off => Off\nzlib.output_compression_level => -1 => -1\nzlib.output_handler => no value => no value\nAdditional Modules\nModule Name\nreadline\nsysvsem\nsysvshm\nEnvironment\nVariable => Value\nTERM => xterm-256color\nSHELL => /bin/bash\nXDG_SESSION_COOKIE => XXXXXX\nSSH_CLIENT => XX.XX.XXX.XX XXXXX XX\n```\nThis is from /etc/php5/cli/php.ini. Readline doesn't appear under 'Additional Modules' when checking /etc/php5/apache2/php.ini.\n. That returns false\n. [\n    \"line_buffer\"     => \"readline_info()\\n\",\n    \"point\"           => 0,\n    \"end\"             => 0,\n    \"library_version\" => \"EditLine wrapper\",\n    \"readline_name\"   => \"\"\n]\n. That works perfectly, thanks for the quick fix and for being so responsive!\n. Awesome, I do prefer using the compiled phar, so let me know when the release goes live.\n. Perfect, thanks again!\n. ",
    "dlussky": "Don't know where to ask, maybe here is the best place)\nWhat is the point of using constants with token names in AbstractMatcher.php?\nYou are still using it mostly as method arguments, so why don't you rely on original tokens? \nself::tokenIs($prevToken, T_NEW)\n// is cleaner than\nself::tokenIs($prevToken, self::T_NEW)\n. Thank for the reply, Markcial!) No pressure, it was just curiosity, because I was going to write custom Matcher and was confused about the way you are using tokens, so I thought that there was something I didn't see)\n. Oh! I see, didn't know they really changed numeric values behind that tokens, but I don't see why you need to hardcode any numeric or string values. For example:\n``` php\n//before:\n    self::tokenIs($firstToken, self::T_STRING)\n//...\n    public static function tokenIs($token, $which){\n        return token_name($token[0]) === $which; }\n//after:\n    self::tokenIs($firstToken, T_STRING)\n//...\n    public static function tokenIs($token, $which){\n        return $token[0] === $which;}\n```\nOn different versions both $token[0] and the value behind T_STRING constant will be syncronized, as i understand.\n. As i understand, all constants from 5.3 is preserved, only aliases were added (like T_PAAMAYIM_NEKUDOTAYIM => T_DOUBLE_COLON) and values behind constants were changed.\n*also, new tokens were added, corresponding to the new features added in 5.4-5.6\n. @Markcial, It is just a minor aesthetic issue, so don't worry, I will look into it this weekend and send you a PR if there will be a solution)\n. ",
    "cevarief": "I have readline installed but still can't figure out how to enable tab completion. When i press tab, it just give tab, no completion. Any can tell me ?\n. ```\n\n\n\n$c = new Psy\\Configuration\n=>  {}\n$c->getReadline()\n=>  {}\nfunction_exists('readline');\n=> true\nfunction_exists('pcntl_signal') && function_exists('posix_getpid');\n=> true\n```\n\n\n\nEdit : Psy Shell v0.4.3 (PHP 5.6.6-1+deb.sury.org~trusty+1 \u2014 cli)\n. I've set to true in config file : 'useReadline' => true,\n```\n\n\n\n$c = new Psy\\Configuration\n=>  {}\n$c->getReadline()\n=>  {}\n```\n\n\n\nStill no luck :)\n. ",
    "nicolas-grekas": "You may have been mislead by the master branch, which requires 5.5.9: VarDumper requires 5.3.3 in the current stable release.\nYou maybe didn't notice also that VarDumper exposes an extensive API to deal with dumps. With it, you can hook in how exactly each type/class should be dumped. The mechanism is called Caster and there are already a bunch of them. See the short intro in the doc here: http://symfony.com/doc/current/components/var_dumper/advanced.html#casters\nIt would be very easy to have two different set of casters, one used for the short excerpt you need on the rePl, and an other one for the \"dump\" command. Framework could continue to provide specific casters for their objects very easilly.\nVarDumper has unprecedented handling of references for example. It bet you want it.\nSee examples and try with PsySH :)\nhttp://symfony.com/doc/current/components/var_dumper/introduction.html#dump-examples-and-output\nI can help of course.\n. It may, because handing references, especially hard ones, is hard to my experience. It may not only be a fix. Whereas the Casters you'd need should be a few lines long.\nI may try for you :-) Thanks for your time and answers!\n. Waiting for 2.7 looks a good idea: it's coming fast, and if there is interest in merging some version of this PR, we still have a bit of time if anything needs to be ported from here to var-dumper.\n. This PR relies on symfony/symfony#14058 to be merged now: it makes integration even easier\n. @bobthecow Symfony 2.7 is beta-1 now, and the patches that ease this integration are merged. Technically we can move on. Can you please tell me if your concerns still remain? This PR taken as a PoC demonstrates that the integration is straightforward. The benefit for PsySH would be (non restrictive list): better references handling, bigger community, longer list of custom casters/presenters for all kind of objects, wider standardization around __debugInfo() and casters, more code sharing in general, etc.\nI'm in SF at the end of may, I'd be happy to meet you there if you like btw!\n. We don't need to rush, we can of course take our time. I looked at Laravel source code, I see no blocker for compatibility, but we should ensure that's the case.\n. I just finished replacing presenters by VarDumper, PR is ready for feedback.\nI'm now on Laravel to see what should be ported there.\n. @bobthecow thanks for the feedback.\nThe symfony doc has examples for most types of representations, you should review them:\nhttp://symfony.com/doc/current/components/var_dumper/introduction.html#dump-examples-and-output\nHere are some thought about your points.\n1. to me, the representation needs to be as straightforward as possible, but also as accurate as possible. The requirement to match the PHP syntax is already kind of included, with of course differences since we need to express things that are not possible in PHP (like objects representations). But going as far as using the heredoc syntax is not a good idea to me, because e.g. being really heredoc means putting the closing token on the first column without any indentation. Ugly IMO. But then anything else is not heredoc anymore, thus we can choose something more appropriated for humans only. For the string representation of resources, here is the reasoning: two kind of \"objects\" have an internal reference handle: php-objects and php-resources. Their ref-numbers live in a different \"namespace\". I choose #... for objects and @.... Could be swapped, but since refs are really less frequent than objects, I'm not sure this is required.\n2. what would be the purpose of the ending coma, for humans? Do you really think they help with readability? To me, they were just making dumps larger by one column. We could add them back easily.\n3. the color scheme is really a configurable thing. I started var-dumper with an other one of mine, then someone else proposed to use the symfony-doc color scheme. This is the default and it won't change in Symfony of course, but can be changed trivially in psysh's dumper (although I did not semantically isolate enclosing quotes from all other surrounding characters, so your idea to style them specially needs a small code specialization).\n4. this is not Python, I prefer my way for multi lines strings :-) (we could remove the indentation when the string is not nested in a hash if you really think it's wrong). In Python, triple quoted strings can be single-line strings, which kind of makes it a requirement to start it on the same line than the opening quotes. In dumps, this is really used only for multi-lines string, so we for sure know that there will be a break. Breaking just after the opening quotes makes the line shorter, which is good on a constrained console. For the closing quotes, dealing with EOL terminated strings is not infrequent. The Python style forces having what appears as a blank line for this kind of content. Thus the way it is now. More compact, still perfectly readable.\nPlease take all the above comments as contributions to the discussion, and by no mean as a rebuttal of yours :-) The current state of the dumped representation has already some feedback driven changes embedded (the color scheme, the $length displayed next to arrays, UML-style prefixes on properties, etc.) There is a big part of personal taste in any dumper's output and I really like that var-dumper here has a chance to be challenged for the better.\n. The code now uses the existing color scheme of psysh. I also use the OutputFormatter directly instead of this hack to extract the cli-color codes :)\nControl-chars are fixed.\n. I added an experimental commit where I copy/pasted var-dumper's CliDumper with some tweaks:\n- ending coma added at end of values,\n- #handle is back near to objects and resources dumps, using the default color of the cli.\n- removed ending {} on resources lines ; added the resource suffix instead of : prefix (so that stream resource #123 is displayed now instead of :stream {})\n- I changed the logic for multi-lines string:\n  - if the string is not longer than 80 characters (CRLF included), then it is dumped on a single line,\n  - for longer multi-lines strings, the ending \"\"\" is now on its own line (same for the opening one), and the \\n char is made visible at each end of line. Do you like it?\n. Once we agree on a final representation, I'll submit a PR on symfony with the updated CliDumper.\n. \n. For the color differences you suggest (#123, =>, etc.), I prefer using the default cli foreground color. Our brain reads the default foreground color as the \"no-special-color\" one. At least that's how I feel about it: everything in the default color is less important, not colored, no special semantic. The second argument is about people with a white background CLI. Using the default foreground will just swap white for black and make things as readable in both modes.\nFor the video inversion you liked on control chars, I removed it when I added the explicit end of lines. A colored background is very flashy and I didn't what to impose that to everyone doing multi lines strings (which is a lot of people, much more than with the other pretty rare control chars).\nAre you ok to keep the color as is?\nI don't know what will be accepted in Sf 2.7 as bug fix and what will have to be in 2.8.\nThat means that we have two choices to continue:\n- keep the tweaked CliDumper in psysh's code for now until 2.8 is out\n- accept the differences for now, knowing that once 2.8 is out, everything will be enhanced (ending \"\"\" on the same line, no ending coma, :stream style and some other missing tweaks you suggested)\nWhat is your choice? Both are fine by me.\n. See symfony/symfony#15036\nAfter having asked for a few more feedbacks, I reverted the single-lining of short strings but kept it for single-line strings that end with a newline.\n. The PR on Symfony is now merged, and this one is ready to be merged also IMHO :)\n. It is not technically required: it works on 2.7.0/1, it's just not as pretty as it will be once 2.7.2 is tagged\n. But then you will prevent people from using psysh with a 2.7.0/1 symfony :(\n. PR updated 5.3.9\n. Yeehaaaa! That needs a tweet :-) \n. I will thanks for the pointer\n. PR for ezsh is here: https://github.com/lolautruche/ezsh/pull/3\n. the composer.json file needs also to be updated to allow only symfony/console ~3.0 (the commit you linked is in the upcoming 3.0, not in 2.7)\n. Note that I think it would be better to keep 2.x and 3.x compat. To do this, you'd need to not specialize anymore renderException but rename it to e.g. something else, the redirect exceptions to is by playing with setCatchException and wrapping parent::run() is a try/catch block.\n. you could do this by adding a virtual prop, let's name it \"signature\", when you generate the signature of the closure in PHP style?\n. Just acking this. So, you would also represent \"use\" right at their place\nin the signature I believe. When default arg values are array, would you\npresent them on the same line, inlined?\n. What about this:\n=> Closure {#177\n    signature: \"function ($a) use ($b)\",\n    use: [\n      \"$b\" => 5,\n    ],\n    file: \"/home/nicolas.grekas/Code/psysh/src/Psy/ExecutionLoop/Loop.php(76) : eval()'d code\",\n    line: \"1 to 2\",\n}\nAnd in short mode (the default one), we hide everything but the signature?\n=> Closure {#177\n    signature: \"function ($a) use ($b)\"\n}\nI'd like to keep the Closure {#177 info, it's important to still tell the user that an anonymous functions is an object of type Closure imo.\n. Fixed by https://github.com/symfony/symfony/pull/27768. @ramondelafuente I may help. Casters are called in registration order, which means if yours is last, it can completely ignore what any previous did. Just out of curiosity, what is your caster doing?\nYou may also be interested in http://symfony.com/doc/current/components/var_dumper/advanced.html#casters\n. See also https://github.com/symfony/symfony/pull/15657\nEven if this PR on symfony is merged, I think this one is right.\n. We don't want to load the polyfill by default because it's a heavy one and iconv is really widespread and should be a default dependency (we have the same logic with e.g. the tokenizer extension).\nIf this policy doesn't fit psysh's, then I'd recommend adding the iconv polyfill to psysh's composer.json file.\n. AFAIK, iconv is the only polyfill in this case. Good to go with the big phar for me also.\n. Good catch. Symfony's CliDumper is free from this issue because it deals with its own color theme and doesn't use the console formatter.... Or a bug in php-ds? No other PHP class behave like that AFAIK.. @denzel-morris PR welcomed on symfony/symfony if you figure out a workaround.. I think doing both is the best: report the bug to php-ds, and ship a workaround in Symfony. right, I've removed the cath for throwables, it's an other topic for an other PR\n. ",
    "volter9": "Wow, thanks for such detailed response, I will check it out :+1: \n. Thanks! Is it possible to install this branch globally via composer?\nP.S.: The status text in your terminal looks amazing, is that custom app or custom dot files?\n. Thanks again! :smile: \nThen I can close this PR?\n. Nice! Thank you again! :smile:\n. ",
    "gitetsu": "Thank you for answering :)\nIt seems this problem happens at bin/build_manual#L269.\nI var_dumped at L270, $doc is correct but $formatted is broken.\nI will let you know if I can find more detail.\n. Okay. I will take a look into it.\n. Mmm... replacing all occurrences of  strlen with mb_strlen, substr with mb_substr in htmlwrap seems to fix this mojibake, but it also breaks wrap :(\n. Wow! Looks great!\nSorry for my late reply.\nAnd thank you very much. I really appreciate it!\n. Thank you for reviewing!\nI've fixed.. Fixed. I had imitated an older commit. :). My apologies. \ud83d\ude47 . Agreed \ud83d\udc4d . ",
    "ogizanagi": "Actually, why were array indexes removed when dealing with sequential arrays ? \nIMO it superseded the need of comma for readability (even if I'm rather in favor of using both).\n\nOff topic: I personally loved the way VarDumper highlighted things and it feels more at home to me, but I guess it's only a matter of taste and personal experience with the dumper.\nI guess I'll continue to use the dump function directly ^^'\n. ",
    "nikic": "The problem is likely the check for Traversable in https://github.com/bobthecow/psysh/blob/master/src/Psy/CodeCleaner/UseStatementPass.php#L78 - nodes are no longer Traversable (but they can still be traversed, like any other object).\nYou should be able to safely drop that line - it doesn't make sense anyway, as you already typehint against Node.\n. ",
    "Server4001": "Ah. Thanks for the quick response and the work around!\n. ",
    "victorvalentee": "It just annoys me that sometimes I have to change terminals just to run an \"ls\", or any other simple command.\nAre you concerned about actions people could take with this kind of \"power\"? Mess up the code or the system?\nWouldn't they be able to do it without this functionality being embedded in psysh anyways?\n. @bobthecow this is great. Keep up the good work, man.\n. ",
    "shark0der": "The one you suggested works well. \n. ",
    "Pierozi": "Thanks for your answer, and for PsySh, amazing tool.\nI tested your suggestion, but result is same.\nI write a lightest file if you want test yourself.\nYou have just to run atoum on this file https://gist.github.com/Pierozi/cc4cbce154a397f758ec\n``` bash\nroot@a158132b34bb:/app# php /app/vendor/bin/atoum /app/src/tests/scratch/psysh.php \n\nPHP path: /usr/local/bin/php\nPHP version:\n=> PHP 5.6.7 (cli) (built: Apr  7 2015 21:36:41)\n=> Copyright (c) 1997-2015 The PHP Group\n=> Zend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies\n=>     with Xdebug v2.3.2, Copyright (c) 2002-2015, by Derick Rethans\nTotal test memory usage: 0.00 Mb.\nRunning duration: 0.21 second.\nFailure (1 test, 0/1 method, 0 void method, 0 skipped method, 1 uncompleted method, 0 failure, 0 error, 0 exception)!\nTotal test duration: 0.00 second.\nThere is 1 uncompleted method:\n=> tests\\units\\Foo::testGet() with exit code 0:\n==> output(1076) \"Psy Shell v0.4.4 (PHP 5.6.7 \u2014 cli) by Justin Hileman\n==> >>> \n==> Exit:  Ctrl+D\n==> O:26:\"mageekguy\\atoum\\test\\score\":15:{s:32:\"mageekguy\\atoum\\test\\scorecase\";N;s:38:\"mageekguy\\atoum\\test\\scoredataSetKey\";N;s:43:\"mageekguy\\atoum\\test\\scoredataSetProvider\";N;s:13:\"passNumber\";i:2;s:17:\"failAssertions\";a:0:{}s:13:\"exceptions\";a:0:{}s:20:\"runtimeExceptions\";a:0:{}s:9:\"errors\";a:0:{}s:10:\"outputs\";a:0:{}s:12:\"durations\";a:1:{i:0;a:4:{s:5:\"class\";s:15:\"tests\\units\\Foo\";s:6:\"method\";s:7:\"testGet\";s:5:\"value\";d:0.14648890495300293;s:4:\"path\";s:32:\"/app/src/tests/scratch/psysh.php\";}}s:15:\"memoryUsages\";a:1:{i:0;a:3:{s:5:\"class\";s:15:\"tests\\units\\Foo\";s:6:\"method\";s:7:\"testGet\";s:5:\"value\";i:6553600;}}s:14:\"voidMethods\";a:0:{}s:21:\"uncompletedMethods\";a:0:{}s:17:\"skippedMethods\";a:0:{}s:11:\"coverage\";C:30:\"mageekguy\\atoum\\score\\coverage\":194:{a:7:{i:0;a:1:{s:3:\"Foo\";s:32:\"/app/src/tests/scratch/psysh.php\";}i:1;a:1:{s:3:\"Foo\";a:1:{s:3:\"get\";a:4:{i:9;i:1;i:11;i:1;i:13;i:1;i:14;i:-2;}}}i:2;a:0:{}i:3;a:0:{}i:4;a:0:{}i:5;a:0:{}i:6;a:0:{}}}}\"\n```\n. Hello there,\n\nActually problem was under the way of Atoum execute each test.\nAtoum have different engine for increase test performance and isolation.\nThe default engine are concurent, but you can change by inline for execute test in same process.\nin this mode, PsySh are able to run interactive shell.\nhttp://docs.atoum.org/en/latest/written_help.html?highlight=engine#execution-engine\n/**\n     * Class Foo\n     * @engine inline\n     * @package tests\\units\n     */\n    class Foo extends \\atoum\n    {\nThanks a lot to Hywan and Jubianchi from Atoum team for there help.\n. ",
    "xjchengo": "```\n\n\n\nfunction hello_world () {\n...____echo 'hello, world!';\n...}\n```\n\n\n\nLike the example above, the underscore represents blank. In editor, I can insert four blank by typing tab. But in psysh, tab is used to completion. So is there any way to insert real tab conveniently?\n. Wow, it works. Thanks. I am curious it is a feature of psysh or shell. \n. Thanks.\n. ",
    "freijbe": "Hello bobthecow,\nUnfortunately it still doesn't work, I still get this exit message and when i'm using the shortcut it's still doing nothing.\n. ",
    "agkozak": "A good workaround when using MSYS2 is to launch psysh using winpty, e.g.\nwinpty ~/AppData/Roaming/Composer/vendor/bin/psysh.bat\n. ",
    "squarefractal": "@freijbe \n\nIt also happens when i'm not typing for about 30seconds.\n\nThis is be due to PHP's max_execution_time; increasing it should work.\n(Yes, although max_execution_time doesn't make sense for the CLI SAPI, it is apparently used on Windows.). ...and apparently, after downloading a new copy of the PHAR PsySH, I can't reproduce this either. Closing this issue.\nSorry for the trouble and the time wasted.\n. Works as expected, closing issue.. The PHP version that ships with Ubuntu uses libedit, and the issue definitely occurs there.\nVersions of PHP built on libreadline does not seem to have this issue.\nI tried installing the php-readline package, but it doesn't seem to fix it.. ",
    "byCedric": "Thanks for the quick response. I will try it out asap!\n. ",
    "davedevelopment": "@GrahamCampbell see #206. Is the project following gitflow or just a new stuff goes in develop type thing? I did check the CONTRIBUTING.md before the PR, nothing in there, happy to PR something for that, just need to know what the rules are.\n. Sure thing! That hasMatched method essentially checks to make sure either the last or second to last token was a T_OBJECT_OPERATOR, which is fine. However, once we're up in to the getMatches method, the code assumes that whatever comes before the T_OBJECT_OPERATOR is both a T_VARIABLE and it will be available in the current variable context. \nSo when I type\nphp\n$app['some.pimple.service']-><tab><tab>\nThis matcher would attempt to call getVariable with an empty string, because the token before the T_OBJECT is a ]. getVariable throws if it can't find whatever variable it is that you ask for.\nWe could add code to hasMatched as well to prevent things getting that far, at least for the cases where it's not a T_OBJECT, but I think it's safest to keep this catch in here. I'd rather not have any matches shown than see an exception.\n. No problem, didn't even notice the failures :/\n. ",
    "beporter": "Thank you for the awesome explanation, that's extremely helpful and makes perfect sense, of course. (Weird that Github search doesn't return a match for that line from writeStdout() but whatever.)\nSo basically, if I want to suppress the Psysh-provided implicit visible return, I need to just make sure I provide my own. So comparing before and after:\nshell\n$ echo 'echo \"implicit (visible) return will be added\"; exit;' | vendor/bin/psysh \nPsy Shell v0.4.4 (PHP 5.6.10 \u2014 cli) by Justin Hileman\nimplicit (visible) return will be added\u23ce\n$ echo 'echo \"providing my own\\n\"; exit;' | vendor/bin/psysh \nPsy Shell v0.4.4 (PHP 5.6.10 \u2014 cli) by Justin Hileman\nproviding my own\nSo now the only bump in this path is that first banner line (which is where the -q option would help.)\nAnd since you (kinda) asked, here's the full explanation for why that would be helpful:\n- CakePHP 3 offers a starter skeleton that includes Psysh to provide a command line environment where the entire Cake runtime environment is at your disposal inside the REPL. This turns out to be extremely handy, but you already know that. :wink: \n- I've presented a pretty stupidly simple way for Cake apps to maintain different configurations for different operating environments. This includes simple things like connecting to a local MySQL database when running inside vagrant, but connecting to RDS when running on EC2.\n- I've also written a bunch of shell scripts that are meant to be used with a Cake app, including one that looks up the database connection settings that Cake uses, and runs a database backup using those params (which ties into getting the \"correct\" settings for the current environment). This process is currently pretty convoluted and involves yet another Cake plugin I had to write specifically to make this possible in Cake 2, but Psysh now offers hope of streamlining it like crazy by providing a really simple way to get access into the fully bootstrapped Cake environment, and just spit out serialized connection data (and already corrected for the local environment) to be consumed by external scripts. Psysh's banner line is the last thing standing in the way.\nNow all that said, of course I can keep using | tail -n+2 to strip the first line of output in the meantime, but rest assured, there is at least one use case for this. Although it's surely more work, potentially disabling the implicit return (\u23ce) during --quiet operation might also be worth considering, if the assumption is that, \"I only want to see what the code I provide would output itself.\"\nThank again for your time. :+1: \n. So tl;dr I guess:\nThe REPL has a ton of use for being able to inject arbitrary code into a bootstrapped app environment and get values back that can be used externally-- provided that it's possible to get just the output you specify and not anything extraneous from Psysh itself.\n. ",
    "mattsah": "The test appear to have failed, although this may be because it's pulling in an older version than what I'm getting (for some reason).  I noted the composer.json has up to three different version strings listed.\nHere's the commit where it was added:  https://github.com/symfony/Console/commit/e0f1945f076e7b6fdc4f08d9791cb5cc5dbf006c\nThis appears to be only in 2.7+\n. Another correction, this may possibly only be in upcoming 3.0 symfony console (not in 2.7.0, and so far as I can tell not in 2.8 branch).  It's not clear why my composer is pulling this, as psysh is the only package with that dependency, although it does list ~3.0 I can't see any reference to that version on the console side.\n. ",
    "slava-vishnyakov": "Wow, you are fast! :)\nSuper! I've added \n\"prefer-stable\": true\nto composer.json and now it works!\nThank you!\n. ",
    "mstaack": "fixed it running  apt-get install php5-readline.\nthanks!\n. ",
    "veah": "same problem as the upstair\nAt the begining I installed psysh using composer on my mac,and I found out I can't use the arrow keys in Psy because those keys print out the ^[[D or ^[[A things\nThen I installed psysh through homebrew on my mac,and the output of installation showed that there is a dependency named 'readline' installed.But I still can't use the arrow keys. this is the Psy\\info(), I think it means the readline still doesn't work well?\n```\n\n\n\nPsy\\info()\n=> [\n     \"PsySH version\" => \"v0.8.2\",\n     \"PHP version\" => \"5.6.24\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"error logging level\" => 32767,\n     \"config file\" => [\n       \"default config file\" => null,\n       \"local config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"updates\" => [\n       \"update available\" => false,\n       \"latest release version\" => \"v0.8.2\",\n       \"update check interval\" => \"weekly\",\n       \"update cache file\" => \"/Users/veah-mac/.config/psysh/update_check.json\",\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => true,\n       \"posix available\" => true,\n     ],\n     \"readline\" => [\n       \"readline available\" => false,\n     ],\n     \"history\" => [\n       \"history file\" => \"/Users/veah-mac/.config/psysh/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => false,\n       \"custom matchers\" => [],\n     ],\n   ]\n. that's it:\n/Applications/XAMPP/xamppfiles/bin/php\n/usr/local/bin/php\n/usr/bin/php\n```. sorry I dont understand...what do you mean?. Great! That works!\n. \n\n\n",
    "jimdelois": "@bobthecow Thanks!  Sorry to have missed that...  Definitely working great after the upgrade to v0.5.2.  Apologies for the extra noise.\n. :+1: !  This is literally the ONE package that I have globally installed, so it's rare that I even think to update...  Something to prompt on any interval would be welcomed.\n. ",
    "shadowhand": "cc @ameech\n. @GrahamCampbell correct branch I think, and I fixed the 5.3 regresssion.\n. > StyleCI issue should go away\nDone.\n. @bobthecow this seemed like the cleanest way to ensure that checking $this->configFile would only be set by the user providing a config file. It does have a (small) performance implication if the user calls getConfigFile more than once. By default there is only one invocation, so it seemed safe to change.\n. @bobthecow now skips loading local config if the user passed a config file option.\n. Test case has been added ...\n. ... here.\n. @bobthecow info updated.\n. @bobthecow maybe I should do all of the local file testing here instead of having those modifications in testFilesAndDirectories...?\n. Created a separate directory for this file so it clearly for a different test than directory/file test.\n. ~~project~~ local\n. ",
    "mpyw": "Oops, should I report not here but in nikic/PHP-Parser's forum?\n. thx :+1: \n. > Due to the way the internals work.\nYes, PsySH seems to have powerful features for reflection. Even so, all variables (and resources) related to $fp should be completely released after unset($fp).\n. Umm...\n\nI also found important things. The manual removal with GUI seems to be blocked, whereas the command rm test.txt works in any cases. What does it mean?\n. Now I'm using PsySH 0.7.0, PHP 7.0.1 and  OSX 10.11.3. I can still get the error :tired_face: \n. Omg, that's too bad :sob: \nThank you anyway :laughing: \n. @bobthecow :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: \n. ",
    "loranger": "Sure, here it is :\nbash\n$ ./psysh info.php\nPsy Shell v0.6.0-dev (PHP 5.6.12 \u2014 cli) by Justin Hileman\n/Users/loranger/Developer/tools/psysh/info.php:2:\narray(10) {\n  'PsySH version' =>\n  string(10) \"v0.6.0-dev\"\n  'PHP version' =>\n  string(6) \"5.6.12\"\n  'default includes' =>\n  array(0) {\n  }\n  'require semicolons' =>\n  bool(false)\n  'config file' =>\n  array(2) {\n    'default config file' =>\n    NULL\n    'PSYSH_CONFIG env' =>\n    bool(false)\n  }\n  'pcntl' =>\n  array(2) {\n    'pcntl available' =>\n    bool(true)\n    'posix available' =>\n    bool(true)\n  }\n  'readline' =>\n  array(4) {\n    'readline available' =>\n    bool(true)\n    'readline enabled' =>\n    bool(true)\n    'readline service' =>\n    string(20) \"Psy\\Readline\\Libedit\"\n    'readline library' =>\n    string(16) \"EditLine wrapper\"\n  }\n  'history' =>\n  array(3) {\n    'history file' =>\n    string(37) \"/Users/loranger/.config/psysh_history\"\n    'history size' =>\n    NULL\n    'erase duplicates' =>\n    NULL\n  }\n  'docs' =>\n  array(2) {\n    'manual db file' =>\n    NULL\n    'sqlite available' =>\n    bool(true)\n  }\n  'autocomplete' =>\n  array(2) {\n    'tab completion enabled' =>\n    bool(true)\n    'custom matchers' =>\n    array(0) {\n    }\n  }\n}\n. PHP upgraded this morning to 5.6.13 fixed the issue.\nI can't understand why, but everything is back to normal.\nThanks for your support, anyway.\nIn case you can spot something interesting, here is another Psy\\info()output :\n``` bash\n$ ./psysh info.php                                                                \u23ce\nPsy Shell v0.6.0-dev (PHP 5.6.13 \u2014 cli) by Justin Hileman\narray(10) {\n  'PsySH version' =>\n  string(10) \"v0.6.0-dev\"\n  'PHP version' =>\n  string(6) \"5.6.13\"\n  'default includes' =>\n  array(0) {\n  }\n  'require semicolons' =>\n  bool(false)\n  'config file' =>\n  array(2) {\n    'default config file' =>\n    NULL\n    'PSYSH_CONFIG env' =>\n    bool(false)\n  }\n  'pcntl' =>\n  array(2) {\n    'pcntl available' =>\n    bool(true)\n    'posix available' =>\n    bool(true)\n  }\n  'readline' =>\n  array(4) {\n    'readline available' =>\n    bool(true)\n    'readline enabled' =>\n    bool(true)\n    'readline service' =>\n    string(20) \"Psy\\Readline\\Libedit\"\n    'readline library' =>\n    string(16) \"EditLine wrapper\"\n  }\n  'history' =>\n  array(3) {\n    'history file' =>\n    string(37) \"/Users/loranger/.config/psysh_history\"\n    'history size' =>\n    NULL\n    'erase duplicates' =>\n    NULL\n  }\n  'docs' =>\n  array(2) {\n    'manual db file' =>\n    NULL\n    'sqlite available' =>\n    bool(true)\n  }\n  'autocomplete' =>\n  array(2) {\n    'tab completion enabled' =>\n    bool(true)\n    'custom matchers' =>\n    array(0) {\n    }\n  }\n}\n\n\n\n```\n. \n\n\n",
    "jaden": "I'm running psysh globally with the same problem of not finding the documentation DB file on Windows 7.\nThe DB file is here: C:\\Users\\dan\\AppData\\Roaming\\PsySH\\php_manual.sqlite \nAnd the output of Psy\\info()\n```\n\n\n\nPsy\\info()\n=> [\n     \"PsySH version\" => \"v0.5.2\",\n     \"PHP version\" => \"5.6.13\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"config file\" => [\n       \"default config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => false,\n       \"posix available\" => false,\n     ],\n     \"readline\" => [\n       \"readline available\" => false,\n     ],\n     \"history\" => [\n       \"history file\" => \"C:\\Users\\dan.config/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => false,\n       \"custom matchers\" => [],\n     ],\n   ]\n```\n. I found that the APPDATA path wasn't one of the data dirs being checked. Due to the use of the XDG Base Directory specification, Windows paths aren't included.\n\n\n\nThese are the paths that are being checked:\nC:\\Users\\dan/.psysh/php_manual.sqlite\nC:\\Users\\dan\\.local\\share/psysh/php_manual.sqlite\n/usr/local/share/psysh/php_manual.sqlite\n/usr/share/psysh/php_manual.sqlite\nIn my opinion, all that needs to change is the documentation. Putting php_manual.sqlite in C:\\Users\\dan/.psysh/ works fine.\nI've submitted a pull request with the documentation change.\nAnd for the sake of completeness, here's the info you requested.\n```\n\n\n\ngetenv('APPDATA');\n=> \"C:\\Users\\dan\\AppData\\Roaming\"\ngetenv('HOME');\n=> \"C:\\Users\\dan\"\nfile_exists(getenv('APPDATA') . '/PsySH/php_manual.sqlite');\n=> true\n```\n. @GrahamCampbell Thanks for the heads up.\n\n\n\n@bobthecow I can see that. On the other hand, I currently have 49 dot directories in my HOME directory :) I didn't even realize %HOME% is non-standard on Windows. I just checked with a fresh Windows user, and you're right, it wasn't there.\n. > PsySH tries to be better than those 48 other libraries, though ;)\nI admire your principled adherence to Windows standards. :) \nAnd after further review, many of the apps using HOME are nix-first and run on Windows, but were not Windows native.\n. ",
    "digfish": "Sorry for answering just now, here is the output of Psy\\info() on my system:\n=> [\n     \"PsySH version\" => \"v0.6.0-dev\",\n     \"PHP version\" => \"5.6.11\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"config file\" => [\n       \"default config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => false,\n       \"posix available\" => false,\n     ],\n     \"readline\" => [\n       \"readline available\" => false,\n     ],\n     \"history\" => [\n       \"history file\" => \"C:\\Users\\sam\\.config/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => false,\n       \"custom matchers\" => [],\n     ],\n   ]\nI also have the documentation sqlite file located on  C:\\Users\\sam\\AppData\\Roaming\\PsySH\\php_manual.sqlite\n. ",
    "nowox": "I totally agree about the (CTRL+C) SIGINT action. As for most shells, it is the EOF (End Of File) which is used to close the session with  (CTRL+D). \n. ",
    "Lucas-C": "What do you mean ?\nIt's served by Apache\n. From memory:\nrequire DRUPAL_ROOT . \"/psysh\";\neval(\\Psy\\sh());\n. Yes, the error appeared when I left this snippet in code.\n. Thanks @daang77 !\nNice of you to share this solution here\n. ",
    "majuric": "@Lucas-C I've had a similar problem with my setup, and it turned out my php.ini was not correctly set up. I had to enable register_argc_argv=on .. and then the error message disappeared. Found the solution here: http://stackoverflow.com/questions/14108592/composer-not-installing-uncaught-exception-errorexception-with-message-undefi\nOther than that I believe you have to run your app with the built in php sever using 'php -S' in order to drop to the shell .. more info here http://php.net/manual/en/features.commandline.webserver.php\nI personally am not able to run my app this way easily since much of the include paths and aliases happen at Apache level, but at least the 'argv' error is solved for me :)\n. @Lucas-C No problem, that's what GitHub is for ;) \nI hope it will work for you.\n. ",
    "rayfoss": "I can confirm both solutions work to remove the error. that is to say making register_argc_argv=on in php.ini or getting the latest dev version. composer g require dev-feature/runkit-redux\nFor some reason the require outputs #!/usr/bin/env php everywhere. I'll have to output stream that for now.\n. ",
    "lvht": "@bobthecow Would you like to offer a new release schedule?\n. Hi @bobthecow , this patch does not work for doc Composer\\Autoload\\ClassLoader::<tab>. Could you offer any advice?. @bobthecow support ls and show. ping @bobthecow . ",
    "tgr": "Can reproduce on 652fec4.\n. Tested on the develop branch.\n. You could try to disable autocompletion when on a line which only contains tab characters; it is apparently possible with the Python readline bindings at least. Or simple replace tabs with spaces. Or detect the number of characters buffered but not transmitted to readline yet, and guess whether it's a paster based on that.\n. Just for the record, the new(ish) edit command is totally awesome and mostly fixes this issue for people who are stuck on libedit.. Awesome, thanks a lot for looking into it!\nIf I understand correctly, this is not a perfect simulation of global scope, as newly created variables won't be global, and global variables defined by some method called from the shell won't become visible. As far as I can see that would not be relevant for the MediaWiki use case though as all globals should be declared up front in the initialization step before Psy\\Shell is invoked.\nI suppose this can be closed as declined then? (I much prefer doing it outside the PsySH codebase as well, I just assumed there is no way to do it without modifying the loop code, which is not subclassing-friendly.). My experience is the same, sometimes tab expansion fails and there doesn't seem to be any pattern to when, and it is usually not repeatable.\nMaybe worth having some kind of debug logging of tab completion attempts?. The ugly workaround is running PsySH with XDG_RUNTIME_DIR= psysh or similar (or make sure sudo resets the environment, which it does by default). Filed dnoegel/php-xdg-base-dir#26 upstream, not sure if that's a better place to handle it than Psy/Configuration though.. (downstream task is T186936). Thanks for looking into it!\nWe are using PsySH 0.8.11 and I can only reproduce the error in production so I backported the patch to b193cd020:src/Psy/ExecutionLoop/ForkingLoop.php. After applying it, I still get the Interrupted system call warning but it doesn't break PsySH anymore - I get back the command prompt, and there is no warning on any subsequent commands.. Thanks a lot! Will update when the patch is released.\nIs there a way to suppress the warning message? Not a big deal but slightly confusing. Maybe just do @stream_select and put the error message in the exception when it's not ignored?. Some people from Wikimedia ops looked into the issue, and apparently this is somehow caused by HHVM's pre-created threads - the error does not happen when using Zend or hhvm.server.light_process_count = 0.  Which is a fine workaround for us. #268 is with Zend though, so the patch is still useful in other circumstances.\nI am not sure about suppressing the error - in general it's not a good idea, but the error is confusing and not really useful without at least knowing what kind of signal it was.. Awesome, thanks a lot!. I've seen this in Wikipedia production and the PsySH version there is quite old. I'll see if the error sticks after the upgrade.. It's still happening (we are on 0.9.6) now. I'll try to find a minimal testcase - the one you provided works correctly so it's nothing as simple as namespaced constant as array key. Maybe it has to do with the fact that the constant needs to be autoloaded, although the test cases involving autoloading that I tried worked fine.. > Is there currently a way to re-print the most recent return value?\nYeah, dump $_. But the more intuitive (to me) version is\n$foo = someCommand();\n$foo\n\nwhere the second command can't have any other possible reason than inspection. Similarly a command like $foo['bar'][$baz] is no doubt used for inspection. So either using a full dump when there is no assignment, or using it when there is no assignment and no function/method call (ie. no side effect) feels natural to me.\n\nYou can follow the command with another command.\n\nThanks, that's a nice workaround.. OK, that wasn't very helpful... so the first error is from PsySH's syntax checker (red background, does not break history), the second is a real PHP fatal (plain background, breaks history).. Ubunut Xenial and Debian Stretch are the ones where I can test easily and those both do it. I didn't find it documented anywhere but then documentation for libedit is not great in general.\nYeah, checking file permissions on return false seems the most robust.. ",
    "kocoten1992": "@tgr , running into it, a work around maybe this?\nreturn new self\n. @GrahamCampbell same with 0.7.1\nMaybe a patch like this: check if the return instance is the same name at the class, if so, pass it for the time being.\nNot sure how it play with namespace, but dealing with that later :dancer: \n. Shortcut are dangerous these days\nCtrl+R to search old command, a miss press, sigquit and a whole session gone\nOn chrome, Ctrl+Shift+Tab to turn back one tab, miss Tab to Q and you got f*** :disappointed: . ",
    "beyondlimits": "Windows 7, PHP 7.1.0 - tested and couldn't reproduce it. Right after the resource is unset I was able to remove the file.. > For the \\\\n issue, it should be using color to disambiguate. Does it show the \\ and \\n in different colors for you?\nIndeed. I just had to use better terminal than the default one delivered with Windows.. ",
    "d9k": "Kubuntu 14.04, PHP 5.5.9 (cli)\nSame issue with both wget and composer installation ways.\nPHP Fatal error:  Class 'Psy\\Presenter\\MongoCursorPresenter' not found in /home/user/.psysh/rc.php on line 54\nI used config from README, no improvements.\n. ok, README was wrong and error was right: I should've edit ~/.psysh/rc.php not ~/.config/psysh/config.php. README confused me\n. ",
    "rkgrep": "This happened on a fresh laravel 5.2 installation. Looks like invalid dependency.\n. Not in Laravel, but in PsySH. It allows Symfony 3.0, however it is not supported. Of course, this is not critical for v0 releases. \n. ",
    "alexeyshockov": "I agree, that support for both versions of PHP parser is better.\n. So, tests pass. Only one question about proper option to PHP parser (PREFER_* or ONLY_*) is opened now, as I can see.\n. Splited to two commits.\n. Good, I added own factory. It just forwards original PHP parser factory constants, because parse command doesn't abstract user over the library, it's only an interface.\n. I'm going to send updates later today, at night. I hope it will not be late!\n. Fixed all issues, please review.\n. I think it's a bug, because PHP parser doesn't have Expression type. It has only Expr.\n. In the CodeCleaner strict options should be used, because parsed code will be evaluated on the same interpreter (so with PREFER_PHP7 invalid code can be passed to 5.x interpreter).\nI don't have strong opinion about ParseCommand. I think the best way will be to add additional console option for PHP version. What do you think?\n. I already understood the mistake, don't work as CI ;)\n. Agree. Moved to a separated PR (#252). Thanks!\n. Now it's used again (after reverting support for PHP parser 1.x).\n. Sad, but not work with PHP 5.3 :( Instance must be created separately.\n. Agree. Fixed.\n. Fixed.\n. I added all possibilities to the option description. I think, that's enough :)\n. Fixed.\n. Agree with simple kind. Fixed.\n. Fixed.\n. Agree, fixed to if. Hope we will see PHP version increment in the requirements soon...\n. I don't like to duplicate things this way (yet another string with the same constant names). But it's not so important for me, so if you think differently...\n. Fixed.\n. Fixed.\n. ",
    "krageon": "It actually looks like the results returned here are from a bunch of psysh Matchers - the T_OPEN_TAG is a legitimate hasMatched for (for example) FunctionsMatcher, ClassNamesMatcher and ConstantsMatcher. The potential matches include things like echo, empty, etc.\nThis isn't a case of readline being difficult. If it was, you would be able to set rl_completion_over (or completion_over in case you are setting it using readline_info) to a value other than 0.. I made a pull request to fix this.. Cool! I'll close the PR in that case. Perhaps it is a good idea to close this issue as well, to prevent future confusion :)\nI am curious why it's readline-only though, I'll dig around a little after lunch.. Note that readline by default also inserts a space after whatever it autocompletes. There is currently no support for changing rl_completion_append_character which would allow psysh to prevent this from occurring at all. I have an open PR in php-src that fixes this: https://github.com/php/php-src/pull/2720\nAs for switching your PHP to readline: Assuming you have the extension (readline.so) available, maybe make sure that it is also loaded in your php cli environment. Readline should have precedence over libedit in psysh, so if it is available I don't see why it wouldn't be using that.. I can look into adding the required functions as a patch to the php readline plugin.. The referenced PR adds editing external files inline using whatever EDITOR your environment has. If/when I see that the PHP maintainers are accepting of changes to the readline extension, I will see if I can get some hotkey support.. Travis will probably fail on old php versions as I run only 7.1 locally, I'll fix that after I have lunch.. The issue that I was fixing is already fixed, so I'm closing this PR.. Ah. I'm actually experimenting with some changes that will un-break hoa\nconsole, they would probably also benefit from this. Alright then, I'll\npolish this up (probably Monday morning).\nOn Sep 2, 2017 02:21, \"Justin Hileman\" notifications@github.com wrote:\n\nI think this is still valuable for people who don't have a PHP or terminal\nor readline version that supports bracketed paste\u2026 IIRC PHP with libedit\ndoesn't?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/bobthecow/psysh/pull/410#issuecomment-326709062, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACjTi5SDFUOlvG4RZsLzxmFfblMoO3UXks5seJ-WgaJpZM4PHLK6\n.\n. There. That should be the tests fixed :). Thanks for the feedback! I'll work on incorporating it right away.. Your review comments went all weird because I rebased the feature branches onto your develop branch. Apologies for that.. Support for the $variable input syntax in EditCommand will either come later this evening or (more likely) tomorrow morning. Thanks for the input so far :). Of course. I should probably configure my editor to do it for me, now that\nyou mention it.\n\nOn Sep 2, 2017 02:31, \"Justin Hileman\" notifications@github.com wrote:\n\n@bobthecow commented on this pull request.\nIn src/Psy/Command/EditCommand.php\nhttps://github.com/bobthecow/psysh/pull/411#discussion_r136684416:\n\n\n'Execute the file content after editing. This is the default when a file name argument is not given.',\nnull\n),\nnew InputOption(\n'no-exec',\n'E',\nInputOption::VALUE_NONE,\n'Do not execute the file content after editing. This is the default when a file name argument is given.',\nnull\n),\n))\n->setDescription('Open an external editor. Afterwards, get produced code in input buffer.')\n->setHelp('Set the EDITOR environment variable to something you\\'d like to use.');\n}\n+\nprotected function execute(InputInterface $input, OutputInterface $output)\n\n\nmind adding a @throws comment here?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/bobthecow/psysh/pull/411#pullrequestreview-60263594,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACjTiz5wWX4VvYhCi5IRmAnCd-41qXFZks5seKHLgaJpZM4PHW_o\n.\n. Good point. I split it out into an abstract default parameter matcher that has a function to do most of the common stuff.. Definitely not - I use this quite often. I'm not 100% happy with using\njson_encode though. It'd have my preference if the solution was as close to\nbeing exactly what php sees as possible. To that end, I'm looking for a way\nto get the code so I can get the AST from php-parser. That will allow me to\nmake a custom pretty printer, which will allow fixing basically every\npresentation issue.\n\nOn Sep 11, 2017 10:01, \"Justin Hileman\" notifications@github.com wrote:\n\n@bobthecow commented on this pull request.\nIn src/Psy/TabCompletion/Matcher/AbstractDefaultParametersMatcher.php\nhttps://github.com/bobthecow/psysh/pull/412#discussion_r138002446:\n\n+{\n+    /\n+     * @param \\ReflectionParameter[] $reflectionParameters\n+     \n+     * @return array\n+     /\n+    public function getDefaultParameterCompletion(array $reflectionParameters)\n+    {\n+        $parametersProcessed = array();\n+\n+        foreach ($reflectionParameters as $parameter) {\n+            if (!$parameter->isDefaultValueAvailable()) {\n+                return array();\n+            }\n+\n+            $defaultValue = var_export($parameter->getDefaultValue(), true);\n\nNo worries. Just wanted to make sure it didn't get dropped.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/bobthecow/psysh/pull/412#discussion_r138002446, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACjTiy5yRAyFXcx6CH4CzHErhyhAOXlOks5shOjNgaJpZM4PHix9\n.\n. In the interest of making something that works now instead of ten weeks, your solution is definitely the superior one :). I'll fix styleci and test it in the morning :). Travis fails for PHP 5.3, but it looks like that's a problem that doesn't have anything to do with this pull request.. I did not rebase them, as I've used these branches as a base of something else as well. This would make merging all of the eventual changes (including ones that I cannot publish yet because the required changes are not yet in the readline extension) very difficult. I did merge it and it works now, so that is good.. Yes, that is because out of the box PHP's readline extension (and also just vanilla readline) completes with a space after the end. The double completion you see can be fixed by this merge request: https://github.com/php/php-src/pull/2720\n\nI have another one in the bleachers (that will not work with things as it stands, because that readline fix does not yet exist) for psysh that removes the appended space after completion. When that is merged, you can press tab to complete the class name and press tab again to complete the double colon (with a menu completion shortcut set, you can press that key to cycle through whatever options you have).. Sure! I'll close it pending that change.. The merge request in question: https://github.com/dnoegel/php-xdg-base-dir/pull/20. I've changed this so the used version is set to dev-master of the original package. Anything lower doesn't have my changes, but my PR was accepted so using a fork is no longer necessary.. good point!. That's a good point. I'm used to putting type hinting everywhere, but I removed it all when I realised that wouldn't work all the way back to PHP 5.3. I was a little overzealous.. I looked here: https://github.com/php/php-src/blob/master/ext/readline/readline.c#L490\nAnd I saw that params always contains int start and int end.\nFor editline / libedit, editline/readline.h is included. This has typedef char **rl_completion_func_t(const char *, int, int); and extern rl_completion_func_t *rl_attempted_completion_function;\nin editline's readline.c I see this:\n```\n/\n * complete word at current point\n /\n/ ARGSUSED /\nint\nrl_complete(int ignore attribute((unused)), int invoking_key)\n{\n    static ct_buffer_t wbreak_conv, sprefix_conv;\n    char *breakchars;\nif (h == NULL || e == NULL)\n    rl_initialize();\n\nif (rl_inhibit_completion) {\n    char arr[2];\n    arr[0] = (char)invoking_key;\n    arr[1] = '\\0';\n    el_insertstr(e, arr);\n    return CC_REFRESH;\n}\n\nif (rl_completion_word_break_hook != NULL)\n    breakchars = (*rl_completion_word_break_hook)();\nelse\n    breakchars = rl_basic_word_break_characters;\n\n_rl_update_pos();\n\n/* Just look at how many global variables modify this operation! */\nreturn fn_complete(e,\n    (rl_compentry_func_t *)rl_completion_entry_function,\n    rl_attempted_completion_function,\n    ct_decode_string(rl_basic_word_break_characters, &wbreak_conv),\n    ct_decode_string(breakchars, &sprefix_conv),\n    _rl_completion_append_character_function,\n    (size_t)rl_completion_query_items,\n    &rl_completion_type, &rl_attempted_completion_over,\n    &rl_point, &rl_end);\n\n}\n```\nWhere rl_point and rl_end are updated as follows:\n```\nstatic void\n_rl_update_pos(void)\n{\n    const LineInfo *li = el_line(e);\nrl_point = (int)(li->cursor - li->buffer);\nrl_end = (int)(li->lastchar - li->buffer);\n\n}\n```\nWhich leads me to believe that it does the same thing (http://www.delorie.com/gnu/docs/readline/rlman_28.html tells me that rl_end contains the number of characters in the line).\nEven if that is in question, from the readline.c file in php-src, we can see that rl_end (the value passed to the callback as end) and the end key output by readline_info are the same:\nhttps://github.com/php/php-src/blob/master/ext/readline/readline.c#L257. However, having dived into it this far, I cannot help but wonder how this works - I had interpreted end differently than what the documentation suggests it does, and I saw it work in that way as well. The variable I actually need is rl_point, which is always in readline_info but not passed as a callback argument.. It's actually the function passed to readline_completion_function that needs the change, which is also public. Refactoring that in a non-breaking manner gives me a large headache, so I reverted it back to the old (and admittedly broken) way. I use point now, which is more in line with what should happen anyway.. Exactly like that. Using both flags makes no sense and should throw an error, which it does.. Good point - done!. This is very true. I suppose I could parse the code using the AST parser and make a custom formatter for shortform everything, but that would be a lot slower than what is there now. Another option would be to throw some regex at this problem, which is probably a little faster but also a lot less easy to modify. Do you have a preference?. I just tried mocking this, but it's actually a lot less trivial than I thought initially. I'll table it for now and return to it a little later.. A filled array is also strange. With multiline strings as default parameters, you get newlines but not ones you want to replace. Then you can have multiline strings inside of arrays as default parameters, that is where I decided I didn't want regex. I spent a little bit getting a prettyprinter to work reliable but failed, but that definitely doesn't mean it's impossible - I just have to mull over what I did wrong.. That's an interesting solution. I'll test that out (probably in the morning), thanks!. Apologies, I didn't forget about you :) I got sidetracked by something else. I'll look at this today assuming nothing explodes.. Good point. I'll implode (with a space this time haha). That's neat. I'll fix it. It inserts a tab character, not spaces. I'm definitely not a fan of replacing it with space characters, as those are different (no matter what you think of tabs vs spaces) and substituting one for the other silently can never be what you want.\nThe tab + space behaviour is sort of vexing, but it's not something I can realistically solve in a way that doesn't break everything in environments that do work properly (for example ones that have the path from https://github.com/php/php-src/pull/2720 applied). \nWhat I can probably do is return array(\"\\t\" . chr(8));. chr(8) is the backspace character, which should work. . I could add in a setting for this and apply it to every autocompletion, thinking about it. Until the patch I mentioned works that's a sort of viable workaround to get autocompletion as you'd expect from an IDE.. Wait no, that won't work. The space is appended after the completion - so a backspace that is inserted will actually just remove the tab character entirely.. ",
    "rodrigoprimo": "\nThis is fixed as of v0.8.11 (the readline way) if you use readline (not libedit) and a reasonably modern terminal app. Enable useBracketedPaste in your psysh config and enjoy :)\n\nWhen I paste code with two or more tabs to psysh, I get the same behavior that @tgr mentioned in the issue description (see below). I'm running v0.8.17 and I have useBracketedPaste enabled. @bobthecow, can you please elaborate on what you meant by a modern terminal app? I'm running Ubuntu 17.10 and I use zsh. How can I check if psysh is using readline instead of libedit? I have php-readline installed.\nIf I try to paste the code below (middle line indented with two tabs) into the shell:\narray(\n        1\n);\nI get:\n```\n$ psysh\nPsy Shell v0.8.17 (PHP 7.1.13-1+ubuntu17.10.1+deb.sury.org+1 \u2014 cli) by Justin Hileman\n\n\n\narray(\n... \nDisplay all 3004 possibilities? (y or n) \n... \n```\n\n\n\nIf I set tabCompletion to false, pasting the code works but in the middle of the pasted code a list of files from the working directory is displayed:\n```\n\n\n\narray(\n... \n.babelrc           .editorconfig      .github            .jshintrc          .travis.yml        apigen.neon        CODE_OF_CONDUCT.md Gruntfile.js       license.txt        package-lock.json  phpunit.xml        sample-data        uninstall.php   \n.codeclimate.yml   .git               .gitignore         .scrutinizer.yml   .wordpress-org     assets             composer.json      i18n               node_modules       package.json       README.md          templates          vendor          \n.codecov.yml       .gitattributes     .idea              .stylelintrc       apigen             CHANGELOG.txt      composer.lock      includes           none               phpcs.xml          readme.txt         tests              woocommerce.php \n... 1\n... );\n=> [\n     1,\n   ]\n.\n\\Psy\\info()                                                                                                                                                                                                                                                                           => [\n     \"PsySH version\" => \"v0.8.17\",\n     \"PHP version\" => \"7.1.13-1+ubuntu17.10.1+deb.sury.org+1\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"error logging level\" => 32767,\n     \"config file\" => [\n       \"default config file\" => \"~/.config/psysh/config.php\",\n       \"local config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"updates\" => [\n       \"update available\" => false,\n       \"latest release version\" => \"v0.8.17\",\n       \"update check interval\" => \"weekly\",\n       \"update cache file\" => \"~/.config/psysh/update_check.json\",\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => true,\n       \"posix available\" => true,\n     ],\n     \"readline\" => [\n       \"readline available\" => true,\n       \"readline enabled\" => true,\n       \"readline service\" => \"Psy\\Readline\\Libedit\",\n       \"readline library\" => \"EditLine wrapper\",\n     ],\n     \"history\" => [\n       \"history file\" => \"~/.config/psysh/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => true,\n       \"custom matchers\" => [],\n       \"bracketed paste\" => false,\n     ],\n   ]\n```\n\n\n\nI have 'useBracketedPaste' => true in my config file but I see that bracketed paste is set to false in the \\Psy\\info(). Maybe this is related with the issue that I'm having? Thanks for looking into this.. Oh, php-readline installs libedit and not readline. I wasn't aware of the licensing issues between PHP and GNU readline. Thanks for your help.. ",
    "BardiaAfshin": "is there a way to do\nthis.class.methods - class.methods\nthe syntax is roughly it, something you can do with Ruby. To list all the class methods that are not standard and non inherirrited.\n. Also, here's the console output, after doing require_once('./vendor/autoload.php'), you can see there is no custom created classes there\n``` php\n\n\n\nls -l --classes \n\n\n\nClasses:\n  AppendIterator                                                  class AppendIterator extends IteratorIterator implements OuterIterator, Traversable, Iterat\n  ArrayIterator                                                   class ArrayIterator implements Iterator, Traversable, ArrayAccess, SeekableIterator, Serial\n  ArrayObject                                                     class ArrayObject implements IteratorAggregate, Traversable, ArrayAccess, Serializable, Cou\n  BadFunctionCallException                                        class BadFunctionCallException extends LogicException                                    \n  BadMethodCallException                                          class BadMethodCallException extends BadFunctionCallException                            \n  CachingIterator                                                 class CachingIterator extends IteratorIterator implements OuterIterator, Traversable, Itera\n  CallbackFilterIterator                                          class CallbackFilterIterator extends FilterIterator implements Iterator, Traversable, Outer\n  Closure                                                         final class Closure                                                                      \n  ComposerAutoloaderInit0ae67c86e232f8f8f05946cd624e44a9          class ComposerAutoloaderInit0ae67c86e232f8f8f05946cd624e44a9                             \n  ComposerAutoloaderInit9c748e8e60f2032aa216e172d05c0a88          class ComposerAutoloaderInit9c748e8e60f2032aa216e172d05c0a88                             \n  Composer\\Autoload\\ClassLoader                                   class Composer\\Autoload\\ClassLoader                                                      \n  CURLFile                                                        class CURLFile                                                                           \n  DateInterval                                                    class DateInterval                                                                       \n  DatePeriod                                                      class DatePeriod implements Traversable                                                  \n  DateTime                                                        class DateTime implements DateTimeInterface                                              \n  DateTimeImmutable                                               class DateTimeImmutable implements DateTimeInterface                                     \n  DateTimeZone                                                    class DateTimeZone                                                                       \n  Directory                                                       class Directory                                                                          \n  DirectoryIterator                                               class DirectoryIterator extends SplFileInfo implements Iterator, Traversable, SeekableItera\n  DomainException                                                 class DomainException extends LogicException                                             \n  DOMAttr                                                         class DOMAttr extends DOMNode                                                            \n  DOMCdataSection                                                 class DOMCdataSection extends DOMText                                                    \n  DOMCharacterData                                                class DOMCharacterData extends DOMNode                                                   \n  DOMComment                                                      class DOMComment extends DOMCharacterData                                                \n  DOMConfiguration                                                class DOMConfiguration                                                                   \n  DOMDocument                                                     class DOMDocument extends DOMNode                                                        \n  DOMDocumentFragment                                             class DOMDocumentFragment extends DOMNode                                                \n  DOMDocumentType                                                 class DOMDocumentType extends DOMNode                                                    \n  DOMDomError                                                     class DOMDomError                                                                        \n  DOMElement                                                      class DOMElement extends DOMNode                                                         \n  DOMEntity                                                       class DOMEntity extends DOMNode                                                          \n  DOMEntityReference                                              class DOMEntityReference extends DOMNode                                                 \n  DOMErrorHandler                                                 class DOMErrorHandler                                                                    \n  DOMException                                                    final class DOMException extends Exception                                               \n  DOMImplementation                                               class DOMImplementation                                                                  \n  DOMImplementationList                                           class DOMImplementationList                                                              \n  DOMImplementationSource                                         class DOMImplementationSource                                                            \n  DOMLocator                                                      class DOMLocator                                                                         \n  DOMNamedNodeMap                                                 class DOMNamedNodeMap implements Traversable                                             \n  DOMNameList                                                     class DOMNameList                                                                        \n  DOMNameSpaceNode                                                class DOMNameSpaceNode                                                                   \n  DOMNode                                                         class DOMNode                                                                            \n  DOMNodeList                                                     class DOMNodeList implements Traversable                                                 \n  DOMNotation                                                     class DOMNotation extends DOMNode                                                        \n  DOMProcessingInstruction                                        class DOMProcessingInstruction extends DOMNode                                           \n  DOMStringExtend                                                 class DOMStringExtend                                                                    \n  DOMStringList                                                   class DOMStringList                                                                      \n  DOMText                                                         class DOMText extends DOMCharacterData                                                   \n  DOMTypeinfo                                                     class DOMTypeinfo                                                                        \n  DOMUserDataHandler                                              class DOMUserDataHandler                                                                 \n  DOMXPath                                                        class DOMXPath                                                                           \n  EmptyIterator                                                   class EmptyIterator implements Iterator, Traversable                                     \n  ErrorException                                                  class ErrorException extends Exception                                                   \n  Exception                                                       class Exception                                                                          \n  FilesystemIterator                                              class FilesystemIterator extends DirectoryIterator implements SeekableIterator, Traversable\n  FilterIterator                                                  abstract class FilterIterator extends IteratorIterator implements OuterIterator, Traversabl\n  finfo                                                           class finfo                                                                              \n  Generator                                                       final class Generator implements Iterator, Traversable                                   \n  GlobIterator                                                    class GlobIterator extends FilesystemIterator implements Iterator, Traversable, SeekableIte\n  InfiniteIterator                                                class InfiniteIterator extends IteratorIterator implements OuterIterator, Traversable, Iter\n  InvalidArgumentException                                        class InvalidArgumentException extends LogicException                                    \n  IteratorIterator                                                class IteratorIterator implements Iterator, Traversable, OuterIterator                   \n  LengthException                                                 class LengthException extends LogicException                                             \n  LibXMLError                                                     class LibXMLError                                                                        \n  LimitIterator                                                   class LimitIterator extends IteratorIterator implements OuterIterator, Traversable, Iterato\n  LogicException                                                  class LogicException extends Exception                                                   \n  MultipleIterator                                                class MultipleIterator implements Iterator, Traversable                                  \n  mysqli                                                          class mysqli                                                                             \n  mysqli_driver                                                   final class mysqli_driver                                                                \n  mysqli_result                                                   class mysqli_result implements Traversable                                               \n  mysqli_sql_exception                                            final class mysqli_sql_exception extends RuntimeException                                \n  mysqli_stmt                                                     class mysqli_stmt                                                                        \n  mysqli_warning                                                  final protected class mysqli_warning                                                     \n  NoRewindIterator                                                class NoRewindIterator extends IteratorIterator implements OuterIterator, Traversable, Iter\n  OutOfBoundsException                                            class OutOfBoundsException extends RuntimeException                                      \n  OutOfRangeException                                             class OutOfRangeException extends LogicException                                         \n  OverflowException                                               class OverflowException extends RuntimeException                                         \n  ParentIterator                                                  class ParentIterator extends RecursiveFilterIterator implements RecursiveIterator, OuterIte\n  PDO                                                             class PDO                                                                                \n  PDOException                                                    class PDOException extends RuntimeException                                              \n  PDORow                                                          final class PDORow                                                                       \n  PDOStatement                                                    class PDOStatement implements Traversable                                                \n  Phar                                                            class Phar extends RecursiveDirectoryIterator implements RecursiveIterator, SeekableIterato\n  PharData                                                        class PharData extends RecursiveDirectoryIterator implements RecursiveIterator, SeekableIte\n  PharException                                                   class PharException extends Exception                                                    \n  PharFileInfo                                                    class PharFileInfo extends SplFileInfo                                                   \n  PhpParser\\Autoloader                                            class PhpParser\\Autoloader                                                               \n  PhpParser\\Error                                                 class PhpParser\\Error extends RuntimeException                                           \n  PhpParser\\Lexer                                                 class PhpParser\\Lexer                                                                    \n  PhpParser\\NodeAbstract                                          abstract class PhpParser\\NodeAbstract implements PhpParser\\Node                          \n  PhpParser\\NodeTraverser                                         class PhpParser\\NodeTraverser implements PhpParser\\NodeTraverserInterface                \n  PhpParser\\NodeVisitorAbstract                                   class PhpParser\\NodeVisitorAbstract implements PhpParser\\NodeVisitor                     \n  PhpParser\\Node\\Expr                                             abstract class PhpParser\\Node\\Expr extends PhpParser\\NodeAbstract implements PhpParser\\Node\n  PhpParser\\Node\\Expr\\Include_                                    class PhpParser\\Node\\Expr\\Include_ extends PhpParser\\Node\\Expr implements PhpParser\\Node \n  PhpParser\\Node\\Scalar                                           abstract class PhpParser\\Node\\Scalar extends PhpParser\\Node\\Expr implements PhpParser\\Node \n  phpparser\\node\\scalar\\string                                    class PhpParser\\Node\\Scalar\\String_ extends PhpParser\\Node\\Scalar implements PhpParser\\Node\n  PhpParser\\Node\\Scalar\\String_                                   class PhpParser\\Node\\Scalar\\String_ extends PhpParser\\Node\\Scalar implements PhpParser\\Node\n  PhpParser\\Node\\Stmt                                             abstract class PhpParser\\Node\\Stmt extends PhpParser\\NodeAbstract implements PhpParser\\Node\n  PhpParser\\Node\\Stmt\\Return_                                     class PhpParser\\Node\\Stmt\\Return_ extends PhpParser\\Node\\Stmt implements PhpParser\\Node  \n  PhpParser\\Parser                                                class PhpParser\\Parser extends PhpParser\\ParserAbstract                                  \n  PhpParser\\ParserAbstract                                        abstract class PhpParser\\ParserAbstract                                                  \n  PhpParser\\PrettyPrinterAbstract                                 abstract class PhpParser\\PrettyPrinterAbstract                                           \n  PhpParser\\PrettyPrinter\\Standard                                class PhpParser\\PrettyPrinter\\Standard extends PhpParser\\PrettyPrinterAbstract           \n  phpparser_autoloader                                            class PhpParser\\Autoloader                                                               \n  php_user_filter                                                 class php_user_filter                                                                    \n  Psy\\CodeCleaner                                                 class Psy\\CodeCleaner                                                                    \n  Psy\\CodeCleaner\\AbstractClassPass                               class Psy\\CodeCleaner\\AbstractClassPass extends Psy\\CodeCleaner\\CodeCleanerPass implements \n  Psy\\CodeCleaner\\AssignThisVariablePass                          class Psy\\CodeCleaner\\AssignThisVariablePass extends Psy\\CodeCleaner\\CodeCleanerPass implem\n  Psy\\CodeCleaner\\CalledClassPass                                 class Psy\\CodeCleaner\\CalledClassPass extends Psy\\CodeCleaner\\CodeCleanerPass implements Ph\n  Psy\\CodeCleaner\\CallTimePassByReferencePass                     class Psy\\CodeCleaner\\CallTimePassByReferencePass extends Psy\\CodeCleaner\\CodeCleanerPass i\n  Psy\\CodeCleaner\\CodeCleanerPass                                 abstract class Psy\\CodeCleaner\\CodeCleanerPass extends PhpParser\\NodeVisitorAbstract implem\n  Psy\\CodeCleaner\\FunctionReturnInWriteContextPass                class Psy\\CodeCleaner\\FunctionReturnInWriteContextPass extends Psy\\CodeCleaner\\CodeCleanerP\n  Psy\\CodeCleaner\\ImplicitReturnPass                              class Psy\\CodeCleaner\\ImplicitReturnPass extends Psy\\CodeCleaner\\CodeCleanerPass implements\n  Psy\\CodeCleaner\\InstanceOfPass                                  class Psy\\CodeCleaner\\InstanceOfPass extends Psy\\CodeCleaner\\CodeCleanerPass implements Php\n  Psy\\CodeCleaner\\LeavePsyshAlonePass                             class Psy\\CodeCleaner\\LeavePsyshAlonePass extends Psy\\CodeCleaner\\CodeCleanerPass implement\n  Psy\\CodeCleaner\\LegacyEmptyPass                                 class Psy\\CodeCleaner\\LegacyEmptyPass extends Psy\\CodeCleaner\\CodeCleanerPass implements Ph\n  Psy\\CodeCleaner\\MagicConstantsPass                              class Psy\\CodeCleaner\\MagicConstantsPass extends Psy\\CodeCleaner\\CodeCleanerPass implements\n  Psy\\CodeCleaner\\NamespaceAwarePass                              abstract class Psy\\CodeCleaner\\NamespaceAwarePass extends Psy\\CodeCleaner\\CodeCleanerPass i\n  Psy\\CodeCleaner\\NamespacePass                                   class Psy\\CodeCleaner\\NamespacePass extends Psy\\CodeCleaner\\CodeCleanerPass implements PhpP\n  Psy\\CodeCleaner\\StaticConstructorPass                           class Psy\\CodeCleaner\\StaticConstructorPass extends Psy\\CodeCleaner\\CodeCleanerPass impleme\n  Psy\\CodeCleaner\\UseStatementPass                                class Psy\\CodeCleaner\\UseStatementPass extends Psy\\CodeCleaner\\NamespaceAwarePass implement\n  Psy\\CodeCleaner\\ValidClassNamePass                              class Psy\\CodeCleaner\\ValidClassNamePass extends Psy\\CodeCleaner\\NamespaceAwarePass impleme\n  Psy\\CodeCleaner\\ValidConstantPass                               class Psy\\CodeCleaner\\ValidConstantPass extends Psy\\CodeCleaner\\NamespaceAwarePass implemen\n  Psy\\CodeCleaner\\ValidFunctionNamePass                           class Psy\\CodeCleaner\\ValidFunctionNamePass extends Psy\\CodeCleaner\\NamespaceAwarePass impl\n  Psy\\Command\\BufferCommand                                       class Psy\\Command\\BufferCommand extends Psy\\Command\\Command                              \n  Psy\\Command\\ClearCommand                                        class Psy\\Command\\ClearCommand extends Psy\\Command\\Command                               \n  Psy\\Command\\Command                                             abstract class Psy\\Command\\Command extends Symfony\\Component\\Console\\Command\\Command     \n  Psy\\Command\\DocCommand                                          class Psy\\Command\\DocCommand extends Psy\\Command\\ReflectingCommand implements Psy\\ContextAw\n  Psy\\Command\\DumpCommand                                         class Psy\\Command\\DumpCommand extends Psy\\Command\\ReflectingCommand implements Psy\\ContextA\n  Psy\\Command\\ExitCommand                                         class Psy\\Command\\ExitCommand extends Psy\\Command\\Command                                \n  Psy\\Command\\HelpCommand                                         class Psy\\Command\\HelpCommand extends Psy\\Command\\Command                                \n  Psy\\Command\\HistoryCommand                                      class Psy\\Command\\HistoryCommand extends Psy\\Command\\Command                             \n  Psy\\Command\\ListCommand                                         class Psy\\Command\\ListCommand extends Psy\\Command\\ReflectingCommand implements Psy\\ContextA\n  Psy\\Command\\ListCommand\\ClassConstantEnumerator                 class Psy\\Command\\ListCommand\\ClassConstantEnumerator extends Psy\\Command\\ListCommand\\Enume\n  Psy\\Command\\ListCommand\\ClassEnumerator                         class Psy\\Command\\ListCommand\\ClassEnumerator extends Psy\\Command\\ListCommand\\Enumerator \n  Psy\\Command\\ListCommand\\ConstantEnumerator                      class Psy\\Command\\ListCommand\\ConstantEnumerator extends Psy\\Command\\ListCommand\\Enumerator\n  Psy\\Command\\ListCommand\\Enumerator                              abstract class Psy\\Command\\ListCommand\\Enumerator                                        \n  Psy\\Command\\ListCommand\\FunctionEnumerator                      class Psy\\Command\\ListCommand\\FunctionEnumerator extends Psy\\Command\\ListCommand\\Enumerator\n  Psy\\Command\\ListCommand\\GlobalVariableEnumerator                class Psy\\Command\\ListCommand\\GlobalVariableEnumerator extends Psy\\Command\\ListCommand\\Enum\n  Psy\\Command\\ListCommand\\InterfaceEnumerator                     class Psy\\Command\\ListCommand\\InterfaceEnumerator extends Psy\\Command\\ListCommand\\Enumerato\n  Psy\\Command\\ListCommand\\MethodEnumerator                        class Psy\\Command\\ListCommand\\MethodEnumerator extends Psy\\Command\\ListCommand\\Enumerator\n  Psy\\Command\\ListCommand\\PropertyEnumerator                      class Psy\\Command\\ListCommand\\PropertyEnumerator extends Psy\\Command\\ListCommand\\Enumerator\n  Psy\\Command\\ListCommand\\TraitEnumerator                         class Psy\\Command\\ListCommand\\TraitEnumerator extends Psy\\Command\\ListCommand\\Enumerator \n  Psy\\Command\\ListCommand\\VariableEnumerator                      class Psy\\Command\\ListCommand\\VariableEnumerator extends Psy\\Command\\ListCommand\\Enumerator\n  Psy\\Command\\ReflectingCommand                                   abstract class Psy\\Command\\ReflectingCommand extends Psy\\Command\\Command implements Psy\\Con\n  Psy\\Command\\ShowCommand                                         class Psy\\Command\\ShowCommand extends Psy\\Command\\ReflectingCommand implements Psy\\ContextA\n  Psy\\Command\\ThrowUpCommand                                      class Psy\\Command\\ThrowUpCommand extends Psy\\Command\\Command implements Psy\\ContextAware \n  Psy\\Command\\TraceCommand                                        class Psy\\Command\\TraceCommand extends Psy\\Command\\Command                               \n  Psy\\Command\\WhereamiCommand                                     class Psy\\Command\\WhereamiCommand extends Psy\\Command\\Command                            \n  Psy\\Command\\WtfCommand                                          class Psy\\Command\\WtfCommand extends Psy\\Command\\TraceCommand implements Psy\\ContextAware\n  Psy\\Configuration                                               class Psy\\Configuration                                                                  \n  Psy\\Context                                                     class Psy\\Context                                                                        \n  Psy\\Exception\\ErrorException                                    class Psy\\Exception\\ErrorException extends ErrorException implements Psy\\Exception\\Exceptio\n  Psy\\Exception\\ParseErrorException                               class Psy\\Exception\\ParseErrorException extends PhpParser\\Error implements Psy\\Exception\\Ex\n  Psy\\Exception\\RuntimeException                                  class Psy\\Exception\\RuntimeException extends RuntimeException implements Psy\\Exception\\Exce\n  Psy\\ExecutionLoop\\ForkingLoop                                   class Psy\\ExecutionLoop\\ForkingLoop extends Psy\\ExecutionLoop\\Loop                       \n  Psy\\ExecutionLoop\\Loop                                          class Psy\\ExecutionLoop\\Loop                                                             \n  Psy\\Output\\ProcOutputPager                                      class Psy\\Output\\ProcOutputPager extends Symfony\\Component\\Console\\Output\\StreamOutput impl\n  Psy\\Output\\ShellOutput                                          class Psy\\Output\\ShellOutput extends Symfony\\Component\\Console\\Output\\ConsoleOutput impleme\n  Psy\\Readline\\GNUReadline                                        class Psy\\Readline\\GNUReadline implements Psy\\Readline\\Readline                          \n  Psy\\Readline\\Libedit                                            class Psy\\Readline\\Libedit extends Psy\\Readline\\GNUReadline implements Psy\\Readline\\Readlin\n  Psy\\Shell                                                       class Psy\\Shell extends Symfony\\Component\\Console\\Application                            \n  Psy\\TabCompletion\\AutoCompleter                                 class Psy\\TabCompletion\\AutoCompleter                                                    \n  Psy\\TabCompletion\\Matcher\\AbstractContextAwareMatcher           abstract class Psy\\TabCompletion\\Matcher\\AbstractContextAwareMatcher extends Psy\\TabComplet\n  Psy\\TabCompletion\\Matcher\\AbstractMatcher                       abstract class Psy\\TabCompletion\\Matcher\\AbstractMatcher                                 \n  Psy\\TabCompletion\\Matcher\\ClassAttributesMatcher                class Psy\\TabCompletion\\Matcher\\ClassAttributesMatcher extends Psy\\TabCompletion\\Matcher\\Ab\n  Psy\\TabCompletion\\Matcher\\ClassMethodsMatcher                   class Psy\\TabCompletion\\Matcher\\ClassMethodsMatcher extends Psy\\TabCompletion\\Matcher\\Abstr\n  Psy\\TabCompletion\\Matcher\\ClassNamesMatcher                     class Psy\\TabCompletion\\Matcher\\ClassNamesMatcher extends Psy\\TabCompletion\\Matcher\\Abstrac\n  Psy\\TabCompletion\\Matcher\\CommandsMatcher                       class Psy\\TabCompletion\\Matcher\\CommandsMatcher extends Psy\\TabCompletion\\Matcher\\AbstractM\n  Psy\\TabCompletion\\Matcher\\ConstantsMatcher                      class Psy\\TabCompletion\\Matcher\\ConstantsMatcher extends Psy\\TabCompletion\\Matcher\\Abstract\n  Psy\\TabCompletion\\Matcher\\FunctionsMatcher                      class Psy\\TabCompletion\\Matcher\\FunctionsMatcher extends Psy\\TabCompletion\\Matcher\\Abstract\n  Psy\\TabCompletion\\Matcher\\KeywordsMatcher                       class Psy\\TabCompletion\\Matcher\\KeywordsMatcher extends Psy\\TabCompletion\\Matcher\\AbstractM\n  Psy\\TabCompletion\\Matcher\\ObjectAttributesMatcher               class Psy\\TabCompletion\\Matcher\\ObjectAttributesMatcher extends Psy\\TabCompletion\\Matcher\\A\n  Psy\\TabCompletion\\Matcher\\ObjectMethodsMatcher                  class Psy\\TabCompletion\\Matcher\\ObjectMethodsMatcher extends Psy\\TabCompletion\\Matcher\\Abst\n  Psy\\TabCompletion\\Matcher\\VariablesMatcher                      class Psy\\TabCompletion\\Matcher\\VariablesMatcher extends Psy\\TabCompletion\\Matcher\\Abstract\n  Psy\\VarDumper\\Cloner                                            class Psy\\VarDumper\\Cloner extends Symfony\\Component\\VarDumper\\Cloner\\VarCloner implements \n  Psy\\VarDumper\\Dumper                                            class Psy\\VarDumper\\Dumper extends Symfony\\Component\\VarDumper\\Dumper\\CliDumper implements \n  Psy\\VarDumper\\Presenter                                         class Psy\\VarDumper\\Presenter                                                            \n  RangeException                                                  class RangeException extends RuntimeException                                            \n  RecursiveArrayIterator                                          class RecursiveArrayIterator extends ArrayIterator implements Countable, Serializable, Seek\n  RecursiveCachingIterator                                        class RecursiveCachingIterator extends CachingIterator implements Countable, ArrayAccess, I\n  RecursiveCallbackFilterIterator                                 class RecursiveCallbackFilterIterator extends CallbackFilterIterator implements OuterIterat\n  RecursiveDirectoryIterator                                      class RecursiveDirectoryIterator extends FilesystemIterator implements Iterator, Traversabl\n  RecursiveFilterIterator                                         abstract class RecursiveFilterIterator extends FilterIterator implements Iterator, Traversa\n  RecursiveIteratorIterator                                       class RecursiveIteratorIterator implements Iterator, Traversable, OuterIterator          \n  RecursiveRegexIterator                                          class RecursiveRegexIterator extends RegexIterator implements OuterIterator, Traversable, I\n  RecursiveTreeIterator                                           class RecursiveTreeIterator extends RecursiveIteratorIterator implements OuterIterator, Tra\n  Reflection                                                      class Reflection                                                                         \n  ReflectionClass                                                 class ReflectionClass implements Reflector                                               \n  ReflectionException                                             class ReflectionException extends Exception                                              \n  ReflectionExtension                                             class ReflectionExtension implements Reflector                                           \n  ReflectionFunction                                              class ReflectionFunction extends ReflectionFunctionAbstract implements Reflector         \n  ReflectionFunctionAbstract                                      abstract class ReflectionFunctionAbstract implements Reflector                           \n  ReflectionMethod                                                class ReflectionMethod extends ReflectionFunctionAbstract implements Reflector           \n  ReflectionObject                                                class ReflectionObject extends ReflectionClass implements Reflector                      \n  ReflectionParameter                                             class ReflectionParameter implements Reflector                                           \n  ReflectionProperty                                              class ReflectionProperty implements Reflector                                            \n  ReflectionZendExtension                                         class ReflectionZendExtension implements Reflector                                       \n  RegexIterator                                                   class RegexIterator extends FilterIterator implements Iterator, Traversable, OuterIterator \n  RuntimeException                                                class RuntimeException extends Exception                                                 \n  SessionHandler                                                  class SessionHandler implements SessionHandlerInterface, SessionIdInterface              \n  SimpleXMLElement                                                class SimpleXMLElement implements Traversable                                            \n  SimpleXMLIterator                                               class SimpleXMLIterator extends SimpleXMLElement implements Traversable, RecursiveIterator,\n  SoapClient                                                      class SoapClient                                                                         \n  SoapFault                                                       class SoapFault extends Exception                                                        \n  SoapHeader                                                      class SoapHeader                                                                         \n  SoapParam                                                       class SoapParam                                                                          \n  SoapServer                                                      class SoapServer                                                                         \n  SoapVar                                                         class SoapVar                                                                            \n  SplDoublyLinkedList                                             class SplDoublyLinkedList implements Iterator, Traversable, Countable, ArrayAccess, Seriali\n  SplFileInfo                                                     class SplFileInfo                                                                        \n  SplFileObject                                                   class SplFileObject extends SplFileInfo implements RecursiveIterator, Traversable, Iterator\n  SplFixedArray                                                   class SplFixedArray implements Iterator, Traversable, ArrayAccess, Countable             \n  SplHeap                                                         abstract class SplHeap implements Iterator, Traversable, Countable                       \n  SplMaxHeap                                                      class SplMaxHeap extends SplHeap implements Countable, Traversable, Iterator             \n  SplMinHeap                                                      class SplMinHeap extends SplHeap implements Countable, Traversable, Iterator             \n  SplObjectStorage                                                class SplObjectStorage implements Countable, Iterator, Traversable, Serializable, ArrayAcce\n  SplPriorityQueue                                                class SplPriorityQueue implements Iterator, Traversable, Countable                       \n  SplQueue                                                        class SplQueue extends SplDoublyLinkedList implements Serializable, ArrayAccess, Countable,\n  SplStack                                                        class SplStack extends SplDoublyLinkedList implements Serializable, ArrayAccess, Countable,\n  SplTempFileObject                                               class SplTempFileObject extends SplFileObject implements SeekableIterator, Iterator, Traver\n  SQLite3                                                         class SQLite3                                                                            \n  SQLite3Result                                                   class SQLite3Result                                                                      \n  SQLite3Stmt                                                     class SQLite3Stmt                                                                        \n  stdClass                                                        class stdClass                                                                           \n  Symfony\\Component\\Console\\Application                           class Symfony\\Component\\Console\\Application                                              \n  Symfony\\Component\\Console\\Command\\Command                       class Symfony\\Component\\Console\\Command\\Command                                          \n  Symfony\\Component\\Console\\Formatter\\OutputFormatter             class Symfony\\Component\\Console\\Formatter\\OutputFormatter implements Symfony\\Component\\Cons\n  Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle        class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle implements Symfony\\Component\n  Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack   class Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack                      \n  Symfony\\Component\\Console\\Helper\\DebugFormatterHelper           class Symfony\\Component\\Console\\Helper\\DebugFormatterHelper extends Symfony\\Component\\Conso\n  Symfony\\Component\\Console\\Helper\\DialogHelper                   class Symfony\\Component\\Console\\Helper\\DialogHelper extends Symfony\\Component\\Console\\Helpe\n  Symfony\\Component\\Console\\Helper\\FormatterHelper                class Symfony\\Component\\Console\\Helper\\FormatterHelper extends Symfony\\Component\\Console\\He\n  Symfony\\Component\\Console\\Helper\\Helper                         abstract class Symfony\\Component\\Console\\Helper\\Helper implements Symfony\\Component\\Console\n  Symfony\\Component\\Console\\Helper\\HelperSet                      class Symfony\\Component\\Console\\Helper\\HelperSet implements IteratorAggregate, Traversable \n  Symfony\\Component\\Console\\Helper\\InputAwareHelper               abstract class Symfony\\Component\\Console\\Helper\\InputAwareHelper extends Symfony\\Component\\\n  Symfony\\Component\\Console\\Helper\\ProcessHelper                  class Symfony\\Component\\Console\\Helper\\ProcessHelper extends Symfony\\Component\\Console\\Help\n  Symfony\\Component\\Console\\Helper\\ProgressHelper                 class Symfony\\Component\\Console\\Helper\\ProgressHelper extends Symfony\\Component\\Console\\Hel\n  Symfony\\Component\\Console\\Helper\\QuestionHelper                 class Symfony\\Component\\Console\\Helper\\QuestionHelper extends Symfony\\Component\\Console\\Hel\n  Symfony\\Component\\Console\\Helper\\Table                          class Symfony\\Component\\Console\\Helper\\Table                                             \n  Symfony\\Component\\Console\\Helper\\TableHelper                    class Symfony\\Component\\Console\\Helper\\TableHelper extends Symfony\\Component\\Console\\Helper\n  Symfony\\Component\\Console\\Helper\\TableStyle                     class Symfony\\Component\\Console\\Helper\\TableStyle                                        \n  Symfony\\Component\\Console\\Input\\ArgvInput                       class Symfony\\Component\\Console\\Input\\ArgvInput extends Symfony\\Component\\Console\\Input\\Inp\n  Symfony\\Component\\Console\\Input\\Input                           abstract class Symfony\\Component\\Console\\Input\\Input implements Symfony\\Component\\Console\\I\n  Symfony\\Component\\Console\\Input\\InputArgument                   class Symfony\\Component\\Console\\Input\\InputArgument                                      \n  Symfony\\Component\\Console\\Input\\InputDefinition                 class Symfony\\Component\\Console\\Input\\InputDefinition                                    \n  Symfony\\Component\\Console\\Input\\InputOption                     class Symfony\\Component\\Console\\Input\\InputOption                                        \n  Symfony\\Component\\Console\\Input\\StringInput                     class Symfony\\Component\\Console\\Input\\StringInput extends Symfony\\Component\\Console\\Input\\A\n  Symfony\\Component\\Console\\Output\\ConsoleOutput                  class Symfony\\Component\\Console\\Output\\ConsoleOutput extends Symfony\\Component\\Console\\Outp\n  Symfony\\Component\\Console\\Output\\NullOutput                     class Symfony\\Component\\Console\\Output\\NullOutput implements Symfony\\Component\\Console\\Outp\n  Symfony\\Component\\Console\\Output\\Output                         abstract class Symfony\\Component\\Console\\Output\\Output implements Symfony\\Component\\Console\n  Symfony\\Component\\Console\\Output\\StreamOutput                   class Symfony\\Component\\Console\\Output\\StreamOutput extends Symfony\\Component\\Console\\Outpu\n  Symfony\\Component\\VarDumper\\Caster\\Caster                       class Symfony\\Component\\VarDumper\\Caster\\Caster                                          \n  Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner               abstract class Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner implements Symfony\\Compone\n  Symfony\\Component\\VarDumper\\Cloner\\Cursor                       class Symfony\\Component\\VarDumper\\Cloner\\Cursor                                          \n  Symfony\\Component\\VarDumper\\Cloner\\Data                         class Symfony\\Component\\VarDumper\\Cloner\\Data                                            \n  Symfony\\Component\\VarDumper\\Cloner\\Stub                         class Symfony\\Component\\VarDumper\\Cloner\\Stub                                            \n  Symfony\\Component\\VarDumper\\Cloner\\VarCloner                    class Symfony\\Component\\VarDumper\\Cloner\\VarCloner extends Symfony\\Component\\VarDumper\\Clon\n  Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper               abstract class Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper implements Symfony\\Compone\n  Symfony\\Component\\VarDumper\\Dumper\\CliDumper                    class Symfony\\Component\\VarDumper\\Dumper\\CliDumper extends Symfony\\Component\\VarDumper\\Dump\n  UnderflowException                                              class UnderflowException extends RuntimeException                                        \n  UnexpectedValueException                                        class UnexpectedValueException extends RuntimeException                                  \n  XdgBaseDir\\Xdg                                                  class XdgBaseDir\\Xdg                                                                     \n  XMLReader                                                       class XMLReader                                                                          \n  XMLWriter                                                       class XMLWriter                                                                          \n  XSLTProcessor                                                   class XSLTProcessor                                                                      \n  ZipArchive                                                      class ZipArchive                                                                         \n  __PHP_Incomplete_Class                                          class __PHP_Incomplete_Class                                                               \n\n\n\n^D\n```\n. Do note, I've installed psysh globally, and I'm attempting to use it against a local project. Is that an issue?\n. \n\n\n",
    "elnoro": "Thanks. Took a look into documentation before posting this, still missed somehow.\n. ",
    "dawehner": "Really nice!\n. Could we convert it to a command instead first? I guess this is not possible?\n. ",
    "yangxikun": "The output from \\Psy\\info:\n``` php\nPsy Shell v0.5.2 (PHP 5.6.15 \u2014 cli) by Justin Hileman\n\n\n\n\\Psy\\info()\n=> [\n     \"PsySH version\" => \"v0.5.2\",\n     \"PHP version\" => \"5.6.15\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"config file\" => [\n       \"default config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => true,\n       \"posix available\" => true,\n     ],\n     \"readline\" => [\n       \"readline available\" => true,\n       \"readline enabled\" => true,\n       \"readline service\" => \"Psy\\Readline\\GNUReadline\",\n       \"readline library\" => \"6.2\",\n       \"readline name\" => \"other\",\n     ],\n     \"history\" => [\n       \"history file\" => \"/home/rokety/.config/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => true,\n       \"custom matchers\" => [],\n     ],\n   ]\nfollow by the warning message\u2026\u2026\n```\n\n\n\nMy system is CentOS Linux release 7.1.1503 (Core)\nPHP compile parameters:\nphp\n./configure --prefix=/home/rokety/software/php --enable-fpm --enable-gcov --enable-debug --enable-sigchild --with-openssl --with-libxml-dir --with-zlib --enable-bcmath --enable-calendar --with-curl --with-libxml-dir --with-enchant --enable-exif --with-gd --enable-gd-native-ttf --enable-gd-jis-conv --with-jpeg-dir --with-png-dir --with-freetype-dir --with-gettext --with-gmp --with-mhash --enable-intl --enable-mbstring --with-mcrypt --enable-pcntl --enable-opcache --with-pdo-mysql --enable-sockets --enable-sysvmsg --enable-sysvsem --enable-sysvshm --with-iconv-dir --enable-mysqlnd --with-pear --with-readline --enable-zip\n. ~ \u00bb ulimit -a                                                                                                                   rokety@localhost\n-t: cpu time (seconds)              unlimited\n-f: file size (blocks)              unlimited\n-d: data seg size (kbytes)          unlimited\n-s: stack size (kbytes)             8192\n-c: core file size (blocks)         0\n-m: resident set size (kbytes)      unlimited\n-u: processes                       3849\n-n: file descriptors                1024\n-l: locked-in-memory size (kbytes)  64\n-v: address space (kbytes)          unlimited\n-x: file locks                      unlimited\n-i: pending signals                 3849\n-q: bytes in POSIX msg queues       819200\n-e: max nice                        0\n-r: max rt priority                 0\n-N 15:                              unlimited\n. Now I use PHP 7.0.22-0ubuntu0.17.04.1 \u2014 cli, PsySH works fine.. ",
    "antonmedv": "Go this too:\nErrorException with message 'Warning: stream_select(): unable to select [4]: Interrupted system call (max_fd=16). ",
    "miraage": "Looks like it's PHP related error because php -a gives same.\n. ",
    "msheakoski": "I noticed that for PHP 5.x on Ubuntu, the php5-readline package is installed by default, but PHP 7 (via ppa:ondrej/php-7.0) does not install it. sudo apt-get install php7.0-readline fixed it for me. After that, it was no longer necessary to use rlwrap.\n. Thank you for the fix! The change is live as of commit 86681ae and release v0.8.16. This issue can now be closed.. ",
    "tom--": "Tekspacular! Thank you.\n. ",
    "kbirmhrjn": "yeah, your solution fixed it. ;)\n. ",
    "we138": "I install composer only for psysh.But yesterday I find solution, thank you :)\n. ",
    "CodeBrauer": "Oh didn't see that. Maybe I had an outdated version, Thanks!\n. ",
    "dereckson": "Rebasing against develop, not master.\n. Closed in favour of #284, rebased against develop.\n. https://raw.githubusercontent.com/bobthecow/psysh/gh-pages/psysh still contains the 0.7.2 version\n. ",
    "ReadmeCritic": "Sweet \n. ",
    "passcod": "Well, this doesn't work. I've tried all the various standard ways of passing env to a program, and none work. But deeper than that, the $_ENV is always [], which means that none of the environment is passing through. My environment has about two dozen variables in it by default, and none of them are getting through? Not surprising trying to set extra ones doesn't work, then.\nSo I experimented a bit:\n``` php\n!/usr/bin/env php\n<?php var_dump($_ENV);\n```\nPut that in a file, make it executable\u2026 no environment gets through! Hence, this is not a Psysh problem, it's a PHP problem. For the sake of record, PHP versions:\nPHP 7.0.10 (cli) (built: Aug 21 2016 07:35:18) ( NTS )\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies\nInterestingly, though, using getenv() works! So it's just $_ENV not getting populated. And what does the manual say about $_ENV? Not much, except for the first comment:\n\nIf your $_ENV array is mysteriously empty, but you still see the variables when calling getenv() or in your phpinfo(), check your http://us.php.net/manual/en/ini.core.php#ini.variables-order ini setting to ensure it includes \"E\" in the string.\n\nOh dear! Seems it is, after all, not a Psysh problem, not a PHP problem, but a configuration problem. And when you're fishing for your php.ini to correct this, remember some installations have a separate config for the CLI\u2026\n. ",
    "condy0919": "thanks a lot :+1: \n. ",
    "vstepanyuk": "@GrahamCampbell \n```\n~ \u276f\u276f\u276f php -a\nInteractive shell\nphp > echo 0;\n0\nphp >\n```\n. http://php.net/empty\n\"\" (an empty string)\n0 (0 as an integer)\n0.0 (0 as a float)\n\"0\" (0 as a string)\nNULL\nFALSE\narray() (an empty array)\n$var; (a variable declared, but without a value)\n. it's also:)\nphp > var_dump(empty('0'));\nbool(true)\nphp > var_dump(empty('\\0'));\nbool(false)\n. ah.. understand what you mean\n. but I think php tries to cast to int, I don't understand why\n. lol. true)\n. exactly\n. Thx. Nice repl anyway\n. ",
    "captn3m0": "That's a nice hack for git.io! :+1: \n. ",
    "upvas": "@bobthecow, you are welcome! \nI think it's not important that it can't autocomplete on instantiation time, just wanted to let you know about a notice. =)\nThank you for your work!\n. Thank you, I have updated psysh and it's alright now\n. ",
    "nkmathew": "The backgrounds for the error messages are quite glaring. Wouldn't mind just having simply a bold red foreground for errors.\n\n. ",
    "skuzye": "I worked, thanks!\n. ",
    "ejzhang": "I was enabled extension=php_mbstring.dll in php.ini.\n. It's still gibberish after chcp 65001, but it back to normal when scroll.\n\n. Sorry! It's problem of Windows.\n. ",
    "zonuexe": "I made zonuexe/psysh-hoa-console package.\nI hope to shrink the package by this pull-request is merged.\n. @bobthecow @Hywan \nThank you for your review! \n. hmm...\n\n. Certainly mb_strlen() is appropriate than strlen(), but it seems there is no effect on our face problems.\n\n. @Hywan \nI'm using Terminal.app (2.6.1, El Capitan) and iTerm2 (Build 3.0.20160607-nightly).\nBoth seem to have same behavior.\n. \ud83d\ude47 . @bobthecow  Fixed target branch.. See http://psysh.org/#user-local-config-files \nYou can write code to explore and load .user.ini on ~/.config/psysh/config.php.. @CMCDragonkai \nPerhaps the following code will recursively search .user.ini:\n```php\n// Add to follows code in your own ~/.config/psysh/config.php or C:\\Users{USER}\\AppData\\Roaming\\PsySH\\config.php\n/* @return string|false /\n$search_user_ini = function ($dir) use (&$search_user_ini) {\n    $dir =  rtrim($dir, DIRECTORY_SEPARATOR);\n    if (is_dir($dir)) {\n        $ini_file_name = $dir . DIRECTORY_SEPARATOR . '.user.ini';\n    if (is_file($ini_file_name)) {\n        return $ini_file_name;\n    }\n\n    $parent_dir = pathinfo($dir, PATHINFO_DIRNAME);\n\n    if ($dir === $parent_dir) {\n        return false;\n    }\n\n    return $search_user_ini($parent_dir);\n}\n\nreturn false;\n\n};\n$ini_path = $search_user_ini(getcwd());\nif ($ini_path !== false) {\n    $conf = parse_ini_file($ini_path);\n    // ...\n}\n```. That's right.  Since it is difficult to process all expressions, we have dealt with only binary operations that are realistic use cases.\nBut your idea is smarter and far more rational.. @bobthecow Thanks for reviewing!\nI implemented as your suggested.  But, method name is exit_() because keyword is invalid method name in PHP5.. Thanks!. @bobthecow OK, fixed.. That sounds good.  It is wonderful to add an interface to PsySH to work with such an IDE.\nSpyder IDE looks like a good product, but I do not know if it is a polyglot.. I am not familiar with PhpStorm/IntelliJ IDEA, so I do not know.\nPhpStorm plug-in that integrates  and PsySH does not yet exist, so it would be great if it was released.. I think it is unexpected that goto causes a fatal error.  I will submit PR.. @bobthecow \nThank you for reviewing!  I removed handling about Label from this PR.\nI will send about this as another PR.. I also made a mistake in choosing the merge base. Thank you!. @peterchaula It is missing line terminator ;\n```\n % psysh\nPsy Shell v0.8.17 (PHP 7.1.14 \u2014 cli) by Justin Hileman\n\n\n\neval('echo 1/2;')\n0.5\u23ce\n=> null\n```\n\n\n\nThis behavior is consistent with the usual PHP evaluation.\n```\n% php -r \"eval('echo 1/2;');\"\n0.5\n% php -r \"eval('echo 1/2');\"\nPHP Parse error:  syntax error, unexpected end of file, expecting ',' or ';' in Command line code(1) : eval()'d code on line 1\nParse error: syntax error, unexpected end of file, expecting ',' or ';' in Command line code(1) : eval()'d code on line 1\n``\n. > Also, I couldn't getAssignments can only happen to writable values` to trigger at all. It looks like you have that error message in the test case, but it's unused. What is it guarding against?\nAs you said I overlooked the test for this case.\nFollowing code causes this error in PHP 7.1+: https://3v4l.org/rNFB0\nphp\n<?php [\"a\"] = [1];\n. This dependency is added for to support PHP 5.3 and 5.4.\nhttps://travis-ci.org/bobthecow/psysh/builds/122592026\n. The following code also did not have effect which I imagined.\nphp\n        $current_line = $this->hoaReadline->getLine();\n        Cursor::clear('all');\n        //Cursor::moveTo(0, 0);\n        echo $this->lastPrompt, $current_line;\n        Cursor::moveTo(strlen($this->lastPrompt) + strlen($current_line) + 1, 0);\n. Fixed.. Fixed.. I'm sorry... \ud83d\ude22 . Sorry.  I removed it.. ",
    "Hywan": "Hello \ud83d\ude03,\nI am glad to see this PR! Several people asked for a Hoa\\Console integration inside PsySH. Goals are numerous. Hoa\\Console is not only a \u201cpure readline implementation\u201d as the description given in this PR suggests, but it is based on terminfo/tput, which makes it interoperable with most of the platforms out there. And regarding readline features, the autocomplete API is powerful and some default autocompleters are already present, like a Word or Path.\n\nI know some people have developed a shell with Hoa\\Console\\Readline (like https://github.com/jubianchi/atoum-shell cc @jubianchi) if they can help!\n. @bobthecow I have no idea. I don't know how PsySH works. Maybe @zonuexe can give a try. What actually works so far? Is this PR provide readline support with Hoa\\Console already?\n. @bobthecow It's left to @zonuexe to decide whether she/he would like to implement autocompleter too. They are based on the readline though.\n. You have to reposition the cursor too. Don't know why it changes its position though.\n. What terminal are you using?\n. What would you like?\n. Why ~1.14?\n. @zonuexe, @bobthecow Actually this is possible to do that. What is the goal of this method exactly?\n. @zonuexe @bobthecow We can add a getWholeHistory-like method if needed. Thoughts?\n. We can still clear the line (Hoa\\Console\\Cursor::clear('\u2194')) and print it again. cc @zonuexe \n. Maybe add a Cursor::moveTo(0, 0) here?\n. You should use mb_strlen in case of UTF-8 (assuming the terminal supports UTF-8).\nWhat happened?\n. ",
    "jubianchi": "this is really great! feel free to ping me for any help.\n. ",
    "jeteon": "It sounds like you might be looking for something like https://github.com/xrgtn/nullfs to use as the data directory. I'm not sure whether or not it would interfere with Psysh's functionality if it couldn't reliably retrieve stuff it stored though.. Thought I was the only one who'd come across this. It made me stop using base64_decode in the REPL when I didn't know for sure the output was printable ASCII.  I guess somewhere along the way the commands are parsed in the context of the REPL and break the interpreter? \nIt would be interesting to see where this is happening. I guess it would also require me to take a peek behind the blinds to see the magic at work. There's a related issue I run into sporadically where tab completion will work on a fresh invocation and then stop later. It really bugs me since this is a pretty valuable part of the REPL for me but I don't have a POC yet.. ",
    "ReenExe": "See this package in laravel and what delete some redundane else\n. Something wrong in this checks - i make changes in one files and StyleCI show other AutoCompleter.\nSo i retry, add link, and close this PR\n. Retry https://github.com/bobthecow/psysh/pull/304\n. Sorry, make branch from master\n. ",
    "nikoskip": "I installed it using Brew.\n\n. Thanks, I will try with Composer.\n. When I tried to install Composer, it complained about the detect_unicode setting:\n\nSo, I set it to Off and now I can execute PsySH but I'm getting a syntax error. It's complaining about the array syntax.\n```\nPHP Parse error:  syntax error, unexpected '[', expecting ')' in phar:///usr/local/bin/psysh/build-vendor/nikic/php-parser/lib/PhpParser/ParserFactory.php on line 26\nPHP Stack trace:\nPHP   1. {main}() /usr/local/bin/psysh:0\nPHP   2. call_user_func:{/usr/local/bin/psysh:141}() /usr/local/bin/psysh:141\nPHP   3. Psy{closure}() /usr/local/bin/psysh:141\nPHP   4. Psy\\Shell->__construct() phar:///usr/local/bin/psysh/src/Psy/functions.php:169\nPHP   5. Psy\\Configuration->getCodeCleaner() phar:///usr/local/bin/psysh/src/Psy/Shell.php:74\nPHP   6. Psy\\CodeCleaner->__construct() phar:///usr/local/bin/psysh/src/Psy/Configuration.php:692\nPHP   7. Psy\\ParserFactory->createParser() phar:///usr/local/bin/psysh/src/Psy/CodeCleaner.php:59\nPHP   8. Psy\\ParserFactory->hasKindsSupport() phar:///usr/local/bin/psysh/src/Psy/ParserFactory.php:71\nPHP   9. class_exists() phar:///usr/local/bin/psysh/src/Psy/ParserFactory.php:47\nPHP  10. Composer\\Autoload\\ClassLoader->loadClass() phar:///usr/local/bin/psysh/src/Psy/ParserFactory.php:47\nPHP  11. Composer\\Autoload\\includeFile() phar:///usr/local/bin/psysh/build-vendor/composer/ClassLoader.php:301\nParse error: syntax error, unexpected '[', expecting ')' in phar:///usr/local/bin/psysh/build-vendor/nikic/php-parser/lib/PhpParser/ParserFactory.php on line 26\nCall Stack:\n    0.0079     669880   1. {main}() /usr/local/bin/psysh:0\n    0.0158    2055128   2. call_user_func:{/usr/local/bin/psysh:141}() /usr/local/bin/psysh:141\n    0.0158    2055128   3. Psy{closure}() /usr/local/bin/psysh:141\n    0.0201    2903208   4. Psy\\Shell->__construct() phar:///usr/local/bin/psysh/src/Psy/functions.php:169\n    0.0201    2903256   5. Psy\\Configuration->getCodeCleaner() phar:///usr/local/bin/psysh/src/Psy/Shell.php:74\n    0.0206    2961792   6. Psy\\CodeCleaner->__construct() phar:///usr/local/bin/psysh/src/Psy/Configuration.php:692\n    0.0209    2984880   7. Psy\\ParserFactory->createParser() phar:///usr/local/bin/psysh/src/Psy/CodeCleaner.php:59\n    0.0209    2984928   8. Psy\\ParserFactory->hasKindsSupport() phar:///usr/local/bin/psysh/src/Psy/ParserFactory.php:71\n    0.0209    2985064   9. class_exists() phar:///usr/local/bin/psysh/src/Psy/ParserFactory.php:47\n    0.0209    2985424  10. Composer\\Autoload\\ClassLoader->loadClass() phar:///usr/local/bin/psysh/src/Psy/ParserFactory.php:47\n    0.0209    2985424  11. Composer\\Autoload\\includeFile() phar:///usr/local/bin/psysh/build-vendor/composer/ClassLoader.php:301\n```\n. @DaGhostman yes it's a problem with the array short array syntax. I will try with php-parser version 1, it seems that it's coded for running in PHP 5.3 >=.\n. So, I modified the php-parser dependency on the composer.json file to use version 1 and now is working.\n. I really would like to work on a newer version on this project, but I can't. But don't worry, it's not critical. I'm glad to report and help improving this tool.\n. ",
    "DaGhostman": "@nikoakip that seems to be a problem with PHP 5.3, short array syntax is available in 5.4+.\nI think this should be added as requirement in composer, @bobthecow thoughts?\n. ",
    "MazeChaZer": "Thanks!\n. ",
    "N-Molham": "Yep exactly ... here is the output of Psy\\info()\n```\nPsy Shell v0.7.2 (PHP 5.5.9-1ubuntu4.17 \u2014 cli) by Justin Hileman\n\n\n\nPsy\\info()\n=> [\n     \"PsySH version\" => \"v0.7.2\",\n     \"PHP version\" => \"5.5.9-1ubuntu4.17\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"error logging level\" => 32767,\n     \"config file\" => [\n       \"default config file\" => null,\n       \"local config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => true,\n       \"posix available\" => true,\n     ],\n     \"readline\" => [\n       \"readline available\" => false,\n     ],\n     \"history\" => [\n       \"history file\" => \"/home/nabeel/.config/psysh/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => false,\n       \"custom matchers\" => [],\n     ],\n   ]\n``\n. Worked like a charm ... thanks @bobthecow but it wasphp5-readline`\n. \n\n\n",
    "eeree": "It's just an initial commit. What have to be done:\n- configuration options have to be applied\n- some temporary storage for last check time\n- self-update\n- --version update method\n- move from factory to DiC (needs to be applied in a whole project)\n. Sure thing. I will do the rebase tomorrow then, as it's almost 1 am here.\n. @bobthecow Damn, you're right. I didn't think about it at the moment of writing the change as I've been focused on empty line. What's your advice?\n. Hmmm... what about introducing the check by interval? Check once per week by default (configurable in config.php)? I will just have to check how does psysh cache the results and it can be done in another PR?\n. Sure thing! Rebased and squashed.\nI'll do the config.php part during the week. \n. Correct. It's merged for testing purposes only. Next task is to introduce frequency of scans. Probably in case of cache unavailability scans also shouldn't happen (to prevent slow downs).\n. @bobthecow Yes it does. Do you think it shouldn't happen?\n. ",
    "dland": "Yep, this would be lovely. For symfony this is really useful, because you need to instantiate a kernel and boot it, at a minimum, and then be able to refer to it in order to do stuff.\nIn Boris, for example, you can do the following:\n$kernel = new AppKernel('dev', true);\n$kernel->loadClassCache();\n$kernel->boot();\n$boris = new \\Boris\\Boris('myapp> ');\n$boris->setLocal([\n    'kernel' => $kernel\n]);\n$boris->start();\nAnd then within the REPL you can refer to $kernel and it Just Works\u2122\n. Yep, that's exactly the point.\nFor loading common classes, defaultIncludes works for me.\nAs for having variables set up at boot time, I'm looking at Psy\\Context ... if I understand it correctly, that's where the variables created at the prompt are stored. Hence it probably just needs a set() method in order to create and store a variable, and then use it in a command which would do the above \"injection\" of the variable.\n. ",
    "hashar": "Maybe inject the command to the input?\nphp\n$shell = new \\Psy\\Shell();\n$shell->addInput('whereami');\n$shell->run();\nThat seems to do the trick for me.. Psysh is mostly a single person effort (90% of commits) and it is working reasonably well for most users.\nYou can't really compare to rails which is a full framework, that has been going for years and is probably the de facto standard framework for ruby web development. There is a lot more of effort being put into it.\nIn PHP world, maybe Symfony or Zend frameworks have their own equivalents.\nAs to why authors \"don't improve\" Psy, it is OpenSource so really the users most of the time ends up being the authors.  If there are only few patches being send to improve it, either Psy does not have much interested or it is working fine enough for almost everyone :]\nThere are other tools to interact/debug a PHP software such as XDebug XHProf which have integration in Eclipse/IntelliJ/PhpStorm.  A click to set a breakpoint, run, step in the interactive console done :]. @bobthecow I can't believe you got as far as providing a screenshot reflecting our context.  Kudos!   Would we be able to incorporate your code above in MediaWiki which is licensed under GPL 2+?  We would of course gives proper attribution !. I have integrated your code to what will hopefully become the MediaWiki shell command ( https://gerrit.wikimedia.org/r/#/c/334217/4 ).  Thank you, you have been a huge time saver!. ",
    "piotr-galas": "Thank you very much @hashar.\nYour solution work , but it is difficult to  implement. \nWhen I invoke debugger like you describe i am in  wrong place, somewhere in vendor.\nI use this library by putting eval(\\Psy\\sh());  When I put it in code,the  Shell::debug method is invoked. To achieve my goal I just dirty put $shell->addInput('whereami'); to vendor. Dirty, but it work.\nBtw.\n I came from rails community, where similar debugger is used by everybody. I don't understand why don't authors improve this library to be more user friendly.  If you debug you always want to put environment on console. I can create PR with this, but I am afraid that authors don't want it. \nI wait an answer almost 3 months. . @hashar you are right. I think it is better tool then XDEbug and setiing breakpoints in IDE.\nIn my opinion it is not comparable. With this great tool you can change or invoke everything you want in the fly. I complained because nobody answer me 3 months. I know that it is open source, and people spend private time to improve it. \nThanks one more time.. ",
    "yuloh": "Thanks everyone, new release looks great \ud83d\udc4d \ud83d\udc4d. ",
    "lufeihaidao": "@bobthecow Not yet, sorry.... ",
    "asolopovas": "namespa + tab \nPHP Notice:  Undefined index: end in C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\src\\Psy\\TabCompletion\\AutoCompleter.php on line 55\nTried same thing \nPHP Stack trace:\nPHP   1. {main}() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\bin\\psysh:0\nPHP   2. Psy\\{closure}() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\bin\\psysh:135\nPHP   3. Psy\\Shell->run() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\src\\Psy\\functions.php:218\nPHP   4. Symfony\\Component\\Console\\Application->run() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\src\\Psy\\Shell.php:273\nPHP   5. Psy\\Shell->doRun() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\symfony\\console\\Application.php:117\nPHP   6. Psy\\ExecutionLoop\\Loop->run() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\src\\Psy\\Shell.php:308\nPHP   7. Psy\\ExecutionLoop\\{closure}() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\src\\Psy\\ExecutionLoop\\Loop.php:142\nPHP   8. Psy\\Shell->getInput() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\src\\Psy\\ExecutionLoop\\Loop.php:71\nPHP   9. Psy\\Shell->readline() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\src\\Psy\\Shell.php:330\nPHP  10. Psy\\Readline\\GNUReadline->readline() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\src\\Psy\\Shell.php:807\nPHP  11. readline() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\src\\Psy\\Readline\\GNUReadline.php:106\nPHP  12. Psy\\TabCompletion\\AutoCompleter->callback() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\src\\Psy\\Readline\\GNUReadline.php:106\nPHP  13. Psy\\TabCompletion\\AutoCompleter->processCallback() C:\\Users\\Andrius\\AppData\\Roaming\\Composer\\vendor\\psy\\psysh\\src\\Psy\\TabCompletion\\AutoCompleter.php:86. @bobthecow Sorry for delay as well, we all are busy, I don't mind just let me know what should I do. Currently readline_info() returns \n[\n     \"line_buffer\" => \"\",\n     \"point\" => 15,\n     \"readline_name\" => \"\",\n     \"attempted_completion_over\" => 0,\n]. PHP error:  Cannot instantiate interface Psy\\VersionUpdater\\Checker in C:\\vhosts\\project1\\vendor\\psy\\psysh\\src\\Psy\\functions.php on line 56. ```\nPsy Shell v0.8.2 (PHP 7.1.0 \u2014 cli) by Justin Hileman\n\n\n\nPsy\\info()\nPHP error:  Undefined index: library_version in C:\\vhosts\\3oakdb\\vendor\\psy\\psysh\\src\\Psy\\functions.php on line 89\n```. \n\n\n",
    "jens1o": "I still have this problem with the latest release.. Of course, here you go @bobthecow \narray(12) {\n  'PsySH version' =>\n  string(6) \"v0.8.5\"\n  'PHP version' =>\n  string(5) \"7.1.5\"\n  'default includes' =>\n  array(0) {\n  }\n  'require semicolons' =>\n  bool(false)\n  'error logging level' =>\n  int(32767)\n  'config file' =>\n  array(3) {\n    'default config file' =>\n    string(46) \"C:/Users/Jens/AppData/Roaming/PsySH/config.php\"\n    'local config file' =>\n    NULL\n    'PSYSH_CONFIG env' =>\n    bool(false)\n  }\n  'updates' =>\n  array(4) {\n    'update available' =>\n   bool(false)\n    'latest release version' =>\n    string(6) \"v0.8.5\"\n    'update check interval' =>\n    string(6) \"weekly\"\n    'update cache file' =>\n    string(53) \"C:/Users/Jens/AppData/Roaming/PsySH/update_check.json\"\n  }\n  'pcntl' =>\n  array(2) {\n    'pcntl available' =>\n    bool(false)\n    'posix available' =>\n    bool(false)\n  }\n  'readline' =>\n  array(3) {\n    'readline available' =>\n    bool(true)\n    'readline enabled' =>\n    bool(true)\n    'readline service' =>\n    string(20) \"Psy\\Readline\\Libedit\"\n  }\n  'history' =>\n  array(3) {\n    'history file' =>\n    string(49) \"C:/Users/Jens/AppData/Roaming/PsySH/psysh_history\"\n    'history size' =>\n    NULL\n    'erase duplicates' =>\n    NULL\n  }\n  'docs' =>\n  array(4) {\n    'manual db file' =>\n    string(53) \"C:/Users/Jens/AppData/Roaming/PsySH/php_manual.sqlite\"\n    'sqlite available' =>\n    bool(true)\n    'db schema' =>\n    string(5) \"1.0.0\"\n    'db built at' =>\n    string(31) \"Sun, 22 Mar 2015 05:16:50 +0000\"\n  }\n  'autocomplete' =>\n  array(2) {\n    'tab completion enabled' =>\n    bool(true)\n    'custom matchers' =>\n    array(0) {\n    }\n  }\n}.\n[\n     \"line_buffer\" => \"\",\n     \"point\" => 15,\n     \"readline_name\" => \"\",\n     \"attempted_completion_over\" => 0,\n]\n```. Okay, thanks for your effort :). Yes, I do. Give me some minutes. :). Wow. This works absolutly. Love it  \u2764\ufe0f \nThanks!\nWhen's the next release? \ud83d\ude0b . Thank you sir! :). But may I ask why you even fail in a fatal error, while it's a valid expression? Are gotos not supported in shells? \ud83d\ude2d . It would save the gotos, and once we're jumping to one, we remember what was defined as that label, and then execute the code?. I planned to save a shortcut on the steps I do to validate everything(minify/compile scss, compile js) and so on. That's why I wanted to use labels which executes them repeatly when I need them. :/. The commands don't work for me, that's why I didn't used them...\n\n. History reply comes up with\n```\n\n\n\nhistory replay\nRuntimeException with message 'Too many arguments, expected arguments \"command\".'\n```\n\n\n\np.s. I'm not sure whether I'm supposed to create new issues or leave it here.. => [\n     \"PsySH version\" => \"v0.8.9\",\n     \"PHP version\" => \"7.1.7\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"error logging level\" => 32767,\n     \"config file\" => [\n       \"default config file\" => \"C:/Users/Jens/AppData/Roaming/PsySH/config.php\",\n       \"local config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"updates\" => [\n       \"update available\" => false,\n       \"latest release version\" => \"v0.8.9\",\n       \"update check interval\" => \"never\",\n       \"update cache file\" => \"C:/Users/Jens/AppData/Roaming/PsySH/update_check.json\",\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => false,\n       \"posix available\" => false,\n     ],\n     \"readline\" => [\n       \"readline available\" => true,\n       \"readline enabled\" => true,\n       \"readline service\" => \"Psy\\Readline\\Libedit\",\n     ],\n     \"history\" => [\n       \"history file\" => \"C:/Users/Jens/AppData/Roaming/PsySH/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => \"C:/Users/Jens/AppData/Roaming/PsySH/php_manual.sqlite\",\n       \"sqlite available\" => true,\n       \"db schema\" => \"1.0.0\",\n       \"db built at\" => \"Sun, 22 Mar 2015 05:16:50 +0000\",\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => true,\n       \"custom matchers\" => [],\n     ],\n   ]\nMy config file:\n```php\n<?php\n// Use local config, if available\nif (is_file(getcwd() . '/.psysh.php')) {\n    return array_merge(require(getcwd() . '/.psysh.php'), ['startupMessage' => 'Using local config!']);\n}\n// Fall back to global config\nreturn [\n    'startupMessage' => 'How are you doing sir? c:',\n'commands' => [\n    new \\Psy\\Command\\ParseCommand,\n],\n'updateCheck' => 'never'\n\n];\n``. Both are true, it exists and it has 200 lines.. Okay, thanks. I'll do that steps.. The line output islsin the first try and in the second one$parser->parse('<?php echo \\'Hello World\\'; ?>');` @bobthecow \nIt changes with each try.\nMay I send you the whole file? There aren't any secrets or something like that.. @bobthecow \nphp\narray(4) {\n  'line_buffer' =>\n  string(0) \"\"\n  'point' =>\n  int(25)\n  'readline_name' =>\n  string(0) \"\"\n  'attempted_completion_over' =>\n  int(0)\n}\nWhat kind? Could you elaborate, please?\nThe output of php -v?\nPHP 7.1.7 (cli) (built: Jul  6 2017 16:51:33) ( NTS MSVC14 (Visual C++ 2015) x64\n )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies\n    with Xdebug v2.5.1, Copyright (c) 2002-2017, by Derick Rethans. Official Windows Binaries, I update it myself once there is a new version.. Maybe you set up a cronjob or manually do that before each release?. Thanks!. But I wonder why the files are smaller? The actual manual is 7mb, and the previous one was 9.5mb big?. Okay, thanks for your investigation. :). Err... I can't find them. It looks like you reset the repo a few commits but forgot to push your new manuals. :/. Fine, thanks, now it's working!. May I take over that request and file a pr?. @bobthecow It seems like there is an error in the .travis.yml, and thus the php 5.3 build is failing.. Okay! :). yeeeyy, it works \ud83d\ude03 . Okay, now it doesn't comply with the code style analysis :/. No worries, just let's hope.. Okay, I broke it.. @bobthecow Can you point me what breaks there please? I didn't expected to make any type of api change and I don't see why it fails :(. >To be honest, I'm not sold on the premise. Did you test it?\nYeah, and I thought that we would have more cases like the first one, but that was indeed very naive. :/. thanks :). Yeah, I do know my issue(actually, I just wanted to create an method and I didn't thought and named it the same), but imo, it should not quit the shell, but handle the case adorable.. Okay, thanks for your reply. Closing, as it is unfixable in the current state.. Oh, I didn't expected that. Thanks!. haha. But now you have to deal with it ;). Okay, will do that this afternoon.. php\nreturn\n  (\n      AbstractMatcher::startsWith($input, $var)\n      // also check that we do not suggest invoking a super method(__construct, __wakeup, \u2026)\n      && !AbstractMatcher::startsWith('__', $var)\n  );\nDo you expect it like this?. you shouldn't program in two different programming languages on two monitors at the same time.. ",
    "cebe": "are you sure error reporting is set to a maximum to show all possible errors? error_reporting(-1);. works fine for me:\n```\ncebe@cebe-desktop: ~ $ psysh \nPsy Shell v0.8.0 (PHP 5.6.27-0+deb8u1 \u2014 cli) by Justin Hileman\n\n\n\n$ch = curl_init('https://www.google.com');\n=> curl resource #151\n$raw_response = curl_exec($ch);\n\n302 Moved\n302 Moved\nThe document has moved\nhere.\n\n=> true\n``. you could try runningpsyshwithstrace:strace psysh` and see if there is any useful output before crashing.. \n\n\n",
    "brenjt": "Yes. I do have full error_reporting. I stripped out all of my code to just have this, which works perfectly.\n$ch = curl_init('http://www.google.com');\n$raw_response = curl_exec($ch);\nThis completely fails:\n$ch = curl_init('https://www.google.com');\n$raw_response = curl_exec($ch);\nIf I try the exact same code in php -a it works perfect. \n\n. Oh man how I wish that was my output! I tried it on version 0.8.0 but had the same output as before. Do you have any other thoughts as to what could be causing this? I have searched high and low.. [\n     \"PsySH version\" => \"v0.7.2\",\n     \"PHP version\" => \"5.6.27\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"error logging level\" => 32767,\n     \"config file\" => [\n       \"default config file\" => null,\n       \"local config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => true,\n       \"posix available\" => true,\n     ],\n     \"readline\" => [\n       \"readline available\" => true,\n       \"readline enabled\" => true,\n       \"readline service\" => \"Psy\\Readline\\GNUReadline\",\n       \"readline library\" => \"6.3\",\n       \"readline name\" => \"other\",\n     ],\n     \"history\" => [\n       \"history file\" => \"/Users/.../.psysh/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => true,\n       \"custom matchers\" => [],\n     ],\n   ]\n. ",
    "Charl13": "I have the same problem.. Works for me on 7.1.0 :+1: . ",
    "bukowskiadam": "Working like a charm. :+1:\nShould I close the issue right now or you'll close it after merging to master?. ",
    "teohhanhui": "```\nPsy Shell v0.8.1 (PHP 7.1.1 \u2014 cli) by Justin Hileman\n\n\n\nPsy\\info()\nPHP error:  Cannot instantiate interface Psy\\VersionUpdater\\Checker in /srv/tripviss-api/vendor/psy/psysh/src/Psy/functions.php on line 56\n```\n\n\n\nUh-oh.... ```\n\n\n\nreadline_info();\n=> [\n     \"line_buffer\" => \"readline_info();\\n\",\n     \"point\" => 0,\n     \"end\" => 0,\n     \"library_version\" => \"EditLine wrapper\",\n     \"readline_name\" => \"\",\n     \"attempted_completion_over\" => 0,\n   ]\n``. Uhh, looks like a libedit issue. I realized that Unicode input does not work inphp -a` as well.. \n\n\n",
    "phil-s": "Something like config set --require-semicolons would be perfect, although in the interests of minimising the potential for naming conflicts, perhaps psysh would be a better command name than config ?\nFYI I'd quite like it if there were analogous command-line arguments as well, so that psysh instances could be started with particular configs without the need for config file editing. That's a different feature request to this one of course, but I mention it now in case you also see utility in that feature, and think there would be some cross-over on the implementation side.. > What valid PHP code do you think config set --require-semicolons might conflict with? :)\nMy specific use case is with Drupal and the drush core-cli (aka drush php) command, which invokes psysh.  I'm not sure whether what they've done is unexpected, but other drush commands can be invoked by name directly from the psysh prompt. Hence entering cc all in psysh is the same as running the drush cc all command.\nAs Drupal code is able to implement new drush commands arbitrarily, all that is needed is for a drush config command to be available, and it would conflict. As config is such a generic term, this does not seem a particularly unlikely scenario.\n\nWhy not just spin up another session rather than changing configuration at runtime?\n\n(a) That would necessitate recreating the state of the original session before 'continuing' with the new configuration, which might require a lot of steps to do (assuming there are no complicating factors making it difficult to do at all).\n(b) AFAIK I would then have to create multiple psysh config files with all the different permutations of options I would want to use, in order to run an instance with a particular set?\nA command to change the config values at runtime would be vastly more convenient.. At minimum I think the three I mentioned initially are all useful candidates: pager, requireSemicolons, errorLoggingLevel. I would think that anything which can be set at runtime would be good to include, though.\nIt was a wish to interactively change the pager config which prompted me to write this, as essentially I wish to call psysh from a dumb terminal as well as from fully-featured terminals, and of course paging doesn't work in a dumb terminal.  The dumb terminal use-case is due to wanting to switch my Emacs integration with drush php from using a terminal emulator buffer to using comint-based integration (which provides only dumb terminal emulation, but is otherwise a smoother experience -- and the lack of paging is more or less inconsequential when the output is going to a text editor buffer).\nI created a separate config file and used the PSYSH_CONFIG environment variable to get the comint use-case to work, but that then means I need to set up an equivalent configuration file in every environment, which seems very awkward to me; whereas I can trivially arrange to automatically execute psysh commands when my comint code runs.\nBeing able to interactively modify settings would not only be a nicer solution to that particular need, but I think it would also be of general utility to users. For instance one could then paste a block of instructions into the shell which included temporarily setting a config value, evaluating some PHP, and then resetting the config value.\n. Personally I feel that Ctrl+D at an empty prompt is a sufficiently standard Exit command, and I would be in favour of Ctrl+C cancelling input, but not exiting the program.  Just like Unix shells, in other words.\nExiting contextually, if there is no input, just sounds too easy to do accidentally (e.g. by inadvertently typing it twice in a row).. Thanks for the quick fix!\nIs it possible to restrict the recognition of commands to initial (non-continuation) input lines?  Otherwise I can still contrive a situation where I can make a command be interpreted during PHP input. e.g.:\n>>> define('show', 'foo');\n=> true\n>>> $x = [ show ];\n=> [\n     \"foo\",\n   ]\n>>> $x = [\n... show\nNot enough arguments (missing: \"target\")\n\nor considerably less-contrived:\n>>> $x = \"going to the\n... show tonight\";\nUnknown target: tonight\"\n\n. In fact that's an issue after a newline whether you send it as two separate lines of input (in which case there is a continuation prompt), or a single input with an embedded newline:\n>>> \"going to the\nshow tonight\";\n... Unknown target: tonight\"\n\nSo it needs to be further constrained, to the first line of input at any non-continuation prompt.. Yikes.\nI've never played with that command, and it hadn't occurred to me that it could be embedded like that.  Is that rewriting the code before passing it to the php process?\nPerhaps the command-recognition code could be made contextually-aware enough to be able to figure out things like \"we're in a string -- don't do any magic\"?. Thinking more on this, I'm convinced that a change is needed.  It seems unreasonable to me that PsySH would fall over or misbehave in the face of valid PHP input; and the fact that it's possible to add new arbitrary PsySH commands means the potential for failures or other unintended behaviour can be dramatically higher than it is by default.  (In my current Drupal project, with \"drush php\" importing all the available drush commands and their aliases, I actually have 418 PsySH commands which can trigger this kind of issue.)\nI understand that there is intentional behaviour here, so I would suggest that some new options and constraints be applied.\n(1) As per my previous comment, I think that when inside a string such commands should never be executed -- if it's at all possible to detect that context (and I hope that it is).  The buffer command might still be a desirable exception to that, but possibly that's the only command for which this behaviour could be wanted?  (Or PsySH commands could perhaps be required to explicitly register that they need to be able to run within a string context, in order for that to be permitted.)\n(2) I think there needs to be a config option to specify that unless they appear at the beginning of the PHP input, plain command names like this will never be executed.  Because the commands can cause PsySH to fail in such a confusing manner, I would be firmly in favour of this being the default setting. (I had encountered these kinds of errors many times before I figured out what was happening, and it was very frustrating.)\n(3) I think there needs to be a non-plain form of invoking the commands, such that users can still utilise them even when (2) disallows the plain names. I'm not sure if that would entail some kind of \\Psy\\ name-spacing, or some kind of other syntax which is not valid PHP, but which PsySH recognises.  Maybe both.  I suspect the \"invalid syntax\" approach could be more convenient (less typing).  Either approach would still be valid inside strings, of course, which is partly why I think (1) is important.\nIn combination, I feel that these changes would make PsySH far more robust, without losing any of its useful functionality/magic.. Thanks for implementing (1).  I agree that dealing with strings and comments dramatically reduces the scope of the problem.\nStill, my personal feeling is that PsySH should do the right thing for any valid PHP input; and if that's not necessarily the case by default, then I do wish there would at least be an option which would guarantee that behaviour.\nPerhaps you'd be more amenable to the other ideas as opt-in settings?\nMy major concern with it not being the default behaviour is that, when a command is inadvertently triggered, it's not trivial for the user to relate that behaviour (and/or possible error message) to the input they believed they had provided, in which case they may have no idea where to start looking.  However, perhaps that aspect can be tackled differently, such that when a PsySH command is executed, it simply tells the user what it is doing?\nIf there was some output along the lines of Running PsySH command '<cmd>' when such a command was invoked then, in cases where that happened accidentally, it would be far more apparent to the user what was going on.  That's probably a bit verbose; but perhaps it could be abbreviated without losing the utility, and without feeling too clunky for the normal situation of an intentional execution? e.g.: PsySH::<cmd>.  You might experiment with different formats.  Add a bit of colour, and it might not seem too overt.\nI'll add that displaying those details when the command triggers an error would be less verbose and still an obvious improvement on the current situation; but providing the information in non-error cases might actually be even more important -- a command can run successfully without any other output, which can then corrupt the PHP input silently; and if the end result is still valid PHP then the bugs could prove to be very difficult to track down.\nI suppose \"whether to display the command being run\" could always be a setting as well.  If displaying that information was opt-out, and the other changes were opt-in, and the settings documentation explained the connection between them, that could be a fair solution to the issue, and users who chose to disable the display would (in theory) at least still be made aware of the issue.\n(And if you also find that idea too unappealing, opt-in settings would be better than no settings at all.). > Double newlines doesn\u2019t fix the issue, though, it just defers it a bit :)\nTrue, but I suspect it would account for the \"manual typing\" cases the vast majority of the time.\n\nAnd it makes closing brackets inconsistent with the way PsySH works the rest of the time.\n\nAlso true, so it would definitely be an opt-in feature for that reason.\n\nIf you end the line with a \\ it will let PsySH know that you wish to continue your code on the next line\n\nThat I did not know.  Still, in cases when I was mindful of the issue, I've successfully used } ... {.  It's the cases where I've forgotten to take such steps that are the annoying ones.\n\nTo get pasting to do the right thing, use readline-enabled PHP, and a modern terminal app, and enable bracketed paste\n\nI do have something similar in place as it happens, so for me personally pasting is actually ok; but I do still manually type code into the repl from time to time, and was bitten by this on numerous occasions.\nI think this issue in general and its various mitigations are probably worthy of a section in the manual. I can't see a Troubleshooting or FAQ section, but I can only presume that this would crop up for many people on a fairly regular basis (both for typing and pasting).\nI actually implemented my double-newline suggestion in my own wrapper today, and I do think it works nicely, so I'd still recommend it as an enhancement.. Excellent. That's pretty much how I had it working in practice in my wrapper.  The one other thing I did was to delete that extra continuation prompt if the second newline happened, as the output looked tidier that way.  I'm not sure whether that's simple to do at your end?  (My wrapper is filtering the inputs and outputs -- and completely faking this continuation -- so I don't actually know what's happening inside PsySH.)\nThank you for implementing it.  Even if removing the extraneous continuation prompt isn't possible/practical, I'd be glad to see this feature merged as-is -- I think that other people like myself will be grateful for the option, and won't mind the inconsistency (I certainly became accustomed to it very quickly).\nThe other approach you could consider is the require-a-semicolon-even-after-a-block option.  In a sense the requireSemicolons behaviour is already a bit odd/inconsistent in that some kinds of block require a semicolon (e.g. function definitions), and others do not (e.g. if statements);  so a variant which required a semicolon to end the input in all cases might well be considered an improvement from the consistency perspective.  (For clarity, I'm very much in favour of still offering this requireNewlineAfterBlocks option even if you decided to also implement this other approach.). This issue occurs with 'useReadline' => false, in the config file.  Does that exclude readline from the equation?  Or is it just used in a different way?. Modifying the 1024 in Psy\\Readline\\Transient::readline() affects this for me.  If I change that to 10 then I can see, for example:\n>>> '1234567890'\n... => \"\"\"\n   12345678\\n\n   90\n   \"\"\"\n\nRegardless of the Readline implementation being used, Psy\\Shell::getInput() gets the buffered input string with $input = $this->readline(); and calls $this->addCode($input); for each string, and addCode adds the input string to an array and then 'cleans' the array:\n$this->codeBuffer[] = $silent ? new SilentInput($code) : $code;\n$this->code         = $this->cleaner->clean($this->codeBuffer, $this->config->requireSemicolons());\n\nThe newlines are introduced by  Psy\\CodeCleaner::clean() with implode(PHP_EOL here:\n$stmts = $this->parse('<?php ' . \\implode(PHP_EOL, $codeLines) . PHP_EOL, $requireSemicolons);\n\n. More related problems:\nTransient::readline() trims the right-hand side of the input, so important mid-statement whitespace can be removed.\nCodeCleaner::clean() calls parse() on whatever it got from the buffer, which leads to parsing errors.\nWith a 10-character buffer size, and var_dump($code); at the top of CodeCleaner::parse() we get this kind of behaviour:\n>>> $foo = ['1','2','3'];\nstring(16) \"<?php $foo = ['\n\"\nPHP Parse error: Syntax error, unexpected T_ENCAPSED_AND_WHITESPACE, expecting ']' on line 1\n>>> string(16) \"<?php 1','2','3\n\"\nPHP Parse error: Syntax error, unexpected T_CONSTANT_ENCAPSED_STRING on line 1\n>>> string(11) \"<?php '];\n\n\"\n...\n\nWhich still thinks it's in the middle of a string, so we get out of that with:\n... ';\nstring(14) \"<?php '];\n';\n\n\"\n=> \"];\\n\"\n>>>\n\n. Here is an initial improvement:\nIn Shell::getInput() change this:\n        $input = $this->readline();\n\nto:\n        // Read buffered input, ensuring that we finish at a newline.\n        $input = '';\n        do {\n            $line = $this->readline();\n            $input .= $line;\n        }\n        while (substr($line, -1) !== \"\\n\");\n\nEdit: In fact with only that change and the removal of the rtrim() from Transient::readline(), things seem to work pretty well?\nI'm still running with that 10-character buffer size, and throwing a 10,000+ character PHP file at it, and at first glance that seems to be working fine.  (At minimum, I'm getting no errors, and the last function in that file is being defined and is callable.). Looking at the behaviour of fgets, is there a reason not to do this: ?\n-        return \\rtrim(\\fgets($this->getStdin(), 1024));\n+        return \\rtrim(\\fgets($this->getStdin()));\n\nI'm thinking there may be a reason, on the basis that a limit was imposed in the first place, but I don't know what the reason would be.\nWithout that length parameter, it should keep reading until it either has a line, or EOF.\n\nReading ends when length - 1 bytes have been read, or a newline (which is included in the return value), or an EOF (whichever comes first). If no length is specified, it will keep reading from the stream until it reaches the end of the line.\nNote:\nUntil PHP 4.3.0, omitting it would assume 1024 as the line length. If the majority of the lines in the file are all larger than 8KB, it is more resource efficient for your script to specify the maximum line length.\n\nThat note would mean that if psysh needs to retain compatibility with PHP 4.3 then we would still need to use the loop; but I think we could also still drop the explicit parameter?\n. I'll add that once psysh was doing the right thing, I then found myself hitting a 4096 character limit, which I think is some kind of I/O buffering imposed by the OS on account of using a pseudo-terminal to communicate with psysh.  In this instance the excess was simply discarded, and there didn't appear to be anything that psysh could do about it.\n~Happily, in a real terminal (or at least in gnome-terminal specifically) I'm not encountering that issue.~ (this was incorrect -- refer to later comments)\nI found that using a pipe instead of a pty eliminated that 4K issue, and seems to be working well (partly thanks to being able to set 'colorMode' => \\Psy\\Configuration::COLOR_MODE_FORCED, to still obtain coloured output!)\nI just threw a \".......\" input string with 600,000 dots, and got all 600,000 back in the output :)\nI've also tested installing the php5-readline Debian package and trying Psy\\Readline\\GNUReadline and this is where I first noticed that 4K buffer with the pty, but I'm guessing it was again on account of the pty.  Using a pipe didn't play nicely with GNUReadline, so I couldn't test that alternative; but when using psysh in gnome-terminal with 'useReadline' => true, configured, I could successfully repeat that 600,000 char string test.  Although I now see that \\Psy\\Configuration::getReadline() tells me I'm actually using Psy\\Readline\\Libedit there.\n~In any case, my general impression is that for normal use-cases the fix to Transient is sufficient, and that configurations where it doesn't work are probably not psysh's problem!~ (No longer sure about that, having realised that this may be an issue for terminals in general when Transient is used.). Oh, I've not tried HoaConsole (and the underlying library doesn't seem to have been installed by composer), and you didn't mention that one in your last comment, so I'm just mentioning it now in case that might need a similar adjustment to Transient.. Ah, I spoke too soon.  I had failed to test Transient under gnome-terminal, and doing so now I see that I again encounter a 4K limit.\nSo it wasn't that a pseudo-terminal was behaving differently to a 'real' terminal, but rather it seems to me that the Transient readline is falling foul of an I/O buffering issue with terminals in general?. I've now tried HoaConsole which (a) seems quirky, but (b) seemingly does not have the same issue as Transient, so that seemed like it should provide insight into the issue.\nI could see it was using stty -icanon so I tried that in my terminal.  That appeared to solve the 4K issue, but I quickly noticed that Ctrl-d also didn't quit the REPL, and indeed -icanon disables all line editing features for the terminal.  I believe that the 4K buffer is therefore the line-editing buffer, and it discards any input larger than that maximum line size.\nGNU readline will be disabling that and implementing its own line-editing.\nhttp://www.linusakesson.net/programming/tty/ says:\n\nLine editing. Most users make mistakes while typing, so a backspace key is often useful. This could of course be implemented by the applications themselves, but in accordance with the UNIX design philosophy, applications should be kept as simple as possible. So as a convenience, the operating system provides an editing buffer and some rudimentary editing commands (backspace, erase word, clear line, reprint), which are enabled by default inside the line discipline. Advanced applications may disable these features by putting the line discipline in raw mode instead of the default cooked (or canonical) mode. Most interactive applications (editors, mail user agents, shells, all programs relying on curses or readline) run in raw mode, and handle all the line editing commands themselves. The line discipline also contains options for character echoing and automatic conversion between carriage returns and linefeeds. Think of it as a primitive kernel-level sed(1), if you like.\n\n\nI suggest that this issue (maximum input line size for terminals in canonical mode when not using readline) simply be documented, so that anyone else encountering it will know why, and what the alternatives are.. I've updated the description of useReadline in https://github.com/bobthecow/psysh/wiki/Config-options and https://github.com/bobthecow/psysh/wiki/Sample-config. Agreed, I think we're done here.\nI almost hate it when that amount of time and effort boils down to a one-line code change, but it's a good thing really :)\nI concur with keeping the Transient behaviour distinct from what HoaConsole is doing.  When I started to look at that I was thinking perhaps there was some code or an approach that Transient could appropriate; but once I realised what HoaConsole was doing I decided that things were good just as they were.. You can follow the command with another command. PsySH only prints the value of the last statement it executed. e.g.:\n>>> thing_which_returns_a_lot_of_state();1;\n1\n\nThe interpreter would be making quite the assumption to decide that a given result wasn't intended for inspection.  There would need to be a way of ensuring that the full dump was at least optionally printed.\nIs there currently a way to re-print the most recent return value?  An interesting approach might be to print the \"short version\" by default, but have a command to re-print the last value in full.  dump seems to require an argument, so re-printing the most recent value could become the behaviour when no argument was provided?. ",
    "calebporzio": "Thanks @damiankloip ! I'm going to give that a whirl, that could be just what I'm looking for!. In case anyone is interested, here is my implementation:\nMy use case was specifically for \"Model\" classes in the Laravel framework.\n```php\n$finder = new \\Symfony\\Component\\Finder\\Finder();\n$finder->files()->name('*.php')->in(base_path().'/app');\nforeach ($finder as $file) {\n    $namespace = 'App\\';\nif ($relativePath = $file->getRelativePath()) {\n    $namespace .= strtr($relativePath, '/', '\\\\') . '\\\\';\n}\n\n$class = $namespace . $file->getBasename('.php');\n\ntry {\n    $r = new \\ReflectionClass($class);\n\n    if ($r->isSubclassOf('Illuminate\\\\Database\\\\Eloquent\\\\Model')) {\n        class_alias($class, $file->getBasename('.php'));\n    }\n} catch (Exception $e) {\n    //\n}\n\n}\n```. ",
    "grokcode": "Thanks @GrahamCampbell. The full composer.json is below. I was able to get the install working by removing the \"psy/psysh\": \"@stable\", dependency, but obviously this is not an ideal solution.\n{\n    \"name\": \"symfony/framework-standard-edition\",\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"description\": \"The \\\"Symfony Standard Edition\\\" distribution\",\n    \"autoload\": {\n        \"psr-0\": { \"\": \"src/\", \"SymfonyStandard\": \"app/\" }\n    },\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/orcasgit/surveymonkey-api-v3.git\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=5.3.3\",\n        \"symfony/symfony\": \"2.8.*\",\n        \"doctrine/orm\": \"~2.2,>=2.2.3\",\n        \"doctrine/doctrine-bundle\": \"~1.2\",\n        \"doctrine/doctrine-migrations-bundle\": \"~1.0\",\n        \"twig/extensions\": \"~1.0\",\n        \"sentry/sentry-symfony\": \"~0.7\",\n        \"symfony/assetic-bundle\": \"~2.3\",\n        \"symfony/swiftmailer-bundle\": \"~2.3\",\n        \"symfony/monolog-bundle\": \"~2.4\",\n        \"sensio/distribution-bundle\": \"~3.0\",\n        \"sensio/framework-extra-bundle\": \"~3.0\",\n        \"incenteev/composer-parameter-handler\": \"~2.0\",\n        \"friendsofsymfony/user-bundle\": \"2.0.0-alpha3\",\n        \"stof/doctrine-extensions-bundle\": \"~1.1@dev\",\n        \"mopa/bootstrap-bundle\": \"dev-master#4a8799b45f982272a5343da54f04d9d3cce8e9f8\",\n        \"twbs/bootstrap\": \"dev-master#7cbd9a181a970b306f1963a612c5cd45aef60f8c\",\n        \"knplabs/knp-paginator-bundle\": \"dev-master#5147740faff4d32e6f42acf64475314c35320fa4\",\n        \"knplabs/knp-menu-bundle\": \"dev-master#5e7c44cb084b5c4f842f94ab443fb5dbb3f7a44c\",\n        \"knplabs/knp-menu\": \"~2.0\",\n        \"craue/formflow-bundle\": \"2.1.5\",\n        \"misd/phone-number-bundle\": \"1.2.0\",\n        \"jms/security-extra-bundle\": \"dev-master#c0147c282f345eee1424a4a42817662f4d4e3875\",\n        \"pagerfanta/pagerfanta\": \"dev-master#0eec60b48d38132333369a681db2e32c42ad117d\",\n        \"vresh/twilio-bundle\": \"dev-master#9fe3db7097ef5eb23bf1520acbb682605b1fcbe1\",\n        \"sentry/sentry\": \"1.6.2\",\n        \"liogi/surveymonkey-api-v3\": \"dev-develop\",\n        \"friendsofsymfony/rest-bundle\": \"^1.7\",\n        \"jms/serializer-bundle\": \"1.2.1\",\n        \"nelmio/api-doc-bundle\": \"^2.11\",\n        \"friendsofsymfony/oauth-server-bundle\": \"^1.5\"\n    },\n    \"require-dev\": {\n        \"sensio/generator-bundle\": \"~2.3\",\n        \"phpunit/phpunit\": \"^4.8\",\n        \"doctrine/doctrine-fixtures-bundle\": \"^2.3\",\n        \"liip/functional-test-bundle\": \"1.2.2\",\n        \"psy/psysh\": \"@stable\",\n        \"polishsymfonycommunity/symfony-mocker-container\": \"^1.0\",\n        \"symfony/phpunit-bridge\": \"^3.2\"\n    },\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"SymfonyStandard\\\\Composer::hookRootPackageInstall\"\n        ],\n        \"post-install-cmd\": [\n            \"Incenteev\\\\ParameterHandler\\\\ScriptHandler::buildParameters\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::buildBootstrap\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::clearCache\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installAssets\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installRequirementsFile\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::removeSymfonyStandardFiles\",\n            \"Mopa\\\\Bundle\\\\BootstrapBundle\\\\Composer\\\\ScriptHandler::postInstallSymlinkTwitterBootstrap\"\n        ],\n        \"post-update-cmd\": [\n            \"Incenteev\\\\ParameterHandler\\\\ScriptHandler::buildParameters\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::buildBootstrap\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::clearCache\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installAssets\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installRequirementsFile\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::removeSymfonyStandardFiles\",\n            \"Mopa\\\\Bundle\\\\BootstrapBundle\\\\Composer\\\\ScriptHandler::postInstallSymlinkTwitterBootstrap\"\n        ]\n    },\n    \"config\": {\n        \"bin-dir\": \"bin\"\n    },\n    \"extra\": {\n        \"symfony-app-dir\": \"app\",\n        \"symfony-web-dir\": \"web\",\n        \"incenteev-parameters\": {\n            \"file\": \"app/config/parameters.yml\"\n        },\n        \"branch-alias\": {\n            \"dev-master\": \"2.5-dev\"\n        }\n    }\n}. @bobthecow that worked, thanks! Sorry for cluttering up the issues with newbie problems.. ",
    "REBELinBLUE": "Well, I am an idiot, just found the option from looking through the source. Not sure how I missed it in the readme. Sorry about that\nPossibly worth mentioning that it isn't on http://psysh.org/#configure. \ud83d\udc4d. Done. ",
    "matiit": "It works indeed, I really should've done that prior to raising an issue. \nThanks.\nCan be deleted.\n. ",
    "nekromoff": "Yes, I was thinking about using it for running composer and artisan that I\nam otherwise unable to run without SSH on the shared hosting. Is that a\nvalid use case?\nOn Wed, Mar 29, 2017 at 12:07 PM, Justin Hileman notifications@github.com\nwrote:\n\nTo install it, you can grab the latest release\nhttps://github.com/bobthecow/psysh/releases/latest and just copy the\nPhar file over.\nI don't think you'll be able to use it without command line access,\nthough. Did you have a specific use case in mind?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/bobthecow/psysh/issues/366#issuecomment-290015301,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AIJ3zfoDE4ol6eK207W5Gi2W8v75iAaXks5rqhFNgaJpZM4MsNaf\n.\n. OK, thanks for the effort anyway!\n\nOn Wed, Mar 29, 2017 at 12:19 PM, Justin Hileman notifications@github.com\nwrote:\n\nI'm afraid not. PsySH is an interactive PHP session that runs from the\ncommand line, much like Composer and Artisan themselves do \u2014 sharing a lot\nof the same code, in fact!\nIf you can't run Composer or Artisan, then PsySH isn't going to help.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/bobthecow/psysh/issues/366#issuecomment-290018100,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AIJ3zYDnLZtN2Cl9SPd00nYSdDjf2STdks5rqhQigaJpZM4MsNaf\n.\n. \n",
    "gnufred": "Done!. ",
    "jchook": "I appreciate the detailed response! Makes perfect sense.. Wow thanks for the tip on runkit.\nAfter Googling, looks like there are some other PHP7 options: Soft-Mocks and UPOZ.. Man, thanks for the exquisite explanation of all this.\nUltimately I realize that my ideal solution is to write a test and have a watcher replay the test as I make changes to the source. But using psysh is so much easier and  immediate for prototyping or trying out ideas; it has a kind of \"hands-on\" feel and is always at the ready without additional setup.\nI wonder if it would be possible to use a simple record-reset-replay strategy.\n\nPsysh automatically starts recording REPL input, with commands to manage recording(s)\nAfter you make changes to the source and want to reload, enter reload or whatever. Maybe this could be bound to \u2318+R or something fancy.\nPsysh dumps it's entire PHP thread (or however this is accomplished) and starts a new one using the current config\nPsysh replays recorded input, printing each input and output again.. I agree with @SimonEast. \n\nThis seems like something very easy to implement and would be much appreciated, especially now that we have history --replay.. I agree and believe this issue should be closed by adding more documentation surrounding Ctrl + D.. The edit command should solve this problem for pastes, for future readers.. ",
    "cholthi": "cute. could you please elaborate more on --grep usages\nOn Wed, May 10, 2017 at 12:06 PM, Justin Hileman notifications@github.com\nwrote:\n\ni usually use ls --classes --grep X (and --functions, etc) to find\nfunction, class and method names. it accepts regex or just substring for\nthe --grep argument.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/bobthecow/psysh/issues/371#issuecomment-300511865,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEQci8gHejOpKpyIK8IXmmT6OVmEp_s-ks5r4dJhgaJpZM4NTCvy\n.\n. \n",
    "supriyo-biswas": "That's so much better, thanks for getting to this so quick!\n(As an aside, I've always wanted to thank you for this awesome tool. It's what made me extremely productive with PHP and saved me countless hours, and has deepened my understanding of PHP in a way no other resource has done.). Yup. That's how it works in bash too.. Thank you :). Thanks!. Well, I have a lot to learn about the PsySH codebase before I can usefully contribute. \ud83d\ude09 \nIn particular, I'm not sure how the forking loop is implemented, does it fork when PHP runs as a web server, or does it always fork?. ",
    "edbentinck": "Awesome! Thanks a bunch :) Super quick response.. ",
    "jnashsiegle": "Hi, I was referred over here from stack overflow.  All of a sudden with Laravel I am running into a similar issue.  When I try to via command line PHP artisan tinker I get an error 'cannot write to /home//vagrant/.config/psysh.  I've done all the usual things.\nhttps://stackoverflow.com/questions/45808248/php-artisan-tinker-stopped-working-in-all-versions-of-laravel-within-last-two-mo/45808626#45808626 .\nWhile it's not a work stoppage issue it sure is aggravating.  Were you able to find any resolution?. ",
    "vedmant": "I have the same issue with Docker php-fpm container. This breaks Laravel Tinker package.\nI have following error: Writing to /var/www/.config/psysh is not allowed.. The solution is to add env variable like XDG_CONFIG_HOME=/app (for Docker case). ",
    "ramsey": "Yes!. Reflection telling you that sort order and flags are by reference would appear to be a bug, to me. I reported a similar Reflection bug recently. I'll look at bugs.php.net when I get a chance to see if it's reported.. :thumbsup:. I am running PHP 7.3.0 built using PHPBrew on macOS Mojave, and I'm also having this problem. I am able to use psysh with earlier versions of PHP (7.2.11 or 7.1) built with PHPBrew and the same options.\nDisabling pcntl in the config file does the trick for me.. Does this mean I\u2019m linking against the wrong PCRE if building PHP myself or with PHPBrew?. ",
    "kanihal": "I understand that there is no requirement for plotting/visualization for php.  What I want is an ide like gui with text editor, variable viewer with an INTERPRETED console.\nI did not know about Jupyter-PHP, thanks for pointing it out.. Instead of having to build gui from bottom up, Is it possible to build a plugin which integrates psysh interpretive console for \"phpstorm\" (which already has good autocompletion and variable viewer for php)?\nI don't it is even if this is possible or not. Just wondering.\n. ",
    "RyanNerd": "@bobthecow NP. Let me know if the manual updates you are performing resolves this issue and I will close the PR as unmerged. . Ping @bobthecow  . ",
    "drasill": "Hi, thank you for your fast answer.\nI still have the same bug on the develop branch :\n```\nOn develop branch\nPsy Shell v0.8.9 (PHP 5.6.30-1~dotdeb+7.1 \u2014 cli) by Justin Hileman\n\n\n\n[5.4]\n=> [\n     5,\n     4000000000000004,\n   ]\n(float)'5.4'\n=> 5,4.0\n5.4\nPHP Parse error:  syntax error, unexpected ',' in /tmp/psysh/src/Psy/ExecutionLoop/Loop.php(90) : eval()'d code on line 1\n```\n\n\n\n(I cloned the repo, checked out develop, and exec composer install, maybe I'm missing something ?). Oh, indeed, I didn't think about that.\nIt's working with the locale C.\nI don't have en_US, but I have en_US.utf8 (it's a docker container).\nAnd as such, it's also working with the locale en_US.utf8.\nBut I guess you should use C and not suppose the presence of a locale on the system.\nThanks again !\n. ",
    "dennisdegreef": "Rebased this and PR to develop branch. wat.... :(:(:(. I was able to reproduce a infinite build locally, and the following commit fixed that behaviour, let's see what Travis thinks of this.. I tried playing around with different shebangs or specifying ini settings to php -d, and I had the same results on my linux machine. Using strace, it looked like the shebang interprets the option in the shebang as script to execute, and it seems to hang in an infinite loop there. Not exactly sure what goes wrong there.\n$ strace -ff -s 65535 ./bin/build-phar 2>&1 | grep execve\nexecve(\"./bin/build-phar\", [\"./bin/build-phar\"], [/* 62 vars */]) = 0\nexecve(\"./bin/build-phar\", [\"./bin/build-phar\"], [/* 63 vars */]) = 0\nexecve(\"./bin/build-phar\", [\"./bin/build-phar\"], [/* 63 vars */]) = 0\nexecve(\"./bin/build-phar\", [\"./bin/build-phar\"], [/* 63 vars */]) = 0. #!/usr/bin/php -d 'phar.readonly=0' doesn't seem to detect the option.\n$ strace -ff ./bin/build-phar 2>&1 | grep execve\nexecve(\"./bin/build-phar\", [\"./bin/build-phar\"], [/* 60 vars */]) = 0\n$ ./bin/build-phar\nPHP Fatal error:  Uncaught UnexpectedValueException: creating archive \"psysh.phar\" disabled by the php.ini setting phar.readonly in /src/Psy/Compiler.php:34\n. Ofcourse, backstory is that we have used a custom-written REPL for years, and are switching to PsySh now. So a lot of our devs are used to certain behaviour, that we try to integrate.\n```\n\n\n\n$repository = new FooRepository();\n=> FooRepository {#171}\n$repository->findAll()\n=> [\n     Foo {#167},\n     Foo {#169},\n     Foo {#186},\n   ]\nWhere we sometimes use these kind of methods for exploratory purposes, and we can use a certain offset of the array hardcoded in the REPL.\n$repository = new FooRepository();\n=> FooRepository {#171}\n$repository->findAll()\n=> [\n     0 => Foo {#167},\n     1 => Foo {#169},\n     2 => Foo {#186},\n   ]\n$repository->findAll()[1]->blah()\n=> \"baz\"\n```. Is there anything more you'd like to know? Let me know how I can help out getting this merged :+1:. Rebased :+1:. Let me know if there is anything I can do to help get this merged. Thanks!. \n\n\n",
    "timacdonald": "oh dang, just realised I pushed this to master. Sorry about that @bobthecow. Thanks for the awesome tool!. ",
    "meotimdihia": "Sorry, its default laravel job timeout .. ",
    "coderkd10": "sorry for replying so late. Here's a very simple test case:\n```php\n<?php\n    // FILE : global_test.php\n    $NAME = \"kedia\";\nclass Test {\n    public function __constuct() {\n    }\n    public function greet() {\n        global $NAME;\n        return \"Hello $NAME\\n\";\n    }\n}\n\nfunction testFun() {\n    global $NAME;\n    return \"Hello $NAME\\n\";\n}\n\nfunction main() {\n    $t = new Test();\n\n    echo \"Running class : \\n\";\n    echo $t->greet();\n    echo \"------------------\\n\";\n\n    echo \"Running Function : \\n\";\n    echo testFun();\n    echo \"-------------------\\n\";\n\n}\n\nmain();\n\n?>\n```\nWhen run using the normal php cli we get the following :\n```sh\n$ php global_test.php\nRunning class :\nHello kedia\n\nRunning Function :\nHello kedia\n\n``\nwhich is as we would expect.\nBut when run usingpsysh(or including the file and runningmain`) we get:\n```sh\n$ psysh global_test.php\nPsy Shell v0.8.2 (PHP 5.6.30 \u2014 cli) by Justin Hileman\nNew version is available (current: v0.8.2, latest: v0.8.11)\nRunning class :\nHello\n\nRunning Function :\nHello\n\n\n\n\n``` \n\n\n\nfrom which it is clearly that global variable $NAME has not been used inside the class / function context.\nAlso I haven't updated psysh for a while (I'm running v0.8.2) so it might be because of that too. I'll try and update and report back.. ok I updated to the latest version (v0.8.11) and I get the same output.. ",
    "matheusfaustino": "Unbelievable\u2026 Thank you very much.\n\nOn Aug 22, 2017, at 23:34, Justin Hileman notifications@github.com wrote:\ndoc DateTime::createFromFormat :)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/bobthecow/psysh/issues/409#issuecomment-324158319, or mute the thread https://github.com/notifications/unsubscribe-auth/AFANYLA_pDYWLY_C64CkMex2Jc2xtXVnks5sa0lsgaJpZM4O_H4u.\n\n\n. ",
    "SimonEast": "What if there was a psysh command to just reload psysh with the same parameters it was originally started with?\nFor example, if I ran:\npsysh bootstrap.php run_tests.php\n\nAnd later typed:\nreload\n\nIt would be great if it could exit and reload the same entry scripts. Admittedly, this is not really much different from just exiting back to command prompt, hitting up arrow and enter to replay the last command, but it would save a few keystrokes.. ",
    "skuda": "ahh ok, sorry, I didn't know about that, I just found some code using something like this:\n$mc     = explode(' ', microtime());\n$id_arr = array( end($mc), end(explode('.', reset($mc))));\nIt works in php-fpm but fails in the interactive shell, reading the documentation about end() it should be failing while trying to use end() on the generated exploded array.\nI am obviously missing something here, I'm pretty new to PHP, sorry for the noise.\nMiguel.. ",
    "zhekaus": "Psy\\info()\n=> [\n     \"PsySH version\" => \"v0.8.11\",\n     \"PHP version\" => \"7.1.10\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"error logging level\" => 32767,\n     \"config file\" => [\n       \"default config file\" => null,\n       \"local config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"updates\" => [\n       \"update available\" => false,\n       \"latest release version\" => \"v0.8.11\",\n       \"update check interval\" => \"weekly\",\n       \"update cache file\" => \"~/AppData/Roaming/PsySH/update_check.json\",\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => false,\n       \"posix available\" => false,\n     ],\n     \"readline\" => [\n       \"readline available\" => true,\n       \"readline enabled\" => true,\n       \"readline service\" => \"Psy\\Readline\\Libedit\",\n     ],\n     \"history\" => [\n       \"history file\" => \"~/AppData/Roaming/PsySH/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => true,\n       \"custom matchers\" => [],\n     ],\n   ]. I'm not sure about -with-readline flag... Where should I put it?. ",
    "kip-13": "I figured out how resolve this problem in cygwin or babun(based on cygwin)\nIn babun you need to use the package manager pact(included) to download the correct PHP binary compatible and other packages to work correctly:\nbash\n$ pact install php php-posix php-mbstring ....\nIn cygwin you need to use apt-cyg(use the binary from here) or pact(too) to do the same:\nbash\n$ apt-cyg install php php-posix php-mbstring ....\nThe situation with GitBash for Windows is that is a MSYS based on MinGW not compatible with POSIX and use the binary of PHP to Windows that have problems with readline funcs.\n. I'll write about this in a page @bobthecow, maybe in Installation section like other item in \"More installation info\" ?. @bobthecow, added the page in the wiki, let me know if it's correct for you. . ",
    "abdolrhman": "am having the same problem , am using laravel55 \nevery thing was working fine , even  tinker ,\nwhen i used php artisan make:transformer \nthe Error come to life !!! \n  \"rmdir(C:\\Users\\\\AppData\\Local\\Temp\\php-xdg-runtime-dir-fallback-): Directory not empty\". Good Job bob , and good luck . ",
    "yappkahowe": "Tested the fix in v0.8.13. It worked. Thank you very much for the fix.. * Windows 10 Pro\n Powershell\n PHP 7.17, XAMPP 7.1.7\nOutput of psy\\info()\n[\n    \"PsySH version\" => \"v0.8.13\",\n    \"PHP version\" => \"7.1.7\",\n    \"default includes\" => [],\n    \"require semicolons\" => false,\n    \"error logging level\" => 32767,\n    \"config file\" => [\n        \"default config file\" => null,\n        \"local config file\" => null,\n        \"PSYSH_CONFIG env\" => false,\n    ],\n    \"updates\" => [\n        \"update available\" => true,\n        \"latest release version\" => \"v0.8.13\",\n        \"update check interval\" => \"never\",\n        \"update cache file\" => \"C:/Users/<User>/AppData/Roaming/PsySH/update_check.json\",\n    ],\n    \"pcntl\" => [\n        \"pcntl available\" => false,\n        \"posix available\" => false,\n    ],\n    \"readline\" => [\n        \"readline available\" => true,\n        \"readline enabled\" => true,\n        \"readline service\" => \"Psy\\Readline\\Libedit\",\n    ],\n    \"history\" => [\n        \"history file\" => \"C:/Users/<User>/AppData/Roaming/PsySH/psysh_history\",\n        \"history size\" => null,\n        \"erase duplicates\" => null,\n    ],\n    \"docs\" => [\n        \"manual db file\" => null,\n        \"sqlite available\" => true,\n    ],\n    \"autocomplete\" => [\n        \"tab completion enabled\" => true,\n        \"custom matchers\" => [],\n        \"bracketed paste\" => false,\n    ],\n]. ",
    "potsed": "I know this issue is closed, but it is occurring again on 0.8.14  PHP 7.1.7\n\nOutput of psy\\info()\nphp\n[\n     \"PsySH version\" => \"v0.8.14\",\n     \"PHP version\" => \"7.1.7\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"error logging level\" => 32767,\n     \"config file\" => [\n       \"default config file\" => null,\n       \"local config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"updates\" => [\n       \"update available\" => false,\n       \"latest release version\" => \"v0.8.14\",\n       \"update check interval\" => \"never\",\n       \"update cache file\" => \"~/.config/psysh/update_check.json\",\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => true,\n       \"posix available\" => true,\n     ],\n     \"readline\" => [\n       \"readline available\" => true,\n       \"readline enabled\" => true,\n       \"readline service\" => \"Psy\\Readline\\Libedit\",\n       \"readline library\" => \"EditLine wrapper\",\n     ],\n     \"history\" => [\n       \"history file\" => \"~/.config/psysh/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => true,\n       \"custom matchers\" => [],\n       \"bracketed paste\" => false,\n     ],\n   ]. Here's my lstat output @bobthecow \n```php\n\n\n\nlstat(\"/tmp/php-xdg-runtime-dir-fallback-ec2-user\")\n=> [\n     0 => 51713,\n     1 => 275891,\n     2 => 16832,\n     3 => 3,\n     4 => 500,\n     5 => 500,\n     6 => 0,\n     7 => 4096,\n     8 => 1510182428,\n     9 => 1510182428,\n     10 => 1510182428,\n     11 => 4096,\n     12 => 8,\n     \"dev\" => 51713,\n     \"ino\" => 275891,\n     \"mode\" => 16832,\n     \"nlink\" => 3,\n     \"uid\" => 500,\n     \"gid\" => 500,\n     \"rdev\" => 0,\n     \"size\" => 4096,\n     \"atime\" => 1510182428,\n     \"mtime\" => 1510182428,\n     \"ctime\" => 1510182428,\n     \"blksize\" => 4096,\n     \"blocks\" => 8,\n   ]\n```. \n\n\n",
    "deeem": "I think i got the same error.\nDocker container with Debian 8.\nroot@de49f09d8bf5:/var/www# php artisan tinker                                                \n  [ErrorException]\n  rmdir(/tmp/php-xdg-runtime-dir-fallback-): Directory not empty\npsy/info()\nphp\n[\n     \"PsySH version\" => \"v0.8.14\",\n     \"PHP version\" => \"7.1.11\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"error logging level\" => 32767,\n     \"config file\" => [\n       \"default config file\" => null,\n       \"local config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"updates\" => [\n       \"update available\" => false,\n       \"latest release version\" => \"v0.8.14\",\n       \"update check interval\" => \"weekly\",\n       \"update cache file\" => \"~/.config/psysh/update_check.json\",\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => false,\n       \"posix available\" => true,\n     ],\n     \"readline\" => [\n       \"readline available\" => true,\n       \"readline enabled\" => true,\n       \"readline service\" => \"Psy\\Readline\\Libedit\",\n       \"readline library\" => \"EditLine wrapper\",\n     ],\n     \"history\" => [\n       \"history file\" => \"~/.config/psysh/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => true,\n       \"custom matchers\" => [],\n       \"bracketed paste\" => false,\n     ],\n   ]\n lstat('/tmp/php-xdg-runtime-dir-fallback-');\nphp\n[\n     0 => 61,\n     1 => 12059210,\n     2 => 16832,\n     3 => 3,\n     4 => 0,\n     5 => 0,\n     6 => 0,\n     7 => 4096,\n     8 => 1510162329,\n     9 => 1510162329,\n     10 => 1510162329,\n     11 => 4096,\n     12 => 8,\n     \"dev\" => 61,\n     \"ino\" => 12059210,\n     \"mode\" => 16832,\n     \"nlink\" => 3,\n     \"uid\" => 0,\n     \"gid\" => 0,\n     \"rdev\" => 0,\n     \"size\" => 4096,\n     \"atime\" => 1510162329,\n     \"mtime\" => 1510162329,\n     \"ctime\" => 1510162329,\n     \"blksize\" => 4096,\n     \"blocks\" => 8,\n   ]. ```php\n\n\n\ngetmyuid();\n=> 1000\n```. Yes. It fix issue in my case.. \n\n\n",
    "renatoagomes": "Temporary fix, thanks to @thiagobraga:\nIn my case, laravel/tinker uses this package and theirs composer.json looks like this:\n\nSo in order to fix this issue, we can change our own composer.json to get the specific version v0.8.11\n  \"laravel/tinker\": \"~1.0\",\n  \"psy/psysh\": \"0.8.11\",\n\nworked for me :)\n. ",
    "svenluijten": "I can also confirm that this is fixed since a45bad00a418f396a2aa900e591eba6b21dc6398! For anyone confused / want to try it: composer require psy/psych:dev-develop. ",
    "kubk": "You can use Ctrl+U to clear up to the beginning. This shortcut works fine for me in Bash and Zsh. And for *nix systems is expected behavior to \"kill whatever you are running\" using Ctrl+C. ",
    "filips123": "When Ctrl+C is pressed, program should check the current line. If it is not empty, it should cancel it. If it is empty, it should exit the program.. You should generate and publish PHAR and signature to every GitHub release (this could be automated) and then set up alias.. I created support for unsigned installation with phive install bobthecow/psysh --force-accept-unsigned (#531), but this issue should not be closed because signed installation is still not supported.. Some post about GPG signing in Travis CI:\nhttps://andreas.heigl.org/2017/01/19/encrypt-a-build-result-automaticaly/\nI could maybe do this later, but signing won't fully work until @bobthecow adds GPG keys.. I added support for GPG signing. It's based on the above link. This won't work until @bobthecow adds GPG keys as described in my PR.. Maybe you could also collaborate with Whoops which is error handler framework for PHP. It also include user friendly error handler page, but it currently doesn't have REPL.\nMaybe you could collaborate with them and integrate PsySH into their error handlers (or opposite).\nSee https://github.com/filp/whoops/issues/585.\n. @staabm Yes, this could be a problem. There are two possible solutions. First is to have it as external optional feature like you said and second is to maybe join PsySH and Whoops so they will have some shared code.. Duplicate of #489.. @bobthecow Can you merge this PR?. I'm not an expert in Makefile. do you know how could this be done to not require signing every time?\nCurrently, the signature is only required when making dist. When making build, only PHARs are made.. ",
    "denzel-morris": "The issue was introduced in symfony/var-dumper, specifically: https://github.com/symfony/var-dumper/commit/67f5e39024bddfbdaf390569e58d9b72a12472e0#diff-d78a4edfbc2d4181348657de4ad6e53eR94. The problem is due to the first case clause:\nphp\nswitch (true) {\n    case empty($v):\n    case true === $v:\n    case \\is_int($v):\n    case \\is_float($v):\n        continue 2;\nwhich attempts to convert a \\Ds\\Set (as an example) to a boolean by way of empty. Since Ds\\Set is not convertable to a boolean, then an exception is thrown.. @bobthecow indeed, that makes sense, initially I suspected the bug was in psysh until I inspected further.\n@nicolas-grekas good idea, I'll open the issues when I have some free time, and then possibly look deeper into a fix as well. There're some edge cases that I feel must be thought through. Haven't had the time to think them through.\nThanks guys. . ",
    "Wojciechem": "Thank You for replying. So as I understand it should work consistently for all instantiated classes?\nI've just tried it on a different Ubuntu machine and get the same results.\nsudo apt-get install php7-0\nwget https://git.io/psysh\nchmod +x psysh\n./psysh\nExample run:\n\nIt does autocomplete nicely ie. DateTime\n$d = new Da[tab]Ti[tab]\ndoesn't complete methods on newly instantiated object of DateTime\n$d->[tab] #does nothing\nif I successfully run ie. $d->format(\"Ymd\"), in the next line completion works:\n$d->[tab] #displays list of methods now\nadd              getLastErrors    modify           setTimestamp    \ncreateFromFormat getOffset        setDate          setTimezone     \ndiff             getTimestamp     setISODate       sub             \nformat           getTimezone      setTime\n\nI'm puzzled. The strange thing is that it works sometimes, and I can't predict when will it. It's not just that I have to call anything on the object first (could live with that), but very well it can work once and then again do nothing.. Thanks for notifying, sadly it seems not to.\nMy steps:\n1. check out to develop\n1. make build\n1. run build/psysh/bin/psysh (is this correct?)\n1. try my \"test case\" with DateTime:\n```\nPsy Shell v0.9.3 (PHP 7.1.16-1+ubuntu16.04.1+deb.sury.org+1 \u2014 cli) by Justin Hileman\n\n\n\n$d = new \\DateTime();\n=> DateTime {#1750\n     +\"date\": \"2018-05-09 15:12:49.250162\",\n     +\"timezone_type\": 3,\n     +\"timezone\": \"Europe/Berlin\",\n   }\n$d-> #[tab][tab] produces empty line\n$d->format(\\DateTime::W3C); #type \"by hand\"\n=> \"2018-05-09T15:12:49+02:00\"\n$d-> #[tab][tab] - works as charm this time\nadd              getLastErrors    modify           setTimestamp  \ncreateFromFormat getOffset        setDate          setTimezone   \ndiff             getTimestamp     setISODate       sub           \nformat           getTimezone      setTime       \n$d->\n```\nThere is still this weird inconsistency (does / does not complete) depending on previous line. I'm thinking of creating a docker env to test it for my sanity :). \n\n\n",
    "mvasin": "Sounds good, @bobthecow! Can you please give a link?. Okay, now it's clear.. ",
    "mloberg": "I created a Pull Request for this in #444 . ",
    "749": "Narrowing down the problem:\nI was logged in as user1 used sudo su to become super-user and then used su user2 to become that user. however the XDG_RUNTIME_DIR still pointed to /run/user/0\ncould be a problem inside php or linux\nAnyways when I directly used sudo su user2 from user1 account, everything works as expected. ",
    "drblue": "I'm reposting my workaround from two days ago on issue #34 over at laravel/tinker here:\n\nHad this for a while on a shared server but thanks to the posts by @ingria and @groovix I looked into it and a workaround (until someone knowledgeable fixes it) is to tell psysh to run in another directory where one has write access.\nThis can be done through either placing a config-file in ~/.config/psysh/config.php or as .psysh.php in the root of a Laravel-project (ref).\nHere's my sample config-file (note that the psysh wiki doesn't mention runtimeDir as a config option but the source code lists it as a valid option):\n// Temporary fix for issue #34 in laravel tinker where psysh\n// tries to run in `/run/user/<uid>/psysh`.\n//\n// This overrides that behaviour to `.psysh/` inside the project\nreturn [\n    'runtimeDir'    => './.psysh',\n];. A quick side note from today: When I added runtimeDir to the config options on the psysh wiki, I noticed that the runtimeDir could be overriden by specifying the environment variable XDG_RUNTIME_DIR. In my case with my shared server, it was set to /run/user/1011, which didn't exist on and nor did my user have the neccessary permissions to create it either.\nSo I believe this was the culpit at least in my case.\nMaybe a fix could be to catch the 'Permission denied' on Configuration.php:L352 and revert to using sys_get_temp_dir() as a fallback? This is already done in ConfigPaths.php:L149 so maybe could be moved to it's own method for falling back on?\nJust thinking out loud - take it with a grain of salt =).. ",
    "TheBigK": "I'm facing this issue as well. In my case, even adding \nreturn [\n    'runtimeDir'    => './.psysh',\n];\nin the laravel root directory didn't work. Would really appreciate a fix. . @rvsth - When you are switching user; use su - USER instead of su USER. That - after su makes all the difference. Give it a try. . ",
    "adamgreenough": "~~Can't get this to work in a shared CloudLinux environment despite adding the suggested code. Any ideas?~~\n``\n[vividwelldev@orcus ~]$ php artisan tinker\n// Temporary fix for issue #34 in laravel tinker where psysh\n// tries to run in/run/user//psysh.\n//\n// This overrides that behaviour to.psysh/` inside the project\nreturn [\n        'runtimeDir'    => './temp/.psysh',\n];\n   ErrorException  : mkdir(): Permission denied\nat /home/vividwelldev/vendor/psy/psysh/src/Configuration.php:363\n    359|             $this->runtimeDir = ConfigPaths::getRuntimeDir();\n    360|         }\n    361| \n    362|         if (!is_dir($this->runtimeDir)) {\n\n363|             mkdir($this->runtimeDir, 0700, true);\n    364|         }\n    365| \n    366|         return $this->runtimeDir;\n    367|     }\n\nException trace:\n1   mkdir(\"/run/user/5559/psysh\")\n      /home/vividwelldev/vendor/psy/psysh/src/Configuration.php:363\n2   Psy\\Configuration::getRuntimeDir()\n      /home/vividwelldev/vendor/psy/psysh/src/Shell.php:198\nPlease use the argument -v to see more details.\n```\nEDIT: Doh! Of course the config file needs an opening <?php tag. @TheBigK I wonder if this may fix for you too, or perhaps you are smarter than I. :P I'll leave this here just in case anyone else has the issue.. ",
    "alberto-bottarini": "This error occurs because you switch user (guessing using su) without \"dash\" option.\nReplace su www-data with su - www-data and everything should works!\npsysh tries to write runtime data in \"original user\" folder, instead of in \"current user\" folder...\nPS my \"current user\" has XDG_RUNTIME_DIR env defined. Switching user without -, forced www-data to use the same env variable, while www-data hasn't write permission in that folder.. ",
    "fgilio": "Thanks @alberto-bottarini!. ",
    "rvsth": "\nI'm facing this issue as well. In my case, even adding\nreturn [\n  'runtimeDir'    => './.psysh',\n];\nin the laravel root directory didn't work. Would really appreciate a fix.\n\nmake sure you are making a php file, meaning dont forget to put \"<?php\" tag at the very beginning. ",
    "tbruckmaier": "You can also set XDG_RUNTIME_DIR on the fly if you do not want to create an extra config file:\nsh\nXDG_RUNTIME_DIR=../.psysh php artisan tinker\nOr if you want to use a temp directory (though a new psysh environment is created each time):\nsh\nXDG_RUNTIME_DIR=$(mktemp -d) php artisan tinker. ",
    "xeBuz": "I got the same error:\n\nPHP Fatal error:  Default value for parameters with a class type hint can only be NULL in /usr/local/Cellar/psysh/0.8.17/libexec/vendor/symfony/console/Application.php on line 83\nFatal error: Default value for parameters with a class type hint can only be NULL in /usr/local/Cellar/psysh/0.8.17/libexec/vendor/symfony/console/Application.php on line 83\n\nPHP 5.6.32  psysh 0.8.17 macOS 10.13.2. ",
    "greg0ire": "I shall try that, thanks! . Found a simple answer: echo \"doc array_search\"|psysh. ```\ncat ~/bin/psysh-wrapper \n!/bin/bash\necho \"doc $1\"|psysh\n```\nset keywordprg=psysh-wrapper. ",
    "bartonhammond": "Perfect - that did it.  Thanks. I don't need this now that I've changed to Behat Mink extension - seems Mink closes the windows on finish so I don't have browser windows scattered around.\n. Thanks - that's awesome!. Ah - that makes sense, to just use use;\nThanks!\nOn Wed, Jan 3, 2018 at 3:41 PM, Justin Hileman notifications@github.com\nwrote:\n\nThe PsySH execution context doesn't automatically inherit use statements\nfrom where it's called (though this doesn't sound like a horrible idea, if\nit isn't too weird to implement). This means, from inside PsySH, you'll\nhave to either use the full class name, or enter a use statement yourself.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/bobthecow/psysh/issues/456#issuecomment-355135473,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABORPGd1bf8rJW-p9enjsIUBQeALnR74ks5tG_QjgaJpZM4RSL-_\n.\n. Replacing the shell_exec sounds good to me.  Hadn\u2019t thought about that.  . \n",
    "carusogabriel": "@bobthecow Oh, I missed that if/else. Okay, thanks for the explanation anyway :smiley: . @bobthecow I don't document they either, but these ones with dataProviders, are important :)\n@theofidry Bump to 7.1 is out of the question, I guess :grin:. ",
    "voronkovich": "What's the benefit?\n```\n\n\n\nstrlen('psysh') < strlen('php -a')\n=> true\n```. \n\n\n",
    "torinaki": "@voronkovich there two points:\n1. Personal habit to write php -a. I do not like to remember multiple commands which I don't need a lot. \n2. There might be more than one developer that is using development server which might not be aware of psysh. ",
    "rohanpande": "Hello sir, \nSorry for the delay in reply, \nWhen I do ls -al --functions I got the escape codes. \n\n\nCurrently I have disabled the 'colorMode' => \\Psy\\Configuration::COLOR_MODE_DISABLED as my Iterm2 terminal & default terminal too could not able to escape colorCodes properly. \n\n\nAfter disabling colorMode - all texts became readable \n\n\nI am using Meslo LG S DZ for powerline font \n\n\nI have installed zsh shell \n\n\nOnce again, Thank you for this wonderful library. It is helping a lot in learning core php. \nThank you \n. Hello Sir, \nClosing this issue as it is only occurring on my machine and not others \nThank you . ",
    "amenk": "Understood.\nUnfortunately Contao does not do the same ... \nI am using it in https://github.com/imi-digital/imi-conrun - which is supposed to work with most versions of Contao, so I properly can also not convince the Contao maintainers to check for function_exists.\nI have to check how I can ensure that Contao is loaded first. . Wait a second .. I guess PsySh would not need the dump() function - just dumper itself which can also be called via a class? Maybe it is a bad idea for widely used composer packages to \"pollute\" the global namespace.. :thinking: . I decided to not use PsySH in conrun for now ... will just leave the interactive console out for now and concentrate on using PsySH in non-Contao projects :-). ",
    "peterchaula": "Ah, thank you. . My bad. Sorry!. ",
    "adam1010": "I was able to reproduce the problem using just Artisan commands, so at this point it appears the bug is with Laravel and not Psy -- I will file this issue with Laravel instead.. I found the solution so I'll post it here in case anyone else runs into this. The problem is actually with xdebug\nIn PHPStorm you need to set Languages > PHP > Debug > Max Simultaneous Connections\nBy default it is 1 for some reason, so just jack it up to 5 and you're all set!. ",
    "m1guelpf": "@bobthecow Done!. ",
    "przemoli": "Is this code slated for the next release? What features are potentially affected by this change?\n(New to Psysch, so I can't test for BC, but I will explore on my own anyway, so I can do some testing too)\nPS Symfony 4 maker bundle (basically their official CLI tool), relies on nikic/php-parser 4.0+, that's why I'm interested in this PR.. ",
    "nathanaelphilip": "ok, thanks @bobthecow ! i\u2019ll try that :). no go. still getting the timeout issue I\u2019m afraid.. @bobthecow i think it may have something to do with me using Nanobox. I\u2019ll keep this thread updated if/when I find out anything.. @bobthecow turns out it was just my internet being really slow \ud83d\ude02\nThanks for you response!. ",
    "alvahro": "Hi! thanks for the quick response!\n Here is the output of the Psy/info():\n>>>  Psy\\info()\n=> [\n     \"PsySH version\" => \"v0.8.17\",\n     \"PHP version\" => \"5.6.30\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"error logging level\" => 32767,\n     \"config file\" => [\n       \"default config file\" => null,\n       \"local config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"updates\" => [\n       \"update available\" => true,\n       \"latest release version\" => \"v0.8.18\",\n       \"update check interval\" => \"weekly\",\n       \"update cache file\" => \"~/.config/psysh/update_check.json\",\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => true,\n       \"posix available\" => true,\n     ],\n     \"readline\" => [\n       \"readline available\" => false,\n     ],\n     \"history\" => [\n       \"history file\" => \"~/.config/psysh/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => false,\n       \"custom matchers\" => [],\n       \"bracketed paste\" => false,\n     ],\n   ]. ",
    "attrib": "I have the same issue now with PHP 7.2 on MacOS. Installing php using homebrew (brew install php@7.2).\nReadline support is enabled\n```\nreadline\nReadline Support => enabled\nReadline library => EditLine wrapper\nDirective => Local Value => Master Value\ncli.pager => no value => no value\ncli.prompt => \\b >  => \\b >\n```\nPsy/info() is not working anymore?\nPsy Shell v0.9.9 (PHP 7.2.13 \u2014 cli) by Justin Hileman\nPsy/info()\nPHP Fatal error:  Call to undefined function info() in Psy Shell code on line 1. I got it fixed on our side, wasn't related to php at all.\nI'm using drush, which includes psysh. There was a similar issue there https://github.com/drush-ops/drush/issues/3309 and they describe it as a problem with colliding auto loaders in composer when you install stuff globally - https://pantheon.io/blog/trouble-two-autoloaders. ",
    "connordavison": "The quick response is much appreciated - thanks!. ",
    "jrgilman": "Sorry for the vague initial post, should've thought to include more info. Here you go:\n\\Psy\\info():\n```\n\n\n\n\\Psy\\info()\n=> [\n     \"PsySH version\" => \"v0.8.18\",\n     \"PHP version\" => \"7.1.16\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"error logging level\" => 32767,\n     \"config file\" => [\n       \"default config file\" => null,\n       \"local config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"updates\" => [\n       \"update available\" => true,\n       \"latest release version\" => \"v0.9.3\",\n       \"update check interval\" => \"never\",\n       \"update cache file\" => \"~/.config/psysh/update_check.json\",\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => false,\n       \"posix available\" => true,\n     ],\n     \"readline\" => [\n       \"readline available\" => true,\n       \"readline enabled\" => true,\n       \"readline service\" => \"Psy\\Readline\\Libedit\",\n       \"readline library\" => \"EditLine wrapper\",\n     ],\n     \"history\" => [\n       \"history file\" => \"~/.config/psysh/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => true,\n       \"custom matchers\" => [],\n       \"bracketed paste\" => false,\n     ],\n   ]\n```\n\n\n\nDockerfile:\n```\nFROM php:7.1-fpm\nCOPY php.ini /usr/local/etc/php/\nRUN echo \"UTC\" > /etc/timezone\nRUN apt-get update && apt-get install -y libxml2-dev \\\n                                         libcurl4-openssl-dev \\\n                                         libzip-dev \\\n                                         libmcrypt-dev \\\n                                         libgd-dev \\\n                                         cron\nRUN docker-php-ext-install pdo_mysql \\\n                           mbstring \\\n                           xml \\\n                           curl \\\n                           zip \\\n                           mcrypt \\\n                           gd\nWORKDIR /tmp\nCOPY env-check.sh /tmp\nCOPY envsubst /usr/local/sbin\nRUN echo \" *  * * php /var/www/artisan schedule:run >> /dev/null 2>&1\" >> temp_cron \\\n && crontab temp_cron \\\n && rm temp_cron\nRUN yes | pecl install xdebug\nCOPY xdebug.ini /usr/local/etc/php/conf.d\nWORKDIR /var/www\nCOPY --chown=www-data:www-data www /var/www\nThis is a total clusterfuck, I will look into not making this so shitty later.\nI'd rather the root user run a watcher of the www-data user's php-fpm process.\nCMD /tmp/env-check.sh \\\n && chown -R www-data:www-data /var/www \\\n && php-fpm\n```. Strange, I know the error still happens without those files because I've been dealing with this since I first started using docker + php. I'll try to see if maybe it's not just an issue for me with my php containers, but I've never seen it with anything else...\nNote, the error doesn't happen if your terminal is 80 characters long (that's what I've had to do in order to avoid this error). Your terminal needs to be longer than 80 characters.. @bobthecow This can be closed. This seems to be an issue with docker itself.. ",
    "systemovich": "I was using it in Git Bash in Windows. The Up arrow worked as expected in an Ubuntu virtual machine.. ",
    "dakujem": "Psysh works very well in Cmder / ConEmu on Windows. Cmder is a perfect replacement for standard cmd.. ",
    "dmitriyshashkin": "Thank you very much for such a detailed explanation. I've seen the way others do it, but my idea was not to create a new entry point and also boot my kernel only after I call the custom command. I thought that doing something like $this->getApplication()->setScopeVariables(['container' => $container]); inside my command should suffice. Do I understand correctly that setScopeVariables call has no effect after the shell has been already loaded? . Fantastic! I'll check it out. ",
    "codecov[bot]": "Codecov Report\n\nMerging #509 into develop will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\ndevelop     #509   +/-\n==========================================\n  Coverage      58.12%   58.12%         \n  Complexity      2069     2069         \n==========================================\n  Files            128      128         \n  Lines           4982     4982         \n==========================================\n  Hits            2896     2896         \n  Misses          2086     2086\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/Util/Docblock.php | 100% <100%> (\u00f8) | 25 <0> (\u00f8) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4a2ce86...1964655. Read the comment docs.\n. # Codecov Report\nMerging #517 into develop will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\ndevelop     #517      +/-\n=============================================\n+ Coverage      58.16%   58.21%   +0.04%   \n- Complexity      2073     2075       +2   \n=============================================\n  Files            128      128            \n  Lines           4989     4992       +3   \n=============================================\n+ Hits            2902     2906       +4   \n+ Misses          2087     2086       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/Shell.php | 72.59% <100%> (+0.45%) | 170 <2> (+2) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f7c2a2b...152e328. Read the comment docs.\n. # Codecov Report\nMerging #518 into develop will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\ndevelop     #518      +/-\n=============================================\n+ Coverage      58.18%   58.19%   +<.01%   \n- Complexity      2073     2076       +3   \n=============================================\n  Files            128      128            \n  Lines           4989     4992       +3   \n=============================================\n+ Hits            2903     2905       +2   \n- Misses          2086     2087       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/CodeCleaner/ValidClassNamePass.php | 100% <100%> (\u00f8) | 61 <3> (+3) | :arrow_up: |\n| src/Shell.php | 72.13% <0%> (-0.25%) | 168% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4f5b6c0...2a48fbd. Read the comment docs.\n. # Codecov Report\nMerging #525 into develop will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\ndevelop     #525      +/-\n=============================================\n- Coverage      58.26%   58.24%   -0.02%   \n  Complexity      2084     2084            \n=============================================\n  Files            128      128            \n  Lines           5000     5000            \n=============================================\n- Hits            2913     2912       -1   \n- Misses          2087     2088       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/Shell.php | 71.92% <0%> (-0.25%) | 169% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 29670a1...fedc2b2. Read the comment docs.\n. # Codecov Report\nMerging #527 into develop will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\ndevelop     #527   +/-\n==========================================\n  Coverage      58.24%   58.24%         \n  Complexity      2084     2084         \n==========================================\n  Files            128      128         \n  Lines           5000     5000         \n==========================================\n  Hits            2912     2912         \n  Misses          2088     2088\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aa6280d...bd2bbd0. Read the comment docs.\n. # Codecov Report\nMerging #529 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #529   +/-\n=========================================\n  Coverage     58.24%   58.24%         \n  Complexity     2084     2084         \n=========================================\n  Files           128      128         \n  Lines          5000     5000         \n=========================================\n  Hits           2912     2912         \n  Misses         2088     2088\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9aaf295...f00ba9e. Read the comment docs.\n. # Codecov Report\nMerging #530 into develop will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\ndevelop     #530      +/-\n=============================================\n+ Coverage      58.24%   58.28%   +0.04%   \n- Complexity      2084     2087       +3   \n=============================================\n  Files            128      128            \n  Lines           5000     5005       +5   \n=============================================\n+ Hits            2912     2917       +5   \n  Misses          2088     2088\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/CodeCleaner/InstanceOfPass.php | 100% <100%> (\u00f8) | 8 <0> (+3) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9aaf295...ca7134b. Read the comment docs.\n. # Codecov Report\nMerging #531 into develop will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\ndevelop     #531   +/-\n==========================================\n  Coverage      58.14%   58.14%         \n  Complexity      2033     2033         \n==========================================\n  Files            128      128         \n  Lines           5005     5005         \n==========================================\n  Hits            2910     2910         \n  Misses          2095     2095\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/Shell.php | 71.92% <0%> (-0.25%) | 168% <0%> (\u00f8) | |\n| src/VersionUpdater/IntervalChecker.php | 55.55% <0%> (+3.7%) | 13% <0%> (\u00f8) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 827e79d...8a6df1f. Read the comment docs.\n. # Codecov Report\nMerging #532 into master will decrease coverage by 0.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster     #532      +/-\n============================================\n- Coverage     58.24%   58.17%   -0.07%   \n- Complexity     2084     2103      +19   \n============================================\n  Files           128      128            \n  Lines          5000     5006       +6   \n============================================\n  Hits           2912     2912            \n- Misses         2088     2094       +6\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/Command/Command.php | 2.91% <0%> (-0.19%) | 40% <0%> (+19%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9aaf295...284840a. Read the comment docs.\n. # Codecov Report\nMerging #533 into master will decrease coverage by 0.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster     #533      +/-\n============================================\n- Coverage     58.24%   58.17%   -0.07%   \n- Complexity     2084     2103      +19   \n============================================\n  Files           128      128            \n  Lines          5000     5006       +6   \n============================================\n  Hits           2912     2912            \n- Misses         2088     2094       +6\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/Command/Command.php | 2.91% <0%> (-0.19%) | 40% <0%> (+19%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9aaf295...b9419b0. Read the comment docs.\n. # Codecov Report\nMerging #534 into develop will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\ndevelop     #534      +/-\n=============================================\n- Coverage      58.23%   58.21%   -0.02%   \n  Complexity      2106     2106            \n=============================================\n  Files            128      128            \n  Lines           5011     5011            \n=============================================\n- Hits            2918     2917       -1   \n- Misses          2093     2094       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/ExecutionClosure.php | 66.66% <\u00f8> (\u00f8) | 18 <0> (\u00f8) | :arrow_down: |\n| src/Command/TimeitCommand/TimeitVisitor.php | 100% <\u00f8> (\u00f8) | 16 <0> (\u00f8) | :arrow_down: |\n| src/CodeCleaner/NoReturnValue.php | 100% <\u00f8> (\u00f8) | 1 <0> (\u00f8) | :arrow_down: |\n| src/Shell.php | 71.92% <0%> (-0.25%) | 169% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a52ac07...e46468f. Read the comment docs.\n. # Codecov Report\nMerging #535 into develop will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\ndevelop     #535   +/-\n==========================================\n  Coverage      58.21%   58.21%         \n  Complexity      2106     2106         \n==========================================\n  Files            128      128         \n  Lines           5011     5011         \n==========================================\n  Hits            2917     2917         \n  Misses          2094     2094\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6145043...5a4bfd8. Read the comment docs.\n. # Codecov Report\nMerging #536 into develop will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\ndevelop     #536      +/-\n=============================================\n- Coverage      58.23%   58.22%   -0.02%   \n  Complexity      2106     2106            \n=============================================\n  Files            128      128            \n  Lines           5011     5012       +1   \n=============================================\n  Hits            2918     2918            \n- Misses          2093     2094       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/ParserFactory.php | 80% <100%> (+1.05%) | 10 <0> (\u00f8) | :arrow_down: |\n| src/Shell.php | 71.92% <0%> (-0.25%) | 169% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a52ac07...7e2d5a9. Read the comment docs.\n. # Codecov Report\nMerging #537 into develop will decrease coverage by 0.63%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\ndevelop     #537      +/-\n=============================================\n- Coverage      58.22%   57.58%   -0.64%   \n+ Complexity      2106     2031      -75   \n=============================================\n  Files            128      128            \n  Lines           5012     4819     -193   \n=============================================\n- Hits            2918     2775     -143   \n+ Misses          2094     2044      -50\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/CodeCleaner/ListPass.php | 87.09% <0%> (-12.91%) | 23% <0%> (\u00f8) | |\n| src/Command/TimeitCommand/TimeitVisitor.php | 93.54% <0%> (-6.46%) | 16% <0%> (\u00f8) | |\n| .../TabCompletion/Matcher/ObjectAttributesMatcher.php | 75% <0%> (-5.77%) | 8% <0%> (-1%) | |\n| src/TabCompletion/Matcher/ObjectMethodsMatcher.php | 80% <0%> (-5.19%) | 9% <0%> (-2%) | |\n| src/Command/DumpCommand.php | 55% <0%> (-4.1%) | 6% <0%> (\u00f8) | |\n| ...c/TabCompletion/Matcher/ClassAttributesMatcher.php | 93.33% <0%> (-3.89%) | 7% <0%> (-3%) | |\n| src/Command/EditCommand.php | 37.09% <0%> (-3.82%) | 19% <0%> (\u00f8) | |\n| src/Command/SudoCommand.php | 45.71% <0%> (-2.94%) | 10% <0%> (\u00f8) | |\n| src/Command/ClearCommand.php | 75% <0%> (-2.78%) | 2% <0%> (\u00f8) | |\n| src/Command/WhereamiCommand.php | 22.44% <0%> (-2.56%) | 17% <0%> (\u00f8) | |\n| ... and 59 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c2a50f2...c2edb93. Read the comment docs.\n. # Codecov Report\nMerging #538 into master will decrease coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster     #538      +/-\n============================================\n- Coverage     58.24%   58.19%   -0.05%   \n- Complexity     2084     2103      +19   \n============================================\n  Files           128      128            \n  Lines          5000     5006       +6   \n============================================\n+ Hits           2912     2913       +1   \n- Misses         2088     2093       +5\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/Output/ShellOutput.php | 44.44% <100%> (\u00f8) | 22 <0> (\u00f8) | :arrow_down: |\n| src/Command/Command.php | 2.91% <0%> (-0.19%) | 40% <0%> (+19%) | |\n| src/Shell.php | 72.16% <0%> (+0.24%) | 169% <0%> (\u00f8) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9aaf295...8455ae1. Read the comment docs.\n. # Codecov Report\nMerging #541 into develop will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\ndevelop     #541   +/-\n==========================================\n  Coverage      58.18%   58.18%         \n  Complexity      2031     2031         \n==========================================\n  Files            128      128         \n  Lines           5001     5001         \n==========================================\n  Hits            2910     2910         \n  Misses          2091     2091\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3785c71...b1e4c8c. Read the comment docs.\n. # Codecov Report\nMerging #553 into master will decrease coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster     #553      +/-\n============================================\n- Coverage     58.24%   58.17%   -0.07%   \n- Complexity     2084     2103      +19   \n============================================\n  Files           128      128            \n  Lines          5000     5007       +7   \n============================================\n+ Hits           2912     2913       +1   \n- Misses         2088     2094       +6\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| src/Readline/GNUReadline.php | 87.75% <100%> (+0.25%) | 24 <0> (\u00f8) | :arrow_down: |\n| src/VersionUpdater/IntervalChecker.php | 51.85% <0%> (-3.71%) | 13% <0%> (\u00f8) | |\n| src/Command/Command.php | 2.91% <0%> (-0.19%) | 40% <0%> (+19%) | |\n| src/Shell.php | 72.16% <0%> (+0.24%) | 169% <0%> (\u00f8) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9aaf295...56035e3. Read the comment docs.\n. \n",
    "corytheboyd": "Same thing happens for me. @bobthecow It's... a long story lol. We were trying to get things to work with HHVM PHP-5.6 which was just pure terribleness. We are using a new base image now with PHP-7.2 and have no such problems.. ",
    "schnittstabil": "Ref: humbug/box#253. ",
    "digitall-it": "To solve issue #515 I installed a newer version of PHP in the same branch, then had to change again the permissions of the temporary session files folder and the problem went away.. what's best of the two?. Issuing a php -i says\n```\nreadline\nReadline Support => enabled\nReadline library => EditLine wrapper\nhowever if I press CTRL+R i do not get the reverse-i-search prompt.\n=> [\n     \"PsySH version\" => \"v0.7.2\",\n     \"PHP version\" => \"7.0.30\",\n     \"default includes\" => [],\n     \"require semicolons\" => false,\n     \"error logging level\" => 32767,\n     \"config file\" => [\n       \"default config file\" => null,\n       \"local config file\" => null,\n       \"PSYSH_CONFIG env\" => false,\n     ],\n     \"pcntl\" => [\n       \"pcntl available\" => true,\n       \"posix available\" => false,\n     ],\n     \"readline\" => [\n       \"readline available\" => true,\n       \"readline enabled\" => true,\n       \"readline service\" => \"Psy\\Readline\\Libedit\",\n       \"readline library\" => \"EditLine wrapper\",\n     ],\n     \"history\" => [\n       \"history file\" => \"/home/vagrant/.config/psysh/psysh_history\",\n       \"history size\" => null,\n       \"erase duplicates\" => null,\n     ],\n     \"docs\" => [\n       \"manual db file\" => null,\n       \"sqlite available\" => true,\n     ],\n     \"autocomplete\" => [\n       \"tab completion enabled\" => true,\n       \"custom matchers\" => [],\n     ],\n   ]\n``. By the way, TAB completion works. It's reverse-i-search that doesn't work. I'm on a Mac in a standard terminal. PsySH is installed in vagrant machine running CentOS 7 that I access usingvagrant ssh`. In the bash shell, reverse-i-search works. Should I try another keyboard shortcut?\nAlso, the history command works, but the \"history size\" is null in \\Psy\\info(). The current user is the PHP user and can read and write to the history file.\na ls -lh /home/vagrant/.config/psysh/./psysh_history\nreports instead\n-rw------- 1 vagrant vagrant 15K Aug  1 07:37 /home/vagrant/.config/psysh/./psysh_history. I've tried that, but to no avail. I press this keystroke all the time.... ",
    "lov3catch": "Oh, thanx!. ",
    "utikeev": "I looked it up and it seems that you don't work through this situation in CodeCleaner/ListPass.php (lines 77-82):\nphp\n$value = ($item instanceof ArrayItem) ? $item->value : $item;\nif (!$value instanceof Variable) {\n                $msg = 'Assignments can only happen to writable values';\n                throw new ParseErrorException($msg, $item->getLine());\n            }\nAlthough this piece of code is parsed by PhpParser to:\nphp\nvar: Expr_Array(\n                items: array(\n                    0: Expr_ArrayItem(\n                        key: null\n                        value: Expr_ArrayDimFetch(\n                            var: Expr_Variable(\n                                name: a\n                            )\n                            dim: Scalar_LNumber(\n                                value: 0\n                            )\n                        )\n                        byRef: false\n                    )\n                    1: Expr_ArrayItem(\n                        key: null\n                        value: Expr_ArrayDimFetch(\n                            var: Expr_Variable(\n                                name: a\n                            )\n                            dim: Scalar_LNumber(\n                                value: 1\n                            )\n                        )\n                        byRef: false\n                    )\n                )\n            )\nThe same problem comes with getting object fields.. @bobthecow\nThis still won't work with deeper entities, I think. Consider some of these cases.\n```php\n$a = [];\n[$a[0][0][0], $a[0][0][1]] = [9, 8];\n$b = new \\stdClass;\n[$b->x[0], $b->y[1]] = [9, 8];\n$c = [];\n$c[0] = new \\stdClass;\n[$c[0]->x[0], $c[0]->y[1]] = [9, 8];\n$d = [];\n$x = new \\stdClass;\n$x->a = 1;\n$x->b = 2;\n[$d[$x->a + $x->b]] = [7];\n```. ",
    "4n70w4": "@theofidry thanx, --prefer-dist solved one of the problems.\nBut the bloated repository size is disrespect for library users.. ",
    "baukevdw": "\nThanks! Do you mind pointing this pull request at the develop branch?\n\nIt is pointing to the develop branch:\nbaukevdw wants to merge 1 commit into bobthecow:develop from baukevdw:master. ",
    "andreybolonin": "@bobthecow changed base branch to develop. ",
    "zored": "Thank you for response!\nDoes fuzzy search work?\n```\nActual:\n\n\n\nnew \\A\\B\\C\\F\nnew \\A\\B\\C\\Foo;\n\n\n\nExpected:\n\n\n\nnew Fo\nnew \\A\\B\\C\\Foo;\n```\n\n\n\nI came from PhpStorm and I don't remember namespace name of each class \ud83d\ude04 . ",
    "dciancu": "@GrahamCampbell It doesn't work with xdebug disabled either. xdebug works very well with php 7.3 from what I have tested, had no issue with it.. @GrahamCampbell not disabled by xdebug.enable, but removed from php.ini I meant. ",
    "dportalesr": "Apparently Xdebug added support for PHP 7.3 recently\nhttps://bugs.xdebug.org/view.php?id=1519\nhttps://github.com/xdebug/xdebug/pull/430\nAs @GrahamCampbell mentions there are still a couple of issues in their tracker. Not sure how to generate a report of this problem for them.. > Are y'all on Homebrew + Mojave? \nYeah.. > May I know how do you open this file and drop in the code you mentioned? Thanks.\n@johnchendev Try creating a file at ~/.config/psysh/config.php if not already there.\nphp\n<?php\nreturn [\n  'usePcntl' => false,\n];\nThat's it.. ",
    "chapeupreto": "I have a fresh PHP7.3 install (brew install php@7.3) with no xdebug and that very same problem is happening to me as well:\n\n. Just to let you know: same problem with PHP7.3 running on macOS High Sierra. > > Just to let you know: same problem with PHP7.3 running on macOS High Sierra\n\nAlso installed via Homebrew?\n\nYes!. Same problem here with php 7.3.1 (installed via homebrew). ",
    "alphametric": "Same here, Homebrew and Mojave without xdebug installed.. ",
    "CQD": "Ubuntu 16.04 + PHP 7.3 (ppa:ondre/php) + psysh 0.9.9 works fine.\nNo segfault when running https://github.com/bobthecow/psysh/issues/540#issuecomment-445706731 . ",
    "hulkur": "As a workaround:\nIn php.ini set pcre.jit=0\nNote comment below.. ",
    "Majkl578": "@hulkur Please don't recommend people to disable JIT, report a bug to bugs.php.net instead and only suggest it as a temporary workaround. JIT is an important performance feature.. ",
    "johnchendev": "@bobthecow, Thanks for the workaround. However, I was not able to find the config file that you referenced.\n\nIt has something to do with forking / pcntl. I'm trying to sort it out. In the meantime, you can use PsySH by disabling pcntl support, by adding this to your config file:\nreturn [\n  'usePcntl' => false,\n];\n\nMay I know how do you open this file and drop in the code you mentioned? Thanks.\nRunning Mac Mojave. ",
    "ruudk": "@bobthecow Thanks for posting the issue here. I'm using a completely different package (Resque) that also forks and crashes on preg_match. Also on Homebrew Mojave. Is there an issue on the Homebrew repository already that tracks this? . Added issue @ Homebrew https://github.com/Homebrew/homebrew-core/issues/35491 . ",
    "driesvints": "PHP 7.3.1 was released. Let's see if this works again when Homebrew has updated its PHP installation.. @chapeupreto 7.3.1 isn't available yet on Homebrew I think?. Nvm, just saw that it is. That's unfortunate.. I believe this problem will be solved once PHP 7.3.2 & xdebug 2.7.0 are out: \nhttps://bugs.xdebug.org/view.php?id=1583#c4823\nhttps://bugs.php.net/bug.php?id=77287. Just tested with PHP 7.3.2 (update through Homebrew) and unfortunately Tinker is still broken.\nPHP 7.3.2 (cli) (built: Feb  5 2019 22:19:09) ( NTS )\nCopyright (c) 1997-2018 The PHP Group\nZend Engine v3.3.2, Copyright (c) 1998-2018 Zend Technologies\n    with Zend OPcache v7.3.2, Copyright (c) 1999-2018, by Zend Technologies\nI haven't tested with a built-from-source. I believe we might need to wait until this PR is merged for Homebrew: https://github.com/Homebrew/homebrew-core/pull/36033. @GrahamCampbell at the moment I don't have the time to try this out. . Can confirm the problem still isn't fixed on PHP 7.3.3 from Homebrew.. ",
    "mkalkbrenner": "I assume the problem is introduced into homebrew since the commit of https://github.com/Homebrew/homebrew-core/pull/35660. ",
    "chenyongze": "; Enables or disables JIT compilation of patterns. This requires the PCRE\nphp.ini\n\u8fd9\u4e2a\u6539\u4e3a\uff1a\npcre.jit=0. ",
    "HaroldPutman": "@GrahamCampbell  I can confirm it does NOT work with phpenv + phpbuild (7.3.2) on macOS Mojave. ",
    "beschoenen": "PHP 7.3.3 seems to have fixed this issue.\nLinux defcon 4.14.78-gentoo #8 SMP Sat Nov 17 16:29:02 CET 2018 x86_64 Intel(R) Xeon(R) CPU E3-1231 v3 @ 3.40GHz GenuineIntel GNU/Linux\n```sh\n\u279c  cli ./php psysh \nPsy Shell v0.9.9 (PHP 7.3.3 \u2014 cli) by Justin Hileman\nUnable to check for updates\n\n\n\necho \"hi\";\nhi\u23ce\n```. \n\n\n",
    "ngocphamm": "Not for PHP 7.3.3 from Homebrew though :(. ",
    "Plopix": "I have still the issue too. Not fixed on PHP 7.3.3 from Homebrew. ",
    "khsing": "@beschoenen not yet, still need setting pcre.jit=0 in php.ini to make it work.. ",
    "kermorgant": "Oh, I thought PHP's built-in web server was the exception.. ",
    "xikaos": "\nIt works with PHP\u2019s built in webserver, but you have to be running it as a foreground process in your interactive shell.\n\nHello @bobthecow,\nWould you mind to clarify how to run PHP built in webserver as a foreground process in the interactive shell? That would work in a Laravel project?\nThanks in advance!. ",
    "zhujinxuan": "I see.  Perhaps there are also similar trialing comma problems in PHP-Parser and tolerant-PHP-Parser https://github.com/php/php-langspec/pull/229\nI will submit PRs about that to PHP-parser before Christmas, then we can see whether the problem is fixed by a simple update.. Great!  I will closed this issue because it is fixed.. ",
    "jhdxr": "Duplicate of #540 . ",
    "vicb": "That was my guess... I think a // todocomment might be more helpful.\n. :)\n. ",
    "ceeram": "missing newline\n. i noticed you use 2.0 dev, which defaults to psr2, so no need to set -concat_without_spaces, as it will no longer run by default. Also be aware there are some renamings of fixers coming up in 2.0\n. alright :)\n. ",
    "ameech": ":cry: 5.3 doesn't like the shorthand syntax. https://travis-ci.org/bobthecow/psysh/jobs/76518034\n. ",
    "pana1990": "done! :)\n. ",
    "the-eater": "use escapeshellarg. Don't you want the no-exec to override exec? as no-exec is always safer?. Ah I said nothing you don't allow both. "
}