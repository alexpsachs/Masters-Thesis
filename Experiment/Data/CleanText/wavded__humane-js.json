{
    "wavded": "this was not addressed with fade transitions as the MSIE transition filter API requires content to change in addition to taking snapshots of the state of an element.  went to use the JS api for opacity filter instead, but lowered interval to be more performant - committed 07f785fc76d664552e188f02c5eaf7749b40a733\n. opted for forcing new messages in stead of stacking, to keep lib simple\n. thanks for your report, I cannot duplicate on Safari 5.0.5 on Windows but will try to grab a Mac and see if I can duplicate there.  I did notice an issue on iOS Safari where the notifications wouldn't popup.  Could you try something for me?\nFrom the CSS file remove any references to:\nvisibility: hidden/visible\nAnd see if it works?\n. yeah not ideal, more of a hack, i'll was able to dup on Safari on Mac (but not Windows, same ver), this seems like a Safari bug (namely, Safari doesn't animate the visibility property the same way Chrome, FF, etc do, it completely borks the whole animation), i'll play around with your workaround and see if someone else has reported this issue.\n. opened ticket - https://bugs.webkit.org/show_bug.cgi?id=64166\n. ticket confirmed, dup of this one -> https://bugs.webkit.org/show_bug.cgi?id=29984, patch in place, looks like it has to deal with when accelerated composition is on.\n. fixed in 6901b8b8022e49e337c50d2558ae4d1db0d8e4e9\n. hey sweet, i like it!\n. thanks, feel free to put up a description/creds on here if you want\nhttps://github.com/wavded/humane-js/wiki/Themes\n. ahh right because its transitioning from the last class, i'll take a peak\n. ok, it will restore the original class after completion now BUT there is always the possibility that the next notification (depending on the theme) may occur before the original class is restored.  e.g. for the 'jackedup' theme, if you select the success, wait, and then select the log example, it will be fine, but if you click one after another, there is still a little green that will show, which IMO is ok, maybe even desirable in some cases.  Thanks for the report.\n. There are a couple options already available to you in this case, you can shorten the timeout, or use the forceNew option to force the next notification.  Stacking is hard here because there is so much flexibility to what themes you can add but each theme would have to do its own type of stacking, libnotify is the obvious one as it could stack like growl but what about bigbox or jackedup.\nOther alternatives to stacking are logging which has also been suggested but IMO that would be better as an extension to this project and not in the core.  I'll keep this ticket open for discussion.\n. I would like to make this customizable.  One idea I had is to say allow three max for stacking but allow the dev to customize the animation for each separately and the JS will handle the class management, so for example:\n[ 1 ]\n[ 2 ]\n[ 3 ] \n1 was the first in, when its finished, 2 will animated to 1's class and 3 will animate to 2's class and if another notification was added it would animate to 3 if that makes sense.  Thoughts?\n. So I go back and forth on this.  The more I think about it, it seems not to fit the style of humane.js.  Notification systems definitely vary on this point for sure.  As a Linux user, I'm used to one notification at a time, linnotify does this, Ubuntu and Gnome Shell have the same concept.  Enso, for Windows, from which the whole Humane concept was from did one message at a time.  humanmsg, the jQuery plugin, from which this project is derived from, had the same concept.\nI've used humanmsg for a number of years, used Enso on windows before I switched to Linux, and now use humane.js for everything I do (lots of single page apps) and I've never had a problem where I needed to display more than one message at a time.  And if I did, it never seems to be a problem to wait a couple seconds.  We haven't had a single client complaint about it as well.\nMy workaround for this case was allowing forceNew but that was a really crappy hack IMO and I just removed it because we allow all notification levels to be customized now so you can have your errors longer and other messages shorter.  Closing this issue for now.\n. Another thought to is stacking for mobile would be problematic due to the screen size.  These themes are designed to work on mobile as well as desktop although still experimental.  I could expose the message queue to developers to implement your own stacking with what is cued up which could be rechecked by using the callback functionality that is already built.\n. I added custom events to allow for custom stacking and logging implementations (docs on homepage).  The internal queue is constantly being popped and pushed so I just exposed the events in order for someone to keep and manage their own queue depending on their needs.  Events fire when something is added, shown and hidden (removed).\n. ahh must be a bug with the js for the demo, i'll take look, thx for reporting\n. hmmm. actually i am unable to duplicate, do you have steps to reproduce from a clean refresh?\n. nice :), i'll add some text for that, you get so used to working with it you forget it may not be obvious!\n. ok there was an issue particularly with jackedup that wasn't supporting ie which has been addressed now, as far as the scripting error, i can duplicate if i'm running in IE7 mode, it has to do with the css loading on the demo page, if you run any of the themes independently they work.. i'll take a look at later when i've got some more time, thx\n. sheesh you are right, looks horrible in chrome latest, wonder what switched, will take a look soon\n. this is fixed per 3.0.0 release\n. Thanks for the report, I have seen this on iOS for iPhone as well, there is a known issue particularly with Safari running on Mac (PC is fine), that looks like a fix has been rolled out this past month, I haven't tested it yet however.\nhttps://bugs.webkit.org/show_bug.cgi?id=29984\nThere may be a way to workaround the theme so that it doesn't happen.  I however do not own an iPad, you are welcome to play with the theme animation for a solution.  I think a workaround may be achieved by playing with the CSS.  I'll see if I can dig into this as well.\n. Wow, I've tried many of the suggestion in the link below on my iPhone, and can't get that flicker to stop, on the iPhone it flashes black the first animation, and then its fine.  It seem like you have a different experience that it always flickers which is not what I see on the iPhone:  Are you running iOS 5?\nhttp://stackoverflow.com/questions/4651769/ipad-css3-animation-flickers-after-keyboard-use\n. I ran a mobile version of iOS 5, and the flicker is gone for me.  My guess is the bug got fixed.\n. @samyakbhuta could you check your iOS 4 to see if the flicker is gone?  I updated the code so it without glitch on iOS5 and it may have had a positive affect, i just don't have a device to test it.  Thx.\n. ahh, ok, never thought of this use case, we could allow 0 to never 'finish' but then we would need to have some way to finish it.  have you tried setting it to a really high number?\n. just an fyi @kaihendry I added ability to set the timeout to 0 which completely disables the timeout (it stays up unless forever unless you use other options like clickToClose or forceNew\n. Awesome work and great idea, I'll take a peak and run through some tests and let you know.\n. @OiNutter, got a chance to play with it and test it, one quirk I noticed, if I have three notifications queued up and the last one has the callback, it will actually fire after the first animation is finished instead of the last.  Otherwise, it looks good, do you mind fixing up that issue and appending your pull request?\n. My gut would be after each notification.  I think the API reads better, because I'm passing a callback and a message and expect that callback to fire when the message has completed.  In your case, my gut is to do a counter if you know you have other callbacks pending or do a callback chain.\n. Thanks I'll run it through some tests!\n. Awesome, seem to pass great.  I wasn't able to merge so I just pulled in the changes and made a commit.  Added you at a contributer to the docs, thanks much!\n. Agreed, its just running automated tests across browsers that I haven't found a good way to do that.  Maybe jasmine, but visually you have to look at all the browsers to make sure the themes look correct and show up how you want so that part isn't really script-able but yeah...\n. there isn't away to do that currently, right now you can either have the notifications clear after the timeout and additionally (after timeout + mouse movement), but interesting idea... i like it\n. I added a click to close option, viewable on the demo page.\n. This may be akin to what is happening over in issue #9 (also webkit based) \n. There is a known webkit issue that is referenced in #9, my gut is it got fixed in the updated OS.  I was able to work around some of it using z-index instead of visibility.  It is related to the stylesheet and not the JS.  All the JS does it apply the class and throw it back the the browser to animate to that class and that where the flickering comes in.  I have been trying hacks to get it to work but haven't been successful, if you come across one that works well, please let me know!\n. I just tested iOS 5 and the flicker there is gone as well.\n. Confirmed new Android 4 has the flicker gone, noticed that the jqmobile peeps have had better success there as well.  I may just fallback to JS animation for older OS.\n. updated code to work without any glitches on iOS v5 and Android 4, it may have had a positive affect on iOS <5 or Android <4 but currently don't have any devices to test.\n. Apparently, earlier versions of mobile webkit did not like it when you animated the zIndex property, which we don't really need to animate but to make it easier to get up and running all themes just by using transition: all instead of specifying all the components.  It wasn't obvious that this was causing the issue until iOS5 where you saw the element 'behind' other elements at the start of the animation, and in front after... so anyway yippee!\n. hey awesome!  glad to hear!\n. Hmm that looks correct to me.  Are you able to duplicate on the demo site?  I just did a test turned the option on and then clicked a sample and clicked a notification and it closed, do you have a sample page that duplicates the issue?  And which browser you tested?\n. it will remove after the timeout, the clickToClose was just an additional option for a user to remove a popup if they don't want to wait the timeout.  in your case you'd have to set the timeout to a large number... but maybe when i think about it we could modify timeout behavior so if you do:\nhumane.timeout = 0\nIt will do the same, since that is pretty useless atm.\n. I added ability to disable timeout by setting it to 0\n. Good idea, thinking about it.\n. This is now available: e.g.\nhumane.error.timeout = 0\n. Thanks for you pull.  I need to think about this for a little bit.  I don't mind your api but I think it could get out of hand because I imagine the people will want is to customize the other options based on type and the api could blow up more at that point.\njs\nhumane.timeout = { error: 2000, success: 500 };\nhumane.clickToClose = { error: true, success: false };\n...\nOne idea I'm tossing around is:\njs\nhumane.error.timeout = 2000;\nhumane.error.clickToClose = true;\n...\nThat way you visibly know what you've applied to 'error' e.g.  And standard humane.timeout, etc.. would be the fallback.\n. Sure go for it, love the help!\n. this is merged in thanks!\n. From an API standpoint, that's extra work to call remove every time you wanted to force a new one.  I suppose forceNew could call remove internally so you keep the animations but is it important to use forceNew anymore with timeout configurations?\n. remove will just clear the one being shown, it won't clear any that have stocked up since.  i will include this pull request to expose it.  I don't think we want to go down the 'id' route.\n. right, I was thinking the same and wasn't able to duplicate so I just ignored it but I'll take a look again, thanks for the report.\n. fix in place for this now\n. I don't think this is a good idea and here is why.  Setting up options per notification type (rather than per notification) provides you the developer with a notification \"framework\" that keeps your messages to users consistent (logging frameworks do this).  You have done the leg work of defining three types of notifications which is good, my recommendation is to configure those three types using the four provided in humane.\ne.g.\njs\nhumane.log.timeout = 1000;\nhumane.info.timeout = 3000;\nhumane.error.timeout = 0;\nNow you've classified your logging system for your site.  I could see making 'custom' types perhaps in the future, but do sites really need more than four classifications for notifications?  I don't know, I usually use one :)\nMarc\n. You listed three types above, I showed you a configuration for those three types, help me understand why does this not work for you?\n. I agree that is dirty nor will it really do what you want because it will override others in the queue of the same type when its time for them to shine.  The API isn't very good for your use case.  I'll think about it.  Right now I could see doing:\njs\nvar mycustomnotify = humane.create( { type: 'info', timeout: 1000, clickToClose: true } );\nmycustomnotify('hello world')\n. I'll take a peak, is it in a fork?\n. ok @alanhogan, I put this in per the api outlined above, feel free to play around;\n. There isn't support for stacking or logging but there are hooks to add your own (see #7 for the discussion thread)\n. Ahh I see, you could try putting the css for one of the other themes under like humane.humane-info in original.css (and use humane.info to get that theme), if that makes sense.  A little bit of a hack as the API doesn't currently support what you are asking in a simple way.\n. correct, you could use type and put whatever you want in it as long as you make a humane-type class, but again your base css gets inherited so you may want need to pull some of that out and put it in the subclasses so both themes work\n. yeah class and type are sorta the same thing when creating, since it looks for a class called 'humane-{type}'\n. yeah should update the docs (I honestly wasn't sure how many would try what you are doing but its totally doable)... my goal is simplicity, I almost want to gut out the standard humane.info|error|log|success and just have humane and humane.create (where you can roll your own).  humane.create came after the others.\n. this is implemented per 3.0.0 release\n. correct, a zero timeout never times out so you have to force remove it with humane.remove()\n. i'm confused, setting timeout of 0 is supposed to never close yet you want it to after a certain amount of time?  would this be a better case for using waitForMove ?  I guess I'll need help understanding your use case.\n. ahh i see, remove really should take a callback, since what is happening is your next call isn't being queued up until after the animation has finished (and you've set the timeout to 5 seconds), so when it arrives in the queue it is no longer timeout=0 but timeout=5000 (or whatever you set it to).  I'm thinking about enhancements to this API that would make it easier for you do what you want... \n. for now to get what you want, you could either put a setTimeout on your timeout=5000 setting, or just have another function that does humane.remove(); humane.timeout = 5000; humane('your message') and remove humane.timeout = 5000 in your other function\n. i added a callback to the remove function\n. ahh do you have a simple snippet that fails that I could see?\n. thanks, this has been fixed in master, also you can do this as well too:\nhtml\n<body>\n    <p>Automatically Show</p>\n       <script>        \n        humane.log(\"Welcome Back\"); // will fire and show when dom is ready\n      </script>\n </body>\n. you are welcome!  cheers!\n. Please show me the generated HTML, and I will see if I can help you out.  Thanks\n. ahh ok, which browser are you experience this with?  The notifications popped up for me.\n. @hemanth looks like I forgot to recompile the minified JS, works for me now locally, you'll have to pull the latest code\n. ahh did not know that, please update the .styl files as well\n. thank you sir!\n. Good catch, mind submitting a pull?\n. Thanks!\n. appreciate the pull, however this is messy way to do this, setting the global this way is hacky and assumes this code will never be run in strict mode which would just give undefined - http://kangax.github.com/es5-compat-table/strict-mode/\n. maybe we could use window instead, does that break browserify as well?\n. new Function (...) really shouldn't be used as it is basically an eval, that creates a seperate context and additional overhead so i'm glad you changed it.  I will review your code later as I'm a little swamped at the moment.  Thanks!\n. ahh good point @avoidwork\n. I imagine there is common way people are using to setup commonjs module exports, let's research that and find out.\n. @tahu thank you, this landed in 3.0.4 (via cherry pick)\n. Are you aware of any similar API's for other browsers?  I run Linux and you can tap into libnotify but it is not built into the OS like in the new Mac OS (so in other words it probably wouldn't be used).  I can't speak for Windows.  Thanks for starting the conversation.\n. @wnadeau after thinking about this, it feels out of scope of this particular project, it could be a useful addon (currently I don't have a format for writing plugins but you could extend the Humane prototype with a new method - e.g. native) that users could use, or maybe it would be better as a stand alone module?\n. Thanks @JensRoland for the report, I don't use AMD but this sounds like a problem :)  Does AMD load after the DOM has been loaded?  My gut would be it would since its typically an AJAX call (unless they do some document.write trick)?  If that is the case maybe true is all we need for that particular case, at least for now.  Thoughts?\nYou are welcome to submit a patch, I may not get to this until next week.\n. fixed, closing\n. hopefully that's all it took :)  worked in my testing, let me know if you have an issues (not much of an AMD user myself)\n. Thanks for for the report @adlwalrus, this is by far the most requested feature for humane and I plan on taking a look on implementing it (and you are welcome to do so as well and we can discuss).  My gut is more to rely on CSS than JS for this behavior so we can animate using CSS transitions between the different 'levels' of stacking, which will allow for users to invent creative ways of stacking.\n. this unfortunately will not be in the humane.js future unless someone wants to take up the mantle, i don't have the time or interest to add it, maybe it will be rekindled in the future but i know there other great notification libraries that to provide that and it hasn't been a need yet for my workflow, sorry, closing for now\n. my favorite part of this pull is the inhumane variable name :)  i'm cool with adding this.  thanks!\n. thanks!\n. I haven't planned on either, as I'm unfamiliar with both, but am open to it if someone wants to submit them\n. woops!  hopefully that should work for you now\n. hmm we are catching the error and then waiting till dom load if used in <head>.  do you have a sample that fails?\nhttps://github.com/wavded/humane-js/blob/master/humane.js#L60\n. this should be fixed now in master\n. think I added this right :) haven't used bower before, hope that helps!\n. hmm interesting, are you use a legit IE8 or an emulator (IE8 mode)?\n. @LRotherfield I am having trouble duplicating, I setup your failing example here:\nhttp://wavded.github.com/humane-js/test/issue38.html\nI won't have access to a \"real\" IE8 machine until tomorrow (I'm using IE8 mode) but I can't seem to get that error to occur.  Maybe try wrapping a try/catch around the problem line for now and see if that helps.\n. ahh good find, I had never attempted to add gradients to ie 7 and 8, does wrapping that line with a try/catch in humane allow you still use your gradients or does it cause other issues?\n. @LRotherfield if it is beneficial for your case, it doesn't hurt to add it, at this point I'm not sure what I'd do with the catch except to \"catch\" the try :)  if you'd like to submit a pull I'll add it\n. yes, because they are reused, watch in your fav dev tool at http://wavded.github.com/humane-js/ and you'll see as you click on the log samples we are reusing the same element.  if you use humane.create it will make a new container and reuse that for any notifications that make use of that new container\nso in short, its for reuse.  I also believe its cheaper to do this than creating new elements all the time (that will vary on the browser, I would need to test that though)\n. ahh, this was deprecated and I'll remove it now, it was superseded by humane.remove()\n. No worries, thanks for the pull!\n. thx!\n. sorry, this got buried, but i however cannot duplicate in IE9 using the demo page provided below:\nhttp://wavded.github.io/humane-js/\nIf you have an html snippet that can reproduce the error I would happily take a gander.\n. closing this as its old, if still an issue, please let me know\n. this does seem handy, thanks for the pull, merged\n. Click to close works, it is just delayed if you have the the timeoutAfterMove param set, maybe we should rename it timeoutOnClose or something more generic.\nAs far this pull, we already have an optional callback that when provided is triggered when a notification is closed.\n. I can see your point, right now if have that option set it will double the timeout if you have both timeouts set which is also confusing.  I typically try to make options useful anywhere (even if there isn't any known use yet, makes the code simpler but also lets you shoot yourself in the foot).\nAs far as a callback example, there is one on the homepage (could be documented better):\njs\nhumane.log(\"Callback when finished\", function(){ document.body.style.backgroundColor=\"#a66000\" })\nEssentially anytime you create a notification you can pass it a callback which triggers after the closing animation is done.\n. doing some spring cleaning, if anything is unresolved here, please let me know\n. Thanks!\n. Thanks!  Merged.\n. ah crazy, swear that worked when we first put the readme up, thanks for the pull!\n. I'm not very familiar with RequireJS, could you give me a snippet on how you are including the library?\n. Hmm, it worked for me, I had to strip out some of your config, I committed the test here:\nhttps://github.com/wavded/humane-js/blob/master/test/issue49.html\n. Its just loading the parent dir in the repo which has humane.js in it... i pushed the test case up so you can inspect it:\nhttp://wavded.github.io/humane-js/test/issue49.html\n. On my machine I was using a python -m SimpleHTTPServer from the project root, I'm not sure what GitHub uses for their pages (guessing NGINX), but working there too.\n. closing this as its old, if it is still an issue, feel free to reopen\n. Do you have a simple failing case that you can share?  Like a jsbin or fiddle even?\n. I haven't.  Would have to think about how to cache an image so it isn't \"loading\" while the notification comes up.  It would also have to be supported across themes unless there were certain themes that supported images.\nYou could do it manually if you cached the images up front or created a theme with the image as a background.\n. Not going to add this.  Since raw HTML is injected into the notification bubble, this can be controlled on the users side to allow more customizability.  In addition, a user can develop a theme and apply background and icons with straight CSS.\n. @ajoslin sounds good to me, thx\n. closing because its an old issue\n. You can combine callbacks and options, unless I'm misunderstanding your question:\ne.g.\njs\nhumane.log('word up dawg', { timeout: 2000 }, function () { console.log('here after 2 secs') })\n. I agree, stacking was at one time talked about but I haven't had the time to work on a prototype.  If you are interested in coming up with a model in a PR, I'm open to it!  We can take it from there.\n. this isn't in the lib, but you can monitor humane.queue yourself if you are noticing this as a problem, humane.queue is simply an array that behaves a queue, newest stuff is pushed to the end, oldest stuff at the beginning, haven't tried it but think it would work\n. awesome!  thanks for the contrib!\n. ahh yeah, no problem, i merged the two branches now so that should be out there on the demo page...\n. @meandavejustice bumped up the version in npm and bower, thanks for the heads up and kudos!\n. thanks!\n. interesting idea, that's an alternative to stacking that i haven't considered yet and would be much less invasive to the code base, hmm.. care to prototype something in a PR?\n. Yes, the messages are set using innerHTML so your HTML tags and such are kept in tack.  CSS will take affect provided its more specific that the styling for the humane.js theme you are using.  Do you have a sample CSS rule that isn't being applied?\n. a notable point.  we protect against that at the top of the file but not at the bottom, i will add that.\n. looks like uglify wasn't putting one at the beginning of the source but the end :) both are fixed, thanks!\n. Thanks for the explanation.  I barely use bower, is it just a matter of updating the version number in bower.json?  I have the package registered.\n. @macneib ahh ok, I usually tag releases so perhaps its working??  Just made a new push, could you verify?\n. @EloHg this removes the ability for someone to use the defaults if they want to.  Use ENV.config to fallback and it should be good to go.  Here is an example:\nhttps://github.com/wavded/humane-js/blob/master/humane.js#L81\nCan you mod this pull?\n. hehe, lgtm\n. hmm... but don't the notifications overlap each other?\n. I honestly cannot remember why I put that in there.  Does it behave appropriately if you remove it?\n. GTK, thx.\n. @rquast you can pass a container to use instead of the body\nhttps://github.com/wavded/humane-js/blob/master/humane.js#L57\n. PR?\n. Humane only renders a single div with a humane class.  So very minimal.  You can use one of the provided themes or you make your own styling for the humane class or addition classes and pass any markup you want to the constructor.\n. Yes, because of pointer-events: none you cannot use links within the HTML.  The design decision here is to keep the notification unobtrusive.  So links behind it could still be accessed.  That said, you could make a theme that removes that style rule and use links.\n. Although this project does not have a test script, I can assure you it has been \"well-tested\" manually (the old-fashioned way) within browsers (mobile and desktop) to ensure its behavior is as documented as well as a lot of airtime in production websites.  Including specific bug behavior tests in the test directory.  Given the popularity of the project and the lack of open bugs should support this.  The core has remained unchanged for quite some time now (Dec 8, 2014) and I have no plans on adding any new functionality, only addressing any new bugs that may arise on a case by case basis.. this was not addressed with fade transitions as the MSIE transition filter API requires content to change in addition to taking snapshots of the state of an element.  went to use the JS api for opacity filter instead, but lowered interval to be more performant - committed 07f785fc76d664552e188f02c5eaf7749b40a733\n. opted for forcing new messages in stead of stacking, to keep lib simple\n. thanks for your report, I cannot duplicate on Safari 5.0.5 on Windows but will try to grab a Mac and see if I can duplicate there.  I did notice an issue on iOS Safari where the notifications wouldn't popup.  Could you try something for me?\nFrom the CSS file remove any references to:\nvisibility: hidden/visible\nAnd see if it works?\n. yeah not ideal, more of a hack, i'll was able to dup on Safari on Mac (but not Windows, same ver), this seems like a Safari bug (namely, Safari doesn't animate the visibility property the same way Chrome, FF, etc do, it completely borks the whole animation), i'll play around with your workaround and see if someone else has reported this issue.\n. opened ticket - https://bugs.webkit.org/show_bug.cgi?id=64166\n. ticket confirmed, dup of this one -> https://bugs.webkit.org/show_bug.cgi?id=29984, patch in place, looks like it has to deal with when accelerated composition is on.\n. fixed in 6901b8b8022e49e337c50d2558ae4d1db0d8e4e9\n. hey sweet, i like it!\n. thanks, feel free to put up a description/creds on here if you want\nhttps://github.com/wavded/humane-js/wiki/Themes\n. ahh right because its transitioning from the last class, i'll take a peak\n. ok, it will restore the original class after completion now BUT there is always the possibility that the next notification (depending on the theme) may occur before the original class is restored.  e.g. for the 'jackedup' theme, if you select the success, wait, and then select the log example, it will be fine, but if you click one after another, there is still a little green that will show, which IMO is ok, maybe even desirable in some cases.  Thanks for the report.\n. There are a couple options already available to you in this case, you can shorten the timeout, or use the forceNew option to force the next notification.  Stacking is hard here because there is so much flexibility to what themes you can add but each theme would have to do its own type of stacking, libnotify is the obvious one as it could stack like growl but what about bigbox or jackedup.\nOther alternatives to stacking are logging which has also been suggested but IMO that would be better as an extension to this project and not in the core.  I'll keep this ticket open for discussion.\n. I would like to make this customizable.  One idea I had is to say allow three max for stacking but allow the dev to customize the animation for each separately and the JS will handle the class management, so for example:\n[ 1 ]\n[ 2 ]\n[ 3 ] \n1 was the first in, when its finished, 2 will animated to 1's class and 3 will animate to 2's class and if another notification was added it would animate to 3 if that makes sense.  Thoughts?\n. So I go back and forth on this.  The more I think about it, it seems not to fit the style of humane.js.  Notification systems definitely vary on this point for sure.  As a Linux user, I'm used to one notification at a time, linnotify does this, Ubuntu and Gnome Shell have the same concept.  Enso, for Windows, from which the whole Humane concept was from did one message at a time.  humanmsg, the jQuery plugin, from which this project is derived from, had the same concept.\nI've used humanmsg for a number of years, used Enso on windows before I switched to Linux, and now use humane.js for everything I do (lots of single page apps) and I've never had a problem where I needed to display more than one message at a time.  And if I did, it never seems to be a problem to wait a couple seconds.  We haven't had a single client complaint about it as well.\nMy workaround for this case was allowing forceNew but that was a really crappy hack IMO and I just removed it because we allow all notification levels to be customized now so you can have your errors longer and other messages shorter.  Closing this issue for now.\n. Another thought to is stacking for mobile would be problematic due to the screen size.  These themes are designed to work on mobile as well as desktop although still experimental.  I could expose the message queue to developers to implement your own stacking with what is cued up which could be rechecked by using the callback functionality that is already built.\n. I added custom events to allow for custom stacking and logging implementations (docs on homepage).  The internal queue is constantly being popped and pushed so I just exposed the events in order for someone to keep and manage their own queue depending on their needs.  Events fire when something is added, shown and hidden (removed).\n. ahh must be a bug with the js for the demo, i'll take look, thx for reporting\n. hmmm. actually i am unable to duplicate, do you have steps to reproduce from a clean refresh?\n. nice :), i'll add some text for that, you get so used to working with it you forget it may not be obvious!\n. ok there was an issue particularly with jackedup that wasn't supporting ie which has been addressed now, as far as the scripting error, i can duplicate if i'm running in IE7 mode, it has to do with the css loading on the demo page, if you run any of the themes independently they work.. i'll take a look at later when i've got some more time, thx\n. sheesh you are right, looks horrible in chrome latest, wonder what switched, will take a look soon\n. this is fixed per 3.0.0 release\n. Thanks for the report, I have seen this on iOS for iPhone as well, there is a known issue particularly with Safari running on Mac (PC is fine), that looks like a fix has been rolled out this past month, I haven't tested it yet however.\nhttps://bugs.webkit.org/show_bug.cgi?id=29984\nThere may be a way to workaround the theme so that it doesn't happen.  I however do not own an iPad, you are welcome to play with the theme animation for a solution.  I think a workaround may be achieved by playing with the CSS.  I'll see if I can dig into this as well.\n. Wow, I've tried many of the suggestion in the link below on my iPhone, and can't get that flicker to stop, on the iPhone it flashes black the first animation, and then its fine.  It seem like you have a different experience that it always flickers which is not what I see on the iPhone:  Are you running iOS 5?\nhttp://stackoverflow.com/questions/4651769/ipad-css3-animation-flickers-after-keyboard-use\n. I ran a mobile version of iOS 5, and the flicker is gone for me.  My guess is the bug got fixed.\n. @samyakbhuta could you check your iOS 4 to see if the flicker is gone?  I updated the code so it without glitch on iOS5 and it may have had a positive affect, i just don't have a device to test it.  Thx.\n. ahh, ok, never thought of this use case, we could allow 0 to never 'finish' but then we would need to have some way to finish it.  have you tried setting it to a really high number?\n. just an fyi @kaihendry I added ability to set the timeout to 0 which completely disables the timeout (it stays up unless forever unless you use other options like clickToClose or forceNew\n. Awesome work and great idea, I'll take a peak and run through some tests and let you know.\n. @OiNutter, got a chance to play with it and test it, one quirk I noticed, if I have three notifications queued up and the last one has the callback, it will actually fire after the first animation is finished instead of the last.  Otherwise, it looks good, do you mind fixing up that issue and appending your pull request?\n. My gut would be after each notification.  I think the API reads better, because I'm passing a callback and a message and expect that callback to fire when the message has completed.  In your case, my gut is to do a counter if you know you have other callbacks pending or do a callback chain.\n. Thanks I'll run it through some tests!\n. Awesome, seem to pass great.  I wasn't able to merge so I just pulled in the changes and made a commit.  Added you at a contributer to the docs, thanks much!\n. Agreed, its just running automated tests across browsers that I haven't found a good way to do that.  Maybe jasmine, but visually you have to look at all the browsers to make sure the themes look correct and show up how you want so that part isn't really script-able but yeah...\n. there isn't away to do that currently, right now you can either have the notifications clear after the timeout and additionally (after timeout + mouse movement), but interesting idea... i like it\n. I added a click to close option, viewable on the demo page.\n. This may be akin to what is happening over in issue #9 (also webkit based) \n. There is a known webkit issue that is referenced in #9, my gut is it got fixed in the updated OS.  I was able to work around some of it using z-index instead of visibility.  It is related to the stylesheet and not the JS.  All the JS does it apply the class and throw it back the the browser to animate to that class and that where the flickering comes in.  I have been trying hacks to get it to work but haven't been successful, if you come across one that works well, please let me know!\n. I just tested iOS 5 and the flicker there is gone as well.\n. Confirmed new Android 4 has the flicker gone, noticed that the jqmobile peeps have had better success there as well.  I may just fallback to JS animation for older OS.\n. updated code to work without any glitches on iOS v5 and Android 4, it may have had a positive affect on iOS <5 or Android <4 but currently don't have any devices to test.\n. Apparently, earlier versions of mobile webkit did not like it when you animated the zIndex property, which we don't really need to animate but to make it easier to get up and running all themes just by using transition: all instead of specifying all the components.  It wasn't obvious that this was causing the issue until iOS5 where you saw the element 'behind' other elements at the start of the animation, and in front after... so anyway yippee!\n. hey awesome!  glad to hear!\n. Hmm that looks correct to me.  Are you able to duplicate on the demo site?  I just did a test turned the option on and then clicked a sample and clicked a notification and it closed, do you have a sample page that duplicates the issue?  And which browser you tested?\n. it will remove after the timeout, the clickToClose was just an additional option for a user to remove a popup if they don't want to wait the timeout.  in your case you'd have to set the timeout to a large number... but maybe when i think about it we could modify timeout behavior so if you do:\nhumane.timeout = 0\nIt will do the same, since that is pretty useless atm.\n. I added ability to disable timeout by setting it to 0\n. Good idea, thinking about it.\n. This is now available: e.g.\nhumane.error.timeout = 0\n. Thanks for you pull.  I need to think about this for a little bit.  I don't mind your api but I think it could get out of hand because I imagine the people will want is to customize the other options based on type and the api could blow up more at that point.\njs\nhumane.timeout = { error: 2000, success: 500 };\nhumane.clickToClose = { error: true, success: false };\n...\nOne idea I'm tossing around is:\njs\nhumane.error.timeout = 2000;\nhumane.error.clickToClose = true;\n...\nThat way you visibly know what you've applied to 'error' e.g.  And standard humane.timeout, etc.. would be the fallback.\n. Sure go for it, love the help!\n. this is merged in thanks!\n. From an API standpoint, that's extra work to call remove every time you wanted to force a new one.  I suppose forceNew could call remove internally so you keep the animations but is it important to use forceNew anymore with timeout configurations?\n. remove will just clear the one being shown, it won't clear any that have stocked up since.  i will include this pull request to expose it.  I don't think we want to go down the 'id' route.\n. right, I was thinking the same and wasn't able to duplicate so I just ignored it but I'll take a look again, thanks for the report.\n. fix in place for this now\n. I don't think this is a good idea and here is why.  Setting up options per notification type (rather than per notification) provides you the developer with a notification \"framework\" that keeps your messages to users consistent (logging frameworks do this).  You have done the leg work of defining three types of notifications which is good, my recommendation is to configure those three types using the four provided in humane.\ne.g.\njs\nhumane.log.timeout = 1000;\nhumane.info.timeout = 3000;\nhumane.error.timeout = 0;\nNow you've classified your logging system for your site.  I could see making 'custom' types perhaps in the future, but do sites really need more than four classifications for notifications?  I don't know, I usually use one :)\nMarc\n. You listed three types above, I showed you a configuration for those three types, help me understand why does this not work for you?\n. I agree that is dirty nor will it really do what you want because it will override others in the queue of the same type when its time for them to shine.  The API isn't very good for your use case.  I'll think about it.  Right now I could see doing:\njs\nvar mycustomnotify = humane.create( { type: 'info', timeout: 1000, clickToClose: true } );\nmycustomnotify('hello world')\n. I'll take a peak, is it in a fork?\n. ok @alanhogan, I put this in per the api outlined above, feel free to play around;\n. There isn't support for stacking or logging but there are hooks to add your own (see #7 for the discussion thread)\n. Ahh I see, you could try putting the css for one of the other themes under like humane.humane-info in original.css (and use humane.info to get that theme), if that makes sense.  A little bit of a hack as the API doesn't currently support what you are asking in a simple way.\n. correct, you could use type and put whatever you want in it as long as you make a humane-type class, but again your base css gets inherited so you may want need to pull some of that out and put it in the subclasses so both themes work\n. yeah class and type are sorta the same thing when creating, since it looks for a class called 'humane-{type}'\n. yeah should update the docs (I honestly wasn't sure how many would try what you are doing but its totally doable)... my goal is simplicity, I almost want to gut out the standard humane.info|error|log|success and just have humane and humane.create (where you can roll your own).  humane.create came after the others.\n. this is implemented per 3.0.0 release\n. correct, a zero timeout never times out so you have to force remove it with humane.remove()\n. i'm confused, setting timeout of 0 is supposed to never close yet you want it to after a certain amount of time?  would this be a better case for using waitForMove ?  I guess I'll need help understanding your use case.\n. ahh i see, remove really should take a callback, since what is happening is your next call isn't being queued up until after the animation has finished (and you've set the timeout to 5 seconds), so when it arrives in the queue it is no longer timeout=0 but timeout=5000 (or whatever you set it to).  I'm thinking about enhancements to this API that would make it easier for you do what you want... \n. for now to get what you want, you could either put a setTimeout on your timeout=5000 setting, or just have another function that does humane.remove(); humane.timeout = 5000; humane('your message') and remove humane.timeout = 5000 in your other function\n. i added a callback to the remove function\n. ahh do you have a simple snippet that fails that I could see?\n. thanks, this has been fixed in master, also you can do this as well too:\nhtml\n<body>\n    <p>Automatically Show</p>\n       <script>        \n        humane.log(\"Welcome Back\"); // will fire and show when dom is ready\n      </script>\n </body>\n. you are welcome!  cheers!\n. Please show me the generated HTML, and I will see if I can help you out.  Thanks\n. ahh ok, which browser are you experience this with?  The notifications popped up for me.\n. @hemanth looks like I forgot to recompile the minified JS, works for me now locally, you'll have to pull the latest code\n. ahh did not know that, please update the .styl files as well\n. thank you sir!\n. Good catch, mind submitting a pull?\n. Thanks!\n. appreciate the pull, however this is messy way to do this, setting the global this way is hacky and assumes this code will never be run in strict mode which would just give undefined - http://kangax.github.com/es5-compat-table/strict-mode/\n. maybe we could use window instead, does that break browserify as well?\n. new Function (...) really shouldn't be used as it is basically an eval, that creates a seperate context and additional overhead so i'm glad you changed it.  I will review your code later as I'm a little swamped at the moment.  Thanks!\n. ahh good point @avoidwork\n. I imagine there is common way people are using to setup commonjs module exports, let's research that and find out.\n. @tahu thank you, this landed in 3.0.4 (via cherry pick)\n. Are you aware of any similar API's for other browsers?  I run Linux and you can tap into libnotify but it is not built into the OS like in the new Mac OS (so in other words it probably wouldn't be used).  I can't speak for Windows.  Thanks for starting the conversation.\n. @wnadeau after thinking about this, it feels out of scope of this particular project, it could be a useful addon (currently I don't have a format for writing plugins but you could extend the Humane prototype with a new method - e.g. native) that users could use, or maybe it would be better as a stand alone module?\n. Thanks @JensRoland for the report, I don't use AMD but this sounds like a problem :)  Does AMD load after the DOM has been loaded?  My gut would be it would since its typically an AJAX call (unless they do some document.write trick)?  If that is the case maybe true is all we need for that particular case, at least for now.  Thoughts?\nYou are welcome to submit a patch, I may not get to this until next week.\n. fixed, closing\n. hopefully that's all it took :)  worked in my testing, let me know if you have an issues (not much of an AMD user myself)\n. Thanks for for the report @adlwalrus, this is by far the most requested feature for humane and I plan on taking a look on implementing it (and you are welcome to do so as well and we can discuss).  My gut is more to rely on CSS than JS for this behavior so we can animate using CSS transitions between the different 'levels' of stacking, which will allow for users to invent creative ways of stacking.\n. this unfortunately will not be in the humane.js future unless someone wants to take up the mantle, i don't have the time or interest to add it, maybe it will be rekindled in the future but i know there other great notification libraries that to provide that and it hasn't been a need yet for my workflow, sorry, closing for now\n. my favorite part of this pull is the inhumane variable name :)  i'm cool with adding this.  thanks!\n. thanks!\n. I haven't planned on either, as I'm unfamiliar with both, but am open to it if someone wants to submit them\n. woops!  hopefully that should work for you now\n. hmm we are catching the error and then waiting till dom load if used in <head>.  do you have a sample that fails?\nhttps://github.com/wavded/humane-js/blob/master/humane.js#L60\n. this should be fixed now in master\n. think I added this right :) haven't used bower before, hope that helps!\n. hmm interesting, are you use a legit IE8 or an emulator (IE8 mode)?\n. @LRotherfield I am having trouble duplicating, I setup your failing example here:\nhttp://wavded.github.com/humane-js/test/issue38.html\nI won't have access to a \"real\" IE8 machine until tomorrow (I'm using IE8 mode) but I can't seem to get that error to occur.  Maybe try wrapping a try/catch around the problem line for now and see if that helps.\n. ahh good find, I had never attempted to add gradients to ie 7 and 8, does wrapping that line with a try/catch in humane allow you still use your gradients or does it cause other issues?\n. @LRotherfield if it is beneficial for your case, it doesn't hurt to add it, at this point I'm not sure what I'd do with the catch except to \"catch\" the try :)  if you'd like to submit a pull I'll add it\n. yes, because they are reused, watch in your fav dev tool at http://wavded.github.com/humane-js/ and you'll see as you click on the log samples we are reusing the same element.  if you use humane.create it will make a new container and reuse that for any notifications that make use of that new container\nso in short, its for reuse.  I also believe its cheaper to do this than creating new elements all the time (that will vary on the browser, I would need to test that though)\n. ahh, this was deprecated and I'll remove it now, it was superseded by humane.remove()\n. No worries, thanks for the pull!\n. thx!\n. sorry, this got buried, but i however cannot duplicate in IE9 using the demo page provided below:\nhttp://wavded.github.io/humane-js/\nIf you have an html snippet that can reproduce the error I would happily take a gander.\n. closing this as its old, if still an issue, please let me know\n. this does seem handy, thanks for the pull, merged\n. Click to close works, it is just delayed if you have the the timeoutAfterMove param set, maybe we should rename it timeoutOnClose or something more generic.\nAs far this pull, we already have an optional callback that when provided is triggered when a notification is closed.\n. I can see your point, right now if have that option set it will double the timeout if you have both timeouts set which is also confusing.  I typically try to make options useful anywhere (even if there isn't any known use yet, makes the code simpler but also lets you shoot yourself in the foot).\nAs far as a callback example, there is one on the homepage (could be documented better):\njs\nhumane.log(\"Callback when finished\", function(){ document.body.style.backgroundColor=\"#a66000\" })\nEssentially anytime you create a notification you can pass it a callback which triggers after the closing animation is done.\n. doing some spring cleaning, if anything is unresolved here, please let me know\n. Thanks!\n. Thanks!  Merged.\n. ah crazy, swear that worked when we first put the readme up, thanks for the pull!\n. I'm not very familiar with RequireJS, could you give me a snippet on how you are including the library?\n. Hmm, it worked for me, I had to strip out some of your config, I committed the test here:\nhttps://github.com/wavded/humane-js/blob/master/test/issue49.html\n. Its just loading the parent dir in the repo which has humane.js in it... i pushed the test case up so you can inspect it:\nhttp://wavded.github.io/humane-js/test/issue49.html\n. On my machine I was using a python -m SimpleHTTPServer from the project root, I'm not sure what GitHub uses for their pages (guessing NGINX), but working there too.\n. closing this as its old, if it is still an issue, feel free to reopen\n. Do you have a simple failing case that you can share?  Like a jsbin or fiddle even?\n. I haven't.  Would have to think about how to cache an image so it isn't \"loading\" while the notification comes up.  It would also have to be supported across themes unless there were certain themes that supported images.\nYou could do it manually if you cached the images up front or created a theme with the image as a background.\n. Not going to add this.  Since raw HTML is injected into the notification bubble, this can be controlled on the users side to allow more customizability.  In addition, a user can develop a theme and apply background and icons with straight CSS.\n. @ajoslin sounds good to me, thx\n. closing because its an old issue\n. You can combine callbacks and options, unless I'm misunderstanding your question:\ne.g.\njs\nhumane.log('word up dawg', { timeout: 2000 }, function () { console.log('here after 2 secs') })\n. I agree, stacking was at one time talked about but I haven't had the time to work on a prototype.  If you are interested in coming up with a model in a PR, I'm open to it!  We can take it from there.\n. this isn't in the lib, but you can monitor humane.queue yourself if you are noticing this as a problem, humane.queue is simply an array that behaves a queue, newest stuff is pushed to the end, oldest stuff at the beginning, haven't tried it but think it would work\n. awesome!  thanks for the contrib!\n. ahh yeah, no problem, i merged the two branches now so that should be out there on the demo page...\n. @meandavejustice bumped up the version in npm and bower, thanks for the heads up and kudos!\n. thanks!\n. interesting idea, that's an alternative to stacking that i haven't considered yet and would be much less invasive to the code base, hmm.. care to prototype something in a PR?\n. Yes, the messages are set using innerHTML so your HTML tags and such are kept in tack.  CSS will take affect provided its more specific that the styling for the humane.js theme you are using.  Do you have a sample CSS rule that isn't being applied?\n. a notable point.  we protect against that at the top of the file but not at the bottom, i will add that.\n. looks like uglify wasn't putting one at the beginning of the source but the end :) both are fixed, thanks!\n. Thanks for the explanation.  I barely use bower, is it just a matter of updating the version number in bower.json?  I have the package registered.\n. @macneib ahh ok, I usually tag releases so perhaps its working??  Just made a new push, could you verify?\n. @EloHg this removes the ability for someone to use the defaults if they want to.  Use ENV.config to fallback and it should be good to go.  Here is an example:\nhttps://github.com/wavded/humane-js/blob/master/humane.js#L81\nCan you mod this pull?\n. hehe, lgtm\n. hmm... but don't the notifications overlap each other?\n. I honestly cannot remember why I put that in there.  Does it behave appropriately if you remove it?\n. GTK, thx.\n. @rquast you can pass a container to use instead of the body\nhttps://github.com/wavded/humane-js/blob/master/humane.js#L57\n. PR?\n. Humane only renders a single div with a humane class.  So very minimal.  You can use one of the provided themes or you make your own styling for the humane class or addition classes and pass any markup you want to the constructor.\n. Yes, because of pointer-events: none you cannot use links within the HTML.  The design decision here is to keep the notification unobtrusive.  So links behind it could still be accessed.  That said, you could make a theme that removes that style rule and use links.\n. Although this project does not have a test script, I can assure you it has been \"well-tested\" manually (the old-fashioned way) within browsers (mobile and desktop) to ensure its behavior is as documented as well as a lot of airtime in production websites.  Including specific bug behavior tests in the test directory.  Given the popularity of the project and the lack of open bugs should support this.  The core has remained unchanged for quite some time now (Dec 8, 2014) and I have no plans on adding any new functionality, only addressing any new bugs that may arise on a case by case basis.. ",
    "vaamyob": "That sort of fixed it.  I had to make some z-index changes to allow select lists that were beneath (from a z-index point of view) the humane div  to be clickable.  \nAlso, something that only comes into play with the demo is that there is a slight flicker of the humane div when you select a different theme via the select list.  Not sure how big of a deal that flicker would be, as it wouldn't really occur in a production environment.\nI tested the below changes with Safari 5.0.5, Firefox 5.0, and Chrome 12.0.742.112  \ndiff --git a/humane-themes/bold-dark.css b/humane-themes/bold-dark.css\nindex 0f3995c..5664ac9 100644\n--- a/humane-themes/bold-dark.css\n+++ b/humane-themes/bold-dark.css\n@@ -12,10 +12,9 @@ html, body { height: 100%; }\n   -o-transition         : all .2s ease-in;\n   -ms-transition        : all .2s ease-in;\n   transition            : all .2s ease-in;\n-  visibility            : hidden;\n-  z-index               : 100000;\n+  z-index               : -100000;\n }\n-.humane.humane-show { visibility : visible; }\n+.humane.humane-show { z-index: 100000;}\n /* ie hover state, recommended */\n .humane:hover {\n   filter                : progid:DXImageTransform.Microsoft.alpha(opacity=20);\ndiff --git a/humane-themes/bold-light.css b/humane-themes/bold-light.css\nindex bdb0383..3fdad50 100644\n--- a/humane-themes/bold-light.css\n+++ b/humane-themes/bold-light.css\n@@ -12,10 +12,9 @@ html, body { height: 100%; }\n   -o-transition         : all .2s ease-in;\n   -ms-transition        : all .2s ease-in;\n   transition            : all .2s ease-in;\n-  visibility            : hidden;\n-  z-index               : 100000;\n+  z-index               : -100000;\n }\n-.humane.humane-show { visibility : visible; }\n+.humane.humane-show { z-index: 100000;}\n /* ie hover state, recommended */\n .humane:hover {\n   filter                : progid:DXImageTransform.Microsoft.alpha(opacity=20);\ndiff --git a/humane-themes/libnotify.css b/humane-themes/libnotify.css\nindex d9017f8..5b9d186 100644\n--- a/humane-themes/libnotify.css\n+++ b/humane-themes/libnotify.css\n@@ -12,10 +12,9 @@ html, body { height: 100%; }\n   -o-transition         : all .2s ease-out;\n   -ms-transition        : all .2s ease-out;\n   transition            : all .2s ease-out;\n-  visibility            : hidden;\n-  z-index               : 100000;\n+  z-index               : -100000;\n }\n-.humane.humane-show { visibility : visible; }\n+.humane.humane-show { z-index: 100000;}\n /* ie hover state, recommended */\n .humane:hover {\n   filter                : progid:DXImageTransform.Microsoft.alpha(opacity=20);\n. That sort of fixed it.  I had to make some z-index changes to allow select lists that were beneath (from a z-index point of view) the humane div  to be clickable.  \nAlso, something that only comes into play with the demo is that there is a slight flicker of the humane div when you select a different theme via the select list.  Not sure how big of a deal that flicker would be, as it wouldn't really occur in a production environment.\nI tested the below changes with Safari 5.0.5, Firefox 5.0, and Chrome 12.0.742.112  \ndiff --git a/humane-themes/bold-dark.css b/humane-themes/bold-dark.css\nindex 0f3995c..5664ac9 100644\n--- a/humane-themes/bold-dark.css\n+++ b/humane-themes/bold-dark.css\n@@ -12,10 +12,9 @@ html, body { height: 100%; }\n   -o-transition         : all .2s ease-in;\n   -ms-transition        : all .2s ease-in;\n   transition            : all .2s ease-in;\n-  visibility            : hidden;\n-  z-index               : 100000;\n+  z-index               : -100000;\n }\n-.humane.humane-show { visibility : visible; }\n+.humane.humane-show { z-index: 100000;}\n /* ie hover state, recommended */\n .humane:hover {\n   filter                : progid:DXImageTransform.Microsoft.alpha(opacity=20);\ndiff --git a/humane-themes/bold-light.css b/humane-themes/bold-light.css\nindex bdb0383..3fdad50 100644\n--- a/humane-themes/bold-light.css\n+++ b/humane-themes/bold-light.css\n@@ -12,10 +12,9 @@ html, body { height: 100%; }\n   -o-transition         : all .2s ease-in;\n   -ms-transition        : all .2s ease-in;\n   transition            : all .2s ease-in;\n-  visibility            : hidden;\n-  z-index               : 100000;\n+  z-index               : -100000;\n }\n-.humane.humane-show { visibility : visible; }\n+.humane.humane-show { z-index: 100000;}\n /* ie hover state, recommended */\n .humane:hover {\n   filter                : progid:DXImageTransform.Microsoft.alpha(opacity=20);\ndiff --git a/humane-themes/libnotify.css b/humane-themes/libnotify.css\nindex d9017f8..5b9d186 100644\n--- a/humane-themes/libnotify.css\n+++ b/humane-themes/libnotify.css\n@@ -12,10 +12,9 @@ html, body { height: 100%; }\n   -o-transition         : all .2s ease-out;\n   -ms-transition        : all .2s ease-out;\n   transition            : all .2s ease-out;\n-  visibility            : hidden;\n-  z-index               : 100000;\n+  z-index               : -100000;\n }\n-.humane.humane-show { visibility : visible; }\n+.humane.humane-show { z-index: 100000;}\n /* ie hover state, recommended */\n .humane:hover {\n   filter                : progid:DXImageTransform.Microsoft.alpha(opacity=20);\n. ",
    "jackmcdade": "Right on. Feel free to do with it as it will.\n. Right on. Feel free to do with it as it will.\n. ",
    "acroca": "Cool!\nIt seems is not deployed yet. I'll check again.\nOn Tue, Nov 29, 2011 at 9:36 AM, Marc Harter <\nreply@reply.github.com\n\nwrote:\nok, it will restore the original class after completion now BUT there is\nalways the possibility that the next notification (depending on the theme)\nmay occur before the original class is restored.  e.g. for the 'jackedup'\ntheme, if you select the success, wait, and then select the log example, it\nwill be fine, but if you click one after another, there is still a little\ngreen that will show, which IMO is ok, maybe even desirable in some cases.\n Thanks for the report.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wavded/humane-js/issues/6#issuecomment-2910798\n\n\nAlbert Callarisa Roca\n. Cool!\nIt seems is not deployed yet. I'll check again.\nOn Tue, Nov 29, 2011 at 9:36 AM, Marc Harter <\nreply@reply.github.com\n\nwrote:\nok, it will restore the original class after completion now BUT there is\nalways the possibility that the next notification (depending on the theme)\nmay occur before the original class is restored.  e.g. for the 'jackedup'\ntheme, if you select the success, wait, and then select the log example, it\nwill be fine, but if you click one after another, there is still a little\ngreen that will show, which IMO is ok, maybe even desirable in some cases.\n Thanks for the report.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wavded/humane-js/issues/6#issuecomment-2910798\n\n\nAlbert Callarisa Roca\n. ",
    "munirehmad": "Thanks for your prompt response.\nI understand that for some themes it would not be possible but we can have an attribute (or any other way of telling) of theme which tells us weather this theme supports stacking. \nThemes which support stacking would stack up notifications nicely and others will just follow the default behavior (as they are doing now)\nThen themes like \"libnotify\" & \"jackedup\" could be used in a better way. \n. Thanks for elaborating Samyakbhuta, that was exactly my point :)\n. Thanks for your prompt response.\nI understand that for some themes it would not be possible but we can have an attribute (or any other way of telling) of theme which tells us weather this theme supports stacking. \nThemes which support stacking would stack up notifications nicely and others will just follow the default behavior (as they are doing now)\nThen themes like \"libnotify\" & \"jackedup\" could be used in a better way. \n. Thanks for elaborating Samyakbhuta, that was exactly my point :)\n. ",
    "samyakbhuta": "I would love to have the stacking supported. While decreasing the time a user takes to read the message is not a good idea ( after all, messages are meant to be read ) a quick prompt message for acknowledgement of second action is also desired. Users don't want to wait and read the message coming one after another.\nAlso, consider the fact that there would be many asynchronous scenarios where the timing of the message will not be in control. During those time as a developer I would love to go with a principle - \"All messages to be displayed as and when it is due.\". At the cost of having my page cluttered for few seconds ( as having many messages being displayed at once !) I would like to have all communication done with my user. I guess it is functionality over form.\n. @munir, my pleasure :)\n. I can also see the trouble with small screen. Guess exposing the message queue to developers will be a good idea. There would be lot of implementation then ( hopefully in public domain) and we will together evolve in direction of common solution if any exists or will conclude that there is no silver bullet.\n. wavded, nope I am not running iOS 5. It is iOS 4.3.3 ( 8J2 ).\n. It is indeed gone. Tested with all the themes provided on demo page http://wavded.github.com/humane-js/. Time to close the issue.\n. I would love to have the stacking supported. While decreasing the time a user takes to read the message is not a good idea ( after all, messages are meant to be read ) a quick prompt message for acknowledgement of second action is also desired. Users don't want to wait and read the message coming one after another.\nAlso, consider the fact that there would be many asynchronous scenarios where the timing of the message will not be in control. During those time as a developer I would love to go with a principle - \"All messages to be displayed as and when it is due.\". At the cost of having my page cluttered for few seconds ( as having many messages being displayed at once !) I would like to have all communication done with my user. I guess it is functionality over form.\n. @munir, my pleasure :)\n. I can also see the trouble with small screen. Guess exposing the message queue to developers will be a good idea. There would be lot of implementation then ( hopefully in public domain) and we will together evolve in direction of common solution if any exists or will conclude that there is no silver bullet.\n. wavded, nope I am not running iOS 5. It is iOS 4.3.3 ( 8J2 ).\n. It is indeed gone. Tested with all the themes provided on demo page http://wavded.github.com/humane-js/. Time to close the issue.\n. ",
    "hoverlover": "+1.  Stacking would be very nice, and as mentioned above, it could be disabled for themes that didn't support it.\n. +1.  Stacking would be very nice, and as mentioned above, it could be disabled for themes that didn't support it.\n. ",
    "beatgammit": "I haven't looked at the code, but it seems that humane-js could just fire notifications (like new request) and the individual themes could handle how to display it. For libnotify, it could stack down like you said, or in reverse (should be user definable), whereas for bigbox, it would only allow a single notification at a time.\nAlso, why limit it? Sure, nobody should need more than three notifications for a clean UI, but what if some unusual case comes up and a fourth message needs to be shown? This can be said for any arbitrary limit (but I'd say that 10 is too many for any case). Could you make it dev definable?\nEach theme could have a range of acceptable maximum notifications and the dev could set that at the offset (could even be at compile time instead of runtime if it's easier).\n. I haven't looked at the code, but it seems that humane-js could just fire notifications (like new request) and the individual themes could handle how to display it. For libnotify, it could stack down like you said, or in reverse (should be user definable), whereas for bigbox, it would only allow a single notification at a time.\nAlso, why limit it? Sure, nobody should need more than three notifications for a clean UI, but what if some unusual case comes up and a fourth message needs to be shown? This can be said for any arbitrary limit (but I'd say that 10 is too many for any case). Could you make it dev definable?\nEach theme could have a range of acceptable maximum notifications and the dev could set that at the offset (could even be at compile time instead of runtime if it's easier).\n. ",
    "stringbeans": "Sure!\nFrom clean refresh:\n1. Notice the \"select a theme\" is set to libnotify\n2. Click an example link\n3. Change \"select a theme\" to \"jackedup\"\n4. Click an example link\nResults:\nI see no notification popup appear, and in the bottom left corner of IE8 I see \"Error on page\".\nWebpage error details\nUser Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E; MS-RTC LM 8)\nTimestamp: Tue, 29 Nov 2011 18:10:55 UTC\nMessage: Unspecified error.\nLine: 126\nChar: 29\nCode: 0\nURI: http://wavded.github.com/humane-js/humane.js\nMessage: Unspecified error.\nLine: 111\nChar: 9\nCode: 0\nURI: http://wavded.github.com/humane-js/humane.js\n. Sure!\nFrom clean refresh:\n1. Notice the \"select a theme\" is set to libnotify\n2. Click an example link\n3. Change \"select a theme\" to \"jackedup\"\n4. Click an example link\nResults:\nI see no notification popup appear, and in the bottom left corner of IE8 I see \"Error on page\".\nWebpage error details\nUser Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E; MS-RTC LM 8)\nTimestamp: Tue, 29 Nov 2011 18:10:55 UTC\nMessage: Unspecified error.\nLine: 126\nChar: 29\nCode: 0\nURI: http://wavded.github.com/humane-js/humane.js\nMessage: Unspecified error.\nLine: 111\nChar: 9\nCode: 0\nURI: http://wavded.github.com/humane-js/humane.js\n. ",
    "johnjbarton": "Perhaps the original report had the same problem I did: those long bars with source code? They are buttons! Surprise!\nReally if you want folks to click on buttons, make them look like buttons.  Or you can write \"Click on these long bar things to try the demo\" ;-)\n. Perhaps the original report had the same problem I did: those long bars with source code? They are buttons! Surprise!\nReally if you want folks to click on buttons, make them look like buttons.  Or you can write \"Click on these long bar things to try the demo\" ;-)\n. ",
    "tobsn": "try it under latest chrome. it flicks around. fades in, disappears. click it again and it shows normal. click a different type and it will fade in from the color of the type before and instantly disappear... seems pretty buggy :/\n. try it under latest chrome. it flicks around. fades in, disappears. click it again and it shows normal. click a different type and it will fade in from the color of the type before and instantly disappear... seems pretty buggy :/\n. ",
    "kaihendry": "Ok, I'm satisfied with a couple of messages and a longer timeout as you suggested. :)\nhttps://github.com/kaihendry/Greptweet/blob/master/index.js#L3\n. Ok, I'm satisfied with a couple of messages and a longer timeout as you suggested. :)\nhttps://github.com/kaihendry/Greptweet/blob/master/index.js#L3\n. ",
    "OiNutter": "Aah, sorry, never thought of that. Kept thinking of each notification as a seperate humane instance. Would you prefer the callback to always happen at the end of the queue, or only after the notification it was assigned to? I think at the end of the queue would make sense as it ensures all notifications are seen in the case that your call back reloads or redirects the current page (That's what I'm using it for).\n. Ok, I've done that now. When I had a but more of a think about it there was never likely to be missed notifications in my use case. And I think if people are going to possibly get that when using it then they should handle it in their code. It's only likely to happen if you have lots of asynchronous events triggering notifications.\nIf you do decide you want to add something more complex in to give a bit more flexibility on that then let me know.\n. Cheers! On another note, might be worth adding those tests to the repo if possible, that way anybody wanting to contribute can run their additions pass the tests, and add more if necessary.\n. Hmm, yeah, I can see that not being too straightforward. Maybe just documenting the tests you run so we know what to follow would be a good start. Then if you're really lucky somebody looking at them will go \"Hey, I know a much easier way to do that\" and be good enough to tell you. Unfortunately that won't be me :)\n. Aah, sorry, never thought of that. Kept thinking of each notification as a seperate humane instance. Would you prefer the callback to always happen at the end of the queue, or only after the notification it was assigned to? I think at the end of the queue would make sense as it ensures all notifications are seen in the case that your call back reloads or redirects the current page (That's what I'm using it for).\n. Ok, I've done that now. When I had a but more of a think about it there was never likely to be missed notifications in my use case. And I think if people are going to possibly get that when using it then they should handle it in their code. It's only likely to happen if you have lots of asynchronous events triggering notifications.\nIf you do decide you want to add something more complex in to give a bit more flexibility on that then let me know.\n. Cheers! On another note, might be worth adding those tests to the repo if possible, that way anybody wanting to contribute can run their additions pass the tests, and add more if necessary.\n. Hmm, yeah, I can see that not being too straightforward. Maybe just documenting the tests you run so we know what to follow would be a good start. Then if you're really lucky somebody looking at them will go \"Hey, I know a much easier way to do that\" and be good enough to tell you. Unfortunately that won't be me :)\n. ",
    "jergason": "I think it is a pretty common use-case for notifications, so it would\nbe awesome if this existed. I may dive in to the code to see how hard\nit would be to add it in.\nOn Fri, Dec 2, 2011 at 11:12 AM, Marc Harter\nreply@reply.github.com\nwrote:\n\nthere isn't away to do that currently, right now you can either have the notifications clear after the timeout and additionally (after timeout + mouse movement), but interesting idea... i like it\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wavded/humane-js/issues/12#issuecomment-2993561\n. Sweet!\n\nOn Fri, Dec 2, 2011 at 12:41 PM, Marc Harter\nreply@reply.github.com\nwrote:\n\nI added a click to close option, viewable on the demo page.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wavded/humane-js/issues/12#issuecomment-2994745\n. I think it is a pretty common use-case for notifications, so it would\nbe awesome if this existed. I may dive in to the code to see how hard\nit would be to add it in.\n\nOn Fri, Dec 2, 2011 at 11:12 AM, Marc Harter\nreply@reply.github.com\nwrote:\n\nthere isn't away to do that currently, right now you can either have the notifications clear after the timeout and additionally (after timeout + mouse movement), but interesting idea... i like it\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wavded/humane-js/issues/12#issuecomment-2993561\n. Sweet!\n\nOn Fri, Dec 2, 2011 at 12:41 PM, Marc Harter\nreply@reply.github.com\nwrote:\n\nI added a click to close option, viewable on the demo page.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wavded/humane-js/issues/12#issuecomment-2994745\n. \n",
    "H0rst": "I just tested humane.js and have included it into an phonegap app. On a android 2.2 device i have a empty page, after the message is disapeared. Content doesen't come back when i scroll.\nOn a honeycomb tablet (Android 3.2) all works fine.\nEdit:\nA quick workaround is adding a function:\nhumane.info(\"Test\",function(){document.body.style.backgroundColor=\"#fff\"}) \nBut the color have to be different to the original color. Example: When background-color of body is set with css to fff and you use the example above, it doesen't work. Content is gone.\nWhen the color is set to anything other, it works. Also when called multiple and color is already fff.\nAlso it works when the color is initial fff and i use this:\ndocument.body.style.backgroundColor=\"#888\"\nhumane.info(\"Test\",function(){document.body.style.backgroundColor=\"#fff\"})        \nWeird....\nBTW: little flickering also happens, but this is no problem on android. Android apps need a little flickering and jerking. ;-)\n. I don't think it is the same problem. The whole page is lost. But i believe, it is a android webkit bug, too. I have made some tests today and get strange results. All my workarounds haven't worked, too.\nI have tested also in Emulator, to check, if it is some HTC Sense issue. But it happens on all 2.x versions, and it works on 3.x.\n. The demo page now works on a Android 2.2 Device. !!!\nThanks a lot. Can you explain what you have changed?\n. Yippee!\nThanks for the info. I plan to use humane.js in my blood pressure tracker ( http://www.bloodpressuredb.com ), when new values are saved. It runs in every browser and as phonegap based app on iOS and Android. So i love to have a easy to use library.\n. I just tested humane.js and have included it into an phonegap app. On a android 2.2 device i have a empty page, after the message is disapeared. Content doesen't come back when i scroll.\nOn a honeycomb tablet (Android 3.2) all works fine.\nEdit:\nA quick workaround is adding a function:\nhumane.info(\"Test\",function(){document.body.style.backgroundColor=\"#fff\"}) \nBut the color have to be different to the original color. Example: When background-color of body is set with css to fff and you use the example above, it doesen't work. Content is gone.\nWhen the color is set to anything other, it works. Also when called multiple and color is already fff.\nAlso it works when the color is initial fff and i use this:\ndocument.body.style.backgroundColor=\"#888\"\nhumane.info(\"Test\",function(){document.body.style.backgroundColor=\"#fff\"})        \nWeird....\nBTW: little flickering also happens, but this is no problem on android. Android apps need a little flickering and jerking. ;-)\n. I don't think it is the same problem. The whole page is lost. But i believe, it is a android webkit bug, too. I have made some tests today and get strange results. All my workarounds haven't worked, too.\nI have tested also in Emulator, to check, if it is some HTC Sense issue. But it happens on all 2.x versions, and it works on 3.x.\n. The demo page now works on a Android 2.2 Device. !!!\nThanks a lot. Can you explain what you have changed?\n. Yippee!\nThanks for the info. I plan to use humane.js in my blood pressure tracker ( http://www.bloodpressuredb.com ), when new values are saved. It runs in every browser and as phonegap based app on iOS and Android. So i love to have a easy to use library.\n. ",
    "sdepold": "well should the popup disappear after a given time without clicking or should it stay as long as i dont click it? I could set the timeout to 999999999 and enable clickToClose. is there any way to only allow the clickToClose ?\n. awesome! thanks\nAm 10.12.2011 um 02:10 schrieb Marc Harterreply@reply.github.com:\n\nI added ability to disable timeout by setting it to 0\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wavded/humane-js/issues/14#issuecomment-3088385\n. well should the popup disappear after a given time without clicking or should it stay as long as i dont click it? I could set the timeout to 999999999 and enable clickToClose. is there any way to only allow the clickToClose ?\n. awesome! thanks\n\nAm 10.12.2011 um 02:10 schrieb Marc Harterreply@reply.github.com:\n\nI added ability to disable timeout by setting it to 0\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wavded/humane-js/issues/14#issuecomment-3088385\n. \n",
    "ianmassey": "Hello!  I agree with you, the way you mentioned is I think cleaner and more flexible.  I didn't want to ride roughshod over your app with my first pull, or I would have tried something similar :)\nHappy to assist in implementing it the way you've mentioned if that would be helpful.\n. nice catch!\n. Hello!  I agree with you, the way you mentioned is I think cleaner and more flexible.  I didn't want to ride roughshod over your app with my first pull, or I would have tried something similar :)\nHappy to assist in implementing it the way you've mentioned if that would be helpful.\n. nice catch!\n. ",
    "shinuza": "My use case was:\n-Add a humane with timeout=0\n-Add another humane\n-The first one isn't cleared\nIn this particular case I'd call remove manually, I agree it's a little extra work but since forceNew was removed I don't see how you could do this otherwise.\n. My use case was:\n-Add a humane with timeout=0\n-Add another humane\n-The first one isn't cleared\nIn this particular case I'd call remove manually, I agree it's a little extra work but since forceNew was removed I don't see how you could do this otherwise.\n. ",
    "alanhogan": "I would like to see remove(id) where id refers to the ID (which I know isn\u2019t currently really a thing) of a notification. This would remove that notification if and only if it is in the queue or currently shown.\nUse case:\n- Show \u201cSending\u2026\u201d as I send a message via ajax, possibly lingering quite a few seconds as we wait for email stuff to happen in another part of the world\u2026\n- Immediately clear that \u201cSending\u2026\u201d message (and only that notification, not any others that may have been generated in the mean time!) when the AJAX call completes (whether successfully or not).\n. Another use case of remove(id):\n- \u201cCannot Reach Server\u201d/\u201cOffline\u201d displays until the app reconnects\n. I must disagree.\nThe current situation does not quite satisfy my motivating examples and current needs. \nAlso, a logging system is only superficially similar to a notification system. A notification framework forms part of the UI and as such must be as flexible and extensible as is required to meet user experience requirements. (Usually no such analog exists for app logging.) Furthermore, app logging is very \"historical\", decoupled, searchable, etc.; notifications are none of these and are only useful in the present.   \nOn Jan 25, 2012, at 7:47 PM, Marc Harterreply@reply.github.com wrote:\n\nI don't think this is a good idea and here is why.  Setting up options per notification type (rather than per notification) provides you the developer with a notification \"framework\" that keeps your messages to users consistent (logging frameworks do this).  You have done the leg work of defining three types of notifications which is good, my recommendation is to configure those three types using the four provided in humane.\ne.g.\njs\nhumane.log.timeout = 1000;\nhumane.info.timeout = 3000;\nhumane.error.timeout = 0;\nNow you've classified your logging system for your site.  I could see making 'custom' types perhaps in the future, but do sites really need more than four classifications for notifications?  I don't know, I usually use one :)\nMarc\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wavded/humane-js/issues/19#issuecomment-3663945\n. The first bullet point was an info message (type \"info\") that I would want to show for shorter than most other \"type info\" messages.\n\nThe second two bullets were both \"error\" type messages.\n. Consider the alternative, currently, given my needs:\nSetting options for the type about to be used, immediately before using it \u2013\u00a0every time! It feels (and is!) very, very dirty.\n. That would make more sense, yeah.\nA few days ago, I modified the API to better suit my needs, where the second parameter is no longer a function, but an options hash (including a callback, still), capable of setting clickToClose, timeout, and an id (for use in remove, as I mentioned elsewhere). I haven\u2019t had much time to test it, yet. Would you be interested in playing with it?\n. It\u2019s not a fork and I likely won\u2019t create a public fork, but I made this gist if you\u2019re interested.\nhttps://gist.github.com/1735493\nAgain, I haven\u2019t had the opportunity to really test the changes yet or anything.\n. I would like to see remove(id) where id refers to the ID (which I know isn\u2019t currently really a thing) of a notification. This would remove that notification if and only if it is in the queue or currently shown.\nUse case:\n- Show \u201cSending\u2026\u201d as I send a message via ajax, possibly lingering quite a few seconds as we wait for email stuff to happen in another part of the world\u2026\n- Immediately clear that \u201cSending\u2026\u201d message (and only that notification, not any others that may have been generated in the mean time!) when the AJAX call completes (whether successfully or not).\n. Another use case of remove(id):\n- \u201cCannot Reach Server\u201d/\u201cOffline\u201d displays until the app reconnects\n. I must disagree.\nThe current situation does not quite satisfy my motivating examples and current needs. \nAlso, a logging system is only superficially similar to a notification system. A notification framework forms part of the UI and as such must be as flexible and extensible as is required to meet user experience requirements. (Usually no such analog exists for app logging.) Furthermore, app logging is very \"historical\", decoupled, searchable, etc.; notifications are none of these and are only useful in the present.   \nOn Jan 25, 2012, at 7:47 PM, Marc Harterreply@reply.github.com wrote:\n\nI don't think this is a good idea and here is why.  Setting up options per notification type (rather than per notification) provides you the developer with a notification \"framework\" that keeps your messages to users consistent (logging frameworks do this).  You have done the leg work of defining three types of notifications which is good, my recommendation is to configure those three types using the four provided in humane.\ne.g.\njs\nhumane.log.timeout = 1000;\nhumane.info.timeout = 3000;\nhumane.error.timeout = 0;\nNow you've classified your logging system for your site.  I could see making 'custom' types perhaps in the future, but do sites really need more than four classifications for notifications?  I don't know, I usually use one :)\nMarc\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wavded/humane-js/issues/19#issuecomment-3663945\n. The first bullet point was an info message (type \"info\") that I would want to show for shorter than most other \"type info\" messages.\n\nThe second two bullets were both \"error\" type messages.\n. Consider the alternative, currently, given my needs:\nSetting options for the type about to be used, immediately before using it \u2013\u00a0every time! It feels (and is!) very, very dirty.\n. That would make more sense, yeah.\nA few days ago, I modified the API to better suit my needs, where the second parameter is no longer a function, but an options hash (including a callback, still), capable of setting clickToClose, timeout, and an id (for use in remove, as I mentioned elsewhere). I haven\u2019t had much time to test it, yet. Would you be interested in playing with it?\n. It\u2019s not a fork and I likely won\u2019t create a public fork, but I made this gist if you\u2019re interested.\nhttps://gist.github.com/1735493\nAgain, I haven\u2019t had the opportunity to really test the changes yet or anything.\n. ",
    "flosse": "Oh...I didn't see #7 :-\\ Thx!\n. Oh...I didn't see #7 :-\\ Thx!\n. ",
    "Gooseus": "So I'd essentially be splicing two themes together in to a custom theme which utilizes one theme style with 'info' / 'log' type and the other with the 'error' / 'success' type?\nThat could work, though I've found that the jackedup seems to be a nice combination of bold and unobtrusive, I kind of like it everywhere right now.  I can still foresee instances where I may want to split out multiple themes.\nHave you thought about allowing users to add a class attribute in the humane.create() builder function?  That way one could create an error like:\njavascript\nvar error = humane.create({ type: 'error', class: 'fatal', waitForMove: true, });\nerror('Yikes');\nWhich would add a .humane-fatal class instead of the .humane-error?  ... Actually, I just checked through your code and I'm wondering if you couldn't just do that by adding your own 'type'?  It seems like you may only actually using the type to append on to the humane- className and to fire custom events.\nSo you might actually be able to extend an existing theme pretty easily with the existing codebase which would also come with it's own custom events to handle a 'fatal' error type differently from a regular 'error' type, as well as giving it a slightly different skin. I still think there might be some value to adding additional custom event and class options so you could extend 'error' type in to 'fatal' and still get an onerror event along with the onfatal, but correct me if I'm wrong, it seems like just the custom type extension would work with minimal updates... what do you think?\n. Awesome, it can still serve the function of extending the given themes so that you can have yellow, orange, red, or black for progressive levels of error/notification by just adding a few more style rules and creating the custom notifiers.\nThe documentation makes the humane.create() seem like it can only be used for currying a custom function from existing static types, when in reality you can get pretty creative depending on what you're trying to do.  I think I could easily go back to using the original style, add a single .humane-autosave rule which changes the top, font-size, min-height and width to be less obtrusive and utilize that custom notifier for that specific case.\nYou should think about updating the Custom Notifier section of the docs to let people know it's more flexible than they may realize.  Awesome work, btw, simple, light and unassuming.. I'm thinking of using it as a model for a humane-like tooltip plugin for handling notifications which are specific to an element or location on the page.\n. Yeah, that's a good idea, the docs would be way simpler and much more accurate if you focused on the humane.create function as the core from which you can roll any number of notifications and make the built-in notifications a footnote.\nThough if you removed them completely the themes would be kind of bland.  You could use them as examples of the ease with which you can extend the base themes and notifications with 1 line of js and 1 css rule though.\n. So I'd essentially be splicing two themes together in to a custom theme which utilizes one theme style with 'info' / 'log' type and the other with the 'error' / 'success' type?\nThat could work, though I've found that the jackedup seems to be a nice combination of bold and unobtrusive, I kind of like it everywhere right now.  I can still foresee instances where I may want to split out multiple themes.\nHave you thought about allowing users to add a class attribute in the humane.create() builder function?  That way one could create an error like:\njavascript\nvar error = humane.create({ type: 'error', class: 'fatal', waitForMove: true, });\nerror('Yikes');\nWhich would add a .humane-fatal class instead of the .humane-error?  ... Actually, I just checked through your code and I'm wondering if you couldn't just do that by adding your own 'type'?  It seems like you may only actually using the type to append on to the humane- className and to fire custom events.\nSo you might actually be able to extend an existing theme pretty easily with the existing codebase which would also come with it's own custom events to handle a 'fatal' error type differently from a regular 'error' type, as well as giving it a slightly different skin. I still think there might be some value to adding additional custom event and class options so you could extend 'error' type in to 'fatal' and still get an onerror event along with the onfatal, but correct me if I'm wrong, it seems like just the custom type extension would work with minimal updates... what do you think?\n. Awesome, it can still serve the function of extending the given themes so that you can have yellow, orange, red, or black for progressive levels of error/notification by just adding a few more style rules and creating the custom notifiers.\nThe documentation makes the humane.create() seem like it can only be used for currying a custom function from existing static types, when in reality you can get pretty creative depending on what you're trying to do.  I think I could easily go back to using the original style, add a single .humane-autosave rule which changes the top, font-size, min-height and width to be less obtrusive and utilize that custom notifier for that specific case.\nYou should think about updating the Custom Notifier section of the docs to let people know it's more flexible than they may realize.  Awesome work, btw, simple, light and unassuming.. I'm thinking of using it as a model for a humane-like tooltip plugin for handling notifications which are specific to an element or location on the page.\n. Yeah, that's a good idea, the docs would be way simpler and much more accurate if you focused on the humane.create function as the core from which you can roll any number of notifications and make the built-in notifications a footnote.\nThough if you removed them completely the themes would be kind of bland.  You could use them as examples of the ease with which you can extend the base themes and notifications with 1 line of js and 1 css rule though.\n. ",
    "nowotny": "Yes... that's what I'm doing... or am I not...? \nSubsequent calling of my a1() function should produce the same result... a notification should be removed if it's present and a new one with timeout=0 should show up and stay, while now, on every second call it disappears after 2,5 seconds...\n. I want to do the following:\n1. clear previous notification if there is any\n2. set timeout to 0 so the new notification stays\n3. show new notification\n4. set timeout back to default value in case I need it later for other type of notification\nAll the above should happen every time I call the a1() function, so when the function \"is done\" there should always be a notification showing and it should stay until I manually remove it... instead, every second call of the function shows the notification but it disappears after 2,5 seconds instead of staying on...\n. Yes... that's what I'm doing... or am I not...? \nSubsequent calling of my a1() function should produce the same result... a notification should be removed if it's present and a new one with timeout=0 should show up and stay, while now, on every second call it disappears after 2,5 seconds...\n. I want to do the following:\n1. clear previous notification if there is any\n2. set timeout to 0 so the new notification stays\n3. show new notification\n4. set timeout back to default value in case I need it later for other type of notification\nAll the above should happen every time I call the a1() function, so when the function \"is done\" there should always be a notification showing and it should stay until I manually remove it... instead, every second call of the function shows the notification but it disappears after 2,5 seconds instead of staying on...\n. ",
    "pengpenghust": "Sorry for my late response.\nHere is a very simple page for this situation:\n\n<body onload=\"humaneShow();\">\n    <p>Automatically Show</p>\n       <script>\n        function humaneShow(){              \n        humane.log(\"Welcome Back\");\n         }\n      </script>\n </body>\n\n\nThis is a very simple page which works just fine in IE9, however when I use IE8, the page has no response even without any error information.  If I add a button clicked to trigger another notifier, this  first notifier will appear first and then the triggered one will also show up.\nIn IE9 the problem is I could not use Jquery's document.ready to replace the onload function, you can try it yourself.\nIn Chrome and other Browsers I had tried they all worked fine.\nThanks again for your concern!\n. Thanks again for your concern, and it works fine now, I am really glad to have such a nice library to use!\n. Sorry for my late response.\nHere is a very simple page for this situation:\n\n<body onload=\"humaneShow();\">\n    <p>Automatically Show</p>\n       <script>\n        function humaneShow(){              \n        humane.log(\"Welcome Back\");\n         }\n      </script>\n </body>\n\n\nThis is a very simple page which works just fine in IE9, however when I use IE8, the page has no response even without any error information.  If I add a button clicked to trigger another notifier, this  first notifier will appear first and then the triggered one will also show up.\nIn IE9 the problem is I could not use Jquery's document.ready to replace the onload function, you can try it yourself.\nIn Chrome and other Browsers I had tried they all worked fine.\nThanks again for your concern!\n. Thanks again for your concern, and it works fine now, I am really glad to have such a nice library to use!\n. ",
    "hemanth": "DEMO check the source, there are unnecessary calls (have used it as a fix) closely related to @issue23 \n. The notification is working for me too, but it needs an extra call onload in the body! If I remove that it wont work, as of now I'm looping over the array and then doing humane.log(element);\n. @wavded Kool! :+1: :)\n. DEMO check the source, there are unnecessary calls (have used it as a fix) closely related to @issue23 \n. The notification is working for me too, but it needs an extra call onload in the body! If I remove that it wont work, as of now I'm looping over the array and then doing humane.log(element);\n. @wavded Kool! :+1: :)\n. ",
    "avoidwork": "done\n. Just chiming in... 1602040 assumes 'window' exists; which would fail in a headless browser. Passing 'this' is correct.\n. @tahu then why are you passing 'window' at 210.\nThis is how I do server & client side...\njavascript\n    switch (true) {\n        case typeof exports !== \"undefined\":\n            module.exports = factory;\n            break;\n        case typeof define === \"function\":\n            define(function () { return factory; });\n            break;\n        default:\n            global.factory  = factory;\n    }\n. This is when global exists...\njavascript\n(function(global) { ... use global here })(this);\nSo, it seems the design flaw is browserify's and not humane's if it can't deal with anon function scope.\n. O_o isn't that what i've posted above?\n. done\n. Just chiming in... 1602040 assumes 'window' exists; which would fail in a headless browser. Passing 'this' is correct.\n. @tahu then why are you passing 'window' at 210.\nThis is how I do server & client side...\njavascript\n    switch (true) {\n        case typeof exports !== \"undefined\":\n            module.exports = factory;\n            break;\n        case typeof define === \"function\":\n            define(function () { return factory; });\n            break;\n        default:\n            global.factory  = factory;\n    }\n. This is when global exists...\njavascript\n(function(global) { ... use global here })(this);\nSo, it seems the design flaw is browserify's and not humane's if it can't deal with anon function scope.\n. O_o isn't that what i've posted above?\n. ",
    "JensRoland": "Done :)\n. wow, was that all it took? nice job -- thanks!\n. Done :)\n. wow, was that all it took? nice job -- thanks!\n. ",
    "ghost": "yes we can. The last commit (440637a) does just that.\n. Now browserify works, and your index.html demo too.\n. Heh, 440637a was unnecessarily (?) verbose, the shorter version in 1602040 works with browserify too.\n. 'this' in browserify and nodejs is 'module.exports', not 'window'.\n. Here's my data:\nbrowserify     nodejs          browser\nthis   module.exports module.exports  Window\nwindow Window         undefined       Window\nglobal Window         global          undefined\n. @wavded For a common way, I'd look at bean here https://github.com/fat/bean/blob/master/bean.js. Using their way humane-js would be like:\n!function (name, context, definition) {\n  if (typeof module !== 'undefined') {\n    module.exports = definition(name, context);\n  } else if (typeof define === 'function' && typeof define.amd  === 'object') {\n    define(definition);\n  } else {\n    context[name] = definition(name, context);\n  }\n}('humane', this, function (name, context) {\n  var win = window;\n  // code for Humane here\n  return new Humane();\n});\n. Thank you too!\n. You're most welcome, humane.js is a very lovely piece of software!\n. yes we can. The last commit (440637a) does just that.\n. Now browserify works, and your index.html demo too.\n. Heh, 440637a was unnecessarily (?) verbose, the shorter version in 1602040 works with browserify too.\n. 'this' in browserify and nodejs is 'module.exports', not 'window'.\n. Here's my data:\nbrowserify     nodejs          browser\nthis   module.exports module.exports  Window\nwindow Window         undefined       Window\nglobal Window         global          undefined\n. @wavded For a common way, I'd look at bean here https://github.com/fat/bean/blob/master/bean.js. Using their way humane-js would be like:\n!function (name, context, definition) {\n  if (typeof module !== 'undefined') {\n    module.exports = definition(name, context);\n  } else if (typeof define === 'function' && typeof define.amd  === 'object') {\n    define(definition);\n  } else {\n    context[name] = definition(name, context);\n  }\n}('humane', this, function (name, context) {\n  var win = window;\n  // code for Humane here\n  return new Humane();\n});\n. Thank you too!\n. You're most welcome, humane.js is a very lovely piece of software!\n. ",
    "winfred": "I'm not aware of any other browser with this at the moment. (occrding to caniuse.com)\nAlthough it's been a while since I last used a WM on linux, I seem to recall chrome having the ability to show desktop notifications for things like new Gmail/Gtalk messages through this API when logged in.\nThis webkitNotifications demo uses this API, and I'm pretty sure it will show a desktop notification for you (just as a quick proof of concept). I should be able to get a permissions button like this into the demo in the next few days to make things extra clear on our end.\n(It's the end of semester exam time for me, so there's my braindead disclaimer.) \n. Heyoo, I hear that! Sounds good.\n. I'm not aware of any other browser with this at the moment. (occrding to caniuse.com)\nAlthough it's been a while since I last used a WM on linux, I seem to recall chrome having the ability to show desktop notifications for things like new Gmail/Gtalk messages through this API when logged in.\nThis webkitNotifications demo uses this API, and I'm pretty sure it will show a desktop notification for you (just as a quick proof of concept). I should be able to get a permissions button like this into the demo in the next few days to make things extra clear on our end.\n(It's the end of semester exam time for me, so there's my braindead disclaimer.) \n. Heyoo, I hear that! Sounds good.\n. ",
    "durango": "Any status update on this?\n. Works for me, thanks :) +1\n. Any status update on this?\n. Works for me, thanks :) +1\n. ",
    "aawwawa": "@durango I actually found this in the meantime, which seems to be relatively elegant, and meets my needs quite well. If I find someone who knows what they're doing I might get them to touch up the stylesheet a bit, but the linked script is what I'm planning to use for my site, once I port it to the lighter-weight bonzo DOM utility.  Don't know if a jquery dependency is a dealkiller for you or not though, so make of it what you will.\n. @durango If you do any hacking on the stylesheet or otherwise, please do share it!\n. @durango I actually found this in the meantime, which seems to be relatively elegant, and meets my needs quite well. If I find someone who knows what they're doing I might get them to touch up the stylesheet a bit, but the linked script is what I'm planning to use for my site, once I port it to the lighter-weight bonzo DOM utility.  Don't know if a jquery dependency is a dealkiller for you or not though, so make of it what you will.\n. @durango If you do any hacking on the stylesheet or otherwise, please do share it!\n. ",
    "shehi": "@wavded : I very much thought about providing SCSS variants of themes, but on the other hand, since you don't know SCSS, me or someone else will have to maintain them for any upcoming changes to the core code (i.e. Stylus files). Guess we will have to settle with CSS files then.\n. @wavded : I very much thought about providing SCSS variants of themes, but on the other hand, since you don't know SCSS, me or someone else will have to maintain them for any upcoming changes to the core code (i.e. Stylus files). Guess we will have to settle with CSS files then.\n. ",
    "vjpr": "<html>\n<head>\n<script src=\"https://raw.github.com/wavded/humane-js/master/humane.js\"/>\n</head>\n<script>\nhumane.log(\"Hello\");\n</script>\n</html>\nThis simple snippet fails for me.\nhumane.js#69 - Uncaught TypeError: Cannot call method 'appendChild' of null\n. <html>\n<head>\n<script src=\"https://raw.github.com/wavded/humane-js/master/humane.js\"/>\n</head>\n<script>\nhumane.log(\"Hello\");\n</script>\n</html>\nThis simple snippet fails for me.\nhumane.js#69 - Uncaught TypeError: Cannot call method 'appendChild' of null\n. ",
    "LRotherfield": "We are using IE tester, but your page: http://wavded.github.com/humane-js/ works fine and does not report errors.\nAfter doing as much as we can we have found that the error occurs when we pass the addnCls argument.\nThis works:\nhtml\n<script>\n  var notify = humane.create({container: document.getElementById('notify')});\n  notify.log(\"<h2>Order successfully submitted for 435645 of the Test Brochure</h2><p>You will be contacted shortly with confirmation of your order</p>\", { timeout: 5000, clickToClose: false});\n</script>\nThis fails:\nhtml\n<script>\n  var notify = humane.create({container: document.getElementById('notify')});\n  notify.log(\"<h2>Order successfully submitted for 435645 of the Test Brochure</h2><p>You will be contacted shortly with confirmation of your order</p>\", { timeout: 5000, clickToClose: false, addnCls: \"success\"});\n</script>\nSorry for the delayed response\n. @wavded We found the issue.  Our css adds:\ncss\nfilter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#c3dd8a', endColorstr='#9ebf69',GradientType=0 );\nTo the humane.success div.  Removing this filter fixes the issue and explains why the error was reported with line 124, but means we cannot set a gradient background with css for ie 7 and 8.\n. I have not added a try/catch statement in as the fastest fix once I knew the issue was to use a background image instead.  I will try tomorrow and let you know.\n. @wavded I tried the try catch with nothing in the catch statement and it worked fine in ie8, no error message.  Thanks for your help and sorry for the slow response.  I have not added a pull request because I don't know if you want to do something with the catch statement or even if you want to implement this as a fix.\n. We are using IE tester, but your page: http://wavded.github.com/humane-js/ works fine and does not report errors.\nAfter doing as much as we can we have found that the error occurs when we pass the addnCls argument.\nThis works:\nhtml\n<script>\n  var notify = humane.create({container: document.getElementById('notify')});\n  notify.log(\"<h2>Order successfully submitted for 435645 of the Test Brochure</h2><p>You will be contacted shortly with confirmation of your order</p>\", { timeout: 5000, clickToClose: false});\n</script>\nThis fails:\nhtml\n<script>\n  var notify = humane.create({container: document.getElementById('notify')});\n  notify.log(\"<h2>Order successfully submitted for 435645 of the Test Brochure</h2><p>You will be contacted shortly with confirmation of your order</p>\", { timeout: 5000, clickToClose: false, addnCls: \"success\"});\n</script>\nSorry for the delayed response\n. @wavded We found the issue.  Our css adds:\ncss\nfilter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#c3dd8a', endColorstr='#9ebf69',GradientType=0 );\nTo the humane.success div.  Removing this filter fixes the issue and explains why the error was reported with line 124, but means we cannot set a gradient background with css for ie 7 and 8.\n. I have not added a try/catch statement in as the fastest fix once I knew the issue was to use a background image instead.  I will try tomorrow and let you know.\n. @wavded I tried the try catch with nothing in the catch statement and it worked fine in ie8, no error message.  Thanks for your help and sorry for the slow response.  I have not added a pull request because I don't know if you want to do something with the catch statement or even if you want to implement this as a fix.\n. ",
    "SaitoWu": "+1.\nI can provide a snippet for this issue:\n``` coffeescript\nhumane.timeout = 1600;\nhumane.forceNew = true;\nhumane.info = humane.spawn\n  addnCls: 'humane-libnotify-info'\nhumane.error = humane.spawn\n  addnCls: 'humane-libnotify-error'\nhumane.log \"Hello World\"\n```\nAlso i edit the theme-libnotify file \nless\n.humane,\n.humane-libnotify {\n  top: 40px;\n}\n. +1.\nI can provide a snippet for this issue:\n``` coffeescript\nhumane.timeout = 1600;\nhumane.forceNew = true;\nhumane.info = humane.spawn\n  addnCls: 'humane-libnotify-info'\nhumane.error = humane.spawn\n  addnCls: 'humane-libnotify-error'\nhumane.log \"Hello World\"\n```\nAlso i edit the theme-libnotify file \nless\n.humane,\n.humane-libnotify {\n  top: 40px;\n}\n. ",
    "hortopan": "I think it should close without delay on click otherwise it's confusing. What do you think?\nAbout the callback : I think I'm blind because I haven't seen that. Either way what happens if you want the action onClick and not on notification closed?\n. I think it should close without delay on click otherwise it's confusing. What do you think?\nAbout the callback : I think I'm blind because I haven't seen that. Either way what happens if you want the action onClick and not on notification closed?\n. ",
    "HTMLGuyLLC": "I'm using the min version and it doesn't seem to be working.\n\nvar jacked = humane.create({baseCls: 'humane-jackedup', addnCls: 'humane-jackedup-info', clickToClose: true, waitForMove: true})\njacked.success = jacked.spawn({addnCls: 'humane-jackedup-success'})\njacked.error = jacked.spawn({addnCls: 'humane-jackedup-error'});\njacked.log(\"HI\").success(\"Successfully Sent Message\").error(\"Error, message not sent\");\n\nall of those timeout and close automatically.\n. I'm using the min version and it doesn't seem to be working.\n\nvar jacked = humane.create({baseCls: 'humane-jackedup', addnCls: 'humane-jackedup-info', clickToClose: true, waitForMove: true})\njacked.success = jacked.spawn({addnCls: 'humane-jackedup-success'})\njacked.error = jacked.spawn({addnCls: 'humane-jackedup-error'});\njacked.log(\"HI\").success(\"Successfully Sent Message\").error(\"Error, message not sent\");\n\nall of those timeout and close automatically.\n. ",
    "gtzilla": "Some snippets. I have a number of additional 3rd party dependencies in my project that I have primarily omitted from below. requirejs docs\nIn the HTML document\n<script data-main=\"/static/js/main.js\" src=\"/static/js/require.js\"></script>\nIn main.js\nrequirejs.config({\n   baseUrl: '/static/js',\n   shim: {\n      'backbone': {\n        deps: ['underscore', 'jquery'],\n        exports: 'Backbone'\n      },\n      'underscore': {\n          exports: '_'\n      },       \n      ...\n      'humane':{\n          exports:'humane'\n      },  \n      'app': {\n        deps: [\"backbone\", ...  \"humane\"],\n           exports: 'App'\n       }\n    },\n    paths: {\n      jquery: \"libs/jquery-1.9.1\",\n      backbone:\"libs/backbone\",\n      underscore:\"libs/underscore\",        \n      ...    \n      humane:\"libs/humane\",\n      app: \"App\",\n    }\n})\n. That config you stripped was how it loaded the local copy of humane.js. How in your test are you doing that?\nEdit: I should probably specify, this issue applies to client side applications. \n. Are you running this under node? I am not. I am using a python web server.\n. Some snippets. I have a number of additional 3rd party dependencies in my project that I have primarily omitted from below. requirejs docs\nIn the HTML document\n<script data-main=\"/static/js/main.js\" src=\"/static/js/require.js\"></script>\nIn main.js\nrequirejs.config({\n   baseUrl: '/static/js',\n   shim: {\n      'backbone': {\n        deps: ['underscore', 'jquery'],\n        exports: 'Backbone'\n      },\n      'underscore': {\n          exports: '_'\n      },       \n      ...\n      'humane':{\n          exports:'humane'\n      },  \n      'app': {\n        deps: [\"backbone\", ...  \"humane\"],\n           exports: 'App'\n       }\n    },\n    paths: {\n      jquery: \"libs/jquery-1.9.1\",\n      backbone:\"libs/backbone\",\n      underscore:\"libs/underscore\",        \n      ...    \n      humane:\"libs/humane\",\n      app: \"App\",\n    }\n})\n. That config you stripped was how it loaded the local copy of humane.js. How in your test are you doing that?\nEdit: I should probably specify, this issue applies to client side applications. \n. Are you running this under node? I am not. I am using a python web server.\n. ",
    "lukemarsh": "Hi @wavded I have also found this issue. I'm requiring humane in a module and it's not working when I run my tests. The error I get is: CrudModule missing humane.\nAny ideas?\n. An issue was also opened in stackoverflow: http://stackoverflow.com/questions/22645225/angularjs-unit-test-referenceerror-humane-is-not-defined\n. Hi @wavded I have also found this issue. I'm requiring humane in a module and it's not working when I run my tests. The error I get is: CrudModule missing humane.\nAny ideas?\n. An issue was also opened in stackoverflow: http://stackoverflow.com/questions/22645225/angularjs-unit-test-referenceerror-humane-is-not-defined\n. ",
    "altras": "I've tested this: https://github.com/altras/humane-js/commit/5e95c867ba92470bc62279bf0af272c5aa1671f0 but it's still poorly implemented for pull request. Yet it works and the browser is caching it, but the first time there's some loading delay...\nThe idea is to add warning signs, icons and other images wich will improve the UX/UI. A new theme with image as a background may not have the desired effect though.\n. I've tested this: https://github.com/altras/humane-js/commit/5e95c867ba92470bc62279bf0af272c5aa1671f0 but it's still poorly implemented for pull request. Yet it works and the browser is caching it, but the first time there's some loading delay...\nThe idea is to add warning signs, icons and other images wich will improve the UX/UI. A new theme with image as a background may not have the desired effect though.\n. ",
    "ajoslin": "Oops, pressed enter early :-) message edited\n. Oops, pressed enter early :-) message edited\n. ",
    "mvexel": "What I am trying to do is a little more involved: I want the callback to be fired when the user clicks the message before it times out. If the user does not click, no callback.\n. yes, that is what I meant to do. Thanks.\n. What I am trying to do is a little more involved: I want the callback to be fired when the user clicks the message before it times out. If the user does not click, no callback.\n. yes, that is what I meant to do. Thanks.\n. ",
    "Sundarasan": "I am too in need of stacked notifications.\n. I am too in need of stacked notifications.\n. ",
    "meandavejustice": "for now I'm just installing from commit SHA 1284b1d3480c05f1bd4e29057a5a861980a825dc\n. for now I'm just installing from commit SHA 1284b1d3480c05f1bd4e29057a5a861980a825dc\n. ",
    "harold": "Thanks for the quick reply.\nI've never looked at the source, but perhaps I will if I can steal the time away.\nRegardless, thanks again and take care. \n. #60 may be a start. (:\n. tada --- I didn't have much time to absorb the code, but what's here works for us, and we'll likely move forward with it for the time being. Apologies if I violated any mores of the codebase, and thanks again!\n. Hi @attila,\nYou're welcome. It has worked well for us too (for almost a year now, wow time goes fast).\nI don't know what \"multiple instances\" is, but hopefully for someone with more familiarity with the internals of humane it would not be hard to adapt the changes.\nThe inline styles were indeed a quick hack to make the commit small-as-possible and should be amended to play nicely with themes.\nThanks for your feedback. Take care.\n. Thanks for the quick reply.\nI've never looked at the source, but perhaps I will if I can steal the time away.\nRegardless, thanks again and take care. \n. #60 may be a start. (:\n. tada --- I didn't have much time to absorb the code, but what's here works for us, and we'll likely move forward with it for the time being. Apologies if I violated any mores of the codebase, and thanks again!\n. Hi @attila,\nYou're welcome. It has worked well for us too (for almost a year now, wow time goes fast).\nI don't know what \"multiple instances\" is, but hopefully for someone with more familiarity with the internals of humane it would not be hard to adapt the changes.\nThe inline styles were indeed a quick hack to make the commit small-as-possible and should be amended to play nicely with themes.\nThanks for your feedback. Take care.\n. ",
    "attila": "The concept works great, thanks for this.\nAlthough I don't think this would work with multiple instances and the inline styles could be moved to the themes themselves.\n. The concept works great, thanks for this.\nAlthough I don't think this would work with multiple instances and the inline styles could be moved to the themes themselves.\n. ",
    "macneib": "Yeah it's a chore that requires you to tag before a push.\n```\ncommit your changes\ngit commit -am \"Made some awesome new changes, now its even awesomer\"\ntag the commit\ngit tag -a v0.0.2 -m \"Release version 0.0.2\"\npush to GitHub\ngit push origin master --tags\n```\nthere's also this:\nhttps://help.github.com/articles/creating-releases/\nOr the exhaustive description \nhttp://bob.yexley.net/creating-and-maintaining-your-own-bower-package/\n. @wavded just did a test.  Works great!  now my bower.json looks pretty again! :)\nThanks!\n. Yeah it's a chore that requires you to tag before a push.\n```\ncommit your changes\ngit commit -am \"Made some awesome new changes, now its even awesomer\"\ntag the commit\ngit tag -a v0.0.2 -m \"Release version 0.0.2\"\npush to GitHub\ngit push origin master --tags\n```\nthere's also this:\nhttps://help.github.com/articles/creating-releases/\nOr the exhaustive description \nhttp://bob.yexley.net/creating-and-maintaining-your-own-bower-package/\n. @wavded just did a test.  Works great!  now my bower.json looks pretty again! :)\nThanks!\n. ",
    "EloHg": "Guess I was being a bit selfish there. Fixed with the fallback on defaults.\n. Guess I was being a bit selfish there. Fixed with the fallback on defaults.\n. ",
    "lacivert": "it may be, so I recommend it as an \"option\". \nIt may be also a parameter;\nvar dontWait = true;\nhumane.error( \"something wrong\", dontWait );\nWhat do you think?\n. it may be, so I recommend it as an \"option\". \nIt may be also a parameter;\nvar dontWait = true;\nhumane.error( \"something wrong\", dontWait );\nWhat do you think?\n. ",
    "norpol": "Hi! Thank's for your reply. Yes it does work's if I overwrite it. min-height makes only sense for me when testing humane-js on a blank html page, but it even doesn't make sense there. :) Only thing I could find in the history was https://github.com/wavded/humane-js/pull/25 .\nI guess you can remove it and hope it won't break any other's setup - but I personally don't think that this might become an issue for others.\nCheers :+1:  :) Thank's for open source software <3.\n. Hi! Thank's for your reply. Yes it does work's if I overwrite it. min-height makes only sense for me when testing humane-js on a blank html page, but it even doesn't make sense there. :) Only thing I could find in the history was https://github.com/wavded/humane-js/pull/25 .\nI guess you can remove it and hope it won't break any other's setup - but I personally don't think that this might become an issue for others.\nCheers :+1:  :) Thank's for open source software <3.\n. ",
    "doktordirk": "@rquast there is a create which worked for me\nhttps://github.com/wavded/humane-js/blob/master/humane.js#L235\njavascript\nimport Humane from 'wavded/humane-js';\nimport {inject} from 'aurelia-framework';\n@inject(Humane)\nexport class Notification {\n  constructor(humane) {\n    this.humane = humane.create();\n  }\n  show(msg) {\n    this.humane.log(msg);\n  }\n}\n. @rquast there is a create which worked for me\nhttps://github.com/wavded/humane-js/blob/master/humane.js#L235\njavascript\nimport Humane from 'wavded/humane-js';\nimport {inject} from 'aurelia-framework';\n@inject(Humane)\nexport class Notification {\n  constructor(humane) {\n    this.humane = humane.create();\n  }\n  show(msg) {\n    this.humane.log(msg);\n  }\n}\n. ",
    "jacobpatton": "Gotcha, thanks @wavded \n. Gotcha, thanks @wavded \n. "
}