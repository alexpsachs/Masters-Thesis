{
    "Seldaek": "It is described in https://github.com/nelmio/alice#multiple-references and yes it also should work with single references.\n. Well, the 5x makes it pick multiple references, but @user* itself works with or without 5x. Anyway I'll update the README to clarify.\n. Oh right. Yeah that's a bug :) Will push a fix in a minute.\n. Ok it should work now.\n. Sorry it's not my day :) Doing too many things at once. Thanks.\n. I merged it locally 5mins ago, just checking a couple things and pushing :)\n. Thanks\n. Heh damn it, out of the 5 lines that were not covered by tests, obviously I mixed up UnexpectedValue and InvalidArgument :) Thanks\n. Yeah that is something I considered while writing it and I thought if we keep the references statically, we take away the choice from the user, while with the current model you are free to just instantiate a Yaml loader yourself and reuse it a few times if you don't want to lose the references.\n. Well that's just the basic usage vs detailed usage in the readme. If you want multiple calls just use detailed version. It's not so much code. I guess we could add a constructor taking a persister and a loadFile instance method to make it slightly easier, but it's not a huge difference.\n. @tyomo4ka not a bad suggestion. I wouldn't type hint it because I think it's best to accept one file or an array of files, but this could help if you just want to split stuff in multiple files. \n. The old scrolls thought us that one day this hero would come and fix our typos! We waited for millenia and at last the chosen one appears. The prophecy is fulfilled.\n. Uh-oh :)\nI started by using {{ foo }} as placeholders, but that caused issues with the yaml syntax if you forgot to quote stuff, so I switched to html-like tags, which apparently wasn't so clever either.\nNot sure what we can do here, maybe a <raw>...</raw> thing that could skip the parsing of tags for that block (the raw tag would be stripped obviously)? If you have another idea I'm up for suggestions.\n. So after discussing on IRC we came to the conclusion the best compromise is probably a small BC break to enforce <foo()> so we can clearly distinguish that from XML tags.\nPlease take note everyone using this (@dbu @umpirsky @digitalkaoz ..?) - sorry for the trouble. See https://github.com/nelmio/alice/#installation if you want to keep using the old version for a while.\n. Right now it's not possible no. I guess we'd need a special <iteration()> or something that would be replaced by the current iteration of the repeated entities. Any better idea?\n. I could think of $i <iteration()> or <current()> or $_ as somewhat common or obvious things, but I think I'd prefer one of the <...> variants so that it's familiar.\n. Yup I think current is probably best. Would you like to pull request it? :)\nA few hints: https://github.com/nelmio/alice/blob/master/src/Nelmio/Alice/Loader/Base.php#L103 is where you find the $i - probably it should be set as a property and then used as return value in https://github.com/nelmio/alice/blob/master/src/Nelmio/Alice/Loader/Base.php#L135 if the $formatter is 'current', shouldn't be much work.\n. The latter,  should just be replaced by the number, then you can use it in whichever way you want.\n. Yes that's pretty much where it happens, but you shouldn't have to touch\nthis to add the  functionality I believe.\n. Cool, thanks\n. This can already be done with references and optionally with <current()> to link many in a 1:1 manner. It's just not nested in the yaml, but has the same effect.\n. How about making the syntax -> instead of dot? Just thinking that using dots as part of the name itself might happen\n. Yes that would be great.\n. Thanks, merged & pushed 1.1.0\n. A few comments to specify the feature a bit more:\n- Shouldn't the custom persister be instead some sort of filter layer in between the loader and the persister (because it seems to be about modifying the object on the way)\n- I think I would put that kind of stuff on the class level rather than per entity (the _persister key I mean).\n. OK so what I did is added the possibility to give processors (and to instantiate the Fixtures class so it can be defined as a service) which will allow you to pass those user objects through the UserManager before they are persisted. Now that @baldurrensch created https://github.com/hautelook/AliceBundle I would refer you there for Symfony2 specific stuff like this UserManager processor. It doesn't really belong here.\n. Tout vient \u00e0 point \u00e0 qui sait attendre. Thanks.\n. True, ping @everzet. Maybe the ctor should only be circumvented if it contains mandatory arguments (and it's not explicitly configured), otherwise running it makes sense I think.\n. I am ok with 2, as I understand it it's the same as it was before though, we can remove the unserialize hack altogether, since you can now provide arguments yourself. Correct?\n. Ok I implemented the method described above. Everything should hopefully be back to normal!\n. Thanks, I added documentation for #16 refactored some stuff and fixed #17 in the process.\n. Thanks, merged and tagged a new release\n. I'm wondering what's best here between inventing some new way of doing it, or using the yaml merge key syntax which allows you to copy stuff around a document.\n. Well, yeah, I think this might be good. In an ideal world fixtures can be kept simple enough that stuff like this is not needed, but that's probably unrealistic. I know I had a few cases already where I had to duplicate entire fixture blocks and it is not as nice as what extending would allow. Now for the syntax, here's an alternative idea that follows the flag thing that was recently added for unique fields, but I am obviously open to feedback:\n```\nUser: \n    # regular user could still be extended if it didn't have abstract\n    base (template):\n        username: \n        email: \n        is_admin: 0\nadmin (inherits: base): \n    is_admin: 1\n\nbar (inherits: ../foo/bar.yml#User.base): \n    is_admin: 1\n\n``\n. I see the problem, but I don't know if I like the proposed syntax. One way that would maybe work nicely would be to reuse the locale syntax like. That would make it regenerate values until it gets one that was not seen before for that class?\n. Thanks for the implementation, looks good from my quick look at the patch. However I really don't think the!` is a good idea for syntax. I'm pretty sure this will backfire. Wondering if it wouldn't be best to allow \"flags\" on the keys instead, like:\nClass:\n    object:\n        username(unique): <username()>\n() make really no sense in key names so chance for conflict are pretty non existent. It's not so pretty maybe but fairly explicit. What do you think?\n. OK I merged this and added the new syntax. If you think it has a problem please let me know though, I'll wait a bit before tagging a new release.\n. Alright I refactored it a bit to avoid a lot of ifs and insane ternaries and it now supports arrays :)\n. Maybe a better syntax would be (unique: a) like giving a label for the unique field, and all unique fields with the same label become a composite key. Ideally though we should just read this data from the doctrine mapping information instead of making users duplicate it.\n. Could you show an example of the data structure you have and are trying to create? Just to be sure we're on the same page. I'd like to help see if there is a possible way out, but I'm not sure I got your problem straight.\n. OK, I'd think if you first create the formula and colors and then create FormulaColor by linking two every time this would work (apart from the compound unique key issue).\n. Closing, if someone can articulate the issue in more details feel free to reopen a new issue with more details.\n. I'd rather rely on the Psr\\Log\\LoggerInterface for logging and call $this->logger->debug('message') if a logger is available.\n. Alright, I merged and made it also work with LoggerInterface objects, because in framework settings where you have one at hand it just might be more convenient than creating a wrapper closure. Thanks!\n. Patch looks good apart from what I commented on.\n. Thanks\n. OK so this is a fancy array builder that can load yaml and extend things then in php. Sounds good for more complex use cases, but I have to say I still kinda liked the idea of having a pure yaml extension syntax too. That said maybe yaml's merge key syntax is enough for that.\n. Closing as I don't think it's really necessary and it could well be built as an extension library around alice anyway.\n. There is no obligation to return the result no. But thanks I fixed the typo.. as far as I know the rest of the docs are fairly up to date, but if you find other problems let me know.\n. Unfortunately I don't think we can really do that in there, because in some cases you might want the objects to remain loaded, and clearing it will make it a lot slower since it'll have to reload everything from the DB.\nFor your use case here, I think it would make sense to just call $this->getContainer()->get('doctrine.orm.entity_manager')->clear(); after each Fixtures::load() call so you manually clear it. BTW doing batch operations like this means you may have problems with unique constraints (if you have any).\n. That's alright yes, but that means you can't use the Fixtures::load shortcut anymore unless we add a gazillion options/args to load(), but I don't think that's a good idea.\n. Which advanced generator are you talking about exactly?\n. Still not sure I get your point. Why would you need generator->parse() when alice already does a similar job? Can you explain what you're trying to achieve maybe?\n. As far as I can see you can just create a generator in your class with Faker\\Factory::create(). What would be better though is if Faker\\Generator::addProvider would set itself on the provider if they implement a GeneratorAwareInterface (that contains setGenerator). That way things would bind themselves on the Faker side, but this should be reported as an issue there.\n. This is currently not possible natively and I doubt it could be. As a workaround you can add a custom faker provider that returns whatever object instance you need. Shouldn't be too hard. You can maybe just use the doctrine fixtures' class getReference method and do user1: { property: <getReference('foo')> }\n. Well I am not at the conference so it's to be expected that you wouldn't\nsee me there ;)\n. You could make it an array of args, but IIRC that only works for the constructor.\n. Indeed it should work if you specify the method name.. I don't know why I forgot about this :) \n. Thanks!\n. Variables are only available within faker providers at the moment, so you could do:\nfunction ownerName($owner) {\n    return $owner->getName();\n}\nand \nNelmio\\Entity\\Group:\n    group1:\n        name: Admins\n        owner: @user*\n        name: <ownerName($owner)>\nThis should be a valid workaround if that function is defined in your fixtures class or whatever custom faker provider you pass to the alice config.\nBTW in your sample: @owner{$owner->id}->name could just be $owner->name as far as I see. Except as I said that won't work right now, but it would be a less contrived way to express it nonetheless. Keeping the issue open because indeed it might be good to support it somehow, but not sure how to best do this yet.\n. I added a test for what you're trying to do and it seems to work fine, so I'm not sure what to say either :)\n. @danjamin while the original var issue here is pretty hard to fix, your problem should be much simpler. Can you open a new issue for it so it can be looked at independently?\n. Thanks\n. Thanks, makes sense.\n. I'm not sure how this relates to Alice? AFAIK this should be configured on the doctrine mapping instead.\n. Thanks!\n. Sure thing, that seems like a nice thing to have if you want to develop that script a bit further. Problem is that you then need to configure db connection etc.. $container->get('doctrine') is nice but that only works in Sf2.\n. There is now a bundle https://github.com/hautelook/AliceBundle so I'd say move that there if you are still interested. I don't think it's feasible without framework context. If there is generic stuff we could merge it back here perhaps.\n. Yeah that's what I figured the best way to implement this would be as well. But the easiest would probably to do a two-pass loop when dealing with {1..10} style object definitions. So yes first do all the new Foo; calls and then populate the data on each object. Haven't been in that code in a while but I think it shouldn't be so much work.\n. OK I did the fix - that's what I meant by doing first instantiation and then populating the objects. Granted it's a bit messy :/\n. I think this case falls out of what alice can reasonably do. In PHP fixtures it wouldn't be hard you just flush the object to the db, then assign it's id to itself and flush again. Alice aims to make it easier for the easy cases, but you can't have it both ways :)\n. I still think it's very good to have but I am not sure the syntax is very robust. We could use the (foo) style annotation like for (unique), to have admin (extends base): ... base (template): ...? I find it a bit more explicit and memorable, but maybe that's just me.\n. Closing in favor of #86 \n. Thanks\n. Sorry about that, nasty side-effect caused by an arg taken by reference so I overlooked it.\n. I'll tag a patch release once I figured out what's up with 6c5da4ddbc5c51cab78bda575974691cebeeb16d\n. Thanks\n. This should now work fine \n. Oops. Thanks!\n. Thanks for the failing test!\n. It's now fixed btw.. \n. You can use custom faker providers for that.\n. You probably missed the fact that the $this in this line is actually passing the fixtures class as a provider:\nFixtures::load(__DIR__.'/fixtures.yml', $om, array('providers' => array($this)));\nSo you could pass any instance in there and public methods become visible as faker providers. You could also obviously pass __DIR__ to your provider so it knows the path to look into or whatever..\n. I see. I guess this could maybe be worked better into AliceBundle by having a tag for services or something?\n. Sounds reasonable yes :) Having \\@ would be good if possible, but not sure how that'll play with yaml, maybe we need to write \\\\@ which wouldn't be as nice. Perhaps @@ would be better, needs to be researched.\n. Alright it seems like yaml plays nice so I added support for \\@\n. The stuff inside () in provider calls is pretty much php run through eval, so I believe you can do <paragraphs(rand(0, 4))>.\n. That is indeed nasty. Using # would be neat for \\d+ but that'll trigger comments in yaml :/ Maybe we could turn the current wildcard operator into ** and make * just match numbers as you suggest. That sounds reasonable, but I'll schedule this for an eventual 2.0 since it potentially breaks things.\n. Sounds reasonable but why is it? Is the $var notation to access $this->var not enough?\n. Actually this is also covered by #59 as the @current reference, which I think is kinda more in line with the rest of the syntax, so I'll close this.\n. Hey, thanks for working on this, it seems pretty solid (assuming the tests pass;), however it's quite a big change and it especially highlights that the Base class is slowly becoming a huge organically-grown mess. I am wondering if it would be possible to extract most of this in other classes, or at least the population part maybe so you could have a populating class and a deferred one that extends from it and overrides bits and pieces to keep the original code a bit more readable and detached from all this try/catch hackery :) You don't necessarily have to do this mind you, but I'm just saying that because of this I'll probably delay merging this for a while, until I maybe find time to clean things up, or someone else steps up and does it (if it's doable at all).\n. Awesome thanks. Maybe one thing to do before going further would be to rebase this against master with git rebase -i origin/master and then squash all commits, so it's easier to review the refactoring commits as opposed to the initial feature.\n. I don't think there is. Maybe we could/should just use the name of every instance for the key in the returned array. Not sure if that's not the case because of issues or not, but I think not.\n. Yeah it should be pretty simple in Base.php $instances[] => $instances[$name] should do I think, maybe there are other places to tweak this. But if you can add a test and check current tests still pass then it should be no problem.\n. Well fixing the tests shouldn't be too hard, if it doesn't break any real code that's fine IMO.\n. Eh well I don't know if many people test the output of their fixtures generation. I'd think that's a waste of time.. And in the worst case you can always do array_values() on the returned value to get rid of the named keys.\n. Since the content between () is just passed through eval, doing <words(rand(0, 3)> will generate 0 to 3 words, but I'm not sure anymore if that returns an array or a string. Worst case you can always use a custom provider function that does what you need.\n. That's fairly non-descriptive if you don't know exactly what it's about.. Which is why I didn't include it in the first place, couldn't figure out a short way to explain it in a sensible way :)\n. Eh well, thanks, it's just a changelog detail anyway let's not overthink it too much :p\n. Thanks\n. Not sure how much slower that makes it. Wouldn't it be faster to check with is_callable() first then if not do the call through reflection? Because it's not a really common case to have private setters.\n. Thanks!\n. You could create two faker providers, one that generates a random number and keeps track of the generated numbers, and then one that consumes them and returns a random one. So it would look like:\n...\nid (unique): <generateId()>\ndefZone: <randomId()>\nzoneReport: <randomId()>\n...\n. Closing as I don't think it can be fixed by alice itself but is rather a specific use case one must write on their own.\n. This isn't exactly standard practice so I'm not likely to provide a patch for it. If you can make a sane proposal for a syntax that would make this work we can maybe do it, but otherwise I'd say just handle the user class fixtures with plain php and not alice.\n. I guess that'd work without creating issues for regular: __construct: [ arg, arg ] users yes.\n. Thanks, docs tests and all. :+1:!\n. Thanks!\n. Thanks\n. It's not possible at the moment but #59 provides a @self notation which should help in this particular case.\n. Closing as @self has been merged.\n. That's a known issue (#56) but can't really be fixed without breaking BC so it would be done in 2.0\n. And for now as a workaround you can use non-conflicting names like user1 and testUser1 instead of userTest1\n. The patch seems weird. Treating isset() same as property_exists is probably not good, because then you do a ReflectionProperty on it and it'll fail. Then the rest seems to be handling for __set more than __get, but maybe that's just a mistake in your PR description?\n. I usually do it like this which seems to work fine:\nyaml\nFoo\\UserBundle\\Entity\\User:\n    admin:\n        username: admin\n        plainPassword: admin\n        email: admin@example.com\n        roles: [ROLE_SUPER_ADMIN]\n        enabled: true\nThen you can more as needed of course, but the key is to use plainPassword then it will be hashed automatically.\n. Math isnt really possible, although I guess we could have an <eval($field1 + $field2)> pretty easily.\nFor the other issue, the problem is in Faker itself, numberBetween just returns integers, it has a randomFloat provider that you can use though as randomFloat($nbMaxDecimals, $min, $max), not sure what the first param is but I guess the max precision you want.\n. There is the identity provider now which acts as sort of an eval call: use <identity(1 + 1)> or the short <(1 + 1)>\n. I added some more content to https://github.com/nelmio/alice/blob/master/README.md#default-providers including eval so if people search for that hopefully they'll find it :)\n. Thanks\n. Makes sense, but the problem is that this is currently valid syntax, it would just pass an associative array to the constructor, which is not what you want obviously.. Not sure if we should have special syntax like inline(Location\\Coordinates): { ... } for example, or just check if the top level key in the array is a valid class name then we instantiate it. It'd be nicer to write but could lead to annoying edge cases where we need special syntax to disambiguate still.\n. @tshelburne it's a more consistent syntax yes, and probably wouldn't be too hard to implement, but I wonder if it's a good thing or not to promote nesting like this. In a way the flat version that @ludofleury has is easier to read and promotes reuse instead of copy-pasted inline classes. It's syntax sugar that just might make things worse.\n. The include functionality I just merged also might help to make sure you don't have too large files that get out of control :) But yeah closing this for now since it doesn't seem extremely necessary.\n. Depends how the DB is built, but alice supports loading things from the db if the setter for a field has a type-hint set for a class. e.g. if you have a User fixture that has a setCountry(Country $coutry) and in your fixtures you write:\nyaml\nFoo\\User:\n    bob:\n        country: be\nIt will see that be is not a valid country object, and attempt to load from the CountryRepository the country with id be. It will work if you use iso codes or such as ids, but if you have auto-increment ids for the countries you will have a harder time to maintain the fixtures. Unless you want a random id then you could use a <numberBetween(1,160)> if you have 160 countries in the db and they are always imported with ids starting at 1.\nAnother way would be to call setReferences on the loader before actually loading the fixtures file, and pre-load it with all the countries etc that you have in the DB as if they had been created with alice.\n. Thanks\n. Yup it's kinda overdue, I'll get to it.\n. I'm not so sure about this. I see your point and I'm sure in some cases it's nice, but this also adds tons of reseeding at every property and indeed might lower the overall randomness. I'd rather have this optional but with the current architecture it gets really messy. This Base class is overdue for some refactoring, so I'll keep this open for now but I don't really want to merge it yet.\n. Ok, I guess we can live with this.\n. Good catch, thanks\n. Thanks a lot for wrapping this up with docs and tests and not letting it sit unfinished in your fork BTW :) Apart from that order nitpick it looks good to me.\n. Thanks! Please check out https://github.com/nelmio/alice/commit/3311047de4aefb26b462a598a2a6015674fcc323 though :)\n. If you can rebase as well as fix that regex issue then it should be good to merge.\n. Thanks a bunch! Indeed a tokenizer would be the right way (tm) but I think it's a bit overdoing it, and I don't want to slow things down too much (all this magic starts to add up at some point). The current solution seems good enough for most cases, you can always create a custom provider to handle more complex logic otherwise.\n. I added some comments I hope it's clear now, and thanks indeed the  true !== made no sense :)\n. The issue is this would require advanced parsing of the function call to be able to know that randomElement is a function and then we'd have to check if it's an available provider or not etc. Right now only basic var replacements are done. To keep the fixtures simple it's preferable to put this sort of logic in the imageUrl provider.\nOtherwise maybe we could figure out a syntax for nested calls that has little chances of conflicting.\n. @tshelburne yeah I agree it'd be really hard to implement cleanly in the DSL so maybe best close this.\n. Maybe we could have an include rule on top of the file instead to allow merging multiple files together (if that's your goal, I'm not 100% sure). That way you could define templates (as per #86) in other files etc.\nI mean like:\n``` yaml\ninclude:\n    - foo/bar.yml\nSome\\Class:\n    lala:\n        foo: bar\n```\nSince include is a keyword it can't be a valid class name so no possibility for conflict here.\n. Yes I would say merge classes together, and other-fixture.yml takes precedence in case of duplicate keys.\n. How about just:\nclass:\n    foo:\n        name: lala\n        postMethod: []\nDoing this should call the method as per https://github.com/nelmio/alice#calling-methods - not sure if that's very different from an event callback?\n. Merged, thanks @addfs! I just had to tweak the code a bit to make it work with another feature I just merged (the array_reverse caused some issues with template extend order), but otherwise it works well.\n. @morrislaptop sorry for the delay, quite busy lately. I am not sure I like this very much though because this library is more built to generate data than to load a fixed data set, but I can sort of see why you'd want to have CSV loading sometimes as well..\n. Thanks :)\n. @tshelburne I'll try to take a closer look in a bit, but it's obviously been broken by the new merges :/\n. OK I read your summary above and poked around the code (a bit), first impression is very positive so thanks for the huge amount of work and for documenting it so well :)\nI haven't checked in details yet how the doctrine collection is used, but it sounds to me not-so-necessary to have a hard dependency on it. I guess we can replicate the minimum set of features we would really need.\nRegarding the commit messages don't worry about it, I can't possibly look at 70 commits individually I'd rather just play with the end result :) One minor concern is that you used tabs in most files + a few other minor CS violations. It's easy to fix, using https://github.com/fabpot/PHP-CS-Fixer on the whole codebase should do I think, but that'll basically change all/most lines so I don't know if having the commits spread out makes much sense anymore, might be best to run it, git add everything and then squash the commits.\nAs for the higher level picture of how to proceed, I think given the amount of change we might as well call it 2.0 and do a couple necessary BC breaks if needed at the same time. I guess the API itself didn't change but with so many changes you can't rule out bigger bugs so I'll try to tag a new release ASAP and then merge it in so we can already get people trying it out, iron out kinks etc, and then release a 2.0 once it stabilized. Makes sense?\n. I meant squash it all yes, but could be partial squash too, it's just as it is there are so many commits it's kinda unreadable, but up to you really.\n. Fixed by #100\n. Fixed by #100 \n. Thanks!\n. Thanks\n. I think this would work with the new identity provider: <(@store1->id)><randomNumber(10)>, but it can't use the current() as well inside, but if you have a store before, you could do <($store->getId())><randomNumber(10)>. This only works if the promotion is defined like:\nyaml\nPromoClass:\n    promo{1..10}:\n        store: @store<current()>\n        code: <($store->getId())><randomNumber(10)>\nTry it and check but I think it should work.\n. That's strange, but also you probably can't get the id before it's persisted unless you hard-code the store ids in the fixtures, so this probably won't work well.\n. Closing as I am not sure what to do here.. There might be a way by passing $store to a custom faker provider somehow. Anyway if it is still an issue feel free to discuss.\n. Hey, sorry guys I've been very busy lately and kinda left the alice PRs aside for a while. I'll try to get back on this boat and merge stuff soon :)\n. Yup that is correct I'll tag one today.\n. Alright 1.7 is out :) https://github.com/nelmio/alice/releases/tag/1.7.0\n. Sounds a bit over-engineered to me at first sight, but maybe others have more to say.\n. I'd guess you can work around it in two ways, either expand the array:\nyaml\nExample:\n  __construct: \n    - <fun_with_args(1, 2)>\n  foo: 1\n  bar: 'oof'\nor disambiguate the string:\nyaml\nExample:\n  __construct: [\"<fun_with_args(1, 2)>\"]\n  foo: 1\n  bar: 'oof'\n. This probably conflicts massively with #97 which is in discussion for quite a while.. Could you take a look there and maybe join the discussion?\n. Thanks for reporting, it was a nasty side-effect from using glob() on the input.\n. That would make the whole process slower though if it had to check the db for every primary key before adding the object into the doctrine entity manager. But it should be possible to do it optionally I guess..\n. Yup I agree.\n. @BaptN either you have to send them in the right order, or you should only load post.yml if it includes category.\n. Thanks but could you please add a test that shows the bug and ensures there is no regression?\n. Fixed by removing the : handling entirely since I can't really see what it was good for.. If I missed something and it was actually needed please let me know.\n. No plans no but probably would be nice I agree.\n. @andrewtch \n- not sure I got the hydrator dumper question\n- for dumping I guess there should be a way to filter if possible.. This could probably live as a third party package though doctrine-alice-dumper or something. With a CLI command and all?\n- same as above I suppose\nRegarding Spea/fixture-dumper, I guess dumping to alice's format makes tweaking things easier than if you dump to doctrine fixtures format, but for sure it's an option depending on the use case.\n. @Markcial if you can rebase this on latest master it'd be great but it'll take a bit of work I imagine.\n. Thanks @Markcial \n. I think it's just about auto-detecting private constructors and \nbypassing them, so no it's not really different, just convenience.\n. I guess let's close, it's possible to write a custom provider if needed.\n. Ideally we should be able to set the (local) flag on the fixture level and not classname level. I think that'd be a nicer fix. But we really need to merge #97 before doing any further improvements.\n. That said if this is critical I'm ok merging a change to protected to you can at least override it for the time being.\n. OK, closing, done in d1c3065dd3a92ca20efca2bb35802458ce3df426\n. Well I agree that if it stays it'd be better called something less specific than ORM. So yes ok to merge for me..\n. @tshelburne as per https://github.com/nelmio/alice#specifying-constructor-arguments 1.x did always call the constructor unless set to false, so this is a BC break, and while 2.0 sure allows BC breaks, I don't think this one makes a lot of sense. @jverdeyen if this is an urgent problem for you please change your alice requirement to ~1.0 instead of dev-master. You probably should anyway.\n. Yeah IMO it's a regression in 2.0 that should be easy to fix by tweaking \nthe order of passes somewhere.\n. Yeah IMO it's a regression in 2.0 that should be easy to fix by tweaking \nthe order of passes somewhere so let's leave open.\n. I'll let @tshelburne review this but note that there are 1.* tags, the 2.0 is under development in the master branch so until it's stable there won't be any tags. You can require ~1.0 if you don't want to deal with unstable stuff :)\n. I have to say I'd rather if this remains implicit and the only need to define __construct is to give params or to disable it. Once the implicit behavior is fixed, there is really no need for setting this to true.\n. @tshelburne I think this looks potentially interesting. Not sure if we want to keep the %% symfony convention for parameters or if something else would fit better with the rest of the alice syntax, but I think it would be better to have a syntax for that than to push people to use inline php which can be a bit of a pain if you don't have short tags enabled.\n. @tshelburne sounds fine if it replaces only known parameters. Because I remember having to change <foo> to <foo()> in the early days as it was conflicting with using html tags as text content in fixtures. Another way to avoid new syntax would be <param('foo')> but that's a bit more verbose.\n. I don't know if conflicts are very likely.. there aren't so many html tags and using html tags in itself isn't really the main use case for this lib. I wouldn't worry too much about that.\n. I mean I mentioned it before because I think the implementation should leave <a> alone for example. Now either we just make it ignore stuff when params don't exist, or we change the syntax to what @tshelburne suggested perhaps and that way we can error if the param name doesn't exist, hence allowing typos to be more easily found.\n. I believe this is actually fixed in the current master (upcoming 2.0) but I don't really have time to check right now.. Anyway keeping it as to-do for 2.0 just in case.\n. @charlesschaefer this should be sent against the master branch. The 1.x line won't receive new features anymore. It should also be a bit easier to do on master since it's all contained in Alice\\Fixtures\\Builder\\Methods\\RangeName and ListName\n. The issue is that whatever is in the call to faker providers is just evaluated a php code, and that phoneNumber function doesn't exist. You can use $this->fake('phoneNumber') (although in 2.0 it will be $fake('phoneNumber'), I'm working on a patch..).\n. I mean the phone line should be like this:\nyml\nFrontendBundle\\Entity\\Orders:\n    Orders{1..50}:\n        nickname: <text(15)>\n        phone: <formatPhoneNumber($this->fake('phoneNumber'))>\n        email: <companyEmail()>\n        fiscal_address: <address()>\n        shipping_address: <address()>\n        shipping_from: <randomElement(array('MRW','DOMESA', 'ZOOM'))>\n        payment_type: @PaymentType*\n        order_amount: <randomFloat(2)>\n        bank: @Bank*\n        transaction: <randomNumber()>\n        comments: <sentence(15)>\n        secure: <boolean(35)>\n        person: <randomElement(array(@Natural*, @Legal*))> \n        status: @OrderStatus*\n. I'm cool with having a doctrine-agnostic core but I think given its prevalence these days we might keep the doctrine driver in for ease of use.. Then again it's maybe a good thing to have a doctrine-specific package, it'd allow us to keep the README on-focus. In any case yes I agree this PR is a bit out of scope at the moment. It'd be great to have either doctrine-specific docs or a alice-doctrine package.\n. Thanks, I added a test and found a couple other related bugs which are also fixed :)\n. I guess we need to tag a bugfix 1.x release at some point.. You can require ~1.0@dev to make sure you get it now but without risking updating to master.\n. 1.7.1 is out actually ;)\n. Well I just wanted to make sure it's cool with you and someone actually reviews (after all the whole codebase kinda got changed under my feet so I am still re-discovering:). Feel free to merge if it's all good.\n. Estado* matches EstadoSolicitud so they get included. Namespace it like Estado_{1..50} and then you can do Estado_* safely.\n. It's unfortunately not easy because the flush is done all at once I think and then doctrine doesn't provide a whole lot of info when it fails like that. It'd be great to report it in Doctrine IMO, they could catch this and in case of Array to string conversion or similar errors I think sending details as to which entity/... failed would be awesome.\n. The issue is probably  observaciones: <sentences(2)> because sentences by default returns an array and it looks like you need a string. You can use observaciones: <sentences(2, true)> to get it back as string instead.\n. I think this could work <($slug . $this->fake('lastName'))>@triboom.com\n. Which version are you on?\nOn 1 Oct 2014 09:26, \"sergio marchesini\" notifications@github.com wrote:\n\nmhh I get\n[InvalidArgumentException]\nUnknown formatter \"identity\"\nAny hints?\nTIA\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nelmio/alice/issues/148#issuecomment-57433449.\n. Sorry for the delay.. identity is a default provider of alice. Maybe you call ->setProviders() and overwrite the default Nelmio\\Alice\\Provider\\IdentityProvider that is present in the providers? Or are you using some alice-bundle that does it for you perhaps?\n. OK once https://github.com/h4cc/AliceFixturesBundle/pull/35 is merged and you update that bundle + update to alice 1.7.2 it should be fixed.\n. Actually it's not entirely wrong, it's just that the example is made for the Nelmio\\Alice\\Fixtures class, if you instantiate one then you can call addProcessor on it.. Would you mind updating the PR to fix it rather than remove? \n. Ah crap I'm too late :D \n. see https://github.com/nelmio/alice/blob/1.x/src/Nelmio/Alice/Fixtures.php#L117\n. Rather just commit a fix than force-push I guess.. force-push is really \nto be avoided unless huge fuckups happen :)\n. Haha well feel free to force push it somewhere else :P\n. just set the person_type to 1 or 2 in each NaturalPerson and LegalPerson instead of having it in the base template if it can't be generalized.\n\ni.e.\n```\nFrontendBundle\\Entity\\Person:\n    person (template):\n        description: \n        contact_person: \nFrontendBundle\\Entity\\NaturalPerson:\n    Natural{1..25} (extends person):\n        identification_type: \n        ci: \n        person_type: 1\nFrontendBundle\\Entity\\LegalPerson:\n    Legal{26..50} (extends person):\n        identification_type: \n        rif: \n        person_type: 2\n```\n. I don't think so, especially if you have 10 Usuario and 5 Natural object, if they both need to be unique and you take the same value you're gonna have 5 duplicates in Usuario. You could however change it to this to get the username into the cedula value possibly.\n```\nUsuarioBundle\\Entity\\Usuario:\n    Usuario{1..10}:\n        pais: @Pais\n        estado: @Estado_\n        municipio: @Municipio\n        ciudad: @Ciudad\n        parroquia: @Parroquia\n        persona: \n        correo_alternativo: \n        telefono: \n        telefono_movil: \n        direccion: \n        representativeName:  \n        username (unique): \n        email (unique): \n        enabled: \n        plainPassword: \n        grupos: [@Grupos]\nUsuarioBundle\\Entity\\Natural:\n    Natural{1..5}:\n        usuario: @Usuario\n        pais_origen: @Pais\n        cedula (unique): <($usuario->getUsername())>\n        nombre (unique):  \n        apellido: \n        fecha_nacimiento: \n        sexo: \n``\n. Rename UsuarioNat and UsuarioEmp to UsuarioFooNat and UsuarioFooEmp and then you can useUsuarioFoo*. Obviously try to pick a better prefix than Foo..\n. Can you run with --verbose to see the stack trace? Also which version of alice are you on? And do you pass it any custom faker providers? Maybe you call setProviders() and overwrite the defaultNelmio\\Alice\\Provider\\IdentityProvider`\n. OK once https://github.com/h4cc/AliceFixturesBundle/pull/35 is merged and you update that bundle + update to alice 1.7.2 it should be fixed. See #148 for a similar issue.\n. You need to wait until @h4cc merges my fix in his bundle, or as a workaround for now you can give the default alice provider back to the bundle with this:\nservices:\n    alice.identity_provider:\n        class: Nelmio\\Alice\\Provider\\IdentityProvider\n        tags:\n            -  { name: h4cc_alice_fixtures.provider }\n. I'm not so sure anymore. Could be a side-effect of the refactoring?\n. Looks simple enough and ok to me yes but then 1.x should be merged into master and that feature replicated there if it isn't in yet. It's just extra work so that's why I'd rather freeze 1.x except for bad bugs but up to you :)\n. Sounds sane, thanks :)\n. thanks!\n. Looks good to me but could you add it to the README as well?\n. Thanks!\n. Thanks\n. Actually the simple string should work if birthDate has an associated setter setBirthDate(DateTime $date). In this case alice would see the DateTime type hint and convert the string to a date object. If it's a simple public property though or you're missing the type hint then we can't really do this transform, and in that case you should be able to solve it with <(new DateTime(\"1980-10-10\"))> I believe.\n. OK cool closing then\n. I think for such custom cases it's a good opportunity to define your own data provider with custom logic :)\n. phones (unique): <numberBetween(0, 3)>x @phone_* should ensure no duplicates are created. I am not sure if this works with arrays though.\n. And with only one phone per user?\n. Ok then I guess we don't support arrays yet :)\n. The call to load() you make is made for the Fixture::load class, if you want to use the yaml class directly do it like this:\nphp\n        $loader = new \\Nelmio\\Alice\\Loader\\Yaml('en_US', array($this)); // providers are set here!\n        $objects = $loader->load(__DIR__.'/../DataSets/profiles.yml');\n. Can you paste the fixture definition?\n. oh ok. I guess password returned something like: @1*hDQ and then it tried to evaluate that as a reference. Not quite sure how we can fix that.\n. I don't think there is no.. Maybe you could create the CategoryTranslation entities as fixtures and persist that though.\n. @question-<current()>->author is wrong, it should be @question_<current()>->author with underscore, and then maybe it'll work but frankly I am not sure anymore if this is supported or not :)\n. This seems like a bug we should fix though instead of documenting the workaround :)\n. No I figured we can keep this open as a reminder but if you rather open a clear bug report instead it would be even better :)\n. This is strange, it should work from what I see. Especially if you return an arraycollection then https://github.com/nelmio/alice/blob/1.x/src/Nelmio/Alice/Loader/Base.php#L588 should be true and it should return early.\n. Not sure if we have tests covering returning more than a string from providers. Could be a bug for sure. Also it would be interesting to see if it works if you require alice's ~2.0@dev version.\n. I believe you should just define an array (or yaml object) and let \ndoctrine serialize it to json..\ni.e.\nyaml\n    field: {label_alignment: block, max_length: 50, field_length: 60, \ndefault_value: \"\"}\n. Closing I guess since you resolved, but it's good to have here for future reference.\n. Well thank you ;)\n. Sounds good to me, not sure how this code looks in the current master/2.0-dev, but if you see a way to make an improvement there please send a PR :)\n. Sounds ok to me but would be good to have @tshelburne's opinion as he's more aware of the 2.0 design.\n. @tshelburne please run with this and tag a 2.0 already :) It's quite obvious I don't have time to manage alice. I hoped I'd find time but it's not happening so go with what you feel is right, if it's wrong there's always a next release where things can be fixed!\n. Also, as soon as 2.0 is out more people will start migrating which will reduce the 1.x PR/issue load, so that'd be good too.\n. Yeah I wanted to but I have to let go of some things because I can't do everything :)\n. This is actually correct for the upcoming 2.0 / master branch sorry for the confusion but you should check the 1.x readme if you use that :)\n. What do you mean by can't pass a whole fixture instance? If randomValue returns an array it should hopefully pass that on to the values property, but I am not sure if it'll try to stringify it or not..\n. Oh ok, I guess what you would need is rather grabbing the instances directly from the loader itself.\n. Oh yeah the 5x thing only works for references actually. I guess this would work: aliases: [\"<name()>\", \"<name()>\", \"<name()>\", \"<name()>\", \"<name()>\"]. We can leave this open as feature request I suppose :)\n. #195 needs to be ported to 2.0 still so leaving this open as reminder.\n. Could you add tests for this?\n. Ok thanks, I'll merge but it'd be great to do backport that new feature also on the master branch though otherwise we have a feature missing in 2.0. \n. Maybe this would be enough, but it still sounds like a bug we should fix:\nyaml\nNelmio\\Entity\\User:\n    user (template):\n        # template def here\n    user{0..50} (extends template): {}\n. I think it should rather be fixed, it's probably some silly empty check somewhere that needs to be removed so it works with null keys or something. I haven't looked at it but I'd imagine it's not a hard fix.\n. I think this issue was just overlooked, I don't think it's by design. I agree if the optional data doesn't trigger then it shouldn't be generated. Not sure how easy that is to implement but if you wanna have a go at that in the master branch that sounds good.\nAbout the 50%? true : false thing, that'd be a new feature and it sounds a bit risky in case the generated true case contains a : or something. Given we don't have a proper lexer for this whole syntax mess we have to be careful :) I'd say defaulting your model to have the empty data sounds safer.\n. Should be possible if you create a bunch of Media objects and then reference them into this property like emailsMediaXref: 3x @media* you would get 3 media objects linked on every email.\n. Could you add a test for it?\n. Thanks looks good to me, hopefully I am not missing anything\n. IIRC You need the <> around current() In the identity call as well\notherwise it just sees it as PHP.\n. @umpirsky are you using 2.0?\n. Ah ha.. Ok sorry I'm a bit rusty here didn't use alice in a while, but this will work in 2.0 at least, not sure about 1.* @<(round($fake('current') / 10 + 1))>.\nIf it fails with 1.* I would ping the bundle author about maybe adding alice 2 support, the base interface didn't change so much so it should be easy enough.\n. Please don't do things like requiring \"nelmio/alice\": \">=1.5.0\", that's a very bad idea if we some day release a 3.0 breaking everything.\n2.0 is fairly compatible, so if your bundle works with 1.5+ and 2.0 as well please use 1.5 - 2.99 or ^1.5 || ^2.0 as requirement, both of which will allow 2.* versions and 1.5+ in the 1.* range\n. As for this PR, thanks ;)\n. Maybe it could be reorganized into a few chapters/files? I don't think exploding it all is that great because indeed you can't easily scroll/search into them, but yeah all in one is getting a bit too big.\n. Looks great to me thanks @theofidry \n. +1 for the autoload-dev change.\nThe rest I don't think it brings anything except breaking open PRs and potentially creating conflicts when trying to merge up from the 1.0 branch so -1 for me.\n. Yeah it's not a huge deal I know but I also don't really see the advantage of skipping those two dirs.\n. What was the issue? Because conflicting prefixes should not be one it should just try both. Anyway looks fine now.\n. Ok, composer dump ;)\n. I think this can go in 2.x-only, and yes it probably should be a standalone util class, I just didn't have much room in that tweet ;)\nThe question is should there be any easy way to pass in custom providers as well, or variables, etc. I think we need to define a good simple high level API that allows most use cases and then if people want more they can always do it themselves with the lower level API.\n. Maybe pass optional variables array in process()\nIt might let you inject values that are usable inside the faker call as \n$foo, but not sure how easy it is to achieve this so if it's not \nworkable whatever I guess.\n. I don't know what to think to be honest, it seems like a small change but yes as you say the more explicit use is also possible and not so hard, I guess it's mostly a documentation problem..\n. Anytime, feel free :) I'd just be happy if the changelog is kept up to date with whatever changes go in a given release, but otherwise do it as often as you'd like really.\n. Tagged 2.1\n. A third bundle? :(\nI see it's a fork of the hautelook one. If you want to turn a fork into a legitimate project the least you can do is edit the README to have some information about what got changed and why it's better than the original.\nIt'd be great to try and talk to the hautelook folks as well, in case theirs isn't maintained anymore maybe they can add you as contributor, or mark theirs abandoned on packagist and point to yours?\n. Ok given there is a PR with quite a bit of support, and they don't maintain it much anymore, I am hoping this will resolve itself successfully and @hjr3 gives you repo access or such. Let's keep this PR open for now but ideally we can close it soon :)\n. Excellent, and no stress @hjr3, holidays are ok too :)\n. I'd rather have @tshelburne look over this one because I am not so familiar with the 2.0 bootstrapping code tbh, haven't used alice myself in a while.\n. I think setLocation: 50%? [foo, bar] should be supported, this seems like a reasonable expectation. Let's leave this open :)\n. Seems fine to me but it's breaking the test suite, can you check that?\n. Err, it was to provide a list of fixture files before I think, not sure if this was removed in 2.0 or what exactly happened.\n. Thanks\n. Ah I see it was used to have a fixture as a php array instead of loading it from a yml file.. \n. There is an example usage in the code block, <{ebay_domain_name}> :)\n. Thanks\n. Nope i dont really mind. I think both have cases where they are more or\nless readable and would advise common sense over blindly following rules,\nas always.\n. For what it's worth after looking at the diff I don't think these are great\nsprintf cases. If you have only one param a string concat is shorter and\nclear enough IMO. I'm not gonna fight it either way because it's a detail,\nbut change for change isn't really valuable.\n. The failing test isn't the main problem.. we need someone to review :) Sorry but I don't have much time atm.\n. Looks fine thanks\n. Don't get me wrong, but stuff doesn't usually get done unless someone that\nneeds it chips in the time to do it. Alice is made to be a simple and way\neasier replacement of doctrine fixtures. Sure that can't cover all use\ncases without some amount of work, and I think that's ok.\nEverything can't do everything.\n. I really don't like failing builds due to CS checks. Maintainers can run php-cs-fixer once in a while to fix the little details that get through every now and then, but bothering people with patch files when they try to contribute something isn't achieving anything IMO.\n. Lots of minimal changes yes, not all of them I would include in the fixer config.. one CS fix commit every now and then pollutes less than CS fix commits in every PR I'd argue, but in any case my point isn't about git history purity or codebase purity, it's about making it a smoother experience for people that contribute, because not all of them are familiar with the gazillion build tools and blinking red lights we add to all repos. This can be pretty overwhelming for newcomers and does not help the open source cause.\n. I said what I had to say.. we can't agree on everything, it's life, but thankfully it's about a trivial matter of coding style, not actual functionality. If @tshelburne thinks otherwise and wants to merge ok. I gave him carte blanche on this repo and I'll happily be overruled, but if it's left up to me it won't go in.\n. Well he'll get the messages and reopen if needed I'd say.\n. IMO if we allow that it'll end up like PHP templates vs twig templates..\nYou put too much logic in there eventually. Requiring an additional step\nmeans you think twice before doing something dumb :)\nOn 11 Oct 2015 12:13, \"Sullivan SENECHAL\" notifications@github.com wrote:\n\nIndeed, that would give more liberty without create a lot of provider,\neven if I prefer the second way. :-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nelmio/alice/issues/283#issuecomment-147182580.\n. Seems fine yeah, we barely use any symfony anyway. One issue though is that AFAIK symfony3's yaml component doesn't allow unquoted @s anymore so all our @foo references will need to become '@foo', as the @ is a reserved char in the yaml spec. This might not break the tests, but I think we should update docs accordingly, and well users migrating to sf3 will have the problem but that's gonna hit them for more than alice probably (like symfony service definitions mainly).\n. Would you mind updating the markdown files of the docs too? We shouldn't promote stuff that won't work..\n. Thanks\n. You can give access to the whole loader to your provider and that way it\ncan fetch what's needed programmatically. That's the best way to achieve\ncomplex such tasks I think.\n. 2.1.2 done\n. AFAIK alice doesn't support inserting into mysql directly so I am wondering what you use it with? It sounds like this escaping should be done by whatever lib you're using together with alice. Haigha maybe?\n. I tend to agree that while it has a BC break potential it is a bugfix and we never advertised this as a feature, so I'd be rather for fixing it. The fix isn't so great though as it only fixes the . case, the best would be to run preg_quote on $mask to escape all meta-characters and then replace \\\\* by .* to get a working pattern.\n. Seems safe enough as long as people use camelCased method names, but strictly speaking it does break BC as if you have setfoo_bar it'll now call setfoobar. I doubt it'll really be an issue in practice though.\n. I gave you commit access, please be reasonable ;)\n. Sounds ok to me as I guess it's what people intended anyway.\n. Those methods should be moved to the ORMInterface and that's what should be passed in the loader, not the ObjectManager directly because I don't see any reason to tie this to doctrine.\n. Please don't change unrelated stuff in your PR, especially since this was correct, it tests that the load method loads something.\n. Using $this->assertSame($user, $group->getOwner())  would be safer here, to ensure it really is the same object and not just two users with the same username.\n. That is what I meant yes, a couple improvements though: \n- current might be renamed to currentRangeId so it's clearer what it is?\n- current should be set to null after the for() loop is over, just to avoid the last value from leaking to some other current() use that would be at the wrong place. Eventually you could check for null in the fake() method and throw an exception to say that it shouldn't be used out of fixture ranges. \n. Instances are valid providers too, so this should be serialized in a smarter way (I guess get_class on the providers if they are objects will do).\n. This was closed not merged no need to review ;)\n. AFAIK dynamic calls like this are faster than call_user_func\n. It's kinda nasty to have two private properties in two classes extending each other though. Very error prone, so I'm ok with changing this.\n. The goal of the \\b here (but I now realize it was borked anyway) was to avoid matching things in the middle of a string, like say <lala(\"foo@test.com\")> would now match a @test.com reference in the middle and break the whole thing.\n\nI think the boundaries should be added back but with a more sensible (?:^|\\b| ?, ?) and (?:\\b|$). I think this should work to allow multiple while preventing conflicts.\n. Should read for that class. no?\n. Ah well I suppose the template is available to other classes as well technically so I get what you meant now. Nevermind :)\n. Would you mind reversing this logic? Because traditionally in array_merge the last one wins, same in JS with _.extends and similar. So I think it'd be more natural if the last extends would override the previous ones. Please tell me if that's bullshit :)\n. Well the second one is actually what the new logic does no? Since 1 (the current object) wins over extended instances, 2 wins over 3 etc. Anyway thanks for updating :)\n. It's checked in addBuilder, probably could be checked in the constructor too, but I don't agree it should be checked on usage here.\n. It's also accessed from Parser\\Method\\Base::createFakerClosure so yes it needs to (I just force-pushed btw.. I did the initial patch against an outdated copy)\n. Not really.. It's passed on to the template, but if you misconfigure it you just can't use the $fake closure in the template. It's not perfect but I don't see another way to support arbitrary classes extending with possibly different context.\n. I think strict checking for true here is harmful indeed as it might break things that passed in 1 or whatever truthy/falsey value.\n. I think in v1 the point of this was that you could disable the automatic flush if you wanted to call persist/load many times and then flush them all at once. It's never been used in alice itself but was an option for users to use. Whether it still makes sense in the new code I am not sure.\n. Sorry but those at line 7, 35 and here should not be quoted IMO, as they are not in the Yaml. The quotes aren't part of the alice syntax.\n. ",
    "umpirsky": "I know, but that is the case when you want multiple references (array of them), I want single random reference. Something like @user*, I see only 5x @user* in readme.\n. I wasn't clear enough. Here is the use case.\nLet's say you have products and categories. Each product belongs to one category, so you have product fixture:\nyaml\nAcme\\Entity\\Product:\n    product{0..30}:\n        name: <text>\n        category: @category*\nSince you have in Product entity:\nphp\n    public function setCategory(Category $category)\n    {\n        $this->category = $category;\n    }\nYou get this error:\nPHP Catchable fatal error:  Argument 1 passed to Acme\\Entity\\Product::setCategory() must be an instance of Acme\\Entity\\Category, array given.\nAll I want to do is to pick a random category for each of my 30 products.\n. Hehe. FormUtil::singularify() should always return array, this is not logical. Cheers.\n. Yes,but isn't it better to have Fixtures instance which holds single persister? That way it will work, you just have to instantiate Fixtures.\n. @Seldaek Thanks for the info, not a problem to migrate to new syntax ;)\n. @cmfcmf It throws:\n[Symfony\\Component\\Debug\\Exception\\ContextErrorException]  \nWarning: current() expects exactly 1 parameter, 0 given\nThanks.\n. @Seldaek Parse error in that case:\nParse error: syntax error, unexpected '<' in vendor/nelmio/alice/src/Nelmio/Alice/Loader/Base.php(653) : eval()'d code on line 1\nThanks.\n. @Seldaek No, using hautelook/alice-bundle with nelmio/alice v1.7. \n. @Seldaek It fails with 1.7. Already pinged bundle author. Will post feedback when I test it with 2.0.\nThanks a lot!\n. Similar happens in this case:\nyaml\nfoo{1..5}:\n        username: username<current()>\nThe fix can be:\ndiff\nfoo{1..5}:\n-        username: username<current()>\n+        username: <identity('username'.$current)>\nBut I expected it to work out of the box.. It does work by default, I created small example:\n```yaml\nUser:\n    user{1..2}:\n        __construct: ['@group1', '@group']\n        username: username\nGroup:\n    group{1..2}:\n        name: ''\n```\n```php\n<?php\nrequire_once DIR.'/vendor/autoload.php';\nclass User\n{\n    public $username;\n    protected $group;\npublic function __construct(Group $group1, Group $group)\n{\n    $this->group = $group;\n}\n\n}\nclass Group\n{\n    public $name;\n}\nclass WithReflectionLoader extends Nelmio\\Alice\\Loader\\NativeLoader\n{\n    protected function createPropertyAccessor(): Symfony\\Component\\PropertyAccess\\PropertyAccessorInterface\n    {\n        return new Nelmio\\Alice\\PropertyAccess\\ReflectionPropertyAccessor(parent::createPropertyAccessor());\n    }\n}\n// $loader = new Nelmio\\Alice\\Loader\\NativeLoader();\n$loader = new WithReflectionLoader();\n$objectSet = $loader->loadFile(DIR.'/fixtures.yml');\nvar_dump($objectSet);\n```\nMust be something specific to my project...but not sure what...maybe https://github.com/theofidry/AliceDataFixtures. But still, error occurs in Alice code, so even if it's theofidry/AliceDataFixtures fault, there is a part of the problem in Alice too. At least error handling.. Fixed with:\ndiff\n nelmio_alice:\n     functions_blacklist:\n+        - 'current'\n         - 'md5'\nI will leave issue opened as Notice: Array to string conversion deserves fixing.. Thanks, when can we expect next release?. ",
    "digitalkaoz": "fixed\n. @Seldaek any news on this one?\n. thanks :)\n. yeah +1 :)\n. Yes,\nFound out its a bit complicated. I wanted to set dynamic properties on a\nempty class solved it with a custom setter __set.\nI think wie could close it, but supporting dynamic properties nativly would\nbe cool.\nThe patch seems weird. Treating isset() same as property_exists is probably\nnot good, because then you do a ReflectionProperty on it and it'll fail.\nThen the rest seems to be handling for __set more than __get, but maybe\nthat's just a mistake in your PR description?\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/nelmio/alice/pull/72#issuecomment-30020415\n.\n. i would like to pass all objects of e.g. @number_value to a function.\nbut the first solution:\nyml\nvalues: 10x <randomElement([@number_value*, @number_value*, @entity_value*])>\nwould be better i think\n. ",
    "tyomo4ka": "May be just rename Fixtures::load first argument to $files and add array typehint?\n@Seldaek nice library btw\n. ",
    "jrobeson": "quick hack would be a faker \"namespace\" like <faker:foo>\nI was going to suggest the twigish syntax myself :(\nI personally have no problem quoting the strings for consistency due to issues like this \nhttps://github.com/symfony/symfony-standard/commit/9afa2c1a0d1f86c5aed1ec2aa6729da8942bb0c5\nI don't want to have to remember which ones i have to quote and which not.\n. @everzet: constructor\n. ",
    "dmecke": "That's what I tried to find, so this might be a good way to go. Is there any special character that would match the intention well?\n. I'd prefer <current()>, maybe <index()> would be another idea. But I agree it should be a <...> variant.\n. I'll try it. Hope to be able to send it tomorrow.\n. Just to carify: Do we want it to be <current(@user)> or @user<current()>?\n. Wow, as I am new to closures and have only basic knowledge about regex, this seems to be the perfect project for me. ;-) I think I need some further assistence as I would really like to implement that anyhow.\nI understand that $i holds the value that we want to use as a replacement for <current()> later on. But I don't get the point where the fake() method is called (maybe here? https://github.com/nelmio/alice/blob/master/src/Nelmio/Alice/Loader/Base.php#L316). Maybe you have another hint?\n. Here is the pull request: https://github.com/nelmio/alice/pull/11\n. fixed the issues you mentioned\n. ",
    "jubianchi": "There is no problem to me ;)\nI was thinking of using the -> as a separator but I used the dot as it is shorter and simpler to type.\n. The branch was updated to use the -> separator.\nIf it's OK for you, i'll update the readme to document this feature.\n. done ;)\n. Thank you for the merge ! And also for Alice which is a great tool ;)\n. Sorry, I did not see this : https://github.com/nelmio/alice/pull/16 as this feature is not documented in the readme...\n. Should also fix or help to fix #17\n. Thank you :)\n. @shouze Sorry, I did not follow alice development for while now but I think a release could be tagged if features are available and people need them.\nBy the way, I think some PRs could be merged before tagging, for example: \n- #101 fixes a typo which is a minor modification\n- #100 as it seems to add requested feature and fixes 2 issues\n- #93 as it also adds a cool feature and seems to be valid\nI'm not a core contributor nor decider on this repository so I can only suggest or propose myself to help tagging/reviewing/merging if needed.\n. ",
    "kbond": "I agree, what about a ProxyInterface that you wrap your Entity with?  The ORMInterface could check if the object is an instance of ProxyInterface and call it's persist method?\nExample:\nyaml\nMyApp\\UserBundle\\Alice\\UserProxy:\n    user0:\n        username: kevin\n        plainPassword: pass\n        email: kevinbond@gmail.com\n        enabled: true\n. hmm, but how would I inject the UserManager?\n. ",
    "soullivaneuh": "I'm stuck too with FOSUserBundle for making fixtures, this features will be welcome ! :+1: \nDo you have another tricks ?\n. @theofidry I know that, it's especially what I don't want to do.\nEach TaxValue will be used for only once TaxRule and information inside is skinny.\nMake instance directly on relation would make a clearer fixtures configuration file.\n. @theofidry I the main idea but I don't think class is necessary. This could be detected on entity definition.\n. Yes, it would be definitely a nice to have.\n. Sorry for the very late reply.\nThe @tshelburne may work, but only if you can pass value on the constructor AFAIK.\nHaving an inline denormalization would be great. You specify a class on your sample, but I think it should be optional.\nWe can use a lib such as this one to easy discover the wanted value of the setter/added: https://packagist.org/packages/roave/better-reflection. > @Soullivaneuh do you have any proposal on the syntax?\nWhy not simply like phpunit does ? https://phpunit.de/manual/current/en/appendixes.configuration.html#appendixes.configuration.groups\n. Oh indeed @theofidry, thanks!\n. You're welcome. Could we have a new patch release for this? Thanks.\n. ping @theofidry \n. Well, I mean ping @tshelburne.\nHave to get some sleep.\n. :+1: \n. Thanks!\n. > Maintainers can run php-cs-fixer once in a while to fix the little details that get through every now and then\nI not agree with you. Running regularly CS fixes will pollute git history IMHO.\nAnd BTW, I think it's also a good think to learn CS conventions to contributors.\nAny chance to get your opinion changed about this PR?\nThanks.\n. And BTW, see the changes. Lot of files corrected with CS.\nThis is the proof that running php-cs-fixer \"regularly\" is not the good way for me. :-1: \n. @Seldaek If I can add one more argument, StyleCI has a nice system to propose automatic patches.\nIf a PR is wrong with CS, contributors just has to click on fix button and accept the sub PR if they don't want to run a single command line. :+1: \n. > less than CS fix commits in every PR\nCommand line and squash are here for that. :-)\n\nbecause not all of them are familiar with the gazillion build tools and blinking red lights\n\nAs I said: \n\nAnd BTW, I think it's also a good think to learn CS conventions to contributors.\n\nIf every repository has this politics, those contributors would never learn about this. This is how I learned for my personal case.\nI understand your point of view, but I still think this is a big miss to avoid this kind of tools.\n. ping @Seldaek \n. > I said what I had to say.. we can't agree on everything, it's life\nSure. I just wanted to know your opinion about our arguments. ;-)\n\nIf @tshelburne thinks otherwise and wants to merge ok. I gave him carte blanche on this repo\n\nIn this case, maybe you can reopen this PR.\n. If this is your politics, I delete this branch then.\nThanks for your attention.\n. Well, that's an idea. But the Faker library already does a great work for that.\nIs that really a nice to have?\n. Indeed, that would give more liberty without create a lot of provider, even if I prefer the second way. :-)\n. I can confirm the bug.\nReplacing / by _ does the tricks.\n. This is normal and not related with alice IMO.\nYou wrote a integer value starting with 0 that is considered as an octal number on PHP: http://php.net/manual/en/language.types.integer.php\nJust use single quotes to fix it.\n. Symfony 3.0 is now released. Did you plan a date for a new tag of this bundle? Thanks.\n. @NiR- since when using @thing directly cause problems with yaml? Don't have this issue on my projects.\n. Oh I see, thanks for the tip. :+1: \n. > DnsManager is supposed to persist only PowerDNSDomain entities\nNot only. It also persists PowerDNSRecord entities.\nWhen you create a domain, you have to setup some basic entries like NS and SOA. The manager do that thing.\n. > for now I'm not removing the old code, just deprecating it. So we could still tag it under v2 and do the last move for v3.\n[...]\n\nthe current code assumes PHP7. I can easily understand it being a bit too forward. However realistically, v3 is not going to come out before months so PHP7 will already be more adopted at that time. \n\nWell, deprecation things should be on a new minor IMHO and not a on major with PHP version support dropping.\n. Can confirm the issue with hautelook/alice-bundle too:\n``` bash\n$ ./docker-console make app_fixtures\n./app/console --no-interaction --env=dev hautelook_alice:doctrine:fixtures:load --purge-with-truncate --bundle=AppBundle --manager=default\n\nfixtures found:\n      - /code/src/AppBundle/DataFixtures/ORM/incident.yml\n      - /code/src/AppBundle/DataFixtures/ORM/changelog.yml\n      - /code/src/AppBundle/DataFixtures/ORM/ticket.yml\n      - /code/src/AppBundle/DataFixtures/ORM/payment_method.yml\n      - /code/src/AppBundle/DataFixtures/ORM/puppet.yml\n      - /code/src/AppBundle/DataFixtures/ORM/valid_tld.yml\n      - /code/src/AppBundle/DataFixtures/ORM/package.yml\n      - /code/src/AppBundle/DataFixtures/ORM/credit_card.yml\n      - /code/src/AppBundle/DataFixtures/ORM/operation.yml\n      - /code/src/AppBundle/DataFixtures/ORM/cron.yml\n      - /code/src/AppBundle/DataFixtures/ORM/news.yml\n      - /code/src/AppBundle/DataFixtures/ORM/email.yml\n      - /code/src/AppBundle/DataFixtures/ORM/group.yml\n      - /code/src/AppBundle/DataFixtures/ORM/server.yml\n      - /code/src/AppBundle/DataFixtures/ORM/user_browser.yml\n      - /code/src/AppBundle/DataFixtures/ORM/organization.yml\n      - /code/src/AppBundle/DataFixtures/ORM/accounting.yml\n      - /code/src/AppBundle/DataFixtures/ORM/ip_v4.yml\n      - /code/src/AppBundle/DataFixtures/ORM/os.yml\n      - /code/src/AppBundle/DataFixtures/ORM/purchase.yml\n      - /code/src/AppBundle/DataFixtures/ORM/api_key.yml\n      - /code/src/AppBundle/DataFixtures/ORM/invoice.yml\n      - /code/src/AppBundle/DataFixtures/ORM/alert.yml\n      - /code/src/AppBundle/DataFixtures/ORM/bank_account.yml\n      - /code/src/AppBundle/DataFixtures/ORM/server_service.yml\n      - /code/src/AppBundle/DataFixtures/ORM/service_ip.yml\n      - /code/src/AppBundle/DataFixtures/ORM/domain.yml\n      - /code/src/AppBundle/DataFixtures/ORM/country.yml\n      - /code/src/AppBundle/DataFixtures/ORM/user.yml\n      - /code/src/AppBundle/DataFixtures/ORM/backup_model.yml\n      - /code/src/AppBundle/DataFixtures/ORM/product.yml\n      - /code/src/AppBundle/DataFixtures/ORM/ip_group.yml\n      - /code/src/AppBundle/DataFixtures/ORM/ip_v6.yml\npurging database\n\n[Hautelook\\AliceBundle\\Alice\\DataFixtures\\LoadingLimitException]                                                           \n  Loading files limit of 5 reached. Could not load the following files:                                                      \n  /code/src/AppBundle/DataFixtures/ORM/cron.yml:                                                                             \n   - Instance mask \"domain_\" did not match any existing instance, make sure the object is created after its references      \n  /code/src/AppBundle/DataFixtures/ORM/domain.yml:                                                                           \n   - Instance mask \"server_nx102\" did not match any existing instance, make sure the object is created after its references \n  /code/src/AppBundle/DataFixtures/ORM/incident.yml:                                                                         \n   - Instance mask \"server_\" did not match any existing instance, make sure the object is created after its references      \n  /code/src/AppBundle/DataFixtures/ORM/ip_v4.yml:                                                                            \n   - Instance server_default is not defined                                                                                  \n  /code/src/AppBundle/DataFixtures/ORM/operation.yml:                                                                        \n   - Instance cron_98 is not defined                                                                                         \n   - Instance cron_95 is not defined                                                                                         \n   - Instance cron_6 is not defined                                                                                          \n   - Instance cron_99 is not defined                                                                                         \n   - Instance cron_49 is not defined                                                                                         \n   - Instance cron_41 is not defined                                                                                         \n  /code/src/AppBundle/DataFixtures/ORM/package.yml:                                                                          \n   - Instance mask \"server_\" did not match any existing instance, make sure the object is created after its references      \n  /code/src/AppBundle/DataFixtures/ORM/puppet.yml:                                                                           \n   - Entity with ID @puppet_package_www-servers_apache and class AppBundle\\Entity\\PuppetPackage not found                    \n  /code/src/AppBundle/DataFixtures/ORM/server.yml:                                                                           \n   - Instance os_gentoo is not defined                                                                                       \n   - Instance mask \"puppet_class_\" did not match any existing instance, make sure the object is created after its references\n  /code/src/AppBundle/DataFixtures/ORM/service_ip.yml:                                                                       \n   - Instance mask \"server_\" did not match any existing instance, make sure the object is created after its references        \nhautelook_alice:doctrine:fixtures:load [-b|--bundle [BUNDLE]] [-em|--manager MANAGER] [--append] [--shard SHARD] [--purge-with-truncate] [-h|--help] [-q|--quiet] [-v|vv|vvv|--verbose] [-V|--version] [--ansi] [--no-ansi] [-n|--no-interaction] [-s|--shell] [--process-isolation] [-e|--env ENV] [--no-debug] [--] \nMakefile:55: recipe for target 'app_fixtures' failed\nmake: *** [app_fixtures] Error 1\n```\n@theofidry Can we have a clue of the reason of this bug? :-)\n. @theofidry This is now what I have using nelmio/alice dev-master and https://github.com/hautelook/AliceBundle/pull/238: \n``` bash\n$ ./docker-console make app_fixtures\n./app/console --no-interaction --env=dev hautelook_alice:doctrine:fixtures:load --purge-with-truncate --bundle=AppBundle --manager=default\n\nfixtures found:\n      - /code/src/AppBundle/DataFixtures/ORM/incident.yml\n      - /code/src/AppBundle/DataFixtures/ORM/changelog.yml\n      - /code/src/AppBundle/DataFixtures/ORM/ticket.yml\n      - /code/src/AppBundle/DataFixtures/ORM/payment_method.yml\n      - /code/src/AppBundle/DataFixtures/ORM/puppet.yml\n      - /code/src/AppBundle/DataFixtures/ORM/valid_tld.yml\n      - /code/src/AppBundle/DataFixtures/ORM/package.yml\n      - /code/src/AppBundle/DataFixtures/ORM/credit_card.yml\n      - /code/src/AppBundle/DataFixtures/ORM/operation.yml\n      - /code/src/AppBundle/DataFixtures/ORM/cron.yml\n      - /code/src/AppBundle/DataFixtures/ORM/news.yml\n      - /code/src/AppBundle/DataFixtures/ORM/email.yml\n      - /code/src/AppBundle/DataFixtures/ORM/group.yml\n      - /code/src/AppBundle/DataFixtures/ORM/server.yml\n      - /code/src/AppBundle/DataFixtures/ORM/user_browser.yml\n      - /code/src/AppBundle/DataFixtures/ORM/organization.yml\n      - /code/src/AppBundle/DataFixtures/ORM/accounting.yml\n      - /code/src/AppBundle/DataFixtures/ORM/ip_v4.yml\n      - /code/src/AppBundle/DataFixtures/ORM/os.yml\n      - /code/src/AppBundle/DataFixtures/ORM/purchase.yml\n      - /code/src/AppBundle/DataFixtures/ORM/api_key.yml\n      - /code/src/AppBundle/DataFixtures/ORM/invoice.yml\n      - /code/src/AppBundle/DataFixtures/ORM/alert.yml\n      - /code/src/AppBundle/DataFixtures/ORM/bank_account.yml\n      - /code/src/AppBundle/DataFixtures/ORM/server_service.yml\n      - /code/src/AppBundle/DataFixtures/ORM/service_ip.yml\n      - /code/src/AppBundle/DataFixtures/ORM/domain.yml\n      - /code/src/AppBundle/DataFixtures/ORM/country.yml\n      - /code/src/AppBundle/DataFixtures/ORM/user.yml\n      - /code/src/AppBundle/DataFixtures/ORM/backup_model.yml\n      - /code/src/AppBundle/DataFixtures/ORM/product.yml\n      - /code/src/AppBundle/DataFixtures/ORM/ip_group.yml\n      - /code/src/AppBundle/DataFixtures/ORM/ip_v6.yml\npurging database\n\n[UnexpectedValueException]                                                                          \n  Entity with ID @puppet_package_www-servers_apache and class AppBundle\\Entity\\PuppetPackage not found  \nhautelook_alice:doctrine:fixtures:load [-b|--bundle [BUNDLE]] [-em|--manager MANAGER] [--append] [--shard SHARD] [--purge-with-truncate] [-h|--help] [-q|--quiet] [-v|vv|vvv|--verbose] [-V|--version] [--ansi] [--no-ansi] [-n|--no-interaction] [-s|--shell] [--process-isolation] [-e|--env ENV] [--no-debug] [--] \nMakefile:55: recipe for target 'app_fixtures' failed\nmake: *** [app_fixtures] Error 1\n``\n. @theofidry OK I found the problem. This is the hypen (-`).\nThis is the concerned fixture file:\n``` yaml\nAppBundle\\Entity\\PuppetFlagGroup:\n    puppet_flag_group_use:\n        name: USE\n    puppet_flag_group_kernel:\n        name: KERNEL\n    puppet_flag_group_php_targets:\n        name: PHP_TARGETS\nAppBundle\\Entity\\PuppetFlag:\n    puppet_flag_use_api:\n        name: api\n        group: '@puppet_flag_group_use'\n    puppet_flag_use_ncurses:\n        name: ncurses\n        group: '@puppet_flag_group_use'\n    puppet_flag_use_debug:\n        name: debug\n        group: '@puppet_flag_group_use'\n    puppet_flag_kernel_linux:\n        name: linux\n        group: '@puppet_flag_group_kernel'\n    puppet_flag_kernel_darwin:\n        name: darwin\n        group: '@puppet_flag_group_kernel'\n    puppet_flag_kernel_freebsd:\n        name: freebsd\n        group: '@puppet_flag_group_kernel'\n    puppet_flag_php_targets_php54:\n        name: php54\n        group: '@puppet_flag_group_php_targets'\n    puppet_flag_php_targets_php55:\n        name: php55\n        group: '@puppet_flag_group_php_targets'\n    puppet_flag_php_targets_php56:\n        name: php56\n        group: '@puppet_flag_group_php_targets'\n    puppet_flag_php_targets_php70:\n        name: php70\n        group: '@puppet_flag_group_php_targets'\nTODO: Use correct id with / when issue will be solved: https://github.com/nelmio/alice/issues/284\nAppBundle\\Entity\\PuppetPackage:\n    puppet_package_app-admin_puppet:\n        name: app-admin/puppet\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_dev-db_mysql:\n        name: dev-db/mysql\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_dev-db_phpmyadmin:\n        name: dev-db/phpmyadmin\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_dev-db/postgresql_server:\n        name: dev-db/postgresql-server\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_dev-lang_php:\n        name: dev-lang/php\n        availableVersions: [5.3.0, 5.4.0, 5.5.5, 5.6.38]\n        defaultVersion: 5.6.38\n        availableFlags:\n            - '@puppet_flag_php_targets_php54'\n            - '@puppet_flag_php_targets_php55'\n            - '@puppet_flag_php_targets_php56'\n            - '@puppet_flag_php_targets_php70'\n            - '@puppet_flag_use_debug'\n        defaultEnabledFlags:\n            - '@puppet_flag_php_targets_php56'\n        defaultDisabledFlags:\n            - '@puppet_flag_php_targets_php54'\n            - '@puppet_flag_use_debug'\n    puppet_package_kernel:\n        name: kernel\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n        availableFlags:\n            - '@puppet_flag_kernel_linux'\n            - '@puppet_flag_kernel_darwin'\n            - '@puppet_flag_kernel_freebsd'\n            - '@puppet_flag_use_debug'\n        defaultEnabledFlags:\n            - '@puppet_flag_kernel_linux'\n    puppet_package_mail-filter_spamassassin:\n        name: mail-filter/spamassassin\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_mail-mta_postfix:\n        name: mail-mta/postfix\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_net-dns_bind:\n        name: net-dns/bind\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_net-misc_openssh:\n        name: net-misc/openssh\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_sys-apps_baselayout:\n        name: sys-apps/baselayout\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_sys-apps_openrc:\n        name: sys-apps/openrc\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_sys-apps_portage:\n        name: sys-apps/portage\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_sys-boot_grub:\n        name: sys-boot/grub\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_www-servers_apache:\n        name: www-servers/apache\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\n    puppet_package_www-servers_nginx:\n        name: www-servers/nginx\n        availableVersions: [1.0.0, 1.0.1, 2.0.0]\n        defaultVersion: 2.0.0\nAppBundle\\Entity\\PuppetClass:\n    puppet_class_basepack:\n        name: basepack\n        base: true\n    puppet_class_apache:\n        name: apache\n        packages:\n            - '@puppet_package_www-servers_apache'\n    puppet_class_php:\n        name: php\n        packages:\n            - '@puppet_package_dev-lang_php'\n    puppet_class_mysql:\n        name: mysql\n        packages:\n            - '@puppet_package_dev-db_mysql'\n            - '@puppet_package_dev-db_phpmyadmin'\nAppBundle\\Entity\\PuppetTemplate:\n    puppet_template_lamp:\n        name: LAMP\n        classes:\n            - '@puppet_class_apache'\n            - '@puppet_class_php'\n            - '@puppet_class_mysql'\n```\nAccording to #355, hyphens are not allowed anymore.\nI see many problems with this one:\n1. Hyphens should be allowed IMHO, it produces valid fixture IDs\n2. The error is not enough explicit. It says \"Entity with ID @puppet_package_www-servers_apache\" is not found. It should say before that the ID is not valid\n3. This PR is targeting a minor branch. Invalid IDs should produce a deprecation error and should still working, not the reverse. Or maybe this was not wanted?\nAnyway, we finaly found why this fail! :tada: \nIf think 1. (restore hyphens) should be resolve ASAP because this will solve 99% of user issue. Then, the deprecation way would ensure not error for everyone. :+1: \nRegards.\n. Restoring hyphen should be considered because it's useful for ID namespace\nseparators for target like user_*.\nI'm on my phone right now, I'll give example later.\nBTW, it's a BC break so it should not be a question IMO. :-P\nSullivan SENECHAL\nLe 15 juil. 2016 11:51, \"Th\u00e9o FIDRY\" notifications@github.com a \u00e9crit :\n\nNice one on finding it @Soullivaneuh https://github.com/Soullivaneuh!\nHyphens should be allowed IMHO, it produces valid fixture IDs\n@user-1 makes sense, but makes it much harder to detect @user->name. As\nit doesn't take much and is more a matter of state than anything else to\nuse hyphens (-) instead of underscores (_), this choice has been made.\nI'm open to add support for it later but it's not a priority... I'm more\nfocused on delivering something functional first.\nThe error is not enough explicit. It says \"Entity with ID\n@puppet_package_www-servers_apache\" is not found. It should say before that\nthe ID is not valid\nI'm going to check it, if it's an easy fix let's change it, otherwise I\nwould rather focus on v3 than tweak and monkey patch v2.\nThis PR is targeting a minor branch. Invalid IDs should produce a\ndeprecation error and should still working, not the reverse. Or maybe this\nwas not wanted?\nThat was definitely not intentional, the only intend was to add\ndeprecations for v3, not break things. The small BC introduced were\nregarding things like:\nuser_{alice, bob,} previously was building a reference named user_{alice,\nbob,}\nWhich are more bugs to me and that is why those \"BC\" have been accepted.\nI'm going to investigate this hyphen things ASAP.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/421#issuecomment-232909504, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABnqNY0rANfNSNyRZIcgSUSUm3UExwR6ks5qV1gWgaJpZM4JJXVx\n.\n. Seems to not fix my issue:\n\n[Hautelook\\AliceBundle\\Alice\\DataFixtures\\LoadingLimitException]                                                             \n  Loading files limit of 5 reached. Could not load the following files:                                                        \n  /code/src/AppBundle/DataFixtures/ORM/cron.yml:                                                                               \n   - Instance mask \"domain_*\" did not match any existing instance, make sure the object is created after its references        \n  /code/src/AppBundle/DataFixtures/ORM/domain.yml:                                                                             \n   - Instance mask \"server_nx102*\" did not match any existing instance, make sure the object is created after its references   \n  /code/src/AppBundle/DataFixtures/ORM/incident.yml:                                                                           \n   - Instance mask \"server_*\" did not match any existing instance, make sure the object is created after its references        \n  /code/src/AppBundle/DataFixtures/ORM/ip_v4.yml:                                                                              \n   - Instance server_default is not defined                                                                                    \n  /code/src/AppBundle/DataFixtures/ORM/operation.yml:                                                                          \n   - Instance cron_98 is not defined                                                                                           \n   - Instance cron_95 is not defined                                                                                           \n   - Instance cron_6 is not defined                                                                                            \n   - Instance cron_99 is not defined                                                                                           \n   - Instance cron_49 is not defined                                                                                           \n   - Instance cron_41 is not defined                                                                                           \n  /code/src/AppBundle/DataFixtures/ORM/package.yml:                                                                            \n   - Instance mask \"server_*\" did not match any existing instance, make sure the object is created after its references        \n  /code/src/AppBundle/DataFixtures/ORM/puppet.yml:                                                                             \n   - Entity with ID @puppet_package_www-servers_apache and class AppBundle\\Entity\\PuppetPackage not found                      \n  /code/src/AppBundle/DataFixtures/ORM/server.yml:                                                                             \n   - Instance os_gentoo is not defined                                                                                         \n   - Instance mask \"puppet_class_*\" did not match any existing instance, make sure the object is created after its references  \n  /code/src/AppBundle/DataFixtures/ORM/service_ip.yml:                                                                         \n   - Instance mask \"server_*\" did not match any existing instance, make sure the object is created after its references\n. @theofidry Sadly no. This is a private project.\nI can give you some info:\n``` bash\n$ ./docker-console composer show nelmio/alice\nname     : nelmio/alice\ndescrip. : Expressive fixtures generator\nkeywords : Fixture, data, orm, test\nversions : * 2.1.4\ntype     : library\nlicense  : MIT License (MIT) (OSI approved) https://spdx.org/licenses/MIT.html#licenseText\nsource   : [git] https://github.com/theofidry/alice.git 00b3565132cd69acacc7f7ffbe856af62a26f1a0\ndist     : [zip] https://api.github.com/repos/theofidry/alice/zipball/00b3565132cd69acacc7f7ffbe856af62a26f1a0 00b3565132cd69acacc7f7ffbe856af62a26f1a0\nnames    : nelmio/alice\nautoload\npsr-4\nNelmio\\Alice\\ => src/Nelmio/Alice\nrequires\nfzaninotto/faker ~1.0\nphp >=5.4\nsymfony/yaml ~2.0|~3.0\nrequires (dev)\ndoctrine/common ~2.3\nphpunit/phpunit ~4.0\nsymfony/property-access ~2.2|~3.0\n```\nyaml\nhautelook_alice:\n    locale: fr_FR\n    seed: 6399\nI will test with https://github.com/hautelook/AliceBundle/pull/238 too.\n. With alice-bundle PR and this one, I got this:\n[UnexpectedValueException]              \n  Instance user_support_4 is not defined\n. The error is solved if I remove the (unique) directive. BTW I don't know why it should be here. :-)\nBefore:\nyaml\nPowerDNSBundle\\Entity\\PowerDNSDomain:\n    power_dns_domain (template):\n        name (unique): domain-<current()>.com\nAfter:\nyaml\nPowerDNSBundle\\Entity\\PowerDNSDomain:\n    power_dns_domain (template):\n        name: domain-<current()>.com\nSo maybe the error is wanted because missing?\nIn this case, maybe it could be a bit clearer like this:\nThe unique directive can't be used without any faker function usage.\nOr something like this. What do you think?\n. Works like a charm, thank! :heart: \nWhat about deprecation notices?\n. Yes, I'm talking about deprecation notices! \ud83d\ude09\nSullivan SENECHAL\nLe 16 juil. 2016 12:25, \"Th\u00e9o FIDRY\" notifications@github.com a \u00e9crit :\n\n@Soullivaneuh https://github.com/Soullivaneuh they are still\ndeprecated, unless it proves to be very easy, I don't plan to support it in\nv3, at least for the first iteration.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/pull/431#issuecomment-233123975, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABnqNfsnLCnI0pXufFwEwsZX119GqQf-ks5qWLGjgaJpZM4JNfIN\n.\n. > True, there is already https://github.com/fzaninotto/Faker#fakerproviderdatetime.\n\nThis produce a random DateTime instance. For 2012-01-05 on your example, it's a fixed date.\nThis is not the same, is this?\n. > I don't think the above should be deprecated as there is nothing wrong with it and no special parsing involved (trying to detect those cases would be more of a pain than anything).\nI can understand. I suppose the <()> notation is simply PHP interpretation?\n\nHowever we could indeed promote the other way in the doc as a preferred way.\n\nLooks reasonable.\n\nI don't really mind actually, there is still plenty of people using 2.x. My only requirements are...\n\nWell, in this case I think this can be done on 2.x and back-ported with ease as the integration looks like just the Yaml::PARSE_CONSTANT option usage.\nI'll take a look when I'll got some time, thanks.. According to your requirement:\n\nI don't have any extra steps to do than review, merge and release\n\nI'll cherry-pick it on master right now. :+1: . See #829 for master.. Thanks for the merge. :+1: \nCan you please make a new release for that? . Thanks, it works like a charm! :heart: . I have to confess I don't understand why the tests are failing.\nCould you please help me?. Ok thanks, I'll try to simplify the call.. Well, I can't because the yaml component does not accept parsing flags under SF 2.7.\nI'll add conditional code on the tests.. @theofidry I tried this: https://github.com/nelmio/alice/pull/829/files#diff-1bb89596d4482090faac6e8ff7ed270cR145\nBut this does not seem to change anything. :confused: . Aaaaannnnd all is fixed! \\o/. Quite understandable. Feel free to keep this issue open as an idea for later or close it if you think it would not be made.. Is this feature acceptable on 2.x or not?. I think you should also add a reference for Faker\\Generator service for auto-binding.\nClass guessing does not work anymore on Symfony 4.x, so I have to do this:\n```yaml\nservices:\n    _defaults:\n        autowire: true\n        autoconfigure: true\n        public: false\nFaker\\Generator: '@nelmio_alice.faker.generator'\n\n```. #926 seems to indeed fix the issue, thanks!\nCould you please make a new patch release or at least merge #928 for now? Thanks!. Thank you!. Yeah, I was just not totally sure about multi-line interpretation... thanks!. I'm not sure to understand your propositions.\nAny chance you have an project sample link to give?. I didn't remove it.\nBut It should be removed IMO. But this is the place for another PR! ;-)\n. For this, I just copied selected fixers enabled before on .php_cs file.\n. 2.8.*@dev would be better than a DEPS option IMO.\n. E_USER_DEPRECATED\n. This line is too long, could you please lime break?\n. yield is only available since php 5.5.\n. This commented code should not be here IMHO.\n. This commented code should not be here IMHO.\n. I'm not sure this was wanted.\n. ",
    "everzet": "Ping :)\n. PIIIING.\n. Thanks Jordi :)\n. \"ctor\" ?\n. Ah... Yeah, I thought about that already. We have 3 solutions for this case. First 2 don't require adding new code:\n1. You keep in mind that constructor is not called explicitly now, so you need to initialise all your properties with hands:\nyml\n   App\\Entity\\User:\n       user1:\n           createdAt: <dateNow()>\n2. You keep in mind that constructor is not called explicitly now, but you don't want to initialise everything explicitly, so you're calling your constructor with hands:\nyml\n   App\\Entity\\User:\n       user1:\n           __construct:  []\n3. We add back automatic constructor call.\nRight now, I'm using option number 2. It feels much more logical for me. But that's because I'm evaluating my fixtures as DB row value-holder, not as objects. That's why we're specifying field names instead of full setters with array of arguments - we're not thinking about fixtures as objects by default. So, constructor doesn't need to be called by default. But that's only if you evaluate fixtures as DB value-holder and not as objects. Evaluating fixtures as objects isn't wrong either - it's just a matter of preference. I think @Seldaek should answer to this question as he's the guy with priority opinion here :)\nIf we want to evaluate fixtures as objects by default and we want to return back constructor support, we have exactly 2 ways to do that:\n1. We can add dynamic constructor call as Jordi said. If you have no required arguments to constructor - constructor is called, if you have ones - it's not. I find this way really error-prone and confusing as making one of your constructor arguments required will implicitly change the behavior of fixture loader and probably break your fixture suite in place and way you didn't expect.\n2. We can add back always-on constructor call. But only after all other calls are done. It means, that constructor will be called always, but in case if you have custom one:\nyml\n   App\\Entity\\Contact:\n       contact1:\n           __construct:  [ @user1 ]\nit will have higher precedence and will be used instead of default non-argumental. This way also proves that if you don't have custom constructor in your fixtures, but you've added required argument to object - you'll get logical exception, telling you about missing mandatory argument.\nSecond option is far more logical and clean for me. What do you think guys?\n. @Seldaek yup.\n. @Seldaek not really. Commented in the commit.\n. ",
    "fspillner": "Duplicated, see https://github.com/nelmio/alice/pull/21\n. @Seldaek  Yes, I've thought to use the yaml merge key syntax but it doesn't feel so intuitive, it feels a bit too special and it is really not readable for me. I'm not a yaml guru.\nBut the yaml syntax forces you to limit on yaml syntax capacity ie. it doesn't allow you to import data sets from other files. The idea is to having some abstract data sets in own file and you can use this and this data sets for your case  like: \nuser_super_admin: \n    @inherits: base/user.yml@admin\n    super_admin: true\n@staabm Yes, the naming can be better but let first discuss about the core of the idea.\n. See the pull request above for better approach. \n. ",
    "staabm": "\"template\" could be a good name for this?\n. do you say that you are using public properties instead of setters and this doesnt work? Or how do you fill your objects (from your regular app point of view)?\nOr do you pass \"everything\" by __construct() and work with immutable objects in your model?\n. Array typehint?\n. Array. Typehint?\n. Array typehint?\n. Ohh sorry for that :blush: \n. this could also read call_user_func(array($instance, 'set'.$key)), not sure which one is better... (would be less magical to read, though)\n. since this flag can only be set from the constructor you could just capture it while creation in your subclass?\n. Since you are already in the Faker class, this should not necessary to be public. (At least for php 5.4+)\n. Strike that. Its necessary form the call within base.php https://github.com/nelmio/alice/pull/144/files#diff-db202a488e06791fa0fe5b9d09f4e700R231\n. The caller expect that this always returns a function, no?\n. ",
    "erichard": "I'm using Alice for fixtures building since several months now and I really lack this inheritance feature. Sometimes I have to copy/paste entire blocks and I fell soo bad about it.\nI've locked at the new PR with the PHP factory but I think a YAML implementation is a better approach. We just need to find a clean syntax for two concepts : template and inherited blocks. \nMaybe we can use the existing @reference syntax, with that all blocks become potentials templates. We just need an exclude syntax to avoid template persistance. See below a basic example with the use of @ and _foo_.\n```\nUser: \n    base:\n        username: \n        email: \n        is_admin: 0\nadmin@base: \n    is_admin: 1\n\nanotheradmin@admin: \n    email: <email()>\n\n```\n. Yeah, I've thought about that interface but it will be a pain to do simple things. And I think simple things are the main use case for Alice.\nBelow, an example of what I'm doing with the logging system.\n\\Nelmio\\Alice\\Fixtures::load($fixtures, $em, array(\n    'logger' => function($message) use ($output) {\n        $output->writeln(sprintf('  <comment>></comment> <info>%s</info>', $message));\n    }\n));\nTo do that with the Psr\\Log\\LoggerInterface I need to create a class, inject the $output object an wrap the writeln() call.\nAnyway, I just need a logging system. If you prefer the LoggerInterface solution I could make the change.\n. @Seldaek What do you think of this PR ? Should I continue my work on it ? \n. :+1: \n. ",
    "nikita2206": "Also, I made it so unique values are unique in the scope of object descriptor (like user{1..25}) and field name. Maybe I should have made it so that scope would be class and field name... Yeah, that would actually be more reasonable.\n. Here's a fix, now uniqueness of a field is in a scope of a class and a field instead of object descriptor and a field.\n. Looks good!\nThough, there's a little bug, when generating valHash, it will fail on arrays... I didn't though about it. I think we should replace md5($generatedVal) with md5(is_array($generatedVal) ? serialize($generatedVal) : $generatedVal). But it becomes a huge ternary mess :)\n. ",
    "mikehaas763": "If no one picks this up in about a month or so I will have some time then to implement this.\n. @Pym Nope, I never found a solution to get it to work. I just ended up pulling data from the production DB to use for my fixture data.\nThe reason I gave up is because the doctrine team has been re-writing the fixture system. So it's supposed to be more powerful and allow more flexibility when it is finished and this shouldn't be an issue any longer for someone to implement with the Alice/Faker combination.\n. @Seldaek I haven't looked at this in a while but off the top of my head my data structure (simplified) was something like this:\nFormula: id, code\nFormulaColor: formula_id, color_id, percentage\nColor: id, code\nFormulaColor is essentially a join table, but because it has a percentage field, it is technically an entity. So I've got it set up as a separate entity for Doctrine. The percentage field is to say what percentage the Color makes up of the Formula.\nI wasn't even concerned with making sure that all the Colors of a Formula added up to 100%\nI don't remember exactly what the issue was but it was possibly that I couldn't give FormulaColor both a color_id and a formula_id.\nWhen I get time in the next few days I will test it out and see if I can figure out exactly what it was that I couldn't do.\n. ",
    "briancappello": "+1 for this feature\n. ",
    "Max101": ":+1: This would be nice!\n. ",
    "abguy": "I need it too.\n. ",
    "theofidry": "+1\n. For those interested, you can create a custom provider generating your PK based on the 3 generated values:\nEntity\\Car:\n  car_with_composite_key:\n    brand: Ford\n    model: Taurus\n    year: 1999\n    id: <generateCarKey($brand, $model, $year)>\nThis is also very unlikely to be implemented in v3 as the persistence layer will be removed from it.\nI'm closing this issue. If there is still questions please open a new issue to avoid spamming everyone as this is a fairly old topic.\n. Closing this issue as it is fairly old and the suggested solution should work. Feel free to open a fresh one if that's not the case.\n. Closing as has been fixed. Feel free to open a fresh issue if you still have a problem.\n. I think it's far too late now to change this behaviour as it's a very used feature. Even for v3 it would be too much of a userland BC. That said, we could have another version of the wildcard matching to exclude the declared class...\nI'm closing this issue anyway as it's not really a focus now. If people are still interested and have a suggestion, feel free to open a new issue and avoid to spam everyone for such an old issue.\n. Closing as it's a fairly old issue and unlikely to happen as Alice shouldn't be bound to a DIC. Plus for Symfony app HautelookAliceBundle should already handle most of the use cases.\n. As @tshelburne it's out of the scope of Alice and the persistence layer will be completely removed from v3.\nIf you want to re-use an ID key, this should be a generated ID, not a database auto-increment.\n. As it's an old issue and far from being a focus for the next versions, I'm closing this one. If someones is still interested in this feature or something akin, please open a new issue for it.\n. So, has been dealt with right?\n. After taking a look at this, there is not much we can do on our side: it's either PHPCR that must use a different strategy to generate the IDs or Faker, nothing can be done at alice lever to fix that. For that reason, I'll be closing this 2yo issue and if someone still have an issue with it they should be able to find it still :)\n. Closing as it's been solved since at least ff44de0384c6f8d7232f8f5302a3ac5cbba509a0\n. References in the constructor should work or at least a test has been added for that in 4c9fe135d5d5f665a58df246544c9410ffdac372 so it's guaranteed to be supported in since 1.5.0.\n. Closing this issue as it's fairly old and there is tests for it. If the issue is still relevant please feel free to express yourself or open a new issue.\n. Closing as is a duplicate of #178.\n. You can now do calls (on 3.x): https://github.com/nelmio/alice/blob/master/doc/complete-reference.md#calling-methods. Sorry I may have misunderstood your case. I think you can add localised faker providers, cf. localized data generation.\nThat said I'm not entirely sure about how you register a faker provider only for a specific local.. Ok got it.\n. When I try this I've got the following error:\n[RuntimeException]                                                                                     \n  Couldn't generate random unique value for Nelmio\\Entity\\User  \n  : phones in 128 tries.\nI tried by decreasing the number of entity (ex: 1..5 for User and 1..15 for Phone), but it gives the same error.\n. You mean phones (unique): 1x @phone_*? Same error.\n. It would be great if it could be added! \n. After some consideration, it would still be a change of behaviour. This change has landed in 3.x, but I would rather be in favour of deprecating this behaviour in 2.x rather than changing it like that.\n. Although being an old issue, that is something that is planned for v3. Follow up in #388.\n. We could check for @@ to escape the @ character:\n'@user' => reference to the fixture 'user'\n'@@user' => string 'user'\nThen you could have a custom provider to secure you password, i.e. it takes the password as an argument and if it begins by @, you add an additional @@ to escape it:\nyaml\nAcme\\Bundle\\UserBundle\\Entity\\User:\n   user_{1..10}:\n        username: <firstName()> <lastName()>\n        email: <email()>\n        plainPassword: <escape(password())>\n        enabled: true\n        group: @default_group\n        timezone: <timezone()>\n        createdAt: <dateTimeBetween('1999-01-01', '1999-01-01')>\n        updatedAt: <dateTimeBetween($startDate = '-1 years', $endDate = 'now')>\n        locale: <locale()>\nCould potentially be a provided added to Alice as the same way Alice provides a way to refer to another fixture, it should be able to provide a way to escape it.\nI'm not sure to what @@user would refer at the moment (@ fixture with the name @user?); Potentially a BC break.\n. This is planned in v3 cf. #377. In 2.x a possible workaround is to simply use a custom provider to generate a safe password (i.e. which will not contain @).\n. An acceptable workaround has been show in #160.\nIn v2, the only thing alice seems to be lacking on this side is the ability to call multiple times the same method with different arguments.\n. Closing this in favour of https://github.com/nelmio/alice/issues/293.\n. I can't reproduce it locally and I don't have it either in #340 (which add a few tests regarding the parsers). Try to update your version and if you still get this error re-open an issue for it.\nCheers\n. +1 would be great! @h4cc have you any plan to do it soon?\n. @h4cc  erf a pity :( I would be great not to have to override the load method just for this line.\n. Kind of old post so I have lost a little bit sight of what needs to be changed, but if we make the Nelmio\\Alice\\Loader\\Base::getGenerator() public instead of private would solves the problem?\n. Any opinion on this @Seldaek and @h4cc? I can provide a PR to solve this issue but I would like to have your opinion first.\n. As in real life it is fairly rare to have to access to a faker instance (most of providers have static methods) and considering it's a fairly old issue and nobody really wants to dig into this again, I'll be closing this one. If it is still a problem and are willing to look into it, feel free to open a new issue for it. Note that it is plan to fix it in v3.\n. Technically you can already do it:\nyaml\n\\stdClass:\n    std: ~\nWill generate an \\stdClass instance as expected. Although right now you wouldn't be able to assign any value to it.\n. Closing as duplicate of #191\n. After looking a bit into it I see no easy way to fix it in v2, but this has been fixed in v3.\n. Closing as has been merged in 2.x now\n. @fschaeffer :+1: \n. @gouaille I recommend you to take a look at hautelook/AliceBundle v1.0 beta ;)\n. Yup it works thanks! I was using another workaround which was:\nyaml\nNelmio\\Entity\\User:\n    user (template):\n        # template def here\n    user{0..50} (extends template):\n        id: ~\nSince there was no setter for the proper id it was working, but I find your solution cleaner.\nYou're solution could be used as it is and considered as the way to do instead to be considered as a workaround, but in this case this should be specified in the documentation.\n. @Seldaek what do you think? Do you see a way to solve this \"bug\" ? If not like said mentioning it in the documentation should be good enough and if you wish I can provide a PR for that.\n. I've just tested again to make sure: I succeeded to load my user fixtures and then login, with a standard FOSUser install. So my question is really more to try to understand this part because I guess it wasn't put here without any reason.\n. Ok it does make sense. But then I still fail to understand why it does work in my case cf. https://github.com/theofidry/Incipio/tree/dev. I do not use any processor and set the password via the plainpassword property. When I check into my database the password is properly encrypted.\nMaybe it's the fos_user.use_listener property which is set to true by default (I've just seen that thanks yo your link). I will check that later.\n. Indeed it is that. So could it be possible to add a word about that in the processor section (since the example is for the FOSUserBundle) so that there is not any confusion?\n. Either way I'm fine: either use another example or add a mention for the example because otherwise is misleading.\n. @tshelburne if it doesn't bother you I would prefer that you do it I have trouble to keep up with everything right now^^\n. Thanks @tshelburne.\n. Aside from nitpicking (see the note), it looks good to me :)\n. It's a rough day^^\n. Regarding the issue of the optional data being triggered when it shouldn't be generated: this has been addressed in 3.x.\nAbout the 50%? true : false, this is doable although you need to use a function to cast the string value into a boolean. There is a discussion in #597 about integrating it in the core.\n. :+1: for this feature, could be quite useful :)\n. Not sure since when but this feature has been merged now, cf. multiple references doc.\n. @paquitodev I would go with two fixtures files. If you start putting several entities in a file due to their relations, you'll end up with very big fixtures files very fast.\n. Closing as this question has been answered. Just keep in mind that there is https://github.com/nelmio/alice/issues/257 which will be fixed in v3 but not before and in the meantime there is HautelookAliceBundle for mitigating this issue in Symfony (I'm not aware of any other library doing that).\n. sadly you are missing an important part: PDI\\PDOneBundle\\Entity\\Target::setTerritory() looks like the error occur on Target but I don't see any target in your fixtures.\n. Yeah need to do some cleanup ;)\n. For those falling in this case again (hope not), here's the doc entry: Reuse Generated data using objects value\n. I guess that's because when setting the Community#users, it calls the adder/setter and won't check for the other entity, so if you don't attach the User to Community in your Community:addUser(), it will not work.\n. It is not because it's not specific to this bundle neither to Symfony, if you have:\n``` php\nclass User\n{\n    private $community;\npublic function setCommunity(Community $community)\n{\n    $this->community = $community;\n}\n\n}\nclass Community\n{\n    private $users;\npublic function addUser(User $user)\n{\n    $this->users[] = $user;\n\n}\npublic function removeUser(User $user)\n{\n    $this->users->removeElement($user);\n\n}\n}\n$community->addUser($user);\n$manager->persist($community);\n$manager->persist($user);\n```\nThen $community will have the $user instance attached but not the other way. So you either do:\nphp\n$community->addUser($user);\n$user->setCommunity($community);\n$manager->persist($community);\n$manager->persist($user);\nIf you want to do it in one go you have to add some logic:\n```\nclass Community\n{\n    private $users;\npublic function addUser(User $user)\n{\n    $this->users[] = $user;\n    $user->setCommunity($this);\n\n}\npublic function removeUser(User $user)\n{\n    $this->users->removeElement($user);\n    $user->setCommunity(null);\n\n}\n}\n```\nThat's the gist of it, but be careful not to manipulate null objects and allow to pass null values... and beware of performances.\n. Closing as as explained, this is out of the scope of alice.\n. It is worth check the result of Alice YAML parser here to see how it handles the import statement.\nThat being said if you are using Symfony you can check HautelookAliceBundle in which you won't face this issue.\n. AFAIK alice handle that well so the issue must be somewhere else.\nI'm closing this issue as it's quite old as well. If the problem still occur please open a fresh one.\n. Closed by https://github.com/nelmio/alice/pull/238\n. @Perfect-Web it works fine on 3.x I didn't check on 2.x. If it doesn't and you wish it to work, feel free to open a new issue for it or a PR, but don't dig zombies please :). I see nothing wrong on alice side: the fixture is properly generated with the right values. The issue clearly comes from Doctrine in this case.\n. Should be good now @cmfcmf :)\n. You mentioned it would be fixed in #220 which has been merged by now.\n. Ok!\n. Regarding this issue there is not much that can be done in 2.x. You can see the Populator class and its methods classes to check the order in which the setter/adder can be changed. If you want to you can try to add your own method or re-order them although this may be a bit combersome to do.\nIn 3.x, this part is easier to extend (Hydrator which replaces Populator are easier to hook) and the adder/setter is being picked by the Symfony PropertyAccess component.\n. Closing this issue as it's an old one and has been fixed in v2.\n. +1\n. This will be changed for sure in v3. Meanwhile an interface or simply some php doc would be welcome.\n. Closing as is a duplicate of #174\n. Doable with the new version, my bad :)\n. ping @tshelburne \n. doing a PR then :)\n. So, we have the following chapters:\n- Creating Fixtures\n- Fixture Ranges\n- Faker Data\n- Calling Methods\n- Specifying Constructor Arguments\n- Optional Data\n- References\n- Multiple References\n- Handling Unique Constraints\n- Fixture Inheritance\n- Including files\n- Variables\n- Parameters\n- Value Objects\n- Custom Faker Data Providers\n- Custom Setter\n- Complete Sample\n- Processors\nAnd we need to regroup them. Well to start with I thing the Complete Sample could be kept in the README, it would give an visual idea of what's the library is doing.\nWe can also regroup Faker related topic:\n- Faker Data\n- Custom Faker Data Providers\nBut I have no idea about how to regroup what's left. Any idea?\n. TOC propal:\n1. Installation README\n2. Getting Started file getting-started.md\n   1. Basic Usage\n   2. Detailed Usage\n3. Complete Reference file complete-reference.md\n   1. Creating Fixtures\n   2. Fixture Ranges\n   3. Calling Methods\n   4. Specifying Constructor Arguments\n   5. Custom Setter\n   6. Optional Data\n   7. References\n   8. Multiple References\n   9. Handling Unique Constraints\n   10. Processors\n4. Keep your fixtures dry file fixtures-refactoring.md\n   1. Fixture Inheritance\n   2. Including files\n   3. Variables\n   4. Parameters\n5. Customize data generation file custom-data-generation.md\n   1. Random data with Faker\n   2. Reuse generated data using objects value\n   3. Custom Faker Data Providers\n6. Complete sample README\n. What do you mean?\n. Ok yeah it wasn't clear. Updated accordingly.\n. Rebased and updated.\n. Yeah but it comes from a unit test which was passing with the previous version of this library. The mapping definitely not changed, hence my question.\n. Sadly I can't remember where I had this issue... Unless someone still has the problem and manages to reproduce it, I'm going to close this one.\n. @placid2000 I think https://github.com/theofidry/AliceDataFixtures/pull/52 would solve the issue. But open the issue on FidryAliceDataFixtures rather please :) This issue was about alice 2.x. Regarding the PR out of the 3 other opens, 2 of them are mine, but if you prefer to keep it I'll just put the autoload-dev change :)\n. Done\n. it was just me in local, I didn't reupdated the dependencies so the autoloader wasn't updated :)\n. This is now possible by using the Expression Language Parser (NativeLoader:: getBuiltInExpressionLanguageParser() or the nelmio_alice.fixture_builder.expression_language.parser service).\n. Closing this issue as it's a very old one and v2 has been out for over a year now as well.\n. As it's a fairly old issue and requires a bit of work I'm closing this. Feel free to open a new rebased PR if you still wish to add it.\n. Any update?\n. Thaaaanks :dancer: \n. I've done the PR cd hautelook/AliceBundle#58. I would love to see this PR merge or have write access on the bundle to contribute more actively.\nAs for the changes, I'll update the README, aside from that the whole doc has been changed to reflect on the upgrade.\n. @Seldaek mention in the readme\n. Hope you're right man, there not much use of having 4 bundles for the same thing :(\n. Great! :)\n. Waiting for https://github.com/scrutinizer-ci/scrutinizer/issues/382\n. So to recap, Loader does the actual loading to return the objects to persist. Fixtures is a bootstrap to take care of the persistence. I took a deeper look at Fixtures and from what I see its complexity (I don't mean it's a very complex object) comes from:\n- the fact that the loader is not injected by instantiated in it\n- the actual loading in which the loader is called and the objects retrieved are persisted.\nThe issue is that the loader is instantiated and there's not much that can be done since we're in a static context, unless we pass the loader in the ::load() function signature.\nBack to our cases: having a custom Fixtures to handle the loader makes sense, what I'm not happy with though is that I'm using the exact same function ::load() so it's a plain copy/paste.\nSo here's my proposal:\n1. We let things as they are and we just add a chapter in the doc regarding this use case\n2. We add another Fixtures extension, which keeps the persistence logic as in the current Fixtures, but which does not aim to be used in a static context allowing to inject our Loader, custom or not, in it. This new extension would not be actually used in the library, but allow people to use their own loaders without having to redeclare a new extension.\nI would like 2. of course, it opens up the library without being much to maintain. But obviously, if you can prefer to let this to the initiative of the users and choose 1. If you're fine with 2, I can take care of the PR.\n. Well, what does not really please me is that's kind of incomplete.\nThis library provides a fixtures loader, which basically generate objects from files and a persistance layer via the PersisterInterface and a doctrine bridge. The last thing is, it provides a class responsible for loading the fixtures files, take care of the persistence layer and the pre/post-processing.\nThe issue risen here is the last part: due to being used statically it cannot be reused. \nWhat I would prefer is, having a \"clean\" Fixtures non static, which does the work properly with the loader injected. Then the static Fixtures would be refactored to use the non static one and avoid duplication. That way you have the convenient Fixtures helper but also another one that can be used in another context like Laravel or Symfony.\nYou said there is not much, I agree for now so a doc may be fine. But depending of the other issues risen, especially #257 that may change. So for now I would say let's keep this and see how it goes.\n. After the discussion in #245, kind of thinking this should be only a short term thing as you're willing to get the persistence layer out. So some do should do (unless #257 call for it).\n. In the end is very unlikely, will be changed in v3.\n. @tshelburne @Seldaek any though on this?\n. @Seldaek if you could check this too, would be great :)\n. Cool man, enjoy your holidays :+1: for now, got much to discuss after.\n. Ok I'll do a PR to reflect on that then :)\nOn Wednesday, August 19, 2015, Tim Shelburne notifications@github.com\nwrote:\n\nI agree with null.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nelmio/alice/issues/244#issuecomment-132709468.\n. Follow up in #245.\n. Also I find the namespacing a little bit weird, could we change it like this?\n- Nelmio\\Alice\\PersisterInterface\\Doctrine => Nelmio\\Alice\\Doctrine\\Persister\\Persister\n- Nelmio\\Alice\\PersisterInterface => Nelmio\\Alice\\Persister\\PersisterInterface\n\nTo place persisters in the Nelmio\\Alice\\Doctrine\\Persister namespace and separate the Doctrine bridge into a dedicated namespace.\nTo avoid BC break, it could be done by \"duplicating\" it and adding some deprecation notice and remove the deprecated classes for the 3.x.\n. > rather than bundling it into a PR and having duplicated code?\nYou're talking of that right?\n\nAlso I find the namespacing a little bit weird, could we change it like this?\nNelmio\\Alice\\PersisterInterface\\Doctrine => Nelmio\\Alice\\Doctrine\\Persister\\Persister\nNelmio\\Alice\\PersisterInterface => Nelmio\\Alice\\Persister\\PersisterInterface\nTo place persisters in the Nelmio\\Alice\\Doctrine\\Persister namespace and separate the Doctrine bridge into a dedicated namespace.\nTo avoid BC break, it could be done by \"duplicating\" it and adding some deprecation notice and remove the deprecated classes for the 3.x.\n\nIt would add a little bit of duplication but not much actually: adding an interface, extending the other and adding a deprecation notice. It adds a little bit of useless code but would give the opportunity to the users to see the change coming.\nAnother benefit is that if we choose to put that in a 3.x only, then it requires to create a new branch now and be wary of synchronising the two branches. That would be fine if the 2.x was pretty stable of the 3.x well advanced. But for something so trivial I'm not sure it's really worth it.\nThat being said, that depends of how much energy you want to put into it :p So your call man.\n\nI am in favor of moving towards a \"Doctrine bridge\" like solution in the short term, since I think it would be best for us to move towards pulling that out of Alice anyway.\n\nI'm not sure of what you mean. I like the Persister idea as it loosen up the coupling. Do you have something else in mind?\n. > Jordi and I have discussed pulling persistence out of Alice and instead creating some \"bridge\" libraries that could be installed and used independently. Not hugely important, but it would limit the drive to \"put more\" into Alice. It would mean defining the intention of Alice a bit more strictly, in that it would exclusively be an object generation library, but I think it would bring a lot of clarity to it as well.\nThat would be a good move, and if you wish to advance to this one I'll gladly help but then create a 2.x branch :p\n\nMy feeling is that this PR should probably be closed as it is for now, since there are so many BC issues, and we can continue discussion in relevant issues. Make sense?\n\nLet it, I'll remove the BC and just let the fix in the phpdoc.\n. Yeah of course, but let me fix the BC things first ;)\n. Closing in favour of #245\n. I sadly cannot reproduce the issue. To me it seems clear that the issue comes from the Symfony Yaml Parser, but I believe the issue has been solved since then. If you still encounter the issue with recent versions, feel free to open a new issue for it.\n. @ma-si needs a little rebase ;)\n. @tshelburne is back :dancer: \n. Closing this one as a duplicate of #388 \n. Very old issue, but yeah using a data provider is the right way to handle such cases.\n. You have to create fixtures for TaxValue instances and then references them using the @ annotation. Check out relation handing#references.\n. Then the answer is no, at least not to my knowledge. This could be interesting and possible by adding a key value class:\nyaml\nAppBundle\\Entity\\TaxRule:\n    tva_france:\n        name: TVA France\n        values:\n            - class: AppBundle\\Entity\\TaxVal\n              data: { value: 0.2, beginsAt: 2015-01-01 }\n. @Soullivaneuh btw why you don't want to create a dedicated fixture for it again? For the ease of use?\nThe only difficulty I may see with that is figuring out how to create you AppBundle\\Entity\\TaxVal entity. One way to do it would be to add a custom Denormalizer (which is responsible for transforming the parsed data of your files into a comprehensible set of fixtures) to detect such inlined entities, add a new Fixture with a unique ID which correspond to your inlined object, and replace the value by a reference to this fixture.\nBut that would be something I would rather put in an alice extension or let the user implement, rather than adding it to the core which is already complex enough. Especially since I already can see some syntax specificities coming which are better being implemented in the user code.\nWDYT?\ncc @tshelburne \n. Yes the syntax is correct :)\n@Soullivaneuh is that a satisfying solution? To be clear I'm not against having an inline denormalization like:\nyaml\nAppBundle\\Entity\\TaxRule:\n    tva_france:\n        name: TVA France\n        values:\n            - class: AppBundle\\Entity\\TaxVal\n              data: { value: 0.2, beginsAt: 2015-01-01 }\nI'm just not willing to work on this one. PR are welcome though :)\n. @Soullivaneuh I think regular reflection can do the job. The point of BetterReflection is to be able to do reflection without loading any code, but in our case we don't care. Hm indeed, plus I didn't add much tests on it, I'm fixing that\n. This is due to the use of the fixtures key in the options in a test suite: any idea of its use?\n. Fixed. As the fixtures key was never checked and used I removed it.\n. Seems like it. But no longer used\n. @hidabe it does. See  https://github.com/hautelook/AliceBundle/blob/11570b4e0f4860ad2f0544010e7ad72418619540/tests/SymfonyApp/TestBundle/DataFixtures/ORM/brand.yml\n. @tshelburne it's really a major bug, when will you be able to take a look into it? It would be a pity to have to go back to the 1.x just for that...\n. Little update, kind of solved this for now in HautelookAliceBundle via a custom loader.\n. The implementation is ugly: I'm basically doing multiple pass for the loading. It's a very straightforward solution I came up with but if someone has something more neat I'm all ears ;)\nBut the solution I've got works only when you break apport entities into different files. But the bug still occurs for entities in the same file. I tried to look a bit into it but I'm kind of lost to be honest. So my solution is more a workaround for my use case rather than a patch for Alice :/\n. > I meant no offense, it certainly does the job for your use-case :+1:\nI'm not, but I can't say I'm proud of this implementation, looks ugly to me.\n\nRe: the files restriction, good point. I've started a branch to do the \"right\" fix a few times (basically, load all entities, run processing on all non-relationship properties, and then do a final pass to hydrate relationships), but haven't had the adequate time to build it in. I've built JS implementations of object stores that function as \"in-memory\" databases using this pattern, and it's worked out decently well.\n\n:dancers: :tada: :clap: \n. Another issue about that too: the references handling should not be limited to 1 range deep. I mean right now we're talking about:\n``` yaml\nMyApp\\Entity\\Dummy:\n    dummy_{0...10}: {}\nMyApp\\Entity\\RelatedDummy:\n    related_dummy_{0...10}:\n        dummy: @dummy*\n```\nBut the following should work too:\n``` yaml\nMyApp\\Entity\\Dummy:\n    dummy_{0...10}: {}\nMyApp\\Entity\\RelatedDummy:\n    related_dummy_{0...10}:\n        dummy: @dummy*\nMyApp\\Entity\\RelatedOfRelatedDummy:\n    related_of_related_dummy_{0...10}:\n        dummy: @related_dummy*\n```\nand so on...\n. Solved in 3.x and left as an implementation limitation in 2.x.\nAs said the problem can be mitigated in 2.x by having a custom Loader, but as alice loader is meant to be used as something to get started with and not something we want to make extendable and integration more features to, it's out of alice scope.\n. Cool, thanks @munkie!\n. > By the way, what do you think about using https://scrutinizer-ci.com/ for code analysis ?\n:+1: #241 \n. +1 for this PR, good work\n. @tshelburne this could be quickly be rebased and merged :)\n. > From my perspective, the biggest struggle we have right now is that the \"lifecycle\" of moving from files -> fixtures -> instances is not particularly flexible, and all the state getting passed around and updated all over the place makes it hard to reason about making changes. I think a more well-defined interface for that flow would let us do things like the relationship hydration step more easily.\nAgreed. My feeling is that your PR improved many things, but there is some parts that are very hard to follow or not flexible at all, hard to debug and to maintain. And this is partly due to unclear responsibilities  at some times (like the persistence layer: this should not be part of this library).\nI would love to help we it but truth is, even if I have some ideas I still have only a very rough understanding of the \"lifecycle\". Would love to have something more clear on this part and then be able to argue about some part of the design. IMO it would be better to do that first before deciding of what should remain in the 2.x and what should be put in the 3.x.\n. :+1:\n. Any update @tshelburne?\n. Not much work is pretty intensive right now for me too^^ But you can mail me at any time for reviewing a document or something.\n. @tshelburne any update on that? Otherwise having a v3 with some cleanup and without the persistence layer would be great already.\n. ping @tshelburne. Note that if you want some help, I'll probably manage to find some times in a couple of weeks (so not right now). But still available to at least discuss on the general idea and also have some feedback from using it with HautelookAliceBundle.\ncc @Soullivaneuh \n. Ok great. How would you like to proceed? Creating a 2.x branch and pushing v3 changes on master and create a v3 milestone?\n. Fine by me, gonna do that in the evening after cooling down a bit :)\n. Ok so here's a breakdown of the current library: https://gist.github.com/theofidry/2b1de50bb17fc06cb502\nI am really not familiar with this kind of usage of PHP (crating PHP objects this way), so aside from the way files are loaded, I am not familiar with the internals of the library. As a result there is a few classes I have no idea of what they are doing.\nSo some feedback of what I missed when I used it:\n- Not enough interfaces\n- Interfaces not always clear (you have no idea of what the class is doing)\n- Usage in static context: not really configurable\n- Lack custom exceptions\nSo the first thing I would like to do before cleaning up the implementation details is clarifying the interfaces, then take care of the implementations.\n. @tshelburne little ping :dancer: \n. I've got some refactoring ideas but need a bit more details on the responsibility of each class @tshelburne :(\nMaybe @Seldaek remember some parts too?\n. Maybe you got a 'lil time for this one this week? :p\n. Oh damn, never checked\n. How do you think we should proceed? Is there anything that should be changed in the current system at the fondamental level or we should simply rework a bit the current one?\nIf we don't need a big change in the system itself, the I'm thinking of re-working bits by bits (ex first Processor).\n. Thoughts of yesterday, I'm putting this as a reminder. Here's how alice works without the persistence layer:\n\nIt's only the high level stuff, so the names may not of the classes may not match. For each components, here are some things they must do which are a bit tricky to implement\n- Parser: parse a PHP/YAML file to give a PHP array read to be transformed into Fixtures\n  - Although loads only one file, this file can have include statements. \n  - As loading one file may result in having to load multiple files, the state must be kept between the loading of each file (to not lose references of other files)\n- Builder: transform a PHP array into a collection of Fixture.\n  - The tricky part is dealing with dynamic references (ex with lists or ranges) and flags\n  - Must be extendable to add custom flags\n- Generator (the most complex bit by far):\n  - Right now is composed of instantiators and populators\n  - Have to deal with resolving data values which can be:\n    - functions for faker providers\n    - references to another fixture (which can be ranged as well)\n    - parameters, coming from the file or injected (to be able to use framework parameters in bridges for example)\n    - dynamic values (can refer to the value of another property)\n    - specifying accessors, calls to be made on the instantiated object or instantiation method (factory, constructor, reflection)\nAmong the list of what each components must deal with, there is currently some features are currently missing in v2 (ex doing multiple calls on an instance cf. https://github.com/nelmio/alice/issues/293), but most of the stuff is already implemented.\nWhat to change\nMain changes:\n- Removing the persistence layer: it's definitely something interesting, but should be done in another library if needs to be done\n- Make the library more flexible: mostly by introducing interfaces where needed\n- Reduce technical debt: change a few patterns, making classes final when possible, adding unit tests etc.\nGenerator\nMaybe it would be possible to use Symfony Serializer as its primary usage is to transform a data structure into another instead of having this custom combo Instantiator + Populator. But in that case it requires to resolve all the fixtures value before passing the to the Serializer:\n\nCache\nAlthough speed is not a primary concern, I still think we should take it into consideration. I think we could have the following cache layers:\nFor both the Parser and Builder, calling them multiple times with the same input will always give the same result so it is something that could be cached. One caveat, the user could load 5 different files which all include the same file. Loading a file (at that stage, i.e. to create an array of Fixture) is stateless, meaning that the caching can be done on a file basis. If file1.yml includes file2.yml, It doesn't matter which file is loaded first as no value is being resolved yet. So loading the included files can be cached.\nAt the Generator level, it's much harder to cache anything. If we take the schema with the Resolver and the Serializer, Resolving values is always dynamic, resolving two times the same Fixture object gives two different result. However in the Serializer it is a different story, and hopefully the Serializer has natively some cache, we would only need to make sure things works well on that side.\nTo sum up, here's how it would look like in v3:\n\nUpgrade path\nFor the end user, there is unlikely to be big changes. There may be a few changes like #337, but in that case can add deprecation notices in v2 to help the migration.\nFor developers, that's another story. I sadly think there is not way to have an easy upgrade there. Even with HautelookAliceBundle which has tried to not hack too much alice to work well in Symfony, I see a lot of BC beak changes coming. So IMO what we should do is having a good changelog explaining the changes and be ready to help the biggest library in upgrading.\nWhile doing #326, I think there is a lot of things that can be ported to v2 without much extra work. As long as it doesn't require too much energy, I'm willing to do it. That being said, I prefer to keep the focus on v3, changes ported to v2 would be mostly bugfixes and deprecation notices.\nWork on v3\n@tshelburne I would like to hear how you would want to proceed. In one hand, I would like to avoid waiting 2-3w for each review, on the other hand I don't want to merge things without anyone's opinion at all. Do you have any idea of comprise we could find?\nWDYT @tshelburne @Soullivaneuh @vincentchalamon?\n. \\o/\n\nWhat's the benefit of final classes?\n\nUsing final class is to prevent inheritance in favour of composition. This is safer as we consumer as inheriting a class is accepting an implicit contract (the child class accept all the responsibilities thrown from the parent) whereas composition is an explicit contract (you are using the methods signature only and not relying on the internal behaviour). In short it helps a lot from a maintainability point of view because as long as you don't change the signature of your public methods, you are not introducing BC breaks.\n\nI've always hated it when library authors provide final classes because it restricts what I can do with their code.\n\nJust putting everything as final would indeed lead to that which is not very nice. Instead we have to also introduce the proper interface. Also it's like everything: I prefer to put things as private first, then if needed and sensible, we can always switch to public or non-final.\n\nI don't have specific concerns about Serializer - do you think it will cover all bases as well as what we have now?\n\nAt that point I can't guarantee anything to be honest, but I do hope we could use it to remove some chunks of our code.\n\nPersonally, if performance isn't a problem now, I vote we leave caching out.\n\nActually it kind of is. I've had some feedback from AliceBundle where some people were complaining on performances \u2013 nothing dramatic, but if it can be improved it would be nice. As I said, there is two part where I can see a cache layer of some kind:\n- The result* of loading a file; *:before interpreting any value, i.e. just the raw array of Fixture build\n- At the Serializer level: it has some cache already to avoid to re-discover the structure of the object to be instantiated; it's just a matter of making sure it works\n\nbut caching is always opening up the chance for hard-to-find bugs.\n\nAgreed, it won't be the priority and should be well tested.\n. That's a fair point, and the library must still be extensible. That said, small classes don't have much value to be not final: they implement an interface and if you want to extend there behaviour it's better to decorate it.\nFor more complex objects or some value objects like Fixture it might be better not to make them final.\n. For the top level interfaces, here are my suggestions:\n- Parser:  ParserInterface::parse(string $file): array; transforms a file in a PHP array, done in #361\n- Builder: BuilderInterface::build(array $fixtures): UnresolvedFixtureSet  where UnresolvedFixtureSet contains an UnresolvedParameterBag and UnresolvedFixturesBag. Those bags are basically just containers to have a safer typehint than array and eventually provide an nice API as well, not sure yet how useful that would be yet.\n- FixtureBuilder: FixtureBuilderInterface::build(string $file): UnresolvedFixtureSet: basically just combines the parser and builder cf. the diagram above. This combinations is useful for caching as up to that point, nothing is dynamic yet, the result is predictable  and indempotent.\nAfter that, what's left is:\n- Resolving UnresolvedParameterBag to get a ParameterBag\n- Resolving UnresolvedFixturesBag to get a FixturesBag \u2013 requires ParameterBag\n- Once FixturesBag, we \"just\" have to instantiate and populate the objects (current Instantiator/Populator system or the Serializer)\nBased on that, we could suggest the following interfaces:\n- ParameterResolver::resolve(UnresovledParamterBag $parameters): ParameterBag\n- FixtureResolver::resolve(UnresolvedFixtureBag $fixtures, ParameterBag $parameters): FixtureBag\n- SerializerInterface::serialize(FixtureBag $fixtures, ParameterBag $parameters): object[]\nWhich leads to a loader with the interface LoaderInterface::load(string $file): object[]\nThe tricky part now is injecting external parameters and objects. We have different ways to go:\nSolution \u00b01: Have a stateless approach\nIf you want to inject additional parameters/objects for the loading, you add them in the loader signature:\nLoaderInterface::load(string $file, array $parameters = [], array $objects = []): object[]\nThis looks rather clean, but raises a few questions:\n- does object[] contains the injected objects as well? (IMO would make sense)\n- If there is parameters loaded in the file as well, those parameters are lost and the user has no means to retrieve them. This can't be solved, unless we return a ObjectSet object instead, which would contains parameters (resolved + injected?) and objects\n- when injected parameters conflict with the loaded one, then what? (IMO the injected ones should override the loaded ones)\n- when injected objects (which must have a reference) conflict with loaded fixtures, then what? (IMO the injected ones should be overridden)\nSolution \u00b02: Have a stateful approach\nthe loader keep the origin signature:\nLoaderInterface::load(string $file): object[]\nAnd to add parameters and objects, we have accessors (getters/adders/setters). load() would return all the loaded objects and include the ones presents in the Loader.\nThere is other variants, for now I prefer \u00b01 but I would like to hear your thoughts on this @tshelburne.\n. @tshelburne quick update on the new version!\nI finished the biggest part of the work which is the implementation for the core classes, i.e. creating the new interfaces, value objects and the interfaces implementations require to make the library work. It is currently functional to the point of instantiating a set of fixtures (no values resolution or random values generated yet although the system behind it is ready). If you were to take a look right now, you should be able to grasp how the library is working and see most of the classes.\nThe plan now is:\n- [ ] Porting the integration tests of 2.x to v3 to ensure all the current features will be properly ported and that there will be no regressions on that side to be able to release a first beta 3.0.0-beta.0\n- [ ] Review all the issues to make sure the features expected in v3 are implemented\n- [ ] Update the doc where necessary:\n  - doc regarding the persistence layer\n  - doc regarding the new features\n- [ ] Add a bridge for the different frameworks. By bridge I mean registering the services to the framework DIC, I plan to add it for Symfony only (I don't think I'll have time for doing it for another framework). The library is also usable without any DIC by relying on NativeLoader\n- [ ] Review performances: benchmark against v2, do a POC for caching to see if it's worth having a cache layer or not)\n- [ ] Add a technical documentation on how the library works (mainly taking the diagram in the recap of this issue and adding some comments left and right, nothing too deep)\nIn parallel:\n- [ ] Continue to prepare a new release for v2 with all the deprecation notices to ease the upgrade to v3\n- [ ] Work on HautelookAliceBundle for a Symfony integration and see if everything is ok on alice side (to be done before the stable release to be able to do a change requiring a BC break and to have more feeback)\n- [ ] Release a beta on HautelookAliceBundle (will probably be a new major release)\nSo there is still a lot of work but the hardest and biggest part is behind. I hope to release the 3.0-beta.0 soon (in 1-2 weeks) and then wait a couple of month to finish the work and have some feedback before having the stable release (probably between october-november)\n. Now that everything is clear, I think we can close this issue. I still have a couple of things to fix before the first beta, but the next issues should have a dedicated issue rather than continuing on this long story.\n. Not sure where's the best place to put that putting it here.\nI've run a quick benchmark on alice:\n- 2.x blackfire profiling\n- 3.x blackfire profiling\nThe end result is roughly the same (-0.5% faster in 3.x) which is a very good news as, unlike in v2, there is a big \"build the fixtures set\" step in 3.x. You can see that some call or optimized, e.g. only 604 calls made on FakerGenerator::format() (used to generate any data via faker) against 680 in 3.x).\nAlso in 3.x the \"build the fixture set\" (via the FixtureBuilder) accounts for 24% of the time spend, so as it's cacheable it's a potential 20% (guess it will take some time to put and retrieve from the cache as it's a big chunk) speed win. I can't say I tried to squeeze any performance yet so this comes as a pleasant surprise :)\nIt's also worth mentioning that we've moved from 534 tests and 1179 assertions in 2.x to 1762 tests and 2991 assertions, with some I hope will be easier to debug.\n. So, sprintf() over strings concatenation. I personally prefer but I'm curious to know if you have any argument for it\n. true, but its not a Symfony project ;)\n. There is just the empty check that I find cleaner ;)\n. @munkie for what it's worth you may let it... whatever we're not gonna fight over that :dancer: \n. @Soullivaneuh do you have any proposal on the syntax?\n. We could probably add a flag group <group name>. That being said, I'm not found of encouraging the practice of having fixture groups depending of the environment. It encourages having super bug set of fixtures to do everything, including functional tests, which leads to very unmaintainable fixtures. It's much easier to empty the database and load only a set of fixture dedicated to a specific scenario instead.\n. What framework are you using? We solved this in Symfony with HautelookAliceBundle by having fixtures in different directories. The Bundle is able to locate the fixtures to which we can pass such groups. It can easily be applied in other frameworks as well.\n. One thing I didn't mention is that besides having directories, we also have data loaders. They're kind of a legacy of the previous system which was supporting another bundle, but they still remain helpful when it comes down to try to load the same files for different environments.\n. One tricky thing would be how to handle templates: would child templates inherit of this flag? If not what if you refer to a template which does not have this flag? Throw an error?\n. @Soullivaneuh not sure to see what you mean, could you provide a sample?\n. ping @Soullivaneuh \n. @NiR- could you rebase it somehow to run the test with the latest version again?\n. @tshelburne ok for me\n. AFAIK has been aded now.\n. It is mentioned in the doc and I also see a test for it.\nBut I didn't try to use to be fair so I may be wrong.\n. ping @tshelburne, @Seldaek \n. Thanks :)\n. > Don't get me wrong, but stuff doesn't usually get done unless someone that\n\nneeds it chips in the time to do it. Alice is made to be a simple and way\neasier replacement of doctrine fixtures. Sure that can't cover all use\ncases without some amount of work, and I think that's ok.\n\nI cant' express any better my feelings, although there is some nice features that should be added.\nFIY @tomazahlin you can also return PHP files so what you can achieve with DoctrineFixturesBundle can be achieved with Alice. That being said, with Symfony there's a bundle for everything, and yeah, there's one for Alice! It's called HautelookAliceBundle that might prove to be an  good alternative, and far more active than DoctrineFixturesBundle ;)\n. Closing in favour of #387\n. @sam0delkin did you try to have your parser load the two files at the same time rather than having an import statement and loading one file?\n. php\nFixtures::load(['user.yml', 'user_admin.yml']; $objectManager);\nwithout the import statement?\n. @sam0delkin could you please check if this has been solved by #359?\n. The issue has been solved in 2.2.0 :) I've added a test for that still in https://github.com/nelmio/alice/pull/424.\n. Duplicates of #198 ;)\n. :+1: \n. > ping @theofidry\n?\n. ;)\n. What's good with StyleCI is that it's a dedicated service so it separates well your travis build with continuous integration from a code style build.\n. As long as it's run once in a while like before each release it's good for me ;)\nI agree that two much new tools may overwhelm newcomers. I'm less favorable for this when dealing with bundles as it targets already more advanced developers, but for non specific framework libraries like this it may ease the developer experience.\n. > This is how I learned for my personal case.\nSame for me actually.\nAnother thing possible is to put it but not register StyleCI as required for PR. That don't prevent the failed status of a PR, but still indicates it's a non mandatory element.\n. @reinfi did you find a fix for it?\n. Looking again at this, I think this is just a parsing issue in 2.x. It's quite this kind of bug that are hard to spot and fix in 2.x due to the inexistence of a proper parser/lexer to handle this task. This should however definitely work on 3.x.\nIf you have found a fix in 2.x I would gladly accept it, otherwise it will be kept as fixed in 3.x only.\n. It does not do this one^^ In the meantime I'm creating a Faker provider for that but still it would be cool IMO.\n. Well, I guess I'll stick with my provider then ;)\n. @tshelburne until know no rules were really enforced for fixture references, but the system doesn't guarantee that it works either. This case is a good example of it: using / in the reference doesn't raise any warning, but referencing to such IDs can break.\nWhile working on #355, I was kind of thinking to enforce stricter rules when possible. In v2 not following them would raise a deprecation notice while in v3 we could throw an error. It may be annoying for some user as it means in loosing a bit of flexibility, but I think it's better to fail early with a good explanation rather than being more lenient and not being able to guarantee the result.\nWDYT?\n. I tagged thinking this could be a thing to watch for in 3.x, however objects can be injected when loading a file or data (both in 2.x and 3.x) and I'm not sure to really see the use case of having something more.\nAs it's a fairly old issue, I prefer to leave it as that. If you or someone still feel about it, please open a new issue to have a fresh discussion on that topic. \n. @Yanncha looks more like a YAML => PHP thing :)\n. Although I understand that you could be surprised by it, I'm not sure if there's much more to expect from it. Please feel free to express yourself if you think we could address it somewhere, meanwhile I'll close this issue.\n. You mean somehow declaring somewhere \\My\\Long\\Namespace\\Dummy has an alias dummy and then you could do:\nyaml\ndummy:\n  d{0..100}:\n    # ...\n? If so I would better not. It would only create confusion IMO for no real gain.\n. Related to #276 as well I guess.\n. Closed via #359\n. Not sure you can do it, but you could solve your problem by using a custom faker provider :)\n. Reviewing this after taking a closer look in the code, this indeed won't work as right now <{...}> delimitates a parameter name and is not evaluated. As a result <{address_<current()>}> refers to the parameter address_<current()>.\nWill consider that for v3.\n. Closed in favour of #354\n. Closing as is a duplicate of #313\n. Closing as is a duplicate of #176\n. The problem with what you would like to do is that the string <current()> * @offer_price_<current()>->value must, besides being parsed and the value resolved, be evaluated. That's not something that will be added. If you want to do this kind of thing, you should add a custom provider:\nyaml\ntotal_item_price_{1..4}:\n    value: <calculateItemValue(<current()>, @offer_price_<current()>)>\n. @Seldaek is it possible to have a new tag after merging this PR please? We would like to be able to use a stable release for the Symfony3 compatibility for AliceBundle\n. \\o/ cheers guys\n. To my understanding this is not an issue at alice level: alice parses whatever fixtures file you use (YAML, PHP, XML and all format supported) to generate PHP objects. How it is persisted depends of your persistence layer. For example with Doctrine ORM you can configure your group PHP property to a column named my_group.\n. > hautelook/AliceBundle. Sounds like I should look/ask there.\nNope :p HautelookAliceBundle is simply a port of Alice to Symfony for some helpers. Your problem is at the other end: how you are persisting your data. You can have an entity with a group property, but you cannot have a group column, hence you must name that column differently, ex with Doctrine ORM @ORM\\Column(name=\"mygroup\").\nIf you still have some trouble ask me on HautelookAliceBundle gitter :)\n. @tshelburne this doesn't work because (unique) is not working with arrays yet :(\n. This change in the behaviour of (unique) has been landed in 3.x. Unfortunately, as said in an issue which I can't find right now, I prefer to simply deprecate it in 2.x rather than introducing a BC break (unique works with arrays, but it tests the uniqueness against the serialized value of the array, which is what you want).\n. Would be great to be consistent but sometimes not introducing a BC break is more important :/ @ma-si are you still having problems with it?\n. Closing as it's an old issue and this can't be fixed in v2 as it would introduce a BC break.\n. :+1: \n. perfect answer from @knugen, do you still have an issue with it @manju16832003?\n. That's correct, could you move the content of postProcess() into preProcess() please @knugen?\nI checked the ProcessorInterface the doc is up to date :)\n. :+1: \n. current() works fine if I remember right. Otherwise there always a custom provider available although looks overkill.\n. @reypm go with a custom faker provider for the names. If you're using HautelookAliceBundle check this part\n. Keep it simple :dancer: \nWant you want is having a value for Carrier#name. Those are specific values so it's the perfect job for a Faker provider. A faker provider is just a simple class responsible for returning you some data. What kind of data is completely up to you. So in your case you would probably like something similar to:\nyaml\nPlatformAdminBundle\\Entity\\Carrier:\n    carrier{1..X}:\n        name: <carrierName()>\nFor that you just need to have a class:\nphp\nclass CarrierProvider {\n  public function carrierName() {\n    // TODO\n  }\n}\nwhich you register as a service with the proper tag (cf. doc). How you implement the //TODO is up to you. You can just pick a random value of an array containing all the available values:\n``` php\nclass CarrierProvider {\n  const NAMES = [\n    'val1',\n    'val2',\n    '...',\n  ];\npublic function carrierName() {\n    return self::NAMES[mt_rand(0, count(self::NAMES) - 1]; // use mt_rand for random values with Faker\n  }\n}\n``\n. If it's not clear enough ping me on HautelookAliceBundle gitter :)\n. @reypm give me five I've got an example for ya\n. On Symfony roles are accessible via%security.role_hierarchy.roles%` (in YAML). The only issues is that you get the array with the whole hierarchy which may not be what you want.\nI've got this utility class that flattens those roles. Then you can have a simple faker provider for it.\nIt's an old project so there is definitely rooms for improvement (or at least I would completely rewrite it), but it may be a good start for you.\n. @tshelburne yeah nothing much, just using a custom faker provider for getting the roles. A bit of extra code to get the actual roles used in the app for Symfony but that's it ;)\n. @reypm closing the issue as it's an old one and a solution has been provided. If you still have a problem don't hesitate to open a new issue.\n. Nice one! Could you add a lil' test as well for it please?\n. Sure, you can add a test in https://github.com/nelmio/alice/blob/master/tests/Nelmio/Alice/Fixtures/LoaderTest.php. \nFor the test YAML file you can try to place it under alice/tests/Nelmio/Alice/support/fixtures/ I think.\n. The King of Regex has spoken. :trollface: \n. @tshelburne would it be possible to add the tests while merging? It's true that the tests are a bit obscure sometimes as it may be hard to tell where to test, if there is any already existing or whatever. But would be a shame not to merge that because of a contributor not able to tell where to add a test and how to test it.\n. Closed in favour of #346\n. I doubt you can do that :( However you could certainly use a custom faker provider as a workaround.\n. Ah soz indeed miserad. Err did you try the x4 notation?\nyaml\nCatalog\\Product\\Product:\n    foo:\n       # [...]\n        addImage: x5 <image()>\n. Indeed I don't think it would be doable then :/ Interesting feature still.\n. I'm not familiar with this part of the internals sadly so you'll have to wait for @tshelburne :(\nThat being said, something you could actually do have a little fixtures generator for this one and create a custom loader to add them besides the files you want to load. A bit hacky and brittle though. If you're using Symfony you could get HautelookAliceBundle and decorate the loader to do that.\n. @ogizanagi I know it's unlikely to solve your problem at hand (plus it's already an old issue), but I would like to integrate this feature for v3.\nWe would just need to agree on the syntax. @tshelburne Why not going for __calls? That would be consistent with the __constructor notation:\nyaml\nCatalog\\Product\\Product:\n    foo:\n       # [...]\n       __calls:\n            - setLocation: [0.49, 0.5]\n            - addImage: ['foo-image', 0]\n            - addImage: ['bar-image', 1]\nAnd then we could deprecate the current method call notation: setLocation: [0.49, 0.5].\n. I would go with after the object has been instantiated and populated.\n. Design notes:\n- method calls should support (unique) flags, cf. #387\n- method calls should support optional call, cf. #275\nAnother thing I would like to support is with* methods, which returns a new instance instead of mutating the object.\n. There is no release date yet sadly. I would expect a couple of weeks before\nthe first beta release and then it depends on how much issues are reported\nand how quick they are solved\nOn Thursday, 21 July 2016, Hugo Hamon notifications@github.com wrote:\n\nI'm facing the same issue. Do you know when v3 will be released please?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/313#issuecomment-234284693, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gdIMzaKGqsNyrE63UwN58NySzswRks5qX4wsgaJpZM4HY7ZQ\n.\n. @hhamon a more elegant workaround would be to use a customer setter. It's not pretty but wouldn't pollute your model\n. Closing in favour of #388.\n\nI would expect this bit to be implemented this weak, it will either go in the first beta version (expected at the end of next week) or the second one.\n. :+1: As far as I can tell there is no BC break so can be released in a patch :)\n. @tshelburne looks interesting to me :)\n. ping @tshelburne \n. I've done a deeper review @reinfi, looks great thanks for the hard work. There is still a few things to polish but we're nearly there :)\nBesides the comment the tests needs to pass.\n. Great work! There is one last test case and it should be alright. Since your PR, a new branch 2.x has been added to keep master free for v3. Could you re-open the PR against it and ensure the tests are passing?\n. follow up in #347. @Yakimun IIRC it works now.\n. It definitely works if you are using the Fixtures facade*. We are using the same pattern in HautelookAliceBundle.\n. We have:\n- pre-persist (via Processors)\n- persist (via Loaders)\n- post-persist (via Processors)\nSo IMO it's just a matter of having the proper persister in the loader in this case. As I guess your DnsManager is supposed to persist only PowerDNSDomain entities, I would do a decorator to decorates the regular persister used and this manager to call the DnsManager when necessary.\n@Soullivaneuh would that fit your needs?\n. ping @Soullivaneuh \n. But the logic is the same: alice have to use a \"persister\" to persist the entities. The persister takes each object and persist them.\nBy default the persister is the Doctrine bridge, which relies on the ObjectManager, but it would be possible to inject a custom one instead.\n. ping @Soullivaneuh \n. Closing as I don't think we should add any more step to it and is not relevant in v3. Ping me if I missed something though.\n. @tshelburne I don't think this would cause any BC and will indeed solve the use case where you assign IDs at the domain level (not letting the auto-increment of the database) and you don't want to purge your data between two loading.\nThat being said @hidabe, your \"I can't delete database.\" is making me very uneasy.\n. > wouldn't it be possible to use a pre processor to do this?\nI hardly see how as it's at the persistence level (how we persist them), not a pre/post persist operation\n\nFrom my point of view fixtures aren't made for update statements.\n\n@reinfi agree. Actually @hidabe I think this should be done in HautelookAliceBundle alone, as this bundle provides you a --append option. Alice does not and provide a helper to load/persist the fixtures for convenience, but it's code is the fixture loading, not the persistence. Such option should be handled in libraries wrapping Alice, not Alice itself.\nFeel free to do a PR for that :)\n. @hidabe actually fixing this issue in alice wouldn't solve your problem if you are using AliceBundle, as AliceBundle use it's custom loader (it relies on alice for loading the YAML/PHP - fixtures files) for persisting them. Alice is meant to load fixtures, persisting them is an extra provided for convenience.\nYou should check https://github.com/hautelook/AliceBundle/blob/1.x/src/Alice/DataFixtures/Loader.php for adding that to AliceBundle :)\n. @hidabe the point is, you are the first requiring it and even if you fix it in Alice it still won't work in AliceBundle. Alice has two loaders: one to load the fixtures file, the other one use the first one and persist the loaded fixtures.\nAliceBundle just use the first loader, the second one is custom.\n. As discussed, this is unlikely to be changed in Alice as things relative to the persistence are out of its scope.\n. Closed via #315. @hboomsma I've made a PR with a few changes. Once merged I will merge and squash this PR.\nIf you have a property full_name, it will look in order:\n- setfullname()\n- setfull_name()\n- set_full_name()\n- set_fullname()\nIf it is a normal property, e.g. name:\n- setname()\n- set_name()\nIt also avoids to introduce a BC @Seldaek mentioned.\n. Thanks very much for the work @hboomsma :)\n. Closing as is a duplicate of #325, thanks for the report!\n. This issue has been addressed in 3.x, closing as this will not be fixed in 2.x unless someone is willing to provide a patch for it.\n. @tshelburne updated. I think there is a lot to discuss about especially as it's the first change.\n. ~~EDIT: what's missing from the PR:~~\n- ~~ReflectionWithoutConstructor: not really sure to understand the use case~~\n- ~~Unserialize: not really sure to understand it either; looks like a hack for <PHP5.4 so I suggest to kill it.~~\n- ~~ReflectionWithConstructor: waiting to review/work Processor before tackling this one~~\nHave been added\n. @tshelburne would it be possible to have a quick review? Or rather at least agree on the PHP version used as it's really the blocking part for me :)\n. Only just though about that but maybe HautelookAliceBundle contributors want to participate as well? /cc @Soullivaneuh @vincentchalamon\n. @Soullivaneuh I think deprecations could be added to 1.x and not worry about that in master, and have a good changelog. \n. @tshelburne updated, tests should pass (they do locally) on Travis once #335 and #336 will be merged.\n. > does Serializer rely on annotated classes?\nCould you give an example? I'm not sure to have the same definition of annotated classes :P\n\nWe don't want to introduce anything that suddenly takes us back to \"you must use Symfony\" territory.\n\nNever, I don't want alice to become a Symfony bundle, that would be awful.\n. Nope, it uses reflection by default and if needed we can register custom denormalizers.\n. Closing as will deal with it in #265 \n. Note that it's already documented here, just not clear enough I think. It should have it's own section instead of being in Fixtures Ranges.\n. Updated to reflect on the .., ... difference\n. Thanks for your work @toonjanssens\n. It is weird, they do pass locally when I pull out your branch...\n. @reinfi any leads on what is going wrong? Sorry I was a bit busy with #355...\n. Nice! I'm waiting for #355 to be merged and then I'll merge yours :)\n. @reinfi #355 as been merged! Could you please rebase your work? I hope you won't get too many conflicts...\n. I think there was only the tests to fix left :)\nI'm gonna take a new look at it and to a PR against master as well to ensure this feature is on both 2.x and 3.x. Thanks. Closed via #693, it has been released in 2.3.0 :). Closed via #366\n. Thanks for sharing your thoughts @matt-usurp.\nMy reasons for those changes:\n- I find very error prone to have @user and @User that would give two different results\n- Special characters are problematic as some are already used: {, }, -, (, ), > and complicates a lot of other regex, which makes it harder to maintain and ensure they work correctly\n- Not every regex are case-sensitive, which means there is already potential bugs when relying on it\n- We have absolutely no test for such cases which means we can't guarantee the result\n- It's common for service declaration to have lowercase service names with a limited set of special characters (usually ., _ and -).\nThe rationale behind is that right now, there is not much checks done. This is cool as it offers great flexibility. The issue is that it as a lot, lot more testing. The current tests are good enough for most of the common use cases but they often miss dark edge cases. Having \"weird\" references is very far from being tested thoroughly if at all. Hence my intend to offer less flexibility on this side to ease maintenance and develop feature on our side and offer better reliability.\nThat said, it's not set in stone. It sounds like a reasonable choice to me, but I'm happy to discuss of the problematic use cases that arise.\nNow for your problem of directory structure convention: I'm not sure how does it cause a problem? Unless you have 2 directories with the same name and one lower case, the other uppercase, it doesn't change anything on that side right? (also you could use / after that PR in the names to match the directory structure btw)\n\nWe also have this case where its nice to list all the names in the fixtures that are canonical and generate slugs or alias based on those\n\nThat's an interesting use case but it's one where I would say you are misusing alice flexibility and should be done another way. The first problem is that it's very easy to insert special characters in the list name that way, (ex: Alice's Cat) which can be problematic for the reasons mentioned before. The second is that this could be easily done by having a custom faker provider where you have a whole list of those possible values instead:\nyaml\nClass:\n  \"reference_{1..5}\":\n    name (unique): <slugName()>\n    alias: <(someUrlFriendlyFunction($name))>\nNow the only drawback I see is you're not able to do anymore \"I know I have X values, I want a fixture for each of it\" in a dynamic manner. But in that case I would argue that you could have your list of fixed fixtures as a parameter and have your fixtures matching its size:\n``` yaml\nparameters:\n  slugs: [Alice, White Rabbit, Mad Hatter, 'Alice\\'s Cat']\nClass:\n  reference_:\n    name (unique): \n    alias: <(someUrlFriendlyFunction($name))>\n```\n(It doesn't work right now), but my point is I would find that more flexible and robust, and would prefer to add this new feature (which would go well with #347), than relying on your current way which looks more hacky and much more problematic if you were to get the references of your generated fixtures for example.\nThat said:\n1. We don't plan to remove it in v2 at least, only deprecating it. So if that's something working well for you now and changing it would make things hard, there is no need to upgrade right away.\n2. V3 still have a few months before being out, you got time.\nDon't hesitate to speak your mind if I missed anything.\n. Ah my bad, I thought that if you had two references userbob and UserBob, @user* would refer to both of them but after a check looks like it is case sensitive for that one. As that currently works I don't mind keeping it then.\n. ping @tshelburne \n. @tshelburne rebased. I forgot it was such a big PR... better not to let it staging too long.\n. @matt-usurp I removed the case sensitiveness check.\n. > You said you removed the case sensitive check, what does this actually mean?\nThere's been no change on that side in the end (i.e. works as before).\n\nAlso I would say you need to work on your commit messages as looking at the commits tells me nothing about what you have done recently. Like, I can't even see a commit that might be referencing that change.\n\nYou have the details of what changed in the changelog which gives you the reference to the PR and you can always get the PR from commit.\n. Good catch ;)\n. Thanks for the detailed bug report @matt-usurp :)\nJust to make one thing clear: does changing the typehint fix the issue? I.e. the embeddables are not persisted as expected?\n. I'll try to check that in details in the coming week/weekend, but I can't guarantee anything. I would hate the idea of it preventing you to use interfaces, it's something that must be fixed.\n. Sorry for the delay @matt-usurp. I see where the issue comes from now. In v2, it is assumed that all your objects are getting persisted, they will be referenced by the persister (here the Doctrine manager) and leave that find() to the persister.\nNow there is two exceptions for that:\n- Embeddables objects (marked as embeddables, supported only since 2.2.0)\n- local objects (your case)\nOne way to solve it IMO is to create a new persister for doctrine, decorating the current one, which would keep references of non-persisted objects and implement the find() for those ones.\n. As shown in #427, this has been resolved in 2.2.0 :)\n. Again thanks a lot for looking into it! It's definitely an issue that I don't think I would have had the time to look before a while!\n. > so that it will be more flexible for other extensions.\nDon't over do it though, v3 is coming out ;)\n. @reinfi what is the status of the PR? Is there any work left or is it ready for review?\n. @reinfi looks like tests are failing. I guess that's what the array_reverse was for, but I don't think this would be the right solution as it would be a BC break.\n. You might want to rebase as well, no big change though :)\n. Closed via d1e88de. Thanks very much for this @reinfi :)\n. Well current is a function so it would be more <(strtolower(current()))>. That said, I don't think it works and I didn't check how reliable chain calls, i.e. <(strtolower(anotherfunction($var)))> behaves (although I would like it to work).\nI didn't check that part yet on v2, but it's definitely something that I'll try to make work on v3 at least.\nThat said, in light of #355 you should avoid upper case names :)\n. To be honest, it's still a dark part of the project for me. I'm getting more familiar with it as I'm adding tests, debugging it and writing v3 which makes me ports a few changes to v2 or help me to find an easy fix on v2. But I'm not at the data generation yet so I can't be of much help on that one right now.\n. After checking https://github.com/nelmio/alice/issues/374, I think <strtolower(current())> works (couldn't check, but that would be the syntax supposed to work).\n. Indeed it looks like it's not working :(\n. @piotrkochan sadly there is no plan to fix it on the short-term. Not that I don't want to, but I suspect the problem to be deeper and being very hard to fix especially without introducing any BC break. I might be wrong, but I prefer to dedicate the little time that I have on v3 for which I can guarantee that this will work rather than trying to fix v2.\nOf course if someone is ready to spend time to investigate it and provide a bugfix, I'll gladly accept it, but understand that it is not my priority at the moment.\n. Actually works for any PHP native function, it will just fail with functions coming from providers... A shame  but that's how it is. Feels like this is a limitation that should be documented at least.\n. @Mvannes I wasn't even aware this would work... :P\nThis definitely will fail in v3 so be careful when using it.\n. > Yeah but by then it should be replaced by something actually working correct? :D\nOFC :P\n\nWould v3 also allow for casting the value of current to an int though? \n\nDepends. If you want the right scalar value it's handled by the YAML parser. Otherwise everything in expression is evaluated as strings, but that can be changed by having a scalar typehint with PHP7 provided you're not working with strict mode. If required, developers can easily have a custom provider function to do the cast. Identity works as an eval: it takes an expression and evaluate it as a PHP one. We could possibly add things to it, but I think it's better to keep it simple and use custom providers instead.\n. Update: this has been fixed in 3.x so your original example will work in it.\n. Thanks for those changes @munkie, but I hope you're aware that 1.x is absolutely not maintained anymore :/\n. @weaverryan what about adding it under the ToC like for AliceBundle#documentation? Would be less confusing and more visible IMO\n. Thanks @kaoru, after a quick search looks like it was the only occurrence :)\n. Closed in favour of #375\n. Closing as actually could be used for a couple of things and doesn't require much extra work.\n. Hello,\nidentity() is a simple \"faker\" function, not provided by faker natively, but by a Faker provider still: IdentityProvider.\nYou have a piece of doc here, but I agree it could be better. However here's some examples:\nyaml\nNelmio\\Entity\\User:\n  user1:\n    username: 'testuser'\n    fullname: '<identity($username)>'\n  user2:\n    username: 'test_user'\n    fullname: '<identity(str_replace(\"_\", \" \", $username))>'\n<current()> is also explained here. Same I think it could be better so any PR to help is welcomed :)\nIn short, <current()> can be used when dealing with a fixture collection such as user_{1..10} or user_{alice, bob} and returns the \"current\" value of the collection:\nyaml\nNelmio\\Entity\\User:\n  user_{1..10}: # creates 10 users \"user_1\", ..., \"user_10\"\n    username: '<current()>' # will be \"1\", ..., \"10\"\n  user_{alice, bob}: # creates two users \"user_alice\" and \"user_bob\"\n    username: '<current()>' # respectively \"alice\" and then \"bob\"\nIf my memory serves me right, it throws an exception if you try to use <current()> outside of that context (needs to be checked).\nBest,\n. Ah, as mentioned in #360 the correct syntax would be '<identity(current() - 2)>' but I couldn't test if it was working or not... :/\n. Indeed, I'm not sure why I couldn't find much after a bit of debugging. I'm honestly not sure that this will be fixed in v2. In the meantime what you can do is having a provider to do the calculation:\nyaml\nAcme\\Entity\\User:\n  user_ {3..10}:\n    anything: '<anything(current())>'\n. Erf, I don't know then. I can only make sure that this will be fixed in v3 for now. If I find a fix on the way I'll make sure to include it.\n. Closing in favour of https://github.com/nelmio/alice/issues/360\n. @tshelburne I udpated the issue, take your time to review it, but it's a fairly important piece and as is high level it should not be much of a problem even if you did not follow the change of code of v3 in details.\n. @tshelburne yeah it's relative to @ref. I was saying that if you have @user<numberBetween(1,20)>, it will give the fixture of reference@user5 for example. But if you do @user1->name<numberBetween(1,20)> will result in trying to get the name<numberBetween(1,20)> property of the fixture of reference @user1 (and as a result fail), i.e. the function call won't be evaluated.\n. > You might want to throw or something?\nNot sure to understand that bit\n. Whenever it's possible yeah it would great. I'm don't want to guarantee that because I fear this would require too monstrous regexes, but that would be great.\n. @aistis- yes it should :). Could you open a dedicated issue for it? If possible with the version used as well. ping @tshelburne\n. I like the options idea \ud83d\udc4d \n. Actually can already be done with Faker randomElement I think :P\n. Dates are properly generated, that said in your case DateTime is not a function but a class, hence <DateTime()> will not work.\nInstead I recommend you to take a look at Faker dates & times functions to achieve what you want.\n. @tshelburne @Seldaek as there is BC break in userland I would like to have your opinion on this.\n. > Would __construct still be supported as is, and you are adding __factory?\nIf we decide to add __factory yeah, it would just reduce __constructor to specify:\n- don't use the constructor, i.e. false\n- specify the arguments to give to the __construct function\nTbh I don't feel strongly about this, if you feel this should stay in __construct I wouldn't mind but that could make it more logical. Another thing is maybe we could support both at first and deprecate this usage of __construct, as it would not be possible to change this in v2 this would make the migration easier from a user POV.\n\nIndifferent about accessors - that seems like it's pushing the simplicity of the library, but if people want it, perhaps it's helpful.\n\nLet's keep it as an idea then. I would prefer to finish the first alpha version of v3 before considering to add this.\n\nConfigurator should be after call step - that makes the lifecycle increase in complexity as it moves along, rather than jumping around.\n\n\ud83d\udc4d \nThanks for taking the time to take a look at it @tshelburne\n. > I don't see a reason to deprecate __construct at all\nI meant deprecating the usage of __construct as a factory, i.e. specifying the static constructor method. To be more clear:\nyaml\nNelmio\\Entity\\User:\n    user{1..10}:\n        __construct: # deprecate that for the factory statement below\n            create:\n              0 (unique): <username()>\n        __factory:\n            create:\n              0 (unique): <username()>\nBut having __construct would still be perfectly valid:\nyaml\nNelmio\\Entity\\User:\n    user{1..10}:\n        __construct:\n              - 0 (unique): <username()>\n. > BTW, one note - the library is changing so rapidly and has evolved so much that I can't really keep up with it - I've reduced my notifications to direct @ mentions only so that I'll see the meaningful parts instead of losing it in the bulk. Let me know if it seems to cause problems, but it seems the only reasonable way for me to keep up with it, TBH.\nPerfectly ok with me :)\n. Regarding the Optional method calls problem:\n\nAs expressed in #249, it would be a nice feature to have optional method calls:\nyaml\nNelmio\\Entity\\User:\n    user1:\n        __calls:\n          - setLocation: 80%? [40.689269, -74.044737]\ni.e. there is a probability of 80% that the setLocation method is called with the given parameters. But the sad thing is that it would be impossible to do with the array syntax:\nyaml\nNelmio\\Entity\\User:\n    user1:\n        __calls:\n          - setLocation:  80%?  # would generate an error when parsing the YAML\n            - 40.689269\n            - -74.044737\nProposal:\n- A. Go with it, would limit this feature to the inline syntax\n- B. put that as a flag instead (but is inconsistent with the syntax for properties):\nyaml\nNelmio\\Entity\\User:\n    user1:\n        __calls:\n          - setLocation (80%?):\n            - 40.689269\n            - -74.044737\n\nHaving it as a value complicates a bit things to be honest:\n- It means altering the call \"configuration\" after evaluating the arguments\n- Technically speaking, it's not the same as for properties [1]\n[1]: in the case of properties, '80%? foo: bar' is \"have 80% of chances to be'foo'\" and otherwise if'bar'`. Whereas here we are talking of \"have 80% of chances to call this function\". Actually we could extend it to properties as well:\nyaml\nNelmio\\Entity\\User:\n    user1:\n        username: '80%? foo'\n    user2:\n        username (80%?): '50%? foo'\nThe difference between the two is that there is 20% of chances that username will be set to null for user1 (by eventually calling a setter, which may assign another value...), whereas for user2 there is 20% of chances that username is not set at all (mutator or not).\n. Closed via #407 \n. Sadly you don't have any way to do that (and you won't even in v3). One thing that could be done is having a static analyser do this, but I'm afraid it's out of the scope of alice and likely to be flawed when dealing with dynamic fixtures (ex if you have post{1..10} or if you don't refer to @userMain but @user* instead.\nIs there any good reason to do that?\n. I don't really want to open $objects in alice core, there is already a getter/setter which is more than enough. If you need to inject a reference only for 1 load but not others, you can already do it (even though a bit cumbersome).\nFor more extended and custom usages, you can always create your own loaded inheriting from alice one, $object is protected so you have access to it.\nNote that in v3 the loader will be stateless so any external reference will need to be injected in the loading method.\n. That said I don't know what your use case is, if you feel like I missed something feel free to give me more details :)\n. But you don't \"add\", because in that case $objects is not a list but a hashmap, i.e. if the key already exists you are overriding the value, not adding it.\nIt's a bit more verbose but you can already do it:\n``` php\n$references = $loader->getReferences();\n$references->set($key, $object);\n$loader->setReferences($references);\n```\nGranted it's not very nice, but as this won't be in v3 and is potentially confusing (you're not adding but setting), I would prefer not change that.\n. > So maybe, decouple Nelmio\\Alice\\Instances\\Collection\nBut that will end up being a BC break, which is not allowed for v2, and this problem won't happen in v3. So in any case I think the best solution for you is to override Alice loader through inheritance.\n. You will have to inject the references in the load, cf. LoaderInterface and the default loader will not hold the objects. That said it will still be possible to have a loader keeping the references by decorating the native one and implementing the loader interface.\nIf you wish to know more about what will change in v3 check #265.\n. As it's tightly coupled to AliceBundle it should stay in AliceBundle IMO, not further.\n. > The bundle itself doesn't require any component from AliceBundle to run\nThen it shouldn't be a bundle :) You could rename it and make it a true library, and in it have a bridge for Symfony, e.g. like done in api-platform/core.\nIf it's published a PHP package and not a Symfony bundle then I see no reason not to include it in alice, but you should deliver that promise first (i.e. change the package name and test it without AliceBundle dependency)\n. Thanks for the work @pkruithof!\n\nI also added a psr/log dependency, as it's being used in the Loader class.\n\nCould you remove that part? Logger is an optional dependency and the library works fine without it :)\n. Alright, a last change and it's ready to go :)\n. Closed via 10674cb79bb22d75da0d5b04e9b6ff41fdcccb3b, thanks a lot for the work @pkruithof :)\n. I fear that it's the same problem as https://github.com/nelmio/alice/issues/360 :/\n. Closing as it's a duplicate. Subscribe to the other issue if you want to keep up with it :)\n. Urg indeed. I remember there was this discussion about it.\nA workaround I've used in HautelookAliceBundle is actually having two Faker generators: I just have to make sure they are initialized with the same value which is not very hard.\nAnother thing is: check you faker provider again. Providers have A LOT of static calls, it's very rare to actually need to inject a faker instance. To my knowledge, there has been only 3 complains about it: me and h4cc in the issue I've linked, because we were making a bundle and that looked like a design flaw and causing problems for registering custom providers, and you. So it's worth double checking before making any actual change to v2.\nThat said, it's a flaw that will be fixed in v3 for sure.\n. > That said, I am not sure how I can use static methods to provide data? Are you suggesting to use  ?\nNo I meant to inject your provider in the loader.\nI'm letting you tinkering with it, if opening up a function fix you're problem it's fine by me as long as it doesn't introduce a BC and is not overly hacky. I just want to avoid to do that unless necessary :)\n. Any luck @dantleech?\n. Closing this now. If you still feel the need for it, feel free to open a new issue for it.\n. Thanks @IceMaD, I'll have to double check the whole doc for such mistakes I guess.\n. The Doctrine layer is very thing: https://github.com/nelmio/alice/blob/2.x/src/Nelmio/Alice/Fixtures.php#L162-L177 and Doctrine::persist() only do a persist() then flush().\nThat said I'm having a bit of trouble to see what you're doing exactly, so I may miss something.\n. Sorry @tloeffler I couldn't find much time to look into it. From what I see in the Doctrine bridge of alice, we are doing persist() and flush() but never a clear(). So it would make sense that the Doctrine manager keeps the references of the loaded objects after loading, which in your case cause a problem.\nAn easy fix would be to add a clear() method to PersistenceInterface and do a clear in Fixtures::load(). Sadly this would be a big BC and cannot be done in 2.x. As 3.x will drop the persistence layer, I'm afraid this issue won't be fixed.\nWhat I can suggest you is to eventually decorate or extend Fixtures to do a clear() before returning the objects, or do it manually when it's causing problems.\n. Indeed it's quite interesting. I don't like at all the autoloading part, but from the look of it, as the classname is not part of the final result doesn't include those, we could skip it, i.e. you declare everything as ArrayFixture.\nI am not for adding an option for outputting a JSON string instead of an array of fixtures, but having a simple model for easing this is acceptable. If you are willing to, I would gladly accept a PR for adding this feature :)\n. It doesn't merge the class declarations, i.e. if you have two blocks declared with ArrayFixture, there only one that will be kept (and which one is kept is up to Symfony YAML Parser so I'm not sure of the result). So you have to change:\n``` yaml\nfixtures.yml\nArrayFixture\\User:\n    user{1..10}:\n        username: ''\n        fullname: ' '\n        birthDate: ''\n        email: ''\n        favoriteNumber: '50%? '\nArrayFixture\\Group:\n    group1:\n        name: Admins\n        owner: '@user1'\n        members: 'x @user*'\n        created: ''\n        updated: ''\n```\nto \n``` yaml\nfixtures.yml\nArrayFixture:\n    user{1..10}:\n        username: ''\n        fullname: ' '\n        birthDate: ''\n        email: ''\n        favoriteNumber: '50%? '\ngroup1:\n    name: Admins\n    owner: '@user1'\n    members: '<numberBetween(1, 10)>x @user*'\n    created: '<dateTimeBetween(\"-200 days\", \"now\")>'\n    updated: '<dateTimeBetween($created, \"now\")>'\n\n```\n. Looking at this again, I don't think we need to change anything in alice core.\nIf you need your whole output to be in JSON, you can easily transform the collection of objects resulting from the loading via a json_encode or the Symfony Serializer. As for needing it within your graph yourself, i.e. having an property that is an entity encoded into a JSON, this can be achieved by a custom faker as well:\nyaml\nDummy:\n    user{1..10}:\n        jsonProp: '<(json_encode(@foo*))>'\n. Let's go for a deprecation notice in v2 to warn the user and an exception in v3 then.\n. Actually turns out that this is much more tricky than expected. The only way I can see to fix this issue in 3.x would be to iterate over all the fixtures before creating any of them to detect such name conflicts. This can be easily done but I'm not sure if it's worth it, especially if the user loads one file after another: in case of conflicts, the existing object is overridden by the new one and this is a perfectly valid behaviour, I don't see the need of warning or anything there. As this solution also has a little performance cost, I just don't think it's worth it.\n. Because as fixture objects are immutable I re-create them several times, so\nI have no easy way to tell if the previous one is the same one (no\nconflict) or a new one (conflicts) :/\nOn Thursday, 15 September 2016, Tim Shelburne notifications@github.com\nwrote:\n\n@theofidry https://github.com/theofidry Instead of iterating, why not\njust check for existence at the time when you add the new instance to the\nlist?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/420#issuecomment-247225674, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gX4uvA72HnPn02-t92FoieggsICKks5qqL2zgaJpZM4JJM9H\n.\n. @overgapo will look into it tonight\n. I see that HautelookAliceBundle is indeed failing: https://travis-ci.org/hautelook/AliceBundle/jobs/143354359. I have an idea on what may cause this I may be able to fix that soon :)\n. Could you guys try with https://github.com/nelmio/alice/pull/423?\n. Ah, https://github.com/hautelook/AliceBundle/pull/238 is letting this one pass so it doesn't even try to reload it.\n. @egeloen do you have a scenario to reproduce it? At that point I'm just guessing what the issue is but have no idea if that's really the problem\n. Cheers\n. I'm afraid you are getting very different errors. Just to confirm, you have both using AliceBundle with nelmio/alice:2.x-dev right?\n\n@Soullivaneuh could you please retry without hautelook/AliceBundle#238?\n@egeloen I see nothing wrong with your fixtures. It's more like a mapping error of doctrine than alice fault. Maybe what is happening is that you have a UserInterface somewhere which alice tries to find via the doctrine manager, but because the interface is not mapped throws an error.\n. @egeloen the problem is that it's clearly not from those fixtures only, but rather about the entities and the doctrine mapping, and that I can't reproduce it either on alice or AliceBundle. Alice doctrine bridge did change in 2.2.0 to support embeddables, so it's not that far fetch to suspect it or the doctrine configuration.\n. 2.2.1 has been released. I'm aware it's unlikely to solve the problem for all of you, but it still fixes a major BC which solves the problem for most users.\nReviewing the changes of the 2.2.0, the bug you are encountering now (with the 2.2.1), are likely related to Doctrine, to add the support of embeddables. The other changes are mostly adding tests (~80% of the changes) and small bugfixes which have been well covered. There is also a couple of small \"BC breaks\", which have been introduced because they 1. were clearly bugs 2. generating very weird results.\nIf you still encounter an issue, please double check first that your fixtures are ok. Then try to provide the following informations:\n- identify the small set of fixtures causing this issue and provide it if possible\n- provide your entities (the important part are if your properties are public or the typehint of your setters)\n- your stack trace (HautelookAliceBundle users)\n- your doctrine configuration\nNote for HautelookAliceBundle users: do NOT use https://github.com/hautelook/AliceBundle/pull/238. It's an optimization but fear I'm missing a case which will cause to throw an exception where it should instead continue to try to load files.\nThe ideal obviously would be to have access to a repo where the issue occur so that I can freely debug this issue.\n. Nice one on finding it @Soullivaneuh!\n\nHyphens should be allowed IMHO, it produces valid fixture IDs\n\n@user-1 makes sense, but makes it much harder to detect @user->name. As it doesn't take much and is more a matter of state than anything else to use hyphens (-) instead of underscores (_), this choice has been made. I'm open to add support for it later but it's not a priority... I'm more focused on delivering something functional first.\n\nThe error is not enough explicit. It says \"Entity with ID @puppet_package_www-servers_apache\" is not found. It should say before that the ID is not valid\n\nI'm going to check it, if it's an easy fix let's change it, otherwise I would rather focus on v3 than tweak and monkey patch v2.\n\nThis PR is targeting a minor branch. Invalid IDs should produce a deprecation error and should still working, not the reverse. Or maybe this was not wanted?\n\nThat was definitely not intentional, the only intend was to add deprecations for v3, not break things. The small BC introduced were regarding things like:\n\nuser_{alice, bob,} previously was building a reference named user_{alice, bob,}\n\nWhich are more bugs to me and that is why those \"BC\" have been accepted.\nI'm going to investigate this hyphen things ASAP.\n. @Soullivaneuh you may have misunderstood me: I saying I don't plan to add support for hyphens for v3, at least for the first version. The usage of hyphens for 2.x is accepted, removing it was not intentional and should be restored.\n. Cheers\n. @Soullivaneuh is there any way to get access to a repo where I can reproduce the bug?\n. @Soullivaneuh I'm going to merge this one as it's a blocker. Let's continue the investigation for your bit in the original issue.\n. @Simperfit could you check that on 3.x? I don't think this should be an issue anymore . @Soullivaneuh that's weird, you should get an exception from it: https://github.com/nelmio/alice/blob/2.x/tests/Nelmio/Alice/Fixtures/LoaderTest.php#L1260. I re-tested with the combination of template and co. but I couldn't reproduce your issue on alice end. Will retry with your set.\n. @Soullivaneuh sorted. I couldn't spot what caused the issue though.\nYou problems is actually an expected behaviour, you have:\nyaml\nPowerDNSBundle\\Entity\\PowerDNSDomain:\n    power_dns_domain (template):\n        name (unique): domain-<current()>.com\n    power_dns_domain_admin_{0..8} (extends power_dns_domain):\n        ownerId: 228\n    power_dns_domain_customer_{0..5} (extends power_dns_domain):\n        ownerId: 1\nwhich is equivalent to:\nyaml\nPowerDNSBundle\\Entity\\PowerDNSDomain:\n    power_dns_domain_admin_{0..8} (extends power_dns_domain):\n        ownerId: 228\n        name (unique): domain-<current()>.com\n    power_dns_domain_customer_{0..5} (extends power_dns_domain):\n        ownerId: 1\n        name (unique): domain-<current()>.com\nBut the scope of a unique value (except for arrays in 3.x), is the class, i.e. you are declaring that you want any PowerDNSBundle\\Entity\\PowerDNSDomain to have a unique name. However as you have the {0..5} range overlapping, so it will fail.. @Soullivaneuh they are still deprecated, unless it proves to be very easy, I don't plan to support it in v3, at least for the first iteration.\n. Not sure what you mean, hyphens are properly deprecated: https://github.com/nelmio/alice/blob/2.x/src/Nelmio/Alice/Fixtures/Fixture.php#L391\n. Closed via #435 and #434 \n. After looking at this again, this is the expected behaviour. Keys are not dropped in setProviderData(), because it's not alice responsibility to normalize the input, if you inject ['foo' => 'bar'] you should get that array, if you put ['bar'] idem. If you want a guarantee to have a clean array you should normalize it.\nIn 3.x, this behaviour won't change, you will have easier time to customize it if you want to custom accessor, but the default behaviour will remain unchanged.. I understand the problem. In 2.x I don't think this can be changed, this would be a BC break although I don't expect many people to encounter it.\nIn 3.x, Alice is relying on Symfony PropertyAccess for that as AFAIK it doesn't support this case of add($key, $value) out of the box like that either. It is however, far easier to support it. But as they are some performance impact (it requires to analyse the adder signature via reflection), I wouldn't do it out of the box either, rather let the user use a point of extension to deal with this issue (and the perf impact is likely to be way smaller that way as well, as you can go for a more in-house solution rather than a generic one).\n. >Is there any way to have Alice just call setProviderData instead of addProviderData?\nYes, in 2.x by re-ordering the populator methods, but that's rather painful. In 3.x it's easy to extend it via the link I gave you.\nI do understand it may not be the best thing in the world there, but the alternative is, besides technically difficult and complex, not something everyone wants either. I prefer to keep this behaviour consistent between 2.x and 3.x and just make it easier for people to change something at this level if they want to (which is the link I gave you).\nAs for the associative array/list problem, it is hard as PHP does not have proper structures for it.  A way would be to do a check if the keys of the array and array_keys(array_values($x)) would be identical, doable but not trivial. . I actually don't think this is doable, it would be a deprecation error without having any way to do something about as the persistence layer has been replaced by theofidry/alice-data-fixtures which is nelmio/alice 3.0+ compatible.. Closed via #607\n. Closing as this won't be part of Alice 2.x.\n. Closed via #608\n. > This will create 27 Contact objects.\nSo I guess you want to create all the possible fixtures with the input you gave is that right?\nTL;DR: no.\nYou somehow have a way to do it, stores this matrix as a parameter:\nyaml\nparameters:\n  contact_matrix:\n    lastnames: [Roe, Doe, Smith}\n    firstnames: [John, Jane, Paul]\n    dob: [1980-01-01, 1981-01-01, 1982-01-01]\nThen use a custom Faker data provider to be able to pick the right value and do something like this:\nyaml\nNameSpace\\Contact:\n    Contact_{1..27}:\n        lastname: <pickLastName(<{contact_matrix}>)>\n        firstname: <pickFirstName(<{contact_matrix}>, $lastname)>\n        dob: <pickDob(<{contact_matrix}>, $lastname, $firstname)>\nSo as you can see, you provider will have access to all the possible values, knows which row to look in and for firstname, as you know the possible values and the value of lastname, you can know which firstname pick.\nIt's the rough lines obviously and as you can see a bit of work. The reason being alice is not really meant to be used like that. That said, if you find something somewhat generic that can be re-used, we can consider merging it into the core or make a dedicate extension for alice.\n. Actually giving it another though a simpler thing would be to make everything in the custom provider: you store the possible values in there and you have a method counter, so that the first call of pickLastName() and pickFirstName() will return Roe and John, the second call will return Roe and Jane and so on... it will not be re-usable, but it will work for this use case.\n. You're welcome :)\n. Closed via #566 \n. Hm weird. I wouldn't expect '@stock-header_*' to null at all but to give a random reference. @tshelburne could you confirm that this would be the expected behaviour of the * operator (i.e. no null?)\n. Glad to hear it :)\n. Duplicate of https://github.com/nelmio/alice/issues/428. The issue is that the generated password has a @ which will make alice think this will be a reference.\n. Just use data providers instead. The reason why this has been deprecated is because there is a lot of cases with other more advanced features provided where this would not work well.\n. To some extend. There is some cases where the lexer and parser can't handle\nin v3 but it should cover most of the use cases. It's not my main focus for\nv3 to be honest, but the system in v3 will at least allow to enhance it\nlater on if someone is ready to work on it.\nOn Monday, 22 August 2016, thedamnedrhino notifications@github.com wrote:\n\nCreating custom Data Providers\nhttps://github.com/nelmio/alice/blob/2.x/doc/customizing-data-generation.md#custom-faker-data-providers\nfor a simple Nested call seems a little overkill for me. Are nested\nproviders going to be implemented in the near Future?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/490#issuecomment-241363856, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gQWMRJQ5iMI6deEm2jb3Crk9qRomks5qiW_tgaJpZM4Jj4Sg\n.\n. It is worth noting that in v3 nested calls are supported, e.g. <foo(<bar())> will work perfectly fine, mitigating greatly this issue.\n. I'm not really fond of the idea to be honest. If rolesList() was dynamic, this would cause problems in v3 because you have two steps: generating the list of fixtures and generating the objects described by fixtures. The result of the first step should be static to be cacheable, with your approach this would no longer be true without talking of the complexity it may bring.\n\nAn easy alternative for your example would be:\n``` yaml\nroles.yml\nAcme\\DemoBundle\\Role:\n    role{0..2}:\n        name: ')>'\n```\nassuming nested function works (it does not very well in v2), so another alternative would be:\n``` yaml\nroles.yml\nAcme\\DemoBundle\\Role:\n    role{0..2}:\n        name (unique): ''\n``\n.>  is the notation for calling the functionsomething, so` will not work and should even throw an error IMO. I am not sure why this is not the case in 2.x but it will throw an error for sure in 3.x.\nTo achieve what you want to do, you need to have a custom function to do the operations. It is a bit inconvenient and might be something to enhance in the future.\n. Update on the issue, this is easily doable by using the identity function: <(10 * 5)>. The only limitations are that the identity function only knows about references and variables: <(@user->favoriteNumber * $current)> (the <current()> is accessible via the $current variable).\n. Closed via #564 \n. > I thought the type hint checker was about instantiating an instance properly via constructor arguments before setting all the props.\nNo you are right except that it also applies to setters. In both cases, it involves check that the value set matches the typehint. The most common use case is for dates:\n``` php\npublic function testLoadCoercesDatesForDateTimeHints()\n    {\n        $res = $this->loadData([\n            self::GROUP => [\n                'group0' => [\n                    'creationDate' => '2012-01-05',\n                ],\n                'group1' => [\n                    'creationDate' => '',\n                ],\n            ],\n        ]);\n    $this->assertInstanceOf('DateTime', $res['group0']->getCreationDate());\n    $this->assertEquals('2012-01-05', $res['group0']->getCreationDate()->format('Y-m-d'));\n    $this->assertInstanceOf('DateTime', $res['group1']->getCreationDate());\n}\n\n```\n\nAs far as the BC problem, what exactly does it necessarily break? Without digging in, this seems like an \"internals\" question, not a library interface question.\n\nRight now you can do the following:\nyaml\nGroup:\n  group0:\n    creationDate: '2012-01-05'\n  group1:\n    creationDate: '<unixTime()>'\nWithout any change, this won't work in 3.x because the setter setCreationDate() expects a \\DateTime object. This works in 2.x thanks to the typehint checker right now, hence my suggestions from above.\n. True, there is already https://github.com/fzaninotto/Faker#fakerproviderdatetime. So we agree to deprecate it (the date feature) in 2.x and remove it for 3.x?\n. true, but you can always do <(new \\DateTimeImmutable('2012-01-05'))>\n. Closed via #559 \n. > it feels like those kinds of specific needs should really be handled with custom providers or custom parsers\nI feel the same, but well that was a supported feature in v2...\n\nif we are allowing registration of custom parsers\n\nEasier than ever ;)\n\nI'm not against the approach if you want to support it, but it seems like overdoing things to me. I imagine there are use-cases out there, but IMO, that's too much logic in a fixture file.\n\nThen are you ok to drop it for now and decide on what to do with this one after the first beta? It will either be: A) I find an easy way to support things like '<f(<g($baz, $faz)>, $arg)>' in which case the migration path is really easy, B) I don't find one and this feature will be completely deprecated in favour of a custom provider\n. Nested function support has been added in 3.x, so the correct way to write '<dateTimeBetween(\"yest\".\"erday\", strrev(\"omot\").\"rrow\")>' in 3.x is '<dateTimeBetween(<(\"yest\".\"erday\")>, <(strrev(\"omot\").\"rrow\")>)>'.\nThe only part left then is deprecating this behaviour in 2.x but I'm honestly lost at how to do that... It might be better to just document it. The user will have an exception right away in 3.x anyway.\n. Closed via #563\n. After sleeping on it, it's clear that this is the way that makes more sense. There is only one scenario I can think of where it would fail, it would be the one where an entity has a clone in a setter. I have no easy way to detect that, but I think it is fair to not expect alice to handle this case. Maybe in the future, we can add a flag to specify that entity X should be generated in one go to avoid this situation, i.e. let the user solve this issue on a case by case basis, as it has strong limitations and would break things for too many people to be switched on as the default.\nThat said I must say I was surprised that:\nyaml\nDummy:\n  dummy0:\n    relatedDummy: '@dummy*'\nworks. Thinking about it, this is perfectly valid, but it was a scenario I did not account for and that confused me.\n. Thank you @trappar :)\n. I had an idea along those lines if we wanted to support the fixture references in the identity expressions. But:\n1. I would call it a \"compromise\", because as for access to the variables, this is something very useful but that doesn't bring much complexity and relatively easy to handle (little risk of syntax conflicts, it feels relatively natural)\n2. If we were to do that there would still be a difference:\nyaml\nDummy:\n  dummy:\n    foo: 'bar'\n  dummy_with_identity:\n    foo: '<(@dummy->foo)>'\n  dummy_without_identity:\n    foo: '@dummy->foo'\nIn this example, @dummy->foo would mean get the foo property of @dummy, i.e. potentially via a getter. In the case of identity, if foo is private this would fail. This could still be ok as you would be able to use PHP to solve that:\nyaml\nDummy:\n  dummy:\n    foo: 'bar'\n  dummy_with_identity:\n    foo: '<(@dummy->getFoo())>'\n  dummy_without_identity:\n    foo: '@dummy->foo'\nHowever this is a subtle difference that can confuse the user.\nSo from your comment I guess you would be for supporting the references and I would be ok with it. But my other points still stands: where do we draw the line? I would be for supporting only variables and references, nothing else. As a result, never consider to support the following:\nyaml\nDummy:\n  dummy:\n    foo: 'bar'\n  dummy_with_identity:\n    foo: '<(50%? @dummy->foo)>'\nIdentity would be strictly limited to evaluating the expression as a PHP expression, with a scope, nothing more.\n. Closed via #560\n. Let's keep this issue in the backlog then and consider to add it only if we see a use case. We still have time before a stable release.\n. I actually think it's useless: you can already do that by decorating the object generator.. Closed via #557\n. > do you mean you feel like you can support it without the escaping?\nYeah in the case where @ is preceded by a non space string like a@.\n\nMaybe a missing reference shouldn't throw an error, but instead should throw a warning and attempt to set the value to the string literal\n\nIf we were to do that we would need to apply the same for variables. But I think throwing an exception makes it easier to spot than a warning.\n. @karser I updated the issue description (it's \\@ not @@), but I have yet to add the ability to automatically escape the @ character in a string.\n. @cadavre do you mind opening a new issue for it? I would prefer that rather than digging out that old issue :). According to the doc:\n``` yaml\nAppBundle\\Entity\\UserAccount:\n    UserAccount_{1..5}:\n        emailConfirmed: '80%? 1 : 0'\n        enabled: $emailConfirmed\nor\n    enabled: @self->emailConfirmed\n\n```\nIn the case of the second example, the difference is that it will try to retrieve the value via getter so the actual value might be different if you have a setter that changes your data.\n. Closing the issue, if you still have a question or an issue feel free to ask them or open a new issue.\n. Dashes are not supported. In 2.x they are not throwing an exception as it was not the case before, but they don't work very well in some cases (like yours). This is why it has been deprecated and will throw an exception in 3.x. If you log your PHP deprecation notices, you should see a message about it provided you are using alice 2.2.0+.\n. You're assuming right :) I won't go back on this one before Monday so if\nyou want to change a few things before feel free to. I don't expect the\nrelease of the beta before the middle or the end of next week.\nOn Saturday, 3 September 2016, Tim Shelburne notifications@github.com\nwrote:\n\nI'm assuming you mean the docs for master - I would go ahead and mark it\nwith \"This documentation is being updated for the v3 release, refer [here]\nfor current stable docs\".\nAs for this bit, go ahead and merge, and I'll submit a PR to clean up some\nof the language. Just ping me afterwards and I'll jump on it.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/pull/526#issuecomment-244555357, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gROBhcpoJKv6G8b4jUvo6Bux9rW7ks5qmZ1agaJpZM4J0TtT\n.\n. Closed via #562\n. \ud83d\udc4c \n. By the way if there is places where you believe it should be better explained please to hesitate to point them out.\n. Regarding the first one I find the syntax a bit confusing, maybe:\n\nyaml\nUser:\n  User{1..10, 2}:\n    #...\nThis could be done in 3.x by adding a denormalizer. PR are welcomed :)\nAs for the later one this syntax is already allowed, but as the order does not matter it makes no difference to have User1 first or User10.\n. > I agree that on the data level it makes no differences but on the database level it makes a difference. The natural order of the database will send me the first inserted record. In my example, I was hoping that the first record would User10, but it was User1.\nI'm not sure to understand the problem, if the order is important, then it should be re-ordered. It is extremely difficult to guarantee the order and there is several issues:\n- how do you deal with injected objects, should they come first or after?\n- the generation order is not the same as the declaration order, some objects requires other objects to be instantiated first\n- there is several extensibility points, e.g. to add custom flags, where you can alter the order of fixtures\nA solution is to order all the fixtures according to a certain criteria, but as this criteria is likely to be user specific and has a performance impact, I would rather not try to solve this in alice itself.\n. Edit regarding my last message:\n- I'm cool with this syntax\n- If a specific order is required, this should be done after loading the fixtures, either as a hook inside the loader, by decorating the loader or whatever. As the persistence is done after anyway, you're free to do whatever you want before the objects are persisted.\n. The full list if escaped values right now:\n- arrows: << => < and >> => > as a result:\n  - parameters: <<{param}>> => <{param}>\n  - functions: <<foo()>> => <foo()>\n- array: [[X]] => [X]\n- reference: @@ => @\n- variable: $$ => $\nLooking at it as a whole this notation makes more sense to me and I'm less sure on how to apply the \\ for the other, @tshelburne WDYT?\n. I'm fine with keeping the \\, but I just don't know how it should be applied for the other things :/\n. This will be supported in v3 but you won't get it work in 2.x and I don't think I'll spend time on back porting this feature either.\nAs of now the v3 kind of works, I'm in the middle of solving some edge cases but the first beta should come out soon (early or in the middle of next week).\n. I recommend you to wait for the first beta release for that but otherwise I\nhope the upgrade will go smoothly :)\nOn Sunday, 11 September 2016, PWalkow notifications@github.com wrote:\n\nThanks, I'll try to update version to v3. Hopefully there will be no big\nissues with that.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/545#issuecomment-246177711, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gW-rJI7xVFWrh5kIvsGGds7793ejks5qo_QXgaJpZM4J4Asc\n.\n. @something is a reference to a fixture with the ID something. However this something can be dynamic, i.e. if <current()> returns 10 then @user<current()> results in @user10. Also there's the * operator to apply a mask, e.g. @user* will pick a random fixture with an ID matching this mask.\n\nAs a rule <current()> works in \"collections\":\n``` yaml\nRange\nNelmio\\Entity\\Group:\n    group{1..10}:\n        owner: '@user' # will result in @user1 for @group1, @user2 for @group2 etc.\nList\nNelmio\\Entity\\Group:\n    group{foo, bar}:\n        owner: '@user' # will result in @userfoo for @groupfoo, @userbar for @groupbar etc.\n```\nDoes that clear up your confusion?\n. > I thought it was referencing the @ entity name/id somehow.\nNo that is @self :)\n. There is nothing built in to handle that, but it's still perfectly doable by using [custom providers](https://github.com/nelmio/alice/blob/2.x/doc/customizing-data-generation.md#custom-faker-data-providers. You can pass to it the list of available keys and the ID got to return a random key. If you need uniqueness, you can make store the generated values in your provider to ensure the random value picked will result in unique combination.\nNote however that you may have some issues with node_id depending of your entities behind (it can work with Doctrine if you are setting relationships correctly and not just passing the ID value).\n. Sorry I missed your message. Can you elaborate give the full stack for:\nProperty node is not defined for instance self\n? It should try to get the node property through a getter by using the Symfony PropertyAccess component.\nOtherwise you should be able to use $node which is the value of '@node_<numberBetween(1, 100)>'. Be careful still as if you are setting this value from a setter and you are changing the value in the setter, the node value stored in NoteTag can be different from $node.\n<uniqueTagForNode('@node_<numberBetween(1, 100)>')> should work, what error are you getting with it?\n. Ah I see, it's highly possible that this is a parsing error indeed. I'll try to look into it, but it's very likely that I can't do much about it: alice 2.x doesn't have a proper lexer so it is very hard to have some syntax right (issue addressed in 3.x).\nThis however should work:\nyaml\nMyBundle\\Entity\\NodeTag:\n    node_tag_{1..500}:\n        node: '@node_<numberBetween(1, 100)>'\n        tagKey: <uniqueTagForNode($node)>\n        tagValue: <words(3, true)>\n. No easy fix unfortunately. The solution in 2.x is to use faker providers in the meantime or the suggested solution above.. Thanks @hboomsma, is there any way to port that to 3.x as well?\n. Indeed my bad. Actually in 3.x, instead of relying on a in house logic for\nfinding the accessors, we are using Symfony PropertyAccessor (check in\nsrc/Generator/Hydrator). I have no idea if it can integrates with the\ninflector. If not, a solution I can see is to decorate the current Hydrator\nand on failure of the decorated one, try to make use of the inflector to\nfind the accessor.\nOn Thursday, 15 September 2016, Hidde Boomsma notifications@github.com\nwrote:\n\n@theofidry https://github.com/theofidry, I looked for any reference to\nInflector and singularize in the master branch, but I could not find any.\nSo I am not quite sure where to \"fix\" this for 3.x. If you can give me a\nhint, I am more then willing to help out.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/pull/548#issuecomment-247267198, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gYYEoomgV_iolLEUx-iiuBKlYAtDks5qqQCxgaJpZM4J70H3\n.\n. I need to update the RFC, the escaping is done by using the backslash (\\), i.e. foo\\@bar.com should work.\n\nFurther discussion should be done in #516 :)\n. Yes, unless I missed something, your HTML is a simple string, so you could have a simple Faker provider with an escape function that could return the string unchanged, e.g.:\nphp\nclass CustomProvider\n{\n  public function escape(string $string)\n  {\n    return $string;\n  }\n}\nYour functions are parsed by FunctionTokenParser. As you can see in it, it's doing special things to figure out how to get the arguments and if they need to be parsed or not. You probably could have your own token parser decorating this one and if the function name is escape, then skip the parsing bit.\nHowever I release this is not very easy not convenient and it's probably one of the most useful custom point of extension. IMO we could probably split the current FunctionTokenParser by having an ArgumentParserInterface. It adds a bit of complexity again, but it's the easiest way I see to make it more or less painless for the user to have more freedom on how to parse the arguments.\nAnother solution is to give up this special extension point (i.e. not complicating the abstraction layer to make it easier) and instead have an escape function natively in Alice (which I would like to have tbh. It would solve both #516 and #428).\nWDYT @tshelburne?\n. @tshelburne with or without a proper extension point?\n. Maybe extending the identity parsing. Not convinced though\nOn Friday, 23 September 2016, Tim Shelburne notifications@github.com\nwrote:\n\nI don't think we need to offer the extension yet - escape is common\nenough that it should be in the library, and we can keep the interface\nsimple until it's really needed. Did you have other use-cases in mind for\ncustom parsing? That seems like a pretty deep dependency.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/569#issuecomment-249301325, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gZobP0gGSBgGenx6wRxOGM6Mvq7hks5qtD4VgaJpZM4KE6yA\n.\n. @kcivey I actually didn't get the chance to try, but it should work.. Maybe the error message can be worked a bit, but I think it should stay an\nerror right of the bat.\n\nWhat do you mean by messy?\nOn Wed, 15 Feb 2017 at 17:20, Keith C. Ivey notifications@github.com\nwrote:\n\nYes, using identity works, but it seems horribly messy. Without it I get\nthe \"Could not lex the value\" error when it runs into a <.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/569#issuecomment-280076126, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gRxUB9Wmnrm_9mxp9Jtx6BW3xBX9ks5rczPBgaJpZM4KE6yA\n.\n. #9 is quite old and a lot of new features have been added since then, but I'll look if there's a better way to use HTML. I scrapped my head around it and I see only two solutions:\n\n\nhave a special syntax to escape a full string, but it's gonna be ugly as you have the risk of having the escaped string containing the ending delimiter for the escape, so it won't escape properly the string\nescape manually everything (a bit tedious)\nhave a faker provider function to generate your html (by far the easiest way). Thanks @andrewjt71!\n. Thanks for the PR @1ma. I think I'll do a release in the 2-3 coming weeks when I'll have some tasks from https://github.com/nelmio/alice/milestone/1 merged as well.\n. Oh my, Indeed 2.2 is a bit old. Unfortunately I'm quite busy atm so like for the latests PR I can do it in 2-3w. I'll probably add a couple of more deprecations for 2.x and features for 3.x as well for those.\n\nYou can safely use 2.x@dev in the meantime or a specific commit if stability is an issue... sorry for the delay.. You have several options:\n- let your ORM do it when you are persisting your entities (2.x or 3.x it won't change, the only difference is that the ORM integration is no longer done in alice 3.x but you have libraries like https://github.com/theofidry/AliceDataFixtures to do it instead)\n- create the ID at instantiation time: alice uses (and you can change it) your constructor so you can do it there\n- have a custom Faker provider to do it yourself\n. The error looks pretty straightforward to me, you are setting an integer to Product#category here where I guess you expect a Category instead instead, so you could use @category* for example (depends on your objects behind).\n. @napestershine did that solve your issue?\n. I can guess it's a mapping issue, as Doctrine ODM don't know who to store a \\MongoId document, but unfortunately I'm not familiar enough with Doctrine ODM to know how to fix it \ud83d\ude15. That said, it's a problem with your persistence layer and your objects, not alice. It will fail all the same if you were to do it manually.\n. @appeltaert just to make sure I understood the problem correctly: you have two types of relations between Company and Medium, but you can set properly both because of the \"accessor limitation\", i.e. if you have setMedium and addMedium each one for a different relation, alice will pick only one. Is that correct?\nAssuming the above is correct, in alice 2.x, I would flat out say it's very hard, most likely if you can do it in a processor, that's cool, otherwise I'm not sure where you can do it. Processors have hooks for pre and post persist + flush.\nIn Alice 3.x I think you can have more flexibility regarding this issue. It's planned to support calling arbitrary methods: https://github.com/nelmio/alice/issues/388 (end of the issue description). Planned but not added yet. Also note that in Alice 3.x things change quite a lot (for the better), and the persistence is done in https://github.com/theofidry/AliceDataFixtures instead. HautelookAliceBundle 2.0 beta has been out using both alice 3.x and AliceDataFixtures if you want to give it a try.\n. ``` yaml\nCompany:\n    acme:\n        media: [ '@logo', '@medium*' ]\n        logo: '@logo'\nMedium:\n    logo:\n        company: '@acme'\n```\nShould do the trick. \n\nSo the logo needs to be persisted first for its m2o relation to Company..\n\nAFAIK Doctrine ORM handles such cases, which would not be the case of all ORM (e.g. Eloquent ORM). I think you can cover this case with both HautelookAliceBundle 1.x and 2.x.\n. > I guess i could fix it indeed with an additional setter\nI can't say I don't have your PHP classes :P How would you do it in plain PHP? Also note that if you don't like the idea to add an accessor just for it, you can use the constructor instead (and make use of the __construct notation).\n\nWould this flush() the changes in the company reference though?\n\nThis extra step is done before any persistence, so yeah.\n\nIs it possible to call a service or something in the 'after population step'?\n\nThat's the \"configurator\" section of the #388, nothing decided yet at this point.\nIf you still have doubts, given me:\n- you PHP classes\n- the fixtures\n- how you would do it in plain PHP\n. No worries, any help is welcomed I need feedback for the beta releases ;)\n. Sorry for the lack of feedback I completely missed the issue. I think that's a cool idea, I don't think I'll have time to work on it but it would be interesting to try to integrate it before the stable release, to see if the system is flexible enough for this kind of customization.\n. > I think this is a good move, a lot of open issues/tasks i saw on that 3.0 road map involves the lexer also right? Chances are that most new features/changes are going to involve the lexer.\nHm not so much actually. The lexer is involved as soon as something touches the Expression Language, i.e. the syntax to declare values. The parsing for the IDs or class names is done by the FlagParserInterface, which does not involve the lexer but good old regexes (which is more than enough there).\nThe main features left on my side:\n- Some benchmarking to see if there's things to improve and give the possibility to any contributor to quickly do a profile if he wants to check himself\n- Fix any obvious bottleneck\n- Finish https://github.com/nelmio/alice/issues/388\n- Finish the doc\n- Check if we can do a caching of some sort:\n  - Caching the fixture set resulting from the FixtureBuilder (see https://github.com/nelmio/alice/blob/master/CONTRIBUTING.md#fixturebuilder), which is invariant\n  - Caching the generated set. In some cases you don't want to generate a new one with different values (as you may not care), which would greatly improve performances for HautelookAliceBundle for example\n- A few other issues left and right\n. There is a few features I'm not aiming for the 3.0 stable release: if someone is ready to work on them before that I would welcome it obviously, but it's not my priority/goal.\nI would love #601 to be done before the stable release as well, but I have little time to investigate how it would work (the list above is already more than enough :P)\n. > It is possible that it takes someone more acquainted with the internals to really pick this up\nFor now there's only me \ud83d\ude1b I realise it's a big library which makes it not very easy to dig it, but I tried my best to make the code and doc regarding it as clear as possible. If you find something confusing while looking at something, don't hesitate to report it!\n. Hey @volneivolff.\nI must say I'm not really sure on how to take your issue. There is tests for most scenario, if you are encountering such an issue it's not because the library is outright broken (otherwise you would not have 3K+ of daily downloads). So unless you  are willing to provide a bit more context on how you encountered this, I cannot help you.\n. Indeed functions can't be called in parameters for now (tbh it was untested in 2.x which is why I completely missed it and wasn't aware this was working), and I'm not sure if this should be ported or not to be honest, it does complexify a lot the parameters resolution as it's hard to deal with successive function calls <f()> <g()> and nested ones <f(<g()>, <z()>)>\n. An easy workaround would be to have a \"dummy\" object:\n``` yaml\nstdClass:\n  parameters:\n    createdAt: \nMyBundle\\Model\\Character:\n    character (template):\n        __construct: ['@parameters->createdAt']\n```\n@tshelburne this makes me wonder if the system of parameters is actually useful now... :P\n. I actually think it increase the complexity of things for no reason. Might be a nice to have but as the workaround is trivial, I prefer not to bother to.. Closed in favour of #670. Yeah removing the support for without it doesn't make sense IMO\n. As explained in #599, this actually cannot be done \ud83d\ude22 \n. (int) <foo()> with foo() which is potentially a more complex expression and a string integer, i.e. '100' instead of 100, doesn't work. This is something that could be added to the Expression Language but this would make it even more complex and the less I touch it the better whereas using a faker data provider is dead simple and everything is well-oiled.\n. I agree this does looks cooler, but the very idea of having to touch that part of the code put me off, not that it's poorly implemented or unmaintainable (heck, that's the most tested part of the app), but lexing/parsing is tedious and I don't like regexes :P\nThat said if someone is ready to work on it later, we could always deprecate the faker in favour of those inline notations.\n. The answer is yes and no. In HautelookAliceBundle you could probably append the fixtures, or you could find a way to, when you load fixtures, get the list of IDs to delete only them after if you want to reload the fixtures. But that may be a bit tedious, another way, which looks easier to me, is to generate fixtures for this existing data, https://github.com/trappar/AliceGenerator may help for that.\n. In 2.x this is very buggy. This has been solved in 3.x although there is two differences in this regard in 3.x:\n- The persistence layer has been removed, so you'll have to look at https://github.com/theofidry/AliceDataFixtures instead\n- In the current loaders implementation, the entity manager is cleared so there won't be any reference (you'll have to recreate them)\n. @mpdude the syntax is exactly the one you gave. The problem in 2.x is that there is no proper lexer/parser so it hard to get things like <foo($arg1, <bar($arg2)>)> right. I couldn't figure an easy way to fix and much less without BC breaks, which is one of the reasons why things changed drastically internally in 3.x.\n. You can also ping me on the (Gitter) chat (of HautelookAliceBundle) if you want more details\n. Ok big bummer, this cannot be done unless in a very limited context:\n- In the case where the factory is a service, the service is resolved at generation time while we need info (reflection) on the factory method during the denormalization\n- In the case of a function, the point above is even more true\n- The two points above are still true (although becomes doable) if the factory/method is a static call on another function\nI'm also not found of the idea of having it working in 1 case and not elsewhere, that would only be confusing IMO.\n. @Hywan as the maintainer of the HoaCompiler, WDYT of this choice here, is it something the compiler would be good at?\n. Thanks for the detailed answer @Hywan :)\nI hope I'll have time to look into this soon. To be completely transparent this part is not exactly my priority now as I have still quite a lot to do for alice, AliceDataFixtures and HautelookAliceBundle. The priority being stabilising the three libraries and easing the migration.\nI would love however to have the time and energy to look into it before the stable release, it will avoid to go stable with the whole Expression Language marked as internal. That said, maybe someone else is ready to tackle this RFC :P\n. Hehe I need to update the doc, but otherwise I think for a developer, the best doc is ParserIntegrationTest. Anything internally on how to generate this result is internal and can be completely changed.\nThere is definitely a scenario or two missing, I tried to be as exhaustive as possible but well I'm not a machine and the sheer number of combinations not coverable either, but it gives a good base I would say.\n. That's the thing there is no proper grammar system. Basically there's a lexer (which has its own share of tests) which transforms expressions into Tokens like:\nphp\nyield '[Escaped arrow] surrounded' => [\n            'foo \\< bar \\> baz', // input\n            [ // expected\n                new Token('foo ', new TokenType(TokenType::STRING_TYPE)),\n                new Token('\\<', new TokenType(TokenType::ESCAPED_VALUE_TYPE)),\n                new Token(' bar ', new TokenType(TokenType::STRING_TYPE)),\n                new Token('\\>', new TokenType(TokenType::ESCAPED_VALUE_TYPE)),\n                new Token(' baz', new TokenType(TokenType::STRING_TYPE)),\n            ],\n        ];\nAnd then the parser will, depending of the type of the token, parse the value accordingly depending of the token type.\nSo as of now, it's pretty manual hence the desire to change to something more standard :)\n. Yep, #377 which may be slightly outdated right now and ParserIntegrationTest. Tests being a big part of the doc here for the better or the worst :/\n. I hope to have finished most of it by the end of the month. Then it will be a few updates or bugfixes here and there and let it live for 2-3 months before a stable release.\n. @Hywan I took a glance this weekend for the Compiler, looks like a good solution to replace the in-house lexer. I still have a few issues with your PP language but I think it's just a matter of getting familiar with it. I'm not sure if I should do it after or before the stable release yet. A little question though: why are hoa projects not semver?. Cool :) I'll push a POC soon to be able to discuss on it then :). >So this is deprecated in 2.3, meaning phpunit will fail\nPHPUnit will fail only if you configure it to fail with deprecation errors.\n\nbut its not possible to use the new syntax in 2.3 so there is no way of avoiding this deprecation...\n\nExact, you need to upgrade to fix it. I'll gladly accept any PR to back-port that feature in 2.3 allowing a smoother upgrade, but I'm really not willing to work on it.. Thanks for the report! I'll take a better look at that later. Meanwhile, would it be possible to have a sample of your fixtures where you're using it?\n. Indeed there is no reason why it shouldn't work in that context, I'll double check there is not a test for it somewhere which would reveal to be falsy and need to be changed\n. Closing in favour of #619\n. Thanks @karser!\n. If you prefer something somewhat stable you can rely on nelmio/alice:^3.0@beta, the 3.0.0-beta.1 has been released :)\n. Hm, it's a bit of an edge case, but I think the easiest way would be to load a PHP array rather than a YAML file, to make the 'user_{1..10} string dynamic. This should work on both 2.x and 3.x.\nI'm not really in favour of adding natively an easier way to do that, as it would surely be done by allowing the usage of parameters in the fixture IDs. Besides being a pain to handle, it's quite dangerous as well: alice is not designed to generate dozen of thousands of objects (even if 3.x should perform better here) and much less the Doctrine if you are using it in 2.x.\n. Yes, the YAML format is parsed as a regular PHP array. Everything you use\nin YAML works in PHP :) See https://github.com/nelmio/alice#example for an example\nOn Thursday, 17 November 2016, Bart Wegrzyn notifications@github.com\nwrote:\n\n@theofidry https://github.com/theofidry Thanks for the answer!\nIs the user_{1..10} syntax supported in PHP array fixtures, or should I\ngenerate the full array myself?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/621#issuecomment-261144558, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76geF93oOZJNqXWbqYoxvyQGPly89Iks5q-8h8gaJpZM4K0m7i\n.\n. \ud83d\ude04 \n. Note that the cache needs to take into account wether or not the code source for the entities changed which makes it extremely complicated. Maybe an easier way would be to not care about that and allow the user to clear the cache manually when necessary.. Although interesting, this shouldn't be needed. For example if you consider the following scenario:\n\nphp\n[\n    Dummy::class => [\n        'dummy' => [\n            'title' => '@another_dummy->title'\n        ],\n        'another_dummy (priority)' => [\n            '__construct' => [\n                'create' => [\n                    'Alice',\n                    0,\n                ],\n            ],\n            '__calls' => [\n                [\n                    'setTitle' => [\n                        'Bob'\n                    ],\n                ],\n            ],\n        ],\n    ],\n],\nyou can see here that dummy will need the title property of another_dummy. If another_dummy is not complete yet when dummy requires its title, the it will get the value Alice, and if another_dummy was complete Bob.\nWith the current implementation, when @dummy->title is being resolved, the resolver tries to get the complete another_dummy, so no need for the priority flag.. Sure. The idea is that you may have methods (be it from another service, a static method, or a method and the instance) which returns the result, for example:\n``` php\nfinal class Dummy\n{\n    public function __construct($param)\n    {\n        //...\n    }\npublic function withParam($param): self\n{\n    $clone = clone $this;\n    $clone->param = $param;\n\n    return $clone;\n}\n\n}\n```\n``` yaml\nDummy:\n     dummy:\n         __construct: ['foo']\n         __calls:\n             - (configurator) withParam: ['bar']\nAlternative to the configurator syntax:\nDummy:\n     dummy:\n         __construct: ['foo']\n         __configurator:\n             - withParam: ['bar']\n```\nIf you take the example above, assuming __calls works (I still have to implement it), the fixture would be equivalent to new Dummy('foo'), because Dummy#withParam() doesn't modify the fixture itself, but returns the modified instance.\nI'm aware this is a really dumb example, but there is a few use cases when using immutable objects and it was before something you could achieve with __setter which gave you all the flexibility you needed, although much more manual.\n. @tshelburne I added the explanation in a rush, if it's not clear enough let me know I'll rephrase it when I have some time\n. > if a dev already has these immutable functions as part of the interface, this just allows them to call it and replace the old object in the set with the new one? That seems a bit over-driven by convention, but I don't have a strong disagreement.\nKind of. The idea here is not to be to opinionated and give room for some flexibility for weird stuff without having too much of an impact. I don't expect much people to benefit from it, but I also don't think the cost for supporting it is too high.\n@ogizanagi to be fair, the second option for the implementation definitely requires more insight  about the internals. But if you happen to check a bit of the code and find some WTF?!, don't hesitate to raise them. I tried to give a bit of the global architecture and overview in CONTRIBUTING.md, but I'm sure to have missed out a few thing. I do want to try to make the code accessible so any third part POV on something is welcome even if it sounds a bit silly :)\n. Closing in favour of https://github.com/nelmio/alice/issues/388 which has been updated. And with that, #388 will be the only remaining issue to be able to release 3.0.0 :). > I might clean up some of the language for the upgrade path prior to release\nI'll try to work a lot of the doc in the coming days, so a check on the language would be welcome after that :P\nI also would love if as the person behind the second version, would be able to point out a few hardship on the upgrade path. But I guess this could require to actually try to upgrade a project from 2.x to 3.x which might take too much of your time though.\n\nI'm in the midst of a big feature build with work, so I might need to put it off for a bit.\n\nNo urgency. Honestly I'm thinking of boosting things up a bit in the two coming weeks, but I'm off the whole month in December \ud83d\ude0e\n. @tshelburne I've updated the doc. I would like you to do a quick check but otherwise I think we can do a release for both 3.0.0-beta.2 and 2.2.3.. Perfect for me :) I'll find some time in 2-3 week to finish the\nrequirements for the stable release, mainly try Hoacompiler for the\nlexer/parser (most of the issues are coming from this part) and the cache\nlayer which looks pretty good performance wise.\nOn Thu, 2 Feb 2017 at 20:27, Tim Shelburne notifications@github.com wrote:\n\n@theofidry https://github.com/theofidry I will review this weekend and\npush up a revision PR. Works?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/630#issuecomment-277073336, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gTcAjJEskI8AeG_-o54OJI7JgBpNks5rYjw0gaJpZM4K1F6c\n.\n. Ah damn yes I need to update theofidry/alice-data-fixtures and hautelook/alice-bundle.\n\nI updated the name in the dev-master, those two libraries are using the old name. I recommend you to simply update nelmio/alice to @beta instead of @dev in the meantime\n. If that solved the issue, don't forget to close the issue ;) Meanwhile I've updated the doc to use the beta instead of the dev version, it's definitely more stable that way.\n. Could you past me those versions? The problem should have occurred on dev-master only but I released a new tag yesterday. I've released a new tag for both theofidry/alice-data-fixtures and hautelook/alice-bundle which should have solved the problem. can you try to update them all?. you need to update all of them at the same time, they are all outdated by 1 version. Otherwise reverting and staying on your lock deps should also be ok. Glad to help :). Indeed I can see this being a problem. Do you want to try to provide a patch for it? I think this can be achieved with reflection:\n``` php\n// some magic here to determine if the $method accepts an array\n// the magic being:\n$methodRefl = (new \\ReflectionObject($object))->getMethod('foo');\n$parameterRefl = $methodRefl->getParameters()[0];\nif ($parameterRefl->isArray()) {\n  // ...\n} else {\n  // ...\n}\n```\nThere is a few gotcha:\n- Watch for the case where there is no param\n- Add a test for both cases\n- Eventually add that change to 3.x as well (the master branch)\nBut overall, this shouldn't be too hard :)\n. No this should work, I'll look into it. @zajca the correct syntax for yours would be <randomElement(<(\\MyBundle\\Entity\\MyEntity::getAvailableDomainTypes())>)>, unlike in 2.x, there is a few things that changes in 3.x due to introducing a proper lexer. I wish I could keep the BC at this level, but there is far too much edge cases :/. Duplicate of #663.. @rouflak did you retry with the latest version? I believed I fixed that one already.. Yeah that's possible :) there is tests for the array and I try to do most\nof the combinations, but it's a bit hard to cover all the cases :P\nI'll have a look in the coming days, unless you are willing to give it a\ntry. I expect it to be just a matter of playing with reflexes in the Lexer\nOn Thu, 6 Apr 2017 at 05:41, Dominic Scheirlinck notifications@github.com\nwrote:\n\nOne workaround is to use an array parameter, which doesn't make the lexer\nspew:\nparameters:\n  planets:\n    - mercury\n    - venus\n    - earth\nType:\n  name:\n    planet: \")>\"\nI also note there's no test case for a literal array (\"\") in the LexerIntegrationTest.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/645#issuecomment-292067265, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gfrwlGHMcSolhBOKJbkyB5QfDRXdks5rtG0TgaJpZM4K6dHo\n.\n. <randomElement(<(array('facebook','instagram','vkontakte'))>)> might work. Better go for @dominics' solution then or submit a PR to make it work :/. Thanks :) Take a peak at the contribution guide if you need some hints on where are different stuff, you can also reach me out on Slack (the channel is on the readme). It should be a link on the readme on the Slack badge.\n\nRegarding your other question yes :) IIRC there is a github contributing\nguide  which gives a good example. You'll need to fork the project, push\nyour changes on it and open a pull request.\nSorry I can't provide any link from my phone :/\nOn Mon, 31 Jul 2017 at 16:45, marina-endouble notifications@github.com\nwrote:\n\nSorry I didn't find your slack channel mention :P\nBut just one question: should I create a PR via fork? I'm asking as now it\ndoesn't let me push my branch in alice repo directly\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/645#issuecomment-319109901, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gRpPUcxVHBJhMzU1_c0IL92T7TI2ks5sTfZ9gaJpZM4K6dHo\n.\n. Yes, it's not specific to alice but rather YAML, see http://yaml-online-parser.appspot.com/?url=http%3A%2F%2F. To do what you want, you should do:\n\n```yaml\nNelmio\\Entity\\User:\n    user{1..10}:\n        username: ''\n        fullname: ' '\n        birthDate: ''\n        email: ''\n        favoriteNumber: '50%? '\nuser_test:\n    username: '<username()>'\n    fullname: '<firstName()> <lastName()>'\n    birthDate: '<date()>'\n    email: '<email()>'\n    favoriteNumber: '50%? <numberBetween(1, 200)>'\n\n```. no worries :). I think this is related to #543 . Sorry https://github.com/nelmio/alice/issues/569: basically having a function where the content is escaped automatically.. Oh I see, indeed it's completely different then. I think it's linked to using numerical numbers in the function name.. You're welcome :). I think you can do it by using variable references:\n```yaml\nAppBundle\\Entity\\Venue:\n  venue_{0..9}:\n    name (unique): ''\n    address: ''\n    description: ''\n    maxSpace: ''\nAppBundle\\Entity\\Event:\n  event_{0..499}:\n    venue: '@venue*'\n    # ...\n    totalTickets: 'maxSpace)>'\n```\nThis should work, but I may not have accounted for that in the Expression Language... But if it doesn't, it something that should be added. Should be $venue not $venue*, $venue is to refer to the value affected for the venue property (note that it's different from @self->venue for example.\nI'm not sure I want to give support for this thing with the current Expression Language, maybe this would be more easily doable with #601.\nMeanwhile, an easy although less elegant way is to use a faker provider:\nphp\nclass EventProvider\n{\n    public function maxSpace(Venue $venue)\n    {\n        return $venue->getMaxSpace();\n    }\n}\nJust thought about this, maybe the following would work:\nyaml\ntotalTickets: '<numberBetween(150, <($venue->maxSpace)>)>'. @cierzniak sorry to come back a bit late on it, I think https://github.com/nelmio/alice/issues/648#issuecomment-264138958 should work on it, the error you get:\n\nCannot access private property AppBundle\\Entity\\Venue::$maxSpace\n\nSeems to indicate there is no getter for that value. Stupid of me: I assumed it was in 3.x but it works fine there, it's a problem of 2.x which doesn't support the $vanue*->maxSpace. It may be possible to fix it, but that's what 3.x is for really :). Closing this one. I'm letting the original issue #627 but I have no interest in continuing the PR so this is unlikely to happen unless someone is willing continue it.. Hm hard to tell, I would expect it to work. I would recommend you to try debuging the PropertyHydrator, it's using Symfony PropertyAccess under the hood. nevermind the problem is that you have society: '<numberBeetween(1, 3)x @society, so you get an array of Society. The Symfony PropertyAccess will not iterate over your collection to do X calls of addSociety() but expects to find a setSocieties() instead.\nI can only suggest you the following:\n\nAdd a method setSocieties()\nRegister a custom hydrator (you just need to decorate the existing property hydrator and do what you want in some cases and using the decorated one in the other)\n\nI thought of adding support for it at some point, but it comes with with a performance cost for something that requires domain knowledge and can be easily fixed. If you feel strongly about it, you may still try a PR and show a blackfire profile, if the diff is not big, I'll gladly accept it.. Good point, not sure if it's not what's already done but will double check :). @mehmetsoylucom I'm not sure to follow, aren't the examples enough? If you are asking for the service name (it's true that it should be added to the doc), it's nelmio_alice.file_loader cf. https://github.com/nelmio/alice/blob/master/src/Bridge/Symfony/Resources/config/loader.xml.. A workaround would be:\nyaml\nitem_{1..10}:\n    pic: \"picture-<regexify(<('0[1-9]|1[0-2]'))>>.png\"\nping @robertosanval. @guiyomh your issue seems different, looks like one of your property is an array where you expected it to be a string.. @robertosanval well actually makes sense, as the arrays need to be escaped:\nyaml\nitem_{1..10}:\n    pic: \"picture-<regexify('0\\[1-9]|1\\[0-2]')>.png\". I certainly didn't expect it to be evaluated each time. @tshelburne is it the desired behaviour? I'm kinda surprise by it. Maybe I could fix it in 2.x but at the same time this feature has been around for a while and maybe some people are relying on it, so fixing it would be a BC break.... Fine by me :). Closed by #689 and #688.. @jackbentley which version or alice are you using?. Did you try to escape it with \\%? If it doesn't work indeed it's something that needs to be patched.. Thanks for the PR @alekitto, that's some big work :) There is a few changes still to do, but the hardest has been made.\nHow was the dive in the code? I tried to make it readable but if you have some feedbacks and things that looked really weird don't hesitate to point them out!. >The only thing that was unclear to me is where to find services definitions for Symfony: I didn't understand that the caller was a service and not instantiated from the Loader. Have I missed something on the doc?\nThe services can be found in src/Bridge/Symfony/Resources/config. Basically NativeLoader is a loader to be able to easily use alice out of the box, without any DIC. The Symfony bridge however ensures everything is registered as services to the Symfony DIC (via the bundle NelmioAliceBundle) to be able to take advantage of the features the DIC provides.\nIt's like a traditional bundle, but shipped here instead of a dedicated library (it's easier for maintenance on my end).. @alekitto tell me when you need a last review, AFAICS there's only one comment left and should be ready to ship.. Thanks very much @alekitto, that's a nice one :). @aistis- can you give the which beta version is being used as well? (there is 3 beta releases) If you're not sure, the version hash will do. Thanks, I'll try to have a look shortly. I'm surprised it's missing but that's how it looks.. @aistis- it should work on 3.x@dev now :). Thanks you @alekitto . Duplicate of https://github.com/nelmio/alice/issues/585.\nThis indeed should be fixed, just keep in mind that 0 and 100 are valid values for $quantifier. It looks dumb to have:\nyaml\nNelmio\\Entity\\User:\n    user{1..10}:\n        favoriteNumber: '0%? <numberBetween(1, 200)>'\nbut it could be the result of an expression:\nyaml\nNelmio\\Entity\\User:\n    user{1..10}:\n        favoriteNumber: '<customFakerProvider($current)>%? <numberBetween(1, 200)>'. Would it be possible to add a test for it (the 2 extremums and one fixed non-extrema value)? You could mock mt_randvia https://github.com/php-mock/php-mock or even manually cf. http://marcelog.github.io/articles/php_mock_global_functions_for_unit_tests_with_phpunit.html. Thanks :). Nice! Have you tried to see if it makes the tests fail as expected without the fix?. Yes this is expected. It used to be supported in 2.x but has been deprecated and completely removed in 3.x. I believe alice shouldn't try to assume too much about your objects: accessing and setting a private variable is for me something that can be dangerous, as such it should not be done by default.\nThere is two ways to go:\n\nOverriding the property accessor used by Alice (if using NativeLoader look where it is created and override that method, if you are using Symfony override the service declaration)\nDeclaring a custom hydrator, see https://github.com/nelmio/alice/blob/master/doc/advanced-guide.md#custom-accessor.. You're welcome :). Hi @clemf, could you tell me which version you are using please?. Can you try without the quotes? If this doesn't work, unless someone is willing to look into it I don't think this is gonna be fixed in 2.x. I'm only actively maintaining 3.x and I don't really have enough resources to fix much in 2.x :disappointed: . Not yet. The API is rather stable, but there is still some internals not fixed yet. I guess the quotes trick didn't work? Alternatively, you could leverage a custom Faker provider, not the best thing ever but at least it would work.. Did you try to quote the whole thing? Sf YAML parser should definitely not die on the @ in this scenario. Yeah, this happens when you have:\n\nyaml\nstdClass:\n  dummy:\n    foo: @bar # correct value should have been `'@bar'`\nBut that's a YAML thing, not much of alice there :). Hi! Could you please give more info on which version of alice and AliceBundle you are using please as well as the files in which you are declaring your entities? Otherwise what you are showing is clearly expected to work. Indeed you can see here that it only catch UnresolvableValueException, but it should also catch FixtureNotFoundException.\nActually another workaround, more correct semantically, would be to have a sub FixtureNotFound implementing UnresolvableValueException used in the context of resolvers.\n@ossinkine could you send a PR for that?. The patch has been released in nelmio/alice v3.0.0-beta.5. @nietzcheson please double check that this solves your issue :). >Maybe we should add a --prefer-lowest build in test matrix?\nDefinitely. I should have done that long ago already. Do you mind adding one within this PR? You should have some examples in https://github.com/theofidry/AliceDataFixtures or https://github.com/hautelook/AliceBundle. I guess property access is not the only one at the wrong version :/. I'm cool with that. Although I would be tempted to say the dependencies of ockcyp/covers-validator should not matter to us and ideally it should be included as a phar but well, let's be pragmatic.. Thanks :). Is there anything to do at all? If you are using Sf Yaml 3.2 you should be able to use them with alice as well.. Well, I guess I'll need to look into it. In the meantime <(AppBundle\\Enum\\CampaignType::GOOGLE_ADWORDS)> or something similar should work.. >Shall we rename protected createBuiltIn. to protected create. instead?\nYeah, makes sense. Let's do it in this PR as well. Cheers. Hi @robertkabat. No you read the doc fine, that may be a bug. Are you using HautelookAliceBundle 1.x or 2.x? And NelmioAlice 2.x or 3.x?\nPotential duplicate of https://github.com/hautelook/AliceBundle/issues/314. Hm, not sure then without having a bit more code to bite to. That said you might want to take a look at https://github.com/hautelook/AliceBundle/blob/1.x/src/Alice/DataFixtures/Loader.php, that's what it is really.. There is two things bugging me in your code:\n\nWhat about the order in which the files are loaded?\nI can't remember how exactly the loader keep references of the objects between each loading. I think the loader above can help you with that as well.\n\nFrom what I see, that's the two leads I can give you :). Hm, might also have to do with Doctrine then: maybe an entity is detached at some point and introduce as a new one... I can't say much more at that point :). @robertkabat any news here?. @vgeyer I think this is a different bug (it's in 2.x not 3.x). I think your issue was related to https://github.com/nelmio/alice/pull/883. Unless there is new input, in which case feel free to open a new issue with a reproducer, I'll be closing this one. Nice! However as there is no integration tests for the persistence layer, make sure to test it properly on your end please :)\nAlso any interest in porting this to Alice 3.x? i.e. adding an adapter in https://github.com/theofidry/AliceDataFixtures.. That's a nice workaround :)\nThat's quite possible, I remember coming across an issue along those lines. If it has not been fixed it can be one of the following reasons:\n\nI was too busy with 3.x, I just made sure it's fixed in 3.x but couldn't find the time to fix it in 2.x as well\nThere was an issue with fixing it: either way too complex or not possible without BC breaks\n\nI'm unfortunately not willing to maintain 2.x anymore (PR/issues are still managed, but I'm not working actively on it), mostly because 2.x is very hard to maintain and I have far too little time (this is why 3.x, besides addressing some architectural problems of 2.x, is way more tested and I believe is way easier to maintain).\nSo TL:DR; either find a fix and submit a PR, or continue with your workaround.\nNB: sorry if that sounds harsh, I just have not enough time for it \ud83d\ude22 . In the meantime I still thinks this should be documented. Careful though as you are using the doc of master, which is for 3.x, instead of 2.x.. @damienalexandre the error looks weird to me, I'll look into it. However you seem to misunderstand something:\nyaml\nB:\n    b_template (template):\n        slug: '<slug()>'\n    b{1..20} (extends b_template):\n        packages: '@a{1..100}' # is equivalent to say pick one randomly in [@1, ..., @100]\nc.f. https://github.com/nelmio/alice/blob/master/doc/advanced-guide.md#references\nso I assume what you wanted to do was actually:\nyaml\nB:\n    b_template (template):\n        slug: '<slug()>'\n    b{1..20} (extends b_template):\n        packages:\n                - '@a{1..100}'\n                - '@a{1..100}'\n                - '@a{1..100}'\nor better:\nyaml\nB:\n    b_template (template):\n        slug: '<slug()>'\n    b{1..20} (extends b_template):\n        packages: '5x @a{1..100}' # eq as the above but ensures there's 5 items\nIf you want a random number of elements:\nyaml\nB:\n    b_template (template):\n        slug: '<slug()>'\n    b{1..20} (extends b_template):\n        packages: '<numberBetween(0, 5)>x @a{1..100}'\nAnd if you want to avoid duplicates, add the (unique) key to packages:\nyaml\nB:\n    b_template (template):\n        slug: '<slug()>'\n    b{1..20} (extends b_template):\n        packages (unique): '<numberBetween(0, 5)>x @a{1..100}'. Indeed the doc seems to disagree with me... I'll need to double check that to see if the behaviour is consistent between 2.x and 3.x.. >Note that foobar: '<strtolower(\"hello\")>' works, while foobar: '<json_encode(\"hello\")>' does not.\n\ud83e\udd14  Why is that? because of the underscore?. Note that I don't think this should be a blocker for the 3.0.0 release. But I think it's easier to solve the problem by tackling #601.. I partially tackled that one by tokenizing functions (that's what the FUNCTION_START__function__ was about: https://github.com/nelmio/alice/blob/master/tests/FixtureBuilder/ExpressionLanguage/Lexer/LexerIntegrationTest.php#L456).\nThat's clearly not enough and your fix may have helped. But as you said it's a problem were regexes are bad at. A cleaner solution would be #601 and #712. I believe @Hywan started some bits, but that's a significant piece of work for sure.. I'll be closing this as IMO the real fix is #601.. Hi :)\nIs your problem how do distribute evenly the products/categories to the users?. Hm then what's the problem? \ud83d\ude04  The above should work no?. Your YAML files are correct, it's more likely to be a problem on how you set your relations. You are setting the users on both categories and products via Alice, so concretely you are doing in pseudo code:\n```php\nfor i from 1 to 100\n  create product with a random category and a random user\nfor i from 1 to 10\n  create a category with a random user\n```\nSo you have 0 guaranty that the category that a product and a category will have the same user. But it's not a problem at Alice level: it's a problem on how you designed your entities and how those relationships should be set. For example: why do product takes a user if it can get it from the category?. In Alice 3.x this should work, in 2.x I'm not sure (I've fixed your example there was a mistake). If it doesn't you'll have to register a faker provider to do something like:\nyaml\nAppBundle\\Entity\\Product:\n  product_{1..100}:\n    name (unique): <name()>\n    category: '@category*'\n    user: '<getCategoryUser($category)>'\nor simply fix it in your entity: don't require a setUser() but instead set the user in setCategory().. Thanks!. Thanks :). >Made PHPUnit a dev requirement (no dependencies on PHPUnit in the src folder)\nThat was clearly a mistake. As nelmio/alice is usually a dev dependency hopefully this will not have caused much harm though.\nThanks :). I'll do it. If it's not done in the next 2h ping me on Slack\nOn Fri, 14 Apr 2017 at 13:19, Christophe Coevoet notifications@github.com\nwrote:\n\n@theofidry https://github.com/theofidry can you make a new 2.3.1\nrelease to avoid forcing installing PHPUnit when using alice ?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/pull/707#issuecomment-294144580, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gSyR8_6vmg5WE-wksbulOnKGsuWqks5rv2RbgaJpZM4MmW6u\n.\n. done*. Damn, it's the second time it's happening. @Seldaek could that be the hooks not working correctly? Otherwise maybe add me on packagist as well so that I can do a force update.. Should be ok now @stof :). >This fails as the star * will randomly choose for \"customer_1..9\" or \"customer_id_1..9\" .\nYes I could rename them or use  but this issue suggest another operator like % that is not that eager and only concerns about numbers. So % shrinks it down to \"customer_1..9\" which works for the Wallet-Entity.\n\nFor now the star operator is the only one and I'm not sure about adding another one: the syntax would need to be discussed it would require not to be overly complex. So for now renaming your fixtures is the easiest way to go. Also maybe #672 would circumvent that issue.. To make this clearer: right now we have the following:\n```xml\n        \n    <service id=\"nelmio_alice.data_loader.simple\"\n             class=\"Nelmio\\Alice\\Loader\\SimpleDataLoader\">\n        <argument type=\"service\" id=\"nelmio_alice.fixture_builder\" />\n        <argument type=\"service\" id=\"nelmio_alice.generator\" />\n    </service>\n\n```\nInstead we should have:\n```xml\n    <service id=\"Nelmio\\Alice\\DataLoaderInterface\" public=\"true\"\n             alias=\"nelmio_alice.data_loader.simple\" />\n\n    <service id=\"nelmio_alice.data_loader\" public=\"true\"\n             alias=\"Nelmio\\Alice\\DataLoaderInterface\" />\n\n    <service id=\"nelmio_alice.data_loader.simple\"\n             class=\"Nelmio\\Alice\\Loader\\SimpleDataLoader\">\n        <argument type=\"service\" id=\"nelmio_alice.fixture_builder\" />\n        <argument type=\"service\" id=\"nelmio_alice.generator\" />\n    </service>\n\n```\n/cc @greg0ire . I'm not sure old services names should be deprecated, at least for now.. No worries @Hywan, I'm not that free either lately :P, congrats on your new job \ud83d\ude04 . Thanks for looking into it @Hywan :)\nSo basically right now we have a very simple ParserInterface:\nphp\ninterface ParserInterface\n{\n    /**\n     * Parses a value, e.g. 'foo' or '$username' to determine if is a regular value (like 'foo') or is a value that\n     * must be processed (like '$username'). If the value must be processed, it will be parsed to generate a value (a\n     * ValueInterface instance) ready for processing.\n     *\n     * @param string $value\n     *\n     * @throws ExpressionLanguageParseThrowable\n     *\n     * @return ValueInterface|string|array\n     */\n    public function parse(string $value);\n}\nwhich is what I called \"Expression Language\" although it's not exactly one and it's not Symfony one either. VO stands for Value Object, which here are ValueInterface objects mainly.\nSo right now that parser is broken down in two parts:\n\nThe Lexer for which the current behaviour is defined here. Basically it's an in-house one that parses the string with regexes and generates a list of tokens from it\nThe Parser itself which decorates the lexer to tokenize the input and then process the tokens to generate the ValueInterface objects\n\nThe part I'm trying to get rid off by using HoaCompiler is the Lexer to replace this custom regex-based Lexer and tokens. One done the Parser needs to be adapted to consume the generated AST instead of tokens but I expect that to be rather trivial.\nThe main issue I would say is the grammar itself. Alice DSL is described here but it's something that has been defined over time and grew organically, so I wouldn't be surprised if there's still a few edge cases where things are ambiguous. (But that's also a reason to move to HoaCompiler: it would expose such cases once for all)\nBasically what I did in this PR is the starting point: replacing the lexer itself, i.e. starting to define the grammar to transform the input string into an AST to be consumed later.\nLet me know if there's one point that is still a bit unclear. >Can a reference be inside a parameter?\nFrom the doc: \n\n'<{X}>' where X is evaluated and can be anything.\n\nand I can see a '<{param<{param2}>}>' so I would say yes. However this looks like a good way to shoot yourself in the foot, so I would say: if it's not too hard, then yes and hope people don't abuse of it. If not, I think restricting it to nested parameters is good enough (and I would prefer that tbh)\n\nCan a reference be surrounded by \u201canything\u201d just like parameters? I mean: Parameters are defined as: anything()? (parameter() anything()?)* mostly, like foo <{bar}> baz; is it the same for references, like foo @bar baz?\n\nYes. Also as you can guess, foo @bar baz will fail unless the object referenced by @bar is stringable. There is some annoying cases where it's ambiguous and I was thinking of using {} for delimiters, e.g. foo @{bar->foo}baz, but couldn't find an easy way to implement it with regexes.\n\nIn the given example @user<numberBetween(1,20)>, could we have recursion here, something like @foo<bar(<baz>)>, I hope no because it's a little bit harder (because of the escaping system and the \u201canything\u201d in parameters).\n\nThat's a risk we have with moving to HoaCompiler I guess as before the expression would have likely to be evaluated wrong and been considered invalid (simply because of the implementation limitations not due to an invalid syntax). If we identify such cases, I think it depends of what we have as there's multiple actions that can be taken: handle it in the grammar for that not happening or ensuring the system bails out in a graceful manner so that the user can easily identify the issue and fix it.\nAsk as many question as needed :P. Yeah, although I don't really see a recursion case I guess in theory that would be possible.\nThere's a few exceptions though:\n\nIdentity where the content should remain as a string and is lated evaluated with eval()\nOptional. @Hywan I've updated the PR based on the latest state of the work you pushed of the GitLab repository.\n\nYou should see the LexerIntegrationTest for which we can now replace the array of tokens of the previous system by the proper expected TreeNode. It's not the only thing that needs to be updated but that's the very first step, the next one being updating the Parser accordingly. But at least now anyone who which to purse it just need to run\nbin/phpunit tests/FixtureBuilder/ExpressionLanguage/Lexer/LexerIntegrationTest.php\nWithout any more faff. No the topic and PR are still relevant. The branch might be ohutdated but\nthe rebase should be relatively easy.\nOn Mon 18 Feb 2019 at 20:52, Christoph Schmidt notifications@github.com\nwrote:\n\n@theofidry https://github.com/theofidry @Hywan\nhttps://github.com/Hywan is this still the \"hot\" PR or was this topic\ndropped or superseded by something else?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/pull/712#issuecomment-464856996, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gaxRUCt2DrK-4mki7M8DLLL0y4sdks5vOwSZgaJpZM4M085b\n.\n. \ud83d\udc4c. Makes sense, I simply overlooked it when I did https://github.com/nelmio/alice/pull/698. Do you mind adding some tests in LoaderIntegrationTest as well? You should have some examples in the linked PR.. Hm no that doesn't seem right: alice is broken down in 2 steps: creating the fixture objects and generating the actual objects. The first part is supposed to be idempotent and immutable. They shouldn't be mixed. More details there.\n\nI cannot really debug it this we, but I would rather say ArgumentsDenormalizer or one of it's caller is likely to be the problem. Ah, I actually completely misread your change \ud83d\ude05 . Thanks @ogizanagi :). Hm interesting, the change seems right but I'm surprised this is not covered by the tests. Would it be possible to have a scenario showing that issue? This should be easily doable by using custom entities and a test case in LoaderIntegrationTest. I would say here and maybe mentioning it there as well:\n\nYou can reference properties reachable through a getter (i.e : @name->property will call $name->getProperty() if property is not public). Ha, indeed missed that as well! thanks :). Cheers :). That's quite surprising.\n\nI'm not sure if I can provide much help here however. It's more a doctrine issue (as how you use it). Alice simply transforms your files in a list of PHP objects and AliceDataFixtures does a persist()/flush() behind.\nI can only recommend you to:\n\ncheck that the objects generated by alice are the one that you expected\ncheck how the persist is done if that fits your case (I don't expect anything there but better safe than sorry)\ngo in Doctrine UoW and check what's going on...\n\nYou could also ignore the issue, but I suspect Alice to just have made an issue obvious.. @alekslauda would you mind opening a PR to fix it? I don't think this should be too hard. Note that it's a known issue and can be fixed by escaping it manually: email1\\@example.com. I've just tested it on master and seems to work. Not sure if your case is more complex or if it has been fixed in the meantime. If you still encounter the problem please open a new issue with the failing email :). \ud83e\udd14  I can't remember what's the behaviour on 3.x. If it works there, then cool. If not it's a feature request. But in either case it's unlikely to land in 2.x unless someone is willing to work on it (I'm not sure of how scopes are handled in 2.x) and it would require to add support for it in 3.x as well.. This indeed works fine in 3.x. So unless someone is willing to work on this, it won't be backported on 2.x.\nDunno if it can help, but FYI 3.x is quite stable even though a stable release is not out yet. There has been a few BC changes and bug fixes, but they won't affect you unless you go really deep in the library (thing you cannot really do in 2.x in any case tbh).\nI don't have an ETA for the stable release, but it's probably gonna be in the coming months.. @ogizanagi would you mind doing a quick review on that one?. This is not supported in neither 2.x and 3.x, and I'm not sure it should. But if people really find it a must then let's let them show their interest here.. Well, PRs are welcome for it then :). I think that's fine, it looks like more of and edge case that can very well wait #712. No worries, but it looks like this causes a slight parsing issue. @ndyakov any updates? No pressure if you don't have time, it's just to know if I can count on it to be included in the next RC release or if this will wait later. That's ok :). Is this still relevant? As mentioned in #724 this now seems to be working fine. Fair enough :). @ogizanagi adding support for immutable functions should be trivial now.. I'm covering that among other things in #734 :) Thanks for the PR though, I doubled check that I didn't miss any tests.. Everything is pretty much done, what's left is waiting for a period stable enough after HautelookAliceBundle has been tagged with an RC release.. Good catch, cheers. That's because you need to write your own <entity_reference()>, it's a custom faker method cf. https://github.com/nelmio/alice/blob/master/doc/customizing-data-generation.md#custom-faker-data-providers. '<entityReference(\"App\\Bundle\\OrganizationBundle\\Entity\\Organization\", \"Second\"))>' should be '<entityReference(\"App\\Bundle\\OrganizationBundle\\Entity\\Organization\", \"Second\")>' :). Actually the link should be removed as the content became obsolete as of 3.0.0: https://github.com/nelmio/alice/commit/4134579c950108564c9c47679be87a837898c062#diff-21790792d116b910b2a565c26d80b95d. Composite unique fields are not supported atm (and not sure they will in the future), but if it's for such a specific case you could implement it yourself by using a custom faker provider. Yep, you can find some doc here: https://github.com/nelmio/alice/blob/master/doc/customizing-data-generation.md#custom-faker-data-providers (it's a similar path for 2.x as well in case you're not using 3.x). I understand that it looks nice on paper, but I see big issues regarding the DSL syntax which I don't think is worth.\nYou can always have a custom Faker provider to do:\nyml\nMyEntity:\n  dummy:\n    startAt: '<(new DateTime(\"2017-06-02 12:00:00\"))>'\n    endAt: '<manipulateTime($startAt, \"+ 2 hours\")>'\nWhich I think is enough of a compromise if you really need this. Also double check that Faker doesn't already have something similar!. Hi,\nI think the error error is rather straight-forward: you have two objects with the same ID. So which entity and what are the values supposed to be I can't guess, but I think you'll have the answer by inspecting the generated objects to see if they match what you expected.\nAlso the (unique) doesn't work for arrays in 2.x (fixed in 3.x). @maches I don't know how your subject_name() method works but one problem seems to come from there as it looks like it returns multiple time the same value.\nHowever it's unlikely to be the root of the issue has your issue comes from a duplicate primary key. Check which entity is causing this and if it's not simply because the database is not purged correctly  between each tests . >I expected that the elements would not be duplicated\nWhich one are you talking about? <current()> in your case will return 0, 1, ..9. A Faker provider can perfectly return duplicate data and if you don't want that you have to force unique.\nSo the issue is duplicate entities for subjects? If so unique solves the problem, but as you have 9 subjects for 15 activities and each activities requires 3 subjects, you won't have enough subjects.... >because It's a valid unique value of array\nThat is true only in 2.x, this has been fixed in 3.x. If you really need that and can't upgrade I recommend you to rely on a custom Faker provider: you pass it all the subjects and it does its own thing to get 3 unique subjects at each call. You should try to debug with xdebug by marking a break point to inspect things when just before UniqueValueGenerationLimitReachedExceptionFactory is called, it will give you hints as why no unique value could be generated.\nBut from the look of it it seems you just don't have enough subjects objects. Closing as it's an issue in the consumer code, not alice :). yaml\nuser (template):\n   username: '<featureId()>'\n   name: '<ucfirst($username)>'\nShould do the trick :). but what is featureId() supposed to be? <foo()> only works if foo is a native PHP function or a faker formatter (and you can add custom ones). AFAIK you can't pass <current()> from a template so it doesn't make sense to have it for a one-item list.\nI conceive you want to access to the fixture key, but I'm not sure if it's worth doing especially in your case where the workaround is quite easy.. Yes, <foo(<@feature*->id)> or something similar I think, there's quite a few ways to go. Cheers :). The backslash \\ so \\$ or \\@. It should be in https://github.com/nelmio/alice/blob/master/doc/advanced-guide.md#expression-language-dsl, if not would you mind opening a PR to add a mention of it?. can you try <(\"$<$<$o$3f0wdf$>$f3fno$000\u30c4$>$09FSto$>\")>? Otherwise it might be simpler to store those strings in a custom faker provider and use that instead. Never though about it, but should be in 3.x.. This sorta works. The may issue you will encounter is that this kind of declaration depends on the order, i.e.:\nyaml\n\\stdClass:\n    dummy\n        foo: yo\n        bar: $foo  # will be resolved fine\nHowever:\nyaml\n\\stdClass:\n    dummy\n        bar: $foo  # will fail\n        foo: yo\nWhich makes your fixtures extremely brittle as you have no guarantee of the order:\n```php\n// src/Definition/PropertyBag.php\npublic function mergeWith(self $propertyBag): self\n    {\n        $clone = clone $propertyBag;\n        foreach ($this->properties as $name => $property) {\n            $clone->properties[$name] = $property;\n        }\n    return $clone;\n}\n\n```\nAs you can see it's a plain associative array, no special ordering is done.\nSo this can work, but is very fragile. Now can we make this better? We could find some ways, but I don't think they would be bulletproof either and would come with a non negligible performance impact + complexity.. Thanks for the detailed bug reported, that eased a lot the debug :)\nIn the end, it's not really a bug, if you consider the following:\nyaml\nstdClass:\n    dummy:\n        relatedDummy: '@dummy*'\nThis is a valid case and obviously you cannot assume the references returned will be complete as otherwise you would have a circular dependency.\nHowever I agree that giving complete objects whenever possible should be done. I though that was the case but your issued proved me wrong, so now it's done \ud83d\ude04 \nNote however that Alice will attempt to return a complete object, if failing to do so an incomplete object will be returned.. ```yaml\nLangs:\n  langs_{en, fr, de}: {}\nParameters:\n  params_{0...10}: {}\nParameterLangs:\n  param_langs_{0...10}:\n    parameter: '@param'\n    lang: '@lang'\n    some_value: 'ParamLang $current'\n```\nor something along those lines. >But I fail on Constraint duplicity.\nAnd what is the constraint exactly?\nyaml\nApp\\Models\\ParameterLang:\n    parameter.lang_*_{1..20}:\n        parameter (unique): '@parameter_*'\n        lang: '@lang_*'\n        name: EN <word()>\nLooks all good.\n\nOr some other way:\n\nThat ways is very different, in what you showed me above it was about generating 20 ParameterLang, your last sample is about generating 60 of them.. yaml\nApp\\Models\\ParameterLang:\n    parameter.lang_en_{1..20}:\n        parameter (unique): '@parameter_*'\n        lang: '@lang_en'\n        name: EN <word()>\n    parameter.lang_cs_{1..20}:\n        parameter (unique): '@parameter_*'\n        lang: '@lang_cs'\n        name: CS <word()>\n    parameter.lang_de_{1..20}:\n        parameter (unique): '@parameter_*'\n        lang: '@lang_de'\n        name: DE <word()>\nshould work as well. You cannot create a dynamic number of fixtures atm so that's the only solution you have with Alice and I think that's an acceptable solution :). Closing if you have found a solution then :). Fixed, thanks. Same as #761 I'm afraid :/. I'll be closing this one as per the discussion in #761, the real fix is in #601.. This may be a bug in the Lexer. Frankly unlikely to be fixed unless someone is willing to check it. #733 would be another way to really fix those kind of problems as well.\nCould you however check the resutl in 2.x? -> has been introduced in 3.x and I highly doubt it works in 2.x (not raising an exception sure, but not sure about the result). @ref->prop yes but not @ref<something()>->prop. If it worked that was pure luck ;). To deal with nested functions, I'm using a FunctionTokenizer to \"flatten\" a function. Otherwise it's a nightmare to detect nested functions.\nIn your case however, it seems like there's a bug. I'll try to apply that regex and see what we can do about it but I'm not sure when I can do that. Alternatively, you need to debug that step by step with breakpoints (use xdebug for it). I'm not really sure what the issue is, the tokenized function is ok, it's probably a bug in FunctionTreeTokenizer which maybe thinks something wrong due to the -> (and it should not be). I don't have much to say, need to do step by step debugging to see what's going on there :). Yeah, I'm not really sure on how to fix it tbh. To me it looks like we are hitting the limits of the in-house lexer a good way to tackle the issue would be to replace it by a real lexer like HoaCompiler (cf. #712).\nBut lexer limitations are a known issue, it was already the case in 2.x (although not exactly the same ones) to be fair so it has been an issue for a long time already. I can suggest:\n\ntry to use $current instead of  <current()>\ntry with the identity function\na custom Faker provider. I think we can make the case with $current work at least. Indeed, would you mind opening a PR for it? I believe this can be fixed by changing those lines by checking the parent properties (recursively as several parents may be given). Checking this again with a clear mind, I'm not convinced this is the solution. Accessing directly an object property is one thing, accessing a parent private properties another.\n\nIn your example I see two simple solutions which are way less hacky:\n\nMake those properties protected which reduces the level of encapsulation but it allows you to do what you want\nDon't rely on this property accessor and use the constructor instead:\n\nyaml\nTestGeographicLocation:\n  dummy:\n    __construct:\n      - '<latitude()>'\n      - '<longitude()>'\nEven though this was working in 2.x, I think there was a bit too much magic in 2.x sometimes with things that shouldn't be done. This may be one of those. Your test as it is should work. The point of private properties with inheritance is to guarantee you cannot touch them, touching them is opening up the door to very very weird behaviour.\nIf your piece of code above is failing, could you try to isolate it? This looks really suspicious, I mean it clearly shouldn't fail. You're not supposed to or rather you test their behaviour in the child class, that's the point of encapsulating it that way. I just don't think that's the way to go. If you have private properties in a parent class, it means you have a way to set those properties through the child class otherwise something looks fishy.\nTo be clear, it may be a legitimate answer for your case to set directly the private properties of a parent class. I don't think it's a good thing to do, but it may be the most cost-effective one. If that's the case, I do think however this should be a in-house solution (there is several extension points to register a custom accessor) instead of being added to the core which is very likely to lead to more abuse and wtf.. Unless I missed something, as in the first example shown, you should be able to easily set the values of those private properties without that reflection thing. Back to this. I still don't think that's a good solution. For your specific use case, having a custom hydrator is the way to go, but having one in the core is IMO a bad idea. One reason 3.x has been refactored as heavily is because 2.x was way too permissive and was creating too many wtf. I'm not keen to do that again for 3.x.\nTL:DR; Rolling your own thing for dirty stuff is ok :). Closing as per the discussion in #762.. I'm even surprised it just parses as YAML, a more correct way would be:\n```yaml\nSome\\Class:\n    SomeClass (template):\n        someValue: 1\nSome\\Class:\n     SomeOtherClass (extends SomeClass): ~\n```\nFor which we could update the code to allow that or deprecate that behaviour in 2.x (I'm more in favour of the later). An easy fix is:\n```yaml\nSome\\Class:\n     SomeClass (template):\n          someValue: 1\nSome\\Class:\n     SomeOtherClass (extends SomeClass): {}\n``. Yeah, I don't think we allowed that. We could either allow it in 3.x or update 2.x to add a deprecation sayingnullis no longer accepted in this case.~is equivalent ofnull` in YAML :). Yep. How do you load those files exactly?\nAlso the issue seems to come from the fact that the property twoValue was not found in Example\\Two\\Id, not about the template names conflicting. >Could not hydrate the property \"twoValue\" of the object \"OneTestId\" (class: Example\\One\\Id).\nI think it's worth checking the error thrown (dump it, see the previous error) to see why the hydration fail. I can confirm this behaviour works in 2.x as https://github.com/nelmio/alice/pull/766 shows. However this is pure luck.\nA fixture ID is its name, the class is not taken into consideration. The reason being that in the final array objects you get it's an associative array where the fixture ID is the key:\n```yaml\nDummy:\n  dummy: {}\nAnotherDummy:\n  dummy: {}\n```\nwill result in:\n[\n  'dummy' => $dummy,\n]\nSo one will be overridden for sure. You scenario simply just make it a bit less obvious as template fixtures never appear in the result anyway.\nSo it's a \"won't fix\" for 3.x. What could be done however is adding a deprecation message in 2.x for that behaviour but it's unlikely as very hard to do.. I think we should change the class check for an instance of instead. It makes more sense for proxies or factories.\n@jeremy-smith-maco would you mind opening a PR for it? This one should be relatively easy. ah, but then you are specifying the wrong class:\nyaml\nMockery\\MockInterface:\n    dummy_mock\n        __factory: { 'Mockery::mock': [] }. I'm not sure what should be done here. Maybe take a look at the verbosity when running your command.\nIf it's directly in the code, it's at PHP level. Maybe there's a setting for it otherwise the way to go is do step by step debugging and inspect the exception. The problem is that resolving a value can be far from trivial and having just the previous error message is very rarely enough, so in any case you need the whole stack trace. The question is if it can be displayed easily or not, but I'm not sure this is something that can be done at alice level. Well that's the issue, it's hard to tell :)\nIt's an error that shouldn't happen and is very contextual, so rather than trying to be fancy and completely wrong, I've opted for a generic error message with the proper stack trace.\nI understand it can be a bit frustrating, but in my experience at least it's very hard to have an error message that is somewhat helpful here. If you want to you could append the error message of the previous version to it, it's just that I never found it enough :P. Closing for now as I really don't have a good solution for it and not really willing to spend too much time on it. If someone has a good idea he can give it a stab though :). I think the idea here is that when evaluating an expression, we don't try to guess if it's a float or a string. But it looks like this is going slightly too far and systematically transform it into a string.\nDid you check if there's a quick fix for it?. Actually that won't work. '<{dateScheduled}>' just says \"get the parameter called dateScheduled. Here dateScheduled is the integer 1481592275. If you want it to be a string it should be '1481592275'.. Multi-dimension arrays are definitely not supported although that may be doable without too much trouble in 3.x.. Closing in favour of https://github.com/nelmio/alice/issues/579. Definitely not in the first form, that's a bit too magic :) You however can somewhat simulate this with a custom Faker provider:\nyaml\nMy\\Model\\Lol:\n    lol_{1..3}:\n        content: '<customFaker([5, 30, 12], $current)>'. It's possible that your setters doesn't set the relationship the other way, I recommend you to take a look at the generated PHP objects to see if they are set as you expect them to be. Closing for now. Feel free to open a new issue once you find something a bit more specific. that does sound weird, but I can't tell what's the issue without any code or knowing which version you are using. Maybe try to look how the properties are actually being set and how they can be null.. It may set the property directly if it cannot via the setter in 2.x, so watch out on how the property is actually set. You can see it in the populator IIRC. @iBasit I'm sorry but I cannot really help without more information. As I said at some point the easiest way to go is to look at the generated objects to see what is wrong and eventually check how the properties are populated( see Populator in 2.x or Hydrator in 3.x). @iBasit could you try to reproduce it by adding a test to LoaderIntegrationTest?. >You can add quick test if you like\nWell, right now I cannot which is why I'm asking :)\n\nnot sure why there is strrev function being used on the test, seems so pointless.\n\nA simple test to ensure a call to a PHP native function works\n. @kariolos I can try to have a look at it later in 3.x but for 2.x there's nothing I can do. PRs & patches are still welcome, but I'm not willing to actively work on that version anymore. @iBasit @kariolos is in 2.x not 3.x so it looks a bit different. Thanks! Do you mind adding a small test for it? I believe a test in LoaderIntegrationTest should be enough. Many thanks :). Thanks very much! Do you mind adding a test to LexerIntegrationTest and ParserIntegrationTest as well?. \ud83d\udc4c \ud83c\udf89 . You could give a concrete example? I don't understand how the @ can be interpreted as an annotation. Closing for inactivity. Feel free to provide more information in which case I'll re-open the issue or open a new issue for it.. Wouldn't it be possible to prevent the fixture files from being read by the annotation reader? In any case this could be added to the doc in a FAQ entry or something IMO. That sounds weird. There is indeed a difference at the persistence level for Alice 3.x: it has been moved to theofidry/AliceDataFixtures, but as you can see, it doesn't do much: https://github.com/theofidry/AliceDataFixtures/blob/master/src/Loader/PersisterLoader.php#L77.\nDid you use a special config option in 2.x or something?. I've never seen that error before, did you find a way to reproduce it somewhere?. Soz I'm a bit busy this w/we with my moving I couldn't check yet.. >Off Topic\nThanks I'll check it out :)\n\nBack on Topic\n\nI'll try to have a proper look in the evening, but otherwise it will take longer. \nIs it expected that Detail has no id? that looks weird. Also https://github.com/doctrine/doctrine2/issues/4584 might help. Ok I pinned down the issue.\nThe issue is really what is described in the StackOverflow question. In you case what you need to do in raw PHP is:\n```php\n$manager->persist($user);\n$manager->flush();\n$manager->persist($detail);\n$manager->flush();\n```\nNow to make it work, there is several solutions. A first one would be to create your own PersisterLoader:\n```php\nuse AppBundle\\Entity\\Detail;\nuse Fidry\\AliceDataFixtures\\LoaderInterface;\nuse Fidry\\AliceDataFixtures\\Persistence\\PersisterAwareInterface;\nuse Fidry\\AliceDataFixtures\\Persistence\\PersisterInterface;\nuse Fidry\\AliceDataFixtures\\Persistence\\PurgeMode;\nuse Fidry\\AliceDataFixtures\\ProcessorInterface;\nuse Nelmio\\Alice\\IsAServiceTrait;\n/\n * Loader decorating another loader to add a persistence layer.\n \n * @author Jordi Boggiano j.boggiano@seld.be\n * @author Th\u00e9o FIDRY theo.fidry@gmail.com\n\n * @final\n /\n/final*/ class PersisterLoader implements LoaderInterface, PersisterAwareInterface\n{\n    use IsAServiceTrait;\n/**\n * @var LoaderInterface\n */\nprivate $loader;\n\n/**\n * @var PersisterInterface\n */\nprivate $persister;\n\n/**\n * @var ProcessorInterface[]\n */\nprivate $processors;\n\n/**\n * @param LoaderInterface      $decoratedLoader\n * @param PersisterInterface   $persister\n * @param ProcessorInterface[] $processors\n */\npublic function __construct(LoaderInterface $decoratedLoader, PersisterInterface $persister, array $processors)\n{\n    $this->loader = $decoratedLoader;\n    $this->persister = $persister;\n    $this->processors = (function (ProcessorInterface ...$processors) {\n        return $processors;\n    })(...$processors);\n}\n\n/**\n * @inheritdoc\n */\npublic function withPersister(PersisterInterface $persister): self\n{\n    return new self($this->loader, $persister, $this->processors);\n}\n\n/**\n * Pre process, persist and post process each object loaded.\n *\n * {@inheritdoc}\n */\npublic function load(array $fixturesFiles, array $parameters = [], array $objects = [], PurgeMode $purgeMode = null): array\n{\n    $objects = $this->loader->load($fixturesFiles, $parameters, $objects, $purgeMode);\n\n    foreach ($objects as $id => $object) {\n        if ($object instanceof Detail) {\n            continue;   // Persist it at the second pass\n        }\n\n        foreach ($this->processors as $processor) {\n            $processor->preProcess($id, $object);\n        }\n        $this->persister->persist($object);\n    }\n    $this->persister->flush();\n\n    foreach ($objects as $id => $object) {\n        if (!$object instanceof Detail) {\n            continue;\n        }\n\n        foreach ($this->processors as $processor) {\n            $processor->preProcess($id, $object);\n        }\n        $this->persister->persist($object);\n    }\n    $this->persister->flush();\n\n    foreach ($objects as $id => $object) {\n        foreach ($this->processors as $processor) {\n            $processor->postProcess($id, $object);\n        }\n    }\n\n    return $objects;\n}\n\n}\n```\nAs you can see there is two persist() pass. However this is not enough. Indeed the Doctrine persister ObjectManagerPersister does a clear() in the flush to mitigate some memory leaks. So that means you need to override it to not call the clear() call as otherwise when persisting the details, the User entity attached will be perceived as a new entity.\nA cleaner way although a bit more hacky woud be to create your own persister and skip the Detail entity in the persist() and create a post-processor (they are executed just after the flush) to persist the details.\nThis IMO is a workaround however. It would be nice to tackle the issue at the core, but it requires to considerate more complex scenarios where you have a chain of 1to1 relationships for example.. Also note that if it was working in 2.x, that was by cheer luck.. You missed that bit:\n\nHowever this is not enough. Indeed the Doctrine persister ObjectManagerPersister does a clear() in the flush to mitigate some memory leaks. So that means you need to override it to not call the clear() call as otherwise when persisting the details, the User entity attached will be perceived as a new entity.\n\nBut I would rather recommend the second solution. I need to take a proper look but I can't right now. If you override the service (i.e. declare you own service with the same service ID) it should work though.. What do you mean by second load? Just in case also double check you deleted the container. Sorry I forgot to post my message yesterday, see https://github.com/theofidry/alice-problem/commit/14bf2e0c2b8379ee0950a4a6aba35044a9681838.\nArguably there is some design issues:\n\nMissing alias for persister in FidryAliceDataFixtures to easily override it\nAdd a persister factory for e.g. DoctrineOrmLoader in HautelookAliceBundle\n\nCan't do much atm, but PRs are welcome :). Let's keep the issue open as they are some changes to be made to make it easier :). Moved the issue to the right repository: https://github.com/theofidry/AliceDataFixtures/issues/50 :). @Mahmoudz do note however that embeddables are properly ignored already. If that's not the case then it's a bug.. Thanks very much :). Hi,\nThey are deprecated because you can't access them (private/protected properties) out of the box anymore. You will either have to change the accessor (cf. this link) for another one or declare your own.\nTL:DR; it's ok, it just means you'll have to change things a little if you upgrade. regexes for emails are difficult, I think the easiest way is either to check if we have non empty a STRING_TYPE token immediately followed by a SIMPLE_REFERENCE_TYPE, we could transform the reference into a string.\nAlternatively just escape it: disabled1\\@example.com. >This would be a new lexer that comes after SubPatternsLexer, right, or would it just be a part of the SubPatternsLexer?\nA simpler way I think would be to decorate the lexer and modify the list of tokens accordingly. IIRC this is already done somewhere to transform all the successive STRING_TYPE tokens into one. I don't remember exactly where, but that's within the lexer for sure. I think it's the localised call that fucks up a bit things. But the real fix is in #601 unless you are ready to patch the current lexer & parser. I see nothing wrong with your notation so I guess it's just a mistake in the lexer that doesn't handle well nested arrays. Maybe <([[1,4],[2,5]])> will work better. oh I see, I misunderstood then: <(\"[[1,4],[2,5]]\")>, <()> is basically an eval so that should work...\nI'm mildly surprised that it's failing on nested arrays but the 2nd example is more concerning. @msypes I don't think this is an issue.\nHow a JSON is stored in the database depends of the JSON support provided by the DB, which changes from a version to another and from a vendor to another.\nIn your case, \"[{\\\"type\\\":\\\"foo\\\",\\\"number\\\": 5,\\\"bar\\\":\\\"baz\\\"}]\" is simply an escaped string. If you apply json_decode() on it you get the expected result: https://3v4l.org/b8u8E. From what I see it does do a json_decode.. I've look into this again and I can't find a simple fix. Or rather it does work for me, \"[{\\\"type\\\":\\\"foo\\\",\\\"number\\\": 5,\\\"bar\\\":\\\"baz\\\"}]\" is a valid JSON string which alternative format is '[{\"type\":\"foo\",\"number\": 5,\"bar\":\"baz\"}]'.\nSo if someone still have an issue with a similar case please feel free to open a new issue with the failing data :). \ud83d\udc4c \nDo you mind to add a small integration test? You'll need to add it in both LexerIntegrationTest and ParserIntegrationTest as both need to be synchronized. This indeed looks very weird, can you reproduce it locally (try make ts)? I'll try to check it out during the week. Cheers :). Actually I think the Makefile should be update accordingly rather. Thanks again. Yeah it's probably better, just a simple one extending \\InvalidArgumentException. The design of exceptions for this library are:\n\nminimal exceptions\nlocked exceptions factories: locked as private, for our use only\n\nSo that should give you enough freedom to not worry too much about BC. Coming back on that one, I think it's fine with a InvalidArgumentException: it's not an error meant to be catched or anything.. Thanks very much @olvlvl :). >Version: v3 RC\nQuick, upgrade :)\nNo such calls were not in the spec so are not supported. But maybe it would be a good idea to add it, PRs are welcome :). Thanks :). Assuming you are using alice 3.x, inside identity, which is what <()> is, the content is evaluated as a string so you should do <(time() - 100)> rather. I think the problematic part may be @legalRepresentative_<current()>, try @legalRepresentative_$current or maybe @<(\"legalRepresentative\".$current)>\nIn any case I think there is a bug here that should be solved. I think this should work ok unfortunately it's not. So there is 3 options:\n\nDebug and fix it\nLeverage Faker providers instead\nFinish #601 \n\nI'm not really up for the first one but I'll accept any work on it of course. Meanwhile I'll be closing this issue as the real fix is in #601 IMO.. @Jir4 that should works in 3.0 at least. Not sure about 2.0. It may be doable with a big ugly hack, I don't know which one, but otherwise that's a design flaw in 2.x that has been addressed in 3.x.. Closing as already said, can't do much about it unfortunately :/. Hi :)\nCould you give me more detailed dependencies? There are more than one RC & Beta :)\nThis kind of fixtures should definitely work. Are you 100% sure that the fixture file containing member* is loaded?. >if I put the fixtures in the same file, it works :)\nI sure expect that, but it should definitely works in a different file as well. The requirement is that they are loaded at the same time, hence my question of if you were sure they were all loaded (you can use the -vvv option in HautelookAliceBundle.\nThe way it works is:\n\nget the data defined by all the files\ninstantiate all the fixtures\npopulate them\n\nSo the order or the fact that they are in different files should not matter.\nFor the dependencies, a more reliable way to show the versions installed is composer show :). Could you try to update your dependencies and see if the issue has been\nsolved? Otherwise I would either need you to look at it by doing some step\nby step debugging or give me access to an excerpt where the issue has been\nintroduced.\nOn Wed, 4 Oct 2017 at 06:35, Mikael Kermorgant notifications@github.com\nwrote:\n\nI just updated the gist with composer show output and here is the result\nof -vvv option\n\u00b1 % docker-compose run --rm php php bin/console hautelook:fixtures:load -n -vvv  | more                                                                                                                                                 !10010\n07:28:01 INFO      [app] fixtures found\n[\n  \"files\" => [\n    \"/var/www/app/Resources/fixtures/action_types.yml\",\n    \"/var/www/app/Resources/fixtures/circle.yml\",\n    \"/var/www/app/Resources/fixtures/credit_value.yml\",\n    \"/var/www/app/Resources/fixtures/subscriptions.yml\",\n    \"/var/www/app/Resources/fixtures/user.yml\"\n  ]\n]\n[]\n[Fidry\\AliceDataFixtures\\Exception\\MaxPassReachedException]\n  Loading files limit of 15 reached. Could not load the following files:\n  /var/www/app/Resources/fixtures/circle.yml:\n   - Nelmio\\Alice\\Throwable\\Exception\\Generator\\Resolver\\FixtureNotFoundExcep\n  tion: Could not find the fixture \"member38\". in /var/www/vendor/nelmio/alic\n  e/src/Throwable/Exception/Generator/Resolver/FixtureNotFoundExceptionFactor\n  y.php:23\n  Stack trace:\n  #0 /var/www/vendor/nelmio/alice/src/Generator/Resolver/Value/Chainable/Fixt\n  ureReferenceResolver.php(143): Nelmio\\Alice\\Throwable\\Exception\\Generator\\R\n  esolver\\FixtureNotFoundExceptionFactory::create('member38')\n  #1 /var/www/vendor/nelmio/alice/src/Generator/Resolver/Value/Chainable/Fixt\n  ureReferenceResolver.php(95): Nelmio\\Alice\\Generator\\Resolver\\Value\\Chainab\n  le\\FixtureReferenceResolver->resolveReferredFixture(Object(Nelmio\\Alice\\Def\n  inition\\Fixture\\FixtureId), 'member38', Object(Nelmio\\Alice\\Generator\\Resol\n  vedFixtureSet), Object(Nelmio\\Alice\\Generator\\GenerationContext))\n  #2 /var/www/vendor/nelmio/alice/src/Generator/Resolver/Value/Chainable/Self\n  FixtureReferenceResolver.php(99): Nelmio\\Alice\\Generator\\Resolver\\Value\\Cha\n  inable\\FixtureReferenceResolver->resolve(Object(Nelmio\\Alice\\Definition\\Val\n  ue\\FixtureReferenceValue), Object(Nelmio\\Alice\\Definition\\Fixture\\Templatin\n  gFixture), Object(Nelmio\\Alice\\Generator\\ResolvedFixtureSet), Array, Object\n  (Nelmio\\Alice\\Generator\\GenerationContext))\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/801#issuecomment-334054433, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gVUYXXU9-D-fvL9YDMzNwxqr6cndks5soxkdgaJpZM4Pr201\n.\n. Ok, I'll try to look at it this week. Note to myself: @kermorgant reproduced the issue on a private repo. It's more likely to be a PHP issue rather than the doctrine type itself. Check if you have the necessary accessors eventually debugging it to see what it tries to get. I don't really remember what's the behaviour there in 2.x tbh. Writing your own populator could be doable but a real PITA due to 2.x design, so avoid that as much as possible. Last resort IIRC the was a __config or __setter option to make use of a configurator.. Thanks!. Hi, unfortunately I cannot help with more information but this is much more likely to be about the Symfony Property Access component. Please double check that the issue is really caused by the usage of a trait and if that's the case I recommend you to open an issue on the Symfony repository with a reproducible case.. Hi,\n\nI did not mean that you were using Symfony, but alice is using the Symfony Property Access component to access to properties.\nAccessing to a private property has been deprecated in 2.x and is removed (by default) in 3.x. It is still possible to do it cf. this entry.\nI'm re-opening the issue as there is two things to do here:\n\n@danielspk could you please check if when using the latest version of 2.x you had a deprecation message regarding the access to that private property?\nAdd this as an entry in a FAQ. @danielspk I've just tested your case and it does work with the hydrator mentioned in the doc in my previous comment. It doesn't work out of the box in 3.x as it was creating too many wtf situations and as pointed earlier, it is still possible to do it.\n\nRegarding the deprecations, you should see something. #816 and an existing test are ensuring it works. If you don't see it you may be missing the PHPUnit bridge.. @Ocramius: I think you could either mention that or update your extremely defensive programming slides. Good call \ud83d\udc4d . Do you mind checking 3.x for that as well? Although much less, there is one or two deprecation message IIRC.. Thanks :). Cheers!. I think instead we could simply break the naming convention for the test class, so rename it instead. It has Legacy is the name because the tested class has it, not to leverage the PHPUnitBridge.... Closed via #818. Thanks still :). Cheers :) We might want to do the same for FidryAliceDataFixtures and HautelookAliceBundle. Should be fixed, I did a mistake when releasing 2.3.2, it was based on master instead of 2.x \ud83d\ude15 . Should be fixed, I did a mistake when releasing 2.3.2, it was based on master instead of 2.x \ud83d\ude15 . \ud83c\udf89 . There is already an example for the YAML and PHP so this shouldn't be too complicated. PRs are welcomed :). Although that would be doable, this would be a BC break. Rather than looking at them as nested objects, I think it's easier to look at the property as an atomic object.\nSo I know where you're coming from, but I'm not sure it's worth it (can lead to a lot of wtf as well) and clearly not doable without a BC break. I don't think the above should be deprecated as there is nothing wrong with it and no special parsing involved (trying to detect those cases would be more of a pain than anything). However we could indeed promote the other way in the doc as a preferred way.\n\nI supposed you only accept features on the current 3.x stable\n\nI don't really mind actually, there is still plenty of people using 2.x. My only requirements are:\n\nthe CI must be updated accordingly if needed and the tests must pass\nif is a new feature, it must be ported to 3.x as well\nI don't have any extra steps to do than review, merge and release. >I can understand. I suppose the <()> notation is simply PHP interpretation?\n\nYep, we simply detect that function and we do an eval() and its content without trying to interpret what's do there. \ud83d\udc4d  I'll merge both of them at the same time, thanks :). yep, done. Because the call is no longer parse($fileContent) here but it gets the constant as well depending of the YAML parser version. https://github.com/nelmio/alice/pull/829/files#diff-1bb89596d4482090faac6e8ff7ed270cR158 should be updated to Argument::cetera() I think. Thanks very much :). This could be possible, the reason I did not do so:\n\nI really wanted to keep the persistence stuff out of nelmio/alice as it brings a lot of infrastructural complexity. As small as AliceDataFixtures is, it's already a huge pain to deal with although it is 100x much better than HautelookAliceBundle 1.x.\nHaving the persistence interfaces in nelmio/alice would make it harder to update AliceDataFixtures when necessary. Also alice is more and more used without the persistence layer so I also like the idea of removing the omnipresence of the persistence layer\nI don't have full control of nelmio & hautelook, as such I can't easily move everything under a new org (plus that would require an appropriate branding and I have no idea for neither the name or the logo)\n\nSo whilst this could be doable, it was simpler the other way :). Nope closing. I'm not against the idea per se but I don't really have enough time to do such changes :/\nThat can change if someone finds a good branding for an actual organisation in which case it would make sense to move everything under it. But without it would just be moving a weird collection of packages together without a real identity.. Cheers. Yes I'm not really sure I want to create a new branch to maintain for that :)\nI know how it is to develop on legacy project, but I think an easier solution here is to for the project and use that fork instead see VCS repositories which allows you to do any dirty thing you need to get done before being to upgrade without having the downside of public OSS work. You can then freely work on the upgrade to catch up.. See my comment here: https://github.com/nelmio/alice/issues/797#issuecomment-352258527, #601 is the real fix. Indeed the local should be passed here. So we could add a protected constant LOCALE = 'en_US' in NativeLoader and the use that default constant when instantiating the Faker generator.. Many thanks @TomasVotruba :). Thanks :). I tried that but couldn't find any easy way for now. We could either have a new markup like:\nyaml\nfoo: <<<'ESCAPED' ... ESCAPED\nor something like that and then in the lexer/parser bypass that expression. An alternative which is already available is to leverage the faker providers to return the string you want which won't be evaluated. >In both cases I would still have to alter all the fields\nUnfortunately yes. It was pure luck that it was working fine in 2.x :/. You could put your string as a returned value of a faker data provider for now. @floplus I would open a dedicated issue for that one. It looks like a bug that can be dealt with.\nAlso I think regardless of the progress of that issue meanwhile we could add a doc entry for it. @tifabien what do you mean?. $ has a special meaning for alice so you need to escape it: \\$. Then it's a user-land BC break and this could be fixed. I think it's reasonable to expect $ alone or with trailing spaces to not be interpreted as a variable. @yakobe most strings should be escapable with \\ as documented. Sometimes the lexer may be wrong in which case you can either do the parameters workaround, have a custom faker provider or attempt to fix it in alice (see LexerIntegrationTest and ParserIntegrationTest).\nThat said there is a release coming where alice just let the string be a string if it's an invalid expression (instead of currently bailing out). I need to test out #938 and then it will be ready to tag. Hi,\nI don't think I can help without more information... What you're doing is the equivalent of doing in raw PHP:\nphp\n$subscription = new SubscriptionItem($plan2_v1, $instanceOrder2->getUid());\n$subscription->setSubscription($customer1_sub1);\nThere is not much more magic than that, but without more complete code samples and config I really can't guess what the issue is.. Closing as I can't help with that for now :( Please feel free to open a new issue when you have more information about it :). I think this example was a bit too wild, in practice the lexer is not good enough and there is still limitations.... This one looks simple enough to make it work, but the alternative in the meantime is to leverage faker providers. I've had a quick look but didn't find a satisfying solution. I'll close however as to me it's part of #601. The current in-house system is to have something somewhat working, but switching to a proper lexer/parser like HoaCompiler with a defined grammar is the way to go to avoid those issues.. You're right. I don't think this can be changed as I believe that was the behaviour since 2.x so I would be up for a new include_once option \ud83d\udc4d . I don't mind features on 2.x, but they must be ported in 3.x as well. Thanks!. Could you try out https://github.com/nelmio/alice/pull/847 as well? I think this will help you as well :). Makes sense. >There is a php_unit_dedicate_assert rule for PHP-CS-Fixer. Should we enable it?\nYes let's do that \ud83d\udc4d . Actually maybe this one is different as I guess if you want a \"\" or '' as a string input the expression should be \\\"\\\" and \\'\\'. Actually looking at this again, this is a legit case. Indeed there is no way to understand that \"\" should be interpreted as an empty string as your expression is strictly equivalent to say \"50% changes of having '<sentences()>' (which will be interpreted) or having '\"\"' which is a plain string. If you want the result to be evaluated in an empty string i think that's the case where a custom Faker provider is required.\n  . The syntax is valid but things only work up to a certain degree (see https://github.com/nelmio/alice/issues/601). An easy workaround in the meantime is to leverage custom Faker providers. Closing as it's part of #601. Thanks for the report! I can't take a look before the end of the month though. Nope, can't do yet :/ I'll try to allocate some time early March but dunno if I'll have time for everything.... @ogizanagi done thanks to @Nijusan :). You're right it should be date_create() instead, could you do a PR for the doc?. Hi. Sorry for the very late reply, I somehow missed your issue.\nThis is actually expected: the loader does not keep references between each loading. If you want to inject a reference, you can do so:\nphp\n$loader->load($files, $parameters, $objects);\n. Thanks!. Hello,\nIndeed as from alice 3.x there is no notion of persistence, it no longer makes sense to have a (local) flag which was used to point if an object should be persisted or not.\nSo this embeddables handling has been delegated to FidryAliceDataFixtures with the persistence layer. It is handled directly in the Doctrine Persister which won't persist those, you can see it here. Exactly as @jvasseur said.\nTaking care of the persistence layer, i.e. making sure those fixtures can be saved in a database with Doctrine or another is a very complex issue. I didn't want to cripple this library with this kind of problem as alice is complex enough as it is. Doing this in a separate library makes more sense, this is why I created theofidry/alice-data-fixtures.\nAs for the usage of embeddables, I have no issue with it :). Thanks!. Thanks very much for looking into this @Nijusan. I'm aware this is a deep dive into the code and takes a lot of efforts. All of that work is very much appreciated.\nBefore I review this however (I'm not in a state to do so right now unfortunately), could you make sure you have a breaking test in LoaderTestIntegration?\nThe reason I'm a bit insisting on that one is because it's the closest you can get in this library to an e2e tests, which are by far the most reliable but in practice often ends up being horribly brittle and slow. Luckily enough, in this library this is not the case, so this test is quite very valuable and worth 10x different of unit tests.\nPutted in another way: this is a kind of situation tricky enough for me to think that unit tests are not reliable enough to make sure we fixed the issue correctly and prevent in an efficient way any regression in the future.. And here we go! Thanks very much. I'll do a release ASAP. There is bound to be some expressions not working properly with the current Expression Language due to technical limitations of the current implementation. But user: '$campaign->user' is a relatively simple case so it should definitely work and if it's not it's a critical bug.\nBut if you don't wanna be blocked until the patch comes you can always use a custom faker provider. Sorry for the late reply.\nIt is weird that you are receiving a duplicate error for the users, did you purge your database properly in-between?. >Looks like for some reason it considers each relation as a new entity and trying to insert instead of update record.\nTo me that's a big smell of a Doctrine misconfiguration/something weird in the entity classes. It often happens when the relations are not set properly or an entity is cloned somewhere.\nYou're workaround kinds of show it actually: you don't just do a persist but you need to re-set and remove values to make it work. If they are all created correctly then a persist on all + a flush should be enough. Now wether or not they are not created correctly comes from alice or your entites I can't tell. Your fixture files look alright at least and what is happening behind at the end of the day should be no more than calling the right mutators. An easy way to tell is to inspect the results of the loaded objects (e.g. by putting a break point). Another solution would be to create a ResolvedFunctionCall or something\nwere the arguments are not deep cloned\nOn Fri 2 Mar 2018 at 23:00, ixarlie notifications@github.com wrote:\n\nI'm facing with the same thing (Alice v3.2.0, Symfony 3, Doctrine ORM 2.6)\nand I think the issue here is the \"deep_clone\" function when using\nreferences (or variables) as arguments in fake providers. The entire\nargument array is \"cloned\", so every reference/variable is a new\ninstance for Doctrine.\nThe debug trace is the following:\n\nFunctionCallValue. As we are using a function call, Alice will\n   create one with next content. (name = getUser, arguments =\n   [FixtureReferenceValue|VariableValue, ...])\nFunctionCallArgumentResolver\nhttps://github.com/nelmio/alice/blob/v3.2.0/src/Generator/Resolver/Value/Chainable/FunctionCallArgumentResolver.php#L94.\n   Each argument is resolved with its argument resolver, then a new\n   FunctionCallValue is created\n   https://github.com/nelmio/alice/blob/v3.2.0/src/Definition/Value/FunctionCallValue.php#L40\n   (HERE WE LOSE KEEPING SAME INSTANCES) to be resolved again for the inner\n   resolver.\nPhpFunctionCallValueResolver -or- FakerFunctionCallValueResolver\n   (depending if you use a native php function or a provider function)\nFinally your provider is called returning a value.\n\nThe \"deep_clone\" line works well when the arguments are still\nValueInterface, but introduces this behaviour in this scenario.\nFrom the easiest to the most complicated workaround:\n\nYou could replace \"deep_clone\" function, with your own\n   implementation, and add it a filter that skips your domain classes to be\n   cloned. (because do some tricks in your domain like make private the\n   __clone method is not affordable IMO)\nYou could decorate FunctionCallArgumentResolver to try avoid\n   deep_clone in FunctionCallValue instantiation once your arguments are\n   resolved.\nYou could extend Alice adding a new custom Flag somehow (requires\n   to decorate SimpleValueDenormalizer in order to read your flags and return\n   a proper ValueInterface for your resolver, simply crazy!)\n\n@theofidry https://github.com/theofidry any other suggestions?\nThanks!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/859#issuecomment-370065214, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gaQYcpccQL1b5Cu5vkWYh1vBsyHKks5tacETgaJpZM4SFIkP\n.\n. Thanks for the detailed bug report!\n\nCould you try to submit a PR with the fix? :) To run the tests to see if that works you can use the make test command. Follow up in #865 . Looks good except a minor comment :). Thanks!. Cool :). I think an exception here is fine, but this bare exception might feel a bit rough. Instead I think we can throw an exception with a more comprehensible message \ud83d\udc4d . Cheers. Oh I wasn't aware of that, I'll update the guide \ud83d\udc4d . Closed by #895 . I completely agree and I attempted several things to have a more comprehensible error message. But not a single time it proved to be useful and I had to take a look at the stack trace as of why.\nOne of the issue is that you can't tell at all from which file the fixtures are coming from: this information is lost and you could very well have duplicates across the files (but if the keys match then you actually have any duplicate in your fixtures).\nThat said maybe we could manage to include for which fixture ID + property it failed when a failure occurs.. @dkarlovi It's hard to know as you may have multiple pass for the value being resolved so if I bail out saying value X, that value may be the result of something else itself not the original one.\nMaybe it would be possible to mention the original value, I don't remember if I attempted this.. Yeah but look at that example, you could have:\nCould not resolve value during the generation process: Could not find the fixture \"challenge_1A\".\nYou still wouldn't know from where challenge_1A is coming from and that might be the result of a processed value.. You mean if we include the fixture ID + property? Yeah that might be enough then. I agree, although keep in mind that fixture ID can be dynamic. I.e. if you get dummy_1 in the log and look for it in your fixture files, you might not find it because it can be the result of dummy_{1..10}. Thanks! I'll probably need to check the other projects as well regarding the link, I added it before we had this symfony.com URL and not updated it since then. Yes, just use Alice 3.x :). Closing then :). Cheers. Indeed! Thanks :). Hi. Actually no optional values right now only support a percentage, see this doc entry.\nI'm not against adding this feature though, so PRs are welcome :). I guess what is happening is the @e1 requires e1 to be instantiated during the first pass but when creating e1 it doesn't get that it can do it in two steps (because of the @self) instead of one.\nDefinitely a BC break and it a valid bug so should be fixed IMO.. @goetas I actually can't reproduce this bug as you can see in #897 :/. Thanks very much, nice work :). Maybe a simple solution here would be a flex recipe. Indeed that way, even though it's the default value, we could make sure that when installing the bundle you have the faker functions registered by alice in there. As a result as a user you would only have to append the blacklisted functions without figuring out the existing ones like current and it wouldn't add any extra work on this library. I think we can indeed add some things in the doc as well :). Thanks!. Being fixed. Note that the issue with the missing current should be fixed with a flex recipe IMO. already done :) https://github.com/nelmio/alice/releases/tag/v3.2.2. Hi, as you can see in #899 I cannot reproduce this behaviour. So I guess there is more to it?. Closing as was not able to reproduce it with #888. Please feel free to open a new issue if you still encounter the bug and manage to get a reproducer. Fixed welcomed \ud83d\ude04 . I don't remember if this was done on purpose. It's quite possible that when I refactored this part I just thought this [having a list of one item] didn't make any at all. But yours example shows the use case so I'm for allowing it :) . that would be a big BC break :/\nI was looking at it trying to find an answer for you but I've just found a way to do it so here's #905. ^^. Thanks :). Hi,\nAlthough in theory possible, I think this is bout to be brittle until #712 is out so I would recommend you to use a custom faker provider instead :). Can I also have an excerpt of LI\\AppBundle\\Entity\\Service in case this plays a part?. Yep :). @reinfi I'm actually not sure this PR is needed :) It was an attempt to reproduce #888 but turns out I cannot reproduce it. It also looks redundant with the existing tests.. I think it served its purpose so closing now. Can you try again with the latest release (3.2.2)?. Then I'm not sure I can help :/\nI don't have enough resources to be able to maintain older versions, so if it's not working on 3.2.2 it's a valid bug that should be fixed but if it's in a prior branch then I can't do anything about it.\nMaybe the Symfony 2.8 compatibility could be added back PRs are provided, but it would be best to make sure this would solve your case first.. Maybe '<{title_<current()>}>' is still not working on master then. I can't check it at the moment but PRs are welcomed. The best way to get started is a quick read of the contributor guide where there is some tips and checking ParserIntegrationTest. I'll do something about it when I'll find some time but frankly speaking it's not on the top priority list as I have a couple of more pressing issues on AliceDataFixtures and HautelookAliceBundle to tackle first. So the best way to make the issue move forward is to help out. Hi @reinfi, thanks for porting that to 3.x!\nTo to be clear on what we want to do, with the following example:\nyaml\nNelmio\\Entity\\UserDetail:\n    # Reference by concrete id\n    userdetail{@user1}:\n        user: <current()>\n        username: <username()>\n        fullname: <firstname()> <lastname()>\n        birthDate: 1980-10-10\n        email: <current()>@example.org\n        favoriteNumber: 42\n    # Reference by a list of fixtures    \n    userdetail{@user*}:\n        user: <current()>\n        username: <username()>\n        fullname: <firstname()> <lastname()>\n        birthDate: 1980-10-10\n        email: <current()>@example.org\n        favoriteNumber: 42\nThe result will be:\n\nuser1 (users are defined elsewhere)\n...\nuserN\nuserdetail_user1 -> actually defined 2 times but only the last definition will remain\n...\nuserdetail_userN\n\nSo the first step is the normalization: the normalization is meant to be a where we transform the data input into a set of comprehensible objects. So here we'll need somehow to interpret userdetail{@user*} in a way so that we can resolve it later.\nFurther in the process, before starting to create the objects, we resolve the FixtureSet where we interpret the templates and co. It is at this step that we will need to resolve userdetail{@user*} into userdetail_user1, ..., userdetail_userN.\nBecause of its dynamic nature, I think this needs to be done it two passes. The first pass would be what is currently done, so the lists like  user{1..10} will be transformed into user1, ..., user10and so on. Only the dynamic range fixtures like userdetail{@user*} will remain.\nWe can then initiate the second pass where we resolve those userdetail{@user*} to transform it into userdetail_user1, ..., userdetail_userN.\nAnd I actually don't think we will need anything more. If you don't want to go too far with the tests yet, I recommend to try to implement an integration test in LoaderIntegrationTest. A single test to try to make this feature work, and then when this is working you can add more tests and cleanup\n. I think we can go through the fixture values to replace the occurrences of <current()> by the reference value. Sorry I missed your previous comment. I'll try to review this before the end of the week!. Thanks very much @reinfi, great work :). Thank you!. Hi! Thanks for you contribution. I'm perfectly fine with the change but it would be neat if you could add a test for it as well. I think a simple case in LoaderIntegrationTest in provideFixturesToGenerate or something like that would do :). Sorry I didn't notice this was for 2.x. You have LoaderTest.php. As it's for 2.x can you double check this is working correctly with 3.x as well? It would be nice to keep the parity as much as possible. Alright, I'll try to have a look this week. I'm ok with the feature but I would like the build to be green first :). Yep, it's probably easy to fix, but it needs to be fixed first nonetheless. Thank you @tifabien!. Many thanks :). \ud83d\udc4d tests seems to be failing with lowest deps though. It looks like we might need to dump the minimal requirements of some deps (likely to be phpunit bridge but that would need to be checked). Great, thanks :). I think this could be done in #871. I'll just keep the issue open to make sure to double check when we implement a solution for #871. I also think we could allow a space... It was a BC break done to normalize a bit things and reduce my workload at that time but I'm fine with adding it back.. I see.\nIndeed this looks silly in this example: it can feel ok to merge it in this case. However I doubt it's easy to tell from where the fixture comes and as such I think we shouldn't change the current behaviour in 3.x.\nHowever if we add a log, we could mention one challenge_1A was overridden and we should document that in the upgrade guide as well.. I'm not sure this is possible unfortunately :(\nThe reason is because when you have challenge_{1A, 2A, 3A} and challenge_1A, both are transformed right away. The second declaration overrides the first one as a \"regular\" mechanism, e.g. if you inject an external object with the same ID the same mechanism appears.\nSince challenge_{1A, 2A, 3A} is just transformed to challenge_1A, challenge_2Aandchallenge_3A` and we loose the information \"it comes from a list\" and the overriding mechanism just happens silently as well.\nSo ultimately a possible solution would be to have some metadata attached to the fixtures to not loose the \"it comes from a list\" information mentioned earlier and eventually log \"this fixture has overridden an already  registered one\". But I have no idea yet how doable it is in respect to BC and uncertain about the performance impact as well. >So having the error in all cases of overriding would be fine to me (as it does not work)\nThe issue with that is even in 2.x there was legit cases of overriding so throwing an error there is a BC break for both 2.x & 3.x. ping @stof . I think we should be able to fix that one. I think both solutions are fine, pick the one you find easier to write :)\nI\u2019m on mail so I don\u2019t have the full thread, but yeah it\u2019s likely this\n\u201cfeature\u201d was lost. I\u2019m using quotes because if it used to work, it was\npurely by luck.\nI think it would be interesting to introduce back this feature but I think\nthis would require to switch to the Hoa Compiler instead of the in house\none for the Expression Language\nOn Thu 2 Aug 2018 at 00:48, Michael Dwyer notifications@github.com wrote:\n\nI was using the debugger, looking for a work-around, and I found out that\nit was parsing it as @gameTournamentToEarlyComplete2->user and\n<($playerPosition)>, attempting to evaluate each and then concatenate\nthem together \u2014 this mirrors the issue author's experience more closely\nthan my earlier evaluation.\nAlso I did find this work-around in case it's useful:\nuserGameTournamentToEarlyComplete1{1..2}:\n    playerPosition: <current()>\n    user: '<(@gameTournamentToEarlyComplete1->{\"getUser${playerPosition}\"}())>'\n\nNot optimal but I like it better than my co-worker's previous attempt\nwhich involved creating a custom provider to forward a request\nPropertyAccess like so:\nuserGameTournamentToEarlyComplete{1..2}:\n    playerPosition: <current()>\n    user: <getProperty(@gameTournamentToEarlyComplete1, 'user', $playerPosition)>\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/912#issuecomment-409750143, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gTBaSqieQQcvhZC0wXdC2pnQM9uFks5uMjBSgaJpZM4S8mY_\n.\n. I think we should be smarter in 3.x and ignore this failing case to take a string instead. Actually I wonder, maybe we should always tolerate failure and interpret it as a string and hook a logger instead?. If you generate an ID for all of those fixtures it's gonna be fine with https://github.com/theofidry/AliceDataFixtures, otherwise you'll have to write your own loader instead to override the existing one.\n\nIf you need more help on this I recommend you to pock the #alice-fixtures channel from the Symfony Slack. I'm not being uncompromising about it but I would prefer to keep the issue for actual issues as opposed to questions :) . If you give the link I can share it in the slack eventually :). Thank you!. It's true with have those casting functions so we should go with that instead indeed \ud83d\udc4d . >Do I need to add the same functionality to FixtureRangeReferenceTokenParser?\nCould you explain in more details what you mean? Sorry I'm a bit out of the context :)\nRegarding the PR all green on my side for now :). Hm maybe it's missing out a test in the LexerIntegrationTest and ParserIntegrationTest. It's weird that this parser is not called at all. Did you try when running all the tests? It's quite possible there is a test covering it which is not in LoaderIntegrationTest. This one is about making sure most of the stuff is working well but a lot more cases are tested out in different unit tests so I would recommend to run the whole test suite and see when it's called. All good then, thanks very much. I'm surprised some of those are not picked by the CS fixer...\nThanks very much :). The implementation looks good \ud83d\udc4d\ud83d\udd25. However it seems like the Parser is not used by default; just to make sure it works you can add a test in LoaderIntegrationTest loading a simple JSON file (I think you have a similar test for a YAML & PHP file). Thanks very much @reinfi :). There is no way Alice can guess which one to use so you have to tell Alice about it in those case. See the related doc entry.  The configuration linked is for Symfony but you should be able to configure it as well with the NativeLoader. But if you use a custom provider you'll need to register it in NativeLoader anyway no? Btw the line is https://github.com/nelmio/alice/blob/master/src/Loader/NativeLoader.php#L571. Your approach is ok, I forgot you could pass the generator in the constructor. But otherwise yes: it may look a bit cumbersome, but that's how it is without relying on services like with the Symfony Dependency Injection Container. Hi,\nPlease provide which libraries and version you are using  (composer show) and you can check the more detailed stack trace with the -vvv option. However note that 3.3 is not supported and without seeing how you are using alice and what your fixtures looks like I'm afraid it's a bit hard to provide any help. Your fixtures look alright at least.\nI can't say anything about your dependencies though: a excerpt of the composer.json only shows your dependencies constraint, not the actual dependencies (and which version) is installed. Use  composer show for that.\nYou should check the values passed toFaker\\Provider\\Base::randomElement() to see what is going on and where the bug comes from.\nAlso note that the way you are loading your fixtures is done with DoctrineFixturesBundle, not HautelookAliceBundle, I really suggest you to make your mind and pick one of them as they are redundant.. So it looks like there may be a BC break with Faker then. This should be investigated. I can't reproduce it with Faker 1.8+ so I suspect it was a regression in Faker which has been solved since then. Thanks for the report, can you just tell me which version of alice is used?. @lyrixx did you check the dumped collection of objects by Alice see if everything is there? The next step which is the persistence doesn't have anything fancy if you are using https://github.com/theofidry/AliceDataFixtures. ping @lyrixx . >Accessing a private property seems to have stopped working\nThis is on purpose although it doesn't appear to be documented in https://github.com/nelmio/alice/blob/master/UPGRADE.md :/ It is still possible but I don't want it as a default: https://github.com/nelmio/alice/blob/master/doc/advanced-guide.md#custom-accessor\nThe 2nd issue sounds legit. Sorry for the late reply I didn't see your question. Doctrine is able to access to the ID as usual (it's a doctrine thing, not alice). You can also manually set the ID but then you should set it for all the fixtures of that class (this is only possible by manipulating the Doctrine class metadata, which is configurable for the whole class only, not specific instances).\nNote however that accessing an auto-generated ID in the fixtures directly is not possible since all the fixtures are persisted together at the same time.. \u00b01 and \u00b02 being a sub-task of #601, I'll close this issue :). Thanks for looking it up \ud83d\udc4d ! Looks good to me except I would also add a test to the LexerIntegrationTest and ParserIntegrationTest as the unit test by itself doesn't guarantee much (the whole expression language behaviour changes a lot depending on how you configure it...). Many thanks!. Maybe #926 helps?. There you go: https://github.com/nelmio/alice/releases/tag/v3.4.0. Agreed, thanks!. Totally #840. There is some noise but the gist of it is https://github.com/nelmio/alice/issues/840#issuecomment-351350938 I believe.. No it should work, it's likely to be a lexing issue. Never mind, the syntax should be <strval(<randomFloat(2, 1, 42.5)>)> not <strval(randomFloat(2, 1, 42.5))> :). I'm not sure how triggering an event would help not to trigger another one.\nIt's likely to be very specific to one's use case. Maybe an easy way for you would be to either manually disable it in a loader (you can decorate loader used with your own) to disable it, or disable it in a specific environment which is the environment you load the fixtures in.\n\nAlso, maybe it's an issue for alice data-fixtures.\n\nMore likely yeah :). My suggestion is creating a new loader class and decorating AliceDataFixtures autoloader (as Symfony service decoration).\nIn it you could somehow try to disable the appropriate Doctrine listeners, but I'm not sure how you can do that it's just an idea I'm throwing.\nThe alternative is for example loading the fixtures in dev or test environment and not register those listeners in those environments. Thanks for the fix! Could you add a small test for it as well? I believe a similar scenario to the one you described in the original issue in LoaderIntegrationTest would be enough. Perfect, thanks! :). Thanks :). Indeed this string would need to be escaped otherwise it's interpreted as for any value. So I would either recommend to try a custom faker provider or help out with https://github.com/nelmio/alice/issues/840 :). Even better :) maybe you can pop a message is the linked issue about it I\nthink they will find it helpful as well!\nOn Fri 15 Jun 2018 at 14:07, Lo\u00efc Fr\u00e9mont notifications@github.com wrote:\n\n@theofidry https://github.com/theofidry Thank you, it works with the\nworkaround.\nparameters:\n     data: '{\"name\":\"Netflix\", \"types\":[\"streeming\", \"video\"]}'\nApp\\Entity\\Test:\n    test_1:\n        __calls:\n          - setData: [<{data}>]\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/935#issuecomment-397614190, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gQiNHaBQ4i8ojk2gJR7LoSgTUqvqks5t87FcgaJpZM4UpP5O\n.\n. There 2 things that can be done: putting a higher max nesting level and providing a greater pool of values. Basically the less choices you have, the higher the chances are to pick a duplicate value. It\u2019s also possible. The best way would be to debug it, there is a\nUniqueValueResolver or Pool which you can check\n\nOn Wed 20 Jun 2018 at 19:26, BigBadBassMan notifications@github.com wrote:\n\nBasically, thats what I tried before.\nI increased the max_nesting_level = 64 and upped the pool of related\notherObj from 30 to 100 - no luck there.\nThe error even happens, when defining something like that:\nrelatedOthers (unique): '2x @otherObj*'\nAnd when dropping the constraint like this:\nrelatedOthers: '2x @otherObj*'\nmy database throws duplicate errors.\nI find it strange, that when sampling two objects from a pool of 50 or\n100, alice still manages to pick the same one. This does not seem like a\nvalid one in 100 chance. (On a sample set of 300 objects with 1-10 related\nobjects each this should not have happend at all.)\nNow, my entities are more complicated than shown above, and have more\nrelations - some of them are circular, unfortunately. But I only the m:n\nrelations give me trouble.\nWhen I change the above statement to an array with a single related object\n([@otherObj*] ), I can persist my fixtures just fine, with and without\nthe uniqe-constraint. Thats why I think that the culprit is not in my data\nmodel or relations, but with alice's randomness - or generator logic.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/936#issuecomment-398850022, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gUI3MPU5o10tpO88JgI6ETLmYX-qks5t-pPUgaJpZM4UvOzN\n.\n. Ah I see, thanks for digging into this.\n\nI'm a bit conflicted because I'm afraid there's cases where you expect comparison by values, i.e. you provide a pool of objects and you want to compare their values not their references but it will bail out on incomparable objects like you have. >Thats why you're chief of staff ;-)\nIt's not like I have been appointed for it :) I just happened to want some changes pushed and manage to get them \ud83d\ude04 \n\nDoes your test suite cover this with the current comparison operator? It should bail on changing the operator, if some fundamentals break, somewhere.\n\nI honestly do not know. If you can open a PR for it would be great, the tests will say if it's covered or not and if not we can try to include this fix and see if it causes issues to other people or not. It's a case were deciding or not if it's a real BC is defined by the users. I don't think it should. This guard has been put there because with the tested code a different situation would be unexpected. So this means chaining references like this is currently not supported, but by the look of it that should be a situation not too complicated to fix.. I don't really have the time to work on it. So unless a PR is made for it I'll close it as part of #601. > needs custom compare-function doing strict compare on all properties, not the objects itself.\nI'm not sure to follow: either we compare two objects by equivalence or by reference and in the later it doesn't matter if they are equivalent or not. @BigBadBassMan what's the status of this PR?. Thanks for the update :)\nI'm fine with the changes and the new dependency, I would however require a test for it otherwise the change would both be undocumented and subject to regressions\nEdit: if that can be done soon I can include it in the next release :). Sorry I was confusing. I meant test for the change themselves not the added dependency per se. In #936 you showed there was a case of infinite recursion resulting in a fatal error before. I think you could add a test in LoaderIntegrationTest like here. A good way to check if your test is correct is to put back the original code (the == comparison) and making sure it bails out and once you keep your code, the test should now be green. ping me on Slack if it's not clear enough (the link is in the readme). Thanks!. > I tried to put the id in the atribute, but received a error for trying to use integer where a Object is expected.\nThe reason why you didn't see any doc about it is because it's entirely up to your and your app. You need to imagine that behind it, it's plain PHP, so if you have a setId(ObjectId $obj) you will need to set an object not an int. One way to do those things would be to create a custom faker provider. >Upgrading from 1.5.*@dev to v3.1.3 introduce some bigs changes.\nIndeed...\n\nFiles data are added in database in reverse order\n\nWhat you are describing is a bit different: it's about the files imported by your fixture files. I can't remember if that was deliberate (for a peculiar feature or BC with 2.x) or a mistake. The best way to find out is to try the change and see if the tests break. You might want to take a look at #945 for some details regarding the order, there was a bug there. Hi Thomas,\nUnfortunately Alice is not quite aware of this kind of data. You will have to look at Faker which is the library used underneath for that and double check the different versions as maybe it has already been fixed.\nBest,. I'm gonna have a look at the logging thing we discussed about and #938. So hopefully this weekend. It should be possible to some extend with optional data and if the condition hits the limit of the lexer, a custom faker provider can do the job as well. An example with a custom faker provider would be:\nyaml\nNamespace\\Of\\My\\Entity:\n    entity__{1,100}:\n        first_field: '0'\n        second_field: <myFakerFunction($first_field, \"Something\", \"else\")>\nand you handle the logic in myFakerFunction(). Sorry I can't really dig into it more than that at the moment. ping @bastos71 . I'll be closing this one for now, if there is something else still just tell me and I'll open it again if necessary. I tend to disagree since handling circular or inter-dependent fixtures with\nDoctrienFixturesBundle is really awkward, but that's a question of taste I\nguess :)\nOn Mon, 22 Oct 2018 at 09:47, Bastien Serprix notifications@github.com\nwrote:\n\nHi @theofidry https://github.com/theofidry,\nSorry for the late answer.\nIn fact after analyzed the situation with my team, we decided to migrate\nto raw Doctrine Fixtures, still using Faker to create data.\nI still think nelmio/alice is a good bundle but for simples fixtures, for\nmore complex ones I think it's a better idea to use simply\nDoctrineFixturesBundle\nhttps://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html\nThx again for your time :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/948#issuecomment-431761478, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gcu6zTF1k5NnrmK02b4shFW--qITks5unXgLgaJpZM4WPQ2F\n.\n. thanks!. Thank you very much @BigBadBassMan . There is two solution:\n\n\nImplement the configurator feature (see https://github.com/nelmio/alice/issues/265#issue-106357360), close to the custom setters from 2.x but where you would get the whole object instead and so would have complete freedom on it\nAdd support for self-reference keys\n\nUnfortunately I cannot really point where to go for the work to be done, one just really need to dig into it. That said the contribution guide should help out with giving an overview of the architecture.\nAlso note that while I'll gladly accept a PR, I don't really want to work on it myself due to lack of time. I don't think there is a feature for it yet. Thanks for checking it. Hi,\nSince I'm the maintainer on both package I would rather have only one issue. Also since nelmio/alice 3.x has no concept of persistence whatsoever I highly doubt the issue is there :)\nSo I'll be closing this one, let's keep it going in hautelook/AliceBundle#413 and a new issue can be open in the appropriate repository once we found out what the problem is. Yep with a tenary operator\nOn Thu 27 Sep 2018 at 18:13, Asmir Mustafic notifications@github.com\nwrote:\n\n@goetas commented on this pull request.\nIn src/Generator/Resolver/Value/Chainable/EvaluatedValueResolver.php\nhttps://github.com/nelmio/alice/pull/955#discussion_r220986552:\n\n@@ -58,6 +58,10 @@ public function resolve(\n         $_scope = $scope;\n         try {\n             $_scope['current'] = $fixture->getValueForCurrent();\n+\n+            if ($_scope['current'] instanceof FixtureInterface) {\n+                $_scope['current'] = $fixtureSet->getObjects()->get($_scope['current'])->getInstance();\n\nWith using a ternary operator? Do not understand\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/pull/955#discussion_r220986552, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE76gS3FmNaqNj7YEex0GD52qSnijQekks5ufPkPgaJpZM4WxzP6\n.\n. Fair enough, thanks for the patch!. the syntax should work so I would say it's a limitation of the current lexer/parser which can be solved in 3 ways:\n\n\nuse a faker provider as a workaround: you can handle the percentage of chances there as well\nadd a failing test case to nelmio/alice and try to solve it, I would recommend to look at Lexer and ParserIntegrationTestCase\nhelp with the real fix: #712. Closing as the real fix IMO is #712 at that point. Yes that can be done. PRs are welcomed :). Hi, IIRC those probabilities are handled by Faker so I would check there. But in any case this is alice 2.1.4 which I'm not willing to maintain for various reasons. I can still accept PRs on it if the build is green, but I won't work on it. Hi,\n\nIf it is alice 2.x I have no idea. In 3.x it is a bit weird since either you have only doctrine objects and embeddables for your VOs or you don't use doctrine at all. It's a bit unexpected to have a mix.\nThat said in 3.x you can use the nelmio/alice loader directly which does not care about the persistence at all: it just generates the objects. I hope I answered the question. If you need something more specific, feel free to ask questions on the Slack channel or open another issue. yes it should rather be [] !== $container->findTaggedServiceIds('nelmio_alice.faker.provider'), could you provide a PR for it?. Thanks you!. What you are currently doing is equivalent to:\n```php\n$device_user1 = new DeviceUser();\n$device_user1->setAreaId(10);\n...\n$game_device1 = new GameDevice();\n$game_device1->deviceId($device_user1->getId());\n...\n```\nWhich is incorrect since I guess what you imagined would be:\n```php\n$device_user1 = new DeviceUser();\n$device_user1->setAreaId(10);\n...\n$entityManager->persist($device_user1);\n$entityManager->flush($device_user1);\n$game_device1 = new GameDevice();\n$game_device1->deviceId($device_user1->getId());\n...\n```\nBut nelmio/alice does not care about your persistence layer at all: it creates your whole graph of objects first and don't persist things mid-way (otherwise this causes hell for many relationships, circular references and others). So you either need to:\n\nAllow to set your entities ID before persisting them for your objects to be manipulable before being persisted. A better way to do this is to use UUIDs instead of auto-generated integer IDs.\nSet your relations via objects not references, i.e. do $game_device1->setDeviceUser($device_user1) which translates to device: @device_user1. Thanks for the fix!. that is... really weird, from where does the error comes from exactly? Alice or the Yaml parser?. Does:\n\nyaml\nclient_contact_log (template): \n    __construct: ['<numberBetween(0, 10000)>']\nWorks?. If that's easily doable then yes. If not I think the current patch is good as it is: if windows users feel differently then they would need to step up and help out with the windows support :). Looks good to me. Thanks for the patch!. Is the bug still there when not using collection?. Err, what does Stva#$zlds has to do with the above?. Hm I see, thanks for the detailed report and managing to point the exact issue.\nThe original idea behind the deep cloning was to achieve real immutability. There was various ideas of using the FixtureSet relying on it being an immutable \"tree\". It was also a wish of mine to push for a lot of small classes and heavily relying on testing, immutability and final classes. alice 2.x was design-wise much simpler, but very flawed and impossible to debug. 3.x is certainly way more complex in terms of design/architecture (for a similar feature-set), but at least it more testable, extendable and deterministic.\nThere's however been a lot of changes and I've not managed to free as much time neither as much need to really take advantage of the whole design. So I think regarding the immutability of the values there is some stuff to reconsider. I wouldn't go as far as removing the deep cloning everywhere as I'm certain it's being used in some places, but at the very least I don't think non definition values, such as injected & resolved objects should be deep cloned. And this should I think solve your issue. >So if I understood correctly, a potential fix would be checking whether the passed value is some instance of the alice package or a foreign object? \nYes\n\nBasically, the __clone method of each alice class that can be passed as value should recursively clone their wrapped alice class, but not a foreign object?\n\nI would be a bit simpler and just look up the ValueInterface children classes and only do the deep clone if not an instance of ValueInterface. Thanks!. Thanks for the report! I'll look it up ASAP although I must say that I need to take care of a couple of things in AliceDataFixtures and HautelookAliceBundle first when I manage to free some time (this month is quite busy).. >What I wanted wanted to know is why there is NativeLoader $fakerGenerator argument in constructor and what is its purpose and some general direction how could i help\nThe NativeLoader class is when you want to use Alice without the framework bridge (e.g. the Alice Symfony bundle NelmioAliceBundle) or when no framework bridge is available. I.e. it's just a helper to make the library usable without any framework.\nThere is a $fakerGenerator injectable in case you want to have full control on it but I would definitely recommend to extend the NativeLoader and override the createFakerFactory() method instead. But maybe injecting the faker generator is too error prone and should be deprecated.... >The AliceProvider is not added to Faker\\Generator when passing custom instance.\nThen let's deprecate injecting a custom faker provided since it's more error prone than anything.\n. Thanks for the report. It's a curious issue, but in the first example, this looks like a YAML parsing issue as:\nyaml\nAppBundle\\Entity\\Media:\n  media-1:\n    __construct: { 'AppBundle\\Fixture\\Factory\\MediaFactory::create': ['<username()>']}\nis parsed correctly unlike the example you gave. I do not know if it's expected or not but it might be worth checking or alternatively update the documentation to make use of the quotes where appropriate.\nI suspect the __factory issue is related. It should be possible, that's a proper bug that needs to be solved. A faker instance is created [there](https://github.com/nelmio/alice/blob/master/src/Bridge/Symfony/Resources/config/faker.xml#L19-L30  as nelmio_alice.faker.generator or Faker\\Generator (for autowiring support) and the providers are registered here.\nSo it should work as expected, if it doesn't you'll need to debug those two pieces and see what's going on.. It might be worth checking what instance of the Faker generator you are using. >My question is, why do you do a new instance of Generator() instead of get it from symfony container ?\nWhat do you mean?. >In the create methode you instantiate a new Generator() instead of\nBut which create method?. >I notice that the method create from the class Faker\\Factory get a new instance of Generator :\nUnless I misunderstood that sentence: this is the base Faker factory, it's a third-party library I have no control on. A generator instance is created with that factory and injected to the container as 'nelmio_alice.faker.generator' and then it's configured.. NativeLoader is for allowing the library to be used without a DIC. Although there is a Symfony bundle, it's a library and is usable outside of Symfony.\nSo you either get your Faker generator instance from the container in which case it should already be configured, or you bypass it completely and use the NativeLoader but in which case you need to manually add the providers like you did. If you have Symfony, you can retrieve the generator from the container, generator which is easily configurable since it's a service.\nNow if you don't have Symfony, or if you want to use Alice in a place where the application is not booted, e.g. a unit test, you can make use of the NativeLoader instead (but then you need to make sure it's configured as desired). I guess the issue is that '@author*' covers authorAge... Until someone works on trying to make the wildcard smarter by making use of the types, this is unlikely to change.\nSo an easy fix is figure out a different name, at least for your fixture keys, to no conflict this way :). Thanks. I don't think it hurts but I would check that the current configuration still works. I don't remember if I was enforcing anything or just checking it occasionally . Thanks \ud83d\udc4d \nWill merged and release that this week/weekend. Thanks for the PR! Do you mind adding a test for it as well to make sure there won't be a regression in the future?. Thanks a lot! Sorry I was not clear enough: whilst the unit test is really nice (and really good job for it!), I would really like to see an integration test for it. Indeed it's a component for which how it's configured matters a lot.\nThe best way to go I think would be adding a in this test.\nIf you can make it this week, I think we can expect a release this weekend. If not no pressure: it's just gonna be for later :). Thanks very much!. Thank you very much :). Fix indentation?\n. Is the flush parameter necessary? It should always be true no?\n. I don't really like this part: L79-L86. It's about checking if the fixtures files really exists, which is IMO not the responsibility of the loader.\n. What I meant there was that rather changing the behaviour of the persist, we should keep the flush separately. I haven't checked if it was used anywhere but seems not\n. Yep. I don't personally have a string opinion about wether an exception should be thrown or null returned, but it's better to stay consistent\n. ? You mean the type check or the flush thing?\n. Err, does the persist have to return something actually?\n. Erf true. Should we let the exception for now and add a deprecation notice?\n. As a Doctrine user I find that more confusing than anything. But then again changing this causes some BC break. Not in the library itself neither for people using Fixtures. So theatrically it may break something for someone.\nWe can also keep the current behaviour for now and add a deprecation notice here too (I'm getting the feeling I'm only talking about deprecation tonight).\n. why the space after?\n. I agree for the @param, but not for the comment: it doesn't add any value here so just end up creating some noise\n. My proposal:\nphp\n/**\n * References are objects which the loader is aware of while loading fixtures.\n *\n * For example, while loading a file, a fixture may have a mask \"@product_0\". If no such fixture is present in the file, it will result in a failure, but provided a product object with the name \"product_0\" via this method will resolve the issue.\n *\n * @param object[] $references Array of object where the key is the name of the reference\n */\n public function setReferences(array $references)\nOr something alongs those lines (fix the indentation line/return, kind of hard to do on GitHub :p)\n. Maybe add a mention on which file are supported? If that's not the place for it add a link to where to find this.\n. array of what?\n. array of what?\n. Same as https://github.com/nelmio/alice/pull/264/files#r39392785\n. Same as https://github.com/nelmio/alice/pull/264/files#r39392785\n. how come we have to precise the type here for $values, shouldn't this be specified in the doc of ::getValue()?\n. why both array and string[]?\n. Well, actually I don't know, if its jut string[] yeah, if it can return something else we have to specify it too, but array is way too unclear\n. Then something like \"check the parsers registered to know which files are supported\" would do\n. Yeah you're right\n. I would put \"see the example above to see the expected format of a raw data\" and put an example under a @example tag. A good example would say far more than lengthy explanation\n. :skull: \n. we shouldn't enable PSR-0 should we?\n. It might be worth to remove PHPUnit form the dev package?\n. it looks like this operation could be cached somehow and not being called at each persist.\n. ah nvm, you're doing that in the function.\n. $newData is unneeded, you can use $includeData right away\n. this if/else can be avoid by using a ternary operator:\nphp\n$newData[$class] = (isset($newData[$class])) ? array_merge($newData[$class], $fixtures) : $fixtures;\n. Why this additional assertion?\n. > but it is useful to get the differences in output.\nWhat do you mean? In this case they do exactly the same thing as they are arrays and not objects, the only difference is that === will make sure they are of the same type, hence array here. As you're giving the expected result (which is a non-empty array), this check is unneeded.\n. To me it's just that in this case if the name is not clear enough it should be changed in the signature :)\nThat being said I'm saying that because I find this line useless that's it. If you or @tshelburne find it more clear to do it this way I'm fine with it.\n. > it will not check if the order is the same.\nBut [1,2] == [2,1] will return false, regardless of if you are using == or ===. That's why I'm a bit lost with your explanation.\n. Ok fair. But do we have to test the order actually?\n. > Do you think it would be better to use assertEquals() + assertTrue() or assertSame() only ?\nI think we can go for the later. If we want more details on the error for debug purposes we can change it locally for debugging :) That being said I don't have a strong opinion on that one.\n. I'm sorry I just find this a bit confusing, could you explain what the result is?\n. should be a comment not a PHPDoc block (/* @var ... */ instead of /** @var ... */)\n. is this bit part of the new feature as well?\n. cristal clear :) I still find the syntax a but confusing, but I've got nothing better in mind :/\n. @author TBR\n. The name might be confusing:\n- When using it without aliases, you have ExceptionInterface, InstantiatorExceptionInterface would maybe be clearer\n- It's weird to have Exception when technically speaking it's a Throwable, should be renamed to reflect on that?\n. notable change with the original class: the try/catch block\n. kill @author\n. kill @author\n. rework of the old Instantiator class, there is little differences except that it's immutable\n. maybe should be changed to return object instead?\n. should be renamed PhpUnit or Assertor, Assert::assertIsA() doesn't look good\n. let's put it as final\n. needs an empty ending line\n. should be ported to 2.x as well\n. maybe the example makes it very confusing as you are using the reference user for a fixture with the name user. You example with care made much more sense to me.\n. What about:\n```\nYou can also refer to other fixtures as a range. For example the following example:\n... your YAML example here\nWill generate X car and Y engines.\n. I would remove the PHPDoc here, he doesn't tell anything about the function that's not already included in the method signature.\n. is it fine to have it case insensitive here?\n. maybe for the sake of readability, add a inline comment about what could be `$referenceName`, ex `// 'car' from engine_{@car1}`\n. should use `===` instead and yoda style please\n. you could do a `return $fixtures` after L54 to avoid to have a `else`\n. add space between L52-53: maybe it's a personal preference but I find it clearer that way\n. php\n$fixture = new Fixture($class, $currentName, $spec, $instance);\n$fixtures[] = $fixture;\n```\ncan be replace by:\nphp\n$fixtures[] = new Fixture($class, $currentName, $spec, $instance);\nSame for the one in the else\n. one line return is enough here, no need for two\n. ~~$om~~ $managerMock\n. remove L33\n. instead of having this try/catch block, you can add @expectedException \\UnexpectedValueException to the method PHPDoc\n. same as https://github.com/nelmio/alice/pull/315/files#r62271527\n. so what happens if you have:\nyaml\n\\Nelmio\\Alice\\support\\models\\User:\n  user{@user*}:\n    uuid: <current()>\n    username: <username()>\n    fullname: <firstName()> <lastName()>\n    birthDate: '80%? <date> : 0000-00-00'\n    email: <email()>\n    favoriteNumber: 40%? <numberBetween(1, 99)>\n? (I would expect an error is that right?)\n. could you add a test case for it?\n. needs an empty line at the end of the file\n. let's put L48-L63 in a separate private function, e.g. buildAll()\n. yoda condition\n. null !== $currentValue\n. let's keep consistent with the rest of the project and prefix the test methods with test instead of using the @test annotation\n. testThrowExceptionWhenReferencesAreNotFound(), same for others\n. besides testing that the constructed objects are of the right instance, it would be good to test the result value of <current()> for the Group entities\n. thought about it: must also be tested when the referenced ranged is defined by a range list (user_{alice, bob}).\nAlso worth to add a test with a third reference list defined in the same fashion\n. but you are just testing that $groupReference->getOwner() returns a user, in this case it's not enough: it's must be a very specific user right?\n. Needs to be added to the changelog\n. To be changed: can be composed of letters + digits + ., _, / and must contain at least one letter\n@tshelburne would that change be cool with you?\n. @tshelburne I know you're very busy, but I would like you to review that one as it's a fairly big changed. The idea in this class is to provide a full list of possible values which will be used for tests. I'll add comments below to explain the format. There is BC breaks. I avoided them at all cost in favour of deprecations, but there is a few of them that are, IMO more bugs. Still, it's my opinion and I may have got a few things wrong, so please do check that one in details.\n. the first key is just to categorise the whole block\n. the format is:\nphp\n'title of the set of data' => [\n  'name of the fixture',\n  [ expected fixtures ], // null if no builder/method can build it\n]\n. non acceptable BC break, should be fixed\n. Notable changes with the system prior to that PR:\n- user_{alice, bob,} previously was building a reference named user_{alice, bob,}. Now builds that as a list, i.e. result in user_alice and user_bob. A deprecation warning is also thrown to warn the user that the list is poorly formatted and an exception will be thrown in v3.\n- user_{, alice, bob}: same as previous case.\n- user_{0..2}: value for <current()> were respectively '0', 1, 2. Now are all strings as states the phpdoc. Changed in #339.\n- user_{0....2}: was generating only one fixture named user_{0....2}; now is equivalent to user_{0...2}\n- user_{2...0}: as reported in #358 was generating 4 fixtures... now is equivalent to 0...2 which result in user_0, user_1 and user_2\n- user_{2...2}: was generating two fixtures user_1 and user_3, now doesn't build any (the segment is [2;2[ so contains no element)\n- user_{0.2}: was generating a fixture named user_{0.2}. No doesn't generate any.\n- user_{2..}: was generating a fixture named user_{2..}. No doesn't generate any.\n- user_{-1..2}: was generating a fixture named user_-1..2. No doesn't generate any. Same goes for all ranges containing a negative number\nYou can guess that they required to drastically change the behaviour of the Builder methods, which is a BC break. However as it's a fairly low level thing and this is necessary to fix those bugs, I reckon it can be changed?\nMakes me thing that those Methods should be annotated as internal.\n. I think we need a more complete test for that one, e.g. add another non unique field to the template. It would be also good to have another example with two level deep, i.e.\n- template1: 2 fields with unique, 1 without\n- template2: extends template 1, override 1 unique field to make it not unique, add another unique field\n- 3: extends template 1\nDon't hesitate to create dedicated entities for it if needed\n. TBC: allow case\n. remove that check\n. To be removed\n. ~~Parser \"%s\" is not.~~ Got \"%s\" instead.\n. throw a ParserNotFoundException (which could extend \\RuntimeException)\n. Should be extracted in another parser or class dedicated to process the includes. The reason being is that the way the filepath is being resolved should be customizable; cf. https://github.com/hautelook/AliceBundle/issues/203\nex:\n``` php\ninterface IncludeProcessorInterface\n{\n    public function process(ParserInterface $parser, array $data): array;\n}\ninterface FileLocatorInterface\n{\n    public function locate(string $file): string;\n}\n```\nThis would allow two things:\n- Let the user customize the way the include statement works. For example in Symfony YAML files are included with the following notation:\nyaml\nimports:\n    - { resource: '../common/config.yml' }\n    - { resource: 'parameters.yml' }\n    - { resource: 'security.yml' }\nSo in AliceBundle, it would be possible to use this notation instead  which would be more consistent with the framework.\n- Let the user customize the way files are resolved which would make things like https://github.com/hautelook/AliceBundle/issues/203, doable.\nI don't think this would require much extra work and this would greatly simplify RuntimeCacheParser to let him do what he's meant to do: caching results.\n. @tshelburne will you have time to review this one in the coming weeks?\n. can return null if no result\n. I think we can rather do the cast in ::singularize() to change the current return value string|null to string[], it will make things a bit less confusing\n. Could you also fix the return type in the phpdoc to string|null?\n. why does singularizeClass and singularizeMethod should be class properties? Couldn't they be regular variables?\n. Ah fair I didn't think of that use case. That said, we are using only 1 instance of ArrayAdd, so if left as it is you could end up using the reflection class of another class than the one checked.\n. As you have only 1 instance of ArrayAdd used for all objects, if you leave two objects Dummy and AnotherDummy, when calling findAdderMethod() on a Dummy object, you will have ArrayAdd#singularizeClass === 'Dummy'. This is fine if the next object called is a Dummy object, but when the next object will be AnotherDummy, findAdderMethod() will return a false result.\n. Oh I see my bad. Erm in that case this could done in the constructor? If done in findAdderMethod() it has the benefit to be done only if required but you have an if check on each usage.\n. in this case a return would be more clear IMO\n. php\nreturn (null !== $this->singularizer)\n  ? (array) call_user_func($this->singularizer, $plural)\n  : []\n;\n. @var <string, string>|null Class method pair, as it's a private property it's ok\n. TBR\n. why the array_reverse? This will mess up the extending order which can be very problematic\n. > I'm personally not in favor of using engineered solutions in tests (factories, etc.) since it makes things a bit more opaque\nI feel the same, duplication is not bad in tests. However in this case doing it feels... overwhelming. The idea was to get a complete list of references somewhere which can be used and re-used. Sometimes the whole thing (for integration tests), sometimes just some bits (for some unit tests). The idea is that unlike the integration and unit tests, they will be portable to v3 as well.\n. I would like to keep it to show what it should be... but I can understand that people don't want comments\n. true\n. you can add the typehint in favour of the phpdoc here. $counter? Even if we don't know the counter of what we would at least get that it's a number. remove the brackets, they are here for when there is text:\n```php\ninterface IFoo\n{\n  /*\n   * Something\n   /\n  function bar();\n}\nclass Foo implements IFoo\n{\n  /*\n   * @inherit // equivalent to \"pick all the stuff of the parent method\"\n   /\n  function bar();\n/\n   * {@inherit} // equivalent to \"replace this bit by the stuff of the parent method\"\n   \n   * My comments/phpdoc\n   /\n  function bar();\n}\n/*\n   * My comments //ignore the phpdoc of the parent method\n   /\n  function bar();\n```\nI've taken that from a draft of the PSR-5, it's still a draft so may change, but as the whole project follows the convention I would prefer to keep it (changing it doesn't make much sense at this point IMO). same as above. same as above. same as above. same as above. This class is temporary, as you implemented CallerInterface with SimpleCaller you can remove it now. is this necessary here?. I don't think we need to add the method name to the scope. When we inject a property value, we do so because we may need the evaluated value later:\nyaml\nDummy:\n  dummy:\n    foo: '<evaluate_foo()>'\n    bar: '$foo' # value of '<evaluate_foo()>' (which may differ from '@self->foo')*\n*: @self->foo will try to access to the foo property of the object, which might have a different value if the value has been set via a setter which doesn't just do a $this>foo = $foo.\nWhat you are doing is enabling:\nyaml\nDummy:\n  dummy:\n    __calls:\n      - setFoo: [ '<evaluate_foo()>' ]\n      - setFoo: [ '$setFoo' ]\nwhich I don't think is very useful and even error prone as as you can see in the case above, you may override the value if doing successive calls. to be consistent with the existing codebase, I would add a /** @var Dummy $dummy*/ inline phpdoc between L73 and L74. I would put shouldBeCalled() here as when you are creating the prophecy, you don't care of how much calls are being made at this point, it's a check you are doing in the end. So at the end of the test you should add:\nphp\n$dummyProphecy->setTitle(Argument:any())->shouldHaveCalledTimes(1);\n$dummyProphecy->addFoo()->shouldBeCalledTimes(2); \ngranted that in this case, this might seem a bit redundant, but it's a practice that usually makes it easier to follow IMO, and again let's try to stay consistent with the codebase. I would add a second call on setTitle to make sure the second overrides the first. you should return [$methodCall->withArguments($arguments), $fixtureSet]. The reason $result contains both the a value and the set is that the set may have changed during the resolution. A simple example:\nyaml\nDummy:\n  dummy2:\n    __construct:\n      - '@dummy1' # while resolving the value, the fixture `@dummy1` will be generated\n  dummy1:\n    foo: 'foo'\nAnd if the $fixtureSet is not properly updated, when it will be the turn of dummy1, instead of finding the object already generated, it will generated again (which will also break the dependency between dummy2 and dummy1 as dymmy2#dummy1 will no longer be dummy1). Ah I missed that, yes please, I prefer explicit returned values over passing them by references :). Ah right it's needed for the EvaluatedValueResolver. Could you please add a test case for that in the integration test to not forget about it? Something like this should trigger it:\nyaml\nDummy:\n  dummy1: {}\n  dummy2:\n    __calls:\n      - setRelatedDummy: [ '<(@dummy1)>' ]. the semi-column should be on the new line (yeah I know not everyone likes it, but let's be consistent :P). I prefer the:\nphp\n/** @var DummyWithGetter $dummy */\n$dummy = $dummyProphecy->reveal();\nconvention as you don't have typehint warnings for the services with static analysis tools. the project convention is to use false === instead. I think this check could be avoided or rather done in the catch block below. That way you only check when there's an error hence there is not performance impact for the regular user, and the for the one who did a mistake it stays as user friendly. testThrowsAResolverExceptionOnError? (error to be taken in the english sense, not the \\Error object). $this->assertSame(). ~~$ex = new \\Exception('Inner exception')~~ $error = new \\Error(). there is not previous in that case? (if so I think a $this->assertNull($exception->getPrevious)) would be appropriate. could you check if there is a test for a method taking a parameter? If not I think it's worth adding as well in that PR. I must say I'm not a big fan of that solution for two reasons;\n\nIt requires a download on each build. You could move it in a special directory which is cached to avoid that but then comes the problem of managing that cache: when do you invalidate it i.e. when do you download again that file?\nIt is no longer tracked in the project, i.e. a contributor (myself included) no longer knows that this tool is being used before submitting a build.\n\nBoth can be acceptable tradeoff to be fair, but I think an easier solution would be to add oradwell/covers-validator in a dedicated bamarni namespace (as it is done for symfony and the mutation testing), e.g. covers-validator. To be honest I think this is what should have been done in the first place, my bad for not noticing and flagging this in the PR introducing oradwell/covers-validator.. is that change necessary?. Ah I see it becomes strict by default in 6.0. Fine then :). I think this change should be reverted. The parent signature is public function withParser(ParserInterface $parser): static so self is acceptable besides being more flexible than parent. I didn't know you could use parent though so nice to learn :). \ud83e\udd26\u200d\u2642\ufe0f looks like a dumb copy/paste. Doesn't the --ignore-platform-reqs option of Composer allows to get around that?. so this is not needed right? \ud83d\ude1b . \ud83e\udd14   I would remove the : self in the AbstractChainableParserAwareParser then. which makes perfect sense, I think I didn't read the message properly when I copy/pasted it there :). if the preg_match change is deprecated I would not change that yet, it wouldn't be the first time such things are reverted and I didn't see much discussion in https://github.com/php/php-src/pull/1303.. useless blank line. while we are at it let's add a blank line here between the two if :). I would rather create a new exception for the resolver context: it's doesn't make sense otherwise. you should add a test with a private static property. (CS)\nphp\n$getPropertyClosure = \\Closure::bind(\n    function ($object) use ($propertyPath) {\n        return $object->{$propertyPath};\n    },\n    $objectOrArray,\n    $objectOrArray\n);. php\nreturn (new \\ReflectionClass($class))->hasProperty($propertyPath);\n(I would keep the $class though). hm, the order doesn't seem right, I really need to add a StyleCI.... Shouldn't it be able to read it?. I kinda prefer being explicit instead of using !, as it's the current convention I would prefer not to change it at that point :). yeah, I would like to switch to snake case as for php spec, this would already be somewhat more readable... but I don't have the will to update all the tests for that^^. an email could have a non ASCII character, so a-zA-Z is wrong as \u00e0 for example won't work, hence p{L}. given the issues we had, feels like we should add a few more tests with exotic emails (with non ASCII characters for example). I could be ok with that, but I think we need way more tests regarding emails to be able to tell if it's alright or not. Also correct me if I'm wrong but it's about auto-escaping emails, so for tricky edge cases one could always fallback to manual escaping e.g. a\\@b.c. I think auto-escaping is fine. Most people use regular emails or faker generated emails, it's ok for the 1-2 people using complete alien emails to not benefit from it. it also returns null if no class is found. CS, let's keep the braket on the same line. same here (CS). your changes seems to account for setValue() but not getValue(). we should add a test for protected as well. could we add a test with a second child which overrides the private and protected properties of the parent to ensures the one of the child are being used?. findParentClass($object, string $property): string. false ===, I know it doesn't matter much but I prefer to keep the codebase somewhat consistent :). - import the exception\n- use sprintf rather. I would make it a link: [See the original discussion](https://github.com/nelmio/alice/issues/654). Do you know if a deprecation is provided in 2.x for that? I would expect one, otherwise could be nice to add it.. Good catch, thanks :). I'm really not a big fan of that change, I find it much less readable and makes less sense. I would keep those parenthesis, they are here for readability. same here: I find it easier to read with the parenthesis. keeping a FQCN is better here as it is way more easier to follow. I agree with the practice in general, but for this case I find it more harmful than anything. It is easier to follow the FQCN (as you don't have to look up for the use statement) and a lot of classes have similar names and using use statements may require aliases. As it's only for those tests, I don't really want to bother with the names.. I genuinely find it easier to read something like\nphp\nreturn (\n    'foo' === $foo\n    && 'bar === $bar\n);\nthan:\nphp\nreturn 'foo' === $foo\n    && 'bar === $bar;\n(not the best example as in that case it could be easily inlined though).\nThat said we might just agree to disagree, I think it's very subjective for that one. I may be mistaken but I think that's a PHP-CS-Fixer thing not PSR-2, or then the PSR-2 doc needs to be updated as a few examples are using that CS as well. that's specific to that file only for those fixtures though :). I think there's a little error there :). I'm a bit confused by this. IIRC the $needsCompleteGeneration flag is just to say \"get this object, but fully instantiated\". So your added code reads as \"if the object doesn't need to be complete, mark it as complete\" and that wouldn't make sense. Maybe the reason why the tests still pass nonetheless are that I think this test is incomplete. The bug is that in this context, the object ($anotherDummy) is getting initialised + hydrated twice (instead of once \u2014 this is the bug) + getting the function calls.\nI think the current tests don't account for the last call, so what I'm afraid is happening right now is initialised + hydrated (once \u2014 fix) ~~+ getting the function class~~ (and this is not good)\nSo if my assumption is correct, if we add a function call, e.g. DummyWithThrowableSetter::complete() to $anoherDummy1 the tests would fail again with your current patch.\nProvided the above is correct, we need to find something else to fix this. I can't take a look at the moment, but the issue is that $anotherDummy1 is required at some point, it is getting initialised and everything, but for some reason even though it has been created as a complete object it has not been marked as such.. Ok let me rephrase it.\nSo we have two things here: the objects and the fixtures. The fixture describes what the object looks like (how it's constructed, initialised etc.). So what alice do is:\n\ngo through each fixture\ninstantiate the object for each fixture (this is the first pass in the objects generator)\ngo through each fixture again an \"complete\" the objects which involves two steps:\nhydrating the object\nconfiguring the object (doing the calls registered in __call)\nmark the object as complete\n\n\n\nSo an object is complete only when it went through instantiated + hydrated + configured.\nHowever things are not so simple, because an object may need another. For example here $dummy needs $anotherDummy1. When this happens, we try to get $anotherDummy1 as a complete object. At this point of time $anotherDummy1 may not be created or created but not completed yet. So we need to complete $anotherDummy1 first before passing it to $dummy.\nI think the bug here is that when $dummy needs $anotherDummy1, we do complete it properly and then pass it to $dummy. The bug however is that when we do that, we fail to mark $anotherDummy1 as a complete object (i.e. make it an instance of CompleteObject instead of SimpleObject). So later during the second pass, $anotherDummy1 is being completed again which is the bug. Oh I'm not unsatisfied at all :) I just wanna make sure we are actually fixing this and not causing another issue at the same time.\nSo what I think is missing in the test is a __call on $anotherDummy1 like you have for hydrating its value. This is just to make sure that $antoherDummy1 is properly passed as complete (it gets both hydrated & configured) and that no second call is made for it. To rephrase: you added a test accounting for the hydration, I would add a second for the \"config\" part.. Could you add the following comment? just above it?\n// Check if the auto-configuration of the tag is not already done. This is a temporary measure to avoid to break\n// existing versions of HautelookAliceBundle. representing a function arguments which have already been re-solved.. I'm fine with changing this if this is a issue I don't think there was a strong reasons for it.. let's remove that phpdoc, unneeded. since $name is not set in a constructor I think it's a good practice to add a phpdoc so here @var string|null. we're in PHP 7.1 so we can add the return type ?string and remove the redundant/useless phpdoc. same as the comment above regarding the strict types & the phpdoc. missing ending line return and there is two extra blank lines above as well. same comments as for the previous class regarding the CS, phpdoc & strict types. I would add the phpdoc for the param $valueForCurrent as well now then (just that param) besides in the var L41 like you did. The reason being an IDE will be able to check for the type during auto-completion. I'm not fond of the line return for the implements even if that makes the line extra long it's fine. we're in 7.1 so I believe we can do private const now!. in that peculiar case:\ndiff\n-): FixtureBag {\n+): FixtureBag\n+{. same for the other methods. let's get rid of the phpdoc if it doesn't provide any additional value to the typehint :). it feels like this could be on one line. in general it's unnecessary to document \\LogicExceptions: they are sign of an incorrect config requiring manual fix, i.e. it's not an error you should ever encounter at runtime (unlike \\RuntimeException) and account for. this class can be imported; since the other phpdoc elements are redundant we can get rid of the others. maybe more than assertInstanceOf() we could do a assertSame() as the instance should be the same. what happens if we have a template user, e.g. base_user (template) and the user0 would extend it? (I wouldn't expect the base_user to be picked up). ```yaml\nNelmio\\Entity\\User:\n    user_{1..10}:\n        username: ''\nNelmio\\Entity\\UserDetail:\n    userdetail_{@user_*}: # is going to generate userdetail_user_1, userdetail_user_2, ..., userdetail_user_10\n        user: \n        email: ''\n``. you also need to add it to the ToC of this file besides the readme. I would move this in a util class static method that could be unit tested separately. That change of order needs to be documented. The current behaviour in 3.x is in line with 2.x but I think it's a bug and doesn't make sense from a user PoV. Bug that would be a BC break still (which is worth fixing IMO since it's a bug). what about setting the right value directly L60?. I think it would be better to use\\nin one case and\\r\\n` for Windows. I think you got an answer regarding the regex on StackOverflow.\nYou can either go with 2 separate test functions or only one with a data provider, I'm fine with either. ",
    "thundo": "Any update on composite primay keys? Thanks\n. ",
    "bigfoot90": "+1 for parsing Doctrine's annotaions\n. ping\n. @theofidry\nYou have to use the cascade persist\n http://doctrine-orm.readthedocs.org/en/latest/reference/working-with-associations.html#transitive-persistence-cascade-operations.\n. Loamder?. ",
    "vnenkpet": "+1\n. ",
    "rbaarsma": "+1\n. ",
    "lunetics": "+1\n. Use the (local) flag\nHF\\Model\\Embeddable\\Address (local):\n  Address{1..10}:\n    street: streetName()\n    city: city()\n    postcode: postcode()\n    country: country()\nHF\\Model\\Entity\\Authentication\\User:\n  user{alice, bob, jean, fred}:\n    username: \n    email: @example.org\n    createdAt: \n    address: @Address*\n. ",
    "reinfi": "+1\nalthough I know that this would be hard with the current code base\n. got the same issue, and solved it with an underscore at the end of every instance.\n. @theofidry I'm currently working on this, fyi\n. added all your requirements @theofidry \n. I hope I got everything fixed :)\n. added a new test and opened a new PR againt 2.x\n. I have tested it with  and it works as expected.\nCould you show the resulting entity class?\n. wouldn't it be possible to use a pre processor to do this? From my point of view fixtures aren't made for update statements.\n. isn't this https://github.com/nelmio/alice/pull/315 what you are looking for?\n. I think you could just achieve this with an own provider.\n. @c33s untested but why not using:\n<dateTimeInInterval($startDate,'+5 days')>\n. A good codingstyle would have the setters also in snake_case, not in camelCase.\nSo what's the case you need this?\n. Do I understand you right that you have snake_case properties and camelCase setters?\n. i think you need to put it between quotation marks.\nprofession \"50%? <randomElement(<{professions}>)\"\n. Still no idea why the build fails, need to see if I can fix it tomorrow.\n. Finally I found it. I merged the latest changes in branch 2.x, it seems travis does this automatically. There were some changes so I fixed the test and the new builder to work with those changes.\n. Sorry @theofidry, this got totally out of my mind. I merged the latest 2.x branch now. What else is missing?. should be disabled.\n. I will setup more tests and will change the implementation also so that it will be more flexible for other extensions.\n. good advice for the tests because I found another bug within template inheritance.\n. it is rady for review\n. I added a pull request for the step feature.\nFor the order this should not done by alice, this is business logic how you need your data to be sorted. So I fully agree with theofidry.. @theofidry \nTried to implement it, but there's a problem about it because the dot is an allowed character within the names of the list items. \nCould we limit the allowed characters to [A-Za-z0-9-_]? That would make it much easier.. Oh thought it was a missing testcase.. Thanks for you answers as long as I have not understand it in the context of my questions.\nGood think, we are talking about the same issue :-)\nSo from your answer I think it is the right way to implement it.\nStill the question how to deal with the <current()> value problem. I could add a flag but this would not the same as currently flags are defined and used.\nI have already a test in my branch to test the feature so, no problem about writing it :) . So I finished my work at the moment. If you have any suggestions feel free to share :)\nI'm not really familiar with symfony but I hope the config entry is correct.. @theofidry  any idea when we can continue with this? Because this blocks our project as we can't migrate to alice 3.x what I would really like to do.\nHope this does not last as long as the pr for 2.x :). Also added docs entry for the new feature.. Builds green (check)\nDocs hopefully completed (check). Okay that was my thought too.. Can't reproduce this. What's your usecase where this causes an error? @stof \nCode uses already a trim function:\nhttps://github.com/nelmio/alice/blob/c61f1a782207a675c4cfd2840a6892a1be2a348b/src/FixtureBuilder/Denormalizer/FlagParser/ElementFlagParser.php#L53. The FixtureRangeReferenceTokenParser has the same logic for the range as the Denormalizer, but it is not used when I debug the loader test so I'm unsure if it also requires the step logic.. So I added the functionality to the parser too, but I'm still unsure what the parser does and why it is not called when I run the LoaderIntegrationTest :-). That's what I did now. But I thought the parser should be called because it is designed to handle the user_{1..3} case. Now everything seems good, all tests are running :). how silly :-D \nNow it is registered and I added a test to the LoaderIntegrationTest.. ```\n     $set = $this->loader->loadData(\n            [\n                stdClass::class => [\n                    'page' => [\n                        'zones' => '[]',\n                    ],\n                    'footer' => [\n                        'zones' => [\n                            'zone_1' => [\n                                'page' => '@page',\n                            ],\n                        ],\n                    ],\n                ],\n            ]\n        );\n        $objects = $set->getObjects();\n    $this->assertCount(2, $objects);\n    $this->assertArrayHasKey('page', $objects);\n    $this->assertArrayHasKey('footer', $objects);\n    $this->assertInternalType('array', $objects['footer']->zones);\n    $this->assertArrayHasKey('zone_1', $objects['footer']->zones);\n    $this->assertEquals($objects['page'], $objects['footer']->zones['zone_1']['page']);\n\n```\nMade this test, and it worked. @theofidry will test later if it is different when using a yaml file.. It is more effective for the use with a mask where you can get a list of objects. If you use a concrete reference of an object you could easily establish 1:1 associations. \nA example would be like you have a car:\n\\Car:\ncar_{1..100}\ngeneral_car information...\n\\CarEngine:\ncarengine_{1..100}: <-- you need to specify the exact amount of cars in the above example\ncar: '@car_<current()>'\nengine_information...\nMy solution would be:\n\\CarEngine\ncarengine_{@car_*}: <-- gets your previously declared amount of objects\ncar: <current()> <-- has the current car as current-reference\nengine_information....\nAs every car has an engine you don't need to reference the exact number, you could just change it to 500 cars and you still have 500 engine information. \nHope this makes it a bit clearer, if not feel free to ask.\n. nope, this is already a part of alice.\nsee https://github.com/nelmio/alice/blob/master/doc/relations-handling.md\n. I'd rather prefer one single point of return but I changed it :)\n. I think so, could not think of a case where it would cause a problem\n. You would get an error if you haven't defined some fixtures matched by user* if a previous file.\n. sure, on my way.\nbtw I still have no idea why the test fails\n. I already check the value of :\n$this->assertInstanceOf(self::USER, $groupReference->getOwner());\nOr what do you mean? \nI will add another test with a range list.\n. you're right, I only made those checks later on. Added it.\n. there's a little typo in your error text\nsinece => since\n. I removed it, I had no clue why I added it.\n. Good point, skipped now template fixtures when building the list.. That was the ** phpstorm bug with exceptions :-(. ",
    "jamesfade": "+1\n. ",
    "Pym": "I encounter the exact same problem as you. Did you find a solution?\n. Indeed, my sample was more a workaround try (because $owner->name doesn't work) and not really what I want to achieve, so I edited it.\nThank you for the fake provider code example!\n. So I tried your solution and it does not seems to work as expected with a bit more complex sample:\nNelmio\\Entity\\Group:\n    group1:\n        owner: @car*->firstowner\n        name: <ownerName($owner)>\nAnd this is the error I got:\nNotice: Undefined variable: owner in Nelmio/Alice/Loader/Base.php(455) : eval()'d code line 1\nI looked a bit into it and...\n\n. ",
    "Blackshawk": "@mikehaas763 @Seldaek Pretty sure I ran into this bug as well today. I think the root cause here is composite primary keys. Doctrine handles CPK's pretty well, so I would think this would be a small adjustment.\nFor reference: http://stackoverflow.com/questions/18143630/persist-object-with-two-foreign-identities-in-doctrine\n. ",
    "croshchupkin": "Here you go.\n. Not at all. Thank you too.\n. ",
    "cordoval": "i think @Seldaek may mean that the merge key could be used for inheritance\nbut i also see that mixing yaml and php either in this side and in the other side of yml with php is a extreme\nmaybe there is a use case for this, but could it be tackled more with alice yml approach?\nsomething else i thought is we should give a clear way what is possible and not with alice or kind of like best practices so we can know beforehand when to depart from ailce in which bundles or types of relations and when to use it for other bundles.\n. @tyx i believe you will be clearer with a PR :baby: \n. I had to remove the getId() to just id :baby:  :rage1: \n. @Seldaek sorry I did not see you at the conference this time, I was going to ask you about this today, but definitely you have given me some good ideas, thanks Jordi\n. i will look for you in Spain then\n. @Seldaek i think the idea of using the getReference is good for when you are in the same loader\nif we are on a different loader say inside another bundle then i don't think even this method would work\nhowever any other method implemented where i pass the object directly would work ideally\n. @Seldaek i think the best practice for now to avoid such hassle is to load all fixtures form one loader\n. i have made the method smart already and resolved this issue, however i was just wondering since there seems to be support for constructor with multiple arguments but in any other method maybe it does not work\n. did you test it @KingCrunch ?\n. i think i tried it, but it was long ago, so right now i don't know if it\nworked\nOn Mon, Aug 26, 2013 at 8:45 AM, Jordi Boggiano notifications@github.comwrote:\n\nIndeed it should work if you specify the method name.. I don't know why I\nforgot about this :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nelmio/alice/issues/35#issuecomment-23263263\n.\n. do you have a test to add?\n. could this be a smell in your code for using rather custom methods or builder?\n. could you please break this into several files?\n. wrong indentation\n. leave a space after if\n. why the comment?\n. \n",
    "armetiz": "What do you think about add an option on the Nelmio\\Alice\\ORM\\Doctrine::constructor to clear after persist call.\nIt could be a binary mask\nphp\nnew Doctrine($om, Doctrine::FLUSH | Doctrine::CLEAR);\n. ",
    "tyx": "Like $this->generator->parse for example\n. I wrote a Faker Provider very specific for our business which use $generator->parse. The same way Faker/Provider/Address for example.\nAnd I just want to make it working with Alice...\nBut my Faker Provider need the $generator in the construct (I extends Faker/Provider/Base).\nAnd I undersand Alice only deal with simple faker provider (Plain PHP).\n. Hi @Seldaek ,\nAny news ? Should I submit or PR or you don't want this kind of feature ?\nThanks\n. Amazing work. I will give it a try this week on a small project.\n. Nice ! :+1: \n. You can avoid to persist entity like this My\\Fully\\Qualified (local)\nSee https://github.com/nelmio/alice#value-objects\n. If the content of $this->methods should answer to MethodInterface what about validate their type to avoid fatal error if not ?\n. Yes of course, check in construct would be great : )\n. ",
    "KingCrunch": "Isn't this possible, if you call the method directly?\nsetProfile: [@profile1, 'moderator']\nhttps://github.com/nelmio/alice#calling-methods\n. @cordoval Nope (thats why it's a question :wink: ) I've taken it 1:1 from the manual. It seems, that it is exactly you use-case :question: \nNelmio\\Entity\\User:\n    user1:\n        username: <username()>\n        setLocation: [40.689269, -74.044737]\n. Thanks for the hint :smile: To be honest I had no idea where to look at :confused: It would be nice to have this as an \"external\" provider (I mean: Not defined in the fixture-class itself, like described in the examples), so I can reuse it in different fixtures, but I don't know, if I can get the filepath there somehow. I'll play with it later I think :smile: \n. Hehe, I got this :tongue: But I _don't want the provider directly within the fixture-class and I havent a deeper look at it yet. I'd prefer a builtin, or plugged-in function, which I can use in every fixture without the need to register it explicitly.\nOh, and beside: I use the AliceBundle. I don't know yet, if it is even possible to specify the provider so easily there :smile: \n. Than add a link after that :smile_cat: \n. Isn't the meaning of random data to be ... well, random?\n. 2014-03-06 22:43 GMT+01:00 bradleytrager notifications@github.com:\n\nWhat is the purpose of this conditional?\nif (true !== $data) {...}\n[\nhttps://github.com/nelmio/alice/blob/master/src/Nelmio/Alice/Loader/Yaml.php#L44\n]\n\nIt parses the file as \"PHP\" and as long as there is no open tag <?php it\njust returns the content (which is later captured using the output\nbuffering). However, as long as the included script doesn't 'return'\nanything, or fail, it returns 'true'. This means, that if the return value\nis not 'true' it is either invalid (it returned), or something is broken.\nBut I wonder more, what the lines before that are good for ..\n```\n    $includeWrapper = function () use ($file, $loader) {\n        return include $file;\n    };\n$data = $includeWrapper();\n\n```\nIsn't that the same as\n$data = include $file;\nBeside that $loader isn't used. I cannot find a reason for this\nadditional indirection :?\n\n\nReply to this email directly or view it on GitHubhttps://github.com/nelmio/alice/issues/89\n.\n\n\ngithub.com/KingCrunch\n. Just out of curiousity: What is the use-case of private constructors on entities? :confused: \n. ",
    "luxifer": "\n@Seldaek  it might be good to support it somehow\n\n:+1: \n. ",
    "danjamin": "I have a similar but different problem.  I have an entity that I want to pass to a method on another entity (defined after the first entity).\nfixtures.yml\n``` YAML\nExample\\AcmeBundle\\Entity\\Foo:\n    fooInstance:\n        id: 0\n        name: Bar\nExample\\AcmeBundle\\Entity\\Bar:\n    barInstance:\n        fooName: myFormatter(@fooInstance)\n```\nThe provided example does not work, as I get a string in myFormatter(), rather than the expected Foo instance.  \nPossible work around in most cases\n``` YAML\nExample\\AcmeBundle\\Entity\\Foo:\n    fooInstance:\n        id: 0\n        name: Bar\nExample\\AcmeBundle\\Entity\\Bar:\n    barInstance:\n        foo: @fooInstance\n        fooName: \n```\nHowever, in my particular case, I don't have any property (like foo:) to use as a variable in the method call.  I need to be able to pass the @fooInstance to the method.\nHow might I get this to work?\n. @Seldaek no problem.  Filed a new issue here: #50 \n. Excellent! Thank you.\n. ",
    "docteurklein": "sure! I'm thinking to this already, but it could be tricky.\nMaybe \n- a bundle for symfony2 to take advantage of existing entity manager (and a sf2 command).\n- an independant CLI script where you need to provide the em yourself.\n. I added a link to the docs. the flag description is quite explanative:  Expands {a,b,c} to match 'a', 'b', or 'c'.\nDo you want me to include this explanation in addition of the link ?\n. sure :) thanks!\n. ",
    "adri": "I guess I should write my own ObjectManager to filter out those value objects.\nAnother solution might be an additional keyword in yaml, for example using an exclamation-mark in front of an entity which should not be persisted?\n!Domain\\Data\\Geopoint:\n    geo1:\n        __construct: [<latitude()>, <longitude()>]\n. Beautiful, thanks a lot, Jordi!\nI'm going to use it right away :-)\n. ",
    "andrewtch": "The only possible implementation is two-pass reference resolving - meaning to pick up references after base objects are created. What do you think about this proposal?\n. @Seldaek , i'll dig around this evening and make a PR, don't bother ) Your code coverage is high enough so I hope the won't be any BC.\n. Wow, it's harder than I imagined. First of all, your code is very solid and decoupling some passes from recursive process() call is tricky; second, it's quite hard to distinguish if 30% ? 3x @user is actually an object call.\nStill, I'm working on: https://github.com/andrewtch/alice/commits/self-referencing-objects\n. My tries were indeed messier, thank you )\n. It looks like your model is a bit messy (having volatile foreign keys I mean), so the adviced way would be doing \nChess\\WebBundle\\Entity\\ForumTopic:\n    forumTopic6:\n        parentId: @forumTopic6->id\n    forumTopic7:\n        parentId: @article1->id\ninstead of modifying alice to fit your needs.\n. Are there any plans to implement more generic way and create fixture dumper as sf 1.4 had? I'm working on a thing like that currently, seems to be easy to implement in a generic way.\n. Well, I've started a full dumper on  my fork.\n@Seldaek , some questions still are there:\n- for hydrator dumper, what do we dump inside collections (many to many, one to many etc)? empty collections and null values?\n- same question applies to database dumper - do we dump all entities known by EntityManager? Or just a subset, like $dumper->dump($entityManager, array('User', 'Group')?\n- for a full database dumper, do we / can we add some limits (like only users with id less than 10 etc)\nFor starters, only OrmDumper will be implemented.\n. Btw, what's wrong with https://github.com/Spea/fixture-dumper ?\n. Sorry for a late response )\nWhen I dump fixtures from hydrator, to we dump and walk through 1:M - 1:1 relations?\nAs for a third party package... possibly, but it would require including additional components, the best way imho is to live in a core (as an array - php dumper and the convertor to the yml).\n. ",
    "kalifg": "I am currently working on a fixture that contains a field that I want filled with the id of the current object.  The field sometimes contains the ids of other types of objects, so I can't set it up as a proper foreign key.\nIf I refer to the objects like this:\nyml\nChess\\WebBundle\\Entity\\ForumTopic:\n    forumTopic6:\n        parentId: @forumTopic6\n    forumTopic7:\n        parentId: @article1\nThen I get an error Object of class Chess\\WebBundle\\Entity\\ForumTopic could not be converted to string in....  If I instead use this notation:\nyml\nChess\\WebBundle\\Entity\\ForumTopic:\n    forumTopic6:\n        parentId: @forumTopic6->id\n    forumTopic7:\n        parentId: @article1->id\nthen I get no errors but only the article reference id gets set, the forumTopic reference id is null in the database.  If this were one forumTopic referring to another I would try to split the fixtures into multiple files but since this is self-referencing I'm not sure how to do that; or if this should be handled by this fix.  I am using 1.5.2.\n. Just for completeness, I also tried this:\nyml\nChess\\WebBundle\\Entity\\ForumTopic:\n    forumTopic6:\n        parentId: $id\n    forumTopic7:\n        parentId: @article1->id\nThis resulted in the forumTopic reference being 0 instead of null.\n. Thank you for responding!\nI agree the model is a problem but I don't forsee it changing on this project for the time being.  I mentioned above that specifying the fixture as you suggested results in null for forumTopic6->parentId.\nSince I first posted a collegue mentioned that there we also need fixtures of this form:\nyml\nChess\\WebBundle\\Entity\\ForumCategory:\n    forumCategory6:\n        referencedCategory: @forumCategory7\n    forumCategory7:\n        referencedCategory: @forumCategory6\nHe tells me that this kind of \"bi-drectional reference\" only works one way, i.e. forumCategory7->referencedCategory will be set but not forumCategory6->referencedCategory\nHe has suggested adding a second pass to our fixture loading akin to what is done here.  I was thinking that maybe instead of using a special syntax as he does that maybe I could just store unmet references and if there are any make an attempt to fill them in after persisting.\nIf I come up with an elegant solution I will let you know! \n. I have a pull-request at #58 that covers the bi-directional reference example.  It's a pretty small patch (mostly unit test-related code) but extremely helpful and I hope you'll consider it.\nThank you for your time!\n. Closing in favor of #59\n. That's a great idea, I will work on it as time allows.  We've thrown more and more stuff at it here at work and it hasn't flinched, so I'm happy about that.  I wanted to wait to get your opinion before I went any further.  I'll be happy to work with you to get this turned into something more extensible and suitable for merging.\n. Actually, I am.  After refactoring out some of changes here into #87 and #88 what is left is actually not pretty simple.  However it does rely on some try/catch hackery as @Seldaek mentioned above and I'd like to refactor the object population a bit as he has suggested.\n. Awesome!  At first glance that looks like the kind of refactor that @Seldaek had suggested to me.  I will take a deeper look at it soon and try to integrate the forward reference stuff!\n. @tshelburne I took a deeper look and I think I'll be ready to try to add on some code soon.  It's really not so much a custom Builder (Populator/Processor, etc) as the concept that if the build fails right now it might succeed later so hold onto this definition.\nDo you think I should build this into Base, or extend Base into another loader (BaseWithMemoryThatNeverFails?)  The weakness with that is that Yaml is based on Base and I'd want to be able to decorate either one with this functionality.\nI was looking at all the great refactoring that you've done and was wondering if we could also use the strategy pattern for loaders?  That wouldn't exactly fit adding my functionality but maybe some sort of addLoaderDecorator as well?\nI'm just brainstorming here.  Much of this comes from having to deal with the fact that a getReference() to a non-existent reference way down at the processing level throws an exception that bubbles all the way up to the top and normally stops the process, meaning I need to catch it at a level where I can record the spec and then move on.  Should we think about changing that process, maybe adding a hook to register a custom \"reference error handler\"?\n. I'll get to work replicating that functionality on top of the 2.0 master branch as soon as I am able!  Thanks for the heads up!\n. Just a note that the @self patch has been extracted and moved to #87 \n. :thumbsup: \n. Thanks!  I can't remember why I did that.\n. I'd like to add that referencing dynamic property names no longer seems to be possible.\nBackground: I'm updating a project that is using a very old fork of Alice 1.x.  It was capable of resolving references like the following:\nyml\n    userGameTournamentToEarlyComplete2{1..2}:\n        playerPosition: <current()>\n        user: '@gameTournamentToEarlyComplete2->user<($playerPosition)>'\nThe user reference would resolve to either the user1 or user2.  With Alice 3.4  it tries to pull the user property, which does not exist.\nI've tried '@gameTournamentToEarlyComplete2->user<current()>' as well with the same results.  \nI can't find documentation for this usage in the manual.  Dynamic reference names are documented, but not fields\nQuestions: \n1. Is this supposed to work and doesn't (bug) or not currently supported anymore (feature request)\n2. Should I file a separate issue for this?\n. I was using the debugger, looking for a work-around, and I found out that it was parsing it as @gameTournamentToEarlyComplete2->user and <($playerPosition)>, attempting to evaluate each and then concatenate them together \u2014 this mirrors the issue author's experience more closely than my earlier evaluation.\nAlso I did find this work-around in case it's useful:\nyml\n    userGameTournamentToEarlyComplete1{1..2}:\n        playerPosition: <current()>\n        user: '<(@gameTournamentToEarlyComplete1->{\"getUser${playerPosition}\"}())>'\nNot optimal but I like it better than my co-worker's previous attempt which involved creating a custom provider to forward a request PropertyAccess like so:\nyml\n    userGameTournamentToEarlyComplete{1..2}:\n        playerPosition: <current()>\n        user: <getProperty(@gameTournamentToEarlyComplete1, 'user', $playerPosition)>\n. Determining whether one is inside of a string or not in a regex is a difficult proposition.  I added a test case for @ inside a string and the boundaries you suggested are not preventing it from being parsed.\nThis sort of thing is probably handled better by some sort of tokenizer, which I was planning on delving into to allow providers to call other providers (such as in #90).  However I think I have come up with a decent interim solution that I will push.  I have modified the regex to match double-quote surrounded strings as an alternate group.  The callback is modified to skip them if found.  I added some test cases for it as well.\n. ",
    "spinx": "@Seldaek This is something that would come in handy. Can we agree on syntax and then i'll try to get this done so that it can be merged ? \n. So I figured out a way to do a basic base with  but i think it would still be valuable to support this for complex cases. \n. ",
    "fvilpoix": "Thanks a lot !\n. ",
    "FabriZZio": "Great, thanks!\n. ",
    "mdavis1982": "Would it be possible to do something like:\nbiography: <paragraphs({1-10})>\nFor a random number between 1 and 10 paragraphs?\n. You can...\nBut that's not what I'm asking. Ideally, I want to have multiple paragraphs, separated by newlines as a single string. That doesn't seems to be possible?\nImagine, for example, an article that you want to fake. That would have lots of text (paragraphs) all separated by newlines. It doesn't seem to be possible to actually do this with Alice?\n. @Furgas That's essentially the same workaround as I posted - changing the keys so that they get referenced correctly. The issue is that the current behaviour isn't the expected behaviour.\n. ",
    "Baachi": "@mdavis1982 Use this \nbiography: <paragraphs(4, true)>\n. ",
    "Furgas": "Why not just separate key segments in this case? Like that:\n```\nEntity\\Team:\n    team_{1..10}:\n        name: \nEntity\\TeamMember:\n    teamMember_{1..100}:\n        name: \n        team: @team_*\n```\n. ",
    "petegore": "Got the same issue today using \"@board*\" which could refer to \"Board\" ; \"BoardGrid\" or \"BoardUniverse\". I rename my Boards to \"board_{1..100}\" to solve it.\n. I'm interested in that too, it can be useful in a random ManyToOne relation : \nyaml\ngroup1 :\n    users : <ArrayCollection(<numberBetween(1,10)>x @user*)>\n. Hi theo, thanks for you answer.\nSo in other word : you decided to evolve nelmio/alice in a way that doesn't support all Doctrine features, am I right ? (sorry for my english sometimes a little uncertain !)\nIs there a reason for that ? Do you consider that embeddables are something that developer should avoid using ? I'm curious ! Maybe I could use another way !. Okay I understand better what I missed.\nI was pretty sure that Alice was created for Doctrine at the beginning. Because when you create your fixtures, you can automatically insert them using doctrine:fixtures:load. My bad.\nI'll have a look at theofidry/alice-data-fixtures thanks a lot \ud83d\ude03 . ",
    "maryo": "Cool.\n$var is not enough in some cases. For example i use it like this:\ntype: <randomConstant($this, 'TYPE_')>\nand also on more places where the class name is not enough (like generating a random but valid value based on many values of the entity properties and it's relations)\nBut @current loos fine. Thanks.\nEDIT: In the PR i can see:\nThe @self reference is assigned to the current fixture instance.\nSo it's probably @self, not @current. But who cares, both are fine.\n. ",
    "cleentfaar": "@kalifg Are you getting closer to a merge-able state? I'd be happy to help in my evening hours, since this feature is truly a massive improvement on the usability of our current fixtures.\n. @Seldaek @cordoval Great if you guys can get this merged!\n. As a side note: \nI found quite some missing/incorrect phpdoc's in this library. Would you be willing to merge a PR that fixes a lot of them? I think it would really improve the self-explanatory aspect of the code and invite users to make use of more advanced functions your loader offers.\n:smile: Oh and thanks for making this library, I use it every day!\n. ",
    "tshelburne": "@kalifg I just finished the first step of a major refactor of the library to primarily help with easing extending it, but it drastically alters the current state of things (I have merged in all your most recently accepted pull requests). I'd be happy to work on bringing this together with it as well.\nedit: Well nevermind, CI is failing. Back soon.\nedit2: Ok, all is well. Would love to hear what you think.\n. @kalifg Great - admittedly, it was a pretty quick refactor, so there are a few parts where it's mostly copy / paste just to separate things into more meaningful classes. There's a lot that can still be done, but it would be great to get some feedback on it once you've had a chance.\nLet me know if you have any questions!\n. @kalifg To start, check out my recent branch of the refactor that unifies Base and Yaml into a single Loader class, and puts the parsing logic into parser classes. My ultimate intention with this is to remove Loader as a library interface, and use only the Fixtures class as the point of entry for developers. \nI haven't dug deeply into the actual issue of forward references (and consequently can only talk about it in principle), but it seems like one of the best ways to implement it would be as a new Processor method coupled with a reference resolver. I'm thinking something along the lines of filling reference properties temporarily with a stand-in object (something like ReferenceProperty, which would store a #referenceName), and then add a step at the end to resolve references.\nSo for now, Loader might do something like:\n```\n/*\n * {@inheritDoc}\n /\npublic function load($dataOrFilename)\n{\n    // ensure our data is loaded\n    $data = !is_array($dataOrFilename) ? $this->parseFile($dataOrFilename) : $dataOrFilename;\n// create fixtures\n$newFixtures = $this->buildFixtures($data);\n\n// instantiate fixtures\n$this->instantiateFixtures($newFixtures);\n\n// populate objects\n$objects = $this->populateObjects($newFixtures);\n\n// resolve references\nreturn $this->resolveReferences($objects);\n\n}\n...\nprotected function resolveReferences($objects)\n{\n    foreach ($objects as $object) {\n        $this->referenceResolver->resolve($object);\n    }\nreturn $objects;\n\n}\n```\nThis solves the problem of calling on null references, and leaves our Loader class clean of any dependent code. Not sure it covers everything you were fixing before, but it's a start.\nIf you're really bored, I wrote a javascript in-memory datastore that does a similar thing - the library is a bit old at this point, and it's Coffeescript, but it kind of displays the idea. \n. @kalifg Hi, I'm going through existing pull requests and letting contributors know that we are moving forward with development on a 2.0 release on the master branch, so any pull requests that you would like in the current stable version (1.7, tagged a couple weeks ago) will need to be requested on that branch. If you aren't worried about 1.7, but would like to request your feature addition in 2.0, please rebase off of the current master branch and ensure that your changes work with the new architecture (which is substantially different from before, see #97 for descriptions).\nI am going attempt to take care of the PRs in the master branch as I have time, but any help you can offer in this initial push would be appreciated.\n. @sorabji52 Hi, I'm going through existing pull requests and letting contributors know that we are moving forward with development on a 2.0 release on the master branch, so any pull requests that you would like in the current stable version (1.7, tagged a couple weeks ago) will need to be requested on that branch. If you aren't worried about 1.7, but would like to request your feature addition in 2.0, please rebase off of the current master branch and ensure that your changes work with the new architecture (which is substantially different from before, see #97 for descriptions).\nI am going attempt to take care of the PRs in the master branch as I have time, but any help you can offer in this initial push would be appreciated.\n. Given that this is a known issue (as referenced above) and this PR doesn't provide a solution for 2.0 development, I'm going to close this. If you pull your test into the current master branch and come up with an idea for solving, please feel free to request again.\n. @Seldaek @ludofleury What about throwing a class flag on the value objects, something like:\n```\nLocation\\Location:\n    Paris:\n        __construct:\n           Location\\Coordinates (nested):\n                __construct: [48.8257802, 2.3783640000000332]\n       Location\\Country (nested):\n            __construct: [\n                1 Rue du Chevaleret,\n                75013,\n                Paris,\n                Paris,\n                \u00cele-de-France,\n                @FR\n            ]\n    name:\n    description:\n\n```\nThat way, the general approach to passing in contextual information is preserved, and there isn't a need for new special syntax.\n. @sneznaovca  Hi, I'm going through existing pull requests and letting contributors know that we are moving forward with development on a 2.0 release on the master branch, so any pull requests that you would like in the current stable version (1.7, tagged a couple weeks ago) will need to be requested on that branch. If you aren't worried about 1.7, but would like to request your feature addition in 2.0, please rebase off of the current master branch and ensure that your changes work with the new architecture (which is substantially different from before, see #97 for descriptions).\nI am going attempt to take care of the PRs in the master branch as I have time, but any help you can offer in this initial push would be appreciated.\nAdditionally, I tend to side with David and Jordi on this - what was the situation where you were using random data, and it was important that the \"integrity\" would survive sorting the field names differently?\n. Is this PR effectively dead at this point? I'm ready to close, unless the discussion is continuing. \n. @morrislaptop @marmotz @Seldaek It seems like to me this is a better case for creating your own Faker provider that handles the \"ugly\" logic behind the scenes. My personal feeling is that as much should be done in specialized PHP classes anyway, since it is more generally testable that way.\nI fear that if we go too far down the road of making the fixtures \"smart\", we will end up with a library much more complex than necessary to do some simple tasks. Thoughts?\n. @morrislaptop @marmotz Closing this, but feel free to continue the discussion if you see instances that seem to really justify adding the complexity to support it.\n. @morrislaptop In #97, I've started a full refactor to help make extending the library trivial for your application. I've submitted the pull request for the current refactor, but I'm also in the middle of moving the parsing into separate FileHandlers and adding an #addFileHandler method to the Base loader. \nCSV parsing seems like it might be too specific a feature for the library itself, would love to hear what you think about doing it instead as a registered handler.\n. @morrislaptop Hi Craig, we've finally made the push to merge changes for 2.0 development back into master, and the feature I mentioned in above #97 that would help do this is going to be one of the first things I work to push into the library. Given that, I'm going to close this PR for version 1.x, but it would be great if you were among those of us testing 2.0 before the stable release once the feature is available.\n. Tests failing, forgot to run things against Travis before requesting - as such, I'll be working on this, but any suggestions or comments would be wonderful.\nThanks.\n. @nelmio @Seldaek Any comments on this? Happy to make necessary changes / updates, but curious to hear your opinion of the refactor as it stands.\n. @Seldaek Sounds great - I appreciate the attention, especially given the amount of changes.\nAs far as the Collection class, I used the Doctrine class just to ensure that I had well-maintained methods, but we could just copy in the necessary parts.\nWhen you say squash the commits, do you intend to say squash all of the new commits into a single refactor commit?\nDefinitely agree with the 2.0 call - I'm going to work in the recent merges to catch it up with master, so I'll update you once that's done. \n. @Seldaek @nelmio Ok, I've merged in all the latest updates, so this is good to go from the \"everything currently tested is passing\" perspective.\nI also added in the type checks mentioned before, removed Doctrine ArrayCollection as a necessity, and ran php-cs-fixer over the entire codebase to make sure things were looking good.\nI considered squashing things down, but it was actually useful in checking the new code to go back and review where and when certain files were changed, since it was such a drastic update. If it's all the same to you, I'd like to keep the history for referencing.\nHowever, I did notice commit 0ac9bef9c530b750cd20a4c985b79cc92c172af8 added new functionality, but there isn't a new test for it, and it's unclear to me what exactly the goal of the commit is. The title made it look like it was about ranged templates, but the code looks like it's about extending multiple templates (ie. user1 (extends user_bare, extends user_not_so_bare). @rdubigny, what were you intending for this one to be?\n. @rdubigny Ah excellent, thanks for the quick response - didn't see the tests wrapped in with the initial commit, so I couldn't tell they were related. In that case, it looks like that good to go.\n@Seldaek A few ideas I had for improvements / BC changes before releasing as 2.0:\n1. Philosophically, I think the Fixtures::load is the best interface for the library as a whole. Instead of putting all these strategy registration methods on the Base loader class, we should push for using the Fixtures class as the exclusive interface, and registering additional methods there (#addProcessor, #addBuilder, etc.). In addition, I think we could move many / all of the current LoaderInterface methods to the Fixtures class (#getReference, #setReferences, etc.), since many of them seem more like they relate to interacting with fixtures than to loading them. I feel like the interface could be as follows:\n   - public function load($files); // @param array | string\n   - public function all();\n   - public function get($name);\n   - public function add(array $objects);\n   - public function addFakerProvider($provider);\n   - public function addParser(Parser\\Methods\\MethodInterface $parser);\n   - public function addBuilder(Builder\\Methods\\MethodInterface $builder);\n   - public function addInstantiator(Instantiator\\Methods\\MethodInterface $instantiator);\n   - public function addProcessor(Processor\\Methods\\MethodInterface $processor);\n   - public function addPopulator(Populator\\Methods\\MethodInterface $populator);\n   - public function setORM(ORMInterface $manager);\n   - public function setLogger($logger);\n2. I'd like to turn the Base#parseFile method into instances of a parser interface, so that issues like CSV / XML / JSON / etc. parsing can be left to independent developers, and the library can focus more on maintaining a rich feature set.\n3. I'm going to start adding tests to the more granular components, since there are so many more moving pieces. Obviously this is a work in progress, but really basic unit tests won't be particularly complicated to write.\nAs time permits, I'll be adding the tests for the sake of improving the overall coverage, but let me know what you think of the other suggestions and I'll add them to the workflow as it makes sense. Thanks.\n. @Seldaek @nelmio I've added the second feature mentioned in the list above in a parser branch that greatly simplifies the parsing / loading logic. It also will make moving towards using Fixtures as the sole interface of the library much more simple.\n@morrislaptop Have a look at the (by no means fully-featured) CSV parser I created to accompany the tests - I think something like this would serve your purposes well regarding #95.\n. @Seldaek @nelmio Another question: In Collection, we have the #find and #random methods that will also accept a property - rather than throwing an error if both property_exists and method_exists fail, why not just attempt to return $object->$property, and if it's null then it's null? This is blocking use of magic methods for properties, and isn't a particularly simple problem to solve.\n. It seems less like this is a case for dependency injection (since it's about returning basic objects, not services) than it is for a codified collection class. See the collection class in a refactor branch I've been working on for an example.\nThoughts?\n. @havvg Hey Toni, the decoupling from Doctrine you mention is definitely a step I was looking to take in #97, but didn't since I haven't yet tackled the Fixtures class. If you read through the comments, you'll see that my hopeful plan is to make Fixtures the exclusive interface for the library, and since that's the only place that requires Doctrine for persistence, I haven't dealt with it. If you want to fork my fork and merge in your persistence changes, I think that would be a great step.\nAs for the events driven part, I was never completely sold on the approach being taken, but it IS much more maintainable in the refactor than before. I'll take a look at how your code updates things anyway though, as I worked on the refactor it did feel like an events driven approach to some problems might help. For my refactor, I relied heavily on Strategy and Chain of Responsibility patterns (CoR is the processing), but that's just because there were so many complex conditionals throughout the code.\n. @havvg Definitely worth a shot - the Fixtures stuff will probably work out really well, but I bet the processing will be a nightmare.\n. @marijnotte @Seldaek It seems like it could be out of scope for the library itself - this seems like a better example of when a specific project should have a custom loader.\n. @marijnotte @Sentoki Have a look at the current master branch - we've been moving everything towards a much more extensible system, so you can override pieces of the library however your project requires. In this case, I think it would be much better to have a specialized answer for your case. If Alice were being built as part of a larger framework (like Symfony), it would make more sense, but we are trying to keep it as decoupled from and unopinionated about other components as possible.\n. @nVitius Hi, I'm going through existing pull requests and letting contributors know that we are moving forward with development on a 2.0 release on the master branch, so any pull requests that you would like in the current stable version (1.7, tagged a couple weeks ago) will need to be requested on that branch. If you aren't worried about 1.7, but would like to request your feature addition in 2.0, please rebase off of the current master branch and ensure that your changes work with the new architecture (which is substantially different from before, see #97 for descriptions).\nI am going attempt to take care of the PRs in the master branch as I have time, but any help you can offer in this initial push would be appreciated.\n. @sneznaovca Hi, I'm going through existing pull requests and letting contributors know that we are moving forward with development on a 2.0 release on the master branch, so any pull requests that you would like in the current stable version (1.7, tagged a couple weeks ago) will need to be requested on that branch. If you aren't worried about 1.7, but would like to request your feature addition in 2.0, please rebase off of the current master branch and ensure that your changes work with the new architecture (which is substantially different from before, see #97 for descriptions).\nI am going attempt to take care of the PRs in the master branch as I have time, but any help you can offer in this initial push would be appreciated.\n. @Markcial Hi, I'm going through existing pull requests and letting contributors know that we are moving forward with development on a 2.0 release on the master branch, so any pull requests that you would like in the current stable version (1.7, tagged a couple weeks ago) will need to be requested on that branch.  If you aren't worried about 1.7, but would like to request your feature addition in 2.0, please rebase off of the current master branch and ensure that your changes work with the new architecture (which is substantially different from before, see #97 for descriptions).\nI am going to go through existing pull requests and attempt to take care of them in the master branch as I have time, but any help you can offer in this initial push would be appreciated.\n. The current master branch on this repo is a master development branch now - all stable versions are in branch 1.x. That said, if you want to see all of the latest development, my personal fork has the most work done in that direction right now. However, I'm hoping to move most of my existing code into the main repo in the next week as well.\n. Hi Marc, I haven't made a point of updating the README yet because things are still in flux, but you raise a good point - there are people using this version already, and it should at least be relatively up-to-date. I will make a point of going in and doing some detail work this week.\nIn the meantime, do you have a specific question you need answered, or is it just wanting the documentation in general?\n. Hi Mark, I've finally come around and am getting actively back on Alice. In your code you are creating a new method on the Instantiator class to handle instantiating in this way - however, what we're using now are implementations of the Nelmio\\Alice\\Instances\\Instantiator\\Methods\\MethodInterface to handle all instantiation. I'm not against the feature, but it will need to be done as one of those implementations to merge it.\n. We considered doing this in one part of v2.0, but didn't want to introduce the hard dependency to make it available. Unless I'm missing something, I think it will probably make more sense to just wrap the results in ArrayCollection once you've loaded them:\n$collection = new ArrayCollection($loader->load('fixture.yml'));\n. @Seldaek Are we considering adding ArrayCollection back into the library, or can we close this per the last comment?\n. @cystbear I just commented on your other PR, and I think I see better what you are trying to do. As I mentioned in the last one, I'm working to try and make Alice more flexible for registration of new persistence mechanisms, and I think your sentiment that this isn't particularly semantic holds - however, I'd like to hold off on making these kinds of changes purely for names' sake, and make that a move for 2.0 (which you can see in #97 - we should soon be merging that into master and moving forward with 2.0 for the future).\n. @cystbear I'm going to close this for now, since it's referencing the 1.x branch - if you'd like to amend it for 2.0, you can rebase off the current master (caught up with #97) and we can continue the discussion.\nThanks for contributing!\n. @cystbear Thanks for moving on this so quickly - I'm a little hesitant to merge it in immediately because the biggest contention I have with the library right now is the interface of the Fixtures class. I'm going to leave this sitting for now, and hopefully I will have a chance to spec out the interface soon, and then this will be worth looking at again. \nSuggestions on the interface welcome - most of my early ideas are viewable in a comment on my previous refactor.\n. @Seldaek I don't feel like this is necessary, but I'm also not invested in the naming since I'm hoping we can eventually pull out the ORM-specific parts. To merge?\n. @jverdeyen Hi Joeri. I don't have the time at the moment to write the tests to check it, but I would guess it would work if you use __construct: []. I'm not sure how I feel about it yet, but it might make sense to also allow __construct: true, which would guarantee running the constructor, even with no arguments - curious to hear your thoughts.\nAlso, please let me know if the empty array doesn't work - I will try to remember to add a test for it either way, but I'd like to know how \"time-sensitive\" the issue is.\nThanks.\n. @Seldaek Makes sense to me - I'll get a test added shortly.\n. This turned out to be a bit more complicated - reversing the order passes on all except PHP 5.3. That said, I wasn't completely happy with the idea of depending on the order, since it's actually flawed logic according to the spec. I'm working on fixing that, but it has some dependence between the Fixture class and the instantiators that might take a minute to suss out.\n. @jverdeyen Woo, finally got this taken care of. Just merged in some changes that should take care of the problem. If you have the time at some point, would appreciate you checking it out in the context of your project, and updating this conversation if it looks good.\n. This was merged already - have you pulled the most recent from master?\n. Merging these changes, but @Seldaek is correct, we won't be tagging on the master branch for a little while - newly introduced bugs like these are why we're holding off for a bit, in addition to a shifting interface. If you need stability, definitely stick with the 1.x branch.\n. @sroze Wow, good catch - I can't believe that slipped by. Can you add an accompanying test that fails without your addition so that we have this in contract?\n. As it turns out, this was taken care of in another PR where it's being merged. Thanks though!\n. Yes, I agree with Jordi here - I'm working on a branch to fix the implicit functionality right now, so this should be taken care of soon.\n. @sroze I'm always a fan of limiting repetition, but this solution seems like it requires understanding a lot of additional code in order to achieve something similar to the following:\n```\n<? $medias_directory = '/my/medias/path'; ?>\nApplication\\Sonata\\MediaBundle\\Entity\\Media:\n    media0:\n        binaryContent: <? echo $medias_directory ?>/picture1.jpg\nmedia1:\n    binaryContent: <? echo $medias_directory ?>/picture2.jpg\n\n```\nI didn't actually test the above code, but you get the idea - any reason not to keep things simple? \n@Seldaek Curious on your thoughts, but it seems a bit too complicated to me.\n. I didn't intend to suggest that they were huge, but that they introduce language that doesn't immediately strike me as fixture-oriented, and consequently they increase the barrier to understanding the project as a whole. Not a deal-breaker by any means, but I think it takes sufficient justification. Do you have a more \"realistic\" example of the use-case where it drastically simplifies the file(s)?\n. Wow, sorry I missed that first comment - it's not even showing up in my notifications list. As far as the idea, I tend to agree with @Seldaek about using the Symfony convention - I think Alice has a pretty well-established convention in terms of \"inlining\" data. Thoughts on the following?\n```\nparameters:\n    medias_directory: /my/medias/path\nApplication\\Sonata\\MediaBundle\\Entity\\Media:\n    media0:\n        binaryContent: /picture1.jpg\nmedia1:\n    binaryContent: <medias_directory>/picture2.jpg\n\n```\nThis will probably work out pretty nicely, given the breakdown of parsing in the new master. Haven't dug into the details, but it would likely just be adding a Processor implementation to check a list of defined parameters before passing on to the next processor.\n. @Seldaek I like that - check for parameters when an HTML-like tag shows up, and if it exists, use it. Important to document that this means if you use a parameter that is an HTML tag, that tag can't show up in content.\n@sroze Looks like this will be good, unless you have other thoughts - have at it!\n. @sroze That's a good call, but I think quotes imply string too much - perhaps <{foo}>? This is nice in my mind because it resembles interpolation, and we are already using (...) for the identity method. Maybe we introduce what @Seldaek suggested above, <param('foo')>, and then have this as a less verbose option?\n. Sounds good to me.\n. Awesome, thanks for this. I'm going to have a look at it soon - I'm trying to put together the time to look through all of the existing PRs so we can create a release candidate for 2.0.\n. Generally was good to go - I added some tests in the YamlTest to ensure things were being parsed properly, and then removed the dependency in Processor on ParameterBag. It works better to just inject it straight into the Parameterized processor.\nGood work.\n. @sroze Thanks for the ping - my main contract started sprinting a few months ago, and it's everything I can do to keep up with it right now. Going to look at this now and see what is left.\n. @mattsnowboard Fixture files are compiled initially with PHP, so you are able to use PHP variables by simply surrounding the PHP code with standard <? [whatever] ?> brackets. That should cover your use-case here.\nThat said, there's another PR (#130) that addresses this exact thing for a difference use-case which may end up being merged in the stable 2.0 branch.\n. For this kind of situation, I would rather do something along the lines of the following:\n```\n$loader = new Loader();\n$results = $loader->load('fixture.yml');\n$people = array_filter($results, function($result) {\n    return $result instanceof Person; \n});\nforeach($people as $person) {\n    // profile persistence stuff\n}\n```\nThis doesn't seem like a concern to put in the library itself, since it is exclusively business logic. Is there a use-case you have in mind that would make it more necessary?\n. When you mention processors, do you mean it in the sense of implementations of the processor MethodInterface? If that's the case, processors are basically the means by which we convert a fixture property value into the objects property value. \nI'm going to go ahead and close this, since it seems to be taken care of, but feel free to continue the conversation if you have questions.\n. I don't think it's explicitly in there anywhere, but I haven't tested to see if it's handled. That said, definitely important.\n. Loading a PHP array (both inline and from a file) is already supported - check out the documentation and spec files for the details\n. Hi @charlesschaefer. I'm not going to have the time to check this out quite yet (and I'll hold off until the Travis build is passing), but it's an interesting idea - out of curiosity, why not just use a setter like userType: 50% a : b? \n. @charlesschaefer That alone would only assign a or b at the rate of 50%, but you could couple it with something like user{1..4}:. This obviously would be less \"controlling\" of the data, but a lot of times randomized generated data is the intended use-case.\nI actually like the idea of being able to quickly generate really specific objects, and to some degree it's nice to have the names be tied to them - I guess my qualms about it just come from the intention of name vs. configuration, where the property-value map below is the actual content. This felt kind of a like a blend, and I tend to really like the FactoryGirl approach of creating traits and using inheritance.\nEither way, seems like interesting way to configure things - looking forward to it once you have it against master.\n. I'm going to close this, since we won't be taking it into 1.x.\n. I'm not a maintainer of the AliceBundle for Symfony, but if it doesn't introduce any additional syntax, it would look something like the following:\nCiuu:\n    ciuu0:\n        parent: null\n    ciuu1:\n        parent: @ciuu0\n. You can create as many files as you would like, with any combination of entities per file. As long as you make the initial key an entity class (as you have above), it will be properly built. If they span multiple files, you will need to use the file include commands described in the README. \nReferences are built by using the name of the reference in the fixture, and there are several options for how they can be attached. Using your example:\n```\nComunBundle\\Entity\\Country:\n    Country{1..50}:\n        name: es_ES\n        active: boolean(50)\nComunBundle\\Entity\\State:\n    State{1..50}:\n        name: es_VE\n        country: @Country // or @Country0 or @Country* - see the README\n```\nI'm going to close this, since it doesn't appear to be an issue with the library, but if you have further question feel free to ask. Do take some time to dig through the documentation though - the stable release is very well described as it stands.\n. You should try writing a custom Faker provider - documented in the readme, and more fully in the Faker repo\n. @Seldaek I'm going to have to defer to you on this - I was thinking it might be a good move to pull some of the heavy Doctrine assumptions out before 2.0, and instead try writing plugins for different ORMs around the library. It would be one thing if this was a default library for a major framework like fixtures in Rails, but the project I pulled this in for (and the reason I so heavily refactored things) was using Laravel and it meant I couldn't use the Fixtures interface.\nIf you would prefer to keep this Doctrine-related, these commits make some sense, but otherwise it seems a bit out-of-scope.\n. I'm not opposed to including a driver in the library - if anything, I think it would encourage using Doctrine, which I personally feel is the best option out there for PHP ORM. That said, I also think it would be wise to keep the primary README clean in either case, and perhaps include more specific docs in a docs directory.\nThat, or create an alice-doctrine package. \nEither way, I'm going to close this as a PR for master, and we can pull it into the driver docs, wherever those end up.\n. Careful Jordi - you're going to break your fingers typing so quickly :)\n. @Seldaek Cool fix - any reason to hold off on merging?\n. Gotcha. Things got crazy for a bit here as well, and I'm in a similar place with returning to the code after a break - I'm actually looking forward to a bit of cleanup after the initial release (not really worth it yet). I will dig into this in a little bit.\n. I'm not crazy about more public methods to the Loader class, but I think it's actually a good solution considering the current state of things. It might get moved around before the official release, but that's what regression tests are for :)\n. @Seldaek Wugh, thanks for pointing it out. I've been working on pushing through on the 2.0 release, but I think I just forget to run those checks after particularly long nights. Trying to keep it in mind.\n. @smarques Is this fixed for you and we can go ahead and close?\n. Oh, I didn't see that - just pushed, I will fix.\n. That's what I get for trying to be helpful - pushing it up shortly. Would you rather I force push, or just double up the commit?\n. Agreed, but sometimes doing things forcefully is just so satisfying.\n. @Seldaek My understanding has been that this is a feature, not a bug - is that right?\n. Hi Jeremy, thanks for this PR - this feature is actually what led me to the refactor that became master for 2.0. \n@Seldaek You have said before that we weren't going to be adding new features to 1.0 - does that hold true for this? It's a pretty simple PR - perhaps if he made the additions in master as well it would be justified?\n. Yea, I think it's worth it - nice feature to have for anyone stuck (for some reason) on 1.x. @devster, do you want to take a crack at it for master, or do you want to leave off here?\n. That's exactly what I had in mind.\nIf you don't mind, I'd prefer to have both PRs submitted at the same time so that we don't risk ending up in a fractured state between 1.x and master - just merge 1.x into master, and have at it. \nThanks again, good work.\n. There is an array Populator (in master - 1.x has an equivalent) that should find your add__ method and set the array using that, looping through each result. It should be something like this:\nSencamer\\AppBundle\\Entity\\TipoTramite:\n    oficinaRegionals: [ @OficinaRegional1, @OficinaRegional2, ... ]\n. Personally, I feel like needing to set a private property in generating fixtures is probably indicative of poor design - those properties should probably be set through a setter or through the constructor, which are both supported.\nThat said, I know I don't have the full picture - do you have a use-case where this is a requirement?\n. How is that property ordinarily getting populated, as in, within the context of your production application?\n. Ah, we should support references in constructors - that's the right answer to the problem. I'll get some tests written around the issue and hopefully have a patch in soon.\nI'm not completely clear on what you mean by late referencing, but if I'm inferring correctly, you're needing to use a reference in one fixture that has not yet been built. @Seldaek I thought we had a PR about this on the 1.x branch (and consequently, should be available in 2.0), but I can't find it now. Either way, I think there are a couple good ways to go about it, but if it's not working out of the box, you should submit it in another issue.\n. Actually, I just took a look, this test is showing the constructor working with a reference argument, and here is the fixture it's using. Is this missing something?\n. Nah, thanks to you - appreciate the effort.\n. Can you send the Site class as well? I'm going to try to recreate this - we have tests around using the __set property, so I'm not sure why it wouldn't work.\n. Seems reasonable to me - add a regression test that has it working with PHP, and I think we'll be good to go.\n. Yes - please do. I'm going to hold off on merging everything until I can do it all at once.\nThanks again, good thought.\n. I'm not completely clear on the goal of this - can you give a concrete example of the problem this would solve?\n. Ok, that makes sense now - I am hoping we can get the things working without order having an effect, but this looks like a good middle-ground. Throw in a regression test and submit a PR, I'd be happy to have a look.\nThanks!\n. I do see how the docs can be misleading - that will definitely only generate a string. I would suggest taking a look at registering your own function with Faker that will return a DateTime, it's a pretty straightforward process. Have a look at this part of the documentation. \nAs for the docs, we are making updates right now to everything prior to the 2.0 release - I'll make a point of trying to clarify things.\n. Not crazy about this idea, but maybe flag the property as plaintext:\nplainPassword (plaintext): <password()>\nHonestly though, that seems semantically like the value should be the literal \"\". I dunno.\n. @dmitryvakulenko I'm curious, what do your fixture files look like?\n. @Seldaek Ok - last we talked (admittedly a while ago), you wanted to see this before we went for it. Will take care of it.\n. Hi @gouaille. Right now, there are really two ways you can achieve this - one is like Nicolas said, to include the independent yml file in the beginning of the dependent one. Alternatively, you can use the same Loader instance (2.*) to load multiple files in the proper order, since it stores the non-local objects it has already built.\n. @theofidry @Seldaek Maybe it's just me, but I don't feel like we need to document another package's functionality - the example given in the README isn't supposed to say \"here's how to use the FOSUserBundle\", it's to say \"here's where you can drop code to handle processing of your objects\". If it's that confusing, we could just change the code in the methods to be something more benign, like $object->password = PasswordHasher::hash($object->password);. Thoughts?\n. @theofidry Fair point - are you going to update the PR, or do you want me to take care of it?\n. Alright, closing and updating independent of this.\n. @theofidry Ping - thoughts?\n. @theofidry Well that was embarassing - always do spike work in a branch.\n. Thanks!\n. The field name? I suppose you could register a custom Nelmio\\Alice\\Instances\\Populator\\Methods\\MethodInterface that would run on the condition the property name matches qlv_, and then generate the regex part in the set method. Does that make sense?\n. Hi @paquitodev, I would suggest you post questions in a place like StackOverflow where the attention is on finding answers to problems immediately. We will be available to help when we can, but this is really just a list of issues and bugs. \nThat said, I appreciate that you're pointing out these particular bugs and problems. \n. Personally, I handle these kinds of really specific (almost domain-like) cases outside of the loader script, as a kind of \"follow-up\" task once I've created my basic entities. It works well in my system, but I understand it feels less \"clean\". \nIf you don't want to approach it in that way, I think a provider is probably a good bet. Anytime there's specific conditional logic needed, I reach in that direction.\n. :+1: \n. Good catch - can you add a regression test that will show the problem before we merge?\n. You don't have to worry about everything just for this PR - if you can just create a test that mimics the way you reached the exception, that's sufficient for this.\n. Thanks for this!\n. Fair - out of curiosity, why are you passing empty input to this?\nPlease add a regression test, happy to merge afterwards.\n. Thanks, this is great!\n. Thanks!\n. Agreed 100%\n. I'm not against that approach, but from a maintenance perspective, I can say these docs have been a pain. @Seldaek thoughts?\n. What about something like \"Basic Usage\", \"Advanced Usage\", and then maybe \"Extensions\" to actually document the different ways you can extend the basic functionality?\n. Where are you suggesting the actual file boundaries would be?\n. Sorry, not clear - we're discussing breaking the docs up into files for maintainability and readability, but it's not clear to me where the file delineation is given your TOC. I love the separation and categorization, but this doesn't look like (at first glance) it drastically simplifies the number of files to be more searchable, as @Seldaek and @jenkoian were requesting. For instance, would \"Complete Reference\" be its own file?\n. I can get behind that - @Seldaek @jenkoian how does that look?\n. Thanks for this! Really helpful.\n. Please add a regression test and we're good to go.\n. @rafreis Sorry for the wait - this is great, but please add a regression test.\n. @rafreis I'm not worried about it causing existing tests to fail - if I merged your PR, and two months down the line deleted that line, all the tests would still pass. The test showing the problem you are currently having is necessary to ensure we don't remove something and break your code down the road.\n. Closed by #238 - thanks for catching this!\n. @cleentfaar You should always feel free to submit a PR to improve documentation - we really appreciate the support.\n@Seldaek I'm kind of indifferent, but I feel like we should not open the doors to passing additional configuration options in this way. It seems to me we are already offering this level of configuration just by using the loader class directly, and Fixtures is exclusively for convenience. That said, if you'd rather open that door, fine by me.\n. @Seldaek ping\n. Ok, I'm thinking we merge it since this is the current interface, but make a point of reducing the footprint of Fixtures for a future 3.0 release. There are already a few issues requesting additions to the interface, and I think we would be better served to reduce the options and fully document the approach to a \"custom\" circumstance. See #242 as an example.\n@cleentfaar Please add documentation for this addition, and we'll go with it.\n. @Seldaek Good for a patch release?\n. Thanks again!\n. Fixtures, as of right now, is basically just the path of least resistance. It's not intended to be the flexible answer, it just works for the simplest possible situation. I personally never use it.\nFrom my perspective, the Fixtures is little more than a wrapper around Loader, with some conveniences thrown into the constructor. As soon as any custom behavior is needed, I suggest just using Loader or writing your own extension of Loader. \nThoughts?\n. Rather than introducing new static classes and yet another interface to the library, I think better documentation is the right answer. Unless I'm missing something, the following should work in even the most complicated circumstance:\n``` php\n$loader = new Loader();\n/ any custom additions the user needs to $loader /\n$persister = new DoctrinePersister($om);\n$persister->persist($loader->load($fixtures));\n```\nThat doesn't strike me as too much to ask of someone needing specific control, and doesn't expand ways to use the library even more. \nFixtures is a convenience, and should remain so - it makes decisions for you in the simplest cases, and let's you start your project quickly. I don't think we should encourage it being anything more than that, or that we should try to make the \"convenience layer\" more configurable. Instead, I think we should just offer up some tools to make it easier to customize things on your own. Personally, I think the Fixtures interface being too open to configurability (via constructor and method arguments) is what causes the discomfort, rather than the other way around.\nWould love to hear your thoughts.\n. @theofidry Happy to check out all these updates soon - I've been in Iceland for 2 weeks now, heading home in a few days. Will make a point of digging in then.\n. @theofidry See comment in #242 \n. I agree with null.\n. I am in favor of moving towards a \"Doctrine bridge\" like solution in the short term, since I think it would be best for us to move towards pulling that out of Alice anyway. I've got nothing against your proposal, but would it make sense to make that a separate issue under a 3.0 milestone, rather than bundling it into a PR and having duplicated code?\n. Upon thinking more about it, I think it would be better to just leave persistence isolated in a single directory for now. If we see Doctrine having more than a single file (the persister) down the road, perhaps we can make a subdirectory under the Persister folder.\nJordi and I have discussed pulling persistence out of Alice and instead creating some \"bridge\" libraries that could be installed and used independently. Not hugely important, but it would limit the drive to \"put more\" into Alice. It would mean defining the intention of Alice a bit more strictly, in that it would exclusively be an object generation library, but I think it would bring a lot of clarity to it as well.\n. My feeling is that this PR should probably be closed as it is for now, since there are so many BC issues, and we can continue discussion in relevant issues. Make sense?\n. If you want to do it this way, that's fine, but let's squash the commits down to a single one - I don't see a benefit to having a commit in the upstream repo with breaking changes. If it's about history, I think it would be better documented in issues.\n. I agree w/ @theofidry - I think if we can find a middle road for a more friendly \"inline\" syntax that could be valuable, but I don't think we can make assumptions about reference types b/c we aren't tying the library to Doctrine (or to annotations in general). I'm not opposed to the suggestion @theofidry had, or something similar.\n. Or, what about just inline PHP:\nyml\nAppBundle\\Entity\\TaxRule:\n    tva_france:\n        name: TVA France\n        values:\n            - <(new AppBundle\\Entity\\TaxValue(0.2, new Date(2015-01-01))>\n    tva_luxembourg:\n        name: TVA Luxembourg\n        values:\n            - <(new AppBundle\\Entity\\TaxValue(0.15, new Date(2015-01-01))>\n@theofidry Not sure my syntax is correct.\n. It is a major bug, but it's also one that's pretty trivial to work around, given that it just takes ordering things \"properly\". That said, it's a bug I've felt the pain of in one of my larger projects, so I'm all for a solution similar to the one you used in the bundle. I'm not crazy about that particular implementation - my preference would be to break relationship hydration into a later step in the process - but it's certainly serviceable. Feel free to open a PR.\n. I meant no offense, it certainly does the job for your use-case :+1: \nRe: the files restriction, good point. I've started a branch to do the \"right\" fix a few times (basically, load all entities, run processing on all non-relationship properties, and then do a final pass to hydrate relationships), but haven't had the adequate time to build it in. I've built JS implementations of object stores that function as \"in-memory\" databases using this pattern, and it's worked out decently well.\n. @munkie Thanks for this! Can you separate these additions out into individual PRs? My suggestion would be the preg_grep change as one PR, the fix in Reference with the test update in another, and finally the changes in LoaderTest in a third - this will allow us to discuss them independently, since they really aren't related.\n. Thanks!\n. Thanks!\n. Thanks!\n. Can you confirm that Faker::process is the only place where matches was used as a property? I like this fix, but I want it to cover everything.\n. I haven't used it before - when I joined the project as a maintainer, Jordi already had the CS stuff set up. I'm not against it by any means, but that would definitely take his input before merging.\n. Yea, that's pretty awesome - thanks for the suggestion. Spike something out.\n. Overall, really great fixes - documentation and annotations are probably some of the biggest struggles we've had with it so far, thanks for all this.\nRe: my comments about separate PRs, for these really public repos, I vastly prefer breaking things down as granularly as possible. Since it's infrequent that I have large blocks of time to review things, it's much better to have a small set of homogeneous changes than many varied changes in one PR. I like everything that you are doing, but now when you go through and make changes based on the conversation above, I have to review all 22 files all over again, which takes a larger chunk of time than I might have for a while.\n. I would rather see you rebase up to commit 607c3b9 off of master so that we don't end up with two merge commits. Make sense?\n. @Seldaek I'm happy with this, but it's a lot of \"preference\" - you good?\n. @munkie Thanks!\n. Haven't had plans right now, since 2.x is still relatively fresh. I think it would take, at minimum, a discussion of what we want to accomplish and how things are failing right now. \nFrom my perspective, the biggest struggle we have right now is that the \"lifecycle\" of moving from files -> fixtures -> instances is not particularly flexible, and all the state getting passed around and updated all over the place makes it hard to reason about making changes. I think a more well-defined interface for that flow would let us do things like the relationship hydration step more easily.\nI'm going to be mostly just reviewing PRs for a while - I have some client work that's pressing right now. The best start right now would probably be to start drafting a proposed changeset and some ideas behind desired features. It would be nice to just move forward with some of the issues in a 3.x version, rather than trying to forcibly patch them into 2.x. I don't think we'll need to have too many BC problems for a 3.x release anyway, but that's yet to be seen.\n. Yea, my big PR was a quick and dirty approach to get things to a more configurable place so that I could use the library in a project I was working on. It was sufficient for that project, but ultimately not especially flexible / easy to use.\nSounds good - I'm going to try and set aside some time in the next couple weeks to do a rough sketch of what I have in mind.\n. Work has been intense for a bit - hopefully things will settle enough for me to block out some time to handle it. \nIf you have the bandwidth to get even just a spec template in place, that could be helpful. Otherwise, I'll get to it ASAP and keep you updated on progress. Sound good?\n. @theofidry I think cleanup and removing persistence would be good enough - it's not looking like my schedule is going to clear substantially, but instead the opposite. I think it would be wiser to just look at making some incremental progress at this point, rather than making another huge step. That way we can at least show some consistent improvement. \nI do still think decoupling persistence from object generation is important - half of the problems I see coming through the issues list is about trying to get more automatic solutions around Doctrine, and that doesn't feel like a healthy step forward to me. I wouldn't be opposed to removing the notion of persistence entirely, and just returning \"lists\" (could be any data structure, IMO) of generated instances. The important part is to try to separate the Doctrine-specific influences so that Alice can be a more general solution, and the bundle can take care of writing the Doctrine \"bindings\".\n. I'd like to have things spec'd pretty clearly first in order to build the milestone out of tickets - if you have the time right now, an initial breakdown of updates and deprecations you have in mind would be useful, and then I can review + add to them more quickly. If you list those here, we can consider this the source of truth for now, and then break them out into tasks once things feel solid.\nThoughts?\n. @theofidry I have this pulled up in another tab and will try to comment tonight - thanks for this start. I agree with all of your judgments. \n. @theofidry Sorry, I never updated this thread, but I have posted comments on the gist.\n. I would certainly encourage bit by bit - given that I don't have an active project depending on Alice right now, finding large chunks of time to parse through significant PRs is more challenging. To the extent possible, I think a piecemeal approach would be great.\n. @theofidry\nOn a high level, I think it's great you are taking initiative and running with the improvements - as has been the case for a while now, I am too slammed with work to dedicate the requisite time to review. I'd like to be pinged for decisions being made, but I think you're doing a great job with upkeep / refactoring / etc. The responsiveness has been badly needed.\nRegarding your suggestions above:\n1. What's the benefit of final classes? I've always hated it when library authors provide final classes because it restricts what I can do with their code. \n2. I don't have specific concerns about Serializer - do you think it will cover all bases as well as what we have now? If so, it seems like a good step. I built the existing v2 structures as a response to the code in v1 for specific use-cases, so they are likely more specialized than necessary.\n3. Personally, if performance isn't a problem now, I vote we leave caching out. If we need to layer it in later on, we should build the system in such a way that it's not a chore (I think it would already be easy enough), but caching is always opening up the chance for hard-to-find bugs.\n4. I agree with your steps towards v3 - we've been responding for a long time to devs that we are going to remove support for persistence, and I think we need to just do it. Pushing for v3 now seems like the right choice, so long as people aren't left hanging on v2.\n. Re: final classes, while I understand your point, I think that's the whole point of private and protected pieces - they represent implementation details that you can't rely on from version to version. However, if you restrict yourself to a set version, I feel like you should be able to customize things in that version as much as desired, even to the point of wrapping the primary interface of the library and extending it. From my perspective, if we change implementation details and it introduces a backwards incompatible change with a developer's child class but not with our public interface, it's not our responsibility to handle that - it's the developer's who extended the library.\nAll the rest sounds good - if performance is already an issue, let's do it.\n. Agreed 100%.\n. @theofidry Excellent news! \n. I don't have an opinion on this - @Seldaek, do you mind either way?\n. Did you do any performance check on this? Curious how much performance improvement this actually gives.\n. Damn, that's awesome. I'm going to need to update my version of Alice shortly.\n. @NiR- Thanks for this, sorry for the wait - just finished a cross-country move this week.\n. All of it should be pretty straightforward - the original 2.0 was mostly just moving code that was all in a single class into smaller, manageable chunks. I wouldn't anticipate it being hard, it's just more than I have time to contribute right now.\n. Thanks!\n. Hey, yea, I just need to sit down and put together the changelist. I'll take care of it this afternoon (CST).\n. v2.1.1 published.\n. Thanks!\n. I agree with @Seldaek on this one - it's already a challenge to keep OS repos going, and having as few impediments as possible is pretty crucial. It's certainly not that CS isn't important, but I consider it much less important than having a living codebase and contributor pool - and we do have tools to fix problems \"regularly\" as they show up.\n. My personal opinion (and unrequested advice): A private property is private because it's not supposed to be accessible to the outside world - when I'm making fixture files, I always try to use them to build objects the way I intend them to be built in the application itself. Setting private properties is asking for a mess if you depend on them being private for state validity.\nThat said, the fact that private properties can be set on instances, but only on the child class, is silly. Add the test and we'll merge it in.\n. Part of your struggle, I think, is in the fact that your getter is acting as a setter. You are attempting to make things work in ways that I personally would avoid. Your intuition in the last code snippet you pasted is correct - you really should be passing a demand to the demand schedule via the constructor. My suggestion, if it would be too much work to reorganize your data structure, would be to add a short reconciliation pass following creation of your entities. In other words, after you get your objects out, do something akin to the following (apologies for pseudo code, I've been in Purescript / Ruby world for months now):\n$objects = $loader->load($fixtures);\nforeach($objects as $object) {\n  if ($object instanceof DemandSchedule) {\n    // save relationship between $object and $object->getDemand();\n  }\n}\nThis may feel like a nasty solution, but it does solve your problem without requiring setting private properties, depending on a framework solution, or fixing a much larger problem (database design). In my projects that use Alice, I have many such reconciliation steps to deal with different ORMs, environmental requirements, and business rules. \n. That sounds right to me.\n. @Seldaek It's been a bit since I dealt with Symfony and PHP - does this all look good to you?\n. Without digging into your code, I can suggest quickly that you are probably looking at a custom populator. There are a few base-level assumptions that Alice makes about how you might populate properties on your objects, but there are often instances where the defaults don't cover every situation.\nA populator is little more than a strategy to set a property according to the value set in the fixture file. If you register a new populator method with the loader before loading your fixtures, it will be given preference over the defaults. \n. Yea, that's one of the things we are trying to improve for v3.0 (completely unspec'd). When you are using the Loader directly, persistence isn't called automatically. The library took a big turn at the release of 2.0, and there are some vestigial parts that are a bit confusing. You basically will need to loop through your objects and persist them manually - at least, that's the way I handle it in the project I use Alice for.\n. Can you copy in more details? Not seeing fakeentity1 anywhere in the code above.\n. Ah - you are creating entities named detail1 - you need to set it to fakeentity{1..10}\n. No problem! Closing, let me know if anything else.\n. Yea, that basically entirely depends on your persistence mechanism. If you are using an ORM, generally those things are taken care of. \n. From a cursory look, I would expect this to work. Have you inspected the objects before they go into the database? What do your classes look like?\n. You are creating 500 entities, and requiring a unique value between 1 and 500 for the name. That unique value is being generated randomly. So everything is fine for the first X entities created, but eventually the pool of remaining numbers to randomly select from is too small to reliably get one in 128 tries. For example, if you have created 499 entities successfully, the chance you will hit the one remaining number successfully in 128 tries is very low.\nClosing because this isn't a problem with the library, you just need to either a) set name: <current()> or b) use a much larger sampling pool (I personally use 10000).\n. @bendavies Makes sense to me - two things:\n1. Why did you remove the arguments we had in the User constructor? It doesn't seem related to this PR.\n2. Please create a test for your use-case that fails without your fix so we can ensure it doesn't regress in the future.\nThanks for this!\n. @bendavies Thanks for this!\n. @bendavies Done. Thanks again.\n. @gquemener Thanks!\n. @gquemener Bam! Done.\n. @kyaw-myo-thein The intention is basically to always use named entities - I honestly wasn't even aware you could run the library without naming them. \n@Seldaek  IMO this isn't a problem with the library, just a misuse. Thoughts?\n. @theofidry Can you confirm?\n. Thanks guys, great catch.\n. You are correct, it's treated as a regex - see this function for how the key masking works.\nClosing as expected, but feel free to keep commenting!\n. Hm - if it's important that you have those values as the current() value, I'm not totally sure. It would probably be best to do this post-generation and manually persist. Something along the lines of:\n``` php\n// load objects from a yaml file\n$loader = new \\Nelmio\\Alice\\Fixtures\\Loader();\n$carriers = $loader->load(DIR.'/carriers.yml');\nfor ($i=0;$isetCarrierId($i);\n}\n// optional persistence\n$persister = new \\Nelmio\\Alice\\Persister\\Doctrine($objectManager);\n$persister->persist($carriers);\n```\n@theofidry Better ideas?\n. I usually use the range approach: \nyml\nPlatformAdminBundle\\Entity\\Carrier:\n    carrier{1..15}:\n        name: <word()>\n        description: <text()>\n        carrierId: <current()>\n        createdAt: <dateTimeThisYear()>\n        updatedAt: <dateTimeThisYear()>\n. @reypm That's what I meant when I was asking if those values were important. If they are, my first suggestion would probably suffice.\n. I would recommend creating a template for the group entity, and then having a fixture for each of the defined types with only the role set. Alternatively, you could set up your own Faker function or handle the objects manually after generation, and persist manually.\n. Check out the doc on custom faker generation - I'm not entirely sure how it would work on the surface, but I definitely think that's the place to start looking. There are several entrypoints into the library if you start going the custom route, so it may be that you need a custom processor or something instead.\n. Ah, I meant something along the lines of the following:\n``` php\n// load objects from a yaml file\n$loader = new \\Nelmio\\Alice\\Fixtures\\Loader();\n$groups = $loader->load(DIR.'/groups.yml');\nforeach ($groups as $name => $group) {\n  $group->role = // logic to turn $name into the role constant;\n}\n$persister = new \\Nelmio\\Alice\\Persister\\Doctrine($objectManager);\n$persister->persist($groups);\n```\nFor the record, unless you have a ton of different kinds of roles, I would shy away from this approach - the explicit one might be a bit more verbose, but it's much more clear what is happening.\n(disclaimer - I haven't coded PHP in about 9 months now, so it might be a bit rough)\n. @reypm I personally would go with the template fixtures approach, but @theofidry might have a great idea :)\n. @Seldaek How do you feel about this? It's sort of a breaking change - there's definitely potential that users are relying on the regex-like approach as a feature. I don't know if we merge this haphazardly.\n. @toonjanssens No, that's what I meant - if you are taking advantage of the fact that the dots can be used for regex matching, it's not backwards compatible. You do make an interesting argument though - our intended (and documented) use-case is the asterisk (*), so I suppose that does mean we are really pushing for more strict expected behavior. I still would like @Seldaek's opinion here.\n. @theofidry I'm not sure what you're asking - it sounds like the tests are a bit disorganized for new contributors though, and I agree with that fully. I wouldn't be opposed to a PR to simply regroup the tests into smaller, meaningful chunks.\n@toonjanssens For now, I would just add the test to the LoaderTest class and make sure that your use-case is adequately represented. You can do it just as an inline array, using the other test cases as examples. Let me know if you have other questions about it.\n. @ogizanagi As of right now, I would handle your image population after having loaded all the instances:\nphp\n$loader = new \\Nelmio\\Alice\\Fixtures\\Loader();\n$products = $loader->load(__DIR__.'/products.yml');\nfor ($i=0;$i<count($products);$i++)  {\n   $products[$i]->addImage(/* logic for image */);\n}\nYour images here might be other fixtures, value objects, strings, etc. - basically, it's just a bit of hard-coding to set up the auto-load. It's obviously not ideal, but it will get you moving for now.\nAs for your suggestion, the method calls approach would need to be spec'd quite carefully, and would probably require a much more nuanced notion of lifecycle to be a successful addition. Without that, it sounds like a pretty high risk of stateful nightmares.\n. @theofidry Cool idea - the only question in my mind is related to timing. Are these calls that happen in the order specified after all the property setters? Or before properties? Or should we be able to specify that? It seems like a really useful feature.\n. Cool - I like this idea, let's roll it in to v3.\n. Makes sense to me - @piribes thanks!\n. I'm hesitant to do this because we are actively looking to remove persistence from Alice, and this would encourage further dependence on that. My personal approach would be to use the more nuanced Loader class directly (as documented here) and then write your persistence logic specifically.\n@theofidry Thoughts?\n. Yea, I definitely don't want to end up in a \"lifecycle support\" place with Alice - it's really not intended for managing your database at all (as a point of fact, we are looking at moving database integration to an entirely separate package). Alice's responsibility should stop at generating data the first time, and you can write custom scripts (or use a separate tool) for handling that data down the line.\n. I think I'm good for this, since it doesn't break BC - @Seldaek any comments?\n. @hboomsma I think @Seldaek makes a good point - why don't we just check for both methods and call whichever exists?\n. @WebDevCodr How many fixtures with names of the form professions* do you have? That message generally means your pool of options is too small for the number of new fixtures you're generating.\n. Oh - yea, you're right, that's not correct. Will have to look into it.\n. I think this makes sense - the Symfony Serializer is also much more likely to get bug fixes / etc. Generally I try to reduce the number of dependencies, but this feels like a smart one.\n. My only question - does Serializer rely on annotated classes? We don't want to introduce anything that suddenly takes us back to \"you must use Symfony\" territory.\n. I mean does Serializer look to the class for Doctrine-style ORM annotations or anything like that.\n. This makes sense to me.\n. @theofidry Agreed - when I was reworking the library for v2, I found the loader injection to be quite confusing for a while. I think moving the step somehow to the Builder would be a great call.\n. Leaving this open to review in the next couple days. Didn't realize how big it was going to be.\n. @theofidry Can you ping me post-resolving merge conflicts? Since I haven't been close to the code as it changes, I want to make sure the picture is clear.\n. @theofidry In general, this all looks good - I'm not a fan of the \"magic\" with data providers and all that for testing, but I get it. I'm fine either way here.\n. All of this looks good - not sure what the very last sentence is about. Is that relevant to the function call on ref?\n. Ah, gotcha - that makes sense to me. That feels like a) it opens a complexity can of worms, and b) enables features that are so specific, devs should be required to write their own logic around it. You might want to throw or something?\n. throw an error if you encounter that syntax.\n. Sorry, this one got lost in the fray when I was clearing out notifications.\nIf we consider the \"possible values\" feature important enough to have as part of the Alice library (this isn't obvious to me, but I'm open), I think it requires new syntax of some kind. I would naturally expect favoriteNumber to be a unique tuple based on the syntax above. We could probably just create a new function:\nyaml\nNelmio\\Entity\\User:\n    user:\n        username (unique): '<numberBetween()>'\n        favoriteNumberTuple (unique): ['<numberBetween()>', '<numberBetween()>']\n        favoriteNumberFromOptions (unique): <options([...])>\nThoughts?\n. I would suggest a more clear name, but I think it would work.\n. Just my opinions:\n1. I support multi-calls post construction\n2. Would __construct still be supported as is, and you are adding __factory?\n3. Indifferent about accessors - that seems like it's pushing the simplicity of the library, but if people want it, perhaps it's helpful.\n4. Restrict to inline\n5. Configurator should be after call step - that makes the lifecycle increase in complexity as it moves along, rather than jumping around.\n. I think we should keep __construct and simplify it as you said - given that, I think the __factory syntax makes a lot of sense. I don't see a reason to deprecate __construct at all - the syntax is meaningful, clear, and probably handles most use-cases well. We don't want to force downstream devs to adhere to our idea of good design, but I think encouraging simplicity and clarity through time-tested interfaces is a good idea.\nBTW, one note - the library is changing so rapidly and has evolved so much that I can't really keep up with it - I've reduced my notifications to direct @ mentions only so that I'll see the meaningful parts instead of losing it in the bulk. Let me know if it seems to cause problems, but it seems the only reasonable way for me to keep up with it, TBH.\n. I don't think we can / should introduce the relative reference naming - then the downstream user is required to follow those conventions every time they want to use a reference.\nHaving created a fairly large set of fixtures using Alice that ran into these exact problems, I think our responsibility stops at notifying the user with a warning when the naming match occurs, and then leaving it to them to decide how they would like to solve it (likely, simply by renaming one of the fixtures more specifically).\nBasically, I wouldn't complicate things.\n. @theofidry Instead of iterating, why not just check for existence at the time when you add the new instance to the list?\n. Makes sense to me.\n. @theofidry Yes, this should definitely work as you described.\n. I think we should deprecate - not only is it undocumented, but the intention is much less clear.\n. I can't remember and don't have a moment to dig in right now, but I thought the type hint checker was about instantiating an instance properly via constructor arguments before setting all the props. Might be completely mistaken.\nAs far as the BC problem, what exactly does it necessarily break? Without digging in, this seems like an \"internals\" question, not a library interface question.\n. Ah, I see. Personally, I don't think it should be Alice's responsibility to turn what reads as a string into a date time object - that's what Faker is for. I'm not opposed to leaving it in there, but it does seem like a high price to pay for a feature that is only arguably useful. \nI think we should introduce an official migration path to use creationDate: <date('2012-01-05')>, or something like that. I'd honestly be surprised if that doesn't already exist.\n. Yes\n. I think that works, though it introduces a lot of extra complexity - it feels like those kinds of specific needs should really be handled with custom providers or custom parsers (if we are allowing registration of custom parsers). I'm not against the approach if you want to support it, but it seems like overdoing things to me. I imagine there are use-cases out there, but IMO, that's too much logic in a fixture file.\n. I think it makes sense either way - perhaps hammer on it a bit to see if you get it working quickly, and if not, just create a ticket in GH to consider adding it back in where users can voice their opinions.\n. Yea, just add it to the upgrade notes.\n. I don't think we can drop support for it altogether - that would be taking a pretty aggressive stance on what we feel is an acceptable object structure. So, given that, we can either come up with a new syntax / suggested approach for dealing with it (something like a second-pass reconciliation step) or we can engineer to make it work. I lean towards making it work in the cases it has been working, and throwing up a flag in the cases you've recognized where it won't work. \nPersonally, I feel like your description of generating all the fixtures and ordering their build steps intelligently is the right move - it's easy to imagine in the future wanting to be able to manipulate the order for any number of reasons (process, performance, etc.). Additionally, this would lay groundwork for allowing customization at the user level, if it ever went there. Given the engineering of the library at this point, this doesn't seem over-engineered to me.\nI think we can save the \"skip and retry\" step for a later milestone - it's a useful feature, but we're talking about edge cases at that point.\nSo, to reiterate, I would suggest: \n1. Support the existing working syntax\n2. Throw up a flag when one of your known issues appears\n3. Put some effort into creating an intelligently ordered process around instance building\nOne thing you also might consider is changing the population portion to support lambda population - basically, rather than passing an instance of the reference, you pass a function that returns an instance of the object. Hidden behind that function can be a simple random item in a list, or a process that builds a not-yet-handled object. This strikes me as a reliable approach, but is definitely more conceptually \"stressful\".\n. Could you just parse the statement and turn it into PHP - effectively: \n```\n(@user1-username . \"_\" . @user2->username')>\n// becomes\n<($instances['user1']->username . \"_\" . $instances['user2']->username)>\n```\n. That makes sense to me - I agree with your previous statement, anything more should be its own provider. Then the onus is on us to ensure provider registration is clean and simple.\n. Since the local flag isn't particularly useful now, I don't see any reason to take this step at this point in time. If you feel like there's some knowledge that would be difficult to return to later, if or when we needed to add a 4th step, I would memorialize it in either documentation or in a ticket to be discussed in the community. No reason to complicate things now.\n. I think @ is too common to deprecate - do you mean you feel like you can support it without the escaping? Maybe a missing reference shouldn't throw an error, but instead should throw a warning and attempt to set the value to the string literal. Then, if they were expecting an instance instead of a string for that property, the combination of warning and domain error from their code can illuminate the problem.\nFeels kind of hacky, but also makes Twitter names, emails, etc. not look ridiculous.\n. I'm fine with that - if it becomes a pain point for users, we can revisit.\n. I'm assuming you mean the docs for master - I would go ahead and mark it with \"This documentation is being updated for the v3 release, refer [here] for current stable docs\". \nAs for this bit, go ahead and merge, and I'll submit a PR to clean up some of the language. Just ping me afterwards and I'll jump on it.\n. I think this was a pretty good workflow - for the documentation steps, ping me in the PR and I'll review with the intention of submitting a cleanup PR post-merge. This is a pretty nice break from reactive programming...\n. I agree with your first statement, that the escape character should be \\, in all cases. Admittedly, there's something nice in the doubled chars for the \"surrounding\" stuff, but everyone is used to the backslash escape in strings. I vote keep it simple and expected.\n. I must be missing something - shouldn't it work for all circumstances?\n. I think native escape makes a lot of sense.\n. I don't think we need to offer the extension yet - escape is common enough that it should be in the library, and we can keep the interface simple until it's really needed. Did you have other use-cases in mind for custom parsing? That seems like a pretty deep dependency.\n. Makes sense to me.\n. I wouldn't set named values as the only option, especially since PHP doesn't use keyword arguments, but I'm not against supporting the feature as an addition in principle.\n. What's the benefit of cast(x, bool) vs. standard php (bool) x? Seems like we can keep it simpler.\n. Oh, I was thinking <(int) foo()> so that it would more-or-less resemble inline execution. If it makes things more complicated, though, I'm not against a faker instead.\n. @theofidry The test itself looks good to me after a quick review. Thorough job.\n. The idea makes sense to me - it's always good to clarify intentions. I would say just create a ticket with RFC to look at alternatives, like the compiler above, and mention the issue with value resolvers there. That way the problem is memorialized for future work, but we can keep things as clear as possible in the present.\n. I'm not completely clear on the intention, even after reading the comment + issue from before. Can you paste an example + intended result?\n. @theofidry So would the Alice part remove the need for actually adding the withParam method to the class? If not, how is this different from just allowing method calls?\n. @ogizanagi I understand the immutability aspect, but if we're only getting one object in the end, why does it matter? Or are all states of the single object being added to the set?\nEDIT: I think I understand - if a dev already has these immutable functions as part of the interface, this just allows them to call it and replace the old object in the set with the new one? That seems a bit over-driven by convention, but I don't have a strong disagreement.\n. At first glance, it all looks good to me. The good thing about those details is that they are low-hanging fruit for first-time contributors, so anything they want to fix or update can be welcomed immediately.\nI might clean up some of the language for the upgrade path prior to release - let me know when that is getting close. I'm in the midst of a big feature build with work, so I might need to put it off for a bit.\n. Sounds good. I've only ever done one project with Alice (PHP is rare for me), and I no longer have access to that code. I can reach out to my former client and suggest they check it out, though I'm doubtful they would have the resources to handle it right now.\nLet me know when you feel the docs are \"settled\" and I'll just do a cleanup pass for minor grammatical stuff. I think the intention throughout is very clear.\n. @theofidry I will review this weekend and push up a revision PR. Works?. Hm, I definitely wouldn't expect this either. I think we should leave this ticket open with RFC, flag it in the docs somewhere, and then make sure it is happening as expected in 3.0. At this point, I doubt it's worth the BC break, but I don't have a great suggestion for @svandervlugt... The only idea I have in mind to avoid BC break is to add a flag to the parser that \"eager evaluates\" parameters. @theofidry Thoughts?. @tyx @Seldaek Yea, good call - I will make a point of doing those checks in all the strategy patterns when I'm fixing the recent merges.\n. Wow, this must have been a legacy file from way back - not sure, will remove.\n. Change this to \"three\" and we're good.\n. I don't have an opinion on this - I personally haven't used the built-in persistence part of Alice. @Seldaek ?\n. I'm assuming this is because you have added object|null in the interface doc?\n. Not sure that this is really necessary, since $this->flush isn't used in a way where truthy / falsy values would cause problems.\n. I'm fine with returning null in general, but this is a breaking change. Anyone catching the exception would have their code break, so I don't think we can just do it \"lightly\".\n. This makes sense as a feature to leave in from my perspective, but again, I don't use it.\n. Does our version of PHPUnit not have the support for annotated exceptions?\n. Actually, I see that we're using annotations elsewhere - is there any reason you're choosing not to here?\n. Oh... wow, yea, good call. Attention to detail...\n. Personally, I prefer it as well. We do have a CS checker, but I'm not sure if it handles this situation.\n. :+1: \n. I would rather see these kinds of things in a separate PR - it's not that they aren't obviously useful, but it's a lot of chatter that makes it much more difficult to review and merge quickly.\n. This makes sense to me.\n. You really can't - it's different for any dev's implementation, since they can register custom parsers.\n. Haha, if only PHP had real hashes...\n. :+1: \n. :+1: \n. Would also rather see this in a separate PR.\n. Do you think that really adds anything to the code? That feels like it can reside in the .md docs and it be sufficient.\n. :trophy: \n. Why the double \"\\\"?\n. Such venom.\nI'm not particularly worried about a lack of clarity here, but I'm not opposed to it either.\n. :+1: \n. Ah, missed the double quotes. Ok, looks good.\n. Looks like you might have selected the wrong thing in rebase.\n. Same here.\n. @enumag Let's leave this as PluralProperties - I don't really see a benefit to making this change, and it makes it look important if it's part of the history. Also, it's marking the other class as a modification of the existing class, instead of as a new class. Just generally confusing. Make sense?\n. I would rather explicitly have the child class used than implicitly use the child class for both test cases.\n. No, sorry that was unclear - I would rather see constants for both the child class and the parent class and use them explicitly in the tests that require them so that it's clear what the intention is. For that matter, the testProperty method should probably be called testSettingPrivatePropertiesDirectly. Thoughts?\n. @gquemener Let's just add this conditional bit to the line below - it's effectively the same thing, but this makes it look like there's much more change happening than there actually is. Make sense?\n. @piribes I feel like changing $includeData makes the intention here less clear, since conceptually $includeData should be appended to $data. Instead, let's just create a new variable, $newData or something, and return it. Does that make sense?\n. This is per my request earlier - I feel like this variable name makes the intention much more clear.\n. I can go either way on this.\n. Sounds good.\n. @theofidry I like the decisions you've made and the tests you're running - I'm personally not in favor of using engineered solutions in tests (factories, etc.) since it makes things a bit more opaque, but that's just my personal taste. My preference is to have tests be stupidly obvious, because from my perspective, tests are the best documentation there is for a library.\nOther than that, I like it all.\n. @theofidry There's no reason to use $this->matches here - that was being used when we were testing in the affirmative to avoid preg matching twice. Not my best code ;)\n. ",
    "nVitius": "Is this still being worked on at all?\n. @Seldaek Any chance of getting this merged any time soon?\n. I'm in the process of figuring out why the unit tests aren't passing. There were 4 test cases failing originally, now there's just 2.\n. Alright, all tests are passing now.\n. @Seldaek Can I get some feedback on this please?\n. @tshelburne \nOkay, I'll fix this to work with 2.0 and re-open the PR then. Thanks!\n. You can keep the definitions in multiple files if you use includes.\n. @BaptN\nI made a pull request to fix that issue.\nhttps://github.com/nelmio/alice/pull/109\nI haven't gotten any feedback on it, but it does work. I'm just leaving it there until someone gets around to reviewing/merging it.\n. oops. I missed that one. Thanks for pointing it out.\n. ",
    "iprdp": "I don't see any issues in that. If you don't think there is any problem, I can fork and try!\n. @Seldaek Just as I expected, this change breaks everything. Most of BaseTest.php test cases have the offset 0 $res[0] hard-coded. And when I implemented this change, the offset is the instance name. And also this is the same scenario for all the users. They would have hard-coded array index numbers for the returned objects.\nLet me know what you think. I can think of adding an option to load() to returned numbered or named array.\n. It would break most of the unit tests of the users. You sure?\n. Right. Okay. Will let you know after fixing the unit tests.\n. ",
    "marmotz": "yml\n <words(randomNumber(0, 3))>\nor \nyml\n <words(numberBetween(0, 3))>\ndoes not work either\n. thanks !\n. +1 for this issue !\n. ",
    "thewilkybarkid": "Yeah that's a good idea.\n. ",
    "WishCow": "How does using an associative array sound, I think it wouldn't break BC?\nyaml\nAcme\\Entity\\User:\n    user:\n        __construct: { createFromRegistration: [ user@acme.local ] }\n. Would love to see this integrated, :+1:\n. ",
    "nass600": "Any plan on adding such eval function? \nThat could be a nice feature.\n. That's right. Thank you @Seldaek.\nMaybe I miss something in the documentation to figure out the possibility of making math operations or evaluate expressions with this provider so the name identity is not quite semantic for this purpose\n. Awesome!\nThank you\n. ",
    "ludofleury": "Would be awesome.\n. @Seldaek got a point. Maybe an IDE plugin for my beloved phpstorm to navigate through this \"@reference\" syntax could solve the UX point without impacting this lib. Feel free to close the issue.\n. ",
    "gh0stonio": "Thanks for the fast response.\nI will look for it.\nHappy new year ;)\n. ",
    "DavidMikeSimon": "@Seldaek \nThis should not reduce randomness. The seed is generated from an md5sum of the object and property name, which is an excellent hash function for non-crypto purposes.\nOn performance, I ran a benchmark and my code increases runtime by only about 8% (Generating 10,000 users with first and last name, email, and birthdate went from 4.7sec to 5.1sec). If this is significant I can look into optimizing my changes, there are a few ways to do this I can think offhand.\n. @KingCrunch Random fixture data is most convenient if it's (somewhat paradoxically) the same random data for each test run, so that you can reproduce the exact same issue until it goes away. That's why Alice has a feature where you can supply the seed for the RNG (and in fact it picks a seed of 1 by default).\n. @tshelburne Yes, go ahead. I'm afraid I don't have time at the moment to work on rebasing this. :-(\n. ",
    "djwatt3": "Resolved:\nAcme\\UserBundle\\Document\\Address:\n  Address{1..10}:\n    street: streetName()\n    city: city()\n    province: state()\n    zip: postcode()\nAcme\\UserBundle\\Document\\User:\n  User{1..10}:\n.....\n      address: @Address*\n....\n. ",
    "marcosdsanchez": ":+1: \n. :+1:\n. ",
    "addfs": "I think it's may be useful, when template fixture is placed in other file. We have tables with \u00b1100 columns (we need describe all fields) and  i can't imagine how we must use inheritance in one file. I'm push some code, used by our project https://github.com/nelmio/alice/pull/91 \n. in foo/bar.yml:\nyml\nSome\\Class:\n    lala:\n        foo: bar\nother-fixture.yml:\nyml\n include:\n    - foo/bar.yml\n Some\\Class:\n    lala2:\n        foo: bar2\nShould we merge Some\\Class?\nresult data:\nphp\n[\n   'Some\\Class' => [\n     lala => [ foo: bar ],\n     lala2 => [ foo: bar2 ],\n   ]\n]\nWhat if lala2 will be lala?\n. Sounds good, I'll do it :)\n. ",
    "ajessu": "Reversed the order of the logic from that comment (and updated tests accordingly to be more clear on that also).\nLet me know if you want me to squash it into one commit before merging.\n. I actually have no opinion on it, so your explanation makes more of a point in favor of that to me :+1: \nI was looking at, by reading the actual yaml, to see which way read more natural:\nyaml\nfoo (template 2, template 3, template 4):\n    1: bar\nor\nyaml\nfoo (template 4, template 3, template 2):\n    1: bar\nAnd I thought maybe the second one made more sense at the time, reading it from the bottom  up (from the actual description, to the templates it's overriding/inheriting)\n. Haha right, I meant to say, the first one read better.\n. ",
    "bradleytrager": "@KingCrunch What you are saying is not correct.  \n\nHowever, as long as the included script doesn't 'return' anything, or fail, it returns 'true'.\n\nOn success it does not return true, but the integer 1. \n\nThis means, that if the return value is not 'true' it is either invalid (it returned), or something is broken.\n\nThis conditional is checking if the return is not true and then executing the code for the situation where the file is read successfully. \nIn regard to your other point, I agree with you.  It seems that the code could be simplified while keeping the same functionality.\n. ",
    "khaoos": "i think it's good feature\n. ",
    "m16a1": ":+1: \n. php\n* param string $file\n. php\n* @param array $data\n* @param string $file\n. ",
    "morrislaptop": "Hey @nelmio, did you have any feedback on this? \n. ",
    "rdubigny": "@tshelburne my commit allows you to use the inheritance feature with range (e.g. you can use \"user{12..15} (extends user_bare)\". The inheritance didn't work with range before that. And I did add tests actually (look here : https://github.com/nelmio/alice/commit/62dc23d83b7a381c96bd502502d58734ceab82bd). Let me know if you have any questions.\n. I haven't written any test for that yet.\n. I just added some tests.\n. ",
    "calina-c": "I already tried placing the store first and then taking the id from it. My entity is defined like you suggested, with the store first.\nUnfortunately it still not works. In the database I still get the literal string <($store->getId())>9784680707 in the database.\nEven when trying with a specific store, like store1, I get <(@store1->id)>9784680707 in the database.\n. I explained this to you using the id field... That is not quite what I use, but a generated key that is not the id. I thought it was easier to explain this way :smile:  So I definitely have the unique key in the entity whenever I store.\nIt is <($store->getUniqueKey())><randomNumber(10)>\n. ",
    "shouze": "@jubianchi yes, would be cool to merge some PRs indeed before tagging (1.7.0 seems to be the right tag as it seems there's no BC break).\nI and @rezzza team are ok to help too.\n. @Seldaek good news :beers: \n. ",
    "Spy-Seth": "Hey, Any news about the 1.7 version ? It seems' all the wanted feature as been merge.\n. :tropical_drink:\n. ",
    "Mx-Glitter": "Thanks for the info!\n. ",
    "havvg": "@tshelburne I just took a brief look into your changes and will rebase my changes onto your re-factoring.\n. ",
    "Sentoki": "I for this issue too. This can allow release my brain from holding in the imagination all sequence of system's actions that lead me to some fixtures content. \n. ",
    "BaptN": "Hi,\nI'm experiencing the same issue here, probably due to misunderstanding the include system : \nI have 2 files : \n```\ncategory.yml\nFoo\\Entity\\Category:\n  categoryTest:\n    name: barCategory\npost.yml\ninclude:\n  - category.yml\nFoo\\Entity\\Post\n  postTest:\n    name: foobarPost\n    category: @categoryTest\n```\nIt's \"half\" working, I get my database populated, but with 2 Category instead of one :( \nFor the moment, I handle it with a custom Loader, merging all my yaml files in one before sending to load, but I'm still wondering .... Is there any way to get cleaner cross-file references ?\n. I did a few more test.\nIt turns out I was not sending yaml files in the right order (I had \"post.yml\" processed before \"category.yml\"). Now, loading category.yml, then post.yml,  without any include directive  in post.yml, I get the reference to Category working (with no duplication by the way).\n. ",
    "liverbool": ":+1: \n. ",
    "Markcial": "I  started a project on the 1.0 branch, i will look for some spare time to check if it can be easily ported to the new code and do a PR with it\n. I have a use case with private entities, i did changes just to test if the constructor is private to skip it and if it has mandatory arguments throw an exception recommending using the static factory documented, but i already saw that the travis did not accepted the tests for php5.3, i will try to make compliant with the 5.3 builds a little bit later\n. sorry, the errors on the last builds are my bad. finally i successfully added the support for older versions of php\n. Is there a branch to fork or work with? I will be pleased to have the 2.0 features on my testing environment, thanks!\n. Hi @Seldaek i have no free time for next two weeks, but after it i will try to help in this repo.\n. Hi there, i only added the private constructor support, but i am wondering if i could help with some features i added in my development version, i added support for array collections from doctrine, repeatable items in the function calls, etc, but the docs are for the prior version, is there any README or docs for the newer version? Thanks! :smiley: \n. Hi! \nI was wondering if there is any support for doctrine array collections or repeteable arguments for yml call to functions.\n. Hi @tshelburne, the issue can easily been solved in the \\Nelmio\\Alice\\Instances\\Instantiator\\Methods\\ReflectionWithoutConstructor, the condition checks only for the shouldUseConstructor, but it should check if the class is instantiable with a simple reflection check. Give me a little bit of time and i will PR the newer code.\n. ping!\n. :+1: \n. ping\n. Ok, i will look for a moment today and I will update the proper README section\n. ping!\n. ",
    "sdepablos": "Ping\n. Ping\n. ",
    "jenkoian": "Does this differ in any way to using __construct: false?\n. Cheers, I wanted to add some basic docs about it (https://github.com/nelmio/alice/pull/182) so was just wondering.\n. This is a duplication of https://github.com/nelmio/alice/pull/149\nThe change got reverted though I think (see comments on that PR).\nIt seems that the Yaml Loader was removed in this commit: https://github.com/nelmio/alice/commit/a6906bc8f2eb09866f3ae69f2c29479bab4b40b2 and the docs not updated. I think rather than remove this section we need to just change it a bit:\nphp\n$loader = new Nelmio\\Alice\\Fixtures\\Loader();\n$loader->addProcessor($processor);\n$objects = $loader->load(__DIR__.'/fixtures.yml');\nProb need to update this section too https://github.com/nelmio/alice#detailed-usage\n. I added this section to the README, it was a while ago so excuse the memory jogging but I think it was down to passwords didn't get encoded otherwise, nor did the canonical fields get set. More info here: https://github.com/FriendsOfSymfony/FOSUserBundle/blob/ef7ca325929ff102fff521653a2e3b88c7a40361/Resources/doc/user_manager.md#updating-a-user-object\n. Yeah, maybe a link to the fos user docs or something? It's just an example of a processor in action, so perhaps not worth being too specific, but anything to help people out I guess :)\n. @tshelburne yeah I think that's fair, my intention when I added the example was exactly that, an example. I only used fos user as an example as I thought it could prove a common scenario. If it's proving to hinder rather than help though, then feel free to update to something more generic :+1: \n. Personally I prefer the Ctrl-f friendly, all on one page approach, although I suppose that's not scalable.\n. @Soullivaneuh it's to work with Symfony 3 due to https://github.com/symfony/symfony/pull/16285\n. ",
    "t-geindre": "Ok sorry... Now I understand the meaning of (local).\nThanks!\n. That would be nice. Because I am stuck for now.\n. Thanks\n. ",
    "cystbear": "Hi @tshelburne the explanation inside #118 \n. most actual code inside #121 \n@tshelburne as far as you did huge refactoring this can be closed in favor of #121 \nI think new version 2.0 can do BC breaks, so please merge #121 \n. yup.\n@theofidry Take a look #121 \n. Done inside #121 \nHave no idea why GitHub does not caught that changes.\n. Thanks Jordi\n. ",
    "TomasVotruba": ":+1: Seems ok.\n. Thanks\n. I found simple solution for my goal. Closing\n. Good attention :+1:\n. Thanks @tshelburne \n. :+1: \n. Thanks!\n. > I'm fine with most of the changes but there is a few rules I'm not fond of.\nAwesome, I've replied at those with my reasoning. But all can be removed of course. It's your call.\n\nAlso there is a make cs command using PHP-CS-Fixer, would it be possible to add the missing rules to it?\n\nI'd love to, but it's not possible since it's based on EasyCodingStandard.\n. Glad to help :+1: . I just run PSR2 as considered to be standard. \nI think it's better to have consistend code than special rule for better readability and writeability.\n. When I read some code in (...) I suppose it's required and has special meaning (otherwise every code or condition would have it). This is not the case.. Just this case or in general? I think it's better to use expressive class names, rather then depend on namespace, like UserRepository instead of User (entity? repository? controller?) and DummyEntityWithConstructorAndCallable instead of DummyWithConstructorAndCallable (dummy something?).\nBut I can remove this file from change.. Allright then.. I didn't find it in examples (; is always preceeded by some char), but you are right, it's in no_empty_statement [@Symfony], my bad.. As you wish :bowing_man: . Well, it actually from PSR2 of PHP_CodeSniffer: PHP_CodeSniffer\\Standards\\PSR2\\Sniffs\\Methods\\FunctionCallSignatureSniff.SpaceAfterCloseBracket\n\n. So this whole file should be reverted or only this single case?. ",
    "jverdeyen": "@tshelburne __construct: true feels ok for me. But indeed @Seldaek I'll revert to a 1.x until this is 'fixed' (as this isn't really a bug). Thanks!\nShall we keep this issue report open?\n. Thx, I'll test asap!\n. Ok, can you merge?\n. ",
    "sroze": ":+1: \n. My thoughts are that with these changes, things are getting so simple to use ! Further, changes aren't so huge, I \"just\" added a ParameterBag and created a new processor method.\n. In fact, it can simplify the fixtures like the example I gave in the first message but it also have another really interesting usage (and that's this second usage I'm really using): fixtures are parametrized !\nI can't imagine the number of usages... Because when you create the loader, you can also set arguments that can be used. I'm using it to allow a user to change a little bit fixtures such as the administrator username for instance, or what ever you want more.\nWith the pull request proposed on Hautelook/AliceBundle, bundles could use Alice to have fixtures that can be configured in the application itself, and it's what I use.\n. @Seldaek I still think that the best idea is the keep the YAML parameter strategy :)\nWhat are you thinking about that @tshelburne ?\n. ping @Seldaek \n. @tshelburne I don't really like the idea of possible conflicts between parameters and the HTML tags. What about <'param'> ? It forces to add the ', and will for sure prevent conflicts ! \n. <{foo}> seems good to me ! And I agree with @Seldaek: that will allow to throw an error if parameter is not found and helps in case of typo.\nEverybody's still okay with the following syntax of parameters definition (in addition to the ParameterBag):\n``` yaml\nparameters:\n    foo: value\nAcme\\ClassName:\n    property: <{foo}>\n``\n. I just rebased on master and changed the parameter syntax to<{foo}>`.\n. :+1: \n. @tshelburne Can we imagine a release soon ?\n. @tshelburne Thanks for your feedback !\n. ",
    "mattsnowboard": "I suppose this isn't necessary. I just had tried to use Processors to achieve it before I realized that processors can't persist new objects. Maybe a doc note that says processors cannot persist new objects would be nice.\n. ",
    "cmfcmf": "It is handled here: https://github.com/nelmio/alice/blob/master/src/Nelmio/Alice/Fixtures.php#L76.\n. The undefined variable will be fixed by #220.\n. Hi @theofidry, I don't see any new commit which fixes the issue with the adder method. Either I'm wrong or I don't quite understand your comment.\n. The undefined variable I found while discovering the original issue, which I mentioned in the last paragraph, is indeed fixed. But the main problem persists. Sorry for the confusion.\n. I think something like this should work:\n``` yml\nNelmio\\Entity\\Group:\n    group{1..5}:\n        name: group \nNelmio\\Entity\\User:\n    user{0..49}:\n    group: \n    name: user \n```\nI haven't tested it, but you might need a cast to int inside the identity call.\n. I have a similar use case, but on template level. Each event has questions, whereas every event has three default questions. I would love to be able to define those inline with the template definition.\nyml\nEventManager_Entity_Event:\n  base_event (template):\n    eventName: <sentence(mt_rand(3, 15))>\n    questions (embedded template):\n      EventManager_Entity_Question_String:\n       lastname (extends lastname_question): {}\n       firstname (extends firstname_question): {}\n      EventManager_Entity_Question_Email:\n        email (extends email_question): {}\nNow I'd like to be able to just do:\nyml\nEventManager_Entity_Event:\n  my_custom_event (extends base_event):\n    eventName: Hi there!\nwhich then should persist a new event entity which is associated to three new question entities. \n. ",
    "charlesschaefer": "@Seldaek Sorry for sending against the wrong branch.\nRight now I'm not able to port this to master (because of work constraints), but I'll try to do it soon.\n@tshelburne userType: 50% a : b would generate 4 users?\n. ",
    "reypm": "Nevermind I've found where the error was, this line: email (unique): <companyEmail> is wrong should be email (unique): <companyEmail()>\n. @Seldaek you're the owner of the bundle, that's really good news. Can you add a example around what you're talking about? I'm lost at this point.\nPS: I made the PR as you told me on Stackoverflow around the issues maybe you should modify them in order to give us a better perspective\n. Nice, it's working \n. @Seldaek I can confirm that, I'm having a lot of issues with this\n. @Seldaek thanks, until then did you know any solution, so is changing sources Doctrine? I'm having the issue on this fixture:\nComunBundle\\Entity\\ProductoSolicitud:\n    ProductoSolicitud_{1..15}:\n        producto: @Producto_*\n        solicitud_usuario: @SolicitudUsuario*\n        condicion_producto: @CondicionProducto*\n        finalidad_producto: @FinalidadProducto*\n        procedencia_producto: @ProcedenciaProducto*\n        lote: <fakerRandomNumeric(4)>\n        observaciones: <sentences(2)>\n        factura: <fakerRandomNumeric(4)>\nBut I don't know where is the error. This is the associated entity:\n```\nclass ProductoSolicitud {\n        use IdentifierAutogeneratedEntityTrait;\n    /**\n     * @var \\Producto\n     *\n     * @ORM\\ManyToOne(targetEntity=\"ComunBundle\\Entity\\Producto\")\n     * @ORM\\JoinColumn(name=\"producto_id\", referencedColumnName=\"id\")\n     */\n    protected $producto;\n\n    /**\n     * @var \\SolicitudUsuario\n     *\n     * @ORM\\ManyToOne(targetEntity=\"ComunBundle\\Entity\\SolicitudUsuario\")\n     * @ORM\\JoinColumn(name=\"solicitud_usuario_id\", referencedColumnName=\"id\")\n     */\n    protected $solicitud_usuario;\n\n    /**\n     * @var \\CondicionProducto\n     *\n     * @ORM\\ManyToOne(targetEntity=\"ComunBundle\\Entity\\CondicionProducto\")\n     * @ORM\\JoinColumn(name=\"condicion_producto_id\", referencedColumnName=\"id\")\n     */\n    protected $condicion_producto;\n\n    /**\n     * @var \\FinalidadProducto\n     *\n     * @ORM\\ManyToOne(targetEntity=\"ComunBundle\\Entity\\FinalidadProducto\")\n     * @ORM\\JoinColumn(name=\"finalidad_producto_id\", referencedColumnName=\"id\")\n     */\n    protected $finalidad_producto;\n\n    /**\n     * @ORM\\Column(name=\"lote\", type=\"integer\", nullable=false)\n     */\n    protected $lote;\n\n    /**\n     * @ORM\\Column(name=\"observaciones\", type=\"string\", nullable=true)\n     */\n    protected $observaciones;\n\n    /**\n     * @var \\ProcedenciaProducto\n     *\n     * @ORM\\ManyToOne(targetEntity=\"ComunBundle\\Entity\\ProcedenciaProducto\")\n     * @ORM\\JoinColumn(name=\"procedencia_producto_id\", referencedColumnName=\"id\")\n     */\n    protected $procedencia_producto;\n\n    /**\n     * @ORM\\Column(name=\"no_factura\", type=\"string\", length=40, nullable=false)\n     */\n    protected $factura;\n\n    /**\n     * Set producto\n     *\n     * @param \\ComunBundle\\Entity\\Producto $producto\n     * @return ProductoSolicitud\n     */\n    public function setProducto(\\ComunBundle\\Entity\\Producto $producto)\n    {\n        $this->producto = $producto;\n        return $this;\n    }\n\n    /**\n     * Get producto\n     *\n     * @return \\ComunBundle\\Entity\\Producto\n     */\n    public function getProducto()\n    {\n        return $this->producto;\n    }\n\n    /**\n     * Set solicitud usuario\n     *\n     * @param \\ComunBundle\\Entity\\SolicitudUsuario $solicitud_usuario\n     * @return ProductoSolicitud\n     */\n    public function setSolicitudUsuario(\\ComunBundle\\Entity\\SolicitudUsuario $solicitud_usuario)\n    {\n        $this->solicitud_usuario = $solicitud_usuario;\n        return $this;\n    }\n\n    /**\n     * Get solicitud usuario\n     *\n     * @return \\ComunBundle\\Entity\\SolicitudUsuario\n     */\n    public function getSolicitudUsuario()\n    {\n        return $this->solicitud_usuario;\n    }\n\n    /**\n     * Set condicion producto\n     *\n     * @param \\ComunBundle\\Entity\\CondicionProducto $condicion_producto\n     * @return ProductoSolicitud\n     */\n    public function setCondicionProducto(\\ComunBundle\\Entity\\CondicionProducto $condicion_producto)\n    {\n        $this->condicion_producto = $condicion_producto;\n        return $this;\n    }\n\n    /**\n     * Get condicion producto\n     *\n     * @return \\ComunBundle\\Entity\\CondicionProducto\n     */\n    public function getCondicionProducto()\n    {\n        return $this->condicion_producto;\n    }\n\n    /**\n     * Set finalidad producto\n     *\n     * @param \\ComunBundle\\Entity\\FinalidadProducto $finalidad_producto\n     * @return ProductoSolicitud\n     */\n    public function setFinalidadProducto(\\ComunBundle\\Entity\\FinalidadProducto $finalidad_producto)\n    {\n        $this->finalidad_producto = $finalidad_producto;\n        return $this;\n    }\n\n    /**\n     * Get finalidad producto\n     *\n     * @return \\ComunBundle\\Entity\\FinalidadProducto\n     */\n    public function getFinalidadProducto()\n    {\n        return $this->finalidad_producto;\n    }\n\n    /**\n     * Set lote\n     *\n     * @param int $lote\n     * @return ProductoSolicitud\n     */\n    public function setLote($lote)\n    {\n        $this->lote = $lote;\n        return $this;\n    }\n\n    /**\n     * Get lote\n     *\n     * @return int\n     */\n    public function getLote()\n    {\n        return $this->lote;\n    }\n\n    /**\n     * Set observaciones\n     *\n     * @param string $observaciones\n     * @return ProductoSolicitud\n     */\n    public function setObservaciones($observaciones)\n    {\n        $this->observaciones = $observaciones;\n        return $this;\n    }\n\n    /**\n     * Get observaciones\n     *\n     * @return string\n     */\n    public function getObservaciones()\n    {\n        return $this->observaciones;\n    }\n\n    /**\n     * Set procedencia producto\n     *\n     * @param \\ComunBundle\\Entity\\ProcedenciaProducto $procedencia_producto\n     * @return ProductoSolicitud\n     */\n    public function setProcedenciaProducto(\\ComunBundle\\Entity\\ProcedenciaProducto $procedencia_producto)\n    {\n        $this->procedencia_producto = $procedencia_producto;\n        return $this;\n    }\n\n    /**\n     * Get procedencia producto\n     *\n     * @return \\ComunBundle\\Entity\\ProcedenciaProducto\n     */\n    public function getProcedenciaProducto()\n    {\n        return $this->procedencia_producto;\n    }\n\n    /**\n     * Set no factura\n     *\n     * @param string $factura\n     * @return ProductoSolicitud\n     */\n    public function setFactura($factura)\n    {\n        $this->factura = $factura;\n        return $this;\n    }\n\n    /**\n     * Get no factura\n     *\n     * @return string\n     */\n    public function getFactura()\n    {\n        return $this->factura;\n    }\n\n}\n\n```\nWhere I'm setting any ArrayCollection or something that needs to be an array? I'm completely lost :(\n. Hi @Seldaek and thanks for your answer, I have some difficulties here, this is how my fixtures looks:\n```\nUsuarioBundle\\Entity\\Usuario:\n    Usuario0:\n        pais: @Pais\n        estado: @Estado_\n        municipio: @Municipio\n        ciudad: @Ciudad\n        parroquia: @Parroquia*\n        persona: f\n        correo_alternativo: admin_alternative@admin.com\n        telefono: fake('phoneNumber'))>\n        telefono_movil: fake('phoneNumber'))>\n        direccion: \n        representativeName:  \n        username: admin\n        email: admin@admin.com\n        enabled: 1\n        plainPassword: 1qazxsw2\n        roles: [ROLE_ADMIN]\n        grupos: [@Grupos0]\n        credito: \nUsuarioNat{1..5}:\n    pais: @Pais*\n    estado: @Estado_*\n    municipio: @Municipio*\n    ciudad: @Ciudad*\n    parroquia: @Parroquia*\n    persona: <boolean(35)>\n    correo_alternativo: <safeEmail()>\n    telefono: <phoneNumber()>\n    telefono_movil: <phoneNumber()>\n    direccion: <address()>\n    representativeName: <firstNameMale()> <lastName()>\n    username (unique): <fakerCI()>\n    email (unique): <companyEmail()>\n    enabled: <boolean(35)>\n    plainPassword: <lexify()>\n    grupos: [@Grupos*]\n    credito: <randomFloat('2','6', '2')>\n\nUsuarioEmp{6..10}:\n    pais: @Pais*\n    estado: @Estado_*\n    municipio: @Municipio*\n    ciudad: @Ciudad*\n    parroquia: @Parroquia*\n    persona: <boolean(35)>\n    correo_alternativo: <safeEmail()>\n    telefono: <phoneNumber()>\n    telefono_movil: <phoneNumber()>\n    direccion: <address()>\n    representativeName: <firstNameMale()> <lastName()>\n    username (unique): <fakerRIF()>\n    email (unique): <companyEmail()>\n    enabled: <boolean(35)>\n    plainPassword: <lexify()>\n    grupos: [@Grupos*]\n    credito: <randomFloat('2','6', '2')>\n\nUsuarioBundle\\Entity\\Natural:\n    Natural{1..5}:\n        usuario: @UsuarioNat\n        pais_origen: @Pais\n        cedula (unique): <($usuario->getUsername())>\n        nombre (unique): \n        apellido: \n        fecha_nacimiento: \n        sexo: \nUsuarioBundle\\Entity\\Empresa:\n    Empresa{1..5}:\n        usuario: @UsuarioEmp\n        rif (unique): <($usuario->getUsername())>\n        capital_social: \n        capital_pagado: \n        razon_social (unique): \n        fecha_registro_mercantil: \n        registro_mercantil: \n        tomo: \n        folio: \n        empleados: \n        ciiu: @Ciiu\n        representante_legal: @Contacto\n        persona_contacto: @Contacto\n```\nSince Natural and Empresa have different methods for create the username then I split User creation in two loops. That should work. Now I need to use Usuario fixtture in some others fixtures but I think if I do this:\nComunBundle\\Entity\\SolicitudUsuario:\n    SolicitudUsuario{1..15}:\n        usuario: @Usuario*\n        tipo_tramite: @TipoTramite*\n        fecha_creacion: <dateTime()>\n        tipo_registro: @TipoRegistro*\n        estado_solicitud: @EstadoSolicitud*\n        diferencia_pago: <randomFloat('2','6','2')>\n        oficina_regional: @OficinaRegional*\nAlways admin will be assigned, I'm right? So in this case how do I use UsuarioNat and UsuarioEmp randomly instead Usuario? Any ideas?\n. @Seldaek I'm getting this message:\n\n[InvalidArgumentException]\n Unknown formatter \"identity\"\n\nAnd haven't idea where I've make the mistake where I should look for it?\nPS: Doctrine and his \"good\" messages\n. Here is the result of --verbose:\nException trace:\n () at /var/www/html/vendor/fzaninotto/faker/src/Faker/Generator.php:167\n Faker\\Generator->getFormatter() at /var/www/html/vendor/fzaninotto/faker/src/Faker/Generator.php:149\n Faker\\Generator->format() at /var/www/html/vendor/nelmio/alice/src/Nelmio/Alice/Loader/Base.php:287\n Nelmio\\Alice\\Loader\\Base->fake() at /var/www/html/vendor/nelmio/alice/src/Nelmio/Alice/Loader/Base.php(645) : eval()'d code:1\n eval() at /var/www/html/vendor/nelmio/alice/src/Nelmio/Alice/Loader/Base.php:645\n Nelmio\\Alice\\Loader\\Base->Nelmio\\Alice\\Loader\\{closure}() at /var/www/html/vendor/nelmio/alice/src/Nelmio/Alice/Loader/Base.php:651\n Nelmio\\Alice\\Loader\\Base->process() at /var/www/html/vendor/nelmio/alice/src/Nelmio/Alice/Loader/Base.php:456\n Nelmio\\Alice\\Loader\\Base->populateObject() at /var/www/html/vendor/nelmio/alice/src/Nelmio/Alice/Loader/Base.php:222\n Nelmio\\Alice\\Loader\\Base->load() at /var/www/html/vendor/nelmio/alice/src/Nelmio/Alice/Loader/Yaml.php:39\n Nelmio\\Alice\\Loader\\Yaml->load() at /var/www/html/vendor/h4cc/alice-fixtures-bundle/Fixtures/FixtureManager.php:149\n h4cc\\AliceFixturesBundle\\Fixtures\\FixtureManager->load() at /var/www/html/vendor/h4cc/alice-fixtures-bundle/Command/LoadSetsCommand.php:81\n h4cc\\AliceFixturesBundle\\Command\\LoadSetsCommand->execute() at /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Console/Command/Command.php:252\n Symfony\\Component\\Console\\Command\\Command->run() at /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:896\n Symfony\\Component\\Console\\Application->doRunCommand() at /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:193\n Symfony\\Component\\Console\\Application->doRun() at /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Console/Application.php:96\n Symfony\\Bundle\\FrameworkBundle\\Console\\Application->doRun() at /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:124\n Symfony\\Component\\Console\\Application->run() at /var/www/html/sencamer/vendor/symfony/symfony/src/Symfony/Component/Console/Shell.php:112\n Symfony\\Component\\Console\\Shell->run() at /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Console/Application.php:91\n Symfony\\Bundle\\FrameworkBundle\\Console\\Application->doRun() at /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:124\n Symfony\\Component\\Console\\Application->run() at /var/www/html/app/console:27\nAnd yes I'm using custom providers fakerCI and fakerRIF what do you mean with:\n\nMaybe you call setProviders() and overwrite the default Nelmio\\Alice\\Provider\\IdentityProvider\n. So basically I need to wait until you merge the fix and then update both bundles?\n. Thanks it's working now\n. @tshelburne can this be random? I mean take this OficinaRegional fixture example (I fake names but it haves real one in spanish for that reason I fake so you can understand better):\n\nAppBundle\\Entity\\OficinaRegional:\n    OficinaRegional0:\n        nombre: OficinaRegional1\n    OficinaRegional1:\n        nombre: OficinaRegional2\n    OficinaRegional2:\n        nombre: OficinaRegional3\n    OficinaRegional3:\n        nombre: OficinaRegional4\n    OficinaRegional4:\n        nombre: OficinaRegional5\n    OficinaRegional5:\n        nombre: OficinaRegional6\n    OficinaRegional6:\n        nombre: OficinaRegional7\n    OficinaRegional7:\n        nombre: OficinaRegional8\nThen at TipoTramite fixture I'm trying:\noficinaRegionals: [ @OficinaRegional* ]\nBut I got this error:\n\nCould not determine how to assign 0 to a AppBundle\\Entity\\TipoTramite object\n\nI'm using \"h4cc/alice-fixtures-bundle\": \"dev-master\" at composer.json file, any advice?\n. @tshelburne I will close this issue and let this question for SO, take a look to this http://stackoverflow.com/questions/30115354/using-custom-faker-data-providers-without-standard-doctrine-fixtures-in-nelmio-a I am trying to do the same\n. @tshelburne did you see the post at SO? I need some help on that since I am stucked on it, thx in advance\n. Thanks @Seldaek. Could you give me some advice in how to handle the fixture when relationship is on both sides? Take a look to Brand and TargetBrand entities below:\n```\nclass Brand\n{\n    ...\n/**\n * @ORM\\OneToMany(targetEntity=\"TargetBrand\" , mappedBy=\"brand\")\n */\nprotected $targetBrand;\n\nprotected $targets;\n\npublic function __construct()\n{\n    $this->targets = new ArrayCollection();\n    $this->targetBrand = new ArrayCollection();\n}\n\npublic function getTargets()\n{\n    $targets = new ArrayCollection();\n    foreach ($this->targetBrand as $target) {\n        $targets[] = $target->getTarget();\n    }\n\n    return $targets;\n}\n\npublic function setTargets($targets)\n{\n    foreach ($targets as $target) {\n        $targetBrand = new TargetBrand();\n        $targetBrand->setBrand($this);\n        $targetBrand->setTarget($target);\n        $this->addTargetBrand($targetBrand);\n    }\n}\n\npublic function addTargetBrand($targetBrand)\n{\n    $this->targetBrand[] = $targetBrand;\n}\n\npublic function removeTargetBrand($targetBrand)\n{\n    return $this->targetBrand->removeElement($targetBrand);\n}\n\n}\nclass TargetBrand\n{\n/**\n * @var int\n *\n * @ORM\\Column(type=\"integer\")\n */\nprotected $priority;\n\n/**\n * @var Target\n *\n * @ORM\\ManyToOne(targetEntity=\"Target\", inversedBy=\"targetBrand\")\n * @ORM\\JoinColumn(name=\"targets_id\", referencedColumnName=\"id\")\n * */\nprotected $target;\n\n/**\n * @var Brand\n *\n * @ORM\\ManyToOne(targetEntity=\"Brand\", inversedBy=\"targetBrand\")\n * @ORM\\JoinColumn(name=\"brands_id\", referencedColumnName=\"id\")\n * */\nprotected $brand;\n\n....\n\n/**\n * Set target.\n *\n * @param \\PDI\\PDOneBundle\\Entity\\Target $target\n *\n * @return TargetBrand\n */\npublic function setTarget(Target $targets = null)\n{\n    $this->target = $targets;\n\n    return $this;\n}\n\n/**\n * Get target.\n *\n * @return \\PDI\\PDOneBundle\\Entity\\Target\n */\npublic function getTarget()\n{\n    return $this->target;\n}\n\n/**\n * Set brand.\n *\n * @param \\PDI\\PDOneBundle\\Entity\\Brand $brand\n *\n * @return TargetBrand\n */\npublic function setBrand(Brand $brand)\n{\n    $this->brand = $brand;\n\n    return $this;\n}\n\n/**\n * Get brand.\n *\n * @return \\PDI\\PDOneBundle\\Entity\\Brand\n */\npublic function getBrand()\n{\n    return $this->brand;\n}\n\n}\n```\nIf you wish to split this in two fixtures Brand.yml and TargetBrand.yml how would you deal with this?\n. Nevermind, was my bad, recheck the doc refresh my memory: territory (unique): @Territory* should be territory (unique): @territory* that fix my issue, thx\n. loooollll almost one year from this answer hahahaha nvm I am not working on this anymore I will close this issue but anyway thanks for your reply :D \n. Any advice on this guys @Seldaek @tshelburne? I'm frustrated and can't find a way to move forward at this point so need your help (sorry for ask almost directly when shouldn't be)\n. Hi there, post is already posted at StackOverflow under nelmio-alice tag,\ncan you take a look? Nobody has answered yet and I'm stucked\nOn May 13, 2015 12:30 PM, \"Tim Shelburne\" notifications@github.com wrote:\n\nHi @paquitodev https://github.com/paquitodev, I would suggest you post\nquestions in a place like StackOverflow where the attention is on finding\nanswers to problems immediately. We will be available to help when we can,\nbut this is really just a list of issues and bugs.\nThat said, I appreciate that you're pointing out these particular bugs and\nproblems.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nelmio/alice/issues/211#issuecomment-101747145.\n. I leave this away due to rush and will close the issue for now since I have not time to test this at this moment but I will be back with some test later, anyway thanks @fschaeffer for your support and heads up\n. @tshelburne no, it's not important to have those values in there, I just put them because was the best way I found but you tell me which is the best way and I can change my fixture, no problem\n. @tshelburne and what about the names? I need the names as in the example having this latest answer how is that possible?\n. @tshelburne Great, I will work on this and let you know how it goes, if I get this done I will close the issue as fixed, thanks for your support\n. @theofidry yes I am using HautelookAliceBundle but then I should have one fixture per name? or several names comma separated? Meaning something like:\n\n```\nPlatformAdminBundle\\Entity\\Carrier:\n    carrier{1..X}:\n        name: \nPlatformAdminBundle\\Entity\\Carrier:\n    carrier{1..X}:\n        name: \nPlatformAdminBundle\\Entity\\Carrier:\n    carrier{1..X}:\n        name: \n```\nor:\nPlatformAdminBundle\\Entity\\Carrier:\n    carrier{1..X}:\n        name: <foo('UNKNOW,VIVO,CLARO,TELEMIG,OI,TIM,CTBC,SERCOMTEL,BRT')>\nI am lost\n. Closed as moved to HautelookAliceBundle repo. Thanks both for your support\n. @tshelburne  I like the second choice more than the first one but hasn't idea how the faker should be could you give me a little example? Just for see what is on your mind? Thanks in advance\n. @tshelburne I am not asking about Faker Generation since I know how to do it and register as a service. What I am talking is about the logic for what you said on the second idea, that's my doubt.\n. @tshelburne so you said better goes through template way rather than this way? Is that what you said?\n. @theofidry thanks, I am waiting no problem\n. @theofidry @tshelburne Great, I will work on this and let you know how it goes, if I get this done I will close the issue as fixed, thanks for your support\n. ",
    "sobit": "awesome! any ideas in which version it can be released?\n. that was SUPERquick! =)\n. ",
    "smarques": "mhh I get \n  [InvalidArgumentException]\n  Unknown formatter \"identity\"\nAny hints?\nTIA\n. sorry I was not clear. I am on version 1.7 \nname\": \"nelmio/alice\",\n            \"version\": \"1.7.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/nelmio/alice.git\",\n                \"reference\": \"0730001c3be46dedf393ef4168d6239d9969c61c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/nelmio/alice/zipball/0730001c3be46dedf393ef4168d6239d9969c61c\",\n                \"reference\": \"0730001c3be46dedf393ef4168d6239d9969c61c\",\n                \"shasum\": \"\"\n            },\n. no hints? :crying_cat_face: \n. Nice, thank you very much.\n. yes, sorry... closing, thank you very much\n. ",
    "devster": "I would like have this feature in 1.x, a lot :) I can do a new PR on master to reflect this feature as soon as possible.\nWith a MagicCall populator maybe?\n. up\nThere is the PR for master https://github.com/nelmio/alice/pull/157\n. thx!\n. ",
    "lerox": "@tshelburne +1\n. ",
    "cAstraea": "Hello , this worked for me \nAppBundle\\Entity\\Speaker:\n    speaker_{1..70}:\n        contact: '@contacts_'\nAppBundle\\Entity\\Conference:\n    conference_{1..100}:\n        startat:  \n        comment: \n        place:  '@place_'\n        tour: '@tour_'\n        sponsor: '@sponsor_'\n        diffusion: ['@diffusions_']\n        speaker: ['@speaker_']\nspeaker and diffusion is in many to many relation with Conference\n. my fault sorry , missed the closing } \n. ",
    "mortyccp": "um.. I would like to hide some field in the super class and dont want anyone to mess with it, so I set those field to be private without setter. In creating fixtures, I just need the child classes only.\n. Its by constructor, but in fixture setup constructor arguments  do not support @ referencing.\nBy the way, it is possible to do a late referencing so instances can mutual referencing each other.\nI just add a \"post\" flag to property, which indicate that the property should be processed after normal process, in this way late referencing can be achieved. I dont know its a good solution or not.\n. ClassA :\n    A:\n        id: 123\n        value: 321\nClassB:\n    B: \n        __construct: [@A->id, @A->value]\nThe above case, B's id and value will be null.\n. toBeInclude.yml\nFoo:\n    foo:\n        id: id\n        text: <word()>\nInclude.yml\n```\ninclude:\n    -   toBeInclude.yml\nBar:\n    bar:\n        id: 1\n        value: 2\n        text: @foo->text\n```\nIn the original way, the finial yml final will be as following, which bar->text cannot reference foo->text as the order is wrong.  \n```\nBar:\n    bar:\n        id: 1\n        value: 2\n        text: @foo->text\nFoo:\n    foo:\n        id: 1\n        text: \n```\nIn the way I suggested, the finial yml will look like the following, which bar->text can correctly reference foo->text.\n```\nFoo:\n    foo:\n        id: 1\n        text: \nBar:\n    bar:\n        id: 1\n        value: 2\n        text: @foo->text\n```\nThis modification can be ignored if finally order has no effect on referencing.\n. ",
    "ianfp": "+1 for supporting references in constructors -- I'm having the same problem.\n(P.S. Are \"+1\" comments bad GitHub etiquette?)\n. ",
    "tristanbes": "Sure, class is 1815 lines long, so I stripped \n``` php\nclass Site extends InheritableEntity implements ThemeOwnerInterface, LockableInterface\n{\n    /*\n     * @ORM\\OneToMany(targetEntity=\"Site\\Extension\", mappedBy=\"site\", cascade={\"persist\"})\n     * @YllyInheritData\\Field(type=\"OneToMany\")\n     /\n    protected $extensions;\npublic function setExtensions($extensionsName)\n{\n    foreach ($extensionsName as $extensionName) {\n        $extension = new Extension();\n        $extension->setName($extensionName);\n        $this->addExtension($extension);\n    }\n}\n\npublic function getExtensions()\n{\n    return $this->extensions;\n}\n\n```\nThis class inherits from BaseEntity which redefines the __set method (I don't know why though)\n``` php\nclass BaseEntity\n{\n    public function set($field, $value)\n    {\n        if (!property_exists($this, $field)) {\n            throw new \\InvalidArgumentException(\n                sprintf('Property \"%s\" does not exist in class \"%s\"', $field, CLASS)\n            );\n        }\n    $this->$field = $value;\n}\n\npublic function __set($field, $value)\n{\n    $this->set($field, $value);\n}\n\n} \n```\nI tryed deleting those overrided magic methods, but it didn't help for this issue.\n. ",
    "Darhazer": "Done. Should I provide similar PR for 2.x branch?\n. Any chance this to be included and released, so I can start using in production?\n. ",
    "aistis-": "Does anyone have a working example of it? :thinking: . I guess, you could use addTranslation(@translation_1) on your translatable model. But still - you have to build this @translation_1 object on separately as alice supports natively only flat descriptions.. Hello! Is @user1->getName() already supported?. I get an error in beta3:\n[Nelmio\\Alice\\Throwable\\Exception\\Generator\\Resolver\\ResolverNotFoundException]  \n  No resolver found to resolve value \"@product_1->getSku()\".\nBut it worked as @product_1->sku on private property.. \"version\": \"v3.0.0-beta.3\",\n\"reference\": \"3e53619db2590bfa72552e724cad1613a6c5c9c0\". Is it something I should hook up manually?. Thank you!. @theofidry thank you!. @theofidry Thank you, will check the it :+1: . Thank you!. ",
    "yann-eugone": "Not sure to see how calls may help with this.. You are talking about \"personal translation\". With MyModelTranslation model, you can do what you say (you could do this at the moment where the issue where opened).\nThis is not a strategy I can choose.. ",
    "bendavies": "Thanks for the fast merge!\n. +1\n. @Seldaek any chance of a quick review Jordi?\n. @tshelburne I've made this into two commits to make it a bit more obvious.\n1. I've changed it up a bit. There is now a new model just for static constructor testing.\n2. It's already covered. After the first commit, testLoadCallsStaticConstructorIfProvided will fail. The 2nd commit fixes it.\nThanks.\n. @tshelburne no problem. thanks for the merge!\n. @tshelburne any chance of a tag?\n. Cheers\nOn Mon, 4 Jan 2016, 18:49 Tim Shelburne notifications@github.com wrote:\n\n@bendavies https://github.com/bendavies Done. Thanks again.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nelmio/alice/pull/301#issuecomment-168765973.\n. \n",
    "ifdattic": "Glad to help\n. ",
    "ferodss": ":+1: \n. ",
    "Jaap-van-Hengstum": "You are right, Saeldaek, the type hint was missing. Thanks for pointing that out, it works like intended now.\n. ",
    "fchris82": "Sorry, the AliceBundle uses the 1.x version, not the master.\n. ",
    "kgilden": "Also ran into this problem today. Arrays do seem to be supported, but slightly differently than expected. Currently the entire array is hashed and checked whether a similar array has already been generated. One would probably expect each individual item within the array to be unique. So changing this part of the code might do the trick.\n. Right, thanks!\nSo if I understood correctly, a potential fix would be checking whether the passed value is some instance of the alice package or a foreign object? Basically, the __clone method of each alice class that can be passed as value should recursively clone their wrapped alice class, but not a foreign object?\nI did, however manage to find a workaround by going with a custom provider and enforcing uniqueness there by keeping track of which elements have been used already. Adding it here for reference, if someone else runs into the same problem.\n```php\nuse Faker\\Generator;\nfinal class UniqueElementProvider\n{\n    private $generator;\n    private $usedElements = [];\npublic function __construct(Generator $generator)\n{\n    $this->generator = $generator;\n}\n\npublic function uniqueElements(array $elements, int $count = 1): array\n{\n    $this->usedElements = [];\n\n    $unusedElements = array_udiff($elements, $this->usedElements, function ($a, $b) {\n        return spl_object_hash($a) <=> spl_object_hash($b);\n    });\n\n    $chosenElements = $this->generator->randomElements($unusedElements, $count);\n    $this->usedElements = array_merge($this->usedElements, $chosenElements);\n\n    return $chosenElements;\n}\n\n}\n```. ",
    "Sly36": "Thank you for this quick answer ! It works !\n. ",
    "dagio": "The fixture definition was : \nAcme\\Bundle\\UserBundle\\Entity\\User:\n   user_{1..10}:\n        username: <firstName()> <lastName()>\n        email: <email()>\n        plainPassword: <password()>\n        enabled: true\n        group: @default_group\n        timezone: <timezone()>\n        createdAt: <dateTimeBetween('1999-01-01', '1999-01-01')>\n        updatedAt: <dateTimeBetween($startDate = '-1 years', $endDate = 'now')>\n        locale: <locale()>\n. Maybe we could check the property type. For example here we are talking about password which is a string. We could presume that we do not expect an object reference ?\n. ",
    "nicolas-bastien": "Hi, we have the same question using CMF \nhttps://github.com/nelmio/alice/issues/160\n@vittore did you find a clean solution ?\n. Hi,\nYou should just code one loader LoadData and include user.yml at the beginning of products.yml.\nNico\n. Hi @gouaille on Nelmio I'm just a user like you ;-)\nIf you have a look at the Fixtures::load method you will see how it's done internally.\nI think what I told you is the right way to do it.\nIt's not really usefull to have several LoadData class just to load yml file.\nNow in 2.* you can use the loadFiles method\n. ",
    "vittore": "No news, I'm sorry.\nv.\n2015-04-14 15:17 GMT+02:00 Nicolas Bastien notifications@github.com:\n\nHi, we have the same question using CMF\n160 https://github.com/nelmio/alice/issues/160\n@vittore https://github.com/vittore did you find a clean solution ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nelmio/alice/issues/178#issuecomment-92822712.\n\n\nhttp://www.zen.pn.it\n. ",
    "ireinhart": "Did you have open an issue or pull request? In that case we can kill this pull request.\n. ",
    "eschwartz": "I think somewhere between my provider and checkTypeHints(), the ArrayCollection was converted to a string.\nI don't have the code in front of me for it anymore -- is there test coverage for this I could take a look at, see a working example?\n. so... I put together an example project to try and reproduce the issue, and I couldn't get it to break.\nThat means either I was doing something wrong, or there were other things going on in my project that were causing my provider to fail.\nI might try to give another go at the DataProvider in my project, and then reproduce any issues I'm having in eschwartz/alice-issue-181. The DataProviders can do some cool stuff (check out the BookOnTheFly provider), so I'd like to be able to use them. Maybe if I can figure things out, I'll flesh out the docs for you.\n. ",
    "chucky2305": "Your example code helped me to fix my issue. Thank you @eschwartz . Forgot to mention the actual error message that comes up when i run my tests:\nExpected value of type \"App\\Entity\\Group\" for association field \"App\\Entity\\Person#$groups\", got \"Nelmio\\Alice\\Definition\\Value\\FixtureReferenceValue\" instead. (Doctrine\\ORM\\ORMInvalidArgumentException). I corrected the error message above. ",
    "thul": "That seemed to have solved it, in combination with me removing an 'array to string' conversion error in the entity. Arrays given to the setConfig() were casted to a string for some reason\n. ",
    "mrsax": "That was my aim\njust as a reference to help people with the same issue :)\nthanks for the good work \nMathieu\nMathieu Dierckx\nWebdeveloper\nmathieu@pau.be mailto:jens@pau.be\nTel.: 0495 92 06 70\nhttp://www.pau.be http://www.pau.be/\nP\u00e0u BVBA | Albrecht D\u00fcrerstraat 33A | B 2060 Antwerpen\nDit e-mailbericht is uitsluitend bestemd voor de geadresseerde. Als dit bericht niet voor u bestemd is, wordt u vriendelijk verzocht dit aan de afzender te melden. Pr\u00eat \u00e0 utiliser staat door de elektronische verzending van dit bericht niet in voor de juiste en volledige overbrenging van de inhoud, noch voor tijdige ontvangst daarvan. Voor informatie over Pr\u00eat \u00e0 utiliser raadpleegt u http://www.pau.be http://www.pau.be/.\n\nOn 26 Feb 2015, at 15:43, Jordi Boggiano notifications@github.com> wrote:\nClosing I guess since you resolved, but it's good to have here for future reference.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/nelmio/alice/issues/184#issuecomment-76189302.\n. \n",
    "gnat42": "This would be very helpful indeed\n. ",
    "h4cc": "@theofidry No plan here yet ...\n. Yes, i can and will have to do so to be compatible to older versions. Its your choice.\n. ",
    "stevleibelt": "as long as it is solved :-)\nThanks for the work so far :+1: \n. ",
    "kminh": "Might be related, but is this possible:\nyaml\nMy\\Entity:\n    entity:\n        languages: 3x <languageCode()>\nRight now it appears as \"3x en\", \"3x fr\" in database.\n. ",
    "luispabon": "Same problem as @kminh , I was expecting that to work.\n. ",
    "aequasi": "Yeah, thats what i've got working now, but i was actually hoping i could do \nyml\naliases: <numberBetween(1,5)>x <firstName()> <lastName()>\nSomething along those lines...\n. if you are only doing =='s , you could just do $matchedFlag in all these, instead of $matchedFlag == 1\n. Not sure if this repo follows PSR-2, but i dont think this matches PSR-2\n. iirc, static is better here\n. Here too\n. could one-line this too\nphp\n$matchedFlag = is_string($data) ? preg_match('#' . $placeHolderRegex . '#i', $data, $matches) : 0;\n. should be a blank line before returns too. PSR-2\n. Should align all these, like the other doc blocks\n. should be int\n. ",
    "aderuwe": "This is actually easily handled by a Processor - closing.\n. ",
    "afilina": "@aderuwe Can you share that processor please?. ",
    "egoista": "Same problem, some work around?\n. @c1tru55 thank you\n. sorry for the dumb question,\nI'm using hautelook/alice-bundle, have someway to use this PR with hautelook/alice-bundle?\n. ",
    "c1tru55": "@egoista see PR #195 \n. @Seldaek done\n. Ideally we need not only support of current() inside provider, but support of calling provider function inside another provider (and so on). I mean some kind of recursive processing arguments. But unfortunately I have no time for that now, so I add only current() support on top level. I think you or other maintainer(s) can implement it much faster.\n. @Seldaek can you please add new tag for this feature?\n. ",
    "FoxxMD": "+1 for having this in the master branch\n. :+1: That fixed it! Thanks\n. ",
    "fschaeffer": "+1 for master branch, just discovered this very useful method and use it in 1.x branch but will update soon to 2.x ...\n. @egoista as hautelook/alice-bundle is just a wrapper you can use it as every other function\nmediaThumb{1..100}:\n        mediaType: @mediaTypethumb\n        name: <identity(current() + 100)>.jpg\n        asset: @assetInstanceIn<current()>\n. Any news on this feature for 2.x/master? This issue prevents updating to 2.x as the -usage in identity is really usefull...\n. How about using \nyaml\nplan_{1..3}:\n    business: 10x @business_*\n    name: word() Plan\n```\n. Hello @paquitodev, which version ofalice are you using?\nI'm at 1.x and have no issues to use the arrayCollection.\nphp\n/**\n     * Constructor\n     */\n    public function __construct()\n    {\n        $this->media = new ArrayCollection();\n        $this->productRelations = new ArrayCollection();\n        $this->texts = new ArrayCollection();\n        $this->brands = new ArrayCollection();\n        $this->subbrands = new ArrayCollection();\n        $this->priority = 99;\n    }\nand in fixture.yml\n``` yaml\nAppBundle\\Entity\\Common\\Asset\\Asset:\n    asset_bare (template):\n        priority: 1\n        brands: [@brand]\n        subbrands: [@subbrand]\n        group: @assetGroupImage\n        filename (unique): .eps\n        filesize: \n        fileextension: eps\n        filedate: \n        isDisplayedInCatalogue: true\n        released: \nassetInstanceIn{1..<?php echo $numberOfItems; ?>} (extends asset_bare):\n    name: Private Asset Current <current()>\n\n```\nThe yaml-file does use the brands relation which was initialized in the constructor but leaves text without any assignment.\nSo in 1.x it works as one would expect (without setting construct:false)\n. +1 as some Symfony Bundles refer to nelmio 2.x since some time and we can't update them due to this missing feature.\nIs it hard to port this to 2.x? Has the syntax / functionality changed so much, that the (small) changes made in the 1.x-branch are not portable? Otherwise I would give it a try ...\n. ",
    "pwm": "+1, I just ran into this as well. It would be greatly useful.\nWhat I tried to do is something like this:\nseasonAllowance: 50%? @baseAllowance<current()>->allowance : <numberBetween(@baseAllowance<current()>->allowance, 1000)>\n. ",
    "ktounet": "very useful feature! master branch ?\n. ",
    "gouaille": "Hi Nicolas,\nThank's for your answer. \nIs it a missing feature/bug from your bundle or from Doctrine fixtures core itself ?\n. Actually i'm thinking about providing data with a fully independent bundle. \nLet's imagine you have a \"MediaBundle\" which helps user to upload and serve Media in a specific way. It could be usefull if it came with it's own fixtures. Then we should be able to reference them for our own application fixtures. If i use my previous example, we shoud be able that a product_1 has a media defined in the media.yml of the MediaBundle.\n. ",
    "ReservedDeveloper": "Two things of note:\n1. I was using the Faker provider via a custom provider. Shouldn't have any impact, but felt it worth mentioning.\n2. I see here where the true value is being parsed. I'd be interested to know why the true value is always needed. It only appears to be used to confirm value type in the event of an empty/outside-of-threshold instance.\n. @Seldaek After further digging, I see the lines I linked were part of the initial commit. Could you provide any additional context around the reason the true value is always needed? Why does the library need to return an empty array if type array?\nWould it be at all possible to rework so that the caller handles returning an empty type (ex via ##% <trueCall()>: [] or similar)?\n. ",
    "iBasit": "I'm trying to build 3 plans for all 10 business's. so each business will have 3 plans.\n``` yaml\nbusiness_{1..10}:\n          email (unique):   email()\nplan_{1..3}:\n          business: @business_{1..10}\n          name:         word() Plan\n```\n. I'm getting same error. \ncreated:            <dateTimeBetween('-12 months', 'now')>. This error is coming on 3-dev version. \nError is on dateTimeBetween parsing, when it is parsing the values,  it takes single or double quotes into the actual values.  Lets take following example:\nif values are  <dateTimeBetween('-12 months', 'now')> it will take value -12 months as '-12 and second parameter months, so making third parameter now\nYou will either get time zone error or the above error.\nfollowing are the actual dump values \nvendor/fzaninotto/faker/src/Faker/Provider/DateTime.php on line 121\n```\nstring(4) \"'-12\"\nstring(7) \"months'\"\nstring(3) \"now\"\n```\nso if you remove space from the values, it will fix the issue\n. https://github.com/nelmio/alice/blob/master/tests/Loader/LoaderIntegrationTest.php#L448\nYou can add quick test if you like, not sure why there is strrev function being used on the test, seems so pointless. \nBut I found the solution to this, not a proper solution, but remove space from the string, then it will work, with space it will not parse proper and throw errors. (ex: -12 months to -12months). 2.x is working fine, all my fixtures were working fine on 2.x, only 3.x needs fixing :). Nope, nothing special other than Custom Faker providers, which was easily switched over with new implementation. \nNot sure what to do for above error, which is very important to fix. Any suggestions?. I have reproduced the problem at https://github.com/iBasit/alice-problem.git\nGetting up and running is easy as 123.\n\ncomposer install\nbin/console database:create:database\nbin/console doctrine:schema:update --force\n\nand then just test with bin/console hautelook:fixtures:load\n\nI hope you can help on this. Thank you. Any luck how I can fix this?. Off Topic\nThat must be soo much hassle arranging dates and movers van and help.  If you haven't booked any van, then try https://www.deliveryd2d.com they have good customer service, which helps a lot, they take care of everything on low cost with a van. \nBack on Topic\nPlease take a look at it when you get a chance, our work is being held because of this deadlock. Anyway, Thank you and appreciate all your help.. Thanks.\nYes detail is using parent primary key as the primary key of detail, rather than its own. It's one to one relationship.  . I did have a look at the doctrine2 issue before I posted here, they head phpdoc error.\nI was trying to dig in and I found the error is generated by following line\nhttps://github.com/theofidry/AliceDataFixtures/blob/788b8364e5e7fdd527376c06863c4dce2550b456/src/Loader/PersisterLoader.php#L85\nI'm not sure how to fix this issue, this issue did not exist previously on 2.x. I have tried the second solution with the above code. I got following error stating user is new entity and not the one that has already been persist/saved.\n\nI have also committed the above code and pushed to the repo.\n. I have overwritten the class, but on run time, it loads the overwritten class and then after loading all the datafixtures yml files it loads the old ObjectManagerPersister, which then gives an error. \nI have committed the changes. Do you think there is still some other bug?. I agree, If you check following service file which I committed on the the alice-problem git repo, it has same service id. it loads fine on first load, but on second load it takes the old service..\nservice names\nhttps://github.com/iBasit/alice-problem/commit/ef0cf73767f64d44e721c347768303f78b5432d8#diff-1728bfc1c274f341afc1a0275fca694d . Sorry, what I mean is when it runs PersisterLoader it loads the new ObjectManagerPersister fine, but after loading all the datafixtures yml files, then it loads old ObjectManagerPersister, which uses persist and flush method.  Not sure why its loading old ObjectManagerPersister after it has already loaded the new ObjectManagerPersister.. Thank you so much, this helped a lot.  I had an issue with purger also, but manage to fix it.. Great!  \u2014\u00a0Just heads up, if there is a relationship in sync with detail to other entities, this fix will effect them also, so one would have to persist them as well. \nMy example was user to affiliate and then also affiliate sub relationships\nalso on the note, --purge-with-truncate does not work at all (actually same problem here as before, setting and then unsetting...) \n . ",
    "kolinko-ant": "I face the same problem. @iBasit did you solve it with nelmio alice or it can't do such things now?\n. ",
    "mariusz-kraj": "+1\n. ",
    "reisraff": "Just treat as a value object\n. HF\\Model\\Entity\\Authentication\\User (local):\n  user{alice, bob, jean, fred}:\n    username: <current()>\n    email: <current()>@example.org\n    createdAt: <datetime()>\n    address: @Address*\n. Join with PR #234 \n. @tshelburne I believe that Is not necessary 'cause every unity tests already is passing and, is just a check if the constructor method accept parameters or not.\n. @jefersondaniel tks ;)\n. ",
    "basz": "would you care you provide an example? I can't get this to work...\n```\nHF\\Model\\Embeddable\\Address:\n  Address{1..10}:\n    street: streetName()\n    city: city()\n    postcode: postcode()\n    country: country()\nHF\\Model\\Entity\\Authentication\\User:\n  user{alice, bob, jean, fred}:\n    username: \n    email: @example.org\n    createdAt: \n    address: @Address*\n```\nDoctrine\\ORM\\ORMInvalidArgumentException: The given entity of type 'HF\\Model\\Embeddable\\Address' (HF\\Model\\Embeddable\\Address@0000000036160d1e0000000059a32356) has no identity/no id values set. It cannot be added to the identity map.\n. ",
    "blaues0cke": "@theofidry The \"Reuse generated data using objects value\" part is gone in the master branch. This link is working: https://github.com/nelmio/alice/blob/2.x/doc/customizing-data-generation.md. ",
    "Toasterson": "Same Problem here.\nI'm using alice 1.7.2.\n. Is this requirement mentioned in the Docs?\nIf it isn't I suggest adding it. Making the Relation in addEntity is only one suggested path in Symfony. Most docs I've read suggest the addition via setParentEntity Which in turn either calls addEntity or Automagically set the Parent based on DB Relations.\n. ",
    "AlaeddineMessadi": "I had this issue before, I think you have a OnetToMany relation, if yes\nchange the setter parameter to array and the getter return to youEntity[] | ArrayCollection\nthen in your fixtures put the data in in an array []\n. ",
    "garak": "Got the same issue. My entity constructor needs an ArrayCollection of related objects, so I created following provider:\n```php\n<?php\nnamespace App\\DataFixturesProvider;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nfinal class CollectionProvider\n{\n    public static function collection(array $objects): ArrayCollection\n    {\n        return new ArrayCollection($objects);\n    }\n}\n```\nand my fixture is something like:\nyaml\nApp\\Entity\\Product:\n    product_1:\n        __construct:\n            id: '<id()>'\n            name: 'A product'\n            items: '<collection([@item_1])>'\nBut I'm getting the following exception\n\n[Doctrine\\ORM\\ORMInvalidArgumentException]                                 \n  Expected value of type \"App\\Entity\\Item\" for association field \"App\\Entity\\Product#$items\",\n  got \"Nelmio\\Alice\\Definition\\Value\\FixtureReferenceValue\" instead.                 . \n",
    "beyerz": "Not sure if this is still relevant as the issue is closed, but I used the built-in identity provider to overcome this.\nyml\nApp\\Entity\\MyEntity\n  entity1:\n    items: '<identity(new Doctrine\\Common\\Collections\\ArrayCollection([@item1,@item2]))>'. ",
    "miguelrs": "Thanks for your comment @tshelburne. As for creating those entities separately, I don't like it too much, I'd rather define each user fixture individually anyway...\nAs for the provider approach, actually I've been giving it a try, but I can't figure out how to do it...\nLet's say I create the provider function communityWithoutUserType($userType) to give me a random community that has not the given user type yet, so I make sure communities have at most 1 user of a given type...\nFrom that function I need to get the communities that has been created so far, which is ok, but I also need to know which users have been already assigned to those communities, which is what I don't know how to do... because at that moment, users have not been persisted!\nSo the only option I see is to create a kind of in-memory array of communities with users and populate it within that function, so I can check what has been created so far every time I call that function... but that's really ugly...\nCan you suggest anything? Thanks in advance ;)\n. I ended up creating this provider function, which returns a random Community that does not contain the given UserType, by exploring the references contained in the $loader object so far:\n```\npublic function communityWithoutUserType(UserType $userType)\n{\n    $communities = new ArrayCollection();\n    foreach ($this->loader->getReferences() as $ref => $entity) {\n    // Populate the array of communities\n    // Note: communities will always appear earlier in the array of references, because they were loaded first, otherwise we'd need 2 independent loops\n    if ($entity instanceof Community) {\n        $communities->add($entity);\n    }\n\n    // Once array of existing communities is populated, remove those that contain the given UserType\n    if ($entity instanceof UserEntity && $entity->getUserType() == $userType) {\n        $communities->removeElement($entity->getCommunity());\n    }\n}\n\n// Eventually return a random item in the array, which contains only those communities without the given user type\nreturn $communities->get(array_rand($communities->toArray()));\n\n}\n``\n. @staabm Sorry if that was unclear. I mean I have only private properties in my entities, and I pass all the data I need into the constructor and work with immutable entities.\n. Actually, after spending quite a while trying things, I realised that the solution was much easier...\nJust by adding the option__construct: false` to the fixture, the constructor won't be called, and a reflection class approach will be taken to create the instances, which seems to be working now so far...\n. ",
    "chriscollinsboxuk": "I'm seeing the same issue.\n. ",
    "ogizanagi": "Tests added. One or the other should be sufficient, though.\nLet me now if I should remove one.\n. I may have encountered a similar / related issue, where this works as expected:\nyml\nApp\\Product\\Attribute:\n    foo:\n        __construct:\n            - '@bar'\n            - <enum('AttributeName', 'CONTENT_QUANTITY')>\n            - 40.0\nbut this does not:\nyml\nApp\\Product\\Attribute:\n    foo:\n        __construct: ['@bar',  <enum('AttributeName', 'CONTENT_QUANTITY')>, 40.0]\n\n[Doctrine\\Common\\Persistence\\Mapping\\MappingException]\n  No mapping file found named 'AttributeNameEnum.orm.yml' for class 'App\\Product\\Enum\\AttributeNameEnum'. \n\n:memo: This only fails when using a provider with more than one argument, like my enum provider\nAlso note that the provider content has no effect on the triggered error. The method's body can be empty, it won't change anything. Alice seems to simply fail at parsing the inlined __construct array properly when using a provider with more than one argument.\nHowever, if you think it is not related to your issue, I'll create a new one.\n. Actually I don't see how a custom provider could help ? :confused: \n. I've just tried and got:\n\nCould not determine how to assign addImage to a Catalog\\Product\\Product object\n\nBut anyway I doubt this would have worked like I expected. I don't want to call addImage with multiple images as arguments, but call addImage multiple times with the necessary arguments to build the image (an Image is a simple value object built by the Product entity).\n. Thanks for your answers anyway. :)\nMight be interesting to have a special _method_calls key as below in order to solve this:\nyaml\nCatalog\\Product\\Product:\n    foo:\n       # [...]\n       _method_calls:\n            - addImage: ['foo-image', 0]\n            - addImage: ['bar-image', 1]\nAny advice on how to achieve this ?\n. I haven't thought about the with* method of immutable objects, but I'd love to have it, too. \ud83d\udc4d \n. @theofidry : I fear I'm unable to help from the implementation POV, because I know too few about Alice internals and didn't had time nor really the need to dig into it until now :/\nBut I definitively approve this feature request.\n\nIf not, how is this different from just allowing method calls?\n\nBecause it'll return a new instance each time, so each subsequent call should take the new instance instead of the original one.\nyml\nDummy:\n     dummy:\n         __construct: ['foo']\n         __configurator:\n             - withParam: ['bar'] # returns a new instance based on the one returned by the previous construct call\n             - withOtherParam: ['baz'] # returns a new instance based on previous one with \"bar\" param\n             # ...\n. I tried adding one, but it fails with a Nelmio\\Alice\\Throwable\\Exception\\FixtureBuilder\\Denormalizer\\UnexpectedValueException: Could not denormalize the given constructor exception :/\nI don't really get what's happening here, also considering the fix is working properly on my own project and beta5. \ud83d\ude15 . I managed in ba986d076b537d05f22f3621d422c7de3ba726db to fix the tests by injecting & using the arguments denormalizer in ConstructorWithCallerDenormalizer, but I don't know if these changes are legit.\nBTW, ideally, shouldn't ConstructorWithCallerDenormalizer be able to decorate any ConstructorDenormalizerInterface, and not just a SimpleConstructorDenormalizer ?. Are you sure those changes aren't right? It only updates the first part about generating the fixture objects and to me does not violates the idempotent and immutable rules.\nIt looked actually weird to try back using the SimpleConstructorDenormalizer in the case of a factory method, just to get the arguments fixture objects and build a MethodCallWithReference from it.\nTo me the ConstructorWithCallerDenormalizer should:\n\nTry using the decorated implementation (here SimpleConstructorDenormalizer). If it succeed, just return, if it fails, continue.\nResolve the caller reference (here simply the current classname in the scope) and method.\nDenormalize the arguments. Previous code was using the simpleConstructorDenormalizer for this purpose. But why? We just need to denormalize arguments, we know how to build a MethodCallInterface instance from previously collected informations.\nBuild and return the MethodCallWithReference.\n\nMaybe I'm missing something \ud83d\ude15 . Changes made. :)\nWhere would the documentation fit the best in the current documentation? (mention the decoration of the loader property accessor + symfony configuration sample). Documentation added.. Hey! Did you happen to have a look at this issue yet? I encountered it many times now and it's quite annoying :'(. Thanks. I'll may give a look at it then, but have to gather some time and motivation too :). \u2728  Thanks @Nijusan for having taken care of this :). You mean to ensure the accessor never consider static properties? Done (and accessor updated).. I don't think we should support it (use cases look a bit edgy to me), but you set the rules. \ud83d\ude04 \nActually, I'm not even sure the property access component is meant to be used to access any static property.. diff\n- if (false === ($constructor instanceof NoMethodCall) && '__construct' !== $constructor->getMethod()) {\n+ if (!$constructor instanceof NoMethodCall && '__construct' !== $constructor->getMethod()) {\n?. I'm breathless and stuttering just by reading this in my head \ud83d\ude06 . ",
    "Perfect-Web": "does the associative array work ? i couldnt make it work no matter what. @theofidry thats fine :) but still is on edge php 7 only sooo unless we change all the env, there is nothing to do .... ",
    "henry-geronimo": "Maybe too late, but it was simply because order is a reserved keywords in SQL , you have to rename your column name in annotation like this.\n@ORM\\Column(name=\"`order`\", type=\"integer\")\n. ",
    "idr0id": "Yes I can. But I don't have idea how to mock static method StringUtil::singularify().\n. @tshelburne I have done.\n. ",
    "PedroTroller": "@Seldaek Of course, https://github.com/KnpLabs/rad-fixtures-load/pull/7\nThanks.\n. ",
    "enumag": "I'm new to Alice so I just ran into this randomly when my fixtures.neon file was still empty (I have custom parser for neon type).\nI'll add the test soon.\n. The test with custon CSV parser was failing for me so I fixed that as well (in separate commit). Please check if the fix is to your liking.\n. Thanks for your advice although I'm aware of it myself. I just don't know how else I can configure fixtures for my entities. If you can advice me about that I'd be greatful.\nHere is the the problematic part of my entities:\n``` php\n/*\n * @ORM\\Entity\n /\nclass Demand\n{\n    // some other properties + their getters & setters\n/**\n * @ORM\\OneToOne( targetEntity = \"DemandSchedule\", inversedBy = \"demand\")\n * @var DemandSchedule\n */\nprivate $schedule;\n\n/**\n * @param bool $need\n * @return DemandSchedule\n */\npublic function getSchedule($need = false)\n{\n    if ($need && !$this->schedule) {\n        $this->schedule = new DemandSchedule($this);\n    }\n    return $this->schedule;\n}\n\n}\n/*\n * @ORM\\Entity\n /\nclass DemandSchedule\n{\n    // some other properties + their getters & setters\n/**\n * @ORM\\OneToOne( targetEntity = \"Demand\", mappedBy = \"schedule\" )\n * @var Demand\n */\nprivate $demand;\n\npublic function __construct(Demand $demand)\n{\n    $this->demand = $demand;\n}\n\n/**\n * @return Demand\n */\npublic function getDemand()\n{\n    return $this->demand;\n}\n\n}\n```\nI need a fixture for Demand (with schedule), currently I've this.\n```\nApp\\Entity\\Demand:\n    demand1:\n        schedule: @schedule1 // this is the problem - setting private property\n        // other fields\nApp\\Entity\\DemandSchedule:\n    schedule1:\n        __construct: false // to avoid error\n        // other fields\n```\nI've tried it the other way around as well:\nApp\\Entity\\DemandSchedule:\n    schedule1:\n        __construct: [ @demand1 ]\n        // other fields\nThe problem is that since Demand is the owning side of the relation it won't work - both entities are created correctly but the relation between them is not saved.\nIn retrospect the owning side probably should have been DemandSchedule but it would not be easy for me to change that now (I've the same problem on multiple places in my application).\nIs there a way to configure such fixtures without relying on setting private properties / adding a setter Demand::setSchedule($schedule) / changing the relation owning side? It pretty much means creating @schedule1 entity by @demand1->getSchedule() method - which I don't know how to achieve.\n. Tanks for your advice, I think I'd rather use the improved property populator for now...\nTest added. While working on it I also noticed that composer.lock is commited as well for some reason and that PHPUnit is way outdated so I fixed that as well.\n. @tshelburne All done, can you review it again? :-)\n. Sure, it just didn't make sense to use a class called PluralProperties for test that doesn't work with arrays. But as you wish, I'll change it back.\n. You mean to remove these constants? I'm not sure I understand.\n. No test uses the parent class directly, in both cases the child class is needed.\nI just used the existing naming scheme for the method, will rename as you wish.\n. ",
    "reasn": "can confirm this error.\n. ",
    "placid2000": "Hi, this might not really be relevant but I just want to share the information.\nI'm getting the error \n\n\"A new entity was found through the relationship 'AppBundle\\Entity\\User#language' that was not configured to cascade persist operations\"\n\nby loading two fixture files\n$loader = $container->get('fidry_alice_data_fixtures.doctrine.persister_loader');\n$loader->load([$fixturesDir . 'first.yml', $fixturesDir . 'second.yml']); \nAnd having the Language Entity defined one time in first.yml and one time in second.yml\n. ",
    "sveneisenschmidt": "Thank you for the reply. Okay, 2.x is fine. :)\nDraft without variables:\nphp\n$processor = Nelmio\\Alice\\Util\\Processor\\FakerFactory::create($providers = []);\n$result = $processor->process(\"<numberBetween(1, 99)>\");\nWould there be a need for variables and how would variables look in that context. Do you have an example?\n. So we would pass it through directly to the original process call.\nhttps://github.com/nelmio/alice/blob/master/src/Nelmio/Alice/Instances/Processor/Methods/Faker.php#L114\nphp\n$variables = ['foo' => 'bar'];\n$processor = Nelmio\\Alice\\Util\\Processor\\FakerFactory::create($providers = []);\n$result = $processor->process(\"<numberBetween(1, {foo})>\", $variables);\nI am still not sure if it would be a good practice to create a new Processable every time we call process. Although this is how the original example from me works.\nWe have to think of a second class that is returned by FakerFactory that holds the actual Faker instance with all registered providers and implements the process method and like I said would transform the string input to a new Processable that can be passed to the native process method.\nUpdate:\nClass https://gist.github.com/sveneisenschmidt/716419cd2f0343992a47\n``` php\n$providers = [];\n$variables = ['foo' => 'bar'];\n$faker = new \\Nelmio\\Alice\\Util\\FakerFacade::create($providers);\n$result = $faker->process(\"\", $variables);\n```\n. ",
    "jefersondaniel": "+1\n. ",
    "jpizzribeiro": "+1\n. ",
    "oldskool": "I would also appreciate a new release for exactly this bugfix. :smile: \n. ",
    "hjr3": "I was away on leave for a while, catching back up on this stuff. @theofidry and I have spoken and I will move forward with giving him access.\n. ",
    "sgb-io": "+1\n. ",
    "appeltaert": "Being able to conditionally/variably inherit another fixture would be a good solution also.\n. Not possible using variables either.\nyaml\npostalZipcode: 50%? <nl_NL:postcode()>\npostalNo: $postalZipcode? <nl_NL:buildingNumber()>\n. Man, silly..\nyaml\ncompany_pobox (template):\n    postalZipcode: <nl_NL:postcode()>\n    postalNo: <nl_NL:buildingNumber()>\n    postalCity: <nl_NL:city()>\ncompany{1..10} (extends company_pobox):\n. If it's not possible and a welcome addition, i can work on that. Maybe some sort of post processing. Or a tagged doctrine event listener for a compiler pass in the hautelook bundle? Maybe not the best solution since that would only cover Symfony users, but i cant simply register the listeners in the test environment,  since fixtures are ran in dev too.\nAnyway, awaiting your thoughts\n. @theofidry should've included some yml :)\nIt's very simple:\n``` yml\nCompany:\n    acme:\n        media: // .. has o2m Medium\n        logo: '@logo'\nMedium:\n    logo:\n        company: '@acme'\n```\nMedium needs a Company reference, it owns the relation. But Company has a reference to Medium for its logo. So the logo needs to be persisted first for its m2o relation to Company..\nCan i cover this with the 2.0 beta of the bundle?\n. Ohhh the assumptions... Could've swore i tested it.. :) Thought it persisted entities right after the were handled. You're right, it works perfectly fine. Thanks for playing my rubber ducky for today :)\n. Oh man, github needs some sort of real-time awareness of people writing comments :) Anyway, thanks for wasting your time. I'll try to make it up soon contributing on some of the bugs or something\n. No prob, i can take a look at it, this or the next week\n. So i did some eyeballing, and while its not a terrible lexer, i think(not an expert) this feature requires a LL(k) parsing pattern to solve elegantly, and like you suggested yourself, #601 supports it.\nI think this is a good move, a lot of open issues/tasks i saw on that 3.0 road map involves the lexer also right? Chances are that most new features/changes are going to involve the lexer.\n. I totally missed contrbuting.md, i'll put some more time in into this. It is possible that it takes someone more acquainted with the internals to really pick this up, but its still a fun introduction to the internals.\n. ",
    "hidabe": "So,\naProp: <words(<{myParam}>)>\nnot working\n. I know.\n@reinfi It is right, fixtures are doing only insert, but, if i have id, what is the problem with do update? \n@theofidry ok, i have solved and testing this problem in nelmio/alice, changing: refresh by merge, it work, insert and update. I dont know how do it from alicebundle, and if it is possible.\nI will try about it\nany idea?\nregards!\n. I know @tshelburne but TODAY, Alice is storing data with: \n$this->om->refresh($object);\nYou could replace it by:\n$this->om->merge($object);\nand same feature will work, and you will do update support.\nI thing it, but, i will work trying do it from AliceBundle, yes,\nThanks!, Regards!\n. ",
    "munkie": "@tshelburne I've splitted this PR into three:\n- This PR now only introduces usage of preg_grep to improve Collection::random performance\n- #260 LoaderTest cleanup\n- #261 Add test for 0x multiplier in reference\n. @tshelburne I provided same fix for 1.x branch #262\n. @tshelburne I confirm, have not found any other PropertyInterface::$matches usage.\nBy the way, what do you think about using https://scrutinizer-ci.com/ for code analysis ?\n. @tshelburne I've created an account for my fork so you can check what kind of reports it has - https://scrutinizer-ci.com/g/munkie/alice/\n. OK, i've removed changes not related to docblocks.\n. @tshelburne I've merge master and resolved conflict, so this PR can be merged now.\n. @tshelburne done\n. @theofidry @tshelburne Rebased\n. Well, it is more readable than concatenated one. Also symfony recommends to use sprintf for exception messages.\n\nException message strings should be concatenated using sprintf.\n\nSee - http://symfony.com/doc/current/contributing/code/standards.html#structure\n. @Seldaek So should i revert sprintf's and just leave empty check ?\n. About 2x boost in this test https://gist.github.com/munkie/1d06214d8eaa2af349c1 for 1000 items\n. Because $file needs to be added to the beginning of expected exception message\n. OK, i can leave just string[]\n. It return matches created by preg_match and they are always strings.\n. It's the result of php-cs-fixer run with rules you configured in .php_cs\n. @theofidry $rawData is an array of class specs where key is class name and values are arrays of specs where keys are \"names\" (object keys) and values are arrays of object property specs. If you can come up with good summary for all that it will be great. \n. Blame @tshelburne it is his code )) I just added docblock to clearify that in this case value will be an array.\n. Backslash is used to escape special characters, thou there are no \".\" sequence, it's safer to use doubled backslash\n\nTo specify a literal backslash, double it (\\)\n\nSee double quotes string type docs - http://php.net/manual/en/language.types.string.php#language.types.string.syntax.double \n. @tshelburne Fixed\n. @tshelburne Fixed\n. ",
    "ErikJson": "Would love to have something very similar for customizing fixtures based on the current application environment. So I would name the groups \"testing\", \"development\", etc and pass in the desired environment as a filter of sort.\n. Good point regarding the tests, and it made me rethink that part of our fixture usage. We are still left with the need to separate the \"base\" and \"development\" though.\nSo, for example; we always want to create the admin user no matter what the environment is. But sometimes we also want a bunch of dummy users for development purposes. I am currently struggling a lot to accommodate this while at the same time not repeating template definitions between files, and I think that this group concept would be of great help.\n. We are using a customized framework built on Lumen (with Doctrine). For better and for worse, but at least we are in full control :)\nWe already have a solution in place where we can group our fixtures using directories that allows them to be applied separately, but code reuse gets very complex and we end up with duplicated template definitions. The group feature would hopefully allow us to put everything related to an entity in a single file.\n. You can pass in new Doctrine($entityManager) if you want to instantiate the Fixtures object directly, but yes I agree that they should be consistent.\n. It is an instance of either Nelmio\\Alice\\PersisterInterface or Doctrine\\Common\\Persistence\\ObjectManager.\nBasically, Alice needs a way to talk to your database. If you are using Doctrine  you can pass in the standard EntityManager instance, otherwise you will have to provide your own implementation of the above interface.\n. One more note regarding this actually; I just implemented basically this exact scenario with password hashing and found that it needs to happen in the preProcess method or it won't get persisted. If somebody confirms I will update the PR.\n. Cool, done :)\n. ",
    "Einenlum": "Up ?\n. Coulde someone reload tests please?\n. Up?\n. :+1:\n. Up ?\n. ",
    "NiR-": "@Seldaek Only sf3 tests are broken here (cf. #290).\n. @Seldaek Can you replay travis build ? Tests against symfony3 should be fixed, thanks to your merge of #290.\n. @theofidry done.\n. @Seldaek done ;)\n. I'm not sure about what you mean here: persistable classes are already stored in a property after initialization.\nDo you suggest to move the initialization in the constructor and use the property in persist without additional method call ?\n. ",
    "matt-usurp": "Not meaning to \"necro\", but looking at the code this could work if the setter is dumb and doesn't have type-hinting, but if it doesn't have type-hinting then you will receive and error from the find() method against the Doctrine (PersisterInterface).\n. Is there any reason that the fixture names are required to be lowercase now? In projects at work we have data fixtures arranged in directories that match the directory structure of our entities, the references also follow this directory structure.\nFor example\n``` YAML\nsrc/SomeBundle/DataFixtures/ORM/SomeDirectory/SomeClass.yml\nsrc/SomeBundle/Entity/SomeDirectory/SomeClass.php\nSomeBundle\\Entity\\SomeDirectory\\SomeClass:\n  SomeDirectory_SomeClass.single_fixture:\n    name: hello\n```\nThis allows us to instantly have a none-clashing reference for all our fixtures and be able to locate the relevant .yml file that it lives in. Removing the ability to add uppercase characters means the references also increase in length as we need to start adding additional characters. some-directroy_some-class.single_fixture for example.\nWe also have this case where its nice to list all the names in the fixtures that are canonical and generate slugs or alias based on those, in this case we would need to reverse engineer a list entry to a readable name. Lets take for example (I am not sure if punctuation is valid but the other examples are valid still)\nYAML\nClass:\n  \"reference_{Alice,White Rabbit,Mad Hatter,Alice's Cat}\":\n    name: <current()>\n    alias: <(someUrlFriendlyFunction($name))>\nI guess if it was enforced that lowercase is mean't to happen I would make a template and have many more lines and remove all instances of the {list} syntax.\nJust my thoughts.\n. Your points are very valid around testing and I would understand the reasoning if you were moving to the symfony/config component but currently we are parsing custom yaml with custom parsers. So totally understand the want for \"standardising\" the references I just feel like removing the case of characters might be a little much. Removing special characters I totally agree with. \nYeah, the wonders of opening code up to people means you will get a lot of \"creative use cases\". Maybe this would be a feature but if it was possible that an objects content was generated before its reference then we could use variable names in the reference too. Essentially we need a way of targeting these specific instances as other fixtures rely heavily on targeting the correct data. An example being maybe a list of products and creating fixed amount of orders for these products would require us knowing the @reference. Our use case is that the fixture data isn't truly production data but we as close as possible. Working with numbers {1..9} is not except able for large datasets.\nBut like I raised in a previous ticket (on phone so cannot find it) the use of current() with the identity() format would solve most of my issues that I had with this change. The directory structure thing can be easily replaced with underscore and period format (that we use for service definitions anyway). \n\nOn 17 May 2016, at 10:47, Th\u00e9o FIDRY notifications@github.com wrote:\nThanks for sharing your thoughts @matt-usurp.\nMy reasons for those changes:\nI find very error prone to have @user and @User that would give two different results\nSpecial characters are problematic as some are already used: {, }, -, (, ), > and complicates a lot of other regex, which makes it harder to maintain and ensure they work correctly\nNot every regex are case-sensitive, which means there is already potential bugs when relying on it\nWe have absolutely no test for such cases which means we can't guarantee the result\nIt's common for service declaration to have lowercase service names with a limited set of special characters (usually ., _ and -).\nThe rationale behind is that right now, there is not much checks done. This is cool as it offers great flexibility. The issue is that it as a lot, lot more testing. The current tests are good enough for most of the common use cases but they often miss dark edge cases. Having \"weird\" references is very far from being tested thoroughly if at all. Hence my intend to offer less flexibility on this side to ease maintenance and develop feature on our side and offer better reliability.\nThat said, it's not set in stone. It sounds like a reasonable choice to me, but I'm happy to discuss of the problematic use cases that arise.\nNow for your problem of directory structure convention: I'm not sure how does it cause a problem? Unless you have 2 directories with the same name and one lower case, the other uppercase, it doesn't change anything on that side right? (also you could use / after that PR in the names to match the directory structure btw)\nWe also have this case where its nice to list all the names in the fixtures that are canonical and generate slugs or alias based on those\nThat's an interesting use case but it's one where I would say you are misusing alice flexibility and should be done another way. The first problem is that it's very easy to insert special characters in the list name that way, (ex: Alice's Cat) which can be problematic for the reasons mentioned before. The second is that this could be easily done by having a custom faker provider where you have a whole list of those possible values instead:\nClass:\n  \"reference_{1..5}\":\n    name (unique): \n    alias: <(someUrlFriendlyFunction($name))>\nNow the only drawback I see is you're not able to do anymore \"I know I have X values, I want a fixture for each of it\" in a dynamic manner. But in that case I would argue that you could have your list of fixed fixtures as a parameter and have your fixtures matching its size:\nparameters:\n  slugs: [Alice, White Rabbit, Mad Hatter, 'Alice\\'s Cat']\nClass:\n  reference_:\n    name (unique): \n    alias: <(someUrlFriendlyFunction($name))>\n(It doesn't work right now), but my point is I would find that more flexible and robust, and would prefer to add this new feature (which would go well with #347), than relying on your current way which looks more hacky and much more problematic if you were to get the references of your generated fixtures for example.\nThat said:\nWe don't plan to remove it in v2 at least, only deprecating it. So if that's something working well for you now and changing it would make things hard, there is no need to upgrade right away.\nV3 still have a few months before being out, you got time.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\n. You said you removed the case sensitive check, what does this actually mean?\n\nAlso I would say you need to work on your commit messages as looking at the commits tells me nothing about what you have done recently. Like, I can't even see a commit that might be referencing that change.\n. Removing all TypeHints does indeed fix this issue.\n. When things are less hectic at work I will stop raising issues and actually start fixing some.\n. Thanks for the hard work!\n. As a quick note, I am aware that current() is a function and maybe I should have mentioned it. But when wrapped in the identity() function or () it is evaluated as the array function for getting the current pointer in an array. So I used $current as the value is kind of variable. But yeah, some interesting use case. I was going to try dig out where the code is evaluated and see if the current index or list entry is within local scope to grab. Maybe not though.\n. For clarify the use case I need to cover:\n```YAML\nSomeCategory:\n  category_{1..3}:\n    name: ''\nSomeItem:\n  item_template:\n    name: ''\nitem_cat1_{one, two, three} (extends item_template):\n    category: '@category_1'\nitem_cat2_{four} (extends item_template):\n    category: '@category_2'\n```\nI hope this makes things clearer.. Thanks!. ",
    "BrummbQ": "@theofidry Doesn't work for me. Can you show me an example?\n. ",
    "tomazahlin": "Due to no support and poor flexibility, I have removed Alice from my project. I now use Doctrine Fixtures Bundle (with Symfony2), with which I can cover all possibilities. I think everyone should take this in consideration when using Alice - don't get me wrong, Alice is nice, but still in early development imho. When you have more complex database to fill in, it becomes impossible to do so with Alice. Regards.\n. ",
    "sam0delkin": "@theofidry maybe my english is not so easy to understand, sorry about that  :), but:\n\nBut if i load a template file first, then no error shown.\n\nso, yes, if i load both files, then everything is working great. But then why i need to use the includes in template? I just can load both files and working with parent template, correct?\n. @theofidry let me explain it more correctly. For example, we have 3 files:\n- user.yml:\nyaml\nAcme\\UserBundle\\Entity\\User:\n    user (template):\n        firstName: <firstName()>\n        lastName: <lastName()>\n- admin_user.yml:\n``` yaml\ninclude:\n    - user.yml\nAcme\\AdminBundle\\Entity\\AdminUser:\n    adminUser (extends user):\n        email (unique): admin@example.com\n        plainPassword: passw0rd\n        enabled: true\n```\n- test.php\n``` php\ninclude '../vendor/autoload.php';\n$loader = new Nelmio\\Alice\\Loader\\Yaml();\n$loader->load('admin_user.yml');\n```\nAnd let's see the parsed (not loaded) data in this case:\narray(2) {\n  'Acme\\AdminBundle\\Entity\\AdminUser' =>\n  array(1) {\n    'adminUser (extends user)' =>\n    array(3) {\n      'email (unique)' =>\n      string(17) \"admin@example.com\"\n      'plainPassword' =>\n      string(8) \"passw0rd\"\n      'enabled' =>\n      bool(true)\n    }\n  }\n  'Acme\\UserBundle\\Entity\\User' =>\n  array(1) {\n    'user (template)' =>\n    array(2) {\n      'firstName' =>\n      string(13) \"<firstName()>\"\n      'lastName' =>\n      string(12) \"<lastName()>\"\n    }\n  }\n}\nin this case we will have an error: Fatal error: Uncaught exception 'UnexpectedValueException' with message 'Template user is not defined.'\nBUT\nif we will change the template file (user.yml) to use child and not base class:\nyaml\nAcme\\AdminBundle\\Entity\\AdminUser:\n    user (template):\n        firstName: <firstName()>\n        lastName: <lastName()>\nthen we will have this parsed data:\narray(1) {\n  'Acme\\AdminBundle\\Entity\\AdminUser' =>\n  array(2) {\n    'user (template)' =>\n    array(2) {\n      'firstName' =>\n      string(13) \"<firstName()>\"\n      'lastName' =>\n      string(12) \"<lastName()>\"\n    }\n    'adminUser (extends user)' =>\n    array(3) {\n      'email (unique)' =>\n      string(17) \"admin@example.com\"\n      'plainPassword' =>\n      string(8) \"passw0rd\"\n      'enabled' =>\n      bool(true)\n    }\n  }\n}\nso, in case of using class inheritance templates including is working not correct.\n. ",
    "oddz": "The documentation should at least note that includes aren't compatible with inheritance. I'm trying to do the same thing and have run into the same error.\n. I have confirmed that you can't include templates and expect them to work for inheritance. The reason is that the includes are appended to the end of the data array specified in the below method. Therefore, the data within the includes are not available in the builder until all the standard fixtures have been processed.\nNelmio\\Alice\\Fixtures\\Parser\\Methods\\Yaml::parse()\n. This should definitely be noted in the docs because it seems to me like including templates that are used for inheritance are a very likely scenario. One that is not currently supported.\n. ",
    "Yanncha": "Well, I was just surprised, even if that looks quite logical :)\nAs I entered stuffs in yaml, I didn't think first that it would go to php for processing and that it may be interested this way. I didn't realise numeric values would be interpreted as numbers and not as plain strings.\n. ",
    "mikejw": "Nice one, thanks. I'll take a look.\n. This seems to be working.  I can now see the entity being assigned each property value however the persist method on my object manager (which is now implementing the PersisterInterface) doesn't appear to get called. \n. Thanks @tshelburne this seems to producing a more robust approach. However I'm now getting the error Instance fakeentity1 is not defined.  Do I need to manually keep track of previously loaded objects within the populator somehow so I can marry up the related objects?\n. fakeentity is where I'm referencing the original persisted objects as per the documentation for relations. (In the second block of fixture code.) \nSee https://github.com/mikejw/empathy/blob/dbtests/t/fixtures/fixtures3.yml\n. Aha.. makes sense!  Thanks man.\n. the only thing I'm wondering now is how to create a mechanism that ensures each block of fixtures is persisted individually to ensure the ids for each record are available for the relations to use later but I imagine this is an issue that needs it's own implementation thought out for the custom persister?\n. ..unless I switch to using guids \n. I managed to do that with my own simple ORM using the following few lines of code (inside the persister)\n\n$props = $object->getProperties();\n        foreach ($props as $p) {\n            if (is_object($object->$p)) {\n                $object->$p = $object->$p->id;\n            }\n        }\n\n. Now I want to try it with RedBean ORM  :)\n. ",
    "fabiocarneiro": "+1 on this\nNot because I don't want to support it on construct but, because this attribute is NEVER created when the object is created, but it is part of the object behavior.\n. ",
    "msypes": "Thanks for the info gentlemen. For further information, I'm using Alice with a Symfony2 project and a bundle for its integration, hautelook/AliceBundle. Sounds like I should look/ask there.\n. Thanks theofidry. I did just crosspost this there.\n. Thanks, but that didn't work either. I've tried simplifying my file to test one thing at a time, and none of my strings that look like arrays are getting properly escaped:\n\n'\\[\"1-2\", \"3-4\", \"5-1\", \"2-3\", \"5-4\", \"1-3\", \"2-5\", \"4-1\", \"3-5\", 4-2\"]' -> Array to string conversion error\n'\\[1,4]' -> Array to string conversion error\n'\\[[1,4],[2,5]]' -> Could not lex the value \"[[1,4],[2,5]]\" (Additional backslashes don't help.)\n<([[1,4],[2,5]])> -> Array to string conversion error\n'<([[1,4],[2,5]])>' -> Array to string conversion error\n\nAgain, to be clear, I don't want these interpreted as arrays. They're just strings that look like arrays.. Thank you!\n<(\"[[1,4],[2,5]]\")> works. That solution was also required for something like this:\n<('[{\"type\":\"foo\",\"number\": 5,\"bar\":\"baz\"}]')>\nNever mind about the '\\[1,4]' and '\\[\"1-2\", \"3-4\", \"5-1\", \"2-3\", \"5-4\", \"1-3\", \"2-5\", \"4-1\", \"3-5\", 4-2\"]'. Those do work. (It turned out I hadn't simplified things enough, and the array to string conversion errors were coming from another source.. Thanks for marking this as a bug. I have some additional information for you:\nWhile <('[{\"type\":\"foo\",\"number\": 5,\"bar\":\"baz\"}]')> works as far as getting an actual string into the database, the format is wrong for extracting it as a JSON array using Doctrine's json datatype. The string ends up in the database as \"[{\\\"type\\\":\\\"foo\\\",\\\"number\\\": 5,\\\"bar\\\":\\\"baz\\\"}]\", i.e., surrounded by quotes and with the internal quotes escaped. It needs to be [{\"type\":\"foo\",\"number\": 5,\"bar\":\"baz\"}]. Yes. If I apply json_decode. \nThe json datatype provided by Doctrine is supposed to return the array without the need for json_decode. At least if I correct the escaped string to what I posted above, Doctrine returns it as an array.. If had to guess, it's the surrounding quotes that are messing things up, requiring me to do my own json_decode.\nI have been able to readjust my fixture data to function as I want/expect, so I'm OK. I'm just providing this for your information, and for anyone else who hits upon similar difficulties.. ",
    "gquemener": "Yes it does @tshelburne, I was concerned about readability issues with a long conditionnal statement but it's not so bad in the end.\nTell me if you want me to squash the PR before merge.\n. Is it possible to tag a 2.1.4 with this fix please @tshelburne?\n. ",
    "kyaw-myo-thein": "I'll close the ticket because using object without name is never intended in the first place. \n@tshelburne thanks for your feedback.\n. ",
    "manjufy": "Thank you @knugen .\n@theofidry  No, Now its clear :-). \nThank you guys for the help.\n. ",
    "toonjanssens": "No problem if you can tell me where to put the test. Its not clear to me where to add the test yaml.\n. I understand your concern, but I don't see how it could break users fixtures. If you don't use dots in the keys, this fix will have no effect. When you are using dots, it wil escape them and the regular expression should work as before. Unless you are using the dots intentionally as part of the regular expression, but this looks more as a sort of hack. Definitely not how it should be used or did I mis a chapter in the documentation?\n. I changed the code to what @Seldaek suggested. For the Unit test I can use some help.\n. ",
    "tommyvdv": "In my opinion:\nThe behavior of the asterisk does not match the usage examples in the documentation. Or the usage example lacks specificity.\nUpdate the documentation and note the (quirky) behavior of . or make the behavior match the intent.\n. ",
    "hhamon": "I'm facing the same issue. Do you know when v3 will be released please?\n. Thanks! I've just made the following ugly workaround while waiting for the upcoming v3.\nyaml\nAppBundle\\Entity\\Product:\n    product_1:\n        # ...\n        _1_addTag: [foo]\n        _2_addTag: [bar]\n        _3_addTag: [baz]\n        _4_addAttribute: [width, 120]\n        _5_addAttribute: [height, 120]\n        _6_addAttribute: [size, 3000]\n        # ...\nAnd in my PHP class.\n``` php\n<?php\nclass Product\n{\n    // ...\npublic function addTag($name)\n{\n    // ...\n}\n\npublic function addAttribute($key, $val)\n{\n    // ...\n}\n\n/**\n * Temporary workaround to be able to call the same method multiple times\n * with Alice. Current Alice version doesn't support calling the same method\n * multiple times and will be implemented in the next upcoming major release.\n *\n * @todo remove this method when Alice library will be >= 3.0\n *\n * @param string $method    The magic invoked method name\n * @param array  $arguments The arguments to pass to the magic invoked method\n */\npublic function __call($method, $arguments)\n{\n    if (!preg_match('/^(?:set)?\\_(?:\\d+)?\\_(?P<method>[a-z][a-zA-Z0-9]+)$/', $method, $matches)) {\n        throw new \\BadMethodCallException(sprintf('Trying to call an unsupported method \"%s()\" on an object of type \"%s\".', $method, get_class($this)));\n    }\n\n    $invokable = $matches['method'];\n    $callable = [$this, $invokable];\n    if (!method_exists($this, $invokable) || !is_callable($callable)) {\n        throw new \\BadMethodCallException(sprintf('Method \"%s()\" does not exist or is not invokable on an object of type \"%s\".', $invokable, get_class($this)));\n    }\n\n    call_user_func_array($callable, $arguments[0]);\n}\n\n}\n```\nUgly but works for now...\n. Hum thanks, I'll try if it works without breaking my model.\n. It doesn't work because keys are not unique!\n. ",
    "roberti42": "Any chance ?\n. my pleasure\n. It makes sense to me, i have updated the code.\n. PHPUnit assertsEquals() compare $expectedData and $data using == operator.\nThis does not ensure that the data is in correct order, but it is useful to get the differences in output.\n. @theofidry i created $newData instead of reusing $includeData just for code clarity, as stated here by @tshelburne \nIf you think it is incorrect, there's no problem, we can rollback whenever we want, of course :)\n. I'll try to explain it better.\nassertEquals() will print diff-style message when values of $expectedData and $data are not the same, helping you to find out why the test has failed.\nHere is an example of what you'll get if for some reason the test subject is different from what expected:\n1) Nelmio\\Alice\\Fixtures\\Parser\\Methods\\YamlTest::testIncludeFilesOrder\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'Foo' => Array (\n         'foo' => Array (\n-            'id' => 2\n+            'id' => 1\n             'text' => '<word()>'\n         )\n     )\n     'Bar' => Array (...)\n )\nAs assertEquals() will use == operator to compare the arrays, it will not check if the order is the same.\nassertTrue() instead, will ensure that sorting is preserved, but unlike assertEquals(), it will not print a diff-style message to help you.\nAnother way to write it with just one assert, could be:\n$this->assertSame($expectedData, $data)\nThis will print a slightly different message from those printed by assertEquals() in case of failure. Here is an example:\n1) Nelmio\\Alice\\Fixtures\\Parser\\Methods\\YamlTest::testIncludeFilesOrder\nFailed asserting that Array &0 (\n    'Foo' => Array &1 (\n        'foo' => Array &2 (\n            'id' => 1\n            'text' => '<word()>'\n        )\n    )\n    'Bar' => Array &3 (\n        'bar' => Array &4 (\n            'id' => 1\n            'text' => '<@foo->text>'\n        )\n    )\n) is identical to Array &0 (\n    'Foo' => Array &1 (\n        'foo' => Array &2 (\n            'id' => 2\n            'text' => '<word()>'\n        )\n    )\n    'Bar' => Array &3 (\n        'bar' => Array &4 (\n            'id' => 1\n            'text' => '<@foo->text>'\n        )\n    )\n).\n. You are right, but in this example you are comparing [0=>1,1=>2] with [0=>2,1=>1], hence the == operator return false because $first[0] != $second[0].\nInstead, if you compare [1=>1,2=>2] and [2=>2,1=>1] the == operator return true because $first[1] == $second[1] and $first[2] == $second[2] no matter in what order they are.\nOn the other hand, if you use === operator you'll get false, because you are asking to compare also the orders.\nHere you can find the documentation of array operators.\n. Sure, this is exactly what we want to test.\nThe order returned by parse() must be exactly the same as in $expectedData, otherwise we have lost the \"include\" order as defined in the parsed fixture file.\nPlease refer to issue #164 for further details.\nNow that this is clarified, what are we going to do ?\nDo you think it would be better to use assertEquals() + assertTrue() or assertSame() only ? :)\n. Agree, assertSame() also better explain the intent, compared to assertTrue() solution.\n. ",
    "alexislefebvre": "Did you try DependentFixtureInterface?\n. ",
    "krcrawford": "Asterisks denote proprietary properties:\n```\n<?php\nnamespace ****\\CurrencyBundle\\Entity;\n/\n * User\n */\nclass User\n{\n    /\n     * @var \\DateTime\n     */\n    private $subscribeDt;\n/**\n * @var \\DateTime\n */\nprivate $lastLoginDt;\n\n/**\n * Set subscribeDt\n *\n * @param \\DateTime $subscribeDt\n *\n * @return User\n */\npublic function setSubscribeDt($subscribeDt)\n{\n    $this->subscribeDt = $subscribeDt;\n\n    return $this;\n}\n\n/**\n * Get subscribeDt\n *\n * @return \\DateTime\n */\npublic function getSubscribeDt()\n{\n    return $this->subscribeDt;\n}\n\n/**\n * Set lastLoginDt\n *\n * @param \\DateTime $lastLoginDt\n *\n * @return User\n */\npublic function setLastLoginDt($lastLoginDt)\n{\n    $this->lastLoginDt = $lastLoginDt;\n\n    return $this;\n}\n\n/**\n * Get lastLoginDt\n *\n * @return \\DateTime\n */\npublic function getLastLoginDt()\n{\n    return $this->lastLoginDt;\n}\n\n}\n```\nDoctrine Mapping:\n****\\CurrencyBundle\\Entity\\User:\n    type: entity\n    table: u\n    id:\n        uId:\n            type: bigint\n            nullable: false\n            options:\n                unsigned: false\n            id: true\n            column: uID\n            generator:\n                strategy: IDENTITY\n    fields:\n        subscribeDt:\n            type: datetime\n            nullable: true\n            column: subscribeDT      \n        lastLoginDt:\n            type: datetime\n            nullable: true\n            column: lastLoginDT\n    lifecycleCallbacks: {  }\n    repositoryClass: ****\\CurrencyBundle\\Entity\\UserRepository\nFinally, here is the yml fixture in current totality:\n****\\CurrencyBundle\\Entity\\User:\n    user{1..40}:\n        uuid: <uuid()>\n        userLevelId: 1\n        kbUuid: <numberBetween(1000000000000000, 9999999999999999)>\n        uEmail (unique): <freeEmail()>\n        isUEmailConfirmed: <numberBetween(0, 1)>\n        uRegIpLong: <numberBetween(100000000, 9999999999)>\n        country: <countryCode()>\n        subscribeDt: <dateTime()>\n        passwd: <(password_hash('password', <encryption-strategy>))>\n        firstName: <firstName()>\n        lastName: <lastName()>\n        fullName: <($firstName . ' ' . $lastName)>\n. I hadn't completed providing all the remaining entity properties in the .yml file. As such doctrine was failing to format a string, i.e. a value I hadn't provided yet, for a different DateTime value. False alarm, but perhaps this attribute should be documented?\nLesson Learned: Doctrine may fail, and it won't be specific about WHERE the failure is. You'll need to dump some entities from within Alice to catch the erring property.\nAlso: Form a complete entity in your yml before attempting any fixture loading.\n. ",
    "c33s": "@reinfi i edited my issue, had a wrong first parameter in the example\n. @reinfi works perfect, thanks :)\nneeded to install  fzaninotto/faker from dev-master\n. - php 7.1\n- nelmio/alice 3.5.2\n- theofidry/alice-data-fixtures: 1.1.1\nusing the alice fixture loader from doctrine fixture loader. \nparameters:\n    artist_1: H. R. Giger\nApp\\Entity\\Artist:\n    artist_{1..1}:\n        idByString: <uuid()>\n        name: '<{artist_<current()>}>'\n[Nelmio\\Alice\\Throwable\\Exception\\FixtureBuilder\\ExpressionLanguage\\ParseException]\n  Could not parse the token \"Function(<current()>\" (type: FUNCTION_TYPE).\n. ",
    "hboomsma": "Having a PSR2 compatible code style with snake case properties. And several MLOC, I would rather not change. Already implemented this as extension in the company, just trying to give something back by making Alice more codestyle agnostic.\n. correct.\n. @tshelburne I agree, added it in.\n. @theofidry, I looked for any reference to Inflector and singularize in the master branch, but I could not find any. So I am not quite sure where to \"fix\" this for 3.x. If you can give me a hint, I am more then willing to help out.\n. Not yet, but in PHPUnit 6.0 you will get a lot of risky tests and exit code 1 when you have no explicit asserts in them. This maintains 5.x behaviour for now.\nBut since I did not update the constraint yet, it is not strictly necessary.. I can remove it, with no problem, just let me know what is preferable.. Yes it sure does! I'll put that one in the .travis.yml. actually not, in PHP <7.2 get_class(null) would return the current class. Since PHP 7.2 it throws a TypeError. When building with PHP 7.2(.0-dev) you get:\nFatal error: Declaration of Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Parser\\TokenParser\\Chainable\\TolerantFunctionTokenParser::withParser(Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\ParserInterface $parser): \nNelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Parser\\TokenParser\\Chainable\\TolerantFunctionTokenParser\nmust be compatible with\nNelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Parser\\TokenParser\\Chainable\\AbstractChainableParserAwareParser::withParser(Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\ParserInterface $parser): Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Parser\\TokenParser\\Chainable\\AbstractChainableParserAwareParser\nin\n/home/hboomsma/projects/alice/src/FixtureBuilder/ExpressionLanguage/Parser/TokenParser/Chainable/TolerantFunctionTokenParser.php on line 31. Already there... :+1:. Works for me :+1: , I'll update the request.. :+1: . :+1: . I'll remove this, it will result in a failing nightly branch for now. When PHP decides to be BC again the branch should turn green (on a rebuild). ",
    "k-przybyszewski": "profession: 50%? @professions*\nThis will work for you\n. ",
    "FaHuSchmidt": "@reinfi sry, but same result with quotation marks\n@k-przybyszewski this has a strange impact on fixtures for other tables \"Couldn't generate random unique value for AppBundle\\Entity\\User: username in 128 tries.\" Tried it also with quotation marks.\n. There are just a few professions, but the strange thing is that it says no unique username could be generated, when i add \"50%? @professions*\" to a field at another entity fixture...\n``` yml\nparameters:\n  professions: ['Metzger(in)', 'B\u00e4cker(in)', 'Verk\u00e4ufer(in)']\nAppBundle\\Entity\\Group:\n  group_person:\n    __construct: [User]\n    roles: ['ROLE_USER']\nAppBundle\\Entity\\User:\n  user_person_{1..10}:\n    username (unique): 'person-'\n    email: \n    enabled: 1\n    plainPassword: \n    groups: ['@group_person']\nAppBundle\\Entity\\Person:\n  person_{1..10}:\n    verified: \n    firstName: \n    lastName: \n    email: '@user_person_->email'\n    streetName: \n    streetNumber: \n    city: \n    postCode: \n    country: \n    dateOfBirth: \n    callNumber: \n    profession: \"50%? @professions*\"\n    user: '@user_person_'\n```\nIt works with profession: <randomElement(<{professions}>)>\n. ",
    "jbenoit2011": "Actually, I am wrong. This is not a bug. This is because my fixtures was incorrectly written. I injected a string instead of a local object, corresponding to the type hint.\nSorry for the annoyance.\n. ",
    "piotrkochan": "+1 please fix this. Also it'll be nice to be able to concatenate current() result with string, eg:\n<randomFunction(\"somestring-{current()}\")>\n. ",
    "Mvannes": "As a workaround for this you could do <identity($this->valueForCurrent)>\nWhich is pretty gross, but it works. \nYou can also use that like <identity((int)$this->valueForCurrent)>  if you want to have your current be an int value instead of a string (for strict functions for example).\n. @theofidry Yeah but by then it should be replaced by something actually working correct? :D \nWould v3 also allow for casting the value of current to an int though? Because if not, that's going to make a lot of fixtures fail. I would assume it would if current can simply be used in identity.\n. Our Jenkins is filled with green again! Thanks! :). ",
    "weaverryan": "You beat me to it :). Thanks!\n. ",
    "scuben": "Hi @theofidry \nThanks for your response. I know both features <identity()> and <current()>. But what I still dont know about how to use both at the same time. I try to have <current()> subtracted with 2.\nWhat I want to achieve is this (which is not working):\nyaml\nAcme\\Entity\\User:\n  user_ {3..10}:\n    anything: <identity(<current()> - 2)>\nIs there a syntax which will give me 1..8 or is this not possible at all?\n. I just gave it a try but did not work:\n[Symfony\\Component\\Debug\\Exception\\ContextErrorException]\nWarning: current() expects exactly 1 parameter, 0 given\n. Not sure if that works as <identity(current())> did not. But I'll give it a try when i come across this issue again.\n. ",
    "Artem-Panasenko": "Okey. Thank you for answer. I closed issue. And create different @user entity in fixtures\n\nIs there any good reason to do that?\n\nI want create different fixtures for test case. In some tests use one file(without any dependencies) and in other places use two or more files. \n. ",
    "spolischook": "Ok so what I see for now it's:\nphp\n$this->objects         = new Collection;\nin constructor of Nelmio\\Alice\\Fixtures\\Loader and I have only ability to replace all references by setReferences method.\nIt would be great to have ability add reference by method in Loader, e.g.:\nphp\n/**\n     * @param string $key\n     * @param object $object\n     */\n    public function addReference($key, $object)\n    {\n        $this->objects->set($key, $object);\n    }\n. This code \nphp\n$loader->setReferences($references);\nis too expensive, because it will foreach all references again and again.\nSo maybe,  decouple Nelmio\\Alice\\Instances\\Collection (maybe ReferenceRepository is more best name) from Loader, and inject it? Then I can use it separately. \n. > I think the best solution for you is to override Alice loader through inheritance\nyep, I'll do. And what will happen in v3 that it's resolve my problem with references?\n. It would be nice upgrade! Wish you the best.\n. ",
    "trappar": "The bundle itself doesn't require any component from AliceBundle to run, it only uses AliceBundle for testing. I haven't tested it with other libraries for loading the fixtures yet, but since all it does is generate normal Alice fixture yaml files, it should theoretically work with anything that loads Alice fixtures. Maybe I'll open a new pull request after I've done further testing.\n. I'll look into it. Thanks \ud83d\ude04\n. ",
    "pkruithof": "Done.\n. I'll apply your other feedback tomorrow when I have more time.\n. Because this way it only has to be done once. Reflection is a costly operation, in terms of performance. I tend to always minimise the amount of reflection being done. This is assuming that an instance of this class is being used for multiple calls. If not then a static class property would be better, I think.\n. Not sure what you mean by that last part. It's better to use the same and preferred inflection method that's available, right?\n. What's being cached is the class/method to singularize a string, not the adder for an object. As the singularize method is called for every ArrayAdd operation this can really add up, depending on your fixtures.\n. ",
    "dantleech": "Well, in my instance I want to use an instance so that I can inject a media manager from which I can extract file names. I guess I could use static methods to randomly select from a pre-defined path (making it a generic file provider).\n. That said, I am not sure how I can use static methods to provide data? Are you suggesting to use <identity(Namespace\\MyProvider::provideSomeData())> ?\n. Ah I see. ok, will give that a shot, maybe I don't need to inject the generator.\n. Havn't had an opportunity to tackle this yet, but a project I am working\non requires this, so I will get to it :)\nOn Wed, Jul 06, 2016 at 02:48:11AM -0700, Th\u00e9o FIDRY wrote:\n\nAny luck [1]@dantleech?\n\u2014\n   You are receiving this because you were mentioned.\n   Reply to this email directly, [2]view it on GitHub, or [3]mute the thread.\nReverse link: [4]unknown\nReferences\nVisible links\n1. https://github.com/dantleech\n2. https://github.com/nelmio/alice/issues/415#issuecomment-230727512\n3. https://github.com/notifications/unsubscribe/AAgZcfbw136DZRZ4yzHu_Q1ECNd3svK4ks5qS3nbgaJpZM4JDuXy\n4. https://github.com/nelmio/alice/issues/415#issuecomment-230727512\n. Shall we rename protected createBuiltIn.* to protected create.* instead?. Done - I didn't realise that you could call $loader->getXxx externally, so its a \"BC\" break.. Note that foobar: '<strtolower(\"hello\")>' works, while foobar: '<json_encode(\"hello\")>' does not.. > :thinking: Why is that? because of the underscore?\n\ndon't think so - the failing test has no underscores. will try and investigate. ",
    "tloeffler": "OK, then here is some code:\nA snippet of my fixtures:\n``` yaml\nAppBundle\\Entity\\Service:\n    random_service_{1..5}:\n        name (unique): \n        description: 50%? \n        created: \n        changed: \n        roles: x @random_role_*\nAppBundle\\Entity\\Role:\n    random_role_{1..5}:\n        name (unique): \n        description: 50%? \n        created: \n        changed: \nAppBundle\\Entity\\Account:\n    random_account_{1..3}:\n        name (unique): \n        description: 50%? \n        password: createPassword(@random_account*)\n        expires: \n        locked: \n        enabled: \n        created: \n        changed: \n        roles: x @random_role_*\n```\nThe methods roleName, serviceName or accountName are simple string creator functions and placed ion the fixture provider.\nThis is the important thing, the fixture creation in my test base class:\n``` php\n/\n     * Load fixtures.\n     \n     * @param bool $purge\n     * @return array Referenceobjects\n     /\n    protected function loadTestFixtures(bool $purge = false): array\n    {\n        if ($purge) {\n            $this->purge();\n        }\n        $ref = Fixtures::load(\n            $this->container->get('kernel')\n                ->locateResource('@AppBundle/DataFixtures/TestFixtures/TestSuiteFixtures.yml'),\n            $this->em,\n            [\n                'providers' => [new FixtureProvider($this->container)]\n            ]\n        );\n    $this->em->clear(); //<-- this is important\n\n    return $ref;\n}\n\n```\nAnd here the code which leads to ignoring the mappedBy-Mappings:\nphp\n//...\nreturn Fixtures::load(\n            $this->container->get('kernel')\n                ->locateResource('@AppBundle/DataFixtures/TestFixtures/TestSuiteFixtures.yml'),\n            $this->em,\n            [\n                'providers' => [new FixtureProvider($this->container)]\n            ]\n        );\nHere are a mapping example:\nphp\n//... Mapping in Role.php\n/**\n     * @var ArrayCollection<Account>\n     *\n     * @ORM\\ManyToMany(targetEntity=\"AppBundle\\Entity\\Account\", mappedBy=\"roles\", cascade={\"all\"})\n     *\n     */\n    protected $accounts;\nphp\n//...Mapping in Account.php\n/**\n     * @var ArrayCollection<Role>\n     *\n     * @ORM\\ManyToMany(targetEntity=\"AppBundle\\Entity\\Role\", inversedBy=\"accounts\")\n     * @ORM\\JoinTable(name=\"account_roles\")\n     */\n    protected $roles;\n. ",
    "jumale": "@theofidry first I tried to use just this model with the same class ArrayFixture for both groups and users. But in this case I got only users list in the result, but the groups were missing. It looks like the class name should be a unique name for each defined \"entity\", otherwise the library overrides fixtures.\nThat's why I had to add that auto-loading logic, to be able to define unique class names for each separated \"entity\"\n. Ahhh, ok! Then the autoloading is not needed, definitely\n. ",
    "ghost": "My user id, but I don't know anything about it!\nOn Mon, Jul 11, 2016 at 3:30 PM, Andrew Shukailo notifications@github.com\nwrote:\n\nAfter recent update to 2.2 version i've got this:\n[Hautelook\\AliceBundle\\Alice\\DataFixtures\\LoadingLimitException]\nLoading files limit of 50 reached. Could not load the following files\n/code/src/AppBundle/DataFixtures/ORM/changelogs.yml:\n- Entity with ID @user-1 https://github.com/user-1 and class\n  Mailer\\AuthBundle\\Entity\\User not found\nAnd the same for every fixtures file, where references are present.\nVersion 2.1.4 works fine. Has anyone faced this problem to?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/421, or mute the thread\nhttps://github.com/notifications/unsubscribe/AAn1F3prw3_2-9__yCsnK858GhSxSD-yks5qUkV5gaJpZM4JJXVx\n.\n. \n",
    "egeloen": "I also dig into this issue. Seems the reference are not resolved before being populated into the object resulting the typehint checker tries to resolve the entity by ID.\n. I will give a try to #423 and see if it fixes the issue or not and will come back here.\n. @theofidry Unfortunatelly, #423 does not fix the issue. Here my simplified use case:\nA user fixture (extending the FOS User):\nAcme\\AppBundle\\Entity\\User:\n    user-admin:\n        email: user-admin@example.com\n        plainPassword: pass\n        roles: [ROLE_ADMIN]\nA OAuth client (extending the FOS OAuth Server):\nAcme\\AppBundle\\Entity\\Client:\n    client:\n        randomId: 123456789\n        secret: 987654321\n        allowedGrantTypes:\n            - password\n            - refresh_token\nAnd an access token (extending the FOS OAuth Server):\nNexity\\AppBundle\\Entity\\AccessToken:\n    access-token:\n        token: access-token\n        expiresAt: <dateTimeBetween('+3600 seconds', '+3600 seconds')->getTimestamp()>\n        client: \"@client\"\n        user: \"@user-admin\"\nWhen loading these fixtures via https://github.com/hautelook/AliceBundle I got:\n[Doctrine\\Common\\Persistence\\Mapping\\MappingException]                     \n  Class 'Symfony\\Component\\Security\\Core\\User\\UserInterface' does not exist\nAnd the stack trace, if it can help:\nException trace:                                                                                                                                                                                                                              \n () at /home/gelo/Workspace/project/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/MappingException.php:96                                                                                             \n Doctrine\\Common\\Persistence\\Mapping\\MappingException::nonExistingClass() at /home/gelo/Workspace/project/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.php:41               \n Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService->getParentClasses() at /home/gelo/Workspace/project/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.php:281  \n Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory->getParentClasses() at /home/gelo/Workspace/project/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.php:311                                                                                                                                                                                                                                            \n Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory->loadMetadata() at /home/gelo/Workspace/project/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/ClassMetadataFactory.php:78                             \n Doctrine\\ORM\\Mapping\\ClassMetadataFactory->loadMetadata() at /home/gelo/Workspace/project/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.php:216                         \n Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory->getMetadataFor() at /home/gelo/Workspace/project/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:379                                         \n Doctrine\\ORM\\EntityManager->find() at /home/gelo/Workspace/project/vendor/nelmio/alice/src/Nelmio/Alice/Persister/Doctrine.php:70                                                                                     \n Nelmio\\Alice\\Persister\\Doctrine->find() at /home/gelo/Workspace/project/vendor/nelmio/alice/src/Nelmio/Alice/Util/TypeHintChecker.php:75                                                                              \n Nelmio\\Alice\\Util\\TypeHintChecker->check() at /home/gelo/Workspace/project/vendor/nelmio/alice/src/Nelmio/Alice/Instances/Populator/Methods/Direct.php:43                                                             \n Nelmio\\Alice\\Instances\\Populator\\Methods\\Direct->set() at /home/gelo/Workspace/project/vendor/nelmio/alice/src/Nelmio/Alice/Instances/Populator/Populator.php:96                                                      \n Nelmio\\Alice\\Instances\\Populator\\Populator->populate() at /home/gelo/Workspace/project/vendor/nelmio/alice/src/Nelmio/Alice/Fixtures/Loader.php:309                                                                   \n Nelmio\\Alice\\Fixtures\\Loader->populateObjects() at /home/gelo/Workspace/project/vendor/nelmio/alice/src/Nelmio/Alice/Fixtures/Loader.php:147                                                                          \n Nelmio\\Alice\\Fixtures\\Loader->load() at /home/gelo/Workspace/project/vendor/hautelook/alice-bundle/src/Alice/DataFixtures/Fixtures/Loader.php:50                                                                      \n Hautelook\\AliceBundle\\Alice\\DataFixtures\\Fixtures\\Loader->load() at /home/gelo/Workspace/project/vendor/hautelook/alice-bundle/src/Alice/DataFixtures/Loader.php:193                                                  \n Hautelook\\AliceBundle\\Alice\\DataFixtures\\Loader->tryToLoadFiles() at /home/gelo/Workspace/project/vendor/hautelook/alice-bundle/src/Alice/DataFixtures/Loader.php:90                                                  \n Hautelook\\AliceBundle\\Alice\\DataFixtures\\Loader->load() at /home/gelo/Workspace/project/vendor/hautelook/alice-bundle/src/Doctrine/DataFixtures/Executor/ExecutorTrait.php:41                                         \n Hautelook\\AliceBundle\\Doctrine\\DataFixtures\\Executor\\ORMExecutor->Hautelook\\AliceBundle\\Doctrine\\DataFixtures\\Executor\\{closure}() at n/a:n/a                                                                                                \n call_user_func() at /home/gelo/Workspace/project/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:233                                                                                                           \n Doctrine\\ORM\\EntityManager->transactional() at /home/gelo/Workspace/project/vendor/hautelook/alice-bundle/src/Doctrine/DataFixtures/Executor/ExecutorTrait.php:45                                                     \n Hautelook\\AliceBundle\\Doctrine\\DataFixtures\\Executor\\ORMExecutor->executeExecutor() at /home/gelo/Workspace/project/vendor/hautelook/alice-bundle/src/Doctrine/DataFixtures/Executor/ORMExecutor.php:72               \n Hautelook\\AliceBundle\\Doctrine\\DataFixtures\\Executor\\ORMExecutor->execute() at /home/gelo/Workspace/project/vendor/hautelook/alice-bundle/src/Doctrine/DataFixtures/Executor/FixturesExecutor.php:44                  \n Hautelook\\AliceBundle\\Doctrine\\DataFixtures\\Executor\\FixturesExecutor->execute() at /home/gelo/Workspace/project/app/cache/test/appTestDebugProjectContainer.php:13774                                                \n HautelookAliceBundleDoctrineDataFixturesExecutorFixturesExecutor_000000004520b2e400000000565008ef9f8b77c73e45472b7cd13278c0bc076a->execute() at /home/gelo/Workspace/project/vendor/hautelook/alice-bundle/src/Doctrine/Command/LoadDataFixturesCommand.php:223                                                                                                                                                                                                     \n Hautelook\\AliceBundle\\Doctrine\\Command\\LoadDataFixturesCommand->execute() at /home/gelo/Workspace/project/vendor/symfony/symfony/src/Symfony/Component/Console/Command/Command.php:259\n Symfony\\Component\\Console\\Command\\Command->run() at /home/gelo/Workspace/project/app/cache/test/appTestDebugProjectContainer.php:14784\n HautelookAliceBundleDoctrineCommandLoadDataFixturesCommand_000000004520b42c00000000565008ef9f8b77c73e45472b7cd13278c0bc076a->run() at /home/gelo/Workspace/project/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:860\n Symfony\\Component\\Console\\Application->doRunCommand() at /home/gelo/Workspace/project/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:192\n Symfony\\Component\\Console\\Application->doRun() at /home/gelo/Workspace/project/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Console/Application.php:92\n Symfony\\Bundle\\FrameworkBundle\\Console\\Application->doRun() at /home/gelo/Workspace/project/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:123\n Symfony\\Component\\Console\\Application->run() at /home/gelo/Workspace/project/app/console:22\n. @theofidry If I use alice 2.1.4 everything is working fine so IMO, it's not a doctrine mapping issue but an alice one for sure.\n. ",
    "Simperfit": "Yes will do\nLe ven. 20 oct. 2017 \u00e0 20:52, Th\u00e9o FIDRY notifications@github.com a\n\u00e9crit :\n\n@Simperfit https://github.com/simperfit could you check that on 3.x? I\ndon't think this should be an issue anymore\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/428#issuecomment-338292970, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADSq8hfnVSGEd2RilTaoNC_UH5Y1YTNoks5suOvtgaJpZM4JLQCh\n.\n. \n",
    "simshaun": "It's been a while since I've dealt with this, but this problem/bug didn't have anything to do with setProviderData other than Alice was choosing to call addProviderData over it.\nThe problem with Alice calling addProviderData is that it wasn't passing the key (apiKey) to the method. It was only passing the value (456) to it. I needed both the key and the value.\nThe current Alice behavior is fine if your addXXXX methods simply add an element to a list, but it breaks down if your addXXXX methods are adding a key/value to a map.\nThere should be some way to tell Alice to pass either 1) both key & value, or 2 ) only the value, if it's going to be calling addXXXX methods over setXXXX methods.. When there's a map in the YAML, e.g.\nproviderData:\n    apiKey: '123'\n    version: '2.x'\n\nIs there any way to have Alice just call setProviderData instead of addProviderData? That would mitigate the problem.\nIf it's a list, then call addXXXX:\npeople:\n    - 'John'\n    - 'Jane'. Ok, thanks. After xdebugging for a couple hours, I finally figured out that this was my fault due to something in one of our processors. Sorry!\n\n. Ah, ok. Back to camelcase I go!\n. > regexes for emails are difficult, I think the easiest way is either to check if we have non empty a STRING_TYPE token immediately followed by a SIMPLE_REFERENCE_TYPE, we could transform the reference into a string.\nThis would be a new lexer that comes after SubPatternsLexer, right, or would it just be a part of the SubPatternsLexer?\n\nAlternatively just escape it: disabled1\\@example.com\n\nI'll have to try this tomorrow. Not sure I like having to escape the @ symbol, but if it works it works.. I created a PR with a new lexer that does what I think you're saying.\nEdit: As an alternative, I tried changing the reference escaper regex to include numbers like I showed in my OP, but it causes some integration tests to fail, so it's not as simple as it seems.. Added integration tests. I wasn't exactly sure what to name the scenarios or where to place them in the data provider though.. Not sure why the lexer test is failing in the Symfony run on Travis.. Yea I just got it to error locally with make ts. I'm trying to figure out why the Symfony test lexes differently, but I'm stumped at the moment.\nEdit: Think I got it. The new lexer needed to be setup in the lexer chain in the Symfony DIC.. ",
    "aledeg": "@theofidry Thank you. That makes almost perfect sense. I haven't though of using custom provider and I didn't know about the parameter feature.\nI don't understand how <pickLastName(<{contact_matrix}>)> will work to return the appropriated value. I understand that I have to inject the parameters but how do I know which one I need to return?\n. I ended up doing what you suggested. It's not really important that it's not reusable for now since it's for a few related tests. If I need something more reusable, I'll rework it.\nThanks\n. > Regarding the first one I find the syntax a bit confusing\nThis is the bash increment brace expansion feature syntax. But I am ok with any syntax.\nIf I can find some time, I'll try to send a PR.\n\nAs for the later one this syntax is already allowed, but as the order does not matter it makes no difference to have User1 first or User10.\n\nI agree that on the data level it makes no differences but on the database level it makes a difference. The natural order of the database will send me the first inserted record. In my example, I was hoping that the first record would User10, but it was User1.\nI made the following workaround for my test case:\nyaml\nUser:\n    User{10}:\n        ...\n    User{1}:\n        ...\nThis way, User10 is inserted before User9 which is inserted before User8 which is... but you get the idea.\nWith the braces around the number, I still can use <current()> in my object fields.\n. ",
    "thedamnedrhino": "Creating custom Data Providers for a simple Nested call seems a little overkill for me. Are nested providers going to be implemented in the near Future?\n. ",
    "ioleo": "I don't need rolesList to be dynamic. Thanks for the alternative you posted. I think it will do for my purposes.\n. ",
    "karser": "How to use emails in 3.x? https://github.com/nelmio/alice/issues/568\n. thanks @theofidry, this seems to be working\n. The example might be a day of week\nassign{1..100}:\n       dayOfWeek: '<($current % 7)>'\n. @theofidry High five!\n. ",
    "cadavre": "I have another case where escaping @ doesn't work at all:\nmessage: |\n            <identity(\"Hi! some\\@mail.com Bye!\")>\nGives me, in database:\nHi! some$_instances['mail.com'] Bye!. ",
    "tomaszpolska": "It works now. Thanks for the hint @theofidry!\n. ",
    "PWalkow": "Thanks, I'll try to update version to v3. Hopefully there will be no big issues with that.\n. ",
    "clemf": "Hi @theofidry,\nThat does help! I didn't realize current() references the name/id of the Entity it's called within. I thought it was referencing the @ entity name/id somehow.\n. Hi @theofidry, I'm using version 2.2.2. Is 3.x stable? I don't mind upgrading if it fixes this problem.. I've tried every variation I could think of, using no quotes doesn't work because the symfony yaml parser dies on the 'at' symbol. I may make my own provider, thank you for the help.. Ok I just tried quoting the whole string and it worked:\nyaml\nstatus: '85%? @visitComplete : @visitIncomplete'\nI'm a little confused because I know I tried this before but obviously something else must have been going on. Thanks again for the help, I appreciate the work you put into this!\nEdit: This is the error I get when I use an unquoted '@':\n[Symfony\\Component\\Yaml\\Exception\\ParseException]\n  The reserved indicator \"@\" cannot start a plain scalar; you need to quote the scalar at line 195 (near \"practice: @staging\").\nI'm using symfony/yaml v3.2.3. ",
    "hiefman": "Ok, I managed to get the dseried result via a custom provider (wasn't aware of the fact that I could inject the EntityManager into the provider).\nThe only problem I have is to pass the foreign entity (\"node\" in this case) to the Provider dynamically. This is my Yaml:\nMyBundle\\Entity\\NodeTag:\n    node_tag_{1..500}:\n        node: '@node_<numberBetween(1, 100)>'\n        tagKey: <uniqueTagForNode(@self->node)>\n        tagValue: <words(3, true)>\nThe result is that I get this error:\n\nProperty node is not defined for instance self\n\n<uniqueTagForNode('@node_<numberBetween(1, 100)>')>\nresults in a syntax error.\nI hope this is just a syntax issue. Working with\n<uniqueTagForNode('@node_1')>\netc. works like a charm.\n. console h:d:f:l -vvv raises the follwoing stack trace:\n```\n  [Hautelook\\AliceBundle\\Alice\\DataFixtures\\LoadingLimitException]\n  Loading files limit of 5 reached. Could not load the following files:\n  C:[...]Bundle\\DataFixtures\\ORM\\node_tags.yml:\n\nProperty node is not defined for instance self\n\nException trace:\n () at C:[...]\\vendor\\hautelook\\alice-bundle\\src\\Alice\\DataFixtures\\Loader.php:97\n Hautelook\\AliceBundle\\Alice\\DataFixtures\\Loader->load() at C:[...]\\vendor\\hautelook\\alice-bundle\\src\\Doctrine\\DataFixtures\\Executor\\ExecutorTrait.php:41\n Hautelook\\AliceBundle\\Doctrine\\DataFixtures\\Executor\\ORMExecutor->Hautelook\\AliceBundle\\Doctrine\\DataFixtures\\Executor{closure}() at n/a:n/a call_user_func() at C:[...]\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\EntityManager.php:233\n Doctrine\\ORM\\EntityManager->transactional() at C:[...]\\vendor\\hautelook\\alice-bundle\\src\\Doctrine\\DataFixtures\\Executor\\ExecutorTrait.php:45\n Hautelook\\AliceBundle\\Doctrine\\DataFixtures\\Executor\\ORMExecutor->executeExecutor() at C:[...]\\vendor\\hautelook\\alice-bundle\\src\\Doctrine\\DataFixtures\\Executor\\ORMExecutor.php:72 Hautelook\\AliceBundle\\Doctrine\\DataFixtures\\Executor\\ORMExecutor->execute() at\nC:[...]\\vendor\\hautelook\\alice-bundle\\src\\Doctrine\\DataFixtures\\Executor\\FixturesExecutor.php:44\n Hautelook\\AliceBundle\\Doctrine\\DataFixtures\\Executor\\FixturesExecutor->execute() at C:[...]\\vendor\\hautelook\\alice-bundle\\src\\Doctrine\\Command\\LoadDataFixturesCommand.php:221\n Hautelook\\AliceBundle\\Doctrine\\Command\\LoadDataFixturesCommand->execute() at C:[...]\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Console\\Command\\Command.php:256\n Symfony\\Component\\Console\\Command\\Command->run() at C:[...]\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Console\\Application.php:834\n Symfony\\Component\\Console\\Application->doRunCommand() at C:[...]\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Console\\Application.php:186\n Symfony\\Component\\Console\\Application->doRun() at C:\\workspaces\\idea[...]\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\FrameworkBundle\\Console\\Application.php:80\n Symfony\\Bundle\\FrameworkBundle\\Console\\Application->doRun() at C:[...]\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Console\\Application.php:117\n Symfony\\Component\\Console\\Application->run() at C:[...]\\bin\\console:29\n```\n<uniqueTagForNode('@node_<numberBetween(1, 100)>')> results in \n[Symfony\\Component\\Debug\\Exception\\FatalThrowableError]\n  Parse error: syntax error, unexpected 'node_' (T_STRING), expecting ',' or ')'\n. ",
    "mcjwb": "Thanks for getting back to me so soon.\nIt seems to me that a native escape function would be a good idea, I'd guess it'd have a reasonably common use case.\nI'll give the custom faker provider a go in the meantime.\n. ",
    "kcivey": "So is the only way to include HTML (or anything else with <) in fixtures to wrap every tag in the identity function? Instead of <i class=\"fa fa-cog\"></i>, write <identity('<i class=\"fa fa-cog\"></i>')>?. Yes, using identity works, but it seems horribly messy. Without it I get the \"Could not lex the value\" error when it runs into a <.. I thought the idea in #9 was to parse only things that looked like <foo()> as expressions, so that normal XML and HTML could be included in property values. As it is, it seems like a block of HTML has to have <identity(' added at the start and ')> at the end, and all single quotes in it have to be converted to &apos;. Alternatively, each tag in the text can be wrapped in <identity(' and ')>.. ",
    "ddeboer": "@theofidry Friendly reminder: please tag this fix. Thanks!. ",
    "napestershine": "@theofidry  yes thanks :)\n. ",
    "poteirard": "For those facing the same problem check the structure of the yml :) \nI was missing the name of the fixture >.<. ",
    "dribtech": "@poteirard Good catch. I had a missing space after the ':' as in:\nname(unique):<lastName()>\ninstead of\nname(unique): <lastName()>\nI didn't think that yml is so sensitive.. Actually there is no need for custom Faker provider. Since PHP functions can be used as providers, this works reliable:\naddressNote: '20%? <sentence()>: <strval(\"\")>'\nOf course instead of \"\" you can use anything that will evaluate into empty string by strval.\n. ",
    "robotzero": "Thank you for the awesome workaround @theofidry, wil try it out.\n. ",
    "mpdude": "I have a POC running with a provider that is based on Doctrine's EntityManagerInterface::getReference() method. \nSo, <entity_reference(\"Some\\Class\\Name\", 42)> will return a Doctrine proxy for that class and object id.\nThis somewhat changes the question to whether it is possible to nest providers, like in <entity_reference(\"\\Some\\Class\", <numberBetween(1,16)>>?\n. What would be the syntax for these nested providers and what are the potential problems in 2.x?\n. /ping @xkons\n. ",
    "Hywan": "Hello and thanks for considering Hoa\\Compiler \ud83d\ude03!\nAnalysing a language and compiling it into something else is the essence of Hoa\\Compiler, so yes. You can write your own grammar thanks to the PP grammar description language (see an example from the README.md).\nThe grammar might be minimalist if I am correctly reading your examples. The visitor will be simple too. A simple example you might want to look at is the Hoa\\Ruler library. The grammar is very minimalist and you have several compilers (called visitors here because they visit the produced AST), like interpreter to compile from text to in-memory object model, or compiler to compile from in-memory object model to PHP code.\nSo this is a big yes \ud83d\ude09.\n\nThat said, Hoa\\Compiler provides mechanisms you will love.\nA grammar is used to represent any kind of data. Thus, we can use it to validate a data (which is the classical usage), or to\u2026 generate a data. This was a big part of my PhD thesis about Praspel. Long story short, with a grammar expressed with PP and 1 algorithm within 3, you can generate data that match the grammar. I am copy-pasting the example from the README.md:\n``` php\n$sampler = new Hoa\\Compiler\\Llk\\Sampler\\Coverage(\n    // Grammar.\n    Hoa\\Compiler\\Llk\\Llk::load(new Hoa\\File\\Read('Json.pp')),\n    // Token sampler.\n    new Hoa\\Regex\\Visitor\\Isotropic(new Hoa\\Math\\Sampler\\Random())\n);\nforeach ($sampler as $i => $data) {\n    echo $i, ' => ', $data, \"\\n\";\n}\n/*\n * Will output:\n *     0 => true\n *     1 => {\" )o?bz \" : null , \" %3W) \" : [false, 130    , \" 6\"   ]  }\n *     2 => [{\" ny  \" : true } ]\n *     3 => {\" Ne;[3 \" :[ true , true ] , \" th: \" : true,\" C[8} \" :   true }\n /\n```\nThis approach and these algorithms are used to do what we call: Grammar-based Testing. See the research paper here:\n- Grammar-Based Testing using Realistic Domains in PHP,\n  presented at A-MOST 2012 (Montr\u00e9al, Canada)\n  (article,\n   presentation,\n   details).\nSeveral people (like @jubianchi or @vonglasow) are using this approach to generate test data or to populate a database. They write a grammar, they generate data based on this grammar and boom. The most common example I hear is: Describing a JSON payload with the grammar and generate data from it.\nThere are 3\u00a0algorithms. They are described in the hack book of Hoa\\Compiler.\nConsidering the goal of your project, these algorithms can be very very\u2026 very useful for you.\n\nThere is one more thing\u2026 To be able to generate data from a grammar, we need to be able to generate data for the tokens. Token values are represented by PCRE. So\u2026 you guessed it, we are able to generate data based on a regular expression. See the Hoa\\Regex library, it shows one example. I am copy-pasting the most interesting part here:\n``` php\n// 1. Read the grammar.\n$grammar  = new Hoa\\File\\Read('hoa://Library/Regex/Grammar.pp');\n// 2. Load the compiler.\n$compiler = Hoa\\Compiler\\Llk\\Llk::load($grammar);\n// 3. Lex, parse and produce the AST.\n$ast      = $compiler->parse('ab(c|d){2,4}e?');\n// 4. Set up the sampler.\n$generator = new Hoa\\Regex\\Visitor\\Isotropic(new Hoa\\Math\\Sampler\\Random());\n// 5. To infinity and beyond!\necho $generator->visit($ast);\n/*\n * Could output:\n *     abdcde\n /\n```\n\nI don't mean to make some advertisements here, but I really think it can provide really cool features.\n. We can if needed. If you play the role of the PO, draft all the issues etc., I am sure we could find time to help :-).\n. @theofidry Where is the grammar defined?\n. I see. I guess the users have a documentation with all the possible syntax?\n. Great! I don't have time right now but I will try to find some. Maybe some Hoackers could help me. What's your schedule?\n. @theofidry Funny, I opened your issue this weekend too \ud83d\ude1b. I can help to write the grammar (in PP) if you need help.\nHoa libraries are compatible with semver, but here is the answer: https://hoa-project.net/En/Source.html#Rush_Release.. Perfect! Please, ping me.. Hello @theofidry,\nSorry for the late reply. I have a new job, not really free for open source right now. I will try to find time. I am not forgetting you at all :-). Please, feel free to ping me at anytime if I stay silent for too long.\nThanks!. Hello @theofidry :-),\nI have a little bit more free time right now. And as promised, I will help on this PR.\nSo here is a little bit of vocabulary to speak the same language:\n\nThe language we are defining exist in 2 forms: Textual, and in-memory PHP object,\nThe goal of the \u201cparser\u201d is to transform the text into in-memory PHP object,\nThe textual form is called the input,\nThere are 2\u00a0analysers that form the \u201cparser\u201d:\nLexical analyser, also called the lexer that splits a the input into a sequence of lexemes (aka tokens),\nSyntactic analyser, also called the parser that checks if the tokens are correctly ordered by deriving the sequence of tokens based on rules (defined in a grammar),\nIf both analysers succeed, then an Abstract Syntax Tree can be produced. Such a tree can be visited easily to check more constraints,\nAn AST can be transformed into a object model: An enhanced API on top of your language, like the DOM for HTML for instance. The object model is your in-memory PHP objects for instance.\n\nThis is a very classical front-end and middle-end compilation workflow. There is other approach of course, but let's stick on this one.\n\nBased on that, what do you want?\n\nSo my plan is to just replace the Lexer with HoaCompiler\n\nYou want to replace the lexer of Symfony Expression Language by hoa/compiler's. This is possible, but there is a challenge: The token format used by hoa/compiler might not be understood by the parser of Symfony Expression Language.\n\nthe Parser which transforms tokens into VOs\n\nWhat is VO?\n\nI have started to implement your DSL grammar. However, before going further, I need clarifications here about your exact needs. If you already have an object model defined, then we can \u201cmap\u201d/transform an AST to this object model, and everything else will roll.. OK, let's give it a try :-).. I have few questions so far (I will have more later \ud83d\ude09):\n\nCan a reference be inside a parameter?\nCan a reference be surrounded by \u201canything\u201d just like parameters? I mean: Parameters are defined as: anything()? (parameter() anything()?)* mostly, like foo <{bar}> baz; is it the same for references, like foo @bar baz?\nIn the given example @user<numberBetween(1,20)>, could we have recursion here, something like @foo<bar(<baz>)>, I hope no because it's a little bit harder (because of the escaping system and the \u201canything\u201d in parameters).. OK so basically, we can have any strings with the Alice language inside, is that correct? So \u2026 alice \u2026 where \u2026 are anything and alice is an Alice construction, like a parameter, a reference etc. Is it correct? And all Alice constructions can be recursive?. Back from vacations with more free time. Work again on this issue :-).. Thanks! I appreciate your help :-).. I've been absent for many months, but now I'm back, and I'm catching up everything. This project is down on my todo list, but the list is smaller every day ;-).. \n",
    "mcfedr": "So this is deprecated in 2.3, meaning phpunit will fail - but its not possible to use the new syntax in 2.3 so there is no way of avoiding this deprecation.... Thats fine, I have already stuck it in my project using the fork, but thought I'd share it just in case.. ",
    "bwegrzyn": "@theofidry Thanks for the answer!\nIs the user_{1..10} syntax supported in PHP array fixtures, or should I generate the full array myself?\n. Perfect, thanks! I've got it working using a PHP array.\n. ",
    "pverdu": "Thanks for the fast response. We will use @beta for now \ud83d\udc4d \n. Great, thanks!\n. This problem is back again. Even when using the @ beta tag. Did you solve the issue in theofidry/alice-data-fixtures and hautelook/alice-bundle like you mentioned on Nov 17th?. I'm experiencing the issue with these versions:\n\"nelmio/alice\": \"3.0.0-beta.2\",\n\"hautelook/alice-bundle\": \"2.0.0-beta-2\",\n\"theofidry/alice-data-fixtures\": \"1.0.0-beta.3\". I've used @beta on all of them. But that's when the problem occurred. \nI tried going back to the versions lke my previous comment.. I'll check it out. Thanks. Fixed! Thanks again. ",
    "ChrisGibb": "Hi, I'll try to put this together and get back to you soon as.. ",
    "zajca": "Hi, \nI can confirm same problem with static methods returning array.\ndomainType: <randomElement(\\MyBundle\\Entity\\MyEntity::getAvailableDomainTypes())>\nI take a look to my older projects and with 2.2.2 this was working. Now with v3.0.0-beta.1 it's not working.\n. ",
    "rouflak": "@theofidry I'm getting the same issue and could not find any solution in the issue mentioned above. \nCould you please write a brief conclusion to let us know how to deal with arrays and the randomElement fixture?\nThank you very much. ",
    "dominics": "@theofidry confirmed the issue still exists in both beta4, and in 4d47f90371 (latest master at this point). (My test case is like the original issue reporter's, just an array literal, not a static call)\nSeems like this isn't a duplicate of #663 as well; that provider was being passed a string, not an array.. One workaround is to use an array parameter, which doesn't make the lexer spew:\n```\nparameters:\n  planets:\n    - mercury\n    - venus\n    - earth\nType:\n  name:\n    planet: \")>\"\n```\nI also note there's no test case for a literal array (\"<randomElement(['foo', 'bar'])>\") in the LexerIntegrationTest.. ",
    "marina-endouble": "Hi @theofidry , \nI keep getting the error with code like this:\n\nMy alice version is v3.0.0-RC.1\nThe error message:   Type error: Argument 1 passed to Faker\\Provider\\Base::randomElements() must be of the type array, string given, called in /var/www/vendor/fzaninotto/faker/src/Faker/Provider/Base.php on line 205 . That also didn't work :( \n[Nelmio\\Alice\\Throwable\\Exception\\FixtureBuilder\\ExpressionLanguage\\MalformedFunctionException]\n  The value \"<(array('facebook'\" contains an unclosed function.   . @theofidry yep @dominics' solution work \nAnd I'll go with PR soon :). Sorry I didn't find your slack channel mention :P\nBut just one question: should I create a PR via fork? I'm asking as now it doesn't let me push my branch in alice repo directly. ",
    "marinoska": "@theofidry thank you very much, I've done a PR :). Hi @theofidry I see it comes from the same code as #775 645 as parsing arguments relies on this regexp:\npreg_match_all('/[[^[]+]|[^,\\s]+/', $argumentsString, $argumentsList);\nAnd I have no idea how to extract arguments correctly from such pattern as\n, e)>, d, )>\nusing only regexps.\nI can fix it looping over the symbols in the argument string but you might have already had such a method implemented in the alice code, don't you?. ah... In fact I missed it,  I'll add them later then :). ",
    "nlemoine": "Thanks! Sorry for the dumb issue. I should have figured this out. . <ipv6()> as well. . The issue you mentionned is closed, I'm assuming it is fixed but I'm still having the issue. Am I missing something?\nphp\n$objectSet = $loader->loadData([\n    \\Test\\Entity\\User::class => [\n        'user{1..10}' => [\n            'username' => '<username()>',\n            'fullname' => '<firstName()> <lastName()>',\n            'birthDate' => '<date()>',\n            'ip' => '<ipv4()>',\n        ],\n    ],\n]);\nI still get the same error.. Sorry, I still don't get it and believe it's not related. \n<ipv4()>, <ipv6()>, <localIpv4()> aren't custom providers, they are providers from fzaninotto/Faker, right? So they should be available in Alice too? \nActually, I think I figured out what's going wrong. I removed the digit at the end of the function name in Faker. Something like:\nphp\n    \\Test\\Entity\\User::class => [\n        'user{1..10}' => [\n            'ip' => '<ipv()>',\n        ],\n    ],\nAnd it works perfectly fine, I get an IPv4 address in my generating objects. \nThe problem should reside in function parser I guess, I didn't check Alice source code. . \ud83d\udc4d Thanks!. Thanks for the fast feedback. . Just had a quick look to the NativeLoader. I think I'll stick to my cheap fallback solution (creating a custom provider that aliases et renames the Faker file method). \nThanks for your feedback.. Sorry, maybe the term is wrong, I'm using a custom generator:\nphp\n$generator = Faker\\Factory::create('fr_FR');\n$generator->addProvider(new MyProvider($generator));\n$loader = new NativeLoader($generator);\nSo i would just need to extend NativeLoader and override getBlacklistedFunctions?\n. Thanks for your time and help!. ",
    "cierzniak": "Or how to chec condition? If @user->isActive() assign him to this fixture. yml\n    venue: '@venue*'\n    ...\n    totalTickets: '<numberBetween(150, $venue->maxSpace)>'\nGives error Cannot access private property AppBundle\\Entity\\Venue::$maxSpace\nyml\n    venue: '@venue*'\n    ...\n    totalTickets: '<numberBetween(150, $venue*->maxSpace)>'\nGives error Parse error: syntax error, unexpected '->' (T_OBJECT_OPERATOR)\nSo still nothing :(. ",
    "mehmetsoylucom": "My mistake, I'd check the old versions tutorial videos sorry. Thanks for your time.. ",
    "guiyomh": "same issue : \n```yaml\nAppBundle\\Entity\\Team:\n    team_{1..6}:\n      name: ''\n      refId (unique): ''\nAppBundle\\Entity\\User:\n    user_{1..50}:\n      firstName: ''\n      lastName: ''\n      team: '@team_*'\n      refId (unique): ''\nAppBundle\\Entity\\PurchaseRequest:\n    purchase_request{1..50}:\n      description: ''\n      requestId (unique): ''\n      requestAt: ''\n      totalHt: ''\n      owner: '@user_'\n      refId (unique): ''\n```\nbash\n[2017-01-13 10:41:47] app.INFO: fixtures found {\"files\":[\"/app/src/AppBundle/Resources/fixtures/orm/fixtures1.yml\"]}\n[2017-01-13 10:41:47] php.WARNING: Notice: Array to string conversion {\"exception\":\"[object] (ErrorException(code: 0): Notice: Array to string conversion at /app/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:67)\"}\n[2017-01-13 10:41:47] php.WARNING: Notice: Array to string conversion {\"exception\":\"[object] (ErrorException(code: 0): Notice: Array to string conversion at /app/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:67)\"}\n[2017-01-13 10:41:47] php.WARNING: Notice: Array to string conversion {\"exception\":\"[object] (ErrorException(code: 0): Notice: Array to string conversion at /app/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:67)\"}\n[2017-01-13 10:41:47] php.WARNING: Notice: Array to string conversion {\"exception\":\"[object] (ErrorException(code: 0): Notice: Array to string conversion at /app/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:67)\"}\n[2017-01-13 10:41:47] php.WARNING: Notice: Array to string conversion {\"exception\":\"[object] (ErrorException(code: 0): Notice: Array to string conversion at /app/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:67)\"}\n[2017-01-13 10:41:47] php.WARNING: Notice: Array to string conversion {\"exception\":\"[object] (ErrorException(code: 0): Notice: Array to string conversion at /app/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:67)\"}\n[2017-01-13 10:41:47] php.WARNING: Notice: Array to string conversion {\"exception\":\"[object] (ErrorException(code: 0): Notice: Array to string conversion at /app/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:67)\"}\n[2017-01-13 10:41:47] php.WARNING: Notice: Array to string conversion {\"exception\":\"[object] (ErrorException(code: 0): Notice: Array to string conversion at /app/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:67)\"}\n[2017-01-13 10:41:47] php.WARNING: Notice: Array to string conversion {\"exception\":\"[object] (ErrorException(code: 0): Notice: Array to string conversion at /app/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:67)\"}. @theofidry Oh, yes ! It's <paragraphs()> that return an array! thx. ",
    "jackbentley": "Heres a bit more info:\nVersion\nv3.0.0-beta.3\nExample fixture.yml\nyaml\nApp\\Entity\\Car:\n    car1:\n        set:\n            someVariable: a%b\nExample Loader\n```php\n<?php\n$loader = new Nelmio\\Alice\\Loader\\NativeLoader();\n$objects = $loader->loadFile('fixture.yml');\n```\nOutput\n```\nPHP Fatal error:  Uncaught Nelmio\\Alice\\Throwable\\Exception\\FixtureBuilder\\ExpressionLanguage\\LexException: Could not lex the value \"%b\". in /var/{...}/vendor/nelmio/alice/src/Throwable/Exception/FixtureBuilder/ExpressionLanguage/ExpressionLanguageExceptionFactory.php:69\nStack trace:\n0 /var/{...}/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/SubPatternsLexer.php(119): Nelmio\\Alice\\Throwable\\Exception\\FixtureBuilder\\ExpressionLanguage\\ExpressionLanguageExceptionFactory::createForCouldNotLexValue('%b')\n1 /var/{...}/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/SubPatternsLexer.php(83): Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Lexer\\SubPatternsLexer->lexFragment(Object(Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Lexer\\ReferenceLexer), '%b')\n2 /var/{...}/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/FunctionLexer.php(57): Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Lexer\\SubPatternsLexer->lex('a%b')\n3 /var/ in /var/{...}/vendor/nelmio/alice/src/Throwable/Exception/FixtureBuilder/ExpressionLanguage/ExpressionLanguageExceptionFactory.php on line 69\n``\n. Seems to be working fine on2.2.2`, however \ud83d\ude03 . ",
    "alekitto": "I made some changes, tomorrow i'll write an integration test.\nThe code looks quite readable and it was pretty easy to implement and find where to modify the Loader to call the new SimpleCaller class.\nThe only thing that was unclear to me is where to find services definitions for Symfony: I didn't understand that the caller was a service and not instantiated from the Loader. Have I missed something on the doc?. Should be all done now. The expression is correctly parsed, but seems that a resolver for FixtureMethodCallValue\u00a0is missing. Workin' on it... I will submit a PR shortly. Tests are failing on sf3.3-dev because of this: https://github.com/symfony/symfony/commit/bcd897cfd4f92cdc085e2747175f9aff3a76c755 with no stable psr/container release available. Was askin' myself how to test it, but didn't know about the php-mock library. Thank you for the hint!. Yes, the build fails at install stage if a covers annotation is invalid.. I think these are the minimum versions to run the test suite correctly:\nfzaninotto/faker: 1.4 as numberBetween does not exists in 1.3 or less\nphpspec/prophecy: 1.6 to support PHP7\nsymfony/console: 2.7 as it is needed by covers validator command (but this should be handled by ockcyp/covers-validator package)\nsymfony/propery-access should be at least at version 2.7.11 to catch PHP7 \\TypeError correctly\u00a0. Good point though. $fixtureSet here is passed by-ref, so it is already updated.\nDo you prefer returning an array with the new fixtureSet instead of passing it by reference?. I think it is needed for value resolution. Isn't it?. Can't use willThrow\u00a0here as Prophecy ThrowPromise cannot be constructed with Errors. \ud83d\udc4d added. Unit test with argument resolution was present.\nI've added a test here with a method taking an argument that is a reference to another object.. ",
    "nietzscheson": "Close this issue. I'm use AliceBundle and him have a similar issue. @ossinkine  and @theofidry with this pull this is solved.\nMy solution was to rename the files. At first the entities went, last what was related. Example:\n````\n- 1.Account.yml\n- 1.User.yml\n- 2.AccountUser.yml\n`````\nThanks!. ",
    "ossinkine": "I think all the same issue with this library, not with bundle.\nIf you declared referenced object before using them all work fine. But if you using before declaration, exception throwed.\nAs I understand if Alice could not resolve object first time, it throws UnresolvableValueException (f.e here https://github.com/nelmio/alice/blob/master/src/Generator/Resolver/Value/Chainable/FixtureWildcardReferenceResolver.php#L88) and will try to resolve it on second pass.\nBut FixtureReferenceResolver throws FixtureNotFoundException (https://github.com/nelmio/alice/blob/master/src/Generator/Resolver/Value/Chainable/FixtureReferenceResolver.php#L131) and second pass does not occur.\nIf we replace throw FixtureNotFoundExceptionFactory::create($referredFixtureId); with throw new UnresolvableValueException(); here https://github.com/nelmio/alice/blob/master/src/Generator/Resolver/Value/Chainable/FixtureReferenceResolver.php#L131 all work fine.\nBut I'm not sure this is correct workaround.\n@theofidry please review.. @nietzcheson please check out my fix and let us know it works for you or not. @theofidry composer doesn't see the new beta release, only beta4, I can't check. @theofidry is it that what did you mean?. ",
    "mitalcoi": "I use symfony 3.2, but Alice doesn't handle it\n'AppBundle\\Entity\\Campaign':\n    campaign_ga_adwords_{1..7}:\n        name: <company()>\n        cost: <numberBetween(99, 799)>\n        profit: <numberBetween(390, 3900)>\n        status: 1\n        externalId: <uuid()>\n        type: !php/const:AppBundle\\Enum\\CampaignType::GOOGLE_ADWORDS\nReturn an error:\n[Doctrine\\DBAL\\Exception\\NotNullConstraintViolationException]                                                                                                                                 \n  An exception occurred while executing 'INSERT INTO campaign (external_id, name, cost, profit, status, is_auto_update_phone, type, created_at, updated_at) VALUES (?, ?, ?  \n  , ?, ?, ?, ?, ?, ?, ?)' with params [\"224e7835-e819-3e48-a015-c0570b0137b0\", \"O'Hara LLC\", 427, 2482, 1, 1, null, \"2017-02-27 17:10:35\", \"2017-02-27 17:10:35\"]:                           \n  SQLSTATE[23000]: Integrity constraint violation: 1048 Column 'type' cannot be null                                                                                                            \n  [Doctrine\\DBAL\\Driver\\PDOException]                                                 \n  SQLSTATE[23000]: Integrity constraint violation: 1048 Column 'type' cannot be null\nUpdate: in config.yml constant handled as well, but not in alice fixtures yml. Thx, it works!. ",
    "robertkabat": "@theofidry I'm using this one:\n\"nelmio/alice\": \"^2.2\"\nAnd I'm not using HautelookAliceBundle. \nI have my own two bundles where I simply keep loader + fixtures in DataFixtures folder. This is how the e.g loader file looks like:\n```php\nnamespace CodeCraft\\UserBundle\\DataFixtures\\ORM;\nuse Doctrine\\Common\\DataFixtures\\FixtureInterface;\nuse Doctrine\\Common\\Persistence\\ObjectManager;\nuse Nelmio\\Alice\\Fixtures;\nclass LoadUserFixtures implements FixtureInterface\n{\n    public function load(ObjectManager $manager)\n    {\n        $objects = Fixtures::load(DIR . '/fixtures.yml', $manager);\n    }\n}\n```\nAnd example fixtures:\nphp\nCodeCraft\\UserBundle\\Entity\\User:\n  user_{1..10}:\n    email (unique): '<firstName()>+<randomNumber()>@gmail.com'\n    plainPassword: 'secret'\n    status: '<randomElement([0, 1])>'\n    activation_code: '$2a$04$yXqGMzH87U5tK23Ezl.fneBzJuGQNOBWATe4WuN/e/aOtLg/TZNVa'\n    created_at: '<datetime()>'\n    updated_at: '<datetime()>'. Actually that's all the code for this case. It's very simple. Creating user and post attached to that user. So there is nothing to bite :) I will go through Loader class and let you know if I ill find anything.. Thanks for the leads :) \nI was also thinking that files are loaded in wrong order but then I wouldn't get error message for duplicated row but for missing reference I think. Also I saw that order in which files are loaded is correct(1 - users, 2 - stories). Just to be sure I've implemented getOrder functions. so it looks like this right now:\n```ruby\ndev@awesome:/var/www/story/vendor$ story doctrine:fixtures:load\nCareful, database will be purged. Do you want to continue y/N ?y\n\npurging database\nloading [1] CodeCraft\\UserBundle\\DataFixtures\\ORM\\LoadUserFixtures\nloading [2] CodeCraft\\StoryBundle\\DataFixtures\\ORM\\LoadStoryFixtures\n```\n\nHowever I've noticed that even if i keep data description in different yml files but I load both of them in one loader file - then it's ok. Example:\n```php\nclass LoadUserFixtures extends AbstractFixture implements OrderedFixtureInterface\n{\n    public function load(ObjectManager $manager)\n    {\n        $objects = Fixtures::load([\n            'path_to_first_yml',\n            'path_to_second_yml',\n        ], $manager);\n    }\n/**\n * Get the order of this fixture\n *\n * @return integer\n */\npublic function getOrder()\n{\n    return 1;\n}\n\n```\nIf I try to load these two files with separate loaders like this:\n```php\nclass LoadUserFixtures extends AbstractFixture implements OrderedFixtureInterface\n{\n    public function load(ObjectManager $manager)\n    {\n        $objects = Fixtures::load(DIR . '/fixtures.yml', $manager);\n    }\n/**\n * Get the order of this fixture\n *\n * @return integer\n */\npublic function getOrder()\n{\n    return 1;\n}\n\n}\n```\nI get duplicated rows.\nIt looks like it has something to do with the second lead that you provided. I will definitely check that out!. I just found out that relations between data objects are correct. Every new story gets unique user relation. I will investigate this further, I think I'm getting to the bottom of this. As soon as I find out what's wrong I will give you a shout.\nThank you for your time and help ;). Hello,\nRegarding bug itself - no. I have spent some time on it but it was not enough. I needed fast solution so I came up with workaround. If you are interested you can find it here:\nstack overflow workaround\nThis is how I structured my files:\nfile structure\nThen in tests I use \n$this->databaseMigration();\nThis is my function which loads data to database. \nYou can find working example of complete solution in this repository. \nI may take another look at this soon. Any progress on your side?\nRegards,\nRob\n. I think that would be a great feature. Very useful for writing tests in Symfony.. ",
    "vgeyer": "I ran into the same problem having the following associations in my entities:\nCustomer\n```php\n    /\n     * @ORM\\OneToOne(targetEntity=\"Customer\", inversedBy=\"customerAddress\", cascade={\"persist\"})\n     * @ORM\\JoinColumn(name=\"customer_id\", referencedColumnName=\"id\")\n     \n     * @var Customer|null\n     /\n    private $customer;\nCustomerAddressphp\n    /*\n     * @ORM\\OneToOne(targetEntity=\"CustomerAddress\", mappedBy=\"customer\", cascade={\"persist\"})\n     * @var CustomerAddress|null\n     /\n    private $customerAddress;\nfixtures.yamlyaml\nApp\\Entity\\Customer\\Customer:\n    customer{1..2}:\n        mail (unique): \"customer\\@user.com\"\nApp\\Entity\\Customer\\CustomerAddress:\n    customerAddress2:\n        customer (unique): \"@customer2\"\n        app (unique): \"1\"\n```\nThe bug itself does not in doctrine, but in the loader logic, converting the yaml content into objects. Putting a dump($objects); into \\Fidry\\AliceDataFixtures\\Loader\\PersisterLoader::load after $objects = $this->loader->load(....); is showing the truth about what is happening:\n```php\narray:3 [\n  \"customer1\" => App\\Entity\\Customer\\Customer {#872\n    #id: null\n    -customerAddress: null\n    #mail: \"customer1@user.com\"\n  }\n  \"customer2\" => App\\Entity\\Customer\\Customer {#862\n    #id: null\n    -customerAddress: null\n    #mail: \"customer2@user.com\"\n  }\n  \"customerAddress2\" => App\\Entity\\Customer\\CustomerAddress {#870\n    -id: null\n    -app: \"1\"\n    -customer: App\\Entity\\Customer\\Customer {#1194\n      #id: null\n      -customerAddress: null\n      #mail: \"customer2@user.com\"\n    }\n  }\n]\nTake a closer look at object ids prefixed **#**. The **customerAddress2** CustomerAddress instance does have a customer with the mail customer2@user.com. The **customer2** instance, also having the mail address - as you would expect - customer2@user.com but having a different object id! Doctrine is not dettatching anything, it is handling instances. \nDoing this$objects['customer2'] = $objects['customerAddress2']->getCustomer();after$objects = $this->loader->load(....);in ``\\Fidry\\AliceDataFixtures\\Loader\\PersisterLoader::load is correcting it:\narray:3 [\n  \"customer1\" => App\\Entity\\Customer\\Customer {#872\n    #id: null\n    -customerAddress: null\n    #mail: \"customer1@user.com\"\n  }\n  \"customer2\" => App\\Entity\\Customer\\Customer {#1194\n    #id: null\n    -customerAddress: null\n    #mail: \"customer2@user.com\"\n  }\n  \"customerAddress2\" => App\\Entity\\Customer\\CustomerAddress {#870\n    -id: null\n    -app: \"1\"\n    -customer: App\\Entity\\Customer\\Customer {#1194}\n  }\n] \nNow the object ids are correct, and now there are no more duplicated rows or duplicate value errors. So the error has to be in  $objects = $this->loader->load(....); or its implementations creating the objects from the yamls. Tomorrow i will have a closer look, let me know if you got a quick idea @theofidry!. ",
    "damienalexandre": "I would like to report a similar issue with v3.0.0-beta.4.\n```yml\nA:\n    a_template (template):\n        reference: ''\n    a{1..500} (extends a_template): {}\nB:\n    b_template (template):\n        slug: ''\n    b{1..20} (extends b_template):\n        packages: '@a{1..100}'\nphp\nclass A {\n    private $reference;\n}\nclass B {\n    protected $slug;\n    private $packages = [];\n}\n```\nI'm using the NelmioAliceBundle Symfony bridge, and get this exception:\n[Nelmio\\Alice\\Throwable\\Exception\\Generator\\Resolver\\ResolverNotFoundException]  \n  No resolver found to resolve value \"(choice) array (                             \n    0 =>                                                                           \n    Nelmio\\Alice\\Definition\\Value\\FixtureReferenceValue::__set_state(array(        \n       'reference' => 'a1',                                     \n    )),                                                                            \n    1 =>                                                                           \n    Nelmio\\Alice\\Definition\\Value\\FixtureReferenceValue::__set_state(array(        \n       'reference' => 'a2',                                     \n    )),                                                                            \n    2 =>                                                                           \n    Nelmio\\Alice\\Definition\\Value\\FixtureReferenceValue::__set_state(array(        \n       'reference' => 'a3',                                     \n    )),                                                                            \n    3 =>                                                                           \n    Nelmio\\Alice\\Definition\\Value\\FixtureReferenceValue::__set_state(array(        \n       'reference' => 'a4',                                     \n    )),\nI'm not familiar with Alice code base, but is there something I can do to help?. Thanks for looking into it :)\nI expect my syntax to return an array of 100 object \"a\", and set it to the \"packages\" variable, as described here: https://github.com/nelmio/alice/blob/master/doc/relations-handling.md#multiple-references\nThis is, in fact, the same syntax as the pick one randomly in [@1, ..., @100] so that's may be the issue.\nWhat I'm trying to do is more like this:\nB:\n    b_template (template):\n        slug: '<slug()>'\n    b{1..20} (extends b_template):\n        packages: \n            - '@a1' \n            - '@a2' \n            - '@a3' \n            ... \n            - '@a100'\nI don't want anything random like '<numberBetween(0, 5)>x @a{1..100}' could do.. ",
    "cve": "I want to test in Behat that authenticated users has its own products and categories, no matter if these are distributed evenly :). The problem is that the products and categories aren't linked properly, for example:\nUser\nid | name\n---| -------\n1 | user1\n2 | user2\nProduct\nid | name      | user_id | category_id\n-- | ------------|-----------|---------------\n1 | product1 | 1           | 2\n2 | product2 | 2           | 1\nProduct with id = 1 is linked to User with id = 1 but Category of that product (with id = 2) isn't linked to User 1 below it's linked to User 2:\nCategory\nid | name       | user_id\n---|-------------| ----------\n1 | category1 | 1\n2 | category2 | 2\n. So can I reference User from Category in Product like:\nyml\nAppBundle\\Entity\\Product:\n  product_{1..100}:\n    name (unique): <name()>\n    category: '@category*'\n    user: '$category->user'\n?.  Thanks, I will check it today and respond.. ",
    "stof": "@theofidry can you make a new 2.3.1 release to avoid forcing installing PHPUnit when using alice ?. thanks. actually, Packagist does not yet know it, while it found 3.0 beta 5.\n@Seldaek can you check whether Packagist triggered an error (or just force an update) ?. thanks. having the fixture id and property would already help, yes.. the error in such case is available in the previous exception. But Behat does not display the message of the previous exception.\nHere is how my own example actually looked like (in non-verbose display of symfony/console this time, to avoid the stack trace in the middle):\n```\nIn UnresolvableValueDuringGenerationExceptionFactory.php line 25:\nCould not resolve value during the generation process.  \nIn FixtureNotFoundExceptionFactory.php line 23:\nCould not find the fixture \"challenge_1A\".  \n```. @theofidry including the fixture ID and property in the error message would help a lot, yes. This would allow finding the location easily in the fixture files.. well, it will still give me some indication (and if I know my fixtures, I can probably identify that this id matches some of my lists/range).\nNext improvements after that could be to build a command allowing to locate sources for a given id: give a fixture id, and it would load the different fixture files to find places generating this id (so a special loading mode, caring only about ids), to give you the original location and the original id/list. As you know document this as not supported anymore in the referenced PR, I have a question to see whether I can simplify my migration. Is it possible to have a template extending another template ?. @theofidry to make the upgrade path better, could this case trigger an explicit error instead of silently overriding the fixture ?. but as 3.x does not allow merging things anymore, any reuse of an identifier would loose everything from the previous definition. So having the error in all cases of overriding would be fine to me (as it does not work).\nOr maybe at least logging a warning.. sorry, I messed up the description. the issue was not about spaces after the name, but about extra spaces before the name: (extends  foobar) (notice the 2 spaces after extends). I would say that concatenating a reference to anything else is very unlikely to ever make sense. So we may want to change the  precedence of stuff (including all the following stuff in the reference, until reaching something not making it concatenated, like the comma separating arguments of a function). CI is red, but this looks good to me.. @theofidry any idea when this will be released ?. a verb seems to be missing here after to\n. typo: loader\n. in the 3.x codebase, you could even drop these instruction entirely\n. you could wrap this in a method_exists check to keep support for the 2.8 LTS.. why public ?. ",
    "greg0ire": "This would be cleaner IMO:\n```xml\n to be deprecated \n\n\n define default service for interface \n\n\n\n\n\n```. ",
    "cussack": "@theofidry @Hywan is this still the \"hot\" PR or was this topic dropped or superseded by something else?. ",
    "DZunke": "Hey @theofidry i had a look and created a testcase that triggered the error. Hopefully the test is what you were looking for \ud83d\ude04 . ",
    "NerdyProjects": "Ah, I'm using\nnelmio/alice                         v3.0.0-beta.5\nwith AliceBundle and theofidry/alice-data-fixtures        v1.0.0-beta.4. ",
    "thewholelifetolearn": "I have not tried the 3.x version as I need a stable version for professional reasons.\nI do understand that the feature would be added in 3.x and not 2.x. That is not problem as for the moment I have found a work around but it would be great that this feature is added in a new release.. ",
    "jeremy-smith-maco": "Darn. That's okay. I'll just have to have a static limit for the amount of users that can be created instead of being dynamic. Something like:\n```yaml\nparameters:\n   usersToPersist: '@User{1..<{total}>}'\n   total: [some user-specified number between 1 and 500]\nUser{1..500}:\n    userId: '@UserId'\n``.->was in 2.x. It's in the docs [here](https://github.com/nelmio/alice/blob/2.x/doc/relations-handling.md). That code was working in 2.x. So was #760.should resolve before the property is accessed.. So I have added this regex toSubPatternsLexer:'/^(@[^\\ @\\<]+\\<.*>->[^()\\ {]+)/' => self::REFERENCE_LEXER, // Function with propertywhich should detect@ref->propwhich it does but then it gets an exception in theFunctionTokenizersayingThe value \"@ref\" contains an unclosed function.(stack trace below). That string is generated inPropertyReferenceTokenParseron line 47 which splits the string by the->making theFunctionLexer` fail. Not sure what to do there but that's my progress on this so far.\nStack trace:\nThe value \"@ref<aliceTokenizedFunction(FUNCTION_START__current__IDENTITY_OR_FUNCTION_END)>\" contains an unclosed function.\n /vendor/nelmio/alice/src/Throwable/Exception/FixtureBuilder/ExpressionLanguage/ExpressionLanguageExceptionFactory.php:59\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/FunctionTokenizer.php:121\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/FunctionTokenizer.php:45\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/FunctionLexer.php:54\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/GlobalPatternsLexer.php:63\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/ReferenceEscaperLexer.php:49\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/EmptyValueLexer.php:44\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Parser/SimpleParser.php:56\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Parser/TokenParser/Chainable/PropertyReferenceTokenParser.php:52\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Parser/TokenParser/TokenParserRegistry.php:71\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Parser/SimpleParser.php:81\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Parser/SimpleParser.php:59\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Parser/StringMergerParser.php:45\n /vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Parser/FunctionFixtureReferenceParser.php:48\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SpecificationBagDenormalizer/Value/SimpleValueDenormalizer.php:70\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SpecificationBagDenormalizer/Value/SimpleValueDenormalizer.php:46\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SpecificationBagDenormalizer/Value/UniqueValueDenormalizer.php:49\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SpecificationBagDenormalizer/Property/SimplePropertyDenormalizer.php:42\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SpecificationBagDenormalizer/SimpleSpecificationsDenormalizer.php:137\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SpecificationBagDenormalizer/SimpleSpecificationsDenormalizer.php:95\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/Chainable/SimpleDenormalizer.php:83\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/FixtureDenormalizerRegistry.php:63\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/Chainable/CollectionDenormalizerWithTemporaryFixture.php:169\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/Chainable/CollectionDenormalizerWithTemporaryFixture.php:126\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/Chainable/SimpleCollectionDenormalizer.php:118\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/FixtureDenormalizerRegistry.php:63\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SimpleFixtureBagDenormalizer.php:70\n /vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/SimpleDenormalizer.php:48\n /vendor/nelmio/alice/src/FixtureBuilder/SimpleBuilder.php:41\n /vendor/nelmio/alice/src/Loader/SimpleDataLoader.php:47\n /vendor/nelmio/alice/src/Loader/SimpleFileLoader.php:49\n /vendor/nelmio/alice/src/Loader/NativeLoader.php:237\n /** Root test **/. Hmmm dang. The only issue is that it is including the reference in the function string which it shouldn't be. It should probably be splitting at the opening arrow as well maybe?. I am taking a look at this again. This is the test fixture I am using.\nCommon\\Tests\\Dto:\n  MultipleParameter{1..2}:\n    arg1: <word()>\n  ReferenceAccess{1..2}:\n    arg2: '@MultipleParameter<current()>->arg1'\nI don't know exactly what the cause it. Doesn't seem like it is the FunctionTreeTokenzier. I notice though in hits the PropertyReferenceTokenParser in which it has the value @MultipleParameter<aliceTokenizedFunction(FUNCTION_START__current__IDENTITY_OR_FUNCTION_END)>->arg2. At this point it explodes the value at the -> substring and then attempts to parse the first element which is @MultipleParameter<aliceTokenizedFunction(FUNCTION_START__current__IDENTITY_OR_FUNCTION_END)>.\nWhen it attempts to parse this value it goes through all the lexers and gets to the FunctionLexer which checks if it's tokenized which returns false because the <aliceTokenizedFunction string is not at the beginning of the value which is what it checks for. It then attempts to tokenize it again which fails and goes through the rest of the process and fails. It should not be getting to the point of tokenzing an already tokenized value.\nIf I make it pass the isTokenized() call then it says Could not find the fixture \"MultipleParameter\" which I assume is the issue with @Reference<current()> not working which would need to be fixed for this to work. If I do @MultipleParameter<current()> or even just <current()> for that matter it says Unknown formatter \"current\" which seems like it should work with just <current()> in use.. Using $current has a similar issue but it says Unknown formatter \"identity\" which I assume would be the same as using an identity function. Not quite sure how the custom faker provider would work.. That would be much better than not having that functionality at all. Just a matter of how do we do so now.. #763 ready. Those would both work but I still think you should be able to access parent private properties. If you're extending from a class, you should be able to specify the properties for that class in a fixture file even if the parent property is private. In some cases people may not want to run the constructor for the class and just want the values set or make the properties protected.\nI mean ultimately it's up to you but I think you should be able to just directly set parent private properties through the fixture file like in 2.x.. Your second option didn't quite work. This is how we have it setup where DtoObject is just a custom DTO class we have and $this->loader is a class we have that ultimately runs NativeLoader->loadFile():\nFixture\n```\nNamespace\\DtoObject:\n  Args:\n    latitude: \n    longitude: \nNamespace\\TestGeographicLocation: # extends from abstract class GeographicLocation with private properties\n  TestGeographicLocation:\n    __construct:\n      - '@Args->latitude'\n      - '@Args->longitude'\n```\nTest\npublic function testConstructor()\n    {\n        $fixtures = $this->loader->load('ConstructorTest.yml')->getObjects();\n        $expected = $fixtures['TestGeographicLocation'];\n        $latitude = $fixtures['Args']['latitude'];\n        $longitude = $fixtures['Args']['longitude'];\n        $geoLoc = new TestGeographicLocation($latitude, $longitude);\n        $this->assertEquals($latitude, $geoLoc->latitude());\n        $this->assertEquals($longitude, $geoLoc->longitude());\n        $this->assertEquals($expected, $geoLoc); // Failing line\n    }\nError\nFailed asserting that two objects are equal. They have different longitude/latitude values.\nI could generate the Faker values inside of the test and pass them through to the fixture as parameters but I still believe that the ReflectionPropertyAccessor should be able to access private parent properties.\nEDIT: This may be a separate issue. This seems to be happening in other cases using the above code. Your solution would work but referencing it like in the code above from the test results in a different value to the fixture object.. I can try and isolate it. How are users meant to test abstract classes with private properties without changing it to protected/public?. It seems like a lot more work without having the ability to set the private properties of a class. We have hundreds of classes with private properties and without having the ability to set them in our fixtures we would have a lot of extra code to construct these objects as well as set private properties through setter methods.\nEven if you don't end up allowing private properties to be set we will probably use a custom property accessor that allows us to do so since it saves a lot of extra code just to get the fixtures how we require them for our tests to be run.. It may well have to be an in-house solution for us. The main use for our fixtures is to have ready to go objects constructed for us to test our code with. Seems fairly redundant in those cases if we have to construct the objects and set all the properties we need which would just create a lot of extra code when we could just set the properties straight from the fixtures. . Yeah that is just a basic example.. We will be trying to avoid it now in our tests but will see if we actually need it once we re-factor our tests for Alice 3.x.. @theofidry Hopefully it's good now. Couldn't get the unit testing setup on my local machine so hopefully it passes CI.. The first code block didn't work. The second one with the empty curly braces did!. Deprecating it in 2.x would probably be better and people can just use the {} in 3.x. The tilde did not work though.. Ah, so ~ would work in 2.x but {} is required in 3.x.. They get loaded through loadFile method of the  NativeLoader. We have a helper class that has a load function which calls loadFile with the file name inclusive of directory along with any parameters to be injected. No parameters are getting injected in some of the files that are having this issue.. Sure thing.. It already does an instanceof check: if (false === $instance instanceof $class). Mockery is failing because it requires the factory method mock but that method produces an instance of Mockery\\MockInterface which is what causes the exception because it's not actually an instance of the specified class.. Yep, that is correct haha.. I was just running a standard PHPUnit test suite. Ended up having to do step by step debugging but it should display a move helpful exception message rather than having to debug each time that message occurs.. Yeah, it just doesn't display anything helpful in the message. The stack trace is helpful but a better error message saying exactly what's wrong would be nice but if it's not possible then oh well.. When I was upgrading 2.x to 3.x I was just using the $previous variable as the exception message which seemed to prove pretty helpful in my case as I didn't have to debug each time.. I guess it's just a case-by-case sort of thing lol.. No, I haven't really looked into it.. ",
    "JoaoGFarias": "I'm with @robertkabat . ",
    "ndyakov": "Nothing at the moment, sorry.\nOn Thu, Jun 29, 2017 at 2:35 AM Th\u00e9o FIDRY notifications@github.com wrote:\n\n@ndyakov https://github.com/ndyakov any updates? No pressure if you\ndon't have time, it's just to know if I can count on it to be included in\nthe next RC release or if this will wait later\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/pull/733#issuecomment-311820909, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABebskhmwfiJCeTsFp-YUsyXsJbBoY_zks5sIuMPgaJpZM4NWa95\n.\n. @theofidry since then we have moved away from emails ending with numbers for our fixtures, but I can test this if it is working tomorrow. How do you feel about closing this one and probably open a new one with just few more tests regarding the numbers in emails?. @theofidry something like \n((\\s|^)[^@]?(\\p{L}|\\p{N}|[+-_.])+?(\\p{L}|\\p{N}))@ should work just fine.\nI will test this later.. If the regex was written without the optional [^@] it would work fine but only emails with at least 2 characters in the name would be matched.. @theofidry Agreed as far as writing more tests goes. I would prefer no auto-escaping than \"sometimes works\" auto-escaping. You have the final say, this looks like it could create problems with time, so maybe remove auto-escaping with the next major release ?. \n",
    "AlessandroMinoccheri": "Thanks for the help! I will try It. ",
    "videni": "@AlessandroMinoccheri , did you create the entity_reference successfully?  I did as the example show , but it doesn't work.\n```\nclass EntityReferenceProvider extends BaseProvider\n{\n    private $entityManger;\npublic function entityReference(string $class, $name)\n{\n    if (!class_exists($class, true)) {\n        reuturn;\n    }\n    $repository = $this->entityManager->getRepository($class);\n\n    return  $repository->findOne(['name'=>$name]);\n}\n\npublic function setEntityManager(ObjectManager $entityManager)\n{\n    $this->entityManager = $entityManager;\n}\n\n}\n```\n```\nservices:\n   App\\Bundle\\CoreBundle\\Faker\\Provider\\EntityReferenceProvider:\n        calls:\n            - [ setEntityManager, [ '@doctrine.orm.entity_manager' ] ]\n        tags:\n            - { name: 'nelmio_alice.faker.provider' }\n```\nApp\\Bundle\\CarBundle\\Entity\\CarBrand:\n    car_brand{11..20}:\n        name: \"<name()>\"\n        image: \"<name()>\"\n        organization: '<entityReference(\"App\\Bundle\\OrganizationBundle\\Entity\\Organization\", \"Second\"))>'\nit give me this error\n\nInvalidArgumentException: Unknown formatter \"entityReference\"\n\ndo you know why?\n. @theofidry , fix that, but  still the same.. I see,  clear the test cache, solve this problem.. @theofidry , sorry for reply so late,  the UUID is a great idea. thanks. ",
    "Zayon": "Thanks, I'll take a look at this, is there any doc on how to do that ?. ",
    "maches": "@theofidry, thank you for your help! \nI use 3.0.0-RC.0.\nI expected that adding more than one object would not duplicate the existing ones in this array. I assume that there are duplicates among the added objects. Is it possible and this not a bug? How I can avoid this?\nI will try to get as much information as possible and let you know. . array(3) {\n  [0] =>\n  class AppBundle\\Entity\\Subject#4246 (5) {\n    private $id =>\n    NULL\n    private $name =>\n    string(31) \"\u0418\u043d\u043e\u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u044f\u0437\u044b\u043a\"\n    private $createdAt =>\n    class DateTime#2717 (3) {\n      public $date =>\n      string(26) \"2017-06-02 20:53:27.000000\"\n      public $timezone_type =>\n      int(3)\n      public $timezone =>\n      string(13) \"Europe/Moscow\"\n    }\n    private $updatedAt =>\n    class DateTime#2623 (3) {\n      public $date =>\n      string(26) \"2017-06-03 07:22:45.000000\"\n      public $timezone_type =>\n      int(3)\n      public $timezone =>\n      string(13) \"Europe/Moscow\"\n    }\n    private $activities =>\n    class Doctrine\\Common\\Collections\\ArrayCollection#3161 (1) {\n      private $elements =>\n      array(0) {\n        ...\n      }\n    }\n  }\n  [1] =>\n  class AppBundle\\Entity\\Subject#3407 (5) {\n    private $id =>\n    NULL\n    private $name =>\n    string(22) \"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\"\n    private $createdAt =>\n    class DateTime#2407 (3) {\n      public $date =>\n      string(26) \"2017-06-03 15:48:10.000000\"\n      public $timezone_type =>\n      int(3)\n      public $timezone =>\n      string(13) \"Europe/Moscow\"\n    }\n    private $updatedAt =>\n    class DateTime#2375 (3) {\n      public $date =>\n      string(26) \"2017-06-05 23:03:18.000000\"\n      public $timezone_type =>\n      int(3)\n      public $timezone =>\n      string(13) \"Europe/Moscow\"\n    }\n    private $activities =>\n    class Doctrine\\Common\\Collections\\ArrayCollection#3439 (1) {\n      private $elements =>\n      array(0) {\n        ...\n      }\n    }\n  }\n  [2] =>\n  class AppBundle\\Entity\\Subject#4246 (5) {\n    private $id =>\n    NULL\n    private $name =>\n    string(31) \"\u0418\u043d\u043e\u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u044f\u0437\u044b\u043a\"\n    private $createdAt =>\n    class DateTime#2717 (3) {\n      public $date =>\n      string(26) \"2017-06-02 20:53:27.000000\"\n      public $timezone_type =>\n      int(3)\n      public $timezone =>\n      string(13) \"Europe/Moscow\"\n    }\n    private $updatedAt =>\n    class DateTime#2623 (3) {\n      public $date =>\n      string(26) \"2017-06-03 07:22:45.000000\"\n      public $timezone_type =>\n      int(3)\n      public $timezone =>\n      string(13) \"Europe/Moscow\"\n    }\n    private $activities =>\n    class Doctrine\\Common\\Collections\\ArrayCollection#3161 (1) {\n      private $elements =>\n      array(0) {\n        ...\n      }\n    }\nFirst and last element are equal. @theofidry, is this normal behaviour?. @theofidry Thanks! That's it!\n I use custom Faker provider for names which return value by current() index.\nI expected that the elements would not be duplicated, but it's not. Is this described in the documentation? I don't remember, but IMHO should be added, if it is not. Or is it a bug?\nI think that using the built-in function sentence() will solve this problem, or I can filter the repeated elements in the setSubject method. Filtering will reduce the number of elements, but this is even useful to me.\nOn the other hand, maintaining this set methods for relations is a strange solution for the sake of realistic data. Thank you!. @theofidry sentence won't help. Database always clear before flush. Problem still actual.. @theofidry Thank you for your interest!\nSubjects: [ Mathematics, Informatics, Mathematics ]  This example show the root of problem. Unique will not help, because It's a valid unique value of array. I have a 100+ activities on test server with quantity of subjects from 0 to 3 (someone have relation with all subjects). And there are no problems with the keys. . @theofidry , great idea! I will definitely try the proposed solution! I just need to figure out how to get all the generated subjects inside Faker provider. Thanks!. @theofidry I use 3.0.0-RC.0. When I try to use a unique, I get a huge error log. Then I increment verbosity to -vvv and get huge log and this trace after it. Maybe it helps.\nException trace:\n () at /home/maches/www/itmo.start/vendor/theofidry/alice-data-fixtures/src/Exception/MaxPassReachedException.php:60\n Fidry\\AliceDataFixtures\\Exception\\MaxPassReachedException::createForLimit() at /home/maches/www/itmo.start/vendor/theofidry/alice-data-fixtures/src/Loader/MultiPassLoader.php:87\n Fidry\\AliceDataFixtures\\Loader\\MultiPassLoader->load() at /home/maches/www/itmo.start/var/cache/dev/appDevDebugProjectContainer.php:9179\n FidryAliceDataFixturesLoaderMultiPassLoader_00000000474511e5000000000e41a4ef51400951f92b145c5ab5fc88d4c2d008->load() at /home/maches/www/itmo.start/vendor/theofidry/alice-data-fixtures/src/Loader/PersisterLoader.php:76\n Fidry\\AliceDataFixtures\\Loader\\PersisterLoader->load() at /home/maches/www/itmo.start/vendor/theofidry/alice-data-fixtures/src/Loader/PurgerLoader.php:67\n Fidry\\AliceDataFixtures\\Loader\\PurgerLoader->load() at /home/maches/www/itmo.start/vendor/theofidry/alice-data-fixtures/src/Loader/FileResolverLoader.php:56\n Fidry\\AliceDataFixtures\\Loader\\FileResolverLoader->load() at /home/maches/www/itmo.start/vendor/hautelook/alice-bundle/src/Loader/DoctrineOrmLoader.php:172\n Hautelook\\AliceBundle\\Loader\\DoctrineOrmLoader->loadFixtures() at /home/maches/www/itmo.start/vendor/hautelook/alice-bundle/src/Loader/DoctrineOrmLoader.php:104\n Hautelook\\AliceBundle\\Loader\\DoctrineOrmLoader->load() at /home/maches/www/itmo.start/vendor/hautelook/alice-bundle/src/Console/Command/Doctrine/DoctrineOrmLoadDataFixturesCommand.php:139\n Hautelook\\AliceBundle\\Console\\Command\\Doctrine\\DoctrineOrmLoadDataFixturesCommand->execute() at /home/maches/www/itmo.start/vendor/symfony/symfony/src/Symfony/Component/Console/Command/Command.php:264\n Symfony\\Component\\Console\\Command\\Command->run() at /home/maches/www/itmo.start/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:854\n Symfony\\Component\\Console\\Application->doRunCommand() at /home/maches/www/itmo.start/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:201\n Symfony\\Component\\Console\\Application->doRun() at /home/maches/www/itmo.start/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Console/Application.php:81\n Symfony\\Bundle\\FrameworkBundle\\Console\\Application->doRun() at /home/maches/www/itmo.start/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:125\n Symfony\\Component\\Console\\Application->run() at /home/maches/www/itmo.start/bin/console:28\nHere are some messages about exceptions from a huge log without a stack trace. They are repeated many times.\n```\nNext Nelmio\\Alice\\Throwable\\Exception\\Generator\\Resolver\\UnresolvableValueDuringGenerationException: Could not resolve value during the generation process. in /home/maches/www/itmo.start/vendor/nelmio/alice/src/Throwable/Ex\n  ception/Generator/Resolver/UnresolvableValueDuringGenerationExceptionFactory.php:25 \nNelmio\\Alice\\Throwable\\Exception\\Generator\\Resolver\\UniqueValueGenerationLimitReachedException: Could not generate a unique value after 150 attempts for \"AppBundle\\Entity\\Activity#subjects::593709508eeb22.94289414\". in /\n  home/maches/www/itmo.start/vendor/nelmio/alice/src/Throwable/Exception/Generator/Resolver/UniqueValueGenerationLimitReachedExceptionFactory.php:25    \n``\nSo theunique` doesn't solve my problem. And this is 3.x version!. ",
    "tacman": "But that returns:\n[InvalidArgumentException]     \n  Unknown formatter \"featureId\"\nI also tried with  and even putting the yaml key in braces.\n. I want to propagate the feature ID (the yaml key in the fixtures file) to\nmy own database, to avoid having to type it twice.\nIt seems to me like it's a bug that you can't have a one-item list, e.g.\nuser_{bob}: { username: } doesn't work, but user_{bob, carol}: {\nusername: } does.\nOn Thu, Jun 8, 2017 at 11:52 AM, Th\u00e9o FIDRY notifications@github.com\nwrote:\n\nbut what is featureId() supposed to be?  only works if foo is a\nnative PHP function or a faker formatter (and you can add custom ones)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/747#issuecomment-307146130, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAl0QdkrJvqyExujt9wPVl7sqg1Q80Q9ks5sCBjIgaJpZM4N0GSo\n.\n. By any chance, can you configure the faker formatter to receive the\nfeatureId?\n\nOn Thu, Jun 8, 2017 at 11:52 AM, Th\u00e9o FIDRY notifications@github.com\nwrote:\n\nbut what is featureId() supposed to be?  only works if foo is a\nnative PHP function or a faker formatter (and you can add custom ones)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/747#issuecomment-307146130, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAl0QdkrJvqyExujt9wPVl7sqg1Q80Q9ks5sCBjIgaJpZM4N0GSo\n.\n. \n",
    "magnetik": "I'm using alice with some strange looking strings like this : $<$<$o$3f0wdf$>$f3fno$000\u30c4$>$09FSto$>.\nI've tried to escape both the < and $, but it does not seems to be enough. When using '\\$\\<\\$\\<\\$o\\$3f0wdf\\$>\\$f3fno\\$000\u30c4\\$>\\$09FSto\\$>' I have: \n[Nelmio\\Alice\\Throwable\\Exception\\FixtureBuilder\\ExpressionLanguage\\LexException]\n  Could not lex the value \">\\$f3fno\\$000\u30c4\\$>\\$09FSto\\$>\".. ",
    "wohral": "I playing arround with something like this:\nApp\\Models\\ParameterLang:\n    parameter.lang_*_{1..20}:\n        parameter: '@parameter_*'\n        lang: '@lang_*'\n        name: EN <word()>\nBut I fail on Constraint duplicity.\nAnother possibility is:\nApp\\Models\\ParameterLang:\n    parameter.lang_*_{1..20}:\n        parameter (unique): '@parameter_*'\n        lang: '@lang_*'\n        name: EN <word()>\nBut this make for parameter only one translation. I would need something like multi-fields UNIQUE. Or some other way:\nApp\\Models\\ParameterLang:\n    parameter.lang_cs_{1..20}:\n        parameter (unique): '@parameter_*'\n        lang: '@lang_cs'\n        name: CS <word()>\n    parameter.lang_en_{1..20}:\n        parameter (unique): '@parameter_*'\n        lang: '@lang_en'\n        name: EN <word()>\n    parameter.lang_de_{1..20}:\n        parameter (unique): '@parameter_*'\n        lang: '@lang_de'\n        name: De <word()>\n. Hi, Theo :)\nJust for explaining the situation:\nParameterLang has PrimaryKey combination of parameter_id and lang_id. \nIf I have 20 parameters and 3 languages (en, cs, de), I would like to generate totaly 60 ParameterLangs... for each Parameter have 3 ParameterLangs (en, cs, de).\nApp\\Models\\ParameterLang:\n    parameter.lang_*_{1..20}:\n        parameter (unique): '@parameter_*'\n        lang: '@lang_*'\n        name: EN <word()>\nThis make for each parameter only ONE ParameterLang. \nI am looking for the way, how to do something like this\nforeach($parameters as $parameter){\n         foreach($langs as $lang){\n            // Create new ParameterLang - $parameter + $lang\n         }\n    }\n. I found one solution, but it's not elegant, but it works:\nusing by  a call it manually for each language separately\nApp\\Models\\ParameterLang:\n    parameter.lang_en_{1..20}:\n        parameter: '@parameter_<current()>'\n        lang: '@lang_en'\n        name: EN <word()>\n    parameter.lang_cs_{1..20}:\n        parameter: '@parameter_<current()>'\n        lang: '@lang_cs'\n        name: CS <word()>\n    parameter.lang_de_{1..20}:\n        parameter: '@parameter_<current()>'\n        lang: '@lang_de'\n        name: DE <word()>. ",
    "piotrbrzezina": "any progress ?. ",
    "ostrolucky": "Thank you for implementing this fix. Helped me out today.. Thank you @reinfi . ",
    "kariolos": "When I insert data through the form everything works fine,so I think the objects and mapping are fine.\nThe weird thing is that I have another Entity with ancestorsand descendants and don't get that error.\nAnyway use this workaround but I was curious why this is happening.\n\nDrop Database\nCreate Database\nUpdate Schema\nSet the ancestor field to allow nullon productCategoryClosuretable\nLoad Fixtures\nSet the ancestor field back to not null. - doctrine/doctrine-fixtures-bundle    2.3.0 \ndoctrine/orm                         v2.5.6  \nfzaninotto/faker   v1.6.0\ngedmo/doctrine-extensions    v2.4.30\nhautelook/alice-bundle   v1.4.1\nnelmio/alice                         v2.3.1  . \n",
    "curry684": "Yeah I was too lazy for a full fork and multifile edits are bad in the web UI   \ud83d\ude09  . ",
    "ak76": "I had the same problem.\nDoctrine Annotaiton Reader recognizes @user in comments as annotation.\nhttps://github.com/nelmio/alice/blob/34ee0035297903dea0bee6dbb9d88daac302f31f/src/FixtureBuilder/ExpressionLanguage/Parser/TokenParser/Chainable/DynamicArrayTokenParser.php#L39\nTo solve this problem, just add this code somewhere in your project:\nphp\nAnnotationReader::addGlobalIgnoredName('user');. Sorry, I can't.\nBecause in this case I will be forced to install hautelook/alice-bundle 2.0.0 which requires symfony 3.3 or higher.\nI need only use symfony 2.8.. Ok.\nI created a separate project.\ncomposer.json\njson\n{\n    \"name\": \"symfony/framework-standard-edition\",\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"description\": \"The \\\"Symfony Standard Edition\\\" distribution\",\n    \"autoload\": {\n        \"psr-4\": {\n            \"AppBundle\\\\\": \"src/AppBundle\"\n        },\n        \"classmap\": [ \"app/AppKernel.php\", \"app/AppCache.php\" ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": { \"Tests\\\\\": \"tests/\" },\n        \"files\": [ \"vendor/symfony/symfony/src/Symfony/Component/VarDumper/Resources/functions/dump.php\" ]\n    },\n    \"require\": {\n        \"php\": \">=5.5.9\",\n        \"doctrine/doctrine-bundle\": \"^1.8\",\n        \"doctrine/orm\": \"^2.5\",\n        \"incenteev/composer-parameter-handler\": \"^2.0\",\n        \"sensio/distribution-bundle\": \"^5.0.19\",\n        \"sensio/framework-extra-bundle\": \"^5.0.0\",\n        \"symfony/monolog-bundle\": \"^3.1.0\",\n        \"symfony/polyfill-apcu\": \"^1.0\",\n        \"symfony/swiftmailer-bundle\": \"^2.6.4\",\n        \"symfony/symfony\": \"3.4.*\",\n        \"twig/twig\": \"^1.0||^2.0\"\n    },\n    \"require-dev\": {\n        \"doctrine/data-fixtures\": \"^1.3\",\n        \"hautelook/alice-bundle\": \"^2.0@rc\",\n        \"sensio/generator-bundle\": \"^3.0\",\n        \"symfony/phpunit-bridge\": \"^3.0\",\n        \"theofidry/alice-data-fixtures\": \"^1.0@rc\"\n    },\n    \"scripts\": {\n        \"symfony-scripts\": [\n            \"Incenteev\\\\ParameterHandler\\\\ScriptHandler::buildParameters\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::buildBootstrap\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::clearCache\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installAssets\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installRequirementsFile\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::prepareDeploymentTarget\"\n        ],\n        \"post-install-cmd\": [\n            \"@symfony-scripts\"\n        ],\n        \"post-update-cmd\": [\n            \"@symfony-scripts\"\n        ]\n    },\n    \"config\": {\n        \"platform\": {\n            \"php\": \"7.1.15\"\n        },\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"symfony-app-dir\": \"app\",\n        \"symfony-bin-dir\": \"bin\",\n        \"symfony-var-dir\": \"var\",\n        \"symfony-web-dir\": \"web\",\n        \"symfony-tests-dir\": \"tests\",\n        \"symfony-assets-install\": \"relative\",\n        \"incenteev-parameters\": {\n            \"file\": \"app/config/parameters.yml\"\n        },\n        \"branch-alias\": {\n            \"dev-master\": \"3.4-dev\"\n        }\n    }\n}\nI used the same files with fixtures and got the same error.\n```\nak76 @ my-ubuntu in ~/projects/symfony [0:07:41]\n$ php bin/console -vvv hautelook:fixtures:load -e test\nCareful, database will be purged. Do you want to continue y/N ?y\n00:10:11 INFO      [app] fixtures found\n[\n  \"files\" => [\n    \"/projects/symfony/tests/AppBundle/Fixtures/ORM/test/news.yml\"\n  ]\n]\n[]\n00:10:11 INFO      [app] Purging database with purge mode \"DELETE_MODE\".\n[]\n[]\n00:10:11 INFO      [app] Loading fixtures.\n[]\n[]\nIn ExpressionLanguageExceptionFactory.php line 69:\n[Nelmio\\Alice\\Throwable\\Exception\\FixtureBuilder\\ExpressionLanguage\\LexException]\n  Could not lex the value \">\".                                                       \nException trace:\n Nelmio\\Alice\\Throwable\\Exception\\FixtureBuilder\\ExpressionLanguage\\ExpressionLanguageExceptionFactory::createForCouldNotLexValue() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/SubPatternsLexer.php:117\n Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Lexer\\SubPatternsLexer->lexFragment() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/SubPatternsLexer.php:84\n Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Lexer\\SubPatternsLexer->lex() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/StringThenReferenceLexer.php:43\n Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Lexer\\StringThenReferenceLexer->lex() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/FunctionLexer.php:57\n Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Lexer\\FunctionLexer->lex() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/GlobalPatternsLexer.php:63\n Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Lexer\\GlobalPatternsLexer->lex() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/ReferenceEscaperLexer.php:49\n Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Lexer\\ReferenceEscaperLexer->lex() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Lexer/EmptyValueLexer.php:44\n Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Lexer\\EmptyValueLexer->lex() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Parser/SimpleParser.php:59\n Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Parser\\SimpleParser->parse() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Parser/StringMergerParser.php:45\n Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Parser\\StringMergerParser->parse() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Parser/FunctionFixtureReferenceParser.php:48\n Nelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Parser\\FunctionFixtureReferenceParser->parse() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SpecificationBagDenormalizer/Value/SimpleValueDenormalizer.php:67\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\SpecificationBagDenormalizer\\Value\\SimpleValueDenormalizer->parseValue() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SpecificationBagDenormalizer/Value/SimpleValueDenormalizer.php:46\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\SpecificationBagDenormalizer\\Value\\SimpleValueDenormalizer->denormalize() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SpecificationBagDenormalizer/Value/UniqueValueDenormalizer.php:49\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\SpecificationBagDenormalizer\\Value\\UniqueValueDenormalizer->denormalize() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SpecificationBagDenormalizer/Property/SimplePropertyDenormalizer.php:42\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\SpecificationBagDenormalizer\\Property\\SimplePropertyDenormalizer->denormalize() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SpecificationBagDenormalizer/SimpleSpecificationsDenormalizer.php:147\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\SpecificationBagDenormalizer\\SimpleSpecificationsDenormalizer->denormalizeProperty() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SpecificationBagDenormalizer/SimpleSpecificationsDenormalizer.php:105\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\SpecificationBagDenormalizer\\SimpleSpecificationsDenormalizer->denormalize() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/Chainable/SimpleDenormalizer.php:83\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\Chainable\\SimpleDenormalizer->denormalize() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/FixtureDenormalizerRegistry.php:62\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\FixtureDenormalizerRegistry->denormalize() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/Chainable/CollectionDenormalizerWithTemporaryFixture.php:170\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\Chainable\\CollectionDenormalizerWithTemporaryFixture->denormalizeTemporaryFixture() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/Chainable/CollectionDenormalizerWithTemporaryFixture.php:127\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\Chainable\\CollectionDenormalizerWithTemporaryFixture->denormalize() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/Chainable/SimpleCollectionDenormalizer.php:119\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\Chainable\\SimpleCollectionDenormalizer->denormalize() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/FixtureDenormalizerRegistry.php:62\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\FixtureDenormalizerRegistry->denormalize() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/Fixture/SimpleFixtureBagDenormalizer.php:85\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\Fixture\\SimpleFixtureBagDenormalizer->denormalize() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/Denormalizer/SimpleDenormalizer.php:48\n Nelmio\\Alice\\FixtureBuilder\\Denormalizer\\SimpleDenormalizer->denormalize() at /projects/symfony/vendor/nelmio/alice/src/FixtureBuilder/SimpleBuilder.php:41\n Nelmio\\Alice\\FixtureBuilder\\SimpleBuilder->build() at /projects/symfony/vendor/nelmio/alice/src/Loader/SimpleDataLoader.php:47\n Nelmio\\Alice\\Loader\\SimpleDataLoader->loadData() at /projects/symfony/vendor/nelmio/alice/src/Loader/SimpleFilesLoader.php:65\n Nelmio\\Alice\\Loader\\SimpleFilesLoader->loadFiles() at /projects/symfony/vendor/theofidry/alice-data-fixtures/src/Loader/SimpleLoader.php:53\n Fidry\\AliceDataFixtures\\Loader\\SimpleLoader->load() at /projects/symfony/vendor/theofidry/alice-data-fixtures/src/Loader/PersisterLoader.php:77\n Fidry\\AliceDataFixtures\\Loader\\PersisterLoader->load() at /projects/symfony/vendor/theofidry/alice-data-fixtures/src/Loader/PurgerLoader.php:119\n Fidry\\AliceDataFixtures\\Loader\\PurgerLoader->load() at /projects/symfony/vendor/theofidry/alice-data-fixtures/src/Loader/FileResolverLoader.php:73\n Fidry\\AliceDataFixtures\\Loader\\FileResolverLoader->load() at /projects/symfony/vendor/hautelook/alice-bundle/src/Loader/DoctrineOrmLoader.php:184\n Hautelook\\AliceBundle\\Loader\\DoctrineOrmLoader->loadFixtures() at /projects/symfony/vendor/hautelook/alice-bundle/src/Loader/DoctrineOrmLoader.php:117\n Hautelook\\AliceBundle\\Loader\\DoctrineOrmLoader->load() at /projects/symfony/vendor/hautelook/alice-bundle/src/Console/Command/Doctrine/DoctrineOrmLoadDataFixturesCommand.php:138\n Hautelook\\AliceBundle\\Console\\Command\\Doctrine\\DoctrineOrmLoadDataFixturesCommand->execute() at /projects/symfony/vendor/symfony/symfony/src/Symfony/Component/Console/Command/Command.php:252\n Symfony\\Component\\Console\\Command\\Command->run() at /projects/symfony/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:964\n Symfony\\Component\\Console\\Application->doRunCommand() at /projects/symfony/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Console/Application.php:86\n Symfony\\Bundle\\FrameworkBundle\\Console\\Application->doRunCommand() at /projects/symfony/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:248\n Symfony\\Component\\Console\\Application->doRun() at /projects/symfony/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Console/Application.php:74\n Symfony\\Bundle\\FrameworkBundle\\Console\\Application->doRun() at /projects/symfony/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:148\n Symfony\\Component\\Console\\Application->run() at /projects/symfony/bin/console:27\n``. Of course.\nI checked it with the master and got the same result.. @solegs \nJust use simple strings or something like that:`. ",
    "Mahmoudz": "Here's a quick solution:\nEdit the fixtures loader to skip certain keys, like this embeddable Point:\nyaml\nInfrastructure\\Persistence\\Doctrine\\Extension\\Point:\n  local__blablabla:\n    __construct: [53.2164587474, -0.9746272299]\n```php\n    private function persistFixtures(array $fixtures, ObjectManager $objectManager)\n    {\n        $loader    = new AppNativeLoader();\n        $objectSet = $loader->loadFiles($fixtures);\n    foreach ($objectSet->getObjects() as $key => $object)\n    {\n        $this->addReference($key, $object);\n\n        // skip keys that starts with 'local__' mainly used for embeddables\n        if ($this->isLocal($key) === false)\n        {\n            $objectManager->persist($object);\n        }\n    }\n    // Note: the flashing happens later when all fixtures (ORM/ODM) are persisted\n}\n\nprivate function isLocal($key) : bool\n{\n    return strpos($key, 'local__') === 0;\n}\n\n```\nHere I choose local__ but you can customise it.. ",
    "danut007ro": "Thanks, that's clear enough.. ",
    "olvlvl": "\nYou could however catch that exception in the file loader to enrich the exception to specify which file is buggy.\n\nI might need to create a new exception class for that since InvalidArgumentException is too generic to be relied on. What do you think?. ",
    "kermorgant": "Thanks for the reply.\nI tried the two alternatives but got those results\nlegalRepresentative: \"@self->differentLegalRepresentative ? @legalRepresentative_.$current\"\n\nLoading files limit of 15 reached. Could not load the following files:                                                                                                                                                                     \n  /var/www/app/Resources/fixtures/orm/organization.yml:                                                                                                                                                                                      \n   - Nelmio\\Alice\\Throwable\\Exception\\Generator\\Resolver\\FixtureNotFoundException: Could not find the fixture \"legalRepresentative_.$current\". in /var/www/vendor/nelmio/alice/src/Throwable/Exception/Generator/Resolver/FixtureNotFoundExc \n  eptionFactory.php:23    \n\nlegalRepresentative: \"@self->differentLegalRepresentative ? @<('legalRepresentative_'.$current)>\"\n\nLoading files limit of 15 reached. Could not load the following files:                                                                                                                                                                     \n  /var/www/app/Resources/fixtures/orm/organization.yml:                                                                                                                                                                                      \n   - Nelmio\\Alice\\Throwable\\Exception\\Generator\\Resolver\\UnresolvableValueException: Could not evaluate the expression \"    0 =>                                                                                                                                                                                                                                     \n    Nelmio\\Alice\\Definition\\Value\\EvaluatedValue::__set_state(array(                                                                                                                                                                         \n       'expression' => '\\'legalRepresentative_\\'.$current',                                                                                                                                                                                  \n    )),                                                                                                                                                                                                                                      \n  ))>\". in /var/www/vendor/nelmio/alice/src/Throwable/Exception/Generator/Resolver/UnresolvableValueExceptionFactory.php:52             . Thanks for the answer. What you said made me look a bit further and in fact, if I put the fixtures in the same file, it works :)\n\nI should have mentionned it but I had a file circle.yml and a file user.yml with some other fixtures I removed for the sake of clarity, but it seems it is safer to keep fixtures in one file.\nI guess it does not matter so much now but I had prepared a gist with my composer.json so here it is, just in case https://gist.github.com/kermorgant/3a82df249b98de8fe101bb7e8f56cc4d\nAnd yes, the file containing member was absolutely loaded :). I just updated the gist with composer show output and here is the result of -vvv option\n```\n\u00b1 % docker-compose run --rm php php bin/console hautelook:fixtures:load -n -vvv  | more                                                                                                                                                 !10010 \n07:28:01 INFO      [app] fixtures found                                                                                                                                                                                                      \n[                                                                                                                                                                                                                                            \n  \"files\" => [                                                                                                                                                                                                                               \n    \"/var/www/app/Resources/fixtures/action_types.yml\",  \n    \"/var/www/app/Resources/fixtures/circle.yml\",        \n    \"/var/www/app/Resources/fixtures/credit_value.yml\",  \n    \"/var/www/app/Resources/fixtures/subscriptions.yml\", \n    \"/var/www/app/Resources/fixtures/user.yml\"           \n  ]                                                      \n]                                                        \n[]                                                         \n[Fidry\\AliceDataFixtures\\Exception\\MaxPassReachedException]                                                        \n  Loading files limit of 15 reached. Could not load the following files:                                             \n  /var/www/app/Resources/fixtures/circle.yml:                                                                        \n   - Nelmio\\Alice\\Throwable\\Exception\\Generator\\Resolver\\FixtureNotFoundExcep                                        \n  tion: Could not find the fixture \"member38\". in /var/www/vendor/nelmio/alic                                        \n  e/src/Throwable/Exception/Generator/Resolver/FixtureNotFoundExceptionFactor                                        \n  y.php:23                                                                                                           \n  Stack trace:                                                                                                       \n  #0 /var/www/vendor/nelmio/alice/src/Generator/Resolver/Value/Chainable/Fixt                                        \n  ureReferenceResolver.php(143): Nelmio\\Alice\\Throwable\\Exception\\Generator\\R                                        \n  esolver\\FixtureNotFoundExceptionFactory::create('member38')                                                        \n  #1 /var/www/vendor/nelmio/alice/src/Generator/Resolver/Value/Chainable/Fixt                                        \n  ureReferenceResolver.php(95): Nelmio\\Alice\\Generator\\Resolver\\Value\\Chainab                                        \n  le\\FixtureReferenceResolver->resolveReferredFixture(Object(Nelmio\\Alice\\Def                                        \n  inition\\Fixture\\FixtureId), 'member38', Object(Nelmio\\Alice\\Generator\\Resol                                        \n  vedFixtureSet), Object(Nelmio\\Alice\\Generator\\GenerationContext))                                                  \n  #2 /var/www/vendor/nelmio/alice/src/Generator/Resolver/Value/Chainable/Self                                        \n  FixtureReferenceResolver.php(99): Nelmio\\Alice\\Generator\\Resolver\\Value\\Cha                                        \n  inable\\FixtureReferenceResolver->resolve(Object(Nelmio\\Alice\\Definition\\Val                                        \n  ue\\FixtureReferenceValue), Object(Nelmio\\Alice\\Definition\\Fixture\\Templatin                                        \n  gFixture), Object(Nelmio\\Alice\\Generator\\ResolvedFixtureSet), Array, Object                                        \n  (Nelmio\\Alice\\Generator\\GenerationContext))     \n```. Hi,\nI just updated nelmio/alice & hautelook/alice-bundle to the latest dev version but unfortunately, the issue remains. I understand. Unfortunately, I did not have enough available time to setup a repo for that but I hope it will be possible in january.. ",
    "Jir4": "@theofidry umh ok, and no way to emulate the behavior ? Or a way to have a postPersist ?. ",
    "visiover": "Thank you very much for you quick answer :) \nIt has been resolved by writing my own Provider. \nIt would have been nice if it was handled \"out of the box\" but i guess it's part of the 2.x limitations.\nIt looks like it can't properly handle arrays. \nThanks again \ud83d\udc4d . ",
    "danielspk": "I use Doctrine ORM without Symfony.\nExample:\n```php\ntrait CodeTrait\n{\n  /* @Column(type=\"string\", length=15) /\n  private $code;\n}\nclass CivilState\n{\n  use CodeTrait;\n/*\n   * @Id @Column(type=\"integer\")\n   * @GeneratedValue\n   /\n  private $id;\n//.. other properties and methods\n}\n```\nThe code property is not accessible by the Alice library. In version 2.x worked correctly.\nThe CivilState entity works correctly with Doctrine ORM. It is not an ORM problem.\n. Hi,\nI use version 2.3.1, i do not see any deprecated messages.\nCaution: In version 3 other private properties (inside class) work well, only fails with the private properties contained within a trait.\n. ",
    "dunglas": "It's not related to the trait, the PropertyAccess component do not support private properties without mutator methods (it's intended). You need to add a setter.. ",
    "Ocramius": "I think we went this way with roave/dont\nOn 20 Oct 2017 23:06, \"Th\u00e9o FIDRY\" notifications@github.com wrote:\n\n@Ocramius https://github.com/ocramius: I think you could either mention\nthat or update your extremely defensive programming slides\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelmio/alice/issues/806#issuecomment-338322377, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAJakOe_kLlsCbstfx8v_-BoZ8IfqkqCks5suQtvgaJpZM4P56YD\n.\n. \n",
    "tifabien": "Of course! I'll have a look tomorrow and create a pr if needed.. We also need to disable the lexer when a field contains the $ symbol. @theofidry oops I was to vague sorry. I meant that we got also an error when in your fixture you set for example something like \nApp\\Entity\\Currency:\n    dollar:\n        symbol: $. Thanks @theofidry, I'll escape it but is it something new with alice 3.x because I didn't have to escape it with the previous 2.x version?. The LoaderIntegrationTest class seems to be only on the master branch. Is there any equivalent for the 2.x branch?. I just added the unit test. I'll have a look at the 3.x branch and let you know if it's OK!. Just checked and all seems OK on the master branch :). it seems related to the deprecation notice introduced in SF 3.4 regarding the tests/Nelmio/Alice/Fixtures/Parser/Files/Yaml/file_with_constants.yml:10 file. ",
    "curtchn": "2.3.3 fixes issue. Can be closed. Thanks :+1:. ",
    "pborreli": "\u262e\ufe0f \ud83d\udc9f . ",
    "sjopet": "That's the only existing 'solution' I can find so far, It looks to me as reversing the problem though; having to add Alice/Faker directives to all the things I don't want Alice or Faker to touch.\nIn both cases I would still have to alter all the fields the lexer raises exceptions for, which would still mean more then a thousand cases. . ",
    "pscheit": "How can I escape everything in general?\nI have a string like:\ncontainerDefinitionsJson: \"[\\n    {\\n        \\\"position\\\": [\\n            0,\\n            0\\n        ],\\n        \\\"dimension\\\": [\\n            100,\\n            100\\n        ],\\n        \\\"style\\\": \\\"\\\",\\n        \\\"type\\\": \\\"image\\\",\\n        \\\"slot\\\": 1\\n    },\\n    {\\n        \\\"position\\\": [\\n            5,\\n            5\\n        ],\\n        \\\"dimension\\\": [\\n            40,\\n            30\\n        ],\\n        \\\"style\\\": \\\"\\\",\\n        \\\"type\\\": \\\"headline\\\",\\n        \\\"slot\\\": 2\\n    }\\n]\"\nI tried \"\\\\[\" and \"\\[\"   to escape it, but it does not work. \nIs there currently any workaround?\n```\nNelmio\\Alice\\Throwable\\Exception\\FixtureBuilder\\ExpressionLanguage\\LexException: Could not lex the value \"[\n    {\n        \"position\": [\n            0,\n            0\n        ],\n        \"dimension\": [\n            100,\n            100\n        ],\n        \"style\": \"\",\n        \"type\": \"image\",\n        \"slot\": 1\n    },\n    {\n        \"position\": [\n            5,\n            5\n        ],\n        \"dimension\": [\n            40,\n            30\n        ],\n        \"style\": \"\",\n        \"type\": \"headline\",\n        \"slot\": 2\n    }\n]\".\n/app/vendor/nelmio/alice/src/Throwable/Exception/FixtureBuilder/ExpressionLanguage/ExpressionLanguageExceptionFactory.php:69\n```. ",
    "floplus": "An other workaround, which worked (for me):\n```\nparameters:\n  param1: 'App\\Entity\\E1'\nApp\\Entity\\Abc:\n   abc1:\n    name: \"Abc\"\n    __calls:\n      - setClassName: [<{param1}>]\n```\nwhat didn't work was (not even with different levels of escaping the backslash):\nApp\\Entity\\Abc:\n   abc1:\n    name: \"Abc\"\n    className: 'App\\Entity\\E1'\n. ",
    "loic425": "To use an array in a json string, you can use this workaround.\n```\nparameters:\n     data: '{\"name\":\"Netflix\", \"types\":[\"streeming\", \"video\"]}'\nApp\\Entity\\Test:\n    test_1:\n        __calls:\n          - setData: [<{data}>]\n```. @theofidry Thank you, it works with this workaround.\n```\nparameters:\n     data: '{\"name\":\"Netflix\", \"types\":[\"streeming\", \"video\"]}'\nApp\\Entity\\Test:\n    test_1:\n        __calls:\n          - setData: [<{data}>]\n```. ",
    "yakobe": "I'm currently also having issues with strings being lexed when they shouldn't. Adding them all as parameters could get very verbose.\nWhat is the currently recommended way to solve it? Is there any documentation about it anywhere? How can people help?. > That said there is a release coming where alice just let the string be a string if it's an invalid expression (instead of currently bailing out)\n@theofidry that would be awesome. Any idea when it is due? Or is there a pull request i can follow or something?. Thank you! Solves my problems perfectly \ud83d\udc4d.. ",
    "Divi": "My first try was using native function ucfirst() with Faker words() function and native rand(), like <ucfirst(words(rand(1, 3)))> but I couldn't manage to do it.. ",
    "matthieumota": "@theofidry Thank you ! Great thing !. ",
    "slk500": "sure thing, done. my bad should use https://github.com/nelmio/alice/blob/master/doc/complete-reference.md#method-arguments-with-flags please delete this. ",
    "jvasseur": "@petegore this means nelmio/alice has nothing to do with Doctrine anymore, all it does is converting fixture files into objects and let other libraries (FidryAliceDataFixtures for example) handle saving those objects into the persistence layer.. ",
    "Nijusan": "no problem: here we go https://github.com/nelmio/alice/pull/860 :). works like a charm! thx @theofidry . hmm, for me it reads like \"the object does not need to be completed furthermore, so first, mark it as completed and second unmark the needs completion flag ... because its already completed...\nthe other way around, if i would put that code elsewhere, it would read like \"the object is still marked as \"needs completion\" but i would already mark it as completed, but why? \ni am not 100% sure about this flag... all i could find out from the source until now the flag seems to be only used in this very special constellation, to make it possible to hydrate the object although we are in the first pass... and if thats the point, then saving the \"needsCompleteGeneration\" flag and setting it back later would make no use at all... because what we want in this special situation is to have the object to be fully complete?!. sry, i've lost u ... \ni've nothing changed on the function calls? they should still be called? or am i wrong? from the point of the original https://github.com/nelmio/alice/issues/851 issue, i think the problem does not occur because of the use of __call but because of the use of the __construct .\ni'm not sure about ur point i think i did not understand it correctly. nonetheless i added another test case, maybe this is going the direction ur talking about?. ok. but what u are writing is what i was trying to say right from the beginning :) after diggin deep into the code, exactly what u say is what i could reproduce... \nand because of this i do make the object an instance of CompleteObject so that it is not completed again in second pass because everthing of this happend in the first pass...\nso i think we are both talking same language here? what is it that makes u unsatisfied ?. ",
    "bogdan-dubyk": "Thank you @theofidry . Actually, I tried to add custom method (using custom provider).\nMethod:\npublic function getUser(Campaign $campaign)\n    {\n        return $campaign->getUser();\n    }\nand inside .yml \nProject\\Entities\\Creative:\n  creative{1..1000}:\n    name: '<word()>'\n    campaign: '@campaign*'\n    user: '<getUser($campaign)>'\nbut I'm using this generated data to store in DB and I faced another problem. After I generate all entities data successfully I'm trying to store it in DB using persist() inside a loop and flush()after the loop\n$file = database_path('factories/base.yml');\n $loader = new Loader(); \n $loadedFile = $loader->loadFile($file);\n $objects = $loadedFile->getObjects();\n foreach ($objects as $name => $object) {\n     $em->persist($object);\n }\n $em->flush();\nand I'm getting error like A new entity was found through the relationship 'Project\\Entities\\Creative\n  n#user' that was not configured to cascade persist operations for entity: Project\\Entities\\User@000000001943de800000000029ccc036 and when I add persist option to Creative entity (also to Campaign) I'm getting Duplicate entry error inserting users.\nI'm not sure if it's related to alice but maybe you also can help me with this @theofidry, thank you very much!\nFYI: I'm not using Symfony, I'm using Laravel with doctrine\n. Yes, I'm refreshing all database migrations at the beginning of the command.\nI made a very very dirty workaround to fix it, I'm looping through objects in order \nUsers->Campaigns->Creatives\n, removing and replacing some relations.\n$loadedFile = $loader->loadFile($file);\n   $objects = $loadedFile->getObjects();\n   $loadedFile = null;\n   $users = [];\n   $campaigns= [];\n   foreach ($objects as $name => $object) {\n       if ($object instanceof User) {\n           $em->persist($object);\n           $users[$object->getEmail()] = $object;\n           continue;\n       } elseif ($object instanceof Campaign) {\n           foreach ($object->getCreatives() as $creative) {\n               $object->removeCreative($creative);\n           }\n           $em->persist($object);\n           $campaigns[$object->getUser()->getEmail()] = $object;\n            continue;\n       } elseif ($object instanceof Creative) {\n           $email = $object->getUser()->getEmail();\n            if(isset($users[$email])) {\n                $object->setUser($users[$email]);\n            }\n            if(isset($campaigns[$email])) {\n                $object->setCampaign($campaigns[$email]);\n            }\n            $em->persist($object);\n             continue;\n       } else {\n           $em->persist($object);\n        }\n   }\n    $em->flush();\nI know it's very weird but it's only way which works for me to avoid any of duplication error :) \nLooks like for some reason it considers each relation as a new entity and trying to insert instead of update record.. ",
    "ixarlie": "I'm facing with the same thing (Alice v3.2.0, Symfony 3, Doctrine ORM 2.6) and I think the issue here is the \"deep_clone\" function when using references (or variables) as arguments in fake providers. The entire argument array is \"cloned\", so every reference/variable is a new instance for Doctrine.\nThe debug trace is the following:\n1. FunctionCallValue. As we are using a function call, Alice will create one with next content. (name = getUser, arguments = [FixtureReferenceValue|VariableValue, ...])\n2. FunctionCallArgumentResolver. Each argument is resolved with its argument resolver, then a new FunctionCallValue is created (HERE WE LOSE KEEPING SAME INSTANCES) to be resolved again for the inner resolver.\n3. PhpFunctionCallValueResolver -or- FakerFunctionCallValueResolver (depending if you use a native php function or a provider function)\n4. Finally your provider is called returning a value.\nThe \"deep_clone\" line works well when the arguments are still ValueInterface, but introduces this behaviour in this scenario.\nFrom the easiest to the most complicated workaround:\n1. You could replace \"deep_clone\" function, with your own implementation, and add it a filter that skips your domain classes to be cloned. (because do some tricks in your domain like make private the __clone method is not affordable IMO)\n2. You could decorate FunctionCallArgumentResolver to try avoid deep_clone in FunctionCallValue instantiation once your arguments are resolved.\n3. You could extend Alice adding a new custom Flag somehow (requires to decorate SimpleValueDenormalizer in order to read your flags and return a proper ValueInterface for your resolver, simply crazy!)\n@theofidry  any other suggestions?\nThanks!. Thanks for your comments!. I'm not very acquainted with Flex yet but I think is the right way, because if I want to use PHP function then Alice wouldn't be blocking me. So doing it in the bundle is not an option definitely.\nSo adding some hints in the documentation is quite enough.\nhttps://github.com/nelmio/alice/blob/master/doc/getting-started.md#symfony. ",
    "rvadym": "Reason:\nNelmio\\Alice\\FixtureBuilder\\ExpressionLanguage\\Parser\\TokenParser\\Chainable\\TolerantFunctionTokenParser::parse() method deals only with functions separated by space (<foo()> <bar()>) or not separated at all (<foo()><bar()>), no other symbols are supported.\n\n\n\nPossible fix:\nReplace regex in this line\nfrom\nconst REGEX = '/(\\)>)(\\ *)</'; \nto\n const REGEX = '/(\\)>)([\\ \\_]*)</';\n\nhttp://www.phpliveregex.com/p/n1Z. @theofidry Sure, will do it ASAP. Thanks!. ",
    "dkarlovi": "Similar issue:\nGiven the database fixture file \"@PrivilegeBundle:privilege-matrix.yml\" is loaded # App\\Behat\\DatabaseContext::theDatabaseFixtureFileIsLoaded()\n      Could not resolve value during the generation process. (Nelmio\\Alice\\Throwable\\Exception\\Generator\\Resolver\\UnresolvableValueDuringGenerationException)\nCouldn't resolve what value?. @stof that's an easy fix then, just incorporate previous exception's error here? (I mean, my example). Yes, but if the original issue is fixed, both exceptions benefit, no?. ",
    "hiromik": "Thanks for the reply, my bad, should have checked : \n$loader = new Nelmio\\Alice\\Loader\\NativeLoader();\n$objectSet = $loader->loadFile(__DIR__.'/fixtures.yml');\nIn the meantime I went to use https://github.com/schmittjoh/JMSSerializerBundle since it's already required in my project, so I just create my .json file and deserialize using @Type annotation :). ",
    "ChristianVermeulen": "I just stumbled upon https://github.com/nelmio/alice/issues/761 which was a joy to read \ud83d\ude48. Anyway, thanks for rubber ducking and apologies for the premature issue!\n\n. ",
    "goetas": "will submit a test case on moday-tuesday. It looks https://github.com/nelmio/alice/pull/900 fixed also my issue! Thanks!. Should this be closed now since https://github.com/nelmio/alice/issues/882 is resolved?. Does not sound a good idea as I will have to call $fixture->getValueForCurrent(); twice...\nphp\n $_scope['current'] = $fixture->getValueForCurrent() FixtureInterface \n    ? $fixture->getValueForCurrent()\n    : $fixtureSet->getObjects()->get($fixture->getValueForCurrent())->getInstance();\n. Great! Thanks!. Using a ternary operator? Do not understand. ",
    "solegs": "php: 7.1.7 \nsymfony: 4.0.8\nhautelook/alice-bundle: 2.x-dev\nI have the same problem((\nHow did you resolve it?. Hi @ak76!\n<text(100)>  - This is not exactly what I need.\nI should get the object from another file.\n. ",
    "lucassimonin": "\nPHP 7.2\nSymfony 4.2\nhautelook/alice-bundle: 2.3.0\n\nparameters:\n    stock_1: 10\n    stock_2: 0\nApp\\Entity\\ProductLog:\n    productLog{1..2}:\n        stock: '<{stock_<current()>}>'\n```\nIn ExpressionLanguageExceptionFactory.php line 69:\nCould not lex the value \">\".\n```\nI have the same issue. Can you do something ?. ",
    "carusogabriel": "@theofidry Sure, gonna look into that and update this PR ASAP :)\nEdit: fixed :+1: \nRef: https://github.com/doctrine/dbal/pull/3009#issuecomment-366382720. Was stringContains use in purpose?. ",
    "stphane": "@theofidry thank you for your time. I do not generate id myself, ids are generated while the underlying object gets persisted to database. I moved the question to Stackoverflow, sorry for the inconvenience. . Thank you very much! Here is the thread. ",
    "zbexworld": "i missed the reflection to put all the necessary elements.\nFixtures in YML file : \nyaml\nAppBundle\\Entity\\Genus:\n    genus{1..10}:\n        name: <name()>\n        subFamily: <text(20)>\n        speciesCount: <numberBetween(100, 1000)>\n        funFact: <sentence()>\n        isPublished: <boolean(75)>\nAppBundle\\Entity\\GenusNote:\n    genus.note_{1..100}:\n        username: <userName()>\n        userAvatarFileName: '50%? leanna.jpeg : ryan.jpeg'\n        note: <paragraph()>\n        createdAt: <dateTimeBetween('-6 months', 'now')>\nConfigutation :\njson\n\"require\": {\n        \"php\": \">=5.5.9\",\n        \"doctrine/doctrine-bundle\": \"^1.6\",\n        \"doctrine/doctrine-cache-bundle\": \"^1.3\",\n        \"doctrine/doctrine-migrations-bundle\": \"^1.3\",\n        \"doctrine/orm\": \"^2.5\",\n        \"incenteev/composer-parameter-handler\": \"^2.0\",\n        \"knplabs/knp-markdown-bundle\": \"^1.7\",\n        \"sensio/distribution-bundle\": \"^5.0.19\",\n        \"sensio/framework-extra-bundle\": \"^3.0.2\",\n        \"symfony/monolog-bundle\": \"^3.1.0\",\n        \"symfony/polyfill-apcu\": \"^1.0\",\n        \"symfony/swiftmailer-bundle\": \"^2.3.10\",\n        \"symfony/symfony\": \"3.3.*\",\n        \"twig/twig\": \"^1.0||^2.0\",\n        \"hautelook/alice-bundle\": \"~2.1\"\n    },\n    \"conflict\": {\n        \"nelmio/alice\": \"<=2.1.1\"\n    },\n    \"minimum-stability\": \"dev\",\nClass for Loading the Fixtures \n```php\nnamespace AppBundle\\FixtureData\\ORM;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Persistence\\ObjectManager;\nuse Nelmio\\Alice\\Loader\\NativeLoader;\nclass loadFixtures extends Fixture\n{\n    public function load(ObjectManager $manager)\n    {\n        $loader = new NativeLoader();\n        $objectSet = $loader->loadFile(dir.'/Fixtures.yml');\n}\n\n}\n```\nFull Stack Trace\nException trace:\n () at C:\\xampp\\htdocs\\aqua_note\\vendor\\fzaninotto\\faker\\src\\Faker\\Provider\\Base.php:194\n Faker\\Provider\\Base::randomElements() at C:\\xampp\\htdocs\\aqua_note\\vendor\\fzaninotto\\faker\\src\\Faker\\Provider\\Base.php:212\n Faker\\Provider\\Base::randomElement() at C:\\xampp\\htdocs\\aqua_note\\vendor\\fzaninotto\\faker\\src\\Faker\\Provider\\Person.php:54\n Faker\\Provider\\Person->name() at n/a:n/a\n call_user_func_array() at C:\\xampp\\htdocs\\aqua_note\\vendor\\fzaninotto\\faker\\src\\Faker\\Generator.php:222\n Faker\\Generator->format() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Generator\\Resolver\\Value\\Chainable\\FakerFunctionCallValueResolver.php:69\n Nelmio\\Alice\\Generator\\Resolver\\Value\\Chainable\\FakerFunctionCallValueResolver->resolve() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Generator\\Resolver\\Value\\Chainable\\PhpFunctionCallValueResolver.php:74\n Nelmio\\Alice\\Generator\\Resolver\\Value\\Chainable\\PhpFunctionCallValueResolver->resolve() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Generator\\Resolver\\Value\\Chainable\\FunctionCallArgumentResolver.php:94\n Nelmio\\Alice\\Generator\\Resolver\\Value\\Chainable\\FunctionCallArgumentResolver->resolve() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Generator\\Resolver\\Value\\ValueResolverRegistry.php:84\n Nelmio\\Alice\\Generator\\Resolver\\Value\\ValueResolverRegistry->resolve() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Generator\\Hydrator\\SimpleHydrator.php:80\n Nelmio\\Alice\\Generator\\Hydrator\\SimpleHydrator->hydrate() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Generator\\ObjectGenerator\\SimpleObjectGenerator.php:103\n Nelmio\\Alice\\Generator\\ObjectGenerator\\SimpleObjectGenerator->completeObject() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Generator\\ObjectGenerator\\SimpleObjectGenerator.php:91\n Nelmio\\Alice\\Generator\\ObjectGenerator\\SimpleObjectGenerator->generate() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Generator\\ObjectGenerator\\CompleteObjectGenerator.php:53\n Nelmio\\Alice\\Generator\\ObjectGenerator\\CompleteObjectGenerator->generate() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Generator\\DoublePassGenerator.php:60\n Nelmio\\Alice\\Generator\\DoublePassGenerator->generateFixtures() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Generator\\DoublePassGenerator.php:51\n Nelmio\\Alice\\Generator\\DoublePassGenerator->generate() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Loader\\SimpleDataLoader.php:49\n Nelmio\\Alice\\Loader\\SimpleDataLoader->loadData() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Loader\\SimpleFileLoader.php:49\n Nelmio\\Alice\\Loader\\SimpleFileLoader->loadFile() at C:\\xampp\\htdocs\\aqua_note\\vendor\\nelmio\\alice\\src\\Loader\\NativeLoader.php:260\n Nelmio\\Alice\\Loader\\NativeLoader->loadFile() at C:\\xampp\\htdocs\\aqua_note\\src\\AppBundle\\FixtureData\\ORM\\loadFixtures.php:14\n AppBundle\\FixtureData\\ORM\\loadFixtures->load() at C:\\xampp\\htdocs\\aqua_note\\vendor\\doctrine\\data-fixtures\\lib\\Doctrine\\Common\\DataFixtures\\Executor\\AbstractExecutor.php:121\n Doctrine\\Common\\DataFixtures\\Executor\\AbstractExecutor->load() at C:\\xampp\\htdocs\\aqua_note\\vendor\\doctrine\\data-fixtures\\lib\\Doctrine\\Common\\DataFixtures\\Executor\\ORMExecutor.php:88\n Doctrine\\Common\\DataFixtures\\Executor\\ORMExecutor->Doctrine\\Common\\DataFixtures\\Executor\\{closure}() at n/a:n/a\n call_user_func() at C:\\xampp\\htdocs\\aqua_note\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\EntityManager.php:233\n Doctrine\\ORM\\EntityManager->transactional() at C:\\xampp\\htdocs\\aqua_note\\var\\cache\\dev\\appDevDebugProjectContainer.php:6919\n DoctrineORMEntityManager_0000000025a3b518000000000c8edb03248c9728a1f5e27b005eca5c3a4c04cd->transactional() at C:\\xampp\\htdocs\\aqua_note\\vendor\\doctrine\\data-fixtures\\lib\\Doctrine\\Common\\DataFixtures\\Executor\\ORMExecutor.php:9\n0\n Doctrine\\Common\\DataFixtures\\Executor\\ORMExecutor->execute() at C:\\xampp\\htdocs\\aqua_note\\vendor\\doctrine\\doctrine-fixtures-bundle\\Command\\LoadDataFixturesDoctrineCommand.php:105\n Doctrine\\Bundle\\FixturesBundle\\Command\\LoadDataFixturesDoctrineCommand->execute() at C:\\xampp\\htdocs\\aqua_note\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Console\\Command\\Command.php:264\n Symfony\\Component\\Console\\Command\\Command->run() at C:\\xampp\\htdocs\\aqua_note\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Console\\Application.php:887\n Symfony\\Component\\Console\\Application->doRunCommand() at C:\\xampp\\htdocs\\aqua_note\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Console\\Application.php:223\n Symfony\\Component\\Console\\Application->doRun() at C:\\xampp\\htdocs\\aqua_note\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\FrameworkBundle\\Console\\Application.php:81\n Symfony\\Bundle\\FrameworkBundle\\Console\\Application->doRun() at C:\\xampp\\htdocs\\aqua_note\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Console\\Application.php:130\n Symfony\\Component\\Console\\Application->run() at C:\\xampp\\htdocs\\aqua_note\\bin\\console:28\n. okey here is the list of composer show : \nC:\\xampp\\htdocs\\aqua_note>composer show\ncomposer/ca-bundle                   1.0.7              Lets you find a path to the system CA bundle, and includes a fallback to the Mozilla CA bundle.\ndoctrine/annotations                 v1.2.7             Docblock Annotations Parser\ndoctrine/cache                       v1.6.1             Caching library offering an object-oriented API for many cache backends\ndoctrine/collections                 v1.3.0             Collections Abstraction library\ndoctrine/common                      v2.6.2             Common Library for Doctrine projects\ndoctrine/data-fixtures               v1.3.0             Data Fixtures for all Doctrine Object Managers\ndoctrine/dbal                        v2.5.12            Database Abstraction Layer\ndoctrine/doctrine-bundle             1.6.8              Symfony DoctrineBundle\ndoctrine/doctrine-cache-bundle       1.3.3              Symfony Bundle for Doctrine Cache\ndoctrine/doctrine-fixtures-bundle    3.0.2              Symfony DoctrineFixturesBundle\ndoctrine/doctrine-migrations-bundle  v1.3.1             Symfony DoctrineMigrationsBundle\ndoctrine/inflector                   v1.1.0             Common String Manipulations with regard to casing and singular/plural rules.\ndoctrine/instantiator                1.0.5              A small, lightweight utility to instantiate objects in PHP without invoking their constructors\ndoctrine/lexer                       v1.0.1             Base library for a lexer that can be used in Top-Down, Recursive Descent Parsers.\ndoctrine/migrations                  v1.5.0             Database Schema migrations using Doctrine DBAL\ndoctrine/orm                         v2.5.6             Object-Relational-Mapper for PHP\nfig/link-util                        1.0.0              Common utility implementations for HTTP links\nfzaninotto/faker                     v1.7.1             Faker is a PHP library that generates fake data for you.\nhautelook/alice-bundle               dev-master a4e4f39 Symfony bundle to manage fixtures with Alice and Faker.\nincenteev/composer-parameter-handler v2.1.2             Composer script handling your ignored parameter file\njdorn/sql-formatter                  v1.2.17            a PHP SQL highlighting library\nknplabs/knp-markdown-bundle          1.7.0              Knplabs markdown bundle transforms markdown into html\nmichelf/php-markdown                 1.8.0              PHP Markdown\nmonolog/monolog                      1.22.1             Sends your logs to files, sockets, inboxes, databases and various web services\nmyclabs/deep-copy                    1.7.0              Create deep copies (clones) of your objects\nnelmio/alice                         v3.1.3             Expressive fixtures generator\nocramius/package-versions            1.3.0              Composer plugin that provides efficient querying for installed package versions (no runtime IO)\nocramius/proxy-manager               2.1.1              A library providing utilities to generate, instantiate and generally operate with Object Proxies\nparagonie/random_compat              v2.0.10            PHP 5.x polyfill for random_bytes() and random_int() from PHP 7\npsr/cache                            1.0.1              Common interface for caching libraries\npsr/container                        1.0.0              Common Container Interface (PHP FIG PSR-11)\npsr/link                             1.0.0              Common interfaces for HTTP links\npsr/log                              1.0.2              Common interface for logging libraries\npsr/simple-cache                     1.0.0              Common interfaces for simple caching\nsensio/distribution-bundle           v5.0.20            Base bundle for Symfony Distributions\nsensio/framework-extra-bundle        v3.0.26            This bundle provides a way to configure your controllers with annotations\nsensio/generator-bundle              v3.1.4             This bundle generates code for you\nsensiolabs/security-checker          v4.0.4             A security checker for your composer.lock\nswiftmailer/swiftmailer              v5.4.8             Swiftmailer, free feature-rich PHP mailer\nsymfony/monolog-bundle               v3.1.0             Symfony MonologBundle\nsymfony/phpunit-bridge               v3.3.2             Symfony PHPUnit Bridge\nsymfony/polyfill-apcu                v1.3.0             Symfony polyfill backporting apcu_* functions to lower PHP versions\nsymfony/polyfill-intl-icu            v1.3.0             Symfony polyfill for intl's ICU-related data and classes\nsymfony/polyfill-mbstring            v1.3.0             Symfony polyfill for the Mbstring extension\nsymfony/polyfill-php56               v1.3.0             Symfony polyfill backporting some PHP 5.6+ features to lower PHP versions\nsymfony/polyfill-php70               v1.3.0             Symfony polyfill backporting some PHP 7.0+ features to lower PHP versions\nsymfony/polyfill-util                v1.3.0             Symfony utilities for portability of PHP codes\nsymfony/swiftmailer-bundle           v2.6.2             Symfony SwiftmailerBundle\nsymfony/symfony                      v3.3.2             The Symfony PHP framework\ntheofidry/alice-data-fixtures        v1.0.1             Nelmio alice extension to persist the loaded fixtures.\ntwig/twig                            v1.34.2            Twig, the flexible, fast, and secure template language for PHP\nzendframework/zend-code              3.3.0              provides facilities to generate arbitrary code using an object oriented interface\nzendframework/zend-eventmanager      3.2.0              Trigger and listen to events within a PHP application. I'm sorry  i was following a course in witch the instructor suggested  aliceBundle, then  i realized that we are not in the same configurations (he used aliceBundle in conjunction with fixturesBundle).\nfor Symfony there is another bundle witch is called HautelookAliceBundle that is configured diffrently.\ni'm using it currently but this time i'm getting the same error with a different offset value (-3 instead of -5) . \nsomeone on the internet is suggesting to downgrade the version of fzaninotto to 1.6 witch solved the problem.\nThank for all. ",
    "lyrixx": "Sure, we are using v3.1.3. No sorry I did not checked. I found a workarround. I have not time to dig into this issue.\nLet's close it.. ",
    "benr77": "\nAccessing a private property seems to have stopped working\n\nWill this be able to access the ID generated as the primary key when the entity is persisted? Or do I need to try and set the ID in the fixture and then use one of the Custom Accessor methods to set it?. ",
    "ssaki": "@theofidry I've debugged this and created a PR that fixes the issue.\nBesides the obvious issue with lexer not matching properly the property reference I've got another one on a later stage - once the PropertyReferenceTokenParser runs a second lex/parse on the reference only. The assumption of the function lexer that the token starts at position 0 leads to trying to re-process for functions which fails. I've chosen to relax the check which IMO seems reasonable enough. Alternatively the token can be denormalized/reverted before the second stage lex/parse, but I haven't dug enough to see if there is an appropriate API endpoint for invoking this from the parser.\nI'll be happy to assist you if you with resolving that if you need a hand (or different POV on the approach)\nRegards. @theofidry , I've added test cases in both LexerIntegrationTest and ParserIntegrationTest. ",
    "tomtomau": "Hey @theofidry - sorry for taking so long but I added a test case :). ",
    "xabbuh": "cheers :). ",
    "BigBadBassMan": "Basically, thats what I tried before.\nI increased the max_nesting_level = 64 and upped the pool of related otherObj from 30 to 100 - no luck there.\nThe error even happens, when defining something like that:\nrelatedOthers (unique):  '2x @otherObj*'\nAnd when dropping the constraint like this:\nrelatedOthers: '2x @otherObj*'\nmy database throws duplicate errors.\nI find it strange, that when sampling two objects from a pool of 50 or 100, alice still manages to pick the same one. This does not seem like a valid one in 100 chance. (On a sample set of 300 objects with 1-10 related objects each this should not have happend at all.)\nNow, my entities are more complicated than shown above, and have more relations - some of them are circular, unfortunately. But I only the m:n relations give me trouble.\nWhen I change the above statement to an array with a single related object ([@otherObj*] ), I can persist my fixtures just fine, with and without the uniqe-constraint. Thats why I think that the culprit is not in my data model or relations, but with alice's randomness - or generator logic.. Ok, I dug down somewhat into this:\nThe php fatal error is triggerd at https://github.com/nelmio/alice/blob/16959632cd73c019e2ae4d3ccd88062056738cb7/src/Generator/Resolver/UniqueValuesPool.php#L54 which in turn is called by\nhttps://github.com/nelmio/alice/blob/16959632cd73c019e2ae4d3ccd88062056738cb7/src/Generator/Resolver/UniqueValuesPool.php#L39\nThis seems to happen only, and only, if the fixtures contain self-referencing and/or cyclic references, which may not be a problem in real world applications, but alice stumbles.\nAccording to this https://stackoverflow.com/questions/3834791/fatal-error-nesting-level-too-deep-recursive-dependency#answer-19097159, the comparison in Line 54 should be === which would only check references to the main object, not sub-entities.\nI changed my local copy accordingly, seems to work as expected (but I've run into another bug, duplicate related entities ...), the fatal error is gone at least, and alice processes the relations just fine.\n. Thats why you're chief of staff ;-)\nI cannot judge, if there are such cases, and if they are many.\nDoes your test suite cover this with the current comparison operator? It should bail on changing the operator, if some fundamentals break, somewhere.\n(Maybe I can assist in extending the tests to includy my specific problem...)\nI would really like to see this fix included.\nEdit: should I open a PR for this change, so we can track all changes / breaks this would kick off?\n. ok, not as easy as I tought. needs custom compare-function doing strict compare on all properties, not the objects itself.. The thing is: your tests try to compare to separate instances of a class wich happen to have exactly the same property values:\n$a = new StdClass();\n$a->name = 'name';\n$b = new StdClass();\n$b->name = 'name';\nThis used to return true, since the comparison was by value. Comparing by reference fails this test, which can be rewritten. But I think the change in behaviour uncovers another \"bug\". Since identitity is now determined by reference, alice seems to create duplicate related entities - at least in my setup. Which is why I think that a simple by-reference comparison is not the solution.. @theofidry sorry for the delay, was on vacation and then got jumped by piled up work...\nanyway, latest code passes all tests and works for me in my specific use-case.\nI ended up offloading the comparison logic to sebastian/comparator, this is better tested and designed than anything I could come up with.\nUnfortunately, this adds new dependencies - so if you do not want this, we could \"reimplement\" the comparison logic along those lines. \nOtherwise, some real-world testing would be in order, before merging this - from my point of view it is ready.. > I'm fine with the changes and the new dependency, I would however require a test for it otherwise the change would both be undocumented and subject to regressions\nWhere/how would i implement this? currently, it is required in composer.json, thus beeing automatically resolved by composer. Do you have actual unit tests for libs alice is depending on?. I ended up adding an additional test method, not a simple generator entry as suggested.\nThis will fail with a PHP Fatal Error (which I found no way of capturing in PHPUnit), if the old comparison logic is still in place, otherwise it will pass.\nAlso, some exceptions needed to be catched, since the test may run into alice's own depth limit of 150, and fail to generate objects - this is not related to my changes - it stems from the way alice picks samples from sets.\nAside from this, I consider this ready to be merged.. Agreed, was just a quick fix to test something out. Care to suggest a name / location?\nAlso,  (and besides a some unit tests) this would need testing in more real-world applications, to get a view on the performance impact. And to make sure that no unintended behaviour changes occured.\nAnyway: this allows me to use (unique) on m:n relations which may be cyclic, while not running into an infinite loop.\nAny thoughts on the basic logic?. ",
    "Eldhelion": "hm, ok, seeing the custom fake provider, I think I now know what to do, thanks. ",
    "vtexier": "I finally had the time to run the tests with @sami-bel:\nWith the fix proposed to load the files in order, the tests run by php -d zend.enable_gc=0 bin/phpunit failed:\nAmong the failed, we notice that the test expects an inverse order (!!???), but get a good order from a user perspective: \nphp\nArray &0 (\n     'Nelmio\\Alice\\Model\\User' => Array &1 (\n-        'user_file3' => Array &2 ()\n-        'user_file2' => Array &3 ()\n-        'user_file1' => Array &4 ()\n-        'user_main' => Array &5 ()\n+        'user_main' => Array &2 ()\n+        'user_file1' => Array &3 ()\n+        'user_file2' => Array &4 ()\n+        'user_file3' => Array &5 ()\n     )\n )\nI see that you gonna fix it, and we thank you for that.\nAlice is a great tool !. ",
    "bastos71": "Concretly what should I do ?\nCan you provide me an example ? . okay I better understand now ! \nI'll take a look and give you a feedback asap :). Hi @theofidry,\nSorry for the late answer.\nIn fact after analyzed the situation with my team, we decided to migrate to raw Doctrine Fixtures, still using Faker to create data.\nI still think nelmio/alice is a good bundle but for simples fixtures, for more complex ones I think it's a better idea to use simply DoctrineFixturesBundle\nThx again for your time :). ",
    "segidev": "Right, i missed that this version is pretty out-dated.\nThank you for the response. ",
    "smilesrg": "https://github.com/nelmio/alice/issues/513. ",
    "mbabic131": "@theofidry Yes, I will provide a PR.. ",
    "leonardbos": "This bug appears to be only occurring when passing arguments in a single line.\nyaml        \n__construct:\n    - <numberBetween(0, 10000)>\nUsing the multiline notation seems to work properly.\n. > that is... really weird, from where does the error comes from exactly? Alice or the Yaml parser?\nThe error comes from Alice:\ntxt\n.....FFFPHP Fatal error:  Uncaught Nelmio\\Alice\\Throwable\\Exception\\FixtureBuilder\\ExpressionLanguage\\MalformedFunctionException: The value \"<numberBetween(0\" contains an unclosed function. in /home/lbos/projects/client-log-entities/vendor/nelmio/alice/src/Throwable/Exception/FixtureBuilder/ExpressionLanguage/ExpressionLanguageExceptionFactory.php:59\n. > Does:\n\nyaml\nclient_contact_log (template): \n    __construct: ['<numberBetween(0, 10000)>']\nWorks?\n\nNo, this has no effect, the same error appears as before. . ",
    "tigitz": "Sure, I will also implement those tests as soon as the proper regex is defined :+1: . @theofidry tests added and regex improved.\nI thought about implementing tests for double quoted string, something like <function(\"foo\\nbar\")> to make sure the argument value is equal to:\n```\nfoo\nbar\n```\nbut that would be OS dependent, on windows it would be equal to foo\\nbar.\nI could put some OS checks before yielding the expected value if we want to go for this kind of test.\nwdyt ?. @theofidry Good thing I checked, doing <function(\"foo\\nbar\")> didn't produce value:\n```\nfoo\nbar\n```\nas argument.\nThis is now fix.\nI'm not fund of the logic used here: https://github.com/nelmio/alice/pull/967/files#diff-0f3f5a40fb741a97d667ac735b3493e1R121 \nBecause in the end it tests twice the fact that the string is double quoted which is not optimized. I tried separating the single quote and double quote processing logic without much success :disappointed:.\nIf you have any guidance I'm open for suggestions. If it seems OK to you as it is then I think it's good to merge.\n. Hey @theofidry, when you have some time it would be cool if you could check the PR. I think it's in the state where it could be merged.\nThank you :wink: . Alright, to be clear does that mean I should do 2 separate test functions for both \\n and \\r\\n case ? Should I check the OS to make sure it's Windows before running the \\r\\n case ? Also it seems that mac has \\r line breaks should I update the regex to this : https://stackoverflow.com/a/1331840 ?. ",
    "martingold": "I know you have a lot of work and you do not have to invest your free time/money into this issue :). What I wanted wanted to know is why there is NativeLoader $fakerGenerator argument in constructor and what is its purpose and some general direction how could i help. Thanks. My initial guess was right. The AliceProvider is not added to Faker\\Generator when passing custom instance. \nNot sure if the $this->fakerGenerator->addProvider(new AliceProvider()); should be implemented somewhere in NativeLoader constructor or just to mention in docs the need to add AliceProvider to passed Faker\\Generator manually if you want to use <current()> provider.\nEither way, I am ready PR to send with required changes. Thanks!. ",
    "gonzalezlopezjm": "Sorry, I sent the YAML with and error, the correct YAML is:\nAppBundle\\Entity\\Media:\n  media-1:\n    __factory: { AppBundle\\Fixture\\Factory\\MediaFactory::create: ['<image()>']}\nAnd like you indicated with the quotes works correctly, is enough for me that I think that is a good idea to update the documentation accordly\n. ",
    "pifaace": "I confirm, I created a custom provider and a fixture like this : \nyaml\nvalidationGroup1:\n      validationGroupId: 'validationGroup1'\n      name: 'sweet validatonGroup1'\n      persons: <personCollection([@johnDoe, @janeDoe])>\n      orderables: '<orderableCollection([@flyer])>'\nand the arg in my personCollection method is an array of \"FixtureReferenceValue\". It doesn't convert the references to object. Ok so I put a xdebug breaking point there\nIt is triggered and the variable $providers found my provider but still the same error message . Here, what I understood :\nat first the compiler pass get the fakerGenerator by its name there\nThen, it get the tagged services into  $providers and saves them to \nphp\n$fakerGenerator->addMethodCall()\nok so far.\nBut the next step is a little bit weird in my opinion. \nThe addProvider method is called from Factory class\n```php\npublic static function create($locale = self::DEFAULT_LOCALE)\n    {\n        $generator = new Generator();\n        foreach (static::$defaultProviders as $provider) {\n            $providerClassName = self::getProviderClassname($provider, $locale);\n            $generator->addProvider(new $providerClassName($generator));\n        }\n    return $generator;\n}\n\n```\nMy question is, why do you do a new instance of Generator() instead of get it from symfony container ?. In the create methode you instantiate a new Generator() instead of \nphp\n$generator = $container->get('nelmio_alice.faker.generator')\nI don't understand why. Yeah I just understand that its not a part of your library lol.\nI continue my investigation, I saw on this method https://github.com/nelmio/alice/blob/master/src/Loader/NativeLoader.php#L581\nthat you get a instance of generator and then add your AliceProvider manually.\nIs that the solution that I should do ? Because if a extend your NativeLoader and add manually my providers like this : \n```php\nclass AppNativeLoader extends NativeLoader\n{\n    protected function createFakerGenerator(): Generator\n    {\n        $generator = parent::createFakerGenerator();\n        $generator->addProvider(new PersonProvider($generator));\n        $generator->addProvider(new DeliverablesProvider($generator));\n        $generator->addProvider(new OrderableProvider($generator));\n        $generator->addProvider(new TypeAttributesProvider($generator));\n    return $generator;\n}\n\n}\n```\nobviously it works. Ok I see ! So in this case : \n\nSo you either get your Faker generator instance from the container in which case it should already be configured\n\nyou said that I don't need the NativeLoader\u00a0? Sorry for my misunderstanding this is not clear in the documentation\n. okey thanks a lot for your explanations ! I close the issue. ",
    "mlojewski": "Hi @theofidry Thanks a lot, switched the entity name and works like a beauty.. ",
    "daniel-iwaniec": "Currently I'm forced to implement this class by myself in my project and override \\Nelmio\\Alice\\Loader\\NativeLoader::createFixtureDenormalizer.. There wasn't any tests for ReferenceRangeNameDenormalizer at all so I didn't mind not covering it.\nI've added ReferenceRangeNameDenormalizerTest similarly to SimpleDenormalizerTest with some basic tests as well as specific test for adding template flag to fixture.. I've added integration test you've asked for.. "
}