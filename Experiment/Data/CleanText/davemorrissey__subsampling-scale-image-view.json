{
    "davemorrissey": "The NoSuchFieldError is a problem only on SDK 10 - I missed the fact that SERIAL_EXECUTOR is only available in SDK 11. Because synchronisation is now used to prevent the decoder being destroyed while it's in use, this is now redundant so I've removed it.\nThe NullPointerException seems to be caused by your activity being paused before the view has initialised. I have put in a null check to guard against this, so getCenter will return null.\nThe OutOfMemoryError is impossible to completely prevent, as the VM memory budget is unknown, so the design of this class needs adjustment to minimise them. To help me do this, can you attach the image you're using, and if you don't mind, your APK as well?\n. I have also changed the way DemoActivity preserves the center on rotate because PointF did not implement Parcelable at SDK 10, you'll need to update yours as well.\n. I'm guessing your PNG has an alpha layer. Use an image editor to remove the\nalpha layer, because this will halve the amount of memory required to\ndisplay it.\nIf that doesn't work, you can try using the setMinimumDpi method so that on\nhigh resolution devices less image data is loaded. Try a value like 160.\nCheers,\nDave\nOn 24 July 2014 06:27, tusharsingh1991 notifications@github.com wrote:\n\nHey there ..\nI am MemoryOutOfException when i am trying to load heavy images. Which is\nin png format.\nplease help me with this.\nThanks in advance.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/1#issuecomment-49968960\n.\n. Hi Tao, this is on my wish list but unfortunately it'll take a while to do because it means rotating each tile individually and the grid as a whole. I may be able to that with matrices. If you are using the view full screen with no action bar or other links, you may be able to read the EXIF yourself and request an orientation change accordingly, but this might make the image upside down in some circumstances. I have a lot of other work on at the moment but will take a look at this as soon as I can.\n. I finally found some time to work on this and have implemented manual rotation for assets and external files (with support for setting rotation before the image is loaded or while it's displayed), and automatic rotation of external files only based on EXIF data. EXIF can't be read from assets as far as I know, but you'll know the orientation of your own assets.\nSorry this has taken so long!\n. I've changed the view to handle detection of click and long click, so you can now set an OnClickListener and it won't stop pan and zoom working. There's a small tolerance for movement of the finger during the tap, so panning is not started until the finger has moved more than that tolerance.\n. This would be a difficult thing to get right within the image view, it needs to capture most touch events but detect the subtle difference between a swipe and a drag (based on where the swipe starts). I think this will be a difficult thing to solve in a generic way and don't have time at the moment, but you could experiment with changes to the gesture detector and onTouchEvent method to see if you can get it to behave the way you want. The code I've provided is a starting point only, and not intended to be a complete solution, so feel free to change it as you need.\n. Thanks to @kyze8439690 for that suggestion. I've updated the touch event handling to allow events to bubble up to the parent only if a pan or zoom is not in progress, so when zoomed in you need to pan to the edge of the image, then lift and start another drag/swipe to activate the pager.\nThe sample app shows this working.\n. Copyright declaration added.\n. Do you mean huge as in file size or huge dimensions, and what image format is the file? As the notes say, displaying an image with very large dimensions is slow but there's little or nothing that can be done about that.\n. This view class is intended for displaying images that are too big to hold in memory as a Bitmap object, so if you're creating a Bitmap and the app doesn't crash, you don't need subsampling or tiling to display it. Have a look at some of the other image view implementations available that simply do pinch and zoom. I'll close this issue because it isn't the intended use of this class.\n. I had a few errors like this when I was developing the view, and solved them (I thought) by modifying the threading and task execution, so that the view would never try to render a bitmap that's been recycled. That stopped errors like this happening for me, but it's possible there's another cause of the same message or a mistake that allows this to still happen.\n\nDoes it happen very regularly, and are you working with an unmodified copy of the code?\n. Fixed, thanks for letting me know. A quick tip - you can call isImageReady() before methods like this one so you know the returned values will be valid.\n. The checks that the WeakReference objects are not null should be redundant but they're harmless, and I also check that the referents are not null. I avoid the pattern you've suggested because that requires get() to be called twice, and there's no guarantee the referent won't be garbage collected between calls.\n. Hi Ed, yes something like this was on my to do list, but I haven't decided how deep the tear down should go. My thoughts are it will recycle all the bitmaps and the decoder, and hopefully have a matching restore method that can restore all previous state, which would make it suitable for a gallery pager where you want to release resources temporarily.\nWhat was the use case you had in mind?\n. Okay, I'll have a look at this. I've not seen any crashes caused by moving between activities or fragments, but it must be something about your design that's different to what I've tried.\n. @anjonadmin This library was originally intended for displaying images that are too large to be held in memory as a single Bitmap object, so it isn't possible to do that. There are other libraries that can probably do what you want.\n. Public recycle method now exposed.\n. Unfortunately I can't give you an answer to that, it isn't something the view was designed to do. It has to have just one image file. If putting the individual pages in a view pager isn't good enough (and I guess it isn't because you want the facing pages) then joining them as you currently are is the only option.\nI did consider using a lot of the same code to build a view that would show tiled images like Google Maps used to be, but either building that or converting this view to support it would be a lot of work. \n. Do you mean you'll create the single bitmap then use that on the image view, so you don't have to write it to a file? If your images are small enough that you can fit them both in memory at full quality, have a look at one of the other pinch to zoom image implementations. This one is best for images that are too large to be decoded at full size.\n. It isn't possible to create subsampled tiles from a Bitmap you have in memory, and if you can hold it in memory there's no need to subsample anyway. It won't be possible to change this view to support the display of Bitmaps directly so the solution you have of combining them to one file is the best one.\n. It sounds like the solution you already have is the best one available. Because changing this view to support a grid of different bitmap files involves a significant rewrite, and isn't something it was designed for, I'm going to close this issue. I'm sorry I can't be more help, but it would take weeks to build what you need. \n. This class is designed for displaying bitmaps that are too large to fit in memory, so it can only display images from an external file or asset, because subsampling and loading tiles isn't possible with other methods. There are other similar classes available that will do pinch to zoom using a Bitmap object, and support display from a URL. I may write another version of my class that has pinch to zoom without subsampling, but that will take a while.\n. This is an interesting problem! SubsamplingScaleImageView was designed to be extended and supports subclasses overriding event handling. You can see this in the demo class FreehandView, and I've extended the class in my own apps with some quite complicated drawing utilities. I never intended for the class to have its superclass changed, so there was never any need to pass events up to the base class.\nIs it possible for you to subclass instead of superclass? I could try to make it more super friendly but the event handling is very delicately balanced at the moment, so that it can support view pagers, swipe, pan, pinch, momentum, and easy subclassing, and I'm not sure I could change the standard class without causing problems.\n. I've just looked through the commit history to remind myself why that return statement is there. I added it because if the event is bubbled up to the superclass, the click and/or long press behaviour can't be overridden by my class. It was necessary to add my own long press timer that could be cancelled if there's a pan or pinch event, and also to handle the clicks myself. Unfortunately, changing the class to call super.onTouchEvent will break those and cause odd behaviour. That won't matter to you if you're handling event in the superclass.\n. Okay, that should work but I would have thought keeping the pan and zoom in sync would be more complicated than subclassing.\nTake a look at this class for an example subclass that allows drawing: https://github.com/davemorrissey/subsampling-scale-image-view/blob/master/sample/src/com/davemorrissey/labs/subscaleview/sample/extension/views/FreehandView.java\n. Closing because I can't fix this and it isn't what the class is designed for, but let me know how you get on.\n. Good spot! It looks like the double tap leaves the GestureDetector in a broken state where it will not detect the next fling. As this is core Android code, I can't properly fix it, so instead I know replace the GestureDetector instance with a new one after double tap, effectively resetting the state. This seems to solve the problem.\n. Hi Michael, unfortunately I don't have an easy answer to that. Having arbitrary rotation breaks most of the rules on which the view is built, from bounds detection to tile sizes and subsampling. It would take a vast amount of work to rewrite it to support this. Do you need the subsampling/tiling behaviour for your app, or might a much simpler alternative view work better for you?\n. You can reduce the file size of a PNG by indexing it, and reduce the memory usage by removing the alpha layer and loading it as RGB_565. Most phones running SDK 15+ can probably handle an image that big, but some cheaper ones may not, it depends on whether they only support bitmaps up to 2048px (the minimum required).\n. I don't use photoshop so I don't know what it's options are. If you were using a floor plan that only had a few colours, indexing it should not reduce the quality, but it won't look good for a full colour plan. Either way, remove the alpha layer to reduce the memory used.\nThe view can't automatically restore zoom after the asset is changed because there's no guarantee the values would be valid for the new one. You can do it yourself by calling getState() before changing the image, then including the state as an argument with the new asset in one of the setImage methods.\n. Are you happy for me to close this now?\n. If you fork the project or copy the class into your project you can easily change the initialiseTileMap method to use different tile sizes. The current code has carefully optimised tile sizes so I don't want to add public methods for this. As long as you set the sRect property on each tile, the rest of the code will work without changes.\n. Which code are you having trouble understanding? SubsamplingScaleImageView or one of the sample classes? If so which one?\n. Unfortunately it's so complicated it would take hours to explain. If you would like to try simplifying it, fork the project, and experiment with changes, however most of the complexity is necessary.\n. I hadn't anticipated the need for this as you wouldn't normally show an image gallery this way, but as it's a useful thing to have and pretty easy to add, I've just added basic support for it.\nJust add this line before you set the image: imageView.setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_CENTER_CROP);\nI haven't added XML attributes or support for any of the other scale types, they can be added later if they're needed.\n. Whoops, sorry. Done.\n. You can determine which part of the source image is visible on screen using the viewToSourceRect method (which is private but you can reproduce it from a subclass easily), passing a rect that represents the full size of the view - new RectF(0, 0, getWidth(), getHeight()). Using this, decode this part of the image at any resolution you want using a BitmapRegionDecoder and apply your own overlays on top.\n. You have to do this manually in a subclass. Decode the image yourself and draw the overlays on it. All the methods you need to do this are documented in the wiki. Bear in mind you need to be careful not to run out of memory.\n. I'm seeing intermittent activation of the pager with a particular speed of swipe so it's difficult to reproduce, but I'm quite sure it's a new problem with this change. The change is an improvement apart from that, so I'll do some more testing and try to refine it.\n. I'm currently reviewing the suggestion in #34 and it seems the best solution so far, so I'll close this request and commit the final solution ASAP.\n. Hi Ali, sorry for the delayed reply, I just returned from a holiday. You can do this easily with the following code...\nimageView.setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_CENTER_CROP);\nimageView.setZoomEnabled(false);\nYou will need to ensure the image always has a wider aspect ratio than the screen, even in landscape mode (if you allow rotation), otherwise the image will pan vertically as well.\n. I'm not sure exactly what's causing this, so I'll do some experiments saving JPEGs with different settings to see what triggers it. The class uses BitmapRegionDecoder and does nothing special with the images, so I'm also looking for known bugs with that class. I suspect it's something to do with the low quality of the image, but ImageMagick identify shows many differences between this image and others that work properly, so it could be anything.\nIs the image embedded in your app, or can you save it in a different format?\n. I've narrowed the cause down to the JPEG subsampling of this image. ImageMagick reports the subsampling is 2x2, which is quite unusual and not one of the standards any of my image editors will save. I was able to reproduce the problem by using ImageMagick to convert an image to 2x2 subsampling, and make it worse by changing the sampling to 4x4, which gave me one quarter of the screen filled with groups of four interlaced lines.\nI have tried changing the settings used to decode images but this makes no difference, so it must be a bug in BitmapRegionDecoder, which I have no workaround for. I will report the bug to Google, and see what happens, but it will be years before a fix is rolled out. It's quite surprising that no-one has reported this bug as far as I can tell - perhaps that means it is very rare for a JPEG to be compressed this way.\n. Bug reported to Google: https://code.google.com/p/android/issues/detail?id=76976\nMy experiments with ImageMagick suggested that only a greyscale image can be converted to a subsampling factor of 2x2. Colour images were always converted to 2x2,1x1,1x1 and greyscale images were by default saved as 1x1 by GIMP, and both of these formats are displayed correctly.\nIt would be interesting to know how the image was saved, if you're able to contact the artist or know who edited it. I think this will be an extremely rare problem.\nUnless you have any other questions, I'll close this bug as wontfix, because I can't fix it.\n. I have extracted the bitmap decoding into an interface to allow an alternative decoder to be easily substituted in. A basic implementation built on RapidDecoder is included in the sample library, and it displays this image properly. See the updated README for more details.\n. It seems that BitmapRegionDecoder's handling of grayscale images is very badly broken. The last issue #22 reported a similar but different rendering problem with a grayscale JPEG, and I've isolated this problem to BitmapRegionDecoder as well. Your image displayed properly on my phone (Android 4.1.1) but not on my tablet (4.4.2). If I changed the image to PNG, or color JPEG, it was displayed properly.\nI will have to raise another bug with Google but it may not be fixed for years. If you can convert the image to another format, that's your best option. I have tried changing all the options for the decodeRegion call but none of them fix this issue, so unfortunately I don't have any other workaround.\n. That's a good find, the skia library didn't come up in my research. If you've found reports of this bug could you send me a link?\nIt is possible to convert the image by loading it as a bitmap (it appears other Android classes are unaffected), and saving it again. This is slow. However, I don't know how you can tell if the image is grayscale before doing this, and SubsamplingScaleImageView is designed for displaying bitmaps that are too large to load as a complete bitmap, so I don't have a good solution.\n. This is beyond my experience! Are you sure this libpng class is used for JPEGs as well? So far I've had no reported problems with PNGs, only JPEGs.\n. Closing issue as wontfix because it's a flaw in Android I can't work around.\n. Thanks, that looks like a good solution. If you have time, could you post a couple of notes and a code sample showing how you use this library with SubsamplingScaleImageView, so I can post it on the readme?\n. I assume the _source field is a string?\nBecause this doesn't use the sample size it will create tiles that are higher resolution than they should be. The RGB_565 option is also necessary to halve memory usage for JPGs at least (it doesn't work for PNGs with an alpha layer). This solution will work for some images, but for larger images on low memory devices you're likely to find this change makes the view crash with OutOfMemoryError.\n. I have extracted the bitmap decoding into an interface to allow an alternative decoder to be easily substituted in. A basic implementation built on RapidDecoder is included in the sample library, and it displays this image properly. See the updated README for more details.\n. Your solution sounds okay however your onAllTileLoaded method will be called any time all the tiles on screen are loaded, for example when the user zooms in or out prompting new tiles to be loaded. You can't guarantee that the first time it's called, the user hasn't already zoomed in and you won't get the screenshot you want. Also bear in mind that invalidate() queues a redraw for some later time, so when your method is called for the first time the screen will not yet show the new tiles. If you need to screengrab the view, you should use the setZoomEnabled and setPanEnabled methods to prevent interaction until the tiles are loaded.\nYou can improve your code by only checking whether the base layer tiles are loaded, though you will still get more callbacks when the user zooms and pans:\nif (tile.sampleSize == fullImageSampleSize && tile.loading) {\nBecause this isn't a generic solution I can't include it in the library, but I will think about what callbacks users might need. I'm planning to add a listener interface but I'm too busy at the moment!\n. Hi Cristian, yes this is quite easy. All you need to do is extend the view class, override the onTouchEvent and onDraw methods, and add your own code, making sure you call the superclass methods at the right times. You shouldn't need to fork the project to do this, it's cleaner and easier to create a subclass than it is to change SubsamplingScaleImageView, but there is a chance you'll hit an obstacle and need to use your own fork. I've created a few subclasses that do exactly what you want, but they're commercial so I can't share them.\nFor a starter, see the sample class here: https://github.com/davemorrissey/subsampling-scale-image-view/blob/master/sample/src/com/davemorrissey/labs/subscaleview/sample/extension/views/FreehandView.java\n. Unfortunately I can't give you an answer to that, I've never tried it. It would probably involve some hacking to create views with absolute positions on top of the image view that move as it is panned and scaled, and I think you will have problems with gestures intended for the image view being intercepted by the buttons.\nMaybe as an alternative your subclass could overlay a deletion area on top of the image when a pin is long pressed, so a pin can be dragged there?\n. Hi Ali, have a look at the animation demo from the sample class. You can animate the image position based on gyroscope data using code similar to this.\nhttps://github.com/davemorrissey/subsampling-scale-image-view/blob/master/sample/src/com/davemorrissey/labs/subscaleview/sample/animation/AnimationActivity.java\n. @levelibeeka's answer is best, and the only solution if you don't know the size of the image. If you can guarantee it isn't too big to hold the entire decoded bitmap in memory on any device, you can decode it and pass the Bitmap object to ScaleImageView.\n. I've tried this change but it doesn't act as I want it to.\nIf you start panning an image and reach the edge, the next image jumps suddenly into view part way across the screen - if you have moved your finger 100px during the pan and hit the edge, the next image immediately appears 100px across the screen, when only the first pixel should appear.\nBecause I couldn't find the solution to this when I worked on pagination support, I made the decision to make the user scroll to the edge in one pan, lift their finger and swipe again to see the next image, and I want to keep that behaviour.\nI'm reviewing the other suggested changes to pagination, and the change suggested in #34 is the current leading candidate. You could try that and see if it helps.\n. Please could you attach the converted JPG?\n. This image is CMYK, if you convert it to RGB it should work fine.\n. There are gradle scripts, and a built version of the library in the library folder, so I'm not sure what you mean?\n. I would need to publish the library to a maven repository to support this, and there are some hoops to jump through for that to happen, it's also more work to maintain. I'll consider this for the future but unfortunately don't have time to set it up now.\n. Okay, there are enough people using this now that I should release it properly! I'm too busy right now but will do it as soon as I can.\n. I have published the library aar file to the central maven repository with coordinates com.davemorrissey.labs:subsampling-scale-image-view:2.2.0. My apps are using a mix of old build systems and SDKs so could someone please confirm everything works as expected?\n. Pom bug fixed and 2.2.1 is deployed. I've tested this with a new gradle project.\n. Opened #402 for sources. There's nothing new to release at the moment.. I've had a few bugs reported that I traced backed to skia and I agree it's pretty poor and getting worse, which makes my library unreliable for developers who don't control the format of the image they're displaying. This seems like a good solution. I'm busy starting a new job at the moment but will look at this when I can.\n. I've been working on this but I've found that RapidDecoder has serious problems decoding JPGs using its own decoder. With large images it runs out of memory when loading tiles, which never happens with BitmapRegionDecoder. Also, when loading a tile that isn't at the left hand edge of the image, it decodes the wrong part of the image. That means RapidDecoder is unusable when you don't know the type or dimensions of the image, a common problem with gallery browsers.\nWith that in mind, I'm not sure there's much point in doing this, unless there are other libraries that have better JPG support. I will complete the work anyway and put it on a branch for review.\n. I've pushed changes to the branch decoder-interface. You can implement the ImageRegionDecoder interface (your class must have a public default constructor) and call imageView.setDecoderClass(MyImageRegionDecoder.class) to use it. There's an example implementation using RapidDecoder here but it does have critical bugs with JPG decoding as I mentioned above.\n. The region decoding bug has been fixed. RapidDecoder is still slow with large JPGs and can run out of memory, but it does offer better format support. Changes merged to master and released (2.3.0). See the README for details.\n. This looks good, I'll do some more testing before committing it.\n. I've noticed this change causes the same problem I've described in #29 - a pan gesture can cause the next image to suddenly appear half way across the screen. Because I couldn't find a solution for this, I decided to make it necessary to pan to the edge of the image, lift and pan/swipe again to move to the next image. Unfortunately that doesn't work reliably, so I'll try to work out why.\n. Yes I realised the same thing last night, I'll try this fix later.\n. I've made this change and another adjustment that detects a horizontal one finger move at the edge. This greatly improves the behaviour but there may still be some tweaks that could perfect it.\n. Yes, it's optimised for images like that.\n. Please attach the image.\n. I can't look at this in detail until later on, but that error usually means the image is in a format Android's native decoder cannot handle. One possibility is it's in CMYK format, so try RGB and make sure it is not indexed.\n. The image didn't work for me either, so I opened it in GIMP, and saved it again with no changes. ImageMagick's identify command showed no differences in attributes between the original and new versions, but the new version worked fine. BitmapRegionDecoder and the Skia library it uses are quite unstable but sometimes re-exporting an image like this can fix problems.\nAlternatively, I've added an option to use a custom decoder, but the only suitable decoder I know of (RapidDecoder) doesn't handle this image well because it's too large.\nThis isn't a bug in my library, it's a problem with Android.\n. An error listener is of limited use because many of the decoding problems the skia library has don't result in any error, they just return a corrupt or blank image, and there's no way to detect this. Please see my comments above, you can simply load and save the image again in another editor, or replace the decoder implementation.\n. The decoder silently fails and returns a corrupt or blank image in more than half the cases I've seen. I don't want to add an error listener when there's no way to detect the majority of errors, but you could add this to your own fork if you need it.\n. Unfortunately I can't help with this, my library is for displaying images, not writing them. I recommend asking this question on stackoverflow.\n. Hi arpruss, there is a trick you can use to get this effect without any changes to the view. Using a relative layout you can have an ordinary image view that displays a low resolution preview with scale type CENTER_INSIDE (or FIT_CENTER), and overlay subsampling on top in exactly the same place.\nThe subsampling view is transparent while loading, so the preview will show through until the loading is complete. After that, the subsampling view's image should appear in exactly the same place at minimum scale, so the preview can't be seen. You could also have a loading message or graphic between the preview and the subsampling view.\nThis would look roughly like this:\n<RelativeLayout>\n    <ImageView android:src=\"@drawable/preview\"/>\n    <TextView android:text=\"Loading...\"/>\n    <SubsamplingScaleImageView/>\n</RelativeLayout>\n. That approach would allow interaction earlier but unfortunately there are complications. Until the BitmapRegionDecoder is initialised - which accounts for around half the time it takes to display the base layer - the dimensions of the full size image aren't known so it isn't possible to pan and zoom. That's why I'd normally recommend using a preview underneath the view - blocking gestures until it's loaded could be an advantage.\nThe workaround for this would be allowing the developer to declare the dimensions, which is okay as long as they provide the right values and a preview image that closely matches the w:h ratio. This feels like a hack to me, and it might be fragile.\nI'd like to avoid over-complicating the view (well, more than I have already) and want to be sure that new features are generic enough for everyone, and I'm not convinced I have the right solution to this problem. It needs more thought.\n. The two views would not be linked so one would not scale the other, and yes, the lower one would not receive touch gestures. This would look and behave the same as an ordinary image view underneath.\n. I've been experimenting with built in preview support, and it will make the view a lot more complicated and less stable. It breaks rules about which fields can be trusted at each phase of the view's lifecycle, and that makes troubleshooting problems much harder. I'd rather not add this feature, and I think the static preview underlay is the best I can suggest.\nIt might be possible to overlay the preview in a ScaleImageView with its maxScale set a high value, then when the full image is ready, hide the overlay and use its scale and center to calculate a new scale and center for the full image.\n. Not a bad idea, could be useful for some other things, but it doesn't help in this situation. It wouldn't enable scaling of the image before the dimensions of the full size image are known, so it doesn't improve on the suggestion of using a preview image positioned underneath the subsampling view.\n. Yes, provided the developer knows the size of the full size image they can provide that along with a preview, however I was investigating this as a solution and it complicates the view significantly, adding several possible loading states, and size values that can't be trusted. I'm still planning to try this approach anyway but don't have the time at the moment.\n. A mostly untested cut of this feature is on branch preview-image. This needed significant refactoring but also provided an opportunity to combine the two view classes into one. There are some quite minor backwardly incompatible changes so it will be released as a major version bump once I've finished testing.\n. Released in v3.0.0.\n. BTW LunarMap is a great app and I'd like to include it on the readme if you'll be using this view and that's okay with you?\n. The sample app has a larger PNG than this and I've never had a crash reported, so it should be possible to display this image without any problems. Please could you attach the image so I can check the format?\nIs there anything that the affected devices have in common? Maybe a particular version of Android, or all have high density or low density screens? Tablets or phones?\nIf it's mostly high density screens, you could reduce the amount of image data loaded using setMinimumTileDpi(180). I'm not sure how effective this is, because these devices should have enough memory for big images.\nWhere you're setting the double tap zoom scale you could also use the density independent method setDoubleTapZoomDpi(100) so it will be consistent across all devices, though it's unlikely this causes errors.\nPerhaps most importantly, I notice you're using setImageResource, which was only added to SubscamplingScaleImageView a couple of weeks ago. Make sure you aren't using ScaleImageView, which is only for smaller images. You could also try moving the image to assets, that may be more reliable.\n. This PNG doesn't have an alpha channel so that's one possible cause eliminated. PNG is the best format for an image like this, and I don't think it requires any more memory than a JPG.\nYou don't need to set doubleTapZoom, it's defaulted to 160dpi which should be okay for most apps. Max scale defaults to the same. That means that when fully zoomed in the image is at 160dpi so even small text on it should be readable, but it won't be completely sharp on a higher density screen.\nIt does seem to be newer and higher resolution devices affected, though the G4 is not all that new.\nI think the best suggestion I have at the moment is to move the image to assets, and reduce the minimumTileDpi to 160.\n. Remember to move the image to assets, the option to display from resources is new and relatively unproven.\nIf the stack trace is consistent, could you paste it here?\n. That's good news, and quick feedback too!\nThe default behaviour is to fully zoom in to the max scale on double tap. To change that, you need to set the double tap DPI to a higher value than the minimum DPI (minimum DPI is max scale expressed in a density independent way). You can experiment with these values to get the effect you want.\nsetMinimumDpi(160);\nsetDoubleTapZoomDpi(200);\nBTW if your app is public, let me know if you'd like me to add it to the readme \"hall of fame\".\n. Really nice app :-)\nAs you know the dimensions of your image, it's quite easy to set an initial zoom. You just need to calculate the scale you need based on the width and height of your view, and the width and height of the image, then call setScaleAndCenter immediately after setImageAsset. If you're declaring the asset name in your XML, you may need to move that into code to make this work. It will take a bit of experimentation on screens of different densities to get the effect you want, there isn't really a universal value for 15% zoom.\n. I might be able to add this soon, but would a margin not do the same job?\n. Okay, that makes sense but I'm not sure this is how I'd interpret padding. That said, there's no more logical behaviour for padding on this view (since it doesn't support child views or display text) so I might be able to implement this. I'm snowed under at the moment so I have an alternative, which I haven't tried but I think will achieve this.\nI assume the view is the full size of the screen whether the chrome is displayed or not, and the chrome is an overlay. This assumes the header and footer are the same height.\n- Extend the class\n- Override onImageReady\n- When onImageReady is called, calculate a scale that will reduce the image to the correct size using the image dimensions, view dimensions, and header and footer height.\n- Set the minimum scale and current scale to this value.\nfloat scale = Math.min(getWidth() / (float) sWidth(), (getHeight() - (2 * [headerHeight])) / (float) sHeight());\n    setMinimumScaleType(SCALE_TYPE_CUSTOM);\n    setMinimumScale(scale);\n    setScale(scale);\n    invalidate();\n. If that doesn't work, take a look at the other public and protected methods, because I'm reasonably confident there's a solution that doesn't require changes to the class itself.\n. I deleted the first method from my comment because I realised it wouldn't work, although not for the reason you've described.\nCould you send your layout file and the subclass for the second method?\n. Thanks for that, there's just one thing I need to know, and that's how you hide the chrome and what happens to the image view when you do. When the chrome is visible is the view sized to fit within it then resized to full screen on tap, or is the chrome an overlay so the view is the full size of the screen whether the chrome is visible or not?\n. I've spotted a bug in the setMinimumScaleType method - it results in the view redrawing using the initial value of minScale which is zero, so key state variables get set to NaN. I'll fix this, but there's an easy workaround for you - just move the setMinScale line above setMinimumScaleType.\nonImageReady is called off the UI thread to make sure that if subclasses do any heavy lifting in that method, the rendering is not blocked.\nA bit of additional hacking is required to stop the image from appearing briefly at full size before the padding takes effect. This appears to work well enough: https://gist.github.com/davemorrissey/9133860908fb4977644c\n. No worries. I'll think about how to support padding, the thing I need to work out is how it should behave if top padding is different to bottom padding so the image starts off-centre. I may not support that.\nWould you like your apps listed in the readme?\n. I have added padding support (including asymmetric padding) to the view. I'll release a new version in a few days.\n. I've already pushed the code changes, but not built a new release yet. See https://github.com/davemorrissey/subsampling-scale-image-view/commit/e88575898e49725160685298db718b1bae6b36db\n. Hi Luis, I had a similar discussion a couple of weeks ago and decided not to do this, because it's very common for the decoder to return a corrupt image, which can't be detected. This seems to happen as often as exceptions. I didn't want to add a feature that only works half the time.\n. Thanks, extending a local copy is the best option for now. I will keep this under consideration. The previous suggestion was to put it on the tile decoder, which was going to be particularly unreliable, and your suggestion of putting it on the init task make more sense, mainly to capture the cases when you supply a file that isn't an image (which could happen in things like a reddit browser).\n. I've implemented an error and event listener interface now.\n. Released in v3.0.0.\n. I'll try this but I suspect making a significant dent in the number of Points and Rects created will take a lot of work. Are you seeing performance issues caused by this?\n. Thanks for the looking at this, I'm interested to see what you come up with but there's a chance I won't accept the PR. It may quite significantly affect the design of the class and as I'm pretty much the only contributor I need to make sure I understand everything about how it works! No-one has reported a performance issue yet, my own phone is three years old and has no problems, but I do agree the object creation is wasteful.\n. I'm not sure whether a large number of small objects or a small number of large objects are GC'd more efficiently but it's worth remembering that this view constantly loads and discards tile bitmaps, especially on low end devices, so it does trigger regular GC, and the extra object allocation may not be particularly significant in comparison. I've no way of knowing until I try it.\n. That used to be the case but according to the docs, bitmap pixel data has been stored in the heap since API 11. For an image large enough to require tiling, GC triggered by bitmap recycling will vastly outweigh that caused by other objects, but for smaller images where only one bitmap is loaded the other objects become a bit more significant. However, Android's concurrent GC may make the pauses unnoticeable.\nI will take a look at this when I can, but it's not critical because no-one has reported any issues with pauses, and I'm not sure it will make any visible difference to the majority of users.\n. Done. I won't release this for a while, it needs more testing.\n. Released in v3.0.0.\n. Hi Nicklas, you need to extend the class and use the sourceToViewCoord method. You can see a complete working example in the demo app, using this class: https://github.com/davemorrissey/subsampling-scale-image-view/blob/master/sample/src/com/davemorrissey/labs/subscaleview/sample/extension/views/PinView.java\n. This view has limited support for wrap_content, because wrapping the content has no obvious meaning when the content is scalable. If you use wrap_content for both width and height, it will scale the view to the full size of the image at 100% scale (1:1 pixels) once the view has loaded. If you use one fixed dimension and one wrap_content, it will resize the view to have the same aspect ratio as the image. In either case, the view fills its parent until the image size is known - it is not possible to use zero width or height because Android will not attempt to draw the view.\nYou have a few options:\n1) Fix the width with match_parent and let the height scale with wrap_content.\n2) Put the view inside another view that has the dimensions you want, and set it to fill_parent for both dimensions.\n3) Create a subclass and override onMeasure to provide the behaviour you want.\n. The two view classes in my library do not extend ImageView so they will not work directly with universal image loader. To display an image from the web you should first save it to local storage.\n. Thanks! This looks good to me. Unfortunately I can't merge it because I've made a major change to the view on the preview-image branch that this can't be merged with. However, what I can do is re-implement your change on my branch. This won't be entirely straightforward because I've merged the two views and added preview functionality, so I may need to implement the region selection for all three methods of displaying an image.\nI'm curious what you needed this for and why you aren't displaying the whole image?\n. Okay, that makes sense. Just so you're aware, it takes longer to initialise the BitmapRegionDecoder for a very large image, so sometimes it's better to work with smaller images. It looks like that doesn't suit what you're doing though. I'll try to get this merged into my changes for the next release as soon as I can.\n. Released in v3.0.0.\n. I'm not sure what you mean. Are you asking how to add it to your project? Or how to set up an IDE? I don't know a lot about the Android gradle tools.\n. I haven't seen this error before, I've used that attribute for a while and you're the first to mention a problem so I don't know what to suggest. Have you tried searching for an answer on stackoverflow and other sites?\n. On a phone with a very high resolution screen, the view may not tile the image because by default it loads image data at at least the same resolution as the screen. On the Note 3, with resolution 1920x1080, if the image is loaded in portrait orientation, it will need the whole image with sample size 1 to achieve this.\nTo rotate a bitmap, the view has to load the image, then create a new bitmap of the same size but rotated, and draw the original onto it. This means twice as much memory is briefly required while each tile is loaded.\nOne option is to change the minimumTileDpi figure so the view will load images at lower resolution and tile earlier. Something like 160 or 240dpi would normally be enough, compared to 386dpi for your screen.\nAnother option is to experiment with the attributes of the bitmap that gets created for rotation, because I think it may be ARGB_8888 and not RGB_565, so it requires twice as much memory.\nI don't have an XXHDPI device so I've never been able to reproduce this.\n. There's another option, I'll try using a matrix to rotate tiles on draw. I had trouble making that work first time I tried, but then solved it for another part of the view. If it works that will eliminate the problem completely.\n. I've just pushed a fix as described - rotate the tiles on draw so there is no need to create a copy of each as it loads. I'm not ready to release this yet, are you able to verify the fix by cloning the repo and including it as a library project?\n. I've just uploaded a new release, v3.1.0. It may take a couple of hours for this to reach the central repository.\n. Unfortunately I've found that using a matrix to position tiles causes rounding errors resulting in intermittent black lines between tiles. I have rolled back this change, and as an interim fix I've limited tile size to 2048px, so you're unlikely to see OOMEs. I will experiment with rotating the canvas instead of using a matrix for each tile, but I needed to release the quickest possible fix.\n. That's great, thanks. Canvas rotation is a dead end, but I'm having some early success using Matrix.setPolyToPoly for individual tiles - it virtually eliminates rounding errors - so once that's tested I can allow larger tiles again.\n. Matrix.setPolyToPoly works well. This has been released as v3.1.3, and the restriction on tile sizes removed.\n. Can you try using SubsamplingScaleImageView.ORIENTATION_USE_EXIF instead? The view now uses no more memory when images are rotated that it does with native orientation.\n. Sorry, I don't get much time to work on this. I've used over 20 images with a view pager in the sample app without any problems, no more than two images will normally be loaded at once because the view does not load tiles until it's on screen and has dimensions.\nThe view does not usually use any more memory to rotate the image than it does to show it in native orientation so I can't explain why you might have problems only when rotating the image.\nI've assumed the crash your having is an OutOfMemoryError because you've reported it on this thread, but you haven't included a stack trace. Was it definitely an OOME and could you post the trace here please?\n. I assume you mean when you rotate the screen portrait to landscape it destroys the fragment, and you're not talking about rotating the image? If what you've described is your way of avoiding that, it sounds very likely that it will result in multiple images being loaded at once. I'm not sure I understand what you're trying to achieve.\n. But if you're calling the fragment's onCreate method from its onDestroy method as you said above to fix some problem with screen orientation changes, that will also be happening as Android is trying to destroy pages in your pager when you go to other pages, and that may prevent it garbage collecting views that are no longer on screen.\n. Send me the code.\n. This suggests the original image may have come from a scan, I've never seen a moir\u00e9 pattern on an ordinary photo. I can understand why RGB_565 might cause this but I've never seen it.\nI'm not keen to provide an option to use ARGB_8888 because this will cause a lot of crashes for many people. Also the custom decoder work made it much more difficult to generically provide options like this, but perhaps there's a way to do it. I'll have a look.\n. Please could you attach that image so I can test with it? My phone has a pentile screen and I think that makes it a bit harder to see the pattern.\n. I've disabled dithering. It doesn't seem to affect quality much and fixes the problem. Would you be happy with that?\nI can add support for custom decoding options if required, but it's a breaking change for anyone who's implemented a custom decoder. There are other breaking changes in v3.0.0 released yesterday so now would be as good a time as any to do it, I'm just wary of allowing ARGB_8888 because I know it will cause a lot of crashes.\n. Released in v3.1.0.\n. Corrected, thanks!\n. The view can't tile the image if you provide it as a Bitmap object. You should save it to temporary storage and provide the file URL instead.\n. I will see if it's possible to tile a Bitmap object when it's larger than the max texture size. However, you should be aware that an image this large will cause OutOfMemoryErrors on many old or budget devices, and it is always best to write the raw image data to disk then use the file path instead of creating a Bitmap from it.\n. You're welcome, thanks.\n. This is very strange, I've never seen anything like it. For me, I get an entirely grey image when zoomed out, but when I zoom in I get coloured tiles that I can only describe as \"1970s TV quality\". Here's what I know so far:\n- Changing the decoding to ARGB_8888, enabling dithering and other config changes make no difference at all.\n- Using the RapidImageRegionDecoder class, which is based on a different JPG decoder library, gives me a properly decoded full colour image when zoomed out but occasionally loads tile in greyscale when zoomed in.\n- ImageMagick identify shows nothing unusual about the image format compared to my test images.\n- Re-saving the image in GIMP fixes it. The only obvious difference in the output from identify is that the fixed image has a resolution attribute.\nGiven an entirely different jpg decoder library also fails to handle this image, I can only suggest you re-save it from another graphics package.\n. The changes I made some time ago where the view will load the whole bitmap with BitmapFactory if it's small enough, avoiding BitmapRegionDecoder's bugs, was the last of my box of tricks. These bugs have been fixed in the Skia project but I expect Nougat will be the first version of Android to get the update and I don't know whether it will be backported - and even then many older phones won't get updated.\nThe last option was attempting to build and embed a Skia native library from the most recent code, but there would be one for each architecture and I think it was about 50Mb (I think we've discussed this before). That's far beyond my experience and I can't afford the time to learn it.\n. I'm sorry but I can't merge this. The default behaviour has always been to display the image in its native orientation unless EXIF rotation is enabled, and I have avoided making any changes to behaviour that developers would not expect. To enable EXIF rotation, call setOrientation(ORIENTATION_USE_EXIF).\n. Please see the example class PinView\n. Hi, can you let me know which version of the library you're seeing problems with, and attach the image?\nI have one idea for what could cause this, but it would only make sense if it's the right and bottom edges of the image that are staying blurry.\n. I've just fixed a potential problem with images close to a multiple of the canvas max bitmap size, but I don't think this is the cause of your problem, because that would cause areas to go black, not blurry.\nThe more you can tell me about this problem the better, so if you can send me a link to your app, the image (is it just one?), your code etc. that would help.\n. I'm afraid I don't really have any ideas. The latest version should fix a possible issue if the image was a few pixels either side of 4096px but it doesn't sound like your image is, and as I said before it would cause black areas, not blurry. It's worth a try though.\nThe only thing I can suggest is to use the OnImageEventListener to log tile loading errors and somehow get logcat from an affected user. Areas remaining blurry suggests tiles are failing to load.\n. Yes, use the setOnImageEventListener method. The tricky bit is getting logs from a user but I think there are various solutions for that, I haven't looked recently.\nImage settings could cause it, but that seems unlikely if the rest of the image is decoded properly, and I have used indexed images before. You could try using a full RGB PNG with no alpha layer. You could also try changing the size slightly, or using the RapidImageRegionDecoder class from the sample library, which uses libpng instead of skia.\nMake sure you upgrade to 3.1.2 as well. Another point fix is coming soon to solve another small and unrelated problem. Are you rotating the image or displaying it in its native orientation?\nPosition of the view is very unlikely to be the cause and you seem to have it set up the usual way.\n. Hi Alex, the released version of your app appears to be using v2.3.0 at the latest, could you try v3.1.2 as well?\n. That's interesting, I guess this must have always been an issue. I thought I might have introduced it in the 3.x releases which have had major changes. It also eliminates all the possibilities I can think of, because I've fixed all of them already and I'm confident 2.x was pretty stable.\n. Can I just double check - do you know which version of the library you were using when this problem was first spotted? Do you think it appeared in a particular version or has been there since you started using it?\n. What was the older version? 2.3.0?\n. I'll digest this properly later (I'm at work!) but the only obvious thing I can think of with the default constructor is that you made the decoder class a non-static inner class, and maybe didn't remove it when you tried a separate file. If you make it static or put it in its own file it should work. Make sure you include all the dependencies in the gradle file - see the sample app.\nIf it was a memory management problem in the view you'd see a pretty obvious error. It's more likely to be skia, which is very fragile and varies as you say.\nFor this kind of image, it's obviously preferable to stick with PNG if you can!\n. I would just double check you included all the dependencies below when you tried a PNG with RapidImageRegionDecoder, because if you saw that skia error then it isn't using libpng.\ncompile 'rapid.decoder:library:0.3.0'\ncompile 'rapid.decoder:jpeg-decoder:0.3.0'\ncompile 'rapid.decoder:png-decoder:0.3.0'\nThe skia error does prove it was failing to decode the tiles (which I was sure of anyway). One slight possibility is that the view is calculating tile boundaries slightly outside the actual size of the image, which doesn't seem to cause problems normally but maybe it does with specific image encodings. You could try logging the tile sRects to see if they are correct.\nBTW don't use rapid decoder with JPGs, as you'll see it's very slow.\n. Did you make any more progress with this? Have you concluded it was a problem with that particular image?\n. Closing because it looks like this is a decoding problem that can't be fixed in the view. If any other info becomes available keep adding comments.\n. The view does a massive amount of loading and rendering of large image objects. I suspect the debugger can't cope with it. I haven't tried using a debugger with the sample app because it's almost impossible to debug touch events and logging works better.\nIt's very unlikely I'll be able to do anything to resolve this.\n. Please provide full details of your test devices, android version, development environment etc.\n. I also need more details of the error, a full stack trace, logcat preceding the error, anything you have tried to resolve it, and what evidence you have that it's this library causing the problem.\n. Using the sample app, with breakpoints in the activity, and in the view's onTouchEvent and onDraw methods (i.e. the most frequently called methods), debugging is fast and doesn't cause any errors. Tested on HTC One S/Android 4.1.1 and Nexus 7/Android 5.0.2 on OS X Yosemite with Android Studio.\nThis could be a problem with a particular version of Android, manufacturer modifications to stock Android, your version of the tools or IDE, or many other things. I don't think the view itself is responsible. There is a chance one of the core Android classes it uses could be, but that seems unlikely if you haven't set the image at the point it crashes.\n. Not enough information available to reproduce.\n. Apart from the phone, I tested the sample app on almost exactly this setup. Perhaps it's a problem with HTC's changes to stock Android.\n. See #19\n. See https://github.com/davemorrissey/subsampling-scale-image-view/wiki/09.-Events\n. The view does not load if it is hidden, because onDraw will not be called and it may have no dimensions. It needs to be visible on screen, but you can overlay another view with transparency.\n. Use recycle()\n. I considered using a factory pattern but decided at the time that it was important for the view to have full control over the lifecycle of a decoder class, which only the current method allows. I realise this makes it more difficult to supply parameters to a decoder so I'm still unsure whether it was the right decision.\nThis is a backwardly incompatible change, only a few weeks after some other breaking changes and a major version bump, so I need to think carefully about merging this.\n. Changing the attribute name would be backwardly incompatible so I'd rather not to that unless I have to. As this is the first and so far only report of this problem I'll close this for now and keep an eye on it. I'm not sure it will help you, but I recommend not using attributes to configure the view, and instead set the source from code.\n. Not at present. I'm not sure how or if the two libraries would work together.\n. I'm going to close this for now because I don't think there's much functionality Fresco provides that could be integrated into this view. I'm watching the Fresco project to see if that changes - there's an open issue in that project about it being unable to display very large images, and commenters there have recommended SSIV instead.\n. I think there's a bug in the minScale setting, it doesn't set the minimum scale type to SCALE_TYPE_CUSTOM as it should, so if you have set the scale type to center crop, the min scale setting will be ignored. However, this does not disable tiling. What it may do is cause the loading of full resolution tiles immediately because the image is rendered zoomed in immediately.\nCan you describe in more detail exactly what you're seeing, and try the debug setting to understand what tiles are being loaded and rendered?\n. That must mean the image is not large enough to need tiling on that screen. If you try with a larger image or a low resolution screen it will tile the image if necessary.\n. It sounds like the view is doing what it's supposed to. It will not tile the image if all the tiles would be needed when you are viewing the center of the image, and I believe that's true in this case.\n. Assuming your screen is 720x1280, and the image 2000px high it needs to be loaded at full resolution to equal or exceed the resolution of the screen. The view will never tile the base layer unless the image exceeds the canvas maximum bitmap size because this leads to the image being visibly loaded in sections and actually makes the loading slower. The view must have the whole base layer loaded into memory or you would get black areas while panning. Rendering only the visible area would make little difference to rendering performance in this case.\n. No, but using an event listener you can display a placeholder view until the image is ready.\n. I don't think so. It's copyrighted, and it's composed of hundreds of tiles totaling 165888x79872 pixels so I've no idea how that could be composed into a single image. The file would probably be enormous and decoding the very low resolution base layer might take minutes.\n. Recycle is not guaranteed to release memory immediately but it will make the objects available for garbage collection when the memory is required. The contract of the SubsamplingScaleImageView recycle method is similar to that of the Bitmap class recycle method (this is the method it uses to recycle the tiles).\nIf you want to prompt garbage collection call System.gc(), but note this isn't guaranteed to do anything and calling it is usually considered bad practice.\n. I'm not sure what to suggest, my sample app has a view pager which works without any problems, even when zoomed in, but those images are quite small. I know others have built apps with view pagers and haven't reported this problem.\nThe first thing to check is that you are not using PNGs with an alpha layer, and the next thing you can try is reducing the minimum tile DPI setting so you get a slightly more blurry image on high resolution devices but less image data is loaded. If all else fails, you will have to recycle the outgoing view then the pager starts instead of when you start loading the next image, but I don't think that should be necessary and it is likely to blank the screen while moving between pages.\n. As I don't have any further advice to give I'll close this for now. If you find a way to reduce memory usage in a view pager please let me know!\n. What does that mean? I can't find any documentation for that in the ScaleType enum.\n. You can set the initial position like this:\nSubsamplingScaleImageView imageView = (SubsamplingScaleImageView)findViewById(id.imageView);\nimageView.setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_CENTER_CROP);\nimageView.setImage(ImageSource.asset(\"squirrel.jpg\"), new ImageViewState(0, new PointF(0, 0), SubsamplingScaleImageView.ORIENTATION_0));\n. I couldn't get much information from that doc, unfortunately it doesn't say what the affected devices were. Assuming you're using a PNG, the first thing to do is make sure it doesn't have an alpha layer. Beyond that, the only way to reduce memory usage is to set a lower minimumTileDpi (e.g. 240 or 320). This trades a bit of quality for a reduced chance of OOME on ultra high resolution screens.\nTheoretically, high resolution devices should have enough memory to deal with large images but that doesn't always seem to be the case, and you'll often find the whole image is loaded at native resolution unless you reduce the minimumTileDpi.\n. System.gc is unlikely to help because the VM will run the GC automatically if it is asked to allocate a large object. Also, System.gc runs asynchronously and may not complete before the image is allocated, and is not guaranteed to run at all. You could try it anyway.\nIt's quite surprising that even with the minimum DPI set so low you're seeing these errors, and it makes me wonder whether there were other memory hungry applications running on the devices that prevented the normal heap from being allocated. I don't know for sure whether Android is guaranteed to reap those processes if necessary.\nI have had virtually no reports of OOMEs in the last year, except when the view is used in a view pager so two or more views are in memory at the same time, so that's another thing to check for, though if I remember correctly you only have one image.\nThe last suggestion I have is to request a larger heap using android:largeHeap=\"true\" on your <Application> element.\n. The way you're doing this looks fine, switching the image causes the view to recycle all the tiles from the previous image so will not require double the memory. The error is happening during loading of tiles, and that includes the base layer so it could be during the initial load or zooming.\nI don't think I've had any reports of OOMEs for a simple use case like this where you've set the minimum tile DPI and only have a single view displayed at once. I believed that I'd completely eliminated errors for this case. This makes me wonder whether something else in your app uses a lot of memory, or (more likely as you haven't seen this error yourself) these phones had something else memory hungry running that Android could or would not kill.\nI'm afraid the large heap suggestion is the last one I have!\n. I'll close this now as I'm seeing so few reports of OOMEs and the design has improved since it was opened.\n. This is a problem with the image decoder, you'll need to either re-encode the images until it works or try implementing another decoder - see https://github.com/davemorrissey/subsampling-scale-image-view/wiki/04.-Custom-decoders\n. There's no mention of SSIV in this stack, and you haven't provided any information needed to reproduce it.\n. Insufficient information to verify or reproduce.\n. You need to override touch handling (there are other samples for this) and detect whether the coordinates overlap your pin, then just render the text above it.\n. The Skia decoder often returns a null bitmap instead of throwing an exception, and I didn't report this error to listeners. I have now changed the view to throw an exception if it receives a null bitmap, so listeners will be notified. This is released in v3.1.4.\n. This change hasn't been released yet. How are you including the library? It looks like you haven't copied those classes into your project.\n. I suggest you use a released version of the library instead of copying the classes, I'm unable to support unreleased versions. If you need to copy the classes, you must make sure the package structure is correct.\n. I'm not sure I understand what you're doing but the view cannot load an image until it's on the screen because it may have no dimensions, and dimensions are required to load an initial image of the correct resolution. The view initialises in onDraw, because when this is called it's almost certain the dimensions are set.\n. Preloading several images like this, if they are large, is very likely to cause OutOfMemoryErrors. Unfortunately this is not something I can support because it requires significant changes and would cause users a lot more problems - some already report problems when they have two or more views loaded at the same time.\n. If the image is not large enough to require subsampling, it won't be blurry when zoomed in. This is more common on high resolution devices.\n. Hi Dustin, #74 and #59 are more closely related to your question. The view can't load an image until it has dimensions because it doesn't know what subsampling level to apply to the full size image, and whether it needs to load the base layer in tiles due to bitmap size restrictions. Views don't tend to get laid out until they are visible, and because this coincides with the first call to onDraw, that's where the view completes its setup and starts loading tiles.\nIt may be possible to add the option to set the expected dimensions of the view before it's visible, allowing it to start loading, or alternatively for the view to default to assuming it will fill the screen. Both of these would require some restructuring.\n. No, this library is for bitmap images only. Vector images don't have the same issues this library is built to solve.\n. That's the intended behaviour. If the padding is asymmetric, the view preserves the top:bottom and left:right padding ratios as you zoom in, so in this case, because you have no bottom padding, the image remains flush with the bottom until it becomes larger than the screen. I didn't really intend the view to be used with asymmetric padding, and this seemed to be the best option at the time.\nMaybe you could detect whether the image has a greater width:height ratio than the space available in the view, and add bottom padding if so.\n. I'll close this because it's intended behaviour but if you find a workaround it would be interesting to see how you did it.\n. Thanks for this very clear bug report! Once I fixed the NPE I found that the tile map was not set up correctly causing the view to run out of memory, so it took a while to fix. I have just released v3.1.4 with this fix.\n. That's a very kind offer but no need to worry!\n. Thanks, I'd forgotten about that!\n. ImageView is capable of drawing graphics of all sorts, including shape drawables, 9-patches and bitmaps. It also has a lot of options for positioning and scaling the image and adjusting its color, but it is really intended to display a single static image in a fixed position. SSIV is completely different - it's built from the ground up for displaying huge images (bitmaps only) with touch gestures, so there is almost nothing in common with ImageView and most of ImageView's methods cannot be implemented by SSIV.\nWhat's the problem you're having integrating the view? Have you looked at the setup guides? \n. There are many possible ways to handle a view resize and I chose to preserve the centre point (repositioned to the new centre) and scale, with both values adjusted if necessary to fit the new bounds. This means the image will normally move on screen when the view is resized, so any animation currently running has to be interrupted.\nIf you need different behaviour, you can override onSizeChanged. Simply overriding it with an empty method may do what you need, but depending on the current position of the image when the resize occurs, the animation may jump.\n. This was also reported in #61, which I closed because there had only been one report of an error and I'm reluctant to make a backwardly incompatible change. Clearly it's a bit more common than I hoped. Do you know what other library this is conflicting with?\n. No that's not supported but you can easily add your own text overlay by creating a subclass. Take a look at the classes in the sample project.\n. Sure, just send me the link when it's published.\n. Thanks for the link, I've added it to the readme!\n. The view will not subsample or tile a preloaded bitmap. You need to provide the file path and allow the view to do the decoding.\n. Yes, the same advice still applies.. If you're reporting a bug I need the code, error, image and device.. I'm not aware of any easy shortcut but you could create an empty view subclass early in your app so you can override onDraw and make a note of the max bitmap size for later.. You should see something in logcat if the image decoding failed, but if the decoder failed silently and returned a blank image you might not see anything. Please could you attach the image?\nTry re-encoding the image with a different graphics package, removing the alpha layer, and if necessary, use a custom decoder as described in the wiki.\n. Closing - insufficient information. Please provide more details.\n. You haven't said what format your image is, but yes, only JPG and PNG are supported. Please see this page for details https://github.com/davemorrissey/subsampling-scale-image-view/wiki/02.-Displaying-images\n. I've never tried this and it isn't really a supported feature, but I don't really know why it doesn't work. You could try calling the view's invalidate method to prompt a redraw.\n. Ah, I may have missed something important there - if you're calling invalidate from another thread, that won't work, and you need to use postInvalidate instead.\n. Sure, I'll close this issue. One other thing that might cause this is the state of the bitmap not being synchronized between threads, but as I don't know its internals I'm not sure this is relevant.\n. I'm happy to add this feature but the flag should be an optional additional attribute passed to the bitmap static initializer of the ImageSource class.\n. The scale is a ratio of screen pixels to source image pixels, so it will vary with screen density. To show a rectangle, you can calculate the width or height of your rectangle in source image pixels, then calculate a scale based on the screen width.\n. Your code doesn't do any conversion of the image. If an image can't be read by skia, then you need to open it in a graphics editor and save it again, and in most cases that will fix it. If not, you can try changing the output format or using another graphics editor. Loading the image on the device and saving it again may help in some cases, but only if the whole image is guaranteed to fit in memory.\nGIFs are not supported by this view.\n. You can try loading and re-saving the image on the device, but only if you're certain it will fit in memory as a Bitmap.\n. I'm afraid I don't have any more answers. See the wiki for a guide on how to build a custom decoder, and details of the limitations of this view.\n. If by initial state you mean fully zoomed out and centered, call resetScaleAndCenter(). This also works:\nsetScaleAndCenter(0, new PointF(0f, 0f));\n. I saw your email, but I've been very busy, sorry!\nIf you know the dimensions of your image, you can pass an ImageViewState object with the image source like this:\nview.setMinScale(0.25);\nview.setImage(src, new ImageViewState(0.5f, new PointF(width/2, height/2), 0);\nOtherwise, you can set the min scale to 0.5f when you initialise the view, then use an event listener to set the min scale to 0.25f when the image is ready.\nDisclaimer - I haven't tried either approach but I'm fairly confident :-)\n. You need to give more information about what you're trying to do, but have a look at the wiki and the sample project, you should find your answer there.\n. Please see the sample app, it has an example class with pins.\n. You need to adjust the sample to your own needs. I can't help with that.\n. There's no built in way because it isn't possible to tile an image loaded over HTTP. You have to download it to a file first. For a loading indicator, please see the wiki.\n. Please refer to the project wiki, or use Google to find android studio guides.\n. I don't know, I've never used it. I guess it depends what you want to do, so give it a try. If you get stuck, StackOverflow is probably the best place to ask for help.\n. Thanks for this suggestion, I've just pushed a commit with this change and it will be included in the next release.\n. The error is thrown by the skia library so you'll need to report it to them or Google. They haven't yet responded to my bug reports so I can only suggest you try saving the image with another graphics package.\n. Hi Leon, thanks for your message. Actually I raised the bug in the Android issues tracker because I wasn't sure where it should be reported. See this link https://code.google.com/p/android/issues/detail?id=76976\nIn future I will report them direct to the skia issue tracker, but unfortunately it's often hard to determine what's different about an image that fails to decode. I use ImageMagick to check all the attributes but sometimes draw a blank. It appears the problems usually occur with CMYK and grayscale images, and those with unusual subsampling, but I've also had reports of decoding problems for images with nothing obviously out of the ordinary. Anecdotally, Android 5 has more problems than earlier versions, but that could be due to Android itself, manufacturer alterations or hardware.\nIf you release fixes to Skia, how long does it take for them to be incorporated into Android releases?\n. This question has come up a few times - see the closed issues. SSIV needs to work from a file to enable loading of tiles, and picasso is designed to load a complete full resolution Bitmap into an ImageView, so they don't work together. Either find a way to use picasso to download and cache files so that SSIV can display them, or use another image view that supports gestures but not large images.\n. Please view the sample project, most of what you need is there. To request help with your project, please use StackOverflow.\n. Please view the sample project, most of what you need is there. To request help with your project, please use StackOverflow.\n. Write a subclass and override onDraw. See the sample library and wiki for examples and guides. Please ask for help with your project on StackOverflow.\n. Duplicate of #19 \n. Those are not the right coordinates. Please read the getting started guide.\n. Duplicate of #93. Please see the wiki.\n. setMinimumScaleType(SCALE_TYPE_CENTER_CROP)\n. It sounds like you're describing the default behaviour so I'm not sure what you mean, are you saying you want the image stretched to fit the screen, ignoring the aspect ratio? Or you want it to start fully zoomed in? \n. Please read the wiki - setMinimumScaleType(SCALE_TYPE_CENTER_CROP). Duplicate of #108.\n. I don't have a test project to try this with or the time to build one. Could you try debugging it, or hopefully someone else will be able to try it.\n. This should be fixed now. I'll do a new release as soon as I've cleared up the other open bugs.\n. Please use StackOverflow and Google for help with your project.\n. Duplicate of #81, #100\n. Image loaders are designed to load a Bitmap from some source and pass them to an ImageView. SubsamplingScaleImageView is designed to display images that are too large to be loaded in this way, so their aims are not compatible.\n. Very nice! Do you mind if I add that to the wiki? One minor point - using ARGB_8888 makes it a lot more likely the view will run out of memory on low powered devices.\n. I can't reproduce this at the moment. This works:\nimageView.setImage(ImageSource.uri(\"file://sdcard/DCIM/IMAG 0210.jpg\"));\nThis also works:\nimageView.setImage(ImageSource.uri(Uri.parse(\"file://sdcard/DCIM/IMAG 0210.jpg\")));\nYour suggestion in PR #115 breaks both of these cases. Could you provide some sample code I could use to reproduce the problem you're seeing?\n. I've tried to find a workaround for this, but the difficulty is that the view has no way of knowing whether the URI string it's given is URL encoded, or just contains %xx escape sequences deliberately. Only the app code will know that, based on how it generated the URI. The app code can use URLDecoder.decode to decode the URI if it's from Uri.fromFile or any other source that encodes the URI.\nSupposing my file is named Imag 001.jpg and I use Uri.fromFile to get the URI, it will be encoded to Image%20001.jpg. Now if I have a file named Imag%20001.jpg (unlikely I know) and I use some method that doesn't encode it, the view can't distinguish between them and whatever fix I put in for one will break the other.\nI think it will have to be the app developer's responsibility to check whether their URLs are getting encoded, and decode them if necessary.\n. Let me know what you discover. I don't have much time to set up test projects with other libraries like this, but if there's a fix I can add without breaking anything for existing users I'll do it.\n. I've put in a workaround for Uri.fromFile URL encoding the path. The ImageSource constructor will check whether the file exists, and if not it will URL decode the path and try again. This works for Uri.fromFile provided the path you used in the File constructor was not URL encoded, because Url.fromFile would then double encode it. This will be in the next release.\n. This change breaks my test cases for file Uris so it can't be merged. See discussion on #114 - I'll fix the issue as soon as I can reproduce it.\n. Are you declaring the correct dimensions of the full size image when you initialise the view? There will only be a delay in transition if the view loads the bounds of the full size image and discovers they don't match the declared dimensions - it then discards the preview image and re-calculates all the state based on the correct dimensions, causing the screen to go black. If you declare the correct dimensions, the transition is seamless.\n. I've no idea. Have a look on Google.\n. Sorry, I can't merge this. It completely breaks view pagers.\n. This looks like a bug in Android to me. Identical issues have been reported in apps that don't use this library, and the snackbar and support library are common themes. Have a look through these links and see if you can find a solution that works for your app:\nhttps://github.com/chrisbanes/PhotoView/issues/72\nhttps://code.google.com/p/android/issues/detail?id=175501\nhttps://code.google.com/p/android/issues/detail?id=103888\nI'll close this PR because it can't be merged.\n. I'm reluctant to do this unless I have to. This is the first problem like this that's been reported, and up to now it's been rock solid with AsyncTasks for a lot of users, so a move to threads would be a big step into the unknown. Besides the convenience, they are the standard method of doing work off the UI thread and they provide the concurrency control this view needs - I can safely queue up requests to load tiles even while the user is rapidly panning and zooming, and not worry if the activity is paused or stopped. It may actually be desirable that image loading is paused while the app is doing a lot of work in the background.\nOne option may be to execute AsyncTasks on the provided THREAD_POOL_EXECUTOR. This seems to work, but I don't know if BitmapRegionDecoder is guaranteed to provide thread safe decoding of images from all sources.\n. The worst issues with AsyncTasks either don't apply to the way I'm using them here, or I've already worked around using static inner classes, weak references and state checks. Implementing my own threading would require solving these problems and more, and I'm not keen on spawning threads within a view. Sharing the threads Android has already created for the app makes more sense. I'll consider making the parallel executor available as an option, which should solve this problem.\n. Why wouldn't a parallel executor solve this? It would allow the view to load images on the parallel executor even while other AsyncTasks are using the single threaded executor. There would only be a delay if the parallel executor is busy running several other tasks, and in that scenario it might be desirable to avoid spawning more threads - besides the CPU load it increases the chances of getting an OOME while loading.\n. I've pushed a new release (3.3.0) with support for AsyncTask.THREAD_POOL_EXECUTOR on SDK 11+. Give this a try and let me know if it helps. Call this before setting the image source:\nimageView.setParallelLoadingEnabled(true);\n. Any luck with this, can I close the bug?\n. There is no dependency on support-v4 at the moment and I don't want to add one for this. The overhead of reflection is tiny.\n. I think I'd have concerns about using an unbounded number of threads to load tiles, but it would be possible to send the AsyncTasks to a custom executor with more threads available, rather than rewriting the tasks as threads. I'd consider a PR that allows an Executor instance to be supplied, but would rather not have the view spawning and managing threads, especially because some apps have several on screen at once.\nAre the executor's threads being kept busy by other apps? Simultaneously loading images on more threads than there are CPU cores is unlikely to make the view run faster. In my experience, with my phone probably not doing any significant background work, enabling parallel loading does nothing for performance.. I guess the sample app isn't a great real world example because it has no network loading tasks or any other background work going on, but I've always thought the tile loading performance is reasonable, with new tiles typically loaded in a second or so.\nWithout buying a large collection of phones I have nothing to compare the N5X to, but if anyone wants to submit screen captures of the sample app loading/panning/zooming the test card image, that would be interesting to see.\nI won't spawn threads in the view but I would accept a PR that allowed a developer to supply one that can be shared and have a sensible lifecycle.. Yep I just tried the same, using Executors.newFixedThreadPool(10) made little to no difference. Tiles still seem to load at regular intervals, which makes me wonder whether BitmapRegionDecoder or Skia even support multiple threads.\nWhat does make a noticeable difference is changing the code to load tiles during pan and zoom gestures, where currently it waits until the end of the gesture. In 2014 when I wrote this that made a big difference to performance, resulting in choppy movement, but on today's phones it may not.. Yeah, but I'm scared of changing anything now, every time I do the sample app works great on my phones but lots of developer's apps break :-). The get out of jail free card here is to make loading during gestures one of the configurable options, but I should add that while this does help a bit, gestures aren't usually long enough for it to make a big difference, and it will hurt performance on old/cheap devices.\nThe trouble with these options there's no one configuration that works well for all images on all phones, so it's hard to document recommended settings. The defaults of RGB_565, 320dpi, single threaded loading, and no loading during gestures apparently work for pretty much everyone without problems - complaints about performance are very rare considering this has 3.5K stars - but changing those defaults will cause crashes on older devices.\nKeeping the current defaults and labelling the options with a \"here be dragons\" warning seems the best way to have a quiet life.. Aha - see line 189: https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/graphics/java/android/graphics/BitmapRegionDecoder.java\nThere's nothing to gain with multiple threads, but there might be something to gain by providing a single threaded executor that isn't busy with other jobs.. I've just hacked together what's effectively an object pool of 4 BitmapRegionDecoders, using a dumb round robin implementation. It would be complex to make this production ready and might cause all sorts of problems, but it does work beautifully.. I'm coding up a solution now.\n\nReplace synchronized blocks with ReadWriteLocks so decoders can be used by multiple threads but locked for recycling by one. Currently there are synchronized blocks in TileLoadTask and SkiaImageRegionDecoder so single thread loading was enforced, but only to allow safe recycling. This made no difference to performance with BitmapRegionDecoder because it's also synchronized, but the view couldn't take advantage of a custom decoder that supports multi-threaded decoding. This is a breaking change for custom decoders that aren't expecting decodeRegion to be called from multiple threads.\nReplace setParallelLoadingEnabled(boolean) with setTileLoadingExecutor(Executor).\nNew class SkiaPooledImageRegionDecoder which will create 4 decoders.\n\nI'll push this to a branch and release it as a beta.. There's little benefit from having more than 4 because it's rare that more than 4 tiles become visible at the same moment. Capping it lower if N < 4 might be sensible.\nHowever there's a problem with this plan. Each BitmapRegionDecoder uses native memory equivalent to the file size of the image being displayed. Loading the data once as a byte[] and creating multiple instances with isShareable=true doesn't help because the native code ignores the flag and copies the data.\nMy N5X was okay with 10 instances and a 5Mb image, so I guess 4 should be okay for most devices and most images. The pool will need to be smart about memory usage to preserve enough space for tiles so this needs more research.. I've pushed a new release 3.9.0.ALPHA to maven (probably, sonatype is not working well today). This has the following options:\nLoad tiles during gestures and animations. Can be wasteful and reduce the frame rate on older devices, especially with ARGB_8888 images.\nimageView.setEagerLoadingEnabled(true);\n\nUse a custom executor for all loading of bitmaps. The executor should be shared by all instances and kept for the life of the app. The view will only effectively use one thread unless the ImageRegionDecoder class supports parallel loading, which the default one doesn't.\nimageView.setExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n\nA new and highly experimental pooling tile decoder. Caps estimated memory usage at 20Mb and four decoder instances, and delays creation of extra decoders until it looks like the user is interacting with the view. Works well for PNGs, but isn't a huge improvement for JPGs, at least on my phone.\nimageView.setRegionDecoderClass(SkiaPooledImageRegionDecoder.class);\n\nDefault behaviour hasn't changed so it would be fairly safe to release this, but I have changed to ReadWriteLocks for internal synchronization so it would be good to get some feedback from real world apps before committing to these changes.. With a bit of hacking to restore SDK 10 support I can probably try my HTC Desire from 2010. That'll be a good acid test.. HTC Desire (2010, SDK 10): A valiant effort with images 40x its screen area, but occasional OOMEs and frequent corrupt bitmaps with default config, so I didn't try eager loading. SDK 10 only supports serial execution of AsyncTasks.\nHTC One S (2012, SDK 16): With PNGs, eager loading and the pooled decoder both work well but do reduce the frame rate slightly. With JPGs, using a parallel executor causes segfaults. BitmapRegionDecoder did not have internal synchronization until Lollipop, and I've just stripped out the view's synchronization and exposed this problem. I'll restore it for SDK < 21. This was my original test device in 2013, which explains some design decisions.\nNexus 7 (2012, SDK 22): Eager loading and decoder pooling work reliably but do affect the frame rate some of the time, and combined with ARGB_8888 it's often quite unresponsive.\nFor each of eager loading, parallel loading and ARGB_8888 there's a decision to be made about whether the default should change. I think that eager loading and AsyncTask.THREAD_POOL_EXECUTOR (purely to reduce contention) could be safe defaults for SDK >= 21, but parallel loading and ARGB_8888 would cause poor performance and crashes for some devices, and should be options available for developers who want them.. That seems to work very well. Does it have the pooling decoder enabled?\nBTW I've added a less ugly method of globally setting the bitmap config: SubsamplingScaleImageView.setPreferredBitmapConfig(Bitmap.Config.ARGB_8888);\n@AlexVPerl have you had a chance to try this alpha to see if you're able to fix the contention problem you raised by using a custom executor?. I'd like a bit more feedback before pushing these changes into the wild, so I've made eager loading and THREAD_POOL_EXECUTOR the new defaults and pushed them as 3.9.0.BETA.. Changes released in v3.9.0. This problem is caused by a bug in Android triggered by using the support library and the snackbar in your app and by using two views on the page - a very rare combination. The bug isn't caused by this view alone, it's been reported to Google by other developers.\nThis change carries a risk of breaking view paging if an expected touch event is missed due to the activity ending or a screen orientation change, so I'd rather not merge it. I think the best option for you is to use your own fork or try extending the class to override touch handling.\nI will try to reproduce and investigate this problem to see if there's a safer workaround.\n. Ah sorry, it was the Snackbar in some of the other bug reports, but the DrawerLayout in yours. I would like to find a workaround for this problem but I spent a lot of time getting touch handling to work properly for view pagers and I don't want to take any risks to support a rare case like this. I'm not keen on the use of statics for communication between views, not least because it is possible for the ACTION_UP event to be missed, which would corrupt the view until the app is force stopped. I hope there's a better solution, and I'll do some investigation when I can.\n. BitmapRegionDecoder is only available in SDK 10 and above. If you don't need to display large images, you can disable tiling and the view may then work for SDK 8 (I can't promise it). If you do need to display large images, you could try using a custom decoder - documentation and a sample implementation can be found here: https://github.com/davemorrissey/subsampling-scale-image-view/wiki/04.-Custom-decoders\nNote if you do use RapidDecoder, JPGs will not be properly supported and may be very slow, but it should work well for PNG images.\nOfficially, this library cannot support anything older than SDK 10.\n. I'm not sure I really see the need for this. The sample class AdvancedEventHandlingActivity shows how to add this functionality. Granted this is more complicated but it also supports much more fine grained control over the behaviour and extension to support a variety of touch events.\n. I'm going to park this idea for now, as it is possible to do this and more with the samples provided. If there's more demand for this I'll reopen it.\n. The PinView class is part of the sample library, it's only a demo and is not included in the release. If you want to use it, you need to copy it to your own project.\n. This is a problem in your code, not the library. Please ask questions like this on stackoverflow.\n. I think the problem @MFlisar reported will be fixed by PR #129. EXIF orientation has always been supported for files, and still is, but for images that are small enough not to require subsampling, this bug has been introduced in 3.4.0.\n. Fixed in release 3.4.1\n. Can you please provide:\n- Your code\n- The original image\n- A screenshot\n- Affected devices and Android versions\n. EXIF orientation is only enabled if you use that setting, as the wiki says. The default has always been to display the image in its native orientation because EXIF support was added some time after I released this library. Changing the default would be backwardly incompatible and lead to unexpected problems for some developers, as well as making the initialisation slightly slower.\nIt looks like all the comments on this bug since I closed it don't actually relate to the original bug, and the problems appear to be caused by the USE_EXIF setting not being enabled.\n. I can't reproduce this. There's a possibility that release 3.4.1 has fixed it, please try that and let me know if you're still seeing this problem. Please also include the code you're using to set up the view.\n. I still can't reproduce anything like this, with or without custom page transitions, and with small or large images. With tiling enabled, it's normal for the image to not be displayed immediately when you start the swipe to the next page, because it has to load. It can't be loaded until the view's dimensions are known, and the dimensions may not be known until the view is partly on screen.\nI have never seen the view get to calling onReady without displaying the image, or need extra touch gestures to prompt the image to be displayed.\n. It's the view size that's needed, not the image size. I'm considering an option to override the default handling and assume the view will be full screen then subsample the image accordingly, but misuse of this flag would cause crashes and it adds yet another loading path to the many already present.\n. I've implemented @inorichi's suggestion and it works well. The next image in a view pager is loaded while off screen.\nI'm not certain whether this was the cause of the original issue, which I never reproduced, but will close this now. Please reopen if there are other cases where the image is not loaded.\n. Should be fixed by that commit ^, although consistently reproducing the problem and then demonstrating it's fixed is difficult.\n. Good spot, thanks!\n. This will be fixed in the next release\n. Good idea, this had occurred to me recently as well.\n. Have you tried imageView.setOrientation(SubsamplingScaleImageView.ORIENTATION_USE_EXIF); ?\n. There's already a setOrientation method and it works in 90 degree increments. A free rotation feature is pretty much impossible with a tiled image, I'm just not that good at trigonometry. I considered it for a while, and realised I would have to rewrite most of the class. So, unfortunately, I won't be attempting it.\n. I've reproduced this with DepthPageTransformer, and it's a bug with that transformer. It occasionally leaves the previous page on screen, and still receiving touch events, but with the alpha set to 0. There's probably a way to fix it but I haven't tried.\n. I tried this and it introduced bugs so I can't merge it. I think it's something that's best implemented on a developer's own fork if they need it, because it's a very rare use case.\n. Okay, hope the comments on #68 help.\n. Try not passing the ImageViewState, you're panning the image to the top left. Without that it should be centered.\n. It looks like the two images on the left should be able to pan vertically, are you saying they don't? Can you attach the original image so I can see what its dimensions are?\n. Okay, thanks!\n. It would be quite easy to do that with images small enough to load as a single bitmap, but with tiling it becomes very complicated. The tile grid would need to be swapped or reversed, and matrix calculations would need a big rewrite. To be honest, the maths involved already makes my head hurt and I think this would be a challenge.\n. Possibly, yes, any idea why an image would be saved flipped?\n. I think I misunderstood your question. It would be possible to support that EXIF flag if I implemented flip support. It can't just be added now.\n. Support for flip/mirror is an enhancement, but a big and complex one, and also likely to be very rarely used so not high priority. It might be a long time before I can get around to doing this.\n. If you can do that, great. I'm assuming you can do this on a server.\n. PinView is just a demo. You will need to write your own subclass the way you want it.\n. Yes this is expected. The view cannot load appropriately subsampled tiles until it has dimensions, and it doesn't have dimensions until it is visible. It is transparent and displays nothing until the image is loaded so you can overlay a progress bar on top of it (leaving at least some of the view visible) or even underneath it.\n. Read through the wiki to see if you can do what you want with the methods provided, but I suspect you'll need to make your own fork of the code and change it significantly to do this.\n. Yes, it's all in the wiki.\n. Duplicate of #45, #81, #100, #112\n. It's zoomEnabled, not zoomEnable\n. It has to be this way because the image should be centered in the dimension it doesn't fill. Otherwise when you zoom out you could leave the image off center. I don't plan to change this behaviour.\n. I've improved the behaviour in 3.6.0.\n. Unfortunately a free rotation feature is essentially impossible, the maths is just too complicated and the tile grid won't really work for anything other than 90 degree increments.\n. Yes this is completely different. It doesn't need a tile grid for displaying large images.\n. Just comment here with a link and I'll add it!\n. There's no indication in this stack trace that this library was involved in any way, and you haven't provided an explanation or steps to reproduce.\n. Thanks for this, it's an interesting change. However, my aim is to keep these sample classes as simple and easy to understand as possible so users can use them as a starting point for building the functionality they need. One size doesn't fit all! So, I won't merge this change.\n. The view attempts to preserve the current scale and center if its size is changed, so that's what's happening here. There's no single \"correct\" behaviour for this, I just felt this was most appropriate.\nIf you want to have different behaviour on size changed, create a subclass and override onSizeChanged. Alternatively, allow the view to be recreated and see the wiki page for instructions on how to set the scale and centre after an orientation change.\n. If adding that attribute results in the view's onSizeChanged method not being called, then you will have to call it yourself. However it looks like it is being called and doing what it should, so you need to override it if you want different behaviour. Alternatively, I recommend removing that attribute.\n. Depending on screen resolution, image size and orientation, the view will sometimes load very large single tiles, up to the canvas maximum bitmap size. It seems that in this case, the device has a maximum bitmap size of 4096x4096 but isn't actually powerful enough to handle that.\nYou could try forking the project and changing the maximum tile size to 2048 or smaller, but this would obviously affect other devices with the same screen size/resolution when you only have a problem with this one.\n. Generally larger tiles are better, if you go as small as 512x512 the initial load will take longer (but perhaps not noticeably) and the view will have to load a lot more tiles as you scroll around. Probably 1024x1024 is the minimum sensible size, but I haven't done many experiments with this.\n. Doing this might not make the view load any faster. The initialisation of BitmapRegionDecoder is relatively slow, then reusing it to load tiles is fast, and replacing that with individual bitmaps that have to be initialised and loaded every time the user pans and zooms might be slower. If you want to do it this way, try something like TileView (https://github.com/moagrius/TileView).\n. That's a broken link. I need your code and a stack trace and a description of the problem.\n. If Glide is caching bitmaps, you need to use the ImageSource.cachedBitmap static initialiser.\n. To be honest, I don't know, I've never looked at that API before. I guess you'll have to be careful with the sizes of bitmap you create to render the page into. The docs suggest you can do tiling with it, maybe you can even write a custom decoder implementation for this library.\n. The sample app doesn't do this, so please provide steps to reproduce, include your code and let me know if you're using a custom image loader.\n. You're using your own copy of the library but haven't provided the code, said which version it's based on, or given the code you're using to configure it.\n. I'm sorry, I can't provide support for customised versions of the library or use in conjunction with third party libraries - either the changes or the third party library may be the cause of the crash. If you can reproduce an out of memory error with the same image stored as an asset or local file and an unmodified copy of this library, that can be raised as a bug.\n. Duplicate of #144 - the last comment there should provide an answer.\n. I don't really want to start opening up all the methods, especially that one which is critical to the proper behaviour. It's better to fork the library if you want to make changes as fundamental as this. One day I might get around to adding a custom pan limit but sadly I'm too busy to work on this library at the moment :-(\n. 3.5.0 released\n. This will work:\nimageView.setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_CENTER_CROP);\nimageView.setImage(ImageSource.asset(asset), new ImageViewState(0, new PointF(0, 0), 0));\n. Have you looked through the other OOME reports in the issue tracker and followed all the advice on comments there?\n. Unfortunately I can't do anything about this. My view uses BitmapRegionDecoder, a standard class in Android, and that uses the Skia library to decode images. The bug is in Skia, so it should be reported to them.\n. It looks like your code is forcing the view to load the whole image as one bitmap, I'm guessing it isn't possible to load it from raw using tiling. I'd suggest moving the image to assets or drawable-nodpi.\n. That's difficult to answer without understanding exactly what you want to do. If you look through the wiki and the sample code, you should be able to see whether you can do what you need to with this library.\n. This looks okay but I'm curious what the use case is? I've considered this before but not done it because it would result in thousands of calls to the listener which would slow the view down, and I couldn't think of examples where an Activity or Fragment would need to know this. Normally only a subclass would need to know scale changes, and they can get the current scale when onDraw is called.\nAlso I think it might be better to receive pan and orientation change events too, with an OnImageViewStateChanged listener and the ImageViewState class.\n. I've now implemented this feature, but included support for listening to pan changes too. I also wanted to explicitly exclude events prompted by initialisation and calls to public methods, and make it clear where events originated from. This is all in commit cb89069 and will be in the next version. Thanks for the PR - I'll close it as it's been superceded by a different implementation.\n. That solved a rounding problem that resulted in the last few pixels of the image not being shown.\n. Just get the current scale and draw the pin scaled accordingly in your onDraw method\n. I'm pretty sure the default behaviour is the same as fitCenter. Can you illustrate what you need?\nPlease check the wiki for configuration options, pretty much anything is possible.\n. Generally the rule is never to catch Throwable because it leaves the JVM in an undefined state that may not be recoverable. I'm not certain whether this applies to the Dalvik/ART VMs for OutOfMemoryErrors, but given the goal of this view is to make OOMEs very unlikely I'm also not sure this a necessary change.\n. I don't want to catch Throwable but catching OutOfMemoryError should be okay in almost all cases, so I'll close this PR and create an OutOfMemoryException class to wrap it, preserving backwards compatibility for the listener interface.\n. Are you sure the problem isn't in your code? Have you tried the sample app to see if it has any problems on this phone?\nIt sounds like you may have a touch event handler that's taking too long to complete. None of the event handling in the library takes this long to complete even on the slowest phones.\n. Can you include your code please?\n. Maybe you're having problems because you're loading a large bitmap into memory? Could you try letting the view load the image so it can subsample it, instead of passing it a bitmap?\n. To be honest, I'm not sure. I don't use Picasso or any other image loader - doing it natively always seemed easier. I think you need to use the PicassoRegionDecoder from the gist, and create a DecoderFactory<? extends ImageRegionDecoder> class that constructs it with an OkHttp client configured to write to disk.\n. I'm very surprised the behaviour is non-deterministic. I can't reproduce this on my 5X, could you step debug the initialiseTileMap method and let me know what you see?\nYou don't get any error callback because the image has loaded successfully and the error occurs in rendering, and that isn't reported to the onDraw method. There's no way to know it happened.\n. I'm really sorry but I can't provide this kind of support, what you want to do is possible but the sample is the most basic example possible for illustration purposes only, and is not supposed to be feature complete. You will need to implement your own gesture detection.\n. I think this is because you're trying to put the second RelativeLayout to the left of the first one, but the first one is already on the left of the screen so it won't show. It might be better to try StackOverflow for questions like this because it's not related to this library and you'll get a faster answer.\n. I'm sorry, I can't provide support for developer's customisations and the projects they build around this library. If you believe there is a problem with the library itself, please provide a description - \"it doesn't work\" is not enough to help me troubleshoot.\n. If you're displaying large images by providing a bitmap, the view can't do subsampling and you may get poor performance. Please see https://github.com/davemorrissey/subsampling-scale-image-view/wiki/X.-Using-with-Picasso\n. view.setImage(ImageSource.bitmap(bitmap));\n. Please read https://github.com/davemorrissey/subsampling-scale-image-view/wiki/07.-Configuration - look for SCALE_TYPE_CENTER_CROP.\n. The original checks the view is ready before doing anything, like this:\nPointF sCenter = getCenter();\nif (readySent && sCenter != null) {\n    // Do stuff\n}\nI think you need to do the same.\n. Neither of these classes have zero-argument constructors, so you need to use the setRegionDecoderFactory and setBitmapDecoderFactory methods.\n. Released in 3.5.0\n. It's all here: https://github.com/davemorrissey/subsampling-scale-image-view/wiki/07.-Configuration\n. I don't really follow this, but have you read the wiki? There are lots of methods to help you do things like this.\n. Take a look at the wiki, especially the page below. You can use methods like viewToSourceCoord to determine the visible area of the image, then use BitmapRegionDecoder to get that area from the source.\nhttps://github.com/davemorrissey/subsampling-scale-image-view/wiki/10.-Extension\n. Your solution is more likely to cause this problem than your original code, so I don't know why you aren't seeing the same error with the new code. Can you attach the image you're displaying please?\n. BTW there's a note in the docs saying you have to put resources in drawable-nodpi to prevent them being scaled by Android - have you done that?\n. @ending0421 Please include your code when reporting a problem.\n. @ending0421 Please read the setup instructions and the wiki. The view can't tile bitmaps if you load them like this.\n. I think your best bet is to fork the project, and remove all the code that handles touchCount >= 2 in onTouchEvent.\n. Can you provide a screenshot that shows this?\n. This might be a result of using RGB_565 to save memory, but I've never seen artifacts like that from a PNG. You could try creating a copy of SkiaImageRegionDecoder and using ARGB_8888, but you might get more out of memory errors on older or low-end devices.\n. It would be better to save that as a PNG because the JPEG has compression artifacts as you can see from the attached image. The same advice I gave above still applies, use ARGB_8888 but be aware this can cause OOMEs.\n\n. Calls to sourceToViewCoord(0, 0), sourceToViewCoord(0, sourceHeight) etc will give you the bounds. If you don't know the source dimensions, use getSHeight(), getSWidth()\n. I'd suggest creating a fork and modifying the code to your needs, this requirement is too specialised to include in the main library.\n. ViewPager is very popular, but the need to disable fling is rare and you're the first to ask for it. There are already so many configuration options, and the touch handling is so complicated, that I don't want to add more touch handling options unless they're essential - it makes testing a nightmare! In cases like this I think the best option is creating a subclass or a fork, or using a custom gesture detector.\n. Did you put this image in drawable-nodpi? I strongly recommend putting images in assets instead of resources because Android will scale drawables according to screen density, which isn't relevant for an image you're going to zoom into. The memory allocation of 106Mb for this image suggests Android is scaling it.\n. https://github.com/davemorrissey/subsampling-scale-image-view/wiki/07.-Configuration#setminscalefloat--setmaximumdpiint\n. Please read the manual I linked to. It says you need to call setMinimumScaleType(SCALE_TYPE_CUSTOM)\n. That would happen with any view so it's not an issue with this library.\n. It's possible that on high res screens the smaller images are loaded in full - when I first built this library most phones had a canvas max bitmap size of 2048px but now many support far larger bitmaps and have such high density screens that even a 7500x5000px bitmap won't be tiled or subsampled. The performance of these huge bitmaps may be quite poor.\nTry setDebug(true) to see the tile boundaries and sample sizes, that should give you some clues why different images perform better. One option might be to fork the code and override the canvas max bitmap size with a smaller value that works better. If that helps I'll make it a configuration option.\n. I don't think the behaviour with SCALE_TYPE_CENTER_CROP is a bug, it's just a combination of screen size, density, max bitmap size, image size and settings that results in large tiles being loaded.\nIf you don't mind sacrificing a bit of quality, try calling setMinimumTileDpi(200) - by default the view will load tiles subsampled to at least match the density of the screen, and that's not really necessary on a 400dpi screen, especially if you're displaying photos.\nA PR would be good, I think this will be useful.\n. That seems like a good solution. I've not seen this problem myself, it may be a conflict with another library.\n. This view uses BitmapRegionDecoder, which doesn't support GIFs. If you disable tiling (see the wiki) it will use BitmapFactory and I think that does support GIFs. Are you using GIFs large enough to require tiling? What kind of images are they (building plans, maps...)?\n. I'd strongly recommend converting it to a PNG.\n. Okay. I don't know of any way to subsample or tile a GIF, but it's possible you could find a native library that does support it, and use a custom decoder class. Converting to PNG will be far easier.\n. Use ImageSource.cachedBitmap instead of ImageSource.bitmap\n. Please check through closed OOME issues, there may be a solution in one of them.\nOne possibility is BitmapFactory can decode the image but BitmapRegionDecoder cannot read its bounds correctly. Please attach the image.\n. What do you mean by different image sizes?\n. That's just the default behaviour. You can change it if you want, see the wiki. The view wasn't really intended for displaying small images.\n. Interesting, thanks, but why is this raised as an issue?\n. Great, they can find it through this issue or the reference on the closed one, you could also ask and answer your own question on stackoverflow.\n. Thanks, that'll be fixed in the next release.\n. Are you using an old or modified version of the library? There's nothing on lines 1571 or 1551.\n. Could you include more of your code between decoding the bitmap and adding it to the view?\n. I can't reproduce this problem, both images load normally for me.\n. Any updates on how I can reproduce this or can I close it?\n. Sorry I'm late to this party. Device specific issues are hard to reproduce but I think I can see why the Moto X Pure would have a problem - it has an insane screen density of 520ppi.\nThis library defaults to loading enough image data to at least match the resolution of the screen so with a screen that dense, and assuming a max bitmap size over 4096px, it will load almost any image you throw at it as one tile with a sample size of 1, which needs about 60Mb for your example images. Other devices with a smaller max bitmap size, a smaller screen, or a less dense screen will load the image in tiles and/or subsampled and perform better.\nSetting minimumTileDpi to something more sane like 160 or 240 will reduce the quality but not noticeably for most people, and will usually reduce the amount of image data loaded to something the device can better cope with.\nRe. a public reset(), use recycle() but this should only be called after the view is off screen. If you call it when the view pager transition starts the image will disappear.\n. This is the intended behaviour, but you can modify it by creating your own subclass.\n. That looks like a good solution. The view is intended to be easy to extend and customise, and although the defaults may not suit everyone I don't want to make backwardly incompatible changes.\n. There's a comment on the line above that explaining why it's done. You're welcome to try removing it, but I can't be sure whether that will introduce major bugs.\n. Discussed recently in #218 - try setMinimumTileDpi\n. Insufficient information. Please include the stack trace, image, library version and your code when reporting bugs.\n. Try this:\nsetMinimumScaleType(SCALE_TYPE_CUSTOM);\n   setMinScale(1f);\n(I haven't tried it but I think this might be what you need)\n. Good point. You could implement behaviour like this with a subclass, or possibly just by passing an initial state that centres the image, provided you know its width and height, and the dimensions of the view.\n. Awesome, looks good! If I could decide what this should be named I would add it as another scale option.\n. The best way to do something like this is create a subclass of the view.\n. Please take a look at the sample project source code and the wiki, there should be enough to get you started. Otherwise, StackOverflow is a good place to ask for advice.\n. @JonasPrap looks like you found the solution, can I close this now?\n. This library is not designed to load images from URLs because it prevents the tiling of large images. Download the image first then pass the downloaded file path to the view.\nIf you are using an image loader library, see the wiki, past issues and stack overflow to find out how other users have integrated loaders with this view.\n. Use BitmapFactory to decode it, then pass it in using ImageSource.bitmap\n. This view can't load tiles from a byte array in memory. It would need to decode the bitmap using BitmapFactory to display it, so you'd run out of memory either way. Write the byte array to disk and pass the file URI in - that way tiling will be supported.\n. Insufficient information. Please include:\n- Your code\n- A description of the error that occurs\n- Any error logs\nPlease also read the wiki and past issues.\n. What's the question?\n. Please read the wiki.\n. I've never tried that. Have you tried it?\n. Have a look at the configuration page in the wiki, you'll find what you need under the minimum scale type option.\n. This is a problem with the skia library that's included in Android. Please see various other issues related to this, and try saving the image with a different graphics package.\n. I'll close this now. There's plenty of advice on this in these comments, other issues and StackOverflow. The view can't easily be changed to work with image loaders because most work with bitmaps, bypassing this view's support for large images without out of memory errors. As kakai248 says, using an image loader to store the file locally is best.\n. I think the solution you have is pretty good!\nThere are reasons why so many methods are private and/or final - they manage the state of the view and all its internal variables, and replacing one of these methods might very easily break the view, in very subtle ways. I aimed to design the class with extension in mind, and provide the set of non-final methods required to do this, but I wanted to avoid a flood of bug reports from users who've overridden critical methods. Forking is usually the best option if you want to go further off-piste than the library allows out of the box. \n. Duplicate of #142 \n. I can't reproduce that problem, can you provide any more details? Are you using any gesture detectors or event listeners?\n. Please read through closed issues before raising a new one. If you're going to raise a new issue, code, steps to reproduce, details of the device, and the image you have a problem with are required.\n. I'm not sure I understand what you're asking. Have you read the wiki? You should find the answer there.\n. I haven't been able to reproduce this, I think it will only happen in a list view like this and I don't have a suitable app to test with. Please can you supply more of the code for your list adapter, and try debugging your app to see what method calls are being made to the view?\n. Please see the discussion on #218 - particularly my last comment. The short answer is yes, it's related to high density screens.\n. Which version of the library are you using? There's nothing on line 591 in the current version.\n. I think what must have happened is the view is detached from its parent when this happens. It it's still on screen I'm not sure how that can happen. To stop the exception being thrown I've added some null safety.\n. I can't provide much help with specific uses like this, but it sounds like you might need to create a subclass and override the default behaviour of onSizeChanged. There's no single correct behaviour for that method so I kept it simple and better suited to small size changes, and left it up to developers to customise it as they need.\n. What is PhotoViewAttacher?\n. No worries!\n. Please post your code.\n. Please post your code, this is not enough information.\n. The view doesn't handle very small images particularly well because it was intended for huge images, but you can get around this by setting a large maximum scale value.\nimageView.setMaxScale(10f);\n. That's a class from the sample project, the library doesn't include it. Copy it into your project in any package you like, and change the layout XML to use your package name.\n. There was a glitch in the matrix.\n. You can't use an HTTP URL because that doesn't support the random access needed to read tiles from the image. You can download the image and save it locally, or browse through past issues, the wiki and StackOverflow answers to find out how to set up Picasso.\n. You lose the support for images that are too large to fit in memory when decoded. If you're using a large image, some phones may crash with the code in your second post.\n. Please post your code and details of the images you're trying to display.\n. If you preload a bitmap, there's nothing the view can do to reduce memory usage. Save it to disk, and pass the URI of the file, which enables subsampling.\n. I tried this out but unfortunately when I zoom into an image that requires tiling, each individual tile is flipped, but not moved to where it should be considering the whole image should be flipped. Fixing this requires significant changes to the tile map initialisation to take into account which bit of the source image you actually need.\n\n. I can't test this because it conflicts with recent changes.\nBecause you're using Bitmap.createBitmap to create flipped copies of images, the view will be significantly slower and use more memory, causing more crashes. Tiles need to be flipped using a matrix when they are rendered. Unfortunately I won't be able to merge this PR if it adds calls to createBitmap.\n. Closing now because this approach to flipping will make the view use too much memory. Feel free to try it with matrix rotation instead of createBitmap.. Thanks for this, it looks valid to me but I've decided not to merge it. There are many different ways that method could be written and rather than adding settings to control what it does, it's much easier for a developer to override it in their own subclass and modify it exactly as they need.\n. The skia project have fixed a lot of bugs like this recently but the vast majority of shipped Android phones won't receive this update. Your best option is to save the JPG using a different application, which will in most cases result in it being in a format skia handles properly.\n. Great, glad to hear you've solved it! This is a bigger problem for developers displaying images they don't control, e.g. reddit browsers. Most manufacturers don't release updates for their phones and I don't know whether the skia update will be included in patches for anything earlier than Nougat, so we just have to wait for the older phones to go out of circulation.\n. It's better to post questions like this on StackOverflow, where it will be seen by more people. This issue tracker is mainly for raising bugs and questions no-one but a library contributor could answer. I can't see what the problem is from what you've posted. Maybe you didn't use the PinView in your layout. You don't need to use the sample fragment class.\n. Is it specifically the double tap zoom you need to know about, or do you also need to know when the user has zoomed in using pinch or the one finger gesture?\n. The next build will include an OnStateChangedListener interface which allows you to receive scale changed events. Hopefully that does what you need.\n. Looks okay, but under what circumstances do you not know whether setImage has been called?\n. Yeah that makes sense. I'm finishing off a change to zoom behaviour (#148) and will merge this when I'm done - but I'll rename it hasImage.\n. There are several reports like this in past issues. Please search them and you should find a solution.\n. I'm sorry, I don't understand the question!\n. No, but have you read the wiki? There are methods to convert view coordinates to image coordinates and that's all you need to decode part of an image yourself.\n. https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html\n. Just comment it out.\n. Please can you explain that in more detail and include a video showing the problem?\n. Please can you explain the problem and how this change fixes it?. Great, thanks for the explanation. I'll try out this fix.. I haven't been able to make the view trigger both a long press event and a double tap zoom event on the same gesture as you've described. On every double tap, regardless of how long I keep my finger on the screen on the second tap, it's interpreted as a double tap zoom (or a quick scale zoom if I move my finger). There is no long press event. Are you still seeing this problem? Is it specific to a device or Android version?. Okay thanks, as I can't reproduce this myself I'll close this until someone else does.. Duplicate of #82 #155. Please extend the class to implement onSizeChanged as you need it.. I assume this would happen because when you swipe down there's still a small horizontal component to the swipe in most cases. The simple fix is probably to only call requestDisallowInterceptTouchEvent(false) if dx > dy at line 824. I don't have an app I can test this in easily, if I made that change would you be able to test it?. Change line 824 from } else if (dx > offset) { to } else if (dx > offset && dx > dy) {. This is partly guesswork!. Okay, so it needs the same edge detection on the Y axis as it has on the X axis? That would allow a vertical scrolling view pager.. Fixed by PR #302, will be in the next version.. I don't think that's anything to do with this library.. What demo? I've never seen this before. The thumbnails at the bottom are not a feature of this library or the sample.. On my Nexus 5X (Nougat) this image is displayed without any problems. On my HTC One S (KitKat) when zooming in, tiles can't be decoded but there is no crash and no segfault. I assume this is a skia bug that's been fixed, so as with the others I can't resolve it myself and will close this.. Perhaps the image isn't large enough to need tiling? What are its dimensions and what device are you using?. Not enough information provided to investigate, so I'll close this. Please post additional info if there is still a problem.. The next release will support setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_START), which will set the minimum scale so no black bars are visible and show the top of a tall image and the left of a wide image. Hopefully this meets everyone's needs.. I couldn't reproduce this. Please can you provide your image, layout XML, configuration code and if possible, a video showing the problem?. Please can you explain what you mean, preferably with an illustration?. Duplicate of #19, #57, #104, #196, #264. Please check closed issues before raising a new one! Answers also available on StackOverflow.. You're welcome, thanks for the kind comments!. Duplicate of #95, #228. Image loader help is available in the wiki, various closed issues, and StackOverflow.. Have you modified the code in any way? Which version are you using?. Have you used gradle to include the library or included the code manually? I'm surprised this hasn't been raised before - I would have expected it to be a common problem if it occurs when using gradle.. Okay, thanks. I may be able to include proguard rules in the .aar file to preserve these constructors.. The next release will include proguard config to preserve the default constructors.. Duplicate of #213. Please search closed issues before raising a new one.. I don't think it will be possible to work around this one and it looks like a Xiaomi bug, which they'll hopefully fix.. This will be in the next release. It required dropping support for SDK 10-13.. There is no ImageView used.. I think this is a rare edge case but I've added a quick fix - if the current scale is at the minimum, a double tap is always interpreted as a zoom in.. Implement your own GestureDetector. Please read the wiki before opening new issues. https://github.com/davemorrissey/subsampling-scale-image-view/wiki/09.-Events. Duplicate of #19, #57, #104, #196, #264, #276. Please check closed issues before raising a new one! Answers also available on StackOverflow.. Duplicate of #213 . I've looked into this, and I don't think I can fix it, and if I can it would take a long time. The need for the view to work inside view pagers required it to intercept and filter all events that the parent view might interpret as a swipe, as well as handle all events that could be pan and zoom gestures, which includes the individual taps of a double tap. You can add your own GestureDetector with an onDoubleTap method that returns false, and add custom behaviour to that, but triggering the parent's GestureDetector will be harder.. After looking at this again I think I'm not going to be able to find a suitable solution. Making the view transparent to certain events is very difficult and would stop the view's gestures - not just double tap zoom, but probably also quickscale - working as expected. I'm going to close this as unfixable, sorry!. Please search closed issues and StackOverflow.. This is a question for StackOverflow.. position is an index, not a resource identifier. This is not a bug in this library, please ask this kind of question on StackOverflow.. Duplicate of #251 and others. Please search closed issues before raising a new one.. Question is not related to this library. Please do not raise issues to ask for help building your app - use StackOverflow.. Take a look at the sample code and extend it as you need. I can fix bugs in this library but can't help developers build their apps. If you get stuck, try asking questions on StackOverflow.. Indeed, but I can't help you build your app, or do your research for you.. The next release will support setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_START), which will set the minimum scale so no black bars are visible and show the top of a tall image and the left of a wide image. Hopefully this meets everyone's needs.. I think PR #302 mostly fixed this problem. It allows touch events to bubble up to the parent if you are at the top or bottom of the image (both of which apply when zoomed out). This allowed vertical view pagers to work, and also supports multiple image views in a ScrollView. Can you confirm whether there is still a problem here and describe your layout and what gestures are not working?. The view supported horizontal swipes years ago, and the change @Hezj made added support for vertical. There are horizontal and vertical view pagers in the sample app and both work as I expect them to - try it for reference. What's the problem you're having? . See the wiki for instructions on disabling tiling. This should enable GIF support. Bear in mind that animated GIFs are not supported.. New method getPanRemaining added for next release.. I think PR #302 mostly fixed this problem. It allows touch events to bubble up to the parent if you are at the top or bottom of the image (both of which apply when zoomed out). This allowed vertical view pagers to work, and also supports multiple image views in a vertical ScrollView. Can you confirm whether there is still a problem here and describe your layout and what gestures are not working?\nNote if an image is zoomed in, swiping up on that image will pan it up until you reach the bottom. Then a second swipe is needed to scroll the parent view up. That's the intended behaviour.. I can't reproduce this. It may be dependent on the image size, view size and screen size/density. I recommend putting the image in assets rather than drawables so you can be sure Android won't scale the image when decoding it. At least make sure the image is in drawable-nodpi only.\nIf you're able to reproduce this, and provide more details of the image, the affected devices, and how your app is set up please let me know.. I'm sorry I didn't really have an answer for this, I don't have a lot of time to build sample apps and experiment with solutions. Did you find a fix?. Unclear what the problem is and what's been tried to resolve it. Closing.. I was a little skeptical about how many developers would need free rotation of images large enough to need subsampling, but a few have asked for it now. My main reason for not doing it was it's incredibly complicated! Unfortunately I doubt I can offer much assistance with this because it's now 2 or 3 years since I built the core of this library and it's not fresh in my memory, and making a change like this probably involves changing the core assumptions the code is based around.\nI've noticed there seems to be some good progress towards this on this fork, is it yours? https://github.com/IndoorAtlas/subsampling-scale-image-view/commits/feature_rotation. I think you're best off working on a fork. vTranslate is part of the internal state of the class and I've been very careful what's exposed to subclasses so they can't get the view into an unexpected state, and to preserve backwards compatibility. If vTranslate was exposed I couldn't make these guarantees, and as rotation is a fundamental change I think it's best done on a fork. Merging updates should be easy though, not much changes!. Closing now as this isn't a bug or enhancement request, but add a comment if you have a fork with this working, it might be useful for others!. InputStreams are not guaranteed to support the random access needed for reading tiles from a large image, so providing a constructor that accepts one is a recipe for confusion. The view would have to disable tiling (and probably EXIF orientation) automatically, leaving developers confused why the large image support is broken or the view simply crashes with an OOME. I prefer to avoid this confusion.\nIf a developer knows what the InputStream is, they can add a few lines of code to either decode it themselves, or write it to a file. This produces a much more predictable result.. Hmm that's true, I got my wires crossed there. However I would still prefer not to accept an input stream because it could be partially read, blocking or already closed, and I'd then have to handle the error states. It will also change the interfaces for the decoder classes. Technically it can be made to work, so you could fork it, but I don't plan to make the change here.. I'd like to do that, and did once look at how I could do it, but because of the way the view works it's quite complicated to do. I'll keep this open and hopefully have another look some day.. The difficulty is in changing fitToBounds and limitedScale so that they work differently when there is a gesture in progress, also calculating the \"resistance\" and the center position the image should spring back to on release.. This is not really a priority. This view's purpose is to display huge images, and there is no support for decoding tiles from a GIF in Android's built in BitmapRegionDecoder class. The GIF format is not suited to large images, and animated GIFs could not be supported. Alternatives are available for developers who want to show small animated GIFs.. By the way, if you disable tiling, small GIFs can be displayed.. The matrix private field applies only to each individual tile so changes each time a tile is rendered. It might just about work if the image is small enough to be rendered without tiling, but there are no guarantees about its state or what it represents.. When I merged your previous PR and released it as 3.7.0, developers reported problems I could not reproduce, caused by spurious values in the AttributeSet passed to the view's constructor on inflate. Rolling back that PR fixed the problem. I don't have a solution so will stick to the older tools and gradle scripts.. Have a look at the recent bugs raised. Initial indications were that rolling back the build changes fixed the problem, but I'm awaiting more feedback that might suggest my proguard file was the cause. It's not clear whether problems only show up in release builds.. 3.7.0 was released a few days ago and immediately caused problems. I don't test release signed builds and will have to set something up to do that. I'm using Android Studio and build releases from the gradle command line.. I don't think this is a bug with the library. You'd probably get the same kind of error using an ordinary ImageView. Can you change your code to make sure the view is not loaded with an image that's been recycled?. I couldn't get the code posted by @Uiasdnmb to work. The view will not load the base layer image until it has dimensions. Events are happening in the wrong order, and there is no call to onDraw after the view gets dimensions, so it never loads and the transition does not start.\nThis may be fixable with extra code in onSizeChanged, but I've seen what the animation looks like and it doesn't achieve the same affect as native transitions due to scale and center being animated while the view's position and size are also being animated. This means the image center moves along a curved path. The exit transition after zooming in also looks odd - parts of the image are outside the view bounds and become visible while it's shrinking and zooming out.\nI've tried another approach - transitioning from one ImageView to another ImageView, then superimposing the SubsamplingScaleImageView on top of it. That works very well for enter transitions, and looks pretty good for exit transitions unless the thumbnail image is low quality. However, if the thumbnail's scale type is centerCrop the exit transition looks rubbish - an Android bug I can't find any solution for.. Initially I got it mostly working without the postpone - enough to see it animate - but the view initialised incorrectly (and after the start of the transition) because it loaded tiles appropriate for a thumbnail sized view. Once I added the postpone call, it stopped working completely. There was no call to onDraw after the view was given dimensions, so no trigger for it to initialise. This can be fixed but as I said above the resulting animation isn't quite right.\nI found the enter transition from centerCrop -> fitCenter worked well with a superimposed ImageView, but the exit transition was buggy.\nThere are other options but they're all very complicated.. This looks like good code to me but I'm not keen on expanding the scope of this library into image loading and caching. There are already quite a few libraries that specialise in this, and starting to include the functionality in this library is likely to result in a lot of feature requests or new bugs. I'm going to keep the focus on displaying local images.. Duplicate of #16, #304. Check the forks listed in #304, they may do what you need, but if it's an overlay you're trying to rotate, check StackOverflow for answers on image rotation.. As a workaround, you can call getScale() and getCenter() before disabling pan, and then setScaleAndCenter() afterwards. I doubt the image will visibly move because rendering is asynchronous.\nI know that's not ideal, but this is one of the cases where there isn't a single behaviour that meets everyone's needs, and it's not worth changing the interface or adding a configuration option.. I haven't used Glide so don't know what this means. This library doesn't have a way to know when you're done with an image and it should be dropped from a cache, can't you do that from your Activity?. Insufficient information.. Please review closed bugs, the wiki, and StackOverflow. There's plenty of information available there. This view does not extend ImageView because it displays tiles, not single images, and doesn't support shape drawables and various other ImageView functionality.. I prefer the library to have a simple public interface that works for most people, so it's hopefully impossible to corrupt its internal state by subclassing it, but easy to do common things like draw overlays with examples I can document clearly. Another concern is that I can't guarantee backward compatibility without a well defined interface.\nI don't want to spend a lot of time responding to requests for help on how to achieve complex things, or fielding bug reports where it doesn't work the way somebody wants, so my approach has been to keep this library clean and simple and appropriate for most use cases, while encouraging those who need something different to fork it, and start hacking. Hope that makes sense!. If you mean how to extract an image from the view, please check closed issues. Duplicate of #19, #57, #104, #196, #264, #276, #287.. I think this is a build error, and not directly related to this library. Have you tried it on other devices? Does this happen with production builds only or debug too? Have you searched for e.g. java.lang.UnsatisfiedLinkError android to find causes of this error?. It's worth trying, but my experience has been that the view with no overlays drawn on top performs very well, and once you start adding overlays it takes a lot longer to render. I never worked out why.. Please check logcat for errors, and search through closed issues for possible solutions. You should also attach the image you're having a problem with, and try other images to see if they're affected.. Can you tell me what this fixes? I haven't seen any problems with single tap detection, the sample library has working examples.. Not enough information provided. Please always include a detailed description, your code, any errors, expected and actual behaviour, and screenshots where possible.. Looks good, thanks! However I think it would make sense to add a getVisibleRect or viewToSourceRect method to the class which would make this much easier, so I'll try to find some time to do that.. Yeah it was private, and I refactored the class to re-use Rect and Point instances.. I've added viewToFileRect and visibleFileRect methods which will return a rectangle from the source file that correctly takes into account the image orientation, the region displayed, and the actual width and height of the file.\nMethods that return source coordinates don't take these into account so the old viewToSourceRect method wasn't suitable for this purpose. It does work fine if you're displaying the whole image in its native orientation, and only then because BitmapRegionDecoder handles negative coordinates.\nI'll write a wiki article once this is released.. I'm not really sure what you mean by this - do you mean the whole image subsampled, or the top left tile for cases where rendering in tiles is required? Either way this is highly variable and depends on the phone's screen density and size as well as the view's settings. If you want to get part of your image, just use BitmapRegionDecoder from the Android SDK.. Developers are going to want different things from the callbacks (e.g. view coordinates, image coordinates, current scale etc.) so I don't think there's a single simple listener interface that will work for everyone. There is already support for OnClickListener and OnLongClickListener and for those who require something more complicated, there are samples in the code and examples on the wiki with blocks of code that can be used, giving access to whatever state the developer needs.. Please try setMinimumTileDpi(240) (choose a number that's appropriate for you).. I don't think it's possible using this library, about 99.9% of the code would be different if images were changed to Views :-). When you say \"a lot\", can you explain - is that lots of times across thousands of installs, lots of times every time you use the view e.g. when panning, lots of times but only once each time the view loads? This is a strange one, it looks like a possible multithreading race condition, but even then it's hard to see how vTranslate can be null on that line. Can you provide more details of your setup?. There are many closed issues with errors like this. Please search through them for possible solutions before raising a new issue.. This is your code, not the library. Please ask for help on StackOverflow.. It's hard to see what's happening here because I don't know what the bounds of the view are, what the bounds of its parent are, or what your layout XML looks like. I think you just need to check your layout because this doesn't seem to be a bug with the view.. Try using Hierarchy Viewer to find the boundaries of each element, or for a quick and dirty method, put a background color on each element to see where it is.. Did you manage to solve this?. I cannot help with this kind of problem unless you include details - error messages, what gets displayed, the image you're using, the phone you have a problem with, whether other phones are affected etc.. The only way to do this at the moment is to create instances of ImageRegionDecoder and ImageDecoder that contain your input stream and read from it. You would then pass any dummy URI to setImage to make the view load from the input stream.\nI'm not sure how well this will work in practice. A lot depends on the lifecycle of the input stream and whether it supports random access, as required for tiling. If any other thread reads from or closes the input stream the view will stop working. If your image is not large enough to require tiling - anything under 3000x3000 should be fine on most modern devices - it's best to decode it yourself using BitmapFactory.\nHere's an example of custom decoders using an input stream: https://gist.github.com/davemorrissey/1f247d415e21ed10fddfd7fee49b4ff3. There's nothing I can do about Skia logging, but you should be able to suppress it with your app's logging configuration.. Why not give the pins an outline or drop shadow so they'll show up, and/or draw a semi-opaque dark circle underneath them until they're moved?\nPadding is kind of a tricky concept when you can zoom in to the image, so it's hard to get the right behaviour for everyone. It's not really well supported and generally expects equal top/bottom padding.. Is that something you can fix by offsetting the image to place the arrow in the correct place? The sample code does that.. It's hard to see how this would happen in normal use. Can you describe when it happens, whether it's before load, after load, on touch, drag, zoom, fling, custom animation or whatever?\nI think the only way vFocusStart can be null is the anim was started some time after it was constructed, and the view was reset in the meantime. I can guard against that but it would be good to know what the real cause is.. I've added a basic fix for the NPE but not addressed any possible root cause. I suspect when this NPE happens the view is in a reset or loading state so the animation can be safely ignored. If you do find why this was happening let me know!. This is logged as a warning only and you can ignore it. EXIF orientation is unsupported for PNG images but the view doesn't know whether it's dealing with a PNG or JPG so just attempts it for every image. If you know for a fact you're loading a PNG image, don't enable EXIF orientation and this warning won't be logged.. Sorry I don't know what you mean?. There's a wiki associated with this project that has this answer. You need to use recycle(), and depending on your use case you may want to call invalidate() afterwards to force an immediate redraw.. There are lots of closed issues asking this same question, please have a look at those.. I can't see any problems with double tap zoom using the sample library. That doesn't use URIs to load the image but I don't know of any reason why that would make a difference. Please could you describe the problem in more detail - what exactly are you trying, what happens and is there any error message? Can you try loading a resource or asset instead to see if that makes a difference?. What is the URI you're using? It looks like it must start with android.resource:// and that resource doesn't exist.. Can you debug this and find out why SkiaImageRegionDecoder is reaching line 70 if your URI doesn't contain android.resource? That's a mystery to me.. Please can you try version 3.7.1?. Release 3.7.2 is available and should fix this problem. The 3.7.0 release contained a jar instead of an aar, so was missing the meta information for the custom attributes. 3.7.2 uses updated build scripts but contains the aar.. Thanks!. Any logs?. No, the logs from the device when you try to load the image.. Please search StackOverflow and Google for guides on using logcat to debug problems.. Can you describe this in more detail please? You need to zoom in before you can move the picture.. Can you try to reproduce this with 3.6.0? There's nothing related to this library in the stack trace and I can't reproduce this problem.. Is your view in a ViewPager or DrawerLayout?. Can you please post your code for initialising the view, and the layout XML? I can't reproduce any of these problems.. I assume ImageMediaItem.getPath() returns a URI? Does the URI start with android.resource://? If not I can't explain why you're seeing the Failed to initialise decoder message.\nFor the other crash, have a look at the Issues with ViewGroups section on this page and see if that can fix the problem: https://github.com/chrisbanes/PhotoView. I've set my sample app up to pick images from the photo gallery and load images using their URI e.g. file:///storage/emulated/0/DCIM/Camera/IMG_20170824_191737.jpg and this works perfectly, with no error logs. I can't explain why you're seeing Failed to initialise bitmap decoder - are you able to debug your app to see how SkiaImageRegionDecoder reaches line 70?. That suggests your layout XML has a src attribute on the view's element. Are you able to debug the SubsamplingScaleImageView constructor at lines 312-317 to see if the attribute has a value?. Please can you try version 3.7.1?. Very strange. I rolled back the PR I merged into 3.7.0 which updated gradle and Android tools, and that fixed it. Thanks for letting me know.. Release 3.7.2 is available and should fix this problem. The 3.7.0 release contained a jar instead of an aar, so was missing the meta information for the custom attributes. 3.7.2 uses updated build scripts but contains the aar.. There's a common theme with other bugs in 3.7.0 - the constructor is being called with an AttributeSet with spurious data in it. I can't see why this would happen and haven't changed any code related to it, but I did merge a PR that updated all the build tools and maybe that's caused an issue. I can't reproduce this and haven't found any answers yet so I'll probably try rolling back the build tools change.. Please can you try version 3.7.1?. Okay thanks - let me know how you get on! 3.7.0 included an update of all the build tools, but also added a proguard config file with a simple \"keep everything\" rule. I've assumed the build tools caused the problem but maybe it was the proguard config. One other developer reported 3.7.1 fixed their related issue but didn't elaborate on whether they were testing a release build.. Release 3.7.2 is available and should fix this problem. The 3.7.0 release contained a jar instead of an aar, so was missing the meta information for the custom attributes. 3.7.2 uses updated build scripts but contains the aar.. Proguard config added in 3.7.0 is another candidate. So far I have not reproduced this, I have made a signed release of the sample project using version 3.7.0 from the maven repository and it worked without issues.. Yes, the new release.gradle file uploads the jar file plus javadocs. I've tried just reverting the content of the release config back to what it was but that doesn't work. It's next to impossible to find a decent reference for this.\nI don't know why 3.7.1 isn't in the repository, I released it as normal.. I don't use BinTray, I use the Sonatype central repository manager. All the tutorials I can find seem to use BinTray and rely on including config gradle files from random github accounts - I can't say I'm too keen on that.\nI'm not having any luck getting the new setup to upload an aar file, even though the packaging is specified as aar.. 3.7.1 is on maven central but not indexed by their UI yet. The aar is here: http://central.maven.org/maven2/com/davemorrissey/labs/subsampling-scale-image-view/3.7.1/subsampling-scale-image-view-3.7.1.aar. I've just released 3.7.2. It contained just the aar, the pom, and signatures. I just deleted a lot of the additions from release.gradle - first time I tried that I only got signatures but a second attempt worked.. Thanks for your help with this, I should have spotted the build contained more artifacts than usual, all I did was check the aar was there. The packaging is specified as aar in the pom so it seems like that should be the default even when a jar is present.\nThe devs who reported this didn't seem to be using any of the custom attributes in their layouts, which is why I didn't try that myself!. Just curious why newlines at the end of files are considered an error?. I'm sorry but I can't provide help with the development of your app, please ask questions on StackOverflow.. It's flexible, so you should be able to do this.. Hardware acceleration is on by default for apps targeting SDK 14+, which should be all apps by now. It will only be disabled if a developer has chosen to disable it, so I don't think there's a need to document this.. I was working on the same changes locally, along with other refactoring. Closing this PR as it duplicates that work.. Thanks for this. It changes the default behaviour for tall images so they zoom in to the top left after load. Unfortunately there are a few reasons why I won't be able to merge it:\n\nChanging the default behaviour causes unexpected problems when developers update, and I don't believe the new behaviour is right for most.\nZooming in to the top left overrides any scale and center the developer has preset.\nMany developers wouldn't want the animation but it isn't configurable.\nThe configuration option setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_CENTER_CROP) can be used to avoid black borders, if that was the aim of this PR.\n\nIf you can describe what your requirements are, another solution may be possible.\n. I didn't design the view with small images in mind so it doesn't handle them well. The default is to show the image centered with black borders on all sides if filling the screen would mean exceeding the maximum scale, giving a highly pixellated image. This is right for some developers, but not everyone so I need to make it more configurable without making it more complicated than it already is!\nHere's a workaround you could try. For small images, this adjusts the max scale on load so the image will fill the screen but can't be scaled any further. Use this with SCALE_TYPE_CENTER_CROP and I think you'll get the behaviour you described.\nimageView.setOnImageEventListener(new SubsamplingScaleImageView.DefaultOnImageEventListener() {\n    @Override\n    public void onReady() {\n        if (imageView.getMaxScale() < imageView.getMinScale()) {\n            imageView.setMaxScale(imageView.getMinScale());\n            imageView.resetScaleAndCenter();\n        }\n    }\n});. Have you read the wiki? There are instructions there on how to do this.. I'm sorry I can't provide help with this sort of question, but there are examples of drawing pins and adding custom event handling in the sample library and that should be enough to provide the answer. If not, please try asking questions on StackOverflow.. I have tried rendering tiles as segments, but this performed no better than default. Using a matrix to draw a part of the bitmap is no faster than drawing the whole bitmap. Any workaround for this using smaller bitmaps would make loading much slower so this is a non-starter.\n\nOn a more positive note, API 26 added Bitmap.Config.HARDWARE and this gives far better results than ARGB_8888. It's worth trying this when it's available.. I have committed an experimental and very buggy SurfaceView implementation to the surface-view-experimental branch. Under certain circumstances this performs better than master, but in others it is slower.\nSurfaceView canvas does not support hardware acceleration until API 26, and with this enabled, performance is far worse. It turns out that forcing software rendering for the view vastly improves performance for very large bitmaps that are displayed without subsampling, while quite noticeably reducing performance for smaller and subsampled bitmaps. In other words, software rendering is slower but lacks the large bitmap performance cliff edge seen with hardware rendering.\nThese are my results:\nBitmap config: ARGB_8888\nImage: JPG photo 4912x3264\nScreen: 1080x1920 landscape\nDevice: Nexus 5X\nView master\n Software canvas\n  * Paging: VERY FAST\n  * Pan/zoom: FAST\n Hardware canvas\n  * Paging: VERY SLOW\n  * Pan/zoom: VERY SLOW\nSurfaceView surface-view-experimental\n Software canvas\n  * Paging: MODERATE\n  * Pan/zoom: MODERATE\n Hardware canvas\n  * Paging: VERY FAST (after redundant invalidation fix) \n  * Pan/zoom: VERY SLOW\nIn conclusion, it's not worth migrating to SurfaceView because better results can be achieved by calling setLayerType(LAYER_TYPE_SOFTWARE, null) on the view. For now it's up to developers to do this manually if they're displaying large bitmaps and want them displayed at the highest possible resolution.\nIf I can work out where the performance crossover is, this could be done automatically, although that could cause unexpected rendering behaviour in subclasses.\nOpenGL is still an option.. Seems like it would risky to adopt that as a solution, given switching to software rendering produces a decent result and works on the other 99.7% of devices. It does make me wonder what will happen if I try to load lots of tiles into OpenGL textures and hit a limit.\n@franciscofranco I know you're using 240dpi now, but if you get the chance could you try forcing software rendering with a much higher DPI to see if you get the same result I did?. This is the opposite behaviour to what I've observed. Calling setLayerType(LAYER_TYPE_SOFTWARE, null) on the view definitely makes it perform a lot better with a large unsampled bitmap at >320dpi, and there's some stutter but it's not bad considering my test image is about 60Mb as an 8888 bitmap.\nIt's hard to see how a large image wouldn't be subsampled if you set the quality to 160dpi, and I've certainly never seen poor performance with a subsampled image. Enabling debug will show you if the image has been subsampled - it will have a magenta border and the \"ISS [x]\" label.\nAs you have a Nexus 5X it's worth trying that in case this is hardware dependent.. If pan+zoom are very slow with N5X/8888/>320dpi/software but fast with hardware, that's the opposite of my observations.\nOpenGL may be the last hope for a universal fix. I don't think I'll have time to attempt it for a while, there are other projects I need to spend my time on.. Call tilingDisabled() on your ImageSource instance. Android's BitmapRegionDecoder does not support BMP files. It would be better to convert the file to PNG or JPG.. Please state expected and actual behaviour, details of the test device, and supply your code and image when raising bugs.. Have you tried commenting out the Glide decoder to see if it's causing the problem? On what phones is this happening, with which images?\nYou are only overriding the ImageDecoder, and not the ImageRegionDecoder. Normally you should override both, because unless you explicitly disable tiling, you don't know for sure which one will be used. It depends on view size and screen density. Also it looks like the decoder is forcing the bitmap to be up/downscaled to match the screen size, which may use more memory for some images on high density screens.\nThese don't explain the OOME from the ExifInterface. With 3.8.0, I changed from the core library's version, which was deprecated and insecure, to the new support library. Perhaps this works differently.. I don't have a Nougat phone to test this on. It's worth trying without the Glide decoder but as I mentioned the crash seems more related to the new ExifInterface library. I can't find any mention of problems with it, but the old version shouldn't be used any more so I'm not sure what's the best course of action if it's broken.. Great app, I hadn't tried it before!\nThere are a couple of things I'm curious about in the code where you seem to have reproduced features the view provides, though I don't think they're anything to do with this bug.\nOne is that you set the double tap zoom scale by decoding the bounds again. When onReady is called you can call getSWidth() and getSHeight() to find these values. The other is you can use the view's other ORIENTATION options to manually rotate the image, by first calling getAppliedOrientation (after onReady) to find out the orientation determined by EXIF, then applying the manual rotation on top (e.g EXIF = 90 + manual = 90 = ORIENTATION_180). Then you wouldn't need to decode the bitmap yourself.\nWhat was the reason for trying Glide, was there a particular issue you needed to solve?\nI'd be happy to have a play with this myself and submit a PR.. Yes, since 3.7.0 this has been possible:\n    imageView.setBitmapDecoderFactory(new CompatDecoderFactory<ImageDecoder>(SkiaImageDecoder.class, Bitmap.Config.ARGB_8888));\n    imageView.setRegionDecoderFactory(new CompatDecoderFactory<ImageRegionDecoder>(SkiaImageRegionDecoder.class, Bitmap.Config.ARGB_8888));. There's a discussion on ARGB_8888 performance on #366.. With the code I saw, I don't think you were using Glide to load the really large images, because you only provided an ImageDecoder and not an ImageRegionDecoder. This meant they were being loaded as RGB_565, and that's why the performance was better. Only smaller images would have used Glide and been decoded as ARGB_8888, and they were probably small enough for good performance.\n\nIf you're happy to sacrifice a bit of resolution for better performance with ARGB_8888, try setMinimumTileDpi(240) or lower. The default as of 3.8.0 is 320.\nYou could also try setLayerType(LAYER_TYPE_SOFTWARE, null), but as you've seen from the other #366, results are unpredictable.. If ExifInterface is causing the problem then I'm not sure what to do. The old version isn't supposed to be used any more. I need to wait a bit longer and see if other developers are encountering the same issue, but if you need a fix you could turn off ORIENTATION_USE_EXIF and get the orientation yourself using the deprecated core library class.. Still no reports of this problem from anyone else. Also nothing coming up in Google results. Are you loading a layout with many view instances? If so all the instances might be trying to load image EXIF data simultaneously.\nLazy loading the orientation when required is an option. However I don't have a reason to believe this is a proper fix, it will just move the bug, so I'd like to understand what's going on first. I have no idea how I'm going to do that unless other developers start reporting the same problem.\nI think at the moment your best bet is forking the project and deleting that line.\n. Okay, so I need to choose between #282 and this. Fixing this would win if I could find any evidence of it being a widespread problem.. There is a wiki and a sample project. Please read these before opening issues. If you need further help, it is better to ask on StackOverflow.. Please read the contributing guidelines before opening an issue. There is a wiki and javadoc available, and I'm unable to help you build your app if you get stuck.. Please read the contributing guidelines before opening an issue. There is a wiki and javadoc available, and I'm unable to help you build your app if you get stuck.. Insufficient information provided.. You'll need to add your own exifinterface dependency for the correct version for your project. I assume this is the standard way of solving this problem, since not all projects will track the latest support lib versions.. Insufficient information provided. Please complete the template.. Please complete the template, I need more information.. Please read the wiki and follow setup instructions before raising bugs. Web URLs are not supported. Download the image first.. You haven't provided the stack trace or completed the requested template, but I'm guessing you can fix this with ImageSource.cachedBitmap(bitmap). Insufficient information provided, please complete the provided template. Please also view the wiki and closed issues before opening a new issue - you are very likely to find the answer to your question there.. No further information has been provided, so I\u2019ll close this now.. That solution will cause an OutOfMemoryError if the image is big. There's a page on this in the wiki: https://github.com/davemorrissey/subsampling-scale-image-view/wiki/X.-Picasso,-Glide,-Fresco. This is a question about how to build your own extension to the library, which unfortunately I can\u2019t help with. Questions like this should usually be asked on StackOverflow, but I\u2019ll leave it open for a week to see if another developer can help you.. Insufficient information provided. Please complete the template and describe what you are trying to do, and what you have tried.. That looks right. What\u2019s the problem you\u2019re having?. Closing because it's unclear what you're asking.. Duplicate of #208, #297, #308. Please read the contributing guidelines before opening new issues, and do not leave the template blank.. Looks interesting, did you do this because you needed the feature? Until now I don't think anyone had asked for it. It'll need some thorough testing which I don't have time for at the moment but I'll come back to it.. The only published app I have using this lib is the sample app so I can't confirm any increase in crashes. This is another thing nobody else has reported, which I would have expected to be reported if it was a common problem. Maybe try using the SERIAL_EXECUTOR and call setEagerLoadingEnabled(false) to revert to old behaviour?. Interesting, and a bit worrying. I wonder if this would have somehow stopped your EXIF crashes too? I may need to check the conclusion I reached that BitmapRegionDecoder is thread safe in all recent versions of Android.. Normally I'd agree, but the exact same versions of Android were affected by both problems. Seeing as I have no explanation for either, who knows whether it's something related.. It seems like you might be preserving the fragment instance on rotate, because this isn't the default behaviour for Android. Consider either allowing fragments to be destroyed and recreated on rotate, or override this: http://davemorrissey.github.io/subsampling-scale-image-view/javadoc/com/davemorrissey/labs/subscaleview/SubsamplingScaleImageView.html#onSizeChanged-int-int-int-int-. That will work fine unless the view changes size for other reasons like headers and footers appearing/hiding. That method is designed to be overridden so you can get the right behaviour for your app - there isn't a universal solution.. This is actually the intended behaviour, because the asymmetric padding code wasn't written with this use case in mind. In the absence of a more universally suitable default, the view positions the image according to the ratio of the padding, not centered in the space between it. This generally gives the least weird looking behaviour as you zoom in, while the image is between the padded height and total height of the view. It doesn't know you're padding the view to reserve space for a header.\nI think there may be apps using this view that have worked around this problem but I don't know how. You might be best off forking the project and adjusting the code commented \"Asymmetric padding adjustments\" to get the behaviour you want.. What have you done to try to solve this problem and what makes you sure it's a bug with this library and not your code?. The sample app uses the same methods to add overlays and works on all supported versions of Android. Please try that and confirm it works on your test phones.. Fix your layout so the view is not underneath the toolbar.. I don't know. But you're in a better position to debug your app than I am.. Usually this is because the image isn't big enough to need zooming, and you're already at or very near the max scale.. Double tap zoom doesn't work in stages - it zooms in to the double tap zoom scale or out to the minimum scale, and is not interruptible. I cannot reproduce what you've described.\nWhen you opened this issue you deleted the standard defect template. Please can you complete it with sample images, affected devices, your code, and detailed steps to reproduce.. This is explained in the wiki. https://github.com/davemorrissey/subsampling-scale-image-view/wiki/07.-Configuration. I think your code has an infinite loop.. Can you explain what you mean?. That doesn't sound related to what this view does. However you might be able to use classes from the sample as a starting point for drawing on a zoomable image.. Please don't delete the issue template when opening an issue, it provides useful information. I didn't write PicassoRegionDecoder and have never used it so I'm not able to help fix problems with it. I recommend trying the library without any extensions first.. Not directly but you could try a local image for testing, or just some code that downloads an image to a file.. Please complete the issue template.. Your code?. Set the scale type before loading the image, not when it's ready.. https://github.com/davemorrissey/subsampling-scale-image-view/issues?utf8=%E2%9C%93&q=is%3Aissue+gif. I don't know. Have you tried it?. If you are reporting a problem, please use the issue template. You deleted it when opening this.. URLs are not supported. When opening issues, please do not delete the issue template.. Can you complete the standard issue template please?. No information provided.. Release 3.10.0 includes sources and javadoc.. Nice, thanks! I'll try this out in the kotlin sample.. When opening an issue please can you complete the issue template instead of deleting it? It would provide useful information.. Insufficient information provided.. Can you explain what setToTop and setToBottom would do?\nThe getCenter method is explained in the javadoc and the wiki for this project: it returns the source coordinates currently at the center of the screen. I'm not sure exactly what you mean by up to down coordinates, but the center works well regardless of image aspect ratio and makes handling orientation changes easy.. How that works would be dependent on whether the image and view aspect ratios. Have a look at the wiki, there are methods to move the image anywhere you want it.. You haven't attached your image, shown your code, listed affected devices etc. Please don't delete the template when opening issues.. I don't know what MTK or BSP mean, is this some custom rooted version of Android or does it identify a particular phone make and model?\nAlso are you sure this is the sample because the package has been changed to com.android.test. What other changes have been made?\nPlease can you attach the image as requested?. There must be something wrong with your build environment or the phone. If the sample works, there's nothing wrong with this library.. Requested details of device, Android build and images have not been provided and the issue template was deleted so I have no information to investigate, and I'm closing this now. The crash is in the skia library, and likely to have been fixed in more recent versions of Android.. Can you attach examples of affected images and show the code you're using to configure your view please?. Have you read the wiki?\nhttps://github.com/davemorrissey/subsampling-scale-image-view/wiki/02.-Displaying-images#orientation. You should be able to fix this by calling getSSIV() to get the SSIV instance, then following the instructions in the wiki to enable EXIF orientation. However you haven't provided your code or images so I can't say for sure. Closing this now.. Hi James, you've deleted the issue template so there's not enough information here. Please can you provide your source code, affected Android versions and devices, a more detailed description of the problem, screenshots etc.. I suspect this is because you've put the image in a density specific resources directory, and not in assets as recommended. Android may be scaling the image and causing unpredictable results.. Perhaps Android Studio put the resource somewhere you weren't expecting. If you need to keep the image in resources, make sure it's in the nodpi folder, but I recommend putting it in assets.. Whether this library is suitable as the basis for an image cropping tool is dependant on how you want it to work. I'd imagine it will help in some cases, but you will need to decide for yourself. I can fix bugs but can't help developers build their apps, sorry!. Does this cause a problem when you include the compiled aar file as a dependency in your app?. Odd, Android Studio has never even given a lint warning about this and compiles for me. I knew the standard had changed and use it for other projects but I'm not actively developing this one. You can submit a PR if you want.. Please search through closed issues, you'll find previous answers to this question there.. I don't understand the question. Have you read the wiki and looked at the sample app? I'm sure you'll find what you need there.. I'm sorry I can't spend my free time writing code for developer's apps. Please ask for help on StackOverflow. This repository has a detailed wiki, complete javadoc for every public method, and answers to questions including this one in closed issues. The contributing guide links to these. Please check them before opening new issues, thanks!. The doc says \"Find the area of the source file that is currently visible on screen\". You can't directly set the rect, you can set the center and scale with some maths of your own. I don't recommend rapid decoder any more but the interface is very simple and thoroughly documented.\nPlease bear in mind I don't earn anything from this library and it's really helpful if you do a little research and experimentation before opening issues to ask questions - I can't support 4,000 developers this way. Alternatively you could try asking questions on StackOverflow where the community can help. Thanks!. A setter for visibleFileRect cannot work for everyone because the aspect ratios would not match and the bounds might break other restrictions. All the methods you need are there and well documented, and I cannot write the code for your app because you need to work out how you want to handle edge cases. Please ask any further questions on StackOverflow.. It's always worth checking closed issues before opening a new one - you can used cachedBitmap in this situation.. You haven't included the stack trace so I can't help you. However, loading a preview yourself from the same image file that will be displayed full size is a waste of time and will only slow down the view loading, especially as I think this code will load the full image with a sample size of 1 for any image under 2048px. If you don't have a preview image ready made, don't bother with this feature.. Your attempt to load a reduced copy is duplicating the same work the view does, so will double any loading delay. You've set the off screen limit already and I don't know of any other fix.. Duplicate of #313. You haven't provided images, screenshots or detailed anything you've tried to resolve this problem so I can't say much. I suspect the image isn't big enough to zoom or Glide is scaling it down, but I can't provide support for Glide.\nPlease read this: https://github.com/davemorrissey/subsampling-scale-image-view/wiki/X.-Picasso,-Glide,-Fresco. Please don't delete the issue template. I can't help fix the bugs in your own code, especially when you haven't included it in the question, and I recommend learning more about Android's event handling and when you should pass events up to the SubsamplingScaleImageView class for handling.. The view can't load until it has dimensions. It doesn't have dimensions until it's visible. However it doesn't display anything until it has loaded an image so that doesn't usually matter. The solution you already have is the best one.. This is really a generic Android question that would be better on StackOverflow. You haven't mentioned your IDE, any error messages, how you set up your project, your gradle code, or what you tried to fix the problem, so there's not enough information here to help you.. Duplicate of #251. Please read the wiki and past issues before opening new ones.. Please include your code.. I don't know what this means. Please complete the issue template, I can't help you if you delete it and provide none of the requested information.. Given your specialised requirements I think the best option would be to fork the library and make a few tweaks. There may be workarounds - if you know the dimensions in advance you can specify a region covering the whole image and that disables the fallback to ImageDecoder, or you can give a factory class that returns the same object instance for both decoder classes, but a modified fork would be cleaner.\nImageSource and most of the library is final because I wanted to be very clear about what overrides are supported, and prevent subclasses putting the view into unexpected states. I was worried I'd get a lot of bug reports from developers who unwittingly broke the \"state machine\". The protected methods are probably a mistake, they should be package private. Again, forking is the solution here.\nSource interfaces might have worked as an alternative design, but wouldn't necessarily be simpler because the view needs to know whether region decoding and subsampling is supported by the source and whether it should get the bounds and load tiles asynchronously. The ImageSource class is concerned with the source of the image data, not the format of that data, so I think trying to merge them would make the view more complicated to use.. Did you manage to get it working the way you wanted?. If images are not prefetched it's usually because the view has no dimensions so cannot tell what tiles it should load. Make sure the offscreen page limit is set appropriately.\nI'll close this for now, but if you have changes on a fork that might be useful for others, please comment here again!. I think this is because you're using PAN_LIMIT_CENTER, try without it.. You can just specify the version you want in your gradle file and this overrides the library version.. If you're using a custom executor, that's the cause of this problem.. When opening an issue, please complete the template. You have provided no information.. You might want to have a look at the fork dhabensky created for PR #424. I'm not developing this library now so I don't know if I'll merge it. Otherwise you can use PAN_LIMIT_CENTER or PAN_LIMIT_OUTSIDE to allow the image to move beyond the default limits.. It's not deprecated, but I feel it has all the features 99% of developers need and doesn't require much maintenance. I generally suggest that developers who need features that most won't need create their own forks, to avoid over-complicating the master.\nIf a version of Android is released that breaks the library, I'll try to fix it, but I haven't been an active Android developer for years so I may not notice!. Sorry, I cannot help if you delete the issue template.. This is a known limitation as mentioned in the sample app. The sample is not part of the library and is not supported.. EXIF information cannot be read from resources, that's a documented limitation, but if you put an image in your app's resources you'll know what orientation it is.\nThe flip orientations are very rarely used so I do not support them, because it would make the code too complicated.. I don't develop with Android any more so I don't know much about androidx, but I think if I merged this, every developer using this library would have the androidx library added to their projects. That's assuming androidx can coexist with the support libraries and they aren't forced to upgrade to androidx to use this library.\nIt seems there might have to be parallel forks - a support library version and an androidx version. But as I don't work on this library any more I don't have the time to build sample apps to test the permutations.. ",
    "a1813615": "Thanks\n. ",
    "tusharsingh1991": "Hey there ..\n I am MemoryOutOfException when i am trying to load heavy images. Which is in png format.\nplease help me with this.\nThanks in advance.\n. Thanks Dave :+1:  I'll try what you said.\n. ",
    "ghost": "Hi Dave\nFirstly, well done dude. \nSecondly, I am going to be working with your library  and I may be able to help with the portrait problem. I need it as well.\n. I've been able to rotate the dimension no problem. I basically swap h and w of the image.\nNow I am trying to figure out the tiles which are out of order. They are also rendering incorrectly content wise(half drawn, stretched, etc).\n. \"I think the more logical behavior should be that, when zoomed in, move horizontally will not trigger the swipe event, until it reach the boundary of the photo\"\nThat has nothing to do with subsampling-scale-image-view I would think. You would need to handle that in the adapter. The imageView has no concept of swiping...\n. @roby222  plz send me your solve and thnx so match \n. @rpisu i need create costum map what libaray need?\n. ",
    "dancefire": "But same code with webview works without the conflicts. I think it might be\nthe way of handling onTouch() event of this imageview and webview are\ndifferent somewhere.\ndo you have any suggestions of  workaround this problems?\n2013\u5e7411\u670822\u65e5 \u4e0a\u534811:41\u4e8e \"dirtmike\" notifications@github.com\u5199\u9053\uff1a\n\n\"I think the more logical behavior should be that, when zoomed in, move\nhorizontally will not trigger the swipe event, until it reach the boundary\nof the photo\"\nThat has nothing to do with subsampling-scale-image-view I would think.\nYou would need to handle that in the adapter. The imageView has no concept\nof swiping...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/4#issuecomment-29039530\n.\n. \n",
    "kyze8439690": "Here is a little trick to use scaleImageView in viewpager:\nin onTouchEvent() method, when the Action is ACTION_MOVE and there is only one finger panning, we can save the translateX value before fitToBounds(), if the value is changed after calculation, it means that the image reach its bounds and should not be move, and now we can pass the touch event to the viewpager.\nHere is my modified ScaleImageView:\n```\n/*\n * Handle touch events. One finger pans, and two finger pinch and zoom plus panning.\n /\n@Override\npublic boolean onTouchEvent(MotionEvent event) {\n    ...\n    switch (event.getAction()) {\n        ...\n        case MotionEvent.ACTION_MOVE:\n            ...\n            } else if (!isZooming) {\n                // One finger pan - translate the image\n                vTranslate.x = vTranslateStart.x + (event.getX() - vCenterStart.x);\n                vTranslate.y = vTranslateStart.y + (event.getY() - vCenterStart.y);\n            //save the translateX before calculation\n            float lastX = vTranslate.x;\n\n            fitToBounds();\n\n            if(vTranslate.x != lastX) {\n                //can not move\n                getParent().requestDisallowInterceptTouchEvent(false);\n            }else{\n                //can move\n                getParent().requestDisallowInterceptTouchEvent(true);\n            }\n\n            refreshRequiredTiles(false);\n        }\n        invalidate();\n        break;\n\n```\n. Oh,my fault.\n. It maybe means that crop the image at the top. If you view an image which has a huge height, it is much more better to view it at the top instead of view it with CENTER_CROP.\n. ",
    "CrazyCoderAndroid": "@dancefire Have you got the solution? I am also facing that issue. needs help. ",
    "CoffeeCode": "The performance on showing a file is great.\nBut I need to update/replace the image with a filtered image which is a bitmap.\nI wrote a setImageBitmap() method. It works but is very slow. It has to write a huge file at first and than shows the image like the regular setImageFile() method.\nhttps://gist.github.com/CoffeeCode/9104483 \n. The images are 16 MegaPixel jpeg files from Cameras. Processing the full Bitmap is possible on renderscript with my device but not displaying in a ImageView.\nThanks anyway.\n. ",
    "iam1492": "@davemorrissey \nSorry for late response! Today I found the reason why this happening.\nIn original source code, AsyncTask has used to run decoder in background thread.\nOur mistake was change asyncTask to our own Thread queue which use multiple thread.\nIn Android AsyncTask, especially above honey comb, default thread count is only one. So it makes one thread and run decoder task one by one.\nBut when we use BitmapRegionDecoder with multiple thread above issue is found, so we change to make only one thread and issue is gone.\nThanks,\nWooram\n. ",
    "EdSergeev": "Thanks for your response!\nThe case is simple: These is the first activity with list of items. The second activity with large image (that rendered by your control) opens by clicking on list item and centered by this item on image. You can go back to list and click another item and load the second activity with image again. After several times the app throws OutOfMemoryException.\nTo prevent memory leaks I have to mark reset(true) as public and call it on the second activity's onDestory()\n. ",
    "jrsen": "Hi!\ni want use it with bitmap How should I do\uff1f Thanks\n. ",
    "raulamoretti": "Maybe, I will develop a load image from a Bitmap. This is good to me. This is simple to develop?\nThanks, Raul \n. My images has 4000px x 2000px, like this above images side-by-side:\nhttp://www.eflip.com.br/files/flip/SINOS/12521/up3/14050509613271.jpg\nhttp://www.eflip.com.br/files/flip/SINOS/12521/up4/14050509735821.jpg\nI test other components, but these others has limits of size.\n. But I have problems to view images in old devices. Those devices have a limit of 2048x2048 to canvas. And your component execute this images withou exception. CrisBanes photoview need a resize to this limit.\n. Thanks man!!!!\n. ",
    "jjalan": "Understood.\nI found a \"clean\" another way to do this. I have overlayed another view that derives from my class on top SubSamplingScaleImageView. That way, I could still achieve the perceived behavior that user can draw on top of the image (without modify any of your code).\n. ",
    "Floens": "Ah, so it's an issue with Android. The fix seems to work. Thanks!\n. Thank you for your response, I'll try to see if I can do something with the padding.\n. ",
    "milmanal": "Hmmm. Like you my need is also floor maps of a building. They are pretty graphic, and interaction includes zooming, scrolling and rotation. Their current size is 2572_1864 px. We started with PNGs but moved to JPGs since that reduced the processing times and the size of the app.\nI could perhaps scale down to 2000_1449px, changing the type back to PNGs or increasing the quality itself and working with your ScaledImageView or the regular ones , but I'm very intimidated by consequent OOM and performance issues. \nI'm targeting SDK 15+ \nDo you have any advice for me? Have you had some experience with \"on the edge\" images with the non tiled options?\n. Indexing the PNG means saving it as PNG-8 in Photoshop? If so, I see that when I do that the quality does drop, probably even comparing to high quality JPG\nBtw another thing I was wondering - I wish to change image i.e. load another asset for instance, and preserve the existing zoom level and visible area. When using the old school setImageBitmap of imageview it is something happening automatically. \nWhat would be the recommended way to do it with your approach?\ntnx again\n. Yeah,\nLast one to go - is the tiles number or their size in the subsampling-scale-image-view, can be manipulated in some way?\nAnyway Thanks again. Very helpful\n. ok I am able to intercept the touch events in my subclass and prevent them from going into the parent view but not able to do any scrolling - the view does not respond to the events now at all\n`private class InnerGestureDetectorListener extends GestureDetector.SimpleOnGestureListener {\n    @Override\n    public boolean onDown(MotionEvent e) {\n        return true;\n    }\n\n    @Override\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\n        return super.onFling(e1, e2, velocityX, velocityY);\n    }\n\n    @Override\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\n        double headingRadians = -mAnimatedRotation * Math.PI / 180;\n        PointF distancePoint = new PointF();\n        double n1 = distanceX*Math.cos(headingRadians);\n        double n2 = distanceY*Math.sin(headingRadians);\n        distancePoint.x = (float)(n1-n2);\n        n1 = distanceX*Math.sin(headingRadians);\n        n2 = distanceY*Math.cos(headingRadians);\n        distancePoint.y = (float)(n1+n2);\n        return super.onScroll(e1, e2, distancePoint.x, distancePoint.y);\n    }\n}`. Thanks Dave - I understand your pov.\n\nnarrowing it down to a more basic tip you may have - ive managed to implement almost everything - including the pan gestures with free rotation. but i cannot set the viewport translate values if i handle this in an extending class since they are private. so if user drags the rotated view and i need to handle it - the viewport values dont change after this action. \nAny idea how to overcome it? \nI could, of course, fork this and change the vTranslate modifiers to have an access from my subclass view, but then i would lose the advantage of having an access to your pure library as it is - tested and wrapped, and of course any potential future updates\n\nI've noticed there seems to be some good progress towards this on this fork, is it yours? \n\nNo but its an interesting discovery! i know the guys from indooratlas and their use case is very similar to mine. the only bummer is that looks like the version they are implementing supports rotation around the center, while the version i need should rotate around a rotation point (like the user location on the view which would not necessarily be at the center). I have a fork with this working :)\nbut need to do some tidying work to isolate it from my code and commit. if anyone looking for some assistance on this feature you can contact me . ",
    "RohanPatel22": "Ya you caught right one, I am not getting SubsamplingScaleImageView. I am getting how a code flow going on.\n. ",
    "kcajf": "Thanks for the quick response - that's great and saves me some effort! Cheers\n. Hi Dave - could you please commit that change?\n. ",
    "danijelb": "Thanks for your prompt response\n. ",
    "osrl": "How do I get the ImageRegionDecoder or create a new BitmapRegionDecoder instance? Does this method give me my overlays? What do I apply my overlays to?\n. If OutOfMemoryError is still on the table when you tile the Bitmap, think it is not needed. I did what you suggest. Thank you. \n. Ok thank you. I'll try that. Of course this is a temporary solution but that fixes it for me. \n. Wow, so sorry. I didn't see it.\n. This makes it impossible to debug anything unrelated to SSImageView. Even if image is not set yet, this error happens. Are you sure it is related to rendering? \n. Sorry for the delay. My test device is HTC One google_m7 (Google Edition)/Android 5.0.1 on OS X Yosemite with Android Studio. I will test with different devices if I can.\n. This didn't happen on an HTC One/Android 5.0.1 with sense. So it looks like it's a problem with HTC's changes to stock Android.\n. I get it, but wouldn't a clear method be nice? \n. I already tried it but it doesn't clear the image. It is still visible. Nothing happened \n. ",
    "muhammad-ameen": "i want bitmap fit to my imageview, how i zoom bitmap programmatically. ",
    "aliab": "thank you so much\n. thank you very very much \n. @davemorrissey i thought about that, i should decode image, use it, and then, remove it from the disk! funny :)) but, the only way is this, thank you all\n. ",
    "miku-nyan": "Thanks for the answer.\nOur app is something like a browser for the imageboard, so images may be different (usually .jpg or .png, uploaded by users).\nTypically, such a problem does not occur, this picture is first which causing the problem.\n. OK, I have no more questions. I will try to fix this locally in the app (probably, convert the image file before showing).\nAnyway, thanks for helping to understand the problem.\n\nIt would be interesting to know how the image was saved, if you're able to contact the artist or know who edited it\n\nI'll ask in that thread, then report here if I get an answer.\n. ",
    "SammyVimes": "@miku-nyan take a look at RapidDecoder library, it can be used as a replacement for android basic decoder. It solved my problem\n. Thanks @davemorrissey , I made some research and it looks like it's a bug in skia library, which is used natively by BitmapRegionDecoder. I wonder if you know: is it possible to convert image programmatically on the phone to display it properly?\n. Sadly, I didn't find the report itself, only some mentions of it. I suspect this:\nhttps://github.com/android/platform_external_skia/blob/ecd936fe6ed3c2dba29a06074894cd8a5e832d76/src/images/SkImageDecoder_libpng.cpp\n^ this looks like a fixed source and this (https://github.com/android/platform_external_skia/blob/80bacfeb4bda06541e8695bd502229727bccfeab/src/images/SkImageDecoder_libpng.cpp) is bugged. Note that I bad at computer graphics, so this might be the wrong track, BUT I had similar issue (pixelated image) with this image: http://hc.readmanga.ru/gto_shonan_14_days/v1ch1/02.jpg_res.jpg that is not a grayscale image but has a lot of red color in it and in the same time, in the comments of libpng there is a mention of red being > 255. \nThis is that comment:\n/* We apply the mask because in a very small\n                       number of corrupt PNGs, (transpColor->red >\n                       255) and (bitDepth == 8), for certain versions\n                       of libpng.  For safety we assume the same could\n                       happen with a grayscale PNG.  */\n. I fixed this using https://github.com/suckgamony/RapidDecoder\n. Hmm, okay. I did something like this:\n@Override\n    protected Bitmap doInBackground(Void... params) {\n        try {\n            if (decoderRef != null && tileRef != null && viewRef != null) {\n                final BitmapRegionDecoder decoder = decoderRef.get();\n                final Object decoderLock = decoderLockRef.get();\n                final Tile tile = tileRef.get();\n                final SubsamplingScaleImageView view = viewRef.get();\n                if (decoder != null && decoderLock != null && tile != null && view != null && !decoder.isRecycled()) {\n                    synchronized (decoderLock) {\n                        BitmapFactory.Options options = new BitmapFactory.Options();\n                        options.inSampleSize = tile.sampleSize;\n                        options.inPreferredConfig = Config.RGB_565;\n                        options.inDither = true;\n                        Rect rect = view.fileSRect(tile.sRect);\n                        //Bitmap bitmap = decoder.decodeRegion(view.fileSRect(tile.sRect), options);\n                        Bitmap bitmap = BitmapDecoder.from(view._source).region(rect).decode();\n                        int rotation = view.getRequiredRotation();\n                        if (rotation != 0) {\n                            Matrix matrix = new Matrix();\n                            matrix.postRotate(rotation);\n                            bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);\n                        }\n                        return bitmap;\n                    }\n                } else if (tile != null) {\n                    tile.loading = false;\n                }\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Failed to decode tile\", e);\n        }\n        return null;\n    }\nand added a \"_source\" field to the SubsamplingScaleImageView class.\n. Yes, I know that. I just didn't have enough time yet, to rewrite it.\n. I suppose, I need to call scale method there, as the RapidDecoder 'documentation' states that \"All of the scaling operations automatically decode bounds of bitmaps and calculate inSampleSize, so you don't need to consider about them at all.\". Still, I don't know how to set RGB_565 option.\n. Okay, I found how to set RGB_565. It's just calling \"config\" method with RGB_565 as a parameter.\n. ",
    "PetrDana": "So I succeed found solution. To onTileLoaded() method (it is private so I can not extends it in my child class) I add after invalidate() this code:\nboolean allLoaded = true;\n    outerloop:\n    for (Map.Entry<Integer, List<Tile>> tileMapEntry : tileMap.entrySet()) {\n        for (Tile tile : tileMapEntry.getValue()) {\n            if (tile.visible && tile.loading) {\n                allLoaded = false;\n                break outerloop;\n            }\n        }\n    }\n    if (allLoaded) {\n        onAllTileLoaded();\n    }\nAnd I create empty protected onAllTileLoaded() for overriding in child class.\nDo you think it's okay? Can you change onTileLoaded() to protected for prevent requirement change original code - or can you apply my code (with possible updates) in original code? Thanks...\n. Hi, thanks for fast fix. I download source code from master branch and update our project to using it (migration to 3.x). And it looks like it works! For older version of this view I apply \"hot fix\" by allow largeHeap, but your fix I tested with this disabled. So thank you very much :-)\nWhen you suspect that this version will be stable for production?\nP.S.: I noticed that in master is applied isBaseLayerReady() method with onImageLoaded event which I proposed in other issue, thanks ;-)\n. Thanks for info, I tested this new version and it is ok, there is no OOM on test images.\n. ",
    "DrOptix": "I'm bothering with one more question. Can the overlayed item be views? I ask because I want to implement the \"long click and drag-drop to delete\" UX pattern like the one you find on Android launcher where you delete icons by draging them over a deletion area. \nI know it's relatively easy to implement the deletion area on subsampling-scale-image-view canvas area, but in my case the deletion area is a Button. Yes I must be able to delete the overlays both by selecting and clicking on delete and by dragging them over the deletion area.\nI'll try tomorrow or during the weekend  to come up with some code.\nWith respect!\nUPDATE: The button is in a toolbar area that's why I can't have it like an overlayed item.\n. see also #31 \nThe issues are related because Gradle is using Maven repositories.\n. ",
    "levelibeeka": "Maybe it's barbarian solution, but why do you not write it to the disk after you decrypt?\n. ",
    "LDuncAndroid": "This is it here\n\n. ",
    "zondaOf2012": "I would obviously run into the same problem.\nhttp://static.cnbetacdn.com/article/2015/0130/1cc2be0337bfb9e.jpg\n. I think you can refer to this.\nBesides, this is my solution, we want to help!. ",
    "AllanWang": "@davemorrissey Sorry to bring this back from the dead, but as this seems like a common issue, wouldn't it make sense to add some sort of converter in the library?. Upon further inspection, it looks like adding a converter involves icc profiles, which could be quite big with respect to applications. For those who stumble upon this issue, here are some references:\n\nStack Overflow - Android (old lib)\nStack Overflow - Java (currently incompatible)\n\n. The imageview only ever holds a bitmap, and it's private. Notice that setting the image typically involves passing it from a file, uri, or bitmap. You can get the images once you have any of those and add it to your view.. ",
    "tqlmorepassion": "+1. @davemorrissey sorry\u3002. ",
    "JaredBanyard": "I mean being able to pull in a versioned dependency instead of using library files, such as:\ndependencies {\n    compile 'com.davemorrissey.labs.subscaleview:subscaleview:1.0.+@aar'\n}\n. ",
    "saket": "@davemorrissey For some reason, including your library through gradle doesn't also include its sources :( I'm using this:\ncompile 'com.davemorrissey.labs:subsampling-scale-image-view:3.6.0'. @davemorrissey any updates on sources?. @Hezj your PR looks nice, but is there any reason you're only doing it for vertical gestures instead of both vertical and horizontal?. @davemorrissey @Hezj will it be possible to include horizontal swipes as well?. Ah sorry. I did a quick read of the PR and did not realize that horizontal was already supported. My bad.. Thank you!. I've tried doing this and this looks to be difficult because SubsamplingScaleImage consumes all touch events it receives, without any support for nested scrolling. The only solution is to intercept touch events in the parent ScrollView.. You can get the image width (SamplingImageView#getSWidth()) and your screen width, calculate a resize factor by doing screenWidth/imageWidth and supply it to setScaleAndCenter().. ",
    "Chesteer89": "Yes, you're right. It works fine for me on SubsamplingSIV, but on SIV it sometimes change page in a middle of a resized image. Maybe just calculate is resized image near edge (+-5px)?\n. Ok, you can fix it by simple add lines:\njava\n// Detect flings, taps and double taps\nif (detector == null || detector.onTouchEvent(event)) {\n   isZooming = false;\n   isPanning = false;\n   maxTouchCount = 0;\n   return true;\n}\nin both classes. The problem was that on fling finish isPanning was not setted to false.\n. Cool, i'll try a new version but after my small changes it works fine. Good job.\n. E/SubsamplingScaleImageView\ufe55 Failed to initialise bitmap decoder\n    java.io.IOException: Image failed to decode using JPEG decoder\n            at android.graphics.BitmapRegionDecoder.nativeNewInstance(Native Method)\n            at android.graphics.BitmapRegionDecoder.newInstance(BitmapRegionDecoder.java:123)\n            at android.graphics.BitmapRegionDecoder.newInstance(BitmapRegionDecoder.java:149)\n            at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$BitmapInitTask.doInBackground(SubsamplingScaleImageView.java:1022)\n            at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$BitmapInitTask.doInBackground(SubsamplingScaleImageView.java:998)\n            at android.os.AsyncTask$2.call(AsyncTask.java:264)\n            at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:305)\n            at java.util.concurrent.FutureTask.run(FutureTask.java:137)\n            at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:208)\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1076)\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:569)\n            at java.lang.Thread.run(Thread.java:856)\nJPG file, 600x6600.\n. http://static.bezuzyteczna.pl//static//content//807fa2a3ba7ed3a0cd9a.jpg\n. Unfortunatelly it looks like BitmapRegionDecoder have some problem with some images. It works fine on iOS, WP, on web too, so it's android problem only. Can we add new method to handle errors, for example:\n``` java\n // Handle errors\nprivate static final int MESSAGE_ERROR = 2;\n// Error listener\nprivate OnErrorEventListener onErrorListener;\npublic interface OnErrorEventListener{\n    public void onError(Exception e);\n}\npublic void setOnErrorListener(OnErrorEventListener eventListener) {\n    onErrorListener=eventListener;\n}\nto get errors? And send events in doInBackground:\nif(view != null && view.onErrorListener!=null)\n   view.onErrorListener.onError(e);\n```\n. I mean we can use listener to handle exception in main activity. It could be useful on applications, when you cannot modify image - base on what you get. I understand i can use another decoder, but it looks like there's no even one, which can handle big images. In my case i can simple handle error in main activity and remove or display error. It's useful when you're working with viewpager etc.\n. ",
    "JWBlueLiu": "http://n.sinaimg.cn/auto/transform/20160316/AgOL-fxqhmve9261797.jpg\nload fail\nFailed to initialise bitmap decoder. ",
    "imi5": "Thank you anyway :)\n. ",
    "arpruss": "That's a really nice and simple idea. But the ideal solution would, I think, be integrated into the subsampling imageview, so that the user could already begin scrolling and zooming. It would make the app feel more responsive.\n. A memory-costly method might be to underlay a subsample scaled view of the smaller image under the larger one, and then to kill it when the larger one becomes available. Or would the overlaid image block controls from working on the lower one?\n. Is there a way to enable the initial scaling to be faster when the dimensions of the full size image are known? Is there other data besides dimensions that one could cache to speed up loading on subsequent occasions?\n. Thanks! I'll have a look at it.\nI've been playing with the thought of implementing this via a custom decoder class. Start a thread loading the big image, but until that thread completes, serve rescaled data from the small image. Then send a refresh to the view when the thread completes.\np.s. I also tried using a progressively encoded jpeg, and init was 5x slower than for a non-progressive one.\n. I've been too busy with other projects to convert LunarMap to use the\nlibrary. It's a high priority but my day job has a higher priority.\nThanks so much for updating the library!\nI should have LunarMap updated in a month or so and will let you know.\nOn Mar 8, 2015 5:06 PM, \"davemorrissey\" notifications@github.com wrote:\n\nBTW LunarMap is a great app and I'd like to include it on the readme if\nyou'll be using this view and that's okay with you?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/37#issuecomment-77777512\n.\n. \n",
    "laurencedawson": "Would it be possible to perhaps get a callback once the SubsamplingImageView has drawn the initial image. That way we could load the image quickly and then switch off once SubsamplingImageView has loaded.\n. Setting a margin would stop the image from expanding into the region. I've attached an image to show this:\n\n. I'm currently looking to integrate this into \"Swipe for reddit\" and then \"reddit sync\".\n. The margin method does work but this stops content being shown behind the transparent bottom bars when a user zooms in.\nI couldn't quite get your second scale based method to work. Seemed to not display.\n. This is my simple implementation. I'm posting a runnable as \"onImageReady\" seemed to call back on a non-ui thread...\nhttps://gist.github.com/laurencedawson/21028a35f55ba14205d3\nThanks for the help!\n. The SubsamplingScaleImageView is the first child in a RelativeLayout with a Toolbar and LinearLayout overlaid. \nHiding the chrome does not change the size of the SubsamplingScaleImageView.\n. That seems to have done the trick! Thanks.\nOn 1 February 2015 at 12:34, davemorrissey notifications@github.com wrote:\n\nI've spotted a bug in the setMinimumScaleType method - it results in the\nview redrawing using the initial value of minScale which is zero, so key\nstate variables get set to NaN. I'll fix this, but there's an easy\nworkaround for you - just move the setMinScale line above\nsetMinimumScaleType.\nonImageReady is called off the UI thread to make sure that if subclasses\ndo any heavy lifting in that method, the rendering is not blocked.\nA bit of additional hacking is required to stop the image from appearing\nbriefly at full size before the padding takes effect. This appears to work\nwell enough: https://gist.github.com/davemorrissey/9133860908fb4977644c\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/39#issuecomment-72363017\n.\n. I think PhotoView only supports identical padding too.\nOn 1 Feb 2015 14:13, \"davemorrissey\" notifications@github.com wrote:\nNo worries. I'll think about how to support padding, the thing I need to\nwork out is how it should behave if top padding is different to bottom\npadding so the image starts off-centre. I may not support that.\nWould you like your apps listed in the readme?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/39#issuecomment-72366285\n.\n. Awesome thanks!\nOn 1 Feb 2015 22:54, \"davemorrissey\" notifications@github.com wrote:\nI have added padding support (including asymmetric padding) to the view.\nI'll release a new version in a few days.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/39#issuecomment-72389562\n.\n. Any chance I could get a look at the code pre committing? Thanks\nOn 2 Feb 2015 08:53, \"Laurence Dawson\" contact@laurencedawson.com wrote:\nAwesome thanks!\nOn 1 Feb 2015 22:54, \"davemorrissey\" notifications@github.com wrote:\n\nI have added padding support (including asymmetric padding) to the view.\nI'll release a new version in a few days.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/39#issuecomment-72389562\n.\n. I've had this reported for a few more images in Sync:\n\n\nhttps://i.imgur.com/X9f3KtD.jpg\nAside from re-encoding is there another workaround? Cheers\n. Yeah I think at that point it gets pretty unreasonable to bloat apps by hundreds of megabytes...\nThanks for the reply though!\n. One use case would be hiding chrome as a user zooms in.\n. Working great. Thanks for this.\n. Thanks, that did the trick. \nAs larger resolutions become the norm, might I recommend setting a max cap to this lib?\n. Cheers!\n. I'm displaying a series of posts in a ViewPager, some images and some text.\nAs a user scrolls through the pager, they can trigger cursor updates which then invalidates each Fragment in the pager. When this update comes in I want to quickly check if the Fragment has already requested an image or has previously set the image. I handle the image management myself but it seems redundant to store a flag in the fragment to say it's set the image when the information is available in the view itself.\n. Yup, if you dump it in a gist or here I'll test straight away. Cheers.. Hmm not quite. \nThis stops the described issue but now swiping down will never pass on the touch event.... I think so.. I've tested this pull but the issue seems to still persist.. ",
    "avp2306": "Thank you so much for a prompt  and detailed reply. I've uploaded the PNG image for reference.\nThis happens on Android 4.4 and Samsung device so far Galaxy 4, 5 & Note 3. I'm also using the SubscamplingScaleImageView.\nIs it necessary to set doubleTabZoom? Also is it better or faster to use a JPG in any way? JPG file size comes out to 3-4 MB instead of 2 with PNG.\n. Thanks. Based on your advice I'm going to go with keeping the PNG format and setMinimumTileDpi(160), also will try avoiding setting the doubleTapZoom for now as that shows up in the call stack (it crashes after users interact with the image).\n. Sure. Also just saw HTC One on the list, FYI.\nava.lang.RuntimeException: An error occured while executing doInBackground()\nat android.os.AsyncTask$3.done(AsyncTask.java:278)\nat java.util.concurrent.FutureTask$Sync.innerSetException(FutureTask.java:273)\nat java.util.concurrent.FutureTask.setException(FutureTask.java:124)\nat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:307)\nat java.util.concurrent.FutureTask.run(FutureTask.java:137)\nat android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:208)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1076)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:569)\nat java.lang.Thread.run(Thread.java:864)\nCaused by: java.lang.OutOfMemoryError: (Heap Size=43875KB, Allocated=36137KB)\nat android.graphics.BitmapRegionDecoder.nativeDecodeRegion(Native Method)\nat android.graphics.BitmapRegionDecoder.decodeRegion(BitmapRegionDecoder.java:186)\nat com.davemorrissey.labs.subscaleview.decoder.SkiaImageRegionDecoder.decodeRegion(SkiaImageRegionDecoder.java:76)\nat com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$BitmapTileTask.doInBackground(SubsamplingScaleImageView.java:1173)\nat com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$BitmapTileTask.doInBackground(SubsamplingScaleImageView.java:1150)\nat android.os.AsyncTask$2.call(AsyncTask.java:264)\nat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:305)\n... 5 more\n. Based on user reports so far, I'm happy to report that your advice worked :)\nAgain, much thanks for your help, I commend you on your work & support of this library!\nLast detail, I'm looking to have a doubleTap zoom in at about ~70% across devices instead of full 100%, this way the user can zoom in the last 30% if desired. I tried playing with setDoubleTapZoomDpi I dont think I'm using right values. What would be the best way achieve something like that ?\n. Sure thing, much appreciated! here's the link to my app:\nhttps://play.google.com/store/apps/details?id=com.nyctrans.it\nRight now the image always loads zoom out initially. Is there maybe a way to set initial zoom, as load the image at 10-15% zoom initially?\nThanks!\n. Hi Dave - and again, much thanks for your prompt reply.\nThe problem is as you described, effected areas are right and bottom sides of the image. I'm not able to get my hands on a screenshot as I'm not able to repro the issue myself - so going by user reports only. \nAlso, I have increased the size of the image I'm showing in the last app update - after that problem reports started coming in. Image went from 2MB to ~3MB. Its a transit map with dimensions of about 5000 x 4500 px. I dont believe image has transparencies. Its a PNG 24 format.\nRegarding devices: so far I only saw it from users reporting Samsung devices, but ranging from new Galaxy S5 running Lollipop to really old SGH models running Gingerbread 2.3.6. I got 3 Samsung devices myself - however unable to repro this at all.\nI have 2 images (maps), that I display 1 at a time using a single UI control. User hits a button to swap the image where I alternate between file names calling :\n_imgMap.setImageAsset(\"file1.png\")\nPlease feel free to let me know if any more info would be useful to help diagnose this. I think thats all that I can think of.\nThanks,\n-Alex\n. Logging is always a good idea, do I just attach that to the image control ?\nAlso, do you think its possible that the image settings could have anything to do with it? I just double checked and I think I saved it as PNG 8 with reduced color settings.\nAnother thought, how about positioning of the image control itself, I have it inside relative layout with FILL_PARENT for both width & height.\nJust throwing some ideas out there. This would be a lot easier if I could reproduce this issue.\n. Thanks, I'll try attaching the listener to see what I can grab from within that event. I'm also in contact with a user that is having this problem - so at least have a way to test this.\nI do rotate the image, and on rotation the layout changes as well - I basically hide everything on the screen including action bar to show the map in complete full screen whenever device is in landscape mode.\n. Hi Dave - so I got some feedback to share, the end user I'm working with was able to get back to me.\nI tried to re-save the image as PNG 8 using different color settings but that had no effect. PNG 24 has a high file size so I wanted to try 8 bit first. This had no effect on the issue. \nI've added logging to setOnImageEventListener - but results will take some time to post as I'm using Google Analytics for exception logging.\nAt this point I think I have the following additional options to try:\n- Try with PNG-24\n- Try with JPEG\n- Try with RapidImageRegionDecoder\nPlease feel free to add any additional things I should try, I'm going to include a small test harness in the dev build for the user I'm working with which will have a pop-up allowing to test multiple fixes - this way he can try multiple things at once and get back to me. \nUser also provided me screenshots, sharing those with you as well. Please see attached:\n\n\n\nThank you for your assistance with this, and for your dedication to this library.\n-Alex\n. Hi Dave - I forgot to mention this but I also updated the library in this build as well. So this is actually using 3.1.2: http://screencast.com/t/GXlnnDp6\nThanks.\n. Thanks. I'll try the 3 options above and report my findings, I have a feeling playing around with image formats may do it.\n. Sure. I believe this was happening in both versions. My current prod version of the app has the older version. And the dev build I'm testing with the end user is the new latest version.\n. Yep, it was 2.3.0\n. Hi Dave - good news.\nWell kinda :) but I finally am able to reproduce this consistently on one of my test devices, this time its a Nexus 5 L 5.1. After playing around with file formats I get the same issue in the same regions of the image when saving the image as PNG-24 (~10mb file size). However the same file works fine on Galaxy S3. \nSo I really feel its a memory management issue or the decoder itself uses some very low level OS API that is different based on model & manufacturer. \nJPEG format seems to be working fine - so that's what I'll go with for the moment. \nI also wasn't able to get the RapidImageRegionDecoder to work, I would get the following error:\nE/SubsamplingScaleImageView\ufe55 Failed to initialise bitmap decoder\n    java.lang.InstantiationException: class com.nyctrans.it.MapActivity$RapidImageRegionDecoder has no zero argument constructor\nI'm using the following code to set the image:\n_imgMap = (com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView) findViewById(R.id.imgScaledImageViewMap);\n_imgMap.setRegionDecoderClass(RapidImageRegionDecoder.class);\n_imgMap.setDoubleTapZoomDpi(200);\n_imgMap.setMinimumTileDpi(160);\n_imgMap.setImage(ImageSource.asset(\"map_png24.png\")\nI'm using this class from the examples project:\nhttps://github.com/davemorrissey/subsampling-scale-image-view/blob/master/sample/src/com/davemorrissey/labs/subscaleview/sample/imagedisplay/decoders/RapidImageRegionDecoder.java\nI created the same class and added a default constuctor but still was getting the same error. I feel like I missed something obvious.\nAnyways, thought I'd share some details from my end, hope this is useful.\nI'm going to test the JPEG approach using the default decoder and I'll follow up with results shortly.\nThanks.\n. Yay, making it static got rid of the exception, but blurriness is still there with PNG files.\nLooking through the logs, I also found this, not a problem as I will use JPEG for now, but thought I'd mention it.\nskia\ufe55 --- decoder->decodeRegion returned false\nI'll test it with my end user and post results - keeping fingers crossed :)\nThanks.\n. Hi Dave - thanks for following up.\nI was able to trace the problem to PNG images, even with rapid decoder. JPEGs seem to work better so I've switched to jpg files even though its larger file size.\nThe user I was testing with reported positive results, so I went ahead and released it to the public - so far so good. I'm going to keep an eye out for user reports and let you know if any issues come up.\nThanks for your help!\n. Dave - thanks for the reply and reviewing the logs.\nI am already using JPEG format and setting minimumTileDpi to 160, for reference here's the code I'm using:\n_imgMap = (com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView) findViewById(R.id.imgScaledImageViewMap);\n        _imgMap.setDoubleTapZoomDpi(200);\n        _imgMap.setMinimumTileDpi(160);\n        _imgMap.setOnImageEventListener(null);\n        _imgMap.setOnImageEventListener(new SubsamplingScaleImageView.OnImageEventListener() {\n            @Override\n            public void onReady() { }\n            @Override\n            public void onImageLoaded() { }\n            @Override\n            public void onPreviewLoadError(Exception e) {\n                L.e(TAG, \"setOnImageEventListener.onPreviewLoadError\", e);\n            }\n            @Override\n            public void onImageLoadError(Exception e) {\n                L.e(TAG, \"setOnImageEventListener.onImageLoadError\", e);\n            }\n            @Override\n            public void onTileLoadError(Exception e) {\n                L.e(TAG, \"setOnImageEventListener.onTileLoadError\", e);\n            }\n        });\n_imgMap.setImage(ImageSource.asset(\"map.jpg\"));\nDo you think calling System.GC before initializing the image would help ?\n. Thanks for suggesting largeHeap flag. After reading up on it, I think its a good idea to try in my situation.\nI also took a snapshot of the summary Crashlytics provides and it really seems to come from a verity of devices: http://screencast.com/t/vMLxSBGt\n. Ok, one more detail, thought I should point it out after you mentioned multiple instances of image / view pager. \nI only have 1 instance of the image control, however I do load 2 separate images. They are identical formats in jpeg and similar size, maybe off by a few pixels. But I have a button allowing the user to alternate between map images displayed. \nShould I perform any cleanup before swapping the images? I load them from assets. \nBTW from stack it would seem it happens onTile so I assume this is when the user is zooming.\nHere is the entire code block that I use:\n_imgMap = (com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView) findViewById(R.id.imgScaledImageViewMap);\n        _imgMap.setDoubleTapZoomDpi(200);\n        _imgMap.setMinimumTileDpi(160);\n        _imgMap.setOnImageEventListener(null);\n        _imgMap.setOnImageEventListener(new SubsamplingScaleImageView.OnImageEventListener() {\n            @Override\n            public void onReady() { }\n            @Override\n            public void onImageLoaded() { }\n            @Override\n            public void onPreviewLoadError(Exception e) {\n                L.e(TAG, \"setOnImageEventListener.onPreviewLoadError\", e);\n            }\n            @Override\n            public void onImageLoadError(Exception e) {\n                L.e(TAG, \"setOnImageEventListener.onImageLoadError\", e);\n            }\n            @Override\n            public void onTileLoadError(Exception e) {\n                L.e(TAG, \"setOnImageEventListener.onTileLoadError\", e);\n            }\n        });\n```\n    _imgMap.setImage(ImageSource.asset(\"map.jpg\"));\n// Map vs Night Map selection button\nfindViewById(R.id.vwMapType).setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        boolean hasSubscription = PrefHandler.getPremiumFlag(MapActivity.this);\n        ImageView imgBtnMapType = (ImageView)findViewById(R.id.imgBtnMapType);\n        TextView tvMapType = (TextView) findViewById(R.id.tvMapType);\n        switch (_selectedMapMode) {\n            case MAP_MODE_DAY:\n                if (hasSubscription) {\n                    _imgMap.setImage(ImageSource.asset(\"map_night.jpg\")); //Switch to NIGHT MODE\n                    _selectedMapMode = MAP_MODE_NIGHT;\n                    imgBtnMapType.setImageResource(R.drawable.ic_map);\n                    tvMapType.setText(\"REGULAR MAP\");\n                    U.makeToast(\"Night Service\", Toast.LENGTH_SHORT);\n                    L.ev(C.GA_CATEGORY_ui,C.GA_ACTION_display_screen,\"night_map\",(long) 0);\n                } else {\n                    Intent intent = new Intent(MapActivity.this, UpgradeActivity.class);\n                    intent.putExtra(\"from\", \"from_night_map\");\n                    startActivity(intent);\n                }\n                break;\n            case MAP_MODE_NIGHT:\n                _imgMap.setImage(ImageSource.asset(\"map.jpg\")); //Switch to DAY MODE\n                _selectedMapMode = MAP_MODE_DAY;\n                imgBtnMapType.setImageResource(R.drawable.ic_brightness_2);\n                tvMapType.setText(\"NIGHT SERVICE MAP\");\n                U.makeToast(\"Regular Service\", Toast.LENGTH_SHORT);\n                break;\n        }\n    }\n});\n\n```\n. Actually AsyncTask is known to have many pitfalls and problems. You will find lots of material on this. \nThe issue I described can easily be reproduced by starting 4-5 async tasks, and then trying to use the Image View. You will see it will hang and not load any images.\n. Just to update on the issue.\nNow I am able to reproduce the issue even by spawning a single network thread (even without AsyncTask) and then trying to load the image file. As long as the thread is running the image will not load up.\nSo with this new bit of detail I'm not sure if a parallel executor would solve this. Ripping out AsyncTask and replacing with Threads and Handlers typically isn't that trivial. The only trick is not leaking memory but that's easily handled by making handlers static (if inner classes) and using WeakReferences for private members of the handler. Of course you know your logic better and what it would require but I did it for my whole app in about 2 days, I originally used async tasks but ran into issues. \nAdditionally I think this actually effects more people than we first assumed earlier in this post. Having a network thread run in the background is very common for modern apps now, syncing stuff and all. Likely reason why this was not reported much is because the issue just manifests itself as a slow load in most cases as the network thread will eventually will timeout, and the image will load right after. \nThanks for looking into this. \n. FYI for now I'm only seeing this on some test devices. I'll do another test targeting more devices tomorrow and post findings.\n. ",
    "vinothkannahmp": "Really nice plugin. Thanks, saved lot of time for me.\nI faced this issue frequently on samsung tab when I use SubsampleScaleImageView in ViewPager.\nCause: My device doesnt allocate memory more than 45MB (approx) to my device.\nFix: Set android:largeHeap=\"true\" in application tag of AndroidManifest.xml\nand in onPause() of fragment or activity set .recycle();\n. ",
    "luisriq": "I understand, though i still want the behavior described above, so probably i'll modify the library by myself to achieve it.\nThanks for your time!.\n. ",
    "ansman": "I've only tested on lollipop but this will surely cause problems on low end devices. The GC absolutely kills performance.\nI'll see if I can create a pull request that uses temporary, pre allocated, points and rects instead of creating new ones.\n. Fair enough, though I hadn't planned on changing it in a major way.\nOn Sun, Feb 15, 2015 at 7:10 PM, davemorrissey notifications@github.com\nwrote:\n\nThanks for the looking at this, I'm interested to see what you come up with but there's a chance I won't accept the PR. It may quite significantly affect the design of the class and as I'm pretty much the only contributor I need to make sure I understand everything about how it works! No-one has reported a performance issue yet, my own phone is three years old and has no problems, but I do agree the object creation is wasteful.\nReply to this email directly or view it on GitHub:\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/41#issuecomment-74428804\n. I don't mean more objects take longer time to GC but rather allocating objects will cause more frequent GCs.\n\nBitmaps are a bit special since they don't take up much java heap space but mostly native memory which doesn't affect JVM memory pressure.\n. Awesome! I'll try it in my project and see how it works.\n. Ah, my bad. Don't know why but I thought that method was private.\n. It can also be fixed by disabling dithering.\n. Every single photo I've loaded shows this behaviour (I'm using a Nexus 5).\n. Works like a charm, thanks!\n. ",
    "tdtty": "Thank you for sharing this library. It really helps me a lot.\nI'd like to download and display a very large image. The image can be divided into several parts. The whole image or part of it is displayed according to the use cases.\n. ",
    "jjhesk": "yes. I have tried to add to my project but I got an error and stated that the attribute src has been taken. I think it is the issue related to grade settings.\n. ",
    "Crni03": "Hi\nI'm having similar problem.\nI'm using Your library in a Fragment and when i rotate images when slyding my app chrashes.\nCouse Samsung devices save pictures rotated i have to rotate them back\nWithout rotating i can slyde as fast as I want.\nThis is how i'm loading images:\n                image.setOrientation(SubsamplingScaleImageView.ORIENTATION_90);\n            image.setImage(ImageSource.uri(pathString));\nTo check rotation i'm using ExifInterface. \nThanx! \n. I tryed, it rotates the pic but i still cant sylde images. \nIt there a way to do this in SubsamplingScaleImageView class or in ImageSource class, or somewhere else? I'm loading my pics from sd card.\n. So, is there any help for me or i'll hawe to find some other solutions? \nBTW, i still think that Your library is great, and i'm still useing it. When I put app on market, i'll let You know.\n. Hi! i was yust about to update my last comment. \ni did some kind of a workaround, when i rotate, and fragment destroys, i called onCreate method in on destroy method and it simply reloads the image again. Not the best solution, but it works!\nUpdate:\ncrashed again, onDestroy not working! :)\nIt is OutOfMemoryError,\nHere's log of a crash form eclipse\n10-28 21:00:24.835: E/AndroidRuntime(26400): FATAL EXCEPTION: AsyncTask #5\n10-28 21:00:24.835: E/AndroidRuntime(26400): java.lang.RuntimeException: An error occured while executing doInBackground()\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at android.os.AsyncTask$3.done(AsyncTask.java:299)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at java.util.concurrent.FutureTask.finishCompletion(FutureTask.java:352)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at java.util.concurrent.FutureTask.setException(FutureTask.java:219)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at java.util.concurrent.FutureTask.run(FutureTask.java:239)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:230)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1080)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:573)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at java.lang.Thread.run(Thread.java:841)\n10-28 21:00:24.835: E/AndroidRuntime(26400): Caused by: java.lang.OutOfMemoryError\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at android.graphics.BitmapFactory.nativeDecodeStream(Native Method)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at android.graphics.BitmapFactory.decodeStream(BitmapFactory.java:623)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at android.graphics.BitmapFactory.decodeFile(BitmapFactory.java:378)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at com.davemorrissey.labs.subscaleview.decoder.SkiaImageDecoder.decode(SkiaImageDecoder.java:61)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$BitmapLoadTask.doInBackground(SubsamplingScaleImageView.java:1556)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$BitmapLoadTask.doInBackground(SubsamplingScaleImageView.java:1)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at android.os.AsyncTask$2.call(AsyncTask.java:287)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    at java.util.concurrent.FutureTask.run(FutureTask.java:234)\n10-28 21:00:24.835: E/AndroidRuntime(26400):    ... 4 more\n. The problem is that Samsung phones rotate images whan capturaing. \nSo, when i show them in my gallery, they are oriented wrong. \nscreen rotation does not crash, slydeing images does, it just freezes PageFragment and chashes it. \nIf you would like, i could mail You my SyldeActivity and PageFragment?\n. I removed onDestroy.\nThe crash is not happening when i rotate the phone, it happens when i slyde images\n. ok. I found no mail adress so You can here's mine. \nblabla@gmail.com\n. ",
    "amincheloh": "Ok I understand.\n. ",
    "mcginty": "That's a great point. I just added another commit which adds backwards-compatibility methods so we don't break the API contract. This also simplified the default factories, so we have a smaller diff now too :).\nI'm unsure how the factory pattern causes us to lose control of the lifecycle of a decoder class, can you clarify?\n. ",
    "mariotaku": "Actually even not using attribute mentioned above, aapt still fails, cause all attributes will be merged into one file first.\n. Bumping this issue up.\n. @juanlabrador I suggest not load bitmaps into memory, use File or InputStream instead.\n. ",
    "zeng1990java": "ths.I will pay attention to the project.\n. ",
    "Piasy": "I've just created a big image viewer supporting pan and zoom, with very little memory usage and full featured image loading choices. Powered by Subsampling Scale Image View, Fresco, Glide, and Picasso https://github.com/Piasy/BigImageViewer , hope it helps :)\n. I've just created a big image viewer supporting pan and zoom, with very little memory usage and full featured image loading choices. Powered by Subsampling Scale Image View, Fresco, Glide, and Picasso https://github.com/Piasy/BigImageViewer , hope it helps :)\n. ",
    "fvink": "Actually when I set the center crop the min scale works, it limits how far I can zoom out, but there are no tiles. There is only one Rect for the whole image in full resolution and as I zoom in it stays like that. No new Rects appearing.\n. The screen is 720p and the image has a resolution of 3000x2000. When the tiling doesn't work the scrolling, panning and all that stuff lags because of the size of the image.\n. Wouldn't only the tiles that are in the center be needed, depending on the current scale? So if only the center of the image is visible, and side parts are not, shouldn't only the center tiles load?\nIf that's what's supposed to happen, is there another way to limit maximum zoom out so the image always fills the vertical space but is enabled to scroll left and right?\n. ",
    "rhinobomb": "Thanks for the response, that makes sense.  I guess maybe I'm having another issue then.  I'm using a view pager to create something very similar to a gallery with full screen images.  It's working well to the point I'm trying to load a different layout in a new fragment.  For testing purposes I've made the layout almost identical to the rest of the fragments and I'm still having issues.  I'm using a consistent image size with similar content but I'll get one image to load fine and the next one will cause OOM.  Maybe I don't know enough about view pagers and fragments and using multiple layouts is bad practice, I'm not really sure.  Is there some way I could block the call to setImage in a try/catch I can try to recover the app?  I'm not sure it would make a difference to what advice you give but the OOM is coming from TileLoadTask.doInBackground\nThanks again.\nEdit:\nI see through some testing it isn't when the image is loaded that the OOM gets thrown, it is when it is displayed.  I would still like to catch that, but I'm not really sure where I could do that from.\n. ",
    "leelei": "just as kyze8439690  said\n. ",
    "TarekkMA": "@davemorrissey  this doesn't work . The image is still centered any other way ? \n. ",
    "xkubow": "Working like charm, thanks\n. ",
    "fractalwrench": "Thanks for a great library! I'm also seeing this crash on some older devices running Android 4. I will attempt the largeHeap suggestion, and can also add some more logging to try and find out what the most common cause of the crash is.\n. ",
    "nauman404": "I faced the same issue. Actually i was using 3rd class device for testing. Image resolutions were high that device was not supporting. Anyways, above suggestions helped a lot.\n. ",
    "NammariMarkavip": "+1\n. ",
    "SalvaP": "Thanks for the quick reply, meanwhile had arrived at the same solution.\nI think the problem is related to the use of compression utility like Jpegtran, JPEGOptim and Jpegrescan.\nA method to avoid re-encoding of images is to use\n.setImage(ImageSource.bitmap(((BitmapDrawable)getResources().getDrawable(resID)).getBitmap()))\nThanks again!\n. ",
    "venkatesh87": "Hi Dave, Thanks for this wonderful library.\nCould you please point me to the correct sample for marker onClick? I couldn't find it anywhere the application.\n. ",
    "shubham-agr": "@DoubleTime  did you solve this?. Yes i have read the documentation. Can you help me to implelment PinView.java\nI m new to this library.\nAll i want is to pin a icon/image when user tabs on image.\nI m able to get the coordinates by above code . ",
    "engr-erum": "i copied classes in project but issue still exists my target i to zoomout background image of either button with text ................ or imageview zoomout while my background image is not zooming out how to resolve any idea i want this type of animation http://www.dailymotion.com/video/x2qx2if  pls check \n. ",
    "alex621": "We already have the dimension of that image (returned from our server). For our case, the dimension of that view can also be calculated. So basically we should be able to calculate before it is drawn.\n. ",
    "dustin-graham": "@davemorrissey I'm also troubled with loading delays when using this inside of a ViewPager. I'm expecting the Fragments to the left and right to load and be ready when I swipe. However, it doesn't matter how long I wait on one of the pages, the adjacent pages only get loaded after I swipe. Is there a trick to make the imageview load it's image ahead of time?\n. ",
    "enderminh": "Awesome Dave. I verified that this is fixed with 3.1.4.\nYour library is awesome. Any way I can donate to your via PayPal/Google Wallet/Bitcoin to show some support?\n. I can't update the setup instructions in the wiki, since Github doesn't have a nice forking/pull request feature on the wiki, so you would have to update that yourself.\n. ",
    "rahulkapoor1": "Got it. I adjusted minimumDpi. Thank you for this awesome library.\n. ",
    "dortamur": "Thanks! I shall give that a go.\n. ",
    "kkrishnan90": "Hi Dave, \nThanks for your response ! I solved it myself. Wasn't sure about which library it was conflicting with but anyways.. I think its just about clearing the caches and invalidating the android studio.. It worked like charm .. Thanks a lot Dave.. Also, let me know if your image set function supports for views apart from imageviews and imagebuttons like buttons too ? Cuz, I'm planning to set background for buttons which is a dynamic image(HD) and text on top. \n. Alright thanks a ton for the library Dave! I am using this library of yours in one of my apps , can you please add me onto the hall of fame. App name and link ill share after uploading on Google Play market. I've given attributions inside the app for using your library as well. Thanks again !\n. Hi Dave ! Hope you're doing great ! Thanks a ton for your library ! It just works flawlessly... Definitely I'll be using your library for lot of my upcoming apps. And well here's the good news, the app has been released in Google Play. I am attaching the link for the app, request you to please add it to the hall of fame record of yours.. \nhttps://play.google.com/store/apps/details?id=com.pst.mrwhipped&hl=en\nAlso, I've given you attribution inside the application as well.. \nThanks a ton once again Dave !  Expecting a lot more libraries from you ... You rock ! Keep going !\n. Thanks a lot Dave ! Wish you could create more revolutionary libraries like these ! My best wishes and thanks again ! \n. Thanks Dave. But, I don't want the image to be cropped. I want a full sized image to be displayed in my app. \n. ",
    "LuigiPapino": "Just for reference, here a library that conflict with SubSamplingScaleImageView:\n'org.rocko.bpb:library:1.0.0'\n. ",
    "beniroquai": "Thank you very much. This solved my problem!\nAm 03.07.2015 08:17 schrieb \"davemorrissey\" notifications@github.com:\n\nClosed #85\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/85.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/85#event-347122708\n.\n. \n",
    "ArLabDev": "Is it still unsupported big textures from Bitmap?. Just tried, on 3.10 still give OpenGLRenderer error. @davemorrissey, not reporting a bug.\nIf this is the expected behavior, it is not a bug. In fact, when I used your viewer, I didn't realize that it won't work on big images using ImageSource.bitmap().\nJust asked if now it works.\nIt has reported to me a bug in my app on a quite old device that has 16Mpixel camera and 4096x4096 textures. So it crashed. now devices has bigger textures and camera image is no more a problem.\nTo fix the problem for a device I need to save the image on disk and then ask to the viewer to reload it. Time and memory spent on all devices just for a problem on few ones.\nI'm wondering if there is a fast way to get maximum texture size (it seems that I have to allocate OpenGL surface to do that)\nAnyway, just explaining my problem.\nThanks to you for your great viewer.\n. Right, sorry.. ",
    "XBeg9": "+1\n. ",
    "gyatsina": "Hi\naccording to my investigation bug is related to this issue:\nhttps://code.google.com/p/android/issues/detail?id=80316\nOn some Lollipop devices (in my case on Nexus 5) big PNG images were not loaded. \nBitmapRegionDecoder was returning null for decoded image with size 4300*4800.\nResizing of image was not the case. Cause we had on image lots of words. And so after any sufficient resizing quality of font was lost. \nThe solution was: 1) to use JPG format\n2) image should have 24 bit depth (not 8 bit!)\n. ",
    "pop1030123": "07-10 00:17:06.352 D/skia    (28585): --- decoder->buildTileIndex returned false\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585): Failed to initialise bitmap decoder\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585): java.io.IOException: Image failed to decode using JPEG decoder\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585):  at android.graphics.BitmapRegionDecoder.nativeNewInstance(Native Method)\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585):  at android.graphics.BitmapRegionDecoder.newInstance(BitmapRegionDecoder.java:124)\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585):  at android.graphics.BitmapRegionDecoder.newInstance(BitmapRegionDecoder.java:150)\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585):  at com.davemorrissey.labs.subscaleview.decoder.SkiaImageRegionDecoder.init(SkiaImageRegionDecoder.java:61)\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585):  at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1370)\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585):  at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1346)\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585):  at android.os.AsyncTask$2.call(AsyncTask.java:288)\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585):  at java.util.concurrent.FutureTask.run(FutureTask.java:237)\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585):  at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585):  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585):  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n07-10 00:17:06.352 E/SubsamplingScaleImageView(28585):  at java.lang.Thread.run(Thread.java:841)\n07-10 00:17:06.352 D/GALLERY:ImageShowFragment:(28585): onImageLoadError:java.io.IOException: Image failed to decode using JPEG decoder\n. ",
    "mittalharsh54": "i am using png image but I am also getting same error. What should i do pls tell me,\n. ",
    "bluebery": "thanks very much for your reply. Invalidate() didn't help me so I ended up just refactoring to draw to my result bitmap on the UI thread; the async task was left to just deal with disk IO\n. I was trying imageView.invalidate() from the onPostExecute of my Async task so it would have been on the UI thread. It does end up triggering the onDraw method in SubscamplingScaleImageView and goes all the way down to canvas.drawBitmap(bitmap, matrix, bitmapPaint) - a breakpoint there reveals bitmap contains the expected result but it doesn't end up drawing it completely to the canvas.\nOne thing to note is that I am using fragments here in a viewpager and it is the view pager events that I am using to trigger the result bitmap generation async task when the fragment comes into view. (My viewpager offscreenpageLimit is set so that the pages don't get cleared from memory)\nDon't stress it too much, I may have made a poor assumption elsewhere that may be the cause of this .. and my refactor seems to do the trick.\n. ",
    "omgnuts": "Hello, I took some time off to study your code a little more. Putting it in the static initializer actually makes sense to enable/disable that option freely. I could put up an additional signature for that initializer, \nHowever, I'm having trouble determining where to set the flag in the view itself. I had a look at setImage, and isCached is still needed until onImageLoaded. \nprivate synchronized void onImageLoaded(Bitmap bitmap, int sOrientation) {\n        ....\n        if (this.bitmap != null && !isCached) { <-- previous bitmap\n            this.bitmap.recycle();\n        }\n        this.preview = false;\n        this.bitmap = bitmap;\nThere are 2 calls from from setImage(), which are fairly easy to handle. But there is 3rd call from BitmapLoadTask.onPostExecute, which does not carry a reference to ImageSource (to obtain that boolean info). The current AsyncTask class looks clean and I don't think ImageSource should be introduced in it. \nAlso, there is another thing about deciding whether Previewimages are cached or not. \nI hope I understand your code correctly. Is there a better place to set the flag in the subsamplingview that I'm missing? Thanks and have a good day!\n. Here's a fix for that if you need it. Check this compare: https://github.com/omgnuts/lib-subsampling-scale-image-view/commit/8e5d2463faae4a377dded254b9a02e394a2313b3. In the above fix, you need to extend the class and use setCacheEnabled(true). Its used on a production app with a few million requests, so its stable. I have it used it with picasso, glide, and another imageloader I wrote.\nAnother way would be to allow the caching to be done on a per call basis, but it would change the code too much at this point.\n. ",
    "yazeed44": "then you need to open it in a graphics editor and save it again\nThat's the problem , i can't because my app gets the images from the device storage\n. Is there a way to format the images in the code ?\n. > but only if you're certain it will fit in memory as a Bitmap.\nThat's the problem , i could use glide for this objective but it can't exceed 4096x4096 \n. ",
    "mahesh825mahi": "\nI have attached image for your reference, have a look on it. \n. yes, i go thought the full code. i can able to add single \"marker\" over it but multiple marker can not.\nPlease have look the blow code that you have written:\nimageView.setPin(new PointF(1718f, 581f));\nimageView.setPin(new PointF(1192f, 565f));\ni using above code to add 2 pins but it took second  point only (1192f, 565f).\n. Thanks for your response. \n. ",
    "tomoyuki28jp": "If there is no built-in way, is there a way to show loading indicator image and replace them after finish loading image over http? When we load image over http in background, onPostExecute might not be executed in the order I want to show images so I think we cannot just use setImage in that case?\n. @davemorrissey Thanks for your reply!\n\nFor a loading indicator, please see the wiki.\n\nI checked the wiki, but I'm not sure how can I show a loading indicator image (like imageView holder) and replace the image. Could you point me out specific wiki page url? Thanks in advance!\n. ",
    "JavierSolis": "tomoyuki28jp x2. ",
    "mdwem": "HI,i checked wiki,installation steps and android studio guides.Following similar steps on android studio don't work.Is these a documentation variable for android studio.\n. ",
    "DavidWiesner": ":thumbsup: thx \n. ",
    "shmoula": "Thanks for reply, dave. I'll try to!\n. ",
    "LeonScroggins": "Hi Dave,\nWhen you say \"They haven't yet responded to my bug reports,\" do you mean Skia? Sorry if we (Skia) have been unresponsive :(\nFor any future Skia bugs, if they are image decoding related (like this one) feel free to assign it to me (scroggo@google.com). For more general Android (Skia) bugs, djsollen@ should be able to route it. Otherwise hcm@ typically handles our bug triage.\n. > Actually I raised the bug in the Android issues tracker because I wasn't sure where it should be\n\nreported. See this link https://code.google.com/p/android/issues/detail?id=76976\n\nThat seems like a reasonably place, although I am not aware of issues there being actively triaged. If have a bug that you think is Skia (drawing or image decoding related), I would recommend filing a bug with https://code.google.com/p/skia/. I have filed your bug as skbug.com/4264, and I or a coworker will take a look.\n\nAnecdotally, Android 5 has more problems than earlier versions, but that could be due to Android\nitself, manufacturer alterations or hardware.\n\nNothing comes to mind as a problem specifically related to Android 5, but BitmapRegionDecoder relies on some Android-specific modifications to libpng and libjpeg. We've had a few instances where we upgraded our versions of those libraries and our modifications no longer worked. We're actively working to fix this problem though.\n\nIf you release fixes to Skia, how long does it take for them to be incorporated into Android releases?\n\nIn general, a fix to Skia will go into the next Android release. The window for M has passed, but any fixes to Skia made today will go into the following release \n. ",
    "philipgiuliani": "+1 Cannot build my project with SDK 23 because of this.\n. ",
    "QuadFlask": ":+1: \n. ",
    "vkuba": "Hi davemorrissey  and kkrishnan90 have You found any solution for this issue?\nI have 2 images that are bigger than my screen size for example:\n(On the right and left it's the same image)\n\nI want to have 2 scaled images that looks the same on all devices.\nI useed setMinimumScaleType(SCALE_TYPE_CENTER_CROP) on 1st and 2nd SubsamplingScaleImageView but as You can see I get images that doesn't fit to my View size.\n. ",
    "fukemy": "Hi i found SCALE_TYPE_CENTER_CROP not working when image size < screen size. eg : my image size is 300-600 while screen size is 720-1024. Hi. i have some informationView in top of imageView, i want to hide it when start double click or start zoom -> hide informationView, then when imageView scale back to minimum -> show informationView\n Can u give some advices? thanks . hi @calvingoc , can u explain why need to use 420f in line of code: \nfloat w = (density/420f) * pin.getWidth();\nfloat h = (density/420f) * pin.getHeight();\nSorry if it's a silly question, as my knowledge not all device have same density. Hi. I did it but use the other way, just get image click and compare click location with pin location. Assume getLengthFromTwoPoint(pinLocation, clickLocation) < 200 -> click to pin. ",
    "Yarikx": "It might be some race issue, as it not always reproducible for the same image.\n. Ok, after small debugging I found the case how to reproduce.\nThe key step is to load 'cached' image second time.\nAfter first call method 'setImage' everything works fine, bitmap is loaded, 'bitmapIsCached' is set to true, and method 'onImageLoaded' is executed, which after all reset flag 'bitmapIsCached' back to false.\nIf we call 'setImage' with the same image, the view try to call 'reset(true)' method, and as flag 'bitmapIsCached' is false, it recycle source bitmap\n. ",
    "mhousser": "Unfortunate. Will not recommend this library.\n. ",
    "gokhanbarisaker": "Here is a way to use SubsamplingScaleImageView with decoder and region decoder,\nhttps://gist.github.com/gokhanbarisaker/c116bea7fc10e6eac25d\nMake sure \n- Your OkHttp client is using a disk cache\n- You are calling picasso.cancelTag(tagYouUsedInDecoderConstructor), when you are done with the image. e.g., Fragment/Activity onDestroy callback\n. Please do. I was thinking of contacting with you for that. I already owe you for this library :)\nThe ARGB_8888 is essential in my app for the color changes needs to be smooth. In this case, changing the default value to RGB_565 might be wiser, as in your other decoder examples\n. @KingWu, setBitmapDecoderClass(...)  and setRegionDecoderClass(...) methods uses\nCompatDecoderFactory, that expects empty constructor for given class to initialize new instances of BitmapDecoder and RegionDecoder. In your case you will need to replace constructor with default (empty) version. i.e.,\njava\npublic PicassoRegionDecoder () {\n    // TODO: Don't forget to initialize OkHttpClient instance during init method call, or (even better) use your singleton OkHttpClient instance for application.\n    /**\n     * See [response caching paragraph #2](https://github.com/square/okhttp/wiki/Recipes#response-caching) for why singleton client usage is better.\n     *\n     * \"Most applications should call new OkHttpClient() exactly once, configure it with their cache, \n     * and use that same instance everywhere. Otherwise the two cache instances will stomp on \n     * each other, corrupt the response cache, and possibly crash your program.\"\n     */\n}\nAs an alternative, you can initialize your custom DecoderFactory\n. ",
    "KingWu": "@gokhanbarisaker Any example show how to use these decoder and region decoder? I got this error\n10-05 01:51:09.066    4128-4192/com.votee.dev E/SubsamplingScaleImageView\ufe55 Failed to initialise bitmap decoder\n    java.lang.InstantiationException: class com.votee.core.util.zoom.PicassoRegionDecoder has no zero argument constructor\n            at java.lang.Class.newInstance(Class.java:1597)\n            at com.davemorrissey.labs.subscaleview.decoder.CompatDecoderFactory.make(CompatDecoderFactory.java:18)\n            at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1399)\n            at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1376)\n            at android.os.AsyncTask$2.call(AsyncTask.java:292)\n            at java.util.concurrent.FutureTask.run(FutureTask.java:237)\n            at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n            at java.lang.Thread.run(Thread.java:818)\n     Caused by: java.lang.NoSuchMethodException:  []\n            at java.lang.Class.getConstructor(Class.java:531)\n            at java.lang.Class.getDeclaredConstructor(Class.java:510)\n            at java.lang.Class.newInstance(Class.java:1595)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at com.davemorrissey.labs.subscaleview.decoder.CompatDecoderFactory.make(CompatDecoderFactory.java:18)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1399)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1376)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at android.os.AsyncTask$2.call(AsyncTask.java:292)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.util.concurrent.FutureTask.run(FutureTask.java:237)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.lang.Thread.run(Thread.java:818)\n. ",
    "samskiter": "Just confirmed the issue is URL encoding by passing a the URI as a string to ImageSource, but using URLDecoder beforehand.\n. PR: https://github.com/davemorrissey/subsampling-scale-image-view/pull/115\n. Right, so I think the issue is that android can return a URI with URI encoding in it.\nThe chain of events to arrive at this situation was to iterate files in a directory and form a URI like this:\nUri.fromFile(file)\nWhich results in something like:\nfile:///storage/emulated/0/Pictures/MyApplication/My%20Image.jpg  which is why I tried to make sure Uri.parse was called on the string.\nSo the actual problem here is that file URI's need to be decoded as URI encoded objects...\nAlso worth noting, the same URI worked fine with the Glide framework... I'm not sure what they do differently.\n. Hmmm, so maybe I need to do a test with Glide with an image named Imag%20001.jpg and loaded differently. I suppose it assumes that all URIs must be URI encoded.\n. ",
    "Uscher1": "Same problem here. Please apply PR.\n. EXIF orientation is handled in Release 3.4.0 when image is from media store, but not when image comes from file. Please handle also this case with ExifInterface as suggested here. Thank you.\n. I confirm problem is not fixed in 3.4.1. Please reopen issue.\n. In my sample code below I fix the problem with a workaround that sets the orientation explicitely.\nImageSource imgSource = null;\n            try\n            {\n                imgSource = ImageSource.uri(file.getPath());\n            }\n            catch (Exception ignored)\n            {\n            }\n            if (imgSource != null)\n            {\n                // In subsampling-scale-image-view Release 3.4.1 the orientation is not properly\n                // handled. Workaround: We handle EXIF angle manually.\n                imgView.setOrientation(getMediaRotationAngle(file));\n                txtView.setVisibility(View.GONE);\n                imgView.setImage(imgSource);\n            }\nRetrieve orientation...\n```\n    private int getMediaRotationAngle(File file)\n    {\n        // Create EXIF reader\n        ExifInterface exifReader;\n        try\n        {\n            exifReader = new ExifInterface(file.getPath());\n        }\n        catch (Exception e)\n        {\n            return 0; // something is wrong with the file\n        }\n    // Retrieve rotation\n    int exifOrientation = 0;\n    int rotation = exifReader.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);\n    if (rotation == ExifInterface.ORIENTATION_ROTATE_90)\n    {\n        exifOrientation = 90;\n    }\n    else if (rotation == ExifInterface.ORIENTATION_ROTATE_180)\n    {\n        exifOrientation = 180;\n    }\n    else if (rotation == ExifInterface.ORIENTATION_ROTATE_270)\n    {\n        exifOrientation = 270;\n    }\n\n    return exifOrientation;\n}\n\n```\nOriginal image  - It is not correcty displayed here, too. Click on it and you see the correct orientation where the tire is vertical.\n\nScreenshot (without workaround) - Wrong orientation. Tire should be vertical.\n\nLatest test was done on LG Nexus 5 and Android 6 (API 23), but also happened before Android 6.\n. I expected EXIF to be considered by default. But I see using ORIENTATION_USE_EXIF does the trick.\n. ",
    "zulluadi": "Just saw viewToSource method which seems to do what I need.\n. ",
    "franciscofranco": "Sorry for bringing this from the dead, but instead of using reflection to access the POOL_EXECUTOR you can use https://github.com/android/platform_frameworks_support/blob/master/v4/java/android/support/v4/os/AsyncTaskCompat.java probably saving some overhead from the reflection.\n. For the past couple months I've been using a dedicated Executor for AsyncTasks instead of the POOL_EXECUTOR for this exact reason. I use Executor.newCachedThreadPool() because it spawns whatever threads it needs, re-uses previously cached Threads and if they aren't used for 60 seconds they are destroyed.\nRegarding your N5X, it's an odd case because it's very likely these jobs aren't queued into the A57 cores, but to the A53 cores which are ridiculously underpowered. I'll guess that the task scheduler will actively migrate threads to the A57 if there are a lot of them being created since the scheduler doesn't want to starve cores, so that might improve performance.. I can do that sometime soon, I have like 20 different phones. I think the current tile loading performance is good but I also wonder if it can be better with a different Executor. The PR code is trivial, I'll play with it.. A quick and dirty test (without any numbers to back it up) using a different Executor on the card.jpg of the sample app doesn't seem to make any real world perceptible difference on an One Plus 5, but then again this chipset is a monster.. Without checking the code I wouldn't be surprised if those \"interfaces\" were single-threaded.\nYep, I always thought why you did that in the first place. If you change that behavior it'll be nothing short of amazing.. I make custom Kernels for Android devices, so I know your pain. I'll be more than happy to test that change, I have devices ranging from the Galaxy Nexus/N4 to the monstruous S8/Pixel/OP5.. Interesting, I kind of expected it after seeing the results with other Executors. Yeah a dedicated single threaded Executor will be definitely be marginally better on devices with lots of AsyncTasks running in the background using the default serial executor.. Theoretically that sounds lovely! Why 4 decoders and not N where N = number of CPUs available?. Outstanding. Let me get those changes on my app and test a bit on different devices and I'll give you some feedback.. My preliminary very unscientific test shows a near 2x faster decoding of tiles when zooming in, and I don't notice tiles catching up anymore when panning, they're just there, ready and high quality. This was tested on the Pixel. Will try on some half-assed devices like the Nexus 4, Mi A1, etc. But I'm really enjoying seeing these improvements right now.. That single core QSD8250 CPU won't be happy :). These changes are AWESOME!. I quickly abandoned 8888 as the defaults on my app and leave it to the users to choose if they want to, but I lower the tile dpi to 240 and 160 if ActivityManager.isLowRamDevice(). I only use SDK >= 21 so I'm fine with these new features being default on that api level, and it works beautifully.. Here try the apk I've been working on. It's a simple gallery with a proper UI just with the features I need and like with a small size to be usable on emerging markets with garbage devices with low storage and lame internet caps. Just pasting this here for you to see your 3.9.0-ALPHA changes in action in a real app https://www.dropbox.com/s/jmzvgwc60dus4dz/FocusGo-1.0-Beta1.apk. Thanks for that method helper! Yeah, it's using the Pooled decoder and using the default 320 dpi with 565 unless the user chooses to use 8888. Can you push these changes to maven? Not using the source project on my project by default.. Yup, that's what I was asking. I currently have ~7k beta testers with a wide range of devices and not a single report of bad performance or strange events with picture viewing, just to let you know.. Just to let you know, I already have 2 apps on production with this patchset, no issues reported so far.. Thanks Dave. Have a good one!\n. Let me know if you need more info, code samples, or the pictures that are triggering the resource leak.\n. Yeah I was kinda hoping for a new release too since I reported that bug and saw the fix :)\n. Because your device doesn't support bigger textures than 2048x2048 you can't load one into memory. That's precisely the idea of this lib, offloads you from that job and downsamples the picture.\n. I have the same exact issue ya'll reporting. The only way I can make it stop is using a lower minimumTileDpi to like 104. The \"un-zoomed\" picture quality is degraded, but at least it doesn't lag anymore when swiping through the viewPager. I would love a public access to the reset() method so I could cancel every decoding work as soon the user swipes to another page.\n. Device is irrelevant. My test devices are the following: Nexus 6P, 6, 5X, 5, 4, 9, 10, One Plus One, One Plus 2 and One Plus X. Image type is irrelevant as well. Code is straightforward, pretty similar to the sample. My use case is simple, I use Glide for 80x80 thumbnails, I click a thumb, I call Glide to re-use the 80x80 cached bitmap and once that is up I pass the URI of the actual picture to this library and replace the Glide'd image. Sounds a bit overwhelming but it's way faster to re-use an already decoded, resampled & resized cached bitmap as a \"preview\" instead of relying on this lib to present a preview and then decode the picture. This is for my use case though, I spent a couple weeks debugging and testing all possible combinations. If I don't use a custom minimumTileDpi I encounter lag if I swipe on my ViewPager while the picture is being decoded by this lib, and if I swipe fast there are a couple hangs in what looks like the lib is still decoding the previous picture so it has to wait for something until it starts to decode the new picture in the foreground. And yes I use the parallel threading option.\nMy ViewPager is pretty lightweight too, I don't use fragments or anything, I simply replace the views inside so I save some overhead of re-creating new fragments for every swipe.\nNevertheless I love this lib, and I don't plan on not using it. I did a couple tests yesterday after reading this and I settled for 196 as minimumTileDpi. It's not as \"fluid\" as using lower dpi value (which is fairly obvious) the picture quality gain against my old value (104) is enough to justify and with tiling the users can just zoom for more detail.\nI hope that was helpful.\n. > I Still wonder, why I'm facing it only on the one device/image combination.\nI can almost guess it's because lower end devices have:\n1. lower resolution so the inSample calculation is more aggressive on the decode\n2. smaller max texture size which also limits the inSample calculation\nOn powerful devices we can assume there's enough juice, resolution & texture size to be a little more forgiven in the scaling math. This is really hard to get right, even Google on Photos hasn't nailed it and I can trigger lag fairly easily if I try enough. Although I think this lib already does a fucking amazing job at having a working middle ground.\n. @kakai248 isn't that a bit overkill? You're basically doing this lib's job of decoding with another lib... The setMaxBitmapDimensions method seems useful, I'll play with it.\n. That makes sense!\n. I support this as well.. There's some great information about Bitmap.Config.HARDWARE here https://twitter.com/commonsguy/status/894983637585858560. Sure, I'll try that right now!\nSoftware based rendering is even worse with the default 320dpi, it's barely unusable while using 8888 on the bitmap decoder and region decoder. Tested on my Pixel 2016. I can try other devices as well if that helps.. Also, to add more fuel to the fire, setting both bitmap decoder and region bitmap decoder to 8888 makes things even worse, even something as low as 160dpi there's some stutter when scaling up/down during pinch to zoom or double tap to zoom.. I'll re-test everything on the Nexus 5X. With setLayerType(LAYER_TYPE_SOFTWARE, null) performance was destroyed on a Pixel. Even tested it with the native display dpi. Anyway I'll keep you posted of my tests, I want to help with this as much as I can.. On my N5X with the default hardware layer, 320dpi and 8888 there's the usual horizontal viewpager scroll jank, but zooming in/out + panning is 10x smoother. With a software layer, same setup it's smoother (though not perfect) horizontal viewpaget scroll, but zooming in/out + pan is completely destroyed. It seems software rendering is way better on the 5X compared to the Pixel in this specific case. 160dpi definitely subsamples, and there's still some jank, but it's tolerable, on the Pixel is destroyed. So with the 5X I can confirm your observations.. I don't seem to have this crash anywhere and I use the support Exif support lib standalone in several projects. Something smells fishy with your code. Can you post it for us?. No, that's not the app. Anyway your code seems alright, so I dunno. Works fine on my end so that's definitely funky.. configurations.all {\n    resolutionStrategy.eachDependency { DependencyResolveDetails details ->\n        def requested = details.requested\n        if (requested.group == 'com.android.support') {\n            details.useVersion '27.1.1'\n        }\n    }\n}. ",
    "AlexVPerl": "Hi Dave - revisiting this after a long pause.\nAsyncTask still remains an issue blocking images from loading if other AsyncTasks are running. The limitation is that only max of 5 tasks can run simultaneously. \nAsyncTask.THREAD_POOL_EXECUTOR does not resolve this issue. All it does is execute tasks in parallel instead of serial order. It does nothing to address the limit of 5 tasks, rest will be queued.\nI'm still constantly running into issues where images cannot be loaded for a while because other AsyncTasks are running. \nWould it be possible to address this in near future by replacing AsyncTasks with regular Threads?\nThanks in advance!. Great addition to the library, thanks. Any quick example or explanation of values and what they do would be great too \ud83d\udc4d Specifically ZoomDuration, ZoomScale & ZoomStyle :)\n. Awesome - thanks!\n. ",
    "filnik": "Actually I have no snackbar. I've not tried, but I think that to reproduce the problem you just have to put two images in the same layout, put one finger to each view and simply move them keeping touching the screen.\nThe solution I proposed will disable the feature only when you have 2 images touched at the same time. So it will work as it works right now, except when you touch 2 images at once. You will have a bug only if you touch 2 images IN a viewpager with this fix --> almost never and it is safe.\nIf you don't want to merge it ok, but I think it's pretty safe right now.\n. Ok. I'll let you know if I come up with a better solution then, thanks :)\n. ",
    "writtmeyer": "Since this event is handled within the SubsamplingScaleImageView itself (and then transforming it to an onClick event) I thought it would be a useful extension.\n. ",
    "Shusshu": "I just encountered this problem on 3.4.1 with a local file\n. image.setPanLimit(SubsamplingScaleImageView.PAN_LIMIT_INSIDE);\n    image.setQuickScaleEnabled(true);\nString fileUri = \"/sdcard/xxx/xx/xx/img.jpg\"; //the content of this string looks like this\nif (fileUri.startsWith(\"/\")) {\n    fileUri = Constants.FILE_SCHEME + fileUri; // I have to add file:// otherwise it won't work\n}\nimage.setImage(ImageSource.uri(Uri.parse(fileUri)));\nScreenshot\nhttp://imgur.com/seVttbj\noriginal img\nhttp://imgur.com/HTCcQxq\nandroid 5.x at least, sony experia & emulator genymotion\n. @Uscher1  I just tried with image.setOrientation(SubsamplingScaleImageView.ORIENTATION_USE_EXIF); and it works.\n@davemorrissey shouldn't it be the default behaviour?\n. ",
    "Xlythe": "I'm still seeing bugs with ORIENTATION_USE_EXIF, when I use subsamplingScaleImageView.setImage(ImageSource.uri(...));. It works if I check the Exif rotation values of the file myself and set the orientation manually.\nNote that the uris are of the type \"content://mms/part/[id]\". I didn't test if it's specific to mms uris or not.. ",
    "MFlisar": "I can post the adapter if you want, but I think I've found something:\n- I'm using activity transitions, if I disable them, it works fine... onReady/onImageLoaded seems to work always now as I can see, just the image stays empty until i swipe a bit on it...\n- it happens more often with big images (4000x4000 and upwards)\nAny ideas on that?\nI want to change this anyway to use a preview image on top of your view for the transitions. This may solve this problem as the transitions won't mess around with your views visibility...\n. Actually, the second thing is not reproducable anymore... So I would say that was something different. Probably something with transitions, I'm not sure anymore.\nIf the other thing can't be solved currently, I would suggest something like following: a constructor for the image that takes a size as well, so the image could be loaded before the view is rendered? Or something similar\n. Of course, the view size... But in a gallery app for example, the view size normally is full screen and therefore is already known, so this would probably be quite useful for many people\n. Could you make the mentioned function protected in your library? It's easier to keep up to date then if I don't have to use my own copy of your library...\nAnd also the  ScaleAndTranslate class...\nPS: just checked everything... there are more changes in private/protected/public changes that are necessary... Still, maybe you can change that though...\n. ",
    "inorichi": "I'm also facing the problem with the ViewPager, the image of a fragment is empty until a bit of swiping is done to that fragment.\nI have tried with a big offScreenPageLimit, but it still happens. Fragments already cached (when going back) doesn't have this issue.\nI thought it was related to #117, but I'm not using previews. I've also tried setting image dimensions.\nDisabling tiling fixes it, but I would like to keep it enabled. The images used are around ~1000x1600\n. With these changes I was able to load the initial tile before a fragment is partially visible. The view dimensions of non visible fragments from the viewpager are known beforehand (getWidth() and getHeight() return the view size), but the initial tile isn't loaded until the first onDraw call.\nThe problem is that we lose access to the canvas when initializing outside onDraw, so getMaximumBitmapWidth and getMaximumBitmapHeight can't be used.\nThat's the reason I added the setMaxDimensions method. Then in the onCreate of the activity I stored the value obtained from this method (the activity is declared hardware accelerated in the manifest) and assign that value to every image view with setMaxDimensions.\nIn my tablet and phone the method returns 4096 instead of the 16384 returned by the canvas method, but I haven't tried with bigger images so I don't know if there will be any issue.\nI'm also not sure if this causes any other problem in the library, but it works fine in my case.\nAre these changes safe enough @davemorrissey ?\n. You have to increase the maximum allowed scale. See setMaxScale and setMinimumDpi.\n. While it's not possible providing the initial state with setImage, it works calling setScaleAndCenter during onReady.\n. This is due to a wrong configuration by Xiaomi:\n\nThey are reporting 0.403 pixels per inch and they should fix it.. ",
    "ulyssesp": "No worries, thanks for getting it in so fast!\n. ",
    "tonyshkurenko": "How to check if it's animating now?\n. ",
    "great181855": "OK , thank you . It works correctly . I should read code and commit carefully .\n. ",
    "ntoskrnl": "that's very sad to hear :(\n. ",
    "baole": "I use subsampling-scale-image-view version 3.4.0\n. Hi @davemorrissey, please merge this issue with #68 and close it. I'm sorry for this redundancy\n. ",
    "satyarths": "I've tried that too.Is there any specific reason I cannot pan the image without zooming?\n. They only pan horizontally and not vertically,\nIf i zoom the images,then they pan vertically(for the full length) of the image and horizontally too.\nMore Context:\nI am trying to build a collage view which comprises of 2/3/4 SSIVs:MY individual unit is : \n```\n\n<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView\n    android:id=\"@+id/image_view\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n\n<ImageView\n    android:id=\"@+id/add_image\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_gravity=\"center\"\n    android:src=\"@drawable/ic_add_grey600_36dp\" />\n\n\n```\nI have a custom view group where i add these images and set layout params for each frame based on user selection accordingly calling  pictureFrame.layout(left,top,right,bottom)\nAttached is the full resolution image\n\n. The image does not pan  horizontally completely either\n. The issue is because I was inflating a custom layout which contained SSIV and then placing them in a  FrameLayout. This isn't directly an issue with SSIV. Please close the issue if the problem is out of scope . Thanks a lot :)\n. Yes a single bitmap would be much easier to handle,but I fear OOMs.However if this is an enhancement that you would consider and could guide me for areas where i could incorporate the feature for tiling.Do let me know :)\n. And is it possible to respect ExifOrientations like ORIENTATION_FLIP_HORIZONTAL?\n. But you do not have those constants in your exif array.Because its too big an image and you want to make a collage out of it or edit etc.Hence I would flip->save->read from disk with tiling enabled.\n. Yes,I am referring to supporting those EXIF flags. Thanks!So would that be a considered enhancement?or is it  out of scope?\n. I sort of needed a quick fix for this,so for now:I create a copy of the flipped bitmap and use SSIV on that.It would be too complex otherwise. Do you see any problem in this approach?\n. ",
    "MayurDev": "Can you give some hint how can achieve ?\n. ",
    "calvingoc": "I answered this question in post 236.. There is probably a better way to do this but I changed the class to what I copied below. Now to add a pin you give it a point and a name and as long as each point has a unique name you can add as many as you want. You can remove any point by calling the removePin(String nameOfPinToRemove) function and can get an array of all the pins you currently have with the getPinNames() function.\npublic class PinView extends SubsamplingScaleImageView {\nprivate ArrayList<PointF> sPin = new ArrayList<>();\nprivate ArrayList<String> pinNames = new ArrayList<>();\nprivate Bitmap pin;\n\npublic PinView(Context context) {\n    this(context, null);\n}\n\npublic PinView(Context context, AttributeSet attr) {\n    super(context, attr);\n    initialise();\n}\n\npublic boolean setPin(PointF sPin, String name) {\n    if (pinNames.contains(name)){\n        return false;\n    } else {\n        this.sPin.add(sPin);\n        pinNames.add(name);\n        initialise();\n        invalidate();\n        return true;\n    }\n}\n\npublic PointF getPin(String name) {\n\n    return sPin.get(pinNames.indexOf(name));\n}\n\npublic boolean removePin(String name){\n    if (pinNames.contains(name)){\n        sPin.remove(pinNames.indexOf(name));\n        pinNames.remove(name);\n        return true;\n    } else {\n        return false;\n    }\n}\n\npublic ArrayList<String> getPinNames(){\n    return pinNames;\n}\n\nprivate void initialise() {\n    float density = getResources().getDisplayMetrics().densityDpi;\n    pin = BitmapFactory.decodeResource(this.getResources(), R.drawable.pin);\n    float w = (density/420f) * pin.getWidth();\n    float h = (density/420f) * pin.getHeight();\n    pin = Bitmap.createScaledBitmap(pin, (int)w, (int)h, true);\n}\n\n@Override\nprotected void onDraw(Canvas canvas) {\n    super.onDraw(canvas);\n\n    // Don't draw pin before image is ready so it doesn't move around during setup.\n    if (!isReady()) {\n        return;\n    }\n\n    Paint paint = new Paint();\n    paint.setAntiAlias(true);\n    for (PointF point : sPin){\n        if (point != null && pin != null) {\n            PointF vPin = sourceToViewCoord(point);\n            float vX = vPin.x - (pin.getWidth()/2);\n            float vY = vPin.y - pin.getHeight();\n            canvas.drawBitmap(pin, vX, vY, paint);\n        }\n    }\n}\n\n}\n. ",
    "brianguertin": "I wanted the same thing; I made a cropping tool where you have a circle in the center of the screen and you drag/zoom the image underneath in order to crop it.\n@ntoskrnl The only change I had to make to this library was to make the fitToBounds protected instead of private. Then, I was able to get the behaviour I wanted by overriding to account for the view's \"padding\". I'm using PAN_LIMIT_INSIDE.\nHere's my full class:\n``` java\npublic class CropImageView extends SubsamplingScaleImageView {\npublic CropImageView(Context context, AttributeSet attrs) {\n    super(context, attrs);\n    setOrientation(ORIENTATION_USE_EXIF);\n    setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_CENTER_CROP);\n}\n\n@Override\nprotected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n    super.onLayout(changed, left, top, right, bottom);\n    final int horizontalPadding = (int) getResources().getDimension(R.dimen.widget_margin);\n    final int verticalPadding = (getHeight() - (getWidth() - horizontalPadding * 2)) / 2;\n    setPadding(horizontalPadding, verticalPadding, horizontalPadding, verticalPadding);\n    setPanLimit(PAN_LIMIT_INSIDE);\n}\n\npublic CropImageView(Context context) {\n    this(context, null);\n}\n\n// Extend fitToBounds function to account for view padding\n@Override\nprotected void fitToBounds(boolean center, ScaleAndTranslate sat) {\n    if (panLimit == PAN_LIMIT_OUTSIDE && isReady()) {\n        center = false;\n    }\n\n    PointF vTranslate = sat.vTranslate;\n    float scale = limitedScale(sat.scale);\n    float scaleWidth = scale * sWidth();\n    float scaleHeight = scale * sHeight();\n\n    if (panLimit == PAN_LIMIT_CENTER && isReady()) {\n        vTranslate.x = Math.max(vTranslate.x, getWidth() / 2 - scaleWidth);\n        vTranslate.y = Math.max(vTranslate.y, getHeight() / 2 - scaleHeight);\n    } else if (center) {\n        vTranslate.x = Math.max(vTranslate.x, getWidth() - scaleWidth - getPaddingRight());\n        vTranslate.y = Math.max(vTranslate.y, getHeight() - scaleHeight - getPaddingBottom());\n    } else {\n        vTranslate.x = Math.max(vTranslate.x, -scaleWidth);\n        vTranslate.y = Math.max(vTranslate.y, -scaleHeight);\n    }\n\n    float maxTx;\n    float maxTy;\n    if (panLimit == PAN_LIMIT_CENTER && isReady()) {\n        maxTx = Math.max(0, getWidth() / 2);\n        maxTy = Math.max(0, getHeight() / 2);\n    } else if (center) {\n        maxTx = Math.max(0, getPaddingLeft());\n        maxTy = Math.max(0, getPaddingTop());\n    } else {\n        maxTx = Math.max(0, getWidth());\n        maxTy = Math.max(0, getHeight());\n    }\n\n    vTranslate.x = Math.min(vTranslate.x, maxTx);\n    vTranslate.y = Math.min(vTranslate.y, maxTy);\n\n    sat.scale = scale;\n}\n\n@NonNull\npublic Rect getCropRect() {\n    final PointF topLeft = this.viewToSourceCoord(getPaddingLeft(), getPaddingTop());\n    final PointF bottomRight = this.viewToSourceCoord(getWidth() - getPaddingRight(), getHeight() - getPaddingBottom());\n    return new Rect((int) topLeft.x, (int) topLeft.y, (int) bottomRight.x, (int) bottomRight.y);\n}\n\n}\n```\n. ",
    "plusCubed": "Hmm... I suppose this is a question of whether to maintain the user's initial intended center (and \"catch\" to readjust because of the centering) or to change to the new apparent center as the photo's width/height becomes larger than the viewport. Google Photos takes the second approach so the zoom seems unaffected by the edge and more smooth.\n. Google Photos appears to \"catch\" when zooming out to center the photo, but readjusts to the new center while zooming in so there's no catching.\n. ",
    "abhi385": "how to make zooming with out limit.\n. ",
    "SeloSlav": "Check out this repo: https://github.com/siddhpuraamitr/MultitouchWithDynamicAddandRemove\nI get that it's probably built on completely different principles, but who knows. Some inspiration at least.\n. I actually solved this by creating a Bitmap from the provided URL string extra, although I think this may defeat the purpose of SubsamplingScaleImageView because I'm loading the entire Bitmap.\n``` java\nprivate void locateImageView() throws URISyntaxException, IOException {\n    Bundle bundle = getIntent().getExtras();\n    if (bundle != null) {\n        if (bundle.getString(\"imageUrl\") != null) {\n            String imageUrl = bundle.getString(\"imageUrl\");\n            Log.w(getClass().toString(), imageUrl);\n        imageView = (SubsamplingScaleImageView) findViewById(R.id.image);\n\n        URL newUrl = new URL(imageUrl);\n\n        try {\n            URL url = new URL(imageUrl);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setDoInput(true);\n            connection.connect();\n            InputStream input = connection.getInputStream();\n            Bitmap myBitmap = BitmapFactory.decodeStream(input);\n\n            imageView.setImage(ImageSource.bitmap(myBitmap));\n\n        } catch (IOException e) {\n            // Log exception\n            Log.w(getClass().toString(), e);\n        }\n\n    }\n}\n\n}\n```\n. What do you mean exactly by I can't use HTTP URL? What features do I lose? It seems to work for me with the code I provided in my second post.\n. ",
    "wiradikusuma": "My bad, I got confused setOrientation() vs setRotation().\n. ",
    "sharathyadhav1": "thanks for your beautiful library i have fixed the issue !!!!\n. ",
    "Cyrilox": "The application is on Android: Humack\nhttps://play.google.com/store/apps/details?id=com.universio.humack\n. ",
    "anubhaw2091": "@bgogetap , Multiple line is a cool feature IMHO. \n@davemorrissey , if I add FreehandView in my xml, I can only zoom once and after that if I try to drag the image to the right/left, a line get's drawn. Can we \"start\" and \"stop\" the freehand drawing?\n. ",
    "duanju": "Thanks to reply this. The key of this issue is that when i add the configuration android:configChanges=\"orientation|keyboardHidden|screenSize\" in my AndroidManifest.xml file, subsampling-scale-image-view could not detect the rotation automatically. \n. Davemorrissey, you are right. I have resolved this problem by your comments. You did a great job. Thank you very much.\n. ",
    "rafaelekol": "I have same issue.\nI tried your suggestion to extend your class and reset image scale onSizeChanged. It helped me to reset the image on rotation, but now I got another problem. My images opens in zoomed state. What I did wrong?\n```\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView;\npublic class CustomSubsamplingScaleImageView extends SubsamplingScaleImageView {\npublic CustomSubsamplingScaleImageView(Context context, AttributeSet attr) {\n    super(context, attr);\n}\n\npublic CustomSubsamplingScaleImageView(Context context) {\n    super(context, null);\n}\n\n@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n    //reset image scale to original on image rotation\n    resetScaleAndCenter();\n}\n\n}\n```\n. Image viewed from native Gallery\n\nImage viewed via Subsampling has artefacts on top actionbar, just under plus sign.\n\n. Sorry I sent you screenshots from my Android phone(which are created in PNG format). The image that causes problem is actually JPEG(this image originally was created as screenshot in iPhone 6).\nI am attaching this original JPEG  image.\n\n. Thank you for advice\n. ",
    "jamie-beardedhen": "Thanks for the quick response. Would there be any disadvantages to setting the default maximum tile size to something small e.g. 512x512? I'm thinking it would be useful if this could be configured when loading the image, via some method like setMaxTileSize(int size). I'll update this issue after I've tried this change out.\n. ",
    "shingohu": "the main code in pageAdapter \npublic SparseArray mViews;\n public View instantiateItem(ViewGroup container, int position) {\n        View view = mViews.get(position);\n        if (view == null) {\n            view = newView(position);\n            mViews.put(position, view);\n            view.setTag(position);\n            container.addView(view);\n        }\n```\n    if (position == index && !isFirst) {\n        isFirst = true;\n        updateView(position);\n    }\nreturn view;\n\n}\n```\nand in updateView load the image\nI am use Glide to load image \n12-11 19:02:36.555 4259-4259/com.naodong.xgs.dev303 E/AndroidRuntime: FATAL EXCEPTION: main\n                                                                      Process: com.naodong.xgs.dev303, PID: 4259\n                                                                      java.lang.RuntimeException: Canvas: trying to use a recycled bitmap android.graphics.Bitmap@42cc11c8\n                                                                          at android.graphics.Canvas.throwIfCannotDraw(Canvas.java:1093)\n                                                                          at android.view.GLES20Canvas.drawBitmap(GLES20Canvas.java:827)\n                                                                          at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView.onDraw(SubsamplingScaleImageView.java:995)\n                                                                          at android.view.View.draw(View.java:14768)\n                                                                          at android.view.View.getDisplayList(View.java:13615)\n                                                                          at android.view.View.getDisplayList(View.java:13662)\n                                                                          at android.view.View.draw(View.java:14470)\n                                                                          at android.view.ViewGroup.drawChild(ViewGroup.java:3268)\n                                                                          at android.view.ViewGroup.dispatchDraw(ViewGroup.java:3077)\n                                                                          at android.view.View.getDisplayList(View.java:13607)\n                                                                          at android.view.View.getDisplayList(View.java:13662)\n                                                                          at android.view.View.draw(View.java:14470)\n                                                                          at android.view.ViewGroup.drawChild(ViewGroup.java:3268)\n                                                                          at android.view.ViewGroup.dispatchDraw(ViewGroup.java:3077)\n                                                                          at android.view.View.draw(View.java:14779)\n                                                                          at android.support.v4.view.ViewPager.draw(ViewPager.java:2259)\n                                                                          at android.view.View.getDisplayList(View.java:13615)\n                                                                          at android.view.View.getDisplayList(View.java:13662)\n                                                                          at android.view.View.draw(View.java:14470)\n                                                                          at android.view.ViewGroup.drawChild(ViewGroup.java:3268)\n                                                                          at android.view.ViewGroup.dispatchDraw(ViewGroup.java:3077)\n                                                                          at android.view.View.draw(View.java:14779)\n                                                                          at android.widget.FrameLayout.draw(FrameLayout.java:534)\n                                                                          at android.view.View.getDisplayList(View.java:13615)\n                                                                          at android.view.View.getDisplayList(View.java:13662)\n                                                                          at android.view.View.draw(View.java:14470)\n                                                                          at android.view.ViewGroup.drawChild(ViewGroup.java:3268)\n                                                                          at android.view.ViewGroup.dispatchDraw(ViewGroup.java:3077)\n                                                                          at android.view.View.getDisplayList(View.java:13607)\n                                                                          at android.view.View.getDisplayList(View.java:13662)\n                                                                          at android.view.View.draw(View.java:14470)\n                                                                          at android.view.ViewGroup.drawChild(ViewGroup.java:3268)\n                                                                          at android.view.ViewGroup.dispatchDraw(ViewGroup.java:3077)\n                                                                          at android.view.View.getDisplayList(View.java:13607)\n                                                                          at android.view.View.getDisplayList(View.java:13662)\n                                                                          at android.view.View.draw(View.java:14470)\n                                                                          at android.view.ViewGroup.drawChild(ViewGroup.java:3268)\n                                                                          at android.view.ViewGroup.dispatchDraw(ViewGroup.java:3077)\n                                                                          at com.android.internal.policy.impl.PhoneWindow$DecorView.dispatchDraw(PhoneWindow.java:2418)\n                                                                          at android.view.View.draw(View.java:14779)\n                                                                          at android.widget.FrameLayout.draw(FrameLayout.java:534)\n                                                                          at com.android.internal.policy.impl.PhoneWindow$DecorView.draw(PhoneWindow.java:2398)\n                                                                          at android.view.View.getDisplayList(View.java:13615)\n                                                                          at android.view.View.getDisplayList(View.java:13662)\n                                                                          at android.view.HardwareRenderer$GlRenderer.buildDisplayList(HardwareRenderer.java:1663)\n                                                                          at android.view.HardwareRenderer$GlRenderer.draw(HardwareRenderer.java:1538)\n                                                                          at android.view.ViewRootImpl.draw(ViewRootImpl.java:2775)\n                                                                          at android.view.ViewRootImpl.performDraw(ViewRootImpl.java:2637)\n                                                                          at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:2253)\n                                                                          at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1210)\n                                                                          at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:6408)\n                                                                          at android.view.Choreographer$CallbackRecord.run(Choreographer.java:807)\n                                                                          at android.view.Choreographer.doCallbacks(Choreographer.java:610)\n                                                                          at android.view.Choreographer.doFrame(Choreographer.java:578)\n                                                                          at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:793)\n                                                                          at android.os.Handler.handleCallback(Handler.java:808)\n                                                                          at android.os.Handler.dispatchMessage(Handler.java:103)\n                                                                          at android.os.Looper.loop(Looper.java:193)\n                                                                          at android.app.ActivityThread.main(ActivityThread.java:5551)\n                                                                          at java.lang.reflect.Method.invokeNative(Native Method)\n                                                                          at java.lang.reflect.Method.invoke(Method.java:515)\n                                                                          at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:914)\n                                                                          at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:730)\n                                                                          at dalvik.system.NativeStart.main(Native Method)\n12-11 19:02:36.664 892-5642/system_process E/AEE/LIBAEE: shell: cant create socket with aed: Connection refused\n12-11 19:02:45.591 994-994/com.android.systemui E/StatusBar.BatteryController: BatteryController receive ACTION_BATTERY_CHANGED; Battery level = 87; Battery scale = 100\n12-11 19:02:55.595 994-994/com.android.systemui E/StatusBar.BatteryController: BatteryController receive ACTION_BATTERY_CHANGED; Battery level = 87; Battery scale = 100\n. ",
    "vavan4567": "Hi, got the same issue. I would be very pleased if you help me fix it. Thanks.\nI can give more information. When I close Activity with a viewpager and try open it again app crashes.\nBy the way, I am using Glide for image loading. \nUPD. \nI fixed the issue. The issue was because I was loading thumbnail and bigimage in one SubsamplingScaleImageView, after I created one for thumbnail and one for big image the issue has gone.\nHope this answer will help someone\n. I am using Glide, and it works very fast. Try it\n. ",
    "donpwilson": "My solution to this issue was as follows:\nIn the Glide load of the full image do NOT use thumbnail option. Instead, use Glide to load each of the thumbnail and full image into separate SimpleTargets. Initialise a boolean flag for \"full image loaded\" to false. Then, in onResourceReady for the thumbnail check this flag and, if false, set imageView.setImage(...bitmap...). In onResourceReady for the full image set the flag to true and set imageView.setImage(...bitmap...).\nThis avoids the issue of Glide recycling the thumbnail bitmap (because the full image is ready) but before subsampling-scale-image_view has loaded it.\n. ",
    "xufan": "version based on 3.4.1\nI'm useing Fresco to load the image so i change SubsamplingScaleImageView a little bit.\noom happened in line 97 is Bitmap bitmap = decoder.decodeRegion(sRect, options);\n@Override\n    public Bitmap decodeRegion(Rect sRect, int sampleSize) {\n        synchronized (decoderLock) {\n            BitmapFactory.Options options = new BitmapFactory.Options();\n            options.inSampleSize = sampleSize;\n            options.inPreferredConfig = Config.RGB_565;\n            Bitmap bitmap = decoder.decodeRegion(sRect, options);\n            if (bitmap == null) {\n                throw new RuntimeException(\"Skia image decoder returned null bitmap - image format may not be supported\");\n            }\n            return bitmap;\n        }\n    }\ncode in SubsamplingScaleImageView to show Image:\n```\n        ImageRequest imageRequest = ImageRequestBuilder.newBuilderWithSource(Uri.parse(url)).build();\n        ImagePipeline imagePipeline = Fresco.getImagePipeline();\n        DataSource> dataSource = imagePipeline.fetchEncodedImage(imageRequest, this);\n        DraweeController controller = Fresco.newDraweeControllerBuilder()\n                .setOldController(mDraweeHolder.getController())\n                .setImageRequest(imageRequest)\n                .build();\n        DataSubscriber> dataSubscriber =\n                new BaseDataSubscriber>() {\n                    @Override\n                    protected void onNewResultImpl(\n                            DataSource> dataSource) {\n                        if (!dataSource.isFinished()) {\n                            return;\n                        }\n                        CloseableReference bytes = dataSource.getResult();\n                        if (bytes != null) {\n                            PooledByteBuffer pooledByteBuffer = bytes.get();\n                            PooledByteBufferInputStream sourceIs = new PooledByteBufferInputStream(pooledByteBuffer);\n                            try {\n                                BufferedInputStream bis = new BufferedInputStream(sourceIs);\n                                String filename = String.valueOf(url.hashCode());\n                                FileCache fileCache = new FileCache(getContext());\n                                final File f = new File(fileCache.getCacheDir(), filename);\n                                OutputStream os = null;\n                                try {\n                                    f.createNewFile();\n                                    os = new FileOutputStream(f);\n                                    byte[] buffer = new byte[1024];\n                                    int bufferLength;\n                                    while ((bufferLength = bis.read(buffer)) != -1) {\n                                        os.write(buffer, 0, bufferLength);\n                                    }\n                                } catch (IOException e) {\n                                    e.printStackTrace();\n                                } finally {\n                                    if (os != null) {\n                                        try {\n                                            os.close();\n                                        } catch (IOException e) {\n                                            e.printStackTrace();\n                                        }\n                                    }\n                                    if (bis != null) {\n                                        try {\n                                            bis.close();\n                                        } catch (IOException e) {\n                                            e.printStackTrace();\n                                        }\n                                    }\n                                }\n                                final int wh[] = ImageHelp.getWithHeight(f.getAbsolutePath());\n                                new Handler(Looper.getMainLooper()).post(new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        setImage(ImageSource.uri(f.getAbsolutePath()));\n                                        setMaxScale(SubsamplingScaleImageView.SCALE_TYPE_CUSTOM);\n                                        int width = getWidth();\n                                        int height = getHeight();\n                                        if (width == 0 || height == 0) {\n                                            width = DisplayUtil.getScreenWidth();\n                                            height = DisplayUtil.getScreenHeight();\n                                        }\n                                        if ((wh[1]> height) && wh[1] / wh[0] > height / width) {\n                                            PointF center = new PointF(getSWidth() / 2, 0);\n                                            float targetScale = Math.max(width / (float) wh[0], height / (float)wh[1]);\n                                            setScaleAndCenter(targetScale, center);\n                                        }\n                                    }\n                                });\n                            } catch (Exception e) {\n                                e.printStackTrace();\n                            } finally {\n                                dataSource.close();\n                                CloseableReference.closeSafely(bytes);\n                            }\n                        }\n                    }\n                @Override\n                protected void onFailureImpl(\n                        DataSource<CloseableReference<PooledByteBuffer>> dataSource) {\n                }\n            };\n    dataSource.subscribe(dataSubscriber, CallerThreadExecutor.getInstance());\n    mDraweeHolder.setController(controller);\n\n```\n. ",
    "wengwyue": "thanks, this work for me!\n. ",
    "vajiralasantha": "Hi, I got it working using following code.\nBitmapFactory.Options bitmapOptions =  new BitmapFactory.Options();\nbitmapOptions.inDither = true;\nbitmapOptions.inPreferredConfig = Bitmap.Config.RGB_565;\nbitmapOptions.inScaled = false;\nBitmap bitmapImage = BitmapFactory.decodeResource(getResources(), imageId, bitmapOptions);\nreturn ImageSource.bitmap(bitmapImage);\nI'm sure this is not the best way to do this. But it works well. Thanks.\n. ",
    "rossimo": "It's also useful to know if the user actually zoomed in on the image. Optimizations could be made if the user never zooms in.\n. ",
    "alvarorodriguezestruch": "Another case could be my case. I have an app with two images overlap, one of them is a metro image and on the top is the is another image with alpha 0 with different colours for each metro station. With this method I will know which metro station that user selected.\nFor this reason will be awesome that when I zoom the alpha 0 image set the same zoom for the other.\nI think that I could do it with the interfaces of onTouch but will be a little for difficult that with a onZoomChanged event.\nEven without this. I have to say that this is one of the best android libraries I have found.\nThank you very much for your work!!\nPD: Sorry for my poor english :S\n. ",
    "cxu123": "Thank you very much.\n. ",
    "AlvaroJimenez": "Solved ;)\n. ",
    "roby222": "finally I've solved thanks! but I replaced canvas ( and drawing bitmaps ) with  custom views.\nWith canvas approach the draw/scale bitmaps is too much slow, in particular if you scale a big bitmap Pin. (the drag is very laggy )\nInstead of scaling, I programmatically edit the height, width and x,y coords of the view.\n. @hunterand1 I don't promise nothing, but in the next weeks, I will try to put together a sample using it.sephiroth.android.library.imagezoom as Image Lib for zooming and pan. A custom \"Volley NetworkImageView \" for the pin and background.\nI don't think this solution works with maps ( tiles ).\nIt only works if you have a background bitmap (as an unique bitmap), and one or multiple pins (NetworkImageView) that you inject dinamically\n. ",
    "juanlabrador": "Sorry for the limited comment. When open, load image fine, but the screen freeze, later many seconds, this works, if before you touch the image, show message of \"app stopped\". \nThis is the message log. (Sorry for my english) Thanks.\n01-28 15:58:36.605 1871-1885/? E/ActivityManager: ANR in com.farmappweb.pests.androidpests (com.farmappweb.pests.androidpests/.activities.ShowImageActivity)\n                                                  PID: 15843\n                                                  Reason: Input dispatching timed out (Waiting to send non-key event because the touched window has not finished processing certain input events that were delivered to it over 500.0ms ago.  Wait queue length: 43.  Wait queue head age: 5606.7ms.)\n                                                  Load: 14.11 / 13.37 / 13.34\n                                                  CPU usage from 0ms to 5635ms later:\n                                                    100% 15843/com.farmappweb.pests.androidpests: 96% user + 3.1% kernel / faults: 12224 minor 32 major\n                                                    40% 1871/system_server: 18% user + 21% kernel / faults: 4587 minor 95 major\n                                                    0.1% 479/debuggerd: 0% user + 0.1% kernel / faults: 8967 minor 35 major\n                                                    11% 2881/com.android.systemui: 7.9% user + 3.3% kernel / faults: 2231 minor 11 major\n                                                    11% 3516/com.motorola.audiomonitor: 5.5% user + 5.8% kernel / faults: 2692 minor 30 major\n                                                    9% 3562/com.android.phone: 3.5% user + 5.5% kernel / faults: 2434 minor 10 major\n                                                    4.6% 3488/com.motorola.process.system: 4% user + 0.5% kernel / faults: 1859 minor 10 major\n                                                    4.6% 3555/com.motorola.modemservice: 1.5% user + 3% kernel / faults: 1865 minor 2 major\n                                                    3.5% 3509/com.android.nfc: 2.3% user + 1.2% kernel / faults: 1708 minor 8 major\n                                                    0.1% 2891/com.motorola.process.slpc: 0% user + 0% kernel / faults: 1999 minor 1 major\n                                                    2.1% 357/surfaceflinger: 0.7% user + 1.4% kernel / faults: 6 minor\n                                                    1.5% 178/mmcqd/0: 0% user + 1.5% kernel\n                                                    0% 3499/com.qualcomm.services.location: 0% user + 0% kernel / faults: 1291 minor 2 major\n                                                    0.5% 14669/kworker/0:0: 0% user + 0.5% kernel\n                                                    0.5% 15928/com.instagram.android: 0.3% user + 0.1% kernel / faults: 447 minor\n                                                    0.3% 93/kswapd0: 0% user + 0.3% kernel\n                                                    0.3% 7738/ksoftirqd/1: 0% user + 0.3% kernel\n                                                    0.3% 7742/ksoftirqd/2: 0% user + 0.3% kernel\n                                                    0.3% 7746/ksoftirqd/3: 0% user + 0.3% kernel\n                                                    0.1% 3/ksoftirqd/0: 0% user + 0.1% kernel\n                                                    0.1% 7/kworker/u:0H: 0% user + 0.1% kernel\n                                                    0.1% 162/cfinteractive: 0% user + 0.1% kernel\n                                                    0.1% 227/logd: 0.1% user + 0% kernel\n                                                    0.1% 480/rild: 0.1% user + 0% kernel / faults: 4 minor\n                                                    0.1% 3825/irq/33-cpubw_hw: 0% user + 0.1% kernel\n                                                    0.1% 7737/kworker/1:1H: 0% user + 0.1% kernel\n                                                    0.1% 7741/kworker/2:2H: 0% user + 0.1% kernel\n                                                    0.1% 7990/kworker/3:2: 0% user + 0.1% kernel\n                                                    0.1% 8104/com.google.android.gms.persistent: 0% user + 0.1% kernel / faults: 1 minor\n                                                    0.1% 12706/adbd: 0% user + 0.1% kernel\n                                                    0.1% 13077/kworker/u:6: 0% user + 0.1% kernel\n                                                    0.1% 15655/kworker/u:3: 0% user + 0.1% kernel\n                                                    0.1% 19392/MC_Thread: 0% user + 0.1% kernel\n                                                   +0% 16253/kworker/3:1: 0% user + 0% kernel\n                                                  55% TOTAL: 36% user + 15% kernel + 2.7% iowait + 0% softirq\n                                                  CPU usage from 5065ms to 5590ms later:\n                                                    112% 15843/com.farmappweb.pests.androidpests: 110% user + 1.8% kernel / faults: 683 minor\n                                                      97% 15843/ts.androidpests: 97% user + 0% kernel\n                                                      14% 15853/HeapTaskDaemon: 12% user + 1.8% kernel\n                                                    5.6% 1871/system_server: 0% user + 5.6% kernel / faults: 1 minor\n                                                      5.6% 1885/ActivityManager: 0% user + 5.6% kernel\n                                                      1.8% 2671/WifiStateMachin: 1.8% user + 0% kernel\n                                                    2.8% 3516/com.motorola.audiomonitor: 2.8% user + 0% kernel\n                                                      1.4% 3516/la.audiomonitor: 1.4% user + 0% kernel\n                                                    1.3% 357/surfaceflinger: 0% user + 1.3% kernel\n                                                      1.3% 522/DispSync: 0% user + 1.3% kernel\n                                                      1.3% 997/EventThread: 0% user + 1.3% kernel\n                                                    1.4% 3825/irq/33-cpubw_hw: 0% user + 1.4% kernel\n                                                  30% TOTAL: 29% user + 0.9% kernel\nThe phone is un Moto X (2G) Android 6.0\n. No, isn't my code. Good point, I installed your sample and works good. I tried in Lollipop and Pre-Lollipop and works too. I don't understand good the problem really. \n. In Lollipop and pre-lollipop works with my app. I would to say that.\n.  @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_show_image);\n```\n    mPath = getIntent().getStringExtra(\"image\");\n    mName = getIntent().getStringExtra(\"name\");\ninit();\n\nnew ShowImageTask().execute(mPath);\n\n}\nprivate void init() {\n    mToolbar = (Toolbar) findViewById(R.id.toolbar);\n    mToolbar.setBackgroundColor(Color.BLACK);\n    mToolbar.setTitle(mName + \".jpg\");\n    setSupportActionBar(mToolbar);\n    getSupportActionBar().setDisplayHomeAsUpEnabled(true);\nmProgress = findViewById(R.id.progress);\nmProgress.setBackgroundColor(Color.BLACK);\n\nmImageView = (SubsamplingScaleImageView) findViewById(R.id.expandImage);\n\n}\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.menu_show, menu);\n    return super.onCreateOptionsMenu(menu);\n}\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()) {\n        case android.R.id.home:\n            onBackPressed();\n            break;\n        case R.id.rotatePhoto:\n            mImageView.setOrientation((mImageView.getOrientation() + 90) % 360);\n            break;\n        case R.id.deletePhoto:\n            deletePicture(mPath);\n            PhotoEvent mDeleteEvent = new PhotoEvent(true);\n            mEventBus.post(mDeleteEvent);\n            onBackPressed();\n            break;\n    }\n    return super.onOptionsItemSelected(item);\n}\n@Override\npublic void onBackPressed() {\n    super.onBackPressed();\n}\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    mEventBus.unregister(this);\n}\nprivate class ShowImageTask extends AsyncTask {\n@Override\nprotected Bitmap doInBackground(String... params) {\n    return getPictureFromPath(params[0]);\n}\n\n@Override\nprotected void onPreExecute() {\n    super.onPreExecute();\n    mProgress.setVisibility(View.VISIBLE);\n}\n\n@Override\nprotected void onPostExecute(Bitmap b) {\n    super.onPostExecute(b);\n    mImageView.setImage(ImageSource.bitmap(b));\n    mProgress.setVisibility(View.GONE);\n}\n\n}\n```\n. Maybe true. What will be the best mode? My image is in memory and for search faster, search by path. \n. ",
    "ivanmestre": "I solved it by overriding the onImageLoaded method and doing this inside it:\n`setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_CUSTOM);\n        float maxDpi = getResources().getDisplayMetrics().densityDpi * getSHeight() / getHeight();\nsetMaximumDpi((int)maxDpi);\n    setMinimumDpi((int) maxDpi / 3);`\nThe image it is still not scaled correctly (it is still smaller than the container) but it is closed enough, the problem is the image is not centered in the view.\n. I managed to center it by calling resetScaleandCenter()\n. ",
    "hendrawd": "what is getSHeight() and getHeight()?. ",
    "mpkuth": "I got back to this today and was only able to reproduce twice in about an hour of trying. Unfortunately, never under the debugger. I swear it was more reproducible last time. Anyway, I might try again another day but unless I can reproduce it reliably again there's probably not much to be done.\n. ",
    "anupkale1984": "Resolved this issue\n. ",
    "alexiscanny": "I changed the code...and it works how I want to work....soon I will try to posted so someone can used.\nThanks \n. ",
    "timkoers": "@va I think that switching to Glide costs more time than fixing the slow dragging problem. Could you send an example URL of your image? I fetch mine from Unsplash.com\n. Still not working. It looks like the image view is not using the decoders at all. \nEDIT: I saw the comment in your code, maybe add that to your wiki?\nEDIT 2: It is still not working.\n. ",
    "Alxzu": "@vavan4567 can u show Glide's code? Thanks\n. ",
    "FranciscoNin": "Just found this issue that answers my question.\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/13\nThanks man, awesome lib.\n. ",
    "lukasz-gosiewski": "Fast way to make this for others: \nCalculate proportion of original x / y if x is ok, or y / xif y is ok.\nThen get real size by multplying good size by proportions (if u have good width then multiply it by proportions and u have good y)\nCalculate \"margin\" size by divide (ssimageiew - image) by 2. (x or y, it depends which one u got good)\nAt the end just move your view by this \"margin\" size.\n. Yep, i did this already. Anyway it's worth thinking about, maybye more people want to disable fling gesture ? ViewPager is popular way of displaying images.\n. Subclass wont allow us to disable this anyway, u need to create fork :) However topic closed ;)\n. ",
    "SaravanarajaGITHUB": "After added this piece of code i can view the image with out any problem\nBitmapFactory.Options bitmapOptions = new BitmapFactory.Options();\n            bitmapOptions.inDither = true;\n            bitmapOptions.inPreferredConfig = Bitmap.Config.RGB_565;\n            bitmapOptions.inScaled = false;\n            Bitmap bitmapImage = BitmapFactory.decodeResource(getResources(), imageId , bitmapOptions);\nimageView.setImage(ImageSource.bitmap(bitmapImage));\nI would like to know what happening in this code and this code is the perfect solution for my problem?\n. ",
    "ending0421": "i met same issue using this libs while decode a local file image . How can i resolve this issue in my case ? it is not a image build in apk so i can not put these in drawable-nodpi folder.\n. @davemorrissey  mBitmap = BitmapUtil.decodeBitmap( mDocumentLocalPath );\n    if ( mBitmap != null ) {\n      mImageViewData.setImage( ImageSource.bitmap( mBitmap ) );\n    }\nmImageViewData is SubsamplingScaleImageView inflated from xml with scaleType = \"fitCenter\" and layout_gravity = \"center\" , no other special params. \nHere is BitmapUtile.decodeBitmap(String path )\n` public static Bitmap decodeBitmap(String path) {\n    Options options = new Options();\n    options.inSampleSize = 1;\n    return decodeBitmap(path, options);\n  }\npublic static Bitmap decodeBitmap(String path, Options options) {\n    Bitmap bitmap = null;\n```\ntry {\n  bitmap = BitmapFactory.decodeFile(path, options);\n} catch (OutOfMemoryError var4) {\n  options.inSampleSize *= 2;\n  bitmap = decodeBitmap(path, options);\n}\nreturn bitmap;\n```\n}`\n. ",
    "themesbunch": "Ohh man. Thanks. It worked. I didn't know this. Really appreciated. \n. ",
    "shroffrushabh": "so I already tried that method, but it did not do the trick. I have a panorama of size 2500 x 600, while my screen size is like 1200 x 700 (something on those lines, horizontal oriented screen). Since the pano image is much bigger than the screen, I use the \nivImage.setScaleAndCenter(1.25f, new PointF(centreX, centreY));\nto display only a part of the pano image. But now when I use the pinch zoom feature to zoom out from \"1.25\", I want to set that min scale to \"1\", but I can see that scale value goes to as small as \"0.5\" in which case the image view which has the panorama image resizes itself to fit the whole 2500 x 600 image in 1200 x 700. I want to set a hard limit on the scale to not go below \"1\" and the minScale function did not work :(\n. ",
    "macaronlover": "I found a solution\nassert imageView != null\n. ",
    "edovino": "That was exactly it - the smaller images got divided into just two (huge) tiles. Larger images did get multiple tiles, until you set SCALE_TYPE_CENTER_CROP: then they got divided into two tiles as well. (That might be a bug? The overall size of the image hasn't changed - just the pan-limits)\nAnyway, I've added a mth to set a max tile size (if set, that overrides the values returned from getMaxBitmapDimensions), and that works out just fine. I can send a pull request if you like.\n. yes, you're right of course - I guess that method just does more than I expected: I suppose I was looking for setMinScale() to get rid of the initial letterbox-view of the panoramas.\n. ",
    "jklwan": "<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      app:src=\"@drawable/img\"/>\nthis can work\u3002\n. ",
    "aleksandr1592": "I have to load high-resolution (up to 2000x3000) gif with automobile parts schemes.It cause out of memory error in some devices.My best idea so far is downsampling.However, I want to find a way to load them without loosing image quality.Is it even possible?\n. Thank you for your answer and for your suggession.I will try to convince server-side developers to do it.\n. ",
    "commonsguy": "@MFratane As I noted in Stack Overflow, you appear to be not calling setOnImageEventListener() to register the listener.\nThat being said, the documentation for events should mention the setters.\n. ",
    "YuriHeupa": "Disabling the onTouchListener if pan is disabled solves my issue.\n. ",
    "knroy": "I figured it out. I have to use ViewPager to create a image slider. Thanks.\n. ",
    "locomain": "i already did but sadly i could not find a solution in one of them.\nthe error accures on more then one image and its actually happening frequently.\nthe BitmapRegionDecor also throws a error here and there but this is actually not really noticable.\nalso i know this doesnt belong in this issue but before posting a new one i would like to ask if there is a reason for a different imagesizes between the subsamplingimageview and the android imageview?\nthank you for your time\n. \n. o oke thank you\n. ",
    "stefanplindner": "I thought there might be some others with the same problem (since it was already asked) and i wanted to show them a solution for it. \n. ",
    "coletz": "I'm using the 3.5.0, including it with gradle\ncompile 'com.davemorrissey.labs:subsampling-scale-image-view:3.5.0'\nI've downloaded the lib to try to fix this problem and I've seen that the real problem is at 1576\nby the way, I've seen that this problem won't persist using a different image. In fact I was using a ~2.3mb image, and then I've compressed it with tinypng website. Using the compressed image I have no crash loading it. If you want to investigate over this, I'll leave here the original and the compressed image\n\n\n. I haven't more code at the moment, my activity is 1:1 the code I've posted\n. I have no idea on how to reproduce it. Moreover I'm having this issue only with my Xiaomi Redmi Note 3. Moto G and Nexus 5 doesn't behave like this. I've changed the image and problem doesn't appear. It was a modded phone with chinese rom, so imho you can close it. Thanks for your time\n. ",
    "mguilhermetavares": "If you load Bitmap from Picasso you can see this error.. ",
    "pamartineza": "I have users reporting this problem on Xiaomi Note 4 too, I think this issue is somehow related with this specific vendor. ",
    "kazajiru": "I get this issue in 2 situations:\n- if I predefine image in android:src and then setting image bitmap in onCreate\n- if I use setImage from drawable and after a while setImage from bitmap. \nIn my case: setting placeholder image and then getting image from Glide cache.\nSo I guess it a sort of concurrent exception. ",
    "kakai248": "I'm also having lag in a viewpager and don't know the real reason. I'm using a very basic example, saving the images to the disk using Glide and then setting the ImageURI using the File that Glide gives me. So I'm actually using a file instead of bitmaps.\nIt only happens when I'm scrolling to the next page, scrolling to the previous page is very fluid. I'm also suffering from the visibility problem described in #127.\nI'm testing with the images in this album: https://imgur.com/a/msKtB\nThey are big but not big enough to pass my device texture size (Nexus 5, 4096x4096). When I swipe to the next fragment of the viewpager, I see a lag spike in CPU usage, in the kernel. The image is not drawn at first, but even after being drawn the CPU spike continues. Disabling tiling fixes the visibility problem but not the lag.\nLoading as a bitmap (instead of uri) solves the problem. However I lose the tiling.\n. After messing around I managed to improve my situation. Here's what I did to fix/diminish the lag:\nI used this fork because it adds a setMaxBitmapDimensions method. In this method I used 1024 dpi as the maximum tile size.\nThen I had to add previews. Before, I was using Glide to load/cache images. However in Glide you can't get the cached image file and a bitmap at the same time. This was fundamental. I had to change to UIL.\nNow I tell UIL to load the image and to also generate a bitmap with the dimensions I provide. I get the cached file, use it as the base image and use the scaled bitmap as the preview image.\nIt's much more fluid now. Here's the code:\n```\nscaleImageView.setMaxBitmapDimensions(1024);\nImageSize imageSize = new ImageSize(scaleImageView.getWidth(), scaleImageView.getHeight());\nimageLoader.loadImage(url, imageSize, null, new SimpleImageLoadingListener() {\n    @Override\n    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n        File file = imageLoader.getDiskCache().get(url);\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeFile(file.getAbsolutePath(), options);\n    int height = options.outHeight;\n    int width = options.outWidth;\n\n    scaleImageView.setImage(ImageSource.uri(file.getAbsolutePath()).dimensions(width, height), ImageSource.bitmap(loadedImage));\n}\n\n}, progressListener);\n```\n. To use previews you have to pass a scaled image. If you pass the original image, it will lag. The only way I found was to download the original and also generate a scaled down bitmap.\nUsing preview makes the image show instantly, which makes the experience fast to the user. Not using it I could notice a small delay while the lib was loading the full image.\n. Your best approach would be to use Glide to downloadOnly. Because it gives you a File that you can use directly in this view. I eventually switched to UIL because I can access cache files and it still gives me bitmaps so I can use them in the preview part.\n. ",
    "zmnpl": "Well it is the opposite for me. Scrolling away from the picture is causing lag, while scrolling on it, loading, zooming and so on are fine without any issues.\n. Francis, is that specific for certain devices / images for you as well? If so, which devices and do you maybe have images that cause the issue?\n. Your input is appreciated. Though I don't believe (yet?) we have the same problem. As clearly stated in the OP I'm experiencing issues only on one specific device with some images. Same Images, same code, even weaker device -> No issue.\nTo make sure I tried minimum DPI as well, which has no effect for me.\nEdit:\nI'm taking part of what I said back =)\nminimumTileDpi does have an effect! I Still wonder, why I'm facing it only on the one device/image combination. Anyways, that seems to work around the issue for now. Thanks @franciscofranco for pointing in the direction.\n. Thanks @davemorrissey for that helpful information! That makes the issue perfectly clear and the solution very accepted.\n. ",
    "qinchong1988": "setMinimumTileDpi(50) is useful,but reduce image quality,my test devices log.\ninitialiseBaseLayer maxTileDimensions=16384x16384\ngetWidth()=720,sWidth()=1080,getHeight()=1280,sHeight()=10800\nwidth scale=0.666667,height scale=0.118519\ninitialiseTileMap maxTileDimensions=16384x16384\nTileLoadTask.doInBackground, tile.sRect=Rect(0, 0 - 1080, 10800), tile.sampleSize=2\nmaxTileDimensions is too large.. , i fix it use:\nsetMaxTileSize(4069, 4069);. ",
    "eltos": "I am just wondering, weather this is the behaviour that a user would expect (Well, I didn't). But that's your decision.\nAs getState() is a final method, one cannot overwrite it.\nInstead, if someone else stumbles across this, replace the calles to getState() with the following to change the behaviour:\njava\n//ImageViewState state = mImageView.getState();\nImageViewState state = mImageView.getState() == null ? null : new ImageViewState(\n        mImageView.getScale() > mImageView.getMinScale() ? mImageView.getScale() : 0,\n        mImageView.getCenter(), mImageView.getOrientation());\n}\n. ",
    "martin90s": "@davemorrissey thanks! I'll try to remove it.\n. ",
    "QuentinLew": "This will remain image's original height when it is smaller than screen's.\nBut when image's height is larger than screen's, \"setMinScale(1f)\" will  forbid the behavior like SCALE_TYPE_CENTER_CROP.\n. I changed the source code:\n```\npublic static final int SCALE_TYPE_CENTER_INSIDE = 1;\npublic static final int SCALE_TYPE_CENTER_CROP = 2;\npublic static final int SCALE_TYPE_CUSTOM = 3;\npublic static final int SCALE_TYPE_CENTER_CROP_CUSTOM= 4;\nprivate static final List VALID_SCALE_TYPES = Arrays.asList(SCALE_TYPE_CENTER_CROP,\n SCALE_TYPE_CENTER_INSIDE, SCALE_TYPE_CUSTOM, SCALE_TYPE_CENTER_CROP_CUSTOM);\n...\nprivate float minScale() {\n    int vPadding = getPaddingBottom() + getPaddingTop();\n    int hPadding = getPaddingLeft() + getPaddingRight();\n    if (minimumScaleType == SCALE_TYPE_CENTER_CROP) {\n        return Math.max((getWidth() - hPadding) / (float) sWidth(), (getHeight() - vPadding) / (float) sHeight());\n    } else if (minimumScaleType == SCALE_TYPE_CUSTOM && minScale > 0) {\n        return minScale;\n    } else if (minimumScaleType == SCALE_TYPE_CENTER_CROP_CUSTOM){\n        return Math.min( Math.max((getWidth() - hPadding) / (float) sWidth(), (getHeight() - vPadding) / (float) sHeight()), 1f);\n    } else {\n        return Math.min((getWidth() - hPadding) / (float) sWidth(), (getHeight() - vPadding) / (float) sHeight());\n    }\n}\n```\nMany thanks for your help!\n. Fine, I am looking forward to it :-)\n. ",
    "DevAxis": "Thank you very much for your response. Can you please help out by a code snippet? As I am really not able to implement required functionality after extending Sub\nsampling Scale Image View.\n. ",
    "JonasPrap": "Another related issue is when I try using this:\nimageViewTouch.setImage(ImageSource.uri(file.toURI().toString()));\nUri is not parsed correctly and I get this exception:\njava.io.FileNotFoundException: /file:/storage/emulated/0/Android/data/com.intermedix.eics/files/private-pictures/JPEG_20160720_114307_-1897635745.jpg\nNote that 'file' is from java.io.\n. Solved this by: \n        imageViewTouch.setImage(ImageSource.uri(file.getAbsolutePath()));\n. @ShreyashPromact \nI'm not sure I completely understand the question, it seems unrelated to this issue. I think you need to download the file and save it to file system, then use this library to open that file. To accomplish that I used Retrofit2 (https://futurestud.io/blog/retrofit-2-how-to-download-files-from-server), but there are other solutions to download files and save them to disk.\n. @ShreyashPromact \nFirst, this is not my library :) Just reported an issue in it when I started using it.\nThis library requires you to store image in a file for it to work with Tiles.\nIf the images are not too huge and you are not running into memory problems I suggest trying Picasso library for image loading and this library or ImageViewZoom library for an imageView with zoom/pan capability.\n. ",
    "ShreyashPromact": "@JonasPrap \nAny idea if I want to load image from url and then apply scale effect as like this library?\nSincerely,\nShreyash\n. @JonasPrap \nThanks for quick reply. Here in my project, I have so many images on server. I am displaying that image in the app. Now, I want to add your library as I have zoom in image functionality in the app.\nBut as the image coming from server, I can't use your library. Even its normal thing that No user will store such big size of image in device for there app. So, is there any support available for such condition where I can direct display image from the server (URL of the image)?\nThanks.\nSincerely,\nShreyash\n. @JonasPrap \nYou are right. I was doing same thing. I have used glide to load image. But i want to apply zoom on same loaded imageview. While here it is view. So glide is not working as I want. Same thing will be happen with Picasso. So, I have requested to have support for that.\nThanks for your reply and support. Let me know if you have any trick to load image from url and apply such zoom effect on same.\nThanks.\nSincerely,\nShreyash\n. @davemorrissey \nI know how to use loader with loading image. But my concern is only with loading high resolution image from url and also apply such effect on that.\nThanks anyway,\nSincerely,\nShreyash\n. ",
    "kumpz": "The problem is the internal size-limit of Bitmaps.\nAnother problem would be the huge ram-consumption.\n. I hoped to be able to avoid that.\nThanks tho\n. I know it's been quite some time.\nI finally got to set up a github-repo with a version supporting byte-arrays.\nIf you are interested:\nhttps://github.com/kumpz/subsampling-scale-image-view. If you are ok with it, I'd make a pull-request. ",
    "cxc2014": "error log \n07-26 19:23:29.713 20411-20411/com.davemorrissey.labs.subscaleview.sample I/art: Late-enabling -Xcheck:jni\n07-26 19:23:29.810 20411-20424/com.davemorrissey.labs.subscaleview.sample D/OpenGLRenderer: Use EGL_SWAP_BEHAVIOR_PRESERVED: true\n07-26 19:23:29.844 20411-20424/com.davemorrissey.labs.subscaleview.sample I/Adreno: QUALCOMM build                   : 52af4d2, I8366cd0437\n                                                                                    Build Date                       : 10/20/15\n                                                                                    OpenGL ES Shader Compiler Version: XE031.05.13.02\n                                                                                    Local Branch                     : M14\n                                                                                    Remote Branch                    : \n                                                                                    Remote Branch                    : \n                                                                                    Reconstruct Branch               : \n07-26 19:23:29.849 20411-20424/com.davemorrissey.labs.subscaleview.sample I/OpenGLRenderer: Initialized EGL, version 1.4\n07-26 19:23:32.535 20411-20495/com.davemorrissey.labs.subscaleview.sample D/skia: --- decoder->buildTileIndex returned false\n07-26 19:23:32.537 20411-20495/com.davemorrissey.labs.subscaleview.sample E/SubsamplingScaleImageView: Failed to initialise bitmap decoder\n                                                                                                       java.io.IOException: Image failed to decode using JPEG decoder\n                                                                                                           at android.graphics.BitmapRegionDecoder.nativeNewInstance(Native Method)\n                                                                                                           at android.graphics.BitmapRegionDecoder.newInstance(BitmapRegionDecoder.java:116)\n                                                                                                           at com.davemorrissey.labs.subscaleview.decoder.SkiaImageRegionDecoder.init(SkiaImageRegionDecoder.java:60)\n                                                                                                           at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1431)\n                                                                                                           at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1407)\n                                                                                                           at android.os.AsyncTask$2.call(AsyncTask.java:295)\n                                                                                                           at java.util.concurrent.FutureTask.run(FutureTask.java:237)\n                                                                                                           at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:234)\n                                                                                                           at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\n                                                                                                           at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\n                                                                                                           at java.lang.Thread.run(Thread.java:818)\n07-26 19:23:34.547 20411-20526/com.davemorrissey.labs.subscaleview.sample D/skia: --- decoder->buildTileIndex returned false\n07-26 19:23:34.547 20411-20526/com.davemorrissey.labs.subscaleview.sample E/SubsamplingScaleImageView: Failed to initialise bitmap decoder\n                                                                                                       java.io.IOException: Image failed to decode using JPEG decoder\n                                                                                                           at android.graphics.BitmapRegionDecoder.nativeNewInstance(Native Method)\n                                                                                                           at android.graphics.BitmapRegionDecoder.newInstance(BitmapRegionDecoder.java:116)\n                                                                                                           at com.davemorrissey.labs.subscaleview.decoder.SkiaImageRegionDecoder.init(SkiaImageRegionDecoder.java:60)\n                                                                                                           at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1431)\n                                                                                                           at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1407)\n                                                                                                           at android.os.AsyncTask$2.call(AsyncTask.java:295)\n                                                                                                           at java.util.concurrent.FutureTask.run(FutureTask.java:237)\n                                                                                                           at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:234)\n                                                                                                           at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\n                                                                                                           at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\n                                                                                                           at java.lang.Thread.run(Thread.java:818)\n. Just replace squirrel.jpg in the sample.\n. \n. error log \n07-26 19:23:29.713 20411-20411/com.davemorrissey.labs.subscaleview.sample I/art: Late-enabling -Xcheck:jni\n07-26 19:23:29.810 20411-20424/com.davemorrissey.labs.subscaleview.sample D/OpenGLRenderer: Use EGL_SWAP_BEHAVIOR_PRESERVED: true\n07-26 19:23:29.844 20411-20424/com.davemorrissey.labs.subscaleview.sample I/Adreno: QUALCOMM build : 52af4d2, I8366cd0437\nBuild Date : 10/20/15\nOpenGL ES Shader Compiler Version: XE031.05.13.02\nLocal Branch : M14\nRemote Branch : \nRemote Branch : \nReconstruct Branch : \n07-26 19:23:29.849 20411-20424/com.davemorrissey.labs.subscaleview.sample I/OpenGLRenderer: Initialized EGL, version 1.4\n07-26 19:23:32.535 20411-20495/com.davemorrissey.labs.subscaleview.sample D/skia: --- decoder->buildTileIndex returned false\n07-26 19:23:32.537 20411-20495/com.davemorrissey.labs.subscaleview.sample E/SubsamplingScaleImageView: Failed to initialise bitmap decoder\njava.io.IOException: Image failed to decode using JPEG decoder\nat android.graphics.BitmapRegionDecoder.nativeNewInstance(Native Method)\nat android.graphics.BitmapRegionDecoder.newInstance(BitmapRegionDecoder.java:116)\nat com.davemorrissey.labs.subscaleview.decoder.SkiaImageRegionDecoder.init(SkiaImageRegionDecoder.java:60)\nat com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1431)\nat com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1407)\nat android.os.AsyncTask$2.call(AsyncTask.java:295)\nat java.util.concurrent.FutureTask.run(FutureTask.java:237)\nat android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:234)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\nat java.lang.Thread.run(Thread.java:818)\n07-26 19:23:34.547 20411-20526/com.davemorrissey.labs.subscaleview.sample D/skia: --- decoder->buildTileIndex returned false\n07-26 19:23:34.547 20411-20526/com.davemorrissey.labs.subscaleview.sample E/SubsamplingScaleImageView: Failed to initialise bitmap decoder\njava.io.IOException: Image failed to decode using JPEG decoder\nat android.graphics.BitmapRegionDecoder.nativeNewInstance(Native Method)\nat android.graphics.BitmapRegionDecoder.newInstance(BitmapRegionDecoder.java:116)\nat com.davemorrissey.labs.subscaleview.decoder.SkiaImageRegionDecoder.init(SkiaImageRegionDecoder.java:60)\nat com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1431)\nat com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1407)\nat android.os.AsyncTask$2.call(AsyncTask.java:295)\nat java.util.concurrent.FutureTask.run(FutureTask.java:237)\nat android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:234)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\nat java.lang.Thread.run(Thread.java:818)\n. Just replace squirrel.jpg in the sample project.\n. ",
    "g19980115": "\u52a0\u4e0a\u8fd9\u4e2a\u53ef\u4ee5\u89e3\u51b3\u4f60\u7684\u95ee\u9898(Add this)\uff1a\nJava\nimageView.setOrientation(SubsamplingScaleImageView.ORIENTATION_USE_EXIF);\n\u50cf\u8fd9\u6837(Like this)\uff1a\nJava\nSubsamplingScaleImageView imageView = (SubsamplingScaleImageView)findViewById(id.imageView);\nimageView.setOrientation(SubsamplingScaleImageView.ORIENTATION_USE_EXIF);\nimageView.setImage(ImageSource.asset(\"map.png\"));. ",
    "DennyWeinberg": "@g19980115 does not work for me. Note: png does NOT have any exif information. So your example code can't work.. ",
    "prashanthd": "Yes it is working perfect. Thanx @davemorrissey for such a beautiful lib.  One thing I am missing is, I want image to be full screen irrespective of aspect ratio is it possible?\n. ",
    "fifa1016": "you can use this:\n  Bitmap bitmap = Glide.with(GalleryActivity.this).load(picUrl )\n                                .asBitmap().into(-1, -1).get();\n. ",
    "gnumilanix": "Here's one approach. For some reason formatting did not work:\nGlide.with(view.getContext()).load(url).asBitmap().into(new SimpleTarget<Bitmap>() {\n    @Override\n    public void onResourceReady(Bitmap resource, GlideAnimation<? super Bitmap> glideAnimation) {\n        view.setImage(ImageSource.bitmap(resource));\n    }\n});\n. ",
    "Reallym404": "@gnumilanix \u4f7f\u7528\u4f60\u8bf4\u7684\u65b9\u6cd5 glide\u663e\u793a\u5927\u56fe\uff0c\u663e\u793a\u591a\u5f20\u540e\uff0c\u8fd8\u4f1a\u51fa\u73b0\u540e\u9762\u7684\u56fe\u663e\u793a\u4e0d\u51fa\u6765\u7684\u60c5\u51b5\uff0c\u6539\u5982\u4f55\u89e3\u51b3\n. @davemorrissey     Click to get URL from WebView Pass to another Activity  to display.\uff08To display a lot of large picture such as  1080 x 6646\uff09\nGlide.with(this).load(url)\n                .asBitmap()\n                .diskCacheStrategy(DiskCacheStrategy.RESULT)\n                .into(new SimpleTarget() {\n            @Override\n            public void onResourceReady(Bitmap resource, GlideAnimation<? super Bitmap> glideAnimation) {\n                previewImg.setImage(ImageSource.bitmap(resource));\n            }\n        });\n. ",
    "peerJasim": "  // For SubsamplingScaleImageView use SimpleTarget\n\n  Glide.with(context)\n                .asBitmap()\n                .load(images[position])\n                .apply(RequestOptions.diskCacheStrategyOf(DiskCacheStrategy.AUTOMATIC))\n                .into(new SimpleTarget<Bitmap>(width, height) {\n                    @Override\n                    public void onResourceReady(Bitmap bitmap, Transition<? super Bitmap> transition) {\n                        subsampleImageView.setImage(ImageSource.bitmap(bitmap)); //For SubsampleImage\n                    }\n                });.\n",
    "Michels10": "I'll do that, thanks for your feedback!  Hopefully it'll help to reduce the number of questions going forward about the integration with Picasso.\n. ",
    "mirza04": "Hey, how can we just use the extension pin fragment(the image with the fixed pins)  on its own. ",
    "marcouberti": "In order to load Bitmaps directly you can use this method:\nimageView.setImage(ImageSource.bitmap(yourBitmap));\nbut pay attention that if the bitmap is \"very big\" you might run into out of memory issues.\n. Thanks @davemorrissey, setMinimumTileDpi(160) solved my issue. =)\n. ",
    "tianzhijiexian": "subsampling-scale-image-view support for large picture @hackjedi\n. ",
    "MarcoPeng": "i found this works\nscore_iv.setImage(ImageSource.uri(picpath), new ImageViewState(0, new PointF(0, 0), 0));\n. ",
    "schrek1": "Ok I found rotate method, but when i rotate some parts of images are crooped. Zoom out or drag not help, still invisible...\n. ",
    "xietansheng-unnoo": "Use exif, it will auto rotate\uff1a\nSubsamplingScaleImageView.setOrientation(SubsamplingScaleImageView.ORIENTATION_USE_EXIF)\n. ",
    "fkirc": "I am using 'com.davemorrissey.labs:subsampling-scale-image-view:3.5.0'\n. Thanks I think this should fix the issue\n. ",
    "AvatarQing": "@Zeliret Hi, did you solved the problem? Can you share your code. ",
    "VolliUJ": "Oh so sorry! I've made mistake, I thought about chrisbanes/PhotoView framework.\nIssue for delete.\nRegards\nVolli\n. ",
    "atomd-zz": "Sorry to reply so late\uff0cI try to load image from content://media/external/images/media/9250\uff0cand then encountered this error.\n. ",
    "zhujainxipan": "Thanks @davemorrissey,I have solved this question,you can close this question.because the callback method is asynchronous.\n. the Configuration as follows:\nMIUI 8  android6.0\nCPU  Helio X20 2.1GHz \nGPU Mali-T880 MP4\nRAM 2GB\nROM 16GB\n. the error message as follows:\n01-09 14:57:08.759 13734-13734/com.davemorrissey.labs.subscaleview.sample D/SettingsInterface:  from settings cache , name = sound_effects_enabled , value = 0\n01-09 14:57:08.759 13734-13734/com.davemorrissey.labs.subscaleview.sample I/Timeline: Timeline: Activity_launch_request time:2709166\n01-09 14:57:08.782 13734-13734/com.davemorrissey.labs.subscaleview.sample D/ActivityThread: ACT-AM_ON_PAUSE_CALLED ActivityRecord{48e2fa1 token=android.os.BinderProxy@a9385c6 {com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.MainActivity}}\n01-09 14:57:08.789 13734-13734/com.davemorrissey.labs.subscaleview.sample V/ActivityThread: Handling launch of ActivityRecord{c98bcbc token=android.os.BinderProxy@bf1d445 {com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity}} startsNotResumed=false\n01-09 14:57:08.789 13734-13734/com.davemorrissey.labs.subscaleview.sample V/ActivityThread: ActivityRecord{c98bcbc token=android.os.BinderProxy@bf1d445 {com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity}}: app=android.app.Application@c2310b4, appName=com.davemorrissey.labs.subscaleview.sample, pkg=com.davemorrissey.labs.subscaleview.sample, comp={com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity}, dir=/data/app/com.davemorrissey.labs.subscaleview.sample-1/base.apk\n01-09 14:57:08.803 13734-13734/com.davemorrissey.labs.subscaleview.sample V/ActivityThread: Performing resume of ActivityRecord{c98bcbc token=android.os.BinderProxy@bf1d445 {com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity}}\n01-09 14:57:08.805 13734-13734/com.davemorrissey.labs.subscaleview.sample D/ActivityThread: ACT-AM_ON_RESUME_CALLED ActivityRecord{c98bcbc token=android.os.BinderProxy@bf1d445 {com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity}}\n01-09 14:57:08.805 13734-13734/com.davemorrissey.labs.subscaleview.sample V/ActivityThread: Resume ActivityRecord{c98bcbc token=android.os.BinderProxy@bf1d445 {com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity}} started activity: false, hideForNow: false, finished: false\n01-09 14:57:08.805 13734-13734/com.davemorrissey.labs.subscaleview.sample V/PhoneWindow: DecorView setVisiblity: visibility = 4 ,Parent =null, this =com.android.internal.policy.PhoneWindow$DecorView{702979a I.E...... R.....ID 0,0-0,0}\n01-09 14:57:08.805 13734-13734/com.davemorrissey.labs.subscaleview.sample D/WindowClient: Add to mViews: com.android.internal.policy.PhoneWindow$DecorView{702979a I.E...... R.....ID 0,0-0,0}, this = android.view.WindowManagerGlobal@bc48547\n01-09 14:57:08.808 13734-13769/com.davemorrissey.labs.subscaleview.sample D/OpenGLRenderer: CanvasContext() 0xd9e5b800\n01-09 14:57:08.810 13734-13734/com.davemorrissey.labs.subscaleview.sample D/ViewRootImpl: hardware acceleration is enabled, this = ViewRoot{902d925 com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity,ident = 23}\n01-09 14:57:08.810 13734-14498/com.davemorrissey.labs.subscaleview.sample W/skia: onBuildTileIndex parsed ISOSpeedRatings 200 L:2317!! \n01-09 14:57:08.815 13734-13734/com.davemorrissey.labs.subscaleview.sample V/ActivityThread: Resuming ActivityRecord{c98bcbc token=android.os.BinderProxy@bf1d445 {com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity}} with isForward=true\n01-09 14:57:08.815 13734-13734/com.davemorrissey.labs.subscaleview.sample V/PhoneWindow: DecorView setVisiblity: visibility = 0 ,Parent =ViewRoot{902d925 com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity,ident = 23}, this =com.android.internal.policy.PhoneWindow$DecorView{702979a V.E...... R.....ID 0,0-0,0}\n01-09 14:57:08.815 13734-13734/com.davemorrissey.labs.subscaleview.sample V/ActivityThread: Scheduling idle handler for ActivityRecord{c98bcbc token=android.os.BinderProxy@bf1d445 {com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity}}\n01-09 14:57:08.815 13734-13734/com.davemorrissey.labs.subscaleview.sample D/ActivityThreadInjector: clearCachedDrawables.\n01-09 14:57:08.844 13734-13734/com.davemorrissey.labs.subscaleview.sample D/Surface: Surface::allocateBuffers(this=0xee8bd600)\n01-09 14:57:08.844 13734-13769/com.davemorrissey.labs.subscaleview.sample D/OpenGLRenderer: CanvasContext() 0xd9e5b800 initialize window=0xee8bd608, title=com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity\n01-09 14:57:08.844 13734-13769/com.davemorrissey.labs.subscaleview.sample D/Surface: Surface::connect(this=0xee8bd600,api=1)\n01-09 14:57:08.849 13734-13769/com.davemorrissey.labs.subscaleview.sample W/libEGL: [ANDROID_RECORDABLE] format: 1\n01-09 14:57:08.850 13734-13769/com.davemorrissey.labs.subscaleview.sample D/mali_winsys: new_window_surface returns 0x3000\n01-09 14:57:08.856 13734-13734/com.davemorrissey.labs.subscaleview.sample V/InputMethodManager: onWindowFocus: null softInputMode=288 first=true flags=#1810100\n01-09 14:57:08.856 13734-13734/com.davemorrissey.labs.subscaleview.sample V/InputMethodManager: START INPUT: com.android.internal.policy.PhoneWindow$DecorView{702979a V.E...... R.....ID 0,0-1080,1920} ic=null tba=android.view.inputmethod.EditorInfo@87be487 controlFlags=#104\n01-09 14:57:08.865 13734-13769/com.davemorrissey.labs.subscaleview.sample I/[MALI][Gralloc]: [+]r_hnd(0xf35a0c80), client(41), share_fd(44)\n01-09 14:57:08.865 13734-13769/com.davemorrissey.labs.subscaleview.sample D/GraphicBuffer: register, handle(0xf35a0c80) (w:1080 h:1920 s:1088 f:0x1 u:0x000b00)\n01-09 14:57:08.873 13734-13769/com.davemorrissey.labs.subscaleview.sample I/[MALI][Gralloc]: [+]r_hnd(0xf35a0dc0), client(41), share_fd(47)\n01-09 14:57:08.873 13734-13769/com.davemorrissey.labs.subscaleview.sample D/GraphicBuffer: register, handle(0xf35a0dc0) (w:1080 h:1920 s:1088 f:0x1 u:0x000b00)\n01-09 14:57:08.889 13734-13769/com.davemorrissey.labs.subscaleview.sample D/Surface: Surface::disconnect(this=0xee8bdd00,api=1)\n01-09 14:57:08.891 13734-13769/com.davemorrissey.labs.subscaleview.sample D/GraphicBuffer: unregister, handle(0xf35a1040) (w:1080 h:1920 s:1088 f:0x1 u:0x000b00)\n01-09 14:57:08.891 13734-13769/com.davemorrissey.labs.subscaleview.sample I/[MALI][Gralloc]: [-]r_hnd(0xf35a1040), client(41), share_fd(54)\n01-09 14:57:08.892 13734-13769/com.davemorrissey.labs.subscaleview.sample D/GraphicBuffer: unregister, handle(0xf35a0e60) (w:1080 h:1920 s:1088 f:0x1 u:0x000b00)\n01-09 14:57:08.892 13734-13769/com.davemorrissey.labs.subscaleview.sample I/[MALI][Gralloc]: [-]r_hnd(0xf35a0e60), client(41), share_fd(56)\n01-09 14:57:08.893 13734-13769/com.davemorrissey.labs.subscaleview.sample D/GraphicBuffer: unregister, handle(0xf35a10e0) (w:1080 h:1920 s:1088 f:0x1 u:0x000b00)\n01-09 14:57:08.893 13734-13769/com.davemorrissey.labs.subscaleview.sample I/[MALI][Gralloc]: [-]r_hnd(0xf35a10e0), client(41), share_fd(58)\n01-09 14:57:08.893 13734-13769/com.davemorrissey.labs.subscaleview.sample E/Surface: getSlotFromBufferLocked: unknown buffer: 0xf35a19a0\n01-09 14:57:08.893 13734-13769/com.davemorrissey.labs.subscaleview.sample D/mali_winsys: [MALI] win=0xee8bdd08, native_buffer=0xf35a14a8, fd=-1\n01-09 14:57:08.893 13734-13769/com.davemorrissey.labs.subscaleview.sample D/GraphicBuffer: unregister, handle(0xf35a19a0) (w:1080 h:1920 s:1088 f:0x1 u:0x000b00)\n01-09 14:57:08.894 13734-13769/com.davemorrissey.labs.subscaleview.sample I/[MALI][Gralloc]: [-]r_hnd(0xf35a19a0), client(41), share_fd(42)\n01-09 14:57:08.894 13734-13769/com.davemorrissey.labs.subscaleview.sample D/Surface: Surface::disconnect(this=0xee8bdd00,api=1)\n01-09 14:57:09.162 13734-13911/com.davemorrissey.labs.subscaleview.sample D/skia: nativeDecodeRegion: options dc78f3c0, tileBitmap 0!!\n01-09 14:57:09.163 13734-13734/com.davemorrissey.labs.subscaleview.sample V/ActivityThread: Finishing stop of ActivityRecord{48e2fa1 token=android.os.BinderProxy@a9385c6 {com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.MainActivity}}: show=false win=com.android.internal.policy.MiuiPhoneWindow@a55fe85\n01-09 14:57:09.164 13734-13734/com.davemorrissey.labs.subscaleview.sample V/PhoneWindow: DecorView setVisiblity: visibility = 4 ,Parent =ViewRoot{f329174 com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.MainActivity,ident = 0}, this =com.android.internal.policy.PhoneWindow$DecorView{93d24dd I.E...... R......D 0,0-1080,1920}\n01-09 14:57:09.164 13734-13911/com.davemorrissey.labs.subscaleview.sample D/BitmapRegionDecoder: nativeDecodeRegion dcflag 0, dc 0x0\n01-09 14:57:09.165 13734-13911/com.davemorrissey.labs.subscaleview.sample D/skia: JPEG: debug_onDecodeSubset ++ , dur = 0.000000,  id = 13911,L:2669!!\n01-09 14:57:09.171 13734-13769/com.davemorrissey.labs.subscaleview.sample I/[MALI][Gralloc]: [+]r_hnd(0xf35a19a0), client(41), share_fd(42)\n01-09 14:57:09.171 13734-13769/com.davemorrissey.labs.subscaleview.sample D/GraphicBuffer: register, handle(0xf35a19a0) (w:1080 h:1920 s:1088 f:0x1 u:0x000b00)\n01-09 14:57:09.376 13734-13911/com.davemorrissey.labs.subscaleview.sample D/skia: JPEG: debug_onDecodeSubset 2 -- , dur = 200.808075, dur = 0.000000, all dur = 200.808075 , L:3231!!\n01-09 14:57:09.378 13734-13911/com.davemorrissey.labs.subscaleview.sample D/skia: nativeDecodeRegion: options dc78f3c0, tileBitmap 0!!\n01-09 14:57:09.378 13734-13911/com.davemorrissey.labs.subscaleview.sample D/BitmapRegionDecoder: nativeDecodeRegion dcflag 0, dc 0x0\n01-09 14:57:09.378 13734-13911/com.davemorrissey.labs.subscaleview.sample D/skia: JPEG: debug_onDecodeSubset ++ , dur = 202.196228,  id = 13911,L:2669!!\n01-09 14:57:09.401 13734-13769/com.davemorrissey.labs.subscaleview.sample I/[MALI][Gralloc]: [+]r_hnd(0xf35a10e0), client(41), share_fd(49)\n01-09 14:57:09.401 13734-13769/com.davemorrissey.labs.subscaleview.sample D/GraphicBuffer: register, handle(0xf35a10e0) (w:1080 h:1920 s:1088 f:0x1 u:0x000b00)\n01-09 14:57:09.650 13734-13911/com.davemorrissey.labs.subscaleview.sample D/skia: JPEG: debug_onDecodeSubset 2 -- , dur = 457.141998, dur = 0.000000, all dur = 457.141998 , L:3231!!\n01-09 14:58:08.735 13734-13734/com.davemorrissey.labs.subscaleview.sample V/InputMethodManager: START INPUT: com.android.internal.policy.PhoneWindow$DecorView{702979a V.E...... R....... 0,0-1080,1920} ic=null tba=android.view.inputmethod.EditorInfo@1239e9e controlFlags=#100\n01-09 14:58:08.744 13734-13734/com.davemorrissey.labs.subscaleview.sample D/ActivityThread: ACT-AM_ON_PAUSE_CALLED ActivityRecord{c98bcbc token=android.os.BinderProxy@bf1d445 {com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity}}\n01-09 14:58:08.815 13734-13734/com.davemorrissey.labs.subscaleview.sample V/ActivityThread: Finishing stop of ActivityRecord{c98bcbc token=android.os.BinderProxy@bf1d445 {com.davemorrissey.labs.subscaleview.sample/com.davemorrissey.labs.subscaleview.sample.basicfeatures.BasicFeaturesActivity}}: show=true win=com.android.internal.policy.MiuiPhoneWindow@4df314c\n. ",
    "riccycastro": "ok, when you use \"setMaxScale(1)\" and the image size it's the same size of your screen it won't zoom in or out. sorry my bad. \nAnd about the drawable is because I was using same image but different sizes\n. ",
    "s-a-davidovich": "i also have this problem to stretch small image within the view\n. ",
    "sanderversluys": "The default behaviour as described in the configuration docs is the whole image is visible at minimum scale, with both dimensions of the image equal to or less than the corresponding dimension of the view. The image is then centered in the view.\nYou can overcome your problem with following config:\nimageView.setMinimumScaleType(SCALE_TYPE_CUSTOM);\nimageView.setMinScale(0.5f);\n. ",
    "VitalyNikonorov": "Sorry, confused the order of the arguments for prescaling. \nNow it is fixed and I made some changes in card image.\nP.S.: before fixing there were no errors in case of both flipping simultaneously\n. ",
    "gabrieljuan": "yup, I used another compressor and it solved the problem. To be honest, I don't know exactly what is the problem. Is it because xiaomi devices that don't get skia updates or the skia requirement to handles the image properly. Anyway, thanks for your answer. \nP.S : if anyone curious for the compressor I used to solved this problem, I used compressor.io\n. ",
    "razerdp": "I try setMinimumTileDpi(160); \nand it work\n. ",
    "TayfunCesur": "Hey. Thanks for fast reply. And as you said I found a soluiton. I tried setMinimumTileDpi method and it worked. But what this method did ?\n. Sorry for my English. Do we have any callback that returns us part of zoomed image's as bitmap?\nI need smaller bitmaps of huge image.\n. I read that and I know how can I get clicked coordinates. My problem was I didn't imagine how can I create bitmap from clicked coordinates. But I will work on this thanks. By the way,let me know how can I do that?. \nThanks. Best regards.\n. ",
    "hgourvest": "when you double tap and keep your finger at the same place without moving, it is interpreted as a long press event when you remove the finger, but during this time the quick scaling mode was also activated and removing the finger also trigger the double tap event just after the long press event (line 854). My fix detect if a long press event was really handled, and cancel the double tap if necessary.. I was using a Oneplus2 device with Android 6.0.1, unfortunately your project don't fit my needs, so I no longer using it. Sorry.. ",
    "sachitkarki": "i would be pleased if you run this demo , you will see the problem.. ",
    "thaindq": "@sachitkarki: may I know how to make that thumbnails? Thank you.. ",
    "ZeroBrain": "ImageSource.uri(file.getPath())\ninstead\nImageSource.uri(Uri.fromFile(file))\nin my case, It works.. ",
    "iboying": "Hi, Dave:\nThis is a really great repository. And it is used for my project.\nYesterday, I have try setMinimumScaleType(SCALE_TYPE_CENTER_CROP) and fix my issue.\nThere is a new issue:\nA short image can not fill the device width.\nAnd this is the issue screenshot:\n\nUse the Android Imageview and set android:scaleType=\"fitStart\", it is like this:\n\nCan the repository have some configurations like android:scaleType=\"fitStart\"?. ",
    "xmliu": "tks, @iboying ,setMinimumScaleType(SCALE_TYPE_CENTER_CROP) is a great method,but it is not fit my requirement,as you say, no attribude like fitStart . ",
    "jayleco": "@iboying \u4f60\u597d\uff0c\u6211\u9047\u5230\u8ddf\u4f60\u4e00\u6837\u7684\u95ee\u9898\uff0c\u8bf7\u95ee\u4f60\u662f\u5982\u4f55\u89e3\u51b3\u7684\uff1f\u80fd\u5206\u4eab\u4e0b\u5417\uff1f. ",
    "thorb-redweb": "I ended up doing it like this:\npublic void instantiateItem() {\n    ....\n    detail_image.setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_CUSTOM);\n    detail_image.setMinScale(getFitWidthScale());\n    ....\n}\nprivate float getFitWidthScale(){\n    float viewWidth = App.getWindowWidth();\n    return = viewWidth/getImageWidth();\n}\n\nprivate float getImageWidth(){\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeFile(_file.getAbsolutePath(), options);\n    return options.outWidth;\n}.\n",
    "kingideayou": "You could use setImage(ImageSource imageSource, ImageViewState state) method.\nsee: https://stackoverflow.com/a/47048047/4756955. ",
    "vihuela": "last version\uff1aunder code is corect running\n\n\n. ",
    "rmunk": "I am using the latest version 3.6.0 without any modifications. \nviewProfilePicture is of a ProfilePictureView class extending SubsamplingScaleImageView but I only override onDraw in it to draw some gridlines over the image. . Any news here? Can I do anything to help you debug this issue?. Ok, I figured out it is a minification issue. If you set minifyEnabled true in build.gradle it removes empty constructor from SkiaImageDecoder and SkiaImageRegionDecoder.\nI solved it by adding following line to proguard-rules.pro:\n-keep class com.davemorrissey.labs.subscaleview.** { *; }\nIt would be good idea to document this on the setup page in the wiki.. I used gradle: compile 'com.davemorrissey.labs:subsampling-scale-image-view:3.6.0'\nBut I also use the Android plugin shrinker in debug builds to avoid the 64K method limit:\ndebug {\n            minifyEnabled true\n            useProguard false\n            proguardFile 'proguard-debug.pro'\n        }\n        release {\n            minifyEnabled true\n            shrinkResources true\n            useProguard true\n            signingConfig signingConfigs.release\n            proguardFile 'proguard-rules.pro'\n        }\nIt looks like it removes zero argument constructor from SkiaImageDecoder and SkiaImageRegionDecoder while Proguard which is used in the release build keeps it.\nAnyway, I hope this helps someone if they stumble upon this issue.. ",
    "lomoya90": "Thank you! I see it, but why?. ",
    "Fozei": "Hi, I am so sorry!\nI already solved this issue, just modify method minScale() in Class SubsamplingScaleImageView, before the last retrun add the following line : \nsetMaxScale(Math.max((getWidth() - hPadding) / (float) sWidth(), (getHeight() - vPadding) / (float) sHeight()));\nThanks a lot !!!!!!!. ",
    "PyaePhyoLinn": "How to solve this question? Sir... Thanks, Sir. I solve this error. \ud83d\ude04 But I have another problem. SubsamplingScaleImageView is look good and can use double tap to zoom in and out in my phone. But @ Tablet Screen Size, SubsamplingScaleImageView  is not look good and can't use double tap. How to get for those screen size reasonable? \n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView\n    android:id=\"@+id/imageView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"/>\n\n\n```\nSubsamplingScaleImageView imageView = (SubsamplingScaleImageView)findViewById(R.id.imageView);\nimageView.setImage(ImageSource.resource(imageResource));\n\n\n\n\n. ",
    "AndroidDeveloperLB": "But the sample shows it for a single one, and it's not even a view ... :(. I was just wondering if I can use it somehow.\nMaybe take the current content of what's shown..\nAnyway, thank you .. @davemorrissey Haven't tried yet. I got this error/warning when cloning and importing the project :\n\nPutting those attributes in the manifest is a very old development behavior. Gradle file is the way to go these days.. ok here:\nhttps://github.com/davemorrissey/subsampling-scale-image-view/pull/414. I've looked at it, but I'm not sure. Is it this one:\nhttp://davemorrissey.github.io/subsampling-scale-image-view/javadoc/com/davemorrissey/labs/subscaleview/SubsamplingScaleImageView.html#visibleFileRect-android.graphics.Rect-\n?\nThe wiki doesn't seem to mention this.\nI also can't find how to set the rectangle, if I want to. . Speaking of the wiki, I was curious about custom decoders, but both of the first links here (of \" RapidImageDecoder and RapidImageRegionDecoder\" ) are dead:\nhttps://github.com/davemorrissey/subsampling-scale-image-view/wiki/04.-Custom-decoders. What should be the correct way to set the rectangle using these functions?\nWhy not have it the same as the \"visibleFileRect\" function? Setter and Getter?. This makes sense, but still, it is possible to overcome this, by using one of the dimensions as the one to force visibility on.\nAnyway, thank you for the help.. ",
    "Hezj": "Maybe you can take a look at my modification in #302.. ",
    "abangfadli": "Yes I've tried that before but the resulting scale make the image zoomed in too much. It appears that the default scale was not 1, so I had to multiply the current scale with 'screenWidth/imageWidth' to ge the correct scale. Thanks!. ",
    "pawelsa": "Where can I find the fork with rotation @milmanal ?. ",
    "rcketscientist": "Maybe I'm missing something...where is the stream resuse?\nImage:\nContentResolver contentResolver = context.getContentResolver();\ninputStream = contentResolver.openInputStream(uri);\nbitmap = BitmapFactory.decodeStream(inputStream, null, options);\nRegion:\nContentResolver contentResolver = context.getContentResolver();\ninputStream = contentResolver.openInputStream(uri);\ndecoder = BitmapRegionDecoder.newInstance(inputStream, false);\nBRD has a native copy of the image, there isn't a need to retain the stream which in fact you're closing immediately.  Can the Uri be opened more than once?. Fair enough.  As (in:InputStream) is fairly standard I wanted to double-check there wasn't a hidden reason why it wouldn't work.  I attempted to slip a decoded image (bytes) through a ContentResolver, but the necessary pipes just didn't work.  I'll fire off a fork.. I've been digging a little deeper into how to solve my various nuances.  Is there any particular reason that ImageSource is final?  There are protected methods, which implies some mixed feelings on the decision.  \nTaking that a bit further, I'm thinking it would be useful as an interface where the image source could supply the decoder.  You might have: BitmapSource, UriSource, ResourceSource, MySource.  The first three might be packaged, the last would be custom and link it's custom decoder.\nAn additional benefit would be extensible source types.  I have a data model that contains image-type.  Primarily, I'm interested in the uri (which works), but it helps to have the full data model which can help to choose the decoder (TIFF, RAW, JPG, etc.).  If the ImageSource supplied it's own decoder it might minimize some of the one-size-fits-all (bitmap, uri, etc.) and eliminate the external config (setRegionDecoderClass).  Let me know if I'm missing something in my cursory analysis.  . Thanks for the fast reply.  I can certainly understand wanting to avoid downstream headaches.  \nI did fork and start playing with it.  The very tight coupling of ImageSource and ssiv certainly make it a lot messier than my posted overview, but I think there's more than one way to crack this egg.  I'll probably start by forcing a single decoder so it never gets decoded twice with an extended ImageSource and ImageRegionDecoder taking an ImageSource rather than Uri for access to meta.  Should stay close enough to upstream to be maintainable.. I got it working, but not quite the way I intended.  I particularly had\nissues with it not pre-fetching in a pager, but that could very well be an\nissue outside this library.  I'll follow up when I've had enough time to\ngive this a fair shake.  I appreciate the inquiry!\nOn Sun, Aug 5, 2018 at 5:35 AM davemorrissey notifications@github.com\nwrote:\n\nDid you manage to get it working the way you wanted?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/429#issuecomment-410507721,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AD1urhovbEPnljPFu30PpXZ8Oc6I-_4-ks5uNrxRgaJpZM4VEvQX\n.\n. I started with a scalpel and eventually went with an axe.  Not a reflection on the source material, but simply my unique use-case/time-constraints.  \n\nThe fork uses the region decoder for everything including the initial load (full-size, sampled).  Since the source material requires a noticeable decode to jpeg this allows me to decode once and keep one native copy in memory (BitmapRegionDecoder).  Since information useful to the decode exists in a database the ImageSource is extended to allow a unique source type (in my case a database object model).\nI gutted most everything unrelated to my use-case (assets, bitmap source, etc.).  If anyone finds this useful, I can work on making it more versatile/clean while keeping the \"one region decoder to rule them all\" methodology.\nhttps://github.com/rcketscientist/subsampling-scale-image-view\nThanks for your help!. ",
    "XiaoQiWen": "Thank you for your answer. I think can do it\nin this method \nonTouchEventInternal() -->ACTION_MOVE   scale = Math.min(maxScale, (vDistEnd / vDistStart) * scaleStart);\nchange to scale = Math.min(maxScale*1.5, (vDistEnd / vDistStart) * scaleStart);\nRemember to deal with fitToBounds\uff08\uff09 and limitedScale()\nLast modified ACTION_UP if(scale>maxscale) start animation\nminScale as well\nI hope my Suggestions can help you. ",
    "friederbluemle": "@davemorrissey Sorry. That's rather odd. Do you happen to have more details about the issues so I can investigate as well?. Okay, I saw the issues.\nPlease provide some more info:\n1. When did you release 3.7.0\n2. Did the issues only start happening recently\n3. When you create a release build, or edit the project, how do you do it? Gradle command line, Android Studio, Eclipse (?!) - I noticed most of the project is still in the Eclipse/Ant format.\nProGuard in release builds seems like a possible candidate for the bugs.\nI will also do some local tests here.\nThanks!. Thanks @davemorrissey - I opened  #355 to discuss further investigation.. Yeah, same here. The sample project runs fine using 3.7.0 in a release configuration with ProGuard enabled (default config).. Oooh! I just noticed checking mvnrepository that 3.6.0 and previous versions were deployed as an aar file, but 3.7.0 is just a regular jar! So the issues might be related to that. A jar can only class files whereas the aar also can contain resources (e.g. the necessary ProGuard rules).\nThat still doesn't explain why the sample project works fine, but just putting this here... Also, 3.7.1 does not appear to be on mvnrepository yet. Did you deploy to bintray?. Okay, so it definitely has to do with the deployment. I just did a side-by-side comparison of 3.6.0 (aar) and 3.7.0 (zip). What's pretty obvious is that values.xml (which includes the necessary attrs.xml), as well as AndroidManifest.xml are missing in 3.7.0:\n\n. OK more findings, after checking the library on jcenter.bintray.com\n (which contains all three versions of interest: 3.6.0, 3.7.0, and 3.7.1):\nSomething interesting:\n- 3.6.0 was deployed as .aar only (including signatures)\n- 3.7.0 was deployed as javadoc, sources, aar, and jar\n- 3.7.1 was deployed as .aar only (no signatures)\nOf course the signatures won't make a difference. Interesting about 3.7.0 is that the .aar file was modified 3 days ago, whereas the rest of the files were modified 6 days ago. Did you somehow add this file later on? Not sure how that would happen... jcenter is mirroring maven central\nMost likely what is happening to some users:\nTheir dependency resolution tool is somehow downloading the .jar file of 3.7.0 instead of the .aar file. These users might have success adding an @aar modifier to their dependency declaration, e.g.\ncompile 'com.davemorrissey.labs:subsampling-scale-image-view:3.7.0@aar'\n\nhttps://stackoverflow.com/questions/26250790/what-does-aar-means-in-gradle-compile-task\nObviously, since this library contains resources, it makes no sense to deploy it as jar in the first place. This was probably a mistake in the release.gradle file, and was likely the only thing that had to be reverted. Of course that is pending further investigation. I'll continue to try to reproduce here.. Great, thanks!! \ud83d\udc4d \nMeanwhile, I was able to reproduce the issue locally.\nAs suspected, the issue comes down to the missing resources in the jar file.\nBUT: Running the sample app with just the jar library works without issues. The reason is that non of the xml layout files in the sample app use any of the custom attributes defined in attrs.xml of the library project!\nAfter adding a app:zoomEnabled=\"false\" to one of the SubsamplingScaleImageView xml elements, the build failed right away. The app namespace is declared like this:\nxmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\nAlso, as speculated, adding a @aar to the 2.7.0 dependency will fix the issue an correctly pull the aar file with resources. Not that it really matters - people should update to 2.7.2 asap.\nThanks again for this project, and sorry for not paying closer attention to the release.gradle script in the original PR!. In #353 you mentioned to the OP:\n\nThat suggests your layout XML has a src attribute on the view's element. \n\nThat's what led me to try the attributes myself. ;)\nAnyway, I'm glad we were able to figure out what was going on. Here is a small follow-up PR: #356\nI think you can close this issue. \ud83d\udc4d . @davemorrissey Good question, and sorry for not adding a proper explanation in the PR description.\nBasically, the reason why a missing newline at the end of the file is considered a problem comes down to the definition of what a \"line\" is by POSIX standard 3.206:\n\nA sequence of zero or more non-  characters plus a terminating  character.\n\nOf course, this sounds a bit academic, and most modern text editors will work just fine with or without the newline. However, some programs (e.g. command line tools like wc, cat, vi, etc) show incorrect or problematic behavior if the last line in the file does not end in a newline character.\nYou might also have seen Git command line warnings when running git diff such as:\nNo newline at end of file\n\nOr (same thing) the little red icon warning on GitHub:\n\nAn easy way to remember is to think about it this way: There is nothing particularly special about the last line in a file. Just like all other lines it should be terminated by a newline character.. Ohh.. okay.. ",
    "demonbibi": "I have met the same problem, I want to have a animation between two activities using ActivityOptions and Transition. The shared elements are ImageView and SubsamplingScaleImageView, and the default animation is really awkward and stiff, how to solve it. ",
    "Uiasdnmb": "You need custom transition to handle the change smoothly, including zoomed scale of SubsamplingImageView. Easiest way to do is to wait until image is loaded before starting transition (also prevents flickering), then reading off size of the target image and size of view itself to properly calculate the required scale.\nI don't want to drop ton of code here, so I'll just link to gist with complete transition.. Did you properly postpone enter transition in onCreate() and start in when image was ready? Also if you're creating transition in code without inflating xml you need to set target manually. I haven't tested if it works in fragment transitions either.\nI actually did experiment with superimposing ImageView s, but for my use case I needed to transition from centerCrop into fitCenter and that didn't work well at all.\nOnce I even tried using exif interface (in onCreate()) and injecting image size into my transition, and it did work without postponing but caused flickering since image was not loaded when transition started.. ",
    "dileep-n": "Hi, how to swap images at run time by using this library? Please help me. Thanks in advance.. ",
    "berendn": "I'm using subsamplingScaleImageView.setOnStateChangedListener(new SubsamplingScaleImageView.DefaultOnStateChangedListener()); as a workaround.. Ok, thanks!\nFrom: davemorrissey [mailto:notifications@github.com] \nSent: vrijdag 9 februari 2018 07:44\nTo: davemorrissey/subsampling-scale-image-view subsampling-scale-image-view@noreply.github.com\nCc: Berend berend@qrk.nl; Author author@noreply.github.com\nSubject: Re: [davemorrissey/subsampling-scale-image-view] Image not centering well when using different values for paddingTop and paddingBottom (#389)\nClosed #389 https://github.com/davemorrissey/subsampling-scale-image-view/issues/389 .\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/davemorrissey/subsampling-scale-image-view/issues/389#event-1466085281 , or mute the thread https://github.com/notifications/unsubscribe-auth/AFmL5qK1KeNBr4EnZjcGz4bOL5RxhcQTks5tS-lNgaJpZM4RygGe .  https://github.com/notifications/beacon/AFmL5lOneWv1XC4whwzQDcFRUbtU3GuYks5tS-lNgaJpZM4RygGe.gif \n. ",
    "8masterofpuppets8": "Any idea if this will be merged at some point soon? Would be quite useful to be able to load remote images.. ",
    "oskarOlausson": "Yes, tjat sas what I eventuellt did\nOn 14 Aug 2017 9:23 AM, \"davemorrissey\" notifications@github.com wrote:\n\nClosed #317\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/317\n.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/317#event-1204299739,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AJHC807SLIlBUmjoYnrZVH4QWYObE3bKks5sX_XkgaJpZM4NMXp4\n.\n. \n",
    "jack-cook": "I think the reason about this problem is that ViewPager will not draw page newly created off screen until that page becomes visible. I guess this widget start to load image when onDraw called.. ",
    "webserveis": "Here small solution https://github.com/davemorrissey/subsampling-scale-image-view/issues/37. Yo use FragmentStatePagerAdapter?\nAdd preload pages with mViewPager.setOffscreenPageLimit(2);\n. ",
    "dmitrikudrenko": "@jack-cook Do you have a solution?. Yes, I do. ",
    "micabytes": "I already have a DIY view component based on SurfaceView (though I'll not take credit for it - much is inspired by WorldMap), but I'm impressed with how smooth you managed to make this ImageView work which is why I'm thinking of looking into this (Good job, btw). I do worry what the fps will be like with overlay draws - will have to find some time for experimentation. Thanks for the feedback.. ",
    "Arxsos": "Hi, you need to add the PinView extension ( see extension part ) \nand you can add pins like :               \nmyImageView.setPin(new PointF((int) sCoord.x, (int) sCoord.y)); ( with event ) . ",
    "ahjsrhj": "@davemorrissey  When the view is not initialized, such as network image loading fails, this time can not respond to the oClick event\uff0c sorry my bad english. ",
    "HR": "Great! There was a viewToSourceRect method a time ago  but was removed in https://github.com/davemorrissey/subsampling-scale-image-view/commit/757552dc43f1a7f58a22b57e138c8f6497bba624. Just bring it back \ud83d\ude09 . ",
    "vipulyaara": "Oh okay. Thank you for the response. Please keep in mind that there is not even one good working open source zoomable layout if you are in mood to create another library in future :)\nHave a nice day.. ",
    "m4rkus": "i also get this when doing fast pans. ",
    "janneoksanen": "They're set to match_parent to make it take up the whole screen. Somehow, however, the view gets resized to wrap_content.\nEDIT: Errr... somehow when I paste XML half of the code disappears when it's displayed, so here's a screenshot of the layout file of the full screen dialog that displays the image.\n\n. If I remember correctly I wasn't able to make it work 100% to my\nsatisfaction. I'm no longer working on the project so I can't double check.\nThanks for your help anyway.\nJanne\nOn Wed, 1 Nov 2017, 14:42 davemorrissey, notifications@github.com wrote:\n\nDid you manage to solve this?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/davemorrissey/subsampling-scale-image-view/issues/339#issuecomment-341095850,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ALMYFhkCVf2e7kBzDzaVexBCEXJmqnuMks5syGdRgaJpZM4Owh7y\n.\n. \n",
    "yorkwang": "Here is an example picture: http://imanga.co/img/d39dd2e38939b39e/12/1.jpg, \nseveral users which are using my app reported this problem to me, and I have tested on my phone, it can't be displayed, but the smaller pictures(<20000) can be displayed. Maybe it's a tile size issue.. Now I got it, it will be displayed after about 5s because the pictures are too long. Sorry about it! . ",
    "broakenmedia": "Just as i posted this i gave this a shot:\ncanvas.translate(0, 50);\nsuper.onDraw(canvas);\ncanvas.translate(0,-50);\nWhile it does actually appear to work, still feels like a massive hack and also does not maintain the spacing when zoomed in. Yeah, that's what i've resorted to for the time being but it's not really my call sadly, hopefully the feedback is positive and i won't have to spend another 2 days looking for solutions aha.\nIt's definitely a tricky one, i even tried using a Picasso transformation to modify the source image it self, drawing a white bar along the top for the markers to sit on, but as you mentioned, it wasn't consistent when zooming in/out.. Looks like they were happy! My only problem now is that because they're pins, the top left corner of the view is where it's being scaled around, meaning when zooming the tip of the arrow never aligns with the correct part of the image. It is indeed something i can do... thanks for that, no idea why i didn't see it, saved me my evening!. ",
    "SherlockGougou": "@davemorrissey \nSame picture, and use 'imageView.setImage(ImageSource.uri(uri))'.\n3.7.0 zoom fail, logs:\n\n3.6.0 zoom success. no log.\n. @davemorrissey . The URI like this:content://media/external/images/media/6580, and it exits.. \ud83d\udc4c,I will try it.Thanks~. thank you very much! The latest version solves all my problems.\ud83d\udc4f. ",
    "genyue": "\nis this the log u  are looking for?. \nLogCat?. ",
    "RocketRider": "With 3.6.0 it is working fine. The issue came with 3.7.0. I downgraded again and the app is working.\nI also see this in the log. not sure if it has anything to do with the crash\n\n02-02 06:56:27.200 6937-7334/com.xx.yy E/SubsamplingScaleImageView: Failed to initialise bitmap decoder\nandroid.content.res.Resources$NotFoundException: Resource ID #0x7f0c00c5\nat android.content.res.Resources.getValue(Resources.java:2358)\nat android.content.res.Resources.openRawResource(Resources.java:2273)\nat android.content.res.Resources.openRawResource(Resources.java:2250)\nat com.davemorrissey.labs.subscaleview.decoder.SkiaImageRegionDecoder.init(SkiaImageRegionDecoder.java:70)\nat com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1516)\nat com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1491)\nat android.os.AsyncTask$2.call(AsyncTask.java:288)\nat java.util.concurrent.FutureTask.run(FutureTask.java:237)\nat android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\nat java.lang.Thread.run(Thread.java:818)\n. It is inside a Viewpager.\n\n```\n    @Override\n        public ImageItem instantiateItem(final ViewGroup container, final int position) {\n            final ImageItem imageItem = items.get(position);\n            final ImageMediaItem imageMediaItem = imageItem.mediaItem;\n        final View viewLayout = inflater.inflate(R.layout.media_image_item, container, false);\n\n        final SubsamplingScaleImageView imageView = viewLayout.findViewById(R.id.imageView);\n        imageView.setImage(ImageSource.uri(imageMediaItem.getPath()));\n        ....\n}\n\n```\n```\n\n<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView\n    android:id=\"@+id/imageView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"/>\n\n<RelativeLayout\n    android:id=\"@+id/imageFooter\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_gravity=\"bottom\"\n    android:background=\"@color/black_alpha\"\n    android:padding=\"16dp\">\n\n    <TextView\n        android:id=\"@+id/imagePosition\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentRight=\"true\"\n        android:textColor=\"@color/white\"\n        android:textSize=\"16sp\"\n        android:visibility=\"gone\"\n        tools:text=\"position\"\n        tools:visibility=\"visible\"/>\n\n    <TextView\n        android:id=\"@+id/imageDescription\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_toLeftOf=\"@id/imagePosition\"\n        android:textColor=\"@color/white\"\n        android:textSize=\"16sp\"\n        android:visibility=\"gone\"\n        tools:text=\"Description\"\n        tools:visibility=\"visible\"/>\n\n    <TextView\n        android:id=\"@+id/imageDTG\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@id/imageDescription\"\n        android:layout_toLeftOf=\"@id/imagePosition\"\n        android:textColor=\"@color/white\"\n        android:textSize=\"16sp\"\n        android:visibility=\"gone\"\n        tools:text=\"Date/Time\"\n        tools:visibility=\"visible\"/>\n</RelativeLayout>\n\n\n```\n. ImageMediaItem.getPath() returns a path to the file:\n/storage/sdcard/Pictures/Pictures/1426520776827815208915317789357695820350.jpg\nThe URI from ImageSource.uri looks like this: \nfile:///storage/sdcard/Pictures/Pictures/1426520776827815208915317789357695820350.jpg\nThank you for the link. I will take a look.. Not sure where it comes from. Even when I don't load any image it still gets called after the inflate of the view.\nThe uri looks correct but I can't find any resource with that id: android.resource://com.xx.yy/2131493061\n\n. With the version 3.7.0 there is an attribute set in the constructor.\n\nWith the version 3.7.1. Both issues seem to be fixed. \nIt does not run into the if condition:\nif(typedAttr.hasValue(styleable.SubsamplingScaleImageView_src)) {\n. Thank you, I will try it. ",
    "yangjiantao": "v3.7.2 is still crash .@davemorrissey\nFATAL EXCEPTION: main\n                                                                                            Process: com.davemorrissey.labs.subscaleview.sample, PID: 19659\n                                                                                            java.lang.IllegalArgumentException: pointerIndex out of range\n                                                                                                at android.view.MotionEvent.nativeGetAxisValue(Native Method)\n                                                                                                at android.view.MotionEvent.getX(MotionEvent.java:2201)\n                                                                                                at android.support.v4.view.ViewPager.onInterceptTouchEvent(ViewPager.java:2092)\n                                                                                                at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2504)\n                                                                                                at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2961)\n                                                                                                at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2650)\n                                                                                                at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2961)\n                                                                                                at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2650)\n                                                                                                at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2961)\n                                                                                                at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2650)\n                                                                                                at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2961)\n                                                                                                at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2650)\n                                                                                                at com.android.internal.policy.DecorView.superDispatchTouchEvent(DecorView.java:445)\n                                                                                                at com.android.internal.policy.PhoneWindow.superDispatchTouchEvent(PhoneWindow.java:1828)\n                                                                                                at android.app.Activity.dispatchTouchEvent(Activity.java:3292)\n                                                                                                at com.android.internal.policy.DecorView.dispatchTouchEvent(DecorView.java:407)\n                                                                                                at android.view.View.dispatchPointerEvent(View.java:11960)\n                                                                                                at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:4776)\n                                                                                                at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:4590)\n                                                                                                at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4128)\n                                                                                                at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4181)\n                                                                                                at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4147)\n                                                                                                at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:4274)\n                                                                                                at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4155)\n                                                                                                at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:4331)\n                                                                                                at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4128)\n                                                                                                at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4181)\n                                                                                                at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4147)\n                                                                                                at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4155)\n                                                                                                at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4128)\n                                                                                                at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:6642)\n                                                                                                at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:6616)\n                                                                                                at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:6577)\n                                                                                                at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:6745)\n                                                                                                at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)\n                                                                                                at android.view.InputEventReceiver.nativeConsumeBatchedInputEvents(Native Method)\n                                                                                                at android.view.InputEventReceiver.consumeBatchedInputEvents(InputEventReceiver.java:176)\n                                                                                                at android.view.ViewRootImpl.doConsumeBatchedInput(ViewRootImpl.java:6716)\n                                                                                                at android.view.ViewRootImpl$ConsumeBatchedInputRunnable.run(ViewRootImpl.java:6768)\n                                                                                                at android.view.Choreographer$CallbackRecord.run(Choreographer.java:911)\n                                                                                                at android.view.Choreographer.doCallbacks(Choreographer.java:723)\n                                                                                                at android.view.Choreographer.doFrame(Choreographer.java:652)\n                                                                                                at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:897)\n                                                                                                at android.os.Handler.handleCallback(Handler.java:789)\n                                                                                                at android.os.Handler.dispatchMessage(Handler.java:98)\n                                                                                                at android.os.Looper.loop(Looper.java:164)\n                                                                                                at android.app.ActivityThread.main(ActivityThread.java:6541)\n                                                                                                at java.lang.reflect.Method.invoke(Native Method)\n                                                                                                at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:240)\n                                                                                                at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:767)\n. ",
    "BartNijland91": "3.10.0 also still crashing with the same issue. ",
    "akrezic1": "Seems like the actual issue is in ViewPager implementation. I've managed to fix it with solution from other repo issue:\nhttps://github.com/chrisbanes/PhotoView/issues/31#issuecomment-19803926\n. ",
    "Shakezulla57": "@davemorrissey That's pretty strange, thanks for the feedback.. I tried 3.7 again quick just as a baseline before I tried 3.7.1. This time 3.7 worked, however the build it wasn't working on was a release build with proguard on. So that could be the issue; if I have time today I'll run a proguarded version.. ",
    "Balaje1408": "fine. Is it possible to add those things in the view? Just give me assurance whether the library is flexible to do those things. I will work out.. ",
    "CB-ysx": "Thanks for your reasons!\nI realized that changing the default behavior was really bad.\nAnd here is my requirement:\n- After load the picture, the view can make the picture full width instead of scaling to show the \n   whole picture.\nIn fact, I've tried to use the configuration option setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_CENTER_CROP).It does solve my requirement when load the big picture, but it doesn't solve to the small picture which width smaller than the width of view. And this configuration option causes another question that the small picture can not be scale.\nIf you have the better solution, please tell me.Thanks!\nFinally, my English is not very good, please understand!. Sorry! It could not solve my problem, because of the image can't be scaled.I still use my method in my project.Thank you!. ",
    "tyl210110": "Has resolved,must add this method   .setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_CUSTOM);. ",
    "tibbi": "I will most likely remove the GlideDecoder in the next version released in a couple days, as it doesnt work properly. I also didn't manage implementing an ImageRegionDecoder yet, so the zoom is somewhat broken as it doesn't refocus on the zoomed region and it is blurry. I should have more info then if it was related to the GlideDecoder. As I checked the crash statistics now, it seems to be happening on Android 7.0 and Android 7.1 only. Thanks\n\n. The initial reason for using Glide was being able to display images in ARGB_8888 for better quality at some gradient areas. If I can achieve it somehow with SubsamplingScaleImageView, I think I could remove Glide. Thanks :). Okay, sadly the performance at higher resolution images like 12MP+ is quite bad :/ Only at some images tho, not always. Not sure yet what does it depend on, my displaymetrics are DisplayMetrics{density=2.0, width=720, height=1184, scaledDensity=2.0, xdpi=326.571, ydpi=325.119} . I replaced GlideDecoder with those 2 lines you sent me. Im testig in on my Android 6, both Subsampling 3.7.2 and 3.8.0 work the same. Ill be playing around with it more once I get some time, thanks.. I see, so it looks like it wont have an easy fix anytime soon. I could help with testing some possible improvements or publishing stable versions out to people, nothing too risky though. 85% of my users have Android 6+, so solving it for them would be perfectly enough. I dont have any Android 8 myself yet, I could test just on Android 4, 6, 7.\n\n. minimum 240dpi didnt help. Layer_type_software helped a bit at there were no freezes during zooming, but the zoom was generally jerky. Ill roll back to the default 565 way for now, that seems like the best compromise.. so the new version with using the default image and region decoder is published, and Im still getting a few out of memories from time to time. Im not using the GlideDecoder, so the issue is apparently with the new ExifInterface. The crashdump is the same as on the first screenshot in this issue.. I upgrated to 3.9.0 and Im setting the orientation manually, but it is still crashing on Android 7+ because no matter what I set, you try retrieving the exif orientation at https://github.com/davemorrissey/subsampling-scale-image-view/blob/master/library/src/main/java/com/davemorrissey/labs/subscaleview/SubsamplingScaleImageView.java#L1556 . Thanks, here is a crashdump \n\n. Im loading the main image + 2 images per side with Glide, Subsampling is used only for the currently visible fragment. Ill try recycling Subsampling after swiping away, think Im not doing it now. It is the most frequent crash for me, but still not a critical one so I dont really want to maintain a fork. Thanks. so I forked your library and with this commit I indeed fixed hundreds of crashes per day ;) https://github.com/tibbi/subsampling-scale-image-view/commit/6d880a617e8818d4d0372482978163c8005c26bf. well ye, you have to decide. I guess the only benefit of using the support media library is that vulnerability fix, which affects some old devices. Since 90% of my users have Android 6+, it's simply not worth for using by me. It still looks strange that nobody else reported those crashes.. sure, it is an opensource gallery, subsampling is used at https://github.com/SimpleMobileTools/Simple-Gallery/blob/master/app/src/main/kotlin/com/simplemobiletools/gallery/fragments/PhotoFragment.kt#L246. also the crash is related to the support library added in version 3.8.0 2 months ago, so you dont have it included in https://play.google.com/store/apps/details?id=com.franco.focus&rdid=com.franco.focus yet, if you mean that. I solved it by forking the project, doing this one commit https://github.com/tibbi/subsampling-scale-image-view/commit/6d880a617e8818d4d0372482978163c8005c26bf and including my fork in the app. Didnt have any issues since then.. Alright I will try setting both and see the result. Thanks. Alright, seems like it helped. I added both suggestions and the crashes stopped, so not sure which solved it, but it is solved :) Thanks. I dont think they would. The exif crashes were clearly in the Subsampling code as Out of memories, I dont think it was anyhow related to threading.. actually it is caused by Picasso Decoder, sorry.. ",
    "Kangzhengwei": "I had the same problem\uff0ccan you tell me how to solve this problem.. I solved this problem in other ways, but I still want to thank you.. ",
    "Chenshuai770": "and i want to kenw\n Log.d(\"FourActivity\", \"mIvFour1.getTranslationX():\" + mIvFour1.getTranslationX());\nwhen i translation the result is 0;how can i get reslut with same in Debug;\n . in my viewpage ,i have not use the fragment . \n        mIvTen1.setOnStateChangedListener(new SubsamplingScaleImageView.OnStateChangedListener() {\n            @Override\n            public void onScaleChanged(float v, int i) {\n               //mIvTen2.setImage(ImageSource.resource(R.mipmap.bbb),mIvTen1.getState());\n           mIvTen2.setScaleAndCenter(v,mIvTen1.getCenter());\n        }\n\n        @Override\n        public void onCenterChanged(PointF pointF, int i) {\n\n        }\n    });\n\n\n    mIvTen2.setOnStateChangedListener(new SubsamplingScaleImageView.OnStateChangedListener() {\n        @Override\n        public void onScaleChanged(float v, int i) {\n            mIvTen1.setScaleAndCenter(v,mIvTen2.getCenter());\n        }\n\n        @Override\n        public void onCenterChanged(PointF pointF, int i) {\n\n        }\n    });. i use the code to come true the same scale but i can not come true the same translate.\n",
    "fanpengfei1993": "SubsamplingScaleImageView.setDebug(true);  No information was displayed,And There is no problem loading local images. /SubsamplingScaleImageView: Failed to initialise bitmap decoder\n                                                                                   java.io.FileNotFoundException: No content provider: http://192.168.50.123:8080/public/0B80125DF8E.jpg\n                                                                                       at android.content.ContentResolver.openTypedAssetFileDescriptor(ContentResolver.java:1142)\n                                                                                       at android.content.ContentResolver.openAssetFileDescriptor(ContentResolver.java:993)\n                                                                                       at android.content.ContentResolver.openInputStream(ContentResolver.java:713)\n                                                                                       at com.davemorrissey.labs.subscaleview.decoder.SkiaImageRegionDecoder.init(SkiaImageRegionDecoder.java:67)\n                                                                                       at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1515)\n                                                                                       at com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask.doInBackground(SubsamplingScaleImageView.java:1490)\n                                                                                       at android.os.AsyncTask$2.call(AsyncTask.java:316)\n                                                                                       at java.util.concurrent.FutureTask.run(FutureTask.java:237)\n                                                                                       at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:255)\n                                                                                       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)\n                                                                                       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)\n                                                                                       at java.lang.Thread.run(Thread.java:776)\n. ",
    "naguchennai": "this library useless for network image. not work. they just closed if u ask ... there is no documents about loading image from url .. that means its not work with network image only work with local image. ",
    "ChanNagihong": "I tried and it works, thanks a lot. ",
    "blinkmacalahan": "I wanted to add some additional info for anyone else having a similar issue as me in case the noted solution above works for them as well. I'm using this view inside RecyclerView (with PageSnapHelper) and loading the bitmap via Glide. After the RecyclerView item was getting recycled, I started seeing:\nBitmap  : Called getAllocationByteCount() on a recycle()'d bitmap! This is undefined behavior!\nBitmap  : Called getConfig() on a recycle()'d bitmap! This is undefined behavior!\nBitmap  : Called getWidth() on a recycle()'d bitmap! This is undefined behavior!\nBitmap  : Called getHeight() on a recycle()'d bitmap! This is undefined behavior!\nAfter re-using a couple of recycled views, the app would crash without a stack trace, but I noticed this error in logcat:\nBitmap  : Error, cannot access an invalid/free'd bitmap here!\nUsing ImageSource.cachedBitmap(bitmap) fixed the crash. If you read the javadocs for cachedBitmap(bitmap) it says \n\nProvide a loaded and cached bitmap for display. This bitmap will not be recycled when it is no\n    longer needed. Use this method if you loaded the bitmap with an image loader such as Picasso\n     or Volley.\n\nWorks for Glide as well!. ",
    "lx5475": "To load an image from image URL, you should use Universal Image Loader(https://github.com/nostra13/Android-Universal-Image-Loader).\ntry this:\n```java\nImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(this).build();\n        ImageLoader imageLoader = ImageLoader.getInstance();\n        imageLoader.init(config);\n    imageLoader.loadImage(\"your image url\", new SimpleImageLoadingListener() {\n        @Override\n        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n            // Do whatever you want with Bitmap. in this case, pinView is Subsampling-scale-image-view\n            pinView.setImage(ImageSource.bitmap(loadedImage));\n        }\n    });\n\n```. ",
    "tranminhlan": "Thanks for your response.\n I have find solution for handle event when  zoom photo.\nI use it for get info current zoom of image. \n  imageView.setOnStateChangedListener(new SubsamplingScaleImageView.OnStateChangedListener() {\n            @Override\n            public void onScaleChanged(float newScale, int origin) {\n                Toast.makeText(getApplicationContext(), \"Scale\" + newScale, Toast.LENGTH_SHORT).show();\n        }\n\n        @Override\n        public void onCenterChanged(PointF newCenter, int origin) {\n\n        }\n    });.\n",
    "braydondavis": "My apologies for posting so soon, I was able finally to figure it out with the following:\nPointF currentCenter = PlanImageView.ViewToSourceCoord(PlanImageView.Width / 2, PlanImageView.Height / 2);\nPlanImageView.PanEnabled = false;\nPlanImageView.SetScaleAndCenter(PlanImageView.Scale, currentCenter);. ",
    "jkmcnk": "yes. as far as testing goes, it was (and is being) tested with and without tiling, in a pan and zoom setting, in the android client for our storage service on a variety of devices, but I do suppose a more systematic approach to testing would be nice. ;) anyhow, glad to fix any issues that might arise.. ",
    "kdreamix": "Figured it out.. ",
    "samernady": "@kdreamix : \nWould you please explain how did you implement this.\nI am stuck with this for the last few days. ",
    "scifinder": "Ok, thanks! =) I will try to override onSizeChanged.. Ok, it works:\n@Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        if(oldh != 0 && oldw != 0) {\n            resetScaleAndCenter();\n        }\n    }\nIt's right?\n. Many thanks! =). ",
    "patelkeyur7279": "I trying to resolve it manually add some value to sourceToViewCoord(),  but it's not good for all devices and sourceToViewCoord() is return perfect values but image pointF not perfect and below 7.0 android version zoom in and zoom out all rect overlap.\nAnd tested in 7.0, 8.0 it's working great with same source code but below 7.0 it's overlapping rect.\nAnd If you wanna check then i'll provide this image for test.\nPlease help us asap.. I have tested 5.1.1, 6.0, 7.0, 8.0 version phones, and trying to solve this problem and I see canvas start draw from the top of the screen and under the toolbar, but we want to draw on image want to start point (0,0) from an image.. Okay, Thanks.. => Activity Layout\n\n<minder.testimageview.SampleSubScalImageView\n    android:id=\"@+id/ssvid\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n\n\n=> And this is Main Image Class\npublic class SampleSubScalImageView extends SubsamplingScaleImageView {\nprivate Matrix matrix = new Matrix();\nprivate List<NavigationMapLabels> mRect = null;\n\npublic SampleSubScalImageView(Context context, AttributeSet attr) {\n    super(context, attr);\n}\n\npublic SampleSubScalImageView(Context context) {\n    super(context);\n}\n\n@SuppressLint(\"DrawAllocation\")\n@Override\nprotected void onDraw(Canvas canvas) {\n    super.onDraw(canvas);\n\n    if (mRect != null) {\n        for (NavigationMapLabels data : mRect) {\n\n            Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG | Paint.FILTER_BITMAP_FLAG);\n            paint.setColor(Color.GREEN);\n            paint.setAntiAlias(true);\n            paint.setStyle(Paint.Style.STROKE);\n            paint.setStrokeWidth(5);\n\n            PointF startRect = sourceToViewCoord(data.getStartX(), data.getStartY());\n            PointF endRect = sourceToViewCoord(data.getEndX(), data.getEndY());\n\n            if (startRect != null && endRect != null) {\n                RectF rectF = new RectF(startRect.x, startRect.y, endRect.x, endRect.y);\n\n                float xPos = rectF.centerX();\n                float yPos = rectF.centerY();\n\n                matrix.reset();\n                matrix.setRotate(data.getRotation(), xPos, yPos);\n\n                canvas.setMatrix(matrix);\n                canvas.drawRect(rectF, paint);\n\n                TextPaint textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG | Paint.FILTER_BITMAP_FLAG);\n                textPaint.setAntiAlias(true);\n                textPaint.setColor(Color.parseColor(data.getColor()));\n                textPaint.setTextSize(40);\n                textPaint.setTextAlign(Paint.Align.CENTER);\n                textPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_OVER));\n                textPaint.setShadowLayer(1f, 0f, 1f, Color.WHITE);\n\n                String label = data.getLabel();\n\n                int width = (int) rectF.width();\n                Log.e(\"Text :\", \" --=> Width : \" + width + \" Text : \" + label);\n                Layout.Alignment alignment = Layout.Alignment.ALIGN_NORMAL;\n                float spacingMultiplier = 1;\n                float spacingAddition = 0;\n                boolean includePadding = false;\n\n                // init StaticLayout for text\n                StaticLayout textLayout = new StaticLayout(label, textPaint, width, alignment, spacingMultiplier, spacingAddition, includePadding);\n\n                //Log.e(\"Text :\", \" -> H 1 -> \" + textLayout.getHeight() + \" -> \" + rectF.height());\n                //Log.e(\"Text :\", \" -> H 1 -> \" + textLayout.getText() + \" -> \" + rectF.height());\n                if (textLayout.getHeight() <= Math.abs(rectF.height())) {\n                    //Log.e(\"Text :\", \" -> H 2 -> \" + textLayout.getText());\n                    float yPos1 = (yPos) - (textLayout.getHeight() / 2);\n\n                    //canvas.drawRect(rectF, paint);\n                    canvas.translate(xPos, yPos1);\n\n                    textLayout.draw(canvas);\n                }\n            }\n        }\n    }\n\n}\n\npublic void setRectanglesWithText(List<EntityNavigationMapLabels> data){\n    this.mRect = data;\n    invalidate();\n}\n\n}\nNow, Please Tell me if any wrong in this code, because I'm not getting what's problem below 7.0.\n. ",
    "Sdghasemi": "Actually the images are big enough too zoom like 1080x1920 pixels and also I've set the max scale factor to 10f which brings a huge amount of space to zoom. Also as I mentioned in some cases the zooming in process works with 5 or 6 double taps step by step until it reaches the 10f zoom amount I've set, then the next double tap causes the full zoom out (with a single one); which totally proves the zoom in failure!. ",
    "sepehr1014": "We're also having the exact same problem. Any updates on this issue?. ",
    "reverie-ss": "@Vivek65 did u solve this?. ",
    "abhinav272": "I am working on a camera app, where the user can enter text on preview and can drag over the preview, resize the text and place it anywhere while recording.\nThen I will add it as a watermark to video.. ",
    "tree1891": "Is it possible to load url without picasso?. ### Expected behaviour\nshow image\nActual behaviour\nimage visible only when touch or slide\nAffected devices\nLG G5, SDK 27, android 7\n. ```\nfinal SubsamplingScaleImageView scaleView = view.findViewById(R.id.image);\nscaleView.setOnImageEventListener(new SubsamplingScaleImageView.OnImageEventListener() {\n    @Override\n    public void onReady() {\n        scaleView.setMinimumScaleType(SubsamplingScaleImageView.SCALE_TYPE_CENTER_CROP);\n    }\n@Override\npublic void onImageLoaded() {\n    pb.setVisibility(View.GONE);\n}\n\n@Override\npublic void onPreviewLoadError(Exception e) {\n\n}\n\n@Override\npublic void onImageLoadError(Exception e) {\n\n}\n\n@Override\npublic void onTileLoadError(Exception e) {\n\n}\n\n@Override\npublic void onPreviewReleased() {\n\n}\n\n});\nscaleView.setImage(ImageSource.asset(\"Luxembourg1.png\"));\n```. It does work.\nThank you very much. ",
    "LongAgoLong": "I have tried.But it can't set click and long click.. Okay,thanks.. ",
    "LomikXP": "Ok, thanks for fast and good explain.\nsetToTop - set view to top part of image\nsetToBottom - set view to bottom part of image. ",
    "feiflying": "the main log:\n03-21 20:43:16.234 12461-14145/com.android.test D/skia: multi decodeSubset JPEG End,return true\n03-21 20:43:16.258 12461-14146/com.android.test D/skia: multi decodeSubset JPEG End,return true\n03-21 20:43:16.260 12461-14140/com.android.test D/skia: multi decodeSubset JPEG End,return true\n03-21 20:43:16.261 12461-14141/com.android.test D/skia: multi decodeSubset JPEG End,return true\n03-21 20:43:16.261 12461-14140/com.android.test A/libc: Fatal signal 11 (SIGSEGV), code 1, fault addr 0xc in tid 14140 (AsyncTask #1), pid 12461 (om.android.test)\n03-21 20:43:16.328 14150-14150/? I/crash_dump64: obtaining output fd from tombstoned, type: kDebuggerdTombstone\n03-21 20:43:16.329 520-520/? I//system/bin/tombstoned: received crash request for pid 12461\n03-21 20:43:16.331 14150-14150/? I/crash_dump64: performing dump of process 12461 (target tid = 14140)\n03-21 20:43:16.331 12461-14140/com.android.test I/libc: orig_dumpable: 1\n03-21 20:43:16.332 14150-14150/? A/DEBUG:                \n03-21 20:43:16.332 14150-14150/? A/DEBUG: Build fingerprint: 'alps/full_k63v2_64_bsp/k63v2_64_bsp:8.1.0/O11019/1520856493:user/test-keys'\n03-21 20:43:16.332 14150-14150/? A/DEBUG: Revision: '0'\n03-21 20:43:16.332 14150-14150/? A/DEBUG: ABI: 'arm64'\n03-21 20:43:16.332 14150-14150/? A/DEBUG: pid: 12461, tid: 14140, name: AsyncTask #1 >>> com.android.test <<<\n03-21 20:43:16.332 14150-14150/? A/DEBUG: signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0xc\n03-21 20:43:16.332 14150-14150/? A/DEBUG: Cause: null pointer dereference\n03-21 20:43:16.332 14150-14150/? A/DEBUG: x0 0000007d55f65000 x1 0000000000000000 x2 0000000000000002 x3 0000000000000000\n03-21 20:43:16.332 14150-14150/? A/DEBUG: x4 0000000000000000 x5 00000000ffffffff x6 00ffffffffffffff x7 ffffffffffffffff\n03-21 20:43:16.332 14150-14150/? A/DEBUG: x8 0000007d55f65000 x9 0000007de5b68000 x10 0000007de5b68000 x11 0000000000000003. ok, I know.\nThe code is your sample, the android version is mtk 7.1 bsp version.. I just modify the package name, and if I import your github code into studio and no modify, run it, it will often force quit when I zoom in a picture, the log is same as above. But I downlod the apk from google play, it runs normally.\nThese are all on the same phone.. I don't konw why the apk from the google play is normal, but I also fixed the problem by modifying the source code.\nIn Mediatek  source code, \n/frameworks/base/graphics/java/android/graphics/BitmapRegionDecoder.java\npublic Bitmap decodeRegion(Rect rect, BitmapFactory.Options options) {\n        BitmapFactory.Options.validate(options);\n        / synchronized (mNativeLock) remove for multi-thread support/ {\n            checkRecycled(\"decodeRegion called on recycled region decoder\");\n            if (rect.right <= 0 || rect.bottom <= 0 || rect.left >= getWidth()\n                    || rect.top >= getHeight())\n                throw new IllegalArgumentException(\"rectangle is outside the image\");\n            return nativeDecodeRegion(mNativeBitmapRegionDecoder, rect.left, rect.top,\n                    rect.right - rect.left, rect.bottom - rect.top, options);\n        }\n    }\n/ synchronized (mNativeLock) remove for multi-thread support/ \nThis synchronized  should remove, then it's ok.. ",
    "graynote": "I can see this crashes much in devices that have Mediatek chipset as @feiflying said. This is null pointer exception in the native library. Hey @feiflying, Have you found any solution for this problem? It is strange that you do not see the problem in apk from the google play.\n. ",
    "kahverengi001": "I'm using latest BigImageView and it doesn't use bitmap factory it uses this library...\nSo i'm just giving path of image and it doesn't show correct with correct orientation.\nEdit: Also referenced with BigImageView issue. Sorry i didn't use this project i'm going to notify to BigImageView author.. ",
    "prashantsaini1": "@crzyBrown @davemorrissey I found a quick and easy fix for this issue. Use below code snippet for loading all images using BigImageView.\n```\nBigImageView imageView = (BigImageView) view.findViewById(R.id.image_view);\nimageView.showImage(current_image_path);\n// use this line to force SSIV lib to auto-rotate the image as per EXIF data.\n// It's exactly what's written in SSIV docs here: https://github.com/davemorrissey/subsampling-scale-image-view/wiki/07.-Configuration\nimageView.getSSIV().setOrientation(ORIENTATION_USE_EXIF);\n```. ",
    "james4591": "Ok, sorry.\n1) My PinView is absolutely the same as the link above.\n2) MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n    private PinView imageView;\nprotected void onCreate(Bundle savedInstanceState)\n{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    this.imageView = findViewById(R.id.pin_view);\n    this.imageView.setImage(ImageSource.resource(R.drawable.cat));\n    this.imageView.setPin(new PointF(264f, 66f));\n}\n\n}\n3) activity_main.xml\nxml version=\"1.0\" encoding=\"utf-8\"?\n<com.app.test.test.PinView\n    android:id=\"@+id/pin_view\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    xmlns:android=\"http://schemas.android.com/apk/res/android\" />\n\n4) Results\n\n\n. Yes, thanks it helped. Strange but before everything worked with ImageSource.resource. ",
    "Alexander178": "The problem is that it is not possible to make a slider without brakes in the ViewPager, when loading large images from a disk. Also, when moving left and right, the black screen first goes, for the time being the image is loaded. It would be desirable instead of the black screen to load the reduced copy of the big image while it is loaded. How can this be done, are there any good code examples?\nString[] ListPathNameImg16; //List Image\n//Load\nprivate void open_full_Viewer_image() {\n    ViewPagerFixed ViewPagerFixed = (ViewPagerFixed) mapsActivity.findViewById(R.id.ViewPagerFixed);\n    ImageAdapter adapter = new ImageAdapter(mapsActivity);\n    ViewPagerFixed.setAdapter(adapter);\n    ViewPagerFixed.setCurrentItem(0);\n    ViewPagerFixed.setOffscreenPageLimit(2); //?\n}\n\n\npublic class ImageAdapter extends PagerAdapter {\n    Context context;\n\n    LayoutInflater mLayoutInflater;\n\n    ImageAdapter(Context context){\n        this.context=context;\n        mLayoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    }\n    @Override\n    public int getCount() {\n        return ListPathNameImg16.length;\n    }\n\n    @Override\n    public boolean isViewFromObject(View view, Object object) {\n        return view == ((LinearLayout) object);\n    }\n\n    @Override\n    public Object instantiateItem(ViewGroup container, final int position) {\n        View itemView = mLayoutInflater.inflate(R.layout.z_maket_pager_item_for_img16, container, false);\n\n        SubsamplingScaleImageView SubScaleImgView_for_Img16 = (SubsamplingScaleImageView) itemView.findViewById(R.id.SubScaleImgView_for_Img16);\n        SubScaleImgView_for_Img16.setMaxScale(2.5f);\n        SubScaleImgView_for_Img16.setDoubleTapZoomScale ( 0.95f );\n        SubScaleImgView_for_Img16.setDrawingCacheEnabled(true);\n        SubScaleImgView_for_Img16.setImage(ImageSource.uri( ListPathNameImg16[position] ));\n\n        container.addView(itemView);\n\n        return itemView;\n    }\n\n    @Override\n    public void destroyItem(ViewGroup container, int position, Object object) {\n        container.removeView((LinearLayout)object);\n    }\n}.\n",
    "ParkerK": "Thanks, didn't like how it was letting me zoom out too far with that option, but I just had to not use Custom scale. Apologies for posting a duplicate\n. ",
    "evbarnett": "I figured it out when using match_parent- I was using sourceToViewCoord / viewToSourceCoord incorrectly.. ",
    "rubengees": "@davemorrissey Friendly ping, anything new on this issue?. ",
    "378063465": "setImage(ImageSource.bitmap(BitmapFactory.decodeResource(getResources(),R.mipmap.long_img)));. ",
    "ch4ndu": "Using MinimumDpi-160 and a custom executor. Everything else is default.. ",
    "zahid-arbisoft": "@davemorrissey Thanks, you comment helped. By saying \"not developing this library now \", you mean this library is deprecated, and we will no longer get updated in future.. Ok. Thanks. ",
    "rocketRobin": "Hi\uff0cis there any news, this problem is block my development. Is this library still updated?. thank you very much\uff01. +1. ",
    "aolphn": "+1. ",
    "reallychenchi": "+1. ",
    "JiweiMaster": "plan to support gif???. ",
    "taoszu": "And I find  that  this method is not rigorous because the orientation has 8 case.  This is the link. val exifInterface = ExifInterface(resources.openRawResource(id)) \nyou can use this to get the resource orientation. ",
    "xsveda": "AndroidX is a successor of Support Library. Support Library is deprecated and won't receive any new updates.\nThe usual reaction of library authors is to migrate to AndroidX and drop Support Library dependecy completely. See:\n\nhttps://github.com/sockeqwe/AdapterDelegates/releases\nhttps://github.com/afollestad/drag-select-recyclerview/releases\nhttps://github.com/VictorAlbertos/RxActivityResult/releases\n. \n",
    "perrochon": "I think I am developing the same with to use AndroidX. If the library doesn't update (which seems justified), should I use this branch instead?. ",
    "wuzhongyuan": "Android SDK version : Android 8.1.0,level 27. ",
    "hongtou820": "after add onDraw, how to add onclickLisener ?. ",
    "hereisderek": "might as well migrate to androidx jetpack. > Would you accept a PR migrating to androidx?\nhttps://github.com/davemorrissey/subsampling-scale-image-view/pull/461\nor you can check out my fork here: https://github.com/hereisderek/subsampling-scale-image-view. > Ah didn't check before writing, would be nice to merge and keep the project going...\ni didn't actually create the PR before you posted. ",
    "KirkBushman": "Would you accept a PR migrating to androidx?. Ah didn't check before writing, would be nice to merge and keep the project going.... "
}