{
    "ssaariste": "The issue is in TestCaseInfo::operator=() not in ResultInfo.\n. ",
    "philsquared": "That's what happens when you do this stuff without the code in front of you. Thanks again\n. Fixed. Now does copy & swap\n. catch_runnerconfig.hpp moved into internal\n. After four years I thought I'd make a bit of progress on this, the longest-outstanding issue ;-)\nI've added signal handling (as of v1.1, build 2 on the develop branch). Will add support for SEH exceptions a bit later.\n. Implemented (thanks to proposal by Sam Partington, with inspiration from Kevlin Henney)\n. First cut of this has been committed, but it's not fully tested yet and more examples of real JUnit output would be useful\n. Thanks @wichert. I'm going to have to have another look at this.\nI did see that stackoverflow question (and all that it links to) when I was originally looking into it.\nI think the only way I'm going to get this working is to install an instance of Jenkins and/ or Hudson myself\n. I'm really sorry, Wichert. I managed to drop this somewhere along the line.\nI'm pretty snowed at the moment so I don't know when I will be able to get back to it.\nWill do my best.\nIf you fancy looking into it yourself you'd be very welcome, of course :-)\n. Sorry Wichert, I've still not really caught up.\nHoping to do a big push soon\u2026\nOn 13 Mar 2012, at 09:05, Wichert Akkerman wrote:\n\nHi Phil. Is this still on your radar?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/philsquared/Catch/issues/5#issuecomment-4469584\n. Hey Wichert,\n\nThanks for your patience. I'm really sorry I've not been getting back to this - and thanks for your help.\nThis has not dropped off my radar - but I'm trying to get through some work that will impact the reporter interface before I do too much with the JUnit reporter. I'm aiming to get that done in the next week or so.\nAs for your the question you raised before (sorry I didn't respond before - that was inbox syndrome):\nThe way I have been approaching it is that each isolated test case run (one for each leaf section) is a JUnit \"test\". The name can be constructed from the test case name + section name(s) (I need to formalise that naming scheme too).\nJUnit test suites are then each set of tests that are matched by the filters provided by a single -t switch on the command line (if no -t is provided then there is just a single suite). Bear in mind that -t can have multiple filters. So, e.g:\n-t abc/def* ghi/jkl* -t random/1 random/2\nGives us two suites - one named, \"abc/def* ghi/jkl*\", and one named, \"random/1 random/2\".\nI have support for naming suites coming too - and this is all being captured in the TestCaseFilters class and will be passed on to the reporter (it's not, yet).\nDoes that make sense?\n. The idea is that the test name is a short, hierarchical, name - something like: \"stuff/sub stuff/details\" - so all \"stuff\" tests can be grouped, and all \"stuff/sub stuff\" tests can be grouped.\nYou are not forced to work that way (and I don't always) but it's a useful convention.\nIf you do that then its nice to be able to supply a more detailed description string alongside it too. But I have to admit I use the description string a lot less than I expected to - a lot of the time I leave it to \"\" (you don't have to put anything the string - but, due to C++98 not having variadic macros you must provide at least the empty string).\nSame with sections, although the hierarchical part is less common as they are already in a hierarchy - so I use descriptions even less there.\nIf you have used hierarchical test case naming (ignore sections for a moment) then you might have tests like:\n\"a/b/c\"\n\"a/b/d\"\n\"a/e/f\"\n\"g\"\nNow you can run the first three with \"a*\", the first two with \"a/b*\" or just the first one with \"a/b/c\"\nThe idea has always been that this ability would seamlessly extend to sections too - so a section, \"1\" in the first test case, could be run with \"a/b/c/1\".\nBut I have not yet implemented that - and there are some subtleties to it that make me wonder if it would work that way.\nNonetheless, the ability to create groups on-the-fly using wildcards (especially with hierarchical naming) has been useful - and has got even more useful just recently as I have added prefix wildcards (*foo*) and exclusions (exclude:foo - or ~foo) - which can also be mixed (~*foo*). Additionally you can supply a series of these filters and the group will be the union of the inclusions, less the union of the exclusions.\nSo a command line like:\n-t foo/bar* -t a* ~*b*\nWould run two groups. The first is \"foo/bar*\" and will match anything that starts with foo/bar.\nThe second is \"a* ~*b*\" and will match anything that starts with a, except anything that contains b.\nTwo features that are coming: named groups and tags (non hierarchical matching) should make this approach more powerful.\nSo my scheme was to map groups to Junit suites.\n. I'm not sure where the outer TEST_CASE is coming from.\nTEST_CASEs can appear at only one level (they are implemented as free functions).\nSECTIONS may be arbitrarily nested within TEST_CASEs (they are implemented as if statements with scoped objects).\nIt is true the test cases that logically belong together require a common prefix for the hierarchical matching to work. But it's precisely that prefixing that logically groups them together.\nSections do not require prefixes, however. So I believe your example would be written something like:\nTEST_CASE(\"MyClass/SomeMethod\", \"\") {\n    SECTION(\"situation-one\", \"\") {\n        ....\n    }\n    SECTION(\"situation-two\", \"\") {\n        ....\n    }\n}\nWhich is not so bad.\nNow you can run all MyClass tests with:\n-t MyClass*\nAnd everything in that first test case with:\n-t MyClass/SomeMethod\nUnfortunately, at time of writing, you cannot selectively run Sections within a test case. There are some issues around this that make it not straightforward, but I believe I should be able to get it working to some approximation (the main issue is that discovery of sections only occurs as the test case is running).\nDoes that clarify anything at all? Is it the section selection that you are particularly missing?\n. I hadn't realised the missing class name attribute was the only thing (or, at least, the key thing) stopping this from working! (I've still not had a chance to get a Jenkins/ Hudson set-up going to try it for myself).\nI've plumbed that attribute in now (it was always using an empty string before).\nFor test cases that are actually based on methods it will use the class name. For free standing test cases it just uses the string, \"global\". I'm open to suggestions on making that more useful. But, from the sounds of it, that should unblock you from needing your workaround and at least be a smoother experience.\nI realise there are some other attributes that are still set to \"tbd\". I don't know how important they are to getting this working too.\nI've committed those changes to the Interation branch. Would appreciate if you (both) could let me know how that works for you.\n. @wichert I noticed, while replying above, that our previous discussion never fully concluded. But I was bit confused about this:\n\"I still do not see why I need to repeat a prefix in the section name when I already create an explicit nesting level in the code. Is there no way to avoid that?\"\nI don't see any repeated prefix in the last code you posted.\n. No, it was part of this thread:\nHard link here: https://github.com/philsquared/Catch/issues/5#issuecomment-8232083\n. That's great! Thanks for letting me know, Derek.\nAt this point, since we have at least seen it running now, and due to this thread going on a bit - mostly on peripheral issues - I'm going to close this issue.\n@wichert - if it still doesn't work at all for you please reopen.\nFor any othe JUnit related issues now please raise a new issue.\n. Thanks for reporting this, @SebDyn. I'll take a look, Doesn't sound like it should be too hard to fix.\n. @SebDyn, please give the latest commit on integration a try now - that's v0.9, build 2 (yay - new versioning support)\n. @wichert - re integration branch: Yes I'm checking all new stuff, even bug fixes, into integration now.\nFrom there I'll either bunch them into periodic, \"releases\", to Master - or for urgent fixes I'll merge them across sooner - sorry I didn't make that clear.\nOn integration I have now added versioning support (which will migrate to Master shortly). The version info includes the branch name, so that should help clarify what I'm talking about in future.\nThe version info will also be written into the README file, so the current version on each branch should be immediately visible when you hit GitHub (that's only on my local clone at the moment).\n@SebDyn - I've responded to @wichert on his #136 issue now - hopefully that will help.\n. @SebDyn - actually I don't recognise those Matcher errors. Could you please open a new Issue for them and I'll take another look later. If you can include any sample code that would be perfect.\n. Interesting. I had added:\nvirtual void StartGroup( const std::string& groupName ) {\n            if( groupName.empty() )\n                m_statsForSuites.push_back( Stats( \"all tests\" ) );\n            else\n                m_statsForSuites.push_back( Stats( groupName ) );\n            m_currentStats = &m_statsForSuites.back();\n        }\n- which seems to have the same effect for me. Not sure why it wouldn't be working for you.\n. I've checked in a change that should address (1)\nI'm not quite sure what you mean by (2) - could you elaborate?\n. (I've escaped your inline elements too)\nI think some of your previous comment was swallowed due to XML (non)escaping too. It makes a bit more sense now.\nI'll change it to dump the stdout/stderr for each test case\n. Yes please!\n. Thanks for doing that - that's really useful!\nLooking at the results it seems to be basically working, no?\nIt is not breaking down the results by section (and looking at the reporter code that's simply because that has not been implemented!).\nIt also doesn't seem to be capturing all the contextual information it should be.\nI'll look at both those things.\nIs there anything else more fundamental I'm missing?\n. Unfortunately I get a 404 when I try to follow that link\n. Hmm... Sorry @SebDyn, I don't believe I saw your last two comments before (I suspect because of the way my mail client does threading).\nFor your segfault issue I intend a more comprehensive handling, as mentioned recently in: https://github.com/philsquared/Catch/pull/160.\nFor the CHECK_THROWS issue I can confirm that DidntThrowException should have handled (the others not, as they are flags that are just there to stop warnings).\nI've added the equivalent of your fix (on integration) and will push those changes shortly.\n. @wichert thanks for the continuing feedback.\nI recently (finally!) got Jenkins installed on my laptop (and I'm told it's now installed on the server where I run my CI builds (thanks Paul) - but I've not had a chance to set that up yet).\nMy first impression was, \"wow it's much worse than I thought\". Mostly in unfixable ways, due to limitations in the JUnit/Ant format itself. It's a real shame that it has become the de-facto standard - or at least the closest we have to one. Might have to see if we can change that.\nFor a while I was thinking it's so bad that the feedback is much nicer if you just run the console reporter and capture that!\nBut I will go back and improve things. As for your specific suggestions:\n\"use the filename as the package name\"\n- sounds entirely sensible. ISTR thinking the same thing myself. Not sure about the path - will look into that.\n\"move TEST_CASE to the send class level\"\n- this feels wrong, but in some ways it's appropriate. The \"global\" pseudo-class feels wrong too, so we're probably better off going for the more useful wrongness ;-) I'll look at that too.\n\"expose the top level SECTION inside a test case as the test name.\"\n- seems to follow on - although rather than the \"top level SECTION\" I'd concatenate the whole section path (much as I do in the console reporter now).\n. Therein, as they say, lies the rub.\nFurthermore we're not just talking about Jenkins. Most CI servers support a range of formats but JUnit/Ant is usually the lowest-common-denominator.\nSo until someone comes up with a compelling alternative that they can encourage broad adoption of we're stuck with it.\nIt's not so much the three-tier structure that's the issue.\nThere's a general, \"built for Java\" air to it (which is natural, given its origins - it wasn't devised as a general purpose format). It's quite limited in what can be reported when and, perhaps most significantly, the failure counts are given as attributes in top level elements - which means you can't even start writing it until all tests have been run!\nI wouldn't hold Catch's own XML format up as a shining paradigm of cross framework/ language support either (but maybe we should do something about that). But it has a few characteristics that are in the right direction already - especially that error counts are given in separate elements and at the end - so the report can be streamed as it is being written to.\nBut for CI use the richness of information that is captured is more important. Having places to put file/ line info and assertion expansions are especially welcome.\n. The code base I'm currently working on by day has about 12 Catch test executables (plus a few NUnit executables).\nIt's not so much about the volume as the partitioning. Each of our executables tests a specific component in our system. Some are quite large. Some have just a handful of tests in.\nI think process name is the logical fit for the package name. There's possibly scope for making that configurable, though. When I get back to looking at this again I'll take that into consideration.\nThanks for your additional comments @SebDyn - I'll ruminate on them more when I'm back in the right context to think about it.\n. I've moved this part of the discussion back over to #320\n. Done\n. Thanks for those patches, Michael. I still had 11 more warnings when compiling with -Wall and Wextra (why I didn't have those set already I don't know) - but they were trivial to clear up.\n. I'd only been compiling with -Wextra and -Wall.\nI added your flags too and have now fixed all the warnings from those - although I didn't agree with some of them.\n. Yikes! I see the problem - and know how I broke it.\nWill have a fix soon. Thanks for pointing it out.\n. Hi wichert.\nI have a little backlog of smaller issues to get through first - as this will require a bit more attention. I'm hoping to be on it this week, though.\n. I've checked in an initial improvement. It's not a complete fix but it might get you out of trouble for now.\nI'm working on a complete fix now.\n. Sorry - I should have said what this fixes. It should work if there is a single subsection\n. I checked in a more complete fix now. It passes the skimpy tests I have in there but I need to add more before I can really say this is done. Would appreciate your feedback if you give it a try, though.\n. Cool, thanks\n. Cool - glad you found the issue. I couldn't see any way that the scoping wouldn't have worked.\nAs for the -s reporting issue - thanks for pointing that out. It only occurred if a parent test had no assertions of its own (which would commonly be the case, but none of my meta tests were written that way! :-s ). Anyway, I've reproduced in the meta-tests and it's now all fixed. Would appreciate your verification, though.\n. Hi Tryneus.\nIt is indeed the double evaluation issue.\nIt's been on my list for a while to come back and look at.\nYou're the second person to hit this within a week - so I'll take that as a prompt to work on it next ;-)\nAs for how it can be worked around I have two ideas:\n1. The first is along the lines you suggested too. The ResultBuilder can capture the native values as well as the stringised ones - then recombined into the original comparison once it has both sides. There were a few reasons why I didn't do it this way in the first place - but I think the repeated evaluation side-effect is more pernicious.\n2. An alternative I have toyed with the idea of is to run the whole test case for a second pass in the event of failure. The first pass would evaluate the expressions and the second pass would capture the decomposed parts. I'm not sure if this will introduce non-trivial overhead in some cases, have other side-effects or problems of its own.\nEither way, looking at what you're doing suggests you're testing multi-threaded code. Is that the case? I don't currently support multiple-threads explicitly - although if the test code is confined to the calling thread there shouldn't be any issues.\n. It's sort-of-a-bug. More specifically it's a known deficiency :-)\nI have a few alternative implementations on the go at the moment to deal with it. So far they introduce more extra complexities than I am happy with - but since I'm getting more and more people hitting this now I do need to deal with it.\nI'll update soon. Thanks for the reports, guys.\n. Hi Jalfd,\nSorry it's taking a while. I had a few more critical issues to address. I'm back on this again now. I have a solution that I'm just ironing out.\n. For anyone following this - I've checked in a candidate approach to get this working with single evaluation. There were some obstacles to getting this going (in particular having to deal with signed/ unsigned warnings when comparing unsigned ints against int literals) - but I think I have got it all sorted now.\nThe approach is sufficiently complex that I've checked it into a separate branch for now. I'd appreciate your feedback - good or bad - before I merge it to master.\n. Damn. That really should have been under test - since it's one of the most common types of test (test that a pointer is not NULL)!\nI see the issue, and have reproduced it. It's because in a template situation NULL is deduced to be of type long.\nA naive fix worked but gave me a warning about comparing a pointer type with an int. A slightly less naive fix worked but gave me a warning about passing NULL to something that takes a long!\nMy final fix works and gives no warnings (at least for me in XCode's GCC (4.2) and WIndows (VC++10). The approach is to overload ->* to return a different RHS collector object for pointers. That then only supports == and != against another pointer type (which will give an error, but the same one you'd see in normal code) or against the same pointer type (non-const) - which NULL when then decay to and it all works as expected.\nIt all works for me. Let me know if it works for you now.\nI haven't tried nullptr yet (need to get set up with a C++0x compiler), although I see that gcc 4.2 defines NULL as __nullptr - which added its own wrinkles.\nIf nullptr doesn't work out of the box now it should be trivial to add for support for.\n. Excellent news - thanks for checking\n. I'm going to leave this ticket open for now - and keep the new code on the branch - until it's settled in a bit more. If anyone else has tried it I'd appreciate comments - good or bad.\nThanks.\n. FYI I've merged the SingleEvaluation branch back into trunk.\nThere's still one or two things that I'm not entirely happy with (such as the const_cast on operator forwarding), but given how pernicious the double-evaluation issue is I think this is stable enough now.\nThanks for all the help and comments I've had.\n. Thanks for bringing this up.\nOddly I just started seeing this in the VS2010 solution I have running in my EC2 instance - but I haven't had any time where I have access to sufficient internet access to fix it :-(\nI'll be trying to reproduce it in my VM on my laptop. Hope to have a fix shortly.\n. Should be fixed now. I used your suggestion more-or-less as-is. Thanks for that.\nI also renamed the top level macro to avoid the name clash (which makes more sense now we're using __debugbreak() ).\n. Thanks for reporting this, jafld.\nLooks like the problem was just with the return of foo() - at least for me the literal NULL didn't crash (but it wasn't reported as nicely as it could be).\nAnyway, I've fixed the issue (only tested with XCode GCC so far) - I just needed a couple of overloads of toString() that take char* const and const char* const, respectively.\nThen I can handle the special case of NULL quite easily (which I now do, and print a special string: {null string}, in that case - and quote all other strings). This seems more friendly.\nLet me know what you think and if it works correctly for you.\n. Thanks for that mattrubin. Looks like I broke that back in commit dea7781 and hadn't tested it without DEBUG defined since.\nI took your pull request but actually made the dummy macro function a full inline function (as is also used a little further down in the windows case) as I get a warning about an empty if statement otherwise.\n. That's exactly what the INFO() macro is for. I see you've logged an issue against that too so maybe you already realised that.\nIn any event, see the section \"Information is power\" in my original blog post:\nhttp://www.levelofindirection.com/journal/2010/12/28/unit-testing-in-c-and-objective-c-just-got-easier.html\n. Hi jalfd,\nYes, you are correct that INFO doesn't capture the textual representation of the expression being streamed.\nIn this case it is just acting like cout, so it wouldn't really make sense. After all if you constructed a sophisticated streaming expression with many parts, and perhaps some formatting manipulators, it's not going to be very useful to see how the expression was constructed.\nHowever I can see that just logging the value of a variable is a common special case - probably the most common use case - so it makes sense to offer a tailored mechanism. I'm going to look at adding a convenience macro, say: CAPTURE( var ) that expands to something like INFO( #var \" := \" << var ).\n(That's OTTOMH, btw - not passed through a compiler. I can never remember the macro stringizing syntax without compiler help ;-) ).\nThat way you get the best of both worlds.\nWith some tweaking I could probably get it to allow the following to work too:\nCAPTURE( value ) << \" is the captured value\";\nI expect. I haven't tried it yet.\nThoughts?\n. In fact that was so trivial I've done it and checked it in (well, the basic CAPTURE() ) anyway - not the follow-on streaming.\nCheck it out.\n. Odd. I'll take a look at that a bit later.\n. I've not had a chance to try this with MSVC yet (which version, btw?) - but it's very odd for several reasons.\n1. There is no difference between how an INFO in a SECTION is handled - and there are plenty of examples of INFO with a single string that have run happily in MSVC.\n2. expr should not be NULL - it should be \"\" in this case (see catch_capture:491) - so expr[0] should be '\\0' (and that's what I see when I debug from XCode/ gcc).\n3. although expr is a raw char*, it's actually the, just constructed, m_expr that is being tested - which is a std::string. If it made it to there then m_expr[0] should always work.\nThat said I made a small change to check expr against NULL before checking expr[0]. Let me know if that changes anything. However I suspect that is not actually where your crash is.\nIf you could confirm which version of MSVC you're using - and any other context that may be relevant, I'll try and reproduce it (assuming my last check-in doesn't fix it).\n. Yes, of course, you are right. If I'd done m_expr.c_str()[0] then it would have forced the null terminator.\nSo it sounds like my \"fix\" is really a fix. I'm checking expr against NULL - which is a const char*, rather than m_expr, which is the std::string. Did you try it out?\n. Done\n. D'oh - good spot - thanks @jalfd\n. I've checked that in now.\n. Oops - sorry about that.\nI'll try to add that into the branch shortly - thanks for pointing it out.\n. @colonelsammy I could possibly force a descriptive error message - but it would still be limiting your options - what if you don't control the source?\nI think providing a non-const operator ==, or an operator == that takes its argument by non-const ref, are the lesser two of four evils (when you add in providing const and non-const overloads and making them do something different). After all the first two are probably just an oversight. The other two are deliberately malicious!\nThat's why I'm leaning towards supporting the former two at the expense of the latter two.\n. Thanks for the comments.\nI've gone with the const_cast approach for now but I may revisit this in the future.\n. The unfinished, undocumented, generators implementation in current Catch is deprecated.\nGenerators will be a feature of Catch2, taking advantage of C++11 features.\nThe groundwork for interop with Section tracking has already been laid, but the direction I want to take generators in is going to be much easier - and more powerful - with C++11.\nSo I'm going to close this ticket now.. That doesn't sound good.\nI think the most important question is: are you using the \"master\" branch, or \"SingleEvaluation\" ?\nIf the former I suspect it may be due to the multiple evaluations of the arguments (most likely in the last assertion - looks like it has side-effects?)\nIf the latter then it may be due to how the arguments are held in template deduced types.\nI think the first case sounds more likely - so I'm guessing you're on master?\nIf so could you try the SingleEvaluation branch and let me know of that solves it for you?\nIf not please let me know ASAP. I'm hoping to merge SingleEvaluation back into master quite soon so would really like to know if there are serious issues of this nature with it!\nCould you also try and pin down (through a process of elimination) which line is causing the issue. I'm guessing that if you replace the REQUIRE()'s with assert()s in the first case it works too?\nThanks\n. d'oh.\nThis is the sort of thing that's stopping me merging SingleEvaluation back.\nWhich line is that complaining about (ie which is line 345)?\nThanks for the feedback.\n. Could you be more specific about what you mean by \"boolean attribute\"?\nIdeally if you can reproduce the issue in a boiled down case (that doesn't depend on Lua) it would be perfect :-)\n. Actually I think I know what it is.\nIt looks like catalog.called is a pointer - is that so?\nAt least I was able to reproduce the issue by evaluating a pointer in a boolean context.\nI've just pushed a fix up. Please let me know if it addresses your issue.\n. Excellent news! Thanks for reporting this and trying it out\n. Done\n. A little investigation suggests that adding:\nm_xml.endElement();\nto EndTesting() in the xml reporter solves it (may need the same in the Junit reporter).\n. Added fix for xml reporter.\nJunit was fine\n. Done. Should probably think about namespaces sometime too\n. Done\n. Hi @wichert\nSorry you're hitting this issue.\nIt seems there are still some issues with my single pass evaluator.\nIt looks like the code you posted has not been compiled? As well as hasFlag() vs has_flag() you used boost::trilogic, where I presume you meant boost:tribool ?\nIn any event I was able to reproduce the issue with just:\nANON_TEST_CASE()\n  {\n      boost::tribool flag;\n      REQUIRE( flag == boost::indeterminate );\n  }\nIn fact I was able to write my own simple class to demonstrate the issue without boost - which is useful (boost doesn't tend to be the easiest thing to diagnose!). The implicit conversion to bool seems to be what does it.\nSo I'm going to have to look into this. Seems to be some interplay between operator overloads and template deduction.\nIn the meantime you can workaround this issue by placing the problem expression in its own set of parentheses (so it evaluates as a single bool expression). So my example, above, becomes:\nANON_TEST_CASE()\n  {\n      boost::tribool flag;\n      REQUIRE( ( flag == boost::indeterminate ) );\n  }\nYou lose the breakdown of lhs and rhs in the event of a failure - but in all other respects this should work as intended.\n. You've really found a tricky case here.\nIt turns out there's (at least) a couple of issues here.\nThe first is relatively straightforward. The implicit conversion to bool is defeating my fallback mechanism for types that don't support << or have a toString specialisation. The simplest workaround is to supply a toString() overload (and this is something I should document, as your original comment suggested). To do so, write something like this:\nnamespace Catch\n{\n    inline std::string toString( const boost::tribool& value )\n    {\n        std::ostringstream oss;\n        if( value )            \n            oss << \"true\";\n        else if( !value )            \n            oss << \"false\";\n        else\n            oss << \"mu\";\n        return oss.str();\n    }\n}\nIt's a shame that this is necessary in this case.\nHowever the second problem is that the way boost::indeterminate works is very strange. It appears to actually be a function, rather than an enum or const value as I might have expected. So when it appears in an expression like that it seems to be decaying to a function pointer - which should still be fine - but something else is stopping me from taking a const ref to it.\nInvestigation continues...\n. Ok - looks like it's because you can't (with a C++03 conforming compiler) take a const ref to a function. Not sure why my example works - but it's not conforming, apparently.\nSo this is broken by the esoteric implementation choice of boost::tribool :-(\nThere's a simple workaround in this case that doesn't lose the operand values breakdown - wrap indeterminate in a tribool - e.g.:\nREQUIRE( flag == boost::tribool( boost::indeterminate ) );\nWhen combined with the toString() specialisation mentioned previously I believe this should all work now.\nSo I'll add the documentation on toString. I'll also see if I can get it to compile without it (it usually works).\nAnd I'll have to think more about how to capture that indeterminate value. I presume that other test frameworks that capture LHS and RHS suffer from the same problem. I've not check any yet.\nHope this helps.\n. Fixed\n. Thanks to James Bates, who suggested that a ... handler can call out to external functions that can rethrow within another try-catch and catch the exception by type there.\n. Implemented. See CATCH_TRANSLATE_EXCEPTION\n. Initial cut checked in. Still a work in progress.\nOnly works for TEST_CASE (not SECTIONs yet) - and file/ line still not propogated in all cases\n. Works for sections no - unable to repro issue with exceptions outside sections not reporting file/ line\n. Works for sections no - unable to repro issue with exceptions outside sections not reporting file/ line\n. Hi @byzhang.\nI don't believe I've seen this issue (or seen it reported, before your comment here) since my last report here - 3 years ago!\nIs there any more info you can provide? Perhaps a minimal, complete, example?\n. Done\n. I presume you are embedding the whole set of includes within your own project?\nYou might want to use the new single-header version instead if you are doing that (see http://www.levelofindirection.com/journal/2011/5/27/unit-testing-in-c-and-objective-c-just-got-ridiculously-easi-1.html )\nIn any event I've made those paths relative again so it should work now.\n. Thanks for reporting this, Samaursa.\nWhat compiler/ platform are you using? I assuming it's a version of Visual Studio?\nI haven't been able to reproduce the issue at this point, but from your description I can see why the templates might be confusing things. They shouldn't really be there - more of a hang over from a previous direction.\nSo I've taken them out. Values are taken as doubles now. Please let me know if this fixes the issue for you - but please let me know about the compiler to so I can make sure I allow for it.\n. I was able to reproduce this in VS2008 after all. Thought I'd tested it. Obviously I hadn't. Sorry about that.\nAnyway, I can now confirm that the fix I mentioned previous does address the issue so I'm going to close this ticket.\nThanks again, Samaursa.\n. That shouldn't compile.\nI just checked it (XCode - using GCC 4.2) and it certainly doesn't for me.\nWhat compiler are you using?\nIs there anything special about foo? I presume it is just a function?\n. Closing since I've not seen anything. Please re-open if you see it again\n. epsilon/ tolerance should probably be std::numeric_limits::epsilon() * 100\n. Left Approx non-generic, but use epsilon for float (*100)\n. You can set the tolerance level (epsilon) for each Approx call by using the syntax:\nApprox( x ).epsilon( y );\nI'll soon be adding the ability to specify epsilons for a range of Approx's (or all of them).\nMake sure you have the latest Catch (as of last friday/ IIRC) because I did change Approx to be slightly less strict (now 100x epsilon for float)\n. In fact I've just pushed up another commit for this.\nYou can now create your own Approx instance with settings for epsilon and scale.\nSee the last test case in https://github.com/philsquared/Catch/blob/master/projects/SelfTest/ApproxTests.cpp for an example.\nApprox is a class, and usually when you use it you construct a single, temporary, instance on the fly.\nBut now you can create a named instance with epsilon and scale values that can be reused.\nYou can create this instance locally to your test case, or globally to your test app, if you like.\n. Thanks for letting me know, @samaursa (eventually ;-) )\n. This is a documentation fail on my part.\nREQUIRE() always terminates the current test case.\nCHECK() works the same way as REQUIRE() but doesn't terminate the test case.\nSo if you use CHECK instead of REQUIRE you'll get the behaviour you want.\nI find it useful to use REQUIRE for things that, if they fail, invalidate the following checks - e.g. a NULL pointer check.\n. Yikes! That's not good.\nThanks for the snippet - I reproduced it in XCode with that.\nInvestigating now...\n. Hi Wichert,\nAFAIK all local variables that Catch uses have fairly obfuscated names (for exactly this reason) - usually including a catch based prefix and line number too. Obviously if I've missed any I'd like to know about it (and fix it).\nCould you try and boil your case down to the smallest thing that demonstrates the problem and post it here.\nThanks for the feedback.\n. Actually I just had a feeling I might know where the variable you're talking about might be. Had a quick look and, sure enough, there it is. It's in a scope entirely controlled by Catch, so technically it is safe.\nHowever I can see why it produces the warning you're seeing. Not sure why it might make your tests fail, though.\nI'll push a fix up later today.\nThanks again for letting me know.\n. I checked in that change. There were actually three undecorated names that I found (incuding 'action'). All should have been safely within inner-scopes - but at least for the sake of warnings I've now prefixed them.\nPlease let me know if this fixes the issue for you.\nHowever, if you did manage to get a boiled down example of it causing a test to fail I'd still be very interested to know - not least so I could add it to the self-test suite.\n. The docs need an overhaul + extending (the latter being the main reason for the former!).\nBut the single-header related stuff is pretty important so, thanks to your prompting, I've made a small update to reflect that.\n. Hi @wichert - have you had a chance to verify this fix (and the docs)?\n. I'm going to close this issue for now as my own view is that the issue is resolved. If you see any other name clashes please reopen (is that even possible with GitHub's system?) or just log a new issue.\nThanks again for reporting it.\n. Thanks for reporting thus, @sunshineco.\nLooks like my script for generating the header had an absolute path in it - so the last generation picked up some development changes.\nI've fixed that and regenerated now. Please let me know if this fixed the issue for you.\n. I fail at ... stuff.\nThanks for catching that (pun intended). Updated file uploaded.\n. Yeah - I committed some more changes but then couldn't get a 3G signal for long enough on the train to upload the updated single header (done now).\nA few months back I set-up an Amazon EC2 instance for use with TeamCity to automate multi-platform testing and keeping things like single-header generation in sync.\nUnfortunately I haven't had any time to follow-through on it (EC2 access is not really feasible on the train) - which is a PITA - not least because Amazon are charging me for it!\n. Just managed to fix this - and it's not even a year since you raised it ;-)\nIt was a fiddly one and I'd only ever seen it in one other case, but I believe it now behaves correctly (and was a simple fix once I'd worked it all out).\nThat said, your tests, above, still fail as written.\nThis is due to another difference that is expected - and benign.\nAfter the last inner section within some other section has been run CATCH runs the parent section one more time (will execute no inner sections) - just to make sure it hasn't missed anything. Due to different control flows this can happen in some cases. It should be possible to detect whether it does have to make that extra pass or not, but I think it is safer to always do it (the bug you found was subtle enough!).\nTo catch those extra passes your final expected string should be:\nstd::string expected(\"start + 1 + 1.1 + end\"\n\" + start + 1 + 1.2 + 1.2.1 + end\"\n\" + start + 1 + 1.2 + 1.2.2 + end\"\n\" + start + 1 + 1.2 + end\"  // extra\n\" + start + 1 + 1.3 + 1.3.1 + end\"\n\" + start + 1 + 1.3 + 1.3.2 + end\"\n\" + start + 1 + 1.3 + end\" // extra\n\" + start + 1 + end\" // extra    \n\" + start + 2 + 2.1 + 2.1.1 + end\"\n\" + start + 2 + 2.1 + 2.1.2 + end\"\n\" + start + 2 + 2.1 + end\" // extra\n\" + start + 2 + end\" // extra\n\" + start + 3 + 3.1 + end\"\n\" + start + 3 + end\" // extra\n\" + start + 4 + end\");\n(note the // extra lines). Obviously all the counts are different too - but I think that final expected string is the important one.\n. Great - thanks for the confirmation (sorry, should have waited for that before closing!)\n. Hi Jurnell,\nDo you need to provide your own main() ?\nCatch provides main for you if you #define CATCH_CONFIG_MAIN before #including or #importing \"catch.hpp\"\n. Hmm... I had responded to this by email previously and thought it had updated here. Apparently not.\nAnyway, I had been saying that I've been toying with such an idea - and proposed some syntax for it.\nHowever I'm still not sure if it is needed - or at least not at the TEST_CASE level.\nWhere I've needed templated tests I've just written a separate function template that contains a SECTION. Then I write a TEST_CASE that calls that template for all types I'm interested in.\nThere are some things that could be cleaner - such as getting the name of the type in the SECTION name/ description.\nRecasting the example you gave this way gives us:\ntemplate\nvoid verifyMyType( const std::string& typeName )\n{\n  SECTION( \"verify/\" + typeName, \"\" )\n  {\n    std::vector vec;\n    REQUIRE( vec.size() == 0 );\n  }\n}\nTEST_CASE( \"test my types\", \"instantiates templates for all supported types and verifies them\" )\n{\n  verifyMyType( \"int\" );\n  verifyMyType( \"float\" );\n}\nyou could use a macro to wrap the verify function - so you didn't have to repeat the type name.\nThat's something that could possibly be moved into the library.\nHowever I like the fact that you can do this stuff fairly naturally - without too much boilerplate - and all with no explicit framework support.\nOf course if you are doing this sort of thing a lot the boilerplate does start to become significant. Maybe I just don't come across the need enough?\nThoughts?\n. Thanks Jurnell,\nYes, I'm definitely against a dependency on boost - although pulling the pseudo-typelist out of boost::variant isn't that hard - especially if you hardcode the limit (so don't have to roll your own Boost.PP too). Actually I need something like this elsewhere (to flesh out the implementation of value generators).\nBut, going back to your suggestion - why do you need the type list anyway? Is it so you can use the same list of types in more than one place? Assuming you can't roll them all into one TEST_CASE with SECTIONs that may be a motivation.\nBut other than that my proposal effectively gives you type lists, albeit not as compactly.\nBut a (boost-variant-like) pseudo-typelist is not incompatible with that approach and could be used to forward on.\n. Reducing/ eliminating boilerplate is certainly one of the central goals of Catch. I'm completely with you there.\nHowever I'm also against making Catch a Kitchen Sink of all possible testing conveniences. That's one of the things that sunk cppunit in the end.\nSo my thinking had been, if you can do something without framework support with a little boilerplate, but which is, itself, fairly rare - then I prefer to not add explicit support to the framework.\nHowever your last comments suggest (a) it may not be that rare and (b) may be more than a little boilerplate.\nSo I will look at this again. I just need to find some time to explore it a bit more. I'm not yet totally convinced that there's not a non-framework way to make this easier.\n. How about this:\nTEMPLATE_TEST_CASE_2( \"proposal/template\", \"test a vector for all supported types\", int, float )\n{    \n      std::vector<T> vec;\n      REQUIRE(vec.size() == 0);\n}\nYou'd have to have a different numbered macro for each number of templates (e.g. TEMPLATE_TEST_CASE_3( \"name\", \"desc\", int, float, std::string ) )\nBut it's a pretty straightforward implementation\n. Of course you're not intruding, @samaursa. Thanks for your input.\nUnfortunately I've got behind on this (and other) issue(s) for various reasons.\nI'm going to try and do a big catch-up (no pun intended) in the next week or so.\n. Unfortunately I've not really had a chance to look back this far for some time.\nIt's not completely forgotten and, now that 1.0 is finally out, I'm hoping to get back to some of these.\n. Hi David,\nI had a browse through. I found a parameterised test: KeyValueBufferTestDiskMemoryUsage. Is that what you meant?\nThis thread is about templatised tests, which is slightly different. Did I miss any examples of this?\nKeyValueBufferTestDiskMemoryUsage should be doable in Catch as it is.\nI don't know if you have seen Generators? They're undocumented as yet as they're not really finished. With that in mind if you're happy to try them they should actually be simpler than the current gtest impl (no separate instantiation).\nSomething like:\nhttps://gist.github.com/philsquared/5990252\n[edit: this gist wouldn't current work due to: https://github.com/philsquared/Catch/issues/21)]\nLet me know if you need more help\n. Thanks. As I say - bear in mind that Generators are still an experimental feature and may be subject to change (probably not drastically - any changes are likely to simplify the sort of usage I showed).\nAnd, as I said earlier, type parameterised tests are on the radar at some point.\n. Oh wait - I forgot about the biggest limitation with generators at the moment!\nhttps://github.com/philsquared/Catch/issues/21\nGenerators are not currently compatible with sections. The gist, as written, would have issues! Sorry about that.\nIf you don't use sections it should be fine.\n. I'm closing this issue in favour of a dedicated generators/ property based testing ticket, #850.\n(That ticket covers type-parameterised tests, too).\nBe sure to watch that issue for notifications if you're interested,. Thanks for reporting this @jcockhren\nLooks like I broke the ObjC build when I refactored for the single include library.\nI believe this should be fixed now. Could you please get the latest, try again, and let me know.\nThanks.\n. Sorry guys.\nI didn't do enough testing before that last check-in.\nAll fixed now (as far as I can see here). Please try again.\n. Thanks Jurnell\n. This always happens for the console app now\n. That's really bizarre.\nAFAICS it only does this for the latest version, in MSVC++, in debug mode.\nBut I think I have found the cause (but have run out of time to fix it this morning - will have to do that this evening).\nI recently added an overload for expression components that are bools that take the bool by value instead of by const ref. This was to prevent a case where expressions with undefined types were being evaluated when they didn't need to be.\nHowever, that (now local value) bool is being held between calls by const ref - so it's now referencing an out-of-scope value!\nIt's amazing (and unfortunate) it's taken so long to show, but such is the nature of these things. My apologies to the community for letting such a schoolboy error slip through.\nWill have it fixed as soon as possible.\n. I've checked in my \"fix\". However I won't have access to VC++ again until tomorrow so I've only been able to verify that it doesn't break on my gcc/ XCode set-up.\nIf anyone has a chance to verify with VC++ before I do please let us know here.\n. Thanks @trenki2.\nI've just been able to verify it in VS2008 too.\nAlthough there seems to be a bug in GitHub at the moment where every time I try to upload a new version of the single_include header as a separate download it reverts to the previous version!\nI presume you were using the repos version?\n. I meant to respond to this before. I did start looking into it.\nIt boils to down to a thorny issue that can't be fully resolved in C++03 (because of the untyped NULL problem).\nIt looks like I will have accept a warning if compiling at high warning levels (but at least it will compile).\nI'll try to finish off what I have been doing and get it in shortly.\nIn the meantime I believe you can just write the expression without the == NULL.\n. Just got back to this.\nI aborted my previous investigation as it was taking me down an increasingly more complex series of workarounds!\nJust looked again and the specific case here seems to be addressed by adding a couple of compare() overloads to the evaluators.\nAt least my own reproduction of this issue now compiles are runs correctly.\nI believe there are still some more int/ ptr compare issues I need to iron out - but for now I think this issue can be closed.\n. Yes. Sorry - I wasn't complaining about your commit - just at the warnings themselves\n. Just to acknowledge this (I think someone else mentioned this too) - looks like a school-boy error. Will try to correct it shortly (in the meantime should be simple to workaround.\n. Can I assume this is all working now? I know that @colonelsammy has been using it successfully with MingW.\n. I never heard back on this. Anyone been using Catch recently with MingW?\n. Thanks for reporting that.\nI've been meaning to go back over how no-returning functions are handled. I've just gone through the code base and changed all the places that rely on compiler specific tricks and replaced them with Catch::isTrue( true ), which tricks the compiler into not warning about functions that don't return. Hopefully this should resolve the warnings with mingw (since this is no longer compiler specific). I'll check in shortly\n. ... in fact I've committed to GiHub now - but not rebuilt the single include. That should be enough for your TestCatch build anyway.\n. Excellent!\nI feel happy closing this one now, then :-)\nThanks again.\n. Sorry for the delay responding to this.\nI don't have any examples of Mock framework use. I've heard that Google Mocks can be coerced into working, but I have not tried it myself.\nPersonally I tend to write ad-hoc mocks by hand instead of using a Mock framework but that's not to say I don't see any value in them. It just means I haven't spent much time looking at how they work with Catch.\n. I'm closing this as it's not really an issue with the framework.\nI plan to write more on CATCH on my blog in the near further: http://www.levelofindirection.com\nI'll also be doing a presentation at Bloomberg in London next month, which I think will be recorded. If so I'll post a link to the video when it's up. I'll cover more TDD-oriented stuff there.\n. You're absolutely right - good catch (pun not intended... well, maybe it is)!\nAdding the class name to the identifier is one option - but what I had intended to do was put the method declaration in the anonymous namespace.\nI'll try to get around to making that change in the new few days (have a whole stack to work through here).\nIn the meantime your workaround should fix it for you locally.\nThanks for the report.\n. Hi @nordsturm,\nIt's been a while, I know, but I finally got around to fixing this one.\n. Good catch (pun intended)!\nI'd like to say it was a deliberate mistake, but I genuinely forgot about that.\nThat's especially embaressing give the, \"Now the more awake among you...\" quip. \nI'll follow your suggestion of incorporating the \"correction\" into the flow as a further example - although I may have to do it next week.\nThanks for letting me know.\n. If you count one month as a day then \"next week\" was about right ;-)\nI finally got around to this. Thanks again for pointing it out.\n. Hi @abijlani, have you used CATCH_CONFIG_MAIN in one of your source files?\n. I realised the same thing the other day!\nThanks for reporting this. I'll try and address it shortly.\n. Well, \"shortly\" might have been optimistic - but I finally had a chance to look at this this morning and have checked in a fix.\nNow it fails on start-up and prints an error to stderr with the file/ line of the first two occurrences (it terminates on first violation, so if you have more duplicates you may have to iterate).\n. If all the tests belong together, but some are hierarchically higher-level and should be executed first (or last - or both) then you can do this already by using nested SECTIONS.\nHowever, from my reading of what you're saying you want them to be kept separately - e.g. application level and library tests.\nIt sounds like what you want is to be able to specify dependency test names, such that the dependencies will be tested first (e.g. the library code), and only if that passes will be the application level code that relies on it tested.\nWhere I have done similar I've put them in different test executables. Then I can easily script them so it only executes the dependant tests if the dependencies pass (catch returns a non-zero return code - actually the number of failures - if the tests fail).\n. Ouch. You're right. Thanks for bringing this up.\nFeel free to provide a patch with your suggestion (I can live without BreakIntoDebugger on iOS) and I'll merge it in.\nAlternatively I'll try to get to this shortly - although I've got a bit of a backlog to get through.\n. I finally got around to being reconstructing my iOS test project so I could reproduce the original issue - then verify that your patch fixes it.\nOf course it does - thanks for that, and sorry for the delay there.\n. Wow! How did that happen! Thanks for spotting it. That may explain one or two odd issues I've been seeing with section execution, actually.\nOnce I've got my environment back up again after a hard drive failure I'll sort that out.\n. Fixed\n. Good catch (pun, as ever, intended) - thanks!\nI've made that change locally but I'm still getting my machine set-up after a hard drive failure so won't get to check it in until later.\n. This got committed as part of something else just recently\n. Hi @hajimehoshi,\nIt's been on my todo list since WWDC!\nUnfortunately I've got a bit behind. Hopefully I'll be catching up (pun intended) in the new year.\n. I finally got to this one!\nI've just committed some changes to allow me to build my test project with and without ARC.\nPlease let me know if it works for you too, if/ when you can.\n. Did you get a chance to check if it all works with ARC for you now?\n. Closing this issue in the absence of contrary feedback. Please feel free to reopen if you have any problems\n. Done\n. I've just added something that I believe will at least partially address your need here too.\nI often find I'd like to do something different depending on the outcome of a test.\nSo I've added CHECKED_IF to the set of assertion macros. It works exactly like CHECK except you can follow it with a block that is only executed if the CHECK succeeds - as if you wrote the CHECK as a plain if (in fact the macro just finishes with a trailing if statement).\nSo you can do:\nCHECKED_IF(  )\n{\n  // Do this if it passed\n}\nYou can add an else too.\nIn your case you only want the else. So I added a form to make that nicer too - CHECKED_ELSE.\nNow you can do:\nfor (int i = 0; i < 100; ++i)\n{\n  CHECKED_ELSE(someArray[i] == i)\n    break;\n}\nAs for the other part - not counting each loop iteration - that depends exactly what you want out of it.\nDo you want to continue running code after the loop?\nHow much information do you want to capture?\nA simple way might be to manually check the condition and call FAIL() if it fails. You can put all the same info in the FAIL message - but you have to do that yourself - so you lose a bit of convenience. I think this gets into the territory of the trade-off between adding too much fine-grained functionality to Catch, vs convenience in edges cases.\n. Closing this as \"no immediate plans to do more\"\n. Fixed\n. Hi Mal^H^H^HColonelSammy,\nI thought I'd done this ages ago. Well I added it back in.\nI did it slightly differently, though. To avoid the msvc warning I use Catch::isTrue( false ), which seems to provide just the right levelofindirection(.com) to convert it to a runtime condition (I use it elsewhere for the same reason).\nThat said I've not had a chance to test it in msvc yet (other than on my CI server that tells me it builds ok - I should probably enable warnings as errors in that project).\n. Thanks!\nOn 1 Mar 2012, at 06:45, Malcolm Noyes wrote:\n\nHi Phil,\nOn 29/02/2012 08:51, Phil Nash wrote:\n\nI thought I'd done this ages ago. Well I added it back in.\nI did it slightly differently, though. To avoid the msvc warning I use Catch::isTrue( false ), which seems to provide just the right levelofindirection(.com) to convert it to a runtime condition (I use it elsewhere for the same reason).\nThat said I've not had a chance to test it in msvc yet (other than on my CI server that tells me it builds ok - I should probably enable warnings as errors in that project).\nExcellent, thanks!  I'll give it a try...\n\nBTW, congrats on getting a keynote spot!  Looking forward to it ;-)\nregards,\nMalcolm\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/philsquared/Catch/issues/72#issuecomment-4253292\n. Hi Malcolm,\n\nThanks for your responses/ patches.\nUnfortunately I haven't been able to get a table space on the train tonight so will probably have to wait until tomorrow to look at it properly\nSent from my iPad\nOn 22 Feb 2012, at 16:48, Malcolm Noyesreply@reply.github.com wrote:\n\nThis patch works for me on Mingw32 (havn't tried Mingw64 yet...)\ndiff --git a/include/internal/catch_debugger.hpp b/include/internal/catch_debugger.hpp\nindex 9986ecf..31d93a9 100644\n--- a/include/internal/catch_debugger.hpp\n+++ b/include/internal/catch_debugger.hpp\n@@ -93,6 +93,14 @@\n    {\n        return IsDebuggerPresent() != 0;\n    }\n+#elif defined(MINGW32)\n-    extern \"C\" __declspec(dllimport) int __stdcall IsDebuggerPresent();\n-    extern \"C\" __declspec(dllimport) void __stdcall DebugBreak();\n-    #define BreakIntoDebugger() if (IsDebuggerPresent() ) { DebugBreak(); }\n-    inline bool isDebuggerActive()\n-    {\n-        return IsDebuggerPresent() != 0;\n-    }\n  #else\n    inline void BreakIntoDebugger(){}\n    inline bool isDebuggerActive() { return false; }\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/philsquared/Catch/issues/73\n. Closing this now as I presume your pull request fixes it (thanks for that)\n. I'm presuming that last const is redundant. I've removed it so hopefully that fixes your warning.\nIf you're still watching (it's been a while, I know), please let me know if it fixes it for you.\n. Closing this as presumed fixed. Re-open it if necessary\n. Good catch!\nIn fact the correct fix seems to be:\n\nstart != std::string::npos\nAll done. Thanks again.\n. I've got some plans in the pipeline around timing.\nFor \"pure unit tests\" they should't really be necessary - if you notice the passing of time they're taking too long!\nBut I've tried to be careful not to pitch Catch as purely a unit test framework - and I do use it on a contract at the moment for performance tests - using some ad-hoc timing code.\nI've been thinking of rolling such a feature into Catch itself. My idea is that you'd mark a test case as something you'd want to time. When running it Catch would start a timer then keep running it in exponentially increasing loops until we get to, say, the 100ms range (perhaps configurable) - that should be accurate enough for most system clock apis.\nWhat sort of usage are you looking for? Would my idea above cover it?\n. On 14 Mar 2012, at 01:15, samaursa wrote:\n\nCould you explain a bit more on what you mean by \"pure unit tests\". Are you talking about TEST_METHOD()?\n\nNo, I mean that a \"pure\" unit test is one that tests a single \"unit\" (usually a class) in isolation. It should test isolated logic - and would typically run in microseconds.\nThere are some exceptional cases where a pure unit test would take longer to run - such as testing an expensive computation (e.g. in quantitative analytics code) - but usually it's an indication that you're testing more than an isolated unit.\nThat's not necessarily bad - and it may still make sense to call that a unit test - but that's why I make the distinction.\n\n\"if you notice the passing of time they're taking too long!\"\nWe let our build machine do the majority of the testing in which case we can't really observe that a test is taking too long and would like to know how long some tests are taking automatically. Even on individual basis, we run a script in the background to test all configurations while we move ahead with our code. One of the reasons I wanted to know how long it takes. \n\nIf the tests are running fast enough why wouldn't you run them locally? You won't be getting their true value if you're not.\nPerhaps build times are the bottleneck?\n\nMy idea is that you'd mark a test case as something you'd want to time\nIf it is implemented, how would l be marking the test? My preference would be to avoid recompilation. \n\nHaven't decided yet, but am leaning towards using a different macro name to mark test cases that should be timed (e.g. TIMED_TEST_CASE).\nI don't see any reason why it couldn't be a command line option too, though.\n\nWhen running it Catch would start a timer then keep running it in exponentially increasing loops until we get to, say, the 100ms range (perhaps configurable) - that should be accurate enough for most system clock apis.\nSorry, I did not understand that fully. What do you mean by exponentially increasing loops?\n\nI mean it would first run the test once and check the elapsed time.\nIf it's < 50ms then run the test 9 more times (so 10 times in total) and check the elapsed time.\nIf it's < 50ms then run the test 90 more times (so 100 times in total) and check the elapsed time.\nIf it's < 50ms then run the test 900 more times (so 1000 times in total) and check the elapsed time.\netc\u2026\nthe 50ms is arbitrary, but should be a figure that can be reasonably relied on from the system clock.\nIn your case, if your worry is that your tests are taking too long, then any long running tests would probably cross that threshold the first time you run them .\nDoes that make sense?\nRegards,\n[)o\nIhIL..\n. \"(Sorry for the delayed reply)\" - no problem. I wasn't timing it ;-)\nYes, my approach is more about benchmarking the runtime. That's not to say it couldn't be used to do one-shot timings. The  problem is that most timings would be below the accuracy threshold of the standard clock. High resolution timers may help, but are platform specific and I didn't want to go there if I could help it (I'm not writing a profiling tool).\nAs for your configurations, 12 sounds like a lot! Would they all have different performance characteristics, or do they still broadly divide into debug/ release.\nSounds obvious but, as a general rule, debug is always going to be slower (ok, there are some exceptional cases).\nSo if you're running locally in a debug config you should be seeing the worst case timings, I imagine?\n. Thanks for raising this. Sorry I haven't got back sooner - been ill. I'll try and address this in the coming week.\nIn the meantime, as a workaround, I suspect #defining CATCH_ARC_ENABLED 0 for your project should fix it\n. I finally got a chance to look at this. I haven't (yet) been able to get an older version of Xcode to reproduce the issue for myself, but from your description it actually looks fairly straightforward.\nSo I've added a bit more to conditionally compile __unsafe_unretained. Hopefully that should be enough for you now?\nIf you're still watching could you give the latest commit a try and see if it does it you?\nThanks again.\n. Any news?\n. Oops. Thanks for that.\nShould be fixed now.\n. Have you had a chance to try this at all?\n. I'm going to close this for now as I believe it is addressed. Obviously if there are still any issues for you feel free to reopen/ open a new issue.\n. Yeah, this has been on my list for a while. I actually want to do quite a lot around selecting tests to run.\nIn the meantime one or two things that may help:\n1. starting a test name with \"./\" (e.g. \"./random test\") prevents it from being run when you run all tests (you can still have it run explicitly).\n2. You can run tests using wildcards (well, just * is supported). If you partition your test names appropriately you may be able to select the tests in such a was as to exclude the tests you don't want run.\nBut, of course, I agree that an option to do that explicitly would be welcome. Your request is noted.\nThanks\n. Sorry - missed this until now.\nYes, only trailing * is currently supported. Richer support is on my todo list.\n. Hi Konrad,\nProviding an overload of Catch::toString() is the way to do it:\ninline std::string toString( std::nullptr_t null ) {\n    return \"nullptr\";\n}\nI'll add this into CATCH itself once I can work out how to conditionally compile it (any suggestions there?)\n. Yeah, it's testing for the specific feature I need. I might have to go for the boost-style brute-force approach :-(\n. Does writing the toString overload (in the Catch namespace) in your own code work for you, btw?\n. Hmmm... it shouldn't work that way. Are you putting it in the Catch namespace?\nIn any event I added it to catch, but only enabled if you #define CATCH_CONFIG_CPP11_NULLPTR\nPerhaps you could get the latest and try that?\n. Thanks for reporting this.\nOdd that I'm not seeing it myself - but I believe I can see why it is happening.\nI've added a #include and committed that change. Please let me know if the latest code addresses this issue for you\n. No problem - was just a simple regression caused by some moving around I've been doing.\nThanks for bringing it up.\n. Thanks for reporting these. Looks like I lost a whole load of GCC warnings when I switched to LLVM as my primary compiler (I'll need to do something about that - I've re-enabled some of them for now).\nSo I think I've got all these now, but would appreciate if the latest repos version fixes them for you.\n. Great - thanks for confirming\n. Thanks Graham\n. Hmmm... sounds like a reasonable conclusion.\nI'll try and take a look shortly - thanks for raising this (pun intended).\n. I've added support for catching Objective-C exceptions.\nWould appreciate if you could try the latest with your example and see what it gives you?\n. > Wait...the raise pun or the try pun?\n\nYou'll never know ;-)\n\nAs for the other issue. Yeah, I noticed that too as I was looking at your first issue. However I didn't think it was related (suspected it was to do with some other changes I made recently - a suspicion that proved correct) - so I didn't let that stop me from checking in.\nI've now sorted the test count issue. It wasn't that the exception was preventing it from counting the failure - just that it was reporting them just before it has updated the totals.\nLatest version checked in should fix that. I'm closing this issue now as your original issue is resolved\n. Ooohhh! That was a nasty one.\nI recently removed a #include \"catch_test_case_info.hpp\" because it wasn't used in the immediate file.\nHowever, there's a subtle interaction. My Python script that merges all the headers into one only includes each header once. The trouble is the first header to include that file is catch_objc.hpp! So if you're not using Objective-C the whole of catch_test_case_info.hpp is #ifdeffed out.\nD'oh!\nIt's not a very clean way to do it. Will have to think more on that.\nIn the meantime I've reinstated the eager #inclusion in the top level header (with am explanatory comment this time) - so it should all work for you now.\nPlease let me know either way.\n. wrt:\nCHECK(result.get()==NULL);\nCHECK(result==NULL); // Alternative spelling, should also work\nThe first one should work. It works fine for me. However I've recently (some today, some yesterday) made some changes that may impact this. Would appreciate if you could try the latest version again.\nThe second one I don't think I can support. I think it fails because it relies on two implicit conversions. You could write it as CHECK( ( result == NULL ) ), but you may as well just use .get(), or the bool conversion.\nI have some special case code when comparing raw pointers against NULL (which, by the time I get to see it, has been interpreted as an int or a long). But I can't special case it for arbitrary types.\nAs for your segfault I don't understand that at all.\nI tried to reproduce what you are doing but it all worked fine for me.\nFrom your stack trace it looks like it's in the clean-up of the runner that it's faulting. Not sure what, specifically, it is cleaning up at that point.\nAre you sure you only get that when you do the CHECK( one ); CHECK( two ); ?\nAgain, please try the latest as I've been doing some reorg in that area too.\n. Ok, I've been looking into that segfault - which seems to have been seen by @klmr, too, in #88.\nI don't see any issue when I run my LLVM 4 build, but I switched to GCC 4.2 mode and it gives me a pure virtual call in the destructor of Runner.\nWhich quickly led me to discover that runner is being destroyed after the context is cleaned up, but trying to use the context in its destructor!\nWhile my symptoms are slightly different from yours - and again from Konrad's, I think it's highly likely they are all basically the same issue.\nI've fixed this in a direct way (changed the scoping) and checked that in. There's some ongoing refactoring in progress in that area, so hopefully I'll close the loophole that made it possible in the first place :-s\nWould appreciate if you could let me know if that fixes your issue. Thanks again.\n. bump\n. Sorry you're having trouble with this.\nI've tried to reproduce your issue.\nI tried the following:\nC++\n    for( int i=0; i<100; i++ )\n    {\n       SCOPED_INFO( \"current counter \" << i );\n       REQUIRE( i < 10 );\n    }\nWhich seemed to correspond to your example. That worked fine for me (LLVM 4.0 and GCC 4.2).\nOne bit in your example stands out, though. You're actually logging ri, which is not mentioned elsewhere in your snippet. What is the type of ri?\n. bump\n. Sorry, didn't notice this before.\nThanks for fixing that.\nAs for the segfault - I suspect it is related to the one reported by @witchert recently in #86.\nI've just been looking into that and I believe I have fixed it (see #86 - I'll add my comments  there).\n. This sounds like a good idea until you realise that == then behaves differently depending on whether it is inside a CHECK/ REQUIRE or not (which it already is - but I have gone to great lengths to make them behave as closely as possible!).\nHowever, I have started to add the concept of Matchers - where I think this belongs more naturally.\nYou should be able to write:\nCHECK_THAT( sz1, Equals( sz2 ) );\n- except that I haven't written Equals yet (should be trivial to do).\n  I do have Contains, StartsWith and EndsWith, though.\n. I've added the Equals matcher locally - will check in tomorrow\nSent from my iPhone\nOn 24 May 2012, at 00:24, mklus82reply@reply.github.com wrote:\n\nHi Phil,\nGood point on the difference of '==' when in CHECK\\REQUIRE or not. I like your other solution :)\nThanks,\nMarek\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/philsquared/Catch/issues/89#issuecomment-5887225\n. You don't construct the matcher class directly. You use the factory method (at the end of the Matchers file) - so the fully qualified name would be Catch::Matchers::Equals in this case.\nAdding using namespace Catch::Matchers didn't seem to onerous. However I've now added the namespace qualification within the matcher macro - so you can do:\n\nCHECK_THAT( sz1, Equals( sz2 ) );\n- with no usings.\n. Oh, I've checked in Equals now, btw\n. Yikes. Good catch.\nThanks. Should now be fixed.\nBut I should point out that I have yet to set up a CI server that uses JUnit XML output to test this against - so if you're doing so please be aware that you are blazing the trail a little (I know someone else found some issues with it)\n. yes\n/embarrased\nWill try to get back to that - I promise!\n. I'm not quite sure what you want to achieve here.\nCHECK & REQUIRE already capture FILE and LINE internally, which are used when reporting the results.\nDo you want to be able to pass different values for these? If so why?\nAs for the expression definition - usually the captured form of the expression is enough. If you do want more custom context you can preceed the assertion with INFO( message expression ), which is only logged in the event of a subsequent failure.\n. I'm going to close this as I don't think it's an issue with CATCH.\nYou are welcome to continue the dialog if you email me directly on my philnash.me domain (put anything before the @)\n. Are you still looking at this, @mklus82 ?\nPerhaps you could give a fuller example as I suspect there is a cleaner way to do what you want using the existing mechanisms in CATCH\n. I'm going to close this as I don't think it's an issue with CATCH.\nYou are welcome to continue the dialog if you email me directly on my philnash.me domain (put anything before the @)\n. Thanks for providing this.\nI have had this sort of feature, and other things, planned for extending the way you can select tests.\nI'm going to hold this for now as I want to do it as an integrated effort - so it won't necessarily resemble your (or the current) code anyway.\nIn the meantime feel free to use your version locally, or on a fork.\n. done.\nThe command line option is -c or --cutoff.\nOn it's own it will abort after the first failed assertions.\nIf you follow it with a number, n,  (e.g. -c 10) it will abort after the first n failed assertions.\n. Done\n. As it turns out printing YES/ NO is not really possible here anyway.\nIt turns out (at least I didn't realise this) that BOOL is a typedef from signed char!\nSo I can't overload for it unambiguously.\nsigned char/ unsigned char had been falling back to my default toString() overload which just uses ostringstream.\nHowever it makes sense to have a specialised overload (now there's an overloaded term) that outputs unprintable chars as numbers - and that gives what you were asking for anyway :-)\nSo I've done that and checked it in. You should now see 1 and 0 for YES and NO, respectively.\nThe only thing that may still be a little confusing is if you have a non-zero BOOL value that is in the printable char range - it will print the ascii character instead. I don't see a way around that, though.\n. Hmm... will see if I can add these in a portable way\n. Better late than never. I've added this now (v1.2.1-develop.9)\n. Wow that's a weird one!\nAnd I can't reproduce it.\nWhat compiler are you using?\nI presume this is in an Objective-C context (since you mentioned NSStreamStatus)?\nAre you using the single include version of CATCH?\nHow recent is it? Did you just download it?\n. Actually I just reproduced it!\nIt works for me with LLVM, but if I put it into GCC mode I get the result you're seeing!\nIf I name the enum it works ok again.\nIt seems to be treating the unnamed enum as a local type (which can't be used to instantiate C++ templates).\nIf I pass a value of that enum directly to a template it doesn't compile (with GCC). However within the require there's an overload that takes a bool. The enum seems to be matching that (hence the weird message).\nI'm not sure whether the issue is with CATCH or the compiler at this point. Further investigation needed.\nIn the meantime I'd suggest either: don't use instances of unnamed enums, or, use LLVM.\nYou can also wrap the expression in parentheses (which forces it to be evaluated before being passed on to the templates).\nAll those workarounds are a bit sucky, but I'll have to work out if there's anything better I can do.\n. Just checked. Unnamed enums are not local types, but the same rule wrt templates applied - ie you can't instantiate with them. I think LLVM may be assuming C++11 rules, which do allow them, IIRC.\nDoesn't help, but clears that one up, at least\n. Yes - here's the backup for C++11 allowing unnamed types to instantiate templates:\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm\n. CATCH started out as a pure unit test framework, so threading wasn't considered a requirement at the time.\nSince then it has evolved to cover more ground and I've been doing some work to heavily refactor the internals to be re-entrant and thread safe - but it's not quite there yet. I'm also a little reluctant to introduce any C++11 features, even optionally - although that may be the only way to add thread safety without external dependencies. If I do go that route I'd need to make sure I'm comfortable with the C++11 threading model, which I haven't had a chance to look at yet (I will buy Anthony William's book during one of the many sales, sometime!).\nIn the meantime can your use of REQUIRE (and any other CATCH entry points that may be concurrently accessed) be wrapped in something that will serialise the access? Or perhaps you could collect the results in some thread local variables during the concurrent tests and pass them on to CATCH at the end (from the main thread)?\nI realise neither of those are particularly nice approaches, but I think it may be a little while yet before I have it fully thread safe.\n. Thanks for all the feedback and the kind words. I'm always happy to hear when CATCH solves the same problems for other people that motivated me to start in the first place. Also bear in mind that I have borrowed some of the ideas of others (in particular Kevlin Henney).\nAs for the re-entrancy and concurrency issues here's how I see it:\nMy use of statics has emerged to fall into two categories (I didn't see this clearly at the start, but as I've refactored it's started to see very obvious). The first is truly static for the lifetime of the body of executable code. The function/ method registries, reporter registry and others (such as exception translation registry) all fall into this category. They do not mutate while tests are running, therefore I see no reason to be concerned about them in the presence of threads (as long as the underlying containers are thread neutral).\nThe other category concerns the running state of the tests - which clearly does mutate during test execution. I've already done a lot of work to collect this into what I'm calling a test context. The test context is accessed via a singleton-like global access point. However I've been working to ensure that the expectation on that is that it is the current context. In the case where a new test context is started while another test context is active the new context is effectively pushed onto a  stack. The \"current\" context is then the one at the head of the stack. It doesn't quite all work that way yet, but it's almost there. My self test suite works this way. I have one test context that tests the output of an embedded test context.\nIn terms of threading this theoretically means that I would just need to synchronise (a) the call to get the current context and (b) all calls on the context. Obviously (b) is a bit harder, but actually there are not that many entry points that are called from within the test code itself. My big task will be to isolate them so that it is easier to reason about then see what the best way to synchronise them would be. I suspect some sort of RAII object that contains a lock and provides mutable access to the context would fit (similar to your frame object, but more granular). Usage of this would be entirely contained within the REQUIRE macro, and others. It could use old-school mutexes, so should be implementable in terms of C11 threading/ POSIX as well as C++11 threading relatively easily.\nThese are just initial thoughts - I haven't looked so closely at that level yet - I'm concentrating on getting the context into a state I can work with (if you pardon the pun).\n. Hi Patrick.\nThanks for bringing this up.\nPersonally I've not used the Borland toolchain since v4.1! I'm a bit out of touch there. My brief search suggests that Builder 5 came out in 2000 - is that right?\nIf that's the case it could work in theory - CATCH should run on anything C++98 compliant - but if it's anything like VC++6 it's likely to have a few issues. How are you finding it?\nI don't really have the time to maintain such an effort, personally, but if you hit any specific issues with your fork that you can find a portable workaround for I'll certainly try and get that included on the trunk.\nI've also been speaking to @pjgrenyer, who maintains a Team City server that runs the CATCH self-tests. If you get something working, and have a copy of Builder that you'd like to get running on that server he'd be happy to accomodate that (thanks Paul).\n. @martinmoene The reporters are not in the \"internal\" folder. They are essentially plug-ins to the framework (you can supply your own reporters). As for config, context and some others - that looks like just me being inconsistent - thanks for pointing it out.\n@jweyrich Good question. I'd rather not rely on #pragma once, but I believe it shouldn't hurt to have it there in addition to the guards (and I tend to do this in other places) - I'll consider adding them.\n. You're right - I responding before careful reading!\nI had a look through and remember now that the convention is not to match the folder structure (so the INTERNAL infix is not usually present).\nINTERNAL first appeared in TWOBLUECUBES_INTERNAL_CATCH_RUNNER_HPP_INCLUDED to disambiguate it from the header of the same name in the parent directory.\nIt looks like that has propagated into a couple of related files due to c&p+m (Copy & Paste + Mutate). I'll change those to minimise confusion.\nI'm working on some changes that should remove one of the two \"runner\" files so hopefully that disambiguation will go away too.\n. I'm presuming my last response answered your original query?\nIf not feel free to reopen.\n. Good idea. I've started this wiki page: https://github.com/philsquared/Catch/wiki/What-compilers-does-CATCH-work-with\nAnyone who has tried CATCH on any platforms not already listed please report your experience in this thread.\n. Thanks David\n. Thanks Patrick. I'll need to go through this carefully, especially as there is at least one known breaking change.\nI probably won't get a chance for a couple of days, so please bear with me.\nAnd thanks again for doing this.\n. Obviously there are two issues here:\n1. tabs vs spaces. My standard is to use spaces. Most IDEs seem to default to tabs. I've installed a lot of beta versions of XCode lately and it's likely reset itself to tabs and I've not noticed. I'll go through and do a clean-up - thanks for pointing that out.\n2. XCode also has a frustrating habit of adding the trailing spaces to lines. Again, I don't really notice unless I'm looking for them (perhaps I should work with invisibles on).\n   IIRC Pete Goodliffe wrote a script that he has run on check-in to trip trailing spaces. I'll see if I can integrate that.\n. re: point (2), above, I've discovered that XCode 4.4 now strips trailing whitespace - yay!\n. @martinmoene have you had any issues with this recently? Can I close it?\n. ok, ok. I should have run grep myself.\nShould be sorted now.\n. I'd meant to comment on this ages ago but it dropped off my radar - sorry about that (and thanks to @martinmoene for prompting me).\nI was holding off doing anything with this as I was making some major changes to the reporting interface. Those changes are mostly complete now, so this is a good time to give this another look.\nThanks for making this available.\n. Hi again,\nThe new reporter interface and implementations are fairly stable now. I use the console reporter in MSVC's output window all the time and the file/ line following works fine for me.\nCan you confirm that this does everything your original pull request set out to do?\n. Finally got to check the fix for this in (had to regenerate my SSH keys after installing Mountain Lion).\nThe following message is now sent to stderr:\n\"No reporter registered with name: xxx\"\nand the process exists with an error code (or Catch::Main() does, if supplying your own main() )\n. Thanks for pointing that out.\nTest cases duly added (I've recently been able to get the command line parsing fully testable) and the condition accounted for.\n. Fixed\n. I completely agree and it's been on my list since forever!\nI'm overhauling the way tests are selected at the moment and hope to at least get closer to this one.\n. Hi again. This too has been on my list for some time - and I'm in the process of working on expanding the filtering control right now (as alluded to earlier).\nCurrently my local repos allows me to specify exclusions (don't run tests that match this pattern) and multiple groups (with inclusions and exclusions applied).\nThe pattern matching is still just trailing wildcards - but I plan to add wildcard prefixes (which is what you seem to be after) next. The architecture is such that extending the pattern matching support should be straightforward (but I'm stopping short of implementing a regex engine!)\n. Wildcard prefixes are in. For your example you can now write:\n-t *submit\nAnd it will match the two test cases that end in submit.\nYou can also do \"contains\" style matches by putting the wildcard at the beginning and end.\nExclusions are also in, so you can do:\n-t exclude:*submit\nTo run all tests except those that end in submit. Or a shorthand that does the same thing:\n-t ~*submit\nI'll add all this to the docs shortly (still tweaking some aspects).\n. #114 is now fixed.\nAs for the subject of this issue, though (filtering based on section names), it turns out to be much harder than I though - perhaps impossible (without major changes).\nThe problem is that SECTIONs are implemented as if statements. The presence of the section, along with its name, is not even registered until it is executed!\nSo to know whether a section should be run or not we'd need to run all tests cases!\nIn this respect the more \"traditional\" xUnit style of implementing fixtures on classes and having test methods (where you might otherwise use top level sections) may be better.\nI need to give this one some thought\n. It took a while but, for anyone still watching this ticket, the ability to run specific sections is in.\nSee: https://github.com/philsquared/Catch/blob/master/docs/command-line.md#run-section\nNote the caveats there.. Not yet but I've had it in mind.\nAt the moment a message is logged to stderr.\nI'm working in that area at the moment and may well add that behaviour (controllable from the command line for extra points ;-) )\n. std::cerr << \"\\n[No test cases matched with: \" << *it << \"]\" << std::endl;\n. Sorry - my fault for not reading that closely.\nAnd you are quite right that this would be a useful, yet easy to implement, feature.\nI'll try and add it after my current test runner changes.\n. No need. Should be straightforward in itself - it's just that I'm completely overhauling the relevant bits of code at the moment - so any work done before I finish that is likely to be invalidated.\nHang tight!\n. Thanks though\n. Hi @patrickmmartin,\nIt was a little tricker than I first thought (because when a test case has sections it will always run for every non-leaf section one additional time (to make sure there are no subsequent sections), so it would give false negatives if that was not accounted for.)\nAnyway it's in now. If you pass -w NoAssertions on the command line it should fail on test cases and/ or sections with no (executed) assertions.\n. Sorry about that. This is a known issue (https://github.com/philsquared/Catch/issues/109). I've fixed it locally - but part of a bigger set of changes, so I'm not ready to check that in yet.\nI'll try and fix it on a different clone tomorrow and commit it in isolation.\nThanks for prompting me.\n. Interesting that you only see it with C++11 enabled, though.\n. This should be fixed now - but I have not been able to test with your compiler.\nCould you please let me know if this addresses the issue for you?\n. I'm going to close this assuming it is fixed. Please re-open if that is not the case\n. No problem - thanks for letting me know.\nI had reproduced the issue myself so I knew I had fixed my instance - but nice to know it definitely fixes it for you too :-)\n. Yeah, I meant the assignment operator, of course.\nFixed now on main branch.\n. Good CATCH_ - thanks Martin.\nLooks like I need more exhaustive checks for those.\nI've checked in a version with CATCH_SUCCEED added.\n. Great catches! Thanks.\nI've made the changes in my current working set - but finishing a feature at the moment so will probably commit next week.\nBTW you can get all the docs with:\nTestCatch -h -t -l -r -o -s -b -n -a -nt -w\n. Good point. Done. Thanks again.\nThe typo fixes are now checked in. The change the the help text will go in later.\n. Yeah. I must get around to implementing that sometime.\nOops.\nThanks for the prod!\n. With the new command line the xml modifier is no longer specified, so I'm technically off-the-hook on this one.\nThat said I still have plans to add xml output for listing as that can be useful for utilities, but at least the interface is self-consistent now.\n. Closing this now as the relevant command has changed considerable and is, I believe, more consistent and less ambiguous.\nI've also removed the embedded help text (see the documentation instead).\nLet me know if you have any issues with the new stuff, but I think this issue is no longer relevant.\n. Good catch. I think I'll have to reapply these again myself as I've been moving things around again.\nBut, still, you've done the hard work - which is a great help!\n. Good catch. I think I'll have to reapply these again myself as I've been moving things around again.\nBut, still, you've done the hard work - which is a great help!\n. Good catch. I think I'll have to reapply these again myself as I've been moving things around again.\nBut, still, you've done the hard work - which is a great help!\n. Feel free. I'm all checked in, for now\n. Accepted - thanks!\n. @samaursa:\nI believe I have fixed the original warnings in the latest committed version now (but was not able to reproduce them in the first place, so can't be sure - would appreciate your confirmation).\nAs to the follow-up question: have you put #define CATCH_CONFIG_MAIN before #including CATCH in your main cpp file (I don't know how old your previous version was, but this all changed when I introduced the single header version)\n@godlygeek Thanks for your research and fixes. \n. \"normal\" vs single header should work the same.\nIn your main.cpp just #include CATCH after that #define. catch_with_main is deprecated now - it just makes the #define then #includes catch. If you were #including catch_with_main then catch.hpp that would explain the multiple definitions.\n. @samaursa, @godlygeek is exactly right. \n#define CATCH_CONFIG_MAIN must go in precisely one cpp file (presumably your main.cpp, in this case).\nI'm confident that will resolve your multiple definitions\n. Glad it's all working out for your @samaursa (and thanks @godlygeek for your input)\n. I should have read this before commenting on #124 ;-)\nOdd that it is not working. I'll take a look.\n. In case you missed the commit message I've fixed this now.\nI'm not quite sure how it ever worked, actually. I can only imagine it was plumbed in differently at the time.\n. Interesting.\nWhat would it do?\n. I've added it.\nI had meant to do this sooner - thanks for reminding me. It was only a simple one line change (well, two lines + a unit test).\nAll checked in now.\n. That's awful! Thanks for reporting this.\nFor some reason I didn't have unit tests in place for that option - and it was broken in two ways (which just goes to show...)\nThe issue you found was because of recent refactorings - leading to the same work being done in two places (as you noticed). I've removed one of them.\nFor me that revealed the second issue - which was that it was trying to delete a stream_buf that it had earlier got from std::cout or std::cerr!\nI've made some changes now to correctly convey ownership and this is all now checked in (along with some unit tests!).\n. No problem - it was two percent of the way there already ;-)\n. I'd need to double-check, and it's not really what was intended, but I'm fairly sure it's because this_does_not_really_matter is interpreted as a -t option when it is in the first position. By the time it works out what help to display it has already resolved that into an option class.\nIt seems a bit superfluous, but I'm not sure if it's actively bad enough to spend too much time looking at.\nBut I'm sure I will at some point ;-)\n. Mostly because I only added the ability to specify tests without -t/ --test quite recently (a few weeks ago!).\n. @godlygeek's comment aside, can we consider this issue closed?\n@godlygeek - when I looked around at the time I started CATCH I didn't see a consensus on a cli standard - so I went with what appeared to be most common in tools I already use (bear in mind I'm not a cli heavy guy to start with).\nNot sure if it is worth changing it at this point, though.\n. I'm going to close this issue as I think @martinmoene's original query was satisfied. It raised some interesting side discussion around CLI \"standards\" but I think that's a bigger subject.\nIf any of the participants would like to discuss this further then please start a thread in the forums:\nhttps://groups.google.com/forum/?fromgroups=#!topic/catch-forum/GR-io9NvGy0\nI'm happy to discuss an overhaul of the CLI if we can come up with a consistent approach that will be familiar with a good proportion of users.\n. ... and such behaviour would be preserved if you use -s.\nOn my current project the XML report, as used on our build server, floods our build logs with thousands and thousands of lines of XML that we are never interested in.\nWe pass it through an XSLT that only shows us the totals and details on errors, anyway.\nIf -s didn't already exist I'd make the XML report continue to be detailed by default and add a quiet mode. But given the precendent of -s I think that is more consistent approach.\nNone of this applies to the JUnit reporter, which I believe convention has always being detailed.\nAnd I promise I will get around to fixing that soon!\n. Agreed. testing merge from integration branch\n. It's a fair cop!\nThis was just about next on my list - honest!\nAnyway. I agree about the -Wglobal-constructors vs -Wno-global-constructors. That was just sloppy on my part (I copied the no- form from XCode project settings - looks like Apple's Clang accepts it as an alias - not sure if I like that.\nSo I changed that.\nBut as for it being after the push - that's not really possible. The code that it highlights is in (among other places) the TEST_CASE macro, which is going to be in user code.\nWhile that does mean that it does, as you put it, \"ruin user settings\", it only does so in the test code.\nI doubt that use of static constructors is something that people want to be warned about in their test code (not that test code is not as important as production code).\n. Cool. Thanks again for your contribution - all much appreciated\n. Just a quick note to let you know I'm not ignoring you.\nThanks so much for supplying this - I've been hoping someone would for some time now.\nI'm hoping to have a look at it in the next week to try and get it integrated (it may not merge smoothly as is as I've been doing some wide-ranging refactoring).\n. Finally got to look at it this evening. It was actually very straightforward.\nThere was no clash with what I'd been doing - but I merged it manually anyway as I have guarded it by the CATCH_CONFIG_USE_POSIX_COLOUR_CODES identifier.\nIn fact if you define that it will use POSIX colour codes even on Windows (e.g. for targeting Cygwin).\nThanks again for contributing it. It's now committed on the Integration branch.\n. Yes, CATCH_CONFIG_USE_POSIX_COLOUR_CODES (now CATCH_CONFIG_USE_ANSI_COLOUR_CODES) is undefined by default, yes.\nThe reason is that I don't, yet, know how to unambiguously detect that they are available.\nIf you have a suggestion here I'll certainly consider it.\nI might start making it the default for cases where I do know for sure (e.g. when running on a Mac) - however I also have a few other reservations:\n1. Developers on Unix-based platforms tend to be a lot more sensitive to tools using coloured terminal output by default.\n2. AFAICS there is no way to tell what the colour was before we started changing it - so we set it back to white when we're done - that may not be what it was - so we have hijacked the current colour.\n3. Although you can do so on Windows too I think it is more common for devs to change their terminal background colour (or set it to semi-transparent or even, in some cases, use a background image!)\n4. I believe the actual colours those codes map to can be remapped (certainly the Mac Terminal allows you do this).\nIn fact I've been thinking of making it not the default even on Windows (or least disable-able).\n. 1. Interesting. I don't tend to see colour output from any of the Bash tools I use in the OS X terminal (including Git). As for whether it will work what I meant was detecting that isatty() (or, more generally, <unistd.h>) is available. Obviously I am conditional on Windows, but I don't know if that is enough.\n2. That's useful to know - thanks. I'll change the respective comment back to reflect that ;-)\n3. Yes - they should be usable - but they may not reflect the intention (e.g. if you end up with red for passing test and green for failing tests it would get confusing). However I appreciate that's pretty unlikely - especially as the colour codes have nicknames that would make it obvious if you were doing that. I've not really played with that stuff much so just feeling my way around.\n4. See above\nAs for the \"ultimate question\" - for now the killer reason is (1) - making sure it doesn't break the compile on other platforms. Beyond that I'm still not sure how many people would get annoyed. I don't have first-hand experience but I've heard many times that it's a bit of a minefield.\nSounds like my other points (2 & 3) don't have a bearing.\nThanks for your feedback (and taking the time to type on an iPhone. I don't know about you but I'm finding it more difficult to type on my iPhone than it was five years ago - maybe I'm just getting old).\n. Also impacts setResultType - which should also be done in negate()\n. Looks like it's the old weakness in my toString() implementation (if you have any ideas how to address this - or at the very least make the errors better - I'd be very happy to know!).\nThe problem is that I need a generic way to convert any type you might use in an expression into a string.\nSo I pass everything to template function called Catch::toString(). This is overloaded for many common types.\nThe default overload (pure template) forwards onto operator <<( std::stream&, T ) to have a go - but via the indirection of an internal helper, makeString(), which attempts to weed out those types for which there is no << overload for ostream either - and at least give a placeholder string (\"{?}\").\nAltogether this works well enough in the majority of cases, but there are still some ambiguous cases I've not been able to control for yet. You appear to have hit one of them with subrange.\nThe solution (or workaround, depending on how you look at it), in this case is to define an overload for toString( const subrange& ) or operator << ( std::ostream&, const subrange& ) to convert it to a string.\nAs I say, I'd appreciate any ideas you might have for the more general case (would much prefer this to be a runtime issue than a compile time one - but a compiler error that makes it more obvious would be a start).\n. Hey, you're preaching to the converted :-) I say use F# these days.\nBut if we have to use C++ I'd like to make CATCH usable and friendly.\nAs I say I've been searching for a way to avoid that error but have, as yet, only been able to limit its scope.\n. BTW I believe Aeryn uses the same technique as I do, so I it should suffer the same problem\n. I'm pretty sure that F# doesn't have a GIL - but we're getting off-topic (would love to take that up \"offline\", though).\nBack on topic: I just had a look at the Aeryn IsStreamable code. It looks remarkably similar to the original version of CATCH's equivalent - and may indirectly have had the same heritage (I did base it off a discussion on accu-general, although I don't think it was Anthony Williams (who wrote the Aeryn class) who made suggestion I followed).\nIIRC I hit similar ambiguity issues with that and the current implementation was an attempt to eliminate, or at least mitigate, those. I think, in practice, it just moved the problem around a bit.\nSounds like that has the unfortunate side-effect of breaking code for you that was working with Aeryn.\nThe fact remains, however, that there is not, currently, an ideal solution in C++. At least not known to me.\n. Unless you have any objections, @russel (or anyone else) I'm going to close this issue.\nThe underlying issue has not gone away but it is a long-known issue that I think it should be documented more generally as this ticket has a lot of specifics.\n. Ha! I just opened issues to report the same thing!\nI can't fix this properly in GitHub until a bit later - but if you just go to line 942 and remove the const and ref it should work.\nSorry about that (and thanks for opening the bug - saved me from doing it)\n. Gah! I suck at GitHub. I accepted the merge and it applied it to Master.\n. Hopefully this fixes it on integration (I am unable to repro on my machine)\n. Thanks for reporting this.\n(I'm not sure why my compiler wasn't warning on it too - I've been compiling with highest warning levels!)\n. This should all be resolved in builds 3 on\n. Done - in integration build 4\n. I had checked in a fix for this on Integration, but on a project here I'm now seeing repeated exceptions messages if an exception is thrown from within a CHECK/ REQUIRE.\nNeed to investigate further.\n. IIRC This all got cleared up. At least I'm not aware of seeing this again recently.\nI'm going to close this now.\n. Sorry I've not responded sooner.\nI'm currently only testing on recent compilers (VS2010, VS2008, Clang 4.1 and, from time to time, LLVM GCC 4.2).\nBut I do try to stick to code that any reasonably conformant C++99/03 compiler should cope with. There is even a VC6 port (but the main branch doesn't build in VC6 out of the box).\nWhich is all to say that gcc 3.4.2 should be supportable. Whether we'd have to do that on a fork or whether we can get the main line to stretch to it is something I'd have to look into.\nIf you come across specific issues (as in your example) and have fixes that wouldn't break the current compilers I'd certainly try to incorporate them.\nLonger term I'm aiming to get more extensive testing in place for different compilers - including some of the older ones.\nRight now I'm trying to stabilise some bigger chunks for work to get to a 1.0 release before I take on the wider work.\n. Sorry I've not responded sooner.\nGood catch. Yes I should get that updated. Thanks for letting me know.\n. Sorted this now. The single header checked in was up-to-date - it was just the downloads version that needed updating (hope to have this all automated soon).\n. Thanks for reporting this @adzenith.\nMatchers are in an embryonic stage at the moment. I just have a few string matchers, which use std::strings (also some corresponding NSString matchers for Objective-C). What you are seeing is the behaviour of std::string when you attempt to construct one from NULL.\nLonger term I'd hope to have more specialised matchers, including one that would get used when you match against NULL. I can foresee some issues with that but we'll see when we get there.\nIn the meantime is there a reason you particularly need to use NULL here?\n. Hi @adzenith, could you confirm whether the fix referenced previously addresses your issue (I know it was a long time ago)?\n. Thanks for reporting back so fast, @adzenith.\nI'll leave this issue closed as you've confirmed the original issue is gone.\nBut I'm a little concerned at your comments about Xcode 4 selftest. That's the project I use to develop Catch in - so not sure about the duplicates you're seeing.\nDo you have any more info on that?\n. Ah, no worries.\nI'm glad it all worked for you in the end.\n. Resolved with new cmd line implementation (Clara)\n. Odd. I don't recall seeing this issue before. Sorry about that.\nI'll look into this a bit more\n. I'm not sure what happened to this one in the intervening years - sorry about that.\n@RossBencina is it still of any relevance to you?. @lightmare aside from the fact that intptr_t is only available from C99 or C++11, IIRC this issue comes up when you do something like:\nREQUIRE( myObj == NULL );\nNULL expands to 0, which gets deduced in the template as an int then later compared against the pointer. So it needs to be cast to the pointer type it's being compared against for it to compile cleanly.. As I said it's not actually about that. The int is coming to us from the expansion of NULL. Hmm... looking at that \"fakes it for Windows\" code that doesn't look terribly sensible. I'll have to review that.\nIf, as you're saying, casting to intptr_t (or a \"fake version\") avoids the warning that may be something to consider.. Thanks for this @rbencina.\nHowever this change is already in the code on the integration branch.\nI'm hoping to have integration in a state to commit to Master sometime soon.\n. That is the intention with both macros. The difference between them should be that INFO is reset at the next failure (or end of SECTION/ TEST_CASE) whereas SCOPED_INFO is reset at the end of the current scope.\nIf you are not seeing that behaviour then feel free to report it as a bug (preferably with an example to reproduce).\nIf you do so ideally try it with the latest version on integration as that is an area that has been reworked considerably.\nBoth INFOs should always show up when you use -s, but only on failure otherwise.\nFinal note: for discussions and questions please prefer the new google group rather than raising an issue (unless it really is an issue, of course):\nhttps://groups.google.com/forum/?hl=en-GB&fromgroups#!forum/catch-forum\n. Thanks for reporting this @martinmoene (and @samaursa for bringing this up on #151).\nThe message strings handling was a bit too coupled and seems to have broken a while back.\nI've reworked how they are handled now and I think it's in the right places (could still do with some more refactoring, though).\nThis changes how the messages are reported now, too. Accumulated messages (e.g. a series of INFOs) are reported after the following assertion (even with -s). I think this makes more sense in general.\nLet me know if this (integration branch build 17) fixes things for you.\n. @martinmoene: eek! I missed that one. I've fixed it (and added the test case) and will commit a new build shortly.\n@wichert: The order is (or should be) preserved. Are you seeing anything that suggests otherwise?\nHowever in your specific case the second INFO would not be seen as INFOs are only seen on failure (unless you use -s, in which case they are seen at the point of the next assertion - so even then in your case it would not be seen as there is no assertion following).\nI'll endeavour to update the wiki with these refinements at some point.\n. The difference between SCOPED_INFO and INFO is the SCOPED_ part. Consider the following:\nINFO( \"a\" );\n{ \n  SCOPED_INFO( \"b\" ); \n  INFO( \"c\" );\n}\n{\n  SCOPED_INFO( \"d\" );\n  FAIL( \"what's printed?\" );\n}\nThe output would be:\na\n  c\n  d\n. I agree it's, perhaps, a little confusing and I have considered deprecating the INFO semantics (or, more specifically, make it work like SCOPED_INFO then deprecate the SCOPED_INFO macro).\nINFO came first - then, when I added SCOPED_INFO, I didn't want to change the semantics of existing code.\nSo, to be clear: Neither INFO nor SCOPED_INFO log their messages unless the next assertion fails (or if you have run with the -s switch, which logs successful results too).\n. Yes, WARN will always generate output - and is usually what I use for dev purposes.\nYou can also use std::cout and std::err, although due to the way CATCH logs some things lazily they can sometimes appear a little out of sync - so I find WARN a little easier to follow.\nIf you think about it: usually, if your tests pass, you don't want any output from your tests! You might want some extra diagnostics while developing, though.\n. I did say, \"usually\" :-)\nAs for JUnit - I meant to mention that. This is something I have changed. I believe previously the JUnit and XML reporters only got the INFOs at the point of a failure (because the responsibility for deciding that was in the wrong place).\nNow they get them with the assertion results, so will always be able to output them. I haven't updated the existing reporters yet, though, so they may not behave correctly just yet.\n. BTW, could we move this discussion to the google group?\nhttps://groups.google.com/forum/?fromgroups=#!topic/catch-forum/GR-io9NvGy0\n. Any objections to me closing this thread here now?\n. I'm not even sure which email that was now, @wichert, but feel free to ping me again about anything outstanding - I am trying to get to everything eventually, honest :-)\nAnyway I'm going to close this now but I'll mention in doing so (feel free to take this up elsewhere if necessary) that I've made INFO and CAPTURE behave like SCOPED_INFO and SCOPED_CAPTURE (which are now deprecated aliases).\nI've also tweaked it so that the INFO buffer is not cleared down if an assertion is successful and not used by the reporter (e.g. default behaviour of the console reporter).\n. Hi @Kosta-Github,\nSorry I didn't get back to you before. I did take an initial look at the pull request and started wondering if I could do the whole Evaluator thing so that I didn't need the const_casts at all (or so that they went into a different place). If so I could apply something like your changes more cleanly.\nUnfortunately, since then, I've been preparing for talks and haven't had a chance to touch the code.\nMaybe I'll get your pull request in for now anyway and revisit later. I'll just need to test it out my end.\n. Hi Konstantin,\nI've incorporated your changes into the code base (couldn't isolate the merge enough so just did it manually).\nPlease confirm, if you can, that it satisfies your original needs (I added your example as a test case and it seemed fine with that).\n. ...that's in build 36 on Integration\n. Thanks for the confirmation (logged against commit 471eba2).\nI'm closing this request now\n. Ah that's terrible. Looks like I fixed that on Integration only. I suspect it's a simple enough fix to apply to Master but there may be other differences. Unfortunately I'm not yet running regular regression on catch_obj.hpp so it relies on me remembering to build it locally.\nI'll try and fix Master soon - although I'm pretty swamped at the moment.\nIn the meantime you should be able to use the version on Integration. That's fairly stable at the moment. I'm hoping to cut what's there over the Master fairly soon anyway. The reporting is much nicer there anyway.\n. This should be fixed now\n. Hi @sriluxman,\nI'm glad you're finding CATCH a good fit. I'd be interested to hear how you get on with it on this platform.\nAs to your question you can provide your own main() and call on to CATCH's, passing a config object - as detailed here:\nhttps://github.com/philsquared/Catch/wiki/Supplying-your-own-main%28%29\nOff the top of my head (can't check right now - but let me know if this doesn't work) you would set the reporter with something like:\nconfig.data().reporter = \"xml\";\nHTH\n. Hmm. I should make that clear in the docs. Catch::Main() is only intended to be called once.\nIt actually cleans up static structures (which including the mappings of reporter names to factory objects) before it exits.\nI think what you want to do is lower level than that.\nThis, too, is possible but exposes you more to code that has been changing.\nIf you accept that you may have to update the code a bit down the line then take a look in that overload of Catch::Main(). You should be able to copy what's in there. The important bit is to take out the calls to Catch::cleanUp().\nHowever while you're there you may as well take out the other bits that are not relevant to you. You probably just want this:\nRunner2 runner( config );\n        result = static_cast<int>( runner.runTests().assertions.failed );\nAdd exception handling to taste.\n. @sriluxman - if you're still watching this - I've just checked in some fairly big changes to the way custom main's are implemented (not updated the docs yet - but it should be reasonably straightforward to follow).\nThe good news is that the cleanUp stuff I mentioned before is now handled by a Session class. You obtain a Session instance once, but from that you can perform test runs as many times as you like.\nThe less good news is that this breaks any existing uses of custom Main.\n. Docs updated:\nhttps://github.com/philsquared/Catch/blob/Integration/docs/own-main.md\nNote that in your original example, config.data().reporter = \"xml\"; now becomes session.configData().reporterName = \"xml\", if you follow the second recipe in that docs page.\n. Sorry - I meant to get back to you ages ago about this.\nWas this on the integration or master branch?\nI believe both neither of these issues are there in integration any more - but I believe they are on Master\n. Ah. I forgot that was still being linked to from the README. I've updated the link now.\nThat will give you a more recent version - but I'm not sure if that will fix the warnings. IIRC they will still be there for now on Master but not, as I say, on Integration (see. builds.catch-lib.net for the integration download)\n. Thanks (the logo wasn't designed by me - I outsourced that ;-) ).\nI intend to build that page (builds.catch-lib.net) out into a full landing page for Catch - or I may just roll it back in to the README (see the README on the integration branch, for example), but my time is too divided elsewhere at the moment. It might still be worth the top-link back, though - thanks for the suggestion.\n. Thanks, Graham.\nI couldn't merge the changes cleanly so I just reapplied them (on integration). I hope that doesn't cause problems for you rebasing.\nI added a test in the OCTest project. (It's not quite as structured as the self test project, but it's something).\n. I presume you're all good, Graham? Can I close this one now?\n. Closing anyway - please re-open if necessary\n. Thanks for this. I've not had a chance to look at this properly yet - but it's definitely on my list. Handling signals/ SEH exceptions (windows) has been on my todo list since the beginning (https://github.com/philsquared/Catch/issues/3)\nI just wanted to make sure you didn't think I was ignoring you.\nMore soon...\n. Sorry, I think this got closed automatically because I deleted the integration branch. It doesn't mean I'm not interested.\nI'm not sure if the PR can be re-targeted?\n. Ah yes. I've had this reported elsewhere too, but not been able to reproduce it myself, for some reason.\nI made the endsWith() change speculatively. Good to know that that does actually fix it.\nI hope to commit integration over to master quite soon. I think it's quite stable - and the console reporting is light years ahead. So I'll be grateful to hear any feedback - good or bad.\n. The integration -> Master merge mentioned above is now complete (as of 1.0) so I'm closing this issue.\n. Sorry about that. Not sure why my build didn't pick up on it. I can see why it complains.\nI've moved the adapter headers back into internal. Could you confirm that that resolves it for you (since I can't reproduce the error here)?\n. No, it shouldn't require the ugly ../ relative addressing\n. \"I don't want it to be that way\".\nThe idea of keeping the bundled reporters separate was that they demonstrate what could be client code (ie you can provide your own reporters). Therefore all their (source code) dependencies point in to the main Catch code base. Code within Catch should not have dependencies back out.\nMy original thought was that the adapter was more of a convenience to that \"client\" code - but in retrospect that was a mistake as code within the main Catch code base references it, currently.\nI hope that clears it up :-)\n. #139 related to the integration branch (which probably hasn't been merged over since then). Looks like you've found the same issue on Master.\nI'd recommend you try integration. It's superiour in many ways and I should be committing it across soon anyway.\n. Ah. Thanks for the extra info, Andy.\nI'll take a look.\n. Found and fixed. Thanks for reporting this guys. Was a silly little spurious (re-)throw statement that got left in at some point.\nMy tests for throwing exceptions outside of an exception-anticipating assertion threw it directly - but this bug requires you throw from a function - so I was missing it!\nNeedless to say I've added the function throwing case to my test suite now!\n. (Fixed in Integration, that is)\n. NP. Thanks for letting me know about it\n. It's probably a bug in Catch. The OR feature hasn't had a lot of usage beyond some rudimentary unit tests. I'll see if I can reproduce it with the code you supplied in the next day or so. Thanks for letting me know\n. Wow! Thanks for that.\nI'd seen something like this some time back in a heavily nested hierarchy of SECTIONS (about 18 SECTIONS with four levels of nesting) but I could only reproduce it on a colleague's machine and it went away after a while.\nYou've managed to capture it in its essence. Now I have something to work on.\nIn fact I've got it down to this (essentially the same):\n```\nTEST_CASE(\"CatchSectionInfiniteLoop\")\n{\n    SECTION(\"Outer\")\n        SECTION(\"Inner\")\n            SUCCEED(\"that's not flying - that's failing in style\");\nFAIL(\"to infinity and beyond\");\n\n}\n```\nI shall investigate.\n. This is fixed now (as of build 6)\n. Sorry Clod\u00e9ric, I meant to respond here before.\nI definitely have plans for something like this. In fact I've put together a fairly complete incarnation on my current commercial project (so I can't use that code, but I've seen how well it works) just recently.\nI'm going to be adding a Catch version. soon.\nI don't know if this was a co-ordinated effort but about 20 minutes before your follow-up here there was a post on the Catch Google Group on the same subject. Can I encourage you to pick up there instead (so I can keep this tracker for issues)?\nhttps://groups.google.com/forum/?fromgroups=#!topic/catch-forum/ezkK1t4pzdM\n. The problem is that there is no way to know if an unsigned long (or any other int) has been initialised from a hex literal.\nIn theory I could parse the stringified version of the expression and pull it out that way but that seems a bit extreme (and fragile) for this case.\nUnless you have any other ideas how this could be implemented?\nAt the moment I decide to print as hex if number is above a certain, hard-coded value - currently 8192.\nThat should have resulted in your value being printed as hex, but I suspect it is being deduced as either one of your awkward unsigned long longs or as a signed integer.\n. I could make it customisable. It's one of those things that I'd really prefer to be able to choose a default that is \"good enough\" 95% of the time and leave it at that.\nUnfortunately I think it's more like 70% of the time, which is just annoying enough for it to be an issue but not quite annoying enough to want to add a lot of complexity.\nThe trouble with a macro to control it is it still effects everything. You really want case-by-case control  - but you don't want to have to specify something on a case-by-case basis either.\nIf I did anything it would be to allow the formatting to be specified on the command line - so if you see a result that looks odd you can re-run with the alt formatting (much like the debugger in Visual Studio allows you to toggle between hex/ dec).\nNo perfect solution (that I am aware of) :-(\n. Oddly enough the very first versions of Catch did support multiple reporters.\nIt was causing a lot of out-of-proportion (at the time) complexity and after some thought (and discussion with peers) decided that it was not something that was really useful, so I took it out in the name of simplicity.\nAt this point I think it could be supported with fairly low complexity, so I'm going to look at it again.\nIt might have to wait a bit, though, as I have quite a lot on my queue at the moment.\n. Catch does actually now support multiple reporters. I was probably a bit premature in announcing that.\nTechnically Catch does support multiple reporters - but not in any useful way yet. Or rather it supports them for the purpose of Listeners. As a side effect you can specify multiple reporters, but there is currently no way to specify different locations for them to write to - so they all go either to the console or to the same file. Like I said, not useful.\nIt shouldn't be a huge job to address that but it's just not been high enough priority yet.\nHopefully will get to it at some point.. This is a really old ticket - sorry I never responded the first time around.\nI don't have access to AIX to try this now - but obviously Catch has changed substantially in the intervening years - so I'm going to close this on the basis that, if it's still an issue, someone else will report it again.\nObviously if you're watching this and have any other information feel free to re-open.. I think that's a reasonable suggestion. I've added it (locally - while push later),\nPossibly of interest: In Catch itself I guard against the macros (which may have been added by the user prior to #including Catch) by putting std::max and std::min in parentheses (e.g. (std::max)(1,2) ).\nAlso note that the windows #include is only compiled in when you do #define CATCH_CONFIG_MAIN (or #define CATCH_CONFIG_RUNNER). In other source files you won't have that issue either way.\n. Thanks Martin. Now fixed.\nI'm closing this ticket now as I believe the original issue is resolved (and hopefully the repercussions).\nPlease re-open if there is any more fall-out - or raise a new ticket for related issues.\n. This issue should be resolved following the merge from Integration (see #161)\n. @nanoant yes I'm still iterating that. I'm hoping that we'll end up at a place where there is no reason anyone would want to use that field for the description any more - but in the meantime if you do I'm going to be showing them again.\n@wichert there's a little documentation on the command line usage wrt tags in the reference section on the wiki: https://github.com/philsquared/Catch/wiki/Command-line\nBut actually using them is not written up yet. I'm working on some new docs right now which I intend to be a bit more comprehensive - and they'll be held in the repository so they can be more specific to the version they describe (which is a big limitation of the wiki approach)\n. One 'tags' a test by putting one or more tags within square brackets in the second argument to a test case (ie where the description used to go). E.g.:\nTEST_CASE( \"descriptive name here\", \"[tag1][tag2][tag3]\" ) { /* ... */ }\n. I could but, although I do now use variadic macros, I conditionally enable them. Catch is still used on a number of platforms that don't support them.\ninitialiser lists even more so as, although both are C++11 features, variadic macros have been support as a extension in VC, GCC, Clang and others for some time now.\nReusing the second argument alone allows the greatest compiler compatibility as well as remaining backwards compatible with existing Catch tests (anything outside of square brackets is still considered the description).\n. Hi slowriot,\nSorry for the delay in responding.\nLooks like I need some overloads for c++11 atomics. Thanks for raising this. I'll try to address it soon.\nIn the meantime, as well as the workaround you suggested you could also just place the whole expression in parentheses. e.g.:\nREQUIRE( ( testlockable.readers == 0 ) );\nThis might be a little less noisy. The downside is you don't get the breakdown of the expression when it prints it out (it evaluates to a bool before Catch gets to it).\nEither way I hope to support it natively soon.\n. Hi Wichert,\nActually there is a generic fallback. The problem is that there is no perfect way to detect whether a value has an ostream << overload available. I'm using the most commonly accepted ways of doing it (having experimented with some others).\nAs it happens I added overloads for std::vector back in March, so you should be able to use that now. You are right that adding your own overloads needs to be documented. I've held off during that experimental period as the interface was subject to change. I think it's stable enough at this point. In fact I'm about to push something big out on that front.\nAs for your workaround - you shouldn't need the static_cast<bool> part - just place the expression in parentheses. Did you try that and have an issue with it?\n. Hi Wichert,\nIt's not really mangling the names - it's just line wrapping them.\nIt doesn't use the full width of the console as its allowing room to print tags as well (which you're not using). It probably should adaptively use the whole width if there are no tags - this formatting is still being tweaked.\nBut hopefully that explains what you're seeing. Also, if it has to wrap in the middle of a word (e.g. uuid) it uses a dash to indicate the continuation.\n. Obviously this is a very old issue. I'm not sure when, but it was also a long time ago that I changed the layout in question so it didn't try to fit the tags in a separate column.\nTherefore I'm going to close this issue.. Looks like this was fixed years ago (and even had a test added).\nI'll close this. Please reopen if you feel there is anything else to add.. Thanks guys\n. Thanks @PetterS.\nI'll see if I can sort that out soon. Odd that it is an error, though.\nYou say that's \"the first error\". Are there more?\n. AFAICS neither the C++03 nor the C++11 standard specify throw() for basic_streambuf<>'s destructor.\nHowever it should be safe to use a stricter (and throw() is pretty strict) specification in a derived class, so it should be safe to add (modulo compiler support). I'm adding it in for now and will see how it goes.\nThanks for pointing this out.\n. Interesting. Where do you see noexcept?\nI was looking at 27.6.3 which shows the destructor as:\nvirtual ~basic_streambuf();\nWhat am I missing?\n. @martinmoene are you thinking of:\n17.6.5.12.4\n\"Destructor operations defined in the C++ standard library shall not throw exceptions. Every destructor in the C++ standard library shall behave as if it had a non-throwing exception specification.\" (emphasis mine)\nIt says they shall behave as if it had a non-throwing exception specification. I can find no wording in the standard that says that they are actually declared noexcept.\n. Wait (and, yes, this is going off on a tangent)!\nAre you saying that where it says, \"behaves as if\" it means it implicitly is noexcept?\n. Well. I didn't know that.\nBut hang on 17.6.5.12 specifies, \"Destructor operations defined in the C++ standard library\".\nHow does it affect code outside the std lib?\n. @PureAbstract: \"The stdlib function MUST be noexcept(true).\"\nThat sounds like a much stronger statement than \"shall behave as if it had a non-throwing exception specification\".\nIs the standard just being unnecessarily vague here?\n. Are you sure this is being compiled as C++?\n. Thanks for the bump, @ovaskevich.\nI've not had a chance to look into this further (I don't have access to VS2013 personally at the moment) but I have seen Catch being compiled just fine with VS2013, so I'm a little surprised that @veikkoeeva's minimal example fails.\nLooking again at the errors one of the stands out:\nerror C2014: preprocessor command must start as first nonwhite space\nLooking at the line the generates that I can see is fine. So my suspicion is line endings. I checked in a change to .gitattributes back in October that should force it to convert to local line endings on check-out.\nThat was after @veikkoeeva's report so it may well be the explanation. @veikkoeeva - if you're still watching this - do you still have the same issue?\n@ovaskevich - which build of Catch are you using? Can you provide your list of errors? (Most of the original errors were Intellisense errors, which can usually be ignored and are often just fallout from the actual compiler errors).\n. Thanks @colonelsammy and @veikkoeeva. That does tend to support the theory that the original issue was the line endings.\nI hope @ovaskevich is listening in and can report too?\n. oh - regarding the integration link - oops! I must remove that. Integration got rolled into Master months ago. There is currently no separate Integration branch.\n. Hi @PetterS,\nI've moved this to the forum on Google Groups:\nhttps://groups.google.com/forum/?fromgroups=#!topic/catch-forum/YeP2O1pc6AE\n. The short answer is that it looks like tags are not currently supported when setting up the test specs in code (the extraction of tags takes place in the constructor of the Config object).\nThat's obviously an oversight. I'll add that.\nIn the meantime it should still be possible to do it by hooking in a bit earlier.\nIf you're following the pattern shown in \"Amending the config\" in https://github.com/philsquared/Catch/blob/master/docs/own-main.md then use session.configData() to set the testsOrTags collection. Add your test specs in there and they will be processed, including the tags, when the configData is converted to a Config object.\n. Looks like I never followed up on this to see if it is still an issue.\n@RossBencina do you recall if this ever got sorted for you. I appreciate it was a long time ago.. Thanks for reporting this Bret.\nI believe this is the same issue as reported here: https://github.com/philsquared/Catch/issues/166\nI was meant to be looking into it and got distracted. Thanks for the bump!\n. This is fixed now (as of build 6)\n. I'm not sure I follow all of this. If you want to include your tests in the same project as your application code you can certainly do that. In which case I'd have it conditionally compile all the test code (e.g. within a #ifdef UNITTESTS block) - including the #include \"catch.hpp\" line, and #define CATCH_CONFIG_MAIN. You would then place your \"real\" main() in #ifndef UNITESTS (or #else).\nI'm not quite sure what you mean about the CATCH_CONFIG_DUMMY_MAIN, though?\n. Thanks for doing this, Konstantin.\nIt's a shame I've only just got back to this (been busy on some other things recently).\nI have a reasonably portable Timer class just about ready to go and have already started integrating into the reporting. The Console reporter now (optionally) reports test run times.\nI was going to add it to the JUnit reporter next but decided it needed to be converted to the new reporter API first.\nNow looking at yours I see you went through the same process.\nUnfortunately you've taken a slightly different approach and I'm not sure if I can use it yet. I might have a go at taking your code and migrating it to where I want to go. I don't want your effort to be wasted.\nAt the very least I might borrow some snippets here and there.\n. I've checked in my version now. It uses a CumulativeReporterBase, which plays the same role as your AccumulatingReporterBase, although I've had this on the shelf for a while. It's reassuring that we chose similar names :-)\nAnyway, this version fully supports sections.\nI've also added that Timer class I mentioned before and that's integrated.\nWould appreciate your comments - both on the results and, if you get a chance, the implementation (since you've covered much of the same ground already). If you think I've missed anything please let me know.\n. I think this got closed automatically because I deleted the (now redundant) integration branch.\nIt doesn't mean I'm not interested (as I said too @mloskot just recently - it's on my list to consider).\nCould you, perhaps, raise a new issue with the remaining items of interest?\n. Thanks @Kosta - and thanks for the ping - this had got lost in my inbox.\nI think I've set it all up now (although will need to take a closer look at Travis later).\nI skipped the approvalTests change - I don't believe that was a necessary part of the commit?\n. Good catch - thanks. I was rushing to get it in before I had to jump off the train :-)\nAll updated now.\n. @stefanholek I rewrote the section tracking code. The old code was crufty and a bit too convoluted for something that's pretty central to how Catch works - and it had at least two known serious bugs.\nIn doing so I changed the order that sections are scanned and run as this was a big part of the complexity. Previously I was aiming to run everything the minimum number of times - which is why your second example (nested sections)  ran through in a single execution.\nHowever, as well as adding extra tracking complexity that also led to some inconsistencies as sometimes it would still run have to outer sections and/ or the test case more than once.\nNow it runs each level through entirely, noting nested sections as it goes - then goes back and runs the nested sections in the same way. This is much more uniform, runs consistently (even with errors) and is easier to reason about. Most of the time you won't notice the difference. Obviously instrumenting the tests with printfs or such shows it up. \nDoes this give you any issues or was it purely curiosity?\nOne of my future plans is to suppress output from any assertions that have already successfully passed on the way to running new sections - so this should minimise unnecessary output - but the code will still be executed.\n@wichert I prefer the more natural scoping that nested sections provides, yes. The only thing about it that is different to what you might immediately expect is the way only a single leaf section is executed at a time.\nAs for \"the after option is missing right now\" there are two ways you can achieve this, if you need it:\n1. Use some sort of RAII class that manage any resources that need cleaning up. You can even use a really generic one like ScopeGuard to run arbitrary code on clean-up.\n2. As a last resort (I've only ever had to do this once - under very specialised conditions) you can wrap your code (including nested sections) in a try{ /* ... */ } catch( ... ) { /* clean-up */; throw; } (that's about as close as you can get to try-finally in C++ - but you may have to repeat the clean-up within the try).\nSince (1) is how I generally approach all my C++ code anyway this has not really been a problem for me. But I realise that there are different coding styles. Have you really found this an issue in practice?\nFinally - don't forget you can still do \"tradtional\" style fixture classes - with setup constructors and teardown destructors. Just use TEST_CASE_METHOD.\n. Technically it will increase test time when you're using sections, yes. In practice this should not normally be noticeable - at least for unit tests. If you're using Catch for integration tests and your setup is expensive I can see this might be a bit more annoying - good point.\nI might take another look and see if I can start from what I have now and change it to depth first, again. If I can do so without re-introducing too much extra complexity I'll consider that. Thanks for the prod.\n. Prompted by #552 I had a look through this issue again.\nI can't remember exactly when it went in now, but I did manage to change the behaviour back to the pre-1.0 ordering (and more recently tightened it up even more with another section-tracking overhaul).\nFor anyone still watching this issue who had problems before could you confirm (or otherwise) whether recent versions still have any issues for you?\n. Hi @ruderik1,\nUnfortunately this is unavoidable.\nCatch needs to execute the code in order to discover the sections. When everything passes it comes out of section 3, notices there are no more sections to discover, and so completes.\nBut in the failing case it doesn't know if there were still more sections to discover so it needs to do one more run through to be sure. Possibly in this particular case it could be made to work (if it knows there are no more sections that it has skipped on previous run-throughs) but that doesn't generalise. For example: consider what happens if section 1 throws. It has never even seen section 2, so the only way it can discover it is to run through again, skipping section 1.\n. Since nobody else (other than @ruudsieb) chimed in on this thread in the intervening couple of years I'm going to assume that there are no outstanding issues?\nI'm marking this for closure unless anyone objects in the next few days.. Cool - thanks @bkuhns . \"Would it be a good idea\"\nyes :-)\nI'll try and get around to that soon.\n. IIRC I did fix all those, so I'm closing this.. Good point. In fact I already had CATCH_PLATFORM_WINDOWS, which didn't check WIN32, funnily enough.\nI've updated that and moved it to catch_platform.h - and now use that in the Timer class.\nThanks for pointing it out.\n. All fixed now. Sorry about the delay - was on holiday!\n. Thanks for raising this - and thanks for the bump - I lost track of this after getting back from holiday.\nI'm not sure that moving the whole base template is the right thing to do - since that refers to StringMaker<>, which is not yet defined.\nSo I've just placed a forward declaration before StringMaker<>. Since it wasn't failing for me to begin with could you please give the latest commit a quick try and see if it resolves the issue for you without your patch?\n. Cool. Thanks for letting me know\n. Thanks for all the input, Andy (@PureAbstract).\nMy heart sinks every time 14.7.3/p7 is quoted!\nWhat makes this stuff so fiddly is the rules are so vague and the compilers seem intent on creating a false sense of security.\nI think you are right that StringMaker<> should be the primary entity to override - but that's a recent addition.\nInteresting idea to have a forward decl for the base template.\nI need to think about this more, too.\n. Sorry - I meant to reply to this ages ago!\nIt's been my plan for a while to start tagging and I still intend to. I'll try to up the priority a bit.\nAs for debian/ testing I don't see why not. I see that you've put it in debian/ unstable already! Thanks for that - anything that increases the reach is welcome.\nLet me know if, other than the tagging, there's anything else that you need for that.\nAlso for general discussion the preferred medium is the google group: https://groups.google.com/forum/#!forum/catch-forum\n. Following up - I've now fully committed to Semantic Versioning - and started tagging builds.\n. Thanks,\nLooks like a useful tweak (both of them)\n. Thanks, @vadz. Thanks for this - and sorry I lost track of the previous version!\nI took a look and I think the indent should be applied at the point of use (when specifying the width to the formatter) rather than when capturing the max len (although the effect is the same), so I have applied the alternative fix.\n. First: thanks Adam (@nanoant) for the pull request. I'll have a closer look in due course but sounds in line with my own thoughts on the matter.\nNow, to @wichert (and @Kosta-Github): you're half right ;-)\nI think as an option (as Kosta suggests) it makes sense and has been on my internal list to do for ages (along with being able to manually specify the console width). But as a default it would not interact well with the indentation model.\nThere are also other considerations, such as how listing fits names and tags in columns - and attempts to balance the column size to best fit the information (which is where Adam's original issue arose). Now obviously that approach could be rethought to allow for non-wrapping lines - but it's a consideration nonetheless. It also means there would likely be a different approach to formatting wrapped and unwrapped console text.\nThe real clue is in the \"if I want to process the output of \"list tags\" or \"list tests\" or so by another tool\" comment.\nFreeform text (especially if the formatting is known to subtly - or not so subtly - change) is not ideal for consumption by tools. That's exactly what the xml reporter (or a custom reporter - been thinking of adding a junit reporter too) is for!\nSo the big todo - which I've had since the early days (but, to be honest, it's rarely been asked about in practice) - is to make listing part of the reporter.\nI'll shift this up the priorities a bit - but while you guys are here how much would that mitigate your concerns with the wrapping if it was only in the console reporter?\n. Calm down Craig - we're all friends here :-)\nYou raise a valid point - I should write up some notes for contributors, including line-endings. Andy (@PureAbstract) is right that unix line-endings are the norm in cross-platform projects - although I have to admit I wouldn't have thought of it when I first committed - I just happened to be using a Unix-based OS (Mac OS-X). I shall add it to my list of thing to do.\nI'm very grateful for all contributions - I really want to position Catch as a true O/S project maintained by a community, so pointing out anything that makes that harder is very much on-topic. Be careful not to misread people's tone, though (I'm serious about that - or am I? ;-) ).\n. Thanks for raising this, @colonelsammy.\nAnd thanks for the clarification, @martinmoene (although I think that's what Malcolm was saying at the start).\nI've just tested this myself and it seems to be working correctly (ie case (3) runs both tests).\nISTR that I fixed something with tags a month or two ago - which version are you using?\n. Ah yes. The single-include had been updated - but not by me - it was merged from a branch.\nI just regenerated and it included the tag changes (which, according to the commit message fixes an issue with the comma-separated syntax).\nAnd, yes, I fixed that typo too - thanks ;-)\nLet me know if that fixes the issue for you\n. Phew! That's a relief. Thanks for letting me know\n. Thanks for this. I'd seen this in my day job project and fixed it locally and had it on my list to merge back into the main code-base. I've just taken yours instead, saving me some work :-)\n. Sorry for the delay in responding to this.\nIt's odd that you see so many warnings. I develop with clang (Apple llvm 5.0 now) - which should be at least as strict as gcc (which Catch was originally developed against anyway) and have been quite aggressive at eliminating warnings. I compile with -wEverything with just a couple of warnings disabled.\nCould you give a sample of some of the warnings you see?\n. Thanks for the workaround, Wichert.\nHowever, please don't let that stop you reporting any warnings as I'd really like to get them quashed.\n. It's been a long time, but I believe the __COUNTER__ change should have made this possible (I tried the example out and it works for me now).\nIs anyone still watching this who has a comment?\nI'll close this soon otherwise.\n. Thanks for this - it's something I've been meaning to add for a while.\nThe small obstacle is that __COUNTER__ is a non-standard extension. It's supported by gcc/ clang and msvc - and no doubt some other compilers too - but it's by no means ubiquitous. So I'd need to use it conditionally, based on detection of a compiler that supports it. This complicates things a little (especially since I've already got separate pairs of definitions for most of the macros, predicated on whether a compiler supports variadic macros or not). I'm sure, in this case, the conditional code can be contained to the INTERNAL_CATCH_UNIQUE_NAME definition, so it shouldn't be so bad - but I'd need to have access to a compiler that support it to be sure.\n. Sadly not. Filenames are usually of the form \"Filename.cpp\" - and you can't have the dot in a C++ identifier.\n. I implemented a version of this a while ago on the develop-v2 branch (see #351) and hadn't realised I never got around to merging it into master. I've now done that.\n. Hi Malcolm,\nI put your definition, above, into a text editor right above the one from the Catch code-base and, as far as I can see, they are identical! What am I missing? Which bit is different?\nI do have some self tests for these macros and they all seem to work ok (I just experimented with them to make sure they were using the variadic forms and they are.\nSo, thanks for raising this, but please help me understand what you are raising :-)\n. Good catch - thanks. I've now added these\n. Oh that's a real pain - looks like they strip out my anchors!\nThanks for picking up on this.\nI'm a little reluctant to use the anchors that github generates for two reasons: (1) they are outside my control and (2) the docs should work outside of GitHub too (I view them locally using Marked, a markdown viewer).\nThe best workaround I've thought of so far (not tested) is to name my explicit anchors the same as GitHub's generated names so even though GitHub will strip mine out the ones it generates should still work...\n. Yeah - I immediately did the rest but then ran out of connection to push it - just done so now.\n. Sorry, @colonelsammy, I never did around to this. Was it still relevant at all?. Ha! Yes ReSharper C++ has a test runner that now supports Catch.\nThat's not an option for everyone, though.\nI was more thinking whether its worth still trying to support VS2010 for this - given that later VSs are very different in this regard too.\nWhile there are always plenty of people stuck on older IDEs I doubt it's worth it in this case, given how much was involved - but that's where I was asking if it was still relevant to you. Sounds like not, so I'll leave it be.. @gnzlbg, this seems to be the same issue as https://github.com/philsquared/Catch/issues/219, slightly expanded on.\nI agree that this would be useful functionality. I think there was another mention of this recently somewhere else too (was it you again, @gnzlbg). On that occasion google test was mentioned as being able to handle ASSERTs and I was wondering how they did that without going out of process (I had some ideas) - but now that you mention terminate too I thought I should check.\nSure enough they go out of process!\nI've been planning to add an out-of-proc runner for a while as this has a few nice properties (Catching all sorts of crashes and termination types, but also for when you want to be really sure the tests are run in isolation).\nIt's not trivial to do this portably, but is not rocket science either. I'll up the priority of this a bit but can't promise it imminently.\nThanks for raising this (and @mgeier for post (or was it pre)-incrementing!)\n. I don't know if I'd say a lot - but it's not a five minute feature. I was already tinkering with it (got a basic popen implementation for POSIX platforms) and I've written the Windows versions before (for employers).\nI can't use Boost due to my \"no external dependencies\" policy - which is right at the heart of Catch's identity.\nHowever there's no reason that a Catch implementation can't be influenced by Boost (and GTest) as references.\n. That's a good point, @gnzlbg. I do sometimes fully extract code (slightly tweaked) from boost - or least use it is a reference - and I would probably do that.\nThanks too, @acidtonic, for the offer of testing - that would be very useful. Although I develop on a POSIX based system (Mac OS X) I'm often getting caught out by subtle differences.\n. @zdavisk to immediately answer your question the FAIL() macro does exactly what you're asking for.\nHowever that's addressing the symptom. You really should be able to directly check for nullptr within a REQUIRE(). What happens when you try? What compiler and version are you using (and on what platform)?\n. oh... and perhaps you could raise this as a new issue?\n. Unlike #219, this issue is about testing for a fatal error - then continuing!\nAFAICS that can only be achieved by going out of process (as the earlier parts of the thread discussed). So I think we need to leave this open (or close in favour of a single issue on the matter).. Hi @gnzlbg,\nI was able to reproduce this and on doing so can now see what's going on.\nSome background:\nEvery type (lhs and rhs) of every binary expression passed to a REQUIRE or CHECK must be convertible to a string so it can be reported. Catch::toString() is used as this, first, provides some overloads for some common types (e.g. strings, ints and doubles) and a universal template overload that forwards onto the StringMaker<T> class template to round out with some partial specialisations (pointers, std::vector<T>, etc).\nThe base template for StringMaker<T> tries to find a std::stream<< overload for the type - but uses a form of the IsStreamable idiom to deduce if the overload exists. If it does it uses that, otherwise it converts to the hardcoded string, \"{?}\", so the code should still compile. IsStreamable is not 100% perfect. There are occasionally some types that it gets wrong (I've never managed to quite pin this down). There's even an alternate form, which uses some more advanced SFINAE techniques (IIRC it uses SFINAE expressions, which are C++11 specific) to, theoretically, do a better job - but this is not used by default as so few compilers support it (it can be enabled by defining CATCH_CONFIG_SFINAE). At first I thought this might explain your case, so I tried with that define - but the result is the same.\nSo digging a little further I see that the reversed range type that boost is returning here has a std::ostream<< overload! So Catch is correctly picking that overload and using that. Unfortunately the boost implementation indiscriminately forwards down to the value_type's std::ostream<< overload - which in this case doesn't exist (I assume - you didn't provide an implementation for TestType - but thats how I reproduced it). Since that's in boost code we can no longer prevent it from doing so.\nSo the only ways around this (beyond the workaround you suggested - or putting the whole expression in parentheses) are to provide a std::ostream<< overload for your type - or a Catch::toString() overload for the reversed range type - which is not ideal as it's an internal type.\nSorry that's a bit of a long-winded way to say that there is not much more we can do here.\n(actually, in this, specific, case it would probably make sense to have a Matcher for matching reversed vectors - then we would have control of the formatting too - but Matchers are not ready for prime time yet, I'm afraid).\n. This is pretty old. I'm sure it's no longer relevant to @gnzlbg - but if you're still watching do you recall where my above comments got you at all?\nWe'll close this ticket soon if there's no reason to keep it open.. This is quite old and in the meantime (a) the reports have been heavily refactored and (b) I've introduced CATCH_OVERRIDE to mark virtual overrides as such on supporting compilers.\nThe JUnitReporter uses virtual and CATCH_OVERRIDE throughout. So I believe this can be closed.. Thanks Petter\n. (I think this answers my question in your other issue about platform/ compiler).\nIt looks like your problem here is that you are defining your test cases in header files (this screws up the unique numbering of generated test names as they are based on line numbers, which are relative to the file).\nIs there a particular reason you need to do that?\n. Ah, let me rephrase the question :-)\nIs there any reason you're including your test files rather than compiling them as implementation files?\n. Thanks for letting me know that this solves the issue. I'm closing this one now - I believe you have another ticket for the nullptr problem.\n. Privet @kostyfisik,\nSorry you're having problems with this. From the looks of it this is not specific to the self tests. It appears to be compiling the reporters when it errors out. To verify this could you try a minimal test file. Something like:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\n```\nThat should be enough to compile all the Catch infrastructure code and give you a complete executable (albeit one that doesn't do much). If that compiles ok then there's something weirder going on with your failing case.\nNonetheless, my reading of the error messages suggests that it's expecting an operator== to be implemented on the Ptr<> template. It should be generating that, so it shouldn't be necessary - but it might be worth adding one to see if that fixes it. I'd be surprised if GCC 4.4 is behaving differently here, though, so I'm a little stumped (needless to say this all works for me, using Clang (Apple LLVM 5) and VC++9 & 10).\n. @kostyfisik - sorry I didn't respond to your last message. Catch certainly should support GCC 4.7 (and 4.4.7).\nI'm still not sure what's going on here (especially given @herve3527's comment that added operator == to Ptr didn't fix it).\nI don't have gcc 4.7 or 4.4.7 installed to try this out (getting more compilers/ platforms installed locally to aid with this sort of thing is high on my todo list, but that doesn't help right now).\nIn the meantime if you, or anyone else, wants to investigate further and identify what the root cause is I'd be happy to accept a pull request, or otherwise apply any reasonable changes to Master).\n. @herve3527 excellent work - thanks for that!\nI'm still not quite sure what's going on (if ADL for operators is not working then we have bigger problems - but perhaps there is some nuance here). But if your alternatives address the problem then I'm happy to adopt them.\nIn which case I think I prefer your first option (the function object). If you send me a PR I'll take it.\nThanks again.\n. I just noticed your follow up comment about #196.\nInteresting that that was closed because \"the issue is fixed in branch Integration\". Which has me a little confused as that was three months ago - yet I folded integration into Master about six months ago!\nI'm wondering whether @phresnel was looking at an old integration branch (i.e. before the problem existed).\nEither way it looks like that fix never made it in (I did not spot the discrepancy before) so would still welcome a new PR.\n. Thanks for re-opening, @phresnel. However I still couldn't do a proper merge as the code had changed too much in the interim - so I manually re-applied the changes.\nCould you (and @herve3527 - and, ideally, @kostyfisik) please check build 20 and verify that this addresses your issues?\nThanks!\n. Ah, lol. Sorry about that. That \"error\" is coming from:\n```\nTEST_CASE( \"Sends stuff to stdout and stderr\", \"\" )\n{\n    std::cout << \"Some information\" << std::endl;\nstd::cerr << \"An error\" << std::endl;\n\n}\n```\ni.e. it's just a string being sent to stderr. It's a bit misleading. I've changed the string now to (hopefully) be more obvious (not yet committed).\nSo it seems it's all working for you now. That's a relief! Thanks all round, guys.\n. Not at all! It was a completely non-rational repeated dropping off my immediate list then getting forgotten!\nThanks for the bump (again!).\nI've now added this.\n. @Polytonic:\n- your \"none of them seem to work\" comment has been crossed out. Is that because your issue went away? Is it all working for you correctly?\n- wrt the \"unknown pragmas\": this seems to be a case of \"damned if you do damned if you don't\" :-( I add those in to try and clean up warnings under Clang 5.1. I'll have to see if I can limit them to the specific version of Clang that introduced them - what a pain! Thanks for pointing it out, though.\n. Thanks for raising this, @enkore. That was sloppy of me.\nYour fix seems reasonable, however I wonder whether that might still give warnings on some platforms (the if body is still empty - just now enclosed in braces). In other places I've used Catch::isTrue() to keep the compiler happy when it would otherwise complain about dead code paths, and that seems to work here too, so I've changed the catch-all line to:\n```\nifndef CATCH_BREAK_INTO_DEBUGGER\ndefine CATCH_BREAK_INTO_DEBUGGER() Catch::isTrue( true );\nendif\n```\nNow, onto @godlygeek and @jbrwilkinson's suggestions: I'd be very happy to have gcc specific versions in there - as long as they can be suitably protected by conditional macros. If you'd like to propose any code for that I'd be grateful.\nAs for abort() being the last option I'm not sure. I can see why that would be nice on platforms where that would give you a chance to attach a debugger - but in the cases where it doesn't it would be annoying if the process just dies. I also suspect that most platforms where it does invoke the debugger would already be covered by one of the other options (at least if we get one of those *nix solutions in).\nSo I'm leaning more towards just disabling the option in the first place on those platforms. Thoughts?\n. Actually it is (mostly). That is, if there isn't an implementation for CATCH_BREAK_INTO_DEBUGGER for your platform already you can #define it yourself before #includeing Catch and, because of the #ifdefs, it will use your definition.\n. I'm not seeing any args being automatically added - are you sure you've not specified that in your scheme?\nAs for it parsing into -NSDo and finding -o I was able to reproduce that by explicitly passing -NSDocumentRevisionsDebugMode. I'll have a look into that one. Thanks.\n. Re: \"project that is an OS X Cocoa app that uses documents\" etc - fair enough.\nI've looked into this a bit more and I can see what the problem is now. Unfortunately it's working pretty much as designed!\nThe command line syntax that Catch follows treats \"-\" prefixed strings as single-character short options. A string of characters is interpreted a sequence of single short options (e.g. -eb is the same as -e -b).\nSo -NSDocumentRevisionsDebugMode is being interpreted as -N, -S, -D, -o etc.\nNow the underlying issue is probably obfuscated a bit by something I can change. Unrecognised options are stored until the end of the parse (as what to do with them is decided externally). So the N, S and D are skipped over for now. Then it comes to -o, which it recognises as a Catch option (for specifying the output filename). But -o then expects an argument - which will be the next command line argument that doesn't begin with - (in my case it says there is no argument - perhaps in your case it's finding something else).\nSo:\n1. Catch cannot handle being passed -NSDocumentRevisionsDebugMode. If there's no way, in general, to avoid being passed it (assuming your workaround is not satisfactory), then all I can suggest is to write your own main() and filter it out before passing on to Catch (I can give more info on how to do that if you like).\n2. I'll see if I can make some changes so the error you get is actually that it doesn't recognise -N, which might make it more obvious what's happening. It doesn't help your immediate situation but it might help the next person.\n. I've committed build 22 which has the changes I proposed in (2), above\n. That's a good suggestion - and, now you mention it, I think I've seen similar in other libraries\n. ... and was only a one line change - I've now committed it as build 23\n. Thanks @Kosta-Github. However I'd somehow missed @sjmills last comment until now.\n- are you still having issues there?\n  What sort of changes did you have to make (sorry, I know it was a while ago now).\n. Thanks @sjmills.\nIf you come across C++11 issues again please raise another ticket.\n. @SebDyn, I've applied @herve3527's fix from #226 into Master. Could you please confirm that this addresses your issue - at your leisure - and close this ticket if it does (and, of course, report back if not).\n. Yeah, that's a bit sloppy.\nI've changed that code to always do something if sysctl returns 0. That should address your warning without the need for any more #ifdefs.\nPlease check build 25 when you get a chance.\n. Thanks for taking the time to report back, Seb\n. Please see build 2 on the develop branch, now\n. The short, and late, answer is: yes :-)\n. Great observation. It certainly makes sense to call onto toString( double ).\nIIRC toString(double) was only fairly recently updated to give a more custom serialisation. Looks like I just didn't think to update Approx to make use of it.\nSo I've made the change and committed that. Thanks for the tip.\n. I checked in a reworking of how the ArgBinders work a while back - which avoids the work in the destructor (was never entirely happy with that),\nThat should address your issue - let me know if I can close this now?\n. I've had in mind for a while the ability to add tags to sections - so you can just use the [hide] tag (or [.]).\nIn the meantime a hacky workaround is just to return from the top of the section. That would have the advantage of showing a warning about a section with no assertions too - to remind you that the test is in there but not running anything.\n. Actually tags still only apply to TEST_CASEs, and this issue relates to SECTIONs - so I believe it is still relevant (and my previous comments still hold).. Thanks for raising this.\nMy hosting vendor had an outage and had to migrate to a new server on a new IP (not quite sure why they couldn't reuse the IP). I've updated the DNS entries but it will take a while to propagate (and I've probably still got it wrong!).\nHopefully will be back up in the next day or so.\n. Ah! Sorry. I just committed similar fixes (thanks to direct email from @martinmoene).\nThose fixes were for the missing #includes, which fix the Travis build.\nYour request included some vcxproj changes too - what were they for?\nI'll add the private operator= (yes, I wish I could use the deleted form too).\n. Oh right, duh! :-)\n. You mean the tabs are not being shown as \\t or something?\n. Sorry for dropping this for a while - I was in conference mode!\nI think showing tabs and newlines (and potentially other \"invisibles\") is a useful feature (which I've occasionally wanted myself).\nSo I've now added a -i option which, when used, converts tabs and newlines to \\t and \\n respectively (could add others later).\nLet me know what you think (build 40).\n. Good question. I need to document this properly.\nIf you follow the pattern in https://github.com/philsquared/Catch/blob/master/docs/own-main.md in the section \"Amending the config\", just before the return statement write:\nsession.Config().useStream( \"debug\" );\n(That's OTTOMH, I'm not in a postion to test that at the moment, or have access to code that does it, but I'm fairly sure that's it - let me know if it does't work).\n. I did originally have that as the default behaviour but there were some issues in some circumstances that I didn't have a chance to get to the bottom of (possibly on a platform I don't have access to). I forget the details now - I should look it up.\n. @Kosta-Github is exactly right. Catch fully supports writing your own main so you can add global set-up and tear-down code naturally. It's very simple to do and is well described here:\nhttps://github.com/philsquared/Catch/blob/master/docs/own-main.md\n. Ah, the normal test cases can go anywhere. But the setup code is not really a test case, if that's what you mean?\n. OIC, sorry. Yes the test cases always go at namespace/ global scope.\n. Thanks guys. I didn't know that about print. I just checked and all my scripts are using the keyword form. I'll update them.\nI currently have the generate script on the operating table, though, as I'm completely reworking it to take account of the new extractable micro-library support I'm adding (so Clara, initially, can also be a standalone library).\nI might have to pause that work, though, as I have a couple of conference deadlines coming up!\n. Hi Kosta,\nThere's a few things in there.\n1. I do have some long term plans around thread safety. They're tricky due to the combination of my requirements for no external dependencies and relying on C++98 only.\n2. Getting the reporters to work is one thing, and kudos for getting a thread-safe JUnit reporter working. However there is other shared mutable state that will be just waiting for a clash, so I fear you're living on borrowed time there.\n3. I have used Catch to test heavily threaded code. There's a simple workaround that can be made to work for a lot of cases (with a little effort). The basic principle is to simply wait until you're back on one thread (typically after a join) before you start asserting. If that doesn't drop out naturally (and I have a couple of cases where it doesn't) I've added extra code in my test to record the results of certain checks, then stuff it all in an INFO after the join and do a single assert on the whole result.\n4. I'm not sure if I like the idea of overriding the existing reporter names with new behaviours. Is there a compelling reason to prefer that over a distinct name? If I did add support I would prefer to make it explicit when you register. There could also be evaluation order issues, since the registration relies on global initialiser instances.\n. @ned14 could you elaborate on the \"[tls] is profoundly broken on clang on OS X and FreeBSD right now\"?\n. Thanks Niall. That's a shame.\nMy intention was to use c++11 features (conditionally). I really didn't want to provide a whole platform abstraction over threads. Just TLS on Posix might be doable - or at least falling back to locking on every assertion (which is not ideal, I know, but at least gets Catch in the game).\nI might also be able to do it using atomics.\n. ... of course if I finished my persistent hash-trie project I might be able to use that too ;-)\n. I have made a start on a local branch, but it's been on hold for a while (too many balls in the air at the moment).\nDefinitely not lost, though.\n. Hi,\nIt's been a while - this dropped off my radar for a bit - bit since the discussion picked up again recently in #359 (albeit for different reasons) I finally took a closer look at this.\nI think I may very well adopt your proposal now - (not sure when it will actually make it in, though). Thanks for bringing it up here, @tclamb \nAs for the -Wparentheses warning, @Morwenn  - I don't seem to get it for <= - but I do for <<, funnily enough.\nI'm not sure what's different between mine and yours is. Both the code-base and the compiler have moved on since this was originally raised - so maybe that's it?\n. TEST_CASEs take their string arguments as const char*, so the casts are unnecessary (they would take std::string const& but I found that added to compile time overhead on GCC for some reason).\nAs for the actual question: this would be the ideal case for generators (which generate a test case for each piece of data in a range) but unfortunately they're not ready yet - and, in particular, are not yet compatible with SECTIONs (for essentially the same reasons you're seeing here).\nThat doesn't sound very useful - other than that this is a use case that has been thought of - and it will be made to work at some point.\nIn the meantime the workaround is to just not use SECTIONs, as @Kosta-Github proposes. If you use SCOPED_CAPTURE your captured variables will get reset at the end of the scope.\nYou could also write it as a more traditional fixture class to setup and hold the test data, then register test case methods (using TEST_CASE_METHOD( class, name [, tags] )). You'd still need the loops inside the test cases but at least you'd get the same level of isolation as your very with SECTIONs would have given you.\nHope this helps.\n. Ha! SCOPED_CAPTURE is documented (https://github.com/philsquared/Catch/blob/master/docs/logging.md#deprecated-macros) but I should have read the docs myself. I forgot I deprecated SCOPED_CAPTURE a while back in favour of making CAPTURE scoped anyway. So in practice they will both work - but use CAPTURE\n. Bet you thought I'd forgotten about this one?\nWell - I did for a while, while I was in conference deadline mode!\nBut I've gone back and addressed the endian issue now (hopefully in a portable way).\n. Good catch, thanks (it was actually at least six months ago that I folded Integration back into Master)!\nI've updated the page now.\n. Thanks for that\n. Sorry about that. I know what the problem is - and I've committed what should be a fix for it. However it wasn't failing with clang either and that's all I have to hand at the moment so I can't verify that my fix worked (other than that it didn't break anything with clang).\nIf you get a chance to try it first please let me know if it fixes it for you.\n. VS2010 == \"oldish MS Compiler\"?\nI've just managed to drag our team at work onto VS2010! :-(\nAnyway, despite that, I was able to try Clara out in VS2010 and was able to get all the way to the sixth stage of debugging.\nShould be fixed now.\n. Ah yes, good old @jalf. I hadn't seen that post, tho - thanks for bringing it up\n. Do you still have an unresolved symbol issue? I believe that was related to a short term bug I introduced and fixed a while back. Sorry I missed this ticket at the time.\n. Thanks @Fraser999. Yeah - I have a number of main-less test clients, so no worries there.\n. @colonelsammy is correct with his workaround (thanks Malcolm).\nHowever I have to ask why you need to include cpp files in this way? I'm presuming it's to optimise build times - the so-called Unity Build? (I've used this technique in the past). If you really can't avoid it then @colonelsammy's suggestion works - but I've usually found there are better ways (most recently by judicious use of precompiled headers and parallel builds).\n. Ah no problem. Glad you got it all sorted\n. Thanks guys. Thought I'd merged this one a while back!\n. glad to see you're all merged back too ;-)\n. Are you including catch.hpp within the precompiled header? That almost certainly won't work as some parts of the file are conditionally compiled if CATCH_CONFIG_MAIN or CATCH_CONFIG_RUNNER are #defined.\nIf that's what's happening (and it looks like it from the error messages you posted) I suggest you just remove catch.hpp from the pch and #include it normally.\nIf that's not what's happening then I'm not sure what's going on (I use Catch in the presence of pchs all the time). It may be that Catch is being included by something else that's in a pch - so the inclusion may not be obvious?\n. Damn. Yes it was only doing it correctly with CATCH_CONFIG_MAIN. I've checked in a fix for the CATCH_CONFIG_RUNNER case - which I've verified as best I can - but I've been unable to reproduce the original problem in either Clang or VS2010. I've not been able to try it with VS2013, but it sounds like it is stricter with extern.\nPlease let me know if this addresses the issue fully for you.\n. @cseed - the direct to answer to your question of \"is there a best practice for accessing private members in test cases?\" is this:\nDon't.\nAt least in my opinion. Usually.\nTests should only be testing the observable behaviour. Private members are there to form part of the implementation of the behaviour - not its semantics.\nThat said there are some cases where it seems desirable. Off the top of my head:\n1. Testing legacy code. If you need to do this before you can get to the point of cleaning things up properly then #define private public is usually the weapon of choice. See Michael Feather's \"Working With Legacy Code'.\n2. A part of the class you are working on has internal invariants that you want to want to verify. These are perhaps better tested with normal asserts in the code itself - but it may also indicate that you have another class hiding within the class under test. Separate that class out and maybe test it in isolation (in terms of its now public interface) - but when used as part of the implementation of the original class you do not need to test it.\n3. You're just getting carried away and wanting to test everything. Think about the reasons for change that your codebase has. If a requirement changes then you'd expect the tests to fail (and you should probably change them to fail before changing the code to fix them, if you can). If implementation changes - as part of a refactoring, say - but meets the same external specification then your tests really shouldn't break. If they do they are probably testing implementation, not requirements. You might sometimes end up in that situation if you're TDDing as you grow small units into more useful components. In which case you are left with some \"scaffolding tests\" which should probably come down now.\n4. Some actual requirements are hard or impossible to test in terms of the public interface. Things like, \"should cache this value\", specifically don't impact the externally observable state/ behaviour. Testing them is, strictly speaking, outside the realm of unit testing - but that doesn't mean they shouldn't be tested. I take these on a case-by-case basis. Sometimes I can construct contexts in which they can be detected (like changing an underlying source so cached values are out of sync). Sometimes I just verify manually (gasp!). Sometimes I do provide a backdoor for testing - but that's pretty rare.\nSo, in short, I mostly agree with @PureAbstract.\n. In a bizarre twist of fate I have just been bitten by #define public private!\nIt's in a set of tests testing some legacy code. The tests were added years ago but needed to reach into one of the objects to inspect some internal state. The object is implemented in a DLL (this is Windows).\nAnyway, I just added another header file to the test file and it started giving linker errors.\nMuch head-scratching later I discovered that the accessibility of the exported functions was impacting their mangled names so the linker wasn't matching them up!\nI think this is the the flip-side of ODR (the problem was multiple definitions mapping to the same implementation, rather than vice-versa). Either way nasty stuff.\nTo my shame I've fixed it to move the header file around for now (and added a comment!). But I do need to go back and address that properly. It's really not a good situation to be in!\n. Thanks for that\n. I was dreading having to do all that - thanks! :-)\n. You're absolutely right - thanks for that. All fixed now.\n. Thanks @dimaga. Good Catch. I've not seen that in my own leak detection - presumably because branchName has been fitting in the Small Object Optimisation buffer in the string implementations I've been using.\nThe change seems simple enough and reasonable so I've applied that now (build 37).\nThanks again.\n. Thanks Oleksandr,\nHowever I hope you're not actually using that runner (it was really just a spike - I should probably take it out of the repos until it's been made into something more useful).\n. Ouch! How did that one lurk unnoticed for so long?\nThanks for finding (and reporting) this!\nFortunately a nice quick & easy fix once the bug is pointed out.\nHowever I think CHECK should also abort if an exception is thrown. The exception was unexpected and so should be treated no differently to an exception thrown outside of an assert.\nI've committed the fix for that too.\n. Glad we're on the same page :-)\n. That's weird.\nThere was an endlessly looping bug (although, IIRC, that involved nested sections) - which was fixed over a year ago. I've not seen anything similar since. Which version of Catch are you using?\nAre you able to substitute TCACAVAUtilities::CreateColorFromRGB with something simple so you can provide a complete self-contained example (i.e. something I can run here)? - it looks like you should be able to.\nI tried this:\nnamespace TCACAVAUtilities {\n    inline int CreateColorFromRGB( int r, int g, int b ) {\n        return r + ( g << 8 ) + ( b << 16 );\n    }\n}\nbut wasn't able to reproduce your issue.\n. Hi @dsamek,\nSorry  I missed your response for some reason.\nOdd that you get the same behaviour even with my cut down version.\nYou didn't say what the version of Catch was?\nI originally tried it on my Mac - but I've now tried the same test code on a Windows machine too, with both VS2008 and VS2010. Same result in each case.\nWhich leads me to suspect there is something to do with the \"Rade developing tool\" - which, I'm afraid, I know nothing about.\nIf you knock up a minimal test app using pure VS2008 - do you still get the same result?\n. Thanks @gahr. That's very odd. What compiler/ platform are you using?\nI just tried your minimal repro code (thanks for that) in clang (Apple LLVM 5.1) on OS X, VS2008 and VS2010 on Windows.\nIn all cases everything behaved just fine (no looping).\n. Thanks guys - I'll have another look shortly\n. Sorry - only just got back to this!\n@stalepancakes: \"It only happens for me when exception handling is disabled\"\n- that sounds like the cause then - at least for you. Catch relies on the exception mechanism! You will not be able to use it without exceptions enabled.\n@dsamek, @gahr and @matalangilbert - do you have exceptions enabled?\n. Thanks for the responses. So sounds like it's not due to lack of exceptions support in your cases.\n@dsamek, if you've not set anything specifically you should get exception support by default. But, yes, it's controlled through /EHsc\n. Guys, if you're having the issues mentioned here with Sections (note the originally posted issue did not involve Sections) then please try the latest build (build 51, a time of writing). I've fixed an issue where if copy-constructors where not elided it would screw up Section handling. I don't know if that's what's going on in your cases or not, but it's in the ballpark so thought I'd mention it.\n. @dsamek have you tried the approach here:\nhttp://www-01.ibm.com/support/docview.wss?uid=swg1HD72439\n. Thanks for the additional info, @AlexisWilke. Interesting that it seems to be a clang thing as I use clang  on Mac OS X and have never seen the issue. I can't see why something like this would be platform dependent - but the Mac version is Apple's own fork, so it could be that.\nI need to look into this more, again. I'm not against putting in a conditional workaround for clang, if we can find one general enough.\nI'm not really getting any time to look at Catch at the moment, as I have a couple of big things going on. I'm hoping to be back on it in a couple of weeks.\n. For anyone still watching this issue - I've committed some changes (on Develop) that may address it. Please let me know either way if you try it.\n. Thanks for letting me know, @joto.\nAnyone else?\n. Doing some clean-up. I know it's been a while, so I don't know if the original posters are still watching, or interested - but it would be nice to be able to close this.\n@dsamek, @kirbyfan64, @AlexisWilke, @matalangilbert (sorry if this is a blast from the past)?. Thanks for bringing this up @dimaga.\nI've put something very similar to your proposal into practice. Let me know if this resolves it all for you.\n. This should be sorted now. Let me know if it's still an issue for you\n. In the absence of any objections to this being fixed I'm going to close this issue now. Re-open if you know any different.\n. Should be sorted now - let me know if you still see anything awry\n. This should be sorted now - let me know if you still have any issues with it\n. Hi Dodzi,\nIt's a good question. I had this before 1.0 but, closed it off until I had a chance to put a bit more process around it (mostly automated testing on multiple platforms). I've been looking more at doing this again recently so hope to have something setup again soon.\nSorry I broke you yesterday - did my fixes sort you out again, or do you still have issues?\n. \"Sorry, for doubling the issue.\"\n- not at all - the more people raise the issue the more seriously I'm likely to take it ;-)\nAs for checking the status programatically - I don't know of any way. And I'm sure how much it would help anyway since the Travis status is not instant.\nI'm actively working on beefing up the release process at the moment.\n. There is now a separate develop branch\n. Well that's weird.\nI did move the toString() impls a bit in either build 40 or 41 (they were inline but now the impl part - the bit you found at line 7165 - is only compiled in to the source file that #defines CATCH_CONFIG_MAIN or CATCH_CONFIG_RUNNER). The prototype is at line 844.\nBut I just checked (again) in my OC test project and it all seems to work fine. I even tried your example, to see if there was anything specific about it. A couple of things I noted there:\n1. You wrote CATCH for the assertion. I presume you meant CHECK?\n2. Because of the interplay between ARC and templates I can't compare the NSString directly against nil - I have to cast the nil to an NSString* - so my test was actually like this:\nNSString *string = @\"not null\";\nCHECK((NSString*)nil != string);\nBut that all builds fine.\nI'll take another look tomorrow. If you're able to boil it down to the minimal complete example that fails that might help too. Thanks!\n. Interesting - I wonder if it is an ARC thing? I don't remember the details - would have to play with it again - but presumably I needed that const in there.\nI'd been toying with the idea of taking the MRC support out at this point - I wasn't sure if anyone was using it!\nI'm not going to get a chance to look at this in more depth again until at least the end of this week. I hope you're workaround is ok to get you going for now?\n. Yeah - don't worry - I'm not going to remove MRC support. I'll have a look again (probably next week) at that reference. It certainly used to work without ARC - but not tried it for quite a while. Will try again with 5.1.1\n. Hi @bdb,\nSorry for the delay getting back - was pretty tied up last week.\nI've now tried your complete example, exactly as you wrote (thanks for providing that). I also disabled ARC.\nIt still compiles - and runs - just fine for me!\nWe're both using Xcode 5.1.1. I presume you're using LLVM 5.1?\nI tried it form both Mac and iOS targets.\nI can't think what else might be different (unless you're using GCC?).\n. Glad to see you're still watching, @bdb - but sorry to hear you're still having problems (or having them again).\nI very much doubt anything relevant has changed between 1.5.7 and 1.6.0 - although it's always worth getting confirmation.\nI'll try this again myself. I know I wasn't able to reproduce it before, but it looks like since I was last looking at this you posted your compiler flags, so I'll see if using those makes the difference.. Hi @VictorEijkhout,\n\"\"exclude:[mytag]\" has no effect\"\nI just checked and you're absolutely right. I have test cases for exclude:<test name> and ~[<tag>] but guess what I'm missing a test for for?\nI've just added some and can see the problem. Will fix that.\nIn the meantime using ~ instead of exclude: does work - so you may want to use that (I prefer that syntax anyway and use it all the time, which is why I missed exclude: rotting!).\nYou're right about the documentation, too. I'll give that another pass over.\n. The issue with exclude: should be fixed now (with more functionality unlocked in the process!).\nI actually completely rewrote the name and tag parsing logic. The old stuff was hacked together and should have been replaced a long time ago. Much clearer now, does more, and saved about 300 LOC - usually a good sign :-)\nI'll have a look at the docs (the new logic should also be easier to reason about).\n. I'm not going to have a chance to look at this for a few days - so, for now, I've removed those #pragmas. I added them as part of an attempt to stem the flood of warnings introduced with -WEverything after adding some conditionally compiled C++11 code. I may need to find a different way to do that anyway.\n. If you have any ideas, btw, please let me know!\n. They don't seem to have short names, no - but using the full strings did seem to work in Xcode with LLVM 5.1\n\nJust don't use C++11 specifics in 98 mode\n\nSadly it's not quite as simple as that. I'm compiling for C++11, but with -WEverything. That seems to warn about C++98 compatibility, despite the C++11 target. The most frustrating part is that the sections that are C++11 are conditionally compiled only for C++11 compilers (that is, those that support the specific features being used) - but without them a C++11 compiler warns about deprecated C++98 constructs!\nAs I said, \"damned if you do, damned if you don't\".\nSo for now I've removed those #pragmas on the basis that you'll only get the warnings if you build with a C++11 compiler and -WEverything. I'm definitely open to other suggestions, though.\n. Hmmm. I already had that.\nBut you got me looking again and now I see that the warnings where coming from inclusion paths that didn't have that #pragma set.\nA little refactoring and all the warnings are gone!\nAhhh - peace at last - thanks Andy :-)\n. @bdb, @Polytonic et al: Is this all clear for you now?\n. @Polytonic - thanks\n@PureAbstract - and almost certainly the last - don't get used to it :-p\n. @SebDyn:\nAh it doesn't like the unnamed union. I'll change that.\nWRT the test environment suggestions: yeah - I'm painfully aware of the deficiencies and have been trying to find the time to set up something more comprehensive. It's slow going but it's in progress.\n@PureAbstract:\n\"seems to me that the best way to do this memory dump is to actually dump the contents of the argument\"\nYou mean just do a reinterpret_cast? I think that was my original approach but I changed it to use the union. I don't remember why, off-hand, but it may have been to do with warnings on some platforms - or possibly to avoid alignment issues (although I can't see that there would be any here).\nIn any case I'm not sure that it's really better that way. Did you have any more nuanced thoughts on the matter?\n. Yeah, that does seem better. I didn't think to go via a void* function. That also has the advantage that I can shift the body out of the header (I know it's all headers - but into the part that's only included once).\nI've adopted that approach now (will check in later) - thanks!\n. Ha! Freudian slip ;-) Thanks\n. Thanks!\n. Thanks\n. Good idea. It didn't really occur to me to go all SEO on the description field. Thanks!\nI've made it, \"A modern, C++-native, header-only, framework for unit-tests, TDD and BDD\"\n. I doubt my change has had any impact already (need to wait for crawlers) but I just did a DuckDuckGo search, with Safari set to Private Browsing, for \"github C++ Test Framework\" and Catch was the top hit (actually it was the second hit - after an Objective-C framework, which was weird). That seems surprisingly good - so it must still be filter bubbling me somehow :-s\nWhat searches where you trying - and with what results?\n. Thanks.\nLooks like GitHub search penalises it because it doesn't have the word \"unit\" or \"test\" in the name!\nActually I didn't even like putting \"unit-test\" in the description, because I don't want it to seem limited to unit testing - but I did as a pragmatic trade-off and your search terms have borne that out.\nNice that it has the most stars! (second in the list - but the first is that same Objective-C framework)\n. Is that just a sneaky way of trying to keyword snipe the other framework names? ;-)\n. Good call. Should be able to add the suffix in - I think that's probably worthwhile regardless.\nBut ideally the comparison would work the same way it does if you write the expression in \"normal\" code.\nThis is analogous to an issue I had with the way int literals depend on what they are being compared against and I have some template infrastructure to deal with it. Let me see if I can use that.\nThanks for bringing it up.\n(p.s. you can get a more fuzzy comparison of floating point numbers by wrapping the RHS in Approx, e.g.:\nREQUIRE( a == Approx( 0.4 ) );\n)\n. The f suffix for floats has been in since build 51. Does this address your concern, @bdesham?\n. Argh! Sorry! I forgot to put std::max in parentheses! I'll fix that.\nIn the meantime if you make it (std::max) instead (without the explicit type) does that fix it for you too?\n. Ouch! Good catch - thanks! Very bad on my part.\nSECTIONs were implemented using something like:\nif( Catch::Section s = Catch::Section( name, description ) ) { ... }\nWhere the Section class can be evaluated in a boolean context.\nBut Section's whole purpose is to have side-effects in the constructor and destructor.\n99% of the time it all works fine due to copy-constructor elision. But, as you discovered, if you disable copy-elision the extra calls mess things up completely!\nThis was a bit tricky to workaround. I've ended up with something like:\nif( Catch::Section const& s = Catch::SectionInfo( name, description ) ) { ... }\nWhich seems to work in the versions of Clang and MSVC that I have. I did read somewhere that the const-ref-to-temporary trick may require copy constructibility too, but I'm not clear on that. I've made sure Section is not copyable. Will see if anyone hits that in practice. If so I may need to move the declaration out of the if statement (which will clutter up the scopes - although the actual names are far more unique and obfuscated than s ;-) ).\n. Did this fix the problem for you, @danvari?\n. Cool. Thanks for letting me know\n. \"is there a better alternative?\"\n- don't use fixture classes? :-)\nBut adding SCENARIO_METHOD is probably the right thing to do. Thanks.\n. Closing this as I merged the PR (thanks for that)\n. You could post the files as gists\n. When you say, \"Catch complains about something being redefined\" do you mean at runtime?\nEither way what is the exact message?\nIf at runtime the most likely explanation is that your have more than one test case with the same name (but the message should tell you that explicitly).\nSo I'm guessing you mean at compile time (in which case what is the compiler error?)\n. Are the two files header files that are being included into one other file?\n. (reposting here in case you missed it on the gist):\nHere's the issue:\ninclude \"u.cxx\" (in us.cxx:34)\nYou're #including one file with test cases into another file that also has test cases. The functions that back the test cases have names that are generated by using the line number. The symbols are local to the translation unit (because they are in an anonymous namespace). But when you #include another file the line number is local to the included file - and so no longer unique (which is in line with your suspicion).\nThe solution is to make the two files with test cases independent - perhaps #including another file with common code (e.g. the unittest_mpi_setup())\n. Hi Victor,\nDid this address your issue?\n. Cool - thanks for letting me know\n. Thanks Martin. I was going to post the same thing.\nIt's on my list to try and fold some (or all) of Malcolm's work back into the main branch - I just haven't had access to Visual Studio for long enough stretches to get to it yet.\n. Short answer: yes.\nSlightly longer answer: No guarantees as to when, at this time.\n. Sorry, didn't get to this before. Some thoughts:\n1. Note that the file that has CATCH_CONFIG_MAIN or CATCH_CONFIG_RUNNER expands #include \"catch.hpp\" differently to the others. This is because those identifiers cause it to conditionally compile all the implementation code (i.e. the code you'd normally put in cpp files). That probably explains your initial linker error\n2. I'm not sure how you got away with it with CATCH_CONFIG_RUNNER since, although it doesn't generate a main() that way it will be generating other implementation code. I think the proper solution would be to disable pch for the file that defines the CATCH_CONFIG_??? identifier.\n3. I'm not sure why you're optimising the compile time of main.cpp - are you including test code in there or is it dedicated to the catch inclusion?\n. Ah! Glad you got there. I was going to point you at this page:\nhttps://github.com/philsquared/Catch/blob/master/docs/slow-compiles.md\nbut I was in the middle of updating it (to make it a bit clearer).\n. Thanks Bena! Not sure how they have been missing for so long but all in now :-)\n. what platform/ compiler are you using?\nFor me (OS X/ Xcode 5.1.1/ LLVM 5.1 as well as Windows XP/ VS2010) it correctly reports the duplicate definition (at runtime), including the file and line number of each case - then terminates (exit(1)).\nAlso do you see the same behaviour with a duplicate TEST_CASE or is it only TEST_CASE_METHOD that gives you this issue?\n. Ha! Yes I've reached a similar conclusion in the past, too.\nEvery now and then I think about it again, though.\n. thacks for that. ot sure what happeed to the letter\n. Thanks for this. I've manually applied the change to the new develop branch and it will get committed in the near future.\n. Damn! I didn't follow the link!\nYes, that looks pretty clr specific.\nI think I'll back that change out.\n@alex85k - if you have more information in this regard let me know and I'll look at it again - but on the strength of that link it doesn't look like the right thing to do.\n. Thanks for that @alex85k.\nI've actually already added the VS2010 one (as I use that regularly myself so was easy to test).\nI'd rather hold off on previous versions - especially the /clr ones as I think that's fairly specialised and I'm not sure at this point whether they are even the same thing (I know nullptr in C++/CLI is meant to interop with .Net's null).\n. This ticket is very old (sorry I didn't respond originally). Catch has changed substantially since then - especially wrt warnings.\nI suspect these issues no longer exist, so I'm marking this for closure soon, unless anyone objects?. funnily enough - just before I went on holiday I was chatting to someone who suggested TAP output support. I said I'd consider it but wasn't sure there would be any interest.\nSeems like there is some interest!\nNot sure when I'd have a chance to look at doing it myself but if anyone wants to have a stab I'd certainly consider it for inclusion.\n. Thanks for doing that (twice!).\nHowever I have addressed the issue closer to the root by adding a script (scripts/fixTrailingWhitespace.py) that will do this automatically. I just need to remember to run it every now and then (I'll probably call it from the developBuild.py script, actually).\nI've run the script now and checked in all the fixed files - so I'm going to close this PR on that basis. If you think I've missed something feel free to re-open or otherwise let me know.\n. There's a few things here:\n1. Infinite loop: If there is an infinite loop then this is a bug (in Catch). I'm just back from holiday and have not had a chance to test the given code yet - will get to that in due course. James is correct that the AND_WHEN section with the REQUIRE (local) will be executed immediately after the WHEN section with local = false - so we would expect that to fail the test. That shouldn't cause an infinite loop because section discovery should be on entering the section. I'll definitely try to reproduce that.\n2. Execution order: What James means by \"Catch SECTIONs are not always executed sequentially\" is that peer sections are not executed sequentially. However nested sections are. This may become clearer if you realise that GIVEN, WHEN, THEN, AND_WHEN and AND_THEN are really all just aliases for the SECTION macro - and that macro just expands to an if statement. Only one section at each level is executed on any pass through the test case - but the whole test case is executed again until all paths are exhausted. This really needs better explicit documentation, but the coverage in the tutorial may help: https://github.com/philsquared/Catch/blob/master/docs/tutorial.md#test-cases-and-sections.\n3. REQUIRE( !local ); vs REQUIRE_FALSE( local ); - there should, semantically, be no difference between these two (and I doubt it is part of the infinite loop issue). The reason for REQUIRE_FALSE is simply because there is no way to decompose a ! expression using expression templates, so we're unable to evaluate the original value of the expression for display purposes. With REQUIRE_FALSE we can capture the original expression before negating it.\nI hope that all helps for the moment. I'll try and get back to the infinite loop issue shortly (as well as doing more work on the docs).\n. It was the result of a 99designs.com contest\n. Thanks Matthew (and @flycatr - I was rushing a bit when I made my first comment)!\n@wichert is correct, though, that there is no issue here - or any outstanding actions - so I'll close this now.\nFeel free to keep offering praise on the forum (on google groups) ;-)\n. Thanks for this, Martin. An entry for the FAQ, I think (which I'll be putting together shortly!)\n. because that would defeat the purpose of the do...while idiom in the first place (to require the ;, without generating warnings about redundant ;s - while being usable in block statements.\n. Not sure what deformation you're referring to?\n. I imagine the number of people affected by this at this point is significantly fewer (VS2012 wasn't one of those notorious versions that people got stuck on, as a rule).. I've not looked into this yet but ideally we should be able to detect enum classes and handle these automatically. If you know how to do this (portably) OTTOYH please let me know :-)\n. Ah, yes, sorry - I had left that til I had a chance to take a good look at it. Then it dropped off my radar. I'll try and pick it up again soon. It probably has rotted as I did some separation work on toString recently. I expect I can recreate it, though - unless you fancy refreshing it?\n. Thanks for that, Andy\n. It's easy to group test cases into groups.\nSimply give tests you want to group together the same tag, then specify that tag on the command line.\nSee: https://github.com/philsquared/Catch/blob/master/docs/test-cases-and-sections.md#tags\nI did have a plan at one point to have named groups (where you associate a tag or set of tags with a name) and that name would appear as the suite name in the Junit report. I never followed through on that and, since nobody asked about it, eventually deprecated it. It would be possible to resurrect it, though.\n. If you have a complicated tag spec that you use a lot, btw (e.g. specifying several tags, including some exclusions) I recently added the ability to define tag aliases using a macro. It's not (yet) documented, but you just write something like:\nCATCH_REGISTER_TAG_ALIAS( \"[@myAlias]\", \"[this]~[notthis]\" )\nThen you can run all tests tagged, [this], except those also tagged, [notthis], by specifying [@myAlias] on the command line (note the @ is a special character, denoting a tag alias, and is required).\n. IIRC it used the tags specified as the group name. I think that's still the case - but I can't check right now - try it out\n. @m-mcgowan: Over in issue #5 you said:\n\"I'm finding tags a bit of a pain, and I often forget. For example, I just made unit tests for a PRNG, in random.cpp. Each test then has as a minimum one tag [random]. Would be great to simply wrap the whole lot in a big group.\"\n- I thought it would be better to respond to that here.\nThe trouble with the SUITE() idea is that it would have to be a construct that exists at a scope above global functions.\nI have a half-formed idea where a SUITE() macro would open a namespace and create a self-registered object that associates a suite name with the namespace - the TEST_CASE macro could then find this and associate itself with the suite name.\nIt feels a bit hacky but I think I could get something to work.\nLet me think about that some more.\n. This ticket is quite old - and seems at least partially addressed.\nIn addition to the suggestions I already made, you can also now run with -# to cause Catch to automatically tag every test case with a tag based on the filename (see: https://github.com/philsquared/Catch/blob/master/docs/test-cases-and-sections.md#special-tags)\nIs anyone still dissatisfied with these options? (@m-mcgowan, @wichert)?. Hi, thanks for the comments about Catch.\nAs for the feature request I'm not sure I fully understand what you need.\nI've had requests before, which sound reasonable (they're on my list), for the ability to randomly shuffle the test ordering. It doesn't sound like that's what you're asking for, though.\nIt sounds like you just want Catch to be able to generate (or provide, from the CLI) a random seed prior to running each test case. But if that's the case I'm not sure why that would be better than just generating the seed yourself at the start of each test? The only thing I can think of is the CLI override - but there is a way to achieve that with Catch as it is.\nSo if you could clarify a little I may be able to help.\n. I know where you're coming from, @Kosta-Github, but (depending on exactly what @hauke76 wants) there is some merit in the concept of randomness in test frameworks:\n1. Random test ordering: Can actually help you keep your tests \"stable, deterministic, and reproducible\" by alerting you to any ordering dependencies you may have inadvertently introduced.\n2. Within tests you may need to populate larger test data selections (these may be characterised as low-level integration tests but I tend not to draw a large distinction if they fit Michael Feather's definition for unit tests). These are often best populated randomly. For \"unit tests\" you'd want that to be totally deterministic - so use a fixed seed (so not really random at all). But then you can use those same tests with a random seed to give you more speculative/ exploratory testing with greater coverage (at the expense of determinism - but as long as you log the seed used you can still reproduce any given run). You could also re-run the same tests with different, fixed, seeds to give you greater coverage while still being deterministic.\nSo this is an area I'm interested in and have some plans for.\n. Supplying your own main was going to be my suggestion. You can actually extend the command line even now, but not in the cleanest way (and not documented). I could post some sample code if you're interested in going that route.\nI'm reluctant to add the seeding as a standalone feature - but it might make sense as part of the test case order shuffling I mentioned.\n. Thanks @hauke76. Sorry - I didn't get a chance to dig out that example code. But it's an area I want to get back to (improving extending the CLI support) - so I'll leave this issue open for a while and post back with an update.\nGlad to hear you've got something that works for you in the meantime.\n. Hey @hauke76 - after some thought I implemented both parts of this natively into Catch!\nTest ordering can now be randomised using --order random.\nThe seed, which defaults to 0, can now be seeded to a fixed number using --rng-seed x (where x is an integer, or from the clock using --rng-seed time (uses seconds, so don't re-run too fast!).\n. I'm going to close this issue now since the feature I mentioned in the last post has been in for a while and I've had no reports that there are any issues with it.\nIf you disagree please either re-open, or raise a new issue - as appropriate.\n. Yeah, that formatting was a bit tacked on. I'd always meant to revisit.\nI'll take a look and keep your suggestions in mind - thanks\n. Thanks @paulobrizolara - @horenmar has been incredible at working through the backlog. See http://www.levelofindirection.com/journal/2017/1/19/catch-up.html for more.. I'm in two minds about it. On the one hand I agree that consistency is nice - and makes it easier even for human readers.\nOn the other hand most unit tests should run in ms, not seconds - and the small fractions look out of place when most, if not all, runtimes are so small. I'm not sure that standardising on ms is much better. And making it a command line option seems overkill. I'm not sure there's an easy answer - and nothing seems significantly better than the status quo (to me at least).. You're absolutely right. Not sure how that ended up like that.\nI've fixed it (locally, so far) now - thanks\n. Just got around to it :-) - thanks for the bump\n. and thanks for the PR, Andy\n. Is this the PR that was superseded?\n. Hi @wichert,\nI'm not quite sure what you mean by, \"run a specific test method only\". First what do you mean by \"test method\"? Do you mean a TEST_CASE, TEST_CASE_METHOD or something else?\nIn both of those cases you can run just that test case by specifying it's name on the command line - so I'm presuming I've missed some nuance to what you're talking about (especially with the talk of temporary test cases).\n. Ah! I wondered if you meant sections.\nYes I keep thinking about how to make this possible.\nThere are ways to make it work if you uniquely specify the section (by one of several possible means) - which would help in your situation.\nAFAICS it's possible in the more general case where you refer to a section name using wildcards and/ or tags.\nThat's one of the things that's been holding me back (I don't like the inconsistency) - but being able to do the first case is clearly very useful. I'll give it renewed consideration - thanks for bringing it up again.\n. @vpicaver - you might be better off splitting longer runner tests (which are presumably not unit tests) into separate TEST_CASEs, or possibly TEST_CASE_METHODs (which are more \"traditional\" x-unit style fixtures).\n. Yeah, that's what SECTIONs are for and I would usually recommend them - but given your usage and current constraints TEST_CASE_METHOD may be better suited to your needs (you can create a class that use as a fixture that holds the common state and setup code - just like traditional x-unit test runners).\n. Hi @onqtam, \nHave you implemented -c in doctest too, then?\nThe reason for this behaviour is that all -c is doing is acting as a filter. It's still attempting to discover all the sections leading up to the first \"miss\". It could be changed to realise when it has executed all (usually the only) leaf sections within the filter and stop looking for me. Perhaps it should do that - thanks for the observation.. Lest might be a good option if you want something Catch-like but lighter weight.\nAs for making some features compile-time optional - that's certainly a possibility. I have a long term arc where I keep trying to move towards making whole sections of Catch more modular (and therefore, potentially, optional). A couple of parts that I'm considering taking out of the core are: generators and matchers (neither of which are fully fledged yet anyway). I don't know how much that will help but we could possibly look at other areas too.\nI'd be keen to have Catch usable in the embedded space. It's a few years since I worked in a truly embedded environment but my impression at the time was that even those projects that had moved to C++ were still working with such a limited subset of C++ (both through compiler limitations as well as project preferences) that something like Catch would never have been workable (most projects I worked on didn't even have the std library!). That may have changed (or may have been specific to the segments I worked in). I don't have a feel for how addressable a market embedded C++ is for Catch these days.\nYou also mentioned stdout. Catch allows you to supply a custom ostream to use instead of std::cout. Actually it just ties the cout buffer to the one you supply - so it still needs std::cout to be available, at least.\nWithout knowing more about what a C++ without stdout looks like I'm not sure how feasible it would be to support it. Is std::cout available - and if so, what does it do?\nFinally: do you work with simulators and/ or emulators. I used to do unit testing almost exclusively in those and never deploy the tests to the device itself (because it was so limited). That's not to say that no code-level testing took place on-device - but it tended to be much more specialised, and involving instrumented builds etc. I even work that way primarily when I do iOS development nowadays (even though it's not really \"embedded\" anymore).\n. Ah, I feared as much. That makes it a bit more work to address. Not impossible - but not something I can just throw in.\nThat said what about std::fstream - is that supported (or std::ostream in general)?\n. Hi @m-mcgowan,\nbuild 6 on develop now allows you to conditionally compile cout/ cerr.\nWhat I have done is replaced all calls to std::cout in Catch with calls to Catch::cout(). I've then implemented Catch::cout() to just return std::cout - but wrapped the implementation in #ifndef CATCH_CONFIG_NOSTDOUT (and the same with cerr).\nThe upshot is that if you #define CATCH_CONFIG_NOSTDOUT it will not use std::cout or std::cert but you must implement Catch::cout() and Catch::cerr() yourself (to return a std::ostream&).\nDoes that address this particular need for you?\n. I did consider something along those lines (although I didn't know you could null-construct the ostream - thanks for the SO link there).\nHowever I was thinking (a) you are going to want to do something with the output and (b) if it silently swallows all output it may not be obvious what's going on - or what you can do about it.\n. Reviewing old tickets: It looks like the original issue, here, was potentially resolved - but subsequent issues arose (and it's not clear, now, what the status of those is).\nThere's a whole set of potential issues when working in the embedded space and it's going to be an ongoing effort to raise specific issues and work through them.\nSo I'm marking this for closure soon unless someone (@m-mcgowan?) has more to add here?\nFor other issues relating to embedded targets please raise further tickets as appropriate.. Thanks Anthony.\nIt may have taken a while but I finally got to this. The changes mostly look good (or at least innocuous) - so I net improvement overall!\n. WRT REQUIRE_FAIL() Catch already has REQUIRE_FALSE() (and CHECK_FALSE()) for doing negative testing - although these are only really useful when you would otherwise have to write REQUIRE( !expression ) (because you can't capture the evaluation of expression when you ! it).\nBack to Chenliang's original question - if I have understood correctly - you want two things:\n1. An assertion macro you can use anywhere - like the std assert but with Catch's expression decomposition capabilities.\n2. A new macro to use in Catch tests for testing that an inner assertion fires?\nIs that correct?\nIf so then that's something I already have in the pipeline! It's something that I keep coming back to from time to time as it requires a fair bit of internal reorganisation (most of which is done now) so hopefully it will be ready in the near future.\nBTW the reason Catch's assertions are REQUIRE (and CHECK) is because ASSERT is already defined as a macro on many platforms.\n. @inequity - yes that is perfectly valid. I do use that sort of approach from time to time.\nI do think the reuse can quickly get out of hand - making it difficult to follow what is actually being tested (and decreasing your confidence in the tests) - see my comments in one of your other threads for more on that: https://github.com/philsquared/Catch/issues/341\n. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. Good catch (pun intended)!\nYes, that really should be NonCopyable (which I already have a base-class for).\nI've changed Session to derive from NonCopyable (and also updated NonCopyable to supply the C++11 versions, where available).\nI've made these changes on the develop branch - they should appear in a committed build soon.\n. It's a very loose heuristic. Usually very large numbers are easier to read as hex. I think that the overload for int doesn't follow this pattern is an oversight and I'll look at that. Thanks for pointing it out\n. I recently checked in a change that makes int follow the same behaviour as unsigned int here.\n. For the record this is not something I've seen before. In any case it doesn't appear to be really a \"Catch\" thing - although perhaps something about the way Catch includes std lib headers brought it out? The max_align_t does not appear in Catch, at least.\nGlad you got it sorted, though.\n. Thanks Andy (@PureAbstract) - I missed that the compiler and std libs were being mixed up that way.\nNot sure it helps Martin, though\n. Longer term I think being able to control the colour scheme would be nice. But for now I've added the ability to disable colorisation completely.\nSee https://github.com/catchorg/Catch2/blob/master/docs/configuration.md for details.\n. Thanks Victor.\nI'm not sure why I was using assignment there - it's more awkward anyway.\nI've changed it to use reset() instead. Hopefully that should address the warnings you see with Intel. If you get a chance could you please confirm that? (build 6 on develop)\n. 1. Ah - I committed a broken build yesterday but fixed it (this morning, UK time, I think). I didn't change the build #.\n   Could you try again?\n2. If I follow that link (in a browser) I get the develop branch version.\n. I don't seem to have wget on my Mac (looks like I'd have to download and build it)\n. I can curl it, though - and that gives me the develop branch\n. Damn! I hadn't pushed the commit - sorry about that (and thanks for bearing with me).\nShould be in now!\n. Heh - I meant I had committed to my local repository but not pushed to GitHub - possibly tried but connection failed (as I do most of my dev on my commute).\nGreat to hear it's working for you now. And, yes, I added the signal handlers a little while back. Only Posix so far - but plan to add Windows SEH to the mechanism too.\n. Thanks @tclamb.\nAs those examples show, the Catch way to do this is with the Approx() wrapper. The examples should show usage.\nI was convinced that this was actually documented but I can't seem to find it - I'll try and address that soon!\n. Matchers would be a perfectly fine way to do it. The reason it is done in a more specialised way right now is historical (Approx() predates Matchers - and Matchers are not really fully formed in Catch yet anyway).\n. You are correct: Catch requires exception handling to be enabled. It's pretty fundamental to the way it works - but it's possible it could be made to work without (but probably with a reduced feature set).\nIt hadn't really occurred to me to make it explicit in the tutorial but it probably is worth doing. I'll see if I can work it in - thanks for pointing that out.\n. I've now added the ability to control how the text colourisation is compiled which should give you the option you need.\nSee https://github.com/philsquared/Catch/blob/master/docs/configuration.md#terminal-colour for details.\nLet me know if it's not clear.\n. Ok to close this now?\n. Well... I keep getting into trouble by saying what I'm planning on for the future (as half the time it doesn't happen) but...\nI'm hoping to work on a feature in Clara (the command line parser that I spun out of Catch) that will unify the ability to specify configuration through the command line, environment variables and compile time macros. So I'm really holding off for that.\nHowever there is an extra nuance with what you're proposing as it requires being able to #include windows headers as well as *nix headers.\nIt's not that that's impossible - just that it's not a simple selection between them (as it's only going to possible on a narrow range of platforms - so needs to be enabled at compile time - but then made selectable at runtime). So I'd need to tread carefully.\n. It's very early stages - and no documentation yet - but you can find it here: https://github.com/philsquared/Clara\nIf you search the Catch codebase for clara:: you'll find how it's used there.\n. I'm doing a review of old issues.\nI know there was an outstanding portion regarding runtime selection of Windows vs Posix colouring, but I'm not sure that's worth ever doing.\nSo I'm inclined to close this ticket now. Any objections?\n. But you can specify that at compile time. oic.\nThe trouble is that, although sending the control codes seems like a runtime selectable thing on Windows, there are additional calls around it that require POSIX headers to be available - so a vanilla windows build is not going to work.\nIt's possible things could be reworked to avoid that. Perhaps I'll look at that after all.... Thanks Leandros,\nWe have most of that already (the abstraction for the colourising mechanism). Currently for Windows it only uses the win32 calls. I'll check your blog post at some point (snowed under now) for how to handle the last part - thanks.. Catch can't see inside the parentheses. That's a language limitation (there are no ( or ) operators you can overload - and, no, operator() is not the same thing).\nIn this case the original problem is that the preprocessor knows nothing about templates (or any language feature) - so when it hits the , in the template instatiation it thinks it`s the end of the macro argument. I'm sure you know that and that's why you put the whole expression in parentheses to workaround it.\nBut you only need to put the template instantiation in parantheses:\nREQUIRE((my_template_function<T1, T2>(some_arg)) == 0);\nThat should address the problem for the macro, while still allowing Catch to see the two components to the expression.\n. The Google Group is generally the best place for these sort of questions. There are probably more people in the community watching it. For me I'm as likely to see something there as here.\nNow, to your question: As you have discovered this form is explicitly disallowed at compile time by Catch. It's not that it's impossible to support but that I made a decision at the start to keep the expression template machinery to an absolute minimum. It was intended strictly as an alternative to the more traditional family of macros, ASSERT_EQUALS, ASSERT_NOT_EQUAL, ASSERT_GREATER_THAN etc. Even supporting that got much more complex than I'd originally intended (loads of specialisations for different int types due to the way int literals are handled, for example). In particular I was worried that adding more expression decomposition might increase that complexity exponentially. Even if it could be made to compose linearly it still opens the door to having to support full expression decomposition - or at what point do you stop?\nAt least 99% of the time the simple predicate forms supported are all you need. I think this is the right balance.\nMore specifically to your example: first - I'm not convinced it's \"a fairly common operation\". Having two possible outcomes suggests indeterminism - which is not something you'd usually want in your tests (certainly not unit tests). The best case I can think of is if the assertion is part of a block of code that is reused by several related tests. I would still argue that that might constitute over-eager reuse - increasing the complexity of the tests - and decreasing their reliability, maintainability and readability.\nThat all said I'm not saying it would never be useful (you clearly not only find it useful but are convinced you might regularly do so). So there is currently one way to do this, with another, better, way coming:\n1. Right now the way to do this is to bracket the whole expression. That makes it appear, to Catch, as a single value (the final boolean result). The downside is you don't get Catch's breakdown of the input values. Going back to the complexity trade-offs I mentioned earlier, and the frequency that I'm sure even you might need this form, I think this is tolerable. However ...\n2. This will be supported by the Matchers interface. Matchers can be composed in this way (and because there is a logical separation between the compositional structure and the expressions in the Matchers themselves I don't believe this suffers from the same complexity issues discussed earlier).\nI hope that helps clarify the situation.\n. Thanks Sean. Sorry it took a while to get to. There were actually a couple of minor fix-ups I needed to do (and I initially committed prematurely - but should be all sorted now).\nAs a result of this change the xml reporter is actually slightly better behaved now (e.g. it respects the NoAssertions warning) so I also had to rebase my regression tests ;-)\nI think I'm going to remove the legacy reporter adapter (at least from the core codebase) shortly now.\nThanks again.\n. Thanks! Good catch.\n. I've just added (on the develop branch) configuration for controlling how the output is colourised.\nSee https://github.com/philsquared/Catch/blob/develop/docs/configuration.md for details.\nIn short, if you #define CATCH_CONFIG_COLOUR_NONE where you put #define CATCH_CONFIG_MAIN it will disable colorised output.\n. Cool - thanks for letting me know.\nIt made sense to do this at this point as it had come up in a few places recently and was not a big job to implement.\n. Thanks Jamie (and Andy),\nI've accepted the PR, although I'm not an active user of CMake so I can't personally vet it. It seems to be in line with Andy's suggestion, though, which is good enough for me.\n. @PureAbstract can you elaborate?\n. Thanks for this. Sorry it took a while for me to get to it\n. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. I'm reimplementing this slightly differently - mostly in terms of the compiler detection (so it fits in with the rest of my compiler-capability detection). I also wanted to make sure I'm familiar with every usage - as macros can be tricky if you don't keep your eye on them! I'll credit you in the commit message, though.\nAs for modules - having now watched Gabriel's cppcon talk I'm somewhat optimistic about them again :-) Catch will need some concessions towards them - particularly in the use of CATCH_CONFIG_MAIN and CATCH_CONFIG_RUNNER. Are you suggesting the use of __LINE__ in test names might be a problem with them?\n. In fact I've pushed it on the develop-v2 branch now (I also have it on master but don't want to push it straight away there until it's been \"on the road\" a bit).\n. Ah - so it's not modules, per se.\nAs for the multi-threaded support: the good news is that this is one of the main goals of v2 - and is in active development! I'm not ready for checking in yet as I'm trying to find a decent work-around for lack of proper thread_local support on most compilers!\n. Funnily enough no. Or rather I had already anticipated that one and was designing around it.\nThe problem for me right now is that clang doesn't actually support thread_local (well, supposedly it does with a certain version of gcc's stdlib, or something).\nSecondarily, although related, it looks like thread_local is not well supported beyond that either.\n. Sorry - missed your reply before.\nUsing the proprietary keywords is what I'm currently doing. I'm working around the destruction issue by forcing the user to guard the scope in which threaded testing can occur - so there are well defined points at which the thread-local object gets created and destroyed, rather than it being done lazily.\n. This is now on master, too\n. Sorry for the delay - just catching up with this.\nFirstly: thanks for reporting this - especially with all the background info - that makes things much easier to reason about (even if a bit frustrating in this case).\nI tried your proposed workaround (more specifically I tried just checking for a current_exception() instead of uncaught_exception() ) and it doesn't work for me (clang/xcode 6.1.1).\nInfinite loop detection is probably a good idea - although it doesn't really solve the problem. I'll see what I can do.\n. For anyone still watching this issue - I've committed some changes (on Develop) that may address it. Please let me know either way if you try it.\n. Thanks Ryan,\nI'll take a look at it in a while but I'm probably not going to have any time in the next couple of weeks!\nI also have a page covering how to write toString() - but I was holding off posting it because I'm half-way through some work on it that may impact how it is done (there are some latent portability issues currently). In view of how that's dragged on it may have been better to have posted what I had for now.\n. both the toString docs and toString implementations for std::pair and std::tuple are in (develop).\nLet me know if this addresses all you original needs\n. It should work - but you need to put the #include outside the namespace\n. To skip all tests tagged, say, [LibraryB] use ~[LibraryB] on the command line.\nAlternatively tag them [.] (or [hide]), too and they will be skipped by default - but can be run by specifying [LibraryB] on the command line.\nThere are also a couple of fairly new special tags. I don't think they are documented yet (I'll be getting back on to that from next week) - and they may only be on the Develop branch:\n[!shouldfail] passes the test if it fails - and vice-versa, and:\n   [!mayfail] doesn't fail the run if the test fails - but notes it separately.\nI suspect [!mayfail] is what you want here.\n. Love the script, James :-) But what is your value of ... ?\n. I'm at a conference for the rest of this week (speaking about Catch, as it happens) - and was at a different conference earlier today - if that gives you any idea of what my schedule is like recently :-)\nBut after that I'm going to get back to working on Catch - and especially the docs - so maybe next week sometime.\n. This comes up from time to time. Thanks for bringing it up again - it helps to get an idea of how many would find it useful.\nAlthough I don't have immediate plans to add type parameterisation it is definitely on the wish-list (although value parameterisation, or even property-based testing, which should be enabled by the in-progress \"generators\" feature, is probably higher up the list at the moment).\n. Sorry. This dropped off my radar until #565 referenced it recently.\nI've just had a quick browse back through and I tend to agree with @garethsb's March 17th suggestion. That's pretty much how I do it and it seems to work pretty well without the need for any special handling in Catch itself.\nThere is one other issue with @garethsb's proposal as written: that SECTION within the templated function will only get executed once! What you need is some way of disambiguating it for each invocation. What I usually do is pass an additional string that gets concatenated to the SECTION name (or used as the name entirely).\n. @wichtounet:\nTEST_CASE(\"foo\") calls foo_test twice. foo_test contains a SECTION. Although they are different instantiations of the foo_test template the only way SECTIONs are disambiguated within a test case in Catch is via file and line number - which will be the same for both entries to the SECTION.\nIt's one of the areas that simplicity of the SECTION abstraction breaks down, unfortunately. You have to know a little of the implementation details for it to make sense.\n. Ah, the perils of (me) dropping in on the thread so late - sorry! I did try and qualify it with \"March 17th proposal\" :-)\n. This essentially what Generators are (which are an unfinished, undocumented, feature in Catch - so I'm not suggested you should use them - or even know about them!).\nI have some work on a local branch that moves Generators forward a bit but they are still a little way off an official inclusion.\nFor now take a look at https://github.com/philsquared/Catch/blob/master/projects/SelfTest/GeneratorTests.cpp to get an idea of the direction I'm going with it.\n. I don't have an ETA, I'm afraid.\nAnd it's one of those things that's mostly design work - rather than raw implementation - so I'm iterating the design. Difficult to share that out - but as I get back to it I'll see if there's anything I can pass on - thanks for the offer!\n. I'm closing this issue in favour of a dedicated generators/ property based testing ticket, #850.\nBe sure to watch that issue for notifications if you're interested,. I know this has been circulating for a while but I felt there was enough of a critical mass to push it to the top recently. I've now changed the decomposition operator to <=, which I believe works around the issue here?\nPlease let me know either way - and also whether the change introduces any warnings for you?\n. Thanks for that. I Couldn't merge it directly as half of it was already done - so I just redid the other half.\n. @excaliburHisSheath and @Ezodev can you confirm which version of Catch you are running there?\nIn any case support for nullptr has been in for quite a long time. AFAICS it should be selected for VS2013 by virtue of:\n```\nif (_MSC_VER >= 1600)\ndefine CATCH_CONFIG_CPP11_NULLPTR\nendif\n``\n- but in case something is breaking that could you try compiling withCATCH_CONFIG_CPP11_NULLPTR` defined explicitly? (I don't have access to VS2013 at the moment, or for  while to try it out myself).\n. That was spooky, @PureAbstract ;-)\n. That's not exactly how I remembered the quote ;-)\nSo, sounds likely that the OP(s) are using the version from Master - in which case I'd suggest using Develop (it's pretty stable right now - will probably do a merge in the near future).\n. build 53 is the latest on Master. Active development is on the Develop branch - so that is further ahead.\nIt looks like the detection for nullptr support in Visual Studio 2012+ has only been added on Develop so far.\nSo I'd suggest either picking up the version from there, \nhttps://raw.githubusercontent.com/philsquared/Catch/develop/single_include/catch.hpp\n...or continuing with explicitly defining CATCH_CONFIG_CPP11_NULLPTR (thanks for letting me know that worked, @excaliburHisSheath )\n. Apologies - I think that commit referenced this issue incorrectly.\nBTW - as for the actual issue you raised - I am looking into a solution.\n. Thanks for that.\nI've actually reorganised catch_compiler_capabilities.h - and added the nullptr detection for VS2015 as part of that. The CPP11_OR_GREATER, though, I don't think VS2015 is quite ready for yet (and I have diminished its use in Catch anyway).\n. Great suggestion - makes a lot of sense - thanks.\nI'll try and get around to doing this soon - although I'm in the middle of another big project for a while so it may not be straight away.\n. Thanks for bringing this up!\nI've changed those casts to reinterpret_cast now on my local branch (will get pushed shortly).\nAs for the \"missing default case in switch\" that one's more tricky. GCC and Clang give me warnings if I include the default case (they prefer me to exhaustively cover all enum cases). So I can't please both warnings at once. Since I have the GCC/ Clang ones keeping me honest (i.e. making sure I'm always fully specified) I'll leave it that way around.\n. It's a generation issue (in the script that splices the headers together). I'll look into it properly at some stage but for now I've just changed the comment type to workaround the issue. The latest commit should be working again.\nSorry I didn't fix this sooner - I'm just going back over issues after a period away from the project. Someone else had reported this issue more recently too.\n. It doesn't, currently.\nI was going to do a lot more integration work on the Obj-C side (including an iOS test runner) but with Swift gaining traction now I'm no sure it' worth it.\n. Thanks for that Peter. All looks fine - and pretty much the way I would have done it :-)\n. Thanks for that @Luthaf.\nI've incorporated your suggestions - but I've only been able to confirm that they don't break clang. Please let me know if they have the expected effect with the Intel compiler.\n. Weird. Looks like a bug in the script that stitches the headers together. I'll look at that properly sometime.\nFor now I've just changed the comment type to work around it.\nI've pushed an updated version (I didn't bump the build # for that, though)\n. thanks for letting me know, btw\n. That's a little bit nasty. The assertion makes logical sense. However in the event of a segfault we get thrown onto a path where the former stack has been abandoned - and section tracking is performed by a stack-based RAII object!\nThere's some hacky code that kicks in to try and get things into a consistent enough state to report the error before terminating - but that assertion was kicking in at the end of it.\nI tried adding more compensatory code in but it was making it even muddier so I've opted to just remove that assertion now. It's not a big deal anyway.\n. I'm presuming no-one has seen this issue resurface and I can close the ticket?. Thanks for confirming. Hi @lweberk,\nThanks for the kind words. I'm curious why you feel this would be needed, given your reasoning about pinpointing which test failed quickly from build server output. Or rather I'm curious why the current formatting doesn't do it for you?\n. thanks\n. Hi @garethsb,\nSorry for the radio silence. I've been away from this project for a while as I've got a couple of major things on (again!).\nI'm definitely interested in this area in general and will give your PR due consideration. However I don't really have the time right now to give it the time it deserves - probably in a couple of weeks or so.\nAs you may have seen I've merged develop back into master since you submitted this - although I'll be keeping develop around for this sort of integration. The point is that GitHub thinks your PR can be merged with master as it is - and develop is now essentially the same so we should be able to work it out.\n. Rather than tagging I've been doing dev/ integration on the develop branch and merging back as a \"release\".\nEither way it suffers from the problem that the people who experience the problems tend to be the ones who wait for the \"stable release\", so problems don't get picked up until then. I usually try and leave it quiet for some time before merging to mitigate this as much as possible.\nPerhaps using tags instead would result in more people on the bleeding edge by default - while still allowing the more conservative to use a tagged release? I might experiment with that next time around.\n@HaMster21 - are you still seeing issues with master? I don't recall seeing any other issue tickets raised by you for it? If it's still not working for you it would be great if you can raise an issue here.\n. Catch is now using Semantic Versioning and tagging\n. I realise this is old and I'm not sure if this is still relevant to @tavianator, but the issue still stands.\nThis is one of the major problems with the way the arguments passthrough currently works - and is why it is undocumented.\nIf I'm honest it's unlikely this will get fixed until Catch2 and a new version of Clara (the underlying command line parser), which will be C++11 based.\nI'll leave this ticket open as a feature request, though.. And, just got the record, it did get fixed in Catch2/Clara1.0 (parsers are now composable). /Wall generates loads of warnings even in the std lib that ships with Visual Studio. I know the MS std lib team were doing a lot of work to address that, but AFAICS that's still the case even in VS2017.\nI get no warnings in MSVC with /W4. Quite a few warnings have been addressed in the last couple of years (e.g those in the referenced #722).\nIs this still a legitimate issue for you?. Thanks for that. I Couldn't merge it directly as half of it was already done - so I just redid the other half.\n. As @PureAbstract says, this is a workaround for an IDE shortcoming. That's not to dismiss it - but there are some other consequences to such a change.\nThe reason ->* was chosen originally was because it has the highest precedence of all suitable operators (overridable, left-to-right associative and no trailing brackets). Well, joint highest, along with .*.\n+ (and - for that matter) have lower precedence than, say, * and /. As it turns out this is ok, because all these operators have higher precedence than the comparison operators - so any lhs expressions involving * and / will be evaluated before binding to the decomposer.\nHowever now there is an inconsistency! We can use * and / on the lhs, but not + or -. Is this a big deal? Probably not - but it's a little irksome. And it opens up the question: can we chose an operator that will allow + and - to be evaluated too?\nThe answer is yes. operator << has higher precedence than + and - - but still lower than the comparison operators. This appears to work. It has one issue that I'm currently debating with myself whether it's enough to nix it or not (thoughts welcome!). The issue is that, with clang, at least - with the warning levels I have - I get a warning about overloaded operator << having lower precedence than the comparison operators!\nThe trouble is I can't (AFAIK) suppress that warning locally to the source because you can't emit #pragmas within a #define - so I'd have to suppress the warning for all test code - which I don't like doing if I can help it.\nAlternatively, one of the non-equality comparison operators would also do the trick (e.g. <=), and this has been suggested before (https://github.com/philsquared/Catch/pull/247). This works because all four operators have the same precedence so will still bind most tightly to the left.\nI don't get that warning when I use <= but the last couple of comments in the referenced PR suggest that there were warnings being seen at the time. I'm not sure if that's differences in the compiler or the rest of the Catch code (it was a while ago). If anyone has any input on that I'd be grateful to hear.\nIf there are warnings with <= then the option suggested here (in the PR) is probably a good enough compromise, after all. It works around the Eclipse issue. It allows *, / (and %) to be used on the LHS, but doesn't trigger any warnings.\nThoughts?\n. Well well. I didn't know about that one. Thanks @martinmoene!\n_Pragma( \"clang diagnostic ignored \\\"-Wparentheses\\\"\" )\nworks for me in clang. I'm not sure how to use it portably, though. It's now got incompatibilities on two axes (_Pragma is C++11, AFAICS - and then the pragma itself is clang specific)!\n. I'll confess I tend to use something similar to @DavidEGrayson's example:\ntry\n{\n  do_something_that_throws_an_exception();\n  FAIL( \"expected exception\" );\n}\ncatch(const myexception & e)\n{\n  REQUIRE(std::string(e.what()) == \"something\");\n}\n... which at least doesn't have to track the \"thrown\" state.\nBut, yes, I agree this really needs first class support in Catch - especially since Catch already has a general way of extracting the message from an exception object (more general than .what()) - so you should be able to assert on the exception message without even needing to specify the type!\nIt's definitely on my list.\n. REQUIRE_THROWS_WITH( expr, message ) (and CHECK_THROWS_WITH) is now in (v1.2.1-develop.7)!\nThis works as REQUIRE_THROWS, but with the second argument you can specify a message string for it to match against. The message string supports * wildcards at the beginning and/ or end too - and is case insensitive (see examples in last two tests in https://github.com/philsquared/Catch/blob/develop/projects/SelfTest/ExceptionTests.cpp).\n. AFAIK there is no way the exception object can be returned - at least not the way you show. Possibly, with conditional compilation for C++11 support, it could be passed into a lambda - but I'm not sure it's worth the mechanics of that (when you can \"keep writing try/ catch\").\nHowever I have now added Matcher support for the exception messages, at least, so you can do case sensitive compares (as well as StartsWith, EndsWith and Contains).\n. I believe this ticket can be closed. Please re-open if you feel otherwise. That's an excellent point! Thanks for bringing it up. It looks like I never got around to updating the docs with this change (which is a shame as it's darn useful).\nI'll do that shortly.. Done. See near the end of: https://github.com/philsquared/Catch/blob/master/docs/assertions.md#exceptions\nAlso the Matchers section just below. It's not much right now but should get you going. Let me know if anything is not clear.. Thanks for this. You're absolutely right that this is something that is often missed - and something needs to go in the tutorial about it.\nI had a slightly different view on how to present it, though - so I've actually written this instead:\nhttps://github.com/philsquared/Catch/blob/master/docs/tutorial.md#scaling-up\nThanks for the prompt.\n. yep - good call - thanks\n. thanks\n. Odd. I thought I had documented it a while back when I added toString.md but it wasn't there.\nSo I've added it now: https://github.com/philsquared/Catch/blob/master/docs/tostring.md\nThanks for bringing it up.\n. sorry guys - just getting to my issues backlog...\nI think it's time to take this seriously. I've been having a think about a new name. It's been hard. I really like Catch, and it has a certain amount of momentum behind it. I don't take changing it lightly. But I'm aware of the problems. Thanks to all those in this thread - as well as other places - who care enough about Catch to be raising the issue and making suggestions.\nI've considered:\n- Keeping the name similar, or derivative (e.g. catchtest, catch++, catchup - even catsh) - but the trouble here is people will continue calling it Catch, so the less ambiguous form may not gain enough traction to solve the original problem.\n- Some entirely new names, but using a similar (b)ac(k)ronym approach: Catsh (again), cpphot, hotcpp, Hoctu, shutcpp. I'm not very happy with any of those - especially those with cpp. They don't have quite the same friendly, fun, approachable, relatable quality that I feel Catch has. I had other ideas here - more on one in a moment...\n- I did start toying with non-acronym names but haven't come up with anything worthwhile yet. The trouble is you end up either adopting an existing word - which may have many of the same problems as Catch - or making a new word - in which case it feels like it should be an acronym - or at least have some nod towards letters in C++, Test, etc. I'm open to ideas, though.\nAlso, coming up with a name that is entirely unlike Catch may make it harder for people to join the two up - although I'm not sure that concern holds up to inspection.\nAnyway I have stumbled on one that I do like. It's an acronym - ironically even more naturally so than Catch - has a relatable identity (great for icons and other imagery) - and has those properties I liked (friendly, fun etc).\nIt is an existing word but I think sufficiently unrelated in context that it shouldn't be an issue. I've had a search around and it doesn't come up much in the context of technology at all - let alone C++ and/ or testing!\nSo what is it?\nHere it is...\nAre you ready for it?\n.\n.\n.\n.\n.\n.\n.\n.\n.\nCatfish\nThat's: C++ Automated Test Framework In a Single Header.\nThoughts?\nRegards,\n[)o\nIhIL..\n. http://asciiart.en.utf8art.com/arc/fish_40.html\n. Thanks for all the positives!\n@DarrenCook and @mloskot: thanks for voicing your concerns. They are quite valid (and I believe I raised them too). While there's more nuance to what you actually said I think I can summarise both of you by saying that, yes, Catfish is an existing word - and wasn't the the problem with Catch in the first place?\nActually the original problem is that it's hard to home in on Catch because the term is overloaded right down to the narrow context in which it exists (as has been mentioned a few times already).\nHere's another way to look at it:\nScenario 1: Someone hears about Catch and wants to find out more/ has an issue and needs to look it up. They go to their search engine of choice and first type:\nCatch\nNothing on the first page. \"Silly me - I need to make it more specific\".\nCatch C++\nLots of stackoverflow hits for try-catch. If you're lucky you might hit the test framework on the first page - but it's a way down.\n\"no, no! I mean the test framework\"\nCatch Unit Test\nSeveral results about testing exceptions. The test framework probably crops up in the first handful of hits, though (bear in mind results vary by search engine and filter-bubbling). But you might miss it.\nOf course if you're looking for developer-oriented stuff you'll probably just go straight to stackoverflow. The situation will be much better there, right?\nNo.\nIt's worse.\nMuch worse!\nEmbarrassingly so!\nNow repeat the whole exercise with Catfish:\nCatfish\nLots of pages about fish. \"Silly me - I need to make it more specific\"\nCatfish c++\nWill probably take you straight there\nCatfish test\nWill probably take you straight there\nStackoverflow: Catfish\nWill probably take you straight there.\n\nWell I'm sold!\n. @DarrenCook - you also mentioned losing the \"brand\". I alluded to this too when I talked about momentum.\nTo be honest that's my biggest concern too - and the one that still gives me pause. Catch is gaining recognition - but I think a (good) name change could accelerate that as much as harm it!\nFor a start, if someone familiar with Catch searches for Catch they'll still hit a load of the old links - links that will eventually take them back to GitHub (which can be renamed with forwarding), or my blog, or the Google Group - or somewhere where the name change will become apparent. There may be some initial confusion for some. There might be some rare cases where some people get lost and never come back. But I think they really will be rare.\nBut the majority of people will, eventually, come along for the ride - and all the new people will (mostly) be none the wiser. Did you know that Catch was originally called YACUTS? [1]\nThat said, as I've made clear originally, I don't take a name change lightly. If it wasn't a real problem - which has been referred to me many times - not just here - I wouldn't be considering this step.\n[1] http://www.levelofindirection.com/journal/2010/5/21/the-ultimate-c-unit-test-framework.html\n. @vadz, \"To Catch A Catfish\" was the name I had in mind for the blog post I'd write introducing the change :-) As for the Harper Lee tie in - that will probably have to wait until we have Mocks ;-)\n@paolobolzoni Thanks for your opinion. I do take it seriously. I happen to disagree about it being \"not [different] enough to solve the problems.\" I think it would make a significant different, while retaining the exact qualities I liked in Catch (friendliness, fun, memorable, etc). I think coming up with something truly unique (so the ultimate in searchability) that still retains these qualities (or, at least, doesn't lose too much) is a tall order. I'm certainly still open to suggestions there.\nIronically I think it's the tweaked names that probably don't go far enough to solve the problems - not because using them wouldn't be less ambiguous - but because they're not different enough for people to use them instead of the root word, which has momentum and familiarity. I could be wrong there - and am not closed to persuasion - but currently that's my thinking.\nFurthermore, I believe it was you that said (and I agree) that, with the way modern search engines work, there's effectively no difference between \"catchtest\" and \"catch test\".\nThe ++ suffix might have a better weighting in searches - and if we change the base name to Catfish it gives us a chance to get people used to it from the start:\nCatfish++ - \"Automated Test Framework In a Single Header - all in C++\" (get it?)\nBut this suffix has one fatal weakness! It can't be used in C++ names - so in code we'd have to shorten it to Catfish (or, without the base name change, Catch) - which then makes it less clear what the canonical name is - perhaps confusing the issue even more!\nOh, and it's also more awkward to say it out loud.\nBTW there's a popular BDD test framework (for iOS) called Kiwi. If you go to stackoverflow and search for Kiwi (no other keywords) all the top hits are for the test framework. For me it seems to come quite high in google searches (for just the word Kiwi). It's difficult to assess the filter-bubbling contribution there - it's much further down the page on duckduckgo. But, even on DDG it takes all the top slots for \"Kiwi test\", \"Kiwi iOS\", \"Kiwi Objective-C\" or \"Kiwi BDD\". I don't think they have a searchability problem.\n. @mloskot I agree that \"renaming a well-established project is hard\" - although I'm not sure if (done well) it couldn't satisfy the majority of users. It certainly wouldn't satisfy all users - but then that's already the case!\nI think a good rename has the potential to satisfy more users than are currently satisfied. That's by no means a given, and is certainly a risk! I've said a few times now that I don't take this lightly. The matter has come up numerous times over the last couple of years in particular and I've not ignored it - but weighed it up and landed on the side of keeping things as they are. \nThis time around I'm getting more of an impression that there's a very real obstacle to greater adoption here and so am finally considering it.\nInterestingly, wrt \"catchlib\", my primary forwarding url for Catch is catch-lib.net. I share @The-Compiler's view that Catch is not really a library, but catch-lib was the best domain I could come up with at the time. I also have catch-test.net but it's amazing how that one extra letter makes me prefer the slightly shorter one :-)\nOf course Catfish doesn't make that much easier (could do catfish-lib.net, I suppose).\n. oh, forgot to make my main point (re catchlib) - which is that it suffers from the same derivative problem I've already mentioned.\n. Interesting @paolobolzoni. I think that would suffer less (although not entirely free of it) from the derivative problem. However I can't think of any prefixes that I like. There is a temptation to add something (like your bugcatch example) that makes it relate more to testing - but what I liked about Catch on its own was that it always hinted at that without saying it outright - which is in keeping with the idea that a test framework certainly plays a role in catching bugs, but that's not it's only (or, for some, even main) purpose (e.g. use it to drive design etc).\nAgain, I'm still open to other ideas (btw I'm not going to make a final decision on this for a while yet - probably a week at least).\n. Not sure I get your point. Martin\n. I've let this languish again - but since work is well underway on Catch 2.0 - which is going to be a big change - it seems like the right time for a name change too, if we're going to do it.\nAfter a little time to look back I don't particularly like the name Catfish now (my previous proposal) - certainly not enough to lose the original \"branding\".\nSo my new proposal is simply:\nCatch2\nThe 2 here is part of the name - similar to how the X in OS X, while pronounced \"ten\", and associated with the 10.x versioning, was part of the name. So it would start as Catch2 v2.0.\nCatch2 v3.0 might get a bit weird, but not a showstopper.\nIt has the advantage of being very close to the original - in a way that search engines should be able to allow for - while still prioritising exact matches.\nPlus it emphases that v2 is going to be a big break (in particular it's going to require C++11 and be substantially rewritten/ refactored).\nThoughts?\n. If you hang out in Mac or iOS developer communities you'll hear most people pronounce it \"ten\" - also watch any Apple keynote that talks about it.\n. Also, I think the proper \"incorrect\" pronunciation is, \"Oh, Essex\"\n. @rr still working on it. I'm currently exploring the possibilities that the rebasing on C++11 allows. I'm going to write a blog post soon.\nOriginally the headline features were planned to be: concurrency support and generators/ property-based testing.\nBoth those features (especially the concurrency support) were key motivators in deciding that now was the time drop pre-C++11 support (Catch Classic will continue to be maintained with C++03 support - just no new major features).\nBut the scope for internal clean-up with C++11 has me thinking (and toying with implementations) of the following:\n1. Low std-lib dependency overhead for non-impl headers - including a custom String class. Idea is to address compile-time concerns.\n2. Reworked expression decomposition, which allows for string conversions to only occur when needed (addressing some performance concerns).\n3. New string conversions approach, which allows converters to be registered and discovered at runtime (reducing template machinery and coupling - as well as further reducing std-lib dependencies). Fallback of stringstream based conversions can be optionally disabled (to reduce those dependencies even more). The current approach also has a number of nasty order of evaluation issues.\n4. Further reduced singleton surface area - with TLS caching of results to be merged in later made possible (for the concurrency support).\n5. A more concrete, published, API for introspecting test case registry, current test info, etc.\nIn terms of breaking changes - despite the degree of internal rework I want to keep that to a minimum. The main areas will be around the use of strings - especially string conversions - which will use the new custom string type - as well as the new conversions framework. Reporters may be impacted too - but I may be able to provide an adapter for those (as I did with reporter interfaces changes when going to 1.0). It's possible the Session class may change too.\nThere's more but that's OTTOMH for now. Blog post to come.\n. @mloskot \n\nThen,  Catch11 \n\nActually there might be something in that!\nI had been thinking that Catch2 feels like it's just stopping short of Catch22 - but Catch11 is halfway there! :-)\n. @nabijaczleweli several reasons, some of which I already hinted out. I'll go into it more in the blog post.\n. @martinmoene actually it's a pair of String and StringRef I have in mind (where StringRef is similar to string_view) - both are quite minimal and are immutable. One advantage over std::string_view (other than not having to wait for C++17) is that you can usually get back to a String from a StringRef without copying.\n. @vadz bear in mind there's no content (other than this page) for Catch2 in this context yet.\nI still think searching for \"catch2\" is going to get much more targeted results than \"catch\" currently does.\nI do hear you about people still calling it just \"catch\" (one of the concerns I voiced before) but there's a fine line to be trod here - too different and we lose the association with \"Catch Classic\". Too similar and people will drop back to calling it just \"Catch\". Ironically the situation has become a classic Catch-22!\nI'm still opening to further suggestions. Another possibility I've been toying with is \"Recatch\".\n. @Russel yeah, PBT is certainly one of the big things I have in mind for Catch2.\nBut bear in mind that this isn't really a competition. If people want to use RapidCheck then that's great! My original motivation with Catch was to provide an alternative that was easier and more fun to use than the alternatives at the time.\n. @vadz that was my thinking with Catch2. Actually a quick search now (I use DuckDuckGo which shouldn't skew the results based on previous search history etc) confirms that catch+suffix returns far more relevant results than prefix+catch.\n. ... actually the search terms were \"c++ unit test <prefix>catch\" vs \"c++ unit test catch<suffix>\" compared to just \"c++ unit test catch\"\n. The very latest versions support large parts of C++14, yes - but even then is spotty - and only the latest versions (e.g. Visual Studio 2015, but not 2013) - whereas fairly good C++11 coverage has been around for a few years now - so even several older versions support it (although I don't think VS 2010 will keep up - not sure what the lower bound or gcc and clang will be yet).\nI would love to use C++14 (17 even more so!), but most of what I would use it for here is minor convenience - compared to the night & day difference between 03 and 11. In the code I've written so far I'm not sure a single line is valid C++03 ;-)\n. Thanks for this suggestion (those -Weffc warnings are a pain - especially since I can't work out how to enable them in Xcode any more - but mostly because several of them are just wrong).\nI've added #pragma GCC/clang system_header. It seems to work for me in clang. Could you confirm if it works for you in GCC (I don't have a non-clang version of GCC available at the moment) - and especially if it covers all the -Weffc++ warnings?\n. Wait. you needed to using the clang pragma on gcc?\nBy #pragma GCC/clang I meant that I used #pragma GCC for gcc and #pragma clang for clang.\nAre you saying it didn't work for you?\n. I don't remember why I chose 8192 specifically but the general idea was that for \"small\" numbers it's generally easier to reason about them in decimal whereas very large numbers hex is often more convenient. There are substantial excepts either way, of course - but the issue here is the inconsistency!\nI'm not sure why you're getting one side printed one way and the other side the other way (as they should both be the same type). I'll look into it.\n. Ahh, I missed the point about the values being different. That makes sense.\nInteresting idea to print both. That's certainly quite doable. I do prefer zero-config options where possible.\nI'm not 100% sure, yet. As @vadz says it might result in a little too much noise.\nBut I don't see any harm in trying it out for a while. The current way is clearly not working out.\n. ah but if you always print the decimal value, but only print the hex, parenthetically, above a threshold (I'm leaning towards 255) then, while there is still scope for inconsistency you will still visually see the decimal values on both sides.\nThe worst part of the original problem is solved, at least.\n. that would be nice - but not really feasible (the ints are converted to strings independently - the string conversation function has no knowledge of the context in which it is being evaluated). Changing that would complicate things considerably\n. I've committed this (prints dec and hex if > 255) now as part of build 3. We'll see how it sits for a while.\nLet me know how you get on with it (and thanks for all the suggestions).\n. Thanks for reporting this - good catch.\nI've merged your PR into master.\n. Thanks for that - good catch!\nI've merged this back into master.\n. Actually my point was that test listing should be routed through the reporters - rather than being a separately registered system.\n. @kkutsner making sure the latest Catch2 build works with R++ has been on my list for a while, but I've been having problems getting into Windows :-s\nAre you seeing specific problems with it?\nPerhaps you could raise a new ticket here?. @kkutsner yeah, I spoke to MS guys about Catch support at CppCon, too :-)\nMind you, if I can't even get R++ integration right, then it's not a good sign! I'm actually planning some changes to help with IDE integration, so hopefully this will be more stable going forward.. So is there a Catch issue here or not?\n. Hi @mintyc. Sorry it's been a long time getting this (I'm just seeing it for the first time during an old tickets review).\nIs this still something that's relevant to you?\nIronically what you proposed used to be the case: INFO worked unscoped, and there was a separate SCOPED_INFO that had the behaviour that INFO now does. But I kept getting reports from people who found the behaviour of INFO surprising so eventually changed it to the scoped behaviour.\nSo perhaps the solution would be a separate macro for the unscoped case? UNSCOPED_INFO doesn't sound like a great name, but you get the idea?\nAnyway I'm going to put this back on the queue as a feature request.. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. See response to your forum question: https://groups.google.com/forum/#!topic/catch-forum/4ApDoQ2hXFQ\n. This ticket is quite old (sorry I didn't notice it at the time). Toolchains in the Apple eco-system tend to move quite fast, so I doubt this issue is still relevant.\nI'm marking it for closure, soon, but please let me know (@johnwbyrd, if you're still watching - or anyone else) if you're still having this issue?. Catch should work fine without nullptr_t - it depends only on C++98/03 - but it has support for some C++11 features if available. From what you were saying it sounds like the C++ version detection was not working for you (possibly because of using a different stdlib?). There are ways to fix this: either in Catch, if it's a case of better compiler detection - or in your code (or build settings) as a workaround if it's a case of disabling support for those C++11 features.\nHowever it's not clear if this is still relevant to you?\nIf it is and you'd like to have another go at this please feel free to re-open the ticket.. Manual test registration is now in on the develop branch - as of v1.3.0-develop.4.\nUse REGISTER_TEST_CASE( <function>, <name> [,<tags>] ).\n@johnwbyrd Are you using CATCH_CONFIG_MAIN or CATCH_CONFIG_RUNNER - and if the latter are you using Catch::Session?\n. The destructor of Session should be calling Catch::cleanUp(), which, in turn, should be clearing down all those static structures. If you get a chance to see what it thinks is leaking more specifically I'll take a look.\nI run it with leak detection on Windows and this does it for me but I've noticed in the past that doesn't catch everything for some reason.\n. Just a thought, but is your Catch::Session instance a global, or in a function scope?\n. Sorry, I think I missed this the first time around.\nWhen you say it's moot, do you mean it's no longer relevant, or that you have just given up (or just that the PR would need refreshing)?\nI'm trying to catch up on my backlog a bit...\n. I have a version of Generators \"working\": with sections on a local branch. It's not fully formed - and it's not fully tested. It's something I need to spend time getting right. I am ticking it over, though (after leaving it for a couple of years!).\n. I'm closing this issue in favour of a dedicated generators/ property based testing ticket, #850.\nBe sure to watch that issue for notifications if you're interested,. Closing this since we established it was not a Catch issue. Thanks @The-Compiler.\n@rhl- - does that answer your question?\n. Thanks @jespert.\nHowever please note that int main(int argc, const char **argv) is not standard c++! (see: http://en.cppreference.com/w/cpp/language/main_function). Some compilers may accept it as an extension.\nHowever your second example is valid - and there's no reason I should be stopping that from working, so I'll change Session::run to accept char const* const*.\n. @mgcrea I don't know if you're still watching - it's been a while since this issue was raised.\nDid you ever get a resolution? Or have any more info?. Ok. A few things going on here.\n Thanks, @luxe, for bringing this up.\nHowever TDD was the intended term in the first mention. The meaning being, regardless of how you normally write your tests (before or after the code being tested): here we're going to write the code first.\nI agree that I shouldn't just drop an acronym like TDD in there with no explanation, introduction, or even an expansion. I'll think about rewording it. However I intend to write a bit more about TDD in general and could just link to that (perhaps, for now, I'll just link to wikipedia or something).\nLater I mention BDD - but here I'm talking about something quite different. Again: guilty as charged - I didn't offer any explanation for the term. Perhaps a simple link, for now, will suffice - but really that should be expanded on a bit more.\nSpecifically I say, \"BDD-style\" to refer to the give-when-then structure. given-when-then is not unique to BDD, nor does it define BDD. It is, however, often associated with BDD - and BDD is seen as popularising it - so I'll continue to say BDD-Style - but should offer a little more qualification\n@itrion: BDD was originally meant to be \"TDD done well\" - with a little extra rigour and focus. BDD, itself, has evolved to emphasis the human communication more - with the impact on testing and design more of an artifact of the process. As such I don't think it's out of place to describe a way of doing TDD that emphasises a bit of structure on the way what is going on is communicated to be \"BDD style\". But we're getting a bit deep :-)\nIn short I won't take this PR as-is, but I'll try and clarify the wording a little. Thanks guys!\n. Sorry for not getting back sooner. I've done a bit of tweaking to support Semantic Versioning and am now tagging \"release\" commits.\n. I'll look into that @cinemast - looks like quite a bit of work to get set up\n. Putting the sub-expression containing commas in parentheses is correct, as @martinmoene and @kirbyfan64 propose.\nHowever I disagree that it impacts the \"expressive of the error message\" in this case. I think you're thinking of when the entire expression (including the == true) goes in parentheses, Martin?\nEither way does this address your concern, @luxe?\n. @cinemast: which build is that from?\nI did make some changes to the detection of nullptr support in GCC just recently. It's possible this will workaround the issue for you (but do look at #424 for @PureAbstract's comments for more background). Either way you can try with a global define of CATCH_CONFIG_NO_NULLPTR to see if that fixes it for you, too.\n. Of course I hadn't actually pushed those changes!\nI've done that now: v1.2.1-develop.11\n. As @martinmoene says, the original issue should go away if you don't #include files with tests in them.\nHowever, as for the referenced PRs for using __COUNTER__ instead of __LINE__ I've now merged my version of them into master (I'd forgotten I'd pushed it to develop-v2 but left master, initially).\n. @rec,\nSorry to hear you're having problems.\nI'm still not quite sure why you need to have the tests in header files? I understand the code under test is in templates, but not the test code, presumably? Perhaps you could post an example (stripped of anything proprietary)? I'd like to get to the bottom of what you are doing. I think one of us is missing something and it would be useful to be on the same page.\nHowever, regardless of that, you shouldn't be having issues with this now. The change I pushed back in March should have made the issue go away (for most people). That does depend on your compiler, though (as __COUNTER__ is not universally supported). May I know what compiler you are using?\nAlso are you using the latest version of Catch (and if not, which version are you using)?\n. Thanks for the reply.\nI think I follow you now. You're doing it as a Unity Build technique. I'm a little surprised that gives you a faster workflow as I usually find that slows down incremental builds (even if full builds are faster).\nHowever I have had to use them on occasion and I usually employ the use of extra namespaces to avoid unexpected name collisions in general (not just from Catch).\nI can understand you don't want to backtrack at this point, but if you can confirm one way or another at some point later whether you still have a name clash issue (when not wrapping in namespaces) I'd appreciate it. Clang should definitely be on the supported list (Apple's flavour is my primary development platform too) - so it should all be good.\n. Sorry for the delay getting back.\nIs this still an issue for you?\nI did discover that the check for compiler support before enabling the use of __COUNTER__ was not on all code-paths before the __COUNTER__ use - so it was inconsistent :-s\nI'm not sure if that was your issue but I'll be checking this in shortly and I'd appreciate if you, or anyone else that is seeing similar could try the latest build out if and when you get a chance. I'm flagging this issue for resolve-on-review just so I remember to come back to it in a while.\n. @rec the changes I mentioned should be in 1.6.0 now. Ha! Well, glad you're improving your test env. as a result of this ;-)\nNo rush from your side - but if you do see the issue again please raise a new ticket (or re-open).\nI'll close this for now, but if any of the other commenters discover any outstanding issues feel free to re-open (or raise new).. Yes it should have been fixed in 1.6.0, but now you've drawn my attention back here I realise I never did get confirmation.\nSo looks like there could still be an issue.\nInstead of re-opening this, let's continue in your new issue - I've linked it back here. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. I've had a look at this now and I'm not convinced this is the right way to go.\nI'll try and explain my reasons:\n1. What the assertion is testing is the boolean value that the object converts to. When Catch prints the actual value it should be the value that is actually being tested. That's not to say that the error string is not useful in this case - although I'd argue that that interpretation is specific to your usage. But the message is extra context, rather than the value being tested (I'll show you how you can have your cake and eat it in a moment).\n2. By taking your approach it breaks for certain other things that convert to bool - for example objects using the \"safe bool idiom\" (which typically return a pointer to a private member function). These now get printed as integers - which is not quite as friendly - even though we evaluated them as bools.\nI promised you your cake - and you can eat it by capturing the context using CAPTURE - e.g.:\nauto err = getError();\n    CAPTURE( err );\n    REQUIRE( err );\nFor me, with you example, that prints:\nREQUIRE( err )\nwith expansion:\n  false\nwith message:\n  err := some error string\nHow does that sound?\n. The current implementation of generators is not complete - and should be considered deprecated (I've had to write a whole new infrastructure for it to work correctly with sections - will have something to push some time in the future).\n. I've been using the <PREFIX>_OVERRIDE approach in my day-job code-base for a couple of years (slightly different: it uses the pre-C++11 VC++ extension to do that same thing - but also suppresses the warning about it at the same time).\nI might consider this, although as @rollbear says its not a huge gain - but it does risk breaking on compilers I don't test on.\n. FYI I've started doing this now. I've not rolled it out to all virtual overrides, but will increase coverage over time (and I've realised there's a lot more virtual than I'd thought!)\n. Forgot to reference this issue in the commit - but I've now done this. I agree that it's exactly how it should be done.\n. that's in the v1.2.1-develop.2 commit.\n. I'm going to close this issue, as I believe it is fully addressed.\nFeel free to reopen if you think there is more to it.\n. I've taken a first step in this direction.\nFirst, srand() is now called (with the same seed) before every test case is invoked.\nSecondly, the value of the seed is now globally available (from test case) by calling Catch::rngSeed() - so you can use it to see your own generator deterministically and repeatably.\nI do plan to provide an alternate to the current use of srand(), rand() and std::random_shuffle() for C++14+ compilers - but I believe what I've done already should meet your immediate needs?\nIt's available in the v1.2.1-develop.2 build.\n. @Morwenn - a bit late, I know - but Catch::rngSeed() returns 0 if it has not been set.. Thanks @fekir. If you could post the warnings you're seeing that would be a help.\n. Thanks for that.\nI've addressed some of them (in an, as yet unpushed, commit) - mostly the null pointer constant and shadowing issues. Most of the others are tricker. The enum switches are the most frustrating: Use just the cases you need + a default case and it complains the cases are no exhaustive. Add exhaustive cases and it complains there's no default. Have exhaustive cases and a default and it complains about unreachable code :-s I think I'm going to have to resort to disabling warnings for these.\n. If I read you correctly your issue has gone away?\nEither way I have now added the ability to disable C++11 feature use - individually (using, e.g. CATCH_CONFIG_CPP11_NO_NULLPTR) or en-masse (CATCH_CONFIG_NO_CPP11).\nIs your issue resolved?\n. Are there any versions of GCC that support nullptr but don't set __cplusplus to >= 201103?\nThe __GXX_EXPERIMENTAL_CXX0X__ check in there looks suspicious in that regard. I think I \"borrowed\" that bit from boost, at some point (I don't have boost sources on this machine to check).\n. After seeing https://github.com/philsquared/Catch/pull/471 I think I follow @PureAbstract's comment now.\nWe currently have this guard:\n```\nif GNUC > 4 || (GNUC == 4 && GNUC_MINOR >= 6 && defined(GXX_EXPERIMENTAL_CXX0X) )\ndefine CATCH_INTERNAL_CONFIG_CPP11_NULLPTR\nendif\n```\nI think if we just drop the first part (__GNUC__ > 4 ||) everything should work (because it will drop down to the later #if (__cplusplus >= 201103L) catch-all)?\nThat seems to make sense. I'm going to make a change on that basis.\n. Hi @judgeaxl,\nYes, whether you are using SECTIONS or the BDD-style wrappers for them, you'll need to nest for them to run in sequence. Peer SECTIONS are run in isolation from each other.\nSee my NDC Oslo talk for an example (about half way through):\nhttps://vimeo.com/131632252\n. Sorry for the silence on this. Sorting out the quirks of the versioning strategy has been on my radar for a while. Given the extra breakages and confusion recently I've picked this up properly.\nI've made some changes to fully commit to semantic versioning (it had been trying to go that way for a long time), refactored my versioning script(s) to handle this more cleanly and will start tagging as well.\nThere is currently no develop branch, but I'll get that going again too (I wanted this change to go straight to master so we have a consistent approach).\n. Thanks @Sumith1896,\nIt is intentionally that way. The square brackets are to indicate that the second argument is completely optional - so the comma should be inside them (as you won't include the comma if not using a second argument.\nIt's a little confusing because the second argument is the tags, which is a string containing identifiers within square brackets - but they are different.\n. I don't have a copy of Xcode 4 around, still, to try this on - but from the error message you posted (thanks for that) it looks like it's the std::map keyed on the type it's a member of that's an issue.\nIt looks like it's only the use of that map (in the methods) that it's having trouble with (seems to be from my scanning of the errors). So I've separated the implementation of those methods out.\nThis is included in v1.2.1, so please check that out and let me know if it fixes it for you.\n. That's a shame.\nI think the other error you are seeing (with the ?: operator) is a consequence of the first (because the type of second is incomplete it can't match it against NULL)\n. actually that can't be the case as TrackedSection is no longer incomplete at that point. Hmmm\n. Thanks. I'll close this issue as it is resolved for you. I might still try and avoid the self-referential nature of TrackedSection, though.\nThanks for bringing it up.\n. Hi @espenalb,\nThanks for trying Catch - and thanks for letting me know you saw it at NDC Oslo :-)\nIf you were in my talk (or did you watch the video?) you'll know that there is also a, half-baked, Matchers implementation in the framework (with an undecided future). That would be exactly the right place for such functionality - but, as I said, it's not in a production ready state right now.\n. @shreyasbharath docs are here: https://github.com/philsquared/Catch/blob/master/docs/matchers.md\nLet me know if you need more help.. Sorry - I need to make it clearer that it is there - and how to get to it.\nUnlike the other included reporters, the TeamCity reporter is not included in the single header version of Catch. You'll need to get the file, separately, from reporters/include/catch_reporter_teamcity.hpp and include that along side catch.hpp where you do #define CATCH_CONFIG_MAIN.\n. oh - and catch_reporter_teamcity.hpp must be #included after catch.hpp!\n. as of v1.2.1-develop.2 you can now get the seed by calling Catch::rngSeed().\n. Sorry all - I've been swamped over the last year or two and got so far behind on issues and PRs that I've been missing a lot of them before I even get to read them - including this one.\nThat's gradually changing now as my new job gives me much more time to focus on Catch.\nSo, looking at this issue my first thought is: people are still using Catch with Objective-C?\nI'll have a closer look at the PR itself and see if I can adopt it shortly.\n. This is very much still on my radar - and creeping up my list.\nWe've been making a lot of headway lately, but still in catch-up mode, so I can't promise a timeline (see http://www.levelofindirection.com/journal/2017/1/19/catch-up.html).\nIn the meantime, I don't know if it's of interest, but test runner integration with Catch is already there, now, in Visual Studio if you use ReSharper C++ (as of 2016.3), and will be in the next releases of CLion and AppCode (2017.1).. @pieceofsummer I'm very much interested and looking to include this very soon, so please raise that revised PR!. I suspect @pieceofsummer has moved on to other things. So it falls to me to look at the original PR and see how it can be applied to the current code-base. I probably won't get to that in the short term - but, of course, if anyone else would like to pick it up I'd be very grateful (and will try to prioritise reviewing any subsequent PR).. What is the \"parse error\"? \nThis should work (I do similar from time to time). In fact I tried your example and it worked for me.\n. Ah - I just spotted that you are using WHEN. I was thinking of SECTION.\nWHEN forwards onto SECTION, but before doing so it prepends the string, \"    When: \". It does it like this:\nSECTION( \"    When: \" desc, \"\" )\n- which assumes desc will be a string literal! That explains your issue.\n  The solution is simple (wrap the \"    When: \" in a std::string and use operator+).\n  I'll add this into to the next build.\n. This is in, now: v1.2.1-develop.9\n. Thanks for this. I've been meaning to look into it for a while.\nI think it's still not a complete solution. If the background colour is not black then the current foreground colours may not be readable. Still it's better than the previous situation - especially for the Powershell case!\n. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. Sure - seems like that should be easy for you to do. Thanks.\nMy only concern with this (without looking into it too deeply) is whether this would introduce portability issues, since it relies on an MS extension. Although it's protected by a Windows #define, there are non MS compilers that target Windows.\nBut those compilers must also consume Windows.h, so either they must support those extensions, or there must be conditional code in there too.\n. I agree with @DavidEGrayson's suggestion, based on the information given.\nDoes this address your need, @danijar?\n. @danijar If you want code to run at the end of a scope, regardless of whether an exception was thrown, you can use something like a ScopeGuard.\n. Eek! Thanks for reporting this.\nMy best guess (as I can't repro) is that GCC 4.8.4 doesn't guarantee that cout and cerr are initialised before other static objects (which AutoReg, near the bottom of that call stack is). Apparently it was intended to be guaranteed by the standard, but was non-normative in C++03. It should be guaranteed in C++11 - but none of that tells us what GCC does.\nCould you try this. Add the following member variable:\nstd::ios_base::Init m_ostreamInit;\nto the TestRegistry class. That should force initialisation of cout/cerr if not already. If that fixes it for you I'll add something like that into the code base.\n. This is now in (develop and master)\n. Thanks for reporting this.\nI took a look at the xml encoding code and realised it was overdue some attention - so I rewrote it - taking on board your control characters proposal (I actually encode them as entities, though).\nPlease let me know of this addresses your issue (dev build 9)\n. if I test @espenalb's original example myself with -r junit (or -r xml) I get:\na := &#x01;\n\nwhich I presume is what is expected?. A little wrinkle here - this is valid XML 1.1 (I believe). but not 1.0. We've been using XML 1.1 for a while now (for this reason) but that turns out to be problematic as it is not widely supported.\nSo I'm looking at reverting to XML 1.0 and instead of encoding these chars writing them as C-escaped sequences (e.g. \\x01).\nAny thoughts?\n(See https://github.com/philsquared/Catch/tree/Xml1_0). The Xml 1.0 changes went in in 1.8.0, so I think that concludes this issue.\nFeel free to re-open if you think there is still an issue?. Sorry - looks like I referenced this issue in a commit a while back but never followed up to make sure it was now addressed. Is this still outstanding or is it covered by that commit? (IIRC I did it differently as I used a more integrated approach that, I believe mitigates the extra performance overhead, amongst other things).\n. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. I'll definitely be looking at it. It's exactly the sort of thing I've been meaning to get around to adding for a while - so the work is very much appreciated.\nI'm just trying to work through my backlog at the moment!\nI should be able to cherry pick from your branch straight into master - so no need to retarget.\n. Sorry I never got back to this. I must have forgotten to make a note of it and- since it's closed with no way to reopen - it didn't even come up in review.\n\nAnyway, if this is still an area of interest for you you might like to know that I've been reworking the Matchers implementation. It's now much simpler - with far less templates in particular (and no CRTP!).\nThat's the good news. The (slightly) bad news is that it will break existing custom Matchers (although its not a big job to update them). Since you've been using them in the past I thought I'd give you a heads up before this gets merged to master.\nYou can find them here:\nhttps://github.com/philsquared/Catch/tree/new-matchers\n(or just the single include:\nhttps://github.com/philsquared/Catch/raw/new-matchers/single_include/catch.hpp)\nPlease let me know what your thoughts or - including if this is no longer relevant for you so I'll not wait for you.. Thanks for getting back. No worries at all. My main concern was whether I'd be breaking you.. Looks like NULL is interpreted as a long long here - and Catch's evaluator doesn't have an overload for it.\nI should get that (conditionally) added.\nIn the meantime another workaround (arguably the right solution) would be to use nullptr instead of NULL.\n. I've added long long support now (v1.2.1-develop.9). Please let me know f this fixes it for you.\n. Not sure what I was thinking when I put that \"all tests\" in there - perhaps it was a placeholder.\nIn any event I see no reason why it should not be as you suggest, @jfemia, so I've changed it to that now (will push later - you'll see a commit notification here).\n. Thanks for this David,\nActually a bit further down there's a big #if (__cplusplus >= 201103L) check for all compilers, so I've changed the gcc check to be specific to that 4.6 edge case and let the more recent versions drop down to the more general condition check.\nI believe this will have the same results (I've not pushed that change yet - but you'll get a notification when it is)\n. Are you able to confirm if my changes have the same effect as your PR?\n. I believe it was 1.5.0, incorporating #608 (thanks again, @rcdailey) - but, yes, I didn't report back here (or, in #608).\n. I've been catching up on my unread emails, as well as GitHub issues, and have recently chatted with @rcdailey over email about this.\nThe issue is with the test name (the string) rather than the generated test function name - so the __COUNTER__ won't help.\nMy first suggestion, which fits with @martinmoene's original comments in this thread, was to just make the names unique - but incorporating the name of the class under test (in the example) into the test name - which I think is more informative anyway.\nI did also make another suggestion, which was to revert to the original approach for test naming in Catch: use the name field as a uniquely identifiable string, possibly hierarchical - and not necessarily descriptive (could be a guid if you like) - then use the second field as a free form description - which doesn't have to be unique. This still works because only content in square brackets is considered tags in the second field.. I don't think the prefixed forms are used much. Ok, there's two - possibly three - things here:\n1. @LujunWeng's original question was about \"control[ling] the beginning of each test case\". I'm not 100% sure what \"control\" means here. But assuming it's just being able to run some code before, and possible after, each test case then I have some news that will help (more shortly).\n2. @Eloff's request asks for something like OnTestStart and OnTestEnd methods that can be overridden (a l\u00e1 GTest). My news relates to this. But before we get to that the use case referred to \"custom logging\" and only wanting to \"dump the buffer to stereo on test failure\". That's exactly what INFO does (https://github.com/philsquared/Catch/blob/master/docs/logging.md). Is there a reason that INFO cannot work for your use case, @Eloff?\nOk, so having concluded that neither interested party may, in fact, be interested after all - here's the interesting news :-)\nI've added the ability to add listener objects. From the way @Eloff describes them they sound similar to GTest's listeners - but I've not used those, so I don't know how similar they are.\nIn Catch a listener is really just a reporter. The differences are:\n1. They are registered using CATCH_REGISTER_LISTENER (actually there's an INTERNAL_ prefix on there at time of writing - I'll remove that).\n2. All registered listeners are used - in addition to whatever reporter is being used at the time.\n3. Listeners should derive from Catch::TestEventListenerBase  they don't have to - it just makes it easier by default implementing all the events so you only have to implement the ones you're interested in).\n4. You don't need to provide a getDescription() method.\nHere's an example (this needs to go in the same file as #define CATCH_CONFIG_MAIN or #define CATCH_CONFIG_RUNNER:\n```\nstruct Listener : Catch::TestEventListenerBase {\nusing TestEventListenerBase::TestEventListenerBase;\n\nvirtual void testCaseStarting( Catch::TestCaseInfo const& testInfo ) override {\n    std::cout << testInfo.name << std::endl;\n}\n\n};\nINTERNAL_CATCH_REGISTER_LISTENER( Listener )\n```\n(note this example uses C++11 features. In particular you'll have to write your own constructor to forward the ReporterConfig argument down if you don't have forwarding constructors available).\nThis is a new, currently undocumented (other than here), feature - available from catch-1.2.1-develop.12. It's possible I'll iterate this a bit before locking it down - so bear in mind the interface may change (at least the way it is registered).\n. Oh, I should say also: it's not just test case starting that you can monitor, you can implement event handlers for:\ntestRunStarting/Ended, testGroupStarting/Ended, testCaseStarting/Ended, sectionStarting/Ended and even assertionStarting/Ended. Also skipTest for test that are not run due to being \"hidden\".\n. Thanks @Eloff.\nAs for \"responding so quickly\": in truth you just got lucky ;-) I struggle to keep up and am not able to focus on Catch full-time so I miss a lot. Glad it's working out for you though.\nI didn't get the fact, before, that your logging was not part of your test code. Redirecting it to INFO when building for test could work, but I'm not so sure that's the best way, now.\nIn the reporters there is a means for them to specify that stdout should be captured (in the same way as the INFO macros) - but, currently, that behaviour is hard-coded per-reporter (e.g. see:\nhttps://github.com/philsquared/Catch/blob/master/include/reporters/catch_reporter_console.hpp#L30).\nI forget what my reasoning was there now. You might want to experiment by changing that false to true and see if it gives you the behaviour you want. I might look at making that behaviour configurable.\n. I'm just completing a bit of a reworking of the text formatting code (which, frankly, was quite awful! I can only apologise for inflicting that code on the world).\nIn the process I'm trying to recall exactly what my original intention was with that tab handling. In Catch SelfTest, at least, it only seems to be used by the test that is specifically testing for it.\nI don't recall ever documenting the behaviour - but it does seem to be causing issues here and there.\n@lightmare you described the behaviour above. Did you reverse engineer that from the code, or have you seen it explained somewhere.\nI'm strongly considering removing it entirely, since it seems to add unnecessary complexity to some already somewhat complex code.. @lightmare thanks for getting back.\nYes, that's what it does. My question was just whether your knowledge of that was just from looking at the code - and you've answered that - thanks.\nWhile it seems like a handy feature I don't think it's ever been used - and maybe is overkill for use in a test framework. So I'm leaning towards removing it (doing so fixes a few issues - including this one, I believe - although my rewrite fixes more - hopefully all).. Ah yes! I used to have a much richer help system built in - that's what it was for!\nFor now it's not being used for that (in Catch). It may make sense to restore it in Clara (at this point I'm not sure if I'm going to continue the C++03 version of Clara - or just keep that forked in Catch Classic and have a C++11 Clara be part of Catch2). Sorry this request has been around for quite a while. I know it's a simple feature to add, and I had intended to do so.\nI've now added it as the --wait-for-keypress exit option (you can also pass it start to wait on start-up, or both to wait on startup and exit).\nIt just prints a message and calls std::getchar() - so effectively waits for enter/ return.\nSee https://github.com/philsquared/Catch/blob/master/docs/command-line.md#wait-for-keypress\n. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. Ok - I've had a look now and this looks quite reasonable - and trivial to merge. Thanks for that.\nSo, given that the PR is dead I've cherry-picked the commit from your branch onto master (locally here).\nI'll push it with some other commits later.\n. Thanks for bringing this up.\nThe auto_ptr detection should be easy enough (should be able to use unique_ptr since at least VS2013).\nrandom_shuffle shouldn't be a huge job either, but it will require the alternate code, with std::shuffle, to be written.\nI'll try and get to looking at this when I get back from holiday (in a couple of weeks).\n. @rr - sorry I missed this the first time around.\nIs this still relevant to you?\nOne thing that has changed in the meantime that is relevant is the -# option, which results in every test case being given an additional tag derived from the filename (i.e. picked out of __FILE__).\nIt's not quite what you're after because only the filename is considered, not the path - but it might be a step closer to what you wanted.\nPersonally I'm not sure doing more than this is worth it. If you need an organisational unit beyond filename I think tags are going to be sufficient.\nWhat's still missing is the hierarchical listing aspect. I'm not sure how valuable this is in the general case. But if you're still interested we can talk more about that.. Thanks. Been meaning to do that for a while!\n. An update on this.\nAt time of writing Clion still has a problem with __COUNTER__ - so if Catch detects that it can use it there are still issues.\nHere's the three stage approach for dealing with this:\n\nIn the immediate term if you have these issues define CATCH_CONFIG_NO_COUNTER for your project.\nThe next release of CLion should have an identifier that is #defined during the IDE parsing stage and Catch will automatically disable use of __COUNTER__ when this is set (so you shouldn't need the workaround in (1) above).\nI know, from internal discussion, that the __COUNTER__ issue will be fixed in he mid-term future. That's not on the public roadmap yet, so I can't say when, but for our purposes here (2), above, should be enough for us.\n\nOnce the CLion identifier workaround in (2) is released I'll close this.. The latest CLion EAP version is ok now. But that won't be released as an official version until the end of the month, so I'm inclined to leave this open until then.\nhttps://blog.jetbrains.com/clion/2017/03/clion-2017-1-eap-disassembly-view-catch-msvc-changes/\n. The reason is that the section mechanism maintains some state between invocations of the test case - a record of which sections have been visited so far. By mutating global state between invasions, and changing the behaviour of the test depending on that state, you are subverting the section tracking.\nSo the \"fix\" is a simple \"don't do that\". I appreciate that may not be as straightforward in the real code as in this boiled down example (well done for triaging it so clearly, btw!).\nIdeally Catch would detect the repetition and abort it (with a message) -I'll look into that when I get back from holiday (it's not the first time this has come up) - but the non-determinism is the real problem - and will manifest in unreliable tests one way or another either way.\n. s/invasions/invocations/\nAutocorrect!\n. There are two things here.\nIn @czipperz's case I suspect getting nullptr to be defined is what is wanted. As @PureAbstract says that's not really a Catch issue, but that doesn't mean we can't help. I'm interested in whether the Catchless example @PureAbstract suggested repros the issue or not - since --std=c++11 should have worked.\nAside from that Catch should work fine without nullptr. The latest code on the develop branch has tweaked C++11 detection for GCC, as mentioned in #471, which seems like it should be solving the issue from the other angle (thanks for bringing that up @DavidEGrayson). So I'm also curious why that is not in effect. I presume that when @czipperz says, \"the latest release of Catch\" he is referring to the latest on Master. If so could you please also try the latest on Develop and report back?\n. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. Sorry Michael, I'm just really behind at the moment. This looks like a good PR - thanks for doing it. I'll try and get to it shortly.\nIf not before I hope to catch up on a lot (pun intended) the week of CppCon (two weeks time).\n. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. Sorry for the delay in getting to this.\nCould I ask what platform you're using (OS and compiler)?\nThe main reason for the Session class is precisely to make sure that all singleton data is cleaned up deterministically so that leak detection is not impacted. I regularly use it in a large VC++ code-base with dbghelp leak detection.\nAlso if you have any information about where the leaks are coming from in your case that would help too.\n. Thanks. Odd that that doesn't show up in my own leak detection.\nI'll look at getting that added to the clean-up.\n. The original issue was regarding the TagAliasRegistry which, for some reason, was operating as it's own singleton (using a method-scoped static - so not participating in early clean-up).\nI've changed this now to be managed by the RegistryHub, which is cleaned up eagerly at the end of the Session instance, so I'm confident that addresses @Hedanito's original issue (sorry it took so long to get back to this).\nAs for the additional \"leaks\" that @d-led raised I'm inclined to agree with @horenmar that these are false positives (I vaguely remember possibly discussing this in Munich, @d-led?).\nI suspect that what is being flagged is that an object is created with new as part of the parameter initialisation which, while it will have ownership taken within the function, would leak if the evaluation of one of the other arguments throws. In practise this is not an issue, but it would be nice if we could silence all analyser warnings. This is not as straightforward as it might be because I don't want to add too much extra machinery at this point as it's compiled into every test case - but will see what I can do.\nHowever I think we can probably close this issue in view of the TagAliasRegistry changes - at least once it makes it into the single include - unless anyone has any objections?. Thanks for all the triaging here (sorry it's taken a while to respond).\nI've just committed a few changes in this area (on Develop) which should certainly address the vector issue (it should no longer re-enter while iterating) - I'm hoping it will also avoid the uncaught_exception bug (which I'm unable to reproduce, so can't be sure). Please let me know if this change addresses either or both issues for you (I'll be particularly pleased if the uncaught_exception issue goes away without having to resort to the hacks mentioned off that link).\n. Hi @tm604 - thanks for the report back.\nDid you ever get to putting that \"minimal test case\" for the new failures?\nAny clues what the failures are?\n. Any objection to me closing this issue, now? (@tm604 if you're still seeing other issues please raise a new ticket if not related to this one).\n. That looks perfectly reasonable - thanks\n. Actually I'm reverting this. It was obvious in retrospect - but this actually breaks one of the fundamental features of Catch! (and for some reason I didn't run my full regression before accepting it - so my fault)!\nThe problem is that, by putting the expression in parentheses, it can't decompose the expression (because it's fully evaluated before getting dropped into my expression template).\n. I'll look at getting a pragma in there to disable the warning, though\n. Thanks for this,\nHowever I've now accepted https://github.com/philsquared/Catch/pull/512, which seems to cover the same ground and more (let me know if you think I've missed something, though).\n. I deleted the develop branch (which is now fully merged into master).\nIt hadn't occurred to me that would automatically close all PRs against the branch. Makes sense, though.\nI'm going to have to go back over them now and see which need reopening - probably not a bad thing as I'm behind anyway.\nIn the case of this one, though, I believe I committed a changed fairly recently that has the same effect. Sorry this PR slipped past my radar at the time or I would have used it/ acknowledged it.\nI'd appreciate if you could check out the latest master and see if it works for you translating Poco exceptions (etc).\n. Thanks for this.\nHowever I've actually already made essentially the same changes on the Develop branch. See:\nhttps://github.com/philsquared/Catch/blob/develop/include/internal/catch_console_colour_impl.hpp\n@Kosta-Github's observation is important, though. I've considered providing a few colour sets, mapped by background colour, but not got around to it yet.\n. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. Thanks for reporting your issue here, Nick.\nThe only difference between actually running the tests and just listing them with -l should be that \"hidden\" tests are still shown when you list them (but in grey, if you're using a colourised output).\nIn your example it doesn't look like any of your tests are hidden - although it's not clear if that output is from your actual code or just a representative example?\nIt also wouldn't explain the platform differences. I've not heard of anything similar on Ubuntu before.\nDo you see the same behaviour on Ubuntu with a simple test case that doesn't use Poco?\n. Thanks for this - however I've now added a script to do the job. More info in my comment to PR #304\n. This is no longer the case, as of 70d3c937c31bfa28fbba940d505b6de006ea8529. This is by design. I use this in my own build system to be able to obtain the number of tests available from a script without having the parse the textual output.\nI'm surprised you have no way of ignoring the return code in your build script. I might consider, in the future, making the return code behaviour configurable there - but I don't think I'll get to that very soon.\nSo in the meantime the best workaround I can think of for you is to add the proverbial \"extra level of indirection\". Invoke Catch from another script (probably just a shell script/ batch file - need only be one line) - at least for the test listing case - and ignore the return code.\n. The short answer is \"yes\".\nThe slightly longer answer is, \"yes - but it's not technically public - so is liable to change - in fact I'm doing some refactoring in exactly that area at the moment!\nHowever, if you're prepared to live with that (if I do change it there will still be another way to do it) then you can use this for now:\nCatch::getResultCapture().getCurrentTestName();\nOut of interest why do you need this?\n. I would love to!\nThere are a handful of very helpful, responsive and smart individuals in the community who frequently step in respond to questions and issues - for which I'm very grateful.\nBut keeping up with PRs is a different proposition.\nWhat I'm really lacking right now is better testing infrastructure (ironically) - in particular running on multiple versions of GCC, Clang and VC++ - preferably on multiple platforms.\nPersonally I develop in Xcode (Clang) on my Mac, but tend to give it the most use during the day on a Windows project (currently VS2013). There are Travis builds for Clang and GCC - but only specific fixed versions (rarely the ones that seem to have all the problems, it seems).\nDespite all that sometimes quite embarrassing regressions slip through if I don't review everything in excruciating detail (and even then).\nA more comprehensive set of environments would be a huge help - and would let me - or some other trusted maintainers - accept PRs much more quickly.\nMy biggest bottleneck is that I do most of my Catch work on my commute (when I'm not preparing talks, writing blog posts, learning new languages or working on iOS projects) - with intermittent connectivity. It's not very conducive to setting such an environment up. If anyone was in a position to help there it would be transformative!\n. Thanks for the replies.\nJust to be clear the issue is one of time and connectivity - not services and platform availability (although I am open to suggestions there).\nTo give you an idea: it just took me five minutes to open this page and whether I can post this response straight away or will have to wait another 10-20 minutes I don't even know yet. Yesterday, on my way home, I could't get a single page downloaded!\nSo, for me, working with any cloud hosted environments is just not possible.\nIf anyone else would be happy to do that, though - at least to do most of the work of getting something set up - that's what would really help.\nAs for Windows licenses: Azure might work out to be a good option. But I also have a Mac Mini sitting idle at home that can run Windows in a VM (and I have licenses for XP and Windows 7, at least). I can also run different flavours of Linux in a VM (which is something I started doing on my laptop but any time I get stuck it just takes too long to be able to work stuff out without a reliable connection).\nI can run TeamCity on my Mac Mini - which, apparently, can interact with local VMs - as well as Azure and AWS.\nIf anyone wants to volunteer I'd be happy to open up VNC ports to my Mac Mini if it would help.\nIf you have a preference for other cloud solutions I'm just as happy.\nNext time I have a stable connection I'll take a look at AppVeyor (I currently can't reach it).\n. @michaelbprice - you asked about \"requirements\".\nI'd like to be able to use as many representative OSes as possible (Windows 7 & 10, OS X - latest is fine - as I say I can provide that, and as many popular Linuxes as people are happy to set up and maintain).\nOn Windows I'd like to test with as many as possible of: VS2008 (still used by many), 2010, 2012, 2013, 2015. Ideally gcc/ clang, too. Any other compilers (e.g. Intel) a bonus.\nOn Mac & Linux a representative range of GCCs and Clangs in common use is the obvious requirement. Exactly which versions I couldn't say - the main thing would be getting it set up to run multiple versions (this is where I've got stuck before - even manually switching GCC versions on my Mac seems to be a lot more work than I would have expected). I would imagine that once it can work with 2-3 versions, adding more as required (e.g. a bug is filed against a specific version) would be relatively straightforward.\nIn terms of what needs to be run I have a reasonable start at a test suite. It can certainly do with being extended (in particular exercising more of the command line options - and combinations thereof). But I can do that here. I might still need to do some more work to make it runnable in a platform independent way. It does require Python, but I doubt that is an issue.\nThe way it works (currently) is to run the CatchSelfTest project with a range of command line options (at the moment it's mostly different reporters with some combinations of only successful tests, as well as (deliberately) failing tests). It captures the output in a text file, strips out some volatile information: e.g. line numbers and memory addresses, then does a textual diff against baselines.\nAs I say this can (and should) be extended in at least a couple of ways: (1) more command line combinations and (2) using both the multiple and single-file versions (currently it only runs the multi file version).\nI am, of course, open to other ways that this could be extended.\nOne opposing force here is that the regression-based approach can tend to be quite noisy with false positives because any change in the output - including just adding new tests - requires manually \"approving\" the changes. This is usually manageable enough, although sometimes can be quite subtle and I've let bugs in - even though they did show up - because they've slipped past in the noise. Any suggestions for doing better there would be welcome.\n. It's been a while since this discussion started but this is a good time to reinvigorate it, I think.\nAs discussed here: http://www.levelofindirection.com/journal/2016/12/22/on-joining-jetbrains-1.html my circumstances have changed and (a) I should have more time for Catch (despite a slow start there) and (b) when I am working on it it's in a decent environment with stable internet now!\nAdditionally, I'm pleased to say that @horenmar has become a key maintainer and has been generously investing his time in helping to work through the backlog (thanks again, @horenmar!).\nThere's a way to go but it's going in the right direction now.\nOne of my focuses now is to get the test environments I mentioned before up and running. I've already done some work to make my release scripts more portable - as well as making CMake more useful.\nI'm planning on getting a TeamCity server up and running, which can interact with build agents on different platforms. This was my plan even before I joined JetBrains - but makes even more sense now :-)\nThat doesn't preclude extending the use of Travis further, or using AppVeyor - but it feels like I should have more control over my own TC instance (especially after the issues with the Travis builds last year). That could just be my lack of experience with Travis or AV - feel free to try to persuade me otherwise.\n. Thanks for this!\nI didn't realise you can test against multiple versions of gcc/ clang etc on Travis. How far back does gcc, in particular, go?\nIn any case this would be a a great step forward. I know there was another PR relating to container-based Travis - was that from you? I hadn't had a chance to look at it.\nI'd still like a build system with more control - so we can run those Python scripts too (unless you can do that in Travis?)\n. Thanks again for this. I'm definitely going to have to look into this more - but I don't see any reason not to start with this right away.\nNext steps are getting the Python scripts to run...\n. Disabling PCH for the main cpp file is exactly what I do - for the same reasons.\nIt's not possible to use Catch without CATCH_CONFIG_MAIN or CATCH_CONFIG_RUNNER in one source file - because this is what causes Catch do compile in all the implementation code (i.e. what would normally be in cpp files). In general I have my main cpp file only do the #define and #include (and possibly some other one-time Catch related things, like setting up exception translators). I've not found this to cause any undue slowness.\nIf you do want to achieve the same effect as having a pch for your main file you might be able to compile it as a static lib once and use that instead of the cpp file? (I've not tried that and I'm not sure how that interacts with main() being in a lib). If that works you'd only have to recompile the lib any time you get a new version of Catch.\n. Oh, and do make sure you're familiar with: https://github.com/philsquared/Catch/blob/master/docs/slow-compiles.md\n. Whether you split them over several strings in the vector, or put them all in a single string, a series of tags forms an AND expression (so all the tags must match). To OR tags together use a comma. It's easier to do that in a single string, e.g.:\ntestsOrTags.push_back(\"[Sum],[Sum1]\");\ntestsOrTags is really only a vector as an artefact of the way it's read from the command line (because space separated arguments come through individually). I could change that to just append to a single string - which might make it clearer when you're populating it programmatically - but I'm not sure it's worth it. I don't think it's used very much (I could be wrong).\nThe ANDing and ORing is described in the docs for the command line, btw:\nhttps://github.com/philsquared/Catch/blob/master/docs/command-line.md#specifying-which-tests-to-run\n. @alialsalim did that answer your question? Can I close the issue?\n. I think @Darelbi's suggestion is to use an exception from the helper function to communicate the failure, but catch it in the test case itself and record it as a failure there (so you have the file/ line# in the test case).\nThat can be made to work but I think it's fighting the system a bit, and more work than I'd like to do in my test code (btw, @Darelbi, there's certainly no limitation on assertions in functions outside a test case - as long as the test case is somewhere on the stack at the time!)\nSo, going back to the original problem - how to get file/ line# of the location in the test case that called the helper function? The way I do this sort of thing is just to start a section immediately before calling the helper. Something like this:\nSECTION( \"Calling helper function - put better description here\" )\n  CheckAlmostEqual(Foo(1), Foo(2));\nNow the file/ line# of the section is recorded (as well as the assertion) - and you're working with Catch rather than against it - and no new features are required :-)\nHowever, with your specific example it looks like you may be trying to do tolerance matches with floating point values? In which case Approx would be the better tool.\nIf not you might also consider writing a Matcher (not documented yet - but you can probably work it out - let me know if you want more info on that).\n. Sorry I missed this at the time.\nIf you're still watching (@vadz, especially), this turned out to be a bug in the console reporter where it was using the line # of the test case rather than the section. I have now fixed this on master (ab44fb6811f1fee96fcb66ceb448602686bc5e41) and it will be in the next patch release.\nWith that fix I believe my suggestion addresses the original issue - but let me know if you think otherwise. I'll close this shortly if I don't hear anything.. Sorry I should have been clearer. It's on master - in the separate (source) includes - but we haven't generated a new single_include yet - hence me saying, \" will be in the next patch release\". That will be 1.7.2 and will likely happen tomorrow.\nAs for why use SECTIONs - and why not _AT variants - the latter extends the framework with more code and more interface (and more complexity) for a narrow use case that can be easily achieved using the SECTIONs approach. That's only a good reason if I can convince you that using SECTIONs like this is a good approach :-)\nIn fact I'm not sure that SECTIONs are the best approach here after all. They were for a few cases I've had that looked similar at first - but in your case you're using a helper function but want to make it work almost like a custom assertion. Does that sound about right?\nIn that case I think a Matcher would be the best approach. I'm just about to update the current, undocumented, Matchers impl with something simpler and nicer to work with and will document it and make it officially part of the public API. I have the new implementation on a branch now (https://github.com/philsquared/Catch/tree/new-matchers) if you want to take a look at it.\nBut what do you think about that approach for your purposes?\nYour example would end up looking something like:\nc++\nTEST_CASE(\"Check almost equality\")\n{\n   CHECK_THAT( Foo(1), AlmostEquals( Foo(2) );\n}\n. The trouble with the helper function, other than the file/ line info, is that you also lose the descriptive breakdown of inputs and component parts.\nA matcher is a little more involved to write, yes - but only because it allows you to do all those things - and all in a consistent and standardised way that works with the framework rather than trying to hook in at too low an level.\nv1.7.2 is released now - so that fixes the SECTION file/ line bug mentioned previously.\nIt also means I've now pushed my matchers changes, including docs, to master (note: not in the  single include yet). See the docs here: https://github.com/philsquared/Catch/blob/master/docs/matchers.md. Ha! I didn't spot that either - and I was just about to start looking into that!. Well spotted. Thanks!\nI've corrected it to what I think was my original intention (close to your guess) - on Develop for now - will merge over to master later.\n. This is the classic short-coming of macros in general. Because macros are unaware of C++ syntax (and templates, in particular) they do not recognise the < and > brackets as anything special - and so see the , in the middle as a macro argument separator.\nThe usual workarounds are:\n(a) specify your types outside the macro - either as you have done, or by using a typedef.\n(b) place the type definition in parentheses, e.g.:\nREQUIRE( (myTemplateFct<int,double>()) );\nHTH\n. This is not \"working as intended\". It's a bug. One I've not seen or had reported before, yet - after looking at the code - I can see it's been there for a long time!\nBasically: when control leaves a leaf section before encountering further peer sections it doesn't know that there are more to discover. It used to (prior to changes that went in with v1.0) do one extra run through the last section to make sure. When the section tracking got reworked for v1.0 that step somehow got overlooked!\nSo thanks for bringing this up! I'll try and get it fixed in the near future. It's bad timing in a way because I'm having to redo the section tracking yet again (to be able to handle Generators) but that work is in progress and I don't know when it will be ready to roll in (and will possibly be a v2.0 thing anyway). So I'll have to fix this independently.\n. The new section tracking code is in (on Develop) and fixes this bug. if you get a chance I'd appreciate if you could verify it and report back.\n. Thanks for letting me know, @MoronsRuS.\nI'll be rolling current Develop into master soon.\n. Why does it need to be stable across machines?\nInternally sections are identified by a string that is built up using (amongst other things) the file and line number - but that doesn't meet your criteria.\nI also suspect you'll run into problems with the re-run mechanism sections uses (was it you I was talking to about this elsewhere?).\nI've just (yesterday) pushed a big commit that completely reworks the section tracking logic in a way that allows different things to be hooked in. This is going to be the basis of my own property based testing feature (a reworking of the never-quite-finished generators feature). However it may be useful for you if you still want to integrate RapidCheck.\nI think with this new mechanism you should be able to construct a unique ID based on the ambient test case name and stack of section names - which you'll have access to. I haven't documented any of this yet - and am reluctant to do so just yet as it's all brand new and still subject to change - but we can talk more if you're interested.\n. The way sections work is that the whole test case is run multiple times - each time following a different path through to a different leaf section. The section tracking logic I talked about is what does the bookkeeping for that. My own attempt at a basis for property based testing (a form of parameterised testing) - generators - has had a long standing issue where they are basically just not compatible with sections for that reason. This new rewrite is in preparation for fixing that - and I've done it in a modular way that should, in theory, be open for anything else to hook into (with a little integration code).\nI'll need to take another look at how much of the section naming is available to you within that - I may need to expose a bit more - but if you take a look at the IndexTracker class in the latest develop build you should get an idea.\n. @emil-e, if you're still watching - did you get anywhere with this?. Ok, no problem - thanks for taking the time to respond.\nDo you think it's something you'll get back to - or should we close this ticket?. thanks\n. The comparison itself is a pointer check.\nHowever Catch will try to convert both sides to strings for reporting purposes. The overload of the function that does this for char* assumes it is pointing to a string - and that's what would be triggering the sanitizer error you're seeing (in fact you can see Catch::toString() on the stack in your error message).\nFunnily enough the treatment of char*s as strings came up somewhere else just recently - although for different reasons.\nIt does raise the question of how to deal with invalid strings. I'm not sure there is any easy way that doesn't make the vast majority of cases (where the char*s do point to valid strings) much more verbose and inconvenient.\nAs you have noted you can avoid the issue by casting the char* to something else (probably void*) to indicate that you are only interested in the pointer value. For now this would be my recommendation. If you come up with any other ideas do let me know.\n. I think the times you actually want to do a pointer check on char* pointers is rare enough that just doing void* casts is fine. I don't think it justifies extending the framework.\n. So are you saying that the result of PR #471 fixes the issue for you (I just noticed that one should have been closed but was still open)?\n. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. @michaelbprice I'm not sure what the problem is with your second example (with the throw 1) - is it that no assertions are reported - even though there is a FAIL written there? It is not possible for Catch to even be aware of that FAIL, given that it never reaches that code - and even if it could (perhaps some form of reflection) I don't think there is any logically consistent way it could be reported - or am I missing something?\nAs for the original issue I think the key here is, \"I'm not sure the semantics of the JUnit format are terribly clear\". The JUnit/Ant format is not documented so is open to interpretation. I think what Catch is doing here is a valid interpretation. IIRC I made this choice because there was no other way to get the individual number of assertions reported.\n. Thanks for catching that.\nI couldn't merge the PR as it conflicts with the single_include header (in general please don't update the header in single_include as it is generated by splicing all the other headers together).\nSo I've just reapplied the same fix - will make it in to the develop branch soon,.\n. I put the comment there about overloading, rather than specialising, because (a) being consistent seemed more reliable in general and (b) overloading seemed to work in cases that specialising didn't for me (although I never fully understood why in those cases). Overloading tends to be more forgiving too, and is generally the preferred approach.\nIf specialising works for you great! It may not do so portably, though (depending on what the underlying issue is that stopping overloading from working.\n@jedwards1211 re the multiple symbols - did you mark your specialisation as inline?\nAnyway, instead of specialising toString() you might want to try specialising the StringMaker template struct: https://github.com/philsquared/Catch/blob/master/docs/tostring.md#catchstringmaker-specialisation\n. TBH this is an area I get a little hazy on (perhaps @PureAbstract will drop in to clear things up?).\nBut I believe there are two ways this can trip up: (1) is to do with two-phase lookup and so non-conformance in this area (I'm looking at you, MSVC) may yield different results than a conforming compiler (and so it would be fair to classify it as a bug - albeit one of, known, non-conformance). But (2) is to do with an aspect of implementation defined behaviour that governs the timing of when dependent instantiations are fully resolved. This is the one I'm hazier on - I don't even remember the details well enough to describe it now - I just know I've hit it in the past where different compilers may end up putting templates together in different ways - or not compiling - but all in adherence to the standard! I don't know whether that one is at play here - more likely to be 2PL.\n. Thanks.\nI also spotted this when I did a Visual Studio build - but I've made the change the other way (the Not struct is now a class).\nSo I'm going to close this PR but will mention it in the commit message.\n. @blerest - are you still seeing this issue?\n. Thanks\n. First off - do you want to check for throwing or not-throwing (you started with the former then went on to talk about the latter)? This is important as the reasoning is different in each case.\nIf you want to check that the constructor throws, as your first example showed, then why do you need to do anything else with the object once constructed? The test would have already failed by the point. I see you are using CHECK instead of REQUIRE so the execution would continue - but that capability is intended for catching multiple orthogonal properties (e.g. several fields on a returned object). Here you're testing an invalid object.\nIf you want to check that the constructor doesn't throw then you have a few options. The simplest is to not use an assertion at all! Catch will still catch the exception thrown, translate it for reporting purposes, and mark the test as failed. The only downside is that you don't get the exact file/ line reported or the failing expression captured. But it's not bad for no effort and is usually the trade-off I make.\nThe second option has already been proposed: just use heap allocation. If you're worried about bad_alloc, as @nabijaczleweli suggested, I believe you are over-thinking it. If you might get a bad alloc there then you might get it anywhere else.\nThere is a third option, which is to move the code that uses the object off into another function. Either construct the object in the function too, or construct it at the call site and pass it in by const-ref. E.g.:\n```\nstruct TestClass {\n    int m_seven;\nTestClass( int seven, bool shouldThrow ) : m_seven( seven ) {\n    if( shouldThrow )\n        throw std::domain_error( \"you asked for it!\" );\n}\n\n};\nvoid verifySeven( TestClass const& obj) {\n    REQUIRE( obj.m_seven == 7 );\n}\nTEST_CASE( \"Constructors can be exception checked\" ) {\nCHECK_NOTHROW( verifySeven( TestClass( 7, false ) ) );\nCHECK_THROWS( verifySeven( TestClass( 7, true ) ) );\n\n}\n```\nThe shortcoming of this, as written, is that if something in the function throws it would also be caught by the top level assertion (either as a false positive or a false negative). This could be addressed by using CHECK_THROWS_AS to test for a specific exception type or CHECK_THROWS_WITH to test the exception message. Either way this is spiritually the same as your split-macro proposal - but without the need for any additional syntax in Catch (note that your BEGIN/END aren't quite right as they'd have to expand to include try{ and }catch - thus creating a scope - so you'd have to move the other checks inside.\n. All that talk of heap allocations and now I'm going to Garbage Collect this issue ;-)\nIt looks like it was resolved to @rcdailey's satisfaction - and that was a year ago.\nBut if you feel there was any more to discuss please feel free to re-open or raise a new issue.\n. Further to @jfemia: https://github.com/philsquared/Catch/blob/develop/docs/own-main.md\n. Yes, if you need clean-up within a test case you should use some form of RAII (whether that's with a unique_ptr, scope_guard, or some class of your own design).\n. +1 for \"RAII is the only guaranteed solution\".\nThe fact is, in the five or so years I've been developing Catch, and using it in several projects - including a >1m LOC financial system - I'm not sure ever had to even do that. As a rule any resources that should be \"clean-up\" are already in RAII objects.\nEven if you look beyond unit tests (I use Catch for integration tests and others) things like file handles, database connections etc are all wrapped in objects that clean themselves up.\nIn any case we're getting off the original topic. @rcdailey are you happy that your original question has been answered (by @jfemia, augmented by the link I posted)? Can I close the issue?\n. This sounds like a great candidate for Listeners!. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. Catch has the ability to translate custom exception types (even those that do not derive from std::exception) into strings.\nUnfortunately (a) this was not documented and (b) anything deriving from std::exception was caught first - so only types not deriving from it worked this way.\nI've just fixed both those things (in v1.3.0-develop.3)!\nSee the docs at the end of https://github.com/philsquared/Catch/blob/develop/docs/tostring.md.\nThere's not much to the docs but I think it's fairly simple. Let me know if you think it needs more.\n. It does!\nWell it doesn't print the type separately from the exception message. To do so would run into the demangling problems you already alluded to. That's not out of the question - but not extra complexity I want to add unnecessarily. So far I'm still falling in favour of not demangling names.\nOr is there something else it's not doing that you're missing?\n. Have you used #define CATCH_CONFIG_MAIN somewhere?\n. This version of Catch will continue with it's own forked version of Clara (as Clara will move on to C++11 and be used by Catch2) - so I just fixed this in-place. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. Good catch - thanks! All sorted (puns intended)\n. Sorry - I hadn't spotted this PR before.\nI fixed it a slightly different way, anyway.\n. I didn't see this the first time around but I'm pretty sure this is just a case of \"the straw that broke the camel's back\".\nI'm going to close it but if you're still watching, @kerdemdemir. and still think there is an issue please reopen and let us know your thoughts.\n. Thanks for bringing this up.\nThere's really no reason for it to be const (other than const usually being the right thing to do - but in this case it makes it non-standard - and it gets handed off to a function that takes as a char const* anyway.\nSo I've reverted it to char*[].\n. I forgot to follow up - are you still seeing this issue?\n. OIC. That makes sense (in a buggy, VS2013, kind of way).\nI hadn't noticed that I'd written REGISTER_TEST_CASE differently to the other forwarding macros - which explains why I hadn't seen this issue before (I use Catch with VS2013 daily - but have never used REGISTER_TEST_CASE outside of the test project).\nI've committed a fix, along the lines of your suggestion - which brings it into line with the other forwarding macros. I've only tested that with clang so far but it sounds like you've already verified the equivalent with VS2013.\nI've not done a single header release with it in yet - but if you're able to verify it in the context of the multiple-headers test project that would be great - thanks!\n(I also only remembered, after pushing, that I hadn't fixed CATCH_REGISTER_TEST_CASE so I've done that now too, locally).\n. Apologies for the premature closure - I deleted the branch and it auto-closed all associated PRs - it wasn't intentional.\nI also can't re-open it at this point - but I'll come back and review shortly.\n. @RossBencina I'm really sorry that you feel ignored - and especially rebuffed! I really appreciate your contribution over the years. I just haven't been able to keep up.\nI'm stoked that @horenmar is now doing a superb job in helping to change that!. Looks like I already fixed that. I didn't think anyone was looking at v2 yet so I updated it in-place (rather than inc the build #). Could you check the timestamp at the top of the generated header and compare it with this:\nhttps://github.com/philsquared/Catch/commit/693355cc7530535c2b43a85da775ea4901b67eb6\nAssuming you have the 8:41 version please grab the newer one and try that.\nYou'll notice, too, that the updated commit uses CATCH_AUTO_PTR instead of std::auto_ptr directly. If the ability to use std::unique_ptr is detected it will use that instead.\n. The way SECTION discovery works it has to execute the code up to a SECTION before it knows about it (under the hood SECTIONs are just if statements which look up in a table of what's run and what hasn't).\nIn your first example, after executing the SECTION Catch knows that it has run all the code in the test case, so does not need to re-enter.\nIn the second example, because you throw from the first SECTION the test case is ended early. Catch now doesn't know if there are any further SECTIONs that need to be executed, so it has to run it through again (skipping over the first SECTION) to see if it encounters any more. In this case it doesn't - so it executes all the code in the test case outside the SECTION.\nAt one point I had it so it always did the final, sectionless, run-through - for consistency (in fact it did the sectionless run-through first - that's the behaviour being discussed in the linked issue).\nI had quite a bit of feedback to say that was unexpected - and sometimes a problem - and I found it inconvenient myself. So I pruned it back to the \"only when necessary\" case (with sectionless run, when necessary, only at the end) we have now.\nI hope that clears it up?\n. It's mostly covered here:\nhttps://github.com/philsquared/Catch/blob/master/docs/tutorial.md#test-cases-and-sections\nBut I agree it doesn't specifically mention that this implies a run through with no sections under some circumstances. I'll try and get something added.\nIt may also be worth covering that ground in the ref docs, not just the tutorial.\nThanks for the feedback.\n. A few observations:\n1. Catch already has a signal handler. It doesn't attempt to fully recover from it (as that is not possible in the general case) but it tries to reconstruct its immediate context just enough to print out the final results before terminating. Not quite what you want - but worth bearing in mind. I haven't looked at the references cited that suggest that SIGABRT is fully recoverable - but it's possible the existing handler could be extended to allow that (do a search for \"fatal\" in the codebase to see all the places it would touch).\n2. Spawning a child process for testing exit status, terminal behaviour, or just to be able to run test in full isolation (if you're prepared to pay that cost) is the approach I've had in mind for this. I've been putting that off as it's a non-trivial chunk of work - but it is on my list.\n3. In the meantime if you want to be able to do this yourself (either writing the spawning code into your tests, or controlling from a script) then just remember that this is an ideal application for tags. Tag the tests you want to run in isolation - and probably \"hide\" them too (tagged, [.] or with the . prefix). You might also want to combine that with --list-test-names-only, which writes test names out line by line. A script can write out all the tests tagged for running in isolation, then read the file in and execute Catch for each line.\nHTH\n. I think this would be better as a Matcher.\nSee https://github.com/philsquared/Catch/blob/master/docs/matchers.md. You are very daring ;-)\nHowever the idea of \"native operators\" breaks down when we're introducing more specialised, higher level and fine-tunable  ways of performing comparisons.\nThe Approx type already makes \"unnatural\" use of the comparison operators. If Catch had had Matchers at the beginning I probably would have written it in terms of those, too.\nMatchers are also a user extension point - so you can add your own Matchers to do whatever you like and they work the same way. That's not to say that something like an \"Approx\" Matcher for containers does not belong in the core framework - but just that we don't have to cover all possible cases.. This feature is called Generators and is something I've had on a the back-burner for a while. I've recently been working on it again a bit more - but it's still a little way off being ready.\nIt's also the basis for a push into Property-Based-Testing that I'm working on.\n. A little update on this:\n1. Although I did get some basic generator stuff working in Catch as-is I kept hitting things that would be either much simpler with C++11, or, in some cases, only possible with C++11 - or even 14! (e.g. I really want it to work with Ranges). So I've decided to push it to Catch2, which will be C++11 (+) only.\n2. I thought I'd have a lot more time to work on Catch given my recent move to JetBrains, but so far it's worked out that I've had less time! I'm still confident that that situation will reverse in the near future, but for now it's set me back more than I expected.\nSo, in summary, it's all still coming - but still not for a while yet, I'm afraid.\nI'm not committing to anything but I really would like to have something concrete early next year.\n. At time of writing Catch2 is on hold until the Catch \"classic\" backlog is under control.\nWe're well on our way towards that now - but a way to go yet.\nSee: http://www.levelofindirection.com/journal/2017/1/19/catch-up.html\n. I believe I have answered this query now (even if not entirely satisfactorily) - and objection to me closing it? (@capsocrates, if you're still watching?). I'm closing this in favour of #850, so be sure to watch that issue for notifications.. Is this your own project, or one of the ones from the Catch repository?\n. Sorry about that. catch_with_main.hpp got a bit left behind. catch_runner.hpp was deleted back in August. I've fixed things up now.\n. Resolved, yes. Sorry it's been a while for me to jump in here. I've had half an eye on the discussion but not had a chance to look closely or respond.\nI think the approaches discussed here are very interesting - and I'll certainly seriously consider them. However I have a feeling they may be a case of attacking the symptoms rather than the underlying problem. That's not anyone here's fault - it's simply down to the early design decisions I made which I may need to revisit.\nOriginally Catch was focused on pure unit testing and, as such, I felt that allocation overhead - and performance in general - was not an issue for Catch as the intended use case was not performance sensitive. So I concentrated more on keeping things simple where possible (especially important given the extra complexity I was letting in elsewhere with the expression templates).\nSince then Catch has evolved to cover what I call Integration Testing (you may classify it differently: but basically any type of test that fits well with the implementation level testing of a test framework like Catch, but which doesn't meet the Michael Feathers definition of a \"Unit Test\"). Integration Testing can often involve volumes or complexities that do, indeed, start to run up against performance bottlenecks - so for a while I've realised that those design decisions are no longer valid. That said I still want to err on the side of simplicity over micro-optimisations.\nIn short I need to take a more holistic look at how things are hanging together to see if I can remove the need for allocations (for example) at all on the hotter paths. I haven't done the analysis myself, but from what I'm hearing (from you guys and others) those string conversions are probably the biggest bottleneck at the moment - but addressing those alone may not be enough.\nFor even more context one of the big things I'm working on for Catch 2.0 is Property Based Testing - and my early prototypes are definitely running into performance issues - so I need to address it as part of that at the very least.\nSo thanks for all the discussion - and PRs - around this. Please be assured I'm taking it all onboard - even if I'm not as responsive here as I'd like to be!\n. @mg262 does it return an error code?\n. The current workaround for this issue is to suppress the warning for your whole test file (using the appropriate pragma for your compiler). Not precisely the same thing but if you write a test case (or section) that has no assertions you can get Catch to warn you about them....\nAlternatively you could put a FAIL in there and add the [!shouldfail] tag. That way it will show up as a failing test without impacting the test failures count.\nDo either of those possibilities fit the bill?\n. Wow that's terrible code! Did I write that? (checks... yes I did. I am ashamed).\nYou are quite right that, given the approach being used it should be using rfind().\nBut the approach itself seems like an awkward way to do it. I can only imagine that I started with Contains() and made the minimum changes necessary to morph it into StartsWith(), then EndsWith().\nBut given that I already had the functions startsWith() and endsWith() (https://github.com/philsquared/Catch/blob/master/include/internal/catch_common.hpp#L19) I don't understand why I didn't use them.\nSo, thanks for bringing this up! I'll take a closer look later and clean things up a bit (fixing the latent bug in the process).\n. I never got back to you about this.\nI implemented your suggested fix - but it turns out that has an unwanted side-effect (see #657).\nI'm considering using !!(expr) instead. That seems to do the trick for me but I'd appreciate it you were able to confirm that it has the desired effect for you, too?\n. Actually I'm fairly confident that this should work for you. I've pushed a commit with the change in.\nPlease do let me know if it causes any problems.\n. The problem with the && overload was that short circuiting was disabled - and the whole point of this expression was for it to be seen by the compiler (so you get natural warnings etc) without being evaluated at runtime.\nUsing !! puts us back into the realm of short-circuiting, so the original expression should not be evaluated at runtime.\nAt that point as long as the ! operator compiles for your type (and, ideally, doesn't generate any warnings) then it shouldn't matter what it actually does - it cannot influence short-circuiting here so should never be executed.\nI put together a little test case for this which reproduced your original issue when I didn't use the cast or the !! - but had no issues (with && or !) with the !! approach.\nSo I'm inclined to leave things as they are here. If anyone else hits problems with it I'll consider reverting back to the original, though.\nThanks for taking the time to respond - especially given that the original issue no longer applies to you!\n. Ah but it is reproducible if you take out the explicit operator bool. although I'm not sure how this is meant to be used in an assert if there's no way to interpret it as a bool.\nI've confirmed that no warning arise with (implicit) operator bool too.\nIf @hpesoj is still watching perhaps he can comment on how well @horenmar's example captures the problem (or if, indeed, there is still a problem).. Originally, yes, @lightmare.\nBut when it was changed to !!(expr) he then said that his type overloaded operator ! too, and so still had the issue. @horenmar's example attempted to capture that - but only does so without an operator bool (whether implicit or explicit) - at least in my testing.\nWithout conversion to bool or an operator ! that returns bool, I'm not sure how it could be used in an assertion in the first place, so I'm hoping @hpesoj can shed some light on it.. @hpesoj thanks - so you do have a bool operator? (explicit or implicit?).\n@lightmare the expression that gets evaluated is the one that is decomposed by Catch, then reassembled. Because of the way some literals (particularly integers) are captured by template, along with some of the machinery in Catch to deal with that, the expression that is actually evaluated on reassembly may not be exactly the same. So to make sure any warnings that might be emitted for the actual expression that are not for the reconstucted expression this technique forces the compiler to also evaluated the original expression as well.\nThere is another way I was toying with:\ntemplate<typename T>\nbool exprAsBool( T const& ){ return false; }\n// ..\nCatch::isTrue( false && exprAsBool( expr )\nBut I think I like the sizeof one even more (with one small change - compare the result to another integer to avoid int-conversion-to-bool warnings)!. Any feedback would be welcome. However please note that it does depend on whether we detect compiler support for __COUNTER__.. @onqtam they are not. However this case should be detected and a descriptive error raised.. There were a few issues here, and several iterations attempting to address them (thanks for all involved, btw). I'm now not entirely clear if any of it is still outstanding?\nCould you please confirm one way or the other, and if anything is outstanding please restate?\n. Works for me too on macOS (with Clang).. Could anyone who originally had problems here (@mrpi?, @gatopeich?) confirm or deny whether there are still issues with this?. Cool - thanks!\nI'm closing this now, then. If the \"prior version\" was from 2013 then, well, a lot has changed in the last three years!\nIn any case the line that would be causing your error is:\nif( Catch::Section const& INTERNAL_CATCH_UNIQUE_NAME( catch_internal_Section ) = Catch::SectionInfo( CATCH_INTERNAL_LINEINFO, name, desc ) )\nwhere INTERNAL_CATCH_UNIQUE_NAME just appends the line number to the identifier it is passed. I don't believe this part has really changed since the start.\nFrom your error message it does look like __LINE__ is not being expanded correctly - nor is it being pasted with the root identifier. I don't know why this might be.\nI don't have access to a VS2003 compiler to test it with, but you might want to experiment, outside of Catch, reproducing the INTERNAL_CATCH_UNIQUE_NAME macro to see how it behaves (it's actually a set of three macros).\n. I think we can close this now. If @Jmbryan or @onqtam (or anyone else) still have issues with it feel free to reopen (preferably with more details).. That's a very good question.\nI can see that I specifically made that change in a dedicated commit (dbcd833c724dee84b70154e3d55213042dd639ff) three years ago - but the commit message just says, \"Don't use ANSI colour codes when debugging\" - with no rationale or associated issue number (go me!)\nI think it's to do with the messages being sent to a debug output console (e.g. in XCode). Depending on your environment and how it is set-up this may or may not happen - so it would be nice to have finer grained control.\nThere is a --force-colour command line option (which I have just noticed is not documented - must fix that). Currently that's only looked at once it has already selected the platformColourInstance() path - but it probably makes sense to consult it here too. I might actually be changing that flag anyway (to incorporate #502 as well). I'll try and cover all bases soon...\n. @nabijaczleweli not easily. The platform specific parts of the code make platform specific calls (e.g. isatty() in the POSIX case and SetConsoleTextAttribute() in the Windows case). So those definitions are not even compiled in unless the platform is detected.\nI know there are some cases where more than one platform may be detected (cygwin?) and I suppose it's possible in that case but the code would have to be changed considerable for that case.\n. ...only if the platform is Windows.\nIt's not that it's not doable - it will just require a fair bit of rearranging the code - along with introducing certain inconsistencies.\nI'm not sure if it's a valuable enough shade of feature at this point (but am open to being convinced).\n. ok. I have --use-colour working now (in a local commit). It takes yes, no or auto (although the latter is the default).\nIf yes or no are specified they override the debugger present or isatty() conditions.\nI'll push soon.\nI'll look at the platform override angle later.\n. I should have mentioned before that --use-colour is in.\n. When I pulled Clara out of Catch Text was common to both, so I had to extract that too. Technically it is an external dependency to both, but I don't think i ever fully extracted it and it is, IIRC, still just part of Clara.\nIn any event I'll take a look at this one to see how to fit it in - thanks @lightmare (and @horenmar). (catching up here)\n@obfuscated and @janisozaur: are you saying that the commit (cited above) on 29th feb doesn't fix it for you?. Thanks for that\n. Thanks\n. Thanks David,\nI've merged that PR locally and will get it pushed soon.\nHowever I don't have the ability here to verify it. Obviously it's working for you. But has anyone else on this thread been able to try it?\n. Thanks @f-koelher.\nI think that's all I need, really.\n. Pushed. I forgot to mention this issue number.\n. If I understand @lightmare's concern correctly it's that a SECTION - whether in a loop or a helper function, will only be executed once (a leaf section, at least).\nThat's why the section name needs some disambiguating component (the +val in the example).\nThis works pretty well. I agree it's a little awkward - and a common enough case that there should be better support for it.\nIn general this plays into the work I'm doing on Generators, which are more broadly part of a property-based testing approach (which this seems to be leaning towards).\nI did a big refactoring of the sections mechanism a while be in support of that - and have a basic version working well enough for a demo in a local repo. Unfortunately I've been out of time to move it forward recently, but hope to get it in before too long (I'm really keen to get Property-Based testing support in).\n. Just catching up here!\nThe complexities involved here are the main reason I never got around to extending the container support before.\nNice work on getting to where you are. I'll take a closer look a bit later.\nAs for SFINAE, I did experiment with an SFINAE version of << detection but (a) it's opt in (you have to #define something) and (b) I found that, on average, it was no better than the non-SFINAE version anyway.\nThat said, because there is an SFINAE #define already you could use that if you want to conditionally compile.\nAs for C++11 baselining I'm doing this for Catch2, which is already started and I hope to be pushing to a public repo soon(ish). \n. oh - and I accepted a PR to fix those failing travis builds just recently (if it's the same one - master is building cleanly now). You might just need to rebase?\n. I've been having a look at this today and had a go at coming up with something myself. I wanted something with fewer bits of template machinery, if possible, and what I've come up with is something that just tests if there's an overload of the begin and end functions (either in std, the global namespace, or as found by ADL) for the type. I realise this leaves open the possibility that such overloads exist, yet the type is not a container, but I'm hopeful this is not a problem in practice (in the event that it does get reported as a legitimate issue I know there are other ways to achieve the same thing).\nNow we can fully assume C++11 this is much easier. Here's a mock up of what I'm thinking:\nhttps://godbolt.org/g/5Jn7Gm\nThe linked godbolt shows it running against a number of types on a handful of representative compilers. I've also tried this on VS2017 (haven't had a chance on 2015, yet, but I'm reasonably confident).\nNote that this version explicitly detects arrays as well. I've also put a top level specialisation for string in, as that would otherwise be detected as a containers - but we want to handle that differently. In Catch2 that already has a specialisation of StringMaker<> which plays that role.\nAny comments from those still watching this before I see how this rolls into Catch2 (btw, as part of that I'll be watching the impact on compile times, since one of my worries with this is that it would take a hit. One nice property of this, however, is that it doesn't require any of the containers to be included in Catch2 itself. At the moment we have a load of #defines to minimise the impact of doing so).. @mat-tso - don't worry, I'll be doing the porting part - very happy for you to review, though.\nAs for specialising is_container<>, I don't anticipate having that level in the Catch2 version - rather its role will be taken by StringMaker<>. Your point about users specialising it stand, though - with the added bonus they get to specific how it gets serialised at the same time :-)\nI'll take a look at your tests and see what I can borrow - thanks!. Oh, and wrt the array detection - I didn't think of using declval<T&> to make it detect automatically. I might use that. OTOH there might be some merit in keeping array detection separate, too. I'll think about that.. Ok, I've checked in my changes in the \"stringify\" branch for now.\nI've benchmarked the compile times and there seems to be a slight improvement as result! (and master is a slight improvement over the current single include as well) - so that's good news!. I'm not quite sure what the original issue was.\nYou said, \"If you compared 2 booleans then the <= operator precedence is higher than == and it fails.\"\nFails in what way? Comparing two bools works fine for me so I'm surprised if that's the actual issue.\nYou later give an example of comparing two objects of your own classes, and mention string conversions. Is this where the actual issue arises? You don't say whether the string conversion is working or not, or causing a problem or not. The string conversion is not actually part of the comparison. The comparison is on the actual typed data. The strings are used for reporting on what was actually tested (and should fall back to \"{?}\" if it can't automatically deduce how to convert it - there are ways to teach it how if that's something you'd like to do - we can pick that up separately. The point is it shouldn't stop the code from working).\nIn general Catch does \"just work\" without you having to know how it works internally. It's true that it's doing a fair bit internally to achieve that - in ways that are more complex than you might expect - which is unfortunate on those rare occasions that the abstraction does leak.\nI usually do recommend added extra brackets in those cases - to just get things working without having to dig deeper. But that's a workaround and, as Martin says, you lose richness of output when you do that.\nSo I'm keen to get to the bottom of what's actually going wrong for you. Maybe it will inform tweaks to the docs. Maybe we can fix something in the implementation.\n. In fact @rcdailey's PR was merged at some point and is on master.\nSo, unless I'm missing anything (and someone points it out) I think this issue can be close?. Fair point. They should probably be changed too - although they are not named in this issue (possibly raise another one?). Interesting.\nI'm not against this, but I have a few observations (and would need to think about it a bit more):\n1. wrt, \"if one has bunch of inputs for which tested library should produce certain outputs\" - that sounds a lot like a property-based testing approach. I have a first class implementation of this in the works. That said I've been promising it for a while and its not ready yet (it's a big chunk of work and my time is limited).\n2. IIRC I originally made Catch::NameAndDesc raw char*s because I found that using std::string in those self-registering constructor seemed to add a lot of compile time overhead - at least in XCode. That was some years ago (and Catch itself was smaller and simpler). I should probably revisit that to see if there is still an issue.\nThanks for proposing this. I'll try and get back to you on it.\n. @dogbert2 - you are technically correct (which is the best kind of correct). However I don't think it's a big deal here. This is called immediately on entering main() - and there's nothing you can do to recover from it. If you're out of memory for this call then the changes of something like iostreams working is pretty low too.\n@kirbyfan64 and @nabijaczleweli bear in mind this is Objective-C code (well, technically it's C code in an Objective-C context, reflecting over Objective-C code). That memory handling needs to interact with ARC (Automatic Reference Counting) - and also stick around for the lifetime of the program since instances of the Class object are kept around. I'm sure it could be cleaned up but it's tricky stuff that's been \"just working\" for years now without any need to touch it.\n. Sorry for the late reply (and for the issue in the first place).\nI'm not an expert in signal handlers, so would value your input on this (in fact I would value it even if I was).\nMy best guess at how to resolve this would be to make the signal handler configurable (either on the command line or via a #define - or both).\nIf you know how we could get the best of both worlds (get the result you want without the need to configure) that would be even better!\nRegarding the original intention, @rcdailey, it was just to try and do a best effort continuation of the Catch runner that treats the interrupt as a failure.\n. The original problem was that when a signal is raised there was no way to know which test case was being executed (because they are written lazily). That might be ok if it happens during a debug session (or you can otherwise recreate the symbols) - but otherwise can make it hard to track down.\nThis handler tries to invoke the lazy printing of context before resigning.\n. I've made some changes to the signal handling so that, after intercepting and doing the reporting, it then re-installs the original handler and re-raises the signal (instead of calling exit()).\nSo far I have these changes on the signal branch.\nIf you get a chance (@rcdailey, @tombh, @vasyan1337h4x0r and @hobbes1069 - if you're still watching) - could you try out:\nhttps://raw.githubusercontent.com/philsquared/Catch/signals/single_include/catch.hpp\nAnd let me know if you still have problems?. Cool, thanks @vasyan1337h4x0r.\nI'll probably merge the branch in shortly (possibly with some of @horenmar's other changes - which I hadn't seen until after I'd done this).\nIn the meantime would still be good to hear from more of the commenters here.. Good catch, @RossBencina. Sorry it's taken a while to get to this (and thanks, @horenmar, for surfacing it in your review).\nYou are quite correct that the condition is never met.\nHowever I believe this is because some other change altered that code path that would have led to it - and I'm not sure that's what we want.\nThe idea here is that if you write an expression, like:\nREQUIRE( !thisShouldAlwaysBeFalse() );\n\nthis is the natural way you'd probably write it - but we can't decompose that form. So that case was meant to have been detected at this point and the warning issued, so you might rewrite it as:\n\nREQUIRE_FALSE( thisShouldAlwaysBeFalse() );\nor:\nREQUIRE( thisShouldAlwaysBeFalse() == false );\ninstead.\nAs I say, somewhere along the way that detection has gone missing. It's not behaviour-breaking so it looks like that got missed at the time. Maybe it's not a big deal. Perhaps it's not worth warning about this. What do you guys think?\nIf it's not worth warning about then let's go with Ross' PR (or something similar - I haven't checked it but I'm sure it's fine).\nIf we want to restore the original behaviour I'll take a look at where that needs to be added back in (shouldn't be a big job).. Resolved elsewhere, as mentioned in #617 . Sorry, yes, I didn't update that issue to say it had been pushed, but it did go in:\nhttps://github.com/philsquared/Catch/commit/8ccb18daa9c380c35ae4d13751e2a1aeed905815\n. Thanks, @gkm4d.\nCould you try 1.4.0. I jumped the gun and went ahead and fixed it based on your forum report :-)\n. Good point. I should add something to the docs about that.\nIt is, indeed, the && (|| would have the same effect).\nFor && @kirbyfan64's approach seems best.\n|| is a little trickier, but is seldom useful.\nThe reason for this limitation is that Catch decomposes the expression, then must reconstruct it so it can evaluate whether it was successful or not. While it is decomposed it can capture the values of the LHS and RHS of the expression for reporting purposes. If you introduce&& (or ||) into the expression it is no longer a simple, binary, expression. Splitting the expression up (@kirbyfan64's approach), or wrapping in parentheses (thereby losing the LHS/ RHS reporting capability) are the usual ways to deal with it.\n. Thanks for this.\nHowever I've fixed this at source in my local Clara repo. I'll push it into Catch soon\n. Sorry - I merged this in ages ago but never got around to pushing it! Thanks for the PR\n. I believe this one is fixed now? (as of Build 1.5.7). Please confirm and/ or close.\n. Could you give a more complete example of what is going wrong for you (assuming it still is in 1.6.0).\nThe example given in #588 seems to work for me at this point.. Sorry ignore that - I was thinking of a different issue.\nLooks like #588 may still have some outstanding parts.. The encoding issues in the referenced ticket, #588, were fixed in February and that ticket was closed.\nIs there any more to this ticket or can we close this one,  too?\nOr, if not, could you give any more details?. Guilty as charged!\nIt's worth the bump as I do try and dip in from time to time even if I'm busy elsewhere (currently preparing to give a course on Swift!). Thanks for the defence, Andy :-)\nAnyway, this one looks pretty straightforward and a win-win all round, so I've merged the PR in now: look for build 1.5.3 - and thanks for the PR!\n. I added all the header files to CMakeLists.txt last night so I think we can close this PR. I've also confirmed it working in both Xcode and VS projects generated from CMake.. This has been a long standing and common (and understandable) request.\nThere are some problems with it that mean there is no ideal solution, but the basic principle of \"only go into sections that I have specified\" is possible - and indeed I have now implemented this on a locally branch and am testing it out!\nThe mechanism is via a new command line option, --section or -c. Each time you use this you can follow it with a section name, so for nested sections use multiple options. This is not terribly convenient for writing by hand (at least not with long section names), but at least gets us the first step of making it possible (and it turns out to be really useful for machine consumption - i.e. by test runner tools).\nIt doesn't currently support wildcards or tags - but I'll look at adding those later.\nI'll be pushing - probably to a branch to begin with - soon.. While more could be done, I believe the feature that is in (with -c) is sufficient to close this ticket now (reopen if you disagree).. Sorry it's taken a while to get back to this. I've now made some changes - more along the lines of your second alternative suggestion, I think (I wanted to minimise the overhead of the majority case - when there is only one reporter. The cost was just one virtual method on the interface relating to multiple reporters).\nPlease see v1.5.1\n. Just jumping in here - I'd have to check the code (which I don't have access to at the moment) but I believe the hierarchy you're looking at (ITracker-based) is a pre-requisite for the property-based testing implementation I'm working on (generators need to interact with sections, so they need to be modelled as peer nodes).\nThat's not to say there are no opportunities for clean-up or optimisation around there - I just wanted to let you know there is a reason for it being that way that is not currently reflected in the code on GitHub.\n. ... on the subject of optimisation, and back towards the spirit of the PR itself, this is similar to something I have implemented in other performance sensitive code-bases. For cases where I don't expect a down cast to fail I provide a simple cast template, safePolyCast<>, which is used like static_cast or dynamic_cast and internally forwards to the former in a release build and the latter in a debug build. In debug the result is also checked and asserted on (accounting for null being passed in).\nIt would be trivial to add something similar to Catch and, I believe, would meet the need being discussed here. I haven't done so before as I had not considered it a performance bottleneck in practice.\nIf you are implying that you do see it as a performance bottleneck then I'll add it.\nOf course it still requires RTTI - although that can also be trivially conditionally compiled - but now any code that needs such a facility is localised to one place.\n. As mentioned in #630, I've resolved the underlying issue\n. Thanks - I need to check why that url is not fowarding\n. It's not clear if this issue has been addressed by my recent acceptance of one of the PRs in #588.\nCould you please confirm whether any of your reported issues are still outstanding and, if so, which ones? I'm trying to close off all the XML reporter issues.\n. I believe the chars > 127 part of this has been covered now by the merging of PR #767.\nHave I read that correctly? Is there any more that is still outstanding?. thanks. As mentioned in #630, I've resolved the underlying issue.\nThanks for the PRs\n. I missed this one the first time around, sorry.\nReading through now it seems this would be a good fit for matchers (which I've just revamped and added vector matchers for).\nAt the moment you can do Equals matchers between  vector and another vector - or Contains matchers between two vectors or a vector and an element.\nAdding versions that compare against initialiser_lists (if detected to be available) should be easy to do (in fact I just tested this theory in a local proof-of-concept.\nI'll have look at adding these. That will mean you'll be able to do:\nREQUIRE_THAT( myVec, EqualsVector( { 1, 2, 3 } ) );\nBut also:\nREQUIRE_THAT( myVec, ContainsVector( { 1, 2 } ) );\nHow does that sound?. I actually hadn't realised there wasn't use of dynamic_cast already. Looking back at the code I don't think it would be too hard to avoid their use (three cases of movement within a small, fixed, hierarchy - only one of them speculative).\nI'll try and get those out in the near future.\n. Cool. I've been meaning to look at this for some time (there are a few other issues and PRs relating to it).\n. In fact this is done now. Please see 1.5.1!\n. This looks like it could be related to #661. It should work exactly as you expect. If not it looks like a bug. I'll try and reproduce and.\n. In fact I've just tried it out myself and it seems to work just fine for me.\nWhich version of Catch are you using?\n. STOP PRESS!\nThe code base I just tested that out on was not on the latest Catch.\nI just updated and can now reproduce your issue!\nSo it looks like the parser rework in Clara (the spun-out command line parser) is at fault. I'll fix it there. Thanks for reporting.\n. Should be fixed now (v1.5.2)\n. Sorry. This was a regression introduced by recent changes to Clara (the spun-out command line parser).\nI've fixed the issue in Clara and imported it into Catch. v1.5.2 now includes this fix.\n. Thanks guys\n. That's odd. Which version (of Catch) are you upgrading from?\n. This looks like most likely candidate\nI wonder if !!(expr) would solve both problems?\n. Thanks. Yes - as I was trying to say in a reply that never got though (connection on the train!) I'm fairly confident in this approach and have pushed a commit with it in (which you've probably seen by now).\nThanks for raising this.\n. Thanks for this.\nAll looks reasonable, except for the enable_ifs and std::is_constructible - since I need to maintain support for C++98/ 03.\nI might be able to come up with some raw SFINAE workarounds, although I'm little reluctant to use SFINAE at all as so many pre-C++11 compilers have patchy support for it.\nThe best option might be to conditionally compile the whole thing so that only C++11+ compilers see the templated version?\n. I'm not quite sure what you mean by existing examples. Specific to Approx? or in general?\nAnyway, we happened to meet at lunch today (small world!) and you also mentioned that you wanted an overload of < (and >) on Approx - and this worried me a little. My main concern was that < would not always be the inverse of >. It also doesn't quite feel right to me to say, effectively: \"Is this number less than that one (or just a little bit more - that's ok too)\". I can't quite articulate why that feels so wrong - and it's probably just a misleading gut feel. I'm hoping others may be watching this thread who may have an opinion and want to weigh in?\n. Sorry I've been quiet on this. I'm gradually getting up to speed again now!\nFrom my initial quick scan this looks good (with @lightmare's fix) but I now see what you mean about the conditional C++ macros. Catch #defines CATCH_CPP11_OR_GREATER for that purpose.\n. This is potentially fixed by 84af6bc955491d4b2a4c1d3c61e0b3516ce9f298 - but needs testing. Sorry, this is a bit late. In case you're still watching, @eloff, my response is that this is a bit of a philosophical question.\nThe key question is, why are you marking it as [!shouldfail], rather than testing the inverse condition, or checking that exceptions are thrown - or whatever other way would normally be used?\nIn my case where I've used this it's because I'm documenting that a requirement is known to not be currently fulfilled, or there is a known issue, but I want to keep track of it: and be notified if it accidentally starts working.\nIt's a rare case but sometimes useful.\nIn that case I do want to see the actual failure (to be reminded that it needs fixing) - I just don't want it to fail my run.\nPerhaps you have a different use case. It would be useful to hear it (assuming it's still relevant to you?).\n. Point well taken. Thanks for taking the time and trouble to respond!. I've updated with:\n\n[!shouldfail] - like [!mayfail] but fails the test if it passes. This can be useful if you want to be notified of accidental, or third-party, fixes.\n\nSo I'm going to close this one now.. Ouch! Sorry about that. I'll try and get this sorted (in both code bases) later today - thanks for bringing it up (and @rioderelfte for the PR)\n. Thanks for this (and apologies for the delay in getting to it). While this looks like a useful PR I'm about to make some changes elsewhere that will make it redundant.\nThat is, I'm going to make -l pass off to the reporter to format its output. That way you can use the xml reporter to provide machine readable output that will have this information.. Although the lambda suggestion works (assuming C++11 on) I don't think it adds much value in this case.\nAny uncaught exceptions that escape the test case are reported as failures anyway. The advantage of using REQUIRE_NOTHROW explicitly is that (a) you better document your intent that this really should be a non-throwing operation and (b) you get file/ line information that pinpoints the responsible call. Once you use a multiline lambda with many potentially throwing sites you start to lose those advantages (increasingly so the larger the block).\nSo I would recommend either use REQUIRE_NOTHROW on each line that you want to be specific about - or just relax and let Catch, well,... catch, your exceptions outside the test case.\nEither way I'm going to close this issue now as I think it's been resolved in one of several ways.. We can't put it in parentheses within the macro as this defeats the expression decomposition (so you won't get LHS and RHS values separately).\nI use this to suppress the same warning with clang:\n#define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS _Pragma( \"clang diagnostic ignored \\\"-Wparentheses\\\"\" )\nIs there a \"gcc diagnostic ignored\" version? And if so from what version is it available? I'm happy to put that in but I don't have easy access to gcc at the moment to test it.\n. @horenmar did some more experimenting and found that _Pragma is supported back to at least GCC 4.6. He wasn't able to try 4.5, but 4.4 didn't work (if anyone else is able to confirm one way or another with 4.5 then please let us know).\nSo we're going to extend the use of _Pragma back to 4.6 (or possible 4.5), leaving only a couple of older versions in the not-covered range. If anyone else complains about these ones we'll consider the whole-TU-affecting option.. I've had to focus elsewhere for a while but I'm going to start catching up a bit (pun intended) now.\nCategorising the open issues with labels sounds like a good idea\n. I think it's finally time to close this ticket.\nThanks for bring this up and all the work you put into it, @ianmacs.\nWe're down to under 130 open issues now (and still steadily working through them), and (at time of writing) all of those have been categorised with tags. I think things are going in the right direction (mostly thanks to @horenmar).. 1.5.6 definitely has the __COUNTER__ implementation - although it's not enabled for all compilers. You say you're using VS2015 so it should work - but you could try #defineing CATCH_CONFIG_COUNTER\n. I believe the commit on 11th Jan fixes this issue. @BobLoblaw27813789132 I appreciate it was a while ago you reported this (and have a workaround) - but if it is still relevant to you and you are able would you be able to confirm that this is resolved for you without needing the CATCH_CONFIG_COUNTER #define?\nOtherwise I'll close this in a while.. Thanks - and good Catch. Sorry it took a while to get to this\n. CHECK_NOTHROW() is for when you just want to check that a statement does not throw.\nCHECK() and REQUIRE() already trap and report on exceptions - so based on what you've said you just need:\nCHECK(myobject.IsValid() == false );\n. That's close enough, yes.\nIf I'm going to be pedantic I'd say CHECK_NOTHROW is for constructs you want to treat as statements (which don't return anything, or you don't care what they return), whereas CHECK evaluates an expression in a boolean context to determine success/ failure. Both catch exceptions and treat them as failures.\nIf you want to verify that an exception is thrown then use one of the _THROWS_ variants.\nI'll look at making that clearer in the docs - thanks!\n. Thanks for the feedback. I'll take a look and consider this. \nOTTOMH: one possible downside is that it increases the scope for Fragile Base Class issues. It's possible the benefits outweigh the risks, though (or maybe other changes can be made to keep things more stable - e.g. protected method accessors).\nFor Catch2 I'm looking at reworking the reporter framework (yes, again, sorry) to make it more composable to start with.\n. Ouch! Not sure how that one slipped by! Thanks.\nI'll try and get to this soon.\n. (although do bear in mind that trying to complete a valid xml document in the face of a SIGSEGV is purely on a \"best effort\" basis - so even with the tag name fixed it may still have other problems).\n. Where by \"get to this soon\" I mean in a few months, obviously :-s\nSorry about that. Simple enough fix but I've been swamped.\nI've just committed the fix in locally and it should appear here on the next push.\n. Sorry this is a bit late (just seeing this ticket for the first time now).\nIs this still an issue?\nIs the behaviour the same in files that don't #define CATCH_CONFIG_RUNNER or CATCH_CONFIG_MAIN?. That's what I was thinking - just wanted to be sure - thanks.\nSo, I'm still not sure where the issue is here - whether it's really down to something Catch is doing specifically - or just an issue with clang that happens to manifest under these circumstances.\nBut it sounds like a workaround is to not have any test code in the file that has main (as recommended here anyway).\nOr am I missing something that means that's not sufficient?. Good call.\nI've only ever run those tests on my own Mac (and I didn't think anyone else really ran them), so not caught this before.\nI might look in to a partial ordering by filename for \"decl\".\nAt the very least I'll change the approval tests to use \"lex\".\nThanks for pointing this out!\n. If you run Catch with -# it automatically tags all test cases in a file with the filename stem (ie the filename with no directory or extension). So if you have tests in the file, AllMyTests.cpp (in the executable MyTestExe) you should be able to run them with:\nMyTestExe -# [#AllMyTests]\nSee: https://github.com/philsquared/Catch/blob/master/docs/test-cases-and-sections.md#special-tags\nAnd also: http://www.levelofindirection.com/journal/2015/7/8/a-game-of-tag.html (under the section \"Filenames As Tags\")\n. Thanks for the feedback. I'll certainly consider that (probably for Catch2 at this point).\nAnd thanks for spreading the word :-)\n. @nsmith22 Since you reported a change was made so that duplicate test names cause an exception to be thrown instead of just terminating.\nDoes this change anything for you? (I appreciate it's a while ago you brought this up).. @sharifahmad2061 there's a link at the top of the readme file (available on the main page of the repo) that lets you download it directly.\n. I think I only added it a couple of weeks ago. Catch has the concept of a \"listener\" which should allow you to do what you want much more cleanly.\nI've not had a chance to properly document it yet (so sorry you've done a lot of possibly unnecessary work to workaround it) - but please see this thread for the details you should need: https://github.com/philsquared/Catch/issues/475\n. @dutow \"unfortunately, I didn't check the closed tickets.\" - and I wouldn't expect you to. I should have documented it. I'll try and fix that when I get back from holiday\n. (re-opening until Listeners are documented). Listeners are now documented :-)\nhttps://github.com/philsquared/Catch/blob/master/docs/event-listeners.md. Sorry I didn't catch this when you first raised it.\nIn case you're still waiting for an answer, I suspect what's happening is all your tests are passing so you're not seeing any output by default.\nIf you run with -s on the command line it will print successful results too.. Thanks for that - sorry it took a while to get to.\nI can't believe I missed the final ; on the encoding!\nThe other bits make sense too.\n. /insert face palm gif here\nI'll have to look at making it optional.\nThat's going to suck, though. Looks like there's no clear win here?\n. That would be great if you could come up with something - thanks!\n. Sorry it's taken me a while to come back to this, but I've been looking at the XML 1.1 issue.\nI'd forgotten about what was discussed here, but ended up going down the same route anyway - escaping the control chars instead of encoding them.\nSee:\nhttps://github.com/philsquared/Catch/tree/Xml1_0\nI'd appreciate your thoughts on this before I merge, @razeh, @mrpi, @IlyaFinkelshteyn ?. I've now pushed these changes onto master. They should be in the next patch release (technically they count as breaking changes and should at least be reserved for a a minor release, but we just did one of those and I don't think it's worth waiting on this).. I believe that should conclude this issue, but I'll leave it open for a while for further comment, if any.. Thanks\n. That'll be pretty hard to do in the current, thread-agnostic, implementation - at least in the code.\nMost build server systems will let you specify a runtime threshold for tests for exactly that reason already (I know TeamCity certainly does). Otherwise you could call it from a script that does the timeout.\nWhich build system are you using?\nI'll be adding threading support in Catch2 and it makes sense to have something like this built in for that.\n. only the usual ... my time - and missing GitHub notifications :-)\nThanks for the bump. I've accepted the PR as-is (I was looking at doing similar myself - but you got ahead of me!)\n. This was raised in response to: https://youtrack.jetbrains.com/issue/RSCPP-13702\n. Good question!\nPersonally I found it very useful when I have some unexpected interaction between tests. I generate the list, using --list-test-names-only, then selectively enable tests in and out using # until I find the culprit.\n. Did you have a character in mind?\nI didn't think # would be common (it's not something I've ever used at the start of a test name) - but it is very common as a comment character.\n. Sorry, I didn't see this the first time around - only once it was closed.\nWe don't need to re-open it, but I just had a question: I presume this means the vcpkg entry will need to be kept updated?\nDo you know what's involved in that? Is it just a case of updating the catch file(s) in the repo, there, along with an update to the version field?\nI'm thinking this is something that can probably be automated (I'm trying to streamline the release process here).. IIRC this one was answered elsewhere. IIRC we discussed this elsewhere. Are you happy for me to close this one now?. Thanks @BillyONeal \n(and thanks to STL for bumping this on Twitter - although I would have got to it soon anyway - honest!)\n. @lightmare it seemed like a good idea at the time. That's been there since the first version of Catch. At that time I was avoiding disabling warnings with #pragmas - but there's quite a few of those now, so I think the right solution is to do it that way (in fact that's how I'm doing it in Catch2 and it seems to be ok, so far - but I've not tried that on many platforms yet).\nI'm going to look at ripping all that out and disabling the warnings.\n. That is more worrying. I'm sure there used to be range checks in there too - but they seem to be MIA!\nThe rationale for suppressing the warnings is that usually one of the types is deduced from an integer literal. The problem with that is that, in the natural context the compiler deduces the type based on both sides. But when you capture the literal as a template argument it is forced to do so in isolation. So, e.g.:\nunsigned int seven = 7;\n  CHECK( seven > 3 );\nwithout the decomposition in CHECK the 3 effectively is interpreted as an unsigned int. But during decomposition it looks at 3 and see a signed int - leading to warnings when it brings it together with the unsigned int later.\nAny templated comparison mechanism has this problem (i.e. it's not specific to the decomposition approach - a check_greater_than function would have the same issue).\n. Anyway, those missing range checks are all the more reason for me to replace the whole layer.\n. @surkeh could you please try this:\nhttps://raw.githubusercontent.com/philsquared/Catch/reevaluate-merge/single_include/catch.hpp\nand see if you get the same issue with those fixed-width variables. This is on a branch that has the rewritten expression decomposition layer. I'm looking to get feedback on whether it fixes issues like this.. For the record I agree with this request and it's on my queue. That's a nice set of tests!\nWhen you say \"take quite a while to build\" it sounds like you mean compile time - but your query about a progress bar suggests runtime - so do you mean the running of the tests?\nIf the latter then it's certainly possible - and something I've thought about from time to time.\nThe best part is that it can be done orthogonally to Catch itself - it would just be another reporter (you could take the console reporter as a starting point - or even extend it.\nAlthough It's something I might get around to at some point I'm currently running very behind on other issues and PRs, as well as other ongoing development - so I can't promise it would be any time soon. So it may make more sense for you to have a stab at it yourself (there's an interface you need to implement, and a macro to register it - just have a look at the existing reporters for examples (sorry it's not currently documented).\n. Thanks.\nI've accepted #751 on the basis that it's already in the right order.. Thanks for the issue, and the PR.\nI prefer to address the actual issue, so I had a look at the signal handlers (needed doing anyway as there are a few reports of issues with it).\nThe main problem that I see with them is that the handlers abort, rather than calling the original handler again. So I've changed it to do that instead and, in my testing, your issue seems to have gone away.\nIt's currently on a branch (signals). If you get a chance could you please verify against:\nhttps://raw.githubusercontent.com/philsquared/Catch/signals/single_include/catch.hpp\nAnd let me know that it fixes it for you too?. Cool, thanks for letting me know.\nI'm probably not going to merge this branch in as is because @horenmar has a more comprehensive one (that includes much the same fix - plus more) nearly ready to merge instead.\nI'm 99% sure it will be just as effective here.. Thanks for raising this - and for the PR (#751) which I've now accepted.\nI'm not sure how it got that way in the first place - must have been a refactoring artefact at some point!. Thanks. Thanks - I'll try and get to these later in the week.. @krvajalmiguelangel - I started work on my own signals fixes before I saw @horenmar's PR - and have now covered half of it - will look at the stack overflow part soon.. I've been reworking the Matchers implementation and they now use a lot less templates and other noise (including those destructors). It's not on master yet, mostly because it has some potential for breaking code that defines their own matchers - and I haven't had a chance to compile with high warnings yet.\nBut you can find them here:\nhttps://github.com/philsquared/Catch/tree/new-matchers\n(or just the single include:\nhttps://github.com/philsquared/Catch/raw/new-matchers/single_include/catch.hpp)\nI'd appreciate if you could give your case a try with this version to see if you still have the same (or some other) issue.. Thanks for reporting this - and for the PR.\nI've actually addressed it slightly differently (made it self contained) - the reason being that this fix was in the code for Clara - which is a separate library (embedded, here, in Catch). Since I want the fix to work, as is, in the vanilla Clara code it can't rely on code elsewhere in Catch.\n. Right now @lightmare's suggestion is pretty sound.\nThe plan is to integrate a data generators system, which is somewhat similar to the parameterised tests that @Bu11etmagnet mentions - but also the basis for property based testing.\nWhile I've done a lot of preparatory work on that it's currently deferred to the upcoming Catch2 version.. Closing this as I believe the question has been answered (at least for now).\nFeel free to re-open if you feel there is more to it.. Seems like a no-brainer - thanks.\nHowever I have one concern: If NOMINMAX or WIN32_LEAN_AND_MEAN are already #defined then this will fail or warn - then (if compilation continues) leave those identifiers always undefined. That's one way to do it. I did wonder if it worked out easier to do the cross product of possibilities (so you don't need the intermediate identifiers) - but probably not - and certainly not scalable.\nSo, yes, if you go with your suggestion I think that should cover things sufficiently - not need to overthink it further.\n. You're right to be suspicious of using anything that starts with INTERNAL_.\nIn practice that's been stable for a long time.\nBut in this case this feature probably makes sense in the framework itself. I'll try and get it added soon.. That's in now on master (but not the single include).\nI'm going to mark this issue for closure soon.. Thanks @hmich . I will soon be forking Catch - the next generation version will be C++11 only. I'm going to call it Catch2 - and try to push this name to be used everywhere in the hope that it ameliorates the situation enough.. TBH, @SoftwareApe, that was precisely what I was thinking when I went with it!. I don't disagree with you - but bear in mind you couldn't copy & paste from source before, either. I think the issue is rare enough that it shouldn't be a big burden.\nAlso it doesn't preclude using an option-argument as well (I find it very convenient to be able to specify tests without an option currently).\nIn fact it might be better the other way around: Don't interpret special characters in the arg string - but provide an option-argument for the more complex cases.\nI might consider that for the future. But for now escaping seems the least disruptive change to address the issue - without too much inconvenience - and I've committed that change already (in v1.6.0).. That's the bit \"I don't disagree with you\" on :-)\nBut there's another way to make it work. Have the current way (a direct argument - no - or -- option) work the way your --test-this would work, but add options for the case when you need what those special chars were giving you (and would require escaping).\ne.g. something like:\n./SelfTest \"this, is, normal\" --spec \"test1, test2, [tag]\"\n. I'm going to close this one as my changes described above address the immediate issue.\nI agree with @lightmare that it's not a perfect or complete solution and should probably be revisited at some point (perhaps for Catch2).. Not bad! And nice use of a real world project. Looks like they all refer to the same Generators leak (well, in your truncated sample, anyway).\nI had a quick look at the code and the leak is fairly obvious (fortunately generators aren't used much - or officially supported yet).\nI've fixed that leak and pushed the changes. They should end up in the single include in the next release, but feel free to run your ASAN tests again before that.. me too ;-). Interesting.\nYou are correct that its doesn't map cleanly on to a JUnit status (well, I assume you are - I never did find a spec). Not sure what the best mapping should be - but I'm inclined to map it to a pass.\nBut you mention you want to use this with TeamCity. There is a TeamCity reporter that is much better for that (you do have to #include the TeamCity reporter header explicitly in the same file that has CATCH_CONFIG_MAIN or CATCH_CONFIG_RUNNER).. @stidch did you try the TeamCity reporter in the end?\nI was just looking at it and realised it had a similar problem, so I've fixed it.\nI'll leave this ticket open as the issue still exists in the JUnit reporter (will try and get to that next week). It's next week.\nAnd I got to it: e5c5a636a97d152851789343418bef559fd087ad. DEBUG macro was there because it was in the snippet I based the original implementation off (http://www.cocoawithlove.com/2008/03/break-into-debugger.html).\nI agree with the arguments made, elsewhere, that it shouldn't be there, though - so I've accepted this PR in it's entirety. Thanks for that.\nLooks like the missing underscore crept in during a recent merge. I've verified that it all works again now on my machine.. Do you have local changes to your copy of Catch?. Glad I could help :-). Thanks for bringing this up.\nThe link shouldn't be dead, though - it's on my personal blog.\nHowever, it turns out my DNS config has got crufty and is now going through too many redirect layers on my host (squarespace). Trying to sort it out now but you know how DNS config changes are - the 24-48 hr wait for changes to propagate :-(\nSo let's revisit once that's back up and see if anything still needs to be updated.. Yep - for me too. I'm hoping that means my DNS changes have already propagated (at least to you and I). The link in this PR seems to be working again, too, now - so I'm going to close this shortly, unless @hhirsch objects?. @nlohmann In fact we do (try) to use Semantic Versioning.\nWe're not breaking any documented interfaces at minor versions (I have a few planned for Catch2, though). But as well as new features we try to hold off fixes that change undocumented interfaces until minor revisions (and even then try to limit their scope). This one seems to have had more of an impact than we anticipated.. The problem here is that people do have a need to encode characters in their output that are not supported by XML 1.0 (although there is some doubt over that, due to a later, unnumbered, edition of XML 1.0 supporting more characters).\nBut XML 1.1 does indeed seem to be problematic. So I'm looking at how to have things both ways. I don't like the idea of a runtime or compile time switch to choose.\nSo I'm experimenting with the idea of C-escaping the problematic characters (e.g. \\x01) instead of encoding them - so as far as the XML parser is concerned there are only XML 1.0 allowable characters - and it is up to the user to interpret the escaping.\nGiven that the control characters in question are rarely encountered in actual output I think this is probably fine - but I'm interested in others thoughts here.\nI'm committed these changes to the following branch, so you can try it out:\nhttps://github.com/philsquared/Catch/tree/Xml1_0\n. Do you mean that you tried to merge it yourself?\nIf and when I merge to master I suspect it will require a bit of fix-up, yes, since I've made other changes to the xml writer (and managed to screw up the history a bit with a couple of reverts).\nI think I'll be merging it in shortly.\nIf you meant something else please let me know.. In reverse order:\n stylesheet reference: to what stylesheet?\n description & tags attributes - yes they probably should be added - I'll take a look - thanks. Ah right.\nYes making the XmlReporter extensible for that purpose sounds like a good way to go.. I've merged (and simplified) and pushed the XML 1.0 changes now.\nThey should be in next patch release.. 1.7.2 was released a few days ago with the stylesheet functionality in it. You just need to override getStylesheetRef() in a reporter derived from XmlReporter in addition to forwarding constructor, getDescription() and INTERNAL_CATCH_REGISTER_REPORTER.\nIt also moves back to Xml 1.0 and includes the description and tag attributes.\n@mKlus can we consider this ticker resolved?\n. I think you should be able to do what you need by implementing a Listener (which is actually a specialised implementation of a reporter - gives you callbacks when a tests/ sections etc begin and end - so you can do your de-init in a test case end event?)\nUnfortunately I've still not documented it, but you should be able to work it out from the issue thread I introduced it in: https://github.com/philsquared/Catch/issues/475\nI'll try again to document it soon. @FlYnN91 do either of these responses answer your question?. I appreciate the documentation could be better, but I did try to tag on a bit at the end of https://github.com/philsquared/Catch/blob/master/docs/command-line.md#run-section:\n\"If you specify a section without narrowing to a test case first then all test cases will be executed (but only matching sections within them).\"\nWhat I meant by that is you need both the test case name and the section name(s) - so in your case, I believe, you want:\n$ time tests/unit_tests TESTCASENAME -c \"Test parse_parameter_status()\"\nThe reason for this is that the only way it can find the sections is by executing to them - so if you don't give it a test case (or test cases) to go into then it will have to try all of them.\nProbably I should make it an error to specific -c without specifying a test case, or at least a set of test cases.. Thanks. All done.. Accepted via ab199d9cf9359540a1294d1b9a40dc48469f0428\nThanks!. You can also do this using a listener object (which is basically a type of reporter that you can use to hook the same events - but runs in addition to whatever reporter you're using).\nThe downside (other than that it's not yet documented) is that it still doesn't give you the ability to report on failures during set-up. It sounds like that may be your motivating feature?\nI'll consider adding that.. The short answer is: this is not supported (I really need to make this clear in the docs).\nThe way forward will be generators - but they've been deferred to Catch2 now.\nBut you can workaround this: you just need to make the section names unique. What I have done, the couple of times I've needed to do similar, is to form the section name string to include the loop counter - e.g.:\n```#include \nTEST_CASE(\"\") {\n   for(int a = 0; a < 2; ++a) {\n      SECTION(\"1. + std::to_string( a )) {\n         SECTION(\"A.\" + std::to_string( a )) {\n         }\n         SECTION(\"B.\" + std::to_string( a )) {\n         }\n      }\n   }\n}\n```. @jamespharvey20 does this resolve your issue?. @stervo4ka although it's probably technically possible to execute the same section multiple times during a single run I think this goes against the spirit of what sections are for - which is to say that each leaf section should be executed exactly once.\nThe scoped context idea is interesting. I might consider that. Do bear in mind though that this is really all just workarounds for missing generators.. I wonder if this is to do with this:\n\"To compile an application that uses this function, define the _WIN32_WINNT macro as 0x0500 or later. For more information, see Using the Windows Headers.\"\n- https://msdn.microsoft.com/en-us/library/windows/desktop/ms679274(v=vs.85).aspx\n. I think @ernanirst is after having a common set of asserts on an object that may be constructed different ways.\nAssuming that's the case this is ultimately a job for generators - but you can achieve the same effect without too much overhead just by putting the common asserts in a separate function that takes the object, and constructing, and repeatedly calling, the helper function. Ideally have each construction in a different SECTION. Something like:\n```c++\nvoid helper( MyType const& myObj ) {\n    REQUIRE( myObject.doesThis() );\n    REQUIRE( myObject.doesThat() );\n    REQUIRE( myObject.value() == 42 );\n}\nTEST_CASE( \"constructors\" ) {\n    SECTION( \"one way\" )\n        helper( MyType( a ) );\n    SECTION( \"one way\" )\n        helper( MyType( a, b ) );\n    SECTION( \"one way\" )\n        helper( MyType( a, b, c ) );\n}\n``. Sorry about that. Looks like it was me, just recently. Forgot about the convention.\nI'll try and work it back out again.. In fact it was quite straightforward.\nPlease confirm this now works fine for you.. Thanks. Will try to preserve the invariant now :-). Good catch - thanks!\nI've completely removed (67d513aa73cabff710e50680ec8ef25804b9fe09) the second one (including the mismatched impl) as it wasn't being used anyway.. I cherry-picked this PR (which GitHub doesn't seem to recognise) as 44632c3d71a91b3e7b59342a8c3fe2553ad7f595 and added ca66dd243cf3da0c26840453c3a7803a414a6974, which seemed to be necessary to finish the job.\nFor me the Catch SelfTest solution now builds cleanly on VS2013, VS2015 and VS2017.. That does look very suspicious. It shouldn't be out of bounds as the character atsize()should be a null - although I suspect that the standard allows for the implementation to throw if asked for it (would need to check that).\nI suspect that making it<` is the right thing to do. The reason I don't sound 100% certain is that there does seem to be handling for null elsewhere and I'd need to check it's not relying on that (and if it is probably change it).\nSo I'll take a closer look soon.\nHave you actually had an issue with it, or did you just spot it manually?. Agreed. I'll change it once I've checked for side-effects. Hi @evandrocoan,\nThanks for the detailed report. However I do wonder if you have the latest version of Catch (1.8.0)? There are definitely #if defined(CATCH_CONFIG_FAST_COMPILE) lines at lines 2131 and 8909 in the single_include. Note that this was only released yesterday but the changes to the docs went in early.\nThe compile time improvements should be noticeable - but not earth shattering. This is just an incremental step - and a place for us to put slightly more disruptive changes in (hence the need to opt-in with the #define).\nAs for why having the separate main file actually takes longer than without: that's because you're building the whole project - which now has the same amount of user code, but more translation units. The advice given in \"slow-compiles\" is really to improve incremental compile times - which is where you usually most feel the pain if compilation is slow. When you are in a test-compile-check cycle you don't usually need to rebuild the main source file, so having that contain the more heavyweight portion of Catch is a win.. Catch needs to support C++03 (although Catch2 will be C++11).\nI agree that it seems like a code smell to only \"disable\" operator= and not the copy ctor, so I'm supportive of disabling the copy ctor, too (or better still just derive from NonCopyable, which deletes them if C++11 is detected!). Thanks for that. I've added that specific warning to the VS solution generation, too, now. Perfect, thanks!. lol - np. Glad you got it sorted (or did you?). Could you give an example of what a and b might be?\nCatch doesn't support composing expressions that like in REQUIRE or CHECK assertions (Matchers can be composed, though).\nAdding parentheses around the expression would defeat the expression decomposition logic that allows lhs and rhs values to be reported independently.\nYou can, of course, add them in yourself at point of use, e.g.:\nREQUIRE( (a || b) );\n(But, again, you will lose the fine grained reporting).. c++\nint a = 6*9;\nREQUIRE( a == theAnswer() );\nThe failure output will tell you that the expression expanded to 54 == 42.\nc++\nREQUIRE( ( a == theAnswer() ) );\nWith the extra parentheses the failure output will tell you that the expression expanded to false.. I'm going to close this PR as we've established it is not applicable.\nThe remaining issue is being tracked in #565 (although I'm not sure what, if anything, we can do about that).. I'm afraid I can't give you an ETA just yet. I've paused working on it for now while we get the backlog under control here (which we're getting close on).\nHowever what features, in particular, do you feel are missing currently?. Sorry, @ruipacheco, I somehow missed your question at the end of the referenced issue. I didn't intentionally mean to ignore you.\nSo, yes, property-based-testing is a big feature that I've deferred to Catch2 (although I got a proof-of-concept working in Catch Classic it's going to be substantially easier and more natural with C++11 in Catch2). I can understand that being a make or break for you in a test framework.\nAlthough we're making good progress with the backlog here I don't think we're going to be seeing Catch2 becoming usable for a few months yet.. I'm hoping we'll be releasing Catch2 this week (or early next week, at worst).\nHowever that doesn't, yet, include the property based testing feature. That's going to be later this year, at least.. You'd think my track record would make you think twice about asking for estimates ;-)\nI'm afraid I can't give a timeline, other than that it's high up in the queue!. I know it's been a while, but I've started looking at this again.\nI've got an initial implementation up and running on a local branch - but I wanted to bikeshed the syntax a bit before going further.\nHere's one of my test cases:\n```c++\nTEST_CASE(\"Generators\") {\nauto i = GENERATE( values( { \"a\", \"b\", \"c\" } ) );\n\nSECTION( \"one\" ) {\n    auto j = GENERATE( range( 8, 11 ) << 2 );\n    std::cout << \"one: \" << i << \", \" << j << std::endl;\n}\nSECTION( \"two\" ) {\n    auto j = GENERATE( 3.141 << 1.379 );\n    std::cout << \"two: \" << i << \", \" << j << std::endl;\n}\n\n}\n```\nparticular things to note:\n1. Use of << as a \"sequencing operator. It means: after generating the values on the left, continue by generating the values on the right\n2. The syntax for the values generator. It takes an initialiser list - which means you get the double-braced syntax.\n3. Sequencing individual values effectively adds a single value generator. Is this too magic? Or a big convenience for a common case?\n4. Would improving (1) make (3) a complete substitute for (2)?\n5. GENERATE acts similarly to SECTION in that the whole test case is re-entered for each value generated (and the cross-product of all other GENERATEs and SECTIONs) - in fact they run on the same underlying mechanism.\n6. values and range are instances of generators which can be composed (in this case by sequencing with <<)\n7. All generators (including composite, sequenced, generators) allow random ordering and random sub-ranges.\n8. Additional generators can be user supplied (although this may initially be prohibited to allow more implementation flexibility until it beds in).\n. Excellent point, @ArekPiekarz - that would help, wouldn't it - thanks :-)\none: a, 8\none: a, 9\none: a, 10\none: a, 11\none: a, 2\ntwo: a, 3.141\ntwo: a, 1.379\none: b, 8\none: b, 9\none: b, 10\none: b, 11\none: b, 2\ntwo: b, 3.141\ntwo: b, 1.379\none: c, 8\none: c, 9\none: c, 10\none: c, 11\none: c, 2\ntwo: c, 3.141\ntwo: c, 1.379. No, the << overloads are on a Generator type:\ntemplate<typename T>\nauto operator << ( Generator<T>&& g1, T const& val ) -> Generator<T> {\n    return { std::move(g1), value( val ) };\n}. Well that's easy. Just write three assets (CHECK or REQUIRE). No advantage to generators here :-). Like I say, I think this example is best written as something like:\n```c++\nTEST_CASE( \"eval\" ) {\nREQUIRE( eval(\"3+5\") == 8 );\nREQUIRE( eval(\"2+4\") == 6 );\nREQUIRE( eval(\"6*9\") == 42 );\n\n}\n```\n... but if you really wanted to do it with generators you could do, eg:\n```c++\nTEST_CASE( \"eval\" ) {\n    auto test_input = GENERATE( values>({\n            {\"3+5\", 8},\n            {\"2+4\", 6},\n            {\"6*9\", 42}\n        }));\nREQUIRE( eval( test_input.first ) == test_input.second );\n\n}\n```. if this was something that you might genuinely need to do much of it would probably make sense to provide a pair-specific range generator to reduce that syntax a bit - so you might end up with something like (not tested):\n```c++\nTEST_CASE( \"eval\" ) {\n    auto test_input = GENERATE( pairs({\n            {\"3+5\", 8},\n            {\"2+4\", 6},\n            {\"6*9\", 42}\n        }));\nREQUIRE( eval( test_input.first ) == test_input.second );\n\n}\n```. Of course with structured bindings you could get:\n```c++\nTEST_CASE( \"eval\" ) {\n    auto [test_input, expected] = GENERATE( pairs({\n            {\"3+5\", 8},\n            {\"2+4\", 6},\n            {\"6*9\", 42}\n        }));\nREQUIRE( eval( test_input ) == expected );\n\n}\n```. However wrt \"Data generators, or parametrised tests: i.e. you want to re-use the same core set of assertions with a range\" - this is primarily talking about where you can make general assertions about a range of data - rather than iterating the data in lock step with expected values. E.g.:\n```c++\nauto square( int i ) -> int { return i*i; }\nTEST_CASE( \"sqr\" ) {\n    auto x = GENERATE( random( 100 ) );\n    REQUIRE( square(x) >= 0 );\n}\n```. I'm definitely sympathetic to DRY, but also observe that there is sometimes a tension between DRY and clarity. In your example I think it becomes less obvious what each of those pieces of data means - reducing the overall comprehension of the test.\nThat's not to say there's not a way of achieving better results than the individual asserts - but I don't think just pumping raw data into a generator is the best way here (although if it's what you want to do with it I won't stop you :-) ).. Thinking about it, perhaps it's a presentation issue. E.g. I could format your example as:\n```\nimport pytest\n@pytest.mark.parametrize(\"name,data,flag,count,expected_bytes,expected_size\", [\nname       | data,  | flag | count | exp. bytes | exp. size\n(\"chicago\",  b'001',  True,  2,      b'0000a',    10),\n(\"dallas\",   b'002',  True,  3,      b'000ab',    11),\n(\"denver\",   b'022',  False, 4,      b'000ab',    12),\n\n])\ndef test_eval(name, data, flag, count, expected_bytes, expected_size):\n    message = Message(name, data, flag, count) == expected\n    assert bytes(message) == expected_bytes\n    assert message.size == expected_size\n```\n... but then it's less sustainable formatting ... \ud83e\udd14. Not sure I can completely deduce the types when passing tuples - but I've got it working like this, at the moment (where each row of this \"table\" is a tuple of any number of items);\n```c++\nTEST_CASE( \"strlen\" ) {\n    auto [test_input, expected] = GENERATE( table({\n            {\"one\", 3},\n            {\"two\", 3},\n            {\"three\", 5},\n            {\"four\", 4}\n        }));\nREQUIRE( test_input.size() == expected );\n\n}\n```. @johnthagen works in C++11, except for the structured bindings, of course (which are just syntactic sugar here). @mhfrantz - interesting - something like this? :-)\n```c++\nSCENARIO(\"Eating cucumbers\") {\nauto [start, eat, left] = GENERATE( table<int,int,int> ({\n        { 12, 5, 7 },\n        { 20, 5, 14 }\n    }));\n\nGIVEN( \"there are \" << start << \" cucumbers\" )\nWHEN( \"I eat \" << eat << \" cucumbers\" )\nTHEN( \"I should have \" << left << \" cucumbers\" ) {\n    REQUIRE( eatCucumbers( start, eat ) == left );\n}\n\n}\n. Yeah, that should work, too. I'm not a big fan of `std::tie` - but I suppose it is slightly nicer than using raw tuples.. Well you could also do this:c++\nTEST_CASE( \"strlen\" ) {\n    struct Data { std::string str; int len; };\n    auto data = GENERATE( values({\n            {\"one\", 3},\n            {\"two\", 3},\n            {\"three\", 5},\n            {\"four\", 4}\n        }));\nREQUIRE( data.str.size() == data.len );\n\n}\n``. I've been moving this towards a state that I'll soon be checking in on a branch.\nOne of the big changes I've made, though, is to follow through on using,instead of<<` for sequencing generators.\nI'm not doing this by overloading operator ,, however. Instead I'm using a variadic macro to forward onto a variadic template, which then assembles the composite generator.\nSyntax aside I think this also cleans up a few other things, both internal and external.\nHere's my original example now:\n```c++\nTEST_CASE(\"Generators\") {\nauto i = GENERATE( as<std::string>(), \"a\", \"b\", \"c\" );\n\nSECTION( \"one\" ) {\n    auto j = GENERATE( range( 8, 11 ), 2 );\n    std::cout << \"one: \" << i << \", \" << j << std::endl;\n}\nSECTION( \"two\" ) {\n    auto j = GENERATE( 3.141, 1.379 );\n    std::cout << \"two: \" << i << \", \" << j << std::endl;\n}\n\n}\n```\nThe second and third GENERATE lines are simpler. There should be less need for the values generator - but one implication of that is that, e.g., string generators need to be handled specially - as in the first GENERATE in the example. The variadic approach means that each string will be deduced as a differently sized char array. You can fix that in a few ways. In the example I've used as<std::string>(), which is an empty generator that just introduces the type (subsequent generators are converted to the type of the first). Alternatively you could just explicitly cast the first generator - e.g.: GENERATE( std::string(\"a\"), \"b\", \"c\" ); - of course you can cast all of them if you like.\nYou can also use the values generator as originally.\nI toyed with the idea of having specialisations to automatically handle the string case, since it's likely to be common - in the spirit of deduction guides.\nI haven't ruled that out yet, but I'm a bit reluctant to magically handle that but not other cases - thoughts?. Another open question is capturing the variable names. With the current syntax the variable name is  not captured (since it's outside the macro).\nAn alternate syntax that brings the variable name within the macro could solve that. e.g.\nGENERATE( int, x, range(0,100) ); or\nGENERATE( x, range(0,100) ); (auto implied)\nBut this has a few issues:\n\nNot as nice - doesn't look like a variable declaration\nNo separation between the variable name/ type and the generators\nNot obvious how (or if) it would work with structured bindings\n\nAs an alternative you can capture the variable names as a manual step, e.g.: CAPTURE( x ).\nAnother alternative might be to provide a place - perhaps with a different macros - to supply a name string - e.g:\nGENERATE_NAMED( \"x\", range(0,100) );\nI'm not sure how much I want to compromise on the syntax to get this (note we can report the current value - it's just the name of the variable we're writing to we don't, currently, report).. https://github.com/catchorg/Catch2/blob/Generators/projects/SelfTest/IntrospectiveTests/Generators.tests.cpp#L104\nNow available on the Generators branch.. @johnthagen no - no change to the table examples. Should work with any types that are copy/ movable.\nYou might need to specialise the range generator if your type doesn't support +. @ekrieger001 currently there is no change to the test names - but this relates to the open question, above, about capturing variable names.\nI'm thinking that generated variable values should appear like section names. If we capture variable names. too, we could report them as \"<name> = <value>\". Otherwise we could do just \"<value>\",  or something like, \"For generated value(s): <first>, <second> ...\" - where <first> etc would be the generated values.\nOne complication is that you might want to use the variable in a section name (as in the Cucumber example, earlier). In that case it would be a shame to have the value reported twice. Not sure there's an easy way around that.. I'm not sure that what works well for Python automatically transfers - so let's take this on it's own merits.\nsetup/teardown is usually modelled, in Catch, by just having things on the stack in a TEST_CASE, with multiple peer SECTIONS reusing them.\nFor cases where that's not sufficient, class-based test fixtures are supported. I hadn't planned to extend generator support to those text fixtures (although I haven't really given much thought to how much that complicates things, if at all). Do you have concerns about the SECTION based separation?. (thanks for your input on this, btw). You can do that by adding a Listener. I really need to document that.\nI'll do it now!. In short a Listener hooks into the reporter pipeline (but before the reporter itself), and has the same interface (with defaults, so you only implement the events you're interested in - e.g. testCaseStarting(), testCaseEnded()).. You got me! Reporters are not (yet) documented either!\nI'm knocking up some listener documentation now.\nIn the meantime you might want to have a look here: https://github.com/philsquared/Catch/issues/475#issuecomment-129543664. Yup - that's exactly what it gives you. That sounds great! I hope it works out. The only limitation (currently - this may change in the future) that may be of note is that you can't do any assertions in a listener event.. First cut of the docs are here: https://github.com/philsquared/Catch/blob/master/docs/event-listeners.md\nIf there's anything not clear there let me know and I'll update it (sorry for the cop-out \"look in the source\" at the end - but fully documenting all those structs would be a big task for little value).\nAlso note that I have also just changed the registration macro to CATCH_REGISTER_LISTENER (as documented) - as it previously still had the prefix INTERNAL_ - so if you're using an older version of Catch (including the, still current, single include) you'll need that INTERNAL_ prefix for now. We should be doing a new release of the single include on Monday.. Ha! Well I'm glad it's a happy ending for you.\nBut it's a black mark for me for putting this off for so long (which is why I decided to just get on with it now).. I'm not 100% sure I follow what you're asking - but if you mean you want to maintain state in the listener that you make available to your tests then you're pretty much stuck with manipulating globals or singletons.\nIf that's not what you mean, though, perhaps you could restate your requirement?. I've since used nonius, too (thanks for the recommendation, @nabijaczleweli).\nIt's pretty good, but I also have a wishlist.\nI'm still considering supporting benchmarking in Catch (probably as a separate, optional, header) - but certainly talk to R. Martinho over on nonius.. Thanks - sorry for the delay in getting to this.. Thanks - been meaning to get to that :-). Merged via 4dc06bdb7034d36071caa2219f14c4b2ce52c80a.\nThanks for that!. Hi @ldionne, and welcome to Catch :-)\nThanks for bringing this up (yes, again!). Your proposal is something I've thought about in the past but not had time to investigate properly. It's a little involved to try out because the REQUIRE macro forwards on to an internal macro that takes additional arguments afterwards. These can be reordered, but that's going to ripple out to dozens of other macros. Then it all has to be duplicated for the case where variadic macros are not supported.\nIt's all doable, and I believe will work - and now I'm getting a bit more time to spend on Catch I'll give it a go (when I get back from the current conference I'm at) - so thanks for reminding me of this.. I've made the prerequisite changes (changing the macro argument order), which was a bit of a pain but just a mechanical change. I think I prefer it that way anyway. I've committed that as: f3ec843ba6513b496f3fb384732c2cdd0bedea11.\nI then made just enough changes, locally, to get @ldionne's example work using variadic macros. That was fairly simple and seemed to work well.\nThe problem is, now, writing all the variadic/ non-variadic versions - which will double up quite a few macros, including some non trivial ones.\nAt this point I'm out of time for a couple of weeks so will have to put this on pause - but if anyone else wants to pick this up it should be fairly obvious what needs to be done now - just be sure to check with a compiler that doesn't support variadic templates, as well as with the CATCH_CONFIG_FAST_COMPILE and CATCH_CONFIG_PREFIX_ALL flags.\n. Sorry, @ldionne, looks like that header was not quite sufficient.\nThe attached should do it, though.\ncatch.hpp.zip\n(btw, time sensitive, but I'm at the ACCU conference at the moment, so do come and say \"hi\" at the JetBrains booth - if you get this in time :-) ). Excellent! Thanks for letting us know.\nThe Catch2 branch should go live in the near future!. I've changed it so that (a) it doesn't define uint64_t itself - but rather introduces a new typedef (in the Catch namespace) and (b) only uses long long for _MSC_VER, rather than CATCH_WINDOWS - so should avoid the Cygwin issue.\nIt's not a complete solution as it doesn't account for potential older non-MS compilers that don't support uint64_t - but that's no worse than it was.\nIt also still doesn't respect CATCH_CONFIG_CPP11_LONG_LONG (which seems misnamed).\nBut I think this change should be enough to address this issue?. Ah!\nAre you using CLion, by any chance, @maiermic?\n(CLion's integrated Catch test runner uses the XML reporter, but then presents it back in a way that looks similar to the console reporter.\nThat might explain the difference. I'll take a look at that.. Perfect - thanks, @maiermic - saves me doing that.. Running your example with the XML reporter confirms that all the information is present in the report - so this is a pure CLion issue.\nTherefore do you have any objection to me closing this ticket, @maiermic?. my idea was to, instead of throwing the exceptions, log them somewhere (yes, another singleton) and continue. Then when the Catch session object is instantiated throw any stored exceptions then.. Thanks. Thanks for bringing this up, @Predelnik. We haven't had an IsStreamInsertable issue for a while.\nThat SO answer is interesting. It can't be used as-is as it relies on (quite a few, actually) C++11 features - and Catch (1.x, at least) needs to keep working on pre-C++11 compilers.\nBut if the approach there is genuinely better we could do something conditionally (and would also be useful for Catch2 - which will assume C++11).\nThe \"genuinely better\" qualification is there because I know from looking at this before that every technique I investigated had one trade-off or another. That was a few years ago and I don't recall seeing anything like this one - so maybe it's better? But I'd like to see it more road tested before I switch it in by default (even for C++11 compilers) as if it has different trade-offs to the current approach then it will break currently working code.\nSo I think a starting point is to include it as an \"opt-in\" alternative.\nIf you're happy to put together a PR for that I'd be grateful. Otherwise I'll try and get to it myself in the near future (but not this week).\n. I think we could (conditionally) use C++11 traits here, since it's a C++11 issue anyway. actually, in addition to the limitations of std::uncaught_exception (that the plural version addresses) there are also problems with the implementation in several compiler versions. I forget which ones, now, but at least a few versions of GCC that were common a year or two ago (would need to look back through some, possibly close, issues to see which).\nIIRC it was something like, once the flag had been set once it was not being reset - and so was unreliable!. Would it not be easier to run the Catch executable with --list-just-test-names and read the output (which will be each test name on its own line)?. I don't think VS2013 has inheriting constructors, does it?. Yup - sorry about that. Thought it was something else.. Storing your config data in globals is pretty much the only way to do it at the moment.\nHowever you have another problem - you're not passing the rest of the command line on to Catch - so there's no way to do anything else with it (e.g. run specific tests or tags).\nWorking around that, currently, is tricky - because you'd have to pass on a char* array to run() that doesn't contain the filename (but still has the first argument - the exe name - as well as any arguments from position 2 on). It can be done but it depends if that's what you really want to do?. Yes I agree it needs to be more composable - and the current situation is not ideal.\nIt's a \"home-brew\" argument parser that I spun out into it's own project: https://github.com/philsquared/Clara - one of the aims there was to make it easier to work with but I just haven't had time to get back to that yet (and there are some interesting challenges - e.g. if you compose parsers and more than one part wants to use positional arguments, who gets them?).\nAt this point I'm deferring it to when Catch2 gets forked, and becomes C++11, then I'll make Clara C++11 too and that will clean up a lot and make things easier.\nSo it's all on the cards, but not in the immediate future, so I apologise that the current situation is not ideal.. Ah yes, much easier at the end - good idea :-). giving positional arguments to all parsers is one possibility. Maybe the best option - that's something I still need to think about (including looking at what other implementations do).\nAnyway, I'm happy to close this - we have other tickets relating to improved CL parsing. Hi @VioletGiraffe - this (closed) thread is outdated. Since then I followed through on the Clara rewrite, with an emphasis on being compassable and extendible. While it could do with a bit more documentation, there should be enough here to get you going:\nhttps://github.com/catchorg/Catch2/blob/master/docs/own-main.md#adding-your-own-command-line-options\n. No problem :-). Thanks for bringing this up - looks like I missed some references. I think I've got them all now - but I don't have access to VS2010 for a while to check so please let me know if 1.9.3 fixes it for you?. First question is why are you writing your tests in header files? Why not just write them in separate .cpp files?\nThat said this should work, now, as the TEST_CASE macro should be using __COUNTER__ instead of __LINE__. Have you tried this and hit problems? If so what is the error?. After writing that I saw that the issue title is probably the error you're seeing.\nCould you try defining CATCH_CONFIG_COUNTER (either for your project, or as a #define just before #includeing Catch). For reference, this is possibly a continuation of: https://github.com/philsquared/Catch/issues/435. Well, CATCH_CONFIG_COUNTER is a workaround. It should be automatically defined for you.\nIf using it explicitly fixes it for you then it suggests it is not being automatically used. It could be good to work out why that is.\nAs for using .cpp files - yes that's the normal way to do it - unless you have specific reasons for putting them in headers (I can't really think of any).. The original reason was that when I made those std::strings it dramatically increased build times (at least on the platform I was testing it on at the time). Since then I suspect that the effect, if still there, is dwarfed by other areas (although we're trying to fix that).\nIn practice these would be better served by something like std::string_view, but for Catch2 I'm planning to roll out my own StringRef (which is similar) and will use that.. Sorry I didn't respond back sooner - this one got lost (I think while I was at C++Now!).\nSECTIONs do, in fact, take their string arguments as std::strings - for precisely the reason your say - so you can dynamically building them.. ISTR there being some issues with QT types before - but don't recall the details offhand..\nDid you try it as an overload rather than a specialisation?\nYou could also try to specialise StringMaker<T> instead?\nSee https://github.com/philsquared/Catch/blob/master/docs/tostring.md#catchstringmaker-specialisation. We can probably add a command line option to force it to capture or not and check that in the reporter constructors.. I'm closing this in favour of: #853 - so you might want to add yourself as a watcher to that issue.. I've added some judicious /* NOLINT */s to the appropriate places in the source (for this and another one about use of inline assembler on every assertion!). That seems to fix it all.\nThat's not in the single include yet but I think we'll do a release quite soon to get this fix out.. That's awesome - thanks @uilianries.\nIt's been on my list of things to do to look into automating getting Catch onto Conan.\nIdeally I'd like it to be automated as part of our release scripts - do you think that's possible?. So now the recipe is in, do we need to do anything else on each release for Conan to get it?. Thanks. Yes I suspected there was still an extra step.\nI'd appreciate any help with that!. @uilianries creating a new issue is probably \"how it should be done\" - but I'm fine with just continuing here.\n@memsharded Thanks for the guidance. A Catch \"release\" really just consists of updating some version numbers (which, thanks to @uilianries now updates the conanFile.py, too), \"building\" the single include and tagging the commit (with the form vX.X.X).\nCurrently the CI scripts make no distinction between a normal code change commit and a \"release\". If we're going to push to Conan from the CI we'd a way to identify that (for example seeing if the version file has been changed in this commit).. The trouble with specific examples is they may not convey the general idea of why you want something.\nSo what I say next is on the basis that it may prompt you to give another example that forces us to generalise - in the true spirit of TDD :-)\nFor your example I would write it something more like:\nc++\nTEST_CASE(\"minutes\") {\n    int minutes = 100;\n    SECTION( \"Minutes must be within range\" ) {\n        REQUIRE( minutes >= 0 );\n        REQUIRE( minutes <= 59 );\n    }\n}\nThe output, on failure, is then:\n```\nminutes\n  Minutes must be within range\n\n[..]\n  REQUIRE( minutes <= 59 )\nwith expansion:\n  100 <= 59\n```\nWhich would seem to have all the information you need. Granted it's not organised exactly how you would like - but I think it's usually good enough. We don't want to spend our timing optimising for output formatting on the failing case (which we should, hopefully, rarely see) - so I've tried to design things so that you get rich enough feedback with minimum effort.\nSo, now, you can either disagree that this is enough in this case (and if you have thoughts there I'm still interested to hear them - whether or not we end up changing anything) - or you might concede on this example and think of another one that better teases out what you want.\nYour move :-). Ok, but what's wrong with?:\nc++\nTEST_CASE(\"Widget\") {\n    for (int ctorParam1 = 0; ctorParam1 < 10; ++ctorParam1) {\n        for (int ctorParam2 = 0; ctorParam2 < 10; ++ctorParam2) {\n            CAPTURE( ctorParam1 );\n            CAPTURE( ctorParam2 );\n            Widget w(ctorParam1, ctorParam2);\n            w.doSomething();\n            INFO( \"The internal state of Widget is \" << w.someInternalParameter() );\n            REQUIRE(w.valueX() > 0);\n        }\n    }\n}\n. You can format INFO to look exactly like your REQUIRE_MESSAGE output - it's just a bit more fiddly (yet still less typing than REQUIRE_MESSAGE - less characters in INFO() than _MESSAGE :-) )\nThe only real difference is that the message goes before the assertion.\nBut it's more flexible because you can have several of them. In my example I put the two captures earlier. I didn't have to, but because I could it means that if the constructor of Widget throws, or the call to doSomething(), then those values will be logged - even though we haven't got to the assertion yet. I used CAPTURE because that automatically logs the name the variable and it's value - saving some redundancy - but does mean you may have to type more - I could have just put it all in an INFO)\nSo, in summary, using INFO is:\na) less typing\nb) more flexible\nc) allows more state to be captured at more times\nwith the only \"downside\" being that it appears before the assertion instead of after it.\nThat sounds like a good set of trade-offs to me :-)\nSo is it just an aesthetic thing, or do you still think REQUIRE_MESSAGE is more convenient?. I've just pushed a commit to master that implements this. Please let me know if it looks as you intended.\n(It's not in the single include yet - the next release will pick that up - but you can generate one by running the generateSingleInclude script with Python.. Done.\nI've added --wait-for-keypress, which you can pass start, exit or both to (waiting for keypress on exit has been requested from time to time, so thought it makes sense to do it all together).. Both features are now on master and dev-modernise (which will be Catch2). This is due to the old problem of macro arguments with commas being interpreted as multiple arguments.\nThis has been fixed in Catch2 (which will go live very soon) as it would have relied on multiplicative duplication in Catch1.x due to not being able to rely on variadic macros.\n. Sorry, @cdmh - on reviewing this issue I realise I misread your original problem!\nIt's the test name that has a comma. I was thinking of commas in assertions.\nIn fact, to run your test case with a comma in it you just need to escape the comma (with a backslash).\nSo, in your example, you'd run with:\n\"Fill buffer with random PTZ images and keep wrapping\\, then empty\"\nThis is a bit of a pain, and you might still want to avoid using commas in test names for that reason - but if you do use them that's how you do it.\nThis is to do with how test specs are parsed (as you can combine test case names, patterns and tags - and comma means \"tests matching this, and that\"). @kirbyfan64 - very soon :-). yes, for now, making the section name unique on each iteration (i.e. incorporating the loop variable somehow) is the workaround.\nLonger term you'd use generators instead, but they're still a little way off.. @hassanfarid did this answer your question for now? Are you ok if we close this issue?. It's very promising that you're seeing such an improvement from this one change. I've known (pretty much from the start) that these string copies would be a performance bottleneck - and more recently (at least the last couple of years) have planned to reduce/ eliminate them.\nI have my own version of what, in C++17, is called string_view in a local branch that I will be rolling into Catch2 in the near future. I then plan to find all the places - at least hot-path places - where std::strings are used where a StringRef could be used instead and replace them.\nIn your \"second argument\" case - having a quick look and trying to remember what that's for and how it's used, I think the solution is just to defer the concatenating of those strings until they are used (so the concatenated string never needs to be stored) - so we'll just store two StringRefs instead.\nHowever I don't plan to put this into Catch1.x - and therefore you'll need a C++11 capable compiler to use it. Will that be a problem for you?. Yeah, I didn't look close enough to see if it was really needed. The point was we can work around it even if it is. Yeah, I started a proof-of-concept rewrite of they core that did no eager conversions (and didn't use stringstreams at all.\nI'm going to be taking a serious look at incorporating some of the ideas once I get v2.0 released.. For Catch 2 the plan is to defer (almost) all the cost to the reporters - by passing just references to the original, typed, objects that are still on the stack in the assertion. It's up the reporters whether they will obtain a stringified representation or not (depending on whether the assertion passed or not, whether the -s option has been passed, or whether the reporter always logs all results, regardless.\nI did it this way in my proof-of-concept spike to Catch2 and it worked very well - so I'm going to try to steer the current implementation that way.. What is the conanfile.py in test_package for? It has a hard coded version number that never gets updated - is that intended?. Yes please - then I think we can get this in. That was quick! Thanks. I'll probably take a look tomorrow. Thanks - I've now merged this.\nIn fact I did it in two parts, as I'd already merged, and tweaked, the version before that last update yesterday - so I just cherry-picked the last update on top of that.\nThat seems to have prevented GitHub from recognising that the whole PR has been merged so I'll close it manually here.. Thanks for the suggestion, @martinmoene \nDone!. Sorry - I thought I'd done this already and just not updated the ticket.\nI must have dreamt it :-)\nAdded now - thanks for the prompt. Full solution to this will be generators: #850\nIn the meantime you can approximate it by putting a SECTION in your helper function.\nThe caveat is that the section name must have a unique name on each invocation (i.e. the name must be uniquely dependent on the inputs).\nBTW in your example you might also want to combine your two test cases into one, with sections.\nSomething like this (untested, based on your example):\n```c++\nvoid verifyProperty( type1 arg1, type2 arg2 ) {\n    std::ostringstream oss;\n    oss << \"Property holds for: \" << arg1 << \", \" << arg2;\n    SECTION( oss.str() ) {\n        REQUIRE( ... ); // Some tests with arg1 and arg2\n    }\n}\nTEST_CASE(\"tests\") {\n    type1 t1;\n    type2 t2;\n SECTION( \"test 1\" ) {\n      // Do something with t1 and t2 and then\n      verifyProperty( t1, t2);\n  }\n\n SECTION( \"test 2\" ) {\n    // Do another something with t1 and t2 and then\n    verifyProperty( t1, t2);\n}\n\n}\n```. This changed at some point. I think there was some complaint that by doing it by reference within the macro you didn't get the opportunity to choose different approaches yourself.\nWith it not being in the macro you can still add the reference to the type you pass as the argument to the macro.\nI'm still not sure how I feel about this one.\nI'm inclined to change it back, but that would now be a breaking change (especially if you've added the reference externally). So I may revisit for Catch2.. Yeah. Could be clearer, though.\nPersonally I would be happy to just unconditionally add the const& - and provide an alternate way (or let user do it the long way round) for cases where that was not wanted (which must be a small edge case).\nAs I say, though, that would be quite a breaking change - so will think about it for Catch2.. Thanks for bringing this up, @martinmoene . ... or to get back the previous behaviour (less useful, but for completeness), do:\nc++\nAClass ac;\nREQUIRE(!!ac);. Does supplying the test name on the command line not work for you?\n./exeName \"test case name\". no problem - which IDE are you using, btw?. Ah , yeah.\nIt's not too bad, though - in fact probably still less hassle than writing a tag and recompiling?. Yeah - the big difference is that [!hide] (or the shorter [.]) is something you'll usually leave on indefinitely - whereas a hypothetical, [!solo] would be intended for short term use.\nAlso, some IDEs (notably CLion and Visual Studio with the ReSharper C++ plug-in) have test runner integration that will let you run an individual test with a single mouse command.\nAt some point I do still hope to get to Xcode integration.. How are you deriving from MatcherBase?. Try deriving from Catch::MatcherBase<T const*>\nand change match to:\nbool match(T const* other) const override\n. No problem - glad you're sorted. Looks like I should clarify the docs - thanks!. You're not the first to ask this. I agree it would be useful for this sort of scenario and has been on the wishlist for a while.\nI'm going to close this one in favour of the existing issue, which you can find in #734\n. Sounds like an interesting idea.\nThere's (currently) nothing in Catch to explicitly support this. But if you can put the calls out to gbd (and be able to receive and interpret the output) within a Catch TEST_CASE you could do that manually (made more manageable with some helper functions, I suspect).\nOne thing on the wishlist for Catch in the future is to be able to run out-of-process. The main idea there is to run the Catch executable itself out-of-proc (for full isolation or death-tests) - but such a facility could probably be used to execute GDB. However that's not currently a work in progress, so at this stage you'd have to handle that part yourself.\nIf you do decide to take this up I'd be interested to hear how it goes, and whether there are some parts (such as the out-of-proc runner) that it makes sense to incorporate into Catch itself in the future.. That's very interesting.\nIt looks like this issue has been in the code since at least the early days of Catch - if not the start.\nIronically, you have surfaced it over six years later - and just a few days after I overhauled the relevant code in the Catch2 (dev-modernise) branch which no longer has the issue!\nI've merged the commit back that actually fixes it - but as it's a fairly impactful change I've put it on a branch off master for now: reevaluate-merge. I've generated the single include on that branch. Could you please try this file:\nhttps://raw.githubusercontent.com/philsquared/Catch/reevaluate-merge/single_include/catch.hpp\n... and confirm that your issue has gone away (I've verified it on clang on macOs).\nThen we'll consider whether to commit that back to the main branch.\nFYI the issue was todo with the way Catch captures integers as template arguments. In Catch 1.x it has a set of heuristic-based overloads to avoid getting signed/ unsigned mismatches due to how integer literals are deduced in isolation. I've now removed that in favour of just suppressing the warnings!\nThanks!. (sorry - didn't mean to close - wrong button!). Thanks for reporting back. Now considering whether to merge that onto master (Catch2 should not have this issue). Hi @RossBencina,\n\nDocumentation does not exist. This is deliberate because...\n... This is not a supported feature. It was originally experimental - but hit some systemic issues that caused a rethink (and some preparatory rework). There's a new implementation off to the side (not in GitHub) that works properly, but is not finished. This will be going into Catch2.\nNo (not for this implementation)\nYou raise a good point, indirectly, that the lack of documentation does not adequately convey the unsupported nature.\n\nThe original implementation went in quite early on and got stuck there. I know some people have used it, so I didn't want to take it out. The main problem with it (apart from being incomplete) is it doesn't work with sections.. I'm going to close this issue as the future facing aspect is covered by https://github.com/philsquared/Catch/issues/850.\nBut let me know if you have any more questions, @RossBencina . so this is now un-clogged?\n(sorry, couldn't resist). reviewing some older unclosed tickets... @svadimr are you sure? It should re-enter the whole test case again and go into the section for one iteration on each re-execution.\nlike this:\n0 -> execute\n1 -> skip\n2 -> skip\n3 -> skip\n4 -> skip\n0 -> skip\n1 -> execute\n2 -> skip\n3 -> skip\n4 -> skip\n0 -> skip\n1 -> skip\n2 -> execute\n3 -> skip\n4 -> skip\netc.... Given that this particular form occurs with braced initializer lists, which only came in with C++11, then you should have no problem moving to Catch2, anyway :-)\nPlease give it a try:\nhttps://github.com/philsquared/Catch/releases/tag/v2.0.0-develop.2\n(although it's considered \"pre-release\" at this point we're hoping to make it the main distribution very soon - so would appreciate as much feedback on how it's working for you as soon as possible).\n. Perfect! Thanks for letting us know. The purpose of REGISTER_TEST_CASE is to be a manual alternative to TEST_CASE - i.e. not self registering!\nSee #421 - in particular the second comment, for more context.\nAs ever this probably means the docs need improving :-). (or in this case \"adding\"). ObjC support was seriously behind! I removed the test project when I moved everything to CMake a while back. Not sure if I intended to add it back in - but I have now, anyway.\nI've got that project working now - so what's committed on the catch2 branch should work - but the single include has not been updated yet.\nIf you get a chance could you please give it a try? You can generate the single include by running the appropriately named python script in the scripts directory (no arguments).. Sorry for the delay. I think I've fixed these, too, now.\nThe problem was that I was testing in a project with all the original source files - not the single include. That meant that the cpp files were being compiled as C++, not ObjectiveC++., so __OBJC__ wasn't defined :-s. @jaredgrubb can you confirm, or otherwise, that your outstanding issues form this ticket have been addressed?. Closed :-)\nYou can always reopen - or open a new one - if there's anything else. Thanks for bringing this up. It's a pretty fundamental bug in the TextFlow library, which Clara (the arg parser lib) uses! So I've fixed it there (and added tests to catch that case), and propagated the fix to Clara and Catch2!\nAlthough I've committed the fix it's not in the single include yet. However the change is trivial, so you may want to try it yourself. Just go the line that's asserting in Catch (3723) and change the condition there to:\nassert( m_pos <= m_end );\n(i.e. just make it <= instead of <). That's all it was! An over-eager assertion.\nMost of my time looking at this was just spent mentally verifying that that was actually the right thing to do!. Thanks for this.\nMy reading is that this is a C++11 specific thing. In C++11 set had an explicit constructor with a defaulted argument. From C++14 that changes to having a separate default constructor, which is not explicit (it doesn't really make sense for a default constructor to be explicit!).\nSo looks like that's why this one slipped though the net.. Accepted via be067bce37f669d022bc6843a2fbe00a4446462e. Wow! Borland C++ lives on! I've not used that for over 20 years!\nSo the 32-bit compiler appears to be virtually unchanged from the Borland days, AFAICS - and all new investment is in the 64-bit compiler which, as you say, is based on clang anyway.\nThere was an effort (#104), some years ago now, to maintain a fork for Borland Builder (which, I presume, would transfer to the Embarcadero version) - but, AFAIK, that was never kept up (there were some PRs that I would have needed to accept that made me nervous).\nThere was also a VC6 fork that was maintained for some time (maybe even a couple of years) - but even that was abandoned as untenable.\nSo I think the bottom line is that the 32-bit compiler is unsupported by Catch - but the 64-bit one should be fine.\nNote that this is not about C++98 vs C++11. The issues with the Borland/ Embarcadero (32-bit) compiler are about missing C++98 conformance.\nSorry if that's not what you wanted to hear.\nOf course if you're eager to plough on, and maintain your own fork you're entirely free to do so.. Good luck! Please let us know if that works out - in case anyone else has the same issue.\nIf you're not using the Delphi integration is there any reasons or you to stick with Embarcadero at all? Moving to vanilla clang would seem to solve this (and probably other) problem(s).. \"Catch provides the same functionality but in the form of Listeners\"\nThat's not quite accurate.\nBy which I mean: you could use Listeners for that - but that's not what they're for - and is certainly not the best way to do it.\nInstead \"setup\" and \"teardown\" is accomplished in a much more natural (for C++) way!\nYou just use SECTIONs within a TEST_CASE, and each SECTION will be like a test case in a framework with fixtures. You can then do your setup and teardown (although, typically, less need for the latter in C++) outside the SECTIONs.\nIf you prefer the more XUnit style of fixtures, you can still do that, too (see https://github.com/philsquared/Catch/blob/master/docs/test-fixtures.md). If we've discussed this before, I apologise. I don't remember that discussion at present (anything else that might jog my memory?). I suspect we're talking a little cross purposes here somewhere - let's try to identify where.\nWhen you talk about Fixtures I'm thinking of a style of unit testing where you have a test class, which has a set of test methods. The class has setup() and teardown() methods and/ or constructor and destructor - either way they are called before and after calling each test method, respectively (with a new instance created for each test). And this is what I was referring to when I said that Catch does support this style of testing (with brief documentation at the link I supplied). Is this different to what you were thinking of?\nHowever, as I've said, that's not the most idiomatic way to achieve a similar result with Catch. In C++ we're used to using stack-based RAII objects to do before/ after operations and this more naturally fits the idea of SECTIONs. So, yes, as you say, \"any code I call before and after a section is executed as setup/teardown\". In fact the \"as setup/teardown\" is redundant in this sentence. The whole point of this is to get us away from having to think of setup/ teardown as special things that happen at special times. It's just code that gets used like any other code. The setup/teardown effect is achieved simply by code outside the SECTIONs being called before and/ or after the code within. Each SECTION at the same level is executed by re-executing the test case from the start - so you get the same level of isolation you do with Fixtures. But SECTIONs go further because you can nest them - and so have multiple levels of setup/teardown (see the vector example in the tutorial - https://github.com/philsquared/Catch/blob/master/docs/tutorial.md#test-cases-and-sections).\nIs any of this still unclear? Am I still missing what you're asking for?. Thanks for linking the issue. Of course I remember that one now! :-)\nBut in there I was suggesting the use of Listeners for cross-cutting, environmental, setup/teardown (you mentioned starting/ stopping/ clearing databases etc), which you might want to do for all tests (either once at the start/ end, or before/ after every test case). In that case Listeners allows you to put that logic in one place.\nBut if you have to start making that logic conditional on which test is being run, then I don't think Listeners are the right solution - and SECTIONs (or class based fixtures, if you prefer) are a better fit as we've discussed.\nSo I hope that clarifies things and you get it all working as cleanly as you would like.. This is because the macros are interpreting the commas within the braces as argument separators for the macro itself.\nThis has been solved in Catch2, which relies on variadic templates - and so can reconstruct the whole expression again. Best thing to do is to move to that. It's on the catch2 branch for now - but will become the mainline soon (aiming for next week).. Is there anything outstanding on this issue?\n@michaelcowan are you reasonably happy with where we are now?. Cool - thanks. It's not so much \"fixed\" in Catch2 as no longer in scope, since Catch2 assumes C++11 (side-stepping two-phase look-up issues), so most of the compatibility detection goes away.\nOf course that means you can't even use it on older versions of MSVC (I think we're only claiming support back to VS2015). But you've said you're on VS2016 so you should be fine.\nWhile we won't be added new features to Catch Classic, it will still be maintained to an extent - so it's not out of the question to add something like this, although less of a priority for us.. You are correct that there's not really a way to inject into the final bail out with unprintableString with your own code.\nBut it seems like a sensible thing to want to customise. I'll mark this as a feature request and put it on the queue (although I can't promise how soon we'd get to it).\nThanks for bringing this up.. Looks like a change went in on 7th July that stops successful assertions being passed to the reporter if you haven't specified --success/-s. I believe this was done in the name of performance - probably not realising that the decision whether to report successful results rests with the reporter (and thus changing behaviour).\nNow, as it happens I think that it's the right thing to do, anyway (filter successful results before they get to the reporter, if -s is not specified). It puts the user in control (and potentially simplifies some internal code). I was even talking about this five years ago (although, now I read back, it looks like I was excluding the JUnit reporter due to \"convention\").\nHowever I don't think that change should have gone into a patch release (even if we're doing off-by-one semver). But it's there now so I think we'll need to run with it.\nSo, if we interpret all the above as, \"working as designed\" (setting aside the slightly accidental design process), do you still have an objection to supplying -s?\n@PeterSchuebel you say you're ok with it on the CI server, but you'd like it changed for \"everyday command line use\". Are you using the JUnit reporter locally from the command line? I would expect you'd be using the console reporter (or perhaps compact) - or some IDE integration? If so then the non-reporting of successful assertions has always been the default. Perhaps you could clarify?. > Why are 15 out of 73 successful TESTs being reported then?\nHmm, that sounds like something different.\nThe change I mentioned was that successful assertions are not passed on to the reporter. The test cases (and sections) they are in are, though. So when you say, \"15 out of 73 successful TESTS\" do you mean assertions (CHECK, REQUIRE etc) or TEST_CASEs?\nIt sounds like you mean TEST_CASEs - in which case what I said before is not the explanation (although it may still be related).\nI couldn't see evidence of what you're seeing in our our self-test runs (we capture the output as baselines and diff them as a form of regression) - but there were some test cases that stopped being reported for what I thought were different reasons. I'll have to go and look at those in more detail. So I'm going to re-open this ticket for now as I think we may still have an issue here.\nIf you're able to provide any more information - or come up with a minimum example that you can share that shows the problem (to save us talking any more cross purposes) that would be great!. Thanks for the example, @PeterSchuebel.\nThat allowed me to nail out down quite quickly.\nI can see now that, when the change was applied in July, it was only on one of the paths that led to the assertion being reported. So for some types of assertion the reporting was completely suppressed (leading to 0 assertions in a SECTION, which caused the JUnit reporter to not report the section at all) - and others it was only suppressed within the JUnit reporter itself (so it printed the SECTION, but then skipped the assertions).\nFixing this would not be a huge job, but it would be a bit fiddlier than I'd like to commit to in Catch 1.x - especially since all the impacted logic has changed in Catch2 and (I just checked) it does not have this issue!\nSo, since it's just a weird inconsistency, but not inaccuracy, I'm going to propose leaving this, after all.\nI'd encourage you to try out Catch2, though (currently on a branch, but I'll be promoting it to master in the near future). Assuming you have a C++11 capable compiler?. Thanks. I'll re-close.\nI forget what now, but I have a feeling VS2013 may not be enough (although it's possible whatever the issue was got fixed in a later update - not rechecked for a while).. I've just pushed a change so that it takes the RHS by const reference.\nWhen I was rewriting it (from the original Catch 1.x version) I was trying to be const/ non-const agnostic (to avoid having to const_cast at the bottom). My reasoning was that it's easy to write a comparison operator overload and forget to make it const. The person writing the test may not even have any control over that. And it would be a difference in behaviour from doing the comparison without the expression decomposition - which I was trying to avoid.\nAnyway, I ended up having to make the LHS a const ref anyway, and this issue has shown that my attempt to hold out on the RHS was misguided. So I'm letting go on this one.\nThe universal references where never about perfect forwarding - no values are being stored as we're only ever consulting the values while they are still on the stack.. @rkaminsk does this address the issue for you?. @hiiwave does this conclude this issue for you?. @PRGWITHSTYLE there was an issue with the generated single include for MSVC in dev build 4. This has been fixed and, just today, I've released a new single include (v2.0.0-develop.5) with the fix.\nThat should address your last issues.\nAs for the NOMINMAX, that shouldn't be necessary, tbh, as we've been wrapping all our mins and maxs in parentheses to prevent the macro conflict. I did spot one case that had crept in and have fixed that now (also in the develop.5 release) - so would appreciate if you could confirm whether or not it works for you without NOMINMAX too?\nThanks - and sorry for the delay - I've been travelling a lot recently.. Scratch the NOMINMAX claim - seems it is still necessary :-(\nBut, anyway, I just built an MFC app with the latest Catch, with #define NOMINMAX at the start of my stdafx.h and it builds cleanly.\nI'm not sure where your errors are coming from but it looks like there might be some contextual issue - perhaps an unclosed construct before the inclusion?\nDo you still have #include \"Test1.h\" before you include Catch? Perhaps put that after and see if it makes a difference?. Ah, I think I may know what the problem is!\nLooks like you need to grab the latest version of catch_reporter_teamcity.hpp, too (it's not part of the single header)!. Sorry, I think I might be confusing things here. From your original description you're using v1.10, and the release I just directed you to is from the v2 (pre-release) branch!\nThat's why the (v1) TeamCity reporter is breaking.\nIf you're happy to stick with v2, then please grab the latest TeamCity build from the Catch2 branch. Otherwise, and in the meantime, I'll take a look to see if v1 builds with MFC for me here...)\nAgain, sorry for the confusion!. I'm really sorry you're having these ongoing issues.\nI've just added the team city reporter to my test MFC app and it all works fine for me.\nBut I looked in my catch.hpp at some of the line numbers from your error messages and they don't see to correspond. Can you confirm that you have v2.0.0-develop.5? (check in catch.hpp, in the comment header right at the top of the file).\n. Looking at your errors again I see mention of ResultBuilder. That class no longer exists in Catch2.\nDo you have any other Catch files in your project (other than catch.hpp and catch_reporters_teamcity.hpp)?\nDo you have any custom code in your project that uses types like Catch::ResultBuilder?. yes, I discovered that to use std::shuffle we have to pass in an instance of a class with methods min and max, so we're still susceptible (but now Catch2 is on C++11 I may be able to remove that).\nGlad to hear it's all building for you from Catch2, now. Catch2 will become the master branch quite soon, so I didn't want you to get stranded on the legacy branch.. It\u2019s a perfectly valid way to work, and so is supported via the -s switch that @martinmoene mentioned.\nI do believe that the majority of users prefer the quiet-until-failure approach - so that is the default.\nPerhaps it could be explained in the documentation, but I\u2019m comfortable with the defaults.. @DBJDBJ I'm sorry that Catch's defaults are not exactly what you would want. As I said before, the vast majority of users prefer it the other way around - so we're not going to change that. But it's a simple matter of just passing -s on the command line.\nIf you prefer you could do it in code, too (see https://github.com/philsquared/Catch/blob/master/docs/own-main.md).\nAs for Catch2, it's currently on a branch: \nhttps://github.com/philsquared/Catch/tree/catch2\nOr grab the single header file from here (current at time of writing):\nhttps://github.com/philsquared/Catch/releases/download/v2.0.0-develop.4/catch.hpp\n. Catch2 has far less platform/ compiler dependent code than Catch 1.x had (because of the ability to target C++11 now) - but some is still necessary - mostly for #pragmas and such.\nI have to admit this is the first time I've heard of someone wanting a partially pre-processed file for specific compilers. While I can see the appeal I'm not sure this is something we would prioritise supporting. Most useful open-source libraries and frameworks have such platform dependent code in - it's a \"cost of doing business\" in the C++ world (although that is gradually changing for the better).\nI'm also not sure how much risk you see in such code in a test framework - which would not normally form part of your end product?\nThanks for bringing it up, though.. Hi @mwpowellhtx,\nI\u2019m just returning from travelling, on my phone, but will try to respond briefly for now.\nRegarding Matchers you shouldn\u2019t need to do anything with captureMatch, or anything else internal to Catch. As long as your matches derive from MatcherBase, that should be all that\u2019s needed. So I\u2019m not sure what\u2019s happening in your case. Could you show the usage?\nRegarding the intent, if you\u2019re trying to match exceptions then Matchers are not the right approach (unless you\u2019ve caught the exception and now just treating it as any other object). There are a set of exception-oriented assertions, as you have now seen in the exception tests (they should be documented too).\nPerhaps you could give a bit more detail about what you\u2019re trying to do?. Hi @mwpowellhtx - did you get anywhere with this?\nDo we need to keep this ticket open, or are you happy for now?. @mwpowellhtx it's on the catch2 branch. np. I'm trying to get Catch2 onto master as soon as possible!. This is now in the single include, too.\n@mwpowellhtx does this close your issue?. Thanks!. Sorry to come late to the conversation. I'm not entirely sure what issues you've been having - but glad you got it sorted in the end.\nI can certainly say that what's in GitHub has almost always been built and tested before committing (esp. the single header - which, at this point, is really what you should be using). However please bear in mind that Catch is a cross-platform library and can be susceptible to platform idiosyncrasies. Our main tool for discovering these is the CI that runs against the GitHub repo - so sometimes things get pushed that don't work on all platforms.\nAgain, that's not usually the case for the single include - and I don't know if that's what you're seeing - but thought I'd add that bit of context.. This need is one of the key drivers for Catch2 rebasing on C++11.\nOnce Catch2 is fully released this will be one of the first major tasks - it's been on the wish-list for a looong time.. Exactly! Before Catch2, and thus C++11, we didn't have std::thread. I think the key point you are missing here is that each section is executed independently of the others.\nThat is, on the first run through the test case will be entered, then the first section (\"list should be of size 0\"). But after coming out of that section the subsequent sections are skipped!\nThe test case is then executed again, this time skipping the first section. The second section is entered (where all the values are inserted), then the rest of the sections are skipped.\nThe test case is executed again, skipping the first two sections and going into the third. The tests in here will fail because we're working with a new list - not the one that was populated previously.\nThis process continues until, only on the final run through, does it go into the section, \"cleaning up the list\", which deletes it. All the other lists leaked.\nIf you want one section to follow on from another (e.g. the finds to operate on the same list as the inserts) you'll need to nest sections.\nTo fix deletion you should move that out of sections (just at the end of the test case) - but I would advise holding the list in a scoped_ptr (if it really needs to be heap allocated) - or better still as a value on the stack - that way you don't rely on execution actually reaching the delete - it will happen even if the function has an early exit (e.g. due to an exception).\nHere's a modified version with that advice applied:\n```c++\nTEST_CASE( \"Single Linked List\", \"[a]\" ) {\n    IntLinkedList intLinkedList;\n    SECTION( \"list should be of size 0\" ) {\n        REQUIRE( intLinkedList.size() == 0 );\n    }\n    SECTION( \"List should not contain element with value 1\" ) {\n        REQUIRE( intLinkedList.find(1) == false );\n    }\n    SECTION( \"List should be able to insert element, find it and validate size.\" ) {\n        intLinkedList.insert(1000);\n        REQUIRE( intLinkedList.size() == 1 );\n        intLinkedList.insert(100);\n        REQUIRE( intLinkedList.size() == 2 );\n        intLinkedList.insert(10);\n        REQUIRE( intLinkedList.size() == 3 );\n        intLinkedList.insert(1);\n        REQUIRE( intLinkedList.size() == 4 );\n        REQUIRE( intLinkedList.getHead() != nullptr );\n    SECTION( \"Should be able to find inserted elements in list.\" ) {\n        REQUIRE( intLinkedList.getHead() != nullptr );\n        REQUIRE( intLinkedList.find(10) == true );\n        REQUIRE( intLinkedList.find(1) == true );\n        REQUIRE( intLinkedList.find(100) == true );\n        REQUIRE( intLinkedList.find(1000) == true );\n        REQUIRE( intLinkedList.getHead() != nullptr );\n\n        SECTION( \"Removing element should set size accordingly and not be able to find it.\" ) {\n            REQUIRE( intLinkedList.remove(1) == true );\n            REQUIRE( intLinkedList.remove(100) == true );\n            REQUIRE( intLinkedList.remove(10) == true );\n            REQUIRE( intLinkedList.size() == 0 );\n            REQUIRE( intLinkedList.find(1) == false );\n        }\n    }\n}\n\n}\n```\nNote that this still has issues in remove and in the destructor of the list, so still fails as written - but the flow through Catch is now correct. I'll leave the other fixes to you (or ping us on the #learn channel on the cpplang Slack :-) ).. Yes, in fact the tutorial docs that @martinmoene pointed to uses an example I wrote for testing std::vector - so there is actually some similarity with what you're trying to do (I use that as an example of where nested sections are useful). For it to really make sense, though, you do need read the bit after the first example that explains the sequence of events when discovering sections.\nThey're straightforward enough once you know how they work - but it can be a little less obvious when you first encounter them.\nI'll close this for now - but if you have any further issues please re-open, or raise a new ticket. Or we can chat on cpplang for general advice.. Yep - that all seems reasonable. I've applied the fix to both 1.x and Catch2 branches - thanks for that!. Thanks for this.\nI see the problem (some leakage from the Windows support). I've fixed it locally, but just need a chance to double check on Windows, too, before I commit.. That's in. There will be a new single include in the near future (but you can always run the generate script in the scripts folder if you want to check it out sooner). Argh, sorry! I always forget that deleting a branch closes all associated issues and PRs - with no way to re-open :-(. How much of this is still outstanding? I know you've been working through it.. The short answer is: no.\nI am adding micro-benchmarking support (on the Catch2 branch) which might help in the long run - although that's more for surfacing timings, rather than asserting on them.\nThe reason I'm not sure if asserting on run-time is a good idea is that it becomes non-deterministic, and can lead to flickery tests. Sometimes that's unavoidable (in which case I'd at least hide them from the default run with [.] or similar, so only run them deliberately).\nSo I don't think I'd want this to be built in to Catch, but your implementation seems like it should do the job (although I'm not sure it needs to be implemented in terms of a lambda - perhaps just have REQUIRE_TIME open a scope and do the timer inline around the REQUIRE directly?). There is a parent try/catch around the call into the test case. It should be handling it gracefully.\nIf it's crashing it suggests that there's an exception being thrown during stack unwind due to another exception (an easy situation to get into with throwing destructors, and why they're not usually recommended - although I sometimes find them useful, too).\nIs this in the case where the test case is concluding successfully, or has a test failed and it's exiting early (assertions starting with REQUIRE exit by throwing an exception!)?. That's because it's comparing the pointer values, not the strings themselves.\nAlthough I agree it's confusing - it's just C++ confusing, and not anything specific to Catch.\nIt's the same behaviour as if you did:\nassert( copy == date );\n. IIRC there has a been a suggestion in the past that we should include both the string and the pointer value in the stringification.\nThat might be the best trade off.. I agree, on principle, that if we're comparing pointers we should print pointers - and usually we do. char* is a special case, though, where we are usually interested in the null-terminated string it's pointing at.\nBut that introduces confusion like this where you see two identical strings printed with the report that they are different.\nHence my reference to the proposal that both the pointers and the strings be printed. I think that walks the line best.\nAs for the example you gave, assuming you mean from here: https://github.com/philsquared/Catch/blob/master/docs/assertions.md#natural-expressions, I believe the implication was that str was a std::string, in which case it would work. Thank you for pointing out the ambiguity, I'll get that clarified in the docs.\nTo compare strings, if you only have char*s you have the same range of options as you would outside a test framework. You could use C's string comparison functions, e.g. strcmp et al. Or you could wrap one of the operands in a std::string and use the operator - e.g.:\nCHECK( std::string(copy) == date );\n. sorry, my response crossed with @horenmar, as did our coverage - but there's also some difference so I'll let mine stand :-). @retokid you could also use:\nc++\nusing namespace Catch::Matchers;\n//...\nCHECK_THAT( copy, Equals( date ) );\nI think it's important that what operators mean within a CHECK or REQUIRE is exactly the same as what they mean outside (with some limitations, as @horenmar has hinted at).\nI've been looking, again, at this idea of reporting the pointer value as well as the string for char*s, but I think it's too verbose and more confusing than not (which is probably what I concluded last time too).. Wow thanks!\nI'm not sure if I should close this issue or not ;-)\nGlad it's working out well for you. I think you might still have one or two open issues with us - which hopefully we'll get resolved soon (ironically I've been caught up this week delivering two talk - one on Catch2!). I'm not entirely sure what you're asking.\nIn terms of a macro that will \"only pull in the implementation and nothing else\" - why is CATCH_CONFIG_RUNNER not what you want?\nBut with precompiled headers you would only want the non-impl parts included (ie without CATCH_CONFIG_-anything (and it's debatable if you even need Catch in the pch - I've always excluded it).\nPerhaps you could sketch in a little more?. It does.\nIs there a reason this is a problem?\nOne of Catch::Session's roles is to clean up singletons in it's destructor.\nIf you want to do it without Catch::Session for some reason you can explicitly call Catch::cleanUp() instead.. -- sorry didn't notice before that your PR was to put Catch::cleanUp() in LeakDetectors destructor.\nThat won't work for two reasons:\n1. cleanup needs to have run before leak detection\n2. cleanup should only be called once (we could put a flag in, but IIRC that's not how it works now) - so if you do have a Session object too it will break.. Actually, looking at the code it might work ok. It deletes objects then sets them to null. I think it used to be more problematic.\nAlso the leak detection happens later than the LeakDetector's destructor.\nSo maybe your PR is ok as-is. Take a look at https://github.com/philsquared/Catch/blob/master/docs/own-main.md, especially the part under, \"Amending the config\". That should allow you to do what you want programatically.\nHowever I'm not sure what the issue is. While the new json config for specifying launch arguments in VS with CMake is a bit fiddly (and I'm sure will gain a UI in due course) I didn't think there was any scalability difference vs the standard vsproj way - what am I missing?. OIC.\nWhen you say \"to run all tests\" do you mean all the tests in an executable?\nIn which case does just running the executable not do that for you?. In fact it is (I just moved it to a parenthetical). RAII is the usual approach for clean-up. If that is not convenient, or possible, then using a Fixture class is still available.\nTo answer your questions about those, the constructor of a Fixture is called immediately before every invocation of the test method, and the destructor immediately after (as is traditional with fixture-based test frameworks).\nDoes that answer your questions? (@c1moore & @lifeisdream)\nIf so I'll look at expanding the documentation in this area.\nThanks for bringing this up!. Thanks for fielding this, @onqtam. You're mostly right - except that we shouldn't miss that last section unless an exception is thrown from the parent section. i.e. if \"sec1\" throws then any peer sections after will still be discovered.\nSo that may well be the right approach.\n. That \u201cnull deref\u201d test got duplicated in a merge error. I only noticed it after I\u2019d tagged (I assumed the merge had gone fine because regenerating the single include compared equal - but the issue was in the tests).\nI\u2019ve since removed that test.\nI think all the other failures are due to that because it causes the executable to error out on start-up.. I've moved the tag to the correct commit (the single include is identical - the only code change is in the tests).. Yeah, I was talking with @mattgodbolt just yesterday about that - although more from the perspective that we should include them alongside the release files in the release area.\nWhile I agree they should probably go in single_include, it does contradict the naming a little. I'm not sure the best approach there (although it takes me back to an old proposal I had of having the \"dev\" sources in a separate repo/ branch, and then having a \"release\" repo/ branch that has only the things needed. Unfortunately there were things about that that don't work out too cleanly either).. > complete avoidance of doing any work in the case that no results will be reported\nWe've actually done quite a lot here already. Clearly there is more to be done - but what interests me is where the regression is coming from.\nI ran your benchmark and see that, as provided, it seems to optimise the baseline code out. Making sure the failed/ passed variables are used fixes that - but there's still a larger difference between a Catch2 assertion and the direct code than I'd like.\nI've also narrowed it down to the same AssertionHandler::handle overload that @horenmar cited.\nWhat I haven't done, yet, is compare it against Catch 1.x - to see if there really is a large regression.. I have actually not done the v1 vs v2 compare, and it does seem to match your findings :-(\nStill trying to home in on what key difference is.. Argh! s/not/now/. Thanks @joto - I've fixed the release notes now.\nAlthough what @horenmar says above is correct I do wonder if we should do better, here. After all the actual REQUIRE_THROWS_WITH let's you use a string matcher. We could probably special case REQUIRE_THROWS_MATCHES to allow a string matcher, too.\nI'll leave this ticket open while I think about that.. I suspect it might be something to do with this:\nhttps://github.com/catchorg/Catch2/blob/46c7c9d3a0cb975dabf5970cc65fd8fc72d4c5b5/docs/limitations.md#clangg----skipping-leaf-sections-after-an-exception\n. Yeah, looks like that second template arg on MatcherBase was left over from some earlier refactoring attempt and shouldn't have been there. VectorContains seemed to be the only thing using it (incorrectly). I've removed it and your example should work now (I've added something similar to the self-test project). Thanks for reporting it, @rpavlik . Interesting.\nBTW you could do SUCCEED() instead of CHECK(true).\nBut why are you using Catch::Tags?. You mean without having to rely on getting the square brackets right?\nAs for TEST_CASE supporting std::string, as of Catch2 it uses StringRefs (which are like std::string_view - and are constructible from, std::strings.. I presume this is the same as: https://github.com/catchorg/Catch2/issues/981#issuecomment-346345007 ?. Possibly - and that might explain some of the regression we've seen - but not all of it.\nBut on that note - thanks for this @coombez coombez - but I have a local branch here with some more far reaching changes (that include something like your patch) addressing runtime perf. I'm looking to get it finalised and pushed soon.. yeah, hold off for now - no sense in us both doing conflicting work.\nI'm currently juggling compile time/ runtime trade-offs (I got it down to faster than Catch 1.x runtime speed, but at too great a compile time cost).\nAt the moment I have something that's probably closer to yours, but with some other organisational changes that may open up further opportunities. I'm probably going to get that in this week.. I've been looking at reducing the number of entities involved in each assertion. I've not made much progress - but my first attempt actually had a 300% overhead (at least with clang) as I attempted to use lambdas!\nThere are other areas I'll be looking at too, but I was concentrating on the assertions as I wanted to look at compile/ run time together there.. In fact, after exploring a few dead ends my exploratory branch has got so messy I'm going to abandon it and start selectively applying aspects of it to an up-to-date master.\nSo, in the meantime, I'm going to take your PR and work back out from there. Thanks!. I've also pushed the first of my other changes, which just inlines StringRef constructors. That get's another chunk of the way there.. Thanks, yeah - that's similar to the ratio I see.\nI've seen your other PR, too - thanks. I'm actually doing something with StringReg= too, at the moment - although slightly different - so I'm not sure if I'll take yours yet (although the other part, with context, looks interesting. I haven't started looking at context yet, but I've been pursing some other opportunities to re-inline dependencies - while balancing the compile-time angle, too).. In fact, on closer inspection, your StringRef is mostly orthogonal to what I'm doing, so I'm going accept that, too.. Any further thoughts on this, @thetic?. From our conversation on Slack it's my understanding that the exception specification issue is moot.\nAs for the extra ; - I have fixed that in Clara and will merge that in before the next release.. This is a tricky one. IIRC isTrue() was non-inlined so the compiler wouldn't complain about unreachable code. However that was always a bit of an arms race and may be best left to #pragmas - in which case it may not be needed at all in most places. Inlining it is solving the wrong problem, though, I think. I get warnings with (void)0. However I tested a re-inlined isTrue() on a few GCCs, clang and MSVC (2017) with high(ish) warnings (-wall/ -W4) and get no warnings from it - so I've now committed that.. will look at the others when I have a bit more time to run the compiler benchmarks as there can be an interplay.. @martinmoene hmmm, odd. I just tried it again and this time get no warning with , (but I do with &&).\nI wonder if I left the && in there after previously trying both ways with the other compilers (all in Compiler Explorer).\nMaybe that is better, then.... I'm fairly sure I've fixed this now (but not been able to test on Windows).\nI recently added another singleton (I know, I know!) and forget to add it to the clean-up call.\nThe idea is that all singletons are cleaned up before any leak detection runs, so should not muddy the waters.\n. I should have mentioned, btw, that my fix is not (yet) present in the single include - so you'd need to regenerate that (generateSingleInclude.py in the scripts folder).. BTW you shouldn't need to explicitly call _CrtDumpMemoryLeaks() as Catch does it for you if it detects Windows.\nAnd your original example won't work, as is, because you're calling _CrtDumpMemoryLeaks() before the destructor of Catch::Session, which is what performs all the clean-up.. Sorry, correcting myself, Catch only does leak detection if you define CATCH_CONFIG_WINDOWS_CRTDBG. (see: https://github.com/catchorg/Catch2/blob/master/docs/configuration.md#other-toggles). \ud83e\udd14. there's no difference with how you declare a custom main in the full project vs the single header, but note the full project now includes cpp files.. you should just need to do the usual, #define CATCH_CONFIG_RUNNER before #includeing \"catch.hpp\" from the include folder.\nBut you will also need to add all the cpp files (which, non-intuitively - this is transitional) are in include/internal.\nYou could build those as a static lib, if you like - or just include them all in your project.. Yes, at a glance that looks about right.. I've never been very satisfied with the DBG_NEW stuff.\nI've always resorted to setting a breakpoint on the allocation:\nhttps://docs.microsoft.com/en-gb/visualstudio/debugger/finding-memory-leaks-using-the-crt-library#setting-breakpoints-on-a-memory-allocation-number\n. Probably it's too early (usually happens if it's from a static constructor that gets called before main).\nWhat I used to do in that case is break on a higher allocation number (say 1000) - doesn't matter what - and that should break you on the line in the MS code that triggers it. You can then stop, set a line breakpoint there, and that should give you a chance to set the allocation breakpoint.. (sorry for vagueness, it's a couple of years since I've had to do that). Looks like you need to explicitly enable exceptions with clang-cl. I presume you use the MSVC flags, /EHa or /EHs. https://msdn.microsoft.com/en-us/library/1deeycx5.aspx. Unfortunately that's not how it is supposed to work.\nCalls to describe() should be independent of any calls to match(). That caching string is an internal implementation detail (to avoid repeated calls to a potentially expensive stringstream operation in describe()).\ndescribe() can depend on the value being matched against (the \"right-hand-side\" value) - but not the \"left-hand-side\" value.\nTo support something like this, a potential possibility is to add an optional virtual that works like describe(), but takes the lhs value for use in constructing the string.\nI'll have to give that some thought.... They are different scopes. More specifically they are just if statements. Think of it like:\n```c++\nif( shouldIGoIntoSectionA() ) {\n    // ...\n}\nif( shouldIGoIntoSectionB() {\n    // ...\n}\n```\nSo, even if the logic that chooses which section to go into fails, there should be no way that a conforming C++ compiler should allow variables declared in the first block to leak into the second!\nRegarding declaring the same class in different source files - that sounds like an ODR violation (ie One Definition Rule - so any type with the same name and scope should be the same in all translation units or else it's undefined behaviour). It's not the same thing.\nCould you give a more complete example?. Hi @ibc - did you ever follow up on this?. Sure - let me know. Thanks for getting back.. Hi Ian,\nI'm not quite sure what you're saying the problem is.\nIn the example you gave I see both strings written to stdout are present (as I would expect).\nWhen using the console reporter stdout is not redirected, so anything sent to it is immediately streamed. This can give odd results as the assertion reporting happens lazily (i.e. nothing is printed until the first failure). However in your case we're seeing them in an intuitive order anyway.\nIs your example output from your Linux machine, or from Wandbox?. I think that was the case years ago - but I got a lot of feedback that it wasn't what was wanted, so I changed it.\nMost of the other reporters do capture, though.. Are you using the single include (i.e. the header in single_include)?. Hi again @AlexWang-16,\nI'm not quite sure what's going in. In the current single header there are no local #includes - only to the standard library (that's the point of it being a single header).\nAre you sure you're using the single header everywhere?\nYou say you're using v2.0.0 - is it something you took a while ago? The latest version of v2.0.1. Could you please try the latest version of see if you still have the same problem?. https://github.com/catchorg/Catch2/blob/master/docs/tostring.md\n. You're welcome :-). You are correct that VS2013 is not supported by Catch2 (as it's C++11 support is not sufficient).\nYou are also correct that that wiki page is not maintained - in fact the entire wiki was deleted at least four years ago! I'm impressed you managed to find (or have held onto) that URL - and that it still works!\nAFAICS we don't have an equivalent page in the current docs, although https://github.com/catchorg/Catch2/blob/master/docs/limitations.md is close (and also needs updating in places).\nYou can also look at our Travis and AppVeyor builds:\nhttps://travis-ci.org/catchorg/Catch2\nhttps://ci.appveyor.com/project/catchorg/catch2\nAs you can see, on Windows, we're only testing on VS 2015 and VS 2017.\nSorry if it's not what you wanted to hear. Your options seem to be either (a) drop support for VS2013 or (b) stay on Catch 1.x.. What are the Codacy warnings?. Thanks.\nAh yes I know about most of those. Some are fair enough and I've been getting through them. Some I disagree with (e.g. it's actually better to pass StringRef by value).\nIn any case other harmful - but I'm not sure how to silence the ones that are \"as designed\" in Codacy.. Well that's embarrassing!\nLooks like timer values are being truncated to smaller int sizes too soon!\nI've fixed that now (will be in next single header release).\nThanks for reporting!. Done - thanks!\nhttps://github.com/catchorg/Catch2/blob/master/docs/opensource-users.md#dtcraft. There was a bug with truncating integers in the timer code that I fixed recently. It's not in the single include yet but is likely to cause of your issue. We'll be doing a release very soon.. https://github.com/catchorg/Catch2/issues/1125. Thanks for the additional repro steps @riksteri. That helps a lot, although I'm still not quite sure what to do with this right now.. Thanks for reporting back, @ComicSansMS . What do you want it for?. Since #890 was closed Catch2 has been released with the new version of Clara that is built from the ground up to be composable.\nThis allows you to add your own custom arguments easily (although you'll still need to provide your own way of getting them into test cases, e.g. using globals or singletons).\nSee: https://github.com/catchorg/Catch2/blob/master/docs/own-main.md#adding-your-own-command-line-options\n. I tried this too, with boost 1.62. It worked for me when I added the optional_io include.\nHowever I did manage to reproduce the same static assert even with optional_io.hpp  included, if the type it was an optional of did not have an ostream& operator << overload (and a Catch::StringMaker specialisation wasn't enough because it's boost forwarding on, not Catch, at that point.\nSo I wonder if, when @acgetchell said, \"It doesn\u2019t resolve the error. I tried that here:\" he was only referring to the maybe_moved_universe type - not the int from the simplified example in the issue? (the link provided no longer works).\n@acgetchell - could you try adding an ostream& operator << overload for maybe_moved_universe and see if that resolves it for you?. I've marked it for closure after the next release (should be soon - winding up again after the holidays :-) ). By \"as documented\" I presume you mean here: https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#specifying-which-tests-to-run\n?\nIf so, I agree it's not very clear (that could do with a bit of rewriting and/ or augmenting), but it does say, of tags at least (with an implication it applies to names/ patterns), \"A series of tags form an AND expression wheras a comma-separated sequence forms an OR expression\"\nSo you a b c is an AND expression, meaning a test case must match a AND b AND c - which is impossible.\na,b,c is an OR expression, so a test case must match a OR b OR c, and so should therefore select all of them.\nWhat's probably confusing matters is that example given of a* ~ab* abc - which looks wrong to me (or rather I would expect that to only match ABC). I'll take a look at that, but I think it's a doc error.\nDoes that explain it, or am I looking in the wrong place?. Yeah - definitely agree it's not very clear Also agree it might not seem intuitive at first when you consider just that case - but considering the whole picture (allowing you apply filtering expressions, and also tags) it seemed the most consistent way at the time.. It was very early on, yes (long before 1.0) - but it's more recent that the emphasis has shifted to the single include being the primary, supported, way of working.. Should be good.\nNote that one of the big advantages of the single include is you can just commit it directly in with your own sources - rather than have the external dependencies (although either way is fine).\nAlso I see that your main test file (main.cpp) is supplying a custom main that doesn't do anything different from the one that Catch itself provides (although from the comment it looks like that might have been because some time ago Catch was using char* const in its declaration of main - that has now been fixed). So you might want to replace that whole file with just:\n```c++\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\n```\n... but, again, it will work just as well either way - just less boilerplate code to worry about :-)\n. FTR I agree with everything @horenmar says. WRT (1) it was a case of \"seemed like a good idea at the time\".\nI don't know if anyone really relies on it - but if they do it's not many. We should probably have changed it in the move to Catch2, but we could do it on the next major version?\nAnd finally I'll add that (3) can also be addressed by providing your own main() - as long as your platform supports the unclamped values (e.g. Windows). I'm not sure how useful it really is in practice, though (if you have more than 255 tests failing do you really care about the exact number?). The return value is clamped to 255 - so if 256 tests fail the return value will be 255. It won't look like success.. That depends how you name your files.. I do wonder if -# should also strip the word \u201ctest\u201d or \u201ctests\u201d from the start or end of the tag. That could have unwanted side effects (and would be a breaking change), though.. Hi,\nCATCH_OVERRIDE was a transitional helper macro that allowed Catch to compile with pre C++11 compilers, while giving the greater protection of override where supported.\nNow Catch2 assumes C++11 there was no need to the macro.\nIt was only ever intended for internal use (so should, really, have been named CATCH_INTERNAL_OVERRIDE - my bad). If you've been using it yourself you should either: replace with override if all your code is C++11 on - or if you also need to support older compilers replace with your own macro (feel free to borrow the logic from Catch1.x).. oh yeah - I think we had that conversation elsewhere :-)\nGlad it's working out well for you.\nOk to close this?. Thanks for this. It's the correct fix, but that code is part of Clara, so I've applied it there and will bring a new build of Clara back into catch soon.\nSee: https://github.com/catchorg/Clara/commit/82ad930b816c7f8a731165c0e02300dc3d6e4091\n. Thanks for that! Looks like a copy & paste error.\nThe intention was to use a using namespace so I've done it that way rather than taking this PR as-is.. What's happening here is that Catch can only \"discover\" sections by executing all the code leading up to it.\nSo if a section is exited early due to an exception (including a failed assertion) then it doesn't know if there are more sections after the failing one because it never got there before to check - so it has to do one more run through to see if there are any more sections - even though in many cases (such as this one) there are none, so it seems like a redundant run though.\nAFAIK there is no way to avoid this.\nWhat could potentially be done (and I have thought about this from time-to-time, along with some variations in other cases) is to suppress reporting of the final run, if no further sections are encountered. But there are some nuances to that that make it non-trivial (e.g. it doesn't know whether or not to report until it has completed the parent section).. btw, I meant to also add that the best way to defend against, e.g. leaks as in your example, is to use standard C++ best practices like smart pointers.\n```c++\nTEST_CASE(\"root\") {\n    SECTION(\"A\") {      \n        auto no_oops = std::make_unique(1024);\n    SECTION(\"A.1\") {\n        REQUIRE(false);\n    }\n}\n\n}\n```\n(or better still, in this example use a vector). FTR you can get the behaviour you want now. You just need to exclude the hidden tests explicitly:\n~[.]~[baz]\nI agree it's not as nice or convenient. I also agree that, usually, when you use an exclusion like ~[baz] you still don't want the hidden tests. Only adding hidden tests in when they match a positively filtered spec sounds like a reasonable approach - but what about when you mix negative and positive filters together? Not saying that it can't be specified in a reasonable way - just that it needs some thought.\nI suspect that changing the behaviour is the way to go - but that would have to be on the next major version. I doubt it would break many, if anyone, but we do want to follow semver more strictly.\nWould the approach I mentioned at the start keep you going until then?. We're considering a change to how hidden tests interact with filters.\n(see https://github.com/catchorg/Catch2/issues/1184#issuecomment-365300867). Thanks for getting back. Not necessarily contradicting this, but just to clarify: the intention behind --list-test-names-only was to write the tests in a form that is directly consumable by -f. If this gets absorbed into a particular verbosity level of a particular reporter I wouldn't want that capability to be lost.. I've only been following this with half an eye (as I've been super busy with other things, but finally getting back to some work on Catch2 for a while).\nI notice that @horenmar committed 44722f9ed3d019bdff92d003f9e73333e68c503a yesterday, which seems to include most of the what's been discussed in this thread (it was a single commit which I presume was squashed from a set of branch commits?).\nAnyway, what I've noticed is that a side-effect of this work is that most of the SelfTest project related stuff in CMakeLists.txt has been moved into a CMakeLists.txt in the projects directory. This means that the SelfTest executable is built to a projects subdirectory in the CMake output dirs (at least on my Mac). Currently this breaks the approval testing, which is still looking for them in the CMake output root - it seems to be \"working\" because the previously built binaries happen to be there (I'm guessing Travis has been reusing build directories?) - or perhaps I'm missing something else?\nAnyway - the approval test scripts can be changed, but I wanted to see if this is the direction we want to go in (and what the reasoning is)? I'm guessing the motivation is to separate out the parts of the CMake build that relate to self-testing from those related to install? If so is this really the only/ best way to do it (I'm fine if it is - just want to be sure that's been considered). And if so I think I'd prefer that sub-directory to be something more like SelfTest than projects.. (in fact I can see that approval tests are working on Travis et al because that path is being supplied explicitly from CMakeLists.txt - so less of an issue there - it's my local runs that suffer - but the main points stand).. which is fine - except that it does change the build output. Yes, to change the format of the report you'd have to write your own reporter. In this case deriving from the existing one and just overriding the point you need to inject something is probably the way to go (hey, sometimes OOP re-use actual works!).\nTo write tags you need to use the XmlWriter class. It closes tags lazily, so it needs to know the next thing you're writing is a new tag (you can't just start writing the characters \"<info...\". @rcdailey The original issue was reported in April - unless I'm missing something. I don't think much, if anything, has changed with the reporter/ listener interfaces in that time.\nI agree that it sounds like you need a Listener rather than a Reporter - but it's not entirely clear.\nIs your issue entirely resolved now - or do you still need some help? If so, perhaps you could give a bit more detail in what you are trying to do?\nThe difference between a reporter and a listener is that a reporter is intended to render events to some output stream (console, file, network etc) and should, by default, handle all events (ie: opt-out). A listener is just an in-code thing, that happens to map on to the same interface - but it's just for when you want to be notified of certain events - and therefore is opt-in - you only implement the handlers for the events you are interested in.. We have ObjC unit tests. Unfortunately we don't have the infrastructure to run them on Travis. If you know how to do that please let us know.\nIn the meantime it relies on my running them periodically on my local machine.\nAs @horenmar said, he's assigned this to me. I'm snowed right now but should be able to get to it from mid next week.\nSorry about this.. Are you putting the arguments with spaces in quotes?, e.g.\n./MyTests \"[.integration tests]\". Excellent, thanks for letting me know. Sorry for the delay in responding, Robert. I think both Martin and I have been really tied up elsewhere!\nFor my part I did notice the PR come in and was thinking I'd need to look into exactly how it fits in and what the consequences might be - and that's what's held me back, as I've not had time to do that.\nCan you consider this an acknowledgement that we've seen it (or at least I have), and I'll try and get back soon with a proper response? I do appreciate your efforts here.. Sorry - been ultra busy for a while (again) - just finished with one (work) release, so have a brief moment of downtime - thanks for the ping offline...\nThere's a couple of ways you could achieve the same goal without changing anything.\n\nYou could keep a count of section nesting (++ in sectionStarting, -- in sectionEnded. Before and after, respectively, if you check for 0 you know you're dealing with the section call that corresponds to the test case.\nYou could use a(n old school) fixture class and do your init/ deinit in the ctor/ dtor of that.\n\nIf necessary I could maybe add a flag to SectionInfo that indicates if it's for a TEST_CASE or not, so you could check that.\nGive that we already make a reporter/ listener call for this event (sectionStarting/Ended) I'd rather not add an extra one - especially given there are a couple of ways to do it that aren't too burdensome. I admit the first option is a little less obvious - but the second one, at least, seems to be the right fit?. https://github.com/catchorg/Catch2/blob/master/docs/test-fixtures.md\nThe example there is not the most applicable to your situation. the important thing to keep in mind is that an instance of the class will be constructed immediately prior to each test case run through, will stay on the stack as it runs through any sections etc, and be destroyed after exit from the test case function.\nSo put your DeleteGlobalState() call in the destructor (and put any common set up in the constructor, if needed) and it should do what you want.. You are correct that it requires all test cases that you want to partake in the common setup/ teardown to use TEST_CASE_METHOD. I can see that retrofitting that might not be optimal - so I think the sectionEnded() technique with the  m_sectionDepth trick is probably the best workaround.\nI don't think this is a common enough need to add an extra pair of handlers to every reporter, so I'm reluctant to do that, given that the workaround is ok. Are you satisfied with that approach?. I'm afraid I'm not quite following. Perhaps you could sketch a simple outline example we could talk about in more concrete terms?. (FTR, AFAICS, the m_sectionDepth trick should give you the same semantic as your proposed init/deinit methods). For context, there are a few assumptions like that in the script, going back to the very first version. It kept the parser simple and short - by avoiding having something that handled all cases. Over the years the script has been expanded and iterated - and some of those assumptions have been addressed - but to address them all requires a full PP parser. We've definitely outgrown the original assumptions, so maybe it's time for that step?. Sorry it's taken a while to get to this. I'm looking into modernising the RNG right now (tbh I thought we'd done this a while back, so was surprised we still had the std::rand calls in).\nI've had a look at your PR and might use it as reference, but one immediate problem is the removal of seedRng()!\nUsers have the ability to seed the RNG from the command line, and that should make the sequence repeatable. Imagine you're run tests on a CI server using time seeded (pseudo)randomness - and you get a failure only on a particular run. When using a time seed Catch2 prints the seed it uses, so you can then explicitly seed a local run with that number to reproduce the same conditions.\nSo that call is essential.. In fact I've gone a bit of a different path - no need for the RandomNumberGenerator class at all, now - just needed a global, seeded, instance of an mt19937.\nSee: commit 35a57b070fd4db56759dc3ecb8156f40841111a3\n. That's pretty much what we do for what we call Approval Tests for testing Catch2 itself. In this case we do it from custom Python scripts. It's not functionality that's built in to Catch2 itself.\nYou might also want to look at the Approval Tests project, which has recently gained Catch support, too. I think that adds the functionality you're looking for:\nhttps://github.com/approvals/ApprovalTests.cpp\n. https://github.com/catchorg/Catch2/blob/master/docs/tostring.md#exceptions\nI admit it's maybe not the most discoverable documentation - but it's there.\nDoes this do what you want?. Excellent! :-). You can either add a friend function, put your test code in there, and have your TEST_CASE forward on to it, or add friends that forward the values you want to test, so the test case has access via them.\nEither way, if you only implement the friend functions in the test project then only the test case has the privileged access.\nAll my usual warnings (which you've read) about not doing this most of the time apply - but I agree it is sometimes a necessary evil. As with most necessary evils the trick is in containing it as much as possible.. While such a reporter could be written (and this has been requested before - and it's not an unreasonable request in itself) - it wouldn't solve your problem.\nThe reason is that it would still actually run all the test code - even if it was only reporting the test case and section names. It has to, for the same reason you opened with, we have to run the code to discover the sections!\nPerhaps you're suggesting that the \"no-op\" mode be exposed as a globally accessible flag that could be checked in the user test code to see if it needs to run the code or not? That could work, but would be hard to maintain, and I don't think would result in a very satisfactory experience.\nIf this is a problem for you I would recommend using fixture classes instead. It doesn't have the same nesting abilities as sections, but discovery is eager, at least.\nAlternatively, I believe there are scripts that can parse the test cases and sections out of the source code! (although that breaks down if they are not sequential - e.g. if sections are dynamic and/ or in helper functions).. Unfortunately, yes. The reason is that Catch/2 is discovering sections as it runs them. If the last section fails it doesn't know if there are any more after it - so needs to run again to see.. It's an interesting problem.\nYou can probably get what you want with:\nc++\nTEST_CASE(){\n    auto f = CreateFile(/* ... */);\n        INFO( GetLastError() );\n    REQUIRE(f != INVALID_HANDLE_VALUE);\n}\nThe only difference with what you're asking for is that with INFO the GetLastError() expression will always be evaluated - which is probably fine in this case, but may not always be desirable.\nYou could also do:\nc++\nTEST_CASE(){\n    auto f = CreateFile(/* ... */);\n    CHECKED_ELSE(f != INVALID_HANDLE_VALUE) {\n                FAIL( GetLastError() );\n}\nWhich will evaluated the failure case more lazily and is pretty much what you want (with no callbacks required!).\nWe should probably document CHECKED_IF and CHECKED_ELSE :-). Feel free to close #1209. Sorry for not responding before. You got lucky with me paying attention today ;-)\nRegarding the inline expression check being better - I don't disagree. I was just trying to show that you could achieve what you want with what Catch already has. It may not be perfect, but there's a balance to be struck between adding lots of specialised functionality to Catch, vs making our tests more expressive.\nIt's also worth bearing in mind that you don't need to repeat that condition check. If the CHECKED_ELSE fails it will report its expression and values just the same as a normal CHECK/REQUIRE - that's why I suggested that rather than just an if.\nThat said, for the true, inline, checking experience - since the conversion code is going to be specific to the error type I think it makes sense to use a wrapper type - which implements == (or whatever ops you need) by forwarding to the contained value, but also has a string conversion - either with ostream& << or Catch::StringMaker. Of course if the error type is already strong enough you can just add that string conversion to apply to that - but from what you're talking about they're usually going to be raw ints.\nc++\nREQUIRE( CheckedError( foo(bar) ) == baz );\n. It's a little extra boilerplate the first time. I'm guessing you'll use the same error \"type\" (e.g., set of semantic values) more than once - in which case it will be much less boilerplate.. IIRC we originally had both PASSED and FAILED on the _next_line, which was my preference. But it was XCode, I believe, that would recognised FAILED after a file/ line and put a red dot next to the source line, so seemed like a good integration.\n. I think I do remember discussing this before (I think it must have been in this issue).\nThe problem is that describe is meant to be callable independently of a match - so it shouldn't rely on any state shared between the calls.\nThere are certainly cases, and this is one of them, where reporting detail from the match would be valuable. I think this has been discussed internally, too - but I'm not sure where we went with it.\nYou could work around it, for now, by making offending_word mutable, of course. That should work the way things are currently implemented (but make sure describe can handle the case that it is not set). It's possible it would be broken by future changes, though.\n. This is by design. All supported operators add extra complexity to the (heavily templated) mechanism for decomposing expressions, so only the comparison and relational operators are supported.. We could in that very specific case. It wouldn't add a lot of extra complexity.\nBut then what about the next case ... and the next. It's not a general solution. I think your case is fairly rare, and there's an easy workaround, so I don't think it justifies special-casing it.\nI could be persuaded otherwise if it turns out it's not such a rare case, though.. Hi Barry,\nWould a Listener be a better match for what you want to do?\n. Can't use lambdas due to C++-03 compatibility.\nI think the answer might be along similar lines, though - go via a(n out of line) forwarding function.\n. ",
    "obfuscated": "Hello,\nI've just discovered that Catch doesn't have one of the most important features any decent test framework must have - catching crashes. I don't know how you've managed to use catch successfully, so many years without them, but I cannot!\nI've tried the develop branch and there segmentation faults are caught correctly.\nSo, is there any chance that you'll merge the signal handling for unix that is available in the develop branch to the master branch?\n. Yep, seems to work correctly now.. Just tried the latest version of Catch and stumbled on this issue. The new version is unusable and I want to upgrade to minimize the number of warnings emitted by Catch. :)\nForcing users to disable -Wparentheses is not good user experience in every project.\nI'm using GCC 4.4 if it makes a difference.. @janisozaur I've just tried it and it doesn't help. Unfortunately these warnings aren't generated by the catch headers, but by the code injected by the macros from the catch headers.. @philsquared Yep, I'm testing 2be372710ec496922bb583e55386fc2ca8d646c5 which contains the mentioned fix (91bfe68) and the error is still there.. Seems fixed when using GCC 4.4. Thanks.. A custom built one and cmake. I know it will be hard to do and still work with gcc/vc++/icl/clang/no-c++11.\nWe can do it ourselves using our threading apis, but I think it will be a good thing to have in the vanilla catch.\n. ",
    "Darelbi": "Nice catch to Catch, for me it is not a problem since I use Catch with\nCTest so crashes are already detected by CTest.\n2015-02-25 13:16 GMT+01:00 obfuscated notifications@github.com:\n\nHello,\nI've just discovered that Catch doesn't have one of the most important\nfeatures any decent test framework must have - catching crashes. I don't\nknow how you've managed to use catch successfully, so many years without\nthem, but I cannot!\nI've tried the develop branch and there segmentation faults are caught\ncorrectly.\nSo, is there any chance that you'll merge the signal handling for unix\nthat is available in the develop branch to the master branch?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/3#issuecomment-75950445.\n. You can still invoke catch and run specific tests. Instead I would add a\nfeature that allow a batch script to query the number of tests so that we\ncan loop and invoke it once for each number going from 0 to NUMBER-1. Does\nthat make sense? Effectively I was hitted sometimes by a crash that prevent\nfurther tests to run, would be great fix that.\n\n2016-09-05 11:40 GMT+02:00 Joe Jordan notifications@github.com:\n\nhmm, then how about something like\ndefine CATCH_CONFIG_FORKED_MAIN\ninclude \n? This leaves it off by default (and doesn't change the behaviour of\nexisting tests), but makes it an option for people who need it.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/issues/462#issuecomment-244704439,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADUeE41aIxj7Ov1eUi1ku8IQQSxoWV__ks5qm-OkgaJpZM4FVqCE\n.\n. To get one summary we have to either:\n- Have catch to run tests in isolation: it could in example spawn a new\n  process by passing same arguments + test_ID (in example if forking is not\n  feasible)\n- Each catch run produce a partial report => so results get aggregated (it\n  could even use some sort of cache so that when we ask for results it is\n  showed in a readable manner).\n\nspeculating here.\n2016-09-05 13:51 GMT+02:00 Bj\u00f6rn Fahller notifications@github.com:\n\nI think this would be great, and having experience working with test\nsystems that do this, I can speak from experience. The stability in the\nface of crashing bugs is a nice bonus, but it's a minor thing. The big\nthing is the isolation - that you never have to worry about what state a\ntest case leaves the system in. Even horrible designs with singletons\n(shudder) become reasonably easy to test, since whatever messy state you\nleave the singleton in is forgotten once the test has run to completion,\nregardless of whether it passed or failed.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/issues/462#issuecomment-244728640,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADUeE8eSX6h4ezQxhl4sP-4jOKeAJjZKks5qnAIkgaJpZM4FVqCE\n.\n. Installing an header is not so good, in general the installation process with Cmake is flawed. It can't replace a operative system package management (for wich Cmake already has scripts for finding installed packages). It is better to include a cloned source tree directly from cmake so that you can build your project and all dependencies. I can provide a good usage example to include in Catch as documentation for using with Cmake if you like\n. Sorry, It's a period I write before reading and then I have to edit my messages XD.\n. I mean compile other targets as subtargets (add_subdirectory) and having them in same folder (similiar to you, except I don't use ExternalProject but simply use add_subdirectory (and includes and linking of course), it does not assume client have installed cvs programs or internet connection active. Instead of patching a dependency you download a the new version and unzip it beside old one in a parallel folder with different version number, if the new version breaks something it's easier to rollback(you just set directory to point again to old library, you don't have to use a cvs command to \"unpatch\" the external library). This is of course useful in a Continuos integration environment where you have continuos builds and tests of all components and an installer is not an option because you could as well have 3 versions of a library for 3 different projects (deploy is still done, a zip file is generated with each build, of course not every build get released ^^ )\n. true, should keep black background or otherwise catch have to detect background color and choose a adifferent color for fonts not very good. \n. take a look at one of my travis scripts:\nhttps://github.com/Darelbi/Infectorpp2/blob/master/.travis.yml\n\nbasically travis is a unix shell environment, it should already have python for running scripts, if not the case, you just add the apt package into travis configuration.\nI'm using only C++11 so I have tested against few compilers but you can both test against much more compilers and for the same compiler you can also test with -std=c++11 enabled or not.\n. I'm not sure Catch allows Macros outside of test cases, there's much information behind the scenes. one way to implement that would be throwing an exception that is caught inside TEST_CASE. Actually I created my assertion function that throws an exception from helper functions, all I do is checking that the helper function throws or not throws when called inside a TEST_CASE.\n. Sorry. I didn't wanted to open a new ticket since I opened already one. I see hard implementing such feature without using exceptions.\nI think SOURCE_LINE_INFO argument (unless needed to select a \"different\" overload) is not necessary at all.\n```\n// all information needed is embedded in the new exception\ndefine CHECK_AT (x) if(!!(x)) throw Catch::HelperFailAtLineException( LINE);\n```\nthe problem is that alters the flow right? \n. Afaik CATCH compiles perfectly on travis:\nhttps://travis-ci.org/Darelbi/Bade3D/jobs/87506324\nclang version:\nApple LLVM version 6.0 (clang-600.0.54) (based on LLVM 3.5svn)\nTarget: x86_64-apple-darwin13.4.0\nThread model: posix\ncatch version\n1.2.1\n. Sorry I misreaded you (you mentioned \"before any test cases\") I leave my old answer here:\nThere's no need for setup teardown:\n```\nTEST_CASTE(){\n    // setup\n    SECTION(){\n}\n\n// TEARDOWN\n\n}\n```\nthe setup and teardown are implicit in how catch work (wich is what I like most). Of course the same apply to nested cases:\n```\nTEST_CASTE(){\n    // setup A\n    SECTION(){  // A\n    // setup B,C\n    SECTION(){ //B\n\n    }\n\n    SECTION(){ // C\n\n    }\n    // TEARDOWN B,C\n}\n\n// TEARDOWN A\n\n}\n.\nbool exception = false;\ntry{\n    //...\n}catch(...){\n    exception = true;\n}\nREQUIRE(exception == false);\n```\n. ",
    "horenmar": "There has been a lot of discussion, bugs found and some changes since, so I am going to close this.\nBugs found in current Catch's support for signals/SEH can go into new issues.. Timestamp should now be filled with proper UTC-based time, at the time of writing the results, and most other issues raised in this thread be addressed as well.\nIf there are some issues remaining, please open a new issue for them.. Catch::toString and Catch::StringMaker have been documented since, same goes for how to translate exceptions into strings, so I am going to close this issue.. This has gotten into Catch under -d yes command line argument in the meantime (over 4 years, wow). Note that it is not a benchmark but rather just a \"time taken\" log.\nClosing because it is solved and the issue backlog needs to be cleared. :-). Thread safety is planned for Catch2, but current Catch will be most likely left thread-unsafe.\nI am closing this as part of backlog cleanup.. @brendansimon on most platforms including the C++ version of C headers also puts the names into global namespace, which we apparently rely on somewhere.\nAs to your second question, stack_t is a type related to POSIX signal handling. You can bypass it by defining CATCH_CONFIG_NO_POSIX_SIGNALS.\n. Note also that if the compiler provides sufficiently unique macro to identify itself, you can open a PR and add detection so that POSIX signals are disabled automatically, see catch_compiler_capabilities.h. @BrendanSimon There isn't any, no. Catch is primarily aimed at platforms with enough memory/CPU that its tendency to allocate and throw std::strings around isn't a problem. There is some effort to support free standing applications (ie it allows redefinition of output streams), but memory is seen as expendable.\n. @patrickmmartin If you still want to, you can submit a new PR adding BCB support against current Catch, but I am going to close this PR, as Catch has changed a LOT in the meantime.. These things never end, I just found trailing whitespace in 8 files and tabs instead of spaces in 7. \ud83d\ude04 . I have integrated Windows crtdbg leak checking with Catch in a branch and it will probably go into the next release.\nFor now it is supported only when Catch supplies its own main.. At some point (I am not crawling through 4 years worth of commit history) this has been changed to the desired behaviour and thus its time the close this.. If someone opens a PR which adds support on an overly old compiler, without breaking the current ones and adding too much maintenance burden, it can get merged, but I don't think either of us will be trying to keep mainline support for it.. The (undocumented and unfinished) generators in Catch 1 (the current version) are considered deprecated. They are coming back in Catch 2 (rewrite dropping compatibility with C++98), but until then, there is no more support for them.. It still exists when Catch's SelfTest is compiled by MSVC 2015 U3 for x64.\n<snip>\\include\\internal\\catch_evaluate.hpp(160): warning C4312: 'reinterpret_cast': conversion from 'int' to 'ClassName *' of greater size\n  <snip>\\include\\internal\\catch_expression_lhs.hpp(110): note: see reference to function template instantiation 'bool Catch::Internal::compare<Catch::Internal::IsEqualTo,ClassName>(T *,int)' being compiled\n          with\n          [\n              T=ClassName\n          ]\n  <snip>\\include\\internal\\catch_expression_lhs.hpp(108): note: while compiling class template member function 'void Catch::BinaryExpression<T,Catch::Internal::IsEqualTo,const int &>::endExpression(void) const'\n          with\n          [\n              T=ClassName *const &\n          ]\n  <snip>\\projects\\SelfTest\\TrickyTests.cpp(383): note: see reference to function template instantiation 'void Catch::BinaryExpression<T,Catch::Internal::IsEqualTo,const int &>::endExpression(void) const' being compiled\n          with\n          [\n              T=ClassName *const &\n          ]\n  <snip>\\projects\\SelfTest\\TrickyTests.cpp(383): note: see reference to class template instantiation 'Catch::BinaryExpression<T,Catch::Internal::IsEqualTo,const int &>' being compiled\n          with\n          [\n              T=ClassName *const &\n          ]. There is a simple reason I decided to disable the warning for MSVC, rather than cast the pointer to intptr_t, it doesn't take dependency on a non-standard header/define, especially since we recently had to add various workarounds for cygwin and MinGW (ie 1ca8cefa9afa94f8323a9b7c2e67b16894c32fdd, c6178601c5c87b50e3114b8a8043d1ee6dfb4041, others).\n. As far as I can tell, this has been mostly solved back in 2013 and the documentation is currently there, so I am closing this.. This has been since fixed in master.. Since this is not going into Catch Classic, but might get into Catch 2 at some point, I am going to close it in favour of #852.. I created a follow-up issue with current state of reporting, closing this one.. This works fine in Catch2, because with C++11 we can use better operator<< detection tricks.. Since the current plan is to keep only cmake, I am closing this.. I tested this and v1.7.1 does not trigger C4702 warning. Unless someone still has trouble, I am going to close this soon.. We are planning to move over to having only CMakeLists.txt inside the repository with IDE-specific files being generated by CMake.. While Catch does allocate std::string quite freely and could stand to do so less, it would be better to do so with something like string_view, not raw C-strings.. Compiling Catch with g++ -Wall -pedantic -Weffc++ currently gives no warnings, so I am going to close this.. Since there has been no follow-up in a month, I am going to close this issue.. Most of this PR has found its way into master one way or another, but I will look into  3431e25befa3f07c1ce03a63053bb483ac02af1b because that functionality might be useful in the future.. I have incorporated functionality from 3431e25 into master, so I am closing this.. @BMBurstein 3rd party only, in the aforementioned ReSharper C++ plugin. For VS 2015 without plugins, not right now.. Catch is not thread safe and currently is not meant to be. This means that only one thread can go through Catch's control structures, like REQUIRE, SECTION, etc.\nI will take a look if ASAN still complains tomorrow.\n. Asan leak-checker complains, so I will fill a new bug against that.. Since we have recently merged a signal rework, I decided to test this issue.\nGiven this source code against single-include catch.hpp generated from current master,\n```cpp\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\ninclude \ninclude \nTEST_CASE(\"TEST-terminate\", \"[.term]\"){\n    SECTION(\"First\") {\n        std::terminate();\n    }\n}\nTEST_CASE(\"TEST-assert\", \"[.ass]\") {\n    SECTION(\"First\"){\n        assert(false && \"Hello\");\n    }\n}\nran like this ` ./a.out -s -r compact [.ass]`, I get this output\na.out: test.cpp:15: void _CA_T_C_H__T_E_S_T____3(): Assertion `false && \"Hello\"' failed.\ntest.cpp:14: failed: fatal error condition with message: 'SIGABRT - Abort (abnormal termination) signal'\nFailed 1 test case, failed 1 assertion.\nAborted (core dumped)\n```\nwhich shows failure at line 14, which is the line of \"First\" section macro.\nIf I run the code like this ./a.out -s -r compact [.term], I get this:\n```\nterminate called without an active exception\ntest.cpp:8: failed: fatal error condition with message: 'SIGABRT - Abort (abnormal termination) signal'\nFailed 1 test case, failed 1 assertion.\nAborted (core dumped)\n```\nwhich also shows the failure at the correct section.\nSeeing this, I am inclined to close this issue.. @gnzlbg Your example still prints the line of the failing section, that is either line 11 or 17.\nAs to the other two issues, runtime speed of Catch has significantly improved even since last release. As far as compile time is concerned, I might try to measure it as well. There are ways to improve it, but the tradeoffs for Catch 1 are probably not worth it right now (maybe when there is only ~10 open issues and we have too much free time :smile:), but for Catch 2, keeping compile times down is one of the design goals. By the way, did you feel the compile times were too slow even with the test main separated?\nAs far as the second issue is concerned (tests in separated processes), that is a big one and the support is not likely to materialize anytime soon -- supporting Linux is not easy and supporting Windows is... pretty hard actually, but overall we would be willing to add support behind an opt-in macro.. > I think I did not tried that. I ported a bunch of GTest files (each with its own main) to Catch back then (when Catch was more or less released, this was a long time ago), and basically went from instant compiles to ~10-30s per file which hit my edit-compile-test cycle hard :/\nYeah, Catch main compiles for ~5 seconds or more on weaker PCs, thats why the documentation suggests separate file for the main (standard test files compile and link against the main reasonably quickly).\nWell, I am going to close this issue and leave the other one open for now.. This is copy pasted from #219\nSince we have recently merged a signal rework, I decided to test this issue.\nGiven this source code against single-include catch.hpp generated from current master,\n```cpp\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\ninclude \ninclude \nTEST_CASE(\"TEST-terminate\", \"[.term]\"){\n    SECTION(\"First\") {\n        std::terminate();\n    }\n}\nTEST_CASE(\"TEST-assert\", \"[.ass]\") {\n    SECTION(\"First\"){\n        assert(false && \"Hello\");\n    }\n}\nran like this ` ./a.out -s -r compact [.ass]`, I get this output\na.out: test.cpp:15: void _CA_T_C_H__T_E_S_T____3(): Assertion `false && \"Hello\"' failed.\ntest.cpp:14: failed: fatal error condition with message: 'SIGABRT - Abort (abnormal termination) signal'\nFailed 1 test case, failed 1 assertion.\nAborted (core dumped)\n```\nwhich shows failure at line 14, which is the line of \"First\" section macro.\nIf I run the code like this ./a.out -s -r compact [.term], I get this:\n```\nterminate called without an active exception\ntest.cpp:8: failed: fatal error condition with message: 'SIGABRT - Abort (abnormal termination) signal'\nFailed 1 test case, failed 1 assertion.\nAborted (core dumped)\n```\nwhich also shows the failure at the correct section.\nSeeing this, I am inclined to close this issue.. Oh right. It seemed weird that the same person would open two issues about the same thing, but not weirder than other things I've seen in the issue backlog.. Since this will not be added to Catch Classic, but might be added to Catch 2 at some point, I opened #853 instead.. Since there has been no follow-up in a month, I am going to close this issue.. @pip010 IIRC the only case when Catch2 doesn't use __COUNTER__ is when being parsed by older CLion. Once it is compiled, it should only use __COUNTER__, except if the user explicitly defines CATCH_CONFIG_NO_COUNTER.. Signal handling is in, timeouts are problematic (you can only get them nonportably, the easy way on Linux means much more dangerous signal handling, Windows is even worse) and for now probably best left for outside scripting.\nClosing this, if someone has a sane idea for timeouts, new PR can be opened.. ~~Tags, including hiding and shouldfail, have been in for a while, so I am going to close this.~~\nThats what I get for skimming.. I reimplemented the functionality a bit differently (forced UTC in timestamps because %z is not backward compatible, factored it out of the junit writer), but thank you for the PR, I wouldn't even know it needs changing otherwise.. I am going to update documentation to mention that this is not supported and is unlikely to become supported until Catch 2, and close this with a revisit tag.. IIRC on Windows the visibility of members in an object also affects their layout. This can only bite you if you have mix of private and public member variables, but still.\nDO NOT DO #define public private.. I couldn't get the pull request to merge (wasn't able to get diff, checkout commit, etc), so I am closing this and will create the patch on master separately.. This is in, see https://github.com/philsquared/Catch/blob/master/docs/command-line.md#run-section. Do note the limitations though.. I am unable to check this one on my own, can someone else try if it is still relevant?\nI'd expect its not, but apparently someone referenced this only couple of months ago.. As far as I can tell, these changes are already in Clara in master, thus I will be closing the PR.. This has been solved at some point in time, it now includes timing info if -d yes is used.. Yep.. Since there has been no followup in 2 years, I am going to close this and assume it works. If not, please reopen.. I merged it to master + done some neccessary fixups (documentation pending). Any issues in the implementation should go to a new issue.. We are moving to CMakeLists.txt only, with IDE-specific projects to be generated by Cmake.. IIRC this has been since fixed, so I am going to close this unless someone still has the problem.. I am going to add this into documentation, instead of keeping the issue open.. I believe the last comment was addressed in the linked issue, so I am going to close this.. I took a look at this and ended up with this\n```\n0.50439 s: AA\n0.512456 s: A\n1.00093 s: AB\n1.00331 s: A\n1.00156 s: BA\n1.00743 s: B\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCatchWork.exe is a Catch v1.7.2 host application.\nRun with -? for options\n\nB\n  BB\n\n\\catchwork\\main.cpp(47)\n...............................................................................\n\\catchwork\\main.cpp(49): FAILED:\n  REQUIRE( false )\n0.173347 s: BB\n0 s: B\n0.001148 s: B\n===============================================================================\ntest cases:  2 |  1 passed | 1 failed\nassertions: 16 | 15 passed | 1 failed\n```\nI thought about changing the reported time to milliseconds, but then decided against it -- if your long running tests still finish in lot less than a second, then you probably don't care about how long they actually take.. @paulobrizolara I'd prefer to keep the units uniform, to simplify possible parsing.. My opinion is that it is not meant for parsing for cases that really matter, but those use-cases could afford to parse ms/s/etc properly anyway. My expected use case is something along the lines of \nSelfTest -d yes | sort -n -b, which will print out the longest running tests last, and which would get hopelessly confused if Catch switched between units according to the underlying value.\nI agree that the current output could be improved, and I think that changing the output to use fixed format with 2 decimal places would be nicer than the current state, and I'll make the change before the next release, but I don't quite think that dynamic units are that improvement.*\n* Standardizing on milliseconds might be an improvement, that depends on how people want to use it -- do they care about which tests take so long, or do they really care about how long each test takes? After all, Catch is not a benchmarking library and should not be used as such.. This is actually in master now, albeit a bit limited, so I am going to close this.. Compiling without exceptions is not planned to be supported within Catch in the conceivable future.. I improved the documentation regarding asserts and now I am going to close this (actually I hoped github would autoclose this issue, but apparently the detection does not support list of commits :smile:).. Well, it has been a while, but this has been done separately for #860 and will be part of Catch 2, so I am going to close this.. This is a bit old, but: This change is unlikely to be implemented in Catch Classic, as we try to support compiling without RTTI (don't look at me, I think its stupid).. This is in as of 450dd0562b525f5feacb0a057c0c50b9035f39b5. @manu-m Are you sure its since 1.7.1? Because that one didn't touch the decomposition mechanism. If it started again since 1.7.0, then maybe.. @manu-m In that case, probably not. 1.7.0 brought a rework of the expression capture mechanism, which sped up successful assertions significantly (~5 times). 1.7.1 then was a bugfix, so that templated comparisons don't cause compile-time errors.\nMaybe we can try to change the underlying operator again, but not sure if that would help.. @manu-m Try the attached version.\ncatch.zip\n. @manu-m Well, Eclipse could always fix their parser  \ud83d\ude04 . The (undocumented and unfinished) generators in Catch 1 (the current version) are considered deprecated. They are coming back in Catch 2 (rewrite dropping compatibility with C++98), but until then, there is no support for them.. We definitely do not silence -Wunused-variable outside of Catch anymore, recently we had to make some changes to prevent user code from triggering these actually.\nIf there are still some supressions that leak, please open a new issue.. This kind of complex expression is now supported (including things like 1 + 2 / 2 + 3 / 2 == 5 / 2 + 1), so I am going to close this.. I merged in #585, so I am closing this.. The new CLI in Catch2 is properly composable, so I am going to close this.. > There are several existing Catch macros that also use repeated instances of INTERNAL_CATCH_UNIQUE_NAME to produce the same name a number of times.\n@garethsb-sony As far as I know, we don't and it wouldn't work as the use of __COUNTER__ is strongly preferred to use of __LINE__ when constructing unique names. What we do is to have an indirection macro, that evaluates INTERNAL_CATCH_UNIQUE_NAME and passes it forward.\nI have no idea what the state of that was back in 2015 though. Agreed. Since this is not going into Catch Classic, but might get into Catch 2 at some point, I am going to close it in favour of #852.. I am going to close this, as the old Clara isn't going to get changed anymore.. While we could support any warning level just by force disabling it, that is not a good implementation strategy. Our users can do the same, with the advantage of them knowing that they disabled the warnings explicitly, instead of believing that they have the warnings enabled and are silent.. VS2012 is no longer supported. This has been fixed since.. I tested this against current master and didn't get the warning, so I am going to mark this as resolved, unless someone can repro it.. There is a ton of places that use tabs and tons that use spaces, so there would have to big a large commit that changes them all at once. While this might happen in the future, changing them couple of lines at a time is pointless, so I am going to close this.\nThank you for your effort though.. I am going to close this in favor of #769, where we can also discuss the name of the upcoming rework.. Since this has been fixed for a long time, I am closing this.. --break now works under gdb and I'd prefer abort to keep bailing out in orderly fashion.. The current output is significantly saner, but I think some discussion about the exact details can be had in #770 .. This is actually support now, via --list-tests --verbosity high.\nThe output looks like this:\nFloating point matchers: float\n    /mnt/c/Users/Xarn/Documents/GitHub/Catch/projects/SelfTest/UsageTests/\n    Matchers.tests.cpp:296\n    (NO DESCRIPTION)\n      [floating-point][matchers]\n  Floating point matchers: double\n    /mnt/c/Users/Xarn/Documents/GitHub/Catch/projects/SelfTest/UsageTests/\n    Matchers.tests.cpp:334\n    (NO DESCRIPTION)\n      [floating-point][matchers]. UNSCOPED_INFO is a thing now.. This should be implemented in commits b634e592dac83edddf724c2e243c674132ddfa8c, 25d017763b73e09d3e9adf7f4db9ce71992f0471, e1c4a4bd9b4507c86643ac825deb61da047f53e1. The Session::run function has been fixed since and I just fixed up documentation to use standard compliant int main(int argc, char* argv[]), so I am going to close this.. Well it took a while but the latest release is properly signed*\n* In that the constituent tag and released headers are signed, I am not planning to be signing the tarball as it is not intended for distribution.. This would be a job for a new reporter, not the default behaviour. I am closing this issue and leaving #744 in lieu of this.. This is now merged (without changes to the single-include version) to the master, closing the PR.. If I understand this correctly, its a recommendation/request to hook up with MSVC CRT leak checker into Catch's main, so that memory leaks in tested code can be found?\nThat is potentially very interesting addition but it might be a while before I can get around to it (but seeing how the issue is from 2015, its been a while anyway).. @alkhimey yes. This was fixed in c65aeaf25f63de7aa95dffef7fe8ddb7434cc5a9. I tried compiling Catch under g++ with -Wsuggest-override, but got no warnings, so I am going to assume that overrides are currently all present and close this.\nHowever, there is also a good point in that the contribution documentation could use some notes about C++98 compatibility and conditional compilation for various compilers for PRs.. Using example code from tutorial and g++ -Wzero-as-null-pointer-constant -Wswitch-default -Wctor-dtor-privacy -Wshadow -Wuseless-cast -Wall -Wextra test.cpp I am not getting these warnings anymore.. Closing this, as it is very old and has been significantly changed since.. I am on VS 2015 Update 3 and the minimal example no longer triggers the problem. Given this, I am inclined to close this, unless someone still has this problem on a non-RC compiler.. @lightmare If I C+P the minimal example into updated VS2015, it compiles, links and reports proper results.\nAccording to my understanding of the original issue, RC VS2015 compiled, linked and reported wrong results.\nAfter checking on linux, neither gcc nor clang can actually link this, so I am probably going to open up an overarching issue about that, but still close this one. If you can find the other similar issue, I am going to link both.. I am going to tag this with a revisit* label and close it for now, as the original issue was resolved.\n\nAt some point Ill have to go back and decide what to do about the Clang and GCC linker error.. This should be easy to implement with current Matchers (that were finally documented and finalized).. @pieceofsummer I don't do OS X, so it will be up to @philsquared to review and merge it.\n\nGenerally though, we are interested in IDE integration, as long as the changes needed to support it are reasonable. Of course, what is reasonable is in the eye of a beholder :smile:. Since this will not be added to Catch Classic, but might be added to Catch 2 at some point, I opened #853 instead.. There have been major changes in XML writer recently that fixed a lot of things, so this is likely resolved.\nI am going to close this soon if there is no feedback that this still doesn't work.. In the year and a half since this was open, XML handling has been completely overhauled and there is no test case here to recheck.\nIf this is still problem, please open a new issue/PR.. I don't think that making Catch allocator aware is anywhere on the roadmap. . Since there has been no follow-up in two months, I am going to close this issue.. I am quite surprised this was still there.. This has been fixed in 4a04682e491b5697979e921c3a5ed9ae933d9406, but for time being the \\t special handling was removed. I am going to close this with a \"revisit\" label in case we want to restore the feature.. @BrettRyland Can you verify if this is still the case for current master? I merged a commit that uses std::shuffle instead of std::random_shuffle this week, so it should be fixed.. Once #1190 is in, this can be done by using custom reporter to route -l through.. Catch's CMake setup installs the header under catch/catch.hpp, but the repository topology will remain as-is.. You are correct that Catch does not support multiple threads running through test macros (REQUIRE, SECTION, etc). You would have to save the test result into a bool and REQUIRE on it from main thread, after you join other threads, but that loses you expression decomposition. @russdamerell The original author is currently using CLion to work on Catch, so I'd say it is ok.\nNot sure if there is still problem with __COUNTER__ macro, CPP-820 is still open and Catch prefers to use it if possible.. Can someone confirm that the new CLion version is OK now?. New CLion was released, so this should be ok now.. Since this is not an issue, but rather a query (about a 3rd party tools) and is quite old, I am going to close.. @d-led The second is a false positive -- registerTestCase creates TestCase object that takes ownership of the allocated object.\nThe first one is interesting, because both ASAN and Valgrind are ok with the current master. Does it trigger for you with any single REQUIRE?. Since it seems that it was a false positive, with Valgrind, ASan and Windows crtdbg coming up clean, I am going to close this soon.. I tried to reproduce this with current build and it seems fixed.\nThis is the test file:\n```\ninclude \"catch.hpp\"\nTEST_CASE(\"foo\") {\n    INFO(\"hello!\");\n    CHECK(true);\n    CHECK(false);\n}\nand this is the outputxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\n\n\nhello!\nat c:\\users\\xarn\\documents\\github\\catchwork17\\catchwork\\test1.cpp(6)\n      \n\n\n\n\n\n```\nThe message is there.... @NickPadilla  This issue is kinda old, but still: has anything come of it afterwards?\nIf not, I am going to close this soon because looking for year and a half old, platform dependent, issue with no repro is probably not worth the time given how much has Catch changed in the meantime.. Since Catch Classic (v1.x) is now considered legacy and will not be updated to support old compilers, I am going to close this issue.\nCatch2 requires reasonably good support of C++11.. This was caused by error in libc++ on FreeBSD.. I don't think there is a reason not to have Travis/AppVeyor as well as TC. To me the benefits of Travis and AppVeyor is that you get a free* CI service and CI is an incredibly useful thing (assuming you have good tests). You also don't have to care about standing up your own buildhosts, getting proper licences etc.\n* Free as in money, they can eat up a lot of time while trying to work around their pecularities and figure out their configurations.\n. The CI situation has improved (larger coverage on Travis, including C++11 builds)  and is still improving (Cygwin on AppVeyor is coming soon, TeamCity is also slowly moving along), and the backlog is decreasing, so I am going to close this.. Since there hasn't been a followup in over a year, I am going to close this.. @vadz  If you remove the semicolon after defining section, you should get something like this\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\na.out is a Catch v1.7.2 host application.\nRun with -? for options\n\nCheck close\n  this is going to fail\n\npragma_test.cpp:16\n...............................................................................\npragma_test.cpp:7: FAILED:\n  CHECK( std::abs(x - y) <= 1 )\nwith expansion:\n  2 <= 1\n===============================================================================\ntest cases: 1 | 1 failed\nassertions: 4 | 3 passed | 1 failed\n``\nNow it shows that the last section visited before failure at line 7 was at line 16.. That's the magic of enabled warnings. \ud83d\ude04 . For now this is working as intended.. I am going to close this, becauseCatch::toStringis currently deprecated and is going away in favour of specializingCatch::StringMakerin Catch 2.0, which at this point is under development and thus might actually happen reasonably soon.. This change has already been made at some point in the past, so I am closing this.. I just created a branchadd-std-namespace-prefixes, that should fix most of these. The last one is inclara.h`, which is an external dependency and will have to be fixed independently.\nCan you confirm it works for you now?. @RossBencina Could you create a new PR for this against current master? Granted, it has been a year, but it would be greatly appreciated. . @RossBencina Yes I do. Work on PRs and issues still won't be exactly instant, there is huge backlog to work through, but the backlog should be getting smaller over time and new PRs should get responses in reasonable time.. Since this will not be added to Catch Classic, but might be added to Catch 2 at some point, I opened #853 instead.. Should be fixed in f75a511b5c329f3bdbf759764620b923ef4267d0. #772 is halfway through to being on master, which helps a lot. I am going to open a new meta issue ( #781 ) to keep track of possible performance improvements, but I am closing this one in the meantime.. I reimplemented this, because Clara is an external dependency for Catch and should not be changed here + the history was a mess.. Either resolved or too old to matter.. This has been merged to master, but git doesn't see that.. I have different opinion actually, in that since Catch 2 is not supposed to support older compilers, performance improvements to Catch 1 are valuable, even if better architecture from the ground up could bring even larger improvements.. @RossBencina I would prefer to get benchmarking suite first. If you already have one (You tested the performance improvements, right? \ud83d\ude04 ), that would be a nice start. \nAfterwards I would strongly prefer isolated PRs where possible.. Since we recently improved supression of -Wparentheses I though I could just close this, but as it turns out, g++ will not warn on the same code outside of templates, and will not accept _Pragma based supression inside of templates.. I am going to close this, as I moved Catch back to force disabling -Wparentheses everywhere using #pragma in 8f85d08e9f5bc0a1046d0f89e99d75fcbb453202 and this sample code compiles cleanly.\n```cpp\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\ntemplate \nvoid foo(T) {\n    int a, b;\n    a = 1; b = 2;\n    REQUIRE(a == b);\n}\nTEST_CASE(\"Wparentheses\") {\n    foo(true);\n}\n```\nThis means that we disable the warning for GCC users even outside our assertions, but the spotty _Pragma support meant that the status quo was untenable.. @bjoernpollex We are ok with uploading Catch to Conan, but I would prefer to some sort of infodump, about how to keep the package up to date as new versions are released, so we can integrate packaging new versions to Conan as part of our releases.\n. Changes should go into the right header inside include/internal folder, not into the single-include header (single-include header is updated on releases).\nSince there is no way for me to test this, I won't be splitting it out, but if you are still around and interested, I think it can get into master, as a provisional support for WinCE.. There has been no followup, so I am going to close this.. As of right now, the link is a redirect to github, closing this issue.. This has been since fixed, albeit it would probably be better if every endsWith and startsWith calls didn't allocate a brand new string.. I tested this recently with a custom class\n```\nstruct tester {\n    tester& operator&&(const tester& rhs) {\n        std::cout << \"Operator&&\\n\";\n        return *this;\n    }\ntester& operator!() {\n    std::cout << \"Operator!\\n\";\n    return *this;\n}\n\ntester& operator()() {\n    std::cout << \"Operator()\\n\";\n    return *this;\n}\n\nexplicit operator bool() const {\n    std::cout << \"Bool conversion\\n\";\n    return true;\n}\n\n};\n```\nwith tests\nTEST_CASE(\"Custom &&\") {\n    tester t1, t2;\n    REQUIRE((t1 && t2()));\n    REQUIRE(t1);\n    REQUIRE(t1());\n}\nand couldn't reproduce the problem. If no-one can confirm it still exists, I am going to close it.. @lightmare Problem with static_cast<bool> is that it triggers (dumb) MSVC warning, C4800... This means that Catch is going to end up with this beauty: static_cast<bool>( !!(expr) ).\nI also managed to send current master into infinite loop: (Compiled with VS2015, Update 3)\n```cpp\nstruct from {\n    from& operator!() {\n        std::cout << \"Operator!\\n\";\n        return *this;\n    }\noperator bool() const {\n    std::cout << \"Bool conversion -- from\\n\";\n    return true;\n}\n\n};\nstruct to {\n    operator bool() const {\n        std::cout << \"Bool conversion -- to\\n\";\n        return true;\n    }\n};\nto operator&&(bool lhs, const from& rhs) {\n    std::cout << \"operator&&\\n\";\n    return{};\n}\nTEST_CASE(\"Custom &&\") {\n    from f;\n    REQUIRE(f);\n}\n``\n. Same goes with for MSVC 2015.. IIRC this was a problem with 2-phase lookup in MSVC that couldn't be quite fixed. Since Catch2 no longer usestoStringand thus does not have this problem (and fully updated MSVC 2017 support 2-phase lookup!), I am going to close this.. If possible (the compiler supports it), we now useCOUNTERto generate the unique name. Can you please check whether current single-include release still causes this error for you?. @amigo421 It _should_ be fixed, but testing is always welcome.. Not really a bug, but more of a language lawyer request.. This still happens with Catch 1.5.9 on VS 2015.. I finally got around to this, will need some time to cherry-pick and merge it.. This should be now part of the master.. Honestly, this seems like a bug in the internal macro, I can't see a reason not to continue on exception whenCHECKing.. This is now in master, from 184865358c80ed37f6d9dadb6f80207482c95ab4.. The link is no longer there, so I am closing this as a part of backlog cleanup.. Since there is interest in this functionality (#372 is very similar), Ill try to take a look soon.. This PR seems to bring in about 13% runtime penalty for failing tests, even if-bis not specified. (Its about 200% with-b` specified and no debugger attached).\nSince masses of failing tests are not the usual use case, this probably is not a problem, but it seems to suggest that there is something wrong with how the debugger check is gated if -b is not specified.. I've made branch for performance improvements, dev-performance. A very simple benchmark is there, with about a 1M failing assertions, so I ran it against this.\nAnyway, the penalty isn't that bad, but it could bear looking into later.. @mrpi  If I run your test case against current master, it works. As long as its on Linux.\nIf I try it on Windows, I end up with \"Warning C4566: character represented by universal-character-name '\\u8A00' cannot be represented in the current code page (1252)\" and invalid XML, but I blame that on wrong setting somewhere (which I am not able to find nor google properly).. Unless turning off edit and continue doesn't help with VS2003, I am going to close this soon.. Oooh, I think I just hit this one reproducibly. That header is supposed to be an external dependency though, and not patched in this repository, but I'll see where this belongs.. This was fixed separately in 4a04682e491b5697979e921c3a5ed9ae933d9406, with the \\t handling getting cut. I marked the related issue as revisit, in case the handling will be put back in, but I am going to close this for now.. I am going to close this, since its a duplicate of #674, which was (hopefully) resolved.\nIf it isn't, please reopen that one.. This has been since fixed in Clara.. Closing as resolved.. First of all, does first argument mean argv[0]? Because if so, that is standard behaviour, and Catch accounts for that properly. If that means argv[1], why would it do that?\nAnyway, ignoring arguments ending in .exe would maybe work on Windows, but not on other systems, and if you need to pass arguments that are not meant for Catch to Catch test binary, then you really need your own main and fix them up.. Since there hasn't been a follow up in 3 weeks, I am going to close this issue.. v2.1.0 is out and with it the support for stringification of ranges (things that respond to requests for iterators).. I did some digging and apparently this was changed for the develop-v2 branch, but that branch is currently quite obsolete. It will probably have to be reimplemented as the code has diverged quite a bit, but it should get into master at some point in relatively near future.. @philsquared There are still 2 places that call directly exit(1), enforceNotReservedTag and RegistrarForTagAliases's constructor.. I created new issues for the other 2 callsites, so I am going to close this one.. I agree with Phil here, if things went wrong so soon, then there is nothing to do, except maybe explicitly exit.. @philsquared If you are changing signal handling, can you also incorporate changes in #753 ? . @tombh Can you also check dev-signals? It should contain that change + other signal handling changes, but I am unable to resolve an error its starting to look like it might be confined to my specific machine, so more data would be useful.. Since the dev-signals branch has been merged to master, I am going to close this.. @rcdailey Current behaviour should be that a signal is caught, failure reported and then the signal is passed upward to whoever is waiting. Does this not work for you?. Not sure what is ctest's behaviour, but when I create a minimal example and run it, I get regular coredump:\n```\n~/scratch$ cat test.cpp \ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nTEST_CASE(\"A\", \"[sigsegv]\") {\n    int iptr = nullptr;\n    REQUIRE(iptr);\n}\n~/scratch$ g++ -std=c++11 test.cpp && ./a.out \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\na.out is a Catch v2.0.0-develop.2 host application.\nRun with -? for options\n\nA\ntest.cpp:4\n...............................................................................\ntest.cpp:4: FAILED:\ndue to a fatal error condition:\n  SIGSEGV - Segmentation violation signal\n===============================================================================\ntest cases: 1 | 1 failed\nassertions: 1 | 1 failed\nSegmentation fault (core dumped)\n~/scratch$ ls\na.out  catch.hpp  core  test.cpp\n``\nThe signal got to the system handler. which led to core dump and the core dump was collected into thecore` file (I should set better core naming pattern).\nDo note that I had to do a bit of a dance to enable core dump collection on my system first, so maybe your system has core dumps disabled?\nedit: This is from Catch 2, but signal handling code hasn't been touched in quite a while. You might also try to disable signal handling completely and see if that gives you the desired behaviour, using CATCH_CONFIG_NO_POSIX_SIGNALS\n. Why exactly do you want to have Approx of infinity?. Ok. I am not categorically opposed to making Approx infinity aware (although it would most likely start as \"hey, don't do that\" error on construction), but I wanted to know the motivation to do so.. Coming back to this, I think this is out of scope for Catch, and should be solved by using the Reporters interface to create your own reporter that can format the output in whatever way you want.\n. Changes to the download url have been made since, so I am closing this.. This has been fixed in 1c47fe023a1547e9a7a7e4efd163c098d69e38a4, so I am going to close this.. Agreed.. @RossBencina I think it was meant for objects that have overloaded conversion to bool, so that if you have an object that can be truthy or falsy, then for testing whether its falsy REQUIRE( !instance ) is fairly natural but prevents decomposition. On the other hand, REQUIRE_FALSE( instance ) would allow decomposition, but might not be obvious.\nAs to whether the warning is needed, I am not sure. I think it will be obvious to user when the decomposition fails, but it might not be so obvious that the proper fix is to use REQUIRE_FALSE instead of REQUIRE.\nI think it would be worthwhile to make it work again, as long as the amount of work is not excessive.. The issue in title is solved, so I am going to close this soon.\nI am also going to open up a new issue with the other problems found (hopefully soon \ud83d\ude04 ).. See #793.\nThe short version is that Catch2 makes it fairly easy to add arguments.. Since there hasn't been any follow-up in two months, I am gonna close this.. Since we want to move build to CMake based (with IDE specific files generated on-demand), I will look into this soon.. Can you check whether the current CMakeLists work for you? I tried generating solution for VS 2015 and the header files are included.. This has shown up many times over the time, so I am linking some duplicates I found: #110, #276. @ruipacheco Partial support is in, see current release notes, or CLI documentation.. @martinmoene How about changing the last paragraph to this?\n\nAfter compiling tests-main.cpp once, by doing g++ -c tests-main.cpp, it is enough to link the resulting object file with separately compiled tests-factorial.cpp, like so g++ tests-main.o tests-factorial.cpp -o tests. This means that adding more tests to tests-factorial.cpp, will not result in recompiling Catch's main and the resulting compilation times will decrease substantially.. Ok, I expanded the section a bit more yet.. That was not supposed to be there!. The name attribute of testsuite tag currently defaults to the binary name and can be override by using the -n cli flag.. This is rather old issue, but here we go:\n\n\nTo add support for comparing with new types, you just need to add proper bool operator== overload where the compiler finds it.\nTo change how the results are displayed, you need to either give your type overload for operator<<, or specialize Catch::StringMaker for your type.. @mcraveiro I think this would be doable, but is currently not quite supported.\n\nAfter the recent Matchers rework, they are documented and the interface is likely to be stable for a while, but right now REQUIRE_THROWS_WITH only supports matchers over std::string, which are given stringified exception (result of calling either what or overload of an exception-translation function Catch provides). This is because we can't properly keep exception's type, so we have to work with string that represents it.\nThere have been couple of requests for combination of REQUIRE_THROWS_WITH and REQUIRE_THROWS_AS, which would allow for arbitrary matchers, so I might implement it in the future.\n. This is now in Catch 2.0 branch and should find its way into master at some point.. This is no longer true. When I try this against Catch v1.8.1:\n```cpp\nint cnt = 0;\nstd::string foo() {\n    ++cnt;\n    return \"aaa\";\n}\nTEST_CASE(\"Double eval\") {\n    REQUIRE_THAT(foo(), Catch::EndsWith(\"a\"));\n    std::cout << cnt << '\\n';\n}\n```\nit prints out 1. Not sure at which point it was fixed, but the matchers were recently completely reworked, so.... As far as I can see, #728 was already merged and fixes this. Closing. . Since this will not be added to Catch Classic, but might be added to Catch 2 at some point, I opened #853 instead.. I merged this to master in 5121b5b05886c3667fa8ba738b2f55d138d35490.. It's interesting that this bug got to live for so long.. I edited the issue to make the example code more legible.\nCan anyone with QEMU confirm if this is happening with current Catch?. Since it has been ~5 months without new information, I am going to close this issue. If someone manages to reliably reproduce this with latest Catch, please open a new issue and link this one.. @lightmare It will probably be missing for a while, until we figure out how to properly work with C++11 specific tests and features in approval tests.. Documentation fixes are always welcome.. The LexSort struct and its usage was thrown out in be3570ef22a450e7e040913822828468f70d7f81 so I am closing this.. This is now in master, I added a new feature toggle so that MSVC can use this as well (it still doesn't trigger the C++11 feature check).. This has been fixed in Clara (which is theoretically an external dependency) so I will close the PR.. I can't reproduce the issue on my own and there has been ton of changes in the meantime.\nUnless someone can reproduce it, I am going to close this issue soon.. Since it has been ~3 months without new information, I am going to close this issue. If someone manages to reliably reproduce this with latest Catch, please open a new issue and link this one.. Strictly speaking this can be worked-around by redirecting std-out, but it should be investigated anyway.\n. This seems to be fixed, just throwing in std::endls is a bit of hack solution, so I am gonna tag this with revisit.. Since this was fixed, I am closing the issue.. At some point this change made it into the teamcity reporter independently (?), so I am going to close this PR.. This has been since fixed in master, so I am closing this.. ~Interestingly,~ this is already suppressed but for C++11 only ~(can't tell you why).~, because C++11 has _Pragma.. @vadz The reason for using _Pragma is that in theory it lets us apply the pragma to single line, where Catch causes the warning, while letting the warnings be in rest of the TU. The reason why it is gated behind C++11 is that it was added to the language at that point and there was no testing done to see if earlier versions of GCC support it as well. Standard pragma is of no use, since we would have to let the suppression be enabled.\nThe good news is that I did some testing and gcc versions 4.6 and up support _Pragma.\nThe bad news is that there are some bugs in gcc's handling of _Pragma pre gcc-4.8, so it is useless anyway.\nAt this point we will probably end up just force disabling these for pre 4.8 gcc, and use the _Pragma option for post 4.8 gcc.. Master is going to look interesting with several commits by different people fixing typos.\nThanks.. Since this has been resolved in current Catch, I am going to close this.. Merged the previous PR, closing this one as well.. Thank you and sorry for the delay.. This has been implemented in 79acc0504bf62020eefbb305c948718328aebade so I am going to close this.. The missing sources are already added and include path is fixed, so I am closing this.\nI will see about putting them into alphabetical order.. I am unable to reproduce this with VS2015 Update 3, after setting project's platform toolset to \"Clang 3.7 with Microsoft CodeGen (v140_clang_3_7)\".\nCan you attach a project file that is set up so that it fails?. Ok, thank you for the update.. Currently, in Catch 1.9.4, startup configuration errors lead to exception being thrown before main is entered. This is not ideal, because this leads to implementation specified behaviour (well, std::terminate is always called, but what happens in the handler is up to the implementation), but should make it fairly clear that something bad is happening.\nDevelopment branch of Catch 2 incorporates a change where exceptions from configuration errors are instead stored and consumed after Catch enters main. Note that if you supply your own main, you might have to handle these exceptions yourself (see documentation in the Catch 2 branch).\nSince there has been no followup on this issue for ~3 months and current master already incorporates a partial fix, I am closing this issue.. I am not quite sure about this one, but its probably right.\nWhile single_include is only updated on tagged releases, that also means its much better for external consumption. On the other hand, if someone wants to refer to current master, then it should refer to include, so.... After some discussion, we decided that steering people to take latest tagged release as a dependency is better idea than steering them to ToT, so #779 is in.. Your browser automatically opens plaintext files, because it thinks it would be useful for you. If you don't want it to do so, right click the link and select save as.. ATM it is documented (albeit not in detail). Do you have something more in mind?. This should be fixed by 0016273dbf6f910e547c6274360bf297ad6ff5ec.. The commit is now in master, so it should be solved (reopen if it isn't).. AFAIK both should be fixed in current master, the first one for quite a bit and I just commited fix for the second one -- we now just windows.h to get the proper declaration, since the file should not be compiled outside of main file it does not hurt the compile times so much.. Since there has been no further inquiry in ~3 months, I am going to close this.. None that I know. There was some out-of-tree integration done for older VS version (2012 I think) and older Catch, but nothing for current Visual Studio and current Catch.. I thought about this some more and supporting -fno-exceptions would mean a call to abort on failed test.\nThis does not seem like a good idea for testing framework.. You can do that already via -e, --nothrow                             skip exception tests. This allows you to also skip test cases tagged with [!throws].\nThe problem with -fno-exceptions is that REQUIRE throws an exception upon failed assert and the standard solution to that is to call abort instead.. @ruipacheco Just returning works for assertions directly inside a test case, but assertions are specifically intended to support nested function, e.g. this\n```cpp\nvoid check_bits(uint32_t val) {\n    REQUIRE(val & 1 == 1);\n    REQUIRE(val & 2 == 0);\n    REQUIRE(val & 4 == 4);\n}\nTEST_CASE(\"foo\") {\n    uint32_t val = getval();\n    check_bits(val);\n}\n```\nthe only way to support this is via exceptions, or exception-like mechanism. This leads to the problem where the only way to support -fno-exceptions is to hard abort on failed assertion, which is... suboptimal for a test framework.. Thanks.. Seems to be fine, if it comes up a new issue can be opened.. Since this will not be implemented in Catch Classic, I am going to close it in favour of overarching issue #853.. I am against adding those.. GCC 3.4 is positively ancient and not supported.. Not against it, but I admit I don't want to do this myself.. @ras0219-msft I am working on a script that would make the PR as a part of an update.\nIts annoying, but not that hard, what I'd really like to see is the ability to publish more versions side by side, so users can keep an older version if the new one broke them. . This was solved a bit differently -- if CATCH_CONFIG_CPP11_GENERATED_METHODS is defined, it also deletes its move constructor and move assignment -- so I am going to cloes this soon unless someone still has the problem.. Catch2 is dependent on C++11, so old versions of Solaris Studio are no longer even possible to support.. Could not reproduce this bug with current version of Catch.. This is weird, my email notifications tell me there are new posts here, but I don't see them. Anyway, apparently its still there, I just hadn't managed to turn on the RTCc flag properly.\nDo note that even STL doesn't fully support using /RTCc and hard aborts compilation until you add a specific define that more or less says \"Yes, I know I am on my own and its my own fault if things don't work\".. I am going to need some convincing that this is actually inside Catch, because the picture shows error in VS 2015 <streambuf>, at line 255, which is *_IGcount = (int)(_Last - _Next); in this function\ncpp\n    void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)\n        {   // set pointers for read buffer\n        *_IGfirst = _First;\n        *_IGnext = _Next;\n        *_IGcount = (int)(_Last - _Next);\n        }\nThis cast can discard some information (although it seems quite unlikely), by going from ptrdiff_t, which is 64bits on x64 arch, to int which remains 32bits. The cast happens as a part of setg standard operation and should have nothing to do with us.\nAlso I am still unable to reproduce with VS2015 Update 3, /RTCc enabled\n```cpp\ndefine _ALLOW_RTCc_IN_STL\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nnamespace testing {\nTEST_CASE(\"Test1\", \"[unit]\") {\n}\n}\n```\n*  Catch v1.5.8\n*  Generated: 2017-01-07 12:34:30.379000\nVisual Studio Version 14.0.25431.01 Update 3\n19.00.24215.1. Since there has been no followup in a long time, I am going to close this.\nFor posterity, to generate xml report use -r xml on the command line.. My opinion on this is that there should always be at least a binary name in the arguments, but I can see why Clara (the cmd-line parser Catch is using) shouldn't be making that assumption. . This is most likely a false positive caused by uninstrumented libstdc++/libc++.\nIf there is something Catch can do to workaround it, we would be willing to implement it, but it is fairly unlikely.. We could potentially try messing around with __msan_unpoison, but it would be very, very, very low on the priority list. I am going to close this iseue and tag it with revisit.. This has been fixed in Clara (which is an external dependency), closing the issue.. Some time ago I added the fact that the overload has to happen before Catch is included to documentation, and because Catch::toString is currently deprecated and will be going away in favour of specializing Catch::StringMaker in Catch 2.0 (or providing operator<<), I am going to close this.. This has been fixed, but for time being the \\t special handling was removed.. I am probably going to close this one, we can talk about how messy the comparison internals are in #730.. Catch 2.0 will have some changes to how Catch stringifies types, namely using toString overloads will be removed, because they caused more trouble than they were worth.\nOnly StringMaker specialization and operator<< overloads will be supported in the future.\nAnyway, I am going to update the documentation and close this issue in the meantime\n. This is a job for custom reporter, or just hacking in some local changes to your favourite Catch's reporter (not that I would condone such a thing of course \ud83d\ude04), but probably not worth making a specific reporter that is bundled with the single-include header.. Oops, duplicated report for this without noticing. (issue #750)\nThe given fix would trigger -Wreorder warnings though, because m_xml is second member in the XmlReporter.. This should be fixed in branch dev-signals. Do note that the single-include header there is not regenerated, so if you want to test it, you have to regenerate it yourself (just run generateSingleHeader.py in scripts folder).\nOutput on my PC is now\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\na.out is a Catch v1.6.0 host application.\nRun with -? for options\n\nkillcatch\nsig1.cpp:7\n...............................................................................\nsig1.cpp:7: FAILED:\ndue to a fatal error condition:\n  SIGABRT - Abort (abnormal termination) signal\n===============================================================================\ntest cases: 1 | 1 failed\nassertions: 1 | 1 failed\nAborted (core dumped)\n``\nwhich is what it should be.. Since thesignalsbranch has been merged intodev-signalsanddev-signalshas been merged back to master, I am going to close this.. This should be fixed in branchdev-signalsin better way. Do note that the single-include header there is not regenerated, so if you want to test it, you have to regenerate it yourself (just rungenerateSingleHeader.pyinscriptsfolder).. Is there a reason not to have single point#include when deciding whether to useunique_ptr orauto_ptr? Then it would be impossible to forget includingwhen usingCATCH_AUTO_PTR` macro.\n```cpp\ninclude \nifdef CATCH_CONFIG_CPP11_UNIQUE_PTR\ndefine CATCH_AUTO_PTR( T ) std::unique_ptr\nelse\ndefine CATCH_AUTO_PTR( T ) std::auto_ptr\nendif\n``` . This has been fixed a while back already, closing.. The stack overflow part of this is fixed in PR #753 . I added Windows exception handling using the current code paths in PR #764.\nThe same caveat emptor still applies: Trying orderly shutdown on binary that generated a general signal might break horribly and there are no guarantees.. This is resolved in dev-signals branch.. This takes unconditional dependency on C++11 (in the form of including <array> and <memory>), while catch tries for C++03 conformance. Going to fix this later tonight.. I cherry picked this into dev-signals branch, so the PR is obsolete.. As far as I can tell this hasn't reappeared, so I am going to close it.. Is this caused by the cuda compiler or some warning level in MSVC? (Mostly asking because I can't reproduce with MSVC).. Since there has been no followup in 3 weeks, I am going to close this. If it comes back, reopen or open a new issue.. Catch isn't dropping C++03 support, but a new rewrite for C++11 and up will be made at some point.. I won't be touching this in Catch Classic, but it will work in Catch 2.. I am not 100% sure, but I think it does.\nIf it doesn't, someone can reopen this issue.. Catch2 requires at least c++11, which these versions of SunStudio don't support.. @tgnottingham I might at some point create a convenience wrapper that would use iterators to try and compare containers, but Catch already contains a generic mechanism for smarter assertions in matchers.\n. I tried correcting an oversight I made and... yeah, I am just going to create new one.. This is in.. So guarding the define like this\n```cpp\nif !defined(NOMINMAX)\ndefine NOMINMAX\ndefine CATCH_DEFINED_NOMINMAX\nendif\n... same for WIN32_LEAN_AND_MEAN\ninclude \nifdef CATCH_DEFINED_NOMINMAX\nundef NOMINMAX\nendif\n``\nwould be prefered? (Obviously at that point the logic would be factored out tocatch_compiler_capabilities.h`)\nIf we go this way, we could also provide a configuration option to stop Catch from including <windows.h> with these macros defined, but I think that is quite far past the point of diminishing returns and user who wants to include <windows.h> with all symbols in the same file as Catch main/runner, should just include it before including catch.. I rebased and changed the PR, but the results are not pretty.\n#  ifdef CATCH_DEFINES_NOMINMAX\n#    define NOMINMAX\n#  endif\n#  ifdef CATCH_DEFINES_WIN32_LEAN_AND_MEAN\n#    define WIN32_LEAN_AND_MEAN\n#  endif\n#include <windows.h>\n#  ifdef CATCH_DEFINES_NOMINMAX\n#    undef NOMINMAX\n#  endif\n#  ifdef CATCH_DEFINES_WIN32_LEAN_AND_MEAN\n#    undef WIN32_LEAN_AND_MEAN\n#  endif\n\nTo the best of my knowledge, only way to fix this would be to create a proxy header, that hides away the preprocessor directives.. Fixed. It was an artifact of me developing in single-file include and then merging the changes back, badly.\nI wanted to see if a Windows CI could be set up and as far as I can see, Travis-CI still has no Windows support.  However, AppVeyor does support Windows and is free for Open Source projects, so that might be interesting to look into.. I cherry picked this into dev-signals branch, so the PR is obsolete.. This is in the latest release, so I am going to close the issue.. Looks good, thank you.. My personal opinion is that if what you want is unconditional logging of running code (as opposed to logging of finished tests), then you need a logging framework, which is orthogonal to unit tests and probably shouldn't be part of Catch. (And std::clog can serve as a very minimal logging implementation)\nOn the other hand, if you have a ton of long running tests and want to know which one already passed, you could pass -s to the Catch generated binary. This make it report tests that finished successfully in addition to those that failed. I strongly recommend passing -r compact as well, because the default reporter can be rather verbose if you want all tests to be reported.. I am going to close this, since it has remained inactive for ~3 weeks.. Catch22, because two twos are better than one.\n(Not actually serious suggestion). We ended up with Catch2, see Phil's new blog post.. @jjcamp There are two parts of the issue\n1) Build VM configuration. I am fairly sure this is ok as it is now, because we are test compiling with Clang up to 3.8, but it will have to be checked anyway.\n2) Set up build configs so that C++11 and C++98 are both built. Right now we built C++98 and only 98, but there might be bugs lurking in our conditional use of C++11 features, so it should be tested as well.\nAlso I don't know enough about Travis to make this a quick fix, so this is a kind of a post-it note for later, when I have time to read through the docs. Or maybe someone will see this and think \"I know how to do that\" before I get around to it.. Travis now compiles Catch with C++11 under g++ 4.8, g++ 6 and clang++ 3.8.. Just a quick note, this isn't being ignored, I am just insanely busy until weekend.. I started work at performance related changes in a dev-performance branch. If you have some representative benchmarks, please contribute.\nAs far as this PR, it seems like a large win for passing tests and extremely small penalty for non-passing tests, so its probably going in. (I will have to run rest of tests first). This is now in, but as far as I can tell there is no way to mark a PR as merged, if I cherry-picked it into a branch and then merged to master.. The first one is perfectly OK, even if weird, the second one is also a false positive (the if guards the dereference and the dereference can happen only iff the pointer is nonnull).\n. There is a request for special macros that only check for equality, without having expression decomposition, etc in #668.. After merging in dev-performance-round2, I did some benchmarking, comparing current master to last release (1.6.1).\nUsing 3 benchmarks\n1. A long loop (2^20 iterations) with extremely simple REQUIRE condition.\n2. A long loop (2^20 iterations) with simple CHECK condition, that fails.\n3. Full benchmark suite of the Json for Modern C++ project (version 2.1.0, contains ~11M assertions).\nI ended with these numbers\n| Benchmark | 1.6.1 | master |\n| ------------ | ------ | ------- |\n| Passing tests | 3.4s | 0.7s |\n| Failing tests | 15.5s | 15.1s |\n| JSON for modern C++ | 6m 25s | 4m 14s |\nI also ran compile time benchmarks for the JSON tests and there has definitely been a regression in compile time. Compiling all the tests from nothing with Catch 1.6.1 takes ~15minutes, 25 seconds. Compiling with current master takes ~16 minutes. . @GatoRat Yeah, there definitely has been some compile time regression (I added compile time information to the post above), as the framework gains more features there is more code that the compiler has to chug through. If you have some specific code that has gotten significantly worse, please share.\nOtherwise, the compile times should get a bit better soon, Phil has some simplification in store.. The new compile time flag (CATCH_CONFIG_FAST_COMPILE) speeds up test compilation on linux by ~10%. Windows benchmark pending.. Another ~15% speedup for test compilation using CATCH_CONFIG_FAST_COMPILE was achieved in 7a8a0205b46a3770cc8f0d26a24a903a4c03e82a. . This change is related to #582 . In master now, as 184865358c80ed37f6d9dadb6f80207482c95ab4.. It's clean now.. ~~I have some work in progress on porting approvalTests script to Windows, so I'll pull this into a branch and merge all the changes first.~~\nThis is in master now, except I still suck at github so this didn't get labeled as merged.. I like this better than the current solution.. While its not obvious at first, its by design to keep the underlying expression template machinery to minimum (also some more philosophical reasons). I'd recommend either a Matcher, or wrapping the expression in parentheses yourself.. I improved the documentation regarding asserts and now I am going to close this (actually I hoped github would autoclose this issue, but apparently the detection does not support list of commits :smile:).. This is going to need some discussion, both whether we should install the single_include version or the normal one (I say single_include, because it corresponds to last tagged release and not just master), and whether we should install as catch/catch.hpp or just catch.hpp. Personally I am for keeping it as catch.hpp but it's not a strong preference.. After discussion with Phil, we decided to have the command install the single-include header (because that remains stable between releases) and to have it namespaced as catch, so it installs as catch/catch.hpp. The second is subject to change given feedback.. This looks good, but as it is on mac I am unable to test it.\nI do wonder why it was behind DEBUG macro though.. The one in contains is not just a compilation warning, its an actual bug that needs fixing (although I don't think Catch uses contains anywhere, I only added it because it felt weird adding single char overloads for startsWith and endsWith and not for contains as well).. Can you provide some extra information, ie stack trace, g++ version or example test file that causes the issue?\n\nAlso catch version (i.e. current single-include versus current master vs older version), because there has been one bad bug in text output formatting, that has been fixed in master, but isn't in the last release.. With Catch2 this has become relatively easy:\n```cpp\n// custom-main.cpp\ndefine CATCH_CONFIG_RUNNER\ninclude \"catch.hpp\"\nusing namespace Catch::clara;\nint main(int argc, char* argv[]) {\n    Catch::Session session;\n    int init_size = 0;\nauto cli = session.cli()\n    | Opt(init_size, \"initial size\")\n         [\"-x\"][\"--initial-size\"]\n         (\"Initial test size\");\n\nsession.cli(cli);\n\nauto ret = session.applyCommandLine( argc, argv );\nif (ret) {\n    return ret;\n}\n\nreturn session.run();\n\n}\n```\n```\n$ clang++ -std=c++11 custom-main.cpp && ./a.out -h\nCatch v2.1.2\nusage:\n  a.out [ ... ] options\nwhere options are:\n  -?, -h, --help                            display usage information\n...\n  -x, --initial-size          Initial test size <----- New option here\nFor more detailed usage please see the project docs\n```\nSo I am going to close this.. You are in luck, e7bcbb35c0617a679422b29e8b402928a9d5c5ae should make it possible to run specific sections now. However, you will need to either build the single-include file from master by yourself (just clone the repository, go to the scripts folder and run generateSingleHeader.py), or wait for next release (should be Wednesday).\nFor details see #629.. That was a dumb error to make, mea culpa.\nOn the other hand, you probably shouldn't clone from master in your CI pipeline. :smile:. Ok, this is interesting and why we can't have nice things.\nI am going to make some more documentation changes before accepting though, the clamp on return codes from applyCommandLine is not needed -- it returns either 0 or INT_MAX.\n. Try calling the constructor directly, without declaring a variable:\nREQUIRE_THROWS_AS(AGConnection(params), std::logic_error);\nThe underlying problem is that to fix a -Wunused-value warning, the expr passed to REQUIRE_THROWS_AS is cast to void, which does not work when you are declaring a variable.. @jktjkt Unless there is significant feedback against, we plan to keep it, so we don't trigger warnings when used like REQUIRE_THROWS_AS(static_cast<bool>(xsd::boolean(\"\")), std::bad_cast).\n\nThe older Catch doesn't work with the new syntax.\n\nCan you be more specific about this? I tried compiling and running this against Catch 1.6.1 using clang 3.8 and it seems to compile and work fine.\n```cpp\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\ninclude \nstruct foo {\n    foo(){ throw std::bad_cast(); }\n    foo(int i){ throw 1; }\n};\nTEST_CASE(\"ASD\") {\n        CHECK_THROWS_AS(foo(), std::bad_cast);\n        CHECK_THROWS_AS(foo(3), int);\n}\n```\n. I am going to retag the release instead. Thanks for the notice though.. Can't reproduce this one on 64bit Ubuntu with clang 3.6 - 3.8, so I am going to need more information. \nWhat exactly does CLion/Clang mean? Clang invoked from Clion? If so, can you provide your cmakelists.txt?. You are very likely missing flag telling gcc to link in the standard library, which is why you are seeing all the missing references to things like std::basic_string<...>::empty() or ___cxa_free_exception.\nOne possibility is to actually use g++, as it links in the C++ standard library by default, the other is to add it manually (quick test says that gcc test.o -std=c++11 -lstdc++ links and runs, but you might want to be careful to link in libraries with the proper \"bitness\").\nAs to the original question in the issue, IIRC the lowest tested one is something like gcc 4.2 on mac, but currently only 4.8 and up are built as part of CI builds.. Can you try the attached single header file?\nIt was an artifact of changes being pulled in from separate branches, so that when branch windows-header-defines changed the inclusion pattern, the dev-signals branch was not yet in.\ncatch.zip\n. Unintentional change -- Prior to about week and half ago, the download link in readme went to the raw file in repository, which is always stored with LF. This was changed to link to the file in a release, which however is not automatically converted to LF, and then the release was made on a Windows PC.. New release has been made with LFs again and we (hopefully) will remember to check the generated header before uploading as part of a release.. The first one is fair, but trying to be windows compiler without supporting Win32 API  is just... ugh. SEH will end up MSVC only for now, because splitting apart the handling behind guards for various MinGW versions is probably not worth it.\nAs far as using gmtime_s, it will probably end up MSVC only as well, because I'd prefer not to disable compilation errors for people who use Catch's runner, instead of just main.\n. ~~Can you test the attached single-header version? It should disable SEH, unless MSVC is used to compile Catch and do the same with gmtime_s usage.~~\nNevermind, it wouldn't work. I'll create a proper patch on Monday.. @sdsahib @nyamatongwe \n~~The attached single header version should have SEH and gmtime_s as MSVC only, can you test if it works for you?~~\nNevermind, still not quite there, see below for fixed version.\n. Third time's charm, this time I actually installed MinGW to test it before-hand.\nAnd I found an interesting bug waiting to happen in the script used to generate single header version of Catch\ncatch.zip\n. This is a duplicate of #798 and is caused by the THROWS family of macros now actually depending on received an expression, rather than pasting whatever it gets to a semicolon.. Is there a reason that it isn't equivalent with clean_up(my_json::json_value(t))?. If you can use C++11, then you still can run arbitrary code inside the THROW assertion family, using the same idiom that is used to perform non-trivial initialization of complex const variables.\ncpp\n    REQUIRE_NOTHROW([&](){\n        int i = 1;\n        int j = 2;\n        auto k = i + j;\n        if (k == 3) {\n            throw 1;\n        }\n        return true;\n    }());. I didn't actually, I benchmarked the tests after merging in the performance branch, but before merging in this change.. We have had similar thing going on with libstdc++ in the past (#352, #271 and possibly others), this is the first time with libc++.\nThank you for the followup and raising issue against libcxxrt.. Well, XML 1.1 is only 13 years old at this point, it will take off any moment now :smile:\nBit more seriously, it was changed to 1.1 because of some encoding issues. I will check if that is still relevant and if its not, then we don't have problems with going back to 1.0. ~~I removed the const qualifiers and tested it against type_safe master, which now compiles. Can you rerun the CI on your end?~~\nYour CI works off the last release, so it won't pick it up until the next one.. It is (was) on our end, and it should be fixed, but your pipeline won't pick it up until next release (most likely tomorrow).\nJust to make sure, after I cloned your repo I did this to reproduce the error and verify that it is fixed:\ngit checkout flag_set\ncmake -BBuild -H.\ncd Build\nmake -j4\nThis triggered the compilation error. After I replaced the downloaded Catch version with one generated from current master (not the one from 1.7.0 release), the compilation finished succesfully and tests all passed.. The build is up now.. I'll take a look soon, I think this is an issue we solved on Linux and I forgot about changing the logic for Windows SEH as well -- on Linux, Catch deregisters its handler before attempting anything else, so if the handling triggers another signal, we do not enter into recursion.\n\nAlso note that Catch does specifically NOT attempt to shutdown gracefully. It uses the vectored exception to fail the current section, print out what roughly happened and then pass it upward, which usually means passing to the default handlers.. I ported the same logic the Linux signal handler uses to Windows -- Catch now deregisters its handler before attempting to do anything else.\nCan you check if the attached single file header works as expected?\ncatch.zip\n. The nullptr regression is the result @philsquared inadvertently merging half-prepared changes to master, not reverting all of them and should not be present in v1.7.1.\nAs to the last part, there was a request for Catch not to swallow crashes, so it does not prevent creating dumps, attaching debugger, etc. on crash, so we don't want to call exit (or variants) in reportFatal anymore, but rather pass the problem upwards.\nI'll see about making the handling inside Catch saner though.\n. Finally got back around to this and I think I found the underlying issue -- the attached version of single-include should not trigger recursive SEH exceptions and/or signals -- but did not have time to fix it properly, so the output is broken.\nCan you test this again?\ncatch.zip\n. The only way to do exactly what you want requires running each test in a completely separate process, which Catch does not do.\nThe other solutions depend on why you are in this state and where do you want to end up. If the problem is that you have global dependencies in your test and want to ferret them out, then you should start running the test with random ordering of TEST_CASEs and when they fail, investigate whether there is some assumption about global state that does not hold.\nIf the problem is that you want some shared state that can be modified in different ways, then indeed SECTION macros are what you want:\ncpp\nTEST_CASE(\"Test module\"){\n    uint16_t state = 0;\n    SECTION(\"Initialization works\") {\n        state = init_module();\n        REQUIRE(state == 1);\n    }\n    SECTION(\"Wrong state without init\"){\n        REQUIRE(state == 1); // This will fail\n    }\n}\nbecause the paths taken through the test will be \"Test module\" -> \"Initialization works\" and \"Test module\" -> \"Wrong state without init\", but not \"Test module\" -> \"Initialization works\" -> \"Wrong state without init\".. Also a duplicate of #806.\nThe problem still is that since 1.7.0, Catch now relies on the passed expression being actual expression.\nIf you have C++11 or later available, just use lambdas.. There are more requests for this, so it might happen.\nThe question is, what the API should be like... the obvious option would be REQUIRE_THROWS_WITH_AS(expr, exception-type, matcher), but the name might not be a good idea and I am not sure whether the API couldn't be better if done differently.. I am going to close this issue in favour of #641. See latest post there for an update.. This is fairly interesting -- I looked at the build log from AppVeyor and the WINVER/_WIN32_WINNT macro is defined as 0x0500, see /D WINVER=0x0500 /D _WIN32_WINNT=0x0500\nJudging by a quick look at https://msdn.microsoft.com/en-us/library/windows/desktop/aa383745(v=vs.85).aspx#setting_winver_or__win32_winnt, this would indicate that you are building for pre-Windows XP version of Windows, which you obviously aren't, or at least shouldn't be. Now the question becomes WHY is it defined to that.\nAfter looking at your build, I see that you are adding these explicitly for some reason. If you need to keep those, you can disable the SEH on Windows, for details see our documentation. Otherwise I recommend deleting these defines (they will be autodefined based on the OS version you build on), or bumping them up to at least 0x0502 (Windows XP SP 2).\n. If you have access to C++11, you can wrap any complex sequence of operations in a lambda.\nIf not, but aren't declaring new objects, you can abuse parens + the comma operator to chain multiple expressions into one.\nIf not and you want to declare new objects, then it becomes problematic.\n. Does REQUIRE_THROWS_WITH(MyClass(-1), \"N must be positive\") not work?. Since it seems to work OK now, I am going to close this PR.. We don't want to add more reporters to the single-include header, so I am going to fix-up the PR a bit.\nOtherwise looks pretty good.. Interesting. Does this also happen on SUSE with newer gcc?. @furkanusta Thanks, I didn't know where to start with this one, and this is helpful.. Not sure if this change is worth a separate reporter, and it shouldn't be included in the single-include by default.\nMaybe there is interest in changing the compact reporter to work like this instead?. C++03 does not guarantee there being \\0 at str[str.size()], in fact I think it does not even guarantee that it is inside the string's bounds.\nGranted, I don't think there is an implementation that does not have it there, but it's better to be safe than sorry.. Are you using properly instrumented libstdc++/libc++? Because if not, its very easy to get false positives:\n$ cat -n test.cpp\ncpp\n     1  #include <iostream>\n     2  #include <string>\n     3\n     4  int main() {\n     5      std::string str;\n     6      std::cin >> str;\n     7      if (str == \"a\") {\n     8        std::cout << str << '\\n';\n     9      }\n    10  }\n$ clang++ -g -fsanitize=memory -fsanitize-memory-track-origins=2 test.cpp  && echo \"a\" | ./a.out\n```\nUninitialized bytes in __interceptor_memcmp at offset 0 inside [0x7fff949e4248, 1)\n==7125==WARNING: MemorySanitizer: use-of-uninitialized-value\n    #0 0x7f101db92459 in std::__cxx11::basic_string, std::allocator >::compare(char const) const (/usr/lib/x86_64-linux-gnu/libstdc++.so.6+0x121459)\n    #1 0x489c22 in bool std::operator==, std::allocator >(std::__cxx11::basic_string, std::allocator > const&, char const) /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/basic_string.h:4939:14\n    #2 0x489792 in main /home/horenmar/scratch/test2.cpp:7:13\n    #3 0x7f101cb8082f in __libc_start_main /build/glibc-t3gR2i/glibc-2.23/csu/../csu/libc-start.c:291\n    #4 0x419f88 in _start (/home/horenmar/scratch/a.out+0x419f88)\nUninitialized value was created by an allocation of 'str' in the stack frame of function 'main'\n    #0 0x4895e0 in main /home/horenmar/scratch/test2.cpp:4\nSUMMARY: MemorySanitizer: use-of-uninitialized-value (/usr/lib/x86_64-linux-gnu/libstdc++.so.6+0x121459) in std::__cxx11::basic_string, std::allocator >::compare(char const*) const\nExiting\n```\n...\nAfter going through Catch I am fairly sure this report is also a false positive.\n. I remember talking about this with Phil, and IIRC it is intentional. \nThat does not mean it can't change, but it will need some discussion first.. Well, this has been a while, but I finally got around to this.\nThe result is that this won't be merged, because making the change in this way would lead to undesirable cosmetic changes.\nConsider INFO usage from MiscTests.cpp:\ncpp\nINFO( \"Testing if fib[\" << i << \"] (\" << fib[i] << \") is even\" );\nthe current output is Testing if fib[7] (21) is even, the changed output would be \"Testing if fib[\"7\"] (\"21\") is even\".\nIt would also change how CAPTURE is stringified\ncpp\nint i = 42;\nCAPTURE(i);\nwould result in \"i := \"42. This also breaks old gcc.. @lightmare Thats not actually completely true, having duplicate const specifier usually triggers a warning, which add_const prevents.\nIn general, tests in templates are going to need some work -- as an example, _Pragma based warning supression does not work inside templates, so pretty much every non-trivial REQUIRE triggers Wparentheses.. @rmartinho I slept on this a bit and maybe we could revert the catch (...) block back, so that it uses the given type exactly once again, because using typename outside of template is C++11 extension and Catch Classic is still C++98.. I've reverted the change, *_THROWS_AS macros now use the exception type argument as given.. Cygwin does not properly support signals. This (and couple other) cygwin compatibility issues are fixed in master, but aren't yet in a release.. The next one.\nThe actual answer you probably want is that it will be released at some point this week (likely tomorrow).. 1.8.0 is out.. We don't touch errno directly and mostly stay away from C parts of the standard library, so I wonder what exactly resets it.\n. @lightmare  Only when -d yes is also specified, and its new to the v1.8. We are willing to have a workaround for bug, as long as the complexity cost is reasonable -- this seems to be (even though its 3rd party bug).\nMuch more interesting is that this happens even without -b, because isDebuggerActive shouldn't be called then.. I found out why this happens even without -b... we check whether a debugger is active, before using colourized output.\nI wonder whether this is actually needed, shouldn't isatty be sufficient? If the debugger is run from terminal, colours should just work anyway, otherwise isatty shouldn't return true.. This should be fixed, but I'd still like feedback from someone who understands the linux internals better, whether we need the debugger check when deciding to use colours.. So, I got around looking at this and I have to ask: Was your g++ binary compiled in debug mode? Or maybe the linker, because the attached gif shows ld taking long time.\nEven my pretty ancient Zacate (1600 MHz, tiny caches, generally quite slow), can compile Catch main in 15s. My actual notebook takes ~8s to compile the main, ~9s to compile the factorial example + main.\nAs to the new compile time option, CATCH_CONFIG_FAST_COMPILE, it helps only when compiling test files. Under Linux it can speed up the compilation by ~10%, so it can be quite helpful if you have many tests, but makes basically no difference when compiling main is the dominant time cost.. @evandrocoan In general, Catch's main takes a looong time to compile and the tests aren't exactly fast either, so if you are stuck with 1GHz cores, then you will see some crazy compile times.\nIf doctest covers your need, use it, it was made as reimplementation of Catch's core with minimal compile time overhead, but is missing quite a few features. We aren't out for world domination and will not hunt you down for not using Catch :smile:. Catch 1.X is meant to support old (some might say obsolete) compilers compiling C++98, so for things like nullptr, you should be using CATCH_NULL. Adding tests to the SelfTest project would also be appreciated.\nThe above isn't sufficient for merge, I'll leave that up to Phil, but at least compilation needs to be fixed.. I admit I don't actually use TAP protocol anywhere, so I wasn't sure whether it should or should not report all of the tests in summary.\nHowever, my reading of the specs, such as they are, implies that if we report 1..10 tests, we should also print out the ok <num> lines (basically, TAP reporter should behave as if -s was always specified). Can you confirm/deny?. Your use-case is outside of scope for Catch, you will need a separate tool to check which lines were actually ran by your test suite.\nOne such tool is gcc's gcov, but you will need to do some research for your specific platform.. Basically, collecting coverage needs either\n support from the compiler (gcov, llvm-cov, coverage-sanitizer), or\n hacky use of debugger (OpenCppCoverage).\nBecause Catch is a test framework, 1) is straight out (catch comes in after the compiler has already ran) and 2) would require us to create an out of process runner that understands platform specific debugger options.\n. Can you reproduce this with current Catch build? VS 2015 against 1.8.1 does not warn and I don't want to install VS 2013.. > Please do not submit pull requests changing the version.hpp\nor the single-include catch.hpp file, these are changed\nonly when a new release is made.\n...\nThere are actually more places where reporters take the string by value instead of by-reference, I'll take a look and fix them up tomorrow.. @lightmare is correct, it was added recently because VS 2013 would warn on a class that has copy constructor, but not copy assignment operator. It is however completely OK with it being private and undefined \ud83d\ude04 . First look: spaces, not tabs please.\nAs to whether this gets merged I'll leave to @philsquared who uses TeamCity and understands it much better.. Since Phil seems to be a bit MIA, I decided to look at TeamCity documentation myself and this change looks to be correct, so I am gonna merge it in.. Yeah, there is a problem with warning suppression inside templated tests, that I am not quite sure how to fix.\nBasically, if you are on a new-enough gcc (4.8+), then we use suppression based on _Pragma, which lets us suppress this warning for a single line, leaving it intact for the rest of the test file. For some reason, this does not work inside templates and I haven't gotten around investigating whether this is a gcc or standard bug (weirdness).\nA solution is to do what we do for old gccs, just use pragma to disable the warning for the whole file.. Since Catch2 is out, I am going to close this.. @ArekPiekarz So far most of our estimates were wildly wrong, so I am going to give \"when it is done\". Sorry.\n@mlimber You can't yet.. I will note that there is -d yes option, that makes Catch print out duration of individual tests (well, sections, which might make the interpretation of results a bit harder), but in no way is it a rigorous benchmark.. I am going to mark this as possible bug until I can take a look at why this is so -- quick look through how the libraryVersion instance is used doesn't yield any reason for this to happen.. @kevinushey Interesting. I don't think there is a reason not make the change, but it might have to wait until next minor.. @nabijaczleweli Especially your second comment isn't really helping.\nAnyway, I am really busy this month so I'll happily leave this to Phil.\n. @ldionne Can you check whether the attached single include works for you? It should accept commas in expressions in most assertion macros. Only the ones that need more than 1 arguments (ie REQUIRE_THROWS_AS) are not supported ATM.\ncatch.zip\n. Catch 2 is live. >When comparing to an the value of an rvalue std::optional, the returned value seems to be random.\nThis pretty much definitely means that invalid memory is being accessed. Seeing @onqtam post, it might not be our fault though, I will have to investigate it later.\n\nAfter a second look, the fact that wrapping the expression in parentheses works around the bug means that  it is most likely indeed our fault. My current guess is that we capture everything by const&, so when the value() call returns int&&, the captured reference is left dangling and the evaluation just accesses whatever garbage is there at the time of use.. Can you test this again with Catch 1.10? Using VS 15.3.2 and Catch 1.10 I cannot reproduce the issue anymore.. @Hedanito Thanks. I'll consider the issue resolved.. Fixing this might be problematic, because I don't think we have had this problem before, so it might still be needed for older cygwin versions and I would really rather not go checking various cygwin versions for compatibility.. Since there has been no followup, I am going to assume that this is fixed.. Color is disabled when Catch is being run under debugger. This incidentally also solves your first problem -- set linker's subsystem to Console and then run the test binary using Ctrl+F5, to run it outside of debugger.. This needs to be revisited, because letting exception escape out of global constructor works reasonably on linux (what() is printed), the same cannot be said for Windows -- on Windows it just aborts the program.\nThis could probably be solved by installing our own terminate handled via std::set_terminate and std::current_exception, or, we could conditionally compile in a try-catch block.\nNote, the same applies for RegistrarForTagAliases in #866.\n. @philsquared That would probably work as well, but creating a singleton to store exceptions from global object so you can throw them later on seems perverse. \ud83d\ude04 . Sure, why not.. We are currently attempting to suppress the warning by using _Pragma for GCC versions 4.8 and newer.\nThis would let us suppress it only for the assertion macros, but as it turns out, GCC likely has a long-standing bug in handling _Pragmas in C++ mode, as can be seen in this example\n```cpp\ninclude \ndefine TEST(expr) \\\nint a = 1; \\\n_Pragma( \"GCC diagnostic push\" ) \\\n_Pragma( \"GCC diagnostic ignored \\\"-Wparentheses\\\"\" ) \\\nif (a <= expr) { \\\n    printf(\"filler\\n\"); \\\n} \\\n_Pragma( \"GCC diagnostic pop\" )\n\nint main(){\n    int b = 2, c = 3;\n    TEST(b == c);\n}\n```\nIf you compile this using current GCC as C, it will not trigger the warning. If you compile this as C++, it will warn about bad parentheses.\nWe will likely end-up using plain pragma to suppress the warning globally in the next release.. @aldanor Basically, at some point in the past (can't tell you version on top of my head, but a recent one), we switched to using _Pragmas for GCC that support them and only using #pragma for older ones. As it turns out, the _Pragma support in GCC is very spotty: I can compile a small Catch example file using g++-4.8 on my machine without warnings, but on different machine, with newer g++, the warnings come back. Also it has trouble with templates...\nWe will probably end up just using #pragma for all gcc versions and let it leak into the test files.. I am going to close this, as I moved Catch back to force disabling Wparentheses everywhere using #pragma in 8f85d08e9f5bc0a1046d0f89e99d75fcbb453202.\nThis means that we disable the warning for GCC users even outside our assertions, but the spotty _Pragma support meant that the status quo was untenable.. Can you also check with current Catch? I suspect it will still be there, but ...\nAlso it might be intentional -- Catch generates some code in the test files, so we have to leak suppressions to the test file as well -- but in this case I don't think it is and will have to check.. @tomvierjahn That is not the current version. We probably should have deleted that branch when we went back to fixing Catch Classic, but it was left around in case we wanted to backport some changes.\nUsing Catch v1.8.2 and compiling this file\n```cpp\nstruct foobar {\n    bool b;\n    int i;\n};\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nTEST_CASE(\"aa\") {\n    REQUIRE(1 == 2);\n}\nvoid foo() {\n    foobar fb;\n}\nTriggers `-Wpadded`, so I am going to close this issue.\nxarn@DESKTOP-A79J11O:~/scratch$ clang++-3.8 test.cpp -Weverything -Wno-missing-prototypes -Wno-exit-time-destructors\ntest.cpp:5:9: warning: padding struct 'foobar' with 3 bytes to align 'i' [-Wpadded]\n    int i;\n        ^\n1 warning generated.\n```\n. @onqtam My brief testing showed that Clang cares about instantiation of the structs, not definition, when issuing -Wpadded.. I finally got back to this and it should now be fixed in master (not in the single include yet).\nIt turned out that this was by interplay between superfluous include, and our single header generator, making it so that a pragma diagnostic pop that was supposed to be at the end of the single include header, was instead inside code that is guarded by CATCH_IMPL define. This meant that in test files, there was 1 more pragma diagnostic push than there were pops.. Wouldn't a float constructor be enough?\n\nAlso you can just cast the float to double.. @tomvierjahn If you are using C++11, all of the Approx's operators support any type that can be converted to double, including strong typedefs.\n. Next release, so hopefully at some point this week.\nIf you want it now, you can make it using scripts/generateSingleHeader.py.. @HeroicKatora Actually, that issue was about VS2015 successfully linking this kind of code and then getting crazy results.\nIf you have a good suggestion for fix, it would be welcome.. @onqtam My plan back then was to use TMP to take specific types (primitives basically) by value, and the other by-ref, but then I looked at the traits I'd have to reimplement and gave it very, very low priority.\nForcing values for certain test file might not be a bad idea.. I probably should have mentioned other macros as well as assertions, but Catch is not thread safe.. I will think about it. Looks good to me, I want to make minor changes before merging it.\nI also have some minor concerns about using std::uncaught_exception causing unexpected behaviour (there is a reason it is deprecated in C++17), but it is unlikely to actually trigger, and even if it did, the difference in behaviour would be bad output message, nothing functional.. @dvirtz There are actually pretty good reasons why the new version exists, see n4152.. @philsquared Oh yeah, we actually have that in known limitations.\ne:\nI am going to merge it anyway, if std::uncaught_exception is acting up, Catch already runs into larger problem than incorrect info message handling.. You should explain the toggle in docs/configuration.md, but generally looks it looks good.\nI'll fix-up whitespace and fmt later.. It's in and I have to say, I honestly can't wait till Catch Classic is put into legacy mode, there is way too many C++11 toggles to test properly.\n. I tested this out and I am probably going to merge this in, but I am not sure why it requires tags, even though it does not use them.. @amigo421 My problem with requiring tags (as opposed to optionally using them) is that for example in my current project we have almost no tags and instead we use Catch's -# option to run tests in individual test files.\nIf the script used them when they are present, but did not require them, I would be much happier with merging it.. No, I just needed to find some free time to test the changes. It is now in, in contrib/, because scripts/ is meant for development scripts.. @amigo421 You should open up a new PR for the changes. Otherwise it looks reasonable.. I haven't had time to keep up properly and the exact ADL rules tend to make me cross-eyed :smile:\nAnyway, I think that explicitly pulling in global operator<< before performing the ADL lookup is preferable to poluting global namespace with weirdly named function, and should have the same results.\n~~There would still be issues in Catch with ADL calls, IIRC toString is usually called qualified as Catch::toString, even in places where it is supposed to be a customization point, but that can be solved later.~~ Its actually even worse than I remember, but I should be able to get it fixed for the C++14 version, as it will break ton of things anyway.. I spent some time digging through various stringification issues and I believe that they need to be fixed in Catch 2, with larger rework of the stringification layer.. This will now work in Catch2, if you declare the operator<< overload before including catch header. Theoretically it would be possible to make it work even when the overload is declared after including catch header, but not while supporting MSVC (or at least I was unable to find a workaround, that compiles).. Tested this against the released Catch 2, and the results are as above. It works, but operator<< overload needs to be declared before including catch.hpp.. This is interesting, I stepped into the REQUIRE and by the time SourceLineInfo is constructed, we already receive line 8 as line info.\nEven more interestingly, if I change test2.cpp to this\n```cpp\ninclude \"catch.hpp\"\ninclude \nTEST_CASE(\"test2\", \"\") {\n    std::cout << LINE << '\\n';\n    REQUIRE(1 == 2);\n}\nI get this output\n8\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCatchWork.exe is a Catch v1.8.2 host application.\nRun with -? for options\n\ntest2\nc:\\users\\xarn\\documents\\github\\catchwork\\catchwork\\test2.cpp(5)\n...............................................................................\nc:\\users\\xarn\\documents\\github\\catchwork\\catchwork\\test2.cpp(9): FAILED:\n  REQUIRE( 1 == 2 )\n``\nwhich suggests, that somehowTEST_CASE` increases the line count generated by compiler.\nHowever, when I add yet another test case to the file, it works as expected, that is, it prints out the proper line numbers:\n```cpp\ninclude \"catch.hpp\"\ninclude \nTEST_CASE(\"test2\") {\n    std::cout << LINE << '\\n';\n    REQUIRE(1 == 2);\n}\nTEST_CASE(\"test3\") {\n    std::cout << LINE << '\\n';\n    REQUIRE(1 == 2);\n}\n```\n```\n8\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCatchWork.exe is a Catch v1.8.2 host application.\nRun with -? for options\n\ntest2\nc:\\users\\xarn\\documents\\github\\catchwork\\catchwork\\test2.cpp(5)\n...............................................................................\nc:\\users\\xarn\\documents\\github\\catchwork\\catchwork\\test2.cpp(9): FAILED:\n  REQUIRE( 1 == 2 )\n11\ntest3\nc:\\users\\xarn\\documents\\github\\catchwork\\catchwork\\test2.cpp(10)\n...............................................................................\nc:\\users\\xarn\\documents\\github\\catchwork\\catchwork\\test2.cpp(12): FAILED:\n  REQUIRE( 1 == 2 )\n```. So I got back around to this and I found an interesting thing. This bug does not manifest itself when compiling tests in release mode.\nI opened a Microsoft Connect bug (goddamn, that is the worst bug reporting experience I've had, its like they don't want people to report bugs) and will see where it goes from here.. As an update, the issue is \"under investigation\", so... who knows.. What exactly is the problem?\nIf you are saving the single-include header inside your repository, you can just use it the way you would use any other header file, or you can do it like in the linked answer...\nJust make the CATCH_INCLUDE_DIR point to wherever you have the catch.hpp\n```cmake\ncmake_minimum_required(VERSION 3.0)\nproject(cmake_test)\nPrepare \"Catch\" library for other executables\nset(CATCH_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/catch)\nadd_library(Catch INTERFACE)\ntarget_include_directories(Catch INTERFACE ${CATCH_INCLUDE_DIR})\nMake test executable\nset(TEST_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp)\nadd_executable(tests ${TEST_SOURCES})\ntarget_link_libraries(tests Catch)\n. @johnthagen I will see about improving the documentation a bit. Obviously we don't want to substitute for CMake documentation, but maybe it would be valuable.. While I am not against making the documentation more explicit about how the logging macros are scoped, the proposed change is not actually true. Consider this naive testcpp\nTEST_CASE(\"test1\") {\n    for (int i = 0; i < 10; ++i) {\n        INFO(\"The number is \" << i);\n        REQUIRE(i == 0);\n    }\n}\nthe `INFO` macro is used in a loop, but the message is printed just as expected, because the macro is still in scope when an assertion fails.. Still not quite. They are scoped, which means that the assertion has to be in same or deeper scope, see these:cpp\nTEST_CASE(\"Foo\") {\n    INFO(\"Test case start\");\n    for (int i = 0; i < 2; ++i) {\n        INFO(\"The number is \" << i);\n        CHECK(i == 0);\n    }\n}\nTEST_CASE(\"Bar\") {\n    INFO(\"Test case start\");\n    for (int i = 0; i < 2; ++i) {\n        INFO(\"The number is \" << i);\n        CHECK(i == i);\n    }\n    CHECK(false);\n}\nIn the first case, when the `CHECK` fails, two messages will be printed:\n  Test case start\n  The number is 1\n```\nIn the second case, when the CHECK(false) fails, INFO(\"The number is \" << i); is no longer in scope and won't be printed, so the output will be \nTest case start\n. I am going to close this PR, but add the above example to the documentation to explain it better.. Well, that was an embarrassing mistake. The underlying cause was that to prevent double reporting of exceptions when using CATCH_CONFIG_FAST_COMPILE, unexpected exceptions had to be ignored under certain conditions. Due to a mistake on my part, when CATCH_CONFIG_FAST_COMPILE was not defined, all exceptions were ignored...\nI am going to tag this with a revisit, because I need to take a look at why this didn't show up in Catch's self-test, but 1.9.1 is out and it should be fixed.. I figured out why it didn't show up -- Phil approved the differences caused by the bug by mistake in 250f0ee7fbda0268cd91f2411236a923b44fbe39.... This is ~likely~ caused by how -d yes is handled.. I spent some time thinking about this, then suddenly got really busy and couldn't respond.\nThe reason why this wasn't a no-brainer change was that it isn't quite so simple as to add a float overload for the function, because that would trigger compile-time error for code like Approx(2).margin(2). The solution that we are using is to add a templated overload, that uses SFINAE to only work with types that can be converted to double.\nNow, for Approx::margin this isn't semantically problematic, as Approx(temperature(72)).margin(temperature(2)), makes perfect sense.  However for Approx::epsilon the situation is not quite so clear-cut, as Approx(temperature(72)).epsilon(temperature(0.001)) does not make semantic sense.\nThis could be solved in two ways.\n1) Specifically make Approx::epsilon only accept floating point types (using std::is_floating_point).\n2) Damn the semantics, make Approx::epsilon accept anything.\nPersonally I like the second option better.\nThere is also Approx::scale, but I don't think anybody is actually using that one.. After discussion with Phil, I decided to go with option 2.. The error is caused by the fact that your specific C lib does not conform to current POSIX specification.\nShort term fix, define CATCH_CONFIG_NO_POSIX_SIGNALS in at least the implementation file (the one where you define CATCH_CONFIG_MAIN or CATCH_CONFIG_RUNNER). Long term, I will end up disabling it for QNX by default as well.. @RPGillespie6 If you can guarantee that your own config is always last N arguments, you can just set last N argv indices to nullptr and decrease argc by N, which is relatively painless.. You are welcome. I am going to test and merge it tomorrow.\nIn the meantime, if you don't mind, I am going to give you a bit of advice for better PRs. Seeing how this is a follow-up on the previous PR, you should note the reason for this one, but there is no need to copy verbatim the body of the previous one. IE, this one should be something along the lines of:\n\nThis is a followup for #879, where I added a CMake script that can parse out Catch TEST_CASEs and register them in ctest. However, it does not recognize TEST_CASE macros where the opening brace is on a separate line.\nThis PR fixes this.\n\nand that is it.. Thanks, I renamed the license file so Github sees it and didn't think it was actually linked-to from anywhere.. Thanks, the CATCH_* prefixed macros are very rarely used and this kind of thing can happen...\nInterestingly, when I was looking through this, I found another error:\nINTERNAL_CATCH_MSG also ended up with two different version for variadic and non variadic macros, but they do not match-up with their usage.\n```cpp\n///////////////////////////////////////////////////////////////////////////////\nifdef CATCH_CONFIG_VARIADIC_MACROS\n#define INTERNAL_CATCH_MSG( macroName, messageType, resultDisposition, ... ) \\\n    do { \\\n        Catch::ResultBuilder __catchResult( macroName, CATCH_INTERNAL_LINEINFO, \"\", resultDisposition ); \\\n        __catchResult << __VA_ARGS__ + ::Catch::StreamEndStop(); \\\n        __catchResult.captureResult( messageType ); \\\n        INTERNAL_CATCH_REACT( __catchResult ) \\\n    } while( Catch::alwaysFalse() )\n\nelse\n#define INTERNAL_CATCH_MSG( messageType, resultDisposition, macroName, log ) \\\n    do { \\\n        Catch::ResultBuilder __catchResult( macroName, CATCH_INTERNAL_LINEINFO, \"\", resultDisposition ); \\\n        __catchResult << log + ::Catch::StreamEndStop(); \\\n        __catchResult.captureResult( messageType ); \\\n        INTERNAL_CATCH_REACT( __catchResult ) \\\n    } while( Catch::alwaysFalse() )\n\nendif\n```. Do you mean Catch's own selftests?. While I still think that either getting the single-include directly, or vendoring it, is the better option, especially if you are using tagged version and don't want automatic update, there is no reason not to support this.\nAnyway, just sticking if (!NO_SELFTEST) and endif() around defining the SelfTest and Benchmark targets should be enough, correct?\n. Is ASan supported under Windows? Last time I checked, it was \"this will very likely work for C, C++ is very much beta\".. Do you have properly instrumented libstdc++?\nBecause this is very, very, very likely to be a duplicate of #731 and #831, which were both FP caused by MSan not playing nice with standard libstdc++.. This is likely to be helpful to someone, thanks.. This should be fixed in master (commit 5ffc8a84cda91b5da037a923480236450f7f4586) but it hasn't gotten into official release yet.. It took me longer than I expected to get around making a new release, but it is out.\nCan you check whether 1.9.4 fixed this issue for you?. I not against the change, but I have to ask what is the intended benefits of these changes? Catch will not be able to work with utf-8 encoded arguments anyway (well, not at this point) and tests should be able to have UNICODE defined regardless of the entry point.\nIs there anything else that also changes when wmain is used as entry point?. I took another look and if you add proper configurations to AppVeyor, Ill merge it in.\nIf we add proper utf-8 support to Catch we might to go back and add error checking for invalid conversion, but right now non-ascii character set might break things anyway, no need for malformed utf.. There are none that I know of, but if you create one I'd definitely add it to the contrib part of repo.. You should be able to inherit from the existing XML reporter, override whichever method you want to change and then register the new reporter (see any of the existing reporter to see how).\nDepending on what you want to change, this might be a bit of work, as the XML reporter wasn't really designed to be easily customized, but at worst you will have to do some copy pasting.. Catch currently uses exceptions internally and that is unlikely to change, so test failures would have to abort the whole binary. I don't think that would be a good idea.. Thanks. I think the original idea was to have listeners in Catch's namespace, and then not all parts were changed.. At this moment pretty much anything is allowed, as long as it is between [ and ]. Whether this is good idea is open to question.\nI'll see about make the documentation more specific.. This is caused by combination of\n1) MS for some unholy reason defining min and max macros\n2) Precompiled headers\n3) C++ header inclusion model\nBasically, if you are including catch after stdafx.h, by the time Catch attempts to include Windows' system headers, they were already included without NOMINMAX being defined and thus the min and max macros are already polluting the global namespace.\nNow, if you add NOMINMAX definition before including stdafx.h, it still won't work and MSVC tells you as much:\n1> ...\\mfc_testapp\\mfc_testapp.cpp(5): warning C4603: 'NOMINMAX': macro is not defined or definition is different after precompiled header use\n1>  ...\\mfc_testapp\\mfc_testapp.cpp(5): note: Add macro to precompiled header instead of defining here\n1>  ...\\mfc_testapp\\mfc_testapp.cpp(6): note: use of precompiled header\nThe easiest solution is probably to add NOMINMAX macro to stdafx.h.. I wonder why using relative paths is not well defined for EXISTS (I mean its obvious why they could bug out horribly, not why it is not well defined).\nAnyway, the changes look good.\n. At this moment this use case is not supported. Sections are meant to be ran only once and when the test_case function is called the second time, Catch sees that section called \"my nested section\" in file main.cpp at line 6 has already been executed under section (well, test_case) \"my test case\" and skips it.\nWhere it gets interesting is that even when I incorporate the function argument into the SECTION's name (SECTION(\"nested section \" + std::to_string(a)), it won't be run again because tracker thinks that said section is already finished and does not need to be re-run. This might be changed, but the tracking logic is relatively complex and it will take me some time to trawl through it.. Thanks. Thanks.. So if I understand this correctly, you have a test like this\n```cpp\nTEST_CASE(\"Example 1\") {\n    // -- Init --\n    auto foo = 1;\n    REQUIRE(foo == 1);\n// -- More init --\nauto bar = 2;\nREQUIRE(bar == 2);\n\nauto foobar = foo + bar;\nREQUIRE(foobar == 3);\n\n}\nwith this output\n===============================================================================\nAll tests passed (3 assertions in 1 test case)\nand would prefer it to have this output\n===============================================================================\nAll tests passed (1 assertion in 1 test case)\n``\nby using a new macro for theREQUIREs during initialization? This is easy enough if you don't want the expression decomposition to work, as you have found out, but integrating it with Catch leads to some open questions, like \"Should a REQUIRE_INIT count as failed assertion?\" and \"If not, is it reasonable to output \"0 failed assertions, 1 failed test case?\". . I added the link in different part of documentation. This is going to need some more reproduction steps. As it is,CAPTUREandREQUIRE` should have the same behaviour vis-a-vis stringification...\nIs the toString specialization in Catch namespace?. @Gruntfuggly Try including formatters before Catch.\nAlso, we strongly recommend specializing Catch::StringMaker instead, as Catch::toString is legacy and is going away in next major version.. Also what version of Catch are you using? CAPTURE used to work purely by operator<<, switching it over to the same stringification machinery as REQUIRE happened in 1.8.2. Thanks, added.. Have you tried using INFO messages? They are scoped, and only printed when a test fails (or when you ask for everything being printed using -s.\nSee the logging documentation for details.. This makes sense, but I will need to think about good way to expose this to users. Right now, it is up to the reporters to specify whether they want to take care of the stdout/stderr messages by themselves, or to let them print straight to stdout, which means that they aren't prepared to handle suddenly receiving them, if user specified so on the command line.\nHowever, you can make that happen for your right now, by creating your own reporter (or just modifying an existing one), which specifies that it wants std::cout and std::err redirected. To do so, reporter::getPreferences().shouldRedirectStdOut has to be true, the easiest way of doing so is setting it in constructor, after bases are constructed, the way XmlReporter does it:\ncpp\n        XmlReporter( ReporterConfig const& _config )\n        :   StreamingReporterBase( _config ),\n            m_xml(_config.stream()),\n            m_sectionDepth( 0 )\n        {\n            m_reporterPrefs.shouldRedirectStdOut = true;\n        }\nand then handling the redirected output in reporter::testCaseEnded.. This can happen because TEST_CASE's tags are checked for validity and if not, exception is thrown. This is not particularly great when the error happens in statically registered test cases (ie standard usage), but the alternative is to just exit, which is quite a lot worse for users that supply their own main and register test cases dynamically.\nThere is no proper way to fix it in C++98, but since the next major version drops C++98 support, it is fixed* in the dev-modernize branch.\n\nPotential for std::bad_alloc to happen will still be there, there is no good way to get rid of that without serious rework of how test cases are registered. I will have to think about this.\n\nIn general I agree with the changes, but it is not a change that can be done trivially. Both xml and junit reporters are meant to be consumable by outside tools, so changing their output is potentially breaking change.\n. I thought about it a bit more, and decided to do two things:\n1) I am going to merge the changes to the default junit reporter in Catch 2 branch. Since it is a major release, breaking changes are expected and this should be an improvements for most people.\n2) I am going to link this PR from reporter documentation, so other people using Jenkins can make the changes for themselves, until Catch 2 is released.\nI definitely do not want to add another reporter that is included in Catch by default, and single, relatively small, change is probably not worth a stand-alone reporter if it is going to be merged in (hopefully close) future.\n. I don't see the problem?\nIf you want to abort test case on failure, don't use CHECK, use REQUIRE.. That would be an invalid output, because the first failing CHECK isn't in the \"another thing\" section.\nAnyway, the console reporter is a streaming reporter, which means that it works fairly simply -- when an assertion ends, it is notified and takes appropriate action. For console reporter with default settings, this means reporting failing assertion together with its location (which means what test case/sections it is in). Because two assertions fail, two notifications go to stdout, with each one being reporter together with its respective location.\nBasically, this is working as intended, but if you want different output, you can always create your own reporter and if it is interesting enough, it can become part of Catch's repo.. For some reason, lhs's type is not deduced as a pointer to function, but rather the function itself (it deduces to void (void*) and not to void (*) (void*)).\nAn easy fix for now is to manually take address of the function: REQUIRE(&utility::synchronizing_callback == test.testMethod_uponComplete_arg);. The recent rewrite of evaluate layer seems to have fixed this, at least under MSVC (modulo warnings).\nCan you check if 1.10 works for you as well?. I tested it in the meantime, it was not in fact fixed on other compilers. Since fixing this would require a breaking change, it can only happen in Catch 2.. This is weird, because we already have AppVeyor configured to build with MSVC 2017 and /std:c++latest enabled.. @PhoebeHui ~~Sorry, can't reproduce this with an up to date VS 2017, can you give better repro steps?~~\nAh ok.\n@StephanTLavavej Is there a better way of disabling this warning than disabling C4996 for bit? . @StephanTLavavej I would prefer not to bring in even more compile time configuration into Catch Classic, paving over differences from C++98 to C++14 is already painful enough, so I am going to disable the warning for MSVC and tag this with revisit for Catch 2.. That is embarassing, especially since I remember fixing this in different place.. You might want to check out matchers. They are bit of an overkill for simple expressions like in the example, but those should be self-documenting anyway. For more complex tests they let you introduce any amount of logic needed for proper testing and stringification.. This is in both Catch 1 and 2, so I am going to close it.. Sections do not work with for loops ATM. This is actually mostly by design -- it is an accepted consequence of how Catch tracks what sections it has already executed and which are yet to be executed.\nIIRC you can work around this by having the section's name change between iterations (thus making it look like a brand new section), but I am not sure.. I tested this quickly and I am willing to merge it*, but I found what I would consider a bug in the implementation of --extra-info:\nIf I pass only --extra-info option to Catch binary, it behaves as if no arguments were passed (all tests are run). This is different from all other list X commands, and even though it isn't named list-*, I think user would expect it to behave like one (especially since its description says \"list more info\").\n\nI didn't have time to look through the code yet, so standard disclaimers apply.. I decided to make some changes, it is now --list-extra-info and behaves like other --list-* flags, meaning that it lists tests on its own and prevents execution of tests.\n\nAlso improved the CLI description a bit.. It is quite likely the wrong solution, but we had a discussion with Phil and we are willing to merge this in at least temporarily. Routing list outputs through reporters, so they can format the output accordingly, and introducing verbosity levels would be preferred, but I have no idea when that would make it in.. @BMBurstein A preview of Catch v2 should be released relatively soon, but it being preview means that breaking changes might still get in afterwards.\nIf you want to try your hand at making this change, I think you should base your work on dev-modernize.. I like the direction this takes (I did some perf work on Catch in the past, see #781), but a quick test and look at the diff says that you broke reporting for some macros, ie \nREQUIRE_THROWS_WITH( thisThrows(), \"expected exception\" ) is now shown as REQUIRE_THROWS_WITH( thisThrows() ).\nProper way of testing Catch is to build the SelfTest binary and then run scripts/approvalTests.py with the binary, ie ...$ scripts/approvalTests.py build/SelfTest. This will compare output of the new binary against known (hopefully) good output and tell you what has changed.\nHowever, this should be fixable with some extra work.\n. @coombez Our documentation for contributors is pretty bad, so I don't blame you. Just wanted to note that running the test binary by itself is not enough to verify proper output.\nI actually wanted to remove the second argument at some point in the past, but in the end I decided it was not worth the time at that point. You will want to go through the macros in catch_capture.hpp and change them accordingly.. @philsquared The second argument is kind of holdover from some assumption about there being either 1 or 2 arguments to a macro, that is then used to either insert ',' when stringifying the macro, or not.\nNot all macros actually use it, some do the ',' insertion manually, some have more arguments, etc, so it is kinda pointless.\n--- edit ---\nBasically I think we should either make the AssertionInfo variadic in Catch 2 (this would likely murder compilation times though), or get rid of the _secondArg param completely and do the gluing when transitioning between REQUIRE_* and internal macros.. Ill take a look at this on the train, but first one more question: what exactly was your benchmark and is it measured with any optimizations?. Ok, we have something similarly simple as Benchmark binary...\nI will merge this and open a new branch you should check out, it removes the second argument and thus quite a lot of the extra concatenation. It doesn't quite pass approval tests, but it would be fairly simple to fix that and the perf gain might be worthwhile.. Ok, performance gains from dev-second-string-argument-removal should be final for those changes. It will need some massaging to pass approval tests, but those should have no effect on the final runtime performance.\nFurther discussion about where performance could be gained should probably go to the meta issue linked in previous PR.. Yeah, Catch Classic (1.x) is thread unsafe, because C++98 does not provide cross-platform facilities for dealing with threads...\nAnyway, thanks I'll take a look later. I see you figured out the IF issue -- didn't get around replying yesterday after I found it.\nGonna take a look at the last difference.\n\nI looked through it quickly while on train, and the problem is caused by m_lastAssertionInfo in RunContext not being reset properly, I guess because successful assertions are short-circuited when they are not included in output.\nSee catch_run_context.hpp:152 and ExceptionTests.cpp:53 for context on when the error happens.. You can always squash and force push yourself; it will work out.\nAnyway, I am going to say that I like the idea of these changes, but not necessarily the implementation. I don't like how much data and \"smarts\" was pushed back into the interface, so I am going to have to think this over.. Nothing I can see quickly. I want to split out the changes into two commits and refactor it a bit, but it will be couple of days until I have the time.. I slept on this a bit and decided to merge it as is.. Go with HEAD for now. I am enjoying trying to somewhat work off mobile internet throttled back to dial-up speeds (and not even the nice, 56k era) and Phil is also busy for at least a week (and the priority is on Catch 2 anyway).. Thanks. That one is on me I think, I remember trying to expand Approx documentation and having to go figure out what scale is good for.\nApparently after I figured it out, I didn't write it down.. This has been fixed since.. Yes. I am going to close this as resolved.. The reason it works without -std=x is that it defaults to C++98 and those tests are ifdefed away.\nAnyway, for some reason, your particular setup has trouble with std::is_constructible type trait, so that a type with explicit conversion to double returns false, instead of returning true, so the proper overload is SFINAEd away, causing the compile error you see.\nI am phone posting and don't have any Mac, but if @philsquared doesn't get around this before Friday, I'll see what I can do.. Took me a bit longer to get back to this, but please try this bit of code in your env, with c++11 enabled.\n```cpp\ninclude \ninclude \ninclude \nstruct weak_typedef {\n    operator double() const { return 1;}\n};\nstruct strong_typedef {\n    explicit operator double() const { return 2;}\n};\nint main() {\n    std::cout << std::boolalpha;\n    std::cout << std::is_constructible::value << '\\n';\n    std::cout << std::is_constructible::value << '\\n';\n    std::cout << std::is_constructible::value << '\\n';\n}\nThe output should be\ntrue\ntrue\ntrue\n```\n. By my understanding, that means your stdlib is broken and Catch's SelfTest can't build cleanly in C++11 (or newer) mode.\nIs there a reason you need to build it? Because Catch itself should still work, just missing a feature.. You can also delete the last TEST_CASE in projects/SelfTest/ApproxTests.cpp, but if you want to use the library, I would generally recommend playing around with your own tests, rather than with our selftest. The SelfTest project and scripts around it are meant for further development of Catch.. As to the question in your first commit, IIRC the text formatting library is textflowcpp.\nAlso, I don't think that Catch should throw (and thus usually abort) when a reporter doesn't support requested verbosity level, but rather I'd expect it to take \"closest\" (for given values of closest).. Fair, but the other side of coin is that any time a new verbosity level is added, either the existing reporters (at least the ones bundled by default) need to be modified to support it as well, or we could end up with weird patchwork of supported verbosities.\nAnyway, I am not saying that it has to be that way, just wanted to note that there are arguments against as well.. This should now be properly merged (including fixing the merge after myself). AFAICS only repository owner can do this, so I assigned this to @philsquared . AFAICS only repository owner can do this, so I assigned this to @philsquared . The third one I assume is from the single-include header, so it is a duplicate of second one.\nAnyway, second one is bogus, it is hidden away in a function, but that function is called from inside a catch block, so the throw; just rethrows currently handled exception.\nThe first one is harmless as well, but there is no harm in silencing the warning by initializing it in the constructor as well.. The current implementation only accepts values that are off by less than margin.\nI can see how that is not reflected by the docs, and having the margin be inclusive is likely a better idea, but it could be a breaking change, so we will need some time to decide.. I am consolidating the Approx issues into one, #980.. I am consolidating the Approx issues into one, #980.. We catch by whatever type we are given, user can choose to have Catch capture by const& just by writing it that way.\nWe actually had it using TMP to ensure the type is properly const&-ed no matter what, but that broke people who used the macros inside a templated function, and couldn't be fixed in C++98 (IIRC it was because typename cannot be used in plain old function and without it, it didn't work in templated functions).\nThis rule was changed in C++11, so we can do it without breaking people who used it correctly, but that would mean using type traits in the common include path, which is... unfortunate.. Since most people seem to use this wrong, I've decided to change this for Catch 2.. I assume you are doing something like this\ncpp\nAClass ac;\nREQUIRE(ac);\nthis fails, because at some point between 1.9.3 and 1.9.6 we changed how truthy expressions are stringified. Now, instead of printing \"true\" or \"false\", depending on what the truthy expression evaluated to, the expression is stringified as normal. \nThis causes error because Catch checks whether your class can be streamed to std::ostream, and during this check, the implicit conversion operator is found and overload resolution explodes. There is however an easy solution: provide properly matching overload of operator<<.\ncpp\nstd::ostream& operator<<(std::ostream& out, AClass) {\n    // This can be left empty if you don't care\n    return out;\n}\n. Passing notes from looking through this:\nCppCheck and Resharper seem to run into trouble with how Catch-1 is structured. Hopefully they would do better with Catch 2, where implementations are split out into .cpp files, but going through them like this is kinda painful.\nResharper loves to say \"use this c++11 feature in your C++98 codebase\". Ironically, when Catch is properly configured to support C++11, some of these (overrides, noexcepts) are already used.\nActionable finds:\nCppCheck\n..\\..\\..\\..\\..\\..\\Local\\Project\\_GitHub\\Catch\\single_include\\catch.hpp|500|copyCtorAndEqOperator : style : The class 'NotImplementedException' has 'copy constructor' but lack of 'operator='.|\n..\\..\\..\\..\\..\\..\\Local\\Project\\_GitHub\\Catch\\single_include\\catch.hpp|2528|copyCtorAndEqOperator : style : The class 'CompositeGenerator' has 'copy constructor' but lack of 'operator='.|\n..\\..\\..\\..\\..\\..\\Local\\Project\\_GitHub\\Catch\\single_include\\catch.hpp|2770|copyCtorAndEqOperator : style : The class 'Approx' has 'copy constructor' but lack of 'operator='.|\nDeleted the constructors for Approx and NotImplementedException. Neither of those would cause a problem, because the default generated operator= would do the right thing, but there is no reason to keep them explicitly. CompositeGenerator has move semantics in copy constructor going on and no operator=, which is weird, but generators are a very vestigial part of Catch 1 (never documented or officially supported) and their current implementation is gone in Catch 2, so I am not touching that.\nI didn't go through all the \"never used\" warnings, because I know that some of them are used, so it is likely more false positives.\nPVS Studio\nV817 It is more efficient to seek '.' character rather than a string. SelfTest catch_session.hpp 98\nNo reason not to fix this. The others are things that we might want to suppress in the future, but basically false positives. (The throw warning is caused by indirection that it doesn't quite see through, the pointer cast is necessary evil for REQUIRE( ptr == NULL ) to work).\nResharper-C++\nGoes completely crazy in face of obj-c. Used it to get rid of superfluous inlines in Catch 1 (did so in Catch 2 some time ago) and otherwise skipped it, as already mentioned it loves to say \"use auto in C++98 codebase\", so there is too much reported.\nCore Guidelines\nSkipped for now.\n\nAll in all, relatively useful but would probably work better against Catch 2, so some of the tools wouldn't be horribly confused by Catch being implemented in headers only, and so all the \"use override, auto, constexpr\" would be actionable (and also wouldn't be used in places where they already are used hidden in macro).\nFixed couple problems, going to fix couple more*\n\nCatch is currently Valgrind and sanitizer clean, so the uninitialized variable warnings are not real bugs, but I would prefer them not to be there. However I am going to need some time to decide how to best tackle them.\n\n. @martinmoene If the warnings were pared down a bit, it would be much nicer to work with (and also have better chance to be fully addressed).\nAnd yeah, due to how Catch 1 is written, there are non-inline function bodies in headers all over, and this won't change until Catch 2, where we are separating non-template definitions into .cpp files (that are then also stitched into the single-header version, so running the analysis over that would still find them in error).\n. Locally only. If you feel like making change to Travis to also run SelfTest under Valgrind/Sanitizers, it would be most welcome.. Went through PVS-Studio:\nV690 The '=' operator is declared as private in the 'MatcherUntypedBase' class, but the default copy constructor will still be generated by compiler. It is dangerous to use such a class. SelfTest catch_matchers.hpp 23\nV690 The 'ExpressionLhs' class implements the '=' operator, but lacks a copy constructor. It is dangerous to use such a class. SelfTest catch_expression_lhs.hpp 26\nV690 The 'BinaryExpression' class implements the '=' operator, but lacks a copy constructor. It is dangerous to use such a class. SelfTest catch_expression_lhs.hpp 105\nThis is intentional, copy assignment is disabled and the default copy constructor works properly. Hopefully explicitly deleting operator= and defaulting the copy constructor makes this go away.\nV690 The '=' operator is declared as private in the 'AssertionPrinter' class, but the default copy constructor will still be generated by compiler. It is dangerous to use such a class. SelfTest catch_reporter_compact.cpp 70\nV690 The '=' operator is declared as private in the 'AssertionPrinter' class, but the default copy constructor will still be generated by compiler. It is dangerous to use such a class. SelfTest catch_reporter_console.cpp 99\nV690 The '=' operator is declared as private in the 'AssertionPrinter' class, but the default copy constructor will still be generated by compiler. It is dangerous to use such a class. SelfTest catch_reporter_tap.hpp 63\nI ended up explicitly forbidding both, there is no reason to copy construct it either.\nV690 The 'Colour' class implements a copy constructor, but lacks the '=' operator. It is dangerous to use such a class. SelfTest catch_console_colour.hpp 15\nSince this is a scope guard kinda class, I deleted copy constructor and implemented move constructor/assignment instead (interestingly, they aren't used anywhere anyway).\nV690 The 'ScopedMessage' class implements a copy constructor, but lacks the '=' operator. It is dangerous to use such a class. SelfTest catch_message.h 49\nDeleted explicit copy constructor, the compiler generated one works fine.\nV524 It is odd that the body of 'compare' function is fully equivalent to the body of 'applyEvaluator' function. SelfTest catch_evaluate.hpp 98\nGoing to pass this one over, the entire evaluator layer is bit of a mess.\nV730 Not all members of a class are initialized inside the constructor. Consider inspecting: macroName, capturedExpression, resultDisposition. SelfTest catch_assertionresult.h 43\nI think this is some weird false positive, macroName defaults to nullptr and the default constructor should initialize it that way. The exception is resultDisposition, which should now be properly initialized in the default constructor. Non default constructor also looks correct.\nV730 Not all members of a class are initialized inside the constructor. Consider inspecting: m_mode, m_exclusion, m_start, m_pos. SelfTest catch_test_spec_parser.hpp 33\nThese now have default values.\nV690 The 'ScopedElement' class implements a copy constructor, but lacks the '=' operator. It is dangerous to use such a class. SelfTest catch_xmlwriter.hpp 83\nAgain, scope guard kinda class, implemented both moves and removed copy constructor.\nV690 The 'NotImplementedException' class implements a copy constructor, but lacks the '=' operator. It is dangerous to use such a class. SelfTest catch_notimplemented_exception.h 15\nDeleted explicit copy constructor, the compiler generated one works fine.\nV690 The '=' operator is declared as private in the 'Version' class, but the default copy constructor will still be generated by compiler. It is dangerous to use such a class. SelfTest catch_version.h 16\nI ended up explicitly deleting both copy operations, there is no reason to copy version around.\nV667 The 'throw' operator does not possess any arguments and is not situated within the 'catch' block. SelfTest catch_exception_translator_registry.cpp 59\nThis will have to be explicitly disabled as FP.\nV565 An empty exception handler. Silent suppression of exceptions can hide the presence of bugs in source code during testing. SelfTest catch_run_context.cpp 238\nThis is also likely going to end up explicitly disabled as FP.\n???? V601 The result of '-' operator is implicitly cast to the bool type. Inspect the second argument. SelfTest catch_reporter_junit.cpp 109\nI have absolutely no idea what this one is trying to say.\n. @martinmoene \nAre you using latest PVS Studio? Because if so, this might actually be worth reporting as a bug:\nV690 The 'Colour' class implements the '=' operator, but lacks a copy constructor. It is dangerous to use such a class. SelfTest catch_console_colour.hpp 15\nV690 The 'ScopedElement' class implements the '=' operator, but lacks a copy constructor. It is dangerous to use such a class. SelfTest catch_xmlwriter.hpp 37\nColour implements move assignment operator and move constructor. This disables autogeneration of copy operations and thus this is completely bogus. It also might not be a bug, just limitation of their parser, because these 2 are also fun and proper code model should not hit them:\nV803 Decreased performance. In case 'm_refs' is iterator it's more effective to use prefix form of increment. Replace iterator++ with ++iterator. SelfTest catch_stringdata.h 33\nV803 Decreased performance. In case 'm_refs' is iterator it's more effective to use prefix form of decrement. Replace iterator-- with --iterator. SelfTest catch_stringdata.h 38\n(they are atomic unsigned ints).\nAnyway, I think I addressed those that are part of Catch (not Clara) and aren't just a FP. I don't want to start marking up Catch's code with suppressions for all different static analyzers just yet.\nTo not be completely down on PVS, I actually liked some of the warnings like V820 (variable is unused after being copied, consider move), it just goes dumb bit too much for my liking.. I am also going through Resharper's results and there is one I don't understand:\n..\\include\\internal\\catch_run_context.cpp:31 Call to a virtual function inside a destructor will be statically resolved\nAFAIK this is true for calls to that object's virtual functions, not for all virtual functions, making this a false positive, because the call is to a virtual function of a member variable.\nAnyway, I went through all of them, addressed real issues and added override where it was missing. However, the result of this will be ton of warnings redundant virtual keywords, as I left these in (personally I prefer them to be present, not sure what Catch as a project will settle on).\nI didn't add all suggested consts, because I don't think marking function that changes global state, just not state of given object as const, or goes through holes in the type system, is a good idea.\nAlso left in these two, because they are supposed to work that way IIRC.\n..\\include\\internal\\catch_matchers.hpp:37 Polymorphic struct 'Catch::Matchers::Impl::MatcherMethod<ObjectT>' has a non-virtual public destructor\n..\\include\\internal\\catch_matchers.hpp:41 Polymorphic struct 'Catch::Matchers::Impl::MatcherMethod<PtrT*>' has a non-virtual public destructor. I went through the VC cppcorecheck briefly, but I don't think it is quite ready for production yet:\nreporters\\catch_reporter_junit.cpp(26): warning C26496: Variable 'timeStampSize' is assigned only once, mark it as const. \nreporters\\catch_reporter_bases.cpp(28): warning C26496: Variable 'maxDoubleSize' is assigned only once, mark it as const.\nthe referred to places:\nconst size_t timeStampSize = sizeof(\"2017-01-16T17:06:45Z\");\nconst size_t maxDoubleSize = DBL_MAX_10_EXP + 1 + 1 + 3 + 1;\nSome of the other reports are obviously true (Catch codebase isn't exactly const-nazi about variables in functions), but this doesn't fill me with great confidence.\nSome of the reports I couldn't find at all:\nreporters\\catch_reporter_compact.cpp(39): warning C26493: Don't use C-style casts that would perform a static_cast downcast, const_cast, or reinterpret_cast. \nreporters\\catch_reporter_console.cpp(38): warning C26493: Don't use C-style casts that would perform a static_cast downcast, const_cast, or reinterpret_cast. \n... many others I tried\nAnd even when it isn't wrong, some of the messages are downright cryptic:\nreporters\\catch_reporter_bases.cpp(38): warning C26485: Expression 'buffer': No array to pointer decay.\n...\nAll in all, I am going to ignore cppcorecheck reports and close this issue.\n. Definitely a bug, there is nothing in the JUnit spec saying that dynamically created sections shouldn't be reported. I am consolidating the Approx issues into one, #980.. Thanks. Why is it preferred? I took a quick look at the linked answer, but as far as I can see, it just says that it works.. I think I will pass then. I want to say that -Werror together with full warnings is unsupported, but at least -Wall -Wextra should be ok.\n. Quick guess: catch_platform.h gets processed before system header that defines NOMINMAX, and then our windows.h proxy defines NOMINMAX as well, because catch_platform.h says so.. I am fairly sure that the redefinition problem is fixed now. Specific warnings levels and Werror should go in a separate issue.\n. I am fairly sure you have wrong Catch version there \ud83d\ude09 \nAnyway, the underlying reason is that Catch 1 uses specified type verbatim, so to catch by const& you have to specify exception type with const&, like so\n```cpp\ninclude \"catch.hpp\"\ninclude \ninclude \nTEST_CASE(\"foo\") {\n  std::vector vec;\n  CHECK_THROWS_AS(vec.at(42), std::out_of_range const&);\n}\n```\nIn Catch 2, we will be adding the const& unconditionally, because it seems to be catching many people off-guard. See #955 for details.. Took me a while to see the difference.\nAnyway, this is something that I think GitHub should provide out of the box, but since that is not the case at this moment, feel free to submit a PR. However, I would prefer a script that does this automatically, instead of having it remain manual work.. Since the PR was merged, I am going to close this.. I really don't want to do this manually, GitHub's markdown doesn't support generating ToC and most solutions I saw started like \"install node.js\" which for me is a no go.. Yeah, our formatting isn't really consistent across files.. Definitely, but without ToC present, the inconsistency wasn't too noticeable and I was content to keep formatting consistent inside a page, rather than redo the documentation in the same style.. Page titles should be level 1 and should be only 1 per page. I see three offenders that need fixing. Of those, I would give exception to the release notes, where I would like to have a structure like\n```\n\nOlder releases\nv1.9.7\nv1.9.6\nv1.9.5\n...\nThere might be some value in grouping the older releases by major/minor/patch (and giving these progressively lower levels), like\nv1.9.x\nv1.9.7\nv1.9.6\n...\nv1.9.0\nv1.8.x\n...\n```\nAs far as ToCs are concerned, after thinking about them for a bit longer, they should be easy enough to create using some Python. The real question is, how deep should they go (all levels, versus 2 levels, versus ...) and when is the page long enough for one. Starting with pages with 4 sections seems good enough for now.. Can you also open a PR to commit the modified script to Catch?. Including, preferably it would be as easy to use as fixWhitespace.py, which runs automatically over all files in the repository.. Add them to the current PR. Feel free to rebase and force push to clean it up as you want.. Feel free to make further changes, I won't be able to review it for some time.. This is in. Travis recently changed something that broke Clang in C++14 mode.. I got around to looking through this and there are 2 problems that should be fixed before it is merged\n1) Only [!hide] is supported when hiding tests, but as far as I know, using it is rather rare. Much more common is using the short form of [.] and combined variation [.foo].\n2) There is a summary of the function at the top, it should be updated with new options.. A quick test says it works correctly now, so I am going to merge it. Thanks for the PR.. We don't want to place more things into global namespace without user's request, so it is intended, but I agree that it should be said so in the documentation.\nIt might be a while until I get around to fixing it, but you are welcome to submit a PR.. Can you provide example which breaks the generated XML? Because I don't see it (using Catch v1.9.3)\n```\nxarn@DESKTOP-B2A3CNC:~$ cat test.cpp\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\ninclude \nTEST_CASE(\"abcd\") {\n    std::cout << \"Lets break XML!: < > ' & >\\n\" << '\"';\n    REQUIRE(1 + 1 + 1 == 2 + 1);\n}\n\nxarn@DESKTOP-B2A3CNC:~$ clang++ test.cpp && ./a.out -r junit\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\n\n\nLets break XML!: < > ' & >\n\"\n      \n\n\nLets break XML!: < > ' & >\n\"\n    \n\n\n\n\nxarn@DESKTOP-B2A3CNC:~$ clang++ test.cpp && ./a.out -r xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\n\n\n\nLets break XML!: < > ' & >\n\"\n        \n\n\n\n\n\n\n```\nBoth outputs are properly escaped XMLs according to random online validator.. Its ok. The first we might do, but as to the second I think you should look for an external tooling (think sort and take).. I see you already answered your own question.\nYeah, generally Reporters can do a lot, if you aren't afraid to get your hands dirty and save various information passed to them.. Looks good enough to me.\nOut of curiosity, does your compiler support C++11?. I'll test how the different colours would look later, but\n\nAlso, it took me a while to understand that there are no colors when a debugger is active. I found --use-color, but I don't understand why color and the debugger could harm each other. Could you please explain this briefly?\n\nYou are not the first one to ask this, see #590. Looking through that and performing a cursory google search says that some debug consoles (in IDEs and stuff) can run into trouble with escape codes.\nI actually disabled that check for Catch 2 and it is likely to stay disabled (users with trouble can run catch with --use-colour no).\n. Thanks, and sorry for the long wait. The issue kinda slipped my mind and the backlog is still huge.. The three issues that initially prompted making this issue will be fixed in Catch 2, by making default scale 0 and making epsilon only apply to Approx's value, rather than to larger of the two values (which is computationally correct, but misleading when used in class context).\nI also fixed INFINITY == Approx(INFINITY) by changing how margins are compared.\nWe are planning to provide an ULP-based matcher at some point, but that is still in the future.. The evaluate change is part of the latest release, so I am going to close this issue.. This is why we can't have nice things. Looks good enough. There are couple requests for the old INFO behaviour to come back (perhaps as UNSCOPED_INFO ?), so it might eventually get in. For now and for your usecase I recommend an alternative solution: Sink all logs to std::cerr (Catch 1.9.6 doesn't properly redirect std::clog) and modify your favourite reporter to request std stream redirection (see the junit and xml reporters for examples). This should give you the desired behaviour.. Yes, current master properly redirects std::clog writes.\nIIRC you need to implement IStreamingReporter, but we provide two basic reporter bases to provide common bookkeeping - CumulativeReporterBase, used by junit and StreamingReporterBase used by the other reporters. CumulativeReporterBase is meant to be used by reporters that need global(ish) view of results before writing and StreamingReporterBase is meant to be used by reporters that can write output as soon as an assertion ends.. Actually I think all you need to do is to take your favourite reporter and enable iostream redirection if it isn't (so if you are using compact reporter, you need to enable it, if you are using xml reporter, it already is) and make your logging adapter write to std::clog/std::cout.. Ok, consider the following test file as an example\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\ninclude \nTEST_CASE(\"Foo\") {\n    std::cout << \"This is cout\\n\";\n    std::cerr << \"Inter\";\n    std::clog << \"leaved\";\n    std::cerr << ' ';\n    std::clog << \"input\\n\";\n    REQUIRE(1 == 1);\n}\nTEST_CASE(\"Bar\") {\n    std::cout << \"Write to cout\\n\";\n    std::cerr << \"And this is a write to cerr\\n\";\n    REQUIRE(1 == 2);\n}\n```\nAnd this modified console reporter\n```\n$ git diff include/reporters/catch_reporter_console.hpp\ndiff --git a/include/reporters/catch_reporter_console.hpp b/include/reporters/catch_reporter_console.hpp\nindex 5f18124..b0ba6e5 100644\n--- a/include/reporters/catch_reporter_console.hpp\n+++ b/include/reporters/catch_reporter_console.hpp\n@@ -23,7 +23,9 @@ namespace Catch {\n         ConsoleReporter( ReporterConfig const& _config )\n         :   StreamingReporterBase( _config ),\n             m_headerPrinted( false )\n-        {}\n+        {\n+            m_reporterPrefs.shouldRedirectStdOut = true;\n+        }\n     virtual ~ConsoleReporter() CATCH_OVERRIDE;\n     static std::string getDescription() {\n\n@@ -80,6 +82,17 @@ namespace Catch {\n         virtual void testCaseEnded( TestCaseStats const& _testCaseStats ) CATCH_OVERRIDE {\n             StreamingReporterBase::testCaseEnded( _testCaseStats );\n             m_headerPrinted = false;\n+            // Skip printing outputting on passed test cases\n+            if (_testCaseStats.totals.assertions.allOk()) {\n+                return;\n+            }\n+\n+            if (!_testCaseStats.stdOut.empty()) {\n+                Catch::cout() << _testCaseStats.stdOut;\n+            }\n+            if (!_testCaseStats.stdErr.empty()) {\n+                Catch::clog() << _testCaseStats.stdErr;\n+            }\n         }\n         virtual void testGroupEnded( TestGroupStats const& _testGroupStats ) CATCH_OVERRIDE {\n             if( currentGroupInfo.used ) {\n```\nwhen I compile the test file against my modified catch and run it, I get the following output\n```\n$ clang++ redir-test.cpp && ./a.out\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\na.out is a Catch v1.9.6 host application.\nRun with -? for options\n\nBar\nredir-test.cpp:15\n...............................................................................\nredir-test.cpp:18: FAILED:\n  REQUIRE( 1 == 2 )\nWrite to cout\nAnd this is a write to cerr\n===============================================================================\ntest cases: 2 | 1 passed | 1 failed\nassertions: 2 | 1 passed | 1 failed\n```\nNote that the writes for the passing test case is not written out, only for the failing one. If you have std::clog logging sink, the same will happen with your logs.\nObviously this isn't complete solution, for example it has only test case level granularity, instead of assertion level granularity, but it should be a good enough starting point. You could further improve it by abusing Listeners, by storing the logs instead of printing them, and use your own listener to tell your sink to either send the output to standard stream, or dump it entirely.\n. What reporter are you using?. Normally console reporter ignores std streams and lets them go straight to output. My change makes console reporter ask Catch to redirect std streams during test case and then handle them at the end of a test case, specifically don't use them if the whole test case passed and print them if it didnt.\nAs mentioned, it doesn't provide assertion level granularity, but it is a start. Assertion level granularity should be possible by abusing Listener interface. I might be able to provide a small example in the evening.. @ozars \nWe used to have both UNSCOPED_INFO and SCOPED_INFO, but the unscoped version went away at some point, and the support plumbing for it became vestigial and then went away as well.\nIn general, I think that providing full granularity (e.g. separate macros for test case scope, section scope, assertion scope) is not a good idea -- I think that we should just bring back UNSCOPED_* macros where their semantics are that they are valid until either of\n\nTEST_CASE ends\nassertion (REQUIRE, CHECK, ...) happens\n\nand then they are removed.\nFor implementation details, you want to rope in @JoeyGrajciar, because I am taking 2 weeks break.. UNSCOPED_INFO was just added, so this should be done.. This limitation is there to decrease overall compilation times -- currently only the main file contains the listeners interface and it is not compiled in the common case.\nI'll see if I can rearrange things around to allow selectively enabling reporters and listeners interfaces, but for now I recommend cutting out the relevant parts of catch.hpp into your own header.. The fact that there are two error streams in C++ is one of those things that are obvious in hindsight, but you have to think about them first. I have fixed this locally and it will be in master whenever my internet stops acting up and lets me push.. Currently you can't.\nWe definitely intend to change this in the future, but as of now you have to eventually throw everything into the same file.. @rcdailey I am going to quote myself from the last commit\n\nReporter / Listener interfaces\nCATCH_CONFIG_EXTERNAL_INTERFACES  // Brings in neccessary headers for Reporter/Listener implementation\nBrings in various parts of Catch that are required for user defined Reporters and Listeners. This means >that new Reporters and Listeners can be defined in this file as well as in the main file.\nImplied by both CATCH_CONFIG_MAIN and CATCH_CONFIG_RUNNER.\n\nThat is a yes, but only for Catch 2.\n. @rcdailey CATCH_CONFIG_EXTERNAL_INTERFACES does not imply reporters, only reporter interfaces, bases and registrars (and also their transitive dependencies). This was done to keep the macro relatively cheap to enable.\nIf you want your own reporter to inherit from an existing reporter, it still has to go into the main file.\nI could be convinced to include the full reporters in there, but it was mainly intended for codebases that need a lot of relatively simple listeners and not those that need/want to customize the provided reporters.. @rcdailey I ended up separating the 4 provided reporters into headers + impl files and including them as part of external interfaces, so your use case should work now.\nI will also be doing some slimming down of the includes, so unintended* interfaces might be gone soon.\n* Intended interfaces are not quite well defined, but they are the reporter/listener bases, the default reporters and some more soon.. Thanks. You are indeed using it wrong (or rather, our documentation about this issue sucks).\nI won't go into the underlying reason, but to fix you have to make the SECTIONs different for each iteration. The best way is to incorporate the loop's counter into SECTION's name, like so:\ncpp\nTEST_CASE( \"...\" ) {\n    for (int i = 0; i < 5; ++i) {\n        SECTION(\"FooBarBaz\" + std::to_string(i)) {\n            // ...\n        }\n    }\n}. Our stitching script strikes again! For some background, if CATCH_CONFIG_FAST_COMPILE is defined, quite a lot of code is ifdefed away from the file, including all of CATCH_PLATFORM_*.\nThe problem is, that each Catch header is stitched-in only once, so when later code depends on the catch_platform.h include, it is still ifdefed away.\nThis should be easy enough to fix though.. We did some restructuring of how includes and stitching work, so this shouldn't happen again.. What version of VS are you using? 15.3.1 or earlier?. The only workaround I can see is to introduce new set of internal macros, that would not record the original expression string. A quick check says that there are 7 of them right now, all of which would need to be duplicated.\nThis is easy enough to do, but the question is if it is worth it, especially since it would need to be opt-in.. No, we would still be able to reconstruct the actual values.\nI have a proof of concept done (see attachment), the output would look like this:\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCatchWork.exe is a Catch v2.0.0-develop.2 host application.\nRun with -? for options\n\ntest\ncatchwork\\test1.cpp(5)\n...............................................................................\ncatchwork\\test1.cpp(7):\nPASSED:\n  REQUIRE( Stringification disabled by DISABLE_STRINGIFY )\nwith expansion:\n  true\ncatchwork\\test1.cpp(8):\nPASSED:\n  CHECK( Stringification disabled by DISABLE_STRINGIFY )\nwith expansion:\n  \"\"\\\" == \"\"\\\"\n===============================================================================\nAll tests passed (2 assertions in 1 test case)\n```\nUsed like this\n```cpp\ndefine CATCH_CONFIG_DISABLE_STRINGIFY\ninclude \"catch.hpp\"\nTEST_CASE(\"test\") {\n    auto test = std::string(R\"(\")\") == \"\\\"\\\";\n    REQUIRE(test);\n    CHECK(std::string(R\"(\")\") == \"\\\"\\\");\n}\n```\ncatch.zip\n. The workaround is part of the new release, so I am going to close this.. Sorry, this is \"won't fix\" for Catch 1 (and already fixed in Catch 2).\nThe error happens on any expression containing commas that are in a place to separate macro arguments (this is why enclosing the expression in parentheses works, it turns the entire expression into single macro argument) and to fix it, variadic macros are required.\nSince variadic macros are not supported on older compilers, it would also require us to keep two sets of all user facing and internal macros, further increasing the number of macros that need to be kept in sync upon changes (to 4 sets: CATCH_ prefixed versus non-prefixed, variadic vs non-variadic).. I think it would be preferable if the cmake script was changed so that it recognizes REGISTER_TEST_CASE macro, which already fulfills very similar function.\nnote: I am phone posting, so I wasn't able to actually test my approach\n. REGISTER_TEST_CASE expects a free function and it is up to the user to call it, METHOD_AS_TEST_CASE expects a method of a class and provides auto registration:\n```cpp\nvoid testFunction() {\n    REQUIRE(1 == 2);\n}\nstruct AutoRegTests {\n    AutoRegTests() {\n        REGISTER_TEST_CASE(testFunction, \"manually registered\", \"[bar]\");\n    }\n};\nAutoRegTests autoreg;\nclass TestClass {\n    std::string s;\npublic:\n    TestClass():s(\"Hello\"){}\n    void testMethod() {\n        REQUIRE( s == \"Hello\" );\n    }\n};\n`METHOD_AS_TEST_CASE(TestClass::testMethod, \"sample test method\", \"[foo]\");\n```\n. No idea, I found out that these macros exist 2 days ago, when I needed to crawl through all Catch-provided macros for a Catch 2 feature...\nLooking at REGISTER_TEST_CASE, it even uses the internal AutoReg object to do the registration, it just doesn't provide it with a unique name, so it cannot be used in global scope... Quick test says that if I change it to provide it with a unique name, the old usage does not break, so I might change that in the (near) future for Catch 2.\n\nAlso, can I call these macros on a header file?\n\nI am going to assume that you mean in a header file. The answer should be yes, but I would not recommend it, as you will have to take care not to register the test case multiple times.. That does look somewhat better. Since the PR has been merged, I am going to close this.. Thanks. LGTM. So if I understand this correctly, either Clang is miscompiling, or we have some edge-case UB that we run into (Clang likes turning undefined behaviour into SIGILLs).\nWhat version of Clang and what settings are you reproducing this with? Is it with multiple versions of Clang or only specific one?. You generally cannot. Any structured exception/signal getting all the way to Catch handler is taken as signal of error and the assertion/section/test case is marked as failed. You might try to see what happen when you define CATCH_CONFIG_NO_POSIX_SIGNALS as that prevents Catch from installing its own signal handlers.\nThere is a greater question though, why are you running tests inside an interactive (I presume because it seems to loop endlessly) application?. Disregard the commit, I wrote down wrong issue number. Well, that is kinda embarassing but at least it is harmless. Thanks.. Looks good to me. @martinmoene Can you squash these into something bit more manageable? Feel free to have detailed commit messages, but I don't think that all of these commits are quite necessary.. @martinmoene Looks good, but one more thing: Catch repository is Boost licenced by default, but by my understanding of GPL this script remains GPLed and the file should say so.. The rewritten decompose + evaluation layer were missing handling of NULL defined as long.. Should be fixed in dev 3 (just released). I am going to close this for the same reason as #1015 (32-bit builder is C++98 non-conforming and not seen as worth supporting). If this is incorrect, please reopen the issue.. I am going to pass this up on @philsquared because ObjC(++) is all Greek to me.. Since this has been \"Wont fix\" for over a month, I am going to close it.. Catch obviously needs some stack space as well* and your code is just at the threshold where your code' stack size < stack capacity but your code's stack + Catch's stack size > stack capacity.\n* Quite a lot on Windows actually, as handling SO on Windows can only be done on the stack, so we reserve ~32k there to handle SO in.. Looks reasonable enough, but I am going to blame you if CLion 2017.3 comes out and it doesn't support __COUNTER__ \ud83d\ude09 . >How is this achieved? So any code I call before and after a section is executed as setup/teardown?\nYes, that is the entire point of SECTIONs\ncpp\nTEST_CASE(\"foo\") {\n    std::cout << \"setup\\n\";\n    SECTION(\"bar\") {\n        std::cout << \"bar\\n\";\n    }\n    SECTION(\"baz\") {\n        std::cout << \"baz\\n\";\n    }\n    std::cout << \"tear down\\n\";\n}\nwill have output of\nsetup\nbar\ntear down\nsetup\nbaz\ntear down\nThe same logic applies over arbitrarily nested SECTIONs*\nAs for listeners, seeing listeners as a way to implement set-up, tear-down is a bit misguided. They can be used that way, sure, but that only makes sense if you have some global state that needs to be cleared/reset with some granularity (these can range from logging singleton, where you presumably want to drop stored logs if everything is OK, to a hardware device that needs restart signal).\nYou can also use methods of objects as your test cases, in which case the setup/tear down is in constructor/destructor and are run before each test case method is called.\n* However, having parallel deeply nested sections tends to make following the test logic a bit hard.\n. @ruipacheco Catch 2 listeners are no longer limited to main file. This won't be backported to Catch Classic, however.\nI still think that listener usage should be quite rare though, as they imply a common set of steps that need to be run before each assertion/section/test case/test run. Given how test case + sections already enable reusing common steps for certain set of assertions, this likely also implies a global state.\n(And global state is the enemy of unit testing). Interesting. I guess it makes sense that Win32 APIs when building for UWPs, but I wonder why CONSOLE_SCREEN_BUFFER_INFO is not present either. Can UWP applications run in console?. This should be fixed in Catch 2. That is weird. ~We forward declared OutputDebugStringA to avoid including windows.h in the common path~, so it looks like the final single include header gets stitched wrong.\n\nThe problem is definitely with stitching. We are working on making it saner, but didn't have much time lately.. Can you check whether the attached single include works for you?\ncatch.zip\n. @michaelcowan Well, UWP apps do not provide proper stdout, you will have to redirect it yourself to wherever.\nWe could do it as well, but the only place that is at least semi-guaranteed to exist is the debug output and that can already be pretty full.. @michaelcowan I know. However, the debug output can already be quite noisy, thus I think it is better to let our user redirect stdout to wherever is most appropriate for their application (or use -o). I am willing to be convinced otherwise though.. @michaelcowan You could argue that the inconsistency stems from inconsistent behaviour between XCode and Visual Studio. By default, Catch writes its output to stdout. UWP apps do not show stdout anywhere, but it can be redirected by freopen and the like. It just so happens that XCode redirects stdout to its debug output on its own, while VS doesn't.\nHowever, as you found out, you can ask Catch to redirect the output to a file (including a special file, %debug). Under everything that is not Visual Studio, the %debug file just writes to stdout. For Visual Studio, we use OutputDebugStringA, which does place the output to its debug output.. If you open a PR and it passes CI, I am willing to merge it, but Catch Classic is no longer under development by us.\nHowever, this should work by default in Catch 2 and we promise that final release will be out real soon now.\nAs a side note, __cplusplus will likely remain as 199711 under MSVC for quite a bit longer, as they do not want to change it until full C++11 (or higher) support can be provided and it still doesn't support two phase lookup.\n. This actually used to be the case during development, but it seemed like it would forward down a bit too many types. I will think about reverting it back.\n\nIf it's possible through sufficient C++ magic to seamlessly detect an overload of the custom function and fall back to the underlying type if it doesn't exist\n\nThis is entirely possible, but something you will want to do in your local copy. Doing this via TMP is rather costly and Catch already has trouble with compilation times.. After some deliberation, I decided to change this behaviour for the next release. The fallback stringifier will now be passed everything that does not provide either StringMaker specialization or operator<< overload.. I somewhat doubt that people are using the main page of a non-default branch to download the (pre)release, but there is no harm in keeping it updated.. I spent some time looking over this and I am still not sure why it is using mutable references.\nWe used to support non-const comparison operators, but to support those we const-casted away the constness anyway. I am going to throw it over at @philsquared as the Catch 2 rewritten decomposer is his work, before making changes.. We have had a couple of issues where specific std library version + exceptions led to weird traversal of test cases. This was caused by a bug in std::uncaught_exception() making it always return true, even after the exception was handled\nWithout further investigation, I won't say that it is this, but it does look a bit familiar.. @rkaminsk Do you mean in the exception translators?\nIf that solves it, it is worth it even though it is just working around a runtime bug. However, I don't have access to any machine where this bug reproduces, so I need someone else to test it.. That looks interesting. The attached single include replaces all throw; statements with std::rethrow_exception.\ncatch.zip\n. I committed the changes anyway, as there will likely be boxes with the old version for the foreseeable future anyway.. It is actually applied in Catch 2, because there is a good chance we will be working against bugged libcxxrt in the wild for quite some time.. Finally got back to working on Catch.\nLooking at the linked issue, the largest problem is with macros that have an optional second argument for description, correct? For TEST_CASEs and variants, we recommend giving proper tags anyway, but SECTIONs have the second argument too, that as far as I know, nobody uses. However, removing it would risk significant backward compatibility breakage.\nAs to the actual question, I don't think there is an authoritative enumeration of supported compilers short of Travis/AppVeyor list, which is not necessarily complete anyway -- ie I am fairly sure that VS 2010 is supported, but can't get it on AppVeyor.\nTravis/AppVeyor say that at least gcc 4.4 - gcc 6, clang 3.4 - clang 3.8 and VS 2013 - 2017 are supported.. So far, breaking into debugger happens only for failed assertions. This means that this\n```cpp\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nint throws() {\n    throw 1;\n    return 1;\n}\nTEST_CASE(\"A\") {\n    REQUIRE(throws() == 2);\n}\n```\nwill break on the exception*, but your original code won't.\nLooking over #586, it is a separate issue from the one closed by me, but since it was closed by its creator back in 2016, I never even noticed it existing. I'll take a look at what it would take to implement this for unexpected exceptions outside of assertions, but the usual caveat emptor applies: the backlog of potential features is much bigger than the amount of available time.\n* Actually on the assertion failure. I played with this a bit and after changing some details, it is in Catch 2 branch. @tdegeus We always copy the header into include/catch, so just adding include at the end of the include path seems reasonable.. Something is interfering with placement new in your build.\nCursory googling suggests that MS used to do a very stupid thing, where they defined new to DBG_NEW, which breaks placement new.. @dvirtz That also means that the entire compilation will run from scratch, correct?. @dvirtz Good.\n. I am fairly sure you are the first person so far who wants the human-readable output option to be verbose by default (as opposed to machine-readable reporters being verbose by default, like the junit reporter).\nIn general, human-oriented UIs (whether graphical or not) need to take care not to overwhelm the user with useless information. Since the standard state of a unit test is passing (and if it is not, you need to rethink your test suite), individual passing tests shouldn't be reporter to the user. On the other hand, if a test fails, then it becomes important to report it. (Similarly, your car doesn't have a blinking light telling you that the engine is OK. It has a light telling you when the engine is not OK.). It is you btw.. Basically, you want parts of SelfTest to become self-contained and hosted on Wandbox or similar, correct?. Yeah, SelfTest's primary aim is to (mostly) guarantee that things didn't get broken by a change, secondary aim is a reference for someone who already knows Catch well and documentation for newbies is a very distant third.\nAnyway, I can see some value in adding these, but honestly don't have much time (and what little I do, I'd like to use for different things), so this will likely either get put on a backburner, or someone else needs to put in a PR (hint, hint).\n. As Phil said, Catch 1 Matchers do not work with thrown exception (you can match them after you catch the exceptions though). Catch 2 does provide an assertion for matching thrown exception, IIRC it is REQUIRE_THROWS_MATCHES(expression, exception type, matcher for given exception type).. @mwpowellhtx Runtime-wise, Catch 2 should be stable. We have had some trouble with the stitching script making the single header release uncompilable under specific compile-time flag combinations (mostly UWP), but in general, it should work.. We should be able to do that, but it will likely end up disabled by default, we would have to drag the <chrono> header into every file otherwise.\nIt actually might be a good idea to make all std stringification specializations optional. This is now in the Catch 2 branch.. It is disabled by default, see documentation. There is not.. This is already in, but there are no plans to backport it ATM.\n. This compiles and has the expected output with Catch 2 dev 4.\n```cpp\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\ninclude \nstruct SpecialException : std::exception {\n    SpecialException(int i_):i(i_) {}\n    int i;\n};\n[[noreturn]] void throws(int i) {\n    throw SpecialException{ i };\n}\nclass ExceptionMatcher : public Catch::MatcherBase {\n    int m_expected; public:\n    ExceptionMatcher(int i):m_expected(i) {}\n    bool match(SpecialException const& se) const override {\n        return se.i == m_expected;\n    }\n    std::string describe() const override {\n        std::ostringstream ss;\n        ss << \"special exception has value of \" << m_expected;\n        return ss.str();\n    }\n};\nTEST_CASE( \"Exception matchers that succeed\", \"[matchers][exceptions][!throws]\" ) {\n    CHECK_THROWS_MATCHES(throws(1), SpecialException, ExceptionMatcher{ 1 });\n    REQUIRE_THROWS_MATCHES(throws(2), SpecialException, ExceptionMatcher{ 2 });\n}\n``. Catch 2 is now the master, so this feature is in an officially supported release.. @mwpowellhtx What do you mean by user exceptions? You should be able to specify an arbitrary exception type to be caught and matched.. @mwpowellhtx Yes.. Which part is problematic?. I looked at the diff andset_property` documentation and I wonder if it wouldn't be cleaner to add the dependency to the tests, rather than current directory.\nAdmittedly, this could cause CMake's dependency tracking to slow down significantly given enough tests, so it is more of a nitpick.. I am going to preface this with saying that I know just enough CMake to be dangerous.\nAnyway, I thought that we could do\ncmake\nset_property(\n  TEST ${TestName}\n  APPEND\n  PROPERTY CMAKE_CONFIGURE_DEPENDS ${SourceFile}\n)\nto express that it is the test that depend on the source file, rather than a directory, but I tested it and it doesn't work.. Thanks for the PR btw. You are confusing tags and sections.\nTo select by tags, just write them out: tests.exe [foo]. A similar mechanism works for test cases: \"Run some other tests\". Specific details, like how to specify tag \"A\" but NOT tag \"B\", can be found in the documentation.. Yeah, I've setup my all my text editors to clean out trailing whitespace on save. I am going to take a look at the ToC script.. I decided to append <br> to the ToC lines and regenerated already existing ToCs.. That change won't work for Catch master either, as it still has to be backwards compatible with C++98 (which doesn't have <cstdint>).. The last version will work nicely, thanks.. That link won't work either but thank you for reminding me I haven't fixed that yet. (The proper link is https://github.com/philsquared/Catch/blob/master/docs/limitations.md#visual-studio-2017----raw-string-literal-in-assert-fails-to-compile). Would Listeners work for you?. @eiennohito Yeah, but it would likely be less work than building something with a hypothetical lastTestPassed() or lastSectionPassed().\nConsider this test case with two sections:\ncpp\nTEST_CASE(\"foo\") {\n    SECTION(\"A superfluous section\") {\n        REQUIRE(false);\n    }\n    SECTION(\"A pointless section\") {\n        REQUIRE(true);\n    }\n}\nwhen the first assertion fails, the rest of the section and test case is skipped (only destructors are executed). Potentially you could have a piece of code like this\ncpp\nTEST_CASE(\"foo\") {\n    SECTION(\"A superfluous section\") {\n        REQUIRE(false);\n    }\n    if (lastSectionPassed()) {  // \n        logAllTheThings();      // <-- \n    }                           // \n    SECTION(\"A pointless section\") {\n        REQUIRE(true);\n    }\n}\nbut by the time a call to logAllTheThings happens, any state that you have prepared as part of the \"superfluous section\" is no longer there (since the section ended in failure). This means that you would likely end up having to perform the logging in a destructor of a guard object, but that object also has to be created last, so its destructor runs first when the section ends.\nQuerying last test case has a very similar problem, except more pronounced, as both less data is kept between test cases, and order of execution is less defined, meaning that there is no good place to have a logging check.\n. Final is out. Looks reasonable enough so far, but I also remember you wanting to make compiling and running these part of CI. Are you still planning to do so?. @martinmoene It is ok to add them incrementally. As to building them, I suggest creating a standalone CMakeLists that defines all targets for the examples and then (conditionally) including it from the main CMakeLists.\nAlso, note that they should not be built as part of normal development build, but should be hidden behind a CI specific option (we already do that for C++14, so you can just copy that).\n. This is a potential issue with streaming reporters in general and we have had to fix it for the XML reporter earlier in the year.\nSadly without NVI-based rework of the reporters, it has to be fixed in each reporter individually.. >Yes, that's precisely what I'm talking about. Can a parent-parent scope be added to buffer for this situation?\nNo, because ultimately the error happens when an exception is thrown while a different one is in-flight.\nConsider this example\n```cpp\nstruct throws {\n    ~throws() {\n        throw 1;\n    }\n};\nvoid safish() {\n    throws a;\n}\nvoid always_aborts() {\n    throws a, b;\n}\nFunction `safish` can be called and the program's stack will unwind in standard fashion. Thus thiscpp\ntry {\n    safish();\n} catch (int) {\n}\n``\nis an absolutely pointless piece of code, but harmless. On the other hand, callingalways_aborts()will instantly kill your program, because C++ standard specifies that if a second exception is thrown while the first one is in-flight,std::terminate` is called immediately.\nThis is the reason why exceptions inside destructor are regarded as a bad idea. However, there are legitimate reasons to use them, but they have to be used smartly, ie the following version of the throws struct would allow calling always_aborts without immediate termination of the program.\ncpp\nstruct throws {\n    ~throws() {\n        if (!std::uncaught_exception()) {\n            throw 1;\n        }\n    }\n};. I want to say that the error here is stringifying const char* as a string instead of as a pointer, but then stringification for comparing std::string variable with known string would be useless, so it is a bit of damned if you do, damned if you don't.. @retokid You have to understand that expressions inside Catch's assertions behave exactly as they would outside*. What this means is rather simple, if you consider this piece of code\ncpp\nstd::string str = \"abc\";\nconst char* cstr1 = \"abc\";\nconst char* cstr2 = strdup(cstr1);\nassert(str == cstr1); // Passes\nassert(str == cstr2); // Passes\nassert(cstr1 == cstr2); // Fails\nassert(strcmp(cstr1, cstr2) == 0); // Passes\nThe first two asserts pass because std::string specifically has operator== that takes a const char* and assumes it is a C-style string. The third assert fails, because comparing two pointers of any type is done with their address, rather than contents. The fourth assert then compares the two char*s by content, with the assumption that they are valid C-style string.\nThe problem we have is that stringification is done context-free, which means that when deciding whether to stringify a char* as a pointer or as a C-style string, we cannot take a look on the type it is compared against. Thus, we stringify char* as C-style string, because it is more likely that someone writes this\ncpp\nstd::string str = ...;\nREQUIRE(str == \"Known good output\");\nrather than this\ncpp\nconst char* cstr = \"...\";\nconst char* cstr2 = \"...\";\nREQUIRE(cstr == cstr2);\nas the second is quite likely to be wrong.\n* Some caveat emptor applies in regards to linkage and number literals. @vadz It is clear enough, but not supported yet.\nAs an ad-hoc solution, you can cut out everything guarded with CATCH_IMPL and CATCH_CONFIG_EXTERNAL_INTERFACES macro's into a separate header. Or define CATCH_CONFIG_EXTERNAL_INTERFACES in the PCH and cut out only the CATCH_IMPL part.. I thought about this for a bit and I am going to implement it with some caveats\n1) Conditional include guards are non-obvious, so the main file will need to undef the include guard manually.\n2) The support will be experimental for a while, so no stability guarantees.\n3) The PCH will need to define a special macro. This is because we provide some pluggable parts controllable by defines, which the implementation file forces to be on, to avoid implementation complexity and weird link errors. Since we cannot use the same trick in a \"PCH + impl only\" context, it will be up to the PCH to provide proper configuration.\n4) I am not sure what to do about the \"external interfaces\" part of Catch. It is required for implementation to function, but users might want to have it in all headers (it provides access to listeners and reporter interfaces).\n. I made a proof of concept branch for this (dev-PCH-support) and it seems to work on a small scale, but I don't have any project handy to test it out on.\n```cpp\n// stdafx.h\npragma once\ninclude \"targetver.h\"\ninclude \ninclude \ndefine CATCH_CONFIG_ALL_PARTS\ninclude \"catch.hpp\"\n```\n```cpp\n// PCH-test.cpp:\ninclude \"stdafx.h\"\nundef TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED\ndefine CATCH_CONFIG_IMPL_ONLY\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\n```\n```cpp\n// tests1.cpp:\ninclude \"stdafx.h\"\nTEST_CASE(\"FooBarBaz\") {\n    REQUIRE(1 == 2);\n}\n```\nCan someone test the attached single header version and report back?\ncatch.zip\n. @vadz I won't be backporting it, but I'd expect one should be able to do it with relative ease by looking at the commit diff. . v2.1.0 is out and contains the PCH support. Got here from 1095.\nFYI your implementation invokes UB, as the constructed Tags are out of scope after the test case is constructed, but test case doesn't take ownership of tags (as the most common expected usage is with static strings) . This means that any attempt to access the tag ref from test case afterwards is invalid.. I investigated it further, and I was wrong.\nBoth parameters in TEST_CASE macro are provided to NameAndTags object, which takes StringRefs* as arguments to the constructor. StringRef does not take ownership of the string, meaning that if the originating string goes away, it keeps pointing to invalid memory. This means that once a TEST_CASE is created, the NameAndDesc object points to invalid memory, when given Catch::Tags.\nExcept that the implementation internals are rather old, crufty and the first thing they do with a created NameAndDesc, is to (rather pointlessly) convert its members into separate std::strings. Because this happens during the TEST_CASE construction, it catches the StringRefs while they are still valid, instead of later on.\nIf the implementation was optimized better, it would keep things as a StringRef until it is necessary not to** and the contents would be accessed once invalid.\n* For Catch 1, it was const char*, but the principle is the same.\n** Depending on what you optimize for, you might even prefer to keep them as StringRefs forever and either keep paying the reparsing cost, or have the tags be StringRef into a substring of the full tag string.. Is there a reason why you add it only in non-Windows LeakDetector?. The linked PR actually added this properly, so I am going to close this.. Thanks. Thanks. This was already discussed in #955.\nThe result is that Catch Classic is going to keep the behaviour for backward compatibility reasons, with Catch 2 changing the default to capture by const&.\n. @tiagomacarios They can also append a const& to the exception type, or use a stand-in macro that converts the type, to have a single point of change later on.\nGenerally, we don't want to commit breaking changes in minor releases and next major is Catch 2, so this gets to go there either way.. Catch 2 is out, so I am going to close this as already fixed. We have an outstanding issue about reworking Approx, #980, so Approx will definitely receive some changes. There is, however, a good chance that the changes will target Catch 2, instead of Catch 1, as they end up a breaking change.\nIt will be couple of days before I get enough time to look through this.\n(Also it doesn't quite compile). I ended up cherry picking and cleaning this up in 00af677577973758b3b35e1c94ab4142c45c3f67 for the Catch 2 branch, where breaking changes are OK.\nGitHub doesn't pick up cherry picks properly, so I am going to close this manually.. I am going to wait for #1068 before merging.. Thanks. Thanks, I've found the missing warning(pop) and added it back.\nI've also guarded the usage of WINAPI_FAMILY macros with a check whether they are defined. Can you test the attached single include?\ncatch.zip\n. @jamespharvey20 Do you enable C4061 explicitly, or does the new Preview version turn it on for /W4?\nAnyway, I'll probably just add it to suppression and ensure that C4062 is enabled for our builds.\n. I am going to mark this as resolved. If you want warnings above warning level /W4 silenced, please open up a dedicated issue.. @jamespharvey20 /Wall is not supported, because STL does not support it either and AFAIK there is no -isystem analog for cl.exe. However, we are willing to fix specific warnings, if they seem sane enough (C4820 is not). . Yeah. Sorry for not closing the issue, but sometimes old issues can fall through the cracks.. I would argue that C++98 a C++03 is still supported via Catch classic and thus should remain included.. I want to say that this is why you shouldn't clone ToT of dependency, but that is not really helpful. The crux of the issue is that at some point rngSeed was no longer dependency of Catch's main interface, and so the stitching script moved it into non-interface part of Catch. This means that it is only provided in the file that defines CATCH_CONFIG_RUNNER or CATCH_CONFIG_MAIN.\nI will have to check if we promised Catch::rngSeed as a part of our external interface, if yes we will move it back. In the meantime, you can work around the issue by calling Catch::getCurrentContext().getConfig()->rngSeed().. Sorry, I expected context to be part of what we leak to the outside world.\nAnyway, we will try to establish more firm external API in the future (rngSeed will likely end up being part of it).\n. If I understand you correctly, you want to have database.dropTable() and database.close() called at the end of each test that performs queries against the database, but not the others?\nYou can always do this\n```cpp\nTEST_CASE(\"Database\", \"[database]\") {\n  SECTION(\"Database::open()\") { /.../ }\n  SECTION(\"Database.close()\") { /.../ }\nSECTION(\"Database.query()\") {\n    // Set-up this set of tests by opening a connection to the Database and populating it.\n    Database database = Database(\"connectionString\", \"flags\");\ndatabase.createTable(/* blah blah */);\ndatabase.insert(/* blah blah */);\n\n/* Test querying the database */\nSECTION(\"Query 1\") {}\nSECTION(\"Query 2\") {}\nSECTION(\"Query 3\") {}\n...\n\n// Tear-down after **each** test by clearing all data from the DB and closing the connection to it.  I don't want to affect future tests!\ndatabase.dropTable(/* blah blah */);\ndatabase.close();\n\n}\n}\nNotice the new sections inside the \"Database.query()\" section. The execution order then goes\ndatabase setup (create, insert)\nQuery 1\ndatabase teardown (dropTable, close)\ndatabase setup\nQuery 2\ndatabase teardown\ndatabase setup\n...\n``.Approx::marginhas always been set to 0. What has changed isApprox::scale`.\nAnyway, yes the new behaviour is intended. By relative margin the machine epsilon (std::numeric_limits<float>::epsilon()) is quite far from zero.. Fundamentally there are 3 ways of comparing floating point numbers\n1) Check for an absolute difference. This is the naive approach of if (fabs(a - b) <= margin), and has a rather obvious problem in that the same margin doesn't work well for small and large numbers.\n2) Check for relative difference. This is essentially the same approach as above, except that you scale margin by size of inputs to the function, ie if (fabs(a - b) <= epsilon * max(fabs(a), fabs(b)). This approach is fairly intuitive, as long as you do not run into sufficiently small (ie denormalized) numbers.\n3) Check for ULP (Units in Last Place) difference. 1 ULP difference means that there is no representable number between the two compared numbers. 2 ULP difference means that there can be at most 1 representable number between the two compared. This model has the advantage of autoscaling up and down, but is in no way intuitive.\nApprox provides for 1) and 2)*, because these are simpler to work with. We are planning to provide a Matcher for 3)(#1074), and also for 1) because ULP's do not quite work around 0 and denormals either.\n* Note that we scale by Approx's value, and not by the larger of the two compared values.. Why add the same invocation separately for each compiler?\nOtherwise LGTM. There are couple more dumb things we do with global build flags, but so far nobody needed them fixed.. We are going to need more details. What file are you trying to compile? How do you invoke the compiler? etc. Can you provide smaller example? I don't have an easy access to any system where I can compile things including <any>.. @diablol1 If you don't object I am going to call this resolved then.. Sorry, I thought it resolved itself because of the last post.\nAnyway, I downloaded the second provided project and found two problems:\n1) InitCatch.hpp is a header file and thus isn't compiled. After I renamed it to InitCatch.cpp so it is compiled, it compiles except for 2 undefined references to the SampleClass methods.\n2) The Tests project does not link against other files, so implementations of SampleClass::setVar(int) and SampleClass::getVar() aren't linked in. When I provided their definitions in the test files (to keep it simpler), the test linked properly.\nDoes this resolve your problem?. So, should this be considered resolved?. > Do you have suggestions?\nBUILD_EXAMPLES?\n\nDo you have suggestions here; I wouldn't mind to leave this to experts.\n\nNot sure where we are going to get them \ud83d\ude04 , but for Travis, we already specify all elements of the build matrix explicitly, so we can just add new one:\nyaml\n    - os: linux\n      compiler: gcc\n      addons: *gcc6\n      env: COMPILER='g++-6' BUILD_TYPE='Debug' CPP14=1 EXAMPLES=1\nand change the build line:\nyaml\n  - cmake -H. -BBuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -Wdev -DUSE_CPP11=${CPP11} -DUSE_CPP14=${CPP14} -DBUILD_EXAMPLES=${EXAMPLES}\nI don't think we need to build the examples with all compilers and configurations, as SelfTest should catch bugs, we just want the examples to not get out of date.\nAppVeyor would be a bit harder, but I think we can specify explicit inclusion for the build matrix similarly:\nyaml\nmatrix:\n    include:\n        -\n            Examples: 1\n            os: Visual Studio 2015\n        -\n            Examples: 1\n            os: Visual Studio 2013\nand change the before_build lines similarly.\n\nLooking through or travis config, we should do some cleanup there. CPP11 toggle is no longer relevant, as that is the base assumption.. @martinmoene The cleanup is done, but you will likely need to rebase.. Keeping the number of separately compiled mains down is a good idea, they take quite a long time to compile. The fact that it teaches good practices is a nice bonus.. @MartinMoene Listeners and reporters require CATCH_CONFIG_EXTERNAL_INTERFACES to be defined. It is implied by both RUNNER and MAIN, which is why it works. It should be in the docs :smile:. @martinmoene Yeah, I've noticed so. It is in Travis, so I just assumed it would work in AppVeyor as well.\nI'll take a look at AppVeyor (hopefully soon). Pretty much. Looks good to me. I might rejigger the CI matrix afterwards, I have some further changes planned :smile:. Can you add link to the docs?. I don't actually have a Mac.\nThanks. If I understand you correctly, the error happens when clone the repository and include include/catch.hpp, correct?\nThen that is mostly intended. With Catch 2, the development version of Catch uses actual .cpp files, that are later stitched into the single include. This means that if you aren't using the single include version of catch, you have to compile the .cpp files separately and then link against them separately.. @rcook I would call it an unintended side effect of internal changes, but since it made our development easier and using the single include version is the recommended way of consuming Catch, we intend to keep it.\nThanks for the report though.. @mattgodbolt Download the reporter header separately, include it from the implementation file. After that you should have binary that accepts new value to the -r argument.. @philsquared PHIIIIIIIIL!!\nThis got broken in 56e10756. I am going to fix it tomorrow.. It should work with ToT now, but there are some open questions to solve...\nSpecifically, reporters are made to work with, and are tested against, current include files rather than the last released single header version. We should probably start copying reporters to single_include on release, so that it is easy to get assuredly compatible versions.. @martinmoene Top of Trunk/ HEAD at master.. Thats the \"reporters expect current state instead of last release\" part :smile:. Try it against regenerated single header.. That is definitely a pretty bad regression.\nAnyway, I did some quick profiling under MSVC and so far\n * MSVC says that std::string construction takes about 5% of total time spent in Catch::AssertionHandler::handle. A quick look says that we pointlessly copy std::string because of AssertionResultData.\n```cpp\n    struct AssertionResultData\n    {\n        AssertionResultData() = delete;\n    AssertionResultData( ResultWas::OfType _resultType, LazyExpression const& _lazyExpression );\n\n    std::string message;\n    mutable std::string reconstructedExpression;\n    LazyExpression lazyExpression;\n    ResultWas::OfType resultType;\n\n    std::string reconstructExpression() const;\n};\n\n...\n    void AssertionHandler::handle( AssertionResultData const& resultData, ITransientExpression const* expr ) {\n    getResultCapture().assertionRun();\n\n    AssertionResult assertionResult{ m_assertionInfo, resultData }; // <- String copy because resultData\n    assertionResult.m_resultData.lazyExpression.m_transientExpression = expr;\n\n    getResultCapture().assertionEnded( assertionResult ); // <- At least 1 another string copy\n\n    if( !assertionResult.isOk() ) {\n        m_shouldDebugBreak = getCurrentContext().getConfig()->shouldDebugBreak();\n        m_shouldThrow =\n                getCurrentContext().getRunner()->aborting() ||\n                (m_assertionInfo.resultDisposition & ResultDisposition::Normal);\n    }\n}\n\n``\nThere are other pointless copies caused by thestd::stringmember inAssertionResultDataand handling of other assertions, but those are 1 at most.\n*  Another 25% of time is spent insidem_reporter->assertionEndedof console reporter (I ran the default). This is another place wherestd::string` is copied needlessly, but not that much. All in all, it seems like a case of death by a thousand cuts.\n. After the discussion and changes from the associated PR's the performance of Catch2 should be better than Catch Classic's , so I am going to close this issue.\nIf you have further suggestions in regards to performance, please open up a new issue.. Non-const comparison ops are no longer supported. Note that the provided operator== has signature equivalent with operator==(B&, B const&).. As you found out, it was supposed to be THROWS_MATCHES. Sorry about that.\nAnd if you provide a matcher, it can do exactly what you want:\n```cpp\nstruct ExceptionContentMatcher : Catch::MatcherBase {\n    ExceptionContentMatcher(std::string const& target) :m_target(target) {}\n    bool match(std::exception const& matchee) const override {\n        return matchee.what() == m_target;\n    }\n    std::string describe() const override {\n        return \"exception message is:\\\"\" + m_target + \"\\\"\";\n    }\nprivate:\n    std::string m_target;\n};\nTEST_CASE(\"Blabla\", \"[SpecialTag]\") {\n    REQUIRE_THROWS_MATCHES(throw std::runtime_error(\"foo\"), std::exception, ExceptionContentMatcher{ \"foo\" });\n}\n``. Closed for inactivity. We did make one change in this - we found out that for libcxxrt we can fix the bug by usingstd::rethrow_exception(std::current_exception())instead ofthrow;`, so Catch now uses only the former way of rethrowing exceptions.\n\nNewer version of libcxxrt have finally fixed this bug.. Some warning disables have to leak, ie -Wparenthesis has to leak to prevent warnings on assertion macros (because they internally expand into something along the lines of foo <= a == b). Also with GCC, (well g++), we ran into some bugs in its #pragma and #_Pragma handling that meant we had to disable the warning globally rather than use #_Pragma.\nClang's handling has, as far as I know, been bugless, so we could probably replace it with non-leaking _Pragmas in the right places.\nAnyway, I think which ones we suppress globally could be revisited, but at the very least -Wparentheses is there to stay for gcc.. The last version was looking good.\nI rebased it to keep the history simpler but you should still have the commit attribution.. Spent some time looking through it, and as far as I can tell, the implementation of Matchers was kinda misguided in regards to its type usage. We made some internal changes that fix this issue going forward and should prevent it from repeating.\n. Fixed in 3537b7858f54730f501e24d17582603c0d0d7d0b. v2.1.0 is out with the fix.. If I understand you correctly, you want to check that two containers are equal, but the elements are not necessarily in the same order, correct?\n. This is actually an intended change, called out in the \"breaking changes\" part of the v2.0.1 release.\nWe removed default up-scaling of epsilon (the relative margin allowed) because it silently gave bad results for lowish numbers: ie, it accepted the above comparison even though -0.001 and 0.0 are not within 10% of each other.. Depends on how close to zero you want to be, but for comparisons close to zero the recommended way is\nvalue == Approx(0).margin(allowable_margin).. I assume you are including include/catch.hpp directly, instead of single_include/catch.hpp, correct?\nIf so, it is the same problem as in #1085: if you use the piece-wise version of Catch2, you have to compile the .cpp files yourself.. I didn't foresee this side-effect, but I think that conversion operators should be const (or have a const and && overload).. @garethsb Boost licence would be preferable, but having 3-clause BSD cmake script in contrib/ should be ok.\nHow much is it derived from the original source versus implemented based on the linked blog post?. @garethsb I would place it into Catch2/contrib/ for the foreseeable future. If it gets included in CMake, nice, but then the world will need another 5 years until it can be reasonably expected to be everywhere (and another 10 for RHEL :smile:).. A variant of the script has been merged to master. I won't stop a person from implementing it and opening a PR, but I am completely OK with leaving it CMake 3.10 dependant and let people update their environments over time.. Wasn't it like that before the move to Catch2?. Another thing lost in transition, thanks.. Doh, thanks.\nWe really need to set up CI tests to work with the single include version as well as with the development version.. I reverted the changes that caused this,will release new version... soon?. v1.12.0 is released on the Catch1.x branch.\nI will push it to vcpkg later today.. I seem to remember merging similar changes to Catch Classic.\nHas it been lost in the transition? (It's entirely possible, some of the master -> catch2 merges got pretty hairy). I assume you want to programatically parse the output and the summary is in the way? Standard Catch distribution already provides 2 parsable reporters, junit and xml. We also provide 3 extra parsable reporters in the repo: TAP, Automake and TeamCity.\nAlternatively, you can write your own reporter, and base it on one of the provided ones, but I don't think that the added complexity in-repo is worth it the benefits.. I don't have commit rights to Clara, so fixing this is up to @philsquared . Interesting.\nAs far as I know, there is no problem with making it complete, so I am going to fix it soonish.\n. Are you also checking what happens with compilation times?. @coombez Yeah, benchmarkCompily.py is a bit idiosyncratic, I mostly created that one for myself.\nAnyway, rough usage guide:\n You need to generate the test files first. This means running it with -g or --generate-files and -I <path-to-single-include>.\n You should now see benchmark-dir folder where you ran the script, it should contain catch.hpp and .cpp files to test compilation\n* Run benchmarkCompile.py again, this time with an argument specifying which type of compilation you want to check (obviously link requires files to be compiled first). You will also likely need to specify -f=-std=c++11.. @martinmoene That formulation suppresses warnings from tested code. Consider these three files\na.cpp\n```cpp\ninclude \nint main() {\n    int i = 1;\n    if (i == NULL) {\n        std::cout << \"i = \" << i << std::endl;\n    }\n}\n`b.cpp`cpp\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nTEST_CASE(\"foo\") {\n    int i = 1;\n    REQUIRE(i == NULL);\n}\n`c.cpp`cpp\ndefine DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\ninclude \"doctest.h\"\nTEST_CASE(\"foo\") {\n    int i = 1;\n    CHECK(i == NULL);\n}\n```\nwhen compiled with -Wall -Wextra, both a.cpp and b.cpp warn about comparing int with NULL. c.cpp does not.. We could probably throw out the IsTrue, but g++'s handling of _Pragmas is buggy as hell, ~~so it might mean having to suppress tautological compare in the whole TU instead~~.\nActually, from quick test only Clang seems to warns on tautological compares, and Clang's _Pragmas work perfectly. I took the liberty of manually picking parts of this that are still relevant. This means no credit for you (sorry), but it seemed like the least painful option.. There should be no leaks in Catch, and under Linux we run CI with Valgrind. We also support the crt debug heap, just define CATCH_CONFIG_WINDOWS_CRTDBG in the implementation file.\nAnyway, I tried to reproduce this and I cannot:\n```\nC:\\Users\\Xarn\\source>more a.cpp\ndefine CATCH_CONFIG_RUNNER\ninclude \"catch.hpp\"\nextern \"C\" int __cdecl\nwmain(In int argc,In_reads(argc) Pre_z wchar_t argv[],In_z wchar_t /envp/[]) {\n        int ret = 0;\n        ret = Catch::Session().run(argc, argv);\n        _CrtDumpMemoryLeaks();\n        return ret;\n}\nunsigned int Factorial(unsigned int number) {\n        return number > 1 ? Factorial(number-1)*number : 1;\n}\nTEST_CASE( \"Factorials are computed\", \"[factorial]\" ) {\n        REQUIRE( Factorial(0) == 1 );\n        REQUIRE( Factorial(1) == 1 );\n        REQUIRE( Factorial(2) == 2 );\n        REQUIRE( Factorial(3) == 6 );\n        REQUIRE( Factorial(10) == 3628800 );\n}\nC:\\Users\\Xarn\\source>cl a.cpp /EHsc -sdl -guard:cf -Zc:inline -Zc:rvalueCast -Zc:referenceBinding -Zc:strictStrings -std:c++latest /D_UNICODE /DUNICODE /W4\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.11.25547 for x86\nCopyright (C) Microsoft Corporation.  All rights reserved.\na.cpp\nMicrosoft (R) Incremental Linker Version 14.11.25547.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n/out:a.exe\n/guard:cf\na.obj\nC:\\Users\\Xarn\\source>a.exe\nAll tests passed (5 assertions in 1 test case)\n```. @JoeyGrajciar It both is, and isn't.\n1411 moves the final release point forward a bit, but you will still get false positives if you try to check allocations before ~LeakDetector runs. I am going to close this anyway, as fundamentally that FP potential will always be there.. Closing this because of inactivity.. Sorry for taking so long.\nAnyway, I couldn't get emscripten to work, so no idea if it is enough, but the changes to catch_compiler_capabilities.h is in.\n. @ynotstartups  run scripts/generateSingleHeader.py.. Since there hasn't been any followup, I am going to close this.. I get a slightly different output, but the answer is that it depends.\nFirst of all, you can't get the desired output without a little bit of hacking, because normally each side of the comparison is stringified on its own, so even if you use your own type instead of std::string, the output wouldn't be able to have colouring dependent on the mismatch.\nThe closest you can get to it is to have your own function that does the comparison and uses INFO to provide formatted output. This will give you the least support from Catch, but has the most freedom.\n```cpp\nvoid my_test(binary_string const& lhs, binary_string const& rhs) {\n    if (lhs == rhs) {\n        SUCCEED();\n    }\n    std::stringstream sstream;\n    // Now format the output as you want\nINFO(sstream.str());\nFAIL();\n\n}\nIt can then be used in a test just by calling it:\nTEST_CASE(\"a test case\", \"[foo]\") {\n    binary_string left, right;\n    my_test(left, right);\n}\n```\nAnother option is to use Matchers. Matchers allow you to have fairly arbitrary logic and stringification, up to a point -- you still cannot change how the matcher's argument is stringified, but you can change how the matcher itself is stringified, because it is only stringified after a matching attempt.\nThe usage and output could look something like\ncpp\nCHECK_THAT(left, BinaryMatcher(right));\n74 65 73 74 00 01 02 03 69 6e 67 21 does not match\n74 65 73 74 *color*03 02 01 00*end color* 69 6e 67 21\nthis also assumes that you have type different from std::string, because std::string's stringification is hard-wired to be done as characters (give or take escaping some special ones). Otherwise the left side would be stringified as a string with unprintable characters (weirdly).. Sorry for not responding for so long, it kinda fell through the cracks.\nAnyway, as far as I know there is no way of temporarily turning off formatting for part of the output. However, depending on how much you use the line wrapping otherwise, you might get good value out of turning it off completely. To turn it off completely, define CATCH_CONFIG_CONSOLE_WIDTH to some ludicrous value and Catch will stop trying breaking lines on its own (well, it will try to break on whatever the value of CATCH_CONFIG_CONSOLE_WIDTH is).\n. Thanks.\nI ended up having to cherry-pick the changes to fix up the tests, so I am going to have to close this manually.. Thanks, I rolled in a couple of typos in the vicinity, as single . is a bit too trivial.. Alternatively, you can create your own reporter that configures Catch internals to capture the stdout, like the junit and xml reporters do.\n2.1.0 (to be released soon) even makes the console reporter accessible, so you can derive your own reporter from it.. Closing due to inactivity. Closing this due to inactivity.. ~~Interesting, we used to suppress that in Catch Classic, wonder where that went.~~\nNevermind, we suppress that for Section destructor but not in ScopedMessage destructor. Thanks. 2.1.0 is out with the fix.. Are you linking in proper libraries? When I look into your cmakelists for Google tests based binary, I see this\n```CMake\nTest files\nfile(GLOB TEST_FILES \"unittests/*.cpp\")\n  add_executable(\"${UT_EXECUTABLE_NAME}\" ${TEST_FILES} ${SRC_FILES} src/date/src/tz.cpp)\nSet link libraries(order matters)\ntarget_link_libraries(\"${UT_EXECUTABLE_NAME}\"\n                         ${TBB_LIBRARIES} curl gmock gtest pthread)\nOTOH when I look at where you are building the Catch tests, I see thisCMake\nadd_executable(CDT_test ${TEST_SOURCE} ${CMAKE_SOURCE_DIR}/src)\n``\nNotice no libraries linked to the Catch test executable. This also tracks with your symptoms, where a simple test with no outside dependencies compiles fine, but one with external dependencies that need linking doesn't.. Good to know, thanks.. 2.1.0 is out with the fix.. This is known and not entirely fixable issue -- the problem is that REQUIRE macros require variables inside to be ODR-usable, because they perform capture byconst&`. We have a specialization in-place for bools, but ultimately it is impossible to provide a specialization for each possible type.\nI am considering a way for users to enable by-value capture for specific types, but it would likely impose some drag on the compilation speeds.. What happens if do as the error tells you and include boost/optional/optional_io.hpp  instead of optional.hpp?. Thats interesting, because it works for me\u2122:\n```\n$ cat non-io.cpp\ninclude \"catch.hpp\"\ninclude \nTEST_CASE(\"1158\") {\n    boost::optional i(2);\n    REQUIRE(i == 2);\n}\n\n$ cat io.cpp\ninclude \"catch.hpp\"\ninclude \nTEST_CASE(\"1158\") {\n    boost::optional i(2);\n    REQUIRE(i == 2);\n}\n```\n```\n$ clang++ -std=c++11 non-io.cpp main.o\nIn file included from non-io.cpp:3:\n/usr/include/boost/optional/optional.hpp:1256:3: error: static_assert failed \"If you want to output\n      boost::optional, include header \"\n  BOOST_STATIC_ASSERT_MSG(sizeof(CharType) == 0, \"If you want to output boost::optional, includ...\n  ^                       ~~~~~~~~~~~~~~~~~~~~~\n/usr/include/boost/static_assert.hpp:31:45: note: expanded from macro 'BOOST_STATIC_ASSERT_MSG'\ndefine BOOST_STATIC_ASSERT_MSG( ... ) static_assert(VA_ARGS)\n                                        ^             ~~~~~~~~~~~\n\n./catch.hpp:579:22: note: in instantiation of function template specialization 'boost::operator<< >' requested here\n                sstr << t;\n                     ^\n./catch.hpp:597:114: note: in instantiation of function template specialization\n      'Catch::StringMaker >::convert >' requested here\n  ...std::remove_cv::type>::type>::convert(e);\n                                                                     ^\n./catch.hpp:1011:42: note: in instantiation of function template specialization\n      'Catch::Detail::stringify >' requested here\n                    ( os, Catch::Detail::stringify( m_lhs ), m_op, Catch::Detail::stringify( m_rhs ) );\n                                         ^\nnon-io.cpp:7:15: note: in instantiation of member function 'Catch::BinaryExpr\n      &, const int &>::streamReconstructedExpression' requested here\n    REQUIRE(i == 2);\n              ^\n1 error generated.\n```\nversus\n$ clang++ -std=c++11 io.cpp main.o\nThis is with Catch v2.0.1 and boost 1.58.. Closing due to inactivity.. ^^^ Well that's new. I hope the bot has some settings for less obnoxious messages, because that's a bit too much.\nAs to the PR, I won't have time to review and merge it until half January, but it's definitely welcome.. Thanks. Yeah, the warning is ignored because the proper fix is to use C++17, but we intend to stay at C++11 for some time. In the meantime, the worst it will do is that a SECTION created while an exception is in-flight will think it ended up early and message macros used while an exception is in-flight will be always reported. Neither of these seem overly problematic (the first is mostly academical, the second is reasonable).\nAnyway, v2.1.0 is out with the fix.. That is an interesting use-case.\nCan you provide the set of switches to reproduce this? I want to see what happens inside our SE handlers first.. I got around experimenting with this and, at least for SEH, std::current_exception() == nullptr will evaluate to false when SEH exception was caught inside catch (...) block. Even the rethrow mostly works*, but the Console reporter goes crazy afterwards.\n. > I was fooled by how the debugger displays std::exception_ptr.\nYep, spent some time there as well.\n. It is not on by default, by try passing -w NoAssertions to the resulting executable.\nNote that it isn't quite the same thing, as this will warn on any leaf-section that does not have an assertion in it, ie this will warn:\n```cpp\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nTEST_CASE(\"foo\") {\n    SECTION(\"bar\") {\n    }\n    REQUIRE(true);\n}\n```\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nwarnings.bin is a Catch v2.0.1 host application.\nRun with -? for options\n\nfoo\n  bar\n\nwarnings.cpp:5\n...............................................................................\nNo assertions in section 'bar'\n===============================================================================\ntest cases: 1 | 1 failed\nassertions: 2 | 1 passed | 1 failed\n```. @faheel It also warns on code that is perfectly OK. Consider this\ncpp\nTEST_CASE(\"foo\") {\n    int a = 1;\n    SECTION(\"bar\") {\n        a = 2;\n    }\n    int b = calculate_new(a);\n    REQUIRE(b == 3);\n}\nThis is a poor man's emulation of generators and a fairly legitimate use case for SECTIONs without assertions, but it would be flagged by -w NoAssertions.. There is currently no way for Catch macros to be used outside and there are no plans to enable this use case.\nHowever, I wouldn't be surprised if there was interest in a new library that provided Catch-like stringification for plain old assertions and our licence allows reasonably free reuse of the code.. > Cool...actually I'm okay using a single include, now that I've found out about it (!) But even the existence of the single include should probably be added to the breaking changes, if it's a new thing (is it?)\nNo. Single include has been around since basically the first release.. Thanks. Is this with v2.0.1 or v2.1.0?. What is your build env? I tried to reproduce the issue using VS 15.5.3 and the 2.0.1 version of single include header and I ran into something different:\n```cpp\n// testfile\ninclude \ninclude \"catch.hpp\"\nnamespace Catch {\ntemplate<>\nstruct StringMaker {\n    static std::string convert(gsl::byte const&) {\n        return \"stringmaker byte!\";\n    }\n};\n}\nTEST_CASE(\"Foo\") {\n    gsl::byte b{ 0x20 };\n    REQUIRE(b != b);\n}\n```\nwith\nREQUIRE( b != b )\nwith expansion:\n  stringmaker byte! != stringmaker byte\nas the output.\nInterestingly, with 2.1.0 the gsl::byte is stringified as a char, because it is implemented as an enum and 2.1.0 stringifies enums according to the underlying type and value.\nFor 2.0.1 INFO doesn't compile even when providing a operator<< overload:\n```cpp\ninclude \ninclude \nnamespace gsl {\nstd::ostream& operator<<(std::ostream& out, gsl::byte const&) {\n    out << \"operator<< byte!\";\n    return out;\n}\n}\ninclude \"catch.hpp\"\nTEST_CASE(\"Foo\") {\n    gsl::byte b{ 0x20 };\n    //INFO(b);  //<-- compilation error if uncommented\n    REQUIRE(b != b);\n}\n```\n\nUpon further digging, this works as expected on Windows\n```cpp\ninclude \ninclude \nstd::ostream& operator<<(std::ostream& out, gsl::byte const&) {\n    out << \"a byte!\";\n    return out;\n}\ninclude \"catch.hpp\"\nTEST_CASE(\"Foo\") {\n    gsl::byte b{ 0x20 };\n    REQUIRE(b != b);\n}\n```\nNote the missing namespace.\n\nAfter even more digging, the problem is with ADL lookup.\nUnder some circumstances, gsl::byte is created as enum class byte : .... Under different ones, gsl::byte is just an alias, created by using std::byte;.\nWhen gsl::byte is defined as an alias, an operator<< in the gsl namespace cannot be found using ADL, and thus cannot be used.. It is a problem with ADL and aliases in general, but yeah. The proper fix is to use StringMaker specialization which will be found either way (does not matter if it is provided using the alias or not).. I'd prefer if this was expanded to include all of the reporter parts first.\n. @martinmoene Well, I don't think that waiting for larger piece of work worked. \ud83d\ude03  Are you still around to rebase this to something with more reasonable history?. Thanks. There are basically three points in this\n1) Returning the number of tests/reporters etc. in return code is weird and unexpected\nThis one I agree with, but because of backward compatibility is very likely here to stay.\n2) Catch shouldn't use the number of failed tests as return code.\nThis one I don't agree with. Tests failing is an error. If you care that you cannot tell whether you have XYZ failing tests or are leaking memory, you care about the wrong problem.\n3) Clamping the return code is weird.\nBlame POSIX. Both waitid and waitpid only keep lowest 8 bits of process return value, so a return value in the multiple of 256 would lead to a false negative otherwise.\nAnyway, 1) and 2) can be easily solved by defining your own main function, that returns different exit codes.\n. Should be fixed, but another release isn't in the pipeline for a bit.. It seems that you do not have support for modern signal handling.\nTry defining CATCH_CONFIG_NO_POSIX_SIGNALS in all TU's.. Are you linking against the C++ standard library? delete seems to be missing from the final binary which is generally provided by the stdlib. If you are using gcc (and not g++) it does not link libstdc++ by default and you need to add it manually: -lstdc++.\nYou should also check that you target even has new and delete support. Judging by your compiler, you are building for some embedded devices and not all embedded device support dynamic allocations.. Just making sure: The short provided code fails to link when using g++5.4, single header version of Catch and when CATCH_CONFIG_MAIN is defined?\n. @bifurcation You are supposed to use the single-include version.\nIt is possible to use the headers in include/, but then you have to also compile and link the implementation files in there and you are not provided with any guarantees vis-a-vis stability and functionality.\n. Since Catch 2.0.0, using include/catch.hpp directly is unsupported. If you properly compile and link all implementation files from include/ tree, it should still work, but we recommend to use single_include/catch.hpp instead.\nPCHs are somewhat supported (AFAIK it works, but we haven't had many users), see our documentation.. 1. How does GNUInstallDirs deal with Windows?\n\n\n-Werror by default is here to stay. Everything outside of single_include/ is for developer convenience. However, I am willing to add a toggle that prevents it from being used.\n\n\nRemoving an externally used option with no warning isn't going to happen.\n. Some other projects (e.g. Microsoft/GSL) use the NO_SELFTEST option when obtaining Catch to build it, so removing it without notice is a bad idea*.\n\n\nAnyway I am not against changing the CMakelists to accommodate needs of maintainers, but quick testing shows some trouble with the PR as proposed:\n\nAs mentioned before, GSL and other users of NO_SELFTEST would have to build all of Catch's tests on install\nDocumentation is installed under CatchSelfTest folder\n\n* As much as I think that cloning ~9MB repo instead of downloading ~400KB released header per build is dumb, people do it anyway.. @martinmoene Possibly yeah. I always disliked the \"simulate namespacing by prefixing names with strings\" approach, but CMake doesn't really have better option as far as I know.. I took the liberty of changing the message to be deprecation warning instead of just status.. Yeah, this is the great C macro whack-a-mole, where different macros expand differently by platform and have to be enumerated to be parsed-back to sane output.. What production? The released artefact for further consumption is single_include/catch.hpp and potentially the reporters in the same folder. Everything else is for development purposes.. So if I understand this correctly, you want to build the tests before packaging the single include header?. Some further changes towards making packaging easier are ongoing in #1150 . @SoapGentoo Next week, I have several fixes I want to bring in before next release.. The new version is out.. Sorry, I have been a bit busy lately with my master's thesis.\nUltimately I don't think it provides enough value for inclusion in the main release, but it might be useful to some people. Since of the things I want to do, when I finally find enough time, is to add various other utility macros and matchers that are not worth inclusion in the main header to contrib/, this might be a good start.\nAs a side note, do you know about -# option? If you are keeping to one TU per tested class, it is already fairly close to the tagging you want to do (in fact, its exactly how we use it in a project).. -# adds filename (not including extension) to the tags of each test case. E.g. if you have file buffer-tests.cpp containing some TEST_CASEs, when you pass -# each of the test cases will be tagged with [#buffer-tests] in addition to their usual tags,. Not sure if I was understood:\nI don't think it should be included in Catch mainline, but if you open up a PR, it can be part of contrib/, i.e. auxiliary helpers for Catch.. There is no documentation right now.\nThe idea of contrib is to have a place where things that, for some reason, are not part of Catch itself, but should be bundled somewhere close. As of now, it contains helper CMake scripts that can auto-add Catch tests to CTest. These are obviously useful for some of our users, but not all (and also obviously cannot be part of Catch proper).\nThe plan for you would be to add something like contrib/catch_extra_macros.hpp, add some description into documentation (start a new file for contrib documentation). To keep it going out of date, there should also be a test project for it, like the one examples have.. Apart from that, CMake/Findcodecov.cmake probably shouldn't be changed to make future updates simpler. One possibility is to have CATCH_ENABLE_COVERAGE also define ENABLE_COVERAGE, the other is to just leave it unprefixed. Personally I'd go with the former.. From release notes:\n\n\nRemoved deprecated matcher utility functions Not, AllOf and AnyOf.\nThey are superseded by operators !, && and ||,\n\n\nThat is a yes.. I was busy for a bit, but I am back now. Some quick notes:\n1) Not sure if you just did search+replace, but the changes to the documentation should not be there.\n2) This #if __cplusplus >= 201703L does not work with MSVC. MSVC still defines __cplusplus to 199711, so this patch will not work to fix MSVC deprecation warning as-is. This is why AppVeyor builds fail.\n3) Single include version should not be touched -- it is regenerated during CI build, but in-repo changes should happen only during release.\nBut the main thing is, that you should not be getting the warnings with current release. Are you using older version from vcpkg?\nAnyway, I am going to fix up the PR later.. This should be solved since IIRC 2.3.0. This is now fixed in Clara, so there should be a fixed point release next week.. Which one of the two registration scripts?\nNeither of them should, but ParseAndAddCatchTests.cmake needs to have PARSE_CATCH_TESTS_NO_HIDDEN_TESTS set to exclude hidden tests.. Sorry for taking so long, I ended up being very busy and there was a discussion going on whether we should keep using #include <catch.hpp>, or should move to #include <catch2/catch.hpp>. We ended up deciding to go with the latter, so we will be moving documentation/cmake/pkgconfig towards that, starting after next release (where we want to warn people that the change is coming).\nRelated discussion: #1202 . Thanks. One of your tests calls to abort(). Maybe an assertion is firing?. Catch does not support multiple threads hitting assertions/sections, but as long as only one thread touches these, the use of multiple threads is OK.\nHowever, the test as it is now has another problem, in that if the assertions fail, it attempts to destruct a non-joined/non-detached thread, which aborts the program.\nJudging by your symptoms, my guess is that\n1) One of the REQUIREs fails on debian\n2) This leads to stack unwinding out of the TEST_CASE\n3) s1 destructor is run. Because it is neither detached nor joined, the destructor aborts the program\n4) Catch catches SIGABRT and reports on it.\nChecking this is easy enough, just detach the thread after starting it. It shouldn't abort anymore, but you will have a permanently running thread instead. Alternatively use debugger to look around the incriminating code.\n. @KingDuckZ If I understand you correctly, my_assert calls into report_failure and that calls into REQUIRE_FALSE.\nThe problem here is that you are throwing an exception in a destructor that is not marked noexcept(false), see this example. If you don't rely on report_failure aborting the execution of a test, you can instead use the CHECK family of macros, as those don't throw exceptions.\n. It won't, because the fundamental difference between the two assertion families is that a failedREQUIRE stops the test from continuing, while a failed CHECK doesn't. This is done by either throwing, or not throwing, a special exception.. There have been 2 PRs in 2 days for this, so there is definite interest, but I am going to ask the three of you to hash it out and propose one PR.\nLooking through them, some notes:\n1) I think the name for the package should be something like Catch2::Catch, along the lines of Boost::filesystem and Qt::Core. Because the old name was fairly ungoogleable, we are trying to slowly migrate places to the new (marginally more searchable) name and there is no back-compat to break.\n2) #include <catch.hpp> vs #include <catch/catch.hpp> is a split that kinda happened because it seemed like a good idea at the time. Our preferred version is the first one, but people wanted to have the Catch include \"namespaced\" by a folder. Because the intended usage was to just version the single header inside user's own repo and CMake integration was an afterthought at best, the change was implemented for CMake and... well here we are.\n3) Huge \u2795 for the example project using the changes.\n4) I cannot find what features does target_compile_features recognize and how they are spelled in CMake documentation. Is there a saner way than getting a binary for CMake 3.1 and just printing CMAKE_CXX_KNOWN_FEATURES?\n. @SoapGentoo There is more to this world than Gentoo and other Linux distros.. Squash this a bit and I'll merge it.\nFiguring out what the do about the include paths will have to come later.\n. Thanks. Would it have any practical effect if all of the C++11 features used in Catch were explicitly listed?. There have been 2 PRs for this in 2 days, so I am gonna redirect you to #1170 to hash it out.. I've already run into the same issue with json iterators, but didn't have time to fix it at the time.\nAgree that the order should go StringMaker, operator<< and then fallback detections (enums, ranges etc).. Thanks. I'll add -Wpedantic to the CI builds.. This is actually working mostly as expected, but float comparisons are hard. std::numeric_limits<double>::epsilon() is about 4e18 values apart from 0, so it should not match by default.\nThe reason why it matches with the proposed solution is that the resulting interval of matched numbers \ncontains about 9e18 doubles.\n. @sfinkens That would be Approx::margin.\nAnyway, since there hasn't been any followup on the original issue, I am going to close this.. This makes sense I guess. After some off-site discussion this PR is effectively abandoned -> I am going to close it.. Catch Classic used to implement generators, but they were never documented or officially supported because the old implementation did not work together with sections.\nWe have an aggregation issue for this request, #850, and it is definitely on the map, but it has to work properly with sections before it is included in Catch2.. The underlying reason for change is that Clara (the CLI parsing library) moved to use char* argv[] for its argument handling. This was done because only two signatures are fully compliant according to the standard: int main() and int main(int argc, char* argv[]) (see #615).\nAlso note that char** isn't convertible to const char**, but we are thinking about providing a const char * const * argv overload.. Thanks, looks good, but please don't use 2 space indent next time.. Took a look at the failure, C4800 strikes again.\nOtherwise looks good, so I am going to fix the PR up and merge it.. Right, I still can't push into your repo.. Reading the documentation I think that the top level binary dir is what is actually desired here.\n@djrollins @lilianmoraru thoughts?. is_range is a new addition in v2.1.0.\nAlso, this seems to be a VS 2015 bug, as far as I can tell 2017 properly keeps the context unevaluated -- both the AppVeyor logs and my local installation show 2017 passing compilation properly.\n(Btw, you might want to split up your builds, ATM you build with both 2015 and 2017 at both AppVeyor images). I got 2015 working locally and here is a workaround:\n```diff\n--- a/prosoft/core/tests/src/filesystem_iterator_tests.cpp\n+++ b/prosoft/core/tests/src/filesystem_iterator_tests.cpp\n@@ -27,6 +27,13 @@\n#include \"catch.hpp\"\n+namespace Catch {\n+template <>\n+struct is_range {\n+    static const bool value = false;\n+};\n+}\n+\n using namespace prosoft;\n using namespace prosoft::filesystem;\n                 e = *i++;\n                 CHECK(i == end(i));\n             }\n\n\n+\n                 AND_WHEN(\"include apple double and skip hidden are enabled\") {\n                     constexpr auto opts = recursive_directory_iterator::default_options()|directory_options::include_apple_double_files|directory_options::skip_hidden_descendants;\n                     recursive_directory_iterator i{root, opts};\n--- a/prosoft/core/tests/src/filesystem_tests.cpp\n+++ b/prosoft/core/tests/src/filesystem_tests.cpp\n@@ -35,6 +35,14 @@\n\n#include \"catch.hpp\"\n+\n+namespace Catch {\n+template <>\n+struct is_range {\n+    static const bool value = false;\n+};\n+}\n+\n using namespace prosoft;\n using namespace prosoft::filesystem;\n```\nBasically the idea is to explicitly specialize Catch::is_range, so that the MSVC 2015 declval bug isn't invoked.. I am going to have to think about this -- changing existing semantics in non-backward compatible way is always likely to break people, but introducing new tag feel weird.. Thanks. That shouldn't happen.. GCC 4.8 is supported, but not neccessarily 4.8.0. Are newer point updates available to you?\nWhat you are seeing is a compiler bug, where for some ungodly reason alignof(T) does not evaluate as compilation constant. You could probably monkey-patch around the problem by replacing it with 8 and hope nothing breaks (if it does, provide larger alignment values until it stops :-) ).\nBtw, what broke with VS 2017?. Are you including windows.h? Alternatively, I think the MFC headers do this as well -- the problem is that if you include them without special define (NOMINMAX), they define a min and max macro. As you would imagine, this can break everything quickly.\nTry changing these lines so that all mentions of min and max are wrapped in extra parentheses, like so\ncpp\n        static constexpr result_type (min)() { return 0; }\n        static constexpr result_type (max)() { return 1000000; }\n        result_type operator()() const { return std::rand() % (max)(); }. That is interesting. Somehow compiling the tests with ASan leads to std::domain_exception::what returning empty string.. Thanks for the follow-up, Ill admit I kinda dropped this issue's priority because I expected the debugging to be really painful.. Can you rerun with verbose output?\nQuick guess is that in FreeBSD's C library macros like inf, NAN expand into a currently unknown expression and thus aren't normalized.. After auto&& res = func(3.0), the reference in res is dangling and any access to it is UB.\nIn other words, the bug is in your code.. Sure I guess? So far nobody asked nor volunteered, but there is no harm in adding translations.. That... shouldn't happen.\nJudging by what errors out, are you building a UNICODE binary? I took a look and it seems that we have a regression in how we stitch-in windows.h, so that could cause it.. @JoeyGrajciar Since there has been no followup in 8+ months, yeah.. At this moment signal/SE handling is set once per binary, and used that way.\nWe probably could support turning them off selectively, at some point in the future.. What version of stdlib is your Clang installation using? It seems that you have C++17 enabled, but std::uncaught_exceptions is not provided by the stdlib.. You can also force use of std::uncaught_exception instead, by defining CATCH_INTERNAL_CONFIG_NO_CPP17_UNCAUGHT_EXCEPTIONS. However note that next release will change this to CATCH_CONFIG_NO_CPP17_UNCAUGHT_EXCEPTIONS, to keep it inline with the other configuration macros.. I cannot truly speak for the original intent, but my understanding is that the main purpose of Catch always was to make unit testing easy. Towards that end, it provides nice syntax, exists in single header and the documentation is written in a way that means that all you need to get started is wget https://github.com/catchorg/Catch2/releases/download/v2.1.2/catch.hpp in the folder with tests and then start coding.\nOver time, a pattern where people expect to use Catch by cloning the whole repo and then installing it or using it as a CMake subproject.  This is not really the intended usage, but over time we have added some support for this, in the form of CMake install target, CMake find_package(Catch) support, pkg-config support and so on.\nAfter a discussion offsite,  we are in favour of moving documentation and so on to use catch/catch.hpp, in part because it better supports optional headers (like reporters), so they can be placed in catch/teamcity_reporter.hpp. (We might go with catch2/catch.hpp though).\n. We do want to go with #include <catch2/catch.hpp> because of the rename.\nWe would also prefer to switch various distribution methods at roughly the same time, so e.g. moving vcpkg to the new include path before the main repo's CMake does, would be counterproductive (as a cross-platform project could find itself needing different includes based on what distribution method it used to get Catch).\nSpecifically with vcpkg I already talked to Robert Schumacher offsite. The plan right now is to change its portfile to be based on the git repository, rather than downloading the header directly. This should let it easily provide CatchConfig.cmake and the contents from contrib/ while staying up to date.. I am going to keep this issue open until the change happens, so that it is easier to find.. @SoapGentoo @MikeGitb I was busy with non-Catch related things, but this change is now happening in dev-new-cmake branch.\nBoth pkgconfig and installed cmake package should now provide <catch2/catch.hpp> as path, what needs to be done is\n- [x] Decide what to do about using Catch as a subdirectory, because the current folder structure does not support the new path.\n  - The internal folder structure is now $REPO/single_include/catch2\n- [x] Update support scripts to work with the new paths\n- [x] Update documentation to reflect these changes\n- [x] Migrate external users to the new path\n. @MikeGitb Interesting. I tried it locally and the install step went as supposed to.. Nevermind, d65b09fb8ae48 broke it and I tested with an older commit.. @MikeGitb @SoapGentoo This is now in master, pending next release.\nI also updated pkg-config support to provide the right flags to do #include <catch2/catch.hpp>.. The CMake files have been getting increasingly large, making them annoying to work with., so they've been split into pieces.\n. Yeah, this is done.. Ok, thanks.. Use single_include/catch.hpp, not include/catch.hpp.. single_include/catch.hpp is meant for outside consumption and is the result of stitching together everything inside include/ into single file. On the other hand, include/catch.hpp is meant for development. It could be used to compile tests against, but then you also have to compile all implementation files in include/* and link against them.. Yes. We have had some issue with link times before, but that was caused by LTO builds.\nFor non-lto builds, there is not much we can do except concluding that MinGW link times are awful.. I am not against adding support for obscure platforms, but I don't think this PR is worth merging on its own as this is the first time this request came up.\nHowever, if you provide a PR that provides full support for djgpp, it will likely end up being merged*\n* Depends on how big the required changes end up being.\n. Yeah, that looks like the <regex> fuckup in libstdc++4.8. Can you check why the guard there does not disable it?\nAd 2) No, create catch_isnan.h and catch_isnan.cpp along the lines of catch_uncaught_exceptions.h (namespace, include guards, etc). If we end up needing even more workarounds, we will probably end up creating an aggregate header, but that is out of scope for this PR.\nAd 1) I would agree if it was used in the main project, but it is part of tests so it shouldn't mix with files from the main project. Again, if more workarounds end up being needed in the future, we will end up adding helper headers for the tests, but not in this PR.. The changes look good now. If you squash the PR down to more atomic commits, I am going to merge it.\n. Ad 2, is the issue that NaNs are not detected properly? (isnan(NAN) returns false)\nAd 1, IIRC I have that from Jonathan Wakely... yeah GCC + <regex> is a crazy mess, the guard tries to check if a newer version of libstdc++ than 4.8 is used (because 4.8 does not work at all, 4.9+ mostly work).. Thanks for the good work.. That does not sound like the XML is invalid, but rather that your terminal shows it incorrectly.. Not merged to master yet (and I found at least one bug in the process of adding tests).. Do you have a reliable repro, or is it still an intermittent thing? The JUnit reporter is ran multiple times on each commit and it doesn't reproduce with our tests, so it's hard to tell what is going on.. @sd-x That's actually quite useful, thanks.. Ooops, sorry. I reuploaded the files and reporters and it should be fixed now.. Finally got around testing this and, after I played with the project and google around a bit, I think the sanest solution is to just stop supporting SEH for C++/CLI code.. After more messing around, there is indeed a potential bug in the base class for streaming reporters, but it is fairly harmless. The bug is that after StreamingReporterBase::testRunEnded is called, some stored information is thrown away, and if it is accessed, it will lead to dereferencing a nullptr. Doing this should not be necessary, as the destructor should clear those data members anyway and it would prevent this kind of mistakes.\nHowever, a call to IStreamingReporter::testRunEnded should only happen when the test run is over, and our internal logic prevents this from happening during standard operation. There are 2 ways it can happen anyway:\n\nTriggering structured exceptions under debugger. For some reason, if the structured exception reaches debugger's handler, then it is told to resume at the position. This means that under debugger, this code will forever loop on the second line\ncpp\n    int* p = nullptr;\n    int x = *p;\nuntil something kills the binary (this can be reproduced by using e.g. compact reporter, as it does not trigger the same error the console reporter does).\nThe exception handling mode being set to asynchronous, i.e. using /EHa compiler flag. This causes a structured exception to be encountered twice, once in the vectored exception handler and once as a regular exception. The second time it breaks because it also forces a reporter to work after testRunEnded has been called because of the vectored exception handler.\n\nTakeaways\n\n\" has stopped working\" windows popping up is intended behaviour.\nTo avoid messing with debuggers and other programs that hook up to structured exception handlers, our handler does not swallow the exception after reporting, but passes it on. This usually means that it goes up to the system's handler, which kills the binary and reports a problem.\nCombination of C++/CLI and CATCH_CONFIG_WINDOWS_SEH will cause error overcounting and weird behaviour, but it should be fairly harmless.\nThere is no way to fix it, but it is possible to detect when code is compiled as C++/CLI and we could disable SEH instead. However, I think overcounting errors is better than possibly not reporting them.\nCombination of /EHa in general and CATCH_CONFIG_WINDOWS_SEH will cause error overcounting and weird behaviour, but it should be fairly harmless.\nAs far as I can tell, MSVC does not provide macro to detect which version of exception handling is used. This means that even if we wanted to, Catch2 cannot autodetect this and disable SEH. Again, I think that overcounting is better than silently crashing + /EHa is relatively uncommon, so CATCH_CONFIG_WINDOWS_SEH will remain the default when compiled with MSVC, but I will add a note about this problem to the documentation.\n. If you switch to the Catch1.x branch, the link in readme will go to the latest version from there.. Yeah, Clara does not include <optional> when enabling support and the bug got hidden because libstdc++ includes it transitively in <map>, <set> and others.\n\nAlready fixed it in Clara, going to update the version in Catch2 and make a patch release either late Sunday or Monday.. v2.2.1 is out. Sorry, this is caused by incorrect clamping of return values in 355b3f99524.. A patch release fixing this and #1214 will be out late Sunday/Monday.. v2.2.1 is out. Thanks for the PR, I cleaned it up a bit before merging.. I have no idea actually, but I don't see a reason for them not to work normally.. There are 2 bugs in this, one is already fixed as part of #1214, the second one is that OSX 10.11's Clang claims to support C++17 but does not provide std::uncaught_exceptions.\nQuick google says that 10.12 has been released September 2016, may I suggest an update?. >Better said then done. \nFair enough. If I find someone who can tell me how to detect OS X versions properly, I can fix it, but that will have to wait a bit.. std::rethrow_exception should be a part of conforming C++11 standard library and is required to compile Catch2.. Probably.\nIn the meantime, you might want to try Catch Classic in the Catch1.x branch, it still supports C++98.. Duplicate of #1215 -> Fixed in v2.2.1. After some investigation, both of these have the same underlying reason: the machinery for normalizing the output to be comparable between different computers is a bit creaky and fails to work on your PC properly.\nATM there are ~3 issues where the machinery fails, so I will have to work on that soon.. Apparently the new VS 2017 update has a bug where __FILE__ always returns lower cased string and AppVeyor decided to update. We will likely have to improve normalization in the checks.\nI am not sure if you want to escape all non-ascii text, or only sequences that do not make a valid UTF-8 sequence, because your PR as it stands does the former -- the result of printing this Here be \ud83d\udc7e to console using changed xml reporter is \"Here be \\xF0\\x9F\\x91\\xBE\".\n. Breaking valid UTF-8 output is unacceptable.\n9171e9b55c26515d012364ae61ae3a836ca597d3 modifies the XML encoder to deal with UTF-8 semi-properly instead and I am going to merge it to master once I add more tests.. Looks good as an interim solution.. Your env does not support POSIX signals properly.\nAdd CATCH_CONFIG_NO_POSIX_SIGNALS define to your build.. Nice find.\nAs to the approval tests, you actually are supposed to approve them and commit them alongside the changes. It will still fail on Windows anyway, because current VS 2017 has a bug where it reports wrong paths, so the approvals fail, but it should pass on Travis.. I squashed the commits and merged them, thanks.. Why do you believe these should succeed?. No worry, I expected as much.. The second warning is definitely bogus, but I'll take a look at the null deref.\nBtw, looking through the changes, you might be interested in REQUIRE_THROWS_MATCHES(expr, exception-type, matcher).. Finally got around this and it is definitely a false positive.\nThe analyzer suggests that the problem occurs when IMutableContext::currentContext is a nullptr at line 4619 in function getCurrentMutableContext(). However it does not look through the single function call in that branch, IMutableContext::createContext(), which does this\ncpp\ncurrentContext = new Context();\nObviously, there is no way to have the currentContext still be nullptr after this function call ends.. As there has been no followup and, as far as I can tell, there is no issue, I am going to close this.. This is because CAPTURE and INFO macros are scoped. Once the function TryCreateFoo returns, the message has been forgotten and is not available to the reporter.\nAfter pondering this a bit, I would suggest using REQUIRE_THROWS_MATCHES instead and somewhat modified TryCreateFoo:\n```cpp\nstd::string makeString(Foo const& f) {\n    std::stringstream sstr;\n    sstr << f;\n    return sstr.str();\n}\nvoid TryCreateFoo(bool willThrow, std::string message) {\n    Foo obj(willThrow, std::move(message));\n    throw makeString(obj);\n}\n```\nThis is a bit of a hack, but the test will still fail (because the wrong type of exception will be thrown), and the string will be shown properly.\nNote that this will also work with CHECK_THROWS_WITH as long as the stringification of Foo will always be different from the desired exception message. If this condition does not hold, you might get false positives in your results.. I am not quite sure where you want the <info> element to be, but in the process of looking at this I found out that we have a bug in our support for event listeners. We promise that they will be called before reporters, but right now they are called after reporters.\nIf I fix this, the output will be\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<info></info>\n<testsuites>\n  <testsuite name=\"TestProject.exe\" errors=\"0\" failures=\"0\" tests=\"1\" hostname=\"tbd\" time=\"0.000326\" timestamp=\"2018-04-06T10:34:12Z\">\n    <system-out/>\n    <system-err/>\n  </testsuite>\n</testsuites>\nis that what you intended?. INFO and CAPTURE macros allow you to create output that is only provided if an assertion fails, like so:\ncpp\n...\n    int i = complexFunction();\n    CAPTURE(i);\n    REQUIRE(...);\nIf the REQUIRE fails, then the value of i is added to output. If it doesn't, then there is no extra output.. You can change this during compilation:\nhttps://github.com/catchorg/Catch2/blob/master/docs/configuration.md#console-width. I actually quite like this suggestion.. libstdc++ on Windows strikes again!\nI'll see about adding an early bailout to the loop, so we don't spin forever when met with low precision clocks.. I added an experimental bailout code that aborts the calibration after 3 seconds.\nNote that benchmarks under such timer should be taken with huge grain of salt and will not be overly representative of reality.. Nice find. We had an overload for this case ready, but it was missing a cast.\nI fixed it and added tests for this and signed char arr[] = \"123\"; case.. I am not sure if I want to merge this. We have plans to move to #include <catch2/catch.hpp> everywhere soon(ish), see #1202.. Upon further thought, I've decided to merge this. While we will remove it in the future, it is probably better to have the include paths uniform across platforms in the meantime.. @yurivict Can you check what happens when you run Catch's self-test on FreeBSD?. I have been a bit busy so I didn't notice that it has been resolved since. I am going to tag this with a \"Revisit\" label, to check if we can report this to the user somehow.\nThank you for reporting back.. IIRC tag aliases are CLI facing, not test facing. This means that the intended use is this\n```cpp\nTEST_CASE(\"foo1\", \"[foo]\") { ... }\nTEST_CASE(\"foo2\", \"[foo][bar]\") { ... }\nTEST_CASE(\"foo3\", \"[foo][bar][baz]\") { ... }\nCATCH_REGISTER_TAG_ALIAS(\"[@special-foo]\", \"[foo][bar]~[baz]\")\n```\nand after you have compiled the tests into binary, this ./tests [@special-foo] will execute only test \"foo2\" and not the other ones.. Yeah, it is completely impossible to capture stdout/stderr in standard C++ and fairly hard to do even with platform specific code (e.g. even Windows binaries have different behaviours dependent on their respective target).\nOTOH it is possible to capture things that go through std::cout, std::cerr and std::clog, so these are captured.. > This means the only way to make a parser work reliably is with -o and then parse the file.\nThis is a good idea in general. The capture is active only during a test case run, so user can break the output with a Listener when a test case is not running.. Interesting. Is this because the file hasn't been flushed, or because the plugin can be called before the test run is actually finished?. @X-Ryl669 Actually e.g. unlink is POSIX and not a part of standard C. Anyway, master now contains an experimental, opt-in, support for redirecting all output to stdout/stderr.. I made some changes for Python2 in cases where the default encoding is not utf-8. Windows terminal will still break horribly when approval tests fail (because it defaults to encoding that cannot represent some parts of the output), but it should generally work better.. I wonder how many people actually ran into this problem, but it is a nice idea \ud83d\udc4d \nI see there are no tests though.. As it turns out, this still won't allow the code to compile under MSVC. I will have to think about it. Without the workaround working at least on the big three, I wonder if it wouldn't be better to point users to typedef-based workaround instead:\n```cpp\ntemplate \nstruct Fixture { };\nusing fixture_int_int = Fixture;\nTEST_CASE_METHOD(fixture_int_int, \"a\", \"[b]\") {\n    SUCCEED();\n}\n```. @BRevzin See our contributing.md for explanation.\nBut in reality that one is on me. Since the test didn't compile on my primary platform, I didn't bother updating approval tests from Linux.\nAs to the new version of the workaround, I will merge it in later today.. This is an old problem with macro parsing being different from code parsing. The short version is that by preprocessor rules, there are three arguments there, std::pair<int, int>(1,4) and std::invalid_argument. Some assertions use variadic macros to workaround this, but it can only work in assertions that are in reality single-argument, but can be parsed weird. Assertions with multiple arguments cannot be made variadic and thus are unable to deal with commas inside template argument lists properly.\n. You are not the first person to have a massive link-time regression when using some variation of Windows-native gcc, see e.g. #1205. As far as we can tell, this does not affect MSVC nor GCC on Linux, so it is something specific about interplay between GCC and Windows.\nAnyway, I don't have MSYS here, but I do have Nuwen MinGW and WSL. Testing these, I get these numbers:\n\nWSL + g++ 5.4 needs ~5 seconds to compile Catch 1.8.2 main\nWSL + g++ 5.4 needs ~7.6 seconds to compile Catch2 2.2.2 main\nWSL linking against single test file requires ~0.33 s for Catch 1.8.2\n\nWSL linking against single test file requires ~0.55 s for Catch2 2.2.2\n\n\nMinGW g++ 7.3.0 needs 3.8 s to compile Catch 1.8.2 main\n\nMinGW g++ 7.3.0 needs 8.2 s to compile Catch2 2.2.2 main\nMinGW linking needs 2.3 s to link Catch 1.8.2\nMinGW linking needs 9 s to link Catch2 2.2.2\n\nIn other words, MinGW links terribly slowly, but should not link that slowly. Are you using SSD or spinning rust?\n. ~Do you have CMake in version 3.8 or later? Earlier versions of CMake do not recognize 17 as a valid value for CMAKE_CXX_STANDARD and silently fall back to whatever is the default.~\nNevermind, if that was the problem, the compilation error would be a different one. The problem here is that whatever stdlib you are using does not provide std::uncaught_exceptions in C++17 mode. You can force Catch to fallback to std::uncaught_exception by defining CATCH_CONFIG_NO_CPP17_UNCAUGHT_EXCEPTIONS.. @acgetchell To me it seems less like ClangTidy doesn't work with the define and more like your compilation database is broken:\n\u001b[0K$ git diff -U0 HEAD^ | /usr/lib/llvm-6.0/share/clang/clang-tidy-diff.py > output.txt\nError while trying to load a compilation database:\nCould not auto-detect compilation database for file \"b/tests/main.cpp\"\nNo compilation database found in /home/travis/build/acgetchell/CDT-plusplus/b/tests or any parent directory\njson-compilation-database: Error while opening JSON database: No such file or directory\nRunning without flags.\nError reading configuration from /home/travis/build/acgetchell/CDT-plusplus/b/tests: directory doesn't exist.\nError reading configuration from /home/travis/build/acgetchell/CDT-plusplus/b: directory doesn't exist.\n1 error generated.\nError while processing /home/travis/build/acgetchell/CDT-plusplus/b/tests/main.cpp.. Ok, this should be fixed. But we strongly recommend migrating to Catch2 when you can use VS 2015.. v1.12.2 is out with the fixed includes.. No.\nThe problem with EXPORT commands (as opposed to install(EXPORT), because it wouldn't be CMake if things were simple and obvious) is that\n It registers packages in user-specific repository\n It does not install utility scripts the way the proper install does\n* It points to the build tree\nThe last one is the largest problem, as it means that if you clone the repository and later delete, or move, it, EXPORTed targets will no longer work. Instead, users should install the current package, either globally with admin rights, or locally by setting CMAKE_INSTALL_PREFIX.. I updated the documentation in ebf89000f19f896fd2fec4755b8135e88d24e318 but missed this issue.\nAnyway, no macros are thread-safe.. VS 2017 update has a bug that breaks approval tests, so those builds are currently allowed to fail.\nAnyway, changing <assert.h> to <cassert> is okay, but the other changes are not -- some platforms (the usual culprit is QNX) actually enforce namespace separation between <stdio.h> and <cstdio>, such that the former provides only non-namespaced functions (e.g. printf) and the latter provides only namespaced ones (e.g. std::printf). This means that without also properly namespacing all uses of C stdlib, the changes have potential to break compilation on some platforms.. Ok, this version will work.. I forwarded this one to Phil, because I don't have OS X nor any Obj-C experience. Alternatively you can provide a PR to fix this (ideally while enabling Obj-C CI on Travis).. Honestly most of these are extremely low priority, but there is no harm in merging them.. Define CATCH_CONFIG_NO_POSIX_SIGNALS to fix it for now.\nThe underlying problem is that MinGW is detected as generic GCC variant, so POSIX signals are expected to work. However, they do not.. The problem with multiple reporters was that they never worked properly. That is, if they had differing internal requirements (e.g. whether they should always be notified of an assertion, whether they desire stdout and stderr to be captured, etc), the configuration of only one of them was used.\nWe could've jury-rigged checking to see if the actual reporters have different configurations and error out only if their configurations are not compatible, but that would still leave open the question of what to do with the -o flag (pretty much no 2 reporters provide sane output when they are interleaved to the same output). In the end we've decided to just disallow multiple reporters and explicitly force Listeners instead.\n\nReporters API has been very volatile\n\nThis is interesting, the only change to that I remember is adding a (default-implemented) new method that is called in the event of fatal error. What changes have you ran into?\n. Huh, so it was. The linked issue does not seem correct though, did you mean #590 ?. The link in the commit message should go to the correct issue before it is merged to master.\nThanks for the PR btw.. I had some spare time so I made the changes myself.. Strictly speaking, we do not support UTF-8 and thus it is the error of the user if he runs into trouble with this, but there is no reason not to guard against it. Thanks,. @ianhattendorf I forgot to address that before, but as far as using /analyze during CI is concerned,I would rather avoid it, at least for each commit, as the time spent on Windows builds is already enormous. I think it would be possible to create a new branch that has an /analyze build enabled and periodically merge the master into it.\nIf you open up a PR, I would merge it.. Try using -s flag for now. The internals were changed so that successful assertions/tests/etc are not passed all the way down to reporters unless -s (and thus output for success) is enabled, but we didn't take into account that some reporters always need all results.. Can you guys check if the current master addresses this issue? The JUnit and XML reporters should once again report all of the assertions even without -s.. Thanks.. The handling of block comments should be as robust as possible.\nHowever, there is also a more philosophical question that needs answering: Should comments be kept inside the single header file, or should they be removed? The current behaviour is to leave comments intact, but block comments are assumed to be part of the copyright notice and are removed.\nThing is, I don't particularly like that assumption -- after all, I've found this issue because I wrote an actual comment inside a block comment and broke the single header.. Interesting, hopefully, I'll find some time to test it out later.\nHow does it deal with repeatedly included headers? And if it does, does it disambiguate between these two includes?\n```cpp\nif defined(_MSC_VER)\ninclude \"foo.hpp\"\nelif defined(clang)\ninclude \"foo.hpp\"\nendif\n```. The first commit is good, I was too hasty while making the fix for TempFile and stupidly left some of the old checks in.\n~However, I cannot reproduce the problem in the second commit using Nuwen MinGW distro. This means I will accept the first one, but not the second one.~ Nevermind, figured it out. The proposed fix is wrong though.. > This method to enable colours only works on windows 10.\nAnd what happens on other versions of Windows?. I got someone with an old VM to test it, and the behaviour is the same as before. This means that it is ok to merge.. So, there are two things here to unpack.\n1) Reporter verbosity is a vestigial feature, that currently only has impact on the output of --list-tests option. The next major version will contain a rework that, among other things, will mean that unsupported verbosities are silently ignored.\n2) That you want to see the unexpected exception type in the output. This is not supported (and is currently not planned to be).\nIt is important to note, that what you see is not a truncated output. It is the entirety of the actual message that was thrown during the test. What trace shows extra is the exception type, done via platform-specific demangling machinery.\n. Interesting, thanks.. Thanks.. Interestingly, during my informal search I haven't really found many people using the -b flag, much less those who prefer the old behaviour.. That sounds almost exactly like what -b does, as Catch first checks for attached debugger before trying to break.\nAnyway, I'll see about adding this feature back, but lately a lack of maintainer time has been a real issue so ETA may vary.. ~Yeah, that is a bug/oversight, probably from prototyping the code outside of Catch at first.~ Actually nevermind, it was intentional. While the expected usage is such that the target ulps should be less than the threshold for hex-stringification, I wanted to make sure that the string looks the right way even if someone used a high tolerance.\nedit:\nIs that while using libc++ as the stl? We had a different issue with Android where the problem was that the user was not providing -stl=libc++, so it was using the old and obsolete C++ stdlib.. As far as I know there is no good reason, just an artifact of the original implementation.. Yeah, some of them do not yet exist. We should probably mark those that are not supposed to work yet, or get them in.\n@martinmoene I assume you are still too busy with other stuff?\n. Nice, thanks.. Currently, there is not.. What @BiCapitalization said. You need to implement your own streams but that isn't that hard.. @AlexeyIgnashin \n```cpp\nclass cout_buff : public std::stringbuf {\npublic:\n    ~cout_buff() { pubsync(); }\n    int sync() {\n        int ret = 0;\n        for (unsigned char c : str()) {\n            if (putchar(c) == EOF) {\n                ret = -1;\n                break;\n            }\n        }\n        // Reset the buffer to avoid printing it multiple times\n        str(\"\");\n        return ret;\n    }\n};\nnamespace Catch {\n    std::ostream& cout() {\n        static std::ostream ret(new cout_buff);\n        return ret;\n    }\n}\n``. Yeah, I can see how that output would be very confusing.. I am not 100% on the_a` suffix, but I am going to merge it in, at least temporarily.. I ended up having to cherry-pick the changes in 283e2e6d41b181fd1c35cecd94c7b2f8e853d888, so I am gonna close this manually.. Since there has been no followup, I am going to close this.. Good job debugging that.. No.\nWhile this is correct:\n\nif (Foo x = Bar(params))\nIn this case, class Foo wasn't copy or move-constructable. It turns out that even though the compiler elides the second constructor call, it must still exist for the code to be well-defined (link 1, link 2). The semantics of the statement should be:\n\nConstruct an rvalue Bar(params)\nConstruct an rvalue Foo(Bar)\nCopy-construct or move-construct the temporary Foo to x (!!!)\nDestroy the temporary Foo / Bar objects\n\n\nThis reasoning does not apply to the actual SECTION implementation, because the LHS of the assignment is a const&, not value. This means that what actually happens is:\n\nTemporary SectionInfo is constructed\nTemporary Section is constructed from the SectionInfo\nThe temporary above is bound by a constant reference.\n\nSee this CE, where func1 represents what is actually happening in SECTIONs and compiles, but func2 doesn't.. Catch Classic stopped being actively developed once Catch2 was released. The couple releases were bugfix only (and we hope there won't be more of them).\nYou should be able to port it to your own local copy easily though.. Since there has been no followup, I am going to close this.. Thats... definitely an old version of Catch.\nThis usage was never officially supported, and the interface was tightened to no longer accept arbitrary C++ code in v1.7.0, as it was always meant to only accept an expression. If you need to write a block of code, use C++11 lambda.. Since there has been no followup I am going to close this.. Are you linking against a file with CATCH_CONFIG_MAIN defined? The destructors are implemented only in the \"main\" TU, so if you don't link against it, they are undefined.. ~Whichever one defines CATCH_CONFIG_MAIN before including the header. The common way of doing things is to have e.g. test-main.cpp looking like this~\n```cpp\nCATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\n```\n~and then the other test files link against it.~\nI didn't refresh before posting\n\nAnyway, I've taken a second look at the filenames, and are you compiling for CUDA? I have no idea how well that will work.. I have to say that I am not sure about this feature request -- if something is important enough to WARN about, it should be important enough to be included in the output.\nAnyway, for now, you will have to customize the provided reporters to potentially ignore messages, later on, I could see this being part of reworked verbosities that will be part of the next major version. If you go this route, look at the documentation for supplying your own main and customizing the command line interface.. Pretty much the above: There was a slight possibility that someone would be crazy enough to implement it in C++98, or add extra compile time configuration branches for it. At some point it should become part of Catch2, as C++11 makes it much easier, but it is not in yet.\nHow did you read it? Would it help if it said something along the lines of \"not supported in Catch v1.x, not going to be supported in Catch v1.x, but there are plans for support in Catch v2.x\"?. Thanks. If multiple threads touch Catch's assertion (or sections, or pretty much any other macro), all bets are off as Catch is not internally synchronized.\n. I don't actually use Conan, but I am willing to accept a PR that improves how Catch is packaged for it.. This is now in master.. Is the explicit specialization actually needed? By my reckoning, once the lhs of operator<< is concretized to the ReusableStringStream by using it as a member function, the call will become unambigous. This means that rss.operator<<(value) is enough.. Thanks for the fix, I took the liberty of squashing the changes into one atomic commit.. Not happening.\nTo expand on it a bit, we have decided that having parallel runner is out of scope for Catch, and getting multiple tests to run in parallel should instead be left for external test runners.\nWe do however plan to have (optionally?) thread-safe assertions at some point.. So, your problem is not with Catch, but with the parsing script.\nYou will need to provide a minimal reproducible example, because I just took the ParseAndAddCatchTests from master, compiled this sample application\n```cmake\nCMakeLists.txt\ncmake_minimum_required(VERSION 3.2)\nproject(test LANGUAGES CXX VERSION 0.0.1)\nForce C++11, also disable GNU extensions\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\nadd_executable(tests empty.cpp)\ninclude(CTest)\nset(PARSE_CATCH_TESTS_NO_HIDDEN_TESTS ON)\nset(PARSE_CATCH_TESTS_VERBOSE ON)\ninclude(ParseAndAddTests.cmake)\nParseAndAddCatchTests(tests)\ncpp\n// empty.cpp\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nTEST_CASE(\"foo1\", \"[.][test1]\") {\n    SUCCEED();\n}\n```\nagainst Catch v2.2.2 and it worked as intended (there were no tests registered with CTest).. Without followup I am going to close this soon.. First, in regards to the build failure, Travis has started having transient failures lately, where the build image errors out while getting the required packages.\nAnyway, if I understand the problem correctly, I think this is the wrong way to go about fixing it. Instead, the JUnit reporter should be given all of the finished assertions the way it used to before changes that caused #1264 and #1267.\nI will be committing a change to address this soon, can you instead see if that works for you?. v2.3.0 is out now.. Agreed. This feature is unavailable and is very much not in scope. The problem with providing code coverage for C++ is that it is surprisingly complex. The most popular way of doing so on Linux is gcov, which requires special compilation flags to be provided when compiling the binary, which means that it is way out of scope for a test framework.\nOn Windows the situation is somewhat different, as the simplest way of collecting code coverage info is OpenCppCoverage, which does not require special compilation flags (it still requires debug info though), but it also provides worse quality of information -- it has to figure out which lines are potentially executable, versus which aren't, from the debug info.. This seems like a duplicate of #1305, so I will repeat myself: I don't actually use Conan, but I would merge a PR that improves its integration.\nI would prefer for it to be made against the dev-new-cmake branch, to avoid oversights when resolving the merge.. This is now in master.. Thanks.. The single-include versions of headers are only updated when a new release is made.. The diff you are viewing are changes since v2.2.3 was released. This means that they will be included in the main header with the next release.. @fgsalomon There are no ways of doing that at this point, and without a strong support for this feature, I would prefer to avoid adding even more features to the ParseAndAddCatchTests script (especially since it is considered somewhat obsolete compared to the other autoregistering script).\n@Bangjie's changes look correct, so you should be able to copy them over for your project.. Yeah, we knew about the problem but didn't have time to fix it until now. Thanks. Good to hear, thank you for reporting back.. I left it out because the documentation was already left out, but re-enabling it isn't much of a problem. . That looks like you are using -Wpsabi. Since Catch does not, in any way, provide ABI guarantees, the ABI changes between GCC versions are not relevant to us.. What the warning means is that if you compiled parts of your application using GCC 6.x and other parts using GCC 7.x, then either these parts will fail to link together (the better option), or the resulting binary will fail horribly during runtime (the more likely option).\nThis is relevant and important if you are linking against precompiled libraries, but Catch does not provide these and assumes that you will always build it with your current compiler, as we do not guarantee any sort of ABI stability -- even patch releases can (and often will) change Catch's ABI (as opposed to API, which we guarantee to be as stable as we can make it.). Fixed in #1320. Currently, there is nothing like that in Catch, but I have to say that it looks interesting.\nAnyway, it depends on what exactly you are doing with it. If you are writing to the stream and then checking that it matches specific pattern, I'd probably write it as a manual writes to stringstream + a call to matchers:\n```cpp\nusing Catch::Matchers;\nTEST_CASE(\"Matcher showcase\") {\n    std::stringstream sstr;\n    SECTION(\"Check 1\") {\n        int i = 2;\n        sstr << \"i=\" << i;\n        REQUIRE_THAT(sstr.str(), StartsWith(\"i\") && EndsWith(\"2\"));\n    }\n    SECTION(\"Check 2\") {\n        int j = random_int();\n        sstr << \"The value is: \" << j;\n        REQUIRE_THAT(sstr.str(), Matches(\"The value is: \\d+\"));\n    }\n}\n``\nWe also provide aPredicatematcher that accepts an arbitrary function takingT const&as argument and returningbool`.\nEmulating the file-based pattern matching is a bit harder, especially since I still haven't found a documentation that explains exactly what it does.. Interesting, I cannot reproduce this with our SelfTest compiled for x64, Unicode charset:\n```\nDr. Memory version 1.11.0 build 2 built on Aug 29 2016 02:41:18\nDr. Memory results for pid 11984: \"SelfTest.exe\"\nApplication cmdline: \"C:\\Users\\X\\Documents\\GitHub\\Catch\\Build\\Debug\\SelfTest.exe\"\nRecorded 115 suppression(s) from default C:\\Program Files (x86)\\Dr. Memory\\bin64\\suppress-default.txt\n===========================================================================\nFINAL SUMMARY:\nDUPLICATE ERROR COUNTS:\nSUPPRESSIONS USED:\nNO ERRORS FOUND:\n      0 unique,     0 total unaddressable access(es)\n      0 unique,     0 total invalid heap argument(s)\n      0 unique,     0 total GDI usage error(s)\n      0 unique,     0 total handle leak(s)\n      0 unique,     0 total warning(s)\n      0 unique,     0 total,      0 byte(s) of leak(s)\n      0 unique,     0 total,      0 byte(s) of possible leak(s)\nERRORS IGNORED:\n      1 potential leak(s) (suspected false positives)\n         (details: C:\\Users\\X\\AppData\\Roaming\\Dr. Memory\\DrMemory-SelfTest.exe.11984.000\\potential_errors.txt)\n     16 unique,    16 total,   8309 byte(s) of still-reachable allocation(s)\n         (re-run with \"-show_reachable\" for details)\nDetails: C:\\Users\\X\\AppData\\Roaming\\Dr. Memory\\DrMemory-SelfTest.exe.11984.000\\results.txt\n``. This is a problem with the idiosyncratic nature of Catch's test specs, where comma is parsed as anORoperator, rather than a literal comma. Thus, if you call catch like this:./tests \"test case with, comma\"`, it won't find any tests, because it looks for 2 tests instead, one named \"test case with\" and the second named \"comma\".\nHowever, you can escape the commas: ./tests \"test case with\\, comma\", which will look for a test named \"test case with, comma\" and this is what the script should do to support them properly.. Fixed in the linked PR.. It used to be the case that absolute value check was done later, but there is no functional difference between the two orders of checking.\nAnyway, I am gonna fix the documentation so it no longer overspecifies the order of checks.\n. I cannot reproduce this on my local copy of Ubuntu 16.04 with Clang in version 3.8.0 (and gcc has a known bug where it is unable to link when using ubsan \u00af\\_(\u30c4)_/\u00af).\nCan you reproduce it without -O3 or -fno-rtti?. Yeah, this is almost definitely a libstdc++ bug and needs to be reported there. I am in process of getting a more up to date system, ~but at a guess just doing  should reproduce the bug (as long as the optimizer does not remove the make_shared call completely).~\nNevermind, I am gonna have to minimize it from Catch after all.. This is a known regression and should be fixed for 8.2.. No simple ones, but I have to ask: why?. > ancient MFC Project with million plus lines of code that was zero test coverage\nOuch.\nAnyway, as you already found out, we support users providing their own main, and adding user-specified arguments to our parser, but not ignoring unrecognized tokens. If your app doesn't use -- for separator yet, I would recommend adding that to your own parser, so you can just put Catch's argument after it: some-app --foo --bar --baz -f=y -- catch-arg1 catch-arg2 catch-arg3 .... This would also simplify paring down the argument, as you could simply move argv forward.\n\nedit: Also this is more of a request for Clara.. You can replace throw Catch::TestFailureException(); at line 5063 with abort() if you want, but I am not planning for this to be supported configuration option.. I am going to close this because using the configuration options for -fno-exceptions support, the user can now replace Catch's exceptions handling with a call to a user-provided function.. Thanks.\nI modified the commit message to remove #<num>, as GitHub resolves those as links to specified issues/PRs.. Thanks.. This should be now implemented.. The merged PR should be what you are looking for, at least once the next release is out.. That one is on us. While the single_include folder is kept stable between releases, so you can always checkout master and use the latest release, the documentation is updated alongside commits that change things. This means that the current documentation does not match Catch version 2.2.3, but rather 2.?.? (the next released version).\nThe next release contain reworked CMake and pkg-config support, which includes changes to use <catch2/catch.hpp> path, but the last one does not.. Good to hear. \ud83d\udc4d . Sounds like a repeat of #881, which was a 3rd party bug.\nThe bad news is that we have already reported it to Microsoft and it was closed as \"low priority\". If you want, you can try to revive the bug report on MS's side.. We reap resolved issues after a month, but we generally prefer if the original user closes them.. You might want to actually fill out the template.. Fundamentally, sections do not work like that. SECTIONs (and thus also various BDD-macros like GIVEN, WHEN and THEN) are processed inside the test case in a DFS order. What this means is that this TEST_CASE\ncpp\nTEST_CASE(\"Foo\") {\n    std::cout << \"1,\";\n    SECTION(\"A\") {\n        std::cout << \"A,\";\n        SECTION(\"a\") {\n            std::cout << \"a\";\n        }\n        SECTION(\"b\") {\n            std::cout << \"b\";\n        }\n    }\n   SECTION(\"B\") {\n        std::cout << \"B\";\n    }\n}\nWill be run 3 times, and it will output \"1,A,a\", \"1,A,b\" and \"1,B\".\nFor your use case, Arek is right. You can just nest the two WHEN macros.\n. No.\nWe intentionally don't support expression decomposition for expressions containing logical AND or OR. The main reason for it is that we cannot emulate the built-in short-circuiting rules, but there are also some secondary ones.\nHowever, you can opt-out of the expression decomposition by placing your expression inside parentheses, like so:\ncpp\nREQUIRE( (foo == 1 || foo == 2) );\nor, in case of logical AND, use multiple assertions:\ncpp\nREQUIRE(expr1);\nREQUIRE(expr2);\nREQUIRE(expr3);\n// is equivalent with\nREQUIRE( (expr1 && expr2 && expr3) );. I'll probably end up suppressing those warnings, but I suggest using a newer compiler. From 3.5 onwards Clang will not warn on the switch statement in catch_matchers_floating.cpp.. Thank @MaciejPatro \ud83d\ude09 . I am sorry, but I don't understand what is the issue here?\nThe important part of the \"own main\" documentation is how to set up a Session and then let Catch run the tests. It is part of main because that is the auto-run section in most environments. It might be worth adding some notes to documentation about this though.. For practical reasons (I don't have a mac, there is a high chance of this being a 3rd party bug) I cannot really help you, but the bug is definitely interesting.\n\nDoes this also happen with different exception types? E.g. ints, doubles, std::exception...\nWhat libstdc++ version do you have? Respectively, are you using SSO or COW implementation of std::string?\n. Strictly speaking, Catch does not need argv[0] to function. The only place where the executable name is used is composing help string for the executable. However, it (well, Clara, the command line parser) does assume that argv[0] is always valid.\n\n. I like the idea, so I am open to getting the PR in. (I am gonna post feedback on that there). Thanks. I modified your PR slightly to fit in with the rest of the code better.. Ok, I've thought about this and we will support -fno-exceptions.\nI am going to look through the changes more closely later, but here are some quick notes:\n\nChanges to Clara need to go to the Clara repo. Also, Clara should already work with -fno-rtti, is that not the case?\nAll of the supported compilers need to work with this patch. In practice this means that either the detection needs to work for all of them automatically, or there needs to be user-accessible compile-time toggle.\nCHECK_CONFIG_USE_EXCEPTIONS define comes out of nowhere.\n. > Do I leave the copy-of-clara in catch2 untouched?\n\nYes. Also don't modify anything under single_include, those files are updated on releases only.\n\ndynamic_cast seems to be used by clara, this keyword causes a compiler error with -fno-rtti.\n\nYou might want to rebase your branch on current master. At some point Clara didn't support -fno-rtti, but that is considered a bug for both Catch and Clara.\n\nI see on the CI it's using clang, g++, VS2015 and VS2017. Are those the only supported compilers? I don't currently have VS2015/17 myself but is it enough to rely on presubmit to validate the vc support?\n\nWe try to support more compilers and platforms, but only those on Travis/AppVeyor are considered as having first-class support. The reason for that is simple, without CI it is hard to ensure that e.g. QNX keeps working, so it is just fixed if someone complains we broke it.\nAlso, you will need to check VS 2017 build log manually, CMake doesn't let us set the projects up properly until this issue is fixed.\n\nAs far as the configuration defines are concerned, currently* Catch does not use valued defines for configuration (e.g. it checks if CATCH_CONFIG_FOO is defined or not, not whether it is 1 or 0). Checking if CATCH_CONFIG_USE_EXCEPTIONS is true or false means that the user would have to define it as -DCATCH_CONFIG_USE_EXCEPTIONS=1, while all the other configuration options would still use the -DCATCH_CONFIG_FOOBAR variant.\n* I am not convinced that it is the better option, but it is not painful enough to warrant changing.\nAnd the problem with CHECK_CONFIG_USE_EXCEPTIONS is that it is only used in couple of test files, and the other test files use CATCH_CONFIG_USE_EXCEPTIONS which suggests that it is a typo. Also it isn't set anywhere, further suggesting that it is a typo.. > What about the approvalTests script, how do you want to reconcile the differences when running it against a Catch2 built without rtti/without exceptions?\nI gave this some thoughts and I think the answer is to not run approval tests against -fno-exceptions Catch. Instead, the tests for -fno-rtti and -fno-exceptions should be similar to the examples we already have -> compile a separate binary and do some basic sanity tests against that.\nI already planned to add something like that, so I should be able to add the scaffolding to master tomorrow.\n. @onqtam Great idea, it worked.\n@iam The ExtraTests infrastructure is now in place on master. The idea is that you compile a single binary with the no-rtti, no-exceptions configuration and then register 1-or-more CTest tests that check for the correct behaviour. In your case that should be something like \"is passing tests properly reporter\", \"is failing tests properly reported/aborted\" and maybe some others.. There also should be some tests present, e.g. via ExtraTests in projects folder. You can take a look at the one test already there, or the conversation in #1358 . I like this, just gonna fix up the commit first.. No.\nCatch already knows how to detect debugger on Windows/Linux/OS X, but we intentionally don't break into the debugger when it is present, to provide the user with greater control over what happens (e.g. the user might have their own set of breakpoints in their own code to find another issue).\n. Yeah, Travis images are kinda flaky.\nAnyway, thanks.. Good to see you have resolved the problem yourself.\nAnd yes, you can only link against libraries, not binaries. This means that if you are testing a function from a different project, that project needs to be a library, and the test binary needs to link against that library.. I am in the process of adding some documentation for these macros, so they should be documented soon(ish). The work-in-progress can be found in branch dev-macro-docs.\nI am going to comment on the rest of this thread later.\n. So, if I understand this correctly, the problem is that CMake automatically encodes and checks what \"bitness\" a package is when using PackageConfig, and Conan generates the package on a 32bit machine, which means that 64bit machines cannot use the package?. Yeah, I am gonna say that either of the upstreams (CMake/conan) need to fix this. Catch2ConfigVersion.cmake is completely autogenerated using CMake facilities, so either conan needs to provide properly configured files, or CMake needs to provide the ability to mark a package as platform-independent, but I don't want to change our CMake files to write our bespoke ConfigVersion file.. As it turns out, there is a fairly reasonable workaround.. Thanks. Thanks. Thanks, but to be honest the Python scripts are very much about supporting further development. In other words, fixing things like 898d111f72f6d31c79ec5de9e40333e29cabdb06 is much more important than changing the code to conform to a style guide (even if it is one very closely tied with the language like PEP8).. Thanks. I've had some discussion about this off-site and I think the actual answer is to not provide install steps when Catch is being used as a subproject of a different project.. I wanna say that every programming env should have Python installed, but I agree that there is no good reason to require it.. Thanks for the PR, I added some comments on changes that need to be done before it can be merged.. Yep, those tests are enough.\nI remembered that the PR will need one more thing though, documentation. The define needs to be added to docs/configuration.md, specifically the \"C++17 toggles part\". Just add something like\nCATCH_CONFIG_CPP17_STRING_VIEW // Provide StringMaker specialization for std::string_view\n\n\nAs for the inefficient implementation, the char/const char/ wchar_t/ const wchar_t specializations are implemented the same way.\n\nYeah, that's why it is a minor nitpick in a comment, rather than part of the review \ud83d\ude03  At some point I will need to rewrite the stringification implementations -- it is causing performance problems when there is a lot of output to be written.. I fixed the issue on older compilers and squashed down the PR before merge.. Thanks, I just fixed up the TOC for release notes page.. Ok, thanks for reporting back.. Can you rerun with --output-on-failure? e.g. ctest --output-on-failure in the build directory.\nI suspect the issue is that Make and ninja invoke the compiler differently, causing it to fill in __FILE__ macros differently.. Yeah, the script for approval tests will need better path normalization.. You can try modifying .travis.yml to use a newer libstdc++ for the Clang+C++17 builds.\nAlternatively, I'll see what I can do on Monday.. The output is the image's clang, later on CXX is set to ${COMPILER} which is clang++-6.0 for that image.\n\nAnyway, that sounds like it is time for more compile time configuration, specifically _GLIBCXX_RELEASE(https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_macros.html).\nThe basic scheme is to have a check like this\n```c++\ninclude  // Get libstdc++ and libc++ version macros\nif defined(CLANG) && defined(_GLIBCXX_RELEASE) && (CLANG_MAJOR < 7) && (_GLIBCXX_RELEASE < 8)\n// This combination of Clang and libstdc++ can't compile std::variant\ndefine CATCH_INTERNAL_CONFIG_NO_VARIANT\nendif\n```\nI don't actually remember Clang's macros, but you get the idea \ud83d\ude03\nThe \"fun\" part is that including <ciso646> has observable side effect under MSVC, so it has to be guarded against that as well.. Yeah, __GLIBCXX__ does not work.\nI am going to do a quick fixup and then squash + merge the PR into master.. CHECK family of assertions does not throw, as they are not meant to abort test execution.\nREQUIRE family of assertions throws, because they are meant to abort the test execution.\nIf I understand your question correctly, you want to use REQUIRE instead of CHECK.. I am going to answer the question from the title first. If your package manager does not provide Catch2 package (e.g. Ubuntu 16.04 does provide Catch as catch but only in version 1.2.0), and you have enough rights to install Catch2 globally, you can do this:\nsh\n$ git clone https://github.com/catchorg/Catch2.git\n$ cd Catch2\n$ cmake -Bbuild -H. -DBUILD_TESTING=OFF\n$ sudo cmake --build build/ --target install\nIf you don't want to install Catch2 globally, you will need to read up on CMAKE_INSTALL_PREFIX and find_package (specifically the part about PATHS argument).\n. This is not in the documentation because it falls under the umbrella of \"basic CMake usage\" -- all the commands did was\n1) Clone Catch\n2) Generate build using CMake\n3) Run the install step of the build using CMake.\nI'll think about whether it is worth adding it to our documentation.\nAnyway, -H. means \"look for CMakeLists in ., which means the current folder\". Strictly speaking it is an internal flag (along with -B<dir>), but it is too useful not to use.. As far as I can tell, this is a bug in libstdc++. Depending on your PoV, it is either bug in the debug checker, or in its implementation of std::shuffle. Either way, I consider this a 3rd party bug that is not worth a workaround.. Not a problem.. Yeah, that is a problem in your code.\n```cpp\nvoid snprintf_stack(char* buf, const size_t len, const struct stack &st)\n{\n  assert(len > 0);\n  buf[0] = '\\0';\n  // build string\n  for(int i=0; st.disks[i] != 0 && i < max_height; i++)\n  {\n    snprintf(buf+strlen(buf), len-strlen(buf), \" %2d,\", st.disks[i]);\n  }\n// truncate trailing comma\n  if(buf[strlen(buf)-1] == ',')\n  {\n    buf[strlen(buf)-1] = 0;   // truncate trailing ','\n  }\n}\n``\nWhat happens is that first you writebuf[0] = '\\0', and then don't write anything in the for loop, because there are no disks. This then leads tostrlen(buf)being 0, which gives you an invalid index into array after subtracting another 1.. @HankB [I wrote a \"read valgrind output\" tutorial](https://codingnest.com/how-to-read-valgrind-output/) to help my students, maybe it can help you too?. Listing all sections is impossible statically -- to get a list of all sections you need to run all test cases and remember all sections that were encountered, and even that is not guaranteed to be a full list of all sections (e.g. if you are using the generator feature together with random data generation).. The intent is easy enough, settingepsilonas0.5` should provide 50% worth of margin for the comparison. As to the wording, I don't mind changing it, but I think I prefer \"coefficient\" to either of \"percentage\" and \"ratio\".\n. Yeah, this is not really possible to fix.. Well, that is kinda embarrassing.\nAnyway, I agree that nested REQUIREs are perfectly reasonable, even though they can cause some bugs (there is at least one more open, but that one is mostly cosmetic).\n. Thanks. This works as intended in that the first snippet invokes UB, and thus anything is allowed to happen. vector::push_back can invalidate any and all references to elements inside the vector.. I agree, that shouldn't happen by default.\nIs section \"sa\" failing? (basically, does it run into the same problem #1389 does?). Then this is a bug, the first run should provide all the information we need to avoid doing a second one.. That is what include(CTest) does.. Thanks for the PR.\nAt a quick look, the macros used for the check seem to be internal and I am a bit wary of basing the configuration on internal macros. Are these documented somewhere to be stable?\n. Eh, I'll fix it ~in post~ when somebody complains.. The GCC compilation failures are because you still do #define private public in your tests. I am afraid this is entirely a case of \"play stupid games, win stupid prizes\", but you can hack around it by forcibly including the right set of headers before doing it.\nAs to the performance, the drop is probably because Catch2 has much more strictly separated declarations and definitions, so there is no longer any inlining without LTO. Most of the performance should be reclaimable with some strategic re-inlining back into headers, but it will take a few weeks before I find the time.\n. Thanks.. @JoeyGrajciar Thanks.\nWill you open up a PR against Clara?. This has been fixed in the dependency, now it needs to find its way upward.. Fixed in 779e83bc2080729da97f2890598e898a4c751c9b. Added in #1404.. Thanks, I added tests and will merge it after CI passes.. @matepek Have you regenerated the single include before trying?. The single include version is indeed generated from the files in include/, where the actual development is done. The version committed to the repository is always the state as of the last release, to let a user just clone the repository and use a stable version of Catch2. This does, however, mean, that if you want to test a version of Catch that has not been released, you need to regenerate the single-include yourself.\n. Nice work on debugging the issue. \ud83d\udc4d \nI am going to add a test before merging it in though.\n. If I understand correctly what you want to do, you want the Event Listener interface.. Glad you figured it out, the nesting behaviour seems to sometimes catch people by surprise.\n. Thanks, but I merged #1399 instead.. Thanks \ud83d\udc4d . #1146 \nThe TL;DR version is that it won't be changed until next major version.\n. This looks fine enough.. I am not against the change, but you should also update the related documentation in docs/cmake-integration.md.\n. The documentation is good enough \ud83d\udc4d . Thanks for the PR, but you will have to explain why you think this change is relevant to that issue.. Thanks for the PR.\nThe escaping problem is caused by over-eager path standardization, when you replace all \\ with /, even outside of paths. This happens to the compact reporter because it has both the path and the \\t in single line.. Yep, looks good now. \ud83d\udc4d . Interesting.\nApart from being kinda weird, I don't think there are practical implications from this difference.. Thanks for the PR. \ud83d\udc4d \nI performed some cosmetic changes to the commits, mainly squashing the superfluous last commit into its predecessor.. I am going to close this in favour of #1437 . Yeah, the current verbosities system wasn't well thought through and it will be gone on next breaking release.\nFor now, I am going to make the base class for event listeners return that it accepts all verbosities, because, as you rightly note, there is no reason event listeners should adhere to reporting verbosities when they aren't supposed to report anything.\n. No problem.. ISTR that there was a reason for the formatting differences (even though at the time I thought it is a really bad reason).\n@philsquared Thoughts?. Okay, I am going to merge it and wait until someone complains -- console reporter output is not intended to be machine parseable, so it isn't a real breaking change.. This is not the right fix for #1426.. Thanks. The simple answer is that they did something terrible to their \"C++11 compliant\" library.\nWe can provide a polyfill over it, but it will take me at least until the end of the week before I have the time to do so.\n. This should be fixed now. The \"implicit using namespace std;\" is called ADL. The problem is that the arguments to your unqualified call to is_heap are from std namespace, which means that it is searched for a matching is_heap as well.\nThe link with Catch is that we bring in <algorithm>, where std::is_heap lives: https://godbolt.org/z/ZJ8m6P. Reading through the linked issue, the problem was with g++ 4.8.4 not initializing iostreams at the right time. \nHowever, we still support that version, so unless it only happens in C++03(98) mode, I don't think we can delete it just yet.\n. So, if I understand it correctly, every push to master will build and upload a package, but it will be in \"Testing\" channel?. I am going to squash this and merge it into master, unless someone objects.. Ok, thanks everyone.. This is a fundamental problem with 0, in that, a relative comparison with sane (< 1) epsilon will always fail when the target is 0, even if it takes into account either of the sides.\nConsider expression actual == Approx(target). This evaluates to true, if | actual - target | < margin holds, so the question boils down to what is the margin like. There are 2 potential sources of margin in Approx, an absolute value set via call to setMargin, which defaults to 0, and a relative value that is currently computed as \u03b5 * | target |. However, lets consider instead consider \u03b5 * max( |target| , |actual| ) in this example.\nBy setting target to 0 and simplifying the above expressions, we get | actual | < \u03b5 * | actual |... For this to evaluate to true, \u03b5 > 1 has to hold, which breaks any semblance of sanity in comparisons for other cases (because it would also mean that e.g. 10 == Approx(20)).. The problem with setting a minimum \u03b5 is that it also leads to unintuitive, and what is worse, incorrect, results. Let's say that we set minimum \u03b5 to std::numeric_limits<double>::epsilon, which is the difference between 1 and the next smallest representable value, or roughly 2.2e-16. This sounds good, until you realise that while this seems insanely small, there are still 4372995238176751615 (4*10^18) numbers between 0 and std::numeric_limits<double>::epsilon... \nAlso, Approx actually used to have scale default to 1.0, but that lead to false positives in code such as REQUIRE(1e-14 == Approx(1e-15).epsilon(0.01)), which is obviously incorrect (1e-14 is not within 1% of 1e-15), but would pass because the scale would blow out the actual numbers used in the comparison. That and some other similar problems made me ultimately decide to go for the mathematically more correct comparison, even though it is possibly surprising. Fundamentally, comparing floats is hard, and I think it is better to surprise people who don't know what they are doing than it is to surprise people who do know what they are doing.\n. Thanks.. CHECK is indeed intended to fail tests when it fails. What you are looking for sounds less like an assertion macro and more like CAPTURE, which offers a way to keep some information around in case the test fails.\n. This has already been planned (see branch dev-m3-list-rework), but for backward compatibility reasons won't happen until the next major release.. Yeah, I started out thinking that more complex expressions (e.g. std::pair<int, int>{1, 2}) without parentheses would break things anyway, but thinking about it again, it can work if we properly parse all of \"{}\", \"[]\", \"<>\" and \"()\".\n\nActually, parsing <> is problematic, because without context it can be either a comparison operator or a separator of template args.. Sorry, but Catch v1 is very much EOLed. I might be convinced to review and merge a PR, but I am not planning to do the work cherry-picking the changes by myself.. Since it has been almost 4 weeks, I am going to close the issue until further follow-up. Sorry for not getting to this sooner, and thanks for the PR.\nI think that instead of having a separate option for this, the script should check whether the CMake version is modern enough (3.9+) and if it is, set the disabled property by default.. I merged the new code with the logic for hiding tests.. > I could to that but it is not avery generic way and others would have to reimplement this feature over and over agein.\nI don't think many people have tests that crash their PC...\nAnyway, as you said you can implement it yourself, and you can also throw something together via -r compact -o <filename> --order lex and looking for the last finished test, if you don't want to do that.\n. That is very much a (weird) bug.. After further investigations, this happens only for the Console (default) reporter.\n\nThe problem is in TextFlow's Column::iterator::calcLength that sees the \"\\n\" and decides that means that the message must end there.... Thanks. Yeah, Travis builds sometimes just die, and need to be restarted. Does this change mean a return to the slower startup time of VM builds?\n\nSeems that way. Oh well.\n. Thanks.. Thanks. Interesting, I would expect e.g. the logo to be used from the catchorg/Catch2 repo already. Should be done.. As far as I can tell, this is done.. Interesting, all of our test builds on TravisCI passed (the ones with EXTRAS=1 build without exceptions and CATCH_CONFIG_DISABLE_EXCEPTIONS enabled, e.g. this one). Can you try the dev-noexceptions-IAR branch? If you are using the single-include header, you will need to regenerate it first, using scripts/generateSingleHeader.. Ok, I am going to merge it to master and you can reopen the issue if it still comes up.. Having it 404 is probably the better thing that could happen, that link points to master, so until recently it actually pointed to the latest version and not to the C++98 compatible version.\nIf you are looking through the documentation for the old version, could you also check that other links don't point to master? Thanks.. I checked and there should be no more broken links, so I am going to merge it.. Is this with LTCG or without? The default Release config turns LTCG on and it doesn't deal with the extra code from assertions too well.\n\n\ud83d\udc4d for the graph BTW. Okay, I can reproduce your results, but for me the time required is a lot smaller, and, after a certain threshold, the compilation times start going down again.\nFrom quick and dirty testing (I copy pasted the same REQUIRE n times and measured time reported by MSBuild):\n  200 assertions took ~14s to compile\n  400 assertions took ~50s to compile\n  600 assertions took ~140s to compile\n  800 assertions took ~10s to compile\n 1000 assertions took ~13s to compile\n 1200 assertions took ~18s to compile\nAt this point I think there are 2 things to do\n1) Open up a bug with MS, because there is a quadratic optimization pass inside the compiler and it probably needs better heuristic to determine when it can be applied without blowing up compilation times\n2) Investigate the use of \"do not optimize this\" MSVC pragmas inside Catch\n. There is no bug report -- I had some backchannel talks with MS and was told to open a bug for this issue, but some real-world stuff came up and I didn't have time to finish writing it up.\nAnyway, I just tried to reproduce it, and the set up that previously ran into 2 minute+ compilation times finishes up in 300ms, so I am gonna call it fixed by 15.9.4 update.\n. @karyon If you are willing to do it, I'll gladly leave handling the bug report to you. . @karyon Mind if I close this issue in the meantime?. For safety reasons I decided against providing a macro for this, but we show how to use variables in generators with an example.\n. Thanks for the PR, but the fix should go through the TextFlow repository (as the error is in a code that is 3rd party to Catch).\n@philsquared . That's... not an ideal workaround, but not supporting || and && in assertions is a hardline that will not change, unless the language fundamentally changes and it becomes possible to implement user-defined logical operators with short-circuiting.\nAs the language is now, if (missiles_detected() && !launch_countermissiles()) { panic(); } will not launch missiles unless other missiles are detected, but REQUIRE(missiles_detected() && !launch_countermissiles()); would always launch the missiles.. You should probably prefer defining CATCH_CONFIG_NO_POSIX_SIGNALS instead, but good to know that you solved your issue.. As you can see on Travis, it is not quite redundant enough if you are using older gcc+libstdc++ combination.. I took a slightly different approach, can you check if it eliminates the warning on your machine?. Ok, great.. I agree with @NeroBurner, after doing sudo make install from Catch's build dir, I can find it in another project via find_package(Catch2) w/o config.\nUnless you can provide better reproduction steps/description of the problem, I don't think there is a bug here.. Thanks for reporting back.. Thanks. Thanks. Thanks, I cleaned out the history a did some minor changes.. The change in catch_capture.hpp needs to wait for next major.\n\nSuppressing the warning and changing examples can (and should) go in now though.. Right, I only read the first two commits. I meant removing the semicolon from INTERNAL_CATCH_INFO.. Well, there is your problem. The reporters assume that they are preceded by the single include header, because that is what we package and release for further use.. Reporters are also released in the single_include folder, so the answer is to add -ICatch2/single_include (or the moral equivalent) to your build flags and include them like this:\n```cpp\ndefine CATCH_CONFIG_RUNNER\ninclude \ninclude \n```. Thanks and don't worry about the whitespace changes.. Given how often people complain about this, I agree that it is time to fix it, but I really dislike this specific change, and would prefer to restructure the code differently instead.\nHowever, I ran into some trouble reproducing the warning -- can you post what version of clang-tidy have you used, what did your compilation database look like and so on?\n. Thanks. Thanks. Thanks. Yeah, the estimate is wrong in case of early-abort, and veeeeeeery potentially can cause a division by zero (if your clock resolution is worse than 3 seconds, \ud83e\udd37\u200d\u2642\ufe0f ).\nThere is no reason not to fix it though.\n. I am not convinced that default initializing the pointer to an invalid value actually improves the code, but I am willing to merge the change to silence the static analysis warning.. Thanks for the fix.\nAs to the tests, they should be invoked via CTest (see e.g. project/CMakeLists.txt for registering tests within CTest). The better question is whether they need their separate binary or not -- as they are right now, they definitely don't belong into examples, but we have projects/ExtraTests for tests that need to be compiled separately (and thus are too expensive to perform on every CI image).\nHowever, I don't think they actually need separate compilation, but I'll have to think about it a bit first.\n. The build error in coverage build on Windows is caused by the coverage helper not escaping cmdline arguments properly.\nI don't have time to fix it right now, but should be able to get to it during the weekend.. Thanks. Thanks. Thanks. Thanks, this looks good.\nI have one note and one nitpick though.\nNote: You should also add a test against strong typedef.\nNitpick: I think \" is approx\" would work much better as the stringification string inside the matcher.. If you go to UsageTests/Approx.tests.cpp, on line 192 there is a test that tests Approx against a strong-typedef, that is a class that can be explicitly converted to double, but is not a double itself. It should work because of the underlying Approx usage, but it would be nice to have it documented with a test.\n\nThinking about this further, I think this actually opens up a philosophical question about the constructor of the Matcher. Specifically, whether the constructor shouldn't be templated and allow for vector filled with types that are convertible to double, but are not Ts themselves -- this would allow for e.g.\ncpp\nstd::vector<Temperature> temps;\n// fill temps somehow\nREQUIRE_THAT(temps, Catch::Approx({17.2, 17.3, 18.2}));\nWhich is nicer that having to convert the doubles to temperatures by yourself.\n\nAs to your other question, I am afraid that is unfixable without a different name, because of the using Catch::Detail::Approx in catch.hpp that cannot be removed without breaking backwards compatibility. \nYou can also stop it from being ambigous by bringing in the function explicitly:\ncpp\nusing Catch::Matchers::Approx;\nCHECK_THAT(v3, Approx(v3));\nCHECK_THAT(v4, Approx(v4));\nworks.. Try doing conan remove -f catch2/* before installing Catch2 from the new repository.. You can probably achieve the same effect via the PCH support, but I am not necessarily against splitting the include guards.. #1501.\nTLDR: conan does not deal well with case change in dependency, so you have to purge its cache by yourself.. So, I don't think this is a bug.\nThe reason for this is that it is very hard (well, impossible), to determine the user's intent, thus it is better to assume that the user has set up both checks correctly -- after all, if the user does not want a relative comparison, they can always set the epsilon to zero. In fact, I think that using both tolerances and taking the most forgiving one is the superior option to implement things like the Approx Matcher (#1499).\n. Ok, I modified the comment somewhat to be clearer.. Where did the tests go?. The new flag should also be added to docs/configuration.md.. I am just gonna merge it and add the documentation myself.. The problem with the test has been solved in a different PR.. Try enabling C++11.. Sorry about the bug, but apparently it escaped notice for well over a year, the commit that introduced it was done on 6.12.2017: aa9d635014c3ab321fe65bd59c50fa71d6a86583.\nI am going to look at the PR in a moment.. I've added the generic generator adapters I've wanted to add, now I need to add some examples and documentation.. I am back, gonna take a look on this.. I had a hell of a time reasoning through this, and, apart from some cosmetic things that I can just push by myself, I have two remarks:\n\nI am not sure that unscoped messages should be cleared at the end of a SECTION. IMO, an unscoped message that is unused by the end of a section is the result of an ad-hoc reimplementation of generators with sections:\ncpp\nTEST_CASE(\"foo\") {\n    int how_many = 0;\n    SECTION(\"3 elements\") { how_many = 3; }\n    SECTION(\"5 elements\") { how_many = 5; }\n    ...\n}\n\nAs an example, our current codebase actually has multiple instances of this pattern.\n\nUnder current implementation, WARN will also remove all UNSCOPED_INFOs preceding it, because it is internally implemented as an assertion with specific property set. I don't think this is optimal, and instead I would suggest resurrecting the logic using IStreamingReporter::assertionEnded return value, see catch_interfaces_reporter.h lines 193-194, and catch_run_context.cpp lines 146-168.. Multiple SECTIONs were a way to simulate generators before Catch's generators were finished. The idea is that only one sibling section is run at a time, so it will set a new value for the variable in each run, so the complicated assertion code can be shared. That's not overly important though.\n\nAfter some deliberation, I think I agree with just fixing WARN for now, because there are even more places that need some rework, e.g. the logic in RunContext::handleExpr for short-circuiting would need to handle this properly -- in the end it is probably better to get the feature in now and rewrite it later.\n. I added some cosmetic changes that you can just squash down.. Yeah, sorry about that. For some reason, the tests are run in a slightly different order on Windows than they are run on Linux. I'll need to look into it, but didn't have the time just yet.. Merged, thanks.. Resolved by #1524 . Can you undo the irrelevant changes before merging?\nBasically, everything in the diff that is not the change to getBuildExecutable is just noise.. Okay, looks good.. Thanks. I am back.\nApart from the two lines with hard tabs, this looks good and definitely mergeable. However, I remember from Discord that you wanted the RangeGenerator to work with non-integral types, while I would really rather it didn't (because the step can be hard to define, or even plain wrong, for non-integral types, such as float).\nI think we can compromise by forcing the helper to do the checking for integralness of the types -- doing so would ensure that users wouldn't be bitten by something like range(-2.0, 7.4, 0.1), while they would be able to say \"trust me, I know what I am doing\", and construct RangeGenerator directly, with an arbitrary type.\n. I made the mentioned changes and squashed the PR together, gonna merge it later after it goes through CI.. Thanks. I can create a general generator adapter similar to take or map for this. I was actually thinking about it before releasing 2.6.0, but there is a complication with this kind of adapter:\nWhat do you do, if the user asks for chunks of 3, but the underlying generator does not provide the right number of elements? e.g. if the generator has 10 elements and the user asks for chunks of 3, it can either return 3 chunks of 3 and ignore the last element, or it can return 3 chunks of 3 and then provide one chunk with only 1 element.. I prefer providing only 3 chunks of 3 elements, because that is easier to use on the outside, but whichever I pick will be there for some time.. That operation is commonly called zip \ud83d\ude03 .\nAnyway, master now contains a chunking generator that does what you needed.. Thanks, but I'll admit that I would prefer proofreading for other parts of the documentation.. Thanks. We generally make an attempt at consistently using the std:: prefix (and the <cfoo> form of C headers), but it sometimes creeps in. The only platform I know of that actually cares about the difference is QNX and it is kinda hard to get a CI using it.. Oh well.. Yeah, the \"traditional\" MSVC preprocessor is definitely non-conforming. The PR looks okay*, but I need to test something first, before I will merge it.\n\nI actually loathe the preprocessor monstrosity that is being slowly created, but we have to work with what we have, not what we wish for. \ud83d\ude03 \n. You can\n\n1) Not use the JUnit reporter\n2) Run the tests in parts -- a trick we use at my job is to use the -# flag and essentially run tests from each TU on its own. We do it for parallelism rather than decreasing memory consumption, but it should work for you as well.\nThe reason why the JUnit reporter takes so much RAM is that the format essentially requires the reporter to first run all tests, hold on all the relevant data (original expressions, expression stringifications, location info, etc) and only after all the tests have finished, it can start printing out the XML.. \ud83e\udd37\u200d\u2642\ufe0f  Resolved is a temporary label that says \"close this issue later unless there is a relevant followup\".. The limitation of SECTION tracking being done at runtime is that under certain circumstances, a section needs to be run more than one time.\nThe circumstances are\n1) The section hard fails (e.g. with REQUIRE, or other thrown exception AND\n2) It is the first section in its path. Should be fixed in master now.. Yeah, it is okay.\nAt least if someone finds it, they can fix their problem on their own.. I like the idea.. Here are the basics:\n Reporters are implemented in files in include/reporters/\n There are two methods that can interest you from the reporter interface, testRunEnded and testRunStarted\n* Various reporters follow different convention and need different treatment.\n  * I would probably skip CompactReporter\n  * XMLReporter just needs a reasonable name for the tag\n  * JunitReporter follows the JUnit standard (or at least our understanding of it). You would have to check if there is similar field in the JUnit XML standard, or at least a \"comment\" field or similar\n  * ConsoleReporter looks good the way you proposed\n  * TeamCity reporter uses the TeamCity format -- I am fairly sure that the format allows for arbitrary comments, but you'd have to check\n  * AutoMake and TAP reporters: \ud83e\udd37\u200d\u2642\ufe0f \nAs for the testing and stuff, docs/contributing.md should be a reasonable overview.. Can you check which release actually introduced the warning for you?\nI don't think it reproduces on more up-to-date versions of GCC, so I can't check on my own.. Well yeah, because the pragma statements stop after the include, but they would need to apply to code generated in a TEST_CASE macro. \nAnyway, the commit that caused this change is 36417069232a62c7b774189cbb353844dd41f2db, which makes it so that Catch no longer leaks #pragma GCC diagnostic ignored \"-Wunused-variable\" into the whole file, and because the oldest GCC we test with is something like 4.8.3, it didn't cause any trouble.\nGiven just how old is your target compiler, I think I am going to go with \"Won't Fix\" on this one, because you can solve it locally by adding the pragma into the test TUs, and fixing it in master would worsen things for everyone else.\n\nAs a side note, can you use dev-toolset? We are using it at my day job for our RHEL machines and it works pretty well.. This is one of the cases where const_cast is well-defined and useful, so my suggestion would be to use it for now. Other short-term solution would be using a ref-wrapper I guess.\nHowever, you should be really careful with things that are mutated during matching, because they can easily break if you try to chain multiple matchers in a single assertion.\nAs for the future, we will see what we can do about this -- there already is a problem with using const& in assertions, because it does not play nice with type traits and other values without linkage -- but I don't know of a good solution to the problem.. Hard to say from that description alone, you might want to open up a PR that highlights the intended changes so you don't waste time if there are problems.\n\nNote that the Matchers interface is subject to the usual backward compatibility guarantees, so it would have to go into v3.0 either way.. Also one more comment: The resulting filter string should preferably be roundtrippable. This means that user can just copy-paste the output string onto CLI and get the same behaviour.. No, but tags should be inside square brackets, test names with spaces should probably be inside quotes and so on.. Documentation for v2.6.1 does not:\nhttps://github.com/catchorg/Catch2/blob/v2.6.1/docs/generators.md\nDocumentation in master is for master, not for the last release. Anyway, this problem has come up often enough that I wonder if it would be worth a disclaimer of some sort, saying \"this documentation is for the state in master, for documentation for the last release go here\", or maybe publishing our own ReadTheDocs page.\n. > As you can see all links from \"How to use\" points to files from master. So may be solution could be to use links to the current release.\nThat's a great idea, thanks.. Avoiding a superfluous redirect is always good, thanks.. Thanks.. I am 99% sure I uploaded it to a public key server and a friend confirmed that he could fetch it, so this is a bit weird. I'll investigate, but in the meantime, the link from the 2.5.0 release where I started signing the releases should work: https://codingnest.com/files/horenmar-publickey.asc. Yeah that about matches my experiences -- the keyserver infrastructure is creaky and slow.. Sure, thanks.. If the delta looks right, you should approve it yourself before pushing the PR, see contributing.md.\nHowever, this current PR has a different problem as well, specifically that the plain GENERATE intentionally does not allow variable capture for user's safety, as stated in the generator documentation. \nI think this PR actually shows that it was a good idea, because the test you've added actually invokes UB because of the capture. The problem is that after the first run-through the test case, the object in the instance variable is destroyed. Then, for the second run, it is created again. At this point, the captured reference inside the lambdas is no longer valid (the refered-to object has been destroyed), so when we use it, the code invokes undefined behaviour and everything has gone pear-shaped.\n. I've actually been thinking about providing a separate macro that does capture variables, but it would still be an expert-only feature. In the meantime, if someone ends up really needing variables inside generators, we provide an example for that.\n. Thanks.. ok, thanks for reporting back.. Random generators were added in v2.7.0. We never even provided a 1st party NuGet package \ud83e\udd37\u200d\u2642\ufe0f . It seems to have been created by a user called \"fecjanky\", who, as far as I know, has no relation to Catch2. I am not sure we could take over the package either...\nI am gonna fill this under \"if someone wants to contribute an automatic nuget updater (like Conan's), they are welcome, but otherwise won't fix\".. As someone who actually uses Catch tests for grading homework, I would recommend a somewhat different approach. Specifically, different tests/assertions are grouped together via tags and the external executor then runs specific tags under the XML reporter to get machine-parseable output and finer grained control over the assessment.. Thanks, on both the PR and the praise \ud83d\ude03 . The performance difference is unlikely to matter, but I would prefer this to be done via std::set::lower_bound.\n. std::string::front() is C++11 and forward. This line can be just deleted completely -- it stopped being used at some point.. This guard should not be needed -- if CATCH_CONFIG_* is explicitly defined, then it should overrule any setting of CATCH_INTERNAL_CONFIG_*.\nI just noticed that the POSIX signals above does this as well, gonna fix it.. ~By my understanding, g++ defines __STRICT_ANSI__ whenever supplied with -std=c++.. flag, so this would also turn off use of isatty for plain old g++ on linux.~\nNevermind, misread the guard. I think it would be better expressed as !(defined(__DJGPP__) && defined(__STRICT_ANSI__)) though. This should be more along the lines of \ncpp\nuint32_t n;\nstd::memcpy(&n, &f, sizeof(f));\nto avoid violating strict aliasing. Same goes for the double variant.. Even if it wasn't as fast, it is better to have correct code than fast code, but yeah -- GCC and Clang have seen through this for a long time, and often even generate better code (reg to reg move versus mem load).. IIRC you have to use io module for python 2.7 (same as for working with encodings), so you have to make a small polyfill over open/io usage.. These macros need to be variadic to work properly when expr contains commas, e.g. std::is_same<int, int>::value, see this, specifically the fact that the last macro use causes compilation error, as it is parsed as a macro with two arguments, not just one.. The trick is that it doesn't have to be that way for single-argument macros:\n```cpp\ninclude \ndefine MY_ASSERT2(...) static_assert(VA_ARGS, #VA_ARGS)\nMY_ASSERT2(std::is_same::value);\n``\n[works](https://godbolt.org/z/uf7u6p) and uses the same trickREQUIREdoes.\n. This belongs tocatch_compiler_capabilities.h` and should work a bit differently (there are other similar macros there already, you can use them as a rough template).. I would move one of the two specializations so that there is less conditionally compiled blocks of code and things are easier to read, but that is a minor nitpick.\n(This also applies to the implementation in the .cpp file). Yeah, this is much better -- in our experience, the autodetection will always break down on some obscure platform, so feature toggles need to let the user override them as they see fit, which is why there is the INTERNAL_* and NO_* distinction in defines.\n2 more things:\n1) CATCH_CONFIG_STRING_VIEW should be CATCH_CONFIG_CPP17_STRING_VIEW (respectively CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW)\n2) Is there an actual need for MSVC-specific C++ standard defines? (e.g. cannot it just toggle CATCH_CPP14_OR_GREATER and CATCH_CPP17_OR_GREATER?)\n. That doesn't seem right ;-). I assume that this is done to work around the non-conforming MSVC preprocessor. Because we support non-MSVC compilers on Windows, these changes should be guarded differently.\nYou might also want to incorporate a check for the new and fixed MSVC preprocessor:\nhttps://blogs.msdn.microsoft.com/vcblog/2018/07/06/msvc-preprocessor-progress-towards-conformance/\n. Some cosmetic things first:\n1) In new documentation, I prefer single backticks (e.g. TEST_CASE) for monospaced font.\n2) In new documentation, I prefer Catch2 as the name for the framework -- this is helpful in that it marks which documentation has been updated/rewritten since the major update.\n3) In new documentation, I prefer shorter lines with manual newlines. You don't have to add the anchor manually, all headings get their anchor with id being the sluggified text of the heading.\nAlso, scripts/updateDocumentToC.py automatically updates the table of contents at the top of the page (so you don't have to manually modify that either).. This needs some rewriting.\n I would move more of the explanation outside of tutorial.md and into test fixtures/test and sections documentation. Tutorial should be more of a \"this is how it looks like\", with detailed documentation about how the test names are created and so on, going elsewhere.\n Various nits like \"with multiple typenames\" should be \"with multiple type parameters\", I would avoid all caps \"REQUIRED\" because that is a name of a macro, so it has special meaning inside our documentation, etc.. This should be named CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR (or similar, but it should definitely be prefixed with CATCH_INTERNAL_CONFIG) and should then be used to define CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR in the same way our other configuration options are.\nThis pattern lets our users override our autodetection in case we get it wrong, and has paid off multiple times already \ud83d\ude03 . Would anything break if this used the newly defined INTERNAL_CATCH_EXPAND3?. This should use INTERNAL_CATCH_EXPAND3(__VA_ARGS__) instead of INTERNAL_CATCH_EXPAND1(INTERNAL_CATCH_DEF __VA_ARGS__).. I would prefer more descriptive name for this, e.g. INTERNAL_CATCH_REMOVE_PARENS. Yeah, also the INTERNAL_CATCH_DEF, INTERNAL_CATCH_NOINTERNAL_CATCH_DEF machinery should go there.. ```suggestion\nif defined(CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR) && !defined(CATCH_CONFIG_NO_TRADITIONAL_MSVC_PREPROCESSOR) && !defined(CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR)\n```. I would prefer this end of anonymous namespace to be lower. so that the newly minted \"TestNameClass\" types are not exported and the pressure on linker is decreased.\nWe already have problems with link times on certain platforms, namely MinGW variants, where the link times are already longer than the compilation time of the main TU.. The above should be enclosed in an anonymous namespace to decrease linker pressure.. If I am reading this properly, it would still pick up e.g. v2.5.5-RC1, which is not really a stable branch.\nAlso, you can rely on the \"v\" prefix always being there (generally I think the regex should be as strict as possible, to avoid publishing wrong things).. Why use an explicit specialization for bool?. I have a small nitpick for this:\nThis doesn't actually configure the build to be done in the Debug configuration, even though the build folder is named that way. To have the build be configured for Debug, you need to add -DCMAKE_BUILD_TYPE=Debug.. This will only work for Unixish systems and not on Windows. To support Windows, the last two steps can be changed to cmake --build cmake-build-debug instead.\nAlso we support approvals through CTest now, so the building and testing can be done like so\ncmake -Bcmake-build-debug -H. -DCMAKE_BUILD_TYPE=Debug\ncmake --build cmake-build-debug\ncd cmake-build-debug\nctest -C Debug --output-on-failure\nThe advantage of this approach is that it can be used without change on both Unixish systems and Windows.\nThe disadvantage is that to get better control, you need to familiarize yourself with another tool (CTest), so it is probably worth it to keep a separate guide for running the approval tests manually.. Also, you don't need -DCATCH_BUILD_TESTING=ON, as it is the default and will remain that way.. Where is the #define CATCH_CONFIG_CPP17_OPTIONAL gone?. Ouch, formatting.. This doesn't look right -- you do this check after every iteration, which means that it will return after the first measurement iteration, and use whatever was measured in the first iteration as the resolution estimate.\nShouldn't it be on the outside of this loop?. The tests also need to be tagged with [approvals] tag, so that they are not checked by the approval tests.. Open up a new one then.. That wouldn't suppress the warning.. I've thought about that, but I also expect that construct to run afoul of various other static analysis and style checker tools (and honestly think it is even uglier).\nI'll sleep on it and come back to this.. Even if there are, we can always remove it for our use. The question then is, whether it should be a user-facing customization point and I think the answer is \"no\".. If we don't except people deriving from SingleValueGenerator, the entire class can be marked final instead.. Yeah, that's probably better. Yeah, also better.. We use spaces, not tabs.. ",
    "wichert": "Jenkins does not like the current output:\nERROR: Publisher hudson.tasks.junit.JUnitResultArchiver aborted due to exception\njava.lang.NullPointerException\n    at hudson.tasks.junit.CaseResult.getPackageName(CaseResult.java:266)\n    at hudson.tasks.junit.TestResult.tally(TestResult.java:500)\n    at hudson.tasks.junit.JUnitParser$ParseResultCallable.invoke(JUnitParser.java:115)\n    at hudson.tasks.junit.JUnitParser$ParseResultCallable.invoke(JUnitParser.java:87)\n    at hudson.FilePath.act(FilePath.java:757)\n    at hudson.FilePath.act(FilePath.java:739)\n    at hudson.tasks.junit.JUnitParser.parse(JUnitParser.java:83)\n    at hudson.tasks.junit.JUnitResultArchiver.parse(JUnitResultArchiver.java:123)\n    at hudson.tasks.junit.JUnitResultArchiver.perform(JUnitResultArchiver.java:135)\n    at hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java:19)\n    at hudson.model.AbstractBuild$AbstractRunner.perform(AbstractBuild.java:649)\n    at hudson.model.AbstractBuild$AbstractRunner.performAllBuildSteps(AbstractBuild.java:625)\n    at hudson.model.AbstractBuild$AbstractRunner.performAllBuildSteps(AbstractBuild.java:603)\n    at hudson.model.Build$RunnerImpl.post2(Build.java:161)\n    at hudson.model.AbstractBuild$AbstractRunner.post(AbstractBuild.java:572)\n    at hudson.model.Run.run(Run.java:1386)\n    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:46)\n    at hudson.model.ResourceController.execute(ResourceController.java:88)\n    at hudson.model.Executor.run(Executor.java:145)\nFinished: FAILURE\nHere is an exampe of a valid junit output as generated by nose:\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuite name=\"nosetests\" tests=\"175\" errors=\"0\" failures=\"0\" skip=\"0\">\n  <testcase classname=\"pyrad.tests.testBidict.BiDictTests\" name=\"testBackwardAccess\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testBidict.BiDictTests\" name=\"testBackwardDeletion\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testBidict.BiDictTests\" name=\"testDeletion\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testBidict.BiDictTests\" name=\"testForwardAccess\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testBidict.BiDictTests\" name=\"testItemAccessor\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testBidict.BiDictTests\" name=\"testLength\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testBidict.BiDictTests\" name=\"testStartEmpty\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.ConstructionTests\" name=\"testNamedParameters\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.ConstructionTests\" name=\"testParameterOrder\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.ConstructionTests\" name=\"testSimpleConstruction\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.OtherTests\" name=\"testCreateAcctPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.OtherTests\" name=\"testCreateAuthPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testAuthDelay\" time=\"2\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testBind\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testBindClosesSocket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testDoubleAccountDelay\" time=\"3\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testDoubleRetry\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testIgnorePacketError\" time=\"1\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testInvalidReply\" time=\"1\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testNoRetries\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testReopen\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testSendPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testSingleAccountDelay\" time=\"2\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testSingleRetry\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testClient.SocketTests\" name=\"testValidReply\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.AttributeTests\" name=\"testConstructionParameters\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.AttributeTests\" name=\"testInvalidDataType\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.AttributeTests\" name=\"testNamedConstructionParameters\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.AttributeTests\" name=\"testValues\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryInterfaceTests\" name=\"testContainment\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryInterfaceTests\" name=\"testEmptyDictionary\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryInterfaceTests\" name=\"testReadonlyContainer\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testAttributeEncryptionError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testAttributeOptions\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testAttributeTooFewColumnsError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testAttributeUnknownTypeError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testAttributeUnknownVendorError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testBeginVendorParsing\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testBeginVendorTooFewColumns\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testBeginVendorUnknownVendor\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testDictFileParseError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testDictFilePostParse\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testEndVendorParsing\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testEndVendorUnbalanced\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testEndVendorUnknownVendor\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testInclude\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testIntegerValueParsing\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testParseEmptyDictionary\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testParseMultipleDictionaries\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testParseSimpleDictionary\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testStringValueParsing\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testValueForUnknownAttributeError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testValueTooFewColumnsError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testVenderTooFewColumnsError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testVendorFormatError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testVendorFormatSyntaxError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testVendorOptionError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testDictionary.DictionaryParsingTests\" name=\"testVendorParsing\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testHost.ConstructionTests\" name=\"testNamedParameters\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testHost.ConstructionTests\" name=\"testParameterOrder\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testHost.ConstructionTests\" name=\"testSimpleConstruction\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testHost.PacketCreationTests\" name=\"testCreateAcctPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testHost.PacketCreationTests\" name=\"testCreateAuthPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testHost.PacketCreationTests\" name=\"testCreatePacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testHost.PacketSendTest\" name=\"testSendPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testHost.PacketSendTest\" name=\"testSendReplyPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AcctPacketConstructionTests\" name=\"testBasicConstructor\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AcctPacketConstructionTests\" name=\"testConstructWithDictionary\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AcctPacketConstructionTests\" name=\"testConstructorDefaults\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AcctPacketConstructionTests\" name=\"testConstructorIgnoredParameters\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AcctPacketConstructionTests\" name=\"testConstructorRawPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AcctPacketConstructionTests\" name=\"testConstructorWithAttributes\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AcctPacketConstructionTests\" name=\"testNamedConstructor\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AcctPacketTests\" name=\"testCreateReply\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AcctPacketTests\" name=\"testRequestPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AcctPacketTests\" name=\"testRequestPacketSetsId\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AcctPacketTests\" name=\"testVerifyAcctRequest\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketConstructionTests\" name=\"testBasicConstructor\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketConstructionTests\" name=\"testConstructWithDictionary\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketConstructionTests\" name=\"testConstructorDefaults\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketConstructionTests\" name=\"testConstructorIgnoredParameters\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketConstructionTests\" name=\"testConstructorWithAttributes\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketConstructionTests\" name=\"testNamedConstructor\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketTests\" name=\"testCreateReply\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketTests\" name=\"testPwCryptEmptyPassword\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketTests\" name=\"testPwCryptPassword\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketTests\" name=\"testPwCryptSetsAuthenticator\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketTests\" name=\"testPwDecryptEmptyPassword\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketTests\" name=\"testPwDecryptPassword\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketTests\" name=\"testRequestPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketTests\" name=\"testRequestPacketCreatesAuthenticator\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.AuthPacketTests\" name=\"testRequestPacketCreatesID\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketConstructionTests\" name=\"testBasicConstructor\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketConstructionTests\" name=\"testConstructWithDictionary\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketConstructionTests\" name=\"testConstructorIgnoredParameters\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketConstructionTests\" name=\"testConstructorWithAttributes\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketConstructionTests\" name=\"testNamedConstructor\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testAddAttribute\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testAttributeAccess\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testAttributeValueAccess\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testCreateAuthenticator\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testCreateReply\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testDecodePacketWithAttribute\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testDecodePacketWithBadAttribute\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testDecodePacketWithEmptyAttribute\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testDecodePacketWithEmptyPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testDecodePacketWithInvalidLength\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testDecodePacketWithMultiValuedAttribute\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testDecodePacketWithPartialAttributes\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testDecodePacketWithTooBigPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testDecodePacketWithTwoAttributes\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testDecodePacketWithVendorAttribute\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testDecodePacketWithoutAttributes\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testDelItem\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testEncodeKey\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testEncodeKeyValues\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testGenerateID\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testHasKey\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testHasKeyWithUnknownKey\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testKeys\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testPktDecodeVendorAttribute\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testPktEncodeAttribute\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testPktEncodeAttributes\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testRawAttributeAccess\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testReplyPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testVendorAttributeAccess\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.PacketTests\" name=\"testVerifyReply\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testPacket.UtilityTests\" name=\"testGenerateID\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testProxy.OtherTests\" name=\"testProcessInput\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testProxy.OtherTests\" name=\"testProcessInputNonProxyPort\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testProxy.ProxyPacketHandlingTests\" name=\"testHHandleProxyPacketHandlesWrongPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testProxy.ProxyPacketHandlingTests\" name=\"testHandleProxyPacketSetsSecret\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testProxy.ProxyPacketHandlingTests\" name=\"testHandleProxyPacketUnknownHost\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testProxy.SocketTests\" name=\"testProxyFd\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.AcctPacketHandlingTests\" name=\"testHandleAcctPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.AcctPacketHandlingTests\" name=\"testHandleAcctPacketUnknownHost\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.AcctPacketHandlingTests\" name=\"testHandleAcctPacketWrongPort\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.AuthPacketHandlingTests\" name=\"testHandleAuthPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.AuthPacketHandlingTests\" name=\"testHandleAuthPacketUnknownHost\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.AuthPacketHandlingTests\" name=\"testHandleAuthPacketWrongPort\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.OtherTests\" name=\"testAcctProcessInput\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.OtherTests\" name=\"testAuthProcessInput\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.OtherTests\" name=\"testCreateReplyPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.RemoteHostTests\" name=\"testNamedConstruction\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.RemoteHostTests\" name=\"testSimpleConstruction\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.ServerConstructiontests\" name=\"testBindDuringConstruction\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.ServerConstructiontests\" name=\"testParameterOrder\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.ServerConstructiontests\" name=\"testSimpleConstruction\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.ServerRunTests\" name=\"testRunIgnoresPacketErrors\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.ServerRunTests\" name=\"testRunIgnoresPollErrors\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.ServerRunTests\" name=\"testRunIgnoresServerPacketErrors\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.ServerRunTests\" name=\"testRunInitializes\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.ServerRunTests\" name=\"testRunRunsProcessInput\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.SocketTests\" name=\"testBind\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.SocketTests\" name=\"testGrabPacket\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.SocketTests\" name=\"testPrepareSocketAcctFds\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.SocketTests\" name=\"testPrepareSocketAuthFds\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testServer.SocketTests\" name=\"testPrepareSocketNoFds\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testAddressDecoding\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testAddressEncoding\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testDateDecoding\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testDateEncoding\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testDecodeFunction\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testEncodeFunction\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testIntegerDecoding\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testIntegerEncoding\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testInvalidAddressEncodingRaisesTypeError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testInvalidDataEncodingRaisesTypeError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testInvalidIntegerEncodingRaisesTypeError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testInvalidStringEncodingRaisesTypeError\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testStringDecoding\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testStringEncoding\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testUnknownTypeDecoding\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testUnknownTypeEncoding\" time=\"0\"/>\n  <testcase classname=\"pyrad.tests.testTools.EncodingTests\" name=\"testUnsignedIntegerEncoding\" time=\"0\"/>\n</testsuite>\n. This stackoverflow discussion might have useful information.\n. If you need another example: I put some zope testrunner output online as well. One thing that testrunner is does create a separate file for each source file containing tests so you end up with lots of XML files.\n. Can you provide a status update for this ticket?\n. I'll give it a try. I was still using an older version of Catch, so I'll have to test upgrading first. The first thing I see is lots of new warnings produced by catch and a compile error. so it doesn't appear to be a trivial upgrade.\n. I think we need to think a bit about how to structure the output. As an example lets assume tests that are setup like this:\n``` cpp\nTEST_CASE(\"ClassA\", \"Short description of class A\") {\n    SECTION(\"methodOne\", \"Tests for method one\") {\n        SECTION(\"situation-1\", \"What happens if XYZ\") {\n            REQUIRE(...);\n            REQUIRE(...);\n            REQUIRE(...);\n        }\n         SECTION(\"situation-2\", \"What happens if XYZ\") {\n            REQUIRE(...);\n            REQUIRE(...);\n            REQUIRE(...);\n        }\n    }\nSECTION(\"methodTwo\", \"Tests for method two\") {\n    SECTION(\"situation-1\", \"What happens if XYZ\") {\n        REQUIRE(...);\n        REQUIRE(...);\n        REQUIRE(...);\n    }\n     SECTION(\"situation-2\", \"What happens if XYZ\") {\n        REQUIRE(...);\n        REQUIRE(...);\n        REQUIRE(...);\n    }\n}\n\n}\nTEST_CASE(\"ClassB\", \"Short description of class B\") {\n    SECTION(\"methodOne\", \"Tests for method one\") {\n        // Repeat similar structure as for classA\n```\nwhen reporting results for these tests in JUnit format we run into one problem: Catch supports arbitrary nesting of sections, while JUnit only supports two levels (testsuite -> testcase). I suggest that the simplest thing to do here is to only take the two top levels of Catch (TEST_CASE and top level SECTION). That results in this JUnit structure:\nxml\n<testsuites>\n  <testsuite name=\"ClassA\">\n    <testcase name=\"Tests for method one\" classname=\"methodOne\" />\n    <testcase name=\"Tests for method two\" classname=\"methodTwo\" />\n   </testsuite>\n  <testsuite name=\"ClassB\">\n    <testcase name=\"Tests for method one\" classname=\"methodOne\" />\n    <testcase name=\"Tests for method two\" classname=\"methodTwo\" />\n   </testsuite>\n</testsuites>\n(ignoring the mandatory attributes such as time, tests, failures, etc.). Looking at the data passed to a Catch reporter this does not match correctly: the top level there is a group, but I never see more than one group being generated. I'm not sure if that is due to me not knowing how to make groups, if that is an not fully implemented feature in Catch or a design flaw (unused group level). \nCan you provide some guidance how I should proceed with this?\n. Hi Phil. Can you spare a few minutes to give me a few tips so I can try to fix this?\n. Hi Phil. Is this still on your radar?\n. Hi Phil. I'm still willing to poke at this, but need some input from you. Is this issue still on your radar?\n. This matches the naming scheming, which I admint I have never understood in catch. I am always struggling with two things:\n- why should I have to provide a description for test cases and sections? I already use descriptive names, so the description is often the exact same string. Having to provide it is just annoying.\n- how do test case names map to the commandline option for the testrunner? I would expect that if I have a test case named \"foo\" with a nested testcase named \"bar\", which contains a section named \"buz\" I can use options like -t foo, -t foo/bar or -t foo/bar/buz . That never worked, at which point I always gave up trying to use the -t option.\nThat aside there is a problem with junit XML support: Catch supports nested test cases which does not map to the junit scheme which only supports three levels: package, class and test. Trying force Catch structure into that I would expect something like this:\n- each top level test case is a package\n- each second level test case is a class. If no second level is used insert a dummy level?\n- each section is a test\nor alternatively:\n- each source file is a package\n- each top level test case is a class\n- each section is a test\nThe latter matches python (and I'm guessing java) better, but I am not sure if you can get the source filename in a useful way.\n. What I am struggling with is the need to prefix fhings manually. To \nillustrate this is how I usually structure my tests:\nC++\nTEST_CASE(\"MyClass\") {\n     TEST_CASE(\"SomeMethod\") {\n         SECTION(\"situation-one\") {\n             ....\n            }\n         SECTION(\"situation-two\") {\n             ....\n            }\n     }\n}\nI would expect to be able to tell Catch to run tests for MyClass using \n\"-t MyClass\", or just the tests for MyClass::SomeMethod using \"-t \nMyClass/SomeMethod\", or even a specific situation using \"-t \nMyClass/SomeMethod/situation-one\". I do not see why I should be forced \nto manually repeat the hierarchy structure in the test case name as \nCatch is currently forcing me to do:\nC++\nTEST_CASE(\"MyClass\") {\n     TEST_CASE(\"MyClas/SomeMethod\") {\n         SECTION(\"MyClass/SomeMethod/situation-one\") {\n             ....\n            }\n         SECTION(\"MyClass/SomeMethod/situation-two\") {\n             ....\n            }\n     }\n}\n. I misremembered by code - I was nesting SECTIONs instead of TEST_CASEs. That makes my code look like this:\nC++\nTEST_CASE(\"MyClass\") {\n     SECTION(\"SomeMethod\") {\n         SECTION(\"situation-one\") {\n             ....\n         }\n         SECTION(\"situation-two\") {\n             ....\n         }\n     }\n}\nI still do not see why I need to repeat a prefix in the section name when I already create an explicit nesting level in the code. Is there no way to avoid that?\n. Section selection is certainly something that I am missing. Especially when debugging I often want to run a single (leaf) section so I can test for unintended side-effects and side breakpoints easily without having to worry about other tests triggering them.\n. @philsquared are you mixing up this discussion and another issue where we talked about how -s behaves?\n. I have to admit I don't remember exactly what my thoughts were at the time. Some current thoughts:\n- there is a prefix involved here: you use MyClass as a prefix (through the MyClass* glob.\n- being able to run individual sections within a test case is extremely useful\n- this should also work if those sections are nested\n- perhaps filtering on sections should be a separate commandline option (Python's zope.testrunner uses the -t parameter to do that, nosetests uses --tests). I'm not sure how that will work with nested sections; you may need to define a separating character and advice people not to use that in test names\n. Looking at the current download I do not see a version number anywhere, nor do I see tagged versions or anything else mentioning a version number. Can I safely assume that \"v0.9 build 2\" is the current download you added two days ago?\n. Looks like catch_version is not included in the single-file build. A comment at the top of that file declaring the version number would be very practical as well ;)\n. Hmm.. it seems you already did that on a new branch.  Should we be using the integration branch instead of master now?\n. @SebDyn  I just reported that compile error as #136 as well.\n. @philsquared I'm afraid it still fails with the same error:\nRecording test results\nERROR: Publisher hudson.tasks.junit.JUnitResultArchiver aborted due to exception\njava.lang.NullPointerException\n    at hudson.tasks.junit.CaseResult.getPackageName(CaseResult.java:266)\n    at hudson.tasks.junit.TestResult.tally(TestResult.java:529)\n    at hudson.tasks.junit.JUnitParser$ParseResultCallable.invoke(JUnitParser.java:118)\n    at hudson.tasks.junit.JUnitParser$ParseResultCallable.invoke(JUnitParser.java:90)\n    at hudson.FilePath.act(FilePath.java:851)\n    at hudson.FilePath.act(FilePath.java:824)\n    at hudson.tasks.junit.JUnitParser.parse(JUnitParser.java:87)\n    at hudson.tasks.junit.JUnitResultArchiver.parse(JUnitResultArchiver.java:122)\n    at hudson.tasks.junit.JUnitResultArchiver.perform(JUnitResultArchiver.java:134)\n    at hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java:19)\n    at hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:804)\n    at hudson.model.AbstractBuild$AbstractBuildExecution.performAllBuildSteps(AbstractBuild.java:779)\n    at hudson.model.Build$BuildExecution.post2(Build.java:183)\n    at hudson.model.AbstractBuild$AbstractBuildExecution.post(AbstractBuild.java:726)\n    at hudson.model.Run.execute(Run.java:1541)\n    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:46)\n    at hudson.model.ResourceController.execute(ResourceController.java:88)\n    at hudson.model.Executor.run(Executor.java:236)\n. @philsquared Would it be helpful for you if I setup my jenkins to run the tests from Catch itself, so you can see the errors or output?\n. @philsquared Is there a makefile somewhere I can point jenkins at?\n. I have jenkins running the Catch selftests. Currently I am using a custom branch which adds a makefile for jenkins to use, which is pull request #141. You can see the jenkins output here: https://code.simplon.biz/jenkins/job/Catch/ .\n. It does seem to be working. The breakdown of tests run is not quite there yet as you mention: you have to click through (root) and global before  you see a list of sections. Contrast that to the Euphorie test results where the breakdown is based on filename, then class containing the tests and finally test method. \n. Sorry about that. I've adjusted the permissions so you should be able to access it now.\n. I tested this again today with the current (v0.9 build 38) single include from the integration branch. It works, but the created structure is not very optimal:\n- the output has single top level package called (root)\n- underneath the (root) package is a single class called global\n- underneath the global class all TEST_CASEs are lasted as test names\nThis completely wastes two levels of test structure which would be very useful to use, and if you use the same test case names in multiple source files (for example TEST_CASE(\"Constructor\") it is impossible to tell them apart.\nI would suggest to change the output as follows:\n- use the filename as the package name. So instead of a single (root) package you would have file1.cc, file2.cc. It would be incredibly nice to have a relative path from the top level build directory included, but I can image that is not possible.\n- move TEST_CASE to the send class level.\n- expose the top level SECTION inside a test case as the test name.\n. While junit is the most popular output format it is of course not the only one. Looking at the list of Jenkins plugins there are a bunch of alternatives: Cpptest, Gallio/MbUnit, JavaTest, JSUnit, NUnit and xUnit which supports a whole bunch of formats. Perhaps one of those will be a better fit.\n. It looks like all those plugins just convert various format to junit internally, so you are still bound to the three-level package/class/test structure.\n. While I see some of the points from @SebDyn I have to disagree with others.\nI indeed also tend to have very few and often just one test case per source file, so using the test case name only and ignoring the file name would be fine for me.\nMy current codebases are not large enough to warrant multiple CATCH test runners (I do have others, but those are python-based for python wrappers) so using the executable name did not occur to me. For large codebases I can see that that could be useful. I wonder what percentages of code bases is large enough to warrant that. For my situations it would be a shame to loose that hierarchy level.\n. The test grouping is also requested in #320.\n. Thanks!\n. Hi Phil. I was wondering if you can provide an indication when you'll have a fix for this? \n. I will do some more testing in the next few days. I should be able to provide feedback before Monday.\n. One thing I noticed is that nested sections are not shown running the tests with -s. With the above example the output looks like this:\n\nRunning: MyClass\n[Start section: 'defaults']\n..\n[End of section: 'defaults' ..]\n\nNotice how the MyClass::MyClass level is skipped in the output.\n. So far everything is looking correct: tests in nested sections are run correctly, and the XML report shows them as well.\nI'll leave closing this until you have decided if the nested sections should be shown in the -s output, which they are not at the moment.\n. Found a possible problem. I have a test which looks like this:\n\nTEST_CASE(\"MyClass\", \"MyClass basic tests\") {\n    SECTION(\"MyClass::MyClass\", \"MyClass constructor tests\") {\n        MyFixture fixture;\n\n        SECTION(\"defaults\", \"Default values for member varirables\") {\n             // ...\n        }\n        SECTION(\"other\", \"Other tests\") {\n             // ...\n        }\n    }\n}\n\nMyFixture is a simple class which prepares a test environment in its constructor and rests everything in its destructor. The test segfault in a way which suggests that the fixture is torn down before the \"other\" section is run.\nIs there another way to setup test fixture? I couldn't find anything in the tests, and this pattern felt quite natural.\n. I found an error in my test fixture which caused the segfault. As far as I can see nested sections work correctly now.\n. Looks fine, thanks!\n. The segfault happens on the lua_next line, which is the only REQUIRE statement that does stack manipulations.\nI'm indeed on master, so double evaluation is a likely factor. To test this hypothesis I changed my catch-less version to do the assert(lua_next(lua, -2)==0); twice and that indeed makes it segfault as well.\nI'll try the SingleEvaluation branch to see if that helps.\n. The SingleEvaluation branch currently results in a compile error:\n\n\n../../src/tests/catalog.cc:345: error: no matching function for call to 'Catch::IResultCapture::acceptExpression(Catch::PtrExpression)'\n../../catch/internal/catch_interfaces_capture.h:61: note: candidates are: virtual Catch::ResultAction::Value Catch::IResultCapture::acceptExpression(const Catch::MutableResultInfo&)\n\n. \nREQUIRE(catalog.called)\n\ncalled is a boolean attribute.\n. You are correct. The class looks a bit like this:\n\nclass MockGenericSearchCatalog : public Catalog {\npublic:\n    bool *called;\n};\n\nI'll test if your change improves things.\n. It does indeed! All tests are running correctly now.\n. I'll try later this week. A somewhat related question: when moving to \nthe latest catch version it is attractive to use the single-include \nmethod, but I didn't see any documentation on how to do the equivalent \nof using catch_with_main.hpp vs catch.hpp using it. Can you add that to \nthe documetation?\n\nWichert Akkerman wichert@wiggy.net   It is simple to make things.\nhttp://www.wiggy.net/                  It is hard to make things simple.\n. It compiles Catch itself, but I am no looking at problems relating to pointers. I have a boost::shared_ptr variable that I used to check for NULL with this:\nC++\nstruct my_type;\nboost::shared_ptr<my_type> result = do_something();\nCHECK(result.get()==0);\nthat now fails to compile with a \"ISO C++ forbids comparison between pointer and integer\" error. The proper way to fix that is to rewrite it a bit to this:\nC++\nstruct my_type;\nboost::shared_ptr<my_type> result = do_something();\nCHECK(result.get()==NULL);\nCHECK(result==NULL); // Alternative spelling, should also work\nbut that results in this error:\n../../src/tests/advice.cc:25:3: warning: passing NULL to non-pointer argument 1 of \u2018Catch::ResultInfoBuilder& Catch::Expression<T>::operator==(const RhsT&) [with RhsT = long int, T = const boost::shared_ptr<my_type>&]\u2019 [-Wconversion-null]\n../../src/tests/advice.cc:25:3: warning: passing NULL to non-pointer argument 1 of \u2018Catch::ResultInfoBuilder& Catch::Expression<T>::operator==(const RhsT&) [with RhsT = long int, T = const boost::shared_ptr<my_type>&]\u2019 [-Wconversion-null]\n\n. There is another possible spelling: boost::shared_ptr has conversion to bool which suggests this spelling should work:\nC++\nstruct my_type;\nboost::shared_ptr<my_type> result = do_something();\nCHECK(!result);\nwhich indeed does work. However when I need to test if two pointers are not NULL and I do this:\nC++\nstruct my_type;\nboost::shared_ptr<my_type> one = do_something(1);\nboost::shared_ptr<my_type> two = do_something(2);\nCHECK(one && two);\nI get a compile error again:\n../../src/tests/advice.cc: In function \u2018void TestCaseFunction_catch_internal_19()\u2019:\n../../src/tests/advice.cc:55:3: error: no match for \u2018operator&&\u2019 in \u2018Catch::ExpressionBuilder((*(const Catch::SourceLineInfo*)(& Catch::SourceLineInfo((* & std::basic_string<char>(((const char*)\"../../src/tests/advice.cc\"), (*(const std::allocator<char>*)(& std::allocator<char>())))), 55u))), ((const char*)\"REQUIRE\"), ((const char*)\"one && two\"), 0).Catch::ExpressionBuilder::operator->* [with T = boost::shared_ptr<my_type>]((*(const boost::shared_ptr<my_type>*)(& one))) && adv2\u2019\n../../src/tests/advice.cc:55:3: note: candidate is:\n../../src/tests/advice.cc:55:3: note: operator&&(bool, bool) <built-in>\n../../src/tests/advice.cc:55:3: note:   no known conversion for argument 1 from \u2018Catch::Expression<const boost::shared_ptr<my_type>&>\u2019 to \u2018bool\u2019\n. It gets more fun: if I do CHECK(one); CHECK(two); as a workaround it compiles fine. But now the testrunner segfaults:\n```\n[Testing completed. All tests passed (11251 assertions in 35 test cases)]\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000a98f60 in ?? ()\n(gdb) bt\n0  0x0000000000a98f60 in ?? ()\n1  0x000000000046284b in Catch::Runner::~Runner (this=0x7fffffffddb0,\n__in_chrg=<optimized out>) at ../../include/catch/catch.hpp:2735\n\n2  0x000000000046bd40 in Catch::Main (config=...)\nat ../../include/catch/catch.hpp:4512\n\n3  0x000000000046c53c in Main (config=..., argv=0x7fffffffe4d8,\nargc=<optimized out>) at ../../include/catch/catch.hpp:4547\n\n4  Catch::Main (argc=, argv=0x7fffffffe4d8)\nat ../../include/catch/catch.hpp:4555\n\n5  0x00007ffff685f76d in __libc_start_main (\nmain=0x408b90 <main(int, char* const*)>, argc=1, ubp_av=0x7fffffffe4d8, \ninit=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, \nstack_end=0x7fffffffe4c8) at libc-start.c:226\n\n6  0x000000000040a475 in _start ()\n```\n. This is working properly now!\n. And on a side-note: it feels unfair you get to bump me now ;)\n. This is also working correctly now, so I'm guessing it was a flaw you fixed before.\n. I suppose you're refering to #5? :)\n. Some extra information that might be helpful: the place where I hit this (and first place where I tried to use one of the logging functions) uses a helper function to check things. So the tests look something like this:\n``` c++\nvoid verify(my_struct *data) {\n    while (data) {\n        SCOPED_INFO(\"Failure at \" << data->title);\n        CHECK(data->member);\n    }\n}\nTEST_CASE(\"case name\", \"\") {\n    SECTION(\"section name\", \"\") {\n        verify(data1);\n        verify(data2);\n    }\n}\n```\nThe real thing actually has an extra helper method in between but I doubt that matters.\n. I had indeed missed that commit. Thanks for the fix!\n. I do not think there is a single unix standard here. As usual there are multiple standards: POSIX, GNU getopt and others that all have different behaviour, and there is no clear winner. Unix documentation always specifies options first followed by arguments, but the majority of implementations consume all options first ignoring ordering. There are enough exceptions to not make that a hard rule though.\n. For XML output I would actually expect successes to be reported in detail.\n. As long as the JUnit reporter always includes everything I'm happy. Once it works anyway ;)\n. I can  make a pull request with that change so you can click on a merge button. would that help?\n. Most likely the fault is mine here - the target branch is something you set when creating a pull request, not something you can set when merging.\n. Ignore this - wrong branch\n. I'll close this in favour if #178.\n. I would expect the order of my statements to match the order in which they are output. That means if I do this:\nc++\nSCOPED_INFO(\"Message A\");\nCHECK(true==false);\nINFO(\"Message B\");\nI would expect to see something like this:\nMessage A\nCheck failed: true==false\nMessage B\n. From what I remember SCOPED_INFO is only output on failure, but INFO is always printed. What would be the distinction between the two otherwise?\n. What can we use to always generate output? Will WARN do that?\n. I haven't tested this, but to be sure: when using the junit reporter is INFO always output as well? \n. That is not necessarily true. For example I have tests that do sanity checks on generated data files and I am very interested in seeing some output from that such as the number of items checked or some collected statistics.\n. If you reply to my last mail :)\n. This sounds like standard and expected C++ behaviour.\n. Are tags documented anywhere? I've seen them mentioned but I have no idea how one would use them.\n. Can one you use variadic macros to do this:\nc++\nTEST_CASE(\"name\", \"tag1\", \"tag2\", \"tag3\") { ... }\nOr perhaps an initialiser list is a more natural syntax?\nc++\nTEST_CASE(\"name\", {\"tag1\", \"tag2\", \"tag3\"}) { ... }\n. Missing overloads for tests seem to be a common thing. Perhaps it would be useful to have a generic fallback that prints a warning with a pointer to documentation how to add an overload?\nI ran into a similar problem when I tried to compare two std::vector instances and just worked around it by doing REQUIRE(static_cast<bool>(vec_a==vec_b)), but that is a pretty nasty thing to do. Of course specialised printers for things you could iterate over might also be a neat trick. You could like at what python's unittest framework does: they have specialised reports for lists and dictionaries that only print the different elements.\n. I didn't try that. Both because I did not think of it and if I had thought of it I would not have used it since you don't immediately see anymore that you have a (temporary) workaround there.\n. I can see value in doing column-layout, but I'm not quite convinced that trying to wrap to match the screen width is beneficial. Doing that makes it impossible to resize my window to get everything on one line again (something I frequently do to quickly read something) since I'll need to rerun the testrunner again.\n. Looks like a very worthwhile addition!\n. The first line is a bit unexpected, but the rest is by design as far as I can see: CATCH will treat all code at higher levels as initialisation code and re-run it for every SECTION at the same or lower level. I use this to re(set) fixtures in between sections.\n. There isn't any that I can see. For what it's worth I would prefer a more explicit style, but I think Phil disagrees with that. Something like (naming shamefully stolen from Jasmine:\n``` c++\nTEST_CASE(\"my-case\") {\n   MyFixture fixture;\nBEFORE_EACH() {\n       ....\n   }\nAFTER_EACH() {\n       fixture.reset();\n   }\nSECTION(...) {\n       ....\n    }\n}\n```\nThis makes it explicit which code you want to run before/after every test (the after option is missing right now), and allows you to do one-time setup code that doesn't need to be rerun for every test.\n. Wouldn't it make sense to not wrap at all when outputting to a file? You can then leave the wrapping-decision to the tool you use to view that file.\n. What I do is add -isystem <catch include path> to my compiler options so I get no warnings for Catch or other third party libraries.\n. I'm guessing this ticket can be closed?\n. For what it's worth I would love to have that test suite grouping. Especially when writing BDD-style tests it is very practical to allow grouping all tests for a specific module or class.\n. I guess I'm too used to writing Python tests, which makes me use the wrong terminology when dealing with Catch :(\nWhat I mean is: I want to be able to run an individual SECTION. Typically my tests are structured like this:\n``` C++\nTEST_CASE(\"Tokenizer\", \"[search]\") {\n    SECTION(\"Constructors\") {\n       SECTION(\"Default constructor\") { }\n       SECTION(\"Copy constructor\") { }\n    }\nSECTION(\"Unicode handling\") { }\n\n}\n```\nWhen I have a bug in the copy constructor I want to be able to run only the Copy constructor section of the Tokenizer test case. Since that is not possible I currently end up copying code around so I get this:\n``` C++\nTEST_CASE(\"XXX Copy constructor\", \"[DEBUG]\") {\n  // Copy of Tokenizer->Copy constructor\n}\nTEST_CASE(\"Tokenizer\", \"[search]\") {\n    SECTION(\"Constructors\") {\n       SECTION(\"Default constructor\") { }\n       SECTION(\"Copy constructor\") { \n            // Old/original version of what is now in \"XXX Copy constructor\"\n        }\n    }\nSECTION(\"Unicode handling\") { }\n\n}\n```\nI then just run the tests for the DEBUG tag. Once I'm done I copy the code back to the original section and delete the temporary test case.\n. That is indeed a matter of taste. I find $(patsubst) to be more intuitive, so that is what I used when I made that makefile.\n. What was the reason for this change? As far as I can see you ignore all the extra parameters, so it makes sense to at least warn about them imho.\n. ",
    "TypicalFooBar": "Hey, I just wanted to chime in here on this conversation of two years :)\nI experienced the same error in Jenkins that you were experiencing Wichert.  The NullPointerException because of the output format of the JUnit reporter.\nI was able to figure out why Jenkins is crashing, and I have an ugly workaround that lets Jenkins continue to run, but it doesn't solve this issue.\nCurrently, in the JunitReporter class, there is a function that looks like this:\n```\nvoid OutputTestCases( XmlWriter& xml, const Stats& stats ) {\n            std::vector::const_iterator it = stats.m_testCaseStats.begin();\n            std::vector::const_iterator itEnd = stats.m_testCaseStats.end();\n            for(; it != itEnd; ++it ) {\n                xml.writeBlankLine();\n                xml.writeComment( \"Test case\" );\n            XmlWriter::ScopedElement e = xml.scopedElement( \"testcase\" );\n            xml.writeAttribute( \"classname\", it->m_className );\n            xml.writeAttribute( \"name\", it->m_name );\n            xml.writeAttribute( \"time\", \"tbd\" );\n\n            OutputTestResult( xml, *it );\n        }\n\n```\nUsing the above, the output from the JunitReporter looks like the following:\n```\n\n\n<!--Test case-->\n<testcase name=\"SimpleTest\" time=\"tbd\"/>\n\n\n\n\n\n```\nAfter some trial and error, I found that what was making Jenkins crash was the fact that the testcase element did NOT have the classname attribute.  This is the line of code in the OutputTestCases() function of the JunitReporter class that causes the trouble:\nxml.writeAttribute( \"classname\", it->m_className );\nIn my case, this line was not actually printing the classname.  Perhaps it->m_className is null?  When I switched out that line for a random string of \"foo\", it printed.  The modified OutputTestCases() function looks like this:\n```\nvoid OutputTestCases( XmlWriter& xml, const Stats& stats ) {\n            std::vector::const_iterator it = stats.m_testCaseStats.begin();\n            std::vector::const_iterator itEnd = stats.m_testCaseStats.end();\n            for(; it != itEnd; ++it ) {\n                xml.writeBlankLine();\n                xml.writeComment( \"Test case\" );\n            XmlWriter::ScopedElement e = xml.scopedElement( \"testcase\" );\n            xml.writeAttribute( \"classname\", \"foo\" );\n            xml.writeAttribute( \"name\", it->m_name );\n            xml.writeAttribute( \"time\", \"tbd\" );\n\n            OutputTestResult( xml, *it );\n        }\n    }\n\n```\nWith the above change the JunitReporter output looks like this:\n```\n\n\n<!--Test case-->\n<testcase classname=\"foo\" name=\"SimpleTest\" time=\"tbd\"/>\n\n\n\n\n\n```\nJenkins seems to be okay with this, though it displays the SimpleTest result as if it were a part of the class foo, which is the ugly part I was talking about (but at least it didn't crash!).\nI hope this helps you debug the JunitReporter.  Great work on Catch Phil!  It is VERY easy to use, which I really appreciate!  :)\n. Phil,\nI just used the catch.hpp file in the Integration branch and Jenkins was quite happy with the output!  I tested it with different successful and unsuccessful test cases, and it seems to be working just fine.\nThank you for taking time to fix this problem!  The other tbd values still need work, but at least Jenkins can read and display the output from the JunitReporter.\nThanks again for your help, and again great job on Catch!\n. ",
    "SebDyn": "I want to reopen this bug because it does not work with me.\nI use Jenkins ver. 1.479\nJenkins Plugin: xunit ver. 1.50 ( https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin ) \nCATCH: single header distribution. Branch Integration, revision 88b70828f2\nJenkins console output:\n```\nGestartet durch Benutzer anonymous\nBuilding in workspace /var/lib/jenkins/jobs/Test Executables/workspace\n[SSH] executing pre build script:\n/HOMEDIR/vmwarectrl/opensuse/vmstart_test.sh\ncatched variables: branch=next, cores=4, mode=release, os=linux\n[SSH] exit-status: 0\n[workspace] $ /bin/sh -xe /tmp/hudson7292242557306021101.sh\n[workspace] $ /bin/sh -xe /tmp/hudson4347723387053783514.sh\n[SSH] executing post build script:\nBUILD_ID=\"2012-11-13_13-56-01\"\nssh rlampert@opensuse /HOMEDIR/devel/build/exec_test.sh -e expensive -e meshdata\nmkdir /var/lib/jenkins/jobs/Test\\ Executables/workspace/$BUILD_ID\nscp rlampert@opensuse:/HOMEDIR/devel/build/.xml /var/lib/jenkins/jobs/Test\\ Executables/workspace/$BUILD_ID\nscp rlampert@opensuse:/HOMEDIR/devel/build/test.txt /var/lib/jenkins/jobs/Test\\ Executables/workspace/$BUILD_ID\ntouch /var/lib/jenkins/jobs/Test\\ Executables/workspace/test.xml\n[SSH] exit-status: 0\n[xUnit] [INFO] - Starting to record.\n[xUnit] [INFO] - Processing JUnit\n[xUnit] [INFO] - [JUnit] - 1 test report file(s) were found with the pattern '*.xml' relative to '/var/lib/jenkins/jobs/Test Executables/workspace' for the testing framework 'JUnit'.\nERROR: Publisher org.jenkinsci.plugins.xunit.XUnitPublisher aborted due to exception\njava.lang.NullPointerException\n    at hudson.tasks.junit.CaseResult.getPackageName(CaseResult.java:266)\n    at hudson.tasks.junit.TestResult.freeze(TestResult.java:576)\n    at hudson.tasks.junit.TestResultAction.setResult(TestResultAction.java:74)\n    at hudson.tasks.junit.TestResultAction.(TestResultAction.java:67)\n    at org.jenkinsci.plugins.xunit.XUnitPublisher.recordTestResult(XUnitPublisher.java:253)\n    at org.jenkinsci.plugins.xunit.XUnitPublisher.performXUnit(XUnitPublisher.java:123)\n    at org.jenkinsci.plugins.xunit.XUnitPublisher.perform(XUnitPublisher.java:93)\n    at hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java:19)\n    at hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:717)\n    at hudson.model.AbstractBuild$AbstractBuildExecution.performAllBuildSteps(AbstractBuild.java:692)\n    at hudson.model.Build$BuildExecution.post2(Build.java:183)\n    at hudson.model.AbstractBuild$AbstractBuildExecution.post(AbstractBuild.java:639)\n    at hudson.model.Run.execute(Run.java:1527)\n    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:46)\n    at hudson.model.ResourceController.execute(ResourceController.java:88)\n    at hudson.model.Executor.run(Executor.java:236)\nSending e-mails to: XXXX\nFinished: FAILURE\n```\nThe XML generated by CATCH \n``` xml\n\n\n<!--Test case-->\n<testcase classname=\"global\" name=\"boost/spirit/width\" time=\"tbd\"/>\n\n<!--Test case-->\n<testcase classname=\"global\" name=\"sos_import/lsdyna/simple\" time=\"tbd\"/>\n\n<!--Test case-->\n<testcase classname=\"global\" name=\"sos_import/lsdyna/simple/individual_files\" time=\"tbd\"/>\n\n<!--Test case-->\n<testcase classname=\"global\" name=\"sos_import/lsdyna/simple/project\" time=\"tbd\"/>\n\n<!--Test case-->\n<testcase classname=\"global\" name=\"sos_import/lsdyna/parser/old\" time=\"tbd\"/>\n\n<!--Test case-->\n<testcase classname=\"global\" name=\"sos_import/osl3/bin/simple\" time=\"tbd\"/>\n\n<!--Test case-->\n<testcase classname=\"global\" name=\"sos_import/osl3/bin/xml\" time=\"tbd\"/>\n\n<!--Test case-->\n<testcase classname=\"global\" name=\"sos_import/lsdyna/osl3/bsp1_part321\" time=\"tbd\"/>\n\n<!--Test case-->\n<testcase classname=\"global\" name=\"sos_import/lsdyna/fixed_width\" time=\"tbd\"/>\n\n<!--Test case-->\n<testcase classname=\"global\" name=\"sos_import/lsdyna/fixed_width/output\" time=\"tbd\"/>\n\n\n\n    2012-11-13 13:50:36 [   INFO] thread   0 | Node data in database:\n  \n\n2012-11-13 13:51:57 [  ERROR] thread   1 |         Did not find data object with (design, quantity) = ('0004', 'not-existing') in data base.\n  \n\n```\n. It looks like if  needs name=\"something\". If I add this manually, it works.\nIf I run the test with 'test -t testcasename', a name is provided and JUnit can use it. A name is only not provided if running all tests (without -t). \n. Hello Phil,\nthanks for investigating. \nI can not test it, however, because it does not compile on Mac Lion (GCC 4.2.1).\nI compile with -Werror -Wall -std=c++98\nFirst of all, there are some warnings:\nline 2644 must be\nEquals( const Equals& other ) : MatcherImpl(), m_str( other.m_str ){}\nline 2660 must be\n            Contains( const Contains& other ) : MatcherImpl(), m_substr( other.m_substr ){}\nline 2676 must be \n            StartsWith( const StartsWith& other ) : MatcherImpl(), m_substr( other.m_substr ){}\nline 2692 must be \n            EndsWith( const EndsWith& other ) : MatcherImpl(), m_substr( other.m_substr ){}\nFurther I get these errors that I can not resolve myself:\n../../../ext/catch/catch.hpp: In instantiation of 'Catch::ExpressionLhs':\nXXX.cpp:118:   instantiated from here\n../../../ext/catch/catch.hpp:942: error: forming reference to reference type 'const double&'\n../../../ext/catch/catch.hpp: In instantiation of 'Catch::ExpressionLhs':\nYYY.cpp:142:   instantiated from here\n../../../ext/catch/catch.hpp:942: error: forming reference to reference type 'const int&'\n../../../ext/catch/catch.hpp: In member function 'Catch::ExpressionLhs Catch::ExpressionDecomposer::operator->(const T&) [with T = double]':\nXXX.cpp:118:   instantiated from here\n../../../ext/catch/catch.hpp:1022: error: no matching function for call to 'Catch::ExpressionLhs::ExpressionLhs(const double&)'\n../../../ext/catch/catch.hpp:938: note: candidates are: Catch::ExpressionLhs::ExpressionLhs(const Catch::ExpressionLhs&)\n../../../ext/catch/catch.hpp: In member function 'Catch::ExpressionLhs Catch::ExpressionDecomposer::operator->(const T&) [with T = int]':\nYYY:142:   instantiated from here\n../../../ext/catch/catch.hpp:1022: error: no matching function for call to 'Catch::ExpressionLhs::ExpressionLhs(const int&)'\n../../../ext/catch/catch.hpp:938: note: candidates are: Catch::ExpressionLhs::ExpressionLhs(const Catch::ExpressionLhs&)\nThese errors appear when doing\nint return_call;\nREQUIRE( return_call == 0);\n(and the same for a double number). \n. In my local copy I modified the code to \n``` cpp\n                XmlWriter::ScopedElement e = xml.scopedElement( \"testsuite\" );\n                xml.writeAttribute( \"name\", (it->m_name==\"\") ? \"test_suite_name\" : it->m_name );\n\n```\nas a quick hack to get it working.... To set a default value != \"\" for m_name makes no sense because it is overwritten to \"\" if the -t command line option does not appear. Hence all these tests should be done when writing the XML... \n. There are 2 more bugs that I found when integrating CATCH into Jenkins:\n(1) The testsuite name should be unique for each test. In our environment we have multiple executables generating a set of XML files. If each testsuite has the same name, Jenkins will see only the output of a single executable. We resolved this issue by running an 'sed' script that replaces the testsuite name by the name of the executable that produces it. \n(2) CATCH stores the output in the XML sections  and   at the end of each file. Jenkins does not parse these blocks and, hence, the output can not be shown. These sections must appear for each  and  individually. For a brief description of the output format, please see the website http://stackoverflow.com/questions/4922867/junit-xml-format-specification-that-hudson-supports (second post by Lukas Eder). Personally, I'd prefer an output block separated for each testcase... \nBest regards\nSebastian\n. Hello Phil,\nthanks for fixing this. I will check this later on. Regarding point (2): \nCATCH produces something like this:\nxml\n<testsuites disabled=\"\" errors=\"\" failures=\"\" name=\"\" tests=\"\" time=\"\">\n    <testsuite disabled=\"\" errors=\"\" failures=\"\" hostname=\"\" id=\"\"\n        name=\"\" package=\"\" skipped=\"\" tests=\"\" time=\"\" timestamp=\"\">\n        <testcase assertions=\"\" classname=\"\" name=\"\" status=\"\" time=\"\">\n            <error message=\"\" type=\"\"/>\n        </testcase>\n    </testsuite>\n    <system-out>\n        all the output to std::cout\n    </system-out>\n    <system-err>\n        all the output to std::cerr\n    </system-err>\n</testsuites>\nThe problem here is that I can not access the blocks <system-out> and <system-err> from Jenkins when appearin within <testsuites>. Even putting it to <testsuite> won't help me (although at least JUnit supports it, I did not find this in Jenkins, though) because I can not assign an output message to a specific test case.\nWhat I need is something like this:\nxml\n<testsuites disabled=\"\" errors=\"\" failures=\"\" name=\"\" tests=\"\" time=\"\">\n    <testsuite disabled=\"\" errors=\"\" failures=\"\" hostname=\"\" id=\"\"\n        name=\"\" package=\"\" skipped=\"\" tests=\"\" time=\"\" timestamp=\"\">\n        <testcase assertions=\"\" classname=\"\" name=\"\" status=\"\" time=\"\">\n            <error message=\"\" type=\"\"/>\n            <system-out>\n                all the output to std::cout\n            </system-out>\n            <system-err>\n                all the output to std::cerr\n            </system-err>\n        </testcase>\n    </testsuite>\n</testsuites>\nThat means the position of the system-err and system-out blocks should be assigned to the test cases, not to the whole test suites. \nbest regards\nSebastian\n. Hello Phil,\nFor me, the current implementation works perfectly! Thanks for the effort!\nBest regards\nSebastian\n. May I add another point to my wish list again? \nTest failures may lead to several results:\n- some test cases fail\n- the program unexpectedly terminates \nThe first case works rather well now. To catch the second case, we introduced a script that checks the exit code. The Main() routine of CATCH was wrapped such that a zero exit code is returned if any test cases failed. This is different if an uncatched exception or even a segmentation fault appears. In this case the exit code is scanned, and the script generates its own XML for JUnit/Jenkins that contains the error information on 'calling the executable'. With the new strategy of catching the std output, however, I can not track the output in case of a segfault since it is caught by CATCH. I do not know if it is possible to 'move' the std output if no segfault happens and to 'copy' the std output if a segfault happens. If this is not possible, maybe you can simply add an option to send output to both, the XML and to console? It would also be helpful if the console output would separate the std output of the individual test cases and sections somehow (eg. \"Now start test case 'xy/z'\"). \nBest regards\nSebastian\n. Hi Phil!\nToday I encountered a small bug in the JUnit reporter: On some occasions (Eg. if CHECK_THROWS fails) a wrong XML is written, where the element is empty, eg. < message=\"\"> is written instead of . I've seen in the switch-case-block you simply do nothing for certain outcomes. , I changed it to:\ncase ResultWas::Unknown:\n                case ResultWas::FailureBit:\n                case ResultWas::Exception:\n                case ResultWas::DidntThrowException:\n                    stats.m_element = \"failure\";\n                    break;\nBest regards\nSebastian\n. Hello,\nhere are my 5 cents since I do not fully agree with Wichert's ideas\nI do not recommend to use the source file name for the class name. In my case I only have a single test case per source file\u2026 \nIn my environment I post-process the JUnit XML and replace the class name by the name of the test executable (without path). Each executable collects a set of test cases grouping them semantically in a single executable. So far I could live with \"package name=(root)\". \nHere is my recommendation: \nthe \"top level package\" should be configurable (by command line). The same for the \"class name\". In this case I would use the following ordering:\n\n\"top level package\" = name of executable\n\"class name\" = either \"test_cases\" collecting the tests of CATCH \nor \"exit_code\" collecting information on the exit status of the executable, additional info on crashes (eg. X11' DISPLAY variable or segfaults), or time out (eg. maximum allowed time of 20 minutes exceeded), or debugger output, etc. \n\nI agree with having the SECTION definitions as part of the test names, eg.: \nTEST_CASE(\"name_1/name_2\", \"description\"){\nCHECK(1==0)\nSECTION(\"section_1\")\n{\nCHECK(1==0)\n}\ncould result in failed tests\n(test_executable_name).test_cases.name_1/name_2\n(test_executable_name).test_cases.name_1/name_2/SECTION:section_1\nThen an important note on a bug (feature?) in Jenkins: Even if multiple tests failed within a single test case, Jenkins only displays ONE of them! As a workaround all failed tests should be concatenated into a single  section. \nIt would be extremely useful to have the times used by a test case available in the JUnit output. It would be nice if CATCH detects if any \"boost\" time headers were included and use the boost time functions if available\n```\ninclude  //  before including catch.hpp\n```\nin catch.hpp:\n```\nifdef POSIX_TIME_HPP__\nboost::posix_time::ptime t1,t2;\nt1 = boost::posix_time::microsec_clock::universal_time();\n\u2026\nt2 = boost::posix_time::microsec_clock::universal_time();\nstd::cout << (t2-t1).total_seconds();\nendif\n```\nBest regards\nSebastian\nPS: I am sorry for not replying, Phil. I use an older revision of CATCH in a production environment and currently I do not want to upgrade. \nOn May 14, 2013, at 8:46 AM, Phil Nash wrote:\n\nTherein, as they say, lies the rub.\nFurthermore we're not just talking about Jenkins. Most CI servers support a range of formats but JUnit/Ant is usually the lowest-common-denominator.\nSo until someone comes up with a compelling alternative that they can encourage broad adoption of we're stuck with it.\nIt's not so much the three-tier structure that's the issue.\nThere's a general, \"built for Java\" air to it (which is natural, given its origins - it wasn't devised as a general purpose format). It's quite limited in what can be reported when and, perhaps most significantly, the failure counts are given as attributes in top level elements - which means you can't even start writing it until all tests have been run!\nI wouldn't hold Catch's own XML format up as a shining paradigm of cross framework/ language support either (but maybe we should do something about that). But it has a few characteristics that are in the right direction already - especially that error counts are given in separate elements and at the end - so the report can be streamed as it is being written to.\nBut for CI use the richness of information that is captured is more important. Having places to put file/ line info and assertion expansions are especially welcome.\n\u2014\nReply to this email directly or view it on GitHub.\n. > Is there anything left for this one?\n\nI just tried recent Catch 1.1 build 1 and frankly I need to reply with: No. It is - again - not really working.\nHere is the reason:\n- Old CATCH (working):\n<testsuite errors=\"0\" failures=\"0\" tests=\"107\" hostname=\"0\" time=\"0.140043\" timestamp=\"0\">\n- Current Catch (not working):\n<testsuite name=\"all tests\" errors=\"0\" failures=\"0\" tests=\"1074\" hostname=\"0\" time=\"19.5793\" timestamp=\"0\">\nI use Jenkins 1.596.2 (stable) with JUnit reporter. The interesting thing is: Jenkins does not return with an error. It just does not display the test results when using the current CATCH output.\n. Ok, it seems that Jenkins has a bug somewhere. The \"name\" keyword ist a mandatory field in JUnit 6 standard. We continue investigating this issue. \n. Using the latest version (0.9-build 6) I still have build problems:\n../../ext/catch/catch.hpp: In copy constructor \u2018Catch::Matchers::Impl::StdString::Equals::Equals(const Catch::Matchers::Impl::StdString::Equals&)\u2019:\n../../ext/catch/catch.hpp:2647: warning: base class \u2018struct Catch::Matchers::Impl::MatcherImpl, std::allocator > >\u2019 should be explicitly initialized in the copy constructor\n../../ext/catch/catch.hpp: In copy constructor \u2018Catch::Matchers::Impl::StdString::Contains::Contains(const Catch::Matchers::Impl::StdString::Contains&)\u2019:\n../../ext/catch/catch.hpp:2663: warning: base class \u2018struct Catch::Matchers::Impl::MatcherImpl, std::allocator > >\u2019 should be explicitly initialized in the copy constructor\n../../ext/catch/catch.hpp: In copy constructor \u2018Catch::Matchers::Impl::StdString::StartsWith::StartsWith(const Catch::Matchers::Impl::StdString::StartsWith&)\u2019:\n../../ext/catch/catch.hpp:2679: warning: base class \u2018struct Catch::Matchers::Impl::MatcherImpl, std::allocator > >\u2019 should be explicitly initialized in the copy constructor\n../../ext/catch/catch.hpp: In copy constructor \u2018Catch::Matchers::Impl::StdString::EndsWith::EndsWith(const Catch::Matchers::Impl::StdString::EndsWith&)\u2019:\n../../ext/catch/catch.hpp:2695: warning: base class \u2018struct Catch::Matchers::Impl::MatcherImpl, std::allocator > >\u2019 should be explicitly initialized in the copy constructor\n. Hello Herve,\nyour solution works like a charm! Thanks a lot!\n. @philsquared \nThanks for fixing this. Anyhow: The aforementioned compiler warnings (using GCC 4.2.1) are still in there. Further, I found new warnings (using GCC 4.8 on Mac)\nIn function\n        bool isDebuggerActive()\nI need to change the following lines (basically insert a #ifndef NDEBUG block around them)\n```\nifndef NDEBUG\n        int                 junk;\n\nendif\n```\nand \n```\nifndef NDEBUG\n        junk =\n\nendif\n                sysctl(mib, sizeof(mib) / sizeof(*mib), &info, &size, NULL, 0);\n\n```\nWithout these modifications I get warnings (\"set but unused parameters\").\nUsually these warnings should not bug too much, but we compile our projects with -Werror which in turn is not that nice ;)\n. Hi phil,\nlast time I checked and it worked. \nThanks\nSebastian\n. > How much more fetature-complete can Clang get? AFAIK, it's the only compiler to fully support the current C++14 draft.\nBut it is still missing OpenMP. A No Go for a lot of scientific or engineering software projects. At least there is some work done on Clang and I expect it to be supported latest in 2015 by Xcode. \n. Hui, I should have waited until the whole build is completed. Seems that CATCH 1.0 b53 is only supported on GCC 4.6 and later. Without the pragmas I run into a lot of 'unused variable' errors. \nDo you see any way to enhance the support to older versions ? \n. ",
    "martinmoene": "Comment by SebDyn above reformatted:\nHello,\nhere are my 5 cents since I do not fully agree with Wichert's ideas.\nI do not recommend to use the source file name for the class name. In my case I only have a single test case per source file\u2026 \nIn my environment I post-process the JUnit XML and replace the class name by the name of the test executable (without path). Each executable collects a set of test cases grouping them semantically in a single executable. So far I could live with \"package name=(root)\". \nHere is my recommendation: \nthe \"top level package\" should be configurable (by command line). The same for the \"class name\". In this case I would use the following ordering:\n\n\"top level package\" = name of executable\n\"class name\" = either \"test_cases\" collecting the tests of CATCH \nor \"exit_code\" collecting information on the exit status of the executable, additional info on crashes (eg. X11' DISPLAY variable or segfaults), or time out (eg. maximum allowed time of 20 minutes exceeded), or debugger output, etc. \n\nI agree with having the SECTION definitions as part of the test names, eg.: \nTEST_CASE(\"name_1/name_2\", \"description\"){\nCHECK(1==0)\nSECTION(\"section_1\")\n{\nCHECK(1==0)\n}\ncould result in failed tests\n(test_executable_name).test_cases.name_1/name_2\n(test_executable_name).test_cases.name_1/name_2/SECTION:section_1\nThen an important note on a bug (feature?) in Jenkins: Even if multiple tests failed within a single test case, Jenkins only displays ONE of them! As a workaround all failed tests should be concatenated into a single  section. \nIt would be extremely useful to have the times used by a test case available in the JUnit output. It would be nice if CATCH detects if any \"boost\" time headers were included and use the boost time functions if available\n```\ninclude  //  before including catch.hpp\n```\nin catch.hpp:\n```\nifdef POSIX_TIME_HPP__\nboost::posix_time::ptime t1,t2;\nt1 = boost::posix_time::microsec_clock::universal_time();\n\u2026\nt2 = boost::posix_time::microsec_clock::universal_time();\nstd::cout << (t2-t1).total_seconds();\nendif\n```\nBest regards\nSebastian\nPS: I am sorry for not replying, Phil. I use an older revision of CATCH in a production environment and currently I do not want to upgrade. \nOn May 14, 2013, at 8:46 AM, Phil Nash wrote:\n\nTherein, as they say, lies the rub.\nFurthermore we're not just talking about Jenkins. Most CI servers support a range of formats but JUnit/Ant is usually the lowest-common-denominator.\nSo until someone comes up with a compelling alternative that they can encourage broad adoption of we're stuck with it.\nIt's not so much the three-tier structure that's the issue.\nThere's a general, \"built for Java\" air to it (which is natural, given its origins - it wasn't devised as a general purpose format). It's quite limited in what can be reported when and, perhaps most significantly, the failure counts are given as attributes in top level elements - which means you can't even start writing it until all tests have been run!\nI wouldn't hold Catch's own XML format up as a shining paradigm of cross framework/ language support either (but maybe we should do something about that). But it has a few characteristics that are in the right direction already - especially that error counts are given in separate elements and at the end - so the report can be streamed as it is being written to.\nBut for CI use the richness of information that is captured is more important. Having places to put file/ line info and assertion expansions are especially welcome.\n\u2014\nReply to this email directly or view it on GitHub.\n. I routinely succesfully build TestCatch with MinGW GNU C in a cmd box (not msys).\n\nBuilding Catch Integration version 0.9 build 37 with GCC 4.7.2 gives:\n../../SelfTest/ExceptionTests.cpp: In function 'void TestCaseFunction_catch_internal_69()':\n../../SelfTest/ExceptionTests.cpp:73:1: warning: 'noreturn' function does return [enabled by default]\n../../SelfTest/ExceptionTests.cpp: In function 'void TestCaseFunction_catch_internal_41()':\n../../SelfTest/ExceptionTests.cpp:46:1: warning: 'noreturn' function does return [enabled by default]\nSome information\nAn error\nMessage from section one\nMessage from section two\nSome information\nAn error\nMessage from section one\nMessage from section two\nhello\nhello\nAll tests passed (288 assertions in 27 test cases)\nCompiled with:\ng++ -m32 -Wall -I../../../include -o TestCatch  ../../SelfTest/catch_self_test.cpp ../../SelfTest/TestMain.cpp ../../SelfTest/ApproxTests.cpp ../../SelfTest/BDDTests.cpp ../../SelfTest/ClassTests.cpp ../../SelfTest/ConditionTests.cpp ../../SelfTest/ExceptionTests.cpp ../../SelfTest/GeneratorTests.cpp ../../SelfTest/MessageTests.cpp ../../SelfTest/MiscTests.cpp ../../SelfTest/TrickyTests.cpp ../../SelfTest/VariadicMacrosTests.cpp  &&  TestCatch\n. it has become serenely silent ;)\nWith GCC 4.7 that is: GCC 4.6 produces warnings that do not appear anymore with GCC 4.7.\n. @philsquared The reporters are not in the \"internal\" folder, but internal/catch_interfaces_reporter.h (TWOBLUECUBES_CATCH_IREPORTERREGISTRY_INCLUDED) is (updated path in issue text).\n. I'm working on adapting Catch to work with Microsoft Visual C++ 6.\nSee https://github.com/martinmoene/Catch and Milestones\nVia a quick hack of the single header file, I got the factorial from the Tutorial working. Am now implementing the changes a bit more carefully.\nUpdate 30 August 2012:  VC6-port now compiles and runs selftest, albeit without most \"tricky tests\".\n. Updated 30 June 2013: \nI think it would be good to get rid of trailing spaces and (the few) tabs to prevent unnecessary (pull request) merging of lines that only differ in whitespace, because someone else's editor stripped them. Easiest to just not have trailing spaces (See also comment by PureAbstract above: git-config(1) core.whitespace, apply.ignorewhitespace.)\nThere are still 6? tab characters present:\n```\n\ngrep -P \"\\t\"  internal/.hpp reporters/.hpp\ninternal/catch_running_test.hpp:                RunningTest( RunningTest const&);\ninternal/catch_running_test.hpp:                void operator=( RunningTest const& );\nreporters/catch_reporter_console.hpp:                   void operator= ( AssertionPrinter const& );\n```\n\ngrep \" $\" catch.hpp is clean, but that may be an effect of generateSingleHeader.py. \nFinding lines ending with one or more spaces in individual files gives:\n```\n\ngrep -l \" $\" .hpp internal/.hpp reporters/*.hpp\ncatch_runner.hpp\ninternal/catch_approx.hpp\ninternal/catch_capture.hpp\ninternal/catch_commandline.hpp\ninternal/catch_config.hpp\ninternal/catch_console_colour.hpp\ninternal/catch_console_colour_impl.hpp\ninternal/catch_context_impl.hpp\ninternal/catch_debugger.hpp\ninternal/catch_default_main.hpp\ninternal/catch_evaluate.hpp\ninternal/catch_exception_translator_registry.hpp\ninternal/catch_expression_lhs.hpp\ninternal/catch_expressionresult_builder.hpp\ninternal/catch_generators.hpp\ninternal/catch_generators_impl.hpp\ninternal/catch_legacy_reporter_adapter.hpp\ninternal/catch_list.hpp\ninternal/catch_matchers.hpp\ninternal/catch_message.hpp\ninternal/catch_notimplemented_exception.hpp\ninternal/catch_objc.hpp\ninternal/catch_option.hpp\ninternal/catch_ptr.hpp\ninternal/catch_registry_hub.hpp\ninternal/catch_reporter_registrars.hpp\ninternal/catch_reporter_registry.hpp\ninternal/catch_runner_impl.hpp\ninternal/catch_running_test.hpp\ninternal/catch_section.hpp\ninternal/catch_section_info.hpp\ninternal/catch_sfinae.hpp\ninternal/catch_stream.hpp\ninternal/catch_tags.hpp\ninternal/catch_test_case_info.hpp\ninternal/catch_test_case_registry_impl.hpp\ninternal/catch_test_registry.hpp\ninternal/catch_text.hpp\ninternal/catch_tostring.hpp\ninternal/catch_totals.hpp\ninternal/catch_xmlwriter.hpp\nreporters/catch_reporter_basic.hpp\nreporters/catch_reporter_console.hpp\nreporters/catch_reporter_junit.hpp\nreporters/catch_reporter_xml.hpp\n```\n. s/should/could :smile:/\n. Funny, changed Ptr::operator=(Ptr&)  to take Ptr const & for VC6 at the time you created this issue ;)\n\nIt was required for std::vector<Ptr<OptionParser> > usage in catch_commandline.hpp.\n. Ah, thanks! \nThen maybe add an ellipsis to the help of the help and update the help entry in the Wiki:  -h, -?, --help?\n-?, -h, --help [<option for help on>...]\n. It took  while to sink in, but now it makes no less sense than the other interpretation. I'd say this resolves the problem ;-)..., but then:\nWhy isn't Catch following the Unix standard argument order (forgetting about an occasional accident)? \ntool [option...] [argument...]\nOption -t, --test becomes unnecessary and it would prevent this ambiguity to occur.\n. Please note that I do realise it may be a whole lot easier to ask than to solve it or prevent these questions ;-)\n. The following compiles without warnings and successfully fails with VS8 (VS2005) and Catch 0.9 build 37:\n```\ndefine CATCH_CONFIG_MAIN  // This tell CATCH to provide a main() - only do this in one cpp file\ninclude \"catch.hpp\"\nclass ClassName {};\nTEST_CASE( \"pointer to class\", \"\" )\n{\n   ClassName *p = 0;\n   REQUIRE( p != 0 );\n}\n// cl -W3 -EHsc -I../../../single_include test.cpp\n```\nIn Catch 0.9 build 37 Evaluate::compare() looks as follows:\ntemplate<Operator Op, typename T> bool compare( int lhs, T* rhs ) {\n    return Evaluator<T*, T*, Op>::evaluate( reinterpret_cast<T*>( lhs ), rhs );\n}\n. Note: to view (scoped) info, use option --success (-s).\nSomething like:\n``` Cpp\nTEST_CASE( \"fail/info\", \"\" )\n{\n    INFO( \"this is info going with the following failure\" );\n    FAIL( \"failure for above info\" );\n}\nTEST_CASE( \"fail/info/unrelated info\", \"\" )\n{\n    INFO( \"this is info unrelated to the following failure\" );\n}\nTEST_CASE( \"fail/info/unrelated failure\", \"\" )\n{\n    FAIL( \"failure unrelated to above test case info\" );\n}\nTEST_CASE( \"fail/scoped info/unrelated\", \"\" )\n{\n    {\n        SCOPED_INFO( \"this is scoped info unrelated to the following failure\" );\n    }\n    {\n        FAIL( \"failure unrelated to above scoped info\" );\n    }\n}\nTEST_CASE( \"fail/scoped info\", \"\" )\n{\n    {\n        SCOPED_INFO( \"this is scoped info unrelated to the following failure\" );\n    }\n    {\n        SCOPED_INFO( \"this is scoped info going with the following failure\" );\n        FAIL( \"failure for above scoped info\" );\n    }\n}\n```\n. hmm, I don't see info/scoped info/capture unless I specify option --success (CATCH v0.9 b16 (integration)).\n. I think it is the intention that the (scoped) info appears on failure without having to specify option --success. I'll leave this to Phil to clear up ;)\n. CATCH v0.9 b17 (integration).\nI wouldn't expect the INFO below to appear in an unrelated TEST_CASE:\n``` Cpp\nTEST_CASE( \"fail/info/unrelated info\", \"\" )\n{\n    INFO( \"this is info unrelated to the following failure\" );\n}\nTEST_CASE( \"fail/info/unrelated failure\", \"\" )\n{\n    FAIL( \"failure unrelated to above test case info\" );\n}\n```\nyields:\n```\nfail/info/unrelated failure\n...............................................................................\nFAILED:\nexplicitly with messages:\n  this is info unrelated to the following failure\n  failure unrelated to above test case info\nexercise_reporter_console.cpp:74:\n```\n. Please note that development occurs at the Integration branch, your pull request is about the master branch. See master README.\nThe changes of include/internal/catch_result_type.h are already present in Integration.\n. [Added C++ ... around code]\n. hmm, sorry for my convoluted message; shouldn't the solution instead be:\nIn ./include/internal/catch_reporter_registrars.hpp:\n``` C++\ninclude \"../reporters/catch_legacy_reporter_adapter.h\"\n```\nThis solves the problem.\n. Moving back the catch_legacy_reporter_adapter.h* into internal (also) solves the problem.\nBy 'it shouldn't require ../ relative addressing', do you mean:\n- the compiler is wrong\n- I don't want it to be that way\nWhat is the preferred location of catch_legacy_reporter_adapter.h* from a user's point of view?\n. Thanks Phil, this clears it up and closes this issue ;)\nHistorical note: This is the second issue titled 'Include paths', not to be confused with this one\n. Catch v1.0 build 2 gives warning: \"NOMINMAX\" redefined with g++ 4.8.1:\n../../../include/internal/catch_console_colour_impl.hpp:22:0: warning: \"NOMINMAX\" redefined [enabled by default]\n #define NOMINMAX\n ^...\nc:\\programs\\mingw\\include\\c++\\4.8.1\\i686-pc-mingw32\\bits\\os_defines.h:45:0: note: this is the location of the previous definition\n #define NOMINMAX 1\n ^\nUse #ifndef ... #endif ?\n. Destructors are noexcept at default in C++11 .\n- Petr Budnik. Destructors and noexcept. StackOverflow.\n- Andrzej's C++ blog. Using noexcept. June 10, 2011.\n\n\"Very occasionally there may be a need to annotate your function with noexcept(false). For normal functions noexcept(false) specification is implied, but it is not the case for destructors. In C++11 destructors, unless you explicitly specify otherwise, have noexcept(true) specification. There exists a wide consensus in C++ community that destructors shouldn\u2019t throw, however there might exist situations where you still need to be able to throw from destructors. In this case you will need to either annotate your destructor with noexcept(false) or derive your class from another class that already declares a throwing destructor.\"\n\nI think these are the relevant sections of the std:\nN3690\n12.4 Destructors [class.dtor]\nA declaration of a destructor that does not have an exception-specification is implicitly considered to have\nthe same exception-specification as an implicit declaration (15.4).\n15.4 Exception specifications [except.spec]\n14 An inheriting constructor (12.9) and an implicitly declared special member function (Clause 12) have an\nexception-specification. If f is an inheriting constructor or an implicitly declared default constructor, copy\nconstructor, move constructor, destructor, copy assignment operator, or move assignment operator, its implicit\nexception-specification specifies the type-id T if and only if T is allowed by the exception-specification\nof a function directly invoked by f\u2019s implicit definition; f allows all exceptions if any function it directly\ninvokes allows all exceptions, and f has the exception-specification noexcept(true) if every function it directly\ninvokes allows no exceptions. [ Note: It follows that f has the exception-specification noexcept(true)\nif it invokes no other functions. \u2014end note ] [ Note: An instantiation of an inheriting constructor template\nhas an implied exception-specification as if it were a non-template inheriting constructor.\u2014end note ]\n. \\@martinmoene - that's a reasonable rule of thumb, but it's a little more complex than that.\n@PureAbstract - that's what 15.4 Exception specifications, note 4 is trying too say as I understand it; The short answer was merely to bring to the front that a destructor may be noexcept even if you don't see such a specification.\n. @PureAbstract ...Argh I meant para 14 not 4. Thanks.\n. DOS\u2013Unix end-of-line mismatch in e.g. Readme.md?\n. > I just happened to be using a Unix-based OS (Mac OS-X)\nCatch-VC6 includes .gitattributes with \u2014among other things\u2014 * text=auto to Auto detect text files and perform LF normalization.\n. > @martinmoene that's sensible. If the project has requirements, then either document them, or better still, automate it. But don't bitch at people who are new to the project and haven't read the minds of people in the know.\n@cdmh Perhaps the most important character in my remark got lost in the quotation: ?.\nIt signifies my uncertainty of the remark. My git(hub) knowledge is basic and my remark is also short to not write statements that are superfluous for people in the know or that are just plain wrong. \nIf I'm wrong or if more explanation is required, follow-up remarks may indicate so and they did.\ncheers, \nMartin\n. > Separating with a space seems to do 'or'...\n\nThe (space separated) fourth case does however...\n\nPlease note the following:\n1. [1][2]: is a single AND test-spec, no tests ran\n2. \"[1][:space:][2]\": is a single AND test-spec, no tests ran\n3. [1],[2]: is a single OR test-spec, only test [1] ran (!)\n4. [1][:space:][2] : are two separate test-specs, two tests ran\nOf these examples, (only) item 3. behaves erroneously.\n. The single include most recent update was Sep 21, 2013. \nRegenerating the single include solves the discrepancy:\nprompt>cd Catch && scripts\\generateSingleHeader.py nobump\nprompt>cd Test && g++ -Wall -Wextra -std=c++11 -ICatch/single_include -o catch_tags.exe catch_tags.cpp && catch_tags.exe [1],[2]\nAll tests passed (2 assertions in 2 test cases)\nI was aware of this (for Catch-VC6 I did regenerate) but that buys you little ;)\n. or should that be \"comma-separated sequence\" ;-))\n. Ah yes, there's a world outside GitHub ;)\n\nThe best workaround I've thought of so far (not tested) is to name my explicit anchors the same as GitHub's \ngenerated names so even though GitHub will strip mine out the ones it generates should still work...\n\n... Your test with #reporting-timings seems to work inside GitHub.\n. Sorry Phil, I should have used a tool right away.\ngrep ^<a *.md in ./doc (on Windows in case you wonder) revealed one other case in tutorial.md: <a id=\"testCasesAndSections\"></a>\nThis id should become test-cases-and-sections.\n. gnzlbg's comment on reddit.\n. Simplified, looks like the following to me:\n``` C++\nclass TestRunStats;\nstruct Reporter\n{\n    virtual void testRunEnded( TestRunStats & ) = 0;\n};\nstruct CumulativeReporterBase : Reporter\n{\n    virtual void testRunEnded( TestRunStats & ) { /.../ testRunEnded(); }\n    virtual void testRunEnded() = 0;\n};\nstruct JunitReporter : CumulativeReporterBase\n{\n    virtual void testRunEnded();\n};\nint main()\n{\n    JunitReporter r;\n}\n// g++ -Wall -Wextra -Weffc++ -c virtual-hide.cpp\n```\nGNU C++ 4.8.1 issues no warning; what does nvcc do?\n. I'd say, nvcc is trying to be too helpful here.\nSee C++ overloaded virtual function warning by clang? on Stackoverflow.\n. Update:\n- Changed help text to '... IDEs'.\n- Changed report to use 'with N messages', \nhttps://github.com/martinmoene/Catch-compact-reporter/commit/f7d9396885807b5f26f53f4637b3147a39c4abf8\n\n. Indeed the compact reporter is not (yet) part of Catch.\nI can't answer the second question though ;-)\n. v1.0-b42: Yay! (Windows 8.1 / g++ (GCC) 4.8.1)\n. Closing this issue as the compact reporter has been integrated in v1.0-b42.\n. Make the Catch-all user-definable ?\n. So, the remaining issue is to move this information to the documentation ?\n(I only checked superficially.)\n. See e.g. Guideline 10 in POSIX.1-2008 Section 12.2 Utility Syntax Guidelines.\n. It's also not uncommon to use '-' (dash) to designate standard input. This could be used with option -f, --input-file  to load test names to run from a file or stdin. However, this remark doesn't really belong here ;-)\n. See also Porting Python 2 Code to Python 3, Try to Support Python 2.6 and Newer Only:\nfrom __future__ import print_function\nThis is a personal choice. 2to3 handles the translation from the print statement to the print function rather well so this is an optional step. This future statement does help, though, with getting used to typing print('Hello, World') instead of print 'Hello, World'.\n. For a bare expression decomposition as used in Catch, see lest \u2013 lest errors escape testing, lest_decompose.hpp :-)\n. YYoouurr wweellccoommee\nMartin & Johannes ;)\nP.S. needed an alter ego account for Catch next to Catch-VC6 to be able to create  a pull-request.\n. Good point! \nMade my VC6 port description:\nCATCH - Modern style header-only C++ unit test framework - VC6 port\n. Followed suite;\nSeems, forks make no chance... with default search;\nDifferent cook with advanced search \"Unit Test C++ VC6 fork:only\", or \"Unit Test C++ VC6 fork:true\"   on github!\n. The INFO information is reported on failure (and with option --success), not on success (Catch streaming macros).\nprompt>g++ -ICatch/single_include -o info.exe info.cpp & info.exe -r compact\ninfo.cpp:18: failed: sizeof(some_struct) == 33 for: 32 == 33 with 1 message: 'The number is 42'\nFailed 1 test case, failed 1 assertion.\ncheers,\nMartin\n. Interesting reading in the meantime (and for reference):\n- Bruce Dawson. Doubles are not floats, so don\u2019t compare them.\n- Bruce Dawson. Comparing Floating Point Numbers, 2012 Edition.\n. Did you have a look at:\n   Integrating the Catch Test Framework into Visual Studio\n   Visual Studio\u2019s Test Explorer allows native C++ tests to be run under a managed wrapper. Malcolm Noyes takes it a step further using Catch to drive the tests. by Malcolm Noyes\n. Fixed URL (https://github.com/philsquared/Catch/commit/e35f862653142986150e8af8e981db8b095a9659).\n. - Wikipedia, Test Anything Protocol.\n- Test Anything Protocol website.\n. @Kosta-Github How w'd you suggest to format both fragments ? ;)\nImproved original message (hopefully).\n. @Kosta-Github, @philsquared : right :)\n. @philsquared Another good reason not to deform CATCH ;)\n. Bending code to bypass a bug leading to unwanted or less clear code...\n. mmm, \n- will not fix, and\n- useful information for some users of Catch\nWhen closing the issue, the information moves out of sight; what to do?\n. And now it's even used ;)\n. Well, I could have closed this earlier.\n. Apart from  Catch's development you may want to have a look at my lest test framework which is inspired on Catch. I've just picked-up development again. \nlest started as an exercise to see 1) how a simple C++11 test framework may look like and 2) how Catch's expression decomposition works.\nCurrently there are three lest C++11 variants and a C++03 version. \nThe intention is to be able to toggle larger features on and off, e.g. Catch option --duration via lest_FEATURE_TIME_DURATION (soon to be implemented).\nlest does have  less features than Catch naturally: specifically SECTIONs are not available.\n. REQUIRE_FAIL(...) ?\nSeems like a useful kind of addition. For 'negative testing', I'm using the following wordy workaround now in lest to do so:\n``` C++\nTEST( \"Expect succeeds for failure (false)\" )\n{\n    test fail[] = {{ TEST(\"F\") { EXPECT( false ); } }};\nstd::ostringstream os;\n\nEXPECT( 1 == run( fail, os ) );\n\n},\n```\n. Sorry for confusing things (*), it's something differerent indeed.\n(*) Not sure how to use your name Chenliang Xu.\nEdit 15-sep-2014: mmm, seem to have forgotten that REQUIRE_FALSE(...) is nothing new to CATCH.\n. To give (or get) moral support, I'm experiencing similarly unexpected behaviour from clang/libc++ (at Travis). See lest issue #10.\n. You did mention it: Floating point tolerance comparisons are built in using an expressive Approx() syntax.\n. > It would be nice to be able to compile with the same flags on our tests and regular projects, ...\nSeems reasonable to me. Can't comment on how well Catch could be made to support it, given it was designed to use exceptions.\n. I think tests are meant to be spread over .cpp files, not include files. The test cases are local to the .cpp files and fed to the test registrar. See INTERNAL_TEST_CASE().\n. That's what the code suggests, I don't see it documented. It doesn't mean yours wouldn't be a useful idea ;)\n. Indeed there is, see for example Why do my tests take so long to compile?.\n. You're welcome, thanks for letting know you got it working.\nIt may be helpful to show an example of multiple source file usage inluding compilation command  early on in the documentation. I know Phil is (also) working on improving the docs and maybe something like it is already in the pipeline.\n. Looks nice!\n( Have you seen How to report a user-defined type in the the dedicated Google Groups forum? )\n. But then this documentation would perhaps not exist :)\n. I expect that PRs should be done using branch develop.\n. @garethsb, Agree to await Phil's reaction first ;) \nCheers, Martin\n. > The trouble is I can't (AFAIK) suppress that warning locally to the source because you can't emit #pragmas within a #define - so I'd have to suppress the warning for all test code - which I don't like doing if I can help it.\nperhaps via _Pragma(...) ?\nhttp://stackoverflow.com/questions/3030099/pragma-in-define-macro\n. But do other compilers have the problem that calls for the pragma?\nIf not, could you  #define _Pragma( sink ) /*empty*/  before and  #undef _Pragma  after your macro ?\nHold on, scrap the second line, it has to be more sophisticated than that...\n```\nif CATCH_COMPILER_IS_CLANG\ndefine CATCH_EXPR_PRAGMA _Pragma( \"clang diagnostic ignored \\\"-Wparentheses\\\"\" )\nelse\ndefine CATCH_EXPR_PRAGMA\nendif\ndefine EXPR( expr ) \\\nCATCH_EXPR_PRAGMA \\\nexpr\n\nEXPR( 1 < 2 )\n// g++ -E -DCATCH_COMPILER_IS_CLANG main.cpp\n```\n. @philsquared perhaps: s/real world tests/real-world tests/ ?\n. Catch already has support for floating point comparisons. Why add this one?\ncheers,\nMartin\n. @paolobolzoni You mean you also get the output for the assertions?\n. In my test, using cl -EHsc main.cpp && main.exe -s. the output for the last section is:\n```\nprompt>cl -EHsc main.cpp && main.exe -s\n. . .\n\nScenario: vectors can be sized and resized\n     Given: A vector with some items\n      When: less capacity is reserved\n      Then: neither size nor capacity are changed\n\nmain.cpp(6)\n...............................................................................\nmain.cpp(42):\nPASSED:\n  REQUIRE( v.size() == 5 )\nwith expansion:\n  5 == 5\nmain.cpp(43):\nPASSED:\n  REQUIRE( v.capacity() >= 5 )\nwith expansion:\n  5 >= 5\n===============================================================================\nAll tests passed (16 assertions in 1 test case)\nprompt>\n```\n. (You can get assertions-only by using the compact reporter ;)\nprompt>main --reporter compact --success\nmain.cpp(11): passed: v.size() == 5 for: 5 == 5\nmain.cpp(12): passed: v.capacity() >= 5 for: 5 >= 5\nmain.cpp(18): passed: v.size() == 10 for: 10 == 10\nmain.cpp(19): passed: v.capacity() >= 10 for: 10 >= 10\nmain.cpp(11): passed: v.size() == 5 for: 5 == 5\nmain.cpp(12): passed: v.capacity() >= 5 for: 5 >= 5\nmain.cpp(26): passed: v.size() == 0 for: 0 == 0\nmain.cpp(27): passed: v.capacity() >= 5 for: 5 >= 5\nmain.cpp(11): passed: v.size() == 5 for: 5 == 5\nmain.cpp(12): passed: v.capacity() >= 5 for: 5 >= 5\nmain.cpp(34): passed: v.size() == 5 for: 5 == 5\nmain.cpp(35): passed: v.capacity() >= 10 for: 10 >= 10\nmain.cpp(11): passed: v.size() == 5 for: 5 == 5\nmain.cpp(12): passed: v.capacity() >= 5 for: 5 >= 5\nmain.cpp(42): passed: v.size() == 5 for: 5 == 5\nmain.cpp(43): passed: v.capacity() >= 5 for: 5 >= 5\nPassed 1 test case with 16 assertions.\n. > @martinmoene How does your tip back from 2015 (sorry for this issue necromancy) help in only getting the BDD scenario output without the assertions?\n@torbjoernk It doesn't help, hence the parenthetical remark.\n. CATCH \u2013 C++ Automated Test Cases in Headers.\nmmm, Hctac, Chtac , Thacc, none of them unique.\ncatch, arrest: encage => encase, oh not going well at all...\n. Nice tip. There is: catch-unit-test.\n. @philsquared Perhaps it'sa good idea to mention the StackOverflow catch-unit-test tag where also the dedicated Google Groups forum is mentioned, e.g. under More of the Readme, and maybe also in the Google group itself.\n. .... this code seems somewhat fishy ;)\n. (sorry wrong button)\n. > but what I liked about Catch on its own was that it always hinted at that without saying it outright - which is in keeping with the idea that a test framework certainly plays a role in catching bugs, but that's not it's only (or, for some, even main) purpose (e.g. use it to drive design etc).\nCatch could have been Coach (and have a similar problem).\n. Edited: As in: Catch relates to testing (finding errors), Coach relates to discovery of the design.\n[My hope is to trigger yet other ways of thinking]\n. Finding a new name is quite a challenge (no: Challenger test framework).\nHere I'd like to voice something else. I like to eat fish, but I would call no fish cuddly (if that's the right term). That is, for me (and maybe others) the connotation could be improved upon.\nEdit: But that would probably change when catfish is \u00a0a\u00a0 \u00a0the test framework ;)\n. Looking at it this way the current Catch could be or have been named Catch98.\n. @philsquared Just to have it asked: could a minimal string_span (string_view) be of help?\n\"In case you missed it: string_view also in C++17\", Herb Sutter, Trip report: Summer ISO C++ standards meeting (Oulu).\n. @philsquared Thanks for the explanation. (The word minimal meant to imply do-it-yourself w/o waiting for C++17;)\n. It's 8192 naturally ;)\nSingle include CATCH v1.1 build 1 (master branch), lines 7274, 7283:\n```\nstd::string toString( int value ) {\n    std::ostringstream oss;\n    if( value > 8192 )\n        oss << \"0x\" << std::hex << value;\n    else\n        oss << value;\n    return oss.str();\n}\nstd::string toString( unsigned long value ) {\n    std::ostringstream oss;\n    if( value > 8192 )\n        oss << \"0x\" << std::hex << value;\n    else\n        oss << value;\n    return oss.str();\n}\n```\n. As REQUIRE() is a macro, non-argument-separating commas have to be 'hidden'. You can do this by placing the part with the non-argument-separating commas inside parenthesis, e.g.:\nc++\nREQUIRE( ( std::is_constructible<Vertex, std::string, int>::value ) == true );\nYou'll give in on expressiveness of the error message, so make sure the message is clear by the name of the test, or as in your \"works\" fragment from the variable name (vertex_is_constructible?).\n. @philsquared mmm perhaps I was not thinking...  and now also to me it seems the error message would be just fine.\n. Note: Biicode version of Catch is created by Biicode user Florian Wolters (GitHub user @florianwolters).\n. Treat testA.cpp, testB.cpp as source files: compile them separately, not as part of test.cpp.\nChange Test.cpp to:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \n```\nCompile:\nprompt> g++ -Wall -o test test.cpp testA.cpp testB.cpp && ./test\n. Please provide code for a minimal use case that shows this error.\n. This issue is likely related to issue #59.\nWhy not (also) use a proposition such as class1 constructs properly for the name of the test case and thereby automatically use different names?\nSee what Kevlin Henney has to say about naming of tests:\n- Test names should reflect outcome not aspiration: doesn't make sense to see \"X should give Y\" as a result; on passing, result is \"X gives Y\"\n- What we talk about when we talk about unit testing (slide 41 onwards)\n. See also issue #209, pull request #210.\nEdit 26-Jul-2015: scrap the remark below as it's not a compile-time issue; the above links explain the decision made for the run-time behaviour as you experience.\nI expect another workaround is to put all test cases in one big outer (anonymous) namespace block in each .cpp file (can't try it at the moment though).\n. Notification: edited previous comment at 26-Jul-2015, 21:34 GMT\n. > I'd like also Catch to support catching only certain exception types.\nIt's called REQUIRE_THROWS_AS( expression, exception type )\n. @bdb the () around expr in __catchResult <= (expr) defeat the expression decomposition mechanism...\n. @bdb ah, I wasn't aware of its temporarilyness.\n. Assertion Macros, Exceptions:\nREQUIRE_THROWS( throw 1 );\nREQUIRE_THROWS_AS( throw std::runtime_error(\"blow\"), std::runtime_error );\n. In N4527 (2015-05-22): \n\n3.6.1 Main function [basic.start.main]:\n...\n(2.2) \u2014 a function of (int, pointer to pointer to char) returning int\n\nElsewhere the document mentions \u201cpointer to const pointer to const int\", so I think it's safe to conclude that pointer means non-const pointer and that using const in main's signature is wrong.\n. (Added precedence shortly after creation, 24-Jan-2014.)\nExpressions that involve other operators with a lower precedence than that of !, e.g.: REQUIRE( ! world < hello );\n```\ndefine CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file\ninclude \"catch.hpp\"\nTEST_CASE( \"! expr\", \"[show]\" )\n{\n    int a = 1;\n    std::string hello(\"hello\");\n    std::string world(\"world\");\nREQUIRE( ! true );  // Ok\n\nREQUIRE( ! --a );   // Ok\n\nREQUIRE(   hello < world ); // Ok\nREQUIRE( ! world < hello ); // No compile\n\n}\n// g++ -Wall -I../single_include -o not_expr.exe not_expr.cpp && not_expr.exe\n```\nGives:\n```\nIn file included from not_expr.cpp:2:0:\nnot_expr.cpp: In function 'void _CA_T_C_H__T_E_S_T_4()':\nnotexpr.cpp:15:14: error: no match for 'operator!' (operand type is 'std::cxx11::string {aka std::__cxx11::basic_string}')\n     REQUIRE( ! world < hello ); // No compile\n              ^\nnot_expr.cpp:15:14: note: candidate: operator!(bool) \nnot_expr.cpp:15:14: note:   no known conversion for argument 1 from 'std::__cxx11::string {aka std::__cxx11::basic_string}' to 'bool'\nnot_expr.cpp:15:14: error: no match for 'operator!' (operand type is 'std::__cxx11::string {aka std::__cxx11::basic_string}')\n     REQUIRE( ! world < hello ); // No compile\n              ^\nnot_expr.cpp:15:14: note: candidate: operator!(bool) \nnot_expr.cpp:15:14: note:   no known conversion for argument 1 from 'std::__cxx11::string {aka std::__cxx11::basic_string}' to 'bool'\nnot_expr.cpp:15:22: warning: logical not is only applied to the left hand side of comparison [-Wlogical-not-parentheses]\n REQUIRE( ! world < hello ); // No compile\n                  ^\n\n```\nSo, perhaps:\nthese forms exist as a workaround for the fact that ! prefixed expressions cannot be decomposed if they also involve other operators with a precedence lower than that of !.\nor\nthese forms exist as a workaround for the fact that ! prefixed expressions cannot be decomposed if they also involve binary operators.\n. Notice: edited previous comment.\n. Oops, you're right (QED).\nThe reason is that writing the expression in parenthesis, like REQUIRE( ! ( hello < world ) ) defeats expression decomposition.\n. Reworked example:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nTEST_CASE( \"! expr\", \"[show]\" )\n{\n    int a = 1;\n    std::string hello(\"hello\");\n    std::string world(\"world\");\nCHECK( ! true );  // Ok\n\nCHECK( ! --a );   // Ok\n\nCHECK(     hello < world );     // Ok\nCHECK( ! ( world < hello ) );   // No expression decomposition\n\n}\n// g++ -Wall -I../single_include -o not_expr.exe not_expr.cpp && not_expr.exe --reporter compact --success\n```\nResult\nprompt>not_expr.exe --reporter compact --success\nnot_expr.cpp:10: failed: ! true for: false\nnot_expr.cpp:12: passed: ! --a for: true\nnot_expr.cpp:14: passed: hello < world for: \"hello\" < \"world\"\nnot_expr.cpp:15: passed: ! ( world < hello ) for: true\nFailed 1 test case, failed 1 assertion.\n. Writing the expression in parenthesis defeats CATCH' expression decomposition.\n. > >   Writing the expression in parenthesis defeats CATCH' expression decomposition.\n\nWhat am I supposed to be reading on that page that makes this issue different?\n\nWell, that what's on that page doesn't work anymore as described:\nWithout parenthesis __catchResult <= expr:\nprompt>g++ -Wall -o main.exe main.cpp && main.exe --success --reporter=compact\nmain.cpp:9: passed: Factorial(1) == 1 for: 1 == 1\nmain.cpp:10: passed: Factorial(2) == 2 for: 2 == 2\nmain.cpp:11: passed: Factorial(3) == 6 for: 6 == 6\nmain.cpp:12: passed: Factorial(10) == 3628800 for: 3628800 (0x375f00) == 3628800 (0x375f00)\nPassed 1 test case with 4 assertions.\nWith parenthesis __catchResult <= (expr):\nprompt>g++ -Wall -o main.exe main.cpp && main.exe --success --reporter=compact\nmain.cpp:9: passed: Factorial(1) == 1 for: true\nmain.cpp:10: passed: Factorial(2) == 2 for: true\nmain.cpp:11: passed: Factorial(3) == 6 for: true\nmain.cpp:12: passed: Factorial(10) == 3628800 for: true\nPassed 1 test case with 4 assertions.\n. Usually the 'problem' you decribe is solved via parenthesis locally in the test:\nREQUIRE( (class1 == class1) );\n. __catchResult <= expr without the parenthesis is fundamental to CATCH' capability to present Factorial(3) == 6 as 6 == 6.\nTo get an impression of how the expression decomposition works, you may have a look at lest_decompose and follow the use of expression_decomposer.\nKevlin Henney presented the idea in Rethinking Unit Testing in C++ (Video).\n. (It's not always easy to assess how much information is required to clear-up things for someone.)\nIt's not the first time this confusion surfaces. Perhaps you can suggest such an improvement to the documentation via a PR?\ncheers,\nMartin\n. Or, see my gist CATCH - Small complete multi-file example.\n. I think it would be instructional to include simple compilation commands with examples, like\nCompile file with main once:\ng++ -c tests-main.cpp\nSubsequently use above object file:\ng++ -o tests-main tests-main.o tests-factorial.cpp && tests-main\n. The text nicely explains it. Adding a simple commandline (in some form) may make it easier to quickly see the point. . My suggestion comes from how we scan-read (web) pages to find the information we need. Just like titles, a command line stands off from the main text and draws our attention helping find what we need and determine if we need/want to read the nearby text any further.\nIn general, I think it's helping a reader to present examples with compilation command and output. Doing so obviates the need for the reader to guess what's not there (even if that may seem obvious for the writer) and it reassures the reader they are understanding the matter at hand.\n. @horenmar Now even better that I imagined \ud83d\ude04 \nPS I think the first line of the final command set can/should be removed.. See issue #421 - Document How to make Catch tests in a library be found.\n. Let's hope at most once per person ;)\n. Fraccidentally pressed [Close issue].\n. Perhaps start with an example given in the Catch documentation?\n. This parenthesis 'issue' comes up regularly, but not having parenthsis there is at the basis of CATCH's expression decomposition machinery, see e.g. my comment here.\n. Hi @philsquared,\nDid you intentionally avoid adding  topics, or was the issue unclear?\nCheers, Martin. Great!. Is this intent clearly documented?. Yes it is: Expects that an exception of the specified type is thrown during evaluation of the expression. Note that the exception type is used verbatim and you should include (const) reference... Thanks for the feedback.. @horenmar Would you be interested in reports on Catch 2, stripped from the 'less useful' warnings?. @horenmar Likely of interest are 238 of 239 ReSharper C++ mentions of non-inline function definition in a header file. Not expecting to find more than 1 main() in the collection of translation units that make up a test executable ;)\n[60/61 in Catch 2]\nEdit: Apparently this isn't a real problem, otherwise it would likely already have led to violation of the ODR. Perhaps it's ok because of the way Catch is structured, separating Catch implementation and Catch interface.. @horenmar Mismatched class tag in catch.hpp, 6 times.\ns/class/struct/ in\n````\nclass Evaluator{};\ntemplate\nstruct Evaluator \n````\n. @horenmar I'll rerun (some of) the analyses, reduce their output and republish them, hopefully tonight.. @horenmar I've updated the results for Resharper-C++ (now 108 lines).. >Catch is currently Valgrind and sanitizer clean, so the uninitialized variable warnings are not real bugs, but I would prefer them not to be there. However I am going to need some time to decide how to best tackle them.\nDo you run these locally, or via Travis (I couldn't spot them)?. If only I'd have experience  with it.... Thanks for the extensive report(s).\n\n???? V601 The result of '-' operator is implicitly cast to the bool type. Inspect the second argument. SelfTest catch_reporter_junit.cpp 109\n\nI gazed at this for some time; it seems to be produced by some deep thought, but in the end is double Dutch even to me, hence the ????.. @horenmar I've updated the results for PVS-Studio and Resharper-C++ (now 84 lines).. > virtual void foo() override\n+1\n. @horenmar, ref. comment above\nI was using the latest version, PVS Studio 6.16 and I've contacted viva64 with approximately the following message (save for cordiality):\n\nPVS Studio 6.16 unexpectedly reports V690, lack of copy constructor, on a move-only type. It appears to interpret the move-assignment operator as a copy-assignment operator.\nCould this be a bug or is it a limitation of the tool?\n```\nstruct move_only \n{\n    move_only();\n    move_only( move_only&& other );\n    move_only& operator=( move_only&& other );\n    ~move_only();\n\nbool f = false;\n\n};\n```\n\nV690 The 'move_only' class implements the '=' operator, but lacks a copy constructor.. viva64 recognises above as a false positive and they'll investigate it and try to fix it.. As long as one doesn't rewrite it as if ( CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\" ) and use CMake < 3.1. \n\nI do like the repetition though of if ( CMAKE_CXX_COMPILER_ID MATCHES \"pattern\" ) as it is now.\nIf you think if ( MSVC ) doesn't improve anything, I'm completely happy to have this PR go unused.\n. What surprised me, is that -Werror on its own breaks the compilation of SelfTest with gcc 5.2.0 due to \"NOMINMAX\" redefined.\nIn file included from .../Catch/include/internal/catch_debugger.cpp:115:0:\n.../Catch/include/internal/catch_windows_h_proxy.h:12:0: error: \"NOMINMAX\" redefined [-Werror]\n #  define NOMINMAX\n ^\nIn file included from c:\\mingw\\include\\c++\\5.2.0\\x86_64-w64-mingw32\\bits\\c++config.h:482:0,\n                 from c:\\mingw\\include\\c++\\5.2.0\\string:38,\n                 from .../Catch/include/internal/catch_debugger.h:14,\n                 from .../Catch/include/internal/catch_debugger.cpp:10:\nc:\\mingw\\include\\c++\\5.2.0\\x86_64-w64-mingw32\\bits\\os_defines.h:45:0: note: this is the location of the previous definition\n #define NOMINMAX 1\n ^\ncc1plus.exe: all warnings being treated as errors\nmake.exe[2]: *** [CMakeFiles/SelfTest.dir/include/internal/catch_debugger.cpp.obj] Error 1\nmake.exe[1]: *** [CMakeFiles/SelfTest.dir/all] Error 2\nmake.exe: *** [all] Error 2\nCatch\\include\\internal\\catch_platform.h contains:\n```\nelif defined(WIN32) || defined(WIN32) || defined(_WIN32) || defined(_MSC_VER)\ndefine CATCH_PLATFORM_WINDOWS\nif !defined(NOMINMAX) && !defined(CATCH_CONFIG_NO_NOMINMAX)\ndefine CATCH_DEFINES_NOMINMAX\nendif\nif !defined(WIN32_LEAN_AND_MEAN) && !defined(CATCH_CONFIG_NO_WIN32_LEAN_AND_MEAN)\ndefine CATCH_DEFINES_WIN32_LEAN_AND_MEAN\nendif\nendif\n``\nApparentlyCATCH_DEFINES_NOMINMAX` gets defined. I was not able to unravel the sequence of events that makes this happen.. Thanks @horenmar . One writer suffers, many readers (may) benefit, as opposed to vv,  or at least so goes the thinking.\nI think a TOC can be quite helpful to readers to scan if a page might contain the information they are looking for, or to easily see which section to head to.\nAlthough it would be preferable for such TOC to come free, I resist the thinking that it must be.. Supporting information.\nNumber of sections:\n$ grep --count  \"^## \" docs/*.md\ndocs/assertions.md:4\ndocs/build-systems.md:4\ndocs/command-line.md:22\ndocs/commercial-users.md:0\ndocs/configuration.md:2\ndocs/contributing.md:3\ndocs/event-listeners.md:2\ndocs/limitations.md:3\ndocs/logging.md:3\ndocs/matchers.md:3\ndocs/opensource-users.md:2\ndocs/own-main.md:3\ndocs/Readme.md:0\ndocs/release-notes.md:7\ndocs/release-process.md:2\ndocs/reporters.md:2\ndocs/slow-compiles.md:4\ndocs/test-cases-and-sections.md:3\ndocs/test-fixtures.md:0\ndocs/tostring.md:3\ndocs/tutorial.md:7\ndocs/why-catch.md:3\nReverse sorted on number of sections:\n$ grep --count  \"^## \" docs/*.md |sort --field-separator=: --key=2 --reverse --numeric-sort\ndocs/command-line.md:22\ndocs/tutorial.md:7\ndocs/release-notes.md:7\ndocs/slow-compiles.md:4\ndocs/build-systems.md:4\ndocs/assertions.md:4\ndocs/why-catch.md:3\ndocs/tostring.md:3\ndocs/test-cases-and-sections.md:3\ndocs/own-main.md:3\ndocs/matchers.md:3\ndocs/logging.md:3\ndocs/limitations.md:3\ndocs/contributing.md:3\ndocs/reporters.md:2\ndocs/release-process.md:2\ndocs/opensource-users.md:2\ndocs/event-listeners.md:2\ndocs/configuration.md:2\ndocs/test-fixtures.md:0\ndocs/Readme.md:0\ndocs/commercial-users.md:0\n\nAside:  in contrast with the majority of other document pages, docs/build-systems.md , docs/configuration.md and docs/release-notes.md have more than one toplevel page (chapter) title.\nNumber of 'page' titles:\n$ grep --count \"^# \" docs/*.md\ndocs/assertions.md:1\ndocs/build-systems.md:7\ndocs/command-line.md:1\ndocs/commercial-users.md:1\ndocs/configuration.md:9\ndocs/contributing.md:1\ndocs/event-listeners.md:1\ndocs/limitations.md:1\ndocs/logging.md:1\ndocs/matchers.md:1\ndocs/opensource-users.md:1\ndocs/own-main.md:1\ndocs/Readme.md:1\ndocs/release-notes.md:14\ndocs/release-process.md:1\ndocs/reporters.md:1\ndocs/slow-compiles.md:1\ndocs/test-cases-and-sections.md:1\ndocs/test-fixtures.md:1\ndocs/tostring.md:1\ndocs/tutorial.md:1\ndocs/why-catch.md:1\nedit: Note: in build-systems.md, 4 of 7 are from code samples.\n. Any desire to consitensify?. ? Shall I give a shot at\n- TOCs for pages with # sections >= 4\n- Page (chapter) title at level 1, sections at level 2\n. For the Tutorial I went for a single-level ToC. The change from having no ToC to having one will for always remain the biggest step ;). Plan (executed~~in progress~~):\n\n[x] Withdraw PR #1002, Add table of contents to Tutorial\n[x] Fix heading levels in docs/release-notes.md to match format as described above\n[x] Fix heading levels in other files\n[x] Create Python script based on this batch script to create table of contents, that special-cases release-notes.md for heading levels to use for table of contents:\nrelease-notes.md: use headings level 1 \nother files: use headings level 2\n[x] Add table of contents to docs/*.md, using above Python script\n[x] Revert files with less than 4 entries in table of contents\n[x] Edit changed docs/*.md to put page title and top anchor back on top (manually for now)\n[x] Commit files\n[x] Push branch\n[x] Create pull request (PR #1007)\n\nPreview updated documents here.\n\nAbove Python script uses a modified version of markdown-toclify by Sebastian Raschk (@rasbt).\nModifications in markdown-toclify:\n- \"Table of Contents\" modified to \"Contents\" .\n- List entries as normal lines in stead of as list.\nWarning: function tag_and_collect() has no processing specific for code blocks.\nChanges in the script are marked with # @CATCH. Will do; is that including the script catch-toclify.py that drives markdown-toclify.py or excluding? . Argh, only saw your remark after I created PR #1008 .. PerhapsExpand this PR to arrive at a single script addDocumentToC.py or better updateDocumentToC.py.\nPlan (Executedin progress):\n\n[x] in catch-toclify.py, use scriptCommon.py\n[x] move markdown-toclify.py into catch-toclify.py\n[x] remove markdown-toclify.py\n[x] rename catch-toclify.py to updateDocumentToC.py\n[x] change code naming style from abc_def to abcDef\n[x] at default, process docs/*.md\n[x] insert the table of contents below the top anchor and page title\n[x] update the table of contents (remove the old one)\n[x] only insert a table of contents when it will have at least N (default: 4) entries\n[x] may take the minimum number of table entries to insert/update, option --min-toc-entries (default: 4)\n. Hi @horenmar, I'd like to make several additional changes to updateDocumentToC.py. Shall I add them to the current PR #1008, or create a new one once the latter has been merged?\n\n\nAdditional changes for updateDocumentToC.py\nPlan (executedin progress):\n\n[x] Content of main -> function updateDocumentsTocMain()\n[x] Parameterize minTocEntries\n[x] Return number-of-changed-files (int) from updateDocumentToC()\n[x] Return is-changed (int) from updateSingleDocumentToC()\n[x] Return is-changed (boolean) from markdownToclify()\n[x] Skip file-replace dance if unchanged in updateSingleDocumentToC()\n[x] Use keyword (named) arguments in calls to update[ Single ]DocumentToC()\n. Will do.. Done.. Hi @horenmar, currently the table of contents is never removed, e.g. if min-toc-entries is increased from 3 to 4. Is it still possible to make some further changes to PR #1008 ?\n\nWhat should updateDocumentToC.py. report? Number of changed files (ToC added/removed/updated), number of files with ToC added/removed ... ?\nFurther changes:\n\n[x] Fix updateDocumentToC tot remove TOC if min-toc-entries requests so\n[x] Add option --remove-toc\n\n. Ok, thanks.. @horenmar ... a bit busy... hope to have something in about a week.... @horenmar updateDocumentToC.py now also removes a table of contents if needed. Also added option --remove-toc (equivalent to --min-toc-entries 99).. Perhaps there's useful info at stf - Simple TDD Framework. Catch/lest-inspired with an emphasis on floating point precision testing by Joel Falcou.\nLook in stf/include/stf/unit/.. Replaced by PR #1001.. Withdraw this PR  in favour of a new one as per issue #970, this comment.. Thanks @horenmar, I leave the actual merging to you.. @horenmar, finished expanding this PR.. In progress again.... ... and finished again.. In progress again.... Ho @horenmar , finally finished...\n. @horenmar Agree & done.. Done. Thanks for preventing this mistake!. What's the result if you start stdafx.h with NOMINMAX, or compile with -DNOMINMAX for that matter?\n```\n// stdafx.h\ndefine NOMINMAX\ninclude \"targetver.h\"\ninclude \ninclude \n```. On success its should be completely silent, so that it's immediately clear nothing is wrong, to offer another view ;). Indeed, with the difference that SelfTest may be geared (too much) towards implementers, complete and overwhelming where mere users may need another approach to support their understanding.\nKey:\n- relatively simple\n- complete program\n- that compiles and executes and shows what's necessary for that\n- perhaps shows the expected output\n- and is at the tip if reader's fingers from the documentation\nSee for example the examples linked from section Usage of lest.. > I can see some value in adding these\nis what I liked to know ;). Plan (in progress):\nOverall, part 1:\n- [x] Create branch examples\n- [x] Create folder examples\n- [x] Create several examples to get the gist, see below\n- [x] Add a page 'List of examples' (doc/list-of-examples.md)\n- [x] Link to examples from Tutorial\n- [x] Publish branch for review feedback\n- [x] Integrate with CMake\n- [x] Integrate with CI: Travis (linux/gcc7: no_selftest, build_examples)\n- [x] Integrate with CI: AppVeyor\nOverall, part 2 (in progress):\n- [ ] Link to examples from Reference\n- [ ] ...\nExamples, part 1:\n- [x] 000-CatchMain.cpp, Catch-provided main\n- [x] 010-TestCase.cpp, single file\n- [x] 020-TestCase,-*.cpp multiple files 1, 2\n- [x] 030-Asn-Require-Check.cpp\n- [x] 100-Fix-Section.cpp\n- [x] 110-Fix-ClassFixture.cpp\n- [x] 120-Bdd-ScenarioGivenWhenThen.cpp\n- [x] 210-Evt-EventListeners.cpp\nExamples, part 2 (in progress):\n- [x] 200-Rpt-CatchMain.cpp, Catch-provided main\n- [x] 207-Rpt-TeamCityReporter.cpp\nExamples, rest:\n- [ ] 040-Asn-RequireThat.cpp\n- [ ] 050-Asn-RequireNoThrow.cpp\n- [ ] 050-Asn-RequireThrows.cpp\n- [ ] 070-Asn-RequireThrowsAs.cpp\n- [ ] 080-Asn-RequireThrowsWith.cpp\n- [ ] 090-Asn-RequireThrowsMatches.cpp\n- [ ] 130-Fpt-Approx.cpp\n- [ ] 140-Log-Capture.cpp\n- [ ] 150-Log-Info.cpp\n- [ ] 160-Log-Warn.cpp\n- [ ] 170-Log-Fail-Check.cpp\n- [ ] 180-Log-Succeed.cpp\n- [ ] 190-Rpt-ReportUserDefinedType.cpp\n- [ ] 202-Rpt-UserDefinedReporter.cpp\n- [ ] 205-Rpt-AutomakeReporter.cpp \n- [ ] 206-Rpt-TapReporter.cpp \n- [ ] 208-Rpt-MultipleReporters.cpp\n- [ ] 220-Cfg-OwnMain.cpp\n- [ ] 230-Cfg-CompileTimeConfiguration.cpp\n- [ ] 240-Cfg-RunTimeConfiguration.cpp\n. FYI: Sections are described in the Tutorial, section Test cases and sections, \"not so much\" in the reference.. @horenmar It appears the effect follows from AssertionResult::getExpression() in internal/catch_assertionresult.cpp(58) and dates from 5 years ago.\ngetExpression() is used in:\n- catch_reporter_compact.hpp(202)\n- catch_reporter_tap.hpp(180)\n- catch_reporter_xml.cpp(124)\n? Would it be ok for all reporters to change\nreturn '!' + std::string(m_info.capturedExpression);\nin\nreturn \"!(\" + std::string(m_info.capturedExpression) + \")\";\nc.f. AssertionResult::getExpressionInMacro() at line 63.. Thanks Phil!. If it helps, here's an example for event listeners.. Yeah, I'll have a look at compiling as part of CI shortly; I'm not so sure about running though.\n. I think it's perfectly fine to have this one closed.\nI had started to look at integrating compilation of the examples with CI, but got stuck on how to approach that in face of what's already there (and got sidetracked by other things).\nFurther, (many) more examples must be created and locations found to link to them.\nA question is: should all examples be added at one time, or can it be done incrementally (once building them is integrated)?\n. @horenmar Thanks for the pointers.. Can't help the following comes to the fore:\n\nPresentation by Roger Orr and Steve Love, ACCU 2011. \nSome objects are more equal than others - a look at the many meanings of equality, value and identity\nSlides\nRichard Harris Apppendix Slides\nArticle by Roger Orr and Steve Love. \nSome objects are more equal than others: The many meanings of equality, value and identity.\n\n\n...the variation between \"=\" and \"==\" continues to catch people out! \n\n;). Indeed, that did surface in my mind after sending... I'll update the PR. PR updated.. Should we perhaps use NO_SELFTEST on the build with examples, as the selftest has already been created for that confiuration?. To promote the desired use of Catch with separate compilation of Catch itself and the tests in one or more other source files, I'm considering to apply that idiom to all tests with a common main (e.g. 000-CatchMain.cpp) except for  examples 010-TestCase.cpp (single file usage) and 020-TestCase,-[12].cpp (multiple files usage).\nWould that be a good idea?. >Looking through or travis config, we should do some cleanup there. CPP11 toggle is no longer relevant, as that is the base assumption.\nPerhaps not slip this in this subject's PR.. @horenmar File 210-Evt-EventListeners.cpp fails to compile without CATCH_CONFIG_MAIN:\n../examples/210-Evt-EventListeners.cpp:70:81: error: 'Catch::TestRunInfo' has not been declared\nSame holds for other listener-related types.\nDid I miss something?\n. It is in the docs (blush).. @horenmar \nUp to now I've got:\n- several examples that are linked to from the documentation\n- examples/CMakeLists.txt mentioned in ./CMakeLists.txt\n- integration with Travis\n- initial integration with AppVeyor\nI could use some help with the latter.\nI tried to compile examples only for a single configuration, but have not yet succeeded. Your suggestion does not work: include is not a valid word to use there.\n. @horenmar I've been able to limit building of examples to Win32 and x64, Release only. I've (silently) removed the exclusion phrase for VS2013.\nWhat's next: offer a squashed PR for examples, part1?\n. Squashed, ready to be merged.. Thanks!. Should it be possible to use the reporters with the single header file?\n```\n// Let Catch provide main():\ndefine CATCH_CONFIG_MAIN\ninclude \"single_include/catch.hpp\"\nifdef   CATCH_EXAMPLE_RPT_1\ninclude CATCH_EXAMPLE_RPT_1\nendif\n```\nDoing the following (pardon the funny %% of my Windows 'shell'):\nprompt>g++ -std=c++11 -Wall -I%CATCH_ROOT% -DCATCH_EXAMPLE_RPT_1=\\\"include/reporters/catch_reporter_teamcity.hpp\\\" -c 200-Rpt-CatchMain.cpp\nprompt>g++ -std=c++11 -Wall -I%CATCH_ROOT% -o 207-Rpt-TeamCityReporter 207-Rpt-TeamCityReporter.cpp 200-Rpt-CatchMain.o && 207-Rpt-TeamCityReporter --success\nYields errors in the first step:\n```\nIn file included from ../include/reporters/catch_reporter_teamcity.hpp:17:0,\n                 from 200-Rpt-CatchMain.cpp:12:\n../include/reporters/../internal/catch_enforce.h:16:0: warning: \"CATCH_PREPARE_EXCEPTION\" redefined\n #define CATCH_PREPARE_EXCEPTION( type, msg ) \\\nIn file included from 200-Rpt-CatchMain.cpp:9:0:\n../single_include/catch.hpp:1828:0: note: this is the location of the previous definition\n #define CATCH_PREPARE_EXCEPTION( type, msg ) \\\nIn file included from ../include/reporters/../internal/catch_enforce.h:10:0,\n                 from ../include/reporters/catch_reporter_teamcity.hpp:17,\n                 from 200-Rpt-CatchMain.cpp:12:\n../include/reporters/../internal/catch_common.h:27:12: error: redefinition of 'struct Catch::CaseSensitive'\n     struct CaseSensitive { enum Choice {\n. . .\n```. Thanks!. Once reporter examples appear, their compilation also provides some feedback.\nmmm, what is ToT?. It improved:\nprompt>g++ -std=c++11 -Wall -I%CATCH_ROOT% -DCATCH_EXAMPLE_RPT_1=\\\"include/reporters/catch_reporter_teamcity.hpp\\\" -c 200-Rpt-CatchMain.cpp\nIn file included from 200-Rpt-CatchMain.cpp:12:0:\n../include/reporters/catch_reporter_teamcity.hpp: In member function 'virtual bool Catch::TeamCityReporter::assertionEnded(const Catch::AssertionStats&)':\n../include/reporters/catch_reporter_teamcity.hpp:72:17: error: 'ReusableStringStream' was not declared in this scope\n                 ReusableStringStream msg;\n                 ^~~~~~~~~~~~~~~~~~~~\n../include/reporters/catch_reporter_teamcity.hpp:72:17: note: suggested alternative: 'MessageStream'\n                 ReusableStringStream msg;\n                 ^~~~~~~~~~~~~~~~~~~~\n                 MessageStream\n../include/reporters/catch_reporter_teamcity.hpp:74:41: error: 'msg' was not declared in this scope\n                     printSectionHeader( msg.get() );\n                                         ^~~\n../include/reporters/catch_reporter_teamcity.hpp:77:17: error: 'msg' was not declared in this scope\n                 msg << result.getSourceInfo() << \"\\n\";\n                 ^~~\n. Argh, that helps:\ng++ -std=c++11 -Wall -I$(CATCH_ROOT) -DCATCH_EXAMPLE_RPT_1=\"include/reporters/catch_reporter_teamcity.hpp\" -c 200-Rpt-CatchMain.cpp\ng++ -std=c++11 -Wall -I$(CATCH_ROOT) -o 207-Rpt-TeamCityReporter 207-Rpt-TeamCityReporter.cpp 200-Rpt-CatchMain.o && 207-Rpt-TeamCityReporter --list-reporters\nAvailable reporters:\n  compact:   Reports test results on a single line, suitable for IDEs\n  console:   Reports test results as plain lines of text\n  junit:     Reports test results in an XML format that looks like Ant's\n               junitreport target\n  teamcity:  Reports test results as TeamCity service messages\n  xml:       Reports test results as an XML document\nThanks!. Wouldn't that be more a tutorial about Visual Studio ?\nI'm currently adding examples that will be linked to from the documentation. The examples include instructions to compile them from the command line. See here (There aren't many links to examples yet, here's one).\nFolder with examples.\nI think it's fair to expect that users are able to go from there and adapt things to their own environment or at least it's unfair to expect that the authors cover everyone's configuration.\n. I started the examples I mentioned above as I was missing links from the documentation to complete examples that include the simplest of commands to compile them into an executable and the output one may expect.\nA contribution in a next step as you describe would be much appreciated, no doubt.\n. https://github.com/catchorg/Catch2/blob/master/examples/010-TestCase.cpp. Catch v1.12.0, Generated: 2018-01-11 21:56:34.893972 solves it, see Wandbox.. Note: where Catch uses\nwhile( Catch::isTrue( false && static_cast<bool>( !!(__VA_ARGS__) ) ) )\ndoctest uses \nwhile((void)0, 0). @horenmar a squint owl that still keeps a sharp look:\nwhile( (void)0, 0 && static_cast<bool>( !!(__VA_ARGS__) ) ). Did you really try while( (void)0,0 && ... (note the 0,0 ) ?\nI've not seen (undesired) warnings with vs2015/2017 -W4, or various gcc/clang -Wall.. 'interesting' ;). With the non-single include, define CATCH_CONFIG_EXTERNAL_INTERFACES, see docs.. >I'd prefer if this was expanded to include all of the reporter parts first.\nok, need to get my act together then ;). @horenmar I'm sorry for leaving this unaddressed.\nI'll have to refresh my memory of it... and try to come back on in a few days.. see if this works, then i'll squash.... @horenmar the request is in pullable form now, a pr-lite so to speak.. @horenmar I unwronged it.. For users of cmake-gui (and perhaps others) it may be convenient to group the Catch CMake options with a CATCH_ or CATCH_OPT_ prefix, like:\n\nCATCH_OPT_USE_VALGRIND \nCATCH_OPT_BUILD_EXAMPLES\nCATCH_OPT_ENABLE_COVERAGE\nCATCH_OPT_DISABLE_WERROR \n. Perhaps _MSVC_LANG can be of use?. Or : #include <namespace/filename>\n\nSee also Directories = namespaces? by Arne Mertz.. Perhaps of interest: \nPre-2017 MSVC, GCC and Clang implementation of uncaught_exceptions() in PR 126 of gsl lite.\nPR 126: Fix final_action_return and final_action_error during stack unwinding. In examples/CMakeLists.txt Catch is already compiled once for those examples that intentionally follow the idiomatic way to compile Catch's source once separately from the tests themselves. This idiomatic way is also intentionally not used for several simple examples.. @horenmar Indeed still too busy,however also still interested to bring this forward...\nPerhaps mark the missing entries with (ToDo) and keep the links.\nRelated to issue #1037 and PR #1145 (which expands the list). Perhaps you want to be able to also let STATIC_REQUIRE behave as the normal REQUIRE so that compilation may continue where it otherwise would be stopped by a static assertion failure.\nUsing somewhat like this here. As the fourth line of the error message says, option -std=c++0x ( -std=c++11) is missing.\nHere's the command line in the example code in folder examples. Please use the header from the single_include folder.\nFurther the lowest version of g++ in Travis is 4.8, so it's uncertain if Catch2 can be used with g++ v4.4.7.. Mmm, a Tab character!\n. Why not \"Why you should prefer #ifs over #ifdefs\" (somewhat past halfway)  :gem:\n. Good catch, I'd say it is wrong!. ",
    "m-mcgowan": "Totally awesome library - so novel and unique and usable! \nI just hit a little snag with the junit reporter causing UnitTH to crash - there was a missing name attribute in the testsuite element. The name comes from the testGroup which is set to empty in \ncpp\ncontext.testGroupStarting( \"\", 1, 1 ); // deprecated?\nIt would be great if we could group tests into some higher level grouping,e.g.\n``` cpp\nTEST_SUITE(\"Chugger\") {\n    TEST_CASE(...) {\n};\nTEST_CASE(...) {\n}\n\n}\n```\n(I realize this is outside the scope of this issue, which is the junit reporter, but having the TEST_SUITE defined will then provide a name for the <test-suite> elements in the junit report.)  In my case, I'd probably organize at least each cpp module as a test group, and for large modules, break these down into subgroups - loosely mimicking the package structure that junit had.\n. Yes, by me - sorry for the cross post, but the two are related. \nI'm finding tags a bit of a pain, and I often forget. For example, I just made unit tests for a PRNG, in random.cpp. Each test then has as a minimum one tag [random]. Would be great to simply wrap the whole lot in a big group. \n. While we are offering praise, just want to say I love this whole project! Such a fresh, easy on the eyes approach to writing tests!\n. Thanks for the information. Will the tags appear in the junit test report? (Ah, I see you covered that - missed it on first reading.)\nIf you're sure tags are the right way to go to gain structure to the test reports, then it would be great to have that feature resurrected. To my mind, tags are orthogonal to a more rigid hierarchical test-case organization, so having a GROUP() or SUITE() macro still seems more fitting, at least from my limited knowledge of this project.\n. Thanks, that makes sense - I don't have an internal model of how the system works so hard to know beforehand! \nI'm sure others would benefit - you might consider adding what you wrote to the docs.\n. Thanks for the extensive reply!\nThe compiler we are using is gcc 4.8.4 with the ARM backend, so C++11 is fully supported. (yay!)\nAttempting to use cin/cout results in linker errors - open, lseek, read, write, isatty, fstat, close which aren't present on the embedded platform. Some way to override cin/cout at compile time is needed so that none of the console functions are linked. As a hack, I would just use a macro to redefine cin/cout to point to local declarations so that the standard libraries don't pull in the stdio bits, but there may be a more elegant way to reach the goal!\nAt present, we use neither simulators or emulators. For our unit tests, the SUT code is made sufficiently hardware abstracted (hardware functions are external and injected/mocked where necessary) so the test suite can be compiled on regular gcc.  We have some integration tests that run on device, which are basically the previous unit tests rewritten to run on the device (hence, integrating the test with the hardware). I have to rewrite the tests to run on-device since it's using a different test framework.  Fortunately, we are just at the start of applying TDD to the firmware so I've not had to rewrite much code, just a few tests as PoC. But it's a big enough pain that I know I want to avoid it as the test suite grows! Having Catch on the embedded device would allow test code to be cross-compilable and run both on and off device. \n. Yes, the stream library is supported. The main issue is with the default binding of stdout. Although I can easily implement the missing functions (in fact, someone has already done that and pushed stdout over a serial port connection.)\nIf I solve that then the next problem would be code size, and providing a different entry point than main(), e.g. programmatic configuration (e.g. reporter selection, test name etc..)  With static configuration the linker should be able to remove unused reporters, and other features not explicitly called into play.\n. Thanks for adding conditional compilation of stdout! I'll take it for a spin this week and let you know!\n. Hi, I'm sure this helped a lot. However, when I tried this today, still got linker errors. There must be something pulling in a standard output function in libc. (A SSCCE where I just throw an exception is enough to trigger this, so the cpp runtime is doing something with exceptions that requires file access.) Fixing up the linker errors by defining _write, _lseek etc.. allows it to build, but the code is presently too large by some 100k to fit into memory. \nI will later be moving to larger hardware that has more memory, so this is a transient issue. In the meantime I will take a look at what large functions have been introduced to see what causes the program size to increase.\nThanks again for for the work you did and making the goal one step closer!\n. ",
    "Trass3r": "Is there anything left for this one?\n. VS2015 finally implements C++11 unicode literals.\n. @philsquared I'm not sure about some of his changes.\nHe changes a lot to include the catch implementation in every unit simply cause there is no main file. Why not put it into a dllmain file?\n. Regarding Visual Studio integration: https://github.com/philsquared/Catch/issues/413\n. Should be closed then.\n. Any news on this, @m-mcgowan?\n. @philsquared is there any feature ticket or something like that for value parameterization so one can keep track of the work on that?\n. Also ran into this :+1:\n. There's a good reason many warnings aren't even enabled on /W4.\n. Finally implemented in VS2015 :)\n. Ha interesting, my one is @ https://github.com/Trass3r/CppTestRunner\nBut Catch support is not public yet as I need to refactor it quite a bit.\n. That sounds sound.\n. You should also make some noise @ https://blogs.msdn.microsoft.com/vcblog/2017/11/02/unit-testing-test-adapter-for-boost-test-goes-in-box/. Yeah they've said multiple times they received a bunch of requests for Catch support already but no visible actions yet.. Woohoo! Then I can switch to C2.. webcompiler.cloudapp.net/\n. @kirbyfan64 It's back :)\n. I'd also go with range-concept checks.\n\ncompilers errors are more complex to understand\n\nclang and gcc error messages have become quite good, at least when enable_if is in the template parameter list and not in the return type which is generally preferable anyway.\n\nthe user might have defined a class with begin and end support. It does not mean it follows the container concept.\n\nSuch a corner case must not impede progress.\n. Nice :+1:\nTo me a C++11-only feature in #ifdefs would have also been fine. This is not a bug preventing Catch from working.\nIn general I'd vote for setting a C++11 minimum requirement. gcc will make 14 the default soon and in msvc you can't even disable it.\nThere could still be a C++03 maintenance branch if really necessary.\n. If you mean msvc here's their online compiler: http://webcompiler.cloudapp.net/\n. Looking forward to this! Especially now that Catch2 finally surfaces.. A generic container toString with enable_if begin/end-checks does not work?\nWould also remove the need to include all the headers.\ncpp\ntemplate <typename T>\nstd::string toString(const T& c )\n{\n    return Detail::rangeToString(c.begin(), c.end());\n}\n. I'd pull it out of the return type.\ncpp\ntemplate <typename C,\n          typename = typename Detail::enable_if<Detail::IsContainer<C>::value, void>::type>\nstd::string toStringInternal(const C& c)\n. Already forgotten about that. Haven't written C++03 in years :D\n. ",
    "alt-": "The fields with \"tbd\" really need to go or be fixed.\nJenkins' Junit plugin performs duplication checks on inputs by comparing the name, id and timestamp fields (https://github.com/jenkinsci/junit-plugin/blob/master/src/main/java/hudson/tasks/junit/TestResult.java#L240). \nIf the timestamp field would be missing, it would work correctly (strictEq), but the dummy value \"tbd\" matches the check and Jenkins throws away all other test results.\n. ",
    "Tryneus": "I think the issue may be that the REQUIRE macro ends up evaluating the expression twice.  One of the calls is failing, and one of the calls is successful.\nI made a simple test to check this, and I get the same behavior:\n```\ninclude \"catch_with_main.hpp\"\nTEST_CASE(\"catch/require\", \"Test if require evaluates expressions twice\")\n{\n  int i = 1;\n  REQUIRE(--i == 0);\n}\n```\n. Looked into this a little more, the two times the expression is evaluated appears to be (the first time) at the call to\ntemplate<typename T> ResultBuilder& ResultBuilder::operator->*(const T & operand)\nThe second time would be the call to\nvirtual ResultAction::Value Runner::acceptResult(bool Result)\nA fix for this isn't immediately obvious to me.  I would consider the 'acceptResult' call to be extraneous if it would be possible to evaluate the result solely in the ResultBuilder.  This would require a few changes to how the ResultBuilder parses expressions though, it would have to save the result data as well as the stringized version of each operand, then evaluate it once the expression is complete.\nI noticed that at the moment ResultBuilder doesn't parse past a binary operator such as && or ||, and I think the fix to both of these things could be combined together.\n. I am indeed working with multi-threaded stuff, but when I was using CppUnit on a previous project, I learned to leave test framework calls out of the children threads.  If there is a problem in the thread, it will throw an exception which is captured into a string that can be checked later in the main thread.\nI've been investigating a fix for the multiple evaluation behavior, I'll try uploading it on a fork if I get it working.  It's basically your alternative 1.  Also to correct what I said earlier, I now realize that due to operator precedence, it isn't really possible to parse past && or ||.\nI suppose it's too early to describe the changes I'm making because I'm not entirely sure if it will work, but I'll update this once I know.\n. ",
    "jalfd": "Yeah, I just ran into that too.\nthe following minimal test fails:\n    TEST_CASE(\"\", \"\")\n    {\n        int i = 0;\n        REQUIRE(i++ == 0);\n    }\nVery unintuitive, and I'm assuming it's a bug :)\n. Sorry to be a pain, but any progress on this one? ;)\nI'm basically having to rewrite a bunch of tests as\nbool res = foo();\nREQUIRE(res);\nwhich obviously means no useful information is printed if the test fails.\n. Just gave it a whirl. I run into one new compile error:\nREQUIRE(p != NULL); where p is a pointer type. It can't find an operator!= for pointer and int operands. If I cast NULL to void*, it everything works fine. (I assume, but haven't checked, that the same issue exists for operator==).\nand, just FYI, using a C++0x compiler, it also fails if I use nullptr instead of NULL. (with a different error though: it can't find an appropriate operator<<). I know you've never even claimed C++0x support, so I it's perfectly fair that it doesn't work. But I might as well let you know about it. :)\nApart from that, I don't see any problems. It compiles, and my tests pass perfectly.\nGreat job! I really appreciate the work you're putting into this.\n. Seems to work beautifully now (with both NULL and nullptr).\n. Seems to work fine. Although I did bump into a related issue. If I try to compare against the C++0x nullptr instead of NULL, I get a compiler error (operator << is ambiguous).\nOf course, you never made any claim of  supporting C++0x, but thought I'd pass it on. It's no big deal, of course, since everything works fine if I use NULL.\n. Oh, I didn't actually realize that was what INFO did. I assumed it just printed a string regardless of success/failure. I  guess you're just one step ahead of me. ;)\nI still see one difference though. INFO takes a string, it seems, so you have to build the output yourself, like INFO( \"i=\" << i ); in your blog post.\nWhy not use the output mechanism you already have, and make INFO(i) print out i == 42, (assuming i's value is 42), similar to the output you get from REQUIRE?\n. Perfect! I'm not really too fussed about the follow-on streaming. You can always fall back to the INFO macro if you want that extra control. As it is, it supports the most common use case.\nOf course, it doesn't work at the moment because of the other bug I posted regarding INFO. But other than that, it seems great. :)\n. Browsing the code a bit, the problem seems to be in catch_resultinfo.hpp:47.\nexpr is an empty string, so the expression m_op( m_expr[0] == '!' ? \"!\" : \"\" ) blows up.\n. expr isn't NULL, it's an empty string, as you expected.\nBut expr[0] is not valid on an empty string, and so in debug mode, MSVC's extra debug validation will trigger an assert when you try to index into the string. (In release mode, and, I assume, on other compilers, no such assert is in place, and so it happily exceeds the end of the (empty) string, and returns the null character at the end of the buffer. That's relying on undefined behavior though, and so in debug builds, MSVC detects it and triggers an assert.\nBut it seems that, rather than checking against NULL, you need to check against expr.empty()\n. I'm without a working compiler for a day or so, so I haven't been able to try it out with your fix yet. But you're right, it looks as if that should solve it. I'll give it a try tomorrow.\n. Finally got everything set up on my new laptop so I could try it. It works perfectly, of course. Nicely done. :)\n. About limiting your options, remember that the operator== can be defined outside the class, so even if you can't modify the class in question, you can always define a non-member const operator==. It's up to you to decide if it's reasonable to put this burden on the library user though. ;)\n(But it does seem like a very rare case, and if it saves you a lot of trouble, it may be worth it)\n. I agree that it's pretty easy to templatize individual tests.The problem is that it doesn't really scale. You effectively need to define two functions per test, instead of just one.\nFor larger groups of tests (in my case, I have three separate implementations of a particular component (all exposing the same interface, but with very different implementation strategies internally), and I'd like to write a suite of tests which can be applied to each of these implementations to verify that it has the expected semantics.\nImagine a test suite verifying that user-defined iterator classes, or perhaps container classes, behave as required by the standard/STL.\nYou've got a known, fixed API, and want to verify that some custom implementation follows the rules. That might be 20, 40, 100+ tests, all of which should be applied to the same couple of types.\nI first tried writing the tests in a similar way to your example, but the overhead just made me give up halfway (and request this feature from you instead ;))\nWhen I write unit tests, convenience really is king. If I have to write too much boilerplate code, I end up not writing tests at all.\nSo far, Catch has really been amazing in this respect. Being able to get rid of all my fixture classes from Boost.Test, and instead just put setup/teardown code inside a TEST_CASE with a bunch of SECTIONS inside it really makes things more convenient. But as it is now, I need to write a separate function, outside the test case, to handle the template case. And I need to manually maintain this coupling between two separate locations in the code (make sure that each function template is actually called from a corresponding TEST_CASE).\nAnd when you have a few dozen tests, all of which you'd like to apply to the same common of types, there's just too much boilerplate code. \nJust like Catch lets me write setup code in the test case, to be applied to every sections inside it, I'd like a solution which lets me define a single scope which specifies the set of types that should be applied to all tests defined inside it. \nRegarding typelists, I considered something like it in my original suggestion, but I'd actually prefer a simpler solution. Boost.Test uses MPL type lists, and sure, it works, and it's powerful and elegant, but it adds more complexity to my test code than I'm comfortable with.\n. It might help if you have tailor the feature for a specific use case (to avoid ending up with a \"kitchen sink\" solution). I'm with you in that \"normal\" ad-hoc/one-off template tests can easily be created as it is now, but for the specific case where you have a group of tests you'd like to all run on the same set of types (API conformance tests, perhaps), some Catch plumbing would be helpful. \nBut yeah, I'm not sure how it should be implemented or what the syntax should be.\nIn terms of boilerplate, I don't mind having to write a bit extra code, but losing locality really kills me. The moment I have to write code in two separate places (and make calls from one to the other), it becomes messy.\n. Yeah, that could work. Of course, it's kind of ugly and clumsy to have to specify the number of template types in the macro name itself, but if it significantly simplifies the implementation, that's worth a lot too.\n. Yeah, that sounds plausible\n. > Would the approach I mentioned at the start keep you going until then?\nYes, we can do that for now.\n\nwhat about when you mix negative and positive filters together? Not saying that it can't be specified in a reasonable way - just that it needs some thought.\n\nThe behavior I would intuitively expect would basically be that if the filter contains at least one positive pattern, then the hide flag is ignored (since the filter will only match if the positive pattern part of it also matches, and so we can bring the test out of hiding). In other words:\n\n[x]~[y]: include tests if they have [x] and do not have [y], regardless of whether they're hidden (because they're pulled in by the inclusion of the [x] tag)\n[x],~[y]: include tests if they have the [x] tag, regardless of whether they're hidden. Also include tests that do not have [y], but only if they are not hidden.\n\nThat could be implemented just by making exclusion patterns only ever match if the test case is not hidden, like so:\n```\ndiff --git a/include/internal/catch_test_spec.cpp b/include/internal/catch_test_spec.cpp\nindex d9c149d5..afa61693 100644\n--- a/include/internal/catch_test_spec.cpp\n+++ b/include/internal/catch_test_spec.cpp\n@@ -35,7 +35,9 @@ namespace Catch {\n     }\n TestSpec::ExcludedPattern::ExcludedPattern( PatternPtr const& underlyingPattern ) : m_underlyingPattern( underlyingPattern ) {}\n\n\nbool TestSpec::ExcludedPattern::matches( TestCaseInfo const& testCase ) const { return !m_underlyingPattern->matches( testCase ); }\nbool TestSpec::ExcludedPattern::matches( TestCaseInfo const& testCase ) const {\nreturn !(testCase.isHidden() || m_underlyingPattern->matches( testCase ));\n\n}\nbool TestSpec::Filter::matches( TestCaseInfo const& testCase ) const {\n     // All patterns in a filter must match for the filter to be a match\n```\n\n\nBut I agree that changing this outside of a major version upgrade would probably be a bad idea.. ",
    "colonelsammy": "That's an interesting one!  I hadn't thought of a non-const member function . . .\nI think I'm with you on this one - if you must have one, then the canonical form of a member op==() is 'const'.\nPerhaps you could capture the non-const case and issue a more sensible compile time error ?\n. Yes, my example that I gave to ACCU Oxford now runs in the correct order (but with the extra run with inner sections, as you pointed out).  Excellent, well done!\nHere's the example (a simple stack example):\n``` C++\ninclude \nTEST_CASE(\"sections/stack\", \"Test a stack in sections\")\n{\n    std::stack s;\n    s.push(0);\n    REQUIRE( s.size() == 1);\n    REQUIRE( s.top() == 0 );\n    SECTION( \"stack/push 1\", \"level 1\" )\n    {\n        s.push(1);\n        REQUIRE( s.size() == 2);\n        SECTION( \"stack/push 11\",\"level 2\" )\n        {\n            s.push(11);\n            REQUIRE( s.size() == 3);\n            REQUIRE( s.top() == 11 );\n            SECTION( \"stack/pop\",\"level 3\" )\n            {\n                s.pop();\n                REQUIRE( s.size() == 2);\n                REQUIRE( s.top() == 1 );\n            }\n            SECTION( \"pop again\",\"level 3\" )\n            {\n                s.pop();\n                REQUIRE( s.size() == 2);\n                REQUIRE( s.top() == 1 );\n            }\n        }\n        SECTION( \"stack/push 12\",\"level 2\" )\n        {\n            s.push(12);\n            REQUIRE( s.size() == 3);\n            REQUIRE( s.top() == 12 );\n        }\n    }\n    SECTION( \"stack/push 2\", \"level 1\" )\n    {\n        s.push(2);\n        REQUIRE( s.size() == 2);\n        REQUIRE( s.top() == 2 );\n    }\n}\n```\n. This also works on Mingw32 with your latest version....\n. Phil, I can confirm that this is fixed with the latest build (you moved OutputDebugString to another place....).\n. Although note that if you use a 'while' loop then you'll get loads of this on MS compiler:\nwarning C4127: conditional expression is constant\n. This patch works for me on msvc and mingw32 (based on code of 18th Feb):\ndiff --git a/include/internal/catch_capture.hpp b/include/internal/catch_capture.hpp\nindex d19f4c2..7bcb49f 100644\n--- a/include/internal/catch_capture.hpp\n+++ b/include/internal/catch_capture.hpp\n@@ -683,7 +683,11 @@ inline bool isTrue\n     }\n///////////////////////////////////////////////////////////////////////////////\n+#if defined(_MSC_VER)\n #define INTERNAL_CATCH_TEST( expr, isNot, stopOnFailure, macroName ) \\\n-    __pragma(warning( push )) \\\n-    __pragma(warning( disable : 4127 ) ) \\\n-    do { \\\n   try \\\n   { \\\n       INTERNAL_CATCH_ACCEPT_EXPR( ( Catch::ResultBuilder( FILE, LINE, macroName, #expr, isNot )->expr ), stopOnFailure ); \\\n  @@ -697,7 +701,28 @@ inline bool isTrue\n   { \\\n       INTERNAL_CATCH_ACCEPT_EXPR( ( Catch::ResultBuilder( FILE, LINE, macroName, #expr ) << Catch::Hub::getExceptionTranslatorRegistry().translateActiveException() ).setResultType( Catch::ResultWas::ThrewException ), false ); \\\n       throw; \\\n-    }\n-    } \\\n-    } while (0) \\\n-    __pragma(warning( pop ))\n  +#else\n  +#define INTERNAL_CATCH_TEST( expr, isNot, stopOnFailure, macroName ) \\\n-    do { \\\n-    try \\\n-    { \\\n-        INTERNAL_CATCH_ACCEPT_EXPR( ( Catch::ResultBuilder( FILE, LINE, macroName, #expr, isNot )->expr ), stopOnFailure ); \\\n-        if( Catch::isTrue( false ) ){ bool internal_catch_dummyResult = ( expr ); Catch::isTrue( internal_catch_dummyResult ); } \\\n-    } \\\n-    catch( Catch::TestFailureException& ) \\\n-    { \\\n-        throw; \\\n-    } \\\n-    catch( ... ) \\\n-    { \\\n-        INTERNAL_CATCH_ACCEPT_EXPR( ( Catch::ResultBuilder( FILE, LINE, macroName, #expr ) << Catch::Hub::getExceptionTranslatorRegistry().translateActiveException() ).setResultType( Catch::ResultWas::ThrewException ), false ); \\\n-        throw; \\\n-    } \\\n-    } while (0)\n  +#endif\n///////////////////////////////////////////////////////////////////////////////\n  #define INTERNAL_CATCH_IF( expr, isNot, stopOnFailure, macroName ) \\\n. Hi Phil,\nOn 29/02/2012 08:51, Phil Nash wrote:\n\nI thought I'd done this ages ago. Well I added it back in.\nI did it slightly differently, though. To avoid the msvc warning I use Catch::isTrue( false ), which seems to provide just the right levelofindirection(.com) to convert it to a runtime condition (I use it elsewhere for the same reason).\nThat said I've not had a chance to test it in msvc yet (other than on my CI server that tells me it builds ok - I should probably enable warnings as errors in that project).\nExcellent, thanks!  I'll give it a try...\n\nBTW, congrats on getting a keynote spot!  Looking forward to it ;-)\nregards,\nMalcolm\n. Ah, that makes sense now!  It was the inconsistency that I couldn't get my head round, but your > 8192 rule explains it.\nThe lhs is unsigned so prints as hex according to your rule.  The rhs is a literal, but of course is a signed literal - adding suffix 'u' fixes it...although now this looks a bit odd:\nbits == 0x00002001u failed for: 8192 == 0x2001\nPerhaps you could provide a way (local macro?) to adjust the threshold?\n. I've just tried this with build 25 of Catch on VS2013 and couldn't reproduce the problem that @veikkoeeva had.\nI did:\nNew project==>Win32 console application\nChange options for empty project\nCopy catch.hpp single include into project directory\nAdd new cpp file (main.cpp)\nPaste code from above\nUncomment #include \"catch.hpp\"\nChange Unicode to MBCS\nTurn off SDL checks\nRemove preprocessor definitions for WIN32 etc (so that I had exactly the command line above, i.e.:\n\"/GS /analyze- /W3 /Zc:wchar_t /ZI /Gm /Od /sdl- /Fd\"Debug\\vc120.pdb\" /fp:precise\n/D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /RTC1 /Gd /Oy- /MDd /Fa\"Debug\\\"\n/EHsc /nologo /Fo\"Debug\\\" /Fp\"Debug\\VS2013console.pch\" \"\nBuild.\nI had to do several other things after creating an empty project to get to the same command line. Although these don't seem to have made any difference, I wonder what else @veikkoeeva might have changed? Can you try build 25?\nAfter the above steps, this code builds (and runs) correctly for me...\n``` c++\ndefine CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file\ninclude \"catch.hpp\" //Removing the comment from before this line will lead to compilation errors.\ninclude \ninclude \nTEST_CASE(\"Sanity check\")\n{\n    REQUIRE(true);\n}\n```\nVS Version info:\nMicrosoft Visual Studio Professional 2013\nVersion 12.0.30110.00 Update 1\nMicrosoft .NET Framework\nVersion 4.5.50938\nInstalled Version: Professional\nLightSwitch for Visual Studio 2013   06177-004-0444002-02181\nMicrosoft LightSwitch for Visual Studio 2013\nMicrosoft Office Developer Tools for Visual Studio 2013 ENU   06177-004-0444002-02181\nMicrosoft Office Developer Tools for Visual Studio 2013 ENU\nTeam Explorer for Visual Studio 2013   06177-004-0444002-02181\nMicrosoft Team Explorer for Visual Studio 2013\nVisual Basic 2013   06177-004-0444002-02181\nMicrosoft Visual Basic 2013\nVisual C# 2013   06177-004-0444002-02181\nMicrosoft Visual C# 2013\nVisual C++ 2013   06177-004-0444002-02181\nMicrosoft Visual C++ 2013\nVisual F# 2013   06177-004-0444002-02181\nMicrosoft Visual F# 2013\nVisual Studio 2013 Code Analysis Spell Checker   06177-004-0444002-02181\nMicrosoft\u00ae Visual Studio\u00ae 2013 Code Analysis Spell Checker\nPortions of International CorrectSpell\u2122 spelling correction system \u00a9 1993 by Lernout & Hauspie Speech Products N.V. All rights reserved.\nThe American Heritage\u00ae Dictionary of the English Language, Third Edition Copyright \u00a9 1992 Houghton Mifflin Company. Electronic version licensed from Lernout & Hauspie Speech Products N.V. All rights reserved.\nASP.NET Web Frameworks and Tools 2012.2   4.1.21001.0\nFor additional information, visit http://go.microsoft.com/fwlink/?LinkID=309563\nASP.NET Web Frameworks and Tools 2013   5.0.11213.0\nFor additional information, visit http://www.asp.net/\nCommon Azure Tools   1.0\nProvides common services for use by Azure Mobile Services and Windows Azure Tools.\nMicrosoft Web Developer Tools 2013   2.0.40926.0\nMicrosoft Web Developer Tools contains the following components:\nSupport for creating and opening ASP.NET web projects\nBrowser Link: A communication channel between Visual Studio and browsers\nEditor extensions for HTML, CSS, and JavaScript\nPage Inspector: Inspection tool for ASP.NET web projects\nScaffolding: A framework for building and running code generators\nServer Explorer extensions for Windows Azure Web Sites\nWeb publishing: Extensions for publishing ASP.NET web projects to hosting providers, on-premises servers, or Windows Azure\nNuGet Package Manager   2.7.41101.371\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\nPreEmptive Analytics Visualizer   1.2\nMicrosoft Visual Studio extension to visualize aggregated summaries from the PreEmptive Analytics product.\nSQL Server Data Tools   12.0.30919.1\nMicrosoft SQL Server Data Tools\nWindows Azure Mobile Services Tools   1.0\nWindows Azure Mobile Services Tools\nWorkflow Manager Tools 1.0   1.0\nThis package contains the necessary Visual Studio integration components for Workflow Manager.\n. Cloned from Github just now....master branch.  Copy single include.  Compile (VS2010):\n```\nC:\\Projects\\newcatch\\test\\Debug>test.exe [1]\nAll tests passed (1 assertion in 1 test case)\nC:\\Projects\\newcatch\\test\\Debug>test.exe [2]\nAll tests passed (1 assertion in 1 test case)\nC:\\Projects\\newcatch\\test\\Debug>test.exe [1],[2]\nAll tests passed (1 assertion in 1 test case)\nC:\\Projects\\newcatch\\test\\Debug>test.exe [1] [2]\nAll tests passed (2 assertions in 2 test cases)\n```\nMaybe your changes were on a branch?\n. Thanks for testing that Martin...it's not a big deal for me so I can wait for a regeneration.\nPhil, while you're at it, you need to fix the spelling in the docs ..\"comma seperated sequence\" should be \"comma separated sequence\" ;-)\n. Fixed, thanks!\n. You can't have the quotes either - quotes can be easily added with the preprocessor but sadly, not removed :-(\n. It seems my branch was out of date...apologies for the noise :-(\n. Now includes Catch VS integration Part 2 - modify version, allow multiple includes.\nI've modified the way version works - also modified generateSingleHeader.py to use the new structure.\n. Final part of VS integration - added CatchTests for VS2010 Managed code, VS2012 Managed and Native code. Added documentation for how to use it.\nSinlge header not generated.\n. I think it is so old that your chances of merging are about zero...lots has changed in Catch since then! I havn't used it recently so I've not updated it...I'll leave my clone with the changes on my repo if anyone is interested.\nI think your new employer has a plug-in that runs Catch? Perhaps we should encourage folks to use that ;-). I think you have the same basic problem as #225.\nYou could try putting your TEST_CASEs in a different namespace in each .cpp file - I think that should fix the unique naming, e.g.:\nfile1.cpp\nc++\nnamespace file1 {\n  TEST_CASE(\"blah\")\n  {\n    //...\n  }\n}\nfile2.cpp\nc++\nnamespace file2 {\n  TEST_CASE(\"blah blah\")\n  {\n    //...\n  }\n}\n. I get a similar problem with my Visual Studio fork of Catch.  If you need to, you can workaround it (while you're waiting for Phil...) by removing the extern and making the instance of UnpositionalTag static const:\n```\ndiff --git a/single_include/catch.hpp b/single_include/catch.hpp\nindex 20b2502..d981218 100644\n--- a/single_include/catch.hpp\n+++ b/single_include/catch.hpp\n@@ -3200,11 +3200,7 @@ namespace Clara {\n struct UnpositionalTag {};\n\n-    extern UnpositionalTag _;\n-#ifdef CLARA_CONFIG_MAIN\n-    UnpositionalTag ;\n-#endif\n+    static const UnpositionalTag ;\n namespace Detail {\n\n```\n. ",
    "lilith": "Generators are pretty useful. Any plans for this?\n. This flag would be extremely useful, as without it Catch and CLion do not get along well at all...\n. ",
    "byzhang": "Hi @philsquared , \nWhat's the status of this issue? I'm using Catch 1.0 Build 33, and meet an exception w/o file/line telling me where is the exception thrown:\nFAILED:\ndue to unexpected exception with message:\n  Invalid row access index\n. ",
    "samaursa": "For those interested (including the author) here is the modified catch_approx.hpp file, which you can use (which has two convenient typedefs for float and double). As I explained above, I have limited knowledge of the framework, so that may not be the best way to go and may not even be right! Use at your own risk :)\nhttp://dl.dropbox.com/u/3939781/catch_approx.hpp\n. Your welcome. Thanks for your framework as well.\n. My mistake, the Approx strictness was higher than I expected. \n. Sorry, I should have acknowledged your commit. It works very well, thanks.\n. Excellent, thanks for the quick reply!\n. I hope I am not intruding. Unless I have misunderstood, you want to run the same test but on different template types? I ran into a similar issue and the simple solution was to make a template function that has all the test and have the test case call it with different types. I believe that is what Phil put down above but the syntax confused me.\nI am with Phil on this one and I would like to see CATCH to be light without any dependencies on external libraries (one of my main reasons for not using any other library). I think what I just said was discussed above but I thought I would put another vote in :)\nThe TEMPLATE_TEST_CASE_# looks interesting. As long as the debugger is OK with it, I personally have no complaints, although I still prefer the explicit template function solution. No need to make CATCH one size fits all.\n. That is correct, I would like to be able to specify dependencies. I can put them in different executables. The problem is that it requires a lot of maintainance which will increase with the number of executables I have. For example, if another pre-processor is added for the framework, or more includes etc. all the test projects will have to be updated. Add to that the multitude of different configurations (debug, release, debug_dll, release_dll, release_withdebug etc.) it becomes a maintanance nightmare (ideally, Visual Studio should be helping me with this, but sadly that is not the case). \nSo in short, it would be great if I can 'group' all the TEST_CASEs and then specify their dependency (or if I don't specify one, they can be run in any order). Also, is CATCH able to run the tests in parallel? If not, this can be a way of preparing for that as well. For example, I as a user, can guarantee that two tests not dependent on each other can run independently and thus in parallel. This is just a thought, it is obviously more complicated and may have more issues.\n. > I think this gets into the territory of the trade-off between adding too much fine-grained functionality to Catch, vs convenience in edges cases.\nCurrently, I am doing something like this to make sure I get only one pass/fail count:\nbool hasFailed = false;\nfor (int i = 0; i < 100; ++i)\n{\n  if (someCheck() == false) { hasFailed = true; break; }\n}\nCHECK(hasFailed == false);\nso if that could be turned into:\nfor (int i = 0; i < 100; ++i)\n{\n  CHECK_LOOP(someCheck() == true);\n}\n// where now if CHECK_LOOP fails, it records a FAIL and breaks. If all 100 iterations pass, it records only 1 CHECK (that is, as if I ran only one test) rather than 100\nI agree that it is a trade-off and the slight inconvenience is not a big deal. I myself am against bloating up a library.\nCHECKED_IF and CHECKED_ELSE sound great. I have use for them already. \n. Could you explain a bit more on what you mean by \"pure unit tests\". Are you talking about TEST_METHOD()?\n\"if you notice the passing of time they're taking too long!\"\nWe let our build machine do the majority of the testing in which case we can't really observe that a test is taking too long and would like to know how long some tests are taking automatically. Even on individual basis, we run a script in the background to test all configurations while we move ahead with our code. One of the reasons I wanted to know how long it takes. \nMy idea is that you'd mark a test case as something you'd want to time\nIf it is implemented, how would l be marking the test? My preference would be to avoid recompilation. \nWhen running it Catch would start a timer then keep running it in exponentially increasing loops until we get to, say, the 100ms range (perhaps configurable) - that should be accurate enough for most system clock apis.\nSorry, I did not understand that fully. What do you mean by exponentially increasing loops?\n. (Sorry for the delayed reply)\nI think I see what you mean now. You are running the test several times and taking an average. That is more along the lines of benchmarking a particular test (which is also a good feature). I'll explain what I was looking for in the last paragraph.\nIf the tests are running fast enough why wouldn't you run them locally?\nThe tests currently run fast enough, but only for one configuration. We have in total 12 configurations that need to be compiled and run. On our machines we only compile debug and release without full optimizations (for faster compiles) and test that. The rest are compiled and tested on the build machine.\nI also foresee the tests taking longer and longer as our engine increases in size. Now, down the road, if they start taking too long, I would like to know the tests that take the longest (in this case, I mean TEST_METHOD and the unit tests in it) so that we can take measures to reduce build/test times (this is similar to a program that tells you folder/file sizes so that you can improve your disk usage).\nI hope I am making sense!\nBest Regards\n. \"(Sorry for the delayed reply)\" - no problem. I wasn't timing it ;-)\nlol\n\"As for your configurations, 12 sounds like a lot! Would they all have different performance characteristics, or do they still broadly divide into debug/ release.\"\nWe have the standard debug/release (where release has full optimizations and takes the longest to compile - currently it is over 2 min. which is why we let the build machine take care of it) as well has counterparts that use a different memory allocator. That is a total of 4, and we then have 2 more release configurations that are not fully optimized and include debug information. We then have x64 configuration of all of the configurations mentioned which take it to 12. Down the road (depending on our resources of course) we may be supporting configurations that compile a dynamic library instead of static which will take the number even higher! \nYes, our debug tests are slower than release, not sure by how much so far (just by looking at it, I would guess release is twice as fast). \n. \"./\" is a good start, thanks for pointing that out.\nThe wildcard works for trailing symbols only, for example:\nIf I have tests named: \"Core/Utilities/TestA\" \"Core/Utilities/TestB\" \"Core/Utilities/TestC\"\nand I type the argument as: -t \"Core/Utilities*\", this works nicely\nbut if I type the argument as: -t \"Utilities\", this fails to run any tests\n. It removed all warnings for me but now I am getting linking errors related to various Catch methods (getCurrentContext() and getRegistryHub() among others) which is surprising as I assumed all headers were being included (and were indeed included in the previous release that I upgraded from).\n. @philsquared I am using the normal catch headers and not the single include. I did put that #define but I still get a huge amount of linking errors. This time however the linking errors (with the #define that you mentioned) complain about symbols being already defined. \nJust to give you an overview of how I have setup my tests. I have a main.cpp file which includes catch and catch_with_main. I then have a bunch of cpp files which have tests for individual classes. They include a testCommon header which includes catch.hpp (again, not the single_header include) among other headers related to our project.\n. That unfortunately did not work either. I get multiple definitions as soon as another CPP file (other than main) includes the testCommon.h file, which has:\ndefine CATCH_CONFIG_MAIN\ninclude <catch.hpp>\n. That did indeed resolve the multiple definitions problem. It slipped my mind that the header guards (that I had in testCommon.h) will only work for a single translation unit. \nThanks for the patience in resolving the issue @philsquared and @godlygeek.\nLastly, the upgrade is going great so far. CATCH caught quite a few test cases that were named the same which it ignored before. Noticed the colored output immediately which is great! \nThanks again Phil for making a great testing framework.\n. Thanks for the examples. That clears up the usage nicely!\nUsing -s is problematic as now all our tests are showing regardless of failure. Although I am curious as to why INFO shows up without -s but SCOPED_INFO does not.\n. Ah, that would explain the discrepancy. I am on revision 1840929.\nNow the question is, is there a macro to display information only when the test has failed without -s? That would be highly useful. Although SCOPED_INFO comes close (provided it is displayed without -s as well only with the tests that failed), a macro that is reset with every new 'CHECK' or 'REQUIRE' would be highly useful in keeping clean logs.\n. Thank you both for the help. I'll update to the latest revision and report any issue I encounter.\nI was not aware of the Google group link. Will use that next time for these type of questions :)\n. I would like to concur that XCode generates a huge amount of warnings for CATCH (Visual C++ emits 0 warnings). We are currently using an older version of CATCH (1840929) but I have tried with the absolute latest version yesterday and the same warnings were generated (hoped that the upgrade would remove warnings). We are using XCode 5.02 as well as XCode 4.6.3 and both emit lots of warnings.\nYou can see the warnings (some of them) in the screenshot below:\n\n. This is a clang warning. Analyser was not run. \n. I am not using Pedantic warnings. Is there any other particular flag you are looking for?\n. I apologize for my lack of knowledge when it comes to Xcode. How do I change Xcode's compile verbosity? And where will it appear?\n. The reason I wrote include/catch is to stay consistent with all the other libraries out there. Currently, I am depending on bgfx, eigen, glfw and spdlog and all of them are using this scheme. It also keeps the includes unambiguous.\nI agree with only including one style (include or single include).. That's how it should be. \n```\ninclude \ninclude \n```\nIf a user doesn't like that, they have the choice of adding the catch folder in their include directories. The opposite is more difficult.. It gives me a chance, as a user,  to resolve ambiguities. This is like putting your functions/classes in a namespace. If I have a header catch.hpp (which is entirely possible, catch is not a unique name) then there is an ambiguity that I simply cannot resolve without moving around files.\nOn the other hand, if I have #include <catch/catch.hpp> but say you don't like the extra folder, you can easily ask CMake to include_directories the catch dir as well. The opposite is not so easy.\nCan we work around it? Yes, of course :) C++ libraries are notorious for being inconsistent, at least we have CMake now!\nHaving said that, I agree - decision is with @philsquared .. ",
    "doctorlove": "I'd better dig out exactly what I wrote. It's VS2010.\nOf courser, I can't reproduce it now. I get\n1>c:\\src\\cqf\\project\\hjm\\hjm\\tests.cpp(210): warning C4002: too many actual\nparameters for macro 'REQUIRE'\n1>c:\\src\\cqf\\project\\hjm\\hjm\\tests.cpp(210): warning C4800: 'double' :\nforcing value to bool 'true' or 'false' (performance warning)\nfoo was a free function.\nI'll report the exact code if it happens again. Very odd.\nOn 2 June 2011 08:45, philsquared \nreply@reply.github.comwrote:\n\nThat shouldn't compile.\nI just checked it (XCode - using GCC 4.2) and it certainly doesn't for me.\nWhat compiler are you using?\nIs there anything special about foo? I presume it is just a function?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/philsquared/Catch/issues/35#comment_1279476\n. \n",
    "sunshineco": "The new single_header/catch.hpp at b5fabcb26b3aa02bf6ca0946060f0e5976715b95 works fine. Thank you.\nThe catch.hpp available via the GitHub \"Download\" button, however, has not been updated.\n. Thanks, now works correctly. (I notice, though, that the newest single_header/catch.cpp at 62a5ddce2bc9ad7fc9827c3373af7d13c71930c7 does not match the one available via the \"Download\" button. Perhaps there is some way to automate this?)\n. ",
    "jcockhren": "I agree with the premise of the suggestion. Also, there's currently nothing stopping a user from adding their own utility macro like:\n``` c++\ndefine CATCH_CONFIG_MAIN\ninclude\ninclude\ndefine TEST_TYPE(NAME,DESCRIPTION,T) \\\nSECTION(NAME,DESCRIPTION) {\\\n    T b = 0;\\\n    T a = 1;\\\n    CHECK(a!=b);\\\n    REQUIRE((b+a)==a);\\\n    std::vector<T> vec (4,100);\\\n    REQUIRE(vec.size()==4);\\\n\n}\nTEST_CASE(\"Case/1\",\"Auxiliary Macro\") {\n        CHECK(1==0);\n        TEST_TYPE(\"sub-section/1\",\"For integer\",myInteger);   \n}\n```\nI think the power comes if there's a way to provide a list of types to generate tests. I'm not sure how this could be achieved using the variadic macro capability of C99: http://stackoverflow.com/questions/2632300/looping-through-macro-varargs-values \nHowever, even when combined with variadic functions, it'll fall short given in order to extract an argument, one must already know the type. GCC officially-unofficially allows for variadic template lists (with 0x switch).  If having boost as a dependent isn't a big deal, this could be simulated with boost::variant and doing a static visitation to extract the correct type.\nPersonally, I like the fact that Catch is self-contained and that the compile time is minimal. Also, just imagine if previous issues spit out compile time errors like those from boost! Don't get me wrong, boost is awesome but with all that metaprogramming debugging is a nightmare if you're just trying to use the library. end mini-rant\nAll that to say: I vote for waiting for 0x. Clearly, I've thought too hard about this. \n. Well, I wouldn't go as far as calling it a suggestion. I was trying to point out a convenience that could stem from taking jalfd's idea a bit further and was probably reaching. Personally, I don't need any of that. I'm perfectly ok with calling my utility macros over and over. \n. Thanks! It compiles and runs now. I originally was getting linker errors concerning std. Modified the command to the following and it works like a charm.\ngcc -o test BasicTest.mm -framework Foundation -lobjc -lstdc++\nGoodbye OCunit (SenTestingKit)!\n. Sorry it took me a while to get around to this.\nIt's compiles fine for both objective-c++ and c++ now.\n. ",
    "dirvine": "Did you get anywhere with this Phil ?\n. That's Great Phil I converted some of our tests from Gtest to catch to see how simple it would be a for a reasonably  large codebase to do this. It's all great but for value and type parametised tests. These are a good bit more difficult in catch and I wonder what your thoughts are. You can see a small example in this branch of our code if it helps, many of the other libs use parametised tests as you will see if it helps. Here is the branch https://github.com/maidsafe/MaidSafe-Common/tree/catch/src/maidsafe/common/tests (this has some tests that use catch and the remaining still configured for gtest)\n. Hi Phil, this is really good and looks better and cleaner than the gtest mechanism.  Gtest has 2 parametrisation types value parametrised (which this is and you have that covered by the looks of it, cool!) and type parametrised, it's both I was looking at thinking template tests would be more c++ than type parametrisation which seems like a non c++ way of doing things.  The generators were a nice surprise though. \nI will have a play with the gist you did for us (thanks a lot for that) and get back with the template / type parametrised issues shortly. Again great lib !!\n. Thanks again Phil, we will certainly be testing this out and if possible switching to catch, happy to write that up in our blog when we can do it. Work like this deserves to be mentioned to get as many using it as possible. I really like your approach to this being a test suite and that's it, no mock etc. it will keep it clean and accurate.  I will keep you posted on progress, good and bad as we try this out (btw conversion from gtest is very simple really).\n. You can safely add linux I think. \nUbuntu 13.04\nclang 3.4 libc++ libc++abi \ngcc 4.7 & 4.8\n. A thanks for that. I will close this now, thanks for the update, very much appreciated. \n. ",
    "garethsb": "I've just been looking at converting a small suite of about 100 test cases from Boost.Test to Catch as an experiment, initially using shim macros that can be switched to either use Boost.Test or Catch, to prove things to the rest of the team. The use of type-lists to test a template with a range of types, with BOOST_AUTO_TEST_CASE_TEMPLATE (roughly 3% of test cases in this suite), is one of only two stumbling blocks I found, everything else has been reassuringly very smooth.\nI agree with the comment from @samaursa on Dec 3, 2011 that TEMPLATE_TEST_CASE_# looks interesting. In the interests of keeping Catch core small, I'd be perfectly happy to to keep its implementation in my own code - @philsquared, do you have an implementation lying around?! (The alternative mapping in my shim layer to Boost.Test way of doing things would be easy I think.)\nBest regards!\n. OK, here's a first attempt of a complete implementation of CATCH_TEMPLATE_TEST_CASE_n in case it's useful to someone else. @philsquared, is this the sort of thing you were suggesting?\n``` C++\ndefine INTERNAL_CATCH_TEMPLATE_TEST_CASE_DECL( name, description, T ) \\\ntemplate<typename T> \\\nvoid INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_TE____T_E_S_T____ )(); \\\nCATCH_TEST_CASE( name, description )\n\ndefine INTERNAL_CATCH_TEMPLATE_TEST_CASE_SECTION( Tn ) \\\n    CATCH_SECTION( #Tn ) \\\n    { \\\n        INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_TE____T_E_S_T____ )<Tn>(); \\\n    }\n\ndefine INTERNAL_CATCH_TEMPLATE_TEST_CASE_DEFN( T ) \\\ntemplate<typename T> \\\nvoid INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_TE____T_E_S_T____ )()\n\ndefine CATCH_TEMPLATE_TEST_CASE_1( name, description, T, T1 ) \\\nINTERNAL_CATCH_TEMPLATE_TEST_CASE_DECL( name, description, T) \\\n{ \\\n    INTERNAL_CATCH_TEMPLATE_TEST_CASE_SECTION( T1 ) \\\n} \\\nINTERNAL_CATCH_TEMPLATE_TEST_CASE_DEFN( T )\n\ndefine CATCH_TEMPLATE_TEST_CASE_2( name, description, T, T1, T2 ) \\\nINTERNAL_CATCH_TEMPLATE_TEST_CASE_DECL( name, description, T ) \\\n{ \\\n    INTERNAL_CATCH_TEMPLATE_TEST_CASE_SECTION( T1 ) \\\n    INTERNAL_CATCH_TEMPLATE_TEST_CASE_SECTION( T2 ) \\\n} \\\nINTERNAL_CATCH_TEMPLATE_TEST_CASE_DEFN( T )\n\n// And so on...\n```\nFor info, the largest type-list I found for a template test case in the (Boost.Test) test suite I'm looking at right now has 14 types, which is constructed from two other type-lists (used for earlier tests) of 8 and 6 types. So this is also an example of type-list reuse which @jalfd mentioned.\n. > I tried setting the passOrFail text in the AssertionPrinter to \"ERROR\" instead of \"FAILURE\" and it sort of worked, but there was no detail about the expression.\nUsing the CompactReporter (--reporter compact) and changing its failedString() to \"error\" is enough to get Visual Studio to show failures in the Errors list.\n@philsquared this seems like a trivial change that's a win for VS users. Or at least make it possible to configure the failedString() easily in a derived custom reporter?\nNote that while Visual Studio recognises the words \"error\" and \"warning\" in the console output and adds entries to the Error Lists > Errors and Warnings lists, and ignores everything else (hence \"FAILED\" being ignored), there isn't anything that will cause it to put an entry in the Messages list. On the other hand, Xcode on the Mac last time I checked, handles \"error\", \"warning\" and \"note\", and treats everything else as an error.\nWhat do people think about whether CompactReporter should convert newlines in the expansion text to make single-line output?\n. +1\nThis is something I'm missing when migrating from Boost.Test. See comments + first cut with explicit list of types (rather than type-lists used by Google Test and Boost.Test) in #46 \n. @fsolenberg @wichtounet Are you able to report whether the CATCH_TEMPLATE_TEST_CASE_n macros I proposed an implementation of on 12 Jan (in #46) work for your use cases?\n@philsquared hasn't commented on whether he'd accept that code as a patch yet, but more votes (either way!) might help...\nBest regards,\n. @wichtounet That's great!\nBy the way, Catch allows you to choose whether it provides short names (TEST_CASE, SECTION, etc.) or ones with the CATCH_ prefix, by defining CATCH_CONFIG_PREFIX_ALL or not.\nI guess I should work up my sketch into a proper PR that supports both forms...\n. This is good input and I think I understand the motivation of @fsolenberg to argue for INIT_SECTION.\nHowever I believe that these template test cases should work like C++ templates; the types under test must meet all the requirements of the concept being tested. If the types have a few different behaviours, those parts can be tested independently by other test cases specific to that type or subset of types.\nIn the INIT_SECTION example I think this should be achieved by moving construction out of the test case i.e.\n``` C++\ntemplate  T foo_construct();\ntemplate <>\nreference_impl foo_construct() { return reference_impl(\"bin/coeffs_ref\"); }\ntemplate <>\noptimized_impl foo_construct() { return optimized_impl(); }\nTEMPLATE_TEST_CASE_2(\"foo\", \"\", Impl, reference_impl, optimized_impl )\n{\n  Impl foo = foo_construct();\n  SECTION(\"bar\") {\n    REQUIRE(foo.size() == 32);\n    REQUIRE(foo.bar({1, 2, 3, 4}) == 76);\n    ...\n```\n(I'm not actually sure in @fsolenberg pseudo-code how the foo variable declared in the INIT_SECTION scope is intended to be available in the later code?)\nBest regards,\n. Your example use case is testing constructed instances of types, and doesn't use the type-name itself at all. To be honest I'd write these kind of tests using existing Catch infrastructure:\nC++\ntemplate <typename T > void foo_test(T foo);\nTEST_CASE(\"foo\")\n{\n  foo_test(reference_impl(\"bin/coeffs_ref\"));\n  foo_test(optimized_impl());\n}\ntemplate <typename T > void foo_test(T foo) {\n  SECTION(\"bar\") {\n    REQUIRE(foo.size() == 32);\n    REQUIRE(foo.bar({1, 2, 3, 4}) == 76);\n    ...\nActually we can wrap that up in a macro to allow you to write:\nC++\nTEMPLATE_FUNCTION_TEST_CASE_2(\"foo\", foo, reference_impl(\"bin/coeffs_ref\"), optimized_impl())\n{\n  SECTION(\"bar\") {\n    REQUIRE(foo.size() == 32);\n    REQUIRE(foo.bar({1, 2, 3, 4}) == 76);\n    ...\nHowever, the template test cases that I need are more general - I need to be able to test other properties of the type (does it have a certain nested type, can I construct it from two ints, etc.).\nBest regards,\n. I suspect it's a problem with using INTERNAL_CATCH_UNIQUE_NAME in the global scope. As far as I remember it's implemented with __LINE__ so it's likely you're now hitting duplicates between translation units.\nWe need to get it into a file scope to solve this, e.g. using anonymous namespace.\n. Thanks @martinmoene, I wondered about that, it wasn't completely clear from the GitHub article about using pull requests. I guess I should probably have created a topic branch in my fork too. Anyway, before proceeding further I'd like to know whether a PR for this feature is likely ultimately to be accepted. Best regards,\n. Thanks, @philsquared, I understand. I'm a git/github newbie, but if I understand correctly, github doesn't allow me to fix this PR to change the base branch to develop rather than master or change the head from my fork's master branch to a topic branch... I'd have to create a new PR... so I'll just leave it alone, until whenever you have a chance to review. Thanks again.\n. Thanks, @dcoeurjo, good to hear it works for you.\nI also like @zpgaal 's approach, basically as I described in last point of my original PR comment. Some thoughts:\nIt has possible pros, e.g. less new code in Catch (even when support for no CATCH_ prefix is added), and no explicit or maximum supported type-list length. Possible cons are that it's more verbose for the user and that the _REGISTER 'calls' must follow the 'test case template' body I believe. Possibly the 'test case template' declaration could go first, followed by registration (instantiation), followed by the definition, but that'd be more long-winded again. I'd need this though, for my own shim layer that abstracts whether I'm using Catch, Google Test or Boost.Test. Whether the fact that each type-under-test makes a separate test case rather than a section in one test case could be a pro or a con I guess. One other small decision to make either way, is whether the name of the type-under-test is hard-coded (TestType here) or able to be varied by the test case author as in the PR (I find myself using this for clarity).\n. @horenmar As you say, the code has moved on. The state of the repo in 2015 shows INTERNAL_CATCH_TESTCASE etc. as I described: internal/catch_test_registry.hpp in 2015. The equivalent code in 2017 uses an indirection macro: internal/catch_test_registry.hpp in 2017. It wouldn't take much to update this PR, if it were likely to be merged.\n. My gist is derived from code in CMake repo, licensed under BSD 3-clause licence. Is it ok for inclusion in Catch2 repo? I am not a lawyer.... @dvirtz I have left a comment on the Kitware blog post asking if the gist would be considered for incorporation in CMake.\n@horenmar It is derived from the Google Test implementation in CMake repo. (In fact, it ought to be possible to refactor out the commonality, but I thought better to wait until I knew where catch_discover_tests has a home before attempting that.)\nMaybe we need the opinion of @mwoehlke-kitware!\n. Thank you all for your comments so far.\n@philsquared @horenmar What is your opinion for the best home for this script? In the CMake repo there is the possibility of shared code with the Google Test equivalent by @mwoehlke-kitware, but since ParseAndAddCatchTests is in the Catch repo and this new catch_discover_tests depends on the format of the output of --list-test-names-only, the Catch repo is also a good home. There is a high bar for the merge request procedure for CMake, so it may take some time to have it accepted into CMake, but I can attempt it. And there is the licensing to consider (I assume dual licensing isn't a possibility and probably just makes things more complicated rather than less)...\n. ",
    "newread": "Cannot compile since this hpp file is messied up with #ifdef of OBJC, TestCaseInfo class definition is wrapped in OBJC ifdef so that none-OBJC compile would always fail,\nanybody wants to fix it ? \nI have a workable version by removing all OBJC ifdef section. this is ok for me to get my unit test going.\nthanks\n. ",
    "ikanor": "Might be a good idea to capture it and display only if the test fails \u2013 a behaviour I've seen in other testing frameworks. \n. ",
    "nabijaczleweli": ":+1: Very user-friendly behaviour\n. Using raw pointars (obtained from possibly-malicious sources, gasp)! :-1:\n. This is horribly UB and will fail horribly somewhere down the line\n. Yes: do not test class internals.\n. Had I not known what Catch is, were I to hear about it in a C++ context, I'd search for \"catch c++\" or \"catch library\", both of which are on top.\n. > [...] how the X in OS X, while pronounced \"ten\" [...]\nDoes any_one actually pronounce it _ten? I've only ever heard and used it as Ough-Ess Ecks\n. > If you hang out in Mac or iOS developer communities \nI'd prefer to stay cancer-free, thanks\n. > a custom String class\nPhil y u do dis\n. > in a forked process\nExcept for Windows world where processes are expensive and forking is hard :v\n. Why are you trying to use Visual Studio anyway?\n. Looks like @philsquared just mass-closed 16 issues, probably either he's cleaning up or he fucked up on using a bot or summat.\n. It's \"colour\", you filthy colonial!\nBut \"color\" is a better option here, because everyone uses it now. audible sigh\n. :+1:\n. ``` c++\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nstruct QString {\n    std::string ;\n    const std::string & toStdString() const { return ; }\nbool operator==(const QString & rhs) { return _ == rhs._; }\n\n};\nstd::ostream& operator <<( std::ostream& os, QString const& value ) {\n    os << value.toStdString();\n    return os;\n}\nTEST_CASE(\"My testcase\") {\n  CAPTURE(QString{\"moo\"});\n  INFO(QString{\"Sauce\"});\nCHECK(QString{\"moo\"} == QString{\"sauce\"});\n}\n```\nWorks for me (test code copied verbatim, added mock QString):\n```\nMy testcase\nasdf.cpp:28\n...............................................................................\nasdf.cpp:32: FAILED:\n  CHECK( QString{\"moo\"} == QString{\"sauce\"} )\nwith expansion:\n  moo == sauce\nwith messages:\n  QString{\"moo\"} := moo\n  Sauce\n===============================================================================\ntest cases: 1 | 1 failed\nassertions: 1 | 1 failed\n```\n. Please provide an SSCCE, because you're doing something quite fishy by the looks of it\n. The example should be platform-independent (I'm on Windows) Also, try not to use Qt to achieve the minimal code sample to reproduce the bug\n. > that Java never would\ncough Read The International Standard if you think the compilers are getting confused. And no, you haven't seen them get confused.\nFun activity for an afternoon: compare what The International Standard has to say about function overloading to what that filthy Java standard says.\n. @LOLKFC try using clang-3.5 with the exact same configuration, smells to me like a too old of a  compiler (-std=c++0x).\n. @kirbyfan64 Nice, but might throw std::bad_alloc or a derivative thereof\n. @kirbyfan64 Nice one (the aligned storage method)\n. c++\nstruct test_init {\n  test_init() {\n    // perform your init here\n  }\n} test_init_instance;\n. How does one \"revert\" to std::unique_ptr?\nAh, yer a C programmer!\n. Non-RAII resource management shall be banished!\n. Kinky ( \u0361o \u035c\u0296 \u0361o)\n. add_*_reference<> can be trivially implemented in usercode, so you could just have:\n``` c++\nnamespace catch {\nif cpluspluseleven\ntemplate\n  using add_lvalue_reference = std::add_lvalue_reference;\nelse\ntemplate \n  struct add_lvalue_reference {\n    typedef T & type;\n  };\n  template \n  struct add_lvalue_reference {\n    typedef T & type;\n  };\n  template \n  struct add_lvalue_reference {\n    typedef T & type;\n  };\nendif\n}\n```\nTo test:\nc++\nCHECK(std::is_same<catch::add_lvalue_reference<int &&>::type, int &>::value);\nCHECK(std::is_same<catch::add_lvalue_reference<int &>::type, int &>::value);\nCHECK(std::is_same<catch::add_lvalue_reference<int>::type, int &>::value);\n. :+1:\n. @Crog You can use the standard set of git commands\n. :+1:\n. You've under-/overflown the stack, increase the stack size in your linker arguments.\n. Because it stack-allocates some stuff as well?\n. Why not always have it const?\n. ::main() is (AFAIR) guaranteed to have C linkage, which means, that you can't have a linkage error there...\n...unless Qt is so shitty, that it #defines main\n. Same in N4140 (de facto C++14), interesting. Having cv-qualified ::main() arguments should be allowed, though, just as a thought.\nDoes Qt #define main to qMain?\n. Installing a signal(SIGABRT) handler is an option and looks like it's legal to return from it normally (which continues execution), however:\n\nOn entry to the signal handler, the state of the floating-point environment and the values of all objects is unspecified, except for\n- objects of type volatile std::sig_atomic_t\n- objects of std::atomic types\n- side effects made visible through std::atomic_signal_fence\n\nWhich means, that there'd need to be a separate (static) environment for this kinda thing, which drops multithreading.\n. > If the user defined function returns when handling SIGFPE, SIGILL, SIGSEGV or any other implementation-defined signal specifying a computational exception, the behavior is undefined.\nReturning from the handler is legal for <see your local compiler's documentation> signals.\n. Sounds expensive as fuck, though.\n. If I read the cppreference correctly, it's only UB for some cases, and \nSIGABRT is not one of them, so it'd well-defined.\nOn 11/12/2015 18:31, Trevor Hickey wrote:\n\n@nabijaczleweli https://github.com/nabijaczleweli\nAgreed.\nI wouldn't mind the performance cost if it let me specify individual \nuse cases where aborts should occur. It doesn't seem like returning \nfrom a signal handler, and still having all of the program state \ndefined, is plausible.\nCurrently, I'm making a ton of binaries, and having a bash script \ncheck their exit status. It's not great. Implementing a similar thing \ninto the framework through forking is just as bad, but at least I \ncould specify all my use cases in the same file/same binary.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/philsquared/Catch/issues/553#issuecomment-163998124.\n. > Signal handler\nThe following limitations are imposed on the user-defined function that is installed as a signal handler.\n- If the user defined function returns when handling SIGFPE, SIGILL, SIGSEGV or any other implementation-defined signal specifying a computational exception, the behavior is undefined.\n\nFrom cppreference on std::signal()\n. > any other implementation-defined signal specifying a computational exception\nAnd SIGABRT is standard.\n. IIRC fclose()ing stdout and stderr isn't guaranteed to work on cout and cerr.\n. Or redirect it to a stringstream via rdbuf(), or make a null buffer and use that. (Un)Setting failbit is a common error handling technique\n. Any update on this, @philsquared?\n. Instead of a function object, you can just have a free catch::tolower() function\n. Norepro:\n```\nMicrosoft Windows [Version 10.0.10586]\n(c) 2015 Microsoft Corporation. All rights reserved.\nd:\\Pobieranie\\asdf>cat c.cpp\ndefine CATCH_CONFIG_MAIN // This tells Catch to provide a main() - only do this in one cpp file\ninclude \"catch.hpp\"\nunsigned int Factorial( unsigned int number ) {\nreturn number <= 1 ? number : Factorial(number-1)*number;\n}\nTEST_CASE( \"Factorials are computed\", \"[factorial]\" ) {\nREQUIRE( Factorial(1) == 1 );\nREQUIRE( Factorial(2) == 2 );\nREQUIRE( Factorial(3) == 6 );\nREQUIRE( Factorial(10) == 3628800 );\n}\nd:\\Pobieranie\\asdf>g++ -std=c++14 -Wall -Wextra -O3 -ICatch-1.3.1\\include c.cpp\nd:\\Pobieranie\\asdf>a\nAll tests passed (4 assertions in 1 test case)\nd:\\Pobieranie\\asdf>g++ --version\ng++ (Rev4, Built by MSYS2 project) 5.2.0\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\nOn Win10x64\n. Cygwin should die in a fire\n. Take a look at supplying your own main() in the reference.\n. cpp\nit(\"...\", []() {})\nI guess?\n. ```\nMicrosoft Windows [Version 10.0.10586]\n(c) 2015 Microsoft Corporation. All rights reserved.\nd:\\Pobieranie\\asdf>g++ -std=c++14 pipo-sequence-test.cpp\nIn file included from PiPoSequence.h:13:0,\n                 from pipo-sequence-test.cpp:5:\nPiPo.h:944:110: warning: converting to non-pointer type 'unsigned int' from NULL [-Wconversion-null]\n   PiPoScalarAttr(PiPo pipo, const char name, const char descr, bool changesStream, unsigned int initVal = NULL) :\n                                                                                                              ^\nPiPo.h:1184:134: warning: converting to non-pointer type 'unsigned int' from NULL [-Wconversion-null]\n   PiPoVarSizeAttr(PiPo pipo, const char name, const char descr, bool changesStream, unsigned int size = 0, unsigned int initVal = NULL) :\n                                                                                                                                      ^\nIn file included from pipo-sequence-test.cpp:6:0:\nPiPoConst.h: In member function 'virtual int PiPoConst::streamAttributes(bool, double, double, unsigned int, unsigned int, const char*, bool, double, unsigned int)':\nPiPoConst.h:86:22: warning: ISO C++ forbids converting a string constant to 'char' [-Wwrite-strings]\n         outlabels[i] = \"unnamed\";\n                      ^\nd:\\Pobieranie\\asdf>a\n<<>>\nd:\\Pobieranie\\asdf>gdb a\nGNU gdb (GDB) 7.9\nCopyright (C) 2015 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-pc-msys\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/.\nFind the GDB manual and other documentation resources online at:\nhttp://www.gnu.org/software/gdb/documentation/.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nTraceback (most recent call last):\n  File \"\", line 3, in \nImportError: No module named libstdcxx.v6.printers\n/etc/gdbinit:6: Error in sourced command file:\nError while executing Python code.\nReading symbols from a...done.\n(gdb) run\nStarting program: /d/Pobieranie/asdf/a\n[New Thread 7072.0x604]\n[New Thread 7072.0x2c38]\n[New Thread 7072.0x2fcc]\nProgram received signal SIGSEGV, Segmentation fault.\n0x000000000042f6e6 in PiPoScale::frames(double, double, float*, unsigned int, unsigned int) ()\n(gdb) q\nA debugging session is active.\n    Inferior 1 [process 7072] will be killed.\n\nQuit anyway? (y or n) y\nd:\\Pobieranie\\asdf>\n```\nLooks to me like your code SIGSEGVs\n. >  Is there anything non-trivial happening between sections, that brings to light a bug lurking in my code?\nHighly probable, that's how UB may present itself.\n. Actually...\n```\nMicrosoft Windows [Version 10.0.10586]\n(c) 2015 Microsoft Corporation. All rights reserved\nd:\\Pobieranie\\asdf>g++ -std=c++14 pipo-sequence-test_mod.cpp\nIn file included from PiPoSequence.h:13:0,\n                 from pipo-sequence-test_mod.cpp:5:\nPiPo.h:944:110: warning: converting to non-pointer type 'unsigned int' from NULL [-Wconversion-null]\n   PiPoScalarAttr(PiPo pipo, const char name, const char descr, bool changesStream, unsigned int initVal = NULL) :\n                                                                                                              ^\nPiPo.h:1184:134: warning: converting to non-pointer type 'unsigned int' from NULL [-Wconversion-null]\n   PiPoVarSizeAttr(PiPo pipo, const char name, const char descr, bool changesStream, unsigned int size = 0, unsigned int initVal = NULL) :\n                                                                                                                                      ^\nIn file included from pipo-sequence-test_mod.cpp:6:0:\nPiPoConst.h: In member function 'virtual int PiPoConst::streamAttributes(bool, double, double, unsigned int, unsigned int, const char*, bool, double, unsigned int)':\nPiPoConst.h:86:22: warning: ISO C++ forbids converting a string constant to 'char' [-Wwrite-strings]\n         outlabels[i] = \"unnamed\";\n                      ^\nd:/Programy/Programowanie/msys2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/5.3.0/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot open output file a.exe: Permission denied\ncollect2.exe: error: ld returned 1 exit status\nd:\\Pobieranie\\asdf>a\n<<>>\nd:\\Pobieranie\\asdf>gdb a\nGNU gdb (GDB) 7.9\nCopyright (C) 2015 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-pc-msys\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/.\nFind the GDB manual and other documentation resources online at:\nhttp://www.gnu.org/software/gdb/documentation/.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nTraceback (most recent call last):\n  File \"\", line 3, in \nImportError: No module named libstdcxx.v6.printers\n/etc/gdbinit:6: Error in sourced command file:\nError while executing Python code.\nReading symbols from a...done.\n(gdb) run\nStarting program: /d/Pobieranie/asdf/a\n[New Thread 14496.0x3238]\n[New Thread 14496.0x1d90]\n[New Thread 14496.0x7a8]\nProgram received signal SIGSEGV, Segmentation fault.\n0x000000000042f6e6 in PiPoScale::frames(double, double, float*, unsigned int, unsigned int) ()\n(gdb) q\nA debugging session is active.\n    Inferior 1 [process 14496] will be killed.\n\nQuit anyway? (y or n) y\nd:\\Pobieranie\\asdf>\n```\nDespite removing line 88.\n. Can --force-colour/some other option set ANSI escapes regardless of platform? It'd be great for IDEs.\n. With --force-colour you don't need to check if isatty(), so you can compile the ANSI colourer and the WinAPI colourer at the same time and select them at runtime.\n. Very good point\n. Have you included <cassert> for assert()?\nPost a minimal code example that reproduces your problem.\n. Cannot reproduce on v1.3.5 with GCC 5.3.0\n. Yes, I used all of those flags\n. ```\nd:\\Catch>git log -1\ncommit ae5ee2cf63d6d67bd1369b512d2a7b60b571c907\nAuthor: Phil Nash github@philnash.me\nDate:   Mon Feb 29 08:17:18 2016 +0000\nv1.3.5\n\nd:\\Catch>cat a.cpp\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nTEST_CASE(\"blerb\", \"[blurb]\") {\n        REQUIRE( 1 );\n}\nd:\\Catch>g++ -Wall -Wextra -pedantic a.cpp -Iinclude\nd:\\Catch>g++ -v\nUsing built-in specs.\nCOLLECT_GCC=g++\nCOLLECT_LTO_WRAPPER=d:/Programy/Programowanie/msys2/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/5.3.0/lto-wrapper.exe\nTarget: x86_64-w64-mingw32\nConfigured with: ../gcc-5.3.0/configure --prefix=/mingw64 --with-local-prefix=/mingw64/local --build=x86_64-w64-mingw32 --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --with-native-system-header-dir=/mingw64/x86_64-w64-mingw32/include --libexecdir=/mingw64/lib --with-gxx-include-dir=/mingw64/include/c++/5.3.0 --enable-bootstrap --with-arch=x86-64 --with-tune=generic --enable-languages=c,lto,c++,objc,obj-c++,fortran,ada --enable-shared --enable-static --enable-libatomic --enable-threads=posix --enable-graphite --enable-fully-dynamic-string --enable-libstdcxx-time=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-version-specific-runtime-libs --disable-isl-version-check --enable-lto --enable-libgomp --disable-multilib --enable-checking=release --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-libiconv --with-system-zlib --with-gmp=/mingw64 --with-mpfr=/mingw64 --with-mpc=/mingw64 --with-isl=/mingw64 --with-pkgversion='Rev1, Built by MSYS2 project' --with-bugurl=http://sourceforge.net/projects/msys2 --with-gnu-as --with-gnu-ld\nThread model: posix\ngcc version 5.3.0 (Rev1, Built by MSYS2 project)\n```\n. Yes, we programmers call them \"functions\"\n. Why not\ncpp\ntemplate<class Container>\nstd::string toString(Container const& c) {\n    return Detail::rangeToString( begin(c), end(c) );\n}\nThis oughta catch 90% of the cases at least\n. With the second approach you're still facing a fundamental problem: you need to list every container type. I'd go for a modified approach 1: either (a) require, that there are ADL-accessible begin(c) and end(c), or require every part of the Container concept to be satisfied.\n\nthe user might have defined a class with begin and end support. It does not mean it follows the container concept. Eg: a ChessGame class might have a begin and end method that are starting and stopping the game, not returning iterators.\n\nNote: those are begin(c), not c.begin(), user needs to add theirnamespace::begin() (and toString() implementation needs to use std::begin;) for it to work with stdlib ranged-for and generic algorithms. Same for end().\n. What kind of a \"sanity check\"? All multiplications/length seem to be correct.\nWell, using malloc() is a questionable matter in and of itself.\n. This should be a smart pointer :v\nOr, rather, an actual container\n. See https://github.com/philsquared/Catch/issues/590#issuecomment-188404016\n. It's in\n. :+1:\n. Phil never was quick to get to issues, was he\n. Why would you wanna do that?\n. You explained what it lets one do, not why anyone would want to do that.\n. Hrmmm, alright. In your PR desc and commit msg you mentioned editing Catch which sounded suspicious.\n:+1:\n. They are very much needed.\n. Can you provide a testcase for that? \n. As for the failing Clang3.8 CI build you need to make this package llvm-toolchain-precise-3.8\n. But Approx already supports constructible types...\n. Have you tried running tests?\n. Travis failing because of https://github.com/philsquared/Catch/commit/e904aa7f6e2e450f9515bce96a0c4b5669ed5d93#commitcomment-17389109\n. I guess I never pinpointed, that this has to do with https://github.com/travis-ci/apt-source-whitelist/pull/255\n. Can confirm, llvm.org/apt has been down for the last couple of days\n. Of course it will, because llvm.org/apt is back up, have you not heard the news?\n. :+1:\n. This (and all bugs akin) could be fixed by enforcing a .clang-format at repository root\n. Rebased\n. :+1:\n. lol what\n. The longjmp() function family is literal cancer.\n. Just use C if you want *jmp*(). Dabble not in C++ therewith. I might or might not have done Very Bad things to a PC with 'em.\n. Catch != GTest. If you want -fno-exceptions then use GTest. -fno-exceptions is out of scope for Catch.\n. How about \ncpp\nREQUIRE((run_test<test_1_1_pub_t, decltype(process_pub)>(process_pub)));\nor\ncpp\nREQUIRE((run_test<test_1_1_pub_t, decltype(process_pub)>)(process_pub));\n?\n. Parens save lives\n. Full source code, full compilation command, compiler version, Catch version?\n. FWIW I can't repro with Catch v1.5.9 and g++ 6.2.0.. How many times do I have to tell y'all to just use fucking parens?\n. v0v \n. Blog works for me :+1:. I mean you're either not gonna do benchmarks (which is okay, this is a test framework), do them badly (even worse than not doing them) or do them right (in which case you could just use nonius instead).\nIMO this is a classic Separation Of Concerns problem, and implementing benchmarks in a testing framework (possibly badly, since it's an extremely hard thing to get right) is a worse decision in every way than using nonius, which does them 100% right, is more fully-featured and is built around&for doing benchmarks.. Think about your actions.. You know what? I typed up a really long and detailed response about how your complete lack of respect for the maintainers' time could be circumvented by thinking for more than 3 seconds, but I gave up. So here, take this imaginary badge as a token of defeating even my will to reason with.. Smash the gigantic close issue button. People can't tell your software is dogshit if they can't report why it's dogshit.\n. Also consider: a test case for just (not) throwing exceptions is a legit use case.. Will the code work with just &std::tolower instead of this mostrosity?\n. There's also charT tolower( charT ch, const locale& loc ); in <locale>, so we're better off using a lambda anyway\n. I'd move this comment to compare()\n. Empty #else clause, any reason it's there?\n. y u trailing whitespace\n. \"negative\"\n. \"multibyte\"\n. ",
    "trenki2": "I just tested the updated CATCH version with the test cases that I provided above and they now succeed in Release and Debug mode for VC++ 2008 Express!\n. Yes, I simply downloaded the new zip archive.\n. ",
    "bcardiff": "This issue applies also using eclipse/mac. I was unable to use the Catch because of that. Is there any older version where it works at least?\nEven this fails:\nint a = 1;\nREQUIRE(a == 1);\n. ",
    "ppatoria": "I just gone through some of your videos and  like catch2 very much but without mocj we can't do serious testing  and I think ad-hock mocks or stub is very time consuming and doesn't have capability to verify if a method is called (i.e . how many times it is called, with specific parameter value ... etc) . So I think catch2 should support some mock framework without that its not complete.\nGoogle mock is ugly and need lot of code , a better framework is required something similar to mock frameworks available in .Net and Java. \nAlso just want to what's your opinion on design by contract ? Which is more natural way of writing safe code. A combination of design by contacts and unit tests seems to me a better approach.. ",
    "dvirtz": "I've been successfully using FakeIt:\nhttps://github.com/eranpeer/FakeIt\nOn Fri, 25 May 2018, 22:53 ppatoria, notifications@github.com wrote:\n\nI just gone through some of your videos and like catch2 very much but\nwithout mocj we can't do serious testing and I think ad-hock mocks or stub\nis very time consuming and doesn't have capability to verify if a method is\ncalled (i.e . how many times it is called, with specific parameter value\n... etc) . So I think catch2 should support some mock framework without\nthat its not complete.\nGoogle mock is ugly and need lot of code , a better framework is required\nsomething similar to mock frameworks available in .Net and Java.\nAlso just want to what's your opinion on design by contract ? Which is\nmore natural way of writing safe code. A combination of design by contacts\nand unit tests seems to me a better approach.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/issues/55#issuecomment-392162950, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojeAPi4M_yVyCAg59Az1zc44WWXnPks5t2GEggaJpZM4ABAyb\n.\n. You can use test fixtures for set up code:\nhttps://github.com/philsquared/Catch/blob/master/docs/test-fixtures\n\nOn 30 July 2015 at 07:27, Lujun Weng notifications@github.com wrote:\n\nIs that possible I supply my own runner and control the beginning of each\ntestcase?\nI find in the default main function run(argc, argv) is directly called as\nfollows\n// Standard C/C++ main entry pointint main (int argc, char * const argv[]) {\n    return Catch::Session().run( argc, argv );\n}\nI think it better if there is another run method with some runner passed,\nlike this one\nCatch::Session().run( argc, argv, new somerunner() );\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/475.\n. Alternatively, add switch /SUBSYSTEM:CONSOLE to the linker\n(Properties/Linker/System/SubSystem).\nWhen running without debugging, this will print \"Press any key to continue\n. . .\" and wait.\n\nOn 5 May 2016 at 20:11, qwoodmansee notifications@github.com wrote:\n\n@nicolaje https://github.com/nicolaje I just ran into this as well -\nfor anyone else who runs into this, David provided me the insight I needed\nto solve it. Steps Listed below:\n1. Change CATCH_CONFIG_MAIN to CATCH_CONFIG_RUNNER\n   2.\nAdd this main to that file:\n   `int main(int argc, char* const argv[]) {\n   int result = Catch::Session().run(argc, argv);\nwhile (true);\n   return result;\n   }`\nNote that you'll have to kill the program via visual studio unless you\nimplement another way to end the while loop.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/477#issuecomment-217213372\n. changing the macro definition to the following solves it for me:\n\n```\ndefine CAPTURE( msg ) INTERNAL_CATCH_INFO( #msg \" := \" << Catch::toString(msg), \"CAPTURE\" )\n```\nI can make a PR of it if you like.\n. @horenmar please see if you can also make the script issue a PR for Hunter package at https://github.com/hunter-packages/Catch. I was beaten by this again so I thought to give it a go and made a PR. Great, thanks!\nOn 4 April 2017 at 12:27, Martin Ho\u0159e\u0148ovsk\u00fd notifications@github.com\nwrote:\n\nClosed #748 https://github.com/philsquared/Catch/issues/748 via #876\nhttps://github.com/philsquared/Catch/pull/876.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/issues/748#event-1028042867, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojfwAH9NbjMoVDfHUoNlG2J_93Lhoks5rsgz_gaJpZM4K314F\n.\n. I suggest to print unsigned char as unsigned int as I think it is seldom (if at all) used for strings.. The warning is gone on latest build.\nThanks.. Thanks. I believe it is deprecated only because 17 has a version which\ntells the number of exceptions, not because there's something wrong with it.\n\nOn 3 Apr 2017 3:35 p.m., \"Martin Ho\u0159e\u0148ovsk\u00fd\" notifications@github.com\nwrote:\nLooks good to me, I want to make minor changes before merging it.\nI also have some minor concerns about using std::uncaught_exception causing\nunexpected behaviour (there is a reason it is deprecated in C++17), but it\nis unlikely to actually trigger, and even if it did, the difference in\nbehaviour would be bad output message, nothing functional.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/pull/876#issuecomment-291129733, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojTS41gwf_PgKo025USn3uC2IpkSpks5rsOd5gaJpZM4Mu_C5\n.\n. You can put REQUIRE in a plain function and call that from both tests.\nOn 7 Jul 2017 3:19 p.m., \"nuyir\" notifications@github.com wrote:\n\nI'll be very happy if I can write a code like the following:\nCALLABLE_TEST_CASE(\"common_test\", type1 arg1, type2 arg2) {\n    REQUIRE( ... ); // Some tests with arg1 and arg2\n}\nTEST_CASE(\"test1\") {\n    type1 t1;\n    type2 t2;\n// Do something with t1 and t2 and then\nCALL_TEST_CASE(\"common_test\", t1, t2);\n\n}\nTEST_CASE(\"test2\") {\n    type1 t1;\n    type2 t2;\n// Do another something with t1 and t2 and then\nCALL_TEST_CASE(\"common_test\", t1, t2);\n\n}\nIf the test fails, a stacktrace would be printed.\nTest.cpp:100: FAILED:\ncalled from Test.cpp 120:\n   REQUIRE(...)\nIs that possible? If not, would you please consider implementing this\nfeature?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/issues/950, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojfDkgGOPMZE60bnqNnCMyfxqCoPlks5sLiI4gaJpZM4OQ3rV\n.\n. It's 15.2. I'll try to upgrade and see if it's solved.. same error on 15.3.1. OK, turns out it happens on assert as well https://godbolt.org/g/tfV6nX\nI found a related VS bug on https://developercommunity.visualstudio.com/content/problem/67300/stringifying-raw-string-literal.html\nMaybe you can think of some workaround which can be done in Catch?. In that case the output will be the same as assigning the result to bool\nand check that, won't it?\nIn that case I don't think it's worth the bother.\n\nOn 22 Aug 2017 10:32 p.m., \"Martin Ho\u0159e\u0148ovsk\u00fd\" notifications@github.com\nwrote:\n\nThe only workaround I can see is to introduce new set of internal macros,\nthat would not record the original expression string. A quick check says\nthat there are 7 of them right now, all of which would need to be\nduplicated.\nThis is easy enough to do, but the question is if it is worth it,\nespecially since it would need to be opt-in.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/issues/995#issuecomment-324128590,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojWuWYNtUn2X85lKswpOro5tcBlcaks5sayzBgaJpZM4O9Qoh\n.\n. Thanks.\nI think it's better, however, to have additional macro and not disable\nstringifaction globally.\n\nOn 22 Aug 2017 10:57 p.m., \"Martin Ho\u0159e\u0148ovsk\u00fd\" notifications@github.com\nwrote:\nNo, we would still be able to reconstruct the actual values.\nI have a proof of concept done (see attachment), the output would look like\nthis:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCatchWork.exe is a Catch v2.0.0-develop.2 host application.\nRun with -? for options\n\ntest\ncatchwork\\test1.cpp(5)\n...............................................................................\ncatchwork\\test1.cpp(7):\nPASSED:\n  REQUIRE( Stringification disabled by DISABLE_STRINGIFY )\nwith expansion:\n  true\ncatchwork\\test1.cpp(8):\nPASSED:\n  CHECK( Stringification disabled by DISABLE_STRINGIFY )\nwith expansion:\n  \"\"\\\" == \"\"\\\"\n===============================================================================\nAll tests passed (2 assertions in 1 test case)\nUsed like this\ndefine CATCH_CONFIG_DISABLE_STRINGIFY\ninclude \"catch.hpp\"\nTEST_CASE(\"test\") {\n    auto test = std::string(R\"(\")\") == \"\\\"\\\";\n    REQUIRE(test);\n    CHECK(std::string(R\"(\")\") == \"\\\"\\\");\n}\ncatch.zip https://github.com/philsquared/Catch/files/1243200/catch.zip\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/issues/995#issuecomment-324134589,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojUP8vZhx5AtTcyBPamOGq1tLJ3TJks5sazK_gaJpZM4O9Qoh\n.\n. I managed to implement this locally but it requires the user to write the test name explicitly, instead of it being generated by INTERNAL_CATCH_UNIQUE_NAME. \nDo you think this is acceptable?\nIf so, then I'll send a PR.. Thanks, I didn't know about this macro. Can you tell me the difference between this and METHOD_AS_TEST_CASE?. Thanks. Is there a reason why REGISTER_TEST_CASE doesn't provide auto registration?\nAlso, can I call these macros on a header file?. Thanks. I'll try using one of these macros.. I made a PR with a fix. Notice however that CMake will rerun on every change to test files so it might become a little annoyance.. No, CMake is smart enough to see that the cache hasn't changed, only CTest\nconfiguration files.\nOn 12 Oct 2017 6:24 p.m., \"Martin Ho\u0159e\u0148ovsk\u00fd\" notifications@github.com\nwrote:\n@dvirtz https://github.com/dvirtz That also means that the entire\ncompilation will run from scratch, correct?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/issues/1035#issuecomment-336172265,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojftxsqwHtaUuKL7ix_wP4f998VXgks5sri9CgaJpZM4PwCA3\n.\n. What do you mean 'to the tests'?\nThe property means that the cmake configuration step depends on the given\nfiles.\nOn 12 Oct 2017 9:01 p.m., \"Martin Ho\u0159e\u0148ovsk\u00fd\" notifications@github.com\nwrote:\n\nI looked at the diff and set_property documentation and I wonder if it\nwouldn't be cleaner to add the dependency to the tests, rather than current\ndirectory.\nAdmittedly, this could cause CMake's dependency tracking to slow down\nsignificantly given enough tests, so it is more of a nitpick.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/pull/1044#issuecomment-336217932,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojb_rjckV6KiypI4PzOOlCX7ekDTJks5srlQDgaJpZM4P1XC_\n.\n. That's because it is a DIRECTORY property:\nhttps://cmake.org/cmake/help/latest/manual/cmake-properties.7.html#properties-on-directories\n\nOn 15 October 2017 at 18:34, Martin Ho\u0159e\u0148ovsk\u00fd notifications@github.com\nwrote:\n\nI am going to preface this with saying that I know just enough CMake to be\ndangerous.\nAnyway, I thought that we could do\nset_property(\n  TEST ${TestName}\n  APPEND\n  PROPERTY CMAKE_CONFIGURE_DEPENDS ${SourceFile}\n)\nto express that it is the test that depend on the source file, rather than\na directory, but I tested it and it doesn't work.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/pull/1044#issuecomment-336719663,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojX3gBWLDoKrrqvICU_APRPfGTUTbks5ssiXsgaJpZM4P1XC_\n.\n. Great. I was planning to go for it as well.\nPlease make a PR to include it along with ParseAndAddCatchTests.\n\nOn 15 November 2017 at 12:20, Gareth Sylvester-Bradley \nnotifications@github.com wrote:\n\nInspired by this post\nhttps://blog.kitware.com/dynamic-google-test-discovery-in-cmake-3-10/,\nI recently implemented robust dynamic discovery of Catch tests for CMake,\nwithout relying on parsing source code as implemented by\nParseAndAddCatchTests in #892\nhttps://github.com/catchorg/Catch2/pull/892.\nSee https://gist.github.com/garethsb/a01ed0dbd4977d439c16200640549935\nIt allows this for instance:\ncatch_discover_tests(my-target-test-runner TEST_SPEC these EXTRA_ARGS -r compact)\ncatch_discover_tests(my-target-test-runner TEST_SPEC a ~ab* abc EXTRA_ARGS -r compact)\n(using some of the  examples from Specifying which tests to run\nhttps://github.com/catchorg/Catch2/blob/master/docs/command-line.md#specifying-which-tests-to-run\n)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/issues/1099, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojSVzG6YUlBGedQZTUyzWcH6ikoX4ks5s2rrTgaJpZM4Qesj1\n.\n. Maybe contribute it to CMake then, like Google test is?\n\nOn 15 Nov 2017 3:04 p.m., \"Gareth Sylvester-Bradley\" \nnotifications@github.com wrote:\n\nMy gist is derived from code in CMake repo, licensed under BSD 3-clause\nlicence. Is it ok for inclusion in Catch2 repo? I am not a lawyer...\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/issues/1099#issuecomment-344586330,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojUrm9M7x_Swmh9mag4dxFmh56-Faks5s2uF3gaJpZM4Qesj1\n.\n. It seems like you need logging macros:\nhttps://github.com/catchorg/Catch2/blob/master/docs/logging.md\n\nOn 5 Dec 2017 6:01 p.m., \"Phil Nash\" notifications@github.com wrote:\n\nI think that was the case years ago - but I got a lot of feedback that it\nwasn't what was wanted, so I changed it.\nMost of the other reporters do capture, though.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/issues/1120#issuecomment-349350031,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojeebNKw9lUBAYM-j2WojhJNnmJJGks5s9WjYgaJpZM4Q0FVF\n.\n. I unified all the places where the default test spec was defined to one place. \nNow testSpec() always has filters so I added hasTestFilters() method to Config.\nI aligned the tests to check the new behavior.. Thanks!\n\nOn 9 Feb 2018 8:55 pm, \"Martin Ho\u0159e\u0148ovsk\u00fd\" notifications@github.com wrote:\n\nMerged #1179 https://github.com/catchorg/Catch2/pull/1179.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/pull/1179#event-1467279854, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojaeytaRb2HStwaBzpbdF8a61oneEks5tTJS0gaJpZM4R_Hl4\n.\n. Thanks!\n\nOn 9 Feb 2018 7:43 pm, \"Martin Ho\u0159e\u0148ovsk\u00fd\" notifications@github.com wrote:\n\nMerged #1180 https://github.com/catchorg/Catch2/pull/1180.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/pull/1180#event-1467154691, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AHTojeUuuyIEeLaDhPqg2VcQ_AY6H-bdks5tTIOxgaJpZM4R_MaD\n.\n. Thanks. A reference_wrapper is a nice idea.\nI started working on a PR which replaces virtual functions with CRTP and the matcher simply forwarding its input. Would you consider accepting that?\n\nIt already compiles, I'm just working on making sure the output stays the same from the builtin matchers.. PR #1554 opened. Is there a time estimation for 3.0?. ",
    "abijlani": "Oh wow, sorry, that was it. I feel so silly. \n. ",
    "RossBencina": "I understand that full test dependency ordering is maybe a lot of work. But it would be really useful to have some way to specify order in the code (eg. to test leaf modules before modules that use them).\nTo some degree test ordering can be handled by the --test command line option. Assuming my class tests begin /class/class-name to force A, B and C to be tested in that order I can do:\ntestexe --test /class/A/* /class/B/* /class/C/*\nWhat would be really useful is if I could set the default --test list in the code. Then I could force the standard tests to run in my desired (dependency-based) order.\nSomething like this, with a null terminated array of test spec strings;\n// tests run in left-to-right order, force leave classes to be tested first:\nCATCH_DEFAULT_TESTS( { \"/class/A/\", \"/class/B/\", \"/class/C/*\" } )\nDoes that sound like it might be an acceptable addition? If so I could look into implementing it. \nIt doesn't seem like it would be too hard to register a function that gets called to initialize the default filters, or to just have a default filters global.\n. I have retested with Martin's test case using the latest Catch single-file hpp (CATCH v1.0 build 3 (master branch)\nI can still reproduce the issue in MSVS2005 and MSVS2010\nThe issue appears to be caused by use of the /Wp64 flag (Detect 64-Bit Portability Issues). Disabling this flag gets rid of the warning.\nApparently Microsoft has deprecated the /Wp64 flag and is recommending /W4 instead, which does not produce this issue with Catch. However it would still be preferable to be able to use /Wp64 without this warning. Unfortunately my previous patch above doesn't seem to be relevant to Catch 1.0\nMore info about /Wp64 is here:\nhttp://stackoverflow.com/questions/7171295/why-is-wp64-deprecated\nFurther info:\nFrom my latest test with MSVC2005 and Catch 1.0 the warning is still displayed in both Debug and Release configurations of a command line project (see below).\nVisual studio lists the C++ command line as:\n/O2 /GL /D \"WIN32\" /D \"NDEBUG\" /D \"_CONSOLE\" /D \"_UNICODE\" /D \"UNICODE\" /FD /EHsc /MD /Fo\"Release\\\" /Fd\"Release\\vc80.pdb\" /W3 /nologo /c /Wp64 /Zi /TP /errorReport:prompt\n1>------ Build started: Project: catch148_msvc2005, Configuration: Release Win32 ------\n1>Compiling...\n1>catch_issue_148.cpp\n1>c:\\XXX\\catch.hpp(1107) : warning C4312: 'reinterpret_cast' : conversion from 'int' to 'ClassName ' of greater size\n1>        c:\\XXX\\catch.hpp(1243) : see reference to function template instantiation 'bool Catch::Internal::compare(T ,int)' being compiled\n1>        with\n1>        [\n1>            T=ClassName\n1>        ]\n1>        c:\\XXX\\catch.hpp(1191) : see reference to function template instantiation 'Catch::ExpressionResultBuilder &Catch::ExpressionLhs::captureExpression(const RhsT &)' being compiled\n1>        with\n1>        [\n1>            T=ClassName const &,\n1>            RhsT=int\n1>        ]\n1>        ..............\\XXX\\catch_issue_148.cpp(9) : see reference to function template instantiation 'Catch::ExpressionResultBuilder &Catch::ExpressionLhs::operator !=(const RhsT &)' being compiled\n1>        with\n1>        [\n1>            T=ClassName const &,\n1>            RhsT=int\n1>        ]\n1>Linking...\n1>Generating code\n1>Finished generating code\n1>Embedding manifest...\n1>Build log was saved at \"\"\n1>catch148_msvc2005 - 0 error(s), 1 warning(s)\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n. +1 for AppVeyor for Windows testing, I've seen it used to great effect here: https://github.com/nlohmann/json\n. Still seeing it. It fails with master.\nSteps to reproduce are:\n- Run the following from the command line:\n\ngit clone https://github.com/philsquared/Catch.git\ncd Catch\\projects\\CMake\ncmake -G\"Visual Studio 12 2013\"\nstart Catch.sln\n- Once MSVS has launched, click the run button.\n\nResults in the same error as above:\n\n1>------ Build started: Project: ZERO_CHECK, Configuration: Debug Win32 ------\n1>Build started 31/12/2015 3:14:05 PM.\n1>PrepareForBuild:\n1>  Creating directory \"Win32\\Debug\\ZERO_CHECK\\ZERO_CHECK.tlog\\\".\n1>InitializeBuildStatus:\n1>  Creating \"Win32\\Debug\\ZERO_CHECK\\ZERO_CHECK.tlog\\unsuccessfulbuild\" because \"AlwaysCreate\" was specified.\n1>CustomBuild:\n1>  Checking Build System\n1>  CMake does not need to re-run because C:/catch/Catch/projects/CMake/CMakeFiles/generate.stamp is up-to-date.\n1>FinalizeBuildStatus:\n1>  Deleting file \"Win32\\Debug\\ZERO_CHECK\\ZERO_CHECK.tlog\\unsuccessfulbuild\".\n1>  Touching \"Win32\\Debug\\ZERO_CHECK\\ZERO_CHECK.tlog\\ZERO_CHECK.lastbuildstate\".\n1>\n1>Build succeeded.\n1>\n1>Time Elapsed 00:00:02.29\n2>------ Build started: Project: SelfTest, Configuration: Debug Win32 ------\n2>Build started 31/12/2015 3:14:08 PM.\n2>InitializeBuildStatus:\n2>  Creating \"SelfTest.dir\\Debug\\SelfTest.tlog\\unsuccessfulbuild\" because \"AlwaysCreate\" was specified.\n2>CustomBuild:\n2>  Building Custom Rule C:/catch/Catch/projects/CMake/CMakeLists.txt\n2>  CMake does not need to re-run because C:\\catch\\Catch\\projects\\CMake\\CMakeFiles\\generate.stamp is up-to-date.\n2>ClCompile:\n2>  ApproxTests.cpp\n2>  BDDTests.cpp\n2>  ClassTests.cpp\n2>  ConditionTests.cpp\n2>  ExceptionTests.cpp\n2>  GeneratorTests.cpp\n2>  MessageTests.cpp\n2>  MiscTests.cpp\n2>  PartTrackerTests.cpp\n2>  TestMain.cpp\n2>C:\\catch\\Catch\\projects\\SelfTest\\TestMain.cpp(458): error C2661: 'Catch::AutoReg::AutoReg' : no overloaded function takes 5 arguments\n2>  TrickyTests.cpp\n2>  VariadicMacrosTests.cpp\n2>  EnumToString.cpp\n2>  ToStringPair.cpp\n2>  ToStringVector.cpp\n2>  ToStringWhich.cpp\n2>  ToStringTuple.cpp\n2>  Generating Code...\n2>\n2>Build FAILED.\n2>\n2>Time Elapsed 00:00:22.76\n3>------ Skipped Build: Project: ALL_BUILD, Configuration: Debug Win32 ------\n3>Project not selected to build for this solution configuration \n. Intellisense error gives more details:\nIntelliSense: no instance of constructor \"Catch::AutoReg::AutoReg\" matches the argument list\n            argument types are: (void (), const char [19], const char [1], Catch::SourceLineInfo, Catch::NameAndDesc)   c:\\catch\\Catch\\projects\\SelfTest\\TestMain.cpp   458\n\nThe problem seems to be with the CATCH_CONFIG_VARIADIC_MACROS version of INTERNAL_CATCH_REGISTER_TESTCASE in catch_test_registry.hpp:\n```\ndefine INTERNAL_CATCH_REGISTER_TESTCASE( Function, ... ) \\\n   Catch::AutoReg( Function, CATCH_INTERNAL_LINEINFO, Catch::NameAndDesc( __VA_ARGS__ ) );\n\n```\nIt looks like the Function parameter to the macro INTERNAL_CATCH_REGISTER_TESTCASE is getting all three of the parameters (i.e. (void (), const char [19], const char [1]) not just the first one as intended.\nMaybe you're using a non-standard variadic macros form?\n. It seems to boil down to the following failing in MSVC:\n```\ninclude \nvoid internal_foo(int x)\n{\n    std::printf(\"%d\\n\", x);\n}\ndefine INTERNAL_CALL_FOO(X, ...) internal_foo(X)\ndefine CALL_FOO(...) INTERNAL_CALL_FOO(VA_ARGS )\nint main(int argc, char* const argv[])\n{\n    CALL_FOO(42, 0, 0);\n}\n```\nFails compilation with:\n2   IntelliSense: too many arguments in function call   c:\\testmain.cpp 12\nError   1   error C2660: 'internal_foo' : function does not take 3 arguments    c:\\testmain.cpp 12\nThe same code works fine with clang and gcc on godbolt and ideone.\n. It turns out that the desired behavior is not supported by MSVC. This was previously documented in (now deleted) Microsoft Connect issue 380090 [1]. It has been discussed in the context of many projects:\nhttps://www.google.com/search?q=380090+va_args\nThere is a discussion of workarounds here:\nhttp://stackoverflow.com/questions/9183993/msvc-variadic-macro-expansion\nI have not read through the workarounds to evaluate how complex the fix would be.\nHow important is use of __VA_ARGS__  here? With Catch, perhaps the best workaround may be to disable use of this idiom with MSVC?\n[1] Thanks to glenfe_ on freenode ##c++ for this info. \n. A simple fix might be to change the definition of REGISTER_TEST_CASE to the following, which has the same form as the other registration macros:\n```\ndefine REGISTER_TEST_CASE( function, ... ) INTERNAL_CATCH_REGISTER_TESTCASE( function, VA_ARGS )\n```\nThis compiles fine with MSVC 2013.\n. The current master now builds with MSVC2013 without error.\n. @philsquared please provide a close reason and/or update #511 to indicate what your requirements are for Windows CI.\n. @philsquared would you like me to prepare a new PR for this against master?\n. @horenmar I could, but first I have a meta-question (apologies for the tone, I don't mean to be snarky): do you have the power to merge it? Is this a sign that the development process has changed? I have done quite some work in the past on improvements to Catch, only to have my first (minor) PRs ignored or rebuffed (not this one, but others related to basic code clean-up and performance optimisation). I would like to contribute to Catch if it's going to have a more open and streamlined development process, but I'm still feeling burnt from my previous experiences.. @philsquared @horenmar No worries. Good to hear that things are moving. It will be a week before I have time to look at this, but after that I'll prepare a new PR.. @scross99 This ticket seems to be about a performance issue. How about renaming this ticket \"Lots of assertions (e.g. in loops) are slow\"\n. @kirbyfan64 you got my attention with the claimed performance increase. Lazy stringifying makes sense to me. Travis CI seems to be failing on the current PR. What are your plans for the patch? I'd be interested in helping you test and improve it if you plan to keep working on it.\nLazy stringifying aside, I noticed a couple of potential perf issues with the current master:\n- ExprComponents::op could be a const char *, and op comparisons could be reworked to always use pointer comparisons rather than string comparisons.\n- C++11 versions of setLhs and setRhs could tale string parameter by r-value reference and move into ExpComponents::lhs, rhs, instead of copying.\n. The patch by @kirbyfan64 takes the approach of moving a lot of string conversion into one place, and then avoiding generating strings unless needed. An alternative approach is to improve string handling.\nThere are numerous opportunities to improve string handling performance in Catch. For example, static file names don't need to be std::string, and string concatenation with operator+ is slow with multiple operands. \nHere is a rough-cut of some improvements:\nhttps://github.com/philsquared/Catch/compare/master...RossBencina:rb-master-optimized?expand=1\nI get roughly 50% of the performance improvement given by @kirbyfan64's patch. Combining the patches is possible, but since @kirbyfan64's disables most string generation, it disables most of the optimizations in my patch, so there is no aggregate benefit unless some strings will be generated.\nI likely won't submit this as a PR until Phil merges some of the smaller dependent changes. In my view, much of this improvement should be done irrespective of the status of the lazily stringify patch.\n. Some general observations on this patch:\nThe performance gain comes from a combination of two things:\n1. Making expression-to-string conversion completely lazy (previously, the values were eagerly converted to strings).\n2. Only calling reconstructExpression() when a check fails ((data.resultType == ResultWas::ExpressionFailed) in ResultBuilder::build().\nAbout half the performance improvement can be had by only doing (2). (1) serves to move all of the expensive toString() conversion into reconstructExpression().\nN.B. I suspect that in some cases Catch always needs the expression strings (e.g. when using --success).\n. @lightmare this PR (#562) reduces the required allocations to 2 (1 for LHS, 1 for RHS), this is a massive improvement over master. Master incurs a lot of non-essential allocation overhead from string concatenation due to using binary operator+, and std::ostringstream (not to mention the cost of using ostringstream.) But see also my comment here: https://github.com/philsquared/Catch/issues/556#issuecomment-201991490\n@philsquared: what are your thoughts on this type-erasure patch? Are you prepared to entertain moving away from string-based expression capture?\n. I think we should aim to optimize Catch 1 as much as possible. On the other hand I agree with @lightmare that the type-erasure approach is not viable as it changes the semantics.\nI have a bunch of performance improving patches that I can submit. @horenmar would you prefer one big PR, or small, clearly isolated ones that do one thing?. Here's the proposed fix:\nhttps://github.com/RossBencina/Catch/commit/18f18ae830ba95089ef0d734802292c332b25e61\n. @philsquared If the code really is !thisShouldAlwaysBeFalse(), writing thisShouldAlwaysBeFalse() == false will not give much benefit to the user when the expression is decomposed and printed. On the other hand !(getSomething() == 42) would be better written in a way that allows it to be decomposed. I guess that printing the warning makes some sense. I'm not sure which way is better though.. Doesn't this need a virtual dtor?\nvirtual ~AnyTypeHolderBase() {}\n. This Decay implementation is incomplete. I had problems with two cases: std::atomic<T> and function pointers (couldn't compare a function with a function pointer).\n. I think there are cases where Catch can be made to print expressions even when they don't fail (e.g. --success and possibly the JUnit reporter). Therefore always suppressing expression building for non-failed tests might be incorrect.\n. ",
    "acidtonic": "I too desire to have this functionality. I think it's as simple as allowing a test definition to contain a third field of pre-requisites.\nInstead of...\nTEST_CASE(\"sorting\", \"test basic sort routines\");\nTEST_CASE(\"container\", \"Tests the base containers\");\nTEST_CASE(\"container_sorting\", \"Tests the containers sorting\");\nwe could instead rewrite that as\nTEST_CASE(\"sorting\", \"test basic sort routines\");\nTEST_CASE(\"container\", \"Tests the base containers\");\nTEST_CASE(\"container_sorting\", \"Tests the containers sorting\", \"{container,sorting}\");\nWhere the added third parameter is simply the name of test cases that must pass without failure before this testcase will run.... Thus container_sorting tests would only be ran if the test label \"container\" and \"sorting\" had no failures.\nI too would be interested in implementing this feature if it's not a priority.\n. I can also help test the unix implementation of this... preferably without bringing boost into the picture at all. My projects are pure C++11 these days and catch fits that discipline perfectly. If you do head the boost direction I'd be willing to put effort forth to help provide a pure C++ runner as an alternative for others like myself. Loving Catch by the way! Keep up the good work.\n. Also since I forgot to mention, none of the test cases were named the same or tagged the same.\n. Not really... started with a .cpp but I disliked including any .cpp files as it's generally bad practice ;)\nI didn't want to create a whole class for the tests or anything so I just included the few headers. I didn't think it would matter if it were .cpp or .hpp if all it has is an anonymous function for each test.\nI'll go correct this and thanks a bunch for the help :)\n. ",
    "crown-hill": "It took me a while to find time to setup GetHub on my system, but I've just sent a pull request with my proposed fix.\n. ",
    "hajimehoshi": "Thanks, I'll check that!\n. ",
    "torarve": "OutputDebugStringA() is defined in the windows headers, which are not included by catch.hpp. Personally I have used one of the following:\n1) Including windows.h or a precompiled header referencing windows.h in each .cpp file including catch.hpp. This has usually been done automatically by the IDE.\n2) Appending the line: #include <windows.h>, just after the line #define CATCH_PLATFORM_WINDOWS in catch.hpp\nOf the two, I prefer the last one. I found this page: http://social.msdn.microsoft.com/Forums/en-IE/vcgeneral/thread/f34c8b0e-59a1-4abc-86de-319ee748c9d7 that suggests that the following code should also do the trick:\n``` cpp\nif defined(CATCH__PLATFORM_WINDOWS) && defined(WINDOWS)\n::OutputDebugStringA( text.c_str() );\n\nelse\n// !TBD: Need a version for Mac/ XCode and other IDEs\nstd::cout << text;\n\nendif\n```\nI haven't been able to test this yet, so I can't guarantee that it works or event compiles.\n. Great! Thanks for fixing this so quickly.\n. ",
    "singbird": "Yes, method 2) did the trick for me. Thanks!\n. Yes, this seems to be fixed. Thanks!\n. ",
    "Bautastein": "Sorry, it seems the first line under pt. (6)  was filtered away. I don't have experience with this. I'll try again:\n```\nimport \nimport \"catch_with_main.hpp\"\n```\nDid this work?\n. Yet another comment: OS X version is 10.6.8, base SDK is 10.6. Don't know if that makes any difference. Anyway, all build settings are standard, unmodified, Debug configuration.\n. Hi!\nSorry I haven't responded to your previous e-mail. I'll give it a try\nas soon as I get the chance, and see if it works!\nThanks... :)\nPer\nDen 13:33 28. april 2012 skrev Phil Nash\nreply@reply.github.com\nf\u00f8lgende:\n\nI finally got a chance to look at this. I haven't (yet) been able to get an older version of Xcode to reproduce the issue for myself, but from your description it actually looks fairly straightforward.\nSo I've added a bit more to conditionally compile __unsafe_unretained. Hopefully that should be enough for you now?\nIf you're still watching could you give the latest commit a try and see if it does it you?\nThanks again.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/philsquared/Catch/issues/77#issuecomment-5396253\n. Hi - Sorry, I found out I was lacking so much with my old XCode\nversion that I upgraded it before I got to test the new version of\nCatch. I have kept a backup of the old system, and have now tried the\nnew version of catch (downloaded by pressing the \"zip\" icon on your\nGithub page), with the old version of XCode.\n\nNow I get a new compiler error:\ncatch_test_case_registry_impl.hpp:35:22:{35:17-35:22}: error: no\nmember named 'cerr' in namespace 'std' [2]\nThis is line 35 in the file.\nI tried to insert #include  at line 15 in the same file, and\nthen it compiled fine, and everything seems to work! :)\nPer\n2012/5/10 Phil Nash\nreply@reply.github.com:\n\nAny news?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/philsquared/Catch/issues/77#issuecomment-5636087\n. Yes, that's ok. Sorry I haven't gotten back to you, I saw the issue as\nresolved a few weeks ago, and thought you had closed it already.\n\n2012/5/25 Phil Nash\nreply@reply.github.com:\n\nI'm going to close this for now as I believe it is addressed. Obviously if there are still any issues for you feel free to reopen/ open a new issue.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/philsquared/Catch/issues/77#issuecomment-5936848\n. \n",
    "klmr": "Testing the __cplusplus macro should work \u2013 at least on some new compilers. Maybe it\u2019s fair enough to disregard the others, though. What C++11 really lacks is a preprocess query for features (__HAS_NULLPTR \u2026). Now I\u2019m wondering if there actually was such a proposal \u2026\n. Sorry for the long pause. Adding the toString overload in the Catch namespace works, but only if I put it in the catch.hpp file. If I add it in my tests.cpp file (after the catch include), it fails to compile with the same error.\nThis isn\u2019t too surprising though: If I declare the function before including the header, it works as well but would be odd enough in production code to necessitate at least an explanatory comment.\n. Yes, I  have it in the Catch namespace.\nThe reason why it works that way (the way I make it out): since there exists an overload of toString  that is a template, the order of definition actually plays a role during overload resolution (in particular, if there\u2019s an overload that\u2019s an exact match before the point of instantiation, other overloads, defined after the point of instantiation aren\u2019t considered). I can\u2019t find a reference for that now but I vaguely remember a GotW about that, and Johannes mentioned something similar in a drive-by comment on Stack Overflow. Note: I\u2019m not sure whether this is applicable here but it does explain the compiler\u2019s behaviour. In particular, the compiler shows the following (sanitised) error traceback:\n\ncatch.hpp: In instantiation of std::string Catch::Detail::makeString(const T&) [with T = std::nullptr_t]:\ncatch.hpp:1335:   required from std::string Catch::toString(const T&) [with T = std::nullptr_t]\ncatch.hpp:1581:   required from Catch::MutableResultInfo& Catch::MutableResultInfo::captureExpression(const T1&, const T2&) [with Catch::Internal::Operator Op = (Catch::Internal::Operator)0u; T1 = base::ptr<int>; T2 = std::nullptr_t; Catch::MutableResultInfo = Catch::MutableResultInfo]\ncatch.hpp:1622:   required from Catch::MutableResultInfo& Catch::Expression<T>::operator==(const RhsT&) [with RhsT = std::nullptr_t; T = const base::ptr<int>&]\ntests.cpp:23:   required from here\ncatch.hpp:1322: error: ambiguous overload for operator<< in oss << value\n\n\n\u2026 but yes, it works with the last update (caveat: see pull request #88).\n. ",
    "jweyrich": "Wow, you're quick :) It's fixed. Thank you.\n. A special reason for not using #pragma once? There's no need to come up with these long names. It's non standard, but most current compilers support. And -pedantic, -ansi, don't throw any errors or warnings.\n. Interesting discussion. I'm favourable to using SIGTRAP as it would kill a process that does not handle the signal itself and is also not running under a debugger. Moreover, raise(int) is compliant to C89, C99, POSIX.1-2001. Though I believe non-POSIX platforms do not support SIGTRAP.\n. Nice solution @philsquared! :+1:  Maybe Catch could provide a std::ostream named cnull and use it when CATCH_CONFIG_NOSTDOUT is defined? Or it would be totally out of scope / non-sense? Not a big task for the user anyway.\nFor example:\nstd::ostream cnull(NULL);\nstd::wostream wcnull(NULL);\nAccording to the standard, these streams will ignore any writes since their streambufs are set to null pointers. I did find a related Q&A on StackOverflow where someone cared to cite the relevant parts from the standard.\nA possible implementation:\n```\n    std::ostream& cout() {\nifdef CATCH_CONFIG_NOSTDOUT\n    static std::ostream cnull(NULL);\n    return cnull;\n\nelse\n    return std::cout;\n\nendif\n}\nstd::ostream& cerr() {\n\nifdef CATCH_CONFIG_NOSTDOUT\n    static std::ostream cnull(NULL);\n    return cnull;\n\nelse\n    return std::cerr;\n\nendif\n}\n\n```\n. ",
    "mgeier": "Perfect, all warnings are gone!\n. Hi Phil.\nI just rebased my pull request on your current master branch.\nCould you please add this to your repo?\n. A few years have passed ... in the meantime, all warnings have disappeared, that's great!\n. ++\n. Instead of rm -f you could write $(RM).\n. catch_self_test is not \"phony\", it's an actual file!\n. You can remove this line completely when you also remove catch_self_test.cpp from SOURCES.\nThen everything will be done nicely by the implicit Makefile rules (in this case, no catch_self_test.o will be generated).\n. This might be a matter of taste, but I prefer:\nOBJECTS = $(SOURCES:.cpp=.o)\n. ",
    "iamleeg": "Wait...the raise pun or the try pun? Anyway, it looks like it works; is the '0 test cases failed' output intentional (the assertion didn't fail because the test vomited before it got there)?\n$ obj/classy-tests\n[Started testing]\n[Started group: 'test case run']\n[Running: Main/basic]\nclassy-tests.mm:8: Unexpected exception with message: '@\"Attempt to init component without a context. In -[WOComponent initWithContext:]\"'\n[End of group: 'test case run'. 0 test cases failed]\n[Finished: 'Main/basic' 1 test case failed (1 assertion failed)]\n[Testing completed. 1 test case failed (1 assertion failed)]\n. Sorry, had a failure moment and created the change against the wrong version. Commit #28717bf is the required fix.\n. ",
    "mKlus": "Hi Phil,\nGood point on the difference of '==' when in CHECK\\REQUIRE or not. I like your other solution :)\nThanks,\nMarek\n. The only small issue that I see in this is that you have to write:\n\nTEST_CASE(\"StringCompare\", \"Compare 2 strings\")\n{\n    char * sz1 = \"testme\";\n    char * sz2 = \"test\";\n    CHECK_THAT(sz1, Catch::Matchers::Impl::StdString::Equals(sz2));\n}\n\nor add \n\nusing namespace Catch::Matchers::Impl::StdString;\n\n. Hi Phil,\nthanks for your comment. \nI tried to explain why I need the macro in #92. I haven't thought about using INFO before. Maybe that can solve my problem.\nThanks,\nMarek\n. +1\nWould like to see Catch in vcpkg updated regularly.\nNot sure what it takes to get it updated but looking at this commit it seems quite simple\nhttps://github.com/Microsoft/vcpkg/commit/7c89415a6f4ee418e912744fb2a519f62c22f163\n. Any moment from between now and 2030 I guess. :-)\nI was actually quite surprised that it's still not supported in .Net 4.6.2.\nIt would be nice if we at least have a define or a command option which we can disable the XML 1.1 with.... Hi Phil, thanks for looking into this. Would you be able to rebase (or merge with) the XML1_0 branch on top of v1.7.1 or master?\nHad a quick look at the changes and the below code looks like it should call writeDeclaration() method instead of writing the declaration itself?\nXmlWriter( std::ostream& os )\n        :   m_tagIsOpen( false ),\n            m_needsNewline( false ),\n            m_os( os ),\n            m_xmlVersion( XmlEncode::_1_0 )\n        {\n            *m_os << \"<?xml version=\\\"1.1\\\" encoding=\\\"UTF-8\\\"?>\\n\";\n        }. Yeah I tried merging it myself but not 100% sure that I did it correctly :)\nI have couple more changes in my repo so needed to be careful... \nThe 2 changes I have are:\n- write stylesheet reference to the xml (xml reporter and xml writer change)\n- write description and tags attributes to the TestCase and Section elements (xml reporter change)\nI think you could consider those changes to be added to the official Catch. The stylesheet would have to be somehow optional of course.. RE: to what stylesheet?\nTo a user/developer provided stylesheet. One possibility could be adding a parameter to the command line so you can pass in a stylesheet to the xml reporter. Probably not best idea.\nOR\nMake it possible to extend xml reporter so I can just write the stylesheet reference to the xml in the extended reporter.\nI've attached the style sheet I use to transform the xml into html. \nYou can then just open the xml in browser (Chrome, IE...) and it will render as html.\nThe xml will have the below in the header. \n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"catch.xsl\"?>\n<Catch name=\"xyz\">\n...\ncatch.zip\n. Hi Phil, sorry... forgot to reply back on this...\n1.7.2 works great. Thank for that!\nNow we only need some sort of solution for 815 ;)\n. Section already has a description in the rprort and it doesn't need tags (since it doesn't support tags).\nI've created PR #814 for this.. When I wrote the SET_UP and TEAR_DOWN macros in our version of catch my motivation was to:\n- make it easier for developers to setup their tests (no need to write their own main)\n- report failures during setup and don't runt any test if setup fails.\nThanks for considering this. I could share my code or send you PR but it's not really great design so I have a feeling that you'll write it in completely different way.. ",
    "CatchBot": "Interesting.\nSince this is an unusual case I think using INFO is a good fit (you can pass it a SourceLineInfo instance).\nUnfortunately I think your REGISTER_TEST_CASE macro is broken by recent internal changes\nSent from my iPhone\nOn 24 May 2012, at 00:20, mklus82reply@reply.github.com wrote:\n\nOne of our project has all test cases written in script files (one script file = one test case = one ItestCase instance).\nI have created a class derived from ITestCase to run the scripts (run in invoke method) and then use the CHECK_DFL macros (request #91) to check the result of the script. I pass the script file name as file, possible failure in script as line, the failure description in exprDescription.\nTo register the instances of ITestCase derived class I have added macro\n\ndefine REGISTER_TESTCASE( test, name, desc, file, line ) Catch::Context::getTestCaseRegistry().registerTest(Catch::TestCaseInfo(test, name, desc, Catch::SourceLineInfo(file, line) ));\n\nIf it's something others are interested in, the macro could be added to your catch library.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/philsquared/Catch/issues/92\n. \n",
    "krvajal": "It seems that this was fixed a long time ago. I will close this now. Did you forget the closing namespace bracket? I tested it on gcc and works just fine. I am also guessing that the compiler is the visual c++ one. . In Windows it works just fine for me without the /RTCc flag.. @philsquared any updates on this??. Did you added the \n#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file\nat the top. I am asking because maybe it is not visible on the screenshot. Also can you let us know what version of XCode you are using.\n. I tested in Version 8.2.1 (8C1002) of XCode  and it works just fine.. @horenmar can you check this please?. Can you attach the full xcode project in a zip file so i can try it. Your project indeed does not work but mine worked with your code. So this means is a project configuration error. I am attaching here my project and let me know if it works for you. \ntest_catch.zip\n. Glad to help. As this not a catch issue will close this now.. ",
    "PureAbstract": "Speedy work indeed!\nAs you've figured out, I'm using gcc (4.2) in objective-c++ mode\nsingle-include version of Catch @ 78372d0, dated 2012-06-06 08:06:40 (which is the current head as I write this)\nSounds like it's a compiler issues. I can't do much about not using anonymous enums (since I'm using Cupertino flavoured headers ;-), but at least there's a workaround.\n. If you have a proper editor, M-x whitespace-mode is your friend ;)\nAlternatively, you can try running:\n git config --global core.whitespace tab-in-indent,blank-at-eol,space-before-tab\n(there are several other options that you may care to investigate)\n. This will break for anyone who's using a standards-compliant C++ compilers, where wchar_t is a built-in type rather than a preprocessor definition.\nYou probably want to have some #ifdef's based around your compiler's version macros or somesuch.\n. IIRC, Boost does quite a bit of heroics to figure out if it needs to define BOOST_NO_STD_WSTRING - and I wouldn't recommend reimplementing that wheel.\nI'd be inclined to use something like CATCH_CONFIG_NO_WSTRING and let users who don't have (or don't want) wstring support define it or not as they see fit.\n. FWIW, in C++11, basic_streambuf's destructor is noexcept - as is Catch::StreamBufBase's destructor.\nOf course, noexcept and throw() aren't (quite) the same thing - so adding throw() here may break things on other compilers sigh.\nI'm guessing, but this strikes me that the compiler is being overly enthusiastic about Doing The Right Thing, where the MS library is doing the wrong thing...\n. @philsquared  - 17.6.5.12 (in particular para 4) which starts with Destructor operations defined in the C++ standard library shall not throw exceptions. Every destructor in the C++ standard library shall behave as if it had a non-throwing exception specification.\n@martinmoene - that's a reasonable rule of thumb, but it's a little more complex than that.\nIn particular, if some type T has a base or member sub-object with a throwing destructor, then T's destructor is also throwing (unless declared otherwise).\n[and here, I wander off on a tangent]\nI sat in the WG21 CWG meeting at Rapperswil, and argued against this change. Whilst I fully agree that throwing dtors are generally a bad practice, I think this change did a dis-service to the C++ community. Code which previously had perfectly well-defined semantics now terminates the program with no chance of recovery. If we'd had this rule 25 years ago, I'd have been all for it - but there's a lot of code out there that's likely to break because of it.\n. @philsquared The only way to behave as-if you have a non-throwing exception specification is to have one (be it explicit or otherwise). It's pretty easy to detect:\n``` C++\ntemplate\nstruct has_noexcept_dtor_helper {\n    T member;\n    has_noexcept_dtor_helper() noexcept;\n};\ntemplate\nstruct has_noexcept_dtor {\n    static const bool value = noexcept(has_noexcept_dtor_helper());\n};\nREQUIRE( has_no_except_dtor::value );\n```\n. ack - that was to the previous comment :-)\nKind of. The stdlib function MUST be noexcept(true).\nIf a vendor choses to implement streambuf in such a way that it would implicitly be noexcept(false), then I don't see a way for them to satisfy the requirement without marking it explicitly noexcept(true).\n. @philsquared Functions outside the standard lib can do whatever they chose.\nA dtor without an explicit exception-specification will be noexcept(true) unless any of the base/member sub-objects have a noexcept(false) specification.\nThe behaviour isn't just calling 'terminate' if an exception is thrown - it also affects exception specifications of containing types (which is where this all got started ;-).  And as my code snippet demonstrates, the noexcept operator makes it pretty easy to determine if an expression is noexcept or not.\nSo yes, as far as I'm concerned, it's the standard being vague for the sake of being vague -  I suspect the reason is that it saves implementors having to explicitly write noexcept after every dtor...\n. @martinmoene It's actually 15.4 para 14 that spells this out (albeit in a way that requires \"a close and careful reading\").\n. I think this falls under 'necessary, but not sufficient' - the solution is a little more complex (isn't it always?) sigh\nI've been tweaking the vector specialisation of StringMaker (specifically, adding allocator support) - see my vector_to_string branch https://github.com/PureAbstract/Catch/commit/0dbcf218c353e801d4fa26d14696e81f6b832cad\n(FWIW, I intend to send a pull request for that once I've finished this essay...)\nIf you provide an overload for Catch::toString for a user-defined type, it's not seen by StringMaker<vector> (since when that gets instantiated, it can only make use of overloads of toString which are visible when the StringMaker specialisation is defined (rather than instantiated).\nI'm not making this very clear here - take a look at https://gist.github.com/PureAbstract/6601192 and it may be more apparent what's going on.\nI think I've got  a pretty good handle on what needs to happen, but probably won't get the time for a few days.\nMy current thinking is we need (in this order):\n1) A declaration (but NOT definition) of the primary toString<T> template.\n2) Declarations of the non-template toString overloads (since they're non-templates, it's the declarations rather than the definitions that are important - so there's no harm in defining them here)\n3) Declare the StringMaker primary template, and any specialisations that make use of toString.\n4) Finally, DEFINE the primary toString<T> template.\n...and to reliably provide stringification, users need to specialise Catch::StringMaker rather than overloading toString\nIf I may quote the C++ Standard (14.7.3/p7):\n\nWhen writing a specialisation\nBe careful about its location\nElse to make it compile\nWill be such a trial\nAs to kindle its self immolation\n. In commit https://github.com/PureAbstract/Catch/commit/d6f23a9a36cf008b870a2d7c51e422dc209d3241 of https://github.com/philsquared/Catch/pull/198, I've hoiked the definition of rangeToString to after all the overloads of Catch::toString - which helps with the toString( vector ) case - but I'm still thinking we also need the definition of toString<T> to be after the overloads.\n. > Thanks for all the input, Andy\n\nNo problem - thanks for Catch :-)\n\nMy heart sinks every time 14.7.3/p7 is quoted!\n\nI've been able to recite the limerick from memory for at least a decade now - what's worrying is that I can now also do the same thing with the paragraph number... \n\nWhat makes this stuff so fiddly is the rules are so vague and the compilers seem intent on creating a false sense of security.\n\nI wouldn't describe the rules as vague - quite the opposite. They're just impenetrable (probably why CWG spend so much time in silent contemplation...). That compiler and library vendors all seem to have read them slightly differently is , well, 'interesting'...\nIn a perfect world, it'd be nice to have users be able to overload toString for their type (since it's a bit less boiler plate than writing a StringMaker) - but I don't see a way around that with the current mechanism. (Aside from declaring user provided overloads of Catch::toString before before including the catch header, but that may be problematic for templated types. I'm pretty sure everyone (modulo VC6 - aka 'VC98') gets template partial specialisation right these days, but I'm not sure that partial ordering of function templates is in such a robust state.\nI also considered fully qualifying the calls to toString in rangeToString - I'm currently somewhat ambivalent about allowing UDL to find it.\nI'm probably going to add allocator support for basic_string at some point - but need to have a think about how to do it. (In particular, is it reasonable to do it for strings whose traits_type isn't std::char_traits<CharT>)\nI, too, shall ponder some more!\nCheers\n. Hindsight says I should have done this as two separate commits. Ah well... I can split it and resubmit if you like.\n. See also discussion at https://github.com/philsquared/Catch/pull/195\n. The intent was (is) that rangeToString can be used to stringify any sequence (std::list, std::array, etc) relatively easily - and moving the defintion to the end of the file means it can take advantage of any overloads of toString that have already been declared.\nSadly, It doesn't fix the \"problem\" that users need to specialise StringMaker rather than overloading toString though... :(\n. In which case, it's most likely a problem with your core.autocrlf setting.\n. > core.autocrlf is set false \"commit as-is\"\nThat's what's causing the EOL problem @martinmoene highlighted.\nSince this is a multi-platform project, you want it set to either true or input (The latter is my preference, YMMV)\n. >  I didn't see anything in the docs about using unix-style endings\nIt's the normal convention for multi-platform projects - and has been for a long, long time.\n\n\"DOS\u2013Unix end-of-line mismatch\" which doesn't help at all\n\nI disagree - it told me exactly where your problem was, so I provided guidance on how to fix it. You're welcome.\n\nI expected this to be a friendly project to work on!\n\nIt is; at least two people have donated their time to help improve the quality of your contribution - I'd say that was pretty friendly of them.\n. > But don't bitch at people who are new to the project \nBoth @martinmoene and myself have tried to help you out - and we're thanked by being accused of \"bitching\" at you?You're the one that's doing the bitching - people are trying to help you out, and all you do is whine about it. (And no, this time around you're not misreading my tone - you've shown yourself to be an immature, ungrateful twunt, and I shall treat you as such)\n. FILE gives you a string literal, with the potential for all sorts of\nhavoc:\n\"../src/foo  bar ++ baz   xyzzy.cpp;[123]\" is highly unlikely - but\ncertainly possible.\n. print became a function in Python 3.0; in the 2.x series, it was a keyword and didn't need the parens.\n. > I know tou want to stick to (ancient) C++98\n'Ancient' it may be (although I don't know what that makes me) - but it's still very widely used in real-world production systems.\n. Not a direct response, but you can save yourself quite a bit of boilerplate by eliminating the vector, and replacing your for loop with something like:\nC++\nfor ( auto& el : data )\n        {\n            SECTION(\"validate\")\n. @Kosta-Github You could; or you could just initialise the vector directly;\nC++\nstd::vector<validator_element> elements {\n            validator_element(\"T\",300.0,\"D\",9.4*mm,\"P\",24.173705*1e6),\n            validator_element(\"T\",300.0,\"D\",9.4*mm,\"O\",115.28612/mm),\nbut I don't see a useful reason for copying everything into a vector just to iterate over it.\n. In which case, pass &str[0] - which will give you a char * for non-const strings.\n. If you're constrained to C++03, you can implement begin and end easily enough, and then use:\nC++\nfor( validator_element *it = begin(data) ; it != end(data) ; ++it ) {\n...\n```\n. @Kosta-Github It is in C++11.\n. @ibell \nI meant to add:\n```\ntemplate\nT *begin( T (&array}[N] ) { return array; }\ntemplate\nT *end( T (&array}[N] ) { return array+N; }\n```\nWhilst std::begin and std::end aren't part of C++03, there's no good reason why they shouldn't work.\n. His target toolset has actually been stated to be C++03... \nThe cleanest C++03 solution would probably be remove the std::strings altogether; make the in1,in3 and in5 members of validator_element char *, and do the casting in the constructor.\n. I don't think it's 440a470 - I think it's probably e091018514bc7d63e672b360aff0df1340f5ce13 (which dumps the pointer as a sequence of bytes (and, as the comment in the code says \"does not consider endian-ness\"....)\n. > I realize this is an oldish MS compiler here, I just can't tell how old\nFWIW, based on the screen log you show, Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 16.00.30319.01 looks like it's the compiler from VS2010.\n. As Bjarne says is so many words in Design and Evolution, it's by design that private and public control accessiblity, and not visibility - so #define private public shouldn't change the semantics of your code. Adding friend declarations, on the other hand, can do so in subtle ways. (Yes, there's a rule that says Thou Shalt Not Define Preprocessor Macros With Keyword Names, but I've yet to find a compiler that does anything other than what you expect in this circumstance.)\nWhen I find myself needing to do this, my personal preference is actually to add -Dprivate=public (or it's moral equivalent) to the compiler command line when you build your tests.\nOf course, there's a very good argument to say that in well-factored code, you shouldn't need to test private members (which I agree with wholeheartedly - except on those occasions where I find it disagreeable ;-)\n. If you're building in C++11 mode, then add -Wno-c++98-compat - which will disable the C++98 compatibility mode warnings.\n. @philsquared  - that's almost certainly the first time I've ever been credited with bringing you peace ;-)\n. wrt the issue, is seems to me that the best way to do this memory dump is to actually dump the contents of the argument, rather than copying it into a union and then dumping the copy.\n\nClang can be expected to be quite feature-complete in 2015.\n\nHow much more fetature-complete can Clang get? AFAIK, it's the only compiler to fully support the current C++14 draft. see http://clang.llvm.org/cxx_status.html\n. I was thinking of something like (this is off the top of my head, untested - but you get the idea):\nC++\nstd::string rawMemoryToString( const void *pobject, std::size_t count )\n{\n    const unsigned char *bytes = static_cast<unsigned char *>(pobject);\n    std::ostringstream os;\n    os << std::setfill('0') << std::hex; // you shouldn't need these each time around, BTW ;-)\n    for( std::size_t i = 0 ; i < count ; ++i )\n    {\n         os << std::setw(2) << static_cast<unsigned>(bytes[i]);\n   }\n   return os.str();\n}\ntemplate<typename T>\nstd::string rawMemoryToString( const T& object )\n{\n  rawMemoryToString( &object, sizeof(object) );\n}\nThat way, we're streaming the values of the actual bytes which compose our object - rather than the bytes which make up a copy of it.\n(And, not that it matters much, but It also means we're likely to get slightly faster compilation, and slightly smaller object code, since the compiler has less work to to)\n. HTH as always.\n. Might be worth noting that, according to the link @alex85k posted, nullptr requires /clr on for VS2005/VS2008 (I don't have access to a version old enough to verify this)\n. FWIW, I wouldn't worry too much about those two tests in ToStringWhich.cpp; I never actually intended to push that file upstream (I wrote it when I was trying to figure out why my toString/StringMaker stunts weren't doing what I expected).\n. > Without the pragmas I run into a lot of 'unused variable' errors.\nA couple of things you could try (in, roughly, my order of preference):\n- Add Catch to your include path with -isystem rather than -I;  gcc suppresses most (all?) warnings from headers found via -isystem.\n- Add -Wno-unused-variable to your gcc command line\n- Track down all the warnings you have a problem with, \"use\" the variable with something like:\n  (void)varname; submit a patch...\nFWIW, I personally find the last approach rather distasteful; you end up with a lot of clutter which doesn't serve much useful purpose.\n. @Kosta-Github The workaround version has braces around the do-while. They (should!) be semantically identical\n. Catch generally does a pretty good job of figuring out how to print things - you're seeing what happens - {?} - when it can't.\nYou can fix this by either adding a stream insertion operator<<, or by providing an overload of Catch::toString for your type.\n. I think I have a pretty good idea on how to do this - expect a pull request in the next day or so :-)\nIn the meanwhile, it might be handy to see what we can do about merging https://github.com/philsquared/Catch/pull/200, since I wrote a bunch of tests for Catch::toString there (although (1) I conflated too much stuff in a single pull and (2) they may have bit-rotted a little by now...)\n. NP; I'm just about to post the PR for the enum class toString stuff. Once that's done, I'll look at reapplying the other toString tests I built.\n. Ok, the additional tests PR is done (#319)\n. I think this can probably be closed now?\n. Hmm... on develop (@ 32186db) I get:\nREQUIRE( TestFunc() == TestEnum::Idle )\nwith expansion:\n  1 == 0\nwhich is what I believe you expect?\n- Which compiler / flags are you using?\n- What happens when you run the tests from SelfTest/EnumToString?\n. Same compiler that I'm using then...\nI still see the {?} behaviour with the master branch - but not on develop.\nCould you please double-check that you're using develop? \n. :+1: Excellent news!\n. No problem.\n. No worries\n. > For example, does it support comparisons on arrays?\nThat depends very much on what you mean by 'array'; if you mean a built-in array (e.g int x[], then yes - but bear in mind they have the exact same semantics as that comparison \"outside\" of Catch. Consider:\nint x[] = { 1, 2, 3 };\nint y[] = { 1, 2, 3 };\nbool b = ( x == y );  // 1\nREQUIRE( x == y ); // 2\nHere, (1) is an identity rather than a value test - so b will be false. Turns out it's the same thing in (2) - so the assertion will fail.\nIf, on the other hand you mean std::array, then we have:\nstd::array<int,3> x { 1, 2, 3 };\nstd::array<int,3> y { 1, 2, 3 };\nbool b = ( x == y );  // 1\nREQUIRE( x == y ); // 2\nHere (1) is a value test - so 'b' will be true, and (2) will pass.\n. @philsquared \n\nIs this the PR that was superseded?\n\nI'm pretty sure I closed that one and opened a new one to replace it.\n. @DanTheColoradan This isn't a Catch issue - it's a compiler/library mismatch issue.\nThere's no requirement that compiler A be interoperable with compiler B's stdlib implementation, and although the Clang folks certainly go out of their way to ensure their compiler works with gcc's libstdc++, you've stumbled across a mismatch. I'd recommend using libc++ with clang, and libstdc++ with gcc.\n3.11.2 requires that std::max_align_t is defined, but not that there's a definiton in the global namespace; It seems that the version of libstdc++ that you're using expects it to be defined globally in order to define it in std.\n\nI tried adding set (CMAKE_C_COMPILER \"/usr/bin/clang\") to the catch CMakeLists.txt, but it still output this:\n\nThat sets CMake's C compiler, not the C++ compiler; you may want to try adding set(CMAKE_CXX_COMPILER \"/usr/bin/clang++\")\nhowever...\n\nI'm using cmake and it downloads catch on the fly using ExternalProgram_Add as per the instructions. In any case, I call cmake and then make and it works fine for the initial build. Then, if call I cmake and make again without removing all of the files, it throws that error.\n\nI've seen cases where setting CMAKE_C_COMPILER and CMAKE_CXX_COMPILER in CMakeLists.txt doesn't do the right thing (I don't recall the exact details, but ISTR it has something to do with where you set then). As you've found, re-running cmake in an existing cmake tree isn't quite the same operation as running cmake in a fresh directory - and I think this may be one of the problem cases.\nYou may want to consider trying:\ncmake -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++\n\nI just rm -rf * my build folder and then cmake and make again....\nFirstly, you typically don't need to re-run cmake in an esiting build tree - running make is usually sufficient (since it invokes cmake to see if cmake needs to be re-run...).\nSecondly, you may well find that rm build/CMakeCache.txt before re-running cmake is enough, rather than blowing away the whole build tree.\n. @philsquared I think @martinmoene 's actually having a related issue (i.e. travis mixing clang w/libstdc++) - but it can be a bit harder to figure out what's going on with travis :-).\n. @DanTheColoradan Hope it was of some help - the CMake FAQ summarises the CMAKE_CXX_COMPILER issue here - http://www.cmake.org/Wiki/CMake_FAQ#How_do_I_use_a_different_compiler.3F\n. I figure that Catch is a C++ testing framework - and C++ has exceptions.\n\nWhilst it's true that there are languages which are syntactically and semantically similar to C++ which do not support exceptions (some of them implemented by C++ compilers, with the appropriate set of flags), they're not C++.\n. > It would appear that the config might allow a way to skip throwing (virtual bool allowThrows() const { return !m_data.noThrow; }), but alas this is also not documented anywhere.\nYou can find the documentation by running a Catch exceutable with the -h argument:\n```\n$ ./SelfTest -h\nCatch v1.1 build 3 (develop branch)\nusage:\n  SelfTest [ ...] [options]\nwhere options are: \n  -?, -h, --help               display usage information\n  -l, --list-tests             list all/matching test cases\n  -t, --list-tags              list all/matching tags\n  -s, --success                include successful tests in output\n  -b, --break                  break into debugger on failure\n  -e, --nothrow                skip exception tests\n  -i, --invisibles             show invisibles (tabs, newlines)\n  -o, --out          output filename\n  -r, --reporter         reporter to use (defaults to console)\n  -n, --name             suite name\n  -a, --abort                  abort at first failure\n  -x, --abortx   abort after x failures\n  -w, --warn     enable warnings\n  -d, --durations      show test durations\n  -f, --input-file   load test names to run from a file\n  --list-test-names-only       list all/matching test cases names only\n  --list-reporters             list all reporters\n```\nThe noThrow flag is set be -e - it skips exception tests (REQUIRE_THROWS and friends) - it doesn't skip the use of exceptions.\n\nWhile I understand where you are coming from, I don't think I agree that a unit test not passing qualifies as being an exceptional event.\n\nFor me, a failing test should be an exceptional event (I expect my code to pass tests far more often than it fails) - so it's exceptional in the English sense of the word. It's also an (by definition) an error. Given both of those, I think that qualifies it as exceptional.\n\nError codes are just easier for some people, especially junior developers, to wrap their heads around.\n\nError codes are also far easier for some people - especially junior developers - to ignore than exceptions. (Not to mention that most of the people I encounter that I'd classify as \"junior developers\" have come through Java and/or C# - so they have very little difficulty in understanding exceptions)\n. #include <all views are my own and do not necessarily represent those of anyone else>\nA couple of things:\n\nThis works so much better when you don't have the feeling you're speaking to a wall.\n\nWith all due respect, this issue was only posted yesterday - I have a really hard time translating that into \"feeling like you're speaking to a wall\". I regularly experience much slower response times with organisations that are being paid significant sums of money to respond quickly; I don't know - but can guess - how much you pay for Catch support, but I'm pretty sure it's less than we pay large-corporation-inc for support.\nThere are basically two people (@philsquared and @martinmoene ) supporting Catch, with a few others (myself included) who stick our noses over the parapet when we can. We all have pressures on our time other than Catch.\nI saw the issue this morning, and realised almost immediately what the problem was - but didn't have time to respond before heading out for my day job. When I get back, I find @martinmoene has beaten me to it.\nWhat I think you meant to say is \"This works so much better when I have some respect for the time of those who have provided me with a really rather good test framework\"\nSecondly, this is (sort of) documented in #254 - which seems to boil down to the same issue (i.e. defining test cases in included files).\n\nI think it's fine if this is documented properly\n\nThere's no doubt that the documentation could stand some improvement, but we all know that writing docs is way less fun than hacking on Catch itself. @philsquared is far more disciplined about documentation than I will ever be - but his time is as limited as yours and mine.\nNow, everyone repeat after me: \"Pull Requests Welcome\" ;)\n. The easiest workaround is probably pipe the output of Catch through cat (Catch basically uses the common heuristic isatty(stdout) to figure out whether or not to colour output or not; piping though cat should defeat that.\nI'd also suggest filing a bug report with Eclipse about their lack of supporting for ansi output.\n(Disclaimer: I haven't tried this; my editor displays ansi colour in console buffers just fine)\n. My Google-Fu found this: http://marketplace.eclipse.org/content/ansi-escape-console which may be a viable alternative.\n. Another alternative might be to do what google test does, and display a dump of raw bytes (probably size limited) - although I'm not entirely sure how useful that is (but we already have the machinery - since we do that for pointer-to-member types, despite the fact that it's actually pretty meaningless)\n. I think the correct fix here is to either:\n- remove the Makefile, and use CMake to recreate it\n- update the Makefile to use SOURCES = $(wildcard *.cpp) as I proposed in a long-forgotten patch :)\n. @philsquared \n\nI'm not an active user of CMake\n\nI'd urge you to fix that...\n. @philsquared \n\ncan you elaborate?\n\nAs you're aware, I've been a fluent speaker of Make for about 30 years or so - but I've not looked back since I started using CMake. Naturally, being software, it's not perfect, but I've found it (c)makes my life a lot easier when dealing with projects where I need multiple builds (be they cross-platform, or configurations, or whatever). You may (or may not) find it useful.\nAmongst other things, it can generate GNU makefiles, NMake makefiles, XCode/VS/Eclipse/KDevelop/(and some other) format project files, if you like that kind of thing. For the projects I use it for, we typically consider the CMake files to be the \"canonical\" build file, rather than the generated files. (To be clear, about 97.83% of my usage is to generate makefiles - personally, I rarely use the various \"project\" files, since I live in Emacs - but I've also got folks on my team using various flavours of VS, Eclipse etc who are happy with the results)\nI read on the internet that CMake's output is \"garbage\" - but I find it works well enough for me. And I'm not the only one.\nBut I'm really not interested in debating the pros and cons of the myriad makefile generators out there, so I'll leave it at that.\n. Have you filed a bug report with Eclipse?\n. @excaliburHisSheath  Could you try compiling with -DCATCH_CONFIG_CPP11_NULLPTR and see if that improves matters?\nMy best guess is that VS is trying to instantiate the StringMaker<std::nullptr_t> template rather than the  toString(nullptr_t) overload.\n. @philsquared snap ;-)\n. Well, they do say \"Great minds seldom differ\" ;-)\n(also It doesn't look the the _MSC_VER >= 1600 condition is present in master)\n. This seems to be a workaround for what appears to be a bug in Eclipse - has anyone raised a bug with the Eclipse folks?\n. - Having a private destructor isn't an error in C++. It's arguably a reasonable thing for a compiler to warn about, but it's entirely unreasonable to abort compilation because of it.\n- Even if it were reasonable to bail on this, it's not entirely accurate in this particular case; MethodTestCase has a base class (IShared) with a public, virtual destructor through which ~MethodTestCase can be (and, in fact, is) invoked.\nThis isn't a problem with Catch, it's a problem with using -Werror.\n. > Can we either make the destructor public\nIt's private for good reason (specifically, it prevents MethodTestCase from being instantiated as a automatic variable) - making it public to silence a warning would make the code more fragile. I don't know who added that warning to GCC, but I very much doubt that they did it with the intention of making code less robust. (This is one of the unintended consequences of a \"no warnings\" policy - silencing warnings can lead to code that's harder to maintain)\n\nor disable that warning?\n\nYou can do this easily: either pass -Wno-ctor-dtor-privacy to gcc, or - even better - include path via the -isystem option (instead of -I); that way, you disable all of the warnings in the header.\nThe problem with disabling warnings one by one is that you end up with a whole pile of spaghetti #ifdef this and #pragma that all over the place, to avoid triggering warnings on other compilers. A more subtle problem with a maze of twisty #pragmas is it makes it harder for folks developing Catch to find genuinly useful warnings in the code.\n. @mjscosta Can you close this issue now? Thx\n. There are (at least) two workarounds for this:\nOption 1: move your declaration of Catch::toString( S const& ) before including catch.hpp.\nOption 2: provide a specialisation of Catch::StringMaker<S> after including catch.hpp\nI have a (mild) personal preference for the latter, but YMMV.\n. FWIW, for some reason for which I cannot explain, I don't much care for the name 'catfish'.\n. catch.hpp should already be including type_traits.\nIs that travis script installing the correct version of libc++ for the clang build? (I forget the exact details, but I recall a while back that travis was using and old version of libstdc++ instead)\n. @philsquared - No; it's actually a (long-standing) problem with travis\n. Are you using the correct version of libstdc++ for your compiler?\n. My concern is about the headers, rather than the binaries.\nCan you compile the following 2-liner successfully:\n```\ninclude \nconst std::nullptr_t p;\n```\nI ask, because the first error you report is:\n/usr/local/include/Catch/catch.hpp:813:17: error: 'nullptr_t' in namespace 'std' does not name a type\nWhich would imply that cstddef is either not being included, or does not define std::nullptr_t as specified by the C++ standard.\n(Note that I don't use Homebrew, so I'm guessing in the dark here)\n. Given that you get the problem without including Catch, it's clearly not an Catch issue - it's a issue with your compiler/library setup.\n. > In clang++ -stdlib=libstdc++ is the old version of the library.\nNot quite; it's not really about \"old or new\", it's about \"GNU or LLVM\".\n-stdlib=libstdc++ means \"use libstdc++\", which is the GNU implementation of the C++ standard library (http://gcc.gnu.org/libstdc++/).\n-std=libc++ means \"use libc++\", which is the LLVM implementation of the C++ standard library (http://libcxx.llvm.org/)\nIf you've installed a newer version of GNU's libstdc++, then you'll get that when you use -stdlib=libstdc++. If the installed version of libstdc++ is old, then that's what you'll get.\n\nTo compile c++11/14 code you have to use -stdlib =libc++ maybe in gcc is the same\n\nI've never used \"-stdlib=libc++\" to compile C++11/14 code with gcc on Linux; I just ensure that I have an appropriate version of libstdc++ installed.\nEither way around, this is not a Catch issue, so any further discussion should probably take place in more relevant forums. \n. Which compiler/OS/etc are you using? (Unless I'm very much mistaken, the symptoms you describe look like a broken compiler)\nDo the other tests in ToStringTuple pass?\n. Can you run it under a debugger, put a breakpoint at ToStringTuple.cpp line 42 and take a look at what the \"value\" tuple looks like?\n. The problem appears to be here:\n_M_head_impl = 1.07801106e-38\nFor whatever reason, your compiler appears not to be initialising the tuple correctly.\nLine 41 reads:\ntype value { std::tuple<int>{42}, {}, 1.2f };\nWhich should initialise the float member to 1.2 - not 1.07...e-38.\nIt's true that a tuple containing an empty tuple is an unlikely edge-case, but that's why it's a test here...\nI've just tried a simple example on godbolt (https://goo.gl/pZ8MV1) - which does the right thing on 4.8, 4.9 but fails on 5.1 - I think this is a compiler regression.\n. This looks like it's the same problem as #424 which was caused by a mismatch between compiler & standard library versions\n. My German's not good enough to translate the error messages, but this looks exactly the same as #424. It's a problem with the compiler/stdlib setup, not with Catch.\n@cinemast Please try compiling this with g++ -std=c++11:\n```\ninclude \nconst std::nullptr_t p;\n```\nIf that doesn't compile, then the problem is with your compiler setup.\n. @DavidEGrayson I hope you realise you're suggesting intentionally writing fragile code to silence a warning?\n. > I got a message that I fool.\nWhat is the actual message you're getting?\n. It might also be worth revisiting the logic that (dis|en)ables nullptr for gcc (IIRC, currently it's based solely on the gcc version (__GNUC__ et al)rather than the language version).\nSpecifically it doesn't check __cplusplus to see if C++11 is enabled, so if you're using a reasonably recent version of the compiler with an over-a-decade-old version of the language, you'll see these kind of problems. In fact, I'd consider using only __cplusplus >= 201103 to determine whether to use nullptr or not; I doubt there are any vendors who define __cplusplus as 201103 or greater who don't support nullptr, and if there are any, then you can point any related issues back to them where they belong...\n. @Hedanito Can you post a minimal complete example exhibiting the problem? \nI can't reproduce here (with clang), but you don't post complete source so I can't be sure that I'm trying what you're trying. At this point, I tend to agree with @kirbyfan64 ; from the information you provide, it smells like a VS problem.\n. I can't repro this with Clang, and don't have a machine with VS on it, so I'm guessing in the dark here, but here's a couple of other things you can try:\n- Provide a definition for Radians as well as the declaration; I'd be surprised if that actually makes a difference in this instance, but it's worth a shot.\n- Try writing the check as CHECK( (AngleRatios<float32>::Radians) == Approx(1.0f)); - I don't honestly expect it to make any difference, but anything's possible\nIt still looks like a VS bug to me.\n. Try adding -std=c++11 to your gcc command line.\n(This looks like #424 again)\n. @czipperz Try compiling this:\n```\ninclude \nconst std::nullptr_t p;\n``\n. Do either of them carp about nullptr_t not being declared? (Which was your original problem)\n. Well, since you ask...my preference is to specialise theStringMakertemplate rather than playing around trying to get the right set of overloads/specialisations oftoString`.\nThere are a bunch of issues here (I made some detailed notes on this a while back but can't seem to lay my hands on them right now) - but Herb Sutter wrote an article a while back that summarises most of them quite nicely, and gives a pretty clear rationale for preferring specialising the (class|struct) template. \nhttp://www.gotw.ca/publications/mill17.htm\n. > AFAIK \"std::exception\" is the default return value for what() of an std::exception\nDescribing that as the \"default\" return value is somewhat misleading - it just happens to be what some implementations happen to return (others do different things, e.g. an empty string). The standard describes std::exception::what as returning \"an implementation-defined NTBS\" (18.8.1), so that's all you can assume.\n. > I'd consider it a an unexpected behavior that GCC's std::exception puts it's name in the what()\nIt's not unexpected - but neither is it expected.. that just happens to be what the version of GCC that you're using today happens to have done today. A different version of GCC, or a different compiler, or another day, may all behave differently.\n\nAccording to http://en.cppreference.com/w/cpp/error/exception/exception the what() should be empty.\n\ncppreference is mistaken. As I've mentioned previously, the standard says:\n\nvirtual const char* what() const noexcept;\nReturns: An implementation-defined ntbs.\n\nWhich may (or may not) be empty. It may (or may not) be \"std::exception\". Or it may be \"no exception was thrown\". Or anything else, really (as long as the implementation defines what it is) - the only thing we can say with any certainty is that it's some null-terminated byte sequence.\n. > Phil never was quick to get to issues, was he\nPhil has a rather full life - fixing Catch isn't always right at the top of his priority list.\n. @czipperz \"it creates a semi-random function name\"\n\nStrictly speaking, it's not at all random - it's entirely deterministic.\n\n. > The given fix would trigger -Wreorder warnings though, because m_xml is second member in the XmlReporter.\n-Wreorder is always worth fixing - since there's no cost to doing so, and it's surprising how many people don't understand order of initialisation.\nIt's easily solved though - just correct the order of the initialisers:\n+            m_xml( _config.stream() ),\n  +            m_sectionDepth( 0 )\n. std::tolower should already be int std::tolower(int) - so the cast is a best superfluous, and at worst is undefined behaviour at worst.\n. Another reasonable approach might be:\nint (*tolowerp)(int) = std::tolower;\nstd::transform( s.begin(), s.end(), s.begin(), tolowerp );\nThat will select the correct overload, but avoids actually writing static_cast.\n. ",
    "ned14": "Thanks for the feedback. Weirdly I was only quite literally talking to Anthony myself a few days ago regarding the proposed object and its likely interactions with future incarnations of the C++11 threading model. There are hopes we can improve C++11's futures and promises which are currently non-composable, which makes them not particularly useful.\nYou might also consider the C11 threading model, which basically replicates the C++11 model but with a C API. I suggest this because the C11's threading API literally duplicates POSIX threads, so backwards compatibility is extremely easy - you just need a few macro #define's. Windows 7 and later also provides POSIX thread equivalent APIs. You might find this file https://github.com/ned14/ISO_POSIX_standards_stuff/blob/master/c11_compat.h useful.\nCan I suggest perhaps a \"better\" approach than TLS or reentrancy? CATCH appears to keep state in a global type registry, and this would be difficult to TLS. One approach is to frame RAII your unit testing, so for example:\n{\n  Catch::TestUnitFrame frame(this);\n  ...\n  REQUIRE(a==b);\n}\nWhat this would do is to establish a \"frame\" of testing, so right now I see CATCH immediately exits a test case if a test fails which is reasonable. Establishing a frame would simply immediate exit that frame only. Moreover, this enables this:\nC\n  Concurrency::parallel_for(0, SELECT_PERMITS, [&permits, ts](size_t n)\n  {\n    Catch::TestUnitFrame frame(this);\n    size_t m, selectedpermit=(size_t)-1;\n    pthread_permitX_t parray[SELECT_PERMITS];\n    int ret;\n    for(m=0; m<SELECT_PERMITS; m++)\n      parray[m]=&permits[m];\n    REQUIRE(0==pthread_permit_select(SELECT_PERMITS, parray, NULL, &ts));\n    ...\n  });\nHere you're setting the lambda function as the CATCH test frame thanks to RAII, so any errors cancel the lambda and the lambda alone. This should reduce the contention on your global type registry as you can accumulate into frame which is thread local by virtue of living on the local stack and synchronise on frame destruction. A simple global mutex would now suffice, and C11 has a plain portable mtx wrapper of pthread_mutex which very easily enables C++11 compatibility :)\nThoughts?\nBTW for anyone else with the same problem I worked around this threading limitation as follows:\nC\n    if((0!=(ret=pthread_permit_select(SELECT_PERMITS, parray, NULL, &ts))))\n      REQUIRE(0==ret);\nor\nC\n       if(parray[m]!=&permits[m])\n          REQUIRE(parray[m]==&permits[m]);\nIn other words, duplicate the check and only invoke CATCH when necessary. As unit tests don't generally fail, this approximates thread safety :)\nLastly, can I commend you on this unit test framework? It's really well designed because it doesn't get in the way. I had been meaning to write a metaprogrammed implementation for Boost myself given how awful C++ unit test frameworks are - so bad I generally write C and C++ unit testing in python, but that's only good for single threaded testing due to the GIL. The need for multithreaded testing made me do a search, and I found CATCH. I was intending to propose what you've basically done to my new employer in October, but I'm pleased to have discovered you already nailed it.\nNiall\n. Good to hear about your test contexts. That's definitely in the right direction.\nCan I urge you NOT to frequently synchronise or do any other form of frequent atomic access during a unit test (this includes the use of malloc())? In fact, don't even write to the any cache line being read by more than a few processors! The \"bitpiece result collection + merge after test has ended\" strategy I suggested is slightly more complex, but far superior in a >64 core NUMA unit test scenario where any form of shared critical section, mutex or atomic access absolutely kills performance in a NUMA config and before long, the test framework is the thing being unit tested instead of the client code.\nOne of the biggest undertapped roles for unit testing in C and C++ is detecting and trapping race bugs in very high performance code - in this it is very unlike any other programming language. What you want is an automated race bug finder where basically nightly builds detect a new race bug and then fire off unit testing per commit until the offending commit(s) are found. In this, some method of telling CATCH \"this is loop N of subtest X\" would be useful because CATCH can then throw away the results of previously passing successful subtest loops and just infer they passed. And that would heavily cut down on the use of malloc() to store results.\nI appreciate >64 core NUMA test scenarios probably aren't what you consider daily :). However, from the experience of my consulting firm during the past three years I can tell you there is a lot of money in it. I'm not sure how you're employed, but you might consider a commercial release for NUMA customers like hedge funds and oil drilling and a watered down less parallel version for eventual inclusion into Boost.\nActually, I must note CATCH as another good example for why Boost needs a generic type registry implementation. See my post at http://mail.python.org/pipermail//cplusplus-sig/2011-September/016160.html if you want to know more. You'll note how I propose the use of thread local registry scoping frames which are almost identical to what I proposed for CATCH above.\nNiall\n. For those needing a brutal hack job of a partially thread safe CATCH and are reading this issue, you may find my fork at https://github.com/ned14/Catch-ThreadSafe of use. I make no claims as to its reliability, but it works for me.\n. > @ned14 Would you mind providing a synopsis of the things you addressed to achieve at least a hacked v1.5 thread safety? Thank you...\nThat was a long time ago I am afraid. I remember hacking a mutex into the iostreams redirector which took some trouble to figure out. But I basically \"giant lock\"ed it.\nI no longer use my hacked edition of CATCH as I needed a unit test framework which ran well with exceptions and RTTI disabled as well as under multiple threads, so I ended up writing my own even lighter weight test framework than CATCH which still outputs JUnit XML and I use that exclusively now: https://github.com/ned14/quickcpplib/blob/master/include/boost/test/unit_test.hpp. Yes, it's Boost.Test drop in compatible, and it's ridiculously simple, perhaps too simple for some folk. But it has near zero compile time overhead, which fixes the almost 30 second compile times I saw with CATCH.\nNiall\n. Oh no, the whole point of that quickcpplib file is to eliminate the Boost dependency.\nCompile time issues only appear if you're doing hefty metaprogramming and feeding those expressions into CATCH. CATCH runs further metaprogramming on such expressions you see, and compile times start breaking past twenty seconds quickly enough.. I'm currently making an emulation of Boost.Test using CATCH and a mutex. A big problem is that one can use #include to include many test cases into a single file, and then of course LINE collides.\nI have implemented a hack solution based on COUNTER instead which looks like the above, but you need to define INTERNAL_CATCH_TESTCASE a bit differently to avoid the iteration of COUNTER:\n#define INTERNAL_CATCH_TESTCASE_UNIQUE_NAME( UniqueName, ... ) \\\n        static void UniqueName(); \\\n        namespace{ Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( &UniqueName, CATCH_INTERNAL_LINEINFO, Catch::NameAndDesc( __VA_ARGS__ ) ); }\\\n        static void UniqueName()\n    #define INTERNAL_CATCH_TESTCASE( ... ) INTERNAL_CATCH_TESTCASE_UNIQUE_NAME( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), __VA_ARGS__ )\nThis seems to work well here. Any reason why this pull request hasn't been merged yet?\n. For those needing a brutal hack job of a partially thread safe CATCH and are reading this issue, you may find my fork at https://github.com/ned14/Catch-ThreadSafe of use. I make no claims as to its reliability, but it works for me.\n. My thread safe fork has proven itself reliable under an awful lot of testing. However, it is a very nasty hack. I wouldn't do it that way in a million years if one had a choice.\n. If one were to do a proper thread safe CATCH, you'd keep per-thread lock free results which are only collated and sorted into the correct order at the test end. Right now my hacked threadsafe CATCH is pretty useless for multithreaded testing because the mutex I'm using synchronises all the threads which ruins the test. I'm working around it with this idiom:\nif(!(test))\n  CATCH_CHECK(test);\n... which isn't ideal, but it solves my immediate problem.\n. > Why is it necessary to aggregate per thread first?\nMultithreaded test cases are ruined by extra synchronisation. By per-thread lockfree results I specifically meant thread local storage. Note thread local storage (as in the C++11 thread_local) is profoundly broken on clang on OS X and FreeBSD right now unfortunately.\n. @philsquared I was referring exclusively to the C++ 11 thread_local storage attribute. The libc on OS X and BSD doesn't implement the on thread exit registration using C++ 11 semantics yet due to race problems during shared library unload.\nYou can still use __thread of course to use C semantics. Or a dense hash map indexed by thread id. Fastest would be the latter with the bucket cached into a TLS for fast access.\n. Persistent hash-trie? There have been repeated attempts to get one of those into Boost as a prelude to entering the C++ standard library. Everybody to date has failed to make much progress ... and this is stretched over seven years now or something ... could I tempt you into submitting that for Boost?\n. Oh, C semantics TLS works fine on all compilers, including MSVC, and has done so for years. It's just the C++ destructors won't fire unless you do it by hand. thread_local storage does fire destructors for you, it's very handy - except on OS X and BSD to date.\n. If you're anything like me Phil, that ACCU conference sucks up all your free time from about February onwards! :)\n. Fixed unit test breakage and merged latest develop. Pull request now passes Travis.\n. No problem. This was a nice clean simple patch with obvious benefits and no bad consequences, at least if CATCH keeps a similar design to now (if you remember I was urging the use of C++ modules to improve compilation times which are for me at least significant, maybe half that of Boost.Test v2, I haven't tested Boost Test v3 yet supposedly it is radically better).\n. Use of LINE in unit test names was problematic for me because I was keeping my unit tests in separate files but including each of those into a single master source file (this allows me to permute the unit tests via macro magic to increase coverage). I appreciate that is nasty and not usual, but it let me keep Boost.Test compatibility and gave users the option to choose between Boost.Test and CATCH.\nBesides, COUNTER is so widely available nowadays and it \"just works\" that it's not a bad replacement for LINE. CATCH's use of counter, unlike almost any other use of counter, is not ODR violating and I think it may be one of the very, very few good idea uses of counter. Next time you see Chandler getting worked up about the travesty of counter and why it's so wrong, make sure to suggest this use case for it :)\nThanks for the merge Phil. Am I going to have to re-hack your develop-v2 branch to support multithreaded use, or is that support planned for soon?\n. Am I right your fundamental problem with thread local is automatic destruction of TLS contents on thread exit on windows without using dllmain?\n. Well if you don't care about TLS destruction, proprietary TLS works just fine. Here's a snippet:\n```\nifndef BOOST_AFIO_THREAD_LOCAL\nifdef __cpp_thread_local\ndefine BOOST_AFIO_THREAD_LOCAL thread_local\nelif defined(_MSC_VER)\ndefine BOOST_AFIO_THREAD_LOCAL __declspec(thread)\nelif defined(GNUC)\ndefine BOOST_AFIO_THREAD_LOCAL __thread\nelse\nerror Unknown compiler, cannot set BOOST_AFIO_THREAD_LOCAL\nendif\nendif\n```\nThe obvious problem with this is that the type must be an integral type. This leads to the natural workaround:\nstatic BOOST_AFIO_THREAD_LOCAL object *local_object;\nif(!local_object)\n{\n  local_object=new object();\n  register_with_static_freeer(local_object);\n}\n... which is fine if not too many threads are created and destroyed over time.\nAn alternative which Boost uses is thread local ptr class which on POSIX uses the destructor callback supplied by pthread_key_create to delete the storage on thread exit. This isn't legally doable on Windows without DllMain tricks.\nNow, let me stress the legally part. Boost.Thread does a UB evil to implement TLS destruction on thread exit on Windows without requiring a hook into DllMain. If you'd like to know more let me know ...\n. ",
    "mwpowellhtx": "@philsquared So, it's been several months, if not years, since this was posted. I see re: @horenmar 's post earlier this year re: Catch v2. This is now in development. Any plans when this will be released? I've got a client/server C++11 threading situation where this would be very welcome. Thank you!. @ned14 Would you mind providing a synopsis of the things you addressed to achieve at least a hacked v1.5 thread safety? Thank you.... @ned14 I take to mean does not assume a Boost dependency. I happen to be here getting my knees wet with Catch after struggling to heavy lift Boost, BTW. I haven't noticed compile time issues (yet); that's not to say I would the further I get into it. I may have a look at that, however. Thank you.. @ned14 My interest is piqued. How do you handle \"matcher\" scenarios? Or \"generator\" scenarios? Can you \"match\" exceptions when they are handled? i.e. expectations of an exception, with a match on its user-defined state?. My mistake. I narrowed it down to a missing include on my part.. This seems to all revolve around the macro INTERNAL_CHECK_THAT, however, would you mind providing a little guidance, or update the docs like I said, concerning just what/how I should be specializing the template method? I mean, this requires some access to the guts of Catch::ResultBuilder, does it not?. After doing a little background reading around partial template specializations, it seems like I may need to do something such as this, near to my Custom Matcher struct:\nC++\nnamespace Catch {\n    template<typename ArgT>\n    inline void ResultBuilder::captureMatch<ArgT, nng_exception_matcher>(\n        ArgT const& arg, nng_exception_matcher const& matcher, char const* matcherString) {\n    }\n}\nI figure I need to allow for the ArgT on account that should be resolved by the INTERNAL_CHECK_THAT macro parameter.\nHowever, this is still causing exceptions:\nSeverity    Code    Description Project File    Line    Suppression State\nError   C2768   'Catch::ResultBuilder::captureMatch': illegal use of explicit template arguments    sock    G:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\swig\\cpp\\tests\\core\\sock.cpp    55  \nError (active)      no instance of function template \"Catch::ResultBuilder::captureMatch\" matches the argument list sock    g:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\swig\\cpp\\tests\\core\\sock.cpp    132 \nError   C2244   'Catch::ResultBuilder::captureMatch': unable to match function definition to an existing declaration    sock    G:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\swig\\cpp\\tests\\core\\sock.cpp    55  \nError   C2672   'Catch::ResultBuilder::captureMatch': no matching overloaded function found sock    G:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\swig\\cpp\\tests\\core\\sock.cpp    132 \nError   C2893   Failed to specialize function template 'void Catch::ResultBuilder::captureMatch(const ArgT &,const MatcherT &,const char *)'    sock    G:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\swig\\cpp\\tests\\core\\sock.cpp    132. @philsquared In and of the implementation itself, at least gauging by the captureMatch implementation, it seems like maybe this should do the trick, however, I'm not sure the pass through arg quite aligns with the template function expectations. I could be missing something, but would you mind clarifying?\n```C++\nnamespace Catch {\n    template <>\n    inline void ResultBuilder::captureMatch(\n        nng::nng_exception const& ex, nng_exception_matcher const& matcher, char const* matcherString) {\n    MatchExpression<nng::nng_exception const&, nng_exception_matcher const&> expr(ex, matcher, matcherString);\n    setResultType(matcher.match(ex));\n    endExpression(expr);\n}\n\n}\n```\nStill with compiler errors, however:\nSeverity    Code    Description Project File    Line    Suppression State\nError   C2893   Failed to specialize function template 'void Catch::ResultBuilder::captureMatch(const ArgT &,const MatcherT &,const char *)'    sock    G:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\swig\\cpp\\tests\\core\\sock.cpp    145 \nError (active)      no instance of function template \"Catch::ResultBuilder::captureMatch\" matches the argument list sock    g:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\swig\\cpp\\tests\\core\\sock.cpp    145 \nError   C2672   'Catch::ResultBuilder::captureMatch': no matching overloaded function found sock    G:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\swig\\cpp\\tests\\core\\sock.cpp    145. @philsquared Reviewing the ExceptionTests, I wonder if I may be misunderstanding the role of a Custom Matcher. In other words, I want to \"match\" exceptions of mine based on some of their members. It seems like maybe that is not its purpose, but I could be wrong.. @philsquared I would like to catch an exception with X-y-z conditions. However, reviewing the docs further, I'm not sure that's quite the purpose of Matchers. Rather, they are literally for comparing the template arg on the LHS, so to speak. That being said, is there a more natural way to evaluate said exceptions in a more natural way. By that I mean other than by:\nC++\nCATCH_TRANSLATE_EXCEPTION(nng::nng_exception& ex) {\n    /* Translating from std::exception parlance, we have:\n    http://www.cplusplus.com/reference/exception/exception/what/ */\n    return ex.what();\n}\nIn other words, I've got a couple of members in the exception itself that I would like to evaluate inline with the macro.\nSomething like:\nC++\nREQUIRE_THROWS_HAVING(/*do something*/, nng::nng_exception(ec_eanerr));\nSomething like this where I provide an exception against which to compare. From which you ought to be able to derive decltype, etc, etc, for expansion, and so on.. @horenmar Yes, I am pulling v1.10 during my build process at the moment (i.e. Catch 1, I suppose). Yes, Catch 2, that might be interesting to look at.\n@philsquared Although still in \"development\", how stable are those releases would you say if I pulled to those hash(es)?. @philsquared Okay, thanks for the response. I take to mean\nthe v2.0.0-develop.4 tag is stable enough. I will give that a try, thanks\nagain!\nOn Mon, Oct 9, 2017 at 4:06 AM, Martin Ho\u0159e\u0148ovsk\u00fd notifications@github.com\nwrote:\n\n@mwpowellhtx https://github.com/mwpowellhtx Runtime-wise, Catch 2\nshould be stable. We have had some trouble with the stitching script making\nthe single header release uncompilable under specific compile-time flag\ncombinations (mostly UWP), but in general, it should work.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/issues/1038#issuecomment-335089245,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABvVux4_ovizOEF0nNjSn_RVXudk9W8lks5sqdPzgaJpZM4PxLt6\n.\n. @philsquared I could not find the REQUIRE_THROWS_MATCHES macro (or CHECK_THROWS_MATCHES). As far as I know I am pulling against the HEAD. I've been able to shoehorn in a macro of my own extending Catch for my own use: in this case, matching exceptions. It's a bit crude, bit it \"works\", for now.. @philsquared I see, that explains it. Yes, I'm not interested in being that close to the bleeding edge, just yet. It's exciting enough pulling against the HEAD. ;-) That said, when it's officially tagged with a deployed version, I'll definitely want to pull against that.\n\nClosing for now. Thanks for the heads up.. @philsquared There will be much celebrating (re: my 'Python affectations...).. @horenmar Thanks! I consider this a LOW priority, however, as contrasted with threading support. That one is a HUGE deal right now.. @horenmar Wow, thanks! I was going to suggest, I would be okay with a second include shimming in std::chrono support if it adds that much overhead.\nSomething like:\n```C++\ninclude \n```\n. @philsquared Looks good, thanks so much.. @dan-ryan Personally, I have not had a need for it in awhile, to be honest.\n@horenmar The documentation links are broken, BTW.. @horenmar What do we mean by \"back port\"? I am now pulling against the latest v2 develop.4 tag. Would you branch a develop.5 branch, please? Thanks!. @horenmar @philsquared Nice, thank you!\nWhat about for user exceptions? I don't feel they are so special, or the details may be unknown to Catch, per se, but I want to provide my own Matcher hooks. ;-). @horenmar Perhaps I misread. This is a unit test, with the \"SpecialException\" being the test case? So for user exception, I specify something like this:\nC++\nCHECK_THROWS_MATCHES(throws MyException(), MyException, MyExceptionMatcher());\nREQUIRE_THROWS_MATCHES(throws MyException(), MyException, MyExceptionMatcher());. @horenmar Great thanks!. I verified, Git is fine at the command line. However CMake is attempting to interface with it is broken.\n```CMake\n$ git clone git@github.com:philsquared/Catch.git -b v2.0.0-develop.4 catch2/\nCloning into 'catch2'...\nremote: Counting objects: 17525, done.\nremote: Compressing objects: 100% (66/66), done.\nremote: Total 17525 (delta 46), reused 58 (delta 24), pack-reused 17431\nReceiving objects: 100% (17525/17525), 8.06 MiB | 3.96 MiB/s, done.\nResolving deltas: 100% (11574/11574), done.\nNote: checking out 'bd46f66754f11b5644913f6eb8a1900971f3e0ad'.\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\ngit checkout -b \nChecking out files: 100% (260/260), done.\n```\nThat said, would it be possible to rename the tags, or at least re-tag at your earliest convenience with a sane (to CMake) tag?. To be clear what is I am trying to do:\n```CMake\nset (CATCH_GIT_TAG v1.10.0)\nset (CATCH_GIT_TAG v2.0.0-develop.4)\nset (CATCH_GIT_TAG bd46f66754f11b5644913f6eb8a1900971f3e0ad)\nExternalProject_Add (download_catch\n    GIT_REPOSITORY git@github.com:philsquared/Catch.git\n    GIT_TAG ${CATCH_GIT_TAG}\n    GIT_PROGRESS ON\n    SOURCE_DIR ${CATCH_GIT_REPO_DIR}\n    LOG_DOWNLOAD ON\n)\n```\nThis worked just fine for the v1.10.0 tag.\n. Working around this issue, now I am receiving some 45 compiler errors related to Catch2:\nFor instance:\nSeverity    Code    Description Project File    Line    Suppression State\nError   LNK2019 unresolved external symbol \"public: __cdecl Catch::LeakDetector::LeakDetector(void)\" (??0LeakDetector@Catch@@QEAA@XZ) referenced in function \"void __cdecl Catch::`dynamic initializer for 'leakDetector''(void)\" (??__EleakDetector@Catch@@YAXXZ)  sock    G:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\build\\swig\\cpp\\tests\\main.obj   1. That was with the \"normal\" include/catch.hpp. With the single_include/catch.hpp:\nSeverity    Code    Description Project File    Line    Suppression State\nError   C2039   'OutputDebugStringA': is not a member of '`global namespace''   sock    G:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\repos\\catch2\\single_include\\catch.hpp   6035    \nError   C3861   'OutputDebugStringA': identifier not found  sock    G:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\repos\\catch2\\single_include\\catch.hpp   6035. And it's not as simple as just including WinBase.h when CATCH_PLATFORM_WINDOWS is defined as this invites some 300+ more errors.\ni.e.\n~~#ifdef CATCH_PLATFORM_WINDOWS\ninclude \nendif // CATCH_PLATFORM_WINDOWS~~\nActually, my mistake. Including Windows.h, not WinBase.h\n```C++\nifdef CATCH_PLATFORM_WINDOWS\ninclude \nendif // CATCH_PLATFORM_WINDOWS\n```\nBut still, that yields what looks like 100+ Catch errors.. Okay, well, if I checkout against the HEAD, it appears to be \"fixed\" and \"stable\". Talk about bleeding edge, though. Can I request that your develop tags/branches reflect at least BUILDING outcomes? If not also \"working\" outcomes. May not be feature complete as to where you intend to land after all, but at least it would be stable. Thank you!. @philsquared I've posted what I discovered. Not all directly Catch related. Some of which is CMake not playing nicely with \"user-specified\" tags. But still, I've documented the steps I took. Without I turning into more of a rabbit hole than I'd like it to be for me right now.. @repi I'm sure it's for REQUIRE as well. I just called out INFO as a first observation. Point is, thread-safety is A MUST.. @philsquared I'd say with the advent of std::thread, there really is no excuse for it to be a wish. In other words, that's not strong enough of a word, IMO.. @repi @philsquared Yes, I think we agree on the what. Now is a question of the when, which may necessarily be predicated on the who.. No idea; I've moved on to other non-C++ areas at the moment, so this is not on my radar screen apart from peripheral view.. Ah, I see. Thanks!. Which error report is producing:\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nreconnect.exe is a Catch v1.10.0 host application.\nRun with -? for options\n\nC style NNG reconnect works\n  We can create a pipeline\n  Dialing before listening works\n  We can send a frame\n\nG:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\swig\\cpp\\tests\\core\\reconnect.cpp(12\n8)\n...............................................................................\nG:\\Source\\Spikes\\nanomsg\\cppnngswig-working\\swig\\cpp\\tests\\core\\reconnect.cpp(15\n3): FAILED:\n  REQUIRE( ::nng_msg_len(msgp) == std::strlen(hello.c_str()) )\nwith expansion:\n  0 == 5\nwith messages:\n  Dialing push on address: 'inproc://nng'\n  Pull listening on address: 'inproc://nng'\n===============================================================================\ntest cases:  1 |  0 passed | 1 failed\nassertions: 23 | 22 passed | 1 failed\n```. And for my C++ wrapper repo. Again it's the reconnect project, Catch unit tests.. Turns out my confusion was a semantic misunderstanding in the domain. Sections are okay after all; not the issue.. Yes, that's precisely what I'm talking about. Can a parent-parent scope be added to buffer for this situation?\nLike I said, it's when the resource is cleaned up at stack unwind. Smart pointer resets itself, dtor encounters exception.. One workaround, I suppose I could introduce a superfluous parent SECTION. However, I'm really trying to stay focused just on the unit tests I want to perform without the superfluity, if you will.. @horenmar I'm not sure what you mean by \"in scope\" after the test case is constructed. I'm not attempting to reference any tags after test case construction, nor is that the intended purpose. I am using Catch::Tags as a helper to [build][the][syntax] and that's it. Afterwards, Catch runs with the tag string as-is, how ever they are provided. Given that as the stated objective, I'm not sure how that can be considered \"UB\".\nOne caveat, however, is that Catch v1 uses const char for test case parameters, so the caller must invoke std::string().c_str().  In Catch v2, that's promoted to a std::string friendly construct, so the c_str() requirement goes away.. @horenmar Yes, good points. For a use case such as these, ownership of the memory is tricky. I'd consider \"test case\" the owner of the memory, once it is passed to whatever receives the buffer. If there's another behavior, I don't know what it is. All I know is it seemed to work just fine, at least for v1. Untested in v2*, but I don't see why it wouldn't work, assuming consistent ownership principles. My two cents.. Great thanks!\nTags is a helper I came up with so that I could enumerate tag names from listed names without [worrying][about][syntax][issues].\nIt would be better if TEST_CASE supported std::string instead of const char*, but that's an acceptable tradeoff for me.. Exactly. I'd like to just list my tags in declarative fashion, and push the syntax away a bit.\nAh, I see. Nice! I'll have a look-see at that.. I see. It's a difference between v1 and v2, delta from NameAndDesc to NameAndTags, const char to StringRef*.. StringMaker. Perfect, thank you.. Great, thank you!. Perfect, right along the lines what I was needing, a way to unmask the {?}. :+1: . Great! I like the idea of dropping otherwise superfluous (C++11 and better) definitions. Thank you.\nAlso, using my Catch::Tags(...), which returns std::string, no longer necessary to convert to std::string::c_str(). The conversion will work seamlessly, but is unnecessary since v2 supports std::string.. Cheers! :+1: . May have spoken too soon. I'll just append here as necessary.\n\nI was using Catch::Matchers::Not(...), in particular Not(Contains(...)). I could hazard a guess that !Contains(...) would work? Edit: seems to work, but just to clarify whether that is the appropriate migration path.. Thanks I'll look into both of those.. @JoeyGrajciar So, to clarify, CAPTURE is what I am looking for? That or CHECK_NOFAIL. I'll have a look-see.. Okay, so something like this, assuming the member:\n\nC++\nint test;\nThen in the match method, casting away the constness:\nC++\nconst_cast<int&>(test) = 1;\nDuly noted, thank you.... Output something like this:\n```\n  REQUIRE_THAT( capitalized_words, AllAreCapitalized() ) with expansion:\n  { \"kLj1c\", \"y1DXSv\", \"wf7nnZf\" } All words must have length and be capitalized.\n  'kLj1c' was not capitalized\n===============================================================================\ntest cases: 1 | 1 failed\nassertions: 1 | 1 failed\n`. I could just combine use of theoperating on my collections with a simpleCHECKorREQUIRE`` .... ",
    "patrickmmartin": "Hi Phil: thanks for the response.\nWell, with reference to working: I already have a working test suite, which only required a handful of edits to the current trunk.\nIt's working out pretty well so far, though I deliberately haven't been pushing the envelope as I suspect various compiler edge cases from the past will come crawling out.\nI have specifically given up on working through getting the self-tests ported over to Borland though - one for another day.\nNevertheless, it's the only test suite I've got working at.\nI do have some suggestions that could go in trunk as it happens.\nAnd thanks for bringing Paul to my attention - I'll broach the topic with him.\n. I've tried Borland C++ Builder 5 (tricky to obtain) and the free compiler 5.5 http://edn.embarcadero.com/article/20633/\nI've made a start on  \nhttps://github.com/patrickmmartin/Catch/tree/BCB5support\nSo far the I have a version of the Tutorial from the Wiki working with a minor adjustment..\nCommand line flags and other features work as expected.\nException handling for the VCL style exceptions required a change, as the test project was crashing instead of handling the exception.\nUpdate; after \"reading the fine manual\", the situation is this for VCL exceptions:\n- they can only really be thrown by pointer\n- the use of throw;  in the CATCH handling code is not supported for VCL exceptions\nI don't suggest attempting to support VCL exception rules; I expect a translation approach would be simpler for people to use.\n. You can also add \nIBM XLC on AIX (POWER BE) - XL 11.1.0\nSolaris (SPARC BE)  SunPro 5.12.0\n. Thanks Phil, I'm happy to contribute if I can.\nI've added some actual instructions and fixed a problem allowing the free command line compiler instructions to work out of the box.\nHowever, there's no rush, and placating the BCB 5 compiler may present some challenges.\n. Sure. Great stuff.\nInteresting thing: I had completely missed the messages going to stderr, despite having plenty of tests with no checks...\nCould you point in the direction of what they should look like and where they're generated?\n. I see - no, I meant to convey something else\nTEST_CASE( \"example/empty\", \"I should fail, because I serve no purpose (yet)\" )\n{\n}\nWhat I intended was that in the context of a TEST_CASE block, if (for whatever reason), there is no CHECK or its moral equivalent performed, the test should get a special failure state.\n. Would you like me to rough out an initial draft, perhaps?\n. Excellent - I merged latest into my hacked up version and found 2 empty test cases.\n. ",
    "DavidEGrayson": "Catch works for me on gcc 4.9.2 (mingw-w64) provided by the MSYS2 project.  I have used both the 32-bit and 64-bit versions of their mingw-w64 compiler and it works fine.  I have not run the Catch test suite though.\n(For a while there, I thought there was a serious bug because I updated from version of 1.1 to 1.2.1 without recompiling all of the binaries in my test suite.  That caused every CHECK to fail if the value was true and succeed if the value was false, which is the opposite of correct.  Sorry if you saw some of my earlier messages that I deleted.)\n. I started a discussion there: https://groups.google.com/forum/?fromgroups#!topic/catch-forum/Z03uq5ujRgQ\n. Great!  I'll fix my MSYS2 package to use version 1.2.0!\n. The README.md file is currently directing people to to the \"develop\" branch to download \"the latest, single header, version\" so I thought you were using the \"develop\" branch for releases.  After reading this thread I now think that I was wrong.  I think using git tags, semantic versioning 2.0.0, and maintaining a change log in the repository is the best practice.\nI go into more detail about this in a discussion I started on the Google Group:\nComprehensible versioning for Catch\nHere are some related issues on GitHub as well:\nhttps://github.com/philsquared/Catch/issues/447\nhttps://github.com/philsquared/Catch/issues/430\nhttps://github.com/philsquared/Catch/issues/197\n. In the meantime, I think something like this should work:\nbool thrown = false;\ntry\n{\n  do_something_that_throws_an_exception();\n}\ncatch(const myexception & e)\n{\n  REQUIRE(std::string(e.what()) == \"something\");\n  thrown = true;\n}\nREQUIRE(thrown);\n. If it's case insensitive, I probably wouldn't use it because I want to detect typos in exceptions that my code generates.  (I'm using catch to test a library that will have 3 different implementations for 3 different operating systems, and my tests help ensure that the error messages produced by my code are consistent on all those different platforms.)\nActually, I often want to test the class, the message, and some custom functions on my exceptions, so most of those macros wouldn't work for me.  If REQUIRE_THROWS_AS just returned the exception that got thrown, maybe that would work.  I could imagine a test like this:\nauto error = REQUIRE_THROWS_AS(throwCustom(), my_error);\nREQUIRE(std::string(error.what()) == \"something\");\nREQUIRE(error.custom_method() == something);\nThat's just my two cents.  I don't think Catch needs to support every single use case and I am happy to keep writing try/catch in my tests.\n. Maybe just call it \"Catch Framework\".  That's what I type into Google these days to find it. \n. Well what file is the error occurring in?  If it's in your own code, maybe you could fix it.  If it's in the Arduino core code, I would suggest that you not attempt to compile that code for x86_64, because it is meant to run on various microcontrollers and there will be a bunch of portability issues like this.\n. I too think there might be a memory leak in Catch somewhere.  When I run my tests on Windows 8.1 64-bit with Dr. Memory, the output of Dr. Memory says:\n```\nError #1: POSSIBLE LEAK 12 direct bytes 0x02fabb80-0x02fabb8c + 0 indirect bytes\n0 replace_malloc                                        [d:\\drmemory_package\\common\\alloc_replace.c:2377]\n1 libgcc_s_dw2-1.dll!?                                 +0x0      (0x6eb550be )\n2 libstdc++-6.dll!?                                    +0x0      (0x6feb827f )\n3 Catch::Section::~Section                              [C:/msys64/mingw32/include/catch.hpp:7085]\n4 _CA_T_C_H__T_E_S_T____5                         [C:/.......cpp:15]\n5 Catch::FreeFunctionTestCase::invoke                   [C:/msys64/mingw32/include/catch.hpp:5818]\n6 Catch::TestCase::invoke                               [C:/msys64/mingw32/include/catch.hpp:6723]\n7 Catch::RunContext::invokeActiveTestCase               [C:/msys64/mingw32/include/catch.hpp:5417]\n8 Catch::RunContext::runCurrentTest                     [C:/msys64/mingw32/include/catch.hpp:5389]\n9 Catch::RunContext::runTest                            [C:/msys64/mingw32/include/catch.hpp:5228]\n10 Catch::Runner::runTests                               [C:/msys64/mingw32/include/catch.hpp:5547]\n11 Catch::Session::run                                   [C:/msys64/mingw32/include/catch.hpp:5678]\n```\nI am compiling my tests using mingw-w64 inside the MSYS2 environment.\nI'm sorry that this isn't a complete bug report with a minimal test case.  Just thought I would mention it quickly in case it is useful.\nEDIT on 2015-07-05: Never mind; this appears to either be a problem with my toolchain or with Dr. Memory; after much work I was able to reproduce it without using catch.\n. Did you try making it so that default: is a label for the same statement as one of the other cases?\n.cpp\nswitch(something)\n{\ncase 1: break;\ncase 2: break;\ndefault:\ncase 3: break;\n}\n--David\n. No, it doesn't seem fragile to me.  You would basically put all the cases you don't care about next to the default: label.  The line breaks should make it be clear what is going on.\n``` .cpp\nswitch(something)\n{\ncase 1:\n  do_something_1();\n  break;\ncase 2:\n  do_something_2();\n  break;\ndefault:\ncase 3:\ncase 4:\ncase 5:\n  break;\n}\n```\nDoes it still look fragile to you?  If so, why?\n. Either ordering seems fine.\n. Maybe this type of discussion should be on the Google group.\nI discovered Catch after using Ruby and RSpec a lot, and I like Catch because it is very similar to RSpec.\nThis is what I might write in RSpec:\n``` ruby\ndescribe FooBarClass do\n  context \"when it is constructed from nil\" do\n    before do\n      @foobar = FooBarClass.new(nil)\n    end\nit \"has a size of 0\"\n    expect(@foobar.size).to eq 0\nend\n\nit \"has a length of 0\"\n    expect(@foobar.length).to eq 0\nend\n\nend\nend\n```\nThis can be directly translated to Catch:\ncpp\nTEST_CASE(\"FooBarClass\")\n{\n  SECTION(\"when constructed from NULL\")\n  {\n    FooBarClass foobar(NULL);\n    SECTION(\"has a size of 0\")\n    {\n      REQUIRE(foobar.size == 0);\n    }\n    SECTION(\"has a length of 0\")\n    {\n      REQUIRE(foobar.length == 0);\n    }\n  }\n}\nI think of this code as defining two different, independent test cases, and I want those test cases to each have their own independent setup so that the order of the test cases is less likely to matter, and they are less likely to have an effect on each other.  And that's exactly how it works in RSpec.\nIf you want the test cases to share some instances of setup variables, the only real reason to do that would be if the setup is particularly slow or expensive in some other way.  If it's fast and cheap, you might as well repeat it for each test case.  RSpec has a before(:all) feature you could use for shared setup that would only run once.  Catch doesn't seem to have that, but that's OK for my purposes.\nIf you want, you could combine your two THEN blocks into one, and use CHECK (which is a non-fatal error that allows the test to continue) instead of REQUIRE.\n. I started a discussion about this on the Google Group:\nComprehensible versioning for Catch.\nSince I haven't heard otherwise from @philsquared, I'm assuming that the develop branch is used to keep track of the current stable release of catch, and that if you use anything newer then you are using something that is more experimental and bleeding edge.  So we are using the develop branch in the new MSYS2 package for catch.\n--David\n. Can you put it inside the TEST_CASE after all the SECTIONs?\n. It sounds like that code wasn't running.  Do you have any failing REQUIRE lines in the sections above that code, an early return, or anything throwing an exception?\n. I had trouble with this myself until I realized that my exception class needs to publicly inherit from std::exception.  Is that how your exception classes are defined?\nclass foo_error : public std::exception\n{\n};\n. That works for me, thanks!  I suppose it's time to close the issue.\n. If you really want to define your own version of new, I suppose you will have to find some way to disable Visual Studio's version.  The compiler is telling you that it found two versions of new and doesn't know which one to use.\nYou could look in \"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\new\" and see if the definition of the operator (on line 59) is surrounded by any ifdefs, and consider whether you can use an appropriate macro definition in your compiler settings to disable it.\nThis doesn't really have anything to do with Catch, right?  Catch is in the business of defining main, but it is not in the business of defining new as far as I know.  I wouldn't expect Catch to provide documentation on how to use advanced features of your C++ environment like redefining new.\n. Sorry, GitHub is displaying a ton of commits, but I only made one.  This pull request is based on your develop branch, not master, and I should have specified that when making the pull request.\nSee the new pull request at #471.\n. This snippet of code from GCC confirms that my pull request does the right thing:\n```\nif __cplusplus >= 201103L\ntypedef decltype(nullptr) nullptr_t;\nendif\n```\n. Yep, your changes look good, and I just confirmed with testing that the latest version from https://raw.githubusercontent.com/philsquared/Catch/develop/single_include/catch.hpp works fine with gcc 5.2.0 in the default language mode.\n. I was going to make a pull request for this feature at some point, because it would also be useful for catching memory leaks on Mac OS X.  That page explains:\n\nMost unit testing code executes the desired code paths and exits. Although this is perfectly normal for unit testing, it creates a problem for the leaks tool, which needs time to analyze the process memory space. To fix this problem, you should make sure your unit-testing code does not exit immediately upon completing its tests. You can do this by putting the process to sleep indefinitely instead of exiting normally.\n\nUntil then, @nicolaje, you can define your own main function (looking at the one in catch.hpp as a reference) and do whatever you want at the end of the tests.\n. This is what I did:\n``` cpp\ndefine CATCH_CONFIG_RUNNER\ninclude \nint main(int argc, char ** argv)\n{\n    // If the last argument is \"-p\", then pause after the tests are run.\n    // This allows us to run \"leaks\" on Mac OS X to check for memory leaks.\n    bool pause_after_test = false;\n    if (argc && std::string(argv[argc - 1]) == \"-p\")\n    {\n        pause_after_test = true;\n        argc--;\n    }\nint result = Catch::Session().run(argc, argv);\n\nif (pause_after_test)\n{\n    printf(\"Press enter to continue.\");\n    std::string s;\n    std::cin >> s;\n}\n\nreturn result;\n\n}\n```\nWaiting for user input is nicer than just spinning in an infinite loop, taking up CPU time.\n. I thought we fixed this already when we discussed it here: https://github.com/philsquared/Catch/pull/471\nWhy was passing --std=c++11 to GCC 5.2.0 not enough to make sure nullptr is defined and fix @czipperz's problem?\n. There are some free hosting options from Microsoft Azure; maybe those would work for testing Catch with a few versions of Visual Studio.\nIf could run some service on my Windows machine that quietly assists with testing Catch in the background, I probably would.  It would be like SETI@Home but for software testing.  Just a random thought.\n. @nabijaczleweli Did you compile with -Wall -Wextra?  Maybe try adding -pedantic as well.  Sorry that I didn't post a minimal example.  I can do that later.\n. You need to use --std=gnu++11 and -Wall to reproduce the issue.\nHere is my code:\n```\ninclude \"Catch-1.3.5/single_include/catch.hpp\"\nvoid foo()\n{\n    REQUIRE(1 == 2);\n}\n```\nHere is the shell session reproducing the issue:\n```\n$ g++ -v\nUsing built-in specs.\nCOLLECT_GCC=D:\\msys64\\mingw64\\bin\\g++.exe\nCOLLECT_LTO_WRAPPER=D:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/5.3.0/lto-wrapper.exe\nTarget: x86_64-w64-mingw32\nConfigured with: ../gcc-5.3.0/configure --prefix=/mingw64 --with-local-prefix=/mingw64/local --build=x86_64-w64-mingw32 --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --with-native-system-header-dir=/mingw64/x86_64-w64-mingw32/include --libexecdir=/mingw64/lib --with-gxx-include-dir=/mingw64/include/c++/5.3.0 --enable-bootstrap --with-arch=x86-64 --with-tune=generic --enable-languages=c,lto,c++,objc,obj-c++,fortran,ada --enable-shared --enable-static --enable-libatomic --enable-threads=posix --enable-graphite --enable-fully-dynamic-string --enable-libstdcxx-time=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-version-specific-runtime-libs --disable-isl-version-check --enable-lto --enable-libgomp --disable-multilib --enable-checking=release --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-libiconv --with-system-zlib --with-gmp=/mingw64 --with-mpfr=/mingw64 --with-mpc=/mingw64 --with-isl=/mingw64 --with-pkgversion='Rev2, Built by MSYS2 project' --with-bugurl=http://sourceforge.net/projects/msys2 --with-gnu-as --with-gnu-ld\nThread model: posix\ngcc version 5.3.0 (Rev2, Built by MSYS2 project)\n$ g++ -c --std=gnu++11 -Wall test.cpp\ntest.cpp:5:0: warning: ignoring #pragma gcc diagnostic [-Wunknown-pragmas]\n     REQUIRE(1 == 2);\n```\n. ",
    "rollbear": "For Linux you can also add gcc 4.9 and 5.1, plus clang 3.6.\n. ..hash-tnie, eh? superficially combining orthogonal ideas, but I\"m sure you have a clever spin on it. Care to share? I may let you in early on heap of mini-heaps, but I fear I digress...\n. override and final aren't keywords in C++11/14, they're context sensitive. You're allowed to have variables, parameters, types, functions named \"override\", so hiding them with the preprocessor is not likely to work.\nIt would, of course, be possible to add a CATCH_OVERRIDE macro, that expands to nothing in C++98/03 and to override in C++11/14.\nNot that I think there'd be much gain. As a Catch user, you don't see the implementation of Catch so its internals are of no concern. It could help developers of Catch a bit, though.\n. I think this would be great, and having experience working with test systems that do this, I can speak from experience. The stability in the face of crashing bugs is a nice bonus, but it's a minor thing. The big thing is the isolation - that you never have to worry about what state a test case leaves the system in. Even horrible designs with singletons (shudder) become reasonably easy to test, since whatever messy state you leave the singleton in is forgotten once the test has run to completion, regardless of whether it passed or failed.\n. There's a bug report that CLion doesn't respect the __LINE__ macro, which causes this kind of problem for pretty much all C++ unit test and mocking frameworks.\nSee https://youtrack.jetbrains.com/issue/CPP-2801 for details.\nThere's another report for the __COUNTER__ macro.\nhttps://youtrack.jetbrains.com/issue/CPP-820\n. You may want to +1 and/or star mark them to give Jetbrains your sense of urgency.\n. You may want to view https://github.com/rollbear/Catch/tree/develop\nI presume (and accept by default that) there are good reasons Phil hasn't accepted the PR, but I do believe something along those lines would be good.\n. ",
    "BrendanSimon": "I've had success with Catch using Embarcadero C++ Builder XE7 (was Borland), but only using the the 64-bit version of the compiler, which is based on clang (v3.1+SVN).\nThe 32-bit compiler is proprietary and claims to be C++98 compliant, but Catch will not compile, so am guessing it's not fully C++98 compliant?\nNote: the newer versions of Embarcadero (10.2 Tokyo, and possibly 10.1 Berlin?) have migrated to clang based 32-bit compilers (and 64-bit of course), so I presume they would work.  These are based on clang v3.3 so should be C++11 compliant.. I've just tried using the IAR EWARM (v7.8.4) compiler to run on an ARM embedded system, and it fails to build.\nI had to add #include <stddef.h> as size_t was undefined.  An easy fix, but why?\nMajor problem is stack_t does not exist in any header files.\nHow important is stack_t and can be be stubbed out somehow to get Catch working?. I have Catch working on IAR EWARM (v7.8)\nI modified the single header version (v1.10.0) for now (if __IAR_SYSTEMS_ICC__ is defined)\n\n#define CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS\n#define CATCH_CONFIG_COLOUR_NONE\n#include <stddef.h>    // for size_t\n#include <c/time.h>    // for sprintf\n#include <c/time.h>    // for time_t\nUInt64 getCurrentTicks() { return 0; }    // FIXME: later !!\nchange it->front() to *it->begin()\nimplement my own main() (as per the docs)\nincreased IAR stack size from 0x400 to 0x1000\nincreased IAR heap size from 0x200 to 0x4000 (generally don't use malloc)\n\nI will look at implementing this properly in the repo and open a PR :)\nAre there any configurations to reduce memory usage ??. I'll stick with the 64-bit clang compiler and/or try their free 32-bit clang compiler, which they recently announced as a free download (hopefully I can get it to integrate with the older XE7 IDE).. Not really that keen.  It's just a tool that we use at work.  I managed to get another single header test framework to compile with just a one line change, so thought it might be simple for Catch to be ported too.\nEmbarcadero is reasonably good at what it does, but C++ is a second class citizen to Delphi (which we don't use).  Even the recent clang version has been stuck at v3.3 for quite a while (so no C++14 support).  \nNow, I do remember that Embarcadero recently sent an email/advert stating they have released a free downloadable version of a 32-bit clang port (I think for the 10.1 Berlin or 10.2 Tokyo releases), so I might give that a go and see if I can get the XE7 IDE to play nice with that.  That would be a better option than using the legacy 32-bit compiler.. It's historical a choice for the company.  Apparently it was the best IDE by far at the time it was chosen, and is used for RAD development and simulation of C code used in embedded targets.  The support for Android, macOS, iOS, Linux, Windows seems advantageous (though we've only ever targeted Windows).  There's also a reasonable library of code that gets reused, as well as a comfort and knowledge base built up with senior developers, so the effort to switch to something else is a factor.. ",
    "philippeVerney": "In order to help to centralize information\n- VS2013 (and prior versions) is not supported with Catch2 (#1123 ). Thanks for your quick answer. It confirms what I thought.\nI am going to stay with Catch 1.x for a while (I still have VS2013 support in mind). My main goal to upgrade to Catch2 was to avoid some Codacy warnings but Catch2 also have Codacy warnings. I'll just ignore catch.hpp with codacy.\nThanks again!. I think this Codacy report page is public and then you should look at it : https://www.codacy.com/app/F2I-Consulting/fesapi/pullRequest?prid=1132125\nJust to be clear, I don't have a need for these warnings to be resolved. It was just \"nicer\" imho to not have warnings on the report. Furthermore, I can ignore a file presumably in Codacy.. I close this issue since Codacy warning is irrelevant in this topic and probably also in a bigger scope. I did not enough look at Codacy report to judge if it is worse to study the warnings or not.\nThanks again for the quick and clear answer about my issue! I appreciate.. ",
    "ibond": "No problem, I imagine that you can take the general idea even if the pull isn't compatible with the new reporting interface.  Feel free to ask if you have any questions.\n. It works in the output window (I can double click the error message and it brings me to the right file/line), but it looks like it's missing the \"error :\" or \"warning :\" text on the output which is what is used to populate the Error List (In VS2010 View->Error List).  I think the multiline error message would also not show up in the Error List, but the text that's printed from the basic reporter should work.\nhttp://blogs.msdn.com/b/msbuild/archive/2006/11/03/msbuild-visual-studio-aware-error-messages-and-message-formats.aspx\n. ",
    "d-led": "so, ist it coming up? Bump\n. Post-mortem: I'm not sure if it's relevant,but there's a nice single header platform independent wrapper for console colors,that apart from ansi can do win32 colors,and has a wtflp :-) license\nhttps://github.com/tapio/rlutil\n. I've stumbled upon two indicators that there are memory leaks. One: used a scoped mtrace on linux, and get an yet unidentified leak by simply asserting something using REQUIRE. On windows using _CrtMemDifference the leak seems not to exist (checking the same scoped REQUIRE assertion).\nAnother possible leak is detected using CodeChecker (based on clang tools):\n\nThe latter is probably unrelated to the former, but I haven't yet dug into the issue.. @horenmar perhaps.\nAs for REQUIRE, I will try to build a minimal example to reproduce it when I get a bit of free time. Those that triggered were in the form REQUIRE(true).. @horenmar couldn't reproduce in a self-contained simple example using tracey (no leaks after all tests have run). I suppose, it might be legitimate that memory locally grows after one assertion, but will be freed upon finishing the test run.. @philsquared yep. Agree. No action needed, I think.\nP.S. I guess we did briefly talk about it Munich :). ",
    "atultripathy": "Thank you for the framework. It is very easy to use.\nI have a query too. Kindly explain how can i use regular patterns to specify which tests i want to run.\nI have created tests like.\n1/2/3/4/submit\n1/2/3/5/perf\n1/2/3/4/submit\n1/2/3/5/perf\nI want to run only the test cases which end with submit for instance. That would be very helpful. Thanks\n. Thanks a lot for the help :)\nHoping the issue number #114 also gets fixed soon.\n. ",
    "phcerdan": "Same request here. What about a new macro: SECTION.(\"visualizeTag\", \"description\") hidden by default, so it runs only when specific command line argument is provided, ie. -st \"visualizeTag\".\nCannot that be implemented using if statements? However, it would require to have user provided command line arguments.\n. Hitting this issue, but was hard to find. How is this closed if not solved?\nEDIT: Apologies, it is just that the latest single-header catch.hpp doesn't include it yet.. @arnavb I copied the fixed line into the old single header catch.hpp :sweat_smile: . ",
    "kpx1894": "Thanks, somebody from my team confirmed that now it works. Sorry for delay,\nI have not had a chance to test it myself.\nOn Oct 10, 2012 6:26 PM, \"Phil Nash\" notifications@github.com wrote:\n\nI'm going to close this assuming it is fixed. Please re-open if that is\nnot the case\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/philsquared/Catch/issues/113#issuecomment-9311953.\n. \n",
    "gnobbi": "Is there any update i ran into the same Problem.\n. ",
    "godlygeek": "If it's easier for you, I can redo this once you check in your moving-things-around part.  It didn't take me too long to do it.\n. This merged cleanly, actually - give the above changeset a look when you get a chance.\n. The warning that shows up there the most is warning C4512: 'Catch::ReporterConfig' : assignment operator could not be generated\nHere's what it means: from the MSVC Docs (which don't mention the particular case that's being hit here) and from Stack Overflow which does.\nApparently MSVC warns whenever it can't create a compiler-generated assignment operator, and in this case the class contains a reference as a member variable - references can't be reseated once bound, so a default assignment operator that just does a bitwise copy wouldn't be valid.  Most compilers don't warn about this, they just make it an error if you try to call the assignment operator.\nI don't have an MSVC to test this with, but it seems like the simplest solution would just be to define a private assignment operator with an empty body.\n. samaursa, can you give godlygeek/Catch@3611d8bd30753356e3dc9b2d95c4ba537b405aab a shot and see if it fixes these warnings?  It should remove all but one of the warnings, I think - I'm still not sure what's up with the long template one that ends in a signed-vs-unsigned warning.\n. @samaursa, only one object file can have the #define CATCH_CONFIG_MAIN, so you can't put it in a header file that's included by multiple cpp files.\n. I hit a place today where this would have been useful.  I have a for loop that was looping over elements of 2 collections and REQUIRE'ing equality.  It would have been nice to have a SCOPED_INFO(i) so that, if 2 elements didn't match, I would find out what their index was (in this case, I was checking some array bounds conditions, so the index into the collection actually mattered).\n. The modern unix-ish way would be to say that everything that starts with a - is an option, except that -- explicitly ends the option list so anything after that is treated like an argument rather than an option even if it begins with a dash.\n. http://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html might be handy here for selectively disabling individual warnings that aren't solvable.  Though #pragma diagnostic push and pop were introduced in gcc 4.6.\nI'd say that, if you wanted to go down the warning suppression route, that for gcc 4.6 and higher it would be better to suppress individual warnings at the start of catch.hpp and pop back to the old state at the end, but for 4.5 and earlier the best solution might be the #pragma GCC system_header idea...\n. Any thoughts about having CATCH_BREAK_INTO_DEBUGGER call abort() on platforms that don't have any platform-specific command for breaking into a debugger?  Or, alternately, gcc's __builtin_trap()?\nTo me, that makes more sense than having it be a no-op - it's not perfect, but it seems better than nothing (pun intended :).\n. Or, slightly less portably but maybe slightly better, raise(SIGTRAP); will interrupt gdb on that line if you're running inside it, and it can be continued past (unlike __builtin_trap() and abort()), and should work on most Unix platforms.\n. Well - my $0.02 is that if the user is passing the flag for \"break into debugger on failure\", then raise(SIGTRAP) is a very good idea.  If a debugger is attached, then the debugger will be stopped at the failing test, and the execution can be continued once the programmer has inspected what he needs to inspect.  If no debugger is attached, the user can instead get a core file, which ought to also be able to help them figure out what went wrong.  I think both of those scenarios are more useful than just silently ignoring the flag.\nThe process dying when there's no debugger isn't the best possible outcome, and it's not as good as the platform-specific versions you have for Mac and Windows, but I think it's a much better trade-off than having the \"let me debug failures\" flag get silently ignored on most Unixes.\n. ",
    "nanoant": "Knock, knock. Can we have this integrated as well? ;)\n. Yay, indeed if this one is about to disable warnings coming from macro generated code then there's no choice but to disable it globally.\nThanks for your explanation.\n. Phil, no worries. If you prefer I can rebase & update these changes once you got yours pushed to master. This way we will be sure they actually work well after source base refactoring.\n. Well, if I can put my 2 cents. CATCH_CONFIG_USE_POSIX_COLOUR_CODES is undefined by default, right?\nCan we make it defined by default on non-Windows platforms?\nThe reason being is that Windows always gets colours, and Unix not, which makes Catch inconsistent across platforms which is IMHO bad.\nPlease note isatty( fileno(stdout) ) check that ensures that colours actually only get emitted when using real terminal, not inside script or file output.\nBtw. IMHO CATCH_CONFIG_USE_ANSI_COLOUR_CODES is more adequate name.\nP.S. Can you have a look at my other patch (regarding Clang compiler flag misuse)?\n. 1. Agreed, but colors do exists in Unix, i.e. Git, Vim, mc, GoogleTest, recent distro Linux bash commands, even clang compiler gives color output by default, anyway ANSI is a standard, so there's no way it won't work unless you are back in 70ties;) or not running tty, but this is what isatty check s for\n2. Nope, that's not true, ANSI escape 0m, one I used in the patch, resets the colour to default (whatever it is set by the user) that may be white but may be not, so there is no way we ruin console, otherwise other tools (above) would need to have magic capabilities, but they use same means as we do.\n3. All colour sequences are by design ought to be visible on both light and dark background, except when using explicit white and black (not used in the patch)\n4. Indeed all terminals, Mac, Linux, PuTTy colors such as red or green are nicknames for what is defined by the user.\nThe ultimate question is for how many users these colors will serve great value and how many will be annoyed by these.\nP.S. Sorry for possible typos, responding from iPhone with tiny text size;)\n. Oooopsss... selected wrong branch to merge, sorry!\n. I am closing this as it seems to be fixed in Integration branch.\n. Ohh sorry, it was supposed to be merged into Integration. Closing.\n. Closing, will provide new pull request for master soon.\n. @philsquared This is what I did in my original patch, accounting indent at point of use, however this makes the change somehow incomplete, because you need to account this indent as well in while( maxTagLen + maxNameLen > CATCH_CONFIG_CONSOLE_WIDTH-5 ). So it was just safer to put that in maxNameLen = ....\n. ",
    "russel": "Should have said, this is on Debian Unstable (gcc version 4.7.2 (Debian 4.7.2-4)) with Catch master/HEAD 4f13f5b7d3c4e7e9c9453b5740ae7028810e4127\n. I suggest as an interim measure to try and find a way of presenting a better error rather than just allowing the template search to fail like this. This sort of error message is why programmers who have a choice use D, Go, Java, Groovy, Python, anything but C++ ;-)\nClearly I can write one of the two methods suggested as a workaround, but I am not sure I should have to. CUTE doesn't force this, neither does Boost.Test. (Nor did Aeryn.)\nI suspect I am not well enough up on C++11 to really be able to offer any really constructive support. Sorry.\n. F# doesn't exist in my world, it's just OCaml and has a GIL so is useless. I know CPython and PyPy also have GILs, but they have the multiprocessing package.\nI ditched Aeryn for CUTE and CUTE for Catch because Paul told me to ;-)  Aeryn version of the tests used to work fine, so no it didn't suffer these problems, but I now can't prove this as I deleted the Aeryn version of the tests.\n. Catch works fine for me. Don't go with Catch++, trust me on this, I am associated with Zipios++.\nI have never had a problem searching for things associated with Catch, as long as the word test was one of the search keywords.\n. I am sure the strapline \"softly softly catchee buggy\" indicates Catchee might work. \nBTW next generation Catch will have to compete with RapidCheck for traction, property-based testing will become more important that example-based testing.\n. ",
    "adzenith": "wbullaughey,\nWhat version of the header are you using? I opened issue #143 because the single-file download is broken and doesn't build even on modern compilers. Have you tried building from source?\n. Well, I wasn't using NULL on purpose :) Some code returned NULL and it broke the matcher.\n. Hey! Awesome to see that 1.0 is out. Thanks for all your work :)\nI tried cloning the repo and just running the Xcode4 Selftest, but the linker is whining at me and it looks like pretty much all symbols in the project are duplicated (e.g. duplicate symbol __ZN5Catch7AutoRegC1EPFvvERKNS_14SourceLineInfoERKNS_11NameAndDescE in:\n    ~/Library/Developer/Xcode/DerivedData/CatchSelfTest-altmaybwvfegededfwrmorcmeqky/Build/Intermediates/CatchSelfTest.build/Debug/CatchSelfTest.build/Objects-normal/x86_64/MiscTests.o)\nI'm going to try with the single header and let you know. Thanks!\n. Everything passes! Closing. Thanks!\n. I have no idea... I had deleted the original repo that I did that testing in, so I just recloned. I was writing down my steps, except this time it built fine and everything passed. All I did the first time was clone, open the Xcode4 project, and hit \"run\". This time that worked fine. I don't know what to tell you! Guess everything works fine :)\n. Me too! And thanks again for Catch!\n. Looks like there's more conversation about this in https://github.com/catchorg/Catch2/issues/1043.. ",
    "denravonska": "Hmmm, you're right. I thought I tried this with avr32-gcc (the culprit), gcc-4.4.7 on Ubuntu and Clang-4.1 on OSX but I will need to tripple check that. I'll try to come up with a better solution and repost the pull request.\n. I wonder if it's possible to detect in a portable way. Boost seems to have an option to disable certain functionality if wchar_t isn't available, for example BOOST_NO_STD_WSTRING (see Lexical Cast source).\nWould you (Phil) be interested in such a solution or do you prefer to keep it clean?\n. Sorry for the delay. The first attempt has been reverted and replaced with an ifdef. Catch now builds on my AVR32 target.\n. ",
    "jbrwilkinson": "Generators are still in development, so likely some issues. The step size is a really good suggestion.\n. No problem at all.. How does one 'tag' a test?\n. raise(SIGTRAP); would be great - breaks into the debugger if you're running inside one or aborts if not. We've verified this on 3 unix platforms we use. \n. Is it worth referencing other frameworks in the Readme.md so that people can see a quick comparison and why Catch is better/different?\n. Okay, will do.\n. Catch SECTIONs are not always executed sequentially. When a TEST_CASE or SCENARIO is run, the SECTIONs or WHEN/AND_WHEN/THEN/AND_THEN are walked through which both discovers them and also executes them. At the end of the function, it checks the state to see if all SECTIONS or WHEN/AND... were executed for all combinations and, if not, repeats to cover those cases.\nIn your function, you've got a combination test:\nWHEN local is set to false\n    AND_WHEN local is set to true\nand\nWHEN local is set to false\n    AND_WHEN local is set to false\nFor the second pass through your code, the first AND_WHEN block will not be executed, so the REQUIRE (local); will fail and you'll get an infinite loop.\nAs with other testing frameworks, the result of one test shouldn't be depended upon by another test as you cannot predict/guarantee the order of test execution and also the user may have specified a filter on the command line which skips non-matching cases.\n. This would replace all the shell scripts we currently use to deduce test timing - bring it on! :-)\n. We achieve this by positive tagging - if we want to run tests with no dependencies (all components use Mocks or other test doubles), then we specify \"unit\". When we want to run tests that interact with other parts of the system, we specify \"integration\".\nOf course, this requires that your developers remember to tag appropriately. We've found that using some shell or Python scripts like this:\nALL_TESTS=$(test_harness.bin --list-tests | grep ..... | cut .....)\n   for test in $ALL_TESTS; do\n    DURATION=$(time test_harness.bin $test)\n    if $DURATION > ...; then echo \"Test $test is not a unit test\"\n   done\n. Did you try running with --success ?\n. Seems like you'd like a 'quiet' mode that only outputs anything at all when there's a problem?\n. Catch already has a '--durations yes' command line option which can output the duration time of a test, albeit in humanly-readable format. Would this be enough for you? If not, what is missing/different?\n. Although the hayai library looks really easy to use, I don't think you'll get accurate performance timing due to caching and branch prediction effects (see http://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array for a wonderful explanation). \nA more realistic approach would be to run all your tests lots of times and randomly pick which test is next until they've all been tested the desired number of times. Then output the stats.\nWe've seen performance stats lurch wildly between great and awful based on what ran just before it. \n. What is the cause of the slowness at the moment? Lots of tests or some take a long time?\n. Please also try \nREQUIRE_FALSE(opt1 == nullptr);\n. ",
    "lightmare": "Why don't you cast the pointer to intptr_t instead?. Catch already includes <stdint.h> for uint64_t, and fakes it on windows; can just as well fake intptr_t.. That doesn't answer my original question: why not cast the pointer instead?\nc++\ntemplate<Operator Op, typename T> bool compare( T* lhs, int rhs ) {\n        return Evaluator<intptr_t, intptr_t, Op>::evaluate( reinterpret_cast<intptr_t>( lhs ), rhs );\n}\nApart from the fact that it's as unreliable as casting int to pointer, at least it won't trigger warnings.. Actually the minimal example should still trigger the issue. At least on gcc-6 it does.\nIt's a link error, to be clear, and here's why.\nc++\nINFO(AngleRatios<float>::Radians);\nCHECK(AngleRatios<float>::Radians == Approx(1.0f));\nExpression decomposition takes a reference to both sides of the ==. INFO also takes a reference. But there's no definition of AngleRatios<T>::Radians, so linking will fail.\nIf you use the constexpr static member in a larger constant expression, that's fine, because the compiler knows the value from the constexpr declaration, it will evaluate that expression in compile time and synthesize an unnamed variable with internal linkage to hold the result of that expression. For example this links without problem:\nc++\nINFO(AngleRatios<float>::Radians * 1.0f);\nNow, my opinion is that this is a non-issue. It can only surprise you once. Or so I thought. But it keeps recurring. There's been one issue posted with the likes of:\nc++\nCHECK(std::is_pod<T>::value == true);\nThis is so easy to fix in user code, whether you construct a temporary, or add a null.\nAlthough this never needed solving in Catch, expression decomposition got operator overloads capturing bool by value, not reference. That \"fixes\" it for bool only. Perhaps it'd make sense to capture all numeric types by value, but then again Catch being backward-esque, who would've wanted to write that out without the help of <type_traits>?\nedit: shouldn't have responded this late. Somehow assumed this was the linking issue I saw a while ago. So this one was that VC actually compiled and linked this successfully, and then reported bogus results?\n. > @Darelbi Instead I would add a feature that allow a batch script to query the number of tests so that we can loop and invoke it once for each number going from 0 to NUMBER-1.\nYou can achieve that with current Catch already.\nsh\n./runner --list-test-names-only | xargs -d'\\n' -n1 ./runner\n. Text formatting in Catch is buggy. Whether it crashes or not may depend on your compiler / stdlib / debug flags. The example above doesn't crash for me, either (Linux); here's one that does:\nc++\nINFO(\"0aaa_aaaa 1bbb_bbbb 2ccc_cccc 3ddd_dddd 4eee_eeee 5fff_ffff 6ggg_gggg 7hhh_hh\\t  telltail\");\nCHECK(false);\nI fixed this in #592, not sure whether that would also fix the crash on windows.\nAs for the disappearing \\t, that's by design. Tabs are meant as indentation markers, they set the column where subsequent lines of the message (after splitting) start. Which means the first tab that wasn't removed might be considered a bug; but it's more a misuse; you're not supposed to construct long \"staircase\" messages with multiple tabs.\n. @philsquared My description above was inferred from the code, while I was trying to fix the out of range error. The way Text constructor works is it finds the last tab in the first width characters, remembers the position and deletes this tab -- that's why I think it was meant as a mere marker; whether leaving all preceding tab characters in place was intentional or not, I can't say.\n. It's a perfect feature for --help, though, maybe that's what you intended it for.\nSee Boost.Program_options. They also find a tab, remember position and delete it. Multiple tabs cause error.\n. > I suspect that what is being flagged is that an object is created with new as part of the parameter initialisation which, while it will have ownership taken within the function, would leak if the evaluation of one of the other arguments throws. In practise this is not an issue, but it would be nice if we could silence all analyser warnings. This is not as straightforward as it might be because I don't want to add too much extra machinery at this point as it's compiled into every test case - but will see what I can do.\nYou already have these ref-counted, so it'd follow to do the allocations with something the likes of make_shared, returning a Ptr right away, instead of passing a raw pointer down to where it finally gets wrapped in a Ptr. Granted you don't have perfect forwarding, but 3 short templates for taking up to 2 arguments by reference would suffice for most uses within Catch.\n. While this may help a bit, it doesn't avoid a significant part of stringification cost -- dynamic allocations -- you need to allocate AnyTypeHolders instead of strings.\nThere are ways to avoid dynamic allocations with some template tricks.\nedit: deleted part that didn't make any sense, sorry for the confusion.\n. @horenmar I've had a different patch addressing this issue in the stash for a couple months. I'll see if I can rebase on current master.\nThis PR is not viable, IMO. It trades premature stringification of the value for dynamically allocated copy of the value, which may be fine for simple types, but not so good for larger types, and it won't compile with noncopyable types.\n. I think what @hpesoj meant was that (false && (expr)) will use this operator:\nc++\nzzyzx operator && (bool lhs, const tester& rhs);\nif it exists, unless you force the conversion of (expr) to bool\n. Well, when a user writes\nc++\nFoo foo;\nCHECK(foo);\nwe can safely assume foo is convertible to bool; otherwise the macro can expand to ill-formed code just like if (foo); would be ill-formed. My point was that when there is a\nc++\nX operator && (bool a, const Foo& b);\nit will be selected by overload resolution, because it doesn't require any user-defined conversion. The compiler will not convert foo to bool (not even when Foo::operator bool is non-explicit, it's still user-defined conversion) and then built-in short-circuiting &&.\n. In other words, false && !!(expr) is not the right way to work-around overloaded operator &&, because operator ! is not guaranteed to return bool.\nfalse && static_cast<bool>(expr) is the correct solution. The static_cast mimics if (expr) -- it invokes implicit or explicit conversion, and the && is then guaranteed to have a bool on both sides so short-circuits.. I should've asked this much earlier, but what exactly is the purpose of \"it forces the compiler to give it a look\"?\nIn the INTERNAL_CATCH_TEST macro with unary expr, ExpressionLhs::endExpression() already does \"give it a look\" by way of value = (expr) ? true : false. Which by the way is another way to convert to bool, one that I hope MSVC wouldn't complain about.\nSo that suggests another alternative without introducing more overloaded operators:\nc++\nfalse && ((expr) ? true : false)\n// and another that just occurred to me along the way\nfalse && sizeof(expr)\nbut I wonder why any of this would be needed in the first place... :confounded: . > But I think I like the sizeof one even more (with one small change - compare the result to another integer to avoid int-conversion-to-bool warnings)!\nRight, I realized that after posting, and also that the false && would then be unnecessary. I wasn't sure whether just\nc++\n} while ( sizeof(expr) < 0 );\nwon't produce another warning; tried that with gcc and although unsigned_var < 0 triggers -Wtype-limits, sizeof(x) < 0 doesn't. If it does produce warning with another compiler, then this should hopefully silence it:\nc++\n} while ( exprAsBool( sizeof(expr) ) );\n// I'd rename exprAsBool => alwaysFalse. INFO / CAPTURE logs are cleared at the end of scope, so you can do:\nc++\n    {\n        INFO(\"foo\");\n        CHECK(foo());\n    }\n    {\n        INFO(\"bar\");\n        CHECK(bar());\n    }\n. Yes, the file comes with Clara, but even there it looks like it's pulled from somewhere else. Thing is, all the tests of the Text class are here in Catch, not in Clara, and I needed to check that these changes don't break anything else.\n(you can checkout or cherry-pick 1501339 \"SelfTest checks...\" that adds the test case to reproduce)\n. Your operator template says it would return S&, reference to the same type it received; but when given std::ostringstream& (or any other std::ostream derived object, for that matter), the expression in your operator uses std::ostream& operator<<(std::ostream&, int), i.e. it returns std::ostream&\nThe correct way to overload stream output operator is:\nc++\nstd::ostream& operator<< (std::ostream& os, en e)\n{\n    return os << static_cast<int>(e);\n}\n. > en is an enum class so it is not implicitly converted to int so why it will choose std::ostream& operator<<(std::ostream&, int) over more suitable version?\nIt does not choose, your operator function template requests int output:\nc++\n    // this line calls std::ostream& operator<<(std::ostream& os, int);\n    return stream << static_cast<int>(f);\nStandard output operator templates have parameters <CharType, TraitsType> but not StreamType. They all take and return std::basic_ostream<CharType, TraitsType>&. Custom operators should do exactly the same, or if you're lazy like me, write them only for std::ostream& and not care about wchar_t and such.\n\nit works with all streams\n\nNo it doesn't. The reason you might think it works is because you probably use it like this:\nc++\nsomestream << \"a = \" << en::vala; // this accidentally works\nsomestream << en::vala; // this won't compile\nThe first line seems to work because it's equivalent to ((somestream << \"a = \") << en::vala).\n(somestream << \"a =\") returns std::ostream& no matter what the type of somestream is (as long as it's derived from std::ostream&), so your operator template substitutes S=std::ostream and compiles fine. But it won't compile when S is a derived stream type (which happens on the second line).\n. You can write your own macro that wraps the other two in a block:\n``` c++\ndefine IREQUIRE(cond, msg) do { INFO(msg); REQUIRE(cond); } while(0)\nIREQUIRE(expected_prog.size() > 0, \"Program ...\");\n``\n. That's a common idiom to [swallow the semicolon](https://gcc.gnu.org/onlinedocs/cpp/Swallowing-the-Semicolon.html).\n. I don't think functions will help if @timonbaetz needsREQUIRE` - if I'm not mistaken, that escapes the current SECTION and never enters it again.\nBut with CHECKs you can use a function or loop easily. Btw constructing new Foo for each set prevents passing checks from erroneously \"fixing\" subsequent checks.\nc++\nfor (auto val : {\"bar\", \"baz\", \"bazzz\"}) {\n    CAPTURE(val);\n    Foo foo;\n    foo.setBar(val);\n    CHECKED_IF(foo.hasBar()) {\n        CHECK(foo.isValid());\n    }\n}\n. > That's why the section name needs some disambiguating component (the +val in the example).\nI didn't even know the name could be dynamic :)\n. How about\nc++\ntemplate<class Container>\ntypename std::enable_if<std::is_base_of<std::forward_iterator_tag,\n    typename std::iterator_traits<typename Container::iterator>::iterator_category>::value,\nstd::string>::type toString(Container const& c)\n...\nThat should rule out non-containers.\n. There are no parentheses around expr by design, they're not missing.\nc++\nCHECK( a == b );\n// expands to:\n( __catchResult <= a == b ).endExpression();\n// which, because comparison operators have equal precedence and are left-associative,\n// is equivalent to:\n( (__catchResult <= a) == b ).endExpression();\nAnd this is how Catch is able to capture (using overloaded operators) and report the values of a and b.\nFAILED:\n  CHECK( a == b )\nwith expansion:\n  1 == 2\nIf, on the other hand, there were parentheses around expr, then\nc++\nCHECK( a == b );\n// would expand to\n( __catchResult <= (a == b) ).endExpression();\nand Catch would never see the individual values of a and b. All it would see would be the result of the expression (a == b), that is true or false.\nFAILED:\n  CHECK( (a == b) )\nwith expansion:\n  false\n. > My tests compile ok but fail because of lack of string conversion.\nThat's weird. Can you give an example, please?\n. Mathematically, Approx(inf) doesn't make sense. No finite number is \"close enough\" to infinity.\nIf you want to check that x is so large that adding something to it would overflow, resulting in +infinity, there's std::numeric_limits<float>::max().\nc++\nCHECK(x >= std::numeric_limits<float>::max())\nIt's probably safe to use Approx with float max (not with double max, as that might overflow in operator==(double, Approx)). Although I still don't see the point, Approx is intended to check that calculation results are within a margin of error; not that they're (close to) overflowing.\n. This (and the related PR) can be closed as the \"impossible value\" check has been knowingly removed as part of the lazy-reconstruction patch.. Take a look at https://github.com/mapnik/mapnik/blob/master/test/unit/run.cpp (adds options --prefix and --working-directory). For this to work you'll need to change Catch::Session:cli() return type to non-const reference. I think you can omit the single-letter variants, which I'd recommend as those are more likely to clash with future additions to basic Catch options.\nedit: with flag (value-less) option --keep-temporary-files https://github.com/lightmare/mapnik/blob/f7d6950b41a47caccaefa20769ea507e043488d1/test/unit/run.cpp\n. convertInto(bool, T&) throws, but it's only used if !IsBool<T>.\nThere's also convertInto(bool, bool&) overload which doesn't throw.\n. In case anyone wonders why they are needed, it's because some systems (win?) define function-like macro max(a, b), and expanding that after std:: would cause compilation error. Wrapping std::max in parentheses prevents that.\n. Why is there a \"generic tree interface\" ITracker when all its nodes have to be SectionTracker? It looks like the whole tree should've been templated on node type. I'd get rid of ITracker and make TrackerContext and TrackerBase templates, like this:\n``` c++\ntemplate  class TrackerContext { ... };\ntemplate  class TrackerBase { ... };\nclass SectionTracker : public TrackerBase { ... };\ntypedef TrackerContext SectionTrackerContext;\n```\nThat should be possible with quite minimal code changes. I can make a pull req if you're interested.\nNB: IndexTracker looks like a forgotten unused class, btw.\n. I was quite surprised that the matchers stuff is only concerned with error messages, completely ignoring exception type. Correct message in wrong exception type is never desirable. IMO it'd be better if each matcher class had a base exception type, which Catch would capture and pass on to the matcher to do their magic (simply compare what() or check the type with dynamic_cast etc).. > I'd like Catch's Approx to do the conversion for me.\nThen don't define the conversion operator explicit. The whole point of that keyword is to prevent the compiler from doing this conversion \"for you\".\n. > The conversion operator is explicit because volatility is a strong typedef and I do not want implicit conversions because they can lead to nasty bugs (mixing volatilities and rates will give me wrong numbers).\nMakes sense.\n\nDefining X::operator bool () as explicit does not stop implicit conversions in if(X). I think that comparison with Approx is a similar case and would like the conversion to be (safely) inferred.\n\nThat's evaluation in boolean context, which allows explicit conversion. See Contextual conversions\n\nI don't need Catch to solve this problem. I can define operator == etc for my strong typedefs if the Catch authors/maintainers don't think that allowing comparison with explicitly convertible types is desirable.\n\nI think I'm finally starting to understand. So you're asking for something like:\nc++\ntemplate<typename T> bool operator==(T const& lhs, Approx const& rhs)\n{\n  return rhs == static_cast<double>(lhs);\n}\n// etc.\n. Only missing an update to approved.*.txt SelfTest output. The struct LexSort looks completely redundant. std::sort uses operator< when no comparison function is provided.\n. > REQUIRE_NOTHROW is a great way to work with exceptions but what if I want to test a larger block where there may be several calls that throw\nWhy would you want to hide which of those calls threw? I mean, wouldn't it be better to REQUIRE_NOTHROW each of them, so that when something fails, you know where the trouble is, instead of just \"somewhere in this block\"?\n. @milleniumbug How about SECTION?\n. @milleniumbug You need to wrap the anonymous function in parentheses, otherwise it will suffer the same problem with commas as a plain block:\n``` c++\nREQUIRE_NOTHROW(\n{\n    // if there is a comma outside parentheses, it won't even pass preprocessing\n    std::pair nono;\n});\nREQUIRE_NOTHROW(([&]\n{\n    std::pair ok;\n})());\n```\n@dpservis You can do that with sections:\nc++\nSECTION(\"foo and bar with some input\")\n{\n    ThrowingFoo foo(\"input\");\n    ThrowingBar bar(foo, \"more input\");\n    REQUIRE(bar.isValid());\n    REQUIRE_NOTHROW(bar.doStuff());\n    // etc.\n}\nIf a constructor throws, it terminates the section and you get exactly as much information as you'd get from REQUIRE_NOTHROW with a block, i.e. only line number of the start of the section/block and exception.what();\n. > label the remaining ones as feature requests, if this is supported by the github bug tracker, so they do not count as open bugs\nIssues may be assigned arbitrary custom labels, which means it's totally possible (and helpful) to do what you did here directly in the tracker. They'll still count as open issues, but anyone can filter what they're interested in, e.g. see only bugs (only acknowledged, as it still requires the maintainer to take a look at each issue and assign appropriate labels).\n. > For some reason, the GitHub online file editor also touched the last line...\nMost likely it just appended missing EOL.\n. Do you have latest Catch? It should be using __COUNTER__ instead of __LINE__.\nIn your particular case, since you're constructing test cases with macros per class name, you can work around the issue by wrapping them in namespace named after the class:\n``` c++\ndefine GENERATE_TEST_ADDING_TWO_NUMBERS(class_imp)\\\nnamespace class_imp ## __test_ns {\\\nMYTESTCASE(#class_imp, \"add two numbers\")\\\n{\\\nclass_imp imp;\nREQUIRE(imp.add(1, 2) == 3);\\\n}}\nGENERATE_ALL_TESTS(my_adder_imp1)\n```\nBut I think you'd be better off doing less macro-fu. Saving a few keystrokes isn't worth the loss of clarity of actual test case bodies, imo.\n``` c++\nnamespace\n{\ntemplate void test_all_ops()\n{\n    SECTION(\"addition\") {\n        T imp;\n        REQUIRE(imp.add(1, 2) == 3);\n    }\n    SECTION(\"subtraction\") {\n        T imp;\n        REQUIRE(imp.sub(3, 2) == 1);\n    }\n}\n}\nTEST_CASE(\"impl1\") { test_all_ops(); }\nTEST_CASE(\"impl2\") { test_all_ops(); }\n```\n. This is likely a clang-3.5 bug. I tried with 3.5, 3.6, 3.8 and it only occurs with 3.5 and --std=c++14. It can even be triggered without a test case:\n``` c++\ndefine CATCH_CONFIG_RUNNER  // this reveals ~7k lines guarded by CATCH_IMPL\ninclude \"catch.hpp\"\ninclude \ninclude \"HelloAnother.inl\"\nint main(int argc, char * argv[]) {\n    std::cout << \"Hello, World!\" << std::endl;\n    HelloAnother::sayHello1();\n    HelloAnother::sayHello3(std::string(\"heyyyy in String\"));\n    return 0;\n}\n```\nProcessing src/main.gcda\n/tmp/test-profiling/src/main.gcno:version '402*', prefer '404*'\n/tmp/test-profiling/src/main.gcda:version '402*', prefer version '404*'\n/tmp/test-profiling/src/main.gcda:unknown function '2440'\n/tmp/test-profiling/src/main.gcda:profile mismatch for '_ZN5Catch8TestCaseD2Ev'\nI tried deleting chunks of code under the CATCH_IMPL guard, and after deleting more than half of catch.hpp I got to a point where deleting more (no matter what) gave HelloAnother.inl 100% coverage. The \"profile mismatch\" symbol was different, but kinda arbitrary.\n. > Is the behaviour the same in files that don't #define CATCH_CONFIG_RUNNER or CATCH_CONFIG_MAIN?\nNo. As I said I got to 100% coverage by deleting half of the guarded code. Obviously if you don't define those you're deleing all of the guarded code.. > But it sounds like a workaround is to not have any test code in the file that has main\nThe example I posted above doesn't have any Catch code beyond the #include.\n@Bu11etmagnet You're right, but the posted sample used lcov script, which I couldn't get to work with llvm-cov at all, so I used what at least produced some results. Now that revisited, I ditched lcov and just used llvm-cov directly, and am still inclined to think this is a clang-3.5/6 issue.\nHere's the script I used today, it's taken from @prateekbansal's generate.sh and modified:\n```sh\n!/usr/bin/env bash\nthis is ./cov-clang.sh\nuse Clang version from the first argument\nver=\"${1:-3.5}\"\nshift\n: ${CXX:=\"clang-$ver -std=c++14\"}\n: ${COV:=\"llvm-cov-$ver\"}\nset -e\nset -o xtrace\nrm -rf src/.gc src/.o src/prog- coverage.info coverage\n$CXX -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-padded -Wno-weak-vtables -Wno-global-constructors -Wno-exit-time-destructors -Wno-switch-enum -Wno-disabled-macro-expansion -Wno-gnu-zero-variadic-macro-arguments -Wno-date-time -fprofile-arcs -ftest-coverage -g -O0 -fPIC -DUNIT_TESTING=1 -c -o src/main.o src/main.cpp\n$CXX -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-padded -Wno-weak-vtables -Wno-global-constructors -Wno-exit-time-destructors -Wno-switch-enum -Wno-disabled-macro-expansion -Wno-gnu-zero-variadic-macro-arguments -Wno-date-time -fprofile-arcs -ftest-coverage -g -O0 -fPIC -DUNIT_TESTING=1 -c -o src/HelloAnother.o src/HelloAnother.cpp\n$CXX -pthread --coverage -o \"src/prog-$ver\" src/main.o src/HelloAnother.o -lstdc++\nRun the test ...\n\"src/prog-$ver\"\nPass remaning arguments to llvm-cov (that's because 3.6+ require 'gcov' as their first arg)\n$COV \"$@\" --no-output src/main.cpp | grep -C1 -F 'HelloAnother.inl'\necho\n```\nHere's modified src/main.cpp (Catch is single-include from tags/v1.8.1):\n```c++\ndefine CATCH_CONFIG_RUNNER\ninclude \"catch.hpp\"\ninclude \ninclude \"HelloAnother.inl\"\nint main(int argc, char **argv)\n{\n    std::cout << \"Hello, World!\";\n    for (int i = 0; i < argc; ++i) std::cout << ' ' << argv[i];\n    std::cout << std::endl;\n    HelloAnother::sayHello1();\n    HelloAnother::sayHello3(std::string(\"Hello 3 inl\"));\n    return 0;\n}\n```\nAnd here's the output with different clang versions:\n```sh\n$ \n$ ./cov-clang.sh 3.5\nHello, World! src/prog-3.5\nHello 1!!!\nHello 3 inl\nFunction identifiers do not match: 2494 != 2493 (in _ZN5Catch8TestCaseD2Ev).\nInvalid .gcda File!\n$ \n$ ./cov-clang.sh 3.6 gcov\nHello, World! src/prog-3.6\nHello 1!!!\nHello 3 inl\nUnexpected number of edges (in _ZN5Catch5Clara6Detail9toLowerChEc).\nInvalid .gcda File!\n$ \n$ ./cov-clang.sh 3.8 gcov\nHello, World! src/prog-3.8\nHello 1!!!\nHello 3 inl\nFile 'src/HelloAnother.inl'\nLines executed:100.00% of 2\n$ ./cov-clang.sh 3.9 gcov\nHello, World! src/prog-3.9\nHello 1!!!\nHello 3 inl\nFile 'src/HelloAnother.inl'\nLines executed:100.00% of 2\n$ ./cov-clang.sh 4.0 gcov\nHello, World! src/prog-4.0\nHello 1!!!\nHello 3 inl\nFile 'src/HelloAnother.inl'\nLines executed:100.00% of 2\n$ \n```\nFor clang-3.5, either\n  a) changing -std=c++14 to -std=c++11, or\n  b) not defining CATCH_CONFIG_RUNNER\nfixes the issue.\nFor clang-3.6, nothing seems to work, it fails even if you use dummy src/main.cpp:\nc++\nint main(int, char **) { return 0; }\n. @horenmar ~~The 3 files this PR touches haven't been modified since 2015. Sources are still missing in makefiles, and the include path is still wrong.~~\nedit: oops! sorry my bad, fetched latest changes but was looking at wrong branch :/\n. single_include/catch.hpp is not always up to date, i.e. between tagged releases. . This is not an issue with Catch, but your code ;)\nYou haven't allocated memory for Circular_Buffer *buffer. cb->anything = something; dereferences a null pointer and tries to write into a structure at address 0.\n. IMO this is over-complicating it. Why even have comments in a list file to begin with? There's no point. If you look at how common utilities like xargs, grep -f, diff -X handle list files, they're just that: no special syntax, just raw strings, one per line.\n. For that use case, you can use any other character or string that doesn't occur in test names, without Catch parsing it -- it won't match any test name and ignore that line.\n. That's irrelevant. If someone has test names starting with #, they can use %. If they have test names starting with all kinds of weird characters, they can use DON'T RUN THIS. For example having test cases first through fourth and passing this file to -f:\n```\nfirst\nSKIP second\nthird\n% fourth\n```\nCatch will run only first.\n. IMO these two warnings are silly. If anything, they should be disabled.\n. Partially duplicates #643 \n. This comes down to Catch::Internal::compare. There's an ill-conceived mess of overloads mixing signed/unsigned arguments and just force-casting one to the other before the actual comparison, in order to silence warnings. That's totally wrong. I really hope someone doesn't fix this issue by adding another bunch of overloads.\n. @philsquared static_cast<unsigned>(x) is not ok when x is an int that can be negative. If someone wants to CHECK( unsignedX > signedY ), the worst thing Catch can do is silence the signed/unsigned mismatch warning and report bogus results (as in \"this positive integer is not greater than zero\"). Catch could try to be smart and do the comparison in a safe way, that is (signedY < 0 || (unsigned)signedY < unsignedX), but why? Anyone can just use properly typed values on either side of their comparisons.\n. This is not an issue with catch. unsigned int { 0 } is not legal C++. Wrap the multi-word type in parentheses: (unsigned int) { 0 }.\n. Yes, there's also a pending PR #660 fixing it.\n. The header says \"overload\" because it means overload, not \"specialization\". One should not specialize function templates.\nIt's not meant to suggest template, it's just documentation pseudo-code where T means \"your type\" (notice how the two operator<< examples also don't mention template). Of course if you have a class template, it's perfectly correct to define template <typename U> std::string toString(YourType<U> const& x), which is a set of overloads; in this case the T in the doc substitutes YourType<U> in your actual code.\n. Oh I see where you're coming from. This issue has been reported in #531 and the culprit is that a conforming compiler only considers overloads declared prior to the point of call. Just try moving the #include \"catch.hpp\" line right before the TEST_CASE line and you'll see your overload will be picked.\nNow that I checked I found that even Catch itself is guilty of specializing toString for Catch::Detail::Approx, probably because the late-overload approach doesn't work.\nI believe that the first thing that should be fixed is the implementation (i.e. call toString through ADL, unqualified) and then the documentation (i.e. put toString(MyClass) overload in the same namespace as MyClass).\n. PR #592 pending.\n. tl;dr: not an issue in Catch ;)\nYou need to use the unsigned suffix: 3147483640u. Or perhaps even better, #include <stdint.h> and use UINT64_C(3147483640) macro. Otherwise the literal is of type int, which on 32-bit has a maximum value of 2147483647. It doesn't matter that your function returns uint64_t. The 3147483640 literal gets loaded into int, overflows and becomes negative, and then when it's converted to uint64_t becomes a totally different value (and I think if you turn on warnings, the compiler will tell you something isn't right).\n. Found another recent issue #730 showing the same problem; in a more obvious way, IMO, so I'm going to comment more on that one.\n. No it's not possible, because captures are local to the scope they appear in. When an unCHECKed exception occurs, that scope is finished (local objects holding CAPTURE destroyed) before entering the handler (the one that prints \"FAILED: due to unexpected exception\").\n. That's MSVC's broken exception-specification on destructors. All of these should be implicitly noexcept, as there are no throwing base- or member- dtors involved. But for some reason MSVC concludes different exception-specification for inline and out-of-line dtors. You can fix this by either adding noexcept to all of them, or just delete the redundant ~Matcher override.\n. At first I thought this was a name lookup issue, but after trying with gcc 4.8 through 6.2 and clang 3.5 through 4.0 and getting essentially the same error, and none of them even mentioning the operator<< overload for __int128 as a viable candidate, it seems the compilers are right.\nHere's what happens. The lookup for operator << starts with the current scope (that is namespace Catch::Detail) plus what's added by ADL. The first argument is std::ostream so it adds namespace std to the search, the second argument is fundamental type __int128 so it doesn't add anything ([basic.lookup.argdep] clause 2). Thus it finds Catch::Detail::operator<< overload for BorgType, the \"you will all be assimilated\" proxy, and a bunch of std::operator<< overloads. Lookup stops once a name is found, it doesn't continue searching enclosing namespaces (including the global namespace).\nUser-side solution:\nPut the operator<< overload for __int128\n - either in namespace std, so that it's found through ADL\n - or in namespace Catch::Detail, so that it's found through unqualified name lookup (but then it'll only be available to Catch)\nCatch-side solution:\n```c++\n// global namespace\nCatch::Detail::FalseType operator<<(std::ostream&, Catch::Detail::BorgType const&);\nnamespace Catch {\nnamespace Detail {\nusing ::operator<<;\n...\n``. @horenmar This issue is not C++11 specific. The example code only usesstd::end(buffer), which can be replaced withbuffer + sizeof(buffer)`.. You can put common tests in a function and call it on each instance:\n```c++\nvoid run_common_checks(C& x) {\n   REQUIRE(x.is_ok());\n   ...\n}\nTEST_CASE(\"default-constructed\") {\n    C x;\n    run_common_checks(x);\n}\nTEST_CASE(\"constructed from string\") {\n    C x(\"hello dolly\");\n    run_common_checks(x);\n}\n...\n. I once used something like this; not with Approx, but known expected values of any custom class work the same:c++\nauto expected = { Approx(1.), 2., 3., 4., ... }; // initializer_list\nCHECK(computed == std::vector(expected));\n```\nI also wanted to avoid the construction of the temporary vector, so I wrote a function template comparing two sequences:\n```c++\ntemplate \nsize_t count_differences(C1& c1, C2& c2);\nCHECK(0 == count_differences(computed, expected));\n. You want immediate response on stderr, no need to have a macro for that:c++\nstd::cerr << \"we're here\\n\";\n```\n. I haven't done any other benchmarks beyond the one in #556. I haven't even thought about failure perf, that's a good addition you made.. > 8529 clearBuffer |= (*it)->assertionEnded( assertionStats );\nbool& |= bool is fine, no information is lost.\n\n6413 if( Optionstd::size_t listed = list( config() ) )\n6414 return static_cast( *listed );\n\nThis will only dereference if the pointer is non-NULL, the warning is spurious.. Escaping is not the best solution. You suddenly can't just copy&paste the string from source, you have to go through it, know what the metacharacters are and not miss any of them.\nBetter add an option to pass literal test names, and/or option to disable parsing for all arguments:\n./SelfTest --test-this \"std::pair<int,const std::string> -> toString\" --test-this \"another [evil] test case\"\n./SelfTest --dont-parse-args \"std::pair<int,const std::string> -> toString\" \"another [evil] test case\"\n. > I don't disagree with you - but bear in mind you couldn't copy & paste from source before, either. I think the issue is rare enough that it shouldn't be a big burden.\n\nAlso it doesn't preclude using an option-argument as well (I find it very convenient to be able to specify tests without an option currently).\n\nI don't quite understand the second part, and am not sure whether it's simply because I missed something, or you misunderstood my suggestion. The fact that copy&paste doesn't work in some cases is obvious from the issue title. What I tried to say was that there's a way to make it work.\nsh\n./SelfTest \"this always works\" \"but, this, is, special\"  # here copy&paste doesn't work\n./SelfTest --test-this \"but, this, is, special\" \"this always works\"  # here it does\n./SelfTest \"this always works\" \"but\\, this\\, is\\, special\"  # can't like this, sorry\n. I see. I was only considering changes that leave currently-working behaviour as is.. How about the tag [!mayfail], would that work for your use case?. @ayende In this particular case, by disallowing this Catch is doing you a favor ) If you rewrite that as kirbyfan suggests, and the try_read fails one day, you'll know whether read.first was false, or read.second had the wrong value. You wouldn't be able to learn that from the single check that lumps them together.\n. Refs #381 . You can blame this one on me. I added const qualifiers to ExpressionLhs operators, not realizing that the absence of const served as a disambiguator between these member operators and user-defined global operator templates that take const references.\n. You could add an optional third arg\nc++\nREQUIRE_THROWS_AS(stuff(), std::runtime_error, \"failed\");\nAt first I was going to suggest changing the second arg from exception type to matcher, plus the ability to pass an exception object instead, as in REQUIRE_THROWS_AS(stuff(), std::runtime_error(\"failed\")) (which would construct what()-equality matcher), but that would probably be both more difficult to implement pre-C++11 and break existing code.\n. It also doesn't do what you think it does. add_const is kinda pointless anywhere, as it's just a tedious way of writing T const. And in this snippet, it doesn't do anything, because add_const<T&> returns T&.\n. I saw some sprintf.. The operator= is there only to silence pesky warnings that it won't be generated by the compiler (because it can't be generated when there's a reference, const, or otherwise non-assignable member in the class). Copying would be okay, although it's not needed.. What's suspicious, or smelly? Being copyable doesn't imply being mutable. Neither does being immutable imply being noncopyable. They're distinct qualities.\n```c++\nstatic_assert( std::is_copy_constructible::value == true, \"\");\nstatic_assert( std::is_copy_assignable::value == false, \"\");\n// or if you want a class example:\nstruct Foo {\n  const int c;\n  int m;\n};\n```\n. > #7 0x000000000137eeac in Catch::Version::~Version (this=0x22a2a60 , __in_chrg=) at /home/kevin/rstudio/src/cpp/tests/cpp/tests/vendor/catch.hpp:5947\nThis doesn't look right. In Catch v1.8.2 single_include, line 5947 is in TrackerContext class, nowhere near Version. Could be that you have object files compiled with different Catch versions linked together.\n. Why is Catch defining a type in the global namespace, anyway? Should define / alias uint64_t in its own namespace.. What compiler? I took your second example, only added #define CATCH_CONFIG_MAIN on top, and am getting the expected output with both expansion and message. gcc 4.8, 5, 6, clang 3.6, 3.8, 4.0\n. Are you using a custom reporter? Because I searched for the word \"Failure\"\nsh\ngit grep -w 'Failure' $(git rev-list --all) -- include/reporters/\nand it only appears in the xml reporter.\n. @HeroicKatora \nI can't see how your can_const_copy checks constexpr-copiable (that would have to somehow mention noexcept); because run-time copy may not be desirable.\nNot sure why I thought this would need to be done without C++11 type traits; with those it's quite easy. Except instead of a type property, I'd define a type transformation, as it packs more stuff that needs to be reused by several expression decomposition classes.\n```c++\n// it's not even necessary to remove_reference here,\n// because we only need to store a copy if T is not a reference\ntemplate >::value>\nstruct CaptureOperand { using type = T&&; };\ntemplate \nstruct CaptureOperand { using type = T; };\ntemplate::type>\nExpressionLhs operator <= ( T&& operand );\n. @HeroicKatora it can be specialized; albeit a bit inconveniently for cv-qualified type:c++\ntemplate <>\nstruct CaptureOperand { using type = CustomType; };\ntemplate <>\nstruct CaptureOperand { using type = CustomType const; };\n```\nHad I defined the template more fore-sightedly, the specialization could ignore cv-qualifiers:\n```c++\ntemplate , bool = is_scalar::value>\nstruct CaptureOperand2 { using type = T&&; };\ntemplate \nstruct CaptureOperand2 { using type = T; };\n// explicit specialization for CustomType\ntemplate \nstruct CaptureOperand2 { using type = CustomType; };\n```\n. Looks very similar (in effect) to #757 .\nName lookup starts with namespace Catch, ADL adds namespace std because the first argument is std::ostream and std::chrono because the second is std::chrono::system_clock::time_point. It yields a bunch of overloads, none of which matches. Global namespace is not searched.\nPut the overload into namespace Catch. It's a bit weird, but the C++ standard doesn't allow adding overloads into namespace std.. > What's the difference between Catch::MessageBuilder and OtherCatch::MessageBuilder?\nThe difference is that namespace OtherCatch doesn't contain any (non-member) operator<< overloads, so lookup continues in its enclosing (global) namespace.\nBut Catch contains some operator << overloads, so lookup stops there.\n. > Maybe operator<< overloads must be outside of the Catch namespace?\nYes and no. Operator overloads should be in the namespace where one of their argument types is defined, so that ADL can find them. So to remove them from the Catch namespace, the streamable classes (SourceLineInfo et al) should be moved into Catch::Detail along with their operators.\n. > Why \"should\"? What's wrong with operator overloads in the global namespace?\nBecause if an operator is not defined in the same namespace as one of its argument types, it won't be found from within another namespace that also overloads that operator, even for completely unrelated types:\n```c++\ninclude \nnamespace Good\n{\n    struct Foo {};\nstd::ostream& operator << (std::ostream& os, Foo);\n\n}\nnamespace Wrong\n{\n    struct Bar {};\n}\nstd::ostream& operator << (std::ostream& os, Wrong::Bar);\nnamespace User\n{\n    struct Zan {};\nstd::ostream& operator << (std::ostream& os, Zan);\n\nvoid dump(std::ostream& os)\n{\n    // name lookup in all three statements below finds\n    //  User::operator<<(std::ostream&, User::Zan)\n    // and a set of standard overloads for fundamental types,\n    // std::string etc (brought via ADL because of std::ostream)\n    //  std::operator<<(std::ostream&, **standard type**)\n\n    os << Zan() << std::endl;\n\n    os << Good::Foo() << std::endl; // OK\n    // in addition to overloads from namespaces User and std,\n    // ADL brings Good::operator<<(std::ostream&, Good::Foo)\n\n    os << Wrong::Bar() << std::endl; // ERROR\n    // ::operator<<(std::ostream&, Wrong::Bar) won't be found\n}\n\n}\n```\n. > I guess that a name lookup for an operator overloads should start from the global namespace, not from the Catch namespace.\nI think it's better when name lookup works the same for operator and non-operator functions.\n```c++\nnamespace A\n{\n    struct X { int value; };\n}\nA::X foo(A::X x, int i) { return { x.value + i }; }\nnamespace B\n{\n    using A::X;\n    struct Y { double value; };\nY foo(X x, double d) { return { x.value + d }; }\n\nvoid see() {\n    X x = { 3 };\n    Y y = foo(x, 5); // calls B::foo(X, double)\n    // lookup stops when a name is found,\n    // in other words B::foo shadows ::foo\n}\n\n}\n// now replace foo with operator+\n// same rules apply\n``\n. @KVic I misunderstood you last time. I thought you were questioning how name lookup works, as per standard (I've read[basic.lookup]a few times and am still not 100% sure I got it right, it's pretty dense). Now I agree with you that forcing lookup in the global namespace might actually be better, less surprising to users, and only a small change in Catch. Another option would be to remove alloperator<<` overloads from the Catch namespace, which would likely require more changes.. > It seems like it would be nice if the argument parsing functionality were completely decoupled from the rest of Catch's logic similar to:\nIt kinda is, there's only one bit missing: #381 \nThen you could define additional options, like here for example: https://github.com/mapnik/mapnik/blob/094994ef540353b846490bf5c0dd127d00740dcb/test/unit/run.cpp#L26-L38. Couldn't reproduce with v1.10.0, only with catch2 branch.\nI haven't been watching Catch for a loooong time, but catch2 does not seem fully rvalue-reference aware, yet. It's not capturing rvalue references where it could, and it's not properly forwarding universal references where it should (actually, std::forward doesn't appear anywhere in the code).\nHere's a fix I proposed long ago, capturing not just bool but all fundamental types by value:\n```diff\ndiff --git a/include/internal/catch_decomposer.h b/include/internal/catch_decomposer.h\nindex 786a052..0081b75 100644\n--- a/include/internal/catch_decomposer.h\n+++ b/include/internal/catch_decomposer.h\n@@ -98,6 +98,8 @@ namespace Catch {\n     template\n     auto compareNotEqual( long lhs, T* const& rhs ) -> bool { return reinterpret_cast( lhs ) != rhs; }\n\ntemplate \n\nusing capture_by_value = std::is_fundamental::type>::type>;\ntemplate\n class ExprLhs {\n@@ -105,12 +107,13 @@ namespace Catch {\n public:\n     ExprLhs( LhsT lhs ) : m_lhs( lhs ) {}\n\n\ntemplate\n\nauto operator == ( RhsT&& rhs ) -> BinaryExpr const {\nreturn BinaryExpr( compareEqual( m_lhs, rhs ), m_lhs, \"==\", rhs );\ntemplate::value>::type>\nauto operator == ( RhsT const& rhs ) -> BinaryExpr {\nreturn BinaryExpr( compareEqual( m_lhs, rhs ), m_lhs, \"==\", rhs );\n         }\nauto operator == ( bool rhs ) -> BinaryExpr const {\nreturn BinaryExpr( m_lhs == rhs, m_lhs, \"==\", rhs );\ntemplate::value>::type>\nauto operator == ( RhsT rhs ) -> BinaryExpr {\n\nreturn BinaryExpr( compareEqual( m_lhs, rhs ), m_lhs, \"==\", rhs );\n         }\n template<typename RhsT>\n\ndiff --git a/projects/SelfTest/TrickyTests.cpp b/projects/SelfTest/TrickyTests.cpp\nindex 78f7052..ce3cd2b 100644\n--- a/projects/SelfTest/TrickyTests.cpp\n+++ b/projects/SelfTest/TrickyTests.cpp\n@@ -168,7 +168,7 @@ namespace ObjectWithConversions\n {\n struct Object\n {\n-        operator unsigned int() {return 0xc0000000;}\n+        operator unsigned int() const {return 0xc0000000;}\n };\n///////////////////////////////////////////////////////////////////////////////\n```\n\n\n... and similarly for other operators.\nNote: at first I wanted to use is_scalar in place of is_fundamental, but then the operator becomes ambiguous because both overloads match when rhs is a string literal due to implicit conversions to const char* and std::string.\n. You're right. I assumed that the operator taking universal reference was intentional, and tried to stick proper reference type into the BinaryExpr, without thinking it through.\nNow I agree that taking RhsT const& should be enough. Unless someone wants to test custom operator== overloads working differently for const/non-const lvalue/rvalue objects (I can't imagine how that'd be useful), in which case they'd need Catch operators to capture the type precisely.\nI'll update the diff above to not clutter the issue too much. Had to fix one test that had non-cost conversion operator.\n. Standard says main takes char**, that is a pointer to char*. That thing doesn't implicitly convert to const char** (pointer to const char*). So there'd need to be extra overloads and some const_casts for this usage.\nIf your example is all you want this for, try\n```c++\ndefine CATCH_CONFIG_DEFAULT_REPORTER \"junit\"\n```\n. Nice explanations, but what if we could prevent users from falling into this trap again and again?\nc++\nchar foo[] = \"foo\";\nCHECK(foo == \"foo\"); // FAILED with expansion \"foo\" == \"foo\"\nThis could be improved by providing comparison overloads for const char (&)[N] to at least handle string literals, but comparing two const char* variables would still yield surprising results of pointer comparison.\nHowever, that's not the only use case. Sometimes it's useful to compare addresses, right? \nc++\nconst char* p1 = generate_noise(1);\nconst char* p2 = generate_noise(1);\n// let's check that it returns pointer to previously generated noise\n// when called with the same seed\nCHECK(p1 == p2); // you don't want Catch to stringify this, it's random binary data\nCHECK((void*)p1 == (void*)p2);\nSo, given that catch treats const char* as a pointer to null-terminated string when reporting, why not treat it the same way when comparing? That way Catch will favor the more common use case. And if someone really wants to compare pointers, they can cast to void* explicitly.\n. @philsquared \n\nI think it's important that what operators mean within a CHECK or REQUIRE is exactly the same as what they mean outside (with some limitations, as @horenmar has hinted at).\n\nThen that should also apply to operands. char* does not always point to a null-terminated string, yet when being reported this type receives special treatment, backed by the argument that it's usually on one side of a string comparison. When pointers are compared, Catch should report only addresses.\n. This is enabled when T is constructible from double. But you actually do the inverse below. Should use std::is_constructible<double, T> here.\n. use #ifdef, it doesn't have a value\n. I think you meant std::declval<const T&>() ;)\n. declval again\n. I'd swap the parameters, as in \"is VALUE of type TYPE\"\n. while (++first != last) looks more readable to me\n. ",
    "Kosta-Github": "sorry, but the \"nullptr\" fix still doesn't allow you to write something like this:\nstd::exception_ptr ex;\nCATCH_REQUIRE(ex == nullptr);\nI will try another fix for that as well...\n. OK, I will move over to the integration branch; sorry for not reading the READMe carefully enough!\n. Any opinion on this one?\n. maybe the cmake part of this pull request is also of interest: #190\n. I caught up with all your changes; just left a couple of minor remarks.\nBut what is still missing with respect to my proposal is that the basic/console reporter can also report timings/durations and that this reporter can be configured to only report those test cases that exceed a certain timing threshold; this feature turned out to be invaluable for my teams, so we can concentrate on speeding up test cases that are considered to be too slow; and this list is automatically generated during each built of the whole solution in VisualStudio. And I will gradually lower the threshold from sprint to sprint to compensate for added tests during the sprint... :-)\n. Ping...\n. I have another implementation ready for supporting a durations threshold in the basic console reporter based on your current master branch, but first you need to pull in my PR #239 for adding VS2012 project files and fixing the current builds (for the Travis CI) with respect to missing includes so I don't need to untangle it... :-)\n. @philsquared: did you already find some time to look into this useful addition for getting continuous integration builds for free and even for pull requests before they are pulled into the actual code base by you?\n. Ping...\n. You still need to replace the \"AIM360\" reference in your README.md file by \"philsquared\" to point to the right repo...\n. I agree with @wichert; e.g., if I want to process the output of \"list tags\" or \"list tests\" or so by another tool, wrapping makes it unnecessarily more difficult; maybe a command line option to suppress wrapping would also be a good idea...\n. What is the difference to the catch_reporter_console?\nhttps://github.com/philsquared/Catch/blob/master/include/reporters/catch_reporter_console.hpp\n. The differences to the catch_report_console implementation are minimal; maybe both can be unified into a single one? Otherwise there would be so much copy-n-paste code...\n. Can't you just use something like '--' or so and after that ignore all following arguments? E.g.:\n    unit_test -eb -- -NSDocumentRevisionsDebugMode ...\n. I think this could be closed now...\n. OK, now it compiles on VS2012 and on the Travis CI as well again\n. The project file is for VS2012; you only provide some for VS2010 and VS2008...\n. It is a bit outdated now; closing ...\n. It is a bit outdated now; closing ...\n. Just to have a complete example:\n``` C++\nint main(int argc, char* const argv[]) {\n    auto session = Catch::Session();\nif(Catch::isDebuggerActive()) {\n    testSession.config().useStream(\"debug\");\n}\n\nreturn session.run(argc, argv);\n\n}\n```\nIMHO, this should be the default behavior...\n. Why not putting the setup work into main()?\nAnd you cannot rely on the order of the tests, so how would you ensure that this \"test case\" is run before all others?\n. Hey Phil,\n1) I know you want to stick to (ancient) C++98, that is why I haven't investigated a cleaner solution and a corresponding PR, since I certainly would just use std::mutex for that case...\n2) It looks like that if I am just using CATCH_REQUIRE() or CATCH_CHECK() from within the other threads I should be relatively safe with respect to manipulating shared state, at least for the moment; but I will have a closer look next week...\n3) Sure, there are ways to transfer the test results out from the worker threads back into the master thread, but all this make the tests way more bloated and less readable; also the reasoning about what gets really tested by such a test case gets very hard. That is why I would like to have the ability to use at least both testing macros mentioned above from within separate threads; nothing fancy like multi-threaded TEST_SECTIONs or so... :-)\n4) The overwriting of an existing reporter would just come in handy for the above case, in which I still could request the Junit reporter from the command line, but would provide the thread-safe one instead. Ordering of the registartion shouldn't be an issue in that/my case, since I would just register the thread-safe reporter directly from within main() and would not rely on static initialization.\n. why all these casts (char*)?\nyou cannot use CATCH_SECTION within a loop or conditional branch.\n. and/or you could init the vector like this:\nC++\nstd::vector<validator_element> elements(std::begin(data), std::end(data));\n. I was talking about the cast in the TEST_CASE line...\nand casting away the const-ness of c_str() is just plain wrong; the function PropSI() should use const char* for its arguments.\n. @PureAbstract but that is not guaranteed to be a zero-terminated string!\n. but not for C++03, which seems to be @ibell 's target toolset...\n. Can't you just give up on the sections and do several checks sequentially?\n. honestly, I don't spot the difference between the two versions...\n. ah, I see, hard to spot due to the same level of indention... :-)\n. @philsquared why not adding the additional { and } to the REQUIRE macro inside of CATCH? I guess that is what @martinmoene also suggests, right?\n. Not sure, how that should help, since you usually want your tests stable, deterministic, and reproducible. Introducing randomness is going into the opposite direction...\n. would work for me\nmaybe also switch from the double representation to uint as milliseconds with a fixed and padded output width?\n. what happens on a green background? :-)\n. @SergiusTheBest IMHO, a green background is as likely or unlikely as a blue one... maybe not on Windows but on OSX ...\n. OK, this slipped in by mistake, and was introduced during debugging of the script. But it also allows for an easier addition of additional parameters in the future. Not sure, if you really need to warn about passing too many arguments.\n. VS2012 is complaining that this operator cannot be created automatically, which is true due to the const& member below...\n. this doesn't look good to me...\n. same here\n. ",
    "aufflick": "FYI this is on a fresh clone of master.\n. ",
    "sriluxman": "Hi Phil,\nThanks for response. Yes as you mentioned I made a custom config and provide it to the Catch's Main.\nNow I could also get results in xml fomat with  - config.data().reporter = \"xml\";\nAnd It works fine for the first time I run the test,\nBut the problem is that when I execute the test again - I get the exception - \"No reporter registered with name: 'xml'\"\nAs Try block in Main( Config& configWrapper ) fails...\nHere is a sample Test Function that I call when I should the test.\n```\nvoid RunTest()\n{\n    // Create a custom config object\n    Catch::Config config;\n    // Customise config object\nconfig.setStreamBuf( buf.rdbuf() );\nconfig.data().reporter = \"xml\";\nconfig.addTestSpec( \"example/*\" );\n\n// Forward on to CATCH's main using our custom config.\nint result = Catch::Main(config);\nstrcpy(tempString,buf.str().data());\n\n}\n```\nI'm not sure if I'm allowed to run a test multiple time by this way?\n. ",
    "gelldur": "Now we have: CATCH_CONFIG_DEFAULT_REPORTER\nhttps://github.com/catchorg/Catch2/blob/master/docs/configuration.md#default-reporter. ",
    "wojdyr": "I see these warnings when using single-file catch.hpp from the deprecated downloads tab.\n. Nice logo. You could link this website from the github site. There is a place for website link above the git url, see e.g. https://github.com/rails/rails\n. ",
    "formiaczek": "Hi, Thanks for reply. No worries - I've been quite busy recently too. Let me know if I could provide any help on the above.\nIn addition, I also attempted on adding a maximum time-out for the test-suite. This could handle test suites in which the code being exercised hangs for any reason (I did have such a test-case at least once). And instead of the build-system hanging on a build, or timing-out, it could simply be a test-case failure, build could continue and so could other, unrelated tests that would normally follow.\nFor this, Catch could perhaps have a default, (presumably alterable by a command-line option) value for the maximum time-out the Catch::Main() should take up to. In such option, however, it would be hard to tell what the right value should be (i.e. big enough for longest possible test-suites people out there have, but still reasonably small to capture hangs in 'overnight tests'). \nAlternative for that could be to have such a time-out as either command-line option or macro-defined, and people, who would wish to use it could then adjust the value for themselves.  But this is probably a thread for another discussion / pull request - if I find more time I might try to create one and then will move this message across.\nThanks,\nL.\n. What do you mean by re-targeting?\n. Great job - thanks for adding this. Are you planning to add it for windows at some point too?\n. ",
    "PetterS": "This is fixed in the \"Integration\" branch, which uses \"endsWith\" instead.\n. After more investigation, I have good and bad news. :-)\nGood: It only fails with the /Za compiler switch (disable language extensions).\nBad: It also fails in VS 2012.\nSo it looks like you can expect the same behavior in 2012 and 2013. \n. The destructor of std::streambuf has a throw() specification in MSVC. Not sure what the standard has to say about this.\n. One can apparently test for _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE to see if fileno is available.\n. Updated commit with STDOUT_FILENO per your comment (which seems to be lost now).\n. I should add that Visual Studio 2013 November 2013 CTP warns about this.\n. Sure, you can close it. Thanks.\n. Thanks for the quick fix! After thinking about it again, I agree with you about CHECK as well.\n. ",
    "springmeyer": "@wichert you are right. While I'm aware that this is a mis-usage and the comparison type should be signed, I was unaware that this behavior was compiler level. So, thanks, will close.\ntestcase:\n```\ninclude \n/*\ng++ -o unsigned-comparison unsigned-comparison.cpp -Wall -pedantic\n*/\nint main() {\n    unsigned val = 1;\n    bool result = val > -1;\n    std::clog << \"result: \" << result << \"\\n\";\n    return 0;\n}\n```\n~$ ./unsigned-comparison \nresult: 0\n. If anyone has ideas on how to fix this I would love to hear them. It is very hard to suppress errors from MSan unless you build your own standard library with Msan (https://llvm.org/bugs/show_bug.cgi?id=30740), so fixing this in catch.hpp would be ideal.\n. ",
    "andyprowl": "With the integration branch the second message is slightly different and contains the message \"{Unknown expression after the reported line}\", but it still counts as if 2 assertions failed instead of one.\n. Wow, that was fast. Thank you very much :)\n. ",
    "cloderic": "Am I the only one interested? I'm considering working on it but I'd like to gather idea/needs first\n. looks cool !\n. ",
    "mloskot": ":+1: as given to #189 \n. Confirmed, this is due to auto-generated Markdown syntax for raw URL.\n. :+1: for adding benchmarking support\n. @vadz has raised an interesting issue. I can recall that every time I web-searched for CATCH, I was wondering how to get best results with such a common name! :-) I give :+1: for renaming CATCH.\n:-1: for catfish, because it's not unique enough - there's already 30 million pages indexed by the big G :)\nCATCH -> Ketchy\n. @kirbyfan64 It does not matter how it sounds. GDAL, a project I also contribute to, is often pronounced like \"goodl\", sounds like \"google\".\n@philsquared I understand the StackOverflow orientation and uniqueness refinement that considers space of C++ projects. Regarding ++ suffix, I still remember times when the big G was returning C results while searching for C++, perhaps it's no longer justified concern (though, try and compare searching for \"it++\" vs \"it--\", Google still seems to behaving inconsistently).\nCatchlib\nI think it would do pretty good job: 1) preserve old name 2) become searchable (there are Touchlib, there is netlib, cpp-netlib, all easy to search for).\nRegardless, renaming a well-established project is hard and will never satisfy majority of users. It's like, never ask your family how you want to name your child, just name her/him first, then introduce to the family :)\n. @The-Compiler one may argue, C run-time library is not just a library, it is a runner too :)  Anyway, just shared my opinion, but to stop messing this thread, not going to dwell on fine details and defend one of zillion personal preferences.\n. On 5 July 2016 at 12:23, Phil Nash notifications@github.com wrote:\n\nSo my new proposal is simply:\nCatch2\nPlus it emphases that v2 is going to be a big break (in particular it's\ngoing to require C++11 and be substantially rewritten/ refactored).\n\nThen, Catch11  :)\n. A few days ago Catch received the update: 1c47fe023a1547e9a7a7e4efd163c098d69e38a4\nThe issue has been solved for me.\nThanks\n. https://github.com/philsquared/Catch/issues/674#issuecomment-225896777\n\n-Wno-error=parenthesis is another way\n\nTypo: parentheses\n. Thanks for prompt fixing.. The same issue happens with the later Catch v1.10.0, as mentioned above.\nI assume such very old compilers are no longer supported.\nFair and perfectly understandable, but could anyone list minimum required version of GCC, clang, MSVC?. > Looking at the linked issue, the largest problem is with macros that have an optional second argument for description, correct? \nYes.\nThe BW rationale makes sense.\n\nat least gcc 4.4 - gcc 6, clang 3.4 - clang 3.8 and VS 2013 - 2017 are supported.\n\nFair. I'll refer to the CI next time\nThanks!. It happens, there are/were some files which included both (eg. shared fixtures for both, benchmark and test, so benchmark is actually tested for correctness - in non-optimised builds). Good point, I'll remove it.\n. Fixed, thanks!\n. ",
    "vadz": "FWIW I'd definitely like to have benchmarking support in Catch too. I'd like to have a BENCH macro similar to TEST_CASE which could be used for benchmarking the code and some control over it from the command line.\n. It would be nice to find some way to avoid this warning and this commit, while not ideal, would be better than nothing. Getting a couple of these warnings for every (release) build is rather annoying.\n. I can confirm that the warning is gone with 1.7.1, at least when using MSVS 2015. Thanks!. It would indeed be very useful to be able to use \"Tokenizer/Constructors/Copy constructor\" on command line, i.e. select the section to run by name.\n. Err, sorry, I've never heard about ANSICON before, but ANSI escapes do work in my Windows 7 command prompt. For example, (Cygwin) git status does show them and piping its output to od -c I see that it uses the standard escape sequences, here is an extract: 033   [   3   1   m.\nHave you tested that it indeed didn't work?\n. Sorry, you seem to be right, it looks like Cygwin does some magic to translate ANSI sequences to console attributes even when running under a normal Windows console.\nSorry for the confusion, I'll update the initial request accordingly.\n. [sorry for the delay with replying]\nI was hoping to be able to select during run-time which implementation to use, i.e. to compile a single version of the test program and have it show colours both when it's running inside the normal Windows command prompt and when it's running in Mintty, provided some configurable option is used (ideally something like CATCH_USE_ANSI_COLOURS=1 in the environment so that it could be done once only).\nI could still try to make a patch doing this if you think it could be interesting, but if you believe that this would be a customization too far and that controlling this at compilation time is sufficient, please just close this.\n. OT but, concerning Clara, where is it developed? I'd be more than curious to have a look as I also feel that there is still no really perfect command line parser for C++, in spite of the fact that it would seem that it shouldn't be that difficult to do. Yet I've been unable to do it in half a dozen or so tries (a couple of which are public) and IMO boost::program_options is very far from perfect also...\n. Well, I'd still like to get nicely coloured output in MinTTY (Cygwin terminal emulator), but, obviously, this is not something really critical.... I never compile Cygwin (i.e. Unix/POSIX) applications, i.e. all my code is compiled as native Windows stuff, I just use Cygwin for convenience interactively. Not having colour when running in MinTTY is definitely a lesser problem than building a special version for Cygwin, I don't think anybody, let alone me, does or would even consider doing it.... Oops, I didn't notice the existing #363 which does the same thing (the only difference is that this one removes the IMO accidental pair of parentheses after the first link). Sorry for the duplicate, please feel free to close it and apply #363 instead if you prefer to keep these parentheses.\n. Sorry but I can't find any information about the matcher support for this (remember our discussion about the name change? Just try searching for \"CATCH\" matcher exception :-(), could you please point me to any documentation/examples of using it? TIA!. I like it! It doesn't seem to conflict with anything (there seems to be something with this name for Javascript but nothing related to unit testing), it is fun and you could even find some relationship with the library purpose if you really stretched it (it bottom feeds on your bugs?).\nSorry to have burdened you with all this by originally opening this ticket (IME naming is not just one two but the hardest problem in computer science...), but I think it was worth it, Catfish is an excellent find, thanks!\n. I played with various searches as well and for me the important thing is that there are almost no matches for \"catfish c++ unit tests\" currently. The only possible conflict I saw was this program that exists in some Linux repositories but I a package would be called libcatfish-dev and not just catfish anyhow, so this is not a big deal.\n. Losing the existing name is the largest drawback I see too, but OTOH it will only increase with time passing and I still think that it's in the project long term interests to change the name to be more search-friendly, so the sooner it will be done, the better.\nMaybe you could officially call it \"To Catch a Catfish\" (haven't you dreamed of following in Harper Lee's footsteps?) to ease the transition...\n. Searching for \"catch\" itself is not, and never was, a problem. Try searching for how to do something with CATCH, e.g. \"catch check exception\".\n. FWIW I don't think this is going to solve the problems which motivated me to open this issue. Whether it's Catch2 or Catch11 or Catch22, people will still refer to it as \"Catch\" for short and I don't think searching for it is going to work very well.\nI still like the original CATFISH suggestion, but if you really want something even catchier, what about CATCHFISH. I'm sure someone will come up with backronym expansion for this if needed.\n. I think keeping the same prefix would be enough to avoid breaking the association with the current version, so I think anything starting with \"Catch\" (CATCHEM? CATCHUP? CATCHTOO? CATCHY?) would work. From this point of view, \"Recatch\" is not ideal, although it does seem appealing otherwise.\n. @philsquared the explanation seems pretty clear: numbers are printed in different bases because they fall on different sides of 8192 (they were 8000 and 9890). And yes, the issue is inconsistency. I didn't see any really simple way to force all numbers inside the same expression to use the same base, so personally I'd just always print them in decimal to fix this and perhaps add some way to explicitly request hex in the future (as it can also be useful for small numbers, e.g. bitmasks).\n. This is an interesting idea but I think it's going to result in too much noise when comparing small numbers, e.g. imagine seeing 1 (0x1) == 2 (0x2). So I'd rather only do it for \"big\" numbers, but this runs into the same problem as the original approach: if we keep the threshold at 8192, we could end up with 8000 == 9890 (0x26a2), i.e. without hex representation of the former number...\n. See my last comment before this one: if you use a mix, you're back to inconsistent output, i.e. the original problem.\n. FWIW I just ran into the same problem with CATCH 1.2.1 while compiling something using 10.8 SDK (for compatibility with OS X 10.7). This does look like a bug in compiler (mine is even older, it's Apple clang version 4.1 (tags/Apple/clang-421.11.66) (based on LLVM 3.1svn)), but I'm not completely sure.\nNotice that this only happens if -std=c++11 is used, without it everything is fine (whether using -stdlib=libc++ or not).\n. @Darelbi was your reply really meant to be done in this issue? I don't see how is this relevant to be honest...\n. No, sorry, it seems like explaining it is even harder than I thought :-(\nSOURCE_LINE_INFO is absolutely vital, this proposal makes no sense without it. Just look at the simple example at the end. The idea is that any failures will be reported at the line where CheckAlmostEqual() is called, as this is where you want to look, not at the line with CHECK_AT() itself.\nI'm also still puzzled by why do you think this is related to the exceptions at all, AFAICS this has nothing to do with them. And I'm quite sure it's better to open new tickets for separate issues.\n. @philsquared Sorry, now it's my turn to be missing something: how/where is the section location recorded and, most importantly, output? I don't see it anywhere in this simple test:\n```\n% cat -n tst.cpp\n     1  #define CATCH_CONFIG_MAIN\n     2  #include \n     3  #include \n     4\n     5  void CheckClose(int x, int y)\n     6  {\n     7      CHECK( std::abs(x - y) <= 1 );\n     8  }\n     9\n    10  TEST_CASE(\"Check close\")\n    11  {\n    12      CheckClose(1, 1);\n    13      CheckClose(1, 2);\n    14      CheckClose(2, 1);\n    15\n    16      SECTION(\"this is going to fail\"); {\n    17          CheckClose(0, 2);\n    18      }\n    19  }\n% g++ -Wall -I. tst.cpp && ./a.out\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\na.out is a Catch v1.2.1 host application.\nRun with -? for options\n\nCheck close\ntst.cpp:10\n...............................................................................\ntst.cpp:7: FAILED:\n  CHECK( std::abs(x - y) <= 1 )\nwith expansion:\n  2 <= 1\n===============================================================================\ntest cases: 1 | 1 failed\nassertions: 4 | 3 passed | 1 failed\n```\nAs you can see, only line 7 appears in the output, while I want the line 17.\nAlso, I did use \"approximate\" match in this example, but the real code does something completely different, so this is not really related to Approx (which is, of course, useful in its own right). Writing a custom matcher would work, of course, but it's a heavier solution and I'd have a few of those to write as I'm transitioning a big existing unit test suite to CATCH...\n. @philsquared Sorry, but applying ab44fb6811f1fee96fcb66ceb448602686bc5e41 to catch.hpp v1.7.1 doesn't seem to change anything, the output is still exactly the same as before. Does it work with this tst.cpp example for you?\nFWIW I'm not sure I really want to create separate SECTIONs just for this in any case, IMHO this is semantically wrong (sections are for different sub-parts of the test and I don't have anything like this here). But it's true that this could be used as a workaround -- if it worked.\nOut of curiosity, what exactly is the objection to adding CATCH_{CHECK,REQUIRE}_AT macro variants? This seems like such a natural generalization to me (instead of hard-coding the position, make it a parameter), yet people seems to very unenthusiastic about it. What am I missing?. > you're using a helper function but want to make it work almost like a custom assertion. Does that sound about right?\nI admit I don't actually the details of the test I was writing 1.5 years ago, but I think this is indeed an accurate description.\nThe important thing is that it's natural to write this helper function using normal CHECKs, i.e. it verifies several properties of the object (or compares several fields of two objects). I'm not sure if it's going to be as convenient to do it with matchers.\nActually, thinking more about this, the closest thing that could be done to what I want without changing CATCH would be to use INFO before each call to this helper function, probably. It could even be just INFO(__LINE__), e.g. this:\n% cat -n tst.cpp\n     1  #define CATCH_CONFIG_MAIN\n     2  #include <catch.hpp>\n     3  #include <cmath>\n     4\n     5  void CheckClose(int x, int y)\n     6  {\n     7      CHECK( std::abs(x - y) <= 1 );\n     8  }\n     9\n    10  TEST_CASE(\"Check close\")\n    11  {\n    12      CheckClose(1, 1);\n    13      CheckClose(1, 2);\n    14      CheckClose(2, 1);\n    15\n    16      INFO(\"at line \" << __LINE__); CheckClose(0, 2);\n    17  }\n\nresults almost in the same output as I wanted:\ntst.cpp:7: FAILED:\n  CHECK( std::abs(x - y) <= 1 )\nwith expansion:\n  2 <= 1\nwith message:\n  at line 16\nAnd I probably could define a macro to hide both INFO and CheckClose() inside it... It's still not nice as having built-in support for this, but probably good enough.. OK, thanks for the explanations and let's close this -- in the worst case, I'll reopen it later if I find some concrete example of something that can't be (comfortably) done using matchers.\nBut, just to be complete, I'm still missing the point of the section file/line bug fix as I see exactly the same output as before even with v1.7.2.. Oops. You're totally correct, of course, I completely failed to see this bogus semicolon (both 1.5 years ago and today...), sorry.. Actually it looks like in more complicated cases even g++ 4.9 still warns about this. So the choice seems to be between\n1. Always disabling -Wparentheses when using CATCH.\n2. Putting pragmas to ignore and restore it inside all macros using Catch::ResultBuilder.\n3. Reverting #247.\nAs much as I dislike this particular warning, I don't think (1) is acceptable, a testing library shouldn't dictate the choice of compilation options, I could live with it if this were only needed for the old compilers, but not if it's always the case. It looks like (2) should be doable, but that's a lot of work just to suppress a warning. So I really wonder if the benefits of the change in #247 were worth it and if (3) isn't the best thing to do.\nThe fact is that using the latest CATCH I get thousands of warnings in my tests and something needs to be done about it.\n. @rolanddenis thanks, I didn't notice #521 somehow.\nI did plan to try using _Pragma but if it doesn't work anyhow because of compiler bugs, I'm not sure if it's worth spending time on this.\nThe case of 4.9 is weird, I can't reproduce the warning in a simple example with 4.9.3 (from Debian), but I see it in the buildbot logs on a machine using 4.9.2. FWIW the warning can be reliably reproduced in simple example with all of 4.4, 4.5, 4.6 and 4.7, it's enough to do this:\necho 'int main() { int x = 2; return 1 <= x == 3; }' | g++ -Wall -c -fsyntax-only -x c++ -\n. This is really strange, I admit I haven't tested the performance implications of this, but I just don't see how could it affect the execution time so much without -b. How exactly can I reproduce this, i.e. what methodology did you use for benchmarking?\nFWIW with -b the code could be optimized by caching the result of isDebuggerActive() at the price of not detecting debugger being attached (or, even more rarely, detached) while the test is executing.\nThanks for looking at this!. No, sorry, I hadn't. I agree that it's the same thing and will close this one, thanks.\n. FWIW this is still a problem with v1.7.1. To be precise, it's a problem with the g++ versions from 4.4 to 4.7, inclusive. There are no warnings with 4.2 (I couldn't find 4.3 to test) nor with 4.8, 4.9 and 5 (I couldn't test 6 because it segfaulted with an ICE on my simple test, I'll look into this separately).\nSo I think it would be reasonable to add\n```\nif GNUC == 4 && GNUC_MINOR >= 4 && GNUC_MINOR <= 7\npragma GCC diagnostic ignored \"-Wparentheses\"\nendif\n``\ntoinclude/internal/catch_suppress_warnings.h. This would make CATCH usable for people forced to use these versions of the compiler (because currently it just isn't, until you add-Wno-parentheses` to the compiler flags yourself).. I understand the problem with suppressing the warnings in the entire TU, but IME this will end up being done anyhow when using one of the affected compiler versions because there are just too many useless warnings otherwise.\nAnd doing it for C++11 doesn't seem to make that much sense because gcc < 4.8 didn't have full C++11 support anyhow, so the vast majority of people using C++11 with gcc wouldn't be affected by this warning even without this _Pragma.. _Pragma was new in gcc 4.6 according to the docs.\nRight now the compiler which troubles us is 4.5 (yes, don't laugh please) under some ancient CentOS that we need to support, so it won't really help here. So I still think we should use _Pragma if we can and disable the warning globally otherwise.. This broke support for MSVC 9 (a.k.a. MSVS 2008) and probably other older compilers, see e.g. https://stackoverflow.com/questions/46477686/errors-when-compiling-catch-with-visual-studio-2008. Well, we can, in Catch2... but for Catch1 I think it would really make sense to revert b6e7c9bd7a160c07c5de894292022687895c17a3 (done on top of the older commit) and b7bd52cc98f8a9b646a13241ce8355ba97b8bab3 itself to keep it working with the old compilers it is meant for.. Sorry, I didn't notice this before posting, but I have exactly the same problem. Maybe my description of it on the mailing list is more clear?. FWIW I ended up doing\n#include \"internal/catch_impl.hpp\"\nnamespace Catch { namespace Clara { UnpositionalTag _; } }\n\nin the PCH-generating file. Ugly but seems to work.. It seems to work for me too, I just had to replace CATCH_CONFIG_MAIN from above with CATCH_CONFIG_RUNNER, as I have my own main().\nI'm still (and will continue to have to, in near future) using Catch 1.x though, I wonder if it could be backported there? Thanks!. ",
    "cviebig": "+1\n. ",
    "michaelbprice": "@philsquared, we are working on a tool that allows people to more easily migrate between test frameworks without having to rewrite a whole bunch of existing test code.  Having the ability to have multiple reporters registered during a single call to Session::run would be incredibly valuable.\nIt looks like this issue is quite old at this point.  If there were a pull request that implemented this feature (we almost hacked one up that worked around the framework limitation), would you consider it for inclusion?\n. My opinion, the provided rationale for making this kind of change is not sufficient.\nThere are other ways to solve this problem (probably better for the sanity of developers too). See https://msdn.microsoft.com/en-us/library/dn457346.aspx#BKMK_C___Just_My_Code\nThere may however be other reasons to make this change.  I recommend against merging this pull request and closing it instead.\n. @Tarnasa I just noticed that this pull request is to the master branch.  It might need to be made to the develop branch.\n. Is the anything else that we need to take care of to get this merged into the develop branch?\n. Thanks @philsquared.  There is also an \"Unreachable code\" error that VS 2015 complains about which causes us issues since we are treating warnings as errors.  I hope to get another PR in place for that (or a bug filed with Microsoft) after this one has been merged in.\n. Any updates as CppCon begins to wind down?\n. I detest unnecessary whitespace like everyone else, so I like the effort.\nI must say that I dislike Git's propensity to care about whitespace, and I consider that a tooling problem (in this case it seems like you have some overly aggressive pre-commit hooks).\n. As someone who works in test automation, you are describing a familiar problem.  Getting the right systems set up in the right way to build/test the right build configurations across all \"supported\" platforms is certainly a challenge, especially when you might have to deal with \"non-free\" software like Windows, where you need licenses to even run the operating system.\nIs there any \"requirements\" written down anywhere about what sorts of things would be most helpful?  Is it Visual Studio versions?  Static analysis?  Build permutations? Virtualization?\nFiguring this kind of stuff out is basically my day job, and I'd be happy to help you figure out a path forward.\n. @philsquared If there existed systems that would do all of this coverage for you, but you were unable to see the results without asking someone with access... would that be a non-starter for you?\n@Lexmark has an interest in keeping this project going, but we aren't really set up to expose our build infrastructure out to the public-at-large.  Of course, there's also the matter of whether or not you want your processes to depend so heavily on a corporation over which you have little-to-no control over.\n. @vpashka Would you be comfortable with getting #493 and closing this pull request?  I'm trying to help out a bit by seeing if there are extraneous/no-longer-valid PRs that could be closed.\n. What about an alternative form of CHECK or REQUIRE just for pointer comparisons?  FWIW, you might even be able to work in std::less for valid ordering comparisons for pointers.\n. Another, quite worse example (from the code that we actually had in some of our tests):\nc++\nTEST_CASE(\"Must throw an integer\", \"throw\")\n{\n    try\n    {\n        throw 1;\n        FAIL(\"Did not throw\");\n    }\n    catch (int)\n    {\n        // This is expected to happen\n    }\n}\nOutput:\nxml\n<testsuites>\n  <testsuite name=\"all tests\" errors=\"0\" failures=\"0\" tests=\"0\" hostname=\"tbd\" time=\"4.4e-05\" timestamp=\"tbd\">\n    <system-out/>\n    <system-err/>\n  </testsuite>\n</testsuites>\nWe've since replaced this with an EXPECTS assertion.  I think that writing tests like above seems a valid use of the framework, but it think it creates a quite confusing situation given the output.\n. @martinmoene Yes, those are the ones that I meant when I mentioned EXPECTS assertions.  Just got the macro name wrong.  But, I do believe that the second example should report correctly.  It possible that when taking different branches of control flow, that a single test case might have differing number of assertions.\n. > @michaelbprice I'm not sure what the problem is with your second example (with the throw 1) - is it that no assertions are reported - even though there is a FAIL written there? It is not possible for Catch to even be aware of that FAIL, given that it never reaches that code - and even if it could (perhaps some form of reflection) I don't think there is any logically consistent way it could be reported - or am I missing something?\nIt is that the tests attribute is 0, even though I clearly have a test defined.  Basically, I feel you are incorrectly/misleadingly keying the value of that attribute off of the number of assertion macros that are executed, instead of the number of TEST_CASE macros that exist.\nI'll do an experiment later to see how some Java tools behave with regards to counting the total number of tests.\n\nAs for the original issue I think the key here is, \"I'm not sure the semantics of the JUnit format are terribly clear\". The JUnit/Ant format is not documented so is open to interpretation. I think what Catch is doing here is a valid interpretation. IIRC I made this choice because there was no other way to get the individual number of assertions reported.\n\nHopefully my response above clarified.  I don't think you should be trying to count individual assertions, but rather the number of test cases.\n. As another example, if I were designing an interface such that misuses are diagnosed at compile-time rather than run-time, I would very much like to do something like this:\n``` c++\ninclude \nTEST_CASE(\"Class X must be default constructible\", \"static_tests\")\n{\n    static_assert(std::is_default_constructible_v); // tentatively valid C++17\n}\n```\nIn that case, I'd expect any failures to be reported at compile time, but I'd also like the unit test framework to affirmatively report that the test case is good (at least by recognizing that it is in fact a test!)\nI could hack around it by adding something goofy like a Catch assertion that just asserts on true, but I seriously shouldn't have to do something like that for every place where I want to do this (possibly dozens on any one type in my library).\n. As an additional data point... Jenkins agrees with my perspective...\nThis XML file:\nxml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<testsuites>\n  <testsuite name=\"all tests\" errors=\"0\" failures=\"0\" tests=\"26\" hostname=\"tbd\" time=\"0.004012\" timestamp=\"tbd\">\n    <testcase classname=\"global\" name=\"Load this library\" time=\"0.000265\"/>\n    <testcase classname=\"global\" name=\"Load Dummy library\" time=\"0.000468\"/>\n    <testcase classname=\"global\" name=\"Load Dummy library twice\" time=\"0.000433\"/>\n    <testcase classname=\"global\" name=\"Load Nonexistant library\" time=\"0.000266\"/>\n    <testcase classname=\"global\" name=\"Load Nonexistant function from Dummy library\" time=\"0.000408\"/>\n    <testcase classname=\"global\" name=\"DynamicLibraryLoader is not default constructable\" time=\"0.000057\"/>\n    <testcase classname=\"global\" name=\"Get last path separator position\" time=\"0.000051\"/>\n    <testcase classname=\"global\" name=\"Get last path separator position with no path separator\" time=\"0.000033\"/>\n    <testcase classname=\"global\" name=\"Get extension position with path separator\" time=\"0.000045\"/>\n    <testcase classname=\"global\" name=\"Get extension position without path separator\" time=\"0.000031\"/>\n    <testcase classname=\"global\" name=\"Strip directories with path separator\" time=\"0.00003\"/>\n    <testcase classname=\"global\" name=\"Strip directories without path separator\" time=\"0.000066\"/>\n    <testcase classname=\"global\" name=\"Strip extension with path separator\" time=\"0.000033\"/>\n    <testcase classname=\"global\" name=\"Strip extension without path separator\" time=\"0.000029\"/>\n    <testcase classname=\"global\" name=\"Strip directories and extension with path separator\" time=\"0.000057\"/>\n    <testcase classname=\"global\" name=\"Strip directories and extension without path separator\" time=\"0.000057\"/>\n    <testcase classname=\"global\" name=\"Get destination filename\" time=\"0.000188\"/>\n    <testcase classname=\"global\" name=\"Adds XML declaration if it is missing\" time=\"0.000242\"/>\n    <testcase classname=\"global\" name=\"No duplicate XML declaration if one already existed\" time=\"0.000086\"/>\n    <system-out/>\n    <system-err/>\n  </testsuite>\n</testsuites>\nis reported as:\n\n. Nice and simple. :+1:\n. These changes certainly seem outside the scope of whitespace changes.  What's the rationale for these?\n. ",
    "Reonaydo": "\nCatch does actually now support multiple reporters\n\nHow it can be used? How can I set write \"junit\" into file and \"console\" to stdout ?\n. ",
    "LesserBabka": "I would also appreciate this functionality (to be useful).. ",
    "ItEndsWithTens": "Just had some trouble building with Catch 1.0 build 1 in Windows; it looks like two instances of std::max aren't wrapped in parentheses in this version. Making the change myself on lines 4034 and 4412 of the single include eliminates the problem; I believe the equivalent locations are catch_list.hpp line 71 and clara.h line 403, inside Catch::listTests and Clara::CommandLine::optUsage, respectively.\n. ",
    "slowriot": "Note: i'm currently working around this using\nC++\n    REQUIRE(static_cast<int>(testlockable.readers)    == 0);\n    REQUIRE(static_cast<bool>(testlockable.readlock)  == false);\n. ",
    "refnum": "Actually, scrub this! The tests on the other Mac were actually also bringing in a \"special\" version of the stdio library and the issue is there rather than in Catch - sorry for the noise!\n. ",
    "veikkoeeva": "I wonder if this is the right place to add anothe VS 2013 build error. By using theVS 2013 (version 12.0.20617.1 Preview, the latest as of 2013-08-15) and the latest CATCH (version CATCH v1.0 build 6 (master branch) Generated: 2013-07-25 08:17:49.210246) I get a a bunch of error messages with the same configuration as PeterS. The following are the messages sorted by line (with a bit different project configuration, but doesn't seem to matter):\n39  IntelliSense: identifier \"wostream\" is undefined    c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iostream 34  42  UnitTest1\n40  IntelliSense: expected a declaration    c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iostream 45  1   UnitTest1\n26  IntelliSense: name followed by '::' must be a class or namespace name   c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  282 18  UnitTest1\n27  IntelliSense: variable \"resetiosflags\" may not be initialized   c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  282 46  UnitTest1\n28  IntelliSense: name followed by '::' must be a class or namespace name   c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  282 60  UnitTest1\n29  IntelliSense: name followed by '::' must be a class or namespace name   c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  283 18  UnitTest1\n30  IntelliSense: variable \"setiosflags\" may not be initialized c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  283 46  UnitTest1\n31  IntelliSense: name followed by '::' must be a class or namespace name   c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  283 58  UnitTest1\n32  IntelliSense: identifier \"streamsize\" is undefined  c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  285 18  UnitTest1\n33  IntelliSense: variable \"setprecision\" may not be initialized    c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  285 38  UnitTest1\n34  IntelliSense: identifier \"streamsize\" is undefined  c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  285 51  UnitTest1\n35  IntelliSense: identifier \"streamsize\" is undefined  c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  286 18  UnitTest1\n36  IntelliSense: variable \"setw\" may not be initialized    c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  286 38  UnitTest1\n37  IntelliSense: identifier \"streamsize\" is undefined  c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  286 43  UnitTest1\n38  IntelliSense: expected a declaration    c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iomanip  287 1   UnitTest1\nError   1   error C2504: 'ClassName' : base class undefined c:\\projektit\\testproject1\\unittest1\\catch.hpp   515 1   UnitTest1\n    41  IntelliSense: not a class or struct name    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   515 8   UnitTest1\nError   2   error C2653: '_CA_T_C_H__T_E_S_T____518' : is not a class or namespace name   c:\\projektit\\testproject1\\unittest1\\catch.hpp   518 1   UnitTest1\nError   3   error C2065: 'test' : undeclared identifier c:\\projektit\\testproject1\\unittest1\\catch.hpp   518 1   UnitTest1\nError   4   error C2014: preprocessor command must start as first nonwhite space    c:\\projektit\\testproject1\\unittest1\\catch.hpp   518 1   UnitTest1\n    42  IntelliSense: '#' not expected here c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   518 125 UnitTest1\n    43  IntelliSense: the identifier VA_ARGS can only appear in the replacement lists of variadic macros    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   518 156 UnitTest1\n    44  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   519 1   UnitTest1\nError   5   error C2059: syntax error : 'namespace' c:\\projektit\\testproject1\\unittest1\\catch.hpp   566 1   UnitTest1\nError   6   error C2143: syntax error : missing ';' before '{'  c:\\projektit\\testproject1\\unittest1\\catch.hpp   566 1   UnitTest1\nError   7   error C2143: syntax error : missing ')' before ';'  c:\\projektit\\testproject1\\unittest1\\catch.hpp   566 1   UnitTest1\nError   8   error C2447: '{' : missing function header (old-style formal list?) c:\\projektit\\testproject1\\unittest1\\catch.hpp   566 1   UnitTest1\nError   9   error C2143: syntax error : missing ';' before '&'  c:\\projektit\\testproject1\\unittest1\\catch.hpp   674 1   UnitTest1\nError   10  error C4430: missing type specifier - int assumed. Note: C++ does not support default-int   c:\\projektit\\testproject1\\unittest1\\catch.hpp   674 1   UnitTest1\n    45  IntelliSense: identifier \"TrueType\" is undefined    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   674 3   UnitTest1\n    46  IntelliSense: declaration is incompatible with \" testStreamable\" (declared at line 675) c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   674 13  UnitTest1\nError   11  error C2146: syntax error : missing ';' before identifier 'testStreamable'  c:\\projektit\\testproject1\\unittest1\\catch.hpp   675 1   UnitTest1\nError   12  error C4430: missing type specifier - int assumed. Note: C++ does not support default-int   c:\\projektit\\testproject1\\unittest1\\catch.hpp   675 1   UnitTest1\nError   13  error C2365: 'Catch::Detail::testStreamable' : redefinition; previous definition was 'function' c:\\projektit\\testproject1\\unittest1\\catch.hpp   675 1   UnitTest1\n    47  IntelliSense: identifier \"FalseType\" is undefined   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   675 3   UnitTest1\n    48  IntelliSense: declaration is incompatible with \" &testStreamable(std::ostream &)\" (declared at line 674)    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   675 13  UnitTest1\n    49  IntelliSense: identifier \"FalseType\" is undefined   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   675 28  UnitTest1\nError   14  error C2143: syntax error : missing ';' before '<<' c:\\projektit\\testproject1\\unittest1\\catch.hpp   677 1   UnitTest1\nError   15  error C4430: missing type specifier - int assumed. Note: C++ does not support default-int   c:\\projektit\\testproject1\\unittest1\\catch.hpp   677 1   UnitTest1\nError   16  error C2086: 'int Catch::Detail::FalseType' : redefinition  c:\\projektit\\testproject1\\unittest1\\catch.hpp   677 1   UnitTest1\n    50  IntelliSense: identifier \"FalseType\" is undefined   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   677 3   UnitTest1\n    51  IntelliSense: identifier \"BorgType\" is undefined    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   677 45  UnitTest1\n    52  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   704 2   UnitTest1\n    53  IntelliSense: namespace \"Catch\" has no member \"toString\"    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   772 25  UnitTest1\n    54  IntelliSense: namespace \"Catch\" has no member \"toString\"    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   776 17  UnitTest1\n    55  IntelliSense: namespace \"std\" has no member \"setprecision\"  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   800 15  UnitTest1\n    56  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   845 1   UnitTest1\n    57  IntelliSense: inline specifier allowed on function declarations only    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   877 2   UnitTest1\n    58  IntelliSense: name followed by '::' must be a class or namespace name   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   877 19  UnitTest1\n    59  IntelliSense: expected a ')'    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   877 37  UnitTest1\n    60  IntelliSense: expected a ';'    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   877 49  UnitTest1\n    61  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   913 1   UnitTest1\n    62  IntelliSense: name followed by '::' must be a class or namespace name   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   938 3   UnitTest1\n    63  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   939 2   UnitTest1\n    64  IntelliSense: incomplete type is not allowed    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   944 19  UnitTest1\n    65  IntelliSense: expected a ')'    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   944 33  UnitTest1\n    66  IntelliSense: incomplete type is not allowed    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   944 46  UnitTest1\n    67  IntelliSense: expected a ';'    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   944 66  UnitTest1\n    68  IntelliSense: name followed by '::' must be a class or namespace name   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   949 3   UnitTest1\n    69  IntelliSense: identifier \"SourceLineInfo\" is undefined  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   957 3   UnitTest1\n    70  IntelliSense: member \"AssertionResult::AssertionInfo\" is not a type name    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   961 3   UnitTest1\n    71  IntelliSense: member \"AssertionResult::AssertionResultData\" is not a type name  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   962 3   UnitTest1\n    72  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   965 1   UnitTest1\n    73  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1129    2   UnitTest1\n    74  IntelliSense: identifier \"AssertionInfo\" is undefined   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1165    31  UnitTest1\n    75  IntelliSense: expected a ')'    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1165    45  UnitTest1\n    76  IntelliSense: expected a ';'    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1165    58  UnitTest1\n    77  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1170    2   UnitTest1\n    78  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1178    2   UnitTest1\n    79  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1180    1   UnitTest1\n    80  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1248    2   UnitTest1\n    81  IntelliSense: identifier \"T\" is undefined   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1260    3   UnitTest1\n    82  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1261    2   UnitTest1\n    83  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1263    1   UnitTest1\n    84  IntelliSense: identifier \"SourceLineInfo\" is undefined  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1313    4   UnitTest1\n    85  IntelliSense: name followed by '::' must be a class or namespace name   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1314    4   UnitTest1\n    86  IntelliSense: expected a ')'    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1315    22  UnitTest1\n    87  IntelliSense: identifier \"MessageInfo\" is undefined c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1324    3   UnitTest1\n    88  IntelliSense: identifier \"MessageInfo\" is undefined c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1333    3   UnitTest1\n    89  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1336    1   UnitTest1\n    90  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1370    2   UnitTest1\n    91  IntelliSense: identifier \"Counts\" is undefined  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1396    3   UnitTest1\n    92  IntelliSense: identifier \"Counts\" is undefined  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1397    3   UnitTest1\n    93  IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1399    1   UnitTest1\n    94  IntelliSense: invalid specifier outside a class declaration c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1425    3   UnitTest1\n    95  IntelliSense: name followed by '::' must be a class or namespace name   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1425    11  UnitTest1\n    96  IntelliSense: identifier \"ExpressionResultBuilder\" is undefined c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1425    48  UnitTest1\n    97  IntelliSense: expected a ')'    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1425    72  UnitTest1\n    98  IntelliSense: expected a ';'    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1425    132 UnitTest1\n    99  IntelliSense: invalid specifier outside a class declaration c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1427    3   UnitTest1\n    100 IntelliSense: a type qualifier is not allowed on a nonmember function   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1427    44  UnitTest1\n    101 IntelliSense: function \"getCurrentTestName\" may not be initialized  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1427    50  UnitTest1\n    102 IntelliSense: invalid specifier outside a class declaration c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1428    3   UnitTest1\n    103 IntelliSense: a type qualifier is not allowed on a nonmember function   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1428    50  UnitTest1\n    104 IntelliSense: function \"getLastResult\" may not be initialized   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1428    56  UnitTest1\n    105 IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1429    2   UnitTest1\n    106 IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1430    1   UnitTest1\n    107 IntelliSense: identifier \"IsDebuggerPresent\" is undefined   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   1513    9   UnitTest1\n    108 IntelliSense: \"std::basic_ostream<_Elem, _Traits>::basic_ostream(const std::basic_ostream<_Elem, _Traits>::_Myt &_Right) [with _Elem=char, _Traits=std::char_traits]\" (declared at line 84 of \"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ostream\") is inaccessible   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2142    10  UnitTest1\n    109 IntelliSense: namespace \"std\" has no member \"cout\"  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2142    16  UnitTest1\n    110 IntelliSense: \"std::basic_ostream<_Elem, _Traits>::basic_ostream(const std::basic_ostream<_Elem, _Traits>::_Myt &_Right) [with _Elem=char, _Traits=std::char_traits]\" (declared at line 84 of \"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ostream\") is inaccessible   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2147    8   UnitTest1\n    111 IntelliSense: namespace \"std\" has no member \"cout\"  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2147    14  UnitTest1\n    112 IntelliSense: namespace \"std\" has no member \"cout\"  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2169    20  UnitTest1\n    113 IntelliSense: namespace \"std\" has no member \"cout\"  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2194    32  UnitTest1\n    114 IntelliSense: identifier \"MessageInfo\" is undefined c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2376    16  UnitTest1\n    115 IntelliSense: identifier \"MessageInfo\" is undefined c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2395    15  UnitTest1\n    116 IntelliSense: identifier \"Counts\" is undefined  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2401    4   UnitTest1\n    117 IntelliSense: identifier \"Counts\" is undefined  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2410    3   UnitTest1\n    118 IntelliSense: identifier \"AssertionInfo\" is undefined   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2493    34  UnitTest1\n    119 IntelliSense: identifier \"Counts\" is undefined  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2591    59  UnitTest1\nError   17  error C2059: syntax error : 'if'    c:\\projektit\\testproject1\\unittest1\\catch.hpp   2699    1   UnitTest1\nError   18  error C2143: syntax error : missing ';' before '{'  c:\\projektit\\testproject1\\unittest1\\catch.hpp   2699    1   UnitTest1\nError   19  error C2447: '{' : missing function header (old-style formal list?) c:\\projektit\\testproject1\\unittest1\\catch.hpp   2699    1   UnitTest1\n    120 IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2699    2   UnitTest1\nError   20  error C2059: syntax error : 'if'    c:\\projektit\\testproject1\\unittest1\\catch.hpp   2700    1   UnitTest1\n    121 IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2700    2   UnitTest1\nError   21  error C2059: syntax error : 'if'    c:\\projektit\\testproject1\\unittest1\\catch.hpp   2701    1   UnitTest1\n    122 IntelliSense: expected a declaration    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2701    2   UnitTest1\nError   22  error C2065: 'originalExpr' : undeclared identifier c:\\projektit\\testproject1\\unittest1\\catch.hpp   2702    1   UnitTest1\nError   23  error C4430: missing type specifier - int assumed. Note: C++ does not support default-int   c:\\projektit\\testproject1\\unittest1\\catch.hpp   2702    1   UnitTest1\nError   24  error C2365: 'Catch::isTrue' : redefinition; previous definition was 'function' c:\\projektit\\testproject1\\unittest1\\catch.hpp   2702    1   UnitTest1\nError   25  error C2491: 'Catch::isTrue' : definition of dllimport data not allowed c:\\projektit\\testproject1\\unittest1\\catch.hpp   2702    1   UnitTest1\n    123 IntelliSense: this declaration has no storage class or type specifier   c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2702    2   UnitTest1\n    124 IntelliSense: declaration is incompatible with \"bool Catch::isTrue(bool value)\" (declared at line 226)  c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2702    9   UnitTest1\n    125 IntelliSense: identifier \"originalExpr\" is undefined    c:\\projektit\\TestProject1\\UnitTest1\\catch.hpp   2702    25  UnitTest1\n. I believe so. I can reprodude the compilation erros by creating an empty C++ project, adding catch.hpp to headers and then creating a source file (e.g. TestProject1.cpp). For instance the following with command line \"/GS /analyze- /W3 /Zc:wchar_t /ZI /Gm /Od /sdl- /Fd\"Debug\\vc120.pdb\" /fp:precise /D \"_MBCS\" /errorReport:prompt /WX- /Zc:forScope /RTC1 /Gd /Oy- /MDd /Fa\"Debug\\\" /EHsc /nologo /Fo\"Debug\\\" /Fp\"Debug\\TestProject1.pch\" \" will produce the aforementioned errors upon uncommenting the line containing catch.hpp. I'm a bit tight on time currently, but I could investigate a bit more in depth. Can you provide an educated quess what could be the problem or what to try?\nA small example:\n``` C++\n//#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file\n//#include \"catch.hpp\" //Removing the comment from before this line will lead to compilation errors.\ninclude \ninclude \nint main()\n{ \n    std::cout << \"Is this a C++ project?\" << std::endl;\nreturn EXIT_SUCCESS;\n\n}\n```\n. Hi!\nI concur, with the latest master build (http://builds.catch-lib.net/) the problem is gone (Integration build link is broken). For what's its worth, I still happened to have the test project and associated header files around. Using the old header file does cause trouble, exchanging it with the new one compiles and runs fine. I can send the project in case someone is still interested of seeing the whole project.\n<edit: I have the latest Visual Studio 2013, Windows 8.1 and all patches. So, the tooling has changed slightly too.\n. ",
    "vaskevich": "I'm still encountering these issues in MSVC 2013.\n. ",
    "aadityakalsi": "I actually integrated it as my unit test framework.\n1. Just add_subdirectory(catch)\n2. Create a header under catch; catch/catch.hpp which #includes the single include hpp.\nThat's it!\nYou could make it more complicated, but I found this neat. It does take a while to compile each test though, because of the single include.\n. ",
    "Fraser999": "I added it to our build system (CMake) the other day too.  Very straightforward: https://github.com/maidsafe/MaidSafe/blob/next/cmake_modules/add_catch.cmake\nI plan to try and integrate it better with CTest in the future.\n. @gnzlbg Maybe this is such a simple script that it could be just part of the documentation (pretty much as you have done in your comment)?\nIf it were to be included, we should probably try and make it as general as possible.  For example, we've both got:\nset(CATCH_INCLUDE_DIR ${source_dir}/include PARENT_SCOPE)\nbut this would fail if included in the top-level CMake file where there is no parent scope.  I guess we should use something like:\nset(CATCH_INCLUDE_DIR ${source_dir}/include CACHE INTERNAL \"Path to include folder for Catch\")\n. No worries about missing the ticket - I gather you were busy :-)\nYes, your fix seems to be the same as mine.  My pull request included a basic regression test for this, but the new target was only added to the CMakeLists.txt.  My rationale is explained in my pull request's comments and I'm not going to labour the point about CMake, but a regression test should be fairly trivial and would be useful here I guess.\nOther than that, as far as I'm concerned this ticket can be closed.\n. ",
    "gnzlbg": "Thanks for the feedback! I'll try it too. I guess CTest should just work by just doing add_test().\n. I have configured Catch as an external project using the following CMake script (note: modified to documentation draft):\nYou can use the following CMake script to automatically fetch Catch from github and configure it as an external project:\n``` CMake\ncmake_minimum_required(VERSION 2.8.8)\nproject(catch_builder CXX)\ninclude(ExternalProject)\nExternalProject_Add(\n    catch\n    PREFIX ${CMAKE_BINARY_DIR}/catch\n    GIT_REPOSITORY https://github.com/philsquared/Catch.git\n    TIMEOUT 10\n    UPDATE_COMMAND ${GIT_EXECUTABLE} pull\n    CONFIGURE_COMMAND \"\"\n    BUILD_COMMAND \"\"\n    INSTALL_COMMAND \"\"\n    LOG_DOWNLOAD ON\n   )\nExpose required variable (CATCH_INCLUDE_DIR) to parent scope\nExternalProject_Get_Property(catch source_dir)\nset(CATCH_INCLUDE_DIR ${source_dir}/include CACHE INTERNAL \"Path to include folder for Catch\")\n```\nIf you put it in, e.g., ${PROJECT_SRC_DIR}/${EXT_PROJECTS_DIR}/catch/, you can use it in your project by adding the following to your root CMake file:\n``` CMake\nIncludes Catch in the project:\nadd_subdirectory(${EXT_PROJECTS_DIR}/catch)\ninclude_directories(${CATCH_INCLUDE_DIR} ${COMMON_INCLUDES})\nenable_testing(true)  # Enables unit-testing.\n```\nMaybe it would be nice to put this in the wiki/docs or in the repository e.g. under a cmake subdirectory along with a doc explaining this.\nEDIT: improved with comments and code from @Fraser999 (see above/below).\n. @Fraser999 I see you did something similar. Shouldn't such a script be in the repository along with some docs so that it can get improved over time and people don't need to reinvent it?\n. @Fraser999 I've edited my comment with your remarks. Do you think that is good enough? If so I'll send a pull request.\n. CATCH is C++11.\nIf CATCH wants to be C++03 compatible it should check for C++03 and provide alternative implementations/workarounds. You are getting these warnings because you are compiling in C++03 mode:\n-Wvariadic-macros: variadic macros are a C++11 feature. \n-Wlong-long: long long is another C++11 feature: (warning: use of C++0x long long integer constant [-Wlong-long])\nThe warning of -Weffc++:\nshould be initialized in the member initialization list\nis just non-sense. However, CATCH should supress this warnings from their headers to provide a warning-free implementation for users compiling with -Weffc++. That is, checking if the compiler is gcc, and then warning push/pop pragmas. \nThe following warnings:\nalways evaluates both arguments, \nhas pointer data members,\nhas a non-virtual destructor, and\nshould return by value\nmight be important and one should take a closer look at them.\n. @samaursa  is that a clang warning or is it the clang-analyzer?\n. Which flags are you using?\nOn Friday, November 22, 2013, samaursa wrote:\n\nThis is a clang warning. Analyser was not run.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/philsquared/Catch/issues/208#issuecomment-29097601\n.\n. I just want to reproduce the issue. Maybe you could post the verbose\ncompiler output to a gist? I'm interested in the cmd line arguments used to\ncall the compiler and the linker.\n\nOn Saturday, November 23, 2013, samaursa wrote:\n\nI am not using Pedantic warnings. Is there any other particular flag you\nare looking for?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/philsquared/Catch/issues/208#issuecomment-29122061\n.\n. @samaursa no idea, I develop on a mac but never used Xcode myself. Xcode calls apple clang. What I need to see is which options it uses when it calls clang. Maybe there is a console there somewhere that displays that?\n. > Seeing this, I am inclined to close this issue.\n\nWhat I actually had in mind (a long long time ago) was a bit more complex. Given:\n```c++\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\ninclude \ninclude \nvoid term() { std::terminate(); }\nvoid assert_fail() {  assert(false && \"Hello\"); }\nTEST_CASE(\"TEST-terminate\", \"[.term]\"){\n    SECTION(\"First\") {\n        term();\n    }\n}\nTEST_CASE(\"TEST-assert\", \"[.ass]\") {\n    SECTION(\"First\"){\n        assert_fail();\n    }\n}\n```\ndoes the error message point me to term/assert_fail or does it point me to SECTION(\"First\") as well? \nThe motivation would be e.g. testing std::vector. Suppose operator[] does bound checking with assert. Arguably, operator[] might be used in a lots of test and sections, and when the assert triggers, one sees that something is indexing out of bounds. It would be nice if Catch could somehow pinpoint which test that came from. \nRunning a debugger will show the back-trace, so I would not say this is high priority. But if Catch would tell me which test the assertion was triggered from, I think that information would save me from having to run a debugger at all in a lot of situations.\nEDIT: @philsquared @horenmar I haven't used Catch in a long time because 1) I found it too heavy weight back then (it took a long time to compile tests that used it, but IIRC you guys have significantly improved this over the years) and 2) it did not have all the features I was used to from GTest (like process setup/teardown for death tests). So I decided to switch to Eric Niebler's simple_test.hpp which was really lightweight (but offers only really basic testing). So why I am writing this? Well, just because I filled these issues back then does not mean that Catch must offer them. With a bit more hindsight, process setup/teardown will complicate Catch, and will affect compile-times. I do think that a \"general-purpose\" testing library should offer these, but you should consider whether these are in scope for Catch at all first since they involve many trade-offs. You might be able to have the cake and eat it by offering this as \"opt-in\" functionality via a macro but offering these unconditionally for everybody might not be in Catch's best interest. \nI would probably consider Catch again for future projects if it was possible to configure it to compile very fast (with less features), and opt in to more complex features when I need them (or for the tests that I need them) with an impact on compile times.. > Your example still prints the line of the failing section, that is either line 11 or 17.\nI think we can close this issue then :) \n\nBy the way, did you feel the compile times were too slow even with the test main separated?\n\nI think I did not tried that. I ported a bunch of GTest files (each with its own main) to Catch back then (when Catch was more or less released, this was a long time ago), and basically went from instant compiles to ~10-30s per file which hit my edit-compile-test cycle hard :/ \n\nbut for Catch 2, keeping compile times down is one of the design goals.\n\nI will give it a try it when its released :)\n\nAs far as the second issue is concerned (tests in separated processes), that is a big one and the support is not likely to materialize anytime soon\n\nIIRC the original issue had some pointers to some implementations (probably the GTest one). For some reason I have in mind that it was around 1kLOC (or ~2kLOC) so it might not be such a big issue, but last time I checked that was a very long time ago.. @philsquared  looking at google-test's implementation it seems that they spawn a child process for each test, log the test output, and catch the exit code. They test that the exit code is correct (e.g. 0 for EXPECT_EXIT, non-zero for EXPECT_DEATH) and that a given regular expression finds a match in the test output.  \nA portable implementation (across Linux, Mac, and Windows) is a lot of work indeed. Is using Process (it is not part of Boost) an option?\n. I just want to mention again that Process is proposed for inclusion into Boost but hasn't been accepted yet (and it seems abandoned). Second: as everything boost licensed, you can just pick up the headers you need and add them to your project. That is, you don't need to add an external dependency if you don't want to. It usually make sense to add an external dependency to get bugfixes but since Process seems abandoned I don't see any drawbacks in just getting the functionality we need (a portable implementation for managing processes) and dumping out the rest. Process went through 2-3 rounds of peer-review so if you want to implement your own C++ runner it makes sense to look at its implementation anyway.\n. Catch came up on reddit today and I mentioned the lack of this feature as basically the only thing that I missed from GTest (not that I went back to GTest just because of it tho). I know it is complicated to achieve this in a portable way, I just wanted to ask if there has been some progress on this. \n. Hey yes we should close this. Providing an overload of operator<< to TestType seems like a reasonable thing to do. Thanks!. fixes #186 \n. This warning also appears in clang: warning: if statement has empty body [-Wempty-body].\n. reworded, sorry.\n. @philsquared did this pass TravisCI ?\nIt should have but I can't see it.\n. ",
    "stefanholek": "Hi Wichert! Yes, what you describe is the pre-1.0 behavior. Currently however, each TEST_CASE and SECTION is first run without any sub-SECTIONs, and I can't see how this would be useful.\nThe problem is more obvious when using the BDD macros:\ncpp\nSCENARIO(\"catch/nestedSectionsBDD\")\n{\n    printf(\"0\");\n    GIVEN(\"s1\") {\n        printf(\"1\");\n        WHEN(\"s2\") {\n            printf(\"2\");\n            THEN(\"s3\") {\n                printf(\"3\");\n            }\n        }\n    }\n    printf(\"\\n\");\n}\nThere is no good reason this should print anything but:\n0123\nOr is there?\n. > Does this give you any issues or was it purely curiosity?\nNo issues. I just noticed my assertion count going up after upgrading Catch and was wondering. It's bound to increase test runtime though, especially for the BDD case, isn't it?\n. ",
    "bkuhns": "I believe I just spent an hour or so discovering this bug. I pulled build 6 yesterday and most of my tests work fine. I then was running some newer tests today that already used the new BDD macros. Suddenly tests that I thought should work were failing. I didn't immediately think to connect the failures to Catch's build 6 and spent some time scratching my head instead.\nHere's what one of my tests looks like https://gist.github.com/bkuhns/135c079e0248a752c948\nWith build 5, this test passes normally. Under build 6, the mocking framework reports that the expected function (DataConverter::convert) isn't called. It seems the mocks get destructed differently in Catch build 6 such that methods on them aren't invoked first, so the mocking framework throws an exception.\nUpdate: It seems in build 6, the GIVEN section where I set up the mocks and their expectations doesn't delve into the WHEN section during the same execution step, so the mock(s) get destructed without the expected functions called.\n. I just pulled build 23 and this behavior still exists. Here's a \"real world\" example of using regular sections rather than the BDD macros. I create a mock object in my set up, each section then sets different expectations on the mock, the actual test runs after the sections, and finally we set up the requirement on the result:\n``` C++\nTEST_CASE(\"Connector should or shouldn't send a message depending on whether it's connected.\")\n{\n    auto implMock = new ConnectorImplMock();\n    auto connector = Connector(unique_ptr(implMock));\nSECTION(\"Connector is connected.\")\n{\n    MOCK_EXPECT(implMock->isConnected).once().returns(true);\n    MOCK_EXPECT(implMock->send).once();\n}\n\nSECTION(\"Connector is NOT connected.\")\n{\n    MOCK_EXPECT(implMock->isConnected).once().returns(false);\n    MOCK_EXPECT(implMock->send).never();\n}\n\nauto message = getDummyMessage();\nconnector.send(message);\n\nREQUIRE_NOTHROW(mock::verify());\n\n}\n```\nSomewhere around build 4 or 5, CATCH would go immediately into the first SECTION on the first run. With build 23, it skips both sections and executes the test. But because the mock's expectations are set within the sections, the first run of the test (which skips sections) executes without setting up the mock. With no expectations set, the mock framework throws an exception on the first run of the test.\nThis makes sections in a unit test with mock objects unusable.\n. Looks good to me, I just tried out the following test:\nC++\nTEST_CASE(\"A SECTION should be run on the first pass.\")\n{\n    auto sectionRun = false;\n    SECTION(\"If this section runs, then the test should always succeed.\") {\n        sectionRun = true;\n    }\n    REQUIRE(sectionRun);\n}\nAnd the test passes, implying it runs through the section on the first run.. ",
    "ruudsieb": "Just started using catch 1.5.1 today for integration tests, and immediately stumbled upon this issue.\nWhen comparing my tests to the OP, the output is;\n01\n02\n03\nWhen all sections PASS\nWhen section3 fails, the output is\n01\n02\n03\n0\n(newline is not very visible, but present ;)\nSo the whole testcase is executed again after the failing section, which is not needed and takes a lot of extra time.\n. Hi Phil,\nThanks for the explanation. I didn't realize that the sections are dynamically discovered, is there a reason for that ('cause they are statically defined, i would assume dynamic discovery is not needed)?\nI like the concept of catch, and specially the ease of use. I'm going to try if i can use setup/teardown instead of code in the testcase which then hopefully doesn't get executed when there is no section to execute anymore.\nThanks,\nRuud\n. Glad it was a real issue, not misuse ;)\n. Fixed in 1.5.2\n. ",
    "kapouer": "To understand this PR: this error happens when using the non-single-file version of Catch.\n. Yes, i can confirm @1e2f1d160336be07411775c476bfed3c7673263f resolves the issue.\n. Great ! i've just uploaded updated debian package.\nI suppose i can close this now.\n. ",
    "phresnel": "I realize the issue is fixed in branch Integration.\n. To be honest, I do not remember the details of why I closed it.\nI think I found that after pulling or switching branches, the problem just went away. But in case it's relevant again, I reopened my PR.\n. ",
    "ben-crowhurst": "+1  These warnings are driving us crazy.\n. ",
    "cdmh": "Readme.md was generated by the python script. I didn't modify it or save it from any editor.\n. core.autocrlf is set false \"commit as-is\"\n. Ok, I didn't see anything in the docs about using unix-style endings, so some guidance would have been better than \"DOS\u2013Unix end-of-line mismatch\" which doesn't help at all. I expected this to be a friendly project to work on!\n. @martinmoene that's sensible. If the project has requirements, then either document them, or better still, automate it. But don't bitch at people who are new to the project and haven't read the minds of people in the know.\n. Hi Phil, as I learn more about git pull requests, I understand this is incorrect. I have moved my changes onto individual branches and will create separate pull requests for each. This now has no changes, and can be closed. Cheers, Craig.\n. ",
    "alienscience": "Thanks also for the workaround. I have put the compilation output at:\nhttps://github.com/alienscience/catfood/blob/master/catch-compilation.txt\n. ",
    "socantre": "@samaursa To get the compile command Xcode is executing you can go to the Xcode log navigator, select the log for the relevant build, select the compile step that produces the warnings, and press the disclosure button. This will show the entire command Xcode issues to do the compilation.\nSee a screenshot here.\n. I would still really like third party headers to compile cleanly even with /Wall. This makes it much easier to use the 'subtractive' strategy for enabling warnings.\nThis doesn't mean that all the warnings need to be \"fixed\". If the headers are intended to be warning free at some particular warning level then the headers should internally force that warning level, rather than ask users to externally apply warning suppression.\nThe changes for VS2017 includes a 'warning overhaul', in which they apply something similar, but a bit more complicated in order to support two internal levels of warnings. They mention that /Wall works for now, but is unsupported. I hope that their mind can be changed and that they will explicitly maintain /Wall support.\nhttps://blogs.msdn.microsoft.com/vcblog/2017/02/06/stl-fixes-in-vs-2017-rtm/. You're only supposed to enforce the warning level internally, not on the client's code. So if the client enables a warning, it won't be silent for their code no matter what you do.\nAsking clients to suppress warnings in third party code is asking them to know whether or not that third party code was intended by its developers to be free of that warning or not. Clients shouldn't have to know or divine the developer's intent for such internal code. Your internal code should just be warning free no matter how high the client wants to turn up the warning level for their own code.. yeah, #pragma warning(supress:4242) on the line immediately before the warning would make it go away.\n. ",
    "Slonegg": "@philsquared I've added compiler checks, they are not ideal, but basically now it should compile everywhere.\nI can't modify INTERNAL_CATCH_UNIQUE_NAME to use COUNTER where applicable, there are plenty of code that relies on fact you get same name on same line.\n. ",
    "grahamboree": "Could you just concatenate FILE to LINE in the declaration of INTERNAL_CATCH_UNIQUE_NAME(...) to form a pretty-darn-unique name?  It's a bit safer than COUNTER because it's using standardized macro names, though it's not as complete a fix.  The test case names will still collide if defined on the same line in either the same file or two files with the same name.  It'd take me about 5 minutes to make this change and send the PR if you think this is a good interim fix.\n. ",
    "BMBurstein": "Is this still live?\n. Does this mean that there is a solution for newer editions of VS? Specifically VS2015?. I accidentally based this off an older revision (I am new to git). The only file I actually changed is include/reporters/catch_reporter_bases.hpp\n. Yes, the library itself comes up first. But searching for related things (help, tutorials) is hard. Look at your example search. Most of the results have nothing to do with this library.. Sorry, I saw your comment but hadn't had a chance to fix it myself.\nI am wondering if I am going about this the wrong way. My intention was to make more info available for external runners to use, but for that maybe instead of adding more info to the existing lists, would it make more sense to create a new list command --list-parseable or something similar, which will list tests in a documented, parser-friendly format instead of a screen-friendly one? The format would probably include all the info available on a test (name, description, line info, tags, etc.) on a single line, with the different fields separated by some delimiter.\nWould that be a better idea than the current one? Or maybe leave this already and add also the parser-friendly list command?. > Routing list outputs through reporters, so they can format the output accordingly, and introducing verbosity levels would be preferred, but I have no idea when that would make it in.\nI would like to try working on this, but am unsure where to do this. It would probably involve some slight breaking changes, at least to the command line. Should I base this on the master branch or on dev-modernize? I am assuming that the later is the work on a Catch v2? How close is that to becoming stable?. Not having the reporter try to guess the closest supported level allows adding verbosity levels in the future more easily (I was thinking of a \"parsable\" verbosity level), or adding support for existing verbosity levels to existing reporters without breaking anything that expects a certain output format.. This has been \"fixed\" (the warning is ignored) in the source, but not yet in the generated single header. Maybe this should be closed?. ",
    "janisozaur": "This looks like a nice feature, even though I don't use VS. In case this goes in, please make sure to optimize PNGs before you add them to git (so as to keep only one instance of already optimized screens).\n. For what it's worth: you can work your way around it by putting catch in its own \"namespace\" directory and include it with -isystem rather than -I, which will silence warnings on headers included from this location.\nSee https://gcc.gnu.org/onlinedocs/cpp/System-Headers.html. That is some ancient version, 3.4 series was released in 2004 and https://github.com/philsquared/Catch/wiki/What-compilers-does-CATCH-work-with lists 4.2 the lowest (it doesn't list any unsupported versions though), I would suggest you update your compiler.\n. Take a look at https://cmake.org/cmake/help/v3.0/variable/BUILD_SHARED_LIBS.html too. There is no need to supply the Java-based entrypoint, native (as in: comprised solely of C++ code) binaries work fine. You should be able to provide a regular main() function and execute your application through it.. typo in dlliport, missing m\n. Shouldn't that also be marked static?. ",
    "zdavisk": "On a side note, is there any plans for a direct \"FAILURE\" macro that doesn't require an expression?\nIt's probably me but I can't seem to get a check for a nullptr to work inside a catch REQUIRE() statement. So then I end up checking the null pointer in an \"IF\" statement that has a line inside that says REQUIRE(1 == 0) or something similar.\nWould be great if we had a direct failure macro. :)\n. Mostly because it was working just fine until I eclipsed about 7 test case files and 100+ assertions. THEN it broke. :)\nI switched to making them .cpp and avoided including them in the main entry point. That appears to have corrected the issue. Thanks a bunch!\n. Now let me try to REQUIRE(obj != nullptr) again and see if that works.... \n. ",
    "kgreenek": "Major +1 for this feature. This is the one thing I miss from GTest. It's really important to be able to test that asserts happen when they should imo. Right now I have to use BOOST_ASSERT (or similar macro) as a workaround.. ",
    "StephanDollberg": "Yep, nvcc issues the same warning as before.\n. When using the most simple name hiding example:\n``` cpp\ninclude \nstruct Parent {\n    virtual void foo() {\n        std::cout << \"parent\" << std::endl;\n    }\n};\nstruct child : Parent {\n    virtual void foo(int) {\n        std::cout << \"child\" << std::endl;\n    }\n};\nint main()\n{\n    child c;\n    c.foo(5);\n}\n```\nClang warns, nvcc warns, but gcc doesn't. Though, in the Reporter example clang also doesn't complain. I assume this is in relation to the fact that we reintroduce testRunEnded.\n. ",
    "pip010": "maybe worth mentioning that in docs, I got myself in the same trap, good I dont need to re-factor like 100s files :). 0.0 == Approx( 0.0 )\nfails too !. CHECK( 0.25f == Approx( 0.0f ).margin( 0.25f + std::numeric_limits::epsilon() * 0.25f ) );\nSHOOT ME NOW :D \nwhen testing is more complicated than what is tested :D. ",
    "kostyfisik": "Hmm..\nThere is no problem on Debian 7\nCould you try to add support for Debian 6? It is installed on our production cluster (20+ nodes) and problems using default compiler to make Catch is for sure not enough for OS upgrade.\nIf support of outdated compiler will spoil your code - do not add this support. Just mark in the Readme the least version of gcc to be valid and close this issue.\nThank you!\ntig@rh-lum:~/catch/Catch-master/projects/CMake$ cmake ./\n-- The C compiler identification is GNU 4.7.2\n-- The CXX compiler identification is GNU 4.7.2\n-- Check for working C compiler: /usr/bin/gcc\n-- Check for working C compiler: /usr/bin/gcc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/tig/catch/Catch-master/projects/CMake\ntig@rh-lum:~/catch/Catch-master/projects/CMake$ make\nScanning dependencies of target SelfTest\n[  7%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/ApproxTests.cpp.o\n[ 15%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/BDDTests.cpp.o\n[ 23%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/ClassTests.cpp.o\n[ 30%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/CmdLineTests.cpp.o\n[ 38%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/ConditionTests.cpp.o\n[ 46%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/ExceptionTests.cpp.o\n[ 53%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/GeneratorTests.cpp.o\n[ 61%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/MessageTests.cpp.o\n[ 69%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/MiscTests.cpp.o\n[ 76%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/SectionTrackerTests.cpp.o\n[ 84%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/TestMain.cpp.o\n[ 92%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/TrickyTests.cpp.o\n[100%] Building CXX object CMakeFiles/SelfTest.dir/home/tig/catch/Catch-master/projects/SelfTest/VariadicMacrosTests.cpp.o\nLinking CXX executable SelfTest\n[100%] Built target SelfTest\n. It seems that most of the problem has gone away, only two warnings... The problem is running tests returns some error.\ntig@tig-laptop2:/home/mmedia/soft/catch/Catch-master/projects/CMake$ cmake ./\n-- The C compiler identification is GNU 4.4.5\n-- The CXX compiler identification is GNU 4.4.5\n-- Check for working C compiler: /usr/bin/gcc\n-- Check for working C compiler: /usr/bin/gcc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/mmedia/soft/catch/Catch-master/projects/CMake\ntig@tig-laptop2:/home/mmedia/soft/catch/Catch-master/projects/CMake$ make\nScanning dependencies of target SelfTest\n[  7%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/ApproxTests.cpp.o\n[ 15%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/BDDTests.cpp.o\n[ 23%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/ClassTests.cpp.o\n[ 30%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/CmdLineTests.cpp.o\n[ 38%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/ConditionTests.cpp.o\n/home/mmedia/soft/catch/Catch-master/projects/SelfTest/ConditionTests.cpp:202: warning: expected [error|warning|ignored] after \u2018#pragma GCC diagnostic\u2019\n/home/mmedia/soft/catch/Catch-master/projects/SelfTest/ConditionTests.cpp:265: warning: expected [error|warning|ignored] after \u2018#pragma GCC diagnostic\u2019\n[ 46%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/ExceptionTests.cpp.o\n[ 53%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/GeneratorTests.cpp.o\n[ 61%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/MessageTests.cpp.o\n[ 69%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/MiscTests.cpp.o\n[ 76%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/SectionTrackerTests.cpp.o\n[ 84%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/TestMain.cpp.o\n[ 92%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/TrickyTests.cpp.o\n[100%] Building CXX object CMakeFiles/SelfTest.dir/home/mmedia/soft/catch/Catch-master/projects/SelfTest/VariadicMacrosTests.cpp.o\nLinking CXX executable SelfTest\n[100%] Built target SelfTest\ntig@tig-laptop2:/home/mmedia/soft/catch/Catch-master/projects/CMake$ ./SelfTest > SelfTest-results.log\nAn error\ntig@tig-laptop2:/home/mmedia/soft/catch/Catch-master/projects/CMake$ cat SelfTest-results.log \nhello\nhello\nSome information\n```\nSelfTest is a Catch v1.0 b20 host application.\nRun with -? for options\n\nINFO and WARN do not abort tests\n/home/mmedia/soft/catch/Catch-master/projects/SelfTest/MessageTests.cpp:11\n...............................................................................\n/home/mmedia/soft/catch/Catch-master/projects/SelfTest/MessageTests.cpp:14: \nwarning:\n  this is a warning\nMessage from section one\nMessage from section two\n===============================================================================\nAll tests passed (557 assertions in 80 test cases)\n```\n. ",
    "herve3527": "Hello, i've got the exact same problem on centos 6.2 using gcc 4.4.7. I've tried to add an operator == to the Ptr class, but the error remain. I'm open to suggestions as I want to use catch as my testing framework (on centos,because work requirement)\n. Hello all, after some research and some trials and errors, i've been able to make it work on centos 6.2 (using gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-3)).\nBasically, when the compiler is building Catch::CumulativeReporterBase, it won't find the  friend bool operator == ( Ptr<SectionNode> const& node, SectionInfo const& other ). \nI've read here (http://stackoverflow.com/questions/7287224/why-isnt-stdfind-using-my-operator) that the compiler uses argument-dependent lookup (ADL) to find the right operator== to use, but in our case, it don't work as expected. I don't know why.\nSo my solutions are one of these:\n1) use std::find_if instead of std::find, with a Functor object \nin reporters/catch_reporter_bases.hpp, add this functor declaration after struct SectionNode\nc++\nstruct SectionInfoFinder {\n    SectionInfoFinder(SectionInfo const& si) : sectionInfo(si) {};\n    const SectionInfo sectionInfo;\n    bool operator() ( Ptr<SectionNode> const& node ) const {\n        return node->stats.sectionInfo.lineInfo == sectionInfo.lineInfo;\n    }\n};\nthen replace the line using std::find with this one (using std::find_if and the SectionInfoFinder functor)\n``` c++\n//replace this\nSectionNode::ChildSections::const_iterator it =\n    std::find( parentNode.childSections.begin(), parentNode.childSections.end(), sectionInfo );\n//with this one\nSectionNode::ChildSections::const_iterator it =\n    std::find_if( parentNode.childSections.begin(), parentNode.childSections.end(), SectionInfoFinder(sectionInfo) );\n```\nYou can remove the operator friend bool operator == ( Ptr<SectionNode> const& node, SectionInfo const& other ) as it isn't needed anymore.\nI should have used a lambda expressions for the predicate function, but GCC 4.4.x doesn't support them...\n2) Replace the std::find with a simple for loop doing the search using the operator == implementation (was my first attempt to understand the problem). \nc++\nfor(SectionNode::ChildSections::const_iterator it = parentNode.childSections.begin();  it !=  parentNode.childSections.end(); ++it) {\n    if((*it)->stats.sectionInfo.lineInfo == sectionInfo.lineInfo) break;\n}\nthere is probably a better approach to solve the problem, but at least, i can run my unit tests :-)\n@philsquared , should I prepare a pull request for any of this two solutions ? Or maybe you found something better for solving this.\na+ herv\u00e9\n. I found that: https://github.com/philsquared/Catch/pull/196/files , the very same problem with the same exact solution :-)\n. Just use the #196 as it already exist. I'm a newbie in github :-)\nPhil Nash notifications@github.com a \u00e9crit\u00a0:\n\nI just noticed your follow up comment about #196.\nInteresting that that was closed because \"the issue is fixed in branch Integration\". Which has me a little confused as that was three months ago - yet I folded integration into Master about six months ago!\nI'm wondering whether @phresnel was looking at an old integration branch (i.e. before the problem existed).\nEither way it looks like that fix never made it in (I did not spot the discrepancy before) so would still welcome a new PR.\n\u2014\nReply to this email directly or view it on GitHub.\ufffc\n. Please try my solution in https://github.com/philsquared/Catch/issues/226#issuecomment-30696783 , it seems to be the same problem.\n. \n",
    "petegoodliffe": "The difference here is in the formatting of the output.\nIt's a form that the Xcode IDE parses and works with well.\n. ",
    "hak8or": "Considering this is open and running tests with the -r compact flag gives me No reporter registered with name: 'compact', does this mean that compact has yet to be put into Catch?\nIf so, any particular reason as to why this has not been included yet?\n. I sadly feel the dev has some sort of non rational dislike for this hence why he has not only not included it for over 5 months by now but also not said why.\n. ",
    "Polytonic": "Any chance this could get merged sometime soon?\n. ~~So I just pulled down build 42 and tried --reporter compact as well as xml and junit and none of them seem to work.  Maybe I misunderstood how to use them?~~\nAlso, there seem to be two unknown pragmas introduced into build 42.\n``` bash\n$: warning: unknown warning group '-WGeneralized initializer lists are incompatible with C++98', ignored [-Wunknown-pragmas]\npragma clang diagnostic ignored \"-WGeneralized initializer lists are incompatible with C++98\"\n$: warning: unknown warning group '-WRvalue references are incompatible with C++98', ignored [-Wunknown-pragmas]\npragma clang diagnostic ignored \"-WRvalue references are incompatible with C++98\"\n```\nCompiling using clang 3.4 under OS X 10.9.x.\n. @philsquared yep, my mistake.  I was silly and passed the command line option to the wrong binary.\n. See also: the note in #228 \n\nwrt the \"unknown pragmas\": this seems to be a case of \"damned if you do damned if you don't\" :-( I add those in to try and clean up warnings under Clang 5.1. I'll have to see if I can limit them to the specific version of Clang that introduced them - what a pain! Thanks for pointing it out, though.\n. @philsquared yes, thanks!\n. \n",
    "sjmills": "You probably need to use a project that is an OS X Cocoa app that uses documents, and in the scheme editor, have the \"Allow debugging when using document Versions Browser\" turned on. The arguments I specify in the scheme are \"-b -d yes --out %stderr\".\n. Cool. I'm on vacation for the rest of the year, so I'll take a look when I get back to it.\nWe don't use the document revisions feature of Cocoa at this point, but certainly might in the future, in which case it might be necessary to use -NSDocumentRevisionsDebugMode. We should be able to filter out -NSDocumentRevisionsDebugMode at that time, but others might run into this same problem. It'd be nice if the parser could notice that the current token after the '-' (NSDocumentRevisionsDebugMode in this case) is not a collection of valid Catch options and just ignore it the entire thing.\n. I got the latest version to try, but had to make a bunch of changes to our project and some source files to build with C++0x turned on. Some std::string things are crashing when I do this, so I can't get far enough along to try your parsing changes. Just an FYI about using C++0x.\n. I haven't gotten back to looking at the C++11 problems because more important things always get in the way. But when I did check, I was able to use -- and have Catch ignore everything after that. So yeah, the original issue is closed.\n. ",
    "sztomi": "Thanks, it works for me now :)\n. ",
    "xbrukner": "No, rather that the formatting is inconsistent; the first one has one tab at the beginning of the line and one after the variable (\"\\t$a\\t\") while the other has two tabs at the beginning and a space afterwards (\"\\t\\t$a \") and the resulting string looks exactly the same (\"\\t$a \"), which makes it rather hard to see what is the difference.\n. ",
    "VictorEijkhout": "On Feb 17, 2014, at 1:42 PM, Phil Nash notifications@github.com<mailto:notifications@github.com> wrote:\nis well described here:\nhttps://github.com/philsquared/Catch/blob/master/docs/own-main.md\nActually, neither of the examples tell me where to put the TEST_CASE and such things. I had to do some experimenting but I figured it out. Thanks for the pointer.\nVictor.\nVictor Eijkhout, 512 471 5809 (w)\nTexas Advanced Computing Center,\nThe University of Texas at Austin\n. On Feb 18, 2014, at 1:52 PM, Phil Nash notifications@github.com<mailto:notifications@github.com>\n wrote:\nAh, the normal test cases can go anywhere.\nNot really. They can't go inside the main.\nThat must be obvious to you since you know the internals of Catch, but it wasn't to me. I just put main & a closing brace around my whole file and got compilation errors.\nVictor.\nVictor Eijkhout, 512 471 5809 (w)\nTexas Advanced Computing Center,\nThe University of Texas at Austin\n. In file included from us.cxx:8:0:\n../imp/catch.hpp:535:78: error: redefinition of 'Catch::AutoReg {anonymous}::autoRegistrar36'\n         namespace{ Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( &INTERNAL_CATCH_UNIQUE_NAME(  _CA_T_C_H__T_E_S_T____ ), CATCH_INTERNAL_LINEINFO, Catch::NameAndDesc( VA_ARGS ) ); }\\\n                                                                              ^\n../imp/catch.hpp:8926:30: note: in expansion of macro 'INTERNAL_CATCH_TESTCASE'\n     #define TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE( VA_ARGS )\n                              ^\nus.cxx:36:1: note: in expansion of macro 'TEST_CASE'\n TEST_CASE( \"divide distributions\", \"[distribution]\" ) {\n. Here's my gist: https://gist.github.com/VictorEijkhout/5843f819de8607588d1c\nand updated just now. hope i have everything.\n. Yes, problem solved. Thanks.\n. 1. ../imp/catch.hpp(7716): catastrophic error: cannot open source file \"catch_stream.h\"\n   #include \n2. Weirdest thing. If I \"wget https://raw.githubusercontent.com/philsquared/Catch/develop/single_include/catch.hpp\" I do not get build 6 even though that shows in my browser, but the old built 52/master.\n. Re: #2: but what happens if you wget it?\n. Line 7716 still has catch_stream.h.\n. Did you grow up with the old svn one-step source control systems?\nTesting....\nCompilation without complaints from the intel compiler. Run: you seem to have improved SYSSEGV handling. That's very welcome.\nThanks for a great product!\n. Thanks!\nWould it be an idea to add this factoid to https://github.com/philsquared/Catch/blob/master/docs/command-line.md ?\n. ",
    "hduden": "Hi Phil,\ncan you share anything about your \"long term plans\" for thread safety that you mentioned in your reply? I might be willing to contribute. \nThe Catch-ThreadSafe fork created by ned14 seems to be a good starting point, but you seem to think that more is required to get this water tight. My goal would be to not do this as another fork, because I would rather not have to sync with the main branch all the time. If you could outline what you think would be needed to get this accepted into the main branch then I will try to contribute a corresponding patch.\n. Well, it depends on what the goal is. I think the most important thing is to get this feature into the main branch, because this is the main thing that is holding Catch back (IMHO). Multithreaded code is becoming increasingly common (especially since C++11 provides standardized support) and it is a shame to have Catch disqualified for a lot of bigger projects because of this. It is a hard sell to tell developers that they cannot use some features of the standard C++ library because of the testing framework that was chosen.\nI honestly think that IF ned14s fork really has no problems (which I honestly cannot determine since I am too new to the inner workings of catch) then maybe it should simply be integrated into the main branch. Having better plans is nice, but the changes in the existing fork are relatively small and do not influence the public interface. Why not make integrate them as an option with a preprocessor switch (thus keeping C98 compatibility by default) and just integrate them to have the problem solved right now. If it works then there is no drawback that I can see. And the first implementation can easily be replaced later with a better one when Phil has time to devote to it.\nIf you (Phil) want a \"better\" first implementation using your own ideas, then let me repeat my earlier offer to help, if you would describe how you would like this to be done.\n. Why is it necessary to aggregate per thread first? Could one not simply run the test and pass the result to a single shared RunContext object (as it is now), but simply protect that last result-storing operation with a mutex? Holding a mutex for storing the result should not be a big problem, performance-wise.\nAnd from what I saw in the code, the state variables used during the actual test checks are all local (correct??). So it should not be necessary to protect those.\nNaively it looks to me that one could probably remove the mutexes around the checks and instead just make the RunContext class thread-safe. I say naively because I am certain I am missing something vital here - or can it be that simple?\n. To clarify: by \"making RunContext thread safe\" I mean not just adding a few mutex locks. One would also have to convert some of the \"lastXYZ\" member variables to thread local ones. But I think it would be pretty straight-forward.\n. The compiler/stdlib feature for thread-local is not supported by Apple's clang, that is correct. But pthread_key_create will work on Mac and BSD. This could also be a fallback for cases when C98 compatibility is needed. So I think one should:\n- use std::thread_local when C98 compatibility is not needed and we are on a platform that supports it.\n- Fallback for the Unixes (Mac, BSD) should be pthread_key_create\n- As the fallback for Windows (only needed in case of C98 compatibility) one should use TlsAlloc, because the MS-specific __declspec(thread) does not always work correctly when using DLLs.\nSo all in all one would have code that works on all C++11 compliant build systems and for C98 systems this would work for pthread-Unixes and Windows. I think that covers everything pretty well. \nOnly a few lines of code would be needed for each of the three implementations, so I think this is not a big addition.\nSo, assuming that we have working thread local storage: what else would be required, other than making RunContext safe?\nAfter reviewing the code I think that we do not need the reporters to be thread-safe, since when they are called before tests start and after they end this is all from the main thread and no test cases (i.e. other threads) are running at the time. During tests they are only called through the RunContext, which we can modify so that it mutexes the accesses.\nDo you agree with the assessment that the reporters can stay as-is?\n. Another option would be to not actually do a \"real\" thread local storage implementation for the different platforms. That does seem a little out of place for a testing suite, I have to admit.\nInstead one could have a map or hash table in RunContext, mapping thread IDs to the thread state. This is very simple to implement and would only require a single platform dependent call for obtaining the thread id. It also makes cleaning up (and possibly analyzing) the thread states at the end of the test much easier.\nPerformance-wise, in a single threaded test, looking up the value from a single entry map is super fast and should not matter - it is barely more than a pointer dereferencing. Even with hundreds of threads in a single test, the overhead should not be a big problem. And after each test one could clean up the \"thread-local\" states, so it cannot degenerate with huge test suites.\nI think I have convinced myself that this is a better solution for Catch. It reduces outside dependencies and platform-dependent code to a minimum. It would also make it pretty easy for a Catch user to provide his own getThreadID function if he is on an exotic platform that is not yet supported by the library.\n. ",
    "blastrock": "Hi,\nAnything new on this issue? This is really a show-stopper for me :(\n. +1 ! :+1: \n. WARN does not mark the test as failed...\n. Oh thanks, exactly what I want :)\nI'll close this then and comment on #416 \n. Thanks for the quick answer.\nI tested your version, it does not fix the bug, here is a stack with 3 exceptions stacked:\n>   test_submarine.exe!std::vector<Catch::AssertionStats,std::allocator<Catch::AssertionStats> >::push_back(const Catch::AssertionStats & _Val) Line 1279   C++\ntest_submarine.exe!Catch::JunitReporter::assertionEnded(const Catch::AssertionStats & assertionStats) Line 9814 C++\ntest_submarine.exe!Catch::RunContext::assertionEnded(const Catch::AssertionResult & result) Line 6356   C++\ntest_submarine.exe!Catch::ResultBuilder::handleResult(const Catch::AssertionResult & result) Line 8698  C++\ntest_submarine.exe!Catch::ResultBuilder::captureExpression() Line 8692  C++\ntest_submarine.exe!Catch::RunContext::handleFatalErrorCondition(const std::basic_string<char,std::char_traits<char>,std::allocator<char> > & message) Line 6441 C++\ntest_submarine.exe!Catch::FatalConditionHandler::handleVectoredException(_EXCEPTION_POINTERS * ExceptionInfo) Line 6108 C++\nntdll.dll!774367e2()    Unknown\n[Frames below may be incorrect and/or missing, no symbols loaded for ntdll.dll] \ntest_submarine.exe!Catch::AssertionResultData::reconstructExpression() Line 934 C++\ntest_submarine.exe!Catch::FatalConditionHandler::handleVectoredException(_EXCEPTION_POINTERS * ExceptionInfo) Line 6108 C++\ntest_submarine.exe!Catch::RunContext::assertionEnded(const Catch::AssertionResult & result) Line 6356   C++\ntest_submarine.exe!Catch::ResultBuilder::handleResult(const Catch::AssertionResult & result) Line 8698  C++\ntest_submarine.exe!Catch::ResultBuilder::captureExpression() Line 8692  C++\ntest_submarine.exe!Catch::RunContext::handleFatalErrorCondition(const std::basic_string<char,std::char_traits<char>,std::allocator<char> > & message) Line 6441 C++\ntest_submarine.exe!Catch::FatalConditionHandler::handleVectoredException(_EXCEPTION_POINTERS * ExceptionInfo) Line 6108 C++\nntdll.dll!774367e2()    Unknown\nmsvcp140.dll!643f1138() Unknown\nmsvcp140.dll!643f8210() Unknown\ntest_submarine.exe!Catch::toString(unsigned long value) Line 8520   C++\ntest_submarine.exe!Catch::AssertionResultData::reconstructExpression() Line 934 C++\ntest_submarine.exe!Catch::AssertionResult::getExpandedExpression() Line 7696    C++\ntest_submarine.exe!Catch::JunitReporter::writeAssertion(const Catch::AssertionStats & stats) Line 9953  C++\ntest_submarine.exe!Catch::JunitReporter::writeSection(const std::basic_string<char,std::char_traits<char>,std::allocator<char> > & className, const std::basic_string<char,std::char_traits<char>,std::allocator<char> > & rootName, const Catch::CumulativeReporterBase::SectionNode & sectionNode) Line 9896  C++\ntest_submarine.exe!Catch::JunitReporter::writeTestCase(const Catch::CumulativeReporterBase::Node<Catch::TestCaseStats,Catch::CumulativeReporterBase::SectionNode> & testCaseNode) Line 9872 C++\ntest_submarine.exe!Catch::JunitReporter::writeGroup(const Catch::CumulativeReporterBase::Node<Catch::TestGroupStats,Catch::CumulativeReporterBase::Node<Catch::TestCaseStats,Catch::CumulativeReporterBase::SectionNode> > & groupNode, double suiteTime) Line 9851 C++\ntest_submarine.exe!Catch::JunitReporter::testGroupEnded(const Catch::TestGroupStats & testGroupStats) Line 9826 C++\ntest_submarine.exe!Catch::RunContext::testGroupEnded(const std::basic_string<char,std::char_traits<char>,std::allocator<char> > & testSpec, const Catch::Totals & totals, unsigned int groupIndex, unsigned int groupsCount) Line 6295  C++\ntest_submarine.exe!Catch::RunContext::handleFatalErrorCondition(const std::basic_string<char,std::char_traits<char>,std::allocator<char> > & message) Line 6462 C++\ntest_submarine.exe!Catch::FatalConditionHandler::handleVectoredException(_EXCEPTION_POINTERS * ExceptionInfo) Line 6108 C++\nntdll.dll!774367e2()    Unknown\ntest_submarine.exe!Catch::AssertionResultData::reconstructExpression() Line 934 C++\nkernel32.dll!@BaseThreadInitThunk@12\u001e() Unknown\ntest_submarine.exe!Catch::AssertionResultData::reconstructExpression() Line 934 C++\ntest_submarine.exe!Catch::CumulativeReporterBase::prepareExpandedExpression(Catch::AssertionResult & result) Line 9183  C++\ntest_submarine.exe!Catch::JunitReporter::assertionEnded(const Catch::AssertionStats & assertionStats) Line 9814 C++\ntest_submarine.exe!Catch::RunContext::assertionEnded(const Catch::AssertionResult & result) Line 6356   C++\ntest_submarine.exe!Catch::ResultBuilder::handleResult(const Catch::AssertionResult & result) Line 8698  C++\ntest_submarine.exe!Catch::ResultBuilder::endExpression(const Catch::DecomposedExpression & expr) Line 8653  C++\ntest_submarine.exe!____C_A_T_C_H____T_E_S_T____2() Line 26  C++\n\nMoreover, there is a regression as the following lines do not compile anymore for me:\nvoid* ptr = nullptr;\nCHECK(ptr == nullptr);\n\n\nAs for your policy about handling crashes in Catch, wouldn't it be better if Catch avoided to trigger a second crash so that it could at least close all xml elements and exit the application? I remember that in some previous version of catch, the reportFatal function used to call exit(). It seems that it now just returns and the code just crashes again in a loop. Since C++ is very prone to crashes, I think there is a real need for correct crash handling (at least we have a need for it).. ",
    "htfy96": "Hi,\nWould it be better to mention thread-safety in the reference? Just spent hours on weird test failure before I found this issue \ud83d\ude13 . It would be better to mention this in documentation \n\ud83d\ude1e spent whole night on a weird crash. ",
    "tclamb": "I rebased onto the current master, and removed all the changes to version number and the single-header include so there wouldn't be any merge conflicts.\n. Went ahead and rebased again, all tests still pass. I don't think this should cause any issues unless the user defines operator<=(Catch::ResultBuilder&, UserType), but I could be wrong. :)\nAlso, I'm not sure what happened to your comment from before. Github ate it after the rebase.\n. Glad to see this make it in. :+1: Don't forget about the test in projects/SelfTest/TrickyTests.cpp.\n. Write a macro to remove the tedium:\n``` cpp\ndefine VALIDATOR_SECTION(FluidName, Property, Expected, ParameterOne, ValueOne, ParameterTwo, ValueTwo) { \\\nSECTION(FluidName \" \" Property \" with \" ParameterOne \" = \" #ValueOne \" and \" ParameterTwo \" = \" #ValueTwo) \\\n{ \\\n    double eos = PropsSI(Property, ParameterOne, ValueOne, ParameterTwo, ValueTwo, FluidName)+1000; \\\n    double valid = Expected; \\\n    CHECK(valid == eos); \\\n}\n\n```\nUsage would be something like:\ncpp\nVALIDATOR_SECTION(\"Cyclohexane\", \"P\", 24.173705*1e6, \"T\", 300.0, \"D\", 9.4*mm);\nVALIDATOR_SECTION(\"Cyclohexane\", \"O\", 115.28612/mm, \"T\", 300.0, \"D\", 9.4*mm);\nAs a bonus, this should make section names like: \"Cyclohexane P with T = 300.0 and D = 9.4*mm\"\nAnd when you see all your test cases failing, change CHECK(valid == eos) to something like CHECK(abs(valid - eos) < 1e-6). Equality between floating point numbers won't work in general.\n. @ibell Pinging you in case you didn't see my comment above due to timing issues.\n. Check out these unit tests: https://github.com/philsquared/Catch/blob/master/projects/SelfTest/ApproxTests.cpp\n. As of 8cc1108f2b8aa215c94f1d6d3b93121d28ffd08a, this is no longer an issue. REQUIRE(f + g == h); is now a valid test.\n. ",
    "Morwenn": "I tried this patch. It is great and achieves its goal, but I got plenty of warnings due to -Wparentheses. It could be worth adding the followig pragma or an equivalent:\npragma GCC diagnostic ignored \"-Wparentheses\"\n. @philsquared For sure it's been a while. I will try again this weekend with the current code base and check whether I still have the warnings.\n. @philsquared I like that Catch::rngSeed() exists, but is there a way to know whether --rng-seed has been passed to the command-line, like Catch::rngWasSeeded()? When running my test suite in CI I want to seed it with --rng-seed, but otherwise I don't care that much and might automatize the generation from within the test suite itself with a poor man's seed.. Oh, fair enough, thanks :). I was about to report the exact same error. Glad to see that I'm not the only one getting it :)\n. Ok, I will work around it for now, thanks :)\nEDIT: welp, looks like getCurrentContext is just as unavailable as rngSeed when CATCH_CONFIG_RUNNER and CATCH_CONFIG_MAIN aren't defined, so the workaround sin't working either, unless Im missing something.\nI don't think that Catch::rngSeed was ever actually promised as part of the interface. IIRC I found about it while reading an issue, but the ability to give a seed from the command line, use it wherever I want to, and get it logged when an error occurs was too good not to use it.. Nice, thanks for considering it!. Thanks for the fast fix :). ",
    "tavianator": "You might be able to avoid the -Wparentheses warnings by using << instead of <=.  Haven't tried though.\n. Another thing is that when || or && are overloaded, they stop short-circuiting.  So something like this:\nc++\nCHECK(p == nullptr || !p->flag);\nwouldn't be safe.  Better to keep it as-is IMO.\n. ",
    "ibell": "The char* are to avoid compiler warnings about deprecated string constants\n- gcc is quite annoying about this, and users always email me about\n  warnings, which is annoying for me, so I try to avoid the warnings with the\n  char* casts.  Is there a better solution?\nAre your constructs valid C++2003?  I'm a constrained to C++2003 since I\nneed to use VS2008 on windows to build Python wrappers.\nOn Thu, Feb 27, 2014 at 7:35 PM, Kosta notifications@github.com wrote:\n\nand/or you could init the vector like this:\nstd::vector elements(std::begin(data), std::end(data));\n\nReply to this email directly or view it on GitHubhttps://github.com/philsquared/Catch/issues/248#issuecomment-36274890\n.\n. Ah the other (char) casts are because std::string.c_str() gives a const char * which cannot be directly cast to a char \n. In other cases I have avoided the vector entirely and just indexed the \n. Could someone add some information to the documentation about the fact that you can't have sections in loops or conditionals?  Its subtle, but it can result in tests getting skipped, which is a pretty serious limitation.  I'd do a PR myself, but I don't fully understand the limitations of the SECTION usage.\n. @Kosta-Github You're really quite right about the const-uncasting.  But be that as it may, that function takes a char*, not a const char*, so there we are.\n. C++03 would be just fine for me.\n. These are the sorts of tests that I have to run:\n\n``` c++\nTEST_CASE(\"Acetic acid validation from Piazza, FPE, 2011\",\"[aceticacid],[validation]\")\n{\n    // Temperature (K) Density (kg/m3) Pressure (MPa) Compress. factor (Z) Enthalpy (kJ/kg) Entropy (kJ/kgK) cv (kJ/kgK) cp (kJ/kgK) Sound speed (m/s)\n    double data[10][9] = {\n    {290,0,1e-16,1.00000,669.46135,0,0.89579,1.03425,215.30848},\n    {290,0.010,0.23586e-3,0.58743,238.11539,1.05462,4.64706,5.35799,158.69275},\n    {290,0.025,0.55619e-3,0.55408,203.44932,0.86742,3.46806,3.91294,154.08504},\n    {290,1060.,9.5458,0.22429,-218.59529,-0.66978,1.66179,1.99658,1221.38239},\n    {290,1070.,22.580,0.52557,-209.68922,-0.68127,1.65651,1.98783,1278.95824},\n    {450,0,1e-16,1.00000,868.66312,0,1.31313,1.45159,262.43829},\n    {450,1.0,0.55569e-1,0.89189,760.34138,1.94165,3.74492,4.41190,244.91797},\n    {450,6.0,0.26514,0.70925,599.36342,1.40868,4.43708,5.53182,212.41678},\n    {450,870.,2.7252,0.05028,152.00058,0.35592,2.48256,2.74525,536.47030},\n    {450,880.,5.6865,0.10372,153.23341,0.35114,2.46536,2.73491,607.71381}};\nint N = 10;\n\nSECTION(\"P\")\n{\n    for (int i = 0; i < N; i++)\n    {\n        double T = data[i][0], rho = data[i][1], p = data[i][2]*1e6;\n        double PCP = PropsSI(\"P\",\"T\",T,\"D\",rho,\"AceticAcid\");\n        CAPTURE(p);\n        CAPTURE(PCP);\n        CHECK(fabs(PCP/p-1) < 1e-4);\n    }\n}\nSECTION(\"H\")\n{\n    for (int i = 0; i < N; i++)\n    {\n        double T = data[i][0], rho = data[i][1], h = data[i][4]*1e3;\n        double HCP = PropsSI(\"H\",\"T\",T,\"D\",rho,\"AceticAcid\");\n        CAPTURE(h);\n        CAPTURE(HCP);\n        CHECK(fabs(HCP-h) < 1);\n    }\n}\n...\n\n```\nI'm quite frustrated with how much boilerplate I need to write in order to run each test.  I'd rather iterate over i, and then run each SECTION.  That would at least remove the indexing to get T and rho\n. But then I can't capture the values in compartmentalized way - if I get one\nfailure of a CHECK, all of the values get captured.\nOn Thu, Feb 27, 2014 at 8:38 PM, Kosta notifications@github.com wrote:\n\nCan't you just give up on the sections and do several checks sequentially?\n\nReply to this email directly or view it on GitHubhttps://github.com/philsquared/Catch/issues/248#issuecomment-36281884\n.\n. Thanks everyone for your comments!  Sorry I have been away from this thread for so long.  In particular, I like the idea of SCOPED_CAPTURE but I don't see any docs on this macro.  Could you add a line or two to the docs on this?\n\nWhen you get the generators working I would be very happy for them.  In Python I do lots of testing that looks something like\n``` python\ndef test_TRP():\n    for R in np.linspace(0, 1, 11):\n        for p in np.linspace(0.1, 1000, 10):\n            for T in np.linspace(220,370.15,10):\n                for o in ['W','H','S','V']:\n                    yield check_HAProps,o,'T',T,'R',R,'P',p\ndef check_HAProps(args):\n    val = HAProps(args)\n```\nand I am trying to migrate the tests to the C++ level using Catch.  So far I have been very happy.  Especially appreciate that it is header-only.\n. Aha.  Ok, that makes sense - there was so much noise from the compiler that\nit wasn't obvious that this was the problem.\nOn Mon, Nov 24, 2014 at 12:40 PM, Phil Nash notifications@github.com\nwrote:\n\nIt should work - but you need to put the #include outside the namespace\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/354#issuecomment-64232103.\n. In a similar vein, it would be nice to tag tests as known failing.\n. @philsquared I really like the new special tags, its a tiny bit hacky, but that is exactly what I had in mind!  \n\nIf you could document them, that would be great!  Any idea when they will be merged?\n. Ah sorry I should RTFM - the docs have been updated since I last was on\nthat page.  Sorry for the noise.\nOn Thu, Dec 4, 2014 at 1:05 PM, Sean Cline notifications@github.com wrote:\n\nTry something like: CHECK_THROWS_AS(expression, OutOfRangeException);\nIt is mentioned on the Assertion Macros\nhttps://github.com/philsquared/Catch/blob/master/docs/assertions.md page\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/356#issuecomment-65674892.\n. For what its worth, I tried with the Catch 1.x branch, same result.  I swear this used to work as I describe before.. The example output is from wandbox.  I'm convinced that at some point in\nthe development of Catch, there was a time that stdout within sections was\nbeing captured - maybe I'm dreaming.  If the section passed, all output was\nswallowed and discarded, otherwise the captured stdout was printed to\nscreen as part of the failure message.  I'm sure I've used that\ncapability before.  Let me see if I can find a commit in Catch where that\nwas the case using some of my older code.\n\nIn any case, that would be very, very useful to capture stdout in general.\nOn Tue, Dec 5, 2017 at 7:55 AM, Phil Nash notifications@github.com wrote:\n\nHi Ian,\nI'm not quite sure what you're saying the problem is.\nIn the example you gave I see both strings written to stdout are present\n(as I would expect).\nWhen using the console reporter stdout is not redirected, so anything sent\nto it is immediately streamed. This can give odd results as the assertion\nreporting happens lazily (i.e. nothing is printed until the first failure).\nHowever in your case we're seeing them in an intuitive order anyway.\nIs your example output from your Linux machine, or from Wandbox?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/issues/1120#issuecomment-349328098,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABxha51nVbjSKz2dSaCpP0TUJrUEC4HDks5s9VlqgaJpZM4Q0FVF\n.\n. \n",
    "lunakid": "BTW, I realize this is an oldish MS compiler here, I just can't tell how old, nevertheless this is the newest I have here. :) I just kinda' hope the linking could somehow still work because the compilation went flawlessly.\n. Thanks a million for the quick turnaround!\nGetting closer, probably: now it links fine, but the .exe crashes. \n(It reminds me of some cross-module static initialization trickery I used to be fighting with some years ago.)\n. WAIT, WAIT! I have changed things, let me recheck...\n. OK, sorry, it does crash. \n(I moved this message over from my previous comment, in case GitHub doesn't send notification about editing an existing comment.)\n. Thanks! (I ditched the IDE and most other optional parts of the original installation and kept only the minimum command-line tools as a survival kit for basic Win32 tasks, and have rarely used it.)\n. Weee, thanks, perfect now!\n(Yeah, I did raise my eyebrow, too, for a second, when I saw it's VS2010. It just feels sooo long when I last used C++. And right before creating this issue I happened to read these posts here about how even recent MSVC compilers tend to have an obsolete feel. BTW, it was written by the same guy whose recent strong recommendation (on SO) directed me here to try Catch.)\n. ",
    "aidin36": "@philsquared I did this just because I thought it's the right way to use Catch!\nI don't know where I get this idea, that all of the files that define a TEST_CASE have to be included in the main file.\nNow I understood.\nSorry for the bug report.\n. ",
    "adaszko": "I should have mentioned that catch.hpp from the listings above is simply the one from single_include directory in the the Catch distribution.  All of the above shell commands were executed in the single_include directory.\nIf PCHs work for you, it is almost certainly me, who misuse them.\n. OK, I made it to work.  For the record: I have a separate file unittests.hpp:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \n```\nI compile it as described at  http://clang.llvm.org/docs/UsersManual.html#precompiled-headers with the exception of using -x c++-language and not -x c-language, and then pass -include unittests.hpp flag to any source file compilation command that needs Catch.  There are no #include \"unittests.hpp\" anywhere in the source files.\nThank you for the tips and naturally for the Catch itself :)\n. ",
    "ff-abacus": "Note: the problem only exists, when the test has an own main by specifying \ndefine CATCH_CONFIG_RUNNER\nand the main.\nNote, the error only exists on VS and not on g++ and also only when an own main is defined.\nIt compiles wo. any errors on VS2013 when the default main is used by setting\ndefine CATCH_CONFIG_MAIN\n. Seems to be the same issue as https://github.com/philsquared/Catch/issues/253\n. Thank you for your comment. \nI did already fix the problem locally but decided to report it. Unfortunatly I did not realize it was a duplicate. \nAnyway, thanks to Pfil. I really like CATCH ;)\n. Thank you Phil. It works!\nIn fact, it's really interesting, I run into several cases where g++ was much more strict than VS2013. But in this case it was the other way round,\n. Hi Phil,\nyes, that works too.\n~Ff\n\n\n\nPhil Nash notifications@github.com 07.07.14 19.01 Uhr >>>\nArgh! Sorry! I forgot to put std::max in parentheses! I'll fix that.\nIn the meantime if you make it (std::max) instead (without the\nexplicit type) does that fix it for you too?\n\n\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/philsquared/Catch/issues/292#issuecomment-48206407\n. ",
    "cseed": "@philsquared \n\nTests should only be testing the observable behaviour.\n\nI don't understand this position.  Isn't the point of testing, roughly, to make our code more reliable and (more likely to be) more correct?  In that case, why limit the notion of testing?  I agree, testing the interface and testing details of the implementation should be clearly separated.  However, if there are internal routines with well-defined interfaces, it seems quite valuable to test them.\nMy situation is similar to this, combined, admittedly, with a bit of laziness.  I have internal routines that can be used to set up state that is tedious, but not impossible, to achieve through the public interface.  I would like to test these interfaces, yes, but in addition, use them to set up tests of the public interface in situations that are hard to get to otherwise.  The balance here seems to be between the difficulty in writing tests, and the cost of maintaining them going forward.\nPerhaps you would argue that I have a class within a class, but if the inner class is (1) not conceptually distinct, and (2) not used elsewhere, then breaking it out purely for testing seems as bad as -Dprivate=public, if not worse, because it makes the code larger and less transparent.\nIn response to point 4,\n\n[] Things like, \"should cache this value\", specifically don't impact the externally observable state/ behaviour.\n\nI think performance is part of the external behavior.  Trying running f(1000) on a linear vs exponential function, and tell me if the observable behavior changes.  However, one could well argue that if \"should cache this value\" is part of the observable behavior, it should be part of the public interface.  You might also argue performance unit testing belongs elsewhere.  But it belongs somewhere.  \"You can't control what you don't measure.\"\n@PureAbstract - I was planning to leave the friend declarations in even when I'm not testing.\nThanks for the thoughtful replies.  I'll keep this in mind as I go forward using Catch.\n. ",
    "hendrics": "@cseed you seem to answer your own question: \"The balance here seems to be between the difficulty in writing tests, and the cost of maintaining them going forward.\"\nTesting through public interface helps to make your tests less brittle and more maintainable. \"I have some private stuff which is useful\" - if it is useful why is it private? The benefit of making something private is the knowledge that nothing depends on it externally and you are free to change the private code knowing that the behaviour of a class or a subsystem is not going to change. When you grow your system to more > 1k unit tests - you want to keep them as maintainable as possible (e.g. not to break when you refactor you private code).\nIn my personal experience, I had to refactor a relatively big class with unit tests, and someone defined private as public for testing. It was a very difficult and was clear that it allowed a bad design (not resilient to change) through, without any other perceived convenience. There are exceptions obviously but in general doing that is just an alarm to highlight inflexible design/implementation.\n. ",
    "philburr": "I generally think it is best to unit test your interface.  However, I do disagree that one should never test internals.  One should always be very careful about testing internal details because internal details can change and it makes your unit tests fragile and prone to maintenance.  However, there are cases that in my code I've found that are useful to unit test.  For example, I'm currently working on a class that is very math heavy and I need to be very careful that even internal functions do the right thing.  I will do unit tests on them initially to validate behavior and will probably eventually remove them (the unit tests) once I validate the implementation.\nAnyway to answer the original question, what I do is put the testable code in a class in an unnamed namespace (I do almost all class implementation in headers), have the ultimate implementation derive from that class (either protectedly or privately as needed).  Then you have an implementation to test and an interface to test.  You can then easily consolidate when you've reached code maturity.. ",
    "dsamek": "I changed the code:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\n//#include \"TCACAVAUtilities.h\"\ninline int CreateColorFromRGB( int r, int g, int b ) {\n    return r + ( g << 8 ) + ( b << 16 );\n}\nTEST_CASE( \"TCACAVAUtilities::CreateColorFromRGB\", \"[CreateColorFromRGB]\" ) {\n    REQUIRE( CreateColorFromRGB(1, 0, 0) == 255 );\n    REQUIRE( CreateColorFromRGB(0, 0, 0) == 255 );\n}\n```\nBut the result is same \"the never-ending loop\".\nMaybe it's somehow connected to the my system.\nI run it on:\n- Windows 7 Professional x64\n- Visual studio 2008 Version 9.0.30729.4108 QFE\n- The running exe file is created with the Rade developing tool (developing tool for CATIA V5R22)\nIs there any limitation for catch usage ?\n. Used catch version:\n-  CATCH v1.0 build 33 (master branch)\n-  Generated: 2014-03-24 18:11:50.426554\n. I use the Visual Studio 2008 Version 9.0.30729.4108 QFE.\nI don't enable/disable the some special setting from the exception handling.\nDo you mean something like: http://msdn.microsoft.com/en-us/library/4t3saedz.aspx\nSome /EHsc flag ?\nOr something else ?\n. I try it but the result is the same => never-ending loop.\nBTW: in property page of my testing module is setting Enable C++ exception set to Yes(/EHsc) in visual studio. But I found something on the web about the RADE tool. This tool use the mkmk which:\n- mkmk deactivates by default C++ native exceptions\n. I tried it. But in this case all CATIA exceptions are un-handled (each CATIA exception causes the crash) ...\n. ",
    "gahr": "Two consecutive sections containing failing tests trigger the recursive loop. Minimal test case:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \nTEST_CASE(\"Never/Ending\")\n{\n    SECTION(\"First is ok\") {\n        REQUIRE(1. == 1.);\n    }\n    SECTION(\"Second fails\") {\n        REQUIRE(1. == 0.);\n    }\n    SECTION(\"Third fails too\") {\n        REQUIRE(1. == 0.);\n    }\n}\n```\nOutput is:\ncatch-loop2.cpp:15: FAILED:\n  REQUIRE( 1. == 0. )\nwith expansion:\n  1.0 == 0.0\n\nNever/Ending\n  Never/Ending\n  Never/Ending\n  Never/Ending\n  Never/Ending\n  Never/Ending\n  Never/Ending\n  Never/Ending\n  Never/Ending\n  Never/Ending\n  Never/Ending\n  Never/Ending\n  Never/Ending\n  Never/Ending\nThird fails too\ncatch-loop2.cpp:4\n...............................................................................\ncatch-loop2.cpp:15: FAILED:\n  REQUIRE( 1. == 0. )\nwith expansion:\n  1.0 == 0.0\n\netc etc etc\n. -  CATCH v1.0 build 47 (master branch)\n-  Generated: 2014-05-20 19:02:15.946806\n. This might help clarifying what's happening:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \nTEST_CASE(\"T\")\n{\n    SECTION(\"A\") {\n        REQUIRE(1. == 1.);\n    }\nSECTION(\"B\") {\n    REQUIRE(1. == 0.);\n}\n\nSECTION(\"C\") {\n        REQUIRE(1. == 0.);\n    }\n}\n```\n```\ncatch-loop is a Catch v1.0 b47 host application.\nRun with -? for options\n\nT\n  B\n\ncatch-loop.cpp:4\n...............................................................................\ncatch-loop.cpp:11: FAILED:\n  REQUIRE( 1. == 0. )\nwith expansion:\n  1.0 == 0.0\n\nT\n  C\n\ncatch-loop.cpp:4\n...............................................................................\ncatch-loop.cpp:15: FAILED:\n  REQUIRE( 1. == 0. )\nwith expansion:\n  1.0 == 0.0\n\nT\n  T\n  C\n\ncatch-loop.cpp:4\n...............................................................................\ncatch-loop.cpp:15: FAILED:\n  REQUIRE( 1. == 0. )\nwith expansion:\n  1.0 == 0.0\n\nT\n  T\n  T\n  C\n\ncatch-loop.cpp:4\n...............................................................................\ncatch-loop.cpp:15: FAILED:\n  REQUIRE( 1. == 0. )\nwith expansion:\n  1.0 == 0.0\n\nT\n  T\n  T\n  T\n  C\n\ncatch-loop.cpp:4\n...............................................................................\ncatch-loop.cpp:15: FAILED:\n  REQUIRE( 1. == 0. )\nwith expansion:\n  1.0 == 0.0\n\nT\n  T\n  T\n  T\n  T\n  C\n\ncatch-loop.cpp:4\n...............................................................................\ncatch-loop.cpp:15: FAILED:\n  REQUIRE( 1. == 0. )\nwith expansion:\n  1.0 == 0.0\n\nT\n  T\n  T\n  T\n  T\n  T\n  C\n\ncatch-loop.cpp:4\n```\n. I get the loop with clang 3.4 on FreeBSD. However, things work smoothly with gcc 4.7.3 and 4.8.3 20140220 (prerelease).\nLooks like a compiler bug at this point..\n. I do, and I'm compiling the test program I posted earlier without any options.\nThese two compilers fail:\nFreeBSD clang version 3.4.1 (tags/RELEASE_34/dot1-final 208032) 20140512\nTarget: x86_64-unknown-freebsd11.0\nThread model: posix\nFreeBSD clang version 3.3 (tags/RELEASE_33/final 183502) 20130610\nTarget: x86_64-unknown-freebsd10.0\nThread model: posix\nOn the other hand, the following two compilers produce the desired behaviour.\ng++47 (FreeBSD Ports Collection) 4.7.3\ng++48 (FreeBSD Ports Collection) 4.8.4 20140522 (prerelease)\n. That fixes it - thanks a lot!\n```\ndefine CATCH_CONFIG_MAIN\ninclude \nTEST_CASE(\"T\")\n{\n    SECTION(\"A\") {\n        REQUIRE(1. == 1.);\n    }\n    SECTION(\"B\") {\n        REQUIRE(1. == 0.);\n    }\n    SECTION(\"C\") {\n        REQUIRE(1. == 0.);\n    }\n}\n```\n\n./catch-loop \n\n```\ncatch-loop is a Catch v1.0 b51 host application.\nRun with -? for options\n\nT\n  B\n\ncatch-loop.cpp:4\n...............................................................................\ncatch-loop.cpp:11: FAILED:\n  REQUIRE( 1. == 0. )\nwith expansion:\n  1.0 == 0.0\n\nT\n  C\n\ncatch-loop.cpp:4\n...............................................................................\ncatch-loop.cpp:15: FAILED:\n  REQUIRE( 1. == 0. )\nwith expansion:\n  1.0 == 0.0\n===============================================================================\ntest cases: 0 passed | 1 failed | total: 1\nassertions: 1 passed | 2 failed | total: 3\n```\n. @philsquared Latest master fixes it, with FreeBSD clang version 3.4.1 (tags/RELEASE_34/dot1-final 208032) 20140512.\nThanks!\n. On FreeBSD clang version 3.4.1 (tags/RELEASE_34/dot1-final 208032) 20140512, the vector's size() is 5 at projects/SelfTest/BDDTests.cpp:54.\n. @kirbyfan64 saw that, thanks. I'm gonna close this and investigate further.\n. #507 \n. Yes, I think that is correct. I'm not a TAP user myself, I was just trying out the feature since I saw that on the release notes... ",
    "matalangilbert": "For reference, I have this same problem using gcc 4.8.1 on Ubuntu 13.10. \n. Exception handling is enabled for our build. We are using _GNU_SOURCE and linking with -pthread, beyond that it's a fairly standard build.\n. ",
    "stalepancakes": "FWIW, I encountered the same issue today with the Factorial example from the tutorial using VS2013.\nIt only happens for me when exception handling is disabled (i.e. the /EHsc flag is not set)\n. ",
    "joto": "I have the same problem with the neverending loop (CATCH v1.0 build 52 (master branch)). Unfortunately I can't reproduce it in a small test case, but it has something to do with exceptions. In RunContext::sectionEnded() the std::uncaught_exception() is true. I am not sure what exactly is happening then, but m_testCaseTracker->leaveSection(); is not called as a result of this, so the section is not marked as completed. If I remove the if( std::uncaught_exception() ) { ... } everything seems to run fine.\n. I don't know what you mean with \"CATIA exception\". But in any case I was not proposing the removal as a fix, just to show that this is the area where the (or a) problem is.\nI'll keep it running with this hack for the moment, because a test that (potentially) crashes is still better than an endless loop, which is bad news for automated testing.\n. The commit doesn't fix the issue for me.\n. I have the problem whether I compile with clang or with gcc, so I don't think it is a compiler bug. (Tested on Debian Jessie.)\n. @AlexisWilke just tried CATCH v1.1 build 14 and it still hangs with GCC 4.9.2 and Clang 3.5.0.\n. Okay, I have boiled down the case I have been having trouble with to a few simple test cases. Here is the code:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\ninclude \ninclude \nTEST_CASE(\"value\") {\n    SECTION(\"works\") {\n        std::promise result;\n        result.set_value(42);\n        REQUIRE(result.get_future().get() == 42);\n    }\n}\nTEST_CASE(\"exception\") {\n    SECTION(\"throws\") {\n        std::promise result;\n        try {\n            throw std::runtime_error(\"Example\");\n        } catch(...) {\n            result.set_exception(std::current_exception());\n        }\n        REQUIRE(result.get_future().get() == 42);\n    }\n}\nTEST_CASE(\"require\") {\n    SECTION(\"hangs\") {\n        std::promise result;\n        try {\n            throw std::runtime_error(\"Example\");\n        } catch(...) {\n            result.set_exception(std::current_exception());\n        }\n        REQUIRE_THROWS_AS(result.get_future().get(), std::runtime_error);\n    }\n}\n```\nSave as catch_hang.cpp and compile: g++ -std=c++11 catch_hang.cpp -o catch_hang -pthread. Use the compiler of your choice, g++ and clang++ show the same behaviour for me.\nNow run these commands in turn:\n./catch_hang value        # works as it should\n./catch_hang exception # shows that an exception is thrown from the get()\n./catch_hang require     # problem case\nThe last case hangs forever with CATCH v1.0 build 53. With CATCH v1.1 build 14 it also hangs, but when I hit CTRL-C to break it off, it prints 'require' forever and I have to hit CTRL-C again to stop it.\ncppreference.com tells me that uncaught_exception() \"Detects if the current thread has a live exception object\", so maybe it doesn't detect the exception \"hidden\" in the promise?\n. @philsquared This fixes it for me! Thanks.\n. Is this the same as #271?\n. Okay, ignore the -Werror, thats just me calling this code with that option. But there still is the issue with the warning. Can we either make the destructor public or disable that warning? (There are many other warnings disabled in the Catch code, so that would just be another one.)\n. Thanks for the suggestions. This is solved with the new version v1.2.1 which adds a '#pragma GCC/clang system_header' (see also #407).\n. Thanks @philsquared. This clears up the behaviour, but it isn't really intuitive, so I think it should be in the documentation. Maybe in an extra section titled something like \"How this all works internally. Reads this if you get unexpected interaction between your code and Catch macros.\"\n. Thanks for the quick answer. I am changing my code.. It is unclear to me why we added those windows version settings to the build script in the first place. I have removed them and now everything builds fine. Thanks for the help!. When I run the tests by themselves, all is fine. So, yes, this could be the case you mentioned. But this used to work in Catch1, so I am not sure this is the fault of libc++. Something must have changed recently.\nSeems I had problems with sections and exceptions before: #552.. I guess you are talking about #1028 and the fix for that in 70e0d4897. If I revert that commit, the problem goes away for me.\nOnly idea I have is that there could be some difference due to std::current_exception being allowed to either return a reference to the exception or a copy of it.. ",
    "AlexisWilke": "I just ran into this problem with library zipios++. The test works fine under Linux which uses g++ but fails and loops forever under FreeBSD with clang. I would imagine that the difference in compiler is the culprit here, but what do I know?!\nIf you'd like more precision about the test I have that fails, let me know.\n\"use Zipios++ to create zip archives with 1 or 3 files each\"\nThe code is in this file:\nhttps://sourceforge.net/p/zipios/git-code/ci/master/tree/tests/catch_zipfile.cpp\n. After reading the entire thread and testing with Joto suggestion, I found out that I am indeed getting the same problem: std::uncaught_exception(). I'm thinking that this flag is set to true when it should not be, unless I missed something somewhere -- i.e. a throw in a destructor. So I search for such without luck thus far. However, I definitively have an exception which is caught as expected by the REQUIRE_THROWS_AS() macro.\nThe only particularity of that specific test is that it calls a function that rethrows an exception, although I tried to throw a new exception instead of just using throw it did not help. I think that somehow clang does not want to reset the std::uncaught_exception() flag and I'm not too sure there is anything we can do about it except adding a hack to catch.hpp if compiled by clang.\nAfter further testing, I see that the problem happens when the REQUIRE_THROWS_AS() macro gets called. I print out the current state of the std::uncaught_exception() function and it returns 'true' after the macro, but false before:\nstd::cerr << \"BEFORE: info: uncaught status: \" << (std::uncaught_exception() ? \"YES\" : \"NO\") << \"\\n\";\nREQUIRE_THROWS_AS(...);\nstd::cerr << \"AFTER: info: uncaught status: \" << (std::uncaught_exception() ? \"YES\" : \"NO\") << \"\\n\";\nSo... even though the REQUIRE_THROWS_AS() catches the exception as expected, the process of clearing the uncaught exception flag is not working right. This has got to be a problem in the compiler.\nOkay, I found a fix in my case, although this is not really a valid general fix. Really clang is doing it wrong. I had two levels that would rethrow. Removing one of the levels fixed the problem. Something like this:\nvoid func()\n{\n  try { that(); } catch(...) { throw; }\n}\nvoid that()\n{\n  try { there(); } catch(...) { throw; }\n}\nThe fact is I don't really need the try/catch in the that() function and removing it solves the std::uncaught_exception() problem. Yet, I would imagine that this is a bug in clang and not in catch.\n. It could be that the clang people have a fix which did not make it in the version used by FreeBSD. I'm just using the latest FreeBSD in a virtual host (10.1). If you'd like to test with my test case, you can get zipios++ from the git repository on SourceForge.net and then compile it. You may put catch.hpp in the contrib/... directory so the tests get compiled. You may remove the #ifndef clang although running all the tests in one go generate the problem too. I now have a script that runs the tests one by one and except for the few that are \"protected\" with the #ifndef, all the other tests pass. Obviously that means I don't cover as much code, but I still think zipios is very well tested under FreeBSD too at the moment.\n. Joto, just in case I tested my code under Debian (Wheezy and Jessie) and it worked just fine. Are you using the latest version of catch.hpp? phil made some fixes at some point which may not have been updated?\n. I tried now with g++ 4.9.1. I suppose the latest libstd++ (or at least the one in 4.9.2) is different enough to were you would get that problem. Either that, or my code does not expose the problem in g++.\nHow could I test with the latest under Ubuntu? Any easy apt-get install stuff that would help? Actually, I will look for version 15.04. Maybe it has a version that breaks.\n. From what I recall, it works for me now.. Ah, I see you already added it to version 2.\n#define CATCH_VERSION_MAJOR 2\n#define CATCH_VERSION_MINOR 2\n#define CATCH_VERSION_PATCH 3\n\nSorry about the noise.. ",
    "kirbyfan64": "Considering the fact that this can be so hard to reproduce, this might be a C++ stdlib/ABI bug. Can someone who has the bug try this with libc++ or libcxxabi?\n. I get a slightly different result:\n```\n$ ./catch_hang require\nhangs here\n^C\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\nrequire\n...\n^Crequire\n^Crequire\n...\n  require\n  require\n  hangs\n\nloop.cpp:26\n...............................................................................\nloop.cpp:27: FAILED:\ndue to a fatal error condition:\n  SIGINT - Terminal interrupt signal\n===============================================================================\ntest cases:     1 |     0 passed | 1 failed\nassertions: 68313 | 68312 passed | 1 failed\nryan@DevPC-LX:~/langtest/catch$ ^C\n```\nThe ^C are the times when I pressed control-C to kill the program.\n. This is a bug in libstdc++. Compiling the program with -stdlib=libc++ works correctly.\nLooking into filing a bug report...\n. Crap, I can't file one because \"user account creation has been restricted.\"\nCould someone else look into that?\n. Windows 7 doesn't support ANSI escape sequences out-of-the-box; you need ANSICON.\n. Ok, maybe Cygwin supports them (and MinGW, too, I think), but CMD itself doesn't. I'm not sure if your PC already had ANSI drivers installed, but there aren't there out-of-the-box. Why do you think Bakefile uses Clint for colors? That's why projects like Colorama exist.\n. Ok! Thanks!\n. On GNU compilers, detecting and demangling type names tends to be pretty easy.\n. @PureAbstract I could argue with that...\n. Honestly, if you wanted a makefile generator, I would suggest that you use Bakefile. The idea that you pre-generate makefiles (that, by the way, are cleaner than the garbage CMake outputs) and VS projects, so the users don't need any external tools and you have the hassle of messing with 20 different build types.\n. @PureAbstract I still prefer Bakefile...but CMake is more useful for times when you need 2000 config options. I just think it's overkill for unit tests.\n. sed 's/\\x1B\\[[0-9;]*[JKmsu]//g' :)\n. I encountered this same issue. You have to use parenthesis:\nc++\nREQUIRE((array<int,5>().size()) == 5);\nThis is just because REQUIRE is defined to take one argument. The C preprocessor is blind to template arguments, so it treats your call as:\nc++\nREQUIRE((array<int),(5>().size()) == 5);\n. @acki-m The maintainer is also very, very busy and will leave issues for sometimes over a month before even noticing they're there.\n. IMO, I'd just use a pragma to get around this, because it's perfectly valid. \n. This looks like it should be correct. Looking at the preprocessed file, the variable is never used uninitialized. In fact, it's never used at all.\n. +1 to adding that to the readme. I didn't even know there was a Google Groups forum!\n. @mloskot Sounds like ketchup...\n. Why not use a mix? If the number is greater than 8000 (or some other constant), then print the decimal version and the hex version. That way, you don't get too much visual noise for small numbers.\n. What if both sides are printing in decimal and hex if one side is greater than the constant? It fixes the consistency issue.\n. Try including type_traits before including catch.hpp.\n. IMO, the easiest/cleanest/most portable thing would be a --raise-sigtrap command-line argument...\n. I don't use OSX, but I don't think the version of libstdc++ that OSX had is new enough. You could always try to build a more recent version of libstdc++ or build libc++ yourself.\n. http://stackoverflow.com/questions/10354636/how-do-you-find-what-version-of-libstdc-library-is-installed-on-your-linux-mac\n. I'd say to report it to GCC.\n. Aren't they still distinct?\n. c++\nREQUIRE( (std::is_constructible<Vertex, std::string, int>::value) == true );\n. Ran a few errors through Google Translate. Exact same messages as @PureAbstracr referred to.\n. s/@PureAbstracr/@PureAbstract/ (I'm going to kill this Android phone keyboard../)\n. I think you're supposed to split the tests between different .cpp files, not .hpp files.\n. It's tricky to get a nice error. There are two PR's open that would fix this, #210 and #351. You could always try to merge it into devel of a local copy of Catch.\n. What happens if you print the items via std::cout? IMO, sounds like a VS bug to me.\n. Also try:\nc++\nstd::cout << AngleRatios<float>::Radians << std::endl;\nIf it still prints 0, it's definitely a VS bug. Try reporting it here.\n. @Trass3r Down for maintainance. :(\n. > clang 4.2 or so\nThe latest version is 3.6.1...\n. @CelticMinstrel What about trying a newer version of Clang? I know that 3.2 was a bit buggier than later releases and had given be trouble a few times.\nWhatever the issue is, it's definitely not present in newer versions: I use Clang 3.6 and have never encountered this issue.\n. I think this is a duplicate of #271 and #352...\n. @czipperz Would you happen to be using GCC 4.6 or lower?\n. ...\nIsn't this kind of overkill, considering that CMake is a full build system and the equivalent Posix SH install script is 1 line long?\nsh\ncp single_include/catch.hpp ${INCDIR:-/usr/local/include}`\nAgain, Posix shell. Works on pretty much every Unix platform. Permissions don't really matter here, hence the use of cp. CMake doesn't generate install targets for Windows anyway!\n. There is a dead simple solution...\n...\n...\n...don't use SCons. :D\nBut seriously, this is what I know of:\nhttps://bitbucket.org/scons/scons/wiki/UnitTests. It's on the official SCons wiki, so you can't go wrong there.\n. @gahr The very test you \"fixed\" failed. The size shouldn't be 5. This is a FreeBSD/libc++ issue.\n. Actually, this might just be your compiler over-optimizing the code. What flags did you pass when building?\n. cough AppVeyor cough\nThey have a few versions of VS to run your tests with. And it's free.\n. As an aside: as someone who has set up AppVeyor many times, I can safely say that it works extremely well. The support from both them and Travis is really awesome, too.. So, just out of curiosity, what's the difference between &clang36 and *clang36?\n. Could you surround the backtrace with triple backticks? That way, you won't end up referencing every issue up to 5! :)\n. @rcdailey What about:\nc++\nstd::unique_ptr<MyClass> mc;\nCHECK_NOTHROW(mc.reset(new MyClass{\"foo\"}));\nCHECK(mc->Stuff() == \"Stuff\");\n. @nabijaczleweli Ok then...how about something like:\nc++\nchar storage[sizeof(MyClass)] alignas(MyClass);\nMyClass* mc = &storage;\nCHECK_NOTHROW(new (mc) MyClass);\nCHECK(mc->Stuff() == \"Stuff\");\nReally, though, I doubt you'd need to worry about throwing std::bad_alloc in this case. I mean, strings and all allocate memory anyway, so it's just as likely they'll throw that error.\n. @rcdailey Not even the first one? That's the best it's going to get. This is a C++ thing, not Catch.\nThere are benefits to manual memory control. This is not one of them! ;)\n. @rcdailey Issue there is that standard C++ gives NO way of trapping an exception without opening a new scope. \n. Is there a #include <ctype.h>?\n. You could always write a custom assert macro:\n``` c++\nifdef DEBUG\nclass AssertionFailure : public std::runtime_error {}\ninline void assert_impl(bool cond, std::string expr, std::string file, std::string func, int line) {\n    if (!c) {\n        std::stringstream ss;\n        ss << \"assertion \" << expr << \" in \" << file << ':' << line << \" (\" << func << \") failed\";\n        throw AssertionError(ss.str());\n    }\n}\ndefine assert(x) assert_impl((x), #x, FILE, func, LINE)\nelse\ndefine assert(x) (void)0\nendif\n```\n. Hmm...this makes me wonder...\nWhat if Catch used type erasure to store the lhs and rhs without converting it to a string? Then it can convert it if it actually needs to, not at every test case.\n. @scross99 Can you try out #562?\n. I just haven't gotten a chance to fix the failures yet. I'll hopefully do it today or tomorrow.\n. The tests pass! :fireworks: \n. Catch already has this, but it's not documented. Try:\nc++\nCATCH_CHECK_THROWS_WITH(some_expression, \"error message here!\");\n. @nabijaczleweli You're testing MinGW, not Cygwin...\n. Did you try CHECK(!true)?\n. I would think that it would cause insanely weird coloring if a breakpoint were activated before the ANSI color reset code is printed.\n. Why not just set a breakpoint at the exit function?\n. ...I meant in the actual exit function, not where it's called (like break exit in gdb or this) in VS.\nI agree with you on the issues of exit; I'm just saying that there's a workaround. :)\n. @nabijaczleweli malloc returning NULL.\n. Though this really should be classes = new Class[noClasses]...\n. @rcdailey I just have to say, I really like your GitHub pic. :D\n. What about just separating them:\nc++\nCHECK(mismatch_pair.first == expected_result.end());\nCHECK(mismatch_pair.second == DeliveryWidget::s_widgetNames.begin());\nIt would have the same effect at run-time anyway. The expression is \"too complex\" because of the &&.\n. @rcdaily The problem with the first one is that it would be too easy to use accidentally:\nc++\nCHECK(myfunc<int, int>() == 1); // Oops!\n. What if you do something like:\n``` c++\nif defined(GNUC) && !defined(__GXX_RTTI)\n// No RTTI.\ndefine CATCH_CAST static_cast\nelse\ndefine CATCH_CAST dynamic_cast\nendif\n```\nand leave the asserts.\n. Can't you just do:\nc++\nCHECK( std::vector< char >() == std::vector< char >{ 0 } );\n. Unfortunately, there's no other way. C++11 just doesn't allow an initializer list on the right-hand-side of ==, no matter whether or not there's an overload. So it's impossible for Catch to do anything...\n...without metaprogramming. You could create a function and then call it like:\nc++\nCHECK( a == mkv(0x1, 0x2) );\nWorking on an implementation right now...\n. c++\ntemplate <typename... Args>\nstd::vector<typename std::common_type<Args...>::type> mkv(Args&&... args) {\n    return {args...};\n}\nYou can technically name it whatever you want.\n. What happens if you run valgrind on it?\n. This may be a gdb bug. Just tried on Linux with both GCC and Clang, and it works perfectly.\n. @timoalho I did:\n(gdb) break t.cpp:11 # the \"unsigned int\" line\n(gdb) run\n(gdb) s # continued single-stepping until I got sick of it...\n. > but a set/longjump approach when exceptions are off would open this unit test framework up to more codebase\nPretty sure what completely screw up RAII and stack unwinding...\n. Wait, I thought nuget was a .NET thing... Do people put C++ libraries there now?\nPackage management these days, I swear...\n. Well, Boost is pretty big, but Catch is basically just one header file. Is it really worth it, rather than just popping it in your project?\n$ curl -L -O catch.hpp https://raw.githubusercontent.com/philsquared/Catch/master/single_include/catch.hpp\n. FWIW, the issue here seems to stem from the use of typed enums via : bool; without that, this compiles.\n. You can just do:\nc++\nREQUIRE(read.first);\nREQUIRE(read.second == 1);\nIf the first fails, the second won't run anyway.\nref. #341. Is there a reason you couldn't just do:\nc++\nTEST_CASE(\"constructors\", \"[constructors]\") {\n    REQUIRE(MyType{one_arg} == MyType{one_arg, two_arg});\n    // ...\n}\nin order to test the constructors?. Also, you could try out Zapcc, which is free for (quot from their page) non-commercial entities, and for start-up companies in pre revenues/funding stages.. > this week (or early next week, at worst)\n\na month ago\n\n:thinking: . Sure this isn't because of memory corruption inside of your own tests? Your \"fix\" could be working because of moving memory addresses. Have you tried running the tests with something like Clang's memory sanitizers or Valgrind? . > And anyway, the two issues you link to are marked as closed (yet the issue is not resolved at all), so what the hell? So in spite of being witty, you haven't done anything useful yet and told me why using variadic macros can't solve this.\nMan, you took that waaaay too seriously\u200b.... True, but FWIW a lot of people in European countries (not sure if Poland is included) tend to be more blunt culturally than in the U.S.. FWIW is there a reason you can't just run:\ncurl -L https://github.com/philsquared/Catch/releases/download/v1.9.3/catch.hpp -o catch.hpp\nfirst?. > curl is not present on all systems.\nYes, but it's available:\n\nSpecifically for CI\n\n;)\nFWIW there's other stuff you can do too, but in general, curl is present on most systems. Heck, Git uses curl for HTTPS transport, so if someone's downloaded the source code, there's a good chance they also have curl installed.. FWIW this works normally under Linux.\nWhat if you use normal Clang:\nclang++ -fsanitize=address -o test.exe test.cpp\nAlso, you seem to be building a normal, shared executable. What if you change the library name to clang_rt.asan_dynamic-x86_64.lib? (The one you're using is for applications using the static CRT.). @philsquared \n\nThis has been fixed in Catch2 (which will go live very soon)\n\nAny estimates? ;). ",
    "itaiferber": "Yep, I was just going to suggest this fix myself \u2014 to compile with Clang on OS X you'd have to turn off -std=c++11.\n. ",
    "cschwan": "I have the same problem when I compile with -std=c++11. My compiler is a  gcc version 4.7.3 (Gentoo 4.7.3-r1 p1.4, pie-0.5.5)\n. ",
    "tknapstad": "Confirmed working\n. ",
    "markhallutah": "I am seeing this error in clang 3.7.0 with gcc 5.1.1. \nspecifically /usr/include/wchar.h has \ninclude \nand it is somehow finding the one in /usr/lib/clang/3.7.0/include  (why?)\nwhich uses __has_features(modules)\nIs there a clang specific header I could include first, that would invoke the protections/fix ?\n. ",
    "paleozogt": "Oops, looks like this might duplicate #110 \n. ",
    "nexocentric": "Hello Phil,\nIt was just temporary. I soon as I figured out the the build didn't pass I went to a previous version, so no worries!\nThe fixes sorted themselves out just fine and I moved to build 41 today. Thanks a lot. \nI didn't see that someone already made a request to have different branches for the source. Sorry, for doubling the issue.\nI think another strategy would be to have away to check the build status via wget or raw http or some other low level protocol. I looked through the Travis CI documentation and didn't see anyway to do this on their end. Would you know of any solutions?\nFollowing your project, so I'll be able to stay up to date with the changes and thanks so much for the framework.\nDodzi\n. Thanks a lot for making a separate branch! It really helps out.\n. ",
    "bdb": "Yeah, sorry I meant CHECK().\nI've narrowed it down and it's definitely the CHECK(nil != string). If I comment that out, it builds and links fine. Adding the explicit cast of nil does not make a difference.\nHere's a full example that's similar to my test.\n2 differences that I note from your test, I'm using MRC not ARC and my string is dynamically allocated (though I have no idea why that would matter).\nTEST_CASE(\"test\") {\n@autoreleasepool {\nSECTION(\"Section\") {\nNSString *string  = [[@\"hello world\" dataUsingEncoding:NSUTF8StringEncoding] base64EncodedStringWithOptions:0];\nCHECK(nil != string);\n}\n}\n}\n. I started playing with this and removing const from the reference arg allows the above CHECK() to link properly.\nSo:\nstd::string toString( NSString * CATCH_ARC_STRONG & nsstring );\n. Maybe for iOS MRC has gone to almost to nil use, but I think there is still a lot of OSX MRC legacy code out there. For us there sure is. You could make the const conditional as part of the CATCH_ARC_STRONG macro or another macro CATCH_ARC_CONST_REF\n. Yes, Xcode 5.1.1 and LLVM/Clang. I just tried this again with a clean project and Catch 43 still gets a linker error. Catch 33 works fine.\nI wonder if its something to do with compiler flags. We are using -O0 (so auto-inline is off) -std=c++11 -stdlib=libc++   -fvisibility=hidden\nI wonder if it has something to do with auto-inline. Those functions are small enough they should be inlined, but since its not explicit in the header -O0 won't do it automatically.\nHere's a larger excerpt of the compile flags:\nexport LANG=en_US.US-ASCII\n    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c++ -arch x86_64 -O0 -Wno-missing-field-initializers -Wno-missing-prototypes -Wno-return-type -Wno-implicit-atomic-properties -Wno-receiver-is-weak -Wno-arc-repeated-use-of-weak -Wno-non-virtual-dtor -Wno-overloaded-virtual -Wno-exit-time-destructors -Wno-missing-braces -Wparentheses -Wswitch -Wno-unused-function -Wno-unused-label -Wno-unused-parameter -Wno-unused-variable -Wunused-value -Wno-empty-body -Wno-uninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wno-constant-conversion -Wno-int-conversion -Wno-bool-conversion -Wno-enum-conversion -Wno-shorten-64-to-32 -Wno-newline-eof -Wno-selector -Wno-strict-selector-match -Wno-undeclared-selector -Wno-deprecated-implementations -Wno-c++11-extensions -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk -fasm-blocks -fstrict-aliasing -Wprotocol -Wdeprecated-declarations -Winvalid-offsetof -mmacosx-version-min=10.7 -g -fvisibility=hidden\n. I've hit this again with 1.5.7 and had to work around it. Not sure why it cropped up again. Upgrading to 1.6.0 is on my todo list.. Thanks Phil, I'm on Xcode 8.2.1 now. My workaround was the same as above, I simple removed const from the toString() functions.\nEdit: Unlike the original report, this is with ARC enabled.\nAgainst 1.5.7\n```\n@@ -1594,7 +1594,7 @@ std::string toString( std::nullptr_t );\n#ifdef OBJC\n     std::string toString( NSString const * const& nsstring );\n-    std::string toString( NSString * CATCH_ARC_STRONG const& nsstring );\n+    std::string toString( NSString * CATCH_ARC_STRONG & nsstring );\n     std::string toString( NSObject* const& nsObject );\n #endif\n@@ -8202,7 +8202,7 @@ std::string toString( std::nullptr_t ) {\n             return \"nil\";\n         return \"@\" + toString([nsstring UTF8String]);\n     }\n-    std::string toString( NSString * CATCH_ARC_STRONG const& nsstring ) {\n+    std::string toString( NSString * CATCH_ARC_STRONG & nsstring ) {\n         if( !nsstring )\n             return \"nil\";\n         return \"@\" + toString([nsstring UTF8String]);\n-- \n```. 1.6 has the same issue and the same patch fixes it.. p.s. I updated issue #278 with a possible solution.\n. Are those even warnings that can be turned off? They don't look like it. They look like intrinsic compiler warnings. I found the following reference from 2 years ago:\nhttp://llvm.org/viewvc/llvm-project/cfe/trunk/include/clang/Basic/DiagnosticParseKinds.td?view=markup&pathrev=151155\nAre you trying to avoid the warnings for C++ 98 mode? Just don't use C++11 specifics in 98 mode. ;)\n. I'm getting this too with v1.2.1, my solution with the single header was just to change line 1574:\n-            ( __catchResult <= expr ).endExpression(); \\\n-            ( __catchResult <= (expr) ).endExpression(); \\\nThis allows GCC 4.9.2 to compile our tests cleanly again. (We were using v1.0.53 before w/o issue).\n. Here's an example that causes 4.9.2 to emit the parens warning:\nerror: suggest parentheses around comparison in operand of \u2018==\u2019 [-Werror=parentheses]\n    CHECK(comps.at(1) == \"Users\");\ncomps is a vector of strings\n. @martinmoene  True, but so does adding explicit parens in your test CHECK() usage. I was not suggesting my patch as official solution merely noting an easy way to solve hundreds of warnings (errors with -Werror) in one go. As I said this was an issue for us upgrading from 1.0.53, it broke a lot of tests.\nWe've run in to parens issues before with v53, but they were minor and to solve them we did add explicit parens to the offending CHECK() statements.\n. Thanks Phil. Still same issue (and same workaround) in 1.3.0\n. Just another vote for fixing this. I have a few templated tests that worked fine in 1.7 and 1.6 but are now broken in 1.8.2 (with GCC 5.4).\nAs a workaround I just wrapped the template definition with the CATCH_INTERNAL... macros instead of setting the pragma for the whole file.. OK, thanks for the explanation. The stream operator is a good solution. Luckily it was just this one class that broke.. You should always provide a definition for static data members (even constexpr ones) so that anything that wants to take the address of them (or a ref -- basically the same thing) will work. There are others besides Catch that may want to to do that.\nFor your example, add the following immediately after the struct declaration:\ntemplate <class T>\nconstexpr basic_values_holder<T>::size_type basic_values_holder<T>::npos;. Thanks for the update. It would be nice to provide the const overload as it's quite common, but I've changed our tests.. I kind of thought that might be the fix. Thanks. And thanks for the AppVeyor image tip. I did not know the 2017 image included 2015 as well. Should be able to close this now.. 2.2.2 is broken. Obviously you have no Objc++ unit tests or Travis would have caught this.\nXcode 9.3. Thanks for the update Phil. But Travis is easy to do:\n```\nmatrix:\n    include:\n      - os: osx\n        osx_image: xcode7.3\n        compiler: clang\n  - os: osx\n    osx_image: xcode8.3\n    compiler: clang\n\n  - os: osx\n    osx_image: xcode9.3\n    compiler: clang\n\n```\n. Ok, I must have misunderstood \"we don't have the infrastructure\" because Catch's .travis.yml file contains Xcode images already. So what's prevent them from running tests?. Is this fixed in 2.3?  Release notes say \"Fixed Objective-C++ build\". Finally got around to testing 2.3 and it does indeed fix this bug. Thanks!. ",
    "kainjow": "Looks like to reproduce all you need is for main() to be in a C++ file, not Objective-C++. Then you'll get the error. ARC/MRC doesn't seem to be relevant.. I wrote a minimum reproducible case:\nTwo main files main.cpp and main.mm, each with exact contents:\n#define CATCH_CONFIG_MAIN\n#include \"catch.hpp\"\n\nand a test file test.mm:\n#include \"catch.hpp\"\nTEST_CASE(\"test\") {\n    NSString *msg = @\"test\";\n    CHECK(msg != (NSString*)nil);\n}\n\nThen I used this Makefile:\nLDFLAGS := -stdlib=libc++ -framework Foundation\n\nall: mm_noarc mm_arc cpp_noarc cpp_arc\n\nmm_noarc:\n    clang++ main.mm test.mm -o $@ $(LDFLAGS)\n\nmm_arc:\n    clang++ -fobjc-arc main.mm test.mm -o $@ $(LDFLAGS)\n\ncpp_noarc:\n    clang++ main.cpp test.mm -o $@ $(LDFLAGS)\n\ncpp_arc:\n    clang++ -fobjc-arc main.cpp test.mm -o $@ $(LDFLAGS)\n\nclean:\n    rm -rf mm_noarc mm_arc cpp_noarc cpp_arc\n\nThe cpp_* targets will fail with current Catch, and pass with the fix from @bdb.\nI tested with ARC/MRC just to see if those were related, but they are not. Still not clear why it fails. I've never seen const used with any of Cocoa's APIs, so it's probably best to avoid it altogether.. ",
    "appbead": "I'm search the term \"Unit Test C++\" on github , and got the result far better than before. It's appear #13 in sort by Best Match, and #2 in sort by Most stars\n. From above search result, it looks like the term \"Unit testing\" is Best Match than \"Unit-tests\"? and if the keyword Unit is occurred in the URL (e.g. https://github.com/gh-unit/gh-unit), then its rank is higher than in the description of project.\n. Thanks for your great project!\nI've searched on github for a C++ unit testing framework months ago, but not able to got a satisfied result(yes, I just check the first page which sorted by Best Match, Most Stars or Most Forks).\nFortunately, I heard your project on stackoverflow.com the day before yesterday, it's really easy to use! \n. There's already a list/comparison on wikipedia.\n. OK! I fixed it by using own main() function:\n1. Create a file named test.h with following lines:\n#define CATCH_CONFIG_RUNNER\n   #include \"catch.hpp\"\n2. Generate the PCH file with:\ng++ -O2 -Wall -x c++-header test/test.h -o test/test.h.gch\n3. The main.cpp looks like:\n#include \"test.h\"\n   TEST_CASE( \"DemoTest\", \"Demo\" ) {\n   ......\n   }\nint main( int argc, char* const argv[] )\n   {\n     int result = Catch::Session().run( argc, argv );\n     return result;\n   }\n4. Compile with:\n   g++ -O2 -Wall -include test/test.h -c -o main.o main.cpp\nHowever, it has not got notable speedup. looks less than 1 second, still need 8 seconds to compile even if changing one line of code in main.cpp.\n. Finally, it compile in 4 seconds with two additional steps:\n1. use make -j2\n2. disable optimization with g++ -O0 instead of g++ -O2.\n. Hi Phils,\nLet me trying to explain further.\nI'm using CATCH in a project, and found compiling it too slow for changing only one line of code. for example, there are catch.hpp and main.cpp in the test project folder, and the content of main.cpp is:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nTEST_CASE( \"Demo\", \"[Demo]\" ) {\n    int jd = 0;\n    REQUIRE(jd == 0);\n}\n```\nIf change the line int jd = 0; to int jd = 1; and compile it, it will take 9 seconds which is same as the first compilation with [CPU 2.26 GHz Intel Core 2 Duo, Mem 8 GB, SATA Hard Disk]. Obviously the main part of time is used on compiling catch.hpp, so introducing precompile header is a natural consideration. \nAs we know, a precompiled header is also an object file compiled, that is the catch.hpp.gch can be consider as catch.o. When using g++ -O2 -Wall -x c++-header test/catch.hpp -o test/catch.hpp.gch to generate/compile the PCH File, neither the flag CATCH_CONFIG_MAIN nor CATCH_CONFIG_RUNNER has been defined. So some part of implementation code is not been included in PCH file. On the other hand, when PCH file(catch.hpp.gch) existed, compiling with g++  -include test/catch.hpp ... will ignore catch.hpp and use catch.hpp.gch, that's why link error occurred.\nTo fix the error, we can insert a line #define CATCH_CONFIG_XXXX into top of the catch.hpp or do like as above mentioned.\n\nI'm not sure why you're optimising the compile time of main.cpp - are you including test code in there or is it dedicated to the catch inclusion?\n\nFrom above code, you can see that the test code in main.cpp file.\nAfter using PCH, the compiling time is not reduced notable, so I guess the problem is caused by heavy usage of C++ Template.\nAlso I look forward that CATCH provide a header-implementation separated version beside of header-only version. The separated version(e.g. catch.h and catch.cpp) will keep ease of use as header-only version, and avoid to using PCH to reduce compiling time.\n. Just for your information, I abandon using precompiled header to reduce compiling time, as I not able to use multiple/separate test case cpp implementation file this way.\nNow, I found a way which only take 1 second or less to re-compile the modified project(even g++ optimization enabled), if only one line of code has been changed. It's really simple, the main.cpp file is dedicated to include the catch.hpp and main() function, and all other test cases are wrote in separate implement files(*.cpp). Just looks like:\n```\n// --- main.cpp ---\ndefine CATCH_CONFIG_RUNNER\ninclude \"catch.hpp\"\nint main( int argc, char* const argv[] )\n{\n  // global setup...\n  int result = Catch::Session().run( argc, argv );\n  // global clean-up...\n  return result;\n}\n```\n```\n// --- test.cpp ---\ninclude \"catch.hpp\"\nTEST_CASE( \"Demo\", \"[Demo]\" ) {\n    int jd = 0;\n    REQUIRE(jd == 0);\n}\n```\nI almost turned to the Google Test yesterday, due to the compilation taking so long time. But now, I really enjoys to use CATCH. Thanks for your great work!\n. ",
    "JoeyGrajciar": "Seems to be implemented by #1448 . @wrotte is this still an issue for you with latest release (v2.5.0)?. i tried to replicate it but without success :) so i am going to close this.. I think this can be closed since we have TEMPLATE_TEST_CASE and TEMPLATE_PRODUCT_TEST_CASE.. Closing as Catch2 Conan package is already out there.. Can not reproduce with latest release 2.5.0. Seems that this issue is fixed by https://github.com/catchorg/Catch2/commit/6cede0101ada18017c817e1afa68a4835f785e0c. Can not reproduce with v2.5.0. @bigboynaruto Just checked on Windows and adding it also for Windows LeakDetector would help :). I think this can be closed.. Value parametrized test cases can be done using Generators.\nGenerators recently ended in final state. Here is documentation about Generators and there are also links to examples.\nIn your case you would basically have your testMethod() look like this:\nc++\nvoid testMethod() {\n    auto s = GENERATE(as<std::string>{}, \"Hello\", \"World\", \"!\");\n    REQUIRE(s == \"Hello\");\n}. I guess this should be already fixed by https://github.com/catchorg/Catch2/pull/1411. Can be closed?. I think that you should move the translation into folder for spanish e.g docs/es. so the original english version remains intact :). @devinbostIL \nLooking at the log there is only this error multiple times:\nC:\\src\\pytorch_source\\pytorch-scripts\\pytorch\\aten\\src\\ATen\\utils\\catch\\single_include\\catch.hpp(760): error C2872: 'std': ambiguous symbol\nHow exactly is Catch2 header included?\nIs this still happening even with latest version?\nIs there something named std?\n. @rcdailey do you want to implement reporter or listener?. Listeners are usually derived from TestEventListenerBase which overrides those virtual methods :) In case of reporters. Both listeners and reporters have the same interface as all are using IStreamingReporter interface class. Making it not pure virtual might not be a good idea but making an override inside the StreamingReporterBase could solve the issue as it can be overrided from other class too.. Can not reproduce with 2.5.0.. Based on previous comment closing this.. Base on last comment closing this issue as fixed :). @horenmar I would like to take a look on this, but i have one question. Do you want to check also for case like this?\nc++\n/*\nFoo\n*/. I think that the time for getting this script on the right path is here :)\nThe question about the comments is single header file is really good. From my point of view it has two sides. One is that it might be beneficial for information about why something was done like that (e.g. stackoverflow, msvc preprocessor, ...), but on the other hand not having the comments might make the single header file more compact.. Warning suppressions should be defined in include/internal/catch_compiler_capabilities.h\nAlso some of these warnings can be fixed by other means than suppression.. @egorpugin  your code doesn't compile even without Catch. As @JayhawkZombie and @Neargye pointed out the call to get the bool is ambiguous. You should consider modifying your code to make it more clear. Since you are compiling with c++17 you can use if constexpr statement to implement both in the templated operator, but it might have a drawback if you create the variant2 with bool as one of the types.. Based on previous comment closing this. @Jorghi12 do you have some more information regarding this issue? We would like to get this sorted out.. Closing based on last comment. I guess this one can be closed since it is possible to configure to not use the new capture. @hakkidogusan does that mean that this issue can be closed?. this might be closed since the enforcement is in master?. Generators recently entered final state. Documentation about there usage and with links to examples is here.\n\nCan we use GENERATERS for testing multiple inputs ?\n\nYes Generators were designed for that purpose.\n\nOther than GENERATORS is there any other option to run test with multiple inputs ?\n\nNo. Generators are only way how to generate multiple inputs for value parametrized tests.. @VidhiRajgor In case you do not have more questions I will close this issue in few days.. Closing based on last comment. After few hours of debugging I found that this is actually issue with clara::TextFlow::Column::iterator formatting with the indentation. In this case the second line has 81 characters which is longer than console width. Basically the problem will occur here \ncpp\nauto operator *() const -> std::string {\n               assert( m_stringIndex < m_column.m_strings.size() );\n                assert( m_pos <= m_end );\n               if( m_pos + m_column.m_width < m_end ) // 155 < 155\n                    return addIndentAndSuffix(line().substr(m_pos, m_len));\n                else\n                    return addIndentAndSuffix(line().substr(m_pos, m_end - m_pos)); // m_end - m_pos is 79 or m_column.m_width\n}\nSeems that it should be enough to change the condition to <= instead of <.\nWith this change the result is:\n\n\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nisl\n  massa, luctus ut ligula vitae, suscipit tempus velit. Vivamus sodales, quam\n  in\n  convallis posuere, libero nisi ultricies orci, nec lobortis.\n  \"\n  ==\n  \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nisl\n  massa, luctus ut ligula vitae, suscipit tempus velit. Vivamus sodales, quam\n  in\n  convallis posuere, libero nisi ultricies orci, nec lobortis.\n\". @horenmar Yes i will create one soon :) Probably it will be different as i am not really sure if that condition is needed.. @hoffmanriley do you use WSL or MingW? Tried you code on WSL and it compiles just fine.. @hoffmanriley also tried under Visual Studio and there seems to be collision with IN defined in minwindef.h\nconsider renaming it to In. :). For Visual Studio it is in VC++ includes. for mingw it should be in include directory of mingw. This header is brought into your app through including windows.h .. Actually i just tried your code without catch include on linux with #define IN and it also errors out.\n```c++\n\ndefine IN\ntemplate  struct TypePack;\nnamespace internal {\n    template \n    struct tp_shift {\n        using move_t = typename T2::first_t;\n        using inc_t = typename T1::template add;\n        using dec_t = typename T2::pop;\n        using type1 = typename tp_shift::type1;\n    };\n}\ntemplate \nstruct TypePack {\n    using this_t = TypePack;\n    template  using merge = typename internal::tp_shift::type1;\n};\nint main( int argc, char* argv[] ) {\n    return 0;\n}\n\ntest21.cpp:17:71: error: no member named 'SIZE' in the global namespace\n        template  using merge = typename internal::tp_shift::type1;\n                                                                           ~~^\ntest21.cpp:17:90: error: expected ';' after alias declaration\n        template  using merge = typename internal::tp_shift::type1;\n                                                                                                ^\n                                                                                                ;\n2 errors generated.\nwhich means that this not really a problem with Catch as compilers know `IN` as macro :) On windows this macro can be empty like in example above or can be used to hide SAL notation. I think it depends on other defines before including `windows.h`. So suggestion from me is not to use all caps typename identifier in templates unless you know it can't collide with anything :). @denizevrenci can you please also add a documentation (hints) about the usage?. @denizevrenci i think that this is the source of the problems with conan in your PR https://github.com/catchorg/Catch2/blob/master/conanfile.py#L13\nconan will export files only from these folders. @myrgy actually working on v2.0 of this without cap for types :) hold on currently doing some local tests of implementation :). @myrgy after some minor improvements it is now waiting on review :) please be patient :) feel free to pull locally these changes and do some tests with it and share your opinions about it :). @mwpowellhtx was everything sorted out in this issue?. @porpoises in your example you probably wanted to doc++\ntemplate\nstruct Foo {};\n``\nin linked PR #1457 i added support for this kind of types. For this kind of tests you will have to useTEMPLATE_TEMPLATE_TEST_CASE.\n. Closing asTEMPLATE_PRODUCT_TEST_CASEwas better solution for this.. @aegonzalez are you sure that this define is not used somewhere in project properties? I found this macro only on one place in catch2 codebase.. @BRevzin do you need some more information or can this be closed?. @horenmar without that change incatch_capture.hppwarning will not be suppressed in case ofINFO. unless user explicitly uses the new suppression macro around such usages.. I also meant that :) that will correctly fix the warning. @stefansullivan are you using your own main? did you defineCATCH_CONFIG_RUNNER? . the reporter you use is somewhat older? i tried compiling it myself and it compiled.. in that case you should probably also updatecatch_reporter_teamcity.hppto the one from master :). it should thats why i am surprised that it does not work for you.catch.hppis included from where?single_include/catch2orinclude`?. so you want to divide sum by 2 in case of i=1?. okay in that case  i acknowledge my mistake :). Feel free to create PR :). Seems like gcc9 issue.\nThere was recently fix\nhttps://github.com/gcc-mirror/gcc/commit/4bc4fd900c1f28a2986bfa3514f55ae524f8bc33\ntouching parts which you can see also in error message :)\n. So now you must probably wait for new version of package for Fedora :). Tags are used for grouping of several related test cases.\nThey can be also used to select which tests to run from command line.\n\nTest names must be unique within the Catch executable.\n\nThis is mentioned just few lines above Tags section of linked doc page.\nIf your test subjects(mdb and pg) to those test have similar interface you can use\nTEMPLATE_TEST_CASE to write one generic test for both :). FAIL, FAIL_CHECK, SUCCEED and WARN are basically assertions. First three are to explicitly end the test case. WARN is special one which does not explicitly end the run but continues on failure. I guess that WARN was made like that to display the message even if the test passes. Is it really needed to have those unscoped info messages kept even after WARN?. Please add also documentation about this macro to docs/logging.md. Also it might be good to add an example to the examples. If you add the example add link to it in the documentation.\n. Add also a documentation and example for this.. @tzakharko actually we thought about NTTP support for TEMPLATE_PRODUCT_TEST_CASE.\nWe decided that it would not be so trivial since the whole generation of the final TestType depends on the template signature for that type.\nEither way I think that I will take a deeper look on this feature.. Catch2 v2.x.x has C++11 up support.. How exactly are you running that gdb? I can not reproduce this on Debian with multiple GCC and Clang compilers.. Issue found and solved in linked commit.. run\npython scripts/generateSingleHeader.py \nfrom root of cloned repo. I think you want to checkout https://github.com/catchorg/Catch2/blob/master/docs/event-listeners.md \n. You can find example of listener also with some Catch::TestCaseInfo example here https://github.com/catchorg/Catch2/blob/master/examples/210-Evt-EventListeners.cpp#L122\nOtherwise you can take a look into header file https://github.com/catchorg/Catch2/blob/master/include/internal/catch_test_case_info.h\n. Yes it was done exactly for that reason :) Okay will try to limit this to something like\n```c++\nif defined(_MSC_VER) && (!defined(_MSVC_TRADITIONAL) || (defined(_MSVC_TRADITIONAL) && _MSVC_TRADITIONAL)\n//do the hacks\nelse\n//do the proper way\nendif\n. Ah okay that actually makes sense :). I guess that it should not but will test it.. should i also move the `INTERNAL_CATCH_EXPAND1` macro to this `catch_preprocessor.hpp`?. This variable name should be probably changed to something else like `message` or `getMessage`.(even though the lambda is massaging the string \ud83d\ude04  ). I think those warnings should be also popped at the end.. just a note that on Windows the binary is one more folder deeper usually Debug. for newer documentation use shorter lines with manual breaks. why suppress if you can do `!!(success = m_generator.next())` ?. Then use `(success = m_generator.next()) == true`. Might not look great but will fix it :). I suppose that there is no reason to derive from `SingleValueGenerator` so `get()` can be marked as final, so devirtualization can take place.. I think this can final too unless there will be more exception types deriving from `GeneratorException`.. This is also virtual method so it should be marked with `final`.\nSome generators have marked `next()` as override. . In documentation this has also virtual method `next()`. I think that description should be-- takes first n elements from a generator. `size` can be renamed to `count`? What do you think?. We prefer smaller lines and manual linebreaks.. I guess the only expectation is that it will be there :). Is there a particular reason why it is in `do {...} while(false)` statement? Can be justc++\nCatch::getResultCapture().emplaceUnscopedMessage( Catch::MessageBuilder( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) << log )\n``\nwithout the semicolon to prevent latest clang warning-Wextra-semi-stmt. I would prefer to not have it in do-while to keep it consistent withINFO. Previously it was inside do-while, but it was removed at some point.. Split this sentence into multiple lines. Lifetime ofUNSCOPED_INFOis not limited just by the following assertion, but also section end and test case end.is limited by the assertion followingshould beis limited by the following assertion. Here should be also mentioned that section end and testcase end are clearing stored messages.. you might want to enclose the or condition in parentheses so the message is reported for both checks. If i read it correctly now it should be reported only when the second condition triggers.. I think that it should be limited only for arithmetic types.. this class semantically belongs toinclude/internal/catch_stream.hwith implementation insideinclude/internal/catch_stream.cpp.These make this macrois about differences toINFO? Probably it might be written likeThese differences make this macroorThat makes this macro`. ",
    "rebcabin": "The following is a tiny MVP of something that does not work; about as far as I could get reading the source.  I stalled at line 1559, where the code refers to scopedMessage, and I could not find a definition of that anywhere ... seems some deeper magic is happening.\n```\ninclude \ninclude \ndefine CATCH_CONFIG_RUNNER\ninclude \"catch.hpp\"\nusing namespace std;\nstruct some_struct\n{\n    uint64_t timestamp;\n    double lat;\n    double lon;\n    float alt;\n};\nTEST_CASE (\"sizes\", \"[metadata]\" ) {\n    INFO ( \"The number is \" << 42 );\n    REQUIRE (sizeof(some_struct) == 32);\n}\nint\nmain (int argc, char ** const argv) {\n    int result = Catch::Session().run( argc, argv );\n    // cout << Catch::MessageBuilder::m_stream;\n    return result;\n}\n```\n. Ok, thanks for the clarification!\n. ",
    "bdesham": "That works great. Thanks!\n. ",
    "ghost": "Yes thanks, that did it.\n. works on Eclipse Luna, Ubuntu:\n- Eclipse IDE for C/C++ Developers, Version: Luna Service Release 2 (4.4.2), Build id: 20150219-0600\n- Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-54-generic x86_64)\n. Sorry my bad. Just now tried on debian testing with clang 3.5 and everything works fine. It's something wrong with travis script. \n. No.  It's a travis problem. Issue should be closed. \n. Is this still an issue with Clion? (CPP-2801 at Jetbrains tracker states fixed). Is it more an annoyance and are you still able to use Clion and Catch together productively?\n. Also failed under gcc \ngcc --version\ngcc (GCC) 6.2.1 20160830\nhere the detailed error:\nIn file included from /home/kai/apps/Catch-master/include/internal/catch_stream.h:12:0,\n                 from /home/kai/apps/Catch-master/projects/SelfTest/SurrogateCpps/catch_stream.cpp:3:\n/home/kai/apps/Catch-master/include/internal/catch_compiler_capabilities.h:248:37: Fehler: \u00bbunique_ptr\u00ab in namespace \u00bbstd\u00ab does not name a template type\n #   define CATCH_AUTO_PTR( T ) std::unique_ptr<T>\n                                     ^\n/home/kai/apps/Catch-master/include/internal/catch_stream.h:52:9: Anmerkung: bei Substitution des Makros \u00bbCATCH_AUTO_PTR\u00ab\n         CATCH_AUTO_PTR( StreamBufBase ) m_streamBuf;\n         ^~~~~~~~~~~~~~\nmake[2]: *** [CMakeFiles/SelfTest.dir/build.make:855: CMakeFiles/SelfTest.dir/home/kai/apps/Catch-master/projects/SelfTest/SurrogateCpps/catch_stream.cpp.o] Fehler 1\nmake[1]: *** [CMakeFiles/Makefile2:68: CMakeFiles/SelfTest.dir/all] Fehler 2\nmake: *** [Makefile:95: all] Fehler 2\nand with clang \nclang++ -v\nclang version 3.9.0 (tags/RELEASE_390/final)\nI get also an error (but a different one more like yours):\n```\n[ 89%] Building CXX object CMakeFiles/SelfTest.dir/home/kai/apps/Catch-master/projects/SelfTest/SurrogateCpps/catch_stream.cpp.o\nIn file included from /home/kai/apps/Catch-master/projects/SelfTest/SurrogateCpps/catch_stream.cpp:3:\n/home/kai/apps/Catch-master/include/internal/catch_stream.h:52:9: error: no type named 'auto_ptr' in namespace 'std'\n        CATCH_AUTO_PTR( StreamBufBase ) m_streamBuf;\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/kai/apps/Catch-master/include/internal/catch_compiler_capabilities.h:250:37: note: expanded from macro 'CATCH_AUTO_PTR'\ndefine CATCH_AUTO_PTR( T ) std::auto_ptr\n                           ~~~~~^\n\nIn file included from /home/kai/apps/Catch-master/projects/SelfTest/SurrogateCpps/catch_stream.cpp:3:\n/home/kai/apps/Catch-master/include/internal/catch_stream.h:52:9: error: expected member name or ';' after declaration specifiers\n        CATCH_AUTO_PTR( StreamBufBase ) m_streamBuf;\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/home/kai/apps/Catch-master/include/internal/catch_compiler_capabilities.h:250:45: note: expanded from macro 'CATCH_AUTO_PTR'\ndefine CATCH_AUTO_PTR( T ) std::auto_ptr\n                           ~~~~~~~~~~~~~^\n\n2 errors generated.\nmake[2]:  [CMakeFiles/SelfTest.dir/build.make:855: CMakeFiles/SelfTest.dir/home/kai/apps/Catch-master/projects/SelfTest/SurrogateCpps/catch_stream.cpp.o] Fehler 1\nmake[1]:  [CMakeFiles/Makefile2:68: CMakeFiles/SelfTest.dir/all] Fehler 2\nmake: *** [Makefile:95: all] Fehler 2\n``\nBut if I go to SelfTest and just usemake(so no CMake) it works withgccand withclang`... \n. ",
    "stevefolly": "Thanks Martin and Phil.   I'll have a look at the link, but it's not exactly what I was looking for.\nI've looked into using the VS Native Test Framework before, but due to the structure of our code (static runtime libraries, static libraries, monolithic exes, etc.... yes, I know...) using the framework is difficult; it's expecting dynamic runtime libraries, DLLs, etc. We have our own unit test app that build with the specific classes under test and a post-build event that runs itself.\nSo is there any likely future for just getting failures to appear in the Errors List window?\n. OK, thanks Phil.  Consider this a +1 from me :-)\n. @horenmar - unknown, my dev environment is fixed in a docker image; it may take a while to try an upgrade (I will try though...). Interestingly, this MWE seems to show that something (gcc or Catch?) is converting the enum to a bool. Is that a clue?\n```\ninclude \"catch.hpp\"\nenum\n{\n    option_1 = 0, // was previously 1\n    option_2 = 1, // was previously 2\n};\nTEST_CASE( \"what happened to my enum comparison?\" )\n{\n    const unsigned opt = option_1;\nif( opt == option_2 )\n{\n    REQUIRE(false); // never reached, good\n}\n\nCHECK( opt == option_2 ); // expectedly fails now\nCHECK( ( opt == option_2 ) ); // expected fail\n\n}\n```\nThe output is\n```\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nut-noida-trm is a Catch v1.7.2 host application.\nRun with -? for options\n\nwhat happened to my enum comparison?\nmwe.cpp:9\n...............................................................................\nmwe.cpp:18: FAILED:\n  CHECK( opt == option_2 )\nwith expansion:\n  0 == true\nmwe.cpp:19: FAILED:\n  CHECK( ( opt == option_2 ) )\nwith expansion:\n  false\n===============================================================================\ntest cases:  173 |  172 passed | 1 failed\nassertions: 1212 | 1210 passed | 2 failed\n```. ",
    "LegalizeAdulthood": "@garethsb Thanks for that quick hack, it exactly solves my problem as well!\nWhen I'm doing TDD in C++, I prefer to have unit tests (not integration tests) to run as part of the build so that assertion failures are reported as build errors.  A successful compile means all code compiled and all tests passed.  This is the way I setup the C++ language track on exercism.io and how I have taught TDD workshops with C++.. ",
    "louy2": "How is the work going on? I'd really appreciate a tutorial on making Netbeans friendly to Catch.\n. ",
    "lucidguppy": "Note: clone the repo - make a build dir\ncd build\ncmake ../\nmake && ./bowlingGameTest\n. I use lubuntu, here's my platform of lenovo ideapad y570.  It's just\nTEST_CASE_METHOD.\nmatt@matt-Lenovo-IdeaPad-Y570:~$ lsb_release -a\nNo LSB modules are available.\nDistributor ID:    Ubuntu\nDescription:    Ubuntu 14.04 LTS\nRelease:    14.04\nCodename:    trusty\nOn Tue, Aug 19, 2014 at 3:01 AM, Phil Nash notifications@github.com wrote:\n\nwhat platform/ compiler are you using?\nFor me (OS X/ Xcode 5.1.1/ LLVM 5.1 as well as Windows XP/ VS2010) it\ncorrectly reports the duplicate definition (at runtime), including the file\nand line number of each case - then terminates (exit(1)).\nAlso do you see the same behaviour with a duplicate TEST_CASE or is it\nonly TEST_CASE_METHOD that gives you this issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/303#issuecomment-52597217.\n. I will try duplicate TEST_CASE tonight - btw I'm running GCC at home.\n\nOn Tue, Aug 19, 2014 at 3:01 AM, Phil Nash notifications@github.com wrote:\n\nwhat platform/ compiler are you using?\nFor me (OS X/ Xcode 5.1.1/ LLVM 5.1 as well as Windows XP/ VS2010) it\ncorrectly reports the duplicate definition (at runtime), including the file\nand line number of each case - then terminates (exit(1)).\nAlso do you see the same behaviour with a duplicate TEST_CASE or is it\nonly TEST_CASE_METHOD that gives you this issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/303#issuecomment-52597217.\n. \n",
    "jargv": "I started on a patch to do this. The color was nice, but it complicated (read: broke) other parts of my workflow because of parsing issues. I think the status quo is very reasonable. Sorry for the noise! \n. ",
    "peterhuene": "Adding a \"me too\" to this.  It'd be nice to see color output from CMake's ctest wrapper when using Catch.  gtest has an option to force colors, so I think Catch should have one too.\n. I've thrown together a PR at https://github.com/philsquared/Catch/pull/374 in case we do want this.  It's sufficient for my needs, at least (getting ctest to output color with Catch).  Thanks!\n. Changed to the UK spellings of \"colour\" and \"colourised\" for consistency.\n. ",
    "andybalaam": "On Fri, 22 Aug 2014 11:21:43 -0700\nPhil Nash notifications@github.com wrote:\n\nthacks for that. ot sure what happeed to the letter\n\nlol\n. catfish - OK, but different enough to lose a lot of momentum.\ncatchtest - almost no loss of momentum.  I think the downside @philsquared mentioned (people not changing to the new name) would be fairly temporary, and would be worth it to prevent disruption.  You can bet stackoverflow would be up-to-date fairly rapidly.\n. ",
    "alex85k": "Sorry for misleading (did not notice /clr myseflf). We can safely enable nullptr only for VS 2010 or later (compiler version 16.00):\n```\nif (_MSC_VER >= 1600)\ndefine CATCH_CONFIG_CPP11_NULLPTR\nendif\n```\nI have a possibility to run tests on all MSVC (since 2005 to 2013) at work (we have MSDN subcription, but I need to install the compilers on some machine there). Will testing Catch\\projects\\CMake be enough?\n. Just tested on VS2010 express (cmake). Tests pass, adding asserts like \nCHECK( nullptr != &data );\ngives compilation errors without the patch. Applying the patch with condition (_MSC_VER >= 1600) fixed the compilation errors, the tests still pass. VS2008 and older will give compilation errors on nullptr.\nShall we support 2005 and 2008 + /clr ?  Then something like \n```\nif (_MSC_VER >= 1600) || ( defined(__CLR_VER)  && _MSC_VER >= 1400 )\n```\nwill be needed (testing on vs2005-2008 is needed).\n. Thank you for fixing!\nCurrent testing report:\nVS2008, VS2010, VS2013 - test cmake project compiles&works, but 2 assertions fail (nullptr patched unrelated, https://gist.github.com/alex85k/ecd5386a14157e8c6921 . On master branch all tests pass)\nOn VS2010 and VS2013 assertions like \"REQUIRE( nullptr != &a )\" compiles and works, on VS2008 they gives \"unknown nullptr\" error. It seems logical.\nI consider this can be closed now.\n. I also confirm that Visual Studio 2008 Express is also fully compatible with catch (nullptr will not work, of course, but it is not the library problem). There are no compile errors for test project (develop branch) and all the tests pass (except mentioned ToStringWhich.cpp(55) and ToStringWhich.cpp(67), as usual).\n. Can this PR be closed?\n. ",
    "tomvierjahn": "OBJECTION\nThe issue still exists.\n\nCatch version: v2.0.0-develop.3 (git hash afc0b31)\nclang: Apple LLVM version 8.1.0 (clang-802.0.38)\n\nWarning levels:\n-Werror\n-Weverything\n-pedantic\n-pedantic-errors\n-Wextra-tokens\n-Wambiguous-member-template\n-Wbind-to-temporary-copy\n-Wno-c++98-compat\nWe use a workaround for clang:\n```\ndefine SUPPRESS_WARNINGS_CATCH_BEGIN \\\n_Pragma(\"clang diagnostic push\")    \\\n      _Pragma(\"clang diagnostic ignored \\\"-Wexit-time-destructors\\\"\")\ndefine SUPPRESS_WARNINGS_CATCH_END _Pragma(\"clang diagnostic pop\")\n``\nand then we enclose all the tests into a pair ofSUPPRESS_WARNINGS_CATCH_BEGINandSUPPRESS_WARNINGS_CATCH_END.. That looks too specific to me. Cannot this be generalized/generalizable similar toStringMaker`?\nSee #954.. I dare to disagree ;-)\nOne of your key selling points is that you can use native operators for comparison. So I would like to do the following while using the same mechanics\nCHECK(float_a == Approx(float_b));\nCHECK(container_a == Approx(container_b));\ngiven that container_.* contain floating point data.\n. It still does.\n\nCatch version: v2.0.0-develop.3 (git hash afc0b31)\n\n. Unfortunately, it is not fixed yet.\nFurthermore, it shows \"strange\" behaviour \u2026\nSetup\n\nCatch version (from catch.hpp), git hash 0c015aa:\n```\nCatch v1.8.2\n\nGenerated: 2017-03-13 21:18:33.619572\n```\n\n\nclang: Apple LLVM version 8.1.0 (clang-802.0.38)\n\nwarning levels:\n-Werror\n-Weverything\n-pedantic\n-pedantic-errors\n-Wextra-tokens\n-Wambiguous-member-template\n-Wbind-to-temporary-copy\n-Wno-c++98-compat\n\nCase 1:\n\nsingle file only: test_foo.cpp\nshows expected behaviour\n\nvariant A\ntest_foo.cpp:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch/catch.hpp\"\nclass A {\npublic:\n  float f;\n  bool i;\n};\npragma clang diagnostic ignored \"-Wexit-time-destructors\"\nTEST_CASE(\"padding\", \"[padding]\") {\n  A a;\n  a.i = true;\n  CHECK(a.i);\n}\n```\nwarning:\npadding size of 'A' with 3 bytes to alignment boundary [-Werror,-Wpadded]\nvariant B\ntest_foo.cpp:\n```\ndefine CATCH_CONFIG_MAIN\nclass A {\npublic:\n  float f;\n  bool i;\n};\ninclude \"catch/catch.hpp\"\npragma clang diagnostic ignored \"-Wexit-time-destructors\"\nTEST_CASE(\"padding\", \"[padding]\") {\n  A a;\n  a.i = true;\n  CHECK(a.i);\n}\n```\nwarning:\npadding size of 'A' with 3 bytes to alignment boundary [-Werror,-Wpadded]\nvariant C\ntest_foo.cpp:\n```\nclass A {\npublic:\n  float f;\n  bool i;\n};\ndefine CATCH_CONFIG_MAIN\ninclude \"catch/catch.hpp\"\npragma clang diagnostic ignored \"-Wexit-time-destructors\"\nTEST_CASE(\"padding\", \"[padding]\") {\n  A a;\n  a.i = true;\n  CHECK(a.i);\n}\n```\nwarning:\npadding size of 'A' with 3 bytes to alignment boundary [-Werror,-Wpadded]\nCase 2\n\nseparate files test.cpp and test_foo.cpp\nbehaviour depends on the position of `#include \"catch/catch.hpp\"\n\ntest.cpp\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch/catch.hpp\"\n```\nvariant A:\ntest_foo.cpp:\n```\ninclude \"catch/catch.hpp\"\nclass A {\npublic:\n  float f;\n  bool i;\n};\npragma clang diagnostic ignored \"-Wexit-time-destructors\"\nTEST_CASE(\"padding\", \"[padding]\") {\n  A a;\n  a.i = true;\n  CHECK(a.i);\n}\n```\nno warning\nvariant B:\ntest_foo.cpp:\n```\nclass A {\npublic:\n  float f;\n  bool i;\n};\ninclude \"catch/catch.hpp\"\npragma clang diagnostic ignored \"-Wexit-time-destructors\"\nTEST_CASE(\"padding\", \"[padding]\") {\n  A a;\n  a.i = true;\n  CHECK(a.i);\n}\n```\nwarning:\npadding size of 'A' with 3 bytes to alignment boundary [-Werror,-Wpadded]. As long as the comparison operators are also taking floats and doubles.\n\nOn 29. Mar 2017, at 21:18, Martin Ho\u0159e\u0148ovsk\u00fd notifications@github.com wrote:\nWouldn't a float constructor be enough?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/philsquared/Catch/issues/873#issuecomment-290196705, or mute the thread https://github.com/notifications/unsubscribe-auth/AXfJqEJ-QgZ4384pWKIInz57Uv8IMwmYks5rqq6LgaJpZM4MsxGT.\n\n\n. > Also you can just cast the float to double.\nThat would yield bulky, ugly code:\nCHECK(static_cast<double>(variable) == Approx(5.0)). Would you mind also including it into the single-header version?\n\nOn 4. Apr 2017, at 15:19, Martin Ho\u0159e\u0148ovsk\u00fd notifications@github.com wrote:\nClosed #873 https://github.com/philsquared/Catch/issues/873 via 0354d50 https://github.com/philsquared/Catch/commit/0354d50278d725d52084601300eb955cee6756d8.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/philsquared/Catch/issues/873#event-1028374153, or mute the thread https://github.com/notifications/unsubscribe-auth/AXfJqOf5S40rxmQzR8JymzOReOMFrLabks5rskNkgaJpZM4MsxGT.\n\n\n. ",
    "davidandreoletti": "A C implementation (not header only) exists [libtap|https://github.com/zorgnax/libtap/blob/master/tap.c]. Possibly, someone can provide a Header only implementation within Catch.\nA more important question is: Should Catch's REQUIRE macro (and others) be mapped to libtap's is(...), ok(...) functions ? If yes, what would be a good mapping ? \n. Has anyone started on this ?\n. ",
    "frostyfrog": "subscribes to receive updates +1, needed for \"make check\" with GNU automake, at least, so long as people who write to automake don't want to write their own log driver to parse Catch's output.\n. ping I'm not entirely sure how good that last commit is. I did, however, make a quick and dirty first pass which (I think) follows the basic standard... If youu think it looks good @philsquared, then I could send a pull request your way. I'm not entirely confident in my commit and C++ abilities.\n. Now I have >_>\n. Oh crap. Eheh. My editor is setup to use tabs and auto-indent with a tabwidth of 2. I hadn't realized this when I was attempting to muck around with the code. Whoops.\n. ",
    "trws": "@frostyfrog: did you ever put in a pull request from that branch?\n. ",
    "jubalh": "I updated this PR so it can be automerged again!\n. There is also #310 which has the same goal but got opened some time earlier. Today I updated the PR so it can get automerged.\n. ",
    "wrotte": "Could you provide some insight in to why that might have a different result?  \nOn Aug 26, 2014, at 2:10 AM, James Wilkinson notifications@github.com wrote:\n\nTry changing REQUIRE( !local ); to REQUIRE_FALSE( local );\n\u2014\nReply to this email directly or view it on GitHub.\n. Haven't a clue.  C++ hasn't been my day job sadly for the last few years. . \n",
    "BAndiT1983": "double post\n. Thanks for fast reply. I will try your suggestion.\nEdit: I used http://stackoverflow.com/questions/11421432/how-can-i-output-the-value-of-an-enum-class-in-c11 to get started.\ncpp\nstd::ostream& operator<<( std::ostream& os, const TestEnum& item )\n{\n  os << static_cast<std::underlying_type<TestEnum>::type>(item);\n  return os;\n}\nResults: \nFAILED:\n  REQUIRE( TestFunc() == TestEnum::Idle )\nwith expansion:\n  1 == 0\nSuits me well for now, as i'm only evaluating Catch as possibility to replace CppUnit or CxxTest.\n. Is it in the develop branch, cause the master has only build 53? Had no time to test it till now, but will do it as soon as possible.\nUpdate: Tried catch.hpp from develop branch. Still the same output as before, without operator overloading. Or am i wrong about the issue?\n. I'm using Clang 3.5. Only special flag which is supplied by CMake is -std=c++11.\nThe output shows {?}, if i haven't overladed << operator for my enum. Will try to get tests running tomorrow.\nI'll close the issue for now as it seems that you can run tests and the enum is resolved without overloading. Have to get some tests done to verify it on my side.\nUpdate: Alright, it works! I copied the content of the latest commit (Build 7) and now i get the correct output. Seems that something gone wrong before and i got older version of catch.hpp. Thanks for fixing the issue by the way. I hope C++14 or 17 gets native \"enum to string\" feature.\n. See the update of my last comment for info. Somehow i got older version previously, now it works as expected.\n. ",
    "tsondergaard": "The tagging mechanism is excellent for controlling which tests to run, but I am having problems creating adequately structured junit xml reports for display in Jenkins. The junit plugin in Jenkins is a little strange. It doesn't care about the  hierarchy in the xml, instead it displays the test results in a hierarchy based on java-packages, which is forms by splitting the classname attribute of the  element by \".\".\nThe Catch::JunitReporter would serve the needs of my project well if the classname attribute of the  element was formed using the .<[#filename]>.\nWe run the same test code compiled as 32-bit and 64-bit code and the with the  included as above, it would be possible to run the test as \"test-executable -n win32.x86 -# -r junit -o junit-report-x86.xml\" and \" test-executable -n win32.x64 -# -r junit -o junit-report-x64.xml\" and get two xml reports that jenkins will group nicely by architecture (x86 and x64).. This could indeed break things. The best option is perhaps to make a \"junit2\" reporter with the new behaviour. That is what I have done in my own project. It could also be called \"junit-jenkins\". The change that encodes the test suite name in the classname attribute as a java package justify this name, I think.\nI can alter the pull request to do this.. I see the changes have been merged to branch dev-modernize, so closing pull request.. Okay, done.. ",
    "hauke76": "What I am asking for is what @philsquared mentioned in his last post under 2. \nThe background for randomized input data sets are tests for numerical libraries and algorithms (e.g. matrix decompositions, numerical optimization methods). The goal is to cover a greater range of input parameters and catch (sic) corner cases or numerically unstable configurations which may need better handling.\nThe reason why I am asking for the ability to provide a fixed seed in the command line options is reproducability in order to be able to go back to a failing case and reproduce the exact issue.\nIf you have any more questions, just let me know.\n. Just one more comment. I was not thinking about one seed per test case but one per test executable. \nNow I just saw that I can achieve this partially by supplying main() myself and storing the seed in a global variable - not wonderful but potentially a workaround. The same section indicates that I might be able to extend the command line options in the future which is all which would be left to get what I was asking for.\n. Hi @philsquared, if you could post some code that would be great. Otherwise, I will simply go for passing/parsing the user-defined parameters myself while forwarding all arguments Catch understands.\n. I have come up with an initial solution and wanted to share it here. If you want to, we can close this issue.\nThanks again for your help.\n. Hi, I am curious whether it is also possible to skip tests at run-time.\nAssume I had a unit test which requires a specific OpenGL version not present on the test machine where the test is currently run. It would be great to be able to skip such a test if I determine at run-time that I cannot reasonably perform it. As of today, I can skip but not invoking the respective assertion macro but I cannot log or report that I skipped a test. I looked at the code and tried to find out whether I could e.g. adapt the return value of a user specified main() but the return value of Session::run() seems to be already used otherwise.\n. ",
    "danijar": "+1\n. +1 for catchtest\n. Maybe it's better to find a name without special characters in in. I also like the suggestion @claymation made of above, which is Catchy.\n. I like catfish as a name. Don't know if that's a real problem, but there is CatFish disk catalogs, a snapshot manager written in C++ with the newest release being from 1999.\nAs for the appended ++ some suggested above, it reduces memorability for new people, is not a valid Github repository name and people would just call it catfish anyway.\n@raytrap I agree that it would be better to find a name without special chars. Most of the names you suggested feel hard to pronounce though. I somewhat like crosscatch, in the context of cross-platform. It underlines the ubiquity of the framework ;)\nBy the way, what do you guys think on capitalization? For example, most repositories have lowercase names. I though it might be a good time to adopt this as well when we're changing the name.\n. Sorry for wasting your time, I found Catch in the repositories. It's catch for Ubuntu and libcatch-cpp-headers for Arch.\n. @philsquared  I just tested adding tear-down code inside the TEST_CASE after all SECTIONs. The code was ignored completely. Even throwing an exception there had no effect.\n. @kirbyfan64 Thank you very much, this workaround helps.\n. ",
    "p-brz": "Someone is working on this already? I may try to implement it if nobody is already doing this.\n. @horenmar, if you want you can add this snippet (below). I think it ends up looking better:\n    void printDuration(double duration){\n        const char * unit = \"s\";\n\n        if((duration * 1000) < 100.0){\n            duration *= 1000;\n            unit = \"ms\";\n        }\n\n        stream << duration << \" \" << unit;\n    }. Well, i may be wrong, but I don't think this reporter is intended to machine processing.\n\nInstead, i think its targeted for the developer.\nSo, IMHO the UX should be priority.\nAnyway, congratulations for your work. This issue was open for more than 2 years! :open_mouth: . Uou! \nI am not using Catch to so many time, but i really likes it!\nSo i am very happy to see things progressing.\nCongrats @philsquared, @horenmar and all community for the work! :+1:   . Btw, @philsquared , do you think it worths to change the time units format (to something like the initial proposal), besides the possible problems with parsing?. Sorry, i thought that i had closed this issue before.\nI have found a workaround (essentially, ignoring the returned code).\nIt is not pretty but is nothing important, so i will not bother anybody with that.\nThanks for the answer.\n. ",
    "bobismijnnaam": "Has this been integrated into Catch already? Maybe I'm being ignorant but my std::tuple's are expanded to {?}, even with with -DUSE_CPP11=YES. It'd be awesome to have tuples expanded when a test doesn't pass.\n. ",
    "vpicaver": "A fix to this issue would be very nice. Some of my test cases take a long time to run, and it would be useful to run a particular section in a test case. \n. The SECTION helps me set up the problem and re-use code. I'll have to look into TEST_CASE_METHOD\n. Okay cool, makes sense. Catch has saved me a bunch time, btw. \n. This does work with your mock QString, but doesn't work with the real QString from the Qt library. QString implements a bunch of operator<< and I'm not sure if it's effecting catch.\n. Sure no problem. What platform are you on? So I can provide instructions. Are you ever used the Qt framework? \n. On that note we could probably use QString().toStdString() instead.\n. Sweet, I need to try that out! It's weird because I thought I implemented a\ntostring function but I couldn't get it to work.\nOn Saturday, December 5, 2015, Andy Edwards notifications@github.com\nwrote:\n\nAha, I found something that works!\nSo in catch.hpp it says to overload toString, not to specialize its\ntemplate:\n/// Overload (not specialise) this template for custom typs that you don't want/// to provide an ostream overload for.template\nstd::string toString( T const& value ) {\n    return StringMaker::convert( value );\n}\nBut lo and behold, specializing the template worked for me:\ntostrings.h:\nifndef TOSTRINGS_H\ndefine TOSTRINGS_H\ninclude \"../lib/catch.hpp\"\ninclude \ninclude \nnamespace Catch {template<> std::string toString(QString const& s);\n}\nendif // TOSTRINGS_H\ntostrings.cpp:\ninclude \"tostrings.h\"\nnamespace Catch {template<> std::string toString(QString const& s) {\n    return s.toLocal8Bit().constData();\n}\n}\nIn a test file, I #include \"tostrings.h\" and do the following:\nCHECK( QString(\"a\") == QString(\"b\") );\nOutput:\n/Users/andy/cavewhere/dewalls/test/wallsprojectparsertests.cpp:121: FAILED:\n  CHECK( QString(\"a\") == QString(\"b\") )\nwith expansion:\n  a == b\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/531#issuecomment-162223868.\n. \n",
    "onqtam": "Since I'm working on the same issue on doctest I'd like to note that the following:\nc++\nTEST_CASE( \"Test\" ) {\n    cout << \"root\" << endl;\n    SECTION( \"sa\" ) {\n        cout << \"sa\" << endl;\n        SECTION( \"sb\" ) {\n            cout << \"sb\" << endl;\n        }\n        SECTION( \"sc\" ) {\n            cout << \"sc\" << endl;\n        }\n    }\n    SECTION( \"sd\" ) {\n        cout << \"sd\" << endl;\n    }\n}\nwhen ran like this: a -c sa -c sb will output the following:\nroot\nsa\nsb\nroot\nsa\nroot\nSo it enters the test case 3 times - when in reality it should only once.\nNot sure this is worth fixing though.... @philsquared just did - in the dev branch, but mine is a bit different - see the associated issue\nAnyway I first noticed the behavior I reported here while implementing the filtering in doctest - then I moved the filtering up a bit inside of my Subcase constructor (analogous to Section in Catch) and I no longer re-enter the test case if all other subcases that were not traversed didn't match the filtering criteria. +1 for documenting this. bump - will this get merged? It seems forgotten.. I'm not sure SECTIONs (which is what the BDD style macros are) are intended to be used in loops.. I think I've hit this same issue - but with VC++6 - see here\nThe minimal example used to reproduce it was this:\n``` c++\ndefine STR_CONCAT_IMPL(s1, s2) s1##s2\ndefine STR_CONCAT(s1, s2) STR_CONCAT_IMPL(s1, s2)\ndefine ANONYMOUS(x) STR_CONCAT(x, LINE)\nstruct Subcase\n{\n    Subcase(const char name, const char file, int line) {}\n    operator bool() const { return true; }\n};\ndefine MYMACRO(name) if(const Subcase & ANONYMOUS(AUTOGEN_VARIABLE_) = Subcase(name, FILE, LINE))\nint main() {\n    MYMACRO(\"\") {}\n    return 0;\n}\n```\nThis was my conclusion:\nthis turned out to be a compiler bug.\nTurning off Edit and Continue from the debug info fixed the problem (the /ZI command line option)\n. Just a tiny remark - have you seen cxx-prettyprint - for pretty-printing of any container?\nIt has c++98 support and std::vector isn't even mentioned in the header - I think it might work for user-defined containers as well - it detects if the container has begin() and end()\n. the build won't pass for sure - the llvm apt is down the last month and clang 3.7/3.8 cannot be fetched.\nsee this for more details\n. @nabijaczleweli today I switched to using a .tar.gz and wget... I just restarted a build from 10 days ago and it still fails (see the bottom 4 builds)\n. _Pragma() will not work for g++ (only gcc) in complex macros - see this - in my library doctest I'm able to suppress only clang warnings\n. @czipperz if you pop the silenced warning at the bottom of the header - it will not affect code generated from a macro in a source file - so it either has to use _Pragma() or it has to be left enabled even after the header\n. weird - they were really not working a few days ago - perhaps a github issue? It's all fine now\n. looking at this PR - isn't it possible to also implement less-than and greater-than - like this:\nc++\nfriend bool operator< (double lhs, Approx const& rhs) { return lhs < rhs.m_value && lhs != rhs; }\nfriend bool operator< (Approx const& lhs, double rhs) { return lhs.m_value < rhs && lhs != rhs; }\nfriend bool operator> (double lhs, Approx const& rhs) { return lhs > rhs.m_value && lhs != rhs; }\nfriend bool operator> (Approx const& lhs, double rhs) { return lhs.m_value > rhs && lhs != rhs; }\nby using && and not-equals instead of equals?. not really - but just for completeness' sake. Yes - test cases are discovered at runtime.\nIf you are using CMake for your build system - the problem with test cases in static libraries not getting registered can be solved in an unintrusive way (no source code modification) - checkout this section of the FAQ of doctest. It uses the doctest namespace but that shouldn't matter - it should work with Catch as well out of the box.\n. I think you need to implement the test runner somewhere - do this IN EXACTLY ONE SOURCE FILE:\n``` c++\ndefine CATCH_CONFIG_RUNNER\ninclude \"catch.hpp\"\n```\nand then in your _tmain do this: return Catch::Session().run( argc, argv );\nAlso make sure to have read the documentation.\n. The code that doesn't work actually doesn't work only for conforming compilers such as clang and gcc - it actually works with MSVC because of their broken two phase lookup.\nTo get it working for all compilers you would need to move the overload into the user namespace instead of Catch. I think this has to do with ADL - but I'm no C++ expert.\nThanks for this catch (pun intended) - doctest has the same problem in the documentation!\n. this seems to be a clang issue\n. I think it could be possible with the use of C++17's std::uncaught_exceptions to do something when the local objects (the capture stuff) are destroyed during stack unwinding due to an exception...\nor maybe just logging in globals in the destructor of the local capture stuff. I just implemented this in doctest in the dev branch - see this commit\nonline demo: wandbox\nI managed to reuse most of my macro internals by packaging the __VA_ARGS__ as a single parameter with extra parenthesis in the interface macros - like this (so DOCTEST_ASSERT_PROXY doesn't get changed at all - it forwards to DOCTEST_ASSERT_IMPLEMENT the packaged variable arguments) - and later remove the parenthesis - like this. same happens with doctest - but MSVC generates a warning even for the following:\nc++\nif(std::optional<int>(1).value() == 1)\nwarning C4172: returning address of local variable or temporary\nhaven't investigated yet.... I have the same experience in doctest with _Pragma() not working for the g++ frontend - related reports:\n\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=55578\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=69543\n\nIt's weird that I don't get the -Wparentheses warning though - but my expression decomposition uses operator<< (like lest does) instead of operator<= so it might be related to operator precedence - << is before the comparison ones. I think the problem is when the struct is defined after the catch header and not before, but the issue seems fixed - online compiler - triggers the warning as desired. I have resolved this issue in doctest with the DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE config identifier - it basically removes the references from the template machinery - by using DOCTEST_REF_WRAP() internally - so everything is copied by value. It can be used only in some source files and not others.\nI don't think there is any other way of solving this since using references forces ODR usage. Here is how u can extend Catch to have these macros:\n```c++\ndefine CHECK_MESSAGE(cond, msg) do { INFO(msg); CHECK(cond); } while((void)0, 0)\ndefine REQUIRE_MESSAGE(cond, msg) do { INFO(msg); REQUIRE(cond); } while((void)0, 0)\n. @garyo perhaps you could put thesetup();andteardown();``` calls into sections of their own - and that way they will be called just once - at the start and the end of the test case (which is re-entered multiple times). This has one downside - the last section may not be discovered if something throws before it - and thus the teardown code will never be called.\nyou could also look into the listener interface that Catch provies: here - some people use it for handling globals and complex setup/teardown logic. I don't see a reason for the linker to remove anything if you use Catch in its single header form when building the static library. Also you could compile the framework header with the test runner implementation in some source file into a static library in your own projects - should be pretty easy with any proper build system. Hi!\nIsn't what you want already possible with testCaseStarting/sectionStarting and testCaseEnded/sectionEnded?\nOr if the test case related methods are called only once even for a test case with multiple sections - isn't that what the testGroupStarting/testGroupEnded are for? (a comment in the code about what a test group is and when exactly are these called would be helpful...)\nSeems to me that the behavior you are looking for can be emulated in a custom reporter/listener with some custom logic and overriding of these methods... Or perhaps I'm missing something?\nI'm currently designing a reporter/listener system as well so this is of interest to me.. try defining your own main  and make sure you can build a normal C++ console application. are those test cases in a static library? there is an optimization performed by all linkers to not include .obj files which aren't needed - so any self-registering test cases within those .obj files get stripped away.... what an interesting find! the doctest testing framework has the same issue - thanks for reporting!. have you tried defining CATCH_CONFIG_NO_POSIX_SIGNALS?. Catch2 is based on top of C++11 and making asserts thread safe is much easier. That is planned for Catch2 but not implemented yet. For Catch 1 however that feature will never be implemented.. you can also use the abort command line flag - but it will end the program in a normal way - not sure if that is what you are looking after.. @horenmar regarding the 2017 tests on appveyor: there is the option to have some .vcxproj.user file copied by cmake right after generation or configuration next to the generated build files by cmake that has the appropriate flag set.. @cstratopoulos out of curiosity - why would one want to use a section inside of a loop in that manner? Why not just use CAPTURE or INFO as seen here?\nSections are designed for re-entering the whole test case multiple times and sharing setup/teardown code - not for labeling loop iterations... This use case doesn't stop amusing me.. I've encountered this problem with the MSVC optimizer a few years ago - the problem occurs when there are many branches, and it gets worse quite quickly (I don't remember there being an upper bound). I fixed the issue by removing a macro and introducing a function call (but this is not possible in the case of testing frameworks such as Catch without sacrificing some functionality). This indeed happens only with the MSVC optimizer - I don't know if anyone has reported it.\nI don't see a solution to this since the normal asserts of Catch have a single branch in them (in the expanded code in the test cases) and you cannot get any better than that without sacrificing functionality (that branch is for breaking into the debugger). Actually you could try using CATCH_CONFIG_FAST_COMPILE but I think it only removes the try/catch sections around the evaluation of expressions in asserts (exceptions are still caught by the test runner if the test case is aborted by such). My framework (doctest) supports alternative fast asserts which are just a single function call - at the cost of not breaking into the debugger at the exact location of the assert in the source code but 1 level deeper in the callstack - in the framework evaluation function. Such an optimization can be implemented for Catch as well.\n. I suppose this should be possible by providing your own main function and just executing the tests a few times (and changing the rng seed programatically before each)...?. ",
    "rgrover": "I am keen to use Catch for my project based on a ARM Cortex-M with only 256K of flash (code) space. Even though Catch allows me to replace std::cout etc with my own lightweight streams/stream-buffers, it still requires me to work with std::ostream. Ostream pulls in a huge amount of locale, time... related support in IOStreams. This is non-essential and bloats my test application to a size beyond the available flash--this in spite of using reasonable compiler/linker flags for optimizing space and removing the unnecessary bits.\nThe following report contains a table of symbol-sizes and symbol-names (in decreasing order of symbol-size) for the code that gets pulled into the binary as a result of introducing Catch:\nreport1.txt\nIt was generated using\nnm --demangle --print-size --size-sort --reverse-sort --radix d\nHere are a few items from the top of the list (first column is size [in decimal], second column is symbol-type [according to nm]):\n\n00001812 T std::locale::_Impl::_Impl(unsigned int)\n00001812 T std::locale::_Impl::_Impl(unsigned int)\n00001484 W std::__cxx11::time_get<...>::_M_extract_via_format(...) const\n00001480 W std::__cxx11::time_get<...>::_M_extract_via_format(...) const\n00001064 T std::locale::facet::_M_sso_shim(std::locale::id const*) const\n...\n\nA lot of these are un-necessary and come un-invited as a result of depending on iostreams.\nI'd love to use Catch on my embedded device, and advocate its use to my colleagues. . ",
    "AnthonySuper": "Thanks for merging, and for the great framework!\n\nOn Dec 30, 2014, at 11:36 AM, Phil Nash notifications@github.com wrote:\nThanks Anthony.\nIt may have taken a while but I finally got to this. The changes mostly look good (or at least innocuous) - so I net improvement overall!\n\u2014\nReply to this email directly or view it on GitHub https://github.com/philsquared/Catch/pull/329#issuecomment-68383159.\n. \n",
    "luckyrandom": "After playing with Catch for a while, I realized what I really want to propose here is a a pair of macor, ASSERT and   ASSERT_FAIL (maybe also ASSERT_OK), as a replacement of old school assert. When ASSERT is used alone, it behaves the same as REQUIRE, except it works well without TEST_CASE. ASSERT_FAIL is used in unit test to claim assert failure is expected.\nFor example,\n``` cpp\nint Factorial(int number ) {\n  ASSERT(number >= 0);\n  return number > 1 ? Factorial(number-1)*number : 1;\n}\nTEST_CASE( \"Factorials are computed\", \"[factorial]\" ) {\n   ASSERT_FAIL( Factorial(-1) );\n}\n``\n. Martin, thanks for your example. I don't thinkREQUIRE_NOT(...)is what I want. I'm looking forASSERTas an replacement of old school but usefulassert. I requestASSERT_FAILas a tool to unit-testASSERT`.\n. That's exactly what I want! Phil, I'll be waiting for your good news :)\n. Is 0x375f00 really more readable than 3628800? It might be a personal choice, but I prefer 3628800.\nFor int, the hex representation of a negative number might be hard to read.\n. ",
    "inequity": "@philsquared Is this valid code? And would it output sensible information on a failure? I'm asking in here because it is somewhat directly related to the topic...\n```\nvoid foo(int a)\n{\n    CHECK(a == 2);\n}\nTEST_CASE(\"testA\", \"\")\n{\n    foo(2);\n}\nTEST_CASE(\"testB\", \"\")\n{\n    foo(3);\n}\n```\n. I feel like there is some crossover between this and the Matchers. Would it work if instead of the Approx wrappers, there were just Matchers for this type of thing? It could be nice for extensibility. I could imagine syntax like\n```\nnamespace FloatingPoint {\n    struct ApproximatelyEquals : MatcherImpl {\n        Equals( float rhs, float epsilon = std::numeric_limits::epsilon()*100 ) \n            : m_rhs( rhs ), m_episilon(epsilon) {}\n        Equals( Equals const& other ) \n            : m_rhs( other.m_rhs ), m_epsilon(other.m_epsilon){}\n    virtual ~Equals();\n\n    virtual bool match( float const& expr ) const {\n        return abs(expr - m_rhs) < m_epsilon;\n    }\n    virtual std::string toString() const {\n        return \"approximately equals: \\\"\" + toString(m_rhs) + \"\\\"\";\n    }\n\n    float m_rhs;\n    float m_epsilon;\n};\n\n}\n```\nSo then in code you could just use\nCHECK_THAT( fValue, Catch::FloatingPoint::ApproximatelyEquals(15.0f) );\nGiven, I don't fully know the internals/intentions behind Matchers. Just a thought. Additionally, I'm not sure how to structure compound OR'd statements in catch, such as\nCHECK( (a == 1) || (a == 2) )\nWhat would that even expand to? true || false? or just true? I feel like that is another case where Matchers seem like they might be suitable.\n. While I understand where you are coming from, I don't think I agree that a unit test not passing qualifies as being an exceptional event. \nAdditionally - I can't generalize and speak for the intent of all projects, but I know that specifically the project I work on is a very large codebase which was written intentionally without exceptions, anywhere, for a number of reasons. Our codebase is huge, some of it is very old, and it takes more effort and experience to guarantee that any code we write would be exception-safe, especially in the realtime simulations we operate in. Error codes are just easier for some people, especially junior developers, to wrap their heads around.\nIt would be nice to be able to compile with the same flags on our tests and regular projects, but I'm not really saying Catch is at fault for doing things the way it did. \nThat was my only point, and I was really just wondering if it was possible to have Catch work without exceptions, because the config would suggest that it might be possible. We can work around it, no problem. Just wanted to ask.\n. ",
    "DanTheColoradan": "I'm not sure what I changed to fix it, but it is working now. It might have been that I changed clang from 3.4 to 3.5... It's hard to say. If I figure it out, I'll let you all know.\n. What is odd is that I figured out a way to get around it... But it's annoying.\nI'm using cmake and it downloads catch on the fly using ExternalProgram_Add as per the instructions. In any case, I call cmake and then make and it works fine for the initial build. Then, if call I cmake and make again without removing all of the files, it throws that error.\nSo right now, I just rm -rf * my build folder and then cmake and make again....\n. Thanks! I'll give it a go.\nAnd as I mentioned, I'm definitely not claiming it's a catch issue. I mostly wanted to double check it wasn't, and also leave a record for anyone who stumbles upon this problem.\nI'll give your suggestions a thorough testing and leave it at that :)\nThanks again! :thumbsup:\n. It was. I was able to get a little further after reading that documentation, but it was still acting funny. So, I've decided against using clang on linux and I'm just going to use gcc for now. I think that's a better choice anyway since I'll be forced to compile with at least two compilers (i.e. clang on my mac and gcc on linux).\nI really appreciate your help.\nEdit: by linux I mean Ubuntu ;-)\n. ",
    "yngvejm": "@DanTheColoradan You are right. Updating to clang 3.6 fixed it. Thanks\n. ",
    "Leandros": "Windows, in terms of terminal coloring, is rather difficult, compared to other *nix/bsd based operating systems, because you have multiple types of tty you need to support. There is cmd.exe, which is what we all know and love, but does not accept ANSI codes. And there is bash.exe (often bundled via Git or MinGW), which runs native win32 binaries (unlike cygwin), but accepts ANSI color codes.\nI've met this problem a number of times in different applications already, and in my opinion, the best way is to support both. This can be achieved by building a small abstraction on top of the color output, which will either select based on the operating system whether to use bash or you're running on windows. On windows you need to detect whether your output is going to cmd.exe or to bash.exe (which is not exactly obvious how to achieve, but you can refer to my blog post here about how to achieve it) and based on that pick the coloring mechanism.\nAs an avid user of bash.exe on windows, I'd love to see this, because most don't bother.. Awesome! Sounds great!. Since the output is piped through Ctest, it'll swallow all colors. Win32, in comparison to Linux, doesn't use escape code, but requires to modify the underlying console, which will obviously be swallowed by ctest. Unless colors are added to ctest itself, you're out of luck.\nWhat you could try is to run ctest in a git bash (https://git-scm.com) and configure catch to use ANSI escapes.. :+1:. Occasionally, I get the same assert triggered on my CI builds:\nAssertion failed: m_sectionStack.size() == 0 (../extern/lib/catch2/single_include/catch.hpp: testCaseEnded: 3808)\ncouldn't reproduce it outside, yet, and rerunning the build usually fixes it.\nI'm invoking my test executable with the following arguments:\n/path/to/teamcity/_out/tests/a -r junit -s -o /path/to/teamcity/_out/tests/a.junit. Still out of scope for catch?. Any progress here? Might also want to take a look at how GoogleTest does it: https://github.com/google/googletest/blob/master/googletest/docs/AdvancedGuide.md#how-to-write-value-parameterized-tests. :+1:. How is that looking? Just ran into this issue, too.. CATCH_CONFIG_RUNNER doesn't work, since the catch.hpp header was already formerly included and the implementation is therefore guarded by the TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED macro.\nThe case is, that I want to include catch.hpp in my precompiled header, but still want only one single TU to contain the main implementation, which is currently not possible, due to the requirement that the precompiled header has to be the first to appear in any file. . Works for me! . It's a clang bug: https://bugs.llvm.org/show_bug.cgi?id=35953. There is more:\n```\n==2961==ERROR: AddressSanitizer: heap-use-after-free on address 0x604000005950 at pc 0x0000006382da bp 0x000001feb0d0 sp 0x000001feb0c8\nREAD of size 8 at 0x604000005950 thread T0\n    #0 0x6382d9 in Catch::Colour::use(Catch::Colour::Code) /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:6819:15\n    #1 0x638241 in Catch::Colour::Colour(Catch::Colour::Code) /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:6804:42\n    #2 0x68c556 in Catch::(anonymous namespace)::AssertionPrinter::printExpressionWas() /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:11132:24\n    #3 0x66dc10 in Catch::(anonymous namespace)::AssertionPrinter::print() /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:11075:13\n    #4 0x66cbe2 in Catch::CompactReporter::assertionEnded(Catch::AssertionStats const&) /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:11226:21\n    #5 0x64d4a0 in Catch::RunContext::assertionEnded(Catch::AssertionResult const&) /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:8466:39\n    #6 0x64f5c3 in Catch::RunContext::handleFatalErrorCondition(Catch::StringRef) /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:8565:9\n    #7 0x63a0b8 in (anonymous namespace)::reportFatal(char const) /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:7127:56\n    #8 0x639df2 in Catch::FatalConditionHandler::handleSignal(int) /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:7235:9\n    #9 0x7f169df2e02f  (/lib/x86_64-linux-gnu/libc.so.6+0x3302f)\n    #10 0x564b9b in a::atomic::detail::load_relaxed(a::atomic::detail::uint128_atomic const) /root/p4/depot/_out/../liba/include/a/bits/atomic_gcc.hxx:659:5\n    #11 0x564a57 in a::atomic::detail::uint128_atomic::Type a::atomic::LoadSeqCst(a::atomic::detail::uint128_atomic const) /root/p4/depot/_out/../liba/include/a/bits/atomic.hxx:73:28\n    #12 0x56458a in a::atomic::detail::uint128_atomic::Type a::atomic::Load(a::atomic::detail::uint128_atomic const, a::atomic::MemoryOrder) /root/p4/depot/_out/../liba/include/a/bits/atomic.hxx:91:16\n    #13 0x561e2e in a::Atomic128::Load(a::MemoryOrder) const /root/p4/depot/_out/../liba/include/a/atomic.hxx:303:16\n    #14 0x55b59a in _CA_T_C_H__T_E_S_T_25() /root/p4/depot/out/../liba/tests/atomic.cxx:199:30\n    #15 0x65e9ba in Catch::TestInvokerAsFunction::invoke() const /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:9870:9\n    #16 0x6507f5 in Catch::TestCase::invoke() const /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:9771:15\n    #17 0x65063a in Catch::RunContext::invokeActiveTestCase() /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:8655:27\n    #18 0x64c5b7 in Catch::RunContext::runCurrentTest(std::cxx11::basic_string, std::allocator >&, std::__cxx11::basic_string, std::allocator >&) /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:8630:17\n    #19 0x64a08b in Catch::RunContext::runTest(Catch::TestCase const&) /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:8419:13\n    #20 0x656c79 in Catch::(anonymous namespace)::runTests(std::shared_ptr const&) /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:8967:39\n    #21 0x655527 in Catch::Session::runInternal() /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:9151:63\n    #22 0x654f62 in Catch::Session::run() /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:9108:24\n    #23 0x6878f6 in main /root/p4/depot/_out/../liba/tests/driver.cxx:36:20\n    #24 0x7f169df1b2b0 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x202b0)\n    #25 0x42ed89 in _start (/root/p4/depot/_out/tests/a+0x42ed89)\n0x604000005950 is located 0 bytes inside of 36-byte region [0x604000005950,0x604000005974)\nfreed by thread T0 here:\n    #0 0x523d70 in operator delete(void*) /root/tmp/llvm/compiler-rt/lib/asan/asan_new_delete.cc:137\npreviously allocated by thread T0 here:\n    #0 0x522ff8 in operator new(unsigned long) /root/tmp/llvm/compiler-rt/lib/asan/asan_new_delete.cc:92\nSUMMARY: AddressSanitizer: heap-use-after-free /root/p4/depot/_out/../extern/lib/catch2/single_include/catch.hpp:6819:15 in Catch::Colour::use(Catch::Colour::Code)\nShadow bytes around the buggy address:\n  0x0c087fff8ad0: fa fa fd fd fd fd fd fd fa fa fd fd fd fd fd fd\n  0x0c087fff8ae0: fa fa fd fd fd fd fd fd fa fa fd fd fd fd fd fd\n  0x0c087fff8af0: fa fa 00 00 00 00 00 fa fa fa 00 00 00 00 00 fa\n  0x0c087fff8b00: fa fa 00 00 00 00 00 fa fa fa fd fd fd fd fd fa\n  0x0c087fff8b10: fa fa fd fd fd fd fd fa fa fa 00 00 00 00 00 fa\n=>0x0c087fff8b20: fa fa 00 00 00 00 00 fa fa fa[fd]fd fd fd fd fa\n  0x0c087fff8b30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c087fff8b40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c087fff8b50: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c087fff8b60: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c087fff8b70: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n``. Potentially false positives, due to not having instrumented the standard library. Take with a grain of salt, and re-test with an instrumented libcxx.. Yes.driver.cc`:\n```cpp\nundef TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED\ndefine CATCH_CONFIG_IMPL_ONLY\ndefine CATCH_CONFIG_RUNNER\ndefine CATCH_CONFIG_NO_POSIX_SIGNALS\ndefine CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS\ninclude \ninclude \nint main(int argc, char **argv)\n{\n    Catch::Session session;\n    int ret = session.applyCommandLine(argc, argv);\n    if (ret != 0)\n        return ret;\n    return session.run();\n}\n```\nSimple as that. Than write a test which does a nullptr access and observe how \nfailed: fatal error condition with message: 'SIGSEGV - Segmentation violation signal'\nis still printed.\nI'm running Windows, but it appears to happen on all platforms. I'd prefer to just crash (since that means my signal handler is coming into play, providing better diagnostics).. Alright, I figured out that catch is using VEH (not actually SEH, as the macro might suggest) to print the mentioned message. Disabling it via the macro also now prevents the message. However, if doesn't call my SEH handler. Do you still have some \"global\" try catch around everything? \nEdit: Registering my own VEH allows me to catch it. :+1:\nTicket can be kept closed, I guess.. I've seen this has been requested in the past, and is mentioned in the known limitations. I'd still like to nag you. The current solutions are not satisfying. . ",
    "jamespharvey20": "I can't get colorized output on Windows running ctest through a command window.  I know nothing about Windows command line color, other than it's not ANSI.  Since ctest is buffering the output, I think, is it just impossible to use color through it?\nLikewise, I also can't get colorized output on Windows running in a VS CMake window (CMake->Run All Tests) which invokes ctest.  I know even less about if it's even possible to use color here, since ctest is not only buffering it, but VS winds up displaying it.  Perhaps the only way is to use the VSColorOutput extension.\nIn my CMakeLists.txt, I have add_test(unitTestX unitTestX --use-colour yes) and I've also put #define CATCH_CONFIG_COLOUR_WINDOWS in the cpp file with #define CATCH_CONFIG_MAIN.  (This is all before the #include \"catch.h\".)\nThe CATCH_CONFIG_COLOUR_WINDOWS does have the effect of when the unitTest is being ran directly, it uses color, without having to specify a command line argument.\nThe add_test(... --use-colour yes) seems to have no effect on Windows.  (It does on linux.)  When I run ctest, in a command window, it still prints in black and white.\n. Huh.  You're right, sorry about that!\nint {0} is legal c++11, but unsigned int {0} even in an if statement without involving catch at all gives the same type of error.  Weird!\n. Actually, moving this into a function, class, or fixture doesn't work either, which is another thing I've done a few times.  These segfault/fail the internal assertion as well:\n```\ninclude \nvoid func() {\n   SECTION(\"1\") {\n      SECTION(\"A\") {\n      }\n      SECTION(\"B\") {\n      }\n   }\n}\nTEST_CASE(\"\") {\n   func();\n   func();\n}\n```\n```\ninclude \nclass foo{\npublic:\n   foo() {\n      SECTION(\"1\") {\n         SECTION(\"A\") {\n         }\n         SECTION(\"B\") {\n         }\n      }\n   }\n};\nTEST_CASE(\"\") {\n   foo A{};\n   foo B{};\n}\n```\n```\ninclude \nclass fixture{\npublic:\n   fixture() {\n      SECTION(\"1\") {\n         SECTION(\"A\") {\n         }\n         SECTION(\"B\") {\n         }\n      }\n   }\n};\nTEST_CASE_METHOD(fixture, \"A\") {\n   fixture A{};\n}\nTEST_CASE_METHOD(fixture, \"B\") {\n   fixture B{};\n}\n```. @philsquared Ah, yes, that link does show what I want to do.  Thanks!\nThere probably isn't a scalability difference between VS/CMake and VS/vsproj  We've been linux only, and are interested in supporting Windows.  So, I have extremely little standard vsproj experience.  I'm comparing unix and VS/CMake, not VS/CMake and VS/vsproj.\nIn linux, running catch through ctest can automatically have options appended to add_test(), and when running a unit test directly can specify the arguments you want.\nIn VS, the same ctest automation works.  But, when running a unit test directly, through the debugger so you can break into debugging on failure, I'm not aware of a way to specify command line arguments other than launch.vs.json.  So, we'd have a very large launch.vs.json to maintain with each test, or would have to edit it constantly.  \"Amending the config\", as you showed, will make it so we won't even need a launch.vs.json.\nI could easily see with standard vsproj, that you'd have to specify the command line arguments for each unit test as well.  \nI'd avoid the situation if I could tell VS to run all tests (i.e. ctest) through its debugger, so --break being in add_test() would work, but I'm not seeing a way to run ctest itself through the debugger.\nI'd also avoid needing to amend the config if launch.vs.json could specify to use the same arguments for everything, but I can't get the defaults section in it to do anything.. In a VS/CMake/OpenFolder project, \"Build->Run Tests\" (formerly \"Build->Run All Tests\") runs ctest.  (If there's changes, first running cmake and building.)  So if a project has multiple test executables marked as add_test() it will run all of those executables.\nIt's not often I'm going to want to break into a debugger.  I wrote my own main that sets break to true, so I can run the individual executable through the debugger to get it to break.  That's not much additional work, and won't happen often at all.. Thanks!  Compiles clean in a file including it without #define CATCH_CONFIG_MAIN.  With the define, of course, has the other warnings still.. @horenmar, I use /Wall and explicitly disable warnings that I'll never want to know or do anything about (4820, padding added for alignment, etc.)  I respect if a library doesn't want to be /Wall compliant, but usually hope they will be.  So, I'll open up dedicated issues but respect if it becomes a \"won't fix\".\nc672512 does take care of those warnings.. ",
    "SeanCline": "Excellent!\nThanks for taking the time and fixing things up. When I get a chance, I'll have to fetch the dev branch and take it for a spin.\n. Try something like: CHECK_THROWS_AS(expression, OutOfRangeException);\nIt is mentioned on the Assertion Macros page\n. I approached @philsquared about this via email a few months back for my own prototype of a Visual Studio test adapter. https://github.com/SeanCline/CatchVsTestAdapter\nIf I recall, his response was that he'd like to have multiple test listers that register themselves, similarly to how reporters currently do. (See catch_reporter_registry.hpp for a starting point in understanding how that works.)\nI started implementing an xml test lister in addition to factoring out the current logic into a console lister. Unfortunately, I didn't end up getting it to a point where I was comfortable submitting it as a pull request.\nI'd be curious to see Phil chime in about what it would take to get this feature added.\n(At the very least, maybe we should consider combining efforts on a single Visual Studio extension.)\n. ",
    "wimrijnders": "I just upgraded to the latest version of CATCH. After some minor adjustments, the following compile errors occur:\n\u2018Catch::AutoReg {anonymous}::autoRegistrar67\u2019 previously declared here ...\n\u2018void ____C_A_T_C_H____T_E_S_T____67()\u2019 previously defined here ....\nredefinition of \u2018Catch::AutoReg {anonymous}::autoRegistrar67\u2019 ....\nredefinition of \u2018void ____C_A_T_C_H____T_E_S_T____67()\u2019 ....\nLooks like the same error with a different generated naming scheme for the test cases.\n. Have been testing a bit, I draw the following conclusion:\nI have spread out my test cases over several includes. In two of these, test cases happen to be defined on the exact same line number. Since method names are made distinct using the line number, the error occurs.\nI know this won't happen very often, but when it happens it's a totally confusing error. For me, it is useful to make logical subdivisions of tests into separate include files. I would appreciate it if this is possible without having to run into these kinds of issues.\nCould you fix it so that generated method names are unique over included files as well? Would be appreciated.\n. 'Meant to be' - I think it's fine if this is documented properly. I see, however, no reason why include files shouldn't work.\nI'll have a spin with cpp files, to see if this resolves the issue.\n. martin, many thanks for responding. This works so much better when you don't have the feeling you're speaking to a wall.\nI remember from the previous version that the recommendation was to split into .hpp files. Perhaps the statement got removed. In any case, I tried using .cpp's instead of .h's.\nI included \"catch.hpp\" into the new .cpp, by necessity since you need the test case define's. The following happens:\n/src/unittest_support.o: In function `SourceLineInfo':\nUnitTest/catch/internal/catch_common.hpp:53: multiple definition of `Catch::SourceLineInfo::SourceLineInfo(char const*, unsigned long)'\n/UnitTest/catch/internal/catch_common.hpp:53: first defined here\n./src/unittest_support.o: In function `ScopedMessage':\nUnitTest/catch/internal/catch_message.hpp:30: multiple definition of `Catch::ScopedMessage::ScopedMessage(Catch::MessageBuilder const&)'\nUnitTest/catch/internal/catch_message.hpp:30: first defined here ./src/unittest_support.o: In function `~ScopedMessage':\n...\nWhich makes sense, since the entire definition of CATCH is in that single include file.\nSo, using multiple CPP's means that the definitions only should be imported from catch.hpp. Perhaps there's a #define for this.\n. Working. Thanks for the tip.\nSo I have a main file with:\n```\ndefine CATCH_CONFIG_RUNNER\ninclude \"catch.hpp\"\n```\nIn which I define a custom main(). The rest of the cpp's have just:\n```\ninclude \"catch.hpp\"\n```\nThis is almost intuitive; I can live with this. I say almost because I initially added the #include \"catch.cpp\" to a common include file, which didn't work. The #include needs to added to the file itself.\n. Hi PureAbstract,\nI can sort of comprehend why my remark prompted your caustic reaction. The remark was not meant like that at all, and my remark was upon writing devoid of all sarcasm you are assigning on it. I'll elaborate.\nI'm a programmer myself and understand perfectly the hardships of properly maintaining code. If anything, I have the utmost respect for groups who manage to do so. Since I rely heavily on work done by others, I go out of my way to contact maintainers in question to communicate issues I run into. I also do pull requests if I find it worth the trouble. It's my way of paying back for the use of given software.\nNow, when I report issues like I did here, the usual response is nothing whatsoever. I was pleasantly surprised to get a serious response so soon here, which prompted me to, let's say 'blurt out', the thing I did. Regard this as a personal, candid observation of your activities in a much larger landscape. It was, in fact, meant as a compliment. You, meaning you as the maintainer group, took the trouble to respond.\nNow, I don't take action when I don't think a given package is worth using. I'm quite content with CATCH and if I find it worthy of evolving in the direction of perfection. So, if I run into an issue, however small, I will indeed report it. Put in another way, if this software sucked I would have just chucked it overboard and you would have never heard of me.\nSo if you bother to write something like: \n\"This works so much better when I have some respect for the time of those who have provided me with a really rather good test framework\"\n....it comes over silly to the point of ridicule, because that's exactly how I think about this framework. You knee-jerk reaction to think the opposite make me want to enquire about the length of your toes, this coming from a dutch proverb implying a proportional corrrelation between toe-length and inability to handle criticism.\nAbout the #254: hey great, somebody else ran into the same problem. If you just said that  without the preamble, my gratitude would be tangible.\nAnd the documentation remark is off the mark.....but okay, I'll let that rest. \nHere's your thought of the day: how much value do you place on a happy, active and evangelical user base? Because you're doing it wrong. For now, I'll assume you're having a bad day.\n. Thanks for your help Martin. Upvote for you. I consider this issue resolved for my personal situation. I hereby close it.\n. Hi guys,\nJust dropping back in to tell you what a great job you did.\nI've converted my entire test suite to the new version, this entailing:\n- Converting .hpp's to .cpp's\n- Using the new tag format\n- Small stuff too trivial to mention\nAfter some initial grumbling due to the breaking changes, I now find that I'm pretty happy with the new things. I like the tag syntax and the way it's used on the command line, the output is sexy (even though eclipse can't handle it - console is just fine though) and the compilation speed is stellar compared to previous.\nAs a side effect, I was forced to refactor the whole test stuff, which on the whole improved the code.\nAll round kudo's to you all. That emphatically includes you too PureAbstract. I have no grudge against you.\n. I concede that this is a shortcoming of Eclipse. I can run the resulting app fine in a console and it actually looks cool. It's just damn handy to run the unit test within the Eclipse IDE, saves some context switching.\nI'll just try out running the unit test in a console for now, to see if I can live with it.\n. Got the develop branch and tried it out, can confirm it's working.\nThis works for me, a warm thank you for implementing this non-critical feature. As a bonus, some Eclipse error messages concerning Code Analysis have disappeared. I'll stick to the develop branch for now.\nThanks, this is issue is done.\n. Glad to understand I'm not the only one who ran into this.\nKeep up the good work! CATCH is easily the best C++ unit testing framework I've used. As far as I'm concerned, it's only a matter of time till it goes mainstream.\n. Wrt my last post here:\nhttps://www.youtube.com/watch?v=Bfn9hA-3n6k\nAt 31:15, the guy speaking, Kirk Shoop, Microsoft programmer, 'can't recommend CATCH highly enough'. It's a beautiful plug for the project.\nSo I stand corrected. CATCH is mainstream already. Happy for you!\n. Let me check that...no -W flags on at all, but perhaps it's on by default.\nEDIT: You sure about that? Relevance I mean. They do say that the method of passing parameters will change. Looks like breaking to me.\nEDIT2: Recompiled with -Wno-psabi, can confirm that the warnings disappear. I'll just keep that in the build. Since you don't appear to be worried, I think we're done here. Thanks for your time!. OK, that's interesting to know. So, as long as you don't mix different compiled versions you're safe. It also means that the project where the warning occurred is safe, but I can imagine other projects running into issues.\nThanks for the info! TIL.. ",
    "articuluxe": "I know this is an older issue, sorry.  But would it also be possible to disable the color if the TERM environment variable=\"DUMB\"?. ",
    "jamiebullock": "@PureAbstract agree. I've submitted a new PR, which builds on your previous one. Hopefully this will get accepted.\n. Closing as improved PR will be submitted\n. ",
    "kirkshoop": "FYI This hack works.\n```\ninclude \nnamespace std {\ninline bool uncaught_exception() noexcept(true) {return current_exception() != nullptr;}\n}\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\n```\n. Hi @philsquared,\nFYI - This is keeping rxcpp from compiling on both vs2017 and vs2013. rxcpp is kept warning clean by making warnings errors that fail the build. The catch version we use now works for vs2013, but not vs2017. The latest catch version works for vs2017 but breaks vs2013.\nThanks!. Validated 2013 and 2015, now I will start running 2017.\nThank you!. ",
    "ecorm": "I was testing code that makes use of std::exception_ptr and ran into a situation where the test case would be repeated infinitely for mysterious reasons. kirkshoop's hack fixed the problem (and restored my sanity). I'm using gcc 4.8.2 on Linux Mint.\n. For very long loops, give a single boolean expression to CATCH, instead of an A == B expression:\nfor (size_t i = 0; i < element_count; i++)\n{\n    CHECK( (array.size() == i) );\n    array.push_back(42);\n}\nThe extra set of parentheses will make array.size() == i appear as a single boolean expression. Of course, if the assertion fails, you will lose the nice textual information on the LHS and RHS values. The INFO and FAIL macros can be useful in obtaining more diagnostic information on a failure.\n. Do you really need to check all 64*1024*1024 permutations? Couldn't you just check corner cases, with a few spot checks in between? You might also consider some kind of mathematical proof by induction.\n. ",
    "ryanhaining": "I had not, though that would have saved me a lot of time haha.  I'll keep an eye on this group from now on.\n. Quite true.  I see that the semantics of toString may change though, so these docs could prove incorrect.  I haven't figured out catch can't see operator<< unless it's in the type's namespace\n. ah I see, well then feel free to scrap this! it was as much for me as anyone else.  I'll keep in mind that toString may well change so thanks for the heads up\n. I was considering implementing toString for std::pair and std::tuple(c++11 only) as another pull request, but if toString is going through a major change I'll wait it out\nedit: I just saw there's another pull request already doing the same, so nevermind me.\n. Yeah that all looks perfect, thanks!\n. ",
    "fsolenberg": "+1\nLike the lightweighted-ness of Catch, but this is a necessity for a test framework IMO - I often make an implementation which is stupid, slow, straightforward, write an exhaustive test for it, then re-implement in an efficient, less-obivous way.\n. One thing that bugs me with this proposal is that it doesn't allow different ways of constructing the object to be tested - they would all have to be constructed the same way. In that sense, I think it would become a framework type solution, which I would have to work around for some scenarios.\nI like how straightforward it is to use SECTIONs in Catch. Another way to approach typed tests would be to do something similar for the setup/teardown as well? Such as:\n```\nTEST_CASE(\"foo\") {\n  INIT_SECTION(\"reference\") {\n    reference_impl foo(\"bin/coeffs_ref\");\n  }\n  INIT_SECTION(\"optimized\") {\n    optimized_impl foo;\n  }\nSECTION(\"bar\") {\n    REQUIRE(foo.size() == 32);\n    REQUIRE(foo.bar({1, 2, 3, 4}) == 76);\n    ...\n```\nSo the actual set of tests to run would be the cartesian product of INIT_SECTIONs and SECTIONs (there's likely a DEINIT_SECTION as well, and sure, the naming can be discussed). I haven't looked at the Catch source so I have no idea whether this is feasible or not. \nThen TEMPLATE_TEST_CASE_2, referred to above, would become:\nTEST_CASE(\"test a vector for all supported types\") {\n  INIT_SECTION(\"int\") {\n    std::vector<int> vec;\n  }\n  INIT_SECTION(\"float\") {\n    std::vector<float> vec;\n  }\n  REQUIRE(vec.size() == 0);\n}\nYes, a little bit more verbose, but nothing that can't be folded into another macro. :) e.g.:\nTEST_CASE(\"test a vector for all supported types\") {\n  INIT_SECTION_TYPES(int, float) {\n    std::vector<T> vec;\n  }\n  REQUIRE(vec.size() == 0);\n}\nThat's one idea.\n. @wichtounet Thanks for pointing that out.\n. Yes, you're right, looking through the code now I can see my suggested approach would require quite heavy-handed restructuring, and when I think about it, wonder if it is at all possible?\nWhile the template specialization would get the job done, this is exactly the type of work around I was referring to - the framework dictates how the code must be written, it's not me in charge anymore, and readability suffers. Ho-humm...\n. ",
    "wichtounet": "+1\nI just found the need for this in one of my library that is tested with Catch, that'd be great to have in Catch directly :)\n. @garethsb This works like a charm :) I add to change CATCH_TEST_CASE to TEST_CASE and CATCH_SECTION to SECTION though, this may come from different version of Catch. Thanks a lot. I will definitely use it in my template math library. \n. @fsolenberg Could you check your formatting ? All the angle brackets have gone away. \n. @garethsb Finally, there seems to be something wrong in your implementation. Now that I have many templated test cases, some of them are not always launched :s I have added some prints into some of them and I don't see the prints. I've also add REQUIRE(false) into some tests, but that does not show anything on the console rather than all tests passed... I didn't have these kinds of issue before using template_test_case_2. Looking at the proprocessed code, I cannot find anything wrong, but I'm nowhere near a Catch pro. I have about 500 test cases and almost all of them are templated, could I be hitting some limits ? \n. I also came to the same conclusion :) Simply adding static to the template function fixed the issue :)\n. > There is one other issue with @garethsb's proposal as written: that SECTION within the templated function will only get executed once! What you need is some way of disambiguating it for each invocation. What I usually do is pass an additional string that gets concatenated to the SECTION name (or used as the name entirely).\nI don't get the issue here. We only need each section to be executed once since there is a section for each template type and each section simply calls the templated test function with the correct type. No ? \n. @philsquared Sorry, I think we are not talking about the same thing :s I was referring to the TEMPLATE_TEST_CASE_n and you were referring to the simpler example for March 17, sorry. \n. ",
    "den-mentiei": "Any ETAs/progress status on this feature in your branch? I need this and have time to help :)\n. ",
    "jvitku": "OK, I've also felt like this is a problem rather in the Eclipse CDT indexer, so there it is. We'll see.\n. ",
    "RomainGoussault": "Same issue here\n. Same here, I tried https://github.com/philsquared/Catch/pull/393 solution and it worked on Eclipse Luna, Ubuntu\n. Same here, I tried this and it worked on Eclipse Luna, Ubuntu\n. ",
    "chvillanuevap": "@kentsangkm's solution in #393 worked for me on Eclipse Luna.\n. I tried this and it worked on Eclipse Luna.\n. Is this different from using MPI_* functions in the tests? Actually, can we use MPI_* functions with Catch at all?\n. That is not a bad idea. I usually need to enter more keywords into my\nGoogle search to find the right information; for example, 'catch unit\nframework'. Or I simply need to restrict my search to GitHub with 'catch\ngithub...'.\n+1 on this. I like the sound of CppCatch or Catch++\nOn Wednesday, April 22, 2015, VZ notifications@github.com wrote:\n\nThis is not the first time I run into this and I always just shrugged it\noff before, but after completely failing to find anything about the issue I\nwas interested in (whether anybody has already done something to help with\nmigrating the existing tests using CppUnit to CATCH) I have to say that\nthis is a real problem: it's just impossible to find anything about\nCATCH using web search.\nIt needs to use some unique name or at least not a word so prevalent when\nspeaking about unit testing in C++ (because I'm not interested in finding\nabout how to catch exceptions in CppUnit, damn it).\nIt can be anything you like, I don't know if you prefer obvious but dull\nnames (CppCatch, CatchUTF, ...), some other abbreviation (C++ Automated\nTests Now Are Possible) or stupid puns (Notry, Dogch, ...) or hopefully\nsomething better I can't find, but it needs to be something you could enter\ninto your search engine and actually find something related to CATCH.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/406.\n. @paolobolzoni That's sort of the point though. You need to enter additional keywords to find this framework.\n\nTry typing just 'cppunit' instead. You find that framework right away. No additional keywords. The same will not occur if you just type 'catch'.\n. Yes, getting the GitHub repository as the first result in Google is not that hard. I agree.\nHowever, what if I want to find additional tutorials or examples people have posted on their blogs? Or comparisons of the framework against CppUnit, Google Test, Boost, etc? Compare the results of 'catch review' vs. 'cppunit review', or 'catch tutorial' vs. 'cppunit tutorial'.\nAgain, I understand that typing one or two additional keywords fixes the issue. But doing anything that makes it easier for the user to find information is a win. \n. Even though \"catfish\" already returns 30 million pages in Google, I believe it is a good name.\nThe problem with Catch is that \"catch\" is a verb that can be used in the context of any unit test framework. For example, \"catch c++ unit test\" returns pages related not only to the Catch framework, but to other ones as well.\nIt is highly unlikely that \"catfish c++ unit test\" will return pages related to anything but to this framework.\n. ",
    "manu-m": "The problem exists since version 1.7.1 again. Is there a chance to \"fix\" it again in Catch, although in real it is an eclipse problem?. @horenmar Yes I am sure. I checked it two times again. The message doesn't appear in eclipse while working with Catch 1.7.0 but appears while working with 1.7.1. I am surprised, too.. @horenmar Thank you very much for your extremly fast reply! But unfortunately the attached version still produces the error. Do have another idea or solution related to this problem?. ",
    "shoooe": "Apparently adding a + in from of inom::detail::strtoi<'0'>::value solves the problem.\n. ",
    "bcachet": "Hello\nIs there any news about generators ?\nI tend to have the same approach but actually it's not working.\nGenerator will be the best solution for this purpose.\n. ",
    "Ezodev": "I can confirm this issue. REQUIRE(sth == nullptr) fails, REQUIRE(sth == NULL) works correctly.\n. I'm using last single header version.\nIt's possible that my Visual Studio have a problem. I'm trying to create new project, and it doesn't see included files, even if they are in include patches. So, maybe it's just that VS is broken.\n. ",
    "vpashka": "In any case, for information..\ngcc version 4.7.2 (linux)..\n..\nusing namespace std;\n...\nCHECK( ib.cdiagram == nullptr );  and REQUIRE( ib.cdiagram == nullptr ); \nworks correctly.\n. Try this:\n./tests -- --foo=bar\nbefore \"--\"  the arguments for catch\nafter \"--\" for your program\n. do you enable c++11?\n. ## +1\ngcc --version\ni586-alt-linux-gcc (GCC) 5.1.1 20150618 (ALT Linux 5.1.1-alt2)\n. I mean, I have the exact same problem and her decision, I do not know yet.\n. I'm sorry .. I think there was some internal error. Now g++5 normal compiles my tests.\n. sorry .. but I think it is the same ..\nhttps://github.com/michaelbprice/Catch/commit/c4661a04e1cd5140c596aff8081d9a5af9bd8044\nfrom\nhttps://github.com/philsquared/Catch/pull/493\n. Good. Then I close.\n. > > The return value is false \n\n\nCHECK_FALSE(...)  ?\n. I use the catch in my project, which should be compiled for different versions of the distribution with different versions of catch (1x and 2.x).\n\n\nFor example:\nif CATCH_VERSION_MAJOR == 2\n    int returnCode = session.applyCommandLine( argc, argv );\n\nelse\n    int returnCode = session.applyCommandLine( argc, argv, Catch::Session::OnUnusedOptions::Ignore );\n\nendif\n. This is not a big problem, but I think it would be convenient...\nP.S. In any case, many thanks for 'catch'. It`s great project.. )\n. Many thanks!. ",
    "randomPoison": "I'm using the latest version of the single header build (53). Adding CATCH_CONFIG_CPP11_NULLPTR caused the build to succeed.\n. ",
    "MichaelSchmittQM": "What about https://github.com/philsquared/Catch/pull/454?\n. \ud83d\udc4d\n. ",
    "usq": "454 solves my xcode integration problem! @philsquared accepting the pull request would be awesome ;)\n. Any news on this issue?. ",
    "fish2000": "@usq @philsquared strongly agree \u2013 I get a lot of mileage out of Catch for Objective-C++ unit testing but having this integration would be fantastic.\nAs for Swift: a lot of library code is getting retrofitted with _Nonnull qualifiers in order to be fully Swiftable; I for one would find it certifiably worth the effort (which admittedly is easy to say when the effort isn\u2019t mine, erm) but yeah Catch and XCTest could be the chocolate and peanut butter of the impending Swift parifait, so to speak.\ntl;dr: \ud83d\udc4d\ud83c\udffd\n. ",
    "ruipacheco": "Perfect.\n\nOn 27 Jan 2015, at 07:59, James Wilkinson notifications@github.com wrote:\nDid you try running with --success ?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/philsquared/Catch/issues/373#issuecomment-71598395.\n. What's the state of this? Is there documentation?. If the tests pass shouldn't it be a question of merging this?. Do we have an ETA for the release of this feature?. +1\n. -fno-exceptions would be nice.\n. No way to just return? \nOn 8 Apr 2018, at 14:42, Martin Ho\u0159e\u0148ovsk\u00fd notifications@github.com wrote:\nYou can do that already via -e, --nothrow skip exception tests. This allows you to also skip test cases tagged with [!throws].\nThe problem with -fno-exceptions is that REQUIRE throws an exception upon failed assert and the standard solution to that is to call abort instead.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/catchorg/Catch2/issues/703#issuecomment-379547706, or mute the thread https://github.com/notifications/unsubscribe-auth/AAfK7yRPreLQU5cwtUE0iNgnuQoisybLks5tmgXPgaJpZM4Js-7e.\n\n\n. Bubble up error codes?\n\nOn 8 Apr 2018, at 21:41, Martin Ho\u0159e\u0148ovsk\u00fd notifications@github.com wrote:\n@ruipacheco https://github.com/ruipacheco Just returning works for assertions directly inside a test case, but assertions are specifically intended to support nested function, e.g. this\nvoid check_bits(uint32_t val) {\n    REQUIRE(val & 1 == 1);\n    REQUIRE(val & 2 == 0);\n    REQUIRE(val & 4 == 4);\n}\nTEST_CASE(\"foo\") {\n    uint32_t val = getval();\n    check_bits(val);\n}\nthe only way to support this is via exceptions, or exception-like mechanism. This leads to the problem where the only way to support -fno-exceptions is to hard abort on failed assertion, which is... suboptimal for a test framework.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/catchorg/Catch2/issues/703#issuecomment-379576651, or mute the thread https://github.com/notifications/unsubscribe-auth/AAfK72ESKdHGaQ1CUREEAKFFakP539FCks5tmmfQgaJpZM4Js-7e.\n\n\n. when do you think Catch 2 will be released?\nSent from my iPhone\n\nOn 6 Jan 2017, at 20:05, Phil Nash notifications@github.com wrote:\nRight now @lightmare's suggestion is pretty sound.\nThe plan is to integrate a data generators system, which is somewhat similar to the parameterised tests that @Bu11etmagnet mentions - but also the basis for property based testing.\nWhile I've done a lot of preparatory work on that it's currently deferred to the upcoming Catch2 version.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I'll wait for Wednesday and close this ticket. Thanks!. Works for me.. Thanks!. That's it.. I'm thinking about this old issue. I guess I can close the current issue, no?. Many thanks!. I'm finding myself rewriting the same test twice when only a small detail of the configuration parameters changes. Are there any news on property based testing with Catch 2?. @philsquared Sorry for bringing you here like this, but am very curious about the progress of this feature.. Thanks, I'll close the issue.. Any news on property based testing?. I hadn't thought about the SECTION separation though.\n\nI still think an Environment setup/teardown is important - I was toying with GoogleTest and what made me decide to continue migrating my tests to it is, besides the parameterised tests, the ability to setup and clean external resources like databases on each test run.\nAlso, is code placed after a section called immediately after that section?\n. Never heard of it. Please let me know when it's done, I might not migrate to gtest then. Save me a lot of trouble.\nAlso, erm, do what? Environment clean up or clean up after each section?. I know nothing about the reporter pipeline. Is there any documentation for it? Btw, this is very interesting.. Going through the code, and judging only by the method names, I'd love to be able to overload these methods: https://github.com/philsquared/Catch/blob/bc68b9f454021455f35fc005e59663a62ed71bca/include/internal/catch_interfaces_reporter.h#L223\nThis would be exactly what I want.. This is excellent, exactly what I needed. I'm going to have more questions but I'll wait for the documentation.\nThis may put an end for my need for parameterised tests and if testRunStarting/end behaves as I assume it does (what is a test run?) I'll just not move to gtest at all.. I just need them to setup and clean data.\nVery surprised this was lurking in the code all along. Can't wait for the docs.. This is absolutely perfect. No more need for parameterised tests or environment setup/teardown. And it behaves very much like Python, at least the granularity.\nStill shocked this secret weapon was hidden since 2015.\nClosing this ticket with a big smile.. One more question: in gtest the properties of classes used in parameterised tests are available for each test. Is there a way to do something similar by sharing values set on listeners?. You answered my question, thanks!. Github 500'd when I posted this so I opened the next issue.. I'd like to expand on this but can't do it right now. I'm going to close this ticket and open a more detailed one in a few days.. I have a similar issue. Sometimes I run my tests on an IDE and stop once I notice something. I'd like Catch to run any tear down code I defined on my listeners when that happens otherwise I have to do it by hand.. > You just use SECTIONs within a TEST_CASE, and each SECTION will be like a test case in a framework with fixtures. You can then do your setup and teardown (although, typically, less need for the latter in C++) outside the SECTIONs.\nHow is this achieved? So any code I call before and after a section is executed as setup/teardown?\n\nIf you prefer the more XUnit style of fixtures [...]\n\nI'm sure I'm missing something but how would you make a fixture fire on setup/teardown?. > By which I mean: you could use Listeners for that - but that's not what they're for - and is certainly not the best way to do it.\nI remember discussing Fixtures with you and I always had in mind setup/teardown. What should they be used for then?. @philsquared I was thinking of this issue I opened where you say I should use Listeners. Listeners are great but they're limited to the main() file and that will get confusing very quickly, at least to me.\nI may have misread what you said but I'll try to use TEST_CASEs for now.. I'm happy closing this issue.. This is perfect, thanks!. Thanks!. ",
    "kristopherjohnson": "I'd like a --force-no-colour option. When running in CLion, apparently isatty() returns true but the output has the ugly escape characters.\nI don't mind writing the patch myself, but is there a way to force non-colourised output already?\n. My --no-colour patch is here: https://github.com/philsquared/Catch/pull/502\n. ",
    "rioderelfte": "The link error is not caused by a problem in Catch but by a recent change in clang (see commits 229241 and 229597). If you want to use clang-3.7 in C++14 mode you either have to update your standard library or compile your code using the -fdefine-sized-deallocation flag.\nThis is also mentioned on the C++ status page of clang.\n. I have already created a pull request in Clara to fix this problem: https://github.com/philsquared/Clara/pull/17\n. You could simply use an if:\nc++\nif (good_node(node)) {\n    REQUIRE(node.value1 == expectedvalue1);\n}\n. You could capture the parameters at the beginning of the helper function using the CAPTURE macro. If a REQUIRE inside the helper function fails the values of the parameters will be included in the error message.. ",
    "Luthaf": "They do have the expected effect. Thanks !\nI just ran into a small bug in the single include header : https://github.com/philsquared/Catch/blob/develop/single_include/catch.hpp#L1237-L1238, the comment opening is missing.\n. ",
    "lweberk": "Hi,\nTo put it in as few words as possible; too much clutter. The longer version (sorry for the formatting, can't find a way around markdown going haywire):\ni.E. looking at (output of \"-s\"):\nrun_catch is a Catch v1.0 b10 host application.\nRun with -? for options\n\nConnection can be established\nbuild.tests/TestConnection.cpp:12\n...............................................................................\nbuild.tests/TestConnection.cpp:21: \nPASSED:\n  REQUIRE( conn.is_connected() )\nwith expansion:\n  true\n\nScenario: data can be queried, inserted and updated\n     Given: a new object at pre-insert\nWhen: accessing a member without previously being set\nbuild.tests/TestDatalayer.cpp:60\n...............................................................................\nbuild.tests/TestDatalayer.cpp:76: \nPASSED:\n  REQUIRE_THROWS_AS( name << client.name )\n\nScenario: data can be queried, inserted and updated\n     Given: a new object at pre-insert\nWhen: inserted without previously setting non-serial pkeys\nbuild.tests/TestDatalayer.cpp:60\n...............................................................................\nbuild.tests/TestDatalayer.cpp:80: \nPASSED:\n  REQUIRE_THROWS_AS( conn << client )\n```\nI'm running these tests for the Nth time, and would only require expansion details if it failed, otherwise It just hinders me from seeing those who passed even if they very explicitly say so. Its just, that the eye needs to pick out the relevant information from a very verbose structure.\nLets hipothetically consider a more condensed output telling me the same while sparing me details (taken from the second test output above):\nScenario: data can be queried, inserted and updated\n     Given: a new object at pre-insert\n      When: accessing a member without previously being set  <<< imagine in green (because it is the actual passed test while \"scenario\" and \"given\" are only the premise). Also imagine without separator hlines. It would look like:\n```\nScenario: data can be queried, inserted and updated\n     Given: a new object at pre-insert\n      When: accessing a member without previously being set\nScenario: data can be queried, inserted and updated\n     Given: a new object at pre-insert\n      When: inserted without previously setting non-serial pkeys\n```\nImagine \"When\" statement preceeded lines in green. If a test fails (only then), imagine hlines and expansion as is right now.\nThis way you can ignore what is to be ignored and focus on the actual error. Currently there is little difference to tell them apart other than the green \"PASSED\" embedded within 11 lines of visually uncoded information. Which stays almost the same (11 lines) in a failed case.\nOn the other hand, the alternative output does not show anything unless it fails. In our case we want to use the output to pass on the scenarios to the tech-savy-but-not-devs, so they are up to date on the requirements they want seen are met and logically sound. Bascially BDD system testing with output as communication interface to pseudo-customers.\nPlease take this as an analisis of introspecting how my brain and eyes try to go through the output, and not criticism. One can get used to anything and deal with any type of information output (so the current output actually does for me), I just have the feeling that there is still room for improvement to achieve an easier \"seeing without having to look\" and a way to use the same output to communicate specifications of what you are building.\n```\n. Nope, I mean a short form. Not staying quiet, but displaying if it passed or not in only 1 line. In case of test scenarios or BDD, without repeating the scenario/given part;\nScenario: scenario1...\n     Given: under condition 1...\n     When: some situation 1\n     When: some situation 2\n     When: some situation 3\n...\n. ",
    "hynner": "Ok thanks, I didn't know that. Closing the issue.\n. ",
    "jh3141": "(For the motivation behind this, see how I use the forked version here: https://github.com/jh3141/kind-lang/blob/master/tests/main.cpp)\n. ",
    "dcoeurjo": "Hi all, I've tested @garethsb 's PR in my project and it works perfectly. I'd love to see this feature included in the Catch master...\n. ",
    "zpgaal": "Here is another alternative for the templated \"fixture\". \nPlease consider adding it too.\n```\ndefine INTERNAL_CATCH_TEST_CASE_METHOD_TEMPLATE_DEFINE( TemplateClassName, Scope )\\\nnamespace { \\\n    struct INSTANCE_CATCH_##Scope { \\\n        template<typename TestType> \\\n        struct TemplateTest : TemplateClassName<TestType> { \\\n            void test(); \\\n        }; \\\n    }; \\\n} \\\ntemplate<typename TestType> \\\nvoid INSTANCE_CATCH_##Scope::TemplateTest<TestType>::test()\n\ndefine INTERNAL_CATCH_TEST_CASE_METHOD_TEMPLATE_REGISTER( Scope, TypeInstance, name, desc )\\\nCatch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar ) ( &INSTANCE_CATCH_##Scope::TemplateTest<TypeInstance>::test, #Scope \"<\" #TypeInstance \">\", Catch::NameAndDesc( #name \" <\" #TypeInstance \">\" , #desc ), CATCH_INTERNAL_LINEINFO );\n\ndefine CATCH_TEST_CASE_METHOD_TEMPLATE_DEFINE_SCOPE( TemplateClassName, Scope )    INTERNAL_CATCH_TEST_CASE_METHOD_TEMPLATE_DEFINE( TemplateClassName, Scope )\ndefine CATCH_TEST_CASE_METHOD_TEMPLATE_DEFINE( TemplateClassName )                 INTERNAL_CATCH_TEST_CASE_METHOD_TEMPLATE_DEFINE( TemplateClassName, TemplateClassName )\ndefine CATCH_TEST_CASE_METHOD_TEMPLATE_REGISTER( Scope, T, name, Desc )            INTERNAL_CATCH_TEST_CASE_METHOD_TEMPLATE_REGISTER( Scope, T, name, Desc )\n```\nUsage:\nCATCH_TEST_CASE_METHOD_TEMPLATE_DEFINE( MyTest ) { \nTestType t;\n...\n}\nCATCH_TEST_CASE_METHOD_TEMPLATE_REGISTER( MyTest, float, \"Geometry predicates - float\", \"[geometry]\" )\nCATCH_TEST_CASE_METHOD_TEMPLATE_REGISTER( MyTest, double, \"Geometry predicates - double\", \"[geometry]\" )\n. Unfortunatelly my soultion has some other drawback (and all derivation based alternatives). Using gcc and other similar compilers, typedef defined within the fixture cannot be access directly from the test function.\ntemplate\n  struct B { typedef int How_To_Acess_This_From_A_t; };\ntemplate\n  struct A : B { test() {...} };\n. ",
    "akosenkov": "How about using this trick to get rid of the trailing _n in TEMPLATE_TEST_CASE?\nhttp://efesx.com/2010/07/17/variadic-macro-to-count-number-of-arguments/\n. ",
    "nicola-gigante": "@garethsb Hi, I'm reading at the code and I don't understand how it is supposed to work.\nYou define this macro and the corresponding \"DEFN\" one:\n```\ndefine INTERNAL_CATCH_TEST_CASE_TEMPLATE_DECL( T ) \\\ntemplate \\\n static void INTERNAL_CATCH_UNIQUE_NAME( _CA_T_C_HT_E_M_P_L_A_TE_TE_S_T )();\n```\nAt the end, INTERNAL_CATCH_UNIQUE_NAME will be expanded three times and you should get three different names. What am I missing?. ",
    "garethsb-sony": "@nicola-gigante The technique relies on the fact that those two INTERNALmacros are ultimately expanded on the same source line so that __LINE__ evaluates the same in both cases. There are several existing Catch macros that also use repeated instances of INTERNAL_CATCH_UNIQUE_NAME to produce the same name a number of times.\nThe code of this PR, plus some other small Catch extensions, is in a self-contained Catch/Google Test/Boost Test single-header shim being used e.g. here: https://github.com/sony/nmos-cpp/blob/master/Development/bst/test/test.h\nBest regards,\nGareth. I updated the [CATCH_]TEMPLATE_TEST_CASE_n macros work with Catch 1.10.0. I've pushed this to the repo at https://github.com/sony/nmos-cpp/blob/7c1ed9dc/Development/bst/test/detail/catch-1.10.0.h#L74.\nI won't update this PR unless a Catch maintainer wants it.\n. Thank you, @horenmar. \n\nDo I understand this correctly, that with CMake < 3.10.0 I cannot use catch_discover_tests multiple times, since that will always trigger the fatal error \"Cannot set more than one TEST_INCLUDE_FILE\"?\n\n@sonOfRa, short answer to your question is Yes, that's true.\nIf there is a CMake 3.9 compatible implementation that allows this, we'd be very happy to have a patch. But as far as I understand TEST_INCLUDE_FILES was added in 3.10.0 for exactly this reason, so I didn't go looking for one, just made it work for the simple case in 3.9.\n. When I wrote this version for Catch, I figured I'd focus on the tidier implementation possible with forthcoming (now, recent) CMake, with just the minimum of compatibility for old versions of CMake.\nMaintain a workaround or have to encourage people to be (relatively) up to date... it's a trade-off. :-). ",
    "dan-ryan": "\"configData().showDurations = Catch::ShowDurations::Always\" did the trick for me. Though breaking it down by using class names titles would make it easier to read. \nA total tally would also be nice. \n. \"What is the cause of the slowness at the moment?\"\nFor us (CricHQ), lots of tests. With a number of unused cores waiting to be used :)\n. \"What are you using to run your tests?\"\nWell that is up to the developer. I just run mine in the IDE which is Xcode or Appcode. We are looking at getting the tests to also run on CircleCI soon. \n\"Can you just have your runner start multiple test processes at once? \"\nThat is a possibility. But would be easier if the library automagically handled that all for you and made sure the logs still made sense, etc :)\nIt isn't a big deal atm, just a nice to have. Catch is much better than what we were working with previously (gtest). \n. Anyone else having trouble turning this option on? . ",
    "acki-m": "I am looking for a real benchmark tool.\nLike this:\nhttps://bruun.co/2012/02/07/easy-cpp-benchmarking\nOr take a look of all the features of the Qt benchmark suite:\nhttps://www.youtube.com/watch?v=IPnzBO0dbrw\nThis is not some minor feature, but it will be a great enhancement to catch.\nMost of the benchmark libs are not header only, when phil will get it to work also header only, that would be nice. But yeah, phil has to say something about this topic, if something like this will ever go into catch. \n@philsquared \nWill it?\n. What are you trying to tell me, that benchmarking libraries are useless?\nUnfortunately the maintainer doesn't want to say anything to this topic...so I have to look for other libraries which fill the gap.\n. with catch 1.2.1 it worked. With 1.5.7 I get now this error.\nCHECK( var.get_value<uint64_t>() == 3147483640 )\nith expansion:\n 3147483640 (0xbb9ac9f8)\n ==\n 3147483640 (0xbb9ac9f8)\nBut changing it to: 3147483640u\nCHECK( var.get_value<uint64_t>() == 3147483640u )\nit worked for me now...\n. ",
    "HaMster21": ":+1: for adding it\nAt the moment the master seems not to build correctly for my project when it did before. Referencing a tag as a dependency would make this much less of a probelm.\n. @philsquared I'm sorry, but I was mixing up your project with FakeIt which was the build error root cause. Catch still works fine, thank you for your work :+1: \nAs of the tagging of releases: I think that the convention master is always stable is fine, but still I think that tagged releases would be of help. I don't really like my builds including changed dependencies unnoticed, and I wouldn't be able to select a version of catch (i.e. for including it as version tag for the cmake module) as of now (pointing to a specific commit is bad practice :wink: ). Besides, GitHub makes it pretty easy to spot a new release in a starred project. And a Changelog is provided there as well.\n. ",
    "Syndog": "This worked great for me in Windows/Luna.  Thank you!  Hope it gets pulled into master soon.\n. @PureAbstract https://bugs.eclipse.org/bugs/show_bug.cgi?id=455501\n. ",
    "cinemast": "Hi!\nI would also very much appreciate such a feature. I am currently migrating a project from Boost-Test to Catch. This is the only feature I really miss in Catch.\n. I've created a macro for myself, that looks very similar:\n``` cpp\ndefine CHECK_EXCEPTION_TYPE(throwCode, exceptionType, expression) {bool thrown = false; try {throwCode;} catch(exceptionType &ex) { CHECK(expression(ex)); thrown = true; } CHECK(thrown);}\n```\nIt can than be used as the following:\n``` cpp\nbool check_exception3(JsonRpcException const&ex)\n{\n    return ex.GetCode() == Errors::ERROR_RPC_INVALID_REQUEST && ex.GetData().size() == 2;\n}\nCHECK_EXCEPTION_TYPE(client.CallMethod(\"abcd\", Json::nullValue), JsonRpcException, check_exception3);\n```\nThis has then the same semantics as the boost version of it. Maybe the same would be good for REQUIRE instead of check.\n. Great. Thank you very much for developing catch :+1: \n. Great! Thank you for implementing this.\n. Great, thank you!\nCould you also take a look about signing releases using GPG/PGP? That would be great.\n. I get that. But I really put more screenshots in there than required, to make everything as clear as possible. \nBasically its:\n- Generate a gpg key\n- download/create tarball\n- sign it using gpg\n- upload signature as attachment to the release.\nIf you have any questions, just conact me (also off list, my mail is on my github account site).\nThanks for considering it.\n. Nevermind, sorry false alarm. This was application context.\n. I am also facing the problem that catch based projects no longer build under arch linux, which currently uses gcc 5.2.0.\nSorry for the german error messages.\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_evaluate.hpp:43:17: Fehler: \u00bbnullptr_t\u00ab in Namensbereich \u00bbstd\u00ab bezeichnet keinen Typ\n     inline std::nullptr_t opCast(std::nullptr_t) { return nullptr; }\n                 ^\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_evaluate.hpp:165:58: Fehler: \u00bbtemplate<Catch::Internal::Operator Op, class T> bool Catch::Internal::compare\u00ab steht mit vorheriger Deklaration in Konflikt\n     template<Operator Op, typename T> bool compare( std::nullptr_t, T* rhs ) {\n                                                          ^\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_evaluate.hpp:159:44: Anmerkung: vorherige Deklaration \u00bbnamespace Catch::Internal { }::compare\u00ab\n     template<Operator Op, typename T> bool compare( T* lhs, int rhs ) {\n                                            ^\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_evaluate.hpp:165:53: Fehler: \u00bbnullptr_t\u00ab ist kein Element von \u00bbstd\u00ab\n     template<Operator Op, typename T> bool compare( std::nullptr_t, T* rhs ) {\n                                                     ^\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_evaluate.hpp:165:70: Fehler: expected primary-expression before \u00bb*\u00ab token\n     template<Operator Op, typename T> bool compare( std::nullptr_t, T* rhs ) {\n                                                                      ^\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_evaluate.hpp:165:72: Fehler: \u00bbrhs\u00ab wurde in diesem G\u00fcltigkeitsbereich nicht definiert\n     template<Operator Op, typename T> bool compare( std::nullptr_t, T* rhs ) {\n                                                                        ^\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_evaluate.hpp:165:76: Fehler: Ausdrucksliste als zusammengesetzten Ausdruck in Initialisierung behandelt [-fpermissive]\n     template<Operator Op, typename T> bool compare( std::nullptr_t, T* rhs ) {\n                                                                            ^\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_evaluate.hpp:165:78: Fehler: expected \u00bb;\u00ab before \u00bb{\u00ab token\n     template<Operator Op, typename T> bool compare( std::nullptr_t, T* rhs ) {\n                                                                              ^\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_evaluate.hpp:168:66: Fehler: \u00bbstd::nullptr_t\u00ab wurde nicht deklariert\n     template<Operator Op, typename T> bool compare( T* lhs, std::nullptr_t ) {\n                                                                  ^\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_evaluate.hpp:168:44: Fehler: Redefinition von \u00bbtemplate<Catch::Internal::Operator Op, class T> bool Catch::Internal::compare(T*, int)\u00ab\n     template<Operator Op, typename T> bool compare( T* lhs, std::nullptr_t ) {\n                                            ^\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_evaluate.hpp:159:44: Anmerkung: \u00bbtemplate<Catch::Internal::Operator Op, class T> bool Catch::Internal::compare(T*, int)\u00ab wurde bereits hier deklariert\n     template<Operator Op, typename T> bool compare( T* lhs, int rhs ) {\n                                            ^\nIn file included from /tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_expression_lhs.hpp:13:0,\n                 from /tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_result_builder.h:91,\n                 from /tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_capture.hpp:11,\n                 from /tmp/libjson-rpc-cpp/build/catch/src/catch/include/catch.hpp:34,\n                 from /tmp/libjson-rpc-cpp/src/test/test_stubgenerator.cpp:13:\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_tostring.h:56:38: Fehler: \u00bbstd::string Catch::toString\u00ab als andere Symbolart redeklariert\n std::string toString( std::nullptr_t );\n                                      ^\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_tostring.h:53:13: Anmerkung: previous declaration \u00bbstd::string Catch::toString(unsigned char)\u00ab\n std::string toString( unsigned char value );\n             ^\n/tmp/libjson-rpc-cpp/build/catch/src/catch/include/internal/catch_tostring.h:56:23: Fehler: \u00bbnullptr_t\u00ab ist kein Element von \u00bbstd\u00ab\n std::string toString( std::nullptr_t );\n. Thanks for the hints. I will try it and get back here.\n. Hi!\nI finally got to test the suggestions. For me, it was the missing g++ -std=c++11. I don't know why it worked with gcc version < 5. I did not add the compile flag there. Anyway, for me it works now.\n. ",
    "Xazax-hun": "The next level would be to have a declarative way of describing dependencies between tests. And when one is skipped or failed skip the dependent ones.\n. ",
    "aldanor": "This would be nice to have, I concur. // also using -d yes option\n. Same for me (GCC 5.2).\nIn my case, enabling CATCH_CONFIG_FAST_COMPILE upgrading to Catch v1.8.2 triggers a bajillion of -Wparentheses warnings that weren't there in the normal mode, and the build is in fact slower.\n(there were also a few of these spurious warnings with 1.7.2 version that I had to wrap in parens manually -- I couldn't figure out the logic behind those). Related: #565 . @philsquared Thanks! Hopefully those pesky warnings in CLion will go away.. Looks like the problem is in that catch doesn't know how to dump boost::optional to a stream.  It's weird it fails because including optional_io.hpp should (in theory) fix it.. ",
    "abhikeshav": "I think this would be nice to have as well. ",
    "izzyreal": "Same here. I think it's odd that by default you have no idea which tests are being run unless diving into the code.. ",
    "student-t": "Sorry, I didn't know it had one. Closed.\n. ",
    "BatmanAoD": "@zammbi What are you using to run your tests? Can you just have your runner start multiple test processes at once? ctest, for instance, provides this functionality.\n. ",
    "movitto": "I suspect this is one of \"those issues\" for this project are there is this and #681 and a few others wrt thread safety which is sort of along these lines.\nIn any case, I wrote a bash script to parallelize by process, it first runs the specified test runner w/ \"-l\" to get the tags, and then splits those up into the specified number of groups to be run as bash backround jobs (the script waits until everything is done before returning).\nTerminal output from failed jobs may be a bit intermangled (maybe not, depends on timing), perhaps these can be captured seperately and output serially once everything is done (just saying there is alot of room for improvement!)\nCome get it!. ",
    "mjscosta": "Hi, downloaded the latest catch.hpp, and installed it in the development environment, and its fine!!\nThe ubuntu package is a bit outdated ...\nThanks for the suggestion!\nRegards,\nMario \n. ",
    "cmaughan": "Me too...\n. You need to use -s to show successful test output....\n. ",
    "paolobolzoni": "I tried -s, but it does not like the BDD thingy at all.\nOn Tue, Jun 2, 2015 at 10:05 PM, Chris Maughan notifications@github.com\nwrote:\n\nYou need to use -s to show successful test output....\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/403#issuecomment-107947485.\n. It is possible I misread the documentation, but from the BDD-style section\nI'd expect the output to be\nScenario: vectors can be sized and resized\n     Given: A vector with some items\n      When: more capacity is reserved\n      Then: the capacity changes but not the size\n\ninstead I get the normal, non BDD output.\nSo, I guess: yes. It is missing the assertion output.\nOn Tue, Jun 2, 2015 at 10:12 PM, Martin Moene notifications@github.com\nwrote:\n\n@paolobolzoni https://github.com/paolobolzoni You mean you also get the\noutput for the assertions?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/403#issuecomment-107949237.\n. Thanks, to specialize Catch::StringMaker works fine and I like it more than the alternative as I can easily continue to compile catch separately.\nIt is strange it is not documented. However, to whomever will read this page, this is the code working:\n\n```\nstruct S { int a; };\nbool operator==(S const& lhs, S const& rhs) {\n    return lhs.a == rhs.a; }\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\ninclude \nnamespace Catch {\ntemplate<> struct StringMaker {\n    static std::string convert(S const& s) {\n        return std::to_string(s.a) + \" (inside an S)\"; } }; }\nTEST_CASE( \"new type\", \"[type]\" ) {\n    S t1;\n    t1.a = 1;\nS t2;\nt2.a = 2;\n\nREQUIRE(t1 == t2); }\n\n```\n. Strange, I always get this software as first result with: catch c++ test\n. I guess you feel the problem, but I really don't... Typing spaces or letters kinda looks the same to me, but if you dislike typing spaces so much, I get this software as first result also with catchtest.\n. I see the point now, perhaps making the official name catchtest (or something...) can indeed help.\n. Personally I stand for catchtest or catch++ or some variant like that.\nChanging the name completely with another real word does not really seems\nto help to the original problem too much. Sure catfish, unlike catch, is\nnot a c++ keyword, but in my opinion is not enough to solve the problems.\nOn Fri, May 22, 2015 at 9:04 AM, VZ notifications@github.com wrote:\n\nLosing the existing name is the largest drawback I see too, but OTOH it\nwill only increase with time passing and I still think that it's in the\nproject long term interests to change the name to be more search-friendly,\nso the sooner it will be done, the better.\nMaybe you could officially call it \"To Catch a Catfish\" (haven't you\ndreamed of following in Harper Lee's footsteps?) to ease the transition...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/406#issuecomment-104453877.\n. We are focusing in adding after catch or replacing the name, but what about\nprefixing? Like \"bugcatch\" or \"spookcatch\"?\n\nOn Fri, May 22, 2015 at 5:19 PM, Phil Nash notifications@github.com wrote:\n\n@mloskot https://github.com/mloskot I agree that \"renaming a\nwell-established project is hard\" - although I'm not sure if (done well) it\ncouldn't satisfy the majority of users. It certainly wouldn't satisfy\nall users - but then that's already the case!\nI think a good rename has the potential to satisfy more users than are\ncurrently satisfied. That's by no means a given, and is certainly a risk!\nI've said a few times now that I don't take this lightly. The matter has\ncome up numerous times over the last couple of years in particular and I've\nnot ignored it - but weighed it up and landed on the side of keeping things\nas they are.\nThis time around I'm getting more of an impression that there's a very\nreal obstacle to greater adoption here and so am finally considering it.\nInterestingly, wrt \"catchlib\", my primary forwarding url for Catch is\ncatch-lib.net. I share @The-Compiler https://github.com/The-Compiler's\nview that Catch is not really a library, but catch-lib was the best domain\nI could come up with at the time. I also have catch-test.net but it's\namazing how that one extra letter makes me prefer the slightly shorter one\n:-)\nOf course Catfish doesn't make that much easier (could do catfish-lib.net,\nI suppose).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/406#issuecomment-104562086.\n. *catch ;)\n\nOn Fri, May 22, 2015 at 5:27 PM, Phil Nash notifications@github.com wrote:\n\nInteresting @paolobolzoni https://github.com/paolobolzoni. I think that\nwould suffer less (although not entirely free of it) from the derivative\nproblem. However I can't think of any prefixes that I like. There is a\ntemptation to add something (like your bugcatch example) that makes it\nrelate more to testing - but what I liked about Catch on it's own was that\nit always hinted at that without saying it outright - which is in keeping\nwith the idea that a test framework certainly plays a role in catching\nbugs, but that's not it's only (or, for some, even main) purpose (e.g. use\nit to drive design etc).\nAgain, I'm still open to other ideas (btw I'm not going to make a final\ndecision on this for a while yet - probably a week at least).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/406#issuecomment-104566540.\n. catchthem :D a part that google \"fixes\" in \"catch them\" I find it easy to\nlearn and it does not imply what you are looking for. A person? A bug?\nSomething?\n\nOn Mon, May 25, 2015 at 3:32 AM, Darren Cook notifications@github.com\nwrote:\n\nRussel, you probably read the manual once, and memorized it perfectly, so\nnever saw the need to google \"catch how to handle exceptions\" like I just\ndid :-)\nOut of curiosity, I tried \"catfish how to handle exceptions\" to see how\nmany existing pages to compete with. The top hit was actually for a\n(Python) library called Catfish:\nhttps://bugs.launchpad.net/catfish-search/+bug/1307126\nThe rest were all on fishing, as you'd expect.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/406#issuecomment-105046512.\n. Perhaps we should c...atch it out and let Mr Nash to think about it.\n\nOn Thu, Jun 4, 2015 at 4:36 PM, Monocasual Laboratories \nnotifications@github.com wrote:\n\nJust my two cents: C++atch :-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/406#issuecomment-108766677.\n. I was really missing the obvious. Thanks.\n. \n",
    "brinkrob": "It would be interesting to get the BDD style descriptions as a sort of test report, without having all the successful REQUIRE statements printed out since that can add a lot of noise.\n. ",
    "itrion": "Thank you very much for this tip Martin :D\nOn Tue, 2 Jun 2015 at 21:00 Martin Moene notifications@github.com wrote:\n\n(You can get assertions-only by using the compact reporter ;)\nmain.cpp(11): passed: v.size() == 5 for: 5 == 5\nmain.cpp(12): passed: v.capacity() >= 5 for: 5 >= 5\nmain.cpp(18): passed: v.size() == 10 for: 10 == 10\nmain.cpp(19): passed: v.capacity() >= 10 for: 10 >= 10\nmain.cpp(11): passed: v.size() == 5 for: 5 == 5\nmain.cpp(12): passed: v.capacity() >= 5 for: 5 >= 5\nmain.cpp(26): passed: v.size() == 0 for: 0 == 0\nmain.cpp(27): passed: v.capacity() >= 5 for: 5 >= 5\nmain.cpp(11): passed: v.size() == 5 for: 5 == 5\nmain.cpp(12): passed: v.capacity() >= 5 for: 5 >= 5\nmain.cpp(34): passed: v.size() == 5 for: 5 == 5\nmain.cpp(35): passed: v.capacity() >= 10 for: 10 >= 10\nmain.cpp(11): passed: v.size() == 5 for: 5 == 5\nmain.cpp(12): passed: v.capacity() >= 5 for: 5 >= 5\nmain.cpp(42): passed: v.size() == 5 for: 5 == 5\nmain.cpp(43): passed: v.capacity() >= 5 for: 5 >= 5\nPassed 1 test case with 16 assertions.```\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/403#issuecomment-108079113.\n. This discussion is very interesting. There are a lot of questions which are hard to find because catch is very generic. I like Catch++.\n\nand.. what about a tag in stack overflow?\n. In clang++ -stdlib=libstdc++ is the old version of the library. To compile\nc++11/14 code you have to use -stdlib =libc++ maybe in gcc is the same\nEl dom., 31 de mayo de 2015 10:27, PureAbstract notifications@github.com\nescribi\u00f3:\n\nGiven that you get the problem without including Catch, it's clearly not\nan Catch issue - it's a issue with your compiler/library setup.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/424#issuecomment-107149437.\n. I agree that acronyms should be used after the introduction of its full meaning, because no all the people have to know it. BDD and TDD are not the same thing. BDD is for an outside in, top down approach and TDD is for inside out or bottom up. You can think in behavior-driven development as a kind of evolution of test-driven development but at least for me not all test are suitable to be written in terms of scenarios so it is\n\nCatch offers the two approaches and The good part is that both of them can be use in any case. In the example of the factorial, it is a unit test case, and not an scenario for that reason I think the name should be kept.\n. ",
    "torbjoernk": "@martinmoene How does your tip back from 2015 (sorry for this issue necromancy) help in only getting the BDD scenario output without the assertions?\nFollowup question:\nGiven I have an assertion in a WHEN but outside a THEN block, how can I suppress the first occurrence of the BDD-style output block (the one without the Then:)?\nSCENARIO(\"Add or Multiply\") {\n  GIVE(\"two values\") {\n    int a = 1, b;\n    WHEN(\"both are the same\") {\n      b = a;\n      REQUIRE(a == b);\n      THEN(\"the sum is the same as multiply the first by 2\") {\n        REQUIRE(a + b == a * 2);\n      }\n    }\n  }\n}\n```\n$> ./foo_test -s -r console\nfoo_test is a Catch v1.5.6 host application.\nRun with -? for options\n\nScenario: Add or Multiply\n     Given: two values\n      When: both are the same\n\n/$PROJECTS/foo/tests/foo_test.cpp:9\n...............................................................................\n/$PROJECTS/foo/tests/foo_test.cpp:17: \nPASSED:\n  REQUIRE( a == b )\nwith expansion:\n  1 == 1\n\nScenario: Awesomeness\n     Given: two values\n      When: both are the same\n      Then: the sum is the same as multiply the first by 2\n\n/$PROJECTS/foo/tests/foo_test.cpp:9\n...............................................................................\n/$PROJECTS/foo/tests/foo_test.cpp:22: \nPASSED:\n  REQUIRE( a + b == a * 2  )\nwith expansion:\n  true\n```\nI only want the last Scenario block with the then line.\n. ",
    "claymation": "+1\u00a0\u2014\u00a0how about Catchy?\n. Thanks for looking into this. Using g++-4.9, I needed to use:\n```\npragma GCC system_header\npragma clang system_header\n```\nto squelch the -Weffc++ warnings. Perhaps GCC doesn't understand #pragma GCC/clang ...?\n. Oh, I thought you meant, literally, #pragma GCC/clang ... :)\nYes, #pragma GCC system_header works. I've been using that since I opened this issue, to good effect.\n. ",
    "DarrenCook": "+1 for anything other than \"catch\" :-) \n\"Catch++\" would work for me, as would any of the other suggestions here.\nIn case anyone still doesn't get the problem:\n\"catch C++\" gets me an article on exceptions. \"catch C++ test\" gets me an article on testing for C++ exceptions.\nMore realistically: \"catch can I use helper functions\" simply does not find the answer. (Around the 60:00 point in the Phil 2014 presentation answered it for me: yes, but there is one thing to watch out for.)   \"catch stop giving me hex format for integers\" never came close to finding issue #409. Etc.\n. Interesting analysis. A completely new name loses you all \"brand\" you currently have, so may not be so useful. \"catfish\" has lots of logo potential, but is still an existing word: how do I catfish on google gets 12.6 million hits that any new Catch articles have to compete with. how do I \"catchtest\" gets 2000 google hits - it fact it has such as small share of the webosphere at the moment that I need to add quotes to stop Google thinking I made a typo. how do I \"catch++\" has 187 hits (and the 3rd one is this thread ;-)\n. Russel, you probably read the manual once, and memorized it perfectly, so never saw the need to google \"catch how to handle exceptions\" like I just did :-)\nOut of curiosity, I tried \"catfish how to handle exceptions\" to see how many existing pages to compete with. The top hit was actually for a (Python) library called Catfish: https://bugs.launchpad.net/catfish-search/+bug/1307126\nThe rest were all on fishing, as you'd expect.\n. +1  This is driving me crazy. E.g. Is 0x1cc7c greater or less than 117891? (If you know without using a calculator, you are too clever to need a unit testing library ;-)\nStrangely, I cannot find the 8000 magic number (nor 8001) in the catch.hpp file. I wonder where it is coming from!\n. ",
    "vendethiel": "There's got to be an ascii \"catfish\" somewhere..\n. ",
    "The-Compiler": ":cat: :fish:\n:cat2: :tropical_fish: :exclamation: \nStupid emoji-puns aside: I love it! It's distinctive, a bit similiar to catch, and (no pun intended) catchy!\n. > Scenario 1: Someone hears about Catch and wants to find out more/ has an issue and needs to look it up. They go to their search engine of choice and first type:\n\nCatch\nNothing on the first page. \"Silly me - I need to make it more specific\".\nCatch C++\nLots of stackoverflow hits for try-catch. If you're lucky you might hit the test framework on the first page - but it's a way down.\n\"no, no! I mean the test framework\"\nCatch Unit Test\nSeveral results about testing exceptions. The test framework probably crops up in the first handful of hits, though (bear in mind results vary by search engine and filter-bubbling). But you might miss it.\n\nHahaha - this was exactly the scenario I was in. And I remember I thought \"catch is a silly name for a C++ related project\" :P\n. > Catchlib\n\nI think it would do pretty good job: 1) preserve old name 2) become searchable (there are Touchlib, there is netlib, cpp-netlib, all easy to search for).\n\nCatch isn't a library though. It's a test framework and/or runner.\nCatchlib would suggest it's something I use in my own code to do something (catching exceptions? :P).\n. Why not just print both? I think this is still clear enough and then the user can decide what to look at:\n...\nwith expansion:\n  8000 (0x1f40) == 9890 (0x26a2)\nor alternatively maybe this, if it's possible easily:\n...\nwith expansion:\n  8000 == 9890 (0x1f40 == 0x26a2)\n. Maybe just set the limit to >= 10? I think 10 (0xA) == 20 (0x14) would be okay, and the inconsistency with 10 (0xA) == 2 doesn't matter that much, as 2 is the same in base-10 and base-16 anyways.\n. There are some solutions to detect gdb here but most of them seem rather complicated and/or costly.\nFWIW, I'd prefer breaking unconditionally to no breaking at all. If an user runs with --break with no gdb attached, just blame them ;)\n. FWIW, I use a simple list of structs with test cases to do something similiar currently:\n``` cpp\nTEST_CASE(\"Invalid incoming CAN packets\", \"[horch2can][invalid]\")\n{\n    CANProto::Packet packet;\n    memset(&packet, 0x00, sizeof(packet));\n    int ret;\nusing namespace CANProto;\nusing namespace CANProto::Horch;\n\ntypedef struct {\n    const char* name;\n    const char* buf;\n    ErrorCode::ErrorCode error;\n} Test;\n\nTest tests[] = {\n    // Completely invalid packets\n    {\"Empty buffer\",\n     \"\", ErrorCode::partialData},\n    {\"Hello World\",\n     \"Hello World! I'm not a CAN packet.\\n\", ErrorCode::unexpectedChar},\n    {\"Some structure\",\n     \"/:::\\n\", ErrorCode::unexpectedChar},\n    {\"non-ascii garbage\",\n     \"\\a\\b\\t\\v\\f\\r\\xff\\xfe\\n\", ErrorCode::unexpectedChar},\n    {\"Only a timestamp with newline\",\n     \"1234567890\\n\", ErrorCode::unexpectedNewline},\n\n    // [...]\n    // Sentinel value\n    {\"\", \"\", ErrorCode::success}\n};\n\nint len;\nint expected_consumed;\n\nfor (int i = 0; tests[i].name != \"\"; i++) {\n    Test test = tests[i];\n    len = strlen(test.buf);\n    if (test.error == ErrorCode::partialData) {\n        expected_consumed = 0;\n    } else {\n        expected_consumed = len;\n    }\n    SECTION(test.name) {\n        ret = horch2can(test.buf, len, &packet);\n        INFO(\"error: \" << CANProto::ErrorCode::toString(packet.error));\n        INFO(\"expected: \" << CANProto::ErrorCode::toString(test.error));\n        CHECK_FALSE(packet.valid);\n        CHECK(packet.error == test.error);\n        CHECK(ret == expected_consumed);\n    }\n}\n\n}\n```\n(note: I'm not very experienced with C++, so there might be things which are odd here - but you get the idea)\n. There's a section on floating point comparisons in the documentation.\n. ",
    "DenBeke": "+1 for Catfish!\n. ",
    "DraTeots": "+1 for Catfish too!\n. I've found this here\n\nAdding your own command line options\nCatch embeds a powerful command line parser which you can also use to parse your own options out. This capability is still in active development but will be documented here when it is ready.\n\nSo what is the status of it? Maybe it is kind of more ready now? \nWhat I need to do is to pass different connection strings corresponding to different databases to check that all tests are passing with all supported databases. Now I do this with environment variables but it is... mmm... dirty?.. I would definitely prefer CATCH handling the situation with its argument parser, giving the values to the tests that require them. \n. ",
    "raytrap": "Catch++ sounds logical, maybe a variant of it without special chars. How about CatchXX, crosscatch.\nAnd, sorry, C.C.Catch.\n. ",
    "monocasual": "Just my two cents: C++atch :-)\n. ",
    "rr-": "I'd say we're fine:\n\n. Catch2 is cool. @philsquared can we read somewhere about planned changes introduced by v2 (esp. the ones to public API / that are backwards-incompatible)?\nOS X being an \"OS 10\" sounds pretty arrogant.\n. ...I just noticed 1.3.1 is already out :+1: The issue on that version seems to be gone.\n...plus this is duplicate of #545.\n. ...and in case you wonder - the reason behind templated tests is basically rolling my own solution to #357.\n. ",
    "GatoRat": "Why pull short with C++11? I've found that C++11 compliant compilers also support C++14 (and most of C++1z.)\n. I just ran into this as well. I put on -Wno-unknown-pragmas to shut it up for now. (I tried to track it down to no avail.)\n. setjmp/longjmp are unreliable and should never be used.\nSeems the best solution would be to create a separate GitHub project for it.\n. My mistake. I didn't look close enough and didn't test with failing tests.\n. How about Catch11?. FYI, the complaint I was given by one build engineer last year was that the compile time was becoming too long. I suggested precompiled headers, but he wasn't sure how to do it right on Linux.. stdint.h is correct as of at least Visual Studio 2015 update 3 and should be used.\nIts use is inconsistent with CATCH_CONFIG_CPP11_LONG_LONG.. When I faced this issue, I made my main source file as small as possible, included only catch.hpp and turned off pre-compiled headers for that file. (Still annoying, but it worked.). ",
    "jmcarter17": "My 2cents (For what it's worth)\nWhen you proposed catch2, I immediately thought of Catch 22, which may or may not be bad.\nCatch11 is great, and it gives you an obvious renaming path for future releases that will require a change in the standard. Catch23 would obviously mean you need a C++23 compliant compiler ...\nAnyways, I'm glad that you are reopening this issue because I have had problems searching for catch solutions in the past.\nI'm fine with catch2 or catch11, but people will definitely keep calling it catch.\n. ",
    "ryanpfeeley": "My two cents Re the original issue: philsquared is so prolific, that using \"philsquared\" in place of \"catch\" in any search query is bound to get you exactly want. Now perhaps that doesn't scale to the future since it isn't part of the brand, but steering searchers to include your handle might give you a little flexibility as you rebrand. If the biggest break is compiler dependence, using catch11, catch17, is ok. People will definitely keep calling it catch though. Embrace success!\n. ",
    "kkutsner": "Resharper C++ for Visual Studio supports Catch 1.x very nicely. I requested support for Catch 2.0. There is an issue https://youtrack.jetbrains.com/issue/RSCPP-20082. Please comment, vote.. @philsquared Unfortunately, I'm new to R++ and I have no idea for now how to troubleshoot it. I tried one of the most recent prelease versions of Catch 2.0 and R++ was not able to pick it up - it didn't recognize that project has unit tests inside, however it worked fine on the same project when I switched to older Catch header file of version 1.10.\nSo I decided to reach JetBrains guys to see if they can fix problem on their side so they just logged that issue. @hmich is assigned to that issue.\n@hmich I just tried to search for GitHub user Igor Akhemtov assuming it's you and you have some relationship to Resharper product. Sorry if you are not that person - just ignore this message.. @Trass3r I did:) - I talked to Microsoft guys at CppCon 2017 and I was asking them in person:) \nI got feeling they were keeping it in plans.. +1\n. ",
    "igor-akhmetov": "@kkutsner This week's EAP build (should be available from https://www.jetbrains.com/resharper/eap/ on Friday) will support Catch2.. ",
    "mintyc": "Sounds  good \ud83d\udc4d. ",
    "lorenzhs": "http://stackoverflow.com/a/8135517 seems quite okay? It looks reliable (setting up a SIGTRAP handler if the debugger hasn't already done so) and then raising SIGTRAP. In case you want to repeatedly drop into the debugger, it seems like it should look like this though:\n``` c++\nstatic int _debugger_present = -1;\nstatic void _sigtrap_handler(int signum)\n{\n    _debugger_present = 0;\n    signal(SIGTRAP, SIG_DFL);\n}\nvoid debug_break(void)\n{\n    if (-1 == _debugger_present) {\n        _debugger_present = 1;\n        signal(SIGTRAP, _sigtrap_handler);\n        raise(SIGTRAP);\n    } else if (1 == _debugger_present) {\n        raise(SIGTRAP)\n    }\n}\n```\n(or am I not understanding something?)\n. but that is SIGTRAP's explicit purpose? I don't see why we would need another argument, that would only be confusing.\nIn my opinion, --break should check for the debuggers it knows (like visual studio), and otherwise fall back to SIGTRAP for all other debuggers. As I see it, the purpose of the debugger check is not to prevent users from running it with --break and then wondering why it crashes. Instead, it seems to be there to ensure that it's running in a debugger it knows how to break into. SIGTRAP would be a good fallback mechanism.\n. Have you seen #418?\n. ",
    "davidshepherd7": "Is anyone working on implementing and/or merging this? \nFWIW the implementation in lorenzhs' fork looks good to me.\n. Ah right I think I misunderstood then. Is the requirement that they are in the same scope as the assertion?. Thanks, I was going to write a correct version but kept putting it off. :). ",
    "hiiwave": "Hello, I assumed it had been implemented but I still encounter the same issue even with the latest release. \nFollow the same approach as in #586, the test reproducing this is as follows:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nTEST_CASE(\"exception\") { throw \"nobody expects the Spanish inquisition\"; }\n```\nBy compiling and running it under gdb:\n```\ng++ -g -std=c++0x tst.cpp && gdb --args ./a.out -b\nReading symbols from ./a.out...done.\n(gdb) r\nStarting program: a.out -b\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\na.out is a Catch v2.0.0-develop.4 host application.\nRun with -? for options\n\nexception\ntst.cpp:4\n...............................................................................\ntst.cpp:4: FAILED:\ndue to unexpected exception with message:\n  nobody expects the Spanish inquisition\n===============================================================================\ntest cases: 1 | 1 failed\nassertions: 1 | 1 failed\n```\nDoes anyone have any idea why I cannot break into gdb here? Thanks a lot.. I created a new issue #1030 for this.. I see. It's my carelessness that I didn't notice that #586 was indeed a separate issue from #418. Hence so far I think the best way to debug with unexpected exception would be using catch throw in gdb itself. Thank you really much for your concern.\n. I would say it's still preferable if breaking into debugger -b in Catch supports unexpected exceptions. Since the use of catch throw command in gdb has some side effects including that it also breaks at caught exceptions. @horenmar had clarified me that it's not a bug report but instead a feature request.. ",
    "johnwbyrd": "It seems as though, when building on MacOS X, the llvm libc++ libraries are required in the Xcode project settings; that is, catch will not compile or link against the default, native gcc libraries.  This means that catch may only be used on MacOS 10.7 and later.\n. I had to drop MacOS 10.6 support because of this dependency.  However, I checked and nullptr_t is part of the C++11 spec, so I have to write this one off because of the age of the compiler.  Closing ticket.. On this topic... it would be useful to have a clearly documented method for adding test cases manually rather than depending on AutoReg to do so for you by instancing objects before main() is called.  Test fixtures as written depend on the AutoReg behavior, which I expect would not work for the reasons already given in this issue.\n. Furthermore... my leak detector in Windows is detecting all these pre-main allocated objects as memory leaks on shutdown.  I've not investigated this enough to blame Catch, as there might be some incantation I should be using to ask Catch to release all these pre-main allocated structures.\n. @philsquared I am also currently using Catch::Session but will probably switch to the new argc/argv interference method you implemented.  I was getting a couple hundred leaks in my Catch-related code.\nPutting Catch::cleanUp() after all Catch calls causes all those memory leaks to go away.\nPlease make the Catch::cleanUp() function call part of the official documentation example for Catch::Session().  Also, please document Catch::cleanUp().  This will save a lot of people a lot of pain.\n. Following the documentation at https://github.com/philsquared/Catch/blob/master/docs/own-main.md, I simply call \nint result = Catch::Session().run( argc, argv );\nat the appropriate time and the self-registered test cases run.  Since I don't instance a Session, I assume it exists in global scope.\n. ",
    "snortadmin": "Catch v1.2.1\n-  Generated: 2015-06-30 18:23:27.961086\nSeems I'm running into the same or similar issue on both Linux and OSX building with g++ (not clang++) and autotools.  Here is the layout:\nprogram\n    lib1\n        mod1a.cc\n        mod1a_test.cc\n        mod1b.cc\n        ...\n    lib2\n        mod2a.cc\n        ...\nTEST_CASEs for xxx.cc are in xxx_test.cc.  The lib# are convenience libs (built directly into the executable).\nThe above doesn't work because auto registration is apparently failing.  The work around is to add\n```\ninclude \"mod1a_test.cc\"\n```\nto the bottom of mod1a.cc.  Then the tests run just fine.\nmod1a_test.cc is being compiled into lib1 but there is a difference in the symbols therein.  With the include there are 60 Catch symbols, w/o there are only 30.  The missing symbols are given below.\nNote that this is with optimization disabled ( -O0 ).\nI'm not sure how else to convince the linker this stuff is needed.  2nd the suggestion that explicit registration be supported as a fallback.\n1,30d0\n< 0000000000002fae S __ZN5Catch11NameAndDescC1EPKcS2_\n< 0000000000002fe4 S __ZN5Catch13AssertionInfoD1Ev\n< 000000000000316c S __ZN5Catch13ExpressionLhsIRKiE17captureExpressionILNS_8Internal8OperatorE0EiEERNS_13ResultBuilderERKT0_\n< 0000000000003142 S __ZN5Catch13ExpressionLhsIRKiEC1ERNS_13ResultBuilderES2_\n< 000000000000311c S __ZN5Catch13ExpressionLhsIRKiEeqIiEERNS_13ResultBuilderERKT_\n<                  U __ZN5Catch13ResultBuilder13endExpressionEv\n<                  U __ZN5Catch13ResultBuilder13setResultTypeEb\n< 0000000000003048 S __ZN5Catch13ResultBuilder14ExprComponentsD1Ev\n<                  U __ZN5Catch13ResultBuilder18useActiveExceptionENS_17ResultDisposition5FlagsE\n<                  U __ZN5Catch13ResultBuilder5reactEv\n<                  U __ZN5Catch13ResultBuilder5setOpERKSs\n<                  U __ZN5Catch13ResultBuilder6setLhsERKSs\n<                  U __ZN5Catch13ResultBuilder6setRhsERKSs\n<                  U __ZN5Catch13ResultBuilderC1EPKcRKNS_14SourceLineInfoES2_NS_17ResultDisposition5FlagsE\n< 00000000000030a0 S __ZN5Catch13ResultBuilderD1Ev\n< 00000000000030ea S __ZN5Catch13ResultBuilderleIiEENS_13ExpressionLhsIRKT_EES5_\n< 0000000000003086 S __ZN5Catch14CopyableStreamD1Ev\n<                  U __ZN5Catch14SourceLineInfoC1EPKcm\n< 0000000000002f94 S __ZN5Catch14SourceLineInfoD1Ev\n<                  U __ZN5Catch16isDebuggerActiveEv\n< 000000000000301e S __ZN5Catch19AssertionResultDataD1Ev\n< 0000000000002f84 S __ZN5Catch6isTrueEb\n<                  U __ZN5Catch7AutoRegC1EPFvvERKNS_14SourceLineInfoERKNS_11NameAndDescE\n<                  U __ZN5Catch7AutoRegD1Ev\n< 0000000000002fd7 S __ZN5Catch8Internal14OperatorTraitsILNS0_8OperatorE0EE7getNameEv\n< 000000000000331b S __ZN5Catch8Internal6opCastIiEERT_RKS2_\n< 00000000000032bd S __ZN5Catch8Internal7compareILNS0_8OperatorE0EiiEEbRKT0_RKT1_\n< 00000000000032e2 S __ZN5Catch8Internal9EvaluatorIiiLNS0_8OperatorE0EE8evaluateERKiS5_\n<                  U __ZN5Catch8toStringEi\n<                  U __ZNK5Catch13ResultBuilder16shouldDebugBreakEv\n. CATCH_CONFIG_RUNNER with Catch::Session.\nThanks\nRuss\nOn 11/20/15 12:04 PM, Phil Nash wrote:\n\nManual test registration is now in on the develop branch - as of \nv1.3.0-develop.4.\nUse |REGISTER_TEST_CASE( ,  [,] )|.\n@johnwbyrd https://github.com/johnwbyrd Are you using \n|CATCH_CONFIG_MAIN| or |CATCH_CONFIG_RUNNER| - and if the latter are \nyou using |Catch::Session|?\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/philsquared/Catch/issues/421#issuecomment-158461078.\n. \n",
    "pthom": "(This answer is outdated, see better alternative below, using add_library( OBJECT)\nI have an alternative suggestion, using auto-generated code. \nPlease look at https://github.com/pthom/catch_registerstaticlibrary\nThis repo provides some cmake/python scripts with which adding catch to a static library becomes a one-liner: simply add this line to the CMakeLists.txt file \ncatch_registerstaticlibrary(MyLibrary MyLibraryTest)\nAlthough, many developers may not like it, as it slightly modifies the code, \nIt was tested under OSX (clang) Windows (MSVC 2015 and 2010), and linux. The registration problem was present on all this plaforms and can be solved with such a solution.\n. I have found a more reliable solution, that does \n does not require code modifications\n does not use fancy compiler switches\n* does not require to use REGISTER_TEST_CASE\nThe idea is to first add an \"object\" library through cmake:\nadd_library(MyLibrary_Object OBJECT lib1.cpp lib2.cpp)\nThen create a static or shared lib from the object library, as well as a test target that uses this object library.\nFull working example here : https://github.com/pthom/cmake_registertest/blob/master/examples/example_catch_raw/MyLibrary/CMakeLists.txt\n```cmake\ninclude_directories(\"../../thirdparty_testlibs/catch\")\nadd_library(MyLibrary_Object OBJECT lib1.cpp lib2.cpp)\nadd_library(MyLibrary_Static STATIC $)\nor\nadd_library(MyLibrary_Shared SHARED $ ../catch_dynamic.cpp)\nadd_executable(MyLibraryTest $ ../catch_main.cpp)\nadd_test(NAME MyLibraryTest COMMAND MyLibraryTest)\n```\nThis example is an extract of a github project where I provide a cmake scripts that helps test registration for catch, googletest and doctest.\nExample for a library that does have test code in its source (as well as in external files) :\nhttps://github.com/pthom/cmake_registertest/blob/master/examples/example_catch/MyLibrary/CMakeLists.txt\ncmake\nadd_library(MyLibrary_Object OBJECT lib1.cpp lib2.cpp)\ncrt_registertest(\n  TEST_INPLACE\n  INPUT_OBJECT_LIBRARY MyLibrary_Object\n  OUTPUT_LIBRARY_NAME MyLibrary_Static\n  OUTPUT_LIBRARY_TYPE STATIC\n  OUTPUT_TEST_TARGET MyLibraryTest\n  TEST_SOURCES lib3_test.cpp lib4_test.cpp \n)\n. ",
    "Karry": "Another solution is to tell linker to NOT strip not referenced symbols. In CMake:\ntarget_link_libraries (unittests\n    -Wl,--whole-archive $<TARGET_FILE:mylib> -Wl,--no-whole-archive\n)\nwhere unittests is Catch executable and mylib is static library\n. ",
    "trashuj": "Hi, i just ran into this issue. Can you please add some info in the main docs because it's really confusing.\nBroke both msvc and ubuntu/clang.\nBesides that i'm happy so far :) thanks!. ",
    "wilx": "I guess this is moot at this point. I am closing this.\n. @philsquared I think it is no longer relevant. I have since then moved to unpatched version of Catch and I have not had any problems so far.\n. Re https://github.com/philsquared/Catch/pull/643#issuecomment-231393297:\n\nWhy not just cast return type?\nstd::transform( sourceLC.begin(), sourceLC.end(), sourceLC.begin(), (char (*)(int))tolower );\n\nThis is UB. \n. ",
    "thechristopher": "I'm using sth like this: https://gist.github.com/thechristopher/8eaa6dad18c5cfefba32\n. ",
    "kartikkumar": "I'm not sure how I can check on Mac OS, and more specifically when using GCC installed with Homebrew. When I run gcc -v I get the following:\n$ /usr/local/bin/gcc-5 -v\nUsing built-in specs.\nCOLLECT_GCC=/usr/local/bin/gcc-5\nCOLLECT_LTO_WRAPPER=/usr/local/Cellar/gcc/5.1.0/libexec/gcc/x86_64-apple-darwin14.3.0/5.1.0/lto-wrapper\nTarget: x86_64-apple-darwin14.3.0\nConfigured with: ../configure --build=x86_64-apple-darwin14.3.0 --prefix=/usr/local/Cellar/gcc/5.1.0 --libdir=/usr/local/Cellar/gcc/5.1.0/lib/gcc/5 --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-5 --with-gmp=/usr/local/opt/gmp --with-mpfr=/usr/local/opt/mpfr --with-mpc=/usr/local/opt/libmpc --with-isl=/usr/local/opt/isl --with-system-zlib --enable-libstdcxx-time=yes --enable-stage1-checking --enable-checking=release --enable-lto --with-build-config=bootstrap-debug --disable-werror --with-pkgversion='Homebrew gcc 5.1.0 --without-multilib' --with-bugurl=https://github.com/Homebrew/homebrew/issues --enable-plugin --disable-nls --disable-multilib\nThread model: posix\ngcc version 5.1.0 (Homebrew gcc 5.1.0 --without-multilib)\nDon't know if that helps provide any insight. If not, how would I go about checking what version of libstdc++ I'm linking against?\n. Yea, I saw that SO thread, but the first couple of answers don't seem to work on my system. I tracked down the following files in /usr/llib/\nlibstdc++.6.0.9.dylib  \nlibstdc++.6.dylib      \nlibstdc++.dylib\nSo I'm guessing it's 6.0.9? Don't know if that means anything. Also, not sure if that's what the Homebrew GCC is linked against. There's nothing in /usr/local/lib so I'm assuming that those are the libraries.\n. So it doesn't seem to compile but when I add the following to my CMakeLists.txt it works: set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\"). \nSo I'm wondering if since in GCC 5 I think the default is now C++11, somewhere libstdc++ is is still the old version? Perhaps this is a Homebrew configuration issue in that case, but I just want to make sure that it's not an issue with how CATCH is handling compiler versions.\n. Thanks for looking into it. I've just downgraded to GCC 4.9 for the moment. Hopefully someone will address the issue for Homebrew.\n. Yes indeed, linking to the single include is working. Thanks!. ",
    "Sandman83": "I'm using G++ 5 on MacOs. \nCMake says -- The CXX compiler identification is GNU 5.1.0\nand\n```\ng++-5 -v says\ng++-5 -v\nUsing built-in specs.\nCOLLECT_GCC=g++-5\nCOLLECT_LTO_WRAPPER=/usr/local/Cellar/gcc5/5.1.0/libexec/gcc/x86_64-apple-darwin14.3.0/5.1.0/lto-wrapper\nTarget: x86_64-apple-darwin14.3.0\nConfigured with: ../configure --build=x86_64-apple-darwin14.3.0 --prefix=/usr/local/Cellar/gcc5/5.1.0 --libdir=/usr/local/Cellar/gcc5/5.1.0/lib/gcc/5 --enable-languages=c,c++,objc,obj-c++ --program-suffix=-5 --with-gmp=/usr/local/opt/gmp --with-mpfr=/usr/local/opt/mpfr --with-mpc=/usr/local/opt/libmpc --with-isl=/usr/local/opt/isl014 --with-system-zlib --enable-libstdcxx-time=yes --enable-stage1-checking --enable-checking=release --enable-lto --disable-werror --with-pkgversion='Homebrew gcc5 5.1.0' --with-bugurl=https://github.com/Homebrew/homebrew-versions/issues --enable-plugin --disable-nls --enable-multilib\nThread model: posix\ngcc version 5.1.0 (Homebrew gcc5 5.1.0) \n```\nYes, all other tests in ToStringTuple pass. \n. compiled with cmake -DCMAKE_BUILD_TYPE=Debug\nGDB says\n... SelfTest/ToStringTuple.cpp:42\n42      CHECK( \"{ { 42 }, { }, 1.2f }\" == Catch::toString(value) );\n(gdb) print value\n$1 = {<_Tuple_impl<0ul, std::tuple<int>, std::tuple<>, float>> = {<_Tuple_impl<1ul, std::tuple<>, float>> = {<_Tuple_impl<2ul, float>> = {<_Head_base<2ul, float, false>> = {\n      _M_head_impl = 1.07801106e-38}, <No data fields>}, <_Head_base<1ul, std::tuple<>, true>> = {<tuple<>> = {<No data fields>}, <No data fields>}, <No data fields>}, <_Head_base<0ul, std::tuple<int>, false>> = {\n  _M_head_impl = {<_Tuple_impl<0ul, int>> = {<_Head_base<0ul, int, false>> = {\n        _M_head_impl = 42}, <No data fields>}, <No data fields>}}, <No data fields>}, <No data fields>}\n. Oh, wow... So, you found a compiler bug... Do you report this to... to whom, actually? )) \nApart from this, I think you (or I?) can close the ticket now. As the case is an edge-case, I think I can live with this, knowing which case should not occur. \nThanks for your time!\n. ",
    "rhl-": "Yes\n. Hi, this bug is still not fixed. separate c++ files can be an issue for those who write header only c++ as you can get symbol conflicts..\nerror: redefinition of      '_CA_T_C_H__T_E_S_T____1'\ncatch.hpp:9371:30: note: expanded from macro 'TEST_CASE'\n    #define TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE( VA_ARGS )\n. ",
    "luxe": "Thanks.\n. If the left or right side of the expression contains commas, I need to wrap them in parentheses.  Or I can wrap the entire expression in parentheses.  This is because macros parse and split by comma.  That makes sense.  Thanks.\n. It seems like it may not be legal to return from a signal handler.\nhttp://stackoverflow.com/questions/34210772/is-it-possible-to-recover-from-stdabort/34210981\nThis is probably not do-able.\n. That's a good idea, but the code I'm testing is in C.\nI can't overwrite assert to throw exceptions and still get the C code to compile.\nThe C code is built with a C compiler, and the C headers have \"extern C\" guards so that they can be called from C++, and then used inside Catch.\n. From SO, it seems like the approach google test takes, is to fork off a new process, and check if it exits.\n. Agreed.  \nI wouldn't mind the performance cost if it let me specify individual use cases where aborts should occur.  It's not a cost anyone would need to pay for unless they chose to check for aborts.  It doesn't seem like returning from a signal handler, and still having all of the program state defined, is plausible.  \nCurrently, I'm making a ton of binaries, and having a bash script check their exit status.  It's messy/hacky, but works fine.  Implementing a similar thing into the framework(through forking) is just as bad, but at least I could specify all my use cases in the same file, and run them from the same binary.\n. I can't find any documentation that says handling SIGABRT keeps the program in a defined state. I see what you were saying about the \"static environment\" though, and how it would drop the potential for multi-threading.\n. I'm going to try and fork a process as part of my unit test case, and then compare the exit code using CHECK(exit code == ...); \nThat won't require any changes to the Catch framework.\nHaving CHECK_ABORT(...) would be a nice convenience, but its not necessary to accomplish what I want.\n. > the user defined function  \nour signal handler\n\nis undefined behavior when handling implementation-defined signals\n\nAs far as I can tell, SIGABRT is implementation-defined.\n. Ok cool.  I was looking at the value of SIGABRT.  that value is implementation-defined.\nhttp://en.cppreference.com/w/c/program/SIG_types\nI guess that doesn't mean the same thing as not being standard though.\n. This is my current integration:\n```\ntemplate\nvoid CHECK_ABORT(F&& f, Args&&... args)\n{\n    //spawn a new process\n    auto child_pid = fork();\n//if the fork succeed\nif (child_pid >= 0){\n\n  //if we are in the child process\n  if (child_pid == 0){\n\n     //call the function that we expect to abort\n     std::invoke(std::forward<F>(f),std::forward<Args>(args)...);\n\n     //if the function didn't abort, we'll exit cleanly\n     std::exit(EXIT_SUCCESS);\n  }\n}\n\n//determine if the child process aborted\nint exit_status;\nwait(&exit_status);\n\n//we check the exit status instead of a signal interrupt, because\n//Catch is going to catch the signal and exit with an error\nbool aborted = WEXITSTATUS(exit_status);\n\nreturn aborted;\n\n}\n```\nIt's used like so:\n```\nvoid Test_Function(int n){\n  assert(n != 7);\n  return;\n}\nTEST_CASE(\"test\"){\n  CHECK(CHECK_ABORT(Test_Function,6)); //fails\n  CHECK(CHECK_ABORT(Test_Function,7)); //passes (but prints misleading information to the terminal)\n}\n```\nThis is sufficient for my use cases.\n- CHECK_ABORT is not a macro\n- not cross-compatible\n- std::invoke comes from C++17...\n- etc, etc\n- I would have liked to use CHECK_ABORT by itself in a TEST_CASE\nOne of the new problems this gives me, is that assert prints to the terminal, and the signal handler by Catch prints that the unit test failed.  This results in me having to use  WEXITSTATUS instead of WIFSIGNALED. If I look at the last result of running the program, it will tell me the correct statistical information.  If I could suppress printing to the terminal in CHECK_ABORT, it would be much more use-able.\nHere is a terminal dump to better illustrate the problem:        \n``\n$ ./main\nmain: main.cpp:85: void Test_Function(int): Assertionn != 7' failed.\nmain is a Catch v1.3.1 host application.\nRun with -? for options\n\ntest\nmain.cpp:89\n...............................................................................\nmain.cpp:89: FAILED:\ndue to a fatal error condition:\n  SIGABRT - Abort (abnormal termination) signal\n===============================================================================\ntest cases: 1 | 1 failed\nassertions: 1 | 1 failed\n===============================================================================\nAll tests passed (1 assertion in 1 test case)\n$\n```\n. I've disabled output on the forked process, and I'm pretty satisfied with how this is working.  \nfull program example:\n```\ninclude \ninclude \ninclude \ninclude \ninclude \ninclude \ninclude \ninclude \ninclude \ninclude \ninclude \ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\n//copied from cppreference as possible implementation\nnamespace detail {\ntemplate \ninline auto INVOKE(F&& f, Args&&... args) ->\n    decltype(std::forward(f)(std::forward(args)...)) {\n      return std::forward(f)(std::forward(args)...);\n}\ntemplate \ninline auto INVOKE(T Base::pmd, Derived&& ref) ->\n    decltype(std::forward(ref).pmd) {\n      return std::forward(ref).*pmd;\n}\ntemplate \ninline auto INVOKE(PMD pmd, Pointer&& ptr) ->\n    decltype((std::forward(ptr)).pmd) {\n      return (std::forward(ptr)).pmd;\n}\ntemplate \ninline auto INVOKE(T Base::pmf, Derived&& ref, Args&&... args) ->\n    decltype((std::forward(ref).pmf)(std::forward(args)...)) {\n      return (std::forward(ref).*pmf)(std::forward(args)...);\n}\ntemplate \ninline auto INVOKE(PMF pmf, Pointer&& ptr, Args&&... args) ->\n    decltype(((std::forward(ptr)).pmf)(std::forward(args)...)) {\n      return ((std::forward(ptr)).pmf)(std::forward(args)...);\n}\n}\nnamespace custom{\n  template< class F, class... ArgTypes>\n  decltype(auto) invoke(F&& f, ArgTypes&&... args) {\n      return detail::INVOKE(std::forward(f), std::forward(args)...);\n  }\n}\n// - ignore the output from Catch's signal handler\n// - ignore the message from assert\nvoid Disable_Console_Output(){\n//close C file descriptors\n   //this will prevent cout and cin as well\n   fclose(stdout);\n   fclose(stderr);\n}\ntemplate\nbool Function_Aborts(F&& f, Args&&... args)\n{\n    //spawn a new process\n    auto child_pid = fork();\n//if the fork succeeded\nif (child_pid >= 0){\n\n  //if we are in the child process\n  if (child_pid == 0){\n\n     //call the function that we expect to abort\n     Disable_Console_Output();\n     custom::invoke(std::forward<F>(f),std::forward<Args>(args)...);\n\n     //if the function didn't abort, we'll exit cleanly\n     std::exit(EXIT_SUCCESS);\n  }\n}\n\n//determine if the function aborted\n//**this does not work because of Catch's signal handler**\nint exit_status;\nwait(&exit_status);\nbool aborted = WEXITSTATUS(exit_status);\nreturn aborted;\n\n}\nvoid Test_Function(int n){\n  assert(n != 7);\n  return;\n}\nTEST_CASE(\"test\"){\n  CHECK(Function_Aborts(Test_Function,6)); //fails (no extraneous output)\n  CHECK(Function_Aborts(Test_Function,7)); //passes\n}\n//data appears correctly in console\n```\nconsole output:\n```\n$ ./main                       \nmain is a Catch v1.3.1 host application.\nRun with -? for options\n\ntest\nmain.cpp:102\n...............................................................................\nmain.cpp:103: FAILED:\n  CHECK( Function_Aborts(Test_Function,6) )\nwith expansion:\n  false\n===============================================================================\ntest cases: 1 | 1 failed\nassertions: 2 | 1 passed | 1 failed\n```\nI don't expect any of this to be integrated, but I wanted to show the linux work-around that has been working well for me.  Hopefully it will help anyone else who wants to check for aborts on linux.  \n\nI'm not sure about any global state that may get changed from the forked process, or how it would affect other test cases.  I have not run into any problems myself testing our C code this way.\n. In that case, I'll add:\nstd::cout.setstate(std::ios_base::failbit);\nstd::cin.setstate(std::ios_base::failbit);\n. good point. rdbuf() seems better.\n. CHECK(!true);  does not pass.  This seems to decompose correctly as well.\n. That's not a valid expression one would expect to work in normal C++ either.\nDoing just:  \nstd::string hello =\"hello\";\nstd::string world = \"world\";\nif(! hello < world){\n}\ngives a similar error as string does not support the logical negation operator.\n. Oh!  'Decomposition' refers to showing the expression in the output.\nI was confused into thinking it had something to do with how the actual expression got evaluated, and whether the result was a passing/failing test.  \nThe only real danger of using an expression prefixed with \"!\", is that may appear less clear in the diagnostic output.  CHECK_FALSE exists to provide a more cosmetic output, but it's not required to get the expression to evaluate correctly.  Thanks, that makes more sense now.\n. I see.\n. Upgrading to a newer version of catch eliminated the error.\n. ",
    "drbig": "I second that. And it's not as much as 'liking dots' as having immediate visual clue that things are being done.\n. ",
    "agauniyal": "https://stackoverflow.com/questions/30730517/g-5-1-0-not-building-project-clang-shows-unknown-error\n. For now , g++ build process completely fails while clang++ happens to produce the require build only if >>>>>HEAD and ====== part is removed from line 63 in that file. I would request you to update bicode version too since some users might use your file from their interface. \n. @martinmoene I've commented on their forums , I hope it would get updated soon. Can you look into the gcc errors as well? Even after removing those git merge affected lines , it fails to build on gcc with given errors. \n. yes! ( via compiler flags , right? )\n. @nabijaczleweli did this change made it into new release? or still in development.\n. ",
    "astanin": "An example of Catch error output:\nIn file included from example.cc:2:0:\ncatch.hpp:559:78: error: redefinition of 'Catch::AutoReg {anonymous}::autoRegistrar5'\n         namespace{ Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( &INTERNAL_CATCH_UNIQUE_NAME(  ____C_A_T_C_H____T_E_S_T____ ), CATCH_INTERNAL_LINEINFO, Catch::NameAndDesc( __VA_ARGS__ ) ); }\\\n                                                                              ^\ncatch.hpp:9371:30: note: in expansion of macro 'INTERNAL_CATCH_TESTCASE'\n     #define TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE( __VA_ARGS__ )\n                              ^\nexample2.hpp:5:1: note: in expansion of macro 'TEST_CASE'\n TEST_CASE(\"the second test on line 5\", \"\") {\n ^\nIn file included from example.cc:2:0:\ncatch.hpp:559:63: error: 'Catch::AutoReg {anonymous}::autoRegistrar5' previously declared here\n         namespace{ Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( &INTERNAL_CATCH_UNIQUE_NAME(  ____C_A_T_C_H____T_E_S_T____ ), CATCH_INTERNAL_LINEINFO, Catch::NameAndDesc( __VA_ARGS__ ) ); }\\\n                                                               ^\ncatch.hpp:58:56: note: in definition of macro 'INTERNAL_CATCH_UNIQUE_NAME_LINE2'\n #define INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line ) name##line\n                                                        ^\ncatch.hpp:60:44: note: in expansion of macro 'INTERNAL_CATCH_UNIQUE_NAME_LINE'\n #define INTERNAL_CATCH_UNIQUE_NAME( name ) INTERNAL_CATCH_UNIQUE_NAME_LINE( name, __LINE__ )\n                                            ^\ncatch.hpp:559:35: note: in expansion of macro 'INTERNAL_CATCH_UNIQUE_NAME'\n         namespace{ Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( &INTERNAL_CATCH_UNIQUE_NAME(  ____C_A_T_C_H____T_E_S_T____ ), CATCH_INTERNAL_LINEINFO, Catch::NameAndDesc( __VA_ARGS__ ) ); }\\\n                                   ^\ncatch.hpp:9371:30: note: in expansion of macro 'INTERNAL_CATCH_TESTCASE'\n     #define TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE( __VA_ARGS__ )\n                              ^\nexample1.hpp:5:1: note: in expansion of macro 'TEST_CASE'\n TEST_CASE(\"the first test on line 5\", \"\") {\n ^\nexample2.hpp: In function 'void ____C_A_T_C_H____T_E_S_T____5()':\ncatch.hpp:560:50: error: redefinition of 'void ____C_A_T_C_H____T_E_S_T____5()'\n         static void INTERNAL_CATCH_UNIQUE_NAME(  ____C_A_T_C_H____T_E_S_T____ )()\n                                                  ^\ncatch.hpp:58:56: note: in definition of macro 'INTERNAL_CATCH_UNIQUE_NAME_LINE2'\n #define INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line ) name##line\n                                                        ^\ncatch.hpp:60:44: note: in expansion of macro 'INTERNAL_CATCH_UNIQUE_NAME_LINE'\n #define INTERNAL_CATCH_UNIQUE_NAME( name ) INTERNAL_CATCH_UNIQUE_NAME_LINE( name, __LINE__ )\n                                            ^\ncatch.hpp:560:21: note: in expansion of macro 'INTERNAL_CATCH_UNIQUE_NAME'\n         static void INTERNAL_CATCH_UNIQUE_NAME(  ____C_A_T_C_H____T_E_S_T____ )()\n                     ^\ncatch.hpp:9371:30: note: in expansion of macro 'INTERNAL_CATCH_TESTCASE'\n     #define TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE( __VA_ARGS__ )\n                              ^\nexample2.hpp:5:1: note: in expansion of macro 'TEST_CASE'\n TEST_CASE(\"the second test on line 5\", \"\") {\n ^\ncatch.hpp:560:50: error: 'void ____C_A_T_C_H____T_E_S_T____5()' previously defined here\n         static void INTERNAL_CATCH_UNIQUE_NAME(  ____C_A_T_C_H____T_E_S_T____ )()\n                                                  ^\ncatch.hpp:58:56: note: in definition of macro 'INTERNAL_CATCH_UNIQUE_NAME_LINE2'\n #define INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line ) name##line\n                                                        ^\ncatch.hpp:60:44: note: in expansion of macro 'INTERNAL_CATCH_UNIQUE_NAME_LINE'\n #define INTERNAL_CATCH_UNIQUE_NAME( name ) INTERNAL_CATCH_UNIQUE_NAME_LINE( name, __LINE__ )\n                                            ^\ncatch.hpp:560:21: note: in expansion of macro 'INTERNAL_CATCH_UNIQUE_NAME'\n         static void INTERNAL_CATCH_UNIQUE_NAME(  ____C_A_T_C_H____T_E_S_T____ )()\n                     ^\ncatch.hpp:9371:30: note: in expansion of macro 'INTERNAL_CATCH_TESTCASE'\n     #define TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE( __VA_ARGS__ )\n                              ^\nexample1.hpp:5:1: note: in expansion of macro 'TEST_CASE'\n TEST_CASE(\"the first test on line 5\", \"\") {\n ^\n. Thanks, that helps.\nIt would be nice to give a proper example in the reference and give a friendlier error. Otherwise it looks like an internal Catch error, and it gives no idea what can be done about it (unless you look into catch.hpp source).\n. @philsquared I split my tests between .cpp files. Not an issue for me anymore.. ",
    "MIGreenberg": "Compilation of my tests throws the same error that @astanin described in his original post. Since then, I've followed @kirbyfan64's advice and changed the files that contain my tests from header files to source files. As an example:\nTest.cpp:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \ninclude \"testA.cpp\"\ninclude \"testB.cpp\"\n```\nTestA.cpp:\n```\ninclude \n// test case on line four\nTEST_CASE(\"Sanity check\", \"\"){\n    REQUIRE(1 == 1);\n}\n```\nTestB.cpp\n```\ninclude \n// another test case on line four\nTEST_CASE(\"Second Sanity Check\", \"\"){\n    REQUIRE(2 == 2);\n}\n```\nAny thoughts on what I'm doing wrong?\n. ",
    "rec": "Just ran into this issue twice - on Sunday and then again today.\nSo you're saying that your C++ name generation through macros is such that if two tests on the same line number in different .h files appear in the same compilation, you get a name collision?  Which means that the user can make tiny, apparently correct changes to their code and see a sudden compilation error appear?\nAnd your solution is to use separate compilation units, or to put all the tests into one great honking file?\nSeparate compilation units are not a good option for many people.  For example, my project is template-only, so there's only one .cpp file - tests.cpp, which includes all the other headers as tests.  \nI don't want separate compilation units - I'd need more logic in my Makefile, it'd make my compilations a lot slower (right now I call the C++ compiler exactly once in my whole build/test logic, and it compiles all the code, in a so-called \"unity build\" - so it's very fast).\nThis seems like a pretty serious issue with this otherwise fine framework - it certainly ate an hour of my time as if it were nothing (I ran into it earlier and must have moved around my code when experimenting so the tests were on different line numbers, and then it \"came back\").\nI'm going to put all the tests into one test.cpp file, and be done with it - it isn't a huge huge project, this'll work for now - but a better solution is needed, IMHO...\nAnother bandaid fix would be simply to add comment lines to make each test appear on a different line number but my very soul cries out in pain at this idea.\nAnother fix might be to use individual namespaces for each test!  Then there wouldn't be a name collision, I think...?\nAnd that seemed to work!  Not really a terrible solution, tbh.\n(While flailing, I also saw this poor guy's @rhl- 's '____C_A_T_C_H____T_E_S_T____1' issue which to me seems to be other macro problems, but I can't reproduce that in my current repo, and just as glad...)\n. Don't worry - I had already fixed my issues before pressing send on the comment.  The \"namespace\" trick is fine for me - I'm in rapid development on this project right now and wanting to charge forward any way I can as long as I'm not incurring technical debt - separate namespaces isn't a big problem at all, quite neat really!\n\nI'm still not quite sure why you need to have the tests in header files?\n\nWell, there are three choices for building:\n- have everything in one compilation unit\n  - in one great big file\n  - in many files, using #include\n- have multiple compilation units\nAgain, I'm in rapid development mode, so I'm wanting to avoid the work of having more than one target in my makefile, making sure that each test works stand-alone, etc. but even more than that, wanting the really rapid iteration speed that comes with \"one compilation unit\".\n\nHowever, regardless of that, you shouldn't be having issues with this now. \n\nGood for you then on already addressing this in general!  :-) \nI did update to 1.51 - your version from five days ago? - before commenting!  I'm using:\nc++ --version\nApple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)\nTarget: x86_64-apple-darwin13.4.0\nThread model: posix\nI'm going to file an issue against myself in the project in question to check on this \"later\" and see if I can send you a reproducible test case, but for the moment, I'm past it so this issue isn't holding me up now.\n. It's definitely much faster now because I'm in such early stages that almost every rebuild rebuilds almost everything.  (I do have automatic dependencies, but only because I copied that from a fresh project I'd done the \"right thing\" on...)\nRemember - for most C++ projects, \"our code\" is quite small - \"your code\", the STL sources and Catch and other libraries, are much larger.  Each separate compilation is translating nearly all the same code, that being the library code, and only a tiny number of lines that are different!\nAnd in my case there's also a Cython component, where the \"make\" part isn't so well-defined that it understands to rebuild the Cython if some .h files it depends on have changed.  There's a way to do that, but decidedly non-trivial - see rapid development!  and I have already spent too long on the Cython build part...\nSo I have a standard command line that removes my entire build directory, recompiles all the tests and the Cython generated code and .so, and then runs the tests.  Zap, guaranteed always to be correct.\nAnd that's consistently under ten seconds from start to finish and has remained pretty flat.  You can't beat a sub-10 second compilation cycle.\nThanks for a great unit test program - I particularly admire the way REQUIRES() picks apart conditions like == to get coherent error messages, that's amazing, and I need to figure out how it's done when I get the time!\n. All right!\nHere's a branch that demonstrates the behavior.  If you revert just the last, tiny change, you do NOT get the compilation warning.\nI checked the warning in too:  https://github.com/rec/tada/blob/cd9c5ae7b07fea8126396b3bc1b5bc1910f00a7a/catch-compiler-error.txt\n. (And this isn't at all slowing us down - I can leave this branch up until you have a chance to get to it.  :-) )\n. I have kept an alternate branch with the code that didn't work - so ping\nthis when you have the fix in and I can try it with that branch!\nOn 12 January 2017 at 20:38, Sergey Astanin notifications@github.com\nwrote:\n\n@philsquared https://github.com/philsquared I split my tests between\n.cpp files. Not an issue for me anymore.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/issues/435#issuecomment-272260741,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAPdslSRU7vugO924C4DZFJkeeX_ZBvwks5rRoFBgaJpZM4E9tgX\n.\n\n\n-- \n     /t\nhttp://radio.swirly.com - art music radio 24/7 366/1000\n. Well, I can't unfortunately verify either way your change.\nI can no longer build that branch - I get some error I couldn't track\ndown.  This should be impossible, but then, that was a long time ago.\nI just brought the new Catch code into my HEAD - but then nearly all the\nunit tests since then are written in Python and it turns out that my new\nbuild system doesn't even build the C++ tests!\nhttps://github.com/timedata-org/timedata/issues/139  :-/\nSo at least I discovered that I'd accidentally dropped the C++ unit tests\nmonths ago, but it will be some time before I get back to figuring out what\nwent wrong there and being able to actually build with the new Catch (or\nany Catch) as I'm on another project right now...\nLooking at the change in Catch, I wasn't able to definitively say that the\nlogic you have works, but it's pretty convincing.  :-D  Feel free to close\nthe bug!\nOn 13 January 2017 at 12:11, Phil Nash notifications@github.com wrote:\n\n@rec https://github.com/rec the changes I mentioned should be in 1.6.0\nnow\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/issues/435#issuecomment-272419407,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAPdstCF4rG2ov7Y0nD7Knmyyj_HsBdTks5rR1v-gaJpZM4E9tgX\n.\n\n\n-- \n     /t\nhttp://radio.swirly.com - art music radio 24/7 366/1000\n. ",
    "hassanfarid": "@philsquared Are you saying that you have fixed this issue in 1.6.0? The COUNTER should be appended with FILEPATH. \nWhen I try single file include 'catch.hpp' from  https://github.com/philsquared/Catch/tree/master/single_include, I still get the same error.. @ankit-shah2 - You can't do it with Catch framework.. In parallel, I did my research on existing reported issues and found solution to use CATCH_CONFIG_COUNTER , and this is solution to this problem. Thanks for the help.\nOn a side note, is it recommended to use .cpp files instead of header? Is it something related to good practices?. I realize that keeping SECTION under for loop is the real problem.\nI commented out\n//SECTIONS(\"name\"){\n//}\nand now I see all the assertions running.. Sure - Can we link to an issue that will be developed as suggested above?. ",
    "timbz": "Yes, I get your point and thx for the detailed answer. I am using that approach to extract validation functionality:\nError isValid(const Foo& foo);\n...\nREQUIRE(isValid(foo1));\nREQUIRE(isValid(foo2));\nBut i guess that should work with CAPTURE as well\noh, and thx for great work.\n. Thx @lightmare  that is what I am doing right now (more or less) but i thought maybe there is a better way\nfor (auto val : {\"bar\", \"baz\", \"bazzz\"}) {\n    SECTION(\"Testing foo with \" + val)\n    {\n        Foo foo;\n        foo.setBar(val);\n        CHECK(foo.hasBar());\n        CHECK(foo.isValid());\n    }\n}\nThings get a little bit ugly when I need to change more that one member of foo or maybe call some other functions in one of the tests. Lets say i want to test foo after calling setBar, the i want to check foo after calling setBar() and some other function\n. Thx @philsquared, property based testing is what I was looking for\n. ",
    "prapin": "The _CRTDBG_DELAY_FREE_MEM_DF flag in my reference commit should in fact be avoided, as it will prevent memory from being physically released.\nWe only need _CrtSetDbgFlag(_CRTDBG_LEAK_CHECK_DF | _CRTDBG_ALLOC_MEM_DF);\n. Sorry if I wasn't clear.\nThe minimum test case is trivial:\nC++\nTEST_CASE(\"generator\", \"generator\")\n{\n    using namespace Catch::Generators;\n    int a = GENERATE(between(0, 1));\n}\nAnd the memory leak is clearly identified. The generator object created by createGeneratorsForTest is never deleted. The commit I put in reference fixes the leak.\n. ",
    "alkhimey": "It appears in the release notes of https://github.com/philsquared/Catch/releases/tag/v1.8.0. Is this the same feature as described in this issue? \n. ",
    "f-koehler": "I support this idea, would be great!\n. I do have the problem locally (Arch Linux, GCC 5.3.0) and in Travis CI (using GCC 5.2.1). However @DavidEGrayson's patch resolves the issue. So @philsquared, I think it should be merged.\n. ",
    "fekir": "I can't see how to atacch a file, so I'm posting the content, I'm sorry but it is a bit long...:\nScanning dependencies of target proj.bin\n[ 25%] Building CXX object CMakeFiles/proj.bin.dir/main.cpp.o\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In static member function \u2018static void (Catch::SafeBool::\\* Catch::SafeBool::makeSafe(bool))()const\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:208:51: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             return value ? &SafeBool::trueValue : 0;\n                                                   ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: At global scope:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:497:7: warning: \u2018class Catch::MethodTestCase<C>\u2019 only defines a private destructor and has no friends [-Wctor-dtor-privacy]\n class MethodTestCase : public SharedImpl<ITestCase> {\n       ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In member function \u2018virtual bool Catch::TestSpec::NamePattern::matches(const Catch::TestCaseInfo&) const\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2865:23: warning: switch missing default case [-Wswitch-default]\n                 switch( m_wildcard ) {\n                       ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In member function \u2018void Catch::Config::useStream(const string&)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3231:20: warning: declaration of \u2018stream\u2019 shadows a member of 'this' [-Wshadow]\n             Stream stream = createStream( streamName );\n                    ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In member function \u2018Catch::Clara::CommandLine<ConfigT>::ArgBuilder& Catch::Clara::CommandLine<ConfigT>::ArgBuilder::detail(const string&)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3849:61: warning: declaration of \u2018detail\u2019 shadows a member of 'this' [-Wshadow]\n             ArgBuilder& detail( std::string const& detail ) {\n                                                             ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In member function \u2018void Catch::Clara::CommandLine<ConfigT>::optUsage(std::ostream&, std::size_t, std::size_t) const\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3933:37: warning: declaration of \u2018usage\u2019 shadows a member of 'this' [-Wshadow]\n                 Detail::Text usage( it->commands(), Detail::TextAttributes()\n                                     ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In function \u2018void Catch::setRngSeed(Catch::ConfigData&, const string&)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4165:68: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             config.rngSeed = static_cast<unsigned int>( std::time(0) );\n                                                                    ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In constructor \u2018Catch::SectionTracking::TestCaseTracker::TestCaseTracker(const string&)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5009:47: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             m_completedASectionThisRun( false )\n                                               ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In constructor \u2018Catch::RunContext::RunContext(const Catch::Ptr<const Catch::IConfig>&, const Catch::PtrCatch::IStreamingReporter&)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5183:9: warning: declaration of \u2018config\u2019 shadows a member of 'this' [-Wshadow]\n         :   m_runInfo( config->name() ),\n         ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5190:49: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             m_prevConfig( m_context.getConfig() )\n                                                 ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In destructor \u2018virtual Catch::RunContext::~RunContext()\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5201:39: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             m_context.setConfig( NULL );\n                                       ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In member function \u2018Catch::Totals Catch::RunContext::runTest(const Catch::TestCase&)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5242:30: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             m_activeTestCase = NULL;\n                              ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In static member function \u2018static void Catch::TestRegistry::sortTests(const Catch::IConfig&, std::vectorCatch::TestCase&)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5789:19: warning: switch missing default case [-Wswitch-default]\n             switch( config.runOrder() ) {\n                   ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: At global scope:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5812:11: warning: \u2018class Catch::FreeFunctionTestCase\u2019 only defines a private destructor and has no friends [-Wctor-dtor-privacy]\n     class FreeFunctionTestCase : public SharedImpl<ITestCase> {\n           ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In function \u2018void Catch::cleanUp()\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:6023:29: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         getTheRegistryHub() = NULL;\n                             ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In constructor \u2018Catch::Stream::Stream()\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:6124:41: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n     : streamBuf( NULL ), isOwned( false )\n                                         ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In member function \u2018void Catch::Stream::release()\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:6134:23: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             streamBuf = NULL;\n                       ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In constructor \u2018Catch::Context::Context()\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:6153:79: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         Context() : m_config( NULL ), m_runner( NULL ), m_resultCapture( NULL ) {}\n                                                                               ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:6153:79: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:6153:79: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In function \u2018void Catch::cleanUpContext()\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:6241:24: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         currentContext = NULL;\n                        ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In member function \u2018virtual void Catch::{anonymous}::PosixColourImpl::use(Catch::Colour::Code)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:6350:19: warning: switch missing default case [-Wswitch-default]\n             switch( _colourCode ) {\n                   ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In function \u2018uint64_t Catch::{anonymous}::getCurrentTicks()\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:6946:33: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             gettimeofday(&t,NULL);\n                                 ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In member function \u2018unsigned int Catch::Timer::getElapsedMilliseconds() const\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:6959:71: warning: useless cast to type \u2018unsigned int\u2019 [-Wuseless-cast]\n         return static_cast<unsigned int>(getElapsedMicroseconds()/1000);\n                                                                       ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In copy constructor \u2018Catch::XmlWriter::ScopedElement::ScopedElement(const Catch::XmlWriter::ScopedElement&)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:7860:32: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n                 other.m_writer = NULL;\n                                ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In member function \u2018void Catch::XmlWriter::writeEncodedText(const string&)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:8030:23: warning: switch missing default case [-Wswitch-default]\n                 switch( mtext[pos] ) {\n                       ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In member function \u2018virtual bool Catch::XmlReporter::assertionEnded(const Catch::AssertionStats&)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:8150:19: warning: enumeration value \u2018Unknown\u2019 not handled in switch [-Wswitch-enum]\n             switch( assertionResult.getResultType() ) {\n                   ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:8150:19: warning: enumeration value \u2018Ok\u2019 not handled in switch [-Wswitch-enum]\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:8150:19: warning: enumeration value \u2018FailureBit\u2019 not handled in switch [-Wswitch-enum]\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:8150:19: warning: enumeration value \u2018ExpressionFailed\u2019 not handled in switch [-Wswitch-enum]\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:8150:19: warning: enumeration value \u2018Exception\u2019 not handled in switch [-Wswitch-enum]\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:8150:19: warning: enumeration value \u2018DidntThrowException\u2019 not handled in switch [-Wswitch-enum]\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In member function \u2018void Catch::JunitReporter::writeAssertion(const Catch::AssertionStats&)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:8394:23: warning: switch missing default case [-Wswitch-default]\n                 switch( result.getResultType() ) {\n                       ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In constructor \u2018Catch::ConsoleReporter::AssertionPrinter::AssertionPrinter(std::ostream&, const Catch::AssertionStats&, bool)\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:8560:23: warning: switch missing default case [-Wswitch-default]\n                 switch( result.getResultType() ) {\n                       ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In member function \u2018void Catch::CompactReporter::AssertionPrinter::print()\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:8967:23: warning: switch missing default case [-Wswitch-default]\n                 switch( result.getResultType() ) {\n                       ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Option<T>::Option() [with T = long unsigned int]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4918:29:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2453:40: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         Option() : nullableValue( NULL ) {}\n                                        ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Option<T>::Option(const Catch::Option<T>&) [with T = long unsigned int]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4927:16:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2458:33: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         : nullableValue( _other ? new( storage ) T( __other ) : NULL )\n                                 ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Option<T>::Option() [with T = Catch::SectionTracking::TestCaseTracker]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5190:49:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2453:40: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         Option() : nullableValue( NULL ) {}\n                                        ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018void Catch::Option<T>::reset() [with T = Catch::SectionTracking::TestCaseTracker]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5243:37:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2482:27: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             nullableValue = NULL;\n                           ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Ptr<T>::Ptr() [with T = Catch::IStreamingReporter]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5516:30:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:358:27: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         Ptr() : m_p( NULL ){}\n                           ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Ptr<T>::Ptr() [with T = Catch::Config]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5604:42:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:358:27: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018void Catch::Ptr<T>::reset() [with T = Catch::Config]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5634:32:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:374:17: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             m_p = NULL;\n                 ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Option<T>::Option(const Catch::Option<T>&) [with T = Catch::TagAlias]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:7506:24:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2458:33: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         : nullableValue( _other ? new( storage ) T( *_other ) : NULL )\n                                 ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Option<T>::Option() [with T = Catch::TagAlias]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:7508:37:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2453:40: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         Option() : nullableValue( NULL ) {}\n                                        ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Ptr<T>::Ptr() [with T = Catch::CumulativeReporterBase::SectionNode]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:7676:38:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:358:27: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         Ptr() : m_p( NULL ){}\n                           ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018void Catch::Ptr<T>::reset() [with T = Catch::CumulativeReporterBase::SectionNode]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:7729:33:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:374:17: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             m_p = NULL;\n                 ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Clara::Detail::BoundArgFunction<ConfigT>& Catch::Clara::Detail::BoundArgFunction<ConfigT>::operator=(const Catch::Clara::Detail::BoundArgFunction<ConfigT>&) [with ConfigT = Catch::ConfigData]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3919:32:   required from \u2018void Catch::Clara::CommandLine<ConfigT>::bindProcessName(M C::_) [with C = Catch::ConfigData; M = std::basic_string<char>; ConfigT = Catch::ConfigData]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4202:55:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3534:75: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n                 IArgFunction<ConfigT>\\* newFunctionObj = other.functionObj ? other.functionObj->clone() : NULL;\n                                                                           ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Clara::Detail::BoundArgFunction<ConfigT>::BoundArgFunction(const Catch::Clara::Detail::BoundArgFunction<ConfigT>&) [with ConfigT = Catch::ConfigData]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3881:76:   required from \u2018Catch::Clara::CommandLine<ConfigT>::CommandLine(const Catch::Clara::CommandLine<ConfigT>&) [with ConfigT = Catch::ConfigData]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4297:16:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3532:96: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             BoundArgFunction( BoundArgFunction const& other ) : functionObj( other.functionObj ? other.functionObj->clone() : NULL ) {}\n                                                                                                ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018void Catch::Option<T>::reset() [with T = long unsigned int]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2462:19:   required from \u2018Catch::Option<T>::~Option() [with T = long unsigned int]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4918:29:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2482:27: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             nullableValue = NULL;\n                           ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018void Catch::Clara::CommandLine<ConfigT>::optUsage(std::ostream&, std::size_t, std::size_t) const [with ConfigT = Catch::ConfigData; std::ostream = std::basic_ostream<char>; std::size_t = long unsigned int]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3987:33:   required from \u2018void Catch::Clara::CommandLine<ConfigT>::usage(std::ostream&, const string&) const [with ConfigT = Catch::ConfigData; std::ostream = std::basic_ostream<char>; std::string = std::basic_string<char>]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:5624:53:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3935:78: warning: declaration of \u2018usage\u2019 shadows a member of 'this' [-Wshadow]\n                                                         .setIndent( indent ) );\n                                                                              ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018void Catch::Option<T>::reset() [with T = Catch::TagAlias]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2462:19:   required from \u2018Catch::Option<T>::~Option() [with T = Catch::TagAlias]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:7506:24:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2482:27: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             nullableValue = NULL;\n                           ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Option<T>::Option() [with T = Catch::TestRunInfo]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4557:34:   required from \u2018Catch::LazyStat<T>::LazyStat() [with T = Catch::TestRunInfo]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:7578:38:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2453:40: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         Option() : nullableValue( NULL ) {}\n                                        ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018void Catch::Option<T>::reset() [with T = Catch::TestRunInfo]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2462:19:   required from \u2018Catch::Option<T>::~Option() [with T = Catch::TestRunInfo]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4556:12:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2482:27: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             nullableValue = NULL;\n                           ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Option<T>::Option() [with T = Catch::GroupInfo]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4557:34:   required from \u2018Catch::LazyStat<T>::LazyStat() [with T = Catch::GroupInfo]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:7578:38:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2453:40: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         Option() : nullableValue( NULL ) {}\n                                        ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018void Catch::Option<T>::reset() [with T = Catch::GroupInfo]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2462:19:   required from \u2018Catch::Option<T>::~Option() [with T = Catch::GroupInfo]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4556:12:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2482:27: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             nullableValue = NULL;\n                           ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Option<T>::Option() [with T = Catch::TestCaseInfo]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4557:34:   required from \u2018Catch::LazyStat<T>::LazyStat() [with T = Catch::TestCaseInfo]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:7578:38:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2453:40: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n         Option() : nullableValue( NULL ) {}\n                                        ^\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018void Catch::Option<T>::reset() [with T = Catch::TestCaseInfo]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2462:19:   required from \u2018Catch::Option<T>::~Option() [with T = Catch::TestCaseInfo]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4556:12:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:2482:27: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             nullableValue = NULL;\n                           ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/main.cpp:2:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In instantiation of \u2018Catch::Clara::Detail::BoundArgFunction<ConfigT>::BoundArgFunction() [with ConfigT = Catch::ConfigData]\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3694:31:   required from \u2018Catch::Clara::CommonArgProperties<ConfigT>::CommonArgProperties() [with ConfigT = Catch::ConfigData]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3734:19:   required from \u2018Catch::Clara::CommandLine<ConfigT>::Arg::Arg() [with ConfigT = Catch::ConfigData]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3893:13:   required from \u2018Catch::Clara::CommandLine<ConfigT>::OptBuilder Catch::Clara::CommandLine<ConfigT>::operator[](const string&) [with ConfigT = Catch::ConfigData; std::string = std::basic_string<char>]\u2019\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:4204:17:   required from here\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:3530:52: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             BoundArgFunction() : functionObj( NULL ) {}\n                                                    ^\n[ 50%] Building CXX object CMakeFiles/proj.bin.dir/test1.cpp.o\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/test1.cpp:1:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In static member function \u2018static void (Catch::SafeBool::\\* Catch::SafeBool::makeSafe(bool))()const\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:208:51: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             return value ? &SafeBool::trueValue : 0;\n                                                   ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/test1.cpp:1:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: At global scope:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:497:7: warning: \u2018class Catch::MethodTestCase<C>\u2019 only defines a private destructor and has no friends [-Wctor-dtor-privacy]\n class MethodTestCase : public SharedImpl<ITestCase> {\n       ^\n[ 75%] Building CXX object CMakeFiles/proj.bin.dir/test2.cpp.o\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/test2.cpp:1:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In static member function \u2018static void (Catch::SafeBool::\\* Catch::SafeBool::makeSafe(bool))()const\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:208:51: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             return value ? &SafeBool::trueValue : 0;\n                                                   ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/test2.cpp:1:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: At global scope:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:497:7: warning: \u2018class Catch::MethodTestCase<C>\u2019 only defines a private destructor and has no friends [-Wctor-dtor-privacy]\n class MethodTestCase : public SharedImpl<ITestCase> {\n       ^\n[100%] Building CXX object CMakeFiles/proj.bin.dir/test3.cpp.o\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/test3.cpp:1:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: In static member function \u2018static void (Catch::SafeBool::\\* Catch::SafeBool::makeSafe(bool))()const\u2019:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:208:51: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]\n             return value ? &SafeBool::trueValue : 0;\n                                                   ^\nIn file included from /home/fekir/Workspace/CPP/Cmake/catch/test3.cpp:1:0:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp: At global scope:\n/home/fekir/Workspace/CPP/Cmake/catch/catch.hpp:497:7: warning: \u2018class Catch::MethodTestCase<C>\u2019 only defines a private destructor and has no friends [-Wctor-dtor-privacy]\n class MethodTestCase : public SharedImpl<ITestCase> {\n       ^\nLinking CXX executable proj.bin\n[100%] Built target proj.bin. @DavidEGrayson: Why are you not leaving the default case to the end?\nIsn't \n```cpp\nswitch(something)\n{\ncase 1:\n  do_something_1();\n  break;\ncase 2:\n  do_something_2();\n  break;\ncase 3:\ncase 4:\ncase 5:\ndefault:\n}\norcpp\nswitch(something)\n{\ncase 1:\n  do_something_1();\n  break;\ncase 2:\n  do_something_2();\n  break;\ncase 3:\ndefault:\n do_something_3();\n}\n``\nenough to fix all the warnings?\n. Thank you for your suggestions, I was not aware ofCHECKED_ELSE`.\nLazy evaluation, especially for global errors, it's important.\nFor one the behavior is not specified (I'm thinking more of errno, unsure about GetLastError, but what about other libraries?\nAnd even if, I do not want my test to fail because maybe another test did not check it's error.\nIt would make tests more brittle.\nStill, it does not seem to be an ideal solution, maybe this example will make my point more clear (here I'm using mkdir, but feel free to replace it with any stdlib function from math, like std::sqrt):\n```c++\nTEST_CASE(){\n    REQUIRE(mkdir(\"....\")==0);\n}\n````\nIf I want to have useful information's (check errno in this case), I need to store somewhere the result of mkdir, test it with an if like in my previous sample or in CHECKED_ELSE as I've just learned, and FAIL:\n```c++\nTEST_CASE(){\n    auto val = mkdir(\"....\");\n    CHECKED_ELSE(val != 0) {\n                FAIL(errno);\n    }\n}\n````\nI think\n```c++\nTEST_CASE(){\n    REQUIRE(mkdir(\"....\") != 0, {\n        // FAIL here was wrong, since REQUIRE would already fail... and provide us with the message \"mkdir != 0\", which already tells us which function failed!\n        CAPTURE(errno);\n    });\n}\n````\nwhich also seems easier to simplify (in case we have many similar calls)\n```c++\nvoid capture_errno(){CAPTURE(errno);}\nTEST_CASE(){\n    REQUIRE(mkdir(\"....\") != 0, capture_errno);\n}\n```\ninstead of\n```c++\nvoid capture_errno(){CAPTURE(errno);}\nTEST_CASE(){\n    auto f = mkdir(\"...\");\n    CHECKED_ELSE(f != 0) {\n        capture_errno();\n        REQUIRE(f !=0); // use require to have a little more descriptive error message, but it will not include \"mkdir\" in it's description\n    }\n}\n```\nGranted, the code is very similar, but still you need\n provide a custom message, or duplicate the if condition inside a REQUIRE\n store the result of the function for creating a custom message/duplicate the logic\nI know it's probably a minor detail, but I think that writing \nc++\nREQUIRE(foo(bar) == baz)\nis much better then\nc++\nauto v = foo(bar);\nREQUIRE(v==baz);\nsince in case of failure we have a lot more information from the error message, and CHECKED_IF forces me to write the code in the second form.\nIt also lowers the barrier to test more functions, since I normally never see functions like mkdir, printf, sqrt and other to be tested on errors. But this might just be my experience.\n. I'm really sorry, I just noticed that I've already opened a similar issue (https://github.com/catchorg/Catch2/issues/1209), but did never get a reply, and forgot it in the meantime...\nI think we can close it (or mark as duplicate), and continue the discussion here...\n. > Feel free to close #1209. Sorry for not responding before. You got lucky with me paying attention today ;-)\nDone :-)\n\nIt's also worth bearing in mind that you don't need to repeat that condition check.\n\nOh, I completely missed that point, should have tested before arguing that a solution with REQUIRE would have been so much better.\nIt seems to cover then all use cases, except the issue of storing the variable separately if it is needed for gaining a more descriptive error message. Honestly for now I'm more than happy even without that option since most of the time I would like this extension for REQUIRE I was dealing with libraries that store error information globally.\n\n[...] I think it makes sense to use a wrapper type [...]\n\nIt probably does, but I'm unsure if I'm understanding you correctly.\nmkdir returns an int (or other integral types, enums, or even structures), 0 in case of success, -1 in case of errors.\nOther functions might return the same type but using different values for indicating an error.\nAre you suggesting for every function that returns a different error value to create a wrapper type with the specific error value(s)? (Probably templated in order to reuse the class...)\nIt is surely doable, I probably need to test it a little more to convince myself that you do not need to write a lot of boilerplate code and \"adapters\" for working with the test framework.... ",
    "Grandmother": "vpashka, what way to solve this problem you prefer?\n. Hello, I'd find something on this issue:\nAFAIUI GXX_EXPERIMENTAL_CXX0X is was used in gcc compilers with version less than 4.7, and after 4.7 version we can check a cpluslpus. My version is g++ (GCC) 5.1.0 and they probably, remoove the __GXX_EXPERIMENTAL_CXX0X support, because they are not experimental now.\n. ",
    "judgeaxl": "Yes, you're right, the Google group would have been a more fitting venue.\nAlso, perhaps it's more a matter of style, than anything else. Perhaps I'll play around with special sections that don't run in isolation, just to avoid the \"strangeness\" of the GIVEN section being run on its own initially, which currently would be the equivalent of Setup(), or before() being run on their own without any actual testing.\n. Much appreciated! Catch has turned out to be my favorite C++ testing framework over the last year.\n. Now that's one sweet turnaround time! Works like a charm! Thanks!\n. ",
    "NoviceF": "David, thanks for link, and answer. The approach of developers to versioning is not quite obvious, and this is confusing.\n. So, my issue is solved, thanks :)\n. ",
    "Sumith1896": "Cool. Thanks for building Catch, we moved to Catch and we are very happy :smile: \n. ",
    "Hedanito": "Minimal example added to the original post\n. Printing it to std::cout prints 1 as expected.\nIt seems to work everywhere just fine, until it gets expanded by the CHECK macro.\n. I am using VS2015.\nI did some more research, and the issue seems to be the TagAliasRegistry singleton.\nThe instantiation of this singleton calls new somewhere and allocate 92 bytes.\nHowever, delete does not get called for this memory (at least not before the program teminates).\nI'm also pretty sure that I've overloaded all the new/delete functions, but here are the signatures just to be sure:\n```\nvoid operator new (std::size_t a_Size);\nvoid operator new (std::size_t a_Size, const std::nothrow_t&) noexcept;\nvoid operator new[] (std::size_t a_Size);\nvoid operator new[] (std::size_t a_Size, const std::nothrow_t&) noexcept;\nvoid operator delete (void a_Memory) noexcept;\nvoid operator delete (void a_Memory, const std::nothrow_t&) noexcept;\nvoid operator delete[] (void a_Memory) noexcept;\nvoid operator delete[] (void a_Memory, const std::nothrow_t&) noexcept;\n```\n. Using some brute force:\nauto& registry = Catch::TagAliasRegistry::get();\nregistry.~TagAliasRegistry();\nDoing this will result in delete being called on the leaked memory, so I am pretty certain this singleton is the issue.\n. I am currently using Catch v1.9.4 with Visual Studio 15.3.3, and it no longer seems to be an issue.. I have removed the possibility to use anything other than integers as requested.\nThe documentation has been updated as well.. Yup that's a mistake, will fix.. suggestion\n            assert(((m_positive && m_current <= m_end) || (!m_positive && m_current >= m_end)) && \"Step moves away from end\");. I personally prefer to keep it open for anything that provides the correct interface. This way someone can still use it with their own classes, such as a BigInteger. A rare use case, but I think trying to prevent someone from putting a string in it isn't going to help anyone either.\nBut that's my opinion, if you really want me to I can always add a static_assert with std::is_arithmetic.. ",
    "CelticMinstrel": "I just redownloaded from the link in the readme, and the problem still occurs. Except for line/column numbers, the error messages are identical.\nEDIT: Since they are basically identical, I replaced the errors at the previous link with the new ones.\nThere's also an error on the following code which makes no sense (it was present before as well, but I fixed it as it seemed a trivial issue unrelated to the main problem):\ninline TrackedSection* TrackedSection::findChild( std::string const& childName ) {\n    TrackedSections::iterator it = m_children.find( childName );\n    return it != m_children.end()\n        ? &it->second\n        : NULL;\nReversing the order of the logic (ie, using == instead of != and reversing the order of the other two operands) seems to fix it, though I can't comprehend why it occurs in the first place (the actual error is below; I imagine you'll agree it doesn't make sense):\n~/Documents/Programming/Blades Of Exile/src/../rsrc/../test/catch.hpp:4978:20: error: expected ':'\n            ? &it->second\n                   ^\n~/Documents/Programming/Blades Of Exile/src/../rsrc/../test/catch.hpp:4978:13: note: to match this '?'\n            ? &it->second\n            ^\n~/Documents/Programming/Blades Of Exile/src/../rsrc/../test/catch.hpp:4978:20: error: use of undeclared identifier 'second'\n            ? &it->second\n@kirbyfan64 - Well, clang --version returns Apple LLVM version 4.2 (clang-425.0.28) (based on LLVM 3.2svn). Maybe I just parsed out the wrong portion of that for the version.\n. If I use a newer version of clang it doesn't work correctly with XCode due to APIs changing or something. Or at least, that was the case the last time I tried (which admittedly was a few years ago, and I think I might've updated XCode since then, so it might be worth trying again; just have to remember how). Keep in mind though that my XCode is also old, and I can't update it because the newer versions don't support my system.\nEDIT: Looks like I can update to XCode 4.6. I'm going to try that and see if it helps.\nEDIT2: Looks like that works (only have linker errors for my own stuff now, but that's easily fixed). I guess you can close this, then!\n. ",
    "shreyasbharath": "+1, this would really be handy for testing C codebases.\nIs it possible to implement this using the Matchers framework? I would like it to work with any sized array.. @horenmar Can I implement this? Can you point me in the right direction?. @horenmar Yes that's correct.. At the moment we can achieve this in two steps as a workaround -\nCHECK_THAT(collection.size(), Equals(expectedSize));\nCHECK_THAT(collection, Contains(expectedCollection));\nBut this gets tedious pretty quickly and one can easily forget to do the first step!. Beautiful! Thank you for implementing!. ",
    "izzycoding": "please ignore this, just found that there is already a team city build messaging component\n. ",
    "sdressler": "Awesome :-)\n. ",
    "ftrofin": "Hello! I am interested in having Xcode support for Catch as well. Why is this PR still open after all this time but no comments have been made? Can we merge it?\n. Can we please merge this? I still want Xcode integration with Catch. Thx!. ",
    "samdmarshall": "@philsquared is there an ETA on when this will be addressed? Would like to know if this will be integrated or not given how long this has been open.\n. ",
    "jaredgrubb": "I've been using this patch in my local repo and it's been working pretty well!\n. That fixes most of the issues, however I still hit one:\nvoid benchmarkEnded( BenchmarkStats const& stats ) override {\n            Duration average( stats.elapsedTimeInNanoseconds/stats.iterations );\nHere \"Duration\" was ambiguous. There's one in an anonymous namespace for Catch, but there's also a Duration type in the MacTypes.h header for OSX. If I changed this to \"::Duration\", then that resolved the conflict. Another alternative would be to put Duration into an explicit namespace so you could \"using\" it.. Oh, missed this error too:\n@catch (NSException *exception) {\n                return Catch::toString( [exception description] );\n            }\nError: \"No member named 'toString' in namespace Catch\".. I have used the version from 05b1ca28 (which is a couple commits past v2.0.0-develop.5) and it looks good!\nShall we close?. ",
    "chrisdjauntvr": "Nevermind on point #1: \n\nCurrently, our granularity is limited to test cases -- we can't report on section execution without first registering the section as a test instance in the XCTestCase, and this would require static access to the list of sections/subsections defined within a TestCase or Section.\n\n:)\nThis should really be merged in so others can gain its benefit.\n. @philsquared thanks for taking the time. In my case I have some developers using XCode as a C++ IDE on OSX, and having Catch integrated is extremely helpful\n. @landonf For some weird reason, only after the first execution, the absolute last testcase to be listed (alphabetically!) appears in Test Navigator for a brief moment, and then quickly disappears, whether or not it failed and there's no code highlighting telling you there was a problem. The first time you execute, everything is visible, but the second time, that last test disappears. This can be worked around by creating a single pointless test called \"zzzzzIgnoreMe\" (or something to ensure its the last test to be listed) in XCTestRunner.mm file, but its super hacky. \n. ",
    "jeduden": "Yes. Using catch with objc.\n. ",
    "mamaral": "\ud83d\udc4d \n. ",
    "wmacdonald-gpsw": "Another vote for this one. This would be extra handy for IDE integration with C++ code. Objective-C and Swift support would be icing. There are already some tutorials (https://accu.org/index.php/journals/1851) for IDE integration of Catch with Visual Studio. Matching that on the Xcode side would allow me to push for universal adoption within our org. Without that it won't fly. There are those who will push back against non-portable tests for portable units, and those that will push back against anything that does not have IDE integration (since almost all IDEs have something integrated now).. Thanks for the update phil. Unfortunately it will be the xcode integration, specifically, that will hold us back. I'll keep an eye out for updates.. ",
    "pieceofsummer": "I've pulled this PR and spent some time improving it. \nFirst of all, test names are no longer reduced to just digits and latin letters. All the names are now the same as they're supposed to be, including spaces, punctuation and other languages. It even supports emojis, just in case anybody cares \ud83d\ude02.\nHaving a lot of test cases with but a single method each feels like a waste. On top of that, classes and methods having duplicate names, makes things even more confusing. So the next obvious step was to group them. TEST_CASE_METHOD macro already has a class name argument, so it was only natural to group test cases related to the same class thgether. \nAs for those without a class, they can be grouped by source file name. As unit tests usually have debug info available, source file mapping is not really a problem. And since they're usually located under the single test directory, short relative paths would fit nicely even into a narrow side bar.\nSo the Test Navigator can actually looks like this:\n\nOf course, there's still a long way to go. For example, jumping from Test Navigator to the succeeded tests is broken, and Xcode also refuses to show green/red dots in the editor next to the test methods. I'm not even sure if it can be fixed at all\u2026\nI'd be happy to share it with everyone, but filing a PR for another PR from 2 years ago feels like\u2026 ugh. So it would be nice if the author tells if he Is interested in this.. ",
    "p0fi": "Are there any news on this Xcode integration? It would be super awesome to have this working in some way since many of us use Xcode on macOS as their main C++ IDE.. Its been roughly a year now, is there still no way to integrate catch2 with Xcode? @philsquared  . ",
    "jyturley": "This would be super helpful for myself and my peers as well.. Sounds like this PR is good to go!. ",
    "bsergean": "I'm interested in this too because XCode test runner seems to have code coverage options (we're using catch for C++ unittests).. ",
    "berkus": "Just stumbled upon this masterpiece after spending some really horrible time trying to run Catch tests in an iOS app.\nAny plans to merge this and make our Xcode tests green?. I've made it work for my ios-testing projects. Used a bit of cmake magic, this entire patch went into my codebase, without touching catch code. But now it works and runs catch tests on the simulator.. I'm using it with Catch 2.1; it should just the same run tests on real device - all it needs is a IOS_SIMULATOR env var to set up.\nUnfortunately, this is not a part of public project but I'll try to extract a standalone public sample.. It was fixed by #1084. I see that void RunContext::assertionPassed() { does not call assertionEnded() with success.. And the fix was\nConfigData data;\n        data.showSuccessfulTests = true; // important for TAPReporter\nI guess TAPReporter could set this internally in constructor, but i didn't test that yet.. Fail is due to travis-ci valgring builder being broken? Not related to code.. ",
    "davnat": "I'm interested in this too :+1: . I had a quick look at the PR, but it's not quite clear to me how to integrate it in the current code base: could someone provide insights on the new structure of the project?\nWhere should I start to understand how it works?\nBesides this PR, I think some documentation on this would facilitate contributions.. Are you using it with the current version of Catch2 or with Catch 1.x?\nI suppose it could run tests on a real device, couldn't it?\nRunning C++ tests on the simulator is somewhat pointless, as it's not the same arch as the real devices: it's almost the same as running the tests on my PC.\nAnyway, do you have a public project I could look at?. Ok, I managed to make it work in Catch 2.2.2. I need to thank you for the suggestion to make the PR a part of my code, not part of Catch2... simply I didn't think at this possibility.\nFor now I tested a super simple setup, in which I simply added catch.hpp and XCTestRunner.mm to my tests directory, and now I can run some simple Catch2 tests - will try more real-life tests in the next days.\nStill, I needed a slight modification in Catch2 to make this work, to correct what I believe is a bug in Catch2:\nc++\n--- a/single_include/catch.hpp\n+++ b/single_include/catch.hpp\n@@ -2928,8 +2928,9 @@ namespace Catch {\n                         std::string name = Detail::getAnnotation( cls, \"Name\", testCaseName );\n                         std::string desc = Detail::getAnnotation( cls, \"Description\", testCaseName );\n                         const char* className = class_getName( cls );\n-                        getMutableRegistryHub().registerTest( makeTestCase( new OcMethod( cls, selector ), className, name.c_str(), desc.c_str(), SourceLineInfo(\"\",0) ) );\n+                        NameAndTags nameAndTags(name);\n+                        getMutableRegistryHub().registerTest( makeTestCase( new OcMethod( cls, selector ), className, nameAndTags, SourceLineInfo(\"\",0) ) );\n                         noTestMethods++;\n                     }\n                 }\nNow, if this modification is ok and will be applied, I could update this PR to make it work with the current version of Catch: is this something @philsquared is still interested in?. Just noticed that the needed bugfix in Catch has been committed: 788f81230f80cec0551e345cbe42e7d9288fe1f7\nThank you, @philsquared. I'm a bit busy at the moment, but as soon as I'll have some spare time I'll create an updated PR.. That change seems to state that the use of RegistryHub class as the internal registry hub is a private implementation detail, and not something that client software such as this PR can change.\nEvery solution I can imagine requires a change in the design of how the registry hub is created and handled, in order to allow the change of the type to be used internally as the registry hub.\nWhat is the position of @philsquared and @horenmar on this?. v2.2.3 is a release, and the single-include header was indeed updated, as the version macros are updated.\nThe change I'm referring to, that appears to be included in v2.2.3 (see https://github.com/catchorg/Catch2/compare/v2.2.3...master), didn't go in the header.. Ah, sorry, my bad.\nI reached that page from the release page: I didn't read very carefully and it seemed natural to me to see the changes included in that release, not since it happened.\nI'm closing this issue, thank you.. IMHO a \"wontfix\" would be more appropriate: I fail to see how this could be \"resolved\".. ",
    "michaelcowan": "@davnat Im really interested in your update of this PR to work with Catch2.\nNow that the change you needed is released, are you still interested in contributing this?. @horenmar Looking at the templates available and a quick Google seems to suggest that you cannot create console application using UWP. This makes sense to me as the point in UWP (as I understand it) is that the 'App' can run on Desktop, Tablet, Phone, Console etc. @horenmar Thats awesome, thanks very much!\nI have manually tried this change and everything compiles as expected. \nI think maybe we got our wires crossed about the console though. Although I don't think you can create a console only App using UWP, it is still possible to write to the console output window using OutputDebugString.. @horenmar I tried release v2.0.0-develop.4 and now I am getting:\nerror C2039: 'OutputDebugStringA': is not a member of '`global namespace''\nIts also worth noting that when I replace this with my own writeToDebugConsole method, it is never actually called.. @horenmar That build works for me too using UWP. Still no console output though. When a test fails all that is shown is \nException thrown at 0x00007FF9B3149E08 in testapp.exe: Microsoft C++ exception: Catch::TestFailureException at memory location 0x000000774BAFC554\nAnd its lost in a lot of other debug output.. @horenmar A quick look at the Catch source and I can see its using ::OutputDebugStringA(...) which is available in UWP. Is it possible for UWP to be able to use this too without running into the issues with the exception handling originally reported?\nTo be clear, In my UWP application I can simply:\n```C++\ninclude \n// snip\n    ::OutputDebugStringA(\"test\");\n. @horenmar Because I'm working on several platforms at once, it was consistency I was looking for.\nI am using a config like this:cpp\nCatch::ConfigData config;\nconfig.showDurations = Catch::ShowDurations::Always;\nconfig.useColour = Catch::UseColour::No;\nsession.useConfigData(config);\n```\nFor iOS (XCode) the test results are written to the Output window.\nFor Windows and UWP the test results are not.\nI found though that I can have all platforms write results to their output windows by adding:\ncpp\nconfig.outputFilename = \"%debug\";\nI'm not sure if this is a bug or not but from a user experience I expected all platforms to work the same.\nThat said I'm more than happy with the build  you provided as it does exactly what I need with this tiny tweak.\nThanks for all the help and the impressively speedy updates - its really appreciated \ud83d\udc4d . @horenmar Yup, agreed. That makes sense to me.. @philsquared Absolutely!. @lightmare I see your point. Thats a real shame as the parameter is not being modified and strictly speaking is const - but I get your point that this is painful when passing arguments from main.\nI set the arguments programatically because I am embedding Catch into a platform abstraction, and really currently only use it to set the application name - so the junit define doesn't help but I may use it in the future - thanks.\nThe solution for me is to simply perform the casting myself, which seems reasonable.\nThank you for your reply.. ",
    "ankch": "I am also trying to update this PR to the latest Catch2 master.  My work-in-progress branch is https://github.com/ankch/Catch2/tree/catch2-objc-registration-support-reverted-singleton and the bulk of my changes are in https://github.com/ankch/Catch2/commit/361a9477e8334ebaaee4e9318148a10e8c127900.  However, I've hit a roadblock where the Moved registry hub to generic singleton change made on June 15 (https://github.com/catchorg/Catch2/commit/5884ec1e28228372f705d0e3e619d44b28a41319)  prevents the Registry Hub singleton from being replaced by the XCode specific one as in the original PR: \nhttps://github.com/catchorg/Catch2/blob/56a67045d795278d1e29b0fa4792a2024b747b1a/projects/runners/XCTestRunner/XCTestRunner.mm#L366-L373\nI am working around it for now by reverting the registry hub singleton patch in my branch.  \nDoes anyone have suggestions?. ",
    "tido64": "No problem. I can rebase and create another request if you prefer?\n. ",
    "SlightlyCyborg": "Defining my own main solved the issue.\n. ",
    "iwasz": "Yay! Super cool. It works. Now I have standard message like :\nerror: TEST_CASE( \"PID 10 MAF\" ) already defined.\nFirst seen at\n/home/liwaszkiewicz/workspace/others/gpa-firmware/test/obdHiLevelTest.cc:103\nRedefined at\n/home/liwaszkiewicz/workspace/others/gpa-firmware/test/obdHiLevelTest.cc:127\nThanks!\nOn Thu, Jul 9, 2015 at 9:21 AM, Phil Nash notifications@github.com wrote:\n\nEek! Thanks for reporting this.\nMy best guess (as I can't repro) is that GCC 4.8.4 doesn't guarantee that\ncout and cerr are initialised before other static objects (which AutoReg,\nnear the bottom of that call stack is). Apparently it was intended to be\nguaranteed by the standard, but was non-normative in C++03. It should\nbe guaranteed in C++11 - but none of that tells us what GCC does.\nCould you try this. Add the following member variable:\nstd::ios_base::Init m_ostreamInit;\nto the TestRegistry class. That should force initialisation of cout/cerr\nif not already. If that fixes it for you I'll add something like that into\nthe code base.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/461#issuecomment-119854236.\n. \n",
    "gsauthof": "This is also implemented by Check (a unittesting library for C). Check enables its fork mode by default (it forks before each test case). The fork mode can be disabled via an environment variable or via calling an API function.\n. ",
    "joe-jordan": "This was a gotcha with catch for me - I am used to check (while writing pure C), but catch was recommended for a C++ project I am working on. I assumed that it would run each test in a forked process, but discovered to my surprise that some static initialisation was conserved between tests! \nI would call this a bug rather than a feature request: buggy C++ can segfault just as much as buggy C.\n. hmm, then how about something like\n```\ndefine CATCH_CONFIG_MAIN\ndefine CATCH_CONFIG_FORK_PER_FIXTURE\ninclude \n```\n? This leaves it off by default (and doesn't change the behaviour of existing tests), but makes it an option for people who need it.\n. Why do we need to push the complexity into the test runner, when we have C++ to do this for us?\n. ",
    "criptych": "They weren't, but doing so fixed the issue.  Thanks for the help; I couldn't find anything in the docs and trying to unravel Catch's exception handling was hurting my head. \n. ",
    "webmaster128": "Hi @philsquared, could you please have a look at this again? This Equals matcher for std::vector was a non-trivial piece of work it would be unfortunate if it get's lost now. I don't know what your plans for matchers are and if you like this implementation but I you want matchers, I think this is a real basic one and a great example for a matcher that can handle template types.\n. Great, no need to hurry. I was just afraid it was overlooked.\n. Thanks for the update. Even though I always loved Catch, I don't work on a project using it right now. Thus I cannot put any efford in rewriting this matcher. Please feel free to reuse whatever you find here if it helps.. Fine, thanks. I just rebased my other matcher onto current develop: #466 When this is in, I can follow-up with a bunch of matchers I have in the pipeline, like Integer and Boolean matching.\n. Warning: Code untested.\nAFAIK \"std::exception\" is the default return value for what() of an std::exception.  So you could go for something like this:\nclass NumberIsWayTooBig : public std::exception {\npublic:\n    const char* what() const override { return \"NumberIsWayTooBig\"; }\n};\nHaving a exception message is always a good idea.\nPrinting the type name from within Catch could be done using typeid(ex).name() which then needs to be demangled. In our project we're using the demangle function from boost, which is not available in Catch.\nThere are different demangle function, which you can use depending on your target compiler and used libraries. If you have Boost in your code, you could use that to auto-generate the what() text based on the current exception:\nclass NumberIsWayTooBig : public std::exception {\npublic:\n    const char* what() const override {\n        return boost::core::demangle(typeid(*this).name()).c_str();\n    }\n};\nThat could be reused if you had a parent exception class for all of your exceptions.\n. Great, if all that functionality is already available, couldn't we have a default output like\nFAILED:\ndue to unexpected exception of type: Me::MyCalException\nwith message: divided by zero\n. @philsquared What you are missing is that Catch does not print the exception type at all. In any case, only the output of what() is shown.\nI'd consider it a an unexpected behavior that GCC's std::exception puts it's name in the what(). According to http://en.cppreference.com/w/cpp/error/exception/exception the what() should be empty.\nAs you can see in the following output, no exception name is printed (source below).\n```\na.out is a Catch v1.3.0-develop.4 host application.\nRun with -? for options\n\nstd::exception\nextest.cpp:29\n...............................................................................\nextest.cpp:29: FAILED:\ndue to unexpected exception with message:\n  std::exception\n\nException with empty what()\nextest.cpp:33\n...............................................................................\nextest.cpp:33: FAILED:\ndue to unexpected exception with message:\n\nException with custom what()\nextest.cpp:37\n...............................................................................\nextest.cpp:37: FAILED:\ndue to unexpected exception with message:\n  Some whatever message\n===============================================================================\ntest cases: 3 | 3 failed\nassertions: 3 | 3 failed\n```\nhttps://gist.github.com/webmaster128/61b16767742fb1f2bfa3\n. Thanks @PureAbstract for going into detail. The only point that matters here in case of Catch is that the exception name is not printed, even if it looks like that at first glance.\n. ",
    "bbolli": "I'm having this exact issue with Catch v2.2.2, again on mingw-w64 64-bit, g++ 7.3.0. The code and file names in the error messages are different of course, but the error is the same. Interestingly, there's no problem with the MinGW g++ that targets a 32-bit environment.. ",
    "mtlmeijer": "A compile error I get:\n1>  Note: including file: D:\\dev\\ThirdParty\\Catch\\include\\catch.hpp\n1>  Note: including file:  d:\\dev\\thirdparty\\catch\\include\\internal/catch_suppress_warnings.h\n1>  Note: including file:  d:\\dev\\thirdparty\\catch\\include\\internal/catch_notimplemented_exception.h\n1>  Note: including file:   d:\\dev\\thirdparty\\catch\\include\\internal\\catch_common.h\n1>  Note: including file:    C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\sstream\n1>  Note: including file:     C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string\n1>  Note: including file:      C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iterator\n1>  Note: including file:       C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\istream\n1>  Note: including file:        C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ostream\n1>  Note: including file:         C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ios\n1>  Note: including file:          C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocnum\n1>  Note: including file:           C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\climits\n1>  Note: including file:            C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h\n1>  Note: including file:             C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xkeycheck.h\n1>  Note: including file:             C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h\n1>  Note: including file:             C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\use_ansi.h\n1>  Note: including file:           C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cmath\n1>  Note: including file:            C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h\n1>  Note: including file:            C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtgmath.h\n1>  Note: including file:             C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtr1common\n1>  Note: including file:           C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstdio\n1>  Note: including file:            C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h\n1>  Note: including file:             C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h\n1>  Note: including file:             C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\swprintf.inl\n1>  Note: including file:           C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstdlib\n1>  Note: including file:            C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h\n1>  Note: including file:             C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h\n1>  Note: including file:           C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\streambuf\n1>  Note: including file:            C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xiosbase\n1>  Note: including file:             C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocale\n1>  Note: including file:              C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstring\n1>  Note: including file:               C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h\n1>  Note: including file:                C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h\n1>  Note: including file:              C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept\n1>  Note: including file:               C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception\n1>  Note: including file:                C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstddef\n1>  Note: including file:                 C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstddef\n1>  Note: including file:                 C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\initializer_list\n1>  Note: including file:                C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\eh.h\n1>  Note: including file:                 C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h\n1>  Note: including file:               C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstring\n1>  Note: including file:                C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmemory0\n1>  Note: including file:                 C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\limits\n1>  Note: including file:                  C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ymath.h\n1>  Note: including file:                  C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cfloat\n1>  Note: including file:                   C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h\n1>  Note: including file:                    C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h\n1>  Note: including file:                    C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtwrn.h\n1>  Note: including file:                     C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h\n1>  Note: including file:                  C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cwchar\n1>  Note: including file:                   C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h\n1>  Note: including file:                    C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h\n1>  Note: including file:                    C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wtime.inl\n1>  Note: including file:                 C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\new\n1>c:\\program files (x86)\\microsoft visual studio 12.0\\vc\\include\\new(59): error C2084: function 'void *operator new(unsigned int,void *)' already has a body\n1>          d:\\dev\\thirdparty\\kin\\pigs\\pos\\new.h(8) : see previous definition of 'new'\n. ",
    "jfemia": "I noticed this too - it's hard-coded.\nI made the following quick change to work around the issue (which may not be the best way but it solved my problem).\n```\n@@ -5582,5 +5582,5 @@\n             Totals totals;\n\ncontext.testGroupStarting( \"all tests\", 1, 1 ); // deprecated?\n\ncontext.testGroupStarting( context.config()->name(), 1, 1 ); // deprecated?\n     TestSpec testSpec = m_config->testSpec();\n\n@@ -5613,5 +5613,5 @@\n             m_reporter->skipTest( *it );\n\n\ncontext.testGroupEnded( \"all tests\", totals, 1, 1 );\n\ncontext.testGroupEnded( context.config()->name(), totals, 1, 1 );\n             return totals;\n         }\n```\n. Implementing your own main is the documented way. It is how I accomplish the global setup in my test runner.\n. Duplicate of #469?. \n",
    "hhinke": "I don't know what can be better than this solution, but worked well. Now the testsuite name is correctly set! thanks\n. ",
    "Sarev0k": "Wouldn't it be preferable to optionally have the testing framework append some configurable prefix to test names?\nI have my Catch tests segregated to a unique test file per class under test, and in some instances I have the same testCase name for two different classes.  Since I'm using different cpp files for each class, I would have expected that to be enough to prevent conflicts.\nHowever, since this is not the case, I'm resorting to the following:\n``` c++\ndefine TEST_PREFIX \"MyTestClass::\"\nTEST_CASE(TEST_PREFIX \"testCaseName\") {\n    // ...\n}\n```\n. Even if it's not done automatically based on cpp filename.\nI think It would still be helpful if Catch provided a Macro I could override that would prefix all my test cases in a file with a specific string.\nThis would allow me to do the following:\n``` c++\ndefine TEST_NAME_PREFIX \"MyTestFilePrefix\"\nTEST_CASE(\"testFoo\") {\n    // ...\n}\n```\nWhich would provide a test with the name of MyTestFilePrefix::testFoo.  With the added benefit that I don't have to manually prefix TEST_CASE names with TEST_NAME_PREFIX or redefine the TEST_CASE macro to do this for me.\nI also believe that by expanding this concept to also include tagging these tests by default would also allow @rcdailey to run only tests of a specific file, without needing to manually tag them all.\n. It looks like this may have been resolved in version 1.4.0 which incorporated philsquared/Catch/pull/351.\n. ",
    "rcdailey": "@Sarev0k I do the same thing for the tags (so that I can run all tests for a given class via a single tag).\nAt the moment it doesn't make sense to redundantly manage a prefix for the test case name either. I think Catch should utilize some scoping or name mangling mechanisms to generate unique names as it requires. This is an implementation detail that I shouldn't have to care about.\nMaybe I'm missing some fundamental design concepts here, but that's just my observation so far.\nI'm happy to contribute a code change if I can get some guidance from the author on what the problem is (if any) and a good way to fix it.\n. @philsquared Has this been addressed yet? I'm having to do some obscure workarounds:\n```\ndefine MAIN_TAG \"[MyClass]\"\n//....\nTEST_CASE(MAIN_TAG \" This is my test case\", MAIN_TAG)\n{\n    ......\n}\n``\n. Just wanted to ping this issue and see if there are any resolutions to this? Has this been addressed in a prior release?\n. I did test this again with theCOUNTER` change but I still see the problem (hence why #608 was still active). Happy to help diagnose why counter still wasn't working, I didn't dig too deep on it.\nLet me create a sample project that reproduces the problem.\n. Here is a sample I created:\nhttps://gist.github.com/rcdailey/9c757053bc49409a0458c90617d00122\nI used Visual Studio 2015 as my CMake generator to create this project. Enable exception breakpoints for C++ and you will get a throw due to duplicate test case names. So either the __COUNTER__ solution didn't work, or I'm confused about what it was supposed to really fix.\nLet me know if you're able to reproduce the issue.\n. You misspelled \"color\" :)\nProbably best to use \"color\", for example Git uses this spelling. Next person to add a color-based option might be American and use a different spelling. It will cause confusion.\n. I didn't realize IsAlpha() was a static function. Thank you for pointing it out.\n. I understand how exceptions work, what I'm specifically wanting to check is whether or not something throws, but if it doesn't, it should continue to execute the other CHECK assertions. My example is pretty poor, but basically if you swap out the first assertion for CHECK_NOTHROW it makes more sense.\nThe test framework should allow me to verify NO exceptions are thrown and continue to execute assertions based on the defined variable. But there is no mechanism right now for that. We'd basically need something like this:\nBEGIN_CHECK_NOTHROW();\nMyClass mc(\"foo\");\nEND_CHECK_NOTHROW();\nCHECK(mc.Stuff() == \"Stuff\");\nRight now I'm having to work around this by constructing two objects:\nCHECK_NOTHROW(MyClass{\"foo\"});\nMyClass mc{\"foo\"};\nCHECK(mc.Stuff() == \"Stuff\");\n. That's horrible and unintuitive. Not a valid solution as far as I'm\nconcerned.\nOn Mon, Nov 9, 2015, 5:48 PM Ryan Gonzalez notifications@github.com wrote:\n\n@nabijaczleweli https://github.com/nabijaczleweli Ok then...how about\nsomething like:\nchar storage[sizeof(MyClass)] alignas(MyClass);\nMyClass* mc = &storageCHECK_NOTHROW(new (mc) MyClass);\nCHECK(mc->Stuff() == \"Stuff\");\nReally, though, I doubt you'd need to worry about throwing std::bad_alloc\nin this case. I mean, strings and all allocate memory anyway, so it's just\nas likely they'll throw that error.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/536#issuecomment-155235834.\n. A macro based try catch is better for this as I suggested in my earlier example\n. Again my first example was wrong, I apologize. My intention was to check that it doesn't throw. Basically I wanted to handle the case where if it throws, it stops. Otherwise, execution and further tests continue.\n\nHowever (probably because it was Monday?), I had confused myself about this whole thing. I had forgotten that execution won't stop if it throws, so thank you for that.\nWhat I've done is split my code into 2 test cases:\n```\nTEST_CASE(\"Throws Exception\")\n{\n    CHECK_THROWS(TestClass{\"Invalid Value\"});\n}\nTEST_CASE(\"No Throwing; normal flow\")\n{\n    TestClass tc{\"Valid Value\"};\n    CHECK(tc.Stuff() == \"Stuff\");\n}\n```\nThis makes more sense and we track the 2 scenarios separately. I unfortunately don't get to use CHECK_NOTHROW on the 2nd test case, but like you say execution will stop if it throws.\nI don't want to use the heap because IMHO, especially for test driven development, the test should also represent how objects are meant to be used. This object specifically doesn't need to be on the heap. Many people write tests before writing their class interfaces, and it doesn't make sense to \"hack\" the test by using the heap for objects when it isn't necessary.\nI feel the solution I'm using now makes more sense from a test-case perspective, so I'll go ahead with that.\n. That will happen at static initialization time. That might cause issues. It would be better if catch's test execution worked like so:\nint main()\n{\n  InitTests();\n  Run();\n  CleanupTests();\n}\nYes, I know I can implement this myself, but I'm just asking if there is a built-in alternative. I dug through the source code and I didn't see anything but just want to be sure.\n. Honestly I wouldn't attempt to do any kind of cleanup in test case macros. The behavior of how they are executed may change at anytime. The structure of test cases may be misleading.\nRAII is the only guaranteed solution. \n. I'll close it for you. Yes I feel satisfied in the answer. The main motivation for asking was because of some global singletons we have in our legacy code base. Those have to be initialized and released. But I can do that with a simple wrapper. \n. I'm going to reopen this because I've hit another scenario that RAII doesn't solve easily for me. I'll explain.\nMy tests are structured in two ways, depending on the test translation unit. A series of sibling TEST_CASE macros, or TEST_CASE with several SECTIONs inside.\nOur code base unfortunately is legacy and has a lot of singletons in it. Most singletons are used behind the scenes, so you don't even really realize when you're sharing global state between test cases and/or sections. Furthermore, many of these singletons leave behind files in working directories that cause state sharing between test cases.\nTo help automate this cleanup, after every TEST_CASE completes (and I expect 1 TEST_CASE to complete for every SECTION within it that is executed), I delete a few common global singletons and delete some files from the test working directory. This guarantees that each test case or section starts \"fresh\". I have hundreds of test cases, so adding boilerplate RAII objects to the top of each one to do this cleanup is not sustainable and not feasible.\nI need a way to tie into test case & section scope to do this. So far I've leveraged a custom reporter to do this, but when you have SECTIONs nested in TEST_CASE, you don't get a testCaseEnded() callback. So I can't do this reliably.\nWhat other options do I have? I'm fine using a reporter for this (even though this feels like I'm abusing an unrelated system) but we would need to require that every sectionEnded() be followed by a testCaseEnded().. @philsquared This is a step in the right direction, but it doesn't address the semantic issue. Let's say I wanted to perform my global state cleanup at the start of every test case, then:\nWhen I have a test case with 2 sections, testCaseStarting() is not invoked between each SECTION. I expect this to happen because the order of execution through the nested scopes is:\n\nTEST_CASE(\"1\") -> SECTION(\"1\")\nTEST_CASE(\"1\") -> SECTION(\"2\")\n\nHowever, because my test case does some setup prior to each section (shared logic between the sections), I can't execute the global state cleanup at the start of each section. I see there's a testGroupStarting(), but this doesn't appear to be override-able from TestEventListenerBase. What would your recommendation be? I need to be able to execute global cleanup state just 1 time per single test case run, regardless of now many nested sections there are.. I've created a pull request that addresses the inconsistency with startingTestCase() with regards to sections. Please let me know if this is an acceptable change upstream. This makes the behavior a lot more consistent and allows me to do cleanup properly no matter how many nested leaf sections there are in a test case.. @philsquared : Would you have some time to review my pull request?. Looks like INFO logs are cleared each time you end a SECTION or TEST_CASE. Is this true? If so, I guess it's the responsibility of test structure to make sure that INFO messages are properly decomposed via scope and thus will be cleared?\n. Thank you\n. But logs are not printed while stepping through a test case right? And isn't your issue specific to Linux? \n. I think you are on the right track to step back and rethink and redesign this small feature. I can see how having colors enabled could not work well in certain consoles. So toggling this via command line parameter is reasonable. Thanks for your feedback.\nOn Tue, Feb 23, 2016, 1:55 AM Phil Nash notifications@github.com wrote:\n\nThat's a very good question.\nI can see that I specifically made that change in a dedicated commit (\ndbcd833\nhttps://github.com/philsquared/Catch/commit/dbcd833c724dee84b70154e3d55213042dd639ff)\nthree years ago - but the commit message just says, \"Don't use ANSI colour\ncodes when debugging\" - with no rationale or associated issue number (go\nme!)\nI think it's to do with the messages being sent to a debug output\nconsole (e.g. in XCode). Depending on your environment and how it is set-up\nthis may or may not happen - so it would be nice to have finer grained\ncontrol.\nThere is a --force-colour command line option (which I have just noticed\nis not documented - must fix that). Currently that's only looked at once it\nhas already selected the platformColourInstance() path - but it probably\nmakes sense to consult it here too. I might actually be changing that flag\nanyway (to incorporate #502\nhttps://github.com/philsquared/Catch/pull/502 as well). I'll try and\ncover all bases soon...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/590#issuecomment-187589248.\n. @kirbyfan64 I think maybe you're misunderstanding. I'm not saying it's impossible to break when duplicates are detected. I've got issues with how it's done.\n\nUsing exit() is unpredictable and difficult to diagnose its point of invocation. I had to grep the code base to find this instance. It's very difficult to maintain a set of breakpoints all over the place to intercept exit() calls. Using exceptions here would be far superior. it allows a single point of contact. For example, those that choose to define and control their own main() could have an opportunity to handle these exceptions.\nThis is a design issue that, IMHO, needs to be addressed for the long-term. I'll probably work on this since @philsquared seems pretty swamped right now. Open to feedback on design.\n. I agree that another issue should be opened that refers to this one\nOn Mon, Mar 13, 2017, 5:51 AM Phil Nash notifications@github.com wrote:\n\nFair point. They should probably be changed too - although they are not\nnamed in this issue (possibly raise another one?)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/issues/608#issuecomment-286074348,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABr6djk_L3lXI736xuXcUepFZWv32oQ4ks5rlR-9gaJpZM4HtJIG\n.\n. Thanks for responding. The logic used to handle the signal is fairly complex at first glance:\n\n```\ninline void fatal( std::string const& message, int exitCode ) {\n    IContext& context = Catch::getCurrentContext();\n    IResultCapture* resultCapture = context.getResultCapture();\n    resultCapture->handleFatalErrorCondition( message );\nif( Catch::alwaysTrue() ) // avoids \"no return\" warnings\n    exit( exitCode );\n\n}\n```\nWhich calls:\n```\nvirtual void handleFatalErrorCondition( std::string const& message ) {\n    ResultBuilder resultBuilder = makeUnexpectedResultBuilder();\n    resultBuilder.setResultType( ResultWas::FatalErrorCondition );\n    resultBuilder << message;\n    resultBuilder.captureExpression();\nhandleUnfinishedSections();\n\n// Recreate section for test case (as we will lose the one that was in scope)\nTestCaseInfo const& testCaseInfo = m_activeTestCase->getTestCaseInfo();\nSectionInfo testCaseSection( testCaseInfo.lineInfo, testCaseInfo.name, testCaseInfo.description );\n\nCounts assertions;\nassertions.failed = 1;\nSectionStats testCaseSectionStats( testCaseSection, assertions, 0, false );\nm_reporter->sectionEnded( testCaseSectionStats );\n\nTestCaseInfo testInfo = m_activeTestCase->getTestCaseInfo();\n\nTotals deltaTotals;\ndeltaTotals.testCases.failed = 1;\nm_reporter->testCaseEnded( TestCaseStats(   testInfo,\n                                            deltaTotals,\n                                            \"\",\n                                            \"\",\n                                            false ) );\nm_totals.testCases.failed++;\ntestGroupEnded( \"\", m_totals, 1, 1 );\nm_reporter->testRunEnded( TestRunStats( m_runInfo, m_totals, false ) );\n\n}\n```\nWhat is the goal with all of this logic? Would it be unreasonable to just completely remove the signal handlers and let the OS manage it? Quite honestly, the ideal solution would be to forward the interrupt to the OS so that it would function normally, but I'm not certain if we can do that. Thoughts?\n. I found this, hopefully it helps:\nhttp://www.alexonlinux.com/how-to-handle-sigsegv-but-also-generate-core-dump\n. What's the plan for this? Been a long time and it would be nice to have a backtrace for segfaults on linux, since most of the time we're running unit tests in our CI build server with no debugging tools or GUI.. So I'm still not getting a backtrace, maybe I'm doing something else wrong? Here is the output from one of my tests:\n```\n[1/2] cd /home/TABLETOPMEDIA/robert/frontend_unit_tests && /usr/local/bin/ctest -C Debug -T Test --output-on-failure\n   Site: febld\n   Build name: Linux-clang++-3.8\nTest project /home/TABLETOPMEDIA/robert/frontend_unit_tests\n    Start 1: Test_UI\n1/5 Test #1: Test_UI ..........................***Exception: SegFault  0.04 sec\nException during initilization of LinuxEventData std::exceptionException during initilization of LinuxEventData std::exception\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nTest_UI is a Catch v1.9.6 host application.\nRun with -? for options\n\nChecking JavaScript Timer.Start()\n/home/TABLETOPMEDIA/robert/frontend/Core/UI/Test/Source/JavaScript/TestJSTimer.cpp:36\n...............................................................................\n/home/TABLETOPMEDIA/robert/frontend/Core/UI/Test/Source/JavaScript/TestJSTimer.cpp:36: FAILED:\ndue to a fatal error condition:\n  SIGSEGV - Segmentation violation signal\n``. I'm fine doing that. I'd just like to learn more about why that expression won't work in oneCHECK` macro. There is nothing in the documentation to help me understand this.\n. Maybe this could be solved with a new type of assertion macro (variable arguments):\nCHECK_AND(a == b, c == d);\nCHECK_OR(e != f, g != h, x == z);\nAnother thought is to create AND and OR macros, but those would conflict too easy and is probably not the best approach:\nCHECK(a == b AND c == d);\nCHECK(e != f OR g != h OR x == z);\nJust some food for thought.\n. @philsquared Could you merge this? It's become a real pain to debug duplicate-named test cases and sections, since the application just aborts. This makes it at least possible to break on exception in Visual Studio and the like. It also gives helpful output on command line.\n. Thanks @philsquared !! Good luck on your other endeavors!\n. I explained it in my commit message and PR description.\n. So if I'm understanding you correctly, you need to know why I'd ever want to see files and edit them directly from Visual Studio. I felt the benefits were obvious.\nBuild systems like make or ninja only function on translation units, because header files do not compile into object files. However, CMake still accepts them in the list of source files for IDEs. They are not explicitly acted on by the toolchain, but CMake will make them appear in the IDE if you specify them. This allows for intellisense, which enables you to find symbols from within the IDE. Without these files included, I had to grep outside of Visual Studio to find code inside them. This is a huge pain.\nLinux developers that work with make or ninja directly are not impacted by this change and it does not benefit them unless they use some kind of IDE.\n. From this version:\nCatch v1.3.3\nGenerated: 2016-01-22 07:51:36.661106\n. I just verified that works:\nstatic_cast<bool>(!!(expr))\nEDIT: I just realized that code is silly, but I didn't try !!(expr) in isolation because I am not able to verify the original issue. All I can tell you is that the warning went away.\n. I did a little sample that shows how operator! and operator bool are used in the !!(expr) case; looks like it won't require the operator! (as long as you have a typecast operator for bool) but will use it if it exists.\nhttp://coliru.stacked-crooked.com/a/b89cb270243169f3\n. So just that I'm clear on this: CHECK effectively validates no thrown exception along with the expression? In other words, an exception thrown is treated as an assertion failure?\nThen that means really CHECK_NOTHROW is for expressions that do not yield boolean values, such as wrapping it around a function call that returns void?\nThanks for clarifying.\n. I guess what threw me off is the parameter for CHECK_NOTHROW is named expr, instead of stmt or something, so I figured any expression would be acceptable.\nAgain thanks for explaining.\n. If I'm using latest on master as of today, does your recommendation still stand? I noticed commit 7e4038d8488596e850a11c8fe236b59bca605444 which is similar to the cerr issue you brought up.. Also is it intended that I implement CumulativeReporterBase? Or is everything in reporters/catch_reporter_bases.hpp implementation detail?. So all I need to do is implement IStreamingReporter and stream out logs in the test case results variable in the test case ended overload? I looked at the junit one, and that's the gist of what it seems to be doing. But it's far more complex than what I need I think.. Can you give me an example? I started implementing IStreamReporter and it's becoming very complicated... what I have so far:\n```\nclass ErrorLogReporter : public IStreamingReporter\n{\npublic:\n   void addLogEntry(std::string log_entry)\n   {\n      m_logEntries.push_back(std::move(log_entry));\n   }\nvoid testCaseStarting(TestCaseInfo const& info) override\n   {\n      m_logEntries.clear();\n   }\nvoid testCaseEnded(TestCaseStats const& stats) override\n   {\n      for (auto const& entry : m_logEntries)\n      {\n         std::cout << entry << '\\n';\n      }\n   }\nReporterPreferences getPreferences() const override\n   {\n      static ReporterPreferences preferences;\n      return preferences;\n   }\nvoid noMatchingTestCases(std::string const& spec) override {}\n   void testRunStarting(TestRunInfo const& testRunInfo) override {}\n   void testGroupStarting(GroupInfo const& groupInfo) override {}\n   void sectionStarting(SectionInfo const& sectionInfo) override {}\n   void assertionStarting(AssertionInfo const& assertionInfo) override {}\n   bool assertionEnded(AssertionStats const& assertionStats) override { return false; }\n   void sectionEnded(SectionStats const& sectionStats) override {}\n   void testGroupEnded(TestGroupStats const& testGroupStats) override {}\n   void testRunEnded(TestRunStats const& testRunStats) override {}\n   void skipTest(TestCaseInfo const& testInfo) override {}\nprivate:\nstd::vector m_logEntries;\n};\nCATCH_REGISTER_REPORTER(\"ErrorLogReporter\", ErrorLogReporter)\nclass CatchSink : public LogSink\n{\npublic:\n///////////////////////////////////////////////////////////////////////////////\n   ///\n   ///////////////////////////////////////////////////////////////////////////////\n   CatchSink(std::shared_ptr catch_reporter)\n      : m_reporter(catch_reporter)\n   {}\n///////////////////////////////////////////////////////////////////////////////\n   ///\n   ///////////////////////////////////////////////////////////////////////////////\n   void Consume(Severity severity, std::string const& module_name, std::string const& file_name,\n      LoggerLineNumberType line, std::string const& uxid, std::string const& tag,\n      std::string const& message) override\n   {\n      std::ostringstream ss;\n      BuildLogPrefix(ss, module_name, file_name, line, uxid);\n      ss << std::setw(8) << std::left << severity\n         << \" [\" << ErrorLog::Instance().GetTag() << \"] \" << message;\n  m_reporter->addLogEntry(ss.str());\n\n}\nprivate:\nstd::shared_ptr m_reporter;\n};\n```\nAnd to set it up I'm trying:\n```\nvoid SetupLogging()\n{\n   auto reporter = std::make_shared();\n   auto sink = std::make_unique(reporter);\nErrorLog::Instance().RemoveAllSinks(); // get rid of auto-added platform sinks\n   ErrorLog::Instance().AddSink(std::move(sink));\n// somehow add reporter to catch?\n}\n```\nBut it looks like you don't add reporters this way. You have to use the CATCH_REGISTER_REPORTER, but this is failing with:\n\nError C2275   'ErrorLogReporter': illegal use of this type as an expression\n\nIt's not clear to me how to do what you're saying. I'm not that familiar with the internals of Catch and most of this doesn't seem documented in the reference document.. Ok CATCH_REGISTER_REPORTER doesn't work but INTERNAL_CATCH_REGISTER_REPORTER does. This seems broken.. I can't get access to the reporter object that Catch seems to be creating internally, so I can't connect it to my Sink. Not sure how to do this.. I'll try your example. How does stdOut and stdErr normally get printed? Seems like the code you added to check allOk() should already happen somewhere, because I do not see logs printed to std::cout usually unless a test case fails.. I normally do not mess with reporters explicitly. Based on the code this means \"console\" becomes the default if the reporters list is empty. I'm asking on a more general level though (basically, ignore any customization). I just want to know about how the console reporter normally handles stdout & stderr, and how your changes impact/supplement that behavior.. How can I implement assertion-level granularity with your solution?. This is getting too complicated, so I'm going to go ahead and implement UnscopedMessage and respective macros.. Ok I got UNSCOPED_INFO working but there's a few issues I don't like:\n\nThe messages do not get cleared between failed assertions\nThe messages get word-wrapped (I want them to not be word wrapped)\n\nBased on this I think I want to try the reporter again. However, I want to meet the following requirements:\n\nEach failed test case should print stdout logs that occurred since the following (whichever happened last):\nThe beginning of the containing section or test case\nThe last failed assertion\n\n\nLine wrapping should not occur on the printed logs (no processing at all)\n\nI'm still not sure how to do this on the assertion begin/end macros, since the stdOut member is not available, so thus I am not sure how to clear the logs each time.. So after struggling with Catch code even more, I decided it's much simpler to bypass Catch completely. Basically, I implement a custom reporter that manages printing its own log buffer separate from Catch:\n```\nusing namespace Catch;\nnamespace\n{\n   std::string g_logSinkOutput;\n}\nclass CatchSink : public LogSink\n{\npublic:\n///////////////////////////////////////////////////////////////////////////////\n   ///\n   ///////////////////////////////////////////////////////////////////////////////\n   void Consume(Severity severity, std::string const& module_name, std::string const& file_name,\n      LoggerLineNumberType line, std::string const& uxid, std::string const& tag,\n      std::string const& message) override\n   {\n      std::ostringstream ss;\n      if (!g_logSinkOutput.empty())\n      {\n         ss << '\\n';\n      }\n  BuildLogPrefix(ss, module_name, file_name, line, uxid);\n  ss << std::setw(8) << std::left << severity\n     << \" [\" << ErrorLog::Instance().GetTag() << \"] \" << message;\n\n  g_logSinkOutput += ss.str();\n\n}\n};\nclass ErrorLogReporter : public ConsoleReporter\n{\npublic:\n   ErrorLogReporter(ReporterConfig const& config)\n      : ConsoleReporter(config)\n   {}\nstatic std::string getDescription()\n   {\n      return \"ErrorLogReporter\";\n   }\nvoid testCaseEnded(TestCaseStats const& stats) override\n   {\n      ConsoleReporter::testCaseEnded(stats);\n      g_logSinkOutput.clear();\n   }\nbool assertionEnded(AssertionStats const& stats) override\n   {\n      auto result = ConsoleReporter::assertionEnded(stats);\n  if (!stats.assertionResult.isOk() && !g_logSinkOutput.empty())\n  {\n     Catch::cout()\n        << \"#######################################################################\\n\"\n        << \"## CAPTURED LOGS\\n\"\n        << \"#######################################################################\\n\"\n        << g_logSinkOutput << \"\\n\"\n        << \"#######################################################################\\n\"\n        << \"\\n\"\n     ;\n\n     g_logSinkOutput.clear();\n  }\n\n  return result;\n\n}\n};\nINTERNAL_CATCH_REGISTER_REPORTER(\"ErrorLogReporter\", ErrorLogReporter)\n```\nMy CatchSink is where all logs in our code base funnel to. This fills a global std::string as if it were std::cout. Then when the reporter detects a failed assertion, it prints the contents of the global std::string and clears it (that way I only see logs that happen between each failed assertion or since the beginning of the test case).\nSo far this is working nicely and it's simple.\nIf there's anything Catch could benefit from after my struggles, is better documentation for the reporters. Explain the inputs to each reporter member function. Explain the base reporters and their purpose, as well as potential use cases for overriding them.\nHopefully that gets more flushed out over time.. @horenmar Thank you !!!\nFor auditing purposes: 1701325caa11af8ceff92c7254e12f5a8f77ada5. I see a few commits for this have been made. Is this possible yet?. So I finally got around to testing this, and I'm having some difficulty. I am using the official 2.0.1 release of Catch. Here is my reporter:\n```cpp\ndefine CATCH_CONFIG_EXTERNAL_INTERFACES\ninclude \nclass ErrorLogReporter : public Catch::ConsoleReporter\n{\npublic:\n///////////////////////////////////////////////////////////////////////////////\n   ///\n   ///////////////////////////////////////////////////////////////////////////////\n   ErrorLogReporter(Catch::ReporterConfig const& config)\n      : Catch::ConsoleReporter(config)\n   {}\n///////////////////////////////////////////////////////////////////////////////\n   /// Describes this reporter to Catch. Required by the template functions used\n   /// when the INTERNAL_CATCH_REGISTER_REPORTER macro is called.\n   ///////////////////////////////////////////////////////////////////////////////\n   static std::string getDescription()\n   {\n      return \"ErrorLogReporter\";\n   }\n///////////////////////////////////////////////////////////////////////////////\n   /// Invoked when a catch test case (TEST_CASE macro) is about to start. Clear\n   /// the buffered logs each time a test case starts.\n   ///////////////////////////////////////////////////////////////////////////////\n   void testCaseStarting(Catch::TestCaseInfo const& info) override\n   {\n      Catch::ConsoleReporter::testCaseStarting(info);\n      CatchSink::ClearLogs();\n   }\n///////////////////////////////////////////////////////////////////////////////\n   /// Invoked when a section (SECTION macro) is about to start. Clear the\n   /// buffered logs each time a section starts.\n   ///////////////////////////////////////////////////////////////////////////////\n   void sectionStarting(Catch::SectionInfo const& info) override\n   {\n      Catch::ConsoleReporter::sectionStarting(info);\n      CatchSink::ClearLogs();\n   }\n///////////////////////////////////////////////////////////////////////////////\n   /// Invoked each time a test assertion macro is done evaluating. This is\n   /// overridden for the purposes of printing logs captured by CatchSink only if\n   /// the assertion in question fails (i.e. is not \"ok\").\n   ///////////////////////////////////////////////////////////////////////////////\n   bool assertionEnded(Catch::AssertionStats const& stats) override\n   {\n      // Allow catch to print the results of the assertion failure first.\n      // We'll print our own logs below that.\n      auto result = Catch::ConsoleReporter::assertionEnded(stats);\n  auto const& logs = CatchSink::LogOutput();\n  if (!stats.assertionResult.isOk() && !logs.empty())\n  {\n     Catch::cout()\n        << \"#######################################################################\\n\"\n        << \"## CAPTURED LOGS\\n\"\n        << \"#######################################################################\\n\"\n        << logs << \"\\n\"\n        << \"#######################################################################\\n\"\n        << \"\\n\"\n        ;\n\n     CatchSink::ClearLogs();\n  }\n\n  return result;\n\n}\n};\n```\nFirst compiler issue is that it says Catch::ConsoleReporter is not available. And looking at the single header, that class is not within the ifdef block for CATCH_CONFIG_EXTERNAL_INTERFACES. So how can I properly implement this reporter?. One thing I learned through this is how to properly register reporters. What I was doing before was customizing the console reporter, which is harder. What I have now is a completely custom reporter, that I add in addition to the built-in console reporter, which allows me to append information in the output after the normal console output. This is the desired behavior in my case, and much better.\nHaving said that, one thing that is severely missing is documentation on reporters, examples of how to implement then, explanations of the interfaces a subclass can implement, and so forth. I think it's important to help teach people the proper way of doing these advanced integrations into Catch.\nI get that reporters have been a bit of a moving target the past few months, but hopefully with 2.0 release line things stabilize enough that reliable documentation can be written. I'd offer to do this, but I'm still struggling to understand fundamentals, so I think someone more knowledgeable on the topic should do it. Either way this is outside the scope of this particular issue.. No feedback? :-(. Not familiar with that option. What does it do?\nOn Sat, Feb 3, 2018, 4:49 AM Martin Ho\u0159e\u0148ovsk\u00fd notifications@github.com\nwrote:\n\nSorry, I have been a bit busy lately with my master's thesis.\nUltimately I don't think it provides enough value for inclusion in the\nmain release, but it might be useful to some people. Since of the things I\nwant to do, when I finally find enough time, is to add various other\nutility macros and matchers that are not worth inclusion in the main header\nto contrib/, this might be a good start.\nAs a side note, do you know about -# option? If you are keeping to one TU\nper tested class, it is already fairly close to the tagging you want to do\n(in fact, its exactly how we use it in a project).\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/issues/1154#issuecomment-362797467,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABr6dgj7Tl1sqGDZVR3_UViCBsZCOSiEks5tRDmmgaJpZM4RgO8t\n.\n. Thanks for explaining. It's very close to what I need, but not quite. The\nautomatic tags should be based on the name of the class under test, not the\ntest itself.\n\nOn Sat, Feb 3, 2018 at 11:00 AM Martin Ho\u0159e\u0148ovsk\u00fd notifications@github.com\nwrote:\n\n-# adds filename (not including extension) to the tags of each test case.\nE.g. if you have file buffer-tests.cpp containing some TEST_CASEs, when\nyou pass -# each of the test cases will be tagged with [#buffer-tests] in\naddition to their usual tags,\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/issues/1154#issuecomment-362833912,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABr6duPrSXrFkv0m_r39dgoBsF_mwOZOks5tRJCegaJpZM4RgO8t\n.\n. I'll go ahead and close this issue. Looks like this isn't going to be very useful to a wider audience since I get the feeling from your responses that the way we do unit testing structure is unusual. I'm not sure if there's a de facto standard we should be following.\n\nThanks for hearing out my idea!. I'd be happy to do that, although I'm a bit unfamiliar with contrib (I'll see if there's something to read). How can I polish the change to make it more useful? Do you have any advice on cleanup I can do? Should this be documented as a macro that enforces a certain structure?. Ok I'm going to make you a MCVE. Got an MCVE, ran to test, wasn't able to reproduce. I realized it was some bad logic in a custom reporter I had implemented. Closing as there is no real issue.. This is a really old issue. Users no longer have an option to implement multiple reporters, so this is probably a non-issue, assuming the listener interfaces do not do the same thing: force users to implement certain functions for no apparent reason.. I'll go ahead and close this issue since architecture of this stuff has changed significantly since it was reported. Thanks for your feedback.. Note that I did not touch testCaseEnded() on purpose. I want to see how everyone feels about modifying the semantics of an existing reporter function. An alternative solution would be to add a new function named testLeafStarting() or something along those lines, and leave the test case centric reporting methods alone.\nLooking for design advice.. I decided to go ahead and create an init / deinit method pair, similar to the started/ended methods we currently have in reporters. This allows setup and teardown logic to occur per \"leaf\" test (could be a section or test case). I amended a change that enables the testStepDeinit() method to be invoked when a test case throws an exception (utilizing an RAII object).\n@philsquared I opened this 16 days ago and have continued to keep it updated. When can I expect someone to have time to get me some feedback and possibly merge the change?. @horenmar If maybe phil is not available, would you be able to contribute some feedback?. @horenmar / @philsquared : Please respond.. Thanks Phil, and again sorry to rush, I just wanted to make sure any major suggestions are made as early as possible so I can make any changes you need. I've written unit tests on my side to depend on these changes, so in order to avoid our code depending on it too long, I wanted to get it reviewed & merged with the final interface (if changes are needed).\nI can be patient. Hopefully someone will have time for this soon. Thanks for replying back!. @onqtam The way these various functions work makes sense from a reporting perspective, but to do any kind of functional (program-affecting) logic, they're not sufficient. My new methods utilize RAII to make sure the init happens prior to entering a test case, and that deinit happens after the closing scope of the test case. They enable you to do setup/tear-down logic at a global level in the window of time where no objects should be alive in any active test cases or sections. They also allow tear-down to happen when exceptions are thrown.\nThere were 2 main problems I couldn't solve with the existing reporter methods:\n\nSingletons could not be released between each test case or section\nWorking directory files could not be deleted\n\nTo execute any of the above actions requires that no active objects in a test case or section be alive. You can't tear-down in sectionEnded(), for example, because this is executed prior to the test case scope ending (objects still alive at the test-case level) and you can't use testCaseEnded() because this is not executed more than once with 2 or more sections inside it.. Do you have an example of the fixture class? I'm not understanding how that\nfixes the issue.\nOn Wed, Jul 25, 2018, 12:30 PM Phil Nash notifications@github.com wrote:\n\nSorry - been ultra busy for a while (again) - just finished with one\n(work) release, so have a brief moment of downtime - thanks for the ping\noffline...\nThere's a couple of ways you could achieve the same goal without changing\nanything.\n\nYou could keep a count of section nesting (++ in sectionStarting,\n   -- in sectionEnded. Before and after, respectively, if you check for 0\n   you know you're dealing with the section call that corresponds to the test\n   case.\nYou could use a(n old school) fixture class and do your init/\n   deinit in the ctor/ dtor of that.\n\nIf necessary I could maybe add a flag to SectionInfo that indicates if\nit's for a TEST_CASE or not, so you could check that.\nGive that we already make a reporter/ listener call for this event (\nsectionStarting/Ended) I'd rather not add an extra one - especially given\nthere are a couple of ways to do it that aren't too burdensome. I admit the\nfirst option is a little less obvious - but the second one, at least, seems\nto be the right fit?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/pull/1261#issuecomment-407833779, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABr6dhc7-qMRJogIueCTwg8d2Ceg0aLGks5uKKshgaJpZM4Th00P\n.\n. @philsquared Ping? Right now I'm doing your 1st suggestion:\n\n```\nvoid GlobalStateCleanup::sectionStarting(Catch::SectionInfo const& _sectionInfo)\n{\n   ++m_sectionDepth;\n}\nvoid GlobalStateCleanup::sectionEnded(Catch::SectionStats const&)\n{\n   if (m_sectionDepth > 0 && --m_sectionDepth == 0)\n   {\n      DeleteGlobalState();\n   }\n}\n```\nWhile this is simple enough, I'd still like to see a code example of the fixture class you were talking about. I've never done that in Catch and not familiar with it.. But that test fixture class doesn't get constructed for normal TEST_CASE test cases right? Only the fixture-based test cases? 100% of my unit tests are global, so I'm not sure how this addresses the transparency/automation requirement. Basically with the listener, it happens regardless of how the test case is written. Does the Fixture offer that same benefit? Or does it require all test cases be written as fixtures using the same class?. I'm starting to realize this doesn't solve my problem. Basically, my code change addresses cleanup at the leaf-section level, whereas this solution only does the cleanup after the root section (the test case). If I have a test case with 3 sections inside of it, I need all 3 sections inside to get cleaned up after they run (one per whole pass of the test case), but the outer test case (or even intermediate sections) do not need cleanup since they would have already been cleaned up by the nested section. Does this make sense?\nAlso the tricky part as well is making sure RAII objects at test case scope get destructed prior to sectionEnded, for any leaf section, which currently is not possible due to the timing of when it is called (it's called prior to the scope of the root test case ending). The more I'm thinking about this, I think the more I might be getting confused. Let me write an MCVE and get back with you. Ok you're right, this is the same. Here's a live sample:\nhttps://wandbox.org/permlink/b8XwAfXxopzhU6Fw\nThis code:\n```cpp\nclass GlobalStateCleanup : public Catch::TestEventListenerBase\n{\npublic:\n// Inherit constructor\nusing TestEventListenerBase::TestEventListenerBase;\n\nvoid sectionStarting(Catch::SectionInfo const&) override\n{\n    ++m_sectionDepth;\n}\n\nvoid sectionEnded(Catch::SectionStats const&) override\n{\n    if (m_sectionDepth > 0 && --m_sectionDepth == 0)\n    {\n        DeleteGlobalState();\n    }\n}\n\nprivate:\nvoid DeleteGlobalState()\n{\n    std::cout << \"Global State Deleted\\n\";\n}\n\nunsigned m_sectionDepth{};\n\n};\nCATCH_REGISTER_LISTENER(GlobalStateCleanup)\nTEST_CASE(\"Root Test\", \"[test]\")\n{\n    std::cout << \"Begin Test Case\\n\";\nSECTION(\"Section One\")\n{\n    std::cout << \"Section One\\n\";\n}\n\nSECTION(\"Section Two\")\n{\n    std::cout << \"Section Two\\n\";\n}\n\nstd::cout << \"End Test Case\\n\";\n\n}\n```\nYields this output:\nBegin Test Case\nSection One\nEnd Test Case\nGlobal State Deleted\nBegin Test Case\nSection Two\nEnd Test Case\nGlobal State Deleted\n===============================================================================\ntest cases: 1 | 1 passed\nassertions: - none -\nWould it be useful to create a generic Listener for this in contrib? Basically something like:\n```cpp\nclass GlobalStateCleanup : public Catch::TestEventListenerBase\n{\npublic:\n// Inherit constructor\nusing TestEventListenerBase::TestEventListenerBase;\n\nvirtual void initTest(Catch::SectionInfo const&) {}\nvirtual void deinitTest(Catch::SectionStats const&) {}\n\nprivate:\nvoid sectionStarting(Catch::SectionInfo const& info) final\n{\n    if (m_sectionDepth++ == 0)\n    {\n        initTest(info);\n    }\n}\n\nvoid sectionEnded(Catch::SectionStats const& stats) final\n{\n    if (m_sectionDepth > 0 && --m_sectionDepth == 0)\n    {\n        deinitTest(stats);\n    }\n}\n\nunsigned m_sectionDepth{};\n\n};\n```\nThat way anyone that wants to do this only has to implement GlobalStateCleanup and implement either of initTest() and deinitTest()? If you think it's a good idea, maybe help me figure out some better names and I'm happy to open a new PR. Thanks @philsquared !!. Better example:\n```cpp\nclass TestInitDeinitListener : public Catch::TestEventListenerBase\n{\npublic:\nusing TestEventListenerBase::TestEventListenerBase;\n\nvirtual void initTest(Catch::SectionInfo const&) {}\nvirtual void deinitTest(Catch::SectionStats const&) {}\n\nprivate:\nvoid sectionStarting(Catch::SectionInfo const& info) final\n{\n    if (m_sectionDepth++ == 0)\n    {\n        initTest(info);\n    }\n}\n\nvoid sectionEnded(Catch::SectionStats const& stats) final\n{\n    if (m_sectionDepth > 0 && --m_sectionDepth == 0)\n    {\n        deinitTest(stats);\n    }\n}\n\nunsigned m_sectionDepth{};\n\n};\nclass GlobalStateCleanup : public TestInitDeinitListener\n{\npublic:\nusing TestInitDeinitListener::TestInitDeinitListener;\n\nvirtual void initTest(Catch::SectionInfo const&)\n{\n    std::cout << \"Init Test\\n\";\n}\n\nvirtual void deinitTest(Catch::SectionStats const&)\n{\n    std::cout << \"Deinit Test\\n\";\n}\n\n};\nCATCH_REGISTER_LISTENER(GlobalStateCleanup)\n```. Is the intent that I should use a listener instead? I have to say it's a giant pain in the ass that reporters aren't properly documented, and there's no tutorial / reference for listeners vs reporters. Reporters API has been very volatile and it's been difficult to keep track of the general direction the Catch developers are taking things.\nFor example the commit I referenced has no helpful description. There's no issue or pull request I could find that explained the purpose of the change and what users should do that depended on the old interface.. Hey thanks for responding!\nYour explanation helps. I actually moved my reporter to a listener and it worked out fine. I think the main issue here is documentation: It's not clear what I should do as a user depending on my goals. The cases you mentioned as motivation for reducing reporters down to a single one did not apply to me. I simply needed to supplement test diagnostic output. For these simple cases, I think a reporter makes more sense (just based on the name of the class) since I'm reporting something, not really doing logic-based stuff (to me this is what listeners appear to be intended for). Not sure what the purpose of the two is though.\nTo my complaints about API: I don't remember specifics since it was a year or so ago. But I remember most of it being maybe the upgrade to 2.0 catch. At one point, I remember virtual overrides being different. Base class function signatures changing. I also remember the way you include catch.hpp being a little complicated when you have multiple translation units.\nI know it sounded like I was venting, but my intention was to be a bit more constructive: I'm not bothered about the change itself. What bothers me the most is lack of documentation. There are questions that are very difficult to find answers to right now:\n\nWhen do I choose a reporter versus a listener? What are the guidelines? Examples of tasks for each?\nWhich reporter base class do I derive from and how does the context of what I'm trying to accomplish affect that decision?\nWhat are the semantics behind each of the callbacks (e.g. testCaseStarted)? For example, I had to find out the hard way that when you have a SECTION within a TEST_CASE, and you try to delete global objects that local objects of the parent TEST_CASE depended on in sectionEnded(), this caused undefined behavior since the destructors of local objects in that parent TEST_CASE have not been invoked yet. This is part of the reason for my init/deinit pull request.\nWhere are the examples of good uses for reporters, how to leverage them in a useful way, such as appending output to the logs?\nWhen an interface change happens in listener or reporter base classes, what actions should the user take? Why are changes to those interfaces not backward-compatible?\n\nI ultimately had to dig into the catch code base to find answers to most of these. But definitely having documentation in the form of a tutorial for reporters & listeners with lots of examples would be amazing.\nAs it relates to this issue, I have one other concern. While switching from reporter to a listener resolved the requirement I had for multiple reporters, I am now no longer able to control the order of the listeners relative to the reporter. In the reporter names list, the order of the strings in the list controlled the order of output on assertion failure. For example, I put \"console\" first, and my reporter second, so that my output came after catch's output. With listeners, I cannot control this.\nHaving no control over this seems fine, depending on why listeners were designed and the problems they're intended to solve. It could be that they were never intended to be for console output. In this case, I expect no change. But the problem still remains: How do you amend console output in a controlled way? If reporters can't do this (because you can only have one) and listeners aren't for this, then there's no solution. Either this is solvable today and just a documentation problem, or there's some serious design confusion.. @philsquared: Would love to get your feedback on this. I know you're busy but hopefully you can spare a few minutes. Thanks!. ",
    "LujunWeng": "Thank you for reply. But that seems not what I want. \nI am trying to write a Catch adapter for Visual Studio, but I don't know how to cooperate with Catch. \n. Thank you for responding and sorry for my poor English.  \uff1a\uff09\nMy original intention is to find a way to enumerate all test cases, start all test cases and collect information through some simple interface. Therefore, I can generate a DLL file or something similar which I can use GUI to find and run it. \nAfter the issue was posted, I found I can use the command line to tackle this. But, I still hope there is easy way to find Catch tests, enumerate all test cases and run them. \nAgain, thank you for this project. I will continuously study this project and learn from it. I hope I can make some contribution to it in future. \n. ",
    "eloff": "I'm also looking to add setup and teardown code around every test case. GTest allows this through defining a TestEventListenerProxy and overriding the virtual methods OnTestStart and OnTestEnd.\nMy use case is I have a lot of custom logging, and I want to buffer it during a test run and then either dump the buffer to stderr on test failure or erase it on success. There's no point cluttering the output for passing tests, but it's helpful to see for failures.\n. @philsquared Thanks for responding so quickly, I did not expect that after my experiences with other GitHub open-source projects. It seems I am the tardy one here.\nI will try replacing my logging with INFO when running under the tests, it may be enough. I've already replaced my assertions with REQUIRE when under tests, so it seems workable (with REQUIRE I discovered care must be taken not to call assertions in e.g. global setup code that runs outside of the tests.)\nI'm also very happy to see the event listener. That was the only remaining feature of GTest that I miss. I'm now very happy that I settled on catch for this project!\nFrom my POV you can close this issue as resolved.\n. @philsquared I tried setting shouldRedirectStdOut = false to true (I changed it everywhere in the code where I found it, not just the indicated line) and it works a treat for hiding all output, but it also hides the output when the test fails, which I don't want. I think the event listener, plus manually buffering/flushing log output should work. It's similar to what I used to do with GTest.\n. Just use WARN?\n. I went back and looked up that test file, I think I just assumed !shouldfail is a way of documenting/separating tests for failure conditions from success conditions. I don't see any reason why I couldn't just check inverse conditions or exceptions as you say.\nMaybe the only thing to do here is update the docs for !shouldfail to make the intended use more clear and mention that a passing !shoudlfail test will still produce output.. ",
    "nicolaje": "Note this doesn't happen if the tab is in a string, such as in this situation:\nTEST_CASE(\"A test case\")\n{\n    string tab(\"\\twith\\ttab\");\n    INFO(\"info\"<<tab);\n    CHECK(false);\n}\n. ",
    "jmmut": "I'm using the version 1.5.6 and there is still some problem. I'm using linux and it doesn't crash, but it does weird things.\nFor example, with the code of @nicolaje, the last \\t disappears:\n../test.cpp:128: FAILED:\n  CHECK( false )\nwith message:\n  info  withtab-\n. ",
    "qwoodmansee": "@nicolaje I just ran into this as well - for anyone else who runs into this, David provided me the insight I needed to solve it. Steps Listed below:\n1. Change CATCH_CONFIG_MAIN to CATCH_CONFIG_RUNNER\n2. Add this main to that file:\n```\nint main(int argc, char* const argv[]) {\n    int result = Catch::Session().run(argc, argv);\nwhile (true);\nreturn result;\n\n}\n```\nNote that you'll have to kill the program via visual studio unless you implement another way to end the while loop.\n. ",
    "mjammer": "Alternatively,with Visual Sutdio,you can also replace while(true); with system(\"pause\");.\n\n@nicolaje I just ran into this as well - for anyone else who runs into this, David provided me the insight I needed to solve it. Steps Listed below:\nChange CATCH_CONFIG_MAIN to CATCH_CONFIG_RUNNER\nAdd this main to that file:\nint main(int argc, char* const argv[]) {\n    int result = Catch::Session().run(argc, argv);\n    while (true);\n    return result;\n}\n. \n",
    "josh-ent": "It wouldn't be too much hassle, I assume, to add a --waitkey switch and modify the auto-generated main routines a little?\nAs it stands, I've beggered with my own copy a little and added a wait directly into catch.hpp (in blatant violation of the polite request not to change the merged file, sorry).\n. ",
    "40tude": "Bonjour\nI'm just getting starting with unit testing and CATCH \nI'm working mostly under Windows with msvc 2017RC & msvc 2015-3\nRe-using @DavidEGrayson proposition I'm able to keep the console on screen during debug session (many thanks for the tips).\nHowever I lost the colors.\nDo you confirm this is what is expected ?\nIs there anything we could do to get the colors back in the console of the debug session? \nWhat is so special with that console which make we loose the colors? I do not have a clear understanding on what is going on here. Any explaination are welcome here :-)\nFYI : everything works fine and I get the colors when I run the application out of the debug session (either from the IDE or directly invoking the test code from a console).\nAny advise/idea are more than welcome\nBest regards, Philippe\nPS : like some others I support the idea of a switch that would let the console on screen during debug sessions. ",
    "bkentel": "This is still an issue in the following locations:\nhttps://github.com/philsquared/Catch/blob/master/include/internal/catch_stream.h#L52\nhttps://github.com/philsquared/Catch/blob/master/include/internal/catch_config.hpp#L154\nhttps://github.com/philsquared/Catch/blob/master/include/internal/catch_test_case_registry_impl.hpp#L44\n. ",
    "BrettRyland": "I've also just been bit by the __cplusplus value of VS2015 being 199711L while compiling the example in the tutorial and using the /std:c++latest compiler flag. Manually defining #define CATCH_CPP14_OR_GREATER before including catch.hpp fixed the problem though.\n. @horenmar Sorry for the late reply, I was on holiday. Indeed, the current master fixes the problem for me. Thanks!. ",
    "cossio": "Oh, so it's a problem with CLion, not Catch. Good to know. Hope they fix it. Thanks for your reply.\n. ",
    "cdolan": "This issue is reproducible with clang as well.\n. ",
    "xxv": "An interesting note: if you change the a=1 to a=0, the infinite loop does not trigger.\n. In this case, I was testing some callback triggering, which was using global state to verify invocations. So I'll try to come up with some better way of validating that the callback has been triggered.\nI agree about the repetition message/aborting; that would be very useful. At the very least, it would likely aid those doing CI with Catch. On a shorter timescale, one thing that would help would be to make it clear (in documentation) that sections are not guaranteed to be executed linearly and that global state mutations are not supported.\nOn a longer timescale, would it be possible to detect global state mutation and give a warning about it? That is, addressing the problem not the symptoms.\n. ",
    "amerry": "I've run into this without global state as such, but with a flaky test. While \"don't do that\" might be reasonable when it comes to global state, tests that only fail sometimes are an unfortunate reality of finding bugs in software, and I'd rather have it exit (or just abandon the test case) than looping forever.\nI only needed the following, BTW:\ncpp\nbool success = true;\nTEST_CASE(\"\") {\n    REQUIRE(success);\n    success = false;\n    SECTION(\"\") {\n    }\n    SECTION(\"\") {\n    }\n}\n. ",
    "czipperz": "That still doesn't work.\n. @kirbyfan64 it was already in my issue... 5.2.0\n. @PureAbstract You can't have a const value without a value (clang and gcc both give same error for this)\n. @philsquared compiling the develop version on both clang and gcc gives a bunch of errors. (was using master before)\n. I tried the master again (I am using a different computer but same setup now) and it works.\n. No, turns out the develop version didn't work because I didn't recompile the main test file (that has no tests).  Thanks for the help everyone!\n. Here is my favorite way:\nNote that this breaks down if you add more SECTIONs, GIVENs, WHENs, etc.\nSECTION is a glorified if statement that branches based on its count at run time.  The method will be ran N times top to bottom, each SECTION being ran one time per run.\n```\nTEST_CASE(\"Test foo\")\n{\n    Foo foo;\n    SECTION(\"bar\") { foo.setBar(\"bar\"); }\n    SECTION(\"baz\") { foo.setBar(\"baz\"); }\n    SECTION(\"bazzz\") { foo.setBar(\"bazzz\"); }\nREQUIRE(foo.hasBar());\nREQUIRE(foo.isValid());\n\n}\n```\nHere it won't call setBar one time!\n```\nTEST_CASE(\"Test foo\")\n{\n    Foo foo;\n    SECTION(\"bar\") { foo.setBar(\"bar\"); }\n    SECTION(\"baz\") { foo.setBar(\"baz\"); }\n    SECTION(\"bazzz\") { foo.setBar(\"bazzz\"); }\nREQUIRE(foo.hasBar());\nREQUIRE(foo.isValid());\n\nSECTION(\"no setBar\") {}\n\n}\n```\n. This is the command line parser https://github.com/philsquared/Clara.\n. Catch already registers tests and runs them automatically with TEST_CASE.  See the tutorial:\nPut this in main.cpp:\n```\ndefine CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file\ninclude \"catch.hpp\"\n```\nIf you want to do stuff before / after the tests are run, see own-main:\n```\ndefine CATCH_CONFIG_RUNNER\ninclude \"catch.hpp\"\nint main( int argc, char* const argv[] )\n{\n  // global setup...\nint result = Catch::Session().run( argc, argv );\n// global clean-up...\nreturn result;\n}\n```\nIf you look at the source code for TEST_CASE, it creates a semi-random function name.  Use the following to be able to call these test functions from others (which you shouldn't do probably):\n```\ninclude \"catch.hpp\"\nvoid testRectangle() {\n...\n}\n// global variable!\nnamespace {\nCatch::AutoReg closer(&testRectangle, CATCH_INTERNAL_LINEINFO,\n                      Catch::NameAndDesc(\"testRectangle()\", \"[Rectangle]\"));\n}\n```\n. Yes, it's just based on the line number, but that is unpredictable when you edit the file\n. The build failing seems to be an error, try re-running Travis.\n. Link to the actual code as well please: https://github.com/fuzzylite/fuzzylite/blob/d095efce076549b435ea5f9e21addf8a7346965c/fuzzylite/test/BenchmarkTest.cpp#L85\nThat == true should be deleted, it is invalid if I give you any truthy value instead of true.\n. I'll try rolling back g++ on my arch box and looking at that.  I'm by no means a Catch developer, I'm just trying to help if I can.\n. https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html\nSame thing but replace clang with GCC\n. Ha -> Arch Linux Archives don't go back to g++ 4.7!\n. Can we just wrap the entire header in a #pragma push pop for this?\n. -Wno-error=parenthesis is another way\n. ",
    "kevinushey": "For what it's worth, I think this is an issue that could be handled in Catch -- effectively, the availability of std::nullptr_t is being mis-detected when the C++ standard is not specified. Issue here: https://github.com/philsquared/Catch/issues/526\n. It looks like this is handled in the PR here: https://github.com/philsquared/Catch/pull/471.\n. That's right, although the fix is currently only part of the develop branch and not the master branch, IIUC? https://github.com/philsquared/Catch/commit/f3308ed7c48c7989464817d5b1f07c66122c1d85\n. And I now see that this was submitted here: https://github.com/philsquared/Catch/pull/471\nSorry for the noise!\n. FWIW, some local testing seems to indicate that using an inline function rather than a static version struct works just fine. I'll try to clean that up and submit that as a PR (although entirely understand if we don't want to take it). Sorry; I think that is what I saw when using an older version of Catch (although I definitely saw it with the current release; I copied the wrong stack trace initially).\nTrying again with current Catch to be sure:\n\n7  0x0000000001384c16 in Catch::Version::~Version (this=0x22aae40 , __in_chrg=)\nat /home/kevin/rstudio/src/cpp/tests/cpp/tests/vendor/catch.hpp:6796\n\n\nwhich points where we would expect: https://github.com/philsquared/Catch/blob/4dc06bdb7034d36071caa2219f14c4b2ce52c80a/single_include/catch.hpp#L6796. After digging in more, I think @lightmare was right -- there are multiple versions of Catch in play.\nJust to give this some context, I'm using Catch for unit tests in an executable, rsession. This executable runs an R interpreter (used for running programs written in the R language), and that R interpreter can (and does in this case) load other libraries that might use Catch for their own unit tests as well.\nWhen the application exits, any libraries loaded by the R interpreter are also unloaded -- that triggers the Catch version destructors, thereby cleaning up the static libraryVersion struct. Then, when my application exits, we then attempt to clean up libraryVersion once again, and this double-destruct causes a crash in my case.\nThe first destruction on exit:\nThread 1 \"rsession\" hit Breakpoint 1, Catch::Version::~Version (this=0x22aae40 <Catch::libraryVersion>, __in_chrg=<optimized out>)\n    at ../inst/include/testthat/vendor/catch.h:5489\n5489    ../inst/include/testthat/vendor/catch.h: No such file or directory.\nThe second:\nThread 1 \"rsession\" hit Breakpoint 1, Catch::Version::~Version (this=0x22aae40 <Catch::libraryVersion>, __in_chrg=<optimized out>)\n    at /home/kevin/rstudio/src/cpp/tests/cpp/tests/vendor/catch.hpp:6796\n6796        struct Version {\nNote that the two this pointers are the same, showing that we're in effect destructing the same struct twice.\nI don't know if this can really be called a Catch bug since it's likely outside of the original envisioned use case, but moving away from having a static version struct would likely help out for cases where multiple versions of Catch are inadvertently mixed.. Thanks!. ",
    "masterspline": "\nequivalent Posix SH install script is 1 line long\n- ShaBang line + 1 line .bat file -> same 3 lines but in in 2 different files\nCMake doesn't generate install targets for Windows anyway!\n\nMy cmake generates INSTALL.vcxproj for MsBuild and really do install.\nIf You wish to use shell - just do it, CMakeLists.txt do not exclude it. But it provides many small advantages:\n1. Common and standart build and install steps for all projects using cmake (only configure step requires to know custom options for different projects, but build, install and test are the same). If You need to create packege or maintain it, CMakeLists.txt makes you work easy.\n2. It's really crossplatform and not limited by Posix Shell.\n3. CMakeLists.txt greatly simplifies external dependancy installation for C++ project using cmake ExternalProject (without it I need to write patch or custom installation script and do it crossplatform because world did not limited by Posix systems).\nThe only cons here is that Upstream need to support CMakeLists.txt (currently requires about zero resources).\n. > That script actually doesn't build Catch\nYes, It's just install (copy) ready catch.hpp file. Crossplatform install is all I want.\n. > Installing an header is not so good, in general the installation process with Cmake is flawed. It can't replace a operative system package management\nI do not suggest to do make install from root. CMakeLists.txt is just helper to create package or install files in user directory. Crossplatform helper. And it makes installation simple and common for all projects using cmake.\n\nIt is better to include a cloned source tree directly from cmake so that you can build your project and all dependencies.\n\nIf You about cloning Catch in separate directory and setting include_directories(), then it is common and known way (even in such solution CMakeLists.txt will help).\nCurrently I use better solution. I use cmake ExternalProject to install external dependancies (which not found by find_package()). All packages installed in same directory, so include_directories() and link_directories() called once. CMakeLists.txt greatly simplify ExternalProject usage. Makes it common for all packages.\n. ",
    "Manuzor": "Just a shot in the dark but have you tried something like this:\n``` cpp\n// Create session, which may allocate stuff.\nCatch::Session session;\n// Create memory manager, which will start tracking leaks from this point on.\nMemoryManager memorymanager;\n// Run the tests. It hopefully does not allocate stuff that the session cleans up.\nint result = session.run();\n// Now check for leaks.\nauto allocations = memorymanager.GetAllocations();\n```\n. ",
    "erhhh": "I wound up debugging separately for myself before finding this issue, and figured I should share.\nThe ASAN issue is likely because this\nm_unfinishedSections.push_back( UnfinishedSections( info, prevAssertions, _durationInSeconds ) );\nis happening inside this loop\nfor( std::vector<UnfinishedSections>::const_iterator it = m_unfinishedSections.begin(),\n            itEnd = m_unfinishedSections.end();\n        it != itEnd;\n        ++it )\nwhich is causing it and itEnd to be invalidated. Using std::list instead of std::vector should avoid that.\nstd::uncaught_exception being true when it shouldn't be is due to https://gcc.gnu.org/bugzilla/show_bug.cgi?id=62258\n. ",
    "tm604": "Thanks guys - the uncaught_exception is definitely that GCC bug, switching to a patched version of the compiler makes that go away.\nThe latest version in develop no longer has the infinite loop issue, even without the compiler patch, so that's a good start. However, I'm seeing new test failures with that build - will try to put together a minimal test case for those. It may be related to the uncaught_exception bug again, so I'll try the patched compiler as well to see if that helps.\n. ",
    "snikulov": ":+1: \n. ",
    "robertodr": "PR #512 is way more comprehensive than mine ;) Thanks for your great work. Your framework really rocks!\n. ",
    "mikedld": "Sorry, was the closing a silent \"no\"?..\n. Indeed it looks like a49f088 does what I need. I'll delete the branch once I confirm master works here. Thanks!\n. ",
    "CNugteren": "You are perhaps confusing absolute and relative errors. Catch uses a relative error metric (the epsilon), while you seem to want something else. The setting .epsilon(0.01) says allow for a 1% error, so it will accept anything between 99 and 101 in your example (so 100.2 would be accepted).\nI've added an absolute error metric in #538, which you could use as .margin(0.1) to indicate that you accept values between 99.9 and 100.1 in your example (so 100.2 wouldn't be accepted).\n. OK, let me know if you need me to open a new pull request.\n. ",
    "takacsd": "Either I'm confusing absolute and relative errors, or it wasn't properly documented...\nBut thanks anyway.\nEdit:\nYou may wan't to revisit this part too:\nhttps://github.com/philsquared/Catch/blob/master/docs/assertions.md#floating-point-comparisons\n. ",
    "julien-l": "I agree with the op, the documentation is not clear: I had to dig into the Catch code to realize that espilon was the relative error. The documentation does not specify it. (Sorry for the comment on a closed post, but since the documentation hasn't been updated, I posted anyway.). ",
    "whanhee": "Here's a minimal example that should demonstrate the issue:\n\nTEST_CASE( \"foo\" )\n{\n    INFO( \"hello!\" );\n    CHECK( true );\n    CHECK( false );\n}\n\nCompiling then running this with test foo prints the hello while test foo -r junit does not.\n. ",
    "SergiusTheBest": "@Kosta-Github I guess a green background is not common.\n. @philsquared Good to know. Thanks!\n. I measured timings for building a test1.cpp: 800 ms vs 600 ms. So yes, puting Catch.h into pch is not required. The question is closed. Thanks!\n. ",
    "NickPadilla": "Hey @philsquared - Thanks for the quick response!  All the simple tests run on Ubuntu no problems, and on OSX the tests that include the TestBase.h (Poco Wiring) work just fine.  I do not believe that any of our tests are written as hidden tests.  \nThat is the output from the actual code, just updated the data in the name portion.  \nI agree that there shouldn't be any difference in functionality between a run on OSX or Ubuntu.  I just don't have time this week to run over the catch code and see what is happening, so figured I'd just post this here to see if anyone else might have some input.  \nI am not doing anything complex, just passing in the command line args like the docs show, returnCode = session.applyCommandLine(argc, argv);  and then if the return code is valid we do exit = session.run();.  Doesn't seem to be anything out of place from what i can tell, and the fact that it does indeed work on OSX we can assume the setup is good.  \nJust an FYI, we will be compiling and running the tests for arm-linux-gnueabihf- and arm_v5t_le- toolchains as well.  As soon as we have all our ducks in and row, and working ;), we plan on putting together a nice tutorial on how to wire the different pieces together. \n. ",
    "xaizek": "\nI must say that I dislike Git's propensity to care about whitespace, and I consider that a tooling problem (in this case it seems like you have some overly aggressive pre-commit hooks).\n\nIt's great actually, that's the way I setup my pre-commit hook to make sure unnecessary whitespace is never committed. It's better to make sure no changes add extra whitespace than remove it later, polluting repository history for no reason.\n. Hey Michael, that one has 8 files in include/ versus 16 here, maybe those are new files. You might want to squash this commit into #310\n. Thanks for noticing this! I forget disabling it (it's annoying to see whole message over and over again if you do make check several times in a row).\n. ",
    "hkleynhans": "Possible patch for compilation issues (With credit to @hashpling )\n```\ndiff --git a/include/internal/catch_runner_impl.hpp b/include/internal/catch_runner_impl.hpp\nindex e689351..6318185 100644\n--- a/include/internal/catch_runner_impl.hpp\n+++ b/include/internal/catch_runner_impl.hpp\n@@ -311,8 +311,9 @@ namespace Catch {\n         void handleUnfinishedSections() {\n             // If sections ended prematurely due to an exception we stored their\n             // infos here so we can tear them down outside the unwind process.\n-            for( std::vector::const_reverse_iterator it = m_unfinishedSections.rbegin(),\n-                        itEnd = m_unfinishedSections.rend();\n+            const std::vector& unfinishedSections(m_unfinishedSections);\n+            for( std::vector::const_reverse_iterator it = unfinishedSections.rbegin(),\n+                        itEnd = unfinishedSections.rend();\n                     it != itEnd;\n                     ++it )\n                 sectionEnded( it->info, it->prevAssertions, it->durationInSeconds );\ndiff --git a/include/internal/catch_tag_alias_registry.hpp b/include/internal/catch_tag_alias_registry.hpp\nindex e5ad11b..cc638a9 100644\n--- a/include/internal/catch_tag_alias_registry.hpp\n+++ b/include/internal/catch_tag_alias_registry.hpp\n@@ -48,7 +48,7 @@ namespace Catch {\n             oss << \"error: tag alias, \\\"\" << alias << \"\\\" is not of the form [@alias name].\\n\" << lineInfo;\n             throw std::domain_error( oss.str().c_str() );\n         }\n-        if( !m_registry.insert( std::make_pair( alias, TagAlias( tag, lineInfo ) ) ).second ) {\n+        if( !m_registry.insert( std::map::value_type( alias, TagAlias( tag, lineInfo ) ) ).second ) {\n             std::ostringstream oss;\n             oss << \"error: tag alias, \\\"\" << alias << \"\\\" already registered.\\n\"\n                 << \"\\tFirst seen at \" << find(alias)->lineInfo << \"\\n\"\ndiff --git a/include/reporters/catch_reporter_compact.hpp b/include/reporters/catch_reporter_compact.hpp\nindex a5a1729..d58cccc 100644\n--- a/include/reporters/catch_reporter_compact.hpp\n+++ b/include/reporters/catch_reporter_compact.hpp\n@@ -218,7 +218,7 @@ namespace Catch {\n             // using messages.end() directly yields compilation error:\n             std::vector<MessageInfo>::const_iterator itEnd = messages.end();\n\n\nconst std::size_t N = static_cast( std::distance( itMessage, itEnd ) );\nconst std::size_t N = itEnd - itMessage;         {\n             Colour colourGuard( colour );\n\ndiff --git a/projects/SelfTest/TestMain.cpp b/projects/SelfTest/TestMain.cpp\nindex 7cb7ca4..4ce3cb3 100644\n--- a/projects/SelfTest/TestMain.cpp\n+++ b/projects/SelfTest/TestMain.cpp\n@@ -366,31 +366,31 @@ private:\n\n\nTEST_CASE( \"replaceInPlace\", \"\" ) {\n     std::string letters = \"abcdefcg\";\n-    SECTION( \"replace single char\" ) {\n+    SECTION( \"replace single char\", \"\" ) {\n         CHECK( replaceInPlace( letters, \"b\", \"z\" ) );\n         CHECK( letters == \"azcdefcg\" );\n     }\n-    SECTION( \"replace two chars\" ) {\n+    SECTION( \"replace two chars\", \"\" ) {\n         CHECK( replaceInPlace( letters, \"c\", \"z\" ) );\n         CHECK( letters == \"abzdefzg\" );\n     }\n-    SECTION( \"replace first char\" ) {\n+    SECTION( \"replace first char\", \"\" ) {\n         CHECK( replaceInPlace( letters, \"a\", \"z\" ) );\n         CHECK( letters == \"zbcdefcg\" );\n     }\n-    SECTION( \"replace last char\" ) {\n+    SECTION( \"replace last char\", \"\" ) {\n         CHECK( replaceInPlace( letters, \"g\", \"z\" ) );\n         CHECK( letters == \"abcdefcz\" );\n     }\n-    SECTION( \"replace all chars\" ) {\n+    SECTION( \"replace all chars\", \"\" ) {\n         CHECK( replaceInPlace( letters, letters, \"replaced\" ) );\n         CHECK( letters == \"replaced\" );\n     }\n-    SECTION( \"replace no chars\" ) {\n+    SECTION( \"replace no chars\", \"\" ) {\n         CHECK_FALSE( replaceInPlace( letters, \"x\", \"z\" ) );\n         CHECK( letters == letters );\n     }\n-    SECTION( \"escape '\" ) {\n+    SECTION( \"escape '\", \"\" ) {\n         std::string s = \"didn't\";\n         CHECK( replaceInPlace( s, \"'\", \"|'\" ) );\n         CHECK( s == \"didn|'t\" );\ndiff --git a/projects/SelfTest/ToStringPair.cpp b/projects/SelfTest/ToStringPair.cpp\nindex 8f51070..6cf19e5 100644\n--- a/projects/SelfTest/ToStringPair.cpp\n+++ b/projects/SelfTest/ToStringPair.cpp\n@@ -30,7 +30,7 @@ TEST_CASE( \"std::pair -> toString\", \"[toString][pair]\" )\nTEST_CASE( \"std::vector > -> toString\", \"[toString][pair]\" ) {\n     std::vector > pr;\n-    pr.push_back( std::make_pair(\"green\", 55 ) );\n+    pr.push_back( std::make_pair(std::string( \"green\" ), 55 ) );\n     REQUIRE( Catch::toString( pr ) == \"{ { \\\"green\\\", 55 } }\" );\n }\n```\n. When applying this patch and running the SelfTest, it appears to hang.\n. ",
    "heegaiximephoomeeghahyaiseekh": "This problem is worse than you describe for me. I have to #define DEBUG to get the test-case code to compile at all.\n. ",
    "mlogan": "I want to produce some test artifacts, and its much cleaner and easier if I can log them to a file based on the name of the test.\n. Thanks for the info, sounds just like what I need.\n. ",
    "jgm-radez": "Is there an equivalent for section name, perhaps including the section leaf parent names?  Like the context-as-a-string?  Trying to name some performance artifacts collected during the tests... i.e. performance artifact A came from test case/section[/section] B. Does this work?\n    virtual std::vector<std::string> getCurrentSectionNames() const {\n            std::vector<std::string> retval;\n            for(std::vector<ITracker*>::const_iterator iter=m_activeSections.begin(); iter!=m_activeSections.end(); ++iter)\n                    retval.push_back((*iter)->nameAndLocation().name);\n            return retval;\n    }\n\n. ",
    "isidore": "Would also like a version for section names. \nIdeally \nCatch::getResultCapture().getCurrentSectionName()\n\n. ",
    "daniel-j-h": "If you read the YAML Spec (warning: 84 pages pdf) this is the so called anchoring feature. With &clang36 we create an alias that we then can use by means of *clang36.\n. @philsquared:\n\nI didn't realise you can test against multiple versions of gcc/ clang etc on Travis. How far back does gcc, in particular, go?\n\nTake a look at the ppa ubuntu-toolchain-r that is used to pull in gcc (and stdlibc++, ...):\nhttps://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/test\nFrom what I can tell the oldest is gcc-4.5 in this particular ppa! There is nothing stopping us from pulling packages from different ppas.\n\nIn any case this would be a a great step forward. I know there was another PR relating to container-based Travis - was that from you? I hadn't had a chance to look at it.\n\nIf you mean https://github.com/philsquared/Catch/pull/497/files, no that's not by me. In contrast to this pull request, this other one does not include various compiler versions, caching, a recent cmake and so on.\n\nI'd still like a build system with more control - so we can run those Python scripts too (unless you can do that in Travis?)\n\nSure. It's a full blown Linux (in fact a Ubuntu 12.04, that's why we pull recent packages from ppas). There are whitelists for sources and packages, though. But usually these packages are more than enough.\n. ",
    "fschuh": "Any updates on this feature request?\nThis would be very nice to have, my use case also involves test code spread across multiple DLLs.. Apparently Google Test also aborts the test during an assert if Exceptions are disabled.\nWe follow a similar approach in our application by using a custom test reporter that will abort the test as soon as an assert comes up.\nWe just need to override:\n    bool assertionEnded(Catch::AssertionStats const& assertionStats)\nThe nice thing is that it allows you to print any information you want about the assertion before exiting.\nIt's not optimal but still usable (and requires no changes on Catch).\nTo avoid compilation errors with -fno-exceptions, we #define CATCH_CONFIG_FAST_COMPILE, which gets rid of the try/catch blocks and allows compilation to succeed.\n. @TorstenRobitzki you want to fail early, so that throw Catch::TestFailureException(); never gets executed.\nAssertionHandler::complete() runs after assertionEnded(), so you have the opportunity to do that. \nJust make sure to exit the application before assertionEnded() returns.\nYou can print out the assertion information before exiting though, which will give you feedback for the first error that occurred.. ",
    "LudwikJaniuk": "Gr8. Also, Catch rocks!\n. ",
    "chrisb2244": "Aha! I figured the problem was something like that, but thank you for the quick solution (b).\n. ",
    "MoronsRuS": "Sorry for the delay.  I've verified that it works on the branch 'develop' using \"single_include/catch.hpp\".\n. ",
    "mattgodbolt": "argh, apologies. I will resubmit with a patch against the develop branch\n. Sorry to wake this: but if one wishes to use the reporters (like the TeamCity one), how is it best to consume the library? It seems the single-header version doesn't include the teamcity reporter, unless I'm missing something! Thanks:). ",
    "elken": "Is this of any use?\n. You can cast a QString to a std::string with QString::toLocal8Bit().constData(). \nThis passes. It's kinda dirty & the string loses encoding (you have to use QTextCodec::codecForLocale() to handle unicode), but it works at least.\n. For sure. We have QString::fromStdString, not having one for the other direction seems wrong.\n. Here is the MSDOC on that error code. valid is never assigned anything.\n. ",
    "emil-e": "The use case for this is that when RapidCheck finds a failing test cases (including minimal counter examples), it will print a blob which you can then pass to RapidCheck to reproduce the exact same failures again. This will be a serialized map from property identifier to the parameters required to reproduce the failure for that property (i.e. seed, size, path to walk through the shrink tree). This is especially useful if you run RapidCheck on a build server and trigger an improbably bug that you then want to debug. In that case, you just copy the blob and pass it to RapidCheck when it runs locally. This requires that the properties have the same identifiers on both machines.\nI don't recall anything about re-runs... how will that cause issues?\nUsing the stack of names you are describing would be ideal so I am definitely interested.\n. I haven't looked into it more, I'm afraid.. ",
    "mlimber": "I landed here when trying to find the current section name for a different reason. In my case, I am using the Trompeloeil mocking framework and have a test like:\ncpp\nTEST_CASE(\"Test Foo\",\"\")\n{\n    // ... Create mock\n    REQUIRE_CALL( mock, Foo() ); // A macro supplied by trompeloeil\n    SECTION(\"x\") { /*...*/ }\n    SECTION(\"y\") { /*...*/ }\n }\nNote that the REQUIRE_CALL() is an expectation common to both sections, and when it fails, it is triggered at the end of scope, which is outside each of the sections. I would like to know which section (\"x\" or \"y\") is currently running so I could add a line in each section like INFO( Catch::GetCurrentSectionName() ) instead of duplicating the section name or having a different string there explicitly. Is there a way to get that? My current alternative is to add INFO( __FILE__ \": \" << __LINE__ ).\n(This is really a workaround. The ideal for me as a user would be to have Catch print the last successfully completed nested section on failure. Then I wouldn't need an info statement at all.). I am also interested in this. Sometimes this is called data-driven testing (DDT), e.g., in Qt's test framework, or Value-parameterized testing in Google Test.\n. I'm ok with closing it, but I'd appreciate a ping here when Catch2 hits the streets with this feature.. If you tell me how to do this with the catch2 branch, I will try it out on my project and contribute fixes and documentation if possible.. ",
    "rolanddenis": "Hello,\nfirstly, I want to warn you that this PR is a duplicate of a previous one, #521. Having said that, this problem bothers me too and I've already tried some of your propositions.\nI totally agree with you that (1) is not a good idea. The solution (2) is not so complicated: in fact, the warning comes from the line https://github.com/philsquared/Catch/blob/master/include/internal/catch_capture.hpp#L36 in INTERNAL_CATCH_TEST macro. But, as we are in a macro, we cannot use common #pragma syntax to locally disable the warning. Instead, there is the _Pragma operator that do the same and we obtain something like this:\n_Pragma(\"GCC diagnostic push\") \\\n_Pragma(\"GCC diagnostic ignored \\\"-Wparentheses\\\"\") \\\n ( __catchResult <= expr ).endExpression(); \\\n_Pragma(\"GCC diagnostic pop\") \\\nOn my side, I couldn't suppress all warnings with this modification and it seems to be related to multiple bugs with _Pragma that \"delayed\" his effect:\nhttps://bugs.debian.org/cgi-bin/bugreport.cgi?bug=715271\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=66099\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=53469\nIn addition, this would imply to add such pragma for each compiler that warns about the parentheses (and I don't understand why they don't do it).\nAbout the solution (3), I think it is a good thing to allow expressions like REQUIRE( 1+2 == 3) without extra parentheses. Nevertheless, @tavianator in #247 suggests to use << instead of <= (that has an intermediate precedence between comparison and addition). I've tried with >> (as << operator of ResultBuilder is already used) and no more warnings with g++.\nHowever, I get many warnings from clang (-Woverloaded-shift-op-parentheses) ...\nPS: how did you gets the warning with g++ 4.9 ?\n. I took the test and what works, however, is to replace <= by >> and to neutralize clang warnings (-Woverloaded-shift-op-parentheses) with _Pragma (that seems less buggy than with g++). But I have no idea what other compilers say about that ...\nI use the version 4.9.2 and it emits warnings on 1 <= x <= 3 and similar expressions but I didn't get any warnings with Catch. \n. ",
    "jedwards1211": "@vpicaver look who it is!!! :)\nI just stumbled on this too\n. @vpicaver I found these operators already defined in our project in SurveyChunkTest.cpp:\n``` cpp\nstd::ostream& operator << ( std::ostream& os, QString const& value ) {\n    os << value.toStdString();\n    return os;\n}\nstd::ostream& operator << ( std::ostream& os, QVariant const& value ) {\n    os << value.toString();\n    return os;\n}\n```\nBecause of these, when I tried to implement them in dewalls test cases, I got a duplicate symbol error from the linker.  (of course that seems horribly wrong, it doesn't seem right for qbs to build the main project modules into my submodule tests)\nDid you have the same error?  Maybe that's why you thought some of the operator<< that QString implements was causing an issue?\nI checked in QString and it only implements operator<< for QDataStream.  QTextStream also implements an operator<< for QString but I don't see how any of this would interfere with std::ostream?\n. @vpicaver alas you were right.  Even when I built dewalls separately with the operators defined, it didn't work.\n. Is it just me or do C++ compilers have major problems picking the right overloaded method in some cases?  I've seen C++ compilers get confused about overloaded methods that Java never would\n. I'm not doubting that the standard is correct.  But it's been long known that many compilers don't completely conform to the standard, or at least have had bugs at some point.  For instance: http://stackoverflow.com/questions/25126987/intel-c-compiler-bug-in-member-function-overload-resolution-involving-using\nAnd I take it back about Java, I did see the standard Java compiler get confused once, when the Eclipse JDT compiler didn't, in some case with complicated generic typing.\nGiven that QString has no inheritance hierarchy nor templates, and that the operator<< works if I std::cout << QString(\"hello world\") in a test case, I'm surprised it wouldn't work for expansion.\n. Aha, I found something that works!\nSo in catch.hpp it says to overload toString, not to specialize its template:\ncpp\n/// Overload (not specialise) this template for custom typs that you don't want\n/// to provide an ostream overload for.\ntemplate<typename T>\nstd::string toString( T const& value ) {\n    return StringMaker<T>::convert( value );\n}\nBut lo and behold, specializing the template worked for me:\ntostrings.h:\n``` cpp\nifndef TOSTRINGS_H\ndefine TOSTRINGS_H\ninclude \"../lib/catch.hpp\"\ninclude \ninclude \nnamespace Catch {\ntemplate<> std::string toString(QString const& s);\n}\nendif // TOSTRINGS_H\n```\ntostrings.cpp:\n``` cpp\ninclude \"tostrings.h\"\nnamespace Catch {\ntemplate<> std::string toString(QString const& s) {\n    return s.toLocal8Bit().constData();\n}\n}\n```\nIn a test file, I #include \"tostrings.h\" and do the following:\ncpp\n    CHECK( QString(\"a\") == QString(\"b\") );\nOutput:\n/Users/andy/cavewhere/dewalls/test/wallsprojectparsertests.cpp:121: FAILED:\n  CHECK( QString(\"a\") == QString(\"b\") )\nwith expansion:\n  a == b\n. @vpicaver yeah, well as I said, implementing it as an overload didn't work...only specializing the template (despite that catch.hpp says not to) worked for me\n. Well, specializing the template didn't work in MSVC2013, the Linker complained that there were multiple symbols for that function.\n@nabijaczleweli this is what I'm talking about with compilers getting confused.  Whatever the standard might say, compilers don't always behave the same way.\n. @philsquared no, for some reason I did it non-inline...I'll have to investigate later if that caused problems, can't remember.\nWould you say that if it doesn't work with a given compiler/linker, then it means there's a bug in the compiler?\n. @PureAbstract that is a top notch article, and taught me for the first time about which function is chosen out of a jumble of overloads and specializations.\nYet it leaves me wondering more than ever why explicitly overloading toString(QString) doesn't work, since overloads should always get top priority.\n. ",
    "blerest": "I fixed this issue using clang-3.5. \n. ",
    "avidinsight": "@rcdailey That's not really possible in C++, regardless of the testing framework. If a constructor throws an exception then the object basically doesn't exist. Even if you could put CHECK() in the same scope as mc, it would never be reached because exception handling would take over.\nUseful article by Herb Sutter which explains this better than I could: http://herbsutter.com/2008/07/25/constructor-exceptions-in-c-c-and-java\n. ",
    "airelil": "A remark about @Darelbi  comments. The \"teardown\" part of a test doesn't always work. On my MS VS2010 machine (catch ver. 1.21.) the following code produces memory leak because \"arr\" isn't deleted. It leaves the \"section A\" on REQUIRE exception immediately and doesn't continue to the \"delete\" part. Oddly though, I see that it enters the \"test A\" right after that and this time performs new/delete cycle without entering into SECTION.\nC++\nTEST_CASE(\"test A\")\n{\n  char *arr = new char[8];\n  SECTION(\"section A\")\n  {\n    REQUIRE(1 == 0);\n  }\n  delete []arr;\n}\nSo I had to revert to std::unique_ptr\nC++\nTEST_CASE(\"test B\")\n{\n  std::unique_ptr<char[]> arr(new char[8]);\n  SECTION(\"section B\")\n  {\n    REQUIRE(1 == 0);\n  }\n}\n. @nabijaczleweli I got your irony, but we don't argument about the resource management. The fact is there is no guarantee that the after-section \"teardown\" part  will be always executed.\n. ",
    "PpvAlx": "\nSorry I misreaded you (you mentioned \"before any test cases\") I leave my old answer here:\nThere's no need for setup teardown:\n```\nTEST_CASTE(){\n    // setup\n    SECTION(){\n}\n\n// TEARDOWN\n\n}\n```\nthe setup and teardown are implicit in how catch work (wich is what I like most). Of course the same apply to nested cases:\n```\nTEST_CASTE(){\n    // setup A\n    SECTION(){  // A\n    // setup B,C\n    SECTION(){ //B\n\n    }\n\n    SECTION(){ // C\n\n    }\n    // TEARDOWN B,C\n}\n\n// TEARDOWN A\n\n}\n```\n\nIt would be awesome if this example worked. Is it possible to implement some new assertion macros that would stop the current section from executing, but not the rest of the code? Like the \"break\" keyword.. ",
    "timtro": "Sorry, lost track of this for a bit. Thanks Phil ( @philsquared ). I may play with that functionality at some point, but defining behaviour on a per-exception basis doesn't help me if I'm unsure of what exception is being thrown.\nIn the end, I took the advice of @webmaster128 to overrode the what() method in my exceptions. It means they take up much more real estate in my files, and more effort to write, but it does lead to better code. Writing specialized code to print something useful in unit tests didn't seem to be a good use of the effort.\nBut really, thanks so much Phil. Again, I really love Catch.\n@webmaster128, Thanks for the advice. Also, I believe your override of what() is missing a noexcept specifier.\n. ",
    "cincodenada": "Did the stringification ability mentioned above make it to Catch2? I just ended up chasing down a Boost exception (from boost::algorithm::hex) that uses typed exceptions without messages, which hits this case, so Catch2 just returns a nonspecific std::exception message as noted elsewhere in this thread.\nIt would be really nice to have the exception type printed - heck, I'd even take a mangled version, although I realize that's probably not something you want in an actual release.. After further investigation, I discovered CATCH_TRANSLATE_EXCEPTION, which allows you to implement your own exception translator which is a nice workaround. For example:\n```\ninclude \"catch.hpp\"\ninclude \ninclude \nCATCH_TRANSLATE_EXCEPTION(std::exception& e) {\n  std::string s;\n  int status;\nconst char name = typeid(e).name();\n  char realname = abi::__cxa_demangle(name, 0, 0, &status);\n  if(realname) {\n    s.append(realname);\n  } else {\n    s.append(name);\n  }\n  s.append(\": \");\n  s.append(e.what());\n  free(realname);\n  return s;\n}\n```\nWill print the demangled type along with the exception for exceptions that inherit from std::exception. This demangling is for GCC/Clang, you'll have to Google for how to do demangling for your compiler if it's different. You can also use e.g. boost::core::demangle() to do the dirty work for you.\nIt would still be nice to have exception names by default, but this is a good clean workaround for anyone who wants it now!. ",
    "awhlee": "Trying to build the same code outside of the NDK env with a dedicated gnu makefile.\n. Yes...I screwed up.  I had catch.hpp included somewhere and CATCH_CONFIG_MAIN somewhere else and this was not getting defined before the header was being included.  Rookie mistake but thanks for the response :)\n. ",
    "Crog": "To embellish the details this is using the QNX qcc compiler packaged with QNX v6.5.0. The standard headers do appear to adhere to standard namespace conventions quite well unlike some other libraries where it appears the C 'global' functions are simply pulled into the std:: namespace. Seeing regression since Catch v1.1 it makes you wonder if it were tested on such conformant platform at some stage and possibly this needs to be added to the current set of test setups.\n. Attached is a patch which adds the std:: in the places identified from my unit tests. However as the code is templates there may be further code that uses the C global functions.\nCatch Patch for std namespace.txt\n. This issue is covered under pull request #559\n. Okay, so currently Travis doesn't like it if I changed ::tolower to std::tolower. Some other fix is evidently necessary to fix that issue. In my gcc 4.4.2 compiler I am getting:\n/../external/clara.h:235: error: '::tolower' has not been declared\n. Good call @kirbyfan64 will add the missing include into clara.h and catch_common.hpp and put the std:: back in :\n    #include < cctype >\nQ) Is there an easy way to roll back changes on github? I just re-made the changes instead for now!\n. Thanks, I will take a look at Git commands soon. For now I can't solve the issue of ::tolower as Travis build system doesn't have a test that replicates a strict conforming environment like I have here :(\n. Cracked it. GCC reports nicely in some versions about std::tolower having ambiguous overloads. Fixing the ambiguity with the following tells the compiler which function to use and this now builds under QNX and all the Travis Test  :)\n. I have opened this request again under #559 \n. From what I can gather this was the only resolution. it is not undefined behavior. It is required to resolve the ambiguity due to the two different impleemntations of std::tolower as @nabijaczleweli  mentions there is a second and is the reason why I had issues. The cast is there to tell the compiler to select the desired function, if there isn't a matching function. \nIf it really isn't liked (i wasn't toosure either) then creating a function object which calls std::tolower internally would be a practical way to resolve this.\n. ",
    "mlin": "+1\n. ",
    "dawagner": "You're welcome!\n. fixed by https://github.com/philsquared/Catch/commit/2b688e1cef85025ed71a0dc885118bb2318c21a0\n. Right, there was a \"4\" leftover in the version number from the template :)\nThank you for the explanation.. ",
    "kerdemdemir": "But I have a question than; why I am not having this expection while I don't use \"catch\".\n. I set my max stack size like LIB += -Wl,--stack,4194304  but no matter what I do I am still getting the exception. This is most probably me who is not making the correct configuration. But I want to tell you anyways.   I am on windows-mingw and configuring mingw with qmake. \n. ",
    "maxvodo": "@nabijaczleweli: Signature int main(int, char**) lose const qualifier of int main(int, char* const*); and it causes linkage error on my environment.\n. @philsquared , @nabijaczleweli: thx guys, close request.\n. vote :thumbsup:\n. ",
    "masterl": "Just fiy, the extra output on the screenshots are just echo from my makefile, so there are no unknown stuff happening.\n. Yes, it's the 8:41.\n*  Catch v2.0.0-develop.1\n *  Generated: 2015-11-23 10:08:41.422349\nNice, thank you!\n. ",
    "scrossuk": "Thanks for making these changes; the following has some timing figures that hopefully make sense.\nHere's a simple example:\n```\ninclude \ndefine CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file\ninclude \"catch.hpp\"\nTEST_CASE(\"Example Test\", \"[tag]\") {\n    std::vector array;\nconst size_t element_count = 1024*1024;\narray.reserve(element_count);\n\nfor (size_t i = 0; i < element_count; i++)\n{\n    CHECK(array.size() == i);\n    array.push_back(42);\n}\n\nCHECK(array.size() == element_count);\n\n}\n```\nI've reduced the number of iterations 64 times from the original example to make the timing more feasible.\nBuilding with:\n$ g++ -o test_example -O3 test_example.cpp\nWith the unmodified Catch:\n```\n$ time ./test_example \n===============================================================================\nAll tests passed (1048577 assertions in 1 test case)\nreal    0m7.171s\nuser    0m7.090s\nsys 0m0.008s\n```\nWith the modified Catch:\n```\n$ time ./test_example \n===============================================================================\nAll tests passed (1048577 assertions in 1 test case)\nreal    0m6.959s\nuser    0m6.944s\nsys 0m0.008s\n```\nBy adding extra parentheses to assertion with unmodified Catch:\n```\n$ time ./test_example \n===============================================================================\nAll tests passed (1048577 assertions in 1 test case)\nreal    0m2.560s\nuser    0m2.550s\nsys 0m0.000s\n```\nIf the assertion in the loop is removed entirely:\n```\n$ time ./test_example \n===============================================================================\nAll tests passed (1 assertion in 1 test case)\nreal    0m0.010s\nuser    0m0.005s\nsys 0m0.008s\n```\nGiven that I'd like to do 64 times the number of comparisons, these timing numbers are too large for either a normal EXPECT or extra parentheses to work. So far I've been using:\n```\ninclude \ndefine CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file\ninclude \"catch.hpp\"\nTEST_CASE(\"Example Test\", \"[tag]\") {\n    std::vector array;\nconst size_t element_count = 64*1024*1024;\narray.reserve(element_count);\n\nfor (size_t i = 0; i < element_count; i++)\n{\n    if (array.size() != i) { CHECK(array.size() == i); }\n    array.push_back(42);\n}\n\nCHECK(array.size() == element_count);\n\n}\n```\nThis gives (note that I'm now building without optimisation and I increased the iterations back to the original 64*1024*1024):\n```\n$ g++ -o test_example test_example.cpp \n$ time ./test_example \n===============================================================================\nAll tests passed (1 assertion in 1 test case)\nreal    0m2.815s\nuser    0m2.723s\nsys 0m0.080s\n```\nThis is a reasonably viable figure, though it does show that performing this many comparisons is bound to be slow anyway. Of course, it's a lot faster if I re-enable optimisation:\n```\n$ g++ -o test_example -O3 test_example.cpp \n$ time ./test_example \n===============================================================================\nAll tests passed (1 assertion in 1 test case)\nreal    0m0.483s\nuser    0m0.341s\nsys 0m0.139s\n```\n. > Couldn't you just check corner cases, with a few spot checks in between?\nYeah, I think this is the best solution.\n. ",
    "kmactavish": "I can also write a unit test before the merge ;).\n. So I looked back at this, and using the Matchers looks really nice. However, to support such a general extension point, it would really be nice to map any scalar binary or unary function over a container or all the pairs in two containers, and be able to reduce the resulting binary sequence using a number of reduction functions. I'm thinking along the lines of python's all(map(operator.lt, a, b)) or any(map(lambda x: x<10, a)). It makes no sense to have a scalar and container version of every type of comparison you want to do.\nFor unary Matchers, it's pretty straightforward. However, right now, Matchers only support the unary match function, and depend on the second argument being stored inside the Matcher for binary comparisons. Without changing the Matcher base class, I couldn't figure out a nice way of supporting this without resorting to >= c++11 features.\nThe closest I got was having to re-construct a scalar Approx matcher for every element in the RHS container, which also doesn't work well, since the objects in your vector might be too big to want to copy, and reconstructing new scalar Matchers for every element is kind of silly. Also, there was this extra bind/rhs/partial function that wasn't very pretty.\nREQUIRE_THAT( A, All(ApproxEquals().precision(0.1)).rhs(B) )\nREQUIRE_THAT( a, ApproxEquals().precision(0.1).rhs(b) )\nIdeas?. Good point\n. ",
    "capsocrates": "My solution for now is to wrap the stuff I'm doing in a lambda, with only assertion and logging macros inside (no TEST_CASE macros) and then call that lambda repeatedly in one or more TEST_CASE blocks with different parameters. It is still awkward (especially since the setup has to be performed, one way or another, inside the lambda) but it works.\n. You asked me this in #558 \n\nI believe I have answered this query now (even if not entirely satisfactorily) - and objection to me closing it? (@capsocrates, if you're still watching?)\n\nIf you meant that Catch2 is an answer to the query, I suppose that's satisfactory enough. :). I would love to see this addressed in Catch2.. I would like clarity around this as well. Which macros, if any, are thread-safe, and which are not?. Bummer, I just started using short, descriptive SECTION names to make it easier to run a specific section. So I've been moving descriptive text for the SECTION into that field.\nFor example, here's some of my test code (with most of the actual code ripped out to focus on the use of SECTIONs\n```\nTEST_CASE(\"Server\")\n{\n    const auto uri{\n        web::http::uri_builder{}\n        .set_scheme(U(\"http\"))\n        .set_host(U(\"localhost\"))\n        .set_port(34568)\n        .to_uri()\n    };\n    SECTION(\"Construction\", \"It can be constructed from a valid URI without exceptions\")\n    {\n        REQUIRE_NOTHROW(Web::FileServer{ uri });\n    }\n    SECTION(\"FileRegistry\", \"Files can be registered with it\")\n    {\n        //test code for adding files to the server goes here\n        SECTION(\"FileDeregistry\", \"Files can be un-registered from it\")\n        {\n            //test code for removing files from the server goes here\n            REQUIRE(server.FilesBeingServed().empty());\n        }\n    }\n    SECTION(\"InvalidFileRegistry\", \"Files cannot be registered with it twice\")\n    {\n        //test code goes here\n        SECTION(\"InvalidFileDeregistry\", \"Files that have not been registered fail to unregister\")\n        {\n            REQUIRE(!server.StopServingFile(\"cde\"));\n        }\n    }\n    SECTION(\"Download\", \"Files can be downloaded from the server\")\n    {\n        //test code goes here\n    SECTION(\"DownloadOne\", \"It can download one file from the server\")\n    {\n        //test code goes here\n    }\n\n    SECTION(\"DownloadTwoAsync\", \"It can download two different files asynchronously\")\n    {\n        //test code goes here\n    }\n\n    SECTION(\"DownloadTwoParallel\", \"It can download two different files and read them in parallel\")\n    {\n        //test code goes here\n    }\n\n    SECTION(\"NonexistentFile\", \"Requesting a file that the server does not have results in an error\")\n    {\n        //test code goes here\n    }\n}\n\n}\n```\nThis lets me do something like WebTest Server -c Download -c DownloadTwoParallel to run just one specific section (and its parents). If the name field is also the description field, typing out those arguments becomes more difficult and error-prone.. Any word on how we'll be able to get the above functionality when descriptions are removed?. Yes!. I don't know if it will be easy to implement or not. It will require resetting all state; I don't know how difficult that is to do on the back-end.. ",
    "roversch": "\ud83d\udc4d This would be especially useful for testing numerical code, like the one I'm working on. \nFor example, I have slightly different data for each test run. I could write a loop around one 'REQUIRE', but for 'SECTION's or 'TEST_CASE's this does not work apparently.\n. Thanks @stefanhaller ! I'll try it out again. It's been a while, so I forgot what exactly went wrong.. ",
    "simonvpe": "Second this. What is the status of Catch2 @philsquared ?. ",
    "stefanhaller": "I realize this is closed, but I'd like to reply to one particular comment made above by @roversch who said it's not possible to put a SECTION inside a for loop.\nWe're doing exactly this, and seems to work well for us:\n```\n// \"production\" code:\nint timesTwo(int x)\n{\n  return 2 * x;\n}\n// test code:\nTEST_CASE(\"timesTwo\")\n{\n  for (const auto [input, expectedOutput] : {\n         std::make_tuple(1, 2),\n         std::make_tuple(2, 4),\n         std::make_tuple(3, 6),\n         std::make_tuple(4, 8),\n       })\n  {\n    SECTION(\"timesTwo with \" + std::to_string(input))\n    {\n      CHECK(timesTwo(input) == expectedOutput);\n    }\n  }\n}\n```\nThis works so well that I'm actually not sure what the excitement about data-driven tests is about. What am I missing?\n(The only slightly annoying thing here is having to manually construct the section names. In this particular example it's easy enough, but often we loop over enum constants, and there's no elegant solution to stringify these.). What are the chances of getting this updated for Catch2? I don't think I will have much time to help drive this forward, but it would sure be a useful feature to have.. ",
    "amigo421": "own project, which uses Catch lib, I didn't update Catch a few months, and did this a week ago, and got a error during project rebuild. I've temporary moved on single header version. It works for sure. Regarding multi header version, I only see that there is a reference on this header inside other Catch files but git snapshot of Catch doesn't contain this file\n. hi mate,\nis the problem still actual? \nfrom those times, I changed my style and now never write a tests in the same header with a logic.\nso that is a no issue for me yet, but I can try to do this , just to assist with a testing. if you treat this as solved, I won't test this right now , just will report this in case Iwill have  faced with this again (i'm mostly using vc++ which supports __COUNTER__)\np.s. congrats-glad to see that you now work with jetbrains. do you mean without parameters? run all ones? yes, successfully. \n\"successfuly\" - I mean that all tests were found , ran and got mostly success result (except one - but there is dev issue, normal development process)\n. thanks a lot!\n. okay, I'll review which I'm using one, \nif this will look acceptable for a publishing , I'll create PR\nplease keep the request opened for some time (1-2 weeks), if this okay for you. catch version - latest, autoclone from git at build stage\ncompiler - v19.00.24310\nCXX_FLAGS = /Zi /EHsc /W4 /cgthreads4 /D_DEBUG /MDd /Zi /Ob0 /Od /RTC1 /RTCc\n```\ndefine CATCH_CONFIG_MAIN\ninclude \nnamespace testing {\nTEST_CASE( \"Test1\", \"[unit]\" ) {\n}\n```\n\"...a cast to smaller data type has caused a loss of data..\"\n. yes, I can confirm that problem is still there.\nif you look at VC runtime exception popup you can see even the suggestion how to solve the issue, just the reducing the size forcely\nof course , the author of Catch can ignore this, this is just a good practice of the coding (and potential error). I'll re-check this today. Give me a little bit time more, to review a tags functionality, probably it was required in initial version with a specific of the project, if yes, I'll remove this. > Would it not be easier to run the Catch executable with --list-just-test-names and read the output (which will be each test name on its own line)?\ncmake configuration step , which also includes tests definitions generating, is done (in cmake workflow) before executable will be built and available  . > but I am not sure why it requires tags, even though it does not use them.\nif I understand your question right, the tags (in CATCH terminology)  = LABELS in terms of CTest, you can look at the output, the tags are added as LABELS property and can be used for the running a group of the tests, \nbut really there is unused variable: CamelCaseProjectName, \nI'm going to remove this and re-submit. you are right, script currently requires a tags,\nplease have a look at fixed version. do you need something else from my side? current version should work with optional tags. okay, got it. let me know if case of any steps required from my side. got this, going to fix\nthank you. sorry for so long delay in one symbol fix :)\nplease review. > In the meantime, if you don't mind, I am going to give you a bit of advice for better PRs.\nthank you veyr much! I have a huge experience in enterprise development (with a tens or even hundreds of the branches but no PR technique)  but absolutely don't know the rules  of open source game. I'm glad an any advice here. ",
    "TrueWodzu": "I can confirm this problem. Just downloaded Catch for my first try and received error about missing catch_runner.hpp in catch_with_main.hpp\n. @philsquared Thanks for prompt response and valuable advice.. It was my fault, I was catching a reference to object which then get destroyed.... ",
    "nlohmann": "Thanks, that's what I needed.\n. I would also like a version that is compilable with -fno-exceptions. While it is nice to have the -e command line parameter, it does not help if the code to be testet needs to rely on the STL not throwing.\n. I would expect all CHECK_THROW macros to be skipped when -fno-exceptions is set.. If that is the case, then I can understand that this issue cannot be easily solved. :-/. Oh, my wording was bad: I meant the runtime of the tests, not the build time. (The build time is something I have to look into, but it is not the issue here).\nI have not looked into writing a reporter. I may check it out - but maybe I help myself with some printf calls in the moment :)\nThanks again for the great library!\n. This is bitter as it would mean to change a lot of tests...\nAnd how would I express something like\ncpp\nCHECK_NOTHROW(my_json::json_value j(t); clean_up(j));. Well, this could maybe fix this issue, but in general it's convenient to have arbitrary code inside CHECK_*.. I adjusted my code to work with 1.7.0.. Thanks! Only one file was affected so rewriting was not so much work after all.\nJust out of curiosity: in the release notes for 1.7.0 you mention nlohmann/json - how did you cope with the compilation errors?. Just as feedback: It would be great if you'd use Semantic Versioning to make it easier for users to assess whether an update would break existing code.. Thanks for checking. Indeed there I can't follow up on this. Keep up the good work on Catch! \ud83d\udc4d . We haven't seen a Catch assertion fail in years - this seems to be an issue related to FreeBSD.\nFor reference:\nAssertion failed: (m_parent), function moveToParent, file /usr/ports/devel/nlohmann-json/work/json-3.1.2/test/thirdparty/catch/catch.hpp, line 6222.\nThat's this line.\nNote we are still using Catch v1.9.7 as porting all tests to Catch 2 is still an issue. Nevertheless, it would be interesting to understand what the reported assertion means and if there is a bug somewhere.. Thanks for the quick response. Yes, I am aware of the hacky #define private public, but I still have not found a way to test private functions without making too many adjustments to the code. As the performance issues are a bigger blocker right now, I shall postpone a fix for this.. ",
    "mg262": "I haven't caught the error level from the command prompt in a very long time, so I am using a method grabbed from Google... \nMohan@QuietPC ~/core-sdk/dist/foo\n$ g++ c.cpp\nMohan@QuietPC ~/core-sdk/dist/foo\n$ cat run.bat\n@echo off\na.exe\necho Exit Code is %errorlevel%\nMohan@QuietPC ~/core-sdk/dist/foo\n$ ./run.bat\nExit Code is -1073741511\n. Having looked into this more, I think the problem may be with the Cygwin installer -- it may not be updating the runtime libraries. [https://www.cygwin.com/ml/cygwin/2015-12/msg00143.html]  \nAssuming that is the problem, sorry to waste your time.\n. Thanks for this. REGISTER_TEST_CASE isn't ideal for my purposes as it would have to be manually updated whenever a test is added, and there's too much risk of missing one.  \nI'm about to experiment with having the library define CATCH_CONFIG_RUNNER and provide a function which calls Catch::Session().run( argc, argv ), and then having main call that library function.\nEdit: sadly this doesn't work. Are test cases discovered at run time rather than compile time?\n. Thanks for this. I am using CMake but unfortunately I'm more or less in the case where \n\neither the target or the library is an imported target (pre-built) and not built within the current cmake tree\n\n-- some of the platforms are being handled by third parties, so the ideal situation is one where I can just provide them with binaries and a few header files.  It's precisely having to collaborate on the build process that makes things a bit messy.\n. I have got this to work with gcc + clang by using the linker setting --whole-archive, like this: \n```\nadd_executable(sdktests tests/TestMain.cpp)\ntarget_link_libraries(sdktests -Wl,--whole-archive sdktestslib -Wl,--no-whole-archive)\n```\n. FWIW, this is the actual output:\n/A.h:41: FAILED:\n  REQUIRE( 879.9 == Approx(876.5).epsilon(0.0000001) )\nwith expansion:\n  879.9 == Approx( 876.5 )\n\nterminate called without an active exception\n/B.cpp:19: FAILED:\n  {Unknown expression after the reported line}\ndue to a fatal error condition:\n  SIGABRT - Abort (abnormal termination) signal\n\nI am using an inline header file which is included by multiple tests, so there is also a possibility that the line number reporting code is playing up?. Can't reproduce unter Ubuntu LTS, but it's a Heisenbug so it may still be there. \nHave reproduced under Catch 1.10.0; error is \n11852 Illegal instruction     (core dumped) .\nFWIW, this only seems to crop up when a test fails. . $ clang --version\nclang version 4.0.1 (tags/RELEASE_401/final)\nTarget: x86_64-unknown-windows-cygnus\nThread model: posix\nInstalledDir: /usr/bin\nRelease build with \n-std=c++11 -Wall -Wextra -Wno-missing-braces -pedantic -Wnarrowing -Wshorten-64-to-32\nI haven't tried another version of clang yet -- switching is very fiddly under Cygwin, unfortunately. \nBTW, one thing I wasn't clear on above is that the code in  q. is in an inlined function. Turning that into a normal fn makes the problem go away (to date). . I'n now getting a similar crash on Ubuntu LTS. Trying to narrow it down. . Stack trace: \n Error in `./tests': free(): invalid size: 0x00000000013dabc0 \n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7fe9796fe7e5]\n/lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7fe97970737a]\n/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fe97970b53c]\n./tests(ZN5Catch15ConsoleReporterD2Ev+0x42)[0x516872]\n./tests(_ZN5Catch15ConsoleReporterD0Ev+0x9)[0x5169b9]\n./tests(_ZN5Catch8runTestsERKNS_3PtrINS_6ConfigEEE+0x886)[0x50b2b6]\n./tests(_ZN5Catch7Session11runInternalEv+0x202)[0x535162]\n./tests(_ZN5Catch7Session3runEv+0x8a)[0x52fc0a]\n./tests(_Z9run_catchiPPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7+0x70)[0x5171c0]\n./tests(main+0x2fe)[0x45f98e]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fe9796a7830]\n./tests(_start+0x29)[0x45f5b9]\n. ",
    "nschloe": "Thanks, that did the trick. I'm now always linking\n``` c++\ndefine CATCH_CONFIG_RUNNER\ninclude \ninclude \nint main(int argc, char* argv[])\n{\n  Teuchos::GlobalMPISession mpiSession(&argc, &argv, NULL);\n  const int result = Catch::Session().run(argc, argv);\n  return result;\n}\n```\nwith my tests.\n. ",
    "IngwiePhoenix": "I think it'll work. Not exactly a pretty solution though ;)\n. ",
    "monkey-g": "Turns out it had nothing to do with Catch. Apparently using LLVM in debug mode balloons your library to ~900mb, so linking takes a pretty big hit :/\n. ",
    "memsharded": "This is being done in https://github.com/philsquared/Catch/pull/943 to upload to Bintray conan-center.. HI @philsquared \nI think the best would be to create a \"catch\" organization in bintray, so you can easily bring people in it to collaborate (though in this case maintenance will be absolutely straightforward), then a repo inside the organization. Also, publishing to this repo can be done with just one CI, no need to upload from all of them, as header-only package will always be the same). \nWhich release approach to bintray would you like? Do you want to upload conan packages to bintray for \"master\", or just the tagged releases? How do you identify your releases in CI? Thanks!. I don't think so much testing for the package is necessary. With just a very minimal test inside test_package to ensure the package is correctly created is more than enough. Please @uilianries simplify, thanks!!. The test_package is a folder containing a consumer project. It is used to make sure that packages are properly created, headers are packaged, libs are there... It is automatically used by the conan test_package command that manages to export the package recipe (the root conanfile.py) into the local cache, build the package, and consume the package from the test_package project to ensure everything is OK.\nAbout the version in test_package/conanfile.py -> requires, good catch ;)\nYes, @uilianries, that version should be also changed by the updateConan, or maybe we can just wait. Next release will get rid of it, and the consumer test_package will not have to require the tested package explicitly.. Related issue: https://github.com/philsquared/Catch/issues/926. I think you want to pip install conan first, to ensure that latest conan is installed, and not the one that conan_package_tools might be indirectly requiring.. If only tags are processed, maybe this would be unnecessary.. I would always suggest the with open(travisPath, \"r\") as f: context idiom, it makes sure f is closed, automatically. I am not sure if possible, but I would say that building/uploading to CI is unnecessary, I would try to only process tags.. ",
    "diemoschwarz": "it sure does!  What makes me post this here is that it only segfaults when more than one catch SECTION is defined.  If you comment \"#define SPLIT_SECTIONS 1\" on line 88, everything runs.\nIs there anything non-trivial happening between sections, that brings to light a bug lurking in my code? \n. great, thanks for confirming that its a bug in my code that doesn't show in MacOS! \nTime for valgrind, I guess. \nClosing this issue.\n. > From the documentation my expectation was that the first SECTION is executed, then the variables are re-created, the REQUIRE conditions run, and then the second SECTION.\nHi, where is that behaviour documented?\nYou might also want to close the issue, when it's not an issue anymore =-)\nCheers\n. ",
    "hpesoj": "Hi Phil. I suggested the original fix for compatibility with a custom\nboolean type which overloaded the && operator. Said type also overloaded\nthe ! operator, so your proposed change would reintroduce the\nincompatibility for such types. I believe keeping both the !! and the\nstatic cast would fix both issues, though I am not 100% sure if other\nissues wouldn't arise.\nHowever, I have since removed the && operator overload for my type as I\nfeel short circuiting evaluation is too useful a feature to sacrifice.\nThus, your proposed change would no longer affect me personally. Perhaps\nyou feel that it is not worth attempting to support such a corner case?\nOn 13 May 2016 02:12, \"Phil Nash\" notifications@github.com wrote:\n\nI never got back to you about this.\nI implemented your suggested fix - but it turns out that has an unwanted\nside-effect (see #657 https://github.com/philsquared/Catch/issues/657).\nI'm considering using !!(expr) instead. That seems to do the trick for me\nbut I'd appreciate it you were able to confirm that it has the desired\neffect for you, too?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/574#issuecomment-218839957\n. The problem is that my type overloads the ! operator to produce an object\nof the same type, rather than a bool. Given that the aim of the !!\nexpression is to convert an object to a bool (without generating warnings -\nwhich I overlooked with my original suggestion), I don't think it will work\ncorrectly with such behaviour. Double negating followed by a static cast\nshould account for all (sensibly behaved - if you consider overloading the\n&& operator sensible) combinations of operator overloads.\nOn 13 May 2016 14:35, \"Phil Nash\" notifications@github.com wrote:\nThe problem with the && overload was that short circuiting was disabled -\nand the whole point of this expression was for it to be seen by the\ncompiler (so you get natural warnings etc) without being evaluated at\nruntime.\nUsing !! puts us back into the realm of short-circuiting, so the original\nexpression should not be evaluated at runtime.\nAt that point as long as the ! operator compiles for your type (and,\nideally, doesn't generate any warnings) then it shouldn't matter what it\nactually does - it cannot influence short-circuiting here so should never\nbe executed.\nI put together a little test case for this which reproduced your original\nissue when I didn't use the cast or the !! - but had no issues (with &&\nor !) with the !! approach.\nSo I'm inclined to leave things as they are here. If anyone else hits\nproblems with it I'll consider reverting back to the original, though.\nThanks for taking the time to respond - especially given that the original\nissue no longer replies to you!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/issues/574#issuecomment-218963058\n. Yes, false && static_cast<bool>( !!(expr) ) was the fix I suggested. I think this should force conversion to bool and suppress the VC++ warning.. My type was modelling a boolean value, so it had an implicit operator bool.. \n",
    "snaewe": "FWIW, I can confirm this. If I apply this commit \nsnaewe@020580626ae56d3377f5c62b002ba3906a4d3edc the test succeeds with MSVC2013, mingw gcc-6.1 (both on Win7), and gcc 4.8.4 on Linux.\n. ",
    "miklelappo": "define CATCH_INTERNAL_LINEINFO ::Catch::SourceLineInfo( FILE, static_caststd::size_t( LINE ) )\n. The unique name don't have to use line number, otherwise when including other files you'll get this error\n. ",
    "Qix-": "poke could this be reviewed please? This would be awesome to see.\n. Derp. REQUIRE_[NO]THROWS_WITH accepts a string as the matcher. :dancer:\nMight be nice to document this particular assertion.\n. ",
    "testhound": "Never mind I found the problem: my SECTON statements had semicolons at the end of them. So I had\nSECTION (\"Verify\"); instead of SECTION(\"Verify\")\nPerhaps error checking could be improved. Sorry for the false alarm\n. From the tutorial: \"For each SECTION the TEST_CASE is executed from the start - so as we enter each section we know that size is 5 and capacity is at least 5. We enforced those requirements with the REQUIREs at the top level so we can be confident in them. This works because the SECTION macro contains an if statement that calls back into Catch to see if the section should be executed. One leaf section is executed on each run through a TEST_CASE. The other sections are skipped. Next time through the next section is executed, and so on until no new sections are encountered.\"\nNot an issue.\n. ",
    "tamboril": "Thanks!. Note you can always apply DeMorgan's Law to convert an OR to an AND so you can split it as mentioned above:\nInstead of:\n CHECK(a == 1 || b == 2),\n do:\n CHECK_FALSE(a != 1);\nCHECK_FALSE(b != 2);\n. Yes.  The operation is OK, but the doc is unclear.  If a test name is an example of a test-spec, then\ntest-spec ... makes me think I can put several test names separated by spaces and have them all\nrun.\nIt's a little weird for what seems to me to be the most common case (running specific tests) to have to be given as an OR expression.. ",
    "caryoscelus": "Any reason this isn't merged yet?. ",
    "gatopeich": "When is this going to be in a Catch release? The issue renders JUnit output unusable in many cases...\n. Breaking my builds, too\n. I am working with a \"works for me\" patch.... ",
    "mrpi": "Just tested with Catch v1.5.7.\nThis test:\nTEST_CASE(\"xml compare failing\")\n{\n     REQUIRE(std::string(u8\"\u666e\u901a\u8a71\") == u8\"\u5317\u65b9\u65b9\u8a00\");\n}\nproduces this xml:\n<TestCase name=\"xml compare failing\">\n      <Expression success=\"false\" type=\"REQUIRE\" filename=\"/home/ludger/projects/liquidpp/test/render.cpp\" line=\"23\">\n        <Original>\n          std::string(u8\"&#xFFFFFFE6;&#xFFFFFF99;&#xFFFFFFAE;&#xFFFFFFE9;&#xFFFFFF80;&#xFFFFFF9A;&#xFFFFFFE8;&#xFFFFFFA9;&#xFFFFFFB1;\") == u8\"&#xFFFFFFE5;&#xFFFFFF8C;&#xFFFFFF97;&#xFFFFFFE6;&#xFFFFFF96;&#xFFFFFFB9;&#xFFFFFFE6;&#xFFFFFF96;&#xFFFFFFB9;&#xFFFFFFE8;&#xFFFFFFA8;&#xFFFFFF80;\"\n        </Original>\n        <Expanded>\n          \"&#xFFFFFFE6;&#xFFFFFF99;&#xFFFFFFAE;&#xFFFFFFE9;&#xFFFFFF80;&#xFFFFFF9A;&#xFFFFFFE8;&#xFFFFFFA9;&#xFFFFFFB1;\" == \"&#xFFFFFFE5;&#xFFFFFF8C;&#xFFFFFF97;&#xFFFFFFE6;&#xFFFFFF96;&#xFFFFFFB9;&#xFFFFFFE6;&#xFFFFFF96;&#xFFFFFFB9;&#xFFFFFFE8;&#xFFFFFFA8;&#xFFFFFF80;\"\n        </Expanded>\n      </Expression>\n      <OverallResult success=\"false\"/>\n    </TestCase>\nhttp://www.xmlvalidation.com says: \n\nErrors in the XML document:\n  4:  38  Character reference \"&#xFFFFFFE6\" is an invalid XML character.\n. XML output looks good now!\nThanks!. Still broken. Char to Int overflows and creates sequences like &#xFFFFFFE5;\n. Your patch solves 2 of 3 problems of this code section. The third case is, that the output has to be utf-8 even if the input strings are not utf-8 encoded (very likely for random byte sequences).\nI am escaping the chars > 127, if the hole value is not a valid utf-8 sequence (#588).\n. @razeh sorry that I did not reply earlier. Your patch seems to address the problems with 7bit ASCII (better than my patch did). But you ignored byte values greater 0x7F.\nP.S.: There is a difference between \"random\" binary and utf8. But if I would be living in the US or UK, I would also try to ignore that ... ;-) \n. static_cast<int>( c ) is wrong. Has to be static_cast<int>( static_cast<unsigned char>(c) )\n. \n",
    "frederich": "still in catch version: 1.4.0\n. ",
    "MojaveWastelander": "en is an enum class so it is not implicitly converted to int so why it will choose std::ostream& operator<<(std::ostream&, int) over more suitable version? The problem is that I overloaded stream operators for any enum types like this (actually I need it only for file streams, but is not essential):\n``` c++\ntemplate \ntypename std::enable_if::value, S&>::type operator<<(S& stream, E f)\n{\n    return stream << static_cast(f);\n}\ntemplate \ntypename std::enable_if::value, E >::type& operator>>(S& stream, E& mode)\n{\n    int m;\n    stream >> m;\n    return (mode = static_cast(m));\n}\n```\nand as I specified it works with all streams and loggers that use streams, Catch don't compare expressions as enums, but convert them to strings (using stringstreams) and then compare them as strings (even with C++11 enums define it works the same way). Right now I just cast boolean operations with enums to bool and it works:\nc++\n        REQUIRE((bool)(Test() == Enum::en_val));\n. I did some tests and it works when used directly with iostreams (it doesn't work with file streams or stringstreams). I use this with boost::property_tree to store/load settings and it works there in kind of  same way. Anyway it seems to work with current requirements, so I'll leave it as is, thanks for explanations.\n. ",
    "eyalsk": "Funny but I fired Visual Studio again and it works! I don't know what happened.\nI'll close the issue for now, I'll try to reproduce it on my spare time.\nP.S. I didn't really have useful code, it's a new project so all I did is.\nTEST_CASE() {\n    REQUIRE(2 == 2);\n}\n. ",
    "sQu1rr": "Same here, error: ignoring #pragma gcc diagnostic [-Werror=unknown-pragmas]. v1.3.4 doesn't have it\n. ",
    "fake-name": "That works, but this seems like something that should be part of the core library. Python asserts work that way, though I don't know any other languages with this feature off the top of my head. C asserts don't do this, but then C asserts are a lot lower level.\nIncidentally, why the do{}while(0)? Scoping with plain brackets seems to work fine.\n. Ah, I see, it prevents the macro from expanding into two statements. Cool!\n. ",
    "mat-tso": "In the first patch I move the toString(pair<...>) overload from the test to the public header.\n- Have I missed something, why has it never been done before ? Is their a flaw in the current toString(pair<...>) design ?\nThis is a first draft although I hope to eventually add support for all C++ containers.\n- But first I would like some feedback about my current way of factorizing the tests ? Usually I tend to put several layers of template everywhere :smile: ; so I forced myself to make it simple here.\n- Is their any (experimental ?) way to add typed catch test ? That would feel like the canonical way to go.\n. An other drawback of the Catch::toString implementation is that catch.hpp will include every container header which may or may not impact significantly build time for tests not using lots of different containers. Nevertheless I could not find a way to avoid that. The only thing I thought off was to forward declare the containers but it is undefined behaviour to \"adds declarations or definitions to namespace std\".\nThose extra inclusion might not have a big impact tough. I'll need to benchmark it.\n. After some extensive testing, my conclusion is that the inclusion and overload for all those containers is negligible. I could not measure a > 4ms overhead.\n. While I was adding a catch_tostring.cpp file to the SurrogateCpps I noticed that those surrogate cpps were only compiled in the xcode build system. Is their a technical reason for that ? I might as well add them to the cmake config as I am using it to compile the tests.\n. @nabijaczleweli Your proposition would work if toString was only formatting containers. Unfortunately, toString has overloads to format basic types, tuples, pairs and the user can overload it to add his custom types.\nThus  template<class Container> std::string toString(Container const& c); overload would be ambiguous with any other template overload. C++ has rules to reduce the viable function set, but it would still be quite dangerously ambiguous.\nOne solution to reduce this ambiguity would be to use some good old SFINAL:\n``` cpp\n/// Port some C++11 features\nnamespace detail {\n/// C++11 enable_if\ntemplate\nstruct enable_if {};\ntemplate\nstruct enable_if { typedef T type; };\n/// C++11 declval\ntemplate \nT &declval();\n} // namespace detail\n/* Only allow this overload to participate to overload resolution\n * if calling begin and end on a Container instance\n * does not result in an error.\n /\ntemplate\ndetail::enable_if)) ==\n                  sizeof(end(internal::declval)),\nstd::string> toString(Container const& c) {\n        return Detail::rangeToString( begin(c), end(c) );\n}\n```\nThis would restrict the toString overload to types with a begin and end support. Nevertheless that is still dangerous:\n- compilers errors are more complex to understand\n- the user might have defined a class with begin and end support. It does not mean it follows the container concept. Eg: a ChessGame class might have a begin and end method that are starting and stopping the game, not returning iterators.\n- I can not nor want to predict the outcome of the partial ordering rules if the user overloads toString for his custom container.\nTo conclude, I do not think that an opt out strategic is a good idea. Still, an opt in declaration could work.\nSomething like:\n``` cpp\n// Got lazy, this is C++11  ;)\n/// Types are not by default containers\ntemplate \nstruct IsContainer : std::false_type {};\n/// Declare which class are containers\ntemplate \nstruct IsContainer> : std::true_type {};\ntemplate \nstruct IsContainer> : std::true_type {};\n...\ntemplate \nstruct IsContainer> : std::true_type {};\ntemplate\nstd::enable_if::value,\nstd::string> toString(Container const& c) {\n        return Detail::rangeToString( begin(c), end(c) );\n}\n```\nNote that all containers headers must still be included. \nUser could opt in for his custom container as such:\ncpp\nnamespace Catch { // specialization must occur in primary declaration namespace\nstruct IsContainer<USER_CUSTOM_CONTAINER_TYPE> : std::true_type {};\n}\nWhat is your opinion ?\n. > > the user might have defined a class with begin and end support. It does not mean it follows the container concept.\n\nSuch a corner case must not impede progress.\n\nIf that is the general consensus, then it will make the implementation very generic and lightweight. Could the maintainer confirm that such corner case should not be handled by design ?\n@philsquared: Could you confirm that undefined behaviour is acceptable when printing a class with a begin and end method (or ADL accessible) BUT not returning proper iterators.\nEg: an instance with begin and end returning nullptr would segfault the program when trying to pretty print it.\n. As far as I know forward_iterator_tag is only an optimization trick, custom iterators are not required to derived from it.\nI am currently testing that the container has a value_type and const_iterator members and that begin and end call on the container are returning a const_iterator.\nI'll push that code very soon. I currently have some annoying overload ambiguity to fix.\n. Implemented the container auto detection as discussed. It was more complicated than expected, mostly because meta-programing in C++03 is quite harder than with the current standard. Had to remember sizeof tricks I stopped using a long time ago. :older_man: \nPlease review ! :+1: The most complex part is the container detection (IsContainer class) code, check it twice. I am open for style remarks too, it is the first time I contribute in Catch.\n. Fixed coding style, and factorized TrueType/FalseType.\n\nTo me a C++11-only feature in #ifdefs would have also been fine.\nMy only fear for pre c++11 support is old compiler with broken sfinae support.\n~~Nevertheless sfinae is already used to detect stream << support. A bit more should not hurt.~~\nEDIT: stream support detection do NOT use sfinae but a clever low prio operator<< to avoid it. See my next comment.\n\nI tested the code on windows with cmake (vs2015). 2 tests are broken but not due to my patches, master also has those tests fail. I'll try to fix them.\nAre their other platforms officially supported but not tested by the CI ?\n. > I\u00a0accepted a PR to fix those failing travis builds just recently (if it's the same one - master is building cleanly now). You might just need to rebase?\nI guess it is an other bug. I am testing the merge patch of #716 that is 3 day old.\nAs for SFINAE, I double checked and isStreamable is indeed no using it. Using a catchall type is very elegant BTW.\nBut I can not see how to do the same for containers. Or at least not without droping lots of container constraint enforcement. I'll give it a try, though.\nI could not find the SFINAE flag your mentioned, do you remember the exact flag name ?\nI finally wanted to thank you for this awesome UT framework and all the work you put into. Writing UT is so much more fun with Catch!\n. No, I did not know cxx-prettyprint. Gave it a look. Its is_container (prettyprint98.hpp:40) implementation is fairly similar to what I did. It also uses SFINAE to check for container requirements. My version is a bit safer as it also tests iterator ++ and != support.\n. Added support for c arrays. Their sized are deduced at compile time to array therefore any decay would fall back on the plain old pointer display.\n. I can no think about any other kind of container to add support for. Consider this PR feature complete !\n. Spook too soon, C++14 is broken due to overload conflicts between the cbegin&cend added to support pre c++11 and those coming from the C++14 standard library.\n. Found the source of my overload probleme: begin and end can not be declare in Catch if compiled in c++11 as that would lead to overload ambiguity with the stl one find via ADL. Thus they is now a guard \"NOT C++11\" for those function.\nAlso had to restrict my sfinae expression to check for ++ and != support for c++11 only. This troubles me a bit as SFINAE expression are known to be unsupported even by compiler claiming to be c++11 compliant. I will test it on windows and either remove it or use the catch all technique already used to detect operator<<(stream) support.\n. There is still a problem with begin and end. They are defined only in C++11 to avoid ambiguity with the standard library but on osx, although the C++11 flag is not set, std::begin and std::end ARE defined.\nOne solution would be to weaken my begin and end overloads. Maybe by using a custom conversion.\nNevertheless the code is already quite complicated. Instead I going to DROP the support for C++03. Only std::vector in C++03 as it is the case on master (no regression).\nConverting the PR to C++11 will make the patches a lot easier to read and maintain.\n. Dropped C++03 support of the container detection. Made the code a lot smaller! Hopefully Travis will validate my PR this time. A last review before merge ?\n. There seems to be a difference of type on osx of *begin(vector<bool>{true}). It calls the toString(bool) overload on all platform except osx for which the template<class T> toString(T) overload is called. I will try to fix that next week.\n. That looks good. Unfortunately, I do not have the time to do the port but can review it if you want.\nI do not think the amount of container check I coded were justified in practice.\nInstead, it could be documented that if a type is wrongly detected as container, the user can specialize is_container to be false.\n  . Note that c++11 begin and end support c-array so the specialisation line 19 should not be needed. You need to provide an lvalue to begin and end though.\nhttps://godbolt.org/g/SDRGmQ. BTW, feel free to use my Unit tests (or any other part of my CL), https://github.com/catchorg/Catch2/pull/606/files#diff-43562f40f8c6dcfe2c54557316e0f852. They were pretty helpfull to find inconsistency (bool, bool[], vector<bool>... especialy)\n  . How about using __builtin_trap() available on both gcc and clang to avoid the architecture dependence ? Though it will not specifically raise SIGTRAP.\nEDIT: On gcc 5.3.0 and clang 3.7.1, it raises SIGILL. It is kind of confusing to see \"Illegal instruction\" for an expected break. Thus I think your solution is better. :+1: \n. Remove comment, patch not done yet.\n. To implement all 17 standard containers, it might be more readable to use a temporary macro. Though the template commas are going to be quite painful to handle.\n. Unfortunately, function template default parameters were introduced in c++11. Your proposition would not compile.\n. Done\n. Done. I also used a reference instead of a pointer.\n. I used this order because it mimics the function I would write in c++11:\ncpp\ntemplate <class T, class V> constexpr bool isOfType(Value) {...};\n...\nisOfType<Int>(1);\n. Done\n. ",
    "billyquith": "\nWriting the expression in parenthesis defeats CATCH' expression decomposition.\n\nWhat am I supposed to be reading on that page that makes this issue different?\n[edit] My use case is:\n``` cpp\n    SECTION(\"metadata can be compared\")\n    {\n        const ponder::Class& class1 = ponder::classByType();\n        const ponder::Class& class2 = ponder::classByType();\n    REQUIRE(class1 == class1);\n    REQUIRE(class1 != class2);\n    REQUIRE(class2 != class1);\n}\n\n```\nCatch was trying to convert the rhs of the first REQUIRE test to a string to compare with the internal <= test. This requires that you know how the guts of Catch works. Outwardly, I just want to make the comparison, like the example in the link above. e.g.\ncpp\nCHECK( str == \"string value\" );\nCHECK( thisReturnsTrue() );\nREQUIRE( i == 42 );\n. Do you think that is a bug or not? Please explain.\n. If you'd written this description to start with, or it was included in the docs we probably wouldn't have this confusion. Ok, now I understand why it was trying to coerce my expression into a string, which caused my problem.\nIn which case I still think there is a problem, that the documentation needs updating.\nIt seems that docs make a big selling point of there being less comparison macros. But, using other systems, if I'd written REQUIRE( class1 == class1 ); I wouldn't expect to see this problem, rather, if it was REQUIRE_EQUAL( class1, class1); style. The purpose of this decomposition needs explaining and this gotcha needs mentioning. \n. I think the problem may be related to opaque objects that do not coerce into strings. I think I was comparing two objects and one didn't have a string representation. Putting brackets around these tests makes them work.\nI'll try and investigate further when I have some time. Cheers.\n. My issue is this: https://github.com/philsquared/Catch/blob/master/docs/tostring.md\nInitially it wasn't obvious because I have a lot of templates. I have missing template specialisations for string conversion for user objects. In these cases I have to use double brackets. \nI'll wrap Catch in a header and add some test-only string conversion code.\nThanks for following up.\n. Hmm. I'll just keep this open for a response.\nDon't suppose there is any way of catching things that don't coerce into strings at compile time? My tests compile ok but fail because of lack of string conversion.\n. Ok, it seems this is because I have a competing string coercion system. I was getting modified behaviour because it wasn't being included in all the tests. Adding a Catch wrapper with string conversion extensions changed the behaviour. I think I'll just have to avoid this expr design for the cases where this is a problem.\n. ",
    "sldr": "Yes, please embrace exceptions! No more printf(stdXXX, ...) and exit() (or in this case cXXX << \"stuff\"; exit(); ).\nMy $0.02 worth.\nFor great info on exceptions see the three part videos at Exception-Safe Coding in C++.\nThanks,\nSLDR\n(Stephen L. De Rudder)\n. ",
    "hobbes1069": "I'm seeing something similar with GCC 6 on Fedora Rawhide. Any help would be appreciated.\nhttps://sourceforge.net/p/zipios/bugs/9/\n. ",
    "vasyan1337h4x0r": "+1\nIs there any plan on fixing this?\n. @philsquared Works perfectly for me. Cores are dumped and I can see the source of an error.\nLooking forward to a release with this. Thanks!. ",
    "tombh": "I'm pretty sure this is a problem as well when using backward-cpp to show backtraces. When I comment out the relevant signal in catch's code (SIGSEGV in my case), backward-cpp suddenly starts working again.. @philsquared I can confirm the sector branch is working with backward-cpp now. Excellent :). @horenmar The single_include header from dev-signals works exactly the same as Phil's recent signal fix: backward-cpp now receives the signals.. I agree.\nShould not the definition of a 'test' be any block from within which you enter the codebase you're testing? So if you can run main(), object.do() or whatever in a SECTION then so too should you be able to isolate execution of that test.\nI would actually argue that without this TDD is, by principle, not possible.. ",
    "DarwinSenior": "That was long time ago for the course project when I decided to write test case for ray tracing. Using infinity for the the parallel cases. I will close this issue.. ",
    "gkm4d": "@philsquared appreciate the quick fix!  The behavior with 1.4.0 is now as I expected.\nI will pass along a couple of observations related to JUnit output.  Consider this test:\nTEST_CASE(\"foo\", \"[foo][!shouldfail]\")\n{\n    REQUIRE(true);\n}\nwhich produces:\n<testsuites>\n  <testsuite name=\"test_foo.exe\" errors=\"0\" failures=\"1\" tests=\"2\" hostname=\"tbd\" time=\"0.001793\" timestamp=\"tbd\">\n    <testcase classname=\"global\" name=\"foo\" time=\"0.000052\"/>\n    <system-out/>\n    <system-err/>\n  </testsuite>\n</testsuites>\nI was a bit confused by 2 tests being reported.  Stepping though the code I see this is due to the introduction of deltaTotals.assertions.failed++ in the new logic block in catch_run_context.hpp.  Seems this is necessary to ensure at least one assertion failure is noticed.  Perhaps you could instead say something like: deltaTotals.assertions.failed = deltaTotals.assertions.passed; deltaTotals.assertions.passed=0 to keep the count correct?  Regardless, I think this is a minor issue and tricky since \"tests\" generally seems to be keeping track of assertions, but here you are marking a test failure regardless of assertion failures.\nThe second observation is, I think, a little more problematic.  It may have actually have been an existing problem, and I can add a new ticket if necessary.  Consider the slightly modified test:\nTEST_CASE(\"foo\", \"[foo][!shouldfail]\")\n{\n    REQUIRE(true);\n    throw 1;\n}\nwhich produces:\n<testsuites>\n  <testsuite name=\"test_foo.exe\" errors=\"1\" failures=\"18446744073709551615\" tests=\"2\" hostname=\"tbd\" time=\"0.002008\" timestamp=\"tbd\">\n    <testcase classname=\"global\" name=\"foo\" time=\"0.0\">\n      <error message=\"{Unknown expression after the reported line}\">\nUnknown exception\nat ..\\src\\test_foo.cpp(15)\n      </error>\n    </testcase>\n    <system-out/>\n    <system-err/>\n  </testsuite>\n</testsuites>\nNotice the very large number of failures.  Here, a failure is counted due to the exception, but due to the [!shouldfail] this gets switched to a failedButOk.  in JunitReporter::writeGroup() the failure count is computed as stats.totals.assertions.failed-unexpectedExceptions.  Here this is 0-1, which wraps around to the very large unsigned integer.  I'm not sure of a robust solution here, other than some obvious check to catch this case and clip the number of failures to 0.\nThanks again for the quick fix!\n. ",
    "ev-mp": "Had the same issue in my code with:REQUIRE( \u00a0A ==B) && (C==D)) - reporting '..to complex'..Then additional parentheses and explicit '==true' condition worked for me :REQUIRE( true == \u00a0((A ==B) && (C==D)) )\nOn Wednesday, March 23, 2016 8:32 PM, Ryan Gonzalez <notifications@github.com> wrote:\nWhat about just separating them:CHECK(mismatch_pair.first == expected_result.end());\nCHECK(mismatch_pair.second == DeliveryWidget::s_widgetNames.begin());It would have the same effect at run-time anyway. The expression is \"too complex\" because of the &&.\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub \n. ",
    "KingDuckZ": "I'm also interested in this, or at least int a way to get the list of unprocessed parameters back from Catch/Clara.. Could it be the same problem I'm hitting? I have my own my_assert macro implementation and my unit test program provides a bool report_failure() function, which is invoked by my_assert when the condition is false. In this case its body is just REQUIRE_FALSE(assert_msg), where assert_msg is a const char* != null.\nIn my actual non-unit test code I have:\nSafeCountable::~SafeCountable() {\n    my_assert(m_count == 0);\n}\nThe unit test I'm writing is for making sure that assert triggers correctly. To recap:\n\nm_count == 1\nTEST_CASE destroys object -> ~SafeCountable -> my_assert -> report_failure(mesg) (body in different translation unit) -> REQUIRE_FALSE(mesg)\nfailed test is reported correctly\nunit test crashes\n\nI get this output:\n```\n/assertion_failure.cpp:39: FAILED:\nREQUIRE_FALSE( mesg )\nwith expansion:\n!\"m_count == 0\"\nterminate called after throwing an instance of 'Catch::TestFailureException'\n/test_safe_ptr.cpp:21: FAILED:\n{Unknown expression after the reported line}\ndue to a fatal error condition:\nSIGABRT - Abort (abnormal termination) signal\n```\nI can't really figure out what's going on, but it seems to be happening after Catch's ~AssertionHandler() returns. I don't spawn any threads, unlike the OP. Any help is very appreciated.. facepalm of course, I forgot destructors are implicitly noexcept! I could add some test_noexcept macro to every destructor declaration but that sounds hard to maintain and easy to forget... so I'll stick to just using CHECK. I hope this \"REQUIRE throws, CHECK doesn't\" rule is never going to change in Catch2! Thanks for spotting the problem!. horenmar gotcha, no CHECK with rapidcheck :) it should be easy to remember!. ",
    "dhaumann": "Any news on this, even if preliminary?. ",
    "nre-ableton": "@lightmare good catch (no pun intended!). I'll amend and add a try/catch instead.\n. @philsquared great, thanks! I'll close this PR.\n. ",
    "AzCopey": "Super minor, but it's annoying me that it's the one warning in my project :P \n. No worries, cheers! :)\n. ",
    "TorstenRobitzki": "Maybe it could be possible to make one test/section explicitly to be executed. I've tried to do this with add a tag, but it looks like that tags are only sampled at the highes level?\n. Sure, but that would add overhead (in terms of code to read) that I would like to eliminate.\nCHECK( a == { 0x01, 0x02 } );\njust reads nicer.\n. Nice, thank you. What would be the usual ways to add support for custom type comparison operators? Does the std::vector support only based on Catch::toString()? I ask, because I could change std::vector in my tests to something else.\nIn case I test with larger amounts of data, it could be handy if the comparison makes a diff between the two data sets and reports the difference instead of the content of both sets.\n. That sounds perfect! What do you think about having a diff in output of the error case, in case that the containers becomes larger?. @fschuh how did you managed to work around the throw Catch::TestFailureException(); in AssertionHandler::complete()? . Thanks a lot!. ",
    "Eyenseo": "Yes ist seems that Tags are only applied to TEST_CASE but not SECTION, Tags would be a great way to implement my Request.\n. ",
    "eirikba": "Another solution would be to add asMultipleReporters() to IStreamingReporter and have it return nullptr there, and override it to return this in MultipleReporters. But I think this design is cleaner.\n. A third solution that might be better would be to implement MultipleReporters as a linked list instead of holding a vector. I will code that up and send a pull request, so you can compare the solutions and see which one you prefer.\n. Personally I prefer #636 over this one.\n. That looks pretty much like my second suggestion, yes :) I believe that solves my issue. Thanks.\n. If you are attached to the assert, you could add \"assert( dynamic_cast( childTracker ) );\" to each of the changes. That will break compilation in debug mode with -fno-rtti, but that's not very important.\n. Possible, I guess. But that would require extending that test for each compiler you would want to support. And besides, I don't like making different compilations see different code. I find that's a good place for bugs to hide.\n. That sounds like a very good question. If you don't make that change, I might try coding up some variant of it and see what it looks like :)\n. I'm not (not yet, anyway) concerned about performance at all. My reason for making this patch is only to avoid requiring RTTI. There are plenty of projects that disable RTTI for various reasons, and if Catch requires RTTI that means Catch can not be used with those projects. And that just seems silly in light of how little use Catch actually has for RTTI.\n. Yes, that should do the trick. Thanks.\n. Thanks.\n. ",
    "lichray": "Compile all test files, including catch.cpp which contains the two lines, into their object files, like catch.o, test_bar.o, test_foo.o, and link them together, along with the library you want to test against, into one executable.  Any build system will normally do this.  For CMake, that will be:\ncmake\nfile(GLOB tests_srcs tests/*.cc)   # let's say your test_*.cc files are under \"tests\" folder\nadd_executable(run ${tests_srcs})  # and the test executable is \"run\"\ntarget_link_libraries(run your_library_target)\nadd_test(testall tests/run)        # and the executable also lies under \"tests\" folder\n. ",
    "vzelenkin": "Yes, both of mentioned issues have been fixed by PR #588 and PR #767. So I close my PR.. ",
    "SebastianTroy": "I'm not sure I'm reporting a bug, its more of a feature request. In the case that I run all of my tests, i.e. I don't filter them in any way, the resulting XML <testsuite> tag will always have the same name attribute value.It has only just occured to me that the name may change if I apply soe sort of test filtering, however this is not something I want to do.\n. ",
    "abominous": "Why not just cast return type?\nstd::transform( sourceLC.begin(), sourceLC.end(), sourceLC.begin(), (char (*)(int))tolower );\n. ",
    "woozie164": "Thanks. Was wondering why my test scenario wouldn't run. Explains it.\nSimilar issue with the GIVEN, WHEN, THEN macros.\n. ",
    "jbcoe": "Updated issue following face-to-face discussion (small world):\nI agree that having < and > both true is daft. All the LP and QP libraries I've seen expose <= and >= instead. If Catch did the same and Approx supported <= and >= would that be ok?\n. I'll review my example and see if I can reproduce the problem I had.\n. The issue is with explicitly constructible types (example now updated to make this clear). \nI'd like Catch's Approx to do the conversion for me.\n. The conversion operator is explicit because volatility is a strong typedef and I do not want implicit conversions because they can lead to nasty bugs (mixing volatilities and rates will give me wrong numbers).\nDefining X::operator bool () as explicit does not stop implicit conversions in if(X). I think that comparison with Approx is a similar case and would like the conversion to be (safely) inferred.\nI don't need Catch to solve this problem. I can define operator == etc for my strong typedefs if the Catch authors/maintainers don't think that allowing comparison with explicitly convertible types is desirable.\n. That's right. I would add an enable_if to protect people from nasty compile errors.\nDoes this belong in Catch or should I implement it myself?\n. Sounds good to me. Do you have existing examples I can base an improved PR upon?\n. I've updated the PR so tests pass.\nI wondered if you had existing macros to deal with conditional c++ 11 support\n. Are further changes to this PR required?\n. Are further changes needed to merge this? \nI've been using my patched version of Catch without any issues for a few months now.\n. test failures are addressed by #716 and are unconnected with this change.\n. I'll push support for != too. Seems silly to leave this out.\n. Squashed into one commit and ready to go.\n. I've rebased this again to handle the incorporation of <= and >= operators.\nI chose to rebase to keep commit history clean.. failing tests are unconnected with this change and addressed by https://github.com/philsquared/Catch/pull/716\n. @onqtam I think you are right. I'm not sure I'd find <, > useful for Approx. Do you have a use-case in mind?. REQUIRE(x < Approx(2.3));\nseems a bit odd to me. I'd be reluctant to add your functions for completeness' sake without a motivating use case.. Any issues with this?\n. I don't think you need to make changes to the single include file as it is generated.. Well spotted. Fixed.\n. Amended.\n. ",
    "nigels-com": "Seems to me a low-risk change.\n. ",
    "timoalho": "Good question. However, I'm on Windows, and last I checked valgrind is available only for Linux?\n. @kirbyfan64 I ran Dr. Memory, no errors displayed there.\n. @kirbyfan64 ok, thanks for trying it out. I guess I could/should submit the bug to either GDB or mingw64 then, but it might take some work to turn this into a MWE for them.\n. @kirbyfan64 just to clarify: you tried running this under GDB, running to the line with the unsigned int, and single stepping over it? Because it also works for me if I just run the program, it's the debugger that gives the error.\n. ",
    "alanconway": "I realise this is closed but I have an alternate proposition.\nI have tests that I wrote for a know bug that isn't fixed. I don't want to invent the tests because they're testing for the correct behaviour which someday we will implement. I would like to know if the problem gets fixed accidentally. \nHowever I don't want a ream of scary-looking output from my test suite as long as it is failing as expected. The return code is correct, so it won't upset the CI bots, but developers who see all that output are liabable to waste time investigating (I did it myself even though I wrote the tests and marked them [!shouldfail]!!) The only solution I have so far is to skip them, which makes !shouldfail redundant.\nTo my thinking a [!shouldfail] test should automatically invent the output of it's CHECKs. I.e. CHECK(i == 42) would be silent if i != 42, and would say \"CHECK(i == 42) passed unexpectedly!\" or somesuch if it did pass. Thus it would be silent if it fails as expected and noisy in all the right places if it passes unexpectedly. Simply removing the [!shouldfail] would then convert it into a correct positive test.\nBy the way - excellent test framework. I'm in the process of replacing a homespun one  - my tests are much simplified and more readable. This \"inverted\" test is the only feature I miss, and I can certainly work around it.. I just started using check in a mixed C/C++ project so comparing possibly-null C-strings is important. I initially tried Check::Matchers::Equals but it chokes on null pointers. I wrote a simple CStringMatcher that solves the problem nicely for me, perhaps it could be included in a future version of check2:\nhttps://github.com/alanconway/qpid-proton/blob/cpp-catch-tests/tests/include/catch_extra.hpp\nIt works like the built-in Equals but is over-ridden to handle null const char* correctly:\nusing Catch::Matchers::Equals;\nconst char x, y ...\nCHECK_THAT(x, Equals(y)); // pass if x, y are both null or both non-null and string-equal.\n. ",
    "netheril96": "Specifically, in Parser::handleOpt, the original code is \nc++\nif( std::string( \":=\\0\", 5 ).find( c ) == std::string::npos )\nThe length of string literal is only 3, yet the constructor reads 5 chars out of it.\nSimilarly, in Parser::handlePositional,\nc++\nif( inQuotes || std::string( \"\\0\", 3 ).find( c ) == std::string::npos )\nThe constructor reads 3 characters out of length-1 string literal.\nBoth of these cases result in undefined behavior.\n. ",
    "ianmacs": "I agree this is a bug. It was introduced in v1.5.2.\nsuggest these fixes:\nif (c != ':' && c != '=' && c != '\\0')\nif (inQuotes || c != '\\0')\n. Thanks for fixing this in v1.5.6.\nThis bug can be closed.\n. The eclipse CDT parser is notorious for finding errors in valid code. You will still be able to compile the code. The issue is cosmetic and can be fixed in the eclipse CDT settings.\nThis is not a bug in Catch. This issue can be closed.\n. ",
    "p4535992": "Ty very much , i accept this.\n. K sorry for the misunderstanding.\nGreetings.\n. ",
    "Cyberboss": "Clang builds failed because http://llvm.org/apt/llvm-snapshot.gpg.key 404'd\n. Alright, no problem. A) VS is a sneaky mistress\nB) Whoops, I've been commiting to master when I have a pull request open\n. ",
    "pnemere": "Code indentation: Switched \\t to spaces\n. ",
    "milleniumbug": "I use\nREQUIRE_NOTHROW([&]()\n{\n    // your code\n}());\n. @lightmare What if you want to test declarations? They aren't expressions.\nIMO you can get enough context from the name of the exception. If you can't, then your test is too big :D\n. ",
    "dpservis": "Hi all\nthanks for the answers, my main motivation for this are throwing constructors of classes without default constructors and then using these to make other objects/calls etc. \n. @milleniumbug good idea if using C++11\n. @milleniumbug great!\n. ",
    "akale2408": "@czipperz I'm new to this, and can't seem to figure out where / how to kick off another build for my PR. Am I not permissioned to or am I just blind?\n. ",
    "jcrada": "Thank you very much for your feedback. Unfortunately, there are other cases where I am being required to enclose in parentheses different kinds of statements. For example,\nhttps://github.com/fuzzylite/fuzzylite/blob/d095efce076549b435ea5f9e21addf8a7346965c/fuzzylite/test/activation/ThresholdTest.cpp#L31 \nhttps://github.com/fuzzylite/fuzzylite/blob/d095efce076549b435ea5f9e21addf8a7346965c/fuzzylite/test/activation/ThresholdTest.cpp#L36\nand so on, thereby requiring checks in the form CHECK(( a == b )) to use double parentheses in order to avoid triggering a warning. It seems a bit silly to have to use double parenthesis in such cases to avoid a warning. \nWould it not be possible to do such an enclosing in Catch instead? Hence, addressing this issue in g++-4.7 and possibly earlier versions of the compiler?\nThanks again! \n. Thanks for your help!\nYou could use my .travis.yml and Dockerfile file scripts to configure Docker to run with g++-4.7, without needing to roll back in your box.\nJust clone my repository in master branch (https://github.com/fuzzylite/fuzzylite/tree/master), and issue the following commands:\nexport CXX_COMPILER=g++-4.7\ndocker build -t fuzzylite -f Dockerfile --build-arg CXX_COMPILER=${CXX_COMPILER} .\ndocker run -e CXX=${CXX_COMPILER} -e FL_CPP11=${FL_CPP11} -e FL_USE_FLOAT=${FL_USE_FLOAT} -e FL_BUILD_TESTS=ON --entrypoint /bin/bash -it fuzzylite\nThe docker run will open bash for you on my projects root, where you can issue build.sh release to build the release of the software.\nThanks!\nLet me know if I can be of any help.\n. Many thanks for your help! \nSince the warning is raised only in g++-4.7, I decided to ignore the warning from the CMakeLists.txt by adding the following:\ncmake\n if (\"${CMAKE_CXX_COMPILER_ID}\"  STREQUAL \"GNU\") \n    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8)\n        set_target_properties(fl-test PROPERTIES COMPILE_FLAGS \"-Wno-parentheses\")\n    endif()\nendif()\nI am happy to have this issue closed. \nThanks.\n. ",
    "BobLoblaw27813789132": "\nDo you have latest Catch? It should be using __COUNTER__ instead of __LINE__.\n\nI just pulled down the catch.hpp single header version which states:\n\nCatch v1.5.6\n   Generated: 2016-06-09 19:20:41.460328\n\nThis is the latest release advertised on the main page. It does not appear to use __COUNTER__ and still has this issue.\n\nBut I think you'd be better off doing less macro-fu.\n\nI am completely for avoiding macros. The reason I did it that way was because I needed to dynamically generate test methods for various implementations of class interfaces. I can see if I can work your template idea into what I have, thanks.\n. > but you could try #defineing CATCH_CONFIG_COUNTER\nFor what its worth I tried that on 1.5.6 with VS2015 and that fixed it.\nThe reason for this is as follows (This seems like a bug):\nI'm using the combined header file. The check to see whether the compiler supports __COUNTER__ is on line 284. My VS2015 passes the macro evaluation and so it defines CATCH_CONFIG_COUNTER. The problem is that the logic for setting INTERNAL_CATCH_UNIQUE_NAME is on line 65 (before the CATCH_CONFIG_COUNTER gets defined). This (catch_common.h) would need to be moved after line 284 for it to know about CATCH_CONFIG_COUNTER.\nBecause of this, the combined header file will always use __LINE__ instead of __COUNTER__ regardless of whether the compiler supports __COUNTER__.\n. Confirmed. This fixes the issue and everything works. Thank you!. ",
    "englishb": "Just found this fix, and it helped me out.  I have a less contrived scenario;\nWe have >100 test functions that each need to be exercised in different ways that are selectable via the tags at the command line, so I have a macro that defines four different test cases for a given function, calling it with different parameters and concatenating the function name with some strings to generate the name passed into TEST_CASE.  Writing these test cases by hand with the correct tags and parameters had been very error prone, now we list each function once in a macro and it expands into multiple test cases.\nI tested in MSVC2013; it was a problem with catch v1.5.4, and I updated to v1.9.3 and the issue is fixed.. ",
    "philipp-classen": "This is a duplicate of #438 opened in Jun 17, 2015 with the identical bug fix.\nWell, the fix should really be merged. Not good if duplicated work has to go into bug fixing.\n. ",
    "jeremymayhem": "+1\n. ",
    "deeringc": "My team would also benefit from this greatly. Would be very nice to be able to add support for a -j n command line option.\n. ",
    "prateekbansal": "Seems like the issue happens when using --std=c++14 instead of --std=c++11. Any idea what could be the issue here? \n. @lightmare thx for looking into this issue. I doubt it is clang-3.5 specific issue as I also tried clang-3.8 with same results.\n. ",
    "Bu11etmagnet": "The output\n```\nProcessing src/main.gcda\n/tmp/test-profiling/src/main.gcno:version '402', prefer '404'\n/tmp/test-profiling/src/main.gcda:version '402', prefer version '404'\n/tmp/test-profiling/src/main.gcda:unknown function '2440'\n/tmp/test-profiling/src/main.gcda:profile mismatch for '_ZN5Catch8TestCaseD2Ev'\n```\nsuggests that the version of the compiler and the version of gcov does not match. Object files generated by a certain version of GCC should be processed with the gcov program of corresponding version.\nFor clang, the coverage program is called llvm-cov. I have two versions of clang on my computer (packaged clang 3.4 and self-built top-of-trunk) and there are two llvm-clang binaries (/usr/bin/llvm-cov-3.4 and /usr/local/bin/llvm-cov).. catch_stream.h (which uses CATCH_AUTO_PTR) forgot to #include <memory>. Seems to me Catch needs something similar to gtest's parametrized tests.. You need to build your unit tests with --coverage, run them, and then use gcov , or better yet, lcov to see which lines are being covered.\nHere's a makefile snippet to get you started:\n```\nTEST_PROGRAMS := foo_test bar_test # example\ncoverage: checks\n    lcov --directory . --capture --output-file my.covdata\n    genhtml --legend --title my_coverage -o coverage_dir my.covdata\nchecks: prep\n    ${MAKE} parallel-checks\nprep:\n    rm -f .success .fail # make sure they aren't left behind from a previous test\n    rm -f *.gcda # this shouldn't be necessary!\nPhony target which depends on all the \"run the test\" targets.\nWhen parallel-checks is built, its \"run the test\" dependencies can be built in parallel.\nparallel-checks: $(addsuffix -runq,${TEST_PROGRAMS} ${TEST_SCRIPTS})\nUtility target to build and run a test program.\nFaster turn-around time because not everything needs to be built\nand only one test is executed.\n%-runq: %\n    @echo \"  RUN     \" $<; rm -f $<.success $<.fail; \\\n    if ./$<  >$<.out 2>&1 || ./$<  >$<.out 2>&1; then \\\n        mv $<.out $<.success ; \\\n    else \\\n        mv $<.out $<.fail ; cat $<.fail; exit 1; \\\n    fi\n```\nNow, typing make coverage will build all unit tests, run them, and create nice HTML pages.. If catch used C++11, that would be operator=() = delete and copy constructor = default, right?\nThis combination seems highly suspicious to me. If assignment is disabled, the copy constructor should be disabled too.. If the lifetime of the Approx object was incorrect, there would be a lot more reports.\nHave you tried another platform? Maybe Cygwin's illusion of POSIX is not good enough, or its clang ran into a corner case.. The last sentence sounds like a problem with gsl.. Returning nonzero when tests fail is very useful (I'd say required) when running tests from a build system.\nLet's hope nobody will have 256 (or multiples of it) test failures, because it would look like success.. You can work around this (commas inside template argument list inside macros) by typedef-ing your pair:\nusing two_ints = std::pair<int, int>;\nREQUIRE_THROWS_AS(two_ints(1,4),std::invalid_argument);\nDisclaimer: I didn't actually try this.. What's up with the indentation? Did you use tabs and expect them to be four spaces?\n. Might as well static_cast<unsigned int> (instead of int) from unsigned char\n. ",
    "dmcardle": "Your test program will accept command-line arguments and options that might help you (See ./test -h).  \nThe high-level usage is defined as test [<test name, pattern or tags> ...] [options].\nExample\n```\n/ test.cpp /\ninclude \"catch.hpp\"\nTEST_CASE(\"MyClass\", \"[tag]\") {\n    SECTION(\"firstTest\") {\n        / ... /\n    }\n    / ... /\n}\n```\nWhen you execute ./test MyClass, all the sections of that test case will run.\n. ",
    "zachstruck": "I updated to the latest Catch, and I no longer see the compile error.. This fix is no longer needed for the latest Catch.. ",
    "OMGtechy": "Pretty sure you're right, so I made https://github.com/philsquared/Catch/pull/779. ",
    "polyvertex": "For the record and to add to @LYP951018's comment, the __cplusplus value with MSVC is not reliable. At least not the way Catch expects it to be.. Reminder for the refactoring: #697. ",
    "blueskyjunkie": "Here's how I solved this problem:\n- My application uses Dependency Injection for distributing a \"MessageLogManager\" around the application.\n- My logging framework has the concept of Sink where log messages are directed and the Sink can be custom implemented.\n- The MessageLogManager is abstract virtual and has concrete children to implement a specific type of log relating to the log framework (rotating log, etc).\n- A concrete implementation of the MessageLogManager essentially creates a logger on request and associates with the Sink defined for that implementation.\n- For tests where I just don't want logging in relation to Catch tests I use a NullLogManager to hand into classes such that any log messages generated in the application test go nowhere.\n- For tests where I might want logs as a useful part of Catch tests I use a InfoLogManager with a custom Sink that redirects log messages to the Catch INFO macro. This way for passing tests the log messages never appear, but when tests fail, any log messages generated appear as part of the test diagnostic per Catch test output.\nHope this helps.\n. @dutow Fair enough. I had the abstraction anyway so it was almost trivial to extend it to unit tests.\n. ",
    "dutow": "@philsquared  Thank you, that's exactly what I'm looking for, unfortunately, I didn't check the closed tickets.\n@blueskyjunkie While that solution would work, and I do use DI for other parts of my application, I don't think that adding an additional abstraction around logging just to support a better output for unit tests is justified.\n. ",
    "razeh": "Yeap :-(\nAn alternative would be to escape the strings ourselves into something\nnormal text, rather than trying to represent them as XML.\nIf you'd be willing to go down that line of thought, I can try coming up\nwith something over the weekend.\nRobert\nOn Fri, Oct 14, 2016 at 1:02 PM, Phil Nash notifications@github.com wrote:\n\n/insert face palm gif here\nI'll have to look at making it optional.\nThat's going to suck, though. Looks like there's no clear win here?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/pull/701#issuecomment-253876501,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAKqkU4ZV5HgHPKAbS5N_3MXNsdcFIW5ks5qz8PPgaJpZM4JsJAN\n.\n. Argh.  I hit send too soon.\n\nAn alternative would be to escape the strings into normal text --- and not\ntrying to come up with the right XML representation for binary.\nIf you'd be willing to go entertain that line of thought, I can try coming\nup with something over the weekend.\nRobert\nOn Fri, Oct 14, 2016 at 1:05 PM, Robert Zeh robert.a.zeh@gmail.com wrote:\n\nYeap :-(\nAn alternative would be to escape the strings ourselves into something\nnormal text, rather than trying to represent them as XML.\nIf you'd be willing to go down that line of thought, I can try coming up\nwith something over the weekend.\nRobert\nOn Fri, Oct 14, 2016 at 1:02 PM, Phil Nash notifications@github.com\nwrote:\n\n/insert face palm gif here\nI'll have to look at making it optional.\nThat's going to suck, though. Looks like there's no clear win here?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/pull/701#issuecomment-253876501,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAKqkU4ZV5HgHPKAbS5N_3MXNsdcFIW5ks5qz8PPgaJpZM4JsJAN\n.\n. Thanks for the work!\nI think escaping the control characters is the right route to go. I don't think the XML 1.1 support is worth the added complexity; XML 1.1 was only added so we could encode the control characters, and I don't think that has a lot of value. Escaping them is good enough. I just want output that doesn't break my XML parser.. Is there a test I can add to catch this for next time?\n. \n\n",
    "gerikintercede": "The XML header is always written to the console and not the output file:\n\nTests.exe -r xml -o test.xml\n<?xml version=\"1.1a\" encoding=\"UTF-8\"?>\n\nThis fix to catch_reporter_xml.hpp fixes it:\n```\n     public:\n         XmlReporter( ReporterConfig const& _config )\n         :   StreamingReporterBase( _config ),\n-            m_sectionDepth( 0 )\n+            m_sectionDepth( 0 ),\n+            m_xml( _config.stream() )\n         {\n             m_reporterPrefs.shouldRedirectStdOut = true;\n         }\n```\nFound in 1.5.8\n. ",
    "IlyaFinkelshteyn": "If I remember correctly in our case in AppVeyor, test result parser rely on .NET so we could not parse catch test results. If results become XML 1.0 again, AppVeyor customers who use Catch will be happy :). ",
    "alecazam": "Agreed, most of the apps that I work explicitly forbid exceptions (f.e. Emscripten based targets).  We turned on exceptions for Catch, but it slows down the compile times, and the runtime immensely.   I appreciate the cleanliness of the API, but a set/longjump approach when exceptions are off would open this unit test framework up to more codebase.  There doesn't appear to be a way to only enable exceptions on the unit test cpp files.  I prefer to run unit test at startup of the actual app, so you can always be testing.\n. I'm well aware of what set/longjmp do and their ramifications on destructors, and goto are evil too, but when you need them you need them.  The reliance on exceptions in this unit test framework leaves little in the way of alternatives.  \nI'm not too concerned about leaking memory from the Catch framework, and aren't the exceptions only used on failures?  The typical use case here is to launch with unit test at that start, and then fail the application from running if the unit tests do.  So the stack unwinding doesn't seem too serious in this case.\n. Setting some sort of error state with early returns before the next macro is another alternative.\n. Here's an excerpt from the Google unit test framework.  Catch would be a lot more useful if it followed suit:\nhttps://github.com/google/googletest/blob/master/googletest/docs/Primer.md\nGoogle C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations. \n. I understand that you like exceptions.\n. ",
    "magreenblatt": "How about adding a configuration that #ifdef's out all functionality (THROWS macros, etc.) related to exception handling? Existing usage of \"throw X\" could be wrapped in a macro or function and implemented differently in cases where exceptions are disabled (for example, print an error message and crash). That seems like a reasonably clean approach that also preserves stack traces.\n. ",
    "iam": "I created a pull request to in an attempt to support catch2 with -fno-exceptions. It doesn't yet handle the AssertionHandler::complete() problem since I'm not sure what is the most appropriate solution.\nIf anyone wants to take a look #1358  , feedback is appreciated. Maybe it is redundant to #define CATCH_CONFIG_FAST_COMPILE but I am not sure.. Hi Martin,\nThanks for replying, looking forward for more feedback.\n\nChanges to Clara need to go to the Clara repo. \n\nGot it, I'll upstream the changes for Clara there. Do I leave the copy-of-clara in catch2 untouched?\n\nAlso, Clara should already work with -fno-rtti, is that not the case?\n\ndynamic_cast seems to be used by clara,  this keyword causes a compiler error with -fno-rtti.\n\nAll of the supported compilers need to work with this patch. In practice this means that either the detection needs to work for all of them automatically, or there needs to be user-accessible compile-time toggle.\n\nI see on the CI it's using clang, g++, VS2015 and VS2017. Are those the only supported compilers? I don't currently have VS2015/17 myself but is it enough to rely on presubmit to validate the vc support?\nBy the \"user-accessible compile-time toggle\" do you mean a CMake option? When I read docs/configuration.md it seems most configs are cpp #define macros, so my attempt was to be as close to that as possible, is there better way?\n\nCHECK_CONFIG_USE_EXCEPTIONS define comes out of nowhere.\n\nNot sure I understood, can you elaborate?. @horenmar Thanks, now I understand your explanations, and yes now I also see that CHECK_CONFIG_USE_EXCEPTIONS is a typo!\n\nWhat about the approvalTests script, how do you want to reconcile the differences when running it against a Catch2 built without rtti/without exceptions?\n\nHowever running approvalTests script (without rtti and exceptions) fails,\nlargely because the .txt files that are diffed against have test output\nthat is now disabled without exceptions.. \n",
    "FlYnN91": "Oh wow, that's embarrassing. Holding my head in shame. Thank you for the comment.\n. @philsquared - yes, thank you.. ",
    "abbradar": "Workaround:\n```\ndefine REQUIRE_VA(...) \\\n({ \\\n    auto f = [&]() { return (__VA_ARGS__); }; \\\n    REQUIRE(f()); \\\n})\n\n```\n. Another workaround, but notice backwards incompatible arguments swap:\n```\ndefine REQUIRE_THROWS_AS_VA(type, ...)                 \\\n({                                                                                      \\\n    auto f = [&]() { return (__VA_ARGS__); };       \\\n    REQUIRE_THROWS_AS(f(), type);                               \\\n})\n\n```\nIf we want to fix this with backwards compatibility then we unfortunately need to leave REQUIRE_THROWS_AS and other more-than-one-argument macros as is (at least I don't see any other way).\n. Ugh, I feel stupid -- I haven't thought that it would work. Thanks!\n. ",
    "adah1972": "Are you sure? It seems to work well for me.\n. ",
    "Mikaka27": "Yes, for example boost library is there for the taking.\nSee here: https://www.nuget.org/packages/boost\n. Well, it's not a problem, but I guess it wouldn't hurt also having it on nuget :)\nThat way any updates to Catch will show up in everyone's projects automatically.\nJust asking, not my decision anyway.\n. Hi, I'm new to github so I'm not sure if you need me to reopen this or can someone else do it (if it's needed of course).\nIf only I can do it please let me know if you want it.. ",
    "ZaldronGG": "These days I suppose Catch should be released via vcpkg\n. ",
    "ras0219-msft": "It has been added to vcpkg: https://github.com/Microsoft/vcpkg/pull/195\n. @philsquared Updates should be as simple as submitting a PR to bump the version field and change the download URL.\nWe definitely are interested in improving automation down the road -- automatically picking up package updates, testing them, then making them available. However, that's not available quite yet, so the above is as simple as it can be for now :).. @horenmar We do have exactly that, courtesy of Git [1]. Every version that has ever been published through Vcpkg will be forever available.\nhttps://github.com/Microsoft/vcpkg/blob/master/docs/FAQ.md#how-do-i-use-different-versions-of-a-library-on-one-machine. I've updated the vcpkg master to use catch's GitHub, however for now I've also added a forwarder from include\\catch.hpp to include\\catch\\catch.hpp since we previously provided that as the header.\n. You can get master via vcpkg remove catch2 and then vcpkg install catch2 --head.. ",
    "RLangendam": "Possibly solves #387\n. I agree that a compiler should only warn if something is done wrong; not when something could go wrong when used inappropriately. In general though, one should strive to satisfy the rule of five.\n. ",
    "BillyONeal": "@lightmare Yep! But this one passes Travis :)\n. ",
    "surkeh": "(gcc 7.1.1)  I think this is what caused me to pull my hair out for a few hours on a project using several fixed-width variables.. Same issue with that header, confirmed with other tests that this only occurs with Catch.  Thanks for looking into this.  Catch worked flawlessly for another project -- really like the output on test failure and sections feature.  I'll keep a local set up to test this issue and keep a closer eye on this email.  Best of luck!\n. ",
    "jruffin": "+1. Many of my tests are either made of common code and REQUIREs that are run against a bunch of input data with corresponding expected output data, or have common post-condition checks that might only fail in a particular run but be OK in the others. On top of that, I use a mocking framework that checks whether everything was called as expected during the destruction of its mock objects at the end...\nSo far, I have been working around the issue by packing most common code and REQUIREs into fixture methods and calling those in each SECTION that needs it and using a listener to trace and keep the deepest section stack of a run and print it when the mocking framework fails, but neither are nice nor very \"catchy\" in my opinion.\nI have managed to modify Catch to fix the issue with both reporters where this seems sensible (console and JUnit), see #736.\n. ",
    "vosel": "Well, maybe then I misunderstood the situation. I created this pull request because the code from the documentation was not working correctly for me. But when I added the 'template<>' to the signature, it started to work correctly.\nHere is the test case for which the behaviour is incorrect:\n``` c++\ninclude \ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nstruct MyClass {\n    bool operator == (MyClass const & other) const {\n        return false;\n    }\n};\nnamespace Catch {\n    std::string toString(MyClass const & toDump) {\n        return \"custom presentation\";\n    }\n}\nTEST_CASE(\"test\", \"test\") {\n    MyClass c1;\n    MyClass c2;\n    REQUIRE(c1 == c2);\n}\n```\nWhen compiled and executed (I used gcc 4.9.2 with -std=c++14, Catch v1.5.7.), the output is the following:\ntestcase.cpp:17: FAILED:\n  REQUIRE( c1 == c2 )\nwith expansion:\n  {?} == {?}\nBut when I replace the std::string toString(MyClass const & toDump) with template<> std::string toString(MyClass const & toDump), the test output changes to this:\ntestcase.cpp:17: FAILED:\n  REQUIRE( c1 == c2 )\nwith expansion:\n  custom presentation == custom presentation\nNotice the change in the expansion: from {?} == {?} to custom presentation == custom presentation.\nSo, I assumed, that there is a simple typo in the code snippet in documentation and created this fix.\nBut if what you are saying is true, then there is a bug in the library. Should I create an issue for this?\n. ",
    "jktjkt": "This looks like what I've been looking for. Thanks!\n. I came here looking for an existing bugreport about this behavior change. We're of course OK with changing our test suite to follow this upstream change, but I want to check with you that this change is intentional.\nThe older Catch doesn't work with the new syntax.. Previously we were on 1.5.9. I don't have a minimal example, sorry, this is a hand-sanitized snippet from our internal CI run (GCC 6.2.1 on CentOS 7, devtoolset 6). Getting rid of the variable identifier resulted in this:\nxxx.cpp: In function void ____C_A_T_C_H____T_E_S_T____24():\nxxx.cpp:38:43: error: no matching function for call to MyClass()\n         REQUIRE_THROWS_AS(MyClass(serial), FramingError);\nThis is roughly how that class looks like (again, hand-sanitized):\n```cpp\ntypedef std::shared_ptr StreamPtr;\nclass MyClass {\npublic:\n    MyClass(StreamPtr serial);\n// ...\n};\n```\nDon't waste much time on this, I guess -- the change was very cheap anyway. I just wanted to provide some feedback that yeah, it was noticed :).. ",
    "melak47": "@lightmare would be nice to get that merged.\nClosing this since there's already another issue about the same bug.\n. I'm happy to add tests, but there seem to be no tests that specifically check whether std::string and const char* are stringified the same, so I'm not entirely sure what you'd want the tests for std::string_view to look like.\nThere are some tests for stringifying containers of strings, where the quoting behavior is indirectly tested for std::string.\nDo you think something simple like \n```cpp\nTEST_CASE(\"String views are stringified like other strings\", \"[toString][approvals]\") {\n    std::string_view view{\"abc\"};\n    CHECK(Catch::Detail::stringify(view) == R\"(\"abc\")\");\nstd::string_view arr[] { view };\nCHECK(Catch::Detail::stringify(arr) == R\"({ \"abc\" })\");\n\n}\n```\nis enough? If not, could you elaborate on what you're looking for?\n\nAs for the inefficient implementation, the char*/const char*/ wchar_t*/ const wchar_t* specializations are implemented the same way.. Hm, seems the tests fail to compile on clang 6 + libstdc++ because of a bug: https://bugs.llvm.org/show_bug.cgi?id=31852\nNewer clang should have a fix, newer libstdc++ should have a workaround, but I'm not sure what to do now :/\nEdit: clang trunk has the fix, not sure about the upcoming 7.0 release, and gcc 8.2.0's libstdc++has the workaround for clang 6.. I tried changing it to libstdc++-8-dev, but that doesn't seem to make a difference.\nAlso, I just noticed that the output says clang 5.0.0 despite the travis configuration asking for 6.0.. I did some more testing, libstdc++ 8.2 has the workaround, 8.1 doesn't, clang trunk appears to have the fix, clang 7 nightly doesn't.\n_GLIBCXX_RELEASE only gives the major version, so it ended up begin a little uglier than your sample :)\n. Apparently __GLIBCXX__ is useless to detect the actual libstdc++ version, since it can be the datestamp of whenever the snapshot was taken: https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html#abi.versioning.__GLIBCXX__\nSo that leaves disabling the feature for all versions of libstdc++ <= 8, and letting the user override with CATCH_CONFIG_CPP17_VARIANT :/\n. Work differently how?\nUsing _MSCVC_LANG is necessary to detect whether the user is compiling with e.g. /std:c++17 on msvc, and is going to be necessary at least until the next major release .\nOr do you mean putting this logic into some CATCH_INTERNAL_MSVC_CPP17_OR_GREATER macros?. The std::wstring specialization should only be present when CATCH_CONFIG_WCHAR is defined,\nstd::string_view only when string_view support is on, std::wstring_view only when both are on - I could move blocks around so the ifdefs don't nest, but wouldn't it still take three ifdef'ed blocks?\nEdit: Ok, you're right, I see some blocks that can be merged in the .cpp file.. Is this more like what you'd expect (in catch_compiler_capabilities.h)?\n```cpp\nif _MSC_VER >= 1910\nif defined(_MSVC_LANG)\nif _MSVC_LANG >= 201402L\ndefine CATCH_INTERNAL_CONFIG_MSVC_CPP14_OR_GREATER\nelif _MSVC_LANG >= 201703L\ndefine CATCH_INTERNAL_CONFIG_MSVC_CPP17_OR_GREATER\nendif\nendif\nendif\n// ...\n////////////////////////////////////////////////////////////////////////////////\n// Check if string_view is available and usable\nif defined(__has_include) && __has_include() && (CATCH_CPP17_OR_GREATER || CATCH_INTERNAL_CONFIG_MSVC_CPP17_OR_GREATER)\ndefine CATCH_INTERNAL_CONFIG_STRING_VIEW\nendif\n// ...\nif defined(CATCH_INTERNAL_CONFIG_STRING_VIEW) && !defined(CATCH_CONFIG_NO_STRING_VIEW) && !defined(CATCH_CONFIG_STRING_VIEW)\ndefine CATCH_CONFIG_STRING_VIEW\nendif\n``\n.__cplusplusis still199711Lon MSVC, and_MSVC_LANGmatches what standard you selected with compiler flags.\nWith recent versions, you can also use/Zc:__cplusplusto make__cplusplusmatch_MSVC_LANG`, but this will stay disabled by default until at least the next major release of MSVC. See https://blogs.msdn.microsoft.com/vcblog/2018/04/09/msvc-now-correctly-reports-__cplusplus/.. ",
    "pareshdp": "Hi Martin,\nI tried the same example which was shared by Phil in his video (on Youtube) with simple add function.\nCould you please help me to understand how to resolve these linker errors ?\nThanks in advance.\n-Regds,\nParesh\n. Finally it worked..Below is the modified code. Thanks a ton onqtam :) !! Really appreciate your help..\nWas struggling with these errors... Will try more features from CATCH and let you know if any help needed.\n// MyApp.cpp : Defines the entry point for the console application.\n//\ninclude \"stdafx.h\"\ninclude \ndefine CATCH_CONFIG_RUNNER\ninclude \"catch.hpp\"\nint main( int argc, char* const argv[] )\n{\n  // global setup...\nint result = Catch::Session().run( argc, argv );\n// global clean-up...\n  _getch();\n  //return result;\n}\nint add(int a,int b)\n{\n    return a+b;\n}\nTEST_CASE(\"My First Test case\",\"Test case1\")\n{\n    REQUIRE(3 == add(1,2));\n}\n. ",
    "mickk-on-cpp": "I don't know Catch internals that well, but from the look of it toString is meant to be called qualified (example). This is also another nail in the ADL coffin.\nIn any case I am not necessarily advocating that those calls should be unqualified. There's more than one way to skin that cat, and there are trade-offs to be made in terms of ease-of-use to the Catch user, ease-of-maintenance to the Catch maintainers. A good example is using std::swap vs boost::swap (coliru demo).\n. ",
    "HeroicKatora": "Another way to work around this would be with explicit class template specialization, or even a combined way. Both possiblities in one file\nFor complete backward compatibility (means no ADL at all), line 16 would have to be commented out. This may or may not be intended.. Sorry, I'll close this, I hadn't searched the close issues. 5 days ago you closed exactly this as #449. For types that are const and constexpr-copiable, you could use copy-by-value as well. \nBut simply doing it for integral variables only would already be quite an improvement and probably be enough for 90% of cases. Maybe offer a templated type to let the user decide?\n```\ninclude \nconstexpr bool allow_copy_default = true; // Or false since it has a runtime penalty\ntemplate struct allow_copy { constexpr static bool value = allow_copy_default; }; // Can specialize this for user types\ntemplate struct should_copy {\n    using raw_type = typename std::remove_reference::type;\n    using basic_type = typename std::remove_cv::type;\n    constexpr static bool by_value = !std::is_reference::value;\n    constexpr static bool can_const_copy = std::is_const::value && std::is_constructible::value;\n    constexpr static bool value = (by_value || can_const_copy) && allow_copy::value;\n};\nstatic_assert(should_copy::value, \"\");\nstruct T {}; //Trivial\nstatic_assert(should_copy::value, \"\");\nstatic_assert(!should_copy::value, \"\");\n```. @lightmare Those two paragraphs should have been seperated better. My code example is associated only to the latter one. Your version is more terse for integer types but doesn't allow the same freedom of enabling copy for custom types.. It should probably be \ntypename VT = remove_cv_t<remove_reference_t<T>>\n\nas T might be a reference, to allow forcing copies of temporaries. I kind of like it in this form.\nFor integer types, one might consider copying them in all instances (except when passed as non-const reference), to allow for constexpr variables without linkage to appear, i.e. avoid magic, unnamed constants but keep them constexpr nevertheless.\nKeep in mind that in the initial example, the type for Foo::i is \"const int&\".. ",
    "geraschenko": "This fixes the issue for me. Thanks!. Thanks. I didn't realize the single include is only regenerated on releases. I've removed the change to the single include.. ",
    "LeonineKing1199": "Oh, the fix is so easy and oddly mechanical O_o\nWell, there's some good news for you guys, I have professional data entry experience. If I explicitly added noexcept to them all, should I make a formal pull request? Will I have to first test my code against gcc as well?\nEdit: Btw, it's totally fixed now. It was also in just one line as well. I guess I was intimidated by the number of errors. Anyway, thanks for the help! Everything's compiling and working beautifully.. I just downloaded Catch 1.7 and the error has reappeared. I am attempting the same fix from before.\nEdit:\nThe same fix from before works, removing the explicit destructor definition for Matcher.. That's a really good question, actually. I'll check it out and be sure to report back with my findings. For MSVC, I'm just using /W3 or rather, whatever the default compiler options for CMake's Debug build.. ",
    "Rastaban": "The current travis test failures are not related.  After #754 is checked in I expect this to pass.. ",
    "faithandbrave": "FYI, sizeof( testStreamable(s << t) ) is maybe undefined behavior. SFINAE happens from function signature (parameter or return type context, not argument).. Thank you for your information. The issue is not a bug.. ",
    "everythingfunctional": "I would like to second this request.\nAny thoughts on how to implement it?. For the time being I've resorted to a kind of workaround. I created the following two functions to be used wherever you want to check two vectors. (i.e. REQUIRE(compareVectors(vec1, vec2)); )\n```c++\nbool compareVectors(std::vector a, std::vector b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); i++) {\n        if (a[i] != Approx(b[i])) {\n            std::cout << a[i] << \" Should == \" << b[i] << std::endl;\n            return false;\n        }\n    }\n    return true;\n}\nbool compare2dVectors(std::vector> a,\n                      std::vector> b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); i++) {\n        if (! compareVectors(a[i], b[i])) return false;\n    }\n    return true;\n}\n```\nThat way you'll at least be able to see the name of the vector that failed, and the first values that differed.\nIt's not the ideal solution, so I'm still hoping someone will be able to come up with something better, but I thought I'd at least share what I've come up with so far in case it helps somebody.. ",
    "tgnottingham": "I'd like this functionality for comparing vectors and matrices from the glm library. If this issue gets resolved, I hope that the solution is general enough to handle container types such as these as well, even if requires some work from the user to make it work for their particular containers.. ",
    "schoetbi": "I also had the problem especially in conjunction with the command line flag --success. The flag prints out every successful REQUIRE statement. When using REQUIRE inside of a loop over a vector of many elements this can lead to a long console output.\nI created this helper function for vectors of T:\nc++\ntemplate <typename T>\nvoid RequireVectorEquals(const vector<T>& a, const vector<T>& b,\n                         T max_error = 0.000001) {\n  REQUIRE(a.size() == b.size());\n  const auto first_mismatch = std::mismatch(\n      a.begin(), a.end(), b.begin(), [max_error](T val_a, T val_b) {\n        return val_a == val_b || std::abs(val_a - val_b) < max_error;\n      });\n  if (first_mismatch.first != a.end()) {\n    FAIL(\"Difference at index \" +\n         std::to_string(std::distance(a.begin(), first_mismatch.first)) +\n         \" values=(\" + std::to_string(*first_mismatch.first) + \",\" +\n         std::to_string(*first_mismatch.second) + \")\");\n  }\n}\nand this for arrays\n```c++\ntemplate \nvoid RequireArrayEquals(const T a, const T b, size_t len,\n                        T max_error = 0.000001) {\n  size_t i = 0;\n  while (i < len) {\n    const auto val_a = a[i];\n    const auto val_b = b[i];\n    if (val_a == val_b || std::abs(val_a - val_b) < max_error) {\n      ++i;\n      continue;\n    }\nFAIL(\"Difference at index \" + std::to_string(i) + \" values=(\" +\n     std::to_string(val_a) + \",\" + std::to_string(val_b) + \")\");\nreturn;\n\n}\n}\n```. ",
    "hrabalik": "There are includes inside a namespace -- looks like a merge mishap to me.. ",
    "semmel": "Great! \ud83d\udc4d \nThanks! . ",
    "SoftwareApe": "@horenmar Actually that makes sense Catch version 2? C++ 11? 2 * 11 = 22. ",
    "wich": "I'd like to add that any form of a char (char, signed char, and unsigned char) is always printed as a character literal rather than as a decimal or hexadecimal value. This can be truly inconvenient in many cases where a char or any of it's type aliases like uint8_t are not used for character storage but for a numeric value. For example 8 bit pixel component values, 8 bit fields in a protocol or a file format, byte addressed memory/streams/whatever, etc. It would be very useful to be able to influence this behavior in some sane manner and tell it to use a specific format for these types, e.g. `0x%02x'.\nWhat is particularly confusing is that overloading operator<< like it tells you to do in the documentation has no effect whatsoever for e.g. uint8_t as this is a type alias for unsigned char and there already is an overloaded version of toString for unsigned char so the overloaded operator<< is completely ignored.\nWorse, it's not possible to fix it by proving a custom toString as that one already exists within Catch. What I ended up doing for the short term is to simply remove the toString implementation for unsigned char from catch.hpp, but that is far from an ideal solution. As a more permanent solution I've been thinking of changing my project to using a BOOST_STRONG_TYPEDEF of uint8_t instead of uint8_t directly. That way operator<< will probably work and at worst I can provide my own toString. But it seems rather insane to have to change my project code to accommodate the test framework.. ",
    "jjcamp": "This is a travis issue, but you're likely using the default build VM, which uses compiler without c++11 support.\nIf you want c++11, check the Travis docs on using ubuntu trusty.\nIf you want c++14, that's more work.  I know I've seen stackoverflow answers on it so I would check there.\nI also may have just misunderstood the issue.. ",
    "stidch": "Hi @lightmare \nThanks for the response. This special tag is quite interesting, but does not fully what I need. \nIf I use the [!mayfail] tag, the output with the console reporter resp. the number of failed as expected tests looks how I could use it. \n===============================================================================\ntest cases:   219 |   218 passed | 1 failed as expected\nassertions: 62878 | 62877 passed | 1 failed as expected\nWhen using the junit reporter (what I need, because I'd like to show the results on a TeamCity) you cannot distinguish anymore between failed and failed as expected test case.\nJunit would support the test case status skipped, this is the preferred status in my use case. But I think this would not fit to the failed as expected result.\n. ",
    "knedlsepp": "I also find this is a good idea, but I'd rather not install both the single include version and the full one. Also I'd prefer to install into include instead of include/catch/.. Well prefixing it with include/catch would mean, that the end user would have to use it via:\n```C++\ninclude \n. Well. I disagree on the \"should be\" part. For lots of small libraries often times they opt for:C++\ninclude \n```\nThis is certainly a matter of taste, which we should let @philsquared  decide.. ",
    "fegauthier": "I'm using the latest version of XCode.\nI'm not able to test it now. I will test it in 2-3 hours. Thanks for your help :). I'm using Xcode 8.2.1 too\nThere is my full main\n\n. CatchTest.zip\nThere is my project. Thanks for your help. It works with your project. So it's the project configuration... I don't what i forget.... ",
    "CorneliaXaos": "Welp...  Sorry this is a week late... but...  I can no longer reproduce the bug..  I have no idea what was going on.. Sorry to have bothered you. :P. ",
    "ravstrix": "Oh, you're right. That's my fault. I fixed the problem in my repo.. ",
    "fcelda": "POSIX is one huge trap. :) Thank you, Martin!. ",
    "curio77": "Sorry about the confusion. I had been assuming that CLion uses Clang as its backed for static analysis, as I'd seen similar messages from both. As it turns out, however, this is wrong and indeed not a Clang issue. I'll report this with CLion instead.. ",
    "PeterSchuebel": "suggested fix:\n1625_WindowsMacrosFix.txt\n. Ah, that makes sense.\nYes, the file you sent works on my project both in Debug and Release.. Thanks for the explanation, Phil.\nIt still seems somewhat inconsistent. Why are 15 out of 73 successful TESTs being reported then? I think it should be 0 according to your explanation. Are tests related to exceptions (e.g. thrown, but expected ; or expected to not throw) treated differently? And if so, why?\nYes, we're fine for now to go with '-s'.\nWe mostly use the Console reporter from the command line. It's just sometimes useful to compare detailed outputs when making code change, to see the effect, e.g. using a merge tool on the before/after XML files.\nNot a big deal, and you're right that it actually is more consistent with what the Console reporter already does. Now that we know, it's OK to adapt and continue with this JUnit behaviour.. I meant 15 out of 73 TEST_CASES or SECTIONS.\nTEST_CASE(\"JUnit reporter\", \"[JUnit]\")\n{\n    SECTION(\"CHECK 1 NotReported\")\n    {\n        CHECK(1 == 1);\n        SECTION(\"CHECK 1a NotReported\")\n        {\n            CHECK(1 == 1);\n        }\n        SECTION(\"CHECK 1b NotReported\")\n        {\n            CHECK(1 == 1);\n        }\n    }\n    SECTION(\"CHECK NotReported\")\n    {\n        CHECK(1 == 1);\n    }\n    SECTION(\"SUCCEED Reported\")\n    {\n        SUCCEED(\"OK\");\n    }\n    SECTION(\"FAIL Reported\")\n    {\n        FAIL(\"FAIL\");\n    }\n    SECTION(\"CHECK_THROWS Reported\")\n    {\n        CHECK_THROWS(throw std::exception());\n    }\n    SECTION(\"CHECK_NOTHROW Reported\")\n    {\n        int dummy;\n        CHECK_NOTHROW((void*)dummy);\n    }\n}\nProduces:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites>\n  <testsuite name=\"d3_test.exe d3core_test.dll\" errors=\"0\" failures=\"1\" tests=\"9\" hostname=\"tbd\" time=\"0.000326\" timestamp=\"2017-09-18T17:37:13Z\">\n    <testcase classname=\"JUnit reporter\" name=\"SUCCEED Reported\" time=\"0.000005\"/>\n    <testcase classname=\"JUnit reporter\" name=\"FAIL Reported\" time=\"0.00009\">\n      <failure type=\"FAIL\">\nFAIL\nat test_citp.cpp(75)\n      </failure>\n    </testcase>\n    <testcase classname=\"JUnit reporter\" name=\"CHECK_THROWS Reported\" time=\"0.00002\"/>\n    <testcase classname=\"JUnit reporter\" name=\"CHECK_NOTHROW Reported\" time=\"0.000001\"/>\n    <system-out/>\n    <system-err/>\n  </testsuite>\n</testsuites>. If I use the -s switch, then the SECTIONs marked \"NotReported\" turn up in the output (as expected).\nSo the question is: why do the tests named \"SUCCEED Reported\", \"CHECK_THROWS Reported\" and \"CHECK_NOTHROW Reported\" get reported without -s?. We use MSVC 2013u4, so yes, C++11 capable. We are in the process of moving to MSVC 2017. So we probably move to Catch2 just before that; but we will wait for the move to master.\nFrom my side it's OK to close the ticket. Thank you very much for Catch!. ",
    "sdsahib": "I am also having the same issue. Waiting for help... @horenmar Now number of errors have increased exponentially HAha.\nsome of them : - \ncatch.hpp:7508:32: error: 'WORD' has not been declared\ncatch.hpp:7511:9: error: 'HANDLE' does not name a type\ncatch.hpp:7512:9: error: 'WORD' does not name a type\ncatch.hpp:7513:9: error: 'WORD' does not name a type\nby the way, THanks for quick reply... @horenmar  pls suggest me the compiler version with which it will work fine... @horenmar  you nailed it sir \ud83d\udc4d  \ud83d\udc4d thanks a ton (\ud83d\udcaf) ,, \nActually I had to explain about unit testing in C++ in a Seminar in my university, and I have gone through each n every resource I can to fix this but unable to ,, Actually I like to talk much haha \nThanks a \ud83d\udcaf Sir ,. ",
    "nyamatongwe": "This one works well with both MinGW and MSVC.\nThanks.. This occurs for me with Catch 2.01 single header and Visual C++ 2017.6.4. Plugging the allocation number into _crtBreakAlloc breaks on line 9546 of catch.hpp:\nconst std::string unprintableString = \"{?}\";\nIts not really a problem here - I'll just switch to later dumping of leaks after global tear-down by using\n``\ndefine CATCH_CONFIG_WINDOWS_CRTDBG\n``\n@BeErikk : there is a technique described on stackoverflow for setting the allocation breakpoint early so it can catch allocations made before main.\nhttps://stackoverflow.com/questions/3118741/memory-leak-unable-to-break-on-a-memory-allocation-number. ",
    "u3shit": "Okay, I'm pretty sure libcxxrt is at fault here: https://github.com/pathscale/libcxxrt/issues/45\nBasically std::uncaught_exception() returns true after a rethrow, even when there's no active exceptions.\nClosing the issue here.. ",
    "foonathan": "When I first noticed the error, I did fix it for one file by wrapping every check in REQUIRE in extra parenthesis. I reverted that now - cause I thought all issues were fixed - and rebuild CI, it fails: https://travis-ci.org/foonathan/type_safe/jobs/198969793\nIn REQUIRE(optional<T>() == optional<T>()), the ambiguity is resolved but wrong: the operator== called is the operator==(const U&, optional) (and compiler complains about BinaryExpression not being a boolean), not the one from Catch!\nEdit: And MSVC is having ambiguity problems still: https://ci.appveyor.com/project/foonathan/type-safe/build/194\nI didn't have this issue before, so there seemed to be another change.\n(It could also be my fault, in which case I'll just undo the reversion of the commit fixing that). Ah, the single include is only generated on each release. Then alright, I'll wait.. Thanks, all green now.. My bad, still happens after a try-catch so could be an issue on my side.. Okay, my fault, sorry about the noise.. Yes, I did. It was a conditional noexcept that wasn't working.. Sorry, haven't seen #885.. Yeah, they should. This was just an oversight on my test, I didn't have any problems.\nFeel free to close it.. ",
    "textshell": "I think allowing event listeners to abort test execution would be great some use-cases.\nThis can be useful for setup / teardown or for checking test environment invariants etc.. ",
    "stervo4ka": "Isn't it possible to allow a section execute multiple times during one test case run? As I understand, catch runs the same test case multiple times disabling sections one by one, but it should be ok to let a section execute more than once during one such run, shouldn't it?. Another helpful feature would be some kind of a scoped context automatically appending a string to sections names.. ",
    "ernanirst": "@philsquared you are completely right. Thanks for the tip and congrats for this very complete test framework.. ",
    "tomhughes": "Yes. I didn't think of a lambda but I worked around it with a comma operator in https://github.com/mapbox/protozero/pull/74. Only one of them actually had multiple statements anyway, but several others had a block with a single statement.. I wasn't expecting it to be yet it appeared to work, but I think I must have done something wrong because I just tried again and it didn't.\nI'll see what I can do.... Well the python 2 case doesn't actually need to worry about the encoding but a polyfill is the answer yes and I've done that now.. ",
    "AdRiley": "I was using this to test error cases in constructors:\nSo \nREQUIRE_THROWS_WITH(MyClass myClass(-1), \"N must be positive\");\nThe lambda workaround works\nREQUIRE_THROWS_WITH([](){MyClass myClass(-1);}(), \"N must be positive\");\nbut adds a lot of extra brackets as clutter to my test.\nWill the block functionality be coming back?  Seems like I could write my own macro to do the lambda wrapping, but prefer to stick to core functionality where possible.. Ah... Yes it does...  \nMuch better.  Thank you :)\n. ",
    "blindahl": "I still get this issue using latest release downloaded today. I removed all code from my own classes and try this rudimentary test\n```\ninclude \"catch.hpp\"\nTEST_CASE(\"Basic test\")\n{\n   REQUIRE(\"\" == \"\");\n}\n```\nbut still get the above warning\ncatch.hpp(1947) : warning C4512: 'Catch::ExpressionLhs' : assignment operator could not be generated\ncatch.hpp(2025) : see reference to class template instantiation 'Catch::ExpressionLhs' being compiled\nas well as the following ones:\n\ncatch.hpp(1947) : warning C4512: 'Catch::ExpressionLhs' : assignment operator could not be generated\nTestUtils_FilePath.cpp(7) : see reference to class template instantiation 'Catch::ExpressionLhs' being compiled\ncatch.hpp(1987) : warning C4512: 'Catch::BinaryExpression' : assignment operator could not be generated\n1>        with\n1>        [\n1>            T=const char (&)[1]\n1>        ]\n1>        TestUtils_FilePath.cpp(7) : see reference to class template instantiation 'Catch::BinaryExpression' being compiled\n1>        with\n1>        [\n1>            T=const char (&)[1]\n1>        ]\n1>TestUtils_FilePath.cpp(7) : warning C4130: '==' : logical operation on address of string constant\n. \n",
    "gchudnov": "@blindahl,\nif the PR is merged, there should be no warnings like this.\n. ",
    "furkanusta": "Hi, I've was checking past issues tested this one,\nCurrently it works as expected on both g++7.1.1 and clang++4.0\nIf anyone encounters, clang gives a warning saying:\n\nwarning: template argument uses unnamed type\n    CHECK( opt == option_2 ); // unexpected pass?!\n\nIt was a restriction that is lifted in C++11, thus passing a standard version to clang clears the warning . ",
    "ronen": "\nNot sure if this change is worth a separate reporter, and it shouldn't be included in the single-include by default.\n\nNot my call :)\n\nMaybe there is interest in changing the compact reporter to work like this instead?\n\nThat would be fine by me.   I didn't submit this PR as a change to the compact reporter because I don't know whether others depend on its current output format.  In particular the compact reporter describes itself as intended for use with IDEs, and so changing the output format might break any existing IDE integration? . > Maybe there is interest in changing the compact reporter to work like this instead?\nI went ahead and submitted #829 which the changes compact reporter.. FYI I've merged the latest master into this branch, fixing the (trivial) merge conflicts that had arisen.    Would still love it if this PR or #829 could be merged.   Thanks!. FYI I've merged the latest master into this branch, fixing the (trivial) merge conflicts that had arisen.    Would still love it if this PR or #828 could be merged.   Thanks!. ",
    "ibc": "I just found it by using a code coverage/linter stuff, never experimented an issue related to it.. Great.. Thanks. Will re-check and provide more info on next week.. Hi @philsquared,\nNot yet sorry, we have it in our TODO but we are busy with other stuff and still using Catch 1.X (since it does not fail for us). Will come back and update not so far in time (if you don't mind keeping this issue open).. I no longer can reproduce this issue. However I've upgraded my Mac OSX to 10.14.1 and Catch to 2.5.0.\nSo let's close the issue has there is no much rationale behind it :). ",
    "rianquinn": "I'm going to close this for now as I have not been able to get this sanitizer to work at all, so it's not really worth looking at until LLVM gets it sorted out. . I agree... you should not overwrite an existing type. Probably the best solution here is to create your own type or place this into a private namespace as suggested by @lightmare . @kirbyfan64 curl is not present on all systems. \n@horenmar yes, Catch's own selftests. A lot of people use CMake's ExternalProject_Add to get Catch instead of using git submodules, or maintaining a copy in their repo, but Cactch's CMakeList.txt is currently setup so that a make install first builds the self tests, so this is being done on every CI test for projects that use Catch. . This is a good example of what I'm talking about. \nhttps://travis-ci.org/Microsoft/GSL/builds/226877346?utm_source=github_status&utm_medium=notification\nFor our hypervisor project we maintain a patched version of Catch to fix this, but I couldn't do that for Microsoft's GSL patch to switch to Catch, so at the moment, its always building the self tests. . For CI, yes we probably could make that work. It's not as elegant though as we would have two ExternalProject_Add blocks, one for CI, and one for everything else. Plus, I think in general when someone wants to say build and test the GSL, they don't want build and test the GSL's unittest selftests. I think it would be a useful option for projects using Catch, and it would be a pretty simple mod to the CMakeLists.txt file to support. . This is my patch. I don't think you need all of this. You do at least have to disable setting the compiler options for these targets if they do not exist. \nhttps://github.com/Bareflank/Catch/commit/61080717bf7706a94ab115441d5357911c02907d\n. \ud83d\udc4d Thanks a ton. ",
    "james-d-mitchell": "Great, any idea which version of Catch will contain this fix?. That's great, I'm happy with either answer, since everything is working smoothly with v1.5.8 at the moment :). Thanks!\n. Thanks for the quick fix!. ",
    "m-ou-se": "The problem seems to be the destructor of the std::ifstream object in isDebuggerActive(), which resets errno: https://github.com/philsquared/Catch/blob/master/single_include/catch.hpp#L8570. Looks like libstdc++ breaks a promise:\nhttps://gcc.gnu.org/onlinedocs/libstdc++/manual/errno.html:\n\nThe C and POSIX standards guarantee that errno is never set to zero by any library function. The C++ standard has less to say about when errno is or isn't set, but libstdc++ follows the same rule and never sets it to zero.\n\nlibstdc++-v3/config/io/basic_file_stdio.cc:198-202:\n\n```C\nint __err;\nerrno = 0;\ndo\n   __err = this->sync();\nwhile (__err && errno == EINTR);\n(https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/config/io/basic_file_stdio.cc#L199). Filed a libstdc++ bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79820\n\nShould Catch work around this problem by manually saving and restoring errno when std::fstream is used?. ",
    "evandrocoan": "Yeah, now I updated and I found them also.\nI was not using the include file single_include, but directly the catch.hpp. My single_include was the version v1.7.2. Now I updated and I am using directly the single_include.\nThe compile time still do not improving. Sometimes I got 41~38s  overrall, and 21~19 only the tests file. These are the files I am using now:\ncatch_main.cpp\n```c++\ndefine CATCH_CONFIG_MAIN\ndefine CATCH_CONFIG_FAST_COMPILE\ninclude \"libraries/Catch/single_include/catch.hpp\"\n```\ncatch_tests.cpp\n```c++\ndefine CATCH_CONFIG_FAST_COMPILE\ninclude \"libraries/Catch/single_include/catch.hpp\"\nunsigned int Factorial( unsigned int number )\n{\n    return number <= 1 ? number : Factorial(number-1)*number;\n}\nTEST_CASE( \"Factorials are computed\", \"[factorial]\" )\n{\n    REQUIRE( Factorial(1) == 1 );\n    REQUIRE( Factorial(2) == 2 );\n    REQUIRE( Factorial(3) == 6 );\n    REQUIRE( Factorial(10) == 3628800 );\n}\n```\nBasically 99% of the time the ld.exe is running:\n\n. @horenmar my gcc is 5.4.0@cygwin, also I am not setting any special options for the linker, neither the g++ as -g. The command line I am using the exactly the one on the make file I am posting above. More precisely, that is the exactly Makefile I am using to build.\nThough, your compilation times ~8s and ~9s are pretty close to mine 21s and 19s. My processor is an i3-390m @2.67GHz, underclocked 67% leading to ~@1.0GHz per core.\n@kirbyfan64 thanks for pointing Zapcc, is could be useful some day I need more speed. For now I replaced Catch by doctest. Now with doctest the same compilation takes ~8s the main file, and ~2.8s a simple factorial test file, which is pretty good, as I only need to compile the main file, mostly one life time. Actually, the simple factorial test at ~2.8s with doctest is compiling faster than my own simple application which takes about ~3.2s.. ",
    "ankit-shah2": "Hi @hassanfarid\nPlease share on how you measure coverage with catch2. I. @hassanfarid  Ok. Then how to proceed with it? Can we integrate some external tool and proceed (like gcov mentioned above)? Which? \nAlso can you share tips on how to integrate.\nI have already written UT's in catch and now I have been asked to get coverage percentage.. ",
    "Johnnyxy": "Just tested a newer version \"Catch v1.8.1\" and the warnings are gone.. ",
    "SomeWritesReserved": "This would be helpful to me as well. I think TeamCity might keep track of timing itself but I can't be sure. Either way, having Catch do the timing itself (which it already does) would be better.. ",
    "Viatorus": "I am not quite sure what you mean with:\n\nyou will lose the fine grained reporting\n\nWhat do you lose exactly when you put a parentheses around expr?\nI will leave an example asap.\n. Oh, sorry - you are absolutely right, I didn't see it. So my fix is totally wrong. Sorry for this!\nBut the warning still exists:\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\ntemplate\nvoid test1() {\n    CHECK(T{} == false);\n}\ntemplate\nvoid test2() {\n    T v{};\n    CHECK(v == false);\n}\ntemplate\nvoid test3() {\n    T v{};\n    CHECK(v == v);\n}\nvoid test4() {\n    using T = bool;\n    T v{};\n    CHECK(v == v);\n}\nvoid test5() {\n    bool v{};\n    CHECK(v == v);\n}\nTEST_CASE(\"Test leaf with scalar types\") {\n    test1();\n    test2();\n    test3();\n    test4();\n    test5();\n};\n```\ntest1, test2 and test3 raise a warning. And this is very annoying because warnings are errors for us...\nPlease see:\nhttp://melpon.org/wandbox/permlink/VR75fS8EC905uloQ\nSeems to be a gcc bug... or?\n. I am also interested in a SingleHeaderGenerator, not only for Catch. ;)\nI already wrote a C++ Tokenizer in C++ (some time ago) which handle all kinds of comments, raw quotes, and line wrapping.\nThis could be converted to python. What do you guys think?\nEdit: I ported already much of the tokenizer to python.\n. The first hurdle is taken: https://github.com/Viatorus/quom\n. @optomux \nNot yet. It is currently only the tokenizer. It still needs the merging of the files depending on include guards/pragma once. I wasn't sure about how the usage/configuration/API should be.\nI am happy for any suggestions.. So the first official version is ready:\nhttps://github.com/Viatorus/quom. Hey @horenmar,\nIt cannot solve such things because how could Quom know if your customer is using MSC or Clang? ;)\nThe output would be:\n```cpp\nif defined(_MSC_VER)\n// foo.hpp placed here\nelif defined(clang)\nendif\n```\nBut in your example foo is the same, so just write:\n```cpp\ninclude \"foo.hpp\"\nif defined(_MSC_VER)\n// ...\nelif defined(clang)\n// ...\nendif\n```\nOr if you have different headers for your foo:\n```cpp\nif defined(_MSC_VER)\ninclude \"foo_msc.hpp\"\nelif defined(clang)\ninclude \"foo_clang.hpp\"\nendif\n```. ",
    "Quincunx271": "I found myself needing this, so I made a workaround:\ntemplate <typename F, typename... Args>\nvoid parameterized_test(F fn, Args&&... args)\n{\n    // this for_each should do the equivalent of Boost Hana's hana::for_each\n    // Alternatively, see implementation after\n    detail::for_each(std::forward_as_tuple(std::forward<Args>(args)...), fn);\n}\n\nAnd it is used like so:\nparameterized_test(\n    [](std::string parameter) {\n        // rest of test code here - haven't tried using SECTION, though\n    }, \"arguments\", \"that\", \"are\", \"passed\"\n);\n\nThis is working because the assertion macros work even inside a function. The error message on where a macro failed is also useful because it shows the file/line of where the lambda is defined, rather than in my utility header. I also know that CAPTURE works.\nThis might be useful in figuring out how to do parameterized tests.\nOne drawback is that this doesn't allow multiple parameters, but that can be implemented through some heavier TMP, or worked around with tuples and C++17's bind expressions / std::tie\n\nAn implementation of for_each:\n    template <typename Tuple, typename F, std::size_t... Is>\n    void for_each_impl(Tuple&& tuple, F&& fn, std::index_sequence<Is...>)\n    {\n        int unused[] = {\n            (std::invoke(std::forward<F>(fn), std::get<Is>(std::forward<Tuple>(tuple))), 0)...};\n        (void) unused;\n    }\n\n    template <typename Tuple, typename F>\n    void for_each(Tuple&& tuple, F&& fn)\n    {\n        for_each_impl(std::forward<Tuple>(tuple), std::forward<F>(fn),\n                                    std::make_index_sequence<std::tuple_size_v<Tuple>>{});\n    }. There's currently no built-in generator that just takes something like a `std::vector<T>`. That would be helpful, since currently the only easy way to reuse the values from one `GENERATE(...)` in another is to extract out a `std::initializer_list<T>`. Doing so, I've been running into lifetime bugs on clang-6.0 or less.\n\nI'm imagining something like this: GENERATE(each(container.begin(), container.end())). In CMake versions where TEST_INCLUDE_FILES doesn't exist, would it work to generate a new unique test-include-file which includes the old TEST_INCLUDE_FILE as well as the new one? If so, is it worth the effort to implement this?. For single-header libraries, it's common for it to just be\n```\ninclude \n```\nAlternatively, sometimes when the name is multiple words:\n```\ninclude \n```\nThe code doesn't read as well, and people will be annoyed when writing it, if you had to write:\n```\ninclude \ninclude \n```\nThis is especially the case for a unit-testing library, as you'll be #includeing it in a lot of files.. ",
    "ArekPiekarz": "@Quincunx271 Your version doesn't work with SECTIONs, because each section is executed only once.\nSo if you nest parameterized_test with multiple GIVEN, WHEN, THEN, some of them will be invoked for only the first parameter.\n@philsquared Do you have any fuzzy estimation when this feature may be available in Catch2? Is it in a ballpark of a few months or closer to a year?. @philsquared Could you make it clear what is the output of your proposed solution?. I haven't checked it, but try putting the second WHEN in the scope of the first WHEN.. ",
    "ThirtySomething": "Added myself to #850 after closing #1177. Oh, I didn't know about the generators in the first version of Catch. Thanks for the reference to #850. If it suits you, I'll close this issue - as you note it in there. I fully understand the decision to implement the generators only with C++11 or even C++14. I have worked on a larger project in the past and could not use C++11. This has made things more complicated and difficult.. ",
    "johnthagen": "This is really the one remaining feature I'd love to see in Catch, and I think it would round out the framework really well in terms of the Don't Repeat Yourself (DRY) philosophy.\nOne framework that does parametrizing well is pytest. While Python is a much different beast than C++11 (dynamically typed, monkey patching, etc), the overall API style that they use for parameterization could be helpful to look at.\nAn example:\n```py\nimport pytest\n@pytest.mark.parametrize(\"test_input,expected\", [\n    (\"3+5\", 8),\n    (\"2+4\", 6),\n    (\"6*9\", 42),\n])\ndef test_eval(test_input, expected):\n    assert eval(test_input) == expected\n```\nProperties of this API I like:\n1) Minimal repetition when adding extra input data\n2) Clearly associating the input data with a test case (in this case through a @property)\n3) The input data can be named in a meaningful way. @philsquared \n\nUse of << as a \"sequencing operator\n\nIf the generated values have overloads for the ostream operator (for example, user defined types), does this change the behavior?. Oh right, I see now. i is a Generator.\nauto i = GENERATE(...);\nCould you show how this pytest example would translate? Especially how one could clearly link input to expected result?\n```py\nimport pytest\n@pytest.mark.parametrize(\"test_input,expected\", [\n    (\"3+5\", 8),\n    (\"2+4\", 6),\n    (\"6*9\", 42),\n])\ndef test_eval(test_input, expected):\n    assert eval(test_input) == expected\n``\n. @philsquared  Okay, you're right that it's a trivial example, but whatpytestdoes for this example is let you reuse theassertstatement (in Catch2 that would be theREQUIRE`).\n\nData generators, or parametrised tests: i.e. you want to re-use the same core set of assertions with a range\n\nWill Generators help with this?\n\nWell that's easy. Just write three assets\n\nCould you show the example? I think I might be able to respond better to a concrete example.. > Like I say, I think this example is best written as something like:\n\n```\nTEST_CASE( \"eval\" ) {\nREQUIRE( eval(\"3+5\") == 8 );\nREQUIRE( eval(\"2+4\") == 6 );\nREQUIRE( eval(\"6*9\") == 42 );\n\n}\n```\n\nWhat I've found in a lot of testing is that parameterization really helps cut down on the DRY problems with these kinds of unit tests. This example it's not too painful, but as the number of assertions per input pair go up and number of inputs goes up, it scales poorly. This puts a burden testing more input data because you feel yourself copying and pasting the assertions over and over (I never really knew of this effect until I started using pytest parameterization and felt liberated).\nHere's an example of something where the scaling problem is more profound (the input is toy, but it's not very different from some production code):\n```py\nimport pytest\n@pytest.mark.parametrize(\"name,data,flag,count,expected_bytes,expected_size\", [\n    (\"chicago\", b'001', True, 2, b'0000a', 10),\n    (\"dallas\", b'002', True, 3, b'000ab', 11),\n    (\"denver\", b'022', False, 4, b'000ab', 12),\n])\ndef test_eval(name, data, flag, count, expected_bytes, expected_size):\n    message = Message(name, data, flag, count) == expected\n    assert bytes(message) == expected_bytes\n    assert message.size == expected_size\n```\nAdding more data inputs requires no copying of any of the assertions, just adding one more tuple of data. If the constructor of Message changes, you only change it in one place, rather than all of the copies for each data input instance. I don't mean to belabor this, but just want to share that I think this is a feature to strive for in Catch2 and explain why I think it is so valuable.\n\n\nOf course with structured bindings you could get:\n```\nTEST_CASE( \"eval\" ) {\n    auto [test_input, expected] = GENERATE( pairs({\n            {\"3+5\", 8},\n            {\"2+4\", 6},\n            {\"6*9\", 42}\n        }));\nREQUIRE( eval( test_input ) == expected );\n\n}\n```\n\nThis looks very promising!. #> but also observe that there is sometimes a tension between DRY and clarity.\nI feel you, especially if multiple inputs are of the same type. I also added a large number of inputs just to try to express the point. If you had just 3-4 you would still get a lot of savings if you want to test many different inputs and it would be more understandable.\nSo something like this I feel like it's a net win and it would be good for the testing framework to support it:\n```py\nimport pytest\n@pytest.mark.parametrize(\"name,data,expected_to_string,expected_size\", [\n    (\"chicago\", b'001', '0000a', 10),\n    (\"dallas\", b'002', '000ab', 11),\n    (\"denver\", b'022', '000ab', 12),\n    (\"london\", b'023', '000ac', 12),\n    (\"paris\", b'024', '000ad', 12),\n    # Imagine we want to test 50 more.\n])\ndef test_eval(name, data, expected_to_string, expected_size):\n    message = Message(name, data) == expected\n    assert str(message) == expected_to_string\n    assert message.size == expected_size\n```\nIn any case, just want to throw this out and if Generators support it, great, and if this is an expected use case a section in the docs could be added showing examples for how to use it to reuse assertions.\nCatch is awesome, and I'm excited for this. \ud83d\udc4d \nEdit:\n\nthis is primarily talking about where you can make general assertions about a range of data - rather than iterating the data in lock step with expected values\n\nAh, I see now. That makes more sense that you're targeting the range use case rather than specifically input/expected use case.. > Not sure I can completely deduce the types when passing tuples - but I've got it working like this, at the moment (where each row of this \"table\" is a tuple of any number of items);\nDoes this example work in C++11, or does it need anything from C++14/17?. > works in C++11, except for the structured bindings, of course (which are just syntactic sugar here)\nGot it, and in C++11/14 could users use std::tie to bind decent names?\n```cpp\nTEST_CASE( \"strlen\" ) {\n    std::string test_input;\n    int expected;\n    std::tie(test_input, expected) = GENERATE( table({\n            {\"one\", 3},\n            {\"two\", 3},\n            {\"three\", 5},\n            {\"four\", 4}\n        }));\nREQUIRE( test_input.size() == expected );\n\n}\n``. Agreed,std::tieisn't ideal, but just wanted to be sure there wasn't a better way pre-C++17. To me it's better than.firstand.second` for readability if that is the only alternative,\n. @philsquared \nDoes this example change using the new GENERATE method?\n```cpp\nTEST_CASE( \"strlen\" ) {\n    auto [test_input, expected] = GENERATE( table({\n            {\"one\", 3},\n            {\"two\", 3},\n            {\"three\", 5},\n            {\"four\", 4}\n        }));\nREQUIRE( test_input.size() == expected );\n\n}\n```\nAlso, will this GENERATE function work for instances of user defined classes (like data classes, for example) and enum classes?\nRough sketch:\n```cpp\nenum class Day {\n    Monday,\n    Tuesday,\n}\nTEST_CASE(\"Generators\") {\n    auto i = GENERATE(Day::Monday, Day::Tuesday );\n    ...\n}\n```. I guess it just wasn't immediately clear to me as someone new to Catch (and albeit not a seasoned CMake user) how to do this. I had a working CMake build, but wanted to drop in Catch into a separate build for the unit tests.\nBut I was able to finally get it working using the stack overflow example. Just thought it might be something that could be laid out explicitly in Catch's docs for others who found it was not trivially straight forward. But I admit, my lack of thorough understanding of CMake was probably most to blame.\nFeel free to close to the issue, appreciate the help.. I knew that all user code had to be compiled with MSan, but didn't notice from reading the documentation that even libstdc++ needed to as well. I'll close this issue, thanks for the feedback.. I believe this is tracked in #850. It hasn't been implemented yet.. I've been using \n```\ninclude \"catch/catch.hpp\"\n```\nBumping the folder to catch2 seems reasonable given the project has rebranded.\nI've always using < > includes for system installed things (so if I install Boost with apt, I'd import as #include <boost/...>. When vendoring Catch2 into my own project I use \" \" imports just like my other includes that are local to the project.\nIs there a convention to use < > even for includes that are part of your actually source tree?\n\nunfortunately standardization in that matter is exactly what c++ lacks,\n\nThis.\n. ",
    "greenrobot": "There are so many approaches to this. Not sure if this was discussed yet: Like SECTION, Catch2 could offer something like INIT_SECTION, which would add another section dimension for init (setting up the test). Thus, each INIT_SECTION would run all SECTIONs.. ",
    "mhfrantz": "The table/tuple usage seems to align with the Gherkin \"Scenario Outline\" concept.\nhttps://docs.cucumber.io/gherkin/reference/#scenario-outline\n. ",
    "ekrieger001": "how would the report look like for such testcases? What would be the testcasenames?. ",
    "myrgy": "Hi guys, \nwould it be possible to use generators to test multiple implementations. which has no virtual interface - so I had to specify types.\nlike\nTEST_CASE_T(\"Templated\", std::vector<int>, std::queue<char>) {\n  SECTION(\"push_back\") {\n    T s;\n   s.push_back(1);\n   }  \n}\nThanks!. Hi all,\nis is MR is going to be merged?\nit will be extremely useful!. Is there any progress with that PR?\nIs it going to be merged?\nThanks. ",
    "CD3": "I have no problem using a separate tool for bench marking. I have started using nonius because it supports a similar workflow to Catch, a header only library that I can include directly in my testing directory. I also like Celero because it allows you to setup a baseline to compare other benchmarks against, but it has to be compiled so there is some extra build configuration that has to happen.\nBut, what I really like about Catch is the SECTION feature. Not having to write a fixture class to do setup and teardown is great. I would really like a benchmark tool that supported sections. So, should we ask the nonius maintainer to add support for Catch-style fixtures?. Well, I've been using nonius for a bit now, and I think this would be a nice feature to add to Catch. Specifically, I find myself wanting to add CHECKs after running a benchmark to make sure the benchmark is valid (meaning I didn't typo a bug into it). Of course, I can write a seprate Catch unit test, but then I'm writing two copies of the same tests.\nI really like nonius's approach to timing. It automatically determines how many times to run the test to get a \"good\" measurment, and performs a statistical analysis on the timing measurments. I think I heard @philsquared say that he did something similar on a different project.\nSo, my idea is to add a MEASURE macro that acts like a SECTION but wraps its body in something like nonius's chronometer.measure() function. This would allow benchmarks to be embedded directly into tests, so that assertions could be made about the state of the test.. ",
    "pavelponomarev": "Really, really needed feature!. ",
    "ldionne": "I apologize if I didn't take the time to look through the 50 issues containing the keyword REQUIRE before opening this. I actually did that consciously knowing I might open a duplicate, since it takes about 10 seconds for the maintainer to spot that it's a duplicate.\nAnd anyway, the two issues you link to are marked as closed (yet the issue is not resolved at all), so what the hell? So in spite of being witty, you haven't done anything useful yet and told me why using variadic macros can't solve this.. IOW, I shouldn't have to use parentheses like you suggested on the two issues you linked; the library should be fixed to support this common use case unless there's a reason why it can't be implemented, in which case you ought to explain what it is and I'll be satisfied.. @philsquared Now, that's something I can understand, thanks a lot! I suggest we leave this open so as to not pretend that the issue is fixed, but feel free to fix it or not. I might have a shot at it too if I get some time.\n@kirbyfan64 \n\nMan, you took that waaaay too seriously\u200b...\n\nYes, probably, but I became pretty hostile to the guy when I read his comment on a previously closed issue for the same problem (which might have been a joke too, but at some point you need to draw the line).. > people in European countries (not sure if Poland is included) tend to be more blunt culturally than in the U.S\nI'm Canadian, so I guess the gap might be even larger! :)\n@nabijaczleweli Sorry for being a bit harsh; I just disliked your answer to the issue, which I perceived as being blunt (even as a maintainer myself). That's it, now let's stop fighting on this completely inappropriate forum.. Yes, that solves my problem! Thanks a lot!. ",
    "kim366": "Thank you very much. This worked like it should.. Just one thing: how do I close a thread here? I never used GitHub issues before.. Please don't waste your time with this now, I'm playing around with it and it seems to come from a different problem... It was me reading uninitialized memory. I don't actually remember why it didn't crash. It works now and that counts. ",
    "maiermic": "@philsquared You are right. I use Clion 2017.1 EAP with a Catch Test configuration. If I use an Application configuration it shows the correct result. Sorry, I should have checked that earlier.. I have updated to the latest version CLion 2017.1 RC2, build 171.3780.103, March 22nd, 2017. Same issue. I created a bug report for Clion.. ",
    "grahamshanks": "I believe that the documentation is lagging behind the code.\nThere is a wider problem though. For \"modern\" compilers (i.e. those with variadic macro parameters) you can write either SECTION(\"foo\") or SECTION(\"foo\", \"description\"). However the remaining compilers require both parameters. In our case we have to support legacy compilers so our code need to explicitly include a description (which we usually just set to the empty string) so that our units tests are portable between all our compilers. It is far too easy to forget to add the description when working on a computer without a legacy compiler installed and it only gets noticed when the build bot fails.\nIt would be nice to have separate macros for SECTIONs with and without a description for older compilers and, using a compiler flag, exclude the standard SECTION variadic macro so that all compilers would give a compilation failure if the right number of parameters were not given to SECTION.. Confirmed as fixed on VS2010 as well as VS2008, VS2013 and VS2015. Confirmed as fixed with 1.9.4. ",
    "Wingsofcourage": "Any news here ?. ",
    "theWayofthecode": "I see. In that case I believe it would be helpful to mention it also in the \"Assertion macros\" \"Logging macros\" doc files in the reference section. . ",
    "Predelnik": "I added explanation and removed weird underscore between CPP and 11. ",
    "benjaminjack": "This script does not recognize tests when the opening curly bracket is on a new line after a Catch macro. For example, the script will fail to recognize this test:\nTEST_CASE(\"Feature construction\", \"[Feature]\")\n{\n  // tests here\n}\nWhile this works fine:\nTEST_CASE(\"Feature construction\", \"[Feature]\") {\n  // tests here\n}. ",
    "KVic": "Ok, let's see the next code:\n```\n// other_catch.hpp\nifndef OTHER_CATCH_HPP_INCLUDED\ndefine OTHER_CATCH_HPP_INCLUDED\ninclude \nnamespace OtherCatch\n{\nstruct MessageBuilder\n{\n    MessageBuilder() {}\ntemplate<typename T>\nMessageBuilder& operator << ( T const& value ) {\n    m_stream << value;\n    return *this;\n}\n\nstd::ostringstream m_stream;\n\n};\n}\nendif // OTHER_CATCH_HPP_INCLUDED\n```\n```\n// main.cpp\ninclude \ninclude \nusing SomeStdType = ::std::chrono::system_clock::time_point;\n::std::ostream& operator << ( ::std::ostream& os, SomeStdType const& )\n{\n    os << \"std type convertion\"; // << std_value\n    return os;\n}\ninclude \"catch.hpp\"\ninclude \"other_catch.hpp\"\nint main (int, char * [])\n{\n    SomeStdType std_value;\n// Error\nCatch::MessageBuilder( \"INFO\", CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) << std_value;\n// Ok\nOtherCatch::MessageBuilder() << std_value;\n\nreturn 0;\n\n}\n```\nWhat's the difference between Catch::MessageBuilder and OtherCatch::MessageBuilder?. Maybe operator<< overloads ( such as  std::ostream& operator << ( std::ostream& os, SourceLineInfo const& info ); ) must be outside of the Catch namespace?\n. > Operator overloads should be in the namespace where one of their argument types is defined, so that ADL can find them.\nWhy \"should\"? What's wrong with operator overloads in the global namespace?\n```\n// catch.hpp\nnamespace Catch\n{\nstruct SourceLineInfo {};\n}\nstd::ostream& operator << ( std::ostream& os, Catch::SourceLineInfo const& )\n{ \n    ...\n    return os;\n}\n\n// main()\n    ...\n    Catch::SourceLineInfo info;\n    Catch::MessageBuilder( \"INFO\", Catch::SourceLineInfo(), Catch::ResultWas::Info ) << info;\n    ...\n```. @lightmare, thank you for a good explanation!\nI guess that a name lookup for an operator overloads  should start from the global namespace, not from the Catch namespace. So a streaming operations in a template methods ( StringMakerBase::convert(), MessageBuilder::operator<<(), IsStreamInsertable::value, and others) should be moved into function in the global namespace. Somehow like this.. TEST_CASE( \"INFO of SomeStdType\" )\n{\n    SomeStdType std_value;\n    INFO( \"std_value = \" << std_value );\n    CAPTURE( std_value );\n    CHECK( std_value == SomeStdType() );\n}\nFor a normal operation, should name lookup for operator<< in the INFO macro (CAPTURE, CHECK and so on) start from the Catch namespace or from the global namespace? My last commit and fix is exactly about this case with Catch. What's wrong with this solution?. ",
    "turha654": "I tried expanding the macro manually and at some point it starts giving correct results, I didn't expand the INTERNAL_CATCH_TESTCASE2 macro further because the UNIQUE_NAME macro expansion started to give correct line numbers, so I don't know if expanding the TESTCASE2 further would also have started to give proper results. Also possibly worth noting is the fact that all the wrong line numbers are the same (8) in this test. Hopefully this might help find the actual root of the problem.\nMy comments in the file expect that only one TEST_CASE is uncommented at a time. At the bottom is the test case with just single macro expansion done manually and from there every TEST_CASE above is one further expansion. The first one gives correct results.\n```\ninclude \"catch.hpp\"\n// Expanding the TEST_CASE macro manually\n///\n// The below one produces correct results, 7 and 8\nINTERNAL_CATCH_TESTCASE2(INTERNAL_CATCH_UNIQUE_NAME_LINE2(_CA_T_C_H__T_E_S_T_, _COUNTER), \"test3.4\", \"\") {\n    REQUIRE(1 == 34);\n}\n///\n// All of the below ones produce wrong results (the TEST_CASE line correct, the REQUIRE line wrong)\n/\n// Produces 20 (correct) and 8 (incorrect)\nINTERNAL_CATCH_TESTCASE2(INTERNAL_CATCH_UNIQUE_NAME_LINE(_CA_T_C_H__T_E_S_T_, _COUNTER), \"test3.3\", \"\") {\nREQUIRE(1 == 33);\n}\n/\n/\n// Produces 28 (correct) and 8 (incorrect)\nINTERNAL_CATCH_TESTCASE2(INTERNAL_CATCH_UNIQUE_NAME(_CA_T_C_H__T_E_S_T____), \"test3.2\", \"\") {\n    REQUIRE(1 == 32);\n}\n/\n/\n// Produces 36 (correct) and 8 (incorrect)\nINTERNAL_CATCH_TESTCASE(\"test3.1\", \"\") {\n    REQUIRE(1 == 31);\n}\n/\n/\n// Produces 44 (correct) and 8 (incorrect)\nTEST_CASE(\"test3.0\", \"\") {\n    REQUIRE(1 == 30);\n}\n/\n```. I compiled the project in VS2015 with preprocessor output going to file and compared test2.i (preprocessed .cpp) while compiling having test0.cpp and not having it. So with the issue and without it. The preprocessor output was identical (fc found do differences), at the very bottom there's a line that has:\n::Catch::SourceLineInfo(\"...\", static_cast( 4 ))\nSo it seems to me that the correct line number is provided to Catch. Then I tried debugging it while having the problem (just test1 and test2 .cpp files and main.cpp of course), I break-pointed on ::Catch::SourceLineInfo(...) and got following results:\ntest1.cpp 7 - this is the TEST_CASE line\ntest2.cpp 3 - this is the TEST_CASE line\ncatch.hpp 1843\ntest1.cpp 8 - this is the REQUIRE line\ncatch.hpp 1843\nNot sure what the catch.hpp ones are, but for some reason it seems the test2.cpp REQUIRE is not added at all. So all the line numbers added are correct, it's just that one of the REQUIRE's is missing?\nNot really sure where to look next, hopefully you will have some ideas.\n. ",
    "niv": "You're right, thank you.. ",
    "RPGillespie6": "So basically I would have to extract the information I care about, and then build a fake argv and argc with my custom argument removed to pass on to Catch?\nIt seems like it would be nice if the argument parsing functionality were completely decoupled from the rest of Catch's logic similar to:\n```c++\ndefine CATCH_CONFIG_RUNNER\ninclude \"catch.hpp\"\ninclude \nstd::string file_path; //TEST_CASES can access via global variable\nint main( int argc, char* argv[] )\n{\n  Catch::ArgumentParser parser;\n  parser.addArgument(\"-a\");   // add some custom arguments\n  Catch::Options options = parser.parse(argc, argv);\nfile_path = options[\"a\"]; //Alternatively, you could make options globally accessible via static member variable so you could access it in TEST_CASE. i.e. Catch::options\nint result = Catch::Session().run(options);\n  return ( result < 0xff ? result : 0xff );\n}\n```\nAre you using a home-brew argument parser or an existing one like https://github.com/jarro2783/cxxopts?. @horenmar I like that solution - thanks!\n\nif you compose parsers and more than one part wants to use positional arguments, who gets them?).\n\nWhat do you mean \"who gets them\"? Positional arguments should have a name attached that anyone can access:\n```c++\nCatch::Options options; //Global options\nint main( int argc, char* argv[] )\n{\n  Catch::ArgumentParser parser;\n  parser.addArgument(\"positional1\");   // add first positional argument\n  parser.addArgument(\"-o\", \"output_file\");   // add non-positional argument\n  parser.addArgument(\"positional2\");   // add second positional argument\n  options = parser.parse(argc, argv);\n// From this point on, everyone has global access to all arguments with options[\"name\"] \n int result = Catch::Session().run(options);\n}\n```\nMaybe I'm being unrealistic by wanting my argument parsing experience to be like Python's?\nAt any rate, the workaround outlined by @horenmar is great and we can close the issue unless you want to keep it open for conscience nagging reasons :P.. ",
    "VioletGiraffe": "It would be nice if the reference documentation (perhaps, the Command Line section?) demonstrated how to add custom command line options and pass them on to tests. So far I'm not finding any examples of how to it properly.. Oh! So I was right to say that I couln't find any info rather than to say there is no info :) Thanks (and sorry for poking into this old discussion).. ",
    "FabioNLima": "Solved!. ",
    "hia3": "Compiling with \nclang++ -fsanitize=address -o test.exe test.cpp\n\ngives me \n\n==748==AddressSanitizer CHECK failed: D:\\src\\llvm_package_300231\\llvm\\projects\\compiler-rt\\lib\\asan\\asan_rtl.cc:505 \"((!asan_init_is_running && \"ASan init calls itself!\")) != (0)\" (0x0, 0x0)\n==748==AddressSanitizer CHECK failed: D:\\src\\llvm_package_300231\\llvm\\projects\\compiler-rt\\lib\\asan\\asan_poisoning.cc:37 \"((AddrIsInMem(addr))) != (0)\" (0x0, 0x0)\n\neven if 'test.cpp' is just an empty main. This is why I've added /DEBUG when linking. This has nothing to do with Catch, must be clang bug.\nWith clang_rt.asan_dynamic-x86_64.lib linking fails:\n\ntest.obj : error LNK2019: unresolved external symbol __asan_shadow_memory_dynamic_address referenced in function \"struct Catch::IResultCapture & __cdecl Catch::getResultCapture(void)\" (?getResultCapture@Catch@@YAAEAUIResultCapture@1@XZ)\ntest.obj : error LNK2019: unresolved external symbol __asan_option_detect_stack_use_after_return referenced in function \"struct Catch::IResultCapture & __cdecl Catch::getResultCapture(void)\" (?getResultCapture@Catch@@YAAEAUIResultCapture@1@XZ)\ntest.exe : fatal error LNK1120: 2 unresolved externals\n\n. ",
    "becrux": "In case it is accepted, I guess a specific build on AppVeyor should be added, with \"/SUBSYSTEM:CONSOLE /ENTRY:wmainCRTStartup\" as parameters. I could do that, if I'm allowed.. The problem occurs if someone uses wmainCRTStartup in its project, or MinGW-w64 GCC with -municode flag.\nThe are no benefits in terms of performance, or for the UNICODE support in the strict meaning (as you said), but it will save a developer from writing the same code that I wrote in order to adapt the wmain interface to the Catch::Session run method.\nShort answer: it's just a convenience to have it working even when the above switches are ON, and you don't have to care about adapting the code, cause wmain has wchar_t , and not char , as argv type.. I've added proper configurations in appveyor.yml.. Thanks for fixing appveyor.yml!. ",
    "palindromoroz": "That is an option. \nAnother option that would be useful in my view is to extend the INFO and CAPTURE macros such that they can accept a struct and convert it to a xml info/capture log item. You could keep current mode but maybe add this as an additional log mode. This open many options to use the existing reporter.. One reason I tried Catch is because of the hierarchy. I want many tests across different parts of the parameter space so I generate many sections. Than it is handy to generate section names in some easy fashion as I do not hard-code them.. ",
    "paulharris": "You have the right idea,\nWith respect to:\n\n\"Should a REQUIRE_INIT count as failed assertion?\" and \"If not, is it reasonable to output \"0 failed assertions, 1 failed test case?\"\n\nIf REQUIRE_INIT fails, it should abort the test in a fail-fast way.  Its not testing the software, its testing that the test was written correctly.\nNote that its not just in the INIT phase,\nit could be...\nINIT (fail-fast asserts)\nTEST SOMETHING (standard REQUIRE)\nADJUST TEST FOR NEXT STEP\nCHECK ADJUSTMENT (fail-fast asserts)\nTEST SOMETHING (standard REQUIRE)\nSo once the test is written correctly (and doesn't fail-fast), it then runs for ever more.\nBut its only really testing the target library with 2 tests.  It would be misleading for the test to say that 5 tests passed when the reality is that only 2 of the tests was actually testing the target software.\nThe difference between using a standard ASSERT and REQUIRE_INIT would be that the REQUIRE_INIT is always executed (it ignores NDEBUG).\nI don't think it requires parameter expansion either.  It just has to test that the test is configured correctly.\nAnyway, thats what I think.. ",
    "fkromer": ":+1: . ",
    "Gruntfuggly": "This is what I am currently using:\n```\nnamespace Catch\n{\ntemplate <>\nstd::string toString< QString >( QString const& s );\ntemplate <>\nstd::string toString< QByteArray >( QByteArray const& a );\ntemplate <>\nstd::string toString< jUTF8 >( jUTF8 const& a );\ntemplate <>\nstd::string toString< QDateTime >( QDateTime const& a );\n}\n```\n```\nnamespace Catch\n{\ntemplate <>\nstd::string\ntoString< QString >( QString const& s )\n{\n    return s.toLocal8Bit().constData();\n}\ntemplate <>\nstd::string\ntoString< QByteArray >( QByteArray const& a )\n{\n    return QString( a ).toLocal8Bit().constData();\n}\ntemplate <>\nstd::string\ntoString< jUTF8 >( jUTF8 const& a )\n{\n    return jUTF8( a ).toLocal8Bit().constData();\n}\ntemplate <>\nstd::string\ntoString< QDateTime >( QDateTime const& dt )\n{\n    return dt.toString( Qt::ISODate ).toStdString();\n}\n}\n```\n```\ninclude \"./catch.hpp\"\ninclude \"./ut-catch-formatters.h\"\ninclude \nTEST_CASE( \"Minimal\" )\n{\n    QString text( \"text!\" );\n    CAPTURE( text )\n    REQUIRE( text == \"TEXT!\" );\n}\n```\nProduces:\ncompiling ut/ut-minimal.cpp\nut/./catch.hpp: In member function 'Catch::MessageBuilder& Catch::MessageBuilder::operator<<(const T&) [with T = QString]':\nut/ut-minimal.cpp:9:   instantiated from here\nut/./catch.hpp:2078: error: no match for 'operator<<' in '((Catch::MessageBuilder*)this)->Catch::MessageBuilder::m_stream << value'\n/usr/include/c++/4.3/ostream:112: note: candidates are: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>& (*)(std::basic_ostream<_CharT, _Traits>&)) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:121: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ios<_CharT, _Traits>& (*)(std::basic_ios<_CharT, _Traits>&)) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:131: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::ios_base& (*)(std::ios_base&)) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:169: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(long int) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:173: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(long unsigned int) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:177: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(bool) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/bits/ostream.tcc:97: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short int) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:184: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short unsigned int) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/bits/ostream.tcc:111: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(int) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:195: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(unsigned int) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:204: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(long long int) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:208: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:213: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:217: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:225: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(long double) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/ostream:229: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(const void*) [with _CharT = char, _Traits = std::char_traits<char>]\n/usr/include/c++/4.3/bits/ostream.tcc:125: note:                 std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_streambuf<_CharT, _Traits>*) [with _CharT = char, _Traits = std::char_traits<char>]\nut/./catch.hpp:426: note:                 std::ostream& Catch::operator<<(std::ostream&, const Catch::SourceLineInfo&)\n../../aslcore/jcop/include/jutf8.h:93: note:                 QDebug operator<<(QDebug, const jUTF8&)\n../../aslcore/jcop/include/jutf8.h:83: note:                 QDataStream& operator<<(QDataStream&, const jUTF8&)\n../../aslcore/jcop/include/jcoptypes.h:111: note:                 JCOPDataStream& operator<<(JCOPDataStream&, const jHostAddress&)\n../../aslcore/asl-common/asl/AslQCString.h:122: note:                 QDataStream& operator<<(QDataStream&, const AslQCString&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtNetwork/qhostaddress.h:148: note:                 QDataStream& operator<<(QDataStream&, const QHostAddress&)\n../../aslcore/jcop/include/jcoptypes.h:119: note:                 QDebug operator<<(QDebug, const jHostAddress&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtNetwork/qabstractsocket.h:250: note:                 QDebug operator<<(QDebug, QAbstractSocket::SocketState)\n/usr/local/Trolltech/Qt-4.7.4/include/QtNetwork/qabstractsocket.h:249: note:                 QDebug operator<<(QDebug, QAbstractSocket::SocketError)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qvariant.h:613: note:                 QDebug operator<<(QDebug, QVariant::Type)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qvariant.h:540: note:                 QDataStream& operator<<(QDataStream&, QVariant::Type)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qvariant.h:538: note:                 QDataStream& operator<<(QDataStream&, const QVariant&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qvariant.h:612: note:                 QDebug operator<<(QDebug, const QVariant&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qdatetime.h:333: note:                 QDebug operator<<(QDebug, const QDateTime&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qdatetime.h:332: note:                 QDebug operator<<(QDebug, const QTime&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qdatetime.h:331: note:                 QDebug operator<<(QDebug, const QDate&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qdatetime.h:326: note:                 QDataStream& operator<<(QDataStream&, const QDateTime&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qdatetime.h:324: note:                 QDataStream& operator<<(QDataStream&, const QTime&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qdatetime.h:322: note:                 QDataStream& operator<<(QDataStream&, const QDate&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qstringlist.h:249: note:                 QDataStream& operator<<(QDataStream&, const QStringList&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qregexp.h:154: note:                 QDataStream& operator<<(QDataStream&, const QRegExp&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qtextstream.h:293: note:                 QTextStream& operator<<(QTextStream&, QTextStreamManipulator)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qtextstream.h:290: note:                 QTextStream& operator<<(QTextStream&, QTextStream& (*)(QTextStream&))\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qlocale.h:720: note:                 QDataStream& operator<<(QDataStream&, const QLocale&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qiodevice.h:247: note:                 QDebug operator<<(QDebug, QFlags<QIODevice::OpenModeFlag>)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qobject.h:397: note:                 QDebug operator<<(QDebug, const QObject*)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qstring.h:1083: note:                 QDataStream& operator<<(QDataStream&, const QString&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qbytearray.h:577: note:                 QDataStream& operator<<(QDataStream&, const QByteArray&)\n/usr/local/Trolltech/Qt-4.7.4/include/QtCore/qchar.h:394: note:                 QDataStream& operator<<(QDataStream&, const QChar&)\nmake: *** [ut/build/debug/ut-minimal.o] Error 1\nIf I comment out the CAPTURE, I get the expected test failure with expanded details:\nut/ut-minimal.cpp:10: FAILED:\n  REQUIRE( text == \"TEXT!\" )\nwith expansion:\n  text! == \"TEXT!\". I've upgraded to the latest version and it's now working as expected. Thanks.. ",
    "GPMueller": "Sorry, I should have been more precise: the logging messages I was referring to are part of the code I am testing with Catch and stream into std::cout.\nIndeed, the behaviour I would like to have for std::cout and std::cerr  corresponds to INFO messages.. ",
    "henryiii": "I was also looking for this, and was about to post an issue. I'm experimenting with a transition to Catch from GTest, but almost all my test cases print a large amount of information (part of the API, not the test cases), and would prefer to have that only shown on an error. That's the way CTest works with \"CTEST_OUTPUT_ON_FAILURE\". I'm combining multiple executables (catch works nicely as a single executable, and my library has a long initialization time), and that makes the testing output all or nothing.. > reporter::testCaseEnded\nI don't see a way to output what I need here. If I have two sections in a test case, the stdout gets stuck on after the assertion prints and after both sections have run (using this method). I need something like a \"print out stdout if an assertion fails, then empty buffer\" that runs after sections or assertions.\nCurrently working around this by manually capturing stdout in my test fixture, then adding it INFO, which does exactly the right thing. If there was a way to add the output to the INFO message spot, that would work ideally, I think.. Would this be any easier to implement now that CATCH_CONFIG_EXPERIMENTAL_REDIRECT is available? A not-so-hacky way to capture output and then display it only on a failure, in the right place, the way GoogleTest works, would be still great through the INFO workaround I mentioned does work for the moment. :). Added test.. ",
    "pJunger": "Sorry for the bad description.\nTo me, the current output seems more like two separate paths through the test-case which I would have expected if both Sections would be parallel to one another?\nI would have expected to get one result more like this:\n```\n\ntest # 1\n  something\n  another thing\n\ntest/test_the_source.c:19\n...............................................................................\ntest/test_the_source.c:20: FAILED:\n  CHECK( 2 == 1 )\ntest/test_the_source.c:21: FAILED:\n  CHECK( 1 == 2 )\n\n===============================================================================\ntest cases: 1 | 1 failed\nassertions: 2 | 2 failed\n```\n. Okay, I get it now - thanks for your explanation.. ",
    "zfields": "If I give Catch a hint by casting the free function to a signal_t, then it can compile and make the comparison.\nREQUIRE(static_cast<signal_t>(utility::synchronizing_callback) == test.testMethod_uponComplete_arg);. Awesome! I'll give it a try as soon as I can get to it, it may be a week or so.. You nailed it! Can you explain the function of each? Thank you!. > On the other hand, include/catch.hpp is meant for development.\nYou mean to say, the development of Catch itself?. Thanks for helping me understand. I have no issue.. ",
    "uilianries": "Sure! Conan Package Tools checks the branch name and submits to target channel. e.g. master branch is used as stable channel. So, we can use the same rule to create new releases in the recipe.. Each new release will update your conan recipe, but won't create and push Catch package to Conan remote.\nFor each new release you need to create the package after provide the single_header and push to Conan repository.\nYou will need create a Bintray account.\nSee here for more information about Conan + Bintray.\nAnyway, you could use CI (Travis/AppVeyor/Gitlab) to automate each package push. I can help to develop this feature.. Nice!\nShould I use the same issue? I could close this issue and open a new, with a appropriated description. (one issue = one feature) . By default, Conan uses a branch pattern to identify the stable channel, we could use release tag, e.g. CONAN_STABLE_BRANCH_PATTERN=v\\d+\\.\\d+\\.\\d+. So, when a new tag is created, the package will be pushed to Conan remote by Travis build.\nOkay, I'll use the same issue to develop.. @memsharded Done! I changed to a simple test (just 10 lines). @memsharded  Thanks for the comments!\n@philsquared  I can change test_package/conanfile.py by updateConan in this PR, if you wish.. @philsquared Done!. @philsquared  and @memsharded Thanks!\n. Just adding @lasote to this discussion.. Hi!\nI merged the master branch on this PR. Now this feature is able again to be merged without conflicts.\nCould I help to finish this PR? The last point discussed was about create a Bintray account to push Catch as Conan package.\nRegards.. no, every push on master will build to check the package consistence, but only tags will be uploaded. . maybe wait for one more review from Conan team. They are at meetingc++ but they will be available on Monday.. I agree!. Let's wait for the next release to have Catch2 on Bintray!\nPlease, don't forget to configure your Conan password (Bintray API Key) on Travis settings.\nRegards!. Timeout from Travis service: https://travis-ci.org/catchorg/Catch2/jobs/460256129. sure, you can use the same :smile_cat: . Great!\n@danimtb Could you review on Bintray, please?. Yes! Thank you!. Yes, now is possible. CONAN_UPLOAD_ONLY_WHEN_STABLE was added in conan-package-tools to solve it. Good point, I'll change to only upload tags.. sure! updating it now. done!. it's no longer required I think.. done. Also, I will update our template.. include with same address from url. I agree. removed. ",
    "StephanTLavavej": "Please note that Phoebe is referring to a C++17 deprecation warning that I've implemented in an unreleased build of MSVC 2017 (the second toolset update; not 2017 15.3 which is the first toolset update). So that's why you aren't seeing the warning yet.. Yes. The best way is to detect whether C++17 uncaught_exceptions() is available (unconditionally for VS 2015 and above; libstdc++ 6.1 provides a feature-test macro; I believe libc++ 3.7 provides a feature-test macro), and replace uncaught_exception() with uncaught_exceptions() > 0.. That works, thanks!. ",
    "davidaue": "I'm getting this same issue with Catch2 on the current MSVC++2017. Causing any structured exception should be exactly the same and is easier to reproduce than my specific case which involves mixed-mode. This works with the just /EHa switch which allows SEH exceptions to be caught with try/catch.\ntry {\n    auto i = *((int*)nullptr); // cause exception\n}\ncatch (...) {\n    auto ex = std::current_exception();  // ex will be nullptr\n}\n\nCatch2 is doing the catch(...) and then uses the nullptr returned from current_exception() in the filtering code, causing a second exception (if I remember correctly).\n. You are right. I was fooled by how the debugger displays std::exception_ptr. It's good we found another case though! I attached an example project to show CLR exceptions caught in native code, which really do evaluate == nullptr.\nCatchSEH.zip. I see the same problem in fully native C++ projects.\nCatchSEHNative.zip\n. Thanks for looking at all of that. I can certainly live with things the way they are if there is no good solution.. ",
    "haozhangphd": "Thank you for you reply. I know there are ways of rolling my own macros, but it is still better if this feature is built-in. \nAlso if I run my test command with -s option, the message shows up, even if the message only talks about how a specific test case fails.. Yes I sometimes use matchers to fulfill similar function. However like you said this is an overkill and not as convenient as having a built-in macro. Using a CHECK_MESSAGE and a REQUIRE_MESSAGE macro surely require a lot less lines of codes than implementing custom matcher classes.\nAnother drawback with the matcher classes is that the value under test must preceded the string output, I don't have the flexibility of putting the values in the middle of the string output, whereas this can be easily done with a CHECK_MESSAGE or REQUIRE_MESSAGE macro.. Thank you for your reply. Yes I think my previous example was indeed too trivial and does not justify an extra macro. However custom messages are really helpful sometimes when we need to peek into the internal state of the program to see why a particular test fails. A use case for this new macro is as follows:\nTEST_CASE(\"Widget\") {\n    for (int ctorParam1 = 0; ctorParam1 < 10; ++ctorParam1) {\n        for (int ctorParam2 = 0; ctorParam2 < 10; ++ctorParam2) {\n            Widget w(ctorParam1, ctorParam2);\n            w.doSomething();\n            REQUIRE_MESSAGE(w.valueX() > 0, \"The X value of Widget is invalid for when ctorParam1 = \"\n                                            << ctorParam1 << \" and ctorParam2 = \" << ctorParam2\n                                            << \". The internal state of Widget is \" << w.someInternalParameter() << \".\");\n        }\n    }\n}\nThere are alternative ways of getting the internal state of the program when a test case fails, but I think using a custom message for the REQUIRE/CHECK macros is by far the most convenient way.. Yes there are ways of capturing the internal state of the program already even without this extra macro. I just think it is more convenient to combine the custom message and the assertion macros into a single macro. Also the users have more freedom if we can customize the fail message. . Thank you for your detailed explanation. Now thinking about it more, the difference is just an aesthetic thing. The extra macro does not provide as much convenience as I previously thought.. ",
    "janwilmans": "Just tested it, works great!\nD:\\project\\Catch>D:\\project\\BoostTestUi\\Debug\\CatchTestSample.exe --libidentify\ndescription:    A Catch test executable\ncategory:       testframework\nframework:      Catch Test\nversion:        1.9.7\n. Could you also add the --wait-for-getchar option ? see https://github.com/janwilmans/LibIdentify at the bottom, it can have any name you want, so long as it does\nstd::cout << \"#Waiting\" << std::endl;\n            std::getchar();\nbefore doing anything else in main(). Great! many thanks!. Tested: \n```\n 0:10:48.32 D:\\project\\BoostTestUi\\Debug>CatchTestSample.exe --wait-for-keypress start\n...waiting for enter/ return before starting\nFactorial test enter\nFactorial test leave\nTest2 enter\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCatchTestSample.exe is a Catch v1.9.7 host application.\nRun with -? for options\n\nTest2\nd:\\project\\boosttestui\\catchtestsample\\catchtestsample.cpp(23)\n...............................................................................\nd:\\project\\boosttestui\\catchtestsample\\catchtestsample.cpp(27): FAILED:\n  REQUIRE( Factorial(0) == 1 )\nwith expansion:\n  0 == 1\n===============================================================================\ntest cases:  4 |  3 passed | 1 failed as expected\nassertions: 11 | 10 passed | 1 failed as expected\n 0:10:51.13 D:\\project\\BoostTestUi\\Debug>\n```\nWorks fine! good work!. ",
    "coombez": "Thanks.  I had run SelfTest, but hadn't figured out how to run approvalTest.py (probably just didn't try hard enough :), I can now get the output, and see the result of my secondArg being removed.  I'll see if I can figure out how to wedge it back in without regressing the performance.. Apparently github doesn't like the way I work :)  I'm closing this PR, a new one with a corrected commit will appear momentarily.. PR #937 passes all tests, keeps the second arg with no change (seems like this is a separate issue to the performance), and gets the performance from 9.8s -> 6s, almost as good an improvement.  Hopefully something you can merge without much thought :). Noticed I never answered your question about needing c++11.  I currently use c++14 exclusively so that should be fine for me.. I can't provide the code, but basically -O3 optimized on gcc.  Pseudo code for the test with an rdtsc time source.\nTime start = now();\nfor(int i = 0; i < 10000000; ++i)\n    CHECK((now() - start) < 10_seconds);\nThe time in here is just used as work to do that can't be completely optimized away, not for benchmarking.  For the runtime of the test, my build system tells me how long it ran, /usr/bin/time would work just fine for this purpose.  Or you could just output your equivalent of now() - start after the loop.  . I tested out dev-second-string-argument-removal, it neither improved or regressed performance, so seems fine to me.\nI've also discovered that the single most expensive operation remaining is the construction/destruction of the std::ostringstream.  removing this drops a test with 100M instead of 10M iterations from 60s->5.5s.  A further drop from 5.5s->0.2s is achievable by avoiding building the assertion results and 'handling' them in the case of success.  That said, I have not achieved either of these changes while maintaining your tests of course.  But it's still useful information for where to focus future changes.. PR #939 eliminates the construction/destruction of the std::ostringstream while passing the tests.  Hopefully another easy win.. For Catch v2.0, if you'll accept the suggestion, it may be worth benchmarking the assertions compared to the cost of an if-statement.  If that seems too restrictive, I wouldn't throw away that benchmark, but perhaps add a couple, one that include incrementing a count, not sure what the third should be but I'm sure you could come up with one.\nFundamentally, the real value Catch will add will be in the exceptional case of failure (or the user wanting full results), and that's where all the cost should lie.  Successful tests that are never reported should be as close to free as possible.\nOnce my last PR is merged, Catch assertions will be 80x faster! :)  But still 25x slower than a simple if.  More than I expected is in the evaluation of whether successful tests should be included, in the increment of passed tests, and in the deferred checking of success or failure.\nIn Catch, I will reach a point of diminishing returns in continuing optimization soon, but if you're writing something from scratch, there are often ways to implement the features that will give you the benefits you want without costing in performance.  It's much harder to perfectly match results when optimizing after the fact, at least for large structural optimizations.. This now passes all the tests while capturing the performance improvement.  If you can't squash these, let me know I'll just make another PR with a single commit.. Still passes tests with this last commit, doubles performance again.. This should address your concerns.  Hopefully, it's more tempting to merge now :)  . Are there any remaining issues with this that I should be trying to address?. Thanks.  When are you planning to release 1.9.7?  I am happy to just upgrade to HEAD, but will delay upgrading if you happen to be planning a release sometime soon anyhow.. Heh, first world problems :)  Sounds good, thanks!. Forgot to mention I ran the Catch2 test above through prof as well.  Despite being compiled with full optimization it looks like most of the functions were not being inlined.  Trivial stuff like Catch::isTrue, and the StringRef constructors and destructors consumed 10s of percent of runtime.  Experimentally I was able to fix a few by adding the inline keyword and moving them closer to the beginning of the single include file.. There is definitely no hope of just squeezing all the thousand places.  I suspect the only strategy that will work is complete avoidance of doing any work in the case that no results will be reported.  If done right, I truly believe the 2 billion checks per second number is achievable, although the restructuring required is likely significant.. @horenmar Yes, this is almost the same as a change I previously made to Catch 1.x.  Unless it's a really hairy conflict with what @philsquared is doing, it seems like it should be merged back in.  I can't imagine a 4 line change being a hairy conflict though is it?\nI have identified a half dozen other areas for optimization as well, and am confident that a billion assertions could be dropped to single digit seconds or even sub seconds.  How long until you believe your changes will be finalized?  Perhaps I should stop looking at this until they're in?\n. Interesting, I hadn't yet narrowed in on any optimizations that should dramatically impact compile time.  What kind of changes have you been considering in that regard?  It would be useful to know when I do come back to looking at this.  I have a lot of tests so compile time is also very important to me.. Now down to 0m44.942s with your StringRef inlining.. I do not have a good benchmark for the compile times as I do for run time, but I am paying attention to make sure the compile time doesn't explode.  Trivial changes like these wouldn't typically affect the compile time, but measuring is always better than intuition :)\nHave you guys thought about adding benchmarks for the stuff you care about to your test suite?\n. ha!  Just noticed the benchmarkCompile.py.  I'll check it out and add it to my workflow. Hmm.  I'm not sure how to use benchmarkCompile.py out of the box...  I'll dig deeper when I have time.\nOSError: [Errno 2] No such file or directory: 'benchmark-dir'. @philsquared All the existing checks pass... does this mean the issue with isTrue() is not covered? or that isTrue() is not needed? or something else all together?  Obviously I don't fundamentally care about it being inlined, it was just consuming 10% of the runtime so it seems like a simple win.\nJust as an added data point, in Catch 1.9.6, isTrue is in fact inlined with the same compiler warning comment that it still has.  Perhaps this is still good enough?\n. Results from benchmarkCompile.py:\nBefore:\nTime needed for ...\n        ... compiling main, mean: 4.34, median: 4.36 s\n        ... compiling test files, mean: 18.68, median: 18.66 s\n        ... linking everything, mean: 0.22, median: 0.21 s\nAfter:\nTime needed for ...\n        ... compiling main, mean: 5.78, median: 5.75 s\n        ... compiling test files, mean: 18.63, median: 18.62 s\n        ... linking everything, mean: 0.28, median: 0.28 s\n. I'll have to re-run the benchmarks, that was from the checked in generated header to the generated header after these changes.  I should run the benchmark against the generated header just before these changes instead.. definitely not, this is not at file scope, and using static for that purpose has been deprecated by the c++ standard.. ",
    "thoughton": "Hi again! Thanks for the reply.\nHere's the output I get from your code suggestion:\n$ ./build/CatchDebug \ntrue\ntrue\nfalse. Oh, that's really strange. Maybe it's because my version of Mac OS X (and therefore XCode toolchain) are stuck on an old version, and maybe its compiler and libs are buggy in that version...?\nAnyway, no, there's no reason I need to build it.  I'm just a curious new user, and I just presumed building it all might be a good first step to learning more about it.\nSo it sounds like I should just go ahead and try to use it anyway, and simple not worry about being unable to compile the SelfTests?\nThanks for your help!. Thanks very much, I will happily just ignore the SelfTests then and proceed with actually implementing my own tests.\nThanks again for your help, it's much appreciated!. ",
    "nuyir": "@dvirtz Of course, I can make a function. However, it does not give the stacktrace when the test in the function fails. If each test case has only one call of the function, I can inverstigate the log and decide which test failed. However, if there are several calls in a test case, I think there is no way to decide which call fails.. @rioderelfte It does not help. It's impossible to identify the caller of the helper function by the parameter values in general. . @philsquared Thank you. It works. It is sufficient for my use case.. ",
    "TBBle": "I think that the right value would be achieved by margin( epsilonVal + epsilonVal * std::numeric_limits<decltype( epsilonVal )>::epsilon() ). If that's correct (my floating-point math is a little weak) then perhaps a new method (marginInclusive?) could be added that sets m_margin to the above, and hence avoids breaking backwards compatibility.\n```c++\nTEST_CASE( \"Approx with exactly-representable margin and epsilon added\" )\n{\n    CHECK( 0.25f == Approx( 0.0f ).margin( 0.25f + std::numeric_limits::epsilon() * 0.25f ) );\nCHECK( 0.0f == Approx( 0.25f ).margin( 0.25f + std::numeric_limits<float>::epsilon() * 0.25f  ) );\nCHECK( 0.5f == Approx( 0.25f ).margin( 0.25f + std::numeric_limits<float>::epsilon() * 0.25f ) );\n\nCHECK( 245.0f == Approx( 245.25f ).margin( 0.25f + std::numeric_limits<float>::epsilon() * 0.25f ) );\nCHECK( 245.5f == Approx( 245.25f ).margin( 0.25f + std::numeric_limits<float>::epsilon() * 0.25f ) );\n\n}\n```\npassed.. For the record, cppreference gives a reasonable example of floating-point comparison with a relative precision.\ncpp\ntemplate<class T>\ntypename std::enable_if<!std::numeric_limits<T>::is_integer, bool>::type\n    almost_equal(T x, T y, int ulp)\n{\n    // the machine epsilon has to be scaled to the magnitude of the values used\n    // and multiplied by the desired precision in ULPs (units in the last place)\n    return std::abs(x-y) < std::numeric_limits<T>::epsilon() * std::abs(x+y) * ulp\n    // unless the result is subnormal\n           || std::abs(x-y) < std::numeric_limits<T>::min();\n}\nThe current API documentation is quite confusing, it's not clear if episilon is a percentage with an amazingly low default, or is a value from which a percentage is derived through magic, since the docs don't show any relationship between the value set, and the percentage.\nmargin itself is clear, except as noted in #952 the documentation implies it's an inclusive range for success, but the code itself is exclusive range for success.\nI don't see why you'd want scale distinctly, but it might be due to confusion over epsilon's behaviour, per #962. (The code confused me further...)\nI also can't see how or why you'd want to combine both relative and absolute tolerances, but I can't really give a reason that you wouldn't.\nSo it would make sense for me (and avoid surprising existing satisfied users) to introduce two new things like Approx:\n input == Within(value, inclusiveAbsoluteRangeValue) implying fabs(input-value) <= inclusiveAbsoluteRangeValue; and\n input == Roughly(value, someRelativeMeasure) implying fabs(input-value) <= fabs(input-value) * std::numeric_limits<decltype(input-value)>::epsilon() * mutationOf(someRelativeMeasure).\nThat second fabs(input-value) might be the wrong multiplier for std::numeric_limits<>::epsilon, I see Catch currently takes the machine epsilon of the max of the two sides, rather than the machine epsilon of the difference. cppreference takes the machine episilon of the sum.\nIt seems to me that Within(x, 0) would be the same as Rougly(x, 0) and also would do what == does if you ignore the floating-point-equality-comparison warnings. So I'd further propose that be what Roughly(x) does, as that was another surprise we got from Approx, the described defaults seem more lenient than expected.\nThat mainly leaves the definition of mutation open. I don't have any suggestion for expressing relative difference. ULPs (per cppreference above) has the right behaviour for precisely-equal (via the subnormal check) however I don't understand them clearly enough in a mathematical sense to say it's actually correct.. ",
    "rvanvenetie": "Also, currently 0.0 != Approx(0.0).scale(0)\nI suggest changing\nstd::fabs(lhs_v - rhs.m_value) < rhs.m_epsilon * (rhs.m_scale + (std::max)(std::fabs(lhs_v), std::fabs(rhs.m_value)));\nto\nstd::fabs(lhs_v - rhs.m_value) <= rhs.m_epsilon * (rhs.m_scale + (std::max)(std::fabs(lhs_v), std::fabs(rhs.m_value)));. I also stumbled upon this, see #953 . ",
    "j2bbayle": "Indeed it works perfectly. Since I'm working in an IDE, I very rarely add command line arguments when building and running my projects, but this is a good point @philsquared. Thanks!. Xcode in its latest version. It's a little bit of a hassle to add/remove arguments each time you run, that's the only (small) issue.. You're probably right! Although I feel like one expects it, knowing that [!hide] exists -- to tell the truth I used [!solo] without thinking about it and discovered the error at runtime.\nBut I don't think it's worth the trouble of adding it since a single command line argument does the job.. That\u2019d be very nice indeed, and make it extremely pleasant to use!\nThanks anyway for your work!. ",
    "KarelCoudijzer": "I was trying to creating an c-array equals matcher like so\n```c++\ntemplate\nclass EqualsCArrayMatcher : public Catch::MatcherBase {\n public:\n  EqualsCArrayMatcher (const T* comparator, std::size_t length)\n      : comparator_(comparator), length_(length) {}\nbool match(T* other) const override {\n    for (size_t i = 0; i < this->length_; i++) {\n      if (this->comparator_[i] != other[i]) {\n        return false;\n      }\n    }\nreturn true;\n\n}\n  ...\n};\n```\nBut for an c-array of signed char's it failed.. This seems to resolve the problem. \nThank you for fast response.. ",
    "oliverdaniell": "Agreed, this behaviour is unintuitive and (I think) contradicts the documentation. . ",
    "ddanila": "Failed build is not because of me apparently, anyway this file is not involved in any tests or build chain.\n/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/cstdio:120:11: error: no member named 'gets' in the global namespace. Made an update to address the review. Thanks for it, btw.. ",
    "sourcedelica": "I'm on vacation right now, and don't have access to my work system, but I\nwas using the -o outfile option.  That might be it?\nOn Mon, Jul 31, 2017 at 4:11 AM Martin Ho\u0159e\u0148ovsk\u00fd notifications@github.com\nwrote:\n\nCan you provide example which breaks the generated XML? Because I don't\nsee it (using Catch v1.9.3)\nxarn@DESKTOP-B2A3CNC:~$ cat test.cpp\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\ninclude \nTEST_CASE(\"abcd\") {\n    std::cout << \"Lets break XML!: < > ' & >\\n\" << '\"';\n    REQUIRE(1 + 1 + 1 == 2 + 1);\n}\nxarn@DESKTOP-B2A3CNC:~$ clang++ test.cpp && ./a.out -r junit\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\n\n\nLets break XML!: < > ' & >\n\"\n      \n\n\nLets break XML!: < > ' & >\n\"\n    \n\n\n\nxarn@DESKTOP-B2A3CNC:~$ clang++ test.cpp && ./a.out -r xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\n\n\n\nLets break XML!: < > ' & >\n\"\n        \n\n\n\n\n\n\nBoth outputs are properly escaped XMLs according to random online\nvalidator.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/philsquared/Catch/issues/973#issuecomment-318998663,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEBjBIP9-n1f85titGaeJRFJBxgfvtImks5sTYxEgaJpZM4Okt71\n.\n-- \nSent from Gmail Mobile\n. It looks like it is a problem with the CI system parsing Catch, not Catch itself.  Sorry about that!. This is happening almost all the time now. I will work on a repro. \n",
    "M-Fabian": "Thank you for replying. I wonder if a custom reporter could also do the second part. Would you consider this possible with the current reporter API?. I just wrote my custom reporter, which is almost identical to the internal ConsoleReporter, except for sectionEnded() and testRunEnded(). I cannot specify how many tests are printed, so I default to 10. And I make them yellow and red if they take too long.\nThe API works quite nicely. It was easy for me to add my custom reporter. Good work!. I see. Fingers crossed for BrightYellow ;-). Now that version 2 is out, I had hoped for BrightYellow. It is actually quite simple:\ncase Colour::BrightYellow:    return setTextAttribute( FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);\nWould you please consider adding BrightYellow, as the normal Yellow in Windows Console is muddy and dim.... Awesome, thank you! Catch continues to be my favorite Unittest framework :-). Could you please also add BrightYellow to Catch1?\nIt seems that Catch1 is still under active development, which I appreciate since I cannot switch to Catch2 yet (because of my old compiler I am bound to use in my current projects),\nPlease consider it for the next release 1.12.3.\nI cannot reopen this issue. Do I need to make a new issue for this request?. I consider this a low priority feature request. My workflow is to run all catch tests frequently and most of the time they will work. So if one of the tests which require --invisibles to be turned off, I can do it or debug it right away using -b.. ",
    "zeromem88": "Partially yes.\nIBM states that their latest operating system IBM i 7.3 has full c++11 support, but it should be tested first. I have some doubt about that because, for example, there is nothing about variadic templates in ibm manuals. Multi threading under a big question too.\nOur current IBM I v 7.2 has partial support for c+0x TR0. Upgrade to the latest release usually happens when IBM finally announce end of life date. Mainframe maintenance best practice - never upgrade until you really need it. \nI suppose this will happen in a couple of years. Until that time no c++11 and IBM I 7.3. ",
    "NoLongerBreathedIn": "Also a good idea: allowing INFINITY == Approx(INFINITY).\nCurrently this is false.. ",
    "egonk": "I've tested it on VS2015 x64 and Linux g++ 4.8.2 x64 and it works on both. Thanks a lot!. ",
    "ozars": "Hi there! I also needed scoped info messages in a way I can use them to report stuff from my own helper functions in case of a failure. Currently, calling INFO() from my helper functions doesn't help me since they are scoped to the my helper functions. So, they are created in the helper function scope and destroyed while returning from there, before they had a chance to get reported when an assertion fails.\nI'd like implement this functionality if nobody is working on that. I have a couple of questions. Let me describe my understanding first:\nCurrently, INFO() is an alias for this internal macro:\nhttps://github.com/catchorg/Catch2/blob/67308bb606e2640d3622861a0e45d83169bdebb5/include/internal/catch_capture.hpp#L130-L131\nIt creates this object:\nhttps://github.com/catchorg/Catch2/blob/67308bb606e2640d3622861a0e45d83169bdebb5/include/internal/catch_message.cpp#L49-L60\nScopedMessage pushes itself on construction and pops itself upon destruction by calling below two methods.\nI assume these two are not overridden in somewhere else, are they?\nhttps://github.com/catchorg/Catch2/blob/63d1a96908ac40dd7f474a35085120bb3992ded7/include/internal/catch_run_context.cpp#L237-L243\n~~In popScopedMessage, the message being destroyed along with all messages appended after that are being removed from the messages vector. I didn't understand why following items are popped out. Aren't they supposed to be popped out already while they were being destroyed? Is there some other way to push info messages other than INFO() macro or is this something left from previous implementations?~~ I just realized it just removes the element and remove pass the end.\nI'm thinking of adding some message vectors to RunContext such as vector<ScopedMessage> m_assertionMessages. In this case m_assertionMessages will be cleared in RunContext::assertionEnded.  Similarly m_sectionMessages, m_testCaseMessages may be added. ~~For this to work I need to change above behavior of popScopedMessage though, since those messages supposed to outlive messages created by INFO() macro on the stack scope.~~\nEventually these functionalities can be exposed with some macros, e.g. ASSERTION_INFO, SECTION_INFO, TEST_CASE_INFO similar to INFO. They will just emplace ScopedMessage to corresponding vector in running context.\n@horenmar I'd appreciate if you could provide me feedback before I start implementation. Is this right approach? Do you have any objections or suggestions?. cc #415 @philsquared. > In general, I think that providing full granularity (e.g. separate macros for test case scope, section scope, assertion scope) is not a good idea -- I think that we should just bring back UNSCOPED_* macros \nFair enough.\n\nwhere their semantics are that they are valid until either of\n* `TEST_CASE` ends\n\n* assertion (`REQUIRE`, `CHECK`, ...) happens\n\nand then they are removed.\n\nIf I understood you correctly, this is actually how assertion info (#1522) behaves since RunContext::m_messages cleared at the end of each test case already and I added Runcontext::m_assertMessageScopes, which is cleared at the end of each assertion. I will rename/remove \"assertion\" part and add \"unscoped\" then.\nps. Nope, messages are currently cleared when sectionEnded. I will just add cleaning unscoped messages at the end of test case then.\n\nFor implementation details, you want to rope in @JoeyGrajciar, because I am taking 2 weeks break.\n\nHave a nice break! @JoeyGrajciar: I'd appreciate if you could provide some feedback on #1522.. I modified PR per https://github.com/catchorg/Catch2/issues/983#issuecomment-459853405.\nIt seems to work as intended, however, WARN/FAIL/FAIL_CHECK/SUCCEED also clears unscoped info messages since they all eventually call RunContext::assertionEnded. I am not sure if this should be expected behavior. It makes sense to me to disable clearing on WARN and keep it for other three. Suggestions?. > Is it really needed to have those unscoped info messages kept even after WARN?\nNot really. I mixed two things. I'd prefer to have a variation of ordinary info messages that are not locally scoped (a variation of unscoped info messages not reset at each assertion in other words) so that it would behave exactly like INFO, but it could be created from helper functions different from INFO. Unscoped info doesn't behave this way by design. I understand it may be cumbersome to maintain many variations of info, so I am not pushing for this to be maintained officially.\nI think \"unscoped info\" is somewhat a counter-intuitive name for something scoped to assertions though. I see where you are coming from, that unscoped info is something existed before, but you may consider renaming before reintroducing it given that \"info\" isn't also referred as \"scoped info\" any more. Something like \"assertive info\" or \"assertion info\" sounds more intuitive to me, but then again I never used unscoped info when it existed (I recently started using Catch2).\n\nPlease add also documentation about this macro to docs/logging.md. Also it might be good to add an example to the examples. If you add the example add link to it in the documentation.\n\nSure. I will add some documentation. I didn't see any stand alone examples just for logging messages, so I plan to add some inline examples to the documentation quoting from test cases.. @JoeyGrajciar Please check the documentation I added.\nDo you want me to squash everything or leave it as-is?. > I am not sure that unscoped messages should be cleared at the end of a SECTION. IMO, an unscoped message that is unused by the end of a section is the result of an ad-hoc reimplementation of generators with sections:\n\nc++\nTEST_CASE(\"foo\") {\n    int how_many = 0;\n    SECTION(\"3 elements\") { how_many = 3; }\n    SECTION(\"5 elements\") { how_many = 5; }\n    ...\n}\n\nI'm not sure if I understood this use case correctly. What would be the use of SECTION without any assertions in it? Also wouldn't it be semantically more reasonable to put unscoped info in between two sections instead of just before the end of the first section if one wants some info to be printed for the second section?\nI agree with WARN case. I will update accordingly.\n. Okay, I got what you meant with sections above. I will try removing message scope clear at the end of each section, but this change alone probably won't be enough if test cases are ran multiple times to iterate over sections and there are other assertions on that path before reaching the next section, which is quite likely. In this case, it may be hard to implement this without serious refactoring or ugly workarounds.\n\ne.g. the logic in RunContext::handleExpr for short-circuiting\n\nGood thing you brought this up. I think I need to add another check against WARN in RunContext::assertionPassed for the same reason. Also just so you know, I found out by chance that current tests don't cover the execution path for that short-circuit. See the comment in above commit https://github.com/catchorg/Catch2/pull/1522/commits/093b3b898d9e1ec74f28941553dd57faff45ff74.\nI am going to make above changes, update docs and rebase it against master, hopefully sometime this weekend.. > I will try removing message scope clear at the end of each section\nThis solution didn't work out as I expected unfortunately. I don't have much idea about how to implement it without major changes either. So, I will depend this behavior being not overly important.\n\nI think I need to add another check against WARN in RunContext::assertionPassed for the same reason.\n\nIt turns out this was being handled correctly already.\nI splitted commits into three parts. If there are no other changes requested, it is ready to merge.\nps. I rebased it against master. I've just realized some tests are failing on appveyor due to some unrelated changes inherited from the tip of the master.. No problem at all. I doesn't affect me. I just wanted to note it since PR fails to pass appveyor checks.. Thanks.. Yes, it can, but I tend to wrap all expression macros with do..while(0) to be on safe side about semicolon for later modifications. It eventually comes down to personal/project coding conventions though, pretty much like preference of using or not using brackets for one-liner ifs, whiles,  fors etc.\nShall I drop do-while?. Done.. Done.. Done.. Yes, it refers to properties explained just above. It sounds okay to me, but feel free to rephrase it and push.. Using IStreamingReporter::assertionEnded as-is didn't work. An example assumption in the downstream:\nhttps://github.com/catchorg/Catch2/blob/093b72416de31a804fea15a4055bb44cb523401f/include/reporters/catch_reporter_console.cpp#L364-L366\nUNSCOPED_INFO messages are currently required to be cleared after each assertion regardless of the result. I could change above implementation, but it requires shotgun surgery across all reporters inheriting from StreamingReporterBase. This also leads to an ambiguity: If assertionEnded returns true, will unscoped info be cleared while info will be kept, or will both be cleared?\nSo, I figured out it's easier to check result type against warning instead of dealing with all these. :). ",
    "evenex": "#ifdef UNITTEST\n#define CATCH_CONFIG_MAIN\n#else\n#define CATCH_CONFIG_RUNNER\n#endif\n\n#include<catch/catch.hpp>\n\nDoes the trick. Should have RTFM a little more thoroughly; sorry for the noise.. ",
    "lordofinsomnia": "Thank you it works. I find out that subsections does need to be numbered. Here is code that works.\nc++\nTEST_CASE( \"...\" ) {\n    for (int i = 0; i < 5; ++i) {\n        SECTION(\"FooBarBaz\" + std::to_string(i)) {\n            SECTION(\"subFooBarBaz\") { //here numbering is not needed\n            // ...\n            }\n        }\n    }\n}. ",
    "svadimr": "Hi, for me this code doesn't work. When I have a SECTION inside for, only the iteration enters the SECTION. \nc++\nTEST_CASE( \"...\" ) {\n    for (int i = 0; i < 5; ++i) {\n        SECTION(\"FooBarBaz\" + std::to_string(i)) {\n            // this code performed only for i = 0, which is a problem\n        }\n    }\n}. ",
    "Nevsor": "Thanks, I just upgraded to Catch2 and everything works great so far.. ",
    "paulsapps": "Run under valgrind?. ",
    "NaveenKh": "I will try with defining CATCH_CONFIG_NO_POSIX_SIGNALS and let you know results soon.\nso my code is like, the application starts and it initializes few stuff and then it goes into loop(there are 2 or 3 threads involved). And there is a timeout every 2 seconds where it does some logging. The application is shutdown after 10 seconds by configuring a timer to terminate the app(I guess it does this by closing all instances and then triggering ctrl+c). I am not the complete owner of this code but this is my understanding about this.. I defined  CATCH_CONFIG_NO_POSIX_SIGNALS but program ran and just exited, no output from CATCH was seen :(. ",
    "mgr-inz-rafal": "Works as expected now, thanks for quick reply!. Yes, that's a very good point. I didn't use LLVM's libc++ for compilation.\nI close this issue even though I cannot fully verify it right now, since I have huge mess with compiler/libraries on my development machine after saturday night and actually nothing works correctly right now :). ",
    "offa": "I'll open a PR for this.. This is also what cppreference says (ctor 1). Curiously I'm on C++14 \u2026. Appveyor failure is not related to this PR and already exists in catch2, from which this is branched.. According to the Travis failure: Two jobs ran into a timeout. This is not a problem of this PR.\nSuccessful build of my branch. Retrying both failed jobs solves the problem.. > Yeah, Travis builds sometimes just die, and need to be restarted. Does this change mean a return to the slower startup time of VM builds?\n\nSeems that way. Oh well.\n\nYes, but hopefully with better boot time. According to the linked thread they are working on improving performance. I keep my fingers crossed ...\n. ",
    "Artalus": "Thank you, using () instead of {} is not a problem for now. Will wait for PSA about Catch2 release!. ",
    "CBaiz": "I had the same problem with OutputDebugStringA on Windows with Visual Studio 2017 in a console application project.\nSolved it by writing this:\ninclude \ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\". I've tested it without #include <windows.h> and it works like a charm.\nGood work and nice reaction time \ud83d\udc4d . ",
    "baldurk": "Oh I'm sorry, I didn't think to check this on Catch 2. If it's fixed there then it's not important to me to PR a fix to a sunsetting branch, especially with potential side-effects of breaking it on some MSVC version that isn't tested in CI.\nI'll close this and switch to 2 once it's released, I only noticed because I was trying to implement the local hack mentioned in #1024. Thank you!\nRE: side note, in a twisted way that makes sense on their part, but pragmatically it's quite unhelpful :). Although I saw just recently that there's finally movement on that.. Thanks, as long as I'm not missing something obvious then I'm fine with just customising my local catch.hpp to call into my own impl, and if a future release supports official customisation I'll switch to that.. I gave this a whirl on the 2.2.0 release, it works great thanks!\nOne thing I realised after actually implementing it though is that actually a lot of the things I want to stringify are enums, which unfortunately never make it down to this fallback but instead get coerced and printed as integers earlier.\nI realise that's sort of a separate request so I can open a new issue for it, but it would be very nice to pipe enum stringification through the fallback as well (I already have an overload defined for all my enums).\nIf it's possible through sufficient C++ magic to seamlessly detect an overload of the custom function and fall back to the underlying type if it doesn't exist that would be superb, but for my purposes I'd be happy with a #define to opt-in to having all stringifying responsibilities on the CATCH_CONFIG_FALLBACK_STRINGIFIER with resulting failed compilation if any enum is not handled.. Understood, I don't really have an intuition for what's expensive and what's not. I'm fine with just being an opt-in path to override all types without any TMP. In my case my stringification can handle any type so it's fine to forward down anything at all, but I understand that a default handler for enums is probably preferable behaviour.\nFor now I'll make some local changes to suit my needs, thanks again for looking into this!. Great, thanks! Looks fine now to me, I get the same file as if I fetch from single_include/catch.hpp from the repo directly.. For what it's worth I don't run with the -b flag, I have a custom main which automatically sets shouldDebugBreak based on whether a debugger is already attached or not.\nI prefer having the breaks happen actually on the failed checks otherwise it's busy work every time a check fails to click back on the right stack frame. I realise it's a trade-off against compile time but it's one I'll happily make for a smoother experience.. Ah I see, that makes sense then.\nI'm not using any special compile flags so it'll be whatever is default for that Android SDK, I'm not really familiar with the setup. Android is very brittle and error-prone though, so I'm happy to leave this as a local change I have for compatibility rather than try and fix it another way on my end and break something else.. ",
    "Gus-Corvil": "Same for me here on Ubuntu 16.04.3 LTS.\nNot using any of those fancy #defines here, we just upgraded from v1.5.6.\nIssue must have appeared on v1.9.7, since v1.9.6 is the highest working fine for me.. Actually the --success command line switch seems to make the problem disappear (for my project on Ubuntu 16 LTS) with no apparent side effect in the junit XML output.. ",
    "rkaminsk": "Some comments:\n- Yes, with catch 1 this works. Sorry for wrongly reporting it doesn't. Catch 1 uses const references, which makes sense with comparison operators.\n- I don't think that the patch uses forwarding/universal references properly. Forwarding (potentially moving) something and using it more than once in an expression cannot be right. EDIT: Looking at it a little more, it is not strictly wrong but I would not write it like this because the code is quite confusing. (Also the forwards should be unnecessary.) \n- The catch 2 code does not look right to me either. Is the intention to also support non-const references here? Then just using RhsT& instead of RhsT&& should do the trick (which unfortunately still requires special treatment to handle bitfields). I am just guessing what is intended.\nI found this article about the topic nice: http://eli.thegreenplace.net/2014/perfect-forwarding-and-universal-references-in-c/. Passing a bitfield via const reference is no problem. Now, we do not even need the enable_if anymore. ;). I think const references are the way to go. For \"non-standard\" comparison operators the user should put an extra pair of parenthesis around the comparison. Just my 2 cents.. That's exactly the issue. I just tried to throw the exception \"another way\", replacing the throw call with std::rethrow_exception(std::current_exception()) and then problem went away. Not sure if you want to apply this because as far as I can see the way you implemented this should work too.. I experimented a bit. Basically, what fails is\n```cpp\ninclude \ninclude \nint main() {\n    try {\n        throw std::runtime_error(\"test\");\n    }\n    catch (...) {\n        try { \n            throw;\n        }\n        catch (...) {\n        }\n    }\n    assert (!std::uncaught_exception());\n}\nChanging this tocpp\ninclude \ninclude \nint main() {\n    try {\n        throw std::runtime_error(\"test\");\n    }\n    catch (...) {\n        try { \n            std::rethrow_exception(std::current_exception());\n        }\n        catch (...) {\n        }\n    }\n    assert (!std::uncaught_exception());\n}\n``\nworks as expected. Also, this should work on any platform with C++11 support. The change to catch should be simple: just replace all calls to throw. I can test this for you if you like. (I am running FreeBSD in VirtualBox. It just takes a couple of minutes to install and the compiler is part of the default installation.). Using the modified version reduced the number of test failures I got. Interestingly, the project I was testing with also usesthrow;to rethrow exceptions. After replacing each such call withstd::rethrow_exception(std::current_exception());` all tests run through. So even with your change, you might still receive bug reports. Maybe fewer. I think the problem really is with clang or maybe with the combination of clang and libcxxrt that is being used on FreeBSD.\nUpdate 1: Out of curiosity I build clang's libcxx so that it uses libcxxrt (instead of llvm's libcxxabi or gcc's libsupc++). With this setup I can reproduce the errors on my gentoo linux box.\nUpdate 2: I reported the issue with libcxxrt pathscale/libcxxrt#49. Let's see what they say.\n. Hi, I just checked, commit  pathscale/libcxxrt@6f4cfa28c42b71cdff570f69ed523ab45d4245be fixes the issue.. Hi, like I said the pach fixes some of my test cases on FreeBSD. This is a libcxxrt bug, not a catch bug. Up to you if you want to apply this.. ",
    "hrabe": "Still persists with Catch v1.10.0 and may be related to https://connect.microsoft.com/VisualStudio/feedback/details/380090/variadic-macro-replacement. ",
    "ax3l": "I would love to use this feature as well.\nIn my case, I am refactoring a larger code base with existing unit tests. When testing the result, exceptions from the library itself are thrown in the tests which I would like to debug in gdb by breaking into it and investigating the current backtrace.\nUnfortunately, Catch2 does not break with -a -b at these points and throws me back to printf debugging.. A current work-around with gdb can be to set breakpoints on all throws and iterate to the actual unexpected throw:\ngdb --args ./CatchTest -a -b\n(gdb) catch throw\n(gdb) run. > i think that you should increase the i only in case of i == 0.\nNo, the sum is already calculated at that point, should definitely be i+1 in all cases.. the sum starts with zero and adds for i=0 the first delta. Divided by one (i+1) this is still delta.\nin the second iteration, i=1, the sum is the first value plus the second delta. You also want to divide by i+1 (now two).\nThe last iteration is i=iterations-1. At the same point where you divide sum/iterations you could divide sum/(i+1) (if you were just before exiting the loop).. Hi @hbina, this is zero-indexed for-loop, with range for i from 0 to iterations-1.\n```C++\n// main.cpp\ninclude \ninclude \nint main()\n{\n    std::size_t iterations = 4u;\nfor( std::size_t i = 0; i < iterations; ++i ) {\n    std::cout << i << std::endl;\n}\nreturn 0;\n\n}\nCompile & run:bash\n$ g++ main.cpp && ./a.out                                                                                                                                       \n0\n1\n2\n3\n$\n```\nHere is how for-loops work in C++:\n\niteration_expression: any expression, which is executed after every iteration of the loop and before re-evaluating condition. Typically, this is the expression that increments the loop counter\n\n. @horenmar just in case: this is a simple fix for a corner-case, if you might want to take a look :). @horenmar just in case: this is a little housekeeping update, quick to review. Thanks, yes I think the same since having an undefined UB issue if it would be used before init in the future or using a nullptr will also be UB in most cases.\nNevertheless, silencing the static analysis and for consistency with the second pointer member, that was already nullptr initialized, was ok for me as well.. ",
    "tankorsmash": "That's a bummer. I'm on VS2013 and I'd love to be able to break on exceptions. I've got a std::out_of_range that I'd love to be able to break on. . ",
    "tdegeus": "Great! However, I think there is still one issue.\nIf I test it on my system, currently \n```bash\n$ cmake /path/to/catch -DCMAKE_INSTALL_PREFIX:PATH=/test/path\n$ pkg-config --cflags catch\n-I/test/path/\n```\nwhile I need to feed the compiler with\nbash\n-I/test/path/include/\nOne way to go could be to have the following catch.pc.in (I have successfully tested this on my system)\n```cmake\nprefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nName: Catch\nDescription: Testing library for C++\nRequires:\nVersion: @CATCH_VERSION_NUMBER@\nLibs:\nCflags: -I${prefix}/@INCLUDE_INSTALL_DIR@/include\n```\nThere might be a more elegant solution. I did not look in great detail in the CMakeLists.txt to find if there is another solution there. . @horenmar Great! Thanks a lot!. ",
    "PRGWITHSTYLE": "If I start with #define NOMINMAX as suggested the same result as the initial post..   If i remove the #define NOMINMAX from my stdafx.h these errors appear on build.\nError list: \nError C2059: syntax error: ')' (7223)\n    Error C2334: unexpected token(s) preceding ':'; skipping apparent function body (7223)\n    Error C2143: syntax error: missing ')' before ';' (7236)\n    Error C2059: syntax error: ')' (7236)\n    Error C2238: unexpected token(s) preceding ';' (7236)\n    Error C2672: 'shuffle': no matching overloaded function found (7249)\n    Error C2039: 'shuffle': is not a member of 'Catch::RandomNumberGenerator' (7249)\n    Error C2780: 'void std::shuffle(_RanIt,_RanIt,_Urng &&)': expects 3 arguments - 1 provided (7249)\n    Error C2352: 'Catch::RandomNumberGenerator::enforceNoDuplicateTestCases': illegal call of non-static member function (7318)\n    Error C2352: 'Catch::RandomNumberGenerator::sortTests': illegal call of non-static member function (7321)\n    Error C2838: '{ctor}': illegal qualified name in member declaration (7391)\n    Error C3254: 'Catch::RandomNumberGenerator': class contains explicit override '{ctor}' but does not derive from an interface that contains the function declaration (7391)\n    Error C2838: '{dtor}': illegal qualified name in member declaration (7395)\n    Error C3254: 'Catch::RandomNumberGenerator': class contains explicit override '{dtor}' but does not derive from an interface that contains the function declaration (7395)\n    Error C2143: syntax error: missing ';' before 'namespace' (7404)\n    Error C2065: 'm_testCaseRegistry': undeclared identifier (7537)\n    Error C2228: left of '.registerTest' must have class/struct/union (7554)\n    Error C2065: 'm_testCaseRegistry': undeclared identifier (7554)\n    Error C4430: missing type specifier - int assumed. Note: C++ does not support default-int (7564)\n    Error C3646: 'm_testCaseRegistry': unknown override specifier (7564)\n    Error C2888: 'Catch::NotImplementedException::NotImplementedException(const Catch::SourceLineInfo &)': symbol cannot be defined within namespace 'Catch' (7604)\n    Error C2888: 'const char Catch::NotImplementedException::what(void) noexcept const': symbol cannot be defined within namespace 'Catch' (7611)\n    Error C2888: 'Catch::FileStream::FileStream(const std::string &)': symbol cannot be defined within namespace 'Catch' (7667)\n    Error C2888: 'std::ostream &Catch::FileStream::stream(void) const': symbol cannot be defined within namespace 'Catch' (7676)\n    Error C2888: 'Catch::DebugOutStream::DebugOutStream(void)': symbol cannot be defined within namespace 'Catch' (7688)\n    Error C2888: 'std::ostream &Catch::DebugOutStream::stream(void) const': symbol cannot be defined within namespace 'Catch' (7692)\n    Error C2888: 'Catch::CoutStream::CoutStream(void)': symbol cannot be defined within namespace 'Catch' (7699)\n    Error C2039: 'cout': is not a member of 'Catch::Catch' (7699)\n    Error C2888: 'std::ostream &Catch::CoutStream::stream(void) const': symbol cannot be defined within namespace 'Catch' (7702)\n    Error C2888: 'Catch::Colour::Colour(Catch::Colour::Code)': symbol cannot be defined within namespace 'Catch' (7996)\n    Error C2888: 'Catch::Colour::Colour(const Catch::Colour &)': symbol cannot be defined within namespace 'Catch' (7997)\n    Error C2888: 'Catch::Colour::~Colour(void)': symbol cannot be defined within namespace 'Catch' (7998)\n    Error C2888: 'void Catch::Colour::use(Catch::Colour::Code)': symbol cannot be defined within namespace 'Catch' (8000)\n    Error C2888: 'Catch::AssertionInfo::AssertionInfo(void)': symbol cannot be defined within namespace 'Catch' (8086)\n    Error C2888: 'Catch::AssertionInfo::AssertionInfo(const char ,const Catch::SourceLineInfo &,const char ,Catch::ResultDisposition::Flags,const char )': symbol cannot be defined within namespace 'Catch' (8093)\n    Error C2888: 'Catch::AssertionResult::AssertionResult(void)': symbol cannot be defined within namespace 'Catch' (8100)\n    Error C2264: 'Catch::AssertionInfo::AssertionInfo': error in function definition or declaration; function not called (8100)\n    Error C2888: 'Catch::AssertionResult::AssertionResult(const Catch::AssertionInfo &,const Catch::AssertionResultData &)': symbol cannot be defined within namespace 'Catch' (8103)\n    Error C2888: 'Catch::AssertionResult::~AssertionResult(void)': symbol cannot be defined within namespace 'Catch' (8107)\n    Error C2888: 'bool Catch::AssertionResult::succeeded(void) const': symbol cannot be defined within namespace 'Catch' (8110)\n    Error C2039: 'isOk': is not a member of 'Catch::Catch' (8111)\n    Error C2660: 'Catch::AssertionResult::isOk': function does not take 1 arguments (8111)\n    Error C2888: 'bool Catch::AssertionResult::isOk(void) const': symbol cannot be defined within namespace 'Catch' (8115)\n    Error C2039: 'isOk': is not a member of 'Catch::Catch' (8116)\n    Error C2888: 'Catch::ResultWas::OfType Catch::AssertionResult::getResultType(void) const': symbol cannot be defined within namespace 'Catch' (8119)\n    Error C2888: 'bool Catch::AssertionResult::hasExpression(void) const': symbol cannot be defined within namespace 'Catch' (8123)\n    Error C2888: 'bool Catch::AssertionResult::hasMessage(void) const': symbol cannot be defined within namespace 'Catch' (8127)\n    Error C2888: 'std::string Catch::AssertionResult::getExpression(void) const': symbol cannot be defined within namespace 'Catch' (8137)\n    Error C2888: 'std::string Catch::AssertionResult::getExpressionInMacro(void) const': symbol cannot be defined within namespace 'Catch' (8143)\n    Error C2888: 'bool Catch::AssertionResult::hasExpandedExpression(void) const': symbol cannot be defined within namespace 'Catch' (8150)\n    Error C2888: 'std::string Catch::AssertionResult::getExpandedExpression(void) const': symbol cannot be defined within namespace 'Catch' (8154)\n    Error C2888: 'std::string Catch::AssertionResult::getMessage(void) const': symbol cannot be defined within namespace 'Catch' (8158)\n    Error C2888: 'Catch::SourceLineInfo Catch::AssertionResult::getSourceInfo(void) const': symbol cannot be defined within namespace 'Catch' (8161)\n    Error C2888: 'std::string Catch::AssertionResult::getTestMacroName(void) const': symbol cannot be defined within namespace 'Catch' (8165)\n    Error C2888: 'void Catch::AssertionResult::discardDecomposedExpression(void) const': symbol cannot be defined within namespace 'Catch' (8169)\n    Error C2888: 'void Catch::AssertionResult::expandDecomposedExpression(void) const': symbol cannot be defined within namespace 'Catch' (8173)\n    Error C2264: 'Catch::Colour::Colour': error in function definition or declaration; function not called (8208)\n    Error C2264: 'Catch::Colour::Colour': error in function definition or declaration; function not called (8211)\n    Error C2888: 'Catch::TestCaseInfo::TestCaseInfo(const std::string &,const std::string &,const std::string &,const std::set,std::allocator<_Kty>> &,const Catch::SourceLineInfo &)': symbol cannot be defined within namespace 'Catch' (8282)\n    Error C2668: 'Catch::Catch::setTags': ambiguous call to overloaded function (8288)\n    Error C2888: 'Catch::TestCaseInfo::TestCaseInfo(const Catch::TestCaseInfo &)': symbol cannot be defined within namespace 'Catch' (8292)\n    Error C2888: 'bool Catch::TestCaseInfo::isHidden(void) const': symbol cannot be defined within namespace 'Catch' (8302)\n    Error C2888: 'bool Catch::TestCaseInfo::throws(void) const': symbol cannot be defined within namespace 'Catch' (8305)\n    Error C2888: 'bool Catch::TestCaseInfo::okToFail(void) const': symbol cannot be defined within namespace 'Catch' (8308)\n    Error C2888: 'bool Catch::TestCaseInfo::expectedToFail(void) const': symbol cannot be defined within namespace 'Catch' (8311)\n    Error C2888: 'Catch::TestCase::TestCase(Catch::ITestCase ,const Catch::TestCaseInfo &)': symbol cannot be defined within namespace 'Catch' (8315)\n    Error C2264: 'Catch::TestCaseInfo::TestCaseInfo': error in function definition or declaration; function not called (8315)\n    Error C2888: 'Catch::TestCase::TestCase(const Catch::TestCase &)': symbol cannot be defined within namespace 'Catch' (8318)\n    Error C2264: 'Catch::TestCaseInfo::TestCaseInfo': error in function definition or declaration; function not called (8320)\n    Error C2888: 'Catch::TestCase Catch::TestCase::withName(const std::string &) const': symbol cannot be defined within namespace 'Catch' (8322)\n    Error C2264: 'Catch::TestCase::TestCase': error in function definition or declaration; function not called (8323)\n    Error C2888: 'void Catch::TestCase::swap(Catch::TestCase &)': symbol cannot be defined within namespace 'Catch' (8328)\n    Error C2888: 'void Catch::TestCase::invoke(void) const': symbol cannot be defined within namespace 'Catch' (8340)\n    Error C2888: 'bool Catch::TestCase::operator ==(const Catch::TestCase &) const': symbol cannot be defined within namespace 'Catch' (8344)\n    Error C2888: 'bool Catch::TestCase::operator <(const Catch::TestCase &) const': symbol cannot be defined within namespace 'Catch' (8350)\n    Error C2888: 'Catch::TestCase &Catch::TestCase::operator =(const Catch::TestCase &)': symbol cannot be defined within namespace 'Catch' (8353)\n    Error C2264: 'Catch::TestCase::TestCase': error in function definition or declaration; function not called (8354)\n    Error C2888: 'const Catch::TestCaseInfo &Catch::TestCase::getTestCaseInfo(void) const': symbol cannot be defined within namespace 'Catch' (8360)\n    Error C2888: 'Catch::Version::Version(unsigned int,unsigned int,unsigned int,const char const ,unsigned int)': symbol cannot be defined within namespace 'Catch' (8377)\n    Error C2264: 'Catch::Version::Version': error in function definition or declaration; function not called (8397)\n    Error C2888: 'Catch::MessageInfo::MessageInfo(const std::string &,const Catch::SourceLineInfo &,Catch::ResultWas::OfType)': symbol cannot be defined within namespace 'Catch' (8411)\n    Error C2888: 'unsigned int Catch::MessageInfo::globalCount': symbol cannot be defined within namespace 'Catch' (8418)\n    Error C2888: 'Catch::ScopedMessage::ScopedMessage(const Catch::MessageBuilder &)': symbol cannot be defined within namespace 'Catch' (8423)\n    Error C2888: 'Catch::ScopedMessage::ScopedMessage(const Catch::ScopedMessage &)': symbol cannot be defined within namespace 'Catch' (8429)\n    Error C2888: 'Catch::ScopedMessage::~ScopedMessage(void)': symbol cannot be defined within namespace 'Catch' (8432)\n    Error C2888: 'void Catch::Timer::start(void)': symbol cannot be defined within namespace 'Catch' (8602)\n    Error C2888: 'unsigned int Catch::Timer::getElapsedMicroseconds(void) const': symbol cannot be defined within namespace 'Catch' (8605)\n    Error C2888: 'unsigned int Catch::Timer::getElapsedMilliseconds(void) const': symbol cannot be defined within namespace 'Catch' (8608)\n    Error C2888: 'double Catch::Timer::getElapsedSeconds(void) const': symbol cannot be defined within namespace 'Catch' (8611)\n    Error C2888: 'Catch::pluralise::pluralise(std::size_t,const std::string &)': symbol cannot be defined within namespace 'Catch' (8677)\n    Error C2888: 'Catch::SourceLineInfo::SourceLineInfo(void)': symbol cannot be defined within namespace 'Catch' (8688)\n    Error C2888: 'Catch::SourceLineInfo::SourceLineInfo(const char ,std::size_t)': symbol cannot be defined within namespace 'Catch' (8690)\n    Error C2888: 'bool Catch::SourceLineInfo::empty(void) const': symbol cannot be defined within namespace 'Catch' (8693)\n    Error C2888: 'bool Catch::SourceLineInfo::operator ==(const Catch::SourceLineInfo &) const': symbol cannot be defined within namespace 'Catch' (8696)\n    Error C2888: 'bool Catch::SourceLineInfo::operator <(const Catch::SourceLineInfo &) const': symbol cannot be defined within namespace 'Catch' (8699)\n    Error C2593: 'operator <<' is ambiguous (8722)\n    Error C2888: 'Catch::SectionInfo::SectionInfo(const Catch::SourceLineInfo &,const std::string &,const std::string &)': symbol cannot be defined within namespace 'Catch' (8737)\n    Error C2888: 'Catch::Section::Section(const Catch::SectionInfo &)': symbol cannot be defined within namespace 'Catch' (8743)\n    Error C2888: 'Catch::Section::~Section(void)': symbol cannot be defined within namespace 'Catch' (8753)\n    Error C2661: 'Catch::SectionEndInfo::SectionEndInfo': no overloaded function takes 2 arguments (8755)\n    Error C2888: 'Catch::Section::operator bool(void) const': symbol cannot be defined within namespace 'Catch' (8767)\n    Error C2888: 'Catch::ResultBuilder::ResultBuilder(const char ,const Catch::SourceLineInfo &,const char ,Catch::ResultDisposition::Flags,const char )': symbol cannot be defined within namespace 'Catch' (9102)\n    Error C1003: error count exceeds 100; stopping compilation (9102)\n. Well it seems that now catch will not build at all with these errors and the teamCity reporter is broken on the latest 2.00 build:\nError C2955: 'Catch::StreamingReporterBase': use of class template requires template argument list (1)\nError C2352: 'Catch::StreamingReporterBase<DerivedT>::testCaseStarting': illegal call of non-static member function (1)\nError C2065: 'stream': undeclared identifier (1)\nError C2955: 'Catch::StreamingReporterBase': use of class template requires template argument list (1)\nError C2352: 'Catch::StreamingReporterBase<DerivedT>::testCaseEnded': illegal call of non-static member function (1)\nError C2065: 'stream': undeclared identifier (1)\nError C2065: 'stream': undeclared identifier (1)\nError C2065: 'stream': undeclared identifier (1)\nError C2065: 'm_sectionStack': undeclared identifier (1)\nError C2228: left of '.empty' must have class/struct/union (1)\nError C2065: 'm_sectionStack': undeclared identifier (1)\nError C2228: left of '.size' must have class/struct/union (1)\nError C2065: 'm_sectionStack': undeclared identifier (1)\nError C2955: 'Catch::StreamingReporterBase': use of class template requires template argument list (1)\nError C2065: 'm_sectionStack': undeclared identifier (1)\nError C2065: 'm_sectionStack': undeclared identifier (1)\nError C2228: left of '.front' must have class/struct/union (1)\nError C2228: left of '.lineInfo' must have class/struct/union (1)\nError C3861: 'TextAttributes': identifier not found (1)\nError C2228: left of '.setIndent' must have class/struct/union (1)\nError C2228: left of '.setInitialIndent' must have class/struct/union (1)\nError C3861: 'Text': identifier not found (1)\nError C2275: 'Catch::TeamCityReporter': illegal use of this type as an expression (1)\nError C4430: missing type specifier - int assumed. Note: C++ does not support default-int (1)\nError C2440: 'initializing': cannot convert from 'initializer list' to 'int' (1)\nError C2059: syntax error: '}' (1)\nError C2143: syntax error: missing ';' before '}' (1)\nError C2228: left of '.end' must have class/struct/union (1)\nError C2352: 'Catch::StreamingReporterBase<DerivedT>::sectionStarting': illegal call of non-static member function (1)\nError C2228: left of '.begin' must have class/struct/union (1)\nError C2227: left of '->name' must point to class/struct/union/generic type (1)\nError C3646: 'CATCH_OVERRIDE': unknown override specifier (1)\nError C3646: 'CATCH_OVERRIDE': unknown override specifier (1)\nError C3646: 'CATCH_OVERRIDE': unknown override specifier (1)\nError C3646: 'CATCH_OVERRIDE': unknown override specifier (1)\nError C3646: 'CATCH_OVERRIDE': unknown override specifier (1)\nError C3646: 'CATCH_OVERRIDE': unknown override specifier (1)\nError C3646: 'CATCH_OVERRIDE': unknown override specifier (1)\nError C3646: 'CATCH_OVERRIDE': unknown override specifier (1)\nError C3646: 'CATCH_OVERRIDE': unknown override specifier (1)\nError C3646: 'CATCH_OVERRIDE': unknown override specifier (1)\nError C2614: 'Catch::TeamCityReporter': illegal member initialization: 'StreamingReporterBase' is not a base or member (1)\nError C2065: 'm_reporterPrefs': undeclared identifier (1)\nError C2228: left of '.shouldRedirectStdOut' must have class/struct/union (1)\nError C2955: 'Catch::StreamingReporterBase': use of class template requires template argument list (1)\nError C2955: 'Catch::StreamingReporterBase': use of class template requires template argument list (1)\nError C2352: 'Catch::StreamingReporterBase<DerivedT>::testGroupStarting': illegal call of non-static member function (1)\nError C2065: 'stream': undeclared identifier (1)\nError C2955: 'Catch::StreamingReporterBase': use of class template requires template argument list (1)\nError C2352: 'Catch::StreamingReporterBase<DerivedT>::testGroupEnded': illegal call of non-static member function (1)\nError C2065: 'stream': undeclared identifier (1)\nError C2065: 'CATCH_NOT_IMPLEMENTED': undeclared identifier (1)\nError C2065: 'currentTestCaseInfo': undeclared identifier (1)\nError C2227: left of '->okToFail' must point to class/struct/union/generic type (1)\nError C2065: 'stream': undeclared identifier (1)\nError C2065: 'currentTestCaseInfo': undeclared identifier (1)\nError C2227: left of '->name' must point to class/struct/union/generic type (1)\nError C2065: 'stream': undeclared identifier (1)\nError C2065: 'currentTestCaseInfo': undeclared identifier (1)\nError C3861: '__catchResult': identifier not found (1151)\nError C2146: syntax error: missing ';' before identifier '__catchResult' (1151)\nError C2039: 'ResultBuilder': is not a member of 'Catch' (1151)\nError C2065: 'ResultBuilder': undeclared identifier (1151)\nError C2065: '__catchResult': undeclared identifier (1153)\nError C2065: '__catchResult': undeclared identifier (1154)\nError C2228: left of '.captureResult' must have class/struct/union (1154)\nError C2065: '__catchResult': undeclared identifier (1155)\nError C2228: left of '.shouldDebugBreak' must have class/struct/union (1155)\nError C2228: left of '.reactWithoutDebugBreak' must have class/struct/union (1155)\nError C2039: 'ResultBuilder': is not a member of 'Catch' (1161)\nError C2065: 'ResultBuilder': undeclared identifier (1161)\nError C2146: syntax error: missing ';' before identifier '__catchResult' (1161)\nError C3861: '__catchResult': identifier not found (1161)\nError C2065: '__catchResult': undeclared identifier (1164)\nError C2228: left of '.captureResult' must have class/struct/union (1165)\nError C2065: '__catchResult': undeclared identifier (1165)\nError C2065: '__catchResult': undeclared identifier (1166)\nError C2228: left of '.shouldDebugBreak' must have class/struct/union (1166)\nError C2228: left of '.reactWithoutDebugBreak' must have class/struct/union (1166)\nError C2039: 'ResultBuilder': is not a member of 'Catch' (1172)\nError C2065: 'ResultBuilder': undeclared identifier (1172)\nError C2146: syntax error: missing ';' before identifier '__catchResult' (1172)\nError C3861: '__catchResult': identifier not found (1172)\nError C2065: '__catchResult': undeclared identifier (1175)\nError C2065: '__catchResult': undeclared identifier (1176)\nError C2228: left of '.captureResult' must have class/struct/union (1176)\nError C2228: left of '.shouldDebugBreak' must have class/struct/union (1177)\nError C2065: '__catchResult': undeclared identifier (1177)\nError C2228: left of '.reactWithoutDebugBreak' must have class/struct/union (1177)\n\n. I don't actually do that anymore I have it placed after the catch include, and i have the latest teamcity reporter from 5 months ago from the include.reporters folder.\n. Version 1.10 seems to work perfectly I took you advise and downloaded version 2.0 and the latest teamcity reporter from the version 2.0 zip file and now it just won't compile:\nWith nominmax defined i get: \nError C2039: 'ResultBuilder': is not a member of 'Catch' (1151)\nError C2065: 'ResultBuilder': undeclared identifier (1151)\nError C2146: syntax error: missing ';' before identifier '__catchResult' (1151)\nError C3861: '__catchResult': identifier not found (1151)\nError C2065: '__catchResult': undeclared identifier (1153)\nError C2065: '__catchResult': undeclared identifier (1154)\nError C2228: left of '.captureResult' must have class/struct/union (1154)\nError C2065: '__catchResult': undeclared identifier (1155)\nError C2228: left of '.shouldDebugBreak' must have class/struct/union (1155)\nError C2228: left of '.reactWithoutDebugBreak' must have class/struct/union (1155)\nError C2039: 'ResultBuilder': is not a member of 'Catch' (1161)\nError C2065: 'ResultBuilder': undeclared identifier (1161)\nError C2146: syntax error: missing ';' before identifier '__catchResult' (1161)\nError C3861: '__catchResult': identifier not found (1161)\nError C2065: '__catchResult': undeclared identifier (1164)\nError C2065: '__catchResult': undeclared identifier (1165)\nError C2228: left of '.captureResult' must have class/struct/union (1165)\nError C2065: '__catchResult': undeclared identifier (1166)\nError C2228: left of '.shouldDebugBreak' must have class/struct/union (1166)\nError C2228: left of '.reactWithoutDebugBreak' must have class/struct/union (1166)\nError C2039: 'ResultBuilder': is not a member of 'Catch' (1172)\nError C2065: 'ResultBuilder': undeclared identifier (1172)\nError C2146: syntax error: missing ';' before identifier '__catchResult' (1172)\nError C3861: '__catchResult': identifier not found (1172)\nError C2065: '__catchResult': undeclared identifier (1175)\nError C2065: '__catchResult': undeclared identifier (1176)\nError C2228: left of '.captureResult' must have class/struct/union (1176)\nError C2065: '__catchResult': undeclared identifier (1177)\nError C2228: left of '.shouldDebugBreak' must have class/struct/union (1177)\nError C2228: left of '.reactWithoutDebugBreak' must have class/struct/union (1177)\n\nAnd without it I get:\nError C2062: type 'double' unexpected (1826)\nError C2062: type 'double' unexpected (1826)\nError C2059: syntax error: ')' (1826)\nError C2059: syntax error: ')' (1826)\nError C2062: type 'double' unexpected (3982)\nError C2059: syntax error: ')' (3982)\nError C2447: '{': missing function header (old-style formal list?) (3982)\nError C2143: syntax error: missing ';' before '{' (3982)\nError C2589: '(': illegal token on right side of '::' (5431)\nError C2059: syntax error: '::' (5431)\nError C2334: unexpected token(s) preceding ':'; skipping apparent function body (7193)\nError C2059: syntax error: ')' (7193)\nError C2143: syntax error: missing ')' before ';' (7204)\nError C2059: syntax error: ')' (7204)\nError C2238: unexpected token(s) preceding ';' (7204)\nError C2143: syntax error: missing ';' before 'namespace' (7211)\nError C2143: syntax error: missing ';' before '{' (7221)\nError C2447: '{': missing function header (old-style formal list?) (7221)\nError C2065: 'result_type': undeclared identifier (7221)\nError C2039: '()': is not a member of 'Catch::RandomNumberGenerator' (7221)\nError C2146: syntax error: missing ')' before identifier 'n' (7221)\nError C2039: '()': is not a member of 'Catch::RandomNumberGenerator' (7224)\nError C2270: '()': modifiers not allowed on nonmember functions (7224)\nError C2059: syntax error: ')' (7225)\nError C2555: 'Catch::Catch::TestRegistry::getAllTests': overriding virtual function return type differs and is not covariant from 'Catch::ITestCaseRegistry::getAllTests' (7258)\nError C3668: 'Catch::Catch::TestRegistry::getAllTestsSorted': method with override specifier 'override' did not override any base class methods (7259)\nError C2555: 'Catch::Catch::TagAliasRegistry::find': overriding virtual function return type differs and is not covariant from 'Catch::ITagAliasRegistry::find' (7338)\nError C2555: 'Catch::Catch::`anonymous-namespace'::RegistryHub::getStartupExceptionRegistry': overriding virtual function return type differs and is not covariant from 'Catch::IRegistryHub::getStartupExceptionRegistry' (7388)\nError C3668: 'Catch::Catch::`anonymous-namespace'::RegistryHub::registerTest': method with override specifier 'override' did not override any base class methods (7399)\nError C2259: 'Catch::Catch::TestRegistry': cannot instantiate abstract class (7413)\nError C2259: 'Catch::Catch::`anonymous-namespace'::RegistryHub': cannot instantiate abstract class (7424)\nError C2440: 'initializing': cannot convert from 'Catch::IMutableContext' to 'Catch::Catch::IMutableContext &' (7657)\nError C2439: 'Catch::Catch::RunContext::m_context': member could not be initialized (7657)\nError C2228: left of '.setRunner' must have class/struct/union (7658)\nError C2027: use of undefined type 'Catch::Catch::IMutableContext' (7658)\nError C2027: use of undefined type 'Catch::Catch::IMutableContext' (7659)\nError C2228: left of '.setConfig' must have class/struct/union (7659)\nError C2027: use of undefined type 'Catch::Catch::IMutableContext' (7660)\nError C2228: left of '.setResultCapture' must have class/struct/union (7660)\nError C2027: use of undefined type 'Catch::Catch::TestCase' (7682)\nError C2228: left of '.getTestCaseInfo' must have class/struct/union (7682)\nError C2512: 'Catch::TestCaseInfo': no appropriate default constructor available (7682)\nError C2227: left of '->getTestCaseInfo' must point to class/struct/union/generic type (7731)\nError C2228: left of '.okToFail' must have class/struct/union (7731)\nError C2027: use of undefined type 'Catch::Catch::TestCase' (7731)\nError C2027: use of undefined type 'Catch::Catch::TestCase' (7812)\nError C2227: left of '->getTestCaseInfo' must point to class/struct/union/generic type (7812)\nError C2228: left of '.name' must have class/struct/union (7813)\nError C2027: use of undefined type 'Catch::Catch::TestCase' (7839)\nError C2227: left of '->getTestCaseInfo' must point to class/struct/union/generic type (7839)\nError C2530: 'testCaseInfo': references must be initialized (7839)\nError C2228: left of '.description' must have class/struct/union (7840)\nError C2512: 'Catch::SectionInfo::SectionInfo': no appropriate default constructor available (7840)\nError C3536: 'testCaseInfo': cannot be used before it is initialized (7840)\nError C2228: left of '.lineInfo' must have class/struct/union (7840)\nError C2228: left of '.name' must have class/struct/union (7840)\nError C2530: 'testInfo': references must be initialized (7847)\nError C2227: left of '->getTestCaseInfo' must point to class/struct/union/generic type (7847)\nError C2027: use of undefined type 'Catch::Catch::TestCase' (7847)\nError C3536: 'testInfo': cannot be used before it is initialized (7852)\nError C2440: '<function-style-cast>': cannot convert from 'initializer list' to 'Catch::TestCaseStats' (7856)\nError C2027: use of undefined type 'Catch::Catch::TestCase' (7881)\nError C2227: left of '->getTestCaseInfo' must point to class/struct/union/generic type (7881)\nError C2530: 'testCaseInfo': references must be initialized (7881)\nError C3536: 'testCaseInfo': cannot be used before it is initialized (7882)\nError C2228: left of '.lineInfo' must have class/struct/union (7882)\nError C2228: left of '.name' must have class/struct/union (7882)\nError C2228: left of '.description' must have class/struct/union (7882)\nError C2512: 'Catch::SectionInfo::SectionInfo': no appropriate default constructor available (7882)\nError C2679: binary '=': no operator found which takes a right-hand operand of type 'initializer list' (or there is no acceptable conversion) (7888)\nError C2228: left of '.lineInfo' must have class/struct/union (7888)\nError C2668: 'Catch::Catch::seedRng': ambiguous call to overloaded function (7890)\nError C2027: use of undefined type 'Catch::Catch::TestCase' (7927)\nError C2227: left of '->invoke' must point to class/struct/union/generic type (7927)\nError C2888: 'Catch::Section::Section(const Catch::SectionInfo &)': symbol cannot be defined within namespace 'Catch' (7955)\nError C2888: 'Catch::Section::~Section(void)': symbol cannot be defined within namespace 'Catch' (7965)\nError C2888: 'Catch::Section::operator bool(void) const': symbol cannot be defined within namespace 'Catch' (7979)\nError C2888: 'Catch::SectionInfo::SectionInfo(const Catch::SourceLineInfo &,const std::string &,const std::string &)': symbol cannot be defined within namespace 'Catch' (7993)\nError C2888: 'Catch::SectionEndInfo::SectionEndInfo(const Catch::SectionInfo &,const Catch::Counts &,double)': symbol cannot be defined within namespace 'Catch' (7999)\nError C2873: 'IStreamingReporterPtr': symbol cannot be used in a using-declaration (8082)\nError C2039: 'IStreamingReporterPtr': is not a member of 'Catch::Catch' (8082)\nError C2873: 'IConfigPtr': symbol cannot be used in a using-declaration (8083)\nError C2039: 'IConfigPtr': is not a member of 'Catch::Catch' (8083)\nError C2873: 'Config': symbol cannot be used in a using-declaration (8084)\nError C2039: 'Config': is not a member of 'Catch::Catch' (8084)\nError C2039: 'ReporterConfig': is not a member of 'Catch::Catch' (8113)\nError C2039: 'Totals': is not a member of 'Catch::Catch' (8116)\nError C2664: 'Catch::Totals Catch::Catch::RunContext::runTest(const Catch::Catch::TestCase &)': cannot convert argument 1 from 'const Catch::TestCase' to 'const Catch::Catch::TestCase &' (8134)\nError C2872: 'TestCase': ambiguous symbol (8145)\nError C2440: 'const_cast': cannot convert from 'const std::vector<Catch::Catch::TestCase,std::allocator<_Ty>>' to 'std::vector<Catch::TestCase,std::allocator<_Ty>> &' (8145)\nError C2530: 'tests': references must be initialized (8145)\nError C3312: no callable 'end' function found for type 'int' (8146)\nError C3536: 'tests': cannot be used before it is initialized (8146)\nError C3312: no callable 'begin' function found for type 'int' (8146)\nError C2065: 'testCase': undeclared identifier (8147)\nError C2228: left of '.tags' must have class/struct/union (8147)\nError C2065: 'testCase': undeclared identifier (8149)\nError C2228: left of '.lineInfo' must have class/struct/union (8149)\nError C2228: left of '.file' must have class/struct/union (8149)\nError C3536: 'tags': cannot be used before it is initialized (8161)\nError C2228: left of '.push_back' must have class/struct/union (8161)\nError C2065: 'testCase': undeclared identifier (8162)\nError C2039: 'cout': is not a member of 'Catch::Catch' (8182)\nError C1003: error count exceeds 100; stopping compilation (8182)\n\n. This is the commented text above: \n\n *  Catch v2.0.0-develop.5\n *  Generated: 2017-10-12 13:05:08.135067\n *  ----------------------------------------------------------\n *  This file has been merged from multiple headers. Please don't edit it directly\n *  Copyright (c) 2017 Two Blue Cubes Ltd. All rights reserved.\n \n *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n */. Thank you! it seems that fakeit the mocking framework was causing the build failure but if I include NOMINMAX it build perfectly if I remove it still experience the same issues as before.. ",
    "DBJDBJ": "OK \n-s, --success\nI am in that ominous silent part of the users community for whom this is not logical .... Ah debate starts :)\nI beg to differ, I want a lot of nicely formated and coloured output this is why I am using testing framework to tell me all is dandy and what is it doing at the given moment. Production code uses no testing framework and THAT is completely silent. I want to see my BDD text on screen or in the log file .. not in the source code ... Also me as an CTO I want them to show me their log files form Testing stage. I do not have time to swim through the sea of tests ... I just want the results ... visible. What is being tested. Not how. That sort of thing ... \n. @horenmar In general you should understand the need to avoid the phrases like \"need\"  and use \"should\" more.  \nI am faced with silent tests which I have not written. I genuinely need to see them. I need all the info on the screen. Catch gives plenty of functionality to display the info for people not writing the tests, just reviewing them. \nOk, how can I try \"CATCH 2\", if there is such a thing?. Many thanks Phil :) \nGlad to see Catch implemented in modern C++ ...\nAll the best. Hi Phil\nCatch 2 looks (very) promising.\nWith my CTO hat on I need first and foremost to mitigate the risks as much as possible. Thus the code that I can see (as a source) is very welcome. C++ \u201call in the headers\u201d is one prime example.\nIn that context I like to see C++/C code that is not multiplatform. Interlaced with macros and a such.\nI think it will be very welcome change to have separate catch2 includes for separate platforms. Easily achieved with pre-compiler tools. Of course we could do it but that would not be supported by the vendor, Catch team in this instance.\nI think this would be one easy change that would greatly improve the Cach2 market penetration.\nKind regards .... Dusan\nSent from Mailhttps://go.microsoft.com/fwlink/?LinkId=550986 for Windows 10\n\nFrom: Phil Nash notifications@github.com\nSent: Wednesday, October 11, 2017 12:17:41 PM\nTo: philsquared/Catch\nCc: Dusan Jovanovic; Mention\nSubject: Re: [philsquared/Catch] VS2017 + C++17 = What's the Catch? = Is it me or is it you who can not make it work? (#1036)\n@DBJDBJhttps://github.com/dbjdbj I'm sorry that Catch's defaults are not exactly what you would want. As I said before, the cast majority of users prefer it the other way around - so we're not going to change that. But it's a simple matter of just passing -s on the command line.\nIf you prefer you could do it in code, too (see https://github.com/philsquared/Catch/blob/master/docs/own-main.md).\nAs for Catch2, it's currently on a branch:\nhttps://github.com/philsquared/Catch/tree/catch2\nOr grab the single header file from here (current at time of writing):\nhttps://github.com/philsquared/Catch/releases/download/v2.0.0-develop.4/catch.hpp\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/philsquared/Catch/issues/1036#issuecomment-335764288, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AAI3A2w6wmvDhIGMwpZAVcDHnpmL6rF5ks5srJXFgaJpZM4PwZgd.\n. ",
    "repi": "Just ran into the same issue today as well but with REQUIRE, having support for thread safety in the assertion & logging macros would be really nice. For us it wouldn't have to be for all tests but some of our tests are specifically there to verify multithreaded code. Sweet, we are all in agreement \ud83d\udc4d . ",
    "mrmcmuffinz": "@philsquared thanks for responding so quickly and I appreciate the feedback. That being said I wouldn't be surprised if my linked list implementation has a few dozen bugs here or there I'm just trying repick up my C++ skills. I will go over the recommended way of writing the tests and see if that correlates with the documentation @martinmoene pointed out. I do have to confess I did find the documentation and just looked predominately at the source examples instead of reading it end to end, that will be another thing on my todo list. To conclude is this behavior you described @philsquared  in the documentation @martinmoene pointed out? If so then I think we can just close this as user error. . ",
    "sgrottel": "Ah. I see. I wasn't aware of that. So, it's unsigned int then, I guess.. ",
    "eiennohito": "Listeners would require me to build my own state and bring it around if I understand the API right. Something more lightweight would be nicer.. I agree on your point, but I was not talking about finding out the result of previous section or test. I would like to find out the result of current section or test.\nAnd I would like to do the logging in the destructor of something like TestingEnvironment which basically holds the state of everything else, so it goes out of scope after all the asserts would be run. But wiring it inside the Listener machinery would be difficult because it lives inside the test/session scope.. ",
    "egorpugin": "I see, thanks! Closing this.\n\nperhaps just have REQUIRE_TIME open a scope and do the timer inline around the REQUIRE directly?\n\nSure, just reusing my get_time function in the example.. That's nice, but your code is different from the original.. I see, thank you. Closing this.... ",
    "retokid": "I'm not sure I understand horenmar's comment, but if we are comparing pointers the output should print pointer values, not strings. Furthermore, in that case, the example given in the reference document:\nCHECK( str == \"string value\" );\nis extremely misleading and should be removed.\nLast but not least, how would I then compare strings ? I'm trying to migrate from BOOST and these are 90% of my tests.... OK, in any case thanks to both for the answers, I appreciate the time you take for answering my rather basic questions.. Using standard libraries is not an option for me, I'm writing embedded code that has to run in 32k code 2k ram. This is the reason I only deal with C strings. I temporarily solved the issue with a:\n#define CHECKS(a, b) CHECK(std::string(a) == b)\nBut shouldn't you simply add a macro to the framework to solve the above mentioned ambiguity ?. Thanks Phil for the hint, I was indeed looking at Matchers to understand if they could help.\nMy issue with this cased stemmed from :\n- the fact I am migrating from BOOST_TEST, in BOOST comparing two const char * by == will compare the string contents, \n- the documentation of Catch where we have this CHECK(string = \"...\") example, and my misunderstanding that string was not standing for a C string but a std:string (I'm not familiar with modern C++ libraries).\nSince I had the issue, understood and solved it, I came to one conclusion : the idea that what's inside the CHECK macro should behave exactly as outside is very string principle.\nWith regards to a CHECK failing because to const char * are not equal, and given that:\n- it is extremely simple to add the contents of these strings to the output with the streaming MACROS,\n- the output is most of the time only relevant when such tests fail,\nI  come to the conclusion you should print the pointer values, and not their content.\nMy opinion only, based on my limited understanding, and I still fully respect your choice to do it the other way around.. Thanks Phil for the hint, I was indeed looking at Matchers to understand if they could help.\nMy issue with this cased stemmed from :\n- the fact I am migrating from BOOST_TEST, in BOOST comparing two const char * by == will compare the string contents, \n- the documentation of Catch where we have this CHECK(string = \"...\") example, and my misunderstanding that string was not standing for a C string but a std:string (I'm not familiar with modern C++ libraries).\nSince I had the issue, understood and solved it, I came to one conclusion : the idea that what's inside the CHECK macro should behave exactly as outside is very string principle.\nWith regards to a CHECK failing because to const char * are not equal, and given that:\n- it is extremely simple to add the contents of these strings to the output with the streaming MACROS,\n- the output is most of the time only relevant when such tests fail,\nI  come to the conclusion you should print the pointer values, and not their content.\nMy opinion only, based on my limited understanding, and I still fully respect your choice to do it the other way around.. ",
    "bigboynaruto": "So is it ok If I create this flag?. Ok.. No, I just don't have Windows, so I can't test it.. ",
    "tiagomacarios": "Seems a bit suboptimal to have people to run the compiler suppressing an error for backward compatibility. Is Catch2 ready for production?. ",
    "alwaysmpe": "I've been likewise looking at this today due to slowing tests, came here to raise a similar query. the conclusion I've reached so far is that it is possible to refactor each WHEN block into different functions (my purpose was to validate each stage of an iterative process so a recursive function) but that is undesirable. Each when/then statement shows up on the command line if any statements fail but does behave as desired. It's likewise possible to always perform each step and only validate the results, i.e. have \"When no. 1\" and \"When no. 2\" outside of the when/and_when block and only have the when/then/require sections run once but if, as is for my purposes, when 1, when 2...N are slow operations repeating them N times is not a feasible solution.. It seems this has now been implemented with DYNAMIC_SECTION and given/when/then all forward onto this, so I'm closing.. ",
    "KKoovalsky": "Yeah, I put this single steps into TEST_CASE and they are executed sequentially (according to the example in my previous post):\n```\n// Given some background\ngive_some_background();\n// When something happens\nREQUIRE_NO_THROW(do_something());\n// Then the result should be\nREQUIRE(get_some_val() == 15);\n// And when other things happen\n...\n```\nI don't care about slow code execution because I test time dependent operations. My only goal is to provide readability.\nAnother workaround could be to deceive auto-formatter (like clang-format) in some way:\nGIVEN(\"Some background\") {\n    WHEN(\"Something happens\") {\n        THEN(\"The result should be\") {\n        ...\n    AND_WHEN(\"Other things happen\") {\n        THEN(\"The result will change\") {\n        ...\n    AND_WHEN(\"The app's stack overflows\") {\n    THEN(\"There will be undefined behaviour\") {\n        ...\n    }\n    }}}}}\n}. ",
    "kennymalac": "This is really painful to deal with!. ",
    "bnason-nf": "Hi @horenmar,\nWould you maybe be willing to add a minor patch something like the one below to deal with projects that use /Wall but include catch.hpp? If so I'm happy to create a new issue and/or a pull request for that.\nThanks,\nBenbuck\n```\ndiff --git a/single_include/catch2/catch.hpp b/single_include/catch2/catch.hpp\nindex b1b2411d..2f690494 100644\n--- a/single_include/catch2/catch.hpp\n+++ b/single_include/catch2/catch.hpp\n@@ -43,6 +43,9 @@\n #    pragma GCC diagnostic push\n #    pragma GCC diagnostic ignored \"-Wunused-variable\"\n #    pragma GCC diagnostic ignored \"-Wpadded\"\n+#elif defined _MSC_VER\n+#    pragma warning(push, 3)\n+#    pragma warning(disable:5045) // Compiler will insert Spectre mitigation for memory load if /Qspectre switch specified\n #endif\n // end catch_suppress_warnings.h\n #if defined(CATCH_CONFIG_MAIN) || defined(CATCH_CONFIG_RUNNER)\n@@ -1652,6 +1655,7 @@ struct ratio_string {\n #pragma warning(disable:4018) // more \"signed/unsigned mismatch\"\n #pragma warning(disable:4312) // Converting int to T* using reinterpret_cast (issue on x64 platform)\n #pragma warning(disable:4180) // qualifier applied to function type has no meaning\n+#pragma warning(disable:4868) // compiler may not enforce left-to-right evaluation order in braced initializer list\n #endif\nnamespace Catch {\n@@ -14354,6 +14358,8 @@ using Catch::Detail::Approx;\n #    endif\n #elif defined GNUC\n #    pragma GCC diagnostic pop\n+#elif defined _MSC_VER\n+#    pragma warning(pop)\n #endif\n// end catch_reenable_warnings.h\n```. ",
    "catchorgadmin": "Give me a chance!\n;-)\nDone!. ",
    "c1moore": "@horenmar That is exactly what I wanted and the notation I expected.  Could you add documentation for that on the \"Tutorial\" page?  It goes into how to perform set-up, but I see no mention of how to actually handle teardown (anywhere).  Like I said, that notation is what I expected, but I couldn't confirm.\nAlso, when are the constructor and destructors for Fixtures called?  Are these executed at the beginning/end of each test, respectively?. @philsquared I don't quite remember why I was asking about the Fixture lifecycle, but I think you have my concerns covered.  The only clarification I would add to your last comment, which is hinted at, is that fixture destructors are invoked even if the test fails.\nI haven't looked at the documentation recently, but expanding it in this area would definitely be helpful if you haven't already.  While a given approach may be traditional and somewhat expected, it's always nice to have confirmation.  I hate making too many assumptions about how something works, especially when the assumptions are made about the testing framework, which could cause my tests to falsely pass.. ",
    "intmainreturn00": "I would really appreciate the same comment about BDD-styled sections - where to place teardown in such case? . There is also an additional clarification needed - how to still do teardown if REQUIRE section goes wrong? I can't see another way for guaranteed resource finalization in that case, except for RAII or switch to CHECK everywhere. \nBut in some cases, I can't go with just RAII (examples - multithreaded tests). . ",
    "garyo": "I came to this question because I'm looking for a fixture that will get run only once before a set of sections (a \"test-case scoped\" fixture, sort of). Say I have this:\nTEST_CASE(\"foo\", \"[foo]\") {\n  setup();\n  SECTION(\"sec1\") { ...}\n  SECTION(\"sec2\") { ...}\n  teardown();\n}\nThe above runs setup/teardown around each section. I thought the way to do what I want would be this:\nTEST_CASE(\"foo\", \"[foo]\") {\n  setup();\n  SECTION(\"everything\") {\n    inner_setup();\n    SECTION(\"sec1\") { ...}\n    SECTION(\"sec2\") { ...}\n  }\n  teardown();\n}\nbut that doesn't seem to work -- in fact it's the opposite, it seems to run both setup() and inner_setup() before each inner section! Is there any way to get what I'm looking for?. That's clever! Thanks.. ",
    "doubleday": "Ah yes sorry. Of course epsilon is pretty far from 0...\nBut still (just because as of a sudden my tests fail..).\nIs this also expected behaviour?\nNumericsTest.cpp:78: FAILED:\n  CHECK( 0.0f == Approx(std::nextafter(0.0f, 1.0f)) )\nwith expansion:\n  0.0f == Approx( 0.0 ) . I just did a test with google's version for float comparisons...\nwhich as a test looks (and works) like this:\nCHECK(Float(0.0f).AlmostEquals(Float(std::nextafter(0.0f, 1.0f))));\nFor this test I extracted the comparison functionality only:\nhttps://gist.github.com/doubleday/08490faeb2885ac35dcd6170712de07f\nThe IEEE bit magic is way beyond me but maybe it could be used as inspiration ....\n. Thanks for the details.\nI'm testing SIMD (SSE,NEON) code against a scalar CPU version (the truth). It's in the audio domain and values are in [-1,1] and often in the problematic 0 range. \nI'll probably either go with some version of ULP diff or settle on some sensible margin for the tests. . Well I just copied them from the header. . But if you don't have access to a MAC this is one version for iOS: \nhttps://github.com/mstg/iOS-full-sdk/blob/master/iPhoneOS9.3.sdk/usr/include/TargetConditionals.h\n. ",
    "diablol1": "I'm using cmake. Here's Project.zip on which I was trying to compile test and errors  https://pastebin.com/3nur6Y0U. Compiling speed is normal now, even though I didn't change anything. Here's similar Project.zip\n. But this error still occurs. Yes, thanks, but \"Linking CXX executable Tests.exe\" lasts almost 2 minutes. Project.zip\n. I figured it out. This takes about 2 minutes of linking when using gcc from Msys, but works great with Mingw. Yes. ",
    "rcook": "Apologies if this behaviour change is by design.. That's right. It sounds like this behaviour change is by design then.. ",
    "codecov[bot]": "Codecov Report\n\nMerging #1091 into master will decrease coverage by 0.14%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1091      +/-\n==========================================\n- Coverage   82.29%   82.15%   -0.15%   \n==========================================\n  Files         122      122            \n  Lines        4723     4673      -50   \n==========================================\n- Hits         3887     3839      -48   \n+ Misses        836      834       -2\n```\n. # Codecov Report\n\nMerging #1136 into master will increase coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1136      +/-\n==========================================\n+ Coverage   81.39%   81.43%   +0.03%   \n==========================================\n  Files         121      121            \n  Lines        4698     4707       +9   \n==========================================\n+ Hits         3824     3833       +9   \n  Misses        874      874\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| include/internal/catch_list.cpp | 95.08% <0%> (+0.04%) | :arrow_up: |\n| include/internal/catch_test_case_tracker.cpp | 91.41% <0%> (+0.04%) | :arrow_up: |\n| include/internal/catch_test_case_info.cpp | 91.86% <0%> (+0.06%) | :arrow_up: |\n| include/reporters/catch_reporter_console.cpp | 67.53% <0%> (+0.07%) | :arrow_up: |\n| include/reporters/catch_reporter_xml.cpp | 88.23% <0%> (+0.07%) | :arrow_up: |\n| include/reporters/catch_reporter_compact.cpp | 76.64% <0%> (+0.11%) | :arrow_up: |\n| include/internal/catch_test_spec_parser.cpp | 86.36% <0%> (+0.2%) | :arrow_up: |\n| include/internal/catch_session.cpp | 56.49% <0%> (+0.24%) | :arrow_up: |\n| include/internal/catch_context.cpp | 90.9% <0%> (+0.28%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fc88313...07891c5. Read the comment docs.\n. # Codecov Report\nMerging #1145 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1145   +/-\n=======================================\n  Coverage   80.08%   80.08%         \n=======================================\n  Files         119      119         \n  Lines        3389     3389         \n=======================================\n  Hits         2714     2714         \n  Misses        675      675\n```\n. # Codecov Report\n\nMerging #1150 into master will decrease coverage by 1.2%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1150      +/-\n==========================================\n- Coverage   82.68%   81.47%   -1.21%   \n==========================================\n  Files          95      121      +26   \n  Lines        4158     4740     +582   \n==========================================\n+ Hits         3438     3862     +424   \n- Misses        720      878     +158\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| include/internal/catch_wildcard_pattern.h | 50% <0%> (-50%) | :arrow_down: |\n| include/internal/catch_test_case_tracker.h | 72.72% <0%> (-27.28%) | :arrow_down: |\n| include/internal/catch_context.h | 80% <0%> (-20%) | :arrow_down: |\n| include/internal/catch_assertionhandler.h | 75% <0%> (-13.89%) | :arrow_down: |\n| include/internal/catch_fatal_condition.cpp | 76.36% <0%> (-8.83%) | :arrow_down: |\n| include/internal/catch_xmlwriter.h | 91.66% <0%> (-8.34%) | :arrow_down: |\n| include/reporters/catch_reporter_compact.cpp | 76.64% <0%> (-5.71%) | :arrow_down: |\n| include/internal/catch_tag_alias_registry.cpp | 78.57% <0%> (-5.43%) | :arrow_down: |\n| include/internal/catch_test_spec_parser.h | 90.47% <0%> (-4.53%) | :arrow_down: |\n| include/internal/catch_matchers.h | 95.77% <0%> (-4.23%) | :arrow_down: |\n| ... and 79 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f0f40a0...7a7e8d5. Read the comment docs.\n. # Codecov Report\nMerging #1155 into master will increase coverage by 2.61%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1155      +/-\n==========================================\n+ Coverage   79.03%   81.65%   +2.61%   \n==========================================\n  Files         115      121       +6   \n  Lines        3368     4687    +1319   \n==========================================\n+ Hits         2662     3827    +1165   \n- Misses        706      860     +154\n```\n. # Codecov Report\n\nMerging #1163 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1163      +/-\n=========================================\n+ Coverage   81.58%   81.6%   +0.01%   \n=========================================\n  Files         121     122       +1   \n  Lines        4693    4697       +4   \n=========================================\n+ Hits         3829    3833       +4   \n  Misses        864     864\n```\n. # Codecov Report\n\nMerging #1167 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1167   +/-\n=======================================\n  Coverage   81.65%   81.65%         \n=======================================\n  Files         121      121         \n  Lines        4689     4689         \n=======================================\n  Hits         3829     3829         \n  Misses        860      860\n```\n. # Codecov Report\n\nMerging #1170 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1170   +/-\n=======================================\n  Coverage   81.62%   81.62%         \n=======================================\n  Files         122      122         \n  Lines        4696     4696         \n=======================================\n  Hits         3833     3833         \n  Misses        863      863\n```\n. # Codecov Report\n\nMerging #1171 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1171   +/-\n=======================================\n  Coverage   81.65%   81.65%         \n=======================================\n  Files         121      121         \n  Lines        4689     4689         \n=======================================\n  Hits         3829     3829         \n  Misses        860      860\n```\n. # Codecov Report\n\nMerging #1173 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1173   +/-\n======================================\n  Coverage    81.6%   81.6%         \n======================================\n  Files         122     122         \n  Lines        4697    4697         \n======================================\n  Hits         3833    3833         \n  Misses        864     864\n```\n. # Codecov Report\n\nMerging #1176 into master will decrease coverage by 2.07%.\nThe diff coverage is 34.48%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1176      +/-\n==========================================\n- Coverage   81.35%   79.28%   -2.08%   \n==========================================\n  Files         127      122       -5   \n  Lines        4822     4696     -126   \n==========================================\n- Hits         3923     3723     -200   \n- Misses        899      973      +74\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| include/internal/catch_tostring.cpp | 11.97% <0%> (-70.47%) | :arrow_down: |\n| include/internal/catch_tostring.h | 91.6% <100%> (-0.99%) | :arrow_down: |\n| include/internal/catch_config.hpp | 0% <0%> (-50%) | :arrow_down: |\n| include/internal/catch_stringref.cpp | 61.53% <0%> (-17.73%) | :arrow_down: |\n| ...e/internal/catch_exception_translator_registry.cpp | 56.25% <0%> (-11.5%) | :arrow_down: |\n| ...lude/internal/catch_startup_exception_registry.cpp | 27.27% <0%> (-6.07%) | :arrow_down: |\n| include/internal/catch_config.cpp | 82.5% <0%> (-4.17%) | :arrow_down: |\n| include/internal/catch_interfaces_exception.h | 76.47% <0%> (-3.53%) | :arrow_down: |\n| include/internal/catch_xmlwriter.cpp | 83.08% <0%> (-3.48%) | :arrow_down: |\n| ... and 40 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d2a130f...f14e49e. Read the comment docs.\n. # Codecov Report\nMerging #1179 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1179      +/-\n==========================================\n- Coverage   81.89%   81.89%   -0.01%   \n==========================================\n  Files         122      122            \n  Lines        4696     4694       -2   \n==========================================\n- Hits         3846     3844       -2   \n  Misses        850      850\n```\n. # Codecov Report\n\nMerging #1181 into master will decrease coverage by 0.25%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1181      +/-\n==========================================\n- Coverage   82.15%   81.89%   -0.26%   \n==========================================\n  Files         122      122            \n  Lines        4673     4696      +23   \n==========================================\n+ Hits         3839     3846       +7   \n- Misses        834      850      +16\n```\n. # Codecov Report\n\nMerging #1185 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1185   +/-\n=======================================\n  Coverage   82.16%   82.16%         \n=======================================\n  Files         122      122         \n  Lines        4715     4715         \n=======================================\n  Hits         3874     3874         \n  Misses        841      841\n```\n. # Codecov Report\n\nMerging #1199 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1199   +/-\n=======================================\n  Coverage   82.25%   82.25%         \n=======================================\n  Files         122      122         \n  Lines        4716     4716         \n=======================================\n  Hits         3879     3879         \n  Misses        837      837\n```\n. # Codecov Report\n\nMerging #1203 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1203   +/-\n=======================================\n  Coverage   82.25%   82.25%         \n=======================================\n  Files         122      122         \n  Lines        4716     4716         \n=======================================\n  Hits         3879     3879         \n  Misses        837      837\n```\n. # Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (master@b111755). Click here to learn what that means.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1206   +/-\n=========================================\n  Coverage          ?   82.27%         \n=========================================\n  Files             ?      122         \n  Lines             ?     4721         \n  Branches          ?        0         \n=========================================\n  Hits              ?     3884         \n  Misses            ?      837         \n  Partials          ?        0\n```\n. # Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (master@d38f782). Click here to learn what that means.\nThe diff coverage is 0%.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1208   +/-\n=========================================\n  Coverage          ?   82.27%         \n=========================================\n  Files             ?      122         \n  Lines             ?     4721         \n  Branches          ?        0         \n=========================================\n  Hits              ?     3884         \n  Misses            ?      837         \n  Partials          ?        0\n```\n. # Codecov Report\n\nMerging #1216 into master will decrease coverage by 0.09%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1216     +/-\n=========================================\n- Coverage   82.24%   82.15%   -0.1%   \n=========================================\n  Files         122      122           \n  Lines        4726     4673     -53   \n=========================================\n- Hits         3887     3839     -48   \n+ Misses        839      834      -5\n```\n. # Codecov Report\n\nMerging #1223 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1223      +/-\n==========================================\n+ Coverage   82.15%   82.16%   +0.01%   \n==========================================\n  Files         122      122            \n  Lines        4673     4676       +3   \n==========================================\n+ Hits         3839     3842       +3   \n  Misses        834      834\n```\n. # Codecov Report\n\nMerging #1228 into master will decrease coverage by 2.61%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1228      +/-\n==========================================\n- Coverage   82.15%   79.54%   -2.62%   \n==========================================\n  Files         122      110      -12   \n  Lines        4673     3221    -1452   \n==========================================\n- Hits         3839     2562    -1277   \n+ Misses        834      659     -175\n```\n. # Codecov Report\n\nMerging #1239 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1239   +/-\n=======================================\n  Coverage   82.29%   82.29%         \n=======================================\n  Files         122      122         \n  Lines        4723     4723         \n=======================================\n  Hits         3887     3887         \n  Misses        836      836\n```\n. # Codecov Report\n\nMerging #1244 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1244   +/-\n=======================================\n  Coverage   82.25%   82.25%         \n=======================================\n  Files         124      124         \n  Lines        4761     4761         \n=======================================\n  Hits         3916     3916         \n  Misses        845      845\n```\n. # Codecov Report\n\nMerging #1245 into master will increase coverage by 0.02%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1245      +/-\n==========================================\n+ Coverage   82.25%   82.27%   +0.02%   \n==========================================\n  Files         124      124            \n  Lines        4761     4761            \n==========================================\n+ Hits         3916     3917       +1   \n+ Misses        845      844       -1\n```\n. # Codecov Report\n\nMerging #1250 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1250   +/-\n=======================================\n  Coverage   82.25%   82.25%         \n=======================================\n  Files         124      124         \n  Lines        4761     4761         \n=======================================\n  Hits         3916     3916         \n  Misses        845      845\n```\n. # Codecov Report\n\nMerging #1254 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1254   +/-\n=======================================\n  Coverage   82.25%   82.25%         \n=======================================\n  Files         124      124         \n  Lines        4761     4761         \n=======================================\n  Hits         3916     3916         \n  Misses        845      845\n```\n. # Codecov Report\n\nMerging #1256 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1256   +/-\n=======================================\n  Coverage   82.25%   82.25%         \n=======================================\n  Files         124      124         \n  Lines        4761     4761         \n=======================================\n  Hits         3916     3916         \n  Misses        845      845\n```\n. # Codecov Report\n\nMerging #1258 into master will decrease coverage by 2.65%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1258      +/-\n==========================================\n- Coverage   82.27%   79.62%   -2.66%   \n==========================================\n  Files         124      111      -13   \n  Lines        4761     3273    -1488   \n==========================================\n- Hits         3917     2606    -1311   \n+ Misses        844      667     -177\n```\n. # Codecov Report\n\nMerging #1261 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1261      +/-\n==========================================\n+ Coverage   79.78%   79.85%   +0.07%   \n==========================================\n  Files         113      113            \n  Lines        3279     3290      +11   \n==========================================\n+ Hits         2616     2627      +11   \n  Misses        663      663\n```\n. # Codecov Report\n\nMerging #1263 into master will increase coverage by 0.83%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1263      +/-\n==========================================\n+ Coverage   81.43%   82.27%   +0.83%   \n==========================================\n  Files         126      124       -2   \n  Lines        4810     4761      -49   \n==========================================\n  Hits         3917     3917            \n+ Misses        893      844      -49\n```\n. # Codecov Report\n\nMerging #1266 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1266   +/-\n=======================================\n  Coverage   82.27%   82.27%         \n=======================================\n  Files         124      124         \n  Lines        4761     4761         \n=======================================\n  Hits         3917     3917         \n  Misses        844      844\n```\n. # Codecov Report\n\nMerging #1271 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1271   +/-\n=======================================\n  Coverage   81.35%   81.35%         \n=======================================\n  Files         127      127         \n  Lines        4822     4822         \n=======================================\n  Hits         3923     3923         \n  Misses        899      899\n```\n. # Codecov Report\n\nMerging #1272 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1272   +/-\n=======================================\n  Coverage   81.43%   81.43%         \n=======================================\n  Files         126      126         \n  Lines        4810     4810         \n=======================================\n  Hits         3917     3917         \n  Misses        893      893\n```\n. # Codecov Report\n\nMerging #1276 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1276   +/-\n=======================================\n  Coverage   81.43%   81.43%         \n=======================================\n  Files         126      126         \n  Lines        4810     4810         \n=======================================\n  Hits         3917     3917         \n  Misses        893      893\n```\n. # Codecov Report\n\nMerging #1277 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1277   +/-\n=======================================\n  Coverage   81.43%   81.43%         \n=======================================\n  Files         126      126         \n  Lines        4810     4810         \n=======================================\n  Hits         3917     3917         \n  Misses        893      893\n```\n. # Codecov Report\n\nMerging #1281 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1281   +/-\n=======================================\n  Coverage   81.43%   81.43%         \n=======================================\n  Files         126      126         \n  Lines        4810     4810         \n=======================================\n  Hits         3917     3917         \n  Misses        893      893\n```\n. # Codecov Report\n\nMerging #1283 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1283   +/-\n=======================================\n  Coverage   81.43%   81.43%         \n=======================================\n  Files         126      126         \n  Lines        4810     4810         \n=======================================\n  Hits         3917     3917         \n  Misses        893      893\n```\n. # Codecov Report\n\nMerging #1284 into master will increase coverage by 1.71%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1284      +/-\n==========================================\n+ Coverage   79.73%   81.44%   +1.71%   \n==========================================\n  Files         113      127      +14   \n  Lines        3276     4813    +1537   \n==========================================\n+ Hits         2612     3920    +1308   \n- Misses        664      893     +229\n```\n. # Codecov Report\n\nMerging #1289 into master will increase coverage by 1.73%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1289      +/-\n==========================================\n+ Coverage   79.73%   81.46%   +1.73%   \n==========================================\n  Files         113      126      +13   \n  Lines        3276     4816    +1540   \n==========================================\n+ Hits         2612     3923    +1311   \n- Misses        664      893     +229\n```\n. # Codecov Report\n\nMerging #1293 into master will increase coverage by 1.62%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1293      +/-\n==========================================\n+ Coverage   79.73%   81.36%   +1.62%   \n==========================================\n  Files         113      127      +14   \n  Lines        3276     4822    +1546   \n==========================================\n+ Hits         2612     3923    +1311   \n- Misses        664      899     +235\n```\n. # Codecov Report\n\nMerging #1294 into master will increase coverage by 1.77%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1294      +/-\n==========================================\n+ Coverage   79.62%   81.39%   +1.77%   \n==========================================\n  Files         113      127      +14   \n  Lines        3268     4832    +1564   \n==========================================\n+ Hits         2602     3933    +1331   \n- Misses        666      899     +233\n```\n. # Codecov Report\n\nMerging #1296 into master will decrease coverage by 0.1%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1296     +/-\n=========================================\n- Coverage   81.46%   81.36%   -0.1%   \n=========================================\n  Files         127      127           \n  Lines        4816     4822      +6   \n=========================================\n  Hits         3923     3923           \n- Misses        893      899      +6\n```\n. # Codecov Report\n\nMerging #1303 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1303   +/-\n=======================================\n  Coverage   81.36%   81.36%         \n=======================================\n  Files         127      127         \n  Lines        4822     4822         \n=======================================\n  Hits         3923     3923         \n  Misses        899      899\n```\n. # Codecov Report\n\nMerging #1306 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1306   +/-\n=======================================\n  Coverage   81.36%   81.36%         \n=======================================\n  Files         127      127         \n  Lines        4822     4822         \n=======================================\n  Hits         3923     3923         \n  Misses        899      899\n```\n. # Codecov Report\n\nMerging #1310 into master will increase coverage by 3.69%.\nThe diff coverage is 85.71%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1310      +/-\n==========================================\n+ Coverage   78.87%   82.56%   +3.69%   \n==========================================\n  Files         113      102      -11   \n  Lines        3299     4307    +1008   \n==========================================\n+ Hits         2602     3556     +954   \n- Misses        697      751      +54\n```\n. # Codecov Report\n\nMerging #1314 into dev-new-cmake will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@              Coverage Diff               @@\ndev-new-cmake    #1314   +/-\n==============================================\n  Coverage          78.87%   78.87%         \n==============================================\n  Files                114      114         \n  Lines               3304     3304         \n==============================================\n  Hits                2606     2606         \n  Misses               698      698\n```\n. # Codecov Report\n\nMerging #1320 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1320   +/-\n=======================================\n  Coverage   78.87%   78.87%         \n=======================================\n  Files         113      113         \n  Lines        3299     3299         \n=======================================\n  Hits         2602     2602         \n  Misses        697      697\n```\n. # Codecov Report\n\nMerging #1332 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1332   +/-\n=======================================\n  Coverage   78.87%   78.87%         \n=======================================\n  Files         113      113         \n  Lines        3299     3299         \n=======================================\n  Hits         2602     2602         \n  Misses        697      697\n```\n. # Codecov Report\n\nMerging #1333 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1333   +/-\n=======================================\n  Coverage   78.87%   78.87%         \n=======================================\n  Files         113      113         \n  Lines        3299     3299         \n=======================================\n  Hits         2602     2602         \n  Misses        697      697\n```\n. # Codecov Report\n\nMerging #1336 into master will decrease coverage by 1.24%.\nThe diff coverage is 72.73%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1336      +/-\n==========================================\n- Coverage   80.11%   78.87%   -1.24%   \n==========================================\n  Files         119      113       -6   \n  Lines        3384     3299      -85   \n==========================================\n- Hits         2711     2602     -109   \n- Misses        673      697      +24\n```\n. # Codecov Report\n\nMerging #1357 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1357   +/-\n=======================================\n  Coverage   79.78%   79.78%         \n=======================================\n  Files         113      113         \n  Lines        3279     3279         \n=======================================\n  Hits         2616     2616         \n  Misses        663      663\n```\n. # Codecov Report\n\nMerging #1362 into master will decrease coverage by 0.33%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1362      +/-\n==========================================\n- Coverage   80.11%   79.78%   -0.33%   \n==========================================\n  Files         119      113       -6   \n  Lines        3384     3279     -105   \n==========================================\n- Hits         2711     2616      -95   \n+ Misses        673      663      -10\n```\n. # Codecov Report\n\nMerging #1363 into master will increase coverage by 0.3%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1363     +/-\n=========================================\n+ Coverage   79.78%   80.08%   +0.3%   \n=========================================\n  Files         113      118      +5   \n  Lines        3279     3378     +99   \n=========================================\n+ Hits         2616     2705     +89   \n- Misses        663      673     +10\n```\n. # Codecov Report\n\nMerging #1365 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1365   +/-\n=======================================\n  Coverage   79.78%   79.78%         \n=======================================\n  Files         113      113         \n  Lines        3279     3279         \n=======================================\n  Hits         2616     2616         \n  Misses        663      663\n```\n. # Codecov Report\n\nMerging #1370 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1370   +/-\n=======================================\n  Coverage   80.08%   80.08%         \n=======================================\n  Files         118      118         \n  Lines        3378     3378         \n=======================================\n  Hits         2705     2705         \n  Misses        673      673\n```\n. # Codecov Report\n\nMerging #1371 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1371   +/-\n=======================================\n  Coverage   80.08%   80.08%         \n=======================================\n  Files         118      118         \n  Lines        3378     3378         \n=======================================\n  Hits         2705     2705         \n  Misses        673      673\n```\n. # Codecov Report\n\nMerging #1372 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1372   +/-\n=======================================\n  Coverage   80.08%   80.08%         \n=======================================\n  Files         118      118         \n  Lines        3378     3378         \n=======================================\n  Hits         2705     2705         \n  Misses        673      673\n```\n. # Codecov Report\n\nMerging #1376 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1376   +/-\n=======================================\n  Coverage   80.11%   80.11%         \n=======================================\n  Files         119      119         \n  Lines        3384     3384         \n=======================================\n  Hits         2711     2711         \n  Misses        673      673\n```\n. # Codecov Report\n\nMerging #1377 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1377   +/-\n=======================================\n  Coverage   80.11%   80.11%         \n=======================================\n  Files         119      119         \n  Lines        3384     3384         \n=======================================\n  Hits         2711     2711         \n  Misses        673      673\n```\n. # Codecov Report\n\nMerging #1380 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1380   +/-\n=======================================\n  Coverage   80.08%   80.08%         \n=======================================\n  Files         119      119         \n  Lines        3389     3389         \n=======================================\n  Hits         2714     2714         \n  Misses        675      675\n```\n. # Codecov Report\n\nMerging #1380 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1380      +/-\n==========================================\n- Coverage   80.11%   80.08%   -0.03%   \n==========================================\n  Files         119      119            \n  Lines        3384     3389       +5   \n==========================================\n+ Hits         2711     2714       +3   \n- Misses        673      675       +2\n```\n. # Codecov Report\n\nMerging #1392 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1392   +/-\n=======================================\n  Coverage   80.08%   80.08%         \n=======================================\n  Files         119      119         \n  Lines        3389     3389         \n=======================================\n  Hits         2714     2714         \n  Misses        675      675\n```\n. # Codecov Report\n\nMerging #1395 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1395   +/-\n=======================================\n  Coverage   80.08%   80.08%         \n=======================================\n  Files         119      119         \n  Lines        3389     3389         \n=======================================\n  Hits         2714     2714         \n  Misses        675      675\n```\n. # Codecov Report\n\nMerging #1397 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1397   +/-\n=======================================\n  Coverage   80.08%   80.08%         \n=======================================\n  Files         119      119         \n  Lines        3389     3389         \n=======================================\n  Hits         2714     2714         \n  Misses        675      675\n```\n. # Codecov Report\n\nMerging #1399 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1399      +/-\n==========================================\n+ Coverage   80.08%   80.14%   +0.06%   \n==========================================\n  Files         119      119            \n  Lines        3389     3389            \n==========================================\n+ Hits         2714     2716       +2   \n+ Misses        675      673       -2\n```\n. # Codecov Report\n\nMerging #1401 into master will not change coverage.\nThe diff coverage is 60%.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1401   +/-\n=======================================\n  Coverage   80.08%   80.08%         \n=======================================\n  Files         119      120    +1   \n  Lines        3389     3389         \n=======================================\n  Hits         2714     2714         \n  Misses        675      675\n```\n. # Codecov Report\n\nMerging #1404 into master will decrease coverage by 0.04%.\nThe diff coverage is 33.33%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1404      +/-\n==========================================\n- Coverage   80.08%   80.04%   -0.04%   \n==========================================\n  Files         119      119            \n  Lines        3389     3392       +3   \n==========================================\n+ Hits         2714     2715       +1   \n- Misses        675      677       +2\n```\n. # Codecov Report\n\nMerging #1405 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1405      +/-\n==========================================\n- Coverage   80.14%   80.11%   -0.03%   \n==========================================\n  Files         119      119            \n  Lines        3389     3389            \n==========================================\n- Hits         2716     2715       -1   \n- Misses        673      674       +1\n```\n. # Codecov Report\n\nMerging #1409 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1409   +/-\n=======================================\n  Coverage   80.22%   80.22%         \n=======================================\n  Files         120      120         \n  Lines        3392     3392         \n=======================================\n  Hits         2721     2721         \n  Misses        671      671\n```\n. # Codecov Report\n\nMerging #1411 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1411      +/-\n==========================================\n+ Coverage   80.22%   80.23%   +0.01%   \n==========================================\n  Files         120      120            \n  Lines        3392     3394       +2   \n==========================================\n+ Hits         2721     2723       +2   \n  Misses        671      671\n```\n. # Codecov Report\n\nMerging #1412 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1412   +/-\n=======================================\n  Coverage   80.23%   80.23%         \n=======================================\n  Files         120      120         \n  Lines        3394     3394         \n=======================================\n  Hits         2723     2723         \n  Misses        671      671\n```\n. # Codecov Report\n\nMerging #1414 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1414   +/-\n=======================================\n  Coverage   80.23%   80.23%         \n=======================================\n  Files         120      120         \n  Lines        3394     3394         \n=======================================\n  Hits         2723     2723         \n  Misses        671      671\n```\n. # Codecov Report\n\nMerging #1414 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1414   +/-\n=======================================\n  Coverage   80.23%   80.23%         \n=======================================\n  Files         120      120         \n  Lines        3394     3394         \n=======================================\n  Hits         2723     2723         \n  Misses        671      671\n```\n. # Codecov Report\n\nMerging #1422 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1422      +/-\n==========================================\n+ Coverage   80.23%   80.28%   +0.05%   \n==========================================\n  Files         120      120            \n  Lines        3394     3403       +9   \n==========================================\n+ Hits         2723     2732       +9   \n  Misses        671      671\n```\n. # Codecov Report\n\nMerging #1423 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1423   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3383     3383         \n=======================================\n  Hits         2726     2726         \n  Misses        657      657\n```\n. # Codecov Report\n\nMerging #1425 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1425   +/-\n=======================================\n  Coverage   80.31%   80.31%         \n=======================================\n  Files         120      120         \n  Lines        3403     3403         \n=======================================\n  Hits         2733     2733         \n  Misses        670      670\n```\n. # Codecov Report\n\nMerging #1433 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1433      +/-\n=========================================\n- Coverage   80.31%   80.3%   -0.01%   \n=========================================\n  Files         120     120            \n  Lines        3403    3401       -2   \n=========================================\n- Hits         2733    2731       -2   \n  Misses        670     670\n```\n. # Codecov Report\n\nMerging #1434 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1434   +/-\n=======================================\n  Coverage   80.31%   80.31%         \n=======================================\n  Files         120      120         \n  Lines        3403     3403         \n=======================================\n  Hits         2733     2733         \n  Misses        670      670\n```\n. # Codecov Report\n\nMerging #1435 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1435   +/-\n=======================================\n  Coverage   80.31%   80.31%         \n=======================================\n  Files         120      120         \n  Lines        3403     3403         \n=======================================\n  Hits         2733     2733         \n  Misses        670      670\n```\n. # Codecov Report\n\nMerging #1437 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1437      +/-\n==========================================\n- Coverage   80.31%   80.28%   -0.03%   \n==========================================\n  Files         120      120            \n  Lines        3403     3403            \n==========================================\n- Hits         2733     2732       -1   \n- Misses        670      671       +1\n```\n. # Codecov Report\n\nMerging #1442 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1442   +/-\n=======================================\n  Coverage   80.31%   80.31%         \n=======================================\n  Files         120      120         \n  Lines        3403     3403         \n=======================================\n  Hits         2733     2733         \n  Misses        670      670\n```\n. # Codecov Report\n\nMerging #1443 into master will decrease coverage by 0.02%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1443      +/-\n==========================================\n- Coverage   80.31%   80.28%   -0.02%   \n==========================================\n  Files         121      120       -1   \n  Lines        3407     3403       -4   \n==========================================\n- Hits         2736     2732       -4   \n  Misses        671      671\n```\n. # Codecov Report\n\nMerging #1445 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1445   +/-\n=======================================\n  Coverage   80.28%   80.28%         \n=======================================\n  Files         120      120         \n  Lines        3403     3403         \n=======================================\n  Hits         2732     2732         \n  Misses        671      671\n```\n. # Codecov Report\n\nMerging #1448 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1448      +/-\n==========================================\n+ Coverage   80.31%   80.38%   +0.07%   \n==========================================\n  Files         121      121            \n  Lines        3407     3425      +18   \n==========================================\n+ Hits         2736     2753      +17   \n- Misses        671      672       +1\n```\n. # Codecov Report\n\nMerging #1450 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1450   +/-\n=======================================\n  Coverage   80.31%   80.31%         \n=======================================\n  Files         121      121         \n  Lines        3407     3407         \n=======================================\n  Hits         2736     2736         \n  Misses        671      671\n```\n. # Codecov Report\n\nMerging #1452 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1452   +/-\n=======================================\n  Coverage   80.31%   80.31%         \n=======================================\n  Files         121      121         \n  Lines        3407     3407         \n=======================================\n  Hits         2736     2736         \n  Misses        671      671\n```\n. # Codecov Report\n\nMerging #1457 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1457   +/-\n=======================================\n  Coverage   80.38%   80.38%         \n=======================================\n  Files         121      121         \n  Lines        3425     3425         \n=======================================\n  Hits         2753     2753         \n  Misses        672      672\n```\n. # Codecov Report\n\nMerging #1458 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1458   +/-\n=======================================\n  Coverage   80.38%   80.38%         \n=======================================\n  Files         121      121         \n  Lines        3425     3425         \n=======================================\n  Hits         2753     2753         \n  Misses        672      672\n```\n. # Codecov Report\n\nMerging #1459 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1459   +/-\n=======================================\n  Coverage   80.38%   80.38%         \n=======================================\n  Files         121      121         \n  Lines        3425     3425         \n=======================================\n  Hits         2753     2753         \n  Misses        672      672\n```\n. # Codecov Report\n\nMerging #1460 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1460   +/-\n=======================================\n  Coverage   80.38%   80.38%         \n=======================================\n  Files         121      121         \n  Lines        3425     3425         \n=======================================\n  Hits         2753     2753         \n  Misses        672      672\n```\n. # Codecov Report\n\nMerging #1468 into master will decrease coverage by 0.32%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1468      +/-\n==========================================\n- Coverage   80.38%   80.06%   -0.32%   \n==========================================\n  Files         121      121            \n  Lines        3425     3420       -5   \n==========================================\n- Hits         2753     2738      -15   \n- Misses        672      682      +10\n```\n. # Codecov Report\n\nMerging #1468 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1468   +/-\n=======================================\n  Coverage   80.38%   80.38%         \n=======================================\n  Files         121      121         \n  Lines        3425     3425         \n=======================================\n  Hits         2753     2753         \n  Misses        672      672\n```\n. # Codecov Report\n\nMerging #1470 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1470      +/-\n==========================================\n- Coverage   80.38%   80.35%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3425     3425            \n==========================================\n- Hits         2753     2752       -1   \n- Misses        672      673       +1\n```\n. # Codecov Report\n\nMerging #1470 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1470      +/-\n==========================================\n- Coverage   80.38%   80.35%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3425     3425            \n==========================================\n- Hits         2753     2752       -1   \n- Misses        672      673       +1\n```\n. # Codecov Report\n\nMerging #1474 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1474      +/-\n==========================================\n+ Coverage   80.38%   80.39%   +0.01%   \n==========================================\n  Files         121      121            \n  Lines        3425     3426       +1   \n==========================================\n+ Hits         2753     2754       +1   \n  Misses        672      672\n```\n. # Codecov Report\n\nMerging #1474 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1474      +/-\n==========================================\n+ Coverage   80.38%   80.42%   +0.04%   \n==========================================\n  Files         121      121            \n  Lines        3425     3422       -3   \n==========================================\n- Hits         2753     2752       -1   \n+ Misses        672      670       -2\n```\n. # Codecov Report\n\nMerging #1478 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1478   +/-\n=======================================\n  Coverage   80.39%   80.39%         \n=======================================\n  Files         121      121         \n  Lines        3426     3426         \n=======================================\n  Hits         2754     2754         \n  Misses        672      672\n```\n. # Codecov Report\n\nMerging #1478 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1478   +/-\n=======================================\n  Coverage   80.39%   80.39%         \n=======================================\n  Files         121      121         \n  Lines        3426     3426         \n=======================================\n  Hits         2754     2754         \n  Misses        672      672\n```\n. # Codecov Report\n\nMerging #1480 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1480   +/-\n=======================================\n  Coverage   80.39%   80.39%         \n=======================================\n  Files         121      121         \n  Lines        3426     3426         \n=======================================\n  Hits         2754     2754         \n  Misses        672      672\n```\n. # Codecov Report\n\nMerging #1480 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1480   +/-\n=======================================\n  Coverage   80.39%   80.39%         \n=======================================\n  Files         121      121         \n  Lines        3426     3426         \n=======================================\n  Hits         2754     2754         \n  Misses        672      672\n```\n. # Codecov Report\n\nMerging #1481 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1481   +/-\n=======================================\n  Coverage   80.39%   80.39%         \n=======================================\n  Files         121      121         \n  Lines        3426     3426         \n=======================================\n  Hits         2754     2754         \n  Misses        672      672\n```\n. # Codecov Report\n\nMerging #1481 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1481   +/-\n=======================================\n  Coverage   80.39%   80.39%         \n=======================================\n  Files         121      121         \n  Lines        3426     3426         \n=======================================\n  Hits         2754     2754         \n  Misses        672      672\n```\n. # Codecov Report\n\nMerging #1482 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1482   +/-\n=======================================\n  Coverage   80.39%   80.39%         \n=======================================\n  Files         121      121         \n  Lines        3426     3426         \n=======================================\n  Hits         2754     2754         \n  Misses        672      672\n```\n. # Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (master@61e1ea9). Click here to learn what that means.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1482   +/-\n=========================================\n  Coverage          ?   80.53%         \n=========================================\n  Files             ?      121         \n  Lines             ?     3436         \n  Branches          ?        0         \n=========================================\n  Hits              ?     2767         \n  Misses            ?      669         \n  Partials          ?        0\n```\n. # Codecov Report\n\nMerging #1484 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1484      +/-\n==========================================\n- Coverage   80.42%   80.39%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3421     3426       +5   \n==========================================\n+ Hits         2751     2754       +3   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (master@61e1ea9). Click here to learn what that means.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1484   +/-\n=========================================\n  Coverage          ?   80.39%         \n=========================================\n  Files             ?      121         \n  Lines             ?     3426         \n  Branches          ?        0         \n=========================================\n  Hits              ?     2754         \n  Misses            ?      672         \n  Partials          ?        0\n```\n. # Codecov Report\n\nMerging #1485 into master will decrease coverage by 0.03%.\nThe diff coverage is 0%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1485      +/-\n==========================================\n- Coverage   80.42%   80.39%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3421     3426       +5   \n==========================================\n+ Hits         2751     2754       +3   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1485 into master will decrease coverage by 0.03%.\nThe diff coverage is 0%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1485      +/-\n==========================================\n- Coverage   80.42%   80.39%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3421     3426       +5   \n==========================================\n+ Hits         2751     2754       +3   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1486 into master will decrease coverage by 0.04%.\nThe diff coverage is 50%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1486      +/-\n==========================================\n- Coverage   80.42%   80.38%   -0.04%   \n==========================================\n  Files         121      121            \n  Lines        3421     3425       +4   \n==========================================\n+ Hits         2751     2753       +2   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1486 into master will decrease coverage by 0.04%.\nThe diff coverage is 50%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1486      +/-\n==========================================\n- Coverage   80.42%   80.38%   -0.04%   \n==========================================\n  Files         121      121            \n  Lines        3421     3425       +4   \n==========================================\n+ Hits         2751     2753       +2   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1487 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1487      +/-\n==========================================\n- Coverage   80.42%   80.39%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3421     3426       +5   \n==========================================\n+ Hits         2751     2754       +3   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1487 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1487      +/-\n==========================================\n- Coverage   80.42%   80.39%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3421     3426       +5   \n==========================================\n+ Hits         2751     2754       +3   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1488 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1488      +/-\n==========================================\n- Coverage   80.42%   80.39%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3421     3426       +5   \n==========================================\n+ Hits         2751     2754       +3   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1488 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1488      +/-\n==========================================\n- Coverage   80.42%   80.39%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3421     3426       +5   \n==========================================\n+ Hits         2751     2754       +3   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1489 into master will decrease coverage by 0.02%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1489      +/-\n=========================================\n- Coverage   80.42%   80.4%   -0.02%   \n=========================================\n  Files         121     121            \n  Lines        3421    3428       +7   \n=========================================\n+ Hits         2751    2756       +5   \n- Misses        670     672       +2\n```\n. # Codecov Report\n\nMerging #1489 into master will decrease coverage by 0.02%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1489      +/-\n=========================================\n- Coverage   80.42%   80.4%   -0.02%   \n=========================================\n  Files         121     121            \n  Lines        3421    3428       +7   \n=========================================\n+ Hits         2751    2756       +5   \n- Misses        670     672       +2\n```\n. # Codecov Report\n\nMerging #1490 into master will decrease coverage by 0.03%.\nThe diff coverage is 0%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1490      +/-\n==========================================\n- Coverage   80.42%   80.39%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3421     3426       +5   \n==========================================\n+ Hits         2751     2754       +3   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1490 into master will decrease coverage by 0.03%.\nThe diff coverage is 0%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1490      +/-\n==========================================\n- Coverage   80.42%   80.39%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3421     3426       +5   \n==========================================\n+ Hits         2751     2754       +3   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1491 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1491      +/-\n==========================================\n- Coverage   80.42%   80.39%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3421     3426       +5   \n==========================================\n+ Hits         2751     2754       +3   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1491 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1491      +/-\n==========================================\n- Coverage   80.42%   80.39%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3421     3426       +5   \n==========================================\n+ Hits         2751     2754       +3   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1492 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1492      +/-\n==========================================\n+ Coverage   80.42%   80.43%   +0.01%   \n==========================================\n  Files         121      121            \n  Lines        3421     3433      +12   \n==========================================\n+ Hits         2751     2761      +10   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1492 into master will increase coverage by 0.16%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1492      +/-\n==========================================\n+ Coverage    80.4%   80.55%   +0.16%   \n==========================================\n  Files         121      121            \n  Lines        3428     3435       +7   \n==========================================\n+ Hits         2756     2767      +11   \n+ Misses        672      668       -4\n```\n. # Codecov Report\n\nMerging #1494 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1494      +/-\n==========================================\n- Coverage   80.42%   80.39%   -0.03%   \n==========================================\n  Files         121      121            \n  Lines        3421     3426       +5   \n==========================================\n+ Hits         2751     2754       +3   \n- Misses        670      672       +2\n```\n. # Codecov Report\n\nMerging #1495 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1495   +/-\n======================================\n  Coverage    80.4%   80.4%         \n======================================\n  Files         121     121         \n  Lines        3428    3428         \n======================================\n  Hits         2756    2756         \n  Misses        672     672\n```\n. # Codecov Report\n\nMerging #1495 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1495   +/-\n======================================\n  Coverage    80.4%   80.4%         \n======================================\n  Files         121     121         \n  Lines        3428    3428         \n======================================\n  Hits         2756    2756         \n  Misses        672     672\n```\n. # Codecov Report\n\nMerging #1498 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1498   +/-\n======================================\n  Coverage    80.4%   80.4%         \n======================================\n  Files         121     121         \n  Lines        3428    3428         \n======================================\n  Hits         2756    2756         \n  Misses        672     672\n```\n. # Codecov Report\n\nMerging #1499 into master will decrease coverage by 0.05%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1499      +/-\n==========================================\n- Coverage   80.58%   80.53%   -0.05%   \n==========================================\n  Files         121      121            \n  Lines        3399     3436      +37   \n==========================================\n+ Hits         2739     2767      +28   \n- Misses        660      669       +9\n```\n. # Codecov Report\n\nMerging #1508 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1508   +/-\n=======================================\n  Coverage   80.53%   80.53%         \n=======================================\n  Files         121      121         \n  Lines        3436     3436         \n=======================================\n  Hits         2767     2767         \n  Misses        669      669\n```\n. # Codecov Report\n\nMerging #1508 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1508   +/-\n=======================================\n  Coverage   80.53%   80.53%         \n=======================================\n  Files         121      121         \n  Lines        3436     3436         \n=======================================\n  Hits         2767     2767         \n  Misses        669      669\n```\n. # Codecov Report\n\nMerging #1509 into master will decrease coverage by 0.32%.\nThe diff coverage is 15.63%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1509      +/-\n==========================================\n- Coverage   80.53%   80.21%   -0.32%   \n==========================================\n  Files         121      121            \n  Lines        3436     3451      +15   \n==========================================\n+ Hits         2767     2768       +1   \n- Misses        669      683      +14\n```\n. # Codecov Report\n\nMerging #1510 into master will increase coverage by 0.03%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1510      +/-\n==========================================\n+ Coverage   80.38%   80.41%   +0.03%   \n==========================================\n  Files         121      121            \n  Lines        3409     3404       -5   \n==========================================\n- Hits         2740     2737       -3   \n+ Misses        669      667       -2\n```\n. # Codecov Report\n\nMerging #1510 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1510   +/-\n=======================================\n  Coverage   80.53%   80.53%         \n=======================================\n  Files         121      121         \n  Lines        3436     3436         \n=======================================\n  Hits         2767     2767         \n  Misses        669      669\n```\n. # Codecov Report\n\nMerging #1511 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1511   +/-\n=======================================\n  Coverage   80.53%   80.53%         \n=======================================\n  Files         121      121         \n  Lines        3436     3436         \n=======================================\n  Hits         2767     2767         \n  Misses        669      669\n```\n. # Codecov Report\n\nMerging #1511 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1511   +/-\n=======================================\n  Coverage   80.53%   80.53%         \n=======================================\n  Files         121      121         \n  Lines        3436     3436         \n=======================================\n  Hits         2767     2767         \n  Misses        669      669\n```\n. # Codecov Report\n\nMerging #1513 into master will increase coverage by 0.08%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1513      +/-\n==========================================\n+ Coverage   80.53%   80.61%   +0.08%   \n==========================================\n  Files         121      121            \n  Lines        3436     3451      +15   \n==========================================\n+ Hits         2767     2782      +15   \n  Misses        669      669\n```\n. # Codecov Report\n\nMerging #1515 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1515   +/-\n=======================================\n  Coverage   80.53%   80.53%         \n=======================================\n  Files         121      121         \n  Lines        3436     3436         \n=======================================\n  Hits         2767     2767         \n  Misses        669      669\n```\n. # Codecov Report\n\nMerging #1515 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1515   +/-\n=======================================\n  Coverage   80.53%   80.53%         \n=======================================\n  Files         121      121         \n  Lines        3436     3436         \n=======================================\n  Hits         2767     2767         \n  Misses        669      669\n```\n. # Codecov Report\n\nMerging #1516 into master will increase coverage by 0.09%.\nThe diff coverage is 83.33%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1516      +/-\n==========================================\n+ Coverage   80.53%   80.62%   +0.09%   \n==========================================\n  Files         121      120       -1   \n  Lines        3436     3374      -62   \n==========================================\n- Hits         2767     2720      -47   \n+ Misses        669      654      -15\n```\n. # Codecov Report\n\nMerging #1516 into master will increase coverage by 0.17%.\nThe diff coverage is 55.56%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1516      +/-\n==========================================\n+ Coverage   80.38%   80.54%   +0.17%   \n==========================================\n  Files         121      121            \n  Lines        3409     3377      -32   \n==========================================\n- Hits         2740     2720      -20   \n+ Misses        669      657      -12\n```\n. # Codecov Report\n\nMerging #1517 into master will decrease coverage by 0.32%.\nThe diff coverage is 15.63%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1517      +/-\n==========================================\n- Coverage   80.53%   80.21%   -0.32%   \n==========================================\n  Files         121      121            \n  Lines        3436     3451      +15   \n==========================================\n+ Hits         2767     2768       +1   \n- Misses        669      683      +14\n```\n. # Codecov Report\n\nMerging #1517 into master will decrease coverage by 0.32%.\nThe diff coverage is 15.63%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1517      +/-\n==========================================\n- Coverage   80.53%   80.21%   -0.32%   \n==========================================\n  Files         121      121            \n  Lines        3436     3451      +15   \n==========================================\n+ Hits         2767     2768       +1   \n- Misses        669      683      +14\n```\n. # Codecov Report\n\nMerging #1521 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1521      +/-\n==========================================\n+ Coverage   80.54%   80.58%   +0.03%   \n==========================================\n  Files         121      121            \n  Lines        3377     3383       +6   \n==========================================\n+ Hits         2720     2726       +6   \n  Misses        657      657\n```\n. # Codecov Report\n\nMerging #1521 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1521      +/-\n==========================================\n+ Coverage   80.54%   80.58%   +0.03%   \n==========================================\n  Files         121      121            \n  Lines        3377     3383       +6   \n==========================================\n+ Hits         2720     2726       +6   \n  Misses        657      657\n```\n. # Codecov Report\n\nMerging #1522 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1522      +/-\n==========================================\n+ Coverage   80.58%   80.61%   +0.03%   \n==========================================\n  Files         121      121            \n  Lines        3383     3389       +6   \n==========================================\n+ Hits         2726     2732       +6   \n  Misses        657      657\n```\n. # Codecov Report\n\nMerging #1522 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1522      +/-\n==========================================\n+ Coverage   80.55%   80.63%   +0.07%   \n==========================================\n  Files         121      121            \n  Lines        3389     3391       +2   \n==========================================\n+ Hits         2730     2734       +4   \n+ Misses        659      657       -2\n```\n. # Codecov Report\n\nMerging #1524 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1524   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3383     3383         \n=======================================\n  Hits         2726     2726         \n  Misses        657      657\n```\n. # Codecov Report\n\nMerging #1524 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1524   +/-\n=======================================\n  Coverage   80.54%   80.54%         \n=======================================\n  Files         121      121         \n  Lines        3386     3386         \n=======================================\n  Hits         2727     2727         \n  Misses        659      659\n```\n. # Codecov Report\n\nMerging #1525 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1525      +/-\n=========================================\n+ Coverage   80.58%   80.6%   +0.02%   \n=========================================\n  Files         121     121            \n  Lines        3383    3386       +3   \n=========================================\n+ Hits         2726    2729       +3   \n  Misses        657     657\n```\n. # Codecov Report\n\nMerging #1525 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1525      +/-\n==========================================\n+ Coverage   80.54%   80.55%   +0.02%   \n==========================================\n  Files         121      121            \n  Lines        3386     3389       +3   \n==========================================\n+ Hits         2727     2730       +3   \n  Misses        659      659\n```\n. # Codecov Report\n\nMerging #1526 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1526   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3383     3383         \n=======================================\n  Hits         2726     2726         \n  Misses        657      657\n```\n. # Codecov Report\n\nMerging #1526 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1526   +/-\n=======================================\n  Coverage   80.54%   80.54%         \n=======================================\n  Files         121      121         \n  Lines        3386     3386         \n=======================================\n  Hits         2727     2727         \n  Misses        659      659\n```\n. # Codecov Report\n\nMerging #1536 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1536   +/-\n======================================\n  Coverage    80.6%   80.6%         \n======================================\n  Files         121     121         \n  Lines        3386    3386         \n======================================\n  Hits         2729    2729         \n  Misses        657     657\n```\n. # Codecov Report\n\nMerging #1537 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1537   +/-\n======================================\n  Coverage    80.6%   80.6%         \n======================================\n  Files         121     121         \n  Lines        3386    3386         \n======================================\n  Hits         2729    2729         \n  Misses        657     657\n```\n. # Codecov Report\n\nMerging #1539 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1539   +/-\n======================================\n  Coverage    80.6%   80.6%         \n======================================\n  Files         121     121         \n  Lines        3386    3386         \n======================================\n  Hits         2729    2729         \n  Misses        657     657\n```\n. # Codecov Report\n\nMerging #1539 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1539   +/-\n======================================\n  Coverage    80.6%   80.6%         \n======================================\n  Files         121     121         \n  Lines        3386    3386         \n======================================\n  Hits         2729    2729         \n  Misses        657     657\n```\n. # Codecov Report\n\nMerging #1540 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1540   +/-\n======================================\n  Coverage    80.6%   80.6%         \n======================================\n  Files         121     121         \n  Lines        3386    3386         \n======================================\n  Hits         2729    2729         \n  Misses        657     657\n```\n. # Codecov Report\n\nMerging #1541 into master will not change coverage.\nThe diff coverage is 0%.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1541   +/-\n======================================\n  Coverage    80.6%   80.6%         \n======================================\n  Files         121     121         \n  Lines        3386    3386         \n======================================\n  Hits         2729    2729         \n  Misses        657     657\n```\n. # Codecov Report\n\nMerging #1541 into master will not change coverage.\nThe diff coverage is 0%.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1541   +/-\n======================================\n  Coverage    80.6%   80.6%         \n======================================\n  Files         121     121         \n  Lines        3386    3386         \n======================================\n  Hits         2729    2729         \n  Misses        657     657\n```\n. # Codecov Report\n\nMerging #1544 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1544   +/-\n======================================\n  Coverage    80.6%   80.6%         \n======================================\n  Files         121     121         \n  Lines        3386    3386         \n======================================\n  Hits         2729    2729         \n  Misses        657     657\n```\n. # Codecov Report\n\nMerging #1544 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1544   +/-\n======================================\n  Coverage    80.6%   80.6%         \n======================================\n  Files         121     121         \n  Lines        3386    3386         \n======================================\n  Hits         2729    2729         \n  Misses        657     657\n```\n. # Codecov Report\n\nMerging #1545 into master will decrease coverage by 0.06%.\nThe diff coverage is 0%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1545      +/-\n==========================================\n- Coverage    80.6%   80.54%   -0.06%   \n==========================================\n  Files         121      121            \n  Lines        3386     3386            \n==========================================\n- Hits         2729     2727       -2   \n- Misses        657      659       +2\n```\n. # Codecov Report\n\nMerging #1545 into master will decrease coverage by 0.06%.\nThe diff coverage is 0%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1545      +/-\n==========================================\n- Coverage    80.6%   80.54%   -0.06%   \n==========================================\n  Files         121      121            \n  Lines        3386     3386            \n==========================================\n- Hits         2729     2727       -2   \n- Misses        657      659       +2\n```\n. # Codecov Report\n\nMerging #1554 into master will decrease coverage by 0.2%.\nThe diff coverage is 30%.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1554     +/-\n=========================================\n- Coverage   80.54%   80.33%   -0.2%   \n=========================================\n  Files         121      118      -3   \n  Lines        3386     3361     -25   \n=========================================\n- Hits         2727     2700     -27   \n- Misses        659      661      +2\n```\n. # Codecov Report\n\nMerging #1554 into master will decrease coverage by 0.25%.\nThe diff coverage is 30%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1554      +/-\n==========================================\n- Coverage   80.54%   80.29%   -0.25%   \n==========================================\n  Files         121      118       -3   \n  Lines        3386     3364      -22   \n==========================================\n- Hits         2727     2701      -26   \n- Misses        659      663       +4\n```\n. # Codecov Report\n\nMerging #1559 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1559   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3399     3399         \n=======================================\n  Hits         2739     2739         \n  Misses        660      660\n```\n. # Codecov Report\n\nMerging #1562 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1562   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3399     3399         \n=======================================\n  Hits         2739     2739         \n  Misses        660      660\n```\n. # Codecov Report\n\nMerging #1563 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1563   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3399     3399         \n=======================================\n  Hits         2739     2739         \n  Misses        660      660\n```\n. # Codecov Report\n\nMerging #1563 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1563   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3399     3399         \n=======================================\n  Hits         2739     2739         \n  Misses        660      660\n```\n. # Codecov Report\n\nMerging #1565 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1565   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3399     3399         \n=======================================\n  Hits         2739     2739         \n  Misses        660      660\n```\n. # Codecov Report\n\nMerging #1565 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1565   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3399     3399         \n=======================================\n  Hits         2739     2739         \n  Misses        660      660\n```\n. # Codecov Report\n\nMerging #1567 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1567   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3399     3399         \n=======================================\n  Hits         2739     2739         \n  Misses        660      660\n```\n. # Codecov Report\n\nMerging #1567 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1567   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3399     3399         \n=======================================\n  Hits         2739     2739         \n  Misses        660      660\n```\n. # Codecov Report\n\nMerging #1575 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1575   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3399     3399         \n=======================================\n  Hits         2739     2739         \n  Misses        660      660\n```\n. # Codecov Report\n\nMerging #1575 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1575   +/-\n=======================================\n  Coverage   80.58%   80.58%         \n=======================================\n  Files         121      121         \n  Lines        3399     3399         \n=======================================\n  Hits         2739     2739         \n  Misses        660      660\n```\n. ",
    "thomasw-mitutoyo-ctl": "When reading your reply I realized that I didn't write enough. I'm sorry for that.\n\nWouldn't that be more a tutorial about Visual Studio ?\n\nI doubt the tutorial would work in GCC either. The tutorial says\n\nSay you have written a function to calculate factorials and now you want to test it\n\nYou do that on Linux and compile it as an SO file (the DLL equivalent on Linux).\nNext you #define and #include the Catch stuff as written in the tutorial. Still, you won't be able to run the test, because you can't run the SO file. Later, the tutorial says\n\nThis will compile to a complete executable\n\nActually it won't. It still compiles as an SO file. Only if you have chosen to compile as an executable before, it will be an executable. Maybe you can change that later, but maybe my boss requires the code to be a library, not an executable.\nIf I had an executable, I would of course have an entry point that starts the application. That entry point then conflicts with the entry point of Catch. As a consequence, I would define some #ifndef TESTING around the real entry point to avoid that situation. That's not nice.\nAnd when I finally get it running, my boss will very likely tell me something about separation of concerns and ask me to split the test code from production code.\nI don't want a Visual Studio specific tutorial, but I want a tutorial for real world projects, where\na) the function to be tested is in a DLL\nb) the entry point of my executable does not conflict with the entry point of Catch\nAnd maybe I want another tutorial which describes how to move from MSTest to Catch. In my project we have MSTest already and these tests compile to a DLL. When I now add Catch as described, it won't work. At this point in time, my statement is: Catch is incompatible with MSTest. It can't be used in parallel, because Catch is designed to replace MSTest. This was not clear to me.\nI have no problem of creating an additional executable in order to slowly migrate from MSTest to Catch. I just need to know that I have to do this. Question will of course be: how will that integrate with TFS and the CI build.\nAll in all: very nice project but an unclear migration path for existing VS / MSTest / TFS users. The tutorial could perhaps mention this. Thanks.. ",
    "zwcloud": "https://mariusbancila.ro/blog/2018/03/29/writing-cpp-unit-tests-with-catch2/. @horenmar \nNo all people uses auto-run unit tests all the time. For me, I write small unit tests when developing my app, just to ensure that I haven't done anything wrong in the small section of code I just wrote. People call this TDD you know. In this case, I just want to click a button and run a test case.\n@janisozaur \n\nThere is no need to supply the Java-based entrypoint, native (as in: comprised solely of C++ code) binaries work fine. \n\nIt may work, but it is far from working Fine. That's how I work with the Android Studio, a java unit test method allows me to click the button and run a unit test in the IDE.\n\nYou should be able to provide a regular main() function and execute your application through it.\n\nNo. I'm not able to do that. Because a java-based Android app doesn't expose the main() function. (Even a NativeActivity-based Android app doesn't expose the main function.) If you can achieve that, I'll appreciate it if you tell me how to do it. . Below is how I use it in a practical Android project in Android Studio:\n\nThe red-circled \u25b6 is the \"button\" I can click to run a unit test with specific test name.\nAnd the testName is passed to a jni function runTest:\n```cpp\nextern \"C\" JNIEXPORT JNICALL\nint Java_cn_easyar_androidaudiondk_ExampleInstrumentedTest_runTest(JNIEnv *env, jclass type, jstring testName_) {\nauto buf = std::make_shared<androidbuf>();\nstd::cout.rdbuf(buf.get());\n\n//https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#specifying-which-tests-to-run\nconst char *arguments[] = {\n        \"fake.exe\",\n        jstring_to_string(env, testName_).c_str()\n};\nint argc = 2;\nauto argv = const_cast<char**>(arguments);\nint result = Catch::Session().run(argc, argv);\n\nreturn result;\n\n}\n```\nAnd the test code:\n\n. You can use fake argc and argv. And call the fake main entry function from somewhere else.. > Does Catch actually use the executable path/name? Does one actually need to pass the executable in argv[0]? Would it be a problem if I passed argc=0 and therefore argv=NULL?\nYes, it needs argv[0]. An error will occur when argv=NULL. That's why I uses a \"whatever\" argument.. ",
    "hoisunng": "In my test cases I sometimes even have the case that 1e-20 != Approx(0).\nSo after this change, what is the suggested way of writing in Catch2, if we want to assert that something is approximately zero? . ",
    "mwoehlke-kitware": "If it goes into CMake, refactoring to share code would be interesting. (At least, I would suggest adding a comment to both spots to keep them in sync as far as bug fixes / improvements.). I haven't checked what the catch2 implementation does, but what I did for KWIVER (which has a compatibility version of the very similar GoogleTest.cmake, seen here) is set CTEST_INCLUDE_FILE to a wrapper that I write at configuration time to include a file per gtest_discover_tests invocation (and also the user's CTEST_INCLUDE_FILE, if they set one). This should work around the aforementioned issue, but the implementation is non-trivially more complicated. This sort of thing is MUCH easier with CTEST_INCLUDE_FILES, which is indeed why I added that to CMake \ud83d\ude42.. It should work, yes; that's basically what I said in the previous comment. I can't speak as much to your second question :slightly_smiling_face:.. ",
    "sonOfRa": "Do I understand this correctly, that with CMake < 3.10.0 I cannot use catch_discover_tests multiple times, since that will always trigger the fatal error \"Cannot set more than one TEST_INCLUDE_FILE\"?. ",
    "sorin-manole": "I have a similar compilation error.. Yes, please release a new version.. ",
    "thetic": "For my use case it would still be preferable to route failure reporting separately.. ",
    "BeErikk": "Just an additional note:\nBy adding the following and set a breakpoint at _CrtDumpMemoryLeaks(), I think you can be sure to have left wmain. _CrtDumpMemoryLeaks() still report a memory leak.\n```\nclass silly\n{\npublic:\n    silly() {}\n    virtual ~silly() \n    {\n        _CrtDumpMemoryLeaks();  // set a debug breakpoint here\n    }\n};\nsilly me;\n```. crtdbg routines are debug build diagnostics. You will need a debug build.\nsee MSDN: crtdumpmemoryleaks\nFurthermore, I see the crtdumpmemoryleaks logs in the Visual Studio output logging window during debugging. I think you'll need a debug session to see these log messages. I'm sure there are settings for CI and possibly even manual commandline tools. You can for example drag the executable you built from the commandline into VS and start a debug session.\nAnyway, to confirm I also tested building from the commandline:\nset INCLUDE=%INCLUDE%;G:\\libraries\\unittests\\Catch\\single_include\ncl.exe -D_DEBUG -EHsc -MDd catch_tutorial.cpp\nThen drag into VS for debug session\nUpdated source file\ncatch_tutorial2.cpp.txt\nedit:\nAlso confirmed with v141_clang_c2 (MS supplied clang with Visual Studio)\n. No, sorry I still get a dump from both end of main and the silly instance destructor. Calling _CrtDumpMemoryLeaks() is just routine and was actually my initial question, if Catch generate a false indication due to late memory release. My \"silly me\" test was a try to confirm that.\nI'm now trying the _CRTDBG_MAP_ALLOC macro to see where the memory is coming from (see for example Why doesn't leak detection give me line numbers?)\nbut I get errors catch.hpp(9321): error C2061: syntax error: identifier 'nothrow'\nWell, I'll try to generate a new header and see if it went away\nedit:\nI also tried\n```\nint ret = 0;\n{\n    ret = Catch::Session().run(argc, argv);\n}\n_CrtDumpMemoryLeaks();\n. Updated singleheader and still get memory dumps . To be sure, please generate a confirmed single header and push it to git.\nBTW how should I write a custom main without the single header, using the Catch header tree?. I get `error C2039: 'Session': is not a member of 'Catch'`\nhm I think I need at least to add\n`#include \"catch_session.h\"`\nand then probably supply a static Catch lib?. Right, that's quite a list if I understand it correctly\n@echo // FOR /f \"tokens=\" %i in ('@dir /b \".cpp\"') DO @echo #include ^<%i^> >  catch_impl.h\nFOR /f \"tokens=\" %i in ('@dir /b \".cpp\"') DO @echo #include ^<%i^> >> catch_impl.h\n[catch_impl.h.txt](https://github.com/catchorg/Catch2/files/1501711/catch_impl.h.txt)\n. I tried to locate the line where the reported memory is allocated according to \n[Finding Memory Leaks Using the CRT Library](https://docs.microsoft.com/en-gb/visualstudio/debugger/finding-memory-leaks-using-the-crt-library)\ntldr ie\ndefine _CRTDBG_MAP_ALLOC\ninclude \ninclude \nifdef _DEBUG\nifndef DBG_NEW\ndefine DBG_NEW new (_NORMAL_BLOCK,FILE,LINE)\ndefine new DBG_NEW\nendif\nendif\nas mentioned before, this will clash against\ninternal/catch_test_registry.cpp(15): `return new(std::nothrow) TestInvokerAsFunction( testAsFunction );`\nand if replaced with a simple new, compile will will fail the expression (at several places)\nalignas(alignof(T)) char storage[sizeof(T)];\nT* nullableValue = new( storage ) T( _value );\nNot sure how to proceed. I changed to MTd (see MSDN comments), I get\nDetected memory leaks!\nDumping objects ->\n{106} normal block at 0x000001FC6B5FD690, 16 bytes long.\n Data: <  {             > F8 F8 7B FF F6 7F 00 00 00 00 00 00 00 00 00 00 \nObject dump complete.\n``\nSo setting a breakpoint at allocation number 106 => no effect for me. Still think it would be good to get theDBG_NEW` macro to work\nCould you figure out a compatible way?. ",
    "ynotstartups": "Thanks for the commit! \nExact problem and the changes work for me with emcc (Emscripten gcc/clang-like replacement) 1.37.33\nBTW, how can I  build catch.hpp myself from master branch?. ",
    "Malvineous": "Many thanks for the details!  I've been investigating this and it looks like it might work, except the INFO() call seems to perform very short line wrapping:\n```\ntests_catch.cpp:124\n...............................................................................\ntests_catch.cpp:71: FAILED:\nexplicitly with message:\n  74 65 73 74 00 01 02 03 69 6e 67 21     test\n....ing!\n``\nIs there any way to avoid having it wrap?  I'm guessing it's because it is counting the ANSI colour codes as printable characters and thus wrapping the line too soon, but sometimes I like to have the lines really long temporarily (e.g. 200 chars wide) because it can make comparing the expected vs actual values much easier.  So rather than \"fixing\" the line wrapping, in this case it would be more useful if I could turn it off, just for those messages I am generating withINFO()`.\nIs that a possibility?  Thanks again!. ",
    "jewalker": "I also have a similar question. How would you achieve a similar result using Matchers (assuming the data was something other than a string)? Looking at the definition for a Matcher the match() function is declared as const, but the describe() function for returning the error reporting string is called outside of match, so how do you pass the necessary information discovered in match() to describe()? Say the data under test was megabytes long and you wanted to point out that bytes 345-348 differed, and maybe print out the differing data. What's the best way to do that?. I think I just answered this question myself by looking deeper into the header file. The Matcher has a function toString() which by default checks to see if the member variable m_cachedToString is empty. If not then it returns this variable, otherwise it returns the result of describe(). m_cachedToString is marked as mutable allowing it to be modified in the const match() function (which is how I was considering achieving it). It would be very useful if you could add this information and possibly an example to the documentation for Matchers. As it stands now the documentation states that you must override describe() and makes no mention of m_cachedToString.. The information needed to construct the error message is available immediately in match(), so it would be nice to use that information when constructing the string. If you add an additional virtual method similar to describe() I wouldn't want to have to recreate and rerun the logic I used in match() to identify the problem just to construct the error string.\nThe way Boost Test handles this is that their equivalent to match() returns a struct which contains the boolean result of the test and an optional error string.\nThe workaround I'm using for now is to do what toString() already does: add a mutable string member variable and have describe() return that variable. It appears to work for my test cases, but you might be aware of places this breaks down.. ",
    "viridia": "I've been running into similar issues. The current Matcher API doesn't allow for detailed reports of failures, because the 'actual' and 'expected' values are treated independently.\nMost assertion frameworks that I am familiar with (GoogleTest, Jest, Truth, certainty, etc.) have a way to give additional information when comparing complex entities in matchers. If I am comparing abstract syntax trees, DOM nodes, protocol buffers, or paragraphs of text, it's a burden for the programmer to have to visually diff the 'expected' value with the 'actual' value to see exactly where the divergence is.\nA custom matcher should have a way to report a failure that includes both the expected and the actual value, so that it can intelligently diff the two values and provide a friendly, human-readable summary of exactly what failed. I'm perfectly willing to write a diff algorithm for my data structures, but I need a place to plug it in.\n. ",
    "AlexWang-16": "Oops... just tried to include single_include version and got a different file not found error\n'internal/catch_notimplemented_exception.h' file not found. ",
    "acgetchell": "Indeed, that was the issue. I worked out what to do.\nhttps://github.com/acgetchell/CDT-plusplus/tree/feature/Catch\nThanks again for the help.. It doesn\u2019t resolve the error. I tried that here:\nhttps://github.com/acgetchell/CDT-plusplus/blob/feature/Catch/tests/MoveManager.cpp. That's not exactly what I'm doing, which is to see if an option type is populated, i.e.\nREQUIRE(maybe_moved_universe);\nWhere maybe_moved_universe is a non-trivial data structure.. Thanks, I had the same issue and this fixed it!\nClangTidy doesn't like it though.\nhttps://travis-ci.org/acgetchell/CDT-plusplus/builds/420808766. ",
    "avelenko": "I confirm seeing this.. ",
    "riksteri": "I am able to reproduce this, and it also occurs when I compile on Windows with clang++ 5.0.0. With clang, the REQUIRE(handler); is not required, CHECK(*handler == initial_func); alone is enough to cause this. This does not happen with clang if optimisations are disabled with -O0, levels 1-3 make this occur.\nIt looks like the memory handler is pointing at gets overwritten. Stepping through the expanded code* with a debugger shows that an AssertionHandler object gets written to where handler points at. The same actually occurs if you omit the CHECK and only use REQUIRE(handler);, but in that case it does not matter because the value pointed at by handler is not used for anything.\nIt's not difficult to reproduce the overwriting itself in a general case, but in my minimalising attempts it stops occurring as soon as the value of *handler matters - I can only detect the memory changing with a debugger in situations where handler is not dereferenced. In the Catch reproduction, *handler clearly is used but gets trampled anyways: Catch::Decomposer() <= *handler == initial_func\nI have been able to reproduce this without the full catch.hpp header, by copying only the relevant bits of Catch, I'll see if I can reduce it further to be a more general example.\n*The two macros get expanded to this (in current master branch, details have changed since last release but bits that matter here are the same, and the issue occurs in both):\nC++\nauto const handler = getFunc().target<decltype(&initial_func)>();\ndo \n{\n    Catch::AssertionHandler catchAssertionHandler(\n        \"REQUIRE\",\n        ::Catch::SourceLineInfo(\"X:\\\\path\\\\to\\\\source\\\\file.cpp\", static_cast<std::size_t>(24)),\n        \"handler\",\n        Catch::ResultDisposition::Normal); \n    try\n    {\n        catchAssertionHandler.handleExpr(Catch::Decomposer() <= handler); \n    } \n    catch(...)\n    {\n        catchAssertionHandler.handleUnexpectedInflightException(); \n    }\n    catchAssertionHandler.complete();\n} while((void)0, false && static_cast<bool>(!!(handler)));\ndo\n{\n    Catch::AssertionHandler catchAssertionHandler(\n        \"CHECKAA\",\n        ::Catch::SourceLineInfo(\"X:\\\\path\\\\to\\\\source\\\\file.cpp\", static_cast<std::size_t>(25)),\n        \"*handler == initial_func\",\n        Catch::ResultDisposition::ContinueOnFailure);\n    try\n    {\n        catchAssertionHandler.handleExpr(Catch::Decomposer() <= *handler == initial_func);\n    }\n    catch(...)\n    {\n        catchAssertionHandler.handleUnexpectedInflightException();\n    }\n    catchAssertionHandler.complete();\n} while((void)0, false && static_cast<bool>(!!(*handler == initial_func)));. This is the smallest I've been able to get to. I copied bits of code from Catch to get there. At this point the phenomenon does not occur with clang anymore, but does with MSVC. When iterating this, MSVC occasionally spat out an internal compiler error when trying to build the code.\n```C++\ninclude \ninclude \nusing Func = std::function;\nvoid initial_func() {}\nFunc g_func;\nFunc getFunc()\n{\n    g_func = initial_func;\n    return g_func;\n}\ntemplate\nclass ExprLhs {\n    LhsT m_lhs;\npublic:\n    explicit ExprLhs(LhsT lhs) : m_lhs(lhs) {}\ntemplate<typename RhsT>\nauto operator == (RhsT const& rhs) -> bool {\n    return m_lhs == rhs;\n}\n\n};\ntemplate\nauto UseTheThing(T const& lhs) -> ExprLhs {\n    return ExprLhs{ lhs };\n}\nint main()\n{\n    auto const handler = getFunc().target();\n{\n    int trampler[22] = {};\n\n    std::cout << \"Don't optimize it away: \" << trampler[0] << \"\\n\";\n\n    UseTheThing(handler);\n}\n\nauto result = ExprLhs<decltype(*handler)>(*handler) == initial_func;\nif (!result)\n{\n    std::cerr << \"ERROR\" << \"\\n\";\n}\nelse\n{\n    std::cout << \"All OK!\" << \"\\n\";\n}\n\nreturn 0;\n\n}\n```. ",
    "ComicSansMS": "I filed a bug report with Visual Studio.\nIf they can confirm that it's a problem of the compiler, it might be okay to just close the bug here (although it would be nice if we could find a workaround that will still allow Catch to work correctly in that case).\nBig thanks @riksteri for your help with the reproducer!. Okay, this was my fault.\nThe return value returned by std::function::target() points to an internal structure of the enclosing std::function, so when that enclosing object goes out of scope, the value becomes invalid. The obvious solution is to either keep the std::function itself alive until after the check, or to store the dereferenced value instead, which is the C function pointer that I was interested in in the first place.\nThanks for your help!. ",
    "faheel": "@horenmar This is exactly what I was looking for. Though can I ask why is it not on by default?. I see. Thanks for the explanation @horenmar.. ",
    "hostilefork": "Cool...actually I'm okay using a single include, now that I've found out about it (!)  But even the existence of the single include should probably be added to the breaking changes, if it's a new thing (is it?)\n(Really, I'm not familiar with Catch's installation process, because I'm trying to get something working with the upgrade that someone else set up.  So the first thing I got was just Catch::Session not defined, and I followed through to the include/catch.hpp to look for an inclusion of catch_session.h, and didn't find it...)\nMaybe a line in the breaking changes there could be an \"if you get Catch::Session not defined, here's what to do\"...where that's either switch to a single include, or something else?  Because the code I was looking at looked more or less just like the example, and it worked before.. Well, if it helps diagnose anything, this was the way Catch was being pulled down via CMake in the project:\nhttps://github.com/metaeducation/ren-cpp/blob/ce80c6deffb1052d3b83b3c4d16da382d94aa6e5/external/catch/CMakeLists.txt#L22\nI changed it to Catch2, then got the error.  But rather than use my patch (which then came up with link errors, anyway) I changed:\n${SOURCE_DIR}/include CACHE INTERNAL\n\n...to\n${SOURCE_DIR}/single_include CACHE INTERNAL\n\nNow all seems to be well again.. Ok, thanks!  Well I'll close this since things are back working again...but like I say, it might be good to put some note (maybe a link to this issue?) in the breaking changes for anyone else who upgrades to get a \"no Catch::Session\" error popping up...\nI'll also mention in passing that there's mixed tabs and spaces in the single include, as it's one of those things that are against my religion.  :-)  (I don't think it was a local edit...). ",
    "djleach-belcan": "This is with 2.0.1.. ",
    "MikePopoloski": "Thanks for the quick fix. My local changes are fine for now until the next release.. ",
    "ebollerman": "Than you for the rapid response Martin. Ah, thank you much. This fixed my compilation errors. I now am experiencing something similar to #540 when linking \ntest/main.o: In function `Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#8}>::setFlag(bool)':\nmain.cpp:(.text+0x3c0): undefined reference to `std::string::_Rep::_S_empty_rep_storage'\ntest/main.o: In function `Catch::NonCopyable::~NonCopyable()':\nmain.cpp:(.text+0x3c8): undefined reference to `operator delete(void*)'\ntest/main.o: In function `Catch::(anonymous namespace)::PosixColourImpl::~PosixColourImpl()':\nmain.cpp:(.text+0x3d4): undefined reference to `operator delete(void*)'\ntest/main.o: In function `Catch::(anonymous namespace)::NoColourImpl::~NoColourImpl()':\nmain.cpp:(.text+0x3e0): undefined reference to `operator delete(void*)'\ntest/main.o: In function `Catch::AutoReg::~AutoReg()':\nmain.cpp:(.text+0x3ec): undefined reference to `operator delete(void*)'\ntest/main.o: In function `Catch::clara::detail::BoundFlagLambda<Catch::makeCommandLineParser(Catch::ConfigData&)::{lambda(bool)#8}>::~BoundFlagLambda()':\n...\n...\n...\nMy test main now looks like this\n```\ndefine CATCH_CONFIG_MAIN\ndefine CATCH_CONFIG_NO_POSIX_SIGNALS\ninclude \"catch.hpp\"\nAnd my one test unit looks like this\ndefine CATCH_CONFIG_NO_POSIX_SIGNALS\ninclude \"catch.hpp\"\ninclude \"add.hpp\"\nTEST_CASE(\"Testing Add Function\", \"[add]\")\n{\n    REQUIRE(add(3,2)==5);\n}\n```\nAny ideas on what rookie mistake I am making here? Thanks\n. ",
    "daixtrose": "I am happy to announce that I found a code snippet that triggers the linker error:\n```c++\ninclude \nTEST_CASE(\"Spurious behavior\", \"[report]\")\n{\n    REQUIRE(1 == 1);\n} \n```. I will try to create a fully working example.. ",
    "bifurcation": "I'm brand-new to Catch, so this might be newbie failure / something different, but I am also getting linker errors.  When I try to build the Catch2 factorial example...\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nunsigned int Factorial( unsigned int number ) {\n    return number <= 1 ? number : Factorial(number-1)*number;\n}\nTEST_CASE( \"Factorials are computed\", \"[factorial]\" ) {\n    REQUIRE( Factorial(1) == 1 );\n    REQUIRE( Factorial(2) == 2 );\n    REQUIRE( Factorial(3) == 6 );\n    REQUIRE( Factorial(10) == 3628800 );\n}\n```\nThis is what I get:\n```\n$ g++ --version\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/c++/4.2.1\nApple LLVM version 9.0.0 (clang-900.0.39.2)\nTarget: x86_64-apple-darwin17.3.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n$ g++ -std=c++14 test/main.cpp -I./Catch2/include \nUndefined symbols for architecture x86_64:\n  \"Catch::NameAndTags::NameAndTags(Catch::StringRef, Catch::StringRef)\", referenced from:\n      cxxglobal_var_init.1 in main-bf9b39.o\n  \"Catch::StringMaker::convert(int)\", referenced from:\n      std::1::basic_string, std::__1::allocator > Catch::Detail::stringify(int const&) in main-bf9b39.o\n  \"Catch::StringMaker::convert(unsigned int)\", referenced from:\n      std::__1::basic_string, std::__1::allocator > Catch::Detail::stringify(unsigned int const&) in main-bf9b39.o\n  \"Catch::LeakDetector::LeakDetector()\", referenced from:\n      cxxglobal_var_init in main-bf9b39.o\n  \"Catch::makeTestInvoker(void (*)())\", referenced from:\n      _cxx_global_var_init.1 in main-bf9b39.o\n  \"Catch::AssertionHandler::handleExpr(Catch::ITransientExpression const&)\", referenced from:\n      _CA_T_C_H__T_E_S_T_0() in main-bf9b39.o\n  \"Catch::AssertionHandler::handleUnexpectedInflightException()\", referenced from:\n      _C_A_T_C_H_TE_S_T__0() in main-bf9b39.o\n  \"Catch::AssertionHandler::complete()\", referenced from:\n      _CA_T_C_H__T_E_S_T_0() in main-bf9b39.o\n  \"Catch::AssertionHandler::AssertionHandler(Catch::StringRef, Catch::SourceLineInfo const&, Catch::StringRef, Catch::ResultDisposition::Flags)\", referenced from:\n      _C_A_T_C_H_TE_S_T__0() in main-bf9b39.o\n  \"Catch::ITransientExpression::~ITransientExpression()\", referenced from:\n      Catch::BinaryExpr::~BinaryExpr() in main-bf9b39.o\n  \"Catch::formatReconstructedExpression(std::__1::basic_ostream >&, std::__1::basic_string, std::__1::allocator > const&, Catch::StringRef, std::__1::basic_string, std::__1::allocator > const&)\", referenced from:\n      Catch::BinaryExpr::streamReconstructedExpression(std::__1::basic_ostream >&) const in main-bf9b39.o\n  \"Catch::AutoReg::AutoReg(Catch::ITestInvoker, Catch::SourceLineInfo const&, Catch::StringRef, Catch::NameAndTags const&)\", referenced from:\n      cxxglobal_var_init.1 in main-bf9b39.o\n  \"Catch::AutoReg::~AutoReg()\", referenced from:\n      _cxx_global_var_init.1 in main-bf9b39.o\n  \"Catch::Session::run(int, char)\", referenced from:\n      _main in main-bf9b39.o\n  \"Catch::Session::Session()\", referenced from:\n      _main in main-bf9b39.o\n  \"Catch::Session::~Session()\", referenced from:\n      _main in main-bf9b39.o\n  \"Catch::StringRef::StringRef(char const)\", referenced from:\n      _CA_T_C_H__T_E_S_T_0() in main-bf9b39.o\n      Catch::BinaryExpr const Catch::ExprLhs::operator==(int const&) in main-bf9b39.o\n      cxx_global_var_init.1 in main-bf9b39.o\n  \"typeinfo for Catch::ITransientExpression\", referenced from:\n      typeinfo for Catch::BinaryExpr in main-bf9b39.o\n  \"vtable for Catch::ITransientExpression\", referenced from:\n      Catch::ITransientExpression::ITransientExpression(bool, bool) in main-bf9b39.o\n  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n```. On the other hand, the single-include version works for me, no linker errors.. ",
    "aacirino": "I have this problem too, basically the same errors with a test as simple as this\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\nTEST_CASE(\"Failing test\", \"[failing]\") {\n  REQUIRE(0 == 1);\n}\n```\nI am on macOS El Capitan 10.11.6, clang 5.0.1 and cloned the latest Catch2 from git. I was able to solve my issue. I am using meson and precompiled headers. Excluding the catch include from the list of precompiled headers solve my problem. \nIn this regard, how should I use catch with precompiled headers?. As I often do, I didn't pay enough attention to the documentation. Now everything is smooth with meson building my library with the precompiled headers and testing it as it should. Thanx a lot.. Better said then done. My MacBook is OK, but my desktop is too old to upgrade to 10.12 and it is my main development computer. I updated LLVM to 6.0 and got rid of the first issue (error: no template named 'optional' in namespace 'std') but the uncaught_exceptions remains. It is weird, since I am not using Apple's stock LLVM installation and I am relying on LLVM installed by homebrew, that I thought would bring in the solution to this issue with its libc++.. By inspecting LLVM's libraries it indeed seems that the only solution to be able to use C++17, Catch2 and macos is to upgrade to macos 10.12. For the moment I will fork Catch2 and change Catch's uncaught_exceptions to use the pre-C++17 version. I will also look for a way to detect macos version and circumvent the issue.. I've put #define CATCH_CONFIG_NO_CPP17_UNCAUGHT_EXCEPTIONS in my pre-compiled header and it worked fine with no need to change Catch2. I still haven't found a way to detect the macos version at compile time.\nThanx guys for your help.. ",
    "ornamentist": "Taking the hint from above I changed -I.../include to -I.../single_include and the linker errors went away.  (clang++ on MacOS).. ",
    "SoapGentoo": "\nGNUInstallDirs just enables the GNU conventions, that is, being able to change installation directories etc. Given that by default, it currently doesn't change anything, users don't see visible changes. This might be important for us if we want to install different versions of Catch side-by-side etc. So however it worked before on Windows, it works the same way still\nSo shall I change the default ENABLE_WERROR then?\nWhich externally used option do you mean?. @horenmar I can add some boilerplate code to create a backwards compatibility for NO_SELFTEST. Do you mind me changing the name of the project to \"Catch2\" (or whatever you like), such that the documentation is installed in a suitable directory.. @horenmar all done, the old variables continue to work but display a deprecation notice. @horenmar now that distributors can build Catch2 without -Werror,would it be possible for you to issue a patch release 2.1.1 so we can package it?. @horenmar thanks!. @horenmar line removed. @horenmar done. @philsquared great, pls before the 2.1.1 release!. std::uncaught_exceptions is a C++17-only feature, hence you will need to dispatch this on __cplusplus. 1. -I[include path] vs -isystem [include path] has mostly only to do with warnings and hiding those of dependencies beyond your control.\n-isystem cannot be specified cleanly in build systems (except in CMake, but pkg-config in CMake is a minefield anyway)\nWhether the API is to use #include \"catch.hpp\" or #include <catch/catch.hpp> is the choice of the library designers (although I personally prefer #include <catch/catch.hpp> for namepsacing reasons). I think the fact is that when pkg-config support was added, the /catch addition to includedir was just forgotten.. @horenmar I still think this approach is the best one to avoid changing a ton of #include decls, and allwos compatibility with -isystem. Fixed with https://github.com/catchorg/Catch2/commit/319bddd5b89e0a89e1e6e4badf4930242d081664. 1. CMake config files are an anti-pattern that don't scale to other buildsystems and are mostly just a waste of time, and the code this PR adds is 100x more complex than the pkg-config file.\npkg-config + pkg_check_modules can do all of that already, and is generalisable to other build systems\nWhy do you want to use target_link_libraries()? The whole point of Catch2 is to be header-only\nThe pkg-config file should be fixed to specify the /catch dir for the includedir. Personally I don't mind either way from a distribution point of view - just be aware that if you're supposed to use catch2/catch.hpp, then trying to use it with CMake's SYSTEM directive will cause -isystem /usr/include to go up in a big explosion, due to the way GCC handles special system headers (math.h etc see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70129). Staying with the current approach would allow -isystem. Personally I don't consider -isystem compatibility that important, given how Catch tries to be warning-free by design.. @MikeGitb that's fine with me, might just be a lot of nesting for many people. @horenmar what do you say about @MikeGitb's suggestion? The only real downside is the deep hierarchy, otherwise it pleases everyone really.. Personally I would go with #include <catch2/catch.hpp>, because it allows for introducing #include <catch3/catch.hpp> when the API changes so drastically that you need to change significant portions of consuming code. It also makes the requirement clear at a glance without having to dig through the build system (\"Oh I need modern Catch2 here\").. @horenmar do you mind a PR to start moving the headers and installation paths?. @horenmar the CI seems to always time out on the same clang config. 1. redefining language identifiers is a bad idea (and this might lead to weird clashes). I would use catch_uncaught_exceptions\nTry and centralise this in a header shared by all instead of defining it three times in a row.. catch_uncaught_exceptions?. \n",
    "ignatenkobrain": "There are people who package catch and they run cmake and that is failing on Fedora with\ncpp\n[ 71%] Building CXX object CMakeFiles/SelfTest.dir/include/internal/catch_tag_alias_autoregistrar.cpp.o\n/usr/bin/c++   -I/home/brain/Projects/fedora/rpms/catch/Catch2-2.1.0/include  -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic   -Wall -Wextra -Wunreachable-code -Werror -std=c++11 -o CMakeFiles/SelfTest.dir/include/internal/catch_tag_alias_autoregistrar.cpp.o -c /home/brain/Projects/fedora/rpms/catch/Catch2-2.1.0/include/internal/catch_tag_alias_autoregistrar.cpp\nmake[2]: Leaving directory '/home/brain/Projects/fedora/rpms/catch/Catch2-2.1.0/build'\n/home/brain/Projects/fedora/rpms/catch/Catch2-2.1.0/include/internal/catch_commandline.cpp: In member function 'Catch::clara::detail::ParserResult Catch::clara::detail::BoundLambda<L>::setValue(const string&) [with L = Catch::makeCommandLineParser(Catch::ConfigData&)::<lambda(bool)>]':\n/home/brain/Projects/fedora/rpms/catch/Catch2-2.1.0/include/internal/catch_commandline.cpp:138:67: error: 'temp' may be used uninitialized in this function [-Werror=maybe-uninitialized]\n             | Opt( [&]( bool flag ) { config.showDurations = flag ? ShowDurations::Always : ShowDurations::Never; }, \"yes|no\" )\n                                                              ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /home/brain/Projects/fedora/rpms/catch/Catch2-2.1.0/include/internal/catch_clara.h:26:0,\n                 from /home/brain/Projects/fedora/rpms/catch/Catch2-2.1.0/include/internal/catch_commandline.h:12,\n                 from /home/brain/Projects/fedora/rpms/catch/Catch2-2.1.0/include/internal/catch_commandline.cpp:9:\n/home/brain/Projects/fedora/rpms/catch/Catch2-2.1.0/include/internal/../external/clara.hpp:751:17: note: 'temp' was declared here\n         ArgType temp;\n                 ^~~~. tests are run as part of build process ( packaging).. ",
    "dcopp": "I ran into this in another context with really unexpected consequences.\nIt appears that section traversal is different when a section fails an assertion: Catch rewinds to the enclosing section and executes again, skipping the offending section. In your case when A.1 fails Catch rewinds to A, executes that again (producing a duplicate success for the 0 == 0 assertion), then continues normally.\nThis can have very unfortunate consequences for the uninitiated:\n```\nTEST_CASE(\"root\") {\nSECTION(\"A\") {\n\n    char* oops = new char[1024];\n\n    SECTION(\"A.1\") {\n\n        delete[] oops;\n        REQUIRE(false);\n\n    }\n}\n\n}\n```\nThe above code appears perfectly safe -- but valgrind will report a leak due to Catch's rewind/restart after exception.\nThe rewind/restart is the correct thing to do if further sections exist at the same level as the one that failed. But in this case Catch executes an entire \"container\" section omitting all its children. Catch never does this on a normal, successful run.\nThis behavior is the same in both 1.10 and 2.1.1.. Very interesting. All righty, I'll continue mitigating via \"end user education\" then. Thanks for responding.. Agreed. And I always do. Just not when illustrating landmines. :)\nFor unwinding more complex bits a dummy unique_ptr with a deleter lambda does the dirty work nicely.. ",
    "JLospinoso": "@SoapGentoo That seems right. Attempting with https://github.com/catchorg/Catch2/pull/1163/commits/6ffc45a10cedd9a5e7ed3ad4ddb43b6f508e3b2a. Also removed warning suppression since this should satisfy.. @SoapGentoo Ok -- https://github.com/catchorg/Catch2/pull/1163/commits/83614d40a2dce74f15fb66adfda11fea82f19f3b. \nHow do I squash the commits together once its all working?. @SoapGentoo What else is needed to add the header to the build?. @SoapGentoo Ok, I think I've fixed the single include, if this passes and you don't see any other changes, I'll squash commits.\nAs an aside, maybe it would be good to mention in docs/contributing.md something about generating the single header, like:\nscripts > python generateSingleHeader.py. @SoapGentoo So it looks like most of the CI instances are passing, a few had this error:\nNo output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.\nCheck the details on how to adjust your build configuration on: https://docs.travis-ci.com/user/common-build-problems/#Build-times-out-because-no-output-was-received\nIs this related to my patch? Would appreciate your help in closing this one out!. @horenmar Ok thank you! Pls let me know if you're too busy to make changes, I can attempt.. @SoapGentoo Are we allowed to modify this header? Not sure if this is generated on a per-release basis. If so, probably need to revert all the changes when I squash the commit.. ",
    "xorz57": "@JLospinoso You could give GitKraken a try (I found it easy to squash commits with this software).\nhttps://www.youtube.com/watch?v=cr1N8VTRmfM. Yeah I would like this feature as well!. ",
    "djrollins": "I hit a similar problem when creating a 'linkable' CMake target in my PR (#1170), so I'd appreciate this change as well.. Example usage of the target here: https://github.com/djrollins/catch-cmake-usage. @SoapGentoo:\nSome poeple don't like pkg-config and this just adds another option for people with CMake-based projects and want a familar system for managing dependencies.\nIn 'Modern CMake' find_package() and target_link_libraries() are often considered a way of simply stating your dependencies and having all of their dependencies transitively added your your targets through a single unified interface. Whether it is static, dynamic or header-only doesn't matter because CMake should just Do The Right Thing.\nEDIT: This also allows to client to use the same target_link_libraries() command whether are using an installed version of Catch or including it as a sub-project.\nI don't suggest that this should replace pkg-config or that it is generalisable to other build systems. I only believe that this makes Catch so much easier to use in CMake-based projects and I like it when libraries I use support it.\n@lilianmoraru:\nThanks for the feedback.\nI opened this PR early to see if it would be considered because I love it when libraries support find_package and target_link_libraries. I am happy to make the changes you have suggested if there is interest this sort of support.. @lilianmoraru Thank you for the support.\nI've pushed up changes that clean up the export set code and to set the installed include directory to 'include/catch' as per your feedback.\nWith regards to exporting them as system headers, I looked into it and found this would be redundant as there is already a system_header pragma in catch.hpp that suppresses the warnings.\nI agree with putting the installation stuff behind an if(NOT_SUBPROJECT), however this alread an open PR for this and I will make the change once that is accepted.\nThanks again for your feedback.\n@horenmar, do you have any thoughts on this?. @horenmar Thank you for the great feedback. I am happy to see that there is interest. You can see all of the CMAKE_CXX_KNOWN_FEATURES per-version here. I personally would like to use cxx_std_11 as Catch2 is advertised as requiring the whole of C++11 standard rather than just specifc parts of it, but that was only introduced CMake 3.8. A huge and unnecessary jump in versions.\n@gabm and @lilianmoraru, with respect to horenmar's points, how do you feel about the following:\n1) Settling on Catch2::Catch as the target name. I think most find_package scripts are designed to be searched using the namespace rather than a specific target (e.g. find_package(Catch2)), so we'd need to also have the export file be called Catch2Config.cmake (Moving to PascalCase to match the target name). Happy to go with concensus here.\n2) Exporting both include and include/catch so that clients have the choice whether they namespace the include directive or not. This keeps the old functionality stable for those that prefer it, but also allows people to use the same unnamespaced include directive whether they are using catch as an installed library or as a sub-project.\n3) Do we want to include more features in the feature list? Whilst unnecessary because even just one would be enough to transitively add the required flags, it could be nice to document which features are used in Catch.\nEDIT:\n4) I was also thinking that we could also export the headers under a directory that contains ${PROJECT_VERSION} and an option to clobber the default version, so clients can have multiple versions of Catch2 installed. Though this may be worth keeping out of this PR and done in the future if people actually request it.. @gabm Re: point 3, I was talking about the list of features like cxx_decltype in the target_compile_features command rather than cramming more stuff in this PR. Sorry it wasn\u2019t clear. . No worries. Thanks for the feedback. I\u2019m away from a computer until tomorrow afternoon. I\u2019ll make the changes then. . @horenmar @gabm @lilianmoraru \nI have have made the changes outlined above. I have also tested and confirmed installation working on Arch Linux, OSX and Windows. If we're all in agreement then I'll can squash the commits for merging.\nCheers.. Having run some tests it does seem like the current version will break if Catch is installed whilst it is a subproject. The ConfigVersion.cmake file is written into the ~main~ sub-project's build directory and then cannot be found.\nI think the fix I'd prefer is to explicity write the ConfigVersion.cmake file into the ${CMAKE_CURRENT_BINARY_DIR} directory and ~leave the install(FILES) alone~ have install(FILES) also install from that directory. I think being explicit about directories is preferable over relying on CMake's (undocumented?) defaults.\nwrite_basic_package_version_file(\"${CMAKE_CURRENT_BINARY_DIR}/Catch2ConfigVersion.cmake\"\n    COMPATIBILITY SameMajorVersion)\nEDIT: My brain isn't working today. The install(FILES) does still need to be changed to use ${CMAKE_CURRENT_BINARY_DIR} as well.. ",
    "esemeniuc": "same here :+1: . ",
    "dandee": "Works perfect - thanks!. ",
    "gegles": "Yep, that did it! Thx. Sorry I missed that (I think I was on an old revision...). ",
    "lilianmoraru": "Could you please re-run the builds that hang at CMake download? So we can get those green ticks?. I like the \"subproject\" fix but the includepath is debatable.\nThe tutorial does mention using #include \"catch.hpp\" but the fully qualified path is more reliable in my own opinion.\nWhat I am saying is that I personally think that it might be better to change the suggestion in the tutorial.\nI would also like to note that this is a breaking change(not API-wise but it will break people's compilation).\nThe counter-argument: this would allow to mark this include path as a system include path, thus silencing any warnings for the user, that the headers might generate(ex: future toolchains, additional warnings that the user might use and doesn't want to see from code that they don't \"own\", etc).\nI actually convinced myself. It would be nice to have this include path, even if it is breaking, if instead of -I[include path], it uses -isystem [include path].. I was actually planning to do this today after work :)\nA few notes:\n- I think target_include_directories should do SYSTEM INTERFACE  include/catch(not exact command) - include/catch because that's how the tutorial wants you to use it and SYSTEM to mark this as a system directory, so those that don't \"own\" the Catch2 source, won't get warnings generated by its source.\nI prefer #include <catch/catch.h> but I personally think it is more important to mark it as a system directory(which you shouldn't if it is just include, which will mark that entire directory as a system directory) than to have the fully qualified path( can't have both :( unless you create a directory structure something like include/catch/catch/catch.h, and then mark -isystem include/catch, lol ).\n- You can avoid the cmake-config.cmake.in(and the helper function stuff) if you do:\n```cmake\ninstall(\n    TARGETS      catch\n    EXPORT       FindCatch2\n    DESTINATION  lib\n)\ninstall(\n    EXPORT       FindCatch2\n    NAMESPACE    catch::\n    DESTINATION  lib/cmake/Catch2\n)\n``\n- I was planning to add this underNOT_SUBPROJECT, thus this install step to run only when the project is not used as a subproject.. @djrollins I think this PR is a must(considering that most in the C++ community use CMake).pkg-config` is just the last resort, this is way better - the product should tell you how you should use it(correct include paths, transitive dependencies, compiler flags, C++ standard dependencies, etc...) and that is what CMake targets are good at. I should just express the target I depend on, not to add include paths manually and then break when a refactoring happens...\nTry to define something like the target_compile_features line you added, in pkg-config...\n@djrollins Ignore trolling, this PR is necessary.. @djrollins I don't work with Windows toolchains but from what I know, it doesn't have the concept of C++11, C++14, etc... It just supports features - my guess is that's why CMake added these checks.\nconstexpr could be missing with VC++[some version] Patch 1 but to be available with Patch 2.\nHaving per feature checks seems better to me, unless it is a big burden to take care of correctly setting and maintaining these.\nThe rest:\n1. No opinion - I think the main maintainers should decide here(although, I do like a simple find_package(Catch2)).\n2. I personally think that it should be how the tutorial mentions it - adding the \"root\" include path(to be able to do catch/catch.hpp) might introduce surprises(picking headers the user didn't want).\n3. Yes?(Helps with Windows support?)\n4. No opinion(although I imagine this will complicate the lives of those that do tooling stuff around Catch).. It is squashed now.. ",
    "gabm": "I agree that requiring the whole C++11 standard is sufficient and reasonable.\n\n\nCatch2::Catch sounds great to me, using namespaces is common practise and makes sense... \n\n\nsounds good..\n\n\nI always prefer to create minimal solutions to the problems we have and extending more features when needed. Currently i think the availability of package configs is the most important\n\n\nOn 3 February 2018 11:54:17 CET, \"Daniel J. Rollins\" notifications@github.com wrote:\n\n@horenmar Thank you for the great feedback. I am happy to see that\nthere is interest. You can see all of the CMAKE_CXX_KNOWN_FEATURES\nper-version\n[here-(https://cmake.org/cmake/help/v3.1/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html#prop_gbl:CMAKE_CXX_KNOWN_FEATURES).\nI personally would like to use cxx_std_11 as Catch2 is advertised as\nrequiring the whole of C++11 standard rather than just specifc parts of\nit, but that was only introduced CMake 3.8. A huge and unnecessary jump\nin versions.\n@gabm and @lilianmoraru, with respect to horenmar's points, how do you\nfeel about the following:\n1) Settling on Catch2::Catch as the target name. I think most\nfind_package scripts are designed to be searched using the namespace\nrather than a specific target, so we'd need to also have the export\nfile be called Catch2Config.cmake (Moving to PascalCase to match the\ntarget name).\n2) Exporting both include and include/catch so that clients have\nthe choice whether they namespace the include directive or not. This\nkeeps the old functionality stable for those that prefer it, but also\nallows people to use the same unnamespaced include directive whether\nthey are using catch as an installed library or as a sub-project.\n3) Do we want to include more features in the feature list? Whilst\nunnecessary because even just one would be enough to transitively add\nthe required flags, it could be nice to document which features are\nused in Catch. \n-- \nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/catchorg/Catch2/pull/1170#issuecomment-362797753\n. woops, then: never mind.. sry for the noise.. woop, I'm sorry - didnt see this one :+1: . \n",
    "csk-ableton": "That was a really quick response, thanks!. ",
    "mikezackles": "Reopening as the travis failure seems fishy.. I did some debugging on this, and it is almost certainly an upstream bug, so feel free to close this as far as I'm concerned. In fact it seems that the entirely wrong exception translator gets triggered because the wrong catch clause is taken in ExceptionTranslator. So we end up in the CustomStdException handler calling CustomStdException::getMessage on a std::domain_exception, where CustomStdException::m_msg is garbage. See google/sanitizers#919.. No problem! It gave me an excuse to poke around a bit.. ",
    "sfinkens": "What about a combination of both relative and absolute tolerance like in numpy.isclose?. ",
    "adaptiverisk": "I just updated from version 1 of Catch and now tons of my tests fail because of this issue. Previously \nREQUIRE(epsilon == Approx(0.0)) would pass, but now it doesn't.. ",
    "Ignition": "I may be missing something obvious, but is there a good reason why you have both Catch2 and Celero in the same translation unit?. ",
    "rusq": "Tested with Catch2 v1.12.0  - issue doesn't reproduce (works OK).\nWe'll probably switch to 1.x branch for now.\nUPD: Switched to 1.x and now it's broken on VS2017, oh well \ud83d\ude02. Hi @horenmar, thanks for your reply.\nUnfortunately it is not possible for me to update the GCC on that AIX machine.\nTo workaround these two misfortunes I resorted the following construct:\n```cpp\nifdef _AIX\ninclude \"catch1x.hpp\"\nelse\ninclude \"catch.hpp\"\nendif\n```\nRe windows - it is possible that I messed up command line parameters, but this does work with Catch2 2.1.2, but with Catch2 1.12 it generates the list of errors which can be observed below.\nThe Windows compiler is this:\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.12.25831 for x64\nCopyright (C) Microsoft Corporation.  All rights reserved.\nI use batch file to compile:\nset ZLIB=C:\\zlib\nset INCLUDE=%ZLIB%\\include;..;..\\..\\Utils;..\\..\\catch2;%INCLUDE%\nset LIB=%LIB%;%ZLIB%\\lib\ncl Logger_catch2_test.cpp /EHsc /Zi /DEBUG /link /MACHINE:X64\nPlease see the output attached output.txt. ",
    "christoph-conrads": "Catch2 v2.3.0, Linux Mint, g++ (Ubuntu 4.8.4-2ubuntu1~14.04.4) 4.8.4, CMake 3.7.2.\nThe attachment contains the output of ctest -V -R Approval --output-log ~/catch2.issue1194.txt.\ncatch2.issue1194.txt\nThe error also occurs with Ubuntu clang version 3.4-1ubuntu3 (tags/RELEASE_34/final) (based on LLVM 3.4) (-Werror must be disabled).\n. I am using an out-of-source build. Thus, maybe this is a duplicate of #1200.. > We could in that very specific case. It wouldn't add a lot of extra complexity.\n\nBut then what about the next case ... and the next. It's not a general solution. I think your case is fairly rare, and there's an easy workaround, so I don't think it justifies special-casing it.\nI could be persuaded otherwise if it turns out it's not such a rare case, though.\n\nNot supporting logical AND makes sense because you can use multiple CHECK and REQUIRE statements. If one these statements fail, the error message will be shorter and just from the line number you can tell which test failed. A logical OR cannot be replaced this way.\nI specifically searched for this issue here because I hit on this problem when implementing a state machine.. This is a good reason not to overload logical operators.. ",
    "Osovich": "Great! So... Is there a special way of doing the PR if all I want to do is translate files?. ",
    "jjangulo": "Sorry guys, scratch this. I just realised I can use the NOMINMAX macro to signal the window.h header not to define those. Including the header and the macro seems to work. ",
    "MikeGitb": "Considering that a test file usually contains much more code than just the include I find it strange that people get annoyed if they have to type a few characters more once in a while, but I'm using an IDE with auto complete, so that might skew my view. \nThanks for the explanation anyway. I'll consider it for my own library.. @SoapGentoo: Maybe I missunderstood you, but we might think of different implementation strategies:\nIf a packet manager / distributor wants to switch from \"catch.h\" to \"catch2/catch.h\" the way that seems most logical to me would be to move the file from \"$BaseDir/catch.h\" to \"$BaseDir/catch2/catch.h\". Any include directives should stay the same as before, so this should not pose any new problems. This might also be beneficial if someone wants to install both catch and catch2 in parallel (or it might just be more confusing).\n@horenmar: Thanks for making those changes. At least for cmake I believe the default workflow for any external dependency should be\nfind_package(LIB_NAME)\ntarget_link_libraries(my_app LIB_NAME::lib)\n\nand then\n#include <LIB_NAME/header_file123.h>\n\nNo matter whether it is a \"normal\" library, a header only one or just a single header one - unfortunately standardization in that matter is exactly what c++ lacks, but it seems to be the emerging default. As you and other's pointed out, it isn't that big of a deal in the end as one can easily just copy the single headerfile in the right folder and be done with it but I prefer uniformity when possible. \nAs this was mainly about satisfying my curiosity, the issue can be closed, as far as I am concerned, but if you are interested in further discussions on this you can of course leave it open.\n. I'd be particularly interested in whether you want indeed go for #include <catch2/catch.hpp> or #include \n<catch/catch.hpp>  as I'd like to apply this to the port provided by vcpkg. I'd also prefer that, but currently the CMakeLists.txt still usese catch which is why I held of the PR to vcpkg (which currently just puts catch.hpp directly into the include directory).. That was exactly my plan, but iirc, currently the git repo / cmake based installation will install it to include/catch not include where it is currently placed in vcpkg. This is why I held off a PR to prevent two path changes in short succession.\nAnyway: Good to know, you'll take care of it.. Any updates or an Idea when this change might happen. Is this something I can help with?. Not sure why this is happening, but as far as I can tell, catch.hpp gets installed to \n<install_prefix>/include/catch2/catch2/catch.hpp\n\nand when using the \nfind_package(Catch2) \ntarget_link_library(my_app Catch2::Catch2)`\n\nmechanism the user has to write \n#include <catch2/catch2/catch.hpp>\n\nA quick fix that worked for me was to change this\nhttps://github.com/catchorg/Catch2/blob/57ff9d054e92b36f121f4d75881d6ac9c87ff8d1/CMakeLists.txt#L73-L77\nto\ntarget_include_directories(Catch2\n  INTERFACE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/single_include>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/catch2> \n). Interesting. Will try to reproduce it later.\n\nHow did you set the installation prefix?. Thanks!. FYI: I added a PR to vcpkg to update catch to release 2.3: https://github.com/Microsoft/vcpkg/pull/3959. So, what needs to be done/decided to close this issue?. ping @philsquared\nImho the split up of the cmake file and other directory names have little to do with the official include path. So if the are things that need discussion that should probably happen in a separate issue. . ",
    "alexander-titov": "Hi,\nI have a similar problem. I am using Catch under CLion.\nLinking time w/ Catch is extremely long (>2 mins for a trivial test).\nExample\n\n\nCompiling a trivial main.cpp. Build finished in 772ms\n\n\nCompiling main.cpp with catch.hpp:\n#define CATCH_CONFIG_MAIN\n    #include \"../Catch2/single_include/catch.hpp\"\nBuild finished in 2m 32s 812ms (!!!)\n\n\nAdding a simple test.cpp:\n```\n\n\ninclude \"../Catch2/single_include/catch.hpp\"\nTEST_CASE( \"Simple math\", \"\" ) {\n    REQUIRE( 2 + 2 == 4);\n}\n```\nBuild finished in 2m 4s 211ms (!!!)\n\nModifying test.cpp:\nBuild finished in 2m 0s 729ms\n\nMost of the time is spent on linking.\nConfiguration\n\nCatch: v2.2.1\nOS: Widows 10, MinGW-w64, 64bit\nMinGW: mingw-w64\\x86_64-7.2.0-posix-seh-rt_v5-rev1\nClion: CLion 2017.3.4 Build #CL-173.4674.29\nCompiler+version: GCC 7.2.0\n. \n",
    "xylosper": "OK. Thanks a lot.. ",
    "iphorde": "mingw-w64 in version 7.2 and 7.3 LTO is completely broken.  Also, the link times are horrible without LTO, to the point of it not being usable. I have to wait 4 minutes for it to link, compared to under MSVC++ the same projects links in less than 20 seconds.\n. ",
    "nano-bot": "The only reasonable for me to use mingw and catch2 is to create a shared library and compile the whole subtree from here https://github.com/catchorg/Catch2/tree/master/include (not a single header file because it's awfully slow). Tests compile and run within milisecond . ",
    "zemasoft": "Re 1.: This looked to me as a systematic solution but sure, I can:\n1. Define stdx::nextafter locally in the test.\n1. Make use of using std::nextafter or using ::nextafter locally in the test.\nRe 2.: This is bit unclear to me. Shall I define isnan in include/internal/catch_uncaught_exceptions.h inside Catch namespace?. There is still one technical issue left, probably related with the infamous regex issue, but it demonstrates quite nicely how it looks on DOSBox:\n\n. Sure, I will squash the PR somehow. I will also have some comments later.\n. 1) Regex issue\nI did a test with DJGPP for gcc 7.2.0 and with \"plain\" gcc 7.2.0 and all the macros and constants used in that fiiine guard are exactly the same. But the thing does not work for DJGPP and works for \"plain\" gcc. So I decided to just skip those tests for DJGPP and I made a clear separation of those guards.\n2) NaN issue\nIt is really a long story but to put it short: DOSBox is wrong when comparing floating point numbers which are NaN. It was not a problem of DJGPP but of DOSBox which is emulating the CPU and is doing something wrong. I made some tests to prove that and I will inform DOSBox folks about that.\nAnyhow, I think that Catch should really not workaround this issue. The user will be facing it anyway, not only when using Catch.\n3) DJGPP support notes\n    * Catch2 is now ready to be used with DJGPP for gcc 7.2.0.\n    * All the tests and examples were tested on FreeDOS with success.\n    * Some tests are failing on DOSBox due to the NaN issue but the product itself can be used there.\n    * Since DJGPP is a cross compiler, user has to supply cmake with -DCMAKE_SYSTEM_NAME=Generic to be able to build Catch with it, see https://cmake.org/Wiki/CMake_Cross_Compiling.. Thank you for your willingness to support this idea and for Catch2 in general.\nRegarding the Nan issue:\nIt is not only that std::isnan is wrong. That is only a symptom of much bigger issue DOSBox have when dealing with NaN numbers on its emulated CPU level.\nI have already received an answer to my email:\n\nI am aware that NAN is probably being wrong, mostly because it isn't tested very often for by games.\n\nI agree that retro games (and that is after all the main purpose of DOSBox - retro gaming) tend to stay away from using floating point arithmetic in general and especially from such edge cases. Therefore I am not sure whether they/he/she will be willing to fix that but let's see.. Yes, this is not needed. I just wanted to be consistent with mentioned POSIX signals :-). Yes, g++ defines __STRICT_ANSI__ whenever supplied with -std=c++.. but not when supplied with -std=gnu++.. which can be controlled with CMake's CXX_EXTENSIONS. It can also be forced using -ansi flag.\nAnyhow, this condition should guarantee that isatty is not used only if __DJGPP__ && __STRICT_ANSI__.  . My intention was to give the compiler a better change to compile out the logic but I din't realize how smart compilers are these days. I can now confirm that it can compile this out even when using std::memcpy (at least gcc can). I've proven that using https://godbolt.org/.. ",
    "Bronek": "I think that my console is simply ignoring an invalid UTF-8 code. In UTF-8 (which is explicitly declared at the start of the document), a codepoint starting with 0xF (i.e. all 4 initial bit set) is expected to be composed of 4 bytes. Here we have single byte starting with 0xF, i.e. invalid UTF-8 character. This character should have been escaped (into valid UTF-8 codepoint) or simply written out as an integral value rather than string.. Fixed with 9171e9b . It appears that ./scripts/approvalTests.py is reporting lots of bogus differences, or I misunderstood something in contributing.md. Anyway, I've updated the commit with hand-crafted changes in the Baselines directory.. I do not know how to recognize a valid UTF-8 sequence, and looking at Unicode FAQ I suspect this can be rather complex. Also, what do you want to do if user simply wanted to perform a check on an integral type such as e.g. uint8_t or int8_t, as reported originally? Note, overloading for those is not a great solution because in some implementations either of these could a typedef char. So, in the interest of simplicity, I think it is best to simply show a numeric sequence.. I found a rather compact UTF-8 validity test at http://bjoern.hoehrmann.de/utf-8/decoder/dfa/ which perhaps could be ported/added to Catch2, but I suppose this is outside of the scope of the issue being fixed here.. Thank you, I reviewed your code and it looks good.. ",
    "sd-x": "I'm using -fno-exceptions and see the same problem; this reproduces the problem for me:\na.cpp:\n```C++\ndefine CATCH_CONFIG_MAIN\ninclude \"catch2/catch.hpp\"\nTEST_CASE(\"doomed\", \"[tag]\") {\nSECTION(\"only section\") {\n    REQUIRE(false);\n  }\n}\n``\n    > g++ --version\n    g++ (GCC) 7.3.0\n    Copyright (C) 2017 Free Software Foundation, Inc.\n    This is free software; see the source for copying conditions.  There is NO\n    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n    > g++ -fno-exceptions -I../Catch2/single_include a.cpp\n    > ./a.out -r junit\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    terminate called without an active exception\n    <testsuitesa.out: ../Catch2/single_include/catch2/catch.hpp:4463: void Catch::CumulativeReporterBase<DerivedT>::testCaseEnded(const Catch::TestCaseStats&) [with DerivedT = Catch::JunitReporter]: Assertionm_sectionStack.size() == 0' failed.\n    Aborted (core dumped)\n. ",
    "andriscewo": "I feel stupid now. I switched to the branch but looked in the tutorial. Sorry for the inconvenience and thanks for the answer.. ",
    "chronoxor": "Build still fails. I also tried with clang 6.0 result is the same:\n-- The C compiler identification is Clang 6.0.0\n-- The CXX compiler identification is Clang 6.0.0\n-- Check for working C compiler: /usr/bin/clang-6.0\n-- Check for working C compiler: /usr/bin/clang-6.0 -- works\n-- Check for working CXX compiler: /usr/bin/clang++-6.0\n-- Check for working CXX compiler: /usr/bin/clang++-6.0 -- works\n/home/travis/build/chronoxor/CppServer/modules/Catch2/single_include/catch.hpp:5787:62: error: no template named 'optional' in namespace 'std'\n    inline auto convertInto( std::string const &source, std::optional& target ) -> ParserResult {\n                                                        ~~~~~^. Travis config to reproduce the issue:\n```\nsudo: required\ndist: trusty\nos: linux\ncompiler: clang\nenv: OS=linux COMPILER=clang CLANG_VERSION=6.0\nsources:\n  - ubuntu-toolchain-r-test\n  - llvm-toolchain-trusty-6.0\npackages:\n  - clang-6.0\n  - libc++-dev\n  - libc++abi-dev\nbefore_install:\n  - export CC=\"clang-${CLANG_VERSION}\" CXX=\"clang++-${CLANG_VERSION}\"\n  - pushd .\n  - git clone --depth=1 https://github.com/llvm-mirror/llvm.git llvm-source\n  - git clone --depth=1 https://github.com/llvm-mirror/libcxx.git llvm-source/projects/libcxx\n  - git clone --depth=1 https://github.com/llvm-mirror/libcxxabi.git llvm-source/projects/libcxxabi\n  - mkdir llvm-build && cd llvm-build\n  - cmake -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_INSTALL_PREFIX=/usr ../llvm-source\n  - make cxx -j2\n  - sudo make install-cxxabi install-cxx\n  - popd\n```\n. Looks like the same - https://github.com/catchorg/Catch2/issues/1214. Travis config to reproduce the issue:\n```\nsudo: required\ndist: trusty\nos: linux\ncompiler: clang\nenv: OS=linux COMPILER=clang CLANG_VERSION=5.0\nsources:\n  - ubuntu-toolchain-r-test\n  - llvm-toolchain-trusty-5.0\npackages:\n  - clang-5.0\n  - libc++-dev\n  - libc++abi-dev\nbefore_install:\n  - export CC=\"clang-${CLANG_VERSION}\" CXX=\"clang++-${CLANG_VERSION}\"\n  - pushd .\n  - git clone --depth=1 https://github.com/llvm-mirror/llvm.git llvm-source\n  - git clone --depth=1 https://github.com/llvm-mirror/libcxx.git llvm-source/projects/libcxx\n  - git clone --depth=1 https://github.com/llvm-mirror/libcxxabi.git llvm-source/projects/libcxxabi\n  - mkdir llvm-build && cd llvm-build\n  - cmake -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_INSTALL_PREFIX=/usr ../llvm-source\n  - make cxx -j2\n  - sudo make install-cxxabi install-cxx\n  - popd\n```\n. Maybe this workaround will help you:\nifdef __clang__\ndefine CATCH_CONFIG_NO_CPP17_UNCAUGHT_EXCEPTIONS\nendif. It can be easily made with a following CMakeLists.txt\n```\ncmake_minimum_required(VERSION 3.1)\nproject(Catch2 LANGUAGES CXX VERSION 2.2.1)\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\ndefine some folders\nset(CATCH_DIR ${CMAKE_CURRENT_SOURCE_DIR})\nset(HEADER_DIR ${CATCH_DIR}/include)\nlibrary\nfile(GLOB_RECURSE SOURCE_FILES \"${HEADER_DIR}/*.cpp\")\nadd_library(catch ${SOURCE_FILES})\ntarget_include_directories(catch PUBLIC ${HEADER_DIR})\nset_target_properties(catch PROPERTIES FOLDER static)\n```. ",
    "arnavb": "Well that was quick. Thank you! \ud83d\udc4d . @phcerdan Yeah, we have to wait until Sunday/Monday. \ud83d\ude01 . UPDATE:\nWell, this problem no longer exists for me, since I switched to doctest which was much faster and could handle the flags.\nI'm still leaving this issue open since it isn't resolved yet.. ",
    "Nadav-Ruskin": "Should I report a bug here?. Thank you for the suggestion. I'll see if applicable.. OK, this is a non-bug. https://github.com/android-ndk/ndk/issues/648 solved it. Apparently NDK has to use --stl libc++ for proper C++11 support.. ",
    "Manu343726": "FYI I have reproduced the same error using a gcc5 docker image with a conan cross compiling toolchain for armv7 (This image, which is based on the conan docker image for gcc5 on armv7), using single-header catch2 v2.0.1. ",
    "owo": "Thanks. For some reason git didn't pull the latest version.. ",
    "HawkDeath": "Thanks, it works.  :+1: . ",
    "Jofagi": "Sorry, I had a fundamental misunderstanding of what ULP means. I mistook \"units in last place\" for \"the last decimal places\".\nAgain, sorry for causing a stir...  \ud83d\ude33 . ",
    "martin-ejdestig": "Reported https://bugs.llvm.org/show_bug.cgi?id=39201 upstream.. It still reproduces with Clang 7.0 and Catch2 2.4.1.. ",
    "devinbostIL": "I got the version of catch by running cd to the master branch of PyTorch (pulled from the repo and method cited above):\n/c/src/pytorch_source/pytorch-scripts/pytorch (master)\nand then running:\n$ git submodule status aten/src/ATen/utils/catch\nwhich returned:\n0a34cc201ef28bf25c88b0062f331369596cb7b7 aten/src/ATen/utils/catch (v2.0.1-233-g0a34cc2)\n. The hash seems to be associated with v2.2.1.. ",
    "mrbrnk": "This is not what I intended, but I found another way to add my own XML by writing a reporter.\nYour output wouldn't be a valid XML file. I wanted something like this\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites>\n  <info></info>\n  <testsuite name=\"TestProject.exe\" errors=\"0\" failures=\"0\" tests=\"1\" hostname=\"tbd\" time=\"0.000326\" timestamp=\"2018-04-06T10:34:12Z\">\n    <system-out/>\n    <system-err/>\n  </testsuite>\n</testsuites>\nIt is also possible to add attributes to <testsuite> with the current version, but that seems to be the bug you mentioned.\nHowever, with an own reporter it doesn't matter where the output starts.. ",
    "BynaryCobweb": "Thank you ! I had misunderstood the behaviour of the logging functions :)\nLast question still : Catch limits the line size of the console report to a certain amount of characters. Is there a way to change that ? (I'm printing a large matrix and the linewrap feature is a bit annoying). ",
    "jeandet": "@horenmar that's fine to me as long as pkg-config and CMake module do the same.. ",
    "yurivict": "Yes, there are assertions:\nloose text artifact\n===============================================================================\nAll tests passed (854 assertions in 142 test cases)\nVersion 2.2.1. Now I am trying to update the FreeBSD port devel/nlohmann-json and Catch is still failing in tests.\nAny hope to resolve this?. ",
    "grembo": "This is caused by nlohmann-json using duplicate section names in loops, basically the problem described here: https://github.com/catchorg/Catch2/issues/816#issuecomment-278268122 \nYou can probably close this issue, as this is not caused by catch, but by an invalid use of it.\n. The fix in nlohmann-json has been merged. This is neither a catch2 nor a FreeBSD issue, you can really close it now.. ",
    "igormu": "Is this a doc bug then?\nhttps://github.com/catchorg/Catch2/blob/master/docs/test-cases-and-sections.md#special-tags\n... proceeds to list all the tags that can be used directly in the code (e.g. !hide, !throws, etc)\n\n[@] - tag aliases all begin with @ (see below).\n\nThis implies its like the rest of the special tags and can be used by test declarations.\nhttps://github.com/catchorg/Catch2/blob/master/docs/test-cases-and-sections.md#tag-aliases\n\nBetween tag expressions and wildcarded test names (as well as combinations of the two) quite complex patterns can be constructed to direct which test cases are run. If a complex pattern is used often it is convenient to be able to create an alias for the expression.\n\n..\n\nNow when [@nhf] is used on the command line this matches all tests that are tagged [failing], but which are not also hidden.\n\nThe alias-specific section doesn't make it seem like it's command line only. This paragraph implies it can be used on command line.\n\nFor what it's worth, I would've found it quite helpful if aliases were actually supported in tests because I wanted to use #ifdef to define a tag as hidden by default based on other -Ddefines. There doesn't seem to be another way to conditionally hide a tag at compile time without using injecting the tag itself through a preprocessor macro?. ",
    "xkbeyer": "I see. It is unfortunate that if someone uses printf in their test that a parser can no longer interpret the result.\nThis means the only way to make a parser work reliably is with -o and then parse the file.. I aggree. Unfortunately it doesn't work with the eclipse test runner. When the plugin is called the file isn't always complete:(. The plugin is called with an InputStream, this stream contains the STDOUT of TestExe. What I can see is that the TestExe runs as long as the given InputStream is read.\nIn case an out file is written, (I assume) it is not flushed at the moment the plugin tries to read it.\nThat gives me an idea. So far I ignored the InputStream in this scenario. I should read it and see if the TestExe ends earlier and flushs the file.. Yeah. that is exactly the same bug. Before opening this issue I searched for a similar. Ok I have to improve my search skills ;)\nThat is an interesting attitude of MS false information as not so important to regard:(\n. I think it is up to me to close this issue.. ",
    "X-Ryl669": "\nYeah, it is completely impossible to capture stdout/stderr in standard C++ and fairly hard to do even with platform specific code (e.g. even Windows binaries have different behaviours dependent on their respective target).\n\nWhat about (conforms to C90):\n```\nfreopen(\"/makeyourowntempfilehere\", \"w\", stdout);\nfreopen(\"/makeyourowntempfilehere_err\", \"w\", stderr);\n[...] \n// Later before leaving program\n[...]\nfflush(stdout);\nfflush(stderr);\nFILE * oldOut = fopen(\"/makeyourowntempfilehere\", \"r\");\n// Read from std out here\n// etc...\nfclose(stdout);\nfclose(stderr);\nunlink(\"/makeyourowntempfilehere\");\nunlink(\"/makeyourowntempfilehere_err\");\n```\nIf you don't want temporary file, you can use platform specific code like fmemopen that's in POSIX.\nOr, another simple solution is:\n```\n     // Required\n     int catch_fflush(FILE *stream) \n     { \n         if (stream == stdout) // Capture to a larger buffer\n             [...]\n         fflush(stream);\n    }\n    #define fflush catch_fflush\nchar *buf = malloc(100000); // Something large enough for your capture\nsetvbuf(stdout, buf, _IOFBF, 100000);\nfor (int i = 0; i < 1000; i++)\n    printf(\"Number %d\\n\", i);\n\nprintf(\"%s\", buf); // Show captured output\n\n``\nbut you might need to hookfflushhere since else you'll loose the buffer if the user calls it so that explains the part for#define fflush catch_fflush`\n. ",
    "BRevzin": "I never use MSVC so I don't know a clever way of fixing it. This at least seems to fix this for gcc/clang, so still worthwhile?. Here's a solution with just macros that seems to compile across all gcc, clang, and msvc (at least the versions I tried).. I... don't understand this build output. Seems like the fact that we added one more test, that passed, broke things?. It's... possible.\nI need to reference some arguments that I get from the command line. To use a Listener, I'd have to make those static members on the Listener or global somehow. That... works. And it's arguably better than what I have now anyway.\nThanks!. ",
    "Kvaz1r": "thanks for the explanation.. this really works, thanks. . ",
    "arnemertz": "I'm using an SSD. I'll measure on my home PC as soon as I'm out of my current travel-fest.. ",
    "chris-stones": "Similar issue here....\nThis takes 20 seconds to compile, 1 minute, 39 seconds to link.\nThis is on a 5th generation i7, 8gigs of RAM, SSD.\nCompiler used is mingw-w64  x86_64-8.1.0-win32-seh-rt_v6-rev0 (installed from CLion IDE)\nWindows-10.\nUsing GIT version at a575536abe20b58c48863600f8a71e93b4052b81\n...Also.. I'm new to this tool.. but i wasnt expecting the output - \"All tests passed (1 assertion in 1 test case)\".\nset(PROJ_NAME UnitTests)\nproject(${PROJ_NAME})\nset(CMAKE_CXX_STANDARD 17)\nadd_executable(${PROJ_NAME} main.cpp)\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch2/catch.hpp\"\nTEST_CASE(\"Trivial test\", \"[trivial]\") {\n    REQUIRE(12!=13);\n}\n```\n. ",
    "tower120": "I can confirm - problem in MinGW [tried : x86_64-8.1.0-posix-seh-rt_v6-rev0, x86_64-7.3.0-posix-seh-rt_v5-rev0]. \nThe most basic test took 45 seconds to link.\nMSVC link took ~2 sec.\nLLVM for Windows (Visual Studio LLVM plugin) ~10 sec in total (link time unkown).\nMachine: i7-4771, 16GB RAM, SSD. ",
    "marcusnaslund": "Interesting, appveyor fails consistently because a path is different in the output of one mode.\nTests pass great on travis and locally. Could something be wrong in the test config?\nEDIT: Okay, I take that back. Appveyor returns green, but, opening the details shows several test cases failed...?. Oh, that's unfortunate. I see the comment about why you're using sprintf over stringstream as well.\nAlright then, I'll change to just keep assert includes.. There we go.. surrogateescape does not exist in python 2, though. ",
    "jpcima": "Thank you for explaining this. While a separate compilation of main is certainly helpful, and nullifies some of the points which I have made, one remains:\nA compilation of the catch library as a single unit is demanding in terms of memory. On a build where cpp files are built in separation, I measure a diminution of peak memory by roughly 52%.\n\nI don't see a reason for the linker to remove anything if you use Catch in its single header form when building the static library.\n\nIt's what I thought initially; but static initializers will be discarded unless the main program contains references to them. You would have this startup error: No reporter registered with name: 'console'\nAn object library is a portable solution requiring no linker flags.\n\nAlso you could compile the framework header with the test runner implementation in some source file into a static library in your own projects\n\nIt's absolutely correct; I can have these rules in my own project. I suggest them as a convenience.. ",
    "quixoticaxis": "@philsquared Yeap, my bad, I was not putting them in quotes.. ",
    "palotasb": "Oh yes, #590. Should I change the commit message or something?\nMartin Ho\u0159e\u0148ovsk\u00fd notifications@github.com (id\u0151pont: 2018. \u00e1pr. 26., Cs,\n22:27) ezt \u00edrta:\n\nHuh, so it was. The linked issue does not seem correct though, did you\nmean #590 https://github.com/catchorg/Catch2/issues/590 ?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/pull/1263#issuecomment-384778189, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABpCjaLfYg3zyUhEKCajwX_m0CK_FZahks5tsi25gaJpZM4TjCWn\n.\n. \n",
    "mrpilot2": "I ran into the same issue. I found the offending line:\nhttps://github.com/catchorg/Catch2/blob/8d5d49299be5b8c62ec90be7d6ee4f71cbe89ea0/contrib/CatchAddTests.cmake#L54\nI cannot see a reason why the spaces should be stripped, therefore I've created a pull request . ",
    "ianhattendorf": "Would it be worthwhile to add an option when compiling with MSVC to also perform static analysis (/analyze)? This way it could be performed automatically by appveyor.. ",
    "ltjax": "I believe I have the same problem. Specificially, my output with -r junit in Version 2.2.2 is:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites>\n  <testsuite name=\"tests\" errors=\"0\" failures=\"0\" tests=\"2\" hostname=\"tbd\" time=\"0.000155\" timestamp=\"2018-05-08T13:49:10Z\">\n    <system-out/>\n    <system-err/>\n  </testsuite>\n</testsuites>\nWhile with version 2.0.1, it is\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites>\n  <testsuite name=\"tests\" errors=\"0\" failures=\"0\" tests=\"2\" hostname=\"tbd\" time=\"0.000101\" timestamp=\"2018-05-08T13:50:12Z\">\n    <testcase classname=\"tests.global\" name=\"Parses empty string as empty row\" time=\"0.000022\"/>\n    <testcase classname=\"tests.global\" name=\"Parses a single number correctly\" time=\"0.00003\"/>\n    <system-out/>\n    <system-err/>\n  </testsuite>\n</testsuites>\nI did not change anything but the catch.hpp and recompiled. This is using g++ 4.9 on debian 8.. ",
    "Longhanks": "I, too, experience this problem. The XML, console and compact reporters are not affected.. Thanks, appended -s and the report is complete again.. Using v2.3.0 I no longer experience the issue, thanks! :). ",
    "merisanualex": "I faced a similar issue, successful tests didn't appear in the junit output except the ones that contained a REQUIRE_NOTHROW or REQUIRE_THROWS. So as a workaround, adding either of those macros worked.. ",
    "optomux": "Does this work? Also in dire need of a script that generates single header files.. ",
    "ark0f": "I downloaded MinGW from this link. And I still get this error.\n\nAnd it will be better, if you will test using MinGW-w64 from SourceForge. I use MinGW from there: Toolchains targetting Win64/Personal Builds/mingw-builds/**MINGW_VERSION**/threads-posix/seh/. I checked in 7.3.0 and 8.1.0.. ",
    "rupertsteel": "I can't test as I don't have a non windows 10 machine, but I expect the behaviour to be as before which was outputting the ANSI escape code unmodified to the terminal.. ",
    "socketbox": "@horenmar Thank you for your thorough reply.. ",
    "JasonDictos": "Well I think I figured it out, if I first include catch.hpp before my other headers, it links. Odd. . Ok that makes sense, guess I shoulda read the 'ol docs huh ;)\n. ",
    "sirdemios": "Could you post your code change. I'm not sure what you mean for how you call CATCH_BREAK_INTO_DEBUGGER. Do you mean you reverted the definition of INTERNAL_CATCH_REACT to  what it was before the revision?. actually I ended up just making my own main so that visual studios has control over the program and can therefore have break points. Easy enough to do that its odd its not just in the basic tutorial.. ",
    "JulienNitard": "This seems to be the case when operator<< is templated. Otherwise there should be no ambiguity.\nSpecializing StringMaker<> for the type works around the issue.. You are correct. It is not needed. Removing.. Thanks, perfect.. ",
    "Neargye": "For me this code build success: \n```\ndefine CATCH_CONFIG_MAIN\ninclude \ninclude \ninclude \ntemplate \nstruct variant2 : std::variant {\n  operator bool() const { return std::variant::index() != 0; }\n};\nTEST_CASE() {\n  variant2 x;\n  CHECK_FALSE(x);\n}\n```\nVS15.7.1, C++17 mode, Catch v2.2.2. ",
    "JayhawkZombie": "The call is ambiguous.  You provide operator bool() explicitly, but also provide a generic template operator T().  It doesn't know which to use.  If you want to specifically invoke operator bool() you can do so:\nTEST_CASE()\n{\n  Variant2<std::experimental::filesystem::path> x;\n  CHECK_FALSE(x.operator bool());\n}\nor\n```\nTEST_CASE()\n{\n  Variant2 x;\n  CHECK_FALSE(bool(x));\n}. ",
    "phiysng": "It works !\nThank you.\nMeanwhile MSVC can compile it without any issue.\nIt seemed It is the question of the MINGW.\n```c++\ndefine CATCH_CONFIG_RUNNER\ninclude \"catch.hpp\"\nint add(int a, int b)\n{\n    return a + b;\n}\nint coin()\n{\n    return 11;\n}\nTEST_CASE(\"Adds are computed\", \"[add]\")\n{\n    REQUIRE(add(1, 2) == 3);\n    REQUIRE(add(2, 3) == 5);\n    REQUIRE(add(10000, 1000) == 11000);\n}\nTEST_CASE(\"TEST1\", \"[coin]\")\n{\n    REQUIRE(1 == 1);\n    REQUIRE(1 == 1);\n    REQUIRE(coin() == 11);\n}\nint main(int argc, char* argv[])\n{\nint result = Catch::Session().run(argc, argv);\n\nreturn result;\n\n}\n```. ",
    "sjthebat": "I had a similar issue with MinGW and wxWidgets. After I upgraded from Catch 1.x to Catch2, I got the following linking error:\nM:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/7.2.0/../../../../x86_64-w64-mingw32/lib/../lib/libmingw32.a(lib64_libmingw32_a-crt0_c.o):crt0_c.c:(.text.startup+0x2e): undefined reference to `WinMain'\ncollect2.exe: error: ld returned 1 exit status\nmingw32-make.exe[3]:  [test\\CMakeFiles\\TestMain.dir\\build.make:256: test/TestMain.exe] Error 1\nmingw32-make.exe[2]:  [CMakeFiles\\Makefile2:355: test/CMakeFiles/TestMain.dir/all] Error 2\nmingw32-make.exe[1]:  [CMakeFiles\\Makefile2:367: test/CMakeFiles/TestMain.dir/rule] Error 2\nmingw32-make.exe:  [Makefile:182: TestMain] Error 2\nIt worked after I defined my own main, as shown by GalaxyScape.. ",
    "naslundx": "So close this?. ",
    "BiCapitalization": "Take a look at https://github.com/catchorg/Catch2/blob/master/docs/configuration.md#stdout. I can't reproduce the issue. What platform are you on? Could you write up a minimal example?. ",
    "AlexeyIgnashin": "Can anyone provide a sample where streams are implemented from scratch?. ",
    "conradjones": "not convinced by those stats tbh bot. I think the travis ci is broken, looks like it's having difficulty installing some ubuntu packages,. ",
    "Jorghi12": "In the file I begin with\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"catch.hpp\"\n```\n. ",
    "ianhbell": "I wouldn\u2019t really agree; there are plenty of applications where warnings are helpful, but you don\u2019t want the tests to fail, but you do want to see them, and then at other times, you want to suppress the warnings (TODO warnings for instance).\nSeems to me that this ought to be a very simple fix in Catch\n. ",
    "RedDwarf69": "Yes, that would be more clear.\n\"This limitation is highly unlikely to be lifted before Catch 2 is released\"... Well it's not \"highly unlikely\", it's literally impossible. The probability is exactly zero. Catch 2 has already been released. So I reached the conclusion that the text was out of date, the information was not reliable and so it was equally possible that Catch 2 supported or not supported thread safe assertions.. ",
    "a-suresh": "@philsquared I have enabled the debug logs by enable the flag in ParseAndAddCatchTests.cmake\noption(PARSE_CATCH_TESTS_VERBOSE \"Print Catch to CTest parser debug messages\" ON)\nWhen I run locally using ctest, I am able to get the debug messages. But when I run using ctest integrating with jenkins, not getting debug messages. . ",
    "achamayou": "I am not sure why a few of the targets fails, and running them on the same commit in my fork, I haven't been able to reproduce the failures: https://github.com/achamayou/Catch2/pull/2\nI am guessing they are transient, and will go away if the build is restarted, which seems to be something that only the repo owners can do?. Reconciled against latest master changes. Feedback would be lovely.. @horenmar thank you for taking a look. I thought the state of things was deliberate, and meant to minimise report size. I wasn't aware that it was an unintended side effect of a recent change, which is why I'd made this change to only report top level testcases on success.\nIf we can have full details on success instead, I'm certainly very happy with that. I will test your change and confirm that it addresses the issue (but it sounds like it will).. @horenmar I have tested the latest revision of master, including your change, and it does report passing tests in junit format in such a way that they are reported accurately in Jenkins. Thank you!\nIf it was possible to have a release including this change not too far from now, it would be very convenient. If I can help with that in any way, please let me know how.. Thank you!. ",
    "objectx": "Current implementation fails compilation when system w/o dup2. There is no parameters to configure \ud83d\ude3f . ",
    "pleroux0": "None of the build breaks are related to changes I made. They are all apt-get failures.. Sorry. Didn't mean to close and reopen.. ",
    "dengbangjie": "Hello. I have the same needs and I made some modifications to ParseAndAddCatchTests.cmake to redirect report of each Testcase to custom dir. I hope it could be helpful. I modify the following lines in ParseAndAddCatchTests.cmake\n\noriginal:\ncamke\nadd_test(NAME \"\\\"${CTestName}\\\"\" COMMAND ${TestTarget} ${Name} ${AdditionalCatchParameters})\nmodified\n\n```cmake\nAt the head of ParseAndAddCatchTests.cmake\noption(REDIRECTDIR \"Redirect Catch2 output to specified dir\" OFF)\n...\nif (REDIRECTDIR)\n    string(REPLACE \" \" \"_\" CATCH_OUTPUT_NAME \"${Name}\")\n    add_test(NAME \"\\\"${CTestName}\\\"\" COMMAND ${TestTarget} ${Name} ${AdditionalCatchParameters} -o ${CATCH_OUTPUT_DIR}/${CATCH_OUTPUT_NAME}.catch)\nelse ()\n    add_test(NAME \"\\\"${CTestName}\\\"\" COMMAND ${TestTarget} ${Name} ${AdditionalCatchParameters})\nendif ()\n```\nand then in CMakeLists.txt of my project:\ncmake\n...\nset(REDIRECTDIR ON)\nset(CATCH_OUTPUT_DIR \"${PROJECT_SOURCE_DIR}/report\") # The output dir.\n...\nset(AdditionalCatchParameters -r junit -s)\nParseAndAddCatchTests(...)\n...\nand then I use junit-merger to merge all xml junit reports, which is writen in golang.. ",
    "fgsalomon": "Thanks @Bangjie! Your solution works great. \nI understand @horenmar, we'll take a look at CatchAddTests.cmake to see if we can use it. Thanks!. ",
    "changyongGuo": "Hi,\nI found this issue is caused by a bad compiled library, not related to catch, I will close this issue.\nBest regards\nChangyong. ",
    "benjamin-weiss": "I have seen the string related matchers. But what I actually need is the file-based pattern matching. You are right, the documentation (and API) of output_test_stream is not very good. So let me try to explain what I am doing.\nLet's say we have the following function we want to test:\ncpp\nstd::ostream& writeDataTo(std::ostream& stream) {\n      return stream << \"My Data\";\n}\nI will then write the following test:\n```cpp\ndefine BOOST_TEST_MODULE DataWriter\ninclude \ninclude \nconst bool MATCH_DATA = false;\nBOOST_AUTO_TEST_CASE(test_data_writer) {\n  boost::test_tools::output_test_stream testOutput(\"test_output.xml\", MATCH_DATA);\n  writeDataTo(testOutput);\n  BOOST_TEST(testOutput.match_pattern());\n}\n```\nThis will then create the file test_output.xml with My Data in it. I can then manually check the file. If I'm ok with the output I will check in the file to my repository and ensure with my build system, that the file can be found by my test. Before checking in my test I will change MATCH_DATA to be true.  If in the future the output will not be the same anymore my test will fail. If it does I can manually check if this was intended or not and then either look for the bug or checkin the new output file.\nObviously in a real world example the writeDataTo function will be much more complicated and will produce much more output.\nI hope this clarifies things a bit.. ",
    "jfu334": "The DrMemory errors even appear with Catch 1.2.\nWhen switching the application charset in VS2017 from Unicode to Multibyte, the errors disappear with Catch 1.2 but are still present with Catch 2.x. ",
    "attugit": "-fno-rtti is needed\n gcc/clang + -01/-02/-O3 + libstdc++ fails,\n clang + -O0 + libstdc++ detects UB, gcc does not\n* clang + -stdlib=libc++ there is no issue at all . I can reproduce it in the following docker container:\n```\n$ cat Dockerfile \nFROM base/archlinux\nADD https://github.com/Yelp/dumb-init/releases/download/v1.2.1/dumb-init_1.2.1_amd64 /usr/bin/dumb-init\nRUN chmod +x /usr/bin/dumb-init\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nADD https://github.com/catchorg/Catch2/releases/download/v2.2.3/catch.hpp /usr/include/catch2/catch.hpp\nADD https://raw.githubusercontent.com/catchorg/Catch2/master/examples/000-CatchMain.cpp /usr/src/CatchMain.cpp\nRUN pacman -Syy --noconfirm \\\n && pacman -S --noconfirm \\\n        base-devel \\\n && pacman -Scc --noconfirm\nENV UBSAN_OPTIONS=\"print_stacktrace=1:halt_on_error=1\"\n```\n$ docker build -t issue:1329 .\n$ docker run --rm issue:1329 sh -xc \"g++ -O1 -fno-rtti -fsanitize=undefined /usr/src/CatchMain.cpp && ./a.out\"\n+ g++ -O1 -fno-rtti -fsanitize=undefined /usr/src/CatchMain.cpp\n+ ./a.out\n/usr/include/c++/8.1.1/bits/shared_ptr_base.h:520:54: runtime error: reference binding to misaligned address 0x563ccc5aa726 for type 'const struct type_info', which requires 8 byte alignment\n0x563ccc5aa726: note: pointer points here\n 77 00 77 00 00 00  00 00 00 00 00 00 e9 3e  00 00 00 00 80 84 2e 41  00 00 00 00 00 40 8f 40  00 00\n             ^ \n    #0 0x563ccc43086a in Catch::ReporterRegistrar<Catch::CompactReporter>::ReporterRegistrar(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (/a.out+0x47586a)\n    #1 0x563ccc3d53e2 in _GLOBAL__sub_I__ZN5Catch6Detail6ApproxC2Ed (/a.out+0x41a3e2)\n    #2 0x563ccc5a68cc in __libc_csu_init (/a.out+0x5eb8cc)\n    #3 0x7fb960393ff9 in __libc_start_main (/usr/lib/libc.so.6+0x22ff9)\n    #4 0x563ccc2d0999 in _start (/a.out+0x315999). problem exists only with gcc-8 (or rather libstdc++)\nwith the following Dockerfile:\n```\nARG GCC_VERSION\nFROM gcc:${GCC_VERSION}\nADD https://github.com/catchorg/Catch2/releases/download/v2.2.3/catch.hpp /usr/include/catch2/catch.hpp\nADD https://raw.githubusercontent.com/catchorg/Catch2/master/examples/000-CatchMain.cpp /usr/src/CatchMain.cpp\nENV UBSAN_OPTIONS=\"print_stacktrace=1:halt_on_error=1\"\ngcc-8 fails but gcc-7 does not detect UB\ndocker build --build-arg GCC_VERSION=7 -t issue:1329 .\ndocker run --rm issue:1329 sh -xc \"g++ --version && g++ -O1 -fno-rtti -fsanitize=undefined /usr/src/CatchMain.cpp && ./a.out\"\n+ g++ --version\n+ g++ -O1 -fno-rtti -fsanitize=undefined /usr/src/CatchMain.cpp\ng++ (GCC) 7.3.0\nCopyright (C) 2017 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ ./a.out\nNo tests ran\n```\nI didn't found anything similar at gcc bugzilla. ",
    "Donaldpherman": "Hi, thank for the reply.  I'm working on an ancient MFC Project with million plus lines of code that has zero test coverage, the original devs are long gone.  I tried adding catch2, gtest, and mstest in its own project and couldn't figure out how to overcome the linker errors.  I finally just put the catch2 header in the MFC project and it worked.  Our program takes command line arguments so right now I'm just using a hack to strip them out before repassing the command line arguments to Catch2.  It's a mess, to say the least.\n ```\n// Parse command line for standard shell commands, DDE, file open\n        m_pCmdLine = new CCommandLine(m_lpCmdLine);\n        ParseCommandLine(*m_pCmdLine);\n    // Dispatch commands specified on the command line.  Will return FALSE if\n    // app was launched with /RegServer, /Register, /Unregserver or /Unregister.\n    if (!ProcessShellCommand(*m_pCmdLine))\n        return FALSE;\n\n    // The one and only window has been initialized, so show and update it\n    m_pMainWnd->ShowWindow(SW_SHOW);\n    m_pMainWnd->UpdateWindow();\n\n    // call DragAcceptFiles only if there's a suffix\n    //  In an SDI app, this should occur after ProcessShellCommand\n\n    CMainFrame  *pMainWnd = (CMainFrame *)m_pMainWnd;\n    pMainWnd->DoPostStartupWork(&m_appSettings);\n\n    if(m_pCmdLine->isTestMode()) {\n        char* argv[MAX_PATH];\n        int argc = m_pCmdLine->getArgcAndArgvForCatch2(argv);\n        Catch::Session session;\n        int result = session.applyCommandLine(argc, argv);\n        if (result != 0)\n            throw std::exception((\"Exception thrown in testing \n            framwork Catch2 when applying Command Line: \" + std::to_string(result)).c_str());\n        int iPrev = _CrtSetReportMode(_CRT_ASSERT, 0);\n        session.run();\n        _CrtSetReportMode(_CRT_ASSERT, iPrev);\n    }\n\n//This will strip all flags from the command line, Catch2 will not run with invalid flags\nint CCommandLine::getArgcAndArgvForCatch2(char* outArgv) {\n    if (m_argc == 0) {\n        LPWSTR strArgv = CommandLineToArgvW(GetCommandLineW(), &m_argc);\n        const int numberOfItemsOnCommandLine = m_argc;\n        for (int i = 0; i < numberOfItemsOnCommandLine; ++i) {\n            auto buffer = new char[MAX_PATH];\n            size_t numberOfCharConverted;\n            wcstombs_s(&numberOfCharConverted, buffer, MAX_PATH, strArgv[i], MAX_PATH);\n            //TODO  add all flags here.\n            if (strstr(buffer, cmd_line_arg_test.c_str())) {\n                delete[] buffer;\n                --m_argc;\n                continue;\n            }\n            m_argv[i] = buffer;\n        }\n    }\n    assert(m_argc > 0);\n    for (int i = 0; i < m_argc; ++i)\n        outArgv[i] = m_argv[i];\n    return m_argc;\n}`\n```. ",
    "go2sh": "I stumbled on the same problem. Arch installs the files in the \"catch\" subfolder not the \"catch2\" subfolder in the include folder.. Ah I see the problem. I added a symlink, so that i don't have to change every test file in the future.. ",
    "kir12": "catch2 now works on Arch, so I'm closing this issue. Thanks!. ",
    "hakkidogusan": "Use CHECK_NOFAIL. Yes. ",
    "vvuk": "Makes sense -- I wasn't sure what the structure of the generated code was like, if there was a way to essentially generate if (!noOp) { ..; }... but as I type that out I realize that won't work with how sections are implemented, with if checks to see if they've been already run.  Thanks for Catch2 by the way, it's been a pleasure to work with!. ",
    "dubnde": "thanks. will give that a try. \nDoes Catch actually use the executable path/name? Does one actually need to pass the executable in argv[0]? Would it be a problem if I passed argc=0 and therefore argv=NULL?. okay. so it does need the rgv[0] to be valid.. ",
    "parnmatt": "I wasn't thinking that; however that's a fantastic idea, and simple to implement with a variable as you've shown.\nThat would be a great addition to this feature request.. sorry I've been a bit busy as of late; I'll look in on this over the next week\nshouldn't take too long to review and make the suggested changes and additions to the request. The differences in expected output are due to the extra space for padding (to keep consistency). As noted in the docs, using an alias/typedef, or surrounded the expr with parentheses is what is required.\nNow I would have put the extra parens in myself, but then the behaviour would be inconsistent with REQUIRE as it currently written.\nYou example would work with:\ncpp\nSTATIC_REQUIRE((std::is_same_v<int, int>));\nwhich is how I am currently using it in my own work.. ",
    "andrew-gresyk": "No problem, I'll do it in my branch.. ",
    "janissimsons": "I hadn't set the other project as a static library, it's working now. I didn't know exe projects can't be tested the same way.. ",
    "cstratopoulos": "I think this probably fits as an addition to your issue rather than opening my own. The DYNAMIC_SECTION macro in particular is, as far as I can tell, only documented in release notes for 2.3.0: https://github.com/catchorg/Catch2/blob/master/docs/release-notes.md\nWhen I read about it I thought instantly of the limitation regarding sections nested in loops, it could be good to add a blurb saying something like\n\nAs of Catch 2.3.0, this can be written as DYNAMIC_SECTION(\"Looped section \" << i) . @onqtam not sure why you're asking this here, or asking me, I'm just quoting from (and suggesting a one-line addition to) the existing Catch docs. Is it really that hard (or \"amusing\") to imagine running common setup code to generate intermediate inputs that get mutated and/or asserted on in some manner parametrized by a loop counter or range-for loop elements? This is left as an exercise to the reader, I'd rather not further derail this issue \ud83d\ude48\ud83d\ude49\ud83d\ude4a. I'd like a feature like this too. \n\nCurrently I'm using a hand-rolled implementation which uses the Matcher API and the existing Approx implementation: \n```\ntemplate\nclass IsApprox : public Catch::MatcherBase {\npublic:\n    IsApprox(T t) : _val(t) {}\ntemplate<typename U = T>\nstatic constexpr auto toDouble(const U& val) noexcept\n    -> decltype(units::unit_cast<double>(val))\n{\n    return units::unit_cast<double>(val);\n}\n\ntemplate<typename U = T>\nstatic constexpr auto toDouble(const U& val) noexcept -> decltype(val.count())\n{\n    return val.count();\n}\n\nbool match(const T& t) const override\n{\n    return toDouble(t) == Approx(toDouble(_val))\n                              .epsilon(toDouble(_epsilon))\n                              .margin(toDouble(_margin));\n}\n\ntemplate<typename U = T>\nIsApprox& epsilon(U u)\n{\n    _epsilon = T{u};\n    return *this;\n}\n\ntemplate<typename U = T>\nIsApprox& margin(U u)\n{\n    _margin = T{u};\n    return *this;\n}\n\nstd::string describe() const override\n{\n    using namespace date;\n\n    std::ostringstream oss;\n    oss << \"is approximately \" << _val;\n    return oss.str();\n}\n\nprivate:\n    T _val;\n    T _epsilon{std::numeric_limits::epsilon() * 100};\n    T _margin{0.0};\n};\n```\nThis is skewed towards my use cases of\n- using std::chrono::duration with Rep = double, and\n- using the units library\nMaybe it can be useful in highlighting some generally applicable features. For example in the same way that Approx currently uses enable_if with convertibility to double I can do stuff like\nCHECK_THAT(pound_t{ 2.2 }, IsApprox(kilogram_t{ 1 }).margin(gram_t{ 10 }));\nbut I can also specify margin as a raw double, as kilos, etc. \nAlso note that I've provided a toDouble function so that everything can be forwarded to Approx. If we had an Approx<T> this would not be necessary, but there is still possibly an issue with fabs: \nhttps://github.com/catchorg/Catch2/blob/master/include/internal/catch_approx.cpp#L55\nThis may require a customization point of some sort. In my units example above, the library provides mathematical functions such as units::math::fabs so maybe ADL could be an option. . ",
    "mmha": "There is an issue on the Kitware Gitlab open for this limitation: https://gitlab.kitware.com/cmake/cmake/issues/16184. @horenmar That is correct. It's more of an upstream CMake issue than a Catch issue, but as it stands right now the version check for the config file makes the CMake package nonportable.. ",
    "JuliusR": "I could follow Catch2's CMakeLists.txt to understand why this behavior is like I observed:\n\nL9: set the PROJECT_NAME with the help of the project command (CMake doc)\nL14: include GNUInstallDirs; this sets CMAKE_INSTALL_DOCDIR to share/doc/${PROJECT_NAME} only if this is the first include(GNUInstallDirs) command\nL138: use install command for the docs/ directory with the destination ${CMAKE_INSTALL_DOCDIR}\n\nMy problem is caused by including GNUInstallDirs in the CMakeLists.txt of my project before using add_subdirectory(vendor/Catch2). By this, the CMAKE_INSTALL_DOCDIR is set according to my project's PROJECT_NAME.\nI see three possible solutions:\n  1. not including GNUInstallDirs before using Catch2 as a subdirectory\n  2. filing bug report for GNUInstallDirs because it should update CMAKE_INSTALL_DOCDIR for new subprojects\n  3. change Catch2's CMakeLists.txt to not rely on GNUInstallDirs' CMAKE_INSTALL_DOCDIR, but install docs/ to \"${DATAROOTDIR}/doc/${PROJECT_NAME}\"; this means changing L138 to\n```\nInstall documentation\nif(CATCH_INSTALL_DOCS)\n  install(\n    DIRECTORY\n      docs/\n    DESTINATION\n      \"${CMAKE_INSTALL_DATAROOTDIR}/doc/${PROJECT_NAME}\"\n  )\nendif()\n```. ",
    "syntactical": "Never mind-- this looks like it's a bug in CLion that makes it impossible to inspect certain containers when running tests.. ",
    "xkszltl": "@horenmar \nThanks for your quick response.\nHere's the output:\n```\n[xkszltl@CentOS build]$ ctest --output-on-failure\nTest project /media/Scratch/Catch2/build\n    Start 1: RunTests\n1/8 Test #1: RunTests .........................   Passed    0.03 sec\n    Start 2: ListTests\n2/8 Test #2: ListTests ........................   Passed    0.01 sec\n    Start 3: ListTags\n3/8 Test #3: ListTags .........................   Passed    0.01 sec\n    Start 4: ListReporters\n4/8 Test #4: ListReporters ....................   Passed    0.01 sec\n    Start 5: ListTestNamesOnly\n5/8 Test #5: ListTestNamesOnly ................   Passed    0.01 sec\n    Start 6: NoAssertions\n6/8 Test #6: NoAssertions .....................   Passed    0.03 sec\n    Start 7: NoTest\n7/8 Test #7: NoTest ...........................   Passed    0.01 sec\n    Start 8: ApprovalTests\n8/8 Test #8: ApprovalTests ....................***Failed  Error regular expression found in output. Regex=[Results differed]  1.50 sec\nRunning approvals against executable:\n  /media/Scratch/Catch2/build/projects/SelfTest\nconsole.std:\n  Results matched\nconsole.sw:\n  Results matched\nconsole.swa4:\n  Results matched\njunit.sw:\n  Results matched\nxml.sw:\n--- xml.sw.approved.txt\n+++ xml.sw.unapproved.txt\n\n\n\n\n\n\n\n\n\n\n\n....\n\n``. Unfortunately due to the comment size limits I cannot upload the full log.\nBut I think you can already notice the difference betweenprojects/and../projects/`. ",
    "MaciejPatro": "There is also a second problem with compact.sw tests\n```\n< ToStringGeneral.tests.cpp:: passed: tab == '\\t' for: '\\t' == '\\t'\n\nToStringGeneral.tests.cpp:: passed: tab == '/t' for: '/t' == '/t'\n```\nit seems that escape sequence is done with forward slash - not the backslash\n\n. Thank you - I've missed that!\nThis update should fix the issue in that case - replacing takes place only for path itself.. ",
    "danilcha": "Thank you! This instruction in not in the documentation, or I did not find it?. By the way, what does -H. stands for? A man page of CMake says it is for displaying the help.. I think it should be in the documentation because the majority of CMake users do not know CMake that well. I was very surprised to find out that Catch2 has the install target and that it is something common to every CMake project to the point that it is not even mentioned in the documentation.\nNot to say about -DBUILD_TESTING=OFF.\nThanks for the explanation!. ",
    "thomasfanell": "It seems you're right. I must admit I managed to completely miss that SO post. I suppose we'll have to redirect __glibcxx_check_self_move_assign for now. Thanks for the link and my apologies for wasting your time.. ",
    "hlindberg": "Very much in favor of adding this!  The tags [!myfail] and [!shouldfail] especially, but also the ability to skip/ignore GIVEN/WHEN/THEN/SECTION . Excellent! Thanks for the quick fix!. ",
    "jayeshbadwaik": "The bug seems to be here here when strlen(buf) is 0 as when happens when you call it from here. Doesn't look to be a Catch issue.\n. @karyon  Would you be happy with using ULP matchers instead?  I think that is the better way to achieve what you want. \n. Please provide a minimal working example for the same. \n. We would love it if you can reformat the code. It makes it easier to read and understand what's going on. For example, you can use clang-format. \nThank You. :-). ",
    "HankB": "On Thu, Sep 20, 2018 at 10:34 AM Martin Ho\u0159e\u0148ovsk\u00fd notifications@github.com\nwrote:\n\nYeah, that is a problem in your code.\nvoid snprintf_stack(char* buf, const size_t len, const struct stack &st)\n{\n  assert(len > 0);\n  buf[0] = '\\0';\n  // build string\n  for(int i=0; st.disks[i] != 0 && i < max_height; i++)\n  {\n    snprintf(buf+strlen(buf), len-strlen(buf), \" %2d,\", st.disks[i]);\n  }\n// truncate trailing comma\n  if(buf[strlen(buf)-1] == ',')\n  {\n    buf[strlen(buf)-1] = 0;   // truncate trailing ','\n  }\n}\nWell... that's embarrassing! Many thanks for helping to find the bug in my\ncode.\n\nNow I need to dig a little deeper into valgrind to figure out why it\ndidn't flag that 100% of the time. (And learn how to properly interpret\nvalgrind output so I know where to look for a reported error.)\nbest,\nhank\n-- \nBeautiful Sunny Winfield, Illinois\n. Yes - Thanks!\nOn Thu, Sep 20, 2018 at 12:58 PM Martin Ho\u0159e\u0148ovsk\u00fd notifications@github.com\nwrote:\n\n@HankB https://github.com/HankB I wrote a \"read valgrind output\"\ntutorial https://codingnest.com/how-to-read-valgrind-output/ to help my\nstudents, maybe it can help you too?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/issues/1386#issuecomment-423276815,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADLOfkalmtmVwEpxUz8_aoGtQFduSIjRks5uc9cxgaJpZM4WvNo0\n.\n\n\n-- \nBeautiful Sunny Winfield, Illinois\n. ",
    "Weeena": "I must admit that I don't know at all how CATCH2 is realized internally...\nIf listing the sections statically is not possible, maybe a run of the test cases without actually carrying out the tests is a possiblity to list all the sections. And if generators are used than I think it would be great if they would also occur in the extended list of test cases and sections. Maybe like this (using an example found in the documentation under \"Data Generators\"):\nGenerators\n    ...generate [1, 11]\n    >Some section\n      ...generate[11, 21]\nBut as stated in the beginning: I can't judge if that is possible at all or how much effort would be needed.. No, section \"sa\" is not failing. (I saw issue  #1389 before I opened this new issue and, at first sight, it seemed similar. But because \"sa\" was not failing I thought this would be something different.). ",
    "dcou": "+1\nI really need this... I want to parallelize tests and I need to parallelize at the section level, not just test level because some tests have a lot of sections and I want to balance them properly by spawning every test.section.[...] into its own process.\nI basically need enumeration of test/section and filtering of test/section.\nIf that's not possible, I think its a major limitation of the framework... might consider returning to googletest.... ",
    "hoorayphyer": "First of all, awesome work with Catch2, THE best testing framework out there. This thread is particularly useful as currently I'm testing with MPI communication whose number of processors is known only at runtime. By adding CHECKED_IF( num_of_procs > 4 ) I can prevent MPI failure on small core machines without having to comment out these tests. Really looking forward to this tweak.. ",
    "wimo7083": "Looking at the source for both 4.8 and 8.2\nThe macros persist, I didn't check in between and the usage of them varies. What would you recommend if this is not suitable? . ",
    "pfultz2": "Would something like this(which lets you access private members using standard C++) help:\n```cpp\ntemplate\nstruct result {\n  / export it ... /\n  typedef typename Tag::type type;\n  static type ptr;\n};\ntemplate\ntypename result::type result::ptr;\ntemplate\nstruct rob : result {\n  / fill it ... /\n  struct filler {\n    filler() { result::ptr = p; }\n  };\n  static filler filler_obj;\n};\ntemplate\ntypename rob::filler rob::filler_obj;\nstruct A {\nprivate:\n  void f() {\n    std::cout << \"proof!\" << std::endl;\n  }\n};\nstruct Af { typedef void(A::*type)(); };\ntemplate class rob;\nint main() {\n  A a;\n  (a.*result::ptr)();\n}\n```. ",
    "Minoru": "Thank you very much!. Oh, no need to investigate anymore. Apparently it's pgp.mit.edu fault. I ran gpg --recv-key DE48307B8B0D381A again just now and after a minute of waiting, it did fetch the key.\nSorry about the noise.. ",
    "thecppzoo": "I suspect the bug has to do with Clang being more strict about violations of using an overload in a template before the overload has been declared; that is, inside Catch2 there is a template that uses a not-yet-declared Catch2 function overload dependent on user types; the declaration happens afterwards, GCC incorrectly accepts it, but Catch2 correctly does not.. Guys, I think you may have a very serious error, here is why:\nIf you do this:\n```c++\ninclude \ninclude \n``\nThe problem goes away.  That means:\n1. The semantics of your code is dependent on inclusion order!\n2. In particularoperator<<forReusableStringStream` is affected.\nI think your using ::operator<< in catch.hpp is a smell.  Why do you need it? it seems you are putting global << into namespace Catch, this alters ADL (Argument Dependent Lookup of overloads, aka K\u00f6enig Lookup).  The bug I reported is related to that, since if you don't do the using at least in Clang everything compiles.\nIt seems you are doing some SFINAE on operator<< before you have declared ReusableStringStream::operator<< and this causes a side effect, which might be a Clang bug that hides the global operator<<(std::ostream &, <some std type here>) needed at\nc++\n        template<typename T>\n        auto operator << ( T const& value ) -> ReusableStringStream& {\n            *m_oss << value;\n            return *this;\n        }\n. Minimal example, at the compiler explorer:\n```c++\ninclude \ninclude \ntemplate\nstd::ostream &operator<<(std::ostream &, const std::array &);\n// Inclusion of internal/catch_stream.h ahead is a fix\n// #include \ninclude \nnamespace Catch {\nvoid triggerBug(ReusableStringStream &rss, std::array a) {\n    rss << a;\n}\n}\n. I spent a bunch of time figuring out this issue, here's what I got:c++\ninclude \ninclude \n// non-template\nstd::ostream &operator<<(std::ostream &, const std::array &);\ntemplate\nstd::ostream &operator<<(std::ostream &, const std::array &);\n// resembles #include \nnamespace Catch {\n    struct SourceLineInfo;\n    // introduces an overload of operator<< into namespace Catch\n    void operator<<(std::ostream &, SourceLineInfo const &);\n}\n// resembles #include \nnamespace Catch {\n    struct HasOperator {\n        std::ostream m_;\n    public:\n        template\n        void operator<<(const T &v) {\n            m_ << v;\n        }\n    };\n}\n// done in #include \nnamespace Catch {\n    using ::operator<<;\n}\nnamespace Catch {\n    void usesGlobalNonTemplateOperator(HasOperator &rss, std::array a) {\n        rss.operator<<(a);\n    }\nvoid usesGlobalTemplate(HasOperator &rss, std::array<long, 1> a) {\n    rss.operator<<(a);\n}\n\n}\nvoid ok(std::ostream &o, std::array a) {\n    o << a;\n}\n```\nThe introduction of the overload of << for SourceLineInfo \"blocks\" unqualified lookup to reach for the global template <<.. The macro must be variadic:\n1. No reason to annoy users gratuitously with hard to decipher compilation errors\n2. Force them to put noise as extra parenthesis\n3. It would be inconsistent with Catch2 that uses variadic macros thoroughly\n4. It does not cost the developer to make the macros variadic\n5. It simply is the right thing to do. This changes the semantics, whether char is signed is implementation defined. In some platforms their ABI may indicate char is unsigned, some others signed: In Visual C++ char is signed by default, in GCC unsigned...\nI think the fix is to use this instead:\nif(unsigned(value) < ' '). ",
    "matepek": "Hello,\nIt doesn't work with single_include.\nBests,\nMate. No. I didn't know that it is a generated file. (Is it?)\nWhy is it versioned(added to source control) then? (a bit misleading). ",
    "devhandle": "I'm trying to write a BDD style test using this style. The tests (each WHEN) should run one after the other in sequence. I've copied this exact format  as the example but it seems GIVEN is called multiple times meaning my variable is redeclared for each WHEN condition and loses it's state. I've added logging which confirms this. \nIs it possible to to run each WHEN in sequence and keep variable state between each one?\nUPDATE:\nI've realised that I need to use the following format:\nSCENARIO \n{\n     GIVEN () \n     {\n          WHEN() \n          {\n               THEN()\n               {\n                    WHEN() \n                    {\n                         THEN() ...etc\n                    }\n               }\n          }\n     }\n}. ",
    "mgaio": "The PR #1399 fix is related to this PR.\nBut issue observed is not related to compiler but to ARM target.\n. ",
    "hoffmanriley": "Where did you find the minwindef.h file?. Ahh I see, thank you.. ",
    "delpinux": "Hello @horenmar.\nThank you for pointing out that I forgot the documentation.\nI made the changes. Hopefully, it is alright, but check twice my changes since english is not my mother language.\nRegards.. ",
    "tortoisedoc": "Using std::cout or Catch::cout in the testCaseStarting breaks the Json reporter, as the output to stdout is not intercepted.. Any idea why this is failing on the checks?. ",
    "jkransom": "It turns out I can achieve what I wanted using event listeners, so I don't need the above after all :-). ",
    "denizevrenci": "I modified the idiomatic examples to link with the new static library. And added simple documentation about how to use it.. Thanks for the review and pointing out with Conan. After a few trials and errors through CI, I am now stuck with undefined references in the exported binary. Pretty weird, considering the same binary has no issues in linkage with the unit tests. I will try more extensively in the coming week.. ",
    "MetaBarj0": "I agree with @WarShoe. One of the major interest of BDD approach is the separation we have between test cases written in Gherkin language and the glue code for executable specifications.\nI think it won't be easy to do if you want to integrate such a feature within the header (maybe it could be necessary to create a DSL or something like that...) but this is the major reason I'm reluctant to switch from cucumber-cpp to catch2 for BDD in my projects.. ",
    "zyth0s": "Sorry very much. It is completely my failure. Forgot to change the argument Factorial(i) == tgamma(i+1).. ",
    "rsalinas": "I just missed this feature.  It should be fairly easy to implement.. ",
    "vector-of-bool": "Looks like you'd want to only count , instead of all whitespace as an argument delimiter, and also only when , appears at the top level (not nested within [], {}, or ()). You can count the nesting depth of each bracket type in one variable since mismatching brackets would cause the compilation to fail anyway.. ",
    "gnbond": "Cool, thought it might be something like that.\nThis Wikipedia article and the working paper by Herb Sutter  linked from there were most helpful, and now I am somewhat less unenlightened.\nThanks!. ",
    "SSE4": "@horenmar I think now it's safe to merge, as conan developer has reviewed and approved it (@danimtb). cmake_minimum_require must go fist. homepage?. do we need to specify compiler version here, if we already have CONAN_GCC_VERSIONS in .travis.tml?. ",
    "karyon": "I think I do understand the math and the fundamental problem. I still think that a better solution can be found, not in terms of mathematical \"correctness\", but in terms of matching what the user expects, which is that Approx(0.0) does actually approximate something.\nI am aware that this has probably discussed to death. I hope to add another point of view in the following, if I'm just repeating what has already been said then I'm sorry.\nI would suggest to either add a special case for zero, using some reasonably guesstimated fixed epsilon in that case, simply to create a practical solution for an annoyance in a common case (comparing to zero). A more elaborate rationale would be that when comparing to Approx(<very small number>), chances are that the \"scale\" of the calculation was indeed very small (i.e. using only very small numbers), so using an even smaller epsilon is fine. However, when comparing to Approx(0.0), chances are that the calculation was actually done at a non-zero scale, since most calculations are not just about zeroes (right? :) ), and applying an epsilon of zero does not help in that case.\nAlternatively I would suggest to add a minimum epsilon to the calculated one to not let the applied epsilon become ridiculously small for small numbers and ultimately zero, or in other words, to use min(\u03b5 * max( |target| , |actual| ), minimum_\u03b5) or perhaps \u03b5 * max( |target| , |actual| ) + minimum_\u03b5 (which would be equivalent of setting the existing scale variable to some minimum_\u03b5 i think?). again, the rationale could be that the calculations are always happening at some scale that is not zero.. Alright, I agree that the minimum epsilon is a very inconsistent solution. Any practical downside for the special-case-for-zero-solution? I can't imagine people who know what they are doing to expect Approx(0.0) to not approximate anything or to be surprised if it did approximate something.. Thanks. However, I can't explain my colleagues that they can use Approx if they want, but for zeroes, that does not work and they should use something else instead. We preferred practicality and modified Approx instead (we set the scale to std::numeric_limits::epsilon by default i think). That was without LTCG. with /LTCG and /GL, the problem moved to link time (surprise :) ), and code generation was actually a few seconds faster (but not substantially) for that function.. thanks for taking the time to look into this.\nindeed putting a #pragma optimize(\"\", off) around the problematic test case drops its compile time to a second. it might not be possible to use this inside the REQUIRE macro, when i tried to put it just around the REQUIRES inside the test case, i got an error that the pragma must be placed outside functions.. @horenmar just to make sure, you didn't already create a bug report by any chance? i'd do that today if there's no reason not to do it.. ....could you send me the code you used to repro this? or tell me what you did? just now i didn't manage to repro this with a very simple example project.. I tried again reproducing this and managed to do it with 15.9.4 and the following code:\n```c++\ninclude \"catch.hpp\"\ninclude \nstruct SomeClass {\n    SomeClass bar() {\n        return SomeClass();\n    }\nstd::string foo() {\n    return \"foo\";\n}\n\n};\nTEST_CASE(\"foo is bar\") {\n    CHECK(SomeClass().bar().foo() == \"bar\");\n    // < repeat 300 times>\n}\n```\ncompiles in 40 seconds.\nif i try to remove the call to the constructor or bar, the compilation time is just a few seconds.\nshall i open a bug report with this or do you want to do that?. i created https://developercommunity.visualstudio.com/content/problem/414125/exponential-compilation-time-with-catch2-asserts.html. however, i did not actually try to reduce catch itself to a minimum. Let's see whether someone looks at it :). no worries, go ahead. ",
    "Danielhu229": "A effective comparison between doubles should compare the exponent bits and fraction bits separately, 0.0 can be well handled in this case.. Another problem, double is at exp level precision, while int and fix-pointer is at the linear level, which makes Approx not that \"Approx\", and also makes the  a relative comparison take no effects for int / fixed-point types. \nIt raise issues like #1444 . @horenmar PTAL. All right I see that, but that's quite confusing, I didn't even notice there are 3rd party codes in catch2 until you remind me. . ",
    "hollasch": "@Danielhu229 writes:\n\nA effective comparison between doubles should compare the exponent bits and fraction bits separately, 0.0 can be well handled in this case.\n\nNot around zero. The problem isn't the zero point, it's the fact that floating-point numbers near zero (over 8 million values) are denormalized. For these values, the exponent and mantissa are mixed together. Particularly around zero, there's a danger of advertising one approach as the right one. In this particular case, where you're testing around a fixed value, an epsilon value can make sense (though not a thoughtlessly chosen one). An ULP comparison ends up being equivalent, again, due to the fixed comparison point. However, there's a huge relative leap from the smallest positive value to zero to the largest negative value. In addition, a sign-change here could mean a clear error that should be flagged.\nFor all these reasons, I'd prefer the following example code, as it's much simpler, vastly more clear, and does not depend on the reader having memorized the underlying current implementation of Catch2's Approx() helper:\nREQUIRE (x > 0)\nREQUIRE (x < 1e-140)\n. ",
    "Saarg": "CHECK is intended to fail tests but keep running the test so that's not what you're looking for.\nCHECK_NOFAIL is probably what you want. I've used -d yes to display the tests as they are run and find what test is crashing/hanging. ",
    "svdHero": "That makes totally sense. Thank you for being open for a PR. I shall go and try my luck. :). ",
    "bigdaddy": "Awesome, thanks!. ",
    "MappingSuite": "The Url points to a 404. Updating to the URL used at some other places.. ",
    "johvik": "Turns out there are some issues with this, for example when capturing pointers that might differ. ",
    "aegonzalez": "You're right. I found it in the cmake global file. Thank you.. ",
    "Wittmaxi": "couldn't you just overload the operator on that class the boolean expression is put into?. I wouldn't say that it's rare. You check wether something is a OR b. Lets say I have a state machine that can only have two states (or three or n). With a simple || I could check wether the state of the state machine is still valid. . ",
    "NeroBurner": "you could combine the Catch2 tag [!shouldfail] and De Morgan's Law as a workaround\nusing - symbol as a logical NOT\nA OR B -> -(-A AND -B)\nCreate a the following testcase\ncpp\nTEST_CASE(\"mytest\", \"[!shouldfail]\") {\n  REQUIRE(!A);\n  REQUIRE(!B);\n}. I'm against adding a FindCatch2.cmake file, the config file should suffice. IMHO config files created and installed by the project are better than generic FindXXX.cmake files\nFor package integration Catch2 is already doing the right thing to install the config file as ${CMAKE_INSTALL_PREFIX}/lib/cmake/Catch2/Catch2Config.cmake. This enables us as users to find it with find_package(Catch2) or find_package(Catch2 CONFIG) when Catch2 is installed into the system (no other environment variables should be necessary)\nDo you have issues with just using find_package(Catch2)?. there is no need for the FindCatch2.cmake module\nAccording to the documentation /usr/lib/cmake/Catch2 is in the search path for find_package(Catch2 CONFIG). Therefore it will be found without any other system modification\nhttps://cmake.org/cmake/help/latest/command/find_package.html#search-procedure\nDo you have a pkgbuild script for the AUR? I could test against that. I just tested with the catch2 package community/catch2 2.5.0-1 and the following CMakeLists.txt\ncmake\ncmake_minimum_required(VERSION 3.5.1)\nproject(Catch2_find)\nfind_package(Catch2)\nif(TARGET Catch2::Catch2)\n    message(\"Found catch2\")\nelse()\n    message(\"no target catch2\")\nendif()\nand it works as intended. see documentation https://github.com/catchorg/Catch2/blob/master/docs/tutorial.md#what-did-we-do-here\ndo the #define CATCH_CONFIG_MAIN exactly once. And it must be before your first inclusion of catch2.hpp\nI haven't tested it, but in your case the following test.cpp should work\n```cpp\ndefine CATCH_CONFIG_MAIN\ninclude test_helper.h\nTEST_CASE( \"work with SumCalculator\", \"[SumCalculator]\")\n{\n    auto i = SumCalculator();\n    checkSumCalculatorInterface( &i );\n}\n``\nyou also could do one test.cpp file where you do the#define CATCH_CONFIG_MAINand another cpp file which implements the tests (without a#define`). good reason! maybe you can make a PR (but don't modify the single_source file, that one is generated). ",
    "v0dro": "Issue fixed by undefining macro CATCH_CONFIG_POSIX_SIGNALS since scorep wanted to do the signal handling itself.. ",
    "kraj": "@horenmar Yes, I see, may be we can add conditionals for checking Clang >= 3.9 and gcc >= 5 to enable it. Otherwise keep the std::move. > I took a slightly different approach, can you check if it eliminates the warning on your machine?\nThe alternate approach works for me. \nTested- by: Khem Raj raj.khem@gmail.com. ",
    "ncihnegn": "No issue with using per se. But to make a package for Homebrew or Arch, it will be nice Catch2 is installed along with other CMake modules under share/cmake/Modules.. Agreed.. \u279c  build git:(master) clang-tidy --version\nLLVM (http://llvm.org/):\n  LLVM version 7.0.1\n  Optimized build.\n  Default target: x86_64-apple-darwin18.2.0\n  Host CPU: skylake\n\u279c  build git:(master) cat ../.clang-tidy\nChecks: '*,-bugprone-exception-escape,-clang-analyzer-cplusplus.NewDeleteLeaks,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-cppcoreguidelines-pro-type-reinterpret-cast,-fuchsia-default-arguments,-fuchsia-overloaded-operator,-fuchsia-trailing-return,-google-default-arguments,-google-runtime-references,-hicpp-no-assembler,-hicpp-no-array-decay,-misc-unused-parameters'. ",
    "stefansullivan": "Yes I'm using my own main, and yes I defined it in my cmake. I also tried\nmoving it out of cmake and putting it before include anyways, and that\ndidn't fix it.. I was trying to move from Catch 1.x to 2.x and this was the only error (so\nfar) that I encountered. Do I still need this header for the teamcity\nreporter in Catch 2.x?\nOn Fri, Jan 4, 2019, 11:04 Jozef Grajciar <notifications@github.com wrote:\n\nthe reporter you use is somewhat older? i tried compiling it myself and it\ncompiled.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/catchorg/Catch2/issues/1483#issuecomment-451537340,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ANbdw4clChezL99vmNTf9uhmj_jIYoNYks5u_6XOgaJpZM4Zo7fN\n.\n. Are you saying that checking out matter is not enough to update both of\nthose files? Is there a different path for it?\n. I'm using include/ not single_include/\n. So how do you configure the build to include? Do you use\n\n-ICatch/single_include -ICatch/reporters\n\nand then include without the reporters path?\n#define CATCH_CONFIG_RUNNER\n#include <catch.hpp>\n#include <catch_teamcity_reporter.hpp>\n\nIs this the preferred way of doing it?. Ok, thank you. Sorry stupid upgrade issues. I got it working now that everything is reading from single_include and using the actual path in #include statements. ",
    "Lotterleben": "Whoops, I just noticed that my editor auto-removed existing trailing whitespace as well. I can undo this or move it into a new PR if you like.. (pushed a small fix to hopefully make AppVeyor happy, will be squashed on request). Oh, good to know! I added a note for that, I hope I got the path right.. ",
    "yuriy-mochurad": "I have also faced this issue and would be great to have it fixed.. ",
    "hbina": "Is it possible to rename this PR? Division by Zero is a bit misleading because imo this will never happen. The actual problem (as correctly pointed out by the author) is that the mean/average is actually inaccurate.\nEdit: Reading through the code again, I think there is actually no problem here. The mean calculation is already correct. Note that the iteration is using pre-increment.\nhttps://github.com/catchorg/Catch2/blob/20dd08e964472c03ebad1a2562ce38dd324b7a5f/include/internal/catch_timer.cpp#L28\nEdit2:I am just stupid, ignore edit1.. I think the problem occurs because epsilon and margin calculation uses the same function, so both checks are executed, even though these two are different things.\nParticularly, the problem arises when the accuracy of the margin is smaller than the default epsilon and so the epsilon_check will pass the test.\nPerhaps a fix would be to introduce a state machine? However, I am not sure if something like \n Approx(1.0).margin(0.0000001).epsilon(0.01) is used?. There are still lots of problem with this PR. The problem comes from MSVC for some reason...will try to resolve this first before going ahead.. Simple conversion fixed it.. I messed up my original fork and had to create a new one\nNote to self: Never merge your own changes to your master!. The original Issue #1507 was marked as Resolved since this behaviour is intended. Closing the PR.. Yea, my bad, its my habit of auto-formatting. I have tried to resolve it by copying the original code from master and changing only the related function. I hope the effective diff is a lot smaller now.. I am not entirely sure about this but if we have something like\nREQUIRE(Factorial(1) == 1  && Factorial(2)==2);\nthen the second operand after && would be resolved as a bool?\nAnd I think this why the original code specialized it for bool too.\nauto operator!=(bool rhs) -> BinaryExpr<LhsT, bool> const {\n            return {m_lhs != rhs, m_lhs, \"!=\", rhs};\n        }\nJust a way to tell that chaining with && is not acceptable or something...\nEdit: Boy, now that I think about it, that is indeed a dumb thing to add....I suppose typename RhsT is sufficient. Its not like I am doing anything different for the  specialization.. And also, I think Travis-CI build is broken?\nconan-package-tools 0.21.2 has requirement conan<1.11.0,>=1.7.0, but you'll have conan 1.11.1 which is incompatible.. Yea, this is obviously a mistake. \nHowever, I am having trouble with making changes to this PR....I have deleted my fork because... reasons..should I close this and make a new one?\nEdit: I tried editing online and its not letting me do it because i have to be signed in to edit my own branch..I guess it can't determine that I access due to the repo being deleted...sorry for the trouble.... ",
    "williamjameshandley": "\nNitpick: I think \" is approx\" would work much better as the stringification string inside the matcher.\n\nI'm fine with adjusting this.\n\nNote: You should also add a test against strong typedef.\n\nI'm not sure exactly what you mean by this. Could you give an example elsewhere in the code?\nI also have a question -- currently I need to use Catch::Approx, otherwise it conflicts with Catch::Details::Aprox, and the compiler can't resolve the the ambiguity. What is the most consistent way to deal with this? I could change it to VectorApprox, but then that's not consistent with Equals or Contains. > You can also stop it from being ambigous by bringing in the function explicitly:\nI've opted for this solution.\nRegarding the strong typedefs, I had a go at this, but the main issue I seem to be getting if I try to implement a new std::initialiser_list call like so:\nc++\n    template<typename T>                                                                                                                                                                          \n    Vector::ApproxMatcher<T> Approx( std::initializer_list<T> const& comparator ) {                                                                                                               \n        return Vector::ApproxMatcher<T>( comparator );                                                                                                                                            \n    }\nis that this tends to cause segfaults due to the constant reference implicit in the std::vector<T> const& m_comparator; member function.\nThis also seems like a more wholesale change, given that it doesn't work for the Equals, Contains etc methods. Perhaps I could submit an issue to upgrade the whole include/internal/catch_matchers_vector.h header?. ",
    "torfinnberset": "Unfortunately the same issue:\n```\n$ conan remove -f catch2/\n$ conan install Catch2/2.5.0@catchorg/stable\nConfiguration:\n[settings]\narch=x86_64\nbuild_type=Release\ncompiler=apple-clang\ncompiler.libcxx=libc++\ncompiler.version=10.0\nos=Macos\n[options]\n[build_requires]\n[env]\nCatch2/2.5.0@catchorg/stable: Not found in local cache, looking in remotes...\nCatch2/2.5.0@catchorg/stable: Trying with 'bloomlife'...\nCatch2/2.5.0@catchorg/stable: Trying with 'conan'...\nCatch2/2.5.0@catchorg/stable: Trying with 'conan-community'...\nCatch2/2.5.0@catchorg/stable: Trying with 'bincrafters'...\nCatch2/2.5.0@catchorg/stable: Trying with 'catchorg'...\nDownloading conanmanifest.txt\n[==================================================] 1.4KB/1.4KB    \nDownloading conanfile.py\n[==================================================] 889B/889B      \nDownloading conan_export.tgz\n[==================================================] 891B/891B      \nDecompressing conan_export.tgz: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 891/891 [00:00<00:00, 273kB/s]\nERROR: Failed requirement 'Catch2/2.5.0@catchorg/stable' from 'PROJECT'\nERROR: Requested 'Catch2/2.5.0@catchorg/stable' but found case incompatible 'catch2'\nCase insensitive filesystem can't manage this\n```\nSome more info if it helps: \n```\n$  conan --version\nConan version 1.11.2\n$ conan remote list\nconan: https://bintray.com/conan/conan-center [Verify SSL: True]\nconan-community: https://api.bintray.com/conan/conan-community/conan [Verify SSL: True]\nbincrafters: https://api.bintray.com/conan/bincrafters/public-conan [Verify SSL: True]\ncatchorg: https://api.bintray.com/conan/catchorg/Catch2 [Verify SSL: True]\n```\n. Hmm, I ran conan remove -f catch2 again, then did ls ~/.conan/data to verify that is was not there. Indeed there was nothing, so I re-ran conan install Catch2/2.5.0@catchorg/stable and now it passed \n```\nconan install Catch2/2.5.0@catchorg/stable\nConfiguration:\n[settings]\narch=x86_64\nbuild_type=Release\ncompiler=apple-clang\ncompiler.libcxx=libc++\ncompiler.version=10.0\nos=Macos\n[options]\n[build_requires]\n[env]\nCatch2/2.5.0@catchorg/stable: Not found in local cache, looking in remotes...\nCatch2/2.5.0@catchorg/stable: Trying with 'bloomlife'...\nCatch2/2.5.0@catchorg/stable: Trying with 'conan'...\nCatch2/2.5.0@catchorg/stable: Trying with 'conan-community'...\nCatch2/2.5.0@catchorg/stable: Trying with 'bincrafters'...\nCatch2/2.5.0@catchorg/stable: Trying with 'catchorg'...\nDownloading conanmanifest.txt\n[==================================================] 1.4KB/1.4KB    \nDownloading conanfile.py\n[==================================================] 889B/889B      \nDownloading conan_export.tgz\n[==================================================] 891B/891B      \nDecompressing conan_export.tgz: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 891/891 [00:00<00:00, 402kB/s]\nCatch2/2.5.0@catchorg/stable: Installing package\nRequirements\n    Catch2/2.5.0@catchorg/stable from 'catchorg' - Downloaded\nPackages\n    Catch2/2.5.0@catchorg/stable:5ab84d6acfe1f23c4fae0ab88f26e3a396351ac9 - Download\nCatch2/2.5.0@catchorg/stable: Retrieving package 5ab84d6acfe1f23c4fae0ab88f26e3a396351ac9 from remote 'catchorg' \nDownloading conanmanifest.txt\n[==================================================] 1.0KB/1.0KB    \nDownloading conaninfo.txt\n[==================================================] 150B/150B      \nDownloading conan_package.tgz\n[==================================================] 110.0KB/110.0KB\nDecompressing conan_package.tgz: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 107k/107k [00:00<00:00, 8.02MB/s]\nCatch2/2.5.0@catchorg/stable: Package installed 5ab84d6acfe1f23c4fae0ab88f26e3a396351ac9\n```\nAnyway, thanks @Minimonium and @horenmar for your help. Something is flaky though, could be a Conan cache issue or something else. I will close this issue for now. Well nevermind, just saw in my log that I initially typed conan remove -f catch2/ not conan remove -f catch2/*. Still, I don't think the issue should've happened in the first place, but I guess it's a Conan issue. @Minimonium only Windows is case insensitive AFAIK; macOS and Linux systems are case sensitive.. @Minimonium found a similar issue reported in Conan: https://github.com/conan-io/conan/issues/1557. ",
    "Minimonium": "@torfinnberset Can you please check the contents of your .conan/data folder after the conan remove -f catch2 part?. @torfinnberset it could be macOS specific, I couldn't reproduce the error on Windows.\n[Both are case insensitive afaik]. @torfinnberset then there is something fishy because of the error:\nERROR: Requested 'Catch2/2.5.0@catchorg/stable' but found case incompatible 'catch2'\nCase insensitive filesystem can't manage this. ",
    "mjerabek": "The commit does not compile -- it should be getCurrentContext().getConfig()->stream(), but is getCurrentContext().getConfig().stream().. ",
    "YarikTH": "I defined CATCH_CONFIG_MAIN exactly once. But before it I included catch2.hpp without define via another header and it broke my code. If catch2.hpp behaved like stb libraries where header and impl part have separate define guards then any include of catch2.hpp without CATCH_CONFIG_MAIN defined don't break anything.\n```\ndefine CATCH_CONFIG_MAIN\ninclude \"test_helper.h\"\nwill work, but it's bad practice. I should know that I included catch2.hpp in test_helper and be aware that I should define CATCH_CONFIG_MAIN right before it instead of using clear two strings code from manual:\ndefine CATCH_CONFIG_MAIN\ninclude \"catch/catch2.hpp\"\n```\njust because any include of catch2.hpp not from cpp will break it.\nCurrent catch2.hpp structure:\n\nifndef TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED\ndefine TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED\n// non main content\nifdef CATCH_CONFIG_MAIN\n// main content\nendif // CATCH_CONFIG_MAIN\nendif // TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED\n\nDesired catch2.hpp structure:\n\nifndef TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED\ndefine TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED\n// non main content\nendif // TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED\nifdef CATCH_CONFIG_MAIN\nifndef TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED_CONFIG_MAIN\ndefine TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED_CONFIG_MAIN\n// main content\nendif // TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED_CONFIG_MAIN\nendif // CATCH_CONFIG_MAIN. Ok I'll try it.. For now I've just created branch with tests that fail to compile. According to my investigations to separate CATCH_CONFIG_MAIN part from TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED I have to modify original catch.hpp instead of just patching generateSingleHeader.py.. I gave up. I'm not so interested in this feature and it's hard to implement without main header reorganisation that will lead to undefined problems. And I moved to use doctest instead anyway.. Locally suppress hidden warnings on Class and Compile tests that appeared on gcc-4.8 gcc-4.9  and gcc-5.0. I found #674 and understand comment above suppression\n```\n// GCC likes to warn on REQUIREs, and we cannot suppress them\n// locally because g++'s support for _Pragma is lacking in older,\n// still supported, versions\n\npragma GCC diagnostic ignored \"-Wparentheses\"\npragma GCC diagnostic push\nSo I close request. But it would be better to mark this more obviously. Because now it's unclear from comment before. e.g.:\n// GCC likes to warn on REQUIREs, and we cannot suppress them\n// locally because g++'s support for _Pragma is lacking in older,\n// still supported, versions\npragma GCC diagnostic ignored \"-Wparentheses\" //< Don't move under push/pop. See #674\npragma GCC diagnostic push\nor\n// GCC likes to warn on REQUIREs, and we cannot suppress them\n// locally because g++'s support for _Pragma is lacking in older,\n// still supported, versions\n// [\npragma GCC diagnostic ignored \"-Wparentheses\"\n// ]\npragma GCC diagnostic push\n```. ",
    "apGribble": "Replacing the following:\nbool Approx::equalityComparisonImpl(const double other) const {\n        // First try with fixed margin, then compute margin based on epsilon, scale and Approx's value\n        // Thanks to Richard Harris for his help refining the scaled margin value\n        return marginComparison(m_value, other, m_margin) || marginComparison(m_value, other, m_epsilon * (m_scale + std::fabs(m_value)));\n    }\nWith:\nbool Approx::equalityComparisonImpl(const double other) const {\n        // First try with fixed margin, then compute margin based on epsilon, scale and Approx's value\n        // Thanks to Richard Harris for his help refining the scaled margin value\n        if(m_margin == 0.0) return marginComparison(m_value, other, m_epsilon * (m_scale + std::fabs(m_value)));\n        return marginComparison(m_value, other, m_margin);\n    }\nSorts the problem for me but has slightly odd behaviour is that Approx().margin(0.0) will perform the check against epsilon rather than ensuring the inputs are identical.. I think the current behaviour is very misleading as you wouldn't expect Approx().margin(n) to check against both a margin and epsilon. \nFor me hbina's solution is much more logical. If you add another state then I think it deals with cases where you want to use margin, epsilion or both.\nE.g.\ncpp\nswitch (current_calculation_type) {\n            case BOTH: {\n                is_equal = marginComparison(m_value, other, m_margin) ||\n                           marginComparison(m_value, other, m_epsilon * (m_scale + std::fabs(m_value)));\n                break;\n            }\n            case MARGIN: {\n                is_equal = marginComparison(m_value, other, m_margin);\n                break;\n            }\n            case EPSILON:\n            case DEFAULT: {\n                is_equal = marginComparison(m_value, other, m_epsilon * (m_scale + std::fabs(m_value)));\n                break;\n            }\n            default: {\n                // How is this possible???\n            }\n        }\n        return is_equal;\n    }\n    void Approx::setMargin(double margin) {\n        CATCH_ENFORCE(margin >= 0,\n            \"Invalid Approx::margin: \" << margin << '.'\n            << \" Approx::Margin has to be non-negative.\");\n        m_margin = margin;\n        if( current_calculation_type == EPSILON ) {\n            current_calculation_type = BOTH;\n        }\n        else {  \n            current_calculation_type = MARGIN;\n        }\n    }\n    void Approx::setEpsilon(double epsilon) {\n        CATCH_ENFORCE(epsilon >= 0 && epsilon <= 1.0,\n            \"Invalid Approx::epsilon: \" << epsilon << '.'\n            << \" Approx::epsilon has to be in [0, 1]\");\n        m_epsilon = epsilon;\n         if( current_calculation_type == MARGIN ) {\n            current_calculation_type = BOTH;\n        }\n        else {  \n            current_calculation_type = EPSILON;\n        }    \n    }\n. ",
    "robinmoussu": "Thanks, I was going to do it, but I'm glad you did it.. Using gcc9 (not tested with other compilers), when the C++17 mode is activated, the following test fails:\n../projects/SelfTest/UsageTests/ToStringVariant.tests.cpp:37: FAILED:\n  REQUIRE( value.valueless_by_exception() )\nwith expansion:\n  false\nI don't understand why however.\nFor reference:\nc++\n 30     SECTION(\"valueless by exception\") {\n 31         struct sample {\n 32             operator int() const { throw 42; }\n 33         };\n 34\n 35         type value{1.5f};\n 36         REQUIRE_THROWS_AS( value.emplace<int>(sample{}), int );\n 37         REQUIRE( value.valueless_by_exception() );\n 38         CHECK( \"{valueless variant}\" == ::Catch::Detail::stringify(value) );\n 39     }. My mistake. I guess I was too tired yesterday.. Same.. ",
    "thetha": "Problem solved! Sorry was nooby. ",
    "SimonChh": "FYI, the problem can be fixed by slightly changing the RunContext::runCurrentTest() function:\nInstead of:\n```\n        CATCH_TRY {\n            if (m_reporter->getPreferences().shouldRedirectStdOut) {\nif !defined(CATCH_CONFIG_EXPERIMENTAL_REDIRECT)\n            RedirectedStdOut redirectedStdOut;\n            RedirectedStdErr redirectedStdErr;\n\n            timer.start();\n            invokeActiveTestCase();\n            redirectedCout += redirectedStdOut.str();\n            redirectedCerr += redirectedStdErr.str();\n\nelse\n```\nI used this:\n```\n        CATCH_TRY {\n            if (m_reporter->getPreferences().shouldRedirectStdOut) {\nif !defined(CATCH_CONFIG_EXPERIMENTAL_REDIRECT)\n            RedirectedStreams redirectedStreams(redirectedCout, redirectedCerr);\n\n            timer.start();\n            invokeActiveTestCase();\n\nelse\n```\nWhere RedirectedStreams is a RAII-style helper class that simply redirects the test output to redirectedCout and redirectedCerr in its destructor (so that the output gets redirected even if invokeActiveTestCase() throws an exception).\n. > Thanks\nNo problem. Thanks to you too Martin for maintaining this library.. Can I move the class to catch_output_redirect.h/.cpp instead?\nI need to reference the RedirectedStdOutand RedirectedStdErr classes from the header file (unfortunately I cannot forward declare them), and these two classes are defined in catch_output_redirect.h (which already #includes catch_stream.h), so I want to avoid the circular include dependency. Plus the class is not really a stream, more a form of output redirection. I could rename the class to something like RedirectOutputToStrings if it's clearer.. ",
    "gagbo": "Will do, thanks for the input (and finding that commit).. Didn't have the time to search and pull updates directly from the build environment so I had to wait for the update to trickle down to rawhide repo.\nConfirming that the bug is not there any more on\ngcc (GCC) 9.0.1 20190129 (Red Hat 9.0.1-0.2)\nThanks for your help again :). ",
    "jimon": "Looks like false alarm, we found that is was compiler bug interleaved with this issue.. ",
    "ammaratef45": "@martinmoene Adding -std=c++0x removes that line only and everything else is the same. @martinmoene Okay thank. ",
    "laudrup": "I'm experiencing something similar, which I expect could be related or possibly the same bug by simply using the -l command line option:\n```\nStarting program: /tmp/lz4_stream/build/test/lz4_stream_test -l\nAll available test cases:\nProgram received signal SIGSEGV, Segmentation fault.\nCatch::(anonymous namespace)::PosixColourImpl::setColour (this=0x5555557b7768 , _escapeCode=0x55555574dad3 \"[0m\")\n    at /tmp/lz4_stream/build/thirdparty/catch2/Catch2-prefix/src/Catch2/single_include/catch2/catch.hpp:8039\n8039                getCurrentContext().getConfig()->stream()\n(gdb) bt\n0  Catch::(anonymous namespace)::PosixColourImpl::setColour (this=0x5555557b7768 , _escapeCode=0x55555574dad3 \"[0m\")\nat /tmp/lz4_stream/build/thirdparty/catch2/Catch2-prefix/src/Catch2/single_include/catch2/catch.hpp:8039\n\n1  0x00005555556ae402 in Catch::(anonymous namespace)::PosixColourImpl::use (this=0x5555557b7768 , _colourCode=Catch::Colour::None)\nat /tmp/lz4_stream/build/thirdparty/catch2/Catch2-prefix/src/Catch2/single_include/catch2/catch.hpp:8014\n\n2  0x00005555556ae9a1 in Catch::Colour::use (_colourCode=Catch::Colour::None) at /tmp/lz4_stream/build/thirdparty/catch2/Catch2-prefix/src/Catch2/single_include/catch2/catch.hpp:8101\n3  0x00005555556ae8b2 in Catch::Colour::Colour (this=0x7fffffffd7bf, _colourCode=Catch::Colour::None) at /tmp/lz4_stream/build/thirdparty/catch2/Catch2-prefix/src/Catch2/single_include/catch2/catch.hpp:8086\n4  0x00005555556b03a2 in Catch::listTests (config=...) at /tmp/lz4_stream/build/thirdparty/catch2/Catch2-prefix/src/Catch2/single_include/catch2/catch.hpp:8915\n5  0x00005555556b17d8 in Catch::list (config=...) at /tmp/lz4_stream/build/thirdparty/catch2/Catch2-prefix/src/Catch2/single_include/catch2/catch.hpp:9025\n6  0x00005555556b8306 in Catch::Session::runInternal (this=0x7fffffffdb80) at /tmp/lz4_stream/build/thirdparty/catch2/Catch2-prefix/src/Catch2/single_include/catch2/catch.hpp:10856\n7  0x00005555556b8137 in Catch::Session::run (this=0x7fffffffdb80) at /tmp/lz4_stream/build/thirdparty/catch2/Catch2-prefix/src/Catch2/single_include/catch2/catch.hpp:10816\n8  0x00005555556ebac5 in Catch::Session::run (this=0x7fffffffdb80, argc=2, argv=0x7fffffffddd8) at /tmp/lz4_stream/build/thirdparty/catch2/Catch2-prefix/src/Catch2/single_include/catch2/catch.hpp:10564\n9  0x00005555556cb2b8 in main (argc=2, argv=0x7fffffffddd8) at /tmp/lz4_stream/build/thirdparty/catch2/Catch2-prefix/src/Catch2/single_include/catch2/catch.hpp:14308\n```\nPlatform information:\nOS: Debian Buster (testing)\nCompiler version: GCC v8.2.0\nCatch version: v2.6.0\nLet me know if I can provide any more information. I can also open a separate issue but this, but it looks very much like the same problem.. ",
    "bartlibert": "I can confirm this on my system, with the same stacktrace.\nOS: Debian GNU/Linux buster\nCompiler+version: g++ (Debian 8.2.0-16) 8.2.0\nCatch version: 2.6.0. ",
    "landersson": "How do I try this fix? I've tried cloning catch2 master, built it, make install and then copy include/catch2/catch.hpp from the resulting install directory into my own repo.\nAfter a complete rebuild of my test executable, I'm still getting a segfault.\n. Thanks @JoeyGrajciar , works fine for me now.. ",
    "gnatty7": "I think the some version of the former idea makes sense to me.  For each test case iteration, if there are additional elements in the generator for that iteration left over, they should be discarded, or as you say ignored.\nIf the API is specific about specifying the chunk size separately from the number of trials, this should be possible. Would it be possible to statically check that the chunks were properly consumed by local variables? It still doesn't mean the generator won't exhaust early (that depends on the implementation of next()) but might help with making sure the intent of the generator is fulfilled.\nAnother idea is that we want to generate data, of different types, for a single trial.  We could write a 'chunking' generator like the one above, but it returns a std::tuple<> of the various types that are needed.  It might be nice to have this built-in as a generator type where the API lets the programmer specify the types with callbacks/Generator classes to generate those elements.\ne.g.\nint a;\nfloat b;\nstring c;\nCustom d;\nint trials = 10;\nstd::tie(a,b,c,d) = GENERATE(take(trials, ChunkedGenerator<int, float, string, Custom>(MyIntGenerator, MyFloatGenerator, MyStringGenerator, MyCustomGenerator))\nWhere My*Generator are custom generator classes for producing those types that are auto-wrapped by a GeneratorWrapper.  \nThis would presume that all of those elements are independently generated, while an approach like I've done with std::vector using std::tuple would work where the generator is aware of all of the types and whatever dependencies they might have.\n. ",
    "girtsf": "Thanks, @horenmar!\nWhat we are using isn't QNX, but isn't too far off. It's something that starts with \"vx\" and ends with \"works\".  :)\nCatch2 works on it with two minor fixes:\n1) this pull request\n2) https://github.com/catchorg/Clara/pull/86  (just fixed it so that it now passes the appveyor windows builds too)\nThanks for the project!. ",
    "upsj": "It seems like my changes have caused the execution order of some TEMPLATE_PRODUCT test cases to be reversed. I don't really understand why that's the case, but everything still seems to be in order with the output.. The AppVeyor checks are failing because cl (incorrectly?) doesn't expand the INTERNAL_CATCH_NOINTERNAL_CATCH_DEF macro before stringizing. As far as I can tell, that's the only difference to clang/gcc.. ",
    "icegood": "Ok. Let it be as known issue.. ",
    "Chukak": "Hi!\nThis error occurs because you use the operator<, which has no definition. To fix this, delete the inline specifier in the definition of operator< in the .cpp file or move the definition to the header file.\nThis error is not a Catch error.. If you use cmake, you can try something like:\nincude_directories(SYSTEM \"${CATCH_DIR}/single_include/catch2/\"). How about this:\n```cpp\npragma GCC diagnostic push\npragma GCC diagnostic ignored \"-Wunused-variable\"\ninclude \"catch.hpp\"\npragma GCC diagnostic pop\n``` . ",
    "jcpaik": "Chukak,\nThanks for mentioning the right place to look. I did my search and indeed the code had the error, not Catch (link). One should have the definition inside header in general to define a inline function. . Is putting the issue to close enough to 'undo' it? Since this 'error' is due to my lack of understanding of C++, not Catch, the title seems misleading even for a closed issue.. ",
    "zivsha": "@horenmar, if you want to give me some guiding points (since I never looked at the source code) maybe I can implement this and open a PR. Partial implementation, closing PR for the moment. > Also one more comment: The resulting filter string should preferably be roundtrippable. This means that user can just copy-paste the output string onto CLI and get the same behaviour.\nDoes it matter if the order is not preserved?\n. Fresh installation of VS, me too. I'll untabify it.. ",
    "rhd": "Hi,\nIt seems to happen between https://github.com/catchorg/Catch2/compare/v2.2.1...v2.2.2\nAnd you're right, when I use gcc 4.8.5 on RHEL7, I do not get those internal catch section variable warnings. Unfortunately, for me, I'm stuck on RHEL6 with gcc 4.8.1.\nAny ideas what would trigger the warnings?. @Chukak great idea! Unfortunately, it doesn't help. I verified -isystem <path-to-catch-inc-dir> is on the command line but the internal unused variables still spill out.. To my surprise, the #pragma statements around the include does not fix unused catch2 internal section variables from leaking out.. @horenmar thanks. If it's not obvious why the unused variables leak out in gcc 4.8.1 - let's chalk this up to a crappy compiler. I'll see if we can use the dev-toolset compilers instead. I'll close this.. ",
    "edgrin": "Oh, now I see that is no issue with documentation, you are right. In my case I got there from the main page: https://github.com/catchorg/Catch2\nAs you can see all links from \"How to use\" points to files from master. So may be solution could be to use links to the current release.. ",
    "oskycar": "I found that  catch support redefine the cout and ceer fun\u3002. ",
    "alibabashack": "Hi, could somebody please take a look at the output of the test comparison? I think the delta looks good and is only due to the added test, but I am new to the process. Thanks!. @horenmar \nI did not see that problem coming. Thanks a lot for your crystal clear explanation. That's of course enough to cancel this PR.\nFor the record:\nThere is an easy workaround to solve the idea shown in https://github.com/catchorg/Catch2/pull/1566/commits/d385b468cb8c39fd1c263fbe38cddca91b791713 without capturing. Simply add an argument to your lambda as shown below:\nauto[seqId, inputSequence, expectedProperty] =\n        GENERATE(table<std::string, std::function<void(SomeStateMachine&)>, bool>({\n            {\n                \"AA\",\n                [](SomeStateMachine& sm) {\n                    sm.doA();\n                    sm.doA();\n                },\n                false\n            },\n            {\n                \"AB\",\n                [](SomeStateMachine& sm) {\n                    sm.doA();\n                    sm.doB();\n                },\n                true\n            },\n        }));\ninputSequence(instance);.\n",
    "SerebryanskiySergei": "The problem was in reassigning logger pointer.\n```\nif (logger_p == nullptr)\n      *logger_p= log4cplus::Logger::getInstance(LOG4CPLUS_TEXT(\"lowLogger\"));\nlogger = *logger_p;      // This is already a pointer\n```. ",
    "davegi": "Here it is: CatchOrg.Catch 2.2.0. I noticed when I used VS' package manager to install Catch2 and found the parameterized test macros were missing.. ",
    "erelsgl": "Looks good. And where is the documentation of the Catch::TestCaseInfo class?. This is very helpful, thanks!. ",
    "grogy": "Remove back-slash?\n. ",
    "blackhearted": "No, just weird part of coding convention I do not always follow.\nOn 8 January 2016 at 13:51, J\u0119drzej notifications@github.com wrote:\n\nIn single_include/catch.hpp\nhttps://github.com/philsquared/Catch/pull/570#discussion_r49185040:\n\n@@ -6817,7 +6851,8 @@ namespace {\n         static Win32ColourImpl s_instance;\n         return &s_instance;\n}\n+#else\n\nEmpty #else clause any reason it's there?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/philsquared/Catch/pull/570/files#r49185040.\n\n\nBest Regards,\nVladimir Stepanov\n. ",
    "drewish": "I added the periods in i.e. because e.g. had them.. ",
    "dosena": "I don't understand if there is a \"hard\" expectation on what should happen with loose text artifact here. "
}