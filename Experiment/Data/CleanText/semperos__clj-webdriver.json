{
    "semperos": "Thanks for this fix. I tried to comb through all the functions to make sure they returned the element (where it made sense), but I missed this one.\n. @xeqi Thank you for taking the time both to read the whole README and to put together this pull request. I'll try this out on my machine once I'm back in front of it tomorrow.\n. I've been reviewing all the \"wait\" functionality provided by WebDriver. For WebDriverWait, I think we should support the three-member constructor at a minimum, which allows setting both a timeout and an interval for attempts. I'm not convinced that the five-member constructor adds much value, but I'm open to discussion on that point.\n. I created conflicts with some subsequent edits before merging this request. Thank you very much for adding this functionality and for adding tests for it. Merged.\n. Makes sense. Thanks for taking the time to contribute!\n. Thanks for catching these! I'll make it a priority to add test coverage for this namespace, and will merge your changes. Going forward, no need to change the version in project.clj for a pull request. Thanks.\n. I've now pushed up changes to master that include your fixes to form-helpers. Thanks for contributing!\n. I'll address both points.\nIf I recall correctly, support for .getCssValue() has always been unstable (even mentions it in the API documentation. That said, I obviously use it in my code base, so happy to pull this in.\nThe ChromeDriver issue is a different can of worms. The \"canonical\" setup as I understand it is just to download the separate driver and put it on your system's PATH; the ChromeDriver implementation provided by Selenium-WebDriver handles everything else for you. It's an unfortunate extra step, but definitely one at the Selenium-WebDriver level.\n. Very interesting. Thanks for raising these issues; keep 'em coming! I'm happy to incorporate these changes, but if you have time, it would be great if you could get the code working first. Here are some thoughts:\nPlease remove your :jvm-opts addition to project.clj. I use Chrome frequently with clj-webdriver, and no further jvm-opts are required.\nThe arity error is occurring because the first argument to functions defined in a protocol is the proverbial this which, in the case of the IElement protocol I call element for the sake of context. You can't call a protocol on multiple elements like you have there. Instead, you'd need to do something like (intersect? [element & elements] ...). That, or don't include it in the protocol at all, and just have a standalone function with [& elements] arity. Either way seems fine to me, though it's nice that the API is tucked nicely into protocols (for the most part).\n. Just so you know - per my announcement on the Google Group, with the release of the first 0.5.0 beta, I'm not adding any new features to this release. However, your changes will be merged in as soon as I release 0.5.0, at which point they'll be available in SNAPSHOT or early alpha releases of 0.6.x.\n. Protocols don't accept variable arity function definitions, so I've defined two things:\n- A intersect*? function in the IElement protocol that leverages the two other functions you defined (rectangle and size) to determine if 2 elements intersect\n- A standalone intersect? function that takes one element that is compared against a variable number of other elements, returning true if the first element intersects with any of the subsequent ones.\nAs Stu explains in this post, protocols are designed to be a low-level tool upon which higher-level API's are built. I went backwards with clj-webdriver, first having a bunch of disorganized functions, then moving everything into protocols, to be followed eventually by creating a new mess of higher-level functions on top of those protocols.\nTests soon forthcoming.\n. Thanks for the commit. I bet it was frustrating to copy, paste and have it fail...\n. Yet again nabbed by the corners of my API that don't have test coverage. Thank you!\n. Not sure what :webframe is referring to there. Could you explain what you're trying to accomplish in more detail?\n. Sorry I've taken so long to get into this, I don't often touch the frame-handling code.\nI've fixed frame handling in the master branch for both the Core and Taxi API's, I suggest you look there for conformant code until I cut the next release (should be very soon).\nI'm closing this out, but am still confused by your usage of :webframe, as that doesn't exist anywhere in the clj-webdriver API.\n. @smidas Thank you for making this a pull request. Since it can't be automatically merged, I'm going to pull it down from your repo, merge, and evaluate it right now.\nAnd a double thank you for including tests :)\n. Only further change I had to make when merging with the latest master was that you were using RemoteWebDriver instead of the RemoteWebDriverExt that I created earlier this week.\nThanks again. This will obviously be included in the next release.\n. References Issue #48.\n. @smidas Thank you for your continued contributions. I'll take a look at this and merge.\nAs for running the tests, I'm not sure which way I'm going to go either :)\n. I've tried writing a response to this pull request a couple of times now, because it raises a lot of larger questions about window handling throughout the API (there's already some there). But since my response was turning into paragraph upon paragraph, I'll just ask you to make a couple of small edits and then I'll merge and make changes afterward:\n- Please make the reposition!, resize!, and maximize! functions return the driver being acted on, instead of nil. This doesn't mirror the Java API, but I like to replace it's copious void returns with something useful, and in this case returning the driver opens the door to better composability.\n- Please rename the functions in the IWindow protocol that have ! at the end not to include the !. I like to limit that to functions that have mutable-state semantics like swap! or reset!, that act on \"legitimate\" data structures (e.g., clj-webdriver.taxi/set-driver!). Since there's so much mutability throughout the API related to working with good ol' Java objects, I keep !'s to a minimum.\n- The test suite passes for Firefox, but fails for Chrome in the maximize test. I think maximizing is going to be a troublesome thing to test in a cross-browser, cross-platform fashion. I'd be satisfied if you just tested that maximizing made either the width or height greater, and leave it at that.\n- In the test suite, please rename the firefox-driver var to just driver.\nThanks again for contributing. After these edits, I'll accept your pull request. Afterward, I'll be merging your code with the clj-webdriver.window-handle namespace and making windows more of a first-class citizen in the API, like driver and element instances are, so a second thanks for making me realize window handling needed more attention. The functions in your IWindow protocol only work on the currently-active window, which is the expected behavior, but there needs to be more of a relationship between functions that are already in the API that deal with switching/choosing windows and manipulating them directly as you do here.\n. Happy to share both ways, it's definitely a community effort. I'm accepting this, and I'll keep you and others posted on the Google Group as to the rest of the window-related changes I'll be making.\n. Absolutely :)\nI'm going to accept this in spirit; I should have put an \"example\" properties file under VCS, and then gitignored the real one so that folks could have their own local setups. But I find it helpful, as a reminder, to have an example of where to find that XPI on a Mac, so I'd like to keep my example path in there for reference.\n. This is quite the pull request. Thank you!!\nI'm going to take a little time to review this. The idea of #85 was not only to fix this for the Taxi API, but more importantly for the Core API on which everything else is based. I'll take a look at how this would integrate with that approach and hopefully merge this in.\n. Sorry, my family and I moved recently and it's just been a stressful time getting settled down again.\nI will try to get the entire null-handling in clj-webdriver fixed before the end of January. As I mentioned, it needs to be solved at the bottom-most level of the API.\n. I've looked at your pull request in more detail. In light of recent conversation over in Issue #85, which has to do with how Clojure core itself will be changing, I don't think this approach will quite fit. I'll keep this issue open until I close #85 in case it is applicable.\n. This and #85 fixed with release 0.6.0-beta3\n. Thank you for the PR, I'm sorry I didn't make time for this. This project is no longer maintained, closing.. Well said. Apologies for this.\n. Thanks!\n. Great addition. I honestly expected to release a stable 0.6.0 release much sooner than I have, due very likely to scope creep. My apologies and thank you for the contribution.\n. Thank you!\n. Thanks for the contribution. I'll pull this down and test locally before merging.\nIn the mean time, go ahead and add equivalent tests to the clj-webdriver.test.common namespace so that it covers the Core API in addition to the Taxi API. Thanks.\n. Requested changes were never implemented and project is no longer maintained, closing.. Will need to look into comment from @weissjeffm . There have been times I've had to wait for subsequent releases of SW to include as the default with clj-webdriver.\n. I've configured clj-webdriver to use Travis CI again and have bumped the Selenium-WebDriver dependencies to their latest (2.39.0 as of this writing).\nLet me know if you're still getting an issue. Tests both locally and on Travis CI pass with these latest dependencies, so going to close for now.\n. BTW, released 0.6.1 as the fix. See https://clojars.org/clj-webdriver\n. Thank you! Every contribution is appreciated, no matter how small.\n. Thanks for catching that and making a PR!\n. This is certainly the most substantial external contribution to clj-webdriver yet, thank you! I'll review the additions and changes you've made and will try to merge this as soon as possible, though it will probably be later in the week at the earliest.\n. Thank you for your contribution, I'm sorry it's taken me so long to respond.\nI'll investigate the current state of location support on the Selenium-WebDriver side of things and merge part of your changes accordingly. For a clean PR, you should try to use a feature branch (i.e., a branch other than master), since I don't want to merge all the changes you made to your own project.clj, etc.\n. Clean-up never contributed and project is no longer maintained, closing.. Thanks for the contribution, I'm sorry it's taken so long for me to respond.\nThe story around wrapping Java objects and remote server handling is changing radically in the next release. In general, the end-user of clj-webdriver will be responsible for constructing browser and capabilities objects and passing them into clj-webdriver, so this should not be an issue going forward.\nI'll merge or close this PR based on what shakes out in the next release.\n. I apologize for not following up on this PR. This project is no longer maintained, closing.. I'm sorry it's taken so long to get back to you on this PR. Thank you for the contribution.\nThere's a bit going on in here that doesn't appear to relate to browserstack, but more importantly, in the coming release the story about remote servers is changing rather radically, so these changes are not likely to be merged. I'll merge or close this out as part of the next release based on what shakes out.\n. I apologize for not following up on this. The project is longer maintained, closing.. @FlorianO Thank you for the contribution and confirming that the tests pass.\n. This is an excellent contribution, thank you for submitting it.\nI've changed a couple of things that would require this to be refactored a bit. The biggest thing is that your enable-extension should now just look like:\nclj\n(defn enable-extension [options extension]\n  (.addExtensions options (io/as-file extension)))\nAlso, if you pull down master, you'll see a new new-webdriver multimethod that dispatches based on the :browser specified, so that's how you'd setup custom initialization behavior for :chrome.\nIf you care to make those changes based on current master and update this PR with code changes that also pass the build, I'll be happy to merge this in. I'm sorry for the delay in responding.\nIf you don't care to do that work, I'll add your changes myself and add you to the contributors list on the README just the same.\n. @john2x I'm actually going to be removing these constructor \"helpers\" from the next release, as they are really redundant wrappers and make using the full power of the Java API harder. Thanks for the contribution, but I'm going to close this out.\n. Thank you for this contribution, I apologize it's taken so long to respond. I'm taking the library in a different direction, removing the Taxi API in the next release, so I'm going to close this out.\n. Thank you!\n. These look good to me. Thanks for taking the time to run it through the linters and make this PR.\n. It looks as though there's a PhantomJS-related issue with the new JAR versions in your PR, see the failed build.\nCan you confirm whether or not these errors occurred for you when you tested the JAR upgrades?\n. Selenium-WebDriver dependencies have now been removed from clj-webdriver. Please try out the latest clj-webdriver version and report back here or on the mailing list if you have any issues. Thanks.\n. Thank you for this. I've been drastically behind on my personal email.\n. Excellent contribution. Thank you.\n. PR's are best done from feature branches to limit the proposed changes; this PR includes changes to the project's groupId and README that aren't directly related. As an aside, replacing the lead developer's name with your own instead of simply adding a :developer to the :pom-addition :developers section is poor form.\nAs clj-webdriver no longer ships with Selenium-WebDriver dependencies, I'm going to go ahead and close this. I apologize for how long it's taken me to resolve this issue.\n. Thank you for the contribution. These functions that call browser constructors are likely to be removed in the coming release, so I'm going to hold on merging this for now.\n. I apologize for not following up on this PR. This project is no longer maintained, closing.. Thank you for the contribution!\n. Awesome, thank you.\n. ",
    "locopati": "Great - I'll fix those problems, get it working and resubmit - won't be until next week unless I can get to it today.\n. ",
    "zmaril": "Mom always said \"Leave things better than you find them\".\nOn Thu, Apr 26, 2012 at 5:49 PM, Daniel Gregoire <\nreply@reply.github.com\n\nwrote:\nThanks for the commit. I bet it was frustrating to copy, paste and have it\nfail...\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/semperos/clj-webdriver/pull/53#issuecomment-5366127\n. \n",
    "SergeyDidenko": "I use switch-to-frame in my code and it does not work without this patch.\nThe reason is that RemoteWebDriver.RemoteTargetLocator expects WebElement (see http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.TargetLocator.html)\nThe frame parameter passed into switch-to-frame is a clojure map that has WebElement in the :webframe key.\n. I use it in the following way: \"(switch-to-frame {:tag :frame :name \"main\"})\". Is it wrong? \nThe documentation gives the following example of usage: \"(switch-to-frame \"#target-frame\")\"\n. May be the better way would be to implement it like switch-to-window. By changing clj-webdriver.taxi/switch-to-frame to not wrap the frame-q into Element and clj-webdriver.core to contain cond.\n. ",
    "smidas": "Changed the way the capabilities are being managed. Will finalize new approach and create another pull request.\n. Not a problem man. Glad to contribute to such a great project.\nOh, I added a new namespace because I was not sure if you wanted direct contributions into the clj-webdriver.core* namespaces or not.\n. The requested changes have been made and pushed to the window-protocol branch.\nI want to extend my gratitude for your willingness to take the time to critique my pull request and explain your reasoning. This only stands to make me more conscious of the thought process that goes into a well planned API.\n. @FlorianO @semperos there seems to be an incompatibility with selenium 2.44.0 and phantomjsdriver, expressed in the Travis CI failure. I have created a pull request #133 with selenium 2.43.0 and the latest version of the phantomjsdriver 1.2.0.\nThis at the least moves the selenium version up enough to be compatible with the more recent builds of Firefox and also moves the project forward with phantomjsdriver.\n. ",
    "bonega": "I don't really like a test to be failing per default, when the extension isn't a dependency.\n. Are there anything I can do to help?\n. ",
    "keeth": "at the minimum some better docs would be nice.. spent an hour scratching my head on this, wondering why my forms were not being filled.\n. ",
    "marshallbrekka": "Matched :+1: \n. ",
    "greywolve": "Pleasure, thanks for the awesome library ;)\n. ",
    "firesofmay": "This is important, Firefox 24 is not working on 2.31.0 but works on 2.35.0\n. ",
    "weissjeffm": "FWIW, I get this with selenium 2.35.0, and clj-webdriver 0.6.0\nException in thread \"thread0\" java.lang.NoClassDefFoundError: org/openqa/selenium/Keyboard\n    at java.lang.Class.getDeclaredMethods0(Native Method)\n    at java.lang.Class.privateGetDeclaredMethods(Class.java:2521)\n    at java.lang.Class.privateGetPublicMethods(Class.java:2641)\n    at java.lang.Class.getMethods(Class.java:1457)\n    at clojure.lang.Reflector.getMethods(Reflector.java:357)\n    at clojure.lang.Reflector.invokeNoArgInstanceMember(Reflector.java:296)\n    at clj_webdriver.remote.server.RemoteServer.new_remote_driver(server.clj:85)\n...\nWorks fine with selenium 2.34.0\n. Here's what I know, the release notes for 2.35 specifically says they are removing this class.  I just am not sure what is referring to it.  It doesn't look like clj-webdriver refers to it explicitly.  So I'm wondering if there's some kind of jar file mismatch or what.\nThis only happens when running against remote selenium servers, local webdriver works fine.\n. ",
    "kapilreddy": "@weissjeffm Did you try out selenium server 2.35.0 using exclusions? I suspect :gen-class used in clj-webdriver.ext.remote.RemoteWebDriverExt is causing the problems in that case. \nInstalling clj-webdriver with 2.35.0 with 'lein install' did not cause any problems.\n@semperos This change should go into both 0.6.x and 0.7.x release. Also I tried out selenium server 2.37.0 and it works fine.\n. ",
    "cmiles74": "Let me know if there's anything in there that you'd like me to improve, needs work, etc. :-)\n. ",
    "MarcoPolo": "+1 I'd love to see this merged in! Lmk if there is anything you need help with\n. ",
    "john2x": "Thanks. I'll update the PR over the weekend. :)\n. ",
    "loganlinn": "This would have saved me some time too.\n. ",
    "apiology": "Hitting this problem with Firefox as well--worked around temporarily by adding this to my project's project.clj above the clj-webdriver dependency, but this shouldn't be necessary:\n;; older versions don't support Firefox 38.0.1\n             [org.seleniumhq.selenium/selenium-server \"2.45.0\"]\n             [org.seleniumhq.selenium/selenium-java \"2.45.0\"]\n             [org.seleniumhq.selenium/selenium-remote-driver \"2.45.0\"]\n. ",
    "tmarble": "@apiology I actually made a bunch of additional dependency updates here:\nhttps://clojars.org/net.info9/clj-webdriver\nYou can see this in action in https://github.com/tmarble/marron\n. "
}