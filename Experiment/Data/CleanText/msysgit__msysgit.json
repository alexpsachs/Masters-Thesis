{
    "dscho": "If you want to make it harder for me to guess what exactly you did, there is little chance. If you mean addshortcut.tcl, it is long fixed. Otherwise, you did a very good job at confusing me (but a very bad one at explaining yourself).\n. Sorry for taking so long to come back to you. Here are my comments:\n- we try to make it easy to build things from scratch in msysGit. For example, curl can be built from scratch, helping debugging tremendously -- you can simply insert debug statements or proposed fixes, launch a single script to rebuild and test again\n- I am wary of taking binary changes as are, not because I want to distrust you, but it is a fact that I do not know you nor the exact process how you got those files. Further, I have the impression that users of Git for Windows gained some trust in me in the meantime, which I would risk if I did not verify at least rudimentarily that the changes are legimitate\n- our Perl is not just any random Perl, but built with the specific goal to support git-svn. As such, we cannot simply plug a random compiled Perl into Git for Windows; it would be highly unlikely that git-svn still works\nSo please understand that I will not merge this.\nHaving said that, I see two ways to move forward:\n- either we do it the old way, adding compilation recipes a la /src/vim/release.sh as patches to the 'msys' branch, or\n- we go the way sschuberth suggested and push forward to make https://github.com/sschuberth/mingwGitDevEnv the primary way to build Git for Windows (because that would allow us to re-use upstream MSys' way to build binaries)\nIn the long run, the mingwGitDevEnv way is probably adding less technical debt.\n. Thanks, and sorry for taking so long!\n. Okay, so there are a few problems with this (which is the reason why I will not merge right away):\n- the commit message is a bit, uhm, terse :-) (IOW just put all the stuff you put in the pull request into the commit message, preferably with salient quotes from the discussion on our mailing list), and\n- mklink is not available everywhere, right? We need to make an effort to stay compatible with XP (if you ask me, that was the best Windows version anyway), and\n- as far as I remember, NTFS junctions are not quite the same as symlinks. So probably we want to test for the corner cases (IIRC there were issues with linking directories?) and print helpful messages, and\n- (minor nit) I do not have anything against including those links even if I think they will become stale faster than butter in the sun, but I'd like to have full URLs, i.e. with http:// prefixes.\nThanks!\nJohannes\n. Has the fallback been implemented yet?\n. Oh, okay. So this pull request can be closed?\n. Thanks for the link! But if you have no interest in working on this, what interest should I then have? ;-)\n. The latest experiences regarding symbolic links are not happy ones. It seems they fail to accomplish the job at least in conjunction with CopSSH. (I'd have appreciated more in-depth research regarding the issue from the OP.)\n. @svnpenn please note that it is perfectly fine to add valuable information even to unmaintained repositories' bug trackers. As long as you know that no help can be expected.\nBTW your StackOverflow link currently just leads me to this page:\n\nTo avoid such inconveniences (and the same applies for reading GitHub notifications as mail, during a lengthy trip without internet access), I always recommend to accompany hyperlinks with an appropriate summary (which your two-liner solution probably is). Such summaries are simple, easy and a possible life saver.\n. No need to repost. And your post was not useless, as it was answering (and Google will find it), not asking.\n. BTW I could imagine that https://github.com/git-for-windows/git/wiki would be an excellent place to post this information.\n. We never put symlinks, but instead hardlinks into libexec/git-core/.\nBesides, your solution works only for administrators by default. See https://github.com/git-for-windows/git/wiki/Symbolic-links for details.\n. Applied and pushed.\n. I say: thank you!\n. Good catch, thanks! Will clear up the commit message locally (this time).\n. @orefalo maybe you can paste the complete output using \"sh -x /share/WinGit/release.sh dummy\"?\nOh, and please don't make anybod guess what exactly that page from SF.net said.\n. @dreamkxd if you want to give fixing your problem a try, I suggest looking for 'authors_absolute' in git-svn.perl.\n. @lygstate could you please at least give an update whether other people's work referenced above fixed the issue for you?\n. Looking good, I'd like someone to verify that it still works with 32-bit Windows, though. Unfortunately, I am really bogged down with work in preparation for a well-needed vacation next week... Pending confirmation that 32-bit is not broken, I am all for merging this!\n. @orefalo that is a different issue, though. Let's not confound two issues into the same pull request.\n@hvoigt no objections from my side! Thanks all who contributed to the resolution!\n. @kusma I guess ease of install.\n@hvoigt AFAIK there is no way in Windows to make a universal binary a la MacOSX. But @sschuberth might weigh in whether it is possible to have conditional sets of files to be installed in InnoSetup. OTOH I do not find it too bad to have two sets of installers. We'll just automate the scripts to build and upload stuff, is all.\nAs to the 64-bit binaries: all you need is there already. You just need to run /src/mingw-w64/release-.sh and then \"cd /git && make W64=YesPlease\" (it might be necessary to merge a branch I made long ago, don't remember, I wanted to leave *some work for those whose itch it actually is). The bigger problem is the test suite, which does not pass with the 64-bit binaries, IIRC.\n@pleriche working on this would be a perfect demonstration that you're serious that this is an issue.\n. @pleriche did you see that BuildHive complained (see http://groups.google.com/group/msysgit/browse_thread/thread/f73d278fbffa7eab)? The reason is -- as somebody pointed out (I think it was @hvoigt) that we really want things to build also on other platforms that Windows. Really ;-)\n. It is great to come back from vacation and see a lot things happened!\nBTW the Sign-off is not just intended to be tacked onto the final patch version. It simply means that you assure everybody that you are entitled to distribute the patch under the license we require (GPLv2). Which is obviously desirable already for early patch revisions...\nWhen I compare 'git diff ciaranj/issue_11:lib/perl5/site_perl/CGI.pm origin/msys:lib/perl5/5.8.8/CGI.pm' I get substantial differences... Is that intended?\nAnother thing I noticed; in our msys branch, we have a lot of files in CGI's eg/ subdirectory (if you run 'git ls-tree -r origin/msys | grep CGI' -- substitute 'origin' as appropriate -- you will see what I mean).\nMaybe a better way would be to simply 'git checkout origin/msys -- lib/perl5/5.8.8/CGI*' and commit that with the appropriate commit message (why? how?)?\n. Thanks for the clarification on the eg/ folder (the name was suggestive but I still was not sure).\nI'd prefer the version from the msys branch just because it was from the build of our current Perl, so it is literally guaranteed to match.\nAs to the Sign-off: yes, just tack them on (there is the convenient -s option of git-commit, so you can easily fix things by doing \"git commit -s --amend\").\n. Yep!\nOne little question before I merge: do you want to be ciaranj in the Signed-off line or Ciaran Jessup? (We usually use the full name there...)\n. I merged this (with minor formatting adjustments in the commit message).\nThanks!\n. I'd like to understand this issue a bit better first. My hunch is that git.c's main() function does not get a correct argv when it is called via CopSSH as a symbolic link. If that is the case, I do not think it is CopSSH's fault and I think that in that case symbolic links must be removed in order to ensure a working setup.\n. Great analysis!\nThat also proves that we must revert the symbolic links in the installer. Apparently the person who came up with the idea of using symbolic links did not really test things...\n. FWIW I tried a simple \"git revert 7fdd58ffe2bc08a956ea791461fe421f3acc440a\" but it conflicts rather heavily...\n. I guess that we should hard-link git-receive-pack and git-upload-pack in the least, to avoid surprises with CopSSH and similar programs.\n. Okay, in case we want to shed all the symbolic link stuff: https://github.com/msysgit/msysgit/commits/dont-symlink (I personally do not think it is worth the hassles, and I have to admit that I am disappointed by the quality of the research by the person who suggested using symbolic links in the first place.)\n. @kusma I just realized why I did not like CopSSH in the first place: it is obviously based on Open Source software but is itself so closed you cannot even diagnose what it really does with symbolic links.\n. @pleriche IIRC the instructions how to use CopSSH are somewhere on the Wiki, right? If so, the resolution should be a matter of telling people to\ncd /bin/\nrm git-receive-pack.exe\nln git.exe git-receive-pack.exe\nrm git-upload-pack.exe\nln git.exe git-upload-pack.exe\nand enjoy, no? Can you please\n1) verify that that works, and\n2) change the instructions?\nThanks!\n. @pleriche that's great!\nCould you also have a look at /share/WinGit/install.iss whether you can come up with a patch to always hard-link upload-pack and receive-pack? As you provided the Wiki page, it is not overly pressing, but as you said, it would be nice to have that change in the installer.\n. IIRC the original reasoning for using symlinks was that most backup software is stupid and does not realize when files are hardlinked...\nSo I'd like to submit\n4) hard-link receive-pack and upload-pack as required for the remote side of pushing/fetching, but remove all other hard-linked .exe files, keeping only git.exe.\n. @pleriche usually I would agree with doing away the libexec/git-core/ directory. But that is a decision we would have to get accepted upstream, chances for which I estimate to be very close to 0. So while I agree with you, pragmatically we'll probably have to keep it.\n. @sschuberth I agree, it is not my itch at this time and I have bigger fish to fry. And that would be a new issue.\n. FWIW I would agree that if somebody is as hostile to contributing (\"I dont want to hack anything.\") then we should stop wasting time on this issue. Leave it closed and forgotten.\n. @sschuberth I leave this in your capable hands :-) Thanks!\n. Most likely it is related to Windows' filesystem functions being slow with large amounts of files. See e.g. http://csurs.csr.uky.edu/cgi-bin/man/man2html?1+git-config and search for 'core.ignoreStat'. If that solves your problem, it would be nice if you could add an entry here: https://github.com/msysgit/msysgit/wiki/Frequently-Asked-Questions\n. @antis81 then the only advice I can give you is to install and run Process Explorer and try to find out what is happening during that bash completion hang.\n. @antis81 Just a guess: your home directory is a network directory? In that case, every Git completion trying to access $HOME/.gitconfig probably multiple times could explain the flakiness.\n. I'd rather not have that much of special treatment for an obscure functionality... After all, if things are in the PATH, you can easily tab-complete them with the dashed form. And it strikes me as not quite good practice to call a personal script git- to begin with.\nIMHO it would be preferable to add a config variable, say, help.scanpath and replace the line\nconst char *env_path = getenv(\"PATH\");\nin help.c with\nconst char *env_path = skip_scan_path_complete ? NULL : getenv(\"PATH\");\nWe should default to \"false\" in Git for Windows since it is highly doubtful that Windows users need that functionality anyway, and it slows down command-line completion even without network paths.\n. @hvoigt I hope you do not mind that I pushed two commits on top of 'hv/timer'; I think that this functionality will possibly help us in the future so I am inclined to include the measure_time() function in 'devel'. Do you agree? I'd munch your commits and mine to have a single one that adds measure_time() but does not use it.\n. @hvoigt obviously fine! (Read: I looked over the commits and thank you for fixing my bugs...)\n. @haf first of all, thank you for your offer. Second, you might get more positive responses if the question was posed slightly more polite. Third, there is a mailing list thread about using Jenkins, and I actually set up a Jenkins job already which does indeed test msysGit. This job would need to be enhanced such that it performs a rebasing merge when things change with upstream git.git and reports any problems. And then we would need somebody who would take care of things when they are broken.\nIf you would sponsor such a person, that would be great, and certainly appreciated by many.\n. @MattTW Sure! Please fork http://github.com/msysgit/msysgit, modify /src/curl/release.sh accordingly, test, test, test, commit, push and send a pull request. Thanks!\n. @patthoyts there you go... NGDGU ;-)\nBTW I pushed an update to 7.26.0 to the 'curl-7.26' branch.\n. @patthoyts thanks. As you might have guessed, I did not have time to test ;-) ... so grateful for all your help!\n. @aroben I am actually waiting for @MattTW  to come back to us with test results. After all, it was his itch.\n. ''git show Git-1.7.9-preview20120201:src/curl/release.sh'' shows that we used 7.21.1, but that is the same ''git show Git-1.7.10-preview20120409:src/curl/release.sh'' shows.\nSo it must be something different. Maybe a config option? Maybe a change in the Git source code you could bisect?\nNote: the bisection would be a bit involved, since you would need to bisect between the rebasing merges manually at first. (Just call \"git log --grep Rebasing v1.7.9.msysgit.0..v1.7.10.msysgit.1\" -- 5 commits in my test here -- and use \"git checkout \" on them).\nOnce you found out which two consecutive rebasing merges broke things, you 'd start the bisect with the corresponding upstream (junio/next) commits and apply the Windows-specific patches in each bisection step. For convenience, I would export them into an mbox file from the older of the two rebasing merges via \"git format-patch --stdout\" and apply them with \"git am -3 \". That could even be automated in a script iff you have an easy way to test whether the NTLM support is broken or not.\nI hope you can take matters from here... good luck!\n. Thank you so much!\n. Okay, so the resolution seems to be (from what little information is provided) solved by using rebase.exe as described here.\n. > dscho wrote:\n\n\nOkay, so the resolution seems to be (from what little information is provided) solved by using rebase.exe as described here.\n\nThe link is broken, though, so this isn't a very helpful solution.\n\nThere is also a Dr Dobb's article about rebase.exe that you might find helpful. The idea being to call cmd.exe (i.e. not any MSys program such as bash.exe), switch working directory to the top-level directory of Git for Windows (which is not quite the same as Git_Hub_ for Windows, BTW :grinning:) and then execute something like\ncmd\nmingw\\bin\\rebase.exe -b 0x60000000 bin\\*.dll\nYou might also find that using the upcoming Git for WIndows 2.x may address your woes.\n. Git for Windows 1.x was retired, in favor of Git for Windows 2.x. Therefore I close this ticket, asking you to open another one if the bug persists. Thank you.\n. @sschuberth nice idea... ;-)\n. Run it with GIT_TRACE set. If that does not reveal what is misbehaving, install msysGit and patch /git/builtin/clone.c to find out what is going wrong. Most likely you will find it is an easy bug to fix, contribute back your changes and be a co-author of Git!\n. I like the idea of the patch, but I'd like to see the splitting up and the fixing to be two commits. I'd like that because I'd actually like to get rid of the \\007 rather than enclosing it into brackets.\nAlso, could you split the PS1 assignment into even finer-grained parts? I like that you write in the first like \"reset color\" but I miss the corresponding lines where the color is changed, changed again and finally reset again.\nPlease note that there is no need to make a new pull request, whenever you force-push to the same branch, this pull request will be updated.\nThanks!\n. @salsifis just in case you doubted it: the fact that already 2 people commented tells you that we're interested ;-)\n. @hvoigt I concur!\n. @sschuberth pointed out to me that I closed this request. However, I did not do that explicitly! Probably GitHub thought that deleting some merged branch (or some obsolete one) meant to close this pull request, but I tried to be very careful to delete only branches with my commits, or branches that were fully merged.\nEven more unfortunately, I cannot see any button to re-open the pull request! So @kblees could you please undo my mistake by opening another pull request?\n. Sorry, I just realized what the reason is, and why I cannot re-open the pull request: we did away with 'devel' in favor of 'master' ;-) (see https://github.com/msysgit/msysgit/commit/6bf64a). Could you please open the pull request again, this time against master? Sorry for the trouble!\n. @ciaranj that link is a good one! I think that it should be possible to make a /src/openssh/release.sh on the 'msys' branch with that information. However, given the fact that a new OpenSSH is not my itch and given the fact that I have many more itches I need and want to take care of these days, it will not be me who makes that script ;-)\n. @wernight I'd be very interested in having rsync. Did you have a look at the /src/*/release.sh scripts? They're not at all difficult to understand and copy-edit. However, if at all possible, I would prefer rsync.exe to be a MinGW program instead of an MSys program (i.e. not linked to msys-1.0.dll). As rsync uses fork() on Linux, that might not be possible, though, since MSys provides a fork() emulation while MinGW does not.\n. @wernight sorry, we do not just take binaries as-are as a rule. But did you actually look at any of these release.sh files? They are not at all hard to understand and copy-edit.\n. @ciaranj since you probably already have a clone of msysgit in which you tested this, why not make a branch and push it so it is much easier for me to test it and see what goes wrong? (I do not yet get what you mean by OpenSSH not realizing that it is part of a Git repository...)\n. Yeah, numeric IPs in download links do not make me very confident ;-)\nHave you compared the patched vs the original OpenSSH? Maybe we can extract patches like we did e.g. with curl and have a setup that will make future updates a breeze?\n. @ciaranj any chance to have a branch where I can look at the single patch?\n. @KindDragon any help is greatly appreciated. If you cannot contribute help to upgrade OpenSSH, I'll have to ask you to be patient until anybody who can help with the upgrade has time and motivation enough to do it.\n. @wernight @Speedy37 I understand your points of view. And I disagree.\nUnfortunately it looks like all the people who would actually be capable of doing anything about this issue disagree, too, so realistically, I will have to close this issue.\n. mingwGitDevEnv in Ubuntu? LOL... ;-)\n. @kohsuke wow. You are not only \"a developer\" of Jenkins. You are the inventor. I use Jenkins every single day and love it. Thanks!\nI'll see tomorrow what I can do for you!\n. @patthoyts @sschuberth how about working the other angle? I.e. getting rid of git.cmd altogether? All it does is to set a couple of environment variables and make sure that the codepage is set, and that git gui is started with wish.exe. We should be able to do all that in Windows-specific startup code.\nThe bigger problem would be to get this to users in a backwards-compatible manner, as nobody except @sschuberth reads release notes ;-)\n. @patthoyts well done! Let's use your wrapper for now, how about putting it into /src/wrapper/? In the long run, we might want to think of merging this into compat/mingw.c's mingw_startup() function, no?\n@kblees I'd like to avoid conflating the move to a C-based wrapper with the removal of the code page setting. We could do that as a follow-up patch, but I am not sure whether our test suite would have any chance to catch any breakages that might be incurred by not setting the code page. So it'd need extensive manual testing.\n. @patthoyts I merged your work into a topic branch, please see https://github.com/msysgit/msysgit/commits/git-wrapper; If you're okay with it, please merge into devel!\n. @patthoyts no sweat, it did not take me long (and your Makefile is much neater, anyway). I deleted my branch.\n. @patthoyts do you want to leave this issue open until a new installer is released?\n. @IAAS good suggestions, can you prepare a branch with the corresponding changes and issue a Pull Request, please?\n. I think at this point it is safe to close this issue. We decided in a pretty unanimous vote that Windows users want to see the help pages in a browser instead of man.\n@SrujBarai if you insist on having support for man pages, you will have to invest time in making it happen. In that case, I suggest you give a pull request a try, possibly after asking for advice on the mailing list. But since it is your wish, you will have to do the hard part yourself.\n. Oh nice! Hopefully somebody with less serious time constraints can give it a look-over.\n. @sschuberth pointed out to me that I closed this request. However, I did not do that explicitly! Probably GitHub thought that deleting some merged branch (or some obsolete one) meant to close this pull request, but I tried to be very careful to delete only branches with my commits, or branches that were fully merged.\nEven more unfortunately, I cannot see any button to re-open the pull request! So @kblees could you please undo my mistake by opening another pull request?\n. Sorry, I just realized what the reason is, and why I cannot re-open the pull request: we did away with 'devel' in favor of 'master' ;-) (see https://github.com/msysgit/msysgit/commit/6bf64a). Could you please open the pull request again, this time against master? Sorry for the trouble!\n. @mikofski also note that nobody forces you to wait for @sschuberth to scratch your itch. It is not magic to work with icons, and you can do it just like the next person...\n. Speaking of which... do you want to forward notification mails for the mingwGitDevEnv project to msysgit@googlegroups.com, too?\n. Closing this issue as being superseded by https://github.com/msysgit/git/pull/85.\n. @FGranados please do not post off-topic comments. I deleted it again.\n. @nitram509 your job is not quite done yet. The best place we could come up to tell users about the longpaths feature was the release notes, but obviously that message did not reach you. Therefore, you should figure out where the information about longpaths would have reached you and open a PR to make it so.\n. @Tibor17 no, this is not what I am talking about.\nLook, users will not find this bug report, let alone your comment, and even then they will most likely be puzzled, I am sure you agree after re-reading the comment. We need to do a substantially better job than throwing out two short lines that are unclear.\nWe need documentation where users see it, and we need documentation that is easy to understand and enjoyable to read.\nI believe that you tried to help, but I am convinced that we need somebody to contribute something well-crafted, and thought through, to achieve our common goal to make Git for Windows easier to use. At least that goal is what I think you and I have in common, yes?\n. @Tibor17 and now let's spend all that energy on contributing top quality patches.\n. > This said, why just not default it on and make the alerting of users unnecessary ?\nI wanted to be very careful to avoid problems. Please keep in mind that even the Explorer cannot handle files with too-long filenames \u2013 not even delete them.\n. > And this belong to the very error messages GIT shows when meeting long paths - it has to suggest user to read about the aforementioned config option,\n@the-Arioch you could always give it a shot and implement it. Historically, well-designed Pull Requests were handled quickly and command the respect of the maintainers. It was not unheard of features being included that the maintainers were unsure about at first, but their minds had been changed by excellent code contributions (which, to be honest, is much harder than simply commenting: talk is cheap :grinning:).\n. @kblees thank you for your continued top quality contributions! Believe me, I appreciate that very, very much.\n. Sorry for being really unavailable these days... I do not get to go online between office hours.\n@sschuberth as to the version I committed: I do not recall making any modifications to it... ;-) Thanks for resolving this issue by doing all the work yourself!\n. @sschuberth oh, now I remember! I used some things in the configuration of the portable app that required a modified version... Let me see... Yep, it was the GUIMode and GUIFlags: https://github.com/msysgit/msysgit/blob/devel/share/WinGit/portable-release.sh#L40 (sorry I did not remember earlier...)\n. Actually, there is a problem here: Shell scripts. After . git-sh-setup, the libexec directory is guaranteed to be in the PATH, and for shell scripts, calling the dashed form is faster.\nRunning git grep git- *.sh in /git/ reveals that git-pull.sh calls git-rebase and git-merge, for example. I also see that git-am.sh calls git-merge-recursive, git-rebase--merge.sh calls git-merge-$strategy, git-stash.sh calls git-read-tree and git-submodule.sh calls git-rev-parse.\nThere are probably some places I missed, though :-(\n. @sschuberth correct. But I think that there is value in making them undashed. If @ernes32 is willing to work on this, I will be happy to help.\n. A little research shows that in the default mode, the files are hardlinked. So \"fixing\" this does not save 150MB.\n. @bliker and I thought you were here to help. Apparently you only want to vent, though. I suggest directing that to git@vger.kernel.org instead, they're well equipped to deal with ventings, and besides, they are responsible for what you so nonchalantly referred to.\n. @kusma note that most of the dashed versions refer to hard-linked builtins. For those, it actually makes no sense whatsoever for scripts to call the dashed version, not even from a performance point of view.\nI do think that it would be good to change all the scripts to call non-dashed commands always, even if that does impact performance when calling non-builtins. I do remember, too, that there was at least one problem where it was not that easy to remove that dash (IIRC it had something to do with git-merge-one-file but I am not quite certain).\nHowever, one thing will never fly: make a Ruby script to remove hard-linked, dashed versions of git.exe without even bothering to test.\nIf this issue is to go anywhere, it needs to be done properly: by patching the Makefile, all affected *.sh and *.perl files, introduce tests as necessary, and making sure first and foremost of all that the test suite still passes.\nCertainly introducing the dependency on Ruby -- when we didn't even manage to get Python integrated into msysGit yet! -- is out of the question. I am surprised that somebody even dared to suggest that, without even so much as bother to consider even the first ramifications. Flabbergasted, you could say. Maybe even flabber-ghasted.\n. Okay, so here is the problem with git-merge-one-file: it is used as an argument (via -o) in git-merge-octopush.sh and git-merge-resolve.sh.\nWith this information, I believe, I now spent substantially more effort on resolving this issue (which does not really bother me much) than the people who claim to be interested in resolving it.\nTherefore, I will re-close this issue soon (having that sour feeling that I was right closing it in the first place).\nThe only reason I might not close this issue would be if @bliker and/or @SchizoDuckie (who claimed to want to see this resolved) put in enough effort to actually come up with something tangible. Read: a nicely-crafted pull request that tackles the issue rather than meddle around with hardlinks long after the horse is out of the barn.\nSo there you go. The ball is in @bliker's and @SchizoDuckie's park. I await full of suspense whether my intuition is proven wrong.\n. I thought so.\n. So now we do have a record what not to do if one wants to get rid of the hard-linked builtins.\nBut that conveys only negative information, not positive information. It would be better if there was also the information what to do, in case some moderately talented developers actually want to do something about it.\nHowever, this here issue is the wrong place to do so (for starters, it is attached to the wrong repository, and besides, too much good-will of the people who develop things was used up for good), therefore I listed the relevant information in https://github.com/msysgit/git/issues/50#issuecomment-31581994.\n. > Link is broken.\nIt would have been more helpful to look at the link, notice that it is broken in an obvious way and provide an unbroken link instead: https://stackoverflow.com/questions/9163295/cloning-a-git-repository-over-sftp/\n\nSeems like this is a reasonable request...\n\nI may seem like that, but...\n1. you should research that issue first. Seriously. Once you know just how much work it would be (the SFTP protocol is in no way close to the HTTPS protocol, and that protocol took years to support properly), you cannot agree that it is such a reasonable request anymore. You would basically spend not even ten seconds requesting something that somebody would have to spend at least 3 person-months to implement. That's just not really fair.\n2. the request is not about a Windows-specific feature. But it is reported to the (awfully under-handed, pun not intended) Git for Windows project. If this feature request is serious (as in: the person requesting it is prepared to contribute at least as much time and skill  as they ask others to spend), it should be proposed on the Git mailing list (which is not limited to Windows only).\n. @dolmen I am glad you volunteer! Upgrading Perl has been a notorious issue we had for a long time, so it is good to see that someone cares enough to see to it being done.\nIt involves the following steps:\n- install msysGit (the development environment), preferably via the net installer.\n- make a shortcut as suggested in the message of the command-line window, to be able to start msysGit later without hassles.\n- check out the msys branch, best is to do this from an installed Git for Windows (cd /c/msysgit && git checkout -t origin/msys).\n- start msysGit (now in MSys mode).\n- patch /src/perl/release.sh to download the appropriate source package.\n- start /src/perl/release.sh.\n- patch /src/perl/perl-*/ until it compiles (possibly fixing the application of the patches from /src/perl/patches/ which release.sh tries to apply via git am).\n- export the new patches to /src/perl/patches/.\n- fork msysgit on GitHub.\n- push the changes.\n- make a pull request.\nThank you in advance!\n. You can use Git itself to find the missing files. I just launched \"git ls-tree -r origin/devel | grep libiconv-2\" and found that there are two instances, both in the mingw/ subtree. So I imagine that libiconv-2 is needed for Git itself to work (which is called to make the prompt informative).\nThe easiest way to fix this would probably be to call git checkout origin/devel mingw/bin/libiconv-2.dll and commit that.\n. @kusma yes, that's what I meant by \"an installed Git for Windows\" ;-) Thanks for clarifying!\n. See the What is this \"MSys\" thing in \"MSysGit\"? section in https://github.com/msysgit/msysgit/wiki/Frequently-Asked-Questions: it is a MinGW DLL.\n. Yes, git.exe is in /bin/, because Git hard-codes the path of libexec/ into the binary and in the final product, the installed Git for Windows, git.exe lives in /git/. Yes, we have to strike compromises.\nThe context of the patches has changed, eh? Then it is probably time to try to figure out how to recreate those patches from the commit messages.\nThe Git repository is initialized so that the patches can be applied easier. After all, I do not want to apply them twice, do I?\n. On Wed, 5 Sep 2012, aberumen wrote:\n\nI managed to apply most of the patches onto 5.16.1 with the exception on 1 or 2 and some MacOSX only changes that I choose to omit.\n\nMaybe you could commit the fixed patches to /src/perl/patches/ and publish it as a work-in-progress branch?\n\nTrying to build results in a error :(. Miniperl cannot be found. Make complains about a circular dependency between miniperl and Config_git.pl.\n\nThat is usually due to two Makefile targets differing only in case (such as \"headers\" vs \"HEADERS\").\nCould you paste the exact error message? Maybe there is a hint what might be the culprit?\n. I just added the entry I want to upgrade Perl. How do I do that? to https://github.com/msysgit/msysgit/wiki/Frequently-Asked-Questions. Hopefully this is helpful!\n. There is really more than enough information provided here for people who are really, really interested in a newer Perl, interested enough to actually go and do the work themselves (as opposed to expect others to do it). Looking at this issue as a scientific test, there is now enough evidence that this issue can be closed without resolution (at least until someone comes along who wants to surprise me positively).\n. @csware at this point, I am afraid I have to decline. If you want any patch applied, I have to ask you to do what everybody else (including myself) has to do when they want a patch to be applied: open a nicely crafted pull request.\n. > @dscho: Nice, when I reported it the last time it was said that you do not apply local patches to shipped stuff\nWell, yes, sorry. I tried to be a little more stringent (making maintenance easier) but I see that it would harm usability if we would not have that patch. So while it is technically wrong (our Perl still reports to be 5.8 but is technically 5.8+patch) it is still better than the alternative, right?\nSo: thanks for keeping prodding me and for your patience to see this fix through.\n. Our current version is 1.7.11. It will be a long time before we are at 2.5, let alone 2.5.6.\n. @XhmikosR if that is the case, the report was really misleading. And also, if that is the case, I have to ask: what is wrong with git apply? It is the reference implementation of a program to apply Git binary patches, and we do ship it in a quite current version.\n@sylus I would accept a pull request, though, that adds the appropriate /src/rt/release-patch.sh to the msys branch.\n. Can you please fix the commit message in the following ways?\n- shorten the one-line. The commit message's subject is supposed to say what you want to achieve, not how. So leave the details that you change the git:// protocol to the https:// protocol to the commit message body.\n- The one-line should make it clear that this is about msysGit (i.e. the development environment installed by the net installer, and it also affects people who installed using the full installer and now want to connect their installation to the upstream repositories), not Git for Windows.\n- Explain why you want to use the https:// protocol rather than the http:// protocol and what the downsides are.\n- Mention that the net installer now comes with a smart-HTTP-aware Git, so it will not affect performance too badly. Would be nice to have numbers there, too.\n- Add a Sign-Off.\nThanks!\n. As I pointed out, my suspicion is that the folders existed beforehand, with different cases.\n@t-b FWIW I noticed that you were not part of the GitHub team yet; I corrected that mistake.\n. See https://github.com/msysgit/msysgit/wiki/Subversion-is-too-old\n. @xpaulbettsx I would love to have a pull request with just the parts that clean up msysGit.\nI have to admit that I do not know whether I want to ship git-tfs, mainly because I do not know what TFS is to begin with. :-)\n. The best way to get this applied would be to fork https://github.com/msysgit/git, make the changes, commit, push and make a pull request.\nThanks!\n. Happily, this is Open Source! So you can contribute the changes you seek in the form of pull requests... Open Source FTW!\n. Please correct me if I am wrong about the following concerns:\n1) this upgrade did not use /share/msysGit/install-tar.sh\n2) it might, or might not, be the upstream's released version\n3) it might, or might not, work well with our msys-1.0.dll\n4) you did not manage to build this from scratch\nDo not get me wrong, I would be happy to take this pull request, but I need to be more certain that this does not break things nor introduces a back door. Hint: The commit message might be a good place to convince me ;-)\n. Well, I missed that fact that it stopped being an MSys grep. It should go to /mingw/bin/, then, the copy-files.sh needs to be adjusted.\nAccording the the GNU grep man page I have here on Linux, there are no special files in /etc/ or $HOME/ grep parses for settings (which only MSys grep would know about, but not MinGW grep), but a \"strings grep.exe\" call reveals that GNU grep wants to look at /usr/share/locale/. Now, we do not have any grep-specific files in /usr/share/, and the files /bin/egrep, /bin/fgrep and /mingw/bin/zgrep look as if they would handle a MinGW grep gracefully.\n. The solution is most likely to use forward-slashes as on every other OS :-)\n. I finally looked at it, sorry! It is really much more readable now. Thanks!\n. I fear that the only way this could be resolved is to debug by using the development environment of Git for Windows and litter the code with debug messages to figure out where it gets stuck and why. This is only possible, of course, in a setup that shows that problem (which I do not have).\n. Okay, four months is really long enough a wait for people who were willing to fix other people's problems.\n. > Wait, why is this closed?\nHehe... the answer is in this ticket: https://github.com/msysgit/msysgit/issues/89#issuecomment-31365743\nAre you the person driving the resolution of this issue forward? If so, I will gladly reopen (although I will insist to focus on Git for Windows 2.x, which already saw the 3rd release candidate.\n. > Is this also a problem for GfW?\nI do not know; I never experienced the problem myself, so I cannot test.\n. @agibson-vrnt see here.\n. This is a pilot error. You clone once, then you do not clone anymore, but update. In the case of git svn it is called git svn rebase.\n. \n. See msysgit/Git-Cheetah#6\n. I agree, there is little danger of confusion. And it is a nice combination of the themes ''Git'' and ''Windows''. I like it.\n. @mcandre we have a good tradition in the Git for Windows project: you have to earn bitching rights. @BaconRanch made a suggestion. You are free to make a counter-proposal, and then you can start bitching.\nAlso, your reasoning about cross-platform branding appears to me as less than convincing. There have been two competing Git logos already for a long time. Then GitHub made a third (arguably better one, if you ever studied what makes a logo good). We switched to using that, so basically there are three Git logos now (so much for branding). And then @BaconRanch played on that GitHub theme rather competently.\nSo I challenge you to produce a better logo.\n. Guys, what is the problem? First, bitching rights need to be earned. That has been repeated in this thread for your benefit. Second, what is wrong with saying that this is Git for Windows by combining one of the three Git logos with something people associate with Windows?\nSeriously. Unless there are waaaay better objections, I am strongly in favor of going with @BaconRanch's proposal.\n. @BaconRanch Since I liked your logo, I was a bit sad that the outcome of the discussion was to leave the logo at its original (I can understand the reasoning, though).\nHowever, I think that there is some project that you might want to work on, and I would be incredibly grateful if you did: our home page needs some TLC. (A couple of months ago, @xpaulbettsx offered some help by GitHub for our home page, but at this point I am slightly tired of waiting, but conscious enough of my limitations in graphical design to avoid trying my own hand at it).\nSo: would this be something you'd enjoy, overhaul http://msysgit.github.com/?\n. @BaconRanch great! Since you have experience with web design (and I have experience how to s*ck at web design), I think it would not make much sense for me to tell you what I'd like you to do -- apart from my desire for a sexier home page for the Git for Windows project.\nThe comment \"stay tuned\" dates back from February 2012 when I still was under the impression that a new design (in line with the GitHub CI) was imminent.\nSo: go wild!\n. @BaconRanch that looks very nice! How about forking https://github.com/msysgit/msysgit.github.com and making a pull request there?\n. (Previews would still be easy through this cool site...)\n. How about using the term \"SDK\" instead of \"Develop\" (I think the idea was @hvoigt's, originally)?\n. @BaconRanch great news! Although I'd like to suggest to use Git from the beginning next time, not at the very end (which kinda defeats Git's purpose).\n. @BaconRanch not for you, it isn't a problem. I could not follow the development, could not see what was changing, could not contribute. If that's what you wanted, I guess it's fine.\n. Just a quick comment on that 'develop' branch: Thank God that we do not have a gazillion integration branches as some other projects. It only confuses people and does not help anything except slow the project down. 'master' is a perfectly fine integration branch, thanks.\n. Please note that Git for Windows 1.x (for which msysgit is the development environment) was retired in August 2015. The successor is https://github.com/git-for-windows/.. First thing: make sure you have both Git for Windows and msysGit installed (the latter being the development environment for the former).\nThe reason: you will need to switch msysGit to the '''msys''' branch, and you cannot do that while it is in use. (The issue is explained in a bit of detail in the '''I want to upgrade Perl. How do I do that?''' section of https://github.com/msysgit/msysgit/wiki/Frequently-Asked-Questions -- feel free to enhance it.)\nThe next thing to do after starting msysGit in the '''msys''' branch is to look at /src/rt/release.sh and extend it to support building less.exe in the same way it was extended to build bash.exe in 745aac3f8edf4e78d89be49412bb24fc45193207. Then make sure that it tries to build a new-enough less.exe.\nOnce that is done, send a pull request ;-)\n. @pocesar please, if you want to help, work on providing a recipe how to reproduce the issue. We are eager to help, but playing the blame game does not help our enthusiasm at all.\n. Sorry, this is not the reproduction recipe I wished for. I'd need an easy way to reproduce without installing TortoiseGit and /or phpStorm. You could set the environment variable GIT_TRACE to a file globally to find out what exactly TortoiseGit calls that now fails.\nIt could also be that TortoiseGit expects a git.cmd to be present in Git's cmd/ directory (installing a fake git.cmd that writes to some log file would verify this).\nThe point is that you are asking us to put in quite a bit of work to solve an issue we seem not to have, so you might want to make it slightly easier for us to help you.\n. @zBart so it seems as if the Git wrapper might exit too early maybe? That would explain the symptoms you described.\nAn easy way to test this theory should be to recompile the Git wrapper. This is not complicated at all, but for the time being requires a hefty ~245MB download via the net installer (http://code.google.com/p/msysgit/downloads/list?q=net+installer) unless you have installed the development environment for Git for Windows already.\nOnce you have that, edit the file /src/git-wrapper/git-wrapper.c and add something like Sleep(2000); before the call to ExitProcess(r); and then run /src/git-wrapper/release.sh.\nOnce that is done, there should be a /cmd/git.exe which you can overwrite your existing Git for Windows' /cmd/git.exe with.\nNote: this is not meant as a final solution, but rather to test the hypothesis that the underlying Git process has not enough time to finish transporting the output before being killed.\n. @csware if you start bin/git.exe from there instead of cmd/git.exe, does it work?\n. @csware so... can you use bin/git.exe in TortoiseGit and we can leave this here issue closed? (/cmd/git.exe is really only meant for interactive use from cmd.exe...)\n. @jkodroff even if I do not self-identify as a \"peep\", I think that I can help you.\nThe first thing to try is to set the environment variable \"GIT_TRACE\" to something, e.g. \"1\". If the output of git version does not include anything more informative, you will have to dig deeper.\nDigging deeper means that you will have to install the development environment, let it build Git, then replace the \"-O2\" in CFLAGS with a \"-g\" in /git/Makefile and rebuild and re-install. After that, you will be able to single-step and setting breakpoints using gdb.\nHowever, a little git greping in the source code (which you can do yourself because this is all Open Source with an Open Development Process, i.e. we try to make it as easy as possible to develop the code for people like you), it seems that cmd_version simply outputs git_version_string which is set to GIT_VERSION that is passed to the compiler. So it is really funny what is happening on your side. Please investigate.\n. @xpaulbettsx well, it means that you guys diverged rather well from us by now. Maybe something to fix on your side. Maybe not, you decide. But you might want to take measures to prevent such \"whoops PRs\" (third time, by my count) in the future.\n. @xpaulbettsx you misunderstood. I talked about the situation work flows in only one direction between your fork and the msysGit repository.\nI am sure you guys fixed a couple of things. Would be nice to get those fixes, too (preferably in the form of well-prepared PRs rather than imitating Pai Mei with B.'s rice bowl). Oh, and the long-promised website overhaul would also be nice.\n. @xpaulbettsx it would have made sense to combine efforts then, instead of reinventing the wheel (in an incompatible manner). But of course, your choice of C# also made it more difficult.\nAnyway, I just wanted to say that I would welcome contributions back. If you don't want to give us any of your improvements, that's fine, too.\n. I'll close this for now, welcoming a pull request at https://github.com/msysgit/Git-Cheetah\n. @mcandre you kept us pretty busy lately with all your questions. I still wait on feedback for a couple of responses.\nIn this particular case, you are definitely in the best position to give it a try to fix it yourself. It is even very easy: just insert \"set -x\" into /etc/profile and do a little homework.\nLooking forward to a well-crafted Pull Request.\n. @kismert since you did almost all the work (apart from @patthoyts' patch to include iconv.exe by default), how about opening a pull request?\n. I guess there is nobody interested enough in this issue to try to come up with a fix. If I'm wrong, please feel free to open a pull request.\n. Unfortunately, this information is too incomplete to allow for any informed advice.\nFor one, which web server (BTW this is definitely not a git server; the latter would use port 9418 while the former would use 80 or 443, please be preciser) was used? What configuration? What did the error log of the web server say? Any idea why it uses HTTP/1.0 (AFAICT HTTP/1.1 is required for pushing)? Are you really, really sure that WebDAV is enabled on /test/, and that that repository exists to begin with?\nSorry, these are all shots in the dark and chances are that I just wasted my time trying to come up with suggestions to look for that might not begin to help, but the lack of detailed information in the report does not leave me with any other options.\n. Sorry for not getting back to you earlier. I fear, however, that this issue is not Windows-specific, and as there are preciously few people working on Git for Windows, I'll have to ask you to take this to the Git mailing list at git@vger.kernel.org.\n. @suxpert since Git Bash does not display the problem, I suggest considering to report it with the MSys/MSys2 projects.\nAs for @FelixLv and @imsobear: feedback is long overdue. Surprise me by actually providing it!\n. @suxpert \"msysgit\" does not do anything. \"msysgit\" is an Open Source project...\nWhich means that things happen in msysGit only because volunteers make them happen.\nYou can post again on #vim_dev or here, but I doubt that anything will happen until someone motivated enough to do more about the issue than talk (hint, hint) takes care of making things happen...\nIn other words, if you want to see this issue fixed, I'd like to suggest trying to fix it yourself. That does not mean, BTW, that I am unwilling to provide help in the form of pointers and explanations. It means, however, that I am unwilling to fix the problem (which is not my problem) for you unless I get motivated better.\n. I agree with @sschuberth: this issue is better addressed with the mingwGitDevEnv project.\n. @aurril if it is Symantec: sorry, you're out of luck. Symantec has an impressive track record with me, personally, for making it impossible to fix their misdetection. Basically, you have the choice: use a Symantec anti-virus, or use Open Source software compiled with the GNU C compiler. You cannot have both.\n. @maoueh this comment has the common solution: https://github.com/msysgit/msysgit/issues/123#issuecomment-19856776 (you usually have to try a couple of different addresses before it works).\nI am afraid that I have not found a better solution, even after years. The problem is that msys-1.0.dll cannot be relocated to a different runtime location dynamically due to Windows-specific limitations. And if other loaded DLLs already occupy that location, msys-1.0.dll will not be able to load.\n. @imz MSys needs to be fixed in memory. The problem is that Windows has not the faintest concept of a proper fork() (which starts a new process from the current state, memory, file descriptors, etc). So MSys has to emulate it by creating a completely new process from scratch and try its best to reinstate the memory, file descriptors, and all the rest.\n. @imz interested enough to try your own hand at that final solution you must have? ;-)\n. @imz Windows has definitely no POSIX compatibility layer. To the contrary, hence the existence of Cygwin (and MSys, a minimal offspring of Cygwin).\nAs to the \"I must have a solution\", I misread your comment: it only says: But there must a final solution for this.\nAs to why Git relies on fork(): Git is multi-platform software. In fact, upstream git.git does not care all that much about Windows, and given all the complications we have to address, I sometimes long for that luxury, too.\nTo conclude this issue, I think we pretty much established that the status quo is good enough, so let's close the issue, at least for now.\n. @imz Bah! You're correct, I was referring to another comment than yours! My fault, sorry, and thanks for pointing that out.\nAs to the fork() thing: our work in Git for Windows -- to be precise, it was mostly Johannes Sixt's work who finished the initial MinGW port where I left off -- proves that a complete fork() emulation is not needed. See run-command.c for details.\nAs to the status quo: in contrast to upstream git.git, we are not blessed with an abundance of volunteers here in the Git for Windows project. In fact, we get way too many requests, and most of the actual contributors are just way to say \"no\" all the time.\nFurther, in this particular case, the problem is actually not caused by Git, nor by the libraries used by Git, but rather by the MSys programs we need to use (which do require a proper fork() emulation).\nSo even if you are willing to spend time on solving this issue, you would have to do so in the MSys (or MSys2) context, not in Git for Windows (although, technically, you could try patching the msys-1.0.dll library we patched ourselves a couple of times due to upstream MSys not being able to accommodate our patches fast enough for us to use upstream's vanilla msys-1.0.dll).\n. Just to add some concrete numbers to the fray: I started a fresh net installer yesterday. It cloned ~180MB for msysgit.git and ~65MB for git.git.\nOn my setup, the whole cloning took less than one minute while the full build took about five.\nNow, I do know that some people have slower internet connections (and when I am on my mobile-thethered internet, I am very sympathetic), but let's face the facts: the full installer proves that we cannot hope to get below ~45MB total (which is still a far cry from the 180+65MB). In fact, we cannot even hope to get anywhere close because the net installer uses LZMA (via 7-Zip) while Git repositories pack objects using GZip's LZ77.\nAlso, I have to admit that I feel like I sunk a real lot of time into developing the net installer (in total, it is easily over a hundred hours per year ever since starting msysGit in 2007, except 2014 because that is too young yet).\nTherefore, I'd like you, @Uni-, to address your issue. I am willing to assist you, but I will have to ask you to do the bulk of the work.\nStep number one would be to build the net installer yourself (to see how easy that is -- after refining it for six years). It is as easy as:\n1. downloading the current net installer\n2. run it (yep, sorry, before you solve the problem of the heavy clone, it will have to download ~245MB)\n3. run /share/msysGit/net/release.sh Uni-test in the Git Bash\nThe next steps would be to inspect the shell script at /share/msysGit/net/release.sh and note that it runs 7-Zip to make an archive and then prepends the self-extracting part along with a 7-Zip-specific configuration. This is the reason why we have some 7-Zip extensions installed: to be able to let the user override the destination of the installation. This configuration is embedded in the release.sh script.\nAfter that, you should note that the initial step of the net installer -- cloning msysGit and the Git sources -- are performed in a very, very minimal version of Git for Windows: the Bash (= the shell), along with the bare minimum of Git to perform the clones, is installed into the installer-tmp/ subdirectory of the installation path, and then the shell is called with the setup-msysgit.sh script that is also shipped (and lives side-by-side with release.sh in our repository).\nThis is where you need to make the changes: the 7-Zip installer needs to ask from the user whether a full installation is desired (along with an estimate of the download) or a shallow clone is desired (with the estimate of the download and the note that contributing is made virtually impossible until one \"unshallows\" the clone), defaulting to the former. 7-Zip would now somehow need to put the answer into the file system so that setup-msysgit.sh can pick up the choice and act accordingly.\nGroovy?\n. @niveuseverto if you still need this, please feel free to contribute a pull request.\n. Awesome, thanks!\n. The only question is whether we should introduce the bashism into /etc/profile or whether there might be users of different shells, too. My gut feeling is that the performance should not really play into our considerations because this is the shell prompt, after all, so I'd prefer $(echo $PWD | tr -c ' -\\x7f' ?) or some such.\n. MSysGit is supposed to be the development environment of Git for Windows. As such, you can easily build Cheetah by checking out the respective submodule, /src/git-cheetah/. AFAIR make install-user will install the extension.\n. This issue is apparently not going anywhere.\n. @ecki The sign off means that you are entitled to contribute this patch (e.g. when you did it on company time and they hold the rights to your work).\nAnd why I cannot delete that file myself is pretty clear: I am a maintainer. You can overload a maintainer only so long before she gives.\nThat's why your contribution, even if it was mainly finding out that the file is indeed unneeded now, is appreciated, while your willingness to put more work on my shoulders if I'd let you makes the whole exchange a little less fun for me than it should have been.\nSo: thank you for your effort, and let's hope that we have more fun exchanges in the future.\n. @mattyclarkson could you make that last change, please? Thank you!\n. @mattyclarkson no need for apologies (but I am sorry that you have been ill, and hope you feel better now). Thanks for your contribution!\n. I see not a lot of reason to spend more time on this; it seems that every contributor is content with the status quo...\n. I experience the same as @t-b and have to agree, unfortunately, that bash 4.x is out of reach.\nBesides, the Git Bash is intended for non-pathologic scripts included in Git ;-)\n. @pfmoore unfortunately, the current situation seems to be working for all the people who contribute code. Of course, if you feel strongly about it, feel very free to submit a pull request to scratch your itch. I am afraid, however, that waiting for others to address the issue will only result in frustration on all sides.\n. This might be a problem of Git GUI in general, not only on Windows, correct? If so, please report it to git@vger.kernel.org (or even better, take a crack at fixing it and submit a patch...)\n. @imMute by \"take this upstream\", @kusma referred to sending a mail detailing the problem to git@vger.kernel.org, BTW.\n. @gnalbandian @kusma's advice to report this to upstream Git is still valid, too.. @Olivier07 oh, I fully understand that you don't have the time to... Because me, too, I now don't have the time to... ;-)\nSeriously again, should you ever have the time to tackle this problem, let us know so we can point you to the code locations that are most likely the problem.\n. @Olivier07 as you probably suspect, the incredible value a group of people including myself brought was possible only due to a focus on results. As such, could you please demonstrate that you had a look yourself first?\nI am willing to help you fix your problem, but I have enough to do already so I will not be able to work for you without pay.\n. @dolmen while my command of the French language is enough to understand what you said, please use the English language... ;-)\nFor everybody else: @dolmen basically told @Olivier07 that due to time constraints, everybody who is serious about wanting a problem fixed with Git for Windows needs to demonstrate the willingness to do something about it.\n. Thanks!\n. We do not ship the 64-bit binaries because we do not officially support a 64-bit version of Git for Windows. The patched file is a shell script expected to be run by developers who are interested in building a 64-bit version, after running the other shell script in the same directory that downloads and \"installs\" mingw-w64 into a subdirectory. To use the 64-bit compiler, one still has to adjust the PATH env variable, so it is all quite a bit less automatic than building 32-bit Git for Windows via the net installer.\nEventually, we will want to have an automatic version detection in the \"zlib\" script just like we have it in the \"easy\" script (which I wanted to accompany by a \"build\" script that rebuilds mingw-w64 from scratch, but I'll probably never come around to make that happen).\n. Thanks!\n. Thanks! @csware this was excellent, thank you, you made it easier for me to take the pull request than not to take it ;-)\n. > I think this is a BUG.\nAnd I think that this DESCRIPTION is insufficient to try to debug it. In the least, the output with GIT_TRACE=1 would be required, and then it would still take more effort on the reporters side to start REMOTELY to equal the effort asked from others to help this issue.\nI mean, you got a beautiful software for free -- even if it contains bugs -- and then you throw a one-liner bug report at the good people doing all the work, basically asking them to spend yet more time, much more time on the bug than you did. I guess you can count me out.\n. @fatjyc there is a way to redeem yourself: follow the instructions at the end of https://groups.google.com/d/msg/msysgit/s4dB8Nv9V4c/55-cGPdPYmAJ and report back whether that fixes the issue.\n. @fatjyc have you even bothered to follow the link I pasted? If you actually did, have you followed the instructions? If you did that, too, did it fix the problem you tried to report? If so, was I \"able to know the problem\"?\n. I closed the pull request because somebody else gave me the feedback that my fix works. @fatjyc please take this as an encouragement to do substantially better next time. That someone giving useful feedback could have been you...\n. @birdwing have you actually read this thread? And estimated how much time the respective parties spent? If so, color me speachless as to how you could possibly write what you wrote.\n. @birdwing okay. Now can we please move on?\n. @adamralph have a look at the mailing list.\n. Looks good to me!\nBut it is in the installer-specific part of msysGit... @sschuberth could you have a look over it?\n. @csware I see... (I did not see the earlier version of the pull request because I did not check mails today yet). Still, I'd like to let @sschuberth merge the pull request if you don't mind...\n. We already have what you want, I guess: it is in \\cmd\\ though.\nBesides, there is an option to use Putty (but that comes with its own set of problems, therefore the option is only shown if you already work with Putty).\nDid you use the installer to install Git for Windows? If so, did you see those options (including the option 'Run Git from the Windows Command Prompt')?\n. Yes, this description is unfortunately so incomplete as to render the issue invalid.\nFeel free to reopen with an improved description what the problem is, what you expected to see, what you see instead, how to reproduce, and anything else that you can provide to solve your issue.\n@menggya keep in mind that you are asking volunteers to spend something in the order of hours to resolve your issue (my personal average time to address Git issues is about two hours). If you want this whole business to approach what you could call a fair deal, you should be prepared to spend at least the same amount of time on resolving the problem -- which is your problem, after all. Don't get me wrong, the Git for Windows contributors are a nice bunch. Very nice. You should be nice to them, too.\n. Exactly the same applies here as I explained here: https://github.com/msysgit/msysgit/issues/156#issuecomment-31846636\n. Three comments:\n- You should be able to see the command-line window longer if you add something like read pause at the end, waiting for an (ignored) input.\n- Since Git for Windows does not expose problems when the PATH variable contains spaces, it must be some improper quoting in the script.\n- This is not a Git for Windows issue, correct? It should be raised in a ticket to https://github.com/wking/swc-boot-camps-v2/ instead. Of course, you can still ask for help, but let's do that on the Git for Windows mailing list instead, okay?\n. This replaces the former approach to put the Vagrantfile into the /git/ directory: in this developer's mind it is better to expose the whole of msysGit under /vagrant/ than just the Git sources.\n. Unfortunately, you already deleted your fork, so it is impossible on GitHub to comment on the commit directly (and it is harder for you to fix, because you have to re-fork).\nThere are a couple of issues with this pull request that need to be addressed before it can be merged:\n- The commit message is insufficient.\n  - For one, it is not \"start\" but \"/bin/start\" that is updated.\n  - Then the commit message body is completely empty! However, in particular with this change, there is a lot of explaining to do, such as: why? Sure, you described a little bit here in the pull request. But six months from now, when we encounter a problem with /bin/start and try to figure out whether a certain behavior is a bug or a feature, we will have no fscking clue where to look up the rationale.\n  - In the commit message body, there should also be a description what /bin/start does.\n  - Also, an example how to use it in a way that does not work without the patch, but does with it, is required.\n  - There is no Sign-Off (have you looked at the commit history a little bit? If so, please try to imitate the style)\n- The construct used is a bash construct but the shebang line still says #!/bin/sh. This happens to work right now, by chance rather than by design.\n- What other special characters are problematic?\n- Where is it documented that ^ is an escape character in cmd? Is this true for all cmd versions we need to support?\nIn short, please make it a bit more obvious -- especially in hindsight should somebody encounter the commit in six months from now, needing to figure out what this is all about and whether the actual change matches the intent -- why this is a good change.\nFeel free to amend the commit and force push. Oh, wait, you can't ;-)\n. @svnpenn sure. I'd be very likely to merge a well-crafted pull request to that extent.\n. @svnpenn we maintain both sources and binaries. For example, we have /cmd/git.exe -- a binary -- and /src/git-wrapper/git.c -- its sources.\nFor pull requests, we require the sources to be offered. One of the maintainers then builds the binaries and commits them.\n. @svnpenn you are right! Shame on me! Now I feel so bad about this issue that I won't touch it anymore lest I get reminded of my shame.\n. See https://github.com/msysgit/msysgit/wiki/Frequently-Asked-Questions#wiki-subversion-is-too-old-for-git-svn-to-work-properly-cant-you-guys-keep-your-software-up-to-date\n. @n8felton from my quick search, we have no support for the /LOADINF argument so far. Care to add it? We'll release 1.9 today or tomorrow, might be cutting it close, but if you make it until then, I'd be happy to accept a pull request!\n. @mathrick please note that you can easily build your own installer until we get around to release a new one:\n1. https://github.com/msysgit/msysgit/wiki/InstallMSysGit#wiki-How_to_install_it\n2. https://github.com/msysgit/msysgit/wiki/WorkingOnMsysGit#wiki-Make_an_installer\n. @sschuberth this is not tested on my side but should be correct (read: I cannot see what could be wrong with the patch ;-)).\n. That's funny... I force-pushed but the pull request was not updated...\nI think I addressed all your concerns about the pull request; feel free to merge/adjust!\n. Thanks!\n. Hmm. What is the rationale? What does this fix?\n. @n8felton do you want me to hold off with a new release until you make a pull request for the /LOADINF support? I could wait up to a day, I guess...\n. @n8felton okay... once your done, we can easily release another Git 1.9.0 preview <date>.\n. @n8felton oh, sorry! If I had known it'd be that quick, I would have held off... @sschuberth could you have a look when you have time?\n. @n8felton oh, I thought you had tested it already. For my curiosity, could you paste a .inf file in a comment to this ticket (I'd like to see how it looks like to get a feel what one can do with it)?\n. Thanks both!\n. Nice! @kusma @sschuberth @patthoyts any objections?\n. Thanks!\n. Oh, and in case you missed it, @snaewe, I updated to zlib 1.2.8 in response to your notice.\n. From: \"Johannes Schindelin\" Johannes.Schindelin@gmx.de\n\nHi,\nOn Thu, 27 Feb 2014, lewisdiamond wrote:\n\nmsysgit uses OpenSSH_4.6p1, OpenSSL 0.9.8e 23 Feb 2007, which is \nobviously very old.\n\nOur page\nhttps://github.com/msysgit/msysgit/wiki/Frequently-Asked-Questions \ndoes\nnot list the reasons but they are similar to the reason why Perl was \nnot\nupgraded (and the resolution is similar albeit much less involved).\nUnfortunately, I lack the time to edit that FAQ, can please somebody \nwho\nknows how to use the Mail archives and the issue tracker fill in the\ninformation (@t-b worked on this IIRC).\n\nI've made an attempt at a short starter for the FAQ based on a previous \nemail response I made to an earlier version of the same question.\n\nVery much appreciated!\nJohannes\nPhilip\n. @lewisdiamond that is true, but it still is no counterargument to: 1) there exists a ticket for it already, 2) you could comment on that, 3) nobody seems to want this enough to put in more than mere words for two years.\n\nThis is a perfect opportunity for you to get involved!\n. We're not really a Unix-like distribution. We just provide the bare minimum of Unix-like tools to run Git. For that reason, we actually use git grep instead of grep.\nIf you want to give it a try, go ahead. Otherwise I do not see much chance, I am afraid.\n. \n. @PeterDaveHello if somebody already started on it, we will get a pull request soon. This ticket would have to be closed then, anyway. If nobody started work on it, there is little reason to believe for that situation to change. And leaving this ticket open will change the situation least of all.\n. @bulk88 You do not have to guess. There is the Git history stating quite clearly how @patthoyts generated it.\nAnd @kusma is correct, we dropped pre-XP support quite some time ago (at least two years IIRC).\n@bulk88 this is Open Source, so nothing is impossible, but to be quite clear: if you want Win2K support, and you want it badly enough, you can have it, iff you put in the bulk of the work to put back and maintain support for Win2K. Nobody among the active msysGit contributors except for you seems to need it. Not to forget: you are the only one with the ability to test it, therefore there is simply no efficient way for another current msysGit contributor to support Win2K.\n@bulk88 Are you prepared to put in the bulk of the work?\n. For the record, proper quoting in GitHub comments is done by prefixing with \"> \".\nTo find out how tk85.dll was compiled,\n1. go to https://github.com/msysgit/msygit\n2. type 't'\n3. type 'tk85.dll'\n4. hit Return\n5. click on 'History'\n6. click on the first commit in the list\n7. since it is obviously auto-generated, click on the parent link\n8. since the parent is also obviously auto-generated, click on the parent's parent link\n9. bask in the revelation\n\n\n@bulk88 Are you prepared to put in the bulk of the work?\n\nYou won't accept it if I did it, see #161 (comment)\n\nIt is true that I won't accept binaries compiled by people who did not earn my trust yet. That is an absolute requirement because (with the exception of one guy on the Git mailing list) users trust me to not do that: there might be backdoors, viruses, whatever. Once you earned my trust, no problem, though.\nTherefore, for you, @bulk88, the process would be to edit the scripts in /src/tcltk/ until I can generate the binaries by simply running /src/tcltk/release.sh (and before that, reviewing the changes you made, of course).\nI will accept your work. Just not the end-product, without any way to reproduce it myself.\nClear?\n. Is it possible that you set the config variable core.ignoreStat to true? If so, I cannot really think of a way how Git should know what's happening. If not, I have no clue why Git behaves that way...\n. @rcdailey I promise that I will try to reproduce if you make an example that let's me do that in 2 minutes. Unfortunately, I won't have time to try if it requires me to do all the work to get to the state of reproducing.\n. @rcdailey I agree. Until that time, I will close this ticket; it can be reopened easily when somebody with the required time shows up.\n. @yammelvin could you verify whether msysgit/Git-Cheetah#14 addressed the problem? You can follow this documentation how to build and install Git-Cheetah from source.\n. @yammelvin I guess the best would be to first run make uninstall first. After that, make install-user. Then, the Git Bash entry should be shown when right-clicking on a Git-tracked folder.\nThe only problem I just realized is that you are on 64-bit Windows. So you will need to run\n1. /src/mingw-w64/release-easy.sh\n2. /src/mingw-w64/release-zlib.sh\nbefore you can compile for 64 bit. And then you will have to pass the W64=1 setting to make like so:\nmake W64=1 uninstall install-user\nCould you give that a try?\n. @yammelvin if you installed it with make W64=1 install-user it can be uninstalled using make W64=1 uninstall-user.\n. Hey @yammelvin could you try msysgit/Git-Cheetah#15? I think I fixed it.\n. @yammelvin Thanks for your feedback!\n. @yammelvin I think it might be related to a mixed 32/64-bit build. You might need to make clean to make it work again. Since I did not touch cheetah.rc in that pull request, there is little point in reverting the merge, but if you are certain that it must be it, you can revert it locally using git revert -n -m 1 33f73c533b38cc7079a0634d428424a85e835f4d.\nBTW such usage questions are better asked on the mailing lists... ;-) git@vger.kernel.org for general Git questions, msysgit@googlegroups.com for Git for Windows specific ones.\n. @yammelvin excellent that you could fix it!\nI wonder though why the VERSION is not set properly... because it should be the Git-Cheetah version, not the Git version.\n. I guess that it needs at least something resembling a version number (not sure about the leading 'v', though). Just a guess...\n. @basinilya if xargs links against msys-1.dll, it has to be built just like Perl.\n@basinilya for the future record, when I spell out what needs to be done to include xargs (namely to add a script to build it from source) I really appreciate when that is not ignored. Really.\n. @basinilya if Git does not run without them, sure. Maybe you can add an [IB]-style comment why you cherry-picked the commits?\n. @basinilya just after merging the other pull request (i.e. when all my comments have been addressed), I will of course run the script myself on my computer and cherry-pick that commit onto master. So there is no need for this here pull request. Fine?\n. @basinilya I got interrupted (there were a couple of issues in my setup which I used as an excuse to modify the src/common/) but I'll continue in a couple of hours, promise!\n. Okay, there you go: https://github.com/msysgit/msysgit/commit/42977446\nThank you so much for being insistent and tenacious and getting this thing in!\n. @lygstate I hope you manage to submit a patch adding a script to download, build, install and commit the version you seek.\nAnd BTW \"problem appeared\" is not a good description of a ticket. It is also not a good motivation if the ticket looks as if it was crafted in 30 seconds while watching the final episode of How I Met Your Mother, when you certainly want other people to spend substantially more time for you!\n. \n. Lots of comments, sorry! However, please keep in mind that I will be stuck with maintaining this, so obviously I want to avoid having to maintain something that I'd need to clean up first ;-)\n. Awesome! Thanks!\n. Looks like left-over files. Seeing that not much time was spent on crafting this bug report, I have to admit that I am tempted to leave it at spending the same amount of time on it.\n. Work-around: push only a bunch of tags at a time, possibly using a combination of git tag -l (properly post-processed) and xargs (with the proper arguments).\n. > I believe this issue should be re-opened and solved properly.\nEvery Open Source project is as powerful and complete as the community surrounding it. If you truly and firmly believe that Git for Windows should be better than it is right now, you have what it takes to make it so.\n. > > you have what it takes to make it so.\n\nNot always true. A web developer that uses GIT may not have the domain knowledge necessary to contribute to it, for example.\n\nA web developer can still pay somebody to fix their C problems.\n\nYours is the same old \"I don't give a damn\" response you get from many open source projects.\n\nI really take offense in that statement. You make it sound as if I failed to work really, really hard over years to make this project better. You know, I am really tired of such opinions. I work on Git for Windows. A lot. But instead of contributing a little back, even just a little, to make the project from which they benefit so much, people like you prefer to discourage people like me instead, by talking us and our accomplishments down. If you think that is fair, or for that matter, if you believe that the effect you just caused was a good idea, then we disagree, in a rather gigantic way.\nThe following is intended for all developers (web or otherwise), contributors, users, everybody who benefits from Git: I invite you to contribute constructively. If you can fix bugs in Git: great, please do so. If you encounter a problem you cannot solve, try to figure out as much as you can on your own, ask for help when you're stuck and then try to find ways to solve it, possibly by enticing others to help in whatever way works. If you have no problem worth solving, you can still cheer those on who do solve problems. Tell them how great they are, invite them to a barbecue or just a drink whenever they are in your home town.\nThis is a great project. And it can be so much greater still if you join, if you spend a little of your time and energy to make it better. Sure, some people will use your work without giving anything back. Those people do not matter. Your contribution matters, it is you who makes this a great and rewarding project. All you future contributors: You are awesome.\n. I locked this issue so that emotions have a chance of cooling down, and we all have a chance to get back to work now.\n. Thanks!\n@sschuberth I hope you did not mind me merging this; It appeared obviously correct to me. Let me know if you'd rather have me wait for your approval in the future when merging installer-related changes...\n. Thank you!\n. Thanks!\n. I fear that we might be better served with removing the whole thing, as it is utterly outdated. The only item of importance is the one to submit things upstream... And GitHub has a kick-ass issue system, making it doubly undesirable to have an extra TODO file.\nWhat do you think?\n. See 21ab211.\n. Thanks! Shows how long nobody worked on the msys branch... ;-)\n. I think the problem is that we really need to use --exclude-standard rather than making a made-up list of .gitignore files...\n. Ah, maybe the problem lies elsewhere: when I built Perl, our Git -- of course! -- could not use much of Perl, in particular not the Subversion bindings. So these files that you list most likely did not exist at the time Perl was compiled successfully for the very first time!\nHow about doing cd / && git checkout -p origin/master .gitignore in the msys branch?\n. Actually, what I really meant was cd / && git checkout origin/master .gitignore && git reset && git add -p... ;-)\n. Hmm. Makes me wonder why 505a1e8df912774a9c04ea939024a71c41e97a6c did not fix the problem for you...\n. Ah, that makes sense. Thanks!\n. Does the merged PR address this ticket?\n. Very good, thanks!\n. @dolmen you can always open pull requests...\n@sschuberth I gather that you want to encourage people to contribute by switching off issues and effectively only allowing pull requests?\n. @dolmen I think that the best way to find out which branch is the current one is to look at the history of Git for Windows. In particular, this merge looks like it has the interesting commits, so I suspect that https://github.com/msysgit/git/compare/33c8cf7^...33c8cf7^2 lists the commits in question.\n. @sschuberth fair enough!\n. @docwhat please feel free to look into this issue more, but please also understand that Git for Windows is not maintained by a company. It lives and thrives by being pushed forward through needs of enthusiastic volunteers, such as yourself.\nThe first pointer I can give you is in the FAQ; While it speaks about Perl, it is very similar for Bash. The only difference is that you will have to look at /src/rt/ instead of /src/perl/ and that you need to run the release.sh script with the bash option.\nI know, this is pretty obscure! However, please realize how much time was spent to build the development environment; At some stage people run out of steam, and in Bash's case, that was before documentation on the wiki was tackled.\nSo here are my suggestions how you could improve the situation for yourself:\n- find out how the src/msys submodule and the src/rt/release.sh script work together\n- figure out which of the repositories listed in https://sourceforge.net/p/mingw/_list/git?source=navbar should be used instead of https://github.com/msysgit/msys (we used to maintain a Git mirror of their CVS repository, but they switched to Git in the meantime)\n- figure out how to update the Bash source\n- build a new Bash\n- test\n- contribute one or more pull requests, as appropriate\nPlease feel free to ask for advice whenever you get stuck!\n. Okay! Feel free to reopen when you do have the \"steam\" ;-)\n. Please note that Git for Windows 2.x supersedes now-deprecated msysGit-based Git for Windows 1.x, and comes with Bash 4.3.\n. This is probably related to the problem fixed using the procedure described in 71f78b1816e3ff841f737672d43af36d099cb26f. However, you will have to find out which of the .dll files poses the problem, as it apparently only affects ssh.exe...\n. I guess my advice fixed it ;-) If not, please feel to reopen with more information.\n. @krystufe try the spanking new sneak preview of Git for Windows 2.x (64-bit): https://git-for-windows.github.io/. The 64-bit address range is large enough that we will hopefully never encounter that heap problem again.\n. Thank you!\n. @nilleb how about going to https://github.com/msysgit/msysgit/find/master (you can also just type t on https://github.com/msysgit/msysgit/ unless you disabled Javascript) and typing setup-msysgit.sh? You will find where the file lives.\nThen, just install msysGit via the net installer, make the change, commit it, fork the repository, push and send a pull request.\n. I opened this pull request so we have a place for discussions.\n. Thank you!\nFor your next pull requests, may I ask to add the proper Signed-off-by: lines as in the rest of the Git history? Thanks!\n. > I would prefer if you could rebase on my branch [...]\nIf you don't mind terribly, I would rather merge: This leaves a nice record how these and those changes came into the commit history, and it also groups commits that belong together.\n. > About squashing and nicify the existing commits, yes, I agree that would be nice. But I will not do that.\nI will do that, then. But I won't have time to do it until the weekend in two weeks, at least. Don't worry, I will eventually get around to do it.\n. Merged. Thanks!\nFor the record, I had to adjust a couple of things to make it consistent with the coding style surrounding the patched code, and I also left out the example log because it is not necessary to rebuild Perl.\n. Thanks!\n. Unfortunately, you ask for a lot of work right there. Git for Windows is a highly contributor-driven project (as a consequence of being pretty small in terms of contributors yet large in terms of people asking for assistance).\nThat means that your wish will only come true if you take care of it... so: feel free to open a pull request!\n. You might want to set the environment variable HOME to your correct home directory instead.\n. @wolfy1339 please follow the advice in https://github.com/msysgit/msysgit/wiki#issue-reporting-guidelines to provide an adequate bug report. Thank you.\n. @wolfy1339 this still does not begin to help anyone to reproduce the error. No output is shown, either. Please spend at least as much time on writing a good bug report as you wish all other people to spend on solving it combined.\n. Oh, it could also be something really trivial. Are you really writing <branch> instead of substituting it with the name of the branch to which you want to switch?\n. This bug report unfortunately goes nowhere, despite the help. So I am closing it.\n. @peci1 to be precise, @bernardpaulus asked you to test with Git Bash. Obviously, we have to narrow down what the problem is.\nBesides, please paste text when you want to show text, not screenshots.\n. @bernardpaulus thank you for this excellent report. I added a link to https://github.com/msysgit/msysgit/wiki#issue-reporting-guidelines so other reporters can follow your outstanding example.\n. Happily, in Git for Windows 2.x we already have Tcl/Tk 8.6. And since 2.x supersedes 1.x, I close the ticket here: With versions 2.x, Git for Windows moved to a new org.\n. @gamerh2o I have to be very honest with you: this issue will probably require a lot of energy on your side. You will have to look at the msys branch and search for a commit that removed that file. Then you will have to identify the minimal set of files required from the set of files that were removed in that commit. (It could be that there was no such commit on msys but that instead we never copied enough files into master. This is unfortunately as far as I can help.\n. @ErichHartmann please feel more than free to reopen this issue once you provided not only enough context but also clarified just how much time you are willing to spend on this issue yourself (to give an indicator how much time you expect others to sink into it).\n. Thanks!\n. It's not really a fix; they changed the complete structure, and we'll need to adapt to that because we use a way outdated compiler at the moment. But I lack the time to take care of that, so for the moment I'll punt (and incur a dramatic technical debt, unfortunately) and merge this workaround.\nThank you, @t-b!\n. @t-b with old compiler I meant of course only the MingW-W64 builds... and if you want to switch to personal builds, that's fine with me, but I agree that we shouldget the DevEnv going. For one, we need a catchier name, it apparently does make a huge difference.\n. Thanks!\n. Whoops, I merged without verifying that @t-b's comment made it into a rewritten version of the commit... Sorry!\n. Please see https://github.com/msysgit/msysgit/wiki/OpenSSH-is-too-old. Unfortunately, just downloading a binary from somewhere, dropping it into place and opening a pull request is not going to do the job... :-(\nI really had hoped that our documentation was clear enough on source-only contributions!\nTherefore I am really saddened that I have to close this pull request without merging.\n. This has been fixed through the PR #220. Thanks, @ctrueden!\n. The editor is also used for git add -e where newlines do matter.\nMy idea would be to detect whether Notepad++ is installed (or for that matter, any other editor for which support gets written by somebody caring enough) and offer a choice. For Notepad++ in particular, because it is free (GPL), I would also add an option to download it if it was not installed.\nHmm?\n. That looks pretty awesome! I tried to modify it so that it can create new files specified on the command line, but it fails with an invalid encoding choice (and on my Mac, I cannot click \"Show Details\"):\ndiff\ndiff --git a/notepad.tcl b/notepad.tcl\nold mode 100644\nnew mode 100755\nindex 84be9e9..0a9881b\n--- a/notepad.tcl\n+++ b/notepad.tcl\n@@ -55,17 +55,26 @@ proc Open {app} {\n # line ending format in use.\n proc OpenFile {app path} {\n     upvar #0 $app state\n-    set f [open_bom $path r]\n-    set state(filename) $path\n-    set state(encoding) [fconfigure $f -encoding]\n-    set state(start) [tell $f]\n-    set state(bom) [expr {$state(start) != 0}]\n-    gets $f line\n-    set state(translation) [expr {([string index $line end] == \"\\r\") ? \"crlf\" : \"lf\"}]\n-    seek $f $state(start)\n-    fconfigure $f -translation $state(translation)\n-    set data [read $f]\n-    close $f\n+\n+    if {![file exists $path]} {\n+        set data \"\"\n+        set state(encoding) \"utf-8\"\n+        set state(filename) $path\n+        set state(start) 0\n+        set state(bom) 0\n+    } else {\n+        set f [open_bom $path r]\n+        set state(encoding) [fconfigure $f -encoding]\n+        set state(filename) $path\n+        set state(start) [tell $f]\n+        set state(bom) [expr {$state(start) != 0}]\n+        gets $f line\n+        set state(translation) [expr {([string index $line end] == \"\\r\") ? \"crlf\" : \"lf\"}]\n+        seek $f $state(start)\n+        fconfigure $f -translation $state(translation)\n+        set data [read $f]\n+        close $f\n+    }\n     $app.f.txt delete 1.0 end\n     $app.f.txt insert end $data\n     $app.f.txt edit modified 0\n@@ -80,7 +89,7 @@ proc Save {app} {\n     if {$state(filename) eq \"\"} {\n         SaveAs $app\n     } else {\n-        SaveFile $app $stats(filename)\n+        SaveFile $app $state(filename)\n     }\n }\n. @patthoyts would you mind me setting this up as a proper Git repository in the git-for-windows/ org? I still would like to address a couple more things, such as: ask to save before closing, keyboard shortcuts, focus in the editor right away, etc...\n. @patthoyts I went ahead and created the repository: https://github.com/dscho/notepad.tcl. If you agree, I'd like to move it to https://github.com/git-for-windows.\n. @Utumno we kinda reached that conclusion already, thank you for confirming, though. The issue is people who actually work on this instead of just chatting about it ;-)\n. Closed in favor of https://github.com/git-for-windows/git/issues/291.\n. Awesome, thank you so much! This is an excellent pull request.\n. @ctrueden no problem. You usually build an installer using /share/WinGit/release.sh <version> (or a portable release with /share/WinGit/portable-release.sh <version> and test that. I'm on it.\n. Thank you! I merged a slightly modified version (editing the line causing the warning, as you had suggested).\n. To make it easier what I merged, here a link: https://github.com/msysgit/msysgit/compare/903b82e%5E...903b82e%5E2\n. Apart from the binaries and the extra COPYING files to be patched in, this looks really good! I would probably untangle the configure.ac from the configure patches so that it is easier to upgrade, but I guess that could be done when upgrading.\n. > I could make a shell script instead of adding *.dll.a binaries.\nWell, I was really curious from where you got them...\n. Thank you!\n. Just one more question: you extracted the headers for msys-crypto-0.9.8.dll and msys-minires.dll from where? I just went for a hunt for five minutes (using up a third of my daily Git time budget) and could not find any sensible candidate. Would be nice if you could mention the source for those files in the commit message (also to confirm that the headers match the existing binaries).\nAfter that, we'll be good to go! Thank you so much for all your hard work!\n. Excellent work, @shirosaki! @kusma thank you for your review! I will now let my slow VM build it... ;-)\n. @shirosaki I also found that I had to remove some obsolete headers... Did you have to do something similar to 7cf3e99c36186852b7b8dfae630b8ad0ab9461bf?\n. I cherry-picked the compiled OpenSSH binaries and put it on the branch ssh-6.6p1 so I can test it thoroughly first.\n. Tested and merged. Thank you again!\n. > I didn't notice obsolete headers. My build completed without removing the headers.\nOkay, strange. Maybe some timestamp issue where my checkout let other directories in the INCLUDE search path take precedence.\n\nIt seems msys-crypt is not needed for OpenSSH 6.6p1.\n\nThanks for the analysis! However, in the interest of time I am inclined to leave things as they are. If you feel strongly about this issue, though, just file a PR and I will merge it right away!\n\nhttps://github.com/msysgit/msysgit/blob/msys/bin/slogin looks obsolete.\nIt should be removed since slogin.exe exists.\n\nThanks! See 4f2618e\n. @BrianGilbert thank you very much!\n. @lklepner have you seen the first revision of said page? It looks a bit more complete to me than the current revision: https://github.com/msysgit/msysgit/wiki/Silent-Installation/_compare/c882fe542e1ee873935b69cfbe508f0c153bab3c...442206b4d6bd07735da6faf10fa4e0ab6a024ecc\n. Excellent!\n. Building...\n. Okay, I built it and committed all the files: 5df864ddd63390e8f3d25ddeda8ed227c8393e0b. I note a couple of things (possibly worrisome?):\n- it builds msys-ssl-1.0.0.dll, not msys-ssl-1.0.1.dll as I would have expected... is this so that linked programs will still find it even if they were linked against 1.0.0?\n- it also builds msys-crypto-1.0.0.dll, does that matter with regards to the crypt issue you mentioned in #221?\n- despite the fact that we have a 1.2MB msys-crypto-1.0.0.dll and a 300KB msys-ssl-1.0.0.dll file that we did not have before, the openssl.exe binary increased size from ~550KB to 1MB... (It does not matter all that much because we use a MinGW OpenSSL for everything except ssh.exe, but still...)\n. > Yes. It links against 1.0.0. OpenSSL would keep the versions that are binary compatible.\nThanks for the clarification!\n\nI mentioned that the following msys-crypt-0.dll is not needed.\nhttps://github.com/msysgit/msysgit/blob/msys/src/crypt/release.sh\nmsys-crypto-1.0.0.dll from openssl is required.\n\nAh, right, you mentioned that, but I missed something: crypt vs crypto. Such confusing naming!\n\nMaybe gcc option -s is different.\n\nI suspected that. Actually, I think it is okay because we might get more detailed information from bug reports that way (AFAIR -s strips out debug information, rendering stack traces pretty useless). OTOH you already opened a PR addressing this...\nThank you so much for all your work, and especially for educating me!\n. @silverkorn first of all: I am impressed at your tenacity. Good job!\nBut I have to admit that I still think that your Javascript code is basically recapitulating so many things you would get for free if you converted this into a shell script.\nRemember: if you start any text file with the line #!/bin/sh, choose a file name of the form git-SOMETHING and put it anywhere on the PATH of Git (i.e. even in the same bin/ directory in which git.exe lives), it can be called using git SOMETHING.\nThat way, no discovery of where things live is required. All of it is done by the Git Bash. And you can call that command easily from cmd.exe because Git needs to know how to call shell scripts anyway, so you get all of that for free.\nNow, such a shell script could very easily output the lines in the same form as your Javascript code does, with minimal effort, and call all of ssh, too...\nAnother comment: in the Git project, we like to suggest to rewrite topic branches in pull requests, i.e. instead of piling commits on top of flawed commits, we recommend using the interactive rebase to rewrite topic branch and then force-push (which automatically updates the pull request). This not only makes for a much nicer story, but also for much easier review and maintenance (using git bisect, for example, becomes really awkward otherwise).\n. > Let me know if it's also ok with you if we close this issue.\nI do not think it is time quite yet to give up so easily ;-)\nPlease have a look at https://github.com/msysgit/msysgit/compare/master...silverkorn to get an idea about what I am talking. You can easily call shell scripts without \"poisoning\" the PATH with the Bash.\nI also realized while hacking on this branch that there is already a .cmd script related to ssh-agent: start-ssh-agent.cmd. Have you seen that? It looks as if that already does quite a lot of what you want to do.\nI am tempted, however, to change the way it works: we should\n1. use the power of the bash (as in git-silverkorn) to start the ssh-agent\n2. use $HOME/.gitconfig to persist the settings\n3. use ps | grep \"^ *$SSH_AGENT_PID .*/usr/bin/ssh-agent$\" as indicator whether the ssh-agent is still running at the correct PID\n4. reuse the start-ssh-agent.cmd script if at all possible for both your use case and Matt's case.\nHmm?\n. @silverkorn I will close this PR, not so much because I am disinterested (I am actually interested!), but so that the current state is preserved even when you force-push to your master.\n. Just to clarify: the commit message claims to patch openssl, but the patch is applied to openssh?\n. > Sorry for typo. I fixed that.\nNo problem, and thank you for fixing it! I was really not sure there (did not really have time to dig deeper, either...\n. @IPv6 if you can make a good case why rsync is required to use Git, feel free to open a Pull Request to add rsync to the installer and make it even bigger than it is already...\n. > mingwGitDevEnv is some kind of fork/alternative to MSysGit\nNo, it is the successor.\n\nMSysGit (Git for Windows)\n\nNo. Git for Windows is Git for Windows. MSysGit is the development environment for Git for Windows.\n. > Will wait for mingwGitDevEnv to mature\nFWIW it does not quite fill me with joy that you decide to leave the complete burden of making this project work for you with us...\nJust for the record... ;-)\n. Good call!\nBut do we really want to update the host keys? I know, it is unlikely that anybody uses them (we do not ship the server part, do we?), but just in case somebody does, we should not change them under their backs, right?\n. Actually, I think we can keep the commit as-is, and I'll just be careful when I \"cherry pick\" the updated files to master tomorrow.\n. Please note that this is not a bug report, so we would really prefer it to be discussed on the Git mailing list: git@vger.kernel.org. The most crucial bit of information is lacking, however (and I won't dig into your project to find out: it is your question, not mine ;-)): is your project \"derivative work\" in the legal sense? You might want to include that information in the mail.\n. Is this superseded by #232?\n. Any progress on this?\n. @t-b thank you so much!\n. Well done!\n. Awesome!\n. @linquize I invite you to open a pull request upgrading to a newer Subversion.\n. Obviously good, thank you so much!\n. Thanks so much!\n. Again, thank you so much!\n. Thanks for keeping the project going!\n. ;-)\n. Oh wow. Somebody spent all the effort of opening a pull request with an empty description and a single word as subject. And the commits to merge are exactly the same @kusma and myself provided, with all the problems that have not been addressed.\nWow.\n. Nice!\n. FWIW it fixed the issue here, too!\n. @kjeremy no. Because I am mean and want you to not have any working git svn. Muahahahaha!\n;-)\n. @MerzDaniel you do know that you posted to an abandoned project, right? Did you try its successor, Git for Windows 2.x yet?\n. @BrisingrAerowing feel free to contribute (an excellent way of saying thanks for all the hard work provided to you for free) by editing the FAQ on our Wiki to reflect what you learned.\n. This fix made it into the most recent 1.9.5 release.\n. We addressed this in the installer of Git for Windows 2.x: . is no longer in the PATH. However, that was not enough, we needed two follow-up patches:\n- for the installer and\n- for the portable version\nThanks to everybody who helped resolve this issue.\n. @ferventcoder if you are still interested in letting /CLOSEAPPLICATIONS close ssh-agent, please open a new issue with Git for Windows 2.x. In that case, please note that I will ask for your assistance in resolving the issue. Thanks!\n. @Stanzilla as you probably know (and don't need me to tell you, but I'll say it here for others' benefit): in Open Source just like everywhere else, things do not happen magically. People have to make things happen. If you want to see a version 2.1, you could make it happen. By participating with action, e.g. performing a merging rebase and running the test suite, fixing problems as they occur.\nAnd: as has been stated several times, there is no ETA.\n. > I loved that since I could keep all my tools in one place and easily get up and running on any machine or after a new install.\nThat's so nice for you!\nI myself loved the idea, however, that all my hard work put into making the script that generates that zip would be rewarded by contributions to the Git for Windows project.\nSo no, I won't put any more work into that thankless task, to cut my losses. Sorry.\nHaving said that, if you feel that it is important enough to actually let actions speak, go ahead. I would probably merge a well-crafted PR.\n. > Is your old script available somewhere?\nYes. It's all in the Git history. But given that I said I do not want to put any more work into this thankless task, why do you think it is a good idea to force me?\n. Thank you so much for your contribution. This PR was truly a pleasure to review!\n. > Btw, I didn't look for any documentation about the \"Signed-off-by:\" line. I just followed the messages of the previous commits in the project. Hope I got it right.\nYep, you got it right!\nThe meaning of those lines is a little bit important, though: you state that you are allowed to contribute this work into Open Source (i.e. if you did this work on your employer's time, you have to be certain that it is okay to release the code into the open).\n. @chaos7theory yep, it is unrelated. This here PR is about gitk.cmd, i.e. the gitk that users get when they call it from the regular Windows command line. Your PR was about the Explorer integration. So while the underlying problems are related, the fixes are pretty different (the latter PR requires C \u2013 which I speak pretty fluently \u2013 while this here PR requires knowledge in Windows scripting \u2013 at which I suck).\n. @t-b if you feel that we need to release a new Bash, sure, let's go with your PR. You spent waaaay more time than I would have to fix something I had the impression only affects setups running servers (and Git for Windows does not really do that). So you definitely deserve a reward! ;-)\n. @tzaeschke now that someone knowledgeable basically worked for you for free, it would be good to \"repay\" him e.g. by editing the FAQ \u2013 or enhancing whatever other resource would have helped you with this issue.\n. > @set LANG=\"fr_FR\"\nDrop the quotes. That fixes your bug here, at least.\n. > i have the version 2.5.1\nThen you are using the wrong bug tracker.\n\nnothing work for me\n\nIf you want excellent help, I suggest to write an excellent bug report. Git for Windows 2.x' guide lines to do that can be found here: https://github.com/git-for-windows/git/wiki/Issue-reporting-guidelines\n. It appears that gpg works even without the iconv.dll (that would conflict with the libiconv2.dll pointed out by @t-b). Given that this PR is binary-only (which we do not accept) and that our focus is now on the new Git for Windows SDK that will supersede msysGit, I am closing this PR.\n@usta if you feel that this issue should still be addressed, I encourage you to head over to the Git for Windows and make sure that gpg works there.\n. I had kind of hoped that a Minimal, Complete and Verifiable Example would materialize in the meantime. A screencast is just not a very good substitute.\nAnyway, if this problem persists with Git for Windows 2.x, I strongly advise to follow the hints in https://github.com/git-for-windows/git/wiki/Issue-reporting-guidelines to make a but report that would allow for example me to reproduce the problem.\n. @huerlisi please feel free to close tickets yourself when the associated problems are addressed.\n. The msysGit project is unmaintained since Git for Windows 2.5.0 was released. If you have questions or bug reports that are not Windows-specific, it would be better to report them to the Git mailing list instead.. @antoncl there is no need for apologies, but you might want to improve the report. There are many known issues with Kaspersky (not Kasparsky) misdetecting worms where there are none. They purportedly fixed it in their newest product, so it is essential to be very precise in any report, for example mentioning the exact software you used, preferably with version and release date.\nFurther, as @sschuberth hinted, you have to specify the hash of your downloaded file. There are many tools available to calculate MD5 and SHA-1 for specified files. The reason why this is necessary: you might have an infected computer in which case the file you downloaded is not the same as the file that is stored on your disk. Therefore, it is indeed as @sschuberth says: the download steps don't mean really much. You have to make sure that the file on your disk is exactly the same as everybody else sees who follows the same download steps.\nHopefully this will help you understand why this conversation was so unsatisfactory on all sides, and it hopefully also will help us communicate better in the future.\n. > if a user reports an issue they have, it is generally because they care about your product.\nPlease let me clarify a misunderstanding. Git for Windows is not a product. You never paid for it, and the contributors never received money for their incredible work.\nAs a consequence, there is no paid User Interaction Expert who might have been paid to point out patiently that the first course of action is to exclude the common problems first: that the download was infected on the way, and that the best way to tell is to compare the file checksums.\nIt might be that misunderstanding that you are a customer and that others somehow owe you commercial-grade customer support that might have soured the communication.\n. My experience with roughly a dozen reports about viruses in our installer is that we have a 100% clean record. No viruses, no trojans, no nothing. Every single time it turned out that our software was uninfected and the anti-virus software was wrong. In one case, it took the company some 2.5 years to figure that out, but in the end they admitted that it was a false positive.\nNow, in all of those cases only a couple of the Git for Windows versions were being questioned, while others were declared safe that had been produced with exactly the same toolchain, on exactly the same computer, in exactly the same way. That holds true both for 1.9.5 and the upcoming 2.x releases. There was a change how 2.x releases are made, relative to 1.x but in both cases subsequent Git for Windows versions have been labeled harmless and harmful, respectively, by some anti-virus software. This, of course, makes no sense: having used the exact same scripts, with the exact same InnoSetup version or .7z SFX component, it should be an all-or-nothing effect: either they are all infected, or none of them.\nAnother important data point: in every single incident report, it was impossible for me to get ahold of anybody in the anti-virus software company to work through the issue. In every single case the problem was that I am not a customer of theirs, so they refused to give me customer support. Naturally, I agree: not being a customer of theirs, I have no right to take their time.\nAs a consequence my reaction to reports that some anti-virus or other thinks Git for Windows is virus-ridden, I react calmer and calmer every time and simply ask the customer of the anti-virus software company to contact them first, and to come back only when they have proof that there is actually a virus in our software (in which case I will be very glad to get rid of the virus if they company helps me with it), or, much more likely by our track record, when they have proof that it was a false positive.\n. Do you mean on the same computer?\n. > [sarcasm]\n\nMaybe we forgot to remove the if (location == Vietnam) sleep(60); debug code?\n[/sarcasm]\n\nD'oh, you're right! How could I forget!\n;-)\n. > When i change timezone back to UTC+1 Prague in windows then git is fast again.\nThe question is really more whether it is slow again if you switch to Vietnam's time zone in Prague.\nIt is quite possible that the culprit is a network drive that sits in Prague and just takes ages to access from abroad.\nI started to add documentation to the Wiki how you can diagnose the problem yourself: https://github.com/msysgit/msysgit/wiki/Diagnosing-why-Git-is-so-slow\n. > The access of a remote volume sounds like the obvious, simple answer, to me as well.\nWell, it is not an answer, but a guess, as long as it is not verified to be the culprit. We will need @DominikMostek's feedback on that. \nOn the positive side, this issue has triggered the initial version of the Wiki page which will be very useful in the future regardless.\n. @DominikMostek did https://github.com/msysgit/msysgit/wiki/Diagnosing-why-Git-is-so-slow help you diagnose the issue?\n. @EmilMoe maybe you can make use of my comment?\n. Patches welcome.\n. Thank you for your contribution!\nI only commented about the commit message: it would be very nice if the commit message contained a summary of the discussion of #261 as well as your analysis that the intent of the commit message of ed01c26 suggests that it was an honest mistake to switch that setting off.\n. Perfect, thanks!\n. IMO the best user experience for Windows users really requires a GUI -- as provided by GitHub. And the Microsoft developers also did a kick-ass job with the Git/GitHub integration of the Visual Studio.\nThe purpose of Git for Windows is to provide the same scriptable command-line interface enjoyed by developers whose development environment is on Linux and MacOSX. As such I would tend to agree with @jkdufair. Having said that, the best option would be to let the user choose at install time (and it would be best to default to Linux-like behavior).\nHappily, it is really easy to add a new page to the installer. @jkdufair @yuvale why not giving it a try?\n. How about Portable Git instead of Git?\nPlease also note that we are in the middle of switching to a new development environment.\n. Great! Would you mind squashing the fixup commit into the first? In this project, we prefer to rewrite topic branches before merging them, until the point when they are mature. Thanks!\n. Thanks.\n. @mflatischler please do not post volatile links.\nAs to your issue: we are switching to a mingw-get based development process. If you want gpg 2, you can make it happen: just contribute to https://github.com/git-for-windows/.\nIn the interest of focusing scarce resources, let's not divert attention to msysGit anymore.\n. > Either a 64bit build is released (Why hasn't this been done yet?) or the parameters you have supplied above need to be defaults for the Windows release.\nWhoa... easy! Let's not get into the \"I demand\" mode as if you were a paying customer. You will find that this will get you farther away from getting your wishes, not closer.\n. > I'll be happy to put some time into this myself\nI'd welcome that, but you could have demonstrated your willingness to spend time on it by finding... https://github.com/msysgit/git/pull/264 and taking it from there :grinning: \n. @strich not that there was any help from your side, but we do have 64-bit Git for Windows 2.x now.\n. @neico just to state things clearly: Git for Windows is pushed forward by interested, active parties. Complaints traditionally accomplish nothing, Pull Requests, do, however.\nIf you are unsatisfied that cURL 7.39 is not used with Git for Windows, you should ask yourself why you did not make it happen yet.\nOh, and you did not need this comment to know what I just said...\n. I guess this needs to be accompanied by a change in share/WinGit/copy-files.sh, right?\n. @linquize just to make sure (I cannot test on Windows 8): did you build an installer with /share/WinGit/release.sh linquize and test the installer?\n. Thanks!\n. Seems that you did not run the install-easy.sh and install-zlib.sh scripts in /src/mingw-w64/.\n. @SamB yep, those scripts were meant.\nHowever, we switched to a new development environment, and I also just spent some time to fix building Git Cheetah in that environment. With that, I declare this bug resolved (finally!).\n. What Git for Windows and Bash version is this? (git --version; bash --version). It may be that GitHub for Windows does not quite ship with our most recent release yet? Maybe @shiftkey knows more (picking this nick from the most recent commits in https://github.com/github/msysgit/commits/devel)?\n. @shipcod3 ouch, that is the newest release. Hopefully you have a little time to help us out here... Do you know whether there is a Bash version that fixed this?\n. > the upstream tag wasn't pushed at the time\nAh, yes, of course, for security reasons (we fixed a critical bug and I did not want people who think like yours truly to analyze the patch to play pranks on their friends). However, GitHub had full access to the changes I made (my work was gracefully sponsored by GitHub), Peff contacted the GitHub for Windows team...\n. @nak5124 how about giving it a try?\nRecompiling the Bash is pretty easy (unless you are sitting in a scientific symposium where the ports are blocked that you need to access your Windows VM :frowning:):\n1. install the Git for Windows development environment (see the bottom part of https://msysgit.github.io/)\n2. install a shortcut (by following the hint about add-shortcut.tcl\n3. close the msysGit window\n4. use Git for Windows (i.e. not msysGit) to check out the msys branch in C:\\msysgit (or wherever you installed the development environment)\n5. restart msysGit using the previously installed shortcut\n6. add the patch, imitating 22d376a7cca337b97d3b332587992e4f8e1e6ecd\n7. rebuild the bash using /src/rt/release.sh bash\n8. close the msysGit window and use Git for Windows to switch back to the master branch\n9. cherry-pick the new Bash (git cherry-pick msys)\n10. Test\n11. Open a PR\n(You need to close the msysGit window so that the .dll/.exe files can be replaced; they are in use while msysGit is running.)\n. @t-b you rock. @nak5124 @shipcod3 y'all owe @t-b more than just a couple of thankyous.\nI cherry-picked the new Bash here: b1500d9\n. @t-b @sschuberth together with the backported rebase fix, I think I could release a new 1.9.5.msysgit.1 by the end of this week; do you agree?\n@shiftkey I'll notify you via mail when the new release is available, okay? Or is there a better way to notify the GitHub for Windows team than to write a private mail to you?\n. Oh, and for the record, I tested the invocation mentioned by @shipcod3 (thanks so much for this!) and it is indeed fixed by the patches Bash.\n. > @dscho if you publish a release on this repo, I'll see it :metal:\nOf course! GitHub rocks.\n. Thanks!\n. Thanks!\n. The quickest way to get git svn to work for you is probably the Vagrant way.\n. > Sounds like a security issue\nNope. Sounds more like MSys' hack to support the fork() call fails due to the intended address range already being reserved (at least partially).\n. See msysgit/git#296\n. My guess it is either\nhttps://github.com/msysgit/Git-Cheetah/blob/122064e882cd17ce76198638f4011e251f0f1c90/common/winexec.c#L263\nor \nhttps://github.com/msysgit/Git-Cheetah/blob/122064e882cd17ce76198638f4011e251f0f1c90/common/winexec.c#L271\nor\nhttps://github.com/msysgit/Git-Cheetah/blob/122064e882cd17ce76198638f4011e251f0f1c90/compat/posix.c#L46\nYou will have to modify and rebuild Git Cheetah as per https://github.com/msysgit/msysgit/wiki/GitCheetah to test hunches and possible fixes.\n. I forgot, it might also be in explorer/systeminfo.c (there are two more setenv calls).\n. @stefan-muc BTW I did not want to give you the impression that I am going to solve your problem. I just wanted to give you useful pointers to allow you to investigate quicker where things go wrong, and to fix your problem in a timely manner. Should you feel compelled to participate in the Open Source community, a Pull Request would be very appreciated. In the least, however, we would need to know where things stand, and whether to close this ticket or not.\n. Thanks for letting us know.\n. @yahman72 no, this is not fixed, the attitude of the reporter was not helping either... :smiley: \nPlease note that Git Cheetah is not supported anymore; Git for Windows 2.x does not even offer it as an option any longer. If you want to do something about this bug, I would be delighted to assist you in fixing it, of course. My comment (and the follow-up one) should already be pointing in the right direction; there is a wiki page describing how to build Git Cheetah yourself.\n. > I'm wondering whether it's worth fixing this if it becomes obsolete in 2.x?\nYou can continue to use Git Cheetah, even if it is not installed as part of the Git for Windows 2.x installer. If you do that, it is worth fixing for your own sake. If you want to be nice to the project you are obviously using quite a lot, it might also be a nice gesture to fix it.\n. @ColonelJ Yeah, I think your addition is a good one, so if you could adjust the commit messages accordingly, I would merge and build (but as @sschuberth indicated, we now really focus on an MSys2-based Git for Windows, so I won't make a new release, your work would \"only\" be available via the net installer, hope that's okay with you?).\n\nThanks for the tips on commit messages though, I think that's useful; not sure how standard these rules/guidelines are?\n\nThe upstream Git project has these guidelines and we try to follow them, too.\n\nAnyway, thanks for your comment, and God's speed for a proper Git in MSYS2\n\nSee the milestone... ;-)\n\nhopefully it can work as well as msysgit has done for all these years.\n\nConsidering that the same people drive this project forward, I'd expect that to be the case...\n. > If you do want to merge it, then I think I'd be happy to put in a little more effort to check the changes are all up to date and that the commit messages explain the changes better.\nWell, you put in a lot of effort, and I think it would be a shame if it was for naught.\n\nI can't add a sign off to my own commits unless you're happy with it going in as an alias\n\nCan't you just sign off with your real name and a fake email address like <ColonelJ@users.github.com>?\n\nIt doesn't seem clear yet how this new Git would be installed from MSYS2\n\nThe plan is to use the same mechanism as with the current Git for Windows. Ideally, users will not even notice that the SDK is based on a different MSys, except maybe that more things work.\n\nI was just worried that something [...] might change the behaviour.\n\nOur benchmark is Git's own test suite. There will be no release that does not pass it.\n. @ColonelJ thank you for your hard work! As I explained previously, I think it is now even easier to contribute with the new Git SDK, and even better: it already has the packages you desired. Also: Git for Windows 2.x was released, and since that supersedes 1.x I do not think that we have any need for any development in msysGit anymore. I am sure you agree...\n. > $ git clone https://coding.net/coding/Coding-Feedback.git\nThere is no Git repository there, i.e. it is not served via HTTPS. Apparently this is an SSH-only repository.\n\n$ git clone https://github.com/msysgit/msysgit.git\nfatal: destination path 'msysgit' already exists and is not an empty directory.\n\nThere exists an msysgit/ directory in your current directory, therefore you cannot clone into that destination. You will need to call git clone https://github.com/msysgit/msysgit msysgit-clone or some such, to direct Git to clone into another directory (msysgit-clone/ in my example).\nSince Git does the expected thing in both cases, I am closing the issue.\n. > - About to connect() to proxy www.google.com port 80 (#0)\nStill looks like a proxy misconfiguration to me.\n. @Bzahov98 your problem is completely independent of Git (you have a DNS problem). Besides, it has pretty much nothing to do with the bug reported in this ticket.\n. @hvoigt what do you think?\n@shiftkey would this interfere with GitHub for Windows?\n@kusma do you think it makes sense (being the local credentials guru)?\n. @maxxnowak could you make sure that this Pull Request merges cleanly, please?\n. Please note that simply deleting something that works for some users, something that took several months of somebody else's work is something I am unwilling to accept because it would just be a lazy cop out. I have higher standards than that.\n. As announced on the Git for Windows mailing list, we are in the process of moving to a different SDK. It will take time.\n. Thanks for your contribution!\nDo you think you could find some link to some documentation that states that difference between start and call explicitly? It would be good to include that link (maybe with an excerpt) in the commit message.\nThank you!\n. Thanks!\n. Could you please reword the commit message as indicated, and remove the Merge commit? Both tasks can be performed in one go: git rebase -i origin/master, then replace the pick by a reword in the editor, save, quit, reword the commit message, force push with git push origin +HEAD.\n. Thank you!\n. Makes sense to me, but I would really want somebody who uses the SSH agent to chime in (I don't, so I do not really understand the intricacies...).\n. Another, minor nitpick: @c17r could you sign-off your patches? It is our custom to do so (essentially, you are stating that you have the right to contribute this code as Open Source).\n. In Unix, the agent values are typically stored in some dotfile in the home directory... That way you would avoid cluttering the global environment...\n. I am still very concerned that setx might be too broad. In any case, please note that Git for Windows 1.x is enjoying its retirement; Git for Windows 2.x supersedes it. So please consider opening a ticket there, or send a mail to the mailing list to discuss what is the best way to share ssh-agent's settings between different terminal windows.\n. The output of git grep -I ssh-agent suggests that the ssh-agent is started only when you run cmd/start-ssh-agent.cmd, hence I doubt that Git for Windows starts the ssh-agent every time it runs.\nI suspect that you did not quite manage to direct this ticket to the correct place: you found the issue tracker for the development environment for Git for Windows. I.e. not Git_Hub_ for Windows.\nBTW the reason the ssh-agent does not quit when GitHub for Windows quits is easily explained: this is expected behavior! The agent should keep running so that you do not have to type in your passphrase all the time. The only problem is that the agent is started again when it already runs; that is the bug. But as I pointed out: not in Git for Windows.\nMaybe @shiftkey is able to direct you to the correct place to report this issue?\n. Ummm. This description is quite unclear... how about a coherent description how to reproduce?\n. @sschuberth we should not guess... that is not helpful. In fact, we should not need to guess.\n@platonicsolz please feel free to provide a thorough explanation what exactly did not work, and how to reproduce, and what to expect instead. Until that time, I will close the ticket (feel free to reopen it with the required information).\n. > Actually i overlooked the settings of the app, its working now.\n@platonicsolz please note that even that last statement managed nothing else here than to leave me puzzled. Literally all information is missing that could help me understand the issue you had.\n. Thanks, @t-b!\n. Thanks for taking care of this issue!\n. I fear that this might introduce other overlaps, and I have no tool to verify. At this point, thought, it should be stated that you should probably switch to the new Git for Windows already (because you can...) and use the 64-bit version, which allegedly has no need for semi-frequent rebase.exe-ing anymore.\n. By the way, after git commit --amend with the suggested fixes (or even better), you can force push with git push origin +HEAD to update this PR; No need to open a new one.\nThanks!\n. @sschuberth points out that I completely missed the too short commit message. @ArloL let's replace it with some variation of this, okay?\n```\nMake sure that ~/.bashrc is not ignored\nWhen users install a ~/.bashrc they rightfully expect it to be \nexecuted as part of the regular Bash startup. However, this is not the \ncase if it is not sourced explicitly from the `~/.bash_profile file.\nThis change installs such a ~/.bash_profile unless there is already \none.\nSigned-off-by: ...\n```\n. > I will create a new PR with the commit message, if we agree on the line of code.\nPlease don't. You can easily force-push a new version of your current branch, implicitly updating this PR. If you open new PRs every time you make an update to the commit, we really lose track.\n. > I am not sure about the -a: http://stackoverflow.com/questions/321348/bash-if-a-vs-e-option\nI was talking about a different -a... From http://www.unix.com/man-page/Linux/1/test/:\nEXPRESSION1 -a EXPRESSION2\n          both EXPRESSION1 and EXPRESSION2 are true\nNote that this -a is put after the first expression and allows adding more expressions.\n. I really do not want to get into the habit of using Bashisms...\n. Thanks to @nalla, this has been finally addressed, in Git for Windows 2.x. Since Git for Windows 1.x was superseded by that new version, I am closing this here ticket.\n. Thanks, @tianon.\n. Please. I am sure you mean well, but please, please, please use the search function before reporting a bug. It just costs us time to mark tickets as duplicates while we're upgrading to a more modern development environment.\n. @vszakats Well, please keep in mind that forcing me to read this issue and to close it takes time, time that I cannot spend on getting Git for Windows 2.x out of the door ;-)\n. That is truly a pity. I was certain you could improve your contributions and offer valuable additions to the software you use for free.\n. Thank you for your contribution.\nHowever, just switching to HTTPS does not make things safer, you would need to test a checksum, too. Happily, that is exactly how the MSys2 packages we are about to use in the upcoming Git for Windows release does it.\nMaybe you want to have a look?\n. > The new project also uses non-HTTPS. Checksums are nice\nActually, checksums are more reliable than HTTPS. Because you can be reasonably certain (at least if you use SHA-1 instead of MD5, and soon SHA-256 instead of SHA-1) that you are really talking about the same file as the original committer.\n. > You rejected a valid patch anyhow on the grounds that it doesn't solve a wider package management problem. I guess a typo fix wouldn't have qualified any better. And it didn't :(\nActually, I did not reject a valid patch. This patch mingled two unrelated things into a single commit. I just did not want to let you waste your time on something that is becoming obsolete as we speak...\nI would be delighted to accept your contributions to the new Git for Windows.\n. > Checksums are useful only if you received them unaltered from an authentic source.\nRight. In our case, the source is the Git repository. If you distrust the checksum, you must distrust the URL (HTTPS or not) because it comes from the very same source as the URL.\n. > What I see is that HTTP is preferred in this project for an unknown reason.\nWrong impression. The correct impression would be: with a better commit message (and with two separate commits for the two unrelated changes), the PR would even have been accepted. But I closed it because I wanted to save both you and myself time in favor of working on the new Git SDK instead.\nI see that I failed, we both spent considerable time beating with sticks on this dead horse.\n. I understand that you find the use of the HTTP protocol sloppy and unacceptable when HTTPS is available. Likewise, please understand that I require a fix for such a sloppiness to abide by certain, not even high standards: commit messages should be clear, provide information that cannot easily be deduced from the diff but is necessary to understand the what/why/when/how/where/who of the commit, and they certainly should not contain misleading information (it is known that certificates can now be forged even by parties with common funding, so to suggest that HTTPS just makes things safe is only giving a false sense of security), commits need to be properly separated by concern.\nIf it was indeed only a bug fix, I would probably have overlooked the shortcomings of the patch.\nBut what you want to do is make our project more diligent, and you can only do that by making diligent commits and pull requests.\nNow, we have overspent the time I wanted to give this minor issue in a project that I am working hard to supersede with a better one. I guess I might just as well have the benefit of a well crafted Pull Request that simply fixes the shortcomings I point out instead of reacting with snide remarks. But I see that despite continuing to spend my time, you already deleted your fork and obviously have no intention of fixing your Pull Request? If that is the case, let's let this PR rest in peace.\n. @strauss69400 I'd like to ask you to describe your workflow a bit more. If you use the VM just to host the repo, it might be better to do that in a dedicated Windows directory instead. Alternatively you might want to use VirtualBox' Shared Folders feature to avoid having to cross the network layer just to access your repository with SourceTree.\n. My recommendation: give shared folders a try.\n. I am talking about https://forums.virtualbox.org/viewtopic.php?t=15868 (it is faster than Samba shares, as it is integrated into VirtualBox on the OS level).\n. @strauss69400 @almendro could you try Git for Windows 2.x, please? If the problem persists, please open a ticket there (Git for Windows 1.x was retired in favor of focusing all my energy on the new version).\n. I strongly suggest to give the upcoming Git for Windows 2.x a spin. Note, however, that some development on your side might be required if it does not yet do what you need it to do.\n. Indeed there is no MinGW locale.\n\nI just wanted to have the basic linux commands available on Windows - like grep, ls, etc.\n\nSorry, this is the Git for Windows project. If you are looking for basic Linux commands, Linux is top choice. If you are actually referring to GNU tools, you are probably better served by installing yourself a Cygwin, or an MSys2.\nThanks for clarifying!\n. Looking at the images in #270, it looks as if we cannot win: the background in your screenshots looks bright while @linquize's screenshots show a dark background behind the text.\nIs there maybe a toggle for full tiles vs what is seen in #270?\n. Thanks, for the explanations, both!\n. See this comment\n. @gdizier did you actually try @mknj 's suggestion? If so, does it fix it? If so, would you please close this ticket with a comment?\n. @nanos so this ticket can be closed?\n. Thanks!\n. Do you mean GitHub for Windows?\n. Wrong project, then...  See this page to find out how to get answers about GitHub for Windows.\n. It is a dangerous path to go down, if we were to start including Unix tools left or right. Providing Unix tools is outside the purview of Git for Windows.\nIf you want to have Unix tools available on Windows, I suggest you turn to MSys2 or Cygwin.\nIn fact, if you want to use the passwordstore package with MSys2, a splendid way would be to add support to, and open a Pull Request for, MSys2's MINGW-packages or its MSYS2-packages project.\n. Could you try the release candidate for Git for Windows 2.x, please?\n. Thanks for confirming! I will close this ticket because MSys1-based Git for Windows will be deprecated soon, anyway.\n. If it happens again, please debug this issue further by locating the git-sh-setup file (it should be in C:\\Program Files (x86)\\Git\\usr\\libexec\\git-core\\git-sh-setup) and insert the line set -x before line 343. That should trigger the cd command line to be printed and should give us a better chance to understand which path Git thinks is not a file or directory.\n. I just verified that this is only an issue with Git for Windows 1.x, but not with Git for Windows 2.x. Besides, it is stated in the release notes that:\n\nUnless you define the environment variable MSYS_WATCH_FSTAB (the value must be a non-empty string), Git Bash will not see any drives that have been attached after bash was started. This is a workaround to help the speed of cmd scripts using parts of Git that are implemented as shell scripts.\n. Is it the same issue with Git for Windows 2.x?\n. If it is, please open a bug with Git for Windows 2.x.\n. Perfect! @ezk84 thanks for reporting back, I appreciate it.\n. Unfortunately, this is very little information to go by:\n- Do you mean the Git Bash or Git CMD when you say \"the terminal screen\"?\n- Which commands did you try? Did you try to narrow down which commands display that behavior?\n- Did you try to trace the calls e.g. by setting GIT_TRACE=1?\n- Did you monitor the processes with Sysinternals' Process Monitor?\n- Did you try the same with different Windows versions?\n- Which Git for Windows version do you use to begin with?\n. Oh, and most importantly: did you try any of the release candidates of the upcoming Git for Windows 2.x, slated to supersede msysGit-based Git for Windows 1.x?\n. > I didn't try 2.X yet. Is there already a binary file link for me to try?\n\nYep. It's linked from the page I provided earlier: http://github.com/git-for-windows/git/releases/latest\n. Okay! Thank you for reporting back the results.\nI will close this issue now because it is better to focus my efforts in 2.x than to try to figure out a fix fo 1.x that will be obsolete in a couple of weeks anyway.\n. Please report the bug in the new org (msysgit was retired), according to http://git-for-windows.github.io/#contribute.\nAlso, please provide more information about your system. In particular whether you installed the portable or the non-portable version, 32-bit/64-bit, Windows version, example Subversion repository to reproduce the problem.\n. Oh, and maybe it is related to https://github.com/git-for-windows/git/issues/274?\n. You probably want to upgrade to Git for Windows 2.x; This project (Git for Windows 1.x) is no longer maintained.\n. > I'm running Git for Windows v2.6.3.\nThen this bug tracker is the wrong one. You want to go here instead: https://github.com/git-for-windows/git/issues.\n. Thank you for your contribution!\nFirst of all, you might want to have a look at Git for Windows 2.x instead, which supersedes and retired Git for Windows 1.x (which is why I close this ticket here).\nThere are a couple of other issues to be addressed before contributing this change to Git for Windows 2.x' mingw-w64-git package, though: while the commit message is technically correct, both its format and its content do not conform to our suggestions.\nI would appreciate at least the following changes to be made:\n- re-wrap the lines at 76 characters per row or less,\n- re-format in plain text (as opposed to Markdown),\n- sign off on the commit,\n- describe why and what, not the how (except the parts that cannot easily be seen from looking at the diff),\n- in particular describe the intended use case, preferably as a step-by-step guide.\nThanks! \n. You almost certainly did not switch msysgit to 2.7.0.\nAnd yes, you can disable that behavior by deleting the following lines in /etc/profile.d/env.sh:\n``` sh\nAllow SSH to ask via GUI if the terminal is not usable\ntest -n \"$SSH_ASKPASS\" || {\n        case \"$MSYSTEM\" in\n        MINGW64)\n                export DISPLAY=needs-to-be-defined\n                export SSH_ASKPASS=/mingw64/libexec/git-core/git-gui--askpass\n                ;;\n        MINGW32)\n                export DISPLAY=needs-to-be-defined\n                export SSH_ASKPASS=/mingw32/libexec/git-core/git-gui--askpass\n                ;;\n        esac\n}\n```\nPlease note also that this bug tracker is\n1. obsolete because msysgit is obsolete\n2. intended for bugs, not for requests for help (the mailing list is the appropriate forum)\n. Please also note while it is much, much easier for you to simply paste an animated GIF, it makes it much, much more difficult for everybody else to follow what is going wrong than a clearly written bug report.\n. 1. This project is no longer maintained, but has been superseded by Git for Windows 2.x\n2. This is not a bug report, but a request for assistance. Further, it is not at all specific to Windows. As such, you need to send this to the Git mailing list.\n. > The email cant send success.\nMaybe you need to get an email address that looks less like a spammer to the Git mailing list administrators.\n. This is obviously the wrong bug tracker. msysgit is not only retired, it also is the development environment to develop Git for Windows 1.x. Not Git for Windows. The development environment to build it.\nBesides, the issue described here is more like a request for assistance, not a bug report. It would be much better to send these questions to one of the mailing lists/forums listed at https://git-scm.com/community.\n. Bummer! I did not even look for local blocks, my bad. But you made me aware of another issue: should HOME not be set before line 61 so that ssh-add accesses the correct directory?\n. Good idea!\n. ",
    "subtleGradient": "You're welcome! ^_^\nYeah, a co-worker of mine reported that error to me and I had no clue how to begin debugging that. But I figured I'd at least start a thread. I assumed that if someone actually did understand what on earth that meant they might add a comment or something.\nThanks!\n. ",
    "msysgit": "In the future, you might want to read the homepage of msysGit to find out where to report bugs, actually.\n. ",
    "kusma": "Thanks for the effort, but we generally use the mailing list for such requests, not GitHub. Would you mind posting the series there instead, so it can get the proper code-review?\n. In addition to breaking Windows XP setups, a change like this will also break standard Windows 7 setups, because mklink requires administrator privileges by default. This can be fixed by checking if it worked or not, and reverting to copying in such cases.\nJust for the record: I played around a bit with trying to make symlink support in Git for Windows itself recently, but ended up concluding that the \"symlink support\" in Windows 7 and up is pretty close to useless for emulating Unix symlinks.\n. Unfortunately, normal users doesn't have the required permissions to create symlinks by default on Windows. Combine this with the fact that you cannot change what a symlink points to in the same way that POSIX requires, makes them more or less useless for us. This I already wrote above.\nNow, the authors can claim all they want that this is \"100% compatible\" for all I care, but a quick look at the source code reveals that it's not. They do not provide any fallbacks, they don't even load the CreateSymbolicLink function dynamically. So the result on non-symlink capable Windows versions will be a crash with a missing symbol error.\n. That would be --large-address-aware. Looking through what I can find of docs, it seems reasonable to try to enable it, but I'm not entirely sure we actually ARE large address aware. Types like ssize_t might not always be sufficiently large anymore.\nI suggest you try it out and see if it fixes your problem.\nBut the better solution in the long term would certainly be to provide a 64-bit binary.\n. Just curious: what's the big argument for keeping everything in one installer rather than having two?\n. I have one (probably unfounded) worry about a fat installer: It might make it more difficult to track down issues with the 32-bit version on a 64-bit system unless we make installing the 32-bit version on 64-bit systems an option. But that might make the installer overly chatty for the average user.\n. While reverting the patch might very well be the solution, it seems that something out of the ordinary is going on here. I just wrote a small test-program that prints argv[0], compiled it to a.exe, set up a symlink to a.exe called b.exe, and executed b.exe. It printed \"b.exe\" when invoked through the symlink, and \"a.exe\" when not.\nCould it be that CopSSH somehow tries to resolve symlinks themselves or something?\n. @sschuberth and I was deliberately closing it, because we can re-open it if it turns out there actually IS a problem. I don't think there is.\n. The recipe from issue #49 doesn't reproduce for me. I'm assuming this means it's fixed now.\n@pquerna can you please download the msysgit netinstaller (http://code.google.com/p/msysgit/downloads/list?q=net+installer) and verify that it is fixed for you as well?\n. Never mind. This wasn't even a Windows specific bug: http://article.gmane.org/gmane.comp.version-control.git/201043\n. This also doesn't reproduce for me with the current 'devel'. So this problem is probably fixed since 1.7.11.msysgit.1 was released, but we haven't made a new release since then.\n. @drewnoakes download the msysGit (msysGit-netinstall-1.7.11-preview20120620.exe) and build the most recent version. Then you can either simply use that instead of Git for Windows, or you could build a Git for Windows installer for the newly build versions yourself (read /share/WinGit/HowToRelease.txt for instructions).\nI personally do the first; run directly from the development environment.\n. The point is that this is an issue tracker, not a discussion forum. Having off-topic discussions on an issue tracker only makes it more difficult for other people to extract the relevant information, so please let's move the discussion. Even just to a new issue would be helpful.\nWe don't have a (Windows) CI server because we don't have a budget, and nobody donated/sponsored one. If you would like to sponsor one, that would be great!\nBut please keep in mind that there isn't really such a thing as \"the core msysgit team\"; we are completely volunteer driven, and many of those who contributed in the past no longer has the time. I someone wants something done, he usually either has to do it, or convince someone else to.\nAs for this particular issue, I would suspect that @dscho would be interested if we were able to build and run on a Windows-machine via some CI system; he already set up some CI magic for Linux (to make sure our changes doesn't break the Linux build, more or less), perhaps he'd be interested in this as well?\n. Unfortunately, wmain isn't supported on MinGW, so we'd have to use the GetCommandLineW-approach. This is what we did for git.exe as well.\nedit: Actually, we use __wgetmainargs. But it's more or less the same thing.\n. The OP is aparently back. Please, PLEASE OP, try what hvoigt is suggesting.\n. We cannot reproduce this, because we don't have the credentials for thenicespider@git.drupal.org, and it doesn't seem to fail for me with the credential-less URL git://git.drupal.org/project/counter.git\n. Thanks. I've reopened issue #22.\n. Git for Windows doesn't link against Cygwin.\n. Not quite. Git for Windows ships as a native Windows program. But we do ship a MSYS (a Cygwin fork) environment with it. However, git.exe is not an MSYS binary, and does not link to the MSYS-runtime.\n. Could we use aliases for bash, and replicate the git-wrapper for cmd instead of replicating the big exe-file, perhaps?\n. You're right, that's probably simply the easiest solution.\n. Why are people trying to reinvent the wheel here? We already have a git-wrapper for cmd.exe, and it's tiny. In every case where replacing the hardlink with a bat-file, we can just hardlink (or in the case of portableGit, copy) the wrapper instead, no?\nBut in order to get rid of the hardlinks from the distribution, we'd need a solution for bash also. Perhaps aliases will do, as I proposed a long time ago?\n. @sschuberth to prevent breaking scripts. @dscho already explained that even scripts in git.git call the dashed versions, and that for performance reasons that's probably a good thing. So I think removing the support for the dashed-versions might be a mistake.\n. This isn't a Windows specific issue. Please report upstream instead.\n. Then again, how can you use git to solve the problem if git is already broken?\nHave a second, non-broken git installation, that's how.\n. Thanks, looks good to me.\n. That patch doesn't enable it, though. But I guess that's better left as a decision for the user?\n. Is this pull request for the wrong project again?\n. This has already been fixed upstream, but since it's difficult to create a new installer without having it installed in the first place, I've uploaded a build here: http://dl.dropbox.com/u/1737924/msysGit-netinstall-kusmatest.exe\n. The issue has already been reported upstream AFAIR, and I even think there's an upstream fix. But I might be mistaken.\n. Is there a good reason why GitHub for Windows needs a different credentials manager than Git for Windows?\n. Sounds to me like you're abusing the credential manager for providing a UI for the logon-dialog. Not quite how this was designed to work, but fair enough, thanks for clarifying.\n. @xpaulbettsx Ah, right. Thanks again for further clarification. However, I don't think Github for Windows really needs it's own credentials-manager for that; GitHub for Windows could simply call up the normal credential-manager, asking it to save the credentials when the user logs in. Then the end-users would also benefit from being able to smoothly use the same credentials from the command-line without having to re-input them.\n. I suggested a patch for this back in 2010, but we couldn't agree on it back then: https://groups.google.com/d/msg/msysgit/EIte82yKOIo/vonruGjvvX0J\n. @zachriggle No, they are not, at least not in Visual Studio 2008.\n. Looks good to me too.\n. Good point. I would say that it's better to lose colors in rxvt by default (which seems to be rare) than to keep ASCII code in ls-pipes, so I say rxvt user have to deal with rxvt-isms on their own.\n. We're not an AWK distribution, we just happen to depend on AWK, and this old one suffices. We usually don't mind including newer versions if someone does the work to provide them (in the form of a script that builds it from source). So if you want a new AWK: patches welcome.\nMy guess is that it comes from MSYS. We have the sources for MSYS in the 'msys'-branch, but I didn't verify that.\n. Totally agree with @t-b, I don't think this is something that we're going to want fix.\n. As an added note: this is not a Windows specific topic, so please direct any further questions to the main Git mailing list instead.\n. Won't this have the down-side of slowing the prompt down even further? It's already pretty slow as is...\n. So now you're keeping all the work in the main shell? Great solution! Could you resubmit as a pull-request?\n. There's already a  'python'-branch (https://github.com/msysgit/msysgit/tree/python) that tries to build python from source.\n. @nickvergessen See @dscho's answer.\n. Feel free to submit a pull-request.\n. Actually, looking a bit at this, it seems we can just drop 4804aabc, as 3b9b1163 accomplishes the same thing, seemingly in a way that is more in line with what other platforms do.\n. @t-b: Git for Windows ships with a unix shell for exactly these purposes. We already depend on a unix shell for tools like merge, rebase, am, stash, pull and bisect.\nOf course, it would be beneficial in the long run to get rid of this shell-dependency, but I don't think this is the right approach for that. Rewriting git-web--browse.sh in C would be a better move IMO. But ever getting rid of the shell-dependency is kinda unlikely at this point.\n. It's there on Linux as well. However, I can't reproduce this on Git 1.8.4 / Git GUI 0.18 on Windows 7 nor on Git 1.8.3 / Git GUI 0.16 on Fedora Core 19.\n. Actually, it seems the report missed a crucial detail; Git GUI cannot clone empty remote repos. But I can reproduce this issue on both Windows and Linux, so please take this upstream instead.\n. Hmm, this is a duplicate of #75, no?\n. @Olivier07: The problem will only be corrected if someone who is affected cares enough to work on it. If you're not interested in working on it, I would say the chances are slim.\n. This looks good to me.\n. Please read https://github.com/msysgit/msysgit/wiki/Using-git-send-email\n. This isn't a windows-specific request, so please take it upstream.\n. awesome!\n. I think we already have a bunch of WinXP requirements in git core. Win2k is long past end-of-life.\n. @bulk88: You're going to face issues with Win2k with git.exe sooner or later. Win2k isn't supported.\n. Looks like push is trying to start send-pack with a too long cmdline. On Windows, the limit is something along 32k characters. I guess someone should write code to pass the refs over stdin instead, or something along those lines.\n. > > you have what it takes to make it so.\n\nNot always true. A web developer that uses GIT may not have the domain knowledge necessary to contribute to it, for example. Yours is the same old \"I don't give a damn\" response you get from many open source projects.\n\nI really don't get what you're objecting to here. This isn't a problem fundamental to Git for Windows, it'll happen on any platform given enough tags. So it's not really appropriate for Git for Windows. But even if it was unique to Git for Windows, how would that change anything? We don't have a horde of developers ready to scratch everyone else's little itch. This issue has a known work-around, but if you want everything neatly fixed, you're seem to have to be the one to do it (even if that requires you to learn another programming language) - nobody else seems to care enough to do it. This isn't a free feature machine, we work on things on our own incentives.\n. Well, that would be an OK-ish cleanup, I guess. But it's not wrong as-is, since it sets up hard-links a bit earlier in the script...\n. It was dropped, as it's not really useful. Developers contributing to Git for Windows are assumed to have an internet connection these days. End-users should use Git for Windows rather than msysGit (which is the development environment used to build Git for Windows).\n. Nope, this is not a bug. On Windows, a file name cannot end with a dot.\n. @t-b: Nice, I was not aware!\n. Yeah, duplicate of #162.\n. This isn't a bug, Git does exactly what you told it to.\nGit operates on text-files with LF newlines. If you instructed it to not be helpful and make sure all files adhere to that requirement, don't be surprised that it doesn't.\n. @AlterDepp: You can use .gitattributes to specify what eol-style specific file needs to be checked out with, yet still keep all the files with LF in the repository.\n. I meant to say that you could reenable core.autocrlf (and fix the line-endings in your repo) by using gitattributes to control line-ending styles.\n. \"Thus solving the problem once and for all!\"\nWhile this is an OK stop-gap, it also makes me cringe a bit.\n. Yeah, indeed.\n. ...or maybe we should use Notepad, which comes with Windows and is the default text-editor?\n. Shouldn't we just sanitize our newlines? Otherwise, Wordpad does handle LF, and it ships with Windows as well.\n. Just as a proof of concept, we could use notepad for commit if we didn't do \"_fmode = _O_BINARY;\" in mingw_startup:\n``` patch\ndiff --git a/builtin/commit.c b/builtin/commit.c\nindex 3b0d7fd..aff4701 100644\n--- a/builtin/commit.c\n+++ b/builtin/commit.c\n@@ -701,7 +701,7 @@ static int prepare_to_commit(const char index_file, const char prefix,\n        hook_arg2 = \"\";\n    }\n\ns->fp = fopen(git_path(commit_editmsg), \"w\");\ns->fp = fopen(git_path(commit_editmsg), \"wt\");\n    if (s->fp == NULL)\n        die_errno(_(\"could not open '%s'\"), git_path(commit_editmsg));\n\n```\nWhit this patch, I can set EDITOR to \"notepad\" and commit without problems.\n. @ctrueden @dscho All good points - I agree, neither Notepad nor Wordpad will do the job.\n. @ctrueden I don't think writing the commit message as CRLF to disk should cause problems for vim etc; those handle CRLF just fine on Windows. If not, they would instantly disqualify as suitable editors; CRLF is the EOL-style on Windows.\n. duplicate of https://github.com/msysgit/git/issues/24\n. Long path support is in 1.9.4 already, but you need to enable it with the core.longpaths configuration switch.\n. This is not a problem unique to Git for Windows, I get the same error on Linux. Please report it upstreams instead.\n. I can reproduce this, thanks for reporting.\n. The crash seems to occur in wt-status.c:608, but with a bogus call-stack :/\n. OK, so some hacking shows that the issue is inside compat/win32/dirent.c...\nThe following patch makes \"git status\" pass here, so there's some unbounded code, it seems:\n``` patch\ndiff --git a/compat/win32/dirent.c b/compat/win32/dirent.c\nindex 8cf96ff..2f2089a 100644\n--- a/compat/win32/dirent.c\n+++ b/compat/win32/dirent.c\n@@ -1,5 +1,8 @@\n #include \"../../git-compat-util.h\"\n+#undef MAX_PATH\n+#define MAX_PATH 4096\n+\n typedef struct dirent_DIR {\n    struct DIR base_dir;  / extend base struct DIR /\n    struct dirent dd_dir; / includes d_type /\n```\n. I have not, thanks for pointing me in that direction.\nMy patch was not at all intended to fix the problem, only to show that something strange was up in dirent.c ;)\n. The version in maint-1.9 fixes the problem, indeed.\n. Aaand now I can't delete the test-case directory, since none of my tools support long paths. Yuck, this option needs to stay off (and node.js away from my system).\n. OK, seems 7-zip's file manager supports deleting long paths. But yuck.\n. please take questions to the mailing list rather than the issue tracker\n. It has been discussed before, but I don't think we ever reached a consensus. I would personally be in support of this, as it makes git-bash more UNIX-y than Windows-y, which AFAIK is its goal in the first place. But I don't think everyone agrees with me.\n. We still ship PortableGit here: https://github.com/msysgit/msysgit/releases\n. The environment variable LANG controls the language for Gitk. How this works isn't unique to Windows, so if you'd like a nicer way of choosing languages, you have to take the question to the upstream-community: http://git-scm.com/community\n. Yeah, this happened in @kblees' Windows XP fix, as I already pointed out here: https://groups.google.com/d/msg/msysgit/YVuCqmwwRyY/HULHj5OoE88J\nI wonder if reverting it is the sane thing to do, as Windows XP is EOL...\n. By the way, your speculation is entirely correct, multiple '@' symbols makes the credential-helper mess up. I guess some proper encoding is needed, unless we're going back to using attributes to store these things.\n. Yeah, that would solve the problem. Patches welcome.\n. \nFWIW, it also looks strange here (before any patch is applied)\n. Windows 8.1\n. @sschuberth Unfortunately, I don't have time to try out the patch this week.\n. Already fixed: https://github.com/msysgit/git/commit/8439375065bebbc6ba6850cf164c9b206efe4676\n. Yep, duplicate.\n. I don't understand, we did this work a long time ago... My installation of Git for Windows contains C:\\Program Files (x86)\\Git\\libexec\\git-core\\git-credential-wincred.exe.\nFurther, we have this to build it:\nhttps://github.com/msysgit/msysgit/blob/master/share/WinGit/release.sh#L84\nAnd this should copy it to the installer:\nhttps://github.com/msysgit/msysgit/blob/master/share/WinGit/copy-files.sh#L40\nThe only thing lacking is enabling it by default, which I'm skeptical to. If anything, this should be an install-time decision, not a global default.\nIn other words, I think things are OK as-is, no need for this patch. But perhaps the feature deserves better discoverability? \n. I think I'm just going to say: Nack.\n. ",
    "sschuberth": "Let's put the GitHub vs. mailing list issues aside, for now we agreed to accept contributions both ways.\nHowever, I'm wondering what the benefit of this series actually is. IIRC we have Perl 5.8.8 since 2c1f173 (which was in 2008). But I'd like to see Perl 5.10 in MSYS, as that's the version currently required by Qt's init-repository script. Unfortunately, Perl 5.10 is not yet available upstream.\n. Some misc. comments from my side as I feel some terms are mixed up here:\n-   There are three types of file system links on Windows: hardlinks, junctions, and symlinks. Hardlinks and junctions are available since NT. Hardlinks can only point to files, junctions only to directories (on the same volume). The symlinks available since Vista can point to either files or directories, also on different volumes.\n- mklink, which ships since Vista, can create all of the above. But the way it is called in the script makes it only create symlinks (which is good, IMHO, as they most closely resemble Linux symbolic links).\n- For pre-Vista, we'd need a fallback that either creates hardlinks for files using \"fsutil hardlink\" (but probably only if \"ln\" is called without \"-s\") and creates junctions for directories using \"fsutils reparsepoint\", or simply calls the original ln.exe.\n. For reference, here's another link to a utility called winln (I'm not suggesting to use it, though, as I've not tried it).\n. Your commit message reads to me as if you're staying with version 1.2.6 and simply get it from another mirror, while you're in fact using version 1.2.7 instead. I'd expect the commit message to be more clear on this, and also to include a statement whether everything still compiles / runs fine with zlib 1.2.7.\n. That's quite strange as /share/WinGit/release.sh just calls /src/mingw-w64/release-easy.sh. Are you sure that you did not just suffer from a temporary network problem that was gone by the time you ran /src/mingw-w64/release-easy.sh manually? Please try again running /share/WinGit/release.sh (after removing the existing ZIP archive), and if the ZIP archive still is only a few bytes, look at it using a text editor and copy the contents here (if it is text; I assume it would be some HTTP error message).\n. I know I'm picky, but please consistently use or not use spaces around \"+\". As we're usually not using them, please remove them also in your patch. Otherwise it looks fine to me.\n. @hvoigt The Inno Setup installer executable itself will always be 32-bit, but it supports to install either 32- or 64-bit executables of an application depending on the target OS. So yes, it's easily possible to combine them into one installer. As to what MS recommends, that would probably be to use MSI instead of Inno Setup. But AFAIK MSI does not (yet) support to combine 32- and 64-bit executable into a single installer.\nIf it does not enlarge our installer too much I'd vote for a single combined installer, simply to not confuse our users with yet more options what to download.\n. @hvoigt For an example how to do that see https://github.com/jrsoftware/issrc/blob/master/Examples/64BitTwoArch.iss\n@kusma Being able to install the 32-bit version on a 64-bit system could be enabled by a command line switch to the installer so that the GUI will not get overloaded.\n. Fixed in https://github.com/msysgit/git/commit/df573d9ca61c0e01c33de68838bd2842e26c4a76.\n. AFAIK there should not be any application-level support for symbolic links necessary, they should be completely transparent to the application.\nMoreover, if the installer cannot create symbolic links it falls back to creating hard links before trying copies. On your XP machine, please check whether you are having hard links or real copies. Unfortunately, Windows Explorer has no way of telling you this by default. I highly recommend installing [1] which gives you overlay icons for hard links / symbolic links and also some information in the file's properties dialog.\nAnother option to check whether hard link are used would be to re-run the installer on your XP machine as \"Git-1.7.10-preview20120409.exe /log c:\\git.log\" and look at the log file for messages like \"Creating symbolic link  failed, will try a hard link\" but no messages like \"Creating hardlink  failed, will try a copy\".\nIf it turns out that you in fact have hard links in place, and CopSSH can deal with them but not with symbolic links, I have no problem with dropping symbolic links in favor of hard links on Vista and above as they only give little benefit over symbolic links.\n[1] http://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.html\n. Thanks for testing. If there are no objections to remove symbolic link support, I'll some up with a patch that removes it from the installer in favor using hard links if available, and copies of not.\n. @pleriche Also thanks from my side for the Wiki entry.\nAs I see it, we have 3 options to fix this:\n1) Completely remove Symlinks in favor of Hardlinks form the installer.\n2) Add a command line option to the installer (\"/nosymlinks\") to force falling back to Hardlinks.\n3) Always hardlink upload-pack and receive-pack as Dscho suggested.\nWhile 2) is a flexible solution, its drawback is that is has to be documented. I don't like 3) as it adds magic to the installer. Both 2) and 3) slightly increase the installer's complexity. So I'd vote for 1) as it\na) removes complexity from the installer,\nb) Symlinks can be created by Admins only,\nc) Symlinks have very limited advantages over Hardlinks in our case. \n. Fixed in da509c407c83f7ab781db10b895652f2108f506f by not trying to create Symbolic Links anymore, effectively falling back to Hardlinks. Dscho's suggestion number 4) may be additionally implemented in a future commit.\n. If you don't want to hack on msysGit itself, but just use Git for Windows, then you're downloading the wrong installer. I think the page at http://msysgit.github.com/ makes the difference between \"Git for Windows\" and \"msysGit\" pretty clear. If you're feeling otherwise, please make some suggestions on how to improve it.\nLong story short, you probably want one of these installers: http://code.google.com/p/msysgit/downloads/list?q=full+installer+official+git\n. @kusma I was deliberately leaving this issue open until the reporter confirms that our wording on the homepage it clear enough on what to download.\n. @kusma Anticipating the reporter's answer instead of just being patient and waiting a little bit for it is not a good issue tracking work flow, IMHO. Only if there was no response after a reasonable amount of time (say, a week) I'd close the issue to avoid confusing close-reopen cycles.\n. I decided to focus on the mingwGitDenEnv project for the time being, which will eventually have its own download page anyway.\n. Upstream Git 1.7.11 did some improvements to the Bash completion script:\n- Bash completion script (in contrib/) have been cleaned up to make\n  future work on it simpler.\nPlease check whether the issue still persists with Git-1.7.11-preview20120620.exe.\n. Please see https://github.com/msysgit/msysgit/issues/16#issuecomment-6055247 for why I don't think this is a nice solution.\n. Thanks for your work, but I still decided to go the way to switch off Symbolic Links completely (see da509c407c83f7ab781db10b895652f2108f506f).\n. As we have removed the \"msys-1.0.dll is out-of-date\" check completely I'm adjust this issue's title to make clear that this error message was only one specific incarnation of the underlying shadow copy problem.\n. I don't think that we broke something by removing the check. You're most likely just suffering from this very issue: You're not getting the updated etc/profile with has the check removed, and you're also not getting the updated msys-1.0.dll, but you're getting both files from the VirtualStore.\n. Is this the VirtualStore of the user who ran the installer? I'm not exactly sure how the VirtualStore works. If you ran the installer as a different user, e.g. as Administrator via UAC elevation, the files might be in the Administrator's VirtualStore.\n. @orefalo I also do not have a VirtualStore in my Win7 64-bit, but I guess that's because I've disabeld UAC altogether. Maybe you did the same in your 32-bit VM?\n. According to this post files installed by Inno Setup should never get redirected to VirtualStore. So I'm really wondering where these files come from then.\n@orefalo Did you manage to find out which version of Git for Windows the msys-1.0.dll from your VirtualStore belongs to? I'm curious if that's a version where we've used a different setting than the current PrivilegesRequired=none in the installer.\n. I tend to agree. Maybe a safe choice would be to not delete the VirtualStore completely, because as Pat says this would potentially remove files that the user added, but to delete only those files from the VirtualStore that the installer would overwrite in the installation directory.\n. @orefalo I've added this to the installer now. Please test this installer, and probably review the commit referenced above.\n. Cherry-picking just your second commit will not suffice as it depends on your first commit. Please squash these two commits into one (using \"git rebase -i HEAD~2\").\n. Yes, as your branch in not merged yet it's fine to rebase and force-push it.\n. AFAIK this pull request will update automatically if you force-push your rebased branch, so there's no need to file a new pull request.\n. Not necessarily, as we also offer \"Git for Windows\" on that page for download. Anyway, I was hoping to soon find the time to adapt to the new Git logo as shown at the top of [1].\n[1] http://git-scm.com/\n. @patrik-gornicz FYI, all the issues you had while trying to build OpenSSH are (to be) addressed by the mingwGitDevEnv project. Most notably, thanks to @t-b, we now have a current version of OpenSSH incl. HPN-SSH patches there. So maybe it would make sense for msysgit to just take what we already have in mingwGitDevEnv, or in the best case get more people involved in mingwGitDevEnv so that it can replace msysgit in the mid term.\n. And I'm sick of people who do not appreciate the work of others, but just use it without giving anything back, and being offensive on top of it. If you'd like to have OpenSSH updated, go ahead and do so as described in dscho's comment. Alternatively, see my comment about the mingwGitDevEnv project.\n. Well, I just checked, and http://git-scm.com/ does not offer Git for Windows 1.7.12 yet. Which would have surprised me as we did not release it yet.\n. Again, there is no version 1.7.12 yet of Git for Windows. The main download page still is at Google Code including the latest release (\"preview20120710\"). However, I will mirror these at our fork of Git now.\n. Thanks. I'm currently not on a Windows machine, so I cannot test the installer. Have you built and tested it, verified that your changes work as expected and do not break anything?\n. This SO post sums up quite nicely what the problem is:\n\"The reason for this is that the shell special characters ^ and > are interpreted by the command shell at two levels, first on the command line and second inside the CMD script.\"\nWhile we can fix the second issue using delayed expansion inside of the batch file (see the top voted answer on SO), that would not get us around the need to quote the arguments on the command line in the call to git.cmd. The top answer also suggests another approach that is supposed to work around the quoting need, but it is rather complex and involves writing to a temporary file.\n. I was also thinking about replacing git.cmd / gitk.cmd with native executables. This would be the cleanest solution IMHO, but also the one involving the most work.\n. @patthoyts You're right, adding a native executable wrapper would only get us around the escaping in the CMD file, not around the one done by CMD. So if we can only solve the one issue anyway, I'd vote for using delayed expansion inside of the batch file instead of the native wrapper, just for simplicity.\n@kohsuke To work around the CMD escaping issue, would it be OK for you to quote strings containing ^ in the call to Git on Windows on the Jenkins side?\n. @patthoyts Great stuff about the git.cmd patch! So my understanding is that with your patched git.cmd also this should work:\nC:\\src\\msysgit>cmd\\git rev-parse \"Git-1.7.11-preview20120620^{commit}\"\nIs that correct?\n. @patthoyts Well, now that you have the C-wrapper already done I'd say we should save our time thinking about a hack for git.cmd and simply use your git.exe! :-)\n. Sure we could start Bash without using a VBS file. If you look at the commit that introduced Git Bash.vbs you'll see that we've used a command line very similar to yours originally. But there are two problems with this approach:\n1. You'll see a cmd.exe window flashing up before sh.exe's window appears.\n2. We get a generic icon in the sh.exe window's title bar instead of the Git icon.\nSee the above's commit message for details. So, sorry, but that does not seem to be an improvement to me ;-)\n. Yes, this has already been fixed by Pat. As we already have a ticket for upstream, I'm closing this one.\n. Works fine here:\n$ git help commit\nLaunching default browser to display HTML ...\n$ git --version\ngit version 1.9.0.msysgit.0\n. That's not supported, simply because we do not ship man.\n. @stevenkling So if you want this, you could help by\n1) reviewing the code,\n2) applying it to your local clone,\n3) building Git for Windows and verify that it works as expected,\n4) report back here.\n. @Siarhei-Yarkavy There currently is no released version which contains this fix. We are waiting for a few more days to see if more issues arise before we do another maintenance release.\n. The fix for this particular issue regarding the git wrapper is indeed included in Git-1.7.11-preview20120710.exe. If you still see Git returning an invalid exit code for some operation it is a different issue. Please create a new report in that case.\n. Yeah, I know about the white background for the 256-color icons. The problem is that 256-color icons can only have binary transparency, and using binary transparency makes the new icon look really bad when they are rasterized from the original vector graphic. So I decided to go with a white background for now. Maybe I can come up with something based on git-scm.com's favicon.\nIn the meantine, can you check why Windows XP is picking up the 256-colors icons instead of the true-color icons? I thought true-color icons are supported since Windows XP.\nEdit: For reference, Windows XP supports 32-bit icons, which are 24-bit images with an 8-bit alpha channel.\n. Ok, so I've sent a patch about \"gitk title bar icon is unchanged\" upstream. But can you elaborate what you mean with \"git gui title bar icon is unreadable\"?\n. Thanks for the screenshot. Under which exact version of Windows did you take it?\n. I'm on Win 7 64-bit myself, so everything should be fine there as that's my testing platform. Win XP 64-bit would be interesting, though. I'd expect it to behave like Win XP 32-bit regarding the icons.\n. As you can see here, \"FileName\" is the path to the icon, which uses \"AppDir\", which in turn equals ExpandConstant('{app}'), so everything seems to be correct as we're always using the path Git is installed to. Please make sure that your desktop icon is not a left-over or something.\n. For people using less than 32-bit colors for their display, the 8-bit icons now have binary transparency instead of a white background. Although this makes the logo's edges look a little rough it seems people prefer a transparent background over anti-aliasing.\n. Duplicate of issue #43. Please search issues (also closed ones) before reporting new issues.\n. @FallenGameR I can see the point about making the wrapper completely transparent and not report any \"meta errors\". However, as you probably are in a better position to test any fixes than we are, I'd like to ask you to create a patch and send a pull request. That also explains better than any words what you mean ;-)\n. This is basically what the mingwGitDevEnv tries to do (see the TODOs in the README file). Even more, the project aims to base the whole Git for Windows environment on packages installed via mingw-get.\n. @ryenus You know, I'm the project owner of the mingwGitDevEnv project. I took the initiative creating it in the hope that later people would join to improve it. People like you who see the value of the project. I got quite a lot of feedback telling me that the project is exactly to way to go, but so far no one except me has contributed. If people just point fingers and say \"Hey, that projects seems inactive\" it will never become more active.\n. A package description file that can be used to install git via mingw-get is now available at:\nhttps://github.com/sschuberth/mingwGitDevEnv/blob/master/root/packages/mingw32-git.xml\nFor any further issues please head to the mingwGitDevEnv project.\n. No thanks. I'd prefer automatically generated mails to go a separate list, not to a list where also discussion takes place.\n. @dscho In 9d6e6031e2d1c9c8908e2a161d68d6decb505304 you have replaced v4.65 with a modified version of v4.49 beta. What modifications that we need does this version offer over the vanilla 7zSD.sfx?\n. Ah, was looking at the History of changes, which only lists \"1.2 RC1 (build 715) July 14, 2007\" as the latest version. I did not realize until now that there is in fact more recent version for download. I'll update to a recent version soon.\n. I've just updated the 7-Zip stuff on the \"devel\" branch.\n. We are using 7za.exe from the extra package, which is why I've added history-extra.txt and readme-extra.txt. I've removed the unused 7zS.sfx module, though.\nPlease submit a patch for LZMA2 support after testing that it works. I'm currently not in a position to test the built installers.\n. @XhmikosR Thanks for checking, so let's keep things as-is for now.\n@dscho I was not talking about modification that you made to 7zSD.sfx, but I was wondering why you were using the modified version of 7zSD.sfx as opposed to the vanilla version at all. In your commit message you did not explain what feature in particular of the modified 7zSD.sfx we depend upon. Anyway, as the modified version of 7zSD.sfx is still maintained there is no need to fall back to the vanilla version and my question became irrelevant :-)\n. @dscho Ah, that's good to know for reference, thanks!\n. Duplicate of issue #40. This is fixed in the most recent version.\n. What aberumen said. If you are looking for a Git development environment (i.e. an environment to compile Git itself from sources) that integrates well with vanilla MSYS / mingw-get, please take a look at the mingwGitDevEnv project.\n. The msysgit project has been superseded by the Git for Windows project, you can get the new SDK from here and the new client from here. There are no plans to continue maintaining the msysgit project.\n. Confirmed. This seems to be yet another MSYS path mangling issue due to TortoiseMerge requiring the rather uncommon \":\" to separate the command line switch from the file name. I proposed a work-around in the above TortoiseGit issue.\n. @csware Any chance to implement what I've suggested here?\n. @csware Why does adding an alternate syntax break anything? I'm not suggesting to replace \":\" by \"=\", but to accept it in addition.\n. Personally, I'd like to wait for Inno Setup 5.5.3 to be released before we release Git for Windows 1.8.1.1. Sure, unforeseen side effects are always possible, but you were saying that \"this breaks our/the tsvn cli parameter parser\" (in any case), which is a totally different statement.\n. You need to do more than that, which is why I said that we would require \"changes in both TortoiseGit/Merge and msysgit\". IIRC, you need to either use \"-base\" or \"//base\" (same for the other command line options to TortoiseGitMerge, of course).\n. @csware Yes, I'd appreciate if you could prepare a patch for upstream Git. However, I think we should not patch the existing tortoisemerge script but introduce a new tortoisegitmerge script that accounts for both the tool name change and the command line change. Otherwise people would not be able to use the tortoisemerge script with older versions of TortoiseGit (or with TortoiseMerge from TortoiseSVN for that matter), and we would probably be asked by upstream to add some kind of version check to the tortoisemerge script. To avoid all that, I'd suggest to just duplicate the script and adapt it.\nAlso, please but me on CC for your patch in any case.\n. @csware Can you please post an URL to a patched TortoiseGitMerge.exe that supports \"=\" in addition to \":\"? I'd like to do some testing myself.\n. @csware Thanks, but that archive unfortunately is missing libapr_tgitmerge.dll (and probably other dependencies). Would you mind adding them?\n. @csware I cannot get it to work either, neither using \":\" nor \"=\". But it seems it would work if TortoiseGitMerge supported \" \" (a space) to separate \"-base\" from \"filename\".\n. The fix is in upstream Git 1.8.2 which was released recently. I'll leave this open until we do the rebasing merge and the 1.8.2 release for Windows.\n. The fix is in the released Git for Windows 1.8.3 (we skipped 1.8.2 on Windows).\n. @ernes32 You should be able to just manually delete the git-*.exe hardlinks (or copies, in case of your FAT32 file system). Those files are just there for backward-compatibility so you can use both git add and git-add, for example. So we don't have \"those hardlinks instead of parameters to git.exe\" but in addition to command arguments to git.exe.\n. Although that would probably work, why not drop git-*.exe from the portable version completely? I don't know a single person that's using the old-fashioned dash-style commands like git-add instead of git add.\n. @dscho Why is calling the dashed form faster for shell scripts? Ah, right, I guess you are referring to those cases where the git command is still implemented as a script instead of a native executable, and git.exe just spawns the script. For all other cases where the git command is executed as a native executable calling the dashed vs. non-dashed form makes no difference. Right?\n. In the context of the mingwGitDevEnv project I'm planning to work on a fix for upstream to address this. Basically, we first need to make all docs and scripts refer to the \"non-dashed\" version of the commands. Additionally, some more work is required to make git help -a work (see the related comments in this mingwGitDevEnv pull request). Then all built-in dashed commands could be removed.\nI'm reopening this as a reminder for myself :-)\n. We strive to do cross-platform coding, i.e. changes that would get accepted in upstream Git. Adding a huge number of batch files certainly is not very cross-platform friendly. Moreover, batch files to not currently execute out-of-the-box under Git Bash.\nSo I'd still prefer to get rid of the deprecated dashed version of the commands altogether, if possible.\n. @SchizoDuckie If you'd care to read through the other pull request I was linking about you'd see that it's not done by simple replacing \"git-\" with \"git \". Also, submitting a pull request to the msysgit project is not helping much, such a change should ideally go upstream to git/git. But as noted on their GitHub project page, they don't accept pull requests. Instead, patches should be submitted to them this way. And they have high standards regarding code quality and portability. So I guess you see by now that this is not as simple as you might have thought initially.\n. See this patch against the Makefile for how I omit creating the hardlinks in the mingwGitDevEnv project.\n. I thought you're looking for the place in the Makefile where the hardlinks are created. That's happening exactly at the place I've pointed you to. I'm sure about this because the mingwGitDevEnv project simply does not ship with any any executables for built-in commands, exactly to avoid the hardlink confusion that we're seeing with msysgit.\n. Why do we try so hard to make the builtins work after all? Even upstream Git is discouraging the use of e.g. git-add in favor of git add, so IMHO we should rather work on making everything work smoothly if we don't ship any kind of git-add hardlink / alias / wrapper / batch file whatever, and then simply get rid of the builtins like in mingwGitDevEnv.\n. No, because there is no sftp remote helper in Git. You probably mean ftps, although that's rather uncommon.\n. @Leont How can the fix by @csware be in msysgit already if there is not even a Perl release including it yet? I guess what @csware meant is that we should backport the upstream patch to whatever Perl version we upgrade to in msysgit unless it is already contained upstream which is supposedly the case with Perl 5.18.\n. @csware Which patch do you mean exactly? You are just referring to this very issue itself.\n. @dougwilson Right, thanks. I should have looked more closely.\n. @aberumen I'm unable to find your fork on GitHub. What's the state of your efforts to upgrade Perl? I also realize @patthoyts has a work/pt/perl branch (for version 5.12.2). What's the state of that one?\n. FYI, the patch by @csware is in upstream Perl 5.18 which was just released (in fact it also already was in Perl 5.17.7).\n. Not officially (yet). You would need to build Perl yourself, which is not so easy on MSYS. The patches at https://github.com/Alexpux/MSYS2-Tools/tree/master/perl/5.18.0 and the build files inside http://lrn.no-ip.info/other/mingw/msys/perl/5.8.8-0RC1/perl-5.8.8-1-msys-1.0.16-src.tar.lzma might be of some help to get you started. BTW, the mingwGitDevEnv-packages project is aiming at providing updated packages for MSYS / Git for Windows. It is planned to provide updated Perl packages as part of that project, but work on Perl has not yet started.\n. @dscho, could you please review again and merge if appropriate?\n. Fixed in c27cc30e085e277735b7921aebe8e73168869e0e.\n. Fixed by the OP himself and the above pull request.\n. About putting Git\\bin at the start of PATH: That might have some unwanted side-effects, e.g. when the user deliberately has another MSYS with more recent program versions in PATH and expects those to be used. For now, I'd vote to just fix this instead of finding another solution.\n. The last commit on your branch now looks good to me, thank you! Although I basically just could cherry-pick it, how about making this a little Git exercise for you: If you squash the three commits on your branch into one (keeping the last commit's message), I could just use GitHub's web interface to merge the whole branch (which then only contains a single commit).\n. Great! Unfortunately, I overlooked yet one more tiny thing in your change: Instead of the \"case\" you're using \"if\" to check for \"/cygwin/\". While I agree your solution is more readable, there are people in the msysgit project who look very closely at scripts being compatible with older shells. And as the \"case\" solution is more backward-compatible, I'd like to ask you to amend your commit one last time so that it just replaces the three lines inside the case / esac. Sorry for not noticing this until now.\n. I did not confirm the path problem, mostly because I'm too lazy to install Cygwin, so I'll just trust you here :-)\nAs a side note, I was a little astonished why the \";;\" line still shows up as a diff in your commit until I realized you've replaced tabs by spaces. However, this is fine for me as we're already using mixed indentation in the file anyway. So, to not delay this any longer, I've merged this now.\nThanks again for this patch!\n. Hmm. I was able to reproduce the original problem, but it still appears for me with your patch. But for you, your patch fixes it, right?\nEdit: Argh, it seems spaces in paths in PATH now get replaces by colons!\n. I just came up with this one-liner instead which works fine for me: export PATH=$(p=$(echo $PATH | tr \":\" \"\\n\" | grep -vi \"/cygwin/\" | tr \"\\n\" \":\"); echo ${p%:}). Could you please also give it a try?\n. Thanks for the test, I've pushed my commit (see 2ca4d5561279cebf7c4bd5e5c15157ae5785ab08). As to your question when this will be released, I have no idea. We do not have a fixed release schedule or the like. If you depend on the fix, I'd recommend to just build an installer yourself.\n. You're right. In fact, we would not need to case at all any more, would we? We could boil down the whole block of code to just the one-liner. Will do that today.\n. Well, then the easiest solution to make the checks consistent would probably be to just remove the -i option for grep.\n. Done in b4546cc62192129b91eee19f1d6b27a880ce8b55.\n. I wasn't able to reproduce your issue exactly. On my Win 7 x64 machine I do not see that a VS \"start without debugging\" window has the same icon as a Git Bash window. However, they get grouped into the same taskbar group, probably because they were started by the same process. But if I expand the taskbar group, I see that the two windows have different icons. Is it that what you see, too?\n. Yes, if I change the shortcut to not use cmd.exe, the taskbar icons are not grouped together. So even if it was just this effect your patch is of some value :-)\n. Thanks for fixing your own bug :-) A few notes on the commit message style:\n- Please do not use colloquial English, i.e. \"don't\" should be \"do not\". Think about commit messages like a serious book that you write.\n- If appropriate, prefix your commit message with a single word describing the overall topic. Here, \"Installer: \" would be the right thing.\n- Give more details in the commit message as to why this change is necessary, what issue it addresses, and how it is fixed. It should be immediately clear from reading the commit message (without having to consult the issue tracker) why this commit is good. Currently, you do not even mention Windows 8 in the commit message, and the commit message wording is misleading as it sounds as if you do not use cmd at all anymore.\n- The sentence \"as they need to launch through cmd.exe for other reasons\" is correct, but you should actually explain the reasons (by referring to the SHA1 of the commit that explains them).\n- Use your full name in commits.\n- Sign-off (\"git commit -s\") your commit.\n. Also, my understaing from your issue report and the mailing list discussion was that we should do this only starting from Windows 8, not starting with Windows Vista.\n. Just rewrite history and force-push your branch. The pull-request in GitHub will then update automatically.\n. The only formal comments that I have would be:\n1) Please hard-wrap your commit message at 74 characters, so that a standard \"git log\" in a standard terminal with a width of 80 columns does not wrap the log output (for better readability).\n2) If compatible with 1), please include the hint which issue this fixes into the commit message's subject line, so it's immediately visible.\nOther than that I just want to give your patch a try before I merge, which might take some more days, because I rarely work under Windows these days.\nThanks!\n. I know people who would be interested in getting git-tfs as part of Git for Windows. But instead of adding the binaries to our repository, I'd prefer some option in the installer to install git-tfs on demand, which then downloads the latest zipped release from GitHub (e.g. using InnoTools Downloader), and unpacks that into the installation directory after regular installation finishes. If you'd come up with a pull request adding this functionality, I'd happily review and eventually merge it :-)\n. It's not about binary size. The point is that we have a (somewhat unofficial) policy to not integrate binaries that we are not building from sources ourselves. Given that git-tfs is written in C# and our build environment is mingw I currently do not see how to do that with reasonable effort. Thus my suggestion to download your binaries on demand.\n. That's not up to me to decide as I'm rather indifferent on the binaries vs. source issue. @dscho What is your opinion?\n. @BenBE While I agree that from a formal point of view this issue should not be closed because it is a valid request and unresolved, you've mentioned yourself that we already have at least one very similar issue (#61, also see #31 and #50). And before every user requests to update his / her favorite MSYS package, you should probably consider participating in the mingwGitDevEnv project which aims at using the new mingw-get system underneath msysgit, so that you can update MSYS packages at any time independently of msysgit.\nAlso we, and especially @dscho, did spend a lot of effort in making contributions to the project as easy as possible. There are no \"multitudes of complicated build environments\" to set up, you just have to run the msysGit-netinstaller.\nAnd frankly spoken, most of the core msysgit developers probably do not care about user experience. That's not because we're mean, but we simply just have enough time to only fix those issues that affect yourselves. Sometimes it's very frustrating that although we have several hundred-thousand downloads per month, the core msysgit team only consists of a handful of developers. And all of us have a day job that is unrelated to msysgit, because so far no one offered to any of us a full-time job dedicated to work on msysgit.\n. @koppor Can you please comment on @patthoyts experience, i.e. were you eventually using the context menu on a non-git folder?\n. Closing due to missing feedback from @koppor.\n. Please note that this is an issue tracker. For support requests please write to the mailing list. Besides, issue #52 already is about long path names, as well as issue #24 in our fork of Git. So I think two issues is enough,we do not need a third one ;-)\n. According to this comment on SO, doing it this way only works on Windows Vista and above (which is OK for me, this is just FYI).\n. Doh, it seems the \"Fixes issue #84\" needs to go to the commit message's subject (not the body) to make GitHub close the issue automatically.\n. This (deprecated) project is about using Git on Windows only. Mac is totally out of scope. . @matt-hickford I'm willing to test this for you, but please sign-off your commit first.\n. I've squashed your commit with some modifications from my side that extend the background menu to Git GUI, too, and simplify the code a bit.\n. I guess despite this issue's title there's no general problem with finding git in PATH. Instead, it seems that git is in PATH but crashes under certain circumstances, which makes Composer for PHP think execution failed because git was not in PATH. If that's the case please file a new issue with the exact crash error message / stack trace.\n. This seems to be invalid as it only contains a bunch of commits from @dscho from 2009.\n. I can reproduce this issue, though I have some questions:\n1) Why would you want to set syntax on as that's already done in C:\\Program Files (x86)\\Git\\share\\vim\\vimrc?\n2) I'm not very familiar with configuring vim, but according to this page syntax on overrules your settings with the defaults. So it's expected that our customization to the textwidth is gone, or?\n. Ok, so you're probably in the best position to fix this (I myself have to experience with configuring vim at all). A pull request with a fix would be appreciated.\n. This is a support request, not an issue with the software itself. As such, it should go to the mailing list. That said, for the time being there's a mirror at GitHub, but that one will be deprecated soon. Anyway, the downloads from Google Code work fine for me right now.\n. Duplicate of issue #92.\n. Assuming this really is about git-cheetah only (not the registry-based content menu entries nor TortoiseGit installed in parallel nor any combination of these), it seems we had such reports before:\nhttp://code.google.com/p/msysgit/issues/detail?id=548\nhttps://groups.google.com/d/msg/msysgit/kZIvC8uy8tc/6_8ZTSfqRdYJ\n. How comes you're using \"%L\" instead of e.g. \"%1\"? Do you have a list of valid place-holders and their meaning? \"%v\" seems to be supported as of Windows Vista only, and only to be valid for Directory\\Background registry entries.\n. Yes, I'm pretty sure this did affect upgrades as well. When doing a new installer soon, there are probably other issues I'd like to see fixed before, in particular #61. @patthoyts could you please reply to my comment there.\n. \"Git Bash Here\" calls \"Git Bash.vbs\", which in turn creates a temporary shortcut file which has the \"Start in\" property set to the desired directory. If that directory is invalid (like the literal \"%v\"), it seems the current directory is taken. And Explorer sets the current directory to the one from which the shell extension was launched before actually launching it. That's why it worked for \"Git Bash Here\" but not for \"Git GUI Here\". Note that some Explorer replacements do not change the current directory when launching shell extensions, so relying on that is a bad idea.\n. It's an XP issue in the sense that XP does not yet seem to support registry-based background directory handlers. %v is not a Visual Basic variable (if that's what you mean by \"vb\") but a variable that's set by the shell (in most cases Windows Explorer). Please note that this fix is not yet part of any official installer, so you will still see this issue if you're just using the stock Git-1.8.1.2-preview20130201.exe.\n. @Groovounet Did your comment go to the wrong issue? This issue is not about Perl.\n. IMHO, the other issue tracker is more appropriate as this seems to be a core Git issue, not an issue of the MSYS environment that we ship with Git for Windows, so I'm closing this one. But if this is a valid core Git issue, it's also mostly likely a bug in upstream Git that you should report on the Git mailing list.\n. @kusma If you find a link to the associated thread on the mailing list, please add it to this issue (not here). Thanks in advance!\n. I must say now that I see the enlarged sidebar image without the \"git\" text I like that better than the original layout with the \"git\" text. There's not much need for repeating the \"git\" text as part of the image anyway, as the text to the right already says \"Git\" several times (and additionally, there's the upper / lower case conflict between \"git\" and \"Git\", so let's just stick to the latter).\nI also like the dark background for the icon images. How about adding the dark background to the enlarged sidebar image, too?\n. BTW, you should not replace the \"msysgitlogo.ico\". It is not used by the installer anyway, and by leaving it as-is it's consistent with \"msysgitlogo.svg\".\n. Thanks! Let's see what others say before merging this. BTW, we probably need to pay some special attention to the order in which the different image resolutions are stored in the .ico file, see this commit, but I could handle that after merging.\n. I had also given this some thought when the discussion was still hot. While I still like the new logo quite a lot (and I do  not think it makes Git look too much like a Microsoft product) I agree that it breaks the holistic UI experience across platforms. And as I believe maintaining the UI experience is a stronger argument that having a nice (but otherwise not necessary) new logo, I'm going to close the pull request for good.\n@dscho If you feel strongly otherwise feel free to reopen, but I don't think we will get an new arguments given how long this discussion already is unresolved.\n@BaconRanch Please don't feel sad about this decision. In any case your logos are already committed to\nhttps://github.com/msysgit/msysgit/tree/master/share/resources\nas git_windows*.svg.\n. @BaconRanch I agree this looks very nice! Some minor suggestions from my side:\n- Since commit \"Documentation: the name of the system is 'Git', not 'git'\" upstream writes \"Git\" when meaning the system, and \"git\" only in examples for command line usage. I think we should do the same and usually write \"Git\" and \"Git for Windows\".\n- Please use \"SCM\" instead of \"VCS\" as its more common in the Git context and better fits the git-scm.com web site.\n- It would be nice if the inside of the Git logo would be transparent instead of white. As the web site's background is light gray it should still look good, I guess.\n- If \"Develop\" is supposed to link to the msysgit stuff we should probably make more clear that \"Develop\" does not mean \"develop with Git\" but \"work on Git itself\". So how about naming it \"Contribute\" instead?\n. PS: Hehe, I like that little hover effect of the Git logo ;-)\n. I find \"SDK\" a bit unusual in this context. I believe that term is more commonly used for some API to use, not for a development environment like we are providing. Thus, I still vote for \"Contribute\" :-)\n. @hvoigt I also think we should be talking about the link to a separate page because neither \"SDK\" nor \"Contribute\" would be enough explanation for what to do with and msysgit download. In fact I think \"Contribute\" should just link to the GitHub project page, and the direct link to the repository should be removed form the header. To me \"Contribute\" could also mean to just report (good and concise) bug reports, and it's probably not a bad idea to \"hide\" the bug tracker behind a \"Contribute\" link because this will make sure only people who really are willing to contribute click there.\nMaybe even the \"Downloads\" link should be removed from the header. We already have a \"Download\" button for the latest version, and for the sake of reducing version fragmentation we should encourage to download the latest version only. The links to the wiki and mailing list should IMHO stay.\n@BaconRanch I agree that it makes sense to keep \"git\" in lower case where its use is part of a logo / iconic.\n. @BaconRanch Most of us have only time once a week at the weekend for msysGit, and if something else blocks the weekend a review can easily take two weeks. That said I've taken another look at the PR, and I'll put my comments directly there.\n. We had the same feature request already in the old (and closed) issue tracker on Google Code. Long story short, this is an upstream MSYS issue, and there's also already a feature request filed for it here. Please chime in there if you want this added. Meanwhile, I'll close this issue over here.\n. According to tail's help, -F is the \"same as --follow=name --retry\", and those are supposed by our version of tail, so it should be very easy to work around this limitation for now.\n. Sounds to me more like an issue with your setup, or a TortoiseGit / Phpstorm bug. Are you sure also C:\\Program Files (x86)\\Git\\bin\\git.exe is used when running git from the command line?\n. This is the corresponding TortoiseGit issue: http://code.google.com/p/tortoisegit/issues/detail?id=1533\nTortoiseGit seems to be blaming Git for Windows' cmd\\git.exe not work correctly with --version. However, I cannot reproduce this, neither with cmd\\git.exe in PATH or not. So I'm closing this until we get a proper recipe on how to reproduce the issue. \n. Maybe @csware can shed some light on this as according to this comment he was able to reproduce the issue.\n. That's odd as we're explicitly telling the git wrapper in CreateProcess() to inherit handles. So if you modify stdout before calling the git wrapper in order to capture the version string from the real git.exe, that should actually work. @patthoyts, any ideas?\n. I also never was able to reproduce the error. Also, what puzzles me a bit is that @zBart says here he had the issue with both the wrapper and the regular executable. So @dscho's suggested test from here will probably not reveal the error. It seems the only person still seeing this issue is @csware. Sven, can you provide reliable steps to reproduce?\n. Hmm, don't get me wrong, if there's an issue with the wrapper we should fix it. But how could it be hard to detect the wrapper? A simple fie size check with a threshold should do. The real git.exe will almost certainly always be larger than the 8,5 kb the wrapper currently has. Also, you already have the work-around in place, right? So the effort has already been spent and fixing this issue would not give any immediate benefit to the TortoiseGit project (except that you could remove some ugly code), right?\nAgain, I'm not suggesting at all that we should not fix this. I'm just trying to put the benefits a bit into perspective.\n. What exactly do you mean? That we should bundle Git for Windows with LSE? Git for Windows does not currently support hard / symbolic links / junctions anyway (not even on Vista and above), so please be more specific about your point. If your point is about adding links support to Git for Windows, this is a) the wrong issue tracker (this is the correct one), and b) you probably missed the numerous threads about this on the mailing list (see here for a start).\n. The issue tracker is, like the name says, for issues, not for support requests. Moreover, you were cross-posting this on the mailing list and already received an answer.\n. What's the exact registry key / value name? Please export to a .reg file and copy & paste it here.\n. While this is an interesting issue I believe it's not a Git bug as other programs are affected as well. Also, as per the very SO answer you're linking, not only Windows ports of Unix tools are affected, but also e.g. Android SDK's find_java.exe. However, it's suspicious that so far I've only seen reports that see this issue in conjunction with MingGW-compiled programs. So maybe it's a MinGW runtime bug, or a Flash bug, or a combination of both. Anyway, I'm closing this issue here as we're probably not in the position to address this.\n. Git for Windows is built without Python support (NO_PYTHON=YesPlease was set at build time), mostly because it's not easy to build Python with MinGW. As git-p4 is written in Python, it's simply not included in the distribution (the output you see comes from a script that replaces the real git-p4). However, you might have some luck installing a Python for Windows distribution of your choice an then getting git-p4 from e.g. a Linux installation of git.\nAs to your request for documentation, I've added missing Python support to the list of known issues, see 0dc86069cd9a015b99d84eb6a8b32580ab4ffbd6.\n. Probably not without your help ...\n. Not yet. But the mingwGitDevEnv project is about to get there.\n. At least on my Windows 7 that's definitely not the case, the PATH inside Git Bash contains the union of system and user PATH. In fact, any normal application that asks for the PATH environment variable on Windows automatically gets the the union of system and user PATH returned by the Windows API, so I have my doubts that what you claim is correct.\n. No, I don't have access to a Windows XP machine anymore.\n. For sure not! We don't want to clutter everybody's shell with debug output by default.\nSo, to conclude this, did you resolve the issue on your end? What was the problem?\n. Closing due to missing feedback from @mcandre.\n. Just out of curiosity, what Windows program stores text file in UTF-16 by default? The only occasion where I saw this recently for the first time is when you pipe e.g. the output of \"wmic process get executablepath,processid\" to a file. Also, is there a risk of this filter breaking the user experience non-UTF-16 text files?\n. Well, yeah. If you choose to export to .txt files instead of the usual .reg files (note that the suggested filter only applies to .txt files). Quite an academic example.\n. @svnpenn I think otherwise. I believe @Saaman is well aware that you should usually write HEAD in upper case. However, if you don't for some reason, git checkout head should fail with error: pathspec 'head' did not match any file(s) known to git. (if you don't have a branch that's actually called head), just like it does on Linux. It should also not go into detached HEAD state.\nEven when considering the case-insensitive of the Windows file system it's somewhat strange that git checkout head doesn't simply do the same as git checkout HEAD, i.e. stay on the current branch instead of going into detached HEAD state. Seems like some Git code paths don't handle this correctly even with core.ignorecase set to true.\n. First of all, this is an issue tracker for bugs / feature requests (where \"bug\" means that you at least have some evidence that there actually is a bug and not just a user error). For support requests please use the mailing list.\nAnyway, sounds as if you have played around with the GIT_DIR / GIT_WORK_TREE environment variables and forgotten about it. Check whether those are set. Using GIT_TRACE=1 git init might also help to find out what's going on.\n. What you provided was far too superficial to be an evidence for a bug. You didn't even mention your Git version or OS, nor any trace output. However, I'm glad this once more turned out as a user error and that the issue is resolved.\n. Does it also hang if you manually launch Git-1.8.1.2-preview20130201.exe /silent from a command prompt?\n. Some closing notes:\n- You don't need /SP- because DisableStartupPrompt is yes (the default).\n- You don't need /NORESTART because Git never restarts the system.\n- /SAVEINF only makes sense if you plan to use /LOADINF later.\n. Looks good to me. Someone else please review, too, and merge.\n. Hm, works fine for me with Git 1.8.3 on Windows 7 x64. Are you sure it's not the other way around since your screenshot looks like from Windows XP instead from Windows 7?\n. @nitram509 The OP said \"Reproducible as of 1.8.3\", so testing against \"msysgit v1.8.1.2\" unfortunately is not of much help. Would you mind testing against Git for Windows (not msysgit) version 1.8.3, too?\n. Thanks for testing that again. However, to my understanding the issue is not about the shortcut icons, but the icon that is displayed in the taskbar next to the title of an open \"Git Bash\" window (see the OP's screenshot). Anyway, I wasn't able to reproduce this either, and neither was the OP himself recently, so I'll close this.\n. What do you mean by \"had\"? How did you fix it?\n. This is again a topic that the mingwGitDevEnv project addresses in a more generic way (it currently comes with GNU Awk 3.1.7). I'd appreciate a contribution to mingwGitDevEnv instead, or even better upstream MSYS directly.\n. I tend to disagree. The msysgit installer is for people who are interested in participating in the development of Git for Windows itself. As such, you often need to search through the history to understand why things are how they are. If you're \"just\" a Git user, you're using the \"Git for Windows\" installer anyway which does not clone the Git sources at all.\n. 1) Yes, your understanding is correct. Basically, msysGit-netinstall-1.8.3-preview20130601.exe (the installer for \"Git for Windows\" contributors) is used to create Git-1.8.3-preview20130601.exe (the installer for \"Git for Windows\" end users).\n2) Sorry, this is not the right place for support questions. Please direct them to the mailing list instead.\n. Not a bug but a user error, see http://stackoverflow.com/a/18677284/1127485.\n. Works for me. ssh-keygen -t rsa -C \"some.user@gmail.com\" -f \"id_rsa_test7\" -P \"\" does neither prompt me for a passphrase nor does it complain about a null passphrase. I'm running this directly from Git Bash, though. Does it work for you, too, when run from Git Bash? If so, it's probably a quoting issue, and PowerShell removes the double quotes. This seems to work on PowerShell (I've updated my SO answer, too): ssh-keygen -t rsa -C \"some.user@gmail.com\" -f \"id_rsa_test7\" -P \"\"\"\".\n. Ok, final nit-pick: Please change the commit message from \"Added a BATCH file that attempts to authorize SSH keys with the ssh-agent.\" to \"cmd: Add a .bat file that attempts to authorize SSH keys with ssh-agent\" (note there's not dot at the end of the sentence). I'll merge then right away. Thanks!\n. Not straight-forward to fix because we're shipping the HTML docs but subtree's make doc does not generate HTML output (but XML output). See http://thread.gmane.org/gmane.comp.version-control.git/236925.\n. Well, the HTML docs still need to be generated, which requires asciidoc, which requires Python. The patch from the link only added a Makefile target to run asciidoc. We simply need to finally find a way to ship Python.\n. Here's a collection of Python build scripts that we could probably base our work on:\nhttps://github.com/Alexpux/MSYS2-packages/tree/master/python2\nhttps://github.com/Alexpux/MINGW-packages/tree/master/mingw-w64-python2\nhttp://lrn.no-ip.info/packages/i686-pc-msys/python2.7/2.7.5-1/ (in python2.7-2.7.5-1-msys2_i686-src.tar.xz)\nWhich leads me to the question, do we want an MSYS or an MINGW Python?\n. Well, if we had Python, we'd also use it for stuff like git-p4 (see issue #108), or git-imerge and git-when-merged. So it's not just \"a tool for the tool\". Also, I was more thinking about technical reasons why one Python flavor would be better than the other.\n. Right, so let's go for an MSYS Python.\n. Yeah, and since more than a year nothing has happened on the \"python\" and \"ef/build-python\" branches. And I do not see the need to reinvent the wheel by writing our own build recipe with our own set of patches if the work seems to have already been done. \n. At least msys-libxml2 already is available in upstream MSYS.\n. Except for one MsgBox call during uninstallation, all MsgBox calls in the [Code] section (which in contrast to SuppressibleMsgBox calls are not suppressible) are only triggered on more or less severe errors. Thus, for a successful upgrade, you should never see them. So which message are you actually seeing?\n. In any case, IMHO this would be an MSYS issue, not a Git for Windows issue, so the report (if it's a bug after all) should go to http://sourceforge.net/p/mingw/bugs/.\n. As for all MSYS packaging related issues, it might be worth for you to look at (and contribute to) the mingwGitDevEnv project which ships Git along with the latest tools from upstream MSYS.\n. I agree. Although this issue is specifically about bash, bash certainly is part of the \"base system commands\" mentioned in #75. Upstream MSYS has bash 3.1.17 which understands =~, and upstream MSYS is part of mingwGitDevEnv.\n. We're not closing issues without resolving them, we're resolving them as duplicates. That's a difference. However, you're probably right that if this issue is closed as a duplicate, others should be resolved as duplicates, too.\nYou're asking many questions in your comment. While I appreciate your interest in the mingwGitDevEnv project I'd like to remind you that a) the issues tracker is for issues, not for support questions, and b) this is the issue tracker for msysgit, not for mingwGitDevEnv. This time I'm going to make an exception and answer the questions in here for clarity:\nQ: Could you please tell me a bit more about how far along that project is?\nA: That very much depends on your definition of \"done\". It's certainly not a drop-in replacement for \"Git for Windows\" yet. It doesn't even yet have an end-user installer. The installer that it has is intended to set up a development environment to work on Git for Windows itself. However, the Git environment that comes as part of this already is quite usable. Long story short: Give it a try, and if you find something lacking, help to improve it.\nQ: I see numerous failed tests. How does this relate to the current situation for msysgit?\nA: The current msysgit / Git for Windows has no / close to no failing tests. However, most tests in mingwGitDevEnv seem to fail for bogus reasons, like mismatching line endings in test output.\nQ: Are there more or fewer issues?\nA: If you just take the test results into account, there are more issues. If you take all the MSYS issues into account, there are less issues.\nQ: Can mingwGitDevEnv be used as a drop-in replacement for existing users of msysgit, or does it require a lot of setup/bugfixing/issue solving? \nA: See my answer above. It's not a drop-in replacement (yet), but it works very well for me out of the box.\nQ: Also, why start yet another project?\nA: Because the way msysgit manages binary MSYS packages IMHO is totally unmaintainable.\nQ: Why is git not simply added as a package for the official mingw-get installer?\nA: Because a) the whole current msysgit is not built around mingw-get, that's exactly the issue mingwGitDevEnv is addressing. And b), because upstream MinGW / MSYS will never officially add an MinGW Git to their repositories as they strongly believe an MSYS Git is the way to go.\n. @XhmikosR Just read the comment in the first line of the file ...\n. Sorry to spoil the party, but how's this useful without the binaries?\n. There still were \"PLink\" spellings in the commit message, but hey, I've merged it anyway ;-) Thanks to you, too!\n. I'm assuming  @Annakan means \"Git for Windows\", not \"msysgit\" (otherwise the claim that it pollutes the PATH would make no sense). As @dscho has already mentioned, there already is the Run Git from the Windows Command Prompt choice in the installer for exactly that reason, see the screenshot below. It even comes with a verbose explanation. Also, the third choice which adds Git\\bin to PATH comes with a big warning. Thus, I'm closing this.\n\n. @ahmadia I just tried both of your scenarios on Windows 8 and they work fine for me. FYI, there is no \"Windows script responsible for launching shell scripts\", instead this is done via a regular file association for *.sh that's written to the registry (if you tell the installer to do so). You can review the installer code over here. As you can see, we're both quoting the %1 argument (in case the path contains spaces) and we're also using a --login shell (so all the tools are in your PATH).\nI assume there's something else going wrong on your system, like a different handler for the *.sh file extension being active. Maybe you associated *.sh to sh.exe yourself once? This would break things. To double-check, take a look at the HKLM\\Software\\Classes\\sh_auto_file\\shell\\open\\command and / or HKCU\\Software\\Classes\\sh_auto_file\\shell\\open\\command registry entries whether they match what the Git for Windows installer does.\n. About the wording in the commit message: We do not set HOME \"in Git Bash\", but \"for Git Bash in etc/profile\". We do not have \"Git Cmd\" or git.cmd anymore, but the git.exe wrapper and the gitk.cmd wrapper (which both set HOME). Also, if merging this should auto-close issue 119 (which IMHO it should), then you should mention it using this syntax.\n. Regarding the code, you should also remove the logic to \"Delete HOME if a previous installation modified it\" and to \"Reset the current user's HOME if we modified it\" (search for these comments in the code).\n. The PR was updated, just not the first comment in this conversation (which defaults to the original PR's first commit's message).\n. Looks good to me, I just did not update to this Inno Setup version because there we no changes that we would immediately benefit from.\n. I really don't have time for a thorough review currently. Just from a very quick glance I see a lot of indentation and style issues. I'd prefer to not merge this as-is.\n. Thanks for the update. I've commented on a few lines that still have style issues, but there are more lines. In general, our currently style does not use whitespaces before / after special characters.\n. Besides all my style comments, I assume that you have actually build the installer and verified that it works as expected, correct?\n. Looks good to me now. @dscho Please merge it you're OK with it, too.\n. OK, so this sounds as if adding -n would actually make sense for the other release.sh files, too. Would you mind adding a separate commit adding -n for all release.sh files?\n. Closing as PR #170 is a super set of this.\n. Actually you should make the commit that adds -n to all scripts the first one, and also add -n for vim in that commit. During the interactive rebase Git will then just skip the addition of -n as part of the following \"update vim to 7.4\" commit.\n. It's not supported. And the problem exactly is that git clone is using Cygwin's ssh in this case.\n. @patthoyts Could you please have a look at this?\n. @dscho I'm perfectly fine with merging small / obviously correct fixes to the installer without waiting for my review.\n. @dolmen mingwGitDevEnv's mailing list is not invite only, it's just that subscriptions currently require moderator approval (and I've approved yours yesterday).\nThe TODO item about Karsten's Unicode paths mainly refers to the patches 13, 14, 15 and 16 at https://github.com/msysgit/msysgit/tree/msys/src/rt/patches. I've updated the README accordingly. Note that while 13 is committed here, I've removed it from the msysport file because of problems. Patches 14, 15 and 16 I did not even try afterwards.\n@dscho I've switched off issues for now because I see people misusing the issue tracker as a support forum, bug reports being of very low (technical) quality, and I do not want to feed the impression that I would fix other people's issues.\nThat said, PRs are very welcome, but I tend to have high standards wrt to code contributions. So contributors should be willing to iterate their patches with me several times and not give up on the first sign of criticism.\n. Inno Setup is unfortunately not capable of elevating on demand, also see this issue.\n. @voltagex If you feel this issue being addressed, please close it.\n. Why don't you just upgrade to 1.9.2 and test again to see if it's fixed?\n. Yes, but only if it's specific to Windows. If this also happens with Git on Linux, the bug should reported to upstream Git on its mailing list.\n. FYI, as Git 1.7.10.4 is quite old and the bug might have been introduced by a more recent version, I was testing Git 1.9.3 on Gentoo Linux, but still the bug is not reproducible there.\n. Please use the mailing list for questions / discussions.\n. core.autocrlf is deprecated in favor of .gitattributes. Note: There used to be a bug in the way Git for Windows handles the eol=native setting in .gitattributes prior to version 1.8.4, also see\nhttp://stackoverflow.com/questions/13531988/git-line-endings-renormalize-does-not-seem-to-checkout-the-right-line-endings\nhttp://stackoverflow.com/questions/13711190/gitattributes-with-core-autocrlf-unset\nhttp://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/\n. I was quicker ;-)\n. FYI, we've been briefly discussing this, partly on the mingwGitDevEnv mailing list, but for now decided against using MSYS2 mainly because\n- MSYS2 is more or less a one-man show without a community.\n- None of the original MSYS project owners contributes to MSYS2.\nMSYS simply has been around for so much longer, and is more mature, though slightly outdated. About MSYS being outdated, we already have a bunch of custom packages to address this. But anyway, it's not completely out of the question that we'll move to MSYS2 once it becomes an established and well-maintained project.\n. I finally made up my mind about this and decided to address this for the upcoming \"Git SDK\"-based version of Git for Windows.\n. That behavior is by design. I believe the relevant code is here. Chocolatey installs Git in silent mode, and it simply does not feel right to kill ssh-agent without asking the user first.\n. I was replying to the thread on the Chocolatey mailing list, but for some reason my post doe snot show up (yet). In short: /CLOSEAPPLICATIONS and /RESTARTAPPLICATIONS only work with applications that support it, and ssh-agent is not one of them.\n. Looks like the Bash maintainer has released the final (?) patches: http://seclists.org/oss-sec/2014/q3/734\n. Well, if you would have specified an MD5 or SHA1 of your file, we could have done that, yes.\n. The download steps don't mean really much as in theory your file could have been tempered with while it's being downloaded. The correct MD5 is 7a50b65944eed9d8109da9d86a5107e1. If that matches your local file, it's a false positive. In the future, please direct such support requests to the mailing list instead of the issue tracker.\n. IMHO, you're reversing the burden of proof. It should not be our responsibility to prove that Kaspersky is reporting a false positive, but it should be Kaspersky's responsibility to prove that the file is indeed infected (or to fix their scanner). We're getting such reports every now and then, and so far they all were false positives.\nAnti-virus scanners are just snake oil these days, they lead you to believe that you're safe if you have them running in the background. Prominent manufacturers have to admit that they can only detect less than 50% of the attacks (see e.g. this German news article, which refers to a Wall Street Journal interview with Symantec). If you're interesting in the topic, Why Antivirus Companies Like Mine Failed to Catch Flame and Stuxnet is also some interesting read.\nAnyway, a good cross check against false positives of a single scanner is to upload the file to VirusTotal and have it checked by multiple scanners. As it turns out somebody already did this. None of the scanners, including Kaspersky, is reporting an infection for Git-1.9.4-preview20140929.exe.\n. > Git-1.9.4-preview20140929.exe checks out fine on my computer as well\nOk, then the issue title is misleading as it says \"Kapersky reports that the GIT-1.9.4-PREVIEW10140929.EXE contains PDM.Worm.P2P.generic\" (not one of the installed files).\nYou say:\n\nI cannot know whether this is false positive or not.\n\nAnd initially you've asked us:\n\nCan you confirm whether this is a false positive?\n\nIf you cannot know whether this is false positive, how should we? Everything around msysgit is Open Source, so we are in no better position to answer that question than you are. In fact, you are in the better position as you're the one who has the piece of software that we don't: Kaspersky.\n\nFrankly, to me msysgit is a nice to have, not a need to have. msysgit is not important enough for me to spend my time investigating if this is a false positive or not. I am content with shrugging my shoulders and seeking other solutions to the problem I had intended for msysgit to solve.\n\nFrankly, having you as another user is a nice to have, not a need to have. Proving that Kaspersky reports a false positive is not important enough for me to spend my time investigating. I am content with shrugging my shoulders at the mindset of users who seem to think that it's our job to defend against arbitrary claims about the quality of our software.\nDon't get me wrong, I'm not meaning to offend you. I'd just like you to accept that at least I'm not willing to spend more time investigating this (though I have to admit that I do to some extent enjoy this rather academic discussion about it).\n. [sarcasm]\nMaybe we forgot to remove the if (location == Vietnam) sleep(60); debug code?\n[/sarcasm]\n. To clarify on t-b's answer, the git.exe that ships with Git for Windows in not an MSYS application, but a native Windows application. And with these mintty still has problems. So no, unfortunately we're not able to use mintty.\nPersonally, I don't think cmd.exe is buggy. It's just lacking features. I'd recommend to use Git Bash instead, or use clink if you need to stay with cmd.\n. @linquize Could you please explain the steps you used to create your screenshots above? If I just search for \"git\" from the charms bar in Windows 8, my icons look quite fine even without your patch, see:\n\n. Hmm, still, the background color looks fine here, i.e. it's transparent like for the other icons:\n\nCan it be that you have set your desktop color resolution to anything lower than 32-bit?\n. @kusma Are you using Windows 8 or 8.1 (in case that makes any difference)?\n. @kusma That's fine. The patch in this thread has already been merged anyway. The pending one is in https://github.com/git-for-windows/sdk/pull/26. But I'll just merge that now as @linquize showed via screenshots that it works for him. As the patch is uncritical otherwise, that's enough proof for me right now.\n. Just FYI, the new Git SDK ships with Bash 3.1.23 and I just verified that it's not affected by this bug.\n. > I think I could release a new 1.9.5.msysgit.1 by the end of this week; do you agree?\nSure, go for it @dscho, and thanks in advance! :-)\n. Thanks for this! I realize this must have been a lot of work, but unfortunately we're going to deprecate this way of building packages soon in favor of https://github.com/git-for-windows/sdk-packages.\nBut now that we have it, we should take it. A few quick notes from my side:\n- I wish it was one commit per package that you add or modify.\n- Each commit's subject should not exceed 75 chars in length, and the commit message body text should also be hard-wrapped at 75 chars.\n- I'm a bit concerned about you using the latest TDM GCC tool chain. Does it mean it will not out of the box with the tool chain we currently use?\n. Sorry for not coming back to this earlier, and thanks again for your work. There still are a bunch of formal issues with your commits like\n- Missing sign-offs\n- Use of trailing dot in commit message title\n- Use of past tense in commit message title (prefer \"Patch msmtp package\" over \"Patched rebase package\")\nAlso, most of your commits just say in prose what is obvious from the diff, but there is no rationale. For example, why does it make sense to \"Patch msmtp package to include socket headers before OpenSSL headers\" (similar for other commits)? The explanation for that should go into the commit message body.\nAnyway, I don't want to waste your time. We're currently working on an MSYS2-based Git for Windows which comes with a completely different packaging system. That said, even if you were reworking your PR so that I could merge it, we probably won't build and bundle the binaries anymore as we consider msysgit to be more or less deprecated.\n. Some background information: Git manages branches as file names on the file system, so this basically is caused by a case-insensitive filesystem on the client (Windows) vs. a case-sensitive filesystem on the server (Linux).\nHowever you can configure your Git with core.ignorecase=false, which should solve your issue. For more details see the help for git config.\n. Next time in English, please.\n. Please do not comment on this issue anymore. The follow-up issue (in English) is at #283 (which is also closed by now).\n. As \"we\" includes you, feel free to file a pull request to address this, see https://github.com/msysgit/msysgit/wiki/Subversion-is-too-old,\n. As these two changes are unrelated they should go to separate commits. But as setting HOME like you did has no effect anyway, just revert that part and we should be fine :-)\n. Thanks!\n. setx /?says:\n```\nNOTE: 1) SETX writes variables to the master environment in the registry.\n  2) On a local system, variables created or modified by this tool\n     will be available in future command windows but not in the\n     current CMD.exe command window.\n\n```\nI don't think we want either of this. If we \"pollute\" the registry this way, we would also need to clean it up again at uninstall time. Also, due to 2), we cannot just use setx instead of set, and using both does not seem to be very clean to me.\nWhat's the problem exactly you're trying to solve?\n. Ok, I now understand the motivation, but I still think this change is a sub-optimal solution to the problem. However, I have no experience with using ssh-agent whatsoever (I prefer to assign keys to hosts via ~/.ssh/config and not have a program running in the background all the time).\nBut if you're using Console (or even better ConsoleZ or ConEmu), can't you just configure it to run start-ssh-agent.cmd for every opened tab?\nOn a side note, if you really prefer cmd over bash, you should at least install clink ;-)\n. Thanks. Since you've also created issue #292 about this, could you please modify your commit message so that it will auto-close the issue when merging the PR?\nAnd also please sign-off your commit.\n. Thanks, but the sign-off in the commit message is still missing (git commit --amend -s).\n. If you have tabs in your terminal, it mostly likely is a third-party terminal app (like ConEmu or Console Z) and not related to msysgit.\n. > In fact, we should not need to guess.\nExactly. And that's why I gave examples about what kind of information we'd expect, like whether a third-party terminal app is used, and if so, which one.\n. Nit-pick: The commit message says \"Fix #232\", but that's a PR, not an issue, and it's already closed. So probably just omit this from the commit message.\n. I realized too late this was reported to the wrong issue tracker (I've already committed the fix). It should have gone to the \"msysgit\" project as it's an issue with the installer, not with Git itself. I will still move this using Google's GitHub Issue Mover for the sake of consistency.\n. Thanks for reporting!\n. I don't think knowing the SourceTree version gets us any further as it can be configured to use either an embedded Git or the system Git.\n@strauss69400 Can you instead try to reproduce the issue with pure command line Git and state the version you're using?\n. @QingqingZhou If Git for Windows version 2.12.1.windows.1 is affected, then you've reported to the wrong issue tracker. Please use https://github.com/git-for-windows/git/issues instead.. @linquize Could you please test / have a look?\n. Please add a space (\" \") between \";\" and \"MinVersion\" and add this line after the existing one for a slightly easier to read diff.\n. Please remove the whitespace after , and : to match the existing style.\n. Please remove empty parentheses in procedures / functions to match the existing style.\n. Still spaces here next to <> ;-) Similar in other places below.\n. Should use 4 spaces instead of 2 for indentation.\n. Please insert blank lines before and after this block to make clear where the block ends that the comment belongs to.\n. Please insert blank lines before and after this block to make clear where the block ends that the comment belongs to.\n. Please insert blank lines before and after this block to make clear where the block ends that the comment belongs to.\n. Last nit-pick, please add a blank line after this one, as these are global variables and do not belong to UpdateInfFilenames.\n. Where does this color code come from, i.e. why is it not pure white (#FFFFFF)?\n. Thanks, makes sense.\n. This has no effect as HOME is not being used further down in the script, and we are in a setlocal / endlocal block here anyway.\n. True, that needs to be fixed. @c17r, could you please do this along the way of this PR (but in a separate commit)?\n. ",
    "cup": "I have no interest in making a fallback. My posted solution work for me, although it is slower than ln.exe.\n. Hey! Look at this!\nOpen Source, 100% Compatible ln for Windows\nDo it please.\n. @ariofrio you are off topic. The discussion is about the output from building git from source.\n. @dscho I know this repo is old, but I dont know where to put this comment. I\nfound a better solution for this old problem:\nsh\nexport CYGWIN=winsymlinks:native\nln -s alfa.exe bravo.exe\nhttp://stackoverflow.com/q/3648819/make-symbolic-link-with-cygwin#18660841\nLet me know if I should post this somewhere else.\n. @dscho should I just repost this to git/git? Or is there a new msysgit/msysgit? You didnt really address my concern: you said its ok to post here (although useless), but you didnt say WHERE would be better to post.\n. @dscho I dont think you are getting me. My concern is that the original issue\nlisted above has not been resolved. That building Git for Windows create copies\nin libexec/git-core rather than symlinks.\nIf that is the case my recent comment could be a solution to that. So I dont\njust want these comments here for Google users, I want to fix the problem.\n. As part of the organization I should have bitching rights :blush:\nI am with the dissenters, Firefox logo is the same across all platforms. Git should not be different.\n. @sschuberth I agree. Its best to avoid acronyms just for \"looking cool\", unless they are really needed. :+1:  for Contribute\n. @dscho really the better solution to this problem is to use cygstart.exe. It is written in C and could be used with MSYS. We could just change the name to\nmstart.exe or something\ncygstart.c\n. Do you guys maintain the source as well? It feels weird PRing a binary.\n. For example, you have\ngrep.exe\nwhere is the source for that?\n. I was able to work around these problems by using powershell instead of cmd.\nExample\nsh\nstart 'http://asdf.com?a=1&b=2&c=3'\nbecomes\nsh\npowershell saps '\"http://asdf.com?a=1&b=2&c=3\"'\n. ",
    "ariofrio": "Currently, what happens when I clone a repository with symlinks in Windows?\n. @svnpenn: I thought it was about adding a feature to msysgit. But never mind, I've started a question on SO.\n. ",
    "patthoyts": "This is a Tcl/Tk issue. Tcl/Tk has two enhancement request outstanding to extend its Unicode handling beyond the BMP but as yet only one of these is completed for 8.6 and there is no support for non-BMP Unicode in 8.5. The two TIPs are http://tip.tcl.tk/388 and http://tip.tcl.tk/389 which indicates full Unicode 6.0 support is slated for 8.7 which is some way off.\nSo in summary - Tcl/Tk do not support 4 byte UTF-8.\n. Possibly we could filter the path variable and drop anything for which PathIsNetworkPath returns true. It would probably lead to a lot of confusion (\"its on my path but does't work in git\"). A choice between performance and correctness it seems.\n. It's not really going to be safe to delete this as that will loose anything the user added. Of course, an update will probably replace such changes anyway but the problem with the virtualstore is that it masks updated files. Hence, such per-user changes should be done in users profiles or config files.\nOne solution is that as we consider the files in /etc to be writable, we should give the %ProgramFiles(x86)%\\Git\\etc full control for users of the system. That way, when the user edits the system config file it will not get moved into the virtual store and avoids the masking of the real updated files.\nicacls \"%ProgramFiles(x86)%\\Git\\etc\" /grant BUILTIN\\Users:(OI)(CI)F\nappears to do the job. I imagine the installer has some permissions manipulating functions already.\n. I disagree. End users are not supposed to be modifying dlls and exes. Thats what installers are for. If we want to specifically avoid the virtualization there may be something we can call or set to handle that but to make the whole Git* subtree writable by non-admin is wrong. The files in /etc/profile are somewhat modifiable - although unless we take steps to merge them (or maybe use a profile.d/ type of include scheme) changes will be lost on upgrade. The rest is not unless you are a Git developer in which case you should know what you are doing anyway.\n. I updated curl to 7.25.0. The current version is actually 7.26.0 but that fails to link in mingw. The fix mentioned above is present in 7.25.0 so I went with that.\nThe OP needs to test this as working behind a https proxy worked for me without the upgrade for both the proxies I have around.\nPushed to devel.\n. I checked the curl-7.26.0 with openssl 0.9.8x along with the http.sslinfo fix and it all works ok together so I've merged that into devel. We may as well be using the latest of everything where practical.\n. Closing this. Git for Windows 1.7.11 got an upgrade to curl 7.26.0, openssl 0.9.8x and zlib 1.2.7. If it remains a problem, raise a new one referencing this or reopen if it is allowed.\n. This doesn't seem to work from what I can see - possibly I'm testing it incorrectly.\n```\nC:\\src\\msysgit\\mingw\\bin>.\\openssl.exe verify -CAfile ....\\cacerts.pem ....\\sixxs.cer\n....\\sixxs.cer: OK\nC:\\src\\msysgit\\mingw\\bin>.\\openssl.exe verify -CAfile ....\\cacerts.pem ....\\a_\u043c\u0438\u0440\\sixxs.cer\nError opening certificate file ....\\a_???\\sixxs.cer\n2456:error:0200107B:system library:fopen:Unknown error:.\\crypto\\bio\\bss_file.c:404:fopen('....\\a_???\\sixxs.cer','rb')\n2456:error:20074002:BIO routines:FILE_CTRL:system lib:.\\crypto\\bio\\bss_file.c:406:unable to load certificate\n```\nThis is using the 0.9.8r version of openssl committed to devel branch. My understanding is the Cyrillic path should be being handled. Or is this only handling filenames with Unicode characters?\nIn the above test, cacerts.pem is a collection of certificates rather like the curl-ca-bundle except it includes CAcert's certificate and the sixxs.cer is the current certificate from sixxs.net which happens to use CAcert as the issuing authority. The verification fails the same way if the CAfile path is Unicode or just the certificate file. \n. Well openssl calls up the same library functions. In this case I'm sticking some printfs in there and I can see your new code path is called. My feeling at the moment is that the input path is not actually utf8 but the system locale.\nHowever -- what I really want is confidence in the fix so that when checking the upgrade to 0.9.8x I can be sure we didn't loose the enhancement. So can you suggest a curl based test that would show that the fix is still working please.\n. OK. So the patch we have is probably doing to wrong thing for curl.exe and openssl.exe and anything other than the usage you show above. That is - most methods for providing a path will not in fact be encoded in utf8. It probably is ok when called from git though. I figure this is possibly an issue for non English systems that provide custom ca files -- so a pretty small subset of users.\nSomething to bear in mind going forwards.\n. There are new files added to the Perl SVN module which are missing from our copy-files script and so don't get included in the installer. If you copy the folder from the git source /git/perl/Git/SVN to the installed location at lib\\perl5\\site_perl\\SVN\\ it should work again. If it does - then listing this in /share/WinGit/copy-files.sh will fix the installation properly.\nIf you build git (make;make install), then we end up installing them into /lib/Git/ which is the path we'd need to use in copy-files.sh\n. It's not git.cmd that eats the caret -- this is used by Windows command prompt as an escape character. See http://msdn.microsoft.com/en-us/library/kcc7tke7.aspx (section Escape characters). Here is an example:\n```\nC:\\src\\msysgit>echo One&Two\nOne\n'Two' is not recognized as an internal or external command, operable program or batch file.\nC:\\src\\msysgit>echo One^&Two\nOne&Two\n```\n. I thought about this but I don't think its going to help much. Currently if you want to do \"git log HEAD^\" you have to give two carets because the command shell has taken the first to use as a quote. This will not change if we make a git exe wrapper for the cmd\\ folder -- the command shell is still going to perform some command line handling and eat the caret. The only advantage I can see would be to make it simple in calling from other batch scripts where we currently have to do 'call git args...' which might be nice. I suspect a little wrapper making use of mingw_spawnve_fd could be fairly simple to do.\nHere's a real quick check of the command line handling:\n```\ndefine STRICT\ndefine WIN32_LEAN_AND_MEAN\ndefine UNICODE\ndefine _UNICODE\ninclude \nint main(void)\n{\n    LPCWSTR wsz = GetCommandLineW();\n    WriteConsole(GetStdHandle(STD_OUTPUT_HANDLE),\n             wsz, wcslen(wsz), NULL, NULL);\n    return 0;\n}\nC:\\src\\msysgit>cl -nologo -W3 -Od z.c\nz.c\nC:\\src\\msysgit>z log --oneline HEAD^^\nz  log --oneline HEAD^\n```\nWith just one caret, it asks \"More?\" which is the command shell escaping the newline at the end of the line\n. I can reproduce the double quoting issue and there seems to be a simple fix for the cmd script. If we do want to try for a compiled wrapper I uploaded an attempt that seems to work ok to https://gist.github.com/3002978\nShowing the problem:\n```\nC:\\src\\msysgit>cmd\\git rev-parse Git-1.7.11-preview20120620^^{commit}\nGit-1.7.11-preview20120620{commit}\nfatal: ambiguous argument 'Git-1.7.11-preview20120620{commit}': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions\nC:\\src\\msysgit>cmd\\git rev-parse Git-1.7.11-preview20120620^^^^{commit}\n8b7eb7e08b282344298cb05c6d14c47971a22383\n```\nIf we apply the following patch:\ndiff --git a/cmd/git.cmd b/cmd/git.cmd\nindex e697a23..5fdcc95 100644\n--- a/cmd/git.cmd\n+++ b/cmd/git.cmd\n@@ -21,7 +21,7 @@\n @for /f %%i in ('getcp -ansi') do @set cp_ansi=%%i\n @rem Set the console codepage to match the GUI codepage.\n @chcp %cp_ansi% > nul < nul\n-@git.exe %*\n+@for /f \"delims=\" %%I in (\"git.exe %*\") do @%%I\n @set ErrorLevel=%ErrorLevel%\n @rem Restore the original console codepage.\n @chcp %cp_oem% > nul < nul\nThen it avoids the requirement for double-quoting. The setlocal EnabledDelayedExpansion did not seem to help when I played around with this but the use of for as above seems to be sufficient.\nC:\\src\\msysgit>cmd\\git rev-parse Git-1.7.11-preview20120620^^{commit}\n8b7eb7e08b282344298cb05c6d14c47971a22383\n. Sigh. No. :(\n. I've tried a few more versions with Enable/DisableDelayedExpansion in various forms. It seems I can have either quotes or caret quoting but not deal with both however I modify the cmd script. The %* seems to present a problem within the script when it comes to expanding this.\nHowever if we use the C code wrapper as a replacement (copied to cmd\\git.exe) - no problem:\n```\nC:\\src\\msysgit>git rev-parse Git-1.7.11-preview20120620^^{commit}\n8b7eb7e08b282344298cb05c6d14c47971a22383\nC:\\src\\msysgit>git rev-parse \"Git-1.7.11-preview20120620^{commit}\"\n8b7eb7e08b282344298cb05c6d14c47971a22383\n```\nSo unless anyone comes up with a bright idea for the script it looks like putting a wrapper exe in place as cmd\\git.exe will be the way to sort this out. I think the wrapper is covering everything. 'git gui' launches detached, 'git gui citool' stays attached and the codepage handling is replicated along with the HOME environment setup.\n. heh - we collided somewhat - see pt/git-wrapper. If you copy the git.exe into your installed version (Program Files\\Git\\cmd) and remove/rename the .cmd script there it can get a good workout. I had some issue with 'git gui blame filename' which I've since fixed. The program does expect to be in either msysGit/cmd or the Git for Windows installed location (Git\\cmd) as in each case it will look for ..\\bin\\git.exe and add ..\\bin to the path.\n. I'm ok with this. We just have to copy the root and the class3 certificates into files in src/curl/certs/ and they will be appended to the bundle file each time we update curl. I tested this against www.sixxs.net which is a public site that uses cacert certificates for https.\nHowever, note the license for redistribution ( https://www.cacert.org/policy/RootDistributionLicense.php ) - where should we add such a notice? \nTo fix this locally -- all you need to do is paste the certificate .pem files onto the current bundle file. eg:\n(curl https://www.cacert.org/certs/root.crt ; curl https://www.cacert.org/certs/class3.crt ) >> /mingw/bin/curl-ca-bundle.crt\n. Pushed branch pt/cacert for testing this. Once we decide what to do about the distribution license it can be merged.\n. How about we add a section to the release notes after 'Known Issues':\n\nLicenses\nThis software contains Embedded CAcert Root Certificates. For more information please go to https://www.cacert.org/policy/RootDistributionLicense.php.\nThis software includes code from a number of other projects including zlib, curl, msmtp, tcl/tk and msys.\n. The only time it should put 'error launching git' is if it cannot start the process (either wish.exe or git.exe). Any normal git error should have nothing added and just return the error code. I need either a patch and a test or at least a test I can run to show the problem you describe.\n\nIf I create a testing git subcommand git error ?errorcode? as:\n```\n!/bin/sh\ncode=${1:-0}\nshift\ntest $# -gt 0 && echo >&2 \"$@\"\nexit $code\n```\nthen I can check the handling of the wrapper for various codes and stderr output. eg:\n$ cmd/git error 128 return one two eight && echo ok || echo fail $?\nreturn one two eight\nfail 128\nSo it looks like the current version from commit 726102 is properly transparent from my testing. Please try it in your system - checkout 'devel' and run 'make' in the src/git-wrapper directory to just get a git-wrapper.exe to try out.\n. New installer uploaded to http://msysgit.googlecode.com\n. The make install is correct. As this is a shell script we would not expect to get an exe. We need to add this into WinGit/copy-files.sh though or will not end up in the installer.\n. There is a tiny bit more. When you try and run the /share/WinGit/release.sh script with this, we check that what has been installed matches what was built and something from contrib/ falls outside this check. Also, the subtree .gitignore file doesn't ignore its own generated output so the git submodule becomes dirty which also fails one of out checks. However, with extra fixes for that it all seems to be fine.\nMerged to devel.\n. The pt/perl branch is based off master (from release 1.7.3.1) and was an experiment in using a mingw build of perl with git for windows. There were a number of problems and thats when I discovered that we actually use a msys build of perl.\nPossibly this can be re-used to get some upgraded build - it looks like a release script and a makefile patch is all it has.\n. If we provide git-tfs we also end up dealing with it's dependencies which leads to dealing with the .Net runtime installed. So do we also package the .net 4 client runtime too? I reckon we leave it to people that need git-tfs to to add it to their system. Its not exactly hard for them to download and unpack the zip file. If thats proving a problem for some end users - maybe providing the git-tfs project an installer configuration would be more useful so they can provide a MSI or .exe installer in addition to the .zip files.\nThis one gets a -1 from me. I give adding a tick-box to download and install it on demand a slightly more positive vote. +0.5 maybe. It might help make it more obvious to some users that such a thing exists if they can't already work it out by using the words git and tfs in the same search.\n. Please post this to the git mailing list (git@vger.kernel.org). Prefix your subject line with \"gitk: \" so the right people notice it. gitk is a separate project that gets included in git. The upstream maintenance is managed on the git mailing list. Once it is fixed upstream, the fixes will automatically get included in Git for Windows releases.\n. I had a look at this - the binary is not linked to msys-1.0.dll but instead to msvcrt and libintl/libiconv (which we ship so thats ok). The git t_grep_.sh test passed when I had this installed so it seems fine but the provenance of the binary should be recorded - ie: where did this come from? Given the tests pass - it seems we may not require a msys linked grep command and that a mingw linked grep may be fine. That's the question at this point - can we replace an msys grep with a mingw grep.\n. Worked for me on my Windows 8 64 bit installation. When I bring up a context menu is a folder containing a git repository I am offered a number of git items in the menu including a list of available git branches.\n. It is already included. Try entering 'git gui'\n. It depends what options you chose in the installer. To use git from the command line, the path to \\Git\\cmd should be on your path. If you only selected to use git from git bash, then only that gets configured. There is no problem running git on Windows 8 x64.\n```\nC:\\src>ver && echo %PROCESSOR_ARCHITECTURE% && git version\nMicrosoft Windows [Version 6.2.9200]\nAMD64\ngit version 1.8.0.msysgit.1\n```\n. Did this affect upgrades as well as fresh installs? I just confirmed this on a fresh XP install. I'm wondering if we should issue a new installer quite soon if this will affect all users who selected to use the registry based explorer menu items.\n. Your report is missing which git version you are running. Presumably this is portable git too as you mention git-cmd.bat. Specify the full name of the installer you used and the git version. As far as I'm aware this was an issue in a previous version that was fixed for 1.8.0 or possibly before.\n. Thank you - it seems the fix applied in commit 4d0911d should have included this file as well. We set TERM=msys rather than cygwin though.\n. The one thing that occurred to me is this disables ls coloring for rxvt terminals which under the msysgit environment are always attached to a pipe. It might be worth only doing this when TERM is not rxvt just to catch this exception. eg:\n[ \"$TERM\" = \"rxvt\" ] && COLORMODE= || COLORMODE=auto\nalias ls='ls -F --color=$COLORMODE --show-control-chars'\nA quick check of this shows that launching a rxvt term with rxvt -ls now gets coloured ls output and from that terminal ls -l | cat --show-all gets fixed to no longer include the control characters.\nI'm not sure if anyone actually uses that though. If they just run 'rxvt' then it picks up the current bash settings and has a monochrome ls. The above suggestion only works when rxvt gets launched as the login shell.\n. Probably fixed in master now following merge of kblees work. Needs testing by the original poster to close.\n. This needs at minimum a stack trace from someone that can reproduce the fault. Unfortunately that means you. This is unlikely to be due to git-gui. If you run got gui with the --trace option it will show the Tcl console window and display the actual git commands that get run. That can show you what git commands you can use to reproduce the fault in a debugger. You will have to rebuild git (which just means downloading and running the net installer to get setup). Then you can run the faulting git command under gdb and try for a stack trace. If you were ok for a week and now it is failing - clearly something local has changed and is causing a conflict. Loading the wrong library could do that - check with a minimal PATH set. ie just the git\\cmd and windows directories and see how that helps..\n. More specifically this has been rebased from 0x68000000 to 0x30000000. This can be replicated on the binary we actually ship by running rebase -b 0x30000000 msys-1.0.dll. We don't ship rebase but it is included in the msysGit build environment.\n. Merged.\n. Merged manually with a fixed up commit message. Personally - I'm ok with bashisms in our /etc/profile as thats the only shell we ship.\n. repo.or.cz used to be the central repository for msysGit before we moved to google code and then to github. The file is not shipped -- that would mean it got included in the Git for Windows installation. However, it is no longer needed. Given its location it looks obsolete too. /etc/ssh_known_hosts2 was obsoleted with openssl 3.0.\n. ok - that was confusing. The issue has been reported to msysgit/msysgit but the pull request has been raised against github/msysgit -- that is against one of the forks of this project.\nIt needs a sign-off (see the Git SubmittingPatches (http://repo.or.cz/w/git.git?a=blob;f=Documentation/SubmittingPatches) for why) and really the commit message should be less opinionated. A statement of what and why (eg: Removed obsolete ssh_known_hosts2 file).\n. Duplicate of #119 \n. You must set browser.XXX.cmd for the custom browser to be considered valid. If you try\ngit config web.browser cat\ngit config browser.cat.cmd cat\nThis is enough to get git-web--browse README to use cat as the browser (git calls the web--browse script to launch web browsers).\nHowever, while help is viewed using a web browser when html help has been selected, mingw-git has a specific override mingw_open_html which runs ShellExecute to call the open verb on the html file thus launching your configured system browser for help. The only way to defeat this will be to patch this function in compat/mingw.c and select another verb or hack the execute command to run your specific browser. Possibly recompiling with this override disabled might make it revert to calling the web--browse script to launch the configured browser for help. See commit 4804aabc for the reasoning on this feature.\n. It is possible this requires an update to the version of Tcl/Tk we are shipping. If I create a directory \"C:\\src\\\u0433\u0438\u0442\" on my English windows7 system then I can run git commands on it and change into that folder and launch git-gui from the command line (cmd.exe) without problems. However, starting git-gui from a non-git folder and using the directory chooser to select this directory fails. Hitting \"Control-F2\" to show the Tcl console and trying \"set dir [tk_chooseDirectory]\" to manually check what is going on reports:\n(8.5.13) % set dir [tk_chooseDirectory -initialdir \"c:/src\"]\nC:/src/???\nTrying the same with another version of Tcl 8.5 yields the same but with 8.6.1 I get:\n(8.6.1) % set dir [tk_chooseDirectory -initialdir c:/src/]\nC:/src/\u0433\u0438\u0442\nWe can test this provided we have a version of Tcl 8.6 installed on our PATH by renaming the Git\\bin\\wish.exe so that the only wish.exe on the PATH is an 8.6 version. Doing this results in git-gui's file selection working as expected so an upgrade is definitely indicated.\nI think there is also a problem with passing such unicode path through git-cheetah to git-gui as well as using the \"Git Gui\" context menu item on the folder is failing to launch git-gui for this directory.\n. Detecting notepad++ seems useful. I'm not sure if this helps exactly but as we already ship Tcl/Tk a fairly short script can replicate notepad but with support for unix or windows line endings. See https://gist.github.com/246219c08c4a662e4773.git for one I had already that deals with any byte order marks and preserving the line-ending style. Notepad++ is preferable but as a fallback, something like this might be more useful than just notepad itself. (wish notepad.tcl filename to edit filename).\n. I updated that gist although I prefer to reuse the New function when creating the file from the command line arguments. \"utf-8\" should always be present -- you can check the available encodings from the tcl or wish prompt by typing 'encoding names'. On Mac/Unix the tk_messageBox at the end of the program could be removed and just 'puts stderr $::errorInfo' will print the error to stderr. On Windows wish there is no stderr as it is a GUI linked program, hence the use of a messagebox for error reporting.\n. ",
    "scivola": "Thank you for your explanation.\n. ",
    "orefalo": "You are welcome,\nWell it finally built! My 2c advise.. I got lost with all the branches, but checking out \"devel\" might not be such a great idea. The issue I fixed yesterday and this one were blocking issues - the full pkg or the net pkg were broken.\n2 solutions:\n1. the install can checkout a more stable branch. Like the one that was used to build the latest stable (I believe master)\n2. automate testing of the builds\nbottom line, an install should get the developer in a stable state to begin.\nonly SAP provides installers that do not work !\n. 99% sure (nothing is 100% nowadays), My network at home is reliable; unlike the office which has a filtering proxy.\nThe content of the zip was a page from SF.net.\nWill do another fresh install later today to confirm and  paste the message.\ntks\n. closed - I can't reproduce the issue.\n. Just for info, I also get the \"ERROR: Your msys-1.0.dll is out-of-date!\"\n. Just as a reference, we also get the tab completion lock. It's annoying and it requires to kill the process.\nHitting CTRL+C doesn't solve the issue either.\n. I agree with @hvoigt, the whole git/ folder should be excluded. Unless the .dll are moved to /etc which doesn't make sense.\n. Good point, the installer should put dll and exe in place. yet it could make sure those same dll are not shadowed in the virtualstore. Granted, I was troubleshooting and building from sources, so I my not be considered an end user anymore ;-/\n. @sschuberth this is correct, each user gets its own virtual-store. It's a security feature to prevent virus propagation across users on the same system. So that if you change a system file, that change is only visible to you and not the others.\n@perler it depends on the OS. I have windows 7 x64 enterprise, and the VirtualStore is there and active. But I also run Win7 32bit from a VM, and it doesn't use Virtual Store. Go figure one has it and not the other!?\n. I honestly gave up messing around with the virtualstore, I leave it to real M$ fans.\n on my custom git installer, I have the folder removed at startup - https://github.com/orefalo/msysgit/blob/devel/etc/profile.d/virtualstore.sh\n. No I haven't. I am doing a lot of msys builds and kind of lost track.\n\"According to this post files installed by Inno Setup should never get redirected to VirtualStore\".\nI can confirm that the installer doesn't put files in the VirtualStore.  However, the installer.. when it installs... should delete any user customization it finds in the VirtualStore.   If you are reinstalling the product, you expect a fresh copy - right ?\n. Agreed!\n. It's working fine, thank you\n. ",
    "hvoigt": "I think you just started with msysgit at a bad time somehow. For me in the past the devel branch always worked quite good and is supposed to. The main reason: We have a lack of resources in msysgit. I always wanted to setup solution 2 but I do not really have a spare (virtual) machine to do so. Despite the fact that so many people are using Git for Windows these days no big company (which probably would have some spare resources) has stepped up to provide such resources. For example even Microsoft is using Git in Codeplex but I have not heard from anyone from there providing something.\n. Is this a Git for Windows only problem? Can you provide a recipe/script to reproduce?\n. And please test the installer to be sure. I can test xp 32bit after the weekend. If you need help compiling the installer please let me know. Thanks.\n. I tested it today and there is a backslash missing in the installed registry entry:\n\"C:\\WINDOWS\\system32wscript\" \"C:\\Program Files\\Git\\Git Bash.vbs\" \"%1\"\nThats why I said please test to be sure. Once you have adjusted your patch according to the comments here and tested the change please update this pull request. \n. As a result of recent discussion on the list\nhttps://groups.google.com/forum/#!topic/msysgit/MRqQQb9vRUM\nPlease also add a Signed-off-by line to your commit.\n. Once you verified that it works for you on 64-bit I can give it another test run on XP 32-bit. I would prefer that you use\nthe /share/WinGit/release.sh script to create an installer and use that to verify everything works smoothly.\n. Ok, I have have verified that this works on Windows XP 32-Bit. Although I get a warning: \"ERROR: Your msys-1.0.dll is out-of-date!\" from the installed bash but that is probably an unrelated issue.\nAnyone else any objections?\n. Ok merged and pushed.\n. Please have a look at your TERM variable in both ssh sessions. I suspect they will be different. Please find out why. Since I (and you) suspect that this is not a git for windows issue itself I will close this issue if you do not provide a recipe that shows it is git for windows causing this.\n. As this issue is missing enough information I'll close it. We can reopen it in case we need to.\n. I also vote for working on 64Bit binaries instead of anything else. Questions how we would do this remain. It would be nice if we did not need to compile git into two installers (one for 64Bit and one for 32Bit). Does anyone have a nice route how to compile both binaries and combine them into one installer? How is the recommended way from Microsoft?\n. @sschuberth: That sounds great. Do you have a link describing this? I see there are flags for the files section. Can we just simply copy files into two input directories and then specify the flags for them?\nRegarding the size of one installer: Even if it would be doubled I think splitting is not worth the user confusion (and issue reports for us). Bandwidth is cheap and fast these days. But thats just my opinion.\n. @pleriche could you run the testsuite with your patched binaries? If that passes you would have to find a way how to integrate the 4gb flag enabling into the release.sh script and send a pull request/patch of your changes.\nThe 64Bit build should not be that hard since we have everything available. You just have to compile twice in release.sh (once 32bit and once 64bit) and juggle the output binaries into different folders which you can then pack using the installer. It just might need some effort since you have to wait and test the builds (ensure the testsuite runs fine and so on). On the other hand it might just work out of the box since the code is already 64bit compatible for other operating systems.\n. Could you provide a short script snippet (sequence of commands) that creates such a setup in a directory? Then we have a basis on which to decide and know the precise setup you are talking about. Currently you description leaves to many information open for me to decide on the question.\n. @pleriche after this analysis do we agree that this issue is mainly a CopSSH one? Since filing issues with them is customer only could you please file an issue there (probably referencing this issue) and we can close it here?\nSince their site is so closed I think we should not even try to support use cases with their software. It seems they make heavy use of open source software add a little bit to it to provide a software you pay for. Since we have no means to investigate properly and we are providing volunteer work it does not seem appropriate for me to support them. So for all problems resulting from uses with their software I think they should also do the support for it.\n. IOW I vote for not removing the symbolic link support but just leaving everything as is. What do you think?\n. IIRC, I once tracked this down to git searching the PATH for its commands. I think that is the same problem why the git help command is extra slow on windowses connected to a company network. If someone wants to optimize this please go ahead. I have accepted that Windows is slow and mostly use the Git GUI there (which is quicker ;)).\n. FWIW I just implemented an example using a debug time measuring function and pushed the branch here:\nhttps://github.com/msysgit/git/tree/hv/timer\nAt work I observed the loop where I added the measurement to be quite slow foreach directory entry it scans. However I cannot seem to reproduce the same behavior at home. Not sure if this is related to the bash completion being slow but definitely for git help.\n. @dscho no thats fine I actually intended to make it useful for general purpose. I added another patch/fixups on top converting the output to seconds (using double). Beware its untested in its current form since I had to solve some conflicts and currently not running windows. Will do that on my other machine in a bit. I think we can keep the commits (after squashing) like they are otherwise all the commit messages would be lost. IMO, it also documents how this function evolved.\nRegarding this issue I used the measurement function today to identify one place where git help is taking long in connection with virus scanners. Since the completion uses git help -a to list the commands its likely to help with\nthe completion as well. Have a look here for the patch:\nhttp://groups.google.com/group/msysgit/browse_thread/thread/bb3cc89fd08e2578\nI prefer to discuss it via mail since github sometimes generates to many, but you can also find it here\nhttps://github.com/msysgit/git/tree/hv/speedup_help \n. @dscho ok tested, fixed and pushed my changes to the hv/timer branch. I think its now ready for inclusion.\n. @dscho Could you have a look at the current state of https://github.com/msysgit/git/tree/hv/timer ? If you are fine with my fixups I would rebase/squash the fixup commits and merge the resulting commits to devel?\n. Is it safe to delete that folder? What is Microsofts recommendation on handling such a situation?\nIf you want to work on this install the msysGit development environment:\nRight column on this page: http://msysgit.github.com/\nHave a look at /share/WinGit/install.iss and modify it so the installer does what you think is best.\nCreate a commit containing your signoff (git commit -s), fork our repository and push your solution there.\n. If I understand the above correctly it will disable the virtual store for the etc folder. The virtual store functionality also hit me before and its quite hidden to the user that such things happen. How about disabling it for the whole git installation\ne.g. %ProgramFiles(x86)%\\Git or whatever the installation folder is?\nThat way people trying to fix their installation by replacing files in the installation in one version of git will automatically get the current files from the installer if they do an installation. Thats at least what I would expect after I did an installation instead of having files laying around that I used to fix my old installation. \nIMO, just disabling it for etc would not solve the issue the original poster had.\n. @patthoyts I agree. I missed that your command also made the files writable by users. My intention was only disable the virtual store for the Git* subtree. Since many people using Git for Windows are developers themselfes that would prevent confusion when they are trying out stuff (like replacing dlls) to fix things.\n. There have been several fixes regarding something like this please test.\n. If we do not get more information on this issue I will close it in a couple of days.\n. This issue is missing information to verify the validness. Therefore closing it. We can reopen it once more information arrive.\n. Hi @haf, as far as I know we only have a CI Server which runs our code on Linux to make sure that we do not break upstream. A Windows CI server would be awesome. If you could give us an account I would give it a try to setup something we can use.\nI am thinking about configuring jobs to build/test plain upstream git in our development environment. Then we could bring enough of our patches upstream so the testsuite passes. Once the tests in the upstream repository pass, we could give Junio a link to our CI results. That way he would have a hassle free way to watch out for incoming changes that break on windows. That is my longterm vision which will probably take some time to become true.\n. Please have a look at these links:\nhttps://github.com/msysgit/git/issues/8\nhttps://github.com/msysgit/msysgit/pull/12\n. Then it might be the rebasing issue again. A quick search for an explanation returned this\nhttp://groups.google.com/group/msysgit/browse_thread/thread/13fd7486bf4048c6\nbasically you can try to use rebase.exe (which has nothing to do with git rebase) to find a new base address for msys-1.0.dll once you have done that we would need to verify that it works on other machines as well and hope for the best.\n. If we do not get more information on this issue I will close it in a couple of days.\n. This issue is missing information to work on this. Therefore closing it. We can reopen it once more information arrive.\n. Testing your code in Windows XP 32bit now. Please cleanup your commit message according to sschuberth's comments and we can apply it.\n. Ah and of course the code as well...\n. My test on Windows XP 32bit was successful.\n. msysgit.github.com is providing Git for Windows so lets close this issue.\n. Why do you think that is a bug in git and not a connection issue? To me it looks like you simply do not have permissions to clone the remote repository.\nNormally the server additionally says something like: \"Permission denied (publickey).\" before that line. Did you remove that from your report?\n. What happens when you just omit the --recursive option?\nCould you maybe find a public repository where this happens? Then we would have a way to reproduce the issue.\n. No more details on this? Lets give this issue another couple of days and then close it.\n. This issue is missing information to verify the validness. Therefore closing it. We can reopen it once more information arrive.\n. Thanks that looks good. One thing I just noticed the commit messages are missing a signoff line. Its your saying that you have the rights to publish it under the GPL. Have a look in the previous commits how such signoffs look. You can generate them by git commit --amend -s when editing your branch in an interactive rebase.\nIf everyone else is fine with this change I would test and merge your commits after you've added the signoff.\n. @salsifis your changes do not work. Did you test your changes? I get\nMINGW32:/\nu@HEIKOS-WINDOWS / ((7028350...))\n$\nat the command prompt.\n. Yes that was one issue. Please compare the prompt you get before your change with the prompt after it. They should be the same. Just open one msys.bat window with devel checked out, then check out your branch and open a msys.bat window and compare both windows.\n. I am all for it! @wernight do you want to work on this?\n@dscho where does our OpenSSH come from? I do not find an openssh directory underneath src, I would suggest to create one there and add a release.sh for download, compilation and installing. Is that the correct path?\n. @wernight as @dscho pointed out that script should live on the msys branch with the name /src/openssh/release.sh.\nThat script should download the sources, unpack them, apply local patches (also committed in that directory), compile the new openssh and install it in the msysgit environment. Have a look how /src/rt/release.sh is doing that for bash.exe and the msys.dll with our local patches.\nHere is a description how to work on msys.dll itself:\nhttps://github.com/msysgit/msysgit/wiki/WorkingOnMsysGit#wiki-Compiling_a_new_msys_dll\na similar approach should probably be taken to compile openssh using msys.dll.\n. I just saw that Pat already did a patch for this here b4e03a5. Forget this pull request.\n. Please feel free to change what you feel is more correct and submit a pull request or send a patch to the list.\n. Thanks. You can build the installer by using the\n/share/WinGit/release.sh\nscript. Please test.\n. Could you give us a recipe to reproduce? For example the command you used to clone. Possibly referencing a public svn repo so everyone can take a look at it.\n. I slowly start to think that all those reports might have to do with having the registry based context menu and git-cheetah installed. Could the reporter post a screenshot of the context menu with double entries?\n. @dscho well I stole SDK from other tools. I think on window this term is quite common. Thats why I used it, so windows developers directly get what we mean. How about using a descriptive text link like we now do on the main page? I think the contribution part should not be as prominent as the download part on the main page because the truth is: More people are going to download than contribute.\nI think having a second page with some explanations how, where and what to contribute, like we now do, helps a lot.\n. Well what are we talking about here? The download link for the msysgit development environment or the link to the separate page? I would not put the download to the devel environment on the first page without any explanation. So as I wrote before I think \"Contribute\" is fine but I would like to have more there like: Report Bugs, Have Problems, ... That way everyone who has something to tell is lead to the explanation page first. Contribute sounds like you need to know what you want to do and people might not consider the explanation of a problem they are having as a contribution. Having multiple ways (in this case words) to find something is good because different people also have different ways of thinking.\n. BTW besides the discussion how we should link to the contribution part I really like the design and think that we should just go with it as soon as we have something complete.\n. Ok then I'll merge it \n. ",
    "lygstate": "Yes, it's a Git for Windows only problem,\nFirst, editor the %HOME%/.gitconfig file \nappend with\n[svn]\nauthorsfile = D:/CI/wsn/catos/authors-file.txt\nAnd then run the following command\ngit svn clone https://some-svn-url/trunk local_position\nThen you will found .gitconfig will be modified with a corrupted .gitconfig file under HOME directory\n[svn]\n    authorsfile = /d/CI/bld/D:/CI/wsn/catos/authors-file.txt\n. Sorry, its fixed up now.\n. ``` bash\nLYG@LYG-PC /d/CI/syncs/rsync\n$ git svn clone  http://msinttypes.googlecode.com/svn/trunk/\nInitialized empty Git repository in d:/CI/syncs/rsync/trunk/.git/\nr1 = b113beb112e02d48e7ac09adeb729a91b5b06ffb (refs/remotes/git-svn)\n        A       inttypes.h\n        A       stdint.h\nr2 = 75f1ad1d433e191e9b4928923b094e25e67d117e (refs/remotes/git-svn)\n        M       stdint.h\nr3 = 4182cf25b160bdc4ef0ed0f89fb839d211849e65 (refs/remotes/git-svn)\n        M       inttypes.h\n        M       stdint.h\nr4 = 1265550cf2551133e5803fcbd63ef377331459b3 (refs/remotes/git-svn)\n        M       stdint.h\nr5 = bcce6d58e974c78ba6340192b6c9074e4d9211cd (refs/remotes/git-svn)\n        M       stdint.h\nr6 = b0506cc40e1403592af0bb0c3dfecf6bdd1d588d (refs/remotes/git-svn)\n        M       inttypes.h\n        M       stdint.h\nr7 = b0bc93343e66fb5aa18bf00e7fa42dc90db88272 (refs/remotes/git-svn)\n        M       stdint.h\nr8 = b3ef901bcb5e132fff989e3d380aaec8cb9b9249 (refs/remotes/git-svn)\n        M       inttypes.h\n        M       stdint.h\nr9 = 35b6a34eae644546492d41ba0af6703d49235e8d (refs/remotes/git-svn)\n        M       inttypes.h\nr10 = 8cc9e083628f1464e97ec73dff95ada8389fc877 (refs/remotes/git-svn)\n        M       stdint.h\nr11 = 32075bef3f18003ae96df2991c082d3a8a93a7c1 (refs/remotes/git-svn)\n        M       inttypes.h\n        M       stdint.h\nr12 = 58ff9fae42ac253983832eaf929954e9f2168d1e (refs/remotes/git-svn)\n        M       inttypes.h\nr13 = b55e0e2e9c3a32177c05daf64b55ac93a1604439 (refs/remotes/git-svn)\n        M       stdint.h\nr14 = 2c52efb23b562baca58450e408e9828639eccc5d (refs/remotes/git-svn)\n        M       stdint.h\nr15 = a3410dd90706d79372111afaaa619b192b490c00 (refs/remotes/git-svn)\n        M       stdint.h\nr16 = ff8c284e9abe9c05d464675d94652a1326f128a8 (refs/remotes/git-svn)\n        M       inttypes.h\n        M       stdint.h\nr17 = eb7d5cc8fc67a73304d323ef588efdcc5587f197 (refs/remotes/git-svn)\n        M       stdint.h\nr18 = c9376542c3126010c65b9971993f13c03f42272a (refs/remotes/git-svn)\n        M       stdint.h\nr19 = 881347c5a557e8c4402d241b3c3460a54467e26a (refs/remotes/git-svn)\n        M       inttypes.h\nr20 = a18c2ece52d29d032138447170865c0b9b6c7d61 (refs/remotes/git-svn)\n        M       stdint.h\nr21 = 63989a8790244ac2617c652a64e94086402a559f (refs/remotes/git-svn)\n        M       stdint.h\nr22 = 6d92543758a53c5618222d1c482e8fd4815b047e (refs/remotes/git-svn)\n        M       stdint.h\nr23 = 32f10163549ab968b36bca6520205da46f1744bc (refs/remotes/git-svn)\n        M       stdint.h\nr24 = ba2487902f50b12af2747ac8e06ebff271467a67 (refs/remotes/git-svn)\n        M       stdint.h\nr25 = 3b108649b42d9b36e581520b0ac2e210fa023c68 (refs/remotes/git-svn)\n        M       inttypes.h\nr26 = 98c7de5b64901ab162fcb4f4c982f9c0f9d9c1f4 (refs/remotes/git-svn)\nChecked out HEAD:\n  http://msinttypes.googlecode.com/svn/trunk r26\nLYG@LYG-PC /d/CI/syncs/rsync\n$ git svn clone  http://msinttypes.googlecode.com/svn/ msinttyes\nInitialized empty Git repository in d:/CI/syncs/rsync/msinttyes/.git/\nsvn-remote.svn.url already set: http://msinttypes.googlecode.com/svn/trunk\nwanted to set to: http://msinttypes.googlecode.com/svn\n```\n. Can you be more specific about how to push a bunch of tags at a time?\n. This issue is not resolved, but a weird work-around.\n. ",
    "rpavlik": "I've added a signed-off-by line, addressed the missing backslash and the extra spaces around +. Have a local msysgit install now (the first commit was done using the github web interface after I solved that stackoverflow problem - have contacted GitHub suggesting Signed-off-by line button for web interface) and will be attempting to test it. I only have 64-bit machines to test on, however.\nDo you prefer that I test with what the netinstaller set up (which included updated versions of the submodules) or with stock submodules from the branch point?\n. OK, tested on Windows 7 x64 - the registry entry looks good, and the context menu works (though I get a \"your msys-1.0.dll is out of date\" message which I assume is because of the nature of my test build). The registry entry now matches what I used here https://github.com/rpavlik/git-windows-mintty/blob/master/setup.iss#L61 (and the manual fix I made with a registry file) which was verified to work on WinXP x64.\n. ",
    "pleriche": "Thank you all for the feedback and comments.  I've gone ahead and tested what happens when the LARGE_ADDRESS_AWARE flag is enabled for the executables, and so far the results seem to indicate that the memory manager and the applications work just fine with addresses above 2GB.\nThe first thing I did was to change malloc by adding the MEM_TOP_DOWN flag to all VirtualAlloc calls, the logic being that if memory is allocated from the top down that issues with addresses above 2GB will surface sooner.  I then added the --large-address-aware flag to the LDFLAGS setting in the makefile. Unfortunately the latter didn't have any effect (probably because I'm doing something wrong), so I just patched the LARGE_ADDRESS_AWARE flag in the executables with this nifty little tool: http://www.ntcore.com/4gb_patch.php\nI then ran a \"git gc --aggressive\" on one of my repositories that would normally throw an \"out of memory\" error.  This time it ran to completion, at one time hitting a commit size of just below 2.7GB.  A \"git fsck\" afterwards didn't report any problems.  I've since been using these executables for my regular work without issue.\nWith regards to a 64-bit build:  I agree that would be the ideal solution, but in the meantime it seems that enabling LARGE_ADDRESS_AWARE gives a \"free\" doubling of address space that will solve address space constraints for many users:  In order for me to get \"git repack\" to throw an \"out of memory\" error with a 4GB address space I would have to pick a window size and depth that are way beyond the point that gives a worthwhile reduction in pack size. (My tests are on a repository with about 30k commits and 2GB working set.)\n. I've figured out my mistake: I neglected to add the \"-Wl,\" prefix to LDFLAGS, so the subsequent \"--large-address-aware\" directive was ignored.\n@hvoigt I've submitted a pull request to the msysgit/git fork with the change to the makefile.  I've ran the testsuite with and without the MEM_TOP_DOWN flag added to all VirtualAlloc calls, and all tests pass.  \nWith regards to the 64-bit port:  I would love to help, but my C/C++ is very rusty and I am not familiar with the codebase so please allow me some time to find my feet.\n. I've done some more digging on this issue, and I believe that the installer is installing a symbolic link to git.exe for git-receive-pack.exe on Vista and later, but on XP it installs a physical executable.\nI am using TortoiseGit and CopSSH 3.03.  From what I can tell it looks like CopSSH 3.03 does not support symbolic links, because when TortoiseGit invokes \"git-receive-pack blah\" CopSSH executes \"git blah\" instead of \"git receive-pack blah\" on the remote server.\nIf this is in fact true then it would be unfortunate, because CopSSH 3.03 is the last free version available.  I have not tested other SSH implementations, so CopSSH could not be unique in this regard.  I wonder if it would not be possible to have an option at installation to install the physical files instead of symbolic links, even on Vista and later?\nFWIW here are the steps I follow when I install a server and workstation:\nOn the server:\n1) Install MsysGit, selecting the \"Run Git and included Unix tools from the Windows Command Prompt\" when asked.\n2) Add the git-core folder to the environment path (typically C:\\Program Files\\Git\\libexec\\git-core).\n3) Install CopSSH 3.03\n4) Go to the administrative control panel and create Windows users for all git users. Give them passwords.\n5) Activate all the Windows users under the CopSSH \"01. Activate a User\" option.  Untick the \"Create link to user's real home directory\" option when doing so. Create new public and private keys if you don't have keys already.\n6) If you already have private and public keys, copy them to the ...Program Files\\ICW\\home{username} folder and call them {username}.key and {username}.key.pub. Also copy the public key to ...ICW\\home{username}.ssh\\ and rename it to \"authorized_keys\".\n7) Reboot the server so the changes to the path can take effect.\n8) Create your Git repositories and make sure that you grant appropriate access rights to the repository folders for all users created in step 4.\n9) If you need remote access to the server, forward the SSH protocol (port 22, UDP and TCP) to the machine.\nOn the workstation:\n10) Copy the private key generated in 5 (or the one you used in 6) to the .ssh subfolder in your user profile (typically c:\\Users\\Administrator.ssh) and rename it to \"id_rsa\".\n11) If you've generated the private key with a passphrase and you wish to remove it, run \"ssh-keygen -p\" in a command prompt and specify a blank new passphrase.\n12) If you're using TortoiseGit, remember to specify in the installer that you're using OpenSSH.\n13) To check out a repository: git clone {username}@{servername}:{repodriveletter}:/{repopath}\nThese steps work fine when the server runs XP, but if it runs Vista or later any attempt to push via Tortoisegit will fail with \"git: 'c:/myrepos/reponame.git' is not a git command. See 'git --help'.\"\nThanks!\nPierre\n. Thanks for looking into this.  I can confirm that git-receive-pack.exe is a hard link on the Windows XP machine.\nWhen I copied across the libexec\\git-core folder to the Windows 2008R2 server from the XP machine I believe it created normal files, which fixed the problem for me.\nAs an experiment I have now deleted the git-receive-pack.exe file on the server and created a hard link with the following command:\nC:\\Program Files (x86)\\Git\\libexec\\git-core>mklink /H git-receive-pack.exe ....\\bin\\Git.exe\nWith the above hard link in place I can push to the repository successfully.  However, if I create a symbolic link instead by omitting the /H parameter, then an attempt to push to the repository fails with the error:\n'c:/repos/test.git' is not a git command. See 'git --help'.\n. As a test I've modified git.c's main() function to dump the input parameters to a text file.\nWith a hard link the following parameter values are logged when attempting to do a push via TortoiseGit over SSH:\n  1 of 2: C:\\Program Files (x86)\\Git\\libexec\\git-core\\git-receive-pack.exe\n  2 of 2: c:/repos/test.git\nWith a symbolic link the following parameters are logged:\n 1 of 2: C:\\Program Files (x86)\\Git\\libexec\\git-core\\git.exe\n  2 of 2: c:/repos/test.git\nIt seems that in the case of a hard link that the full path of the hard link is passed as first parameter (as expected), whereas with a symbolic link that the full path to the link target is passed instead.\nSomething else that I have noticed is that if I run git-receive-pack locally from a command prompt or bash that the correct parameter values are logged for both the hard link and symbolic link.  I therefore suspect that SSH (or CopSSH in particular) may be a contributing factor.\n. Results from using \"ssh -T user@server\" and running \"git-receive-pack test.git\" from the prompt:\nHard link:\n 1 of 2: C:\\Program Files (x86)\\Git\\libexec\\git-core\\git-receive-pack.exe\n  2 of 2: test.git\nSymbolic link:\n 1 of 2: C:\\Program Files (x86)\\Git\\libexec\\git-core\\git.exe\n  2 of 2: test.git\nSince both produce the same results when run from a local command prompt, I think the blame lies with CopSSH.  However, a cursory web search did not yield any mention of a CopSSH bug in the handling of symbolic links, so the observed behaviour may well be intentional.\n. @hvoigt Unfortunately I am not a customer either... well not in the sense that I've bought anything from them.  The version of CopSSH that I'm using is 3.0.3, which is the last free version.  I am fairly certain that even if this was brought to their attention that they probably won't fix the free version (which is already a few years old).\nThat said, I believe that the free version of CopSSH is still fairly popular, and in my experience is ridiculously easy to configure for use with msysGit.  Apart from this one problem, it also works very well.  When I searched the net for step by step instructions on how to configure a Git server for Windows I found two guides and both mentioned this version of CopSSH, which is how I came to use it.\n. The following works for me, and has the added advantage that you don't have to change the Windows path manually (provided you pick the \"Run Git and included Unix tools from the Windows Command Prompt\" in the msysGit installer):\ncd /bin\nln -f ../libexec/git-core/git-upload-pack.exe git-upload-pack.exe\nln -f git.exe git-receive-pack.exe\nNow that I know about this issue (and the appropriate workaround) it is no longer a problem for me.  Nevertheless, it remains a bit of a \"gotcha\" and I'm sure there will be others that will also struggle with this:  Even if the wiki is updated (will take a look at that next), there are other guides on the net that won't be.  Personally, I believe that having the installer create those two hard links would be the best solution.\n. Added this page to the wiki:\nhttps://github.com/msysgit/msysgit/wiki/Setting-up-a-Git-server-on-Windows-using-msysGit-and-CopSSH\n. @dscho I've submitted a pull request for the updated install.iss that creates hard links for git-receive-pack and git-upload-pack.  I've tested it and it works.\n@sschuberth Switching to hard links will solve the problem too, so either way I will be happy.\n. If you're considering removing all the other symbolic/hard links, then very few files remain in the libexec/git-core folder and it begs the question: Why not just move the remaining files into /bin and do away with libexec/git-core?  None of the installer options adds libexec/git-core to the path, so I would assume the executables in there are the less frequently used ones and moving them will probably not cause major disruption for most users.\nWith everything in /bin you could get away with just a single hard link (or even just a plain copy of git.exe)  for git-receive-pack.exe.  Git-upload-pack.exe is already a standalone executable, but since it currently resides in libexec/git-core it is not on the path.\n. @sschuberth Thanks, that's fine by me too - the problem is solved.\n. ",
    "ciaranj": "Hmm, not intentionally different no (I had no idea about that 'msys' branch or the perl within).  \nThat CGI is 3.15, the one I included is 3.59.  From instaweb/gitweb's PoV I doubt there is much difference but that is a very old version ( http://cpansearch.perl.org/src/MARKSTOS/CGI.pm-3.59/Changes says Dec 7, 2005 !) \nThe 'eg' folders appears to be a set of examples, that aren't required to drive gitweb/instaweb, I made a conscious decision (based on the web links described in Issue #11) to just included the contents of the lib folder to keep space down.\nI'm happy to proceed with either approach, which would you prefer? \nThank you for the note on sign-off, do I just throw that line in to my commits then?\n. Ok, I think I've addressed your comments now :)\n. Ah, sorry I'm used to just using my domain name or github account, I'll adjust my local repository's username accordingly (done)\n. Thank you.\n. commit: 6fb732bd0ae9c747b453a57abdbca3e4f0f46028  looks like it could be of use (I'm also interested, but am tied up still on the instaweb stuff)\nedit: ah but of course openssl != openssh ;) doh!\n. So, in an attempt to look (slightly) less than an idiot, I did a little research and came across this (year-old!) post from the mailing list that effectively details how one might set about such a thing: \nhttps://groups.google.com/forum/#!msg/msysgit/hoFU1pO2GFE/aFl-dFRXzrUJ \nUnfortunately (as far as I can tell) the currently available .lzma files depend on a later version of mingw (specifically msys-crypto-1.0.0.dll not msys-crypto-0.9.8.dll) so I'd guess we either have to compile from scratch against the version being shipped or update the version of mingw being used..which .. presumably is a PiTa :( \n. Surprisingly this: https://gist.github.com/2991314  seems to mostly work (in that it creates the binaries) but doesn't seem to play nicely with the existing repository (doesn't seem to spot that it is part of a Git repository).  (OpenSSH)\n. @dscho sure, please see https://github.com/msysgit/msysgit/pull/35  .. I was really aiming the gist at @wernight  though rather than hassle you :) ... I also think my msysgit install might be deeply b0rked I'm getting libconv2 errors everywhere (presumably related to the stalled work on instaweb) \n. @dscho ughhh just re-read your comment, you never wanted a pull request (thankfully, as it isn't suitable for pulling!) so I'll close that.  The branch you asked for can be found here: https://github.com/ciaranj/msysgit/tree/msys_openssh_script \nedit: And I've just re-tested on a separate 'clean' machine and discovered that my OpenSSH binaries depend on cygwin somehow .. I think I'll blat my msysgit installation and try again :)\n. So I have OpenSSH 5.9 compiled and working:\n```\n21:52:24 ciaranj@CNJ /tmp\n\nssh -v\nOpenSSH_5.9p1, OpenSSL 0.9.8r 8 Feb 2011\n```\n\nBut it isn't any faster :( Also my approach may not be liked (it depends on A.N.Other port of OpenSSH),  I'll throw it into a branch if anyone wants to proceed. ( https://github.com/ciaranj/msysgit/commits/msys_openssh_script please be aware that this is atop devel, not msys as I failed to get that to work!) \n. @dscho  I've extracted all the changes out as a single patch.  But the resulting binaries seem screwed, to be more specific they seem to struggle with terminal inputs and outputs, I lack the capability to figure this stuff out, still hopeful that @wernight might have some ideas ;) \n. @dscho Hmmm,  i thought I'd pushed it Up into the existing branch (https://github.com/ciaranj/msysgit/tree/msys_openssh_script ). Can you see the commit in there yet?\n. :( Why can't I see how to set this pull request against the msys branch ?/ ? :( \n. Sorry for the noise, closing this as I can't seem to find a change commits button, and re-submitting :( \n. I mis-understood @dscho 's request. He never wanted a pull request, my bad! (I've update the changes based on Erik's feedback anyway though :)\n. I can't seem to get the docs working though (missing asciidoc?), nor am I sure if this is the correct approach (a .exe is not created etc. etc. )  what do we think? \nI'd like to start my team looking at using git subtree, and would prefer it to be an out-of-the-box experience, but what do you folks think?\n. @patthoyts I expected to have to do that, however the installers I've built, work ?\nLooks like line 39&40 of copyfiles.sh  covers me: \n(cd $MSYSGITROOT && tar cf - \\\n$(ls {bin,libexec/git-core}/git* | grep -v 'cvs\\|shell\\|archimport\\|instaweb') \\\nSo I think we're golden?\n. Weird, I knew about the .gitignore requirement, but oddly that wasn't causing the release.sh to fail for me... ah, but wait I was -f'ing the release (doh!) \nI'll take a look at the check stuff you mention, thanks :)\n. ",
    "andynagai": "The problem is that most places on the web say to get 'msysgit'. So I thought the old logo was cygwin and the new logo was the one I wanted. I didn't even read the fine print. Dont know what your all upset about. I am not upset or hostile to anybody. Chill\n. You want to close this be my guest. I downloaded the correct one and happy as can be.\n. On your home page I suggest you just use the new logo and have the description as the links.\nSomething like\nDownload Git for Windows\nand\nDownload Git for developers, testing etc...\n. ",
    "antis81": "Sorry, just tried it and first it looked like that helps. But it's still same behaviour. For me it looks more like an issue to the bash completion itself, but that's just a guess.\n. Thanks, that's better than nothing :). I am running Process Hacker, which is very good for that purpose. System performance seems to be normal and nothing to see here (processor, ram, io, network). Well, I think it has something to do with the network topology, but very unsure. I can do some tests tomorrow without network connection. I was hoping, it is a more common behavior. Nobody else experiencing that?\n. No, that was before as of active directory structure. But now I changed $HOME pointing to %USERPROFILE%. So everything should run local. I really don't currently have any idea, why this happens. Most times it happens on first start or when I didn't use the git bash for several time. I tried to unplug the ethernet cable (when it happened already), but no change. I want to try it another time directly after logon, before starting bash. We're using a lot of network drives and so on.  So, looks like I have to go on, trying out different configurations to locate the root of evil (insert dramatic music here :)).\n. Hey, thanks for that. At least someone, who experiences exactly the same!\n. Thanks! I'll check it.\n. Just waited for issue #32 to be included in installer, as I need the svn bridge as well. I will check it the next few days to be sure, but it really seems to be good now :heart:.\n. Tried it on several company PCs and it works really good now. Thanks a lot!\n. ",
    "perler": "is it possible you broke something on the way? I now get this message when I try to start git bash. windows 7 / 64bit 1.0.20.2\n. problem here is, the virtualstore is empty: \nC:\\Users\\pat\\AppData\\Local\\VirtualStore>dir\n Volume in drive C is Windows7_OS\n Volume Serial Number is 0E56-6F81\nDirectory of C:\\Users\\pat\\AppData\\Local\\VirtualStore\n26.02.2010  15:12              .\n26.02.2010  15:12              ..\n               0 File(s)              0 bytes\n               2 Dir(s)  30.749.528.064 bytes free\nC:\\Users\\pat\\AppData\\Local\\VirtualStore>\n. yes. also, there are no other VirtualStores on the system: http://screencast.com/t/SYSfWlHAw\n. ",
    "airdrummingfool": "I am having the same issue. git submodule update --init --recursive failes to clone the sub-submodule, and gives it some crazy relative/absolute path. The error it gives is something like: \nfatal: Not a git repository: ../../../../../../../../../../..//c/Use\nrs/Username/Documents/repo/.git/modules/path/to/submodule\nThis can be manually fixed by editing the .git file of the sub-submodule and fixing the path.\nDiscussion here: http://comments.gmane.org/gmane.comp.version-control.git/190258\n. ",
    "pquerna": "The recursive submodule update works as expected with Git-1.7.8-preview20111206, but not Git-1.7.11-preview20120710.\n. ",
    "drewnoakes": "I'm still seeing this issue on version 1.7.11.msysgit.1.  A colleague on OSX doesn't see this. We managed to create a repro case for this that fails on msysgit and passes on OSX:\nmkdir tmp\ncd tmp\nmkdir repoA\nmkdir repoB\nmkdir repoC\ncd repoA\ngit init\ntouch README\ngit add .\ngit commit -m \"First commit\"\ncd ../repoB\ngit init\ntouch README\ngit add .\ngit commit -m \"First commit\"\ncd ../repoC/\ngit init\ntouch README\ngit add .\ngit commit -m \"First commit\"\ncd ../repoA\ngit submodule add ../repoB subB\ngit add .\ngit commit -m \"Added submodule\"\ncd ../repoC/\ngit submodule add ../repoA subA\ngit add .\ngit commit -m \"Added submodule\"\ngit submodule update --init --recursive\n1.7.11.msysgit.1 shows the error message:\nSubmodule 'subB' (c:/Users/Drew/tmp/repoB) registered for path 'subB'\nCloning into 'subB'...\ndone.\nfatal: Not a git repository: ../../../../../../..//c/Users/Drew/tmp/repoC/.git/modules/subA/modules/subB\nFailed to recurse into submodule path 'subA'\nMy colleague sees:\nSubmodule 'subB' (/Users/kelvinluck/Sites/tmp/tmp/tmp/repoB) registered for path 'subB'\nCloning into 'subB'...\ndone.\nSubmodule path 'subB': checked out '988edc1e2e427c0d058b86e083b451bb24f315cb'\nHe's using git version 1.7.11.3 on OSX Lion.\nI have archives of both directory trees, but was unable to attach them to this issue. Please let me know if you need these.\n. Sounds good @kusma. Can you recommend an approach for me until a new release is put together? Thank you.\n. @pquerna, I posted a simple repro case to #22 that may convince the dev team to reopen that issue. If you can try it on your installation to verify the bug in another environment, it'd be great.\n. ",
    "haf": "Hi @dscho - I'm afraid I can't sponsor any person doing it, but as I said, I can give you accounts on a Windows/TeamCity CI server, plus helping you set it up on it. But from your comment it seems that you already have CI?\n. ",
    "MattTW": "I built an devel install and tested it,  however it appears to be hanging at the same place.    My read of the links above is that this issue first appeared prior to 7.21.7 and was fixed in that version - however the same/similar issue reappeared sometime between 7.21.7 and 7.26.0/current and has not been tracked down yet.\nCan we try just updating curl from 7.21.1 to 7.21.7?   I started to hack at this but I have a feeling you can do it way faster/better.  :)\nThanks for the effort so far!\n. I agree this will likely be a common issue for corporate Windows users going through an ntlm proxy.\nI created a new install from the latest devel stuff, but the problem still exists.  I also tried updating the curl release.sh to use curl 7.21.7 (the dogfood patch also needed a slight tweak), ran that successfully and created another install from that,  and the problem still exists there as well.\nThe weird thing is that it doesn't happen with all servers.   It hangs every time going against github and codebasehq repos, but never against bitbucket repos - so there is something specific about how the servers are communicating that is also a factor.  Unfortunately it is beyond my skills to troubleshoot much further,  but I will happily test and do anything else I can to help.  :)\nThanks!\nMatt\n. The only other clue I have as I mentioned before is that Git for Windows 1.7.9 works fine.\n. ",
    "aroben": "@dscho @patthoyts This is awesome! :clap: I suspect a number of users of GitHub for Windows have been running into this.\nShould this issue be closed now?\n. @patthoyts I didn't make any attempt to fix openssl.exe. The fix only applies to code that calls a function like SSL_CTX_load_verify_locations like libcurl does. It would be awesome to fix openssl.exe too!\n. > Well openssl calls up the same library functions. In this case I'm sticking some printfs in there and I can see your new code path is called. My feeling at the moment is that the input path is not actually utf8 but the system locale.\nYes, that's correct. openssl.exe uses a main() function, which will receive arguments encoded using the current code page. It would instead need to either use a wmain() function or call a function like GetCommandLineW to get the arguments as UTF-16, then transcode them to UTF-8.\n\nSo can you suggest a curl based test that would show that the fix is still working please.\n\nWhat I did was set http.sslcainfo to a path that contained non-ASCII characters, then ran this command:\nshell\necho list | git remote-https origin https://github.com/aroben/pepto-symbol\nWithout my fix, it prints an error about not being able to find the CAfile. With my fix, it lists the refs in that repository.\n. Whoops, wrong target branch. Sorry for the noise!\n. I just looked at the compare view between github/msysgit and msysgit/msysgit. I see the following changes:\nPossibly useful to upstream\n\nWe force LF line endings in etc/termcap, etc/profile, and zlib-config.patch.\nNew attributes in etc/gitattributes to help with merging Visual Studio files. However I seem to recall that we weren't totally sure these were actually helpful.\nNew etc/gitconfig options:\ncolor.ui = true\npush.default = upstream (isn't this the default in Git itself now?)\nBeyond Compare 3, p4merge.exe, and Visual Studio 11 diff/merge tools\n\nProbably not wanted upstream\n\nA new README specific to our fork.\nA new bin/ssh-noprompt script. GHfW uses this as its GIT_SSH command. I'm not sure why this is in github/msysgit rather than being in GHfW itself.\nNew etc/gitattributes.suggested and etc/gitignore.suggested files that GHfW can install into new and existing repos. Again I'm not sure why these are in github/msysgit rather than in GHfW itself.\nNew etc/gitconfig options:\ncredential.helper = !github --credentials\nalias.dt = difftool\nalias.mt = mergetool\nA do-nothing ghcleansmudge filter\nA custom etc/ssh_config to make GHfW's custom SSH key work.\nSome build scripts used for packaging our fork for GHfW\ngit-tfs\n. \n",
    "soltmar": "I got the same under Git 2.5.3 (Windows 64 bit).\nIt hangs when I do git pull from bitbucket.\nIt asks me for password to bitbucket and then just hangs.\nI am behind corp proxy.\nProxy details are set in System Env variables\nWeird thing is that configuration which I have works perfectly for Git 1.9.0 and 1.9.5\nAny clues ?\nVERBOSE:\n- Couldn't find host bitbucket.org in the _netrc file; using defaults\n- Found bundle for host bitbucket.org: 0x580940\n- NTLM-proxy picked AND auth done set, clear picked!\n- timeout on name lookup is not supported\n- Hostname proxy.xxxxxxxxxxx was found in DNS cache\n-   Trying xxxxxxxxxxx...\n- Connected to proxy.xxxxxxxxxxx (xxxxxxxxxxx) port 8080 (#2)\n- Establish HTTP proxy tunnel to bitbucket.org:443\n- Server auth using Basic with user 'xxxxxxxxx'\n\nCONNECT bitbucket.org:443 HTTP/1.1\n  Host: bitbucket.org:443\n  User-Agent: git/2.5.3.windows.1\n  Proxy-Connection: Keep-Alive\n\n< HTTP/1.1 407 Proxy Authentication Required\n< Proxy-Authenticate: NTLM\n< Proxy-Authenticate: BASIC realm=\"xxxxxxx\"\n< Cache-Control: no-cache\n< Pragma: no-cache\n< Content-Type: text/html; charset=utf-8\n< Proxy-Connection: close\n< Connection: close\n< Content-Length: 849\n<\n- Ignore 849 bytes of response-body\n- Connect me again please\n- ALPN, offering http/1.1\n- Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH\n- successfully set certificate verify locations:\n-   CAfile: C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt\n  CApath: none\n- SSL re-using session ID\n- Unknown SSL protocol error in connection to bitbucket.org:443\n- Closing connection 2\n. ",
    "linquize": "If the problem is still valid to git for windows 2.x, please report to \nhttps://github.com/git-for-windows/git/issues\n. What is your system locale?\n. @SrujBarai which version?\n. You may consider using the portable zip package.\nhttps://github.com/msysgit/msysgit/releases/download/Git-1.9.2-preview20140411/PortableGit-1.9.2-preview20140411.7z\n. Same as #162?\n.  but notepad does not support \\n\n. ship a small size editor (notepad2) that can handle lf , like tortoisegit does.\n. Why subversion 1.4.6? Isn't is too old?\n. Did you test with https://github.com/git-for-windows/git 2.4?\n. Files added to share/WinGit/copy-files.sh\n. Yes, the installer works on Win 8.1 x64.\n. On Win 8.1, I simply pressed the start button. Did not use search function.\n. let me check my VM ...\n. It is 32-bit color depth.\n. Before the patch, my Win 8.1 looks like @kusma 's Git Bash icon\n. The script should download mingw-w64 (~360MB) and unzip to /src/mingw-w64/\n. A shell extension should not set environment variable.\n. Does it work with git:// or ssh protocol?\n. I did not test with large tile with text inside the tile.\nIn #270, the text is on the right side of the tile\n. @wolfgang42 \nAfter applying your patch, it looks like\n\n. For git 2.x icon, Windows auto calculate the background color as green, without an explicit xml manifest file.\n\n. Your git version is > 2.0\nPlease report issue to https://github.com/git-for-windows/git/issues\n. git-scm.com background color\n. ",
    "vitkhudenko": "Well, I reviewed those links and I don't find them to be related to the issue I've encountered. I forgot to specify I'm on a 32-bit OS (while the links are about 64-bit OS issues). And even more - on my another machine which is a Win 7 64-bit the new version (Git-1.7.10-preview20120409) works fine. :)\n. Just tried Git-1.7.11-preview20120710 - got the same STATUS_ACCESS_VIOLATION issue and reverted back to Git-1.6.5.1-preview20091022.\n. kusma, I'd like to help. But I don't know what to do exactly. I have zero experience in Windows/C/C++ programming. If you (or someone else, maybe hvoigt) could give me detailed steps of what to do - I'll surely do it.\n. ",
    "rdp": "FWIW if I use sh.exe from mingw instead of from git, I avoid this...\n. ",
    "jianwubayiba": "i have this problem...not fixed it yet\nsomeone tell me the answer\n. replace msys-1.0.dll by a new one in \"documents and settings\\administrator\\local setting\\application data\\github\\portablegit_xxxx...\"\n. ",
    "deanzhang": "I Got the same problem in win xp sp3.\nMSYS-1.0.12 Build:2011-07-20 17:52\nException: STATUS_ACCESS_VIOLATION at eip=68001FE4\neax=00000001 ebx=FFFFFFF7 ecx=00000001 edx=00000001 esi=0022FCC4 edi=0022F8C4\nebp=0022F6F4 esp=0022F6CC program=d:\\Program Files\\Git\\bin\\sh.exe\ncs=001B ds=0023 es=0023 fs=003B gs=0000 ss=0023\nStack trace:\nFrame     Function  Args\n0022F6F4  68001FE4  (0022FBC0, 682BC000, 01CE5BBC, 5CD6D400)\n0022F714  680022D9  (0022F8C4, 00000000, E8908FE6, 9CE6B18A)\n0022F734  6801367D  (0022FBC0, 00000000, 00110000, 00000000)\n0022FC00  6805E455  (0000003C, 80000000, 000007AC, 1F2CAD67)\n 964559 [main] sh.exe\" 6140 handle_exceptions: Exception: STATUS_ACCESS_VIOLATION\n1085357 [main] sh.exe\" 6140 handle_exceptions: Error while dumping state (probably corrupted stack)\n. ",
    "shaise": "this also happens in ver 1.8. To overcome it I used msys-1.0.dll from version 1.7.6\n. ",
    "Stupid-Git": "I had problems on my Windows XP machine, and I finally got around it by upgrading to Windows 7.\nHowever, it was working yesterday and then today I suddenly got the same error!?! WTF!?! I didn't even install any new software; I didn't even reboot! Anyway, I searched the web and found this\nhttp://qiita.com/shiena/items/de89dad3bfca33ce776b and this\nhttp://d.hatena.ne.jp/miau/20131229/1388301913\nbut it is only useful if you understand Japanese, but I guess you can use google translate or something.\nWhat solved it for me was to DELETE FILES IN THE TMP/TEMP directory.\nHere is a link or 2 on removing such files. (Or just Google \"windows 7 clearing temp files\")\n  http://metadataconsulting.blogspot.jp/2011/08/how-to-clear-windows-7-temporary-files.html\n  http://metadataconsulting.blogspot.ca/2014/04/spring-disk-cleaning-detailed-look-at.html\nI hope this is useful to others as well.\nCheers, Stupid-Git\n. ",
    "a-iv": "Please reopen this issue.\nI can reproduce it:\n```\nC:>ver\nMicrosoft Windows [Version 6.3.9600]\nC:>\"C:\\Program Files (x86)\\Git\\bin\\git.exe\" --version\ngit version 1.9.4.msysgit.2\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\nCopyright (C) 2005 Free Software Foundation, Inc.\nC:>dir /b %TEMP%\nC:>echo > %TEMP%\\\u0421\u043f\u0438\u0441\u043e\u043a.foo\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\n      0 [main] sh.exe\" 17588 handle_exceptions: Exception: STATUS_ACCESS_VIOLATION\n    865 [main] sh.exe\" 17588 open_stackdumpfile: Dumping stack trace to sh.exe.stackdump\nC:>type sh.exe.stackdump\nMSYS-1.0.12 Build:2012-07-05 14:56\nException: STATUS_ACCESS_VIOLATION at eip=68001FE4\neax=00000001 ebx=FFFFFFF7 ecx=00000001 edx=00000001 esi=0028FCC0 edi=0028F8C0\nebp=0028F6F0 esp=0028F6C8 program=C:\\Program Files (x86)\\Git\\bin\\sh.exe\ncs=0023 ds=002B es=002B fs=0053 gs=002B ss=002B\nStack trace:\nFrame     Function  Args\n0028F6F0  68001FE4  (0028FBC0, D4CAD000, 01CFED58, E3F71700)\n0028F710  680022D9  (0028F8C0, 00000000, 9FD0A1D0, A1D098D0)\n0028F730  6801366A  (0028FBC0, 00000000, 00110000, 00000000)\n0028FC00  6805E475  (80000000, 0000002C, 056F03C7, 00110000)\n 252232 [main] sh.exe\" 17588 handle_exceptions: Exception: STATUS_ACCESS_VIOLATION\n 256766 [main] sh.exe\" 17588 handle_exceptions: Error while dumping state (probably corrupted stack)\nC:>del %TEMP%\\\u0421\u043f\u0438\u0441\u043e\u043a.foo\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\nCopyright (C) 2005 Free Software Foundation, Inc.\n``\n. @t-b I have Russian version of Windows withcp866` cmd code page.\nSo you may have an issue to create such file using cmd.\nAnyway you can copy text \u0421\u043f\u0438\u0441\u043e\u043a.foo and create file using explorer.\n. ```\nC:>echo %TEMP%\nR:\\TEMP\nC:>echo %TMP%\nR:\\TEMP\nC:>echo > R:\\TEMP\\\u0421\u043f\u0438\u0441\u043e\u043a.foo\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\n      0 [main] sh.exe\" 13492 handle_exceptions: Exception: STATUS_ACCESS_VIOLATION\n   1652 [main] sh.exe\" 13492 open_stackdumpfile: Dumping stack trace to sh.exe.stackdump\nC:>del R:\\TEMP\\\u0421\u043f\u0438\u0441\u043e\u043a.foo\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\nCopyright (C) 2005 Free Software Foundation, Inc.\nC:>REM Change one symbol\nC:>echo > R:\\TEMP\\\u0421\u043f\u0438\u0441\u043e-.foo\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\nCopyright (C) 2005 Free Software Foundation, Inc.\nC:>del R:\\TEMP\\\u0421\u043f\u0438\u0441\u043e-.foo\nC:>echo > R:\\TEMP\\\u0421\u043f\u0438\u0441\u043e\u043a.foo\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\n      0 [main] sh.exe\" 7112 handle_exceptions: Exception: STATUS_ACCESS_VIOLATION\n   1024 [main] sh.exe\" 7112 open_stackdumpfile: Dumping stack trace to sh.exe.stackdump\nC:>REM One more time\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\n      0 [main] sh.exe\" 16880 handle_exceptions: Exception: STATUS_ACCESS_VIOLATION\n    623 [main] sh.exe\" 16880 open_stackdumpfile: Dumping stack trace to sh.exe.stackdump\nC:>del R:\\TEMP\\\u0421\u043f\u0438\u0441\u043e\u043a.foo\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\nCopyright (C) 2005 Free Software Foundation, Inc.\nC:>REM Try another temp folder\nC:>mkdir C:\\TEMP\nC:>set TEMP=C:\\TEMP\nC:>set TMP=C:\\TEMP\nC:>echo %TEMP%\nC:\\TEMP\nC:>echo %TMP%\nC:\\TEMP\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\nCopyright (C) 2005 Free Software Foundation, Inc.\nC:>echo > C:\\TEMP\\\u0421\u043f\u0438\u0441\u043e\u043a.foo\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\nCopyright (C) 2005 Free Software Foundation, Inc.\nC:>REM What's going on?\nC:>echo > R:\\TEMP\\\u0421\u043f\u0438\u0441\u043e\u043a.foo\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\n      0 [main] sh.exe\" 12944 handle_exceptions: Exception: STATUS_ACCESS_VIOLATION\n   1273 [main] sh.exe\" 12944 open_stackdumpfile: Dumping stack trace to sh.exe.stackdump\nC:>del R:\\TEMP\\\u0421\u043f\u0438\u0441\u043e\u043a.foo\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\nCopyright (C) 2005 Free Software Foundation, Inc.\nC:>REM Where is my TEMP in sh?\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\"\nsh.exe\"-3.1$ echo $TEMP\n/tmp\nsh.exe\"-3.1$ echo $TMP\n/tmp\nsh.exe\"-3.1$ echo > /tmp/bar.baz\nsh.exe\"-3.1$ exit\nC:>dir /b C:\\TEMP*.baz\nbar.baz\nC:>dir /b R:\\TEMP*.baz\nFile not found.\nC:>REM Magic!\n```\nI've set C:\\TEMP value for %TEMP% and %TMP% in Windows settings, restart cmd and reproduce the same results.\nAfter Windows restart:\n```\nC:>echo %TEMP%\nC:\\TEMP\nC:>echo %TMP%\nC:\\TEMP\nC:>echo > C:\\TEMP\\\u0421\u043f\u0438\u0441\u043e\u043a.foo\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\nCopyright (C) 2005 Free Software Foundation, Inc.\nC:>echo > R:\\TEMP\\\u0421\u043f\u0438\u0441\u043e\u043a.foo\nC:>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\nCopyright (C) 2005 Free Software Foundation, Inc.\n```\nI've set R:\\TEMP value for %TEMP% and %TMP% in Windows settings, restart Windows.\nNow I can reproduce an issue.\nNote: I am using SoftPerfect RAM Disk to store my temp on disk R:.\n. Steps to reproduce an issue:\n1. Format any disk as FAT32, e.g. flash card (FAT32 required).\n2. Change your TEMP to point any folder on this disk.\n3. Restart Windows (I don't understand why, but required).\n4. Create file started with \u0421\u043f\u0438\u0441\u043e\u043a (I don't understand why, but required):\n   C:\\>echo > %TEMP%\\\u0421\u043f\u0438\u0441\u043e\u043a.foo\n5. Start sh.\nC:\\>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\n      0 [main] sh.exe\" 13492 handle_exceptions: Exception: STATUS_ACCESS_VIOLATION\n   1652 [main] sh.exe\" 13492 open_stackdumpfile: Dumping stack trace to sh.exe.stackdump\nReproduced on Windows 8.1 and Windows Vista.\n. @RouR just use NTFS :)\n. ",
    "t-b": "@a-iv What language version of windows do you have?\nCan I just copy&paste the cyrillic letters from your posting or do I have to enter it somehow fancy?\n. I can't reproduce that here with Win7x64\n```\nC:\\Users\\thomas\\AppData\\Local\\Temp>dir *.foo\n Volume in Laufwerk C: hat keine Bezeichnung.\n Volumeseriennummer: 06AA-69B8\nVerzeichnis von C:\\Users\\thomas\\AppData\\Local\\Temp\n22.10.2014  17:12                30 \u0421\u043f\u0438\u0441\u043e\u043a.foo\n               1 Datei(en),             30 Bytes\n               0 Verzeichnis(se),  8.057.696.256 Bytes frei\nC:\\Users\\thomas\\AppData\\Local\\Temp>ver\nMicrosoft Windows [Version 6.1.7601]\nC:\\Users\\thomas\\AppData\\Local\\Temp>\"C:\\Program Files (x86)\\Git\\bin\\git.exe\" --version\ngit version 1.9.4.msysgit.2\nC:\\Users\\thomas\\AppData\\Local\\Temp>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\nCopyright (C) 2005 Free Software Foundation, Inc.\nC:\\Users\\thomas\\AppData\\Local\\Temp>chcp 866\nAktive Codepage: 866.\nC:\\Users\\thomas\\AppData\\Local\\Temp>\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --version\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\nCopyright (C) 2005 Free Software Foundation, Inc.\n```\n. @zhangchunlin mingwGitDevEnv and \"Git for windows\" are supposed to be run on windows. They might work with wine on linux but this is not the intended usage.\n. > But this looks like a deep shit to walk through really fast.\nI think there are a lot of problems in git for windows which are more important to tackle than saving ~150MB in installation size.\nIn case you want a quick and dirty solution you can either try the already mentioned batch scripts or have a try with ntfs hardlinks 1. Although I would object to include both \"workarounds\" into the installer (If I'd get asked).\n. Is this issue still encountered? From the limited information here I can not reproduce it. Git preserves the case of all my folder/files/etc. names.\n. @dscho thanks for adding me!\n. This grep does not work.\n$ ./grep.exe -r \"a\" .\nH:\\mingwGitDevEnv_installed\\grep.exe: .: Bad file descriptor\nSo a plain upstream grep compiled in mingw is not enough.\n. Are you in bash or cmd shell?\n. A step-by-step guide to reproduce it is really necessary. I've never hit that issue with my setup (client: current git for windows, server debian squeeze with ssh access only).\n. @socantre If that would be the OPs problem, there is a official workaround since https://github.com/msysgit/git/commit/ea8c6fc4c1d81544674a49cfd6b8734fbbc8843b.\n. @socantre The workaround I mentioned is in git since Git-1.9.4-preview20140611.\n. git/git@479eaa8 can be cherry-picked to maint-1.9.\nAny objections to that?\n. @piotr-cz Thanks for confirming! I'll make a PR to include git/git@479eaa8 into the maint-1.9 branch.\n. > Anyway, I don't think the full history is commonly needed to participate at first; If one want to know the history in\n\ngrafted clone, you know, git fetch --depth can be used.\n\nIn my eyes it should be as easy as possible to contribute. And it is easier if I get a complete, although big, package.\n. The patch from the link, msysgit/git@95c62fb9ea35fab9706792e858ce66967501eb00, is already included in msysgit/git/tentative-1.8.5. Unfortunately the documentation does not show up in gitster/git-htmldocs.\n. For the llvm test suite execution I'm using a msys python from  1. Its binary only and I expect it to be really heavily patched.\nI guess using that python is not really an option.\n. As we only need python as a tool for the tool, I'd be happy with a msys python.\n. > Also, I was more thinking about technical reasons why one Python flavor would be better than the other.\nI only used a msys python so far, and that was not exchangeable for a mingw python, as posix style paths in .py files were used. So this looks like the same reason we have a msys perl, and not a mingw perl.\n. For \"make doc\" in git to work we need the following tools:\n- msys-python (needs msys-libffi)\n- asciidoc\n- xsltproc(needs libxml2 and libxslt)\nI'll have a try with that in the next weeks.\nThe main reason I don't want to add python to git for windows itself is the support hassle. Having a python which is able to run asciidoc is a completely different thing from supporting some arbitrary user program. And I also can't wait for the \"please update python to 3.x\" issues popping up ;)\n. For me your test script crashes\n```\n$ ./test.sh\nlol\n      0 [main] bash 5920 open_stackdumpfile: Dumping stack trace to bash.exe.stackdump\ncontinued\n```\nso the msysgit bash is broken in this matter. You can try your luck with the sources, see https://github.com/msysgit/msysgit/wiki#how-to-participate.\nMaybe that is even an old bash bug as the shipped bash version is 3.1.0(1)-release. Unfortunately bash 4.x is out of reach for the forseeable future.\n. @kusma But 3b9b116 requires a unix shell and 4804aab not. As far as I understand it that would then break the help browser for cmd/power shell users.\n. @kusma I'm convinced!\n. Both c:/r/r.gz and /c/r/r.gz are absolute paths. The former being a windows style path and the latter a unix-style path.\nAre you using bash or cmd.exe?\n. Well http://gitbucket/.. is obviously not reachable for me.\nI tried with\n\u00b4\u00b4\u00b4\n$ git --version\ngit version 1.8.3.msysgit.0\n\u00b4\u00b4\u00b4\nand cloning https://github.com/jquery/jquery.git works here.\nDoes \u00b4\u00b4\u00b4curl -v  https://github.com/jquery/jquery.git\u00b4\u00b4\u00b4 work for you?\n. Dup of #58.\n. AFAIK you should not touch the ignorecase setting on windows. \nSee https://www.kernel.org/pub/software/scm/git/docs/git-config.html\n\ncore.ignorecase\nIf true, this option enables various workarounds to enable git to work better on filesystems that are not case sensitive, like FAT. For example, if a directory listing finds \"makefile\" when git expects \"Makefile\", git will assume it is really the same file, and continue to remember it as \"Makefile\".\nThe default is false, except git-clone(1) or git-init(1) will probe and set core.ignorecase true if appropriate when the repository is created.\n\nTo rename a file which only differs by case do\ngit mv ABC.txt ABC.tmp\ngit mv ABC.tmp abc.txt\n. Please post a minimal working example including the initial git clone of a public repository.\n. > Many, many (most?) windows user tend to use putty (and thus plink/pageant) for ssh functionality.\nWhich is a wrong assumption. Just read all the bug reports/mails about the slow ssh transfers with the packaged openssh.\n. I'm sorry I don't understand your issue. Please explain it more in detail.\n. Please explain your issue properly. I don't like guessing.\nLooks like duplicate of #31.\n. Currently the following subversion version is installed:\n$ git svn --version\ngit-svn version 1.8.5.2.msysgit.0 (svn 1.4.6)\n. Please search the exising issues first before filing new ones.\nDuplicate of #31.\n. @msysgit/team-msysgit Is mixing cygwin and msysgit supported by our standards? From my POV not.\n. @PeterDaveHello You can use https://github.com/sschuberth/mingwGitDevEnv-packages/tree/master/msys-grep as a starting point for building grep. Although for msysgit you have to switch from the mgwport script to a plain bash script.\n. Please provide a minimal working example and the output of git --version.\n. As pointed out on the mailing list we need a pull request which builds xargs from source. Checking in binaries from unknown places is not a way we want and will pursue.\nAnd in msysgit we have a custom built msys DLL, so adding binaries built against a different msys DLL is not acceptable.\nI'll leave the PR open for now so you can amend your commits.\n. >  I Googled this a bit and it seems like there is an arbitrary limitation on number of tags in Windows.\nSource?\nCan you try\nsh\nGIT_TRACE=1 git push -f --tags archive\nand post the output.\n. How about marking this issue as BackLog and reopen it?\nI personally also don't like issue/bug reports which are closed and not fixed.\n. @dolmen Your msys-perl branch builds fine here. Nice work!\nCould you fix the issues raised in the commit notes by @dscho and @kusma?\nIn general I'm also in favour of dropping 3caa5d6 as that is not really necessary for everyone.\nAnd please also add a sign off to all commits. In order to nicify the commits it is usually easiest to force-push to the same branch again.\n. > I'm surprised because here make test is reporting failures, mostly in tests related to the tainting \n\nfeature of perl. You can view my build log in ebaccfa.\n\n@dolmen I was talking about the building of perl, not the tests. Very few packages compiled under msys/mingw have test suites that pass completely.\n. @gdevenyi See for example https://github.com/msysgit/msysgit/tree/master/src/curl\n. Not reproducible with git 1.7.10.4 on debian wheezy. So it is a windows only problem.\nPlease open a bug against https://github.com/msysgit/git.\n. @patthoyts In mingwGitDevEnv we already have tcl/tk 8.6.0.\n. Have also a look at https://github.com/t-b/git-pre-commit-hook-windows-filenames.\n. Please read https://github.com/msysgit/msysgit/wiki#issue-reporting-guidelines before creating an issue report.\nJust saying that we should update package XYZ will not work at all.\n. Lets get mingwGitDevEnv working so that the old compiler here does not pose a problem.\nBtw. I would also not think that switching to the \"Personal Builds\" for mingw64, which are up to date, is too difficult.\n. @dscho of course the mingw-w64 compiler. \n. I guess you mean\n\"Keep the DLL-files, as msys-openssh depends on them.\".\nACK.\n. +1 Although i'm a vim user ;)\n. Would be perfect if you could add an entry to our FAQ.\n. @silverkorn The planned successor mingGitDevEnv will allow to install third party packages easily. Rsync is then available upstream, see http://sourceforge.net/projects/mingw/files/MSYS/Extension/rsync.\n. Hmmpf.\nI don't have a strong feeling about either replacing or keeping them. If you prefer keeping them, I'll amend the commit tomorrow.\n. No. Yes. No.\n. If nobody objects I will merge that myself :-)\n. :+1: \n. In https://github.com/sschuberth/mingwGitDevEnv-packages/tree/master/msys-python we already have a msys python. So no need to force that into msysgit.\n. Thanks Karsten!\nWell I thought better now than never ;)\nJust to be sure.\nHave you run the git test suite with these two new base addresses?\nSome of the svn tests always fail but at least there should be no crash or rebasing address clash.\n. @kbless No the svn tests always run.\nHere I always got the \"mapping to same address\" errors on invocation of \"git svn\".\nI'll check tomorrow.\n. Now git svn works here also :)\n. Thanks for the report and the fix.\nThe regular thing to do would be to open a PR against msysgit/git (this is what the submodule /git is in the msysgit installation).\nBut in this case here, I would deem talking with gnulib/git upstream first a good idea.\nWhy is 9e6c525 only applicable to git on windows, and not for all gits? We always try to refrain from patching upstream git, meaning all files not in compat, if possible as that always complicates further merges.\nYou could ask https://lists.gnu.org/mailman/listinfo/bug-gnulib regarding the poll.c patches.\n. I saw that you posted the git patch on the mailing list. Thanks!\nAs soon as it is comitted upstream I'll cherry-pick it into maint-1.9.\n. At https://sourceware.org/glibc/wiki/Testing/Gnulib I found an explanation on how to run the gnulib test suite. This sounds quite involved.\nI'd guess it is equally good, or even better, to ask the gnulib guys what they think about your poll changes.\n. @ethomson Any updates here?\nI guess I'll cherry-pick https://github.com/ethomson/git/commit/9e6c525236f5890a70b7bd8371fe5babc83335dc into https://github.com/msysgit/git/tree/maint-1.9.\n. @ethomson Sure!\n. @ethomson Any update here?\n. @ethomson Thanks for trying. I'm working solo so I'm even less inclined reading and understanding english legalese documents.\nSo I would suggest that we intergrate your gnulib-patches into https://github.com/git-for-windows/git (master branch) for now. Please indicate in the commit message that you place the changes into the public domain. Then we can, at some later point, try to get them into gnulib upstream.\n. Please describe your bug report here completely. The issue tracker should be self-contained if possible.\n. @Stanzilla And adding to what @dscho said, the issue tracker is no question tracker.\n. Thanks. Already known.\n. @sschuberth Nobody knows if this is final or not. I'll guess we wait a few more days until the dust settles?\nPeople wanting a hotfix can cherry-pick https://github.com/t-b/msysgit/commit/1719114310415271451e4bb886db1d3a3e676211.\n. I've incorporated one more patch release. Now four known vulnerabilties are fixed, according to some news site a fifth one is coming.\nHotfix: https://github.com/t-b/msysgit/commit/acfe307ec97c9bf72ef46018be11826f645e8bdc\n. Fixed in the latest release.\n. Btw. I expect that more bash bugs will surface in the next days/weeks. So I'll guess I'll have to do a new release quite soon again. \n. Except the usual and minor svn test breakages, all other git tests pass with the new bash.\n. @dscho Well it was also a good occasion to get the other bash fixes. Thanks for merging.\n. @niik Thanks! I'd love to have some stickers. You should have my email if you read git or msysgit mailing list, no? I don't like posting my post address here ;)\n. @niik Sent!\n. Thanks for your pull request.\nA couple of notes:\n- We already have libiconv2.dll in bin and here my gpg works with that. Have you maybe recompiled gnupg instead of using the one in bin?\n- Don't add the same file twice\n- We don't accept patches which just add binaries without build script.\n. Last time I checked mintty had problems with native windows applications 1.\nIs that fixed with the current version?\n. @mflatischler Why do you need gnupg 2.x for that?\nAlso with the new dev env we have 1.4.x as this is so much easier to compile.\n. > Is there no 64bit Git binary for Windows?\nNo unfortunately not.\nYou can tweak the git settings to achieve a proper fsck-able state again.\nI'm using the following settings on my x64 linux server, this lets me clone repositories I can fsck on 32bit windows:\n```\n[core]\n packedGitLimit = 512m\n packedGitWindowSize = 512m\n bigFileThreshold = 256m\n[pack] \ndeltaCacheSize = 256m\n windowMemory = 256m \n```\nYou can also have a try with pack.threads = 1. Marking large binaries as -delta in .gitattributes is also something I can recommend.\nI routinely commit files with a few 100 MBs so this is only a matter of tweaking the settings.\n. We are currently switching to a new development environment. There are currently no plans for further enhancements to msysgit.\n. Due to the openssl security bugs outlined here I created a new release. And also upgraded curl to 7.41.0. See https://github.com/msysgit/msysgit/releases/tag/Git-1.9.5-preview20150319.\n. https://github.com/msysgit/msysgit/pull/273 should do the trick.\n. @boughtonp \nHere you go: https://groups.google.com/forum/#!topic/msysgit/xmAOOAZ9ing\nThere is no big show-stopper in upgrading to 2.3.0. Just the usual rebase and tests fixing. If you can provide a PR with both parts I'm happy to merge that into master.\nFor the rebasing you need to use https://github.com/msysgit/msysgit/blob/master/share/msysGit/shears.sh.\nWord of caution: This is not something for the faint of heart.\nEdit: Even if we merge that into master, there will be no new release just to be clear.\n. Done via https://github.com/msysgit/msysgit/releases/tag/Git-1.9.5-preview20150319.\n. Duplicate, see https://github.com/msysgit/git/issues/131#issuecomment-71122113.\n. Please check this discussion on the mailing list.\n. ",
    "heX16": "I had this error.\nProject contains file names with russian letters.\nAfter renaming to english the error disappeared.\n. ",
    "RouR": "I have the same issue - How to fix it?\n(Russian windows, using R:\\TEMP value for %TEMP% and %TMP% in Windows settings, using SoftPerfect RAM Disk to store my temp on disk R:.)\n. ",
    "egocarib": "I'm having this issue, and it's quite frustrating. After a lot of internet searching there really is almost no good info about a solution for this issue. I also can't figure out where to download an older version of GitHub for windows (this problem started for me recently after an upgrade)\nhere's the error I get:\nMSYS-1.0.12 Build:2012-07-05 14:56\nException: STATUS_ACCESS_VIOLATION at eip=006B7968\neax=00000001 ebx=0028F0AC ecx=00734C5C edx=00350000 esi=0028F0B0 edi=00000000\nebp=0028F084 esp=0028EF0C program=C:\\Users\\AppData\\Local\\GitHub\\PortableGit_c2ba306e536fdf878271f7fe636a147ff37326ad\\bin\\sh.exe\ncs=0023 ds=002B es=002B fs=0053 gs=002B ss=002B\nStack trace:\nFrame     Function  Args\n0028F084  006B7968  (00000000, 000000B0, 0028F0C8, 0028F52C)\nEnd of stack trace\ndscho wrote:\n\nOkay, so the resolution seems to be (from what little information is provided) solved by using rebase.exe as described here.\n\nThe link is broken, though, so this isn't a very helpful solution.\nAlso, jianwubayiba wrote:\n\nreplace msys-1.0.dll by a new one in \"documents and settings\\administrator\\local setting\\application data\\github\\portablegit_xxxx...\"\n\nBut it's unclear where to get the \"new one\" from. Where can I download it and which version should I download?\nI'd really appreciate some help with this issue. I'm on Windows 8.1. Please let me know if you need more information from me. This error is entirely preventing me from syncing my repository, so it's a real showstopper.\n. ",
    "mikofski": "@hvoigt and @sschuberth I hope you can cherry pick the last commit cb1e46944eca118629763740759de57d1e3ed305\n. even tho I already pushed the changes, ok\nSent via Hubroid\n. ok, I squashed the commits on my end, but what is going to happen to the pull request when I push?\nshould I close this pull requests and submit a new one? I apologize for my n00bness - thanks for your help\n. it worked!\n. I just tried it in msysgit (devel) cb9836b8a5ea9aa8f2cb7a373e58eeb6c000d4a7 and it works fine, although it takes a while to spool up the first time.\n. Sorry, my mistake - the new icon is working fine on XPSP3(x86). The issue is only with W7(x64) and XPSP2(x64). I will look into it as soon as I get the chance. Thanks for the great work and cool new icons!\n. I hope you can see the image in this link. Basically the gitgui icon is just a blurry red diamond. The desktop icon is fine, ie transarent background which I'm docked and using 2 monitors, but when I am jus tusing the laptop by itself, that's when the which background shows up. I have to look at it on my Linux box, since I don't have gimp on my pc. I'll try to do that this week sometime, and try to figure out what's up. Thanks for reporting the gitk icon upstream, although I'll kinda miss the old git icon.\n. Windows XPSP3(x86). I'll have a look on Windows7(x64) and xp64 later if necessary, tomorrow?\n. I'm very sorry. My x86 laptop display setting was somehow 16bit, and the x64 machines (both W7 and XP) also had the display settings for 16bit; changed all to 32bit and white background is gone. Also It looks like with 32bit color, the git gui display is fine. Thanks @sschuberth for the tip, and I apologize for the unnecessary issue ticket. The blurry git-gui icons and white background desktop icon issue should be resolved - not a bug.\nThe only thing outstanding is to make sure the desktop icon on x64 machines points to Program Files (x86) and not %PROGRAMFILES%. I'll try to look over the inno-setup and see if I can change it.\n. Just out of curiosity, anyone know why this only affected git-gui and not git bash here? The are both changed in commit 49f9d8b28ffc4700da9b238d935e5e5466adba7f but I only have the XP x64 issue with git-gui not git bash here shell extension, even though the git_shell explorer extension registry entry also used %v, which is alleged to only work with >= vista not XP.\nRegardless, the fix works great! Thanks for catching that! I just went in and changed the git-gui explorer extension registry entries from %v to %1 and all is well!\n. ",
    "kotakomputer": "Simple because:\n1. I can clone w/o branch option\n2. I have test above command using Debian and work fine\nNOTE: I don't remove anything from the report. It is a fully copy of Git Bash result.\n. $ git clone -b 6.x-2.x thenicespider@git.drupal.org:project/counter.git\nCloning into 'counter'...\nfatal: The remote end hung up unexpectedly\nNOTE: Using Debian works fine! Either:\n$ git clone --recursive -b 6.x-2.x thenicespider@git.drupal.org:project/counter.git\n$ git clone -b 6.x-2.x thenicespider@git.drupal.org:project/counter.git\n. Fixed after upgrade TortoiseGit-1.7.10.0-32bit.msi  to TortoiseGit-1.7.11.3-32bit.msi\n$ git clone --recursive -b 6.x-2.x thenicespider@git.drupal.org:project/counter\n.git\nCloning into 'counter'...\nremote: Counting objects: 293, done.\nremote: Compressing objects: 100% (141/141), done.\nRremote: Total 293 (delta 201), reused 205 (delta 147)\nReceiving objects: 100% (293/293), 56.08 KiB | 37 KiB/s, done.\nResolving deltas: 100% (201/201), done.\nwendy@WINDOWS-USER ~\nThanks!\n. ",
    "salsifis": "@dscho thanks for your comments and your interest. my branch has been re-pushed with -f.\n. @hvoigt @dscho : Done.\n. @hvoigt what does not work? What do you expect? To me it seems that this is what I expect (if ((7028350...)) is the output of __git_ps1). What is wrong there?\nEdit. Oh I get what you mean\u2026 it is about the u. I had not noticed it when using. Sorry. Amending.\n. @hvoigt On my system I actually get a different prompt; beforehand, there was \\[\\033]0;$MSYSTEM:\\w\\007 inside the prompt, and since $MSYSTEM:\\w was inside \\[...\\] it wasn't displayed. I consider that unhiding that prompt part is normal.\nMaybe you would like that line to be removed? I agree that it is redundant with the second one.\n. ",
    "wernight": "Thank you ciaranj. I could help on providing a compatible rsync (what I'm already using now). What are the requirements for that \"script\"? Where is it to be executed, from what checkout, and what should it do/not do?\n. The only rsync I got working among something like the 5 major ones, is one of cygwin. One version in particular. And, there is still a big issue with it, it's that it expects cygwin paths: /cygdrive/c/... which are impossible in Git. Still it's better than nothing. That mostly for that that I was looking for a newer SSH but I've no knowledge of Git's SSH requirements. From rsync, it seems very fragile and requiring the exact version it was compiled with.\n. @Sebastian: I'm sure you guys have plenty to do, so does most of us. Speedy\nis also doing work for others in that he found a way to use and tested\nupgraded binaries. I'm sure what is missing is more the difficulty to\npatch the Git project, and that part should be the trivial on GitHub to\nhave good pull requests.\nOn Sun Dec 08 2013 at 2:07:00 PM, Sebastian Schuberth \nnotifications@github.com wrote:\n\nAnd I'm sick of people who do not appreciate the work of others, but just\nuse it without giving anything back, and being offensive on top of it. If\nyou'd like to have OpenSSH updated, go ahead and do so as described in dscho's\ncommenthttps://github.com/msysgit/msysgit/issues/31#issuecomment-6440174.\nAlternatively, see my comment about the mingwGitDevEnv projecthttps://github.com/msysgit/msysgit/issues/31#issuecomment-13537020\n.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/msysgit/msysgit/issues/31#issuecomment-30081155\n.\n. \n",
    "torgil": "Is anyone working on this issue?\nI found a bug where the use of --upload-pack to git-fetch (and -u flag to git clone) gave the belowerror connecting to a ssh host (at least with tcsh shell). I think I'll await this to complete before I debug or file an issue.\nCloning into 'testrepo'...\nBadly placed ()'s.\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n. ",
    "aefimov": "Hello,\n@ciaranj Is any troubles to send your branch msys_openssh_script as Pull Request here? It is really blocker for using Git on Windows over SSH. \n. ",
    "patrik-gornicz": "Ok, I think I'm ready to start discussing this issue.\nI have also run across the issue of msysgit's ssh traffic being limited to ~2 mbps on a gigabit network. I found a thread online that suggested it was the version of ssh packaged with msysgit that was the problem and it suggest using cygwin's ssh. I wasn't really into using cygwin's ssh so I grabbed the ssh files from the MinGW/MSYS project and dropped them into msysgit. The result was ~25-30 mbps transfers.\nOriginally I came to the msysgit project with the intent of providing (rather simple) instructions of how I did the above with the hope that that would be sufficient. This thread and its associated links lend me to beleave otherwise so I spent a bunch of time with the msysgit project attempting to compile openssh using the sources provided by the MSYS project.\nMy attempt has actually been successful and most of the problems encountered have been due to things being out of date or not available in msysgit's msys branch.\nIn particular I have the following issues I'd like better work arounds for or that prevent me from writing a script that can be run from the msys branch.\n1. No lzma or xz to extract sources downloaded from MinGW/MSYS project.\n   1. My work around was to use a MinGW environment to extract these archives.\n2. Old gcc does not support -mtune and -fno-unti-at-a-time compiler flags.\n   1. My work around was to remove them.\n3. msys-build script for minires (needed by openssh) wants lndir.\n   1. My work around was to manually run make after their script configured things.\n4. openssl is not present in the msys branch.\n   1. I just grabbed all the files from the master branch while in the msys branch.\n   2. Ran into some issues at first as this exposed openssh to the mingw headers so I moved the openssl files out of the mingw directory.\nThere are a few more things that I had to do though those can be discussed once these are out of the way as I believe dealing with these should allow me to write some scripts similar to /src/rxvt/release.sh so I can share the work.\n. @sschuberth a new dev environment sounds nice. As for the HPN patches, ya I ran into the same problems mentioned in a current version of OpenSSH though when I worked around them the resulting ssh seems to hang when I do a git clone. Couldn't figure out why, though didn't spend much time on it. One of the patches I had to tweak where with respect to calls to pthread_cleanup push/pop so it's possible my change is totally wrong or the pthread's provided by msys (at least in msysgit's msys branch) has an issue.\n. ",
    "KindDragon": "Yes please update OpenSSH! I have speed approximately 100Kb/s cloning repository through SSH, but using HTTPS approximately 700-900Kb/s\n. ",
    "Speedy37": "I've simply copied msys-crypto-1.0.0.dll, msys-minires.dll, msys-z.dll, ssh.exe, ssh-add.exe, ssh-agent.exe, ssh-keygen.exe and ssh-keyscan.exe from latest msys git version (notice that msgit actually use msys-crypt-0.9.8.dll).\nAnd I got a very important network boost (I was at 400Kb/s, now I got 1.6Mb/s and with cygwin git I got 1Mb/s)\nSo upgrade msys, I sick of patching every msysgit installation I made.\nIf you to test things fast, here are the binaries I use : https://files.speedy37.fr/public/GitSSH.zip\n. I appreciate the work you people did. I just don't understand why this project hasn't updated msys since about 3 years. If you open the zip, you can see I use this patch since 2011...\nI'll for sure try the mingwGitDevEnv project. But a lot of people simply download msysgit and found the ssh performance very bad.\nI haven't look yet at how to make a git pull request for updating msys. But I think it should not take very long for the msysgit team to update msys as they know their own dev methods.\nAn everyday msysgit user.\n. @zhangchunlin : Link is fixed with long term url : https://files.speedy37.fr/public/GitSSH.zip\n. ",
    "zhangchunlin": "@Speedy37 It works. Many thanks!\nbtw: I try mingwGitDevEnv in ubuntu, but failed to build with many errors,it is not so easy to try(if I have time I will try again).\n. @t-b @dscho , I get it now. I saw \"wine=$(type -p wine)\", so I thought it should be under linux to run it.\n. ",
    "justinmk": "Copying https://github.com/gitster/git/tree/master/perl/Git/SVN to lib\\perl5\\site_perl\\Git\\SVN\\ fixed the problem for me. Thanks.\n. @thready , by mygitroot do you mean your project source? The path lib\\perl5\\site_perl\\Git\\SVN is found in the git installation directory, e.g. C:\\Program Files (x86)\\Git.\n. ",
    "thready": "This still seems to be broken.  I get the same issue on Windows after installing 1.7.11.4.  I tried justinmk's suggestion and downloaded the missing files from https://github.com/gitster/git/tree/master/perl/Git/SVN, placing them in mygitroot\\lib\\perl5\\site_perl\\Git\\SVN\\ - I then get problems with invalid characters (ex: editor.pm, line 9)...\nAny idea what I can do to get \"git svn clone\" working on windows?\nThanks!\nMike\n. That's right where I put it.\u00a0 The end of that subpath didn't even exist in my installation- I had to manually create the Git\\SVN part and added the 8-10 files that were in the other link I provided.\u00a0 I noticed that the Editor.pm file (going by memory) was found after I did that, but there was a weird '.' character on line 9 that caused errors when I called git svn clone.\u00a0\u00a0 Removing that character from the  tag on line 9 of that file allowed it to go a bit further, but then there were tons of errors, so I just had to give it up.\u00a0 Now I've downloaded the installer from msysgit and the git svn clone call is currently running smoothly....I hope this helps...Thanks,MikeOn Jul 31, 2012, justinmk reply@reply.github.com wrote:\n@thready , by mygitroot do you mean your project source? The path lib\\perl5\\site_perl\\Git\\SVN is found in the git installation directory, e.g. C:\\Program Files (x86)\\Git.---Reply to this email directly or view it on GitHub:https://github.com/msysgit/msysgit/issues/32#issuecomment-7405419\n. ",
    "JoakimSoderberg": "This is still broken in 1.7.12, the official download on http://git-scm.com/\n. Yes, I realized after writing, that their page says 1.7.12 on the main page. But that link actually goes to the broken 1.7.11 installer... I found the link to the latest installer, and that works. Git-scm.com should fix their link :-)\n. The problem is that http://git-scm.com is stating that there is a 1.7.12 version (The link however goes to Git-1.7.11-preview20120620.exe):\n\nObviously this will create much confusion.\nThis is what happened to me:\n1. Google git\n2. Clicked on http://git-scm.com\n3. Clicked the \"Download for windows\" link (and made a mental note of the version number 1.7.12)\n4. Tried to do \"svn clone\", failed\n5. Googled error message. Found this ticket. Saw that it related to 1.7.11, so if I had 1.7.12 (which I hadn't) it was supposed to be fixed...\nSolution: http://git-scm.com should not state that version 1.7.12 is out. And at least link to the new preview20120710 of 1.7.11 that has this fixed...\n. I also wrote in this ticket (for http://git-scm.com): https://github.com/github/gitscm-next/issues/173 about the download link being out of date.\n. ",
    "chaplinkyle": "Where is this download link you found?\n. ",
    "ghost": "I don't see that svn-git is fixed in 1.7.12. Getting below error even after copying package mentioned above \"Can't locate object method \"path\" via package \"Git::SVN\" at /usr/lib/perl5/site_perl/Git/SVN/Ra.pm line 338.\"\n. I'd forgotten about this! I just gave up. Also, looks like I wasn't able to communicate 8 months ago too.\nFor clarification:\n- I was pushing to Windows Server 2012, from Windows 7,\n- I was using version 1.8.0.msysgit.0,\n- I still haven't been able to get git-push to work successfully.\nFrom @temistokles reply it appears that the issue is with git-push being unable to either connect or bail out.\nI remember reading the server log and seeing no connection being made.\n. ",
    "csware": "Done. Pull request updated as requested.\n. I built it, TortoiseGit TortoisePlink was correctly detected (have not tested w/o TortoiseGit installed) and installation worked.\n. this breaks our/the tsvn cli parameter parser. we're preparing 1.8.0 right now, so it won't be in the next release.\n. I've a patch for it and it works so far.\nWhen do you release the next msysgit version?\n@sschuberth: unforseen side effects? The TGit team agreed on a code freeze for 1.8.0, so I've to ask all team members if we can get this into 1.8.0 or if the first chance is 1.8.1.\nBtw. we renamed TortoiseMerge.exe to TortoiseGitMerge.exe.\n. @sschuberth Shall I send a patch to the git mailing list? Also I'd like to add you as \"Signed-off-by\" because it's based on your idea. Is it ok?\n. @sschuberth \nsh.exe still adds \"wrong\" quotes if we just replace \":\" by \"=\" for filenames with spaces: \"-base=./Neues Textdokument.txt.BASE.3872.txt\" \"-mine=./Neues Textdokument.txt.LOCAL.3872.txt\" \"-theirs=./Neues Textdokument.txt.REMOTE.3872.txt\" \"-merged=Neues Textdokument.txt\"\nbash\n        \"$merge_tool_path\" \\\n            -base=\"$BASE\" -mine=\"$LOCAL\" \\\n            -theirs=\"$REMOTE\" -merged=\"$MERGED\"\nSo this seems to be more a sh issue (quoting is done in unix style instead of Windows style), instead of a TMerge issue.\nAlso\nbash\n        tool=\"-base=\\\"$BASE\\\" -mine=\\\"$LOCAL\\\" -theirs=\\\"$REMOTE\\\" -merged:\\\"$MERGED\\\"\"\n        $merge_tool_path $tool\ndoes not work. $tool contains correct quotes, but quotes are escaped when used as parameter.\n. @sschuberth You could also easily use e.g. the Process Explorer to see which cli parameters were used. However, I've updated the file.\n. @sschuberth Any progress?\n. Yeah, supposed so. I worked the \"half evening\" on this: https://github.com/TortoiseGit/TortoiseGit/pull/27\n. We have an improved cli parser and we're testing it right now.\nSubmitted patch upstream: http://thread.gmane.org/gmane.comp.version-control.git/214006\n. Please make sure that the patch of https://sourceforge.net/tracker/index.php?func=detail&aid=3468255&group_id=2435&atid=302435 (https://rt.perl.org/rt3//Public/Bug/Display.html?id=115900) gets included. Thanks.\n. Btw. it would be nice if the patch mentioned in https://github.com/msysgit/msysgit/issues/61#issuecomment-10695361 could be applied regardless if the shipped perl version gets upgraded.\n. Too bad that my proposed patch (https://rt.perl.org/rt3//Public/Bug/Display.html?id=115900) is not in 1.8.2.\n. Please apply the patch mentioned in #61 (comment) regardless if the shipped perl version gets upgraded.\n. @dscho: Nice, when I reported it the last time it was said that you do not apply local patches to shipped stuff (https://groups.google.com/forum/#!topic/msysgit/oHDBhnAHIe4).\nOkay, see PR #152.\n. The \"new\" git.exe wrapper causes these issues. It creates a new process and so the output of git.exe cannot be parsed any more. So we added lots of code to use the git.exe in the bin dir. So we added lots of code to \"smoothly migrate\" the calls to the real git.exe in the bin dir.\n. This issue is still valid with latest (msys)Git.\n. It's not just me, it's lots of TortoiseGit users, too (at least with older versions of TortoiseGit - current TortoiseGit is trying hard to detect the git.exe in the bin-directory and avoid using the wrapper).\nThis is how we start git.exe:\nhttps://github.com/TortoiseGit/TortoiseGit/blob/master/src/Git/Git.cpp#L198\nWhen we start git.exe for reading it's output we use:\nhttps://github.com/TortoiseGit/TortoiseGit/blob/master/src/Git/Git.cpp#L433\nWhen the wrapper is started, a black cli windows pop ups for a very short period and closes again - I suppose the reason for this is that real git.exe in the bin directory which is executed by the wrapper. Somehow the stdout connection is lost and thus, TortoiseGit cannot ready anything.\n. bin/git.exe works perfectly, that's why we try to use it instead of the wrapper.\n. We had lots of reports about non working (msys)Git installations. It cost losts of efford to (detect and) use bin/git.exe in TortoiseGit instead of cmd/git.exe.\n. Spelling fixed.\n. @dscho: @sschuberth already looked at an older version: https://github.com/csware/msysgit/commit/f7b0555ecf868a19ecc59d23ad4a50b7ba0f53de\n. of couse I don't mind ;)\n. Thanks!\n. ",
    "kohsuke": "@sschuberth OK, I didn't realize that surrounding an arugment with a double-quote would prevent git.cmd from eating ^. That is something I can do on my side to work around the problem. So I'm no longer blocked by this.\nI still do recommend that git.cmd not to let its cmd.exe eats ^.\nI was careful in my experiments to differentiate the command prompt that someone might be using interactively vs cmd.exe that executes git.cmd. The first comment from @patthoyts is only partially right, in that both cmd.exe eats ^ as escape.\nI am not asking to eliminate ^ handling all together. I'm only asking the double escape handling to be reduced to one (by having git.cmd not letting its cmd.exe do the escape handling.) I ask this because I think this is the right contract \u2014 when someone does CreateProcess(\"git rev-parse tag^{commit}\"), it should work regardless of whether git.cmd is found in PATH first or git.exe (from msysgit or cygwin) is found.\nThe second comment from @patthoyts seems to argue that \"it's not going to help much\" because the user of an interactive command prompt would still have to do one escaping. With all due respect, I think that's missing the point. I'm not raising it an issue that the user of an interactive command prompt has to do the escaping (on that matter, even Unix users often have to escape interactive invocation of git rev-parse tag^{commit} from shell), I'm raising an issue that the same argument to CreateProcess work differently between different git implementations on Windows.\n. ",
    "zyv": "@dscho i lold when realized that this is exactly the problem why we have fiji and msysgit builds failing on Windows ;-) ...\n. ",
    "kblees": "I believe setting the code page is no longer necessary with Unicode support (git, tcl and all msys-progs (including bash and perl) use WriteConsoleW to write to the console, so the console code page has no effect).\n. Sorry I forgot to clarify the 'most' in 'most users'.\nThe console input code in fhandler_console::read currently doesn't decode UTF-16 surrogate pairs (> \\u0ffff, e.g. CJK extensions). I couldn't find any hint on how ReadConsoleInputW transmits these (not even in cygwin's fhandler_console), and as I have no way to test this either, I'd like to leave this one to CJK users who actually have that problem.\n. Just rebased binaries to v1.8.0, the part in the msys branch is still up to date...\n. FWIW, I've just updated the respective FAQ entry (https://github.com/msysgit/msysgit/wiki/Git-cannot-create-a-filedirectory-with-a-long-path)\n. Rebased to 1.8.3\nAn installer including this PR is available at https://docs.google.com/file/d/0BxXUoUg2r8ftczNmVFAtYXllTEE/edit?usp=sharing\n. Try https://github.com/msysgit/msysgit/pull/79 and report back if it works for you.\nYou could also help by reviewing the related code changes in https://github.com/msysgit/msysgit/pull/41\n. This has probably already been fixed [1], otherwise please clarify what you mean by \"not working\".\nAs a workaround, you can add \\cmd to your PATH or install with the \"Run Git from the Windows Command Prompt\" option.\nAn installer including this fix and a few other changes is available here: [2]\n[1] https://github.com/msysgit/Git-Cheetah/commit/c8dc8456\n[2] https://docs.google.com/file/d/0BxXUoUg2r8ftekFkcFJDRFdhNTA/edit?usp=sharing\n. Am 08.08.2013 09:03, schrieb victorwoo:\n\nIs it designed?\n\nYes, its designed that way, so that its not necessary to recurse into irrelevant sub directories.\nTry\nMyDirectory/*\n!MyDirectory/abc.txt\nKarsten\n. Yes, see https://github.com/msysgit/git/pull/212\nThanks for reporting, esp. the public repo you provided was very helpful!\n. Looks like a duplicate of #227. Have you tested this with the version from the current maint-1.9 branch?\n@kusma: redefining MAX_PATH in dirent.c effectively disables long paths support (because with such a large MAX_PATH, handle_long_path() will never deem it necessary to convert to \\?)\n. @t-b The test suite ran fine even before the fixes...do you have to explicitly enable SVN-tests somehow?\nI did successfully 'git svn clone' and 'git svn fetch' one of our company SVN repos, though (via http and https).\n. @bizm try /bin... or cd to the Git installation directory first (\"cd /\")\n. > error: Invalid path\nYou get this error if the path is invalid on Windows (e.g. is a short file name, ends with a space or dot, or contains invalid characters [1]). It probably has nothing to do with the length.\n[1] https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx\n. Do you get the same error with the Git for Windows 2.0 release candiadate [1]?\nThe \"file ends with dot\" check can be disabled via git config core.protectntfs false, but this doesn't solve the core problem that the path gets truncated.\nDo you have a public repo that can be used to reproduce the problem?\n[1] http://git-for-windows.github.io\n. ",
    "IAAS": "Maybe the license should go into a new folder doc/cacert? That folder should be distributed as it is done with doc/git.\nI wonder why  there is no README.md in the root of the installation directory. :)\nAs far as I understand the text, a text like \"This software contains Embedded CAcert Root Certificates. For more information please go to https://www.cacert.org/policy/RootDistributionLicense.php.\" should be enough. Would a proper place for that be the first page (\"Welcome to the Git Setup Wizard\") of the installer?\nI wonder whether a new install option is too oversized?\n[x] Install Embedded CAcert Root Certificates\n(There could be a hover-text with the above hint)\n. ",
    "polidore": "Actually, I think I had something cached in my terminal.  I restarted the terminal after upgrading and it worked fine, but only with a _netrc file.  It refused to prompt me for creds, but that's ok. \n. ",
    "SrujBarai": "Doesn't work with me either\n. git version 1.9.0.msysgit.0\n. Well it is opening perfectly in browser.\nI want to see it in the bash itself\n. Do i need to mention i'm a complete novice with just few hours of experiance with git. \n. ",
    "stevenkling": "Want!\n. ",
    "lynxstv": "Work fine with russian paths\n. ",
    "t00": "I can confirm this issue with \"git.exe fetch -v --progress \"origin\" master:remotes/origin/master\".\nERORLEVEL 1 is returned on successful execution.\n. ",
    "Siarhei-Yarkavy": "Guys I did update today for new version and catch this issue. The problem that Git-1.7.11-preview20120620.exe is not accessible anymore for download, Are there any chance to rebuild git with this fix? \n. ",
    "the-Arioch": "Same on Git-1.7.11-preview20120710.exe\n\"few more days\" ?\n. great news. big thanks to your company!\n. > The best place we could come up to tell users about the longpaths feature was the release notes, but obviously that message did not reach you\nActually that could not be a good place. RelNotes are sometimes read before the upgrade, but no new user would have any reason to read them.\nThis belong to places like System Requirements/Limitations or FAQ or Typical Errors\nAnd this belong to the very error messages GIT shows when meeting long paths - it has to suggest user to read about the aforementioned config option,\n\nThis said, why just not default it on and make the alerting of users unnecessary ?\n. > we need documentation that is easy to understand and enjoyable to read.\nActually, everyone needs documentation that is informative. And after that, with lesser priority, are ease and pleasure.\nSo, why this option was not defaulted? What are cons and pros, what are gotchas ?\n. @dscho my uneducated guess is that you failed to diff @nitram509  and @Tibor17 :-D\n. ",
    "FallenGameR": "@sschuberth looking at the fix https://github.com/msysgit/msysgit/commit/726102c90a1ac6ff67b041b8855fd74815dd9979 I wouldn't say the issue is closed. The wrapper doesn't work transparently. Tools that rely on git error codes and error messages are still become broken. I don't know if that would completelly fix GitExtensions but our tool is still affected.\nCurrent wrapper implementation would mess with:\n- git error codes like 127 and 128 returning 1 instead\n- git error messages appending 'error launching git' prefix\nOur tool is git-perforce bridge and we have logic that parses error text to decide what kind of mitigation is needed on a particular error. It would be better to make git.exe wrapper to be completely transparent to the user (in our case the user is another program that expects git to behave as the original git.exe). \n. Let me run tests we have. I'll respond once I get the results (that should happen withing 14 hours).\n. @patthoyts All our tests pass with the fixed git-wrapper. Thanks! I'm looking forward for the new release with this fix.\n. Thanks!\nI really like the speed of msysgit developers responses and bug fixes =)\n. ",
    "ryenus": "@sschuberth, thanks for the info, but looks like that  project doesn't have much progress rrecently, maybe  the 2 projects should join forces.\n. ",
    "martin-w-kirst-hypoport": "Hi,\nbut there seems to be a relations between cygwin and Windows-Git package, because of the files shipped, right?\nAny chance to get this issue fixed?\nMy technicak knowledge in C ist not that big ... can I help in any other way?\nRegards\nMartin\n. Thanks for clarification.\nAny chances to adopt the \"FIX\" from cygwin?\nI mean, the 'find' example works within Cygwin shipped environment, but doesn't work within Git's bash.\nI assume, the sources are the same?\n. ",
    "aberumen": "The following link has information on this issue:\nhttps://groups.google.com/forum/?fromgroups#!msg/msysgit/9YIR6jlNB0Q/zHhPN3tejFkJ\nEdit: This is addressed in the FAQs(https://github.com/msysgit/msysgit/wiki/Frequently-Asked-Questions). The above link is referenced there aswell.\n. The command above works for me. Can you provide steps to reproduce?\n. MsysGit comes with its own modified MSYS environment. You only need to install msysGit.\n. I'm interested in this issue as well. I attempted the above steps; however, starting msysGit after checking out the msys branch fails with \"The program can't start because libiconv-2.dll is missing from your computer.\" The problem is obvious but how should it be resolved? How is libiconv supplied?\nSince the error originates from git.exe, maybe in the transition to unicode the msys branch was not updated to include libiconv?\nEdit: As a work around I copied the dll from a Git for Windows install.\n. Why does libiconv-2.dll go in mingw/bin instead of bin?\n. I understand the distinction but isn't git.exe also a mingw binary yet it is in /bin?\nAlso, with regards to a patch in src/perl/patches. The context of a patch has changed drastically in recent Perl versions so it doesn't apply. I'm a bit new to this. How should this be approached? Should I apply the changes in patch manually and commit that?\nOne more thing. Why is a git repo created in the Perl source tree after untaring?\n. I managed to apply most of the patches onto 5.16.1 with the exception on 1 or 2 and some MacOSX only changes that I choose to omit.\nTrying to build results in a error :(. Miniperl cannot be found. Make complains about a circular dependency between miniperl and Config_git.pl.\nI'm not familiar with the Perl build system so I need a bit of help with this one.\n. I've pushed my changes to the work/perl-5.16.1 branch of my fork.\nError from make:\nGNUmakefile:386: warning: overriding commands for target `perlmain.o'\nGNUmakefile:327: warning: ignoring old commands for target `perlmain.o'\nmake install.perl install.man STRIPFLAGS= DESTDIR=\"\"\nmake[1]: Entering directory `/src/perl/perl-5.16.1'\nGNUmakefile:386: warning: overriding commands for target `perlmain.o'\nGNUmakefile:327: warning: ignoring old commands for target `perlmain.o'\nmake[1]: Circular lib/Config_git.pl <- miniperl.exe dependency dropped.\nPATH=\"/src/perl/perl-5.16.1:.:/c/Users/me/bin:.:/usr/local/bin:/bin\n:/mingw/bin:/c/windows/system32:/c/windows:/c/windows/System32/Wbem:/c/windows/S\nystem32/WindowsPowerShell/v1.0/:/c/Program\\ Files\\ (x86)/ATI\\ Technologies/ATI.A\nCE/Core-Static:/c/Program\\ Files\\ (x86)/AMD\\ APP/bin/x86_64:/c/Program\\ Files\\ (\nx86)/QuickTime/QTSystem/:/c/Python27:/c/Program\\ Files\\ (x86)/Microsoft\\ SQL\\ Se\nrver/100/Tools/Binn/:/c/Program\\ Files/Microsoft\\ SQL\\ Server/100/Tools/Binn/:/c\n/Program\\ Files/Microsoft\\ SQL\\ Server/100/DTS/Binn/:/c/Program\\ Files\\ (x86)/Su\nbversion/bin:/c/Program\\ Files\\ (x86)/Notepad++:/c/Program\\ Files\\ (x86)/GTK2-Ru\nntime/bin:/usr/bin:/etc:/usr/lib:/lib:/usr/libexec\"  ./miniperl.exe -Ilib make_p\natchnum.pl\n/bin/sh: ./miniperl.exe: No such file or directory\nmake[1]: *** [lib/Config_git.pl] Error 127\nmake[1]: Leaving directory `/src/perl/perl-5.16.1'\nmake: *** [install] Error 2\nIf I run 'make miniperl' the output is\nGNUmakefile:386: warning: overriding commands for target `perlmain.o'\nGNUmakefile:327: warning: ignoring old commands for target `perlmain.o'\nmake: Circular miniperl.exe <- libcygperl5_16_1.a dependency dropped.\nPATH=\"/src/perl/perl-5.16.1:.:/c/Users/me/bin:.:/usr/local/bin:/bin\n:/mingw/bin:/c/windows/system32:/c/windows:/c/windows/System32/Wbem:/c/windows/S\nystem32/WindowsPowerShell/v1.0/:/c/Program\\ Files\\ (x86)/ATI\\ Technologies/ATI.A\nCE/Core-Static:/c/Program\\ Files\\ (x86)/AMD\\ APP/bin/x86_64:/c/Program\\ Files\\ (\nx86)/QuickTime/QTSystem/:/c/Python27:/c/Program\\ Files\\ (x86)/Microsoft\\ SQL\\ Se\nrver/100/Tools/Binn/:/c/Program\\ Files/Microsoft\\ SQL\\ Server/100/Tools/Binn/:/c\n/Program\\ Files/Microsoft\\ SQL\\ Server/100/DTS/Binn/:/c/Program\\ Files\\ (x86)/Su\nbversion/bin:/c/Program\\ Files\\ (x86)/Notepad++:/c/Program\\ Files\\ (x86)/GTK2-Ru\nntime/bin:/usr/bin:/etc:/usr/lib:/lib:/usr/libexec\" gcc -L/src/perl/perl-5.16.1\n -s -o miniperl miniperlmain.o opmini.o -Wl,-Bstatic -lcygperl5_16_1 -Wl,-Bdynam\nic\n/bin/../lib/gcc-lib/i686-pc-msys/2.95.3-1/../../../../i686-pc-msys/bin/ld: canno\nt find -lcygperl5_16_1\ncollect2: ld returned 1 exit status\nmake: *** [miniperl.exe] Error 1\n. I think this is because the Subversion version used is quite old (1.4.2) and SVN::Core::auth_get_platform_specific_client_providers was introduced in 1.6\nhttp://git.661346.n2.nabble.com/PATCH-git-svn-enable-platform-specific-authentication-td6376961.html\nSolution would be to upgrade the SVN version used and the bindings.\n. ",
    "tmnuwan12": "The information above save my life tracking down issue with Windows.\n. ",
    "nitram509": "On a hackathon our company had sponsored, we've created a patch for this issue. Frankly said, it's not yet worth to raise a pull request now, but we're working on ... \nSee the proof of concept screenshot: https://twitter.com/nitram509/status/345502581654704128\nSee our fork for the concrete patch and more details: https://github.com/hypoport/msysgit\n. Hi we're working on ... still 24 out of 632 integration tests are failing.\nI can't promise any fix that soon. Please, be patient.\nRegards\nMartin\n. Two Co-workers and I created a patch, which enables msysgit to handle long path names.\nSee attached file msysgit-issue52-proposal-20130804.patch for details.\nWe consider the patch as \"proposal\" and want to get some feedback.\nApplying the patch to v.1.8.3 will pass every integration test, which un-patched version also does.\nAFAIK, these things are still to do:\n- writing a test\n- split xutftowcs_path into separate functions for character conversion and prefixing - so de-prefixing can be avoided at some places\n- checking upper array boundaries\nPlease, give this patch a try and send feedback.\nThanks \nAndi, Eric, Martin\nSee: https://github.com/msysgit/git/pull/85\n. @maoueh Correct, the branch https://github.com/hypoport/git/tree/issue52 contains alle the relevant changes.\n. nope, still not working :-1: \n```\nuser@host /g/Temp/0001 (master)\nwarning: unable to access '0002/0003/0004/0005/0006/0007/0008/0009/0010/0011/0012/0013/0014/0015/0016/0017/0018/0019/0020/0021/0022/0023/0024/0025/0026/0027/0028/0029/0030/0031/0032/0033/0034/0035/0036/0037/0038/0039/0040/0041/0042/0043/0044/0045/0046/0047/0048/0049/.gitignore': Filename too long\nOn branch master\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\n    0001.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$ git --version\ngit version 1.9.5.msysgit.0\n$ uname -a\nMINGW32_NT-6.2 HOST 1.0.12(0.46/3/2) 2012-07-05 14:56 i686 unknown\nWindows 8.1 Professional 64bit \n```\n. @shiftkey \nthanks for pointing this config option out.\nBefore, the core.longpaths wasn't set.\nAfter I set git config core.longpaths true I was able to commit.\nGood Job! Thanks everybody. :+1: \n. @kblees thank you for updating the FAQ\n. Can confirm that on Win8 Home 64b and Win7 Prof 64bit\nmsysgit v1.8.1.2 installler registers icons in taskbar correctly. Everything works fine.\nHint: On both machines I've did an upgrade from the previous offiicial version.\n. I've tested again, now with Git-1.8.3-preview20130601.\nBefore I've started, I've uninstalled my previous Git installation (using default Windows uninstall option)\nI've installed Git 2 times: \n1) c:\\program files (x86)\\git\n2) c:\\temp\\git\nIn both cases, the result was the same.\nI'm using Windows 8, Home Ultimate, 64bit, German.\nI've checked the 'install on desktop' and 'install on taskbar' option within the installer tool.\nIn both cases, the there was an shortcut icon on my desktop - working OK.\nIn both cases, there was no shortcut on my taskbar but on my Windows squares (German: Kacheln). I had to manual check them and put them on my taskbar. Anyway, all shortcuts were working fine and the icons were correctly displayed.\nSo, everything looks fine to me and I can't reproduce the problem.\n. ",
    "Tibor17": "Hi guys, I have the same problem. In the maven-surefire project we are releasing between Thu/Fri, and I found 5 files which could not be submitted to my repo due to this issue. I would appreciate a fix asap. Thx, Tibor\n. no issue with 1.9.5 :+1: \n. setting with --global just once\ngit config --global core.longpath\nOn Wed, Jan 14, 2015 at 8:57 AM, dscho notifications@github.com wrote:\n\n@nitram509 https://github.com/nitram509 your job is not quite done yet.\nThe best place we could come up to tell users about the longpaths feature\nwas the release notes, but obviously that message did not reach you.\nTherefore, you should figure out where the information about longpaths\nwould have reached you and open a PR to make it so.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/msysgit/msysgit/issues/52#issuecomment-69880742.\n. What are you trying to tell me, that i should shut my mouth. Listen to\nyourself first and then say something\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nOn Wed, Jan 14, 2015 at 12:23 PM, dscho notifications@github.com wrote:\n\n@Tibor17 https://github.com/Tibor17 no, this is not what I am talking\nabout.\nLook, users will not find this bug report, let alone your comment. We need\nto do a substantially better job than throwing out two short lines that are\nunclear.\nWe need documentation where users see it, and we need documentation that\nis easy to understand and enjoyable to read.\nI believe that you tried to help, but I am convinced that we need somebody\nto contribute something well-crafted, and thought through, to achieve our\ncommon goal to make Git for Windows easier to use. At least that goal is\nwhat I think you and I have in common, yes?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/msysgit/msysgit/issues/52#issuecomment-69902867.\n. \n",
    "maoueh": "@nitram509 Where is the attachment exactly? Is the branch hypoport:issue52 a branch that I could use to test your patch? I have a repository with some files already too long for git when you like to give your patch a try. \n. Just reporting here to add some information. I had use the full installer for months (something like 4 or 5, maybe 6) and suddenly, from tuesday to wednesday, it stop working with the dreaded VirtualAlloc null pointer problem.\nI was really surprised to encounter the problem because I didn't have done anything special the day before it started crashing. I shutdown my compute as usual and when arriving at work the next morning, I was unable to start my terminal anymore.\nSome have say the a Windows update could have triggered this, however, on my machine, the last windows update was performed on 19/06/2013 so it cannot be the case, at least for me. There is some updates pending however. I will update and reboot to see what happens as I read that it could solve the problem. After that, I will rebase my DLL if it does not fix my issue.\nInformation on my system:\n- Windows 7 Professional SP1 64 bits \n- Msysgit full installer (version 1.8+, I don't remember which one exactly, how can I check?).\nBase address reported on the error message is BaseAddress 0x68560000. Not sure if it's the preferred base address set for msysgit-1.0.dll.\nWill report with what I have done to fix the problem.\nRegards,\nMatt\n. So, I first tried with a simple reboot and sadly, it fixed the problem right away. I only did a simple reboot nothing else. \nIn the end, I really can't say what happen for the error to appear then disappeared right away. One of the hypotheses I can come with would be the order in which I started my system. Usually, I open my terminal first, but today, I started some program before (Thunderbird then Eclipse). I tried to reproduce but was not able to.\nIf I ever encounter the problem again, I will report back here with more information. We shall find the real culprit and solution one time. \n. @dscho I understand. But there must a final solution for this. Maybe it cannot be applied yet (or never), but there is tons of DLL loading code out there, so I cannot imagine there is not a clear solution.\nDon't interpret this as an argument from me to fix the problem right away. There is workarounds that work well and this problem does not affect everyone. Since everything is documented and a simple Google search leads to those solutions, there is no hurry to work on this or to even just put time on it. I'm sure time can be well spent elsewhere where it will have greater impact.\nKeep up the good work guys :)\n. ",
    "fliegera": "Is this really solved? I am working on Version 1.9.4 and facing the same Problem, when Path-lenght is > 260\n. ",
    "shiftkey": "@nitram509 what does this return for your repository?\n\ngit config core.longpath\n. @nak5124 :heart: for the new patch\n. @dscho yeah, we've working from the latest tip of msysgit (I tagged the version different because the upstream tag wasn't pushed at the time which caused a custom build version).\n. @dscho :thumbsup: just a logistical blip which hit us at build time\n. @dscho if you publish a release on this repo, I'll see it :metal:\n. @stefan-muc I'd love to understand the repro better. Could you tell me what commands you're running to trigger this? Or if there's some startup scripts in your profile which are involved with git-cheetah?\n. @stefan-muc thanks for the extra details - I don't enable git-cheetah in my install so I'm still wrapping my head around this.\n\nWhat version of Windows are you running?\n. Can you set some debug variables and try cloning again?\n\nGIT_CURL_VERBOSE=1 GIT_TRACE=1 git clone https://coding.net/coding/Coding-Feedback.git\n. @jack230230 please enable the debug variables before cloning - the error is too generic to understand without more details\nGIT_CURL_VERBOSE=1 GIT_TRACE=1 git clone https://github.com/msysgit/msysgit.git\n. Ran the same test on Windows 10 Build 9926:\n\nC:\\code> git clone https://github.com/msysgit/msysgit.git\ntrace: built-in: git 'clone' 'https://github.com/msysgit/msysgit.git'\nCloning into 'msysgit'...\ntrace: run_command: 'git-remote-https' 'origin' 'https://github.com/msysgit/msysgit.git'\n* Couldn't find host github.com in the _netrc file; using defaults\n* Adding handle: conn: 0x2523020\n* Adding handle: send: 0\n* Adding handle: recv: 0\n* Curl_addHandleToPipeline: length: 1\n* - Conn 0 (0x2523020) send_pipe: 1, recv_pipe: 0\n* About to connect() to github.com port 443 (#0)\n*   Trying 192.30.252.130...\n* Connected to github.com (192.30.252.130) port 443 (#0)\nI'm not quite convinced by that error message, and the timeouts make me think this is a network-related issue.\nCould you attach the output of this command?\n\nnslookup -debug github.com\n. The DNS seems to be resolving the correct address, but this line seems important:\nAbout to connect() to proxy www.google.com port 80 (#0)\n\nDo you have some sort of proxy setup (either on your local machine or on the local network)? That might explain the switch to port 80 and the resulting problems...\n. @hainuo I'm almost certain this is a networking configuration issue rather than an msysgit issue - for example, I can see you have Google DNS enabled - 8.8.8.8.\nCould you compare the settings you have against your colleague's to see where they differ?\n. @dscho\n\nwould this interfere with GitHub for Windows?\n\nNo issues with this change - we already tweak this config as part of our build process...\n. @PING can you drop an email to support@github.com with details (can TCPView export logs? it's been many years since I've used it) so I can look into this?\nI don't believe we're doing anything exceptional with ssh-agent.exe, but I'd still like to get to the bottom of it.\n. Could you confirm which version of Git you're using in SourceTree?\n. ",
    "dolmen": "The wiki page has moved here.\n. The proper thing to do is to rebuild the patches and get most of them merged upstream in the perl sources to avoid to rewrite them here at the next perl release...\nSetting up the msysgit environment is quite hard, and I'm not sure mine is right yet.\n. @Leont MinGW is not msys. Building Perl on msys is more like building it on Linux or on cygwin than on native Win32: directory separator is '/', PATH separator is ':'...\n. Regedit.\n. @Olivier07 \nLes mainteneurs du projet sont d\u00e9j\u00e0 surcharg\u00e9s par les demandes et par le travail sur ce projet. @dcho te propose effectivement de te donner les pistes pouvant t'aider \u00e0 produire un patch. Mais chercher cette information est d\u00e9j\u00e0 une t\u00e2che consommatrice de temps pour @dscho. Donc il ne se lancera l\u00e0-dessus que si tu montres effectivement ta motivation \u00e0 arriver \u00e0 qq chose. Tu n'as actuellement aucun projet sur Github, donc ce n'est pas bon signe.\n. Unfortunately this should have been made also as a patch in /src/perl/patches... I will fix that.\n. I did that. See PR #191.\nBut that doesn't seem to be enough. The imported git repositories seem to be considered as 'not clean'.\n```\n$ git status\nOn branch msys-gitignore\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\n    modified:   doc/git/html (new commits)\n    modified:   git (new commits)\n    modified:   src/git-cheetah (new commits)\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\nI don't know how to fix that.\n. > Hmm. Makes me wonder why 505a1e8 did not fix the problem for you...\nJust because /src/perl/release.sh doesn't use update-lib.sh. I'll fix that...\n. Yes I fixed the issue with #195. Thanks.\n. @sschuberth I would submit a pull request if ever I had an idea of the intent of the author. But @kblees has 3 branches called *unicode-console-input*. Which one has the interesting patches? I suppose that the patches have been discussed somewhere, so an issue number would be helpful too...\n. > @dolmen Your msys-perl branch builds fine here. Nice work!\nI'm surprised because here make test is reporting failures, mostly in tests related to the tainting feature of perl. You can view my build log in ebaccfa6c2e21476ea8a4c4427ea7b94e2334dc9.\n\nIn general I'm also in favour of dropping 3caa5d6 as that is not really necessary for everyone.\n\nAs I'm the only one currently working on /src/perl and it matters to me for debugging, I'm keeping it. If you don't want to launch /src/perl/release.sh with the -n flag, just don't do that.\nAbout squashing and nicify the existing commits, yes, I agree that would be nice. But I will not do that. I have few time available and fixing the perl build is already a big task that you are aware that few people are interested in to work on it. I can't waste my time in nicifying existing commits. If you don't want this PR as is, I just give up now. But if you accept it I promise I will add the signed-off-by to my future commits.\n. @crossique: Please read all the comments above to give a useful report.\n. @hainuo The output of this command would be interesting.\nFrom cmd.exe:\nset http_proxy\nset https_proxy\nFrom bash:\necho $http_proxy\necho $https_proxy\n. [[ is a bash built-in and should be used instead of [.\n. Tell us the output of locale.\n. msysgit is not cygwin.\n. Of course. Because you don't need it.\n. Please ask your question in english.\n. ",
    "XhmikosR": "BTW, I'm talking about the same modified 7zsd. It's just that its newer version works properly.\n. Yeah the English version of the site isn't really up to date...\n. Thanks. I will give it a go. BTW, I think 7zS.sfx, history-extra.txt and readme-extra.txt are not used. Maybe you should remove those and just add a file to point to http://7zsfx.info/en/download.html for 7zSD.sfx.\nAnother minor thing, maybe you could change the method to LZMA2 for the portable release?\n. I tried LZMA2 for the portable release but I don't think it's worth moving to that.\n19,7 MB (20.665.362 bytes) LZMA2\n19,7 MB (20.659.416 bytes) LZMA2 64M\n19,7 MB (20.661.180 bytes) LZMA 64M (current)\n. @dscho: sylus probably means the \"patch.exe\" version which is 2.5, while Msys has 2.6.1.\n. Good catch!\nBTW, is there any reason why @ is used instead of a single @echo off call in the beginning of the script?\nEDIT: now I see the comment in the first line.\n. ",
    "Keepun": "https://github.com/msysgit/msysgit/wiki/Git-for-Windows-Unicode-Support\nOnly \"iconv: command not found\"\n. ",
    "DNTech": "Is their any way to fix the issue during msysgit installation?? which says build failed...\nI'm using windows7 and want to use git-ftp...\nshould I place a new issue??\n. ",
    "kostix": "These are hardlinks to a single binary, see http://stackoverflow.com/a/10848437/720999 for instance.\n. And a more authoritative link: http://groups.google.com/group/msysgit/browse_thread/thread/4c1dac4a2864cd74\n. I think your point is valid, @ernes32, but Git for Windows strives to eventually have all Windows-specific code in the mainline, so the issue being discussed stems from the fact Git was originally written for filesystems with POSIX semantics where this issue does not exist.\nFeel free to start discussing this problem on the main (devel) Git list which is git at vger.kernel.org (see http://vger.kernel.org/vger-lists.html#git) -- if you would convince those folks to change the behaviour of the Git core, Git for Windows would (kind of) automatically pick the change.\n. Look at http://gitweb.codeplex.com/ (or google for \"git+smart+http+iis\" for other possible soultions) and please refrain from abusing a bug tracker for asking general questions -- these should be asked in other places such as stackoverflow.com (tag \"git\") or the MsysGit mailing list http://groups.google.com/group/msysgit\n. ",
    "ernes32": "Thanks @kostix.\nI use portable(extracted) version of msysgit on my FAT32 HDD and I have all the copies of git.exe\nStill, I think it is a bad design to have all those hardlinks instead of parameters to git.exe\nThanks,\n. ",
    "samvasko": "Please reopen this issue. This is still relevant\n. @SchizoDuckie Can't you just use $* ?\nYes final fixes are nice. But this looks like a deep shit to walk through really fast.\n. Can somebody point me to the definition of the hardlinks? In build process/makefile...\n. Every time I try to comprehend a makefile I :rage4:. It is like one fucking spaghetti monster. But from the looks of it, it does not look like this is where the magic happens. \nMy hypothesis is that in git is handling the name of the caller and transforming that into respective command. So if you rename file git-status to git-log it will execute the log. But how the hell does the git-diff-files work?\n. I am here to help. I got really simple script I just finished here. I am using the md5 of the git.exe to match and replace the duplicates. At a glance it looks fine, now I am thinking about writing a test to check if all of those batch file do the same as the originals.\nDo you think this solution can be used here too?\n. I yield.\nI came here because I was tired of uploading ~200mb files for every release of cmder. And I am sure people are tired of downloading them. (there is 7z version too, but many people do not have 7z)\nI do not have the time necessary to read the Git SubmittingPatches or to dig thought the git source.\nYou can close this.\n. Thanks!\n. ",
    "SchizoDuckie": "Can't we just please replace these .exe files with *.bat files? \nFor instance:\ngit-clone.bat:\n@echo off\ngit clone %1 %2 %3 %4 %5 %6 %7 %8 %9 %10\n(etc, since there can be a huge amount of arguments to a git command i suggest extending this to 20 )\n. So what's the problem then in patching the scripts to replace the git-* commands? Will there be big issues or is the thing that's holding it back just backwards compatibility? If it's just the backwards compatibility I'd be happy to take a stab at patching this and submitting a pull request for all scripts affected.\nI'm just wondering because this doesn't look like rocket science, and this really looks quite unprofessional to waste 150 mb this way on win32.\n@bliker : there is %* (as I only just learned from stackoverflow: http://stackoverflow.com/questions/4871620/how-to-pass-multiple-params-in-batch )\n. I did not have the time yet to read the pull requests yet @sschuberth, just trying think along here! I don't mean to offend anyone, just trying to be constructive and provide possible solutions and angles, since it's obvious that a win32 specific 'portable' patch is not something that will ever make it upstream to everyone in git/git.\n. ",
    "brbrady": "Wait, but why? Link is broken. Seems like this is a reasonable request...\n. ",
    "Leont": "AFAIK Strawberry Perl is also based on MingW, I suspect there's a lot of overlap between what you guys are doing and what they are doing.\n. I see. In that case, taking this to p5p may help. I see no reason why perl can't support msys out of the box.\n. It's already in apparently.\n. @sschuberth: yeah, I meant it's applied to blead. AFAICS porting to 'new' platforms is outside of the scope  of a maintenance branch, so I wouldn't count on an official backport. 5.18 is scheduled for may 2013.\n. ",
    "dougwilson": "@sschuberth I was confused as well, but I think GitHub just marked up the link text weird. The link points to the anchor of the comment with https://rt.perl.org/rt3//Public/Bug/Display.html?id=115900 in it, so I'm sure @csware is referring to the patch in that RT ticket.\n. ",
    "Groovounet": "Hi,\nIs there a way to use Perl 5.18 with Git MSys ?\nThanks,\nChristophe\n. Hi,\nI need to use a recent version of Perl to get some code working. \nSo downloading  the stock version won't work, so what do we need to get?\nThanks,\nChristophe\n. Oups! Sorry you are right.\n. ",
    "sylus": "My apologies @dscho I indeed meant the version of \"patch\".\nYour point about using git apply though definitely makes sense except my problem is the build out script I am using (Drush Make: http://drupal.org/project/drush) based on certain contexts uses the patch executable so it is out of my control.\nI just wanted to make sure that the default version of patch that comes with the latest msysgit was indeed version 2.5 ^_^\nIf it is ideal I can of course submit a pull request to update the version of msys.\n. ",
    "AlexNolasco": "Related to\nhttp://code.google.com/p/msysgit/issues/detail?id=286\n. ",
    "chaoticbob": "This still appears to be a problem on git version 1.8.0. It's wreaking havoc on my team's work right now. We keep having to remove and add files because git keeps getting confused and thinks there's two copies - from what it seems. The current work around is to add files with a lowercase path for the directory. Is there another work around? \n. ",
    "xcellenceit": "Thank you for answer.\n. ",
    "johnstevenson": "Okay, further info. The problem exists only if the directory is the last entry in your path, which means it must be a USER path variable. The trick of adding a path-separator onto the end of it works because this is then interpreted as an empty path with a dot . and your last entry becomes the second-to-last entry.\nI now understand that any paths to cygwin are removed from the PATH environment variable and I believe that the awk call made to do this causes the problem by appending an extra character (a null byte I think) in its result, which means the path cannot be resolved.\nTo demonstrate this, add the following to the profile script, immediately after the path has been set:\n``` sh\necho PATH length is ${#PATH}:\necho $PATH\necho\nrun awk stripping non-existent parts\nAWKEDPATH=\"$(awk -vRS=: -vORS=: '!/xxxxxxx/' <<< \"$PATH\")\"\necho AWKEDPATH, nothing changed in PATH, length is ${#AWKEDPATH}:\necho $AWKEDPATH\necho\nremove trailing separator\nAWKEDPATHREM=\"${AWKEDPATH%:}\"\necho AWKEDPATHREM, removed trailing separator, length is ${#AWKEDPATHREM}:\necho $AWKEDPATHREM\necho\n```\nThis essentially tells awk to remove a non-existent value xxxxxxx from the Path, then strips the trailing separator that this command adds. However the character-length of the path is increased by one.\nHope this helps.\n. Yes, that is a neater solution. However, is stripping cygwin the most robust way of doing this, since the user could have installed cygwin anywhere, and possibly not in a directory called cygwin. Might it be easier to just put the path to Git\\cmd at the start of the Path, or at least after all the required mingw/bin stuff? Then you could just ignore any references to cygwin.\n. Sorry, I meant putting the path to Git\\bin at the start of the Path\n. Okay I will amend the code. I used the one-liner because it keeps IFS out of the global scope. \n. Thanks for nuturing me through this. I have amended the commit message, which now includes a reference to what I think is another side-effect of the null byte, in that it screws up the path for child processes that are not dependent on msys-1.0.dll. I have tested this by running a php script from Git Bash:\n<?php\necho getenv('Path').PHP_EOL;\nand on my machine, at least, php is getting POSIX paths when awk has been used. The correct Windows paths are inherited if cygwin is not in the path, or if the patch code is used.\n. Okay, exercised and enlightened.\n. Interesting. I researched \"if\" or \"case\", but obviously not well enough. Amended and checked.\nCan you confirm the Posix path problem (note this only happens if a cygwin path is not at the end of the PATH) ?\n. You don't need to install Cygwin, you just need to put it in your path: C:\\cygwin\\bin will do it, but not at the end. Would be useful to get this confirmed as it is a blocking issue on https://github.com/composer/composer/issues/1263.\nIf this is the case (and I am not going completely mad) it would be handy to know when this might be released. \n. You are correct. Sorry, the path I was checking had no spaces. Must be the IFS setting. I will go back to the original long-winded version.\n. Nice, that seems to be working. I am testing as follows:\nAdd C:\\Program Files\\cygwin\\bin to System Path, but not as the last item (you do not need to have Cygwin installed)\nQuick demo of Posix path problem: in a new Git Bash terminal type cmd, then at the Windows command prompt type path. This displays the path in Posix format.\nCreate a new directory in your User profile C:\\Users\\<name>\\folder with spaces and add this as the last item in your User Path.\nCreate a file called pathtest.bat in this directory containing:\n@ECHO OFF\necho Path from %~f0 is:\necho %PATH%\nCreate a file called pathtest in this directory containing:\n```\n!/bin/sh\necho Path from \"${0}\" is:\necho $PATH\n```\nExpected incorrect Git Bash behaviour from outside this directory using existing code (with cygwin in the path):\n```\n$ pathtest\nsh.exe\": pathtest: command not found\n$ cmd /K pathtest\n'pathtest' is not recognized as an internal or external command,\noperable program or batch file.\n$ cmd\n\npath\n... \n```\n\nExpected correct Git Bash behaviour from outside this directory using new code (or not having cygwin in the path):\n```\n$ pathtest\nPath from /c/Users//folder with spaces/pathtest is:\n... \n$ cmd /K pathtest\nPath from c:\\Users\\\\folder with spaces\\pathtest.bat is:\n... \n$ cmd\n\npath\n... \n```\n\nHopefully these tests cover a mistake I was making before, in that relative paths get expanded correctly when passed to a child process C:\\Program Files\\Git\\local\\bin;C:\\Program Files\\Git\\cmd, so I was testing against something that was always going to be correct (by calling a php script that itself called git) and I completely missed the malformed spaces deeper in the path string.\n. Thanks for your work in all of this. If the grep -vi is to allow for a case-insensitive search, then is it not negated by the case-sensitive case statement ?.\n. Guess it depends upon the impact of always doing 2 echos, 2 trs and a grep against a: case $(echo $PATH | tr '[:upper:]' '[:lower:]') in or some such\nor a shopt -s nocasematch / shopt -u nocasematch pair.\n. Yup, as it was.\n. ",
    "pointoforder": "I've confirmed that changing the line in share/WinGit/install.iss under [Icons] from:\nName: {group}\\Git Bash; Filename: {syswow64}\\cmd.exe; Parameters: \"/c \"\"\"\"{app}\\bin\\sh.exe\"\" --login -i\"\"\"; WorkingDir: %HOMEDRIVE%%HOMEPATH%; IconFilename: {app}\\etc\\git.ico\nto\nName: {group}\\Git Bash; Filename: {app}\\bin\\sh.exe; Parameters: \"--login -i\"; WorkingDir: %HOMEDRIVE%%HOMEPATH%; IconFilename: {app}\\etc\\git.ico;MinVersion: 6.0\nName: {group}\\Git Bash; Filename: {syswow64}\\cmd.exe; Parameters: \"/c \"\"\"\"{app}\\bin\\sh.exe\"\" --login -i\"\"\"; WorkingDir: %HOMEDRIVE%%HOMEPATH%; IconFilename: {app}\\etc\\git.ico; OnlyBelowVersion: 6.0\nworks on Windows 8.\nNow I'll see if I can figure out how to submit a pull request...\n. I think that\u2019s slightly different from the Win 8 behavior I recall seeing. I\u2019ll have to double-check once I get back to a machine With VS installed, but I believe what I saw on Windows 8 was a cmd window showing up with the Git Bash icon. (I wasn\u2019t running Git Bash at all at the time.)\nIt sounds like it\u2019s a slightly different (though related) side-effect on Windows 7. If you change the shortcut to Git Bash in the start menu to remove the cmd.exe wrapper, does that prevent the windows from getting put together in the same taskbar group?\n. I'll update the formatting as requested. I don't have Vista/7 installed, but my guess is that the same behavior affects them too (since it's the same major version and this kind of behavior appears usually to stay the same across minor versions). I'll leave it up to you.\n. Regarding the commit message, thanks for the feedback. Since the commit already exists in pointoforder/msysgit, what's the best thing to do at this point? Should I rewrite history, or will that mess up the pull request mechanism? Or do I leave the commit as-is in pointoforder/msysgit and just update this text in the pull request itself?\nThanks,\nDavid\n. Does everything look OK at this point? Is there anything else you'd like me to do?\nThanks,\nDavid\n. ",
    "paulcbetts": "Oops, wrong fork. Please disregard.\n. (If MSysGit proper is interested in shipping git-tfs, I can certainly rebase this PR against msysgit) \n. @dscho  TFS is Microsoft's version of Perforce - this is another app in the vein of git-svn, git-p4, etc, lets you live in Git world but sync commits with TFS. A caveat of including it is that it assumes you have .NET 2.0 is installed - reasonable for GitHub for Windows but might not be for MSysGit.\nAs to the patches we can contribute, I'll talk with @aroben tomorrow and see if there's anything good in there. Generally I believe we've been trying to submit stuff we think is Generally Useful\u2122\n. @sschuberth That seems overkill. All of git-tfs is like 500kb zipped. Not to mention it's a support / serviceability nightmare - \"Which version of Git do you have? Now, which version of git-tfs do you have, completely unrelated?\"\n. @sschuberth I really don't see any difference between a bindrop in the source code vs. a bindrop in the installer. Maybe a reasonable compromise is a build script that downloads git-tfs and drops it in the package before it gets 7Zip'ped up?\n. hwhoops, please disregard (or take it if you want it!)\n. > Maybe something to fix on your side. Maybe not, you decide.\nYeah, we need to catch back up, we're a bit behind on tracking msysgit\n. @dscho I don't think we've fixed anything that would be of General Use\u2122 - afaik @aroben submitted a proper PR for a broken git-svn awhile back that was merged, but the rest of our changes have been pretty minor / not appropriate for msysgit proper.\n. > New attributes in etc/gitattributes to help with merging Visual Studio files. However I seem to recall that we weren't totally sure these were actually helpful.\nYeah, I don't think that they belong in msysgit proper - in fact, we're looking to remove them soonish in favor of a custom csproj merge driver\n. @kusma GitHub for Windows uses itself as the cred manager so when you log into the app via the UI, the command line already knows your credentials. It's a pretty straightforward / boring implementation, we can share the details of how it works if you're interested.\n. @kusma It's the other way around, if you already logged in via the UI, it'll already know. If you never opened the GitHub UI, it'd be very similar to other credential managers. \n. @dscho We'll definitely be looking to contribute anything that makes sense (i.e. anything that isn't GitHub-specific), and our fork will always be public, so should you see something you'd like us to try to put into the official version, we'll put in the work to clean it up and submit it as a proper PR. \n. @ecki Yep, it will - we pull in msysgit/msysgit on a regular basis, and we try to contribute everything that would be useful to upstream instead of in our fork\n. ",
    "BenBE": "Independent of MSysGit being OpenSource or not, it's a bad user experience to close issues unresolved. Especially not telling where such change would have to be done.\nAlso developing on Windows for my day job I have little fun in setting up multitudes of complicated build environments for a one-time patch.\nAlso having read the ticket on updating Perl there's little chance I can spare the time to break things on my production system.\nFinally, I'm already involved with enough other OpenSource projects. Thus overall it's easier just to fix the issue at hand instead of bitching around.\nThanks in Advance,\nBenBE.\n. And there's your Pull Request: https://github.com/msysgit/msysgit/pull/76\nThanks to Jesse.\n. ",
    "spraints": "Yep. Sorry about that.\n. ",
    "hickford": "Basically, install.iss installs a shell extension to (typically) HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\shell . Would need to install a similar shell extension to HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell. I say, similar, because would need to change the corresponding command subtly (replace %1 with %V).\n. Surely this works on exactly the same platforms as before since I've just added an extra item using the same old method. I don't know whether this includes Windows XP.\n. I see. Thanks Sebastian! \n. > As git-p4 is written in Python, it's simply not included in the distribution\nThat's a shame. I'd like to try git p4 in my office. Do you know if any other Windows builds of Git support this feature?\n. FYI https://github.com/git/git/blob/master/git-p4.py is incompatible with Python 3.x . Install Python 2.x\n. See also https://github.com/git-for-windows/git/issues/594\n. Thank you both.\n. ",
    "snaewe": "This doesn't work on XP, does it ?\n. I guess \"%1\" is as valid.\nThe best reference I found is this one: http://superuser.com/a/473602\n. Because I have core.whitespace=trailing-space,space-before-tab,tab-in-indent,cr-at-eol  and committing without '-n' wasn't possible, IIRC.\n. ...and init.templatedir points to a directory containing an enabled pre-commit hook.\n. Will do.\n. Somehow /share/vim/vim74/{g,}vim.exe got lost :-( Will fix.\n. Will do.\n. ",
    "japsumali": "hello, how about for terminal on a mac?. ",
    "Anahkiasen": "Problem is I tried both options 2 and 3 in the msysgit installer and both failed. git was accessible but composer wasn't finding it, in both cases.\n. Well that's the problem : there's no error message, when I type git in cmd it says git.exe crashed but display no error message, it just goes to the next line.\n. ",
    "temistokles": "The same problem appears in case the git deamon runs on Linux and you try to push from Windows (1.8.3.msysgit.0). Tried couple of \"wanna be\" workarounds but none seemed to work.\n. ",
    "socantre": "Isn't this the well-known bug with side-band-64k where the msys emulation of posix sockets causes a deadlock in certain usage patterns? This was issue 457 on the old google code hosting of this very project: (dead link) http://code.google.com/p/msysgit/issues/detail?id=457 \nhttps://groups.google.com/forum/#!msg/msysgit/at8D7J-h7mw/eaLujILGUWoJ\nhttps://groups.google.com/forum/#!topic/msysgit/uV_mnDrwb4c\nhttps://groups.google.com/forum/#!topic/msysgit/F7ppVyy7xU8\nhttp://blog.dmitryleskov.com/small-hacks/its-been-a-long-time-since-i-had-to-patch-a-binary-executable/\nhttp://billauer.co.il/blog/2012/10/git-pull-windows-freeze-receive-pack/\nhttp://weberde.wordpress.com/2013/02/06/how-to-fix-windows-7-64-bit-git-push-msysgit-hang-up-problem/\n. @t-b Yeah, one of my links points to a mailing list that discusses that patch. It didn't work in 1.9.2 and I came here to see if it was safe to update (so I wouldn't have to apply a binary patch or build from source yet again) and saw this issued simply closed. I hadn't realized it had actually gone in, so you've prompted me to upgrade to 1.9.4 where the issue is finally fixed via that workaround. Thanks.\n. ",
    "jtgans": "Wait, why is this closed? I just ran into this recently on 1.9.5.msysgit.1 and it /still hangs/ without the workaround flag turned on.\nCan we just default this flag to true in the msysgit builds?\n. Is this also a problem for GfW? If so, I'd be happy to send along a patch to enable the workaround by default. \n. ",
    "agibson-vrnt": "Seeing what looks to be the same problem in 2.8.1.windows.1\n. ",
    "johnnyb": "I just wanted to leave a comment for those finding this page that the way to work around it is by running this command:\ngit config --global sendpack.sideband false\n. ",
    "kgybels": "@sschuberth \n1) Because this file is also used by the vim from vim.org, which I use. Without syntax on in my config file that command line vim will not use syntax highlighting.\n2) You can also reproduce the problem with \"syntax enable\" instead of \"syntax on\" if you prefer that. I think the difference is not really important when done in your configuration file.\n. ",
    "Hestros": "Great fix!! Sweet and short!\n If I understand correctly this is an XP issue?? and %v is a vb variable? \n    sschuberth mention is fixed on installer. I had this issue with the current version (Git-1.8.1.2-preview20130201.exe) ; Guess I'm missing something!!\nmy XP (86x) 32bit fixed with %L not %1; \n(\"--working-dir\" \"%1\" It open the window with links of the repositories but they are not valid; same as if all param and value were missing.Is acting like the shortcut from quick start [\"C:\\Program Files\\Git\\bin\\wish.exe\" \"C:\\Program Files\\Git\\libexec\\git-core\\git-gui\"] but without valid links.\n. Now that's clear enough!! \nIn that case all XP users must keep their mind on updates! \nIn my case I don't see any point for update. Now it works like a charm!!\nIf it's working don't change it. Basic rule... :+1: :)\n. ",
    "bricelam": "I've crossposted this since I wasn't sure where to file it.\n. ",
    "Wikinaut": "version info added\n- http://code.google.com/p/msysgit/downloads/detail?name=PortableGit-1.8.1.2-preview20130201.7z&can=2&q=\n- PortableGit-1.8.1.2-preview20130201.7z\n. (deleted)\nUPDATE see next comment\n. I can now expressly confirm that the problem is also solved with\n@if not exist \"%TERM%\" @set TERM=msys\nas suggested by you.\n. Okay, I see your points.\nA new set patches each with a single new feature will be deployed until 18.02.2013.\nI close this pull now.\n. ",
    "BaconRanch": "Glad you like the changes!  I have reverted to the original msysgitlogo.ico and I added a dark background to the installer image.  I also updated the screenshot in the PR post as well, so you can see how it looks.\n. The logo does contain the familiar Windows- style colored squares, but it displays them in a diamond with a cutout of a visual representation of merging branches.  The intent was to create a design that merged elements from both Windows and git.  This visual \"merging\" represents a similar merging process that goes on in the adaption of a unix-style piece of software to the Windows operating system, which is what the Git for Windows project is all about. \nOn the topic of confusion, I would be surprised if any user technical enough to understand what git is would dare mistake it for a Microsoft product, but I understand your point.  However, while it certainly looks more like a Microsoft product than the original git logo, I believe it is still distinct enough.  It sits in a middle-ground, much like the project it represents.\n. It's fine.  Thanks anyway!\n. @dscho Yes, I would be happy to come up with a redesign for the page.  I have a fair amount of experience in web design and, as a college student on summer break, I have some free time to work on it too.  Would you want me to work with the content that's currently on the page or did you have ideas as to different content to display for the new site? I ask because I noticed \"Stay tuned, this page will have more information later!\" at the bottom of the current site.\nThank you for the opportunity by the way!\n. @dscho Sounds good!  I've got some ideas and will come up with a design over the next few days.\n. I thought I'd post a preview of what I have so far on the new site design.  It lacks some content so far, but it should give you an idea.  I think its turning out very well:\nhttp://dl.dropboxusercontent.com/u/40538551/gwhtml/index.html\nJust in case something goes horribly wrong with the preview due to a cross browser incompatibility that I'm not yet aware of, here's a screenshot of what I see in Firefox 21:\nhttp://dl.dropboxusercontent.com/u/40538551/gwindows.png\n. @sschuberth Ok, so I've made the logo transparent and used \"SCM\" in the title instead of \"VCS.\"  Easy fixes.  As far as the capitalization of \"Git\" goes, I decided to follow git-scm.com and capitalize all references of the word on the page except for the header at the top of the page.  I understand the point about the software being called \"Git\" officially, but I think the lowercase \"g\" is so recognizable it's practically iconic now.  Also, I use \"Git\" everywhere in HTML and simply style the lowercase in CSS, so search engines will parse it with correct capitalization.  As a result, we're usually using the capitalized version and only lowercasing for \"recognizability.\"  The dropbox link to the site has been updated with these changes. \nAs for the blue section covering the bottom half of the page, it currently contains a \"So what's Git?\" section with no content (yet).  This would serve as a brief introduction to Git that provided a link to git-scm.com.  \nWe could have a second section that described the main tools and features of Git for Windows.  Things like the bash and gui, as well as diff tools.\nFinally, we could have a \"Contributing to Git for Windows\" section that solved the problem @hvoigt mentioned of needing an explanation of things like bug reporting & problems as well as a link to the msysGit distribution for coders.  The \"Develop\" button (which I have renamed to \"Contribute\") at the top of the page would simply link to this section.\nI will make a pull request and add in this content over the next few days.  Oh! And I'm glad you guys like it! :)\n. The site design is done!  Check out the latest on the dropbox link!  At this point, we're looking at some CSS cleanup and revision of the site's text content.  I'll make a fork and a pull request within the next 24 hours and we'll work on final revisions there.\n. Yes, I understand.  Sorry about that.  It was a simple enough project that missing code revisions / history isn't a huge deal though.\n. I have forked and committed to msysgit.github.com.  Note that I tried to use the repository preview tool: htmlpreview.github.io.  However, it does not seem to load SVG images or custom fonts, so the site looks pretty terrible when viewed through the preview tool.  As a test, I created baconranch.github.io and committed the same files.  Everything worked fine.\nI apologize for not creating the fork sooner.  I did not realize that you may have wanted to contribute to the design as it was being created.  Maybe I worded my previous few posts poorly.  When I said the site design was done, I meant that I had completed my idea for an initial design.  The site can certainly be modified further and there's no reason we can't begin to collaborate at this stage on both content and style.\n. @sschuberth @dscho \nIt has been more than a week and nothing has happened on the PR. I can understand if you're busy but when do you think you'll have time to look at this?\n. @sschuberth I'll take a look at your feedback and make revisions.  Many thanks for the update.\n. ",
    "mcandre": "It's not a bad visual design, however, its likeness to the XP-style Windows logo makes it easy to confuse with Microsoft-made software. I rather like the current orange msysGit logo and feel that its distinctness from most other programs is a valuable attribute.\n. @BaconRanch It's not a matter of skill or intelligence. This logo is almost exactly the Windows logo, rotated 45 degrees.\nFurthermore, it's better to unify logos across platforms. This is known as branding. Would you prefer that Firefox for Windows had a Windows-like logo? Everything starts to look like Windows icons, and it becomes much slower to pick through them to find the one you want.\n. @dscho Apologies. Counter proposal: The orange one here is perfect, let's use that. A platform-specific logo is silly.\n. https://github.com/msysgit/git/issues/65\n. Can you reproduce in Windows XP?\n. @dscho When I add set -x to /etc/profile, bash prints out a ton of text before my prompt.\n...\n+ cd '/c/Documents and Settings/apenneba/Desktop'\n++ __git_ps1\n+++ __gitdir\n+++ '[' -z '' ']'\n+++ '[' -n '' ']'\n+++ '[' -n '' ']'\n+++ '[' -d .git ']'\n+++ git rev-parse --git-dir\n++ local g=\n++ '[' -n '' ']'\napenneba@NIC-WKS01 ~/Desktop\n$\n. ",
    "koraktor": "Additionally, it seems that Microsoft switched from the colored logo to a monochrome logo for Windows 8. Only Microsoft's own logo has the four well-known colors. I guess it's not a good idea to link Git (or msysGit) to Microsoft's CI.\n. ",
    "kevmuret": "A way to make it work is to create a .exe file with the same name and simply write a call usign the complete path and redirect arguments with \"$@\".\nExample to make script.bat running as script you create a file named script.exe with the following content :\n/path/to/script.bat \"$@\"\nAnd it will work \ud83d\udc4d . ",
    "cortextual": "Awesome, that workaround does the trick for me. My apologies for not having got around to trying to package a new version of tail yet. I've been pretty swamped.\n. ",
    "pocesar": "yes, I'm sure. How two distinct programs stopped working after upgrading the msysgit version?\n. But it's not just Tortoise that is having the problem, Phpstorm is too, and I notified them. I asked you, how the update broke 2 distinct programs at once? \n. Ok, I'm using version 1.8.1.msysgit.1 (that is, Git-1.8.1.2-preview20130201.exe) on Windows 7 Home Premium  64bits. I've installed it with the settings:\n- Windows Explorer Integration: Simple context menu, Git bash here / Git GUI here\n- Associate .git and associate *.sh\n- Run git from the Windows Command Prompt\n- Checkout as-is, commit unix-style\nInstalled in C:\\Program Files (x86)\\Git\\ and placed C:\\Program Files (x86)\\Git\\bin to PATH environment variable. I was using version 1.8.0 before and after upgrading and restart the computer, everything stopped working. \n. ",
    "zBart": "I'm having this same issue with version 1.8.4.msysgit.0.\nHowever: if I repeatedly click the 'Test' button in IntelliJ IDEA, sometimes it actually works and reports the correct version! Next time I click, it says that it cannot parse the version.\nIf I enable GIT_TRACE I get the following message:\nErrors while executing git --version. exitCode=0 errors: trace: built-in: git 'version'\nBut when I click long enough, it suddenly works and reports the version number (which is strange, because I assume the trace would break the version parsing). Next click, I get the error again.\nI tried with both the git.exe in /bin/ and /cmd/, both show the same behavior. \nIt's almost as if sometimes the output isn't sent back correctly.\n. @dscho Unfortunately I've reinstalled my machine in the meanwhile, and now Git seems to work perfectly (both at home and at work). I'm not sure what I did to cause this issue (although I do remember I installed / removed msysgit and TortoiseGit several times). I think there might be some sort of registry key causing trouble somewhere, because I completely removed the installation folder. Either that, or some soft of a persistent issue in IntelliJ itself.\nIn the end, for me this problem is resolved. \n. ",
    "vohof": "Remove GIT_INSTALL_DIR/etc/motd (message of the day) usually at C:\\Program Files (x86)\\Git\\etc\n. ",
    "jkodroff": "Ok, so we have a little further information:\nThe problem seems to be caused by a registry key used by the application AirFoil.  The value is set to \"flashplayerplugin\" by AirFoil.  If I take off the \"\", the output no longer appears.  It's definitely not specific to git, as ruby -v will exhibit the same behavior if the offending registry key is present.  \nAs we both know, both ruby and git are *-nix tools ported to Windows so I'm thinking it's possible that it's a bug with the tools used to build both git and ruby since starting a registry key with * seems legit.  I did a brief search for the Ruby for Windows source code, but couldn't find any detailed info on what tools it uses to compile (e.g. a makefile).\nUnfortunately, I know virtually nothing about native Windows apps or GNU stuff on Windows so I don't think I can be much more help in this area.  I have reported the bug to Airfoil, but I figured it would be helpful to follow up since it's possible that you folks might see this issue again.\nAnd thanks for making an incredibly useful tool.  I couldn't imagine life without it, and I'm sure it was quite a bit of work.\n. Per this StackOverflow answer, it's:\nHKEY_CURRENT_USER\\Software\\Rogue Amoeba\\Airfoil\\WhiteList\\WhiteListItem_12\nThe exact number after WhiteListItem probably varies from install to install, but that probably doesn't matter.\n. ",
    "bond-": "Hmm.. hoping that it gets addressed..\n. ",
    "superstator": "FWIW, I was able to get it running just by installing ActivePython and grabbing the script from https://github.com/git/git/blob/master/git-p4.py. You need to call it as 'git p4.py clone', etc, but it works. You'll also need a vi replacement of some kind.\n. On my system it is in C:\\Program Files (x86)\\Git\\libexec\\git-core. There should be a git-p4 placeholder script there already, so worst case you could search your filesystem for that.\n. ",
    "alihelmy": "\nFWIW, I was able to get it running just by installing ActivePython and grabbing the script from https://github.com/git/git/blob/master/git-p4.py\n\nWhere did you place the git-p4.py script for git to pick it up?\n. Excellent. Worked Perfectly. Thanks\n. ",
    "steveruckdashel": "\n.You need to call it as 'git p4.py clone', etc, but it works.\n\nRename git-p4.py to git-py, replacing the placeholder file.\n. ",
    "trulycool": "+1 Cascaded context menu in Microsoft Windows\n. ",
    "kismert": "@sschuberth:\nI'm trying to write a source export plug-in for Microsoft Access. Starting with 2007, Form and Report files are exported as UTF-16. \nVisual Studio 2012 supports UTF-16 as a file format.\nThe default unicode conversion option in SQL Server Management Studio 2008 is UTF-16.\nIf you save a text file as 'Unicode' in Notepad, you get UTF-16.\nWindows uses UTF-16 encoding for its internal functions. \nObviously, Microsoft doesn't use UTF-16 as a file-encoding standard, and UTF-8 has increasing support. Still, there is a fair chance you will run into UTF-16 files in Windows development.\nRegarding breaking the user experience, the filter would be off by default. The user would have to manually configure their gitattributes to handle UTF-16 files as required.\n. ",
    "Saaman": "This is exactly what I meant @sschuberth !\nFYI, I cared about this corner case when implementing reflog on checkout in LibGit2Sharp.\n. ",
    "Alexander-Shukaev": "Didn't I provide evidence? I gave an example of what happens, and I expected it to be some sort of bug.\nI indeed have environment variable set, but it's not GIT_DIR, it is Git_DIR which I use to designate the installation directory of Git. Seems like case-insensitiveness on Windows played an evil joke once again. Anyway, I have to admit that GIT_DIR is an awful name for the environment variable, especially in the context of what this variable is used for.\nSorry if that issue was stupid and doesn't belong here. Thanks. Regards.\n. ",
    "aivus": "I used nginx as front-end and apache2 (2.2.16-6+squeeze11) as back-end.\nApache vhost config:\n```\n\nServerName git.*.ua\nServerAlias www.git.*.ua\nServerAdmin webmaster@localhost\nDocumentRoot /home/aivus/git.**.ua/www\n\nOptions FollowSymLinks +Indexes\nAllowOverride None\nOrder allow,deny\nallow from all\n\n\nDAV on\nAuthType Basic\nAuthName \"Git\"\nAuthUserFile /home/aivus/git.**.ua/passwd.git\n\nRequire valid-user\n\n\nLogLevel debug\nErrorLog /home/aivus/git.*.ua/logs/error.log\nCustomLog /home/aivus/git.*.ua/logs/access.log combined\n\n```\nnginx config:\n```\nserver {\n    listen       80;\n    server_name  git.**.ua;\nlocation / {\n    proxy_pass   http://127.0.0.1:81;\n    proxy_set_header   Host             $host;\n    proxy_set_header   X-Real-IP        $remote_addr;\n    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n}\n\n}\n```\nI tried open apache \"outside\" and get same problem:\n***********.103 - - [16/May/2013:20:03:40 +0400] \"GET /test/info/refs?service=git-receive-pack HTTP/1.1\" 401 634 \"-\" \"git/1.8.1.msysgit.1\"\n***********.103 - - [16/May/2013:20:03:45 +0400] \"GET /test/info/refs?service=git-receive-pack HTTP/1.1\" 401 634 \"-\" \"git/1.8.1.msysgit.1\"\n***********.103 - aivus [16/May/2013:20:03:46 +0400] \"GET /test/info/refs?service=git-receive-pack HTTP/1.1\" 200 295 \"-\" \"git/1.8.1.msysgit.1\"\n***********.103 - aivus [16/May/2013:20:03:46 +0400] \"GET /test/HEAD HTTP/1.1\" 200 259 \"-\" \"git/1.8.1.msysgit.1\"\n***********.103 - - [16/May/2013:20:03:49 +0400] \"PROPFIND /test/ HTTP/1.1\" 401 726 \"-\" \"git/1.8.1.msysgit.1\"\n***********.103 - - [16/May/2013:20:03:49 +0400] \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\" 400 522 \"-\" \"-\"\n. With file _netrc git start use Authorization header. (Without _netrc typed username/password in CLI not use)\n. WHY git make first request without Authorization header, and second - with.\nBut second request does not reach to server. (I see only first request (without Authorization header) in apache logs).\n```\n Connection #0 to host git.**.ua left intact\n* About to connect() to git.**.ua port 81 (#0)\n   Trying 5.0.0.0... * 0x6d9548 is at send pipe head!\n Connected to git.***.ua (5.0.0.0) port 81 (#0)\n\nPROPFIND /test/ HTTP/1.1\nUser-Agent: git/1.8.1.msysgit.1\nHost: git.**.ua:81\nAccept: /\nDepth: 0\nContent-Type: text/xml\nContent-Length: 171\nExpect: 100-continue\n\n\nDone waiting for 100-continue\n< HTTP/1.1 401 Authorization Required\n< Date: Sun, 19 May 2013 17:32:46 GMT\n< Server: Apache/2.2.16 (Debian)\n< WWW-Authenticate: Basic realm=\"Git\"\n< Vary: Accept-Encoding\n< Content-Length: 492\n< Content-Type: text/html; charset=iso-8859-1\nthe ioctl callback returned 0\n<\nIgnoring the response-body\nConnection #0 to host git.****.ua left intact\n\nIssue another request to this URL: 'http://git.****.ua:81/test/'\n\n\nRe-using existing connection! (#0) with host git.****.ua\n\nConnected to git.****.ua (5.0.0.0) port 81 (#0)\n0x6d9548 is at send pipe head!\n\nServer auth using Basic with user 'aivus'\n\nPROPFIND /test/ HTTP/1.1\nAuthorization: Basic Y***z\nUser-Agent: git/1.8.1.msysgit.1\nHost: git.**.ua:81\nAccept: /*\nDepth: 0\nContent-Type: text/xml\nContent-Length: 171\nExpect: 100-continue\n\n\n\nDone waiting for 100-continue\n\nThe requested URL returned error: 408\nClosing connection #0\nerror: Cannot access URL http://git.****.ua:81/test/, return code\n22\nfatal: git-http-push failed\n```\n\nApache logs:\n*************.103 - aivus [19/May/2013:21:32:44 +0400] \"GET /test/HEAD HTTP/1.1\" 200 259 \"-\" \"git/1.8.1.msysgit.1\"\n*************.103 - - [19/May/2013:21:32:46 +0400] \"PROPFIND /test/ HTTP/1.1\" 401 726 \"-\" \"git/1.8.1.msysgit.1\"\n*************.103 - - [19/May/2013:21:32:46 +0400] \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\" 408 524 \"-\" \"-\"\n. ",
    "piotr-cz": "@aivus Did you managed to work around the issue?\nThere are few similar issues reported on GIT mailing list, one of them: [BUG] Push fails with dumb http to SabreDAV\n. Okay, this is indeed a bug in GIT, resolved in 2.0.3 in this commit: [https://github.com/git/git/commit/479eaa8ef8384d8026dc05c1288e96ffd9e296d6]\nI've just built msysgit with GIT 2.0 + patch applied and it fixed the issue for me.\nProbably you just need new version of git-http-push.exe.\n. Yes, I haven't been able to reproduce the state from last night when it worked. I've been trying to make own builds of mysysgit and just lost it the working one.\n. I can confirm issue goes away in GIT v2.1.0-rc2 or when commit being applied as a patch on v2.0.0 so I'm pretty sure it should work as hotfix in 1.9 versions.\nAlternatively whole http-push.c can could be backported to msysgit from GIT >= 2.0.4. This works out too (msysgit 1.9.4 with git-http-push.exe 2.1.0).\nThe question is if you want to cherry-pick hotfixes for v1.9.* (which looks like wont be actively developed anymore).\n\nMy problem with builds was that I haven't actually been building git-http-push.exe. There must be a curl-config executable from shell, otherwise Makefile skips http-push silently.\n. Here's a link for http-push 2.1.0-rc2 build, maybe it will be helpful.\nI must say I'd much rather see latest stable GIT version (ATM v2.0.4) included, but I understand reasons about switch to v2.\n. There's a discussion on official msysGit channel\n. ",
    "lmayorga1980": "Fixed already using\ncommand   => 'C:\\Windows\\sysnative\\cmd.exe /k\n\"C:\\Temp\\Git-1.8.1.2-preview20130201.exe /SP- /NORESTART /VERYSILENT\n/SUPPRESSMSGBOXES /SAVEINF=\"C:\\Temp\\git-settings.txt\"\n/LOG=\"C:\\Temp\\git-installer.log\"',\nOn Thu, May 23, 2013 at 3:45 PM, Sebastian Schuberth \nnotifications@github.com wrote:\n\nDoes it also hang if you manually launch Git-1.8.1.2-preview20130201.exe\n/silent from a command prompt?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/msysgit/msysgit/issues/117#issuecomment-18367156\n.\n. \n",
    "ecki": "Thanks guys.\nAnd thanks to @xpaulbettsx for pointed me (https://github.com/github/msysgit/pull/14#issuecomment-18360303) to msysgit upstream for the patch. So I hope it will find its way to the @github installer soon :) \n. No idea why You cannot delete that file yourself and why a delete needs a sign off, but here you go.\n. ",
    "imsobear": "same problem, wait for answer!\n. ",
    "suxpert": "Hi, I'm here because I want to know why can git-bash get the contents of an input method, while msys-bash can not.\nI'm a MinGW & MSYS user for years, but since windows 8 (around), I can no longer use input method correctly within msys-bash (well, so does in the console version of vim). Since I'm Chinese, my code page is 936 by default, thus a Chinese character is 2 Byte, but they (bash.exe && vim.exe, not gvim.exe) can get only the first Byte instead of whole, so input became garbled...\nGit-bash is the first in solving this problem AFAIK. Hooray!\nPS: The second I know is MSYS2 (I used the x64 version), its bash is 4.2, but git-bash is 3.1 (msys-bash is 3.1.17), so perhaps git-bash et.al. should have an upgrade?\n. Update: MSYS2 bash (4.2) and its vim (7.4) still have issue in Chinese inputing and editing.\nSo, git-bash is the ONLY one in sovling this problem until now!\nThen how about patching vim for its Chinese input issue in console version under windows 8?\n. @dscho msysgit comes with a vim (7.3), which need to be fixed for Chinese inputing. The official vim (7.4 console version) have the same issue (see https://groups.google.com/forum/#!topic/vim_dev/k-sWWHFXpqQ ). Will msysgit do this or should I post again on #vim_dev ?\n. ",
    "jakub-g": "It looks XP because I used classic theme etc. on Win7. Well, I'll try to investigate further, maybe it's something due to my tweaks...\n. The same issue happens by the default also on machines of my colleagues, though it's not very noticeable if you use Win7 defaults. I'm using \"Never combine\" option in Start Menu settings > Taskbar > Taskbar buttons, the default is \"Always combine, hide labels\" and then the good icon is displayed.\nAlso I'm not sure what's really the reason behind the problem, now I can't reproduce it any longer.\nFeel free to close this bug if you want.\n. ",
    "ploeh": "FWIW, I've had the same issue with git version 1.8.3 on Windows 7 Professional Service Pack 1 x64.\n. As described here.\n. ",
    "rozwell": "Same here\n@yumeyao you must have meant _1.8.1.2-preview20130201_\n. For me it was missing git/bash entries in mouse context menu.\nDidn't have time to check anything more, so I just installed the previous version.\n@kblees thanks for the info.\n. @kblees I can confirm that version you gave works. Thanks!\n. ",
    "nwoolls": "Just chiming in to say I had the same experience. I installed, uninstalled, and reinstalled 1.8.3 with the Git Cheetah option on Windows 8 64-Bit and could not get the context menu items to show. After seeing this post I uninstalled and then installed 1.8.1, which works just fine the first time.\n. ",
    "aurril": "@kblees Unfortunatly when I try to install the version you have given, my anti-virus scanner detects bash.exe as Win32:Evo-gen. It could be a false alarm, but it still worries me.\n. ",
    "imz": "A similar situation described: http://stackoverflow.com/q/11419700/94687 .\nUnfortuantely, this happens on a mchine of a collegue of mine, so it'll take time before I can get at it.\nThere must have been no Cygwin ever installed on this machine.\n. http://stackoverflow.com/a/16654689/94687: I've had this problem as well. I've solved it with http://support.code-red-tech.com/CodeRedWiki/VirtualAllocPointerNull . Apparently this is caused by some feature, and replacing the dll fixes it for most people.\nhttp://support.code-red-tech.com/CodeRedWiki/VirtualAllocPointerNull: This is a problem that affects a tiny minority of customers, and depends on what other applications they are running at the same time. This is caused by a feature in the MSYS binaries that we use to provide the the build environment for the product.\nIf this happens, you can replace the file\n\\msys\\bin\\msys-1.0.dll\nwith the file in the attached zipfile. msys-1.0.zip\nNote that this does not fix the problem, rather it moves DLL base address. Unfortunately, it is possible the error may occur with this replacement DLL too, again depending on what other applications are running.\nWhat a mystic feature of MSYS that can suddenly cause an error!\n. Yes, that's suprising that other DLLs usually are OK, but this one sometimes fails. What does explain the difference between msys and other DLLs?..\n. @dscho Thanks for the explanation! I've been very interested about it!\n. @dscho I'm almost always very interested at trying \"my own hand\" at a programming problem I encounter. In this case, I was interested very much in an explanation, too. Now you gave it. And now, when I know it's about reimplementing a system call or working it around, I have less interest. Especially, in the first way. I like generic solutions, so if we go the first way, we'd aim at a better Unix emulator under Windows -- here that would manage processes on its own, but also allow tight integration with Windows FS and GUI (or other Windows processes which would be the Git GUI tools)... Sounds quite complex. BTW, I've heard that Windows had POSIX compatibiliyy layer, so I'm a bit surprized there is no proper fork...\nAs for the latter way... Well, I've been thinking of libgit2 which is said to work under Windows, so one might try ro create the Git UI tools ontop of it, and have no stability problems...\nDo you suggest to rewrite msysgit so that it needs no proper fork? I'm not ready to put my efforts into this in my free time, and also I always use Linux, and this averts me from Windows programming.\nI wonder though how other crossplatform projects overcome the problem with fork. Perhaps, all they use really is the combination of fork and exec, and this notion mist work under Windows, I guess. Does Git really needs a fork with duplicating the process memory etc.?\nFWIW I haven't written here that \"I must have a solution\". If your \"you\" is to be read collectively, I don't see why it is not \"we\". :-) \n. It wasn't a comment of mine :-) \nAs for Git's use of fork: I haven't looked closer, but does it make use of fork without exec? Otherwise, perhaps, it could be implemented with spawn in Windows.\nAlso to test the thing, we must know how to reproduce the error in any new msysgit binary.\nI don't feel that the status quo is ok, because whenever we suggest someone to use git under windows, he might run into this problrm and not have the skills to find the \"solution\", but I can't do much about this.\n. Thanks for the further explanation and the link to code! That's interesting.\n. ",
    "Uni-": "If I want to contribute, I will get a new clone of this repository(msysgit/msysgit); I will not modify the root msys, because doing it can mess up my system if I fail. For the reason, I use msysGit-netinstall-.exe instead of Git-.exe because it upgrades my local MSysGit easily. Anyway, I don't think the full history is commonly needed to participate at first; If one want to know the history in grafted clone, you know, git fetch --depth can be used.\n. @dscho, so cool, I appreciate for all your past tasks and your kind build instructions. Maybe I can't do it well at first, but I'm willing to try.\nIf successful, I will ask a pull request. Thank you.\n. ",
    "henningit": "By having\n\nMyDirectory/\n\nin your .ignore file, this directory isn't processed by git at all. Therefore\n\n!MyDirectory/abc.txt\n\nhas no effect.\nAn ignore file containing only the file you want to ignore should have the effect you specified:\n\nMyDirectory/def.txt\n. \n",
    "victorwoo": "Is it designed?\nIf there is many to exclude, but only one to keep, it's difficult.\nSo I think to support this situation is meaningful.\nRegards,\nVictor\nOn Thu, Aug 8, 2013 at 2:36 PM, Henning D. notifications@github.com wrote:\n\nBy having\nMyDirectory/\nin your .ignore file, this directory isn't processed by git at all.\nTherefore\n!MyDirectory/abc.txt\nhas no effect.\nAn ignore file containing only the file you want to ignore should have the\neffect you specified:\nMyDirectory/def.txt\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/msysgit/msysgit/issues/127#issuecomment-22305424\n.\n. Ok, thank you!\n\nRegards,\nVictor\nOn Thu, Aug 8, 2013 at 5:24 PM, Erik Faye-Lund notifications@github.comwrote:\n\nAs an added note: this is not a Windows specific topic, so please direct\nany further questions to the main Git mailing list instead.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/msysgit/msysgit/issues/127#issuecomment-22312070\n.\n. \n",
    "akruis": "\nWon't this have the down-side of slowing the prompt down even further? It's already pretty slow as is...\n\nA perfectly valid argument.\nAfter carefully reading the bash man page I found variant with out an external command. I modified my patch to use ${//} instead of /bin/tr.\n. ",
    "ChaseFlorell": "using a -P doesn't solve anything. The problem is that the executable is requiring a passphrase (as in null is invalid). As I see it, there is no way to automate this process through powershell.\n. ",
    "mattyclarkson": "Any other issues stopping the merge?\n. Have resolved the previous issues in the pull request and squashed the commits as requested.\n. Done. Sorry for the slow response have been really ill recently and not in reach of a computer.\n. Thanks. Hope it is useful, if there are any bug reports for it, copy me in.\nOn 27 November 2013 15:10, dscho notifications@github.com wrote:\n\n@mattyclarkson https://github.com/mattyclarkson no need for apologies\n(but I am sorry that you have been ill, and hope you feel better now).\nThanks for your contribution!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/msysgit/msysgit/pull/135#issuecomment-29391332\n.\n. \n",
    "ArloL": "It actually works, but the link type was disabled since my 'Y:' is a network drive.\n. Superseded by #301.\n. I am not sure about the -a: http://stackoverflow.com/questions/321348/bash-if-a-vs-e-option\nWhat do you think?\nI will create a new PR with the commit message, if we agree on the line of code.\n. ",
    "pfmoore": "OK, so you're saying that the config approach works, but not for help. And it appears that console-based help (man or info) don't work because the relevant commands aren't supplied.\nSo help is only viewable in the OS-default web browser.\nCan I suggest that some means of overriding this should be made available without needing a recompile? Even supplying a usable man or info viewer, or adding a text format help option (given that text-format help files are supplied) would be an improvement.\n. ",
    "nickvergessen": "Is it too difficult to use help.browser (see git/docs/git-help.html ) if specified and default back to the current way, if not?\nI set my OS HTML default to my editor. But I don't want to view the manual in my editor.\n. @kusma yes I read it, aswell as the commit + msg\nI just don't understand, why you can't do something like:\nvoid mingw_open_html(const char *unixpath)\n{\n    if (isset(git.config['msysgit.help.use.browser.and.not.os'])) {\n        execl_git_cmd(\"web--browse\", \"-c\", \"help.browser\", page_path.buf, NULL);\n        return;\n    }\n...\n. ",
    "matt-richardson": "Is related to #117.\n. As it was running in a non-interactive process, I couldn't tell what the actual msgbox was showing.\nWhen I ran it manually, it hit the MsgBox on line 808 - 'If you continue without closing the listed applications they will be closed and restarted automatically.'\nI'm not sure if that was the actual one that was causing the process to sit there waiting for input.\nIdeally, given its being asked to run as \"VerySilent\", if it needs to show a msgbox, then it should fail the install and write the message to the log.\n. Awesome work - thanks very much!\n. ",
    "chid": "This was using bash, the windows style usually works, except for tar, eg I can ls C:/r/r/.gz\nAnyway I didn't realise that's where I should post, I'll try again with their setup. @sschuberth \n. ",
    "haydnhkim": "This is getting messages.\n```\nhaydn@HAYDN-PC /d\n$ curl -v https://github.com/jquery/jquery.git\n Adding handle: conn: 0x1e62fd8\n Adding handle: send: 0\n Adding handle: recv: 0\n Curl_addHandleToPipeline: length: 1\n - Conn 0 (0x1e62fd8) send_pipe: 1, recv_pipe: 0\n About to connect() to github.com port 443 (#0)\n   Trying 192.30.252.128...\n Connected to github.com (192.30.252.128) port 443 (#0)\n successfully set certificate verify locations:\n   CAfile: D:\\Utility\\PortableGit-1.8.4-preview20130916\\bin\\curl-ca-bundle.crt\n  CApath: none\n SSLv3, TLS handshake, Client hello (1):\n SSLv3, TLS handshake, Server hello (2):\n SSLv3, TLS handshake, CERT (11):\n SSLv3, TLS handshake, Server finished (14):\n SSLv3, TLS handshake, Client key exchange (16):\n SSLv3, TLS change cipher, Client hello (1):\n SSLv3, TLS handshake, Finished (20):\n SSLv3, TLS change cipher, Client hello (1):\n SSLv3, TLS handshake, Finished (20):\n SSL connection using RC4-SHA\n Server certificate:\n        subject: businessCategory=Private Organization; 1.3.6.1.4.1.311.60.2.1.3=US; 1.3.6.1.4.1.311.60.2.1.2=Delaware; serialNumber=5157550; street=548 4th Street; postalCode=94107; C=US; ST=California; L=San Francisco; O=GitHub, Inc.; CN=github.com\n        start date: 2013-06-10 00:00:00 GMT\n        expire date: 2015-09-02 12:00:00 GMT\n        subjectAltName: github.com matched\n        issuer: C=US; O=DigiCert Inc; OU=www.digicert.com; CN=DigiCert High Assurance EV CA-1\n*        SSL certificate verify ok.\n\nGET /jquery/jquery.git HTTP/1.1\nUser-Agent: curl/7.30.0\nHost: github.com\nAccept: /\n< HTTP/1.1 301 Moved Permanently\n Server GitHub.com is not blacklisted\n< Server: GitHub.com\n< Date: Thu, 21 Nov 2013 09:14:41 GMT\n< Content-Type: text/html\n< Content-Length: 178\n< Location: https://github.com/jquery/jquery\n< Vary: Accept-Encoding\n<\n\n301 Moved Permanently\n\n301 Moved Permanently\nnginx\n\n\n Connection #0 to host github.com left intact\n\nhaydn@HAYDN-PC /d\n$ git clone https://github.com/jquery/jquery.git\nCloning into 'jquery'...\nfatal: unable to access 'https://github.com/jquery/jquery.git/': Protocol https not supported or disabled in libcurl\n```\nI'm installed msysgit 1.8.4 another computer and tried git clone jquey...\nand... it works fine.\nI'm sorry to wrote issue.\nI think this is my computer environment problem.\nthanks.\n. ",
    "imMute": "It's possible, I'm not sure if the \"Clone Existing Repository\" dialog is available on systems other than Windows.  If it is, I have never seen it.\n. ",
    "gnalbandian": "this is stil happening. ",
    "dgeelen": "Please don't close this issue unless it is resolved.\nWhile this issue is similar to issue #75, there are other requests that are similar too. In particular issue #75 is closed (even though it is not fixed), but other request that have not been fixed have also not been closed (see #31, #61, #121, maybe others). The issue referenced in #75 (#76, about updating grep) was also closed without actually being fixed.\nClosing an issue without solving it is just sticking your head in the sand. While I understand that you are in no way obligated to actually fix a reported issue (even though I would assume that to be one of the reasons to have a bug tracker in the first place), I see no reason why you should close this issue even though it is unresolved whilst not closing other, similar, issues.\nFinally, you mention the mingwGitDevEnv project as a possible replacement. However, looking at the project page, that seems very much a work-in-progress project. Could you please tell me a bit more about how far along that project is?\nIn particular; looking at the test results (http://mingwgitdevenv.cloudapp.net/job/mingwGitDevEnv-test/lastSuccessfulBuild/) I see numerous failed tests. How does this relate to the current situation for msysgit? Are there more or fewer issues? Can mingwGitDevEnv be used as a drop-in replacement for existing users of msysgit, or does it require a lot of setup/bugfixing/issue solving? \nAlso, why start yet another project? Why is git not simply added as a package for the official mingw-get installer?\n. ",
    "chin8036": "Hi t-b\nThanks for your advice, I tried and it worked well.\nBut this method couldn't solve the problem I encounter, cause I need to change dozens of files at the same time, and  I don't know which file will be renamed(case only).\nMy project is based on some other project, when they have newer version, I have to update accordingly (include rename file case, otherwise it will failed). So I wonder if there's any way to make git detect rename automatically with this case.\nThanks anyway\n. ",
    "Olivier07": "Hi everbody,\nI have the same issue. I would like to know if this problem will be corrected ine the future because the hack which consists to move with a temp name is not always possible. \nIt aborts checkout with this kind of rename and we have to delete file before checkout !!! \nThank you.\n. Infortunatly, I'm interested in, but I don't have the time to... It wasn't a critic, I juste would like to know. \nThank you for your answer ;)\n. Oh yes, if you can, let me know where is located the problem. Maybe I could propose a fix in the future ;)\nThank you.\n. Sorry if there was misunderstanding, English is not my native language and I thought you were proposing me to tell me what files were located the problem.\n. ",
    "fatjyc": "I have a private project in bitbucket.\nI upgrade Git-1.8.5.2-preview20131230.\nI can't clone the project for http way.\ngit clone https://jiong@bitbucket.org/jiong/git-ms.git\nfatal: could not read Password for 'https://jiong@bitbucket.org':No such file or directory\nI think this is a BUG.\nTHX\n. @dscho \nI think that you misunderstood what I meant.\nI just hope you will be able to know the problem.\n. ",
    "Danation": "Please forgive me if I'm out of line, but I am writing to confirm that this fix worked for me as well. Thank you!\n. ",
    "mouyang": "I'm probably going to regret doing this.  I only came upon this because I ran into the same issue with msysgit, but hopefully someone will read this and benefit.\n@fatjyc - I can only speak for myself and not @dscho.  However, I hope you realize one day that your posts made you look incredibly rude and ungrateful for the hours of thankless work people have volunteered in this project.  Your tone was especially offensive considering that git is not officially supported on Windows by the authors of git and it presents unique issues not found on other operating systems, such as this.\nFirst, you initially provide only one line console output which did not help solve the issue.  Second, after someone asked for more information, you only provide the command you typed in and then put \"BUG\" and \"THX.\"  Writing words with all capital letters is probably the worst thing you can do on the Internet because it is equivalent to yelling at someone.  Third, you accused someone of misinterpretation.\nAt no point, did you provide anything useful towards a solution.  When you were asked to help further, you did not do so and only restated your problem.  If you didn't know how to be more helpful, you could have asked how to be more helpful.  Even if you said \"I tried ssh and that worked for me,\" that would have been infinitely more helpful than what you wrote.  You gave an impression of entitlement.\nI want to stress again that people do this for free, and it's discouraging when it is not appreciated.  You may not have felt this way, but I see no other way to interpret your posts.\n. ",
    "LongLiveCHIEF": "@mouyang :+1: :100: \n. ",
    "birdwing": "Did anyone every consider that @fatjyc didn't know about the GIT_TRACE=1 property?\nSure he could have run it after it was mentioned, but we don't know what his level of knowledge is. Perhaps a friendlier:\n\"hey we need some more information can you run this [Command] and paste back what it says\" would have solved this whole issue.\nI think there was rudeness on both sides here.\nWe all understand that git is free and an awesome piece of software, but not everyone that uses it is as knowledgeable as we would like.\nNote: I am in now way saying that his use of all caps was allowable, just making a point that he might not of had the knowledge to provide the information you wanted and a little more guidance probably would have helped him out.\n. I noticed that the 4th post down on the same day this issue was opened you posted angrily towards him for not providing enough information in his description. Nowhere before your post was any information offered to him to tell him how to obtain the information.\nThat's what i noticed.\nThere was defensiveness and wrong posting on both sides. I was only pointing out an observation on how all the anger may have been avoided. \nI did not mean to offend anyone\n. ",
    "adamralph": "Is this fix likely to be released soon?\n. ",
    "ahmadia": "@dscho - Thanks.  Happy to redirect for help.  \nAs far as I can tell, there are at least one or more Git for Windows issues on Windows 8 here.  I did not do a good job of explaining the issues, so let me try and make them more clear.\nSteps to reproduce the first issue.\n- Create a folder containing a space, with a shell script somewhere inside it.\n- Double-click to run the shell script\nThis should fail (immediately), because the Git for Windows launcher does not properly escape the spaces in the path to the shell script.\nSteps to reproduce the second issue.\n- Create a script that contains the command: sleep 10\n- Execute the script by double-clicking on it.\nThe script fails, because sleep is not on the PATH.  If I open a Git Bash session and type:\n/bin/bash script.sh\nit executes correctly.  Again, the issue is somewhere in the Windows script responsible for launching shell scripts using Git Bash, which I believe is located in Git for Windows.\nSorry if I'm causing trouble.  Shall we move the discussion over to the mailing list?\n. @sschuberth - Thanks for verifying and pointing to the installer code and registry entries.  I'll try to figure out what's wrong with my system.  Sorry for the noise, folks, and thanks again for the help.  Git for Windows has been incredibly helpful for the Software Carpentry instructors.\n. ",
    "vitalif": "OK, I'll try to do it by myself... I.e. I don't think an upgrade is really required (your version is 1.8.3, am I right?)... As I understand, it just requires enabling SASL support (and maybe building cyrus sasl on windows if SVN cannot use libgsasl (which I assume cannot)).\nIn fact I even tried to \"update\" it today by removing perl from msysgit, installing ActivePerl 5.16.3, and downloading a win32 build of subversion from sourceforge - it includes a perl SVN library prebuilt for win32 and ActivePerl 5.16.3... And git-svn even started, but I got segfault (GPF / whatever it's called on windows) when trying to actually clone an svn repository :(\n. Oops, no, I'm probably wrong about 1.8.3 given that it was built in 2008... )))\n. ",
    "n8felton": "This was easier to implement than I had originally thought. :+1: \n. No real rationale, just while looking into #165, I noticed that the InnoSetup was outdated. Was just updating to 5.5.4 to ensure that while I was testing solutions for #165 that there were not any issues that might have been resolved in the latest version of InnoSetup.\n. @dscho No, go ahead and release, there is very limited documentation on the loadinf/saveinf feature and i'm not exactly a pro at INNO scripts, so it'll take me some time to get it to work and not break anything in the process.\n. b518955 has the proper whitespaces; I converted the TABs to Spaces. Sorry about that.\n. I see more what you mean now by style. I'll make these changes and resubmit.\n. Alright, give d30295f a look and let me know what you think.\n. Yes, after each style correction suggestion, I am running the release.sh script to build the installer and I am testing the functionality.\n. Example INF after running a /saveinf argument with my preferred settings.\n[Setup]\nLang=default\nDir=C:\\Program Files (x86)\\Git\nGroup=Git\nNoIcons=0\nSetupType=default\nComponents=assoc,assoc_sh\nTasks=\nPathOption=BashOnly\nSSHOption=OpenSSH\nCRLFOption=CRLFCommitAsIs\n. Check out f5f991e. Hopefully I have all (if not most) of the style errors fixed.\n. b53b404 is up. Let me know what you think.\n. ",
    "mathrick": "Could you push out an installer build with that patch in? It's absolutely crucial for silent installs to be able to get git.exe in the PATH, and that's currently not possible with any installer available. I've just discovered that fact and it's completely wrecking my plan of making a single-click deployment script that gets all the tools set up on Windows.\nI understand if you don't want to push out a new git version, but just the installer functionality itself warrants posting a new build, and is fairly trivial to test.\n. ",
    "lewisdiamond": "I did see issue #31 but it's marked as closed and was created 2 years ago.\n. ",
    "PeterDaveHello": "Okay, I'll try!\n. Oh, thanks @t-b, I'll take a look at it and try to use, thank for your information!\n. Hi @dscho, so, if somebody had started to work on it? if still waiting, could we just let this issue open? thanks.\n. ",
    "steelywing": "So strange, I have tried reinstall many times in my company, it does not work, but at home it works, may be tomorrow I retry.\n. ",
    "bulk88": "\n\n. In the 1.9.0 release the command line tools (git, diff, date, gzip, ssh, etc) and bash shell run fine for my basic usage. I dont know how you created that Tk DLL (Mingw.org, Mingw-64, VC, I'll guess its some GCC since it uses msvcrt.dll, and VC6 is rareish nowadays) so I can't think of a fix.\nedit, TK has workaround code for _strtoi64 being missing on [some] Win32 OSes, but it obviously didn't wind up in the final binary https://github.com/tcltk/tk/blob/9937802175f6e956a51b11dceedfa4c5be8301b6/xlib/xcolors.c#LC246\nupdate the Tk 8.5.11 binary is a Visual C binary, Tk 8.5.13 is a GCC binary, the file grew 390 KB between the VC DLL and the GCC DLL, 988 KB to 1378 KB, differences in the PE section layout reveal which compiler family was used\n. @bulk88 You do not have to guess. There is the Git history stating quite clearly how @patthoyts generated it.\nThere are no comments/commit body.\nhttps://github.com/msysgit/msysgit/commit/7c1d9831e7110d10b27317a4c49730388b9f7674\nhttps://github.com/msysgit/msysgit/commit/cc9382fd9dfbce8ce4eec45fa6b034983a1bd8de\nhttps://github.com/msysgit/msysgit/commit/31fbf2c54c7694946938e82efa4dd0332d0be1ce\nhttps://github.com/msysgit/msysgit/commit/b5c89b6102479aad06b6fa2653d484641f54d42a\nWhy did you or your agent allow a merge without any comments and never mentioned switching compilers?\n```\n mingw/lib/tclConfig.sh |   42 +++++++++++++++++++++---------------------\n 1 files changed, 21 insertions(+), 21 deletions(-)\ndiff --git a/mingw/lib/tclConfig.sh b/mingw/lib/tclConfig.sh\nindex 11aa8dc..2fc7799 100644\n--- a/mingw/lib/tclConfig.sh\n+++ b/mingw/lib/tclConfig.sh\n@@ -15,31 +15,31 @@ TCL_DLL_FILE=\"tcl85.dll\"\n TCL_VERSION='8.5'\n TCL_MAJOR_VERSION='8'\n TCL_MINOR_VERSION='5'\n-TCL_PATCH_LEVEL='.11'\n+TCL_PATCH_LEVEL='.13'\n# C compiler to use for compilation.\n-TCL_CC='cl'\n+TCL_CC='gcc'\n# -D flags for use with the C compiler.\n-TCL_DEFS='-DPACKAGE_NAME=\\\"\\\" -DPACKAGE_TARNAME=\\\"\\\" -DPACKAGE_VERSION=\\\"\\\" -DPACKAGE_STRING=\\\"\\\" -DPACKAGE_BUGREPORT=\\\"\\\" -Dinline=__inline -DSTDC_HEADERS=1 -DHAVE_NO_LPFN_DECLS=1 -DHAVE_NO_STRUCT_STAT32I64=1 -DHAVE_NO_FINDEX_ENUMS=1 -DTCL_CFGVAL_ENCODING=\\\"cp1252\\\" -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -Dintptr_t=int -Duintptr_t=unsigned\\ int -DTCL_CFG_OPTIMIZED=1 -DTCL_CFG_DEBUG=1 '\n+TCL_DEFS='-DPACKAGE_NAME=\\\"\\\" -DPACKAGE_TARNAME=\\\"\\\" -DPACKAGE_VERSION=\\\"\\\" -DPACKAGE_STRING=\\\"\\\" -DPACKAGE_BUGREPORT=\\\"\\\" -DSTDC_HEADERS=1 -DTCL_CFGVAL_ENCODING=\\\"cp1252\\\" -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_NO_SEH=1 -DEXCEPTION_DISPOSITION=int -DHAVE_WINNT_IGNORE_VOID=1 -DHAVE_CAST_TO_UNION=1 -DHAVE_INTPTR_T=1 -DHAVE_UINTPTR_T=1 -DNDEBUG=1 -DTCL_CFG_OPTIMIZED=1 '\n# If TCL was built with debugging symbols, generated libraries contain\n # this string at the end of the library name (before the extension).\n TCL_DBGX=\n```\n@bulk88 Are you prepared to put in the bulk of the work?\nYou won't accept it if I did it, see https://github.com/msysgit/msysgit/pull/161#issuecomment-34681345\n. ",
    "rcdailey": "I don't have that option in my config at all. I do have this though:\n[rebase]\n    stat = true\nThis should be easy to reproduce. Just create a versioned python script or something, and open the script but have it waiting on user input (so it remains locked by the OS). Try to rebase during that time, you'll see this happen.\nMy understanding is that this is a windows-only issue.\n. Time is a hard thing to come by these days. I unfortunately don't have the time either. I've done my best to give as much detail as possible, so let's hope someone with time can pick this up and look at it later.\n. Sorry it took so long to get back. I created a test repo that reproduces this problem. I used a script to generate 1000 tags and pushed them to an HTTP repository (Atlassian Stash repo)\nBecause the output of the trace is so long, I put it on pastebin.com here:\nhttp://pastebin.com/V9n2zgNv\nNote that I tested pushing to a local file repo and it didn't have this problem. Seems specific to HTTP only.\nPlease let me know if  you need anything else.\n. > you have what it takes to make it so.\nNot always true. A web developer that uses GIT may not have the domain knowledge necessary to contribute to it, for example. Yours is the same old \"I don't give a damn\" response you get from many open source projects. \n. @dscho I think you misunderstand me. I'm not attempting to be rude and insult your efforts. Obviously it takes great people like you to keep great free software like this running. I appreciate your efforts 110%.\nAlso, why would I pay someone to fix bugs in your project that is free to begin with? That makes absolutely no sense. Maybe you were trying to make a point and I missed it. But let's not over complicate the example. Quite simply, not everyone has domain knowledge to contribute code to the msysgit project. That's just how it is. No argument against that. No matter how much I may love space ships, I'll never be able to help build one.\nI've seen a lot of \"great contributors\" get comfortable (and, unfortunately, sometimes arrogant) in their position on a project. To the point where they lose compassion and kindness to their fellow community. This means you get those blunt, emotionless responses like \"Fix it yourself\". Maybe your statement is a red herring in that regard. I'm also sure that the fact that your tone is not conveyed through text doesn't help either. Either way, I personally take offense to the \"Fix it yourself\" attitude, so when I see it spout around on my favorite Windows project, it's rather upsetting.\nI do apologize for any miscommunication. However realize that defect reports are contributions. Code is not the only form of contribution, whether you agree with that or not. It takes time and effort to provide detailed reproduction steps, file bug reports, follow up with information requests, etc. People are even paid professionally to do these things (i.e. quality assurance people). That's how important feedback is to a product or project.\nLeaving the issue open was my stance from the day I filed this issue, but for some reason you fought me on it and insisted on closing it. That's a good way to show people that you don't care about their efforts. It's offensive and rude. That's why (based on my previous interactions with you) I am assuming a negative attitude in your \"Contribute a code fix\" comment.\nI agree with @EmilyBjoerk that the issue should remain open so that people know to pick it up. Closed issues mean issues not in need of attention. Period.\n. ",
    "yammelvin": "\"make install-user\" succeeded.\nAfter that I am lost. Tried right-clicking on a folder in Windows Explorer,\nbut no \"Git Bash\" option in context menu.\nI saw it called \"regsvr32 -s ...\\git_shell_ext.dll\".\nWhat should I do next?\nThanks.\n. I am new to Git.\nNot sure if I did everything correctly.\nFollowing is what I did before calling \"make install-user\":\n$ git branch test origin/master\nBranch test set up to track remote branch master from origin.\n$ git checkout test\nSwitched to branch 'test'\nYour branch is up-to-date with 'origin/master'.\n$ cd explorer\n$ make install-user\nPlease tell me if I did anything wrong.\nThanks.\n. Yes. Now 'Git Bash' works without Windows Explorer not responding.\nThanks.\nHowever, after this, I cannot uninstall it.\nI tried make uninstall and saw it the command to unregister git_shell_ext64.dll,\nbut the \"Git Bash\" options still exist in the Windows Explorer context menu.\nHow do I uninstall it?\n. Thanks.\n. Yes. It works.\nThe Windows Explorer is responding.\nAnd also after make W64=1 uninstall-user the Git Bash is uninstalled.\n. I'm sorry. I think that was before the change.\nAfter the change, I got the following error when I make W64=1 install-user:\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   -MM ext.c dll.c factory.c menu.c systeminfo.c registry.c columns.c > deps\nmake -C ../common all\nmake[1]: Entering directory `/src/git-cheetah/common'\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   -MM debug.c exec.c menuengine.c cheetahmenu.c date.c sha1_file.c strbuf.c usage.c wrapper.c > deps\nmake[1]: Leaving directory `/src/git-cheetah/common'\nmake[1]: Entering directory `/src/git-cheetah/common'\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   debug.c -c -o debug.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   exec.c -c -o exec.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   menuengine.c -c -o menuengine.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   cheetahmenu.c -c -o cheetahmenu.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   date.c -c -o date.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   sha1_file.c -c -o sha1_file.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   strbuf.c -c -o strbuf.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   usage.c -c -o usage.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   wrapper.c -c -o wrapper.o\nmake[1]: Leaving directory `/src/git-cheetah/common'\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   ext.c -c -o ext.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   dll.c -c -o dll.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   factory.c -c -o factory.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   menu.c -c -o menu.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   systeminfo.c -c -o systeminfo.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   registry.c -c -o registry.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-gcc.exe -O -g -DNO_MMAP -DNO_PREAD -DNO_STRLCPY -D_WIN32_IE=0x0501   columns.c -c -o columns.o\n/src/mingw-w64/sysroot/bin/x86_64-w64-mingw32-windres -o cheetah.o -i cheetah.rc\nE:\\msysgit\\src\\mingw-w64\\sysroot\\bin\\x86_64-w64-mingw32-windres.exe: cheetah.rc:32: syntax error\nmake: *** [cheetah.o] Error 1\n. Is there anyway for me to revert to msysgit/Git-Cheetah#14 to try again?\nCurrently I simply just checkout the master and did a git pull.\nThanks.\n. You are right. I reverted and the make W64=1 install-user still failed.\nI tried make-clean. Also failed.\nAny idea what is the cheetah.rc:32:syntax error?\nAny way to rectify it?\n. I think I found the error.\nfor the file /src/git-cheetah/explorer/common/Makefile, i made the following change to line 67:\nsed -e \"s/@@GIT_CHEETAH_VERSION@@/$$VERSION/\" \\\nto\nsed -e \"s/@@GIT_CHEETAH_VERSION@@/$$GIT_VERSION/\" \\\nAnyway, there is this comment on line 53:\n```\nmake sure that there are exactly 4 numbers, separated by commas\notherwise you'll receive \"windres.exe: cheetah.rc:68: syntax error\"\n```\nApparently, VERSION was not 4 numbers.\nIt now compiles fine.\nAnd the Windows Explorer is responding when I do \"Git Bash\".\nAnd make W64=1 uninstall-user removes \"Git Bash\" context menu properly.\nThanks.\n. git describe output gives:\nfor-johnstevenson-1-g33f73c5\nI just noticed that there is this comment in the Makefile:\n```\ntransform descriptions of the form v1.0-124-g12345 into 1,0\n```\nso the description or tag should be in the form v1.0-124-g12345?\n. ",
    "basinilya": "Hi. Do you have any examples of building for this customized msys.dll? src/zlib builds a pure mingw dll\n. After switching to branch \"msys\" my compiled git doesn't run, because it cannot find libiconv-2.dll. Reason:\n$ git log --stat master -- \"libiconv*.dll\"\ncommit e489513b557b03cb6d842075eeb654602810ec84\nAuthor: Pat Thoyts patthoyts@users.sourceforge.net\nDate:   Mon Jun 3 09:18:46 2013 +0100\n```\niconv: remove redundant file - we now use libiconv-2.dll\nNo file in mingw/bin is linked to libiconv2.dll any more.\nSigned-off-by: Pat Thoyts patthoyts@users.sourceforge.net\n```\nmingw/bin/libiconv2.dll |  Bin 978432 -> 0 bytes\n 1 files changed, 0 insertions(+), 0 deletions(-)\ncommit 61219ce69970dd3982ad00eecb5a83b9487f4eee\nAuthor: Sebastian Schuberth sschuberth@gmail.com\nDate:   Wed Nov 23 14:52:37 2011 +0100\n```\nInstall libiconv-1.14.tar.gz\nSigned-off-by: Sebastian Schuberth sschuberth@gmail.com\n```\nmingw/bin/libiconv-2.dll |  Bin 1226963 -> 1241889 bytes\n 1 files changed, 0 insertions(+), 0 deletions(-)\nDo you mind if I cherry-pick these 2 commits in branch \"msys\"?\n. Created pull request with a release script in branch msys: https://github.com/msysgit/msysgit/pull/182 .\nAmended this pull request with xargs.exe pruduced by the release script.\n. updated\n. ",
    "EmilyBjoerk": "I worked around this with: git tag -l | xargs -l1 git push <repo> (YMMV obviously).\nI believe this issue should be re-opened and solved properly.\n. Oh wow that derailed rather magnificently.\nLet me clarify, I didn't mean \"fix this now or I cry\" I meant \"please re-open the issue so it's not wrongly perceived as fixed, maybe some one will have time to fix it at some point\". How would I have known that it needed fixing if I'd have wanted to contribute? I completely understand that you might not have time to fix the issue yourself but at least if the issue was open, some one else might see it and decide they can spend the time to fix it.\n. ",
    "bbodenmiller": "+1 on just deleting it.\n. Sounds good, I updated. Thanks for the details on the new environment. Here's to hoping it will be easy to move from the current Git for Windows & PortableGit to the new one.\n. @dscho squashed\n. ",
    "docwhat": "Thanks for the info, @dscho. I appreciate your hard work on such a tough task.\nI don't know that I have the  \"steam\" for this at the moment, either.  But at least I have enough information to tackle it when I do have the \"steam\".\nCiao!\n. ",
    "ingydotnet": "I have 2 fairly popular git commands:\n- https://github.com/ingydotnet/git-subrepo\n- https://github.com/ingydotnet/git-hub\nthat depend on Bash 3.2. Both are fairly large bash codebases.\nI dep on 3.2 because that's what OSX seems pinned to (and never changing).\nThe main difference between 3.1 and 3.2 is regex support. I use Bash regexes quite a bit in my code.\nBugs have been opened in both projects to get them working in msysgit:\n- https://github.com/ingydotnet/git-hub/issues/161\n- https://github.com/ingydotnet/git-subrepo/issues/38\nI might take this on at some point, or hopefully someone else will do it in the meantime. Leaving this comment for full-circle posterity.\n. ",
    "krystufe": "Hi, I get same behavior on Windows8.1 with Git-1.9.5-preview20150319.exe (also with Git-1.9.4-preview20140611.exe). I tried zainengineer's advice (http://stackoverflow.com/questions/18502999/git-extensions-win32-error-487-couldnt-reserve-space-for-cygwins-heap-win32) but it does not work.\nPlease help, I am getting desperate.\n. @dscho Thanks a lot! It works like clock.\n. ",
    "nilleb": "Well, @dscho, I must admit that I've tried searching for this string. But\nnot using the functionality (t) described in your post\nSo, in my search results I was able only to find\nshare/msysGit/net/release.shhttps://github.com/msysgit/msysgit/blob/ab173bb3bc3852b04e2958abac61bc6f65c7a64a/share/msysGit/net/release.sh\n...\nBy the way, when you ask for a proxy, you should rather set a https_proxy\nvariable. The current procedure fails in accessing the internet from behind\na proxy.\nThank you for your suggestion, I'll try to propose you a pull request.\n. @kusma \nln: accessing `//installer-tmp/bin/git.exe': No such host or network path\nln: accessing `//installer-tmp/bin/git.exe': No such host or network path\nln: accessing `//installer-tmp/bin/git.exe': No such host or network path\nln: accessing `//installer-tmp/bin/git.exe': No such host or network path\nln: accessing `//installer-tmp/bin/git.exe': No such host or network path\nln: accessing `//installer-tmp/bin/git.exe': No such host or network path\nln: accessing `//installer-tmp/bin/git.exe': No such host or network path\nI'll propose a pull request.\n. ",
    "b2gills": "On Sat, May 3, 2014 at 11:50 AM, Olivier Mengu\u00e9 notifications@github.comwrote:\n\n@dolmen https://github.com/dolmen Your msys-perl branch builds fine\nhere. Nice work!\nI'm surprised because here make test is reporting failures, mostly in\ntests related to the tainting feature of perl. You can view my build log\nin ebaccfahttps://github.com/msysgit/msysgit/commit/ebaccfa6c2e21476ea8a4c4427ea7b94e2334dc9\n.\nYou can ignore failures with tainting. I doubt that anything in this\nproject would even use that feature.\n\nThe t/op/stat.t failure may be because it is running on Windows, or because\nNTFS/FAT don't store that field.\n../ext/Socket/t/socketpair.t may be failing because the Windows port\ndoesn't emulate the UNIX/POSIX way, or the test needs to be modified to use\nthe correct flags.\nThe ../lib/File/Spec/t/Spec.t error can be ignored as it is testing a\nmodule that isn't normally used on Windows.\nAs far as I know all of the errors in your build log can be safely ignored.\n( Are you building a Cygwin version or a native version? )\n. ",
    "gdevenyi": "Hrm, okay, any hints as to some commits I can study as to how to properly include nano into the distro?\n. ",
    "VenomVendor": "Setting HOME to %USERPROFILE% resolved, I had wrapped with quotes \"%USERPROFILE%\"\nBut this should throw some error, telling the user to set HOME or relevant info.\n. ",
    "PhilipOakley": "Do you have any control over the App Locker, such as knowing where the temp directory could be placed. My thought would be that the scenario may be detectable, would would need user guidance to say where a better place for the executable would be. \nIf you are truly locked down there will always be issues (I have the same at my work where various workaround have to be created by those who can make reasoned choices)\n. Next step would be to see if you can get the Innosetup to detect that problem. Without a detection mechanism it's going to be hard to do a permanent fix. Alternatively you could create a private installer that uses your preferred temp path. The creation of a private variant of the installer isn't that hard.\n. ",
    "voltagex": "\nDo you have any control over the App Locker, such as knowing where the\ntemp directory could be placed. My thought would be that the scenario may\nbe detectable, would would need user guidance to say where a better place\nfor the executable would be\n\nYes, certain users are given a single folder which is excluded from\nAppLocker.\n. A command line switch for temp path would also work.\nIs there any reason the setup doesn't automatically trigger a UAC prompt?\n. Aha! Between that and the Netinstall I think I'm sorted.\nThanks all.\nOn 14 May 2014 22:26, \"linquize\" notifications@github.com wrote:\n\nYou may consider using the portable zip package.\nhttps://github.com/msysgit/msysgit/releases/download/Git-1.9.2-preview20140411/PortableGit-1.9.2-preview20140411.7z\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/msysgit/msysgit/issues/202#issuecomment-43073636\n.\n. Thanks for the assistance.\n. \n",
    "albfan": "No luck\n``` shell\n\ngit --version\ngit version 1.9.2.msysgit.0\n```\n\n```\n\ncd subdir\ngit add -i .\nCan't exec \"git\": Bad file number at C:\\Program Files (x86)\\Git/libexec/git-core\\git-add--interactive line 180.\n```\n\nI'm guessing this is an issue for https://github.com/msysgit/git, isn't it?\n. I suffer same problem with libsvn_delta-1-0.dll\nSolve it issuing:\n```\n\ncd \"C:\\Program Files (x86)\\Git\\bin\"\nrebase -b 0x64400000 libsvn_delta-1-0.dll\n```\n\nDidn't know the rules about BaseAddress, just added another 200000 to 0x64200000 from previous posts\n. @chucklu this should fix your problem\n```\n\ncd \"C:\\Program Files (x86)\\Git\\bin\"\nrebase -b 0x6D710000 libsvn_ra_svn-1-0.dll\n```\n. \n",
    "juliankrispel": "I'm on 1.8.4.msysgit.0 and I get the same error when doing git add -p\n(that's on windows 8)\n. ",
    "staticshock": "Link to related issue, for future reference: msysgit/git#182\n. ",
    "wolfy1339": "I have added more details, following the advice posted.\n. no, i'm substituting it with the branch name.\nThere's no output at all.\nThere's really not that many details i can provide because there's no output and absolutely nothing happened.\n. ",
    "bernardpaulus": "hello,\ncould you report the results of the following script?\ngit_checkout_test.sh\n```\n!/bin/bash\nset -x\nmkdir git_checkout_test\ncd git_checkout_test\ngit init .\necho \"master\" > branch.txt\ngit add branch.txt\ngit commit -m \"init master branch\"\ngit checkout -b other\ncat branch.txt\necho \"other branch\" > branch.txt\ngit commit -m \"work on topic branch 'other' started\" branch.txt\ncat branch.txt\ngit checkout master\ncat branch.txt\n```\nSave it and execute it in your git bash console\n. Hello,\nCould you please add details on how to reproduce your problem? I created a repository with git 1.8.5.2 on windows 7 with git bash by doing:\nmkdir \"c:\\tmp\\\u00e9l\u00e9phant\"\ncd \"c:\\tmp\\\u00e9l\u00e9phant\"\ngit init .\nThen I upgraded to 1.9.2 and i was still able to cd to that directory in git bash and open it in git Gui.\nYou might also want to check if your problem is not fixed in 1.9.2 :)\n. Hello @peci1 , \nHere is the procedure I tried to reproduce the problem:\n1) install git 1.8.5.2 . Note: I check the \"use TrueType font\" in the installer, and I only use the simple menu \n2) creation of a new directory \u00e9toile containing a non-ascii character \n3) initialized a repo in it \n4) (continued) \n5) created an empty readme file \n6) reload modifications in git gui to show the new file \n7) commit it \n8) install git 1.9.0 \n9) try to reopen the repo \n10) it works on my platform \nCould you tell:\n1) your platform details (unless i'm wrong you did not tell which windows version you use. Please check this link for more info )\n2) if it works with 1.9.2\n3) the procedure you take to reproduce this problem, with at least as much details as above (well, don't bother if it works in 1.9.2 )\n4) (extra) the equivalent procedure in git bash. This would help in locating the problem\nCheers :)\n. Hello @tzaeschke ,\nSo actually you were very close when you tried to set the LANG environment variable, as @kusma pointed out.\nThe only thing missing was to use a locale, that is the country code in addition to the language code you used.\nIn short, try this:\nC:\\Program Files (x86)\\Git\\cmd>@set LANG=\"en_GB\"\nC:\\Program Files (x86)\\Git\\cmd>gitk.cmd\nit works :)\n. @tzaeschke nice :)\nthis however only seems to work for english: editing gitk.cmd and trying to set my locale to french (the default language when LANG is not set) makes gitk open in english ^^ \nhere is my edited gitk:\n```\n@rem Do not use \"echo off\" to not affect any child calls.\n@setlocal\n@rem put your desired locale here:\n@set LANG=\"fr_FR\"\n@rem Get the abolute path to the parent directory, which is assumed to be the\n@rem Git installation root.\n@for /F \"delims=\" %%I in (\"%~dp0..\") do @set git_install_root=%%~fI\n@set PATH=%git_install_root%\\bin;%git_install_root%\\mingw\\bin;%PATH%\n@if not exist \"%HOME%\" @set HOME=%HOMEDRIVE%%HOMEPATH%\n@if not exist \"%HOME%\" @set HOME=%USERPROFILE%\n@start \"gitk\" wish.exe \"%git_install_root%\\bin\\gitk\" -- %*\n```\nand here's a screenshot:\n\nSame results with German locale de_DE.\nI'm however using git 1.9.0 ... will do an upgrade next week & post an update.\nMight be a bug, maybe upstream. I'll look into it, but at my pace.\nKudos to you three!\n. It works, thanks :) damn, that was really simple, sorry\nI'll update the FAQ\n. bug reproduced here\nhere is a sample output \n``\n$ gpg --version\ngpg: error loadingiconv.dll': The specified module could not be found.\ngpg: please see http://www.gnupg.org/download/iconv.html for more information\ngpg (GnuPG) 1.4.13\nCopyright (C) 2012 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nHome: c:/Users/bpu/.gnupg\nSupported algorithms:\nPubkey: RSA, RSA-E, RSA-S, ELG-E, DSA\nCipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,\n        CAMELLIA128, CAMELLIA192, CAMELLIA256\nHash: MD5, SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224\nCompression: Uncompressed, ZIP, ZLIB, BZIP2\n```\n. ",
    "peci1": "No, it just doesn't work. I created D:\\\u00e9l\u00e9phant, created a new Git repo in it, and the error was the same:\n\nAgain, 1.8.5 opens the repository normally.\nHere is my %HOME%.gitconfig in the system encoding (I think CP1250):\n\nAnd here it is in UTF-8:\n\n. I am able to cd to the directory in Git Bash, but calling git gui from inside of that directory gives the same error.\nI posted images because I wanted to make sure the character encoding won't get screwed once more...\n. Well, that is odd.\nI started to follow your steps to show you how the bug appears. After installing 1.9.2 and reproducing the error, I got the idea to look at my %PATH% (only a relevant part shown):\nC:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\GNUWin32\\bin;C:\\bin;C:\\Program Files (x86)\\OpenSSH\\bin;C:\\Program Files (x86)\\Git\\cmd\nThen I started to wonder if GNUWin32 couldn't interfere with Git (it is something like Cygwin). So I deleted C:\\Program Files (x86)\\GNUWin32\\bin; from the PATH and tried again. Et voil\u00e0, Git GUI started in the \u00e9tolie directory successfully. Okay, but I want to use GNUWin32, so I returned it back to PATH to think out a solutiuon.\nAnd now the strange part comes: after returning my PATH to the exact state as before, Git GUI is still able to open the Unicode paths (and Git Bash too). Even after restarting the computer.\nThis leaves me completely puzzled, but with Git 1.9.2 working =) It seems like it only needed to break through something and record a value somewhere... But I thought that Git adds its bin folder to the start of the PATH as soon as git.exe is run, so I don't see a way how that change could influence anything...\n. ",
    "sanjeevkalakuntla": "Thanks it is working.. ",
    "AlterDepp": "Ok, it's not a bug, it's a missing feature. As I said, we have to use some files with unix lineendings and some with dos, so we can't set core.autocrlf to true. Vim does it right, it adds new lines with the same lineending as the rest of the file. Would be nice, if Git could do this as well.\n. I don't have a problem on checkout, lineendings are always correct. Only the conflict markers, that are inserted by git on merge conflicts, do have wrong lineendings (see images at https://code.google.com/p/tortoisegit/issues/detail?id=2213).\nProbably .gitattributes works for us, but it would be nice, if git adds conflict markers with correct lineendings, anyway.\n. ",
    "shirosaki": "Thanks. I understood /src/openssh/release.sh for building from source is required.\n. I could make a shell script instead of adding *.dll.a binaries. And I'm ok to remove COPYING.\n. I fixed the following points.\n- remove binaries and openssh release.sh creates *.dll.a binaries\n- remove COPYING file in the crypt patch\n- use autoreconf instead of configure patch in openssh\n. I used the following files. Updated the commit messages.\nhttp://sourceforge.net/projects/mingw/files/OldFiles/msys-openssl/openssl-0.9.8e-3-MSYS-1.0.11.tar.bz2/download\nhttp://sourceforge.net/projects/mingw/files/OldFiles/msys-minires/minires-1.01-1-MSYS-1.0.11.tar.bz2/download\nOpenSSH configure has the check that the openssl headers match the existing binary (0.9.8e).\nmsys-minires.dll was added to the repository at year 2008. At the time latest minires version is 1.01.\n. I succeed to build OpenSSH 6.6p1 for msys. Added the commit.\nCan we use OpenSSH 6.6p1?\n. Thank you for merging and test.\nI didn't notice obsolete headers. My build completed without removing the headers.\nIt seems msys-crypt is not needed for OpenSSH 6.6p1.\ncrypt would be replaced with DES_crypt in openssl if crypt is not available.\nopenbsd-compat/xcrypt.c:62\n```\ndefine crypt DES_crypt\n``\n. https://github.com/msysgit/msysgit/blob/msys/bin/slogin looks obsolete.\nIt should be removed sinceslogin.exe` exists.\n. Thank you for the build.\n\nit builds msys-ssl-1.0.0.dll, not msys-ssl-1.0.1.dll as I would have expected... is this so that linked programs will still find it even if they were linked against 1.0.0?\n\nYes. It links against 1.0.0. OpenSSL would keep the versions that are binary compatible.\nhttps://github.com/msysgit/msysgit/blob/msys/include/openssl/opensslv.h#L86\n\nit also builds msys-crypto-1.0.0.dll, does that matter with regards to the crypt issue you mentioned in #221?\n\nI mentioned that the following msys-crypt-0.dll is not needed. \nhttps://github.com/msysgit/msysgit/blob/msys/src/crypt/release.sh\nmsys-crypto-1.0.0.dll from openssl is required.\n\nthe openssl.exe binary increased size from ~550KB to 1MB\n\nMaybe gcc option -s is different.\nhttps://gcc.gnu.org/onlinedocs/gcc-2.95.3/gcc_2.html#SEC13\n\n-s\nRemove all symbol table and relocation information from the executable.\n\nI don't add -s as other packages and use default options because CFLAGS environment variable didn't used when compiling.\n-s looks link option so adding -s to LDFLAGS may work.\n. Sorry for typo. I fixed that.\n. ",
    "ctrueden": "About WordPad: it supports LF, but when resaving it rewrites all the lines with CRLF, which would be a big problem.\n. It's worth noting that there are two separate but related concerns when it comes to text editors: 1) The editor used for git-related activities such as commits; and 2) The editor used to actually edit files.\n@dscho and I gave a Git workshop yesterday and the question came up: is there a way to tell Git to launch the configured editor with a given file, so you can make changes? And the answer is, surprisingly, not easily out of the box...\nSo in that light, the fact that Wordpad mangles newlines might not matter when writing git commit messages, but it would certainly confuse people when editing files and looking at diffs, especially if Git ever developed such a feature (which personally I think would be very convenient, especially for new people).\nLastly, I just tested write.exe as EDITOR and (unlike notepad.exe) it launches a new process, returning control the prompt immediately, which causes Git to report Aborting commit due to empty commit message. while the editor is still open.\nAll in all, Wordpad seems like a problematic choice.\nAs for Notepad, wouldn't indiscriminate use of text mode for fopen have a negative impact on other editors such as vim? We could add a hack that uses \"wt\" only for notepad, or (better) only if a particular configuration property is set (text mode on, off or auto).\n. I am sorry to say that I did not test that the new copy-files.sh works, because being a n00b to msysgit development, I did not know how. I am similarly uncertain whether the change above specifies the entire tutor directory correctly. I did at least verify that vimtutor launches the tutor as expected in a developer installation.\nI am happy to test if you wouldn't mind giving me a quick pointer regarding how to do so.\n. Thank you @dscho!\n. ",
    "Utumno": "Just detect notepad++ and accept patches for other common editors.\nThe editor makes a huge difference - think rebase. Notepad++ if present is perfect for the job. Detect from registry.\n. ",
    "un1versal": "\nJust detect notepad++ and accept patches for other common editors.\nThe editor makes a huge difference - think rebase. Notepad++ if present is perfect for the job. Detect from registry.\n\n:+1: \n\n@Utumno we kinda reached that conclusion already, thank you for confirming, though. The issue is people who actually work on this instead of just chatting about it ;-)\n\n:+1: :+1: \n. @dscho \nBecause of https://github.com/git-for-windows/git/issues/278 and because this ticket is now a year old :birthday:  and I cant really fix that properly in core (no idea where to look) and while a qualified volunteer doesn't come forth with a proper solution, I opened https://github.com/progit/progit2/issues/365 in order to document the workaround in meanwhile.\nThis I can do, so pending feedback and reply to https://github.com/progit/progit2/issues/365 I will proceed on that front. If you have anything to add to these docs please reply there, if you have something to point out in order to resolve this in core, please point to right source fies and Ill have a looksee to determine if I can hack the solution in.\n. ",
    "BrianGilbert": "http://superuser.com/questions/393218/adding-git-bash-here-right-click-option-with-silent-install\nhttps://code.google.com/p/msysgit/issues/detail?id=499\n. Added https://github.com/msysgit/msysgit/wiki/Silent-Installation\nlinked from https://github.com/msysgit/msysgit/wiki/Frequently-Asked-Questions\n. ",
    "lklepner": "I found the wiki page to be empty so I added some info back in.\nhttps://github.com/msysgit/msysgit/wiki/Silent-Installation\n. That one is better - thanks for bringing it to my attention. I've brought the missing elements into the latest version.\n. ",
    "silverkorn": "I've created another version which is more flexible and where we can define the environment level to use for each desired variable.\n(Please refer to this link for more details: http://technet.microsoft.com/en-us/library/ee156595.aspx)\nFrom the referred link, we can understand that the actual start-ssh-agent.cmd sets the variables in the \"_Process_\" environment, so it can only be used by the process itself (cmd.exe in this case) and it's children (commands called within this shell session/window).\nPlease note that I've tested in my new workflow and the \"HOME\", \"SSH_AGENT_PID\" and \"SSH_AUTH_SOCK\" environment variables are required to work directly with ssh-add.exe (and git.exe too if I'm not wrong) from new shell sessions.\nThis is why I've set them as \"_Volatile_\" in the setup-ssh-agent.cmd batch file.\nThis setup also permit a user to be prompted once to enter his passphrase(s) from the same window as the setup-ssh-agent.cmd, so it could be used as a startup script. I'll just confirm tomorrow that I don't use any .bashrc or .profile files, just in case.\nLet me know if this would be a proper improvement for MSysGit.\nOtherwise, as usual, I've create a Gist: https://gist.github.com/silverkorn/4d67a3c641253c72beee\n. I confirm that no .bashrc and .profile files are present during the tests.\n. > Another comment: in the Git project, we like to suggest to rewrite topic branches in pull requests, i.e. instead of piling commits on top of flawed commits, we recommend using the interactive rebase to rewrite topic branch and then force-push (which automatically updates the pull request). This not only makes for a much nicer story, but also for much easier review and maintenance (using git bisect, for example, becomes really awkward otherwise).\nSorry, I still consider myself as a rookie with Git...\n\nBut I have to admit that I still think that your Javascript code is basically recapitulating so many things you would get for free if you converted this into a shell script.\n\nI understand your point for the Javascript usage but outside of WSH, I don't see how I can keep those variables usable outside of the Git Bash and sh.exe scope. The Windows' shell itself only has 1 potential command (setx) but it's not supported by all Windows prior to Windows XP and above.\nUnfortunately, using \"set\" or \"export\" from Git Bash, sh.exe or anything else combined by using third party tools calling directly \"git\" is problematic.\nI indeed consider balancing on your side, so I'll dismiss this request and I would be pleased if anyone comes with a good and lightweight alternative solution. :)\nFor the moment, I'll stick with my script from my latest Gist.\n\nfirst of all: I am impressed at your tenacity. Good job!\n\nHehe! That's because we are searching for the best way to use Git and SSH easily under a forced environment of Windows. ;)\nLet me know if it's also ok with you if we close this issue.\nThanks!\n. > Please have a look at master...silverkorn to get an idea about what I am talking. You can easily call shell scripts without \"poisoning\" the PATH with the Bash.\nOh! I get it! This would indeed avoid to use the DelayedExpension thing for the escaped path...\nMy only personal thought is that I would avoid this due to a \"non-cross-platform\" command and the risk to be overridden by the main Git team.\n\nI also realized while hacking on this branch that there is already a .cmd script related to ssh-agent: start-ssh-agent.cmd. Have you seen that? It looks as if that already does quite a lot of what you want to do.\n\nSorry, I forgot to specify to you (I realized I only mentioned it in my Gists) but this is why I've created this script, start-ssh-agent.cmd only set the environment variable in the \"Process\" environment (itself + it's children process (same for Git Bash)).\nIf you launch it, it starts a children cmd.exe within it, so you keep in this environment to access these variables.\nSo in other words, it's not shared between independent processes for the current Windows user session (or system session, why the new flexibility of the updated Javascript so it could be used easily for services/daemons).\n\nI am tempted, however, to change the way it works: we should\n1. use the power of the bash (as in git-silverkorn) to start the ssh-agent\n2. use $HOME/.gitconfig to persist the settings\n3. use ps | grep \"^ $SSH_AGENT_PID ./usr/bin/ssh-agent$\" as indicator whether the ssh-agent is still running at the correct PID\n4. reuse the start-ssh-agent.cmd script if at all possible for both your use case and Matt's case.\n\nSo we can put custom variables in $HOME/.gitconfig and not affect the normal behavior of Git?\nThanks for the suggestions.\nI'll evaluate them during next week.\n. @dscho, I might not have more time for the next weeks.\nWould you like me to make a branch with these changes so we could pull this one out of the master and adjust it in a further time?\n. @dscho, no offence but I think rsync could bravely fit in the package since it could use the SSH toolset shipped along for secured synchronizing, unless it would take a really too heavy size.\nI do use rsync on my workflow to send a development server state to a production server where Git might not be useful due to, by example, file permissions reset on fetch/pull (execution bit always disabled). We can also avoid synchronizing hidden files/directories which can have a certain impact on the production side so the .git directory could be dismissed.\n. @t-b If I understand, mingwGitDevEnv is some kind of fork/alternative to MSysGit (Git for Windows) which has a more flexible method to add specific binaries which might not come along with the default prerequisites?\n. @dscho Got it, thanks for the clarification.\n. > [...] add rsync to the installer and make it even bigger than it is already...\n@dscho I think the lack of optimism (as I interpreted) made the guy run away toward the alternative solution, hehe! :P\n. Reminds me that attempt: https://github.com/msysgit/msysgit/pull/225\n. ",
    "dkordik": "So if I'm following that thread correctly, this seems to be fixed in this pull request? https://github.com/msysgit/git/pull/122 Which would ship as part of a future (>1.9.4) release?\n. After setting git config --global core.longpaths true, the original error goes away.\nHowever, the checkout now fails with a different error in its place (same example repo):\nUnlink of file 'node_modules/gulp/node_modules/vinyl-fs/node_modules/glob-stream/node_modules/glob2base/node_modules/lodash.findindex/node_modules/lodash.createcallback/node_modules/lodash._basecreatecallback/node_modules/lodash.bind/node_modules/lodash._createwrapper/node_modules' failed. Should I try again? (y/n)\nIf you say y, it loops. If you say n, checkout failed.\nLooks like another long-path-related issue. Might there be another existing open issue for that one?\n. ",
    "IPv6": "Wow, sounds great! Will wait for mingwGitDevEnv to mature, thank you )\n. ",
    "ildar-shaimordanov": "Until developers accept this PR I'd like to suggest the workaround. Put the following lines to $HOME/.bash_profile and $HOME/.bashrc at the very beginning of each of these files\n```\nWorkaround to avoid the existing issue of sourcing from /etc/profile\nhttps://github.com/msysgit/msysgit/pull/231\ncase \"$OSTYPE\" in\nmsys*)\n    [ \"${BASH_SOURCE[1]}\" == \"/etc/profile\" ] && return\n    ;;\nesac\necho \"${BASH_SOURCE[@]}\"\n```\n. ",
    "kjeremy": "Since this fixes a breaking bug can we get a new release?\n. Haha.  That's fair. :+1: \n. ",
    "AronVanAmmers": "Thanks, fixed the issue for me.\nNote that the rebase commands have to be run in /C/Program Files (x86)/Git, as an Administrator. When running as a non-admin you'll see this:\n$ rebase -b 0x64000000 bin/libsvn_repos-1-0.dll\nReBaseImage (bin/libsvn_repos-1-0.dll) failed with last error = 6\n. ",
    "bizm": "When i run those rebase commands i get the following\nbin/libsvn_repos-1-0.dll: skipped because nonexistent\nbin/libneon-25.dll: skipped because nonexistent\nany ideas?\n. @kblees it worked from the Git installation directory. thanks a lot!\n. ",
    "chucklu": "@albfan I got this error\n $ git svn rebase\nC:\\Program Files (x86)\\Git\\bin\\perl.exe: * unable to remap C:\\Program Files (x\n86)\\Git\\bin\\libsvn_ra_svn-1-0.dll to same address as parent -- 0x6D510000\n      0 [main] perl.exe\" 6924 sync_with_child: child 7180(0x2D8) died before ini\ntialization with status code 0x1\n    985 [main] perl.exe\" 6924 sync_with_child: * child state child loading dll\ns\n. @albfan thank you very much\nI have installed the cygwin ,and use ash.exe\n/bin/rebaseall\n. @MerzDaniel  no, at least 1.x git svn can work\nbut in 2.x ,the git svn just crashed,you can find this issue\nhttps://github.com/git-for-windows/git/issues/274\n. ",
    "MerzDaniel": "@kblees , @albfan , @albfan \nI face multiple problems concerning git svn in Windows. From different posts throughout the internet I found many baseAddresses for the dlls. But nobody posts how they found out the specific 'baseaddress' for a '.dll'. My 'git svn' still doesn't work with all features for me. \nWhere to get a full list of these base addresses? Try'n error seems not right for me...\n. update to 2.x solved the problem :P\n. Then to be more accurate:\nOn my Windows7 x64\n1) Deinstalling Git 1.9\n2) Rebooting\n3) Installing Git 2.9.2.windows.1\nsolved all my git svn related dll-Issues after all rebase memory address approaches failed to fix the problem for me. \n. ",
    "ethomson": "\nWhy is 9e6c525 only applicable to git on windows, and not for all gits?\n\nIndeed, it's applicable to git.git, it will come down with an upstream fix.\n. @t-b Sorry for the delay.  I have proposed this patch to gnulib itself but stalled while waiting for copyright assignment paperwork from FSF.  Let me follow up?\n. Note that an updated patch is:  http://lists.gnu.org/archive/html/bug-gnulib/2014-09/msg00070.html\nI have received the copyright assignment paperwork - I am sorting through this on my end which may take a bit longer because laywers.  I hope that this is resolved shortly.  (Thanks for your patience.)\n. Sadly, no.  I will not be able to continue to move this patch forward into gnulib directly, since the FSF's employer agreements have an overly broad patent grant.  It's disappointing that end users get harmed with such views.  Especially for a ten line bug fix.  Alas.\nPlease let me know how you would like me to proceed.  I would love somebody to take that patch to gnulib and move it forward:  I would be happy to place it into the public domain and / or assign copyrights to anyone who wants to take care of it.  Or I can spin up an update PR with that patch if you only want to update git and not upstream as well.\n. Sorry about the exceptional delay, please see https://github.com/msysgit/git/pull/330\n. Fixed via https://github.com/msysgit/git/pull/330 - thanks!\n. ",
    "ferventcoder": "It was a bit surprising that adding /CLOSEAPPLICATIONS /RESTARTAPPLICATIONS (referenced here: http://www.jrsoftware.org/ishelp/index.php?topic=setupcmdline) still results in failures. It seems like I ask the silent installer to close the applications it needs to close to update, then when it doesn't.... I'm stuck. \n. You can see what we've limited it down to here: \nhttps://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1#L2\npowershell\n'/VERYSILENT /NORESTART /NOCANCEL /SP- /CLOSEAPPLICATIONS /RESTARTAPPLICATIONS /NOICONS  /COMPONENTS=\"assoc,assoc_sh\" /LOG'\n. That makes sense.  Windows-- \n:)\n. ",
    "atomi": "I'm going to try to use scoop to install and see how that goes. I'd rather not use a GUI installer.\n. Is your old script available somewhere?\n. I'll go ahead and do what I can.\nThanks.\n. ",
    "ADTC": "Don't mention it :) I should thank you! :+1:  The pleasure is all mine. I actually love writing good commit messages, and this has been a rewarding experience for me. And certainly learnt about proper contributor crediting :)\nBtw, I didn't look for any documentation about the \"Signed-off-by:\" line. I just followed the messages of the previous commits in the project. Hope I got it right.\n. ",
    "GiantDarth": "Is this unrelated to the fix I already made with Git-Cheetah? https://github.com/msysgit/Git-Cheetah/pull/17\n. ",
    "niik": "@t-b Me and the rest of the GitHub for Windows team are most grateful for your work on this :sparkles: Can I hook you up with some stickers as a small way of saying thanks?\n. @t-b Awesome, just send me your postal address to my email and I'll send some. My address is my username at the very domain you're reading this on!\n. ",
    "tzaeschke": "@kusma I'm not sure about the details, but my environment does not have 'LANG' specified. Git-gui picks up German from somewhere, which is not the language of my operating system (Start Menu, Windows Explorer, they are all in English).\nAs suggested, if I use \"LANG=en_GB\", then git-gui comes up in English. \n@dscho I created a new FAQ page\n@bernardpaulus Thanks, that works (I just had to skip the '@' symbol).\n. ",
    "AssarBubbla": "Found at least a way to force english for git gui (I have swedish language as default in my Windows).\nIn folder C:\\Program Files (x86)\\Git\\share\\git-gui\\lib\\msgs I renamed the file sv.msg to svx.msg, and then the gui appears in english only :-).\n. ",
    "PetterBomban": "Deleting all the files in the folder AssarBubbla posted fixes the problem. Thanks!\n. ",
    "valerypetit": "nothing work for me, i have the version 2.5.1\nsomeone know why???\n. ",
    "usta": "Hello again;\nI haven't recompiled them just installed (to a fresh clean windows 7/10 x86_x64) Git-1.9.4-preview20140929.exe and after then i opened a console (cmd ) and \"gpg --version\" command gives me : \"gpg --version\ngpg: error loading `iconv.dll': The specified module could not be found.\"\nAbout adding same file twice : you are right about it, it must be just in \"mingw/bin/iconv.dll\"\nI have no idea how to put them directly without adding binaries. I have just downloaded iconv.dll from : \nftp://ftp.gnupg.org/gcrypt/binary/libiconv-1.9.1.dll.zip\n. ",
    "AlexeyKryshen": "Not sure, but I think that URL-encoding of user name (which are e-mail) could help ? '@' will be replaced with '%40' in e-mail-as-username part, so there are will be single normal '@'-delimiter in string representation of credential line? And URL itself is still will be valid, of course.\nCould this solve the problem ?\n. ",
    "huerlisi": "I just tested on the newest git-for-windows release candidate. Still not working.\n. Sorry, it actually worked!\n:+1: \n. ",
    "rofrol": "wincred doesn't work for me. Works with %40 and store\ngit config --global credential.helper store\n. ",
    "CrescentFresh": "Running TG 2.4.0.2, still can't use my email as my username, I keep getting prompted.\nSwitch to my username that does not include @, and works as expected.. ",
    "antoncl": "I don't have an hash value. I used the publicly available download option from the http://msysgit.github.io/ url. That doesn't inform me of any MD5's or SHA1's.\nYou can reproduce the issue rather easily.\n1) Goto http://msysgit.github.io/\n2) Click on download\n3) Run the installer\nOnce the installer completes, Kasparsky Internet Security will immediately pop up with a warning that it has detected a worm called: PDM.Worm.P2P.generic\nI thought you'd like to know this kind of information, I'm sorry to have bothered you.\n. I humbly apologize for contacting you, and promise that I - in the future - won't disturb you further.\n. @dscho \nSeveral things in the communications bothered me.\nLet me first observe, if a user reports an issue they have, it is generally because they care about your product. Nothing is easier than giving up, shrugging your shoulders and say \"Well, I gave it try.... I'll just try something else\".\nI admit it is a fair assumption - on your part - that my computer might be infected, after all, any computer which is in some form of communication with the internet is at risk. Like wise it is a fair assumption of mine, that either one of your or some of your upstream suppliers computers might be infected.\nThings would have gone a lot smoother if a check sum wasn't the only criteria for determining if this is/was a false positive or not. Incidentally the MD5 hash of the downloaded file is '7A50B65944EED9D8109DA9D86A5107E1' which matches the hash provided @sschuberth.\nWhich leaves us with an open question, is this a false positive or not.\nSimply assuming that because the downloaded binary is identical to the one provided by your build system, IMO is not an adequate guarantee that this is a false positive.\nIn my view, two avenues of approach needs to be taken before it can be safely assumed that this is a false positive:\n1) Investigate why - exactly - Kaspersky reports this issue\n2) Investigate if there has been an infection at your site or somewhere upstream\nI highly doubt that I will be the only user who encounters this issue, and nothing is more damning than being suspected of distributing malware.\nI am 70-80% convinced that this is a false positive, but .. 20-30% is too high a risk of infection for me. Simply confirming or denying the incident based on a checksum will persuade me that it is not infected.\n. @sschuberth I am aware of the growing issues with trusting anti-virus tools to safeguard against invasion.\nGit-1.9.4-preview20140929.exe checks out fine on my computer as well (otherwise it wouldn't have been downloaded). Immediately after the installer has run, the alert is triggered.\nIMO (not humble) this indicates that Kasparsky complains about some component which is embedded - probably compressed - inside the installer package. When that component is unpacked and placed into the file system, the byte stream which triggers Kasparsky is made apparent.\nI cannot know whether this is false positive or not.\nAs for reversing burden of proof... hmm, I'm not convinced. msysgit would the newbie in my setup, as such it has to prove itself. Trust must be earned.\nFrankly, to me msysgit is a nice to have, not a need to have. msysgit is not important enough for me to spend my time investigating if this is a false positive or not. I am content with shrugging my shoulders and seeking other solutions to the problem I had intended for msysgit to solve.\nI do/did however care enough about the product that I thought I should let you know that I had encountered this issue. This way you have some kind of warning if this turns out to not be a false positive.\n. ",
    "crossique": "GIT-1.9.5-PREVIEW20150319.EXE is also reported by Karspersky to contain PDM.Worm.P2P.generic !!!\n. ",
    "DominikMostek": "\nDo you mean on the same computer?\n\nYes. Same computer.  No change in git config.\n\n[sarcasm]\nMaybe we forgot to remove the if (location == Vietnam) sleep(60); debug code?\n[/sarcasm]\n\nYeah it sounds funny but it is really happening :) \nWhen i change timezone back to UTC+1 Prague in windows then git is fast again.\n. ",
    "mwpowellhtx": "The access of a remote volume sounds like the obvious, simple answer, to me as well.\n. True; the distance between \"sounds like\" and \"the facts\" needs to be vetted, of course.\n. Just until the next cyber security attack.\n. ",
    "EmilMoe": "I must say I have the same experience. Have been living in Cambodia for 7 months, where I had no problems, now I'm in Vietnam and have to use a SSH tunnel to be able to reach Github. It can only be a limitation somewhere.\n. ",
    "yuvale": "Judging from the commit message in ed01c26068ea406b21f82ae0998efc5d0f0698f2 and from the comment 'Show all instead of beeping first', I think  the original intent was to enable show-all-if-ambigious.\nI don't know of any reasons to keep it off.\n. I updated the commit message, please check - thanks.\n. @jkdufair \nIf maintaining user experience compatibility with vanilla *nix Bash is a goal of this project, then you're right. Same goes for other non-default settings in /etc/inputrc - set completion-ignore-case on and set bell-style visible, to name a few.\nIf however the goal is to provide a friendly Git environment for Windows users, then I'd say enabling show-all-if-ambiguous is a must.\nAnyway, not my decision to make.\n. @dscho, note that all the features that are mentioned here are purely for interactive usage. They don't affect the scriptability aspect of the shell, if that's what worries you.\n@jkdufair, changing your configuration post-install is simple once you know what to look for. It's nearly impossible for the typical Windows user who is just now using Bash for the first time.\nAt my workplace developers use Bash all the time (we're using OS X), still everyone thank me when I enable completion-ignore-case and show-all-if-ambiguous on their machines. Most people, including professional developers, just don't know that these things even exist.\nSo I think everyone's lives would be easier if at least some of these settings had different defaults.\nAlso, I don't agree that the defaults are well-considered. They're just older. :) Can anyone think of a compelling reason (aside from being the default on other systems) why the defaults for the aforementioned settings are any good?\nIMHO, give the users a decent user experience out of the box, and the few who care enough about what they're used to will find the way to get it back.\n. @jkdufair You've raised a valid point, I agree.\n. ",
    "jkdufair": "I believe this setting should be left at the default value (off). It causes out-of-the-box behavior to be different in Git Bash than other out of the box behaviors in other environments (typical Linux distro installs, Mac OS, earlier versions of Git Bash)\n. @dscho, Thank you for elucidating your reasoning. I believe it is\ncompelling and solid.\nI don't prefer a page in the installer for the same reason I wouldn't want\na page in my Linux distro for selecting Bash options. The defaults are well\nconsidered and altering my configuration post-install is simple.\nOn Mon, May 4, 2015 at 11:28 AM, dscho notifications@github.com wrote:\n\nIMO the best user experience for Windows users really requires a GUI -- as provided\nby GitHub https://windows.github.com/. And the Microsoft developers\nalso did a kick-ass job with the Git/GitHub integration of the Visual\nStudio.\nThe purpose of Git for Windows is to provide the same scriptable\ncommand-line interface enjoyed by developers whose development environment\nis on Linux and MacOSX. As such I would tend to agree with @jkdufair\nhttps://github.com/jkdufair. Having said that, the best option would be\nto let the user choose at install time (and it would be best to default to\nLinux-like behavior).\nHappily, it is really easy to add a new page to the installer\nhttps://github.com/git-for-windows/build-extra/commit/cbcf69b9aaa4d5a0ba90a3cd3c150b0418608b23.\n@jkdufair https://github.com/jkdufair @yuvale\nhttps://github.com/yuvale why not giving it a try?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/msysgit/msysgit/pull/262#issuecomment-98753302.\n. My argument for having turned off show-all-if-ambiguous off when it showed\nup in a recent fit bash update is that the typical \"tab complete the first\nunambiguous part of a file name now causes a scroll. A few of those and the\ngit status I'm looking at for reference is now scrolled off the top of my\nterminal window.\n\nOn Monday, May 4, 2015, yuvale notifications@github.com wrote:\n\n@dscho https://github.com/dscho, note that all the features that are\nmentioned here are purely for interactive usage. They don't affect the\nscriptability aspect of the shell, if that's what worries you.\n@jkdufair https://github.com/jkdufair, changing your configuration\npost-install is simple once you know what to look for. It's nearly\nimpossible for the typical Windows user who is just now using Bash for the\nfirst time.\nAt my workplace developers use Bash all the time (we're using OS X), still\neveryone thank me when I enable completion-ignore-case and\nshow-all-if-ambiguous on their machines. Most people, including\nprofessional developers, just don't know that these things even exist.\nSo I think everyone's lives would be easier if at least some of these\nsettings had different defaults.\nAlso, I don't agree that the defaults are well-considered. They're just\nolder. :) Can anyone think of a compelling reason (aside from being the\ndefault on other systems) why these defaults are any good?\nIMHO, give the users a decent user experience out of the box, and the few\nwho care enough about what they're used to will find the way to get it back.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/msysgit/msysgit/pull/262#issuecomment-98774703.\n. \n",
    "cookacounty": "Sorry, wrong place to post this.\n. ",
    "chinglinwen": "Could you provide the link for the right place?. ",
    "strich": "Thanks for taking the time to help solve my problem individually, but there needs to be a fix applied here to the project itself. Either a 64bit build is released (Why hasn't this been done yet?) or the parameters you have supplied above need to be defaults for the Windows release.\n. So how come there isn't a 64bit msysgit? I'll be happy to put some time into this myself if I know where to start - I assume it isn't as simple as just compiling against a 64bit arch?\n. ",
    "neico": "I'm aware of that (and it seems that there's no working release for that one yet, no?) but seeing as 1.9.5 just got released and this still wasn't addressed even tough curl 7.39 is out since october made want to at least state the issue for any further update that might occur due to security issue's or whatever the reason.\nSome hosts like github don't seem to be affected much due to allowing more insecure SSL settings but that doesn't mean that this should just go by silently...\n. ",
    "SamB": "@dscho @linquize: I don't seem to have those scripts, but perhaps you meant release-easy.sh and release-zlib.sh?\n. ",
    "shipcod3": "Here is the Git and Bash Version:\ngit version 1.9.5.github.0\nGNU bash, version 3.1.20(4)-release (i686-pc-msys)\n. As what I know from the resolution of shellshock for RHEL, bash-4.1.2-15.el6_5.2 should fix this kind of issue.\n. Thanks guys \\m/ especially @t-b \n. ",
    "nak5124": "CVE-2014-7186 and CVE-2014-7187 were fixed at 3.1.21\nhere is the patch http://ftp.gnu.org/gnu/bash/bash-3.1-patches/bash31-021\n. ",
    "avdyk": "Isn't it related to https://github.com/msysgit/git/issues/300 ?\n. ",
    "Kurtmcmurt": "Sounds like a security issue\nOn Friday, January 16, 2015, monkeyrunner notifications@github.com wrote:\n\nOn my work Windows 7 machine using Git Bash I am trying to clone a svn\nrepo but keep getting the error below.\n$ git svn clone -rXXXX http://XXXXXX\nInitialized empty Git repository in c:/Users/jhughe14/git_repos/trunk/.git/\nC:\\Program Files (x86)\\Git\\bin\\perl.exe: * unable to remap\nC:\\Program Files (x86)\\Git\\bin\\libsvn_delta-1-0.dll to same address as\nparent -- 0x6D620000\n0 [main] perl.exe\" 10412 sync_with_child: child 14268(0x31C) died before\ninitialization with status code 0x1\n410 [main] perl.exe\" 10412 sync_with_child: * child state child loading\ndlls\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/msysgit/msysgit/issues/277.\n\n\nKind regards,\nKurtis Rogers\n. ",
    "CADbloke": "Related to https://github.com/msysgit/msysgit/pull/245 ??\n. ",
    "monkeyrunner": "@dscho - thanks but I can't install all that on my work machine.\n@avdyk - yes that does look like what it is, I'll do the same as you and download an old version.\n. ",
    "stefan-muc": "@shiftkey I didn't do something \"special\", I installed git including git-cheetah and automatic adding to PATH (I remember checking some checkbox).\nAs far as I know, I don't have any startup scripts involving git/git-cheetah. Can't find anything regarding this using msconfig\nI didn't really use my computer the last hours, especially I didn't use git. I opened some pdf documents compiled some LaTeX document and opened some explorer windows. During this time, the PATH got longer:\n\nIf I look at windows settings of path, the first one is ruby\\bin, so git-cheetah seems to be added automatically, and something goes wrong there.\n\nHope this helps. What else can I do to help you?\n. @shiftkey \nMicrosoft Windows XP Professional SP3 (x86)\n. and more over time ;)\n\n. @dscho BTW I don't want to give you the impression, that I fix bugs in your code. I stumbled across it and wanted to report it - nothing more, nothing less. I won't install bunch of software to be able to compile my own version of git-cheetah, and fix a bug that doesn't bug me anymore, because I'm now running Windows 8.1. Currently I'm not experiencing this bug, maybe because Windows 8 has a tougher rights management, that doesn't let git-cheetah wreck my PATH, maybe because something other. I don't have git-cheetath in my PATH, just Git is there\n. ",
    "yahman72": "Is this now fixed? I didn't find any notes about this in the releases notes nor a PR for this...\nI seem to have the same issue with git version 1.9.4.msysgit.2 and Win8\n. @dscho - thanks for the info. Now I'm wondering whether it's worth fixing this if it becomes obsolete in 2.x?\nAt the moment this issue is not bothering me too much and before the fix I'd need to spend some time figuring out how to reproduce this - at the moment I have 27 of those C:\\Program Files (x86)\\Git\\git-cheetah\\..\\bin entries, but I have no clue where they came from ...\n. Well, I'm not using cheetah at all (I guess I accidentally installed it with the rest) - I just use the command line and noticed this because this issue caused problems with some other (non-git related) command files...\nAnyway, I'll keep this in mind and post updates if I figure out how to reproduce this and eventually fix it too...\n. ",
    "ColonelJ": "Hi, I split it down into lots of separate commits for you each with a message <75 chars.\nForgot to mention this before but on top of building xz, the file.exe contained in the repo absolutely needs to be rebuilt since it does not accept the -L option and this can cause problems with detection of libraries by libtool scripts (which always seems to use this option even though it's on by default).\nThere is quite a lot of variety behind the modifications I made here.  Some of them may be just due to the environment, differences in includes, gcc options available, different git settings etc.  However some of them are real problems that ought to happen regardless of toolchain, and just problems with broken URLs are enough to make the out of the box tools fail on these!  Also the order things are built initially probably matters quite a lot since ./configure will pick up the results of installing other builds, so it may be a case of it can work but it doesn't always.\nAnyway, I'm not aware of anything I changed which might make things less likely to build than they were before.\nAfter taking these commits someone with a trusted build machine needs to rebuild file.exe (at least) and could helpfully install xz binaries as well.\n. I do recognise that a proper native Git within MSYS2 might be the best way forward and if that works properly would make msysgit (and this related work) mostly redundant.  So if it were available right now that would be really great...  Unfortunately it's not, and messing around with a system with some history that I know to work already (without the sluggishness of Cygwin) doesn't seem such a bad idea.\nI mainly put these changes down in case someone else could see the value in them and wanted to redo the commits in the proper and formal way, including fresh binaries for the applications concerned.  I never intended to do this myself, but if anyone wants to do it they should go ahead.  I might have other changes to support mingw64 32-bit toolchain which aren't present yet (and Git itself does need other patches as done for MSYS2).\nThanks for the tips on commit messages though, I think that's useful; not sure how standard these rules/guidelines are?  Rationale for commits in the commit message seems a great idea, since the problems fixed might not be obvious.  (FWIW I think the commit you picked out was related to the OpenSSL including winsock.h rather thann winsock2.h, thus causing a conflict.  But, I'm not going to look through all the others!)\nAnyway, thanks for your comment, and God's speed for a proper Git in MSYS2 - hopefully it can work as well as msysgit has done for all these years.\n. If you do want to merge it, then I think I'd be happy to put in a little more effort to check the changes are all up to date and that the commit messages explain the changes better.  However I can't add a sign off to my own commits unless you're happy with it going in as an alias (which would still be breaking the guidelines).\nOn your milestone, It doesn't seem clear yet how this new Git would be installed from MSYS2 or that this milestone is relevant to MSYS2 specifically (the SDK is based on original MSYS?)...\nAs for MSYS2, I think I was just worried that something about the MSYS2 environment or when building the libraries under a different toolchain might change the behaviour.  To my best knowledge/experience, these are indeed real issues (which aren't automatically solved by having the right developers!)\n. ",
    "tboegi": "I don't think that setting core.ignorecase=false will help here, because the underlying file system will\ntreat MyBranch and myBranch the same, and Git can not do much about it.\nThis may help:\ngit pack-refs --all\n. ",
    "hainuo": "for a reason  you put  coding.net  to a  ssh-only repository  how can you explain that \nhainuo@WIN-HK758DQ3MQR /D/hainuo\n$ git clone git@github.com:msysgit/msysgit.git dddddd\nCloning into 'dddddd'...\nWarning: Permanently added the RSA host key for IP address '192.30.252.129' to the list of known hosts.\nremote: Counting objects: 28764, done.\nremote: Compressing objects:  34% (23/67)   R\nremote: Compressing objects: 100% (67/67), done.\nKilled by signal 2.  5% (1718/28764), 10.01 MiB | 1.25 MiB/s\nhainuo@WIN-HK758DQ3MQR /D/hainuo\n$ git clone https://github.com/msysgit/msysgit.git xxxx\nCloning into 'xxxx'...\nfatal: unable to access 'https://github.com/msysgit/msysgit.git/': Failed connect to github.com:80; No error\nhainuo@WIN-HK758DQ3MQR /D/hainuo\n$\ni don't make a mistake like this issue in the first floor\n\n\ni can't use https type  with msysgit  just finding in using  the coding.net  respository!\nthis is the picture of coding.net\n\nplease don't close issue in your  own way!\n. ```\nhainuo@WIN-HK758DQ3MQR /D/hainuo/rework_zd (dev)\n$ GIT_CURL_VERBOSE=1 GIT_TRACE=1 git clone https://github.com/msysgit/msysgit.g\nit\ntrace: built-in: git 'clone' 'https://github.com/msysgit/msysgit.git'\nCloning into 'msysgit'...\ntrace: run_command: 'git-remote-https' 'origin' 'https://github.com/msysgit/msysgit.git'\n Couldn't find host github.com in the _netrc file; using defaults\n Adding handle: conn: 0x3fb1e0\n Adding handle: send: 0\n Adding handle: recv: 0\n Curl_addHandleToPipeline: length: 1\n - Conn 0 (0x3fb1e0) send_pipe: 1, recv_pipe: 0\n About to connect() to proxy www.google.com port 80 (#0)\n   Trying 173.194.127.114...\n Timed out\n   Trying 173.194.127.112...\n Timed out\n   Trying 173.194.127.116...\n Timed out\n   Trying 173.194.127.113...\n After 18750ms connect time, move on!\n   Trying 173.194.127.115...\n After 9375ms connect time, move on!\n Failed connect to github.com:80; No error\n* Closing connection 0\nfatal: unable to access 'https://github.com/msysgit/msysgit.git/': Failed connect to github.com:80; No error\nhainuo@WIN-HK758DQ3MQR /D/hainuo/rework_zd (dev)\n$\n```\n@shiftkey\n. @shiftkey    this is running  on win 10 9926\n\n```\nhainuo@WIN-HK758DQ3MQR /D/hainuo/rework_zd (dev)\n$ cd c:\nhainuo@WIN-HK758DQ3MQR /c\n$ GIT_CURL_VERBOSE=1 GIT_TRACE=1 git clone https://github.com/msysgit/msysgit.g\nit\ntrace: built-in: git 'clone' 'https://github.com/msysgit/msysgit.git'\nCloning into 'msysgit'...\ntrace: run_command: 'git-remote-https' 'origin' 'https://github.com/msysgit/msysgit.git'\n Couldn't find host github.com in the _netrc file; using defaults\n Adding handle: conn: 0xc6b390\n Adding handle: send: 0\n Adding handle: recv: 0\n Curl_addHandleToPipeline: length: 1\n - Conn 0 (0xc6b390) send_pipe: 1, recv_pipe: 0\n About to connect() to proxy www.google.com port 80 (#0)\n   Trying 173.194.127.178...\nhainuo@WIN-HK758DQ3MQR /c\n$ nslookup -debug github.com\n\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 1, rcode = NOERROR\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 1,  authority records = 0,  additional = 0\nQUESTIONS:\n    3.154.102.202.in-addr.arpa, type = PTR, class = IN\nANSWERS:\n->  3.154.102.202.in-addr.arpa\n    name = dns1.sdqdptt.net.cn\n    ttl = 2759 (45 mins 59 secs)\n\n\n\u670d\u52a1\u5668:  dns1.sdqdptt.net.cn\nAddress:  202.102.154.3\n\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 2, rcode = NOERROR\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 1,  authority records = 0,  additional = 0\nQUESTIONS:\n    github.com, type = A, class = IN\nANSWERS:\n->  github.com\n    internet address = 192.30.252.128\n    ttl = 30 (30 secs)\n\n\n\u975e\u6743\u5a01\u5e94\u7b54:\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 3, rcode = NOERROR\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 0,  authority records = 1,  additional = 0\nQUESTIONS:\n    github.com, type = AAAA, class = IN\nAUTHORITY RECORDS:\n->  github.com\n    ttl = 13 (13 secs)\n    primary name server = ns1.p16.dynect.net\n    responsible mail addr = hostmaster.github.com\n    serial  = 1422017792\n    refresh = 3600 (1 hour)\n    retry   = 600 (10 mins)\n    expire  = 604800 (7 days)\n    default TTL = 60 (1 min)\n\n\n\u540d\u79f0:    github.com\nAddress:  192.30.252.128\nhainuo@WIN-HK758DQ3MQR /c\n$\n```\n. \n. but   others in my team  can use https repository   in  win 8 \ni\u2018ll  pick  the command line  soon\n. ```\nWelcome to Git (version 1.9.4-preview20140929)\nRun 'git help git' to display the help index.\nRun 'git help ' to display help for specific commands.\nAdministrator@PC201410091053 /E/ProgramProject/php/foghaze (master)\n$ GIT_CURL_VERBOSE=1 GIT_TRACE=1 git clone https://github.com/msysgit/msysgit.g\nit\ntrace: built-in: git 'clone' 'https://github.com/msysgit/msysgit.git'\nCloning into 'msysgit'...\ntrace: run_command: 'git-remote-https' 'origin' 'https://github.com/msysgit/msys\ngit.git'\n Couldn't find host github.com in the _netrc file; using defaults\n Adding handle: conn: 0x6d73f8\n Adding handle: send: 0\n Adding handle: recv: 0\n Curl_addHandleToPipeline: length: 1\n - Conn 0 (0x6d73f8) send_pipe: 1, recv_pipe: 0\n About to connect() to github.com port 443 (#0)\n   Trying 192.30.252.131...\n Connected to github.com (192.30.252.131) port 443 (#0)\n successfully set certificate verify locations:\n   CAfile: d:\\Program Files\\Git/bin/curl-ca-bundle.crt\n  CApath: none\n SSL connection using AES128-SHA\n Server certificate:\n        subject: businessCategory=Private Organization; 1.3.6.1.4.1.311.60.2.1.\n3=US; 1.3.6.1.4.1.311.60.2.1.2=Delaware; serialNumber=5157550; street=548 4th St\nreet; postalCode=94107; C=US; ST=California; L=San Francisco; O=GitHub, Inc.; CN\n=github.com\n        start date: 2014-04-08 00:00:00 GMT\n        expire date: 2016-04-12 12:00:00 GMT\n        subjectAltName: github.com matched\n        issuer: C=US; O=DigiCert Inc; OU=www.digicert.com; CN=DigiCert SHA2 Ext\nended Validation Server CA\n*        SSL certificate verify ok.\n\nGET /msysgit/msysgit.git/info/refs?service=git-upload-pack HTTP/1.1\nUser-Agent: git/1.9.4.msysgit.2\nHost: github.com\nAccept: /\nAccept-Encoding: gzip\nPragma: no-cache\n\n< HTTP/1.1 200 OK\n Server GitHub Babel 2.0 is not blacklisted\n< Server: GitHub Babel 2.0\n< Content-Type: application/x-git-upload-pack-advertisement\n< Transfer-Encoding: chunked\n< Expires: Fri, 01 Jan 1980 00:00:00 GMT\n< Pragma: no-cache\n< Cache-Control: no-cache, max-age=0, must-revalidate\n< Vary: Accept-Encoding\n<\n Connection #0 to host github.com left intact\ntrace: run_command: 'fetch-pack' '--stateless-rpc' '--stdin' '--lock-pack' '--th\nin' '--check-self-contained-and-connected' '--cloning' 'https://github.com/msysg\nit/msysgit.git/'\ntrace: built-in: git 'fetch-pack' '--stateless-rpc' '--stdin' '--lock-pack' '--t\nhin' '--check-self-contained-and-connected' '--cloning' 'https://github.com/msys\ngit/msysgit.git/'\n Couldn't find host github.com in the _netrc file; using defaults\n Adding handle: conn: 0x3345a28\n Adding handle: send: 0\n Adding handle: recv: 0\n Curl_addHandleToPipeline: length: 1\n - Conn 1 (0x3345a28) send_pipe: 1, recv_pipe: 0\n About to connect() to github.com port 443 (#1)\n   Trying 192.30.252.131...\n Connected to github.com (192.30.252.131) port 443 (#1)\n successfully set certificate verify locations:\n   CAfile: d:\\Program Files\\Git/bin/curl-ca-bundle.crt\n  CApath: none\n SSL re-using session ID\n SSL connection using AES128-SHA\n Server certificate:\n        subject: businessCategory=Private Organization; 1.3.6.1.4.1.311.60.2.1.\n3=US; 1.3.6.1.4.1.311.60.2.1.2=Delaware; serialNumber=5157550; street=548 4th St\nreet; postalCode=94107; C=US; ST=California; L=San Francisco; O=GitHub, Inc.; CN\n=github.com\n        start date: 2014-04-08 00:00:00 GMT\n        expire date: 2016-04-12 12:00:00 GMT\n        subjectAltName: github.com matched\n        issuer: C=US; O=DigiCert Inc; OU=www.digicert.com; CN=DigiCert SHA2 Ext\nended Validation Server CA\n        SSL certificate verify ok.\n\nPOST /msysgit/msysgit.git/git-upload-pack HTTP/1.1\nUser-Agent: git/1.9.4.msysgit.2\nHost: github.com\nAccept-Encoding: gzip\nContent-Type: application/x-git-upload-pack-request\nAccept: application/x-git-upload-pack-result\nContent-Encoding: gzip\nContent-Length: 2525\n\n\nupload completely sent off: 2525 out of 2525 bytes\n< HTTP/1.1 200 OK\nServer GitHub Babel 2.0 is not blacklisted\n< Server: GitHub Babel 2.0\n< Content-Type: application/x-git-upload-pack-result\n< Transfer-Encoding: chunked\n< Expires: Fri, 01 Jan 1980 00:00:00 GMT\n< Pragma: no-cache\n< Cache-Control: no-cache, max-age=0, must-revalidate\n< Vary: Accept-Encoding\n<\nremote: Counting objects: 28764, done.\nremote: Compressing objects: 100% (67/67), done.\ntrace: run_command: 'index-pack' '--stdin' '-v' '--fix-thin' '--keep=fetch-pack\n12340 on PC201410091053' '--check-self-contained-and-connected' '--pack_header=2\n,28764'\ntrace: built-in: git 'index-pack' '--stdin' '-v' '--fix-thin' '--keep=fetch-pack\n 12340 on PC201410091053' '--check-self-contained-and-connected' '--pack_header=\n2,28764'\nReceiving objects:   5% (1609/28764), 1.01 MiB | 156.00 KiB/s\nAdministrator@PC201410091053 /E/ProgramProject/php/foghaze (master)\n$\n```\n\nin  win 7   there it  is.\nwe are in the same network \n. @shiftkey  i changed dns to 223.5.5.5    \n$ GIT_CURL_VERBOSE=1 GIT_TRACE=1 git clone https://github.com/msysgit/msysgit.g\nit sdfd\ntrace: built-in: git 'clone' 'https://github.com/msysgit/msysgit.git' 'sdfd'\nCloning into 'sdfd'...\ntrace: run_command: 'git-remote-https' 'origin' 'https://github.com/msysgit/msysgit.git'\n* Couldn't find host github.com in the _netrc file; using defaults\n* Adding handle: conn: 0x58b160\n* Adding handle: send: 0\n* Adding handle: recv: 0\n* Curl_addHandleToPipeline: length: 1\n* - Conn 0 (0x58b160) send_pipe: 1, recv_pipe: 0\n* About to connect() to proxy www.google.com port 80 (#0)\n*   Trying 74.125.23.105...\n. $ git config --unset --global http.proxy\ni use this command to unset  global http.proxy\nThank you very much.\nbut  how  does  msysgit  set the http.proxy during the installing time\n. ",
    "jack230230": "\nI do not understand why it connect to 80 port with https protocol.\n. ",
    "Bzahov98": "When i try to run any command of git is open message box with : Git not responding reinstall git 3 times and I continue to have same problem,\nI have this problem on Windows 10, too\nIf you can help will be great \nThank you :+1: \nC:\\Users\\BOBO-PC>nslookup -debug github.com\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 1, rcode = REFUSED\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 0,  authority records = 0,  additional = 0\nQUESTIONS:\n    1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa, type = PTR, class = IN\n\nServer:  UnKnown\nAddress:  fe80::1\n\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 2, rcode = REFUSED\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 0,  authority records = 0,  additional = 0\nQUESTIONS:\n    github.com, type = A, class = IN\n\n\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 3, rcode = REFUSED\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 0,  authority records = 0,  additional = 0\nQUESTIONS:\n    github.com, type = AAAA, class = IN\n\n\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 4, rcode = REFUSED\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 0,  authority records = 0,  additional = 0\nQUESTIONS:\n    github.com, type = A, class = IN\n\n\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 5, rcode = REFUSED\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 0,  authority records = 0,  additional = 0\nQUESTIONS:\n    github.com, type = AAAA, class = IN\n\n*** UnKnown can't find github.com: Query refused\nC:\\Users\\Bobo-PC>nslookup -debug github.com > outputDebugGithub.txt\n*** UnKnown can't find github.com: Query refused\nC:\\Users\\Bobo-PC>nslookup -debug github.com >> outputDebugGithub.txt\n*** UnKnown can't find github.com: Query refused\nC:\\Users\\Bobo-PC>\nC:\\Users\\Bobo-PC>\nC:\\Users\\Bobo-PC>\nC:\\Users\\Bobo-PC>\nC:\\Users\\Bobo-PC>nslookup -debug github.com\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 1, rcode = REFUSED\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 0,  authority records = 0,  additional = 0\nQUESTIONS:\n    1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa, type = PTR, class = IN\n\nServer:  UnKnown\nAddress:  fe80::1\n\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 2, rcode = REFUSED\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 0,  authority records = 0,  additional = 0\nQUESTIONS:\n    github.com, type = A, class = IN\n\n\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 3, rcode = REFUSED\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 0,  authority records = 0,  additional = 0\nQUESTIONS:\n    github.com, type = AAAA, class = IN\n\n\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 4, rcode = REFUSED\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 0,  authority records = 0,  additional = 0\nQUESTIONS:\n    github.com, type = A, class = IN\n\n\nGot answer:\n    HEADER:\n        opcode = QUERY, id = 5, rcode = REFUSED\n        header flags:  response, want recursion, recursion avail.\n        questions = 1,  answers = 0,  authority records = 0,  additional = 0\nQUESTIONS:\n    github.com, type = AAAA, class = IN\n\n*** UnKnown can't find github.com: Query refused\n. ",
    "rbtnn": "@sschuberth Thanks you. \n\nAs \"we\" includes you, feel free to file a pull request to address this, see https://github.com/msysgit/msysgit/wiki/Subversion-is-too-old,\n\nl got it.\n. ",
    "boughtonp": "\nAs announced on the Git for Windows mailing list\n\nThat announcement isn't being returned by search engines, so providing a link would be helpful.\n\nIt will take time.\n\nHow much time? Days or Months?\nIs there something specifically stopping v1.9.5 from being updated to 2.3.0 or is it simply that you're only focusing on the new version?\ni.e. could someone else download relevant tools to build a v2 themselves, or is there a blocker preventing that?\n. ",
    "manekovskiy": "Updated pull request and commit message with reference to the TechNet.\n. ",
    "Zachary-Holland": "Sure. Pushed.\n. ",
    "c17r": "Added the commit for HOME and added sign-offs on both commits.\n. Sorry, rebase didn't go exactly right. The \"-l\" addition is in the first; the \"HOME\" move in the other.\nCheers!\n. As my commit message says, the change uses both \"set\" and \"setx\" and \"setx\" only if it can.  Microsoft make \"setx\" sound scary but it's the command line equivalent of the user opening the GUI for \"Environment Variables\" and making changes.\nIf you open a command window and run start-ssh-agent.cmd, it starts ssh-agent.exe in the background, adds your key to ssh-agent -- asking for your password -- and uses \"set\" to create SSH_AGENT_PID and SSH_AUTH_SOCK.  From that point forward you can git clone/pull/push/etc without being asked for your password again.\nOpen a new command window.  ssh-agent.exe is still running in the background with your key loaded but SSH_AGENT_PID and SSH_AUTH_SOCK are not set; using any git network command will have it asking for your password every time again.  You have to run start-ssh-agent.cmd for it to set the environment variables again.\nPeople at my company are big fans of the Console for a tabbed command window interface.  Behind the scenes, Console is starting a new cmd.exe for each tab.  So none of them have SSH_AGENT_PID or SSH_AUTH_SOCK.\nThe current behavior of start-ssh-agent makes it necessary to have a window open and essentially dedicated to using git if you don't have to type passwords all the time.  The changed behavior makes start-ssh-agent mimic the experience that UN*X users have.\n. ",
    "Dirk1966": "Sorry, still unfamiliar with the workflows.  Added\nFixes #292\nSigned-off-by: Dirk1966 dirk1966@github.com\nto the git commit message, so that issue #292 will be closed automatically, if the changes are pulled. \n. I changed the comment on the commit message again and hope that now all is O.K.\n. ",
    "platonicsolz": "Actually i overlooked the settings of the app, its working now.\n. ",
    "tianon": "Of course, happy to rebase, amend, etc as necessary/requested. :+1:\n. My pleasure! :+1:\n. Would this be better as test -z \"$SKIP_MOTD\" -a -f /etc/motd ...?\n. :+1: updated from my phone :smile:\n. ",
    "ahmetb": "+1 for this.\n. ",
    "vszakats": "I see a ton of closed Issues dealing with various forms of 1.0.1 and 0.9.8 (I understand your project depends on a mixture of 1.0.1 and 0.9.8). \"1.0.2\" or \"1.0.2a\" gives no hit. Reading all the closed Issues seems a not very efficient way to get to reveal that there is completely different project in the works. Might be worth to put a mention on the front README. Thanks for the link, I'll try that new project.\n. Sorry to bother @dscho, I promise it won't happen again and will stay being an end-user.\n. The new project also uses non-HTTPS. Checksums are nice, but nevertheless it's good practice to use secure connections if they are available, also to pull the checksums themselves to be able to trust them.\n. Checksums are useful only if you received them unaltered from an authentic source. HTTPS highly raises the chances of ensuring these. On the other hand when using plain HTTP, the checksum cannot be trusted at all (because it can be altered by a MITM). Of course, I can't tell where you pull your checksums from, but if you happen to use plaintext (HTTP) to download the sources, there is a chance you use plaintext to acquire the checksums too, making the whole process pointless. If you generate the checksums yourself from a tarball downloaded from a plaintext URL, it is pointless as well.\nMy point is, using HTTPS costs nothing, and enabling it on downloads at best will help resolving above issues, and in worst case won't cause any problem at all, therefore it's good practice to use it, if available.\n. I meant the original source where the checksum came from, f.e. the openssl.org homepage. Or the original source package from openssl.org page if you generated the checksum yourself after downloading it. If you used any HTTP protocol in any of these steps, your checksum is just decoration. However if you used HTTPS to download from openssl.org and/or to load the page showing the original checksum, chances are good they can be trusted. The source I tried to patch here uses HTTP, which may or may not indicate that the chain of trust was broken somewhere, but is certainly not a good sign.\nWhat I see is that HTTP is preferred in this project for an unknown reason.\n. Okay, so the commit message is wrong. Or, that a totally humble but also valid typo is also fixed at the same time. Whichever the case is, it's probably best to discuss before rejecting a PR. What I see is that we're circling around formalities instead of fixing the damn thing with a single 'Merge PR' click.\n. Well, you started with the \"sneaky\" remark (after closing the PR), which I wish you to be the sneakiest and most ill-intended patch to ever happen to this project. And now you lecture about diligence. I'll leave you the exercise to create a separate 1 character patch and \"sneaky\" 4 character case update patch, it just simply doesn't make any sense to me, not even in the name of diligence, sorry. [ HTTPS isn't perfect, granted, but it is still the best, available solution at this point in time. Till the ultimate secure protocol comes (spoiler: it never will), it cannot hurt to use it though ;) ]\n. ",
    "strauss69400": "i use the version 1.6.14 for sourctree and the version of git is 1.8.5.2.\nwith pure command the problem is the same.\n. I use my vm for hosted my websites.so I have to have my repo on the vm.\nif I put my sites on windows, apache server is slow.if my sites are on my vm, this is sourcetree who is slow\n. Sorry but i don t understand what you say.samba share is already a shared folder\n. Yes i already tried this solution.websites are hosted in host windows so git will be fast but the problem  is apache server will become slow.\n. ",
    "almendro": "Hello to all. First: forget me for my poor english.\nI have the same problem of very-slow experience, both bash and GUI, with samba share folders over an Windows network. When I try git status it take very-long time to show, even with -one parameter.\nGit version 1.9.5-preview20141217\nMany thanks for this awesome tool.\nBest.\n. ",
    "QingqingZhou": "I can confirm that with\n  - with windows client 2.12.1.windows.1 on win7/x64\n  - with samba drive mapped to a very remote Linux box\nthe slow issue is still there. \nAnd the reason I believe is that git.windows treats samba drive and local drives with no difference. So if I issue a git status command, it actually loop through all files in all folders, which finally delegate to smbd process interactively.\nInstead, git.windows can ssh to the samba drive's Linux box and issue git command there and get back results and examines files accordingly, which shall be much faster.  There are some details need to figure out, like parsing git output may subject to version differences etc, but it is doable.\nThoughts?\nQingqing\n. ",
    "tleepa": "It seems that there is no locale command:\n\n'locale' is not recognized as an internal or external command,\noperable program or batch file.\n\nAs for using upcoming version of Git - I just wanted to have the basic linux commands available on Windows - like grep, ls, etc.\n. ",
    "Aimeast": "Sorry for I am misunderstood the define of service name of SSH_MSG_USERAUTH_REQUEST message.\n. ",
    "wolfgang42": "Ah, to be more clear:\nWhat's shown in #270 is the small tiles in the app list. These will always have their text colored correctly to appear against the Start background. The tile shown in my screenshot is the larger tile you get when you pin the tile to the app list; this large tile is the only place Windows uses the ForegroundText attribute.\nI have tested this patch on my own system and it works correctly both with large and small tiles.\n. @linquize - yes, that was the intended effect, why?\n. ",
    "nanos": "Hi,\nI'm still getting an authentication problem using the current version of git:\nI'm using a HTTPS repo with Digest authentication using git 2.4.2 and curl 7.41.0\nHere is the output from GIT_CURL_VERBOSE=1 git pull:\n```\n$ GIT_CURL_VERBOSE=1 git pull\n Couldn't find host example.com in the _netrc file; using defaults\n   Trying xx.xx.xx.xx...\n Connected to example.com (xx.xx.xx.xx) port 8080 (#0)\n successfully set certificate verify locations:\n   CAfile: C:/Users/Michael/example.com.crt\n  CApath: none\n SSL connection using TLSv1.0 / DHE-RSA-AES256-SHA\n Server certificate:\n        subject: C=DE; ST=NRW; L=Siegen; O=Organization; OU=Entwicklung; CN=example.com; emailAddress=email@example.com\n        start date: 2013-06-13 23:46:41 GMT\n        expire date: 2016-03-08 23:46:41 GMT\n        issuer: C=DE; ST=NRW; L=Siegen; O=Organization; OU=Entwicklung; CN=example.com; emailAddress=email@example.com\n        SSL certificate verify ok.\n\nGET /repository.git/info/refs?service=git-upload-pack HTTP/1.1\nUser-Agent: git/2.4.2\nHost: example.com:8080\nAccept: /\nAccept-Encoding: gzip\nPragma: no-cache\n\n< HTTP/1.1 401 Authorization Required\n< Date: Thu, 04 Jun 2015 11:04:44 GMT\n< Server: Apache/2.2.21 (Unix) mod_ssl/2.2.21 OpenSSL/0.9.8e-fips-rhel5 DAV/2 mo\nd_wsgi/3.3 Python/2.7.2 PHP/5.4.11\n< WWW-Authenticate: Digest realm=\"realm\", nonce=\"DwycJK8XBQA=e0a865ba1\n9ea528333e0afafedba72ba5f9c9bcf\", algorithm=MD5, qop=\"auth\"\n< Content-Length: 401\n< Content-Type: text/html; charset=iso-8859-1\n<\n Connection #0 to host example.com left intact\nUsername for 'https://example.com:8080': user\nPassword for 'https://user@example.com:8080':\n Couldn't find host example.com in the _netrc file; using defaults\n Connection 0 seems to be dead!\n Closing connection 0\n Hostname example.com was found in DNS cache\n   Trying xx.xx.xx.xx...\n Connected to example.com (xx.xx.xx.xx) port 8080 (#1)\n successfully set certificate verify locations:\n   CAfile: C:/Users/Michael/example.com.crt\n  CApath: none\n SSL re-using session ID\n SSL connection using TLSv1.0 / DHE-RSA-AES256-SHA\n old SSL session ID is stale, removing\n Server certificate:\n        subject: C=DE; ST=NRW; L=Siegen; O=Organization; OU=Entwicklung; CN=example.com; emailAddress=email@example.com\n        start date: 2013-06-13 23:46:41 GMT\n        expire date: 2016-03-08 23:46:41 GMT\n        issuer: C=DE; ST=NRW; L=Siegen; O=Organization; OU=Entwicklung; CN=example.com; emailAddress=email@example.com\n        SSL certificate verify ok.\n\nGET /repository.git/info/refs?service=git-upload-pack HTTP/1.1\nUser-Agent: git/2.4.2\nHost: example.com:8080\nAccept: /\nAccept-Encoding: gzip\nPragma: no-cache\n\n< HTTP/1.1 401 Authorization Required\n< Date: Thu, 04 Jun 2015 11:04:53 GMT\n< Server: Apache/2.2.21 (Unix) mod_ssl/2.2.21 OpenSSL/0.9.8e-fips-rhel5 DAV/2 mo\nd_wsgi/3.3 Python/2.7.2 PHP/5.4.11\n Ignoring duplicate digest auth header.\n< WWW-Authenticate: Digest realm=\"realm\", nonce=\"UhknJa8XBQA=17d9c5659\nf77f925d31e028cf4e1e71711451f8b\", algorithm=MD5, qop=\"auth\"\n< Content-Length: 401\n< Content-Type: text/html; charset=iso-8859-1\n<\n Ignoring the response-body\n Connection #1 to host example.com left intact\n Issue another request to this URL: 'https://example.com:8080/repository\n.git/info/refs?service=git-upload-pack'\n Couldn't find host example.com in the _netrc file; using defaults\n Found bundle for host example.com: 0x2390748\n Re-using existing connection! (#1) with host example.com\n Connected to example.com (xx.xx.xx.xx) port 8080 (#1)\n* Server auth using Digest with user 'user'\n\nGET /repository.git/info/refs?service=git-upload-pack HTTP/1.1\nAuthorization: Digest username=\"user\",realm=\"\",nonce=\"DwycJK8XBQA=e0a865ba19e\na528333e0afafedba72ba5f9c9bcf\",uri=\"/repository.git/info/refs?service=g\nit-upload-pack\",cnonce=\"efce997bd7fe88712380a00e05f42bc2\",nc=00000001,algorithm=\nMD5,response=\"4b80b93c34f24eccc33f2b95fb7dbc3e\",qop=\"auth\"\nUser-Agent: git/2.4.2\nHost: example.com:8080\nAccept: /\nAccept-Encoding: gzip\nPragma: no-cache\n\n< HTTP/1.1 401 Authorization Required\n< Date: Thu, 04 Jun 2015 11:04:53 GMT\n< Server: Apache/2.2.21 (Unix) mod_ssl/2.2.21 OpenSSL/0.9.8e-fips-rhel5 DAV/2 mo\nd_wsgi/3.3 Python/2.7.2 PHP/5.4.11\n Authentication problem. Ignoring this.\n< WWW-Authenticate: Digest realm=\"realm\", nonce=\"AqYnJa8XBQA=c9d8c91e7\n0107b6b5e77cbb3533ef0b33ea169fa\", algorithm=MD5, qop=\"auth\"\n< Content-Length: 401\n< Content-Type: text/html; charset=iso-8859-1\n<\n Connection #1 to host example.com left intact\nfatal: Authentication failed for 'https://example.com:8080/repository.\ngit/'\n```\nNote that the last request looks as follows: > GET /repository.git/info/refs?service=git-upload-pack HTTP/1.1\nAuthorization: Digest username=\"user\",realm=\"\" The realm is missing here.\nThe same requests works fine if I downgrade curl to 7.30.0\n. Thanks @mknj ! That's very helpful.\n. @dscho From my perspective yes\n. ",
    "mknj": "This is caused by https://github.com/bagder/curl/pull/141\nAs a workaround you can try \"realm\\username\" instead of username\n. ",
    "avarabei": "@mknj Thank you much!\n. ",
    "christer155": "+1\n. ",
    "js08": "Yes\nOn May 22, 2015 1:40 AM, \"dscho\" notifications@github.com wrote:\n\nDo you mean GitHub for Windows?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/msysgit/msysgit/issues/312#issuecomment-104538025.\n. \n",
    "fracz": "Wow, great to hear that it's out!\nIndeed, Git for Windows 2.x clones the repo without a problem, too. So it seems that only Git-1.9.5-preview20150319 is affected.\n. ",
    "maxferrario": "Thanks for your reply, Karsten.\nI don't think that the windows path is invalid, though: the file has been downloaded from the remote repository and I can open it on my PC\nBut git says that a file with a similar, truncated name has been deleted from my working area.\nI'm not sure it is important, but the truncated filename ends with a dot (.), so I cannot even unstage it.\nEDIT the long pathname is truncated at 139 characters\n. No, unfortunately I am accessing a private repo.\nAnd yes, I have the same problem with the RC (git version 2.4.1.windows.1).\n. After I played a little bit with a linux box, I think I nailed down the problem: we actually have a file in the repo whose name ends with a dot, but that file cannot be created on windows because, as Karsten pointed out, that kind of path is invalid on windows.\nSo, to quote Karsten, this issue \"has nothing to do with the length\".\n. hi @vishalzanzrukia , \nas the file was not needed (apparently it was an old version of a legitimate file, but nobody knows why the name was truncated ) the solution was simple: we removed it from the repository. \n. ",
    "vishalzanzrukia": "@maxferrario  So finally, how did you solve the problem?\n. ",
    "fidelt": "It has happened again, and I did what you told me to.\nHere's a screenshot of the output:\n\nI think I might have found out how it happens.\n1. I right click on a local project and click \"Git BASH Here\" (it was a C# project but I don't think it matters)\n2. Insert the external drive and navigate to the project inside the external drive. Once again, right click and click on \"Git BASH Here\"\n3. Execute the command \"git pull\"\nThe only way I got to do a successful pull was to close all MINGW32 windows, and open them all again.\n. Thank you for your response.\nI was unaware of the workaround.\nThank you also for letting me know of Git 2.x\n. ",
    "ezk84": "I can confirm that this is now working as expected with the newest version of Git for Windows, thank you.\n. ",
    "carlosnpz": "1- I mean GIT Bash\n2- I tried many commands, but this problem only happens when I execute git add --all ., git commit -m \"Message\", git pull origin master\n3- No, I didn't\n4- No, I didn't\n5- Yes, this problem only started when I updated my Windows from 8.1 Pro to 10 Pro\n6- I use version 1.9.5, that's the only one I ever used since I had Windows 8.1 on my machine.\n7- No, I didn't try 2.X yet. Is there already a binary file link for me to try?\n. Thanks! I'll try it and post a response here.\n. That worked, thank you so much!!! :D\n. ",
    "boxfoot": "Oops - sorry about that!\n. ",
    "ivanbportugal": "I apologize. This is an issue/workaround for cmder, not msysgit (https://github.com/cmderdev/cmder/)\n. ",
    "naturs": "@linquize ok,thx\n. ",
    "simonbaker": "ok,thanks.\n. The email cant send success.\nsee:\n\u65e0\u6cd5\u53d1\u9001\u5230 git@vger.kernel.org\n\u9000\u4fe1\u539f\u56e0    \u672a\u77e5\u539f\u56e0 \nhost vger.kernel.org[209.132.180.67] said: 553 5.7.1 Hello [14.17.44.33], for your MAIL FROM address 675036196@qq.com policy analysis reported: Your address is not liked source for email (in reply to MAIL FROM command)\n. I had create a new issue,https://github.com/git-for-windows/git/issues/688\n. "
}