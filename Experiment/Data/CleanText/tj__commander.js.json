{
    "diosney": "+1 Any updates on this feature?\n. Ok, I think then I will have to stick with flatiron on this, though :(\n. +1 Any updates on this?\n. ",
    "thethomaseffect": "Closing since it was agreed in #63 that invoking separate executables for commands that require their own commands the way git does it is the best way to go.\nCode sample provided by @visionmedia \njavascript\nvar bin = 'component-' + cmd;\nvar proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });\nIn short, if your command is complex enough that it requires it's own commands, it should be an executable itself.\n. This appears to have been resolved\n. Closing this since it's been almost three years and I'm sure OP resolved their issue a long time ago.\n. Hmmm, I don't think this isn't a real issue but it's been long enough now without anyone else asking for it that it's probably not affecting that many users. Wrong or not, console.log is so common in the node community that we probably shouldn't bend to those breaking it. I'll close this for now.\n. It's been years and no +1 so I'll go ahead and close this, sorry!\n. Changed title of issue to better cover the scope of this problem. program.opts is now available but this is still causing a number of issues for users. using program.option with be depreciated in favor of program.opts.option in a later release unless someone comes up with a better way to handle this issue.\n. Seems to be resolved\n. Closed, checking to see if args are provided and if not printing help text and returning is so common to CLI applications most people would just code it up in a jiffy rather than check the api to see if it was accommodated anyways.\n. The appears to have been resolved\n. Added in v2.4.0\n. Closed as out of date, thanks for the pull though!\n. Closed since input methods were removed in v2.0.0\n. Generally you should aim to make your CLI look as standard as possible e.g. cd: usage: cd [-L|[-P [-e]] [-@]] [dir]. If you don't want to you should overwrite with your own custom help. I understand you probably wouldn't like updating your custom help every time the API changes but I don't think a lot of people would use this.\n. Closed since input methods were removed in v2.0.0\n. Closed since input methods were removed in v2.0.0\n. Closed since input methods were removed in v2.0.0\n. I kind of feel your example would be better served by \noption(\"--style <color>\", \"Choose a style\")\nI don't think this is all that bad an idea but I think supplying custom help text is a better idea since that gives you full control over how your stuff is formatted.\nPerhaps writing a custom help module that can plug into commander.js that reuses some of the  '--help' code but allows you to provide your own formatting and a way to add custom text. Reusing  lodash tempting would likely work well. You could pipe it into your build system and have your help text automatically updated but still custom formatted on builds. \nFood for thought :)\n. Closed since password was removed in v2.0.0\n. Closed since password was removed in v2.0.0\n. The example works fine for me with both -h and --help after calling the script. I only made one small change to the require statement:\n``` javascript\n!/usr/bin/env node\n/*\n * Module dependencies.\n /\nvar program = require('commander');\nprogram\n  .version('0.0.1')\n  .option('-f, --foo', 'enable some foo')\n  .option('-b, --bar', 'enable some bar')\n  .option('-B, --baz', 'enable some baz');\n// must be before .parse() since\n// node's emit() is immediate\nprogram.on('--help', function(){\n  console.log('  Examples:');\n  console.log('');\n  console.log('    $ custom-help --help');\n  console.log('    $ custom-help -h');\n  console.log('');\n});\nprogram.parse(process.argv);\nconsole.log('stuff');\n```\nRunning node test.custom.help.js -h and node test.custom.help.js --help both output:\n``` shell\nUsage: test.custom.help [options]\nOptions:\n-h, --help     output usage information\n-V, --version  output the version number\n-f, --foo      enable some foo\n-b, --bar      enable some bar\n-B, --baz      enable some baz\n\nExamples:\n$ custom-help --help\n$ custom-help -h\n\n```\nPlease ensure you're using the latest version of commander.js, which is 2.5.0 at time of writing.\n. Thanks @alexmingoia :) Help shouldn't be affecting usage so this should be fixed\n. This is an idea I had myself but I was going to implement it as a plugin, since it would add a new default flag to commander and potentially break existing code using -C or something similar. I should have a ton of time next month to work on v3 of commander so I can probably add this. However I'll probably use JSON rather than YAML since I think the trade offs (escaping, no first class dates) are worth it for how much easier it is to parse.\n. Closing since OP has had a year to explain what they actual mean\n. There's a couple of issues open related to options sharing the same namespace as commander's internals. We're waiting on getting a pull request updated before merging, please see #35 \n. Add the debug option for your subcommands, subcommands are meant to resemble passing control from the parent object to the subcommand. Closed as this is not a bug.\n. This looks good to merge, thanks for the fix and thanks to @MichaelBorde for bringing it to my attention!\n. Yeah the Github pages documentation tends to be a bit forgotten about, we've discussed a completely revamped version but that could take a while, someone will remove the old methods soon!\n. Looks fine, thanks! In case people come across this in the future, here's an explanation of the feature: https://unix.stackexchange.com/questions/11376/what-does-double-dash-mean-also-known-as-bare-double-dash\n. I agree, will look into this for a future release!\n. Cool, will stick with just master, thanks for the input guys!\n. Cool, I'll drop the changes to comma first code and the help text\n. Removed old commit and made a new one so history is cleaner. Let me know if there's still any issues.\n. Great, thanks for the review! \n. Sorry for delay, busy weekend and wanted to test it first. Thanks!\n. Would it be possible to change failOnUnknown to strict? Since it's passed as an option to parse() it'll still be clear what it does but will look a bit more aesthetically pleasing. \n. We've discussed a plugin system for commander, while I haven't had a chance to get much done on it recently my plan is for built-ins such as --version and --help to be implemented as plugins that can be turned off or replaced easily. The internal code in the loader might look something like this:\njavascript\n// plugins is a dictionary mapping names to functions\nCommand.prototype.help = plugins['help'] || defaultHelp // We use an anonymous function right now\nRight now help is a little more complex than this but hopefully we'll be able make it this simple. Lots of people have requested more flexible built-ins so this should let people do whatever they need without having to change commanders code and should provide a nice way to test new functionality before adding it to the core codebase.\n. I'm working on this feature right now but it's a little more involved than I imagined, might be a while before I get to the pull request\n. That's not the best idea, subcommands should behave like independent programs. .option and .command are just methods of a commander object, why not make a function that takes a commander object, runs the methods on it and returns the object with it's new methods. This way you can share your --host option and more with as many subcommands as you want. I've never tried this (never had subcommands that had all that much in common) but it sounds okay in theory.\n. Let me know if it works :)\n. I have no way to test PowerShell right now, but why not run the command in cmd.exe from PowerShell? Try one of these approaches: http://social.technet.microsoft.com/wiki/contents/articles/7703.powershell-running-executables.aspx\nClosing for now but once I have a machine with windows I'll investigate our PowerShell support since it's a nice tool :smile: \n. Cool, thanks for the work! I can't test this right now as I'm away but if someone could test this out it'd be fantastic and we can get it merged.\n. Absolutely, good catch! :+1: \n. Thanks again :smile: \n. This defo shouldn't be happening, we'll look into this asap. As a work around for now, instead of passing a dash use \\u002D  e.g. lookup -g \\u002D,23. You might need to wrap it in quotes, I haven't tested it but it should hopefully solve your issue for now.\n. Could you update the testcase to wrap the example in quotes? I'm actually of the opinion this should be how values starting with - are handled. \n. Sorry if I wasn't clearer but I meant updating line 17 of the first test case to be:\njavascript\nprogram.parse('node test -d \"-8,2,2.32\" -a Richard'.split(' '));\nNote that a value starting with a dash should be interpreted as an argument. The fact this happens on the case where the value is in quotes is the bug. If you could roll back those changes for now and just make that change to the first commit it'd be great thanks!\n. Nah I think we can do without it, imo the only badge that has real value is a CI one and I don't think commander changes enough to need that. Thanks for the effort though!\n. Could you put back the list function? It should probably be documented as an example of how to use argument type coercion but it shouldn't be removed. The other list example leaves the numbers as Strings so I'll move and tidy this up in the future. Changing the require line is fine however!\n. Look closer, it's different to the first. I'll move this later myself, I'll accept the changed require line though!\n. I completely agree but I'll resolve this another time as the entire README needs updating\n. I've said three times now I'll move the example to the correct location myself as I want to make additional changes. I don't have time to debate this so if you're not going to update your pull request please say so and I can push this change myself.\n. No problem!\n. Could you add some tests for this?\n. When you say arguments, do you mean options or do you mean the number of arguments passed to the command/option?\n. Could you provide an example?\n. Okay I get you now, thanks for the example! @somekittens @zhiyelee could you guys provide some input on this?\nI'll be honest, I never even considered getting arguments like that. Using options means the order is not significant, so your examples would change to:\n$ ./program --cmd 'example' host.domain.com\n$ ./program host.domain.com\n$ ./program --style '/path/to/style.css' --file '/path/to/file1.html,/path/to/file2.html'\nObviously the biggest problem with the above is that you'd have to check if the options were provided but we could solve this with a .required() function for options that adds a check to make sure it was provided.\nI think doing it this way would make the way to use your app a lot more obvious to users from just looking at the way it was called. I understand this isn't what your patch does but I'm hesitant to change the parser too much from it's current version without a really good reason.\n. Yeah I've changed my mind, but I propose a simpler solution: Check if number of provided arguments matches total number of required arguments and check if number of provided arguments exceeds total expected arguments in cases where variadic arguments aren't used. If either of these fails print usage. \nThe only issue with this is I'm working towards making usage an optional plugin enabled by default, so it might be best to sit on this until that's done so there isn't even more code to change later. (If this seems strange, a lot of people just like using commander for parsing args and don't want extra behavior that prints to console like --help, or want to change the way they behave)\nIf you want to split up a pull request and change the top-level command argument syntax now though that would be great, and we can add automatic usage printing at a later time :)\n. Looks great, will also unblock anyone who wanted to use the names of JS internals like apply for their options without clobbering the main object, LGTM :+1: \n. Hopefully in the next few days, want to update the documentation first and do some manual testing of a few new features and then should push out the new version!\n. This is not a forum, please look at the test cases and documentation for how to use the library\n. Could you provide a small example of how you plan to use this change including the expected output from calling the function in a few scenarios, thanks!\n. Just wanted to make sure I wasn't misunderstanding your use case. That's cool though, will hopefully be doing a npm release at the weekend.\n. Noted, thanks!\n. No, it'll be kept in mind for future releases but I don't agree with rewriting history unless absolutely necessary\n. I tried, for setting the target you can only choose from the last 10 commits. Seriously guys, this doesn't hurt anyone other than your inner perfectionist, we'll lose the v for any future releases, lets just leave this one alone.\n. Just provide an empty string for the description. I can't test it right now but it should be fine. We won't be supporting multiple public APIs for this and description isn't the last argument so it's not being made optional\nIf you find providing an empty string, null or undefined don't all work for description let me know and someone can write code that checks for null or undefined provided for description and if found sets description to an empty string.\nClosing this for now, if the above code change is needed I'll reopen.\n. For a later version I plan on adding a plugin system and re-implementing help and version using it. You're not the only one hoping to change the default behavior for them so when that's pushed it should solve that issue for you.\n. I'm sorry, I don't understand your question\n. Looks great, LGTM\n. Cool, thanks!\n. Cool, thanks! :+1: \n. I'm not sure I understand the issue, I took a look at the commit and it seems fine to me?\n. Ah I see, no problem!\n. Thanks @zhiyelee :)\n. Having to handle null in every single coercion function is in my opinion much more annoying than just checking if name was provided and if not outputting your default author's posts.\nCoercion is meant to be a way to change the type of a provided parameter before it is required in code, it shouldn't be running when nothing was provided.\nClosed as Won't Fix, but I will make a note to clarify this in existing documentation, thanks for bringing it to my attention!\n. Looks good to me. I'm of the impression this wasn't added before because you could accomplish the same thing with type coercion (e.g. 'command arg1,arg2,arg' and then a string split to get the array) but that's not very unix-y so I'm all in favor of adding this.\nLGTM :+1: \n. In my opinion this is a bug for a 3.x release and we should use the opts namespace for all options. It's more explicit and we won't have to worry about conflicts anymore. \n. Closed as duplicate of #19\n. Nope, you're not wrong, it's a problem and it will be fixed. Closed as dupe of #283\n. @zhiyelee Your fix seems like the best option, though changing the public API without a major version increment is unfortunate\n. I think the best way to solve this is to advise people to use program.opts.option instead of program.option and depreciate the latter option with console messages. When adding options to the program object, it will only add if nothing is at that location already and if there is it'll post a warning. \nThe advantages of this approach are:\n- Using opts instead of the main commander object was the plan for version 3.0.0 anyways since the current api cause too many issues when options have the same same as builtins like filter. That means people's code will be compatible with 3.0.0 when it is released.\n- Instead of the error now, it'll be obvious where the code needs to be changed. In this case, only the name option would need to be accessed a different way.\nSo no breaking the public API and we get to address other bugs too before our next major version. Thoughts?\n. It was only added in a recent release and it's undocumented right now mostly due to not getting the amount of testing it deserves from the collaborators. :)\n. I say merge it, if it doesn't break any tests then it's fine or we need to improve our test suite!\n. This isn't how I'd address this problem. Checking at the end of parsing if any options with required arguments don't have values and exiting the app with an error code and helpful message for the first one is the way to go, but as far as I can see your error code is 0.\nThanks for the pull request but we'll handle this a little different. If you'd like to give it a shot using my above approach though I'd be happy to merge :)\n. My problem is the amount of code that's changed for a change that should be 2-3 lines. Don't get me wrong, this is the current codebase's fault, not yours, but if I can make changes so that checking if required option arguments were provided is as simple as it sounds I'd prefer to do that.\n. I'm actually not familiar with this `quoting style', is it meant to resemble \"pure\" shell scripting?\n. I looked into this in the past and had a working prototype (not using a third party module). However, getting it working for windows is a whole other ballgame. I'd like to see a powershell solution so commander can continue to be multi-platform\n. Yes and no, as bash completion for apps is done by creating an external file and putting it in the right folder. Writing something to parse your app and auto-generate the completion file is possible but it's outside the scope of this project.\n. That was my branch but my local version was getting a lot more complex than what's currently there and ultimately wasn't worth it, it doesn't mean there isn't active development going on. I've just been really busy with some health issues and other projects.\n. ",
    "dresende": ":+1: as well as options on sub-commands, I'm not being able to add. Also, when using sub-commands, I'm not being able to catch when the user just types the command without any sub-commands or options.\n. Yeah... I tried to find an option to disable console.* replacement.. but zero..\n. I don't think this is necessary. If the param is a defined flag, it's ok (even if it's a number). If the previous param requires a value then use it like a value. If you get to the point where you use a flag (like -5) in a value-required parameter, just swap the positions of the parameters.\n. ",
    "tj": "pseudo terminal you mean? not sure I get it\n. ah yes, that's a bug\n. sometimes you want to accept stdin etc by default, but I'd like some kind of nice option for sure. the best would be probably just to add .outputHelpInformation() and then in your script at the top do:\nif (!process.argv.length) program.outputHelpInformation();\nor similar\n. yeah sorry I was thinking of program.args that ends up being the excess args after parsing the options\n. wtf... log4js shouldn't do that, that's like overriding require(), breaking things, and asking people to fix them haha\n. actually on second thought, I kinda think the usage of console.log() throughout the community (including myself) is somewhat wrong in the sense that what we really want is process.stdout.puts() or a printf. it would kinda be nice if node facilitated a generalized logging facility that actually catered to all the different ways you can log, but it's not a big deal i guess. console.log() is more convenient than process.stdout.whatever() so i guess that's the appeal even though it's not really logging at all most of the time\n. 0.5.x is unstable....\n. talk to isaac about adding a force thing to npm, that's where this stuff should be fixed, for people who really want to use unstable releases of node\n. thanks\n. should be fine, check program.args, stuff that isn't consumed by options ends up there\n. ohhh, gotcha\n. looks good i'll pull it down and test it out\n. merged\n. hmm I cant get git to apply it as-is, might have to rebase or something\n. why do you want long only? just pick some lame short char :)\n. cool well im sure we can make it optional easily\n. good point haha. perhaps we should have them as program.<prop> by default but also have program.options.<prop> or similar for cases like these\n. yeah i know, there's no compromise really, we have to either place the option values somewhere else, or rename the methods\n. this has bitten me quite bad before, but if you've tested with 0.5.x we can change it to allow 0.{4,5,6}.x\n. ok, it should be fine then, i'll do this when i have a minute\n. oh wow haha, i'll take a look when i have a minute, thanks for the report\n. maybe we should change the default to -V or now that we have the long opts thing just --version only. pretty common to use -v for verbose so that would be fine with me!\n. good call haha\n. ah good call! I'll try and get to adding this soon\n. released 0.4.0\n. iirc \"drain\" wont always be called, only when a previous buffer was flushed and things are good to go\n.  I think there was supposed to be some flush on exit thing for node 0.6.x, not positive\n. \"The way to do this would be to check the return value of write, and if false, wait for the drain event, otherwise exit immediately.\" - yeah that sounds about right :) I swear there was talk about this for 0.6.x\n. I've just been checking program.args.length\n. cool looks pretty good! I'll just have to take a min to review it when i have a chance\n. look good over-all, i'll pull it down and tweak styling etc\n. haha no worries, everyone is quite different when it comes to js. The only thing that appears broken is:\n```\n./examples/custom-help  --help\n  Examples:\n$ custom-help --help\n$ custom-help -h\n\nUsage: custom-help [options]\nOptions:\n-h, --help     output usage information\n-V, --version  output the version number\n-f, --foo      enable some foo\n-b, --bar      enable some bar\n-B, --baz      enable some baz\n\n```\nthe additional output should be after\n. weird it used to output underneath, i'll have to take a closer look\n. merged\n. that's just node for you really, if the event-loop is active it'll just sit around, so you can close stdin or process.exit() explicitly\n. because input is line-buffered, so both folder and file have a newline, you can .trim() them if you want\n. true, I suppose we could do that :)\n. if you're only using * I wouldn't even use .command() personally\n. bug is a bug no worries :D I will take a look when I have a min\n. merged!\n. @georgesnelling --version is mapped to .version(val) so people can see what version your program is, you dont have to handle that one manually \n. done\n. yeah we could definitely make that simpler, program.help() or sth\n. realllllllly irrelevant, shaving a few microseconds doesn't matter :p especially not for a cli\n. im down with defaults, adding a syntax to the string itself is kinda weird though, I would rather do something like:\njs\nprogram.choose(list, 2, function(i){\n  console.log('you chose %d \"%s\"', i, list[i]);\n  process.stdin.destroy();\n});\n. shorter doesn't always mean cleaner, other parts of this lib could use some love though\n. I believe I mentioned this in a different issue, but it doesn't really make sense, that means the value is required, not the flag\n. oh sorry I misread the original post, there was another issue which mentioned that --foo <bar> should imply that the flag should be required. Regarding this issue I think it could be doable but I don't think we could really come up with a great API for it. The required flags often vary as far as combinations go, so IMO it's leaky to try to come up with an API, I just plop in assert()s\n. depends if you look at it from a programming point of view or not haha but i'll take it\n. just realized this is implemented wrong, you'll get commander's version every time\n. your require() is always relative to commander's ./lib\n. source / . and ./ mean different things, for example:\n\u03bb tmp: ./test.js\nhey\n   \u03bb tmp: . test.js\n-bash: test.js: line 3: syntax error near unexpected token `\"hey\"'\n-bash: test.js: line 3: `console.log(\"hey\")'\nit's trying to interpret your script as a shell script\n. woah this is really old, prompts aren't in commander anymore\n. maybe what we should do, is if .version(n) is called use that, otherwise default to require(''../package.json).version which must exist in the package.json so we dont need defaulting\n. error on no subcommand is subjective, so -1 from me there\n. @joliss that's what I usually do as well, but often I have program without any arg do something, just because I think that's more useful than outputting help, there's usually a primary feature you can stuff there, even if it just ends up being an alias to another command.\nClosing this though, too opinionated for commander, there are a lot of ways to handle it\n. 0.6.1 is fine\n. we could assume digits cannot be flags. personally I've never used -5 etc, but some people may\n. nah it was because 0.7.x is unstable / changing, but from now on im using \"*\" in all my packages, pinning to a node version doesn't really make too much sense\n. yup this is a really old uncompleted thing but the \"infrastructure\" is there\n. I had to implement this for component(1), and honestly I think it's cleaner to just do it the git way, via which and execute component-install, component-create etc. However that being said it would be possibly nice to build that into commander or something more convenient\n. it's pretty simple if you're going with the executable-CMD approach:\njs\nvar bin = 'component-' + cmd;\nvar proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });\n. for example component install something invokes component-install something, this is how git and many others support commands, it's much more elegant IMO\n. closing because git-style is a lot more elegant than the .action stuff from before\n. +1 from me\n. I'd still prefer ._options over optionConfigurations, or even just this.config\n. use 0.6.1\n. use commander 0.6.1 :p\n. just because they have a required argument doesn't mean the options themselves are required\n. that just means --chdir cannot be used without an argument, a directory in this case, it has to be --chdir path not --chdir, but the option \"--chdir\" itself is not required\n. typically those required things would just be regular arguments, but I've done what have a few times, just with if (!program.whateverOption) throw new Error('--foo required') etc\n. it could be, but it just sounds weird \"required option\", what would be better would be named arguments kwargs style. like my-command host:localhost port:3000 could be equivalent to my-command localhost 3000, and since they're named ordering wouldn't matter my-command port:3000 host:localhost\n. hmm yeah sorry for the delay, I'll take a closer look at this when I get back on monday\n. sounds reasonable to me ! maybe .title()? label? something like that, .group would work too\n. yup i added .help() more recently\n. newer releases are not designed for 0.4.x, use an older one. I'll cap the node version\n. thanks!\n. already made a stdin npm mod\n. I had the property wrong :D thanks\n. not ATM, other than -- but I'd like this too for a few projects\n. ah good catch, I hadn't run across this one yet, totally fixable\n. separate files is a lot nicer, im not a fan of the sub-command stuff we have right now but I dont want to break backwards compat, this stuff could easily be a separate npm module\n. @hapticdata not sure, component was working on windows at one point, we'll have to figure something out I guess, IMO node should support this sort of thing if it's going to pretend to be windows compatible\n. shit not cool, ill check this out tomorrow, remind me in the morning if i dont reply\n. examples all work for me\n. oh wow nice haha, didn't notice that with component, i'll take a look\n. ah it's a bug in parseArgs, though I guess we pretty much always need to emit \"--json\" instead\n. hahahha i never even noticed :D I do that pretty often\n. personally i prefer to leave this portion to the program logic, since it could be more complex, such as if --foo is used then --bar is required as well etc\n. meh I think that's getting too complex, it's easy to defer most of that to program logic\n. don't use it if you dont want to? options are one thing but arguments can be parsed in a nearly infinite number of ways, I'd rather not handle that at all, frankly I want to get rid of sub-command support (as it is now) as well, and go with git-style sub commands\n. leaving this up to the user, it's not hard to add a few conditionals\n. it's trivial to do if (!foo) throw new Error('<foo> required'). If we added support for this then people would want a way to customize the output etc, which then becomes more obscure, gaining pretty much nothing. Almost always there's some form of logic applied to arguments anyway, validation, conditions based on the env etc...\n. we should almost just remove that test file it's such a mess\n. cool i like it other than the fact that i find variadic options really ambiguous with args (unless they're delimited by non-whitespace), ill take a look \n. meh, same issue as --on etc, no way around that unless we change the api\n. yeah that would be good\n. none of the examples get this, not sure I follow the arbitrary arguments like: commander bla comment\n. oh, I never really intended on having the getter part be public, not sure what it would be useful for really, you're just supposed to do .usage('some custom stuff').option(...).parse(...)\n. ah ok I see, I guess I just haven't run into that since I only ever show help explicitly with no args, I'll patch it\n. 1.1.1 should be good to go thanks for the report\n. duplicate\n. ah sorry it's #61, need some maintainers here though :( \n. hmm does having both make sense? The logic I have for boolean flags is that if you have --no- it defaults to true, otherwise it defaults to false, having both seems a little odd but let me know\n. ah I see, yeah that's a little tricky with the defaults I guess hmm\n. I'm +1 but I'd like it below:\n```\nUsage: mocha [options] [files]\nMocha is a blah blah,\n  some description here.\nCommands:\ninit \n....\n```\n. either is fine, the second is the canonical form so that one would be a bit more correct, see git for example:\nNAME\n       git-commit - Record changes to the repository\n. do you have them all listed in your ./package.json?\n. we could adjust that a bit but best to have them all installed like normal executables, the only reason we check ./ is so that you can do ./bin/whatever in development, but it would be nice to remove that overhead. Otherwise it just exec()s the command like normal, so I could install say component-tree from a different npm project and have component still use it, much like git + git-extras etc\n. https://github.com/visionmedia/commander.js/blob/master/index.js#L534 should work already\n. use node's readline lib for that it works pretty well\n. no.. just because something is \"fine\" the way it is (or if the author sees it that way) doesn't mean it's dead, I'll get to anything crucial when I have time but meanwhile it's used all over just fine. it's not uncommon for half of any project's pull-requests to be irrelevant I just don't have time to go close everything that people open\n. https://github.com/visionmedia/co-prompt\n. I'd rather just add a way to completely blow away the help output so you can do your own\n. is this new? \n. weird! \n. yup https://github.com/visionmedia/co-prompt they just don't really belong in here\n. https://github.com/visionmedia/co-prompt, don't have to use it with generators though prompt('Message: ')(callback) etc\n. someone also moved the old commander ones into a module but I'll have to find the name I forget now\n. I use - for short flags like tar does, -zxf etc, supporting both - and -- for long isn't all that useful IMO, and I'm not a huge fan of = either really when it's unnecessary \n. closing for now \n. https://github.com/visionmedia/co-prompt, the originals are available in npm as well, I forget the module name the guy used, or just use an older version of commander\n. hmm this isn't right, because you're changing what used to be dynamic and making it always .name, making it always true\n. missed this one, looks good to me\n. hmm we have a test failing now, I'll have to check that out later unless someone wants to take a look\n. I'd suggest something like --foo bar,baz otherwise it's pretty ambiguous from a UX perspective as well\n. hmmm not sure how I feel about it since -DEBUG on its own wouldn't be legal (if not following another flag etc), might lead to some weird confusion but probably not a huge deal\n. ill merge for now it should be ok \n. woah this PR is all weird\n. it could be, it's just ugly and breaks backwards compat. we could do var opts = program....parse(args) to mitigate that though and maintain backwards compat without being super verbose\n. no I understand, it's a tradeoff, there's only a that short list of names you can't use, which yeah is certainly a \"bug\" but until we do a 3.0 like you say it can't really be fixed. Best we can do is return the options from the .parse() call\nalso a lot of those, such as normalize could be renamed to _normalize since it's just internal junk anyway\n. damn looks like we return the left-over argv after already\n. I would consider it but not with all the logic inlined in commander, there's probably an npm module or two that do this (if not we could wrapping there)\n. yea having all flags with <foo> required wouldn't make sense at all, but a cli-assert or similar module that outputs pretty errors would make it really easy to do assert(program.file, '--file required!')\n. that just means that flag requires a value, ex --addr doesn't make sense, so you'd need --addr http://whatever\n. assert(program.input, '--input required') isn't too bad, I'm not convinced it belongs in commander, there are so many variables involved, and relationships between flags etc\n. -1 from me, I think it'd be best to just move that stuff into a lib that you can then use with command and the console\n. too unfocused\n. yea nothing opinionated like that right now\n. SGTM, should be easy to integrate the which module\n. meh it's private api either way so it's not something you can rely on\n. because it doesn't really belong here, in an arg parser\n. sure I'll re-label then\n. our docs just suck, it's called for you when you do .command('subcommand', 'description here')\n. hmm yeah I thought we had this already, if it's busted I'll definitely accept a patch\n. yeah good call, nothing specific IIRC, since null etc could be valid, so if it's really invalid the function should throw\n. sorry about that, it's easy for me to miss stuff I have a few hundred notifications/day :s \n. would be cool to have it as a separate module, sort of weird to expose it through commander but something that commander could use as well would be great\n. but then there's nothing to coerce. this would be a breaking change so we'd have to bump to 3.0 as well, but I don't totally get why you'd want it to invoke the callback with no value, that will fail in lots of cases\n. cool! no worries\n. co-prompt has them now\n. oops sorry, maybe we need more maintainers here, I don't touch node stuff anymore. The tweak looks fine to me!. happy to add anyone who is interested in maintaining. added you both :D just let me know what your npm usernames are. done!. added :D . wow quite the nice typo i had haha program... wtf\n. if we change it to .options im down\n. arrays can have props, iirc that one is private anyway\n. let's just rename the internal one to _options\n. I like this but I wouldn't merge them into program, I would have it take a callback with the object it populates, camel-case only\n. yup, we could even just augment .prompt() to support it:\njs\nprogram.prompt({\n  name: 'stuff...',\n  age: 'stuff...'\n}, function(obj){\n  console.log(obj)\n});\n. i cant remember - do we call .version() somewhere in here to default it? this looks fine as far as fetching the version goes but at a glance it looks like we wouldn't be registering --version unless you did program.version(program.version())\n. we could change this.options to this._options (or whatever) and use that instead of .parsedOptions\n. also this could just be program.parsedOptions.bbq \n. small nitpicks but I'd prefer function setRawMode(mode) { here and if (process.stdin.setRawMode) {\n. hmm this is a little awkward, we could just set this.key = or something and use that throughout \n. oh nvm i see now. we can't change the event names really without breaking the api, but we could change how they're used internally to fix this issue\n. no need for typeof here, just undefined === or a hasOwnProperty\n. ",
    "NuckChorris": "Basically I just want to be able to pass a function as the default (which could be given a callback?) that'd be called to provide the default value.\n. ",
    "jimisaacs": "I just made pull request for a slight refactor of how defaults were treated then noticed this issue, but I'm still not quite sure I get it either.\n. there is a callback for coercion, was that there before this issue was created, and does it help?\n. Wow that was fast ;) thank you sir!\n. I can't figure out how to fix this, I don't know why it pulled over 3 of those 4 commits, I guess closing it and trying again..\n. This one should work ... hopefully\n. ",
    "bminer": "Solved in #54.  Still need to merge changes and push to NPM.\n. Is this issue closed?\n. +1.  Backspace detection, please.  :)\n. ",
    "zhiyelee": "Closed because password had been removed\n. Sound good. PR on this is welcome\n. hi @sebastiendb , could you make a response to what @whitelynx mentioned? Many thx~\n. @sebastiendb Thx  for the PR, but the PR is too old to be merged.\n. I will look into this later.\n. Closed since this PR is out of date. Thanks @millermedeiros \n. Closed since #277 \nThanks @millermedeiros , but I have merged @whitlockjc's PR which is up to date.\n. Closed in favor of #210 \nSorry @millermedeiros , but thanks for your great contributions.\n. Closed because the confirm function had been removed since v2.0.0\n. The PR seems out of date.  I can not find the description in man npm-json now.\n. promt had been removed at 2.0\n. @doozr Would mind making this PR up to date and add a test for this?  I'll merge this.\n. I also prefer program.args.length, but thx all the same.\n. Sorry, I didn't notice this PR. Closed here #310 \n. @CatTail choose and prompt had already been removed at v.2.0.0\n. LGTM\n. @rlidwka +1 like js-yaml is already very mature\n. @RasterBurn Thank u, the password function had been removed since v2.0.0\n. @whitelynx Thank u, but this pr can not be used anymore since the password function had been removed since v2.0.0. \n. @zhuangya Yep, it is out of date. I'll update someday later. Sorry for that.\n. @Nate-Wilkins I'll look into this later.\n. @SomeKittens @thethomaseffect  Do you have any idea on how to update the gp-pages. I am not very familiar with the Makefile \n. @SomeKittens Yep, I have tried, but failed to figure out how to make that update to date. \n. Closed #299 \n. Would u mind providing an example? Thx\n. There are a similar feature already https://github.com/tj/commander.js#variadic-arguments\n. Closed #270 \n. Thanks, but dox is ok for us.\n. Close for no response, pls feel free to reopen this if u still take interest in this PR\n. @fyockm Thank u .\nI have cherry-picked the b83e464 into master. And the second seems not necessary now.\n. @dead-horse Thx, but this PR is out of date.  Closed #307\n. I have edited the History.md  in https://github.com/tj/commander.js/commit/863e73a311d85589355fbb9556692ea0cad48e8e\n. Also I think it's a break change, isn't it?\n. @zxqfox Yep, this feature sounds good to me, and I'll have a look at this later.  A little busy recently..\n. hi @SomeKittens, @Mithgol fixed travis config in #218, but this pr still work.\n. @mauvm @muloka Hi guys, would u  like to add some example for the bug? Thank u.\n. @visionmedia  ping~\n. @visionmedia ok\uff0cgot it.\nMaybe I misunderstood the meaning of optional here, I thought the coerce function should be called even without the optional value,meanwhile the function itself deal with missing value(here it was set to null).  \n'-l, --list [items]'\nConversely, it will throw a error the same situation happened to required value(<value>).\n'-o, --optional <value>'\nSeems it's intended instead of a bug.\nThx for your response~\n. @whitlockjc @tonylukasavage  Thanks, I will look into it later. \n. Sorry, And I do not quite understand the issue described by @battlesnake ,  is it the same as what @whitlockjc described?\ncc @tonylukasavage @battlesnake  @whitlockjc \n. @tonylukasavage Ok, thanks for the response.\n. Closed. \nThe issue @whitlockjc had been fixed.  \nTo @battlesnake ,  maybe you can reopen it with an example.\n. ok, thx for the  clarification.\n. LGTM\n. I found this problem too, and I think treated the common used word no as a key work is not proper enough.\nWe can improve it.\n. Close #310 \n. Close for no response. U can reopen this PR after response to the review @henrytseng \nThank u for the contributing\n. @henrytseng Sorry, maybe I haven't made it clear.\nWithout fixing the problem I pointed out in the review, this PR will not work.   As for the negative number and quotes support, PRs and ideas are both welcome.\nIf you fix the problem in the PR, I would like to merge it.\n. @thethomaseffect @rrthomas IMO, It would be better that  PRs like this  should get merged after the document is ready.\nI am preparing  for the next release and find this PR without document.\n. Close #332 \nThx @pirelenito \n. Sorry, I made some wrong operations on the label, please ignore that.\n. Hi @tonylukasavage @thethomaseffect I found this PR may lead to some potential bug in special situation.\n```\nvar program = require('./');\nprogram\n    .command('mycommand [options]')\n    .action(function () {\n        console.log('action triggered');\n    });\nprogram.commands[0].name('new');\nprogram.on('new', function () {\n    console.log('new triggered');\n});\nprogram.on('mycommand', function () {\n    console.log('mycommand triggered');\n});\nprogram.parse(process.argv);\n```\nthe output:\naction triggered\nmycommand triggered\nListen  to the new name  would not work.\n. And do we really need the set operation?\n. @tonylukasavage Sorry  to hear that and hope that  you will get well soon.\nForget it, I can do it instead.\n. @thethomaseffect will you regenerate that?\n. @thethomaseffect +1 for not rewriting history, but how about appending a new tag 2.3.0\n. IMHO, it is not necessary to provide such an option.  Also I don't know any unix/linux commands provide such options.\n. Thank you @thethomaseffect \n. Hi, @thethomaseffect \nI have cherry-picked the first commit of #191 into master. \nDo u have any idea why does the diff here appear in this way?\n. Sorry, I had not maken myself clear, I had merged  the commit remove unused list function from custom-help example  into master, but here the diff include the commit again.... \nI must have made some wrong operations in my own forked repo.\nI made another PR #274 , things are ok there.\nThank u.\n. @SomeKittens @thethomaseffect  I have reviewed the PR.  After fixed, I am all for merging this.\nBig thanks to @whitlockjc \n. @whitlockjc Thanks for the new commit, and how do you think about which @theganyo mentions?\n. Sounds good.  I have merged it. Thanks for your contribution again @whitlockjc . \nI will release a new version later if no one  beat me to do that.\n. @Globegitter v2.5.0 had been released.\n. @hoho I will have a look at this.\n. @hoho It is a flaw in design.  \nname is one of the functions defined in program.__proto__  https://github.com/tj/commander.js/blob/master/index.js#L797\nThat means, when using options with the  names of  name,  alias , usage and so on, ppl will encounter this problem. \nI'll have a close look at this to find a solution.  Thanks for ur feedback. \nMaybe U can use --project_name  instead of  --name  before the problem got fixed.\n. @SomeKittens Do u mean  #248 ? \n. @SomeKittens Not the same bug. That PR fixed a bug about subcommand\n. @thethomaseffect Because name is so common, maybe we should change the Command.prototype.name() to a rarely used name, such as cmdName before this bug is fixed in some future version.\nHow do u guys think about this? @tonylukasavage @thethomaseffect  @SomeKittens \n.  @StoneCypher  Indeed  it is intended. https://github.com/tj/commander.js#git-style-sub-commands\n. @StoneCypher Sorry,  I didn't made it clear.\nThe \"bug\" here is intended.   There should not be followed .action  when there is the second argument for the .command. In that case, the sub-command is treat as git-style command, and the app will try to execute  the app-subcommand script, such as pm-install, pm-search here: https://github.com/tj/commander.js/blob/master/examples/pm\nBesides I also think #331  is not the same as this one, and I have reopened it.\n. @StoneCypher Yes, the error should be caught. I'll find a way to fix that later.\n. @SomeKittens  I am not very sure, seems it is intended here  https://github.com/tj/commander.js/blob/master/index.js#L158-L165 \nBut I have not figure out why tj wrote like this at first.\n. Yes, it is intended here. It is designed to support git-style executable subcommand.\nExamples can be found here: https://github.com/tj/commander.js/blob/master/examples/pm\nI think we should rewrite the README or update the gh-page ASAP.\n. @thethomaseffect  I'll add test suites for the git-style subcommand feature.\n. @sorrycc thx, can u fix the failure in the test case?\n. @rlidwka Yes, I found the same cases in some shell man docs.  Thanks a lot.\nBesides, there is a discussion here: http://unix.stackexchange.com/a/73996/87921 \n@sorrycc I will close the PR since it is intentioned here. Thanks  for ur pr.\n. Thx @Quentin01 , would u mind adding a test for this fix?\n. Closed. We can discuss in #293 \n. Wait, there is a bug.  See #266 \n. With desc argument, the subcommand is supported to refer a git-style executable script, such as pm-install, pm-search\nLike this: https://github.com/tj/commander.js/blob/master/examples/pm\n```\n!/usr/bin/env node\nvar program = require('..');\nprogram\n  .version('0.0.1')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('list', 'list packages installed')\n  .parse(process.argv);\n// here .command() is invoked with a description,\n// and no .action(callback) calls to handle sub-commands.\n// this tells commander that you're going to use separate\n// executables for sub-commands, much like git(1) and other\n// popular tools.\n// here only ./pm-install(1) is implemented, however you\n// would define ./pm-search(1) and ./pm-list(1) etc.\n// Try the following:\n//   ./examples/pm\n//   ./examples/pm help install\n//   ./examples/pm install -h\n//   ./examples/pm install foo bar baz\n//   ./examples/pm install foo bar baz --force\n``\n. Yep, the gp-pages is already out of date.   #295 \n. About theif`, I fixed it here #296\n. LGTM. Big thanks to @stephenmathieson \n. @jviotti  I am releasing a little version for this.\n. @jviotti v2.5.1 had been released.  \nAnd @AluisioASG  Thank U for ur effort but I want to fix the bug ASAP.  PRs are welcome~ \n. https://github.com/tj/commander.js#git-style-sub-commands\n. Yes, #290 have not been solved. You can add start a new test file OR do that after the #290 be solved\n. This PR is involved in #387 \n. I have no idea how to compatible with Windows here   #142 \ncc @SomeKittens @yiminghe\n. Seems on windows, ppl must use node pm-install instead of pm-install  cc @yiminghe \nBut with #306 , we can only work with js bin files. But  other types of executable files can not make sense, such as bash php etc\n. Now windows also make sense.  I will write some tests for this later.\n. Closed for too many commits. I'll  open another PR\n. @comartmit  allowUnknown has not been released. It will be included in the next version.\n. @comartmit  Just released v2.6.0\n. LGTM, I think any form of contributes can be appreciated. @SomeKittens @thethomaseffect \n. As @SomeKittens describe, we adopt git-style subcommand here.\ncar-headlights-on\ncar-headlights-highbeam\ncar-headlights-lowbeam\ncar-headlights-off\nFor the example, I think you can use option instead, such as --on , --off,  --highbeam etc\n. @DigitalIO This PR is incompatible with #305 .\nIndeed we can put the  --harmony in the shebang\nfile: ~/bin/pm-list\n``` js\n!/usr/bin/env node --harmony\n\"use strict\";\nlet a = 5\nconsole.log(5)\n```\nwhich works well with current PR:\nbash\n\u270d examples/pm list\n5\nHow do u think about this? @DigitalIO @SomeKittens @thethomaseffect \n. @DigitalIO windows will use this branch: https://github.com/tj/commander.js/pull/327/files#diff-168726dbe96b3ce427e7fedce31bb0bcR481\nYour patch can be applied here.\nDo u mean Debian don't support the --harmony option in the shebang?\n``` js\n!/usr/bin/env node --harmony\n\"use strict\";\nlet a = 5\nconsole.log(5)\n``\n. @DigitalIO  Seems there is a bug in Debian on the/usr/bin/env: node`.  https://github.com/joyent/node/issues/3911\n. Already Cherry-picked it.\n. @StoneCypher \nIn your example, -g is an option belong to the  rlode sub-command instead of the main command.\nU have use the same name for both the main command and sub-command. U can rename the rlode.js file to t.js for example. \nMy copy: t.js\n``` js\n!/usr/bin/env node\nvar Commander = require(\"./\");\nCommander\n    .version('0.1.0')\n    .command('rlode [options] ')\n    .option('-g, --glob', 'specify glob to match against')\n    .action(function(cmd, opts) {\n        console.log('action triggered');\n    });\nCommander.parse(process.argv);\n```\nNotice the rlode is a sub-command here. \n``` js\n\u270d ./t.js -h\nUsage: t [options] [command]\nCommands:\nrlode [options] [options] <glo>  undefined\n\nOptions:\n-h, --help     output usage information\n-V, --version  output the version number\n\n```\n``` js\n\u270d ./t.js rlode -h\nUsage: rlode [options] [options] \nOptions:\n-h, --help  output usage information\n-g, --glob  specify glob to match against\n\n. I will have a look at the twice `[options]` and the `undefined`, thanks a lot.\n. @goloroden  It's not allowed to custom the `version` output now.  A PR is needed for that. Would u mind make a PR,otherwise I'll make it some day later.\n. thx @demohi \n. @ysmood thx, but the empty line is intended.\n. `[`/`<`  are reserved for `optional/required arguments`. I do not in favor of this way. Maybe we can discuss this feature more, and I'll revert this commit for the new release `v2.7.0`. @SomeKittens @Globegitter \n. @goloroden I'll release a new version after #349 get merged\n. Test cases for this fix will be added later.\n. I want to stop supporting node versions <v0.8 in next version `v2.7.0` , how do u think about this? @SomeKittens \n. Yep, IMO versions below `v0.8`(not include) are too old. https://github.com/zhiyelee/commander.js/commit/9c42834db2bf184dd749ab9527b69e762242d515\n. @SomeKittens Dropped versions `< v0.8`  needs a Major version, maybe we can drop it from `v3.0`. I'll revert the commit and merge this PR.\n. js\n! /usr/bin/env node --harmony\n// code here\n```\nDoes not this way work?\n. add 'use strict';  below shebang\n. @khanh-nguyen Seems a bug, I'll look into it.\n. I checked again, seems works for me here.\n``` js\n! /usr/bin/env node --harmony\n'use strict';\nif (1) { let foo = 1; }\nconsole.log(typeof foo === 'undefined');\nconsole.log('========')\n``\n. There are some changes afterv2.6.0`  which have not been released\n. The abnormal is incurred by #347 https://github.com/tj/commander.js/pull/347/files#diff-168726dbe96b3ce427e7fedce31bb0bcR565\nWould u mind reviewing this?  @tonylukasavage @SomeKittens \n. @SomeKittens Sounds good to me\n. @timoxley @yoshuawuyts I have released a patch version for the bug. Sorry for the Inconvenience.\n. yep. That's a problem, hope can fix it in v3.0, cause it will be a break change. \nhttps://github.com/tj/commander.js/issues/404#issuecomment-102613456 \nthanks @tonylukasavage  for providing the list\n. Could u provide more detail information?  thx\n. @AdamMagaluk yep, I will find a way to fix this.  You can add #!/usr/bin/env node simply(command will handle the .js itself)  OR pin to v2.6.0 before the bug get fixed. Sorry for that.\n. @AdamMagaluk yep, u are right. I am working on this bug now. Hope to release a patch version later. \n. thx\n. Interesting. PR about this feature is welcome~\n. thanks @SomeKittens \n. same as #372 , this will be fixed in next release, you can use the workaround suggested here: https://github.com/tj/commander.js/issues/372\n. @gajus Sorry for that, I'll release a new version ASAP\n. Sorry, seems that It's a break change.  I think it should be revert, what's your opinion  @SomeKittens ?\n. cc @zxqfox , I think #184 is much better in compatible with old version.\n. PR is welcome!\n. @tonylukasavage thank you!  So long a list, I really think a v3.0 version is needed to fix this problem.\n. @SomeKittens Really big change, I will review it later this weekend.\n. @bcoe Thank you. We have discussed about node@0.6 support, and we decided to drop it in next major release since it's a break change.\n. Good catch. But I don't think it's a good practice  to add function to Array.prototype.\n. Thank you @c-geek \n. Great, thank you for the update @jhoguet \n. thanks @tonylukasavage ! This should be append to the doc OR README better.\n. Should it be an option or default? \n. Hi @thomashoffmann1979 , we can merge this if you add a test. Thank you.\n. @thomashoffmann1979 Can you solve the conflict in this PR.  I will merge it.\n. @ciceropablo yw. Thank you\n. Yep. Thank you, I will check it later.\n. @inadarei Haven't released a new version. Will release later.\n. I'll append test for this.\n. hi @gajus , can paste the relative code here? \n. No, thank you.\n. yep, thanks, i will close this. You can reopen this after figuring out a solution.\n. should use this pattern .option('-p, --peppers', 'Add peppers') -x for short,  --xxx for long, split with [ ,|] \n. Unfortunately not, now we can only set alias for sub command till now. \n. @SomeKittens  I'm not sure whether we need that\n. Also that would be break change to change default code from 1 to 64. \n. @hildjj Thank you!  I'm not sure 64 is convention for such error. I have checked wget and git with unknown option, they give 2 and 129 respectively. \nI am open to allow user set custom exit code.\n. Any help on the document is welcome~\n. I have created a PR for this #416 , will merge that later this week.\n. That is designed. -- is used in bash to  signify the end of command options\nhttp://unix.stackexchange.com/questions/11376/what-does-double-dash-mean-also-known-as-bare-double-dash\n. This will break the old manner?\n. @SomeKittens Nothing break. But I'm not a big fan of this. Since to use this, user must override process.exit first. Not very graceful, but I have no better solution.\nBesides I think Commander is designed to use in command line instead as a class can be extended.\n. That is a convention. You can man grep to check that. Also there was a discussion in stackoverflow, but I can't find the link now.\n. Awesome, thank you!\n. IMO, exports.xxx = is equal to module.exports.xxx = \nBut need to use module.exports = instead of  exports =\n. I prefer the self. \n. Thanks, I will check that. And a PR is also welcome @Unitech \n. Unfortunately, we can't now. Only have alias for command now.\nPR is welcome for this. Thanks\n. Yep, @SomeKittens and I are still maintaining this project.\nI planned to start v3 #431, but haven't started. \nReally busy on the project of my company recently. Will start that in later January. \n. Nope, there should be other packages for prompting \n. Haven't tried this. Thanks @euoia \n. Yup, has been removed long time ago. You can check the Changelog\n. LGTM\n. thanks, but i would like to pass now\n. thanks, but that's not a problem to me.\n. https://github.com/sindresorhus/ama/issues/10#issuecomment-117766328\n. hold on this.  New added get has will overwrite custom command with same name. https://github.com/tj/commander.js/issues/404\n. oh, sorry, it's about options. \n\nJust want to give some feedback here to help others avoid a little pitfall: you cannot use --once as an argument, probably because the name collides with some internals of commander. Interestingly, the once argument will revert the expected behavior: myprog --once will set commander.once=undefined, so a falsy value, while running myprog will set it to a function as expected. \n\nI don't want to introduce more these cases until we fix this issue.\n. thanks!\n. Nope, thanks! That's intended.\n. thanks, but we want to stick to the old manner.\nfyi.\n\na double dash (--) is used in bash built-in commands and many other commands to signify the end of command options, after which only positional parameters are accepted.\n\nhttp://unix.stackexchange.com/a/11382/87921\n. @JustATrick  may bad, you are correct.  Could you double check the travis tests? thanks\n. oh, interesting.  I will check that, and PR is welcome\n. thanks @lpinca \n. #538 duplicate\n. thanks\n. in node v6? https://github.com/tj/commander.js/issues/530\n. Cool, thanks, can you fix the tests. @rike422 \n. yea, related to #550\nI like the feature and will review the code by this weekend. Thanks for the contribution. \n. Merged. Thanks @rike422  @jamesr73 \n. Nope, prompt has been removed since an early version\n. Sounds good. I think we need to remove v0.6 and v0.8 in next major version.\n. thanks @JustATrick \n. I will check this @Unitech \nBtw, you can send a PR if you find a solution. Thanks!\n. LGTM, thanks @lzilioli \nCould you add some tests? . thanks @abetomo . @tyge68 Yes, we need to support old version. Could you also edit the travis.yml and run the tests?\n. thanks. thanks. This looks good to me. Thanks, make sense. nice. IMO, elements in the argv can not preserve \" ', so maybe this can not work.\n. Indeed \nprogram.parse('node test -d \"-8,2,2.32\" -a Richard'.split(' '));\nis not realy equal to execute follow cmd through command line\nnode test -d \"-8,2,2.32\" -a Richard \n. slice(0, -3)  is enough.\n. comments are not proper here.\n. arg.name is better than arg for the argument here.\n. comments are required for the the function\n. How about \nargs = process.execArgv.concat(args)\n. I would prefer _allowUnknown\n. Hi, could u give some references for this? I didn't heard this before.\nThanks a lot.\n. @rlidwka Not yet heard that, Thanks a lot.  Maybe we can replace it with fs.accessSync after v0.12, but it makes sense now.\n. @rlidwka Are there any advantages with fork?\n. Got it. Thank u very much for the detailed explanation.\n. With the commit, bin file must have shebang itself\n. SIGHUP?  Have you test all this listener? @thomashoffmann1979 \n. Yea. To double check, I mean here we should use SIGHUP instead of SIGHUB.\n. there may some flaw here.  Some of the commands may don't have an alias.\nI have made some change as below, test failed.\n\n. My bad, you are correct.\nyes, please, thanks\n. I think we can remove bin + 'l' test  from test.command.executableSubcommandAlias.js.\n. Previously, <> means argument is required for an option. That is not to say this option is necessary.\nCorrect me if I am wrong\n. ",
    "kushwahashiv": "\nClosed because password had been removed\n\nis there any way we can mask password?\nregards\nShiv. can we handle password masking in commanderjs? . I also get an error TypeError: cmd.command is not a function\nusing with TypeScript 2.9.1. ",
    "khoomeister": "true about stdin so it would be better off as an option, but aside from that, I think my code also allows for the fact that if people type in spurious commands.\nBTW, I think your code meant if (process.argv.length == 2) ....\nChris\n. ahh ok that makes more sense - thx\n. ",
    "MarkKahn": "This can be closed:\nconsole.log( program.helpInformation() );\n. yeah, mostly mean in docs, sorry.  For --help\n. n/m, just saw that I can pass a string to .usage()\n. ",
    "mikermcneil": "In case this helps anyone else out, here's an example of how to do this (with commander@2.1.0):\n``` javascript\n// ...\n// Do all the normal things\n// ...\n// After parsing your commander program....\nprogram.parse(process.argv);\n// Check the program.args obj\nvar NO_COMMAND_SPECIFIED = program.args.length === 0;\n// Handle it however you like\nif (NO_COMMAND_SPECIFIED) {\n  // e.g. display usage\n  program.help();\n}\n```\n. @MatthewMueller thank you for looking that up!\n. ",
    "heff": "@mikermcneil thank you!\n. ",
    "foxx": "Might be worth adding some docs to the README, as it took me a while to figure this out. Would a docs patch PR be accepted?\nYou cannot use program.args because then it won't detect things like --option, only the unnamed arguments. Although admittedly that may be a desired use case.\nAnyway, to get this working, I had to use;\nif (!process.argv.slice(2).length) {\n    program.outputHelp();\n    return;\n  }\nThis allows me to do;\n```\n$ cmd\nHelp displayed\n$ cmd -o\nHelp not displayed\n$ cmd lala\nHelp not displayed\n```\n. PR sent, sorry for the delay\n. Just come up against this again, seems to be quite a few PRs, are any due to be merged by core dev?\n. Any word on this @tj?\n. ",
    "SomeKittens": "Docs PR would be fantastic - pull away!\n. Can you bring this up to speed with the current state of the repository?\n. Closing, will reopen if this gets updated.\n. Can you bring this up to date with Commander?\n. @scinos For one, @whitlockjc's PR is up to date.\nThanks for the PR, we'll take a look at it.\n. Closed in favor of #210 \n. Closing, will reopen if this gets updated with latest master\n. @zhiyelee Any updates?  We can close this if not.\n. @greenify I can't speak to the original reason, but the current one is that it's far behind master.\nClosing, please reopen if it gets updated.\n. Closing, will reopen if this gets updated with latest master\n. Closing, will reopen if this gets updated with latest master\n. You'll need to check out the gh-pages branch and commit to that.\n. This appears to have been fixed.\n. Closing, as this has sat here for a while and has conflicts.  Will reopen if conflicts are fixed.\n. I'm in favor of this - can you merge with master and bring things up to date?\n. All good!  Thanks so much.\n. @mattma Commander.js is under new management, so things are still a bit shaky.  Great PR, but there are conflicts with the current version.  Bring it up to date and I'll merge it in.\n. @tandrewnichols I like this one better - the syntax is a little clearer.  I'll close the other one.  Thanks!\n. @tandrewnichols Thanks!\n. If you want to coerce, just throw/error in your coercing function - there are no plans to do that in .option\n. This appears to have been resolved.\n. @amjibaly Can you file that as a separate issue?  OP had issue resolved so I'm closing this.\n. @amjibaly Sounds good.  Thanks for the update.\n. Please create an example when reporting an issue like this: http://sscce.org/\nClosing now, reopen if you have an example.\n. Correct, you should check if it's set and then call the function yourself in this case.  The callbacks in .option are to coerce values (i.e. parseInt), not general use.\n. Hi, I'm the new maintainer.  Nice find, can you create a gist demonstrating this?\n. Hi!  I'm the new project maintainer.  I'd love to have all three of these as (separate) pull requests.  Just make sure they're tested.\n. @NameFILIP Hopefully.  If you want to ensure your PR is merged, make sure it's wanted (already shown in this case), and has proper tests & documentation.\n. Thanks\n. Hey!  Glad to see you.  As to the dev branch, I don't think it's entirely needed.  Most projects have master as cutting edge and include tags to npm deployments.\n. I'm with @rlidwka on comma-first.\n. +1 for clean commit logs.  Thanks for standardizing the code a bit!\n. @soyuka soonish, we're still working that out (I just got back from vacation)\n. Looks great!  Can you update the README with how to use this option?  I'll pull when that's done.\n. One possible workaround is to abuse the coercion system:\n```\nvar fooWasCalled = function (foo) {\n  console.log('*** Foo invoked');\n  return foo;\n};\nprogram\n  .option('-f, --foo', fooWasCalled)\n  .parse(process.argv);\n```\n. @ohjames We can't merge this - there's a bunch of conflicts...\n. Nice, thanks.  In the future, there's no need to open up a separate issue for your PR.\n. No problem.  Thanks for contributing!\n. It's not everyday I'm excited about a PR with a broken build, but thanks!  This won't be merged until we fix the bug - leaving this open for tracking.\n. I'm not terribly convinced that this is necessary.  @thethomaseffect, thoughts?\n. Technically speaking, they are applied: https://github.com/rrthomas/commander.js/blob/master/index.js#L248\n. @rrthomas thanks for cleaning up!\n. LGTM.  Sorry about the wait.\n. This should be done in your verification functions.\n. Would you mind writing a test or two for this?  Thanks!\n. https://github.com/visionmedia/commander.js/commit/c0fcf8f7ecf1f4733f404cf93b032fb159a8bc72\n. opts sounds good to me.\n@thethomaseffect Look good?\n. The v is added from npm version - it's pretty standard\n. Closing, reopen with more details.\n. Thanks!  Could you also update the docs?\n. both, please!\n. Docs look great as well - you may want to add a quick definition of Variadic, but that's up to you.\nif @thethomaseffect @zhiyelee have no objections, we can bring this in.\n. Thanks for the catch!\n. Yep, this is expected behavior.\nDetails and options for a command should go in the second string argument, like you've got 'this is my command' above.\n. Wasn't this fixed earlier?  I think @thethomaseffect pulled that in.\n. Yeah, that one\n. Ah, my mistake.  Sorry!\n. Please write a few tests demonstrating that the issue is fixed\n. Looks great - @thethomaseffect and @zhiyelee look good to you?\n. Good find there.  I'm not a fan of such magic - we may want to create another way to have git-style commands.\n. LGTM.  Thanks!\n. Glad you added this bit.  I know Thomas has been working on a plugin system, so I'm in favor of redoing gh-pages/README after that.\n. @AluisioASG PR's (with tests) are very welcome\n. We don't plan to support this right now, but there's a workaround here: https://github.com/tj/commander.js/issues/338\n. Looks like this fixes more than one edge case.  Can we get the tests passing?\n. :+1: \n. Closing as dupe.\n. :+1: \n. I'm not a big fan of style-only PRs.  @zhiyelee @thethomaseffect  ?\n. Subcommands are this style thanks to git (git status is really an alias for git-status).  I'm not a big fan of adding this to core.\n. I'm unaware of a UNIX-style utility that parses things this way - care to suggest one?\n. Not sure what you mean - can you provide more details?\n. If you want to allow a config file, that should be within your own code, not the commander core.  We're investigating a plugin system in the future - this may fit in there.\n. Closing as dupe of #285 - you should comment there if you've got more.\n. Looks like a problem, and thanks for bringing a solution along with the report!\n. This is a known issue, and a big one.  Unfortunately, us maintainers are all volunteers and don't have the free time we'd like to fix things.  We're working on a plugin system but that's a long time coming.\n. @chrishiestand That's not too hard to implement yourself, and like @goloroden, people might want other options.\nUnfortunately, at this time program.on('*' is your best bet.  I don't think we'll be setting any defaults soon.\n. @goloroden There's nothing wrong with your suggestion - on the contrary, this is something lots of folks hit.  I don't think we'll be implementing a default at this time (but I want to revisit this when if/when the plugin system ever happens).\n. You will have to implement the interpretation yourself.\nI'm not sure about the internals of your CLI but it usually makes more sense to have the absence of a flag be false\n. This is what I get for answering issues before reading them all.  Can you provide a use case where explicit true/false would be needed over lack-of-flag implicitly meaning false?\n. Makes great sense!  Thanks so much.  Add a test and I'll merge.\n. Thanks again!\n. Works for me.\n. Not sure - couldn't find usages stats on how many are still on 0.8.\n. Talked to some folks on #nodejs and #npm (freenode) - there's no good way to tell usage, but we should keep 0.8 support for now - at least until 0.12 settles down.\n. @zhiyelee sounds good to me.\n. Writing something that works via command-line and HTTP is a neat idea!  However, that's not the goal of this project.\n. Interesting.  Where would this be useful where process.on('beforeExit' wouldn't be (or for tests, an after call)?\n. I'm sorry, the coffee has not kicked in yet.  Can you provide a case where this would fail in master that does not fail here?\n. Ah, thank you - looks good!\n. There's some discussion here: https://github.com/tj/commander.js/pull/349\n. We've updated!  Enjoy the new Commander.js\n. @zhiyelee At this point we should probably revert that commit to restore previous functionality.  We can inspect the bug #347 was trying to fix later.\n. Can you provide the full example?\n. I'm not in favor of spam-via-PR.\n. Can you provide some examples, as well as why this works better for you than other current solutions?\n. Closing, will reopen if examples provided.\n. I'm not quite sure what you're asking.  Add some more detail and I'll reopen the issue.\n. Very nice, thanks so much!\n. Setting this only on .command for now makes sense for now, given your use case.  Thanks so much for the detailed PR + tests!\n. I've edited your post - there's no need to ping all the contributors of a project.\n. Looks good to me, thanks @zhiyelee!  I'll let you merge when ready.\n. Thanks for taking the time to help us out anyway!\n. Looks good to me.  Hurrah!\n. Excellent, thank you!\n. Hmm.  This seems like a major change (necessitating going to version 3.x.x).  People will be depending on this behavior and I don't want to break it.  I'm with Torvalds on this one (Don't break user space).\n. Hello!  This is a great question - can you provide some sample code (how you're requiring the empty string)?  It'll help us a lot.\n. Yes, this is a bug, should be reverted.  Sorry about that.\n. Yes, this is WAI, and should be in the docs.  Nice catch.\nAs a sidenote, I don't have CS installed, so it's a lot easier if you submit bug reports in JS.\n. Can you provide some sample code which repros this?\n. Yes, file this against forever-sevice.  Thanks!\n. Can you provide an example?\n. @IvanGoncharov it'd help if you could summarize the why (not what) of this PR\n. This is a pretty big change - not sure if I want to make it at this point.  @zhiyelee ?\n. As I've stated elsewhere, current policy is to not accept PRs that only add a new service.\n. Tests would be great, :+1: otherwise\n. This should be default in my opinion - seems expected behavior to kill the whole process.\n. @DLMR IIRC, we're still supporting v0.8.  Dropping it would be a major version change.  See #431\n. In this case you'd use the double hyphen -- to end option parsing.\n. That's a general CLI thing not specific to commander\n. LGTM\n. :+1: \n. Parsing isn't for situations where you'd need async tasks but rather where you'd want to convert types and the like.\n. This is odd.  Open a PR?\n. Fixed in above PR, thanks @ignacioiglesias !\n. What would trigger this in win32?\n. What command are you passing into the CLI?\n. Very much in favor of fixing #404.  We'll need a legacy branch to keep track of 2.x fixes.\n. IIRC, in this situation, isn't the proper thing for increaseVerbosity to return zero when nothing's passed in?\n. Change looks good, can you not update the version in package.json just yet?\n. you're totally correct about versioning, just that it's up to the project maintainers to cut a release.  If you can, squash your changes down to one commit.  (good time to learn about git reset)\n. Ah, I'll just squash 'em.\n. Alright, all squished and joined in 4d421f9fd263b4035497893ab87fd111c4f3464f\nThanks!\n. Broken tests, can you fix those up?\n. @zhiyelee good checking - I'm ok with user-set as well.\n. Thanks for this!  Can you write a few tests showing this code works?\n. @zhiyelee what will break?  This looks good to me.\n. Hello!  The issue section is for reporting bugs with commander.js, not for technical help.  If you've got a question, your best bet is to ask on StackOverflow.  If you think you've found a bug, we can reopen this.\nAs to your first question, as said in the docs:\n\nWhen .command() is invoked with a description argument, no .action(callback) should be called to handle sub-commands, otherwise there will be an error. \n. The correct way to do this would be to put it in single quotes, as in your third example.  Otherwise the command line will think you're trying to pass in the result of calling .*, instead of literally that.\n. What would a typical use of server be?\n\nAre you looking for sub-sub-commands, or multiple commands, each with its own subcommand?\n. >  no one knows...\nthere's very much a difference\n\nSetting module.exports allows the database_module function to be called like a function when required. Simply setting exports wouldn't allow the function to be exported because node exports the object module.exports references.\n. Not bad but this is just a syntax change that doesn't add anything.  It'd help if you explained why this format is better over the current way (which is pretty standard for ES5 environments).\n. Not sure how we'd accomplish this - you want us to skip all params if there's a default subcommand?\n. My issue is what happens if the root program (app in this case) also has a -c option.\n. This will break a lot of things, and isn't really a core use case for commander.\n. Does the bug still happen if you put version in quotes?\n. Yup, definitely a bug on our side.\n. There is not, you'll need to define it each time.\n. This pretty drastically changes the code style of the project.  Thanks for taking the time to create this but I don't think we'll be merging it.\n. Nice catch, thanks!\n. I'm not quite ready to say this is a dupe of #471, as 'version' is somewhat internal, and you've added foo.\n. LGTM, thanks!\n. You either can have a function to convert things OR a default value, not both.\n. Open a PR for the exception case, I think that's our best bet.\n. I like this idea (we should be testing on all major versions at least), though wouldn't it be smart to point to 5 instead of node?\n. Alright, makes sense.  In either case we'll need to update the tests when there's a new major version but that's not too often.  Merged!\n. Oh hay guise!\n\nYup, looks great.\n. What's the purpose for these try/catch blocks?  These are tests, we'd want all exceptions to bubble up.\n. Yep, thanks\n. Heh - nice catch here\n. Yeah, I don't see a way around this either.\n. Keep the newline here\n. ",
    "mgenereu": "What if I want the argument missing messages and not the help?\n. I should leave an example.  Given this code:\njs\nprogram\n  .version('1.0.0')\n  .arguments('<abc> <def> <ghi>')\n  .parse(process.argv)\nmy experience is:\n$ program\n$ program first\n  error: missing required argument `def'\n$ program first second\n  error: missing required argument `ghi'\nI was expecting:\n$ program\n  error: missing required argument `abc'\n  error: missing required argument `def'\n  error: missing required argument `ghi'\n$ program\n  error: missing required argument `def'\n  error: missing required argument `ghi'\n$ program first second\n  error: missing required argument `ghi'\nHappy to make a pull request if this is anyone else's expected behavior.  It could also be activated by a flag.\n. ",
    "pedro93": "+1 for this\n. ",
    "lancedolan": "For posterity wondering specifically about the case where a wrong command is given, such as a case where a user gives a bunch of arguments but forgets the command itself, this still isn't handled in the latest commander and the user will get blank unhelpful output. \nHowever, the command docs provide a very easy to handle the case explicitly yourself:\n// error on unknown commands\nprogram.on('command:*', function () {\n  console.error('Invalid command: %s\\nSee --help for a list of available commands.', program.args.join(' '));\n  process.exit(1);\n});. ",
    "cliffano": "@dresende I think that behaviour is configurable in log4js.\nIIRC, if you don't use consoleAppender() (which is used by default) and only use fileAppender, then it won't override console.* .\n. +1\nAny chance of getting this pull request merged?\n. ",
    "hasenj": "This is what I get:\n$ npm install commander\nnpm info it worked if it ends with ok\nnpm info using npm@0.3.18\nnpm info using node@v0.5.2\nnpm WARN Not supported on node@v0.5.2 commander\nnpm ERR! commander@0.1.0 not compatible with this version of node/npm\nnpm ERR! Requires: {\"node\":\"0.4.x\"}\nnpm ERR! You have: {\"node\":\"v0.5.2\",\"npm\":\"0.3.18\"}\nnpm not ok\n. Apologies, just realized this is the same as #10\n. ",
    "chowey": "Can we please use Requires: {\"node\":\">= 0.4.1\"} or something?  Unless there is definite reason to believe it won't work in Node 0.5.x?\nRight now I cannot install jade with npm because jade has commander as a dependency, and I am using Node 0.5.x.\n. ",
    "jordansissel": "Two reasons, one certainly more valid and common than the other:\n- Long flag options are very explicit and readable. Short one require humans to look up \"What does -Z mean?\"\n- I've had programs in the past that had so many flags you'd run out of letters of the alphabet (caps included) several times over to cover all the flags (such programs used flags instead of config files, there were hundreds of flags)\nIn the first case (long flags are readable) I would prefer enforcing \"You will use the long option because it's readable\" at the code level by not exposing any short flags.\n. If the hack above (leading with comma, no short flag) stops working suddenly in the future due to your changes, no worries -  I'll just label all my current flags starting at -A going through the alphabet, I suppose, so I won't pretend that such a hack is a supported thing just yet ;)\n. I can send you a patch if you don't have time/energy. Lemme know :)\n. ",
    "felixge": "+1, I would also love long-only options. Use case: --version and -v, --verbose.\n. > maybe we should change the default to -V or now that we have the long opts thing just --version only. pretty common to use -v for verbose so that would be fine with me!\n+1 on changing the default to '--version' only. But I'd still like it to be configurable as suggested by this patch.\n--fg\n. Awesome, thanks a lot!\n. ",
    "dobesv": "To clarify the issue a bit more:\nUsing an option named 'prompt' or 'password' means that:\n1. if the user supplies the option, you can't use that method afterwards because it is replaced with a string value from the user.\n2. if you want to check if the option was provided (using 'password' in program or program.password != null), it always returns true\n. ",
    "itay": "My vote is to place the options in program.options - I think it makes it much clearer.\n. @visionmedia - any thoughts on this? I just ran into it in a program with multiple commands.\n. This is related to issue #27, and can probably be enhanced for issue #2 as well.\n. No problem. If you accept it, I'll try and get automated help for subcommands as well. Shouldn't be too hard.\n. I added another commit that adds help to subcommands, so you can now do:\n```\nOctavian:~/work/commander.js itay$ node examples/deploy exec --help\n  Examples:\n$ deploy exec sequential\n$ deploy exec async\n\nUsage: exec [options] \nOptions:\n-h, --help              output usage information\n-e, --exec_mode <mode>  Which exec mode to use\n\n```\nI also made it work with the custom help output hook that was already there. Also, this fixes a small bug with the previous commits.\n. Let me know if you need me to fix anything - and apologies if I mucked up the style :)\nItay\n. On a brand new checkout, I get the same behavior that you're seeing, which is what I maintained:\n```\nOctavian:~/work/commander2/examples itay$ node custom-help --help\n  Examples:\n$ custom-help --help\n$ custom-help -h\n\nUsage: custom-help [options]\nOptions:\n-h, --help     output usage information\n-V, --version  output the version number\n-f, --foo      enable some foo\n-b, --bar      enable some bar\n-B, --baz      enable some baz\n\n```\nThis also makes sense, because you have the following:\nexports.option('-h, --help', 'output usage information');\nexports.on('help', function(){\n  exports.emit('--help');\n  process.stdout.write(this.helpInformation());\n  process.exit(0);\n});\nSo the custom help that comes as a result of emitting '--help' will be before out output. So it seems that if it is broken, it was broken before my change :)\n. Hey TJ - hate to bug you, but anything I can do to help you out here? I actually need this functionality, and don't really want to have to maintain a whole fork for my projects :)\nThanks!\nItay\n. You changed the behavior in 7d1cac0:\nhttps://github.com/visionmedia/commander.js/commit/7d1cac068bdeba34274409925dd9454e124f510a\n. TJ, do you want me to update my commits to take into account your fix for the custom help order?\n. @donpark - this is probably my fault with my latest change. Would you mind pasting your definition of the \"*\" command? I'll try and figure out the fix and submit a pull request.\n. I think you might be right, but my change should retain this behavior. I'll have to try it and see what happens - sorry for breaking your thing!\n. ",
    "vanesyan": "Closed, outdated. Feel free to reopen.. Closed, outdated. Feel free to reopen.. Closed, outdated. Feel free to reopen.. You can just simply pass the value in quotes and should works as expected. Imho, it's bad idea to assume digits as value, rather than flags, some of linux programs use digits as flags.. Closed, answered. Feel free to reopen.. you can run --value '-42' and it should perfectly work.. Okay, I'll investigate. @tj can we close this one?. As a work around we can migrate to another event emitter, rather than standard one.. Answered in #643 . Yes, I think it's good idea to include default value in help message. But maybe we should write default all characters in low-case, IMO, otherwise it looks good to me. Need to resolve conflict and lets merge it.. Similar to #105, closed, keep your eyes on the issue.. Merged. closing in favor of #632 . @SomeKittens is right. Plus, IMHO it's unnecessary, we really can pass the result after parsing as always:\n```js\nconst result = program.parse(process.argv)\nfunc(result)\n. Let's close this one.. close in favor of #666 . @zhiyelee is it still necessary?. You can use `new commander.Command()` to instantiate a new Commander instance. Close for now.. Seems good to me. Can you please resolve conflict on top of master branch. Is it active yet? There is still integration test failures. Okay, feel free to open another one if necessary. It's unnecessary here, because of that fact, after using `parse` method, both `command` and `option` has no effect.. Any updates on the thread? Or we can safely close the pr?. I think api is consistent with what we have today. @ism you can just path commander instance after parse it.js\n...\ncommander.parse()\nfunc(commander)\n``. I'll close this one, nevertheless thanks for the prompt :). Use appropriated.namemethod, as described above. Close it.. Feel free to reopen the issue, if still persist.. Sorry, we trying to keep commander out of such stylistic things. Plus, the second goal of commander is to keep it zero dependencies package.. One of the option to make current commander version behave the same way is to define separated option and provide the that to your handler. I think the way you describe things should behave is a bit enormous and should be considered a bad way to design CLI IMHO. @zhiyelee what do you think?. LGTM. Yes, It actually should be documented. Feel free to send a pr :+1: . It seems, we trying to keep our readme file clear and free of such extensions. Sorry :). Unnecessary, a new command can be instantiated by usingnew Commander()`. Commander itself (main function) is an instance of Commander object.. Closed, seems the issue isn't directly related to commander. > @bitstrider can you explain what you mean by \"you never specified an env command/argument in your example\"\ndev command in the example above is defined without any argument i.e.:\nprogram.command('dev')\nSo it won't receive any env argument and the first is an options as intended. If the dev command\nwere defined like:\nprogram.command('dev <env>')\nthen, yes, it will receive options as the second argument and the first one will be equal to the value provided per dev.. See #914 for the solution. I have no idea how to write tests to cover the changes. friendly cc @zhiyelee @abetomo . It's seems something is on your side, our integration tests are passed, there a bunch of options registered that way and they are handled correctly.. Answered. Hello there! Sorry for make you waiting. Can you, please, resolve the comments in the review, thanks!. @zhiyelee can I merge this pull request, seems lgtm. Yes, it's definitely a good idea. We can support typings. It'll be awesome, if you provide a pull request. Imho, a bit unnecessary, plus not all tests are passed. Feel free to open a new pull request, if this one was closed incorrectly. I worry about affecting the existing programs that relies on the commander. It's breaking change. And another one concern is it really better, than allow user to order list of commands their way? . May be we should to involve @tj into the discussion as his is the very author of the package and I'd think he also should decide want to do with the project.. I'd also like to help out with maintaining the project. :). Awesome :) @vanesyan on npm too. Awesome!. A bunch of new maintainers been added, so close it for now. What I really dislike about pr, that it use timer with magic number of time out. Are there any other ways to handle it?. Sorry, my bad, miss understood the pr implementation, timers are in tests (watched on phone in the first time). It's error with access permission, can you, please, apply chmod +x on your executable.. Probably after #649 . Can you provide part of code, where you configure commander, as it's hard to say which one cause the error, from what exists.. Beside it, I'd also like to split current one big file into chunk files, IMHO it'll help us with future maintaining of the project itself.. Plus, I'm a huge fan of ECMAScript 2015+ and I'd like to rewrite some parts of the package to use it.. But, as the first step, we should review most of the issues and PRs and close that a bit outdated, etc.. Another one good iteration of the project IMHO will be add some tools like linting, etc.. friendly cc to @zhiyelee @abetomo . Yeah, we can accumulate whole of minor updates, patches and release under minor semver version update. Then starting refactoring and include a bunch of major updates, and finally introduce v3, I think.. But I'll be a bit busy for the next 2 weeks, summer session, work, etc. you know :). close in favor of #666 . Can you elaborate please. Commander.js is all about command line interface and has nothing similar with GUI nor ever will be.\nClose it as off topic.. Maybe we can also drop support for 0.10, 0.12 and I.js, as there're seem also deprecated.. Sorry, I meant to drop support for anything behind node.js version 4.0 as it's the only version from which nodejs is supported officially :). Cool. Lgtm, but @zhiyelee should review it, as a bunch of commits been accepted by him. It's seems okay. Let's merge it.. Can you please release npm tag, as I'm afk. Good. You can register action on setup that execute that 3 actions' handlers, e.g.:\n```js\nprogram\n  .command('lint')\n  .action(() => lint())\n.command('compile')\n  .action(() => compile())\n.command('deploy')\n  .action(() => deploy())\n.command('setup')\n  .action(() => {\n    lint()\n    compile()\n    deploy()\n  })\n``. My bad, misunderstood. Can you resolve the pr on top of master, please :). Sorry, mean rebase, mistyped :). Just worry about people that don't need typing for commander, they'll get extra deps.. I'm not too familiar with TypeScript, but what do other publishers do?. Sorry me, if it's a bit stupid question, but what do we want to include typings within package, when typings are already released in DefinitelyTyped for? :). Sorry me, but I haven't found such suggestion by TypeScript. Furthermore as I understand they heavily rely on@types` npm namespace, which from my understanding is referring to DefinitelyTyped.. Ok, sorry me again, but previously I was able to use Node.js api out of the box when used typescript last time in the past. But sometimes not so far, I tried it again and now only way to use node.js api was to install 'em from DefinitelyTypes.. Thanks :+1: . Cool, that was the plan.. Seems good to me. Shouldn't commands come first and options after em' (imho, I don't really convenient way)? Otherwise looks good to me. Makes sense\nOn Jul 3, 2017 1:32 PM, \"Valentin Trinqu\u00e9\" notifications@github.com wrote:\n\nI've used Git man pages as an example for the ordering. Also, in my\nopinion, the options applies directly to the executable such as verbosity,\nor any option to configure the execution. Then, the commands have\narguments which can be expressed as plain word list, delete or as\noption-like style -l, -d respectively.\nSome may say that is a matter of style / taste, but it makes sense to\nme. Also, since git sees it this way as well, it should make us confident\nabout this changes.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/652#issuecomment-312583268, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ARUtLwjZX6doxHdz_NMWoUSqwKaxhNBtks5sKKcNgaJpZM4OHnZD\n.\n. LGTM that way. As far as I understand the pr, it introduce only overrides of short option for help (e.g. -h), but --help is still non overredable?. BTW, I think it's breaking change, and we should come back here, when the next major release happen.. Yes, I will addressing this issue when we come to 3.0. Thank you :). Yep, @Flackus you are right, we should merge it in major release, but instead break compatibility in minor release. As things already done, we cannot rollback updates, but instead we can add notice to README.md about the breakage between 2.10 and 2.11 versions.. Yeah, we break compatibility in v2.11. * event renamed to command:*. Sorry for that.. see #659 for more details. @madjam002 this is a dup of #659.. Unfortunately we cannot push things back as 2.11 already released, and we cannot delete versions from npm. Plus things already done, no way to re-inverting wheels, sorry for that :). @abetomo @zhiyelee  Hey, I considering updating testing infra and I'd like to decide on testing framework as well, should we update sinon to the most current version, or should we switch to something like jest, ava, etc.?. Currently the branch contains only convertion of the codebase to es6 and separation of classes per file, everything working pretty well on Node.js 8+. The first thing we should recognize which minimal version of Node.js we support.. Also, the plan was to incrementally improve the codebase. Currently commander consists of set of hacks to support different cases IMHO, we should minimize such a things and canonize most of parts of commander.. Another one part of the plan was to implement critical futures people request for a long time, for instance long awaited future like control the flow of processing of required options, arguments.. Probably, we shouldn't merge this pr into master, rather we should create dev branch and merge all commits the we want to be landed into v3 there.. Yes, sure, do what ever you'd like to with it.. Do you mean about vertical space?. Isn't it better to make changes with commandHelp function directly?. Hello there! Really thanks for your interesting in project. While your feature is good, we'd prefer to keep commander's API small and consistent and sure easily to create high-level wrappers on top of it, means we are beside of opinionated decisions like this :-). Potentially breaking change, preserve until v3.0. We accidentally broke compatibility of commander v2 versions with the release of v2.10, sorry for this.\nEvents for commands/options were split by namespaces (e.i. option:NAME and command:NAME). Try to use command:* event name instead.. It's intended behavior, we accidentally broke  compatibility with release of v2.10, as I said before. . You can maintain an array of known commands and check if one of them, otherwise notify user.. Unfortunately, currently commander doesn't support properties/methods of Node.js' EventEmitter, plus those which it defines itself as an option/command. It's known issue and is misimplementation from the early ages of commander.. Duplication of #284, which is similar to #681, #105.\nClosed. Keep your eyes on #105 issue, thx. Duplication of #284, which is similar to #680, #105.\nClosed. Keep your eyes on #105 issue, thx. You can specify necessary help information using program.on('--help', () => { ... }) construction.. Thx for your time, we really appreciate it.\nWill close as not interested in add such functionality, commander cannot cover all the userland ideas.\nFeel free to reopen, if there's something more here :smile: . As I know, there're no current way to remove help command/option from the output. It added automatically by commander.js.. It's breaking change, and should be landed in v3.0, if landed. We've already accidentally broken commander compatibility in minor release once, and it brings us a bit of headache, so I'd like to preserve any potentially breaking changes.. Oh, sorry, now I see that there're no breaking changes, but I'm still not sure why this change should be landed?. But it's private method, and people should not relies on it, as privates are always maybe changed without any major bumps in breaking compatible way.. @abetomo hey, I'm no longer interesting in maintaining the project, you can do whatever you thing is right, without me requiring to approve the change, thx :). Merging this into the master for now. As soon as new release occurs the change will be landed :). Can you, please, test the code in previous versions of commander v2.10 and v2.9 and feedback it here, thx! We need to know was this regression introduced in newer version of commander, or exists in previous as well.. It's not about commander at all, it's about Node.js. use child_process.spawn method in the command handler. More about spawn https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options. Yes, we've discussed it before in #646 thread, and the @alan-agius4 said that it's common practice in the way to support TypeScript typing.. fixed by #709 . If there's no breaking change in the master since the last release, you can safely release it as I'm a bit busy for the next few months :). @abetomo . Aren't there any breaking changes?\n. @abetomo, you can merge commits yourself if you approve them, without asking me to approve too. :smile: . LGTM. Good catch. Thanks for helping us. We are really appreciate it :)\nPersonally, I'm against of adding a new feature for each user cases. I fills like a more specific problem, rather than common and can be implemented in userland.\n  . Oh, I understand your use case. But you can maintain constant list of commands, that are supported by program, and lookup for provided name there :)\n  . Generally this is good idea. Yes, I like the second form of control indentation (through numbers) more that the first one.. Hello there! We are appreciate your help, but files as extensions-less deliberately as bin files, are almost always goes without extension and for execution of the file response line started with shebang token (the most top line).. Thanks!. Yes, it's definitely a good idea, except that current in some parts of code we rely on poor null and undefined equality (e.g. thing == null -> thing === undefined || thing === null), we should be careful in such checks.. Good catch, thanks!. Thanks for the PR. But I'm against of such things, firstly it's looking a bit ugly in part with translation table in you example, IMHO, the second I'm against of all changes that can be done in the userland, it's better to keep core pretty minimal as much as we can.\n\nTo make your program behave the same through available API, just put noHelp: true to commands and options you'd like to hide from output and put appropriated handler on --help event.. I'm closing it for now. Feel free to re-open pr if you think that it was closed wrongly.. Weird error, Command actually extends EventEmitter, on this line. Does the error exist with commander using TypeScript other then the version (your current)?. Sorry for waiting so long. Curios, what will it looks like if we change it a bit and put implements instead of extends?. But I'd like to find a solution that both is correct and working to satisfy all needs (almost). So currently behavior is that commander actually extends EventEmitter, but does this in es5 manner, so TypeScript doesn't recognize it, I'd still like to allow users on TypeScript to use those APIs without headache, so make it visible in d.ts. . @avendiart can you make a pr, please?. Thanks!. Thanks. Yes, everything is ok for me, but cannot merge this until the next major bump as it's breaking change.. Thanks!. I think, we can unify it under the one example block above. Anyway, options with arguments have already been mentioned in the \"Option parsing\" paragraph. We also can put link to examples folder, somewhere at the top of README, so people can discover it easier.. Hello there I'm closing it as resolved, as there is no feedback by the author for long periods of time. Feel free to reopen it if problem still persists. Heh, when I approved the pr I test the output on several console programs on CLI and indeed all they printed extra line. But now I see that I forgot about the fact that I'd modified my bash console and had added extra line to PS1 on my own.\nNow I can confirm that no enough popular programs print extra newline at the end of help message, tested on docker, apt, git, bash, node.\nMay be we should revert the commit and release patch version of 2.17 as well as remove all mentions about help in documentation. . Hello there sorry for delay. You are pretty welcome to send pr to revert this change as I have no time to work on it. Thanks. Yes, sorry, you are correct.. Hello there, I'll look into it soon. If you talk about usage of </code> as starting quote mark and then <code>'</code> as closing quote mark, then it was made intentionally by the author of library.\n. For production purposes Node 8 as it's now on LTS. Previously Node 6 which will be out of LTS at April 2019.. Can you also bump on npm, please. LGTM. Thx. Can you also prefix messages witherroron  https://github.com/tj/commander.js/blob/master/index.js#L583 https://github.com/tj/commander.js/blob/master/index.js#L585 lines, please. Lets wait until #862 will be resolved, and can you please rebase after that so #864 also bundles into the release.. Thanks for the pr, but we are still supporting older versions of node.js, therefore and older npm versions that are still require--saveflag. Hello there! As I know there is no current options for this, for now. Hello there can you please elaborate on it, I'm not sure I have correctly understood you. @alan-agius4 can you please resolve it?. Thanks a lot. I'll close it as resolved, feel free to reopen it if you think the issue is closed incorrectly. Hello there! From which resource did you try to install the package?. I will close it as author resolves the issue itself. Feel free to reopen it if it was closed incorrectly. Thank for a pr, unfortunately, we cannot accept it this time, as it introduces a breaking change, will we come back to it once work on v3 will be started.. You can always append your own documentation part by subscribing to--helpevent emitted onprogram` like:\njs\nprogram.on('--help', () => {\n  console.log('x is blah-blah-blah');\n});\nSee more: https://github.com/tj/commander.js#custom-help. I'll close it as answered, feel free to reopen the issue if the answer is not satisfy you.. Hello there, sorry for me make you waiting so long. I've partially reviewed the per, average PR looks good, I'll try to cover another part of PR in review.\nAlso I worry about breaking changes, as now we reserve some flags which may be used in userland code, so maybe we can hide behind a flag in commander API.. @abetomo What do you thing about this change? Should we hide it explicitly behind the flag, or enable it once user defines rules for autocomplete?. Hello there! Can you please post code related to commander, so we find the root of problem quicker. Thanks!. Is issue resolved for you? Is it mistake in your code or maybe issue lays in commander?. You should be able to receive provided option as second argument of callback passed to Commander.action, e.g.:\n```js\nconst program = require('commander');\nprogram\n  .command('verify ')\n  .option('-r, --root ', 'Root of the channel')\n  .action(function (hash, options) {\n    // console.log('remove ' + dir )\n    console.log(options.root);\n    console.log(hash);\n  })\nprogram.parse(process.argv)\n```\nSee also corresponding test: https://github.com/tj/commander.js/blob/3b8e519f963f7a2cb66adb671f05c56cd68af6da/test/test.options.commands.js#L36\n. @abetomo\nWhat do you think about it?. @tj, can you, please, add @JohnRGee to the list of project collaborators. He shows high activity answering/resolving open issues. Friendly reminder @tj. @tj we are still waiting for you ;). Seems TJ is too busy right now. I've sent an email to him, still waiting.. Shouldn't we increase minor version instead of patch, because of \"Allow literal '--' to be passed-through as an argument\" feature?. So, if the method now accepts array of unknown options, that it should be named as unknownOptions etc.. We can inform about all unknown flags, instead of the first one.. So, if we change the function name, it'll be considered as breaking change, and should we deferred until the next major release.. Shouldn't this go in peerDependencies?. Callback takes a string as the first parameter.. Isn't it better to push just a name of ancestor to array (e.g. prefix.push(ancestor.name())) and then.... ...join here by space (' ') instead of empty string?. js\n[].join(' ') // => ''\nIsn't it?. Can you also convert this line as you did with previous one?. Can you please put it to own variable, for readability purpose. Can you please inline the module, we trying to keep commander.js dependencies-free. Yes, for consistency purpose.. @blair never type is incorrect for help function, it doesn't throw or failing to terminate.\nhttps://blog.mariusschulz.com/2016/11/18/typescript-2-0-the-never-type\n. Sorry, you're correct. help terminates process.. Does Windows support ANSI colors in terminal?. Ok then! Thank you!. Can you also remove \\n for EACCES error as you did it for ENOENT. Can you please inline the synchronous part of the readlink module; as module itself introduces an async module which is unnecessary for the commander and only introduce a ton of unused kb.. I worry here about breaking change if I understand correctly now reserved flags will be handled internally by commander and breaks users' code which use one/some of those options before.\n. Simply use Array.isArray(...) instead of user-defined helper. Maybe just inline the function in place where it's necessary?. Maybe we should better hide auto-completion feature behind the flag and set it to false by default?. and here. styling suggestion replace a = a + b with simply a += b. and here. ",
    "koush": "I tested it with the jade CLI.\nIt's one of the few changes necessary to get the Express 2.x branch working properly with node 0.5.x.\n. ",
    "raincole": "It works well for me now. I use commander.js 0.6.0 and node 0.7.4. \npassword: [enter 'foo']\nconfirm: [enter 'fooo']\npassword: foo\nconfirm:  fooo\npassword: [enter 'foo']\nconfirm: [enter 'foooo']\npassword: foo\nconfirm:  foooo\npassword: [enter 'fo']\nconfirm: [enter 'fo']\npassword: fo\nconfirm:  fo\nmatch!\nAll is well!\n. out of curiosity, why can \\u001B[1D\\u001B[K erase the last character? What keyword should I use to find it?\n. I see. Thank for your explanation!\n. ",
    "dvv": "Thanks!\n. ",
    "jhamlet": "Hmmm... wasn't aware of that.\nPerhaps a more robust solution would be to listen to the \"close\" event to exit the process, and send the information through the sream#end(string, encoding) method.\n. The docs for v0.4.11 and v0.5.9 don't mention anything about not calling drain or close.\nI'm sure it can happen in some edge cases, but it shouldn't happen when just printing out help text.\nThe way to do this would be to check the return value of write, and if false, wait for the drain event, otherwise exit immediately.\n. Meant \"The way to do ...\" => \"An other other way to do...\"\n. But wait, the \"--help\" event is supposed to allow others to print to process.stdout too, right?\nSo, we have to wait for those listeners to do their thing.\n. Checkout my latest commit: d014d00\nThe destroySoon method is supposed to allow the stream to close cleanly, after emptying anything in its write queue.\n. Looks like v0.6.1 wont let you close stdout directly. It seems to wait until the write queue is cleared now, before really exiting. The above commit 1fa5931 will handle older, as well as, more recent versions of node.\n. ",
    "evocateur": "I encountered this recently in a program with multiple commands and several options. My solution was a variant on the node-jshint workaround, which is functionally identical to this pull request. +1\n. ",
    "focusaurus": "+1\nIs this related to the fact that this small program hangs when done unless an explicit call to process.exit() is made? It's never been clear to me exactly why the program below won't terminate without an explicit process.exit(). Presumably there's an orphan callback listening somewhere but I'm not sure exactly where.\n```\n  var program = require(\"commander\");\nprogram.choose([\"one\", \"two\"], 1, function(index, choice) {\n    return console.log(choice);\n  });\n```\n. I CAN HAZ 0.5.1 FOR THIS?\n. \\o/\nthanks\n. OK, issue is process.stdin does not emit keypress events in node 0.8.8. Will submit pull request that uses the keypress module.\n. Send a pull request: https://github.com/visionmedia/commander.js/pull/87\n. done\n. ",
    "jayarjo": "How one is supposed to access those options later? They do not seem to make it into the final object as properties.\n. That would be great indeed.\n. Ok, I see that there was an effort to fulfill this already. #27\n. ",
    "millermedeiros": "@jayarjo the options are passed to the command action callback (as last argument). this feature was merged almost 1 year ago.\n. this fix isn't optimal since it doesn't check if return is from the proper type. see pull request #101 for a different implementation that solves the issue.\n. Just a heads up about stdin. I usually make my cli accept a file path as an input or stdin and I toggle the behavior after checking if the program have any args or not:\n``` js\nprogram\n  .option('-o, --output ', 'output path')\n  .parse(process.argv);\nif ( program.args.length ) {\n  normalBehavior( program );\n} else {\n   processStdIn( program );\n}\n```\nUnsure about how to implement this kind of check with a fluent interface.\nIt gets trickier if the program have multiple commands since they will be executed before reading stdin (they will be executed during program.parse()). Maybe it would be useful to have a way to toggle the parse() behavior to avoid calling the commands automatically and add a new method to execute the commands.\n. In case anyone need it: https://npmjs.org/package/stdin\n. Any other info about this feature request? Are you thinking about multiple entry-points (separate files), or do you want to keep everything inside same file? (It wasn't clear on the initial comment). Any proposed API for that?\nPS: I'm going through the open issues and trying to implement whatever I think that might be useful in the future. I almost started my own options/command parser today but commander have almost everything I want/need. Cheers.\n. @visionmedia maybe a solution for the future is to allow objects on the .option() calls, like:\njs\nprogram\n  .option({\n    flags : '-f, --foo <file>',\n    description : 'Foo option rocks',\n    required : true,\n    // specify that this option depends on other ones\n    depends : '--bar, --ipsum',\n    validate : function(value, program){\n      // check if supplied argument is valid\n      return value.indexOf('.') !== -1;\n    }\n  });\nthis would increase the flexibility and group all the logic related to arguments parsing/validation.\n. the Travis build failed because of #101 (promptForDate test) I fixed it as a separate commit so it could be merged/rejected individually.\n. closing it since I pushed the wrong branch (didn't realized I was on my master branch). sorry for inconvenience. opened new pull request on #102\n. ",
    "ghost": "Seems that I have to use this one:\nprocess.stdin.destroy() at the end of each callback.\nCan't it be done more elegant by passing a callback just like in express so I just do: cmd.end() or something :)\nFeels hacky to have to use process.stdin.destroy();\n. It worked.\nBut I don't get why you would want a new line as default. That forces everyone to use trim(). Couldn't this be taken care of behind the scenes?\nIn this way I don't have to have code like this:\nprogram.prompt \"name: \", (name) ->\n  name = name.trim()\n  program.prompt \"description: \", (file) ->\n    file = file.trim()\n    program.prompt \"homepage: (*none*) \", (homepage = \"0.0.1\") ->\n      homepage = homepage.trim()\n      program.prompt \"username: (*github*) \", (username = \"0.0.1\") ->\n        username = username.trim()\n        program.prompt \"author: \", (author) ->\n          author = author.trim()\n          program.prompt \"email: \", (email) ->\n            email = email.trim()\n            program.prompt \"url: \", (url) ->\n. wiiiii!\n. moved to?\n. @zhiyelee  Any chance you may reconsider this? I would gladly work on this.\n. @rdodev Thanks for letting me know! \nWhat bin list is that?\n. Where is this in the commander.js documentation? I didn't know I had something extra to package.json to make this work.\n. Ah, I see. I thought I had to do something special to make commander work. We are talking about declaring your app executables under bin. Cool.\n. For me:\n``` js\nprogram.version(pkg.version)\n  .command(\"clean\", \"...\")\n   // ...\n  .parse(process.argv)\nif (cli.args.length < 1) {\n  program.help()\n} else {\n  if (!program._execs[program.args[0]]) {\n    // unknown option \n  }\n}\n``\n. Even though this issue is old I stumbled upon a similar issue where I am having some trouble. I am usinginquirerandinquirer-command-promptto create an interactive CLI application and wanted to usecommanderto parse options by continuously callingparse(userInput)` in my CLI prompt.\nUnfortunately though, when I run parse for a command that is missing a required argument the application writes error: missing required argument 'cmd' to the console and then invokes process.exit which exits my own application!\n@tj I'd like to suggest a change wherein all calls to process.exit are replaced by an overridable function that can be freely configured. In my case I would replace it with an empty function in order to display status messages but prevent exiting.. Upvoting this as well, just stumbled into this issue myself.. There is currently an issue where the command still gets executed even if it's not supposed to, I will be trying to fix this.. I can't seem to get it to work since everytime I change something I notice another part of your code breaking. I am considering to do a different setup for the time being.. IIRC you may retrieve them using program.optionB and program.optionC.. ",
    "marcelduran": "thanks @visionmedia for fixing promptly, just updated to 0.5.0 and it's working as expected.\n. Looks like I was using node v0.4.12 by the time I tested it, upgrading to v0.8.8 no longer causes this issue.\nClosing...\n. ",
    "donpark": "Here you go\nhttp://bit.ly/sOwRXv\ncommand and action calls are at line 52 and 53.\nArgument processing loop is at line 67.\n. I just checked your changes which shows that mysterious Object I saw as argument to action callback is the options.\nUnless I am mistaken, arguments to action callback are first arg, followed by rest of ARGV remaining, which leaves no room for options. Hmm.\n. I know. I was going to add more features but ran out of time so it ended up there, using a feature unnecessarily. Sue me.\nAnyway, I don't mind changing my code if cmd, options is the way of the future.\n. ",
    "psugihara": "This is what the docs say:\nWhen the name is \"*\" an un-matched command\nwill be passed as the first arg, followed by\nthe rest of ARGV remaining.\nBut [fix #33] appends self to the args.\n. ",
    "lennart": "Um, I just updated my bugfix branch for this issue to be working on top of version 1.0.1\nyou can take a look at the changes here\nEssentially this just makes sure, that\n- the options will always be appended to the given args\ninstead of the current behavior\n- overwriting the second argument\n(which is the described problem on variadic arguments)\nI could not fully run the test suite as master is not passing (see travis status maybe this will be sorted out soon)\nApart from that I am currently using this modification on several CLIs which do both, variadic commands and normal ones and haven't experienced any problems.\nSomeone that knows why the original code was like it was should be taking a look at it first, though!\nConcerning @ptrsghr comment, yes the docs should be updated to reflect that in any case. \nRegards,\nLennart\n. ",
    "georgesnelling": "Any decision on fixing this?  I hit it when I tried to create an option named --version which failed in a very weird way because conflicted with an internal method.  Seems pretty bad to have these namespaces conflict.  And creating an option  named --version seems like a pretty common case, as are several others.  No opinion about this particular fix, but would like to see the namespaces separated somehow.  Thanks TJ. \n. Headsmack!  I've been using it so long that I didn't bother reading the docs when I hit the problem, but went straight to issues.  It does fail in a rather confusing way if you miss that nice feature, but that's a corner case.  Thanks for all your work.  -g\n. Played with this a bit more.  Aesthetically, shouldn't the module throw if the user enters an option that is reserved?\n. ",
    "DukeyToo": "Hmm, this pull request looks a little screwed up.  I'm gonna close, but if you want this change let me know and I'll try again.\n. ",
    "DaAwesomeP": "Is it still not possible to have multiple arguments to a command?\n. ",
    "remy": "I ended up replicating the code from the outputHelpIfNecessary function:\nprocess.stdout.write(cmd.helpInformation());\n  cmd.emit('--help');\n  process.exit(0);\nWould be useful if this was exposed I think.\n. ",
    "grahamb": "+1 for this. It would need to handle commands as well; I adapted @remy's code by calling program.commands[n].helpInformation()\nif (program.args.length == 1) {\n    process.stdout.write(program.commands[0].helpInformation());\n    program.emit('--help');\n    process.exit(1);\n}\n. ",
    "sandro-pasquali": "Fair enough. I suppose I always try to shave, since how many \"irrelevant\" individual optimizations does it take to manifest total relevance across a codebase? Habits die hard :)\n. ",
    "Grigore147": "So what about an merge with last commit wich does what you described in preview comment??\n. Did anyone work on this? Would be great to have it working like this.\n. Hmm, sorry but I do not understand what you mean with this.\nHow this will allow something for ex.: app module install auth. So we could get it like so:\nApp.command('module install [name]')\n  .description('install application module')\n  .action(function(name) {\n     //...\n  });\n. +1\n. ",
    "lightsofapollo": "As of the latest npm version 0.5.2 this change is not included.\nAny idea when you plan to push this feature?\n. ",
    "wlepinski": "Same question here.\n. ",
    "kenperkins": "I'm using node-async for these problems. Kind of a standard nested callbacks vs control-flow question.\n. ",
    "fhellwig": "I totally agree. Try the ls command with an invalid option:\n$ ls -X\nls: illegal option -- X\nusage: ls [-ABCFGHLOPRSTUWabcdefghiklmnopqrstuwx1] [file ...]\nSeems like a reasonable requirement for commander.\n. ",
    "kittens": "+1\nHaving an asterisks at the end of the first option argument would be a good mandatory/required indicator.\n. ",
    "kilianc": "+1\n. Also, when a required parameter is missing, we should show the usage after the warning.\n. ",
    "Gurpartap": "+1\n. ",
    "ravi": "+1\n. @visionmedia do you mean to say that '--foo ' already implies that '--foo' is a required arg? Also, what about command line args that are flags (and so do not have a value)? I have a feeling I am misunderstanding your response. Can you explain?\n. ",
    "Morriz": "+1\n. ",
    "farzher": "+1\n. Why? !program.args.length makes more sense.\n. +1 I was wanting to add this.\n. ",
    "klyngbaek": "+1\n. ",
    "johngeorgewright": "+1\n. ",
    "danse": "If i get this correctly, there is not a way to have mandatory command line arguments still. This seems pretty important, especially given how devastating undefined values can be in a Javascript program\n. ",
    "mralexgray": "+1, why was this closed?\n. ",
    "marcelofarias": "Submitted https://github.com/tj/commander.js/pull/462. Mentioned here: https://github.com/tj/commander.js/issues/230.\n. My 2 cents: https://github.com/tj/commander.js/pull/462\n. Isn't it what's already implied by <> like in \"-r \"? I mean, does it make sense to mark an option as  and allow the user to not supply it at all?\n. ",
    "axelpale": "+1, but see the docs about how to solve. ",
    "fegemo": "+1 to this\n. ",
    "digitalsadhu": "+1\n. ",
    "hb20007": "It would also be nice to be able to override error messages, e.g., for custom formatting of messages like error: missing required argument 'name'.. This would be a useful feature for the CLI I'm working on. Currently, I'm using a variadic argument to capture all arguments as an array and then checking if the array length is what I expect.. ",
    "jprichardson": "Agreed, I'd love this.\n. ",
    "jgallen23": "+1\n. ",
    "kimmobrunfeldt": "For others finding this issue: you know where the package.json is in your project, so you can just do:\njavascript\nprogram\n    .version(require('./package.json').version)\n. Why wasn't this merged? Currently long descriptions are hard to read.\n. I would very much like to have this feature\n. ",
    "tombell": "Seems I had a hubot.coffee in a couple directories above that was screwing it up.\n. ",
    "tedeh": "You can do that, all arguments are available as an array in program.args.\n. ",
    "gampleman": "Well I got pretty weird output doing that (actually looks like a bug):\n```\nprogram\n  .command(\"foo [bar...]\")\n  .action(function() {\n    console.log(program.args)\n  });\n$ program foo bar baz gloo\n\n[ 'bar',\n  { commands: [],\n    options: [],\n    args: [ [Object] ],\n    name: 'foo',\n    parent: \n     { commands: [Object],\n       options: [Object],\n       args: [Circular],\n       name: 'program',\n       Command: [Function: Command],\n       Option: [Function: Option],\n       _version: '1.1.0',\n       _events: [Object],\n       rawArgs: [Object] } },\n  'gloo' ]\n```\n\nSeems like baz is replaces by something that looks like a commander object.\n. ",
    "alejonext": "+1\n. +1\n. +1\n. Yeah!!! Yeah!!! +1\n. Parse for what? Because if we make commands friendly, touch know that?\n. You can change the name and the process name\njs\nprocess.title = 'my-favorite-process' ;  // Name the process\nprogram.name = 'my-favorite-command'; // Name the comand\nprogram.version( '1.2.3' );\nName\nconsole\n$ my-favorite-command --help \n      Usage: my-favorite-command [options]\n... bla\nThe process\nconsole\n$ ps -A\n  PID TTY          TIME CMD\n24852 pts/1  00:00:00 my-favorite-process\n. ???????????????\n. ",
    "scinos": "+1. This is a must to be able to do things like\n$ program --files myFiles/*\n. How is the pull request https://github.com/tj/commander.js/pull/277 different than https://github.com/tj/commander.js/pull/103, or the solution proposed by @joshacheson here: https://github.com/joshacheson/commander.js/commit/6534da626fa254b7b87d88a5460cd7eacee0bf58 ?\nIMHO, we need any of the solutions (I don't care which one) integrated with command.js. \n. +1\n. ",
    "n1cholasv": "I just encountered this. 2nd arg is overwritten with the program object.\ne.g. a simple program\nprogram\n  .command('load [file]')\n  .description('load data file')\n  .action(function(file){\n...\n}\nThen running this:\nmyscript load file*   # 3 files file1, file2. file3\nGenerates:\nprogram.args[0] is file1\nprogram.args[1] is the program object\nprogram.args[2] is file3\nfile2 is not in program.args, but still found in rawArgs.\n. +1\nJust hit the issue with program.args overwriting the second arg with what looks like the program object.\ne.g.\nprogram\n  .command('load [file]')\n  .description('load data file')\n  .action(function(file){\n...\n}\nThe running this:\nmyscript load file*   # 3 files file1, file2. file3\nGenerates:\nprogram.args[0] is file1\nprogram.args[1] is the program object\nprogram.args[2] is file3\nfile2 is overwritten (but still found in rawArgs).\n. ",
    "joshacheson": "This behaviour is caused by line 247 in index.js (the overwriting of your 2nd argument).\nThe reason is because you're specifying 1 mandatory argument, and unfortunately the code at line 247 of index.js basically states \"If we have n expected arguments (as opposed to no expected arguments), let's put our options (a reference to self, really) at the n index of the arguments array\".\nThe way to solve this would be to either A) fork the library and remove that code for your own specific purpose or B) augment the existing arguments parser with a new syntax to know when variadic arguments are expected (maybe recognizing a pattern like \"[*...]\" where asterisk is any text. Then, if variadic arguments are known to exist the code at 247 (and in that area) could be changed to act accordingly.\nThe code that exists now might not seem to make sense, but it does in a case where you are expecting 3 arguments and the user only enters 1. With the way the code is now, where the options is specifically set to args[self._args.length], options should arrive at the expected argument index in your action callback.\nBy this I mean If you have a command like \"dosomething   \" (so we have 3 expected arguments) and your action callback therefor looks something like \nfunction(arg1, arg2, arg3, options){\n  //this is your action callback\n}\nwith the existing code your options value will always come in the expected position, regardless of whether or not the user enters the intended amount of arguments.\nIt strikes me that a robust solution to this might be difficult... and a less robust solution to this might involve making concessions in quality.\nAnyways, I'm gonna think about this when I have more spare time and maybe do a pull request. I've already got a forked copy of this repo with a change I intend to do a pull request for when I have the time.\nedit: I'm going to make a note here (for myself or anyone else who might want to implement this feature) that as well as text parsing to recognize variadic arguments, the best thing to do is probably to store the n + 1 ... m (where n is the number of required non-variadic arguments and m is the total length of the arguments array) values in an array. this would mean a command with description\n\"dosomething   [FILES...]\"\nwould call the action callback like so\n(function(command, someotherarg, files, options){\n  console.log(command) //whatever was passed in the first position\n  console.log(someotherarg) // whatever was passed in the second position\n  console.log(files) //an array containing every remaining passed argument\n  console.log(options) //the this/self object (which contains options)\n});\n. I've augmented my own fork of commander.js to offer a means of having variadic arguments.\nBasically if the last argument in a command declaration is something like this\nprogram.command(\"somecommand <arg1> <arg2> <arg3> [FILES...]\"\n(Where 'FILES' can be replaced by any text) the last argument will be interpreted to be variadic. What this means for someone parsing variadic arguments is that their .action() callback will receive an array of passed parameters at the same parameter index of the declared variadic argument. In plain english this means that if the variadic argument was the 4th declared argument in your command declaration (as it is in the exmaple above) it will be available at the 4th position in your action callback REGARDLESS of the actual number of arguments passed to your command (for instance if a user omits optional arguments that might make things unpredictable). So the action callback for the above command would be\n.action(function(arg1, arg2, arg3, files, options){\n  console.log(files instanceof Array) //true in all cases, regardless of number of passed arguments\n});\nUnfortunately my own fork of commander.js contains augmentations other than variadic arguments, so I can't just submit a pull request for this change on its own simply. I intend to isolate this feature in a new fork and put together a proper pull request (with tests of course). That'll have to wait a bit though as I'm swamped, I just managed to find the time to develop this feature while riding the bus :)\nI'm only posting this comment here in case someone comes across it and thinsk there is an issue with the feature i'm proposing, in which case I'm very much open to comments/criticisms.\n. ",
    "whitlockjc": "I am having an issue with this as well.  I was able to work around it using this:\n``` javascript\n!/usr/bin/env node\n'use strict';\nvar program = require('commander');\nprogram\n  .version('1.0');\nprogram\n//   .command('info  [optionalArgs...]')\n  .command('info')\n  .usage(' [optionalArgs...]')\n  .description('Display validation results for the Swagger document(s)')\n  .action(function () {\n    console.log(program.args);\n  });\nprogram.parse(process.argv);\n```\nI think it's time this gets fixed, time to fork and patch I guess.  In the meantime, use the approach above if you're running into this issue.\n. There's really two problems here:\n- Supporting variadic arguments officially\n- The assumption here that you can just blindly erase an argument\nIs .args suppose to be only the known arguments?  If so, I can see the second bullet point being moot but I do think if you stick to that, you should probably remove all array entries after the last expected argument so you don't end up with mixed arguments as detailed above.\n. If any of you have a minute, it would be great to get some eyes on the pull request above.  This is a very painful bug and this commit fixes the issue.\n. I didn't know about #103, this was the first thing I found and since it was still open, I came here.  To answer your question, while our approaches are different, there are a few things I don't see the linked commit/PR handling similarly to me:\nVariadic Argument Location\nIt seems the linked commit/PR will blindly allow something like this: .command('mycommand <variadicArg...> [optionalArg]').  The problem here is that since variadicArg is not the last argument, it will work the same as it does now.  My code treats this as an error and will alert you to the problem.\nArgument Naming\n(Minor nit since these values are not technically exposed.)\nThis is probably a minor nit but when it comes to the argument names, the ... is not part of the argument name and I handle that while the naming in the linked commit/PR doesn't.  So in my code self._args[1].name === 'variadicArg' while in the linked commit/PR, it would be self._args[1].name === 'variadicArg...'.\nBoth approaches will likely work and neither are likely perfect.  If I can help further, let me know.\n. I can describe this as I just got bitten by it.  Here is a simple example:\n``` javascript\nvar program = require('commander');\nprogram\n  .version(pkg.version);\nprogram\n  .command('info ')\n  .description('display information')\n  .option('-C, --no-color', 'turn off color output')\n  .action(function (version) {\n    console.log(this.color);\n  });\n```\nThe problem is I would expect this.color to be true when invoked via myapp info but it is undefined.  The reason for this is the option parser is using the options from the global program, not the command.  Here is an example of what I have to do to get this to work:\n``` javascript\nvar program = require('commander');\nprogram\n  .option('-C, --no-color', 'turn off color output')\n  .version(pkg.version);\nprogram\n  .command('info ')\n  .description('display information')\n  .action(function (version) {\n    console.log(this.color);\n  });\n```\nWhat's interesting is that the --help output is right.  Maybe I'll dig around and see how to fix this.  I know it's blocking me right now.\n. I made sure to use existing convention for style/error handling/...\n. Of course.\n. Do you have anything specific in mind?  Want an example in the README.md, update the annotated source, both?\n. Done.  I amended the commit to avoid you having multiple entries in your Git log.  Also, the examples are as convoluted as the others but I tried to make sure to explain the important parts:\n- Variadic arguments are only supported for the last argument\n- Variadic arguments are an Array in program.args and the appropriate argument in your action\nPlease let me know if I can do more.\n. I have updated the PR with the review feedback, making sure to adhere to existing conventions.  I hope I didn't overlook anything else but if I did, let me know and I'll get it sorted.\n. Unix tools puts the ellipsis after the variable name for variadic arguments and since this library is for building command line interfaces, adhering to the Unix approach makes most sense for me.\n. That's what open source is about.  If I can help further, let me know.\n. It wasn't on purpose, thank Atom.io.  I didn't even catch this when reviewing the diff.  ;)\n. ",
    "sebastiendb": "If i'm not wrong, it's the ascii code to move the cursor one position to left (\\u001B[1D) and erase from cursor position to right (\\u001B[K).\nI don't have the list url with me, but i can post it at the end of the day.\n. I used this link as reference : http://ascii-table.com/ansi-escape-sequences-vt-100.php\n. Good idea, i will change this.\n. Just made an update to handle this and merge with 0.6.1\n. ",
    "JamesMGreene": "@visionmedia TJ, any chance of verifying this, merging it, and publishing to NPM? ;) <3\n. ",
    "Imperiopolis": "+1 This would be great.\n. ",
    "abread": "+1 I need this so much! It's so annoying to not be able to delete what you've just typed\n. ",
    "addisonj": "+1 on this.\nI always forgot to update my version numbers\n. Agreed that this is strange behavior... \nThis breaks the principle of least astonishment pretty hard. Seems like it would be much nicer to move that behind a third argument to command.\nPerhaps:\nJavaScript\nprogram('command', 'desc', {gitStyle: true}, function(){})\nThat said, with a bit of digging into the code, I was able to do what I want by doing:\nJavaScript\nvar subCommand = program.command('stuff')\nsubCommand.description('add this here')\nsubCommand.action(function() {..})\nand also added a cleaner help action (which magically disappears when you aren't using git style subcommands)\nJavaScript\nvar commands = {}\ncommands[commandName] = subCommand\nprogram.command('help <commandName>').action(function(name) {\n  commands[name].outputHelp()\n})\nHopefully that helps someone.\n. ",
    "karthikv": "@visionmedia @orthlieb This code doesn't work when a boolean option is placed in between two required arguments. Pull request #75 is a more comprehensive solution to this problem that takes care of this case. To see the issue, consider the following command:\n``` javascript\n!/usr/bin/env node\nvar program = require('commander');\nprogram.command('greet  ')\n  .option('-e, --example', 'Example boolean option')\n  .action(function(firstName, lastName, env) {\n    console.log('Hello ' + firstName + ' ' + lastName);\n  });\nprogram.parse(process.argv);\n```\nWhen this is run normally, everything seems to work fine:\nbash\n$ ./cmd.js greet -e john doe\nHello john doe\nBut when this is run with the boolean option -e in-between <firstName> and <lastName>, we get:\nbash\n$ ./cmd.js greet john -e doe\nHello doe john\nwhich is incorrect. This inversion of arguments occurs because the parsed argument \"doe\" is inserted prior to \"john\" incorrectly. You cannot assume that leftover parsed arguments from options always go before other arguments. Instead, the position of each parsed argument needs to be tracked, and then these arguments must be reinserted in the order in which they were specified. This problem is solved in pull request #75, in which I took this case into account.\n. I'm uncertain if you already saw the thread for issue #56, which tries to solve this same problem, but the solution that was integrated there doesn't work in all cases. See my comment for more information.\nOn another note, I limited this pull request to just solving the parameter issue and got rid of the test fix. The latter was just a minor bug anyway; let me know if you'd like another pull request for that.\n. ",
    "orthlieb": "Thanks!\n. ",
    "tanepiper": "+1 on this, currently when you type an invalid command or typo commander fails silently /cc @visionmedia \n. ",
    "dignifiedquire": "+1 Would be great to remove this boilerplate\n. The reason for that is that these switches are used to overwrite a configuration file. Depending on what is in the configuration file we need to be able to turn the option on or off.\n. What about the following\njs\n.option('--auto-watch', 'Description')\ngenerates two options, one --auto-watch and one --no-auto-watch with the expected behaviour. \n(Maybe some flag here to indicate that one wants the --no option to be generated.)\nAnd if one uses \njs\n.option('--no-auto-watch', 'Description')\nalone it just behaves as it does right now.\n. Oh sorry. Never noticed that. Thanks for the explanation.\n. No. I thought that it would be enough to list only the entry point and this would proxy the commands to the executables. Is there a specific way I need to list them so that commander can use them?\n. Yes that makes totally sense. Will close this but there should be probably some docs so people in future will know how to use this great feature. (The support of subcommands is one of the main reason why we are going to switch from optimist to commander). \n. ",
    "joliss": "@visionmedia For CLI apps that require one of several commands, do you have a preferred way to handle app (no args) and app asdfafdsjka? Both I think should print usage information (or an error message) and exit with non-zero exit code.\nIn other words, given that it's not in commander, is there a nice code pattern for this use case?\n. ",
    "Palisand": "I find that for git-style commands,\njavascript\n!program.commands.map(cmd => cmd._name).includes(program.args[0]) && program.help();\nworks fine for the root command, while\njavascript\n['string', 'undefined'].includes(typeof program.args[0]) && program.help();\nworks just as well for sub commands.. ",
    "leeola": "Completely agree. It's driving me a bit mad too, because my program uses stderr, and i am trying to use Commander, but failing because i can't make it work the same as the rest of my program.\n. @visionmedia Did you have any thoughts on this? Would you accept a PR making STDERR usage optional?\n. I would have to agree with @visionmedia \nI couldn't really think of any good way, my main \"issue\" here was just to get some feedback on if this is a builtin feature or not. It sounds like not, so your best option is to use whichever method you prefer (string, comma split, etc)\nI'm going to close this unless @visionmedia wants to actually implement native support for it (which may be overkill for such a fringe case)\n. ",
    "zdwalter": "+1\n. $ npm install commander\nnpm http GET https://registry.npmjs.org/commander\nnpm ERR! Unsupported\nnpm ERR! Not compatible with your version of node/npm: commander@0.5.2\nnpm ERR! Required: {\"node\":\">= 0.4.x < 0.8.0\"}\nnpm ERR! Actual:   {\"npm\":\"1.1.21\",\"node\":\"0.8.1\"}\nnpm ERR! \nnpm ERR! System Darwin 11.4.0\nnpm ERR! command \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\" \"commander\"\nnpm ERR! cwd /private/tmp\nnpm ERR! node -v v0.8.1\nnpm ERR! npm -v 1.1.21\nnpm ERR! code ENOTSUP\nnpm ERR! message Unsupported\nnpm ERR! errno {}\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /private/tmp/npm-debug.log\nnpm not ok\n. ",
    "danmilon": "Bumped on this also.\nHere: https://github.com/visionmedia/commander.js/commit/672c7d01d8382257226d67c39c6e1002c881d95f#L11R188\njavascript\nif ('-' == arg[0]) return this.optionMissingArgument(option, arg)\nIt throws because it treads the negative number as another command line argument.\n@visionmedia How should this be fixed?\n. They need to be escaped\n$ node -p --eval 'process.argv' script --value='-10' --value2=\\'-10\\'\n[ 'node', 'script', '--value=-10', '--value2=\\'-10\\'' ]\n. ",
    "motin": "Or you can (at least in the interim) detect if the value is quoted. At least --value='-10' ought to work (does not today)\n. ",
    "davidcl64": "I've gotten around this locally by adding the following:\n// see http://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\nand adding the following checks:\nin Command.prototype.normalize:\nif (arg.length > 1 && '-' == arg[0] && '-' != arg[1] && !isNumber(arg) ) {\nin Command.prototype.parseOptions:\nif ('-' == arg[0] && !isNumber(arg)) return this.optionMissingArgument(option, arg);\nand:\nif (argv[i+1] && ('-' != argv[i+1][0] || isNumber(argv[i+1]))) {\n. ",
    "BrandonE": "I have encountered an edge case for the provided solution.\nnode something.js --value=-10\nIt is valid for an equal sign to be provided. Because the minus is not in the first position of the argument, this fix won't work. Further:\nnode something.js --value='-Minus'\nString values that start with a leading minus fail as well.\n. ",
    "lucasfcosta": "Is this going to be fixed?\n. ",
    "Christilut": "Also encountered this issue, working around it by doing: -t \\'-123\\' which results in the value being '-123' so after removing the first and last quote, its all good.\n. ",
    "shotamatsuda": "Escaping a leading space also seems to work around this issue with less side effects: -t \\ -123. ",
    "kachkaev": "--value \\ -42 works indeed, but neither of --value=-42, --value=\"-42\" or --value='-42' do. The options that do not work at the moment look more intuitive so probably need to be implemented at some point. Maybe PR https://github.com/tj/commander.js/pull/583 will help?. Looks like it does not both for --value '-42' and --value \"-42\"\ncommander@2.9.0. @mcclure have you found a workaround for this? I agree that not throwing when invalid arguments or options are given can be very dangerous. It's so easy to just type a wrong command and accidentally delete something important!\n. ",
    "Simplonium": "Is this 2 year old issue going to be fixed? Many command-line interfaces use negative numbers as arguments.. ",
    "the-townsend": "Hi \nWe're really pleased with commander.js and are using in our project - Thank you! It would be great if we could hand it negative numbers if someone has the capacity to make that change; our project has a messy work around at the moment. Thanks again.  . ",
    "ryancole": "i agree. i understand why it's a necessary option, but i think i've only ever seen it be helpful in 1 module, before. (this one) that module was a hackish module to begin with, though. all other times it has just caused npm install issues. for me. :p\n. ",
    "balupton": "Possibly related to #1\n. Seems that choose didn't make it into co-prompt, why is that? if one were to do a pull request to add it, would that make it in?\n. Found https://npmjs.org/package/promptly - includes prompt, confirm, choose, and password - as well as extra things like validators\n. ",
    "serby": "+1 this would be handy\n. ",
    "goto100": "this is useful, like \"git remote\". \"git remote add\", \"git remote rm\"\n. ",
    "vjpr": "+1\nI would like to be able to write app test server app test all app server, etc.\n. +1\n. +1\n. +1\n. The Traceur library modifies commander.js to prevent parsing options after --.\nSee here: https://code.google.com/p/traceur-compiler/source/browse/src/node/command.js?spec=svnd3551bba9390083672bd0c4bce32313ef22a8853&r=d3551bba9390083672bd0c4bce32313ef22a8853\n. ",
    "pvencill": "+1\n. ",
    "shannonmoeller": "+1 (bump)\n. ",
    "davidglivar": "+1\n. +1\n. ",
    "floatdrop": "+1\n. ",
    "tandrewnichols": "Um, this is done. I opened a PR for this like 3 months ago: #210 \n. Oh, I see #64 is done as well. One of them should be merged for sure.\n. Do you prefer this interface or the one in #64? I'm happy to update if this will actually be used.\n. Update: I'm not missing something. There's even a comment in the code that says \"reassign.\" I made a change that allows passing the same option more than once and noticed that it breaks (at least) one other test. Is that REALLY the expected behavior? Most bash tools allow it (e.g. grep --exclude=pattern1 --exclude=pattern2). Is there any reason I shouldn't make that the default behavior? At the very least, I would like a way to tell commander to allow multiples (or possibly, that as the default and tell commander not to allow them). Any thoughts from the maintainers?\n. Oh, ok - looking at the failing test, it looks like you can do this with coercion. Which is ok, though it still feels like it should be the default and shouldn't require anything extra. But, I can't complain. It works the way I expect.\n. You can use proxyquire to control it, or . . . if you don't like stubs (depends on your school of thought for tdd), use clear-require to reset the state of the module and then require it again.\n. Ah, if you put the option before the command, it does work. E.g.\nprogram\n  .option('-c, --count [count]', 'Do this [count] times')\n  .command('*')\n  .action(function(arg, options) {\n    console.log(options);\n  });\nThat's totally acceptable though possibly counter-intuitive. I'll leave this open for now in case you agree and want to make it work the other way around too, but feel free to close if not.\n. Yeah, probably caused by the same \"bug\" (or feature).\n. ",
    "alsonkemp": "```\n\nalso this could just be program.parsedOptions.bbq\n```\n\nTrue.\n```\n\nwe could change this.options to this._options (or whatever) \nand use that instead of .parsedOptions\n```\n\nDirectoinally, I agree, but I'd prefer to keep the code/terminology clear, so, even though _prefixing suggests internal usage, would suggest being explicit*:\n.parsedOptions -> .options\n.options -> .optionConfigurations\nIf that sounds good, I'll update and resubmit.\n- I'm not a Java-centric programmer!  If I were, I would have suggested .OptionsWhichWereConfiguredByTheDeveloperForCommandLineUsage and you would have to use .setOptionsWhichWereConfiguredByTheDeveloperForCommandLineUsage()\n. ",
    "matthewmueller": "+1 haha\n. +1\n. Oh cool, wasn't working for me, so I dug into the code a bit, it looks like the command is actually:\njs\nprogram.unknownOption = function(){};\nThanks man\n. ",
    "temsa": "At first sight it seems to work with \"npm install -f\"\n. @visionmedia will commander work one day with 0.8.x or you don't plan to maintain it for node >= 0.8.0 ?\nOr would you just prefer a feature request \"support node 0.8.0\"  rather than this bug ?\n. @visionmedia ok, my bad >_<\n. ",
    "gametbt": "I am able to install 0.6.1 and continue with my socket.io install. When I did npm update though, \nit appears that npm installed commander@0.5.2 at the top level, but underneath socket.io and\nexpress commander@0.6.1 stayed. \n. ",
    "RyanGordon": "Can someone take a look at this? It should be good to go. It'd be really nice if this can be merged in.\n. Hey,\nI'm not sure I understand. In the code itself it has some documentation:\n// required argument\n program.option('-C, --chdir <path>', 'change the working directory');\n// optional argument\nprogram.option('-c, --cheese [type]', 'add cheese [marble]');\nIt makes it seem like this gives you the ability to specify options that are required and options that are optional.\nTo provide a use case as an example: In my application I require a username to be passed with \"--username ryan\" but then I also have an optional datacenter option \"--datacenter abc123\" which defaults to a datacenter if not specified by the user, in my code.\nAs it is right now without this patch, commander will not provide help or error out if --username ryangordon isnt specified which means that if i called my program without any options or arguments it doesnt display anything and just exits which is very confusing.\nIf you don't see where i'm coming from with this logic, can you provide some examples of how these use cases are expected to work in commander so I can better understand?\nThanks,\nRyan\n. Okay I understand that but then does my use case not make sense at all?\n. Yes that could be done in my program, but that could also be a helpful feature in commander? That's why I picked commander, so I didn't have to do a bunch of code manually like that myself\n. I agree completely, \"named arguments\" would be an awesome feature to have\n. ",
    "TooTallNate": "\"keypress\" events are not necessary here. Just listen for regular \"data\" events.\n. Or if you want something quick-and-easy: https://github.com/TooTallNate/keypress\n. ",
    "dak": "Can we expect this to be addressed on commander's side, so that we don't have to change any of our code, or should we be looking to implement a workaround?\nNote that this bug also applies to any prompt (choose, confirm, password, prompt, etc.), not just password.\n. ",
    "fvianello": "Same problem here. What's the status of this?\n. ",
    "mainerror": "@dak1 prompt() works for me on Node.js 0.8.7.\n. ",
    "noazark": "I'd love to see this fixed, is there still interest in this PR?\n. ",
    "whyleee": ":+1: this issue breaks my tool which acts as a tiny git replacement. For ex. this command (called by bower) is not working: git clone https://github.com/whyleee/global-tunnel.git -b v1.1.0 --progress D:\\test --depth 1, when progress is configured as a boolean option. I made a fix for that long time ago (https://github.com/whyleee/commander.js/commit/2180137030824d2923ff483a2ed92927321e7a12) and it looks like the issue is still not fixed.\n. ",
    "arieljake": "ok, found a workaround - the third function of the option() method is a callback for when the option is being assigned a value - an opportune time to update state before any program actions are executed.\n. ",
    "abetomo": "It seems to have been solved, so I will close it.. Closing because there is no post for more than 1 year.\nFeel free to comment in case the issue persisted.. Closed because there is no update for a long time. Feel free to comment in case the issue persisted.. @matthewp Does the same problem still occur now?. Closing due to possible answer suggested and no response registered. Feel free to comment and we can re-open in case this issue persisted.. Closing due to possible answer suggested and no response registered. Feel free to comment and we can re-open in case this issue persisted.. @buerkle Could you please resolve the conflict?. @vanesyan I think that it is a useful fix, but what do you think?. @vanesyan Thank you.\n@buerkle Could you please fix it?\nIf I do not receive a response for a while, I will try to fix it by myself.. @buerkle Thank you.. It seems to be fixed, so I closed it.. @lancejpollard Would you please resolve the conflict?\nCould you add a test, too?. An example of a case where the value begins with a hyphen.\nWe plan to make modifications corresponding to all cases starting with hyphens.\n61. Closing due to possible answer suggested and no response registered. Feel free to comment and we can re-open in case this issue persisted.. @srquinn21\nSorry for the delay in confirmation.\nSince the difference from the current code got bigger, I close it once.\nEven now, if you need it, we will sorry for the inconvenience but please do PR once again.. Closing due to possible answer suggested and no response registered. Feel free to comment and we can re-open in case this issue persisted.. Closing due to possible answer suggested and no response registered. Feel free to comment and we can re-open in case this issue persisted.. I'm sorry! I was mistaken.. I am looking forward to PR.\n. @carlosforero I think that the opportunity to use coffeescript is less than before.\nIs this function still necessary now?. @carlosforero \nThank you for your reply.\nI am sorry that the reaction slowed down.. I will close, but I'd appreciate it if you can open PR if there is something again.. @vanesyan I think that SomeKittens says, but what do you think?. Is this a reference?\nhttps://github.com/tj/commander.js#version-option. @vicjohnson1213 Would you please resolve the conflict?. Thank you!\nI became a Collaborator recently, so I am checking the accumulated PR!. @lsm Could you tell me the assumed use case?. @lsm thank you for your answer.\n@vanesyan What do you think?. @ajfranzoia\nCould you please resolve the conflict?. Thank you!. @ValentinTrinque \nSorry to be late.\nWould you please resolve the conflict?. Thanks for your suggestion.\nI will add features.. @ibrahimduran Could you fix it because the test failed?. @lzilioli I want to merge. Could you add a test?. Let's merge. @alexcanessa Thank you for the reminder!. @dciccale Thank you PR!\nWould you please resolve the conflict?\nIn addtion, could you add a test?. @HakurouKen Would you please resolve the conflict?. Thank you!\nI can not strictly check this language because I do not understand this language.\nI will merge, but if you notice something, please give me a PR again.. @mateodelnorte Would you please resolve the conflict?. Thank you!. @mateodelnorte \nIt was awaiting @vanesyan's approval.\n@vanesyan \nCould you please review it?. @mrozbarry Thank you.\n@sandrodz \nApparently --version is not an option of ripple, it seems that it is treated as being an option of bable-node.\n(commander.js is also used in babel-node.). Shall we fork to create a new package?. Please let me cooperate because I am indebted to commander.js.. Thank you. I am the same as github.. @ThomasSimoens @call-a3 \nThank you PR!\nSorry for being late.\n@vanesyan\nIf there is no problem merge please.. (Note: Similar fix #411). @vanesyan \nThere is also a difference from the previous release.\nWould you like to release it once with the current code?\nCheck the accumulated PR and let's fix the code.. @vanesyan \nI am one of them, but I am in trouble with the 2.9.0 bug.\nMay I release 2.10.0?\n(It has not been released for a long time.)\n. Released. @ValentinTrinque Thank you!\n. @vanesyan Please review.. Released. Could you give me sample code that does not work as expected so that there is no discrepancy in recognition?. I would like to cast a vote on the plan to switch to jest.. @vanesyan Could you tell us about your future development schedule?. @vanesyan Thank you for your reply.\nI also have some suggestions for improvement.\nProbably most of it will be improved with this fix.\nI think that this code will eventually remain, so it is highly likely that you will be wasted even if you modify the existing code.\nSo I would like to do this with this new branch if I am going to fix it.\nCould you please let me make it possible for multiple people to develop it?. I was at a loss as to whether to implement it in commandHelp.\nSince this modification was formatting of display, I felt it was overkill in commandHelp.\nSo I made a fix like this, should I do it in commandHelp?. It's like spam, so close it.. @vanesyan Could you merge if there is no particular problem?. Because it passed for one week, I will close once.. @ntkme Thank you.\nI think that Proposal 1 is good.\n@vanesyan What do you think?. Thank you!\nSince the test has failed, could you confirm it?. @sennav Thank you for your reply.\nThere are two kinds of subcommands.\n1. To execute an executable command as a subcommand\n2. When processing with callback\nI think this case is the case of 1\n```diff\ndiff --git a/index.js b/index.js\nindex 5b6a7d5..633b6f2 100644\n--- a/index.js\n+++ b/index.js\n@@ -675,7 +675,7 @@ Command.prototype.optionFor = function(arg) {\nCommand.prototype.isSubcommand = function(name) {\n   for (var i = 0; i < this.commands.length; ++i) {\n-    if (name === this.commands[i]._name) {\n+    if (this.commands[i]._execs[name] === true) {\n       return true;\n     }\n   }\n```\nWhat about with a fix like that?. @sennav It was good if it was helpful.. Thank you PR!. @vanesyan Please release at good timing.. @vanesyan Could you review it?. @vanesyan Print default value in option help may have a big impact.. Since #704 has been merged, it closes.. @vanesyan Please release at good timing.. Thank you. Merged.. @vanesyan Could you review it?. It is fixed by #718. It is fixed by #718 . 2.12.1 has been released.. @sorohan Thank you pull request!\nCould you confirm the conflict?. Thank you!. I also like the standard.. I think that there is no problem in selecting ava.. @icirellik Thank you PR!\nCould you please resolve the conflict?. @icirellik Thank you!\n@vanesyan Could you review it?. Thank you!\nCould you check it because the test failed?. Thank you!. Thank you\n. @cravler Thank you!\nCould you add a test?. Thanks for the report.\nv2.15.1 released at npm@5.6.0.. I think that I solved it, so I will close it.. @vanesyan Could you review it?. The test has failed.\nCould you check it?. Thank you\n. @DanielRuf Could you please check conflicts?. Thank you.. It seems that the first argument of optoin function is wrong.\n\"-t\", \"--type [type]\", ->\n\"-t, --type [type]\",. If there are many tools without line breaks, it seems better to revert #833.. What is the version of Node.js?. I fixed it to support that version.. Thanks for the report!\nIt is a bug when I fixed this issue (#778).\nI will fix it.. Released.. Thanks for the report.\nThis is because we solved the issue (#729).. We released 2.18.0.. Thank you for the report. PR was opened.. Thank you.\nClose this pr and reopen it when ready.. CI has failed.\nCould you check it.. Thank you.\nHowever, it is the following error in eslint.\n/home/travis/build/tj/commander.js/index.js\n  667:58  error  Extra semicolon  semi. I think that it is a good idea.. Thank you!\n. I will rebuild it at 2.10.0!. Could you modify the tab width to match other codes?. As for 'node', can you do it like https: //github.com/tj/commander.js/blob/master/index.js#L544?. \ud83d\udc4d . Could you please set the indent width to 2?. \ud83d\udc4d . javascript?. Thank you!. Thanks for adding the test!\nCould you modify the indent width to 2?\nBecause the indentation width of other code is 2.. https://github.com/tj/commander.js/blob/master/LICENSE\nCould you please change URL to this repository?. ",
    "rstacruz": "I like .label(), but I have no rational reason to argue that. :-)\n. ",
    "shanimal": "This should be added to the docs. ( I didn't see a ref to a .help() function, but it seems to be available )\nFile:\n```\n!/usr/bin/env node\nvar program = require('commander');\nprogram\n  .version('0.0.1')\n  .usage('[options]  ')\n  .option('-b, --quiet', 'Quiet Mode')\n  .option('-d, --dir', 'Specify a directory of files')\n  .parse(process.argv);\nprogram.help();\nprocess.exit(0)\n```\nOutput:\n```\nUsage: minify.js [options]  \nOptions:\n-h, --help     output usage information\n  -V, --version  output the version number\n  -b, --quiet    Quiet Mode\n  -d, --dir      Specify a directory of files\n```\n. ",
    "shadowspawn": "This issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Thanks for explanation @alexmingoia \nThis issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Not currently planning a plugin system, but keeping this bug open for now as an early request for being able to override automatic help behaviour.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This has gathered a few likes over the years, so not closing quite yet. I have some problems with choosing colors:\n- color choice is quite personal\n- color support in some Windows shells is poor\n- light and dark themed shells makes color choice harder\nI suspect it is too much trouble to build in directly, but perhaps commander can make it easier for people to customise the help output.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nThere has been a patch to disambiguate emit for version option and command, so behaviour may have been improved.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Interesting comments thanks.\nThis issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Thanks for explanation @specious and @thasmo \nThis issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Thanks for the examples.\nThis issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. I don't think we would consider this change without better understanding what it was trying to achieve, which wasn't discovered in the linked issue. The behaviour is a bit weird so something we might revisit one day.\nThis PR has not had any activity in over six months. I suggest we close this and invite future readers to open a new PR if wanted. I have closed the issue already.. This issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. There have been a couple of improvements in this area, and likely a stale issue now.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nThe issue author has done their own approach, and there are other issues covering this area such as #47.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not received many reactions or links, and has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nI am closing this as duplicate of #242.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Thanks @rijnhard \n. Answered. Old. Closing.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Possible fixed by #494. Thanks @FDiskas \nThis issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Commander has new collaborators, and there are ongoing releases.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Thanks for work-around @teddy-gustiaux \nThis issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. We are passing stdio too so I suspect were deliberately working with old and new version of node.\nhttps://github.com/nodejs/node/blob/master/doc/api/deprecations.md#dep0006-child_process-optionscustomfds\nAssuming minimum version of node is now at least 4, can probably just delete customFds.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. You need to specify that the option takes a value, as shown by @jayrylan.\nThis issue has not had any activity in over six months. \nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. The two space indent was removed in commander v2.18.0 via this Pull Request: #853. There is a caller work-around. I had tried a pattern I had seen in another program of using bare \"--\" to stop processing options and leave them for subcommand. I found it worked in commander too, and am using this technique. \nSee comments in #216\njavascript\nprogram\n  .command(\"test <command> [args...]\")\n  .option(\"--expected\")\n  .action((command, args, options) => {\n    console.log(`expected is ${options.expected}`);\n    console.log(`command is ${command}`);\n    console.log(`args is ${args}`);\nexample test --expected -- a b c --unexpected\n produces\nexpected is true\ncommand is a\nargs is b,c,--unexpected. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Adding some notes for reference.\nMocha and AVA are mentioned in this issue, and @mojavelinux has prototyped some tests with AVA in #755. (Thanks! Nice demo without wasting effort if go with something else.)\nJest is mentioned in #661. \nI use Jest for testing my own CLI project including commander, and have not used AVA or Mocha.\nFor interest, I checked weekly downloads from npmjs.com:\n- AVA: 149 k weekly downloads\n- Mocha: 2.5 M weekly downloads\n- Jest: 4.4 M weekly downloads (and growing the fastest)\nhttps://stackshare.io/stackups/ava-vs-jest-vs-mocha\n(Side note: tests can run on Windows already with a little work! #916). This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. For an option with a required value the syntax is:\n.option('-F, --file-format <fileFormat>', `A file format`, checkFileFormat)\nThis issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Commander does not support command line completion itself.\nI use tabtab, which has an implementation pattern inspired by npm.\n(Of some interest, commander-completion is an older project to add commander completions automatically. I didn't get it working with current commander, but did look to the code for inspiration for parsing commander for commands and options. However, for your two subcommands I suggest it is easier to add them explicitly yourself than to generalise.). Has an answer. No further responses. No  activity in over six months.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Interesting question @michael-crawford and nice detailed explanation of what you are trying to achieve. \nWould you please open a new issue for this? I think your issue is different to what this Pull Request is about and this is not the right place to discuss it. (You could perhaps add to #108, but I think your question is long enough and well constructed enough to go in its own issue.) \nOne thing you could add is example output to show what didn't work with what you tried at the bottom, so readers don't need to try the code to find out what goes wrong.. For interest, the help indentation was removed in commander v2.18.0 via this Pull Request: #853. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report. (Good comments in #738.)\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report. (But this is an interesting idea.)\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Good investigation, thanks @icirellik . It was bad that the behaviour changed for this case when the repeatable options were added.\nHowever, I do not like trying to guess the intended usage based on the type of the extra parameter. That makes the behaviour a bit fragile. I would prefer to untangle the usage patterns and have it work consistently.\nEdit, retracting this comment: #829 is a step in that direction. Documenting a working pattern.. I should clarify that I have not worked through the code and behaviour in detail yet, my comment was based on reading the two Pull Requests and some of the related issues. I might change my mind about the suggested approach here when I understand more, and whether it is possible to \"untangle\" the usage patterns.. I came up with an idea I'll write up as a new proposal to clean up the behaviour, and see if it makes enough sense and seems worth the effort.\nSneak preview:\n```\ncallback takes one parameter\n.option('-i, --integer ', 'An integer argument', parseInt)\n.option('-i, --integer ', 'An integer argument', parseInt, defaultValue)\ncallback takes two parameters\n.options('-c, --collect [value]', 'A repeatable value', collect, [])\n .options('-v, --verbose', 'A value that can be increased', increaseVerbosity, 0)\n```. You can do this using git-style sub-commands. You call parse again when handling the first subcommand to add another layer of subcommands. \nIn the test code you linked to, the first level command processing which detects cache is in pm and the second level processing which extends this to cache clear and cache validate is in pm-cache.js.. This is working fine in a test program for me I wrote using your code:\n$ my-program command arg1 \"this is arg2\"\nthis is arg2\n\nIn your example call you do not have the name of the program. Perhaps you have accidentally used command as both the program name and the command name?. I don't have a good story for the error message, but the issue is the command is not in an expected form, such as:\nnode index.js -i Xxx\nnode index.js -iXxx\nnode index.js --input Xxx\nnode index.js --input=Xxx. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\n\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. (Disclaimer: I am a user, not an author.)\nSome command errors print a message and parse returns and your program carries on. There is the possibility of exceptions, including from your own action handlers, so a try/catch is appropriate.\njavascript\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  console.log(`caught exception with message ${err.message}`);\n}. Thanks @marcincichocki \nThis issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. I was not able to reproduce with your code fragment, but it looks like you have (accidentally) invoked the Git-style sub-commands processing which searches for separate executables. \nDo you have code like root.command(\"server\", description) in your failing program?. Looking at the code and experimenting, commander effectively uses argv[1] to construct the filename for the subcommand. (Actually the second argument to program.parse() ) This can give different results depending on the launch method if your command name, source filename, and package folder name are different.\nSuppose you have a subcommand and have not created its source file yet:\nprogram.command('generate', 'Generate application w/ scafolding.');\nconsole.log(`argv[1] is ${process.argv[1]}`);\nprogram.parse(process.argv);\nWith the package in a directory called fab-dir and package.json containing:\n\"bin\" : { \"fab\": \"./index.js\" }\nI see these results on macOS, and from description by @knyy there is a platform unix/windows difference for the first case as well.\n```\n$ npm link\n$ fab generate\nargv[1] is /usr/local/bin/fab\nerror: fab-generate(1) does not exist, try --help\n$ node index.js generate\nargv[1] is /Users/john/Documents/Sandpits/fab-dir/index.js\nerror: index-generate(1) does not exist, try --help\n$ node . generate\nargv[1] is /Users/john/Documents/Sandpits/fab-dir\nerror: fab-dir-generate(1) does not exist, try --help\n```\nSo, tips:\n- to debug commander looking for wrong subcommand filename, check arguments to parse\n- use matching name for \"bin\" command and its source file (as per @knyy)\n. We should document that intend end-user to install @types/node.. A custom event listener might be what you are looking for:\nprogram.on(\"option:hello\", function () {\n  console.log(\"hello\");\n});\nUsing that with node . msg -w --hello get output:\n\nhello\ninside subcommand\nworld\n. We do need to get something into the README about the \"new\" pattern, thanks for raising.\n\nI don't think we will deprecate the old way as such, but it should be the my-program-is-so-simple-globals-are-ok way of working.. You need to specify that the option takes a value. Expanding on the answer by @yausername \n```\n// mycmd.js\nvar program = require('commander')\nprogram\n  .option('-a, --aaa ', 'option')\n  .option('-b, --bbb ', 'option')\n  .option('-c, --ccc ', 'option')\n  .parse(process.argv);\nconsole.log(aaa is ${program.aaa});\nconsole.log(bbb is ${program.bbb});\nconsole.log(ccc is ${program.ccc});\n```\n$ mycmd -b bValue -c cValue -a aValue \naaa is aValue\nbbb is bValue\nccc is cValue. This issue has not had any activity in over six months. \nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. You can use a letter option with one dash like -a, or a word option with two dashes like --anything, or one of each like you did with option('-a, --anythings').\nThe problem is that -ab is not a valid combination as a single dash and a word.\nOn the command-line when you type multiple options (letters) after a single dash, it is treated the same as using the options separately, so\n-ab == -a -b\nwhich is how you get the (initially surprising) error error: unknown option -b\n(You might have seen the multiple option pattern with commands like ls -al.)\n. The .version() is implicitly adding options for -V, --version and triggers before your command fires, which I think is working as intended. To resolve the issue one of the two uses of --version needs to change and it can be the global one: \nhttps://github.com/tj/commander.js#version-option. Disclaimer: I am a user not a maintainer. (So comments are IMHO.)\nI do not think this feature is handled by commander. I think positional would match what people expect in at least some situations, but treating options globally may be by design. \nIt is particularly surprising for --version which makes little sense when used with other arguments and options! But it feels quite natural with --help:\nspm --help publish\nspm publish --help\nFor an external reference, the first program I noticed non-positional global options with was Mercurial:\n```\nhg --repo custom status\nhg status --repo custom\n```\n. The quotes do not affect the parsing by commander so it still looks like an option as starts with a dash. What you can use is dash-dash which marks the end of the options for commander. This is a pattern used with other command-line parsing too. I think of it as telling the first command to leave the option for the sub command. \ni.e. try\nnode bin/cli.js -- -dzend_extension=xdebug.so -v\n. Are you basically always running php? You could do something like:\n.action((command, args) => {\n        // const idx = cli.rawArgs.indexOf(command)\n        // const args = -1 !== idx ? cli.rawArgs.slice(idx + 1) : []\n        if (command !== \"php\") {\n          args.unshift(command);\n          command = \"php\";\n        }. I think the unknown options are ignored and not available separately. \n(The remaining arguments after removing options are available as program.args, and the full arguments are in program.rawArgs. But neither are what you asked for.). This is expected behaviour. program.args is the arguments left after consuming the options. The dash-dash stops commander from processing further options (likely to be passed to another command).. The options are accessed on the Command object on which you called .command. You don't have the variable name visible in your code fragment. I have called it program here.\nconsole.log(program.anotherOne). (Apologies, my previous answer was for a different situation. Didn't try running the code!)\nSee Command specific options in the README. There is lots of gold in the README. \nHere is your example with an added optional argument just in case, as you mentioned arguments although using options.\nprogram\n   .command('testCommand [cmd]')\n   .option('-f, --first-option <some-value>', 'first option')\n   .option('-a, --another-option <some-value>', 'another option.')\n   .description('Try to get this to work.')\n   .action((theCmd, options) => {\n      console.log(`first-option is ${options.firstOption}`);\n      console.log(`another-option is ${options.anotherOption}`);\n      console.log(`cmd is ${theCmd}`);\n   });\n$ node . testCommand --another-option another --first-option something some-command\nfirst-option is something\nanother-option is another\ncmd is some-command. Oh, looking at your question again, have you set up so that testCommand runs node? In that case it does not get specified in the commander setup as it is part of the invocation rather than part of the parsing. (And for extra irony, my first answer might have been close...). I am not certain this answers the question for a real program, but here is the sample code working for me:\nindex.ts\n```\n!usr/bin/env node\nimport * as commander from 'commander';\nimport axios from 'axios';\nasync function run() {\n  var response = await axios.get(\"https://dummyimage.com/600x400/000/fff\", { \"responseType\": \"arraybuffer\" });\n  if (response.status === 200) {\n    console.log(Downloaded file: ${response.data.byteLength} bytes.)\n  }\n  else {\n    console.error('Error downloading');      \n  } \n}\nconst program = new commander.Command();\nprogram\n  .command(\"do\")\n  .action(run);\nprogram.parse(process.argv);\nconsole.log(\"After parse\");\n```\n$ npx tsc index.ts\n$ node . do\nAfter parse\nDownloaded file: 1780 bytes.. I agree Soichi, this looks like a shortcoming with handling of mixed git-style commands and commands with actions.\nA work-around might be to do the error/help detection in a git-style command too:\n````\nprogram\n  .command('com1', 'for test-com1.js')\n  .command('com2', 'for test-com2.js')\n  .command('unknown-command', 'for test-unknown-command.js', { isDefault:true })\nprogram.parse(process.argv);\n```. FYI @linfan68 when.command()` is invoked with a description argument, this tells commander that you're going to use separate executables for sub-commands. See Git-style sub-commands. There is not support for hiding options from the help.\nTwo suggestions:\n1) use a hidden command which has the extra admin options, as you can hide a command from the help\n2) do not define the admin options for parsing using commander and look for it yourself in code.. This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. I can not reproduce with your example code, but from the error I think you are triggering Git-style sub-commands  by using .command() with a description argument like .command(\"push\", \"push description\"). \nIf that is the issue then you probably want to call .description instead like:\nprogram\n    .option('-p, --path <string>','your local path such as ./')\n    .command('push <ak> <sk> <ifcli>')\n    .description(\"push description\")\n    .action(function (cmd,ak,sk,ifcli) {}). This is probably an interaction with with the command-line interpreter (e.g. cmd.exe) rather than anything specific to commander. You may be able to confirm this by trying the same parameter with a different program.. Yes, the option name is used in the code but the <value> is a placeholder not used in the code, and potentially useful documentation.. This issue has not had any activity in over six months. \nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. The documentation is up to date. I checked by copying and pasting the whole example, and worked as advertised. The custom help is added on the end of the automatically generated help. \nIs your problem with adding to the help, or running your command?. You have an extra (unwanted) call to .parse just before that code. Remove that and should start working more as expected. . To expand on the answer to the original question...\nAdding a description parameter to .command triggers a different style of processing where another script is run rather than .action . This is a common source of confusion! Documented here:\nhttps://github.com/tj/commander.js#git-style-sub-commands\nTo add a description without switching modes, use .description as described by @dirkkok . To expand on answer to @mpathy issue:\n.action takes a function parameter. See examples:\nhttps://github.com/tj/commander.js#examples\nSo your code could look like:\njs\nprogram.command(\"init\").action(() => {\n    something1();\n });\n program.command(\"install\").action(() => {\n    something2();\n });\nprogram.command(\"uninstall\").action(() => {\n    something3();\n });. Looks like your code works as intended when I call it like this:\n$ node . x -i -s -S\ntrue true true\nI am not sure what you have the start run script defined to, but you will need to add a -- to stop npm from eating the options. See run-script. Try:\nnpm start -- 'http://momori.animenfo.com:8000/;listen.mp3' -i -s -S. I expect this was a parsing issue in the shell rather than an issue with commander.\nThis issue has not had any activity in over six months. Feel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. I am using commander 2.19.0 and have not had this problem. There would seem to be some extra steps or context to trigger the issue.\nI also tried using this code fragment:\njavascript\nprogram.option('-o --optional', 'An optional option');\nprogram.parse(process.argv);\nconsole.log(program.optional);\nwhich produced: \nbash\n$ node .\nundefined\n$ node . --optional\ntrue\n$ node . -o\ntrue\n(I am running macOS Mojave and using node v8.12.0.). This issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. The documentation says this is already supported.\nhttps://github.com/tj/commander.js#option-parsing\n\nShort flags may be passed as a single arg, for example -abc is equivalent to -a -b -c. \n\nCan you provide some detail on what you tried?. If you want to call parse multiple times, the best option is to create a fresh Command object. \nSee #438 for discussion and examples.. Answer offered, and no further activity in six months.\nThank you  for your contributions.. You need -- to stop npm from consuming the -f when using npm run. i.e.\nnpm start -- -f csv examples/ex0.js\n\nSee npm-run-script\nI saw a warning from npm confirming it is processing the -f when I tried reproducing your command:\n$ npm start -f csv examples/ex0.js\nnpm WARN using --force I sure hope you know what you are doing.\n..... Interesting, thanks.\n\nThis issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Commander does not treat program options as positional, they apply before and after commands. (There are unfortunately not warnings for overlapping options.)\nThis issue has not had any activity in over six months. It isn't likely to get acted on due to this report.\nFeel free to open a new issue if it comes up again, with new information and renewed interest.\nThank you  for your contributions.. Have a look on the README page at:\n.option('-c, --collect [value]', 'A repeatable value', collect, []). Whether to introduce dependencies is a tricky question. I'm still thinking about the tradeoffs so won't offer an opinion at this time, just add some size info.\n$ npm init -y\n$ npm install commander\n$ du -d 1 -h node_modules/\n 76K    node_modules//commander\n 76K    node_modules/\n$ npm install readlink\n$ du -d 1 -h node_modules/\n4.8M    node_modules//lodash\n 76K    node_modules//commander\n844K    node_modules//async\n 24K    node_modules//readlink\n5.8M    node_modules/. I don't think we would add this, not least because English is so inconsistent. Have you got examples of other CLI tools or packages doing this?. I expect this is the intended behaviour, as in general the program may do something useful when executed without options or parameters. As a simple example, consider the ls command.\nAn example of displaying help by default is included in the README example for \noutputHelp. No response. Closing.. What sort of info about default values are you looking for?\nThere are a coupe of examples of default values for options that are covered without additional explanation in the README:\n  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')\n\n  .option('-s --size <size>', 'Pizza size', /^(large|medium|small)$/i, 'medium')\n\n. A little digging shows the MIT license was in the initial commit of README.md in 2011, moved to a separate license file in 2015, and has not been modified since then.\nhttps://github.com/tj/commander.js/commit/672c7d01d8382257226d67c39c6e1002c881d95f\nhttps://github.com/tj/commander.js/commit/ef0a54ff10166bdfadf7c7e554221b723a8a2248#diff-9879d6db96fd29134fc802214163b95a\nhttps://github.com/tj/commander.js/commits/master/LICENSE\n. commander does not expect or support specifying multiple commands on the same command line, and what you are doing here is processing the whole of process.argv three times. None of the three programs know about each other, and have no way of parsing out the other commands and options. \nSo when you run \nbash\nnode cli/pm.js --flag\nboth numbers.js and say.js would complain about an unknown option --flag.\nWhen you run \nbash\nnode cli/pm.js numbers 1 2 3 say hello\nnumbers.js treats all the arguments as numbers (including say and hello), and say.js does nothing because the (first) command is not say.\nI am not sure if other parsing packages support multiple commands on single line, but it is unusual for a command line tool to do this. You might be able to still use commander for some of the work by preprocessing process.argv yourself and splitting the args up into multiple calls to your combined parser. I am imagining a command line with an extra argument to split the commands like:\n``` bash\nnode cli-test/pm.js numbers 1 2 3 --and say hello --font italic\nor\nnode cli-test/pm.js numbers 1 2 3 + say hello --font italic\n```\nThen you could split up the args into the separate groups, and parse numbers 1 2 3 and say hello --font italic. . You could define monitor as a command, like:\nprogram.command(\"monitor\")\n   .action(() => {\n      var cfg = JSON.parse(fs.readFileSync(path.join(os.homedir(),\".cluster-mon\",\"client.json\")).toString());\n      // etc\n   });\nOr you can use .arguments rather than .command (since you aren't defining a command as such). See specify-the-argument-syntax in the README, like:\nprogram.arguments(\"command\")\n   .action((cmdAction) => {\n      action = cmdAction;\n   });. Please give an example of a command line call to your program? (If your program is called monitor then that does not get parsed in the commander code.)\nI took shortcut with my example program and called it directly without setting up bin, like:\nnode . monitor\n. Which approach would you like a longer example for, .command(\"monitor\") or .arguments ?. Two example actions, and error handling for unrecognised actions:\n```\n!/usr/bin/env node\nconst program = require(\"commander\")\n    .version(\"1.0.0\");\nprogram\n    .command(\"monitor\")\n    .action(() => {\n        console.log(\"recognised monitor\");\n    });\nprogram\n    .command(\"log\")\n    .action(() => {\n        console.log(\"recognised log\");\n    });\nprogram.on('command:*', () => {\n    console.error(Invalid action: ${program.args.join()});\n});\nprogram.parse(process.argv);\n```\n$ node cmd.js monitor\nrecognised monitor\n$ node cmd.js log\nrecognised log\n$ node cmd.js missing\nInvalid action: missing\n$ node cmd.js \n$\n. Did you sort out your problem? (Can this issue be closed?). You can use allowUnknownOption() which does just what you want, but be warned there is not a convenient way to get the unrecognised options. See example and discussion in #802.\nAn alternative pattern which might make sense if the options are for another command is to use -- to stop the option processing (which effectively turns the following options into arguments). I use this pattern a bit, like when passing options to an npm run script which are intended for the script and not for npm.\ne.g.\nprogram\n.command(\"up [args...]\")\n.action((args) => {\n    console.log(args);\n});\nCalled like: \n$ cli up -- -dl --flags --logs .... Did you sort out your problem? (Can this issue be closed?). Question hopefully answered. No further questions. Closing.. I am not familiar with Guix, but FYI I think the devDependencies break down as follows:\nbuild:\n- @types/node\n- typescript\ntest:\n- should\n- sinon\n- ts-node\nlint:\n- eslint\n- standard\n. Did you you get enough information? (Can this issue be closed?). Correct, there isn't currently support for overriding the default help output for --help.\nIt has come up before: #47 #242 #542. Closing as a duplicate of #242. I think your problem might be using the ... with the action callback parameter, making it a rest parameter collecting all the arguments. commander will pass an array of files as the first parameter, and an options object as the second parameter. You are combining them all into one variable, which is probably not what you intended. \nI suggest try something like this and see what objects you are getting passed:\njavascript\n.action(async (fileArgs, options). Did you sort out your problem? (Can this issue be closed?). You are getting a false positive from this line in speccy.js:\njavascript\nif (!program.args.length) program.help();\nprogram.args has what is left-over from commander parsing, whereas for displaying help you want to check the original arguments passed to your program. (I am a bit surprised by the difference in behaviour you are seeing, but not relevant to fix.)\nThe Output Help example code is:\njavascript\nif (!process.argv.slice(2).length) {\n  ...\n}. The .on('--help' event listener allows you to add extra text after the default help has already been output. Hence you are getting the message twice, the default in white and your extra message in blue. See the example output for Custom help\nYou can customise the help output using .outputHelp() and the example is to make the text red! But this is for calling directly and does not change the output from --help itself.\nThere isn't currently support for overriding the default help output from --help.\n. To see the options for the subcommand:\ncommand subcommand --help\n\nYou can also install a Custom help listener for the subcommand to supply additional information about the subcommand to display when its help is requested.. There is a lot of interesting work in this Pull Request, and credit for including documentation and tests. But I want to raise a concern that might have been missed. Commander currently has zero production dependencies. Although omelette is described as a \"lean library for autocompletion that has no further dependencies\", it is currently 20x larger than commander. \n\nhttps://github.com/tj/commander.js/pull/646#issuecomment-329307273\nhttps://github.com/tj/commander.js/pull/486#issuecomment-313772381\n\n$ npm init -y\n$ npm install commander\n$ npm install omelette\n$ du -d 1 -h node_modules\n 76K    node_modules//commander\n1.5M    node_modules//omelette\n1.5M    node_modules/\nI dug a little deeper and found Omelette package includes everything including images for README, and could be much leaner. I found an open issue along these lines:\n\nhttps://github.com/f/omelette/issues/34\n\n(I have yet to try the code in this Pull Release. This comment based on inspection of the Pull Request.). 1) List: I think this may take a coercion to declare and turn the option parameter into an array. For example:\n```js\nfunction splitComponents(val) {\n  return val.split(',');\n}\nprogram\n  .option('-c, --components ', 'List of components to create', splitComponents)\n```\nand call like:\nnode index.js --components dir\\one,dir\\two\n\n2) Short flags are a single character, with single leading dash. Multiple flags may be combined as mentioned in the README:\n\nShort flags may be passed as a single arg, for example -abc is equivalent to -a -b -c.\n\n3) You asked about options, but on a related note about arguments, the last argument may be a variadic argument. See also #913 for some other approaches to options taking lists.. No, this is not currently supported. \nThere are some issues and Pull Requests (#462 #503) about required arguments and required options.. When you pass arguments to commander, it has no certain way of telling what the arguments are. The assumption, which is normally true, is that the first argument (argv[0]) is the running program and the second argument argv[1] is the script name or command name. Then your own arguments follow.\nAs suggested in the Electron issue, you can modify process.argv before calling commander, as you can tell how it was invoked.. Also of interest, I found an older issue with lots of comments: #512. You can have variadic arguments, but not variadic options. You can have a repeatable option with multiple values specified but you do need to add a routine to do the collecting. See <file...> and --collect [value] under coercion in the README.\nSo for your option would be called like:\nrun --spec a --spec b --spec c. Thanks for taking the time to provide a customised example in your reply @vanesyan \nThere is actually an example of this in the README @mtrabelsi, down the bottom:\nhttps://github.com/tj/commander.js#examples\n.action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);. I have some comments too @zce. Sorry, you probably through it was an easy pull request!\n1) What problem are you fixing? Personally I do not like how the left/right quotes look and it is unusual, is that what you are fixing? e.g. currently\nerror: missing required argument `text'\n2) what cli commands have you looked at? The examples I found all used straight single quotes:\n$ git silly \ngit: 'silly' is not a git command. See 'git --help'.\n$ hg silly\nhg: unknown command 'silly'\n$ cc silly\nclang: error: no such file or directory: 'silly'\n3) An observation for how much this affects people (i.e. semver). The change does not affect functionality, but some people will have designed their own error commands to match this style and will care if we change the style.. I found an OLD reference to this very issue: https://www.cl.cam.ac.uk/~mgk25/ucs/quotes.html\nI would prefer \n'unexpected'\nrather than\n`unexpected`\n(although I have to admit I am now recognise the left quote from markdown, but keep it simple!). Your example code worked for me when I ran test.js, and I suspect the issue is in your real code.\nsh\n$ node test.js --no-sauce\nyou ordered a pizza\n without sauce\nThere are a couple of things to be aware of for running tests, and the first one might be your current problem.\n1) You need a couple of extra parameters when you construct the arguments array yourself to match the usual pattern of running program as arg[0]and script name or command name as argv[1]. e.g.\njs\nlib.run([\"node\", \"test.js\", \"--no-sauce\"])\n2) To allow you to run multiple tests you will want to create a fresh program to parse each run.\n```js\n!/usr/bin/env node\nvar commander = require('commander');\nconst run = (args) => {\n    program = new commander.Command();\n    program\n    .option('--no-sauce', 'Remove sauce')\n    .parse(args);\n...\n```. Edit: strike out bad answer!\nTry explicitly assigning the parameter like:\ntests run --launchparams=\"--ez e10s true\". Tested the actual code this time! Note the change in brackets around <additional parameters> making a value required if the option is specified.\n```\nvar program = require(\"commander\");\nprogram\n.option(\"-l, --launchparams \", \"Additional parameters to launch the browser\")\n.action((options) => {\n    console.log(Launch parameters: ${options.launchparams});\n});\nprogram.parse(process.argv);\n```\n``\n$ node index.js \nLaunch parameters: undefined\n$ node index.js --launchparams --one\nLaunch parameters: --one\n$ node index.js --launchparams --one --two\nerror: unknown option--two'\n$ node index.js --launchparams \"--one --two\"\nLaunch parameters: --one --two\n$ node index.js --launchparams \"--ez e10s true\"\nLaunch parameters: --ez e10s true\n```. NOTE: account name changed, my primary is now @shadowspawn on GitHub.\nHi! I am interested. Thanks. I won't be offended if I am not added, or if does not work out.\nTo be clear, I am not currently expert in the internal commander code. I have worked mostly with the interface.\nI am passionate about good clean consistent CLI.. NOTE: account name changed, my primary is now @shadowspawn on GitHub.\nLink to my comments on Commander Issues.\n(In case you want npm, I am shadowspawn there too). (After I have access.)\nI thought I would start by reviewing the open Issues, closing stale and duplicate entries, and get a better feeling for some of the most common problem areas (like confusion over action vs git-style commands).\nOn a more minor note, the Labels are a bit inconsistent in style and some are stale. They are not getting used a lot currently and mostly cosmetic. I thought I would modify those to follow the naming style in new GitHub repos: https://help.github.com/en/articles/about-labels . I am thinking it would be useful to add a docs label for issues that might be resolved by improving the README et al. (so a bit like bug but not planning code changes).\n. NOTE: account name changed, my primary is now @shadowspawn on GitHub.\nI apologise for the name churn. I had set a name change in motion the day before this issue got opened, and it has just come through, so very unfortunate timing.. Accepted. I am looking forward to helping with this project as a collaborator. Thanks @tj and team.. I have made a start on reviewing open Issues. Updated labels and closed 18 issues tonight. I will refine messaging I am using when closing if I receive any feedback, as closing issues is a sensitive topic! Have not started collating common themes but as expected already seeing some. :-). The true means drink was specified as an option, but with no (valid) value. Like calling:\nnode a.js -d\n\nHow do I write code to identify, if drink's value is not coke|pepsi|izze, exit(-1). \n\nI suggest you don't use the pattern in the .option call and instead check the option value yourself after calling parse. I also suggest putting the allowed values in the description so it appears in the help.. If any users of regular expression option read this thread, I am interested in what your code looks like.. Found another related issue: #708. Thanks for the feedback. I was actually doing some research on this just yesterday, and can refer you to #649. Thanks for the detailed description of a good use case and expected behaviours.\nOn investigation, the problem lies in the underlying code. The default value for a boolean option is ignored (i.e. an option that does not take a value), presumably because author was thinking of testing for presence of the option rather than its value. This earlier comment tracked it down too: https://github.com/tj/commander.js/issues/574#issue-178425784 (and also related #108 and #691).\n// preassign default value only for --no-*, [optional], or <required>\n  if (false == option.bool || option.optional || option.required) {\nThere are also discussions around improving support for mixing --foo and --no-foo, I didn't chase that aspect yet.\nA possible work-around for current behaviour is to give the option a value, like:\n```\n  .option('-m, --monitor ', 'Monitor build process', MONITOR)\n$ MONITOR=1 node . test \nMONITOR is true\noptions.monitor is true\n$ MONITOR=0 node . test \nMONITOR is false\noptions.monitor is false\n$ MONITOR=0 node . test --monitor true\nMONITOR is false\noptions.monitor is true\n$ MONITOR=1 node . test --monitor false\nMONITOR is true\noptions.monitor is false\n```. @kira1928 \nWould it be appropriate to have type matching what I think is the expected use:\n{{[argName: string]: string}}\nrather than the pure object style definition:\n{{[key: string]: any}}. These changes do not look like they are intended for commander, with an author change included.\nWere you intending to merge from your subcommands branch back to your own master branch?\n. Thanks for the use case, and for the succinct TL;DR too. \nRelated open issues about not calling exit: #443 #575 \nAnd issues about allowing custom exit code, so similar but different use case: #188 #435. suggestion\nOptions will be validated by default by throwing an error when an unknown option is passed (`error: unknown option '--thisIsUnknown'`). You can disable this validation per command by calling: `allowUnknownOption(true)`. I think there is potential for reader confusion between invalid options (--number=silly) and unknown options including typos. Hence avoiding use of invalid.\nWill be good to have allowUnknownOption added to ReadMe, thanks.. ",
    "travisbot": "This pull request fails (merged 5fc832fc into c2edd81d).\n. This pull request fails (merged a0fa778e into c2edd81d).\n. This pull request fails (merged dc8b8052 into c2edd81d).\n. This pull request fails (merged a42471a5 into 605441b5).\n. This pull request fails (merged 11136ec0 into 605441b5).\n. This pull request fails (merged 1b37ea4b into 605441b5).\n. ",
    "arv": "That merge failure is pretty odd. Trying again.\n. This one does not handle equal signs in the value position correctly. As in\nnode test --string Hello=World\nI'll do another pull request for a new patch\n. ",
    "bencevans": "@arv It looks like that was failing previous to your work. Take a look at the test history http://travis-ci.org/#!/visionmedia/commander.js/builds I'm pretty sure it's not your doing :)\n. ",
    "hapticdata": "Do you have an example of this that works on Windows? I am able to get this and the method you use in bin/component working on OS X and Linux, but both return the following error on Windows:\nError: Command failed: C:\\...\\bin\\sketchplate-template is not recognized as an internal or external command, operable program or batch file\nbin/sketchplate source\n. ",
    "christav": "Any updates?\n. ",
    "timoxley": "whoa. how did this get on commander.js issue queue?\n. @zhiyelee no worries, thanks for tackling it promptly!\n. ",
    "thesmart": "Dude, seriously.  I expected this feature to be part of commander. Wondering what is the point of commander if not to require arguments?\n. ",
    "EvanCarroll": "I don't agree with this position you've taken @visionmedia . It's one of those cases where 99% of the users want the barest most minimal functionality. It's a very ideological stance to take that because things can get more complex no accommodations should be made.\nThat said, I agree with your conclusion -- those that can't live with your decision should go elsewhere. Perhaps though you could make that more apparent in the docs. This is one of three bug reports that references this functionality. I imagine if there was an FAQ it'd be the foremost asked question. Would you accepted a doc-patch that said this feature would not be implemented, with a reference to optimist which seems to be all around more complete (a larger library)?\n. ",
    "wilzbach": "any reason why this was never merged?\n. ",
    "rafaelrinaldi": ":+1: \n. ",
    "nicknovitski": "+:100: \n. ",
    "AsaAyers": "What is the state of this? It's been open a year and no updates in 10 months. I found this because I'm writing a subcommand that accepts a variable number of files. I was surprised to find that's not already in Commander.\n. ",
    "kbjr": "What is the state of this? Looks like no one has touched it in a while, but I would really like to use this functionality.\n. A fix for this doesn't necessarily have to break backward compat right away, options can be exposed in two places, and only remove them from the main program object when the next major release comes out. At least that way, people having this issue can start parsing those troublesome options (like --parse) now.\n. ",
    "benjreinhart": "What's the status on this? I'd like to see this make it in as well.\n. ",
    "legomind": "+1 please merge\n. ",
    "Unitech": "+1\n. +1\n. This bug fix gonna be merged soon ? Thanks\n. Do literal arguments should be pushed to the argument list here?\n. Currently I've just commented out the args.push when litterral is detected\nhttps://github.com/Unitech/commander.js/commit/f0be848d9fb94431a7ff84c7e968b465fbdc7857\nShould I send a PR with this?\n. ",
    "durango": "+1\n. ",
    "knownasilya": "@visionmedia is there something holding up this merge?\n. Anyone looking for an alternative, check out ltcdr, based off commander's codebase but cleaned up and accepting PRs.\n. ",
    "spalger": ":+1: \n. ",
    "jmstout": "+1\n. ",
    "ohsc": "at least make a note in Readme.md\n. ",
    "amitapl": "In my project I was able to fix it like this:\n``` javascript\ncommander.Command.prototype.usage = function (str) {\n    var args = this.args.map(function (arg) {\n        if (arg.name !== undefined) { // Patch\n            return arg.required\n                ? '<' + arg.name + '>'\n                : '[' + arg.name + ']';\n        } // Patch\n        return \"\"; // Patch\n    });\nvar usage = '[options'\n    + (this.commands.length ? '] [command' : '')\n    + ']'\n    + (this.args.length ? ' ' + args : '');\nif (0 == arguments.length) return this._usage || usage;\nthis._usage = str;\n\nreturn this;\n\n};\n```\n. Try this:\nrequire(\"commander\").parse([\"commander\", \"aaa\", \"bbb\"]).usage();\n`\nI'm getting back:\n'[options] [undefined]'\n. This was just a syntisized version of the problem, the issue is with this line which is public:\nrequire(\"commander\").parse([\"node\", \"commander\", \"bbb\"]).help();\nResult:\n```\n  Usage: commander [options] [undefined]\nOptions:\n-h, --help  output usage information\n\n``\n. Anyway I got your workaround:require(\"commander\").usage(\"[options]\").parse([\"node\", \"commander\", \"bbb\"]).help();`\n. ",
    "SteveEmmerich": "Hello, I am sorry to reopen this issue but I cannot find the duplicate with the answer to this question. Could you please reference the ticket number or revisit the answer?\n. ",
    "yanickrochon": "I have a problem with the logic here\n.option('-a, --active', 'set as active', Boolean)\nsets args.active == false is specified, and undefined if the flag is not specified.\nMy logic would be that \n.option('-a, --active', 'set as active', Boolean)\nwould set args.active to true if specified, or false (or undefined) otherwise. While\n.option('-A, --no-active', 'set as inactive', Boolean)   // or `--not-active` should be valid, too\nwould set args.active to false if specified, or true otherwise.\nI understand that there should be some way to find if the option was specified or not, but I don't think there's any way to tell that such argument is optional or should be always set.\nBut, again, specifying both would solve the problem.\n.option('-a, --active', 'set as active', Boolean)\n.option('-A, --no-active', 'set as inactive', Boolean)   // '--not-active'\nwould check for these rules :\n- if -a / --active is specified, set args.active = true;\n- if -A / --no-active is specified and !args.active, set args.active = false;\n- if option -A / --no-active is declared, setargs.active = true;`\n- otherwise, leave undefined\n. I agree, options could be placed at two different places to keep BC. I too have a problem where I was wondering why this command :\nnode test add-role --name admin ---description \"Admin role\"\nhad args.description be a function!\nThe \"list of names you can't use\" makes things a little awkward and mixing parsed arguments with the command object is just wrong. \nOr better yet, have the parsed arguments sent as second argument to the command action function.\n``` javascript\ncommand\n    .description('Create and add a new role')\n    .option('-n, --name ', 'the role name', String)\n    .option('-d, --description ', 'the role description', String)\n    .action(function (command, args) {\n})\n\n;\n```\n. I find this confusing as well. There should be some way to make the entire flag as required, not just it's value.\nPerhaps, something like\njavascript\nprogram.option('-i, --input <file> ^', 'input file');\nor another character; !, *, ?, etc.\n. Well, my bad. Weird how .option('-a', '--option-a <a>', 'Option a') can look like .option('-a, --option-a <a>', 'Option a') and \"work\" the way it did.\n. So... wrap the command action, then. However it doesn't work for version, and would work for -h, --help option only if overridden.\nBut, as I mentioned, program.once('foo', ...); works for user defined commands, but not for version.\n. I found a solution : \njavascript\nprogram.on('*', function (args) {\n  console.error('Unknown argument :', args[0]);\n  console.error();\n  process.exit(1);\n});\n. ",
    "lydell": "Hehe, even mocha needs this. It has both --colors and --no-colors. Currently mocha uses an ugly hack to achieve the desired results:\n``` js\n// --no-colors\nif (!program.colors) mocha.useColors(false);\n// --colors\nif (~process.argv.indexOf('--colors') ||\n    ~process.argv.indexOf('-c')) {\n  mocha.useColors(true);\n}\n```\n(That hack is buggy, too, since -ac won\u2019t work, only -a -c.)\n. ",
    "adius": "Any progress on this one?\n. +1\n. I'm having the same issue!\n. ",
    "akdor1154": "Still hitting this in 2017... ",
    "usmonster": "I have an open PR that should fix this: #795. Please review and comment!. Recently fixed in #794.. Tried to clarify this behavior in tests on #795. Please take a look, and feel free to comment!. Hey, I may have solved this in #795. Please try it out and let me know?. Bump\u2013@vanesyan, does this look OK for you?. I can do it if you want, but it will only be for readability/consistency, as the result is boolean as-is.. No problem, it's done. :). Note: This may be a breaking change for people who use the (only recently-documented) Custom Event Listeners, though I can also clarify this by adding another illustrative example to the Readme in that section, if required.. ",
    "damianb": "@andzdroid Just hit this problem, found out the cause and a fix. You need to change your .parse() line.\nDon't chain it off of the previous lines, it'll chain off of the .command() instance.  Directly use it as program.parse.\n. change your last line, in your own example, to literally be program.parse(process.argv);\nDon't chain it at all.\n. @andrew In practice, works for me - working example: https://github.com/damianb/blip/blob/master/bin/blip\n. ",
    "andrew": "@damianb can you show an example of how you got that working?\n. I have:\n```\n!/usr/bin/env node\nvar program = require('commander');\nprogram\n  .version('0.0.1')\n  .command('config', 'show current config')\n  .command('demo', 'perform a scripted demo')\nprogram.parse(process.argv)\n```\nStill shows the --help option but calling it results in:\n```\n$ ./bin/nodecopter --help\nexecvp(): No such file or directory\nnodecopter---help(1) does not exist\n```\n. @damianb Thanks, I ended up doing this: https://github.com/andrew/nodecopter/blob/bb1246457145a61d8be2ef99c5058c9818377e2f/bin/nodecopter\n. ",
    "fingerpich": "I had the same problem but the following code works for me\n```js\nvar program = require('commander');\nprogram\n  .version('0.0.1');\nprogram\n  .command('test [name]')\n  .description('test command')\n  .action((name, cmd) => {\n    ...\n  });\nprogram\n  .parse(process.argv);\n```. ",
    "guirong": "+1\n. ",
    "olalonde": "+1 .... this is a very useful feature I can't believe it hasn't been implemented yet. I would drop the \"Description: \" prefix though.\n. ",
    "dcrockwell": "+1 Please accept Vagrant's pull request.\n. ",
    "matthewp": "No idea, this is from a long time ago. \ud83d\ude00 Feel free to close.. ",
    "sahlouls": "Hi,\nStill not clear, nor documented how test git-styled commands with seprate files (npm link) and how to publish them properly ?\nHelp required.\nThanks. ",
    "nickradford": "I see that there's program._events which is an object with keys of each command defined.\n. ",
    "hippietrail": "I just ran into this problem the first time I tried to use commander.\nMy project looks up entries on Wiktionary like this:\nnode wikibsearch.js en wiktionary 20130122 word\nBut of course Wiktionary has entries for not just words but prefixes and suffixes so:\nnode wikibsearch.js en wiktionary 20130122 -ing\nDoesn't work because -ing looks like an option to commander and I can't find any way to escape it (on Windows).\n. ",
    "nornagon": "I'm seeing this on OSX in iTerm, too. Worrying.\n. ",
    "mreinstein": "any feedback on this patch?\n. ",
    "ohjames": "This would be really nice, any reason the issue is open for 2 years without any notice?\n. My first day with node-commander and I've already hit issues solved by this PR. Would be so good if someone could look at this but there seems to be many neglected PRs :(\n. Don't have the time to help out with this, found another library that supports it.\n. @jakiestfu it's been added to yargs with the next flag and will be officially released within a few days.\n. @apla thanks for the update, I'm your first star! Hoping you've finally made the holy grail of node.js cmd line argument parsers.\n. @boutell nope I've been using yargs for the past few years instead. It's pretty good.. It works if you use -v, --verbose <val> as the string (but then you have to use -v1 instead of -v).\n. Another example with a similar principle, this time broken in a different way:\n``` javascript\nvar program = require('commander');\nprogram.option('-n, --some-number ', 'a number', parseInt, 100)\nprogram.parse(process.argv)\nconsole.log(program.someNumber)\n```\nRunning it:\n% node test.js      \n100\n% node test.js -n 14\nNaN\nIf I remove the default argment (, 100) the latter works:\n% node test.js -n 14\n14\n. @xgbuils I think you'll have to fix this yourself or use an alternative project such as yargs if you want to do this.\n. ",
    "buerkle": "Fixed conflicts and changed Default to default. ",
    "gagle": "https://github.com/gagle/node-argp\n. ",
    "jamielinux": "False alarm. License text is included in the README.\nSorry for the noise.\n. ",
    "nitoyon": "This bug is fixed by my pull request #121.\nI hope @visionmedia would merge it.\n. If you aren't using command(), see this quick hack: nitoyon/livereloadx@521581279a1f1d840685d49729d6d0cf3a64d1b.\nI'm avoiding this bug by using lower API of commander.js.\n. ",
    "GoalSmashers": "Perfect, thanks a lot!\n. That's a nice bit. We'll check that or maybe your patch will get pulled in the meantime. Thanks for sharing!\n. ",
    "cades": "+1\n. ",
    "rlidwka": "+1, the bug still exists in 1.2.0\n. > mm i think the cleanliness of yaml is worth it alone\nYes, it's definitely worth it.\nIt doesn't matter how difficult they are to parse (because there are existing yaml parsers already), and the syntax is just way better than json.\n. Bad idea, people usually make pull requests against master branch, and another dev branch would be confusing.\nIf you want to have a stable / always deployable branch, just create a separate one for that.\n. > For multiline var assignments and ternary expressions, place operators before new line instead of after.\nBad idea. In case of var assignments, trailing comma is easy to miss, therefore prone to errors.\nDo you see an error here?:\njs\nvar self = this,\n   option = new Option(flags, description)\n   oname = option.name(),\n   name = camelcase(oname);\nAnd how about this one?:\njs\nvar self = this\n  , option = new Option(flags, description)\n    oname = option.name()\n  , name = camelcase(oname);\nMultiline statements with leading operators don't have that kind of error, but leading operators are much more readable than trailing ones.\nI could easily read this, because indentation + leading ternary shows code structure nicely:\njs\n    return cmd._name\n       + (cmd._alias\n         ? '|' + cmd._alias\n         : '')\n       + (cmd.options.length\n         ? ' [options]'\n         : '') + ' ' + args\n       + (cmd.description()\n         ? '\\n   ' + cmd.description()\n         : '')\n       + '\\n';\n   }).join('\\n').replace(/^/gm, '    ')\nBut this looks like a random mess of strings with a different indentation. I noticed ternary operators only after a while:\njs\n     return cmd._name + (cmd._alias ?\n         '|' + cmd._alias :\n         '') +\n       (cmd.options.length ?\n         ' [options]' :\n         '') +\n       ' ' +\n       args + (cmd.description() ?\n         '\\n   ' + cmd.description() :\n         '') +\n       '\\n';\n   }).join('\\n').replace(/^/gm, '    '),\n\nAdded some explicit newline characters on help information instead of joining empty strings\n\nJoining empty strings is actually an attempt to make code look like the output. If you're using newline characters, spacing between lines in the code and in the output is different. So \"-1\" on that as well.\nI could agree that i > 0 && (lastOpt = this.optionFor(args[i-1])); looks weird, but generally I'd just leave current code as is.\nI'd say don't use JSHint, it has some less than sane defaults, and it can't really be configured. Instead, you can use ESLint, which you can configure as you like. And don't blindly follow linter tools (before you review each and every one config option) - it is almost always a bad idea.\n. Looks good to me.\n. removing a tag doesn't count as rewriting history\n. Maybe backticks look better there, but this quoting style' is **not** a typo.\n. > I'm actually not familiar with thisquoting style', is it meant to resemble \"pure\" shell scripting?\nIt is meant to resemble \u2018single typographic quotes\u2019, opening one and closing one respectively.\nI know a few formatters that replace `this' with \u2018this\u2019 and ``this'' with \u201cthis\u201d\n. It's deprecated.\n. Isn't it what child_process.fork() is for?\n. Binary might not be called \"node\". For example, on ubuntu it's sometimes called \"nodejs\", and on windows it might be renamed too because of the conflict with node.exe service from microsoft.\nYou can use spawn(process.execPath, args, ...) like it was suggested in one of the previous PRs. Or fork. Same thing.\n. ",
    "davidchambers": "Fixed in #216\n. ",
    "eps90": "Sorry, my bad and my lack of JS knowledge :) Here's properly designed loop for parsing commands:\njavascript\nvar app_commands = this.loadCommands();\n    for (var i = 0; i < app_commands.length; i++) {\n        var app = app_commands[i];\n        if(typeof app != 'undefined') {\n            var cb = (function(app) {\n                return function() {\n                    Console.info(\"Executing \"+app.class_name);\n                    var application_class = require(app.path);\n                    var application = new application_class();\n                    application.run()\n                }\n            })(app);\n            program\n                .command(app.command)\n                .description(app.description)\n                .action(cb);\n        }\n    }\n. ",
    "jkroso": "would be good to merge this because it takes a while to debug a process that hangs. Its not obvious to check the state of stdin if your not touching it yourself.\n. ",
    "mnewt": "Yes, please merge this!\n. ",
    "xingrz": "+1\nI've been waiting for the merging for over 4 months.\ntemporary work-around to prevent hanging the run loop:\njs\nprogram.choose(items, function (i) {\n  process.stdin.pause() // work-around for #133\n  // ...\n})\nand\njs\nprogram.prompt('type something: ', function (input) {\n  process.stdin.pause() // work-around for #133\n  // ...\n})\nplease!\n. @visionmedia I've just found those prompt methods are removed in the 2.X release. Is there any substitute module or could this pr be merged into the 1.X branch? please, again.\n. ",
    "mgutz": "No way to cancel, closing. Needs a base directory when required from a separate directory.\n. ",
    "jrschumacher": ":+1: \nThis is what I did:\n``` js\n//...\nvar stdin = '';\nprogram\n  .command('some-command [message]')\n  .action(function(message) {\n    if(stdin) {\n      message = stdin;\n    }\n  });\nif(process.stdin.isTTY) {\n  program.parse(process.argv);\n}\nelse {\n  process.stdin.on('readable', function() {\n      var chunk = this.read();\n      if (chunk !== null) {\n         stdin += chunk;\n      }\n  });\n  process.stdin.on('end', function() {\n    program.parse(process.argv); \n  });\n}\n```\n. ",
    "Potherca": "I did the same thing here. Works like a charm.. ",
    "fjenett": "+1\n. ",
    "kaizhu256": "+1\n. ",
    "glenjamin": "Commander delegates all handling of unknown options to a single function unknownOption.\nThat means you can do this in your application\n```\nprogram.unknownOptions = function(){}\nprogram.parse(process.argv)\n```\nEt voila, no errors on unknown options. You can also use this to add custom unknown option handling if you choose\n. ",
    "doozr": "The unknownOption = function(){}; works well enough, and I haven't touched the project that needed this change for 18 months. \n. ",
    "magalhas": "I confirm this.\n. ",
    "jcumminsr1": "Not sure. I think I was having trouble using args previously and had better luck with rawArgs. Probably something in my code. I'll remove.\n. ",
    "paulmillr": "@visionmedia merge pls\n. ",
    "macbre": "@visionmedia: +1\n. ",
    "joshmanders": "+1 on this too.\n. :+1: for anal retentiveness.\n. ",
    "alexmingoia": "For anyone else who comes across this... it's because you've parsed the program arguments after displaying help. You should parse them before displaying help.\n. ",
    "travisjeffery": "``` yml\noptions:\n  - flags: -a, --anchovies\n    description: Add anchovies?\n\n\nflags: -o, --onions\n    description: Add onions?\n    default: true\n\n\nflags: -v, --olives\n    description: Add olives? Sorry we only have black.\n    default: black\n\n\nflags: -s, --no-sauce\n    description: Uh... okay\n\n\nflags: -r, --crust \n    description: What kind of crust would you like?\n    default: hand-tossed\n\n\nflags: -c, --cheese [type]\n    description: optionally specify the type of cheese\n    default: mozzarella\n```\n\n\nhere's a solution i was thinking of using yaml\n. mm i think the cleanliness of yaml is worth it alone. i definitely wouldn't want to read and write my example above in json. you could use our read-metadata module: https://github.com/segmentio/read-metadata which supports both yaml and json.\n. ",
    "mvayngrib": "collisions aside, collapsing the command/program and passed options objects makes for a weird coding and debugging experience. To see the options passed in under the debugger, I have to do mental gymnastics to separate Command properties from the options specified for my particular command. The ugly workaround I'm using:\njs\nconst deployCommand = program\n  .command('deploy')\n  .option('-m, --models', 'deploy models')\n  .action(function (cmd) {\n    const opts = _.pick(cmd, deployCommand.options.map(opt => opt.name())) // <-----\n    actuallyDeploy(opts)\n  })\nIt would nice to be able to not have to worry about this, and be able to get all the passed options, e.g. via program.parsed.options, command.parsed.options.. ",
    "eviltik": "After going deeper in tickets, i completely understand. Thanks visionmedia.\n. ",
    "Niggler": "@thethomaseffect @alejonext sorry I didn't notice the request (plus it came from September 15, not July 20, so it technically wasn't a year)\nWhat I meant was that how do you configure commander to handle the flag --parse?  For example:\nvar program = require('commander');\nprogram.option('-p, --parse', 'parse');\nprogram.parse(process.argv);\n/* how do i get the value here? */\n. ",
    "Ognian": "+1\n. ",
    "sonnym": "@visionmedia Any chance you could take a look at this?  Seems there are a few other people looking for this. Thanks!\n. ",
    "jbrudvik": "+1\n. May not be. Other projects use it (e.g., https://github.com/strongloop/express) and I personally think it's a nice convenience. Feel free to reject.\n. ",
    "marklu": "+1\n. ",
    "sindresorhus": "No, it's been in npm for at least a couple of years: https://github.com/isaacs/npm/commit/144b26a436d3393057f8d2611bbba80a61ee206a#L9R0\nI recently discovered it and now much prefer to explicitly define what goes into my packages than having a long list of ignores in a separate file. Hopefully you'll agree.\n. ",
    "jedmao": "I'm going to have to start doing this now. Thanks @sindresorhus.\n. ",
    "wwqrd": "It was removed here:\nhttps://github.com/visionmedia/commander.js/commit/bf5e1f5ec9fb1af23dd873117558575cd01d7415\nCommit message is \"remove input methods (.prompt, .confirm, etc) they belong in a different library\", wondering what that library is :-)\n. ",
    "duro": "I too am curious about this as well? Has this \"different library\" been created?\n. ",
    "tonylukasavage": "+1 for leaving as is, I prefer the ability to specify short flags rather than a redundant method for specifying long flags.\n. +1\nThe issue is here: https://github.com/visionmedia/commander.js/blob/master/index.js#L547\nThere's a check that makes sure the next thing on the command line after a required option does not start with -. If it's a required option, though, who cares? Any string after the option itself should be a valid value for the option. I get that it's a validation check to try and account for someone missing a value for a required option, but it's at the expense of valid functionality. I would very much prefer this additional validation be removed for the sake of having better functionality.\n. @visionmedia -DEBUG isn't meant to be legal on its own, nor should it be. It's supposed to be literal input to the require option. I would imagine in almost all cases the CLI would wrap the arguments to the required option like this:\nCOMMAND --cflags \"-DDEBUG -DSOMETHINGELSE\" --other -yxz\nIt would think the potential confusion would be minimal, as anyone encountering the syntax would be using a project in which that syntax is known and defined. If I'm using a CLI tool for a project I know accepts cflag style options, I don't think seeing --cflags -DDEBUG would be off-putting. That said, I was personally stylistically encourage the use of quotes around the value.\n. @visionmedia I had another idea, but I didn't want to take the time to implement it without your input. I thought rather than as a rule having all required options take the next argument as a literal, perhaps there could be a config option (like flag, description, coerce, default) for options to indicate that they should take the next argument as a literal, only in that case would they avoid the additional optionMissingArgument() check, avoiding confusion in all but the specifically designated cases.\nI didn't want to screw with your current option() format though without seeing how you thought that might be done, since its style for me is one of the high points of this module. Essentially, you'd be able to specify in the option() call that this particular option takes the next argument as a literal no matter what it is. Personally, I think that required options are enough to indicate that, but if you feel there would be confusion, perhaps this would be a positive compromise. \nThoughts?\n. Any thoughts here @visionmedia? I'd love to use commander in our current project, but this is a blocker for our purposes. Again, I'd be happy to implement the alternative I mentioned as well. \n. To be fair, they are called \"options\". Wouldn't a required option be better defined as a raw argument?\n. Thanks @Mithgol for getting that resolved.\n. @visionmedia FYI, that's why #217 is failing the travis check in the PR.\n. I've experienced the same. I have a nasty little hack in place at the moment that removes options I want to pass to the subcommand right before the parse.\n. To be clear, I'm having the same problem as @whitlockjc \n. @thethomaseffect any plans for a 2.4.0 or 2.3.1 release? I didn't see any obvious documentation or milestones set up and I was wondering when this would be in an official version.\n. You didn't parse()\nOn Jan 7, 2015 3:25 AM, \"Fokke Zandbergen\" notifications@github.com wrote:\n\n@tonylukasavage https://github.com/tonylukasavage was it a deliberate\ndecision for opts() not to apply the defaults for options?\nprogram\n  .version(pkg.version, '-v, --version')\n  .description(pkg.description)\n  .option('-d, --project-dir [path]', 'the directory containing the project [.]', process.cwd());\nconsole.log(program.projectDir);\nconsole.log(program.opts());\nThe first log has the default, the second one not.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tj/commander.js/pull/262#issuecomment-68991556.\n. @thethomaseffect is this not obvious from the included test cases? If not, here's roughly how I'd be using it.\n\nsample.js\n``` js\nvar program = require('commander');\nprogram.description('my extendable CLI');\n// execute code to dynamically load commands from my environment into \"program\".\n// Let's say for the sake of showing output, I found the commands \"new\" and \"run\".\n// now I want to perhaps log/trace what I've loaded\nconsole.log('commands:');\nprogram.commands.forEach(function(command) {\n  console.log('* ' + command.name()); // without this PR, it would be \"command._name\"\n});\n```\noutput\ncommands:\n* new\n* run\nIn the end, it's simply making public the _name property in way identical to the other command properties like description, usage, etc...\n. I debated even adding the set functionality in the original PR. I have no objection to removing it. I can do it this weekend (sick today) if no one beats me to it. \n. @zhiyelee I wouldn't change the API. It is what people have come to expect and works well in most cases. I already handle this situation, post parse(), in my code in a fashion similar to this:\njs\nObject.keys(program.opts()).forEach(function(opt) {\n  if (Object.prototype.toString.call(program[opt]) === '[object Function]') {\n    delete program[opt];\n  } \n});\nThis removes any option that is an function, hence making undefined any option that wasn't assigned. Works well for me. Perhaps similar logic can be pulled into commander.js directly, making my workaround unneeded, and resolve this issue without an API change.\n. Upon further inspection, this seems to be an error in the logic in parseArgs(). It strips the first argument off the list of arguments if it has a listener. This I believe is in the case of actions. Unfortunately, the listeners for both actions and options share the same space, and can end up having the same name, as in my case above. I'm not sure, at this moment anyway, what the least invasive way to fix this would be. I'm investigating, but would love to hear if there's a simple way to avoid this.\n. bump.\n. Windows support has been one of the reasons in the past that I never pursued this personally. That, and the fact that I think a solid usage doc with a levenshtein distance check on attempted command executions (like git) usually covers the case. IMHO, I feel like if you're leaning on autocomplete for your CLI, you might have a design issue with it. Not to say that they're aren't real cases that could use it, but I'm of the opinion they should be rare.\n. There's a handful of these since when you create and parse options, they are placed directly on the program object, which an EventEmitter. This means you'd also collide with anything on the Command object/prototype contained with commander.js. Frankly, there's lots of them and you'd have to check the source to know exactly which ones, though some of the ones that are likely to cause collisions are action, option, command, opts, and JS internals like apply and call.\nA while ago I submitted #262 that added the opts() function to return the set of options defined on the program object in order to return options cleanly and reduce the number of possible collisions. This was only a first step though. The change that would reduce the collisions for good would be then no longer writing the options back onto the program object after parsing. This, IMO, is unlikely to happen since it would be a major breaking change, fundamentally changing how commander is used.\nAs far as the docs, I'm sure if someone submits an accurate PR I'm sure it would be considered for a caveats section or something similar.\n. So I hacked together a script that will list every possible collision (I think). Note that these are possible collisions. For example, Function.name is never used in commander.js, so while name is on the list, it won't be a problem. If Function.name is ever used, it would then become a real conflict, not just a possible one.\nGot the getAllPropertyNames function on this SO post\n``` js\nfunction getAllPropertyNames( obj ) {\n    var props = [];\n    do {\n        props= props.concat(Object.getOwnPropertyNames( obj ));\n    } while ( obj = Object.getPrototypeOf( obj ) );\n    return props;\n}\nfunction unique(val, index, array) { \n    return array.indexOf(val) === index;\n}\nvar program = require('commander');\nprogram.parse(['node','test']);\ngetAllPropertyNames(program.Command).concat(getAllPropertyNames(program)).sort().filter(unique);\n```\nAnd right now, you'll come out with a list like this:\njs\n[ 'Command',\n  'Option',\n  '__defineGetter__',\n  '__defineSetter__',\n  '__lookupGetter__',\n  '__lookupSetter__',\n  '__proto__',\n  '_allowUnknownOption',\n  '_args',\n  '_events',\n  '_execs',\n  '_maxListeners',\n  '_name',\n  'action',\n  'addImplicitHelpCommand',\n  'addListener',\n  'alias',\n  'allowUnknownOption',\n  'apply',\n  'args',\n  'arguments',\n  'bind',\n  'call',\n  'caller',\n  'command',\n  'commandHelp',\n  'commands',\n  'constructor',\n  'description',\n  'domain',\n  'emit',\n  'executeSubCommand',\n  'hasOwnProperty',\n  'help',\n  'helpInformation',\n  'isPrototypeOf',\n  'largestOptionLength',\n  'length',\n  'listeners',\n  'missingArgument',\n  'name',\n  'normalize',\n  'on',\n  'once',\n  'option',\n  'optionFor',\n  'optionHelp',\n  'optionMissingArgument',\n  'options',\n  'opts',\n  'outputHelp',\n  'parse',\n  'parseArgs',\n  'parseExpectedArgs',\n  'parseOptions',\n  'propertyIsEnumerable',\n  'prototype',\n  'rawArgs',\n  'removeAllListeners',\n  'removeListener',\n  'setMaxListeners',\n  'toLocaleString',\n  'toString',\n  'unknownOption',\n  'usage',\n  'valueOf',\n  'variadicArgNotLast',\n  'version' ]\nPerhaps a @zhiyelee could weigh in on how we might want to document this.\n. FYI, if you invoke your tests programmatically instead of subprocessing with spawn(), you can use the property runningCommand to access the child process launched after parse().\n. You'd have to invoke commander directly to execute you command. This is a wildly impractical example, but let's you know how you can use the runningCommand property of commands.\n```\nvar program = require('commander');\nprogram\n    .description('runningCommand test')\n    .command('foo', 'the foo command to be killed');\nprogram.parse(process.argv);\nprogram.runningCommand.on('exit', function(code) {\n    console.log('data from foo: ' + code);\n});\n// program.runningCommand.kill();\n``\n. yeah, i agree, dug through the source and just happened uponrunningCommand` at one point\n. ",
    "stephenmathieson": "@alejonext thanks!\n. The gh pages still suggest input methods exist; see http://visionmedia.github.io/commander.js/#Command.prototype.prompt\n. @natrixnatrix89 I've ended up pinning commander at 1.5.x, but https://npmjs.org/package/prompt is a nice alternate library for cli prompts\n. ",
    "natrixnatrix89": "It would also be very nice to add a link. So that those who came looking for prompt|password|choice functionality could see where to redirect. I lost quite a lot of time today trying to figure, why doesn't it work as described in http://visionmedia.github.io/commander.js/#Command.prototype.prompt .\nAnd only when looking in source and commit history, I saw that this functionality has been removed with message:\n\nremove input methods (.prompt, .confirm, etc)\nthey belong in a different library\n\nWhat library has it migrated it to? What do I install for this functionality. The only reference I saw was in comment: https://github.com/visionmedia/commander.js/commit/bf5e1f5ec9fb1af23dd873117558575cd01d7415#commitcomment-3940721\nIt would save a lot of time if such reference was added next to links for progress bars and tables in CLI.\n. Thanks @stephenmathieson .\n. ",
    "zhuangya": "why there is still docs for prompt, password and choice since they were removed like a year ago :sob: \ni\n. ",
    "Nate-Wilkins": "Does closed mean taken care of or being looked into?\n. ",
    "srquinn21": "Its been a bit since I made the PR, but basically, I was seeing the following in the help screen:\n```\nUsage: custom-help [options] [commands]\nCommands:\nfoo   trigger command foo\n  bar   trigger command bar\nOptions:\n-h, --help     output usage information\n  -V, --version  output the version number\n```\nWhen I'd like to see:\n```\nUsage: custom-help [options] [commands]\nCommands:\nfoo            trigger command foo\n  bar            trigger command bar\nOptions:\n-h, --help     output usage information\n  -V, --version  output the version number\n```\nTotally a mater of preference and like I originally stated, I can be a little anal about columns lining up. However, it was such an easy one line fix that I thought I'd send a PR anyway. Thanks for checking in. Sorry to see TJ move on.\n. ",
    "ajb": "Can this get pulled? :stars: \n. ",
    "thibaultcha": "I am looking for this actually, can't find a way to do it. Doesn't seem supported. Have you made any progress on it?\n. For now, I've managed to do this using program.rawArgs but @visionmedia might be right for UX. Thanks to you two anyway.\n. ",
    "pyrtsa": "How about foo --flag bar --flag baz, and an setting to make repeated assignments of a command option not override the previously set value but to append the array of values provided so far?\nIn that case,\n- calling foo would result in program.flag = [],\n- calling foo --flag bar respectively program.flag = ['bar'], and\n- foo --flag bar --flag baz in program.flag = ['bar', 'baz']\n. \u2026And, as a matter of fact, this can already be done using the formatter function of .option(\u2026]:\n``` js\nfunction appender(xs) {\n  xs = xs || [];\n  return function (x) {\n    xs.push(x);\n    return xs;\n  }\n}\nprogram.option('--flag ', 'Pass multiple values for flag.', appender(), []);\n```\nI hope this helps!\n. It might make sense to point this out in the documentation, and maybe provide the above definition of appender() as part of the library.\n. ",
    "th0r": "There is a Coercion section in documentation that contains simpler version of appender function:\n```js\nfunction collect(val, memo) {\n  memo.push(val);\n  return memo;\n}\nprogram.option('-c, --collect [value]', 'A repeatable value', collect, []);\n```. ",
    "talon": "180\n. I meant to reference #181. My bad.\n. It's no duplicate. I just submitted a PR for this issue.\n. #178\n. ",
    "evanlucas": "Sorry for the duplicate issue.  Should I go ahead and close?\n. Ah great.  Thanks!\n. ",
    "wbyoung": "+1\n. ",
    "JasonGiedymin": "Or you could have '--parse [my list of parses]' which you would then in your app split/parse appropriately\n. ",
    "badsyntax": "Ok guys, perhaps there's some misunderstanding here. Forget about parse, it was just an example. \nPerhaps this code demonstrates the issue better:\n``` js\nvar program = require('commander');\nprogram.option('-o, --option');\nprogram.option('-v, --version');\nprogram.option('-a, --action');\nprogram.option('-n, --normalize');\nprogram.option('-e, --example');\nprogram.parse(['node', 'test', '--option', '--version', '--action', '--normalize', '--example']);\nconsole.log('option? %j', program.option);        // undefined\nconsole.log('version? %j', program.version);      // undefined\nconsole.log('action? %j', program.action);        // undefined\nconsole.log('normalize? %j', program.normalize);  // undefined\nconsole.log('example? %j', program.example);      // true\n```\nAll of those console.log's should be outputting true. That is the crux of my bug report. \n\nI understand it's pretty much impossible to fix this while keeping backwards compat. Tbh I don't understand why options were added to the command instance in the first place. \nMy understanding of the issue is as follows: options are saved on to the command instance, thus if I try to have an option with a name that matches a property/method of the Command object, then things break. The reason why I can't use one of ['option','version','action','normalize'] is because those are method names on the Command object, and things break with this logic. \nIt's so glaringly broken to me, I don't understand why others can't see this, or why no-one else has had issues with this. I have to assume there's something I'm missing here :/\n. Oh I see now, thanks for clarifying. Personally I would certainly find it very useful if the options could be returned from .parse().\n. ",
    "vohof": "good point @yanickrochon!\n. ",
    "mdevils": "Will this be merged?\n. ",
    "leepowellcouk": ":+1: \n. ",
    "peterkrenn": ":+1:\n. ",
    "Mithgol": ":+1:\n. Also, using named required arguments (instead of numbered required options) facilitates the\u00a0use\u00a0of\u00a0them in\u00a0arbitrary\u00a0order. It's easier to\u00a0remember their\u00a0names than their\u00a0order. (Though less\u00a0easier to\u00a0type.)\n. @Jeremial\nYou should just hit the subscribe button for\u00a0that\u00a0PR and\u00a0then GitHub will let\u00a0you know when it's merged.\n. I've noticed \u201cThe Travis\u00a0CI build could\u00a0not complete due\u00a0to an\u00a0error\u201d message and\u00a0opened a\u00a0new pull\u00a0request (#218) about\u00a0it.\n. ",
    "briandipalma": "Ideally I'd like to use commander for all my CLI parsing needs, I think this required raw argument use case is quite useful.\n. ",
    "mikejholly": "But doesn't <foo> explicitly mark foo as required? As is, it's not required at all\u2014it's still optional.\n. ",
    "MichaelBorde": "\n1\n. Thank you :)\n. \n",
    "dbushong": "Sorry, didn't see messages.  If you're still interested, here's a thread about how this won't work, e.g., on MacOS: http://superuser.com/questions/33914/why-doesnt-echo-support-e-escape-when-using-the-e-argument-in-macosx\n. This is a dup of #186 \n. ",
    "dead-horse": "oh, i see, somebody maybe listen the event outside.\nhow about this commit ? do not change the name, just hold the emit if the action did not set.\n. any chance to fix this issue?\n. @visionmedia  take a look at this?  really need this fix, my node cli tool can not run in windows now.\n. ping @visionmedia \n. ",
    "markstos": "@visionmedia With no further feedback on this change request in three months, I recommend closing the issue. \n. This issue can be closed. It is a dupe of the patch submitted in #203: https://github.com/plievone/commander.js/commit/a11b34f0ab2bd04f4baecf0776df3257ee46e649\n. ",
    "fyockm": "@visionmedia the travis build failed, not because of my change, but on npm install.\nAccording to this post on the npm blog. Looks like there are 2 options: \n1. from the post, \"you can work around this by doing npm config set strict-ssl false\".\n2. update node version in .travis.yml to 0.8 or above\nI will add another commit that handles both.\n. Following some copy/paste idiocy by me, the Travis build is passing once again.\n. Thanks @zhiyelee. Yep, the second was handled by #218. Sorry- should have split them apart initially.\n. I submitted something quite similar a while ago on #191 with https://github.com/fyockm/commander.js/commit/b346418fd4ea9be6faba95283de66bf18c7d80dd. No response for me.\n. @visionmedia no problem. I probably could/should have broken out the travis piece as a separate PR to call more attention to it.\n. ",
    "joshuaspence": "+1 for version callback\n. ",
    "ming-codes": "I just thought of this, then I saw this pull request. :+1: \n. Yes I have. I think program.helpInformation() and its associated  program.usage(), program.commandHelp(), and program.optionHelp() does what I needed.\nNow I just wish they're officially supported and have it documented here: http://visionmedia.github.io/commander.js/\n. ",
    "AlphaHydrae": "Just fixed the undefined check you commented on.\n. ",
    "westdavidr": "I'm having the same issue. Based on the documentation, that should be all you need. \n. Ah.. looks like these methods were removed in commit: https://github.com/visionmedia/commander.js/commit/bf5e1f5ec9fb1af23dd873117558575cd01d7415\nTry using https://github.com/flatiron/prompt or https://github.com/visionmedia/co-prompt \n. ",
    "mildfuzz": "Why though?\n. Okay, it's labelled a complete solution for node.js command-line interfaces. \nIt occurs to me that an arg parser is part of a solution, not a complete one.\n. Ha, that's certainly one solution ;)\u2014\nSent from Mailbox\nOn Wed, May 7, 2014 at 4:35 PM, TJ Holowaychuk notifications@github.com\nwrote:\n\nsure I'll re-label then\nReply to this email directly or view it on GitHub:\nhttps://github.com/visionmedia/commander.js/issues/199#issuecomment-42442804\n. \n",
    "fatk": "I think the .prompt()/.password() part should be removed from this documentation as well then:\nhttps://tj.github.io/commander.js/#Command.prototype.prompt\n. ",
    "rymai": "I ran across this issue too. I've worked around (temporarily I hope) it like this:\n``` javascript\nfunction myParseInt(string, defaultValue) {\n  var int = parseInt(string, 10);\nif (typeof int == 'number') {\n    return int;\n  } else {\n    return defaultValue;\n  }\n}\n```\nand then:\njavascript\n require('commander').\n option('--port <num>', 'Port number to listen on', myParseInt, 9000).\n parse([ 'node', 'main.js', '--port=80' ]).\n port\n. ",
    "oliverzy": "Me too. I think maybe it should be mentioned in doc at least. It took me half hour to figure out what happened.\n. ",
    "hildjj": "At a minimum, the README must be fixed.  The examples in it do not run anymore, because:\njavascript\nparseInt(\"6\", 2)\nyields NaN.  The second parameter to parseInt is all about the base.\n. I just ran into this too. Version 2.8.1.\n. You can fix this by modifying line 10 to be program.parse(process.argv);. \n. I'll also fix #188 at the same time.\n. Sorry, thought I had gotten all of the tests fixed up.  I think there's a legitimate discussion to be had about what exit code to use when the user asks for help with --help vs. when they supply invalid arguments.  I would be fine with --help returning 0, if you prefer.\n. Oh, and I'm also happy to change the defaults so that the interface doesn't change, and only the people that want 64-exits get them.\n. Look at the deploy example: https://github.com/tj/commander.js/blob/master/examples/deploy\nIt took me a couple of tries to parse through the documentation to understand what that example is doing.  The action for each command gets an options parameter that is almost exactly what you want, with a options.parent that contains the top-level options.  each call to command starts a new chain, where the options set in that chain only apply to that command -- this is why each command definition starts with program again.\n. ",
    "subchen": "Yes, it is good idea.\n. ",
    "MarcDiethelm": "I tried for a long time to grok what what you are saying, digging through the code (and the errors) and thinking \"man, this makes no sense.\"\nUntil I found this: https://github.com/visionmedia/commander.js/blob/master/examples/pm\nWhich tells me what I want is not actually implemented, and what is implemented is not what I want. What I was looking for is getting specific help for regular commands (not separate executables).\nPut differently I want the two calls below to result in the same output.\n$ program help command\n$ program --help command\nWhich I finally got working like so:\njs\nprogram\n    .command('help [command]')\n    .description('Show usage information')\n    .action(function(cmd) {\n        'string' === typeof cmd\n            ? program.emit(cmd, null, ['--help'])\n            : program.outputHelp()\n        ;\n    });\nYeah, docs could be better. :facepunch:\n. ",
    "aurora": "Mmmm ... i really don't get it ... the \"help\" command does only seem to work when you make use  of program.command('cmd', 'description'); but not for program.command('cmd').description('description').  I can't use the first variant, because the first variant requires the command to be a module file which i do not have and do not want in my case.\nis there any reason this does not work for the second form other than that it's currently not implemented?\n. ",
    "zxqfox": "seems like dup of #184 \n. ~~Any chance to get this merged?~~\nOh, rebasing...\n. Added tests also.\n@zhiyelee Please take a look. There is a little change which would make our life much easier.\n. @zhiyelee Nice ;-) Feel free to point me If something is wrong or PR will need another rebase.\nSome requirement in sinon doesn't work with node 0.6 and tests fails ;-(\n. Fixed tests, polished code a little. PR is ready ;-)\n. Thanks! ;-)\n. Probably a big part of mistakes like this can be found automatically with jscs-jsdoc.\n. I'm agreed with @tj, but ok\nWhat's the real reason of reverting? But fix is still viable? I don't see bug atm.\n. ~~Hardcode?~~ It's a length of '  Usage: ' string.\nAnd I'm not sure what here should be. Looks like 4 (common offset for 2nd level), 9 (2+5+1+1 or : after usage) or 9 + cmdName.length + 1.\n. Just fyi: The only thing I don't really like here. But these process.exits makes me mad.\n. ",
    "v0lkan": "@visionmedia is there a reason that this does not get merged. \nIt's a one-liner, and it passes the CI tests.\nIf there's something to be done on my part, I'll be more than happy to do it.\nAnd if there's a certain workflow that I'm not following, please do let me know.\nCheers.\n. ",
    "mattma": "This is nice, why it did not get merged?\n. ",
    "Wyntau": "@dbushong great, your code is more buautiful than mine :+1:\nSo i closed the PR, please let me know when your is merged, thanks~\n. @Mithgol thanks very much!! I didn't even know the subscribe button until you told me. Thank you very much :+1: \n. ",
    "abbr": "Actually this is a bug rather than new feature. The problem is that normalize, which runs before parseOptions, doesn't honor --. Therefore an input such as test -- -t10 is parsed incorrectly into test -- -t -1 -0 by normalize.\n. ",
    "jonasfj": "I'll happily implement this, and file a PR, if we can get some consensus on how to solve the problem.\n. I stand corrected :)\nUsing both program.on('*', function() {/* usage() */}); and  if(program.args.length < 1) { /* usage() */ } does solve the problem.\nCould we either document this... Or add a way to define a fallback action if no action is provided.\nPlease, close this bug, if there is no interest.\n. ",
    "Hypercubed": "If I recall correctly there are two different things:\n1) Unknown command:\nprogram\n   .on('*', function() {\n        \\\\\\ Do something\n   });\n2) No command\nif (program.args.length < 1 ) {\n    \\\\\\ Do something\n}\n. Take a look at bencevans/commander-tabtab.js or mklabs/node-tabtab\n. ",
    "amjibaly": "I'm seeing some inconsistencies with how @Hypercubed mentioned \"No command\" works. I have a command which looks like:\nprogram\n    .command('run <folder>')\n    .option('-e, --env [KEY=VALUE]', 'Environment variables to set in container (repeatable)', collect, [])\n    .option('-r, --restart ', 'Restart passenger/nginx on every request')\n    .description('Build and run a container, watching for changes')\n    .action(require('../lib/run'));\nIf I run this command with run <folder> -r, program.args.length is indeed > 0. However, if I run the command properly (as --help mentions it should be run) then program.args.lengh === 0. In both cases the options are correctly passed to action() with the correct flags set so I'm not sure why this is broken.\n. @SomeKittens never mind, I realized what I was doing wrong. I had program.on('*') after program.parse(process.argv). Thanks!\n. ",
    "mauvm": "Have you tried program.helpInformation();?\n. I think this is related to #225. function(){console.log(\"###\\n\");} will not be called since there is no value given. If it would be called you could simply pass in foo: .option('-f, --foo', foo).\nIn the mean time you could check if foo is set and call the function yourself:\njs\nif( program.foo ) {\n    foo();\n}\n. Oops, I wrote my comment in the commit message..\nI've made readlinkSync() fail silently, because in case of local development the .js extension is not added to the bin variable. The existsSync() check will return false. When readlinkSync() fails, the old value for file will be used.\nAdding && !fs.existsSync(file + '.js') won't do because of NodeJSs require() logic (.node files are also supported). Also see: http://nodejs.org/api/modules.html#modules_file_modules\n. I wasn't able to reproduce issue #220 on a Windows VM. This is because the Windows version of NPM adds a .cmd file which directly calls the bin file itself (with node /path/to/bin/file.js).\n. @visionmedia Any thoughts on this?\n. @visionmedia Please merge. (:\n. @muloka Would you mind elaborating on that?\n. :+1: \n. ",
    "muloka": "This is still broken. The expected behaviour regarding this feature is inconsistent.\nAlso does not work well when using CoffeeScript.\n. ",
    "wayneashleyberry": "Closed due to inactivity.\n. ``` js\n// example.js\n!/usr/bin/env node\nvar app = require('commander')\napp\n  .version('1.0.0')\n  .command('foo', '...').alias('f')\n  .command('bar', '...').alias('b')\n  .command('baz', '...').alias('bz')\n  .parse(process.argv)\n```\n``` js\n// example-foo.js\n!/usr/bin/env node\nconsole.log('hello foo')\n```\nsh\n$ ./example.js foo // hello foo\n$ ./example.js f // nothing...\n. ",
    "stewwan": "+1\n. ",
    "naxmefy": "tested it - yeah nicely bug ^^\n. ",
    "battlesnake": "I never got into using commander due to the above issue - I'll give it a go again soon though, now that it looks to be fixed.\n. ",
    "vaidik": "So what are required arguments for exactly?\n. @foxx @thethomaseffect Can you guys see if this works for you? I needed similar functionality so I thought I might spin up a quick pull request. \n. Other than where I raise the error message and not handling error code, I think I have handled pretty much everything. If I fix that, will you accept the change?\n. Yeah sure. This works for me currently so I would want to use it in my\ncode. But I understand your concern. Let me see if I can do anything to\nreduce the changes.\nVaidik Kapoor\nvaidikkapoor.info\nOn 29 October 2014 15:49, Thomas Geraghty notifications@github.com wrote:\n\nMy problem is the amount of code that's changed for a change that should\nbe 2-3 lines. Don't get me wrong, this is the current codebase's fault, not\nyours, but if I can make changes so that checking if required option\narguments were provided is as simple as it sounds I'd prefer to do that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tj/commander.js/pull/287#issuecomment-60900093.\n. \n",
    "NameFILIP": "I see a lot of open pull-requests.. Will this be merged if I spend time implementing it?\n. ",
    "czardoz": "Is anyone actually working towards this?\n. ",
    "Petah": "\n. ",
    "amrynsky": "just came across this issue and didn't really get why it's still not implemented. I saw different reasons for not doing it, but the main problem that current implementation is not really consistent:\n- In some cases, validation is performed \nprogram.command('command <option>')\nin some not\nprogram.option('--option <option>', 'option')\nwhat the reason to define required option and don't perform any validation? Of course, it's possible to implement custom validation, but then you need to align error messages with standard validation messages like '  error: missing required argumentoption''`\n. ",
    "ratancs": "Any update on this?. ",
    "Strandedpirate": "I immediately regret using this library.. ",
    "schovi": "Any update? :). ",
    "amir-arad": "+1. ",
    "cyrfer": "+1. ",
    "teazean": "+1\nreally want this feature. ",
    "joereynolds": "Just came across this thread and I'm wondering the same thing. How is there not support for required arguments and why the reluctance? :(. ",
    "danihwsr": "+1. ",
    "Tiim": "+1. ",
    "chumster": "+1\n. ",
    "xCykrix": "+1\nThe fact that this still isn't a thing almost hurts. If you want to be a command-line library this should be one of the core features.. ",
    "tecfu": "There needs to be a Github downvote functionality to flag repositories like this. \nUsage statistics and stars are useless for determining whether basic features are broken or code simply doesn't work like you expect it to.. @dessant Beautiful example. Thank you. \nI ended up modifying it a bit because I didn't like seeing the \"help\" and \"version\" fields appear in each command's options when failed. \n.help(false)\n        .version(false)\nLike so: \nyargs\n  .command(\n    'insert',\n    'insert an array of asset objects into ...',\n    (yargs) => {\n      yargs\n        .option('filepath', {\n          alias: 'f',\n          describe: 'Filepath to JSON array',\n          demandOption: true,\n          requiresArg: true,\n          type: 'string',\n          nargs: 1\n        })\n        .option('test', {\n          alias: 't',\n          describe:\n            'Test conversion, but do not insert',\n          requiresArg: false,\n        })\n        .help(false)\n        .version(false)\n    }\n  )\n  .command(\n    'map',\n    'create a document mapping for a given index',\n    (yargs) => {\n        yargs\n        .option('filepath', {\n          alias: 'f',\n          describe: 'Filepath to ...',\n          demandOption: true,\n          requiresArg: true,\n          type: 'string',\n          nargs: 1\n        })\n        .options('index', {\n          alias: 'i',\n          describe: 'Index name to apply the mapping on',\n          demandOption: true,\n          requiresArg: true,\n          type: 'string',\n          nargs: 1\n        })\n        .help(false)\n        .version(false)\n    }\n  )\n  .demandCommand(1)\n  .help(true)\n  .strict().argv;. ",
    "dessant": "After battling with commander.js for some time, I've finally switched to yargs. It has all the features one commonly needs to build CLI tools, including support for required options.\nHere's an example with some basic functionality:\njs\nyargs\n  .command(\n    'create',\n    'Create a new storage version',\n    {\n      message: {\n        alias: 'm',\n        describe: 'Storage version description',\n        demandOption: true,\n        requiresArg: true,\n        type: 'string',\n        nargs: 1\n      },\n      location: {\n        alias: 'l',\n        describe:\n          'Directory where storage versions are kept, grouped by storage area',\n        default: 'storage/versions',\n        requiresArg: true,\n        type: 'string',\n        nargs: 1\n      },\n      storage: {\n        alias: 's',\n        describe: 'Storage area',\n        choices: ['local', 'sync'],\n        default: 'local',\n        requiresArg: true,\n        type: 'string',\n        nargs: 1\n      }\n    },\n    function(argv) {\n      createVersion(argv);\n    }\n  )\n  .demandCommand(1)\n  .help()\n  .alias('help', 'h')\n  .version()\n  .alias('version', 'v')\n  .strict().argv;\n. ",
    "ifeltsweet": "For simple scenarios, following code works well for me:\n```js\nprogram\n  .description('Makes any type of pie.')\n  .arguments('')\n  .action(function (type) {\n     // Bake that pie.\n  });\nprogram.parse(process.argv);\nif (!process.argv.slice(2).length) {\n  program.outputHelp(() => program.help());\n}\n```. ",
    "gerrychristiansen": "Update:  I upgrade my node to latest .10.29  and npm to 1.4.14 and everything installed fine.\n. ",
    "JanisE": "+1\n. ",
    "soyuka": "+1 to merge\n. Thanks! Np I understand ;) will you publish soon?\n. ",
    "himynameisdave": "Would like this option, there are plenty of valid reasons for wanting to do this.\nAt the very least, please make it clear in the docs that --no won't work, thanks. ",
    "Globegitter": "That is my main point currently with commander - an otherwise great library, so this feature would be really helpful.\n. @zhiyelee An updated version soon would be very useful, just ran into needing that today.\n. @zhiyelee thank you that is very much appreciated. \n. Aahh, looking through one of the examples, using .description works. So this could be closed if it is expected behaviour.\nEdit: I do see an inconsistency though. If I use the second parameter for the description the help prints:\n\nEspecially see that automatic help command. If I use .description I don't get the automatic line about help [cmd]\nOn that note, should there be an automatic way to get help for commands? For example to see the options for a command? Can't really find anything in the readme/examples.\n. The use-case I need it for is, I use https://github.com/twokul/yam so users are able to permanently set cli flags within a .sane-cli file.\nSo that file can contain all the potential flags the cli supports such as docker: true, or skipEmber: true, etc.\nBut now I have notices myself that I 80-90% use these defaults, but for some test-cases I just want to be able to quickly change these defaults.\nWhich, as far as I am aware would only be possible by setting e.g. sane up --docker=false --skip-ember=false. But to support that for each flag (quite a few now), I would either have to manually convert the string to a boolean for each flag or check for the strings themselves, which both seems like some unnecessary work, especially because commander already gets them as a boolean.\nLet me know if that makes sense and seems like a legitimate use-case.\n. Good call on the tests. Added them and fixed the implementation - I will also test again in my application asap.\n. @zhiyelee Yeah I am very open to any other way of implementing this. Do you have anything in mind how this could be implemented differently?\n. The general idea was to have all the command definitions in a cli.js and then once they are done resolve a promise, so the cli can be used in a similar manner as to how ember-cli does (they do not use commander.js).\nSee here https://github.com/ember-cli/ember-cli/blob/master/tests/acceptance/generate-test.js#L67 and here https://github.com/ember-cli/ember-cli/blob/master/tests/helpers/ember.js#L18 for example. Not sure if process.on('beforeExit') or after really works that well in such use-cases but I will also speond some more time looking into that and other ways to do that.\n. ",
    "marc0s": "Thanks for the tip!\n. It did :)\nI just create a basic commander object with the common options inside a function that returns it and use that function to initialize each of the commander objects I need, so they're all already populated with the common options.\nThanks!\n. ",
    "b4dnewz": "hi @marc0s, can you share some code or example of how you did? just for the records, thankx. thanks for your explaination @dcbartlett, so is not possible to do something like this? I'm having this issue right now.\npm.js\njs\nprogram\n  .name('cli')\n  .option('-k, --key <apikey>')\npm-foo.js\njs\nprogram\n  .command('list')\n  .option('-l, --limit')\n  .action(options => {\n    console.log(program);\n    console.log(options);\n    console.log(program.options);\n    console.log(program.apikey);\n})\ncli -k 'ABCD' list\nthe apikey from the \"root\" command?. 2 years... will this issue never be addressed? :disappointed: it is an extremely useful feature that you can use an alternative naming convention or specify a file. the main options are not forwarded to the subcommands for example:\npm.js\njs\nprogram\n  .name('cli')\n  .option('-k, --key <apikey>')\npm-foo.js\njs\nprogram\n  .command('list')\n  .option('-l, --limit')\n  .action(options => {\n    console.log(program);\n    console.log(options);\n    console.log(program.options);\n    console.log(program.apikey);\n})\ncli -k 'ABCD' list\nis possible to get the apikey from the \"root\" command?. @PaulBeaudet can you share a working example? because in my parent property there are no root options, btw the code above is pseudo code, actually is not working it should be like in the example:\npm.js\njs\nprogram\n  .name('cli')\n  .option('-k, --key <apikey>')\n  .command('foo', 'a sub command')\n  .parse(process.argv)\npm.foo.js\n```js\nprogram\n  .option('-l, --limit')\n  .parse(process.argv)\nconsole.log(program)\nconsole.log(program.parent) // undefined\n```\nIn my previous message I did a wrong mesh up of something i'm doing which was very long and I cutted and pasted parts without verify if it was really working, actually the my real code is more like this below:\npm.js\njs\nprogram\n  .option('-k, --key', 'the api key')\n .command('section', 'The section subcommands')\npm-section.js\njs\nprogram\n .command('list', 'list section data')\n .option('-l, --limit', 'some limit')\n .action(options => {\n  console.log(options) \n })\nand than I use like: pm -k ABCD section list --limit 50. @PaulBeaudet actually my issue is regarding the \"git-style\" subcommands, that's why your code is working, is not using it, see the two file names: pm.js pm-foo.js are two different files like in this example\nbut.. I can confirm the normal behavior (as you posted) it's working correctly. this will be a super feature, so you can prefix your command line tools with (for example) ASCII art like the most of cli tools out there.. ",
    "pburgmer": "@b4dnewz I did it like this\n```\nconst command = commander.command('merge');\ncommand\n      .description('foo')\n      .option('--bar', 'really?', false)\n      .action(async (args) => { });\naddLoggingOption(command);\n```\nand\nfunction addLoggingOption(command) {\n  command\n    .option('--log-level <level>', 'print log messages of given level and above only', 'info')\n    .option('--verbose', 'set log level to debug')\n    .option('--quiet', 'set log level to warn');\n}. ",
    "dlutwuwei": "Thank you for your reply,  I found why this happpened:\n\ncmd.exe\nbash\nD:\\my\\jdtpl-generator\\test>node test -l 1,2,3,4\n[ 'node', 'D:\\\\my\\\\jdtpl-generator\\\\test\\\\test', '-l', '1,2,3,4' ]\npowershell\nbash\nPS D:\\my\\jdtpl-generator\\test> node test -l 1,2,3,4\n[ 'C:\\\\Program Files\\\\nodejs\\\\node.exe',\n  'D:\\\\my\\\\jdtpl-generator\\\\test\\\\test',\n  '-l',\n  '1',\n  '2',\n  '3',\n  '4' ]\nI log the process.argv, powershell split parameter 1,2,3,4 automatically, i think it's really uncomfortable to be compatiable with powershell. \nBest wishes\n. \n",
    "nowells": "@thethomaseffect thanks! Let me know if there is anything I can do to help, or if you need me to fix/change the approach I have taken.\n. @SomeKittens have you run into any issues while testing/reviewing this code? No pressure, just want to see if there is anything I can do to help!\n. I also switched to yargs a while ago (when this support was not added) and have been very happy with it. I will close this as it will likely no longer be a valid fix.. I was cribbing from https://github.com/visionmedia/commander.js/blob/master/test/test.options.commands.js#L103. Basically, we hijack process.exit(x) and have it throw an error (which help calls process.exit(0)) https://github.com/visionmedia/commander.js/pull/245/files#diff-48e1e0644a9c6aeb3fee25b9561b1692R60 We are OK with having the program exit (that is what help is supposed to do) but we want to assert that it was actually called (we add a on('help') above that sets the variable if help is called.\n. ",
    "jakiestfu": "@ohjames bump\n. @ohjames Which library?\n. ",
    "apla": "@jakiestfu also just released https://github.com/apla/commop\n. ",
    "boutell": "Did this feature (nested commands) ever happen?. ",
    "jwarby": "My bad, didn't realise that a pull request counts as an issue.\n. ",
    "startswithaj": "Resolves https://github.com/tj/commander.js/issues/206\n. resolves #206 \n. ",
    "henrytseng": "Seems like the bug does not exist with \nprogram.option('-g, --geocoords <coords>', 'Geo-coordinates to sort by nearest')\n. Just updated my fork to add quote support for optional arguments\n. Yeah, that's in commit #f317df0 (e.g. - Both the test that you were referring to and a patch to the code).  Let me see what problem it caused in the other test?\n. Just fixed the latest commit in #e161de1\n. Wait, before you close this that means that there will be no support for passing a negative number as a parameter?  Also, passing files through quotes on unix command line preserves escape characters should it not do the same as typical unix CLI?\n. Ok, perhaps I misunderstand.  Can you elaborate? \n. ",
    "rrthomas": "Is the list function not dead code in this example? It is already defined and used in the earlier coercion example.\n. I see that the list function here is different; however, it is not called: it is dead code. Hence, it has no place in this example. Further, the range function already illustrates type coercion, and it does so in the right place: in the coercion example.\n. Apologies if I'm missing something, but as far as I can see:\n1. I suggested removing some dead code (the second list function).\n2. You responded that the dead code is needed to illustrate a point about type coercion; however,\n3. This point is already illustrated by the earlier range function, so\n4. This dead code can be removed without losing the illustration, and at the same time reducing confusion caused by its very existence; in other words: my change does not have the down-side that you suggest.\n. I'm sorry to annoy, I was just trying to understand you. I'm afraid I still don't understand, so please can you make the change yourself, as I'm uncomfortable having my name attached to a change whose rationale I fail to comprehend. Thanks!\n. Commit a1cc98c8 removed the list function.\n. It is the function that is applied to the arguments. Search for \"applied\" in https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply or just search for \"javascript apply applied\"; see also e.g. http://lostechies.com/derickbailey/2012/07/20/partially-applied-functions-in-javascript/\nIf you want to stress the use of apply, you could rewrite to say \"and the function for access is applied to the remaining arguments\".\n. Ping?\n. Further, the way this code works makes it very hard to detect whether superfluous arguments were supplied: if the number of arguments is correct or one greater, then the overwriting of args[self._args.length] gives the impression that the number is correct (whereas if there are two more arguments than expected, this can still be detected).\nHence, at the least, it would seem sensible to change the above to simply args.push(self).\n. I looked into this history of this code, and it was added for the benefit of subcommands, so that the action routine never receives undefined arguments. But it seems to me that it is perfectly reasonable for an argument to be undefined if the corresponding command-line argument was not supplied.\n. I offer a PR, #393, that removes this code, which avoids some checks for undefined arguments in action routines at the expense of making it much harder to check whether there were missing or superfluous arguments.\nThe case of dealing with undefined arguments in action routines will be better addressed by strict argument spec parsing; on the other hand, this change makes it easier to implement automatic strict checking, and possible to implement such checking manually in the mean time.\n. I don't understand why you closed this: my \"possible answer\" involved patching commander.js, so it's not a workaround.. (Note: my original comment had one incorrect detail: the setting of executables is in the command method, not the parse method.). After finding a test failure and studying the code some more, I see that actually the problem is with my reading of the current documentation. Closing.. Closing, since #258 has been merged.\n. Done.\n. Thanks, @SomeKittens!\n. @goloroden: for now, see #257. Please file a new issue for documentation, and I'll do it when I can.\n. @zhiyelee see PR #392.\n. I mean the number of arguments passed to the command.\n. Suppose I declare:\nprogram.arguments(\"<host> [cmd]\")\nthen commander should give an error if I supply fewer than one or more than two arguments.\nWhen a command can take an arbitrary number of arguments, that can be indicated by ..., and then any number of arguments greater than the minimum is allowed, e.g.\nprogram.arguments(\"<style> <file>...\")\nThe patch I have does all of this (and I've been using it now for some weeks!).\n. What I have done is simply brought to top-level commands the ability to specify argument syntax that already exists for sub-commands, and made it a bit more rigorous.\nMy second example specifies two mandatory arguments, whereas you've replaced them with options, which are by their nature optional. I think the idea of \"mandatory options\" is likely to confuse.\nYou're right that this is a change to the parser; however, it can be made backwards-compatible by defaulting the maximum number of allowed arguments to Infinity, so that if the arguments method is not called, things will work as before.\n. @SomeKittens As I said in my initial report, finding out whether you got a suitable number of arguments is currently quite hard: even after patching commander, I still had to make checks in two separate places in my code.\nFurther, what this PR does is simply extend to top-level commands the ability to specify argument syntax that already exists for sub-commands. Once you have that, commander might as well check the number of arguments: still having to do it in your code breaks DRY. Commander has the information to hand, why not relieve the user of this bit of administrivia?\n. The top-level command argument syntax change is PR#258. Sorry that I only just got around to reading your last comment, I'd in fact already made the PR you asked for, AFAICT!\n. I agree this could be an upsetting change. How else could one detect missing or superfluous arguments? I suppose the module could still arrange internally to detect them (e.g. some kludge like having a separate \"real\" count), so I could submit a patch for #259 that does not depend on this PR.\nIf there are (ever?) any 3.x.x plans, I would suggest this would be a good simplifying, if breaking change.\n. ",
    "goloroden": "Any chance that this will be merged in the near future?\n. Awesome, I really appreciate what you did here :-)\nThe only thing I am missing is an update to the docs: How do I use this?\n. Okay :-)\n. Basically I agree with you, but sometimes it could be useful to handle arbitrary input that is not a valid command.\n. @SomeKittens: Why has this been closed? Just because what @chrishiestand is not too hard to implement, my original question has not yet been answered. Is\n\nUnfortunately, at this time program.on('*' is your best bet.\n\nreally the last word on this?\n. So, I finally ended up with this:\njavascript\nprogram\n  .version(...)\n  .command(...)\n  .on('*', function (command) {\n    this.commands.some(function (command) {\n      return command._name === argv[0];\n    }) || this.help();\n  })\n  parse(...);\nThis does the job perfectly for me :-)\n. Great, thanks :-)\n. ",
    "pirelenito": "Sure, will do in the next couple of days.\nSorry about that :)\n. ",
    "knksmith57": "+1\n. ",
    "yiminghe": "+1, need this to notify other caller, such as precommit-hook\n. ",
    "targos": "+1\nFor now I use the following workaround :\njs\nprogram.parse(process.argv);\nif (program.runningCommand) {\n    program.runningCommand.on('close', process.exit.bind(process));\n}\n. ",
    "FokkeZB": "@tonylukasavage was it a deliberate decision for opts() not to apply the defaults for options?\n```\nprogram\n  .version(pkg.version, '-v, --version')\n  .description(pkg.description)\n  .option('-d, --project-dir [path]', 'the directory containing the project [.]', process.cwd());\nconsole.log(program.projectDir);\nconsole.log(program.opts());\n```\nThe first log has the default, the second one not.\n. Same result (probably copy pasted it wrong):\n```\nprogram\n  .version(pkg.version, '-v, --version')\n  .description(pkg.description)\n  .option('-d, --project-dir [path]', 'the directory containing the project [.]', process.cwd());\nprogram.parse(process.argv);\nconsole.log(program.projectDir); \nconsole.log(program.opts()); \n```\n. ",
    "frankie-loves-jesus": "Hi,\nThanks for getting back at me.\nIt works partly. I just can't get rid of these two:\n-h, --help                   output usage information\n-V, --version                output the version number\n. That would be great man. Thanks a lot!\n. ",
    "theganyo": "Not sure if it's important in this context, but the \"rest\" function argument in ES6 uses a prepended ellipses instead of appended. In other words, ES6 would say \"...arguments\" to collect the remainder of arguments in a function while this PR uses \"arguments...\" to indicate similar for a command. Just thought I'd mention it in case anyone feels it warrants discussion.\n. ",
    "coveralls": "\nChanges Unknown when pulling 2147ce8bf76877c900db8a32127d5953a7ecbe93 on zhiyelee:fixdemo into * on tj:master*.\n. \nChanges Unknown when pulling bfdcd88c90714f666781ae35ec75ab7fd9627921 on bcoe:coverage into * on tj:master*.\n. \nChanges Unknown when pulling adb00e1baeaf388488111ca97690891597520998 on bcoe:coverage into * on tj:master*.\n. \nChanges Unknown when pulling adb00e1baeaf388488111ca97690891597520998 on bcoe:coverage into * on tj:master*.\n. \nChanges Unknown when pulling bf00b181b0b672fffd712327c004dfa0eb00e9ac on bcoe:coverage into * on tj:master*.\n. \nChanges Unknown when pulling 398b4139e9502af6a7b7eb29648c701d182f1958 on bcoe:coverage into * on tj:master*.\n. ",
    "hoho": "Thanks. I prefer to roll back to an older version which worked well.\n. ",
    "lakenen": "Oh whoops, didn't see that!\nOn Monday, October 27, 2014, Thomas Geraghty notifications@github.com\nwrote:\n\nClosed #284 https://github.com/tj/commander.js/issues/284.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tj/commander.js/issues/284#event-184421682.\n. What about adding an API method that allows you to get the value of an argument by name? \n\ne.g., something like:\njs\ncmd.get('name');\nWhere get could be something more specific or whatever. That way you don't need a major version bump (it's just a new feature ;).\n. Though, TBH, I think this bug should still be fixed properly in the future, whether that means a major version or not.\n. Sounds reasonable to me! :)\nI actually didn't know I could use prog.opts[name], so clearly calling that out in the docs would be very helpful as well.\n. ",
    "StoneCypher": "I am also facing this.\n. actually it may be that .action is broken entirely; even without .usage(...), and an empty action function, the error still emits.\n. Aha.  If you first specify both .command and .option, then suddenly it works.\nNote that the documentation does not mention either of these things.\n. Unfortunately, someone has closed bug #331 as a duplicate of this bug.\n331 is not a duplicate of this bug.\n. I don't see anything there saying that this is intended.\nI wish you would stop closing bugs until you've talked to the people filing them.  You closed 331 as a duplicate over the filer's protest, and now you're closing this as intended with a doc reference where I can't tell why you think it's intended.\nThe open source norm is to talk to the people filing the bug, on the chance that you misunderstand.\n@zhiyelee Please re-open both bugs.\n. You appear not to have noticed that the thing you're saying intentionally doesn't work is _what the documentation says should work_.\n. Please consider having this abort with a meaningful error, rather than to fail in an obscure way, if it is indeed as designed.\n. @SomeKittens I did comment there before I opened this, and this is not a dupe of #285.\nPlease re-open.\n. Thank you for re-opening.\n. ",
    "morseldesign": "Agree, this is super confusing. Could you make this possible as opposed to having it error out?\njs\nreporter.command('tacos <topping>', 'I should be supported.').action(function (topping) {\n  if ( topping ) {\n    console.log(\"Oh hey, you like \" + topping + \" on your tacos.\");\n  }\n});\n. ",
    "pwdonald": "Added test.\n. ",
    "kaelig": "This is something I've encountered too and I'd love to see that fix merged instead of using a fork.\n:shipit:\n. ",
    "popomore": "Testcase failed\n. ",
    "curtisr7": "Still seeing this problem on commander@2.9.0. \nA workaround for the problem is to use the long version of the option ie: --bar='-c -d'. ",
    "achingbrain": "In the end my workaround was to switch to yargs.. ",
    "Quentin01": "@zhiyelee Done. It does not pass before my fix.\n. ",
    "lawrencejones": "Turns out there was already a getter for the app name, that took a parameter name but didn't do anything with it. Not sure what happened there?\nPR should allow custom setting of name in the same way as other standard parameters.\n. ",
    "atian25": "oh, I see.\nbut why using so many if?\nbtw, it seems http://tj.github.io/commander.js/ is old? can't found any docs for subcommand \n. https://github.com/tj/commander.js/pull/310\n. ",
    "DinisCruz": "The mocha guys (see https://github.com/mochajs/mocha/issues/1462) cant seem to find where that happens, any idea on this side of things?\n. ",
    "pensierinmusica": "+1 Same problem here!\n. ",
    "jamesr73": "An old issue, but just in case this is useful to someone...\nMocha is not interfering with the _name variable. Mocha and the CLI under test are sharing the same commander singleton. Mocha get's there first so the command name is set to _mocha.\nIf you're writing the CLI under test you could do this:\njavascript\nvar Command = require('commander').Command\nvar program = new Command();\n. I've noticed a related issue and I wonder if this PR (coincidentally) addresses it. I made the same change to the pm test fixture to give the install 'git-style command' an alias of 'i' and created the following simple test (logging help output because the test fails):\n``` javascript\nvar exec = require('child_process').exec\n  , path = require('path')\n  , should = require('should');\nvar bin = path.join(__dirname, './fixtures/pm')\nexec(bin + ' help', function (error, stdout, stderr) {\n  console.log('stdout:' + stdout)\n  //stdout.should.containEql('install|i');\n  //stdout.should.not.containEql('pm|i');\n});\n```\nThe help output has the alias against the main command not the subcommand:\n```\n  Usage: pm|i [options] [command]\nCommands:\ninstall [name]  install one or more packages\nsearch [query]  search with optional query\ncache           actions dealing with the cache\nlist            list packages installed\npublish         publish or update package\nhelp [cmd]      display help for [cmd]\n\nOptions:\n-h, --help     output usage information\n-V, --version  output the version number\n\n```\nWhen aliasing a command with associated action the help/usage output is as expected.\n``` javascript\nvar program = require('../')\n  , should = require('should');\nprogram\n  .command('info [thing]')\n  .alias('i')\n  .action(function () {\n  });\nprogram\n  .command('save [file]')\n  .alias('s')\n  .action(function() {\n  });\nprogram.parse(['node', 'test']);\nprogram.help();\n```\nOutputs commands with aliases:\n```\n  Usage: test [options] [command]\nCommands:\ninfo|i [thing]\nsave|s [file]\n\nOptions:\n-h, --help  output usage information\n\n```\n. @rike422 I pulled from your fork and confirmed that it also addresses the issue with the help output. I'll send you a PR with the additional tests.\n. @pedro93\nYou could try testing commander.args in addition to process.argv. Bear in mind that it may contain a circular reference to commander.\nI'm seeing inconsistent behaviour with the <required> arguments. I have a subcommand with arguments('<one> <two>') and a check similar to yours because the action isn't triggered if they aren't passed (as per the docs). So I was surprised to see that if I pass <one> but not <two> I get the error:\nerror: missing required argument 'two'\nSo I updated test/test.arguments.js to match this scenario and it passes. Unless I add a <third> required argument. The code has provision for flagging arguments as required/optional but isn't checking them consistently.\n. ",
    "F1LT3R": "Thanks @jamesr73 !\nNote: I had to add process.argv in order that commander always had the arguments available on initialization.\njavascript\nconst Command = require('commander').Command;\nconst program = new Command(process.argv);\n. The only way it works for me is if I pass ['', '', '--no-sauce'].\nThe error I was getting you can see here: https://github.com/F1LT3R/commander-untestable/\nThe following error was super confusing to me... because Commander gave such a generic Node error message... this made me jump to the conclusion that Commander was getting it's path overridden by the test runner.\nbash\nTypeError [ERR_INVALID_ARG_TYPE] (NodeError) {\n    message: 'The \"path\" argument must be of type string. Received type object',\n}\n. ",
    "hcodes": "As example: \n\n. ",
    "tenorok": "+1\n. ",
    "arikon": ":+1: \n. ",
    "ivanakimov": "+1\n. +1. ",
    "kevyworks": "Still open after 3+ years? Anyhow commander can be extended using class myconsole extends Command and override, but also can be direct prototype which I did here: https://gist.github.com/kevyworks/653b40af20dc9a2509f865cd7fca1ef0 -- This issue should be closed already.. ",
    "AluisioASG": "I've fixed it a couple days ago but wanted to come up with a test case before sending a PR.\n. ",
    "jviotti": "@zhiyelee In what release is this fix going to be available?\n. ",
    "natew": ":+1: \n. Big +1 on this\nMy workaround is not to use isDefault and just coerce argv, for now:\n`` js\n// makeflint run` default command\nvar flintIndex = getFlintIndex()\n// find where index of flint is\nfunction getFlintIndex() {\n  let index = 0\n  for (let arg of process.argv) {\n    if (arg.indexOf('flint') > 0)\n      return index\nindex++\n\n}\n}\n// make sure flags are still passed to flint run\nvar firstFlag = process.argv[flintIndex + 1]\nif (flintIndex === process.argv.length - 1 || (firstFlag && firstFlag[0] === '-')) {\n  process.flintArgs = [].concat(process.argv);\n  process.flintArgs.splice(flintIndex + 1, 0, 'run');\n}\n```\n. No, it's just to pass those options down to the subcommand.\nSo flint run --cached works, and if run is default, then flint --cached would work the same.\n. Ah, so could we have an option isDefault: true, passOptions: true\n. ",
    "ButuzGOL": ":+1: \n. ",
    "justinmchase": "May I ask why not? Would you consider accepting a pull request? Could you at least add the work around from @goloroden to the wiki?\n. ",
    "DigitalIO": "I'll wait for #290 and then implement a test case. \n. Adding --harmony to the shebang doesn't work in all environments, unfortunately. Some discussion. I've tried the example script on Debian (Stable) and Windows (\"Git Bash\") and it fails on both for me.\nI have been initiating the scripts with node directly\n> node --harmony examples/pm list\nNot the best solution, but the best compromise I have found thus far. \n. Correct. env attempt to match \"node --harmony\" as a function, instead of \"node\" with the \"--harmony\" flag. It results in this error: \nshell\n/usr/bin/env: node --harmony: No such file or directory\n. ",
    "matthiasg": "\ud83d\ude0a \n. ",
    "noamokman": "Duplicate of #222\n. :+1: \n. ",
    "tkdan235": "Dug into this a bit with some help from andyshinn at stackoverflow.\nIt appears that with v2.1.0 this issue does not exhibit itself.  With v2.2.0 a regression occurred breaking this functionality on global installs.   This is the PR that caused the regression: https://github.com/tj/commander.js/pull/173.  See line 409-410 at https://github.com/tj/commander.js/pull/173/files.\nI suspected that the issue was fixed with https://github.com/tj/commander.js/pull/307.  I added this PR in place of the current commander in my package.json file with \"commander\": \"git://github.com/zhiyelee/commander.js.git#buginfo\", and my problem is now resolved. Yay!\nLet's get #307 merged!\n. ",
    "rdodev": "Our subcommands are too complex with differing parameters to be able to be passed as a flag. Anyway, we are going to run with modified fork of this library which is great in many other respects. :+1: \n. @bucaran unfortunately, due to the way npm works, when you declare your bin list in package.json upon -g install it will flatten them to the whatever the /usr/local/bin is. That means having the commands in a hierarchy doesn't work because the directory hierarchy won't be in PATH. We had to abandon that approach and keep using dashed commands.\n. @bucaran https://docs.npmjs.com/files/package.json#bin\n. No idea. I just knew I had to because of the standard way of how npm works.\n. ",
    "sierisimo": "Totally true, I was a little confused about this behavior.\nBut I think the issue about having the same param for both options is still important because of the if(program.block) part, where you put the value for an option and another that could take a optional option also has that valule.\n. ",
    "chovy": "i typically default commander options to something in a config file. only in this case i want to pass in a config file. should i just use 2 commander instances?\n. ",
    "mwittig": "I am happy to help on the project, but I don't understand why you close the issue as it has not been solved. As there some, similar issues raised why don't you group than as one Bug issue?\n. ",
    "onury": "This is not right. You should keep this open if it's not resolved.\n. ",
    "vleango": "+1\n. ",
    "palanik": "Something messed up. \nClosing this.\nI'll send a clean PR.\n. ",
    "chrishiestand": "My $0.02 - by default commander.js should sanitize commands and automatically show usage and exit if an unsupported command is used (it doesn't currently).\n. ",
    "satazor": "I hit this same problem but I couldn't use @goloroden suggestion because I wasn't using git like commands. Instead I created a executed variable that is false and I make it true if a command executes. Then I just check against it to print the help message:\n``` js\nvar executed = false;\nprogram\n  .command('foo')\n  .action(foo);\nprogram.parse(process.argv);\nif (!executed) {\n    program.help();\n}\nfunction foo() {\n    executed = true;\n    // ...\n}\n```\n. ",
    "vitalets": "For those coming to this issue - the @goloroden solution does not work now. But there is official way mentioned in README:\njs\n// error on unknown commands\nprogram.on('command:*', function () {\n  console.error('Invalid command: %s\\nSee --help for a list of available commands.', program.args.join(' '));\n  process.exit(1);\n});. ",
    "psyose": "In my use case, I wanted a single command that the cli program defaults to when executed.\nSo I added a the command to the arguments array like this\n```\nconst foo = (options) => {\n  console.log(options.file)\n}\nprogram\n  .command('foo')\n  .option('-f, --file ', 'The file you want node to read')\n  .usage('--file data.csv')\n  .action(foo)\nprocess.argv.splice(2, 0, 'foo') # <------ this is the workaround\nprogram.parse(process.argv)\n```\n. ",
    "tcf909": "\nFor those coming to this issue - the @goloroden solution does not work now. But there is official way mentioned in README:\njs\n// error on unknown commands\nprogram.on('command:*', function () {\n  console.error('Invalid command: %s\\nSee --help for a list of available commands.', program.args.join(' '));\n  process.exit(1);\n});\n\nBut this seems to work for the root tree:\n```\ncli.on('command:*', function (args) {\nif( this._execs[args[0]] )\n    return;\n\nconsole.error('Invalid command: %s\\nSee --help for a list of available commands.', cli.args.join(' '));\nprocess.exit(1);\n\n});\n```. ",
    "frankcchen": "@vitalets This method wouldn't work on git-style subcommands.\nFor example in main.js\nprogram\n    .command('foo', 'this is foo')\n    .command('bar' 'this is bar')\n    .on('command:*', function () {\n        console.error('Invalid command: %s\\nSee --help for a list of available commands.', program.args.join(' '));\n        process.exit(1);\n    });\nIn this case, even if I do \n$node main.js foo\nIt still gets intercepted by the 'on' method and deemed as invalid command. Any idea how to solve it?. @gentunian Hey what if at the first level, I want to list the available sub-commands of 'create'? For example right now if I do \n$cli-name create \nby itself it will raise error since I don't give any sub-command.\n. @gentunian You're right.\nWhat if I want to handle unsupported command at the top level aka main.js? Assume your program only has command 'create'. now if I do \n$ node main.js bogus\nIt will have no output.\nI have tried adding\n.on('command:* , () => {...});\nBut it didn't really work. The added line intercepts all commands basically.. ",
    "DonMartin76": "I just ran into this as well, and this seems to work quite well, @frankcchen:\nprogram\n    .command('postgres <command>', 'manage a local Postgres container')\n    .command('start [options]', 'start the service')\n    .command('stop [options]', 'stop the service')\n    .on('command:*', function (command) {\n        const firstCommand = command[0];\n        if (!this.commands.find(c => c._name == firstCommand)) {\n            console.error('Invalid command: %s\\nSee --help for a list of available commands.', program.args.join(' '));\n            process.exit(1);\n        }\n    })\n    .parse(process.argv);\nThis is more or less a combination of the solution @goloroden offered at one point, and the adaption to a newer version of commander. This is tested with version 2.19.0.. ",
    "rusikf": "Looks nice, but I am not really sure, that this badge is very important for this project.\n@tj , what you think?\n. @SomeKittens , ok :wink:\nI find the bug, in index.js there is a method:\nCommand.prototype.command \nwhich returns cmd if there is no desc. \nSo, if it(method) returns this my example is valid.\nBut if return this, there are a lot of tests, which failed because they depends from cmd.\nCan you explain how to fix it ?\n. ",
    "rrrene": "Thanks for your reply! On the chance that I lose your interest for good, let me elaborate: \nThis badge is not really about showing off how good your documentation is or getting to 100%, which is  why there are no numbers on it. And it certainly is not about bragging \"Look at my perfect docs!\" \nThe idea is to motivate aspiring Node developers to dive into Open Source projects and read the code. \nIt is about engagement. And for me, while testing and code coverage are important, inline-docs are the humanly engaging factor in Open Source. This project is about making people less adverse to jumping into the code and see whats happening, because they are not left alone while doing so. I know that, because I put off reading other people's code way too long in my life.\nAnd let me be clear: commander.js is seriously good in terms of inline documentation. But even if it wasn't: Most times, any amount of inline-docs is better than none. This badge tries to emphasize that.\n. ",
    "erming": "Hey guys!\nHere's one way to do it:\njavascript\nprogram.option(\"-v, --version\", \"output the version number\", function() {\n  if (process.argv.indexOf(\"version\") !== -1) {\n    // print\n    // the\n    // long\n    // version\n    // list\n    // here\n  } else {\n    // short\n  }\n  process.exit(0);\n});\nHope this helps!\n. ",
    "ysmood": "@zhiyelee I don't understand, why are there three new lines?\n. ",
    "SimplGy": "Interested party. Related? https://github.com/tj/commander.js/issues/399\n. I am not clear if this is the same issue I'm working on. For me, boolean flags are not correctly converted from undefined into false. This messes up some downstream build processes.\nprogram.option('-b, --is-blue', 'The color should be blue')\nprogram.isBlue // `undefined`. would prefer `false`\nI'm trying to find a workaround to this. Tried passing a parser to the fn third argument:\nprogram.option('-b, --is-blue', 'The color should be blue', Boolean, false);\nThen I tried writing my own \"parser\"\nprogram.option('-b, --is-blue', 'The color should be blue', function(x){ return !!x }, false);\nAny tips?\n. ",
    "celicooo": "Is this working?? My [boolean] flags are strings...\n. ",
    "tomgco": "Can we re-open this as it was reverted because it introduced a bug?\n. ",
    "shakiba": "Moreover it seems that command help subcommand doesn't work for commands with action.\n. ",
    "aemonge": "I agree, but If you found any resources can you post them here ?\n. ",
    "nkzawa": "I already added a test case which fails on master.\nIf you use an option which has - in it like --foo-bar then opts() can't parse that correctly.\n``` js\nprogram\n  .option('--foo-bar')\n  .parse(process.argv);\nprogram.opts() // { 'foo-bar': undefined }\n```\n. ",
    "specious": "In the tests I saw you can do:\njs\nvar app = require('commander');\napp.allowUnknownOption();\nIt worked for me.\n. ",
    "thasmo": "This works well for me.\njs\nvar commander = require('commander');\ncommander.allowUnknownOption(true);\n. ",
    "khanh-nguyen": "@zhiyelee, I tried it. Didn't work for me. Did it work for you?\nlet program = require('commander'),\n^^^\nSyntaxError: Unexpected strict mode reserved word\n. Just to be clear, here's a simple example of my setup:\n.\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cmd\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 cmd-test\n\u251c\u2500\u2500 node_modules\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 commander\n\u2514\u2500\u2500 package.json\nbin/cmd\n```\n!/usr/bin/env node --harmony\nlet program = require('commander');\nprogram\n    .version(require('../package.json').version)\n    .command('test [something]', 'test git-style command with ES6')\n    .parse(process.argv);\n```\nbin/cmd-test\n```\n! /usr/bin/env node --harmony\nlet program = require('commander');\n// process options\n// code ommitted\nprogram.parse(process.argv);\nlet files = program.args;\n// code ommitted\n```\nHere's the result\n$ ./bin/cmd test foo\n/Users/khanh.nguyen/opower/test_code/test_commander/bin/cmd:1\n(function (exports, require, module, __filename, __dirname) { \n                                                            ^\nSyntaxError: Illegal let declaration outside extended mode\n. $\u00a0bin/cmd test foo\n/path/to/test_commander/bin/cmd-test:3\nlet program = require('commander');\n^^^\nSyntaxError: Unexpected strict mode reserved word\n    at exports.runInThisContext (vm.js:73:16)\n    at Module._compile (module.js:443:25)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:124:16)\n    at node.js:842:3\n. :+1: Thanks.\n. Did you put this code in cmd or cmd-test? I only have problem with the code in cmd-test, not with cmd. \n. I'm not sure what the issue is. I repro the examples above inside examples/ directory in commander repo and everything works fine.\nI notice that if I install commander as dependency, even though, the version is 2.6.0, the code in Command.prototype.executeSubCommand is slightly different:\n// run it\nargs = args.slice(1);\nargs.unshift(local);\nvar proc = spawn('node', args, { stdio: 'inherit', customFds: [0, 1, 2] });\nIf I use git-url to point to git://github.com/tj/commander.js.git#master, this issue is fixed, no more problem with ES6. \n. It's good to know. Thanks.\n. ",
    "emmenko": ":+1: \n. ",
    "caspervonb": ":+1: \n. ",
    "yoshuawuyts": "When running linklocal link, the link part is now seen as a file instead of a subcommand. This is possibly caused by changes to the subcommand functionality in commander@2.7.0.\ntxt\n/Users/yoshuawuyts/.nvm/versions/io.js/v1.3.0/lib/node_modules/linklocal/bin/linklocal.js:73\n  if (err) throw err\n                 ^\nError: ENOENT: no such file or directory, open '/Users/yoshuawuyts/dev/wercker/wercker/src/list/package.json'\n    at Error (native)\n. ",
    "mgartner": "``` js\n// test.js\n'use strict';\nvar program = require('commander');\nprogram\n  .option('-d, --domain ', 'domain name', 'example.com')\n  .parse(process.argv);\nconsole.log(program.domain);\n```\n```\n$ node test.js -d github.com\nevents.js:86\n    this.domain.enter();\n                ^\nTypeError: Object example.com has no method 'enter'\n    at Command.emit (events.js:86:17)\n    at Command.parseOptions (/Users/marcus/commander-test/node_modules/commander/index.js:647:14)\n    at Command.parse (/Users/marcus/commander-test/node_modules/commander/index.js:435:21)\n    at Object. (/Users/marcus/commander-test/test.js:7:4)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n```\n. ",
    "benjamine": "+1\n. ",
    "ilyache": "+1 (still an issue in 2.11.0). ",
    "wolfgang42": "+1, duplicate of #105.\nBarring a 3.0 release, maybe trying to use config.option('--domain') should at least raise an error explaining the problem and offering some workaround?. ",
    "AdamMagaluk": "See files below, i have a base cli.js file and a subcommand cli-stacks.js breaks on the latest release when running node cli stacks.\nnode cli -h both 2.7.1 and 2.6.0 prints help message showing stacks command and top level options.\n2.6.0\n```\n\u03bb: node cli stacks -h\nUsage: cli-stacks [options] [command]\nCommands:\ncreate [name]   install one or more packages\ndelete [query]  search with optional query\nhelp [cmd]      display help for [cmd]\n\nOptions:\n-h, --help  output usage information\n\n```\n2.7.1\n```\n\u03bb: node cli stacks -h\nfs.js:691\n  return binding.lstat(pathModule._makeLong(path));\n                 ^\nError: ENOENT, no such file or directory '/Users/ApigeeCorporation/Software/commander-test/cli'\n    at fs.lstatSync (fs.js:691:18)\n    at exports.readlinkSync (/Users/ApigeeCorporation/Software/commander-test/node_modules/commander/node_modules/graceful-readlink/index.js:5:7)\n    at Command.executeSubCommand (/Users/ApigeeCorporation/Software/commander-test/node_modules/commander/index.js:472:14)\n    at Command.parse (/Users/ApigeeCorporation/Software/commander-test/node_modules/commander/index.js:443:17)\n    at Object. (/Users/ApigeeCorporation/Software/commander-test/cli.js:7:4)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n```\ncli.js\n``` js\nvar program = require('commander');\nprogram\n  .version('0.0.1')\n  .option('-C, --chdir ', 'change the working directory')\n  .command('stacks [cmd]', 'install one or more packages')\n  .parse(process.argv);\n```\ncli-stacks.js\njs\nvar program = require('commander');\nprogram\n  .command('create [name]', 'install one or more packages')\n  .command('delete [query]', 'search with optional query')\n  .parse(process.argv);\n. Issue i'm seeing stems from https://github.com/tj/commander.js/commit/154fb8b37223a7f3910757d3edc4e68348f02770 appears your not calling node sub-command anymore but directly calling sub-command. For my code this means removing the .js extension and making them executable with the typical #!/usr/bin/env node, or pin the commander version to v2.6.0 the latter is probably what i'll stick with.\n. ",
    "csrbwilson": "I'm experiencing the same issue on linux, on windows the sub command is found. I'm getting the following error:\nclitest-install(1) does not exist, try --help\nAnother issue - list coercion function not working, under 2.6.0 working\n. ",
    "yordis": "Just for leave a note about this.\nI was using the git style and because I didn't use .js when I called the file with node it gave me this error\nnode bin/npm-packager <--- no extension, this fails. ",
    "skywinder": "It's not a spam. I make PR only to repo, thats works nice with this script. And especially with this one.\nJust to compare this change log with yours manually-filled History.md.\n. @SomeKittens Ok, I get it. Sorry, that it annoys you. \nUsually I receive only positive feedbacks, and I was sure that it makes GitHub community better. Since yours is the second negative feedback (2-nd from 30, although) - I will reconsider my quite aggressive PR politics. Thank you.\nIn my defence I just want to mention, that  I not push commits to any repo. I select repo, which are well-tagged and labeled and it's look very nice in this repo.\nI will stop it, since it considered as spam by some users. And it's definitely not, what I want.\n. ",
    "ejfrancis": "if @lygstate was talking about the ability to add a separator between options, I've done that in my fork in the feature/option-separator branch https://github.com/ejfrancis/commander.js/commit/1adcfceb6d8e16e1298eaaea77709a4304e29684\nSo you can do\nprogram\n    .optionSeparator('Section A')\n    .option('-a, --aopt', ' aopt desc')\n    .option('-b, --bopt', ' bopt desc')\n    .optionSeparator('Section B')\n    .option('-c, --copt', ' copt desc')\n    .option('-d, --dopt', ' dopt desc')\nand its output looks like this\n\n@tj @SomeKittens is this something you're interested it getting into the repo? if so I could clean it up, test it and put up a PR\n. ",
    "moul": ":+1: same issue here\n```\n\nrequire('commander').command('close').action(console.log).parse(['close'])\n{ commands: [],\n  options: [],\n  _execs: [],\n  _allowUnknownOption: false,\n  _args: [],\n  _name: 'close',\n  parent:\n   { commands:\n      [ [Object],\n        [Object],\n        [Object],\n        [Object],\n        [Circular] ],\n     options: [],\n     _execs: [],\n     _allowUnknownOption: false,\n     _args: [],\n     _name: undefined,\n     Command: [Function: Command],\n     Option: [Function: Option],\n     _events: { close: [Object] } },\n  rawArgs: [ 'close' ],\n  args: [] }\nrequire('commander').command('inspect').action(console.log).parse(['inspect'])\n\nconsole.js:52\nConsole.prototype.log = function() {\n                                ^\nRangeError: Maximum call stack size exceeded\n```\nIt seems to be related to the EventEmitter system with reserved keywords.\nMaybe we can prefix commands on .on(command)\n. ",
    "iainreid820": "I'm a little late to the party, but I'm experiencing this error too. Does anybody have any workarounds aside from simply changing the command name?. ",
    "jhaynie": "+1 :+1: \n. ",
    "djMax": "Failing for me too. Not sure how this thing is passing all the tests and such if something so basic is broken. I must be doing something wrong but I have no idea what.\n. ",
    "okv": "It would be great to have shell auto-completion for already generated program help without write much code. Suggestions? I can't find anything suitable at npm.\n. E.g.:\n- if input starts with - then autocomplete global options and command options (if command is already typed)\n- if you don't yet choose a command - suggest commands\n- allow to extend/override autocompletion behaviour programmatically (to suggest custom parameters for options (as branches in git), etc)\n. ",
    "arthurafarias": "This would be a great feature. =D\n. ",
    "plusmancn": "I have found commander-auto-complete, but which is not good enough to use for product.\n. ",
    "bitjson": "Just an update on this \u2013 those looking for CLI auto-completion might want to consider switching to Vorpal. Vorpal is a bit more involved, but it has a lot of the more advanced features built-in.\n. For anyone following this issue, I strongly recommend you check out oclif. \nIt's extremely well-designed, and the autocompletion is fantastic. . ",
    "k0pernikus": "@bitjson Vorpals autocompletion is quite awesome, yet the lack of typescript typings is a dealbreaker for me. Yet commander has them.\nI wished commander would also support autocompletion :)\n. ",
    "atheros": "@tonylukasavage don't dismiss autocompletion as being a quick fix for poor design decisions. It can also be user for values for example:\naddpermission user@... system.admin system....\nMany database CLIs implement this kind of autocomplete for table names and fields.\n@bitjson Vorpal works great as a shell, however due to some bugs, it's pretty much impossible to invoke a single command from command line and quit . ",
    "BafS": "An alternative is also Yargs: https://github.com/yargs/yargs. ",
    "arboleya": "I'm not using nested commands but still I'm facing this [Circular] thing on my remaining args.\nProgram\n``` javascript\nvar program = require('commander');\nprogram\n  .version(require('../package.json').version)\n  .usage('  [vars...]')\n  .arguments('[input] [output]')\n  .action(function(input, output, vars){\n    console.log('input', input);\n    console.log('output', output);\n    console.log('vars', vars);\n  })\n  .parse(process.argv);\n```\nExecution\nbash\n$ program a b c=1 d=2 e=3\nOutput\nbash\ninput ->  a\noutput ->  b\nvars ->  { commands: [],\n  options: \n   [ { flags: '-V, --version',\n       required: 0,\n       optional: 0,\n       bool: true,\n       short: '-V',\n       long: '--version',\n       description: 'output the version number' } ],\n  _execs: [],\n  _allowUnknownOption: false,\n  _args: \n   [ { required: false, name: 'input', variadic: false },\n     { required: false, name: 'output', variadic: false } ],\n  _name: 'condilation',\n  Command: [Function: Command],\n  Option: [Function: Option],\n  _version: '1.0.0',\n  _events: { version: [ [Function], [Function] ], '*': [Function] },\n  _usage: '<input> <output> [vars...]',\n  rawArgs: \n   [ 'node',\n     '/this/is/the/script/path',\n     'a',\n     'b',\n     'x=1',\n     'y=2',\n     'z=3' ],\n  args: [ 'a', 'b', [Circular], 'y=2', 'z=3' ] }\nConclusion\nNot sure if I should ever skip this [Circular] argument, or not.\n. ",
    "mattwilliams": "Having the same issue.  Wondering what is the solution?  I also see:  variadic: false... which is not mentioned in the example code.. ",
    "KevinLeigh": "Hey @foxx, @arboleya, @mattwilliams \nFor nested commands I found the following to work well for me -> \n```\nprogram.command('rootCommand')\n  .action(withErrorHandler.bind(this, async function(cmd) {\n    console.info('Executing rootCommand!');\n}));\nprogram.command('rootCommand:subCommand')\n  .action(withErrorHandler.bind(this, async function(cmd) {\n    console.info('Executing subCommand!');\n}));\nprogram.command('rootCommand:subCommand2')\n  .action(withErrorHandler.bind(this, async function(cmd) {\n    console.info('Executing subCommand 2!');\n}));\n```\nThe example above shows a program that has a root command with two subcommands.Doing it this way allows for independent configuration/options for subcommands and root command. The reason it works is because CommanderJS is creating a new command for each sub command and root command. \nUsages\nExecute root command:\n{yourProgram} rootComand\n\n\nExecute sub command\n{yourProgram} rootComand:subCommand\n\n\nExecute sub command 2\n{yourProgram} rootComand:subCommand2\n\n\nP.S. Hope this is what you are looking for :) . ",
    "panuhorsmalahti": "Ah, the package.json file already includes a files property.\n. ",
    "carlosforero": "@abetomo \nI think coffeescript has been forgotten these days, no offence intended.\nSo, this pull request can be discarded.. @abetomo sure!. ",
    "gajus": "The following does work (when calling the sub-command itself).\nsh\nnode ./src/bin/mirror-foobar titles\nShouldn't\nsh\nnode ./src/bin/mirror foobar titles\nhave the same effect?\n. Thank you\n. It is as simple as:\n``` js\n'use strict';\nlet commander = require('commander');\ncommander\n    .description('foosbars')\n    .command('foo', 'Foo.')\n    .parse(process.argv);\n```\nWhere the latter is the contents of mirror.js, which is supposed to load mirror-foo.js. I doubt if mirror-foo.js contents is relevant, but suppose it is:\n``` js\n'use strict';\nlet commander = require('commander');\ncommander\n    .command('something')\n    .description('Description.')\n    .action((env) => {\n        // Hello\n    });\ncommander.parse(process.argv);\n```\n. I knew I have opened an issue about this before, https://github.com/tj/commander.js/issues/390.\n. That said, https://github.com/tj/commander.js/issues/372 is closed, while the bug is present in 2.8.1.\n. ",
    "TheRoSS": "The same issue.\ncommander.option(\"-c, --count \\\", \"...\")\nwith call:\nnode myCoolScript -c2\ngives:\ncommander.count = -2\n. This is a bug in the Command.prototype.normalize method\nIt is him who splits -c2345 option with parameter to a set of no parameter options -c -2 -3 -4 -5\nThen parser behaves correctly and takes \"correct\" parameter for option \"c\"\n. ",
    "ensonic": "Here you are:\nhttps://gist.github.com/ensonic/60b8fc278da53b2dde45\n. ",
    "xgbuils": "Hi @ohjames!\nI'm interested to combine coercion and default values in a personal project and am researching about this issue. The last example works if you set this code:\n``` javascript\nvar program = require('commander');\nprogram.option('-n, --some-number ', 'a number', function (val) {\n    parseInt(val)\n}, 100)\nprogram.parse(process.argv)\nconsole.log(program.someNumber)\n```\nBecause parseInt() has two arguments and the second is 10 by default. But, in source the second parameter of coercion callback is used.\nI'll keep researching your first example.\nRegards!\n. yargs has coercion feature?\n. > If you run this without specifying -v it will log undefined rather than the expected 0.\nNow it log 1\nbash\n$ node index.js -v\n1\n. ",
    "beaugunderson": "The cleanest way I've found to do this is:\n```js\nconst _ = require('lodash');\nconst parse10 = .ary(.partialRight(parseInt, 10), 1);\nprogram.option('-n, --some-number ', 'a number', parse10, 100)\n```\n_.ary(_.partialRight(parseInt, 10), 1); creates a function that takes one argument and passes that one argument through to parseInt(x, 10).. ",
    "gersongoulart": "I have a different use case (bellow is a simplified version):\n```javascript\nvar url = require('url');\nvar program = require('commander');\nprogram.option('-n, --some-url ', 'A URL', url.parse, 'localhost:5001');\nprogram.parse(process.argv);\nconsole.log(program.someUrl);\n// Expected: Url { protocol: 'localhost:', slashes: null, auth: null, host: '5001', port: null, hostname: '5001', hash: null, search: null, query: {}, pathname: null, path: null, href: 'localhost:5001' }\n// Got: 'localhost:5001'\n```\nTo me, this is unexpected behavior. I don't understand why the default value would not go through the same coercion function as the values informed by the user?\nTo get the correct default value that I need I have to add as default: url.parse('localhost:5001') but as a result, when running --help I'll get a message that says (default: [object Object]) instead of (default: 'localhost:5001').. ",
    "Desmodue": "I am using forever-service\nhttps://github.com/zapty/forever-service\ncommander is a module used by forever-service\nOn Debian 7 when using forever-service to create startup scripts, I get the error\n'(node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.'\nThis is how forever-service is called\nforever-service install flashconnectbridge --script bin/www -e \"PATH=/usr/local/bin:\\$PATH NODE_ENV=production PORT=3000\" --logrotateFrequency daily -u\nforever-service version 0.4.6\nThe trace I get is\nTrace\n    at Command.addListener (events.js:179:15)\n    at Command.option (/usr/local/lib/node_modules/forever-service/node_modules/commander/index.js:327:8)\n    at /usr/local/lib/node_modules/forever-service/bin/forever-service:40:4\n    at Walker. (/usr/local/lib/node_modules/forever-service/lib/platforms.js:28:3)\n    at Walker.emit (events.js:104:17)\n    at Walker.doneOne (/usr/local/lib/node_modules/forever-service/node_modules/walker/lib/walker.js:109:35)\n    at /usr/local/lib/node_modules/forever-service/node_modules/walker/lib/walker.js:99:12\n    at FSReqWrap.oncomplete (fs.js:95:15)\nPlatform - Debian GNU/Linux 7 (wheezy)\nThinking about it now, it could be the way that forever-service uses commander ?\nMaybe I should have started with forever-service first ?\nI can reproduce this on all of my Debian instances.\n. ",
    "leesei": "It should be \"Alias support for Git-style sub-commands\".\n. It works as is:\n``` js\nProgram\n  .version(Pkg.version)\n  .description(Pkg.description)\n  .options('-v, --verbose', 'be verbose')\n  .option('-q, --quiet', 'be quiet')\nProgram\n  .command('search ')\n  .description('do search')\n  .option('-r, --regex', 'use regex')\n  .action(function search (query, options) {\n    // Program.quite\n    // Program.verbose\n    // options.regex\n  });\n```\n. ",
    "SpencerCDixon": "Any plans on adding this/would authors be open to a PR?\n. ",
    "jontonsoup": "Did we determine if this is a bug or lack of feature? The label says bug, but the docs are unclear. \n. ",
    "hedgerh": "For anyone wondering, a fix for this has been merged into master, but the fix has not been published to npm.\nIn the meantime, I'm pointing my dependency to the repo:\n\"commander\": \"git+https://github.com/tj/commander.js.git\"\n. For anyone wondering,\nThis has apparently been fixed and merged into master, but not published to npm yet.\nI'm pointing my dependency to the repo until the next release:\n\"commander\": \"git+https://github.com/tj/commander.js.git\"\n. Removing the .js suffix fixed it for me in 2.9.0, but for anyone else who runs into this problem, it appears that a fix has been merged into master, but not published to npm yet.\n. @zhiyelee - Hello, it seems that a new version of commander hasn't been published to npm for 1 year.  There are a few open issues that are actually resolved, but have not been published.  It seems to be causing problems for a few people.  Are there any plans to publish a new version to npm soon?\n. ",
    "philostler": "+1 for releasing with this fix\n. ",
    "rt2zz": "@SomeKittens any chance we can get a new release?. ",
    "hotaru355": "Thank you very much for the prompt and detailed response, it's really great to see active projects like this.\nI cannot speak to what went into the initial design decision of attaching the options to the commander object itself, probably ease of use was one thought. But I would do my +1 here for a design break in the next major version to use a plain object that gets the options attached, something like commander.commands or commander.opts.\n. ",
    "ohEmily": "I also ran into this problem. @tonylukasavage's fix is very helpful (thank you!) But +1 to @hotaru355's design change proposal.\n. ",
    "loveencounterflow": "+1 for a breaking change in v3. The list of conflicts is just ridiculously long. IMHO it's always a mistake to throw together API/methods and business data in one namespace, and even if you do that, you should not allow user data with arbitrary names on your API objects at any rate.\n. ",
    "royling": "While I was reading the examples in the doc, the first question jumped into my head was this collision problem, considering the parsed results are all added to the commander object itself. so :+1: to the breaking change in the new version.\n. ",
    "ericuldall": "My pull request #515 seems to fix this behavior as the user defined options are added to Commander._data instead\nUnfortunately this will make it a major release as reverse compatibility would be tricky\n. The bug is with Command.prototype.parseOptions:\nWhen looping over the options passed it accepts any values. It should perhaps only accept values that .match(/^-.*/)\n. I've added a fix proposal to pull request #517\n. The \"fix\" seems to be breaking other features, per failed unit tests. I'm not sure what or why at this point. Once the two play nice it should be useable.\n. It looks like many of the unit tests don't work when this functionality is fixed. Many of them pass options that are not defined as .option. So now the tests are throwing the error:\nerror: unknown option `--setup_mode'\nTo me, this seems like the correct behavior, though these will not pass a travis-ci build.\n. If you're interested in a recursive solution, I just started a new project to fit my needs better. It allows subroutines which can be included with require.\nhttps://www.npmjs.com/package/termoil\nAny feedback is appreciated.\n. Looks like some cool features in there @ccorcos :D\n. -v is not the correct option. The proper options is -V (uppercase V)\n. Because that's the way the code was written... probably a better question for the developer of this package.\n. I've implemented the proposed changes with some helper methods in a forked feature branch. Still need to write tests for the new commands.\nhttps://github.com/ericuldall/commander.js/tree/data_overload\nNew features allow the following:\n```\n!/usr/bin/env node\nvar program = require('commander');\nprogram\n  .version('0.0.1')\n  .description('Test')\n  .usage('[options] string')\n  .option('-t, --type [value]', 'Type')\n  .option('-f, --format', 'Format')\n  .parse(process.argv);\nvar type = program.get('type'); //if exists return type, else returns false\nvar options = program.get(); //return all options, or empty object\nvar has = program.has('type', function(type){\n    console.log(type); //will return if type exists\n});\nconsole.log(has); //boolean\nvar has_all = program.has_all(['type', 'format'], function(type, format){\n    console.log(type, format); //will return if both exist\n});\nconsole.log(has_all); //boolean\n}\n```\n. Pull request sent and all tests passing.\nPull Request 515\n. So commands will have to be moved out of the objects main scope as well, for this to be viable?\n. UPDATE: I'm not seeing any conflict with custom commands. Can you provide an example of this case?\n. I've tested this with the following scenario:\ncmd: mycmd\nsubcmd: mycmd-get\nmycmd get -y\nworks as expected. Am I missing something?\n. I think my pull request fixes that issue.\nOptions no longer get stored to the object directly.\nBefore you would have had:\nprogram.once\nNow you get: \nprogram._data.once\nThe following is tested and working:\n```\n!/usr/bin/env node\nvar program = require('commander');\nprogram\n  .version('0.0.1')\n  .description('Test')\n  .usage('[options] |string')\n  .option('-y, --yes', 'Something')\n  .option('-o, --once', 'Once')\n  .parse(process.argv);\nprogram.has_all(['yes', 'once'], function(yes, once){\n    console.log(yes, once);\n});\n```\n. ",
    "rijnhard": "Same issue in https://github.com/tj/commander.js/issues/584\nDo we need an _data property when you can just use opts()? although calling opts() each time will be less efficient.\n. Link to benchmark for completeness\n. ",
    "bySabi": "I got bitten too! :)  https://github.com/tj/commander.js/issues/648\nI created a workaround module for this problem.  Tomorrow will be published.\n. Published module which solve options collision: safe-commander\n. I create a workaround module for this problem: safe-commander\n. @elliot-nelson you are right, too many options collide. That's for I could not wait for commander 3.x.x release and create safe-commander.js. \nAny feedback is welcome\n. ",
    "deepakpathania": "Hey, in my use case, while using mocha to test the cli app, mocha options are being given precedence over the arguments supplied by the command line leading to name collisions and lost data.\nfor eg, something like\njavascript \nprogram\n.option('-d, --data <path>', 'Data')\n.parse(args)\nwhere args is either process.argv or arguments supplied through mocha for testing the cli app.\nThen if I have something like -d, --data  <dummyData >, it adds a debug options supplied through mocha and set that to true rather than having a data key.\nIs there a way to give precedence to the actual options in case both the actual ones and the ones supplied through mocha are present. Thanks. . I was trying to add a --no-color flag to add the functionality of removing colored output in a cli app when I discovered this and it took me a long time to figure this out.\nI am porting the cli app from argparse to commander and would not really like to change the available flags. \nThis should be at least added in the documentation. The following code sample illustrates this. \n```javascript\nprogram\n.option('-b, --bbq-sauce', 'Add bbq sauce')\n.option('--no-sauce', 'Remove sauce')\n.parse(process.argv);\nconsole.log('you ordered a pizza with:');\nif (program.bbqSauce) console.log('  - bbq');\nif(program.noSauce) console.log(\"   -  removed sauce.\")\n``\nThis doesn't work currently because of the--noprefix and I don't really see a reason why this was done. \n. @gilles-crealp Yeah, got it, thanks. \nHowever, considering multi-word options are camel-cased, I believe that the first intuition would be to try and access it asprogram.noSauce` for most people and thus this should be added in the documentation to eliminate confusion. . I will fork and submit a PR with the example shared above to be added in the README. . @gilles-crealp I don't think it is that clear, moreover, this is a common use case and should be mentioned in the main README itself according to me. . Hey @vanesyan. Can you please review this? Thanks. . ",
    "ORESoftware": "This is such a shitty bug. I moved to dashdash - https://www.npmjs.com/package/dashdash. AFAICT this is a bad namespacing problem; enough reason to not use this lib at all. All TJ would have had to do to solve this would be to put everything on program.args, as in program.args.configure and program.args.description instead just on program itself, as in program.description and program.configure. Frankly I don't get it, but I guess it's sleeker to just put it on program, but that's not good IMO.\n. @canrau - I recommend ditching commander and using \"dashdash\" from Trent Mick => \nREADME.md at master on trentm/node-dashdash\nhttps://github.com/trentm/node-dashdash/blob/master/README.md\n. +1. ",
    "IvanGoncharov": "@zhiyelee Did you have a chance to look at my changes?\nIt pretty simple and safe, because most of changes is code move from one function into another.\nIf required I can try split them into several commits.\n. @SomeKittens Main reason is following scenario:\n``` javascript\n!/usr/bin/env node\nvar program = require('./index.js');\nprogram\n  .arguments('')\n  .parse(process.argv);\n```\nBefore changes:\n\n$ ./test.js\n$\n\nAfter my changes:\n\n$ ./test.js \nerror: missing required argument `ARG'\n. It could be workaround simply be removing this check.\nBut I think delaying args parsing until event handler unreasonably complicate code.\nIt also force register events for aliases and create complicated wrapper for listener.\n. When I debug these issue, I spent quite some time just to understand where args parsing is happening.\nI never would have guessed, it resides inside listener wrapper.\nThe simpler and clean code is, the more people would contribute.\nThat is my two cents.\n\nTo simplify review, I can break it into several commits.\n. No check for required args, if no arguments provided.\n. Check argument only if 'action' registered.\n. same sub command was registered twice.\nPreviously it work because events was overridden.\nBut inside commands array it was two instances with same name.\nThis lead to problem with help messages and should be handled in separate commit.\nIMHO, exception should be thrown then duplicated commands registered.\n. ",
    "tvervest": "Any news on this PR? I'd love to see built-in required arguments :+1:\n. ",
    "bcoe": "A couple additional notes:\n- you might want to change the settings on coveralls.io, to not post a message with every build.\n- after trying for a bit to get coverage working with node@0.6, I opted to nuke the environment from the .travis file. I think this is reasonable, given that npm itself has dropped node@0.6 support: https://github.com/npm/npm/releases/tag/v2.10.1\n. @SomeKittens I have no affiliation with coveralls.io. The meat and potatoes of this pull request is the addition of coverage metrics to commander, which I find can be a really useful metric for developers.\n. here's a workaround I'm considering landing in yargs for this problem:\nhttps://github.com/yargs/yargs/pull/501\n. @hustcer @cbetta @zhiyelee I pulled the tiny bit of logic that yargs uses to solve this problem into a shim:\nhttps://github.com/yargs/set-blocking\nUglifyJS2 uses this same approach, which I modeled yargs' fix after: https://github.com/mishoo/UglifyJS2/pull/1061/files\n. @cbetta yargs writes all of its output in one call, prior to calling process.exit(code);; If commander uses a similar approach, you should be able to do the following:\n1. check whether you are about to call process.exit(0), prior to printing your console output.\n2. if you are about to print the output and call process.exit(0):\nset blocking to true:\njs\nconst setBlocking = require('set-blocking')\nsetBlocking(true)\noutput your content like usual:\njs\nconsole.log(commander.generateCLI());\nnow exit:\njs\nprocess.exit(0);\nNote that you need to set blocking to true, prior to printing the console output.\n. ",
    "jhoguet": "found a solution here. \njs\nvar ps = spawn('command', ['sub']);\n//... after some time\nprocess.kill(-ps.pid);\nnote calling process.kill and not ps.kill and note -ps.pid and not just ps.pid which is what gets it to kill the children. \n. @tonylukasavage that sounds much better, how do I parse instead of spawn?\n. thanks for the example\n. ",
    "thomashoffmann1979": "I think this should be the default behavior. If you try to store the process pid, you will get only the pid of the main process. \nmycommand service  1> /tmp/log.txt 2>&1 &\nReturns something like:\n[1] 55274\nps aux | grep mycommand shows:\nme  55275   0,0  0,3  3073148  50068 s000  S    10:05am   0:00.40 node ./bin/mycommand-service\nme  55274   0,0  0,3  3069368  46176 s000  S    10:05am   0:00.32 node ./bin/mycommand service\nIf you try to kill that pid (55274), the sub command (55275) keeps running.\n. Ok, my atom editor kills extra lines. I add the line again.\n. SIGHUP seem to be right see https://en.wikipedia.org/?title=SIGHUP.  I will add a test for it.\n. Oh, you are right! I will fix it.\n. I fixed it. Now the exit signal of the main process is used for the sub command, too.\n. ",
    "dlmr": "Is the only thing that prevents this from being merged that it has conflicts? \nWould really like this functionality included in Commander.js.\n. Seems like the build fails for Node.js v0.6 and v0.8. Is this still something that should be supported and have anyone looked into what the cause is?\n. ",
    "ciceropablo": "Thanks!\n. Ok!\nDocumentation about it (literal args)?\n. ",
    "juanpablocs": "missing description?\n. ",
    "inadarei": "The latest release on npm still shows \"undefined\". Where was this bug fixed?\n. ",
    "justinhelmer": "This would be huge. These sub-commands are getting more and more popular.\n+1\n. Not sure if there is any interest in this, but thought I would offer.\n. Closing for missing link.\n. Not sure if there is any interest in this, but thought I would offer.\n. Not sure if there is any interest in this, but thought I would offer.\n. ",
    "datatypevoid": "+1 \nThis would be a really nice addition.\n. ",
    "rstoenescu": "+1\nHave been looking for this but found no solution. This would be a great addition.\n. ",
    "mbilbille": "+1\nYes @hedgerh solution works, but it would be nice to ship this in a new release :)\nAny update? Sad... this project is almost dead, no release since October 2015.. Yep, it has been merged but not released.\nHere is a bypass https://github.com/tj/commander.js/issues/419#issuecomment-244262193. ",
    "luqimin": "any update?. ",
    "jadbox": "I was able to patch the problem by changing this in the source...\nLine 936   \nreturn [\n      cmd._name\n        + (cmd._alias\n          ? '|' + cmd._alias\n          : '')\n        + (cmd.options.length\n          ? ' [options]'\n          : '')\n        + ' ' + args\n    , cmd._description  // WAS cmd.description()\n    ];\n. Any updates on this?\nFix is also in my branch:\nhttps://github.com/jadbox/commander.js\n. Odd indeed. I don't think I'll have time to open a PR for this one... I've since needed to deviate a bit from head.\n. node --version\nv0.10.38\n\"commander\": \"^2.8.1\",\n. ",
    "ignacioiglesias": "@jadbox did your command take a --description?\n. ",
    "ac360": "Easy fix:\n```\n     var child = exec('nodemon server', function(err, stdout, stderr) {\n        if (error !== null) console.log('exec error: ' + error);\n     });\n child.stdout.pipe(process.stdout);\n child.stderr.pipe(process.stderr);\n\n```\n. ",
    "tkarls": "For any one else finding this via google.\nFunction was renamed to .allowUnknownOption()\nprogram\n    .command('my-command')\n    .allowUnknownOption()\n    .option(...\n. ",
    "chasingmaxwell": "Apparently it's not going to be that easy to solve. :(\n. ",
    "a-x-": "/cc @sbmaxx\n. Thank you, but it's clear.\nSo, can i set more than one alias?\n. ",
    "ls12styler": "Can I vote for fixed sub-commands and #414 & #441 \n. Also, what about only supporting node v4?\n. I believe this has been fixed.\n. Dupe of #384 ?\nAlso:\n- Only the names (lack of .js extension) and executable statuses (examples have +x) of the example files for sub-commands are different. I've tried playing around with all of that to no avail.\nThe examples work though.. :(\n. Figured out what I was doing wrong. In my first script I wasn't calling commander.parse(argv).\n. ",
    "CodeMan99": "You should fail in your parent command explicitly. Remember that some programs may do processing in the parent command while still having subcommands.\n. It would be nice to have it fail if your \"program chain\" contains only .command and no .option. Or have the ability to turn on failing when there isn't a matching subcommand.\nThat said, this is definitely a feature request. Perhaps we could work together to create a pull request?\n. ",
    "francoislaberge": "Yeah, this is what I ended up doing. Added some git style:\nbash\nUnknown command. Did you you mean:\n  push\n  clone\n  ...\n. @gangstead Yeah, I ended up doing something like what git does. Where it detects if there isn't a match and then does a fuzzy match and asks you if you meant to type: <list of subcommands with a close hamming distance)\n. It's for our internal cli. Here's a gist though with the relevant parts isolated:\nhttps://gist.github.com/francoislaberge/80ca6cbc33232c438680\n. ",
    "gangstead": "Here's a couple of lines of code to add to your top level command to fail for unknown subcommands:\n``` js\nconst _ = require('lodash');\nconst subCmd = .head(program.args);\nconst cmds = .map(program.commands, '_name');\nif (!_.includes(cmds, subCmd)) {\n  program.help();\n}\n```\n. That's much nicer than my quick and lazy solution.  Is that code anywhere I can check it out?\n. ",
    "malthejorgensen": "@SomeKittens Could be, but in that case I think it should be reflected in the readme. Also I feel the behaviour implemented here is less surprising than having to make a special-case in increaseVerbosity.\nThoughts?\n. ",
    "djulien": "Sorry - I thought any change to behavior was supposed to have a version# change as well.\nShould I just commit a new change on top of it to put it back?  (I don't know all the fancy branching and merging git procedures, just the basics)\n. I looked up reset but wasn't comfortable with the head#.  I also found something called \"interactive rebase\" which sounded like it would allow me to just drop the version# part of the changes, so I gave that a try.  Does the commit look okay now, or do I still need to merge it all into one?\n. ",
    "pcdevil": "@hildjj Hi,\nfirst of all, thanks the pull request, it would be really helpful to use this! (+1 from me)\nBut I don't think in the current form this fixes #188. It wants an optional exit code for help, mainly because of something went wrong and we are gracefully exiting strategy. Something like this:   \n``` javascript\nfunction addUser (userName, options) {\n    if (!Users.hasUser(userName)) {\n        errorOutput('unknown user:', userName);\n        program.help(1); // wrong parameters, print help and exit\n    }\n// do something awesome\n\n}\n```\nOf course with your modification you can do this by executing program.exitCode(1) && program.help(); but it's not cleaner than calling program.outputHelp() && process.exit(1);.\nIt would be nice (but not necessity) to combine these statements.\nIf you invite me to your reposity I'm happy to collaborate.\n. ",
    "lukeasrodgers": "@phdunham you could try the approach in my PR #499, or follow the approach taken by commander.js itself, i.e. each test in a separate file.\n. ",
    "skratchdot": "It would be nice to have the library stop using globals, and allow things like \"log\" and \"error\" to be passed as options. Also consistent usage of console.log vs process.stdout.write (always using console.log seems like the way to go).\nI've had a pretty miserable time trying to unit test my cli w/ code coverage.  I ended up needing to use spawn() to write my tests (which works okay), but I haven't gotten coverage w/ istanbul working yet.  When I tried using sinon to override things like process.exit, and process.stdout.write, I entered the rabbit hole.\nStarted working on a PR here to allow all globals to be passed as params, but that didn't seem like it would actually help in the end.  Hopefully someone here can post some links to successful cli unit testing with code coverage!  I know I'd be interested in other examples (my approach isn't the best- and other examples I've tried never work in my codebase)...\n. ",
    "nene": "Turns out that the solution already exists. The Command class can easily be imported and instantiated:\n```js\nimport {Command} from \"commander\";\nconst commander = new Command();\n// now use the local instance as you would use the global one...\n```\nIt simply doesn't seem to be documented anywhere besides the code itself.\nI ran into this problem once again when I was upgrading to Mocha 3.x. Suddenly all my tests against commander started to fail as Mocha was also using the global commander instance and the command line options my library was using got mixed together with command line options of Mocha. Rewriting my CLI to instantiate separate Command class solved the whole problem easily.. ",
    "akataz": "@vanesyan thanks for that i've been puzzled for a while! Worked like a charm.. ",
    "probablyup": "+1 Would love to know what the differences are between brackets and angle brackets when interpreting a given option scheme\n. ",
    "petermbenjamin": "@yaycmyk, traditionally angled brackets (e.g. ) indicates a required option/flag, while square brackets (e.g. [optional]) indicates an optional option/flag.\nHere is the source code of the commander.js package:\nfunction Option(flags, description) {\n  this.flags = flags;\n  this.required = ~flags.indexOf('<');\n  this.optional = ~flags.indexOf('[');\n  this.bool = !~flags.indexOf('-no-');\n  flags = flags.split(/[ ,|]+/);\n  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();\n  this.long = flags.shift();\n  this.description = description || '';\n}\nNote: \n1. this.required = ~flags.indexOf('<');\n2. this.optional = ~flags.indexOf('[');\n. ",
    "pal": "This appears to be working in the current version, are you still having this problem? \n. ",
    "mrmartineau": "@pal yes, it seems to be working as expected now. Thanks\n. ",
    "geophree": "Yes, but you're throwing away all the -- in the string.  You should be retaining all the ones after the first.\n. ",
    "plemarquand": "@SomeKittens Hi, I've updated the patch with some relevant tests.\n. @zhiyelee No, this only comes in to play when you override process.exit, or the commander methods that use it. Commander relies on process.exit to halt program flow. These returns mimic that if process.exit doesn't do it. \nBy doing so now you can use commander in contexts other than a shell.\n. @SomeKittens @zhiyelee Any thoughts? The patch has some added tests.\n. @zhiyelee I agree its not the most graceful approach when it comes to overriding process.exit. A better one long term would be centralizing all the process.exits into a single method that can then be overridden, and passing to that method the exit code as well as error message. The default approach, as it is now, would be to print that message and exit. However then if you wanted to do something else like forward the message to a remote client, you could do so.\nEven if we do that, we'll still need to implement these changes where program flow is interrupted by returns instead of relying on process.exit to do it for us.\n. I should also mention this patch goes most of the way towards fixing the second Con on this list: http://trentm.com/2014/01/a-critique-of-commander-for-nodejs.html\n. ",
    "inikulin": "In addition to the reason of this PR (testing purposes) we have a requirement to apply custom styling for the error messages to make them consistent across our app (e.g. we are using bold red ERROR prefix). I think the best solution for the both issues will be Command's error event. If it hasn't listeners it will behave as it does currently. If it has listener, when process will not exit and message text is passed as event argument. I can issue PR if you are OK with this behavior.\n. ",
    "kevinoid": "I'd also like to see this (and preferably a way to pass an exit function to the Command constructor).  I'm currently overriding process.exit to throw an exception, which also works, but it would be nice to avoid patching process.exit altogether.\n. ",
    "vicjohnson1213": "Sure! haha didn't expect this to go anywhere after nearly 2 years ;). You have a few options:\n\nname jack \\> ma\nname jack \">\" ma\nname jack '>' ma\n\nAs far as I know there is no way to prevent these special characters from doing what they do without escaping or quoting.. ",
    "sergeysova": "And second question:\nHow can i make this commands:\nbash\ndemo glob\ndemo glob install\ndemo glob install <name>\ndemo glob uninstall <name>\ndemo glob purge\n. ",
    "curioussavage": "@SomeKittens I am trying to do the same thing as @uptownhr I think.\nI want a command project\nand I want sub commands like so: add list edit that each take different args.\nSo usage would be something like project add  \"my project\" --categories=\"foo,bar,baz\"\nNot clear to me from docs what is the best way to do this with commander. The git like subcommands section says put sub command in its own file. Maybe a more complete example would help. Would I just export a function or can i export another commander program in order to be able to specify args?\n. For anyone else with a simliar question: the executable the docs mention for subcommands should be another commander program. Commands you define in it can have their own arguments defined. They will all get passed through, even if the command in the main program doesn't define them.\n. ",
    "tejasmanohar": "@SomeKittens oh neat i didn't know htat. but yeah that gives another reason to use module.exports i'd say\n. @SomeKittens removes unnecessary variable declaration- very very minor change. no drawbacks afaik. this feature exists in es5 and is slightly cleaner than people looking at why are they doing var self = this so why not use it :)\n. i no longer wanna pr this haha, sorry :- would recommend opening another issue if you do. ",
    "prometheas": "Yes, please.. I'm just OCD enough to take it on \ud83d\ude0f but I'd definitely want guidance from the maintainer on what rules to go with. I find the [airbnb/javascript]. ",
    "GM-Alex": "Please merge that change, the possibility to use commander with nexe would be awesome.\n. Please merge it for the next version, should not affect the program logic and is a huge improvement if you are using an IDE.\n. ",
    "yasserf": "+1\n. ",
    "vilic": "@vanesyan The last two commits are not actually part of this PR, but I am closing it anyway.. ",
    "alexcanessa": "Massive +1 on this one.\nTo @SomeKittens's point:\n\nMy issue is what happens if the root program (app in this case) also has a -c option.\n\nIf isDefault has been set to true, means that there isn't going to be any \"root program\".. This issue should be closed as fixed with @CedricReichenbach's #605. ",
    "travisperson": "Why not have a required function, which acts the same as option but sets a flag?\n. > I mean, does it make sense to mark an option as  and allow the user to not supply it at all?\nI think so. The angle brackets say that if you use this flag, you must also provide a value. There might also be times when I want to force the user to provide an argument, but I wish to have it named.\nSo I can see two types of flag style arguments for required.\n1) A flag that if specified, has a required value (angle brackets)\n2) A flag that must be supplied (non optional flag)\n. ",
    "rottmann": ":+1: \nOr name the function requiredOption (no need to change or touch the option() args), so it is obvious that an option is required.\n. @euoia with -- i got /usr/bin/env: babel-node --: No such file or directory\n. Seems to work now.\n. ",
    "snow01": "I have fixed this in different manner. No additional function or flag is required. See here - https://github.com/tj/commander.js/pull/503\n. @ProTip - Did not understand your point on allowing callbacks.\n. No wonder, I can see 36 pull requests pending on this wonderful project. After waiting long for this pull request to pass, I had created another module that provides similar functionality as commander and adds few more niceties. I would share soon.\n. ",
    "brunapereira": "@snow01 Your fix just makes sure that if I have a flag -C without a value, it will throw an error. I think the main idea of the functionality is throw an error when the flag itself is not specified.\nNowdays: ./command -C => throws an error\nWhat is being required: ./command => throws an error. Where is the flag -C?\nSo, will the feature be merged? \ud83d\ude04 . ",
    "nicogreenarry": "I agree something like this would be helpful. In the meantime, I wrote a utility function that automatically checks for required params:\n```javascript\ncli\n  .version('0.0.1')\n  .option('-y, --year ', 'Year for reports')\n  .option('-d, --directory ', 'Directory with the report subdirectories')\n  .option('-u, --upload', 'Do upload files for matched companies')\n  .parse(process.argv);\nassertRequiredArgs(cli);\nfunction assertRequiredArgs(cli) {\n  const ommittedRequiredParameters = [];\n  cli.options.forEach((option) => {\n    const name = option.long.slice(2);\n    if (option.required && !cli.hasOwnProperty(name)) {\n      ommittedRequiredParameters.push(name);\n    }\n  });\nif (ommittedRequiredParameters.length !== 0) {\n    throw new Error(The following required parameters were ommitted: ${ommittedRequiredParameters.join(', ')});\n  }\n}\n```. ",
    "mfowlewebs": "Looks like a dupe of #461 I think? Nice workaround.\n. ",
    "lsm": "@abetomo It's been almost 2 years.  Let me double check if this is still necessary.. I was using commander in a lib instead of using it directly in app.  My use case was I need to modify the returned result after calling parse.  So it's nice to have the parse function always returns the result (instance of commander) regardless the input (having subcommands or not).  I guess no one is using it that way so maybe it's not necessary.  But, I do personally prefer functions to have consistent returns which I believe causes less surprises.. ",
    "martellaj": "It looks like this has been discussed, fixed, and then reverted in the past. What's the current state of this? The README has examples with custom names, but can't figure how to do it either (other than the solution @gocreating posted). Any guidance?\n. Well the Usage: index line printed for commander help is independent of how you can use your app on the command line. If you want to change how you execute, add the following to your package.json.\n\"bin\": {\n    \"what-you-want-to-execute-with\": \"./path/to/your/main/file.js\"\n  }\n. ",
    "gocreating": "@martellaj I think we are talking about different things. Let's take git for example.\nI want to change the main command git to another word like yothisismygit.\nHowever, what the previously merged PR done is about subcommands like commit of git commit or push of git push.\nRight?\n. ",
    "GnaspGames": "@martellaj You comment doesn't seem to be correct. The usage: name output doesn't appear to be changed when using bin in the package.json. It still displays the name of the .js file rather than the command name. \n. ",
    "ZanderBrown": "Any progress on this?. ",
    "elliotleelewis": "You can use the .name method on your program object. Like so...\nprogram\n    .name('test')\n    .usage('<src>');\nThen the output would be:\nUsage: test <src>\nHope this helps \ud83d\ude00 . ",
    "dienluong": "I was trying to figure this out too. The API documentation didn't help because it was so dated.  I would update it myself (at least the name() part) if I knew how to access the source.. ",
    "theenoahmason": "For anyone that wants this linked to their bin command:\nvar program = require('commander');\nvar pkg = require('./package.json');\nvar cmd = pkg.name;\nif (pkg.bin) {\n    for (var key in pkg.bin) {\n        cmd = key;\n        break;\n    }\n}\n\nprogram.name(cmd);.\n",
    "gabrielcsapo": "@tj is this a feature that you would be okay with someone creating a PR for?. ",
    "bagage": "@vanesyan could it be considered? Eg. having a choice or equivalent select mode?. ",
    "dcbartlett": "With the way that the system is calling the sub-commands with this setup, each program is in its own scope/node container.  This means that the reading of the options has to be done in each sub-command. So while its annoying to have to parse the arguments and options in each command that needs them (I.E. all of them for your case), we don't have a better option at this time.\nAt least this is what i've run into myself.\n. ",
    "subwiz": "Facing same problem. I have:\n``` js\nprogram.command('help', null, {isDefault:true})\n  .description('display help information.')\n  .action(function(){\n    program.outputHelp();\n  });\nprogram.command('*', null, {noHelp:true})\n  .action(function(cmd){\n    console.error('unrecognized command: ' + cmd);\n    program.outputHelp();\n  });\n```\nnoHelp is working as expected, while isDefault has no impact.\n. ",
    "stevenzeck": "Is this going to be looked at?  It seems like https://github.com/tj/commander.js/blob/aaa447a8f0717771d0b021c27b709ef867c220e0/index.js#L169-L191 is being called three times.  The first time it correctly finds the isDefault flag, the last two are undefined.. ",
    "padcom": "Is this package at all maintained anymore? This is really a critical issue and is still not fixed.. It seems like you want some other package than commander.js. Commander.js is all about command line and has no (nor should have any) support for GUI.\nJust imagine running commander over SSH - get it? . ",
    "paulmelnikow": "These days I'm using:\n\nhttps://github.com/nodeca/argparse\n\nAnd a more popular alternative is:\n\nhttps://github.com/yargs/yargs. \n",
    "yar00001": "just tired $node app.js --path \"c:\\test folder\\\" and it seems double quote did the trick.\n. ",
    "fatso83": "Yup\n```\ncarl-erik at timbuktu in ~/kode/pick_json  (master)\n$ pick_json \"version\" < appinfo.json\n1.1.1\ncarl-erik at timbuktu in ~/kode/pick_json  (master)\n$ pick_json 'version' < appinfo.json\n1.1.1\n```\nBut that really does not come as a surprise, as the shell does the unescaping. I can escape the quotes, as in pick_json '\"version\"', but then you are already way into hack and slash programming to work around the bug, and it doesn't work anyway (in my case).\n. I looked at the source, and it happens due to the logic in parseOptions and parseArgs that does away with the dashes, and subsequently \"--version\" and \"version\" both emits the same signal.\nNot totally sure how to fix this in a nice way.\n. Maybe Options should have a prefixed name to avoid overlapping event names? I understand that this might be troublesome due to the logic involving the \"--no-\" prefixes.\nWhatever the solution might be, \"--version\" and \"version\" should result in two different event names.\n. Duplicate of #471 . Think we'll have to check out your project :-) This is just way too buggy.\n. ",
    "acrisci": "What I want is actually implemented as program.args.\nSorry for the noise.\n. ",
    "Alhadis": "This is probably never gonna be looked-at, if this package's recent traction is anything to go by.\nHave taken it upon myself to develop a simpler and more hands-on alternative instead:\nhttps://www.npmjs.com/package/get-options\nThanks anyway. =) Will leave this open in case somebody does feel like it warrants actioning.\n. Haha, maybe. :D\nToo late now, though. Really happy with how this turned out. =)\n. ",
    "marcmarcet": "+1\n. ",
    "hacksalot": "You could always do:\n``` javascript\nvar Command = require('commander').Command;\nCommand.prototype.helpInformation = function() {\n    return \"My help information!!\"\n};\n/ Do stuff with Command /\n```\n. ",
    "tizmagik": "@Unitech why was this closed? I'm having a similar issue and wondering if a fix like that should be PR'd in to commander? Or have you found another solution?\n. ",
    "donaldpipowitch": "Can I write a default action for an option? It is quite nice that I can create a \"global option\" which is passed to every command, but if I have many commands I don't want to call loggingFramework.setLogLevel(options.quite) everywhere.\nI can't do commander.parse(process.argv); commander.opts();, because then the commands action is called before I can do something with opts. But it looks I need to call parse before I can use options correctly.\nAnd it looks like these global options aren't shown in the --help output of a command.\n. Cool, thanks.. I just stumbled over this. Is using command:* a workaround or intended behaviour? It seems to work.. ",
    "thetutlage": "@donaldpipowitch Going through the source code and found this line. https://github.com/tj/commander.js/blob/master/index.js#L393\nIt seems to be possible as\n```js\nProgram.on('verbose', function () {\n  process.env.VERBOSE = this.verbose\n})\nProgram.on('quiet', function () {\n  process.env.QUIET = this.quiet\n})\n```\nAlso for options that accept values, the value is passed to the callback function. For example\njs\nProgram.on('env', function (env) {\n  process.env.NODE_ENV = env\n})\nbash\nsome-command --env=production. ",
    "bencao": "In addition to @donaldpipowitch's comment, in order to listen on the option event, we could use:\nprogram\n  .option(\"--disable-tty\", \"disable tty\")\n  .on(\"option:disable-tty\", function() {\n    // do something here\n  }). @abetomo Would you mind help review this PR? Thank you so much.. @vanesyan Would you mind help look into this PR when you're available?. @abetomo sorry to bother, but we haven't yet heard back from @vanesyan for a while, can you help somehow reach out to him?. Thanks @vanesyan for the careful review. I'll address the styling issues soon.\nFor the breaking changes of autocompletion flag, how about if we add a guardian condition that only if we notice at least one autocompletion rules are registered, we trigger autocompletion logic, otherwise we simply skip this function so even if previously user had defined options in those reserved keywords commander will still work as expected?. Thanks for pointing out the size problem. I have created an PR https://github.com/f/omelette/pull/36 to shrink the size of upstream omelette package, with the new version the size (24.2kB) issue should be less concerned.. parse will always call autocomplete transparently, in this way autocomplete method don't have to be a public user API.\nFor normal cases, overhead should be acceptable since we only have several string comparison operations. \nIf argv shows that this request is likely for autocomplete, omelette will take over and program.exit(0) after processing.. added production dependency to omelette, which target supports for node 5+, I guess it should be ok?. Added a guarding condition statement around this.autocomplete() call in parse function. only if at least one rule has been defined we'll run into argv checks.\nIn this case, we can assume that the user is aware of the completion feature and will solve the confliction of test flags if there's any.. ",
    "opatut": "Aahh, nevermind. Within this jungle of command line parsers I skipped most of the README and headed straight for the \"git-style subcommand\" part -- did not see the normal .command().action() chains above. I thought having git-style binaries for handling subcommands was obligatory, not optional. Actually love the .command().action() semantics. :+1:\n. ",
    "nVitius": "This is good to know. It would be helpful to have in the README.\n. ",
    "dszakallas": "Our naming policy enforces camel case for filenames, but subcommands are more naturally written in kebab case. Currently commander doesn't do this mapping neither gives an option for me to do it manually. It would be great if there would be either\n- camelize option for subcommands or\n- a way to configure the executables` path.\n. ",
    "hongkongkiwi": "+1 for this\n. ",
    "jahbini": "function allowUnknownOptions has no discernable effect.  The default action on unknowns is to eat the next option.  calling allowUnknownOptions(false) should abort processing and show help if any funny flags are present.\n. ",
    "willxy": "+1 for this.  I want to be able to print out usage help when an unrecognized option is given.. I'm seeing the same thing.  In my case, eg if -x is a valid (boolean) option and -y is not a valid option, then if the user tries to execute:\nmycmd -x foo -y\nthen I want to report back to the user that -y is an unknown option.\nIn any case, I think it shouldn't just disappear; it should either trigger \"unknown option\", or appear in .args.. This came up previously also in #482.. ",
    "RWOverdijk": "Oh. Alright :)\n. ",
    "evilebottnawi": "@SomeKittens i get this code from your readme\n. ",
    "euoia": "I have the same issue except the I'm using -e. When using -e it seems that node is being called with its -e flag. If I provide the long argument --environment, I don't get an error.\n. @rottmann I found that changing the first line to the following in my main command and all subcommands seems to work:\n```\n!/usr/bin/env babel-node --\n```\nDoes that work for you?\n. @zhiyelee can we close this?\n. ",
    "tproenca": "Have you tried installing babel-cli globally?\nnpm install -g babel-cli\n. +1 to merge!. ",
    "heychessy": "I tried the above, but it is still not working. I tried installing babel-cli globally, but still getting ES6 syntax errors . Is there something wrong with bin/env ? where the babel-node suppose to be present?. > I tried the above, but it is still not working. I tried installing babel-cli globally, but still getting ES6 syntax errors . Is there something wrong with bin/env ? where the babel-node suppose to be present?\nI resolved the issue. So basically, my npm start script was\"start\": \"babel-node --presets es2015 index.js\"\nAnd I had only put #!/usr/bin/env babel-node at the start of my js file. And I was trying to it via cli. But I for got to create a .babelrc file with preset - \n{\n  \"presets\": [\"babel-preset-es2015\"]\n}\n. ",
    "deian": "LGTM. Thanks for doing this. The only thing I would point out is a style difference: it seems like the rest of the file doesn't use curly braces for a single-statement if. (Though I'm in no position other than to informally comment.)\n. ",
    "ajfranzoia": "@SomeKittens Let me know if there's anything that needs modification (same for #492 and #494)\n. @abetomo done!. ",
    "hellowin": "@ajfranzoia I think what @deian said is, you just need to change\nif (alias === this._name) {\n  throw new Error('Command alias can\\'t be the same as its name');\n}\nto\nif (alias === this._name) throw new Error('Command alias can\\'t be the same as its name');\n. ",
    "Turbo87": "@zhiyelee could you take a look at this proposal and possibly merge it? this seems very useful if you're porting from some other library to commander to backwards compat.. ",
    "yausername": "Shouldn't this be added to the README? It is not documented anywhere.\nI was wondering why this isn't working\nprogram.on('verbose', function () {\n  console.log('reached here')\n}). @vanesyan any comments? don't you think this would be helpful in the readme?. You need to write like this\nprogram\n  .option('-a, --aaa <aValue>', 'option')\n  .option('-b, --bbb <bValue>', 'option')\n  .option('-c, --ccc <cValue>', 'option')\n  .parse(process.argv);\nYou can then access the value using program.aaa. ",
    "rarkins": "This would definitely be helpful. ",
    "e-cloud": "+1, IMHO, the global description should be displayed above the subcommands list. But, options below subcommands are acceptable. \n. ",
    "ValentinTrinque": "=> Yanked reference\nI encountered this issue, right here :\n```\n  Usage: jads [options] [command]\nCommands:\nconfig [opt]  Manage settings used during the file generation\nhelp [cmd]    display help for [cmd]\n\nJoomla CMS extension development made easy.\nOptions:\n-h, --help     output usage information\n-V, --version  output the version number\n\n```\nAs you can see, there are some inconsistencies.\nFirst, the automated help brings up options then command. That's not what the display shows. options are after commands.\nSecond, the description is displayed after the commands. It doesn't feel right to go through the available commands to find the description.\nSimply moving the .concat(cmds) at the method chain will fix this.\njs\nreturn usage\n    .concat(desc)\n    .concat(options)\n    .concat(cmds) // <= moved to bottom\n    .join('\\n');\n. @jason0x43 :\n\nHowever, I think the [options] [command] order is correct.\n\nI totally agree. The PR is ready since a while now though...\n. Is there anyone to review this PR ? Any feedback or something ? Is it still maintained ?\nIt's been nearly 6 months already... I think it's not cool for your maintainers to be so silent when there are willing to improve an open-source tool...\n. This branch is tested and ready to merge.\n. Ping ? Is there anyone on this repository ?\n. Since it's been a while I deleted the repo with its PR. I will resubmit a new one. I hope this one will get merge.. (( @ThomasSimoens, I guess you wanted to mention @vanesyan instead ;) )). Ping @abetomo . Thank you for your reactivity :). I've used Git man pages as an example for the ordering. Also, in my opinion, the options applies directly to the executable such as verbosity, or any option to configure the execution. Then, the commands have arguments which can be expressed as plain word list, delete or as option-like style -l, -d respectively.\nSome may say that is a matter of style / taste, but it makes sense to me. Also, since git sees it this way as well, it should make us confident about this changes.. ",
    "jason0x43": "I agree that the top level description should go before the commands. However, I think the [options] [command] order is correct. The [options] at the top level are top-level options, not specific to a subcommand, so it's reasonable for them to come before the subcommand. Each subcommand description will also have its own [options] if it takes options (and those options would come after the subcommand).\n. ",
    "revington": "The idea is to always point to stable no matter which version stable. If 5 become LTS and 6 become stable then node will point to 6 and we can add 5 as LTS\n. ",
    "rsandor": ":+1: \n. ",
    "KyleAMathews": "Oh nice. This might the issue some of my users are running into? https://github.com/gatsbyjs/gatsby/issues/80\n. ",
    "ProTip": "I need required opts as well, can we get this merged?\nOn a side note, would also be great to call callbacks even if the option is missing...\n. I'm using coffeescript with BlueBird and do this:\ncoffee\nprogram.command().action ->\n  do async ->\n    foo()\n. I have since moved to TypeScript but this should be applicable to Babel etc. Commander does not need a return or anything, so I just pass the async method directly to it:\nTS\nprogram.command(async function() { } )\nI actually wrap commands with a method that catches errors:\n``` TS\nwithErrors = (command: (...args) => Promise)=> {\n    return async (...args: any[])=> {\n      try {\n        await command(...args)\n      } catch(e) {\n        console.log(chalk.red(e.stack))\n        process.exitCode = 1\n      }\n    }\n  }\nasync function myComand() { }\nprogram.command(withErrors(myCommand))\n```\n. ",
    "alleles": ":scream_cat: need this!\n. ",
    "jjshammas": "Any update on this? Been a long time.\n. ",
    "anton-rudeshko": "@zhiyelee @SomeKittens come on guys, could you please at least have a look at this PR?\n. ",
    "szimmer1": "bump\n. ",
    "JoshuaKGoldberg": "Bump\n. ",
    "steve-a-jones": "Looks like this merge was rolled back .. https://github.com/tj/commander.js/pull/573 . Was this due to build failure or failed tests?\nWorks fine for me, but currently on\n\"commander\": \"git+https://github.com/tj/commander.js.git#975e5a42f27887c8ed23002dac6f091fbb48fe81\"\n. ",
    "josser": "@AGresvig have you found any good ways to do such thing? \n. ",
    "AGresvig": "@josser I'm now using Babel and ES7 async handlers:\nasync handler(argv) {\n    try {\n      await doThingsWith(argv);\n    } catch (e) {\n      console.error(e.stack || e);\n    }\n  }\nAnother option I tried with some success was Bluebird's coroutine\n@ProTip Nice one! Not having to write the error handling every time is very convenient\n. ",
    "bduff9": "Just tried this with node 8, however it does not seem to work.  I have it set up like the following:\n```\nasync function handler (env, options) {\n    await someAsyncFunc();\n}\nprogram\n    .version('0.0.1')\n    .option('-d, --download', 'Download only')\n    .action(handler);\nconsole.log('Finished!');\n```\nHowever, this simply prints Finished! and then exits.  In fact, even --help does not work with this, unless I remove the action line and replace it with .parse(process.argv);.  What am I doing wrong?\nEDIT: Nevermind, I misunderstood the purpose of program.parse(process.argv);  The above works perfectly if I add in this line prior to the console.log line.  My mistake.. ",
    "lipp": "@tj what do you think?\n. @tj ping :)\n. ",
    "ccorcos": "Nice @ericuldall! I've been working on a similar project myself:\nhttps://github.com/ccorcos/cli\nI used it as an opportunity to explore some category theory stuff -- check out the error messages :) -- but your implementation looks nice and lean!\n. Check out vorpal. It's much more predictable.\nOn Sat, Mar 18, 2017 at 13:42 Jeremy Rylan notifications@github.com wrote:\n\nHad the same problem, you just need to do this:\n'use strict'\nconst program = require('commander')\nprogram\n  .command('hello')\n  .option('-n, --name [name]')\n  .action((options) => {\n    console.log(hello ${options.name || 'world'})\n  })\nprogram.parse(process.argv)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/issues/591#issuecomment-287573331,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABth3wdmRqN8Q4Tu5o4NHue3mkPwYuF-ks5rnEGsgaJpZM4K9Y3_\n.\n. \n",
    "jmatsushita": "Ran into the same problem just now.\n. ",
    "nukelytide": "I can confirm this issue as well.. ",
    "stnever": "I can confirm this issue on commander@2.18.0 as well.. ",
    "zdying": "@ericuldall why use -V not -v?\n. ",
    "privateOmega": "@ProLoser Have you ever figured out why the problem occurs? I too am at the same point.. Please merge this.. ",
    "ProLoser": "I think I went with a simpler library and did more heavy lifting myself but I don't remember the project.. ",
    "mojavelinux": "\nI don't get why not having a 'description' argument vs calling .description() has such a significant impact on behavior for example\n\nBased on my understanding of this library, if you pass a description to the command() call, that creates an executable-based command. If you instead set the description using a description() call, that creates an action (i.e., callback-based) command. These two types of commands are processed differently. While they should have generally follow the same rules, due to inconsistencies / bugs in the code, they sometimes differ.\nI agree it would be nice if the documentation better explained the difference between the two types of commands and the implications of choosing one versus the other. I don't think \"Git-style sub-commands\" is the most appropriate heading.\n  . This is already possible. It's just a customization:\n.version('1.0.0', '-v, --version')\nIf the flags aren't specified, they just default to -V, --version.\nOne pattern I happen to like is to honor the -v when specified as the only argument, but then let it get used as an option when combined with other options and arguments (such as verbose).. I think the API docs need to be updated to reflect the fact that flags can be specified as an override.. As it turns out, the flag can be overridden, but the program continues to respond only to a long name that resolves to \"version\". But this makes the help inaccurate.\nI'll submit a patch to respect the name of the option specified in the method.. Patches submitted!. @ahmadawais You are using the default name for the option, which is version. If you wanted to use a different name, like --revision, then it wouldn't work. So this fix doesn't apply to your use case, but important nonetheless.. Although I like mocha, I think ava would be the best fit for this project. It's extremely simple and lightweight, and it can continue the practice of running the test files in separate node processes.\nTo help move this discussion forward, I started PR #755 with just two of the test files migrated. This should hopefully provide enough context to help the group come to a decision about whether or not this is the right choice.\n\nusing new Command() for each test\n\nI totally agree we should be using new Command() for the test instead of using the global instance. That will make testing multiple scenarios in the same file feasible.\n\nso there's no ES6 rewrites in it yet, though I'll be using lambdas to define the tests.\n\nGiven that 4 is the minimum node version supported, there's no reason not to use lambdas at least.. Parsing the command is the easy part:\nvar args = name.split(/ +(?=$|\\[|<)/);\nvar cmd = new Command(args.shift());\nThe problem is in handling the user input. All arguments are pre-split, coming in as process.argv. This library would need to consider commands that have spaces and look for a match in the argv.\nAnother way to think about this is to have nested action-based commands. But it seems that this library does not support that style. It only supports one level of nesting for action-based commands.. We could split the name and stash it away on Command. Then, in parseArgs, we could do something like:\nfor (var i = 0; i < this.commands.length; i++) {\n  var names = this.commands[i]._names\n  if (names.length > 1) {\n    if (args.slice(0, names.length).join(' ') === names.join(' ')) {\n      this.emit('command:' + args.splice(0, names.length).join(' '), args, unknown);\n      return this\n    }\n  }\n}\nIt's a bit of a hack, but we're looking for the first command that will match, taking as many of the arguments as it needs to make the match, then falling through to the existing behavior.. If that seems like a reasonable approach, I'd be happy to prepare a PR.. :+1: . The maintainer has decided not to add this method. See https://github.com/tj/commander.js/pull/738, where you can still find the utility method if you need it.. > Thanks for helping us. We are really appreciate it :)\nYou're welcome. I'm happy to help. I should be able to stay involved as I've selected commander.js as the interface for my new project ;)\nI'll explain the use case, which should help you understand why I think this is actually pretty core. I want to provide a help <command> feature like that which is found in many command-oriented programs. Now, of course, we could just enhance commander to provide this as an alternative to <command> -h, but for now, it has to be done manually. Here's what I made:\njs\ncli\n  .command('help [command]', { noHelp: true })\n  .action((name, command) => {\n    if (name) {\n      const helpCommand = cli.commands.find((candidate) =>\n        candidate.name() === name || candidate.alias() === name\n      )\n      // or const helpCommand = cli.commandFor(name)\n      if (helpCommand) {\n        process.stdout.write(helpCommand.helpInformation())\n      } else {\n        console.error(`'${name}' is not a valid command in ${cli.name()}. See '${cli.name()} --help' for a list of commands.`)\n      }\n    } else {\n      cli.outputHelp()\n    }\n  })\nSo it seems natural to have a commandFor for performing operations over commands.\nIf you think a better way to go here is to add built-in support for \"help \" as an alternative to \" -h\", I'm happy to explore that route.\n(I would also like to add support for a default command when it's not an executable, which would also require this method to determine if one of the members of argv is a command).. That's fine. It was just an idea. We've got other ideas to pursue, so I'm happy to focus on those.. I'm currently using the following patch as a workaround:\n```js\nconst { Command } = require('commander')\nconst helpInformation = Command.prototype.helpInformation\nconst indentation = '  '\nCommand.prototype.helpInformation = function () {\n  return helpInformation.call(this).split(/^/m).reduce((accum, line) => {\n    if (line === '\\n') {\n      const lastLine = accum[accum.length - 1]\n      if (!lastLine || !(lastLine === '\\n' || lastLine.endsWith(':\\n'))) {\n        accum.push(line)\n      }\n    } else {\n      accum.push(line.substr(indentation.length))\n    }\n    return accum\n  }, []).join('')\n}\n```\nI'd also like to remove the extra blank line between sections.. That's effectively the same as what I proposed.. Now that the help output has been standardized, I no longer think that configuration of the indentation is necessary. I had only proposed that as a compromise for changing the default behavior. But now that the default has changed, I think we're good. :+1:. I'd be fine with saying that the two types of defaults are mutually exclusive if that turns out to be a challenge. Chances are, you are either designing one type of CLI or another.. I'm still playing with this one a bit. And I need to add a test.. Okay, that should give us something to discuss.\nHere's what I'm thinking. First, we may want to use numbers instead of strings for indent and spacing. For example, INDENT=2, SPACING=1 (which are the defaults). That will require some rework.\nI'm also thinking that perhaps this logic should be moved to the functions space() and indent(). That's pretty simple for everything except helpInformation which requires adding a few extra lines to keep the sections from crashing into each other.. The maintainer has decided not to add this method. See https://github.com/tj/commander.js/pull/738.. Here's a simple example:\n```\ncli\n  .name('cli')\n  .command('action [value]')\n  .action((value, cmd) => {\n    console.log('action: ' + cmd.name())\n    console.log('value: ' + value)\n  })\ncli.parse(process.argv)\n```\nCall this with:\ncli action value extra\nNo warning. And the value \"extra\" is nowhere to be seen in the model except in rawArgs.. The open question is whether we should consider these extra arguments an error condition or we should simply pass them to the action to handle. I've implemented it as an extra argument, though the code could easily repurposed.. I'm still working on a test. The version function isn't tested at all from what I can tell, so I'll add a version for both the implicit and custom scenarios.. Tests added!. I made it clear that the long option is required.. :+1: . I went ahead and added a linter configuration based on StandardJS with some customizations that adapt it to this project's style.\nI left the \"yoda\" rule enabled and updated the source accordingly. If you disagree, I can roll that back and disable that rule.\nI disabled the eqeqeq rule, though I think we should move forward with enabling it.\nI changed the comma-leading lines since I couldn't find a rule that allowed us to keep that style.\nI'm not running the linter on the tests since we plan to rewrite them anyway. See #649.. Thoughts?. :+1: \nI will continue adding a few more test cases. I'm sure it will raise some questions.. You can take ideas from gli, which as this feature. See https://github.com/davetron5000/gli/blob/gli-2/lib/gli/commands/doc.rb. The version of npm that comes with node 4 doesn't honor the lock file, so it wasn't hoisting eslint. We should be upgrading npm to at least npm 3 since npm 2 is deprecated.. It was also necessary to move the util.inherits call to the top of the file for node 4. I'm not sure why it gets confused about the order, but it seems to have been fixed in node 6.. This exercise as proved how useful the linter actually is ;). Looks like we're going to have to add eslint as a dependency as no version of npm seems to agree on where to put it when it's a transitive dependency ;(. I also dropped \"node\" from the list of node versions to test since it's exactly the same as \"9\".. Finally!. @vanesyan My pleasure.\nShall we reenable that eqeqeq rule?. @vanesyan Fortunately, those are already exceptions in StandardJS, so nothing to worry about.. It would be great if the help was aware of the terminal width and wrapped lines that overflow intelligently, though I recognize that's a separate feature request.. Currently, two handlers are being registered for the option:version event. This consolidates it to one.. Why is this desirable? Now there is an extra line at the end of the output. No program I know of on Linux adds a blank line at the end of the help text. (e.g., docker help version). Now commander is producing non-standard output.. Just to be clear, does that mean the change is not being reverted? Or that it will be only be if a new issue is submitted?\nAs per the discussion, I think ffmpeg should not be factored in. That program has extremely sloppy help output. We should look at programs with more proper help, such as dnf, apt-get, git, node, awk, grep, man, gcc, and so forth. None of these commands put a blank line above or below the help. And sections are separated by a single blank line.\nI'll share that what I do to solve this problem is override the helpInformation() method and clean up all the excess whitespace. So it's not really a showstopper for me either way. I'm just concerned that commander is introducing inconsistency in the ecosystem of tools. I'm particularly displeased to see yarn inherit this inconsistency because it relies on commander.. > What are your thoughts on un-indenting the help output as well?\nI'm strongly in favor. In fact, I use a patch on top of commander.js to do exactly that.. Another thing I've noticed is that commander.js adds a blank line after the category (such as options and commands). Most commands I use don't include this extra line.\ncommander.js:\n```\nOptions:\n-v, --version                  output the version number\n```\nother commands\nOptions:\n  -v, --version                  output the version number\nSeparate issue?. Thanks a lot for taking care of that, @jaredpetersen. Much appreciated!. For reference, here are the commands where I observe the described behavior:\ngrep, sed, awk, docker, firefox, wget, vim, gulp, mvn, node, ruby, zsh. I'm actually having a hard time finding a command which uses a blank line that otherwise has fairly clean usage text. (There are a lot of commands which have completely disorganized usage text, so I'm ignoring those commands).. Thanks for fixing this @jaredpetersen and @vanesyan for merging. Nice work!. At the time, we were just trying to get the linter set up, so exceptions were added to avoid modifying the code. I'm in favor of updating the code so the exceptions are not necessary.. The reason I did it this way is because it avoids adding an extra space if the list turns up empty. There are other ways to accomplish that of course, this was just a clever way to do it.. Yes, but it's not the spaces between the arguments we're worried about, it's the trailing space. If the array is not empty, we want a trailing space. If the array is empty, we don't want a trailing space. That's why I add a trailing space to each entry. It accomplishes this outcome.\nAgain, it's just one way of getting the spaces correct. I'm happy to change it to something more clear if you don't feel comfortable with it.. OMG! I'm having a polyglot moment!. Fixed!. ",
    "cheton": "I fixed my issue in an Electron app with this workaround:\n``` js\nprogram\n  .version('0.1.0')\n  .option('-c, --config ', 'set config file');\nif (process.argv.length > 1) {\n  program.parse(process.argv);\n}\n. This works for both scenario. pkg.name is the application name specified in your package.json.js\nconst normalizedArgv = ('' + process.argv[0]).indexOf(pkg.name) >= 0\n    ? ['node', pkg.name, ...process.argv.slice(1)]\n    : process.argv;\nif (normalizedArgv.length > 1) {\n    program.parse(normalizedArgv);\n}\n```. ",
    "bolinfest": "There should be a way to tell parse() to treat the arguments as-is. This is the offending line:\nhttps://github.com/tj/commander.js/blob/v2.9.0/index.js#L455\nIf you have the args as a value, args, then it seems like you have to do:\nprogram.parse([null, null].concat(args))\nto get the expected behavior. If you still want to be clever without changing the API, then instead of:\nvar parsed = this.parseOptions(this.normalize(argv.slice(2)));\nyou could do:\nvar effectiveArgs = argv === process.argv ? argv.slice(2) : argv;\nvar parsed = this.parseOptions(this.normalize(effectiveArgs));\nThat way, if argv is a user-defined array, it does not need the prefix, but if it is the canonical process.argv argument, then slice(2) is applied as normal.\nThough I guess this would break anyone who has already hacked around this behavior?\n. The categorical call to outputHelpIfNecessary() (which calls process.exit(0)) from Command.prototype.parseArgs and Command.prototype.action is particularly hard to override from the outside.\n. ",
    "hvmonteiro": "I've catched this problem today, the solution below only works if you are executing the application with 'node start', not if you are directly executing an electron-builder executable (number of parameters change).\n```\nif (process.argv.length > 1) {\n  program.parse(process.argv);\n}\n. it doesn't work in all scenarios, but this worked when executing with `electron app.js` and executing the electron-builder generated binnary, in this case `app`:\nif (process.argv.length > 2 ) opts.parse([\"\"].concat(process.argv));\n```. Thanks @RoyalBingBong, this fixed the issue for me!. ",
    "RoyalBingBong": "For some reason the workarounds posted here didn't really do it for me. So here is mine:\n```javascript\nlet exe = process.argv.shift()\nif(!process.argv[0] || process.argv[0] && process.argv[0] !== '.') {\n  process.argv.unshift('')\n}\nprocess.argv.unshift(exe)\ncommander.parse(process.argv)\n``\nIt just forces your process.argv to always start with['', '.']`, so commander can properly parse it. No matter the enviroment you're in (dev or packaged).\n\nEdit: You will run into problems when passing the current directory via ., e.g. meview .. As a temporary workaround pass ./ or precede the dot with other arguments.\nEdit 2 Better workaround if you use electron-builder or similar, which renames the electron executable:\n```javascript\nlet execPath = process.execPath.toLowerCase()\nif(execPath.endsWith(pkg.name) || execPath.endsWith(pkg.name + '.exe')) {\n  let exe = process.argv.shift()\n  process.argv.unshift('')\n  process.argv.unshift(exe) \n}\n``\nIn dev mode, your execPath will containelectron` and in production the execPath will have the name of your app as the executable name.\n. ",
    "AleixDev": "What about this:\nif (process.defaultApp != true) {\n  process.argv.unshift(null)\n}\nIt works for me using both electron and electron-packager generated executable, and it seems to be the \"official\" way to handle this.\nObviously implementing this on the library itself would break some existing workarounds, so I would keep the existing behaviour by default, and add a parameter to normalize the arguments. For example something like this:\n/**\n * Parse `argv`, settings options and invoking commands when defined.\n *\n * @param {Array} argv\n * @param {Boolean} normalize\n * @return {Command} for chaining\n * @api public\n */\nCommand.prototype.parse = function(argv, normalize) {. ",
    "ShaneQful": "I can certainly see some of the points made in the comment but commander.js doesn't rely on loads of little modules. It's commander.js's only dependency, surely it's worth having one if statement to have no non dev dependencies. \nI also realize that this is your module which we are discussing and you've been the main contributor to commander.js since @tj stopped committing two years ago so commander.js wouldn't be in great shape if you decided to stop contributing or pull your modules like what happened with Azer a few days ago.\n. ",
    "joshuapinter": "And just so we know what I'm talking about, here's a little code sample.\nmy_cli.js\n``` js\nprogram\n  .version(\"0.0.1\")\n  .option('-c, --configure', 'Configure AppHub credentials.')\n  .option('-d, --description', 'Description of the AppHub package.')\n  .option('-n, --name', 'Name of the AppHub package.')\nconsole.log(program.configure)\n  console.log(program.description)\n  console.log(program.name)\n```\n``` bash\n$ ./my_cli.js --configure --description --name\n=>\ntrue\ntrue\ntrue\n```\n``` bash\n$ ./my_cli.js\n=>\nundefined\nfunction()\nfunction()\n```\n. ",
    "CanRau": "would love to use .name, too and @ORESoftware solution sounds simple?!\n. subcommands seem more complex but I'll look more into it tomorrow thanks for the hint.\njust found https://www.npmjs.com/package/wiz-cliparse which might be interesting..\nmaybe minimist could be enough though..\n. ",
    "kcivey": "I just ran into this bug too, and it looks like it's been around for years with no fix: #19. That earlier issue mentions adding a .opts property that would be only the options, with none of the interfering methods,, but that doesn't exist (there's a function there instead, which still has the same problems, returning a function for name and other options that conflict with methods).\nAm I missing some way of using properties with these reserved names? Obviously some are unlikely to cause conflicts, but quite a few of them seem like they'd be popular names for options, so I'm surprised commander.js continues to be used so widely if it fails in a bizarre and undocumented way with certain names (like \"name\" or \"action\"). These are the names, not including several more that start with underscores:\n- action\n- addImplicitHelpCommand\n- alias\n- allowUnknownOption\n- args\n- arguments\n- command\n- Command\n- commandHelp\n- commands\n- description\n- executeSubCommand\n- help\n- helpInformation\n- largestOptionLength\n- missingArgument\n- name\n- normalize\n- option\n- Option\n- optionFor\n- optionHelp\n- optionMissingArgument\n- options\n- opts\n- outputHelp\n- parse\n- parseArgs\n- parseExpectedArgs\n- parseOptions\n- rawArgs\n- unknownOption\n- usage\n- variadicArgNotLast\n- version\n. ",
    "supnate": "I've moved to https://www.npmjs.com/package/argparse because of this limitation.\n. ",
    "tmiddlet2666": "I second this, Would be great to be able to do this and validate options.\n. ",
    "drewbrokke": "Hi @kylelix7, the last argument passed to the callback is actually an options object so you should be able to get the file name value with options.file.\n```\nprogram\n  .command('upload')\n  .description('upload a file')\n  .option('-f, --file ', 'file name')\n  .action(function(options) {\n    console.log(\"uploading...\");\n    console.log(options.file);\n  });\nprogram.parse(process.argv);\n```\nIf you have arguments available to the command (as in program.command('upload' [fileName])), they will be expected arguments in the callback function. See https://www.npmjs.com/package/commander#examples. Hope this helps!\n. ",
    "cameronroe": "What if you're using git-style commands in different files? The options don't seem to come through when chaining the .action cb\n. ",
    "gentunian": "If you want git-style sub commands this is something I would do:\n/var/foo/bar/main:\n``` javascript\n!/usr/bin/env node\n'use strict';\nconst program = require('commander');\nprogram\n    .version('0.0.1')\n    .command('create', 'command description')\n    .parse(process.argv);\n```\n/var/foo/bar/main-create:\n``` javascript\n!/usr/bin/env node\n'use strict';\nconst program = require('commander');\nprogram\n    .version('0.0.1')\n    .command('cluster','command description')\n    .parse(process.argv);\n```\n/var/foo/bar/main-create-cluster\n``` javascript\n!/usr/bin/env node\n'use strict';\nconst program = require('commander');\nprogram\n    .version('0.0.1')\n    .option('-n, --name ', 'Sets the cluster name')\n    .option('-i, --ip ', 'Sets the cluster ip')\n    .parse(process.argv);\n```\nbut note that commander won't show you help usage for options.\n. @frankcchen I cannot reproduce that:\n~/code/nodejs/borrar/main.js:\n```javascript\n!/usr/bin/env node\n'use strict';\nconst program = require('commander');\nprogram\n    .version('0.0.1')\n    .command('create', 'command description')\n    .parse(process.argv);\n```\n~/code/nodejs/borrar/main-create.js:\n```javascript\n```javascript\n!/usr/bin/env node\n'use strict';\nconst program = require('commander');\nprogram\n    .version('0.0.1')\n    .command('cluster','command description')\n    .parse(process.argv);\n```\nTest:\n```\n[seba@leyla:~/code/nodejs/borrar] 2s $ node main.js \nUsage: main [options] [command]\nOptions:\n  -V, --version  output the version number\n  -h, --help     output usage information\nCommands:\n  create         command description\n  help [cmd]     display help for [cmd]\n[seba@leyla:~/code/nodejs/borrar] $ node main.js create\nUsage: main-create [options] [command]\nOptions:\n  -V, --version  output the version number\n  -h, --help     output usage information\nCommands:\n  cluster        command description\n  help [cmd]     display help for [cmd]\n[seba@leyla:~/code/nodejs/borrar] $ node main-create.js \nUsage: main-create [options] [command]\nOptions:\n  -V, --version  output the version number\n  -h, --help     output usage information\nCommands:\n  cluster        command description\n  help [cmd]     display help for [cmd]\n```. @frankcchen I think you could try and play with the result of parsing the options/commands.\nPlay with this:\n/var/foo/main.js:\n```javascript\n!/usr/bin/env node\n'use strict';\nconst program = require('commander');\nconst r = program\n    .version('0.0.1')\n    .command('create', 'command description')\n    .parse(process.argv);\nif (r) {\n   console.log('I think no matches were found');\n}\n```\nI've edited the code. I think you could do a workaround just like that. Each sub-command may also follow the same workaround.\nFor reference what parse() function returns check the source code. And sub subcommand does not force to show you help when you don't provide required options. It only says nothing and you should check options by yourself.\n. ",
    "dgem": "Have a related question about subcommands... what if want to use common options across subcommands. Based on the above it seems I have to define them in all my subcommands. Am I missing something?\nFor example, I want to have a -l --loglevel [debug|info|warn|error] option for all my commands & subcommands. It seems I need to set a program.option in each top level command and all subcommands.\nI guess I could have a function that takes program as a param, or is there a better way?\nYou can see my current attempts in https://github/dgem/kat-nip. ",
    "jlison": "Another solution to have multiple sub commands that seems to be working for me is to:\n```javascript\n// First add general program commands, as you normally would...\n// For example:\n// ...  ...\nconst program = require('commander');\nprogram\n  .command('create ')\n  .alias('c')\n  .description('parent command description..')\n  .on('--help', () => { console.log('help stuff for your create command...'); });\n```\njavascript\n// Remove the passed parent commands, but only when sub (child) commands available.\n// Add program (child) sub-commands\nswitch(process.argv[2]){\n  case 'create':\n  case 'c':\n    process.argv.splice(2, 1);\n    program\n      .command('\\tcluster <name>')\n      .alias('c')\n      .description('subcommand description')\n      .option('-n, --name <name>', 'Sets the cluster name')\n      .option('-i, --ip <ip>', 'Sets the cluster ip')\n      .action((name, options) => { console.log('Name is: %s', name); })\n      .on('--help', () => { console.log('help stuff for your cluster subcommand...'); });\n  break;\n}\n...and finally...\njavascript\nprogram.parse(process.argv);\nAny thoughts on this method? :). ",
    "davidkjackson54": "I understand the process of how Commander handles subcommands and how each level is a js file in its own right - although i think this is a very cludgy approach. \nI will have around 15 first level commands and maybe as many 10 second level commands for each of the first level command followed by optional parameters - so that is going to lead to a huge number of sub files all in the same top level folder  - just to manage the process. \nfor example:\njob list   -prefix \njob status -jname\njob purge -jname \njob submit -batchfile\nin this example job is a top level command category and the second command (list etc) is the action to take within that category.    I would like to isolate all the subcommand files relating to jobs into a jobs folder. That way I would at least be able to manage the 15 or so sub folders for my top level commands.\nRather than be fixed at using  level 1  file followed by level 2 file  having to be in the same folder is \n there any means of being able to specify the structure as to where these files can be found?\nI am at the point of wondering if Commander is actually the best tool for me to use for the type of Command Line Interface that I want to put in place?  \nWhat I would like to do seems reasonable but I have found no tool that will help accomplish what I want to do whilst also providing built in help.. ",
    "evalcodenet": "Following seems to work for me - though I'd also appreciate a proper solution. Grouping of commands and options would be nice too. And some option names conflict with the implementation of commander, e.g. 'name' or 'domain'.\n```\ncommander\n    .version('0.1.0')\n    .description('CLI');\ncommander\n    .command('deployment ')\n    .description('Manage deployment')\n    .option('')\n    .option('create', 'Create deployment')\n    .option('--cloud ', 'Cloud provider', 'aws')\n    .option('--region ', 'Region', 'eu-central-1')\n    .option('--prefix ', 'Resource prefix', 'tld-domain')\n    .option('')\n    .option('update', 'Update deployment')\n    .option('--prefix ', 'Resource prefix', 'tld-domain')\n    .action((command, options) => {\n        console.log(command, options);\n    });\n```\nCan be invoked either way (though the help will produce Usage: deployment [options] <command>):\ncli deployment create --prefix=my-domain\ncli deployment --prefix=my-domain create\nGenerated Help - 1st Level\n```\ncli --help\nUsage: cli [options] [command]\nCLI\nOptions:\n  -V, --version                   output the version number\n  -h, --help                      output usage information\nCommands:\n  deployment [options]   Manage deployment\n```\nGenerated Help - 2nd Level\n```\ncli deployment --help\nUsage: deployment [options] \nManage deployment\nOptions:\ncreate              Create deployment\n  --cloud   Cloud provider (default: \"aws\")\n  --region    Region (default: \"eu-central-1\")\n  --prefix    Resource prefix (default: \"tld-domain\")\nupdate              Update deployment\n  --prefix    Resource prefix (default: \"tld-domain\")\n```. ",
    "DeoLeung": "js\n  commander.option('-I --increment [value]', 'The interval increment', str => parseInt(str), 1)\nthis works though\n. @bfricka yes you made a right guess \ud83d\udc4d \nwould be better to improve the doc :)\n. ",
    "bfricka": "Did you try debugging it? My first guess would be that it's passing two params (input and default), which ends up calling parseInt with an invalid radix (e.g. parseInt(2, 1) // NaN)\n. BTW this is the behavior across options which allows you to do things like collections:\njs\ncommander.option('-f, --foo <val>', 'Add values to foo', collect, []);\nfunction collect(val, collection) {\n  collection.push(val);\n  return collection;\n}\nWhich can be invoked: program --foo=hi --foo=bye and yields ['hi', 'bye']\n. ",
    "reconbot": "dupe of #400 . Probably a dupe of #400. I'll argue it's a bug with the docs, throw (val) => parseInt(val, 10) in there and all will be well in the world. Does seem like this project wont be updated.. ",
    "JustATrick": "Thanks for your attention @zhiyelee, but I think maybe I didn't explain my change well enough.\nI want exactly the behaviour as explained in the stackoverflow link. I noticed that the current code has a problem when I give a set of arguments where double-dash appears more than once. I expected the first double-dash to mark the start of positional parameters, and then all subsequent double-dashes to be treated as positional parameters. However, the current code removes the subsequent double-dashes from the positional parameters.\nMy change ensures that, once the first double-dash is detected, any other double-dashes are passed along as positional parameters. It still allows the first double-dash to mark the end of command options.\n. I don't think the travis test failures are related to this change, as they're failing in the same way on master. See #550 for a possible solution.\n. Hmm, doesn't seem to work for Node 0.6. I'll keep reading.\n. On 29th May a new version (v9.0.0) of should (a devDependency of this project) was released. It specifies its dependencies using caret (^) syntax, which are not understood by the versions of npm that are installed by default on node versions 0.6 and 0.8, and so all subsequent travis-ci builds have failed.\nI first tried to install newer versions of npm as suggested at travis-ci/travis-ci#2076. That worked for node 0.8 but not 0.6. On 0.6 a sufficiently new version of npm fails to install.\nInstead, this 'fixes' the problem by preventing the use of should version 9.0.0 or higher. I'm not sure if this is the best way forward, but wanted to document what I'd found.\n. ",
    "tcoupin": "I found a workaround : remove all \".js\" suffix\n. ",
    "Randgalt": "I'm getting this as well. \n. ",
    "DaniJG": "It might not be entirely clear from the description, but there is another workaround apart from removing the .js suffix.  You just need to make sure you have an empty folder like /bin/git-redmine-tasks/, even if the .js files do not need to be there.\nIf you are building a new cli tool named foo you basically end up with something like:\n\n/bin/foo.js\n/bin/foo-add.js\n/bin/foo-add-component.js\n/bin/foo-add/  --empty folder, or maybe containing a README.md explaing why its there\n\nAnd then you will have foo, foo add and foo add component all available in your cli.. ",
    "pedrorfernandes": "Try this:\njavascript\nprogram.version('1.0.0')\n  .option('-p, --port [port]', 'Registry Server port', 'port')\n  .option('-h, --host [host]', 'Registry Server host')\n  .option('-c, --component [component]', 'Registry Component Name to operate upon')\n  .option('-o, --operation [operation]', 'What operation to perform [start|stop]')\n  .parse(process.argv);\n. ",
    "rvnath": "Got it.  I was missing the [port] part in square brackets.\n. ",
    "hustcer": "Node v6.0.0 seems to have the same problem after I update to Node v6.1.0 by homebrew and switch back by nvm use --delete-prefix v6.0.0, however, when I first upgrade to Node v6.0.0, I didn't meet this problem. It's really quite strange.\n. @cbetta \nActually, just add the following lines at the beginning should work:\njavascript\n[process.stdout, process.stderr].forEach(stream => {\n  if (stream._handle && typeof stream._handle.setBlocking === 'function') {\n    stream._handle.setBlocking(true);\n  }\n});\n. ",
    "nicola": "Same issue here, after an x amount of characters, it returns an EOF\n. Apparently --help triggers a unknown command found that triggers a process.exit(1) on subcommands\n. @cbetta nope, but see here: https://github.com/nodejs/node/issues/6456\n. @bcoe grat work! Thanks for making it modular!\n. ",
    "lpinca": "Probably relevant issue: https://github.com/nodejs/node/issues/6456.\n. @cbetta that's what https://github.com/yargs/set-blocking does, also the issue will be fixed soon in core, see https://github.com/nodejs/node/issues/6980.\n. I think this can be closed now, It should have been fixed in node 6.2.1.\n. ",
    "cbetta": "@nicola do you know what the line/lines are that cause this issue?\n. @nicola ok thanks. Was just hoping to see if i could make a local patch that fixes it for us by changing the way we exit. \n. @bcoe that's awesome. Would love to see if we can make a patch for commander that uses this fix. What would that take?\n. @bcoe @nicola sorry not sure i follow. Can I apply this to my CLI program or does this need to be a patch to commander?\n. @hustcer my hero! Do you think it would be worth shipping as a module that people can easily include? E.g. blocked-io?\n. @lpinca ah now that earlier comment makes sense. Thanks for clarifying.\n. I'd be happy to add this but would love feedback on the syntax. \nSome requirements:\n- Ability to allow for more than 1 alias\n- Allow for selecting what aliases are show in the help screen\nOption 1\n``` js\nimport commander from 'commander';\ncommander\n  .command('link:create  ')\n  .alias('l', 'lc', 'link')\n  .action(...);\n```\nThen --help should look something like:\n```\n\nexample --help\n   Usage: example [options] [command]\n\nCommands:\n  link:create|l|lc|link <a> <b>\n\n```\nWhich might get a bit excessive. Instead some aliases might be hidden instead.\nOption 2\n``` js\nimport commander from 'commander';\ncommander\n  .command('link:create  ')\n  .alias('link')\n  .hidden_alias('l', 'lc')\n  .action(...);\n```\nWhich would then result in:\n```\n\nexample --help\n   Usage: example [options] [command]\n\nCommands:\n      link:create|link   \n```\nOption 3\nThe alternative would be to pass an object with the keys of the aliases and the values of the visibility:\n``` js\nimport commander from 'commander';\ncommander\n  .command('link:create  ')\n  .alias({ link: true, lc: false, l: false})\n  .action(...);\n```\nOption 4\nFinally the last option would be to define aliases outside of the command scope:\n``` js\nimport commander from 'commander';\ncommander\n  .command('link:create  ')\n  .alias('link')\n  .action(...);\ncommander.alias('link:create', {lc: false, l: false}); \n```\n\nI personally prefer option 2 but I'd love some feedback.\n. ",
    "kodie": "Would love to see support for multiple aliases.\nI'd personally prefer something like this:\n```javascript\nimport commander from 'commander';\ncommander\n  .command('list')\n  .alias('ls')\n  .alias('l', false)\n  .action(...);\n```\nWhere alias() can be used multiple times just like option() and accepts a boolean as a second parameter stating if it's visible or not in help (defaults to true). Crazy that this hasn't been implemented yet. ",
    "tdreid": "@kodie 's suggestion is what occurred to me to try naturally. That's how I discovered not yet implemented :). ",
    "FireCubez": "Agreed with @tdreid and @kodie , it's the most natural in my opinion. ",
    "ioxua-os": "Well, Commander already has support for a kind of \"aliasing\" on options:\n```js\nimport commander from 'commander';\ncommander\n  .option('-f, --foo', 'Foo option')\n  .parse(process.argv);\n```\nWhy not reuse the syntax for commands instead? It would look like this:\n```js\nimport commander from 'commander';\ncommander\n  .command('link, link:create  ')\n  .action(...);\n```. ",
    "ganobrega": "This is already being supported?. ",
    "rebeccapeltz": "I am experiencing the same problem after an upgrade today.\n. ",
    "remolueoend": "Just ran in the same problem. When using git-style sub-commands, commander.js spawns a new node-process to execute the sub-command which is located in a separate js-file. When spawning a new process, commander.js is copying all original process arguments to the new process, including --debug, --debug-brk etc. (https://github.com/tj/commander.js/blob/c6236d9504b60d9a2e6aa7fc3ce17a12f48f4a3e/index.js#L543). That means a new node-process is started trying to listen on port 5858 too and fails because the original node-process is blocking the port.\nTo fix this, try to debug the sub-command directly: \nnode --debug my-tool-subcommand.js\nInstead of calling the main script using the sub-command as argument:\nnode --debug my-tool.js subcommand // fails!\n. ",
    "radekk": "It should be added to the documentation, thanks @remolueoend, it works.\n. ",
    "alexklibisz": "If it's considered fixed please feel free to close it. I had forgotten I opened it! :)\n. ",
    "hans-d": "gives too much issues to implement: with .js the bin node can be expected, but what to use for other cases (eg coffee may  not be installed globally)\n. too much hassle to implement the proper bin to execute for files <> .js\n. ",
    "ibrahimduran": "@abetomo Hey, I've just re-debugged multi-level sub commands on master branch and it's working nicely. This PR is not required anymore.. ",
    "endquote": "6.1.0...\n. ",
    "creeperyang": "Cut off +1, node v6.2 and command v2.9.0.\n\n. ",
    "GCheung55": "Cut off here as well. node v6.1.0 and commander v2.9.0.\n. ",
    "tyge68": "I have the same issue with node 6.2.0 and commander 2.9.0\n. It appear that the cut off is due to the program.exit(0) which doesn't give time for the stdout.write operation to complete. Similar issue have been reported. So most likely the implementation should avoid to force exit, instead it should end in a normal flow without this call.\n. @tj forget it I was still running with 6.2.0 on mac os, updating to 6.6.0 resolved the issue #540 as it was suggested (6.2.1  contained the fixed I supposed). So I will close this one.\n. Sure it can be used for older version of Node. Do you want me to reopen the\npull request ?\nOn Mon, 19 Sep 2016, 10:44 a.m. tmarciszewski, notifications@github.com\nwrote:\n\nIs there a chance to introduce this change for previous versions of Node?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/572#issuecomment-247939257, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AHsVzP5J1_wRbWq2Ds5UwLpeUzhCluRnks5qrktogaJpZM4J__0S\n.\n. The test will not help because it does write in the stdout and directly\nexit. So it would exit the test as well abruptly. It can only work with a\nmanual test from what I could see.\n\nOn Mon, 19 Sep 2016, 8:55 p.m. Zhiye Li, notifications@github.com wrote:\n\nCould you also edit the travis.yml and run the tests?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/572#issuecomment-248087422, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AHsVzDiM41Vq_QC2UlkMkPVEMIspLZ_Bks5qrtqUgaJpZM4J__0S\n.\n. Actually a test is possible , it would be simply about creating a command with many options so that the result help text is large enough to fill the the buffer (expecially on Mac OS this happens quickly). Then the test would run that command as an external process (child_process), and read the output of that external process, then compare it to expected value, similar to the tests already existing.\n. \n",
    "cstolli": "\ud83d\udc4d \nI'm having the same problem, my options suddenly just get swallowed and aren't available on the program object anymore\n. ",
    "jasonbarone": "Same problem. I'm having an issue with options like -d, --domain and -f, --filename. Not sure why...\n. ",
    "casterstone": "@Gacnt your example has an error.  The option flags are not separate arguments, it's one argument with the comma in the string.  It should be:\n.option('-n, --po-number <n>', 'The PO number to start at')\n@jasonbarone using -d, --domain <d> works for me, but the short form with argument -d <d> fails\n. ",
    "tjdavenport": "Having same issue. My options object is undefined. I've tried several combinations.\njavascript\nprogram.command('dev')\n  .description('Start the VT frontend suite')\n  .option('-p, --port <port>', 'Port number the express server will listen on.')\n  .option('-s, --socketPort <socket>', 'Port number the socket server will listen on.')\n  .action((env, options) => {\n    console.log(options); //undefined\n  });\nFound a workaround. Options seem to be available in the first argument, env. Not sure if something is broken or of the README just needs to be updated.\njavascript\nprogram.command('dev')\n  .description('Start the VT frontend suite')\n  .option('-p, --port <port>', 'Port number the express server will listen on.')\n  .option('-s, --socketPort <socket>', 'Port number the socket server will listen on.')\n  .action((env, options) => {\n    console.log(env.port); // 1337\n  });. ",
    "json2d": "@tjdavenport you never specified an env command/argument in your example, so options is the first argument.\njavascript\n...  \n  .action((options) => {\n    console.log(options.port); // 1337\n  });\n. Looks like when using program.command, parsed options get stored in its own object and passed as the trailing argument to the function passed to program.action\nSee: https://github.com/tj/commander.js#examples\nSo in your case:\n```javascript\nconst program = require('commander')\nprogram\n    .command('test  ')\n    .option('-e', '--env_vars [envVars]', 'Env vars')\n    .action(function(env_id, action, options) {\n      ...\n      console.log(options.envVars) // => \"a=b b=c\"\n    })\n...\n```\nIt seems to behave the same even if options are placed in front of the command:\njavascript\n// this should work\nprogram.parse(['node', 'my-program.js', '-e', '\"a=b b=c\"', 'test', 'my-env-id', 'my-action']). ",
    "shmup": "@bitstrider can you explain what you mean by \"you never specified an env command/argument in your example\". ",
    "Kaltemrix": "The way i got this working on my end was adding -- after the npm start\nE.g. npm start -- <option>. ",
    "mtrabelsi": "this is pretty annoying, if we are not able to pass strings to option, then this library is completely worthless. very bad, the documentation is outdated, thousands of people will go crazy debugging this issue - just a time waste. ",
    "dominikwilkowski": "I got around this issue by capturing the option out of process.argv and remove it from process.argv and invoking whatever cool thing you wanted to run.\n```js\nif( process.argv.indexOf( '-x' ) !== -1 || process.argv.indexOf( '--surround-sound' ) !== -1 ) {\n    const position = process.argv.indexOf( '-x' ) !== -1 ? process.argv.indexOf( '-x' ) : process.argv.indexOf( '--surround-sound' );\nprocess.argv.splice( position, 1 );\n\ndoTheThing();\n\n}\nProgram.command().option().parse( process.argv );\n```\nHope it helps. ",
    "jbcpollak": "I think I have this problem, please let me know if what I'm describing is something different, or expected behavior.\nI have a program defined like this:\nprogram\n.arguments('[csv]') // [] means optional\n.action(csv2sql)\n.parse(process.argv);\nWhen I execute it:\n./app foo.csv\nEverything works fine.\nWhen I execute:\n./app\nNothing is called and the program silently terminates.\n. ",
    "cabeese": "+1 for @jbcpollak's issue\n. ",
    "rike422": "@jamesr73 glad to hear that it solves another issue,  I\u2019ll merge it soon.\n. > Cool, thanks, can you fix the tests\n@zhiyelee I think the reason it\u2019s failing the tests is related to #550. If we solve that one then I think this PR will pass.\n. this pull-request is duplicates of #494\n. @zhiyelee Thanks for the review, You should fix test in test.command.executableSubcommandAlias.js, I changed test as below and passed the test,\n\n. Should I add test case of that case?\n. ",
    "mikeerickson": "Yes please!!!! I was just wanting this very thing today!  Hope this gets accepted soon!\n. Ahhhh, well that sucks. Guess it needs to be removed from documentation \nWhat are the options? I can use the co (and co-prompt) libraries I guess?\n. ",
    "Queuecumber": "I think the author refuses to support this feature or merge one of the many pull requests that provide it\n. ",
    "omgimanerd": "I've been doing something like this at the end of my file.\ncommander.command('*')\n  .description('**********************')\n  .action(function(param) {\n    var commands = commander.commands.map((command) => command._name);\n    if (!commands.includes(param)) {\n      commander.help();\n    }\n  });\nIf you do this with git-style sub commands though, it will only display help for the root command and not the sub commands. In essence, only use this if you're not using sub commands because this is very wonky.\nUpdate, I've resorted to doing this at the end of the file:\nvar commands = commander.commands.map((command) => command._name);\nif (!commands.includes(commander.args[0]) || !commander.args.length) {\n  commander.help();\n}\nUpdate 2, you know what, fuck this package. Use yargs. ",
    "Dakkers": "Good article about using prompt here: https://developer.atlassian.com/blog/2015/11/scripting-with-node/\n. ",
    "electerious": "Same happens in minimist (https://github.com/substack/minimist/issues/97). Is using ** valid at all?\n. Escaping them as strings works. Good workaround, but I still wonder what's causing the issue.\n. Thanks for letting me know @leo! That helps a lot.\n. ",
    "leo": "@electerious Maybe escaping them as a string works?\nbash\nrosid -i \"**/.bower.json\"\n. @electerious The output is inconsistent because minimist/commander never actually receive all of the strings if you don't escape them as such. Instead of that, bash simply tries to format the paths by itself and then makes the parsed strings available within the process.\nHere's an example. As the guy is stating it: It's neither a bug in minimist or commander, nor in bash. It's just a side-effect of trying to do some low-level logic where it's not really needed. \n. ",
    "bosco-li": "From the test cases here looks like this is intentional.\n. ",
    "lzilioli": "@tj can you consider merging this into the package?\n. @tj any thoughts regarding this fix?. @abetomo @zhiyelee its not exactly clear to me how I would write a test for this change, wouldn't I need to hook into the spawning process?. ",
    "nfroidure": "FYI the temp workaround i had to do https://github.com/SimpliField/miniquery/pull/2/files\n. ",
    "chasenlehara": "@tj, why was this change made? I tried to track down why that change was made, but I couldn\u2019t find anything. \ud83d\ude15\n. ",
    "jayrylan": "I've always been really curious about this as well. I've been using this quick fix near the top of my CLI app to ensure -v works:\njs\nvar vPos = process.argv.indexOf('-v')\nif (vPos > -1) {\n  process.argv[vPos] = '-V'\n}\n. Had the same problem, you just need to do this:\n```js\n'use strict'\nconst program = require('commander')\nprogram\n  .command('hello')\n  .option('-n, --name [name]')\n  .action((options) => {\n    console.log(hello ${options.name || 'world'})\n  })\nprogram.parse(process.argv)\n```. ",
    "sgen": "Probably because several tools use -v and --verbose for their verbose output flag and -V and --version for their version flag\n. Commander passes the remaining arguments to a child process running the sub command script. You can access them with process.argv\n. Commander.command() doesn't actually call a subcommand. It just defines one.\nprogram\n  .version('0.0.1')\n  .command('foo [name]', 'desc' {a:'b'})\n  .parse(process.argv);\nis defining a subcommand called foo. The [name] argument is just for the help message. You're also missing a comma in your example. As for the options the only options mentioned in the docs are opts.noHelp and opts.isDefault, no other arguments are passed.\nYour pm-foo.js file might look like this:\n```\nvar subCommand = require('commander');\nsubCommand\n  .option('-a, --an-option')\n  .parse(process.argv);\nvar args = subCommand.args.slice(2);\nvar name = args.pop();\nif (!name) // ...\nif(!subCommand.anOption) // ...\n```\n. ",
    "JimmyBoh": "Thanks @jrylan, that does the trick. But only if you are okay with the auto-generated help not mentioning -v specifically.\n. ",
    "eisbehr-": "@sgen But nearly the whole environment around commander ueses -v for the version output. It would be more than usefull to have it the same way.\n\nnode uses -v\nnpm uses -v\ngulp uses -v\ngrunt uses -v\n...\n\nIt should at least be configurable. Maybe directly on the version command, like:\nJS\ncli.version('1.0.0', '-v, --version');. ",
    "theoutlander": "I prefer -V for verbose. Also, is there an easy way to replace -V with -v? If I add a new option, it will show both. Maybe I'm missing something.. ",
    "ahmadawais": "Tried to look for a way to add that doc, couldn't. Thanks @mojavelinux for the tip.. Wrote this instead. \nhttps://gist.github.com/ahmadawais/da08521a51d9093edec46eeedc2065ac. Seems to work just fine on my end without the patch? What am I missing?\n. Got it. . ",
    "matsaleh13": "I'll add that I just got bitten by this today, spending a while debugging my code only to find my command line inputs were wrong. Expected valid option was --concurrency, but I fatfingered it as --condurrency, and because I also had provided an expected argument at the end, everything went forward as if all inputs were valid.\nJust for the sake of clarity, my invalid command line was:\nshell\nnode loadtester.js --condurrency 100 --users 1000 devtest_noop_follower.js\nbut it should have been:\nshell\nnode loadtester.js --concurrency 100 --users 1000 devtest_noop_follower.js\nMy code that uses commander is something like this:\n```javascript\nconst program = require('commander')\nprogram\n    .usage('[options] ')\n    .arguments('')\n    .option('-c, --concurrency ', 'Max number of concurrent users.', parseInt)\n    .option('-u, --users ', 'Max number of users.', parseInt)\n    .action(file => {\n        testPlanFile = file;\n    })\n    .parse(process.argv);\n```\nIf I do not pass the  argument, the invalid option --condurrency is detected and I get the appropriate error:\nshell\nerror: unknown option `--condurrency'\n. I think I found the place in the commander.js code that controls this, but unfortunately it seems to be deliberate (from index.js):\n```javascript\nCommand.prototype.parseArgs = function(args, unknown) {\n  var name;\nif (args.length) {\n    name = args[0];\n    if (this.listeners(name).length) {\n      this.emit(args.shift(), args, unknown);\n    } else {\n      this.emit('*', args);\n    }\n  } else {\n    outputHelpIfNecessary(this, unknown);\n// If there were no args and we have unknown options,\n// then they are extraneous and we need to error.\nif (unknown.length > 0) {\n  this.unknownOption(unknown[0]);\n}\n\n}\nreturn this;\n};\n```\nHowever, I'm not sure which use case this should really be valid for. \nBy this point in the code, the unknown argument contains the --condurrency (invalid) option, and the args array contains the correct args passed to the program. \nAlso, this implementation changes behavior depending on whether or not args is populated, rather than on the rules specified by the programmer. If args contains data, then ignore unknown options. I should think unknown options would handled the same regardless of whether args were passed.\nAs an experiment, I changed the code to:\n```javascript\nCommand.prototype.parseArgs = function(args, unknown) {\n  var name;\nif (args.length) {\n    name = args[0];\n    if (this.listeners(name).length) {\n      this.emit(args.shift(), args, unknown);\n    } else {\n      this.emit('*', args);\n    }\n  } else {\n    outputHelpIfNecessary(this, unknown);\n  }\n// Handle unknown options whether or not args are passed.\n  if (unknown.length > 0) {\n      this.unknownOption(unknown[0]);\n  }\nreturn this;\n};\n```\nThis had the desired effect (desired by me anyway ;)): Both of the following command lines produced a useful error message:\n```shell\nnode loadtester.js --condurrency 100\nerror: unknown option `--condurrency'\n```\nand\n```shell\nnode loadtester.js --condurrency 100 path_to_file\nerror: unknown option `--condurrency'\n```\nI'd love to submit a pull request to fix this, but I don't know enough about the rest of the project (at the moment) to know whether I'm on the right track, or missing something important.\nAnyone care to guide me at this point?\nThanks!. ",
    "charlierudolph": "@vanesyan @abetomo you two appear to be the last two to commit code to this library. I would really like to have this fixed and would be willing to send a PR. Any feedback on this before I make a PR?. ",
    "kingerking": "In my case the command works without any options being passed but when i try to pass a option it gives me this error \ud83d\ude15 This is my code:\nprogram.command('edit <fileURL> <key> <value>')\n.description(\"Will edit a json file.\")\n.option('-s, --spaces <number>', \"Number of spaces to re-parse the file with.\")\n    .action((url, key, value, cmd) => {. ",
    "kahunacohen": "These are just the remaining arguments on the command-line. How do I get a hold of extra arguments passed after the description argument of command()? In pm-foo.js if I print out process.argv I get ['node', PATH_TO_PM_FOO]. No {'a': 'b'}.\n. ",
    "PaulBeaudet": "Not sure how to comment on this with the exact syntax being use above, but I just ran into a similar issue. apikey wouldn't be property of options.apikey it would be nested in the parent property options.parent.apikey. Allows you to inherit options from the parent instead of repeating them it looks like. Logging out options will show the data structure. Looks like two sub commands there vs the parent and the sub like I just used https://github.com/PaulBeaudet/jitployClient/blob/master/jitploy.js#L227-L244\nedit: Actually those links are relative to master, bad idea to post like that\n   cli.program\n        .usage('[options] <file ...>')\n        .option('-k, --key <key>', 'key to unlock service config')\n        .option('-t, --token <token>', 'config token to use service')\n        .option('-r, --repo <repo>', 'repo name')\n        .option('-s, --server <server>', 'jitploy server to connect to')\n        .option('-e, --env <env>', 'unlocks for x enviroment')\n        .action(cli.run);\n    cli.program\n        .command('lock')\n        .usage('[options] <directory ...>')\n        .description('encrypts configuration, on templates a decrypted file if its non existent')\n        .action(function encryptIt(dir, options){config.lock(dir, options.parent.env);});\n\nThat's as snippet of working code. ",
    "armoucar": "yep, it's kind of annoying that usage displays an invalid command.\nMy solutions was:\n.usage('\\n\\n  $ pm install <generate> [options]')\n\nThen it displays like:\nUsage: pm-install\n\n$ pm install <generate> [options]\n\nOptions:\n\n  -h, --help   output usage information\n  -f, --force  force installation.\n",
    "CedricReichenbach": "Usage is prefixed with the name property of the command, which defaults to the file name. I created a PR to make this settable through a chainable function: https://github.com/tj/commander.js/pull/605\nAs a (hacky) workaround, you can currently just override _name, but you probably shouldn't rely on that, as it's not part of the intended API:\n```\nvar program = require('commander');\nprogram._name = 'litoria generate';\nprogram\n    .description('generate html from the asciidoc file using html5 as backend')\n    .usage('litoria  [options]')\n    .option('-b, --backend', 'backend - html5, docbook')\n    .parse(process.argv);\n```. ",
    "FDiskas": "index-init.js file:\n```\nconst program = require('commander');\nconst path = require('path');\nprogram\n  .option('-f, --file [optional]', 'creates a config file template')\n  .parse(process.argv);\nconsole.log(program.file);\n```. ",
    "gregglind": "Another example command:\n```\n!/usr/bin/env node\nvar program = require('./index')\n  , should = require('should');\nprogram\n  .command('try ')\n  //.action(function (dir) {\n  //  console.log('try %s', dir);\n  //});\n;\nconsole.log(process.argv)\nprogram.parse(process.argv);\nconsole.log(\"12\", program.args);\n```\n. It's the decision flow about where 'self' should insert in the listener / action handler that seems... weird.\n. ",
    "pciapcib": "Same question for me.. ",
    "ErBlack": "@tj, @zhiyelee, @SomeKittens give some response please.. ",
    "HakurouKen": "Sure, resolved.. ",
    "amonks": "https://github.com/tj/commander.js?#variadic-arguments\n:)\n. Could you use the args value?\n``` bash\nmyapp --option value file1 file2 file3 --optionb value file4\n//=> command.parse().args === ['file1', 'file2', 'file3', 'file4']\n```\nIf you needed to, you could add a --use-a-list-of-files toggle, if it's set, you treat args as a list of files.\n. ",
    "develmts": "It specifies exactly \"The last argument of a command can be variadic\"\nAnd If there isn't a command ?\nI was asking for something like\nmyapp --list-of-files-to-use file1 file2 file3\n. That's what I'm using right now. but it would be nice to be able to specify\nvar cmdr=  require('commander')\ncmdr.version('1.0.0')\n        .usage('something')\n        .option('-m, --mods <mod> [otherMods...]', 'some description', [ ])\nand after parsing ,commander returns something like:\nvar modlist = cmdr.mods; // modlist contains ['item1','item2', 'item3']\nThis is not and \"urgent\" request . it's just a \"nice addition if posible\"\n. ",
    "lastmjs": "I'm seeing the need for this as well.. I've gotten around this by taking in a comma separated list for an option. I take the option value and split the list to get my variadic arguments. I kind of disagree that it's not normal to want variadic values. I have a very legitimate need for them and I'm sure there are many more use cases.. ",
    "sntran": "\nI was asking for something like\nmyapp --list-of-files-to-use file1 file2 file3\n\nAnother option is to use Coercion (as noted in examples):\njs\nprogram.\n  .option('-f, --files <file>', 'A path for file.', function(file, files) {\n    files.push(file);\n    return files;\n  }, [])\nWhen called with:\nshell\nmyapp --files file1 -f file2 --files file3`\nWill give you an array of files:\njs\nconsole.log(program.files);\n// ['file1', 'file2', 'file3']. I think you just have to put it in the option's description, i.e.\n.option('-p, --port [port]', 'The port to listen to. Default: 9999.', parseInt, 9999). ",
    "rousan": "I think support for variadic args on options should be added.. ",
    "toniopelo": "Any plans on adding this feature ?. ",
    "ericnewton76": "There might be a way to add it but I bet it breaks far more than you'd want.\nAnd realistically it's not normal to want a variable list of values going into an option... nix getopt specs i doubt would have any specs for that... because it makes it hard to determine where to assign values.. A command separated list is a fine solution for your problem.\nThe real issue is when you have a variadic option, and no options between that variadic option and other arguments, they bleed into the variadic.  Using a comma separated list helps define for the parser that these arbitiary characters showing up are still part of my --mods option, and not input file arguments (for example)\n. What version did you notice this? 2.12.2 doesnt seem to do this.\njavascript\nvar program = require('commander');\nprogram.option('--optional [value]')\n  .option('--required <value>')\n  .parse(process.argv)\nconsole.log(\"running. --optional='%s' --required='%s'.\", program.optional, program.required);\nrunning in shell:\n```bash\n$ node test.js --optional \"test\"\nrunning. --optional='test' --required='undefined'.\n$ node test.js --optional \"test\" --required\nerror: option `--required ' argument missing\n$ node test.js --optional \"test\" --required \"req1\"\nrunning. --optional='test' --required='req1'.\n$ \n```. That is how I debug the git-style-subcommands... just point node directly at the subcommand's .js file.. ",
    "tmarciszewski": "Is there a chance to introduce this change for previous versions of Node?\n. I'm not sure what's commander's approach to supporting older versions of node. I was wondering if it should be merged for older versions of node to work without problems.\nOur project will probably upgrade from 6.0.0 to 6.6.0 in short time so it's not critically important for us, but others could run into this problem.\n. ",
    "faceleg": "Why was this rolled back?\n. ",
    "Kurt-von-Laven": "I would guess because it breaks existing dependencies. Is there a plan to replace this feature in a more backwards-compatible manner?. ",
    "louisgv": "Same issue, the document should be more clear about all flags that contains -no-, as these flags are treated differently. E.g:\n+ They are stripped off the no words\n+ They are defaulted to true\nConfused me a bit when trying to setup a no flag :p . ",
    "cdaringe": "\ni agree.  i feel that the issue name here could be changed to something more akin to \"don't exit on .help() call\"\nfurther, i visited the issues section here today specifically because i run help() when something wrong has been entered.  hence, i have strong feelings that the exit code should be non-zero, wherein now it is 0.\n\nof course this is opinion.  @tj, are you opposed to de-opinionification of .help()s behavior?\n. here's a ref to the offending code\n. ",
    "dovidweisz": "Doesn't the outputHelp() method cover these situations?. ",
    "jacksdrobinson": "Just bumping this because I'm of the same opinion. I develop a constantly-running server app, and I can run commands on it by socketing in to an IPC handle and then parsing commands using commander. I would be happier if commander didn't call process.exit, tearing down the app.\nI second @bolinfest and @NearAutomata in saying that the exit behaviour could be injected; or perhaps that parse() could return an err property on the result and the client can handle the case where result.err !== null.. ",
    "ebartz": "Did someone find any way to override code or at least ignore the exit without changing the code of commander?. ",
    "Bernd-L": "I agree with this issue.\nIf you want to have a live-chat bot (e.g. for Slack or Discord) one doesn't need the bot to \"clean exit\".\nIt really came as a surprise to me, that this library shuts down your app like that.\nIt took me quite a while (of debugging), but after figuring out, that even a try/catch block wouldn't fix this, I discovered that there are several ... no, not throw Error()s in there ... but that it contains process.exit() numerous times!\nNo other library would just shut down an app! Why does this one?\nPlease fix this unacceptable behaviour, as it breaks many use cases.\nA library should always be unassuming.\nI've addressed this in further detail here: #934 \n@tj Please consider making the exit calls optional.. ",
    "yopbeast": "Sorry it's up to bash not to this plugin, thanks for the great work\n. ",
    "enriquecaballero": "+1. ",
    "teddy-gustiaux": "Try using: program.removeAllListeners();\nI was having the same error while running my tests in watch mode, but removing all the listeners manually fixes the problem.. ",
    "milewski": "yeah seems like the same issue.. and it havent been resolved for a quite long time.... ",
    "angrifel": "@tj I did not see any contribute guidelines. Is there anything the community can do to help? are you taking any PRs from forks?. ",
    "selbest": "I have the same problem. Do you figure it out?. ",
    "phelanma": "Try reading conquering commander its a few slides glossing the pros and cons of commander. Then view the starter project, more specifically the command-loader(or loader) module. I'm sure you'll be able to re-engineer for your own purposes. \nGood luck.. ",
    "mikedevita": "@selbest late reply but as @phelanma mentioned that guide was what I ended up going with. The direct link to the repo is here. You'd be interested in the commands/index.js file specifically.\nFor me I ended up going a slightly different route by naming my \"commands\" folder as \"libs\" but my loader is mostly identical (with the exception i pass in config as  a second arg and then pass it to the individual sub commands) you can see my exact code below for the commandLoader.\n```javascript\nconst fs   = require('fs')\nconst path = require('path')\nmodule.exports = function commandLoader(program, config) {\nconst commands = {}\nconst loadPath = path.dirname(__filename)\n\n// Loop though command files\nfs.readdirSync(loadPath).filter(function (filename) {\n    return (/\\.js$/.test(filename) && filename !== 'index.js')\n}).forEach(function (filename) {\n  const name = filename.substr(0, filename.lastIndexOf('.'))\n  const command = require(path.join(loadPath, filename))\n  commands[name] = command(program, config)\n})\n\nreturn commands\n\n}\n```\n. ",
    "goldcaddy77": "This should work:\nprogram.on('*', function () {\n      console.log('Unknown Command: ' + program.args.join(' '))\n      program.help()\n    })\nIt would be good to get this documented in the readme.. ",
    "lbustelo": "@goldcaddy77  The issue with this is that the * still show in the help output. I think I'm having a similar issue. My tool is really a wrapper of a bunch of other CLI tools that are actually ran within docker containers. They have their own options that I do not want to define using commander, but rather get a hold of them and pass then through. For example:\n$ my_tool other_tool -optA -optB=foo\nIf -optA or -optB are not defined using commander, it would be nice to get a hold of them so that I can passed them over to other_tool.\nMy current work around is to define an option in commander, -o, and then use that as an escape. That means my users need to write:\n$ my_tool other_tool -o optA -o optB=foo\nIt works, but the UX is not ideal.. @plroebuck I have not tried that and if it works, it is a step in a better direction. Ultimately, I think what I'm asking is that if commander does not recognize a certain option... just pass it along.. ",
    "mateodelnorte": "Do we actually care that this breaks old (v<=0.0.10) versions of node?. PING PING\nAre Node 0.8 and 0.6 support really required in commander.js? The only thing keeping this PR from passing all tests are engine restrictions in some dependencies. \nThanks.. Hi. Howdy. Hello there. This is a pretty popular package. Lots of PR's. Some are months old. Do people respond to them? . Conflicts resolved. . Glad to help! \n*not sure what's up with npm 5 not installing the single find-module-bin dependency. yarn installs it just fine. . Any timeline on when this will be published to npm? I think a simple rebuild will fix the build errors on node 8. Seemed to be a temporary problem with the registry. The dependency version def exists: \n{ name: 'find-module-bin',\n  description: 'scan known node_modules directories to find installation directory of a particular bin file',\n  'dist-tags': { latest: '0.0.2' },\n  versions: [ '0.0.0', '0.0.1', '0.0.2' ],. When is this going to be merged? The error happening in this build was a bug in npm5. . I've fixed the merge issue that happened in package.json as a result of this not being merged since January. Looks like a re-run of the builds works completely (because it was a bug in npm5). \nCan we get this merged?\nThx. @abetomo Can we please slate this for merge? It's been well over a year. . So... I updated this from upstream again. @abetomo @vanesyan \nCan we get this merged? . ping ping. Git style subcommands are still broken on Windows in master. This PR fixes them. \nIs there any plan to merge? Is the fact this is not merged because it's more important to have zero dependencies than to fix a glaring bug?. Should be good to go! Take a peek. . Sure thing. . As a curiosity \u2013\u00a0What's the reason for wanting no dependencies? . find-module-bin uses global-modules, to look up the appropriate os-dependent location of globally installed node modules. this won't be a simple pull-function-up refactor, as the os-specific logic is hidden in here. \nperhaps we can merge this and set the refactoring as tech-debt?\npersonally, I think the reuse is better for the community. you don't want a massive explosion of dependencies, but having well managed dependencies can make your code more DRY and keeps the potential for the dependent packages to continue to evolve and solidify. . @vanesyan . @vanesyan I don't think it makes sense to inline all of this. \nThis PR has been ready for merge for about a year and six months. . ",
    "robertkowalski": "LGTM too. ",
    "wis3guy": "@kevinrenskers I am no nodejs developer, but if i look at these test cases in the commander repo (https://github.com/tj/commander.js/blob/master/test/test.command.allowUnknownOption.js) my impression is that you misinterpret the meaning of . allowUnknownOption().\nYou seem to think/hope that it means that all and any parameter will be parsed. The test cases tell me that including that method call will instead only prevent commander from generating errors in case it encounters arguments that were not configured and thus expected.. I may be way out of my league here, but i wonder if the path you intend to go down truly meets your use case. Do you really want people to specify theme specific options on the command line, along with the options/arguments that drive the core conversion? They feel like two different concerns to me.\nPersonally i would be more comfortable with a single, optional argument that allows me to point to a config file. Something like:\nraml2html --theme slate --theme-config slate_cfg.json -i example.raml -o example.html\nThat way the command line remains concise whilst a theme designer can go wild with theme driving settings. I could imagine a config file to look like:\n{\n   \"logo_url\" : \"http://www.example.com/img/foo.png\",\n   \"colors: {\n      \"text\" : \"#c0c0c0\",\n      \"background\" : \"#ff00ff\"\n   }\n}\nThis also spares you from having to figure out how to properly encode the command line arguments in case they contain fancy characters and complex objects.. ",
    "kevinrenskers": "That is indeed what I am hoping for :) Also what the answer to #426 seemed to imply.. Not a bad idea, but I feel like that just puts the burden on the end user of the tool. Instead of just quickly firing off a command they'd now have to create a config file.\nIt would be awesome if Commander would work as I described in the issue above, I feel that it does make sense that unknown options are still parsed into program.args. Also for example adding the param foo works, but --foo doesn't - but that's also an unknown param right? And according to the docs, it's supposed to end up in program.args.\nSo at least partly it feels like a bug, and partly like a feature request.. In the end I switched to yargs which works great for me.. ",
    "danilopolani": "+1, is there a way to retrieve the unknown options?. Thank you for the tip, unfortunately I'm editing a file for a PR so I can't remove their usage of Commander... I think I would parse with a regex the --flags  . ",
    "JRigotti": "Been using commander for a cli project and it's nice project, but possibly will drop it due to what @kevinrenskers described here. The allowUnkownOption seems counterintuitive, or more or less useless, I would like it to be able to get options that I don't expect myself and would be nice to be able to break the script execution when setting it false.. ",
    "Justinidlerz": "Because the * match does not pass theunknown option to you\ncode. ",
    "LitoMore": "@Justinidlerz Thanks!. ",
    "alan-agius4": "PR: #646. With the carot it will take 2.4.1 anyways\nOn Wed, 05 Jul 2017 at 23:43, Michael Wu notifications@github.com wrote:\n\n@michael-yx-wu commented on this pull request.\nIn package.json\nhttps://github.com/tj/commander.js/pull/646#discussion_r125765149:\n\n@@ -16,10 +16,12 @@\n   },\n   \"devDependencies\": {\n     \"should\": \">= 0.0.1 <9.0.0\",\n-    \"sinon\": \">=1.17.1\"\n+    \"sinon\": \">=1.17.1\",\n+    \"typescript\": \"^2.3.4\"\n\nunlikely to make a different to this PR, but 2.4.1 is available now \ud83d\ude04\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/646#pullrequestreview-48186718,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-WnZfMuSZN3IHDeKaE0F-HlKyRjBTks5sLAObgaJpZM4OERJx\n.\n. What do you mean by 'resolve' please? I am current away and ill be able to do it on Friday. Ah okay, will do that on friday :)\n\nOn Tue, 18 Jul 2017 at 20:59, Roman Vanesyan notifications@github.com\nwrote:\n\nSorry, mean rebase, mistyped :)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/646#issuecomment-316164224, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-WmvuFXHUmRMr5LP2bCJOphDJs6YUks5sPQCDgaJpZM4OERJx\n.\n. @vanesyan rebase done :). Can go, if you prefer it that way. Though its not neccessary.\n\nNot a bog fan of peers unless it's neccessery.\nI'll do it as you prefer though. Just let me know :)\nOn Sat, 22 Jul 2017 at 21:08, Roman Vanesyan notifications@github.com\nwrote:\n\n@vanesyan commented on this pull request.\nIn package.json\nhttps://github.com/tj/commander.js/pull/646#discussion_r128903076:\n\n@@ -28,8 +23,12 @@\n     \"index.js\"\n   ],\n   \"dependencies\": {\n-    \"@types/node\": \"^8.0.2\",\n-    \"graceful-readlink\": \">= 1.0.0\"\n+    \"@types/node\": \"^8.0.2\"\n\nShouldn't this go in peerDependencies?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/646#pullrequestreview-51628856,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-WnxTg9i3QV20u965QaikE-i_2HA5ks5sQkirgaJpZM4OERJx\n.\n. The simple reason why its dependency is that it that node is requeried by\ncommander.js because of the 'eventEmitter'\n\nOn Sat, 22 Jul 2017 at 21:13, Alan Agius alan.agius4@gmail.com wrote:\n\nCan go, if you prefer it that way. Though its not neccessary.\nNot a bog fan of peers unless it's neccessery.\nI'll do it as you prefer though. Just let me know :)\nOn Sat, 22 Jul 2017 at 21:08, Roman Vanesyan notifications@github.com\nwrote:\n\n@vanesyan commented on this pull request.\nIn package.json\nhttps://github.com/tj/commander.js/pull/646#discussion_r128903076:\n\n@@ -28,8 +23,12 @@\n     \"index.js\"\n   ],\n   \"dependencies\": {\n-    \"@types/node\": \"^8.0.2\",\n-    \"graceful-readlink\": \">= 1.0.0\"\n+    \"@types/node\": \"^8.0.2\"\n\nShouldn't this go in peerDependencies?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/646#pullrequestreview-51628856,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-WnxTg9i3QV20u965QaikE-i_2HA5ks5sQkirgaJpZM4OERJx\n.\n\n\n. Thats trie, but its a very small deps.\n\nThough i can change it if you wish\nOn Sat, 22 Jul 2017 at 21:27, Roman Vanesyan notifications@github.com\nwrote:\n\nJust worry about people that don't need typing for commander, they'll get\nextra deps.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/646#issuecomment-317205167, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-Wun8EGhzM0Y7nMpMUEANQNgmqxaHks5sQk0DgaJpZM4OERJx\n.\n. Usually they are set as dependencies even with the typyings packages\nthemselves.\n\nhttps://www.npmjs.com/package/@types/commander\nOn Sat, 22 Jul 2017 at 22:24, Roman Vanesyan notifications@github.com\nwrote:\n\nI'm not too familiar with TypeScript, but what do other publishers do?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/646#issuecomment-317208267, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-WiYns2lIPM4Hi6HfxyzK8KsOsePwks5sQlptgaJpZM4OERJx\n.\n. Having typyings in DefinitlyTyped is a 'last' resort for the community to\nhave typings of a library that the owner doesn't want to have within his\nlibrary. TypeScript recommand having them within the library and not within\nDefinitlyTyped.\n\nOn Sat, 22 Jul 2017 at 22:44, Roman Vanesyan notifications@github.com\nwrote:\n\nSorry me, if it's a bit stupid question, but what do we want to include\ntypings within package, when typings are already released in\nDefinitelyTyped? :)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/646#issuecomment-317209273, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-WqOsw2suOSOeDKwS4u2f94lfaW2kks5sQl9FgaJpZM4OERJx\n.\n. https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/declaration%20files/Publishing.md\n\nOn Sat, 22 Jul 2017 at 22:56, Roman Vanesyan notifications@github.com\nwrote:\n\nSorry me, but I haven't found such suggestion by TypeScript. Furthermore\nas I understand they heavily rely on @types npm namespace, which from my\nunderstanding is referring to DefinitelyTyped.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/646#issuecomment-317209895, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-Wg6_TD8R6x7na6aoZ7Y6r2EIImRCks5sQmHvgaJpZM4OERJx\n.\n. @types is indeed for DefinitlyTyped which is used only for non typescript\nlibaries, as typically typescript libraries always have typing inside the\nlibrary itself and now andays even js libraries have typings in them such\nas 'moment'\n\nReason being is for maintability and no need for addition packages.\nTypeScript doesn't realy on DefinitlyTyped at all, its the consumer that\nrealies on them if he needs non TypeScript ready libraries.\nOn Sat, 22 Jul 2017 at 22:59, Alan Agius alan.agius4@gmail.com wrote:\n\nhttps://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/declaration%20files/Publishing.md\nOn Sat, 22 Jul 2017 at 22:56, Roman Vanesyan notifications@github.com\nwrote:\n\nSorry me, but I haven't found such suggestion by TypeScript. Furthermore\nas I understand they heavily rely on @types npm namespace, which from my\nunderstanding is referring to DefinitelyTyped.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/646#issuecomment-317209895, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-Wg6_TD8R6x7na6aoZ7Y6r2EIImRCks5sQmHvgaJpZM4OERJx\n.\n\n\n. So, what do you guys want me to do?. @xavdid the bundle size is still the same considering the fact that TypeScript is only for devDeps, to be honest though, finding solutions to keep the devDeps down by removing TS, for me it's not a good idea as like this you will remove the tests will keeps the sanity of the definition file.\n\nWhy is it such a problem to have an extra devDeps which is actual used? Just for an example would you consider removing sinon?\nRe the test point. however, does the Types Definitions, know that they should write tests on them, as that's the standard.\nThe test didn't fail, because commander argument can be accessed such as;\njs\nprogram.cheese()\nThus, when you changed .option to .asdf it assumed that .asdf is an argument \n. The files issue is fixed\nhttps://github.com/tj/commander.js/pull/725#pullrequestreview-79401278\nOn Tue, 28 Nov 2017 at 07:46, David Brownman notifications@github.com\nwrote:\n\nI don't care about the bundle size, but other commenters seem to take\nissue with it. Since the API for a big project like this changes so\ninfrequently, it's pretty easy to keep the typings up-to-date. I don't see\na ton of value in the tests, but it's not a big deal.\nThat's a good point about the tests, I'm still pretty new with commander.\nNevertheless, the files issue remains.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/646#issuecomment-347429741, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-WoK2mbzhIJCSc1s3nP5kkl6G20nHks5s66xbgaJpZM4OERJx\n.\n. Quick link for the best practice guide and dependencies section;\n\nhttps://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/declaration%20files/Publishing.md#dependencies. Sry closed the PR by mistake. This is urgent can we have it merged and released asap pls?. Sure thing, I\u2019ll look into this tmr or Friday probably.. I had a look at this, and this is not solely typings related as commander doesn't have a default export.\nCommander exports a static Commander, thus using export default in the typings is incorrect and will make the usages of commander not work.\nTake a look a what require('commander') returns\nCommand {\n  commands: [],\n  options: [],\n  _execs: {},\n  _allowUnknownOption: false,\n  _args: [],\n  _name: '',\n  Command:\n   { [Function: Command]\n     super_:\n      { [Function: EventEmitter]\n        EventEmitter: [Circular],\n        usingDomains: false,\n        defaultMaxListeners: [Getter/Setter],\n        init: [Function],\n        listenerCount: [Function] } },\n  Option: [Function: Option] }\nThus, this is the correct implementation.\n. Actually it\u2019s not that line, but\nhttps://github.com/tj/commander.js/blob/27aeac1c2d3a81977592f4b772b8b9f7a6b7560d/index.js#L22\nOn Mon, 29 Oct 2018 at 17:25, WeRDyin notifications@github.com wrote:\n\nThanks. export default can not be used due to the using of:\nhttps://github.com/tj/commander.js/blob/27aeac1c2d3a81977592f4b772b8b9f7a6b7560d/index.js#L28\nIs my understanding correct\uff1f\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/issues/879#issuecomment-433975416,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-WpNSNVb0oFX-6RTLUhUI4Fii3upGks5upywGgaJpZM4Xbppy\n.\n. fixed. \n",
    "alexbrazier": "This feature is in PR #605 . ",
    "EmpireWorld": "Nice. so i close this issue. Thanks.. ",
    "wallali": "program.command('stats <file>', {})\n    .description('Print stats for the conversation file')\n    .option('-s, --single', 'Print on a single line')\n    .action(play);\nusing {} causes the -s to be printed but in the incorrect spot, not with the command help but with the overall help.\n```\n Usage: mytool [options] [command]\nCommands:\nstats <file>  [object Object]\nhelp [cmd]    display help for [cmd]\n\nPrint stats for the conversation file\nOptions:\n-h, --help     output usage information\n-V, --version  output the version number\n-s, --single   Print on a single line\n\n```\n. ",
    "jphager2": "@wallali did you figure this out?. ",
    "jsamr": "Same issue for me.. ",
    "channg": "try the mytool  stats -h. ",
    "Oblongmana": "Bump - still not working. ",
    "scott-joe": "@Nepomuceno makes total sense. Never thought of it that way. Thanks. Yeah... There are 51 open PRs.... ",
    "iowillhoit": "Good call, here is the same thing suggested in the Semver 2.0.0 Spec: How should I deal with revisions in the 0.y.z initial development phase?. ",
    "Piterden": "Maybe you are right, it's not such necessary, but it looks much clearer for interaction.\nI suppose, test errors was causing by strings of regular expression.\nI will make another PR, thanks, when I find some time.... ",
    "DanielMSchmidt": "Hey @awitherow, I think .command('...', '...', {isDefault: true}) may be the thing you are looking for, see the docs here.. Only with the command('*', {isDefault: true}) I guess. ",
    "awitherow": "Hmm so with this, it would be necessary to add an isDefault catch to every invocation of the program?. I did this and am not seeing any result. Maybe simply command(''), {isDefault: true}, without the star. . @mattt416 nice thanks for the research! Will check into implementing it.. ",
    "mattt416": "I was just searching how to do this, and found this bug.  I've since implemented the following:\nprogram\n  .command('*', '', {noHelp: true, isDefault: true})\n  .action(function(){\n    program.outputHelp();\n  });\nNow I can run the program with no arguments or invalid arguments and it'll display the help.   {noHelp: true} is also good because it means it won't add this argument to the help page.. ",
    "mrozbarry": "Not sure if this is related, but in my package.json, I have babel-cli, babel-preset-es2017, and babel-register, all of which are pegged at 6.24.1. I see you're running with babel-node/cli as well, so maybe commander is using that for some reason?. ",
    "tedivm": "You can also do this in your own code without needing any upstream changes by putting this before your program.parse(process.argv)  call-\njavascript\nprogram.commands.sort((a, b) => a._name.localeCompare(b._name)). Unlike #622, this uses localeCompare for sort. That should make it more robust against special characters, and also makes it ignore case for sorting.. ",
    "carragom": "Further checking, this seems to be related to default value assignment. These values get set here which according to the comment explicitly set boolean flags only when negated by --no-*. I guess the question then is, how to set a default false value for a boolean flag that is not negated with --no-*.\n. ",
    "AlexChesters": "Ah, it turns out I can as long as I don't set the version anywhere else (program.version(version))!. ",
    "lbai001": "@mbilbille thanks a bunch :D . ",
    "timaschew": "and now almost one month has passed without any reaction from any maintainer. I would like to know why you want to use commander and not yargs.\nI switched to yargs today and I am really happy with its API.\nAnd it's of course maintained.\nTomoaki Abe notifications@github.com schrieb am Mi. 14. Juni 2017 um\n17:39:\n\nShall we fork to create a new package?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/issues/631#issuecomment-308471438,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAGxFiyQ-LhGKE8TVlF8pjd4CF8BN_dNks5sD_7LgaJpZM4NbknU\n.\n. \n",
    "call-a3": "@abetomo any guidelines on what we still can/must do to get this into master?\nWe're maintaining our own fork for now at Skedify because we need this feature, but we'd like to be able to keep tracking the \"official\" version without having to reapply our patch each time a new version comes out.... ",
    "ThomasSimoens": "Thanks guys, greatly appreciate it!\n@ValentinTrinque I hated the timeout approach as well, but couldn't find another way. Don't know if there's an event based approach possible for these kind of things.. ",
    "chad-vanet": "Make sure your sub command file is readable and executable. ",
    "vincentmrlau": "sudo chmod a+x <your sub command file>. ",
    "davidsonsns": "I'm using this function, that I created\njs\nconst runCommand = (alias, args = []) => {\n  program._events[`command:${alias}`](args)\n}\nrunning, in action\njs\nrunCommand('setup', [...args]). ",
    "jdmarshall": "@davidsonsns I'm not seeing the arguments show up in the second command.  Does this still work for you?\nI found that command line args appear to be the second argument now.  \nprogram._events[`command:${alias}`]([], args);. ",
    "michael-yx-wu": "Including node typings as a peer dependency is fine since it's a declaration that commander works with a minimum version of node, but you'll run into problems with:\n\nprojects not using typescript (npm / yarn will warn that the peer dependency is not met and will be annoying)\ntypescript projects relying on an older version of node: I believe commander works with at least node 7+ and possibly earlier versions?\n\nI think we should keep it as an actual dependency to avoid 1.. We should also use the actual minimum version of node typings that commander is compatible with although 2. is not an immediate concern unless we change the typings dependency to a peer dependency. . My preference is to keep it as a dependency but use the version that commander is minimally compatible with. . unlikely to make a different to this PR, but 2.4.1 is available now \ud83d\ude04 . ",
    "Marak": "Hrmm. \nBy adding @types/node dependency, commander project is no longer zero-dependencies.\nThe total size of the installed code-base seems to be increased by over 10x.\nProject was previously 57kb now is 503kb. That seems wrong to increase package size by 10x in order to support one specific framework ( TypeScript ).\nNot sure what the project maintainers are thinking here. Please review this again @michael-yx-wu. . ",
    "xavdid": "There's a couple of gotchas happening here:\n\nthe package.json files array doesn't include the index.d.ts, so the typings aren't shipped to npm. TS complains when you try to import commander, since the types aren't installed. That's an easy fix. \nThe more involved piece is the dependencies. The bundle size increase is probably mostly due to the Typescript devDep, which commander doesn't really depend on. The more harmonious way to do this is to include the index.d.ts file, but not introduce any dependencies for it. You can include the /// <reference types=\"node\"> flag to access EventEmitter and anything else needed. \nSemi-related, after cloning, I couldn't get the type tests to fail. I changed a .option line to .asdf and tests still passed fine. That could super be a configuration issue on my end, but if they're not actually catching anything, they're adding complexity. It's easy enough to have maintainers edit the index.d.ts file whenever there are API changes (usually semver major & minor). \n\nSo! That said, if I were to make a PR now, I'd remove deps, add a reference to the index, and edit files. That should get the bundle back down, because shipped files would go up by exactly 1 and we'd be back to the deps we had before. \nHow does that sound?. I don't care about the bundle size, but other commenters seem to take issue with it. Since the API for a big project like this changes so infrequently, it's pretty easy to keep the typings up-to-date. I don't see a ton of value in the tests, but it's not a big deal. \nThat's a good point about the tests, I'm still pretty new with commander. \nNevertheless, the files issue remains. \n. ",
    "elliot-nelson": "There are a couple flags like this.  --parent, for example.. ",
    "icosahedron": "I worked around this limitation with the following (TypeScript, but probably similar in vanilla JS):\n```\nimport * as cmd from 'commander'\ncmd\n  .version('0.0.1')\ncmd.optionValues = {}\ncmd\n  .command('start ')\n  .alias('st')\n  .description('start session for ')\n  .option('-n, --name [name]', 'name of the timer')\n  .option(\"-t, --task [task description]\", \"description of task for timer\")\n  .action(function(duration){\n    console.log(duration);\n    console.log(cmd.optionValues);\n  })\n  .on('--help', function() {\n      console.log(\"\\nduration must be a number followed by an m for minutes (20m) or s for seconds (120s).\\n\")\n  })\n  .on('option:name', function(opt) {\n      cmd.optionValues.name = opt;\n  })\n  .on('option:task', function(opt) {\n      cmd.optionValues.task = opt;\n  });\n```. ",
    "CheshireSwift": "Hi, I've started working on this. I'm looking to move to mocha as the test framework, just replacing the Makefile + run.\nIt should:\n Make contributions easier: tests are descriptively named.\n Make it cross platform: mocha itself is pure Node, and I'll be structuring it such that the test command doesn't use globs or other POSIX magic (to keep Windows happy).\nIn this first pass I'll be making minimal changes to the test logic, other than sandboxing program config (i.e. using new Command() for each test), so there's no ES6 rewrites in it yet, though I'll be using lambdas to define the tests.\nShout if there's any issues with any of this! \ud83d\ude03 . ",
    "vlikin": "I am for mocha because it is almost every where on projects where I work. Jest is from React world. . > I had the same issue, turned out it was a version problem.\n\nUpgrading from version 2.15.0 to 2.18.0 fixed the issue.\nI have 2.19.0 The async actions are not managed well.\n. I looked in the code. I see it is not prepared for async chaining at all. EventEmmiter is used to execute a command. Is a strategy pattern enough? Do contributors have plans to adjust it to be chainable?. \n",
    "GreenGremlin": "I was just wondering the same thing. It would be nice to be able to access unknown options from the action as well. This could be done by pushing unknown to args before calling fn.apply.\nSomething like this\n``` javascript\nCommand.prototype.action = function(fn) {\n  var self = this;\n  var listener = function(args, unknown) {\n    ...\nif (self._args.length) {\n  args[self._args.length] = self;\n} else {\n  args.push(self);\n}\nargs.push(unknown); // Adding this line would give the action callback access to the unknown options array as well.\n\nfn.apply(self, args);\n\n};\n  ...\n};\n```\nOr maybe even expose the unknown options on the commander instance so a user could access them via program.unknownOptions.. ",
    "sant123": "Any advance on this? . ",
    "waldekmastykarz": "It would be awesome if you could submit a PR for that @mojavelinux . ",
    "Igor-Lopes": "Hello ! Any updates on this issue ?. ",
    "cjmash": "Any updates?\n. ",
    "ryysud": "Sorry, It was already added.. ",
    "TDress": "@vanesyan, correct.   On master, before PR, a custom short option -h overrides the help short option, but the help information text was still showing -h as an option for the help command.  The PR doesn't touch the functionality of the options, and --help is still not overridable.   . Thanks for taking a look.  Let me know if I can make any changes to fix\nconflicts with new changes that you have.\nOn Jul 12, 2017 5:38 AM, \"Roman Vanesyan\" notifications@github.com wrote:\n\nBTW, I think it's breaking change, and we should come back here, when the\nnext major release happen.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/658#issuecomment-314743493, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEfnCS-h6CRMMqRv-3A0d5fY77uGgK87ks5sNLBFgaJpZM4OTdQg\n.\n. my bad!\nSee amended commit.. \n",
    "HRK44": "How is this a breaking change?\nIt just modifies an output to remove '-h' from the built-in help option when it is already used by an user-defined option.. ",
    "Flackus": "I'll try to make a PR addressing this issue today.\nIf I won't be able to fix it myself, code snippet will be posted, no worries :). Discussed issue was introduced in https://github.com/tj/commander.js/pull/494/files\nIn user code program.emit('some_command') now should be changed to program.emit('command:some_command').\nThis change seems reasonable for me, but it happened in minor release, which is a pitfall.\n@abetomo, what do you think?. @vanesyan yeah, you're right, no reason to break things twice.\nThanks!. ",
    "deepu105": "Thanks for the update.. ",
    "madjam002": "This should not be closed. Can this not be fixed for 2.10 and the breaking change be moved to a version 3 release?. ",
    "sangdth": "Any update about this? I'm looking forward.. ",
    "drinchev": "That's because of https://github.com/tj/commander.js/pull/652/files .. Duplicate of #663 . ",
    "brn": "any update?. ",
    "edemaine": "This feature got added by #198, so I think this issue can now be closed.. For what it's worth, I've found that specifying the default before the transform works right:\njs\n.option('-d --integer-with-default <n>', 'An integer argument with default value', 22, parseInt)\nWhereas listing the default after the transform gets it passed in the transform:\njs\n.option('-a --append <x>', 'A list argument', (x, list) => list.push(x), [])\nSo perhaps this is all intended behavior.  It's not exactly well-documented, though.. ",
    "MiniGod": "I see now that it broke in #494.\nIs command:* considered an internal event that should not be used externally and might change without bumping major?. ",
    "tkruse": "In 2.19.0, I cannot find a way to report to the user that an unknown command was given.\nI tried\n.on(\"command:*\", cb)\n.command(\"*\").action(cb)\n\nBut in both cases cb was called even when another command matched.. ",
    "shreeve": "The '#' is parsed by the shell as a comment and not passed to commander. ",
    "bladerunner2020": "Thank you for clarification. . ",
    "akayami": "This would be something to keep an eye on when building 3.0. Such a hugely popular module should be rock solid.. ",
    "astorije": "Well, that's unfortunate. I agree that --help can be used to achieve this, but it would feel more natural to have such a capability. In particular, we would not have to deal with padding, or setting up the header, as commander would do it, but I'm sure I'm forgetting advantages.\nUsing environment variables in a program is not a niche use case, and this would make it easy to document them. After all, they act as options under steroids (can be programmatically set) and it would be nice to document them similarly.. BTW, I'm not able to reopen this issue, but wouldn't anyway as you explained your position :). ",
    "RonWang": ".command('help', null, {noHelp: true}) will solve the problem. no this will remove all the help message! Reopen and wait for response. ",
    "edykim": "I want to remove this default message as well. I just came with a quick and naughty idea while I read the code.\njs\nconst program = require('commander');\nprogram.addImplicitHelpCommand = () => {};\nI hope that there is a way to remove the message using an option or something.. ",
    "kiriappeee": "Can confirm that I reproduced this. It's executing the command as can be seen in :+1: \nexec \"configure\" using undefined mode\nbut then it's doing something else after that. I'll see if I can dig into this. ",
    "zenoven": "same issue. ",
    "demonray": "+1. ",
    "ZhaZhengRefn": "+1. ",
    "yanick": "@vanesyan I'm curious: in which way is it breaking back-compatibility? As far as I know, the attribute names will resolve to be the same, I've just made them accessible from the outside. But then, I might be blind to a tiny, thorny detail. It happens. :-). @vanesyan Heh, it's okay. I was totally expecting to be pointed at a weird side-effect I had not considered. :-)\nAs for the why, it's simply to allow to make the connection between the Option objects and their instance values in program.\nTo use the canonical example, for --bbq-sauce, the name() of the Option object is bqq-sauce. For a human, it's not hard to make the leap to bbqSauce, but there  is really no reason to have people reimplement (probably in a wrong way) the camelcase function if they want their code to figure out which Options a program value belongs to.. Let me flip the question around. I have a program with an attribute named bbqSauce. I have to find back which Option object generated it (because I want to know if its value is different than the default, or what is the option's description, etc).  With the current public methods, how can I achieve that?\nI think that currently I (programmatically) can't, because the way the option name is mapped to bbqSauce is internal and hidden. . ",
    "sweth": "Ping!  Any chance of this getting merged?  I personally would find it useful for being able to have a debug mode for a tool be able to programatically go through all of the options and list their current values, without having to hard code each of the option's var's names in addition to the option names themselves.. ",
    "tk1": "Version 2.0.0 and 2.1.0 are correct. The error exists since version 2.2.0. ",
    "codeclown": "Based on my research, this happens because the default value is passed as a second argument to the coerce function.\njs\nprogram.option('-i, --int <n>', 'pass an int', parseInt, 100)\nprogram.parse(['node', 'test', '-i', '5.5']);\n// will invoke\nparseInt('5.5', 100)\nObviously results in an unexpected result in case of parseInt.\nRelevant line where coerce function is called.\nhttps://github.com/tj/commander.js/blob/0ae835315a4ff9162c963eb2223c327fd9119996/index.js#L400\nI'm willing to contribute a PR but I'm not sure what would be the best course of action to handle this.. ",
    "grant": "The line to change would be here:\nhttps://github.com/tj/commander.js/blob/master/index.js#L956\nProbably a change like this:\nCurrent\n```js\nCommand.prototype.optionHelp = function() {\n  var width = this.largestOptionLength();\n// Append the help information\n  return this.options.map(function(option) {\n      return pad(option.flags, width) + '  ' + option.description\n        + (option.defaultValue !== undefined ? ' (default: ' + option.defaultValue + ')' : '');\n  }).concat([pad('-h, --help', width) + '  ' + 'output usage information'])\n    .join('\\n');\n};\n```\nProposed\n```js\nCommand.prototype.optionHelp = function() {\n  if (!this.options.length) return [];\n  var width = this.largestOptionLength();\n// Append the help information\n  return this.options.map(function(option) {\n      return pad(option.flags, width) + '  ' + option.description\n        + (option.defaultValue !== undefined ? ' (default: ' + option.defaultValue + ')' : '');\n  }).concat([pad('-h, --help', width) + '  ' + 'output usage information'])\n    .join('\\n');\n};\n```\nOnly join if the array is not empty.. ",
    "Lucas-C": "The problem is that the parser is not currently able to parse several option values:\nhttps://github.com/tj/commander.js/blob/master/index.js#L711. Thanks !\nThis solve my problem, closing now. ",
    "elyas-bhy": "This works:\n$ bin/dockerfile_lint -c 0 -c 1 -c 2 -o final. ",
    "syberkitten": "Hey Guys\nIt's so missing.... there are so many times I want to use a switch,\nand right the way to achieve this is to use normal arguments adding them a value just to \nmake a switch.. ",
    "sennav": "Hey, I tried to fix the tests but it seems that there's something with subcommands that I don't understand. Commander expects the subcommands to be the first argument of the argument list, in the tests is common to call the subcommand in any other position.\nThe README state that:\n\nWhen .command() is invoked with a description argument, no .action(callback) should be called to handle sub-commands, otherwise there will be an error. This tells commander that you're going to use separate executables for sub-commands, much like git(1) and other popular tools.\n\nBut the tests calls subcommands with description argument and with action. So, as I said before, there's something I don't understand about the requirements. I assumed that when using subcommands, all options should be parsed by the subcommand, which is a separate script using commander. Reading the tests I guess that some of them should be parsed by the main command and others by the subcommand which is quite confusing, for me at least.\nThe problem I was trying to fix was: suppose I define a command foo with subcommand bar <filename>, and defined a boolean option for bar, say -f which is a boolean option with no args. If I issued a command like foo bar -f filename.txt commander will parse filename.txt as a argument of -f and the barscript will never receive it. This is solved by my PR, but I have no clue on how to fix your tests.\nI don't know how to proceed on this, and I'm not sure if you want this to be merged, so I'm waiting feedback.. @abetomo thank you for clarifying this, I added your suggestion, please let me know if there's anything else to do.. ",
    "plroebuck": "@lbustelo [untried] but isn't this already possible? Use -- to terminate argument parsing;\neverything remaining should be passed as a positional argument.\nsh\n$ my_tool other_tool -- -optA -optB=foo\n. @vanesyan ping!. @vanesyan ping again!\n. @vanesyan, @abetomo: when can Mocha expect a release containing this fix?. ",
    "simonbuchan": "-- is the current method to do this as a user.\nIf .allowUnknownOption() isn't provided the above should error with something like error: unknown option `-1', so osc-cli shouldn't provide that if they're not going to handle forwarding options themselves.\nFor now you should be able to use cmd.parent.rawArgs.slice(3) / program.rawArgs.slice(3), though it seems a bit flakey to me.\nIt would be nice to add a \"give it to me raw\" option for commands like this, where letting it forward git-style is not quite what you want.. \"git-style\" means if you provide the description to command() it will use the pattern git does where it will call {prog}-{command}. Simply don't provide the description or provide it separately to instead use action:\njs\nprogram.command(command)\n  // .description(description)\n  // .option(...)\n  .action(action);\nThe docs could be better here, and it could also not use providing the description as a switch, instead falling back to git-style if action wasn't provided, which would be much clearer, but that gets confusing with .on('someCommand', ...). If this has multiple ancestors, e.g. git remote add, this will add them in reverse order, so you get remote git add. Something clearer might be:\njs\nconst names = [];\nfor (const cmd = this; cmd; cmd = cmd.parent) {\n  names.unshift(cmd.name());\n}\n...\n   ,'  Usage: ' + names.join(' ') + ' ' + this.usage(),. ",
    "BenBergman": "The -- workaround is sufficient for my needs. Allowing the raw, unrecognized options to pass through would be even better, but I can see that is more of a problem with the application using this library than the library itself. Thanks for the help.. ",
    "chrisdopuch": "Ditto, I'm trying to mirror the --no-verify flag to git push in my CLI tool but commander strips out the no so it doesn't work. . ",
    "Aghassi": "+1. I wanted to do --no-tests on a compile command. Ended up spending half an hour debugging why it wasn't working. For now I'm going to use --skip-tests instead. This should be documented, it isn't apparent from the examples.. ",
    "gilles-crealp": "It's correct.\nIf you've set --no-xxx as an option and don't call it (index.js), you will have xxx set to boolean true. And if you call it (index.js --no-xxx) you will have xxx set to boolean false.. As I said, it's working.\n```javascript\nprogram\n  .option('-b, --bbq-sauce', 'Add bbq sauce')\n  .option('--no-sauce', 'Remove sauce')\n  .parse(process.argv);\nconsole.log('you ordered a pizza with:');\nif (program.bbqSauce) console.log(' - bbq');\nif (!program.sauce) console.log(' - removed sauce');\n```\nIf --no-sauce is used, program.sauce will be set to false else true.. @deepakpathania I totally agree, that must be more documented.. Use this example:\n```javascript\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .parse(process.argv);\nconsole.log('you ordered a pizza');\nif (program.sauce) console.log(' with sauce');\nelse console.log(' without sauce');\n```. @deepakpathania  There is already an example here where you can choose a type of cheese or no-cheese.\n. @deepakpathania Great!. ",
    "fujio0000": "@vanesyan When will it be released?. ",
    "a-fas": "Try adding { noHelp: true } - it should hide the command\n.command('*', { hoNelp: true }). yes, I figured that out already. But it is not always convenient as it requires separate file with specific name in specific location which is unflexible. So I ended up with something like this (posting here, maybe someone will find useful):\n```js\nfunction patchCommander(commander) {\n    commander.Command.prototype.forwardSubcommands = function() {\n        var self = this;\n        var listener = function(args, unknown) {\n            // Parse any so-far unknown options\n            args = args || [];\n            unknown = unknown || [];\n        var parsed = self.parseOptions(unknown);\n        if (parsed.args.length) args = parsed.args.concat(args);\n        unknown = parsed.unknown;\n\n        // Output help if necessary\n        if (unknown.includes('--help') || unknown.includes('-h')) {\n            self.outputHelp();\n            process.exit(0);\n        }\n\n        self.parseArgs(args, unknown);\n    };\n\n    if (this._args.length > 0) {\n        console.error('forwardSubcommands cannot be applied to command with explicit args');\n    }\n\n    var parent = this.parent || this;\n    var name = parent === this ? '*' : this._name;\n    parent.on('command:' + name, listener);\n    if (this._alias) parent.on('command:' + this._alias, listener);\n    return this;\n};\n\n// some other utils here ...\n\n}\n```\npatchCommander is obviously triggered over the main instance somewhere in the beginning of the code. And then I can do e.g.:\n```js\n    const subCommand = program\n        .command('journal')\n        .description('Journal utils') // this should also be separate line, I don't remember why already\n        .forwardSubcommands(); // instead of \"action\"\nsubCommand\n    .command('list <path>')\n    .action(List);\n\nsubCommand\n    .command('print-recent <path>')\n    .action(PrintRecent);\n\n```\nworks well so far ... :)\n. ",
    "wramp": "@a-fas \ni guess you mean\n.command('*', { noHelp: true }). ",
    "maxpert": "Having same issue here. Did workaround by doing this:\njavascript\ncommander.executeSubCommand = () => false;\ncommander.parse(process.argv);\nEither this behavior should be documented or removed.. ",
    "pandapaul": "This happens for me when I provide a description as part of the command call.  Despite the presence of the action handler, commander tries to find a file to execute.\n```js\nconst program = require('commander')\nconst action = require('./some-action-handler')\nprogram\n  .command('blah', 'do some stuff')\n  .action(action)\n```\nBut things act as expected when I instead separate the description into a use of .description()\n```js\nconst program = require('commander')\nconst action = require('./some-action-handler')\nprogram\n  .command('blah')\n  .description('do some stuff')\n  .action(action)\n```\nThat's pretty goofy.  The docs seem to suggest that the presence of the action handler is the key to disabling this behavior, but this behavior seems to say otherwise.  After a brief glimpse into the source, I'd point a finger at this:  https://github.com/pandapaul/commander.js/blob/master/index.js#L178-L183\nJust noticed this other issue pointing to the same problem:  https://github.com/tj/commander.js/issues/715\nAnd this, which is sort of the other side of the same coin:  https://github.com/tj/commander.js/issues/633. ",
    "hlfshell": "I can confirm this happening on 2.14.1 as well in Windows. @maxpert 's fix does act as a work around if you don't need subcommand at all.\nStrangely, it fails finding the file even when it exists as well.. I am closing this, as the docs say an error is caused by using .action with git style commands - which I missed until review. It says an error will be thrown if you try this, which it isn't.\nSo if you find yourself in this situation - split it out to multiple files.. ",
    "borland502": "Options functions as designed: user error.. ",
    "matramos": "This was fixed?\nI'm having the same problem. And the example about Regex is not helping.. ",
    "sanex3339": "ping. ",
    "cravler": "Why it approved, but not merged yet?. When this changes will be merged with master?. Do you think that reapply commander logic with noHelp: true is better way then having translations map? I do not think so! For me is better to have translation files for different languages and just require it. \nThis functionality is optional and do not add any complexity for commander logic.. any comments?. Is this repository supported?. any news?. ",
    "tomorrowthief": "+1. ",
    "olivierbossel": "+1. ",
    "ball6847": "How long it's gonna take before releasing the next version ?\nI'm facing this problem and looking forward to use this. \nThanks. ",
    "patrickmcelwee": "I ran into this on Windows 7 as well, but my package.json looks like this:\njavascript\n  \"main\": \"index.js\",\n  \"bin\": {\n    \"muir\": \"./index.js\"\n  }\nand the error when running muir new, for example, is looking for a file named index-new. If I run muir demo, it looks for index-demo. ",
    "khaledosman": "Thanks. ",
    "timocov": "Related to #646. ",
    "lipeRomani": "hi, I've had this problem and need this fix.\nSome prevision to release this fix? . ",
    "sorohan": "@abetomo I've rebased my changes onto master, and fixed a couple of small lint issues (missing semi colons).. ",
    "ksnyde": "I have the same problem I believe. In my setup I have: \nprogram\n  .arguments(\"[files]\")\n  .description(\"Run mocha tests with ts-node\")\n  .option(\n    \"-s, --stage [env]\",\n    \"Environment to use\",\n    /^(dev|test|stage|prod)^/,\n    \"test\"\n  )\n  .option(\"--skip-lint\", \"Skip the linting checks\")\n  .option(\n    \"-f, --files\",\n    \"an alternative syntax to just specifying files as first argument on command line\"\n  )\n  .action(async files => {\n    console.log(\"start\");\n    await cleanJSTests();\n    const stage = program.stage;\n    const scope = getScope(files);\n    if (!program.skipLint) {\n      await lint();\n    }\n    await executeTests(stage, scope);\n  })\n  .parse(process.argv);\n\nand when I pass in a file to the script it works as expected but when I don't pass any arguments -- which should be valid considering files is stated as a non-required argument -- it never calls the action defined.. ",
    "bajax": "Commander doesn't do anything if it doesn't think it has to-- there doesn't seem to be a way to invoke a \"default action\".  I think the general idea is that some people would only want to use Commander to make parsing command line args easier, and may not even want to have different sub-actions at all.\nSo, @cyberwombat, rather than passing a callback to .action, and then calling parse, you're just supposed to include the code to run immediately afterwards, like so:\n```\n program\n    .option('-w', 'whatever')\n    .parse(process.argv);\nlet [arg1, arg2, arg3] = program.args;\nconsole.log('just start doing stuff immediately.');\n```\nIt's awkward if you have a program with a lot of sub-commands, but I can see the logic behind it. Commander can just be dropped into an existing script without having to really restructure the it (or learn new habits) to work with the library.. This quirk also makes error handling a nightmare with async functions... There's no real bottleneck that everything in a Commander program has to pass through, so you have to attach error handling logic to everything-- which isn't unreasonable, but it could be made easier.\nIn my ideal, I'd like to see is a method that CAN call a default function (having parse just parse when there's no obvious action to take makes at least a little bit of sense, so something like .execute might be better) which you can treat like a promise.  Then you could put teardown logic in .then, and a unified error handler in .catch.\nAll your actions would need to return a promise or be async functions (effectively the same thing) for this to work though.\nI'm almost thinking about writing a PR to implement this.. merge this please!. ",
    "rostik404": "@abetomo, I have the same problem as in this issue. Default action executes only if some arguments were passed. Will this behavior be fixed? I want to have an opportunity to run default action without arguments.. Great PR! \ud83d\udd25 \n@abetomo @vanesyan, merge it, pls, we are looking forward for this feature. Thanks!. ",
    "michael-crawford": "This issue seems to be related to something I'm trying to implement, but I'm not sure. I still can't seem to figure out a way to do what I think should be something simple, so not sure if this is the best place to ask, but as I think it's related, here goes:\nSummary: How are we supposed to set a default value for a boolean option?\nTwo use cases. Default true vs default false. \n\noptions.monitor should default to false or undefined, but have a way to be set to true\noptions.check should default to true, but have a way to be set to false.\n\nCurrent design as I understand it seems to support what I want as explicit command line options:\n\nAdd \"--monitor\" to CLI to get options.monitor = true, otherwise it's undefined\nAdd \"--no-check\" to CLI to get options.check = false, otherwise it's true\n\nBut I can't see how to make this work with default values, allowing me to set the default behavior via environment variables, but still allow for a command-line override.\n\nIf MONITOR env var exists and is 1 or true, options.monitor should default to true, and \"--monitor\" should have no effect. Otherwise, options.monitor should default to undefined or false, and \"--monitor\" would then set it to true.\nIf NOCHECK env var exists and is 1 or true, options.check should default to false, and \"--check\" should override this default to set it to true. Otherwise, options.check should default to true, and \"--no-check\" should override this and set it to false.\n\nI thought this should work, but it doesn't. If there's not a way to do this, there should be.\n```\nlet MONITOR = (process.env.MONITOR && (process.env.MONITOR == 'true' || process.env.MONITOR == '1')) ? true : false;\nlet CHECK = (process.env.NOCHECK && (process.env.NOCHECK == 'true' || process.env.NOCHECK == '1')) ? false : true;\nprogram.command('test')\n  .option('-m, --monitor', 'Monitor build process', MONITOR)\n  .option('-C, --no-check', 'Do not check prerequisites', CHECK)\n```\n. I found that code too, but coudn't quite follow how it worked or was supposed to work.\nI'm doing exactly the workaround you note, with a regex to validate true/false. This makes it work the same as other options which take a value like '--environment Production', but it's less than ideal.\nHopefully this doesn't come across as arrogant for a newbie to this discussion, but I really do think what I've proposed is how these boolean flags should work from a user's perspective:\n\nIt should be possible to use '--flag' to turn on a flag, and '--no-flag' to turn off a flag. That seems to be a convention I've seen used in a lot of other open source software. This appears to mostly work, but it seems there some flaky behavior around the -no-* variant which is being improved.\nIt should be possible to set the default true/false value of these flags through the default mechanism, in a way that works the same as other options that take a value. This would allow us to set these defaults through environment variables, or configuration files, on a global basis applying to all invocations of a command, but still allow a user to override true -> false or false -> true when running a specific invocation. This is also behavior I've seen in many other places in open source.\n\nWhat I'm building has overrides at multiple levels. So, I have a default baked into the code, then a system configuration tree, with a default path, which can be overridden by the EXAMPLE_SYSCONFIG env var, a per-user default like ~/.example (containing config.json), which can be overridden by the EXAMPLE_USRCONFIG env var, then for some key values, per option env vars like EXAMPLE_MONITOR, EXAMPLE_CHECK, EXAMPLE_ACCOUNT, EXAMPLE_ENVIRONMENT, as I may want to turn on or off this behavior system-wide in some environments where this is used.\nBut last, I still want to have a way to override the baked in default, system override default, per-user override default, specific env var override default, on the command line by --monitor or --no-monitor.  This type of multi-level defaults with override behavior is something I've seen often in sophisticated software, but first time I'm trying to do this in Node. I'm building a framework to manage building AWS CloudFormation based architectures for a large tech giant that can be used for multiple clients, so it needs a lot of flexibility.\nI'm using the workaround, but how long does it usually take for an idea like this, which would seem to be useful to many and straightforward to implement, to make it into a release?. I now have some code which gets me pretty close to what I was looking for, which may be helpful to those looking to do something similar to what I am, while waiting for this issue to perhaps get implemented. It's still not ideal, in that it doesn't exactly match the CLI \"UI\" I see elsewhere.\nI can set the default value of a boolean to true or false via an env var, turn this on (set to true) via '-c' or '--check' (see example above), regardless of if the env var set default is true or false. So, this works exactly as I want.\nHowever, I can't use the '--no-check' syntax to turn off this boolean. Instead, I use '-c false', '-c 0', --check false' or '--check 0' to turn this off (set to false), again regardless of if the env set default is true or false. So, VERY close to what I wanted. I'd still like to see the '--no-flag' syntax work, but the pressure is off from me to have this working, so I thought others might benefit from this technique.\nHere's the code, a modification of the \"pizza\" example. \"monitor\" should default to false. \"check\" should default to true.\n``` Javascript\n!/usr/bin/env node\nconst program = require('commander');\nconst MONITOR = (process.env.MONITOR && (process.env.MONITOR == 'true' || process.env.MONITOR == '1')) ? true : false;\nconst CHECK = (process.env.NOCHECK && (process.env.NOCHECK == 'true' || process.env.NOCHECK == '1')) ? false : true;\nconst parseBool = (val) => {\n  re=/^(true|1|on)$/i;\n  return re.test(val);\n}\nprogram\n  .version('0.0.1')\n  .usage('test')\n  .option('-s --size ', 'Pizza size', /^(large|medium|small)$/i, 'medium')\n  .option('-d --drink [drink]', 'Drink', /^(coke|pepsi|izze)$/i)\n  .option('-m --monitor [false]', 'Monitor', parseBool, MONITOR)\n  .option('-c --check [false]', 'Check', parseBool, CHECK)\n  .parse(process.argv);\nconsole.log(' size: %j', program.size);\nconsole.log(' drink: %j', program.drink);\nconsole.log(' monitor: %j', program.monitor);\nconsole.log(' check: %j', program.check);\n```. ",
    "kvmamich": "Hi! When PR will be merged? Need this :). ",
    "abadraja": "Try this:\nconst { Command } = require('commander')\nconst helpInformation = Command.prototype.helpInformation;\nCommand.prototype.helpInformation = function () {\n      return helpInformation.call(this).split('\\n').map(row => {\n          return row.replace(/^\\s{2}/, '');\n      }).join('\\n');\n  }. ",
    "twifty": "Here's another example:\njs\ncli\n    .arguments('<command> [args...]')\n    .option('-h, --host <host>', 'The host on which the server should listen')\n    .option('-p, --port <port>', 'The port number on which the server should listen')\n    .action((command) => {\n        runCommand(command, args, cli.host, cli.port)\n    })\n    .parse(process.argv);\nCalled with cli php -v.\nThe '-v' is swallowed. I worked around the issue by looking for command in the rawArgs array then slicing from the index.. For my own usage I don't mind having to add the 'php' prefix. I built the cli as a means to load and test another module. It is not intended for production.\nI had earlier tried using the '--' operator, but I couldn't figure out how to get the values.. Basically yes. But I handle that side of the code within the php server. It's not as simple as unshifting 'php' into the array since it's possible for the php binary to use a different name, phpx for example which loads the xdebug extension.\nLike I said above, I only created the CLI as a development tool. It allows me to load and run the main module outside of the test suite. The actual main module is not intended to be standalone. In reality, the whole string is passed over a tcp socket.\nI'll close this since, in my terminal, php -v and php \"-v\" produce the same (version) output.. ",
    "wavebeem": "I'm having this problem in an app I'm developing right now. I expected it to be an error to pass extra arguments, but I can't even detect them unless there's 2 extra instead of just 1 extra, which is odd:\nExample:\nhttps://runkit.com/wavebeem/commander-confusion. ",
    "loicgasser": "any chance to merge that?\nIt's a pretty common use case.. ",
    "MrShoenel": "Upvoting this, the console's width can be obtained using process.stdout.columns.. ",
    "akvamalin": "Thanks for your great work, guys :+1: . ",
    "buehler": "I don't know what the state of this is, but it seems that nearly ALL cli developers would like some custom way to define subcommands.... ",
    "shazron": "I am interested in this as well. Please send that PR!. ",
    "GeorgeGkas": "I'll send the PR ASAP. . ",
    "mauriciomelo": "I was looking for the same thing. This would be awesome.. ",
    "nwalters512": "This is a confusing API - I don't see any logical correlation between a command having a description and it being implemented as a git-style command. What if I want to provide a description for a command that is handled programmatically? @tj I'd appreciate any clarification you could make on why the API was designed this way and if there are any alternatives that could be used here.\nEdit: I incorrectly assumed that this meant you couldn't specify a description - you can by calling .description(...). However, I still thing this API could be more explicit.. ",
    "pandiafwan": "oh i'm sorry, this is my bad. \ni use shell script to run nodejs program, but forgot double quote in arguments\n node $PROGRAM_PATH/myprogram.js \"$@\"\n\nthank you and sorry :). ",
    "sudiptosen": "Please ignore - I misunderstood the functionality. Sorry for that.. ",
    "AdrieanKhisbe": "We have the same issue, using commander as a dependency of knex.js\nAs pointed out by @charsleysa, it's probably because the new version has been published when npm was \"broken\". \nMaybe a patch publish with an older version of npm (fix has not be released yet) might solve the problem.. @abetomo, awesome!\nThanks a lot!. ",
    "andrewsosa": "@abetomo @vanesyan This PR has been open for a few months, could it get merged in? . ",
    "marcincichocki": "Above solution didn't work for me(because my actions return promises). I ended up doing something like this:\n```typescript\n// actions.ts\nfunction actionErrorHanlder(error: Error) {\n  console.error(error.message);\n}\nexport function actionRunner(fn: (...args) => Promise) {\n  return (...args) => fn(...args).catch(actionErrorHanlder);\n}\n// main.ts\nprogram\n  .command('verify [deps]')\n  .option('-s, --skip ', 'skip deps')\n  .action(actionRunner((deps, options) => {\n    // action\n  }));\n```. ",
    "fabioricali": "I have same issue on Mac! Windows works.. It's terrible but works fine \ud83e\udd47 \nI'have created a simple file he is looking for\nhttps://github.com/dozjs/doz-cli/blob/master/src/doz-component.js. ",
    "knyy": "Is there a workaround/fix for this issue? It's affecting my automated build on linux as well, works fine on windows.. @fabioricali thanks for sharing, can you help me to understand the necessary changes to patch my application?. Here is the workaround I am using for my project:\npackage.json:\njs\n... \n{\n \"bin\" : { \"my-script\": \"./my-script.js\" }\n}\n...\nFor windows the value ./my-script- is used to try and find the executable file.\nFor unix the key \"my-script-\" is used to try and find the executable file.\nIf the key and value in package json bin is the same it works fine on both unix and windows. We wont get the not found error (which occurs if package.json 's package.bin is \"my-script\" : \"./index.js\").\nmy-script.js\njs\n  var program = require('commander');\n  program\n    .command('start', 'Start application dev server.') // sub-command name\n    .command('build', 'Build application artifacts.')\n    .command('test', 'Run tests in application.')\n    .command('generate', 'Generate application w/ scafolding.')\n    .parse(process.argv);\nFolder structure:\n./my-scripts.js\n./my-scripts-build.js\n./my-scripts-start.js\n./my-scripts-generate.js\n./my-scripts-test.js. ",
    "jameelmoses": "any update on this? ive tried @fabioricali and @knyy's workarounds with no success.\ni cannot reproduce the issue locally using yarn link or npm link but after publishing to npm and installing with yarn, the issue appears.\nalso, if i remove the globally installed yarn package and install with npm instead of yarn it works. ",
    "dandananddada": "So how to fix this issues?. ",
    "ivankostov": "Same issue for me - commander - 2.15.1, typescript 2.8.1.\nWorkaround is to remove the extends statement \nbefore:\nclass Command extends NodeJS.EventEmitter {\nafter:\nclass Command {\nCommand does not implement any of the EventEmmiter's functions.. Yes, I have tried it with all versions above 2.11 and with different\ntypescript versions. And in this case the right keyword would be\n\"implements\" but as far as I see there are no common methods with\nEventEmitter\nRegards,\nIvan\n\u041d\u0430 \u0441\u0440, 11 \u0430\u043f\u0440 2018 \u0433., 12:27 Roman Vanesyan notifications@github.com\n\u043d\u0430\u043f\u0438\u0441\u0430:\n\nAre there any errors with commander with TypeScript other then the version\n(your current)?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/788#issuecomment-380404626, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AO-FhA_G3_p91l1lZxZwosYUa0kqm3JTks5tndqkgaJpZM4TN3E7\n.\n. Do not discuss too much, verify, merge, smile :-)\n\n\u041d\u0430 \u0447\u0442, 7 \u044e\u043d\u0438 2018 \u0433., 21:10 Roman Vanesyan notifications@github.com\n\u043d\u0430\u043f\u0438\u0441\u0430:\n\nSorry for waiting so long. Curios, what will it looks like if we change it\na bit and put implements instead of extends?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/pull/788#issuecomment-395514075, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AO-FhAYTQD4QR8mmJ0z5Hzcdv5BHgLNPks5t6WyOgaJpZM4TN3E7\n.\n. \n",
    "avendiart": "Adding @types/node to devDependencies has fixed the issue for us.. EventEmitter is a class, not an interface, so implements is out of place here. The problem is that tsc doesn't know anything about NodeJS.EventEmitter if the @types/node isn't installed. You could try doing import { EventEmitter } from 'events' and actually adding @types/node as a dependency. (or just reference node with /// <reference types=\"node\" /> instead of importing). ",
    "arzyu": "@types/node should be added as a dependency in commender.js. As a temporary solution, I add it to my own package before this done.. ",
    "ChrisCates": "When will this be merged?\nI've tested this on several semvers of Node.js and tsc. Just curious what's going on here.. ",
    "Shiva7071007": "Refer This : https://stackoverflow.com/questions/49809779/executing-global-options-before-subcommands. ",
    "VassyutovichIlya": "Oh, I see. I must separate declaration of commands like that:\n``js\nconst commander = require(\"commander\");\ncommander\n    .option(\"-f, --flag\", \"Flagged\")\n    .command(\"per-project <project> [otherProjects...]\")\n    .action((project, otherProjects) => {\n        console.log(project \u2014 ${project});\n        console.log(otherProjects \u2014 ${otherProjects}`);\n    });\ncommander\n    .command(\"all\")\n    .action(() => {\n        console.log(\"all\");\n    });\n//commander.parse([\"pathToNode\", \"pathToScript\", \"-f\", \"per-project\", \"foo\", \"bar\", \"baz\"]);\ncommander.parse([\"pathToNode\", \"pathToScript\", \"-f\", \"all\"]);\nconsole.log(flag \u2014 ${commander.flag});\n```. ",
    "san-templates": "e...3q...\u7a81\u7136\u53d1\u73b0\u6211\u4e00\u76f4\u7528\u9519\u4e86.... ",
    "marcosschroh": "To access to the specific value to have to use program.args which is an array of the options that you have added (is in order to the options).. ",
    "vuchan": "Thanks in advanced, your answer let me know where i made wrong, and how to fixes it next. . ",
    "ScandalousMan": "Hello John, thanks for the reply. I was trying to find a way to make a difference depending on the option position in the command line, e.g.\n```shell\n\nspm --version module\nandshell\nspm module --version\n```\nDo you confirme this is not a feature handled by commander ? Is there a reason for this or would you be interested by a PR ?\n\nThanks and have a good day !. ",
    "jeffschwartz": "BTW\n\"dependencies\": {\n    \"commander\": \"^2.15.1\"\n  }. Well after reading the docs a little more attentively and spying the arguments passed to the action callback handler I realized I was being a total dick :)\nI easily got my intended command line structure to work using the following:\n```javascript\nconst program = require(\"commander\");\nprogram\n    .version(\"0.0.1\")\n    .option(\"-i, --ignore [ignores]\", \"ignore files\")\n    .option(\"-m, --manifest [manifest]\", \"save manifest file\");\nprogram\n    .command(\"bust [files]\")\n    .action(function (files, cmd) {\n        console.log(\"command\", \"bust\");\n        console.log(\"files\", files)\n        console.log(\"cmd -i\", cmd.parent.ignore);\n        console.log(\"cmd -m\", cmd.parent.manifest);\n    });\nprogram\n    .command(\"restore [files]\")\n    .action(function (files, cmd) {\n        console.log(\"command\", \"restore\");\n        console.log(\"files\", files)\n        console.log(\"cmd -i\", cmd.parent.ignore);\n        console.log(\"cmd -m\", cmd.parent.manifest);\n    });\nprogram.parse(process.argv);\n```\nMy only concern at this point is that I am not using a specific commander api  but instead I am using knowledge of the arguments structure passed to the action callback gleaned from snooping. I'm afraid that if in a future commander version changes to these arguments structure will break my code. Is there a better way to do this and if so how? And sorry for the false alarm. I will close this out but hope that someone will be kind enough to tell me if there is or isn't a better way to do this.. ",
    "amaurymartiny": "Not in 2.15.1.\nAlso, I would ideally like to have an array or an object containing only those arguments.. After some trial and error I ended up with a small script.\n```javascript\nconst remaining = cli.rawArgs\n  .splice(Math.max(cli.rawArgs.findIndex(item => item.startsWith('--')), 0)) // Remove all arguments until one --option\n  .filter((item, index, array) => {\n    const key = camelcase(item.replace('--', '').replace('no','')); // Remove first 2 '--' and then camelCase\nif (key in cli) {\n  // If the option is consumed by commander.js, then we skip it\n  return false;\n}\n\n// If it's not consumed by commander.js, and starts with '--', then we keep\n// it. This step is optional, used for optimization only.\nif (item.startsWith('--')) {\n  return true;\n}\n\nconst previousKey = camelcase(array[index - 1].replace('--', '').replace('no',''));\nif (cli[previousKey] === item) {\n  // If it's an argument of an option consumed by commander.js, then we\n  // skip it too\n  return false;\n}\n\nreturn true;\n\n});\n```\nWhere cli = require('commander') and camelCase is this.. OK, understood now.. ",
    "jwickens": "Thanks @amaurymartiny! This was really bugging me. Unfortunately I had a case with short flags that was not being handled. Also found it easier to use the cli.options array.\n```js\n  const remaining = cli.rawArgs\n    .splice(Math.max(cli.rawArgs.findIndex(item => item.startsWith('--')), 0)) // Remove all arguments until one --option\n    .filter((item, index, array) => {\n      // If the option is consumed by commander.js, then we skip it\n      if (cli.options.find(o => o.short === item || o.long === item)) {\n        return false\n      }\n  // If it's an argument of an option consumed by commander.js, then we\n  // skip it too\n  const prevKeyRaw = array[index - 1]\n  if (prevKeyRaw) {\n    const previousKey = camelcase(\n      prevKeyRaw.replace('--', '').replace('no', '')\n    )\n    if (cli[previousKey] === item) {\n      return false\n    }\n  }\n\n  return true\n})\n\n```. ",
    "axelchalon": "made an npm module out of it: commander-remaining-args. ",
    "Berkmann18": "@amaurymartiny That's because you forgot to specifiy what the argument b and c are as opposed to what you did for a.. @JohnRGee I guess that was the problem whenever it was specified before the file arguments.\nI didn't get that warning even when using npm start -f csv examples/ex0.js so that wasn't apparent.\nThank you anyway.. ",
    "alinnert": "I'm working on a small project where the end-user is in control of the number and names of command line options. So as a developer of the tool I don't have this information. But I need to pass all user-defined options to an also user-defined script. Therefore it would be incredibly helpful if I was able to access all remaining unknown options as an object, just like the known ones.. ",
    "tgsoverly": "I have updated the issue to include that example, and if I do that it return undefined. \nnode index.js --another-option something testCommand\nundefined\nsomething. You were supper correct, I just didn't see the example with the \nvalue and that is what was throwing it off.\nOn Wed, May 23, 2018 at 3:03 AM John Gee notifications@github.com wrote:\n\nOh, looking at your question again, have you set up so that testCommand\nruns node? In that case it does not get specified in the commander setup as\nit is part of the invocation rather than part of the parsing. (And for\nextra irony, my first answer might have been close...)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tj/commander.js/issues/805#issuecomment-391242357,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAddDEzATAcDYV9fqZbR-whc35H6nXwPks5t1Qm7gaJpZM4UHab7\n.\n. \n",
    "abdulhannanali": "@tgsoverly Does this solve your problem? If yes, maybe close the issue? :smile: . ",
    "sr258": "For future readers: I've moved to yargs, as it supports async actions.. @chrisgo I'm sure it can, but the point of my question was if it is possible to use async await.. ",
    "bigtfromaz": "I investigated yargs as an option but frankly I think commander.js offer the best design.  However that doesn't mean that commander.js does not have an issue in this regard.\nI am very experienced but quite new to JavaScript.  It leaves a lot to be desired when compared to most other languages.\nWith that said, I find myself in a position where I have to build an enterprise-quality command-line app that must run under node.js.  The app will also offer a REST API interface to some functions. Obviously neither it, nor the CLI can be allowed to block the message/UI thread.\ncommander.js seems to be a little schizophrenic in this regard.  Is it a parser or a command dispatcher? It's a really nice parser.  Dispatcher? No so much.  Command actions definitely do not block the thread however there is no reasonable way to return anything from the handling function, including a Promise.\nI have evaluated a few options but none of them will allow me to sleep well at night after this thing goes live.  So I have a suggested change:\n\n\nOffer a version of command.parse that doesn't actually dispatch an action but rather, returns the objects that would have been supplied when calling the action.  This would allow the consuming app to dispatch it's own method using either Promise or TypeScript async/await.\n\n\nOffer awaitable and sync versions of command.parse that returns whatever value is returned by the action function.\n\n\nI would suggest option 1 as it provides a clean separation between parsing and functional execution.\nI thought about forking this project and making the changes myself but I have to say my learning curve would make it too costly and that same learning curve would probably produce less than optimal source code.  If you were not able to accept our pull request then we would be in the situation where we would have to merge your changes into our version, forever.\nThis is just food for thought.  For our project we may write a parser from the ground up using TypeScript and the semantics of commander.js in the spec.  Another possibility will be to just write a parser specific to the apps requirements.\nBy the way, if there is something I have wrong, please feel free to constructively enlighten me.  . ",
    "chigix": "I think this behavior is correct. Exactly, promise-like return is not provided through commander api though.\nWhy not wrap commander with promise api manually? By the way, I also don't think that it is needed to do jobs simultaneously around commander initiation. Generally, commander initiation should be down at the top level of a problem or a system at the entry file, which, I think, is a best practice.. ",
    "alexx666": "I had the same issue, turned out it was a version problem.\nUpgrading from version 2.15.0 to 2.18.0 fixed the issue.. ",
    "chrisgo": "Can this pattern be used?\nhttps://stackoverflow.com/questions/48376479/executing-multiple-sequelize-js-model-query-methods-with-promises-node?answertab=oldest#tab-top\nconst axiosPromise = axios.get(...);\nconst sequelizePromise = sequelize.query(...);\nconst anotherPromise = anotherFunctionThatReturnsAPromise();\nPromise\n    .all([axiosPromise, sequelizePromise, anotherPromise])\n    .then(responses => {\n        console.log('**********COMPLETE RESULTS****************');\n        console.log(responses[0]); // axios result\n        console.log(responses[1]); // sequelize result\n        console.log(responses[2]); // another result\n    })\n    .catch(err => {\n        console.log('**********ERROR RESULT****************');\n        console.log(err);\n    });\n. ",
    "styfle": "@abetomo @vanesyan Anything else you need from me to merge this?. ",
    "linfan68": "Hit this issue yesterday...\nAnd I found it is related the help string passed as the second parameter of .command()\nRemoving the help string fixed it for me\nAlso I found there are more issues, like if you\u2019re using command with parameter \u2018cmd \u2019, adding help string make it not checking the parameter anymore, and parameter parsing also seems wrong (it pass in the command name string instead). ",
    "majuric": "@Ciboulette There's a .help callback you should be able to use to post-process help info before it's shown in the console. I guess you should be able to strip anything you don't want to show\nhttps://github.com/tj/commander.js#helpcb. ",
    "DanielRuf": "Yes, I'll handle this.. Rebased it.. ",
    "fengzi2016": "Thanks for the reply , the error was solved.. ",
    "dland512": "Okay, I think I see how it works now. The value in angle brackets is like a placeholder for that option's value, i.e. the place where you would type it on the command line. The string inside the angle brackets doesn't really seem to matter.\nSo if it's in angle brackets and you don't supply the value, you get an error:\nnode test.js -c\nerror: option `-c, --config <path>' argument missing\nWhereas if you use square brackets like this:\nprogram.option('-c, --config [path], 'set config path. defaults to ./deploy.conf')\nyou can either specify a value like this\nnode test.js -c /some/path\nin which case program.config will be /some/path. Or you can leave it off like this:\nnode test.js -c\nin which case program.config will simply be true.. ",
    "davidgatti": "Hmm.. adding the help. I have this:\n```javascript\n//\n//  React when the user needs help\n//\nprogram.on('--help', function() {\n//\n//  Just add an empty line at the end of the help to make the text more\n//  clear to the user\n//\nconsole.log(\"test\");\n\n});\n//\n//  Pass the user input to the module\n//\nprogram.parse(process.argv);\n```\nAnd nothing happens. This a project where I have it L26. I remember it working. And when I updated the modules and was testing something else, I realized that this listener is not getting triggered.\nAnd ida of what I'm missing?. The blindness is strong with this one \ud83d\ude05. Thank you and sorry.. ",
    "TheGreatRambler": "I found my problem. There is only supposed to be two arguments, not three.\n// this\narguments.option(\"-n, --name [name]\", \"Choose your name to be displayed [A BOTTY BOI]\");\n// not this\narguments.option(\"-n\", \"--name [name]\", \"Choose your name to be displayed [A BOTTY BOI]\");\nThank you @abetomo for the help!. ",
    "m-slashe": "The problem seems to happen when you put a description to a command, try to remove them. ",
    "naoey": "Hmm that is indeed the case. Still seems like an issue to be fixed because the second parameter of the function signature does expect an optional description. Will leave the issue open for the maintainers to decide what to do with it.\n\n. You are invoking the actions yourself instead of passing them as reference. Try program.command(\"init\").action( something1 ); (notice missing parentheses with your function name). ",
    "mpathy": "Here, all my options are started.\nprogram.version(package.version);\nprogram.command(\"init\").action( something1() );\nprogram.command(\"install\").action( something2() );\nprogram.command(\"uninstall\").action( something3() );\nprogram.parse(process.argv);\nsomething1() is started, then something2(), ...\nI cant figure out why and I already removed my descriptions... ",
    "dirkkok": "I ran into the same issue today, I now use the description function instead:\nprogram\n  .command('init <name>')\n  .description('Creates boilerplate for a new plugin')\n  .action(init);. ",
    "jd20": "Can I submit a PR for this? What would be a logical way to add this functionality to the API?. Hi, I created #830 to provide a fix for this problem. It does the common sense thing of checking what the symlink in bin resolved to, and checking for that, if it would otherwise fail to find the subcommand's script.. This seems like an issue for yarn on Ubuntu as well, when installing with yarn global add, I'm seeing two levels of symlinks, which throws off commander. I tried installing gitlab-time-tracker on Ubuntu just to make sure it wasn't my own package's problem, and I'm seeing the same error, so not just a Homebrew issue. I'm running yarn 1.10 on Ubuntu 18.\nAgree that the sensible fix would be to follow the symlink recursively, to some sane limit. I made a recent fix to that code, so I'll try to put together a PR and test case soon.\n. Dupe of #869.. Yes, I spoke too soon... it is a PR that would fix this issue though \ud83d\udc4d . ",
    "Kezzsim": "Excellent! That works! And I also take it that once it's installed as an app and linked, NPM won't be around to eat the args anymore~\nThank you. ",
    "jaredpetersen": "According to the README, you should be able to add custom help with the following and have it display with the correct vertical padding:\njavascript\nprogram.on('--help', function(){\n  console.log('  Examples:');\n  console.log('');\n  console.log('    $ custom-help --help');\n  console.log('    $ custom-help -h');\n  console.log('');\n});\nAdding that to my previous example shows that is not the case:\n```javascript\n!/usr/bin/env node\n'use strict';\nconst program = require('commander');\nconst version = require('./package.json').version;\nprocess.title = 'my-app';\nprogram\n  .name('my-app')\n  .version(version, '-v, --version');\nprogram\n  .command('start')\n  .description('start the app')\n  .option('-d, --directory ', 'directory for the thing')\n  .option('-p, --port ', 'port number for the thing', parseInt)\n  .action(() => console.log('started'));\nprogram.on('--help', function(){\n  console.log('  Examples:');\n  console.log('');\n  console.log('    $ custom-help --help');\n  console.log('    $ custom-help -h');\n  console.log('');\n});\nprogram.parse(process.argv);\nif (!program.args.length) program.help();\n```\n```\n$ ./cli.js\nUsage: my-app [options] [command]\nOptions:\n-v, --version    output the version number\n-h, --help       output usage information\n\nCommands:\nstart [options]  start the app\n\nExamples:\n$ custom-help --help\n$ custom-help -h\n\n$. This also is a problem for subcommands like:\n```\n$ ./cli.js start --help\nUsage: start [options]\nstart the app\nOptions:\n-d, --directory <directory>  directory for the thing\n-p, --port <port>            port number for the thing\n-h, --help                   output usage information\n\n$\n. @mojavelinux -\nAll of the output examples in the README show a newline at the end of the help output and were incorrect before the pull request. Additionally, the example in the Custom Help section of the README did not work without the change. The documentation could easily be modified, but I assumed it was desirable since the newline at the end of the output was documented.\nI personally think the change is more visually appealing since it evens out the starting newline (before the \"Usage\" text).\nI agree that there should not be a newline after normal program output. There does appear to be a standard there and it's shown in the README. However, I don't think there really is a standard when it comes to help output.\nHere's a small survey of how a few programs handle help:\n Docker: 1 line before help, 0 lines after help\n Node.js: 0 lines before help, 0 lines after help\n FFmpeg: 0 lines before help, 2 lines after help\n Raspivid: 0 lines before help, 1 line after help\nI can get on board with removing the newline at the end of the output if the newline at the beginning  is also removed; at least there would by visual symmetry and it appears to be slightly more common.\nHowever, changing the output further would arguably constitute as a breaking change and would need to be a major revision. The previous newline addition was basically a bugfix since all of the documentation relied on it existing. Any future help output change is a behavior change.\n@vanesyan @abetomo What are your thoughts on this discussion?. What are the thoughts on removing the newline before the help output? apt, git, bash, node, and ffmpeg do not have this but commander does. docker includes it too but it's not in the majority in this case.\nIf we're already going back to fix the documentation and revert the change, I think it's worth a look.\nI'd also suggest not fully reverting the change, as the number of lines in the help output was previously untested. I think a new pull request with the removal of the newline, an update of the test, and an update of the documentation is a better way to go.. Going to close this out since a PR was issued and merged. Any future work around removing the newline below and/or above the help output and fixing the documentation can be a new issue.. @mojavelinux I'm not sure. Like I mentioned earlier, I'm more okay with reverting this as long as the newline above is removed as well which it looks like you agree with. I'm not sure what the maintainers' thoughts are on this are though. They seem to be pretty busy.\nNo matter what we do, it needs to be a new PR that fixes the documentation as well. Just a straight reversion lands us back where we were: somewhat-desirable help output with incorrect docs.\nIf everyone agrees on the new proposed format (0 newlines before help and 0 newlines after help), we can create a new issue and work towards a PR for this.. @mojavelinux ^^ Added a new issue to track this change.. @vanesyan You can't just add it to the commands array, as doing so will mean that there won't be a newline after commands like mycli somecommand --help or mycli --help (without any configured commands) where options are the last outputted value.. Thank you! How often do releases go out?. Working on this on my fork.. @vanesyan @abetomo @mojavelinux What are your thoughts on un-indenting the help output as well?\nNo Indentation (Proposed)\n```\n$ ./cli.js\nUsage: my-app [options] [command]\nOptions:\n-v, --version    output the version number\n  -h, --help       output usage information\nCommands:\nstart [options]  start the app\n$ \n```\nIndentation (Current)\n```\n$ ./cli.js\n  Usage: my-app [options] [command]\nOptions:\n-v, --version    output the version number\n-h, --help       output usage information\n\nCommands:\nstart [options]  start the app\n\n$ \n```. No indentation seems to be more standard across CLI tools. Going to implement this as part of my PR.. @vanesyan Updated PR with your suggested changes. Good catch \ud83d\udc4d . @vanesyan When will this be released?. @vanesyan gentle bump. Thanks!. @mojavelinux I think a separate issue would be good.. @mojavelinux Just created one: #863.. @vanesyan Fixed.. Build on Travis CI timed out before getting to run the tests. Closing and re-opening in hopes of relaunching the build.. Fixed in the latest update.. ",
    "brianpkelley": "As a work around it seems Number or Math.floor work as expected.\nExample\njs\n    program\n        .option( '-i, --integer [intVal]', 'Integer value', Math.floor, 5 ) // Integer\n        .option( '-f, --float [floatVal]', 'Float value', Number, 3.14 ) // Float\nUsagee\nsh\n    test -i 4.321 -f 4.321\n    test -i -f\nOutput\nsh\n{ i: 4, f: 4.321 }\n{ i: 5, f: 3.14 }. ",
    "HayDegha0917": "Definitely with the latest version (2.19). If I switch to commander 2.11, it behaves as expected. If I switch to 2.19, I have a problem.. Try your test with a single-hyphen option (such as -q):\nprogram.option('-o --optional', 'An optional option').\nparse(process.argv);\nAlso, note that my option does not take a value.. ",
    "jackellenberger": "I have the same issue.\nThe not ideal but not so bad is just to call your sub-command file directly, e.g. node inspect program-subcommand.js --option --options. ",
    "kavishshah": "node v1.2.0. Thanks for the fix! What is the recommended node version to use? It seems the one I have is pretty old now.. ",
    "joeferraro": "Exactly what I was looking for, thanks @abetomo . ",
    "michael-brade": "This is great, thank you! Now only the error messages are still wrapped in newlines. This should be fixed as well, so I'll open a new issue.. ",
    "codyj110": "@abetomo @vanesyan  is there something you guys are waiting on me todo?. ",
    "xujif": "the sub commond option callback never be called when has same option name with program.. ",
    "daften": "Thanks @jd20 !. Not a dupe, this is an issue, the other is a PR. :). ",
    "KillWolfVlad": "~~Rebased with master (previous commit here)~~\n~~Rebased with master (previous commit here)~~\n~~Rebased with master (previous commit here)~~\nRebased with master (previous commit here)\n. I don't think that CTRL+C/CTRL+V code from readlink is good idea, because we must also provide tests and support this legacy code. If you don't like async module maybe better send PR to readlink repo to remove it from dependencies.. ",
    "HaoChuan9421": "Can't change -v and -h description is bad practice for localization. Waiting for this PR merged!. ",
    "fishbar": "or these node options can be passed by ENV COMMANDER_NODE_OPTIONS . for example\uff0cwhen the command running with large memory and deep stacks\uff0c i need pass v8 options to the node process\uff0clike\uff1a\n```sh \n\ncustomCmd  subcmd --max_old_space_size=2048 --stack_size=1024  other_options\n```\n\nnow commander will treated these v8 options as unknow arguments and passed to the subcmd\u3002\nso the v8 options dose\u2019t work\uff0c and because of the memory limitation and stack limitation\uff0ccommand never can success.. ",
    "erolkskn": "Hi,\nThanks for pointing that out. I will create a pull request about this.. It's just how sub-command execution works. If you look at that line of code https://github.com/tj/commander.js/blob/d24008158d0870a6df2279dc93c7a36d3f41926d/index.js#L526 \nit concatenates current executing filename and args[0] ( sub-command ). So what you are talking about is not a bug neither feature.. Can you share your code with us ? If you can we can help you better, thanks.. hey @vanesyan , is there any update ?. ",
    "joe223": "Thanks. export default can not be used due to the using of:\nhttps://github.com/tj/commander.js/blob/27aeac1c2d3a81977592f4b772b8b9f7a6b7560d/index.js#L28\nIs my understanding correct\uff1f. I got it! Thank you so much.. ",
    "buddbro": "Accessing via the web is working now, however I still get error code 403 when trying to install the dependancy.. ",
    "FoxDaxian": "miss a line\njs\nprogram.version(pkg.version, '-v, --version');. ",
    "mprinc": "Thanks. Yes I discovered them eventually, but at the moment I was interested to provide a default value in my app, I couldn't search for any explicitly mentioned default use case, but rather hitting:\n.command('list', 'list packages installed', {isDefault: true})\nor\nIf you want to display help by default ..\nIt would be nice to have more clear directions. ",
    "Stogoh": "And how can i set a option on by default. For example I have an option --databaseHost which should have a default value. How can I do this? This is without an enum.. ",
    "ozbillwang": "I am looking similar to set default value for the parameters.\nI used package argparse before, and it is easy to set the default value, how can I do the same with commander?\nbar.addArgument(\n  [ '-f', '--foo' ],\n  {\n    action: 'store',\n    defaultValue: \"test.txt\",\n    help: 'foo3 bar3'\n  }\n);. should we change true to something else? It really confused me. True makes the feeling, something happened and it is correct.\nI would prefer to exit directly, if the input of drink is not in the list. Whatever it shouldn't be true, even undefined is better than true.. Thanks, @kira1928 \ud83d\udc4d \nI never think to write a function (parseDrink) in the part of program.option . I currently add the test to program.drink \n. ",
    "bgm5d": "Thank you!!\nOn Tue, Oct 30, 2018 at 6:02 AM John Gee notifications@github.com wrote:\n\nA little digging shows the MIT license was in the initial commit of\nREADME.md in 2011, moved to a separate license file in 2015, and has not\nbeen modified since then.\n672c7d0\nhttps://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_tj_commander.js_commit_672c7d01d8382257226d67c39c6e1002c881d95f&d=DwMFaQ&c=pLULRYW__RtkwsQUPxJVDGboCTdgji3AcHNJU0BpTJE&r=53ETeLIrYy3xQSeY0QdYzBZDCVzlhcvQ3XYg7yAIKxc&m=sXL1Y3L63sBCDZ2JmNsYjqH28WHOxjKyFZ2jT2AywnM&s=CkG4C9XkxftAqKGHmWyX5GaKQM6MaAuz-QY4C0RlOW8&e=\nef0a54f#diff-9879d6db96fd29134fc802214163b95a\nhttps://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_tj_commander.js_commit_ef0a54ff10166bdfadf7c7e554221b723a8a2248-23diff-2D9879d6db96fd29134fc802214163b95a&d=DwMFaQ&c=pLULRYW__RtkwsQUPxJVDGboCTdgji3AcHNJU0BpTJE&r=53ETeLIrYy3xQSeY0QdYzBZDCVzlhcvQ3XYg7yAIKxc&m=sXL1Y3L63sBCDZ2JmNsYjqH28WHOxjKyFZ2jT2AywnM&s=JGeBX5Vfr57raHINRkK14tmPxaS7WSU6doicY8p8gAA&e=\nhttps://github.com/tj/commander.js/commits/master/LICENSE\nhttps://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_tj_commander.js_commits_master_LICENSE&d=DwMFaQ&c=pLULRYW__RtkwsQUPxJVDGboCTdgji3AcHNJU0BpTJE&r=53ETeLIrYy3xQSeY0QdYzBZDCVzlhcvQ3XYg7yAIKxc&m=sXL1Y3L63sBCDZ2JmNsYjqH28WHOxjKyFZ2jT2AywnM&s=mD3M0bBkN1wciClqiFGu_6Sd3S6AaglFxRLYW_RmA38&e=\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_tj_commander.js_issues_885-23issuecomment-2D434240129&d=DwMFaQ&c=pLULRYW__RtkwsQUPxJVDGboCTdgji3AcHNJU0BpTJE&r=53ETeLIrYy3xQSeY0QdYzBZDCVzlhcvQ3XYg7yAIKxc&m=sXL1Y3L63sBCDZ2JmNsYjqH28WHOxjKyFZ2jT2AywnM&s=zp-_MpSXEipGvW5k6886j0Kf9X4MKLrq5Z_MI46og4o&e=,\nor mute the thread\nhttps://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AqcSol8IvKByGO7-5FOswFJSxRikASCTnPks5uqCO-5FgaJpZM4X-5FWjF&d=DwMFaQ&c=pLULRYW__RtkwsQUPxJVDGboCTdgji3AcHNJU0BpTJE&r=53ETeLIrYy3xQSeY0QdYzBZDCVzlhcvQ3XYg7yAIKxc&m=sXL1Y3L63sBCDZ2JmNsYjqH28WHOxjKyFZ2jT2AywnM&s=8oXnbgn4FX5e7DVSbcu3lNrGsxjMjHeMLPQalVprW88&e=\n.\n\n\n-- \nBridget Morris\nManager, Counsel\n804-512-2273\nbridget.morris@capitalone.com\n\nThe information contained in this e-mail is confidential and/or proprietary to Capital One and/or its affiliates and may only be used solely in performance of work or services for Capital One. The information transmitted herewith is intended only for use by the individual or entity to which it is addressed. If the reader of this message is not the intended recipient, you are hereby notified that any review, retransmission, dissemination, distribution, copying or other use of, or taking of any action in reliance upon this information is strictly prohibited. If you have received this communication in error, please contact the sender and delete the material from your computer.\n. ",
    "Bamii": "So i tested your code (and i assume you're running your cli like this node cmcli.js monitor), it seems that adding a description to the command fixes it. \nLike so, .command('<command>', 'Some description') Try it and see.. ",
    "SpaceboyRoss01": "I tried that and it didn\u2019t work.--Sent from Yandex.Mail for mobile21.11.2018, 02:14, \"John Gee\" notifications@github.com:You could define monitor as a command, like:\nprogram.command(\"monitor\")\n   .action(() => {\n      var cfg = JSON.parse(fs.readFileSync(path.join(os.homedir(),\".cluster-mon\",\"client.json\")).toString());\n      // etc\n   });\nOr you can use .arguments rather than .command (since you aren't defining a command as such). See specify-the-argument-syntax in the README, like:\nprogram.arguments(\"command\")\n   .action((cmdAction) => {\n      action = cmdAction;\n   });\n\u2014You are receiving this because you authored the thread.Reply to this email directly, view it on GitHub, or mute the thread.. node cmd.js monitor. .command21.11.2018, 10:13, \"John Gee\" notifications@github.com:Which approach would you like a longer example for, .command(\"monitor\") or `.arguments' ?\n\u2014You are receiving this because you authored the thread.Reply to this email directly, view it on GitHub, or mute the thread.. Yes. ",
    "swedebugia": "Yes thanks a lot \ud83d\ude03. ",
    "MystK": "@erolkskn the bug seems to be that the behavior is incorrect in windows but correct in linux.\nExample:\nif I run\ngit commit\nand git actually points to /blah/index.js, on linux, it would try to call\ngit-commit.js\non windows, it calls\nindex-commit.js\nOn top of that, in windows, the path of where git-commit.js is seems to be incorrect.. ",
    "amily4555": "me too \ngit-style no support yarn global . ",
    "philsturgeon": "Thank you, that was it! . ",
    "Zikoel": "Hi, I have the same issue! What is the resolution for this problem ?. ",
    "Toub": "You can use it that way:\n```ts\nimport { Command } from 'commander'; \nconst command = new Command();\ncommand\n  .version('0.1.0')\n  .option('-p, --peppers', 'Add peppers')\n  .option('-P, --pineapple', 'Add pineapple')\n  .option('-b, --bbq-sauce', 'Add bbq sauce')\n  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')\n  .parse(process.argv);\ncommand.help();\n\nUsage: index.ts [options]\nOptions:\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -P, --pineapple      Add pineapple\n  -b, --bbq-sauce      Add bbq sauce\n  -c, --cheese [type]  Add the specified type of cheese [marble] (default: \"marble\")\n  -h, --help           output usage information\n```\n\nWould be nice to add typescript documentation.. ",
    "jamesgeorge007": "@abetomo @vanesyan Is it fine now?. Oops didn't notice!. ",
    "tahayk": "+1 . ",
    "baruchvlz": "If you read the code here, seems pretty straight forward to me. It logs the commands and flag options you have added through .option..... ",
    "toymachiner62": "@baruchvlz That's great that you were able to dig through the code and find it's usage. That doesn't mean that it shouldn't be documented. . ",
    "jwheare": "Ah, thanks, would be good to get this documented. Also is there a way to programmatically trigger it? Thinking of a subcommand like:\ncommand help <subcommand>\nWould be useful for people familiar with git's help system.. Looks like this is already stubbed but doesn't seem to do anything:\nhttps://github.com/tj/commander.js/blob/82d0d0ae6d66163f5c97ce56031b796621bef4ce/index.js#L210-L212. ",
    "renanbastos93": "example code:\n```js\n(function(){\n    \"use strict\";\n    const program = require('commander');\n    const asks = require(\"./../src/conf.json\").asks;\nprogram\n.version('0.0.1')\n.description('testing!');\n\nfor (let currentCli in asks) {\n    program\n        .command(currentCli.command)\n        .alias(currentCli.alias)\n        .description(currentCli.description)\n        .action(\n            function(...args) {\n                currentCli.action(...args);\n            }\n        );\n}\n\nprogram.parse(process.argv);\nreturn;\n\n})();\n```. Activity hold, so I waiting to continue a task.. ",
    "MYDIH": "Thanks for the link. I managed to bypass the issue using a workaround (the one in the electron-packager repo). Still, there should be a way to address those special cases in commander's options.. ",
    "flotwig": "Ah, thanks for clearing that up. I was trying to get globbing to work intuitively for users, so if they pass --spec * and the shell expands it to --spec a b c, it'll still work. I came up with a workaround that parses the extra arguments from Commander:\nSample code:\n```js\nconst commander = require('commander')\nconst parseVariableOpts = (fnArgs, args) => {\n  const opts = fnArgs.pop()\nopts.spec = [opts.spec]\nif (fnArgs.length && opts.spec) {\n    // this will parse space-delimited specs after --spec spec1 but before the next option\nconst argIndex = args.findIndex(arg => arg === '--spec') + 2\nconst nextOptOffset = args.slice(argIndex).findIndex(arg => arg.slice(0, 2) === '--')\nconst endIndex = nextOptOffset !== -1 ? argIndex + nextOptOffset : args.length\n\nconst extraSpecs = args.slice(argIndex, endIndex).filter(maybeSpec => {\n  return fnArgs.find(fnArg => {\n    return maybeSpec === fnArg\n  })\n})\n\nopts.spec = opts.spec.concat(extraSpecs)\n\n}\nreturn opts\n}\nconst program = new commander.Command()\nprogram\n.command('run')\n.usage('[options]')\n.description('Runs some stuff')\n.option('-d, --dev', 'Dev mode')\n/* bunch more options here /\n.option('--spec ', 'Specs to run')\n.action((...fnArgs) => {\n  opts = parseVariableOpts(fnArgs, process.argv)\n  console.log(opts.spec)\n})\nprogram.parse(process.argv)\n```\nExample output:\n\u279c  node index.js run --spec a c\n[ 'a', 'c' ]\n\u279c  node index.js run --spec a\n[ 'a' ]\n\u279c  node index.js run --spec a b c d e f g\n[ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ]\n\u279c  node index.js run --spec a b c d e f g --dev\n[ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ]\n\u279c  node index.js run --spec a b c d e f --dev g\n[ 'a', 'b', 'c', 'd', 'e', 'f' ]\n\u279c  node index.js run --dev --spec a b c d e f\n[ 'a', 'b', 'c', 'd', 'e', 'f' ]. ",
    "kira1928": "@zce \nYour pr broke the lint test.\nhttps://travis-ci.org/tj/commander.js/jobs/493226140#L464-L478\nI think those single quotes were inserted to cheat eslint, which is a bad practice :(\nCould you change the https://github.com/tj/commander.js/blob/master/.eslintrc.json file to allow only double quotes or change all those strings to be wrapped by single quotes?\n(BTW, I personally prefer double quotes :p). @ozbillwang \n\nHow do I write code to identify, if drink's value is not coke|pepsi|izze, exit(-1).\n\nHow about this one:\n```\nvar program = require('commander');\nvar parseDrink = (function() {\n  var regex = /^(coke|pepsi|izze)$/i;\n  return function(value) {\n    if (regex.test(value)) {\n      return value;\n    } else {\n      console.error(invalid param ${value});\n      process.exit(-1);\n    }\n  };\n})();\nprogram\n  .version(\"0.1.0\")\n  .option(\"-s --size \", \"Pizza size\", /^(large|medium|small)$/i, \"medium\")\n  .option(\"-d --drink [drink]\", \"Drink\", parseDrink)\n  .parse(process.argv);\nconsole.log(\" size: %j\", program.size);\nconsole.log(\" drink: %j\", program.drink);\n```\n$ node a.js\nsize: \"medium\"\ndrink: undefined\n$ node a.js -d abc\ninvalid param abc\n$ echo $?\n255\n$ node a.js -d\nsize: \"medium\"\ndrink: true\n$ node a.js -d coke\nsize: \"medium\"\ndrink: \"coke\"\n. @shadowspawn \nThank you for your advice.\nI have fixed the problem you mentioned.\nDoes it look better now?. ",
    "zce": "error: missing required argument `text'\n`text' starts with right quotes, but ends with straight single quotes. ",
    "viniciusls": "Hi! But what do you think it would be good to implement inside this bootstrap? Because in the examples that you mentioned, we have complex folder structures and configs to create and manage while in commander I just see a 'bin' which will be responsible for calling your own background logic. Do you have some example of complex application?\nI started using commander.js recently and I'm liking so much of it and I'm looking for ideas which I can help implement.. ",
    "negiDharmendra": "In order to fix the issue, we need to pass the unknown parameter to the while emitting the 'command:*' event on the following file. \nhttps://github.com/tj/commander.js/blob/68545af7130967bc1a35ae30e9567d78c5e56d8a/index.js#L656. ",
    "fernandojsg": "@JohnRGee thanks for your answer, but, sadly, it doesn't seem to solve the issue :\\\n\u279c  tests git:(master) test run misc_fps --adb --browser fxr --launchparams=\"--ez e10s true\"\nerror: unknown option `--ez e10s true'. Although if I add an space inside the quotes it works:\ntests run --launchparams \" --ez e10s true\". @JohnRGee that works!! thank you very much!! \ud83d\udc4d . ",
    "btsheehy": "\ud83e\udd26\ud83c\udffb\u200d\u2642\ufe0f Github's keyboard shortcuts just went crazy on me. Sorry. ",
    "kunimitaiyoh": "@shadowspawn Sorry, mistaking.. ",
    "russpos": "Won't that conflict with how it's currently using .options (as an Array of option objects)?\n. That seems to defeat the purpose of namespacing them.   Take this example:\n```\nprogram\n  .option('-a, --anchovies', 'Add anchovies?')\n  .option('-c, --cheese [type]', 'optionally specify the type of cheese', 'mozzarella');\nprogram.parse(['node', 'test']);\nconsole.log('Expected: ', program.opts);\nconsole.log('Not expected: ', program.options);\n```\nOuput:\nExpected:  { anchovies: false, cheese: 'mozzarella' }\nNot expected:  [ { flags: '-a, --anchovies',\n    required: 0,\n    optional: 0,\n    bool: true,\n    short: '-a',\n    long: '--anchovies',\n    description: 'Add anchovies?' },\n{ flags: '-c, --cheese [type]',\n    required: 0,\n    optional: -14,\n    bool: true,\n    short: '-c',\n    long: '--cheese',\n    description: 'optionally specify the type of cheese' },\nanchovies: false,\ncheese: 'mozzarella' ]\n. ",
    "kuwabarahiroshi": "I see, that is similar to .prompt() behavior.\nSo we'll have choice, that is, it's up to us to merge or not to merge filled options into program in a callback.\nAs with camelCase, or hyphenated-words, I aimed to be in \"generous on input, strict on output\" way. But if you don't like it, I agree with you.\n. Yah, I thought that multiple prompt can be implemented with writing an overload version of .prompt().\nHowever, to tell my opinion, I expect .prompt() to prompt always.  I would like to .fill() options if it's not supplied with command line option.\nI mean:\n``` javascript\nprogram.prompt({\n    foo: 'please input foo: ',\n    bar: 'please input bar: ',\n    baz: 'please input baz: '\n}, function(obj) {\n    // ...\n});\n// I expect above code to always prompt foo, bar and baz.\n// On the other hand,\nprogram.fill({\n    foo: 'please input foo: ',\n    bar: 'please input bar: ',\n    baz: 'please input baz: '\n}, function(obj) {\n    // ...\n});\n// I would like to fill obj.foo if --foo option isn't given on command line option, so as well with bar and baz.\n// In other words, if --foo option is supplied on command line, I don't want to prompt that 'please input foo: '.\n```\nDoes it make sense?\nI afraid that it might be enough to have multiple version of .prompt()..., but I often want .fill() feature.\n. ",
    "miyajan": "@abetomo I fixed it. Thank you for your review!. ",
    "blair": "@vanesyan According to https://github.com/tj/commander.js/#helpcb the method \"Output help information and exit immediately\" so it terminates the process.. ",
    "bzoz": "Yes. Since Win10 terminal control sequences are supported natively by the console. For previous Windows versions Node (libuv to be more precise) has special emulation layer that translates the codes to winapi calls.. "
}