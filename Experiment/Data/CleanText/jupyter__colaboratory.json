{
    "marksandler2": "This is actually urgent. access via different appids will make readonly docs unusable in addition to clobbering each other realtime docs (which is a major nuissance already). Also it will be a pain to track down all cloned repositories.\n. we had this same issue in the early version of colab and ipython 1.0, I\nwonder if it is the same issue revisited.\nm\nOn Mon, Jun 16, 2014 at 8:28 AM, KesterTong notifications@github.com\nwrote:\n\nRight now the same notebook will connect to a new kernel each time a\nconnection is made, rather than connecting to a single kernel for that\nnotebook, and only launching a new kernel if no kernel for that notebook is\nrunning. This is because we don't use session.js, only kernel.js, in the\nfront end.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ipython/colaboratory/issues/6.\n. what is version independent code?\n\nOn Mon, Jun 16, 2014 at 8:38 AM, KesterTong notifications@github.com\nwrote:\n\nRight now, the tab completion only works with IPython 1.x because it\ndoesn't use the version-independent code.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ipython/colaboratory/issues/7.\n. It is actually not. It is based on wsgi. E.g. colab.corp uses google\nstandard webserver. So you can plug and play any wsgi compatible server.\nOn Jun 27, 2014 5:14 PM, \"KesterTong\" notifications@github.com wrote:\nCurrently, the Colab notebook static code piggybacks off the IPython\ntornado web server. A better way is to completely rewrite the frontend\nhandlers along the lines of SingleCellServer.py.\nThis would allow for running IPython without a shell script run.sh, and\nalso decouple the server from the IPython profile.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ipython/colaboratory/issues/9.\n. Also any chance of expanding Reason: > Type Error in the console and seeing\nwhat's there?\n\nOn Thu, Jul 10, 2014 at 12:37 PM, Min RK notifications@github.com wrote:\n\nWhat version of IPython do you have installed?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/54#issuecomment-48653415.\n. Mathjax is supported by internal version of colab. What's the error you are\ngetting?\n\nm\nOn Thu, Jul 10, 2014 at 10:51 PM, KesterTong notifications@github.com\nwrote:\n\nI changed it so we use a submodule for MathJax.\nIt successfully loads some of the JavaScript, but MathJax still does't\nseem to work. @marksandler-google https://github.com/marksandler-google,\nis MathJax supported in Colab? Not sure if the error is in how I configure\nMathJax (see b715ada\nhttps://github.com/jupyter/colaboratory/commit/b715ada0e287f92ff471da83579f57ed47cc7b07)\nor whether Colab code doesn't support MathJax.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/54#issuecomment-48696577.\n. No, we don't support it in codecells (though we should). Instead we only\nsupport it in markdown.\n\nOn Fri, Jul 11, 2014 at 3:36 PM, KesterTong notifications@github.com\nwrote:\n\nNot getting any errors, it's just not rendering LaTeX. E.g. if I type\n%%latex\nx^y\nIt displays \"x^y\". I think the problem is I'm not doing the configuration\nright, so that it's loading the base mathjax libraries, but not the LaTeX\nprocessor\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/54#issuecomment-48790764.\n. Actually take it back, in code cell we should support it on demand only.\nThere is a non-trivial tax on doing cell level support (because of\niframes), to load mathjax preemptively.\n\nOn Fri, Jul 11, 2014 at 3:47 PM, Mark Sandler sandler@google.com wrote:\n\nNo, we don't support it in codecells (though we should). Instead we only\nsupport it in markdown.\nOn Fri, Jul 11, 2014 at 3:36 PM, KesterTong notifications@github.com\nwrote:\n\nNot getting any errors, it's just not rendering LaTeX. E.g. if I type\n%%latex\nx^y\nIt displays \"x^y\". I think the problem is I'm not doing the configuration\nright, so that it's loading the base mathjax libraries, but not the LaTeX\nprocessor\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/54#issuecomment-48790764\n.\n. Something like this: $$\\int_{i=0}^{100}x=1$$\n\n\nOn Fri, Jul 11, 2014 at 3:54 PM, KesterTong notifications@github.com\nwrote:\n\nWhat should I do in a markdown cell to display LaTeX?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/54#issuecomment-48792200.\n. We should probably get rid of the the toolbar in the first place. It has\nvery limited functionality and all these actions are mostly superceded by\nothers.\n\nOn Wed, Aug 6, 2014 at 5:54 PM, Fernando Perez notifications@github.com\nwrote:\n\nI also noticed a new gap at the top of the page which wasn't there before.\nthat adds vertical lost space, which we're trying to regain...\n[image: image]\nhttps://cloud.githubusercontent.com/assets/57394/3836131/622c97fe-1dcd-11e4-9090-78e3cf49fa61.png\nThe space pointed to by the arrows wasn't there before...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/pull/70#issuecomment-51417851.\n. Uh. Yeah. This would cause that. You might be hitting internal limit for\nthe notebook size imposed by drive. We will investigate more.\nOn Aug 8, 2014 10:20 PM, \"Probably rgbkrk\" notifications@github.com wrote:\n@kayur https://github.com/kayur Brand new notebook. Are there any other\ndiagnostics I can get for you?\nThis is a fairly large notebook (>10 MB) by the way.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/79#issuecomment-51677704.\n. Can we should provide more restrictive  scope to the kernel instead?  I\nwould be reluctant to break existing functionality until this is fixed.\n\nOn Sun, Aug 10, 2014 at 12:37 PM, KesterTong notifications@github.com\nwrote:\n\nAnother update: Using the filepicker API with only drive.file scope is\nmore complicated than I thought. It turns out the the origin of the page\nthat launches the filepicker, must be the same as the origin of the drive\nredirect URL's listed in the Drive SDK settings. Otherwise it won't set\nthat file to openable by the app.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/pull/82#issuecomment-51724792.\n. THat would be textcell [For performance reasons]. But looks like the\nsupport is broken in the chrome app version.\n\nOn Sun, Aug 10, 2014 at 9:52 AM, KesterTong notifications@github.com\nwrote:\n\n@marksandler2 https://github.com/marksandler2, can you comment, I\nforgot whether it was markdown or display output that was supposed to\nsupport MathJax in this version of colab.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/83#issuecomment-51720200.\n. Meta comment: please try to be more specific and include any/all logs you\ncan collect.   THis might save a lot of time other people who will read\nthis entry.\n\nI think Kester looked into this problem in other context. Something about\nJSONEncoder not being present in json for unknown reasons.  We should find\nout why it is not available in pnacl version of python. Maybe we can just\ninject it.\n\nAttributeError                            Traceback (most recent call last)\n in ()\n----> 1 from colabtools import js\n/usr/lib/python2.7/site-packages/colabtools/js.py in ()\n    246\n    247\n--> 248 class JsonEncoder(json.JSONEncoder):\n    249   \"\"\"Provides json enconding for Js objects.\"\"\"\n    250\nAttributeError: 'module' object has no attribute 'JSONEncoder'\nOn Tue, Aug 12, 2014 at 1:17 PM, Kayur Patel notifications@github.com\nwrote:\n\nThrows an error.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/90.\n. as far i know we need custom encoder because for whatever reason, i can't\nprovide my serialization routines for custom classes. Unlesss you have a\ngood idea how to serialize custom classes without custom encoder.\n\nOn Wed, Aug 13, 2014 at 4:21 PM, KesterTong notifications@github.com\nwrote:\n\nAgreed on @marksandler2 https://github.com/marksandler2's point, it\nwould be very helpful for the developers and others if bug reports are as\ninformative as possible, especially since non-developers may come here to\nreport bugs and see if their bug is already reported.\nThe error is due to json.JSONDecoder not being there in colabtools.\n@marksandler2 https://github.com/marksandler2, tracking down PNaCl\nissues can be complex. Would it be possible to use json.loads in place of\njson.JSONDecoder.decode in the meantime?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/90#issuecomment-52125126.\n. It is an interesting proposal, and i quickly glanced at remotestorage. It\nseems that the main obstacle is that colaboratory is geared towards\nrealtime collaboration - changes on your screen are visible on other's\nimmediately, whereas remotestorage is geared more towards traditional\nversion control model. (Correct me if i am wrong!)\n\nIn particular our model,  require a tree-like document model, with\nlisteners receiving updates on parts of the documents that are being\nchanged.\nWhile there are circumstances when version model is more preferrable than\n realtime model, at this point we are unlikely to switch over, though it is\ncertainly something that we are interested in addition to realtime model.\nm\nOn Thu, Sep 18, 2014 at 9:16 PM, Sebastian Kippe notifications@github.com\nwrote:\n\nGoogle Drive and Dropbox are still in experimental stage, but we'll be\nglad to support any integration efforts and improve our implementation in\nthe process. If this finds open ears, just ping us with any questions\nwhatsoever!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/104#issuecomment-56133567\n.\n. It is not sufficient to have low level routines for realtime communications\nsuch as socket.io. It is much more important to have a good well defined\nmodel for realtime documents, with conflict resolution, partial update\nmodels, and tracking distributed changes.\n\nOn Fri, Sep 19, 2014 at 10:36 AM, Sebastian Kippe notifications@github.com\nwrote:\n\nYes, real-time data transfers should be handled by WebRTC. And yes, I\nthink although it's perfectly feasible in theory, at the moment we don't\nsupport real-time collab use cases very well, because you'd have to\nconceptualize and implement these mechanisms from scractch yourself as an\napp developer.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/104#issuecomment-56209192\n.\n. Optional: I would use, which shows gmail-like notification, rather than a dialog box, but it is optional:\n      colab.notification.showPrimary(\"Mounting local ...\");\n. If we are in non-app mode, colab.app would be undefined, right?\n. maybe make this a function, because i imagine there will be more features and more version controls..\nthis code we should write only once. \nif  (colab.checkVersionAndWarnUser(colab.MOUNT_LOCAL_DIRECTORY_MIN_CHROME_VERSION)) {\n  colab.app.postMessage(...)\n}\n. can we control this by a parameter?  Rather than disable altogether. Upload to Drive is important is important. \n. \n",
    "KesterTong": "Good point Mark.  They are changed now.\n. The main issue here was actually the use of the wrong default kernel URLs, which is now fixed.\n. I have tried using Matt's build, but it has some errors.  Seems like while initializing, IPython is calling some functions that don't exist in PNaCl's glibc-compat library, causing it to crash.  We've seen things like this before, e.g. in IPython/core/prompts.py.  I checked that it wasn't a regression to that particular issue, but the fix to prompts.py is still in place.  So it looks like some other change in the naclports build (shift to pyppapi library, new python libraries, or changes in how IPython is initialized) is causing this error.\n. We decided to use Google's client ID for the realtime API.  We don't anticipate any issues from this.  Keeping the issue open because the issue actually refers to other client ID's that are completely unused right now.\n. Version independent means code that works with IPython 2.x and IPython 1.x.  Right now this means using the IPythonInterface object defined in extern/base/js/ipython.js and extern_2_0/base/js/ipython.js so that the appropriate code is selected at build time.  Later this can be refactored into a Kernel object.\n. Mark, I'm referring to the server in github version of colab.  But this shouldn't matter: we can do everything using tornado handlers that we could do with wsgi, so this should not be an important difference between Google's build an the github build.\n. Done (already fixed in colabtools library checked in in da78373bb1e1b95df6494bc7573aefce41feb7f3)\n. @fperez, I'm assigning this to you now since the first steps must be taken by you.  Instructions for creating a Chrome Web Store account are at https://developer.chrome.com/webstore/publish.  I'm not entirely clear on how you would create an account other than using your personal account, hopefully you can figure this out if you have a non-personal account you would prefer to use.  If that link isn't helpful you can also try https://chrome.google.com/webstore/developer/dashboard.\nFor the cloud console, you can start at https://cloud.google.com/\nOf the two, the Chrome Webstore account is far more important since I don't think there is any issue with using our own Cloud Console accounts for now.  But ideally we will get both done.\n. Done\n. Chrome App is now feature complete with web app.  Will add a number of non-milestone issues.\n. Done\n. I see now that it isn't.\n. No problem, I figure that out eventually.  Just took a while to realize that there was no \"build\" step for the Classic webapp.\n. Will close this issue once \"Open\" works in the Chrome App welcome page.  Right now getting an error: \"The API developer key is invalid.\" even though I added the Chrome App origin to the public developer key's allowed origins.\n. @marksandler-google, can you take a look at this?  I added the Chrome App as an allowed origin for the public key, but it still gives this error.\n. Closing and replacing with issue specifically on File Picker inside Chrome App\n. The library is already checked in in da78373bb1e1b95df6494bc7573aefce41feb7f3, it's just a matter of making sure the modules/ directory is on the Python path.  @minrk, @ivanov, any ideas on the best way to do this?  We could specify the command line\nPYTHONPATH=./modules:PYTHONPATH python -m colaboratory\nBut I think this won't work on Windows.\n. Done in da78373bb1e1b95df6494bc7573aefce41feb7f3\n. It is independent of Chrome App permissions, it relates to calling a Google web API from a webview, which should act like a regular webpage.\nIt also does not relate to directory selection for mounting.\n. Fixed in 7b67580cd480820d3b5675fd955dca7da9935542, by specifying an \"App ID\" instead of a \"Public Developer Key\".  Though I couldn't find any official documentation, an \"App ID\" is a substring of the Client ID.\n. It works again now\n. @minrk, I know you were working on this earlier, but I can't see any commits in this repo or IPython.  Can you update us on the status of this?\n. Done by @minrk \n. 22eaa661db21e2194a8e38b0b3884aecdc80bab3 disables the share button/menu item in the Chrome App, until this is resolved.\n. Thanks Min.  We would prefer the add colabtools to the path, because our internal users are already using import colabtools.\n. good point.  We had originally thought of adding a modules directory to package extra modules with the colab installation.  Given the current structure, that makes a lot less sense.  So I'm fine with your idea of adding colabtools to the top level directory.  Will do that instead of merging this PR.\n. Fixed in 8f03edb524a47a08945f047c303fa505c38a0ab5\n. This is actually fixed by Kayur already - this confusion was because colaboratory.jupyter.org didn't have the latest version\n. Done\n. I'm working on a fix.  The issue is mathjax is not in our repo, but the javascript expects it to be there\n. Thanks for the comments Jason, as you suggested we're downloading from the CDN (at build time) to get the MathJax files.\n. Fixed in 088a42de9d4a8695a5c349fa22d643bbf4135d4d\n. Fixed in Chrome App but not webapp....\n. Fixed for web app in cc472f0d640e7f1bf430508be032ba79a5c8fe86\n. I fixed the README, it had install_chrome instead of bundle_static, thanks for catching that.\nWill look into why MathJax is giving 404's, I presume the JS file is supposed to be self-contained, but we may be using the wrong query params, or maybe we explicitly link against these other files? Will investigate.\n. I changed it so we use a submodule for MathJax.\nIt successfully loads some of the JavaScript, but MathJax still does't seem to work.  @marksandler-google, is MathJax supported in Colab?  Not sure if the error is in how I configure MathJax (see b715ada0e287f92ff471da83579f57ed47cc7b07) or whether Colab code doesn't support MathJax.\n. Not getting any errors, it's just not rendering LaTeX.  E.g. if I type\n%%latex\nx^y\nIt displays \"x^y\".  I think the problem is I'm not doing the configuration right, so that it's loading the base mathjax libraries, but not the LaTeX processor\n. What should I do in a markdown cell to display LaTeX?\n. Replacing this issue with #83 \n. Thanks for making this issue, I'm looking into it.  Did this happen when using the Classic web app, or the Chrome App?\nI think that the problem is that we are not using the IPython notebook binary, but a different entry point (colaboratory/colaboratory.py) which doesn't define the variables that bokeh expects (and needs to define the display hooks for IPython).\n. @standarddeviant thanks for your patience, I understand the problem now.\nbokey is expecting to be run inside an IPython notebook.  For some reason, it isn't recognizing that it is being run in an IPython environment.  We create our own python binary (the entrypoint is colaboratory/colaboratory/colaboratory.py) which may explain why this is happening. I will look into it more.\n. Can you check if using\noutput_notebook(force=True)\ninstead of \noutput_notebook()\nworks?\n. So I did some investigating, and there are a few issues with Bokeh.\nFirst, you must call output_notebook(force=True) to force Bokeh to continue even though it detects that it's not running in IPython notebook.\nSecond, you must call this every cell where you use Bokeh.  This is because of the way we use iframes to isolate the output of each cell, so the JavaScript that Bokeh loads when you call output_notebook is not \"visible\" from the other cell's outputs.\nFinally, Bokeh still behave's oddly, in that it doesn't seem to create new figures correctly, so that calling show() will display every figure drawn so far in the output.  A workaround is to do something like\nf = line(...)\nshow(f)\n. Ok, so the guideline should be that people in general should not merge their own PR's, and follow the above as a rough guideline for who should review.\nIf we're agreed, should I add something to the README?\n. Added CONTRIBUTING.md in #57.  Thanks for the input.\n. @ellisonbg  @MatthewTurk @minrk  does this seem ok\n. @sometext, @MatthewTurk  and I have fixed this now, the issue was that the resources file that contains all the files needed by IPython, was too large for PNaCl when running in a 32 bit sandbox, and so it caused an out of memory error, which shows up as a C++ exception thrown by the new operator.\n@MatthewTurk has created a smaller tar file by stripping out resources that aren't needed, which has solved the problem\n. @MatthewTurk, can you review this?\n@marksandler2 can you review for JavaScript style and potential web app breakages\n. What did you end up changing?  I think the origin mismatch was caused by some Cloud Console settings which we've fixed.  Right now ports 8888 to 8899 work.\nYes, see the LICENSE file for full details, but you are free to deploy as you wish.\nPlease keep us up to date with your work on running colab in the cloud.  We are working on a Docker instance ourselves.\n. Hi @rudimk, I was going through all the issues to see which ones should be closed, and when I re-read this one, I had some more thoughts.\nI was actually not sure why you were using a different origin, but now I'm guessing that you are setting up a Colaboratory server using Docker, and so the origin of the webpage isn't 127.0.0.1:8844 (the current default for colab) but some some domain that you have set up yourself.\nIn this case, I have two comments/questions\n- Have you considered getting users to ssh into the server using port fowarding?  That is what we are working on for putting colab on Docker on Google Compute Engine (something similar should work for Amazon Web Services etc. too).  The main advantage of this approach is that you don't have to worry about authentication, you just have the simple rule that anyone who can access that server through ssh can access the kernel.\n- If you don't choose to use the ssh port forwarding approach, you will need to change all the client ID's listed in client_id.js (there has been some refactoring since your last comment) to your own client ID.  There are some other steps (e.g. enabling Google Drive API/SDK) but this will work.  One thing to note is that realtime documents using your client IDs will be incompatible with realtime documents created with our client IDs.  So it will be impossible for people to collaborate on the same doc using different clients.\n. Ok that sounds cool.  The problem before was probably that we use two keys (for complex reasons described in client_id.js, which won't apply to you), and you probably only changed one.\nRegarding the IPython kernel URL, this is currently hard-coded to 127.0.0.1:8844, and uses a cookie to remember the user's choice if they change it.\nIn your case, would it always be a fixed address, e.g. your.server.com:8844/api/kernels/ that users connect to?  In that case, you could just hardcode that address (see colab.getDefaultKernelUrl in colaboratory/resources/colab/js/main.js)\n. What if you modified it so the kernel URL was derived from the notebook URL.  E.g. \nmy.notebook.domain/notebook -> my.notebook.domain/api/kernel?\nYou would still have to modify the colab.getDefaultKernelUrl function, but it wouldn't have a single URL hardcoded.\n. What I meant is modify the code from getDefaultKernelUrl so that it used the url of the current window, to construct the url for the kernel.\n. Sure, feel free to comment on the thread if you have more questions, or start a new issue.\n. The \"upload\" tab is now optional, and is enabled in the notebook window, but disabled in the welcome window.\n. Updated to Google cloud console for new ports.\n. This is now part of @kayur's PR\n. Thanks @rgbkrk, my username is kestert.  I just uploaded a first version of the image, built against #92.\n. Hey, this is actually the expected behavior, I will add something to the README.  The issue is that the Google API's that we call must be configured to accept calls from a set of origins that we specify in the API setup.  What this means is that only certain domains can make calls to the Google APIs using our client IDs.\nThe domains that we have set up are jupyter.colaboratory.com and 127.0.0.1:8844 (and the 20 ports 8845, 8846, ... as well).\nThe options available right now are\n- Get the user to log in to the server using ssh with port forwarding, so they will be connected in 127.0.0.1 (this also solves the security issue, in that you can stop opening up ports to the open web, and just listen on localhost in the server.  ssh will take care of the security).\n- Create you own cloud console project and configure the Google APIs for that, and override client_id.js in your code.  This has some unfortunate implications, e.g. your users will not be able to collaborate with users of the unmodified version, and in fact opening with your app will \"break\" documents of other users.  I'm not necessarily discouraging this approach, but you should be aware of the implications both for your users and ours.\nLet us know if you have any other issues or comments, the nature of the APIs we use creates a lot of tricky issues for people running their own servers, but it's something we want to support as much as possible.\n. @bzz Option 2 will work for all users in a single organization as long as they all use your server with the modified client ID.  Workflow would be:\n- you set up a server based on our docker instance - bearing in mind above security warnings i.e. anyone connected to coLaboratory can execute arbitrary code on that machine, in the name of the account that is running the coLaboraotory binary.\n- you use your own client ID, created in your own cloud console project.\n- users log on to your server.\n. @MatthewTurk  can you review this please?\n. @MatthewTurk Can you review and merge?  When I set the min version before I just set to the Stable Chrome version for OSX, but this is newer than the Linux builds of stable\n. I've made all the fixes needed for the Chrome App.\n. I added a zip file of the Chrome App here https://drive.google.com/file/d/0B1PTZLmWaBU1RzZRX1JoZW5SMjQ/edit?usp=sharing\n(Note this is not a release build for uploading to the Chrome Web Store)\nTo test it, unzip to a new directory and follow the instructions at https://developer.chrome.com/extensions/getstarted#unpacked for loading an unpacked app\n. Regarding input prompts, I agree in principal, but we haven't fully thought out how this will interact with the realtime model.  Let's fix that separately from this PR, and I will try to get it done before Thursday evening.  If possible we'd like to merge this tonight so we can know we have something ready for release, and work on as many other changes tomorrow as possible.\n. @fperez, regrading the broken images, we can't reproduce this so we'll need to get more debugging info from you.  Can we do this separately from this PR, since I believe that this bug was present before these UI changes.\nI'm rebasing now.\nRegarding code review, @marksandler2 has reviewed this PR, is this sufficient?\n. I'm not really sure what I did either.  Should I undo it?\n. This branch can now be merged, I'm not sure what I did but since I force updated this branch, it is now up  to date with master.\nIn the future we'll follow the practice of not touching this repo except through PR from private forks.  Unfortunately neither of our PhD's are in git, so we still have a lot to learn.\n. Which is the merge commit?\n. But that is no longer part of this branch since I force-updated the branch\n. Thanks\n. Great, let's do this tomorrow\n. Thanks a lot for the comments @Carreau.\n@jdfreder could you review this also?\n. 569b014bcfc217cc8769d996c3f7041bd4332110 should fix the broken user icon issue\n. Thanks, @kayur is taking care of these now.  The documentation for the Google Closure Library (goog.*) API is at http://docs.closure-library.googlecode.com/git/index.html is you want to look anything up.\n. @MatthewTurk  can you merge this if you're satisfied it works on your machine and has no other issues?\n. This fixes #74 \n. @kayur can you describe what happens?  What dialog do you see?\n. Ok thanks I know what is happening.  It is only the welcome page that is affected by this issue right?\n. But did you see this issue in the welcome page or on the notebook page?\nI realized there is no mechanism to refresh to token in the welcome page, but I don't think this would affect anything except the welcome page in the Chrome App.\n. @kayur, can you confirm that this only happens in the welcome page?\n. Fixed in 792a24b8504c16239a244485c48a1927263d607d\n. I would guess this is related to slightly different implementations of zip.  E.g. I created the zip file (Chrome Packaged Apps are zip files) using a mac, and there may be slight incompatibilities between the zip file it creates and other OS's.  We will try to find someone with an ARM chromebook to get a repro of this issue.  It seems to work fine on Intel Chromebooks.\n. @marksandler2 can you review please?  I tested that you you can open a notebook created in the web app in the Chrome App, and the colabtools.drive.Load/Save functions still work, except for opening/overwriting files not created with the app (e.g. you can save to a new file, and load from that file, but can't load from an existing file).\nWe could even add a ui to open a data file, so that we keep drive.file permissions and still allow colabtools to open data files not created by the app.\n@minrk  Please let us know if you have any questions/comments.\n. Update: I realized that this still doesn't let you open files uploaded to Drive by the user.\nThis should be technically possible barring two things:\n- The filepicker API seems not to work properly with Chrome Apps\n- Since the web app uses a separate cloud console project, opening with the web app in Drive won't grant access to the realtime client ID, since that is in the shared Chrome/web app.  One solution is to combine everything into one project, and have some option to open in the Chrome App (with defaults controlled by cookies).\n. Another update: Using the filepicker API with only drive.file scope is more complicated than I thought.  It turns out the the origin of the page that launches the filepicker, must be the same as the origin of the drive redirect URL's listed in the Drive SDK settings.  Otherwise it won't set that file to openable by the app.\n. Looks like that's the best we can do for now.\n. @marksandler2, can you comment, I forgot whether it was markdown or display output that was supposed to support MathJax in this version of colab.\n. I think it also doesn't work in the webapp version either.\nI tried to load mathjax in notebook.html, but what I did does't seem to work.  Any ideas?  It never gives an error while loading, and seems to load the correct files.\n. @jirkadanek The code in github has mathjax support, but we haven't updated the Chrome App, so it doesn't have MathJax support yet.  We are just figuring out the best process for a regular update of the Chrome App from the freshest version on github.\n@Carreau we no longer use the CDN, we pull in MathJax as a submodule.\n. I actually was working on this just before the release but it didn't make it in.  @MatthewTurk, the first step is to upgrade to pandas 0.14, as 0.13 uses some old Google client APIs for Python.\nOnce that's done, I will still need to make some small tweaks to the authentication process (the pandas authentication process relies on raw_input() which isn't properly implemented in colab yet).\n. #86 is a requirement for the OAuth flow used by the pandas module to work.\n. Actually #86 is no longer needed.  All that is needed is an update of the pandas library (and also installing the Google client libraries properly using pip, not just copying the package directories like I was doing before)\n. Fixes #83 \n. Thanks, I was able to reproduce this.  I'm still investigating, I tried to override the subprocess.Popen constructor, which I assumed was being called.  However, this may not be true, or I didn't override it properly. @MatthewTurk knows more about which system functions get called from Python, so he might have an idea of what is causing popen to get called.\n. After discussion with @ilblackdragon and @marksandler2, I realized the error wasn't where I thought it was.  In particular, the error happens during a regular execute request and not an oinfo request.  So given this newfound knowledge I'm going to take another look at the Python code and see what is happening.\n. Agreed on @marksandler2's point, it would be very helpful for the developers and others if bug reports are as informative as possible, especially since non-developers may come here to report bugs and see if their bug is already reported.\nThe error is due to json.JSONDecoder not being there in PNaCl.  @marksandler2, tracking down PNaCl issues can be complex.  Would it be possible to use json.loads in place of json.JSONDecoder.decode in the meantime?\n. @MatthewTurk, that would be really great.  It seemed like a standard part of Python 2.7 so I'm not sure why it isn't there now, but there seems to be a huge number of places in the build process where a build in module might get affected.\n@marksandler2, I didn't realize you used a custom encoder.\n. @MatthewTurk is working on this now, @MatthewTurk can you close this issue once the update has propagated to the github repo (i.e. when the pnacl binary version in this repo points to a version that contains the updated json module?)\n. @MatthewTurk, have you considered not using a tar file, and just using httpfs?  We could, for example have a very minimal tar file (with the python base distribution) and add the mount point for an httpfs to the python path, for other packages.\n. @rgbkrk I think I don't fully understand the relationship between github repos and Docker.  So far I was treating them as completely distinct, but this seems to be suboptimal.\nIs there any particular setup you recommend, e.g. using Docker's automated build system?\n. @MatthewTurk I'm not clear on how to install yt and its Python bindings.  Can you give me the command line instructions to do this, and I will add them to the Dockerfile\n. @MatthewTurk  Too easy\n. @rgbkrk I just set up an automated Docker build at https://registry.hub.docker.com/u/kestert/colaboratory-test/\nI'm interested to see how long building this ~1GB image takes.\n. @rgbkrk, that gives me the idea that it would be better to use an IPython base image, and add the few extra libraries we need.  Is there an official IPython base image that is close to what we have here?\nIt doesn't surprise me that the automated build process is slow.  It takes about 20 minutes for me to build on an n1-standard-1 GCE instance, which costs 7c per hour.  These costs would add up pretty quick given that it rebuilds on every push to the repo.\nWere you asking how well our docker image would work on a remote server?  The main issue is there is no authentication (and it listens on every port!) so it's only designed for one use case: servers that users connect to over ssh with port forwarding.  But I hope that we can collaborate with people who want to use this image to run a  real webserver.  The authentication just isn't there yet.\n. @rgbkrk actually the build went surprisingly fast, it got all the way up to yt before breaking (added a fix for that).  I'm quite surprised since these resources aren't cheap, but I guess their internal costs are much lower.\nI will take a look at your build.  It would probably be more efficient to work together on a base image, but given how quickly it just built, having a separate dockerfile here will work too.\n. @rgbkrk  I just took a look at your docker build and some of the discussion in python-dev.\nMy own view is that it's good to separate the libraries from the image that runs the server, so that people can create their own custom servers (which seems to be popular with IPython).  Also, the issues are very different.  For libraries, the concern is minimizing image size (and possibly making sure package versions are compatible).  For the server, the concern is providing sensible defaults.\nSo I would suggest the following four builds (with dependency graph 1 -> 2, 1-> 3, 2 -> 4)\n1. IPython library\n2. IPython + SciPy library (this is just the SciPy stack since IPython is part of the SciPy 1.0 stack)\n3. IPython server\n4. IPython + SciPy server\nI will also take a look at the server setup, that is something that would be good to have in common between IPython and coLab if possible.\n. @rgbkrk I will read more of that thread and add my opinion if it's relevant.  I also agreed the reasons you and others gave for preferring pip over conda.\nCan you merge this PR if you're happy with the current state.  I just tested the automated build at https://github.com/ipython/docker-notebook and it works.  I'm interested in reading more about your experience because so far the automated build has been going very smoothly.\nBecause I had to move the Dockerfile to the base of the repo, the automated build uses the README.md at the root of this repo.\n. CSS changes look good, much better than before.  But I think someone from Jupyter should confirm that the new add-cell shortcuts are going to be consistent with Jupyter UI.\n. @rgbkrk can you merge this minor bug fix?  Everything is working fine but some of the libraries I uninstalled were actually needed (in this case by matplotlib)\n. @minrk could you review this please?\n. @Carreau The primary reason is that we want to always serve the front end from colaboratory.jupyter.org, no matter where the kernel is running.  This is because\n1. Every origin that serves the front end has to be registered in the Google Cloud Console as a valid origin for API calls from our App.\n2. The FilePicker API is even more restrictive, and only allows a single origin.\nBecause of these issues, things tend to \"break\" when the colab front end is not colaboratory.jupyter.org.\n. Hi Thomas, this may be caused by not running git submodule init and git submodule update.  MathJax JavaScript is now pulled in as a submodule.  Can you try this and let me know if you still get the error. Also sorry for the delay, I need to set up git so I get notified of all new issues.\n. Thanks for pointing this out.  We will need to add some code to rewrite all these hyperlinks, or else somehow capture the window location change action.\n. Actually all versions work now.  This was even true when we released in August IIRC, it's just that we didn't get around to changing this.\n. There is currently work being done on modifying IPython to allow for other storage backends, both realtime and non-realtime. So far it is only up to the non-realtime.  The bigger plan is to add support for other file management backends (both realtime and non-realtime) to IPython/Jupyter.  I think it would be better to focus efforts on this long term plan than on making coLaboratory more flexible.\nSee https://github.com/ipython/ipython/pull/6351 for the work so far, we are currently creating  a new PR because of technical issues with that PR's git history.  I would welcome comments and contributions to this work in progress, although it is in very early stages so far, so there will be plenty of time before the code reaches its final form.\n. see #103 \n. currently coLaboratory doesn't support widgets.  This is mainly because we were basing coLaboratory off a version of IPython before widgets were introduced.  We have some long term plans for re-syncing coLaboratory with IPython/Jupyter master, but until then we probably won't be adding support for widgets.\n. @dsblank Thanks for the comments.  The colab UI is based on Google's Material Design style, most of the design was done by @jsnydes and @kayur.\nRegarding side-effects vs return values, I believe we treat these exactly the same as IPython does, so that's probably a better discussion to have with the IPython team.\n. We are continuing to support the Chrome App, but I'm not sure whether we have plans to update to the latest version of Pandas  @MatthewTurk committed the original pandas port so he would know how much work was needed to upgrade.  Are there major differences in the new version?  One nice thing about NaCl is it is self contained and so doesn't suffer from bitrot.\n. Git is so fun.  Let me try again.\n. thanks\n. Hi @SuvroB, can you let me know which version of Chrome OS you are using, and if this problem started occurring after upgrading to a new version of Chrome OS?\n. Hi, I'm still looking for a machine to replicate this error.  I will try to have it done by the end of the week.  In the meantime, are you able to give me the output from the javascript console?\n. I think it is still possible but I don't have a Chromebook handy to give instructions.  It might require switching on some kind of developers mode.\n. Hi @SuvroB, I was unable to reproduce either error using a Chromebook with chrome version  41.0.2272.89  and platform 6680.64.0 (same as yours).\nI wonder if there is some other issue?  If your zip is \"invalid\" I wonder if it means that some security key has changed and so your system is marking the contents as invalid?\nWhen does the error occur?  Are you able to install anything else off the web store?\n. Is it only on particular document, or all documents?  And have you recently switched users, or do you have multiple users/identities logged in with Google/Chrome?\n. It is defined, and even these functions are defined (though they will not work).\nThe general framework is that colab.app.appMode is a boolean variable that is True when in app mode and False when in web (Classic) mode.  No other functions should get called when in app mode.  In this case, the \"Open Directory\" menu item is deleted when not in app mode, so this code is never reached.\n. Done.\n. I have put it in chrome.app because it is app-specific (window.navigator.appVersion isn't a Chrome specific API, but we are very unlikely to be checking browser versions except for in app mode).\n. Thanks, we'll look into this for later.\n. So far I had used a dockerfile that wasn't part of this project, and I was just committing it here, so I hadn't thought of this possibility.\n. can you add a description of this file here?\n. ",
    "MatthewTurk": "I'm pretty sure this is because it needs html5fs persistent to be available\nin JavaScript. My fork had the JS necessary. pyppapi doesn't use\ngethostname and works fine with glibc-compat; the error message is printed\nby pyppapi to notify the developer that it is replacing that function with\na stub function.\nOn May 31, 2014 11:59 AM, \"KesterTong\" notifications@github.com wrote:\n\nI have tried using Matt's build, but it has some errors. Seems like while\ninitializing, IPython is calling some functions that don't exist in PNaCl's\nglibc-compat library, causing it to crash. We've seen things like this\nbefore, e.g. in IPython/core/prompts.py. I checked that it wasn't a\nregression to that particular issue, but the fix to prompts.py is still in\nplace. So it looks like some other change in the naclports build (shift to\npyppapi library, new python libraries, or changes in how IPython is\ninitialized) is causing this error.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ipython/colaboratory/issues/3#issuecomment-44753483.\n. Should be good to go here.  The change to kernel.py will get propagated back up to NaClports as well, and we should be set for the IPython2.1 CL to go in.\n. I have this one just about done. Will be finalized in the next PR.\nOn Jun 30, 2014 8:31 PM, \"Fernando Perez\" notifications@github.com wrote:\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ipython/colaboratory/issues/19.\n. I think we had to disable it at the last minute for older chrome versions.\nIn the interim the chrome versions have migrated, so I will check on it\ntoday and update this issue.\nOn Aug 28, 2014 6:12 AM, \"Michael R. Crusoe\" notifications@github.com\nwrote:\nI see that this issue is open but @MatthewTurk\nhttps://github.com/MatthewTurk's comment implies that it is done.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/19#issuecomment-53706210.\n. Is this independent of the app permissions? And does it relate to the\ndirectory selection for mounting?\nOn Jul 4, 2014 9:58 PM, \"KesterTong\" notifications@github.com wrote:\nThe FilePicker API is used to display an \"open\" dialog box, to open files\nfrom Google Drive. This is used in both the welcome screen and the regular\nnotebook window (file > open). Currently the FilePicker API does not work\nin the Chrome App, for reasons unknown.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ipython/colaboratory/issues/40.\n. Thanks, @KesterTong .  I'm a bit surprised because it should have OpenSSL, but it's probably something inside the Socket library.  I'll dig in.\n. Looks good to me!\n. We think this is related to compiling with a newer SDK, which has different internal interfaces.  We're currently rebuilding with the chrome_35 SDK to see if that fixes it, and I'll ping here when we have a new build to test.\n. I've tested this on Linux, and it works.\n. Thanks for reporting -- this should be straightforward to fix, and I'll take a look during the next build.\n. I'm actually not sure, and not the expert.  I did get ZMQ ported to NaCl so that it can import, and in principle this could reduce some of the subclassing.  Then again, since we have a different post/recv message system, I don't know how useful that would be.\n\nFWIW, I've had outstanding CLs in naclports for a couple weeks now, which I hope to get committed as soon as I can find the tree in an open state.\n. Any reason we can't add it to the build? I'm happy to give it a try.\nOn Aug 13, 2014 6:37 PM, \"marksandler2\" notifications@github.com wrote:\n\nas far i know we need custom encoder because for whatever reason, i can't\nprovide my serialization routines for custom classes. Unlesss you have a\ngood idea how to serialize custom classes without custom encoder.\nOn Wed, Aug 13, 2014 at 4:21 PM, KesterTong notifications@github.com\nwrote:\n\nAgreed on @marksandler2 https://github.com/marksandler2's point, it\nwould be very helpful for the developers and others if bug reports are\nas\ninformative as possible, especially since non-developers may come here\nto\nreport bugs and see if their bug is already reported.\nThe error is due to json.JSONDecoder not being there in colabtools.\n@marksandler2 https://github.com/marksandler2, tracking down PNaCl\nissues can be complex. Would it be possible to use json.loads in place\nof\njson.JSONDecoder.decode in the meantime?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/90#issuecomment-52125126.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/90#issuecomment-52126359.\n. Oh!  If it's a standard part, then it probably just has to be enabled.\n Tomorrow during the hangout, let's investigate.\n\nOn Wed, Aug 13, 2014 at 6:48 PM, KesterTong notifications@github.com\nwrote:\n\n@MatthewTurk https://github.com/MatthewTurk, that would be really\ngreat. It seemed like a standard part of Python 2.7 so I'm not sure why it\nisn't there now, but there seems to be a huge number of places in the build\nprocess where a build in module might get affected.\n@marksandler2 https://github.com/marksandler2, I didn't realize you\nused a custom encoder.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/90#issuecomment-52127213.\n. That could work. I will look into the efficiency of how the http file\nsystem handles caching.\nOn Aug 16, 2014 3:42 PM, \"KesterTong\" notifications@github.com wrote:\n@MatthewTurk https://github.com/MatthewTurk, have you considered not\nusing a tar file, and just using httpfs? We could, for example have a very\nminimal tar file (with the python base distribution) and add a the mount\npoint for an httpfs to the python path, for other packages.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/91#issuecomment-52405263.\n. Hi @KesterTong, this looks great.  Any chance you could add in \"yt\" as well, for parity with the PNaCl kernel?\n. Sure.\n\npip install yt\nOn Fri, Aug 15, 2014 at 3:58 PM, KesterTong notifications@github.com\nwrote:\n\n@MatthewTurk https://github.com/MatthewTurk I'm not clear on how to\ninstall yt and its Python bindings. Can you give me the command line\ninstructions to do this, and I will add them to the Dockerfile\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/pull/92#issuecomment-52357078.\n. Hi Tony,\n\nUpdating pandas is definitely on the agenda -- I've got a changelist that\nshould be ready to go soon, but naclports recently changed the way they\naccept changes so I've been a bit behind on catching up to that.\n. ",
    "fperez": "Replaced by #24.\n. What was the final decision here? We have now a new Cloud console for Colaboratory, but I don't remember exactly what decision you'd made. Should we still keep this open?\n. Added a few more tasks, thanks!\n. I think everything listed here is now either resolved or moved into a separate issue. Closing.\n. Domain now exists along with repo being served via gh-pages. There may be more fixes to do, but we can close this issue now and tackle any specific new ones in that repo.\n. yup, thx! I'll work on this tomorrow... Gotta sleep now. Thanks!\n. Accounts created, thanks!\n. @ivanov, you were going to have a look at this one, any news?\n. @minrk, do you know what the issue is? I'm quite the newbie re. submodules, so I don't want to make any changes without understanding better what's going on...\n. Tagging this for 0.1.\n. +1\nOn Jul 14, 2014 2:27 PM, \"Brian E. Granger\" notifications@github.com\nwrote:\n\nI think that sounds good, but we can probably make it slightly informal.\nThe way we work this with IPython is that we try to have a sense of who\nneeds to look at a particular PR and then make sure those people reviews\nit. This list can evolve dynamically depending on the particular details\nof\nthe PR. But as a rough approximation I think your proposal sounds good.\nOn Mon, Jul 14, 2014 at 2:10 PM, KesterTong notifications@github.com\nwrote:\n\nNow would be a good time to establish conventions for changes to the\nrepo.\nI would propose the following procedure: every PR should be approved by\n\nan Jupyter developer, to ensure changes remain compatible with Jupyter\ncode and vision,\none of @KesterTong https://github.com/KesterTong or @MatthewTur, to\nprevent breakages of the Chrome App, and\none of @kayur https://github.com/kayur or @marksandler2\nhttps://github.com/marksandler2, to prevent breakages of the Classic\nweb app.\nIf this is excessive, we can just have anyone from the above approve\nPR's,\non the condition they get approval from one of the above people where\nneeded.\nHow does that sound? @fperez https://github.com/fperez @ellisonbg\nhttps://github.com/ellisonbg @minrk https://github.com/minrk\n@MatthewTurk https://github.com/MatthewTurk @kayur\nhttps://github.com/kayur @marksandler2 <\nhttps://github.com/marksandler2>\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/56.\n\n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/56#issuecomment-48962278.\n. I am getting broken image icons on the right part of the page:\n\n\n. And the console shows:\nLoading notebook from Google Drive. main.js:126\nCreating output outputarea.js:275\nGET https://https//lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/s128/photo.jpg net::ERR_NAME_NOT_RESOLVED dom.js:372\nKernel started:  aceb099b-d711-480a-abd5-20e5a791fc6f kernel.js:132\nStarting WebSockets: ws://127.0.0.1:8844/api/kernels/aceb099b-d711-480a-abd5-20e5a791fc6f kernel.js:157\nLoaded iframe outputarea.js:294\nUntrusted domain: http://127.0.0.1:8844 interactive_widgets.js:78\nUncaught TypeError: Cannot read property 'url' of undefined comments.js:102\n. Too much vertical whitespace at the top and between cells for my taste. We've put a ton of work into tightening vertical space as much as possible in the default UI, since that's the most precious resource on modern widescreen laptops. To me, this feels like it could be tightened quite a bit:\n\nFor example, the dead space above the first cell feels unnecessary, as well as too much in-between cells.\nHere's a side-by-side comparison of the use of vertical space in the default UI vs the new one (these notebooks had the start of the editing area perfectly aligned):\n\nIn the other direction, there seems to be too little vertical space between lines in code cells. I get lines running into the one above, see here:\n\nThe 'l' on the 2nd line is touching the p from the first. For reference, this is what that looks like in the default UI:\n\n. But I like where this is going, thanks for all the work, guys!\n. BTW, I'm also seeing some of these in the console:\n[tornado.access] WARNING | 404 GET /ipython/components/jquery/jquery.min.map (127.0.0.1) 0.97ms referer=http://127.0.0.1:8844/notebook\n. Still too much vertical space for my taste, but it's going in the right direction.\nIf the issue preventing a tighter vertical layout is the shadows, I'd be in favor of letting go of the shadows and finding an alternate approach for highlighting (or much thinner shadows). I personally find the shadows kind of distracting, but that's OK. The issue that is really important is vertical space. It's the single most precious resource on the page while working on smaller screens, so we need to be extra aggressive in protecting it.\n. I also noticed a new gap at the top of the page which wasn't there before. that adds vertical lost space, which we're trying to regain...\n\nThe space pointed to by the arrows wasn't there before...\n. This is better. Now the gap between two notebooks starting at the same point isn't much anymore, and it doesn't grow too much either:\n\nthanks for the quick iteration!\n. I also think the original input numbers should be displayed, like we do in the default UI: when reading an existing notebook you haven't run, they are the only clue as to whether the execution was in order or not. That's a crucial piece of information to be able to interpret correctly the content of a notebook, so we shouldn't remove it from the display.\n. No, input and output are always the same number. But right now, when opening an existing notebook, no numbers are shown at all. That's what I'd like to fix.\n. I like how this one shows what cells haven't been run, which in the default UI isn't shown (and hence is confusing). So in that regard, I like this better. But we could keep the numbers and show them in lighter color (perhaps even hiding altogether the output icon) for unexecuted cells, replacing them with black text once executed.\nThat would convey the information about what's been run in the current session, while also showing you how things got run on a previous one.\n. On a different topic... I find the gray bg a bit too dark, it reduces contrast with black text... You're using #ED (237) , while on IPython we use #F7 (247). Just a thought.\n. Re. prompts: honestly I think the multi-kernel model is just crazy :)\nIt's simply too hard to understand and use in practice. I think in the long run, we'll really want a single kernel associated with one notebook, and some mechanism to control where that kernel runs and who can make it execute code.\nBut I can tell you, people already get confused enough because of the fact that they can run things in different orders (in time) than what they see on their screen. If we also have to start explaining to them that one document not only bends time but it also merges multiple timelines, most people's brains will just go poof! :)\n. I agree @KesterTong. Just brainstorming on that for now, we can tackle it separately.\n. Nice, much better with f7. Thanks @kayur!\n. I'm not qualified to review the JS code right now, but from the UI perspective, I think this is already solid progress. I'm sure we'll keep iterating many more cycles, but this is very good.\nTwo blockers right now (in addition to JS code review):\n- rebase needed\n- the broken images issue is still there for me. It's the google user icon/photo that's showing up as a green 'broken image' icon.\n. Weird... Ok, no problem on the images, we can look into that later/elsewhere.\nRegarding code review, we should give at least @ellisonbg, @ivanov, @Carreau or anyone else from non-Google a chance to look over the JS as well. It's important that the only review we get isn't internal to Google, so we build a common understanding of the code across teams, conventions, etc.\nI wish I was qualified to review the JS, but sadly my JS-fu is near-zero, so I can't make any substantive comments there.\nThanks @marksandler2 for reviewing! And that's certainly very useful to know, it's just that we need more cross-pollination of our understanding of that code across parts of the team as we move forward.\n. BTW, I'm not sure what @KesterTong just did there... There shouldn't be a merge commit in the history of this branch, only a clean rebase...\n. Commit adbf8d3 should not be here before merging.\n. Yup.\n. And push --force WHILE MAKING SURE you're on the right branch.\n. As a more general policy, PRs should be issued from personal branches in your user forks, not from the main repo. The main repo should basically be treated, for all intents and purposes, as read-only.\nIt is written to ONLY when making a merge of a reviewed PR, and NEVER elsewhere.\n. Mmh, no, this branch can't be merged yet. There's that weird merge commit in there.\n. I have to run now, unfortunately. You need is a rebase without a merge, so that the branch can be cleanly merged into master, but its own DAG does not show a merge with master.\n. adbf8d3 is a merge commit that shouldn't be there.\n. You can see the DAG structure at the command line with git log --oneline --topo-order --graph. I have that aliased to git slog.\n. When on the uiupdate branch, the log shouldn't show joins that track back to master.\n. OK, gotta run now, sorry. Thanks for all the great work!\n. Ah, OK. You did push the fix.\n. OK, I misunderstood you, sorry about that.\n. Yes, it's now gone upstream, so we're all good on that front, just pending final review of the JS.\nG'nite!\n. ",
    "rgbkrk": "This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. Yeah, we can link it whenever. We also have https://registry.hub.docker.com/repos/jupyter/ if you like. Kester, what's your username on the Docker Hub?\n. @KesterTong Awesome, added you.\n. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. The Docker hub will also take any README.md that sits in the directory this Dockerfile is at to populate the information page.\n. > Is there any particular setup you recommend, e.g. using Docker's automated build system?\nThe Docker hub will clone the entire repository then work from the directory this Dockerfile is specified in:\n\nIf using ADD, it will add the entire directory to the Docker image itself.\nADD . /colaboratory\n. > I'm interested to see how long building this ~1GB image takes.\nForever. Hopefully soon I'll make a post about how to create a completely awkward workflow with Docker + the scipy stack in the middle of contest, win the contest, then proceed to be disqualified for turning it in late.\nOnce we have base images we can pull (and are not iterating on them), others can benefit from just having to pull the images down.\nHow well will this work if used on a remote server?\n. The current base image lives at https://github.com/ipython/docker-notebook. More than happy to collab on that one. I made some choices there that others may not agree with (notebooks in /notebooks, SSL created by default, password required). I'm willing to dial that back though.\nI've been looking forward to working on that image and derivative images after starting a lively thread on the IPython-dev mailing list and actually seeing what the workflow would be like (especially under pressure).\n. @KesterTong Completely agree with the dependency graph you have outlined. That's where my current vote is, as is using plain pip over conda (also a discussion point on the mailing list).\n. Gladly, I'm really happy with this. I'll set up the automated build for jupyter/colaboratory too.\n. Ah, yeah. Those make sense.\n. Closing as inactive.\n. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. We can hear you over here @dsblank. :wink:\n. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. Sometimes GitHub has weird bugs from its email handling. @MatthewTurk's message says:\n\nUpdating pandas is definitely on the agenda -- I've got a changelist that should be ready to go soon, but naclports recently changed the way they accept changes so I've been a bit behind on catching up to that.\n. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. At some point, I'll probably hack on a RethinkDB based store which you could run internally. No promises though, just something I've been thinking on. If there are folks willing to fund such a thing, @captainsafia and others would love to collaborate on this.\n. Also, if you just want storage (not the realtime aspect), you can also use a content store like these:\n- Postgres contents - awesome, used in production at Quantopian\n- OpenStack Swift store - note: not up to date, welcome to new maintainers\n. Thanks for bringing that up! My head was buried in the sand, thinking of what it would be like to run something on-site for a government agency or lab that didn't want to reach out to the wider web.\n. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. This version of colaboratory is no longer supported, please switch to https://colab.research.google.com.. Google colab is a (mostly) closed source project, though they're open sourcing more and more here: https://github.com/googlecolab\n\n/cc @craigcitro . Why not ADD the colaboratory stuff directly? Is this to workaround submodules?\n. I'd link jupyter-drive directly in the second sentence and delete the last sentence:\nmarkdown\nWe will consider minor pull requests, but most of the CoLaboratory team's focus is\nnow on [integration of Google Drive with IPython/Jupyter](https://github.com/jupyter/jupyter-drive).\nIf you want to add some pizzazz, wrap it all in :warning: :warning: :warning: (:warning:).\n. ",
    "ivanov": "@kayur @ellisonbg @KesterTong @fperez @minrk @takluyver @MatthewTurk @marksandler-google \nreally makes me wish there was an @all on github\n. ",
    "kayur": "Just added some tasks too! \n. undoing close. \n. Remove packages that might not work because we don't have all the javascript files linked. (e.g., nvd3, interactive_tables). \n. @KesterTong Can you check to see if the chrome app works. \n. @minrk Can you review this? \n. Didn't realize he was on vacation. Maybe someone else could take a look... @ivanov or @ellisonbg or @fperez \n. Oh, that font problem looks bad. Good catch. \nYeah the top is a bit much. I'll fit that. \nBetween cells we need space, for a couple of reasons: \n- we have add cell actions there\n- we also use a specific design language (quantum). trying to stick to is important for UX reasons, It calls for consistent 8px (or in some cases 4px) spacing.\nThat being said. I'll see what we can do. :)\n. Changed to 8px. We really can't go smaller than that. Personally, I think this is a small compromise to the UX. But I understand the small screen need. \nThat gap was there before. It's part of the doc feel. When scrolled it doesn't exist.\n. Thanks for staying online and giving feedback. This is looking more and more like IPython, but with a docs feel. :) \n. The output space is currently used collaborative information. I'm not sure it's a good idea to change this right now. Is there a case where the input and output numbers could be different?\n. Oh. I see what you mean. This is a VERY good point. :)\nBut I'm afraid that might be a bigger change because of the realtime model. We'll have to put real thought into it. That's why we didn't have it in the original. Since people have different kernels it's hard to display original input numbers, because you don't know which kernel we are referring to. \n. Yeah i like f7 better. Sending in a commit. \n. @fperez That's probably a good idea. It would be awesome to get some new eyes on the code. \n@ellisonbg, @ivanov, @Carreau: can one of you find time to do this tomorrow? @MatthewTurk has a public release on Friday that we need to sync with the release of the Chrome App. It's very important that when we release the Chrome App we don't suddenly make huge changes the UI. And it's important that the UI we release be closer to IPython, which this UI is. In addition this change introduces a number of bug fixes that should be included.\n. Fixing issues. The jump is caused the the toolbar taking up space on the left. May only make the toolbar appear on hover in the future. \n. @Carreau: can you help me reproduce the bug with the images. I'm not getting it on my end, so I'd like to understand how it happens. Otherwise, I'm working a blind. That being said, I have one blind fix that might work I'll try, but I can't really be sure. \n. @fperez @KesterTong @Carreau  I found the image generation error. It's been around for a while. It's strange that it doesn't affect everyone. \n@KesterTong It's in presence.js:46. Removing the extras http is a simple fix on my end, but blame shows that you checked this in for the Chrome App, so I don't want to break anything. Can you make this change so that it doesn't break anything. \n. @jdfreder Thanks for the review! I just sent in the changes. If there isn't anything else, @fperez can you merge the request? Also, will you be around later for the push?\n. Close relevant bugs after you push to the new Chrome App.\n. @KesterTong The file picker no longer works. \n. @KesterTong I'm not sure. I think it might also be File->Open on the main page. Also, this might not only be a Chrome App bug. I just noticed it in the Chrome App. \n. It happens on both the welcome screen and from the notebook.\n. This seems to work on the Pixel. @marksandler2 Can you confirm? \n@jsnydes have you tried it on your HP?\n. @probablyrgbkrk: can you be more specific? does this happen when you create a new notebook or in the middle of your work?\n@KesterTong this seems different than the 500 error we are familiar with. Do you have any idea why this might be happening?\n. @probablyrgbkrk were you able to test on smaller notebooks?\n. @Matthalp that doesn't sound good. Do you have an image? Does it work with non-beta? Do you have errors in the Javascript console?\n. @ellisonbg We never got around to this yesterday. Do you have any questions, comments? \n. I'm not sure where the semicolon should go. :)\n. @KesterTong showed me. Good catch. \n. ",
    "mr-c": "Is this live?\n. I see that this issue is open but @MatthewTurk's comment implies that it is done. \n. ",
    "Carreau": "What do you mean by  \"live\" ?\n. Thanks ! \n. > @minrk Can you review this?\nHe is in holiday for a few weeks, he might not respond quickly.\n. > Regarding code review, we should give at least @ellisonbg, @ivanov, @Carreau or anyone else from non-Google a chance to look over the JS as well.\n@jdfreder Might want to have a look. I'll try in the next few hours, but I'm catching a plane for Ireland, and then I have no computer/no internet for at least a week. From the screenshot I like the revamped UI. \n. Widget don't have same size than code area. \n\n. missing css: \nGET http://127.0.0.1:8844/extern/polymer/paper-shadow/paper-shadow.css\nnotebook.js line 114 <link rel=\"stylesheet\" href=\"/extern/polymer/paper-shadow/paper-shadow.css\">\nAvatar not shown, double \"https\" in url:\n<img class=\"collaborator collaborator-img\" src=\"https:https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/s128/photo.jpg\" title=\"Matthias Bussonnier (Me)\" alt=\"Matthias Bussonnier\" style=\"background-color: rgb(31, 161, 93);\">\nIs the following Log message normal ?\n```\n\n\n\nexecuted on load VM1218:1\n```\n. Widget area width  \"jump\" on cell selection deselection : \n\n\n. I can't do math anymore, is this normal ? \n. Prompt and text not aligned. \n\n. Happy you found out.\n\n\n\nI'm going to the airport in a few minutes. Good luck for Friday release. Will be back in a week.\nEnvoy\u00e9 de mon iPhone\n\nLe 7 ao\u00fbt 2014 \u00e0 18:22, Kayur Patel notifications@github.com a \u00e9crit :\n@fperez @KesterTong @Carreau I found the image generation error. It's been around for a while. It's strange that it doesn't affect everyone.\n@KesterTong It's in presence.js:46. Removing the extra http is a simple fix on my end, but blame shows that you checked this in for the Chrome App, so I don't want to break anything. Can you make this change so that it doesn't break anything.\n\u2014\nReply to this email directly or view it on GitHub.\n. You didn't used %matplotlib inline.\n\nEnvoy\u00e9 de mon iPhone\n\nLe 9 ao\u00fbt 2014 \u00e0 18:50, Matthalp notifications@github.com a \u00e9crit :\nI have this problem on both the beta and non-beta.\nHere is a link to the doc on my Google Drive (read-only): https://drive.google.com/file/d/0B1c2mn7m1jx3SE5MamQ0dkRKOW8/edit?usp=sharing\nAnd screenshot of the browser with the JavaScript console (Googling it brings up a IPython issue on GitHub that suggests it's not relevant to this issue but could be wrong, link: ipython/ipython#4145):\n\u2014\nReply to this email directly or view it on GitHub.\n. mathjax cdn changed url, we shoudl probably update it. \n. @fperez did a lot of testin the other day, he might want to have a look, as well as @ellisonbg. \nI'm on the move so will test later.\n. except a few detail, python -m colaboratory works file for me. Why not extend that ? \n. +1, Already said it in a comment somewhere, probably lost now. \n. Don't worry you did not offend anyone, I also prefer some part of colaboratory UI. Hope to be able to slowly improve IPython one. \n. Colaboratory itself will probably not see new feature or bug fixes.\n\nWe are slowly moving the functionality to https://github.com/jupyter/jupyter-drive to have real integration into Jupyter/IPython. The real time is not there yet though.\n. Wording seem fine. No need to close you can just rebase and (force) push.\n. Thanks !\n. +1; I didn't had the chance to try the new version yet, but heard only good things !\nShould we also do a quick post on the jupyter blog, or wait the final release ?. Thanks !. ",
    "jsnydes": "see http://ayende.com/blog/4746/the-problem-with-git-submodules\nOn Tue, Jul 1, 2014 at 6:53 PM, Fernando Perez notifications@github.com\nwrote:\n\nTagging this for 0.1.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ipython/colaboratory/issues/28#issuecomment-47718690.\n. \n",
    "minrk": "I'll try to clean it i\n. I'll try to clean it up tomorrow. I don't know why others wouldn't be able to clone it when I can, but probably something like removing and re-adding the submodule should do the trick.\n. Remove and re-add fixed it. It's easy to get submodules messed up during rebase, if the rebased commits change the submodule.\n. Sorry, I should make it clearer: There are zero steps to getting the webapp running beyond clone --recursive. bundle_static is just for building the pure HTML form, which is used by the Chrome app and will be on colaboratory.jupyter.org\n. You can add it to PYTHONPATH in the parent process (#47), but maybe it makes more sense to put those tools in colaboratory/, which would make them importable without modifying the path at all, because colaboratory is already an importable package.\n. The patch to IPython hasn't been merged, I think I can merge and backport it tonight after tutorials.\n. Do you plan to put many things in /modules? This seems an odd behavior. If you put colabtools in the top-level dir, you wouldn't need to touch the path.\n. Sounds good. Then later, colaboratory and colabtools can be proper installable Python packages.\n. What version of IPython do you have installed?\n. That sounds good. The convention on GitHub is to use a CONTRIBUTING.md for contribution policy.\n. :+1:\n. Thanks for this, I think this makes it clearer.\n. I added 8840-8850 to the Jupyter console, just need @KesterTong to add it to the Google one.\n. Pinging @rgbkrk about docker things\n. Given the rate of update, setting the actual version definitely makes sense. I think 38 was the minimum version, last I checked. @KesterTong?\n. :+1: \n. ",
    "dloss": "Same error here, both on IPython 2.0.0 and 2.1.0, installed via Anaconda.\n. Type error expanded:\n\n. ",
    "jasonm": "Hi @minrk, I have 2.1.0 installed:\n```\n(master) ~/dev/colaboratory $ ipython --version\n2.1.0\n(master) ~/dev/colaboratory $ which ipython\n/usr/local/bin/ipython\n(master) ~/dev/colaboratory $ python --version\nPython 2.7.5\n(master) ~/dev/colaboratory $ which python\n/usr/local/bin/python\n(master) ~/dev/colaboratory $ uname -a\nDarwin Jasons-MacBook-Pro.local 12.5.0 Darwin Kernel Version 12.5.0: Sun Sep 29 13:33:47 PDT 2013; root:xnu-2050.48.12~1/RELEASE_X86_64 x86_64\n```\n. @marksandler-google \n\"TypeError: Cannot read property 'modal' of undefined\n    at Object.IPython.mathjaxutils.init (http://127.0.0.1:8888/ipython/notebook/js/mathjaxutils.js:78:27)\n    at http://127.0.0.1:8888/colab/js/main.js:249:28\n    at Object.callbackEntry.onFulfilled (http://127.0.0.1:8888/closure/promise/promise.js:596:34)\n    at goog.Promise.executeCallback_ (http://127.0.0.1:8888/closure/promise/promise.js:809:19)\n    at goog.Promise.executeCallbacks_ (http://127.0.0.1:8888/closure/promise/promise.js:788:12)\n    at goog.async.run.processWorkQueue (http://127.0.0.1:8888/closure/async/run.js:80:21)\n    at http://127.0.0.1:8888/closure/async/nexttick.js:94:11\"\n. So it's stemming from https://github.com/ipython/ipython/blob/master/IPython/html/static/notebook/js/mathjaxutils.js#L78\n. Related, in the python -m colaboratory log output:\n[tornado.access] WARNING | 404 GET /extern/mathjax/MathJax.js?config=TeX-AMS_HTML-full&delayStartupUntil=configured (127.0.0.1) 0.32ms referer=http://127.0.0.1:8888/notebook\n. Cool.  FWIW, when I run ipython notebook it pulls MathJax from a CDN:\n2014-07-10 13:18:15.351 [NotebookApp] Using MathJax from CDN: http://cdn.mathjax.org/mathjax/latest/MathJax.js\nBTW I'm super excited about this release.  Really awesome work!\n. Thanks @KesterTong.  I ran python bundle_static.py and it correctly fetches MathJax.js.\nI think there are a few more static dependencies.  I had to curl the following down from similar paths to get it to load without 404s:\n$ find build/extern/mathjax\nbuild/extern/mathjax\nbuild/extern/mathjax/config\nbuild/extern/mathjax/config/TeX-AMS_HTML-full.js\nbuild/extern/mathjax/extensions\nbuild/extern/mathjax/extensions/MathMenu.js\nbuild/extern/mathjax/extensions/MathZoom.js\nbuild/extern/mathjax/jax\nbuild/extern/mathjax/jax/output\nbuild/extern/mathjax/jax/output/HTML-CSS\nbuild/extern/mathjax/jax/output/HTML-CSS/fonts\nbuild/extern/mathjax/jax/output/HTML-CSS/fonts/STIX\nbuild/extern/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata.js\nSeparately, should  python bundle_static.py get added to \"Installing CoLaboratory Classic Frontend for Local IPython Kernels\" section of the README?  To load the build/ vs build_chrome/ dir.\n. ",
    "standarddeviant": "EDIT: I was unclear what was the chrome app vs. not before.  I was definitely using the classic web app when I experienced this issue before.\nI beleive it was the Chrome app.  I'm actually unable to reproduce it now\nas the Chrome app went away for my credentials and I can't get it back at\nthe moment ( oauth2 error ).\nOn Jul 11, 2014 6:34 PM, \"KesterTong\" notifications@github.com wrote:\n\nThanks for making this issue, I'm looking into it. Did this happen when\nusing the Classic web app, or the Chrome App?\nI think that the problem is that we are not using the IPython notebook\nbinary, but a different entry point (colaboratory/colaboratory.py) which\ndoesn't define the variables that bokeh expects (and needs to define the\ndisplay hooks for IPython).\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/55#issuecomment-48790621.\n. \n",
    "mozgit": "Had this problem too. \nReinstalled ipython notebook as following:\npip uninstall ipython\npip install ipython\npip install \"ipython[notebook]\" --upgrade\n. ",
    "ellisonbg": "I think that sounds good, but we can probably make it slightly informal.\nThe way we work this with IPython is that we try to have a sense of who\nneeds to look at a particular PR and then make sure those people reviews\nit. This list can evolve dynamically depending on the particular details of\nthe PR. But as a rough approximation I think your proposal sounds good.\nOn Mon, Jul 14, 2014 at 2:10 PM, KesterTong notifications@github.com\nwrote:\n\nNow would be a good time to establish conventions for changes to the repo.\nI would propose the following procedure: every PR should be approved by\n-\nan Jupyter developer, to ensure changes remain compatible with Jupyter\n   code and vision,\n   -\none of @KesterTong https://github.com/KesterTong or @MatthewTur, to\n   prevent breakages of the Chrome App, and\n   -\none of @kayur https://github.com/kayur or @marksandler2\n   https://github.com/marksandler2, to prevent breakages of the Classic\n   web app.\nIf this is excessive, we can just have anyone from the above approve PR's,\non the condition they get approval from one of the above people where\nneeded.\nHow does that sound? @fperez https://github.com/fperez @ellisonbg\nhttps://github.com/ellisonbg @minrk https://github.com/minrk\n@MatthewTurk https://github.com/MatthewTurk @kayur\nhttps://github.com/kayur @marksandler2 https://github.com/marksandler2\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/issues/56.\n\n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n. We can talk about this tomorrow and Tuesday when I visit.\n. I will have a look at this today.\nOn Sat, Aug 23, 2014 at 6:05 AM, Matthias Bussonnier \nnotifications@github.com wrote:\n\n@fperez https://github.com/fperez did a lot of testin the other day, he\nmight want to have a look, as well as @ellisonbg\nhttps://github.com/ellisonbg.\nI'm on the move so will test later.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jupyter/colaboratory/pull/93#issuecomment-53148671.\n\n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n. ",
    "sometext": "Thanks @MatthewTurk . Let me know once you're set and I'll test.\n. ",
    "rudimk": "Ah, I poked around the code, and I found it. Just gotta update the Client ID in /colaboratory/resources/colab/js/install.js.\nThis looks epic, btw. I suppose we're free to deploy this on our personal and public clouds, on top of Docker?\n. I haven't had a chance to play with it yet. I was simply planning to change the Google Client ID in /colaboratory/resources/colab/js/install.js, and update it with my own credentials, from my account. I guess I'll play with it tonight. \nI'll share my Dockerfile as soon as it's ready.\n. Hey!\nI was planning to go with the second option, actually. A web dashboard where you can start a container, which runs an IPython kernel, along with colab. It didn't work the last time - I think it's because I was probably changing keys in the wrong file altogether. \nI was wondering - when one starts a colab instance from the command line, is it possible to provide a URL to an IPython kernel in the command itself? Wouldn't want users to have to enter that themselves, in the notebook.\n. Ah, I see. Yeah, two keys, one for the main app and one for the Chrome app. \nAs far as the IPython kernel URL - no, that would change per user. You see, running that inside a container, or running multiple kernels, means multiple ports. And since this is a public app, I'm not letting users anywhere near ports at all - in the last iteration, every notebook server had a subdomain assigned to it, no ports were displayed to the user anywhere. Planning the same thing for this, so I'm not sure harcoding it would work. \n. It could work, except that again, can't exactly modify the getDefaultKernelUrl function every time a user starts a container. I guess one can't get around the fact that a user has to enter the kernel URL, so I might as well work with it. One way is where a user first fires up a kernel, which has its own URL(some sort of subdomain), and then fires up colab, and feeds in the kernel URL there. That could work.\nPS - \"Fires up...\" essentially means, the user navigates to my web app, points and clicks to start a kernel, and then takes the subdomain I generated for the kernel, and feeds it to colab, which is running on another container s/he starts.\n. I could do that, yes. Let me work on that and get back. Should the issue be closed?\n. ",
    "hedata": "hi pulled your image from \nsudo docker pull kestert/colaboratory-test\nstarted it \nsudo docker run -d -p 10000:8844 -t kestert/colaboratory-test\nnavigated on my site (i know highly insecure since it was in the internet :-) but just for a min)\nhttp://mydomain.com:10000/welcome\nand when i wanted to install the drive app i got an error : Error: origin_mismatch\nfrom google .. any ideas?\n. probably gonna take option 1 .. thx :-)\nsince i already got you here.. lets say i like having my notebooks not in google drive .. how would you go about integrating another storage mechanism .. lets say mongodb gridfs\n. ",
    "bzz": "@KesterTong thanks for listing workarounds. Are there any updates on way to host Collaboratory on custom domain name?\nOr is there a way to make option 2 from your suggestion work for all users inside single organization?\n. ",
    "jdfreder": "Ok, I made a pass over this.  I'm not familiar with Google's goog API, so my review glosses over it's usage.  For the most part, everything looks good, I left a couple small comments inline.\n. Ah, got it.  That's the library you told me about in person, at SciPy.\n. Looks great guys! Thanks!\n. I'm not suggesting you change this here, but for future reference, if you find yourself doing this a lot, you may want to use this IPython less file: https://github.com/ipython/ipython/blob/master/IPython/html/static/base/less/flexbox.less.  Of course there are a few less specific things in there that you have to expand if you don't want to use less.  We use it to abstract the flexible box model and multi-browser support for it.\n. This should be opt_height !== undefined\n. Semicolon missing at the end of handler.listenWithScope(...)\n. ... but it's an insignificant semicolon :wink: \n. !==\n. ",
    "dominichosler": "I think this is a duplicate of issue #102 which has already had activity on it.. ",
    "andmalc": "Runs OK on my Samsung Series 3 ARM Chromebook\n. ",
    "probablyrgbkrk": "@kayur Brand new notebook. Are there any other diagnostics I can get for you?\nThis is a fairly large notebook (>10 MB) by the way.\n. Certainly able to create a brand new notebook, just tried a smaller notebook and it was just fine.\nThis issue could probably be re-named to \"Handle and display warning about large notebooks\". I'll do that now.\n. ",
    "Matthalp": "I have this problem on both the beta and non-beta.\nHere is a link to the doc on my Google Drive (read-only): https://drive.google.com/file/d/0B1c2mn7m1jx3SE5MamQ0dkRKOW8/edit?usp=sharing\nAnd screenshot of the browser with the JavaScript console (Googling it brings up a IPython issue on GitHub that suggests it's not relevant to this issue but could be wrong, link: https://github.com/ipython/ipython/issues/4145):\n\n. This fixed the problem for me. @kayur @Carreau Thank you!\n. ",
    "roger-": "What's the syntax for LaTeX formatting BTW? Is it $e^x$ or $$e^x$$ (neither works as per this bug).\n. ",
    "jirkadanek": "I tested MathJax in the Web Store version 10 and I could not make it work. What I wrote was displayed verbatim. I tried opening an existing notebook with math in it and also writing my own, both $math$ and $$math$$.\n. ",
    "dhermes": "@KesterTong is there a tracking bug for \"figuring out the best process for a regular update of the Chrome App from the freshest version on github\"? (I looked but couldn't find one.)\nIf no, do you have a release process / schedule? Is there a way to tell when bug fixes like this one are live? (I am working on potentially using this for a numerics course and wanted to print some pretty LaTeX output from sympy.)\n. ",
    "tfayyaz": "Thanks for the quick reply. Will test again once updated. Thanks!\n. ",
    "takluyver": "This is in the whatever we're calling the one you launch by running python -m colaboratory, i.e. without the PNacl kernel.\n. ",
    "skddc": "Google Drive and Dropbox are still in experimental stage, but we'll be glad to support any integration efforts and improve our implementation in the process. If this finds open ears, just ping us with any questions whatsoever!\n. Yes, real-time data transfers should be handled by WebRTC. And yes, I think although it's perfectly feasible in theory, at the moment we don't support real-time collab use cases very well, because you'd have to conceptualize and implement these mechanisms from scractch yourself as an app developer.\n. ",
    "almereyda": "Well, the real-time synchronization part could maybe be handled by some socket.io'ish, or WebRTC layer?\nFurther on, ChronoSync (paper), implemented in ChronoChat-js could be one of the many approaches leading to future developments. Like combining different layers for different tasks : rS for data retention and and interactive layer for collaboration.\n@skddc Does your statement still apply that rS is just not designed for real-time?\n. I see. Until rS couldn't offer a reference implementation of how it would go together with real-time models (i.e. Operational Transformation or Differential Synchronization ?), there's no chance to use it as a drop-in replacement for Google Drives realtime capabilities.\nClose at will. Or we rename the issue like Laverna to something like Sync to non-commercial storage and leave it open.\n. ",
    "dsblank": "Didn't mean to offend anyone :) Perhaps both of these UI's are done by the same people... but one has to admit that the colaboratory UI looks very professional---as opposed to just professional :)\n. ",
    "psychemedia": "Mostly minor improvements and bug fixes for the sorts of operations I imagine Chrome App users are likely to use. I wonder, though, as simpler syntax alternatives appear (eg .where() for filtering dataframes) or additions are made to the remote data access libraries, these would be of benefit to Chrome App users?\n. ",
    "gdw2": "I had to add the following options to my notebook:\n--NotebookApp.token='' --NotebookApp.disable_check_xsrf=True --NotebookApp.allow_origin=\"*\". ",
    "ruffsl": "@gdw2 , just tried your added arguments and got a little further, but I'm still not able to execute cells.\nThis appears in my jupyter session output when I attempt to connect:\n[W 21:50:36.336 NotebookApp] Sessions API changed, see updated swagger docs\n[I 21:50:36.372 NotebookApp] Kernel started: 1779e3dc-ff57-445b-8731-43b49ed4766e\n[W 21:50:36.415 NotebookApp] 404 GET /api/kernels/1779e3dc-ff57-445b-8731-43b49ed4766e/shell (127.0.0.1) 37.24ms referer=None \nAgain + --debug\n[W 21:59:13.183 NotebookApp] Sessions API changed, see updated swagger docs\n[D 21:59:13.184 NotebookApp] No kernel specified, using default kernel\n[D 21:59:13.208 NotebookApp] Found kernel python2 in /usr/local/share/jupyter/kernels\n[D 21:59:13.211 NotebookApp] Starting kernel: [u'/usr/bin/python', u'-m', u'ipykernel_launcher', u'-f', u'/root/.local/share/jupyter/runtime/kernel-d8781267-9890-4424-ae14-e35f18b40116.json']\n[D 21:59:13.215 NotebookApp] Connecting to: tcp://127.0.0.1:50572\n[D 21:59:13.216 NotebookApp] Connecting to: tcp://127.0.0.1:54689\n[I 21:59:13.217 NotebookApp] Kernel started: d8781267-9890-4424-ae14-e35f18b40116\n[D 21:59:13.217 NotebookApp] Kernel args: {'kernel_name': None, 'cwd': u'/'}\n[D 21:59:13.218 NotebookApp] 201 POST /api/sessions (127.0.0.1) 36.05ms\n[D 21:59:13.224 NotebookApp] Using contents: services/contents\n[D 21:59:13.256 NotebookApp] Path base/images/favicon.ico served from /usr/local/lib/python2.7/dist-packages/notebook/static/base/images/favicon.ico\n[D 21:59:13.257 NotebookApp] Path components/jquery-ui/themes/smoothness/jquery-ui.min.css served from /usr/local/lib/python2.7/dist-packages/notebook/static/components/jquery-ui/themes/smoothness/jquery-ui.min.css\n[D 21:59:13.257 NotebookApp] Path components/jquery-typeahead/dist/jquery.typeahead.min.css served from /usr/local/lib/python2.7/dist-packages/notebook/static/components/jquery-typeahead/dist/jquery.typeahead.min.css\n[D 21:59:13.257 NotebookApp] Path style/style.min.css served from /usr/local/lib/python2.7/dist-packages/notebook/static/style/style.min.css\n[D 21:59:13.258 NotebookApp] Path components/es6-promise/promise.min.js served from /usr/local/lib/python2.7/dist-packages/notebook/static/components/es6-promise/promise.min.js\n[D 21:59:13.258 NotebookApp] Path components/preact/index.js served from /usr/local/lib/python2.7/dist-packages/notebook/static/components/preact/index.js\n[D 21:59:13.259 NotebookApp] Path components/proptypes/index.js served from /usr/local/lib/python2.7/dist-packages/notebook/static/components/proptypes/index.js\n[D 21:59:13.259 NotebookApp] Path components/preact-compat/index.js served from /usr/local/lib/python2.7/dist-packages/notebook/static/components/preact-compat/index.js\n[D 21:59:13.259 NotebookApp] Path components/requirejs/require.js served from /usr/local/lib/python2.7/dist-packages/notebook/static/components/requirejs/require.js\n[D 21:59:13.260 NotebookApp] Path base/images/logo.png served from /usr/local/lib/python2.7/dist-packages/notebook/static/base/images/logo.png\n[W 21:59:13.260 NotebookApp] 404 GET /api/kernels/d8781267-9890-4424-ae14-e35f18b40116/shell (127.0.0.1) 37.06ms referer=None. ",
    "ca9": "Unhelpful comment but facing the same issue.. ",
    "SuvroB": "Hi, thanks for your quick response. The Chrome OS version I am using is 41.0.2272.89 and the platform is 6680.64.0. Not sure if there had been a version update recently but I remember there was some update a few days ago. \nIt also says your device is up to date.\nThanks\nSuvro\n. Hi Kester, - any suggestion ?\nThanks\nSuvro\n. Hi, its an installed drive application and does not run on the browser. Will I be still able to generate the log from the javascript console ? Or are there other ways to generate the application log? I am not aware of it. Thanks.\n. I uninstalled it & tried to install it back and it gives an error \"Package is invalid: Could not unzip extension\". Attaching the JavaScript console message.\nXHR finished loading: POST \"https://chrome.google.com/webstore/ajax/eventlog?hl=en-US&gl=US&pv=20141016\u00e2\u20ac\u00a6%2Caph%2Cigb%2Cpot%2Cgrt%2Crma%2Cshr%2Chls%2Crer%2Cpet&_reqid=1446368&rt=j\".webstore.js:382 tt.sendwebstore.js:425 g.Anwebstore.js:412 Dvwebstore.js:411 yvwebstore.js:408 vv.sendwebstore.js:398 Qu.sendwebstore.js:469 fpwebstore.js:313 dpwebstore.js:313 (anonymous function)webstore.js:246 Sjwebstore.js:244 g.Gwebstore.js:261 g.Nswebstore.js:378 c\nwebstore.js:382 XHR finished loading: POST \"https://chrome.google.com/webstore/ajax/eventlog?hl=en-US&gl=US&pv=20141016\u00e2\u20ac\u00a6%2Caph%2Cigb%2Cpot%2Cgrt%2Crma%2Cshr%2Chls%2Crer%2Cpet&_reqid=1546368&rt=j\".webstore.js:382 tt.sendwebstore.js:425 g.Anwebstore.js:412 Dvwebstore.js:411 yvwebstore.js:408 vv.sendwebstore.js:398 Qu.sendwebstore.js:469 fpwebstore.js:313 dpwebstore.js:313 (anonymous function)webstore.js:246 Sjwebstore.js:244 g.Gwebstore.js:261 g.Nswebstore.js:378 c\nwebstore.js:382 XHR finished loading: POST \"https://chrome.google.com/webstore/ajax/eventlog?hl=en-US&gl=US&pv=20141016\u00e2\u20ac\u00a6%2Caph%2Cigb%2Cpot%2Cgrt%2Crma%2Cshr%2Chls%2Crer%2Cpet&_reqid=1646368&rt=j\".webstore.js:382 tt.sendwebstore.js:425 g.Anwebstore.js:412 Dvwebstore.js:411 yvwebstore.js:408 vv.sendwebstore.js:398 Qu.sendwebstore.js:469 fpwebstore.js:313 dpwebstore.js:313 (anonymous function)webstore.js:246 Sjwebstore.js:244 g.Gwebstore.js:261 g.Nswebstore.js:378 c\nwebstore.js:382 XHR finished loading: POST \"https://chrome.google.com/webstore/ajax/eventlog?hl=en-US&gl=US&pv=20141016\u00e2\u20ac\u00a6%2Caph%2Cigb%2Cpot%2Cgrt%2Crma%2Cshr%2Chls%2Crer%2Cpet&_reqid=1746368&rt=j\".webstore.js:382 tt.sendwebstore.js:425 g.Anwebstore.js:412 Dvwebstore.js:411 yvwebstore.js:408 vv.sendwebstore.js:398 Qu.sendwebstore.js:469 fpwebstore.js:313 dpwebstore.js:313 (anonymous function)webstore.js:246 Sjwebstore.js:244 g.Gwebstore.js:261 g.Nswebstore.js:378 c\nwebstore.js:382 XHR finished loading: POST \"https://chrome.google.com/webstore/ajax/login-state?hl=en-US&gl=US&pv=20141\u00e2\u20ac\u00a6%2Caph%2Cigb%2Cpot%2Cgrt%2Crma%2Cshr%2Chls%2Crer%2Cpet&_reqid=1846368&rt=j\".webstore.js:382 tt.sendwebstore.js:425 g.Anwebstore.js:412 Dvwebstore.js:411 yvwebstore.js:408 vv.sendwebstore.js:398 Qu.sendwebstore.js:480 by.Jawebstore.js:378 c\nwebstore.js:382 XHR finished loading: POST \"https://chrome.google.com/webstore/ajax/eventlog?hl=en-US&gl=US&pv=20141016\u00e2\u20ac\u00a6%2Caph%2Cigb%2Cpot%2Cgrt%2Crma%2Cshr%2Chls%2Crer%2Cpet&_reqid=1946368&rt=j\".webstore.js:382 tt.sendwebstore.js:425 g.Anwebstore.js:412 Dvwebstore.js:411 yvwebstore.js:408 vv.sendwebstore.js:398 Qu.sendwebstore.js:469 fpwebstore.js:313 dpwebstore.js:313 (anonymous function)webstore.js:246 Sjwebstore.js:244 g.Gwebstore.js:261 g.Nswebstore.js:378 c\n. Hi Kester, Any updates ? Thanks.\n. ",
    "kakitone": "Oops. i got it. I have to uninstall ipython3 and then install back ipython2.3 even when i am in a brand new virtual env. I guess you may want to add a note to that... anyway, great work... \n. ",
    "RomainBui": "same issue\n. ",
    "wenjinshao": "FWIW a workaround is to share from Google Drive. (Right-click the .ipynb file in Drive, and choose \"Share\".)\n. ",
    "deenhe91": "I have the same problem. If I inspect the page, I see this:\narray.js:10 Uncaught TypeError: Cannot read property 'length' of undefined\n    at Object.goog.array.forEach (array.js:10)\n    at Object.colab.nbformat.unsplitLines_ (nbformat.js:1)\n    at Object.colab.nbformat.convertJsonNotebookToRealtime (nbformat.js:4)\n    at XMLHttpRequest.xhrRequest.onreadystatechange (notebook.js:12)\nI wonder if it is to do with python version compatibility?. ",
    "jackiekazil": "Was looking for the realtime. :-) \nTy for the response. \n(Feel free to close this ticket.)\n. @rgbkrk let me know if you ever want to chat more about this. I can put you in touch with folks that can give you more distinct use cases and talk through the issue. My email is my user name at google's mail server.\n. ",
    "slel": "Note that SageMathCloud also lets you collaborate in real time on Jupyter notebook worksheets.\n. Note that in addition to using SageMathCloud at https://cloud.sagemath.com/,\nany person or group can run their own instance of SageMathCloud.\nSome relevant recent mailing list threads about that:\n- SageMathCloud docker image\n  sage-cloud post by William Stein, 2016-08-22\n  https://groups.google.com/d/topic/sage-cloud/S9WqlcaZ_9k/discussion\n- SageMathCloud customized institutional setup\n  sage-cloud post by Robert Lowe, 2016-08-26\n  https://groups.google.com/d/topic/sage-cloud/og3tmsXK-K0/discussion\n. ",
    "captainsafia": "Good idea! Will clarify things for people in the community.. ",
    "craigcitro": "\ud83d\udc4d \ud83c\udf89 \nThanks so much!. @Carreau let's wait for now; I may come back asking about that at some point. \ud83d\ude01 . "
}