{
    "mojombo": "have Commit#short_message use first non-empty message line. closed by c701103859b9814265ef6cd74be0f92e1593c677.\n. This should be fixed now.\n. Merged.\n. Yeah, I'd prefer to see something that knows how to escape stuff properly for both platforms and everything that needs to escape would call that.\n. Just pushed v2.5.0 which includes a fix for this.\n. Yeah, the whole pipe thing grosses me out too. I'm not sure why git patch-id doesn't have an option to take a commit sha1. Seems foolish. Those crazy Unix people. I guess this could be pushed into the Grit::Git object to push it back to the FSs, but that sucks too. Ugh.\n. ",
    "adelcambre": "@rothhound Can you test on your own repo rather than this public one? Thanks!. @thiagomgd Hey, can you use another repository to test grit with? Thanks!. ",
    "rothhound": "@adelcambre Sorry about that :( I'm working with a cassette and I didn't know that i'm doing this mess. . ",
    "davetron5000": "Grit.debug = true can help figure out what it's doing, but I, too, wouldn't mind errors to be generated.  I suspect that git doesn't set useful exit codes, tho\n. I have a fix for this (I think; I was having this problem, too, and this fix works)\nhttp://github.com/davetron5000/grit/tree/add-work-tree\n. Yup, I think my patch was added\n. ",
    "nirvdrum": "git does.  I think the real problem is the use of popen3, which doesn't capture exit status codes.  popen4 does, however, so that may be the way to go.\n. ",
    "floehopper": "I want to have Grit fail fast by raising an exception if any shell commands have a non-zero exit status. A classic example of this is when you don't have git in your environment's path.\nIt looks like some work has been done on this - see SHA: 889adf545e6cf48e4f3d7bb715a65202a8f50a85 - but I can't see how I pass the :raise option into the Grit commands. Am I missing something?\nThanks.\n. ",
    "ohookins": "I found that while Grit logs problems, something critical like the git tool not being present/found means that Git.init will silently fail but when that passes back to Git::Repo.initialize there is no repository in existance and a misleading exception is thrown.\nLet me know if this deserves a separate issue.\n. ",
    "bkeepers": "Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Nope, Grit is no longer maintained. See #183.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out https://github.com/libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out rugged.\n. Grit is no longer maintained. See #183 and check out rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out rugged.\n. Grit is no longer maintained. See #183 and check out libgit2/rugged.\n. Grit is no longer maintained. See #183 and check out rugged.\n. Grit is no longer maintained. See #183 and check out rugged.\n. Grit is no longer maintained. See #183 and check out rugged.\n. @arthurschreiber we still have grit sprinkled throughout a lot of code at GitHub. As badly as we want that to all go away, it's just realistically not going to happen soon enough.\nFor now I'm just going to use our fork to keep things up to date. Thanks.\n. Grit is no longer maintained. See #183.\n. I don't have commit access, so someone either want to add me to the repo or lead the charge on this?\n. Grit is no longer maintained. See #183\n. Grit is no longer maintained. See https://github.com/mojombo/grit/pull/183\n. This was looking for the git version. Most people are on 1.8 now. I'm not really sure how valuable this assertion is, so I just removed it instead of trying to make it match multiple versions.\n. ",
    "jrobeson": "this is already in the smoke branch\n. it got reverted, as it broke github in some way. would be nice to get it in again\n. ",
    "lambda": "I ran into this problem, and have fixed it in lambda@2736d20753fe8eb3c49cdd3c55821c5701182bed; I've submitted a pull request, so hopefully that will get reviewed and applied, or sent back to me to improve and re-submit.\n. ",
    "vrinek": "+1\n. ",
    "nand2": "+1\n. For info, I'm using this workaround:\nmypath = '/xx/xx'\nrepo = Grit::Repo.new(mypath)\n[..]\nrepo.git.reset({:env => {'GIT_WORK_TREE' => mypath}, :hard => true}, commit_id)\n. While this is not merged yet, this little dirty trick can help:\nmypath = '/xx/xx'\nrepo = Grit::Repo.new(mypath)\n[..]\nrepo.git.reset({:env => {'GIT_WORK_TREE' => mypath}, :hard => true}, commit_id)\n. I'm using this workaround:\nmypath = '/xx/xx'\nrepo = Grit::Repo.new(mypath)\n[..]\nrepo.git.reset({:env => {'GIT_WORK_TREE' => mypath}, :hard => true}, commit_id)\n. ",
    "munishm": "does it make it work under windows? I do not see this file under lib directory not sure if i add this to any other ruby file it will work.\nAlso, if I try to install \"win32-open3\", it says it can only be done for ruby <1.9.0.\n. ",
    "technoweenie": "Fixed in 0807a126972af1b7606c55b2f8e80f0888f37036\n. That's because it was merged :)\n. 1. I'm not a fan of how you're duplicating the logic just for windows.  I wonder if Grit should have its own popen method that knew to add the 'b' attribute just for windows?  Also, how does this affect other parts of the library?  Is there anything else that needs the 'text' file output mode?\n2. We may have to add a top level Grit option for this.  Single quotes are important on unix for security reasons.  We can't just change them to double quotes.  There's already at least one case where the logic is duplicated to accomodate Windows.  I'd like to clean that up.\n. I'd rather just update the tests so they don't rely on any specific order.  Ruby's default sort implementation sucks when comparing lowercased and uppercased strings.\n. Sounds reasonable to me.  I feel like Grit::GitRuby should have some tests that compare the GitRuby implementation against the native git version too.  If you could come up with a test case that passes with the native command, and fails with GitRuby, that'd be awesome.\n. This happens every time you edit a page?  What are the contents of the tree?\n. Well, you may have to fix the bug on your end then.  What are the contents of the tree?  \ngit cat-file -p TREE_SHA\n. That's a commit.  Run that on the tree sha.\n. Possibly.  That looks like a bug in Grit::Index\n. Ah, thanks!  Sorry, I forgot to check the pull requests before pushing out 1.4.1 this morning.  I'll probably do another patch release with this bug fix soon.\n. An index is only valid for the duration of the commit.  This won't work if you try to use the same repo instance to make multiple commits.  Some suggestions:\n```\n@repo.index.read_tree('master')\n@repo.index.add('...')\n@repo.commit...\n@repo.index(reload=true).read_tree('master')\n```\nOr, don't memoize it and check for a block:\n```\nindex = @repo.index\nor\n@repo.index do |idx|\n  idx.read_tree('master')\n  idx.....\nend\n```\nI personally like the block idea because it doesn't change the behavior of Repo#index.\n. Thanks for this.  We'll have to do some testing on GitHub though.  I have a feeling this will cause hooks to fire twice on any repos or wikis edited through the web interface.  Since hooks weren't being fired, we'd manually queue up the internal Resque job that the actual hooks were supposed to queue.\n. How many tags does your project have?\n$ git tag\n$ ls .git/refs/tags\nOn Mon, Aug 15, 2011 at 5:43 AM, graaff\nreply@reply.github.com\nwrote:\n\nGrit::Repo.new(REPO).tags on our bare git repository does not return but does burns 100% CPU. Looks like this now hits a busy loop somewhere. It looks like this is not a regression since grit 2.3.0 which we used for quite a while in this project now also has the same issue, so I guess it is something specific we do in our project. Unfortunately I won't be able to send you the repository since it is a closed project.\nDo you have any suggestions, or is there any information that I can provide that can help to track this down further?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mojombo/grit/issues/87\n\n\nRick Olson\nhttp://github.com/technoweenie\n. Er, I didn't get the reply notifications :)\nGo ahead and send the pull.  I don't know the PackStorage code base at all. \nWhat is that math module? \n. That's because you're reading commit SHAs, not blob SHAs.  Grit::Repo#blob takes a blob SHA, and runs cat-file -p on it.\n. Pro Grit has a great chapter on git internals that you should check out if you haven't.\n. So @jonmagic and I replaced that janky Commit.list_from_string parser.  It still ignores mergetags, but doesn't explode if they exist (along with extra single-space-prefixed content).\nThis gets the bug fixed, but there's more potential work to do to actually support mergetags if someone is up for it.\n. ",
    "juanje": "I guess this is an obsolete issue and it should be closed but this is a way to get the remote origin:\nruby\nrepo = Grit::Repo.new('path/to/the/local/repo')\norigin = repo.config['remote.origin.url']\n. ",
    "garysweaver": "Thanks!\n. A workaround to clone via ssh without grit, by just calling out to git with system:\nrepo_uri = 'ssh://user@sample.host.edu/path/to/repository'\n  clone_dir = 'my_project'\n  cmd = \"git clone #{repo_uri} \\\"#{clone_dir}\\\"\"\n  # can use exec cmd to debug/provide better output.\n  #exec cmd\n  success = system cmd\n  raise \"clone failed! try exec '#{cmd}' for error info\" if !success\n. ",
    "lenary": "not for me:\n```\n lenary grit (master) \n $ cat .git/refs/heads/master \n2f1f63e4e90f4a4722faa7c88244165423e14294\n lenary grit (master) \n $ rake test --trace\n(in /Users/same/Git/projects/grit)\n Invoke test (first_time)\n Execute test\nLoaded suite /Users/same/.rvm/gems/ruby/1.8.7/gems/rake-0.8.7/lib/rake/rake_test_loader\nStarted\n..............................................................................................................................................................................\nFinished in 8.532802 seconds.\n174 tests, 390 assertions, 0 failures, 0 errors\n```\ni suppose that link will just stay there. meh, you know what i mean... (this commit: 2f1f63e4e90f4a4722faa7c88244165423e14294)\n. ",
    "rtomayko": "I get these too. I assume I just need to create a /foo directory and give my unprivileged user access. Ideally, these test repos would be created under /tmp or the project working dir though.\n. Dupe of pull request 35.\n. Looks good to me. I've been bit by this as well. The one problem I see is that it could break people that rely on the current behavior of using the working directory as the work tree. Let's get mojombo to weigh in on how we should handle backward incompatible changes like that. Feels like a pretty big edge case to me but it's backward incompatible none the less.\n. Looks like this was fixed in e2ad571c4d307e815f22. Thanks for the patch, though.\n. The command is likely failing due to --quite not being a valid argument to git-clone. Unfortunately, grit does not raise an exception when a git command exits non-zero. There's not a whole lot we can do outside of raising an exception when a git command fails (planned) or verifying option arguments against a list of possible options for each command, which nobody wants to manage.\n. This is ready:\n- Reduces number of fork/execs by between 2-4. Nice perf increase.\n- Removes the need to shell quote input arguments.\n- Ability to retrieve child process exit status.\n- Ability to set child process environment without effecting parent process.\n- Ability to set child process working dir / pwd without effecting parent process.\n- Handles arbitrarily large input, output, and error streams. We can pipe stuff into commands without temp files and without worrying about hitting PIPE_BUF.\n- Based around Ruby 1.9's Process::spawn which will hopefully be a portability win in the future when support is added to JRuby/Windows.\nTested under various versions of MRI 1.8.7, REE 1.8.7, and 1.9.2-p0. Not all of these features work under JRuby yet but it works as well as it did previously.\n. Yeah. If we memoize, it should be reset to nil on the call to Grit::Repo#commit. I think we could do both the memoized and block forms if we reset after commit, though. \n. Hmm. I'm not very familiar with this area of the project. Your changes seem sane to me.\nOne quick comment:\n\nI think this is generally undesired as you're otherwise not required to suffix directory or tree paths with a slash.\n\nI do know git-ls-tree works differently when you give it a path/with/slash/ vs a path/with/no/slash, so its not entirely without precedent. I don't see how that would apply here, though.\n. Yeah. That's definitely not right. I'm assuming this is somewhere in the git-ruby implementation since the behavior is different from git-rev-list. I'm not super familiar with that code but I'll see what I can figure out.\n. Looks good to me.\n. Nice. Thanks!\n. Looks great. Will merge. Thanks!\n. Merged. Thanks again.\n. Thanks!\n. Does it make sense for these objects to ever be nil here? I prefer failing fast when something's out of whack rather than avoiding the exception. If there's valid cases where these are nil then this patch seems right to me. +1\n/cc @schacon\n. Yeah. We're actually using repo.git.native(:cat_file, ...) to get blob sizes on github because of this. The ruby implementation also has problems with packfiles larger than 2G.\n. I'm going to try shipping this on github.com real quick.\n. This looks great in a limited rollout to github.com production. Merging.\n. I'd love to see this merged if it works and doesn't cause a bunch of other issues. Definitely need to deploy from a branch for a good while. 30 minutes at least to ensure the fs machines cycle over and have enough time to surface issues.\n. God, why? Can't you just call rev-parse twice?\n. Sorry, I misread the diff and thought you were adding splitting which makes no sense to me in the first place. Sigh. Merging.\n. This looks great.\n. Oops this is failing under Ruby 1.8.7 with:\nArgumentError: wrong number of arguments (3 for 2)\n    /usr/share/rbenv/versions/ree-1.8.7-2012.02+github1/lib/ruby/1.8/tempfile.rb:184\n    /usr/share/rbenv/versions/ree-1.8.7-2012.02+github1/lib/ruby/1.8/tempfile.rb:184\n    /usr/share/rbenv/versions/ree-1.8.7-2012.02+github1/lib/ruby/1.8/tempfile.rb:184\n    vendor/internal-gems/grit/lib/grit/git-ruby/internal/loose.rb:67\n. So 1.8.7 doesn't take the extra options argument. The mode default is:\n\nCreates a temporary file of mode 0600 in the temporary directory, opens it with mode \u201cw+\u201d, and returns a Tempfile object which represents the created temporary file. A Tempfile object can be treated just like a normal File object.\n\nThe w+ mode is:\n\nRead-write, truncates existing file to zero length or creates a new file for reading and writing.\n\nSeems like maybe we could drop the argument entirely and roll with that. The other huge issue here though is encodings. If we drop the wb we'll likely run into encoding compatibility errors when writing binary data due to the attempted conversion to utf-8.\n. Fixed this up in b49a6ff4ccd169eef6671263ccb29d3ead957697. Should be fine.\n. I'd rather us spend time removing all dependence on grit personally. What's driving this? Wikis?\n. Disregard my last comment there. Had a quick chat with @bkeepers and he filled me in on some plans we have here.\nDiff looks good to me :+1:.\n. :+1:\n. It'd be nice if we could do this in one git invocation (it'll be two network round trips with smoke RPC) but I can't think of an easy way to accomplish it. Technically you can use pipes w/ Git#native (like @repo.git.show({}, @id, '| git patch-id') but I hate it so much and kind of want to remove it. WHY DOES\"T git-patch-id ACCEPT A COMMIT SHA1?? Blarrrg.\nOh well. +1\n. Can you remove this entirely?\n. Weird. How does this even work on Ruby 1.8.7? I thought force_encoding was 1.9 only.\n. Also, files in git aren't necessarily utf-8 encoded. They could be in some other character set. My understanding is that there's no way to get that info either.\n/cc @brianmario Can you take a look at this?\n. ",
    "smtlaissezfaire": "Here's a patch:\nhttp://github.com/smtlaissezfaire/grit/commits/fix_tests/\n. ",
    "defunkt": "Merged into master.\n. Merged into master.\n. Merged into master.\n. ",
    "zmalltalker": "I'm having the same issue here. Debugging and messing around, I found that although stdout has nothing, stderr does. In my case it read:\n/usr/bin/env: git: No such file or directory. \nI was only able to reproduce this on Centos, and I suspect SELinux to be involved.\nIt's quite easy to get around, since Grit::Git's git_binary has an attr_accessor, but maybe stdout should be checked, since the error message is a lot more helpful than an empty string...\n. @technoweenie: I have created a repository with three commits; the second one was committed before the other ones (by setting the system clock). There's a clone at https://github.com/zmalltalker/strange_order/commits/master\nI have a failing test that creates a Grit::Repo from this repo, collects the commits of it (repo.commits) and verifies that their SHAs are in the wrong order. This test is probably at a too high level, but I'm having a hard time figuring out how to target the tests in a better way, probably because I don't really get what Grit::GitRuby::Repository#rev_list actually does. \nWould it help at all putting up that test case, or do you have any ideas on how to target the test better?\n. @koraktor: I just stumbled across this issue, where commits created at about the same time were sorted in a weird way by Grit. Did your commit create other issues that made you close this pull req? \n. ",
    "kbrock": "Found this issue on a redmine thread as well.\nUnder passenger, the bin path is different from the regular user\n. ",
    "sfsekaran": "Yeah, found this issue because we were experiencing the same symptoms. I wish Grit would either throw an error or log something when it fails to find the git binary.\n. Yeah, it totally looks like #2 is a generalization of this issue.\n. ",
    "bobbywilson0": "This looks to be related to #2\n. I believe this is now fixed, I justed tested a newly cloned grit and didn't receive this error. Please consider closing this issue.\n. The core problem is related to #2 basically says grit doesn't return non-zero exit codes properly\n. I went to look over what you have done and it appears you have removed your grit fork. Please consider closing this issue since the code isn't there anymore.\n. This issue is no longer valid, please consider closing it.\n. Looks like this was merged in, please close this ticket\n. It would be helpful to describe what you were doing to create this issue, also what your are trying to get done. Sometimes there is another way to do it. Include relevant code.\n. I actually noticed a few issues with the same commits_since method. I submitted a patch and it is still in the queue. I don't know what will happen with it, but I would appreciate it if you wanted to test my patch (https://bobbyw@github.com/bobbyw/grit.git) against your code to see if it fixes your situation. I worked specifically on the commits_since method.\n. Ah, I should have noticed this earlier, is @options[:since] a String or a Time object? Part of what I was working on was that the documentation and the default parameter are a String, but later in commits_since logic it checks to make sure that what was passed in is a Time object.\n. Do you happen to know of an open-source repo that will raise the error? I am interested in troubleshooting this with you but I feel like it will take me a while to even find a repo that raises the error you are getting.\n. I was trying to help debug #74 and he was using this repo: git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-2.6.38.y.git\nI just out of curiosity I tried your git-status-report tool using the linux kernel and was able to replicate your issue! I managed to get a bit better output with rubinius https://gist.github.com/1081288. I had to truncate some of the output as the original paste was too large, but I don't think it is missing anything crucial. I actually think that this is related to issue #2, which is basically grit swallowing a non-zero exit code but not reporting it. It then just times out because it can't get passed that error.\nCC @rhaamo\n. This works fine for me on the current release and the master branch built into a gem. There is a very good chance there is a permissions problem with your environment setup. Consider closing the issue as it isolated to your system.\n. I just tried your test and switched the repo to the grit repo itself since it was one I had handy. It worked fine. Have you tried executing your test with any other repos? I am also on OS X not Linux, but I am using Grit 2.4.1 and ruby 1.9.2-p180.\n. I basically ran into the same error.\nHere is my output: https://gist.github.com/1080713\n. Was it the exact same commit? Can you post your detailed output as well?\n. Unfortunately this bug is very deep rooted. What exactly are you trying to do? It may be easier at this point to just get the result you want another way than to try and fix the bug.\n. @trans It is easier for us to help if you are telling us what you are trying to accomplish. Complaining about the library in 'Issues' isn't a very good way to get support. I would do your best to read through the documentation and tests, then create an Issue when you are trying to solve a specific problem. Please consider closing this issue as you are adding noise with this.\n. +1 \n. ",
    "blackspace": "who give me a answer?I run into the same issue.\n. ",
    "krisleech": "When looking up a blob, eg. r.blob(b.id), you get an 'unbaked' blob. This is the terminology used in the source code and it seems to suggest the blob instance has not been populated with any values yet. I do not know how to 'bake' the blob however.\n. ",
    "schleyfox": "\"A \"blob\" object is nothing but a chunk of binary data. It doesn't refer to anything else or have attributes of any kind, not even a file name.\nSince the blob is entirely defined by its data, if two files in a directory tree (or in multiple different versions of the repository) have the same contents, they will share the same blob object. The object is totally independent of its location in the directory tree, and renaming a file does not change the object that file is associated with.\" -- from http://book.git-scm.com/1_the_git_object_model.html\nA blob only gets a name if it is initialized via an action where it would have a name (e.g. tree traversal). Looking up a blob by its id will only return the content, size, and type.\n. So this was 3 years ago, but as I recall the issue was that git diff would return abbreviated shas for objects.  This was problematic because grit required the full sha to look up objects and would fail on the abbreviated shas.\n. Heh, I think I found the issue.  It's encodings related.\nSo basically it opens the index file in binary mode.  There are two formats of index/pack files: version 1 and version 2.  Version 2 is marked by a 4 byte signature (\"\\xFFtOc\" or int=4285812579) and a 4 byte version number (int=2).  This 8 byte header precedes the rest of the index file.  Version 1 has no header.\nThe index reader takes this into account and applies an 8 byte offset for all version 2 files and a 0 byte offset for all version 1 files: https://github.com/github/grit/blob/master/lib/grit/git-ruby/internal/file_window.rb#L19-L23\nThe determination of version is handled by comparing the signature with PACK_IDX_SIGNATURE: https://github.com/github/grit/blob/master/lib/grit/git-ruby/internal/pack.rb#L63\nPACK_IDX_SIGNATURE is defined as a string literal: https://github.com/github/grit/blob/master/lib/grit/git-ruby/internal/pack.rb#L17\nThe 4 byte signature is read out of a file in binary, so it explicitly has an encoding of \"ASCII-8BIT\".  PACK_IDX_SIGNATURE is a string literal, so its encoding is determined as whatever ruby wants it to be (on my mac that's ASCII-8BIT, on my server that's UTF-8).  For a string to be equal both content and encoding must be equal. Hilarity ensues.\nThe actual error message is produced because the file is thought to be version 1, so it reads two integers from the file starting at index 0.  These are 4285812579 and 2.  2 < 4285812579 so it barfs: https://github.com/github/grit/blob/master/lib/grit/git-ruby/internal/pack.rb#L134-L135\n. ",
    "unleashed": "Closing. Not interested in this anymore.\n. ",
    "igorw": "Basically the same as issue5: http://github.com/mojombo/grit/issues#issue/5\n. I have a fix for this: http://github.com/evil3/grit/compare/master...issue5\n. ",
    "binki": "those URLs lead to 404s...\n. Ah, sorry, I was for some unknown reason using grit-1.1.1 -- wait, I know why, because grit-1.1.1 is listed on rubyforge -- but grit-2.3.0's gem has the Rakefile and is only missing the tests.\n. Actually, I guess this is what needs to be noted:\nirb(main):022:0> files = Dir.glob('/home/ohnobinki/grit/test/dot_git' + '/*/tags/')\n=> [\"/home/ohnobinki/grit/test/dot_git/refs/tags/not_annotated\", \"/home/ohnobinki/grit/test/dot_git/refs/tags/annotated\", \"/home/ohnobinki/grit/test/dot_git/refs/tags/v0.7.0\"]\nirb(main):032:0> f = File.new('/home/ohnobinki/grit/test/dot_git/refs/tags/zebra', 'w')\n=> #File:/home/ohnobinki/grit/test/dot_git/refs/tags/zebra\nirb(main):033:0> files = Dir.glob('/home/ohnobinki/grit/test/dot_git' + '/*/tags/')\n=> [\"/home/ohnobinki/grit/test/dot_git/refs/tags/zebra\", \"/home/ohnobinki/grit/test/dot_git/refs/tags/not_annotated\", \"/home/ohnobinki/grit/test/dot_git/refs/tags/annotated\", \"/home/ohnobinki/grit/test/dot_git/refs/tags/v0.7.0\"]\ngit's tag subcommand likes to alphabetize stuff while grit likes to trust the filesystem to maintain alphabeticality. ;-)\n. if order doesn't matter, why are the tags returned as a list and not as a hash? (I'm not fluent in ruby, so I could be missing some convenient method for quickly getting at a particular tag object ;-))\n. Anyone have any comments on http://github.com/ohnobinki/grit/commit/26769e8b13ed42d601a8cd6e2bd246a1c2cc9215 ?\n. errr... see pull request #35, hmm\n. ",
    "cldwalker": "Closing due to lack of response\n. ",
    "stephencelis": "+1\nTested in 1.9.2 where Grit::Repo#commits had been raising ArgumentError: invalid byte sequence in UTF-8.\n. While the topic branch has been applied and the general encoding issue fixed, an additional encoding issue exists when attempting to commit a blob with a UTF-8-encoded name.\nindex.add \"Caf\u00e9\", \"blah\"\nindex.commit \"message\", nil, actor, tree\nResults in:\nEncoding::CompatibilityError: incompatible character encodings: UTF-8 and ASCII-8BIT\n grit (2.3.0) lib/grit/index.rb:137:in `%'\n grit (2.3.0) lib/grit/index.rb:137:in `block in write_tree'\n grit (2.3.0) lib/grit/index.rb:132:in `each'\n grit (2.3.0) lib/grit/index.rb:132:in `write_tree'\n grit (2.3.0) lib/grit/index.rb:80:in `commit'\nI've fixed this in my app by forcing the encoding of my string, beforehand, to ASCII-8BIT, and monkey-patching Grit::GitRuby::Internal::LooseStorage#get_raw_object to try content.force_encoding 'UTF-8' if content.length != size`, but I assume the library-specific fix shouldn't be so 1.9-heavy.\n. ",
    "antage": "Similar error in 1.9.2 (String#getord): http://github.com/github/gollum/issues#issue/17\n. grit 2.2.0 + gollum 1.0.1 have same bug:\nArgumentError - invalid byte sequence in UTF-8:\n /opt/ruby-1.9.2/lib/ruby/gems/1.9.1/gems/grit-2.2.0/lib/grit/ruby1.9.rb:3:in `ord'\n /opt/ruby-1.9.2/lib/ruby/gems/1.9.1/gems/grit-2.2.0/lib/grit/ruby1.9.rb:3:in `getord'\n. +1\n. ",
    "dstrelau": "+1 Fixes isuses with gollum.\n. ",
    "postmodern": "When can we have a release that fixes this?\n. ",
    "hiroshi": "FYI, I'v just send a pull request, fixing one of ruby 1.9 encoding problem.\nhttps://github.com/mojombo/grit/pull/51\n. ",
    "Dahie": "For the record, I'm having the same problem as stephencelis. I'm using version 2.4.1 of grit. Is there a solution in the works for this?\n. ",
    "brodock": "We are experiencing the same type of problem with Gitlab, and I've a alternative that may help fix this issue, as commented here: https://github.com/gitlabhq/gitlabhq/issues/725\n. ",
    "mjalil": "technoweenie wrote:\n\nI wonder if Grit should have its own popen method that knew to add the 'b' attribute just for windows?\n\nGrit usees win32-popen3 for windows. This is done in grit.rb. And the README of win32-popen3 says that the default valus for mode flag is 't' (text). In order to get binary we should use 'b' (binary)\n\nhow does this affect other parts of the library?\n\nI think it does not any other parts. At least for our usage, there is no effect.\nWe use Grit::Repo.new, Repo.heads, Repo.tags, Repo.commits, Repo.archive_tar in gitrevision_download_controller.rb\n\nIs there anything else that needs the 'text' file output mode?\n\nI think no.\n\nSingle quotes are important on unix for security reasons.\n\nYes, they are important in windows too. Code injection is a concern in all platforms. But i think the solution is filtering of undesirable characters in input, sanitizing the input.\nSingle quotation ' in --prefix='some prefix/' makes file names incorrect in windows and we must use double quotation \" , inevitably.\n. ",
    "bastiao": "Trunk is not working in win32 anymore :( \nNotImplementedError (fork() function is unimplemented on this machine):\n grit (2.4.1) lib/grit/process.rb:223:in fork'\n grit (2.4.1) lib/grit/process.rb:223:inspawn'\n grit (2.4.1) lib/grit/process.rb:271:in popen4'\n grit (2.4.1) lib/grit/process.rb:97:inexec!'\n grit (2.4.1) lib/grit/process.rb:68:in initialize'\n grit (2.4.1) lib/grit/git.rb:301:innew'\n grit (2.4.1) lib/grit/git.rb:301:in native'\n grit (2.4.1) lib/grit/git.rb:325:inmethod_missing'\n grit (2.4.1) lib/grit/repo.rb:536:in `archive_tar'\n. ",
    "Vanuan": "+1 for that feature\n. I experience this issue on v2.5.0. Are you sure the fix is included? BTW, when will be a new version?\n. ",
    "gorenje": "have you seen Git::Repo#remote_list --> that gives you the names of the remotes but no url information.\n. I'm using a workaround:\nmodule Grit\n  class Repo\n    def remote_list\n      Grit::Config.new(self).keys.collect do |keyname|\n        keyname =~ /^remote[.](.*)[.]url$/ ? $1 : nil\n      end.compact\n    end\n  end\nend\ni.e. retrieve the configuration, scan all keys for any keys that match \"remote..url\" and return the remote name.\n. ",
    "mkfs": "This all boiled down to being unable to access the staging area within Grit. Index objects almost replace the staging area, but git-write-tree returns the SHA1 of the root of stage, while the SHA1 of the root of an Index object is lost if the object is not committed and it goes out of scope.\nA subclass of Repo with some methods to support staging fixed this for me.\nCode: \n      def stage_sha1()\n        exec_in_git_dir{git write-tree}.chomp\n      end\n```\n  def stage_tree()\n    tree = tree(stage_sha1())\n    yield tree\n  end\ndef stage()\n    # read stage into index\n    sha = stage_sha1()\n    idx = index\n    idx.read_tree(sha)\nyield idx\n\n# write index to object db\nsha = idx.write_tree(idx.tree)\n\n# read into git stage\nexec_in_git_dir { `git read-tree #{sha}` }\n\nsha\n\nend\nGIT_DIR='/.git'\n  def exec_in_git_dir()\n    curr = Dir.getwd\n    Dir.chdir git.git_dir.chomp(GIT_DIR)\n    result = yield\n    Dir.chdir curr\n    result\n  end\n```\n. ",
    "morgoth": "Any feed on this issue?\n. ",
    "jeffWelling": "Really? No feedback at all?\nThis is disheartening. It's looking like the \"deprecated\" git gem is actually more functional than the 'grit' gem, at least in some aspects.  I'm not so much concerned with speed as I am with functionality.\nIt would be nice to at least see some kind of acknowledgment, but I guess the authors are too busy for even that. :(\n. ",
    "RLovelett": "Was anything ever added to this?\n. ",
    "wingrunr21": "Git#reset_hard won't work the way grit is currently written.  Grit uses method_missing to support those missing commands.  See https://github.com/mojombo/grit/blob/master/lib/grit/git.rb#L313\nAnyway, to answer your question:\ng = Grit::Repo.new('/path/to/git/repo')\ng.git.reset({:hard => true}, 'HEAD')\ng.git.pull({}, \"origin\", \"master\")\n. ",
    "RyanScottLewis": "Any work on this? Grit::Repo#pull doesn't seem too far fetched to me.\n. ",
    "pwnall": "Rebased against mojombo/master to get the latest commits. All the tests pass.\n. Rebased against mojombo/master again. Is there any chance you could take a look at this, please?\n. Rebased against mojombo/master again.\n. Rebased against mojombo/master again.\n. Rebased against mojombo/master again.\n. Rebased against mojombo/master again.\n. @mojombo, please let me know if there is anything I can do to get this patch in a state where you will consider accepting it!\n. ",
    "pauldowman": "Looks like GitHub-Flavoured Markdown was a bit too smart inside the code block there, those shouldn't be links of course...\n. Crap, I clicked \"comment and close\" by accident! Can you please re-open? Thanks.\n. ",
    "philandstuff": "@technoweenie I have a similar repo which exhibits this issue at https://github.com/philandstuff/grit-rev-list-problem-example\nThe following session demonstrates the difference in order between cmd-line git and git-ruby:\n```\nphilippotter ~/tmp/grit-rev-list-problem-example $ git rev-list --pretty=raw master\ncommit 26c184858e44e109cc525632ed82d840b751bde6\ntree 8a27fe8715be0cf38d8301c2eedadc180a787b02\nparent e569728aceb65171508b07867610b1c36ad0f268\nauthor Philip Potter philipgpotter@gmail.com 1329836752 +0100\ncommitter Philip Potter philipgpotter@gmail.com 1329836752 +0100\nupdated file nodes/dir/file.yaml\n\ncommit e569728aceb65171508b07867610b1c36ad0f268\ntree 17b6d8b73adee6ea2139008db2c3eab2552ee860\nauthor Philip Potter philipgpotter@gmail.com 1329836752 +0100\ncommitter Philip Potter philipgpotter@gmail.com 1329836752 +0100\nfirst commit\n\nphilippotter ~/tmp/grit-rev-list-problem-example $ irb\n\n\nrequire 'grit'\n=> true\nrepo = Grit::Repo.new('.')\n=> #\nputs repo.git.rev_list({:pretty => \"raw\"})\ncommit e569728aceb65171508b07867610b1c36ad0f268\ntree 17b6d8b73adee6ea2139008db2c3eab2552ee860\nauthor Philip Potter philipgpotter@gmail.com 1329836752 +0100\ncommitter Philip Potter philipgpotter@gmail.com 1329836752 +0100\n\n\nfirst commit\n\ncommit 26c184858e44e109cc525632ed82d840b751bde6\ntree 8a27fe8715be0cf38d8301c2eedadc180a787b02\nparent e569728aceb65171508b07867610b1c36ad0f268\nauthor Philip Potter philipgpotter@gmail.com 1329836752 +0100\ncommitter Philip Potter philipgpotter@gmail.com 1329836752 +0100\nupdated file nodes/dir/file.yaml\n\n=> nil\n```\n. ",
    "smarter": "Here's a simple fix for the case where the commit dates are equal(so like https://github.com/philandstuff/grit-rev-list-problem-example but not like https://github.com/zmalltalker/strange_order/commits/master ):\ndiff\n-        log = log.sort { |a, b| a[2] <=> b[2] }.reverse\n+        log = log.sort_by.with_index { |a, i| [a[2], -i] }.reverse\nThis makes the sort stable (see http://bugs.ruby-lang.org/issues/1089) and is enough to fix the issue in this case. Since the commit dates of rebased commits are all equal, this is an important issue, see for example the wrong order at https://gitorious.org/~smarter/libav/smarter-libav/commits/hevc and the corresponding bug report at https://issues.gitorious.org/issues/94 .\n. ",
    "assimovt": "I got the same problem. Is anyone looking into it?\nMy environment:\n- ruby-1.8.7-p174, tried also ruby-1.8.7-p249\n- git 1.7.1\n- grit 2.2.0\nI got the error with rails source, but when I switched to smaller repository it started to work. Apparently its a memory leak problem in the recursive function rev_list in git-ruby.rb.\nAny ideas?\n. ",
    "utkarshkukreti": "I'm also getting the same error for projects with over 3000 commits. Seems to work fine for small projects.\n. ",
    "igrigorik": "Ping. Same issue on larger repos, as documented on igrigorik/bugspots#4. \nEasy way to reproduce:\nruby\ngem install bugspots\nbugspots -d 1000 /path/to/rails_repo\nThat'll try to load the last 1000 commits from rails, which will trigger this bug.\n. ",
    "msgerbush": "I have been able to work around this by using the native command to call rev-list and then parse the result using Grit.\nThis is for 24000 commits using:\n- ruby-1.9.3-p0\n- git 1.7.5.1\n- grit 2.4.1\n. I hadn't put this in a branch.  Try the following:\ncommit_list = repo.git.rev_list({:max_count => false, :no_merges => true, :pretty => \"raw\", :timeout => false}, branch_name)\ncommits = Commit.list_from_string(repo, commit_list)\nwhere branch_name is the name of your branch and repo is your Grit::Repo.  You can modify the options as you see fit, except for the format (which must be 'raw' for Commit.list_from_string).  I have only tried this with grabbing all the commits, which is why I set :max_count => false.  Since this leverages the native call in git.rb's method_missing, you can pass any options here that you could normally pass to git-log, http://linux.die.net/man/1/git-log. This includes --since, which takes a date.\nIf this doesn't work out for you, let me know. I only took a cursory look at Grit while playing with https://github.com/igrigorik/bugspots, but I can try to look deeper into why this works for me, and maybe setup a branch for you.\n. Correct.  Basically there is code inside of git-ruby and git-ruby/repository that processes specific rev_list options by essentially walking the results of git-log without options.  commits_since leverages this code instead of using the native git-log command with options.  You could either edit the way that commits_since works to not use git-ruby, or you could simply access the Grit::Git CLI directly from your code, like I did above.\n. ",
    "cleeland": "Is the native command to call rev-list in a branch somewhere?  I would like to try using it.\n. Thanks for that clarification.  So, your modification to use git rev-list\nwas in the code that USES grit rather than in grit itself?  That's the part\nI was missing.\n\nChris Cleeland\n. FYI, I added the modification suggested above and committed to my fork at git://github.com/cleeland/bugspots.git.  I'll put in a pull request.\n. ",
    "scollett": "Any plans to add this patch? I've been bitten too.\n. ",
    "kelvinst": "@schleyfox, sorry, but can you explain why your changes must be accepted? What is its advantage?\n. Ressurecting this! So, part of me agree with you @rtomayko, but an other part stays afraid from the consequences of it.\nDoes grit eliminates the possibility of outside changes in the repositories? Or it have some kind of monitoring through them? If not, I think that this change is too dangerous, since I can call a git commit at the repo from outside the grit API.\n. Just a comment about the logic inversion issue.\nThe other change I think is \"fair enough\". :smiley:\nJust need a rebase, since I was ressurecting this from the deep of sea.\n. Wow, why it's not accepted yet? Sorry guys, but someone still looking at this repo? Or these old PR's just goes to limbo?\n. Pretty nicefull... I :heart: it!\n@rtomayko, I revised it, and I like the approach of allow the ducktyping here, and let the error occur when it's a wrong type, and not just leave the values away and continue the process.\nMy only fear is the behavior change, in your opinion, this can have some undesirable impacts?\n. Revised, pretty nice the way you used to not split the file name.\n. Pretty nice... (:\n. Sorry @bobbywilson0, but I think your changes are wrong here. Please note that in the line above the add_sha variable are setted to false, so, it's because of this that the logic of the if is inverted.\nTrying to understand, when you must add the commits since a date to the list, you must add the commits after that specific date. Then: c.committer.date > opts[:since], what is equals to yours opts[:since] < c.committer.date. But, in this case, by default the commit will be added to the list, and you are trying to remove that ones that doesn't need to be there, in other words, you want to remove the commits that is not since a date from the list, then, you must invert the logic: c.committer.date < opts[:since], or opts[:since] > c.committer.date.\n. Please rebase it, this is already on master.\n. ",
    "cookbooks": "Apologies - another monkey trying to bang out Shakespeare!\n. ",
    "gildo": "OH SHIT\nI'm idiot\n\n\nb=Grit::Repo.new(\"/tmp/dm-git-data/\")\n\n\n=> #\n\n\na=Grit::Index.new(b)\n\n\n=> #, \ntree{}, current_treenil\na.respond_to_missing?\n\n\na.read_tree(\"1c46299c7ec9bbf77bf42ec1f05f602524b93d45\")\n\n\n=> #\n. ",
    "jondot": "yes. this is the flow to reproduce:\ngem install gollum\ncd wiki\ngit init .\ngollum\n-> hit localhost:4567\n-> create a new page\n-> edit the same page & save\ni get redirected to the 'create page' page for the same page item. at this stage the tree is already corrupt.\ni mention again that this all happens in Windows based environments (the ones mentioned above, not same machines necessarily).\n. C:\\wiki>git cat-file -p f1f4bc2c8a9f31928c22e242890094c0e7e50a07\ntree c1e3cc319766933e694784f16cdb2207dbe3d543\nparent f7ca910c838fbe39764ba5894fb832295cd54dd2\nauthor jondot jondotan@gmail.com 1293806444 -0700\ncommitter jondot jondotan@gmail.com 1293806444 -0700\n. C:\\wiki>git cat-file -p c1e3cc319766933e694784f16cdb2207dbe3d543\n040000 tree fd22caff3eb4f3acb0dac3d5600b8d609cc956cf    :\n100644 blob c69338169bf60650209c2dc610a0013f43d81f10    Home.md\num, is it possible that it committed ':' because of the way the path looks? (c:) and its not really legal in windows?\n. sorry, feels like a bug in gollum.. i'll track it down, thanks\n. confirmed. normalize_dir in gollum is not win32 safe. sorry for the hassle.\n. ",
    "ralfebert": "So far, no patch release has been released, this breaks gollum in a rather unfortunate way for any UTF8 character in the wiki text, could this fix please be released?\n. This is already fixed in master, installing the current master branch fixes the issue:\nhttps://github.com/mojombo/grit/commit/593f6cae465aa6d4b089cede8dc0cd8c4b5fe6cc\nI also opened a ticket for gollum: https://github.com/github/gollum/issues/147\n@mojombo: Could a bugfix release v2.4.2 be released for this rather nasty bug?\n. ",
    "arr2036": "I just ran into this on our production wiki. Any chance this could be merged into a release? This really breaks things in a pretty major way...\n. +1 if the code isn't too horrible ;)\n. +1\n. ",
    "koraktor": "The problem here originates from the way how Grit uses Hashes to represent trees. I don't think it would be good to change that, so my change seems like a good solution for the problem of not being able to remove directories.\n. @mojombo, @rtomayko, @schacon: Any suggestions / objections on this one?\n. I already made a similar pull request addressing the same issue here.\n. Nevermind... this breaks the Grit's test suite.\nThe error I got originated from multiple commits happening at the same time where sorting by date seems to fail because of Git's timestamp limitation.\nThis fix worked, but just because of my small test scenario.\nSorry. :)\n. @zmalltalker: Yes, there were other problems caused by my \"fix\". So, don't use it. ;)\nIt's a matter of Git's own time accuracy. There is probably real fix for this, but this is more involved as you need to know the commit's parent(s).\n. ",
    "ef4": "I hit this bug and was about to make this very same change.  I think it should get merged.\n. Without this change, git log dies with a fatal error for unrecognized arguments.\n. I'm seeing seeing a speedup of 30 to 40% for traversing a tree of about 24000 nodes.\n. ",
    "milki": "Has this been tested?\n. ",
    "dethstryke": "Is there any plan on taking this pull request?  Trying to get Gollum to sync with another repo.  This would help a lot.\n. ",
    "kylef": "@technoweenie, not to sure how GitHub fires its commits. But perhaps GitHub could have its own implementation of Repo.commit which will queue the jobs. Not sure where GitHub has currently put the code for the hooks, but it would make sense to fire all the hooks from the same place (both in grit and at github).\n. Closing, this project has died since #183.\n. ",
    "clowder": ":+1:\nGot here via github/gollum#69\n. ",
    "coffeencoke": "+1\n. ",
    "johnrfrank": "+1\n. ",
    "pellucidity": "I wrote that pretty late at night and didn't trace it. I've gone back and confirmed that repo.commits(ref, options) does call rev_list, and I can fool Grit into calling out to native by passing :format => \"UTF-8\" to git.rev_list (not that I really want to go down that path).\nit looks like Grit::GitRuby::Repository#walk_log determines the 'real' SHA correctly but the code that follows goes awry, since adding \n    return [commit_sha] if opts[:max_count] == 1 && opts.keys.size == 1\nafter commit_sha is determined gets me the correct value. It has to be said that that's not really a satisfactory fix for all kinds of reasons.\n. ",
    "sawilde": "I also get this same issue whilst using bugspots - https://github.com/igrigorik/bugspots/issues/10#issuecomment-3245313 - but my repo is not empty.\n. ",
    "guilleiguaran": "Closed in favor of #54\n. ",
    "dkowis": "Fixed with a pull request: https://github.com/mojombo/grit/pull/60\n. ",
    "buddylindsey": "If you open up irb and start exploring along with the documentation you can figure a lot of this stuff out. That is how I had to do it. I just created a tmp directory on my computer and started playing in irb until I had things figured out. Several of those things should take you about 5 to 10 minutes to figure out. The first one especially.\n. ",
    "jnisenson": "Yep, I was able to figure it out.........it was just something for future users to learn more quickly.  Thanks for responding and I agree irb is the way to go when stuck.\n. ",
    "rhaamo": "Finally found that i need to bump Git.git_max_size, same exception for the two things..\n. Hm, nobody have an idea ? :(\n. Yep i've used others repos, but small/normal repos works, and a very huge like the linux one fails.\n. Yep! That's what i got :)\n. Not the same commit, https://gist.github.com/1081017, my linux repo is not updated to the latest also...\n. If somebody have an idea on how to debug this, i've no idea where to start.. This is really annoying :(\n. I need to get infos from commits, 10 by 10 (the test provided is extracted from my app).\n. Some update, i've bumped limits:\nGrit::Git.git_timeout = 600 # 10.minutes\nGrit::Git.git_max_size = 83886080 # 80.megabytes\nAnd finally got:\nD, [2011-08-10T10:58:36.997819 #25172] DEBUG -- : /usr/bin/git --git-dir=/home/marc/linux-3.0.y/.git rev-list --pretty=raw --max-count=10 --skip=2220 master\n/home/marc/.rvm/gems/ruby-1.9.2-p180/gems/grit-2.4.1/lib/grit/process.rb:290:in `spawn': Cannot allocate memory - /usr/bin/git (Errno::ENOMEM)\nI think i've got the same problem as #41, a memory leak in rev_list...\n. ",
    "geissonator": "If you're using egit within eclipse go to Window->Preferences->Team->Git and set the timeout to whatever you need.\n. ",
    "lonre": "\nCould a bugfix release v2.4.2 be released for this rather nasty bug?\n\n+1\n. ",
    "sunny": "Experiencing the same with utf-8 chars like \u00e9. Would love a v2.4.2.\n. ",
    "directionless": "Just ran into this while dealing with text that had en-dashes in ruby 1.9. I'd love to see a fix.\n. ",
    "paulogeyer": "\nCould a bugfix release v2.4.2 be released for this rather nasty bug?\n\n+1\n. ",
    "masnick": "\nCould a bugfix release v2.4.2 be released for this rather nasty bug?\n\n+1\n. ",
    "javierav": "\nCould a bugfix release v2.4.2 be released for this rather nasty bug?\n\n+1\n. ",
    "alexksso": "I have the same issue here ... I use git 1.7.5.4 \nany chance this gets solved ?\nthanks !\n. ",
    "liwh": "+1\n. ",
    "pateketrueke": "+1\n. ",
    "simonc": "+1\n. ",
    "Sephi-Chan": "+1\n. ",
    "lucasmartins": "+1\n. I'm eager to try this, thanks @shuadoc & @egbertp for commenting your findings...\n. ",
    "danielpuglisi": "+1\n. ",
    "jmay": "+2\n. ",
    "vkill": "+1\n. ",
    "punkstar": "+1\n. ",
    "ikaros": "+1\n. +1\n. ",
    "dmitry": ":up:\n. ",
    "mockturtl": "+1\n. ",
    "shuadoc": "Master is still broken for me.  I commented the following line, rebuilt the gem, installed a local copy, and it worked. \n#          raise LooseObjectError, \"size mismatch\" if content.bytesize != size\nIf you just need a wiki asap and you don't care then this is the way to go.  I didn't stop to find why this check is needed, so someone please comment if this will cause major issues. \n. ",
    "egbertp": "I had the same error message. Fixed it by commenting line 62 of /.rvm/gems/ruby-1.9.2-p290@gollum/gems/grit-2.4.1/lib/grit/git-ruby/internal/loose.rb\nNow my Gollum wiki (which uses grit) works fine! \nAs @shuadoc commented above: I have no idea what I've disabled, please comment if you believe this is not the way to fix this. Thnx!\n. ",
    "dentarg": "+1\n. ",
    "mxswd": "+1\n. ",
    "rnkn": "Issue is unresolved with 2.5.0 on Ruby 1.9.3.\n. ",
    "sailxjx": "mark this\nas @shuadoc said\njust comment the 59th line\n. ",
    "masukomi": "sorry about the delay. \nthe offending line of code:\nbranch_commits = repo.commits_since(branch.name, @options[:since] )\n@options[:since] is \"Thu Jun 16 00:00:00 -0400 2011\"\nbranch is one of the items from repo.heads() like \"master\"\nthe stack trace:\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/internal/pack.rb:200:in `find_object_in_index'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/internal/pack.rb:233:in `find_object'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/internal/pack.rb:70:in `with_idx'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/internal/pack.rb:232:in `find_object'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/internal/pack.rb:115:in `[]'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:78:in `get_raw_object_by_sha1'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:77:in `each'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:77:in `get_raw_object_by_sha1'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:105:in `get_object_by_sha1'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:372:in `walk_log'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:371:in `each'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:371:in `walk_log'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:376:in `walk_log'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:371:in `each'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:371:in `walk_log'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:376:in `walk_log'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:371:in `each'\n    --- the above 3 lines repeated MANY times ----\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:371:in `walk_log'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:287:in `log'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby/repository.rb:306:in `rev_list'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby.rb:68:in `rev_list'\n/usr/local/rvm/gems/ruby-1.8.7-p334/gems/grit-2.4.1/lib/grit/git-ruby.rb:224:in `try_run'\n/usr/local/rvm/rubies/ruby-1.8.7-p334/lib/ruby/1.8/timeout.rb:67:in `timeout'\n. i should note that it doesn't always happen. every now and then it just hits an offensive branch in a particular repo... sadly it's \"master\" and not a public repo that you could test on. if i run something roughly equivalent on the command line\ngit log --since=\"Thu Jun 16 00:00:00 -0400 2011\" --format=oneline\nI only get 9 commits. Just checking on the off chance it was somehow related to a large # of commits (doubtful since it's a stack depth issue). \nI'm happy to run anything that would help diagnose this. \n. Commit \n    cdbb0f534ae615378bcfbfeb07cc2aef7e258b76 (in your branch... ignore the link)\n    fixed commits_since on repo\n does not fix this problem. I also tested your branch with all of your commits and the bug was still there.\n. it's a time object \n    options[:since] = Time.parse((Date.today() - options[:days]).to_s)\nThese errors are being generated via the git-status-report tool in https://github.com/masukomi/git_accessories if you want to attempt to replicate. Simplest way would be to cd into a git repo and run it with -a option. Won't require configuring anything. Full usage instructions are in the readme. \n75: options[:since] = Time.parse((Date.today() - options[:days]).to_s)\n257: branch_commits = repo.commits_since(branch.name, @options[:since] )\nsadly it takes a very particular repo / branch to actually make the error show up. Used it for over a year without problem. had to move to a new company to find a repo that could make this happen.\n. Alas, I do not. I'd been using that tool for quite some time without hitting that problem. I'll give it a whack on the linux kernel. if there's anything big and complex enough to trigger it I bet it's that. \n. Excellent! I thought the kernel would have a good chance of reproducing it. I went and cloned the repo then got sidetracked with that stuff they pay me for. \n. ",
    "nashby": "Grit:Git includes GitRuby which has log method (https://github.com/mojombo/grit/blob/master/lib/grit/git-ruby/repository.rb#L285)\n. ",
    "Moisan": "You are right. But I still get a missing method \"log\" from Grit::Git in 2.4.1. The base of the error seems to come from the process.rb file : https://github.com/mojombo/grit/blob/v2.4.1/lib/grit/process.rb#L290 . I get the error `spawn': Permission denied -  /usr/local/Cellar/git  (Errno::EACCES) from this line, even when I run with sudo (I'm running git from brew on Mac OS X). Could the problem be coming from my setup?\nHere is the code I use to test it.\nruby\nrequire 'grit'\nrepo = Grit::Repo.new(\"/my/git/repository/folder\")\nrepo.log()\n. You are right it was a permission problem. Sorry, closing.\n. ",
    "khustochka": "This patch calculates path properly but then spawn fails with 'Bad file descriptor'.\nOh, OK, it works on edge. \n. +1\nI would appreciate a release (be it pre, or beta) because current master works on Windows (due to posix-spawn), and 2.4.1 fails.\n. ",
    "rioki": "I actually analysed the issue while trying to get gollum to work on win32. See github/gollum#23 for the total hack I did. The Bad file descriptor can be \"solved\" by changing the call fd.write_nonblock in Process::read_and_write (Process.rb:162) to fd.write. I don't know what the real issue here is, tho...\n. +1\n. ",
    "wernight": "For git-up it also requires https://github.com/stereobooster/posix-spawn/commit/67a73c670f3836f137dd06ea854ea71cc1d12154\n. After applying the posix-spawn patch, I found the directory separator must also be changed (see `map  { |p| p.gsub!('\\', '/') } below):\nclass << self\n  attr_accessor :git_timeout, :git_max_size\n  def git_binary\n    @git_binary ||=\n      ENV['PATH'].split(File::PATH_SEPARATOR).\n        map  { |p| File.join(p, 'git') }.\n        find { |p| File.exist?(p) }\n    # Windows PATH search\n    @git_binary ||=\n      ENV['PATH'].split(File::PATH_SEPARATOR).\n        map  { |p| File.join(p, 'git.exe') }.\n        map  { |p| p.gsub!('\\\\', '/') }.\n        find { |p| File.exist?(p) }\n  end\n  attr_writer :git_binary\nend\nThen it mostly works on msysgit. Only thing remains are the colors. Possibly using smart_colored in place of colored. Colored uses the deprecated win32console which has been replaced by https://github.com/adoxa/ansicon (and may work).\nA simple fix in the mean time is via https://github.com/adoxa/ansicon:\n$ ansicon git up\n. This is an improvement of the fix https://github.com/mojombo/grit/pull/75\nThen it mostly works on msysgit. Only thing remains are the colors. Possibly using smart_colored in place of colored. Colored uses the deprecated win32console which has been replaced by https://github.com/adoxa/ansicon (and may work).\nA simple fix in the mean time is via https://github.com/adoxa/ansicon:\n$ ansicon git up\n. ",
    "ghost": "looks fixed on master, but there's one warning coming from the diff-lcs gem.\n. Worry not, if sha1o happens to be nil, no exception is avoided here, because nil.is_a?(String) returns false. Thus, the line \"raise NoSuchShaFound if !sha1o.is_a?(String) || sha1o.empty?\" raises NoSuchShaFound, just like how it works now.\n. ",
    "microspino": "I can't find lib/grit/process.rb on master to verify the two lines of code. \nDoes It mean I just need to wait for the next release? Sorry github noob here.\n. ",
    "leejarvis": "Grit::Process was removed in 12c98749256a099bde2e328b0c943dc2f5bdca7c in favour of POSIX::Spawn::Child so you wont find it in GitHub. These warnings shouldn't appear in the next stable release of grit\n. ",
    "banister": "@trans, I found Grit a bit of a pain at first (due to lack of docs), but it's actually pretty straight forward once you browse the source. Have a look at this tool, which makes learning a lib that doesn't have docs a lot easier.\nAlso, and i dont mean to be a smartass, but i'm sure they'd appreciate pull requests with documentation ;)\n. ",
    "trans": "@branster thanks for the link I'll see if it can help. I'm trying to figure out how to copy a directory into gh-pages branch and pushing ti via grit.\nI would love to make some pull requests with docs if I understood things enough to write them --which is actually why I actually need them ;-)\n. I'm trying to figure out how to use the library. One thing that stumped me was how to checkout a branch --which seems pretty basic. But hey, what can I tell you, if you don't want to here it?\n. I've now learned a good bit about this problem reading other issue reports. The problem has do with changes made in Ruby 2.0. The styx/grit fork looks to have the fix. Please merge the styx fork and release a new version of grit. If you do not have the time to do so, please delegate the task to someone else. I am sure there would be enough volunteers.\n. ",
    "graaff": "I did some further digging here and traced the problem to Grit::GritRuby::Internal::PackStorage.find_object_in_index. For some reason that I haven't uncovered yet the \"first + last / 2\" expression there leads to a Rational, not an integer. From there on out things get out of hand. Changing this to mid = ((first + last) / 2).to_i fixes things.\nI'd be happy to prepare a pull request for this because this seems like a safe and sane change, but I'd be happy to get feedback on it first (on you can fix it directly).\n. I've traced this to a \"require 'mathn'\" in a dependency of our own code.\n. It's mathn.rb and it is part of the normal ruby distribution. It pulls in complex and rational number support. I'll make a pull request once I have a clean test run.\n. ",
    "netdata-be": "I'm having 468 tags and if I count the tags like this:\nGrit::Repo.new('/var/lib/gitolite/repositories/ttt.git').tags.count\nIt takes up to 10 seconds before completion.\nIs this normal?\nI have already tried to implement the change:\n\"first + last / 2\" => ((first + last) / 2).to_i  \nBut this doesn't improve the speed.\n. ",
    "brynary": "Without this change, what is the behavior? Are the limits ignored?\n. I've started seeing some failures in this method from commits with a gpgsig section. Have you run into this?\n. Thanks. This change seems to fail a lot of tests for me. Is it running green for you?\n. ",
    "kovyrin": "Useful feature, +1\n. ",
    "dzaporozhets": "how it will improve performance?\n~ % \n. thanks\n. ",
    "mizzy": "@joeljunstrom Thanks to your comment.I fixed repo.rb to use remotes.detect.\n. ",
    "levinotik": "Thanks @technoweenie. So what's the right way to get the blob SHAs? ;)\n. @technoweenie oh i get it. I gotta use the tree. like: \ntree = Tree.construct(repo, 'master')\n data = tree.blobs.map {|b| repo.blob(b.id).data}\n. ",
    "aceofspades": "No, sorry. Seems like no interest in pulling this but this functionality is clearly broken.\n. Thanks, missed that. I have rebased and issued a new pull request.\nhttps://github.com/mojombo/grit/pull/124\n. ",
    "nathanvda": "Version 2.5.0 was released on 22nd of april, so I don't think this issue is still relevant?\n. ",
    "tmm1": "posix-spawn supports jruby. What issue are you seeing?\n. This looks like a jruby bug. Maybe something is screwy with your installation, but posix-spawn has no control over jruby-1.6.7/lib/native/x86_64-Linux/libjruby-cext.so\n. Please stop spamming this repository. If you need to perform tests, create your own repo.. What exactly is this doing?\n. ",
    "gamemachine": "LoadError: load error: posix_spawn_ext -- java.lang.UnsatisfiedLinkError: failed to load shim library, error: /usr/lib/libstdc++.so.6: version `GLIBCXX_3.4.14' not found (required by /home/marvel/.rvm/rubies/jruby-1.6.7/lib/native/x86_64-Linux/libjruby-cext.so)\n           require at org/jruby/RubyKernel.java:1033\n           require at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:240\n   load_dependency at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:223\n  new_constants_in at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:640\n  new_constants_in at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:639\n   load_dependency at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:223\n           require at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:240\n            (root) at /home/marvel/.rvm/gems/jruby-1.6.7/gems/posix-spawn-0.3.6/lib/posix/spawn.rb:2\n           require at org/jruby/RubyKernel.java:1033\n           require at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:240\n   load_dependency at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:223\n  new_constants_in at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:640\n  new_constants_in at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:639\n   load_dependency at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:223\n           require at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:240\n            (root) at /home/marvel/.rvm/gems/jruby-1.6.7/gems/posix-spawn-0.3.6/lib/posix/spawn.rb:1\n           require at org/jruby/RubyKernel.java:1033\n           require at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:240\n   load_dependency at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:223\n  new_constants_in at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:640\n  new_constants_in at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:639\n   load_dependency at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:223\n           require at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:240\n            (root) at /home/marvel/.rvm/gems/jruby-1.6.7/gems/posix-spawn-0.3.6/lib/posix-spawn.rb:2\n           require at org/jruby/RubyKernel.java:1033\n           require at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:240\n   load_dependency at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:223\n  new_constants_in at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:640\n  new_constants_in at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:639\n   load_dependency at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:223\n           require at /home/marvel/.rvm/gems/jruby-1.6.7/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:240\n            (root) at /home/marvel/.rvm/gems/jruby-1.6.7/gems/grit-2.5.0/lib/grit/git.rb:34\n           require at org/jruby/RubyKernel.java:1033\n           require at /home/marvel/.rvm/gems/jruby-1.6.7/gems/grit-2.5.0/lib/grit.rb:68\n. ",
    "trunda": "Hi, same issue here\nLoadError: load error: posix_spawn_ext -- java.lang.UnsatisfiedLinkError: failed to load shim library, error: /usr/lib/libstdc++.so.6: version `GLIBCXX_3.4.14' not found (required by /home/vagrant/jruby-1.6.7.2/lib/native/i386-Linux/libjruby-cext.so)\n  require at org/jruby/RubyKernel.java:1033\n   (root) at /home/vagrant/jruby-1.6.7.2/lib/ruby/gems/1.8/gems/posix-spawn-0.3.6/lib/posix/spawn.rb:2\n  require at org/jruby/RubyKernel.java:1033\n   (root) at /home/vagrant/jruby-1.6.7.2/lib/ruby/gems/1.8/gems/posix-spawn-0.3.6/lib/posix/spawn.rb:1\n  require at org/jruby/RubyKernel.java:1033\n   (root) at /home/vagrant/jruby-1.6.7.2/lib/ruby/gems/1.8/gems/posix-spawn-0.3.6/lib/posix-spawn.rb:2\n  require at org/jruby/RubyKernel.java:1033\n   (root) at /home/vagrant/jruby-1.6.7.2/lib/ruby/gems/1.8/gems/grit-2.5.0/lib/grit/git.rb:34\n  require at org/jruby/RubyKernel.java:1033\n  require at /home/vagrant/jruby-1.6.7.2/lib/ruby/gems/1.8/gems/grit-2.5.0/lib/grit.rb:68\n     each at org/jruby/RubyArray.java:1615\n  require at /home/vagrant/jruby-1.6.7.2/lib/ruby/gems/1.8/gems/bundler-1.2.0/lib/bundler/runtime.rb:66\n     each at org/jruby/RubyArray.java:1615\n  require at /home/vagrant/jruby-1.6.7.2/lib/ruby/gems/1.8/gems/bundler-1.2.0/lib/bundler/runtime.rb:55\n  require at /home/vagrant/jruby-1.6.7.2/lib/ruby/gems/1.8/gems/bundler-1.2.0/lib/bundler.rb:128\n   (root) at /vagrant/config/application.rb:7\n  require at org/jruby/RubyKernel.java:1033\n   (root) at /vagrant/config/application.rb:53\n      tap at org/jruby/RubyKernel.java:1787\n   (root) at /home/vagrant/jruby-1.6.7.2/lib/ruby/gems/1.8/gems/railties-3.2.6/lib/rails/commands.rb:50\n  require at org/jruby/RubyKernel.java:1033\n   (root) at script/rails:6\n. ",
    "TylerBrock": "Yup, I'm having the same problem.\n. ",
    "mbrinkme": "me too! \nstudent@ub12:~/c$ rails s\nLoadError: load error: posix_spawn_ext -- java.lang.UnsatisfiedLinkError: failed to load shim library, error: /home/student/.rvm/rubies/jruby-1.7.2/lib/native/i386-Linux/libjruby-cext.so: Kann die Shared-Object-Datei nicht \u00f6ffnen: Datei oder Verzeichnis nicht gefunden\n  require at org/jruby/RubyKernel.java:1027\n   (root) at /home/student/.rvm/gems/jruby-1.7.2/gems/posix-spawn-0.3.6/lib/posix/spawn.rb:2\n  require at org/jruby/RubyKernel.java:1027\n   (root) at /home/student/.rvm/gems/jruby-1.7.2/gems/pygments.rb-0.4.2/lib/pygments/popen.rb:1\n  require at org/jruby/RubyKernel.java:1027\n   (root) at /home/student/.rvm/gems/jruby-1.7.2/gems/pygments.rb-0.4.2/lib/pygments/popen.rb:2\n  require at org/jruby/RubyKernel.java:1027\n   (root) at /home/student/.rvm/gems/jruby-1.7.2/gems/pygments.rb-0.4.2/lib/pygments.rb:1\n     each at org/jruby/RubyArray.java:1613\n   (root) at /home/student/.rvm/gems/jruby-1.7.2/gems/pygments.rb-0.4.2/lib/pygments.rb:1\n     each at org/jruby/RubyArray.java:1613\n   (root) at /home/student/.rvm/gems/jruby-1.7.2@global/gems/bundler-1.3.4/lib/bundler/runtime.rb:1\n  require at /home/student/.rvm/gems/jruby-1.7.2@global/gems/bundler-1.3.4/lib/bundler/runtime.rb:72\n  require at /home/student/.rvm/gems/jruby-1.7.2@global/gems/bundler-1.3.4/lib/bundler/runtime.rb:70\n  require at org/jruby/RubyKernel.java:1027\n  require at /home/student/.rvm/gems/jruby-1.7.2@global/gems/bundler-1.3.4/lib/bundler/runtime.rb:59\n      tap at org/jruby/RubyKernel.java:1754\n  require at /home/student/.rvm/gems/jruby-1.7.2@global/gems/bundler-1.3.4/lib/bundler.rb:132\n  require at org/jruby/RubyKernel.java:1027\n   (root) at script/rails:6\nstudent@ub12:~/c$ \n. ",
    "ReneB": "I think the commit above may fix this, but I didn't get around to writing tests for it yet (yeah I know, boo hiss for not doing TDD on this one). I just found out that after the umpteenth repository-breaking sed-command and finally separating the .git dir, git-up stopped working and I found out it was caused by this issue.\nI do want to write tests for it but right now it was just a I-really-gotta-get-back-to-work kind of commit, HTH.\n. ",
    "joliss": "This requires #113 to be merged first.\n. ",
    "bootstraponline": "+1\n. +1\n. ",
    "styx": ":+1: \n. An I can confirm this always happens on 2.0 and sometimes on 1.9.3 (I have such a repo but can't share it). Also I'd wish to admit that Grit seems to be dead.\n. ",
    "3100": "+1\n. ",
    "fujimura": "Got same error with same env(ruby 1.9.3-p194 on rbenv). any updates?\nruby\n[1] pry(main)> c = Grit::Repo.new './'\n=> #<Grit::Repo \"/Users/dfujimura/sandbox/some-repo/.git\">\n[2] pry(main)> c.commits\nGrit::GitRuby::Internal::PackFormatError: pack /Users/dfujimura/sandbox/some-repo/.git/objects/pack/pack-0c53037493ffa0fdb824180e05de021e66e53d63.pack has discontinuous index 1\nfrom /Users/dfujimura/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:135:in `block (2 levels) in init_pack'\n$ gem env\nRubyGems Environment:\n  - RUBYGEMS VERSION: 1.8.23\n  - RUBY VERSION: 1.9.3 (2012-04-20 patchlevel 194) [x86_64-darwin11.2.0]\n  - INSTALLATION DIRECTORY: /Users/dfujimura/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1\n  - RUBY EXECUTABLE: /Users/dfujimura/.rbenv/versions/1.9.3-p194/bin/ruby\n  - EXECUTABLE DIRECTORY: /Users/dfujimura/.rbenv/versions/1.9.3-p194/bin\n  - RUBYGEMS PLATFORMS:\n    - ruby\n    - x86_64-darwin-11\n  - GEM PATHS:\n     - /Users/dfujimura/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1\n     - /Users/dfujimura/.gem/ruby/1.9.1\n  - GEM CONFIGURATION:\n     - :update_sources => true\n     - :verbose => true\n     - :benchmark => false\n     - :backtrace => false\n     - :bulk_threshold => 1000\n     - \"gem\" => \"--no-rdoc --no-ri\"\n  - REMOTE SOURCES:\n     - http://rubygems.org/\n$ gem list | grep grit\ngrit (2.5.0)\n$ git --version\ngit version 1.7.11.3\n. ",
    "rriemann": "Please fix this! Got this problem when using gollum.\n. Only happens for me with ruby 2.0 (installed via rvm). With ruby 1.9.3 everything seems to be fine.\n. ",
    "fconcklin": "I also get this on rvm 1.18.21 (stable) when using gollum. \n. ",
    "mjaros": "I can confirm that this only happens with Ruby 2.0. With 1.9.3 everything is fine.\n. ",
    "paulRbr": "This commit (https://github.com/BertramScharpf/grit/commit/6fc5006cca4f07f7f82383fb4d822c509cc516ee) solved the issue in my case.\nwith git 1.8.4, rvm 1.24.1, ruby 2.0.0-p353\n. :+1: clearly this needs to be in\n. PR open closing the issue\n. ",
    "jonmagic": "I'm guessing we probably don't need all the .sample files in the dot_git_signed_tag_merged bare repo...\n. Closing this in favor of smaller pull-requests with each individual bit.\n. /cc @tmm1 @technoweenie \n. /cc @tmm1 @technoweenie \n. /cc @tmm1 @technoweenie \n. Before this goes in we may want to consider taking the contents of the mergetag and adding into onto message. Right mergetag and its properties are just dropped.\n. /cc @tmm1 @technoweenie \n. I'm away from my computer until Thursday, feel free to hack on the branch/pr I had out there. Thursday I'll be tied up with Halp most of the day too.\nOn Tuesday, July 10, 2012 at 16:50, Nick Hengeveld wrote:\n\n@rtomayko (https://github.com/rtomayko) you're right - there's another commit here (https://github.com/nickh/grit/commit/9d7c3e6b9480013f97308da1b0054f2224fbf8f9) that uses CharlockHolmes instead, and should work in both 1.8 and 1.9.\n@jonmagic (https://github.com/jonmagic) could we get that into this PR on your branch?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/mojombo/grit/pull/129#issuecomment-6888601).\n. It removes this from the commit so that grit doesn't blow up:\n\n``` bash\nmergetag object b2b1760347d797f3dc79360d487b9afa7baafd6a\n type commit\n tag v1.1\n tagger Jonathan Hoyt hoyt@github.com 1340923695 -0700\nsigned tag in foo\n -----BEGIN PGP SIGNATURE-----\n Version: GnuPG v1.4.12 (Darwin)\niQEcBAABAgAGBQJP7N8vAAoJEM+49UOrepeVvk0IAMg8rB5eM0wFPC2nBy9ji4rp\n mM2xmrmEJmI7IKbY4TxtFTXq8kU9YhETBj5ZDTzUysPNDA5n+ZkZ/8MeXGTp4ml6\n kdDUIGXfAt7UXsEUjVw4C0Ln8TbxZEk2bDGWoEuPuMcwqj0aNihIcxb0lg7iYoq4\n THdKlbaA4qvF2Su42tayLOcT3pmIIZilQjSe6eilYLkqz9VpW0Fi/eMhe1WD2Vc7\n A97pq0garOYg38roQC9JsLyx5gBsaWix30IxtwIQdPZB77rRTZGoCfofOvZvwJtD\n 4LQoMEzppxHMIdBbKyOaU5i/RjBxtJIScwlHXd9FSujn9ydAJdj8gvpyRtvCkCE=\n =yhJX\n -----END PGP SIGNATURE-----\n```\n. ",
    "nickh": "@rtomayko you're right - there's another commit here that uses CharlockHolmes instead, and should work in both 1.8 and 1.9.\n@jonmagic could we get that into this PR on your branch?\n. @rtomayko do you have an example of git not using UTF-8 for quoted filenames in diffs?  I just tested locally with a file named \"\u5e02\u9577\u6751\u9577\u9078\u6319\" and it worked correctly on 1.8.7.\nOddly, it looks like the current change will not work correctly on 1.9.3 unless we force_encoding though:\nirb(main):116:0> a_path\n=> \"\\\\345\\\\270\\\\202\\\\351\\\\225\\\\267\\\\346\\\\235\\\\221\\\\351\\\\225\\\\267\\\\351\\\\201\\\\270\\\\346\\\\214\\\\231\"\nirb(main):117:0> ap = a_path.gsub(/\\\\([0-9]{3})/){|c| c[1..-1].oct.chr}\n=> \"\\xE5\\xB8\\x82\\xE9\\x95\\xB7\\xE6\\x9D\\x91\\xE9\\x95\\xB7\\xE9\\x81\\xB8\\xE6\\x8C\\x99\"\nirb(main):118:0> ap.encoding\n=> #<Encoding:ASCII-8BIT>\nirb(main):119:0> ap.force_encoding('UTF-8')\n=> \"\u5e02\u9577\u6751\u9577\u9078\u6319\"\nThe complete diff in question looks like this:\nnictocat:jp github$ git diff --full-index -M 38e9151715724d6bb4c894e1d7d1a5c258201300 11e0844b5bd844014f258faefc74616f4dc40643\ndiff --git \"a/\\345\\270\\202\\351\\225\\267\\346\\235\\221\\351\\225\\267\\351\\201\\270\\346\\214\\231\" \"b/\\345\\270\\202\\351\\225\\267\\346\\235\\221\\351\\225\\267\\351\\201\\270\\346\\214\\231\"\nindex 9f4b6d8bfeaf44aaa69872286163784706d1b053..00fa644a1057f8b3ce4c566cc273d39f4d71ef8b 100644\n--- \"a/\\345\\270\\202\\351\\225\\267\\346\\235\\221\\351\\225\\267\\351\\201\\270\\346\\214\\231\"\n+++ \"b/\\345\\270\\202\\351\\225\\267\\346\\235\\221\\351\\225\\267\\351\\201\\270\\346\\214\\231\"\n@@ -1 +1,3 @@\n This is a test file\n+\n+Now with changes\n/cc @brianmario\n. To follow up on my previous comment, I just tested with a file named \"Ol\u00edmpicos.txt\".  I created the git repo and created/modified the file in a terminal with ISO-8859-1 character encoding, then checked the output of git diff in that terminal and in another running with UTF-8 character encoding.\nIn both cases, the results look like this:\ndiff --git \"a/Oli\\314\\201mpicos.txt\" \"b/Oli\\314\\201mpicos.txt\"\nindex 5cccbef31a18f2fe2661ff164d3d41dfce9738b9..16fe1507f26ffc69d0e56d5035bd29b9\n--- \"a/Oli\\314\\201mpicos.txt\"\n+++ \"b/Oli\\314\\201mpicos.txt\"\n@@ -1 +1 @@\n-Test Ol\u00edmpicos file\n+Test Ol\u00edmpicos text file\nIn the reverse case, where the repo was created/modified in UTF-8 and viewed in ISO8859-1, a diff looks thusly:\ndiff --git \"a/\\345\\270\\202\\351\\225\\267\\346\\235\\221\\351\\225\\267\\351\\201\\270\\346\\2\nindex e9fe68f684ad479851e3144374a6371ce743b1e3..a8b452a3935176ed6013d8166c9c9978\n--- \"a/\\345\\270\\202\\351\\225\\267\\346\\235\\221\\351\\225\\267\\351\\201\\270\\346\\214\\231\"\n+++ \"b/\\345\\270\\202\\351\\225\\267\\346\\235\\221\\351\\225\\267\\351\\201\\270\\346\\214\\231\"\n@@ -1 +1 @@\n-This is a test ?<82>?<95>??<9D><91>?<95>??<81>??<8C><99> file\n+This is a test ?<82>?<95>??<9D><91>?<95>??<81>??<8C><99> text file\nThe encoding for the file name is handled differently than the encoding for the changes, and I can't figure out how to make the filename encoding be anything other than UTF-8.  I tried setting i18n.logOutputEncoding and i18n.commitEncoding to ISO-8859-1 and neither config setting seemed to make any difference.\nIf we can expect quoted filenames to be UTF-8, it makes this change quite a bit more straightforward.  After the gsub to convert escaped characters, for ruby 1.8.7 we don't need to do anything and for ruby 1.9.3 we need to .force_encoding('UTF-8')\n/cc @jonmagic @rtomayko @brianmario \n. @brianmario ftw.  Discussion in TheLibrary determined that if a filename in a diff is quoted, there's no way to know what encoding to use; and while it's certainly possible for users with eg. old/misconfigured systems to create files with non-UTF8 filenames, the most reasonable thing to do is to treat them as UTF-8.\n/cc @carlosmn\n. For 1.9, convert seems to return an object with the correct target encoding:\nirb(main):058:0> i2\n=> \"El presidente del Congreso amonesta a Fabra, que pidi\\xF3 excusas.\"\nirb(main):059:0> i2.encoding\n=> #<Encoding:ISO-8859-1>\nirb(main):060:0> d = i2.detect_encoding\n=> {:type=>:text, :encoding=>\"ISO-8859-1\", :confidence=>95, :language=>\"es\"}\nirb(main):061:0> t = CharlockHolmes::Converter.convert( i2, d[:encoding], 'UTF-8' )\n=> \"El presidente del Congreso amonesta a Fabra, que pidi\u00f3 excusas.\"\nirb(main):062:0> t.encoding\n=> #<Encoding:UTF-8>\nIs there a different encoding setting that we should be using in addition?  Or is that to cover the case where convert is unable to transcode to the target encoding?\n. Do you think it's worth using something like icu4r instead?  Or were you thinking of changing CharlockHolmes to use the C API to ICU?\n. ",
    "brianmario": "we might want to ask the libgit2 guys about the file name encoding stuff. I remember there being a LOT of stink about it\nOn Jul 19, 2012, at 9:06 PM, Nick Hengeveld notifications@github.com wrote:\n\nTo follow up on my previous comment, I just tested with a file named \"Ol\u00edmpicos.txt\". I created the git repo and created/modified the file in a terminal with ISO-8859-1 character encoding, then checked the output of git diff in that terminal and in another running with UTF-8 character encoding.\nIn both cases, the results look like this:\ndiff --git \"a/Oli\\314\\201mpicos.txt\" \"b/Oli\\314\\201mpicos.txt\"\nindex 5cccbef31a18f2fe2661ff164d3d41dfce9738b9..16fe1507f26ffc69d0e56d5035bd29b9\n--- \"a/Oli\\314\\201mpicos.txt\"\n+++ \"b/Oli\\314\\201mpicos.txt\"\n@@ -1 +1 @@\n-Test Ol\u00edmpicos file\n+Test Ol\u00edmpicos text file\nIn the reverse case, where the repo was created/modified in UTF-8 and viewed in ISO8859-1, a diff looks thusly:\ndiff --git \"a/\\345\\270\\202\\351\\225\\267\\346\\235\\221\\351\\225\\267\\351\\201\\270\\346\\2\nindex e9fe68f684ad479851e3144374a6371ce743b1e3..a8b452a3935176ed6013d8166c9c9978\n--- \"a/\\345\\270\\202\\351\\225\\267\\346\\235\\221\\351\\225\\267\\351\\201\\270\\346\\214\\231\"\n+++ \"b/\\345\\270\\202\\351\\225\\267\\346\\235\\221\\351\\225\\267\\351\\201\\270\\346\\214\\231\"\n@@ -1 +1 @@\n-This is a test ?<82>?<95>??<9D><91>?<95>??<81>??<8C><99> file\n+This is a test ?<82>?<95>??<9D><91>?<95>??<81>??<8C><99> text file\nThe encoding for the file name is handled differently than the encoding for the changes, and I can't figure out how to make the filename encoding be anything other than UTF-8. I tried setting i18n.logOutputEncoding and i18n.commitEncoding to ISO-8859-1 and neither config setting seemed to make any difference.\nIf we can expect quoted filenames to be UTF-8, it makes this change quite a bit more straightforward. After the gsub to convert escaped characters, for ruby 1.8.7 we don't need to do anything and for ruby 1.9.3 we need to .force_encoding('UTF-8')\n/cc @jonmagic @rtomayko @brianmario\n\u2014\nReply to this email directly or view it on GitHub.\n. would love if there was a more efficient way to do this down in C via ruby-core...\n. we might consider setting the encoding flag (for 1.9 only) on the return value here based on what was detected\n. Ah yeah I forgot about that... ;)\n. CharlockHolmes does use libicu4c, if that's what you're asking?\n. \n",
    "carlosmn": "You know that game where you're blinded, spun a few times and then have to put the donkey's tail in the right place? That's what determining the filename encoding in git is like.\nThe only people who have a an excuse for not using utf-8 are people on Windows using git < 1.7.10 and that should stop being an issue on its own.  UTF-8 is also the only way you can get your repo to behave across OSs and localized versions of the OSs so showing the encoded string should also help people realize that they're restricting where their repo can work.\n. ",
    "garethrees": "GitHub's Fork seems more active, but doesn't accept issues\n. ",
    "whitehat101": "This is a case of advanced git use and a poorly commented example.\nNo files are created in this test. However the git index is modified. The contents of the files are supplied as strings in i.add(fname, 'hello ' + fname).  The index is committed, but since files weren't created in the first place they become 'deleted' because they are not in the repo.\nIf you run git checkout master in the repo after running the example, you will see what you expected.\n. ",
    "snh": "Unless I'm misreading the source code, I believe Grit expects a Time object for since.\nBelow are some examples that should return commits since 1st August 2012 (examples provided for either Local Time or UTC Time):\nUsing the local class method of Time to generate a Time object for 1st August 2012 Midnight Local Time:\nruby\ncommits = repo.commits_since('master', Time.local(2012, 8, 1))\nOr using the utc class method of Time to generate a Time object for 1st August 2012 Midnight UTC Time:\nruby\ncommits = repo.commits_since('master', Time.utc(2012, 8, 1))\n. ",
    "akzhan": "It should correctly work on Ruby 1.9 series.\nMay be iconv will be required on ruby 1.8 but currently this code simply does nothing on ruby 1.8.\n. - encoding and decoded_message properties added on pure ruby commits.\n- initial git to ruby encoding mapping added (should be extended by reviewing of map warnings).\n- message property of Grit::Commit now is utf-8 always.\n. Ruby 1.8 code and tests will arrive in week.\n. Thanks for feedback.\n. ",
    "robb1e": "I'd like to see this commit, or at least this feature, included. I'm trying to build something which uses the time information for a distributed team and I'd like to retain the timezone information.\nCheers\nRobbie\n. ",
    "nickmccurdy": "Comment from @scttnlsn on the Dandelion issue:\n\nLooks like Grit (https://github.com/mojombo/grit) is not finding the name in the Git tree object: https://github.com/mojombo/grit/blob/master/lib/grit/tree.rb#L96\nI presume this is because the file is not being read with UTF8 encoding. Perhaps an issue should be opened for Grit.\n. This pull request might have what you're looking for: #178\n. :+1:\n. \n",
    "vmg": "This works, but is not pretty. On the other hand, rev-parse is not pretty, and I don't think there's any way to make it pretty.\n:+1::shipit::+1:\n. @rtomayko: I don't follow. How would that fix the issue? The paths becomes broken after the first rev-parse.\n. Burn it to the ground. I don't think there are any features not implemented in Rugged atm, so I definitely support closing all open issues and PRs in the repository.\n. ",
    "miketheman": "Oh, and here's a little loop over a Status to demonstrate:\n``` ruby\ngitrepo = Grit::Repo.new(@repo_root)\nstatus = gitrepo.status\nstatus.changed.each do |file|\n  puts file[1].sha_index\nend\n=> e3fe9b0197b5e06b3deee41ac99dcd9470044769\n=> 0000000000000000000000000000000000000000\n```\n. ",
    "jakedouglas": "Also adds a number of tests.\n. ",
    "ekohl": "According to https://github.com/ktoso/maven-git-commit-id-plugin/issues/19#issuecomment-3077417 this changed in 1.7.8. From https://lkml.org/lkml/2011/12/2/316:\n- When populating a new submodule directory with \"git submodule init\",\n  the $GIT_DIR metainformation directory for submodules is created inside\n  $GIT_DIR/modules// directory of the superproject and referenced\n  via the gitfile mechanism. This is to make it possible to switch\n  between commits in the superproject that has and does not have the\n  submodule in the tree without re-cloning.\n. ",
    "jakearchibald": "Would love to see this rolled in\n. ",
    "jfirebaugh": ":+1: I ran into this problem trying to use git up within a submodule. See aanand/git-up#24 and aanand/git-up#31.\n. ",
    "vad4msiu": "+1\n. ",
    "poysama": "@nand2 Yeah this could work. Thanks!\n. ",
    "fdiary": "I just posted a pull request for gitlabhq/grit. With my change, the code does not have any hardcoded version string and also it includes one more fix for ruby 2.0.0.\nhttps://github.com/gitlabhq/grit/pull/9\n. ",
    "zonuexe": "Sorry, I might do wrong recognition...\n. ",
    "davispuh": "LOL :D look at previous PR #152 \nseems Grit is abandoned...\n. ",
    "peff": "Yeah, exactly, I was worried about losing the \"b\" flag. Your fix looks good. Thanks.\n. No complaint here. The Rugged code should be better tested and maintained at this point. There might be places where it is missing features that Grit has, but I suspect they are not many these days. /cc @vmg and @arrbee\n. Yeah, that is just human-readable junk at the end of the diff. If we cared, we could match \\n--\\n\\d.\\d.\\d at the end, but I do not personally see any point.\n. ",
    "jonjohn": "I just noticed issue #54 which is a similar problem. This patch fixes that issue by allowing directories to be deleted using Index#delete('directory_name') but also goes further by ensuring that directories that have had all files removed from them also get removed automatically, enforcing the rule that you can't have empty directories in a git repository. Without either this fix or the patch in #54, it seems it is impossible to create a commit that deletes a directory from an existing tree read in via index#read_tree.\n. ",
    "dot": "you can write this way\nruby\nif ((defined? RUBY_VERSION) && (RUBY_VERSION >= \"1.9\"))\nwaiting this PR is merged, too\n. ",
    "harrycheung": "Just noticed tests under 1.9.3 aren't working. I'll put in a better fix for cross-version compatibility.\n. Tests work for both 1.9.3 and 2.0.0.\n. ",
    "alup": "@rtomayko any chance this to get merged :)?\n. ",
    "jacargentina": "Implemented and did pull request #164 \n. I've implemented this and already did a pull request (#164)\n. Ups, i closed the pull request by accident!\n. ",
    "reneflottweg63": "nice\n. nice\n. ",
    "ryosuzuki": "Withdraw because including bugs\n. ",
    "icy": "Ops my mistake this ticket is for another repository. \nI'm so sorry for the noise. Thank you!\n. ",
    "bf4": "Thanks :)\n. ",
    "zacksiri": "+1 for this\n. ",
    "BertramScharpf": "They are severe bugs. I did not complain but just wrote a fix. The fixes are really obvious. So, why don't you just merge it?\n. ",
    "maximerety": "+1\n. ",
    "arthurschreiber": "Hey @bkeepers!\nI know this is a bit off-topic, but is there a specific reason you want to keep on using Grit instead of libgit2/rugged?\nI'm just curious if you're missing any features and would love to get your feedback. :smiley: \n. ",
    "arrbee": ":+1: I'll be happy go through the Rugged vs Grit APIs a little more carefully and make sure that Rugged isn't missing anything important.\n. ",
    "mraaroncruz": "I'm using https://github.com/pythonandchips/git-presenter and getting the same error with:\n- ruby 2.1.0\n- ruby 2.0.0-p353\nbut it works with ruby 1.9.3-p448\nI am not invested in either project to look any further, but I hope this helps\nI'm on OSX 10.9.1\nbash\n/Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:108:in `unpack_object_header_gently': undefined method `>>' for \"x\":String (NoMethodError)\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:56:in `get_raw_object'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:32:in `[]'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby/repository.rb:84:in `block in get_raw_object_by_sha1'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby/repository.rb:83:in `each'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby/repository.rb:83:in `get_raw_object_by_sha1'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby/repository.rb:334:in `walk_log'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby/repository.rb:287:in `log'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby/repository.rb:306:in `rev_list'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby.rb:70:in `block in rev_list'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby.rb:211:in `block in try_run'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/2.0.0/timeout.rb:66:in `timeout'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby.rb:210:in `try_run'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/git-ruby.rb:70:in `rev_list'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/commit.rb:120:in `find_all'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/grit-2.5.0/lib/grit/repo.rb:381:in `commits'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/git_presenter-0.4.0/lib/git_presenter/controller.rb:48:in `create_slides'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/git_presenter-0.4.0/lib/git_presenter/controller.rb:9:in `initialise_presentation'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/git_presenter-0.4.0/lib/git_presenter.rb:18:in `execute'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/git_presenter-0.4.0/bin/git-presenter:8:in `<top (required)>'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/bin/git-presenter:23:in `load'\n        from /Users/aaron/.rbenv/versions/2.0.0-p353/bin/git-presenter:23:in `<main>'\n. ",
    "common-instabug": "This issue was accidentally created during integration with another service.\n. ",
    "ccoenen": "Gitlab has since also moved on to use rugged, the last commit to their fork has been six months ago. Still, their fork is ahead, and may be of value to someone.\n. ",
    "odigity": "Was wondering the same thing as @schmunk42, so thanks, @ccoenen.\n. ",
    "NewAlexandria": "Then probably best to refactor it into a separate method that is named as such.\n. ",
    "kainosnoema": "This aborts the commit if there's no pre-commit hook. Something like this is probably what you were intending:\nrb\nreturn false if hook && !hook.success?\n. "
}