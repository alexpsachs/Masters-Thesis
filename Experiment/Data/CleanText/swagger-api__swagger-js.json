{
    "fehguy": "done a long time ago...\n. Howdy, can you try something first?  We have a validator available now, it lives here:\nhttps://github.com/wordnik/swagger-codegen/tree/mustache/\nNote this is in the \"mustache\" branch.  You can build the client as follows:\nmvn package\nAnd run the validator like this:\n./bin/runscala.sh com.wordnik.swagger.codegen.spec.Validator ${path-to-resource} ${api-key} ${output-html-file}\nThis will tell you if the swagger spec produced by your server is valid.  If valid, the UI should support it.  I'll help work through the issue with the coffeescript but this would be a very helpful starting place.\nAlso can you comment on the server framework that you're using?\nTony\n. Got it.  I think you can solve this with how swagger has been architected as follows.\nIn your resources.json file, I think you want this:\njson\n{\n    \"apiVersion\":\"1.0\",\n    \"swaggerVersion\":\"1.0\",\n    \"basePath\":\"http://yada.com/api\",\n    \"apis\":[\n        {\n            \"path\":\"/content.{format}\",\n            \"description\":\"Mailing content\"\n        },\n        {\n            \"path\":\"/delivery.{format}\",\n            \"description\":\"Campaign mailings\"\n        }\n    ]\n}\nand in your content api something like this:\njson\n{\n  apiVersion: \"1.0\",\n  swaggerVersion: \"1.0\",\n  basePath: \"http://yada.com/api\",\n  resourcePath: \"/content\",\n  apis: [\n    {\n      path: \"/content.{format}/mailings\",\n      description: \"\",\n      operations: [\n        {\nand in your delivery api:\njson\n{\n  apiVersion: \"1.0\",\n  swaggerVersion: \"1.0\",\n  basePath: \"http://yada.com/api\",\n  resourcePath: \"/delivery\",\n  apis: [\n    {\n      path: \"/delivery.{format}/campaign/mailings\",\n      description: \"\",\n      operations: [\n        {\nI haven't used fubumvc before so not sure if that's doable.  But this solves the issue w/o changing swagger-ui or swagger.js.  Would that work?\nTony\n. great, post back with questions, or hit us in #swagger irc channel\n. thanks!\n. see here:\nhttps://github.com/wordnik/swagger-ui/issues/139\n. Thanks!  Reviewing...\n. closing, i'd like to avoid putting random data in the signature sample.\n. the whole apiKey and key name is really awful.  It's been refactored in this branch and pushed to npmjs.org under the version 2.0.0-develop.  This paves the way for oauth support and more intelligent header injection.\nThere is an accompanying swagger-ui based on this version of swagger.js as well, also in the develop-2.0 branch.\n. hey @pose, in the develop-2.0 branch, references to jQuery have been removed and the invocation layer is now isolated.  That means you can easily support a websocket transport in a much less invasive fashion.  Check out the branch and see if that makes life easier for the websocket support.\n. Hi, swagger.js works fine in node.js.  You can include the package from here:\nhttps://npmjs.org/package/swagger-client\nIs the dependency you'll want.  If you see issues inside node, please open a ticket.\n. Hi, try out 2.0.0-develop from npmjs.org, instructions are in this branch\n. Hi, if you want to run a sample, run swagger-ui/dist/index.html.  Alternatively you can run the sample against http://api.wordnik.com/v4/resources.json\n. If you look in the swagger-ui code, it's including swagger.js in the lib folder.  So same code--the UI just has some additional logic for the rendering.\nYou are right, though, the resources.json for wordnik api is busted.  Fixing that now.\n. Fixed the wordnik resource listing, btw\n. Please pull from master to get the latest example.html.\n. @novawave please look at this branch:\nhttps://github.com/wordnik/swagger-js/tree/develop-2.0\nWhich has proper support for relative paths.\n. should be addressed in #PR33\n. thanks for sharing!  Some of these ideas are getting wrapped into the 2.0 release, which is in this branch\n. this is based on the old coffeescript-based lib, should be handled in master now.\n. deployed in version 1.0.3\n. sorry for the delay, and thanks for submitting this.\n. Howdy, this is an old PR and much of the DRY work has gone into the 2.0 spec for swagger.  If you'd like to get involved in that, please see here:\nhttp://swagger.wordnik.com\nWe can't change the 1.2 spec without breaking a bunch of clients & tooling.  So 2.0 is the chance for improved spec design.\n. this is very old, and it should be addressed in the 2.0 spec.  Can you please take a look at how 2.0 is working and reopen if this needs to be addressed?  There is a notion of tags which will allow this.\nhttps://github.com/wordnik/swagger-spec/blob/master/versions/2.0.md#swagger-object-\n. I'm going to close this because this is intrinsic in the 2.0 UI support.\n. this should have been fixed in subsequent updates, please reopen if not.\n. Added to swagger-ui 2.0.8 and later\n. Great timing.  Did you see this?\nhttps://github.com/wordnik/swagger-js/blob/master/src/swagger.coffee#L736\nThe intention was to have pluggable signing mechanisms.  Would that do it for you?\n. Yes, it contains the request URL (populated), post body (if it exists), and headers:\njs\nobj = {\n  url: \"http://foo.com\",\n  method: \"GET\",\n  headers: {\"a\": \"b\"},\n  body: \"string body\"\n}\n. Yes!  Try the branch:\nhttps://github.com/wordnik/swagger-js/tree/develop-2.0\nOnly known defects are, file upload not working, and response codes are missing.\n. Hi, we are revamping all the documentation right now, but it's quite a job, so I'll answer here.\nYou can create your own processor for injecting headers like such:\n``` js\nCustomAuthorization = (function() {\n    CustomAuthorization.prototype.name = null;\nfunction CustomAuthorization(name) {\n  this.name = name;\n}\n\nCustomAuthorization.prototype.apply = function(obj, authorizations) {\n  obj.header[\"custom-header\"] = computeFromUrl(obj.url);\n};\nreturn CustomAuthorization;\n\n})();\n```\nand inject it into the pipeline as such:\njs\nwindow.authorizations.add(\"my_authorization\", new CustomAuthorization(\"my_authorization\");\nIt will then be invoked on each request, and have access to the request obj\n. fixed in v2.0.6\n. yes, there's a slippery slope here--the system is not json-schema compatible, it's \"json-schema inspired\".\n. I'm not saying it's a bad idea, I'm just contemplating whether or not we should be showing a different representation of the swagger models than what is actually sent from the server.  I tried to make json schema work for swagger but hit too many issues with it.  so let me think about this more first\n. @rage-shadowman i'm revisiting making the default representation of models in swagger to use json-schema in general.  This issue is not dead, quite the contrary.\n. FYI JSON-schema draft4 support has been added to swagger-core-1.3.0-RC3:\nhttps://github.com/wordnik/swagger-core/commit/850a8770c7cff5583f0ca900fd10c1b1d697552d\n. supported in 1.2 spec\n. Hi, the first thing I'd suggest is getting springmvc to use the swagger 1.2 spec:\nhttps://github.com/wordnik/swagger-core/wiki/1.2-transition\nThis should support defining maps much more easily, and I believe nested containers can be expressed as well.\nThe spec will be fully released in the next day or so.\n. The spec supports it, the implementation does not--the wiki will be updated with the how after the implementation picks it up.\n. Hi, this means the JSON-schema supports maps.  It is done like this:\njson\n        \"properties\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"$ref\": \"ModelProperty\"\n            }\n          ]\n        },\nSo the JSON spec covers this, but the code to read it does not.  Working on supporting that soon.\n. hi, the path should be this:\nhttp://petstore.swagger.wordnik.com/api/api-docs\nnote, no \".json\" at the end.  That should do it.\n. I'm not clear what's happening.  You can definitely run this off the filesystem.  You can join irc.freenode.net #swagger and we can chat about it \n. @df-jsykes i think we resolved this in IRC.  If so can you please close?\n. Yes, we'd like to support this, but it'll be under swagger-codegen.  I'm closing this and will opne a new ticket in codegen that you can reference.\nhttps://github.com/wordnik/swagger-codegen/issues/89\n. yes, you will need to get creative.  The path params can't really be injected with the authorization strategy since that happens after the request URLs have been built.\n. If I had that same setup, I would do the following.\n1) add an {api_key} path param to each api\n2) hack swagger-ui to hide the fields with that name\n3) on the change listener in your ui, update the fields with that selector\nThat will do what you're after.  It will dump the key in the field, and pass it\n. please reopen if still relevant\n. Hi, this will fail if swagger-js is used in a headless fashion, such as with node.js.  Wouldn't the best way to set the URL be in the javascript which configures swagger-ui?  Or are you looking outside of swagger-ui, and going directly to the library?  See here for what i mean:\nhttps://groups.google.com/forum/#!searchin/swagger-swaggersocket/window.location/swagger-swaggersocket/Bz6lUjdUpOs/dyQ_b6n8AOQJ\n. please take a look at #92 \n. I put up a short page on handling CORS issues, you might look here for some other tips:\nhttps://github.com/wordnik/swagger-core/wiki/CORS\n. you'll only see that message if there is no other callback set in the library.  reopen if you still have trouble\n. supported in 2.0 with a single file, and can be passed as a variable with the spec input argument\n. this will be addressed in support for swagger 2.0\n. Hi, swagger-js doesn't try to turn it into an object.  It should, and we'll get that addressed.\n. the response now has an optional \"obj\" attribute, which is the auto-parsed object.\n. Hi, is this still relevant with the refactor in swagger.js?\n. This works, but note that most of the swagger tools will NOT work with relative base paths.\n. Hi, the swagger-node-express module is producing a swagger-1.1 spec.  The current spec is 1.2--the module will get updated shortly to produce 1.2.\n. Should work just fine\n. swagger-node-express has been updated to 1.2, so closing this.\n. in v2.0.8\n. Hi, you should only have to do something like this:\n``` js\nvar client = require(\"swagger-client\");\nvar swagger = new client.SwaggerApi(\n  {\n    // put your swagger resource listing url here\n    url: \"http://localhost:8080/api-docs\",\n    success: function() {\n      if(swagger.ready === true) {\n        // note this will be different depending on what your service does\n        swagger.apis.events.findEventById(\n          {\n            // args to your api\n            eventId: 1\n          },\n          function(data) {\n            // success function\n            console.log(\"got data: \" + data.content.data);\n          }\n        );\n      }\n    }\n  }\n)\n``\n. please reopen if necessary\n. Easy.  just override the host / basepath / scheme usingsetHost`, etc.  Or write a request interceptor to rewrite the URL\n. this will be handled in support of the 2.0 swagger spec.\n. I've updated the readme.\n. we might want to rename the property from rawModels to something else in the future\n. Hi, the model rendering needs to become pluggable, imho.  it also needs to move out of swagger-js.  I'd like to have it simply return the JSON-schema representation in here, which is consumed and rendered appropriately in swagger-ui\n. That's correct.  I think the model rendering should live in the ui, and the javascript should only deal with model resolution.\n. this will be handled in the 2.0 version of swagger\n. in v2.0.7\n. created branch https://github.com/wordnik/swagger-js/tree/coffee-free with preliminary check-in to lib/swagger.js\n. thanks!  Pushed to npmjs.org as 2.0.19\n. confirmed fix in swagger-js 2.0.26\n. yes, good catch.\n. Hi, I'm going to close this as the serialization of arrays with different formats is part of the proposed 2.0 spec.  If you're not in that conversation, get to http://swagger.wordnik.com to join in.\n. I'm a tiny bit lost (probably not enough sleep)--do you have a server up and running with a relative base path that I can look at?\n. closing as #92 was merged.\n. Hi, can you tell me what version of swagger-js you're on?  Look in the top line or two of the swagger.js file.\n. Yes, if you're passing an array, you have to specify the inner type of the array like such:\nprimitive array values\njson\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\"\n  }\n}\ncomplex array values\njson\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"User\"\n  }\n}\n. @gregwebs can you share the invalid spec that is giving the error?\n. Hi, not sure what this PR is for--I don't think develop is ready to merge into master yet.\n. fixed in master\n. Yes, you should run this sample locally:\nhttps://github.com/wordnik/swagger-core/tree/master/samples/scala-jaxrs-fileupload\nThe tests used to point at the online petstore but people kept deleting pets, making it too hard to rely on :(\n. thanks--there was an issue with numeric path params, you should see tests running just fine now.\n. I have a clean test suite following these instructions:\nin swagger-core:\ngit checkout master\ncd samples/scala-jaxrs-fileupload/\nmvn clean package jetty:run\nin swagger-js:\ncake dev\n. This is in development--you can now bundle-up an object to represent the swagger responses.  You can see it here, it's not released yet as it'll probably change some...\nhttps://github.com/wordnik/swagger-js/tree/develop\nThe multiple call bug is a known issue.\n. Closing this issue as there are multiple work-arounds.\n. eh I didn't know it was redefining that.  It must be in the bundle.\nI believe you can exclude the shred.bundle.js and force useJQuery=true when initializing the client.\n. Hi, I believe you can include the shred libraries instead of shred.bundle to avoid this.  Can you try and report back?\n. merged\n. It's in version 2.0.31 I believe, which is master\n. hi, can you open an issue in shred for this?  https://github.com/pandastrike/shred\n. this was handled in #92 \n. yes, this is the right spot.  I should have spotted that--good to have it in both places\n. best in both places\n. While a bit convoluted, the opts are indeed passed on to the SwaggerRequest object, which lets opts.requestContentType be passed in that hash.  Is that what you're asking?\n. added along with tests\n. Hi, I've rebased and merged your changes into the subtypes branch.  A couple tests are failing so I'll have to dig in more later.\n. You are correct.  I just fixed one variable for post types.\n. I have to close this out because of code drift.  Sorry @garryyao for lagging on getting it merged.\n. supported in 2.0.34\n. somehow the declaration for consumes was removed.  It should default to application/json I believe\n. Yes, to both.  It wasn't implemented at the top-level resource for swagger.js it appears.\n. pls reopen if you're still seeing this\n. @oztu the tests are run by having this server up:\nhttps://github.com/wordnik/swagger-core/tree/master/samples/scala-jaxrs-fileupload\n. when you add authorizations, the first argument is a \"friendly name\" for the key.  So if you have \"bearer\", you cannot add it again, since authorizations are stored in a hash.  If you want to apply another authorization, use a different key name other than \"bearer\"\n. But why would you have different Bearer tokens for a single user instance?  You can apply different bearer tokens to each operation, but having them interchange seems like an odd design.  Can you explain more?\n. Hi, interesting, and I agree that we need to address this.\n. are you using the 2.0 spec (develop_2.0 branch)?  It makes sense to make these instance-level configurations.\n. We need to make the authorizations apply to the instance of swagger-client and not expect global scope.  This should be trivial.\n. subtypes will be in the next milestone.\n. There is too much drift to get this in.  Sorry @Larry0ua for lagging on it.\n. fixed in 2.0.38\n. This is addressed in the develop_2.0 branch:\nhttps://github.com/swagger-api/swagger-js/commit/e6792a340acddf7b11d6e94f32bb8a0eeda0e6a2\n. So you're saying that, if the server says \"it's JSON\" we need to be afraid that it's not?\nThe out.obj should only be set IF it's the object expected from the server.  So inventing a new object type with key string is going to cause other problems.\nRegardless, wrapping the parse in a try/catch isn't going to hurt anything, and is easy to add.\n. hi, what version of swagger-client are you using?  Are you using a 2.0 spec?\n. The develop_2.0 branch has swagger spec 2.0 support\n. Addressed and tested here:\nhttps://github.com/swagger-api/swagger-js/blob/develop_2.0/src/js/swagger.js#L567-L580\n. we're on 2.1.9-M1.  Can you please try that?\n. You can now set headers by passing swaggerRequstHeaders when constructing swagger-js\n. merged in https://github.com/wordnik/swagger-js/commit/5b63cf47493b26de663a80b591cbe107e9aec631\n. please add tests to the test directory with any regression.  I want as much coverage as possible.\n. yes, this is a bug in swagger-js right now.\n. i propose we keep this in the swagger-ui issue #374\n. added long ago. I envision this would be part of the initialization of swagger-js (and therefore swagger-ui).  Something like this (see defaultContentType below):\njs\n    $(function () {\n      window.swaggerUi = new SwaggerUi({\n      url: \"http://petstore.swagger.wordnik.com/api/api-docs\",\n      dom_id: \"swagger-ui-container\",\n      supportedSubmitMethods: ['get', 'post', 'put', 'delete'],\n      defaultContentType: '*/*',\n      onComplete: function(swaggerApi, swaggerUi){\n        log(\"Loaded SwaggerUI\");\n        }\n        $('pre code').each(function(i, e) {\n          hljs.highlightBlock(e)\n        });\n      },\n      onFailure: function(data) {\n        log(\"Unable to Load SwaggerUI\");\n      },\n      docExpansion: \"none\",\n      sorter : \"alpha\"\n    });\n. This was resolved in 2.0.39, released a few days ago.\n. fixed with https://github.com/wordnik/swagger-js/commit/951beed75fffc39d5e06cbea4a0ffb4486a3be93\n. hi, i think this is a good feature but we need to be careful about both the signature and nature of the calls.  For instance, it's fine if it's a synchronous interceptor but doing something that chains the response in a callback will certainly break the clients.\nI'd like to push this into a future release but keep the feature request open so we can work through first the ideal behavior, and next the signature for the interceptor.\n. now that SwaggerHttp is pluggable, this poses another challenge.  Should the interceptor be handled in the pluggable client?  Looking into this more.\n. Thanks.  the 'var status' is missing, and will be added.\nAlso yes, the authorizations should be applied if required.  Will look into why it's not being applied.\n. this should be addressed in 2.1.0-M1\n. Hi, there are some fixes in here but another change in behavior.  It looks like you are adding a hash when top-level operations don't exist, but that triggers sending authorizations on every request.  We need to apply all authorizations if the authorizations key isn't defined, and NONE if it's empty.  This PR changes that behavior, if i'm not mistaken.\n. I'd like to get this merged, but will need to spend some more time on it based on the comments I made.  In addition, the testing framework for swagger-js has been massively upgraded, and if you can please help provide tests to demonstrate the fixes, it'll help out a ton.\n. this requires removing globals, which needs more work in swagger-ui.  moving to m2...\n. Hi, I haven't merged this feature yet because it's not supported in the 2.0 specification, and I'm trying to avoid drift between the capabilities of the two.\n. my bad @callenx.  Thanks @webron \n. I believe this was addressed by https://github.com/swagger-api/swagger-js/commit/b692647cd6d6da4852e8ea88bc8dc38755a2f7a8\n. it's probably giving an error because people are abusing the server and uploading all sorts of junk.  Try using a unique filename, I've just verified it is working as expected.\n. The issue is mimepull is writing a temporary file.  Feel free to send a PR:\nhttps://github.com/wordnik/swagger-core/blob/master/samples/scala-oauth-authorization-server/src/main/scala/com/wordnik/swagger/sample/resource/PetResource.scala#L81-L85\n. I will get the handling out of swagger-ui and into swagger-js shortly.  The challenge is, swagger-js works without jquery (headless) and needs to support the upload as well.\n. got it, I don't think this version of shred will work with binary post then.\n. Please follow this ticket to track a converter.\nhttps://github.com/wordnik/swagger-codegen/issues/278\n. Yes, looks like we're not checking for self references\n. addressed self-references in https://github.com/wordnik/swagger-js/commit/72d8004c5a4489ed8a75665c4174f15818057ad3\n. added https://github.com/swagger-api/swagger-js/commit/30eb4f30af13df59ca58baedf310ccfc66f18835\n. you can now create a javascript variable and pass it to swagger-js as a spec argument.\n. you can now pass defaultSuccessCallback and defaultErrorCallback in the opts when creating the swagger client.  See:\nhttps://github.com/swagger-api/swagger-js/blob/master/test/defaultCallbacks.js#L9\nand \nhttps://github.com/swagger-api/swagger-js/blob/master/test/defaultCallbacks.js#L35\n. see https://github.com/wordnik/swagger-js/commit/72d8004c5a4489ed8a75665c4174f15818057ad3\n. yes, if you follow the links, this was a duplicate issue of https://github.com/swagger-api/swagger-ui/pull/765 and it was closed 2 years ago.\n. Type cannot be an array in swagger, even if permitted in json schema.\n. Take a look at the swagger spec to see what's supported:\nhttps://github.com/wordnik/swagger-spec/blob/master/versions/2.0.md\n. Looks like this was already merged.  I do think putting a release task in the cakefile would be great so it can be part of the release process (we're at 2.0.47 now).\n. Hi @Aigeruth, a couple thoughts.\n1) The repositories in the package.json are now under the swagger-api github account, not wordnik\n2) We probably would want to push a minified version, including the dependencies in a single bundle\n3) I'm redoing the tests right now, and suggest you hold until 2.0.48 is released\nMake sense?  Also when we release 2.1.0, the two libraries (swagger.js and swagger-client.js) will be merged into one.  Currently they are separate to allow for independent development of the different versions of the swagger spec.\n. hi @Aigeruth 2.0.48 has been released.  I'd suggest redoing the PR with that library.\n. fixed in https://github.com/wordnik/swagger-js/commit/f2a5ae3903a492a4db928850bcfa65475263d727\n. I think you're right and this won't make much sense for this project.\n. I don't know how this regressed, maybe the shred library was updated?  Regardless, you are correct, and I'll get an update released.\n. You can change the CSS.  I don't see why this should be a configuration in the app.\n. Hi, what version of swagger-client are you using?  It should be at the top of your swagger.js file.\n. set your url to use https and it should be fine.\n. correction--change the URL to include the full resource path:\nnew client.SwaggerApi(\"https://api.wordnik.com/v4/resources.json\" ...\n. i'm opening a different issue to resolve the redirect support.\n. I can get to this shortly. \n. looks like swagger-js is doing the right thing, this is a ui bug.\n. Updating the testing framework is something that I'd really like to get a contribution for.  I'll send you a swagger shirt and chocolates, and everyone will appreciate it.\n. You never fixed any JavaScript \n. charming ron.\n. ok i'm confused too--so are we covered here?  Just making sure.\n. My question is for @jgoeres, to make sure he is covered.\n. this has been addressed in https://github.com/swagger-api/swagger-js/pull/165\n. the issue above should be resolved with #162.  Please reopen if not.\n. This can be handled by #152 \n. hi, the swagger-client.js file is built by editing the files in the src/main/javascript folder, and running cake bake.  Can you please apply your change to the swagger.js file in that folder and resubmit the PR with those changes?\n. Yes, we are working on a new test strategy for the develop_2.0 branch.\n. Please see https://github.com/swagger-api/swagger-js/commit/0fda6ae0b58d2ce9d42893f1c6b8843159366b52\n. I think you mean the value args[param.name] === false?  I do think that can be an issue with this logic.\n. see 2.0.45 of swagger.js\n. @webron yes that is a bug in the js library.  I'll see that it is fixed for #/definitions/Cat and we can wait for the resolution on canonical references.  I'll have to review that issue before I can comment on it--it seems we went through this dance during the 2.0 spec development.\n. we can open a different issue with the removal of direct references.\n. @brodyd help me understand more, can you please provide an example?\n. Sorry this caused a problem. Unfortunately the swagger node integration made the name configurable, which let you put something other than body as the name. So this change, which fixes other out-of-spec behavior, causes yours to break.\nI'll look at your doc shortly, I'd like to avoid breaking clients especially if they out out of spec from our tooling. I expect a whole lot less of this for swagger 2.0 spec support but in the mean time, we'll have to deal with it. \n. Can you please send a PR?\n. Thanks and apologies for this sneaking back in.  See here:\nhttps://github.com/swagger-api/swagger-js/pull/165\n. Hi, this was resolved in #165\n. This is supported, however to make the feature as flexible as possible, the signature to the macros has changed slightly.  For parameter macros, we now pass the operation and parameter as context, allowing return of the defaultValue.  For Model properties, we pass the model and model property.  Please see here:\nhttps://github.com/swagger-api/swagger-js/blob/master/lib/swagger.js#L24\nand here:\nhttps://github.com/swagger-api/swagger-js/blob/master/lib/swagger.js#L35\n. Yes, we are looking at moving them out in the 2.1 release\n. addressed in https://github.com/swagger-api/swagger-js/commit/0fda6ae0b58d2ce9d42893f1c6b8843159366b52\n. @whitlockjc i think gulp would probably be the best choice right now\n. replaced with gulp build\n. addressed in https://github.com/swagger-api/swagger-js/commit/5b60f2abe3aa3b8dc81dae82b3bf369e2ffc9d78\n. Please be patient, this will have formal support shortly\n. addressed in https://github.com/swagger-api/swagger-js/commit/be447c4c54c5afec024113042390bd8a0e28ba25\n. This has been addressed in https://github.com/swagger-api/swagger-js/commit/30fb9af8decf81e0f671dc4f58fc937304bef5c2\n. I have verified this fixed for the 2.0.48 milestone.  Need to ensure it's addressed in the 2.1.0 branch\n. fixed in develop_2.0\n. Need more data.\n. the intent of this issue is to support the spec, for purposes of composition which means adding the discriminator.\n. allOf is supported in devleop_2.0.  discriminator support is tracked here:\nhttps://github.com/swagger-api/swagger-js/issues/469\n. This is planned for 2.1-M2, which is in development.  Currently it is not supported in 2.1-M1\n. addressed in https://github.com/swagger-api/swagger-js/commit/30eb4f30af13df59ca58baedf310ccfc66f18835\n. All I believe if you go through the workgroup discussions, this format was supposed to be in the spec.  It's a very common array specifier for query params.\n@ddm please look at swagger-js\n. intended to address #180 \n. Thanks for this--I'll review today\n. I've gone and linted the source, closing this pr.\n. moving to m2\n. Thanks, you'll see a version in npmjs.org shortly.\n. duplicate of #116, but against 1.2 specs\n. this is tested and working fine in swagger-js 2.0.48\n. thanks added tests as well for both cases.\n. this should be fixed in develop_2.0\n. Yes, when you configure swagger-js you can pass the spec directly to it, which means it can be bundled up in a single file with the entire swagger definition in it.  Is that what you mean?\n. Yes, you can simply set your swagger spec to a variable:\njs\nvar spec = { swagger: \"2.0\", host: \"http://blah.com\"... }\nand pass it when initializing the client:\njs\nvar client = new SwaggerClient({spec: spec, ...})\n. supported in M1\n. Yes, I'd like to do so but I want to avoid bringing in any large dependencies into the project.  Last I looked at it, we'd have to fatten up the library quite a bit to use common promise libs.  I know the JS world moves fast, so if we can bring lightweight support in, I'm all for it.\n. I'm going to move this to future, since it'll break current (client) api compatibility.  It is cleaner and will revisit in the future.\n. Please open this on swagger-codegen then, @SunboX.  This project does support promises.\n. Hi Nathan, thank you for the details on this.  A couple thoughts:\n1) the exports pattern you're using makes sense and would be good for a PR if you could\n2) the shred version we're using is behind their trunk.  The shred folks have taken a new approach to the library, so we may continue with a fork of it, and continue to patch it.\n3) is cookiejar included in shred.bundle, which you're not pulling in via browserify?\n4) i'm not sure how to dig into the buffer issue that you've come up with.  I do believe you, but have never hit that before.\nWe have recently updated the test framework and should be able to have good mocha tests around each of the above issues.  That would be the first step.\n. Hi @nhagen there are two js library dependencies for the purposes of compatibility.  The jQuery library is used for older versions of IE automatically.  It is also used for file uploads as that's not supported in shred.\nThe problem with jQuery is that it was causing trouble when deploying to node.\n. much deeper than that.  It's in IE's ability to handle functions in object declarations.  It was a big problem for IE7, 8 compatibility\n. Hi sorry for the delay getting to this--I'm trying to get M1 released and will not be able to verify these changes by that time.\nOne thing I'll mention is that we have added mocha tests for lots of this, and they are fairly comprehensive.  All in the develop_2.0 branch\nSo thanks again for the contrib, will be getting back to this PR after the weekend.\n. where are your tests?\n. Fixed in #214 \n. ok thank you.  The output, lib/swagger-client.js, is generated by running gulp build.  It's built by all the files under src/js so your patch needs to be made on those files.  Can you please update the PR for that?\n. BTW this is in develop_2.0 branch, which is where swagger-client lives:\nhttps://github.com/swagger-api/swagger-js/tree/develop_2.0/src/js\n. this is fixed\n. thank you\n. this isn't needed anymore.\n. fixed in master, will be in 2.1.1-M1\n. If you look at the src structure and gulp tasks, you'll see that swagger-client is built from files under src/js. When running gulp build, your changes will be lost. Please modify the src contents \n. My bad, scrolled past that part of the commit. Sorry!\n. you can now pass opts to the client when making the calls:\nnew SwaggerHttp().execute(obj, opts);\nThese opts will flow to which either client specified as in obj.useJQuery.\n. the createJSONSample needs to support maps:\njson\n{\n  \"string\": ...\n}\nas does the getMockSignature function\n. Yes that sounds correct\n. Will this work with \"flat\" model definitions?  Meaning, you have an in-line definition for social which should also behave correctly if it's a $ref\n. Hi, currently file upload strictly with swagger-js is not supported.  There is a branch to move the file upload INTO swagger-js for browsers, but this does not support node.\nI do think, though, that file upload from node is the easy part.  I want to get it into the library, where jquery is required for the browser-based upload, and node can do it natively inside the lib.\nLet's use this ticket to track progress, my goal was to move the file upload support out of swagger-ui and into swagger-js in the 2.1.0-M2 release.\n. That'd be great.  Let me post back here once I get the fileUpload logic merged into develop_2.0..  Thaks for offering!\n. The file upload logic has been merged into 2.1.8-M1 for swagger 2.0 specs only.  It's triggered here:\nhttps://github.com/swagger-api/swagger-js/blob/develop_2.0/src/js/swagger-a.js#L677\nI think the right thing to do is to add logic for node here, where if useJQuery is not set, it'll fire the node logic for preparing the body param object.  Then in the underlying ShredHttpClient:\nhttps://github.com/swagger-api/swagger-js/blob/develop_2.0/src/js/swaggerHttp.js#L138\nWe can determine that the file is going to be read from node.  Make sense?\n. added in 2.1.19 and greater. Please look in the tests, there are tests for both browser and node-based file uploads. Well!  I thought the tests were tighter.  Please see here for browser based upload:\nhttps://github.com/swagger-api/swagger-js/blob/master/test/browser/petstore.js#L17\nAnd I'll get some tests implemented for node uploads as well.. OK but in general are you using swagger 2.0 specs or 1.2?  There is a fix coming for the 1.2 specs to avoid the swagger.ready check.\n. ok there was a bug in loading the client with useJQuery: true.  I can't speak to your script but you can update the client to 2.1.4-M1 and report back.\n. hi, thanks for submitting this.  A couple things:\n1) Please send this into the develop_2.0 branch since master is release, and we don't release with every PR merge\n2) The source should be in the src/js folder.  running gulp build will blow away the swagger-client.js folder\n3) If you can add tests, this will merge much, much faster.\n. thank you so much\n. Hi, I'm trying to write some tests around this.  Can you please share a couple things:\n- In your swagger JSON, what will you see in the path value?  What you're showing is coming across as such:\njava\n@Path( \"/{first : (?i)[\\\\w]{2}[\\\\d]{2}}5/{second : (?i)[\\\\d]{4}}\" )\n\"path\": \"/pet/{first : (?i)[\\w]{2}[\\d]{2}}5/{second : (?i)[\\d]{4}}\"\nBut what are the substitution values?  What are you try ing to replace?\n. Yes, I'd like to get this in the next release, @andrewdavidmackenzie It's needed also to address a regression in IE.\n. added by https://github.com/swagger-api/swagger-js/pull/428\n. fixed in https://github.com/swagger-api/swagger-js/commit/052cb26c044fbb69a3a5c8773c797f945eac2f9a\ntested in https://github.com/swagger-api/swagger-js/blob/052cb26c044fbb69a3a5c8773c797f945eac2f9a/test/compat/oob.js\n. tested in https://github.com/swagger-api/swagger-js/blob/052cb26c044fbb69a3a5c8773c797f945eac2f9a/test/compat/oob.js\n. Hi, this is because I just deployed a new version of the petstore, which uses the tags object and names the resource pets (plural).  I will revert that name change, since it will cause some headaches.\n. Ok this has been redepoyed and the js client fixed.  And tests to make sure it doesn't break again!  Grab 2.1.6-M1.\n. Thanks--if you could, please send the PR to the corresponding src folder in the develop_2.0 branch and I'll merge it.\n. Thanks, closing this pr \n. While this is easily added, it will cause other issues under some circumstances.  @q7a I do not think we can determine automatically whether or not to pass withCredentials without developer hints.  How do you envision telling the js client that withCredentials should be set?  An initialization option?\n. Since you can supply your own HTTP transports now (see https://github.com/swagger-api/swagger-js/blob/master/test/client.js#L308-L325), you can easily support this, and without hacking the swagger-js code.\n. @blop more details?\n. Thanks, see the test structure and let's get some in for this\n. added support to process path references when escaped\n. @mohsen1 can we get some tests around this?\n. see https://github.com/swagger-api/swagger-js/issues/255\n. closing as this is covered in #255 \n. There are similarities when done right, once you fetch the apiDeclaration files. My thought was that the transformer would be rein single for fetching the additional files (with authentication as needed) by using the same underlying swaggerHttp object. We then have different transformers for each spec version. Make sense?\n. My view on the API to invoke the transformer is something along these lines:\njs\nvar spec = ....;\nvar version = parseFloat(spec.version);\nif(version === 1.2) {\n  new Swagger12Transformer().resolve(spec, // spec passed in by swagger-ui\n    self.buildFromSpec, // callback to build the client from a 2.0 spec\n    self);              // scope for the callback\n}\nelse if(version === 1.1) {\n  // ...\n}\n. this would allow us to remove the entire swagger-compat.js class.\n. see here: https://github.com/swagger-api/swagger-js/pull/309\nRemaining tasks:\n- [x] migrate api descriptions to tags\n- [x] add security definitions\n- [x] handle .{format} on execute\n. Take a look at the test/operation.js and you should see how to mock your own operations and test the generated query string\n. Yes I didn't notice this was for 1.2. For now yes, adding an operation is the best way\n. Thanks, I want to support the notion of request and response interceptors but am not sure if options is the right place for it.  Off the top of my head, we should follow a pattern like the authorizations, where we expose a mechanism to add response interceptors in the library and add to them as needed.\n. I will get this implemented in https://github.com/swagger-api/swagger-js/issues/126\n. Hi, this has drifted enough that I'm going to close it.  Apologies.\n. @whitlockjc can you look at this?\n. @aurelian does super agent encode support uploading files via FormData?\n. Yes, we should try, though, to not fail when we see null.  @whitlockjc this is probably an easy fix.\n. OK this PR came to be because of an issue in the server sending nulls.  Even if accepted, it'll create other issues to have nulls.  Since the code has drifted (no fault but our own), I'm going to close this out and open another tracking issue to keep tabs on null issues in general.\n. this should be covered already in the refactoring.\n. yes @doublemarked this is a new bug.  Working on a fix and tests so this won't happen again.\n. fixed in v2.1.10-M1\n. you can get sample response headers from the petstore api now:\nhttp://petstore.swagger.io/v2/swagger.json\n. I thought i replied to this.  There is a response header definition in the spec, which should be part of the \"model\" returned by each operation.  That's different from what response headers actually come back from the server.\n. I believe the spec does not support nor prohibit encoding slashes in path params.  Let me get input from @webron on this and if it is supported, I'll clean and merge this.\n. corrected: wrong link\n. closing as not in the spec :(\n. See https://github.com/swagger-api/swagger-ui/pull/1010\n. As this is not supported in the spec, I'm closing it\n. You need to define what is required in each of the operations.  If there are no security requirements defined on an operation, all headers will be sent.  Other wise, it will send only the ones defined, or \"none\" if that key exists but is empty.  Take a look here:\nhttps://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#security-requirement-object\n. Hi, this path is fairly well tested.  Please anonymize and share a spec and we can sort it out.\n. @xhh that makes sense to me.  @whitlockjc can this get into the queue?\n. Hi, you can send the pull request against the develop_2.0 branch, I'll leave it to @whitlockjc if it makes sense to merge.  You can pull authors from the package.json\n. I believe this used to work, must be a regression.\n. I propose we move this to a future swagger-ui release, where the rendering will live in the UI code, not JS.\nhttps://github.com/swagger-api/swagger-ui/issues/1248\n. let's move to here https://github.com/swagger-api/swagger-ui/issues/1248\n. Yes, you should not have that dataType in your annotations.  Please open an issue in swagger-core so we can define the map correctly.\n. @todd-richmond it should appear--have you tried with the 1.5.3-M1 release?  This test:\nhttps://github.com/swagger-api/swagger-core/blob/develop_2.0/modules/swagger-core/src/test/scala/ModelConverterTest.scala#L17\nBased on this model:\n``` java\npublic class Person {\n  private Long id;\n  private String firstName;\n  private Address address;\n  private Map properties;\n  private Date birthDate;\n  private Float floatValue;\n  private Double doubleValue;\n// ...\n}\n```\nshows the expected output.\n. for debugging purposes can you either:\na) add a test case with an anonymized model in swagger-core/develop_2.0\nb) change your map value model to be a public class rather than a static inner class?\n. this is actually addressed in swagger-js and will appear in swagger-ui after the next release.\n. pass an error handler:\nswagger.apis.getPetById({petId:1}, function(success){...}, function(error){...});\n. @whitlockjc yes--if you look here:\nhttps://github.com/swagger-api/swagger-js/pull/309\ntest/compat/modelSignatures.js has a disabled test which should be re-enabled\n. @whitlockjc it looks like the json sample for this:\njson\n{\n  \"Animals\": {\n      \"id\": \"Animals\",\n      \"properties\": {\n        \"cat\": {\n          \"type\": \"Pet\"\n        },\n        \"dog\": {\n          \"type\": \"Pet\"\n        },\n        \"mouse\": {\n          \"type\": \"Pet\"\n        }\n      }\n    }\n}\nis writing like this:\njson\n{\n  \"cat\": {},\n  \"dog\": {},\n  \"mouse\": {}\n}\nI'm expecting it to have the Pet model for each of the attributes.\n. if it's a converter issue, please reassign to me.\n. @whitlockjc can you please take a look at this?  Per comments, there are a few disabled tests.\n. seems like there's really only one way forward, which is to expose the JSON schema from the client and let the front-end render it in whatever format it needs\n. required for https://github.com/swagger-api/swagger-ui/issues/1248\n. Schema is now available.. @whitlockjc can you comment on this?\n. see https://github.com/swagger-api/swagger-js/pull/280\nNeed feedback from @webron \n. can you please share more?  There are many places where descriptions live:\nhttps://github.com/swagger-api/swagger-js/blob/develop_2.0/test/compat/converter.js#L51\n. Added tests to confirm working.  If you see an issue, please reopen with some specifics.\n. Please retest with the latest in develop_2.0 and reopen if you're still having an issue.\n. @ponelat can you take this?\n. @whitlockjc this logic looks good to me.  Do we need to change any code?\n. @whitlockjc my bad for taking a while to get back to this.  I believe we actually used to return rendering operations for all models inside response codes.\n. This has been implemented. OK digging into this more, here's some feedback.\nCurrently the content-type is NOT set if there is no body passed in the request.  This is good and bad--namely it will not set Content-Type to application/json if you don't pass an object.  The bad is that because the content type isn't set, the server has to guess.  And depending on the server implementation, this is potentially a problem.\nFirst we need to pass Content-Type regardless of presence of a body.  Then we can detect that it's application/json and set it to an empty object.\n. see https://github.com/swagger-api/swagger-js/commit/a6b21420bdf2d3440e3d52eb17736813a8f9bba9\n. it will be 2.1.0-M2 in NPM but I have one test failure that needs to be fixed before releasing.\n. Master is the release branch and we don't accept patches directly to it--please send your PR into develop_2.0.\n. please send to develop_2.0 branch\n. handled in https://github.com/swagger-api/swagger-js/pull/336#issuecomment-87767646\n. This belongs in the resolver.js\n. OK we will update the documentation on this but...\n@TrentBrown @ethanjcohen as @whitlockjc said, you can pass your spec as a variable by using the spec property when initializing swagger-js:\n``` js\nvar opts = {};\nopts.spec = {\n    swagger: '2.0',\n    //....\n};\nsample = new SwaggerClient(opts);\n```\nFor #3, you can pass a error callback as well:\njs\nclient.getPetById({petId: 3}, function(success) {\n  /* success */\n}, function(error) {\n  /* error */\n});\n. We will keep this in the README.  the wikis tend to rot quickly...\n. I do think this stuff belongs in the README.  The best reference is the unit tests but we all know that human documentation is best.  @indolering if you have cycles to help with a PR, I'll send you chocolates.\n. I would really appreciate that.\n. I believe that all documentation can always be better.  If not by content, then with nice fonts.  We've added a lot of documentation since this was opened, so...\n\n. should be fixed in https://github.com/swagger-api/swagger-js/issues/353\n. @whitlockjc can you look at this?\n. hmm could you send a PR and we can test?\n. this shouldn't be necessary--you can pass an array as the input rather than a CSV.\n. This should be fixed by 8030793c248229a52ee6ad8344a986c3be027f78\n. fixed in 8030793c248229a52ee6ad8344a986c3be027f78\n. It will be released in the next dot version, which I expect in the next 2 days.  In the meantime, feedback/testing would be great.\n. Hi, i'm looking into this but if it was not working the 1.2 tests would fail.  Can you please share more details with the issue?\n. 1.2 tests are covered here:\nhttps://github.com/swagger-api/swagger-js/tree/master/test/compat\n. any of the tests under that folder are testing 1.2 compatibility.\nJust run mocha test/compat/request.js for example.\n. Please look into the tests more--there are many tests, i'm guessing you're going to want to inspect https://github.com/swagger-api/swagger-js/blob/master/test/compat/converter.js\n. OK the cause of this issue is that the spec being passed in is not being passed by URL--it's being passed by object.  In this case, it's technically not possible to use a swagger 1.x specification, since they are, by definition, multiple files.  That makes it weird to pass as an object.\nThus there is no check for version when loading the spec property when passed in options.  It may be an issue for a newer version of swagger spec, but for now, it's not an issue.\n. What is the fetch library?\n. Got it. I'll look at getting this working \n. It was not.  Given that the 1.2 specs are multi-file and the spec is quite old, it doesn't make sense to implement it in this library.\n. This can only really be handled by enabling jquery.\n. Depends on #239 \n. Looks good\n. @mohsen1 swagger-client doesn't depend on jquery, so we can't add any reference to it.\n@BjRo the browser/* files are generated from the source files in lib during the gulp task, so upon rebuild your change will get wiped out.\nSeems like the proper solution is to manually do the trim as to avoid the query requirement?\n. I see.  Two thoughts.\nWe do have the response object in-hand here:\nhttps://github.com/swagger-api/swagger-js/blob/master/lib/http.js#L204\nSo it is possible to take the statusText and trim it.  However, I don't know if that's a general need across all swagger-js users and specific to your service.  So the right solution is probably this enhancement:\nhttps://github.com/swagger-api/swagger-js/issues/126\nSo you can plug in some special response processing.\n. @BjRo can we just use str.trim() to avoid the jquery dependency?  Aside from that, yes this is fine.\n. merging to develop_2.0\n. Thank you for this.  I'm going to close this out, and follow your pattern but with some changes.  Please watch issue #239 for updates.\n. fixed in https://github.com/swagger-api/swagger-js/commit/9b297d679728cd3b5b1dc723b55e2970d8173853\n. @whitlockjc can you please review this?\n. @ponelat looks good to me.  @whitlockjc could you please review and merge if good from your POV?\n. looks good to me\n. fixed in #399 \n. this should be fixed now.\n. OK while it would be very convenient that $ref and other fields could merge together, json schema simply doesn't support this.  I'm closing this issue, and we can put other requests in the swagger-spec project.\n. We should really be overriding the global accept header with whatever is defined by the operation.  Is that not the case now?\n. correct definition or not, the client shouldn't explode.  Should be fixed now.\n. this is for @whitlockjc \n. I hate to bounce this back to swagger-ui, but that's where this logic lives:\nhttps://github.com/swagger-api/swagger-ui/blob/master/src/main/javascript/view/OperationView.js#L327\n. Yes, it is supported.  You should follow something more like this, to properly handle the async nature of the building:\njs\nclient.initialize({spec: schema}, function() { \n  client.pets.getById({petId: 3}, function(response) {\n    // do something with your pet\n  }\n}\n. fixed in #409 \n. Hi, please help with a bit more of your spec.\n. I've verified that this is working correctly in develop_2.0:\nvar client = new swagger.SwaggerClient({\n      url: 'http://localhost:8001/v1/test1.json',\n      success: function() {\n        var out = client.supplier_contracts.getSupplierContracts({ids: 'abc'}, {mock: true});\n        console.log(out);\n        done();\n      }\n    });\nwhich outputs the expected mock response.  Note the url field is what is expected:\n{ url: 'http://localhost:8001/api/v1/supplier_contracts?ids=abc',\n  method: 'GET',\n  body: undefined,\n  useJQuery: false,\n  headers: {},\n  on: { response: [Function], error: [Function] } }\nPlease reopen if you still see an issue, or if I'm interpreting this incorrectly.\n. allowEmptyValue has been added.. thanks @ponelat can you add some tests?\n. Sure thing.  It's not a rush as I just published 2.1.3-M2 last night.  I can help get some sample YAML in the mock servers.\n. I've manually merged this code into the feature/relative-ref branch.\n. Some thoughts on this request.  First, relative refs will be, by definition, relative to the schema document.  That means, for the swagger document at http://www.foo.com/swagger.json, the relative ref, $ref: MyModel will resolve to http://www.foo.com/swagger.json#MyModel.\nNext, if you follow the swagger schema definition, you cannot arbitrarily put models in different locations.  It is specific about where you put it.  You cannot put it at /foo/bar or it will fail the validation.\nSo... how will relative references work?  We could say #/definitions/MyModel but that's not very useful.\n. Thank you. These all make sense and are doable but I believe are not legal in JSON schema. Let me dig into it more or perhaps @webron knows more about what is allowed. \n. OK looking at this more, here are some thoughts.\n1) The spec may be hosted at http://foo.com/bar/path/to/spec/swagger.json.  If we are resolving references to this file, we would have to use #/definitions/... or #/parameters/..., etc.\n2) Supporting paths relative to the root of the spec is easy.  We can simply look for ^/ in the reference and find the host serving the spec, and make it relative to that.\n3) Supporting paths relative to the spec location is also easy.  We'll take the location of the spec and walk up the path as needed.\n4) Support relative paths in remote files is tricky.  What does /foo/bar mean inside a remote reference?\nFor example:\nyaml\nPet:\n  properties:\n    id:\n      type: integer\n      format: int64\n    category:\n      $ref: \"http://foo.com/bar/models/Category\"\nand at http://foo.com/bar/models/Category:\nyaml\nCategory:\n  properties:\n    id:\n      type: integer\n      format: int64\n    person:\n      $ref: \"/models/Person\"\nWhere does /models/Person resolve to?\nThe first 3 scenarios are easily supported.  The fourth makes my head hurt.\n. Thanks--what do you think of item 4?\n. Been working on it, but there are many details to finalize the cases that @jasonh-n-austin brought up (which I think are valid cases).\n. @jasonh-n-austin this has been a grind, but I've refactored resolver.js to support these scenarios.  The tests are all failing, but please look at the expected results:\nhttps://github.com/swagger-api/swagger-js/blob/6fc1063f2fc0c391759bfe63408f53cf264acc53/test/resolver.js#L561-L635\nNote that in each test case, we're calling the resolver with the location of the spec being read (that's required for traversing the path and will happen automatically).  For the test cases, we're assuming the location of the spec is this:\nhttp://localhost:8000/foo/bar/swagger.json\nThe expected results are captured by enumerating the unresolvedRefs, which are, essentially, the information used to locate the reference.  For example:\n{\n  \"root\": \"http://localhost:8000/specific-domain/definitions.yaml\",\n  \"location\": \"/paths/health/MyResource\"\n}\nindicates that we'd be using the object at this location:\nhttp://localhost:8000/specific-domain/definitions.yaml#/paths/health/MyResource\nCan you please confirm that this is what is expected from the relative ref examples?  This whole thing gave me a huge headache, btw.\n. OK I believe this is mostly working.  Adding tests now, and hope to merge to develop_2.0 & close this out tonight.\n. I just put your sample spec from here into the UI and get what you'd expect.  Did that gist change?\n\n. Fixed in 2.1.5-M2\n. This is because you have a missing model reference in your spec, which is an issue.  The client crashing is a different matter, but it should be fixed here:  https://github.com/swagger-api/swagger-js/commit/75ac5598e1db96c2eb6baea0aaa784a5d2b41e4b\nYou can test this change by pulling swagger-js develop_2.0 branch, running npm link in that project, then npm link swagger-client in swagger-ui, develop_2.0 branch.  Then run gulp and you'll have the latest swagger-js and swagger-ui.\n. I have a feeling you're either on an old build, or there are fixes pending for develop_2.0 that need to be pushed.  I just tested this scenario out and get what you'd expect:\n\nLet's re-test this upon next point release?\n. Fixed in 2.1.5-M2\n. Hi, not a bug, it's actually how the swagger 1.2 spec was written.  You were required to have the parameter name of body.  In 2.0, you can name the body parameter whatever you like.  I suggest updating your spec and client access to use the name field of the body parameter.  If you can't change the client, just name it \"name\": \"body\".\n. Next minor version we will drop IE8 support.  I know, seems silly but it has been a requirement.\n. Dropping it.\n. @ponelat I don't think that's true--we should be able to set the authorization headers when initializing swagger-client.  I think that's a requirement for it to work correctly.\nIf it is the case, that's a regression in the client.\n. I believe @whitlockjc changed it so you can call the constructor then the initialize(args) function, which allows you to add the authorizations at that point, which is before calling to get the spec.\n. OK got it.  So the proper flow should be something like  this:\nvar client = new SwaggerClient(); // initializes swagger authorizations\nclient.authorizations.add(...);\nclient.initialize({url: url, opts: opts});\nOr something like that...\n. done in #468 \n. merged\n. as @webron so helpfully pointed out, we have an existing issue.\n. This should address #188 \n. @webron nested are not supported.  It's not much work, but if we can push that to a dot release, I'd appreciate it.\n. OK currently, the allOf support is limited to top-level models defined in the #/definitions section of the schema.  We will need a lot more tests to support arbitrary locations of allOf for now, or we may cause trouble in cases where someone names a property allOf, for example.\n. For the record, here's the JSON after running your sample through the resolver:\njson\n{\n  \"definitions\": {\n    \"media\": {\n      \"description\": \"Media model\",\n      \"required\": [\n        \"id\"\n      ],\n      \"properties\": {\n        \"id\": {\n          \"description\": \"Media's id\",\n          \"format\": \"int32\",\n          \"type\": \"integer\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"name\": {\n          \"description\": \"Media's name\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"description\": {\n          \"description\": \"Media's description\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"caption\": {\n          \"description\": \"Media's caption\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"user_id\": {\n          \"description\": \"Media's user_id\",\n          \"format\": \"int32\",\n          \"type\": \"integer\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"created_at\": {\n          \"description\": \"Media's created_at\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"updated_at\": {\n          \"description\": \"Media's updated_at\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"owner_id\": {\n          \"description\": \"Media's owner_id\",\n          \"format\": \"int32\",\n          \"type\": \"integer\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"owner_type\": {\n          \"description\": \"Media's owner_type\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"src\": {\n          \"description\": \"Media's src\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"extra_media_prop2\": {\n          \"properties\": {\n            \"nilla\": {\n              \"type\": \"string\"\n            },\n            \"wafers\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\",\n          \"x-resolved-from\": \"self\"\n        },\n        \"extra_media_prop1\": {\n          \"default\": 10,\n          \"format\": \"int32\",\n          \"type\": \"integer\",\n          \"x-resolved-from\": \"self\"\n        }\n      },\n      \"type\": \"object\"\n    },\n    \"new_model\": {\n      \"required\": [\n        \"prop4\"\n      ],\n      \"properties\": {\n        \"prop1\": {\n          \"format\": \"int32\",\n          \"type\": \"integer\"\n        },\n        \"prop2\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"prop3\": {\n          \"$ref\": \"#/definitions/media\"\n        },\n        \"prop4\": {\n          \"properties\": {\n            \"prop4_1\": {\n              \"type\": \"boolean\"\n            },\n            \"prop4_2\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\"\n        },\n        \"prop5\": {\n          \"items\": {\n            \"properties\": {\n              \"prop5_1\": {\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"array\"\n              },\n              \"prop5_2\": {\n                \"type\": \"string\"\n              }\n            },\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        },\n        \"prop6\": {\n          \"x-composed\": true,\n          \"$ref\": \"#/definitions/media\",\n          \"properties\": {\n            \"prop6_1\": {\n              \"type\": \"string\",\n              \"x-resolved-from\": \"self\"\n            }\n          },\n          \"type\": \"object\"\n        }\n      },\n      \"type\": \"object\"\n    },\n    \"new_model2\": {\n      \"x-composed\": true,\n      \"x-resolved-from\": [\n        \"#/definitions/media\"\n      ],\n      \"description\": \"Media model\",\n      \"required\": [\n        \"id\"\n      ],\n      \"properties\": {\n        \"id\": {\n          \"description\": \"Media's id\",\n          \"format\": \"int32\",\n          \"type\": \"integer\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"name\": {\n          \"description\": \"Media's name\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"description\": {\n          \"description\": \"Media's description\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"caption\": {\n          \"description\": \"Media's caption\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"user_id\": {\n          \"description\": \"Media's user_id\",\n          \"format\": \"int32\",\n          \"type\": \"integer\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"created_at\": {\n          \"description\": \"Media's created_at\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"updated_at\": {\n          \"description\": \"Media's updated_at\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"owner_id\": {\n          \"description\": \"Media's owner_id\",\n          \"format\": \"int32\",\n          \"type\": \"integer\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"owner_type\": {\n          \"description\": \"Media's owner_type\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"src\": {\n          \"description\": \"Media's src\",\n          \"type\": \"string\",\n          \"x-resolved-from\": \"#/definitions/media\"\n        },\n        \"extra_media_prop2\": {\n          \"properties\": {\n            \"nilla\": {\n              \"type\": \"string\"\n            },\n            \"wafers\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\",\n          \"x-resolved-from\": \"self\"\n        },\n        \"extra_media_prop1\": {\n          \"default\": 10,\n          \"format\": \"int32\",\n          \"type\": \"integer\",\n          \"x-resolved-from\": \"self\"\n        }\n      },\n      \"type\": \"object\"\n    }\n  }\n}\n. Hi, the swagger-js has a class called Resolver which will resolve remote references as well as combine models for allOf support.  Please share more details of what you're having trouble with?  And a sample test case would be golden.\n. fixed in https://github.com/swagger-api/swagger-js/commit/83667b88f40e41e7afd7e99cec03305a17b65b48\n. I believe this was done\n. Hi,\nFirst off, it'd be awesome if you can update your server/swagger specs to 2.0 :)  You'll have much more control over this.\nNext, it looks like the way the /resourcePath is what's causing the problem.  In swagger 1.2, the notion of resourcePath is actually a path for the documentation, not necessarily the API.  So you could have your documentation at /foo but the actual api is called from /bar/{userId}/baz.  So the two are actually unrelated.\nThe swagger javascript client actually converts the spec from 1.2 to 2.0, and your former resource path, api/v1/transactions/{key}/payments is actually being converted into what is known as a tag in the 2.0 world.\nThis is confusing, and part of why we migrated to the new 2.0 structure.  Please reopen with any questions, but I suggest either updating your spec to 2.0, changing your resourcePath, or continuing with the current swagger-client that you're using.\n. Thanks @devigned. I'll try to get to this today or tomorrow. I've seen your issues in the ui on allOf as well\n. Hi, @abstratt that's correct.  swagger-ui bundles swagger-js inside it directly.\n. added in the section:  ...or with the swagger-client constructor\n. eww.  I didn't see this was in the original code\n. OK since cookies are not supported officially in the spec, I'm going to close this out.\n. blop: https://github.com/swagger-api/swagger-js/issues/483#issuecomment-138004492\n. OK this is a fairly old issue but the solution is still the same.\nYou can use swagger's shortcuts--via function prototypes--or alternative methods which behave consistently.  For example:\nthis:\napi.pet\nis the same thing as this:\napi.apis[\"pet\"]\nand this:\napi.pet.findPetsByStatus(...)\nis the same as this:\napi.apis[\"pet\"].operations[\"findPetsByStatus\"]\nIn short, you can use the human-friendly shortcut bindings (which have some obvious naming constraints) or the consistent hash lookup functions.  We chose to support both for human friendly interaction in a repl with tab-complete.\n. OK @Smolations @lucian303 @ponelat I've identified the cause of this.\nTake a look at https://github.com/swagger-api/swagger-js/pull/566 for the details\n. Going to leave this alone. closing due to inactivity.  If you can reopen with some tests, we'll get this in.\n. this was handled in https://github.com/swagger-api/swagger-js/pull/505\n. please note that I had to apply this:\nhttps://github.com/swagger-api/swagger-js/commit/658201bb7e954992fff9f00e6e481ae34d199f94\nSince your commit was in the compiled library and would be overwritten on next build.\n. Hi, this doesn't really solve the problem.  You'll need to iterate over each operation to set the host since they are copied to each operation.  See #532\n. I believe we've settled on the behavior of the relative references.\n\n. Hmm.  I am sorry, this should have been either fixed in the last release, or tested and marked as such.  Do you mind retesting and reporting back?  I did redo the response processing to fix #681 so this may be fixed as an artifact of that.\n. this is confirmed working.\n. we now support promises, which is better (IMHO) than the conventions for the standard callback signature.  The reason we didn't support it previously was because of variable args.\n. Hi guys, this is an old issue and I'd like to figure it out or close it.\nThe issue says, loading YAML doesn't work, but we test it and know it does.  Is the real issue that the client can't parse YAML when the server says it's JSON but it's really YAML?  Please clarify @NicholasRBowers !  Thank you\n. Please reopen if still an issue.\n. since this affects dependent libraries, i'm closing the issue.\n. I can't reproduce this.  Please reopen if you still have issues.\n. updated the readme\n. OK @jifka it sounds like you're trying to override those in the context of the UI.  If that's true, you'll need to get the swagger-js instance that the UI is using, and call it from there.  For example, I open http://petstore.swagger.io and enter this in the console:\njs\nwindow.swaggerUi.api.setBasePath('/v3');\nThe calls will now reflect that basePath.\n. Hi, I'm confused.  by setting the basePath like I suggested, you can load the swagger file from one location and execute methods against a different one, just as if you had set the host parameter.  It does work, so if you can share more info we can help troubleshoot it.\n. So my suggestion from https://github.com/swagger-api/swagger-js/issues/532#issuecomment-245409602 should do just that.  You can let the user choose which host and trigger logic like what I mentioned.  Then you can dynamically target different hosts as needed\n. Thanks @nickg415 and @Lattyware for the input on this.  @whitlockjc can you please look, as you wrote this helper?\n. @satyamallya see here:\n\nwhich comes from here:\nhttp://petstore.swagger.io/v2/swagger.json\n. Hi, can you please try with the latest, 2.1.1 release?  I believe this was fixed yesterday.\n. if you see 2.1.1 in your swagger-ui.js then you have the latest.  And if you're still seeing the issue, it's a bug.  Please confirm and i'll get to it.\n. Thanks for the confirmation\n. Looks like this is working\n. This is simply because required must be an array, per spec:\nhttps://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schema-object\nPlease update your spec like such:\njson\n{\n  \"ModelA\" : {\n    \"required\": [\n      \"modelB\"\n    ],\n    \"properties\" : {\n      \"modelB\" : {\n        \"description\" : \"Some description here...\",\n        \"type\" : {\n          \"$ref\": \"ModelB\"\n        }\n      }\n    }\n  }\n}\n. This should be supported in master now.\n. oops, this was supposed to merge into develop_2.0.  Undoing, and will re-apply in a few\n. OK so I actually don't agree that we should throw an exception when a model can't be found.  It will stop processing and make a bad user experience.  I will open an issue in the UI to show something more helpful, perhaps a mouse-over with details.\n. until the spec supports it, we can't add this support.\n. I think that's a bug.  We'll have to escape the name, just like we do for api and client tags.\n. Hi, I'm unable to reproduce this, but it could be because you're on 2.1.1 where swagger-js is now on 2.1.5.  Please see https://github.com/swagger-api/swagger-js/commit/19bada362f16df911277cc7836e3491b182908ae for a test, and reopen this if you still have an issue.\n. allOf support should be covered by resolver.js.  Can you please share a test case that exhibits the behavior without your fix?\n. Thank you for this and sorry for the delay--we did add generalized support inside the resolver.js\n. It may be good if we attempt to put the obj as a parsed object in the error payload, yes.\n. this has been resovled in... the resolver.\n. fixed in 2.1.3\n. it's done manually on release, and it looks like this was pushed as 2.1.6.  We don't push when issues are closed, which may be a bit confusing.\n. @marcellodesales we should have this released this Friday.  In the meantime you can pull the source and build from master to pick up support\n. hi @bkonetzny, I'm still getting the release out.  If you watch the repo, you'll get an announcement when it is done, but for now, you'll have to build from source.\nFor the error you're describing, yes, you are correct, it should simply be require('q').\n. thanks--done.\n. hi @whatasunnyday sorry for the delay in responding!  Yes, in the above example, there are scopes defined in the oauth2 definition.  If the array is empty (but still present) then no scopes are required for the operation.\n. Hi, you can't depend on jQuery inside the swagger-client.  This same code is used on node.js in headless deployments.\nI suggest looking at the http.js code for the JQueryHttpClient.  You can add jquery-specific code into that class, but not the general operation.js class.\n. looking at this more, we definitely cannot merge the PR.  We can, though, move the logic into the jquery client.  I'll keep it open for that and try to refactor it into \n. closing per above comments.\n. This is addressed in 2.1.4.  Please reopen if you still see an issue.\n. Hi, you need to add a security element to operations or the top-level description.  Only when the matching key in the security element is found AND matches the authorization definition will it be applied.\nfor example, you should set a apiQueryKey and apiKey security element.\n. OK great.  I'm going to close this then, please reopen if you still have issues.\n. thanks\n. looks like polymorphism is working as expected from the swagger-js POV.  The UI still needs attention, but I believe this can be closed.\n. Hi @Cwallice thanks for the PR.  Some pointers and feedback.\nFirst, please use GFM syntax for your comments.  You can make it much easier to read the code examples, etc like such:\njs\nvar params = new OperationParams( { \n  security: {yoursecutitysettings}, \n  consumes: {yourconsumessetting},\n  header:{\n    \"language\": \"en\"\n  }\n  // etc...\n} );\nIt's also easier to copy/paste the code when it's in a code block.\nNext, it's not clear how you're approaching this.  It seems like you're adding a new Object ( OperationParams) but it seems like this is changing the library signature.  How does it work for existing implementations?  Is it back compatible?\n. for example: /foo/bar#myModel works, but /foo/bar does not\n. fixed in https://github.com/swagger-api/swagger-js/commit/4eb41cc54be90f38b19dfd9be8f32397929db768\n. fixed in https://github.com/swagger-api/swagger-js/commit/f934ceb4f38ea340679f0bf8a3c38406c492de94\n. hi, as of https://github.com/swagger-api/swagger-js/commit/572dd92898a792df00f02b539b98509b4a139bca promises are supported natively in the library.\n. If you want to use jQuery, you'll have to have it loaded when swagger-js loads.  Swagger-UI, for example, does this automatically.  We don't include it in the library because it's not great for node.js environments.\nSo if you're using a browser, just make sure you load jquery before swagger-js.  And if you're using it headless inside node, well, don't use jQuery :)\n. OK I stand corrected--jquery is loaded by the library.  I wish it wasn't.  I will look into this more to figure out why we're having this issue.\n. OK so I have a pull request to rip out jquery from the library-if you want to use the useJQuery flag, it's your job to add it.\nAs for the question you originally asked, I think we had it correct.  Please see here.  require('jquery') is in fact the correct syntax.\nBut as #618 suggests, I really don't want it bundled up in the library, it just adds fat.\n. #618 should clarify usage of jquery.\n. all good, was off the grid last week so apologies for the delay!\n. @achingbrain right you are, the current behavior doesn't make any sense.  Working on a fix--the only risk is that by not throwing the error, we run the risk of no longer halting execution.  The throw clause ensured that the client execution stops, but I guess that's up to the author of the failure function.\n. yep, duplicate issue\n. Fixed. Fixed in master\n. It's gone as of https://github.com/swagger-api/swagger-js/commit/4ff3c50bcc6f46dc3113f2ec4adc1626142570b3\n. fixed in https://github.com/swagger-api/swagger-js/commit/572dd92898a792df00f02b539b98509b4a139bca\n. No  need to modify code, you can add the custom signing logic either before initializing swagger-ui:\nwindow.swaggerUi = new SwaggerUi({\n   url: url,\n   dom_id: \"swagger-ui-container\",\n   authorizations: {\n     api_key : new SwaggerClient.ApiKeyAuthorization(\"api_key\", \"foo\", \"query\")\n  },\nOr after swagger-ui has been initialized (note! This will not help if the initial call requires signing):\nhttps://github.com/swagger-api/swagger-ui#custom-header-parameters---for-basic-auth-etc\n. fixed in #632 \n. Yes, you use the asCurl() function on any invocation\n. I'd like it to warn and generate unique operation ids like body, body_1, body_2, etc.\n. Yes, that's right--it would modify the spec slightly.  Same as we do with tag values that collide with reserved words too.\nThis affects the UI and actually all operations with swagger-js.  If you execute some operation by operationId and it is a duplicate, it will execute the last defined operation, which is usually not good.\n. You'd interact with it.  If for example you name an operationId tags, it'll rename it _tags and give a warning.\n. fixed in https://github.com/swagger-api/swagger-js/commit/b0cb893531a99e2f2e46bd3fabd1fc0ac9c36fe2\n. I'm going to close this out--we need to address this in the swagger-ui client.\n. Thanks @whitlockjc \n. @webron is correct.  For pre 2.0 specs, it was assumed the name was body and not required.\n. this is handled now with interceptors\n. Hi @marcellodesales have you seen the responseInterceptor pattern in the client?  I believe that--plus the request signing technique--does this already.  Can you please review those functions and report back where we're lacking in functionality (or documentation)?\n. We've discussed this and it's my understanding that we have the support as-is.\n. Hi, if you want to make a local build of swagger-ui with changes in swagger-js, please follow these steps.\n- Clone swagger-js and update the version number\n- Run npm link in the project root, then build with gulp\n- Clone swagger-ui and update the package.json to the version number you created in the swagger-js project\n- Run npm link swagger-client in the project root then build with gulp\nThe output files should reflect your changes.  Always check your configuration by searching for the version number in the dist/swagger-ui.js\nPlease close this if it covers your question\n. Hmm you may be right.  If you don't mind, it'd be great getting a test case in a PR.  I think the proper fix would be to check the length of the formParams object, and if it's > 0 it fires.\n. fixed with https://github.com/swagger-api/swagger-js/commit/28073c491d2d8e5d47b94bf6726fa0c8aa55422d\n. Please provide more details\n. This has been addressed here:\nhttps://github.com/swagger-api/swagger-js/commit/4ff3c50bcc6f46dc3113f2ec4adc1626142570b3\n. This was just fixed in https://github.com/swagger-api/swagger-js/commit/daf4a909c7e02e00719ffb4e9d92facdd8966183\n. I've retested this and it's working fine in master.\n. right you are.  It does look like executing the operation mutates the original object which is then used in the asCurl.  This is causing duplicate query params for api-key but not for headers.\n. fixed & tested by https://github.com/swagger-api/swagger-js/commit/954e5ac0bce07be94842a2b82c2c49b5ec7ef9af\n. 2.1.7 will have this support and it has not been released yet.  Should be soon\n. yes, the html should be updated or just ignored for now.  I need to get all this rendering out of the client asap.\n. go for it\n. @ponelat @kwizzn is there a reason why we would leave the URL in double quotes?\n. can you explain more?\n. sure @marcellodesales just rebased\n. @ponelat can you please rebase?\n. OK I think this is not the right fix.  The swagger 1.0 spec had a different mechanism for loading files, and requires the handling in that method.  Please share what you're trying to do, with the api declaration file and paths that it contains?\n. @prantlf sorry, I didn't see the linked reference.  The problem is that 1.0 specs would expect the following structure:\n/resources.json <= resource listing\n/foo.json <= api declaration\n/bar.json <= api declaration\nIn 1.2, the /foo.json and /bar.json were relative to the resource listing:\n/api-docs <= resource listing\n/api-docs/foo.json <= api declaration\n/api-docs/bar.json <= api declaration\nThe problem is, accepting this patch would break the 1.2 specs that followed the definition.  While it was a big change, and confusing, it is currently behaving the way the system is supposed to.\n. please reopen if my comment from November isn't clear.\n. fixed by https://github.com/swagger-api/swagger-js/commit/e9bd43d601455baa3d1c7d834bb70bd2b9783997\n. Confirmed this is fixed from #936 . Thank you. Since the relative path code is fairly complex, can you please help get a test in that fails without your fix?\n. Thank you @artema.  What is the expected behavior of using a relative spec for a browser-based client like swagger-ui?\n. Same goes for missing array inner types:  https://github.com/swagger-api/swagger-ui/issues/1462\n. CORS handling isn't part of this library.  It should be handled by users of it.\n. hi @wbinnssmith thanks for the PR and description of why this is better.  Since this would be a breaking change, I'm going to flag it for a future release.  While I'd love to save on the file size, I don't want to incur the headache from broken clients right now, since people are expecting promises to be included directly in the library.\n. we have a giant update coming to swagger-js that will address this.  Closing.... There is already a way to reference \"non-mappable\" tags by using the apis and operations arrays.  I think that may be better than mutating their tags.\n. yes, rather than modifying their existing tags\n. It doesn't affect anything.  Works like this:\n``` js\n// shortcut\napi.pet.addPet.help()\n// by hash\napi.pet.operations['addPet'].help()\n```\nSo in cases when you can't use the shortcut (like with dashes), you can look it up in the hash.\n. Please reopen if you'd like discuss further.\n. Hi, the circular references should not be a problem.  I believe we have handled most cases but if you are having an issue, please provide your specification so we can address it.. not formally supported but there are many patterns to support doing this.  The challenge is that implementations vary wildly between how pagination works, and imposing a standard would be difficult.  But please open a ticket in the swagger-spec repo with your thoughts on this so it can be considered.\n. well if your server is claiming to return JSON but it really has XML, isn't that a bad thing?\n. Sure--well it appears that your server is lying about the content type.\nAre you working inside a browser or inside node?  If inside the browser, you can look at the network tab to see the response payload.\nAlso your version of swagger-js is fairly old.  Can you update to a newer one, like 2.1.9 as released yesterday?\n. I'm pretty sure.  It would be nice, though, if the swagger client gives a helpful error.  I do think it will with newer versions of the library which is why I was asking if you could upgrade.  Are you using a browser or headless with node.js?\n. Click the network tab in Chrome and look at the response tab like below:\n\n. ok getting closer.  Can you please click the headers tab?  You should see something like this:\n\nYour response is certainly XML so if the server is declaring it to be JSON, that's the issue.\n. can you please try updating the swagger ui?  Or just point this one:\nhttp://petstore.swagger.io\nTo your server?\n. great news!  I'll close this then.\n. This should be supported and tested.  Please reopen if you find otherwise.\n. Yes, this broke.  Please try the dist from master, as it has this fix applied:\nhttps://github.com/swagger-api/swagger-js/issues/668\n. Seems like it should check this.schemes[0] before location.scheme as that is the intent of the API\n. yes\n. I don't think this is possible, since all the unit tests are using non-standard ports.  Please provide a test case for this?\n. Can you please add a test?\n. Hi, this is a good PR but the spec doesn't support it yet.  So we can't merge this for the time being.\n. Got it, thanks.  Will try to get this supported shortly.  Glancing at your test case, I believe that is valid and should be supported.\n. Looks to me like your server isn't working correctly. Can you see the swagger json in your browser?  Can you give the url to that, plus the entire code snippet where you are initializing swagger client?\n. That looks correct.  Ensure that your docurl is not a redirect (it should work even if so) with this:\ncurl -i http://path/to/your/url\nand post the response here?\n. ok well, it is definitely not a cors issue as it's localhost, and if you're running inside of node, it won't care anyway.  I have to guess that there is some problem with the spec.  If you want to share it privately, you can send it to me to scan \n. that error means that your server is rejecting the request.  It's simply not even being read by the swagger-client.\nYou can initialize swagger with the swagger.json directly--simply create a variable with the spec object in it, and set spec: yourSpecObject when initializing the client.\n. OK there is definitely a problem loading your spec.  Let me know if you want to troubleshoot this more.\n. I believe we've isolated it to how you're serving up your swagger definition. So let's move this to the swagger Java province ice (swagger-core) and I'm happy to trot sort it out there \n. Need more info.  What is the problem?  Is it from node or the browser?\nI suggest opening a new issue, as this is a quite different task.\n. You can pass the swagger object to the client when constructing it.  Perhaps you can open a new issue to discuss this\n. Updated in #682.\n. Have you tested this against 2.1.11?\n. ok thanks.  Will get that tested.\n. Yes should be fully working.. The swagger-ui is calling functions which are going away soon.  The next swagger-ui release will not call the swagger-js client for rendering anymore.\n. I will take a look at that\n. OK I'll get these updated in a release today.\n. @srl295 I've merged the change, if you want to test it out from master before I release 2.1.12 that'd be great.\n. Help test https://github.com/swagger-api/swagger-js/pull/710 and I'll release it!\n. Thanks. Could you send a pull request for that?\n. @bodnia I know you're working on moving this logic to swagger-ui--can you please confirm this is OK, and if so that it moves to the UI code?\n. No problem!\n\nOn Jan 16, 2016, at 8:57 AM, bodnia notifications@github.com wrote:\nHello Tony,\nI'll check this issue and let you know when I am next to my laptop.\nThanks,\nAnna\nOn 16 ???. 2016 ?., at 18:44, Tony Tam notifications@github.com<mailto:notifications@github.com> wrote:\n@bodniahttps://github.com/bodnia I know you're working on moving this logic to swagger-ui--can you please confirm this is OK, and if so that it moves to the UI code?\n\nReply to this email directly or view it on GitHubhttps://github.com/swagger-api/swagger-js/pull/690#issuecomment-172225442.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/swagger-api/swagger-js/pull/690#issuecomment-172227400.\n. You can see the curl logic quite clearly in the code:\n\nOperation.prototype.asCurl = function (args1, args2)\n. Please use 2.1.14. The version you are testing is ancient. \n. Please be sure to clean your build and run npm i.  This commit:\nhttps://github.com/swagger-api/swagger-ui/commit/23f44ab688f1feca1db0ac4e62bbd62d9c9ca34b\nShould have addressed this.  Can you confirm what URL is being called to resolve the NewCustomer.yaml?\n. JSONP is not supported by the UI.  Your other question is not clear, you'll have to share more details.\n. That's actually not right.  A parameter name of {user} cannot have a / in it as it will change the path locator itself.  Doing the replacement of / as %2F is actually intentional.\n. You can use the authorization system by creating a security requirement and attaching it to each operation (or the API as a whole).  Then each operation will receive the header, if it has been set.\nIf you need to send a header to all operations and don't want to define that they're required, you can use a requestInterceptor, please see here for an example:\nhttps://github.com/swagger-api/swagger-js/blob/master/test/client.js#L523\n. I believe the requestInterceptor will do the trick. Take a look at the client.js test for usage examples\n. seems like making a logger an argument for the SwaggerClient constructor prototype would be best.  Do you have time to submit a PR?  We can fall back to console.log when not configured.\n. Definitely, the error payload can follow some structure, even the Error prototype.  Do you have time to send a PR for this?\n. I have made a more general fix in https://github.com/swagger-api/swagger-js/pull/742 and added tests.\n. Free load testing!  Seems like your server did well with the 100m calls.\nIndeed the allOf support can get hairy, and multiple calls do occur when there's a problem resolving something that it's looking for.  I'll take a look at a couple different techniques to support the external references better and review this PR.  Disabling allOf isn't an option, but handling it better and certainly avoiding making extra calls should be the goal.\n. Thanks--I get it.  Let me see if I can fix it properly first.  The allOf support should have zero impact on APIs that don't have it--if that's not the case, it's busted.\n. Reference #708 \n. @markusz Do you mind testing #709 against your issue?\n. @markusz any chance to try this out?  It should solve your issue.\n. @andi-itagent can you please try out #709 and report back if it addresses slowness that you may be seeing?\n. OK thanks. Can you share your definition so I can use that to test & verify things?\n. Thank you, you can also send it via email and I will test it privately.\n. this was fixed in https://github.com/swagger-api/swagger-js/commit/57b156337375b8af9e5c2b107f77d5ef4b96080f\n. responded here: https://github.com/swagger-api/swagger-ui/issues/1984#issuecomment-190473436\n. Correct, references directly inside schemas are not yet supported.\n. so much to do, so little time.  It will be implemented, feel free to submit a PR if you have cycles.  Otherwise, it is an issue and will be fixed.  It has not been reported as a common issue, which is how priorities are set.\n. Yes, however that is what the parser is supposed to do.  We didn't have much luck with any off-the-shelf parsers for fully resolving swagger definitions.  In this project, there is a resolver component to do just that.\n. Please share the swagger definition that is causing the issue\n. I believe the fixes in 2.1.12 have addressed this.  Can you please try with that version?\n. Please reopen if you see issues.  We now have 2.1.13 available. \n. Please reopen with the spec that you're using.\n. You should use the operationId in your spec.  If that doesn't exist, you'll get ugly, auto-generated methods.\n. Please reopen with any issues.\n. Per the PR, I think best we close this out in an effort to keep behavior consistent between modes.\n. I think this will cause problems in swagger-ui, you'll end up with the \"success response\" being in the list of alternate responses for the same operation, which is not ideal.\n. This will be handled in a major update of swagger-js, and accompanying update in the ui project.  Thus, closing this out.. Well, we had a discussion on this same topic here:\nhttps://github.com/swagger-api/swagger-js/issues/751\nSo I don't know why we would make this change.\n. Closing per conversation.  We want to keep the same API and behavior\n. Thanks, and agreed that documentation can be improved.\n. Hi, this is missing the source changes.\n. no, you cannot change any files in the browser folder.  Edit the files in the lib folder, run gulp.  browser files are overwritten.\n. OK feel free to reopen if you've solved this.\n. not clear what you are saying.  Please provide an example spec or test, or more details on this.\n. Please see https://github.com/swagger-api/swagger-js/commit/5a331517a794e3ae56d5a2f472a3d4acaa4e159e.  I'm unable to reproduce this, my guess is that you're having trouble receiving the value, and that it's probably an issue in your server configuration for Access-Control-Allowed-Headers\nReopen if you're still having trouble with this.\n. The solution seems to be the ability to add authorization values or headers on each request.\n. This PR has resolution as in-line.  I believe that they can remain as references in the definitions section instead of as inline models.\n. If your definition doesn't declare that it's required, then it won't be sent.  Try adding the security attribute on the operation, and making sure the reference has the same name as easyapi_basic.  For example: http://petstore.swagger.io/v2/swagger.json\n. great\n. so that's not really possible, because swagger.js doesn't have access to the window.location variable (it may be running in a node environment).\n. hi @gunjpan, can you load the contents of your ../swagger/sampleSwaggerApi.yaml as an object?  If so, you can easily do this:\n// you load the `spec` as an object\nvar spec = { swagger: '2.0', ....};\nnew SwaggerClient({\n  url: 'STILL_NEEDED!',\n  spec: spec,\n  ...\n}\nThen the object can be loaded however you like, and the swagger client will process it.  Note!  The url field is still needed.  Why might you ask?  Because there may be references to other swagger constructs inside your object, and the client will need that for resolving them.\n. Hi, first off, setTimeout is in milliseconds, not seconds.  Next, the setTimeout was introduced to have the same behavior as the async loading from the network.  This makes it transparent between the object-based and network-based calls.\nSo i suggest using promises or getting used to async on the client.  It's really hard to have a good interface without callbacks.\n. I really want to keep the behavior the same between network and objects.  The 10ms delay is probably more than it needs to be, it could be 1.  If we introduce another configuration, it's another path to break.\n. it's behavioral.  The client can pass an object or a URL and expect exactly the same behavior.\n. OK I'll need to ensure that this doesn't break anything.  I guess we can get it in, but the lack of a callback was an issue for swagger-ui and other clients.  I'm not sure that it's in the tests though, so even with the successful test exectution here, it may still break some clients.\n. I'm going to close this out.  When we refactor the library for the next version we will consider this.\n. Yea, i think you're right.\n. I'd like this, but it shouldn't be enabled by default.  Seems best done with a custom http client configuration so users can opt in.\n. That's your best bet, take a look at the tests, you can create a custom http client.\n. Both should work, but it seems you're experiencing otherwise:\nhttps://github.com/visionmedia/superagent/issues/605\n. ok, but having a path with a query param actually is forbidden by the spec.\n. OK this is harmless so I'll merge, even though it's not really within the spec intention.\n. We're working on this for the next version.\n. This has been done in the 3.x version.. doesn't responseInterceptor trigger during any response, including errors?  Please elaborate on what it's not doing correctly, because the intent is for that to handle errors as well.\n. Yes but to catch error conditions you want a response handler. And the responseHandler is called for 'on.response' so I would think it's covered, no?\n. Hi, interesting.  But I think that sort of layer belongs on top of swagger-js, meaning the library is thread safe, and having concurrent operations run inside it shouldn't be any issue.  Is your primary use case around swagger-ui or some other client-side app?\n. @dkottow i believe you're right, the \\t is not allowed in a query param.  Can you please send a PR?\n. Fixed in https://github.com/swagger-api/swagger-js/pull/770\n. Hi, can you please share a spec?  We have a lot of tests around this but would like to see what's triggering this issue.  FYI we're on 2.1.14 now.\n. OK happy to help if you can share a definition, even privately.  I'm currently working on a release of swagger-js right now, so it could be fast.\n. Then I don't really understand.  Can you explain that more?  Perhaps with a test?\n. Can you just update to 2.1.14 or better yet, master?  I'm afraid I just don't have enough info to even reproduce this.\n. Great, thanks for the follow up\n. this isn't supported by the specification, so it doesn't make sense to add support for it now.  It is coming in the next version of the spec, though.\n. I don't really know how we would make this behavior consistent across different API implementations.  I'm going go close this out, we can reopen with more info and a proposal on how to make this general across other implementations.\n. You have three choices--\n1.  Set up the client with authorization information.  You'll need that when initializing it, of course\n2.  Add authorization after the client is created by adding them to an existing client.  Note, that of course means if authorizations are needed when reading the swagger definition, it will fail\n3.  Add authorizations on a per-request basis.  Then you can reuse the same client for multiple auth schemes, users, etc.\n. Unless you have any other questions on this, I'll close it out.\n. Yes but it is being removed so please don't rely upon it\n. Right now, the swagger-js client is turning models into two internal types, one being a JSON Schema object.  You can grab those easily:\nvar models = swaggerClient.models['Order'].definition;\nAnd when done in the petstore, you get a nice JSON schema, which you can render with lots of different renderers:\nJSON.stringify(api.models.Order.definition, null, 2)\ngives:\njson\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"petId\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"quantity\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n    },\n    \"shipDate\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"description\": \"Order Status\",\n      \"enum\": [\n        \"placed\",\n        \"approved\",\n        \"delivered\"\n      ]\n    },\n    \"complete\": {\n      \"type\": \"boolean\",\n      \"default\": false\n    }\n  },\n  \"xml\": {\n    \"name\": \"Order\"\n  },\n  \"id\": \"order\",\n  \"name\": \"Order\"\n}\n. Hi, thank you for this--can you please add a couple tests then it can be merged?\n. Thanks!\n. You can use SwaggerClient.prototype.setSchemes:\nvar client = new SwaggerClient()...\nclient.setSchemes(['http']);\n. I can guarantee you that it works.  What version of swagger-client are you using?\n. no problem, thanks for the follow-up\n. What version of the UI are you using?  This scenario should be supported already.\n. Please take a look at this test, which should reproduce what you're trying to do:\nhttps://github.com/swagger-api/swagger-js/blob/issue-783/test/composition.js#L401\nThe properties exist as expected, so perhaps you're not using master of swagger-ui?\n. OK that's swagger-editor, which does not use this library.  I suggest you open an issue in that project.  For swagger-ui, we get what is expected:\n\n. Unfortunately there are features in swagger-js which require a tag or the client won't work correctly.  So we have to add the default tag.\n. Sorry!  since all operations require a tag associated with them, I think it would be far worse to remove this behavior than to document it as a known issue.  Feel free to help with a work-around, fix, via PR.\n. Hi, i've been working on this just recently.  To upload files with swagger-js, only browser environments are currently supported (you should be OK with that) and they require that jQuery is enabled (you might not like that).  I'm almost done making this work via superagent which would remove that requirement.\nFor file uploads, you should be passing the File object to the javascript client, which it looks like you are.  What is the file \"type\"?  And have you specified that you're uploading using multipart/form-data?\n. OK just pushed a fix to allow the Form elements to be sent w/o jquery, tested in a simple react app.\n. Fixed in #799\n. Please share the relevant part of your spec. I believe this is well tested but it would be helpful to see what is causing it for tou\n. Closing as no further info provided\n. I believe that until it's part of the spec, it shouldn't be supported in this lib :(\n. You can pass the spec object, see examples in tests:\nhttps://github.com/swagger-api/swagger-js/blob/master/test/client.js#L1235\n. You can supply the spec as an object as well, but a URL is also required as there is a potential need to resolve remote references.\n. Hi @fny, a PR would be great, and yes, I will help you get that filled out.\nI will close this and please send a PR against the README.md in master.\n. Eeks, yes, please send a PR with that and I'll get it in.\n. @srl295 just pushed 2.1.16 to npm.  Can you try that out?\n. Fixed by https://github.com/swagger-api/swagger-js/pull/807/commits/085396b01ce5fe2bd1b9393f55f621ca58656309\n. Well you probably can, but to be clear, that's definitely not what this library was intended for.  But I'm sure it has many other uses than it's original intent!\nI'll close this out, and you can ask about specifics in new tickets.\n. Hi, this is supported as of 2.1.15--please see here for a test:\nhttps://github.com/swagger-api/swagger-js/blob/master/test/client.js#L400\n. I worked on this a bit--it won't be in 2.1.16 but shortly after.  It's a tricky one that we'll ensure is handled.\n. This should be fixed.  We cloned the response models to avoid the loops caused in the JS client.. OK I want to get support for downloads in here, but we can't expect the window object is available.  The swagger-js project works for browser and browser-less environments, so there needs to be conditional checks for the window.\n. If you want to send an updated PR that is safe for non-browser environments, please feel free.\n. This was fixed just before your PR.  thank you\n. Thanks for the PR on this, i have merged it.\n. OK, I can see where that would be convenient but certainly not the default (like what you did suggest).  The behavior is to treat the error responses like errors and require you to catch them.  I have added a couple tests to ensure this keeps working by default.\nIf you'd like to send a PR, we can set that option to allow all responses to flow through the success resolve, and it can be handled like you're proposing.\nI'll close this out when the tests are committed, and you can add a PR to give this option, assuming you have time.. OK well to be honest, this is because someone deleted that particular pet in the online API.  I don't think updating the documentation to a new petId will help.\n. Yea, i misunderstood your original issue, so my apologies.  The pets are deleted, mutated, and mutilated at random.  It's hard to keep any of them alive :)\n. We do our best to follow semver and I believe the API changes from 2.0.x and 2.1.x are purely optional, meaning you should be able to drop in 2.1.x without issue.  What are you seeing that is different?\nAll changes are listed in the release notes, which I agree are sometimes more verbose than what you're looking for specifically. \n. @chadxz looks like you're right.  When the refactoring was done in the 2.1.x version, we tried to keep signatures the same, but it looks like those cases were not tested, and subsequently broke for you.\nSuggest you use ~ and not ^ to keep on the compatible major.minor version, but as you said, we should do better to avoid breaking changes.\n. Can you please provide an example?\n. Yes, allowEmptyValue is the right solution.  I'll make sure that's implemented.. No idea who writes the Swagger UI for .NET but looking at the last published date (2012), you'd be wise to upgrade to swagger-ui directly.\n. What does this do that requestInterceptors do not accomplish?\n. the swaggerRequestHeaders were named such because they're only used to fetch the definition, not for general requests.\nI'm going to close this as it's functionality already in the requestInterceptor feature.\n. Looks like you have a bug in the tests.  There is no allOf in this definition, and therefore no error property in the OrderQueryGetResponse definition.\nPerhaps you had a commit missing?  I've corrected the test and will merge.\n. Since the PR is closed, please create a new one.\n. OK so the tests are passing fine, however to merge this I'll need a test to confirm that this behavior is working and doesn't regress with other changes.  Can you please add so we can merge?\n. https://github.com/swagger-api/swagger-js/commit/0bff27732e0d4bda23066f105ecd60cabaf5d5eb should fix this.. what is this PR supposed to do?\n. This isn't a bug in the test, closing. This may require a PR to support the signature generation in the requestInterceptor\n. In order to do this, the interceptors would need to return a promise.  This just isn't possible with the current implementation but I'll leave this open so it can be stitched into the next. as @wing328 says, please consider the swagger-codegen\n. I think that logic is out of scope for this project\n. Please submit a test case in a PR and we can address this.\n. You can get back to model definitions like such:\nclient.models['yourModelName'].definition\nWill return to you the JSON schema representation of the model.\n. Because, res.obj is the parsed version of your response payload, not the payload definition.  It doesn't make sense to be in that object.\n. You mean, instead of the actual values that your server sends, you'd rather have the definition of what it's supposed to send?  I think you're mixed up, let me clarify.\n- If the response is parseable, as either an XML or JSON object, AND the Content-Type is clearly supplied by the provider, it will be put in res.obj.\n- If the response is not an object, or is declared as text/plain or other unparseable format, the res.obj will be undefined\n- The definition of the response payload (i.e. the response schema) is available for tools at client.models['yourModelName'].definition\nThus, sometimes the response is not parseable, or it isn't desired to be parsed.  Thus we give the caller the choice to see what the raw value was, or even the unparsed representation of the parsed object.  So we don't choose.  It's like Burger King, you can Have it your Way (tm)\n. @mex it's a bit of a legacy behavior, but changing it would be a breaking change that we're trying to avoid for a bit longer.  To produce a list of all responses, you'll need to append the default response with the alternative responses.\n. This will be addressed in the next major version of the library, since it's a breaking change for the behavior.\n. Verified fixed with test\n. Hi, if a tag is not present, a tag named default will be created.\n. Well that's easy-- you can create a request interceptor which will let you add any header or query parameter you like to any request, using your own logic.\nTake a look at the tests, around here:\nhttps://github.com/swagger-api/swagger-js/blob/master/test/request.js#L468\nPlease comment if that fit your need.\n. please reopen if you need\n. looks good to me\n. Hi, I hate to say this but we can't accept this PR as it.  The spec requires that path parameters are escaped or the paths may be indeterminate.\nHowever, this is being tossed around for support in the 3.0 spec, and I can suggest how you can make this in, without encouraging breaking the spec.  Consider not escaping based on an extension in the parameter, like such:\nin: path\nname: yourParam\nx-escape: false\nThen you're adding functionality, not encouraging breaking the spec, etc.\n. You can have arrays of primitives or primitives but not anything with complex types in parameters. \n. In testing this, looks like the curl output and actual execution is different.  I'll work on massaging both to support the different collection formats.\n. ok @xoss I've gone through this.  The bad news is, this change causes problems.  The execution and curl commands are out of sync, and the other collectionFormats are not correct.  For example, it's perfectly legal to serialize an array of strings in CSV format, where the multi-part post is just a single CSV string.\nThe good news is I've added support for the multi format (the default serialization format for arrays in Swagger 2.0) to do the Right Thing \u2122.\nSee #858\n. Hi I merged #840 so if you want to move any other tests or logic from this PR into a new one, I'd be happy to add.\n. @cesine looks like it won't let me reopen it :(\n\n. It doesn't need to be, because it's not used inside that loop?\n. hmm so it is, i missed that!\n. Merged with #858 \n. Fixed in #840 \n. See https://github.com/swagger-api/swagger-ui/issues/2240#issuecomment-246562782\n. Fixed in #858 \n. OK this does address #841 but it does not override the specified protocols to favor the window.location.protocol value.  So it is still possible to have mixed content per https://github.com/swagger-api/swagger-ui/issues/1670 if the spec defines the schemes but does not include the https protocol, for example.\n- If the schemes is left empty, the window.location.protocol is used.\n- If the schemes has two values, [http, https], the matching value from the protocol will be prefered.\n. The client accepts arguments when initializing it.  We could pass it in as an option and let the SuperAgent client choose to use it if it exists.  However, I'm not sure what that'll mean for headers, cookies, etc.  Seems like this needs to be considered very carefully.\n. So in general, when constructing the swagger-client, passing a superagent client for reuse is just fine.  I'd just suggest sending a PR and we can check for existence of that client when calling the execute method against the SuperAgentHttpClient\n. v2.1.23 has been published\n. Hi, your approach is correct, adding support inside the swagger-js client then exposing them in swagger-ui.\n. https://github.com/swagger-api/swagger-js/pull/869 adds all extensions to the client prototype.\n. I believe this was fixed by https://github.com/swagger-api/swagger-js/pull/866 \n. Since cookies are not supported by the spec, the client doesn't support them either.  I think this class is a remnant of a distant past.\nNote, in 3.0 spec cookie parameters will be supported.\n. Can you please rebase to remove the formatting changes?  It's very hard to see what has changed, and what it may affect as-is.\n. @alechirsch sorry for lagging.  If you could please rebase to master I can merge this.. Thank you. yes\n. yep this slipped through.  The tests were using www-url-encoded so this was missed.  Thanks!\n. I don't see an issue for this in Safari Version 10.0 (11602.1.50.0.10) or in IE 11.0.9600.17416.  I'm testing the spec at http://petstore.swagger.io/v2/swagger.json\nI'd like to have this fixed so I can do a release, so please send more information on how to reproduce the issue.\n. thank you, I'll test with that spec.\n. @Pchelolo I've reproduced this, working on a fix.  I'm looking into why we aren't using superagent's form send, there was a good reason at the time...\n. Hi @djMax I hope to get this release out shortly.\n. Please provide some details, this doesn't really tell anything about your setup or problem.\n. Just watch the repo and you'll get announcements on formal releases \n. Yes, use the request interceptor pattern, or better define a security definition and require it at the top level\n. Can't reproduce--this must be from an older version of swagger-js.  Please re-test with 2.1.32 and reopen if you see an issue.. My guess is that it is failing, and because there is no operation, there is no success or failure to call.  It's probably dying in an async operation?  Perhaps you can share more details.\n. Yes, I think we can catch the absence of the tags attribute (client.pet) and the absence of the function, and return a proper error.. Looked into this more.  We actually cannot catch access to undefined variables in the client.  That will be your job to do in your usage:\nif(client.pet && client.pet.getPets) {\n  // execute it\n}\nelse {\n  // handle gracefully\n}\nNot by lack of wanting, but it's just not possible in javascript. The fix will be addressed in a Swagger-UI patch, and believe it or not, for good reason.  The patch supplied here didn't make sense.  See https://github.com/swagger-api/swagger-ui/commit/30f0848ac20d510593aab7238070aa5dae08ebb6\nPull master and enjoy. @richvdh looks like the build doesn't like es6 syntax.  Can you address and update the PR?. This is a bug, working on it.... This was fixed by https://github.com/swagger-api/swagger-js/pull/930. Yes, i believe this is a remnant of how it's used for rendering.  For example, you may get a reference to a single model which has a complex type.  Then for rendering, without a reference to top-level models, it's impossible to render complex properties.\nThis is not ideal!  But it's going away in an major rev of this library, which is coming soon.  So for now, this is used by swagger-ui, and shouldn't be removed.  It will be dramatically cleaned up, though.. Rendering is now in swagger-ui, so closing this.. If you want to use a proxy, consider using setHost('...') against the client to point to the proxy, or to use a request interceptor.  There are examples in the tests. Happy to, please send a PR :)  Since our use of superagent is quite well tested and isolated.\nNote, it's literally the exact same amount of work to call setHost one time for a proxy as it is to enable a custom agent and pass that.  but you have choices, as you pointed out.. Right you are.  See https://github.com/swagger-api/swagger-js/issues/925, looks like this only applies to www-form-urlencoded passwords. @DjLeChuck please pull master and retest. Strange but I may be misunderstanding. Can you send a PR with failing test?. closing due to no response :(\n. ok :)  Thank you for opening it here.  Digging in more, it is indeed isolated to swagger-ui, so I'm closing this out.  Sorry!. Fixed by #932.  Yes this was a bug.. Well to the first issue, response.obj is reserved for an object, where as \"foo\" is a string.  So you will never get an object in there.\nLooking at the array issue.... Regarding arrays, recall:\n```\nvar array = [1,2,3];\nconsole.log(typeof array);\n\n\"object\"\n\nArray.isArray(array);\n\ntrue\n```\n\nSo unless I'm missing something, swagger-js is behaving correctly. Hmm.  The change was to support allowEmptyValues as a query parameter option.  But it's possible that there's a check like this:\nif(something) {\n  // it exists\n}\nWhich would fail if the value is zero or false.  Will look into this.. I'll push out a 2.1.32 release with this.  Swagger-ui is waiting for it as well.. Build passes cleanly:\nhttps://travis-ci.org/swagger-api/swagger-js\nSo not sure if you have a local environment issue or not.  . @abhagupta which latest node?  Please give a version.. 7.9.1 isn't even available in nvm so I'm testing with the latest available there which is v7.7.1.\nWhen I switch to that version, I indeed get the error you're seeing.. Hi, thanks for the submission.  I fear that this is trading one problem for another--the data-raw may will better handle situations with high-level characters but the marjority of cases will have worse curl examples.  I need to look more but something doesn't look right.  I'll try to give some concrete feedback on the PR shortly.. OK I take it back.  Tested and reviewed, this should be good.. yes, it's a bug.  If you can send a PR with some tests, will get it merged quickly.. Hi, I would add tests to the regular main tests to ensure the check for window and its properties does not break.  I would also add a test to the karma suite as you suggested to ensure that the check works and behaves.  Thank you for asking!. Did you rebuild swagger-ui?. Just so it's clear, is the speed problem loading the swagger definition or executing a call that has a large payload?. If you can share the definition that would help. Please try obfuscating it then?. DID YOU REALLY CALL MY CODE DIRTY AT THE SAME TIME AS ASKING FOR HELP?  WHAT IS THIS WORLD COMING TO\nIn all honesty, and hurt feelings aside, I can save you trouble.  Wait for the end of the month and this code will be replaced with something written by better developers. (sniff). Nah, I think it's ugly code.  I'm just trying to say, this code is 100% getting recycled so I wouldn't worry about redoing it right now, unless you must patch things.\nWhat is well done are the tests against the resolver, so if you make any changes, it should catch your issues.. Try the responseInterceptor support. That will enable exactly what you're describing. You are using the 3.x version I take it?  This is a regression. We'll get it addressed shortly. well, yes tons of tests are needed, and if you look, I've disabled many of them because the client actually fails.  So while there is a test, there are probably 50 or so that should be ported from the old version into this class.  I suggest keeping this open. Are you using this inside the browser or via node?  It's not possible, AFAIK, to not follow the redirect in the browser.. Ah yes, I've seen that before, where an empty JSON body is actually invalid unless it's an \"empty json object\" ({}).  That was sent by the previous version but this must be a regression in the 3.x series.. @shockey ping on this?. oh! I think that what you put is the right behavior.  I'll retest and report back.... @shockey I\u2019ll get back to thisnover the weekend. I got lost in Java land for a bit and am doing a detox. WOW all this time I thought you didn\u2019t read issues anymore.... OK I've re-tested and things seem happy :D . It is a bit more picky about response headers when parsing but that's life. The build shouldn't pass as the post test validation here will fail.. I believe that if you remove this line, the authorizations won't be applied when fetching an individual api declaration\n. I believe that if you remove this line, the authorizations won't be applied when fetching an individual api declaration\n. This change will introduce a different behavior, namely, all authorizations should be applied if the object does not specify an authorization requirement (line 1556).  If we remove lines 1556 to 1563, we will lose this logic, and only apply authorizations where they're matching by name\n. see https://github.com/swagger-api/swagger-js/issues/308\n. see https://github.com/swagger-api/swagger-js/issues/307\n. see https://github.com/swagger-api/swagger-js/issues/306\n. This function needs to remove double slashes and '.{format}' suffixes\n. You should not set content-type to application/json if there is no body.  That will cause many parsers--including express--to give a JSON parse error\n. This is going to need some testing.  If you can add anything around this to ensure we're not introducing a regression on operation-based security, we can move forward.\n. I don't think it's safe to get rid of this code.  When interacting directly with the javascript client, you can pass arrays directly instead of encoding them into strings\n. This was a duplicate call causing all the issues.\n. Yes, that's fair\n. I'm not sure why we would split like this.  Seems like this would be undoing something that we did already?\n. Why set obj in an array?. @buunguyen I would think that it would be done in general and not per request, unless that creates issues.\nIn cases where you're calling to a different origin (i.e. from petstore.swagger.io to a different host) are you punished for setting this value, or is it just ignored?. ",
    "mikeobrien": "I'll check out the validator, thx. The issue I'm running into is about how resources are displayed in the ui so even if the spec is valid it's still an issue.\nThe more I look at this the more I'm thinking that the resource listing needs a nickname (like operations has). This would give the user control over how it's displayed in the ui. If the resource nickname is not specified it could default to the current behavior. So here is an example of what I'm talking about:\njavascript\n{\n    \"apiVersion\":\"1.0\",\n    \"swaggerVersion\":\"1.0\",\n    \"basePath\":\"http://yada.com/api\",\n    \"apis\":[\n        {\n            \"path\":\"/content_mailings.{format}\",\n            \"nickname\": \"/content/mailings\"\n            \"description\":\"Mailing content\"\n        },\n        {\n            \"path\":\"/delivery_campaigns_mailings.{format}\",\n            \"nickname\": \"/delivery/campaigns/mailings\"\n            \"description\":\"Campaign mailings\"\n        }\n    ]\n}\nThe current behavior would display this in the resource listing:\n/content_mailings\n/delivery_campaigns_mailings\nBut if there was a resource nickname, it could override that and display this (Or whatever):\n/content/mailings\n/delivery/campaigns/mailings\nWe're using fubumvc. There is an existing plugin but it doesn't meet our needs so we are rolling our own.\nThanks!\nm\nOops, reposted, I guess fenced code doesn't come through email.\n. Thanks for getting back to me Tony. I'll give it a try.\n. ",
    "pose": "Thanks :)! Let me know if I need to do some changes in https://github.com/wordnik/swagger-ui/pull/80 in order to get it merged.\n. Related pull request in UI: https://github.com/wordnik/swagger-ui/pull/89\n. ",
    "lloydmeta": "Ah, just realised my pull request is no longer required thanks to the fix a day ago....\n. ",
    "ayush": "Thanks @pose appreciate the follow-up!\n. ",
    "mangvlad": "What about 'window' and jQuery dependency?\nI am getting this error:\n.../node_modules/swagger-client/lib/swagger.js:760\n  window.SwaggerApi = SwaggerApi;\n  ^\n(It seems that this library was designed to only work in the browser...)\n. Tony,\nThank you for your reply, but the URL you suggesting is what is not working. It's returning an error.\nAs far as swagger-ui it appears that it is not using swagger.js for making requests, instead it is using swagger-ui.js and the code is very different...\nThanks.\n. ",
    "noboomu": "I had a LOT of problems getting swagger.js to run in node.js. I was unable to find documentation anywhere that let me immediately connect to an existing API.\nInitialize the swaggerAPI object like so (assuming root doc json is at \"http://kuttlephysh.local:9012/api/resources.json\"):\nvar swaggerApi  = new s.SwaggerApi({url: \"http://kuttlephysh.local:9012/api/resources.json\", verbose: true, debug: true,  success:  function(err,data) {\n     console.log('API');\n    console.log(swaggerApi);\n    console.log('HELP');\n    console.log(swaggerApi.help());\n  } \n   /* place operation calls here */\n}); \nNowhere was the above method provided in any of the documentation that I could find. In fact most of the documentation gave examples that somehow expected node to operate synchronously... \nOne thing to note is that there are two ways to call a resource's operations (assuming the resource's name is 'user'  and the operation is called 'view'):\n1. swaggerApi.user.view({userId:3},\n     function(data)\n     {\n       console.log('view callback:');\n       console.log(JSON.parse(data.content.data));\n     }\n   );\n2. swaggerApi.apis.user.operations.view.do({userId:3},\n     function(data)\n     {\n       console.log('view callback:');\n       console.log(JSON.parse(data.content.data));\n     }\n   );\nHope this helps anyone else struggling with this...\n. ",
    "mayank13": "The example is not working for me as well. Your previous comment mentions it has been fixed but I  am not able to run the example .\n@fehguy Kindly help.\nP.S.: I have downloaded the code from github and launching the example.html . The chrome is neither showing any error nor it is showing the result.\n. @fehguy I took the latest code from github and now I am getting the following error:\nXMLHttpRequest cannot load http://api.wordnik.com/v4. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access. \nKindly siggest  how to resolve this error.\n. ",
    "nlap": "Agree with this change. As it stands I can't use swagger on localhost.\n. ",
    "donovanmuller": "Same problem. Individual endpoints work, however the API listing fails with above error.\n. Hi Justin,\nOur issue turned out to be a circular reference in one of your models.\nOnce that was rectified all was ok.\nMaybe that helps?\n. ",
    "justinhrobbins": "I'm experiencing the same problem.  Any ideas of how to troubleshoot this issue?  You can see it in action (through Chrome) here: http://socialflashcards.com/swagger-ui/\n. ",
    "jplock": "@donovanmuller, even if that's the case, shouldn't swagger-ui properly handle it?\n. ",
    "dilipkrish": "@fehguy I think I fixed the coffee script correct because the project to javascript looks correct and all the tests pass. Let me know if this looks ok.\n. Anyone looking at the pull request?\n. @webron I'm a little :confused: \nJust to be clear this PR is only to support paths like http://example.org/{city}/customers{?email}. \nCurrently swagger-spec supports path templating but I could NOT find anything in the spec where RFC6570 paths are specifically precluded. So technically, swagger-js should support urls presented in the above format. \nThe motivation for this PR is that I've added ability in springfox to optionally support RFC 6570 compliant templates, so as to support findBy scenarios.\nSo this PR is to support that specific use case where the path is an valid URL template. Now if in the next version of the spec we do specify that the url templates will conform to RFC 6570 then great! we already have it supported in swagger-js!!  \nNow I do have 2 outstanding questions (as open tasks in the PR), that I'd like to be included as part discussion for the spec amendment. \nAlso, would you mind pointing me in the right direction, as regards, where/how one would be able to override the collectionFormat for a property to specify tsv, ssv etc.\nOf course its up to you guys to figure out if/when you want to pull this in, but IMHO, this is orthogonal to the spec being amended. \n. Understood! Would've been nice to subvert the spec with this PR :stuck_out_tongue_winking_eye: \nSeriously tho' I'd prefer to do it the right way. I thought I did bring it up, unfortunately I can't find the thread, but I believe it had to do with supporting multiple paths for finder operations and operations that support different response media types based on accept headers. \nIs the swagger spec working group active? All this work is to facilitate hypermedia support that I've been working on. So I wanted to bounce some ideas I had to provide hypermedia support. I know had a brief conversation with @olensmar about it, but what is the right forum for that.\n. i think the diffs are not properly aligned. I replaced the hand rolled urlify with a delegation to a urltemplate aware substitution  library. So I suspect that the library will take care of the substitutions?\n. ",
    "jwyuen": "Bump!  Would really like to see this implemented for DRY purposes.\n. ",
    "andycmaj": "Yes... so would I!\n. ",
    "joegluntz": "Wow, I had not seen that.  I think that'll do it - based on the included ApiKeyAuthorization example, I think it's going to work great.  Just to confirm - I think the \"obj\" parameter to apply() is a SwaggerOperation, right?\n. Also - will the \"obj\" parameter have the current filled-in values of the regular request parameters?\n. Oh I see it's the object that's passed to the jQuery.ajax call.  I think this will work perfectly.\nOn a side note, I've noticed that SwaggerUi seems to handle the execution part slightly differently than the regular SwaggerApi class.  Will SwaggerUi be updated to support this authorization application process?\n. I haven't had a chance to try this yet but it looks very promising - I'm going to close this issue for now.  Many thanks.\n. ",
    "xevix": "@fehguy Is there a place to get more documentation on the pluggable auth feature? In particular, how to intercept the obj listed above, before each request, to for example add HMAC signature headers? I see nothing in swagger-js, and in swagger-ui the word \"pluggable\" is mentioned with a link to an example of adding a header https://github.com/wordnik/swagger-ui/blob/master/dist/index.html but this is just updating a key when it changes, and not signing upon every request. Thanks!\n. @fehguy Ah, got it. Thanks very much. Look forward to more documentation to make use of more features, good luck!\n. ",
    "srl295": "The README.md section on custom request signing is missing this critical line from this comment:\nwindow.authorizations.add(\"my_authorization\", new CustomAuthorization(\"my_authorization\");\n.. and that is that the \"custom request signing\" is an \"authorization(s)\" object.  \nBut, unlike the above (ancient) code snippets, obj.body seems to be an [Object] and not a string.\n. @webron just so. The step before that is getting it to work, though. Is there a way to get at the 'string body' as in that snippet? So far I am using JSON.stringify(obj.body) which seems to work\n. actually the sample in the README generates the warnings.\n``` javascript\nvar Swagger = require('swagger-client');\nvar client = new Swagger({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  success: function() {\n    client.pet.getPetById({petId:7},{responseContentType: 'application/json'},function(pet){\n      console.log('pet', pet);\n    });\n  }\n});\n``\n. @fehguy thanks- I'm not sure what the above code has to do with swagger-ui? It seems like it's the dynamic builder that is calling the functions.\n. 06c6cb6e88d728a5ec7c7ef01b343c35c65fc4d7 by @bodnia added the warning messages even thoughOperation()calls the deprecated functions.\n. @fehguy thanks, glad to help test\n. @fehguy master ( 37e3035006dc122aabf2d1f17456698dc8aaaf86 )  looks good now, thx\n. @fehguy I see a similar issue on Node on Windows \u2026\u00a0thanks for pushing this fix into v2.1.16\n. Yes that works, alreaDy tested. \n. if i can tag onto this (ha) also, while 3.x does not seem to support custom authenticators, they can be done withrequestInterceptor`. I was able to do that pretty easily, will include a link once I push the commit\u2026. > but this seems like semver funkiness to me\nto me also. \n\nI'm fairly sure semver/npm makes version resolution decisions based on version numbers, not chronology.\n\nYes, but the problem is that 2.2.21 > 2.1.32 and so anyone depending on 2.x will actually get 2.2.21 which is actually 2.1.21  and older than 2.1.31 in terms of code.\nI guess there is an npm unpublish which might really be the right thing\u2122 here. I was misremembering that you can't unpublish a version, what you can't do is re-publish to the same number.\n. for me, i plan to fix this by moving to 3.x :). Working for me when we upgraddd from 2.x to 3.x https://github.com/IBM-Bluemix/gp-js-client/pull/86 (more precise link later- look for gaashmac.js ). https://github.com/IBM-Bluemix/gp-js-client/pull/86/files#diff-38aee4b3886a621f8daddb4104803472 \n. @patrickml it's in the link above  here , but i'm working on a blog post also.  here is where I inject the interceptor.  My 2.x custom auth client turned into an interceptor by changing return true to return req at the end.\nWarning: monster unreviewed PR :). @patrickml did you get it to work?. Is there a way to get an unminified dist/index.js? I tried a bit, but my webpack-fu is not all that.\nedit Answered via #1172. bisect points at 060b7913ac0e3e16dbc812459ee8e15bb07ce9be, #1161. To turn off minification, remove -p from the npm run build script args to webpack.\n```\n/Users/srl/src/swagger-js/dist/index.js:474\n  var contentType = request.headers['content-type'] || request.headers['Content-Type'];\n                                   ^\nTypeError: Cannot read property 'content-type' of undefined\n    at http (/Users/srl/src/swagger-js/dist/index.js:474:36)\n    at /Users/srl/src/swagger-js/dist/index.js:2500:12\n    at Function.resolve (/Users/srl/src/swagger-js/dist/index.js:2546:117)\n    at Swagger.resolve (/Users/srl/src/swagger-js/dist/index.js:1276:20)\n    at Swagger (/Users/srl/src/swagger-js/dist/index.js:1246:19)\n    at Client.createSwaggerClient (/Users/srl/src/gp-js-client/lib/client.js:109:27)\n    at new Client (/Users/srl/src/gp-js-client/lib/client.js:74:21)\n. It was my bug, please see https://github.com/IBM-Bluemix/gp-js-client/pull/106 for detailed analysis. this was observed under 3.3.1 and also `master` (so 3.4.4+) .js\nurl.parse(\"http://example.com/'\").href;\n// --> http://example.com/%27\n```\n. @shockey this is via node.js API, not browser. And interesting, looking at your inspector\u2026\u00a0in this case though,  the HTTP request isn't wrong, the problem is that what's passed to the interceptor is not what goes out over the wire. The Fetch module does another escaping after the interceptor is done.\nI think i can make a standalone case for it.. @webron pong ^. @shockey ping ^ ? . It's Fetch that escapes. gist here https://gist.github.com/srl295/782b21a24f70f963fefb541e23373984. ",
    "webron": "@srl295 - that seems like just one step before a PR.\n. This discussion is moved to the swagger-spec repository as it first needs to be resolved in the swagger specification - https://github.com/wordnik/swagger-spec/issues/38.\n. This discussion is moved to the swagger-spec repository as it first needs to be resolved in the swagger specification - https://github.com/wordnik/swagger-spec/issues/38.\n. An operation field must always have a \"type\" field, whether it uses a Model\nor not.\nOn 26 June 2014 16:14, Joe Winter notifications@github.com wrote:\n\nIf an operation doesn't have a \"type\" field (e.g. it doesn't use a Model),\nthe select menu for Response Content Type does not appear. This became a\nbug for me because we weren't able to send an Accept header of\napplication/xml without that field.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wordnik/swagger-js/issues/100.\n. You mean when dataType has the value 'array' or when the value is an array of values?\n. Okay, Swagger doesn't support an array of values for a dataType.\n. It supports the definition of these, yes. You can say that a data type is a primitive or an array of primitives/models.\n\nIt doesn't support an array of possible types.\nThe value 'array' is fine.\n. That sounds like an issue that should be opened on https://github.com/worldline/swagger-jack rather than here.\n. @ackroo - eventually, this issue was not related to swagger-js (and as you can see it is closed). For the sake of documentation, can you please open a new issue? It's easy for us to miss new comments on closed issues. \n. @tpitale - according to the spec, in the parameter object only type is used and never $ref.\nYou can see that here - https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#524-parameter-object - in the second paragraph.\nAs such, this check is not really necessary as it implies a malformed swagger specification file. \n. There are some places where $ref is used and others where type is used to reference models. This is part of the evolution of the spec, and quite possibly a point that was a bit overlooked.\nIn the next major version of the spec (which is in process) we're changing it to have a unified behavior all across and solve this issue once and for all.\n. +1 to what exactly?\n. Okay, yes, since we're already deep into the next specification version I can tell you that it has indeed changed.\nAs for the \"enum\" field, that won't change because we're sticking with the json-schema standard and that's the keyword being used there.\nIf you have any specific issues with any java implementation, feel free to send a question to the google group and I'll try helping from there.\n. @garryyao - I realize it's been a long time, but would you be willing to update the PR to the current code base?\n. @Larry0ua - I realize it's been a long time, but would you be willing to update the PR to the current code base?\n. This is for 1.2 specs or 2.0 specs?\n. :+1: wanted to clarify because \"/\" is not supported as a basePath in 1.2.\n. @callenx - yeah, it kinda fell through.\n. Do you really have a path param with the name \"id:([a-z0-9-]{36})\"? Mind you, it's not that there's anything wrong with it, but if you assume it enforces a regex on possible values, according to the spec it does not.\nAgain, not sure if this is what you're looking for, but if it is, keep in mind that Swagger 1.2 does not support regex definition of possible values, whereas Swagger 2.0 does.\n. No problem. Just wanted to make sure you don't expect value validation to take place.\n. @mrhanlon  - that's not a valid swagger spec unfortunately.\nYou can't use \"type\":\"File\" within models.\nThe structure that should be is more like this:\njs\n{\n    \"method\": \"POST\",\n    \"nickname\": \"importToDefaultSystem\",\n    \"notes\": \"This will return a handle to the file upload.\",\n    \"consumes\": [\n      \"multipart/form-data\"\n    ],\n    \"parameters\": [\n        {\n            \"allowMultiple\": false,\n            \"description\": \"The path of the file relative to the user's default storage location.\",\n            \"name\": \"sourcefilePath\",\n            \"paramType\": \"path\",\n            \"required\": true,\n            \"type\": \"string\"\n        },\n        {\n            \"allowMultiple\": false,\n            \"description\": \"The file to upload\",\n            \"name\": \"file\",\n            \"paramType\": \"form\",\n            \"required\": true,\n            \"type\": \"File\"\n        },\n       {\n            \"allowMultiple\": false,\n            \"description\": \"The name of the file\",\n            \"name\": \"fileName\",\n            \"paramType\": \"form\",\n            \"required\": true,\n            \"type\": \"File\"\n        },...\n    ],\n    \"summary\": \"Import a file via direct upload or importing from a url to the user's default storage location.\",\n    \"type\": \"SingleRemoteFileResponse\"\n}\nAnd so on... you'll have to excuse me for not copying all the parameters, but I'm sure you get the idea.\n. Can you share some more details? Which language/framework you're using, maybe even a code snippet? There's actually a sample in the petstore that shows how it works.\n. Unfortunately, I'm not familiar enough with javascript to follow the code, so that's going to be left up to @fehguy. However, the behavior of replacing the body doesn't strike me as that odd since you can't really mix form parameters with body parameters, as eventually they both use the request body to pass on the data. It can't really merge them as they are not really processed in the same manner.\nWhile your PR may still be relevant and valid, I'll add here a quick explanation from what I understand of how it should work. I apologize if I'm stating the obvious, just want to make sure it is clear as to how it is supposed to work.\nThe first type of forms is when setting the content type to application/x-www-form-urlencoded. That's the more common style for passing HTML form types. It ends up having a request body that looks very similar to a query string. Something like this:\nname=Alice&status=Ready\nThe second type of content type is multipart/form-data. That's normally used when it comes to passing binary data as part of HTTP request. It basically splits the request body to several sections (hence, the multipart in the name), and ends up looking something like this:\n```\n-----------------------------68441900111077364751191199482\nContent-Disposition: form-data; name=\"additionalMetadata\"\nvalid swagger\n-----------------------------68441900111077364751191199482\nContent-Disposition: form-data; name=\"file\"; filename=\"valid.png\"\nContent-Type: image/png\n\u2030PNG\n\u001a\n\u0000\u0000\u0000\nIHDR\u0000\u0000\u0000X\u0000\u0000\u0000\u001e\b\u0006\u0000\u0000\u0000\u00a8\u201d\u00d9E\u0000\u0000\nAiCCPICC Profile\u0000\u0000H\n\u009d\u2013wTS\u00d9\u0016\u2021\u00cf\u00bd7\u00bd\u00d0\u0012\" %\u00f4\u001az  \u00d2;H\u0015\u0004Q\u2030I\u20acP\u2020\u201e&vD\u0005F\u0014\u0011)VdT\u00c0\u0001G\u2021\"cE\u0014\u000b\u0192\u201ab\u00d7  \u00f2\u0010P\u00c6\u00c1QDE\u00e5\u00dd\u0152k  \u00ef\u00ad5\u00f3\u00de\u0161\u00fd\u00c7Y\u00df\u00d9\u00e7\u00b7\u00d7\u00d9g\u00ef}\u00d7\u00ba\u0000P\u00fc\u201a\u0004\u00c2tX\u0001\u20ac4\u00a1X\u0014\u00ee\u00eb\u00c1\\\u0012\u0013\u00cb\u00c4\u00f7\u0018\u0010\u0001\u000eX\u0001\u00c0\u00e1ff\u0004G\u00f8D\u00d4\u00fc\u00bd=\u2122\u2122\u00a8H\u00c6\u00b3\u00f6\u00ee.\u20acd\u00bb\u00db,\u00bfP&s\u00d6\u00ff\u007f\u2018\"7C$\u0006\u0000\nE\u00d56<~&\u0017\u00e5\u201dS\u00b3\u00c5\u00192\u00ff\u0004\u00ca\u00f4\u2022)2\u202012\u0016\u00a1   \u00a2\u00ac\"\u00e3\u00c4\u00afl\u00f6\u00a7\u00e6+\u00bb\u00c9\u02dc\u2014&\u00e4\u00a1\u001aY\u00ce\u0019\u00bc4\u017e\u0152\u00bbP\u00de\u0161%\u00e1\u00a3\u0152\u0004\u00a1\\\u02dc%\u00e0g\u00a3|\u0007e\u00bdTI\u0161\u0000\u00e5\u00f7(\u00d3\u00d3\u00f8\u0153L\u00000\u0014\u2122\u00cc\u00e7&\u00a1l\u20302E\u0014\u0019\u00ee\u2030\u00f2\u0000\b\u201d\u00c49\u00bcr\u000e\u2039\u00f99h\u017e\u0000x\u00a6g\u00e4\u0160\u0004\u2030Ib\u00a6\u0011\u00d7\u02dci\u00e5\u00e8\u00c8f\u00fa\u00f1\u00b3S\u00f9b1+\u201d\u00c3M\u00e1\u02c6xL\u00cf\u00f4\u00b4\f\u017d0\u0017\u20ac\u00afo\u2013E\u0001%Ym\u2122h\u2018\u00ed\u00ad\u001c\u00ed\u00edY\u00d6\u00e6h\u00f9\u00bf\u00d9\u00df\u001e~S\u00fd=\u00c8z\u00fbU\u00f1&\u00ec\u00cf\u017eA\u0152\u017eY\u00dfl\u00ec\u00ac/\u00bd\u0016\u0000\u00f6$Z\u203a\u001d\u00b3\u00be\u2022U\u0000\u00b4m\u0006@\u00e5\u00e1\u00acO\u00ef \u0000\u00f2\u0005\u0000\u00b4\u00de\u0153\u00f3\u001e\u2020l^\u2019\u00c4\u00e2\f'\u000b\u2039\u00ec\u00ecls\u0001\u0178k.+\u00e87\u00fb\u0178\u201ao\u00ca\u00bf\u20209\u00f7\u2122\u00cb\u00ee\u00fbV;\u00a6\u0017?\u0081#I\u00153eE\u00e5\u00a6\u00a7\u00a6KD\u00cc\u00cc\f\u000e\u2014\u00cfd\u00fd\u00f7\u0010\u00ff\u00e3\u00c09i\u00cd\u00c9\u00c3,\u0153\u0178\u00c0\u0017\u00f1\u2026\u00e8UQ\u00e8\u201d   \u201e\u2030h\u00bb\u2026<\u0081X\u0090.d\n\u201e\u007f\u00d5\u00e1\u007f\u00186'\u0007\u0019~\u009dk\u0014hu\u0000}\u20269P\u00b8I\u0007\u00c8o=\u0000C#$n?z}\u00eb[\u00101\n\u00c8\u00be\u00bch\u00ad\u2018\u00afs\u008f2z\u00fe\u00e7\u00fa\u001f\u000b\\\u0160n\u00e1LA\"S\u00e6\u00f6\f\u008fdr%\u00a2,\u0019\u00a3\u00df\u201el\u00c1\u0012\u0090\u0007t \n4\u0081.0,\u20ac3p\u00de \u0000\u201e\u20acH\u0010\u2013.Hi@\u0004\u00b2A>\u00d8\u0000\nA1\u00d8\u0001v\u0192jp\u0000\u00d4\u0081z\u00d0\u0004N\u201a6p\u0006\\\u0004W\u00c0\np\u000b\f\u20acG@\n\u2020\u00c1K0\u0001\u00de\u0081i\b\u201a\u00f0\u0010\u0015\u00a2A\u00aa\u0090\u0016\u00a4\u000f\u2122B\u00d6\u0010\u001bZ\byCAP8\u0014\u00c5C\u2030\u0090\u0010\u2019@\u00f9\u00d0&\u00a8\u0018*\u0192\u00aa\u00a1CP=\u00f4#t\u001a\u00ba\b]\u0192\u00fa \u0007\u00d0 4\u0006\u00fd\u0001}\u201e\u0011\u02dc\u00d3a\n\u00d8\u0000\u00b6\u20ac\u00d9\u00b0;\u001c\bG\u00c2\u00cb\u00e0Dx\u0015\u0153\u0007\u0017\u00c0\u00db\u00e1J\u00b8\u0016>\u000e\u00b7\u00c2\u0017\u00e1\u001b\u00f0\u0000,\u2026_\u00c2\u201c\b@\u00c8\b\u00d1FX\b\u001b\u00f1DB\u0090X$\u0001\u0011!k\u2018\"\u00a4\u00a9E\u0161\u0090\u000e\u00a4\u001b\u00b9\u008dH\u2018q\u00e4\u0006\u2021\u00a1a\u02dc\u0018\u0016\u00c6\u0019\u00e3\u2021Y\u0152\u00e1bVa\u00d6bJ0\u00d5\u02dcc\u02dcVL\u0017\u00e66f\u00103\u0081\u00f9\u201a\u00a5b\u00d5\u00b1\u00a6X'\u00ac?v  6\u0011\u203a\u008d-\u00c4V\u008f[\u00b0\u2014\u00b1\u00d8a\u00ec;\u001c\u000e\u00c7\u00c0\u0019\u00e2\u001cp~\u00b8\u0018\\2n5\u00ae\u0004\u00b7\u000f\u00d7\u0152\u00bb\u20ac\u00eb\u00c3\n\u00e1&\u00f1x\u00bc*\u00de\u0014\u00ef\u201a\u000f\u00c1s\u00f0b|!\u00be\n\u007f\u001c\u007f\u001e\u00df\u008f\u001f\u00c6\u00bf'\u0090    Z\u0004k\u201a\u000f!\u2013 $l$T\u0010\u001a\b\u00e7\b\u00fd\u201e\u0011\u00c24Q\u0081\u00a8Ot\"\u2020\u0010y\u00c4\\b)\u00b1\u017d\u00d8A\u00bcI\u001c&N\u201c\u0014I\u2020$\u0017R$)\u2122\u00b4\u0081TIj\"]&=&\u00bd!\u201c\u00c9:dGr\u0018Y@^O\u00ae$\u0178 _%\u000f\u2019?P\u201d(&\u0014OJ\u001cEB\u00d9N9J\u00b9@y@yC\u00a5R\n\u00a8n\u00d4X\u00aa\u02dc\u00ba\u009dZO\u00bdD}J}/G\u201c3\u2014\u00f3\u2014\u00e3\u00c9\u00ad\u201c\u00ab\u2018k\u2022\u00eb\u2014{%O\u201d\u00d7\u2014w\u2014_.\u0178'_!\u007fJ\u00fe\u00a6\u00fc\u00b8Q\u00c1@\u00c1S\u0081\u00a3\u00b0V\u00a1F\u00e1\u00b4\u00c2=\u2026IE\u0161\u00a2\u2022b\u02c6b\u0161b\u2030b\u0192\u00e25\u00c5Q%\u00bc\u2019\u0081\u2019\u00b7\u0012O\u00a9@\u00e9\u00b0\u00d2%\u00a5!\u001aB\u00d3\u00a5y\u00d2\u00b8\u00b4M\u00b4:\u00dae\u00da0\u001dG7\u00a4\u00fb\u00d3\u201c\u00e9\u00c5\u00f4\u001f\u00e8\u00bd\u00f4 e%e[\u00e5(\u00e5\u001c\u00e5\u001a\u00e5\u00b3\u00caR\u0006\u00c20\u00f83R\u0019\u00a5\u0152\u201c\u0152\u00bb\u0152\u008f\u00f34\u00e6\u00b9\u00cf\u00e3\u00cf\u00db6\u00afi^\u00ff\u00bc)\u2022\u00f9n|\u2022\"\u2022f\u2022\u0001\u2022\u008f\u00aaLUo\u00d5\u0014\u00d5\u009d\u00aam\u00aaO\u00d40j&jaj\u00d9j\u00fb\u00d5.\u00ab\u008d\u00cf\u00a7\u00cfw\u017e\u00cf\u009d4\u00ff\u00e4\u00fc\u2021\u00ea\u00b0\u00ba\u2030z\u00b8\u00faj\u00f5\u00c3\u00ea=\u00ea\u201c\u001a\u0161\u001a\u00be\u001a\u0019\u001aU\u001a\u20144\u00c65\u0019\u0161n\u0161\u00c9\u0161\u00e5\u0161\u00e74\u00c7\u00b4hZ\u000b\u00b5\u0004Z\u00e5Z\u00e7\u00b5^0\u2022\u2122\u00ee\u00ccTf%\u00b3\u20399\u00a1\u00ad\u00ae\u00ed\u00a7-\u00d1>\u00a4\u00dd\u00ab=\u00adc\u00a8\u00b3Xg\u00a3N\u00b3\u00ce\u0013]\u2019.[7A\u00b7\\\u00b7SwBOK/X/\u00afQ\u00ef\u00a1>Q\u0178\u00ad\u0178\u00a4\u00bfG\u00bf[\u007f\u00ca\u00c0\u00d0 \u00da\u2039A\u203a\u00c1\u00a8\u00a1\u0160\u00a1\u00bfa\u017ea\u00a3\u00e1c#\u00aa\u2018\u00ab\u00d1*\u00a3Z\u00a3;\u00c68c\u00b6q\u0160\u00f1>\u00e3[&\u00b0\u2030\u009dI\u2019I\u008d\u00c9MS\u00d8\u00d4\u00deT\u00ba\u00cf\u00b4\u00cf\fk\u00e6h&4\u00ab5\u00bb\u00c7\u00a2\u00b0\u00dcYY\u00acF\u00d6 9\u00c3<\u00c8|\u00a3y\u203a\u00f9+\u000b=\u2039X\u2039\u009d\u0016\u00dd\u0016,\u00ed,S-\u00eb,\u001fY)Y\u0005Xm\u00b4\u00ea\u00b0\u00fa\u00c3\u00da\u00c4\u0161k]c}\u00c7\u2020j\u00e3c\u00b3\u00ce\u00a6\u00dd\u00e6\u00b5\u00ad\u00a9-\u00dfv\u00bf\u00ed};\u0161]\u00b0\u00dd\u0016\u00bbN\u00bb\u00cf\u00f6\u000e\u00f6\"\u00fb&\u00fb1\u0007=\u2021x\u2021\u00bd\u000e\u00f7\u00d8tv(\u00bb\u201e}\u00d5\u0011\u00eb\u00e8\u00e1\u00b8\u00ce\u00f1\u0152\u00e3\u0007'{'\u00b1\u00d3I\u00a7\u00df\u009dY\u00ce)\u00ce\n\u00ce\u00a3\u000b\f\u0017\u00f0\u0017\u00d4-\u0018r\u00d1q\u00e1\u00b8\u001cr\u2018.d.\u0152_xp\u00a1\u00d4U\u00db\u2022\u00e3Z\u00eb\u00fa\u00ccM\u00d7\u008d\u00e7v\u00c4m\u00c4\u00dd\u00d8=\u00d9\u00fd\u00b8\u00fb+\u000fK\u000f\u2018G\u2039\u00c7\u201d\u00a7\u201c\u00e7\u001a\u00cf\u000b^\u02c6\u2014\u00afW\u2018W\u00af\u00b7\u2019\u00f7b\u00efj\u00ef\u00a7>:>\u2030>\u008d>\u0013\u00bev\u00be\u00ab}/\u00f8a\u00fd\u00fdv\u00fa\u00dd\u00f3\u00d7\u00f0\u00e7\u00fa\u00d7\u00fbO\u00048\u0004\u00ac  \u00e8\n\u00a4\u0004F\u0004V\u0007>\u000b2  \u0012\u0005u\u0004\u00c3\u00c1\u0001\u00c1\u00bb\u201a\u001f/\u00d2$\\\u00d4\u0016B\u00fcCv\u2026<    5\f]\u0015\u00fas\u0018.,4\u00ac&\u00ecy\u00b8Ux~xw\u0004-bEDC\u00c4\u00bbH\u008f\u00c8\u00d2\u00c8G\u2039\u008d\u0016K\u0016wF\u00c9G\u00c5E\u00d5GME{E\u2014EK\u2014X,Y\u00b3\u00e4F\u0152Z\u0152 \u00a6=\u0016\u001f\u001b\u0015{$vr\u00a9\u00f7\u00d2\u00ddK\u2021\u00e3\u00ec\u00e2\n\u00e3\u00ee.3\\\u2013\u00b3\u00ec\u00dar\u00b5\u00e5\u00a9\u00cb\u00cf\u00ae\u0090\u00c1Yq\u001e\u001b\u001f\u001d\u00df\u0010\u00ff\u2030\u0013\u00c2\u00a9\u00e5L\u00ae\u00f4_\u00b9w\u00e5\u0004\u00d7\u201c\u00bb\u2021\u00fb\u2019\u00e7\u00c6+\u00e7\u008d\u00f1]\u00f8e\u00fc\u2018\u0004\u2014\u201e\u00b2\u201e\u00d1D\u2014\u00c4]\u2030cI\u00aeI\u0015I\u00e3OA\u00b5\u00e0u\u00b2_\u00f2\u0081\u00e4\u00a9\u201d\u0090\u201d\u00a3)3\u00a9\u00d1\u00a9\u00cdi\u201e\u00b4\u00f8\u00b4\u00d3B%a\u0160\u00b0+]3='\u00bd/\u00c34\u00a30C\u00ba\u00cai\u00d5\u00eeU\u0013\u00a2@\u00d1\u2018L(sYf\u00bb\u02dc\u017d\u00feL\u00f5H\u0152$\u203a%\u0192Y\u000b\u00b3j\u00b2\u00degGe\u0178\u00caQ\u00cc\u0011\u00e6\u00f4\u00e4\u0161\u00e4n\u00cb\u001d\u00c9\u00f3\u00c9\u00fb~5f5wug\u00bev\u00fe\u2020\u00fc\u00c15\u00eek\u000e\u00ad\u2026\u00d6\u00ae\\\u00db\u00b9Nw]\u00c1\u00ba\u00e1\u00f5\u00be\u00eb\u008fm mH\u00d9\u00f0\u00cbF\u00cb\u008de\u001b\u00dfn\u0160\u00de\u00d4Q Q\u00b0\u00beh\u00b3\u00ef\u00e6\u00c6B\u00b9BQ\u00e1\u00bd-\u00ce[\u000el\u00c5l\u0015l\u00ed\u00ddf\u00b3\u00adj\u00db\u2014\"^\u00d1\u00f5b\u00cb\u00e2\u0160\u00e2O%\u00dc\u2019\u00eb\u00dfY}W\u00f9\u00dd\u00cc\u00f6\u201e\u00ed\u00bd\u00a5\u00f6\u00a5\u00fbw\u00e0v\bw\u00dc\u00dd\u00e9\u00ba\u00f3X\u2122bY^\u00d9\u00d0\u00ae\u00e0]\u00ad\u00e5\u00cc\u00f2\u00a2\u00f2\u00b7\u00bbW\u00ec\u00beVa[q\u000fi\u008fd\u008f\u00b42\u00a8\u00b2\u00bdJ\u00afjG\u00d5\u00a7\u00ea\u00a4\u00ea\u0081\u001a\u008f\u0161\u00e6\u00bd\u00ea{\u00b7\u00ed\u009d\u00da\u00c7\u00db\u00d7\u00bf\u00dfm\u007f\u00d3\u0001\u008d\u00c5\u0007>\u001e\u0014\u001c\u00bc\u007f\u00c8\u00f7Pk\u00adAm\u00c5a\u00dc\u00e1\u00ac\u00c3\u00cf\u00eb\u00a2\u00ea\u00ba\u00bfg\u007f_\u007fD\u00edH\u00f1\u2018\u00cfG\u2026G\u00a5\u00c7\u00c2\u008fu\u00d5;\u00d4\u00d77\u00a87\u201d6\u00c2\u008d\u2019\u00c6\u00b1\u00e3q\u00c7o\u00fd\u00e0\u00f5C{\u0013\u00ab\u00e9P3\u00a3\u00b9\u00f8\u00048!9\u00f1\u00e2\u00c7\u00f8\u001f\u00ef\u017e\f<\u00d9y\u0160}\u00aa\u00e9'\u00fd\u0178\u00f6\u00b6\u00d0Z\u0160Z\u00a1\u00d6\u00dc\u00d6\u2030\u00b6\u00a46i{L{\u00df\u00e9\u20ac\u00d3\u009d\u001d\u00ce\u001d-?\u203a\u00ff|\u00f4\u0152\u00f6\u2122\u0161\u00b3\u00cagK\u00cf\u2018\u00ce\u0015\u0153\u203a9\u0178w~\u00f2B\u00c6\u2026\u00f1\u2039\u2030\u0017\u2021:Wt>\u00ba\u00b4\u00e4\u00d2\u009d\u00ae\u00b0\u00ae\u00de\u00cb\u0081\u2014\u00af^\u00f1\u00b9r\u00a9\u00db\u00bd\u00fb\u00fcU\u2014\u00abg\u00ae9];}\u009d}\u00bd\u00ed\u2020\u00fd\u008d\u00d6\u001e\u00bb\u017e\u2013_\u00ec~i\u00e9\u00b5\u00efm\u00bd\u00e9p\u00b3\u00fd\u2013\u00e3\u00ad\u017d\u00be\u0005}\u00e7\u00fa]\u00fb/\u00de\u00f6\u00ba}\u00e5\u017d\u00ff\u009d\u001b\u2039\u0006\u00fa\u00ee.\u00be{\u00ff^\u00dc=\u00e9}\u00de\u00fd\u00d1\u0007\u00a9\u000f^?\u00ccz8\u00fdh\u00fdc\u00ec\u00e3\u00a2'\nO\u017e\u00aa?\u00ad\u00fd\u00d5\u00f8\u00d7f\u00a9\u00bd\u00f4\u00ec \u00d7\u00cf\u00b3\u02c6g\u008f\u2020\u00b8C/\u00ff\u2022\u00f9\u00afO\u00c3\u0005\u00cf\u00a9\u00cf+F\u00b4F\u00eaG\u00adG\u00cf\u0152\u00f9\u0152\u00ddz\u00b1\u00f4\u00c5\u00f0\u00cb\u0152\u2014\u00d3\u00e3\u2026\u00bf)\u00fe\u00b6\u00f7\u2022\u00d1\u00ab\u0178~w\u00fb\u00bdgb\u00c9\u00c4\u00f0k\u00d1\u00eb\u2122?J\u00de\u00a8\u00be9\u00fa\u00d6\u00f6m\u00e7d\u00e8\u00e4\u00d3wi\u00ef\u00a6\u00a7\u0160\u00de\u00ab\u00be?\u00f6\u0081\u00fd\u00a1\u00fbc\u00f4\u00c7\u2018\u00e9\u00ecO\u00f8O\u2022\u0178\u008d?w| \u00fc\u00f2x&mf\u00e6\u00df\u00f7\u201e\u00f3\u00fb2:Y~\u0000\u0000\u0005\u0192IDATh\u0005\u00edZ}L[U\u0014\u00ff\u00bd\u00d7\u0016h\u000bi\u000b\u201d\u000f'\u001b_2\u0018 \u0011\u00d1\u008d\u00b8\u0005\u0011\u00e6D76\u2030\u00c9\u00c8\u00167\u00a3f\u0011\u00ff1\u2122\u00c6\u0018\u0152\u0178\u2030&j$Y\u00ccXX\u00fcC\u00137\u2022d\u02dc\u2122\u2030\"s\u00d3M\u0019\u00b6\u00b0\u2018\u008d\u0001\u0013\u00c3\u00c76\u00be\u00a1\u00b4\u201d\u00b6\u00cf{/\u00bcB#\u00af@?X\u0018\u00bdIy\u00e7\u017e\u00fb;\u00e7\u00dc\u00fb\u00eby\u00f7\u017e\u00f7\n\u0007\u00d2\u00ca\u001aR\u017e\u00b4B\u00f8\u201eR\u0005\b2\u00aa\u00bb\u00d7\u00da\u00b5\u2020\u00f1e[\u2019\u00dc\u008f\u00b3*\u00f9z\u008df\"\u2014;\u00da\u0153\u2013l\u00b5Z\u001a\u0005A\u00f0[\u00b6\u0019\u00dc\u2026@\u00cbI\u00b0\u00b8\u00bc \u009d\u00acVn\u00b3X\nI\u00d6\u00de\u00d3\u00e4\u0160\u000b^\u00ee\u00ab\u00d1{\u201e\u00b7\u0001\u2018\u00cb\u001dx\u00b5\u00c4\u00b3\u02dc\u0005\u0019\u00bfZ\u0016{\u00b7\u00d6\u00e9#\u00d8\u00cb\u00cc\u00fb\b\u00f62\u00c1r/\u00fb\u0011\u00ee9\u017dG\u00fe\u00c6b\u00a4\u00c7\u00e7\u00c3l1\u00e2\u00a3\u00ef\u00b2\u0153\u00ce\u00bb\u00e4@'\u2020\u00c7{p\u00be\u00e5k\u0153\u00bd|\u00d4)\u00d6\u2014\u00c1\u201e\u017e-\u00c9\u00fb\u2018\u009d\u00f62F\f\u00b7p\u00e6R\u2122S\u00c2\u00e8e\u00ddg\u0010\u0004\u001bvf\u0016#)*\u00db)\u00deG0\u00a1':<\u009d\u2018\u00f4\u00c3\u2026\u000fp\u00a1\u00f5\u00b8S\u00c2\u00e8\u00e0\u00e9\u00e6R\u0153n*e8\u00d1V\u00ca\u00c8\u00ab\u0004\u00cb8?p\u00f0j\b\u00a9u-Io\u00b1M1\u00bc\u00c18\u00b8h\u00bb1\u00e3\u001d\u2020\u00b5\u00ce\u00d8J\u0019\u00ba\u00b4\u00fa\u00dd\u001bN\"k\u00ed{\u000e>5\u00fe\u00ebP\u00f4\u00f0\u0015\u00ac\u00d3L\u00ef_1\u00da\u001c\u001cHo\u00c2\u00e6\u00a8b\u0007\u0153^\u00b5\u0081\u00e1BUI\u000ez\u00da\u00d9\u00b4\u00e6 \u00f6\u00a6\u00fcb\u00d7\u00efM\u00a9b\u00d8W\u00d2[\u00f0|\u00eao\u00c8\u2039;\u0152\u0010e\u00a2}\u00dcS\u00c2\u00b8\u00b1\u0178\u00b9\u00d2\u00a8#\u0016\u00ed2H\u0015\u00c6\u00b0c3\u00b6R\u2020.\u0011\u00dc>T\u2026hB H~\u0160-V\u00b7\u0015\u201c\u00d61\u00fc;Z\u00c3T\u000f\u0004oG\u00ffD+\u00e2\u201a\u0178\"(\u00d7_o\u00b4\u00f6W \u00bc\u00b5\u0000\u00e7\u00ba>\u0004\u00cf\u00c9\u00f0\\R9\u00c2T\u00a9bX\u008f\\\n\u00a6!\u00e6G\u001d [\u00b4?\u00b5\u00bf\u2013a\u00c5/G\u00ca\u00d0e\u201aU\u0160\u0010D\u0006>d\u00f7\u001b\u00ab\u00cd\u00c5\u00cd\u00e13\u00b0    S\u00f0\u201c\u0005\u00b2L\u00fe\u00bb\u00fb\u0010\u00e4\u0153?\u00a24\u008f\u00d9qK\u0015\u0152\u2013\u0001\f\u001a\u00af\u00e3\u0178\u2018?\u00f0\u00d3\u008d\"\f\u2122\u00da\u2018y\u00ff\u001bKu\u00e3\u0014\u00af\u009d\u00c9\\\u00f1\u00b6w\n\u017e\u0019\u00143w\u00a1\u00acw\u2030\u00ba\u00c8!c;b\u00b4[Y8\u00b5\"a\u00eaT\u00d0\u00cc\u00a6\u008d\u00ea\u00ad6\u0013\u00cb\u00e6\u00ae\u00d1\u00f3H \u00d9\u00ec\u2122& c\u00a8\u001azu\u00b2g\u00dc\u0011/\u00af\u00ed<\u0081M\u2030\u2026\u00a8\u00ba\u00f8\u0005\u00da{\u00eb\u02dc\u00df\u0017rK\u00f1z\u00c1)\u00d0\u00f2MJnl\u00ff\u00115\u00ad\u00dfbW\u00e6;\u00d8\u201c]\"9\u001f\u2014\b\u00a6\u00de(\u21224ki\u2039\u00d5\u00e58l\u000f\u201d\u00d0\u00ce\u2018\u00b3\u0010e\u201eDk\u00b2!\u00e7\u2022\f\u00eb\u00ee\u001f\u0161\u00d1\n\u00e2\u2039\u00de%\u017eh\u00a6)\u00dbz\u00d4\u0001Z\u00b2\u2022Moy\u0011\u00c1   \u00d0k\u00a2\u00a1\u0090\u00f9#2x=\u201c\u00e52?\u00cc\u00d5\u00f3\u0153\u001ct\u203a \u00e5\u0161yjBr*.?hP\u201a3\u00ee{\u0015\u00a1\u00e4\u00d0\u2030\u2122\u00b3=\u00a8\u0014z\u00ac  z\u0014c\u00e6\u001e<\u00bb\u00fe\u001b\u00c8\u00f8\u00002Q\u0015\u00c1\u00e4 m\u00f0\u201d\u00e4D\u0016; V\u201ec\u00d22\n\u00b3\u00d53\u00efw\u00cb*\u00f7\u2018,|\u0017\u008f?\u00f8\".u\u00fc\u0152\u00b6\u017e\u001a\u201dT\u00ec\u0000%\u201d>t|^\u00b1\u009d\u00c9S\u0016\u201c\u0192>3i\u000f\u00d2b\u00f3P~\u00ae\u02dcd\u00b2ti\u00e72\u00c1\u0192\u00a6\u001bd?\u00ec@\u0153n\u001b\"\u00c8^\\\u00d5\u00fe\u0015\u00e3(^\u00f74,6#!\u00b3\u00d2\u00ce\u2122\u0153\u201dk\u00f4\u00d0s\u2014\u017eS\u0010?\u00cf \u00cf\u00d0d\u00f7\u00ed   A<\u00a8\u00c4C\u017d\u0012K?\u00b4I\u00c9\u00f6C\u00ce\u00e4\u00bc\u00b4s\u2122\u001a\u0153fq\u00b2\u00be\u0090\u0010:\u00bd\u00dfR]!\u00e0\u00e6\u00c8\u00ef\u00a8\u00eb9D\u00bb\u00ac\u008d\u203a{\u00b1e\u00ed\u00db\b\u0090\u00cf\u017e\u00d2!\u00ca\u0004rkN\u2021\u00a7\u00f6\u0192\u00c66\u0011\u00eepU\u00c9C W\u00a5@\u00e3\u001f\u2026\u00b4\u00f0\u00fdP+\u00c2\u00d8a\u00e7\u0000r\u00b3\u00a3\u000e\bf\u001e\u00c6\u0017 kn\u0018\u00b1\u00f2\bT\u2020\u00ccU\u00ffOv\u203a\u00e0\u0152\u00c8\"\\\u001b8\u00c9\u00aa\u0007m@\f;\u20ac\u001az\u008f8\u0004\u00ea\u0018\u00fe\u2022\u0011\u001c\u00af\u00cb\u00c3-C3\u001b{\"\u00fac;f\u20ac\u0090[~u\u2014\u00bd?WH\f-@BH>\u00c6&\u00bbq{\u00e2\n\u00aa;\u00df\u00c4\u00e8d\u00d7\\\u02c6\u00dbr\u00d0\fI#\u2020\u00beE\u00fb\u001a5\u00def\u00d8 \u00a5\u00de\u00a9\u008d[\u0004\u00d3\u00ac;rq\u00f6D\u001f6u:\u00f4\u00c5\u00c8&\u00cb0\u00ca\u001a\u00d3\u00c4\u00ee\u00bc\u0018:X\u00db]\u00c2>\"\u00f0X\u00cb6Q\u00f4\u00ea\u2022V\u000b\u00b4iT\u00e1\u00b83\u00d2\u00b9\u00a8Xby\u00c6q\u00b3\u00cf\u00f3\u0019\u00ba\\E\u00cc\u00e7l\u00a5\u00ea:\u00fa\u00ea\u00d9\u00d4\u000b\u00b3>EV\u00eaK\u000b.c\u00c7\u00c6\u00b7\u0090\u2014q\u0090\u00e1:z\u00a7m\u00a5\u0152|\u0004\u0013fj\u00ae\u001eCu\u00e3aR\u00f7r\u00a4&\u00de-\u00c5\u2022]\u00bf9y\u001f&L\u00c38\u00f1\u00d7\u00fb\u00b8\u00de\u00fd\u00a7]?\u0178\u00c0\u20226$\u007f \b\u000b\u007fm\u00f3Y\u00af \u00dd\u00dd\u00f8U\u2122\u00d2\u00e3\u00cb/'\u2030\u008f\u00c1^f\u00c0\u00cb\u00eey\u2019\u00c2\u00bd^\u017d\u00b1j\u00dd\u00d3\u007f\u00a1\u00e2\u0005\u2026\u00ec{rz\u0161W-\u000b^\\\u00b8R\u00cd\u00d7\u00f3Ei\u2014[H\u0152|\u00f2\u00f2\u00bc\u2122\u00bcM\u00b2z1\u00de\u00aaqM37(XV\u00ab\u00d1N\u00e4\u00fe\u0007\u2019\u00fb\u00ddwS\u00f7\u00d1\u00bc\u0000\u0000\u0000\u0000IEND\u00aeB\u201a\n-----------------------------68441900111077364751191199482--\n```\nNow, in both cases, you can't have a body parameter as well as it just won't work with regards to how the request is built. In both formats, each parameter is a form parameter.\n. I forgot to mention, you can see both behaviors from swagger-ui (which uses swagger-js) in the petstore example.\nhttp://petstore.swagger.wordnik.com/#!/pet/updatePetWithForm - uses the first format.\nhttp://petstore.swagger.wordnik.com/#!/pet/uploadFile - uses the second format.\n. Yes, that's because there's a bug in that sample project and it should be a form param and not a body param.\n. Not sure what to tell you regarding the error you're getting against petstore.swagger.wordnik.com. The swagger-ui instance that runs there (which as said uses swagger-js) is able to upload the file.\nI'm sure @fehguy will get around to check the pull request, but at least we managed to clear a few things up prior to it.\n. You know @fehguy, it doesn't actually have to save the file on the server.\n. Of course, once that's converted to java.\n. That's actually related to swagger-ui and is a duplicate of https://github.com/wordnik/swagger-ui/issues/598.\n. Swagger 2.0 is really new, and I don't think the migration tool is ready. You can, of course, do it manually.\n. You can't. Swagger doesn't support such declarations.\n. Since it's all open source and properly licensed, you can modify whatever you want.\n. I'm talking about modifying whatever you need modifying. \nI assume https://github.com/d4be4st/swagger-ui_rails is the gem you're talking about. As you can see, it's not maintained by us.\n. What? How come I never got any chocolates from you, @fehguy?\n. Based on that, I hope you took away all the chocolate from you since you broke a lot of JavaScript. At least I didn't do that.\n. Is there anything that prohibits you from upgrading to master?\n. Yes, I can understand that. \nI just tested v2.0.24 though and it seems to work fine. Are you sure that's the version you checked?\n. Nothing wrong with that approach. I just followed the same steps and didn't see any problem.\n. @jgoeres - this issue (#158) is talking about query parameters being sent as parameter=undefined if they are optional and the user doesn't fill them (instead of not sending them at all). You are talking about the url parameter of the SwaggerUi Object which is part of the swagger-ui object, not this project...\n. You know what, maybe you're right and I'm confused.\nWhat I meant to say was that we were talking about different things all along ;)\n. I'm not sure Tony, what does this issue talk about?\n. @jgoeres - no trouble at all. The title of this issue is a bit ambiguous so it's clear why you may have thought that. Just took us a while to get to the issue you've had, but it's all good now. Glad it worked out for you!\n. Technically, that's not a valid $ref definition, it really should be #/definitions/User. There's a related discussion in swagger-spec - https://github.com/swagger-api/swagger-spec/issues/135.\n. Fair enough, thank you for the contributions! :+1:\n. @brandonheller  - not sure if you know that, but in Swagger 1.2, there can be only one body parameter and it has to be with the name 'body'. That's just how the spec is defined. So, technically, this is not an issue.\n. @fehguy - it seems that only direct references are currently parsed (that is Cat instead of #/definitions/Cat). There's a whole set of possible problems with supporting direct references, and we'd probably want to not support it at all.\nThere's a discussion on it here - https://github.com/swagger-api/swagger-spec/issues/135\n. It may be the lack of sleep on my end, but can you explain what you mean? \n. That belongs on swagger-editor - please open the issue there. It may be related to the swagger-tools project, but you'll be able to get the information there.\n. I bet @whitlockjc would love to contribute here ;)\n. 1. Less talk, more work.\n2. Why are you awake?!\n. Does this include the discriminator property for inheritance or just the allOf for composition?\n. Technically, you can use allOf without a discriminator just for composition, which implies a model that includes the properties of another, but there's no direct hierarchy between them. \nThough if this issue includes both, that's great.\n. I wonder how we would end up displaying it, as technically this is not a single model but a set of models to be checked against. \n. @m8rge - unfortunately, allOf is not really a merge, and the problem will come when there are conflicting schema.\nThe solution should probably be closer to an array of schema possibilities.\n. What's the question?\n. It's not a question, it's a statement. The spec can't deal with people's mistakes.\n. Who said we can't add support to it? I just said the meaning of allOf is not \"merge\", so we can't \"merge\" it to a single schema.\n. If only allOf was equivalent to merging... :(\n. @Smolations - thanks, that's indeed a good reference. But it also goes to show you have much allOf is not 'sort of' merging, but rather that it's not merging at all.\nThere are many subtle technicalities when it comes to JSON Schema, allOf being one of them. The actual meaning of it is given a JSON structure that's to be validated against a JSON Schema containing allOf, that JSON structure must be validated against each of the schema described by the allOf array separately. The example provided in your reference is one example to create a schema against nothing would validate, but it is not the only one.\nWhile we can't (and shouldn't) deal with use errors, this does impose some difficulties in what we end up representing in the UI.\nPlease note I'm not looking to argue the semantics of merging, it just really isn't merging at all. For what it's worth, draft 5 currently has a proposal for $merge which as you can guess would mean that, but I don't know its details nor will it affect the current version of the Swagger specification. \n. Well, can't comment regarding the other keywords other than allOfas they are not supported by the spec and can't say if/when they will be.\n. @hamx0r - that's actually something different. You can see the 200 response at top, just below the path of the operation.\n. Regarding the display - https://github.com/swagger-api/swagger-ui/issues/674.\nRegarding the response content type drop down, that's what the produces is for.\n. I square brackets are in the name of the field and not the value. There's no restriction on that in the spec... Have you looked at the original issue? https://github.com/swagger-api/swagger-ui/issues/661\n. Okay, so to clarify, there's no 'brackets' collectionFormat. Perhaps the implementation is wrong.\n. That is correct.\n. You want me to open a ticket to remove support for it? :)\n. I imagine this would apply for other functions as well. Should probably escape/unescape them as a list or something like that.\n. To clarify, the following use case should not be read as an enum, and the enum should be ignored:\njs\n{\n    \"type\": \"array\",\n    \"items\": {\n        \"type\": \"string\"\n    },\n    \"enum\": [ \"value1\", \"value2\", \"value3\", \"value4\"]\n}\n. @kevinconaway - if you're referring to it displaying just ONE and not both values, that has nothing to do with this issue. You can open a separate ticket for that.\ndefinitions don't have to contain object types, so in terms of what's being tested, there's no problem.\n. Thanks for the clarification. It looks like some cases are working and some don't. I don't know if this is because it wasn't fully fixed initially or because of a regression, but I'll reopen it.\nThe original two posts in the thread pretty much cover the cases, and it doesn't matter if the array is inside a model or as a 'primitive' array definition (for any parameter type). It's evident the in the case in the second post is not being followed (i.e., the enum is not ignored).\n. @vbeffa - did you intend to open this on swagger-core?\n. If the problem is with the output of @ApiImilicitParam, then yes. Assuming you use swagger-core and not swagger-springmvc or grape-swagger, or any other library that depends on swagger-core.\n. regex in parameters are currently supported only as pattern for the parameter value, and not as part of the template definition (based on the spec).\n. Closing as an old ticket.. Can you resubmit against the develop_2.0 branch?\n. That looks like one step before submitting a PR ;)\n. M1?\n. Technically, that's not a valid spec.\n. @csuich2 - what @fehguy mentioned is true, we shouldn't fail on such things. Generally, null values are not supported across the spec. If you feel it should be clarified, please open an issue on swagger-spec and I'll take care of it. Thanks.\n. We don't support non-encoded slashes in path parameter values. However, I don't see a problem if they are indeed encoded.\nPlease note that this PR as against master and should not be merged.\n. Which branch have you tested, @gaillard?\n. @gaillard - please open two separate issues on the above then, we won't be able to keep track of those as comments on a closed PR.\n. @sobolk - PRs should be submitted against the develop_2.0 branch.\n. Closed in favor of #289.\n. In the UI? I can think of a way, not sure how easy it would be to implement it.\n. Was this a rage-issue-closing?\n. This is my job. To point out people's mistakes.\nAnd I know I'm going to regret asking, but does the HTML representation of the UI come here in the js project?\n. Yeah, that's what I was thinking. Let me jot down what I was thinking, though it may require some fine tuning.\n. Wait, are we talking about how the input is going to work or how the model definition is going to look like?\n. Oh, I was thinking about the input. \nFor the Model display, it should be Map[string, <type>], for model schema just { \"key\": <type> }.\n. This is https://github.com/swagger-api/swagger-ui/issues/558.\n. @Smolations - The specification will not specify it because it's not a constraint. Choosing to display or not is a tooling decision. Logically, it doesn't make sense to display an example for something that doesn't exist.\n. A void response is a response that returns nothing, be it a JSON payload, a number, yaml, html, xml or anything else. This would normally be alongside a 204 HTTP status code, for example. Please take a moment to read the description of the schema property of a response - https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#responseSchema. While it doesn't say void specifically, I believe it's clear about the meaning of it when it is not there.\n. Gave the feedback in #280.\n. Based on #280, I'll assume this is done. Please reopen if needed.\n. @whitlockjc - yeah, it's fine. thanks.\n. That's not quite how it works. When you modified the file, github automatically created a fork for you - https://github.com/hamx0r/swagger-js. If you want to modify the PR, you need to clone your fork and not this repository as you don't have push permissions directly to it.\nAlso, that's not how you commit using git as you need to stage your changes first. You can use the shortcut git commit -a, however, if your not proficient with git you can also use the github client (there's one for windows and mac, not sure about linux).\nRemember, git status is your friend.\n. @venkataharishbillapati which version do you use?\n. @hamx0r - I believe you know this by now, but PRs should be made against the develop_2.0 branch ;)\n. @sberryman - PRs need to be submitted against the develop_2.0 branch. Please resubmit.\n. kill-jquery! (yes, my job is to add important information)\n\n. @sberryman - PRs should be submitted against develop_2.0. Please resubmit against that branch.\n. @valdemon - thank you for the PR, but all PRs should be submitted against the develop_2.0 branch.\n. You can test the develop_2.0 branch.\n. - What was the actual problem? They fix may need to come from springfox itself.\n- PRs should be made against the develop_2.0 branch, not master.\n. @ethanjcohen - did you get a chance to look further?\n. Sure, let's close.\n. This is resolved in develop_2.0.\n. Sounds like a step before a PR ;)\n. A Pull Request? An official fix that can be merged into this repository.\n. Well, no, we're not quite fans of changes that aren't tested. \n. While we can accept fixes to the README on master, we can't really do that for code. This should be split into two - one against the master branch with the README changes, and another to the develop_2.0 branch which contains both changes.\n. @mrhanlon - just make sure you work off of develop_2.0 and not master.\n. @mrhanlon - any update on this? No rush, of course, just trying to plan the next release.\n. @mrhanlon - great, thanks for the update.\n. Never apologize for delays in contributions. Since @fehguy merged the PR, is there anything else you'd like to add here or shall we close the issue?\n. Thanks for the contribution!\n. Fixed in develop_2.0.\n. Can you rebase please?\n. Duplicate of https://github.com/swagger-api/swagger-ui/issues/1113.\n. Can you rebase please?\n. That looks like just one tiny step before submitting a PR with the change against the develop_2.0 branch ;)\n. This fixes #398.\n. @ralphvanetten - that's not the way to define it, but without seeing what #/definitions/map1, it would be difficult to suggest the proper solution.\n. Are you trying to define maps with map1 and map2? Because that's not the way to do it.\n. Okay, just wanted to make sure. \nThis how \"Person\" should be defined:\njs\n{\n  \"type\": \"object\",\n  \"title\": \"Information about a person\",\n  \"properties\": {\n    \"externalId1\": {\n      \"$ref\": \"#/definitions/map1\"\n    },\n    \"externalId2\": {\n      \"title\": \"second\",\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/map2\"\n      }\n    }\n  }\n}\n. You add anything when there's $ref. This is a restriction of JSON Reference.\n. The parser may read it somehow, but most parsers would ignore it. The way to add the description would be in the referenced object.\n. If you use $ref, that is not possible. As explained, this is a limitation of JSON Reference.\n. It's not a flaw in the Swagger spec. It's a limitation of JSON Reference which is used by JSON Schema which is used by Swagger. Not much we can do about it besides contest the JSON Reference spec, I wouldn't get my hopes up actually affecting it.\n. Nope. SHALL be ignored. I don't know of any JSON Schema/Reference parser that does not ignore those. It's not going to change.\n. It's legal in terms of whether it's valid to write it that way or not. In terms of meaning - the \"type\": \"object\" is just going to be ignored.. @ralphvanetten - that's not really a valid definition. The whole links property is a bit odd, and I'm not sure what you were trying to do there. If you can describe it, I may be able to suggest a proper definition.\n. There's no schema property at all in the Schema Object so it's just not a valid definition.\n. It's open?\n. :coffee: \n. > - domain/definitions.json#/foo\n\n\n./domain/definitions.json#/foo\n../common/definitions.json#/bar/bar\n\n\nAs far as I can tell, the first two are equivalent. /domain/definitions.json#/foo would be different. Isn't that the case?\n. @jasonh-n-austin - regarding /domain/definitions.json#/foo I don't see an issue. This is more of a user error problem. If the user hosts it in an environment where it doesn't make sense, sure, it won't work. Not really a problem.\n. Seems like just a tiny step before submitting a PR (against the develop_2.0 branch of course).\nOut of curiosity, what generates that 1.2 file? It's not 100% compliant with the spec.\n. Perhaps the original wasn't 100% compliant. The model properties have a few properties of their own which are either not supported or contain invalid values. This is unrelated to the problem and should not 'explode' the client anyways.\n. I'll leave this one to @fehguy ;)\n. Not saying that doesn't need to be fixed, but is your Swagger definition correct? Can you share it?\n. By the way, this is tested with which version?\n. Mind reading the discussion in https://github.com/swagger-api/swagger-ui/issues/1266 before we continue? :)\n. Well, the default is an interesting option, but we don't treat the default as a successful response and that also changes the behavior of the UI. I appreciate there's work to be done when moving from 1.2 to 2.0 and perhaps we can suggest some ideas on how to migrate those, but that's probably out of scope to this issue and more suitable for the google group.\n. I'd keep it open for now as @fehguy may have other ideas as well.\n. The examples is what you give it. If you want the tickets property as well, include that in the example. This behavior is as designed.\n. Please reopen if needed.\n. @fehguy?\n. @whitlockjc, @ponelat and I discussed it over on IRC. We're definitely looking into dropping support for IE8, but need to check that first. If we find it's possible, we'll be more than happy to do that. \n. @ponelat - yes to creating an issue, yes to update the README. I wouldn't default to application/json just yet, but you can create an issue suggesting that as well.\n. Available in develop_2.0.\n. This is done in develop_2.0.\n. Sorry, had to revert it. Please resubmit against develop_2.0 and we'll merge again.\n. Umm... #188?\n. When you say multiple compositions are not supported, does that mean more than two entries in the allOf array, or nested allOf definitions?\n. Sure, was just looking for a clarification. :+1: \n. Shall we close this one until the new one is submitted?\n. @ponelat?\n. This is done, thanks!\n. \"dead\" is a bit extreme, but it is no longer under development.\n. @datoulei - it's not supported yet...\n. Fair enough, let's convert it to a documentation thing then. Thanks.\n. The Swagger/OpenAPI specification.\n. It doesn't resolve #219, but it's a step in that direction. Thanks.\n. Not entirely sure which version of the ui Swashbuckle uses. Can you check the version at the top of the swagger-ui.js file?\n. The fix is included in 2.1.2. I'd suggest trying to use the version from this repo, point it at your definition, and see if you still experience the problem.\n. Just clone this repository, go to the /dist directory and open the index.html. At the top bar input the URL based on the structure as defined at https://github.com/domaindrivendev/Swashbuckle#getting-started and click explore.\n. I don't know. Regardless of what you get from swashbuckle, you can use swagger-ui externally and independently, so just try it.\n. @pm100 - I understand this relates to the issue you opened on swagger-ui (would help if you link to it from the PR). I can't say whether this will be merged in general, but you also need to submit the PR against the develop_2.0 branch. master is our stable branch.\n. Same here, please resubmit against the develop_2.0 branch.\n. Looks like you're on a PR spree (which is great!) but really, we only accept PRs against the develop_2.0 branch.\n.nullis not a valid value in Swagger. We don't support full JSON Schema. Please follow https://github.com/swagger-api/swagger-spec/issues/229.\n. @PASSTor - thanks for the PR. Can you please resubmit against the develop_2.0 branch?\n. Thanks. Closing this one.\n. @Gillingham - just want to make sure you know that you don't have to specify thehost` and as long as the Swagger definition is part of the application and is affected by the dynamic API host as well, it should work as expected.\n. Closing this in favor of #482. Thanks for the contribution.\n. Okay, I started writing something long here as this is indeed somewhat baffling. We've used relative refs in a few ways, and your input breaks some :)\nEventually, something didn't add up so I dug a bit further. We're not using JSON Pointers directly but JSON References. If you look at section-4 which talks about resolution:\n\nResolution of a JSON Reference object SHOULD yield the referenced\n   JSON value.  Implementations MAY choose to replace the reference with\n   the referenced value.\nIf the URI contained in the JSON Reference value is a relative URI,\n   then the base URI resolution MUST be calculated according to\n   [RFC3986], section 5.2.  Resolution is performed relative to the\n   referring document.\nIf a URI contains a fragment identifier, then the fragment should be\n   resolved per the fragment resolution mechansim of the referrant\n   document.  If the representation of the referrant document is JSON,\n   then the fragment identifier SHOULD be interpreted as a\n   [JSON-Pointer].\n\nWhat I understand from it is that if the URI (full or partial) contains a fragment (#), then it would be interpreted as a JSON Pointer. If it's just a relative URI, then the JSON Pointer semantics of JSON String Representation do not apply and it is read as a relative URI to the document itself.\nI could be completely in the wrong direction here, but does this make sense?\n. Thanks for the PR. Can you please resubmit it against the develop_2.0 branch? Master is stable and we don't accept PRs against it.\n. You got the answer for it in the google group.\n. It's not supported in the new client. Please file a new ticket.. Thanks for the PR, @dilipkrish, but I don't think we can merge it. The issue you refer to in swagger-spec is a feature request for the next version which we haven't even decided whether to support or not. I don't think we should add support for such suggestions in the official tool set until such a decision is taken and we actually start working on the next version.\nWe can keep the PR open until then, though the code my deviate.\n. I wish you would have asked that on the spec prior to it then. We definitely don't support that notation. Just because the spec doesn't explicitly say it isn't support, doesn't mean it is. We can't cover everything, but I can definitely make the language clearer. The paths used to describe the operation cannot have query parameters in them. This has been discussed in many issues and forum questions, and it was clarified there. If you feel there's room to add a specific clarification in the spec itself, I'd be happy to add it.\nI'm afraid we can't start adding support for things like that as that would make it de facto part of the spec, and it would throw off other vendors out there.\n. Thanks for understanding, @dilipkrish, I'm sure you can appreciate the challenges in keeping things aligned. Trust me, there are times we wish we could change things on the fly, and we can maybe get away with it with some minor changes, but this is a big one. I can go in length explaining, but this is probably not the place. \nThe issue of multiple operations per paths/content type negotiation/definition of an isolated path are all related and are (in my opinion) strong candidates to be handled in the next version of the spec. There are several ways to discuss the next spec. Can you send me an email? I'll provide with the alternatives.\nAlso, if you do feel there's a need for clarification regarding the path templating in the spec, please open an issue about it on swagger-spec and I'll try improving the wording (I'm not sure I can refer to the RFC directly, need to investigate).\n. Thanks ;)\n. I'm afraid we won't be able to accept this PR as optional path parameters are not supported by the spec.\n. What @fehguy is saying is that a version including this change is not pushed into NPM yet as this version hasn't been released.\n. @triccardi-systran - in 1.2 we had no examples, so often the defaultValue was used as an example as well. It is true though that defaultValue is the same as default and that default and example are different in terms of purpose. If I'm not mistaken, this PR will use the x-example/x-examples over the default if it exists as the example itself, but the functionality of the default for now remains as it was before as to not break backwards compatibility.\n. Not really following the usage of 'real example' here.\n. That's exactly what this ticket aims to solve.\n. Then that's a bug introduced by this PR. Please open a separate ticket for it.\n. #491?\n. From the looks of it, you're using an older version of Swagger (that is, something before 2.0). In those versions, the name of body parameters had to be \"body\". Since swagger-ui now converts older versions to 2.0, and still follows the older rules, it will automatically assign the name \"body\" to those parameters.\nIf it's important for you to name them differently (it doesn't affect functionality, only documentation) then you'd have to update to the latest version of Swagger.\n. If you use an older version of the spec, it may just assume the name \"body\".\n. When running from the browser? No. That's a browser limitation - https://github.com/swagger-api/swagger-ui#cors-support.\n. Right. So that could be a different fault, unfortunately. You'll get that error message also where there's a problem parsing the spec that's read. I believe we have an open ticket somewhere to improve on that. Apologies for the misunderstanding.\n. Lots of room there, can't point into something specific. It's easy to write a malformed 1.2 spec. If you can share what you have, I may be able to help.\n. As @fehguy mentioned, what you point to is a proposal and not part of the spec, so we can't implement it yet. Should this be accepted to a future version of the spec, it'll definitely become part of the tooling.\n. Yup, looks like.\n. @xiehan - I'm afraid none of the \"XXXWithDocument\" definitions is valid. I'm even surprised it worked in previous versions, but this is not really a bug. Not only that a Response Object can't take a $ref at its root (spec restricition), even if it had, you couldn't use it alongside a schema definition at the same level (that's a restriction of JSON Reference, not of the spec).\n. There's a difference between the top-level Response Definitions Object than the operation-level responses.\nThe top-level Response Definitions Object is a map between a name and a Response Object.\nHowever, the Response Object is a map between an HTTP response code (or default) and either a Response Object or a reference - and that's how the top-level Response Definitions are intended to be referenced.\nThe inheritance that can be defined in the responses is only at the schema level. 1.2 didn't even allow you to have top level definitions and you had to repeat everything anyways. I do understand the frustration though, it's just something we didn't think of when creating the spec. To improve that, I'd ask you to open an issue on the spec so we can take into account in the next version. I admit it makes sense to add such level of extensible. \n. @xiehan - aha! Thanks for providing the details. Definitely helps explaining the expectations.\n. Looks like you're using an old version. As a first step, try upgrading to the latest.\n. Can you share the spec so we can investigate it?\n. Yup.\n. Enabling CORS is a back-end thing. swagger-js is a client. Not really relevant.\n. We can't accept this as it is not supported by the spec. This may change with a future version of the spec (as discussed on IRC).\n. We're not actively working on the 2.x version. If someone submits a PR we'll try to review it.. I couldn't say.. It's not possible to do that, and I don't think it'd stay that way in 3.0 as well. There's a technical difficulty there.\nLooking at your own example:\njson\n\"application/json\": {\n                \"$ref\": \"./questionnaire_example.json\"\n              }\nTell me, is the example what's referenced or is it the object containing the reference itself (that alone can be the example response)? There's no easy way to distinguish between the two.\n. Possibly, Swashbuckle does bundle swagger-ui in it, but not sure how up-to-date it is. You can always use swagger-ui directly without depending on it.\n. @smadduri - the problem is not with swagger-js but with swagger-core producing a malformed spec. Looking at your spec, I'm guessing you're using an old version of swager-core. Make sure to try it with the latest - 1.5.9. If you encounter this problem with 1.5.9 please open a ticket on swagger-core instead.\n. 1.5.0 had a major bug that exhibits exactly the issue you show in the spec. Updating to the latest should fix the issue.\n. @dolmen regardless what the tools do today, it is not technically illegal and should be supported. I agree with your recommendation, which easier to maintain.\n. @alechirsch simply sync swagger-js's master branch to your own branch. That would lead to conflicts which you'll need to resolve, probably manually. Once that's done, push the changes from your local branch to the remote github branch, and that will automatically update the PR which would allow us to merge it. \n. which tags? https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operationTags\n. Apologies for the delayed feedback.\nUnfortunately, our code base might have deviated from the time this PR was submitted, and we cannot easily merge it (certainly not against master), and so, we're going to close this PR.\nIf you find the change important and would like to resubmit it, please let us know. Be aware that we are focused on the 3.X version at the moment (now master), and new changes should be applied to it.\nWe appreciate the time you've taken into submitting this PR. We're now making extra effort to review PRs within a few days at most, to avoid situations like this.. Can you try with 3.X?. @advzr - thanks for the note. We are very close to releasing a brand new version of this library which handles almost everything you mention here. Our main dependency that remains here is still js-yaml but we're looking into alternatives now as we're trying to minimize the bundle size. We have a few thoughts about it, so hopefully it'll work out.. The current 3.X version is significantly smaller than 2.X. There's one dependency we're looking to see if we can replace, but it's not high on our priorities. As always, contributions are welcome.. @kchauhan-muhimbi which version of swagger-js do you use?. @ponelat any thoughts on that?. @kevinoid Thanks for the report. This is a complete rewrite so previous code may not be relevant. I was sure we had a test for this case, but we'll definitely look into it.. Thanks for reporting the issue. Please report new ones as you find them. If you can help us with writing tests and even fixes PRs, that would be appreciated. We hope to formalize a process for it later this week.. We're working on those, thanks for your patience :). Take a look at https://github.com/swagger-api/swagger-js/blob/master/docs/MIGRATION_2_X.md. Note that we're working on additional changes, and will make sure to update as we introduce those.. @ponelat does #975 cover this and the issue can be closed or is something else needed?. Okay, so the the characters that need to be escaped in path segments are%?/#[] and white spaces. Technically, any non-printable ASCII character also needs to be escaped, but would recommend sticking with the basics for now, and should the time come, use a library for URI encoding. \n@carlos-azb Please update the PR to reflect those changes.. @carlos-azb any feedback?. @carlos-azb pinging you again. @ponelat can you revert the skipped tests then?. Which version of swagger-js do you use?\nCan you share the spec?. Thanks for the analysis. We're aware of issues when schemes, host or basePath are missing and working to resolve those.. This is a very high priority for us, but I don't have an ETA for the fix.. This should be fixed in master/latest release.. @dwilson6 we're always looking for community contributions. Nobody has started working on this issue yet.\nAs for the other thing you bring up, please open a separate ticket. I don't really follow what you're saying, but there are better developers than me on the project who will ;). CORS is only relevant to calls being made from the browser. If you're using the client in a node app, it shouldn't be an issue.. It should, but that's besides the point.\nWe're making some change to 3.0 to make it more backwards compatible with 2.0. It's going to take a bit to get there, but hopefully the same options that were available in 2.0 would be usable in a similar with 3.0.. @Robbilie take a look at https://github.com/swagger-api/swagger-js/blob/master/docs/MIGRATION_2_X.md#authorizations.. Then don't upgrade yet.. Okay, it's time to take the attitude elsewhere. If you want to be a constructive community member, then by all means stick around. I will not tolerate the language nor the attitude any further.. Be constructive. Understand that 3.X is a MAJOR version update from 2.X and as semver goes, it means it's a breaking change, so you can't expect everything to work out of the box.\nWe're aware of some issues, not all. As you find issues, it'd help if you can open tickets describing what's missing. We're all humans, we make mistakes. Let's work together on fixing them.\nIf you're willing to help out by submitting PRs to fix some of the issues, we'd appreciate that. If you don't know where to start, leave a comment on the issue and we'll try to guide you through. If you can't afford to submit PRs, that's absolutely fine as the tickets help us keep things in check as well.. @Robbilie can you take a look at https://github.com/swagger-api/swagger-js/issues/1006? I suspect it's a duplicate of it.. There is a bug, as far as I know. @ponelat should be able to explain it.. @buunguyen the generated operationId is get-/test from what I can tell. It should be more like getTest.. Might be worth to try and find the relevant code in 2.x to see how it works. Should follow a similar flow. There are also edge cases - reserved words maybe, but also duplicate operationIds which must be avoided.. My concern is that we've accumulated a lot of edge case handling over the years - that's why I suggested looking into the code base. However, I'll try to summarize things here.\nThe operationId is an optional field in spec for each operation. It is used to uniquely identify an operation within a spec.\n\nIt is supposed to be unique, but users can still make a mistake of giving the same id to two operations. The client should not break but make them unique still (by adding a sequential number after the opeartionId.\nThe field does not have naming restrictions meaning it could contain spaces, slashes and other characters that are not development-language friendly. These need to be escaped/removed to be use. Again, remember the requirement for them to be unique.\nIf the operationId exists with an empty value (either \"\" or any whitespace), treat it as if there's no value.\nIf an operationId does not exist, it's up to use to generate it. The value would be a combination of the HTTP verb for the operation + underscore (_) + the path where slashes are replaced by underscores and curly braces are removed.\n\nFor example, for post /pet/{petId}/uploadImage, the generated operationId would be post_pet_petId_uploadImage.\nAgain, there's a risk of conflict between generated operationIds and ones existing in the code, so those would be handled again by adding a numerical sequence at the end.. It should get_test, yes. It's not just without the slash, it's also an underscore instead of a hyphen.. @fehguy does #1008 close this one or more needs to be added?. Thanks @dwilson6. Closing this in favor of the other two tickets.. Which version of swagger-js do you use?. @buunguyen I think so. Based on our chat, we might introduce additional such changes. Until we stabilize it more, it's ok. We should note that well in the release notes though.. Which version do you use?. The newest version (3.X) doesn't support IE10 (see prerequisites). . I don't believe so.. Which version of swagger-js do you use? What's the error you're getting?. That's not the version of the project... Thanks. Can you share the spec you're trying to load?. @waytoharish - thanks.\n@buunguyen - any thoughts?. 1.0.0 is not a number, so it doesn't need to be quoted. \n1.0 would be treated as a number unless quoted.. Thanks, @srihakum. For future reference, if you feel a ticket was wrongly closed, just add a comment to it and we'll reopen it. \n1010 does mention that there are two separate tickets covering it, which are not included in 3.0.5.\nIn fact, the one related to the headers was resolved only yesterday, so it's not published yet.\nIf you'd like to try it, clone the repository, build it locally, and use it in your app. We have a release slated for tomorrow, if you'd rather wait, but if you can spare the time to test it and validate it before we publish it, we'd appreciate it.. @kwv just looked the spec and issue you described - you don't even have a body parameter? In that case, regardless of the http verb, there's really no reason to send the Content-Type header. Am I missing something?. Thanks for the reply, but I still don't understand why you would expect or need to send the Content-Type when there's no payload.\nAs you said, you don't need to specify what's a body parameter and what's not, because swagger-js knows it from the spec. From the sound of what you describe, the current implementation around this is correct. Like you said, it accepts the request data, and handles the details in accordance to the spec. And if there's no payload, there's no need to send the header.. which version of swager-js do you use?. There's no version 2.0.. @estermer - thanks for the PR. Can you add a test that shows the failing behavior before?. Does this resolve https://github.com/swagger-api/swagger-js/issues/1006?. Does this mean #2892 can be closed?. Today.. No expert on OAuth and the like but the specs are pretty clear.\ntoken_type is case insensitive. It can be bearer or Bearer, doesn't matter.\nThe Authorization token, however, is case sensitive and must be Bearer regardless of what's specified in the token_type - it's not wrong to change the case because... token_type is case insensitive.\nThat should be the implementation.\nWe might provide hooks to change those for broken implementations, I don't think this should be a configuration though.. It is considered important, but we still have to prioritize based on our resources. As with anything else, PRs are welcome.\n@zhimoda in general, if you don't specify a host at all, and load it from the environment that you want to run against, that would work as well.. I'm not convinced this is the right solution, and will be closing the PR without merging. Merging this PR will cause, in some cases, completely invalid requests. If you take the application/json example, you're telling the API producer that you're sending it an application/json- making it try to parse an empty string as a JSON which is just not a valid JSON. I'd be happy to reconsider if someone shows concrete information as to why it should be allowed, but until then.... \ud83d\ude31 . So this one can be closed? :). Looks like this is a result of a psuedo-circular reference, that shouldn't even be resolved.. :scream:. First - this is a swagger-ui question, not swagger-js.\nSecond - it's likely that there's something wrong with your API definition, can you share it?. Your basePath is /api/notes/v1 - it should be /my-app/api/notes/v1/ in order to work properly.. The host cannot contain paths as well. You need to modify your basePath. Since it's generated from your code, it can be generated dynamically by the code. You don't need to control it. If you don't change it, it will break the UI, will break code generation, and pretty much make your API definition invalid.. Swagger doesn't assume anything. This is how the spec works.\nhost - the address/ip + port of your server.\nbasePath - anything that comes after until the root of your API calls.\nIf you don't change your basePath, you don't have a definition that describes your API as the spec requires it. Either change it, or it won't work.. @Le-Zhang can't do much with that without knowing which version of swagger-ui you're using and other things. Please file a new ticket following the issue template and we'll try to help.. Thanks for the PR, @filinus!. It sounds like you want to define an api-key security scheme in query, with the name access_token - have you tried that?. Yeah, it should be in the spec itself. We currently don't allow overriding it through the client.. If you just want to apply it to specific methods, you'd need to change the path of those methods.. Sorry, I replied to your ticket, thinking about a different one. If you want to apply it to just specific methods, you just need to set the security for those methods.. @buunguyen do you have the capacity to look into this one?\n@shockey will review it as well, regardless.. @Robbilie sorry it didn't get into this week's release. We're a bit backlogged and have to prioritize the work. Thanks for putting this up though. Hoping to get this reviewed for next release.. What do you mean?. @shockey I tend to agree. I recall you mentioning that you always add a number to the operationId? I'd suggest keeping it as-is for the first occurrence, and only add the sequence from the second one onward. . Aha. My bad. I didn't notice the operationId's where the same. There's no work around changing at least one of the names. We can discuss whether the 'first' one should be renamed or not separately.. Regarding the operationId keep in mind it's not mandatory, but if you want consistency across tools, it's better to specify it. A lot of times the names used would be a combination of the HTTP verb (or what it represents) and the resource itself. So in your examples above I would expect it to be getUser and getGroup.. @RdeWilde the challenge in using this is understandable, however, there's really no easy solution for this. The tools we provide are intended to be used with compliant API definitions - that's why the specification exists. We do try to address some breaking changes when we can, but it's not always easy or makes sense. In this case, it seems your best best is to remain on version 2.X of swagger-js if you can't fix your API definitions.. Thanks for the PR. What behavior do you see without the fix?. Did you set the consumes for the operation?\nCan you share your API definition?. This is related to #1022. In short, if no payload is being sent, there's no reason to send the content-type header.. Are you asking how to use swagger-js to upload such file?. It actually links to the ended location, but I'll change it as that link is more useful. Thanks.. The signature change seems like an issue. I'd expect the in to optional only for those cases where there's a name conflict. In OAS3 we have a similar issue, and we tackled it here. Can we follow a similar logic and structure?. Can you provide an API definition that reproduces the issue?. If you're looking for a generated JS client, take a look at swagger-codegen.. The codegen is written in Java. We don't have the capacity to write a generator in each language. There are multiple ways to get it running, even through JS code.. If you'd like to take advantage of the full ecosystem, stick with 2.0 for now. It'll take time for tooling to catch up, even though we work on those.\nWhat in our website gave the impression that 3.0.0 is the recommended spec?. Which version of swagger-js do you use?. Which specific version?. @patrickml which version of swagger-js do you use?. @shockey this solves oh-so-many issues, would love to see it merged. But you don't do Java.... Mostly trying to ignore yours.... Why do you hate me, @shockey.. Okay. If you followed the documentation in https://swagger.io/docs/specification/serialization, and made sure the default values mentioned there are taken into account when no value is explicitly provided, it should be fine.\nAs for deepObject and nested objects - that was explicitly left out of the spec, and it's ok to just Not Support It\u2122.. \ud83d\ude31 . And which version of swagger-js do you use?. Which version of swagger-ui have you tested this with? We'd also need to see your API definition.. @shockey ping. @dballance - it sounds like you're happy ;). @srl295 ping? :). It does. @shockey, README should be updated.. I believe the operationId changes are due to language naming constraints, though @shockey can comment more on that. We should be able to provide the original operationId as provided though, for documentation purposes.. Thanks @palanik.. Thanks, @karllson!. It's a bit weird, but valid.. @shockey ping. @shockey that's an interesting option. @djMax would that help with your case?. I see it less of offering workarounds, and more making the transition hopefully easier. You've mentioned in several issues that this has not been a smooth ride, and I can imagine you're not the only one with such an experience. If we can make the transition easier, then why not. Granted, a major version change should be expected to come with breaking changes, but we can still help ease people into it.. Yeah, the migration guide is challenging for other reasons. Feedback like yours definitely helps us focusing on the missing pieces though, so thanks for pointing those out.. @djMax iirc, we did make the change that it no longer defaults - it is a more 'correct' behavior. For OAS3 definitions it's not really an issue because you cannot not set a media type for requests (or responses). \n@shockey is there a way, not necessarily through configuration but through code, to make the client assume a default media type if one is not provided? That should be a reasonable workaround for users of the library with the changed behavior, as they can't always modify their API definitions to satisfy this requirement.. Not something we should assume, but the users. If we provide with a code snippet they can add for example to the index.html it's enough. Not looking to add it to the core functionality.. Then I believe we can add that description to the migration guide doc and close it as such.. Yup, that's not a valid definition. You're looking for formData parameters, not body. You can't have more than one body parameter.. Okay, closing this one as we have nothing to fix.. Come on, @ponelat, you can also add the solution, not just a failing test.. This is MOAR better.. And @ponelat, the build is failing.. \n. Also, @rg1 - don't get sick, it's not healthy. . I don't object to bringing back functionality that was supported in previous versions of Swagger-UI but...\n\nWe should consider adding extension functionality support in plugins (and yes, @shockey, that would mean a plugin repository).\nWe should consider renaming the extension name based on some work the OAI is doing right now on formalizing extensions, but I'd need to check the status of that.. I think the breaking change is acceptable and should be treated as a bug fix as you suggested.\nThere are currently still discussions on what the implementation of allowEmptyValue means, and this may change even further depending on that decision.. @bajtos when we defined deepObject in the spec, we explicitly chose to not mention what happens when the object has several levels in it, but in our conversations we went with 'not supported'. If you're looking for supporting that use case, it needs to be addressed by the spec first.. Providing a descriptive error makes sense to me, and we'd appreciate a patch for that logic.\n\nTo start a process with affecting the spec, you can file a ticket at https://github.com/OAI/OpenAPI-Specification/ with the details. Releases of the spec are not frequent, so it can take some time. Assuming it's a non-breaking change, it can get into a minor version (but cannot get into a patch version) - that would be a few months.. @DavidTanner The spec supports specifying the Authorization header through the security constructs, which is why it's prohibited as a direct definition. If you want to send Authorization, simply use these security features.. Yup. They are merged. The only thing is if they exist in both (based on both the name and the in as the unique identifier), then the operation level parameter will override the path level one.. I don't really know how to read the test so I don't understand what it does.. Doesn't sound like a spec issue, but rather a simplified interface for call execution. It does make sense to me, but would rather hear from @fehguy as well.. Hmm... not anymore ;). ",
    "rage-shadowman": "Before you added the displaying of \"optional\" in swagger-ui, I had used the \"required\" field as it was in the JSON schema spec and it seemed to clean up my model definitions.\nThis is simple to add in so why not? I've created a pull request with a fix. It simply loops through the variable if it exists and sets the \"required\" properties for those. Granted, it could check to make sure the model property exists first (another simple addition) but I don't know how much you want to worry about dealing with broken JSON objects (if a property is named in the \"required\" array that does not exist in the \"properties\" array, that is a broken JSON model).\n. I don't see how this is \"showing a different representation of the swagger models than what is actually sent from the server\"? If the server leaves the model.required property out (as it currently does), then it will show exactly what it shows now.\nI suggest:\n1. If model.required exists, use it (if it references a property that does not exist, throw an error or log a warning).\n2. If model.properties.[property].required exists, use it.\n3. If both exist, let model.properties.[property].required take precedence (and maybe log a warning).\n. Awesome! That should take a lot of the guess work (trial and error) out of generating a schema by hand. :)\n. You implied that v1.2 would give the ability to define maps. But nowhere in that page does it mention how to define maps. Not in the datatypes page either.\nWould you care to shed some light on how that is supposed to be done? Or did I misunderstand? Is there framework in place for handling maps yet?\n. As was mentioned in the comments on commit 56fcc68c15ad624549771e69727dccb542b14054 there was a typo.\n. See develop-2.0 branch commit 329b4318a01934cbeb114688ccadc859b9988e5b (this needs to be merged into master).\n. I do it by calling it a path parameter.\n. We have 40 methods, they all take the same pair of authentication params.\nIn our Java code, we created an AuthenticationPreProcessInterceptor that looks for any method with PathParam or QueryParam annotations of the expected names and throws UnauthorizedException on preProcess if they were invalid.\nBut our Swagger Models were all generated by hand, and our RestEasy resources all have to have the expected PathParams or QueryParams if they are to be authenticated.\n. ",
    "chronodm": "When you say 'the spec supports it', what do you mean? I can't find anything about maps in the swagger wiki, even six months after this conversation.\n. ",
    "df-jsykes": "Thanks, but no dice on that.  Here's the whole html file:\n`````` html\n<!DOCTYPE html>\n\n\n\n\n    // initialize swagger, point to a resource listing\n    window.swagger = new SwaggerApi({discoveryUrl: \"http://petstore.swagger.wordnik.com/api/api-docs\"});\n    swagger.build();</p>\n<pre><code>// add a success handler to dump the raw json into a div element named `mydata`\nsuccess = function(data) {\n    document.getElementById(\"mydata\").innerHTML = data.content.data;\n}\n\n// a function to fetch a pet\nfunction getPet() {\n    swagger.apis.pet.getPetById({petId:1}, success);\n}\n</code></pre>\n<p>\n\n\n\n\n\n\n```\nactually, only seeing the malformed URI error now that i've moved this over to tomcat.  Was loading off the file system.\n``````\n. Can I not run this from localhost or the file system?\n. I just cloned the repo and ran that example. Nothing else. \nI'm on freenode whenever you get a sec as specialjyo, I did verify this issue on another machine as well.\nOn Aug 16, 2013, at 3:25 PM, Tony Tam notifications@github.com wrote:\n\nI'm not clear what's happening. You can definitely run this off the filesystem.\n\u2014\nReply to this email directly or view it on GitHub.\n. Indeed we did, thanks.\n. There was an error in the example code. I thought it was fixed. Let me go back and check. \n\nOn Sep 13, 2013, at 6:53 PM, Eric Martineau notifications@github.com wrote:\n\nHow did you resolve it?\n\u2014\nReply to this email directly or view it on GitHub.\n. use \"url\" instead of \"discoveryUrl\", you should be in business.\n. This still leaves a default callback wrapper object.\n\nHere is my index.html\n``` html\n<!DOCTYPE html>\n\n\n\n\n    // initialize swagger, point to a resource listing</p>\n<pre><code>window.onload=function () {\n    window.df = new SwaggerApi({\n        url:\"https://next.cloud.dreamfactory.com/rest/api_docs\",\n        supportedSubmitMethods: ['get', 'post', 'put', 'patch', 'merge', 'delete']\n    });\n\n    window.authorizations.add(\"X-DreamFactory-Application-Name\", new ApiKeyAuthorization(\"X-DreamFactory-Application-Name\", \"todoangular\", \"header\"));\n    window.authorizations.add('Content-Type', new ApiKeyAuthorization('Content-Type', 'application/json', 'header'));\n    window.df.authorizations = window.authorizations;\n    window.df.build();\n};\n</code></pre>\n<p>\n\n\n\n\n\n\n\n```\nin your console, you can try df.apis.system.getConfig(); to see the wrapper\nI'm running this from the file system.  Something wrong with my Swagger API itself?\n. I do see an issue with our CORS set up, will update this, or hit you up on #swagger once I verify this is fixed.\n. Turns out its not a cors issue, running everything locally, still seeing a \"default callback:\" wrapper, investigating.\nThanks man.\n. Its working on localhost, I wont know anything about the CORS issue til next week, but the file system / localhost stuff is working now, only it still logs the data in the console with \"default wrapper\", that's going to confuse some people possibly.  Thanks for your help\n. ",
    "ericmartineau": "How did you resolve it?\n. ",
    "misterx": "I have 10 methods, and each other have {api_key}. it's very inconveniently. \n. ",
    "efuquen": "Ping, any thoughts on this pull request?\n. ",
    "calmdev": "I'm having the same issue. Shred is failing to detect the content type as application/json. Thus, the response.content.data is returning as a string.\n. Ok, thanks for the response. This throw me off a bit until I realized it.\n. It works good thanks.\n. Maybe, there is something I'm not understanding with Swagger-JS. \nEverything works fine in Swagger-UI....\n. Closing, because it's related to #57.\n. ",
    "Frechmatz": "Please add the changes to the master.\n. ",
    "valdemon": "Hi, looks like you were merging that in the same while I was cleanning the commit from the swagger.coffee part :) As a result this fix hasn't been merged into the wordnik:master. Shit happens ;)\nI'll prepare a new pull request for that. Sorry for inconvenience.\n. Hi, ok, I was aware of that. I will join the conversation for sure, thanks :)\n. Hi @fehguy, \nI've signed in at http://swagger.wordnik.com, but haven't received any confirmation nor further steps to join the conversation. Is the spec 2.0 work already done?\nBest,\nWaldek \n. ",
    "apowers313": "Cool, thanks. In the meantime, should the swagger-client be working with swagger-node-express, or is this a fatal error?\n. ",
    "v-sullivan": "Hi fehguy,\nThanks for the snippet but I can't figure out the http proxy part ?\nAnyway, the code is interesting  ! \nRegards,\nVernon\n. ",
    "abhagupta": "I am looking for similar thing. How can I make a HTTP request go through a HTTP proxy? . Thanks.. that worked.  For others looking for example, \nvar client = new Swagger({\n    url: 'http://petstore.swagger.io/v2/swagger.json',\n    requestInterceptor: function(temp){\n        this.proxy = 'http://127.0.0.1:8442';\n    },\n    success: function(){\n        client.pet.getPetById({petId:2}, {responseContentType: 'application/json'}, function(pet){\n            console.log('pet', pet)\n        });\n    }\n});\nand you will have to add a piece of code in ./lib/http.js in SuperagentHttpClient.prototype.execute method\nif(obj.proxy){\n    require('superagent-proxy')(request);\n    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n    r.proxy(obj.proxy);\n  }\nshould make every request go through proxy running at http://127.0.0.1:8442. seems like it is possible with latest version of supergent but a monkey patched request. Something like \nif (proxyAgent) {\n    var OrigRequest = request.Request;\n    request.Request = function RequestWithAgent (method, url) {\n      const req = new OrigRequest(method, url)\n      req.agent(proxyAgent);\n      return req;\n    }\n  }\nas suggested by Superagent team here https://github.com/visionmedia/superagent/issues/1130.\nAny plans of upgrading your superagent version?. Thanks for replying on this but I am more looking into holistic approach in which I do not have to set up a setHost or a requestInterceptor for each request going through. I finally got the answer from superagent team about how to do it but it needs superagent version 3. Are you guys planning to upgrade superagent to 3?. Thanks for confirming that it is an expected failure. \n\nI see the same thing. . @fehguy  if you run the tests on latest node, it does throw the following error:\n1) swagger resolver fails gracefully with bad spec: \nTypeError: undefined\n at urlFormat (url.js:532:11)\n at new Request (node_modules/superagent/lib/node/index.js:136:37)\n at module.exports (node_modules/superagent/lib/node/index.js:41:10) \n at Function.request.(anonymous function) [as get]  (node_modules/superagent/lib/node/index.js:986:15) \n at SuperagentHttpClient.execute (lib/http.js:229:26)\n at SwaggerHttp.execute (lib/http.js:120:12) \n at SwaggerClient.build (lib/client.js:275:23)\n at SwaggerClient.initialize (lib/client.js:185:17)\n at new module.exports (lib/client.js:109:17) at Context.<anonymous> (test/durability.js:14:5). I am on 7.9.1. . Oops. Sorry I meant 6.9.1. ",
    "estermer": "I noticed that swagger-js v2.X is struggling to connect to the Host of a proxy in IE10. \nWe have a couple different api's for different levels of deployment such as development and production. So currently I have set the url: /accountservice/swagger.json and I am setting the basePath('/accountService') and setSchemes([window.location.protocol.slice(0, -1)]).\nhere is my current setup: \n```\nThis is my nginx setup for the proxy\nserver {\n        listen       3200;\n        server_name  localhost;\n    location / {\n        root   /Users/eric.stermer/platform/partner_portal/public;\n        index  index.html;\n        try_files $uri /index.html;\n    }\n\n    location /accountservice/ {\n        # proxy_pass http://accountservice-test.app.net/; #this is for the deployed test env\n        proxy_pass http://localhost:8091/; # This is for the local test env\n    }\n\n}\n```\n```js\nexport const buildAccountServiceClient = () => {\n  const swagger = new Swagger({\n    url: '/accountservice/swagger.json',\n    usePromise: true,\n  });\n// Reconfigure swagger client to override service path if we're using a reverse proxy:\n  // /accountservice/swagger.json -> /accountservice\n  // Originally tried setting basePath to null, undefined, and '', but that didn't work\n  let basePath;\n  if (API_URI.startsWith('/')) {\n    basePath = API_URI.substring(0, API_URI.lastIndexOf('/'));\n    console.log(window.location);\n    swagger.then((client) => {\n      client.setBasePath(basePath);\n      if (typeof(window) !== 'undefined') {\n        // use current protocol, so either http or https\n        client.setSchemes([window.location.protocol.slice(0, -1)]);\n      }\n    });\n  }\n  return swagger;\n};\n```\n^^^This works fine in all browsers and IE11+.\nBut in IE10 I have to specify the url to the full address of the api such as url: 'http://accountservice-test.app.net/swagger.json'. This will work but the other way will not. The above will give me a state of rejected and an error failed to parse JSON/YAML response with a catch() on the promise.\nIs there any experience with setting up the url to a proxy in IE10?. @webron I am using \"swagger-client\": \"^2.1.17\" but recently upgraded to the newest version to see if it will help and it did not . Would there be a reason it doesn't work on 2.1?. This is my set up of initializing the swagger client:\n```js\nimport { API_URI } from '../config/app_config'; // '/accountservice/swagger.json'\nimport Swagger from 'swagger-client'; //   \"swagger-client\": \"^2.1.17\"\nexport const buildAccountServiceClient = () => {\n  const swagger = new Swagger({\n    url: API_URI,\n    usePromise: true,\n  });\n// Reconfigure swagger client to override service path if we're using a reverse proxy:\n  // /accountservice/swagger.json -> /accountservice\n  // Originally tried setting basePath to null, undefined, and '', but that didn't work\n  let basePath;\n  if (API_URI.startsWith('/')) {\n    basePath = API_URI.substring(0, API_URI.lastIndexOf('/'));\n    swagger.then((client) => {\n      client.setBasePath(basePath);\n      if (typeof(window) !== 'undefined') {\n        // use current protocol, so either http or https\n        client.setSchemes([window.location.protocol.slice(0, -1)]);\n      }\n    });\n  }\n  return swagger;\n};\n// cache swagger client, so we only load swagger.json once:\nlet accountServiceSwagger = null;\nexport const accountServiceClient = () => {\n  if (accountServiceSwagger === null) {\n    accountServiceSwagger = buildAccountServiceClient();\n  }\n  return accountServiceSwagger;\n};\n```\nThen when I implement the swaggerAPI in my redux actions is where I get the error:\n```js\n// ./actions/auth.js\n// Connect to the API\nconst swaggerApi = accountServiceClient();\n// Log User In\nexport function logUserIn(credentials) {\n  const actionText = 'Logging User In';\n  return (dispatch) => {\n    startAction(dispatch, actionText);\n    console.log(swaggerApi.inspect().state); // says 'rejected'\n    return swaggerApi\n    .then((client) => { // this promise does not get hit but works in Chrome, Firefox, and IE11+\n      client.auth.login({\n        body: {\n          email: credentials.email,\n          password: credentials.password,\n        },\n      })\n      .then((response) => {\n        console.log(response);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    })\n    .catch((err) => {\n       console.log(err); // in IE10 i get this error 'failed to parse JSON/YAML response'\n    });\n  };\n}\n```\nWhat is really strange is when I go to our Swagger UI to test the API endpoint in IE10 it works fine but just doesn't want to work for the our React App.. I was able to solve the problem here:\nhttp://stackoverflow.com/questions/43458634/ie10-swagger-error-failed-to-parse-json-yaml/43592017#43592017\nI will try to get a PR submitted to help.. @webron yeah I can add that. . @buunguyen  @webron I am going to need some help with writing a test for this. I think I am a little too green of a coder. I never really used mocha before so I am struggling to set up the checks for IE using the Karma config. Any help would be awesome!. ",
    "jfelectron": "OK so you have to use a callback. This should be documented. \n. ",
    "bkowalik": "So, you want to remove this hardcoded version of model presentation and return JSON instead. OK, so ideally will be, when models are inserted form swagger-ui and one of it's coffee controlers? Am I right?\n. ",
    "Novarg": "I haven't but i can provide some output, maybe that will help.\nhttps://gist.github.com/Novarg/9378218\nThis resources.json gist desctibe my resources, it sets \"basePath\": \"http://localdomain.local:8001/api/v1/doc/schema\"\nNext gist https://gist.github.com/Novarg/9378144 contain entity resource description:\nresource path set from the root: \n\"path\": \"/api/v1/entity/\"\n...\n\"basePath\": \"/\", \nWith current implementation if i try to get some data from that entity resource (by clickint 'try it out!' button) swagger ui try to fetch the following url http://localdomain.local:8001/api/v1/doc/api/v1/entity/\nYou see that it doesn't build url from the domain root as requested by \"basePath\": \"/\" \nSuch url build function is SwaggerResource.prototype.getAbsoluteBasePath and on my view it build wrong url in my case when if i get relativeBasePath === \"/\" (that is actually basePath from entity.json) and this.api.basePath points to http://localdomain.local:8001/api/v1/doc/schema. \nOr i just wrongly interpreting basePath meaning.\n. ",
    "ghost": "Looks like I am on version 2.0.23.\nI did seem to find what was causing the error --- it was in the copy/moveResources methods:\n{\n     \"paramType\":\"query\",\n     \"name\":\"filePaths\",\n     \"type\":\"array\",\n     \"required\":true,\n     \"description\":\"Remote paths of the files or folders to move\"\n }\nIt seems by changing the type from array to a scalar type, it worked. What is the correct annotation for an array?\n. Ah, according to the docs it looks like it must be:\n\"type scalar or Model|object\"\nIt is curious that swagger-php did not see this as an error, though...\n. Got it. Thank you for your help!\n. I tried myself on a fix with PR #853 \n. I need to retest this.\n. ",
    "gregwebs": "Can swagger output a descriptive error message rather than throw a runtime exception with little information?\nWhen I past into the swagger editor, I see very useful information and it still renders the HTML\n\u2716 Swagger Error\nMissing required property: items\nJump to line 148\nDetails\n Object\n. ",
    "stephan-nordnes-eriksen": "Sorry for reviving, but I would just like to add that in our case we had an indentation error in the swaggerDefinitions.yaml causing this issue. It might be of value to the next person coming here :) . ",
    "rutchkiwi": "Thanks for the fast response! Things are looking better now, but still I get a bunch of failing tests in execution-spec and http-spec.. Is this to be expected? (Running master branch on both swagger core and swagger-js)\n. Thanks, but still I get a bunch of errors running cake bake & cake dev; for instance operations-spec has 7 errors similar to this:\nTypeError: Cannot read property 'method' of undefined\n    at null.<anonymous> (file:///Volumes/case-sensetive/dev/swagger-js/lib/swagger-operation-spec.js:101:25)\n    at jasmine.Block.execute (file:///Volumes/case-sensetive/dev/swagger-js/lib/jasmine-1.3.1/jasmine.js:1064:17)\n    at jasmine.Queue.next_ (file:///Volumes/case-sensetive/dev/swagger-js/lib/jasmine-1.3.1/jasmine.js:2096:31)\n    at onComplete (file:///Volumes/case-sensetive/dev/swagger-js/lib/jasmine-1.3.1/jasmine.js:2092:18)\n    at jasmine.WaitsForBlock.execute (file:///Volumes/case-sensetive/dev/swagger-js/lib/jasmine-1.3.1/jasmine.js:2576:5)\n    at file:///Volumes/case-sensetive/dev/swagger-js/lib/jasmine-1.3.1/jasmine.js:2590:12\nAny ideas?\n. It works fine now! The problem was me using the scala-jaxrs example app and not scala-jaxrs-fileupload :S\nThanks again for making this great tool!\n. Oh, and I think (not sure though) that this solves issue #84\n. ",
    "gdw2": "I'm having the same problem @rutchkiwi describes and his PR fixes it for me. \n. ",
    "marclar": "Awesome -- thank you.\n. ",
    "wcandillon": "@marclar If you are looking to do the codegeneration upfront, you might be interested by the following project: https://github.com/wcandillon/swagger-js-codegen\n. ",
    "NickPadilla": "Hello,\nI am having the same issue.  The 'useJQuery' field isn't documented anywhere and so not sure how to use it.  I have tried just using the individual shred files but that doesn't work.  Please help provide a work around.  It might be best to just fix the problem by ensuring your using a different namespace.  Please advise. \n. Hey @martypitt,\nI am wondering if you were able to figure out a workaround for this issue.  If so please post here.  \nThanks for your time!\n. Hey @fehguy,\nI have tried this and it doesn't work outright. When the bundle gets built it adds the needed deps to the file.  However it looks like some of them are mocks so that it will work in the browser space, since it was built for node to begin with.  I also see that all the shred libraries expect to be built into require.define() which gets injected with 'module' object that exposes the lib functionality.  There seems to be some work involved in getting this all working with RequireJS.  If anyone has any other ideas, that can be tried out relatively quickly, I'd be happy to try them out.   \n. Hey @fehguy \nI have looked at using the 'useJQuery' but the usage is spotty. Is there a way we can hijack the 'operation' in the 'SwaggerRequest' object when making a request?  I'd like to ensure all request go out using jquery.  I have the initial api-docs call using jquery but can't seem to get other requests to use jquery.\nAlso, i found a bug in the use of the useJQuery field.  When creating the Swagger instance we are not getting the useJQuery from the options and setting it in the instance. \n. Hey Tony,\nOk, it seems that there is an expectation that the 'operation' object contains the 'useJQuery' field but it is never created and thus not ever true.  Going to look into this a bit more tonight, hopefully i can come up with a pull request that will have this fixed.\n. Hey @fehguy  \nI think i have this fixed.  However, I am unsure about the 'operation.resource' usage but it is where the 'useJQuery' field was located.  I have this fixed as of now, on my side, so any changes needed please let me know.  Looking forward to having this merged.\nThanks!\n. Hey @fehguy \nThanks a bunch!  One last question, when do you think you might branch this change?  This is so I don't get stuck on master, b/c I forgot it was in use.  \nThanks again for the quick turn around!\n. ",
    "tillig": "I hope this is the right place to put this. I submitted a similar request to the swagger-ui project and just realized it must be pulling from here.\n. I put it in \"dist\" in the swagger-ui project. Should I submit it for the \"lib\" folder in swagger-ui as well? Will it get lost in the build?\n. OK, I set up a request for swagger-ui lib, too, so everything will be in sync. :)\n. ",
    "jwinter": "Ah, I see now. Thanks. I submitted a pull req to the docs, which might help clarify: https://github.com/wordnik/swagger-spec/pull/76\n. ",
    "cpedrinaci": "Thanks. I traced this option and indeed I was expecting precisely what you mention. \nIn particular what I was expecting is that after having built a client based on a swagger description, what you'd then do for invocation is something like: swaggerClient['apis'][resource][method](...)\nTherein one would be able to pass args, opts, and callbacks. However, it seems that what is exposed in that method drops the actual opts parameter (line 770)?\nthis.resource[this.nickname] = function(args, callback, error) {\n    return _this[\"do\"](args, callback, error);\n  };\nMy feeling is that opts should be added back there but I may well be missing something.\n. I use swagger-js as a general purpose invoker for APIs, and in my setup there may be within the same environment several APIs to be invoked using diverse authentication mechanisms. \nI also face the same issue independently of the naming. For instance there may be two APIs that use basicAuth, which one defines the value of the header?\nThe way I'm currently hacking my way around this is by cleaning the authentications and re-authenticating just for the API currently about to be invoked. Clearly that's just a hack for now.\nI have the feeling that in order to handle this, it would probably be better to have some sort of swagger client factory that returns a new object per API with authentication , etc bound to that object rather than being global. \n. I just did this test again with version 2.0.41 and the issue is still present.\nThe swagger description is based on the 1.2 spec. There is a link in the initial report with the actual description.\n. Yes, I can confirm I'm not facing the issue anymore. Thanks!\n. Actually, I don't know what happened (maybe I had my trailing fix in the code I was running) but in my current tests this still gives problems I'm afraid. At least with the latest npm (swagger-client@2.1.4-M1).\nI asked Shred to log its request as curl and indeed it does not send any data:\ncurl -X POST https://new.boxcar.io:443/api/notifications -H \"user-agent: Shred\" -H \"Content-Type: application/x-www-form-urlencoded\" -H \"Accept: application/json\" -H \"Content-Length: 0\" -d ''\nAny ideas? Should I be using some earlier bundle? has this not been released yet?\n. Just tried and got the same result I'm afraid. No data is passed through:\ncurl -X POST https://new.boxcar.io:443/api/notifications -H \"user-agent: Shred\" -H \"Content-Type: application/x-www-form-urlencoded\" -H \"Accept: application/json\" -H \"Content-Length: 0\" -d ''\n. I'm afraid I have not fixed it, could not really devote time to this...\n. ",
    "grahamj": "I wish I could solve this by simply changing the type in question to a primitive but if I specify a string as optional and my client sends it as null swagger-jack's validator will complain it's not the right type which is really annoying. So I'm stuck specifying the type as [\"string\", \"null\"] which breaks swagger-client. Awesome.\n. @webron When it is an array of values.\n. Whether that is true or not seems rather ambiguous. I was just reading the specs and it looks like it does:\n```\nThe Swagger specification supports five data types:\nprimitive (input/output)\ncontainers (as arrays/sets) (input/output)\ncomplex (as models) (input/output)\nvoid (output)\nFile (input)\n\n```\nAnd indeed swagger-jack does behave as such. I'd love a canonical answer :)\n. Also:\ntype    string  Any     Required (if $ref is not used).\nThe return type of the operation. The value MUST be one of the Primitves, array or a model's id.\n. Ok. I really wish swagger-jack would see null as undefined then because a lot of REST clients will send null rather than a blank string. I guess I'll find a workaround.\nThanks for the quick reply :)\n. ok I see the problem: swagger-jack uses json-gate for its validation. json-gate does allow arrays of types. So either swagger-jack should implement its own validator which matches the spec or the spec (and clients) should be updated to match json-gate.\n. Will do, thx\n. ",
    "ackroo": "Any idea if sending an Array of values will be supported in swagger js? If not, can you please point me to the src code I need to work with to make it send an Array?\nThanks\n. ",
    "tpitale": "My apologies,  the spec reads as contradictory between the sections I link to and the link you provided. Why even provide $ref? :-P\n. ",
    "andreipet": "+1.\nMaybe documentation on $ref can be updated for Operation Object. \n. \"In the next major version of the spec (which is in process) we're changing it to have a unified behavior all across and solve this issue once and for all.\"\n:)\n. Maybe you can help me man...\nWhere should I ask for a change for a field name?\nFor example\" enum\" field which is a keyword in java and I can't use default json serialization for a structure.\nIn swagger-core?\nThank you.\n. $ref does not work for operation output type or operation input parameter.\nWe have to use type.\n. Thank you for your time.\n. ",
    "garryyao": "can someone takes a look at this PR?\n. could be tests have to update, since it now pulls properties from super, ping me if I have to fix anything, thanks!\n. @fehguy even the tests on master cannot pass, so there's no point for me to fix the tests for this per patch until master is clean\nhttps://rawgit.com/wordnik/swagger-js/master/model-spec.html\n. I just checked into the issue with the specs failures, it turns out to be just missing the pet store (sample) api docs locally:\nhttp://localhost:8002/api/api-docs\nI cannot find where the pet store API source is hosted, can we simply point it to the online version instead? \nhttp://petstore.swagger.wordnik.com/\nIt is also required to update to pet store docs with explicit usages of subTypes so the feature can be bother illustrated and tested.\n@fehguy if you can fix those two issues I shall be able to proceed with completing this PR.\n. ",
    "whitlockjc": "The pull request is not mergeable and there are no tests for this.  Is there any way to get this updated?\n. The pull request is not mergeable and there are no tests for this. Is there any way to get this updated?\n. When was the last time you tried it?  It seems you're using an old version as the User-Agent should no longer be Shred.  Can you do a fresh build of the develop_2.0 branch and try that?\n. This could be related to swagger-spec/issues/159 which points out there is a conflict between the Swagger 1.2 Specification for API Declaration authorizations and its schema.\n. I think we should work on this when we make SwaggerHttp pluggable.\n. With recent refactorings, authorizations are no longer a global object so you can have per-SwaggerClient authorizations.  You can pass them into the SwaggerClient constructor using the authorizations option and you can alter an existing client's authorizations using client.clientAuthorizations.\nFeel free to open an new issue with what you find.\n. I've already gotten swagger-tools working in the browser.  I build 4 separate binaries for the browser:\n- Standalone with source maps\n- Standalone without source maps and uglified\n- Bower module with source maps\n- Bower module without source maps and uglified\nswagger-editor is using the swagger-tools browser builds already.\n. I personally think both projects suggested will not do much for what I think a parser should do.  Both swagger-parser and swagger-tools seem to focus on document validation, reference dereferencing, etc.  While those are useful features, my opinion of a parser would do more than that.\nWhat I'd like to see is a complete Swagger object model, something that more closely matches the terminology of the Swagger specification and is less of a port from previous Swagger specifications, and an API around constructing/deconstructing Swagger structures/documents.  (I don't think either of the projects suggested do this.)  There should also be some value add APIs, like validation and reference dereferencing and document/structure traversal, etc.  (This is where I think swagger-parser and swagger-tools could contribute seeing as both projects do all of this already.)\nIn the end, this is just my opinion.  I think the reason there are so many projects that do the same thing and solve the same problem in the Swagger space is because there is no official means to do these things.  I think if there was a Swagger API and object model, it would make building Swagger tooling and integrations much, much easier and without N different implementations of the same thing.\n. If all you need is the reference dereferencing, you could use json-refs.  If you want to construct an object model from a Swagger document, I don't think #152 will help.\n. This has been resolved.\n. This was recently done using a different commit.\n. https://github.com/swagger-api/swagger-js/pull/279 should remove all globals other than SwaggerClient in the browser.  authorizations is now an instance variable for SwaggerClient named clientAuthorizations.  models is now an instance variable for SwaggerClient named models.  The addModel function was removed as it was only for testing and the following constructors were removed because they too were only for testing: Model, Operation and Resolver.\nThe following constructors are exposed as properties on the SwaggerClient constructor and can be used as they were before: ApiKeyAuthorization, CookieAuthorization and PasswordAuthorization.  SwaggerApi and SwaggerClient are also exposed as properties on the SwaggerClient constructor for backward compatibility.  Usage of these constructors will result in a deprecation warning.\n. I just merged #279 so the only global now is SwaggerClient.\n. I'd love to help out.  swagger-tools uses Gulp and I love it.\n. How do you think this should be displayed?  A lot of work recently has been done to properly support arrays, inline schemas and references but to fix this we need to know just how to display ancestors/included models.\n. We could definitely make this work but we need to figure out the best way to display this stuff.  If we could agree on that, we'd be able to do the work.\n. This has been fixed in recent commits.\n. The build process for swagger-ui has changed recently.  It use to be as simple as replacing a JavaScript library but now I will need to defer to @mohsen1 for this one.\n. This has been fixed.\n. Why was swagger-js updated to support this but the Swagger 2.0 JSON Schema files were not?  Also, there is no mention of this feature in the Swagger 2.0 Specification.  Supporting this in swagger-js but not officially means that if you intend to keep valid Swagger documents, per the JSON Schema and Specification Documentation, you either can't use this feature.\nMentioning @fehguy so he sees this.\n. I'm just the messenger but yes, I did look at the original issue and I even did some code surfing.  If you search for brackets in the swagger-js project, you'll find that swagger-js clearly has explicit support for a collectionType of brackets.  (Just click this link to see what I see.)  In fact, one of the items found will be an explicit unit test for this.  So like I said, it seems the fix for this issue added support for a collectionFormat that is not documented in the Swagger 2.0 Specification documentation or the Swagger 2.0 JSON Schema.  This was originally discussed at apigee-127/swagger-tools/pull/192.\n. Based on the Swagger 2.0 JSON Schema and Specification Documentation, I agree with @webron but I definitely see explicit support for this in code.  Now that we know this is an implementation issue, I will let @webron take over.  :)\n. Everything looks fine.\n. This should be fixed.\n. With array display currently broken in a few places, I think it's a good idea to punt on this one for now.  getMockSignature currently shows array {} and since arrays aren't displayed properly, fixing them in some places but not all doesn't make sense.\n. This should be fixed.\n. This should be fixed in https://github.com/swagger-api/swagger-js/pull/279.  In fact, that commit also uses Browserify to build the browser binaries.\n. I just merged #279 so browserify support should be available now.\n. This should be fixed.\n. Any progress with updating this to work with the develop_2.0 branch so we could potentially get the merge passing again?\n. I am going to close this but I will leave #208 open.  My plan is to use #208 as a way to clean the project up some and to get more familiar with things.  My reason for closing this is more about timing, since I think other issues that are in my queue will be easier once this is done, and is not about the quality of what you've done.\n. Just to make sure I'm understanding this properly, you want complex properties to be supported where the type of the property is object or a reference to an model.  Is this correct?\n. This is the test I have passing right now for createJSONSample: http://pastie.org/private/fxtzghfhz3wtn1um86rfw  I now need to do the same for getMockSignature.\n. No, references need to be updated to work this way but there is already an open issue(s) for that.  So it would work the same as it did before.  We can fix that soon.\n. Pull request #261 was created against master instead of develop_2.0 so it was closed.  Sorry about that, didn't realize.\n. Any movement on this?  Tests pass but I need you to make sure this is what you wanted.\n. There are a number of related issues that will help make this better but map support should be fixed by #262.\n. We moved from shred to superagent as a part of https://github.com/swagger-api/swagger-js/pull/279, which should resolve https://github.com/swagger-api/swagger-js/issues/267.  When we work on this pluggable feature, I'd like to remove jquery as superagent should make it no longer necessary.  Superagent works on the browser and in Node.js, while jquery does not, and it supports all of the features that require using jquery (form data, cors, ...).\n. To fix this, we will need to get the Resolver to work with this is two fold:\n- Update Resolver to process paths (Better yet would be to get Resolver to process all $ref regardless of where they are in the document)\n- Update Resolver to handle $ref encoded values.  For example, if I wanted my /testing path to basically be a clone (a reference) to /pets, I'd need a reference like this: #/paths/~1pets.  (The way I solve this in json-refs is handled here: https://github.com/whitlockjc/json-refs/blob/master/index.js#L196)\n. This was added by @fehguy to get M2 released.  I am closing this but feel free to reopen if we missed something.\n. This has been addressed in a different commit.\n. In all honesty, 1.2 and 2.0 aren't all that different.  In swagger-tools, we have one code base that works with both types without a lot of effort.  It's not perfect but it felt a lot better than separating implementations only to have a bunch of copy/paste/duplication.  What if we were to have a version-specific object model but a single source base that handled both intelligently?  Just a thought.\n. I don't know the API well enough yet to answer but when I do, I'll let you know.\n. Wow...let me fix this.  Somehow the commit history got jacked up.\n. This needs a rebase.\n. I'll take a look.\n. Do you mind doing a rebase?\n. I'm going to do this after I get the current browserify/cleanup done, which should be today.\n. This should be done as of https://github.com/swagger-api/swagger-js/pull/279.  It's not fully tested but swagger-js and swagger-ui tests pass with this implementation.  I am sure swagger-ui will help us find anomalies as will our adding of new tests.\n. #279 has been merged so superagent is now being used instead of shred.\n. @webron is right.  If you look at the JSON Schema, it allows a pathItemObject of which null is not a valid structure.  If you do not want to support those HTTP verbs for that path, just omit them.  If some other tool is generating this invalid Swagger document, file a bug.\n@fehguy is right as well.  swagger-js should be resilient to these types of things and I will look into it soon.\n. Common or not, it is not valid.  In the end, Swagger is a documentation format and it has rules in place.  These rules are documented in the Swagger Specification and they are enforced structurally via the Swagger JSON Schema.  Your explicit serialization is violating one of the rules, it's as simple as that.  In the end, I will update swagger-js so that it will not fail when it encounters these but if you start using other tooling, like tools that validate your Swagger documents, you will run into this again I'm sure.\n. Please update this to include unit tests as well.\n. Did you mean to close this?  The pull request is valid and should be pulled as long as we can get a test that shows it works.\n. Makes sense.  I just didn't want you to close this pull request, which is useful, because of the conversation we had in #268.  Even though the document that causes is invalid from a Swagger perspective, swagger-js should be resilient enough not to blow up in cases like this so your pull request is important.\n. This needs to be rebased.  If you rebase it, I'll merge it immediately.\n. This should be fixed.\n. It seems there are test failures.  If you can get these resolved, we should be in good shape.\n. I'm looking into how the test suite works and it is currently brittle.  Can you update your commit to include the changes to lib/swagger-client*.js and see if that fixes things?\n. I've solved this locally but I've not pushed it upstream yet.  To avoid conflicts, I'd like to close this and solve in an upcoming commit.\n. This should be fixed.\n. I think he means the response object from SwaggerHttp.\n. @mohsen1 Can you tell me which fields you use in the response object?  I see some duplication in what is there now and would like to know what you're using.\n. I was wrong.  I misunderstood.\n. After being in the SwaggerHttp code recently and seeing now official response model structure, I thought that was the response he was referring to.  But after looking at the code he pointed me to, I had just figured this out when you commented.\n. This should be fixed.\n. The fix for this does not support references.  References are broken in most of swagger-js and will be addressed together.\n. Sorry about that but it was unavoidable.  I am willing to help however I can to ease this.\n. @fehguy gave me the +1 to merge since all tests pass and preliminary testing with swagger-ui was fine.  Since we did remove Shred and switched to Superagent I am aware that some things could have changed that will require some follow-up work.\n. Based on the spec, if you want to turn off authorization for an operation when there are authorizations at a higher level (global for example), you set authorizations to be an empty array.  So we need to do that.  The current code could be \"tricked\" to do the wrong thing but it would require an invalid Swagger document.  We can make it better.  Thanks @xhh for tracking this down.  I can fix this in the M2 milestone to get it done quicker but that is a decision for @fehguy.\n. Can we verify if this is still happening in the latest swagger-js release?\n/cc @xhh \n. I read your comment, I was just asking if you could still reproduce...not if you think it should still reproduce.  I'll talk to @fehguy about how security should work and go from there.  I think this is for global authorizations but I'm not sure.\n. I think the way this should work is if authorizations is undefined, add all authorizations.  Otherwise, use the provided authorizations.  If you supply an empty array/object, of course you'll end up with no authorizations being applied like you want.  Does that seem reasonable?\n. This is fixed.\n. When you merge update this for develop_2.0, feel free to not worry about building Bower versions of browser/swagger-client*.js, I can do that after we get Bower support using the standalone builds.\n. Since there was no response and this commit touched unnecessary files, I'm going to close this.  We will be working on Bower support as a part of #336.\n. It's already done on develop_2.0.  Check again please and if you can repeat, give me a recipe.\n. This has been taken care of.\n. I just went back through the code, the last master merge from develop_2.0 before I got involved.  The model description was never displayed prior so this is a new feature, not a regression.\n. This is fixed in the develop_2.0 branch.\n. This is not a regression, it's something new to 2.0 support that just was not implemented yet.\n. There is a reference to the original so I know what to look for, don't worry.  :)\n. While I know how this should work, and some ideas on how it could, how would you (those involved) want this to be displayed?\n. Yeah.  I'm wondering how the UI will look.  I've implemented some stuff recently that should make the implementation possible but the generated HTML for the UI hasn't been suggested anywhere.\n. It was a mistake, thanks for catching it.\n. Believe it or not but swagger-ui uses swagger-js to generate HTML for certain parts of swagger-ui.  I'm not joking.\n. That is already working then.  The thing is that additionalProperties is for the schema that is used to validate all properties not mentioned in the properties part of the object definition.  So this would end up with something like an addendum/asterisk/... at the bottom of the Model properties display with the pertinent information.\n. We are talking about the display of Model objects that have the additionalProperties attribute set.\n. The display of Model objects is working.  additionalProperties support is not done which is why this issue is still open.  Why you're using additionalProperties by itself doesn't make much sense to me as its only intention is to specify the schema for all properties not defined in the properties attribute.  Just to humor me, mind telling me what Prereq looks like?\n. @webron I'm not sure I like using Map as a container as it's not a container type, or even a keyword/type, in many languages.  Basically, we need a way to render this: All other properties provided will be of type {type} and have the following constraints.  So you could display it like a regular model property but instead of the property name, you'd need an asterisk or something else to denote All other properties that are not the ones above.\n. Here is an example:\nTypical Property Display in a Model\n{propertyName} ({propertyType}, {optionality}){: description}\nSuggested Display for Additional Properties in a Model\n* ({additionalPropertyType}, optional){: description}\nHere is an example schema and it's proposed display:\njs\n{\n  type: 'object',\n  properties: {\n    age: {\n      type: 'integer'\n    },\n    name: {\n      type: 'string'\n    }\n  },\n  additionalProperties: {\n    type: 'string'\n  }\n}\nMyModel {\n  age (integer, optional),\n  name (string, optional),\n  * (string, optional)\n}\n. With recent commits to support inline models, here is a brief example of using inline models for your additionalProperties:\njs\n  {\n  type: 'object',\n  properties: {\n    age: {\n      type: 'integer'\n    },\n    name: {\n      type: 'string'\n    }\n  },\n  additionalProperties: {\n    type: 'object',\n    properties: {\n      email: {\n        type: 'string'\n      }\n    }\n  }\n}\n```\nMyModel {\n  age (integer, optional),\n  name (string, optional),\n  * (Inline Model 1, optional)\n}\nInline Model 1 {\n  email: (string, optional)\n}\n``\n. Well, we support displaying Maps of all types now in swagger-js _(swagger-ui uses this to render parts of the UI)_ so all we need now is to supportadditionalPropertiesas mentioned above.\n. Since this is a regression, I've added it to the M2 milestone.\n. swagger-ui uses swagger-js to generate some of its UI.  Weird, I know, but for the next release of swagger-js and swagger-ui, this will be the case.  We'll be cleaning this up in a future release.\n. This should be fixed if I understand it.  Basically, swagger-ui uses swagger-js'sModel#createJSONSampleto render the JSON representation when available.  Pull request #303 makes it so that if there is anapplication/json` example that is either a JavaScript object or a JSON string, we will use that instead of having the Model create its own JSON sample.\n. I've no idea.  I know that swagger-ui has been under constant development so it wouldn't surprise me if there was some regression.  Let me go look around and see if swagger-ui is indeed still using this.\n. It seems that your response definition is wrong.  You provide an example but do not provide an actual schema to describe your response.  A schema-less response is considered to be a void response, which means no response.\n. As for how swagger-ui is using swagger-js to render the operation view, check this out:\nhttps://github.com/swagger-api/swagger-ui/blob/9d8ccc40dc5b051b61c80f316e5cf47bf344ddc6/src/main/javascript/view/OperationView.js\n. Well, what good is an example for a void response?  So it's less that you need a schema for the response example to be displayed and more that you've provided a superfluous example for a void response when you don't have a schema.  Make sense?\n. Yes, swagger-js is not creating these errors.\n. This pull request is made against an old version of the develop_2.0 branch.  Any way to get this updated?\n. As part of getting the M2 release out the door, this work was done already and should be available in the 2.1/M2 release.  Please feel free to re-open, or file a new bug, if things aren't working like you'd expect.\n. Do you mind adding a test case for this to show it's working?  The code looks fine but policy is to require unit tests.\n. Adding to M2 milestone since this was a regression.\n. I went ahead and merged this since it was a regression.\n. Can you explain this a little more?  I did a lot of work recently on the model signature stuff and I want to add tests for things based on known issues.\n. The 2.0 tests work fine so this seems to be related to the converter.  I'll look into it.\n. Nah, I can handle it.  ;)  We do have sample/signature tests for 2.0 that are current passing and handle references.  Since that is a 1.2 model reference, the short Pet vs. #/definitions/Pet, I'd assume it's a converter issue but to avoid being an idiot, let me look into it first.\n. Scratch that, you can't take the idiot out of me.  But I do want to look into it.\n. This has been fixed.\n. This has been fixed.\n. This is fixed.\n. Can you tell me if this is still happening with the latest release?\n. This is a duplicate of #322.\n. Here is the code that takes responses and handles them:\nhttps://github.com/swagger-api/swagger-js/blob/develop_2.0/lib/types/operation.js#L117\nIt will only create a Model object, the thing that lets you call getMockSignature and createSampleJSON and other APIs that swagger-js uses, for the default success response and the others do not result in a Model object instance.  We also will need to create an API for operations to allow you to iterate over all response models and to retrieve a response model by code/name.\n. Code would change since we'd need to create a Model for all responses, not just the one we deem to be the default success response, and we'd need APIs added to the Operation object to give access to these response Model objects.\n. This is not a regression.  The feature/bug that led to this was that swagger-ui wants to render rich representations for the non-default response.  To be able to do this, we would need to make Model objects for all responses, not just the default, and provide an API to get access to the responses models, not just the default.\nThis is a new feature, not a regression.\n. I looked into this and the release prior to my involvement didn't have this.  I'll have to look back further to see how it was done and we'll get it knocked out.\n. This commit as-is is useful but when if/when we pull this, we need to create a follow-up issue to go beyond just supporting Bower and build Bower-specific binaries that do not bundle the dependencies within the binary itself.  A good example of how this could be done is json-refs.\nThe way json-refs does things is it builds standalone, single binaries just the way swagger-js does now.  But it also builds Bower-specific binaries that are as small/lightweight as possible by avoiding bundling its dependencies in the Bower-specific binaries and instead uses the dependencies section of bower.json.\n. This is a duplicate of #286.  I'm going to close this and add my feedback/suggestion there.\n. Reopened here since #286 was old and made against the old master.  (Shouldn't matter but just in case.)\n. Thanks.  (This is a trivial change so it was merged.)\n. @fehguy I just realized that this was merged to develop_2.0...was that what we wanted?\n. Well then we're good.  :)  Thanks @webron.\n. This isn't a resolver thing.  Basically, lib/types/models.js assumes that all definition schemas are complex types and in this case that isn't true.  So what we need to do is when we render a model, we need to make sure for non-complex type references we just render the value as if it were a property.  I'm working on this now.\n. This has been fixed.\n. You can use the spec option value.  If you look at the tests at the bottom of test/models.js it should give you an example.\n. Could you please add a test for this?  test/models.js is the place.\n. Can you merge the pull request in #345 and this one together so that you have one PR with the business logic and its test?  #345 will not pass without this merged so having them together makes most sense.\n. @ponelat So is this fixed after merging #381?\n. What about parameters?  When you see a parameter that is an array of models, inline or referenced, does it show Array[SomeDefinition] or Array[#/definitions/SomeDefinition]?\n. That's correct.  I think it showed the string version because it wasn't typed right but it seems you've fixed this.  Thanks a lot.\n. The pull request is failing merge and it appears it only contains the unit test and not the actual work to make the unit test pass.\n. I wanted to do this in M2 but didn't think the time was right.  I think this should be fine and will be a good start to working on making SwaggerHttp pluggable (#239).  I will let @fehguy comment on this but the work looks fine.\n. I just tested this and SwaggerClient is exposed as expected.  I do see that the usage in the README is wrong.  I will update that here shortly.\n. This should be fixed.  I'm not sure why the README on master is so different than the one on develop_2.0 but the one on develop_2.0 works.  Until @fehguy gets the README on master to work, please use the aforementioned link.\n. Gotta love IE8/IE9: https://github.com/visionmedia/superagent/issues/409\n. Thanks.\n. This PR looks fine but it cannot be merged as-is and needs to be rebased.\n. #387 has some of these changes in it so it looks like this PR needs to be rebased, committed and then #387 needs to be rebased after this commit to remove the duplicate stuff from it.\n. This PR needs rebasing as well.  The comment about testing might be enough to keep this PR from getting my +1 because while it's a pain to write good tests for the generated HTML, it's required.\n. I somehow missed this when adding the fixes that caused this static list of restricted tag values.  Regardless, his has been fixed.\n. Should probably be: if (!_.isUndefined(model) && _.indexOf([undefined, 'array', 'object'], model.definition.type) === -1) {  We only want to use the referenced model when it exists and its type is what we call a model.\n. Maybe now is the time to make IE9 the standard.  IE9 support ES5 and so do all other browsers.  If we do support IE8, we could/should lean on lodash like I started doing for the code I touched prior the the 2.1 release.  I do think we need to make a decision but I wanted to bring this up because I've been talking with @fehguy about the idea and he didn't turn it down yet.  ;)\n. I think this is already supported.  If you provided options.authorizations, those become the authorizations to always use.  (https://github.com/swagger-api/swagger-js/blob/develop_2.0/lib/client.js#L130)  So if you initialize with a options.authorizations and options.url, it should use those authorizations when retrieving the initial Swagger document identified in the URL.  Are you not seeing this?\n. Yes it is exposed.  :)  SwaggerClient.SwaggerAuthorization.  If you inspect the globally provided SwaggerClient, you'll see that it's there along with the *Authorization constructors themselves.\n. I just validated this.  Here is my test:\njs\nconsole.log(Object.keys(SwaggerClient)); // => [\"ApiKeyAuthorization\", \"PasswordAuthorization\", \"CookieAuthorization\", \"SwaggerApi\", \"SwaggerClient\"]\n. Ah, I do see that one isn't exposed.  Maybe it wasn't because it's really just a simple object or an oversight.  (https://github.com/swagger-api/swagger-js/blob/develop_2.0/lib/auth.js#L9)  We could easily expose it I guess.\n. Basically you're suggesting getting rid of the SwaggerAuthorization container and allowing you, the caller of SwaggerClient, to provide container yourself.  I like this idea a lot as SwaggerAuthorization really doesn't do much but setup a container to have named authorizations.  One less moving part and a very simple interface to adhere to.\nOf course, if you had to do this now, you could do it like this:\njs\nvar client = new SwaggerClient({\n  authorizations: {\n    authz: {  \n      api_key: new ApiKeyAuthorization(...)\n    }\n  }.\n  url: '...'\n  success: ...\n});\n. I think what you have is fine but as a JavaScript author, it feels weird to me to have a SwaggerAuthorizations object just to expose an apply method.  Not only that but with the SwaggerAuthorizations container hiding the JavaScript object used for key/value storage, we now have to maintain the code required to provide access to the container.  Another thing to think about is JavaScript in general.  JavaScript developers are use to dot/bracket notation for key/value storage and what we have now is more like a Java API.\nAll of this being said, this is just style so I will give my +1 for the overall fix.  But I still think we could end up with a better JavaScript experience if we blew away the SwaggerAuthorizations object itself and instead just exposed a function that would would be used to replace what SwaggerAuthorizations#apply does.\n. This was not a problem with swagger-js but with swagger-ui.  Here was the fix:\nhttps://github.com/swagger-api/swagger-ui/commit/a4124fba7cff89f05143f1f493175544ade909c9\n. Let me clarify: swagger-js' recent change did cause the problem but the fix was in swagger-ui.\n. All that helpers.resolveSchema does is recurse until it finds the final schema.  The reason for this is for Swagger 2.0, you can have properties/responses whose schema property is the real schema to be used, not the property/response definition itself.  The only way something could be stripped is if the compatibility layer for 1.2->2.0 is doing something weird.\nI'll look into it but I don't see how the code mentioned is involved.\n. I've figured this out.  Basically, the compatibility layer is taking 1.2 models and creating weird 2.0 representations for them.  Take the given example for ModelA:\njs\n{\n  id: 'ModelA',\n  description: 'ModelA',\n  properties: {\n    modelB: {\n      description: 'modelB',\n      required: true,\n      type: 'ModelB'\n    }\n  }\n}\nI would expect the following compatibility model definition to be created:\njs\n{\n  description: 'ModelA',\n  properties: {\n    modelB: {\n      $ref: '#/definitions/ModelB'\n    }\n  },\n  required: ['modelB']\n}\nBut instead we get this:\njs\n{\n  \"schema\": {\n    \"$ref\": \"#/definitions/ModelB\"\n  },\n  \"description\": \"ModelB\"\n}\n(This isn't even a valid model definition.  Is this suppose to be some meta-model?)\nSo what happens is we see the schema property and get the real schema and use it.  I can fix this but this was caused by the compatibility code creating a model schema that is not a valid 2.0 model schema.  The code is working as expected but we need to update it to work around this case.\n. I have fixed this in #597.  It has unit tests showing that the mock signature code now will render property descriptions for Swagger 1.2 model properties that are references.\n. I don't think this is required.\n. If you were to make the test script in package.json to be cake bake && mocha, you shouldn't need this as well.  Travis will always run npm test by default so if you configure package.json so that npm test does what you want for Travis, you could remove this as well.  (Not important)\n. I really think this should be modeled after how we handle inline schemas in responses, for consistency of course..  So instead of inline#{num} it would be Inline Model {num}.\n. Why do we need this?\n. Why do we need this?\n. Nah, we actually print that when you look at the Model Schema in the response.  Here is a test showing this: https://github.com/swagger-api/swagger-js/blob/master/test/models.js#L313\n. Gotcha.  I was just wondering why it was on the prototype.  No big deal.\n. I just saw this.  This regex will match Inline Model* but what we really want is Inline Model {num}.  So this regex should be ^Inline Model \\d+$ so that we only match what we want so we have less of a chance of false positives.\n. Might be safer to use _.isArray but this is not a requirement.\n. Testing the generated HTML is a pain in the butt but I don't think removing them makes much sense here.  The tests you've replaced them with are quite lax and do not ensure the structure created is what is required.  While I do think we need some utilities for easing the pain of this, I'm not sure making things more lax makes sense.\nThis comment applies to all similar changes below so I will not be marking the other places.\n. I really don't think we need to keep this unless it's for backward compatibility.  SwaggerAuthorizations is really just a JavaScript object from an implementation perspective so wrapping it doesn't make much sense.\nOf course, how the review of the rest of this PR goes depends on whether we agree on this or not.\n. ",
    "okigan": "changelist: https://github.com/wordnik/swagger-js/commit/b753e9daed46f752bbdb20c0bdafce5c380f1ea3\n. ",
    "raymondfeng": "Shouldn't consumes/produces be instance vars for SwaggerResource? \nI assume https://github.com/wordnik/swagger-js/blob/master/lib/swagger.js#L1191 should have its own declaration of consumes/produces too.\n. ",
    "unsetbit": "Also, the unit tests seem to require another local server running (I see it trying and failint to hit localhost:8002), but I don't see how/what to set that up in the docs, so I was unable to run the tests against this change.\n. ",
    "AlexThurston": "Fair enough, but, if within the same process, I wanted to have two instances of the client with different bearer keys/value pairs as the second will override the first.  This is because the hash is global to the node module rather than belonging to the object.\n. In my case, I am writing a simulator for multiple \"users\" in nodejs.  The sim creates 1, 10, 1000, etc... users (each with their own access token) and starts them firing data into the system; hence multiple bearer tokens and multiple \"users\" within on since nodejs process.\n. That's effectively what I've done as well.  I forcibly un-require the file so that the module level variables are tosses out.\n. ",
    "brodyd": "We have one api that calls two separate APIs (Both are swagger spec'd) and this is a real problem for us.  The authorizations cannot be global if more than one swagger api is to be called.\n. I am currently working on a fix but my tester is away so it might be a few more days before my pull request is ready.\n. I've lost my changes. I'll see if I can free up time to do them again.\nNote: I had not lost them. They just did not work.  Debugged the issues and tested again - all good.\n. Any movement on this yet.\n. I've created a pull request to resolve this issue. (#115)\n. Merged as #115\n. Sure.  We have a  swagger definition with one body param called 'newUser'.  When we make the call through the client we had to call the body 'body' and not 'newUser'.  The recent change requires that the body is called 'newUser' and our existing use of 'body' creates an error (i.e. body is already set by our use of body but the definition says the body is called 'newUser' and throws an error).\nMy change means that the body param is only overridden if their is another body param passed in with a different name.\n. Even clearer...\nHere is our swagger definition:\nvar addUser = {\n    'spec': {\n        description: \"Add a new User\",\n        path: \"/users\",\n        notes: \"Add a new User\",\n        summary: \"Add a new User\",\n        method: \"POST\",\n        parameters: [\n            swagger.bodyParam(\"newUser\", \"New User Request\", \"NewUser\"),\n            swagger.headerParam(\"actionId\", \"Action Id\", \"string\", true),\n            swagger.headerParam(\"api-key\", \"API Key\", \"string\", true)\n        ],\n        type: \"User\",\n        errorResponses: [\n            { code: 500, reason: \"An internal server error\" },\n            { code: 400, reason: 'Username is blank' },\n            { code: 403, reason: 'Api Key is missing'}\n        ],\n        nickname: \"addUser\"\n    },\nand when we call it from our client we use this code (before the change for #166).\nthis.swagger.apis.users.addUser({ body: JSON.stringify(input), actionId: this.actionId}, function success(res) {\n            self.userSaved(self, res);\n        }, function error(res) {\n            self.userError(self, res);\n        });\nNotice that we had to include the body as body.\nAfter the change in #166 this fails with the error that there are two body parameters.\nWhich there obviously isn't but the swagger definition is telling the swagger client that the body should be populated from a parameter called 'newUser' which does not exist.\nWe are still limited to a single body param but now it has to have the same name as defined in the swagger definition instead of having to be called body.\nI consider this a breaking change to existing behaviour and it has pretty much broken all of our clients.\n. Our solution options are:\n1. Change our all our clients to use the name in the definition instead of body.\n2. Change all our APIs to use the name body for the body param\n3. Change the swagger client to accept body as the default and only change it if the body is not present in the args and the correctly named property is present in the args\n. My suggested change is very small - basically we should only set the body (or attempt to set it) if the correctly named property is included in the arguments.  So essentially it has the same behaviour as before and the behaviour you added at the same time.\n. Already have.  Its #169\n. This pull request should allow the term 'body' to be used as an alias to the swagger defined name of the body so that the change for #166 does not break clients using the term body instead of the actual swagger defined name.\n. This has been fixed with another change sop this request is not long valid\n. I've added a Pull Request (#204) to fix this issue.  A workaround can be done by adding an empty opts object to all resource requests.\n. ",
    "Larry0ua": "oh ok, I don't have much experience with this stack so I've updated the code in the most clear way for me. Anyway this should be fixed. If there are any concerns, please ping\n. ",
    "noirbizarre": "I have the same issue.\nEspecially with basePath = '/'\n. For me, 2.0 specs.\n. Waow ! Faster than lightning, Travis doesn't even finish to build !!\nThanks for the merge !\n. Same here, not using SwaggerUI, only Swagger-JS but I'm having these warning breaking my console and I'm not calling these functions.\n. ",
    "levkar": "when do you think swagger.js will work with 2.0 spec?\n. ",
    "xhh": "I'm having the same issue that form parameters are not sent. I tried the updatePetWithForm endpoint from petstore example as well and got he same problem:\n``` javascript\nvar client = require(\"swagger-client\");\nvar swagger = new client.SwaggerClient({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  success: function() {\n    swagger.apis.pet.updatePetWithForm({petId: 123, name: 'new-name', status: 'new-status'});\n  }\n});\n```\nBut from the result of tcpdump, no post data is sent:\nPOST /v2/pet/123 HTTP/1.1\nuser-agent: Shred\nContent-Type: application/x-www-form-urlencoded\nAccept: application/json\nContent-Length: 0\nHost: petstore.swagger.io\nConnection: keep-alive\nHowever, asCurl seems to work:\n```\n\nconsole.log(swagger.apis.pet.updatePetWithForm.asCurl({petId: 123, name: 'new name', status: 'new status'}));\n\ncurl -X POST --header \"Content-Type: application/x-www-form-urlencoded\" --header \"Accept: application/json\" -d \"name=new%20name&status=new%20status\" \"http://petstore.swagger.io/v2/pet/123\"\n```\nRunning the above curl command does send the data as expected:\nPOST /v2/pet/123 HTTP/1.1\nUser-Agent: curl/7.37.1\nHost: petstore.swagger.io\nContent-Type: application/x-www-form-urlencoded\nAccept: application/json\nContent-Length: 31\nname=new-name&status=new-status\n. @whitlockjc I tried just before I posted that comment, using swagger-client installed via npm install swagger-client, i.e. version 2.1.10-M1.\nI'll have a look how to build and try it with develop_2.0.\n. fyi, tested with the latest swagger-client in node.js and browser, both work with form params now\n. I made the definition as described in the spec: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object\nFor \"endpoints that do not need to be authorized\", I meant operations whose security is empty array. For these operations, no authorization headers should be applied, right? But in my case, both of the 2 authorizations headers are sent.\n. Hi @fehguy, please have a look at this line:\nhttps://github.com/swagger-api/swagger-js/blob/master/src/js/auth.js#L23\nFor empty array, Object.keys([]) returns [] (empty array) whose length is 0.\nI guess it's the problem, i.e. for an operation whose \"security\" is an empty array (\"To remove a top-level security declaration, an empty array can be used\"), all authorizations defined for the client will be applied to the operation.\nWhen I tried changing that line to the following\njavascript\nif (typeof authorizations === 'undefined' || (!Array.isArray(authorizations) && Object.keys(authorizations).length === 0)) {\nthen it works (no auth parameters are sent for operations that do not require auth).\n. @whitlockjc I don't think so as I can see the same line causing the issue is still there. Please refer to my comment above.\nTo describe the issue again:\nthe security key is set to empty array for an operation, but all securities are applied for that operation.\n. It works now. Thanks!\n. ",
    "sobolk": "Unfortunately new pattern caused regression in my code.\nIt can't replace http://host/my-api/entity/{entityId}/resource anymore.\n. Yes,\nHere is the original issue https://github.com/wordnik/swagger-core/issues/68 . \nMy problem is that in the fix \"}\" is considered as end of param definition, like .../{id:\\d+}/... and I have a pattern which contains } inside, so not whole placeholder is replaced.\nIt's in lib/swagger.js line 947. I have a fix which is part of https://github.com/wordnik/swagger-js/pull/125.\n. Thank's @s4nch3z. \nUnfortunately new pattern caused regression in my code.\nIt can't replace http://host/my-api/entity/{entityId}/resource anymore.\n. @s4nch3z \nI checked that again. It works for me. Sorry for confusion.\n. @s4nch3z \nHowever I've found other issue elsewhere.\nFor example if I have path\n/{type}/{typeId}/something\nand call with params:\n{\ntype:\"something\",\ntypeId:\"somethingElse\"\n}\nthen it replaces both {type} and {typeId} by \"something\"\n. After double checking it works for me. Sorry for confusion\n. ",
    "codeHatcher": "I am having a similar issue. How did you solve it?\n. ",
    "vivex": "@fehguy \nThere is not much information on https://github.com/swagger-api/swagger-js/pull/374\ncan you explain little bit more here\n. ",
    "codler": "I have the same issue as @vivex \n@fehguy could you reopen this?\n. ",
    "dthorpe": "+1\n. ",
    "lluu": "will this be per swagger url?\n. I wonder if swagger-ui should be more forgiving.. ie, it should accept \"*/json\" by default.  So there won't be a need to make this part of the initialization.\n. ",
    "aurelienlt": "I saw several else var missing in the code about authorizations. I'll fix it locally and make a pull request to point it more clearly.\nEdit : https://github.com/wordnik/swagger-js/pull/128\n. Hi. This fix does not only fix many bugs, it fixes the whole behavior, according to the RFC. Changing the behavior wont harm anybody since the authorizations where not working at all (it always said \"everything is fine\" since status were turned into string and was evaluated to \"false\" when something was wrong).\n\nWe need to apply all authorizations if the authorizations key isn't defined\n\nI d'ont remember having seen anything like that in the RFC (I'll add this change in th elist of changes) :\n\nProvides information about the authorization schemes allowed on this API.\nin Resource Listing\nA list of authorizations schemes required for the operations listed in this API declaration. Individual operations may override this setting. If there are multiple authorization schemes described here, it means they're all applied.\nin API Declaration\nA list of authorizations required to execute this operation. While not mandatory, if used, it overrides the value given at the API Declaration's authorizations. In order to completely remove API Declaration's authorizations completely, an empty object ({}) may be applied.\nin Operation Object\n\nAssuming such a behavior is dangerous, anybody which declares an authorization for a specific usage (like one or two operations only in one API) would see it applied everywhere if he does not carefully declares otherwise in each API declaration.\n. ",
    "callenx": "???  I see it in the operations section of the 2.0 spec: https://github.com/wordnik/swagger-spec/blob/master/versions/2.0.md#operation-object-\n. Moved to https://github.com/wordnik/swagger-js/pull/140.  (I somehow borked the merge... it was easier to create anew.)\n. ",
    "s4nch3z": "121\n. @sobolk \nWeird, I just did a test with a string you provided and #121 worked well\nCan you give swagger json generated?\n. ",
    "mrhanlon": "Hmm, ok that's what I was worried about. I tried with form parameters, but the processing of the form parameters toString's the Blob object, which ends up in an invalid POST. It works with input[type=file] but not Blobs. \n. Ok, sorry. I accept that the spec snippet I posted is invalid. Looking at the petstore app, though, I'm still seeing the behavior that this pull fixes. I wrote this app against the scala-jaxrs-fileupload sample application. It demonstrates what I'm seeing for either input[type=file] or Blob object upload.\nHere is the relevant code:\n``` javascript\n$( 'form[name=\"file-upload\"]' ).on('submit', function(e) {\n  e.preventDefault();\n  var file = new FormData(document.forms.namedItem('file-upload'));\n  Petstore.apis.pet.uploadFile( { 'body': file }, { requestContentType: 'multipart/form-data' } );\n});\n$( 'form[name=\"blob-upload\"]' ).on('submit', function(e) {\n  e.preventDefault();\n  var file = new FormData();\n  file.append( 'file', new Blob( [ $('#blob').val() ], { type: 'text/plain' } ), 'test.txt' );\n  Petstore.apis.pet.uploadFile( { 'body': file }, { requestContentType: 'multipart/form-data' } );\n});\n```\nIn swagger.js, starting at line 1156, when you execute it overwrites the passed body object:\njavascript\n        encode the body for form submits\n        var data = \"\";\n        var boundary = \"----SwaggerFormBoundary\" + Date.now();\n        var key, value;\n        for (key in values) {\n          value = this.params[key];\n          if (typeof value !== 'undefined') {\n            data += '--' + boundary + '\\n';\n            data += 'Content-Disposition: form-data; name=\"' + key + '\"';\n            data += '\\n\\n';\n            data += value + \"\\n\";\n          }\n        }\n        data += \"--\" + boundary + \"--\\n\";\n        headers[\"Content-Type\"] = \"multipart/form-data; boundary=\" + boundary;\n        body = data; // <-- HERE\nCommenting out that whole block then the above code works. Really what needs to happen here is that the spec mixes form parameters and a body parameter. The processing of the form parameters overwrites the body parameter. It needs to, instead, merge them.\nThe other issue here is that when POSTing a FormData object with jQuery, you have to disable jQuery's default form data processing and let the underlying XHR do it:\njavascript\n      // swagger.js line 1199\n      if (obj.useJQuery) {\n        obj.contentType = false;\n        obj.processData = false;\n        delete obj.headers['Content-Type'];\n      }\nDoes that make a little more sense?\n. Hmm, interesting. When I run the scala-jaxrs-fileupload sample app I see that form and body params are mixed. But in the version running at petstore.swagger.wordnik.com they are not.\n. Ha! Well, that makes testing complicated!\nI can't seem to get uploadFile working against the petstore.swagger.wordnik.com instance, I wonder if there is some restriction on that endpoint? I get the same error with the SwaggerUI App:\n{\n  \"code\": 400,\n  \"message\": \"org.jvnet.mimepull.MIMEParsingException: java.io.IOException: No such file or directory\"\n}\nAgainst the server running on my local instance I \"fixed\" the bug by just overwriting the api operation in the browser so that the paramType is form instead of body:\nPetstore.apis.pet.operations.uploadFile.parameters[1].paramType = 'form'\nI've updated the pull such that:\n- form and body params are not mixed\n- FormData post body is only used when useJQuery === true, since shred.js doesn't seem to support formdata posts.\nIf there is a way to test against the wordnik-hosted petstore, or a pull I can integrate to fix the bug that exists in the local version I am testing against I am happy to test to confirm that it works there.\n. Ok, thanks. I can't get it to work even using the swagger-ui form. I keep getting that 400 error. I am authorizing the API and using the \"special-key\" but still no luck.\nI'll wait for @fehguy's response. Thanks!\n. Ok, using a file with the name <current timestamp>.txt  it worked, both in the swagger-ui app and in my test app.\nHowever, looking into the swagger ui page source, it looks like the file upload is being handled by OperationView.prototype.handleFileUpload in swagger-ui.js, not by swagger.js. That function is doing basically the same thing this PR does:\njavascript\n      ...\n      bodyParam = new FormData();\n      ...\n      obj = {\n        type: this.model.method,\n        url: this.invocationUrl,\n        headers: headerParams,\n        data: bodyParam,\n        dataType: 'json',\n        contentType: false,\n        processData: false,\n        error: function(data, textStatus, error) {\n          return _this.showErrorStatus(_this.wrap(data), _this);\n        },\n        success: function(data) {\n          return _this.showResponse(data, _this);\n        },\n        complete: function(data) {\n          return _this.showCompleteStatus(_this.wrap(data), _this);\n        }\n      };\n      if (window.authorizations) {\n        window.authorizations.apply(obj);\n      }\n      if (params === 0) {\n        obj.data.append(\"fake\", \"true\");\n      }\n      jQuery.ajax(obj);\n. @aurelian Thanks for the confirmation. The pull you referenced fixes swagger-ui to use SwaggerHttp.execute, which makes sense. Still, the problem this pull fixes is in SwaggerRequest. The current way that the SwaggerRequest function processes multipart/form-data effectively stringifies all of the form parameters. If one of those form parameters is an input[type=file] or a Blob, it gets stringified:\nFile:\n```\n------SwaggerFormBoundary1411653455598\nContent-Disposition: form-data; name=\"fileToUpload\"\n[object File]\n------SwaggerFormBoundary1411653455598--\n```\nBlob:\n```\n------SwaggerFormBoundary1411653210977\nContent-Disposition: form-data; name=\"fileName\"\ntesting.txt\n------SwaggerFormBoundary1411653210977\nContent-Disposition: form-data; name=\"fileToUpload\"\n[object Blob]\n------SwaggerFormBoundary1411653210977--\n```\n. @fehguy I understand. I have only been using swagger.js from the browser. From my digging into the issue, it appears that in Shred the problem is in how it is handling the POST body. It looks like Shred requires the post body to be a string:\nIn shred.bundle.js:\njavascript\n// line 1239...\n// We're almost there. Next, we need to write the request entity to the\n// underlying request object.\nif (request.content) {\n  request.log.debug(\"Streaming body: '\" +\n      request.content.data.slice(0,59) + \"' ... \"); // <-- log message breaks with FormData object\n  request._raw.write(request.content.data);\n}\nAnd again:\njavascript\n// line 2602...\nRequest.prototype.write = function (s) {\n    this.body += s; // <-- stringifies data\n};\nI've made a couple unsuccessful attempts at string-encoding binary files to deal with this.\n. It looks like most of what I was doing here has made it into the latest versions. I am going to close this pull as it is no longer necessary.\n. Ok, I'm fine with that, too. I've already encountered such instances of incompatibility. Mostly I was just noticing the lack of browser tests. \n. Following the lead of SwaggerUI's browser tests, I started a branch that adds browser tests. I have only implemented one test related to #382.\nI see in the paths.tests config in the gulpfile that browser tests are explicitly ignored. I presume this is for speed, which is fine. So I added a new task to the gulpfile for just running the browser tests. Also, the way I have the tests configured right now it uses the built swagger-client.js, which is less than ideal. I would rather require the appropriate modules as needed, but I didn't want to put in that effort if there isn't much interest in this.\nSince using PhantomJS has been ruled out I'm going to change the issue title to simply \"browser tests\".\n. @webron yep, that branch is based off develop_2.0, thanks.\n. @webron I got caught up with some other things. I have one browser test written related to #382 and I setup a gulp task and npm script for running the browser tests. Right now the browser tests are configured separately from the other tests as I was unsure how you guys would want to wire them into the CI or other processes.\nLet me review what I have and then submit a PR so you guys can take a look. \n. Sorry about the delay on getting this pull together. Let me know if there are issues/questions.\n. Nope, I think we can close it. Thanks!\n. I wonder if the browser tests timeout is related to this: https://github.com/SeleniumHQ/selenium/issues/437\n. Hmm, when I run gulp browsertest or even mocha, as that is what it looks like Travis-CI is doing, locally, the tests complete successfully. Perhaps I don't have something configured properly for Travis.\n. Looks like that was it. All fixed.\n. @ponelat Thanks, I should have done this to begin with. I set up selenium because that's what swagger-ui was using, but you are correct, that is better for e2e testing.\n. ",
    "aurelian": "\nHowever, looking into the swagger ui page source, it looks like the file upload is being handled by OperationView.prototype.handleFileUpload in swagger-ui.js, not by swagger.js.\n\nThat confused me as well and I have a pull request wordnik/swagger-ui#486 to pass the file upload duties back to swagger-js (that's it, still using jquery http client).\n. :+1:\n. Unfortunately it means you have to write your own HTTP/s js client instead of re-using (extending) existing ones. Nice progress thou.\n. @mohsen1 will do, but maybe is worth merging master into develop_2.0 first?\n. @mohsen1 done in #266.\n. ok... fixed merge conflict and git push -f it.\n. :+1: also jquery http-client (even dependency) can be ditched in the process.\n. There was also this use case with file uploads not exactly working with shred explained more recently in #231\n. @fehguy -- it should, but haven't used it myself.\n. ",
    "sagarwasule": "Hi webron,\nI'm new to swagger, I created swagger spec for 1.2 is there any way I can migrate the spec to 2.0\nThanks\n. ",
    "lflobo": "I actually found a solution (which I'm not really proud of :-P):\njavascript\nvar _swagger_operation_do = SwaggerOperation.prototype[\"do\"];\nSwaggerOperation.prototype[\"do\"] = function(args, opts, callback, error) {\n    error = error || function(result) {\n        /* do default error stuff */\n    };\n    _swagger_operation_do.apply(this, [args, opts, callback, error]);\n}\nRegards,\nLL\n. ",
    "andresilva": "I think the problem is here. The comparison should be against \"2.0\" since the swagger version is defined in the spec to be a string (https://github.com/wordnik/swagger-spec/blob/master/versions/2.0.md#swagger-object-).\n. ",
    "slidenerd": "Cannot read property 'add' of undefined , I am getting this error in my node.js code because clientAuthorizations is undefined. It is a standard sample by Microsoft that isnt working HERE. Nope just got this error from the standard sample at Microsoft botframework HERE\n```\nError initializing DirectLine client TypeError: Cannot read property 'add' of undefined\n    at D:\\bots\\zupcoin test\\twitter\\directline_client.js:24:36\n    at tryCatcher (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\promise.js:512:31)\n    at Promise._settlePromise (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\promise.js:569:18)\n    at Promise._settlePromise0 (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\promise.js:614:10)\n    at Promise._settlePromises (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\promise.js:693:18)\n    at Async._drainQueue (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\async.js:133:16)\n    at Async._drainQueues (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\async.js:143:10)\n    at Immediate.Async.drainQueues (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at runCallback (timers.js:781:20)\n    at tryOnImmediate (timers.js:743:5)\n    at processImmediate [as _immediateCallback] (timers.js:714:5)\nUnhandled rejection TypeError: Cannot read property 'Conversations' of undefined\n    at D:\\bots\\zupcoin test\\twitter\\directline_client.js:33:11\n    at tryCatcher (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\promise.js:512:31)\n    at Promise._settlePromise (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\promise.js:569:18)\n    at Promise._settlePromise0 (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\promise.js:614:10)\n    at Promise._settlePromises (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\promise.js:693:18)\n    at Async._drainQueue (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\async.js:133:16)\n    at Async._drainQueues (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\async.js:143:10)\n    at Immediate.Async.drainQueues (D:\\bots\\zupcoin test\\node_modules\\bluebird\\js\\release\\async.js:17:14)\n    at runCallback (timers.js:781:20)\n    at tryOnImmediate (timers.js:743:5)\n    at processImmediate [as _immediateCallback] (timers.js:714:5)\nThe client object has no clientauthorization object it seems and therefore throws this error. Any ideas how it can be fixed\nvar directLineClient = rp(directLineSpecUrl)\n    .then(function (spec) {\n        // client\n        return new Swagger({\n            spec: JSON.parse(spec.trim()),\n            usePromise: true\n        });\n    })\n    .then(function (client) {\n        // add authorization header to client\n        client.clientAuthorizations.add('AuthorizationBotConnector', new Swagger.ApiKeyAuthorization('Authorization', 'Bearer ' + directLineSecret, 'header'));\n        return client;\n    })\n    .catch(function (err) {\n        console.error('Error initializing DirectLine client', err);\n    });\n```. ",
    "paulhill": "https://github.com/swagger-api/swagger-ui/pull/765\n. please push this up to npm. Thanks :-)\n. ",
    "carlosrdrz": "Why was this closed? was it fixed?\nIt says that the progress for this issue should be tracked here but I can't see any PR / commit fixing this :/\nAm I missing something?\n. ",
    "Download": "A pointer to the docs on array would help. Google brings me here when searching for 'swagger schema array of'. Apparently GitHub Issues has a lot of Google juice. Bad side effect of it is that it's much easier to find years old issues than it is to find the actual documentation.... ",
    "cava23": "How do you express that in swagger, then?\n. ",
    "Aigeruth": "@fehguy The first one was merged (Swagger-UI), but the second one hasn't been merged yet (Swagger-JS - cdnjs/cdnjs#3939). Could you check it? Thanks!\n. ",
    "JamesMessinger": "I plan to refactor Swagger-Parser to work in browsers very soon.  It's actually not that difficult to do, since all of my dependencies (JS-Yaml and TV4) already work in the browser.   As for IE8 support.... I'll have to look into that and see how hard it will be.   If it's not a ton of extra work, then sure.  :)\nMost of Swagger-Tools already works in browsers, though I'm not sure whether they support IE8 or not.  I'll let @whitlockjc speak to that\n. I just updated Swagger-Parser to work in browsers as well as Node.js.   Tested on the latest versions of Chrome, Safari, Firefox, IE, and PhantomJS.  I don't have an easy way to test on older version (e.g. IE 8) right now.  But feel free to run the tests yourself. :)\n. ",
    "mauron85": "I made patch using meld. Until it's fixed, you can require patch instead of swagger-client directly.\nrequire('./swagger-client.jsonpatch.js')\n``` javascript\nvar client = require('swagger-client');\nvar meld = require('meld');\n// AOP way of fixing issue https://github.com/wordnik/swagger-js/issues/153\nmeld.before(client.ShredHttpClient.prototype, 'execute', function (obj) {\n    meld.before(obj.on, 'response', function (res) {\n        res = res || {};\n        if (res.obj) {\n            return res;\n        }\n        var headers = res.headers;\n        if (headers && headers.normalized) {\n            headers = headers.normalized;\n            var contentType = headers['content-type'] || headers['Content-Type'];\n            if (contentType) {\n                if (contentType.indexOf('application/json') == 0 || contentType.indexOf('+json') > 0) {\n                    if (res.data && res.data !== '') {\n                        res.obj = JSON.parse(res.data);\n                    } else {\n                        res.obj = {}\n                    }\n                }\n            }\n        }\n        return res;\n    });\n});\nmodule.exports = client;\n```\n. ",
    "extempl": "Was it regressed again? \nif (contentType === 'application/json') {\n    return JSON.parse(body)\n  }\n  return jsYaml.safeLoad(body). @shockey Test is added.. @webron actual behavior is missed parameter. true works properly here, so I added workaround for false only.. @webron so without fix added test will fail with http://swagger.io/v1/pets/findByStatus != http://swagger.io/v1/pets/findByStatus?status=false. The reason it should be supported even that charset utf-8 is the default one for the JSON is a security concern: https://portswigger.net/blog/json-hijacking-for-the-modern-web. @shockey Any progress on this? As I understand, there should not be any issues with parsing for different charsets, as there should not be any for json. Can the MR be merged or is there any issue with it? \nI've come here while refactoring of the app for performance reasons, and curious, is it can be fixed in short time or should I just include fork with the fix? JSON.parse works twice faster than the jsYaml.safeLoad and for 20+ requests in total, one or two of which is big enough, performance affection may be quite big.. @shockey Great, thank you!\nBut for being able to update on this version we need to create a new release, could you do it please or is not enough for a new release?. 3.8.23 btw, right? :). Because of variable type. When {} there will be exception  on forEach it: 'forEach is not a function'\nconst {authorized = {}, specSecurity = []} = securities    \nconst security = operation.security || specSecurity\n\nsecurity.forEach. Good point. That was done due to approach I used before. Updated.\n",
    "subashkc": "are you talking about modifying the gem source code ?\n. ok, thanks\n. ",
    "albertvp": "Hi, I tried first with the latest \"version\": \"2.0.41\".\nAlso with 1.0.4 and 2.0.0. In my swagger file // swagger.js // version 2.0.39\nI thought was my dirty npm and node_modules, but I tried again in a cleaned directory doing npm cache clean first.\n. ",
    "lazerwalker": "I'm running into this same issue (using 2.0.39). Has anyone else been able to reproduce / find a solution?\n. To be a little more specific, here is the test JS script I'm running, adapted from https://github.com/swagger-api/swagger-js/blob/master/example.html:\njs\nclient = require('swagger-client')\nwordnik = new client.SwaggerApi(\"http://api.wordnik.com/v4\",\n{\n  api_key: \"VALID_API_KEY\", // I'm naturally using a valid Wordnik API key here\n  verbose: true,\n  success: function() {\n    args = {word: 'sanctimonious'}\n    wordnik.word.getDefinitions(args, function(definitions){\n      console.log(definitions[0].word);\n      for (var i = 0; i < definitions.length; i++) {\n        var definition = definitions[i];\n        console.log(definition.partOfSpeech + \": \" + definition.text);\n      }\n    });\n  }\n});\nRunning that results in the following stack trace:`\n$PROJECT_FOLDER/node_modules/swagger-client/lib/swagger.js:1533\n          return cb.redirect(transform(response));\n                    ^\nTypeError: Object #<Object> has no method 'redirect'\n    at EventEmitter.res.redirect ($PROJECT_FOLDER/node_modules/swagger-client/lib/swagger.js:1533:21)\n    at EventEmitter.emit (events.js:95:17)\n    at emit ($PROJECT_FOLDER/node_modules/swagger-client/node_modules/shred/lib/shred/request.js:454:21)\n    at $PROJECT_FOLDER/node_modules/swagger-client/node_modules/shred/lib/shred/request.js:468:9\n    at setBodyAndFinish ($PROJECT_FOLDER/node_modules/swagger-client/node_modules/shred/lib/shred/response.js:103:7)\n    at IncomingMessage.<anonymous> ($PROJECT_FOLDER/node_modules/swagger-client/node_modules/shred/lib/shred/response.js:120:7)\n    at IncomingMessage.emit (events.js:117:20)\n    at _stream_readable.js:938:16\n    at process._tickCallback (node.js:419:13)\nAny thoughts?\n. ",
    "domaindrivendev": "hey there - just wondering if there's any updates on this?\n. json\n{\n  \"Component\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"subComponents\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"Component\"\n        }\n      }\n    },\n    \"x-schema\": \"bar\"\n  }\n}```\n. json\n[\n  {\n    \"ListOfSelf\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"ListOfSelf\"\n      }\n    }\n  },\n  {\n    \"DictionaryOfSelf\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\n        \"$ref\": \"DictionaryOfSelf\"\n      }\n    }\n  }\n]\n. ",
    "brandonheller": "If I had any experience with JS testing, I might give it a try.  Like all programmers, I'm a sucker for a free t-shirt.\nRegardless of my complaining in the last entry, the fixes are appreciated - thanks.\n. ",
    "jgoeres": "Seems the URL parameter is broken in all version 2.0.x that I tried, but it works in master. Is there any chance the fix will make it to 2.0.x?\n. We want to put swagger-ui into an actual product to provide documentation of our REST APIs to customers. Our QA process will normally not allow for beta let alone alpha versions of a 3rd party lib, according to package.json, master is currently 2.1.0-alpha.6.\n. I selected the tag v2.0.24 (https://github.com/swagger-api/swagger-ui/tree/v2.0.24) and downloaded the ZIP, then used the contents of the \"dist\" folder, assuming that this is a working \"compiled\" version.\nAnything wrong with that approach?\nDoing the same thing with the Master branch gives me a working version (but alpha...).\n. The screenshot shows what I am observing: I pass a URL to the JSON document that contains my API description using the \"url\" query parameter.\nIt works when I have the contents of the current master at /apidocs/swagger-ui as you can see in the lower half of the screenshot, for any 2.0.x I tried (and I tried about 10 different versions) I only get the petstore example, the URL parameter is apparently completely ignored.\n\n. Sorry for being off topic here, I came to this issue following a link from https://github.com/swagger-api/swagger-ui/issues/729, so I thought that this issue was at least related in some way. Seems that what I considered an issue in 2.0.x is actually a new feature for 2.1.x:\nhttps://github.com/KnisterPeter/swagger-ui/commit/55a5abb9c7d26092c7531ed52965bfcebc5750f9\nI just applied the changes described in that submit to the index.html of 2.0.24 and it works.\nThank you for your help.\n. The issue I had was that I was not able to pass the URL to the swagger JSON to the swagger-ui... I noticed that it worked in master, but didn't work in 2.0.x. I assumed that this was related to the issue discussed here, but it seems that this simply because - as I learned - this is actually a new feature for swagger-ui 2.1.x.\nSo swagger-js-wise, there is no issue here.\nFor the swagger-ui topic: I applied the patch to swagger-ui 2.1.x to 2.0.x and it works for me.\nThanks for your help and sorry in cause I stirred up trouble.\n. ",
    "nmartin867": "I originally sent this pull req to swagger-ui repo. @webron referred me here. I see that there has been a little confusion about what issue this thread is addressing. So for the sake of clarity: I'm submitting a pull req which would address the issue of undefined query string parameters being appended to a url. eg ?someParam=undefined \nIf the param is undefined it should be left off of the url. If the param is undefined && required then an error should be thrown. \nI would be happy to follow this up with another pull req that includes updated unit test(s). Let me know if the solution is applicable and I will do so. On that note.. it appears that the tests would need to be served up via some web server to run the tests locally. Wouldn't Karma (or the like) be more convenient? I'd be willing to include that in a req as well.\n. Yes. Param value equal to 0 would break this. I should be using 'typeof' to explicitly check that it's defined. Boolean false could be a valid param as well. That's an oversight I'll fix it.\n. ",
    "ssreedharan": "I have created a pull request to handle the case where undefined and null parameter values are not being stripped out in the final URL request. It does not address required fields being omitted.\n. Does this have a side effect of disallowing parameters where the value is 0?\n. Yes that's the one :+1: \nAnother way of doing it is to explicitly check for null or undefined (probably using void 0 like underscore.js does to handle the case where someone has inadvertently changed what undefined means). Not sure if this is more performant than doing a typeof like you have.\n. ",
    "mpoiriert": "Sorry this is not the concern of the bug here is the updated schema:\nJSON\n{\n  \"definitions\": {\n    \"Response\": {\n      \"$ref\": \"#/definitions/User\"\n    },\n    \"User\": {\n      \"properties\": {\n        \"username\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n}\nThis is not working.\nI did do a fix for another concern (#162) but this doesn't fix this case since it's not the root problem of this.\n. This is not related.\nThe problem is in the SwaggerClient.prototype.buildFromSpec and the Model class.\nIn the buildFromSpec arround line 121\nfor(key in this.definitions) {\n    var model = new Model(key, this.definitions[key]);\n    if(model) {\n      models[key] = model;\n    }\n  }\nA new Model class is instanciate but none of the code in the for and the Model contructor take in consideration that a definition could be a reference on another definition...\n. When I run the \"cake bake\" there is lot of line removed from the file, there is probably something I am missing. I am \"new\" to the javascript development stack I'll need more help sorry.\n. ",
    "MattiSG": "@fehguy Does adding the \u201cFeature\u201d tag mean removing globals is an expected feature?\n. Great!! Will test ASAP.\n. @fehguy How's the review going?  :)\n. ",
    "johnwiesel": "any workaround currently for the support of external refs? without the external file support refs are kind of limited to smaller objects and makes code reuse impossible..\n. Looking forward to it. Thank you fehguy, your work is greatly appreciated!\n. ",
    "DavidBiesack": "yes, we'd like to use it for composition, to reuse schema instead of copy/paste (and to model property inheritance).\n. ",
    "wodka": "I just gave it a try in https://github.com/swagger-api/swagger-js/pull/264 - this seems to be working:\nyaml\ndefinitions:\n    AbstractObject:\n        properties:\n            id:\n                type: string\n    MyObject:\n        allOf:\n            -\n                $ref: \"#/definitions/AbstractObject\"\n            -\n                type: object\n                required:\n                    - name\n                properties:\n                    name:\n                        type: string\n    ListOfMyObject:\n        type: array\n        items:\n            $ref: \"#/definitions/MyObject\"\nOnly errors I see so far is that the Model is not shown in ListOfMyObject - but the ModelSchema is shown correctly.\nAlso the datatype only reads \"undefined\"...\n. Just now realized that the obj scope in used the parameter opt -> which in return is always the last one.\n-> I'll try to fix this in the same pull request because the $ref loading would otherwise only work with one entry.\n. should be done now\n. - make it work with relative paths -> it is kind of bad to have only fixed paths\n. I just changed all for..in loops to the underscorejs equivalent\n-> the test will fail on those since I cannot figure out right now how to add the underscorejs dependency. @mohsen1 can you help me with this?\n. breaks with hashtags in url\n. it was introduced in 5b60f2abe3aa3b8dc81dae82b3bf369e2ffc9d78, and not part of my change, if you want I can change it\n. this was introduced in bc8f0f68b5de91b8fc26d2433909be010d2b61a7, again not part of my change but I can change it if you want.\n. this would introduce a dependency on underscorejs - it is not yet a requirement for swagger-js and I'm not sure if I should really add it\nIf I should -> then I can replace all for..in loops in the resolver.js file\n. will remove that in the next commit...\n. ",
    "m8rge": "@whitlockjc, I think, we just need to get all schemas from allOf property and merge them all together into result model.\n. @webron This is spec-related question: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#composition-and-inheritance-polymorphism\n. @webron \n\nthe problem will come when there are conflicting schema\n\nAnswer to this question must be in spec: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#composition-and-inheritance-polymorphism\n. If developer make mistake in schema - this is his fault. This is his pain, not swgger-js developers. I am right?\nWhy we can't add support for allOf statement?\n. ",
    "cristian0": "+1\n. ",
    "mgttlinger": "As far as displaying I think a nice option would be to list the super-class/schema and all children-schemes when the used type is of the super-schema (similar to what is done with compound types). I would mark all child-schemes with \"inherits from ...\" or something in that manner. \nIn case of the used type being a sub-schema I would list every field alongside every inherited field and mark those fields with \"inherited from ...\".\n. Fixed by merge\n. The failing test does not seem to be an issue introduced by me\n. @fehguy Would it generally be better to check if there is a body in the request and then use the selected content type regardless of the http method in use, instead of whitelisting every method individually (which has so far introduces 2 bugs)?\n. Currently there is an if clause which checks the request method. If it is \"post\", \"put\", \"patch\" it sets the content type from the opts object (if there is one specified). If it is a \"delete\" request it also checks if there is a body which was introduced due to https://github.com/swagger-api/swagger-ui/issues/1435. From my commit it now also does the same if it is a \"get\" request with a body. My idea was to not check the request method at all but check if there is a body instead. \n. ",
    "jharmn": "IMO the discriminator keyword adds all the complexity to this scenario. \nFor both inheritance and composition: \n- Merge properties from each referenced schema in allOf\n- If property conflicts exist, error\nWith that in mind: I'd recommend splitting these issues up.\n1. Support for inheritance and composition with allOf\n- Seems like no issues, this could be implemented ASAP\n  1. Support for polymorphism with discriminator \n- Thunderdome tournament begins on rendering preferences, who knows how long that takes\n. To clarify: I think the request is more about $ref using files relative to swagger.yaml, without the use of http.\nContext: to state the obvious - in scaling larger API definitions (especially in microservice environments), there's a need to separate definitions into multiple files/folders. \n- Using http:// | https:// (per https://github.com/swagger-api/swagger-spec/blob/master/guidelines/REUSE.md) to resolve all related files is problematic, as different environments change hostnames. \n- During development, hosting the swagger.yaml on different servers instantly creates cross domain issues if the hosting server doesn't match the $refs in the swagger.yaml.\n- Additionally, it's difficult to deal with specs hosted in Github with forks (e.g. /repo changes to /jason). By using files references relative to swagger.yaml, hostnames+parent folders per environment aren't an issue. \nIMO ^/ is perfect and should remain, should avoid a number of path traversal risks. \nWith that in mind, paths with or without or dots should resolve\nPath Examples\n\ndomain/definitions.json#/foo\n./domain/definitions.json#/foo\n../common/definitions.json#/bar/bar\n\nSwagger Examples:\nDefinitions from a peer file\n200:\n          description: Successful responses\n          schema:\n            $ref: 'definitions.yaml#/MyResource'\nDefinitions from a sub-folder/file\n200:\n          description: Successful responses\n          schema:\n            $ref: 'specific-domain/definitions.yaml#/MyResource'\nCommon definition in a parent folder/file\n400:\n          description: Validation error\n          schema:\n            $ref: '../common/definitions.yaml#/ApiError'\nParameter from shared definition\nReally just to highlight that this would work for other $ref scenarios outside of responses ;)\nparameters:\n        - $ref: '../common/parameters.json#/apiVersionParam'\nEssentially, the current resolution looks for http or #/; when neither is present, local paths should be leveraged. The scheme/host/port of the original request to swagger.yaml would be used to resolve these relative file references. \nP.S. If the resolution of ., .. is problematic, it could be a Swagger reuse recommendation to use soft links or gitmodules for references to common schema. In other words, instead of ../common/definitions.json, a common sub-folder would be linked to another location (which is pretty realistic, as you'd likely want shared schema in a different repo). As such, you'd only need to resolve common/definitions.json.\n. It's definitely legit in JSON Schema. I sometimes wish it wasn't...the horrors I've seen :scream:\nFrom http://spacetelescope.github.io/understanding-json-schema/structuring.html: \n\nNote\n$ref can also be a relative or absolute URI, so if you prefer to include your definitions in separate files, you can also do that. For example:\n{ \"$ref\": \"definitions.json#/address\" }\n. Redoing your example based on my experience of how this works (150+ repos full of linked JSON Schema).\n\nPet:\n  properties:\n    id:\n      type: integer\n      format: int64\n    category:\n      $ref: \"http://foo.com/bar/models/Category.json\"\nand at http://foo.com/bar/models/Category.json:\nCategory:\n  properties:\n    id:\n      type: integer\n      format: int64\n    person:\n      $ref: \"Person.json\" #Note that the folder is removed; relative, not absolute file ref\nIn the revised example, $ref: \"Person.json\" would resolve in the same folder that Category.json resides in. As stated before, IMO it would be good to be opinionated about ^/.\nHowever, the dot resolution adds a slightly tricky twist to think about too.\nPerson:\n  properties:\n    id:\n      type: integer\n      format: int64\n    address:\n      $ref: \"../common/Address.json\" # This assumes that there's a peer folder to `models`, `common`\nPlus there's file + anchor resolution to think about:\nPerson:\n  properties:\n    id:\n      type: integer\n      format: int64\n    address:\n      $ref: \"../common/definitions.json#/Address\" # Assumes there are a number of definitions in one file\n. @webron definitely equivalent, some folks do the dot slash (linux-ey habits I guess), which should work in premise. \n/domain/definitions.json#/foo is a questionable approach, as mentioned before: with github forking etc, you can't always guarantee what the root directory will be.\n. @olensmar yep that's the idea. Each file resolves it's own refs, regardless where they're included from. In the swagger.yaml->Category->Person example, the $ref in Category is resolved from it's own location to find Person (as opposed to the location of swagger.yaml).\n. @webron yeah I don't think it's something not worth supporting, but if there's any issue with scope, I'd make it higher on the list to kill, that's all.\n. :beers: => @fehguy, only after :coffee: ;)\n. I have no doubt this was a tough one. I took a gander at the code, and decided I should just help quantify it in the issue instead of mangling your code (I'm not strong in Node)...glad you're performing the surgery :mask: \nLooked through the tests, this hits all the right scenarios...peer, parent, sub. Reviewing the cases I outlined before, these tests should cover it all.\nA thought: I've been fiddling with various Java, Ruby & Python-based swagger libraries in Github this week...it's going to be a long haul to get everything to support this. \nExamples in the petstore (https://github.com/swagger-api/swagger-spec/tree/master/examples/v2.0) and refinements to the spec (https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#reference-object) would certainly go a long way toward socializing how it works. \nI'd be happy to help chop up the pet store to create samples and write up some examples in the spec. The petstore samples might help out your testing effort in the dependent apps (swagger-ui, swagger-editor etc) as well.\n. FYI @fehguy created a PR with some samples to start the discussion: \nhttps://github.com/swagger-api/swagger-spec/pull/384\n. FYI @fehguy swagger-parser has external file support built in, could be helpful\nhttps://github.com/BigstickCarpet/swagger-parser\n. @fehguy FYI examples are merged in swagger-spec/master now:\nhttps://github.com/swagger-api/swagger-spec/tree/master/examples/v2.0/json/petstore-separate\nDoc updates for Reference Object next:\nhttps://github.com/swagger-api/swagger-spec/pull/387\n. ",
    "Smolations": "@webron Well, it sort of is, there is just a tiny conditional: if merging 2 properties with the same name, their schema definitions must match. From a JSON schema resource:\n\nNote that it\u2019s quite easy to create schemas that are logical impossibilities with allOf. The following example creates a schema that won\u2019t validate against anything (since something may not be both a string and a number at the same time):\njavascript\n{\n  \"allOf\": [\n    { \"type\": \"string\" },\n    { \"type\": \"number\" }\n  ]\n}\n\nThough there may be some cases where one of the schemas is almost the same as the other and, when merged, might not present conflicts for which validation fails, it would appear that, in general, overlapping schema properties would need to match in order to render correctly after a merge.\nI must concede, however, that I am in agreement with @m8rge about implementation mistakes being the developer's fault.\n. > The example provided in your reference is one example to create a schema against nothing would validate, but it is not the only one.\n@webron Totally. So while merging the schemas for use in the UI might work for many, if not most, cases, some validator would need to be written in the library and I can understand the hesitation with a lift like that.\nIn any case, as long as \"allOf\", \"anyOf\", \"oneOf\", and \"not\" eventually get implemented, I'll be happy. :smile:\n. :+1: for this. This issue is one of the few blockers keeping me from implementing swagger in my team's current project. Can't wait for it to be fixed!  :smile: \n. Oops! I meant to post this issue in the swagger-ui project. Does that project pull in this library? If not, I can re-post this issue in the correct project. :see_no_evil: \n. Wow, ultra-quick turnaround! Thanks @whitlockjc, awesome job!\n. @whitlockjc OK, so, I just got around to retrying this functionality, and I am still seeing no examples get spit out. I literally just built swagger-js and swagger-ui for an edge release (as described here). My JSON still looks similar to the above, but there is nothing rendered where the Model/Model Schema normally would be. Did it regress again? Are there tests written around this feature?\nEDIT: Just checked the merged PR and it looks like there are indeed tests around this. So now I'm just vexed that it isn't rendering, lol.\n. I also checked with a JSON string, e.g. \n\"examples\": {\n  \"application/json\": \"{ id: 1, src: 'blah/blah/blah.png' }\"\n}\n...to no avail.  =[\n. @whitlockjc Ahhhhh ok!  Yup, once I added a schema the example showed up as expected!  I suppose the only action item that could come from this excursion is to add some documentation to the swagger-spec showing how to add an example and clearly stating that a schema is required if examples are to be used.  =]\nThanks for the clarification!\n. My original interpretation was that i could provide schema || example, but that is clearly not the case. When you say \"void response,\" do you mean a response which does not return a JSON payload? Perhaps you could expound on that. \nAnyway, time has been taken in the spec to point out which properties on objects are required, either always or conditionally based on values of other properties. Given the spec for a Response Object, only a description is required which implies that any combination of the other properties could be provided and the UI should render correctly.  \nI totally get what you are saying, and I pretty much agree with you, but if I experienced confusion when I felt like I was following the spec, then surely someone else will too. Or perhaps I'm an anomaly.  :angel:   lol\n. @webron Thanks for the clarification. And to answer the question posed by @whitlockjc, I agree that it doesn't make sense for an example to accompany a void response. I suppose it amounts to common [technological] sense, I just was paying more attention to the Required text in descriptions, as well as any info in those descriptions around conditional requirements.\nAs we've been having this conversation, I believe I have uncovered a bug around this feature (or perhaps with the newly-implemented \"allOf\" support in schemas):  https://github.com/swagger-api/swagger-js/issues/459\n. Oops! I meant to post it in that project, but I clicked a link in that project to go to issue 270, and I didn't realize that issue was in this project. Sorry guys!\n. +1 for dropping IE8 support.  :+1: \n. UPDATE: After removing the example attached to the response object, I was still experiencing this strange behavior. It appears that the first \"allOf\" in a schema--including a $ref--becomes the new reference for the model in the $ref, regardless of whether or not an example is present.\n. Alright, it's good to know the current constraints of the feature. However, I removed the definition of the nested \"allOf\" property so that only the root reference in new_model2 remained and the same problem is persisting. Now the reference to the core media model seems to be corrupted because the 200 response is now displaying the same thing as the 422 response from my earlier post.\n. It seems that a short term fix would be to simply check the value of the URL and see if it matches the URL passed to swagger. If it's the same endpoint, use the current swagger config to resolve the global object. If it's different, then go ahead and make the request.\nWhether the call gets made or not, it seems clear that there is no caching mechanism in place. If a call for a resource was already made, it is unlikely that the [remote] resource would change during the current session. IMHO, repeated API calls, whether buggy/valid, should only need to be made once and cached (not just the browser cache, but some JSON store during runtime) for some reasonable amount of time.\nThanks for your update @ponelat. I was beginning to wonder if there was any actual movement on this or if I had missed something.  :smiley_cat: \n. @fehguy You are tehguy to go to to get things done!  Thank you sir!  :laughing: \n. This seems like a bad change to me. This conditional will never hit the else statement because it's already wrapped in a conditional that checks for the existence of obj.items. The original code seems appropriate, because then the entire block reads:\n\nDoes obj.items contain a $ref? If it does, then retain the resolved $ref to this. Otherwise, the schema attached to obj.items must contain the information this needs.\n. \n",
    "gaillard": ":+1: to get this working\n. The UI still seems to have this not encoding, this would seem like a pretty silly thing to not encode values the user enters in the boxes for path parameters. Is it planned to change this?\n. Hey @webron, I tried the develop_2.0 branch for swagger-ui with the same effect.\nTotally unrelated but also on the develop_2.0 branch when url into the SwaggerUi options is null it explodes, for those that are passing in a spec directly. Putting something silly in url fixes it it, I think it has to do with line 20949 of swagger-ui.js.\n. will do thanks\n. big :+1: to get this working\n. ",
    "phiz71": "would it be possible to get inspired by swagger-editor for the display?\n. ",
    "dcinadr": "This is still not working but I have found a fix that can be added to the source code.  If you place this code in between lines 491 and 492 of the signature.js file it will fix the issue.\n_.forEach(schema.properties, function(property, name){\n    model.definition.properties[name] = property;\n});. ",
    "calfzhou": "Does responses support inline schemas? I'm using swagger-ui v2.1-M1, inline schema inside responses cannot be shown correctly.\n\nMy swagger json code:\n\nBut the schema is not shown in swagger ui.\n. That would be great! Thanks!\n. ",
    "hamx0r": "FYI this is visible in the petstore example:\nhttp://petstore.swagger.io/#!/user/loginUser\nPer the respective JSON, we should be seeing a \"200\" response defined in addition to the (visible) \"400\" response:\n\"responses\":{  \n               \"200\":{  \n                  \"description\":\"successful operation\",\n                  \"schema\":{  \n                     \"type\":\"string\"\n                  },\n                  \"headers\":{  \n                     \"X-Rate-Limit\":{  \n                        \"type\":\"integer\",\n                        \"format\":\"int32\",\n                        \"description\":\"calls per hour allowed by the user\"\n                     },\n                     \"X-Expires-After\":{  \n                        \"type\":\"string\",\n                        \"format\":\"date-time\",\n                        \"description\":\"date in UTC when toekn expires\"\n                     }\n                  }\n               },\n               \"400\":{  \n                  \"description\":\"Invalid username/password supplied\"\n               }\n\n. @webron - I see that.  I assumed the Response Messages section contained an exhaustive list of response types per the \"responses\" section of the swagger spec for the operation.  Is it expected behavior to split up the location where response types are presented on Swagger UI?  I'd expect the \"200\" \"description\" (successful operation) to show up somewhere.  \nAlso, the Response Content Type dropdown isn't clear to me - it appears to be an input for selecting how the server responds, but there's nothing in the swagger spec I see to control response content type.  Perhaps these issues will be addressed in 2.1-M2.\n. Question: If i'm using Swagger UI (master) and would like to update it's\nunderlying swagger-js with a swagger-js develop_2.0 branch, what files\nought I to replace?  I assumed just replace the UI's\ndist/lib/swagger-client.js (or swagger-client.min.js) with files from from:\nhttps://github.com/swagger-api/swagger-js/tree/develop_2.0/browser.\nDoing so throws a JS error, so i'm likely doing something wrong.  It looks\nlike most fixes in Swagger UI are from Swagger JS fixes, so I'd like to\nknow how to stay on the bleeding edge most effectively.\nOn Wed, Mar 25, 2015 at 10:27 PM, Jeremy Whitlock notifications@github.com\nwrote:\n\nThis has been fixed in recent commits.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/swagger-api/swagger-js/issues/189#issuecomment-86348062\n.\n. Thanks  - i'd checked the timestamps of recent checkins, and swagger-ui looked about 10 hrs behind swagger-js, so i wouldn't have guessed.  \n\nAll the same, i'm seeing the same JS error when using what's pulled from swagger-ui develop_2.0:\nswagger-ui.js:1670 Uncaught TypeError: Cannot read property 'replace' of undefined\n\nbug report opened #322\n. Behold: swagger-api/swagger-js/pull/345\nThis is my 1st JS test ever, and it fails, but I assume this is because this pull request here is needed before test can pass.\n. So, using the online editor, i can only edit one file per pull request.  I don't see a way of merging existing pull requests, so i'm left with pulling everything to my local machine and pushing it back.  Embarrassingly, I'm not able to get this to work.  I've done this:\n```\ngit clone -b develop_2.0 https://github.com/swagger-api/swagger-js.git \nedit models.js for source and test files\ncd swagger-js\ngit commit\n    On branch develop_2.0\n    Your branch is up-to-date with 'origin/develop_2.0'.\nChanges not staged for commit:\n        modified:   lib/types/model.js\n        modified:   test/models.js\n\nno changes added to commit\n\nNot sure if this is an error in the commit\nNow push it\ngit push -u origin develop_2.0\nUsername for 'https://github.com': \nPassword for 'https://':\nremote: Permission to swagger-api/swagger-js.git denied to .\nfatal: unable to access 'https://github.com/swagger-api/swagger-js.git/': The requested URL returned error: 403\n```\nAm i denied from making changes this way?\n. Thanks webron - you're so patient and helpful!  \nI'm hoping pull #352 will cover the changes of both files correctly.  I was able to simply modify both files in the https://github.com/hamx0r/swagger-js fork then make a PR back to the official 2.0 branch - all using the web interface (no git CLI or windows GUI tools).  It wasn't clear when i started editing the codebase here that it made a fork of the whole codebase.   Still learning the how git works!\n. @dmeyers, good question!  The code changes i made in this PR make use of schema.title whenever it's present, whether from a referenced schema or not.  It appears the problem is with referenced schemas not populating the schema object attributes in the javascript code.  Fixing this will involve examining different code than that handled in this PR - perhaps a new change request should be created?\n. Oops, my mistake.   First time writing a JS test and lost sight of protocol =)\n. pull #352 supersedes this PR as it has both the change and a test for the change.\n. ",
    "mohsen1": "if you use the develop_2.0 branch it's using npm to fetch directly from current SwaggerJS#develop_2.0.\n. Per https://github.com/swagger-api/swagger-ui/issues/858 models as a tag name have the same issue\n. It's easy to wrap callback based methods in a promise. You can use Q.nfcall to use SwaggerJS with promises.\n. I like the idea of using window.fetch. It has a good polyfill too\n. There are some trailing space removal. Lets merge those too \n. @fehguy I just moved the change to here. I'm not sure what it really does. \nWhat Property.prototype.sampleValue does? Please guide me for writing tests\n. We build a convertor from 1.2 to 2.0 here\nhttps://github.com/apigee-127/swagger-converter\n. @wodka @whitlockjc is adding lodash to this project. Please coordinate with him\n. Please make this pull request to develop_2.0 branch\n. We merge to master when we release. You can use git cherry-pick to bring your commits to develop_2.0 without worrying about master and develop_2.0 not being even.\nYou would need to  create another PR and close this one.\n. This bug(https://github.com/swagger-api/swagger-ui/issues/956) is a result of bugs in shred library. \nthe parseUri function has a bug that can't parse a URI with @ in it.\n. Please make this pull request to develop_2.0 branch.\nThanks\n. LGTM\n. Thank you for this\n- please make this PR to develop_2.0 branch\n- please don't change version in package.json, we have a process for that\n- data event can be triggered multiple times. Don't move setHeader calls to callback of that event\n. Here is sample specs to reproduce \n```\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"version\": \"1.0.0\",\n    \"title\": \"Swagger Petstore\",\n    \"contact\": {\n      \"name\": \"wordnik api team\",\n      \"url\": \"http://developer.wordnik.com\"\n    },\n    \"license\": {\n      \"name\": \"Creative Commons 4.0 International\",\n      \"url\": \"http://creativecommons.org/licenses/by/4.0/\"\n    }\n  },\n  \"host\": \"petstore.swagger.wordnik.com\",\n  \"basePath\": \"/api\",\n  \"schemes\": [\n    \"http\"\n  ],\n  \"paths\": {\n    \"/pets\": {\n      \"get\": {\n        \"tags\": [],\n        \"summary\": \"finds pets in the system\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"pet response\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/definitions/Pet\"\n              }\n            },\n            \"headers\": {\n              \"x-expires\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"unexpected error\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/Error\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"Pet\": {\n      \"required\": [\n        \"id\",\n        \"name\"\n      ],\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"tag\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Error\": {\n      \"required\": [\n        \"code\",\n        \"message\"\n      ],\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n``\n. Damn English! This is an issue in Swagger UI. Let's move it there\n. That would work better since I can use third party libraries for converting JSON Schema to XSD and render it. \n. operation description. I think it'ssummaryin v1. for exapleEverything about your Petsis missing \n. \ud83c\udf7b\ud83d\udca5\n. is it 2.1 in npm?\n. Oh I missed that SwaggerJS on its own doesn't depend on jQuery. Maybestr.replace(/^\\s+|\\s+$/g, '')` ?\n. Firefox is available in TravisCI. We use Chrome outside of TravisCI and Firefox inside TravisCI for SwaggerUI. PhantomJS is known to be very incompatible with actual browsers. Sooner or later you'll hit PhantomJS limitation. I think if you use actual browser it's easier to maintain and more accurate. \n. SwaggerJS is not having a dependency to jQuery. The polyfill looks like a better option since it's not being used in any other browser other than IE8\n. Please feel free to delete my yaml branch after this is merged\n. @ponelat Since JSON is YAML you don't need to do any detection for YAML vs. JSON. Always use YAML for parsing, it will work with JSON content also.\n. I think you should provide a better Accept header. For example Chrome send  this Accept header:\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nIt prefers text/html but if server can't do that it can also work with application/xhtml.\nSo for Swagger UI application/yaml,application/json would be a fair Accept header. Although nobody knows what is the correct mime type for YAML! \n. If you add YAML first in list of accepted headers and if server is honoring headers right, it will send you YAML if it's available otherwise it will send JSON.\nI would say change that line to \njs\nthis.swaggerRequestHeaders = options.swaggerRequestHeaders || 'application/x-yaml,application/json;charset=utf-8,*/*';\n. Please throw new Error('string')\n. Please use _.isArray. Array.isArray is not supported in all browsers we support\n. Instead of for(mergeName in model.allOf){  merge = model.allOf[mergeName]; use underscore: _.values(model.allOf)\nfor..in is not safe to use. It might iterate in prototype of the object too. \nin line 15 we use for..in again. I wish we could fix that too.\n. another for..in\n. Replying this. \njs\nreturn pathParam.toString().split('/').map(encodeURIComponent).join('/')\nThe above code does exactly the same thing\n@fehguy should we merge this change?\n. That's true. \nencodeURIComponent('a/b') === \"a%2Fb\"\n'a/b'.split('/').map(encodeURIComponent).join('/') === 'a/b'\nif we decided to have an option to allow slash(/), we would need to skip encoding it. Your code skip encoding slash. My suggestion is to make that code shorter and less complex.\nBased on @fehguy's comment we need to decide if we want to skip slash in encoding and if the answer to that is yes, we should make this behavior configurable. \n. @wodka I misread your diff. Sorry about that. You don't have to change the code you didn't write but if you refactor those parts it would be nice.\n. IE issue here again!\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Browser_compatibility\n. ",
    "ddm": "I was actually confused because swagger-ui supports \"brackets\" as a collectionFormat value.\nSee here for example: https://github.com/swagger-api/swagger-js/commit/30eb4f30af13df59ca58baedf310ccfc66f18835\nThe problem when using \"myparam[]\" as a name (and \"multi\" as a collectionFormat) is that swagger-ui will actually use \"myparam%5B%5D\" in the query string instead of \"myparam[]\" if you use  \"brackets\" as a collectionFormat.\n. So the right way to do it is to put the brackets in the parameter name?\n. It seems swagger-ui does the right thing when you use \"collectionFormat\": \"brackets\"\n=> http://myhost/route/?myparam[]=first&myparam[]=second\nWhile when \"name\": \"myparam[]\" is used (with the allowed \"collectionFormat\": \"multi\") you get\n=> http://myhost/route/?myparam%5B%5D=first&myparam%5B%5D=second\n...on the current develop_2.0 branch\nThe later doesn't match the jQuery \"traditional\" convention:\nhttps://api.jquery.com/jquery.param/\nIf there is no plan to add \"brackets\" support to the swagger 2.0 spec it is weird to allow it in swagger-ui.\nDo you know how the discrepancy came to be?\n. The \"encodeQueryParam\" method responsible for the excessive URL encoding is simply:\nOperation.prototype.encodeQueryParam = function (arg) {\n    return encodeURIComponent(arg);\n};\nThe problem is: that method is actually part of https://www.npmjs.com/package/swagger-client\nBut the corresponding git repo yields a 404: https://github.com/swagger-api/swagger-client\nWhere is that code hosted now?\n. Well the thing is, the recommended method of using brackets in the name and 'multi' as a collectionFormat falls short because when using ...?param[]=first&param[]=second most web frameworks (express but also most PHP frameworks IIRC) will actually add a 'param' property to the request object, not a 'param[]' property. This means you now have a mismatch between the name of your parameter in the swagger definition and the name in your server code.\nThat makes the job of swagger-tools or other automated validation generators harder. @whitlockjc can correct me if I'm wrong here.\nMy understanding was that 'collectionFormat' was an indication of how the collection would be serialised in the queryString/path/body of the request while 'name' was the actual name of the parameter.\nSo 'multi' means that the parameter name can be repeated and 'brackets' means that [] is appended to the name to indicate a collection (with repetition adding items to the collection like with 'multi').\nI still believe that 'brackets' has its place in the spec because it's a serialisation convention that is used in both server-side frameworks (express etc.) and client side ajax libraries (jQuery.ajax traditional and probably others).\n. @fehguy  Thanks for the pointer BTW, I see that the repo URL is fixed in the develop_2.0 branch so npm will eventually point to the correct repo once it's merged into master and published.\n. I understand this should be fixed at the swagger-ui level but how do you input an array in a swagger-ui text field?\n. ",
    "birbird": "Did the bug come back?\nI have tried master and develop_2.0 branch, just use the dist directly. The bug is still there.\nThis is my swagger\n{\n                        \"name\": \"circle[member_profile_itmes]\",\n                        \"in\": \"formData\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\",\n                        },\n                        \"collectionFormat\": \"multi\"\n                    }\nAnd I input multi lines in the textarea, they are just joined with a comma.\n. I made a pull request #537 to fix this\n. Fix test break\n. ",
    "kevinconaway": "@whitlockjc I don't see this fixed in current master.\nIt looks like this check is incorrect:\njavascript\nif (cProperty.enum) {\n    html += ' = <span class=\"propVals\">[\\'' + cProperty.enum.join('\\', \\'') + '\\']</span>';\n}\nIn the case of an array, enum will be null.  The enum value is actually in cProperty.items.enum\n. Actually, it looks like the test is setup incorrectly:\n``` javascript\ncPetStore.definitions.Statuses = {\n  type: 'array',\n  items: {\n    type: 'string',\n    enum: [\n      'available',\n      'pending',\n      'sold'\n    ]\n  }\n};\n\n```\nShouldn't that be something like:\njavascript\n    cPetStore.definitions.Statuses = {\n      properties: {\n        status: {\n          type: 'array',\n          items: {\n            type: 'string',\n            enum: [\n              'available',\n              'pending',\n              'sold'\n            ]\n          }\n        }\n      }\n    };\n. > It doesn't need to inject it as type:object(statuses: type:array(with enum)) \nI'm relatively new to Swagger but its my understanding that definitions needed to contain a properties element to contain the properties, like:\njavascript\ndefinitions: {\n  Statuses: {\n    properties: {\n    // ...\n    }\n  }\n}\n\nwould you mind showing a partial of the spec and the expected results?\n\nBelow is the full spec I am testing with.  I expect to see the the allowable values for types be ONE and TWO\nYou can drop this in to the swagger editor or swagger UI to see how it renders.\njavascript\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"description\": \"Api Documentation\",\n    \"version\": \"1.0\",\n    \"title\": \"Api Documentation\",\n    \"termsOfService\": \"urn:tos\",\n    \"contact\": {\n      \"name\": \"Contact Email\"\n    },\n    \"license\": {\n      \"name\": \"Apache 2.0\",\n      \"url\": \"http://www.apache.org/licenses/LICENSE-2.0\"\n    }\n  },\n  \"host\": \"localhost:__PORT__\",\n  \"basePath\": \"/\",\n  \"tags\": [\n    {\n      \"name\": \"enum-service\",\n      \"description\": \"Service that return enums\"\n    }\n  ],\n  \"produces\": [\n    \"application/xml\",\n    \"application/json\"\n  ],\n  \"paths\": {\n    \"/enums/collection\": {\n      \"get\": {\n        \"tags\": [\n          \"enum-service\"\n        ],\n        \"summary\": \"Example with enum collection\",\n        \"operationId\": \"getCollectionValueUsingGET\",\n        \"consumes\": [\n          \"application/json\"\n        ],\n        \"produces\": [\n          \"*/*\",\n          \"application/json\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/EnumCollection\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"securityDefinitions\": {\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"authorizationUrl\": \"http://petstore.swagger.io/api/oauth/dialog\",\n      \"flow\": \"implicit\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    }\n  },\n  \"definitions\": {\n    \"EnumCollection\": {\n      \"properties\": {\n        \"types\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"ONE\",\n              \"TWO\"\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n. > if you're referring to it displaying just ONE and not both values, that has nothing to do with this issue.\n@webron  If you take the swagger def that I posted above and move the enum element out of items and in to the same level as \"type\": \"array\", you'll see that the spec is correctly modeled.  That was my read of this ticket.\nI'll create a new issue though if you wish\n. Thanks @webron! Please let me know if I can provide any more details or clarification\n. ",
    "ponelat": "@kevinconaway would you mind showing a partial of the spec and the expected results? I don't beleive the check mentioned above is meant for type:array's at all.\nAlso the test seems valid (at least from a glance).\nIt's injecting the partial as a type:array(with enum)\nIt doesn't need to inject it as type:object(statuses: type:array(with enum)) \nIf that makes sense :smile:\n. @ikitommi , support for rendered additionalProperties in the UI is still pending. As per @whitlockjc comment above. I'm sure this issue will be resolved when it we have it in swagger-ui(via swagger-js)\n. @fehguy is this done? Can we see representation of additionalProperties in swagger-js#sampleJSON ? I don't see linked commit.\n. @whitlockjc Yes it works in the latest develop_2.0 now.\n@beryozad Arrays of models will render the JSON as expandable, something like....\n``` javascript\n[\n  {\n     \"your\": \"model here\",\n      \"...\": \"...\"\n  }\n]\n```\n. It wouldn't show a string signature but an expandable widget(lack of a better word?)\nLike so.... (Note on the right)\n\n. This looks like an unclosed issue (my powers of observation are strong), which should be closed as @fehguy  merged in pluggable clients for Ajax... \nIssue that indicates this is resolved.... https://github.com/swagger-api/swagger-js/issues/239\nThe PR referenced by that issue... https://github.com/swagger-api/swagger-js/pull/428\n@webron close?\n@fehguy Can you confirm this should be closed, the previous lines show the trail of issues and the merged PR. \n. I've rebased this on top of #393 \n. @whitlockjc I've rebased and put in the original (albeit updated) html tests.\n. Thanks for pointing that out.\nclientAuthorizations is an instance method of the client (npm: swagger-client, repo: swagger-js)\nSo we're assuming that 'client' is the instance, not the constructor method - like we have in the README above. Which is confusing :)\n. I think you're right... @webron knows the spec better than I (better than anyone?) but there seems to be an inconsistency of what works and what's in the spec.\n. #### tl;dr\nHere is an app, and the output.\nhttps://gist.github.com/ponelat/534088a33ab5656cea7d\n\nglobal produces/consumes works like we expect.\nGlobal is overwritten by operation specific, and then defaults to application/json.\nIn the particular case of the petstore spec, under /pet/{petId} we have a produces array, with application/xml being the first.\nhttps://github.com/ponelat/swagger-notes/blob/master/specs/petstore.json#L254-L257\nNow according to our logic this is the mime type we want to set as headers['Accept'] when executing our operation - getPetById().\nOnly we don't want application/xml because our operation can't process that - I beleive\nHere is the root of the issue.\nhttps://github.com/ponelat/swagger-js/blob/develop_2.0/lib/client.js#L366\nWe're not overriding the default, and the default doesn't work :(\nAm I making sense?\n. I've dug deeper, and this is minor.\nWhat I'll suggest (and perhaps put up an issue) is for the default consume/produces to be application/json if consumes/produces has one and obviously respecting the chain of defaults.\nCurrently we default to the first index when we default to an array of consumes/produces.\nsomethings like this...\njavascript\n// Not production code, names are for clarity\nvar produces = arg.produces || operation.produces[0] || global.produces[0];\nInstead of defaulting to produces[0], I'd like to default to application/json if it exists.\nI'll close this. I don't know how to get xml data, but that's my issue :D\n. When are you getting this? It does look faulty, but some context would be helpful :D\n. Thanks, I'm going to take a look at this a little later. \n. The line you've shown isn't as erroneous as it first appeared, although where this error is coming from is a bit of a mystery to me - as all references seem to be guarded.\nisUndefined should catch before looking beyond that with the || operator.\nAs the error only occurs in a faulty spec, I'll revisit this at a later stage. \nThere are some issues with the $ref property, so some refactoring may occur, which may incidentally solve this.\n. @fehguy I was going to, then realized they'd be slightly intense. I can get at it on Monday.\nI've added comments to those that need tests, as forcing errors at those locations didn't break our test runner :C.\nI'll be writing unit tests for these, on the invoking methods.\n. I'm still working on the tests for this, I need clarity on two things...\n- One do we have browser tests? The only thing I can see is this.. https://github.com/swagger-api/swagger-js/blob/develop_2.0/browser/index.html\n- Two Why do we have fallbacks for response.obj (namely we try to parse response.data and response.statusText if response.obj isn't an object) ? \nI'll be researching into this, but thought I'd let you know where my head is at.\nRe browser tests, if we don't have, perhaps we could use karma + browserify transform on the existing tests.\nOn another note, swagger-client is called in the mock server (which is called before each test) causing my initial test to fail in the beforeEach hook. As far as I can tell, swagger-client is only called for some sort of macro functionality @whitlockjc is that needed in the mock? Over here ... https://github.com/swagger-api/swagger-js/blob/develop_2.0/test/mock.js#L90\n. Superagent has tests. Now to test for jquery...\nAlso I cleaned up a little around the expected response of from SwaggerHttp.\nWe were redundantly trying to parse data from the response AFTER SwaggerHttp had tried. \nThere should be no cause for this, if SwaggerHttp failed... what other info is there to parse the files?\nI see that Travis is failing on timeout's in the browser tests.... I'll have to look into that :/\n. For starters, since no Accept type is requested(you can ask the server for the format of the response...xml/json/etc) it defaults to the first one it can find... which in this case is application/xml. So obj will be empty as we don't parse xml into the system.\nTo help in this particular case, just request application/json and you should see a populated obj...\n``` javascript\nvar swagger = new client({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  success: function() {\n    swagger.pet.getPetById({petId:7},{responseContentType: 'application/json'},function(pet){\n      console.log('pet', pet.obj);\n    });\n  }\n})\n```\nBUT I don't see a statusText when using application/xml, which should hold the response xml, so I will be looking into this.\n@webron there is a bug with the node.js client, works fine in a browser (tested minimal setup)... application/xml doesn't populate the .data or .statusText properties. New issue? Probably update the readme as well, 'cause the above caught me out as well at some point. OR we can try to default to application/json if it is available (ie: it's in produces)\n. @prashanthmadi let us know if you came right. We've since updated the README.md\n. @fehguy the only possible way to do so is via the authorization field. But we require it to be an instance of SwaggerAuthorization. Which the user has no way of creating, as it isn't exposed. Much simpler would be to create the instance from a hash, no?\nApiAuthorizationKey and such are exposed by-the-way.\n. You can, so long as you don't provide a url which would trigger initialize from within the constructor.\nHowever the crux is still within initialize which is where SwaggerAuthorization is instantiated, unless we define it as an option.... but we must define it as an instance of SwaggerAuthorization which is the original argument.\n. That would be much better than ....\njavascript\nvar client = new SwaggerClient({\n   authorization: new window.SwaggerAuthorization(), // assuming we expose it\n   url: false\n});\nclient.clientAuthorization.add(...);\nclient.initialize({url: ... });\nPerhaps better still? \njavascript\nvar client = new SwaggerClient({\n   authorizations: {  // will become a SwaggerAuthorization object\n     api_key: new ApiKeyAuthorization(...),\n   }.\n   url: '...'\n   success: ....\n});\n. this is true... the original argument is about have to create an instance of SwaggerAuthorization... which isn't even exposed. It would be much easier to create a hash, that becomes a SwaggerAuthorization instance.\n. So where is SwaggerAuthorization :D\n. Yes indeed... But that would required more knowledge of the system.\nTake a look again at this flow (the second one), and see if it isn't simpler ... https://github.com/swagger-api/swagger-js/issues/445#issuecomment-107972056\n. Bingo! We can have a helper function that runs through the hash, making sure each one gets its chance to manipulate the request. \n. @mrhanlon We really appreciate the efforts that drove us here. I managed to port over the test your wrote, just let me know if I'm hitting the right spots :D\n. On another note, \nI'm using http mocks instead of a dummy server.\nWhich I feel is much simpler to maintain... I first used nock (quite nice, but only works in node.js) then migrated to faux-jax which works in both node.js and the browser.\nWhat happens is faux-jax will replace the core methods used to make requests (http.request for node.js and XMLHttpRequest for the browser) thus allowing us capture the requests and return what we like... including status code, headers, etc.\nIt also allows us to check the actual request sent.\n. @whitlockjc I haven't replaced clientAuthorizations as I'm not sure if it'll break compatibility. I felt the above was a good compromise.\n. @joeheyming could you also make sure you're working on develop_2.0?\nSo that the PR would be develop_2.0 -> develop_2.0\nIf you're unsure, just look at the commits and make sure yours are the only ones in the PR.\n.... Also (i just had a look at your commit) you've just changed the built file\nHere is a quick rundown....\nmake sure you're on the develop_2.0 branch\nfind the source file (under lib), that's giving you a headache, change it\nbuild the files, like so...\n``` bash\nnpm install \nif you have gulp installed globally...\ngulp\nif you don't then ...\nnpm run build\n```\nsee if it works. or add tests.\ncommit your change + the built files\ncreate a PR against swagger-api/swagger-js on the develop_2.0 branch\nThanks... seems like a lot of work, but should be under 8min :D And if you get stuck, I'll be around.\n. Not at all! Github can be a pain sometimes... we're glad for your assistance :D\n. @joeheyming yes, you need build before commit, then push. This is for both swagger-ui and swagger-js in general\n. @joeheyming that's ok, it can be a 3rd party lib. I had hoped we'd solved it with the npm-shrinkwrap file, but there may still be some commits, that make things bounce around a bit\n. Never mind last remark, I found the correct oAuth URL\n. Awesome I love the tests! yay.... but could you build the files and commit them :) \njust run gulp. It'll build + test.\n. PS: you don't need to create another PR! Just push any changes to your branch and this PR will get updated automatically.\n. @webron this is a regression bug (someone removed the uglify)... we can't reasonably expect to have a file called swagger-client.min.js that isn't minified. \n. @indolering I'm afraid that form isn't supported... although perhaps it would be nice to.\nHere is an example of how to pass in auth layers to the constructor...\njavascript\nvar swagger = new client({\n  url: 'http://example.com/spec.json',\n  success: function() {},\n  authorizations : {\n    easyapi_basic: new client.PasswordAuthorization('<name>', '<username>', '<password>'),\n    someHeaderAuth: new client.ApiKeyAuthorization('<nameOfHeader>', '<value>', 'header'),\n    someQueryAuth: new client.ApiKeyAuthorization('<nameOfQueryKey>', '<value>', 'query'),\n    someCookieAuth: new client.CookieAuthorization('<cookie>'),\n  }\n});\nWe're working on making this documentation more accessible.\n. Could you elaborate? \nWhere are you looking for success/fail callbacks?\n. I think Promise-like functionality is necessary. Especially for error checking. \nIt's on the cards, and we'd welcome any PRs to that affect. \n. +1\n. Thanks for spotting this...\nLooks like the ordering is wrong, should be..\njavascript\nstatus = !!auth.apply(obj) || status; // ensures auth.apply gets applied each time.\n. I have a WIP, but its a little too WIP-like to use... will try to get it out there soon\n. duplicate of https://github.com/swagger-api/swagger-js/issues/251\n. @gconst02 you can put both types as parameter data, swagger-js will pluck out the 'path' params and make sure the URL is correct.\nso it should work, and if it isn't you can always see what would be sent, by mocking it.\njavascript\nswagger_client.apis.users.resetPassword({\n  ResetPassword: 'something',\n  password: 'something',\n  repeat_password: 'same something'\n//....\nto mock just add the option, mock: true\njavascript\nvar mockRequest = swagger_client.apis.users.resetPassword({ \n  { /* data */} , {\n  responseContentType: 'application/json',\n  mock: true\n});\nconsole.log('mockRequest', mockRequest); // to have a look\n. If by offline you mean a file from the filesystem..\ntry this..\n``` javascript\nvar some = require('./local.json') // note the ./ which means it'll look for the file within this directory\nvar another = {\n   swagger: '2.0'\n//....\n};\nvar client = new SwaggerClient({\n  spec: some // or another\n  // ...\n});\n```\n. Thanks for the contribution, javascript can be a pain sometimes :smile:\nWe've got a pending pull-request that deals with this...\nhttps://github.com/swagger-api/swagger-js/pull/482\nIt should fix this. \n. @NicholasRBowers \nThanks for looking into the mime types.\nWhat we ended up doing is to try and parse the contents of the response, regardless of mime type (as @fehguy says... servers lie).\nWhile this is fine for client side, there might be implications when requesting the file (if we ask for a yaml file, but have Accept: json). Haven't bumped into it yet, but prevention is better than the cure :wink:\n. @mohsen1 thanks, that's what we do (use js-yaml for everything that is)\nI believe that @NicholasRBowers is referring to the Accept header sent? While this won't affect the client (we parse whatever, see what sticks) I'm not sure if there are any implications for the server.\nFor example, if I send Accept: application/json to the server, but I want a yaml file ... the server has the right to send me json, no? Probably won't happen (custom mime types on a swagger spec? too much effort ;) )\n. Hmm, is this for a swagger.json file? It should have Accept: application/json when requesting the spec... the header (I believe) is the default header for Chrome requesting a page.\nWe have default Accept header for requesting specs (swagger.json)...\nhttps://github.com/swagger-api/swagger-js/blob/master/lib/client.js#L118\nI can't believe know-one has settled on a mime for yaml... feels like the dark ages :wink: Thanks for the link\n. @NicholasRBowers so, it would seem I mis-understood.\nI had a look around for the code you wanted to change, and realized it's not ours... its a 3rd party lib called superagent (http lib)\nIt has it's own parsing strategy, but it's based on the incoming mime (Content-Type: some/mime)\nHowever, we are by passing that - for the reasons you suggest ( by using req.buffer(false) or something)\nCan you validate your yaml ? Try using swagger-tools \n. If it's not getting bypassed, it could be that the server is sending Content-Type: application/json . Could you confirm that? You can do so by using the network tab in your browser's debugging tools.\nIf it isn't working for you then something is wrong :smile:\nCould you send some some more details? Like a minimal failing example if possible (as I can load a yaml file from swagger-ui, in the URL bar on top)\n. I'll see if I can't find it, but you can try grepping for it (text search) on the files under src/js\n. I think I know why.... it might not be part of swagger at all, it looks like superagent (http lib)\nWe don't use JSON.parse in swagger, we've replaced it with js-yaml (which handles both json and yaml)\nhere is your line...https://github.com/visionmedia/superagent/blob/360ca37c0ffa775f3e788a39a109584f1accc286/lib/client.js#L182\n. should it warn or throw in such cases? Perhaps we can have that as a setting in initial params, for example... {strict: true}\n. ok, shouldn't be difficult. We have a global map of  operationId -> count. \nBut this would be a mutation of the spec, right? Can we avoid that if possible.... it'll depend out what the use case for unique operationIds are.\nIs this specific to swagger-js... or is it about rendering in swagger-ui\n. ok. would users interact with the mutated operationId it... or is it just internal? I just want to make sure there isn't a friendlier approach. For instance combining path + operationId in transactions.\nIf there isn't, we can just add a note of this mutation... we could keep a list somewhere.\n. As far as I know no-one has actually written any code... ping @dalbani ?\n. There are some legacy ties to jQuery's ajax (which you've seen in the PR). superagent is the primary one, but it can be lacking at times. There wasn't a way to make an OPTIONS call, nor to add withCredentials=true.\nBut this is a good time to raise the issue of removing jQuery entirely. What we can try to do so over the next week (or so), and collect any outstanding issues against superagent, and then deprecate jQuery \nThanks for the PR \n@webron will know how to make this deprecation work\n. Regarding '$' https://api.jquery.com/jquery.noconflict/\nTLDR;\njQuery has $ as an alias, but it doesn't necessarily if someone runs jQuery.noConflict(). Which restores '$' to it previous value.\n. So instead of enforcing '$' to be an object, we deprecate (and dummi-ify) the \nSuperagentHttpClient.prototype.execute = function (obj) {\nsomething like...\n``` js\nJQueryHttpClient.prototype.execute = function (obj) {\n// normal code...\n}\nif (!(window || {}).jQuery) {\n  JQueryHttpClient.prototype.execute = function (obj) {\n     throw new Error('Warning: You need to load jQuery onto the page, before you can use it in Swagger-JS')\n}\n}\n```\nSuch that users who add useJQuery but don't load it on the page, get some sort of feedback \n. Thanks, that does look much better... I think this should be merged..\nDo you think we should consider escaping headers as well? https://github.com/kwizzn/swagger-js/blob/single-quotes-in-curl-output/lib/types/operation.js#L864\n. Ugh... html diff'ing is no man's idea of fun... that needs to be resolved, so that we don't hinder PRs.\nI must just figure out, which is the correct one... expected or actual :smile:\n. This is where failing test comes from... https://github.com/swagger-api/swagger-js/compare/7f0f8c500812...cbc18795a981\n@fehguy, do you know what's happening there?\nwe need to drop raw html diffing, or at least add a clearer diff. \n. Seeing as the its just the html tests, failing... I'm happy to merge, @fehguy ?\n. @kwizzn thanks for the PR :smile:\n. we should escape all of 'em... no reason not to. Mind making the change, @kwizzn ?\n. I imagine the issue stems from the two headers ( the one you're adding and then one we're adding ) having two different cases. Such that both headers are being added, resulting in *, * in the final browser request.\nI don't see any explicit mention of those headers in swagger-js@2.x ( nor 3.x)  but I imagine it could come from some third party. @kchauhan-muhimbi would you mind pointing out the line you commented out? it would help debug this.. thanks.. @bodnia, I'll give that API a bash and see if we can find a workaround.. see: https://github.com/swagger-api/swagger-ui/issues/2793. Yup that solves this issue. It doesn't solve the issue of adding auth to fetching the spec. That's tracked elsewhere.. lgtm. \n@buunguyen do you have an issue to update swagger-ui, removing baseDoc?\n. @buunguyen you're right. My apologies. @webron they are in another PR...https://github.com/swagger-api/swagger-js/pull/988 ( along with the real reason they failed... globals! )\nI can make it a minimal change if required. The above PR is a general solution. But it would be tomorrow morning. Or we can revert the PR in master.... since I don't think Tony needs it this very instant.. @buunguyen go ahead and revert. @fehguy your swagger: 3.0 issue was a cache on the http://petstore.swagger.io/v2/swagger.json url. You can just clear the cache to run your test. But this is a general solution.. Also removed fetch-mock...  we're only testing in nodejs ( which doesn't have fetch ).. Would you like this PR remade, with the changes that were reverted in master?\nAs to fetch-mock... I found it wasn't needed in the node tests... since xmock mocks out http, which is what was used in nodejs. To make the tests work in a browser requires much broader changes ( where fetch will be used natively ).. Will try to get to this over the weekend. Will try to get this revised over the weekend!. I clearly lied. Will try to wrap this up soon as I can.. Sorry for not getting this out there... . ~~UPDATE:~~\n~~Changed the order, to respect the user override requestContentType~~. you're right.\nIf the user does feel like overriding this, they should use an explicit header. requestContentType does only make sense for when the client has a body.. @buunguyen I believe all hold true, and yes - I also agree with cacheing per instance.\nThe importance of this issue is to make sure these cases are tested and accounted for.. We cache resolver requests for the lifetime of the browser page. That is the primary bug. We'd also like to invalidate pieces of the cache, but that's a nice to have... and we can already do that in some ways.\nWe also see this in failing tests... where we cache results globally ( there was an outdated PR that tried to fix that ). To solve it there, we can just dump the cache after test runs.\nI don't think this is a high priorty, probably P2? @webron . I think let's remove it altogether.\nThere may be a script in package.json the uses it. But its purely for convenience, and there's no need to burden build pipelines as a result.\n@buunguyen @shockey are you happy with removing it?\nIf so, the only addition I'd ask for in this PR is to remove any package.json scripts that use node-inspector.. I forgot to test FormData with this... probably need to add a test + ensure that didn't break. :(. So yeah... we'd just need to export the bundle and give it a UMD wrapper ( at least we're doing the latter ;) )\nWe've never really needed it, but that's not to say its not useful.. So the issue was Failed to print error: regeneratorRuntime.async is not a function when loading this lib into a react-native app.\nI think its because we're missing the regenerator runtime... all apps up to date have included babel-polyfill and so this was mostly hidden from us. (@webron in theory this should affect any browser that didn't include its own babel-polyfill )\n@jpoutrin a possible workaround is to just include babel-polyfill \nBut we'd need to find a fuller solution to swagger-js, as we shouldn't be mutating globals in a lib. Its just bad :). @bodnia\nHow are you testing? With swagger-ui only? Since when I test with swagger-editor, it still fails..\n\nI can't recall if there is another issue ( in another repo ) where this is tracked. Could you link, if there is?\nExpected: Content-type: multipart/formdata\nActual: Content-type: application/x-www-form-urlencoded. @bodnia, so there won't be a dropdown for formData yet ( its a known thing, and won't be implemented right now ).\nHere we default to application/x-www-form-urlencoded, instead we should default to multipart/form-data since its in the list of consumes. Not necessarily the first item in consumes.\nLet me know if you have too much on your plate for this.. Merging, please undo if that breaks protocol.\ncc @webron @buunguyen . Hey @shockey \nThe edgecase ( where I bumped into this ), was in swagger-ui's try-it-out feature.\nIt would die, if the operationId of the endpoint had spaces or dashes. . Yup #1070 looks like it'll do it. \n. @webron @shockey \neven though the main issue is fixed. This PR addresses an inconsistency. Sometimes we update the operationId ( ie: when there are duplicates ). This PR will ensure we always update operationId.\nI'm not the biggest fan of updating it at all, but I understand its required for compatibility ( amongst reasons ). If we do update, we might as well always do it.\nSince I no longer require this. I'll leave it up to you guys to decide.. @yoihito you can use the requestInterceptor, it allows you to mutate the request before it flies out.\nExample: \n```js\nconst swaggerJs = require('swagger-client')\nswaggerJs({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  requestInterceptor(req) {\n    req.headers['content-type'] = 'application/josh'\n    req.url = 'https://httpbin.org/get' // Change the URL entirely\n    return req\n  }\n}).then( client => {\n  client.apis.pet.findPetsByStatus({ status: 'sold' }).then(({body}) =>  {\n    console.log('body', body) // Note the headesr\n  }).catch(console.error)\n})\n```. yes, all plugins are applied to all paths. \nI'd like to see a new specmap 2.0 ( its been talked about ), not sure if this is reason enough for it. Just note, that we can't guarantee a fully resolved spec if we limit it to a certain depth ( it'll pass, it just might not be resolved ).. A possible \"workaround\" is to simply ignore the error messages. But that isn't exactly desirable.. @RHackrid  how are you showing the errors? Via swagger-editor/swagger-ui, or custom?\n. Thanks @dballance !\nJust adding my 2c here...\nNot sure how the shallow merge will differ ( in performance, or effect ) from a deep merge, if the children props are all different? If the props are the same, but there value is the same ( worst case for deep merge) then I understand the perf hit, and we can ( should ) optimize for that where its safe to do so.\nWe're looking at all sorts of performance boosts, so happy to have someone putting their eyes and time on it too!\nPS: I'm not very active on this repo, but will try and respond as often as I can!. Aha! That is interesting!\nThanks for taking the time to explain @dballance.\nSo deepExtend will always fully traverse the object, whether or not we need to merge it. This gives us the a full/deep clone. Just trying to use my own words, to understand it.\nYeah, I don't see why this can't land. Added a comment, that might add a touch more perf. ( instead of dismissing the patch outright, if just one prop conflicts ).\nThanks for the efforts here! @shockey I imagine we'd still need a test here, to ensure deep merging occurs when we need it, or is that in the suite already?. lgtm.\nThanks for circling back @dballance !. @webron can you confirm the above definition is valid? It has allOf and properties on the same level.\nI'm aware of code that accounts for this case.\n. I preferred the delayed responses, from the more westerly timezones. . Its in the title @webron . The chunk of text near the top of the page. \n. Thanks @shockey  this fixes my issue!. Seeing similar behaviour, created a test case... tried to go down the rabbit whole, and kept finding places where a patch was being used, even though it was dead ( it pointed to a location that doesn't exist anymore ). Tried several things before running out of time :/\nFailing test:\nhttps://github.com/swagger-api/swagger-js/pull/1339. As far as I can tell (looking at lib/type/model.js ), \"Inline Model\" is just decoration? Which is fine...consistency is king. \n. Abstraction, this is where we cache the model for de-referencing. I wouldn't want that logic inside of operation#getType... And in the commit below it's used to return the full string ID, further abstracting things.\n. I agree, I'm not much a fan of SwaggerAuthorization... but I do need something to do the following.. https://github.com/swagger-api/swagger-js/blob/master/lib/auth.js#L23-L74\nAnd as a namespace, its fine. We won't be exposing it.\n. I would do the reverse.\nurl = url || baseDoc with a note saying baseDoc is deprecated.. @buunguyen ok.. could you point to the place where the code lives, perhaps?. @saharj get editorconfig plugin for you IDE... it'll help remove these little line things. \n. @webron is this the desired behaviour?\nShould global parameters get merged with operation-level parameters? \nJust want to clarify this point... since we've done both in the past.. @saharj I don't think that second part is covered in this PR\nso...\nyaml\nparameters:\n  - name: josh\n    in: query\n    type: string\npaths:\n  /one:\n    parameters:\n    - name: sahar\n      in: query\n      type: string\n    - name: josh\n      in: query\n      type: number\n/one.parameters should have two parameters...\nyaml\n- name: sahar\n  in: query\n  type: string\n- name: josh\n  in: query\n  type: number\n      . ie: what @webron said. sorry, that's an artifact of the way I tried to recover the files. I'll fix that in the morning.. yeah... also an artifact. Apologies.. Such that we can mock, without having to provide .json\neg\njs\nhttp({ one: 1})\n// vs\nhttp({ json() { return Promise.resolve({ one: 1 }) })\nGiven that we're using xmock throughout... we don't strictly need mocking the http function anymore. I'll revise this.... The spy in this case is the createSpy() exposed in expect\nIts to allow putting in a mock'd version of http ( as referred to in previous comments ).\nThis is here, so that we don't need to provide a .body property on what the mock'd  http method returns. Given that this will be rarely used. I don't mind removing it. It was a workaround to start with... now that I know we only test in nodejs... we can continue to use xmock. cacheing is hard.\nI don't mind putting it inside specmap... as to the cache. I would prefer we avoided a global. At the same time, I don't know of the performance of recreating the cache each time.\nYour call on that.. should not? I see content-type lower down. I would like to see a test, where no contentType is added. As one of our current issues, is that GET requests get a content-type: application/json. And I'd like to make sure that doesn't happen in swagger-js ( I'm pretty sure it doesn't, but still ).. ok... but this test includes a requestContentType. If that is present, it should always set the header.. With the issue in https://github.com/swagger-api/swagger-ui/issues/2909, there is likely a requestContentType being passing in from swagger-ui. And that shouldn't happen. I see that. But we shouldn't :stuck_out_tongue: if there is a requestContentType we must use it. Its an override provided by the user ( or swagger-ui in our case ).. you're right @bodnia it does only make sense if there is a body. The user can override the content-type header in other ways, if need be IIRC.. Would it be worthwhile to deepExtend the non-conflicting props, and assign the missing/conflicting ones?\nThis would replace the if(hasConflictingProps) and the deepExtend call.\njs\n// if(hasFreelyNamedFields(patch.path) { ?? Something that looks at the path array to decide if its a freely named field.\n// Do NOT deeply clone all object values, only those that need to be deeply merged.\nfor( const key in newProps ) {\n  if(currentProps.hasOwnProperty(prop)) {\n    deepExtend(currentProps[key], newProps[key]) \n  } else {\n    Object.assign(currentProps[key], newProps[key])\n  }\n}. ",
    "vbeffa": "Maybe - I just did a web search on the problem I was having and found another issue for this project. Should this be in swagger-core?\n. OK, I'll open it there instead. Thanks.\n. ",
    "bajtos": "As a workaround, we are removing the trailing slash from baseUrl for now: https://github.com/strongloop/loopback-explorer/pull/84\n. Sorry, this should have been opened in swagger-ui repo: https://github.com/swagger-api/swagger-ui/issues/819.\n. Ping, could one of the maintainers review this patch please?\n/cc @fehguy \n. Thank you for landing the patch, no need to apologise :)\n. @webron thank you for the response.\n\nwhen we defined deepObject in the spec, we explicitly chose to not mention what happens when the object has several levels in it, but in our conversations we went with 'not supported'.\n\nFair enough. Can swagger-js reject deeply nested objects with a descriptive error then? Right now, swagger-ui is silently ignoring parameter values set to a deep object. I'd like it to display an error explaining the problem to the user.\nWould you accept a patch adding such validation logic?\n\nIf you're looking for supporting that use case, it needs to be addressed by the spec first.\n\nMakes sense. I have very little experience with the standardization process. What is your opinion - how likely will such proposal get accepted? How long would the process take? Is it a matter of weeks, months or years?. Thank you @webron. I opened a new ticket to enhance the spec, see https://github.com/OAI/OpenAPI-Specification/issues/1706.\nI'll try to find some time to fix swagger-js in the next few weeks.. ",
    "slonoed": "+1\nDont want load configs in production.\n. @DinisCruz, I found this https://github.com/signalfx/swagger-client-generator/\nUse it in my project.\n. ",
    "DinisCruz": "@fehguy  Sounds like it, can you point me to an example?\n. Great, thanks\n. ",
    "marcellodesales": "+1 for that... \n@mohsen1 Do you have examples on how to do that? I'm still learning about promises... \nI'm trying to use https://github.com/petkaantonov/bluebird... \n. I got it using Bluebirds\n``` js\nvar SwaggerClient = require(\"swagger-client\");\nfunction IntuitHttpClient(url) {\n    return new Promise(function(resolve, reject) {\n      var swagger = new SwaggerClient({url: url, success: function() {\n        resolve(swagger);\n      }});\n    });\n}\n```\nCalling the API should be something like:\n``` js\nvar url = \"http://petstore.swagger.io/v2/swagger.json\";\nIntuitHttpClient(url).then(function(swagger) {\n  // HTTP GET request. Taking HTTP_PROXY or https_proxy (or any case)\n  // https://github.com/swagger-api/swagger-js#calling-an-api-with-swagger--nodejs\nconsole.log(swagger.apis);\nswagger.apis.pet.getPetById({petId:1}, function(pet) {\n    console.log(pet.obj);\n  });\n});\n```\n. @martinwoitzik you right... That would be great... I would definitely use it!\n. @webron @fehguy When will this be released??? Desperately need this...\n. Thanks @fehguy... Exactly what I did!!! :) Thanks a lot!\n. There are a couple of problems with my Auditor above:\n- The port number is not resolved properly: The log formatter is not properly getting the port number https://github.com/thlorenz/bunyan-format/blob/master/lib/format-record.js#L294-L298\n- The FULL URL for the VERB RESOURCE HTTP/1.1 string is NOT being added.\nNeed to get this done....\n. Closing to merge to 2.1.6 branch\n. @fehguy I will take a look at it and make sure it works in our environment! Thanks a lot for considering it!\n. @fehguy Can you consolidate this branch? \n. @fehguy perfect! thanks!\n. @fehguy I cannot understand how this would solve #599 ... Could you please address the questions above and add a test case to support your PR? Thanks! \n. How would I get access to the req, res, and err objects to support #599 ???\n. Can you please add a supporting test case for #599 as you claim this patch solves for it??? I still cannot see how the API has access to the lower-level req, res, and err objects.\n. ",
    "indolering": "I would just like to point out that the Fetch API is slated for ES7 and its syntax will likely codify how responses are handled using promises.  As much as I want Promise support ASAP, it's probably best to wait until the Fetch API syntax has stabilized so we can emulate it correctly.\nBut, FWIW, we will probably have to wait that long anyway since we have to wait for IE 11 to die before Promise support is universal.  Github should have an IE glue-eater emoticon :rage:.\n. @mohsen1 That would make it easier for you to produce a browser library without all of the weight that Browserify adds (50% of your minified codebase).\n. I'm strongly against any non-standard promise implementations.  PouchDB got rid of Bluebird because it encourages developers to use a non-standard API that they can't use anywhere else without importing Bluebird anyway.  Overtime, Bluebird's popularity will fade and we will be stuck packing around an extra 70KB (minified!) of code that no-one uses.\n. @martinwoitzik Does Q introduce a non-standard API?  I guess I would be okay with it if we only showed the standard API in official documentation and include a warning that Q will eventually get removed.\n. @mb21 basically or does?  I thinks it's fine to include it if the syntax conforms to the upcoming standard and it's clear that we will rip it out as soon as it's feasible to do so.  I would support removing the usePromise flag if we were using a polyfill that adhered strictly to ES6.\n. After trying to write some error handling code, I'm strongly for pushing this through ASAP.  I think we should add a warning regarding any non-standard behaviors, but I'm fine with it in the short term.\n. @jacobrask I'm guessing that part of the problem is the need to simultaneously support multiple callback styles.  Q can handle JQuery deferreds and I assume that is how they added support.  I agree native promises are the right way to go but that requires a lot of effort.\n. This feature* has been pushed to ~~production~~ NPM, should be closed.\n. > OK we will update the documentation on this but...\nWhere is the documentation?  Perhaps you could start a Github wiki?\n. @zub2 I guess just pile it all onto the README.md?\n. @fehguy I'll add a BasicAuth example, me and a coworker spent a lot of time trying to track that down.\nFWIW, if it won't fit in the README StackOverflow is a good place for random info. I spent a lot of time trying to figure out how to pass in auths to the constructor and documented it on SO.\n. If the README is going to serve as the sole source of official documentation, it needs better structure.  I propose that we maintain the \"Calling an API with swagger + node.js!\" as a quickstart at the beginning of the README followed by more formal sections:\n- Initialization\n- Authentication\n- Calling \nSince the wiki is enabled, can we just use that as a scratchpad?  We can delete it later, but I don't have a cookie authentication to test against and it would be easier to write and edit everything there before submitting a PR.\n. Oh, I misread the PasswordAuthorization function as simply returning an object.  This feature isn't worth the effort, just document that construction.\n. I actually ripped this out of my code because it forces an OPTIONS request when fetching the Swagger spec.  This should be added to the documentation.\n. Whenever you call a function, like client.user.getUserInfo({user:\"indolering\"}).  There are a few ways to do it, but since you probably want to support promise/Fetch/.then syntax in the future, you could just drop it in after param object:\nclient.user.getUserInfo(\n  {user:\"indolering\"},\n  {\n    success: function(data, response){\n      console.log(\"it worked, here is your data:\", data)\n    },\n    failure: function(error, response){\n      console.log(\"it failed!\")\n    },\n    complete: function(){\n      console.log(\"Time to clean up!\")\n    }\n  }\n);\n. This is unrelated to Promises and should be closed if there is no interest in working on it.\n. 2.1.8 is now on NPM, please close.\n. A client side app.  I'm no longer interested in working on this.\n. ",
    "mb21": "What about using a lightweight promise library like q (~2.5 KB minified and gzipped) and keeping the API backwards compatible by checking whether a callback function was provided or not.\nWith callbacks (backwards-compatible):\nvar swagger = new client({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  success: function() {\n    swagger.pet.getPetById({petId:7},{responseContentType: 'application/json'},function(pet){\n      console.log('pet', pet);\n    });\n  }\n});\nWithout callbacks (returns promises):\nnew client({url: 'http://petstore.swagger.io/v2/swagger.json'}).then( function(swagger){\n  swagger.pet.getPetById({petId:7},{responseContentType: 'application/json'}).then( function(pet){\n    console.log('pet', pet);\n  });\n});\n. Q implements Promises/A+ and is basically compatible with ES6 promises, which is what the new fetch API returns, AFAIK.\n. ",
    "martinwoitzik": "+1 for using q and providing a callback-fallback \n. @marcellodesales You only wrapped the initialize function inside of a promise - not the api-calls!\nI made a pull-request where everything can be fetched via promises as mentioned in the example of @mb21 .\nIf it gets merged, you just have to set the \"usePromise\"-flag to true if you want to use it.\n. @indolering does this also apply to my pull-request?\n. Mmmhh... don't get it - it's green when I run gulp test locally?! The travis error message doesn't make sense because the url-variable where \"substring\" is called should be available.\n. Did you execute 'npm install' ?\n. Any update on this? Could you get it to work?\n. Alright - so, are you going to merge my request?\n. ",
    "jacobrask": "My preference would be to use native promises, and let users include a polyfill of their own choice. Native promises are supported by the latest versions of all major browsers and are as @mb21 says what the fetch API returns.\nIn our application we already include a Promise polyfill for users of IE11, another promise implementation is an unnecessary download for the user.\n. ",
    "SunboX": "Would love to see Promises in Swagger generated JavaScript Client. There are a lot of Polyfills for older Browsers. So anyone can choose what he want's to implement (or already has implemented).\n. ",
    "wing328": "@SunboX To generate JS API client with Promise support (using Swagger Codegen), you will need to provide --additional-properties usePromises=true\nRef: https://github.com/swagger-api/swagger-codegen/blob/master/bin/javascript-promise-petstore.sh#L32\nPlease use the latest version (2.2.0) of Swagger Codegen to give it a try.\n. I agree with your suggestion of defaulting to application/json if it exists. Other client SDKs should probably follow similar logic.\n. @amcdnl  As a workaround, you can use swagger codegen to generate TypeScript client (node, angular, angular2, fetch) as well as other API clients (e.g. Javascript, C#, Java, Ruby, Swift, etc) or server stubs (PHP Slim, C# Nancyfx, Java Spring, etc). Hope this helps.\n. If using a dynamic client is a \"MUST\", then you've to wait for swagger-js team to come up with that (or you can contribute).\nI just want to make sure you or people reading this is aware of the \"workaround\" using swagger codegen.\n. @darius-iko not that I'm aware of.\nYou can use swagger codegen to generate TypeScript client (node, angular, angular2, fetch) as well as other API clients (e.g. Javascript, C#, Java, Ruby, Swift, etc) or server stubs (PHP Slim, C# Nancyfx, Java Spring, etc)\n. ",
    "nhagen": "It looks like browserify doesn't like the var e = exports pattern.\nFinding and replacing (being careful with the whitespace!)\nvar e => // var e\ne. => exports.\n(e. => (exports.\nfixed this issue, but causes this problem: \n`Uncaught ReferenceError: CookieAccessInfo is not defined request.js:357``\nCookieAccessInfo is exported from this dependency, which is required everywhere except request.js:\nhttps://www.npmjs.com/package/cookiejar\nAdding \nvar CookieAccessInfo = require('node-cookiejar').CookieAccessInfo to request.js resolves that.\nand finally, there seems to be a bug with shred near line 86 in lib/shred/response.js where there is this code:\njavascript\n  78   var chunkBuffers = [];\n  79   var dataLength = 0;\n  80   raw.on(\"data\", function(chunk) {\n  81     chunkBuffers.push(chunk);\n  82     dataLength += chunk.length;\n  83   });\n  84   raw.on(\"end\", function() {\n  85     var body;\n  86     if (typeof Buffer !== 'undefined') {\n  87       // Just concatinate into a string\n  88       body = chunkBuffers.join('');\n  89     } else {\n  90       // Initialize new buffer and add the chunks one-at-a-time.\n  91       body = new Buffer(dataLength);\n  92       console.log(chunkBuffers);\n  93       for (var i = 0, pos = 0; i < chunkBuffers.length; i++) {\n  94         chunkBuffers[i].copy(body, pos);\n  95         pos += chunkBuffers[i].length;\n  96       }\n  97     }\nHere, the http response is expected to be a buffer, but (at least in my case), was a string. I cut that out to get this:\njavascript\n  78   var chunkBuffers = [];\n  79   var dataLength = 0;\n  80   raw.on(\"data\", function(chunk) {\n  81     chunkBuffers.push(chunk);\n  82     dataLength += chunk.length;\n  83   });\n  84   raw.on(\"end\", function() {\n  85     var body = chunkBuffers.join('');\n  86\nand now it works! Yay!\nSo this is a really hacky solution because I'm editing stuff in node_modules. This could be resolved with a pull request to this project, but the changes I made would break this in browsers (without browserify). However, the var = exports pattern seems to be incompatible with browserify.\nI would propose that the 'correct' solution to this is for swagger-client to be a fully nodejs/commonjs compliant module (i honestly can't find specific documentation saying it isn't--maybe this is actually a bug with browserify?) by getting rid of all of the context checking, use requires at the top, use exports like normal, and then use something like browserify swagger.js --standalone swagger.bundle.js to provide a single bundle with all dependencies included. There also seems to be issues with the shred library, but it might just be that what's in there is outdated? This might explain why I didn't get those errors in REPL, if REPL is not using the provided shred.js files. I haven't looked into that mystery yet.\nThis is a tall order I think, so I'd like to get feedback about what can actually be done here, or if I'm just misunderstanding something about the codebase. \n. Yeah, I think a PR going for the export pattern is managable. I'll look at it this week.\nCookiejar seems to work from the shred bundle (iirc, AccessCookieInfo is defined in the bundle, but not in the unbundled lib file where the error occurs). It also works when I load the module in REPL. I think this might work because node references the installed shred module, not the included bundle or lib files. That's just off the top of my head though.\nBrowserify, however, doesn't seem to be pulling anything from shred.bundle and I'm not sure if its possible to make that happen.\nI did not look into the buffer issue, just bulldozed through it. That one seems really weird in retrospect. Some other change I made must have caused it.\n. Looks like the fixes I have in mind are about 4 of the points listed in #196. Part of changing the export/require pattern would be made much easier/cleaner by resolving the issues with shred.\n~~What is the difference between the shred http client and the jquery client? Why not just depend on jquery?~~\nActually, I guess I should have checked first. Doesn't look like npm's jquery is compatible for server-side use, which makes sense.\nHow difficult would it be upgrade to mainline shred?\n. Is the IE issue with shred related to shred or the underlying http module? And even if shred were browserified, swagger-js would still need jquery for file uploads?\n. ",
    "bytesandwich": "This looks really sweet, @nhagen \n. I've been getting around this with \nvar WithCredentials = function() { };\nWithCredentials.prototype.apply = function(obj) {\n  obj.xhrFields = {\n      withCredentials: true\n   };\n  return true;\n};\n...\nswagger.clientAuthorizations.add(\"withCredentials\", new WithCredentials());\nalong with new SwaggerClient({ useJQuery: true ...\nperhaps letting useJQuery take a function that takes the jquery object, to set ajaxtransport or ajaxprefiter would solve this and give some room for other similar use cases. E.g.\nnew SwaggerClient({ useJQuery: function($) {\n  $.ajaxPrefilter( function( options, originalOptions, jqXHR ) {\n    options.crossDomain ={\n      crossDomain: true\n    };\n    options.xhrFields = {\n      withCredentials: true\n    };\n  });\n}\n. ",
    "retrospectacus": "This was my fix,\njavascript\n@@ -1288,10 +1288,11 @@\n getStringSignature = function(obj) {\n   var str = '';\n   if(obj.type === 'array') {\n-    obj = (obj.items || obj['$ref'] || {});\n     str += 'Array[';\n+    str += getStringSignature((obj.items || obj['$ref'] || {}))\n+    str += ']';\n   }\n-  if(obj.type === 'integer' && obj.format === 'int32')\n+  else if(obj.type === 'integer' && obj.format === 'int32')\n     str += 'integer';\n   else if(obj.type === 'integer' && obj.format === 'int64')\n     str += 'long';\n@@ -1313,8 +1314,6 @@\n     str += simpleRef(obj['$ref']);\n   else\n     str += obj.type;\n-  if(obj.type === 'array')\n-    str += ']';\n   return str;\n }\n. Here is my patch which also fixes the other issue (\"undefined\" should be \"Trade\"):\n``` javascript\n@@ -1287,11 +1287,14 @@\ngetStringSignature = function(obj) {\n   var str = '';\n-  if(obj.type === 'array') {\n-    obj = (obj.items || obj['$ref'] || {});\n+  if(typeof obj.type === 'undefined')\n+    str += obj;\n+  else if(obj.type === 'array') {\n     str += 'Array[';\n+    str += getStringSignature((obj.items || obj['$ref'] || {}))\n+    str += ']';\n   }\n-  if(obj.type === 'integer' && obj.format === 'int32')\n+  else if(obj.type === 'integer' && obj.format === 'int32')\n     str += 'integer';\n   else if(obj.type === 'integer' && obj.format === 'int64')\n     str += 'long';\n@@ -1301,6 +1304,8 @@\n     str += 'date-time';\n   else if(obj.type === 'string' && obj.format === 'date')\n     str += 'date';\n+  else if(obj.type === 'string' && typeof obj.format === 'undefined')\n+    str += 'string';\n   else if(obj.type === 'number' && obj.format === 'float')\n     str += 'float';\n   else if(obj.type === 'number' && obj.format === 'double')\n@@ -1313,8 +1318,6 @@\n     str += simpleRef(obj['$ref']);\n   else\n     str += obj.type;\n-  if(obj.type === 'array')\n-    str += ']';\n   return str;\n }\n```\nNow it renders as: Trades (Array[Trade]): Search results\n. Those patches are to lib/swagger-client.js, I forgot to mention.\n. ",
    "duncanhall": "Yep, apologies for the confusion, the latest PR should be all correct now.\n. Whoops, sorry, should've branched from here, will resubmit this (again!)\n. @fehguy I'm not sure I follow? The changes were made to src/js/swagger-a.js. The swagger-client file has changes because I built and tested and then committed - and the lib folder is not .gitignored.\n. Ha, no worries. Thanks!\n. ",
    "nrshrivatsan": "Should the options be passed like\n```\nvar opts = {};\n      opts.spec = {\n          swagger: '2.0',\n          defaults: {\n              sslStrict:false\n          }    \n      };\n      new SwaggerHttp().execute(obj,opts);\n```\n. ",
    "kimgust": "Got it, thanks! I could help take a look at this for node, especially if you already have some hints as to where to start in the library.\n. ",
    "ozruiz": "just spent a fair amount of time trying to get this to work. would love to get it in.\n. ",
    "glebmachine": "So, how i do upload file with swagger-client in node?\nCan you provide code example please (there is no example in readme file). Thanks!. ",
    "mauricesvay": "I haven't found the test containing a node-based file upload. Could you indicate a filename to look for?. I was confused at first because there's no attach() method like in Superagent, but I found out that I could just pass a ReadStream of my file with fs.createReadStream to upload it.\nThanks!. ",
    "thiagobustamante": "I'm having problems to implement file uploads in node js.\nI have the following swagger 2.0:\nyaml\n  /middleware/authentication/strategies:\n    post:\n      operationId: MiddlewareRestAddAuthStrategy\n      responses:\n        '204':\n          description: No content\n      description: ''\n      tags:\n        - Middleware\n      security:\n        - Bearer: []\n      consumes:\n        - multipart/form-data\n      parameters:\n        - description: 'Middleware file'\n          in: formData\n          name: file\n          required: true\n          type: file\n        - description: 'Middleware name'\n          in: formData\n          name: name\n          required: true\n          type: string\nAnd I am trying to call this using the following code:\njavascript\nfunction addAuthStrategy(name, fileName) {\n        return new Promise((resolve, reject) => {\n            const stream = fs.createReadStream(fileName);\n            this.swaggerClient.apis.Middleware.MiddlewareRestAddAuthStrategy({name: name, file: stream})\n                .then(response => {\n                    if (response.status === 204) {\n                        return resolve();\n                    }\n                    reject(response.text);\n                })\n                .catch(reject);\n        });\n}\nThe request is created to target operation, but the expected parameters (name and file) are both being received as undefined. Not is being sent to the server.\nI also tried to change the createReadStreamcall to fs.readFileSync(fileName), but the problem remains. \nAm I missing something? Is it the correct way to call this? I could not find any documentation nether a test case. The links to test cases above are broken.\nThanks in advance.. ",
    "dcarrot2": "@thiagobustamante Were you able to fix your issue? I'm experiencing the same problem, and from reading the source code, it's not possible to pass a buffer for a formdata file upload if you're targeting a swagger 2.0 spec? https://github.com/swagger-api/swagger-js/blob/ba6c94912bb13e7fb2cdc6bc88b348c353a789c8/src/execute/oas3/build-request.js#L71\nEdit: looks like the file can be passed in via fs.createReadStream($FILE_PATH). ",
    "alycda": "We are using 2.0 specs, which your json file is defined as, correct? I have created a json file to describe my API, and it works with a standalone version of swagger-ui (2.1.0-M1), but I haven't gotten it to work within an AMD environment, possibly due to authorization issues:\n```\ndefine([\n  'bower_components/swagger-ui/lib/swagger-client'  // returns SwaggerClient\n], function(\n  Client                        // useless namespace\n){\n    'use strict';\nvar API = {\n\n    swagger: {},\n    url: 'http://petstore.swagger.io/v2/swagger.json', // swagger.ready never fires\n    // url: 'http://swagger.dev/swagger.json', // local env, since a relative path will not work\n\n    initialize: function() {\n        authorizations.add(\"apiKey\", new ApiKeyAuthorization(\"key\", \"ApI_KeY\", \"query\"));\n        // initialize swagger, point to a resource listing\n        this.swagger = new SwaggerClient({\n            debug: true, // remains 'false' when SwaggerClient is console.logged\n            url: this.url,\n            // authorizations: {}, // unsure how to set here\n            useJQuery: true, // Issue #96 \n            progress: function(data) {\n              console.log(data); // fetching resource list:...\n            },\n            success: function(data) {\n              console.log(this); // SwaggerClient: {}\n            },\n            failure: function(data) {\n              console.log('fail');\n            }\n        });\n    }\n}\n\nAPI.initialize();\nreturn API;\n\n});\n``\n. I just noticed, it may have something to do with theuseJQuery: true` flag, as if I add that to my standalone swagger-ui project, I get the deprecation warning above.\n. This issue appears fixed, however, swagger.ready is still not set and the apis object is empty (trying to run swagger from the browser). I'll open a separate issue for that. \n. ",
    "statueofmike": "Thanks @fehguy I'll make a new pull request after I add tests.\n. Sorry I didn't add tests. I just don't understand the test mock input well enough.\n. > In your swagger JSON, what will you see in the path value?\nYou will see something like this:\n{\"apiVersion\":\"1.0.0\",\"swaggerVersion\":\"1.2\",\"basePath\":\"/api/v1\",\"resourcePath\":\"/devices\",\"apis\":[{\"path\":\"/pet\",\"operations\": ....\nThen further down in the swagger JSON, there will be a \n\"parameters\":[\n{\"name\":\"first\",\"required\":true,\"type\":\"string\",\"paramType\":\"path\",\"allowMultiple\":false},\n{\"name\":\"second\",\"required\":true,\"type\":\"string\",\"paramType\":\"path\",\"allowMultiple\":false}\n]\n\nWhat are the substitution values? What are you trying to replace?\n\nMy fix is attempting to match path patterns that have {curly braces} inside them, which are used in regex quantifiers. The bug I'm addressing is that the current matcher will stop when it finds the first } ending curly brace. \nThe example @Path( \"/{first : (?i)[\\\\w]{2}[\\\\d]{2}}5/{second : (?i)[\\\\d]{4}}\" ) was contrived to be complicated, so I knew the matcher was flexible. Here's a simpler example that I'm using right now:\nMy basepath is /api/v1. My resource has annotation @Path(\"/object\"). My handler has the annotation @Path( \"/{uuid : [a-fA-F\\\\d}{32}}\" ).\nSo I could substitute in any 32-character hex string as a path parameter here.\nFor example: if my resource handler has signature handle( @PathParam( \"uuid\" ) String uuid ), a call to \"hostname/api/v1/object/abcdef12345678900000000000000000\" will replace the \"uuid\" Java parameter with \"abcdef12345678900000000000000000\".\n. ",
    "hekike": "+1\n. ",
    "andrewdavidmackenzie": "Any indication of where this lies on your priority stack Tony?\nIt's a must have for one of the features our customers appreciate when using our Swagger based (1.2) ActiveDocs.\nThanks\n. ",
    "chkal": "Sure, see #253\n. ",
    "blop": "Solution provided by jackphel does not seem to work for me.\nWhat's the official way to do that?\n. Why closed?\n. \"not supported officially in the spec\", which \"spec\" are you referring to ?\n. ",
    "jhilary": "Now you can enable withCredentials by passing enableCookies=true to SwaggerClient.\nhttps://github.com/swagger-api/swagger-js/pull/891\nnew Swagger({\n            url: a_cross_domain_url,\n            enableCookies: true\n});\n. ",
    "R0nd": "@jhilary you can't, see https://github.com/swagger-api/swagger-js/blob/903569948d5a5c718d7b87d6832a672de4e76afc/docs/GRAVEYARD.md. ",
    "LiorArbel": "Is there a way currently (v3) to enable cookies/credentials? I really really need this. ",
    "DonMartin76": "I would also like to see this, at least as an option. This would take away the need for some really nasty workarounds I have in our API Management system.. ",
    "shockey": "@LiorArbel @DonMartin76, take a look at https://github.com/swagger-api/swagger-js/pull/1189 - it may cover your use case \ud83d\ude04 . @xialu4820723 @wangning0 please reach out to SwaggerHub support with your issue \ud83d\ude04. Closing; this issue only applies to 2.x, which is no longer under development.\nThanks for the report, @machowski!. ~@Kadams64, we're no longer working on or supporting the 2.x series of the UI - you'll need to upgrade to v3 in order to get support in the issue tracker.~\nOops, that is v3. Please open a new issue \ud83d\ude04 . Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. I just gave this a quick test, and it doesn't seem to be an issue in 3.x. Here's how I did it:\n\nopen http://editor.swagger.io/ (Swagger-Editor uses Swagger-Client behind-the-scenes)\nload the definition below\nexecute try-it-out twice, and observe that the current time is returned both times (no cached response)\n\n```yaml\nswagger: '2.0'\ninfo:\n  version: 0.0.0\n  title: HTTPBin Current Time\n  description: |\n    Fetches the current time from HTTPBin - good for cache testing in tooling.\nYou'll need to disable CORS since HTTPBin doesn't support it - these Chrome command-line flags will do it\\: `--disable-web-security --user-data-dir`\n\ntermsOfService: terms\nhost: now.httpbin.org\nschemes: [https]\npaths:\n  /:\n    get:\n      summary: Get the current time\n      responses:\n        '200':\n          description: the time\n```\n\nI'm going to close this - if anyone using 3.x encounters a caching issue, please open a new ticket and reference this one.\nThanks, everyone!. @schof please open an issue in Swagger UI, I'd love to hear more about this case!. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development.\nVersion 3 does move to a Promise-based interface, and has plug points for implementing something like this.\nClosing as 2.x wontfix.. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Thanks for the report! Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. Thanks for the report! Unfortunately, Swagger-UI 2.x is no longer under development. We'd be happy to consider any reports about Swagger-UI 3, though.\nClosing as 2.x wontfix.. Closing, as this PR is against the 2.x codebase.\nThanks, @jdupouy!. This fixes Try It Out \ud83c\udf89 \nLGTM, will cut a release too.. LGTM. Unfortunately, Swagger-JS 2.x is no longer under development. We'd be happy to consider any reports about Swagger-JS 3, though.\nClosing as 2.x wontfix.. Closing this; our encoding implementation has changed since this PR was made.\nThanks for your effort here, @carlos-azb!. Observables are currently in TC39 stage 1, and would be a breaking change to our top-level interface.... so this is not likely to happen soon.\nHowever, I'd be excited to see a compatibility layer that consumes our promise interface and exposes an Observable interface.. Closing; requestInterceptor is the best way to do this, and I don't think adding another interface just for this would be worth the overhead.. @mattgen88, have you looked at the requestInterceptor option?. I'm going to preemptively close this ticket since (a) it's pretty old and (b) I'm fairly confident my suggestion will solve the original problem.\nIf I'm wrong about that, feel free to reply and I'll reopen this :smile: . I just touched on this issue in my $ref interceptor PR - and needed to flush the cache after each test run: https://github.com/swagger-api/swagger-js/pull/1161/files#diff-910eb6f57886ca16c136101fb1699231R497\nA per-instance cache would fix this. I agree with @ponelat, this is probably better as a P2 item (@webron).. ### Plan\n\nModify existing tests to be aligned with specified functionality\nAdd tests for cases listed above that are currently uncovered by test suite\nMake code changes to get passing tests\nConfirm that the changes are encapsulated so that they minimally affect other parts of JS. Closing as we're now only skipping five tests, and there are tests that set up a mock server (via xmock).. @airmanx86, the case you described (operationId that's valid, found in the spec explicitly) should be fixed.\n\nWe have coverage for explicitly provided operationIds in buildRequest here now.\nI just tried passing a nonexistent operationId to buildRequest, and got a TypeError: Cannot read property 'operation' of undefined. It's not a perfect error message, but IMO it's better than the object deconstruction error.\nFeel free to make a PR, or comment here, if you'd like to see that error messaged differently.. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. cc @buunguyen . @marjan-georgiev, from what you describe, I think overriding the content-type would be more of a workaround than a fix of the root problem. Can you share your spec so we can reproduce the issue you're having?. Closing as #2946 is resolved - if there's anything else around this that is still an issue, bump this thread and I'll reopen!. This was solved in https://github.com/swagger-api/swagger-js/pull/1083.\nThanks for the report, @glipman!. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. Closing this since it's a 2.x change!\nThanks for the contribution @estermer, but we're no longer cutting new releases for the 2.x series.. I'm going to close this due to inactivity, but wanted to add some thoughts.\n@fehguy is correct, with swagger-client 2.x it's not possible to not follow the redirect, since the W3C spec for XMLHttpRequest specifies the following:\n\nIf the origin of the URL conveyed by the Location header is same origin with the XMLHttpRequest origin and the redirect does not violate infinite loop precautions, transparently follow the redirect while observing the same-origin request event rules.\n\nMore here: https://stackoverflow.com/a/343359\nWith the latest version of swagger-client, it may be possible to use the fetch API's redirect option to throw an error or manually handle a redirect (see this though: https://stackoverflow.com/a/42717388), but we have never tested this functionality. It also definitely won't work in browsers that don't natively have fetch, because fetch polyfills are subject to the limitations of XMLHttpRequest.\nOverall, I wouldn't recommend trying to implement this. If you have control over the API itself, you may consider providing a URL in the response instead of doing an HTTP redirect, which will allow you to make decisions on whether to follow the URL.. Confirmed fix for https://github.com/swagger-api/swagger-ui/issues/2889 and https://github.com/swagger-api/swagger-ui/issues/2923. LGTM! Thanks for this @buunguyen.. I couldn't reproduce this, so I'm guessing it got fixed in a recent version.\nI'm closing; please reply if this is still an issue and I'll reopen.. Looks like the config changed here: https://github.com/swagger-api/swagger-js/commit/07ebd16eb3f83eb84994b30b25531784df1c573b, which would definitely make me think we'd export as a UMD module \ud83d\ude04 \nPS: @ponelat, can you weigh in on this? @webron, can you prioritize?. Possibly coming from here: https://github.com/swagger-api/swagger-ui/blob/f85fdb78354ef14b64bab2c031722d57fa32640d/webpack-dist.config.js#L29. Closing; we're shipping with UMD now (not sure when it clicked over, though):\n\n. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. Looks like this fixes https://github.com/swagger-api/swagger-ui/issues/3012#issuecomment-298762107 as well.. This was fixed in https://github.com/swagger-api/swagger-js/pull/1156/files :smile: . @matthewadams, by this:\n\nIs there a workaround for being able to use swagger-js with a service that requires separate, manual download of its spec\n\ndo you mean that you already have your spec downloaded, and want to provide it directly to the library?. @matthewadams, did @tcosentino's solution solve your use case?. I'm going to close this one out, here's why:\nfile:// URLs are not really useful, since they're very difficult to use in browsers due to Same-Origin Policy and very few Node request libraries support them.\nAs for loading in a definition that you already have in memory, @c4milo is correct: you can pass your definition as a JS object under the spec key.\nFeel free to reply if you disagree with any of this, and I'll consider reopening. Thanks everyone!. @bcomnes, it's not completely purposeless, IMO.\nWe see definitions that are multiple megabytes of JSON - certainly, having the building of a client instance for that definition on the event loop is nicer than it locking up your main thread for a while.. Folks, please note that OpenAPI 3.0 allows you to specify multiple URLs for your API, and use variables in server hostnames and paths. Support for this is in Swagger-UI :smile:. @AdrieanKhisbe, we don't have a gitter (https://github.com/swagger-api/swagger-ui/issues/3544!), send me an email if you need guidance!. @piranna, some information on how swagger-client is breaking for you would be helpful.\nWe've removed babel-polyfill, so that shouldn't be an issue. Are you having the same fetch problem as @adamski?. Thanks for the insights, everyone.\nIt looks like this is a known issue with isomorphic-fetch:\n- https://github.com/matthew-andrews/isomorphic-fetch/issues/125\n- https://github.com/matthew-andrews/isomorphic-fetch/issues/59\nUnfortunately, it appears that the library is no longer maintained, so this is unlikely to change from their end.\nIn the second issue I linked, I noticed someone pointing to the fetch-everywhere as an API-compatible replacement for isomorphic-fetch. The best fix for this may be to move Swagger-Client over to fetch-everywhere internally.. We've just switched from isomorphic-fetch to cross-fetch, which claims to be React Native compatible \ud83d\ude04 . Fix released in swagger-client@3.3.2.\nClosing! Thanks everyone.. @jtn-d, that's an odd error. Is it still a problem? Can you give some more context?. Closing due to inactivity. \n@vincent-cm, feel free to bump if this is still a concern and I'll reopen this. Sorry for leaving this hanging!. The code looks good to me, but based on the discussion in #1022, it's not clear to me if this a use case we're going to support (sending content-type for empty POSTs).\n@webron, would appreciate your input here \ud83d\ude04 . @webron, bump. @bodnia, what's the status of this? Should it be closed?. Strange... I have a couple ideas on what could be going on here, though.\nWhat happens when you run NODE_ENV=production webpack -p --config ./webpack.config.js from the swagger-js directory?. Gotcha.\nSo yeah, that's coming from the command we have in our npm scripts - it assumes a unix shell.\nThe Windows equivalent of NODE_ENV=production webpack -p --config ./webpack.config.js should be SET NODE_ENV=production & webpack -p --config ./webpack.config.js. Can you tell me if that works for you?. Can you npm install -g webpack and try again?. \ud83c\udf89 \nGlad I could help. I'm going to close this ticket, but I'll keep my eyes open for any more Windows users having issues. If this is a recurring issue, we'll open a ticket for the functionality.\nTo anyone reading this: if you'd like to open a PR for Windows support in our npm scripts, please have at it! cross-env looks like a good option.. @ponelat, the changes look good - but what edge use case does this cover?\nFeel free to take this conversation out-of-band if needed.. @ponelat, I'm pretty sure I fixed this in https://github.com/swagger-api/swagger-js/pull/1070. \nCan you take a look at the changes there, and the related issue in UI https://github.com/swagger-api/swagger-ui/issues/3146?. In order to satisfy what we're doing in https://github.com/swagger-api/swagger-ui/pull/3152, I added some logic to add the unaltered operationId to the operaiton object as __originalOperationId.\n@ponelat, I agree with the sentiment.\n. Thanks for the ticket!\nYou're correct - fast-json-patch's 1.2 series deprecates the apply function that we use, which is not great.\nThere was a discussion in their repo about a bug that was causing our tests to fail with 1.2.0 of their package: https://github.com/Starcounter-Jack/JSON-Patch/issues/178\nI tightened the fast-json-patch version for swagger-client in this PR last week:  https://github.com/swagger-api/swagger-js/pull/1071, so swagger-client@3.0.13 (and swagger-ui as well) shouldn't have this problem going forward.\nI'm closing because I think we've done all we can, since we can't keep previous versions of swagger-client from grabbing fast-json-patch 1.2.x. If you can suggest anything, please reply and I'll be happy to reopen.\nThanks again!. Closing this for now; let's revisit Greenkeeper once our end-to-end tests are integrated into CI.. @san4io, can you provide your API definition? If it worked in 3.5.0, there may be a regression that we need to look into, but we can't do that without something to test with :smile: . @erajkovic can you try with UI 3.12.0 as well?\nTake note that resolution happens on model/operation expansion now, so you may need to manually expand your document to see if the error arises.. > So, in short +1 - UI 3.12.0 resolved the issue for me too.\nWonderful! I'll close this issue out then.\n\nIs it OK to have a new side effect - now the URL contains a query parameter\n\nYes, that was introduced in 3.12.0 for folks using the Standalone preset and the urls parameter - it's to keep track of the currently selected option so that the UI stays consistent across refreshes. It's not currently possible to turn that off - if you'd like to have the option, please open a ticket for that!. I get that this solves a problem with authentication, which is good.\nMy concern is that this lessens the amount of control that we have over the request... the browser will attach cookies to all requests to the origin, which could get weird when using Try-It-Out, if your API is on the origin.\nTo sidestep all this, we could set credentials: \"same-origin\" only when resolving references.. @dylancwood,\n\nYou're right, this is only for the resolver. My apologies!\nIn that case, this looks OK to me. Going to add a couple reviewers ( @webron @ponelat ), to make sure everyone on our side is good with this.. @dylancwood We'd need to start doing browser testing, which is something I've wanted for our whole suite for a while.\nI'm pretty sure that our current tests would catch a leaking credentials attachment if they were run in a browser context, so new tests may not be required. \nGetting a node test suite running in the browser may not be trivial, though.. @webron:\n\nWe could also consider renaming the repository to swagger-client: git will automatically handle redirecting old urls that still reference swagger-js.... Thanks @dylancwood! No doubt this will make the source repository easier to find.. Closing due to inactivity - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. > fetch was marked legacy in the execute file, i guess because it was used in the tests instead of http\n\nI'm not aware of any clients using that parameter off the top of my hand, but removing it entirely would amount to a breaking change, which we'd really like to avoid for the time being - so fetch needs to stay. I'm open to making it easier for users to sub in their own implementation, though.\n\ni started to clean up the http file because it was missing semicolons, modifying arguments and some other stuff, might fix that in the other files at some point\n\nWe actually don't use semicolons in this project on purpose \ud83d\ude05  Modifying parameter names is OK if it makes sense and doesn't introduce breaking changes, but I'd like to see that in its own PR.\n\nremoved the regexes aswell and switched to a probably more performant and risk free string matching :)\n\nThis is good! I'd like to see this in its own PR, though. Tests would be nice as well.\n\nI would've liked to provide a line-by-line review of your changes, but the noise from the semicolon changes made it difficult to spot the logic changes.\nI know that reorganizing the code into different PRs is a lot to ask - but splitting into logical PRs makes it a lot easier to trace what changed when, and have topical discussion about changes.\nI'm going to close this PR, but I look forward to seeing superseding PRs based on the work in this one.\nThanks!. This looks solved - closing!. Fixed by #1166!. @webron Yes - currently, if an operationId occurs more than once in a spec, we append numbers to all of them. I'm in favor of this because it makes it clear that the renaming is happening, instead of subtle problems, in cases like these. Happy to discuss changing that though.\n\n@smoebody, we made this change to be closer in line with the Swagger specification. From the specification:\n\noperationId: Unique string used to identify the operation. The id MUST be unique among all operations described in the API.\ncitation\n\nEmphasis mine. The same operationId twice, in one spec, is not allowed in Swagger. The fact that v2 tolerated that is an oversight on our part.\nPlease note that x-swagger-router-controller is an extension, not part of the specification itself. We pay no attention to any fields starting with x-.. Additionally, if you omit your operationIds entirely, we will generate them for you. See the Tags Interface documentation for more on this: https://github.com/swagger-api/swagger-js#tags-interface. Closing due to inactivity - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. Thanks for the PR, @extempl!\nThis will go live in the release we run later today.. \nLooks like latest Swagger-Client omits Content-Type with empty bodies. Closing!. Closing due to inactivity.\nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. @Robbilie, sorry for the delay, had to sync with a team member on this!\nIt's not really clear to me what this enables that can't be done via the http (or even, fetch) options in execute.\nFurther, attaching the fetch to the request when the request is built is interesting, but I don't see what benefit it provides over overriding http at execute time.\nIt's possible that I'm missing your use case here - can you share what you're doing that isn't possible without this PR?. Approved by me!\nI'll wait for formal approval via review from @buunguyen before merging - I want to make sure he's happy with the changes you made, and doesn't want any others.. No worries - I added some.. Merged \ud83c\udf89 \nThanks for the contribution, @Robbilie!. Thanks for the PR, @aaronfullerton! Appreciate you taking the time to fix that issue.. This is probably a bug in our request builder implementation - 0 is falsy in JS, but \"0\" is truthy. \nWhat version are you using?. @seamoss, this should be fixed in the next version \ud83d\udc4d . thanks for reporting this!. ~~\ud83d\udc49\ud83c\udffc Holding on a merge until there are no other PRs in flight. \ud83d\udc48\ud83c\udffc~~. @TheLocust3, not sure what use case this is solving - can you explain, and also add some tests?. @srihakuml, if you're using swagger-js in the browser, you should read the file from whatever provider you wish (or from the user's disk) and pass a representation of the file as a File instance like you would any other parameter. We don't handle any file fetching from external sources (like Dropbox, local disk, or anywhere else) for parameters, so that's on you to implement.\nReply here if you're using Swagger-JS in node, there's a slightly different way to approach it on the server-side.. Hi @srihakum, sorry for the delay here! You can upload a file like so:\n```\nconst fs = require('fs')\nconst path = require('path')\nconst Swagger = require('swagger-client')\nconst myPetImage = fs.readFileSync(path.normalize(__dirname + '/myPet.jpg'))\nSwagger({\n  url: 'http://petstore.swagger.io/v2/swagger.json'\n}).then(client => {\n  client.apis.pet.uploadFile({\n    petId: 256256,\n    file: myPetImage\n  }).then(res => console.log(res))\n})\n```. Closing due to inactivity. Please reply if there's any lingering concerns, and we'll reopen!. @berlinquin, interesting, what version of Swagger-Client are you working with? My prior response was tailored for 2.x, but if it's different in 3.x, that's worth documenting.. @berlinquin, thanks for the info :smile: looks like you're on the right track, 3.x expects a ReadStream.\nI'm going to hang onto this as a documentation ticket.. Thanks for the note @srl295. \nCorrect me if I'm wrong, but this seems like semver funkiness to me. I don't have a citation for this, but I'm fairly sure semver/npm makes version resolution decisions based on version numbers, not chronology.\n\"^2.1.x\" is ambiguous, because the ^ allows both patch and minor version changes (citation), while a 2.1.x mask only allows patch version changes (equivalent to a tilde).\nI can't find any docs that explain what should happen when a semver operator is paired with a masked comparator, but it would appear that the operator takes precedence, which allowed any minor versions in the 2 series, eventually resolving to 2.2.21.. Just picked this back up, and I see what you're saying now... there is no legitimate 2.2 series! My apologies, I wasn't involved in the swagger-client@2 development, so I didn't know that off the top of my head.\nYeah, it seems like an unpublish of swagger-client@2.2.21is in order. @webron?. @webron bump. I agree with the above. My suggestion:\n\nKeep supporting the old signature (avoids a breaking change)\nInterpret new name-in signature correctly (so we can use it in the UI)\nDefine the behavior encountered when the old signature is used with colliding names... Refuse to fire/build the request? Optimistically use the first parameter in the array? Print a warning with a new signature hint?\n\nWe used a similar approach when refactoring some operationId code a couple of months ago (minus the warning hint).. @c4milo, are you using buildRequest/execute, or the tags interface?. @c4milo, thanks for sharing how you're using the library. Which operation should I try to execute in order to reproduce this?. Hi @c4milo, so sorry this thread got lost!\n\nI think this could be solved easily by just allowing users to specify their accept header in the constructor\n\nThis isn't possible in the constructor, but since you're using the tags interface, you can pass responseContentType in a second object to the API method, which I think would be a cleaner thing to wrap than the global execute:\njs\n  client.apis.Authz.ChangePassword({\n    body: {a: 1234}\n  }, {\n    responseContentType: 'application/json'\n  })\n\nFurther, yes this is a bug. I'm going to label it correctly so it stays on our radar!. There is - you can build your own bundle. Here's how:\n\nhave node.js and npm installed on your system\nclone the swagger-js repository and open it in your terminal\nrun npm install\nrun npm run build-bundle\n\nIf all goes well, you should find a bundle file in browser/swagger-client.js.. @PaulSearcy, the build instructions only work when you have a full copy of the project (e.g., by Git cloning) - you're not meant to be able to build when you've installed the module via npm \ud83d\ude04 . As of the next release, a browser folder will be available in swagger-client with an index.js bundle file.\nI didn't add a value for the browser field, since it seemed that the field was intended for browser-specific code, instead of bundled code. I think doing that would've aged especially badly with the coming age of <script type=\"module\"> in browsers.\nI also passed on hosting the files in the repo - we're likely to phase that out in the other projects in v4.0, so I didn't want to start it here. If there's demand for it, we can set up a GitHub Release asset pipeline that provides the file.\nThanks everyone!. What version of swagger-client are you using?. Hi folks!\nFirst, please note that connectionAgent is not a valid option in swagger-client's 3.x series, so setting one won't have any effect.\nSecondly, it's always better to set up your system to trust your self-signed certificates rather than disable TLS validation. However, if you really want to do so, here's how you'd do it:\n```js\nconst Swagger = require(\"swagger-client\")\nprocess.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"\n// not actually a Swagger document, but simulates a self-signed cert\nSwagger({ url: \"https://untrusted-root.badssl.com\" })\n    .then(client => console.log(client))\n    .catch(console.error)\n```\nPlease note that this will completely neuter SSL for all requests that your project makes.\nWe do offer a way to bring your own Fetch implementation if you're using the buildRequest/execute API - however, I looked around a bit, and couldn't find a flag that can be passed to the Fetch API to disable TLS validation.\nI'll close with a quote from the Superagent issue tracker, which had a similar discussion last year:\n\nPlease never use NODE_TLS_REJECT_UNAUTHORIZED for anything, ever. It's a dangerous option that ruins security of all requests made by node.\nPlease either get a free certificate from Letsencrypt, or create your own certificate and CA.\nhttps://github.com/visionmedia/superagent/issues/205\n\nI recommend that you look into adding your certificates to your operating system's trust store :smile: \n. Seems like a fair change... what's the use case here, though? I'm concerned that the only function of this change is to make it easier to use the interface incorrectly.. Closing; I would prefer to accommodate non-Array header objects more directly (i.e. use a for...of, or some Lodash method that allows array and object iteration). Returning the input directly leaves the door open to browser implementations causing inconsistent behavior.\nSorry for the delay here, and thanks for your efforts @Robbilie!. Hi @RavinduHasithanjana, sorry for the delay on this, the issue wasn't tracked correctly!\nIt looks like you aren't handling the CORS preflight quite correctly - are you sending Access-Control-Allow-Credentials as part of your request?\nSome screenshots of the requests going out would be helpful..   Closing due to inactivity. Please reply to my questions above if this is still an issue, and we'll reopen!. Hi folks!\nI was just toying with this, and thought I was reproducing the problem... then I realized I was inspecting a OPTIONS preflight request, not the actual GET for my definition. I haven't been able to coerce my GET request into not attaching the Authorization header.\nIf you're stuck on this, can you provide a screenshot of the request you were expecting to have an Authorization header on but don't, as shown in your browser's devtools? I'd like to make sure we're all on the same page with this bug.\nThanks in advance!. I'm pretty sure this is a server issue: if you aren't sending a Access-Control-Allow-Headers: authorization header back to the browser in your OPTIONS request, the Authorization header is not allowed in your actual request.\nCan anyone confirm that this fixes (or doesn't fix) this problem?. @tnpradeep yes, if you return a promise it will await the resolution of that promise! Beware that the promise will need to return a request object similar to the one provided to the interceptor. . Thanks @hkosova! \ud83d\ude04 . Okay, now it's ready \ud83d\ude04 \nThanks @owenconti!. Thanks, @c4milo!. Hi @nexinto-gmbh!\nI see what you mean, but we're not going to move away from wrapping Swagger 2 body parameters under the body name - it introduces a lot of ambiguity if you try to use freeform body parameters along with other parameters in the same operation.\nAs for OpenAPI 3.0, you provide your request body as requestBody instead of body :smile: \nI'm going to close this out, if you have any more thoughts feel free to reply!. Appears fixed; closing!. From https://github.com/swagger-api/swagger-ui/issues/3674 (now closed):\n\nenums can never be merged though - on the contrary, only the values that are available in both of them should remain.\n\n@owenconti, it sounds like this should be closed, since this concats enums. Can you confirm?. @fehguy \ud83d\udc4b \nI changed the test you wrote in #1137 to the following:\njs\nclient.apis.Testing.tryMe({\n  theBody: {\n    name: 'tony'\n  }\n})\nand the test passed. This is how I imagine the interface should work, but I may be missing something.\nShould we be matching parameter values to body parameter schema properties (i.e. name => body.name)? Is this something we were doing in 2.x?. @fehguy bump \ud83d\ude04 . Hey @CameronAckermanSEL! Sorry you're having problems. Some samples of how you're actually calling Swagger-Client would be helpful :smile: . @fehguy bump\n. \ud83d\udc4d\nClosing this one out \ud83c\udf89 . Hi @iamakimmer, \nApiKeyAuthorization is from the 2.0 version of swagger-client. See the migration guide for instructions on how to provide authorizations to swagger-client 3.0: https://github.com/swagger-api/swagger-js/blob/903569948d5a5c718d7b87d6832a672de4e76afc/docs/MIGRATION_2_X.md#authorizations. Awesome! Glad I could help.. @webron, mostly looking for you to either sign off on this PR with the limitation mentioned above, or give guidance on how to go about implementing nested object support \ud83d\ude04 thanks!. @Stono thanks for the heads up - I'm looking over this now!. For context: we originally used fast-json-patch@^1, but when they released their 1.2 series, we had some issues (see https://github.com/Starcounter-Jack/JSON-Patch/issues/178), so we moved to ~1.1.8.. RE out of date dependencies - yep, we are falling behind. The core team is focused on building out OpenAPI 3.0 functionality in our JavaScript projects, so refactoring third-party interfaces in order to keep up is not at the top of our list. But thank you for bringing it up \ud83d\ude04 if you have the time, we'd appreciate a PR that brings us up to speed.\nI just merged your PR, and am cutting a release now. It should be live on NPM in about 15 minutes. Thanks again for reporting this.\nClosing!. Thanks @bowbahdoe!. CC @wheresrhys - I haven't gotten to the bottom of this problem, so I haven't opened a fetch-mock issue (might be on our end), but thought you'd like to be aware of this.. Awesome! Thanks @wheresrhys \ud83d\ude04 . Build fails on Node.js 4 only... I'll need to come back to this another time.. Hey @dballance, sorry for the delay here! I was looking into a related issue and realized you never got a reply. Thanks for the writeup!\nI don't see any reason to not cache the traversal. Would you be able to put this change into a PR?\nEdit: also, I see you're at Hexagon - as I write this, I'm a couple miles away from your Huntsville office. Small world :smile: . Fixed; should be released shortly.\nThanks for the report, @srb-qlik!. Thanks @owenconti!. This should fix #1047 \ud83d\ude04 . @lquixada, I see this module is at v0.0.8, and you're the author - is this library production-ready?. Thanks, @lquixada!\n. Hi @arty-name!\n\nThe simplest thing to fix is the fixed version of lodash that you have in your package.json\n\nThis is an oversight - a PR that loosens the version constraint to major version 4 would be appreciated \ud83d\ude04 \nI am surprised that this pulls 100kB into your bundle though - we cherry-pick functions from lodash (i.e. import reduce from \"lodash/reduce\"), so the entire module shouldn't be in your bundle, but I digress...\n\nThere are similar issues with core-js and regenerator-runtime, so similar workaround removes additional 100 kB\n\nNot as sure what's going on here - is your project using a different major version of babel-runtime and friends?\n\nI deliver the Swagger Spec as a JSON object embedded in the bundle, however swagger-client unconditionally brings in 40 kB of js-yaml which in turn carries whopping 250 kB of esprima with it. Neither of them is needed\n\nIn accordance with the specifications we support, we support the loading of Swagger/OpenAPI documents represented in YAML or JSON:\n\n\n\nAn OpenAPI document that conforms to the OpenAPI Specification is itself a JSON object, \nwhich may be represented either in JSON or YAML format.\n\n\n\nWhile you may not need js-yaml for your JSON documents, other users need it for loading YAML \ud83d\ude04 \n\nWould you like to work together on reducing the footprint of swagger-client in react bundles?\n\nAbsolutely! We use Swagger-Client in our Swagger-UI project, which is built with React, so we have a vested interest in streamlining this project. PRs are always welcome, and if you have any questions about how to go about things, feel free to open a ticket or email me (address in profile).. > It doesn\u2019t pull the entirety of lodash, I guess, but quite some part of it.\nYeah, buying into Lodash has tradeoffs. I'm sure we could refactor some parts to use custom helpers instead of Lodash functions, but in many cases I'd reach for a third party module over having helper implementations laying around waiting to be broken by the next person to touch the code :smile: Feel free to make suggestions, though. Dropping lodash usage in favor of a builtin method would be welcome.\n\nMaybe it\u2019s the same \"strict versions\" oversight as with lodash in your package.json?\n\nWe target babel-runtime@^6.23.0. You originally implied that npm is resolving your tree such that Swagger-Client has its own babel-runtime instead of reaching for the one already needed at the top level of your project... that should not be the case unless you're not on Babel 6 yet, or are using the 7.x beta channel. Consider checking your own version constraints!\n\nI will caution you against forcing Webpack to resolve regenerator-runtime and babel-runtime to versions outside of Swagger-Client's version constraints - things could break for you at anytime, as patches and minor versions land in those modules. If this is the path you want, and it all works for you right now, I suggest you use shrinkwrap or a lockfile in your project to make sure things continue to work.. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. Thanks, @srl295!. Hi @AedanChristie, you should be able to attach authorization values like so:\nSwagger({\n  url: 'https://www.bitmex.com/api/explorer/swagger.json'\n}).then((client) => {\n  client.apis.Chat['Chat_get']({}, {\n    securities: {\n      authorized: {\n        apiNonce: {\n          value: \"789\"\n        },\n        apiSignature: {\n          value: \"456\"\n        },\n        apiKey: {\n          value: \"123\"\n        }\n      }\n    }\n  }).then(res => console.log(res))\n})\nApologies for the lack of documentation around that feature - it's on our radar to add it!. Hmmm - this isn't really something that we make easy. Swagger/OpenAPI doesn't have any constructs for describing how to sign requests, and Swagger-Client doesn't have anything internally that would handle something like HMAC authentication.\nThat being said, there is a requestInterceptor option that you can use to modify the request before it goes out. You'd be able to do any HMAC calculations and attach any headers you'd like to:\njs\nSwagger({\n  url: 'https://www.bitmex.com/api/explorer/swagger.json'\n}).then((client) => {\n  client.apis.Chat['Chat_get']({}, {\n    requestInterceptor: (req) => {\n      req.headers.MyHeader = \"My value!\"\n      return req\n    }\n  }).then(res => console.log(res))\n})\nFurther, BitMEX has an example of how to use their API with swagger-client. It's for v2, so you could either use v2 in your project or rework their code into v3: https://github.com/BitMEX/api-connectors/tree/master/official-http/node-swagger. FWIW, I don't think writing a requestInterceptor to do the work for you would be difficult - you could use epoch microseconds as your nonce, and crypto.js to do your HMAC calculations.. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. It's probably just polyfills, since we transpile down to ES5, which IE10 supports.\nThere may be some oddities w/r/t the Fetch API, since it's not in IE at all - but the Fetch polyfill works well in IE11, at least.\nIt's mostly not supported because no one has ever made it a priority to support it. We keep an eye on modern browser support (including IE11) with manual and automated testing, but we never look at IE10.. @strongui Try to run things :smile: off the top of my head, You'll certainly need the Fetch API polyfill. Promises should be covered by babel-runtime in our build process, so you shouldn't need a Promise polyfill.\nBeyond that, I'm not very familiar with the ins and outs of IE11's JS support, but feel free to ping me here if you encounter any cryptic errors.. @arty-name, my suggestion going forward here would be to do a naive content check, something like:\njs\nif(req.body.trim()[0] === \"{\") {\n  // json \n} else { \n  // yaml\n }\n\nAlso, concerning your use case of wanting to jettison js-yaml: have you considered aliasing js-yaml to JSON.parse? Like this:\n``js\n// alias.js:js-yaml` interface mock\nexport default {\n  safeLoad(json) {\n    return JSON.parse(json)\n  }\n}\n```\n```js\n// webpack.config.js\nresolve: { \n  alias: { \n    \"js-yaml\": path.resolve(__dirname, 'alias.js') \n  }\n}\n```. Thanks @arty-name!. @arty-name, you're correct.\nFortunately, this shouldn't create any issues for folks that aren't excluding js-yaml from their projects \ud83d\ude04 \nI'd be open to a second swing on this, where we swap out the naive check for contentType === 'application/json'. \nThis would require you (and others that want to ditch js-yaml) to always be sure to declare a content type, but would handle the issue you've pointed out.. @CameronAckermanSEL, I'm not able to reproduce this based on the fragment you provided \ud83d\ude15 can you provide a full definition? I've tried a few permutations of the path-level and operation-level parameters featured in your definition fragment, but can't seem to get this happening on my end.. >> Notice here that this path object has parameters on the path, and have also assigned the method child object an identical parameters object.\nThis shouldn't be happening. If you can provide a definition that reproduces this, I'd be happy to look into it as a bug - as I mentioned, I couldn't reproduce this on my end.\n\n\nIt looks like the buildRequest might expect us to pass in parameters like (...)\n\n\nYou're correct, you can use the ${in}.${name} format, but it's not necessary. It's there for when you, for example, have both a query and path parameter named param and need to distinguish them from each other. \n\n\nTentatively, trials using the parameter deduplication strategy seem to have resolved the problem for us\n\n\nWhere would this code live? I don't quite follow where it fits in.. > If someone however have been using invalid JSON in the responses, this change will break things. Apparently the JSON parser of js-yaml is quite relaxed and handles even invalid JSON like this {\"123\": NULL}. It is your call whether to treat this as a breaking change or not.\nI'm inclined to say no: if you're working with invalid data you shouldn't expect your use case to be officially supported.. > Apparently the JSON parser of js-yaml is quite relaxed and handles even invalid JSON like this {\"123\": NULL}. It is your call whether to treat this as a breaking change or not.\nI believe that the js-yaml parser technically only parses YAML - but with YAML being a superset of JSON, we can also use it to parse JSON. Because of that, though, you can also mix YAML and JSON notation and get away with calling it JSON.. Punting this to next week, unfortunately - I got pretty far into a fix but still have some failing tests, and no time left for it this week :sadjordan:\ncc @webron . Hey @RenukaFernando! I don't want to set credentials: \"include\" by default, because it could cause requests to unexpectedly have cookie data attached. I think the spirit of this project should be to construct requests based on the API definition by default, and try to avoid side effects.\nThat being said.... It's currently not possible to set cookies arbitrarily in the browser (see #1163) so this should be an option.\nI saw your PR (#1189) and intend to give it a final review before the week is out. I think the functionality is good, it just needs some tests to make sure that there are no breaking changes.. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. @RenukaFernando, can you add some tests to cover this new functionality?. @RenukaFernando can do!. thanks, @RenukaFernando!. @dalbani, this is a merged PR - if you need help please open a new support ticket \ud83d\udc4d . Thanks for this, @dballance! Very excited to ship this, I expect significant gains across the board for large definitions :smile:. Hi @srozga, you can't arbitrarily attach authorizations :smile: the name (my_oauth2_token in the example) needs to match a security definition in your Swagger definition.\nIf you don't want to put that in your definition, you can use the requestInterceptor option to modify the request's header before it goes out, and attach anything you'd like to:\njs\nSwagger({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  requestInterceptor: (req) => {\n    req.headers.Authorization = \"Bearer Asdf1234\"\n    return req\n  }\n}).then(client => {\n  client.apis.pet.getPetById({ petId: 1234 })\n}). Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. I addressed this in https://github.com/swagger-api/swagger-js/pull/1214, didn't realize a test PR was open.\nI'll merge it into here and see what we get.. This should have been fixed in https://github.com/swagger-api/swagger-js/pull/1195 :thinking: . Seems like this is handled; closing!. @CameronAckermanSEL, hmm this is strange. Can you link me to where you're seeing abuse detected?. Well that's certainly not right... I'll email them and circle back here when I hear from them.. @CameronAckermanSEL, here's their response: Travis CI support.pdf\nSounds like you need to provision your fork with Travis CI.. thanks @CameronAckermanSEL!. Hi @deostroll!\nI'm looking at the definition that you provided - which operation should I be playing with to see this happening?. cc @dballance: pretty sure this is a step back for performance (i'm caching the plugin result, not the traversal), so feel free to build on top of this.. Well, this is embarrassing\u2122\nTurns out this PR wasn't passing all tests - I left a describe.only in the tests that kept.... all the tests, from running.\nI've reverted this PR, so we're back to no optimizations for now - I thought it better to ship unoptimized than to hold up the release.\nI'll circle back here on Monday to get this in full working order \ud83d\ude04 . At long last...\nthanks @STRML! \ud83e\udd1c \ud83e\udd1b . @bungoume, sure, great catch. Working on this now!. Thanks @bungoume!. @benirose, is it coming back as undefined?. Interesting... and you can see a String res.body in other browsers? Can you share an example I can use to reproduce this?. Circling back on this: we've called this a wontfix before in the context of Swagger-Editor: https://github.com/swagger-api/swagger-editor/issues/1371\nRather than continue fretting about getting more aggressive with polyfilling or saying \"browser problem, not our problem\", it's worth considering ignoring native implementations completely and using ponyfills in Swagger-Client and UI/Editor.. Good to hear that the workaround applies here :smile: \nI'm going to keep this open, with the actionable task being to stop relying on window.fetch and lean entirely on libraries by default.. @SSchindi, this has been fixed by Edge now, so I'm going to close this. If you're still having issues, please open a new ticket, it's probably not the same root cause!. ~~Reviewing now - looks like my reversions did drop the tests from #1201, going to resolve that.~~\nEdit: I must have been looking at this wrong locally \ud83d\ude04 . Thanks @dballance! \ud83d\ude04 . We're encoding : by default since it's an RFC 3986 Reserved character.\nUsing a request interceptor is the best move if you want to override this :smile: \nClosing as resolved, feel free to comment if there are any other thoughts.. Hi @PaulMaly!\nYou can define the base URL for your API in your swagger.json, with the host and basePath, or define multiple endpoints in servers if you're using OpenAPI 3.0.\nIf you don't set this information in your API definition, Swagger-JS will use the host that the definition was fetched from by default (as you probably noticed). This is because most folks have their API server serve their API definition right next to the API's endpoints (for example, http://petstore.swagger.io/v2/swagger.json)\nIf you'd like to modify the destination of your requests without putting that information in your API definition or changing where it's served, you can use the requestInterceptor option to change the request's destination to anything you'd like.. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. Thanks for this, @FirefoxMetzger!. Sorry for kicking the can down the road here!\nBefore I greenlight this, I'd like to hear from @ponelat - he architected this bit of Swagger-Client :smile: . thanks, @dballance!\np.s.: have you had a chance to look at the new lazy resolution changes? i'd love to hear about how your massive document is faring with it.. @dballance awesome!! glad to hear the situation has improved on your end.\nyou've been a great help with these improvements \ud83d\ude04 if y'all run into any other bottlenecks, feel free to write up a report or open a PR!. @ilgrosso no worries! there\u2019s a lot of nuance in the code, it\u2019s not hard to miss \ud83d\ude04\nfeel free to ping me here if you need any help.. @ilgrosso thanks for the heads up, I just requeued the 4.7 one; looks like nodes.org was having some trouble yesterday.. Thanks @ilgrosso! One last request - can you add some tests? See my review above for some pointers \ud83d\ude04 . Hi @ilgrosso!\nThe test cases you added illuminated what you meant in your PR title: It's my fault for not digging into that earlier in the process.\nFrom the 3.0.0 Definitions section:\n\nPath templating refers to the usage of curly braces ({}) to mark a section of a URL path as replaceable using path parameters.\n\nand from the Parameter Object section:\n\npath - Used together with Path Templating, where the parameter value is actually part of the operation's URL. This does not include the host or base path of the API. For example, in /items/{itemId}, the path parameter is itemId.\n\nI reached out to an OpenAPI TSC (the committee that writes the OpenAPI Specification) member, and they confirmed for me that path parameters must be referenced in the path key name in order to be used - path parameter values should not be concatenated to request URLs if the parameter is not referenced in the path itself. As a result, the changes you want to make would go against the specification.\nAgain, my apologies for not addressing this earlier in the PR process! All of that being said, I'd be happy to accept any improvements to how we generate matrix path parameters when the parameter is being used in the path name.. @ilgrosso, I see where you're coming from. I don't really see a way to get around this, since as you mentioned (a) path parameters must be required and (b) required parameters can't provide a default value. The only way to do this, then, would be to always manually provide an empty value.\nAs I'm sure you know, there's not much we can do about that here. Consider raising this issue over at the specification repo - since matrix is supported now, I'd imagine this usability issue would get some attention.. Hi @satbircloudsmartz!\nI need the following information from you in order to help you effectively:\n\nthe Swagger-Client version you're using\ninformation on where you're using Swagger-Client (in a browser? server side? which browser/JS engine?)\na full API definition (not a fragment) that demonstrates the issue you're having\nany steps needed in order to reproduce the issue. Closing due to inactivity. \n\nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. Thanks for the report, @srl295!\nWe've had this issue crop up in the past, looks like we might have a blind spot.. Hmm - I'm not able to reproduce this on my end:\n\nWhat browser are you seeing this in? I'm on macOS Chrome 63.. Ah, got it. My hunch is that this is an implementation difference.\nLooking forward to a demo for this (a failing test would be great!). @srl295 pong! will look at this soon \ud83d\ude04 . Good catch. Thanks for the PR!. Hi @denis-s-svsg! Thanks for this PR.\nA question - are you sending a Content-Disposition: attachment header in your XLSX file response? I ask because we're planning to prioritize Content-Disposition as a trigger for file download in https://github.com/swagger-api/swagger-ui/issues/4115.. Hi @leafoflegend!\nGenerally, you'd provide data in your query string by defining a query parameter in your Swagger/OpenAPI definition, and then providing a value for that parameter when you call execute.\nHere's an example of doing that with Swagger.execute directly, in v3 (though v2 will probably take this too):\n```js\nconst Swagger = require(\"swagger-client\")\nconst spec = {\n  swagger: \"2.0\",\n  host: \"httpbin.org\",\n  paths: {\n    \"/\": {\n      get: {\n        operationId: \"myOp\",\n        parameters: [\n          {\n            name: \"myParam\",\n            in: \"query\"\n          }\n        ]\n      }\n    }\n  }\n}\nSwagger.execute({\n  spec: spec,\n  operationId: \"myOp\",\n  parameters: {\n    myParam: \"my value\"\n  }\n})\n```\nThis results in a request: GET http://httpbin.org/?myParam=my%20value.\nLet me know if this helps!. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. Hi @rook2pawn! Yes, userFetch is the supported interface in 3.x.\nIf that's limiting you in any way, feel free to elaborate on your issue and we can find a solution.\nKeep in mind that requestInterceptor and responseInterceptor are available to you as well.. @rook2pawn, I got an email notification for a reply but I don't see it here. Did you managed to get this solved? If so, it'd be great if you could share your solution for others that end up here. It may even end up in our documentation! \ud83d\ude09 \nIf not, just bump this thread and I'll do my best to help.. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. Hi @rook2pawn!\n\nI imagine that it will use the default value as specified (where {url:\"/\"}) when used to make client calls, but i wanted to get clarity on if in fact the loaded spec would not fill in this default value\n\nYou're on the right track here: we don't add a default servers object explicitly. In fact, we're a little off track from the OpenAPI Specification, because we actually assume there is none by default. This is safely equivalent to assuming a server url of /, since OpenAPI path names must start with /. Ignoring the default just saves us a step of normalizing (/ + /endpoint => //endpoint => /endpoint).\nHere's an example:\n```js\nvar Swagger = require(\"swagger-client\")\nconst spec = {\n openapi: \"3.0.0\",\n paths: {\n   \"/endpoint\": {\n     get: {\n       operationId: \"myOp\"\n     }\n   }\n }\n}\nSwagger.buildRequest({\n  spec,\n  operationId: \"myOp\"\n})\n```\n\nI'm curious - what led to you inspecting what internal transformations are/aren't happening within Swagger-Client? If you're building something on top of it, I'd love to hear more about it.. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. thanks @championswimmer!. Thanks, @RenukaFernando! This will ship tonight.. Hmm, this might be React Native specific... going to dig into this.. \nthanks @heldersepu! . > In swagger3, it is undocumented but a similar thing happens, however instead of the previous example we get the method concatenated with an underscore.\nRight - what actually happens when the operationId is absent, is the key is computed from ${toLower(method)}${escapeString(pathName)}: \nhttps://github.com/swagger-api/swagger-js/blob/22f253344b80e13d06c6af8db62de28ed85fd338/src/helpers.js#L19\nThe escaper replaces non-word characters with _ - in this case, path is /, so you get one underscore.\n\nWould it make sense to make operationId required since it then removes the indeterminacy in the implicit api naming convention?\n\nI wouldn't say the interface is indeterminate - you should always get the same result from the same definition. Can you explain what you mean by this?\nAs for making the operationId required: I would personally love that, as I think it makes for prettier generated interfaces... but making that field required is not up to us :smile: the OpenAPI folks discussed that last year (see https://github.com/OAI/OpenAPI-Specification/issues/1019), and it doesn't sound like it's going to happen anytime soon.\n. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. Hey @RomanGotsiy, I'm going to pass on this PR since we do have a resolver interface (https://github.com/swagger-api/swagger-js#swagger-specification-resolver) already - if you need to resolve a definition before you use execute/buildRequest directly, you can use that \ud83d\ude04 \nRegardless, thanks for the PR!. Hi @palanik!\nYep, as @webron noted, the conversion and escaping step was added to (a) ensure operationId uniqueness and (b) make Swagger-Client's tags interface more user-friendly: client.apis.user_list() is nicer than client.apis.['user.list'](), since you can't use dot-notation to access member keys with dots in their name.\nIt sounds like you're seeing these escaped operationIds in the UI when displayOerationId is enabled, am I correct?\nIf so, that's a bug, probably introduced by one of the recent PRs that touched the OperationContainer. The UI is meant to display operation IDs as they are written in the definition.\nAn API definition that demonstrates this problem would go a long way towards helping us get this fixed :smile: . Thanks for the failing tests - I'll do my best to find some time to figure out what's going on.. thanks @meros! :smile: . Hi @lduros!\nIs there any reason you can't add the OPTIONS endpoint to your Swagger definition?\nExample:\nyaml\nswagger: 2.0\nhost: httpbin.org\nschemes: \n- http\npaths:\n  \"/\":\n    options:\n      description: sends an options request. @eropple, thank you for the feedback!\nYou're right - the authorization is one of the more awkward parts of Swagger-Client. Some of the points you raised can only be fixed with breaking changes, so they aren't likely to change in the short-term, but when we move beyond 3.x I hope to make the various client APIs more harmonious \ud83d\ude04 . Hi @lduros!\n\nBut this shouldn't even really matter, because I want to perform a basic auth before the schema is even received or parsed.\n\nYour intuition is correct: the security definitions in your document don't affect the initial request for the document, because Swagger-Client doesn't have the information yet \ud83d\ude04 \nYou can use the requestInterceptor option to attach information to the initial request:\n```js\nconst swaggerClient = require(\"swagger-client\");\nconst swaggerUrl = 'https://petstore.swagger.io/v2/swagger.json'\nswaggerClient(swaggerUrl, {\n  requestInterceptor: req => {\n    if(req.url === swaggerUrl) {\n      // we're fetching the definition\n      req.headers.Authorization = \"Bearer Asdf1234ThisIsMyToken\"\n    }\nreturn req\n\n}\n})\n```\nNote that this request interceptor is used for all requests, so you need the if(req.url === swaggerUrl) bit to make sure the request you're modifying is the document request.\nHope this helps!. @rg1 please do! might as well knock both out at once \ud83d\ude04 . hi @ACB1337! \nreplayClient.client.apis.user.login({requestBody: {username: \"test\", password: \"test\"}}) should work, since you're using an OpenAPI 3.0 definition. We might need to document that better :smile: . @guillaumesmo, yep, you're right, I misspoke. Apologies to you and @ACB1337 for that!\nIn light of this, I added some documentation for requestBody w/r/t the tags interface: https://github.com/swagger-api/swagger-js/pull/1270\nThat should resolve this, so I'm going to close for now. Feel free to reply with any outstanding concerns!. Hey @karllson! Yeah, the second argument to a tag interface method is opts (see the second function signature here. Using opts is one  way to do this on a per-endpoint basis; the other  way is to define a global requestInterceptor but decide whether to modify the request based on the request metadata.\nAs for the GET operation: even if you aren't defining any parameters, Swagger-Client expects the first argument to be a parameter object - so you should call it like this: client.apis.whatever.myGetStuff({}, {requestInterceptor: r => ...})\n\nFYI, defining your authorization header in your OpenAPI document is better than using requestInterceptor at all. OpenAPI supports describing a lot of common authorization schemes out of the box, here's some information on that: https://swagger.io/docs/specification/authentication/. Closing in favor of #1282 - my local git wasn't playing nice with the $ in this branch's name \ud83d\ude22 . @djMax can you share an example API definition? Kinda hard to follow what you're describing in the abstract.. Yep, this is a bug.\nWe compute fully-qualified pointers elsewhere in the $ref plugin; using those here would probably solve this.. Hmm... I agree with you that the new format is less intuitive, but we wouldn't be able to change this without a breaking change.\nWe could add an option to provide a custom method name generation function, and even build in an option for 2.x compatible names.. No promises on a fix, but I will put eyes on this issue this week \ud83d\ude04 . @djMax, v2OperationIdCompatibilityMode has been added to Swagger-Client, and will be available as part of our release tomorrow night.\nI ported the generator logic directly from the 2.x code, and added your example as a test case.. @RdeWilde, this is just for the tags interface (clients.apis). \nDuplicate operationIds within the same Swagger/OpenAPI document are still invalid, even if they don't share tags or methods:\n\noperationId: Unique string used to identify the operation. The id MUST be unique among all operations described in the API. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions.\nSwagger/OpenAPI 2.0 Specification: Operation Object\n\n\u00a0\n\noperationId: Unique string used to identify the operation. The id MUST be unique among all operations described in the API. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.\nOpenAPI 3.0 Specification: Operation Object. Hi @kavisuresh!\n\nThis is by design. Since you're getting UnhandledPromiseRejectionWarning, I assume you're in Node.js 7 or earlier - in newer versions of Node, your process would exit with code 1.\nYou can capture any error that execute gives you by adding a catch handler to the Promise that execute returns. If you want to just throw, here's how you'd do that:\njs\nSwagger.execute({...})\n  .then(res => console.log(res))\n  .catch(err => throw new Error(err))\nIt's just a callback function, so you could do anything else with that error you wanted to, like consume it in your application, display it to the user, etc.\nHope this helps!. @kavisuresh, are you using the static execute method like I illustrated above, or the instance method, more like this:\njs\n    Swagger('http://localhost:8000/petstore.yaml')\n      .then(client => {\n        client.execute({\n          operationId: \"findPetsByStatus\"\n        })\n      }). I've opened #1281 to fix this, but it introduces some interface changes that I'd like to sit with for a bit before moving forward \ud83d\ude04 . @kavisuresh, in the meantime, catching at the top level of Swagger-Client will work:\njs\n    Swagger('http://localhost:8000/petstore.yaml')\n      .then(client => {\n        client.execute({\n          operationId: \"findPetsByStatus\"\n        })\n      })\n      .catch(e => console.error(e))\nNote that my proposed change does break this pattern, which is why I'm going to look for a best-of-both-worlds solution before moving forward.. This should work fine if your API document defines the media types correctly. \nCan you provide an example definition and Swagger-Client usage pattern that I can use to observe this?. @webron that would be possible - should we assume application/json if we otherwise have no idea what Content-Type to send?. Hmm... One should be able to achieve this with a request interceptor:\njs\nSwagger({\n  url: \"http://petstore.swagger.io/v2/swagger.json\",\n  requestInterceptor: req => {\n    if(req.body && !req.headers[\"Content-Type\"]) {\n      req.headers[\"Content-Type\"] = \"application/json\"\n    }\n  }\n}). Hmmmmmmmm. Miiiiight be the same issue as https://github.com/swagger-api/swagger-js/pull/1243.. An update here: I hacked on this for quite a while on Thursday, but haven't gotten all green lights yet. I've set this aside so I can get some other things into this release cycle, and will pick it back up next week :smile: . Here we are again.. I spent about two days this week on this issue and still haven't struck at the heart of it.\nI'm punting again so I can land some related fixes for tonight's release - they're in the same branch, so I'll need to graft them out.\nThis will be at the top of my list.... Monday.\nSwagger-Client #1275 notes for week of Monday, April 23\n\nthe allOf plugin is not a factor here, it doesn't run until after the error\ni set a console log to delineate each call to the $ref plugin with.... a horizontal line! this gives me a good view into the cycles involved with the issue, and i refer to each step as a frame.\n\n$ref plugin frames:\n1. resolve definitions one $ref with value at #/definitions/two\n2. resolve definitions two items $ref with value at #/definitions/three\n3. resolve definitions three allOf 0 properties alternate_product_code $ref with value at #/definitions/three, but abort without a patch since the $ref in question is a direct cycle\n4. resolve definitions one items allOf 0 properties alternate_product_code $ref but error since the target $ref does not exist in the current specmap state\n\n\ntheory: the traverser is working off of data that has been mutated and those changes have not been handed back to specmap.state\nby some mechanism, when we resolved two's ref to the value three, the already-resolved value for two inside of one also received the resolution for two's ref to three - from the traverser's view.\nthe traverser saw this, and asked the ref plugin to look at the self-referencing three ref inside of one->two, but the specmap state was not aware of this data inside of one, so it blew up.\nthis may be object inheritance / reference (more specifically, lack of it in one place). we definitely have that going on in the patch system... why is it being synced into the traverser's context but not specmap's?\nthe culprit could be the refCache logic that's hanging out in the traverser, or alternatively something in the patch result processor not making it back into specmap state.\n\n\nok - it is an object inheritance issue.. but it's not an accident. when parsing replace patches when meta patching enabled, we break inheritance before replacing the target location so we can place metadata at the target without it also appearing at the source.\ndisabling that functionality is a bad idea, for a few reasons... (a) a worse user experience and a breaking change, (b) breakage of quite a few tests, and (c) likely to cause strange adverse behavior in Swagger-UI.\nso that leaves us to work in the other direction - if we can't make specmap's internals more optimistic, we have to make the traverser more pessimistic.\n\ntraverse's patch argument, in the fourth $ref frame, is a replace patch that would add the correct two->three resolved data to one. that patch, however, is never making it to the applyPatch method, so specmap isn't ever updating its state according to that patch. where is this patch coming from, going, and how is it manging to be partially applied?\nthis patch is being considered a mutation, so traverse is walking the mutation's value through the plugins without ever actually applying the mutation patch itself.\nbecause the mutation patch disappears, but the patches generated from that mutation persist, the application of the generated patches fail.\n$ref frame #4 yields no patches - this appears to be causing the mutation patch drop, while its derivatives hang around.. OK! Fixed!\nThe solution was to update specmap's internal mutation applier to also break inheritance when meta patching is enabled. This keeps both sides of the system in harmony, avoiding the generation of patches for mutations that have not yet actually been applied but have bled through in specmap state due to inheritance.\nNote that we also dropped testing for Node.js 4, since it reaches end-of-life this month (https://twitter.com/nodejs/status/968177367033229315). Going forward, we're testing Node.js 6, the latest LTS version, ~and the latest version~.\nI included the version changes in this PR because... the development experience polishing I did in the process of fixing this required a bump to webpack@3, which needs Node.js 6.. @kevinoid, thanks for reporting this and apologies for the trouble with your build!\n@rg1, feel free to open a PR for this once you have a fix you're happy with. If you get stuck on the testing part, go ahead and open a PR and ping me there \ud83d\ude04 \nAs for the conventions for PRs, our contribution guide over at Swagger-UI may help: https://github.com/swagger-api/swagger-ui/blob/master/CONTRIBUTING.md#making-pull-requests. fixed! \ud83c\udf89. @rg1, no worries! the commit you linked to helped a lot in shaping my fix.. Code changes look good - handing off to @webron for consideration of the feature as a whole. On hold pending @webron's note about OAI work.\n\n\nWe should consider adding extension functionality support in plugins (and yes, @shockey, that would mean a plugin repository).\n\nLove the idea - but be aware that Swagger-Client's extensibility is much less formal than Swagger-UI's. I don't think this can be achieved elegantly outside of the core.. > This PR adds the x-tokenName extension support exclusively for swagger 2 docs. OAI work would only impact the 3.x spec, right?\n@ngraef, yep, fair point. Let's move forward with this one.. thanks @ngraef!. @psy21d what Swagger-Client version are you using?. swagger-vue is a different project \ud83d\ude04 here's their GitHub, maybe you can find some help there: https://github.com/chenweiqun/swagger-vue/issues. Hi @Nexum! Sorry this change gave you trouble.\nIsolating parts of a response are not the intended use case for interceptors - they're there for rewriting parts of a request/response to do things like proxying and authentication.\nEven in past versions of Swagger-Client, this type of interceptor would break things:\n```js\nvar Swagger = require(\"swagger-client@3.5.2\")\nconst client = await Swagger({\n  url: \"https://app.swaggerhub.com/apiproxy/schema/file/shockey/httpbin/1.0/swagger.yaml\",\n  responseInterceptor: res => res.body\n})\n// Request and response interceptors affect all network requests, not just\n// requests created by calling an operation.\n// \n// Because we changed the shape of the response that Swagger-Client gets back\n// in our response interceptor, Swagger-Client was unable to get the data for\n// the remote document and ended up with an empty definition, so this instance\n// has no operations available to the user.\nconsole.log(client.spec) // {}\nconsole.log(client.apis) // {}\n```\nWe don't go into detail in the Swagger-Client docs about what exactly interceptors are for, but we do specify in the Swagger-UI docs that the interceptors must return the request/response itself:\n\nAccepts one argument requestInterceptor(request) and must return the modified request, or a Promise that resolves to the modified request.\nAccepts one argument responseInterceptor(response) and must return the modified response, or a Promise that resolves to the modified response.\n\nThat being said, I realize that documenting the options in Swagger-UI isn't the greatest thing (cc https://github.com/swagger-api/swagger-js/issues/1228), and I wouldn't blame you if you had no idea that those docs applied here.\nAll that being said... Your use case could easily be achieved by chaining promises onto the requests you make:\n```js\nvar Swagger = require(\"swagger-client@3.5.2\")\nconst client = await Swagger({\n  url: \"https://app.swaggerhub.com/apiproxy/schema/file/shockey/httpbin/1.0/swagger.yaml\"\n})\nclient.apis.default.get_ip()\n  .then(res => res.body)\n  .then(body => console.log(body))\n```\nLet me know if this helps!. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. please build. Okay, everything appears good now - looks like allOf was dying on a replace patch, which may have been selected for the allOf plugin's consideration incorrectly due to the nested structure we have.\nI simply sidestepped this by not trying to keep looking for a value that doesn't exist. The tests pass, @ponelat I'm going to tag you for review to ensure this is the spirit of what you were looking for here. . Merging, per @ponelat:\n\nI'm happy with it being Just Merged. It may not be the solution, but again, its a harmless looking PR... what could go wrong?\nhe said, on the eve of Friday night... the 13th!. Hi @john-goldsmith!\nis requesting an entire JSON spec a viable solution as my API grows?\nGenerally I like to avoid burdening end-users with unneeded network requests, especially if they're of substantial size like it seems a Swagger spec is.\n\nThat is something that only you can answer. Are your users going to be mostly on 3G mobile devices, or on fiber-to-the-premises connections in major cities? \ud83d\ude04 \nAlso be aware of the fact that your swagger.json will change rather infrequently, on average, so you can take advantage of aggressive caching so that your users won't need to download it again and again. You can also use the Client in such a way that your swagger.json isn't fetched until the user intends to do something that involves your API.\n\nIs swagger-js intended to be used on the client\n\nYes, it is!. thanks for the test case, @matthewadams - looks like it passed without any source changes, but the test will make sure it stays that way! \ud83d\ude04 . @RdeWilde, this should be happening by default - can you share an example of what you're seeing on your end? An OpenAPI document and example of how you're calling Swagger-Client would be great :smile: . Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. The issue here was that $ref'd parameters were always failing the existential test in the code, which led to an infinite loop of pushing onto operation[inheritName]. \n\nThis code really should be rewritten, the current implementation feels messy. It's hard to see what's going on.\nI was surprised to find that the current tests didn't catch this. In light of that I added the example from https://github.com/swagger-api/swagger-ui/issues/4467 as a specific test for this bug. The normalizer is version-agnostic, so there isn't a need for a sister OAS3 test.. ## Test cases\n\nrequestContentType patch\n\nexplicit requestContentType should have an effect if a bodyparameter definition is present but no data is provided\nexplicit requestContentType should have an effect if an OAS3 request body is present but no data is provided\nexplicit requestContentType should have no effect if no body parameter definition is present\nexplicit requestContentType should have no effect if no OAS3 request body is present\n\nbuildRequest attachContentTypeForEmptyPayload option\n\nattachContentTypeForEmptyPayload should attach a Content-Type to a Swagger 2 operation with a body parameter defined but no body provided\nattachContentTypeForEmptyPayload should attach a Content-Type to a Swagger 2 operation with a formData parameter defined but no body provided\nattachContentTypeForEmptyPayload should attach a Content-Type to an OAS3 operation with a request body defined but no body provided\nattachContentTypeForEmptyPayload should not attach a Content-Type to a Swagger 2 operation with no body or formData parameter definition present\nattachContentTypeForEmptyPayload should not attach a Content-Type to an OAS3 operation with no request body definition present\n\nattachContentTypeForEmptyPayload pass-through\n\nattachContentTypeForEmptyPayload should have an effect when set through the constructor\nattachContentTypeForEmptyPayload should have an effect when set through the execute method\nattachContentTypeForEmptyPayload should have an effect when set through the tags interface options object. CC: https://github.com/swagger-api/swagger-js/issues/1022. @Robbilie, can you provide an example that I can use to observe this happening? What version are you using?\n\n(Pushing this over to support for now so I keep my eyes on it, I may re-triage it based on what transpires here). Reviving this...\n@Robbilie, we're inheriting the status of res.ok from the Fetch implementation we're using.\nFetch spec says:\n\nAn ok status is any status in the range 200 to 299, inclusive. (ref: 2.2.3.)\nThe ok attribute\u2019s getter, when invoked, must return true if the context object\u2019s response\u2019s status is an ok status (see 2.3.3), and false otherwise. (ref: 5.4.)\n\nI'm not really open to breaking the spec here - perhaps in some future reality where Swagger Client isn't directly using Fetch (off topic, but I have a branch laying around built on top of Axios), we can be more creative, but I think it'd be improper to change ok behavior today.\n\nMore broadly.... the browser model of cache handling is to handle the caching lifecycle outside of the HTTP client's space.\nAs an example: if you load this page (https://swagger-client-1301.glitch.me/) twice, your first load will make a network request, but your second request will load from the disk cache. From Swagger Client's point of view, however, both requests are 200s. \nThe browser transparently replays the cached 200s, whether it's a disk cache hit or the result of a 304 response (as noted in https://github.com/github/fetch/issues/241#issuecomment-161920647).\nIf you're outside of a browser (I suspect you are if you're trying to roll your own etag support), support for this is scant within the confines of the Node ecosystem - as noted in https://github.com/nodejs/node/issues/6790, Node passed on the opportunity to support HTTP caching in core, and none of the popular HTTP clients have JavaScript implementations of RFC-compliant caching.\nMy advice: instead of trying to wrestle Fetch into supporting caching, put a proxy in front of your client application.\nThe closer in the Node ticket says it best:\n\nyou best bet would be to use a caching proxy outside of Node.js. You'd likely achieve far better performance using something like squid (http://www.squid-cache.org/) independently of Node.js than trying to bake something in.. Hi @sebs! I totally agree, our CI targets need to be updated. While I would love to test every version, Travis only lets us run so many containers at once... so we should be careful to avoid adding so many that every build causes a job queue to form.\n\nIn #1275, I dropped v4 (it's EOL in less than a month), added v6, and started testing against the latest LTS.\nI omitted the latest version (- \"node\" in travis config) for now, because v10 was breaking literally every single HTTP test.. Needs moar tests. thanks @virkt25!. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. thanks @dtkav!!. Fixes an issue in the Travis script that was preventing an npm deployment!. @virkt25 + @gzurbach - sorry for the rough ride with this dependency, it looks like the module is written by hand (see https://github.com/saikojosh/Object-Assign-Deep/issues/4) and uses const, which breaks in Node 4.\nIt just so happens that we dropped Node 4 from our tests in anticipation of that version reaching End-of-Life this month (though it looks like that's April 30th, to be exact), so this wasn't caught before release.\nI'm going to fix this, by either forking the problem module or using something else entirely, and publish a patch version for swagger-client. \n\nHowever, going forward from April, if you stay on Node 4 we might break your implementation without bumping the major. I'm working off of @mikeal's view of version bumping vs leaving EOL users behind (emphasis mine):\n\nEverything is a tradeoff. I understand that people stuck on old versions don't like this tradeoff, but you are in the minority, and we only have the resources to support a single major line of development, so the choice was between breaking you or opting the rest of the community out of automatic updates. This will not be the last time you are inconvenienced by changes like this in dependencies so it's a good idea for you to lock down your deps with shrinkwrap and stop updating them. Or, better yet, update to a supported version of Node.js.\nFor package authors: it's up to you whether or not to bump the major version, but supporting EOL versions of Node.js is not a good practice and encourages irresponsible/insecure behavior of your users.\nhttps://github.com/request/request/issues/2772#issuecomment-331944074\n\nSo in short: I'm fixing this now, but please upgrade your Node versions!. v3.8.2 should hit npm in a few moments, so an npm update should fix this issue on your end. \n(Edit: Wow, it is May already. v4 is dead. Time flies \ud83e\udd26\u200d\u2642\ufe0f ) \nCheers!\n. As is, this PR changes the library output: Swagger-Client is now available under default when using require:\n```js\nvar client = require(\"swagger-client\")\ntypeof client === \"function\" // false\ntypeof client.default === \"function\" // true\n```. > After change module.exports to ES module export, we need to import it by ES module import.\nAs an isomorphic module, we do our best to support all relevant loader formats, so saying \"just use ES module import syntax\" isn't a workable solution here. \n\nThis change won't affect end users, because of we've told webpack export the default property.\n\n@yesmeck, unless I'm missing something here, this does affect folks using require - while using ES import syntax, the default property is reached into, but CommonJS is not aware of this.\nThe end result is that ES module users get function SwaggerClient, and CommonJS (and probably others) users get { default: function SwaggerClient } - so changing the tests to use ES modules do not solve the underlying problem.\nWebpack's output.libraryExport option should be exporting default as the top-level value for the module, but it doesn't appear to be doing that correctly, since the tests using CommonJS modules were failing. That's why it's important that we test it \ud83d\ude04 . thanks for working with me here, @yesmeck!. @nkol, what package manager (and version) are you using?\nAlso, are you behind a proxy or a private/corporate npm registry?. @nknol, I can install the project with npm 3 just fine:\nsh\n\u279c  js git:(master) node -v\nv6.14.2\n\u279c  js git:(master) npm -v\n3.10.10\n\u279c  js git:(master) npm install\n[output removed, it was a regular successful install]\n\u279c  js git:(master) npm ls | grep object-assign-deep\n\u251c\u2500\u2500 @kyleshockey/object-assign-deep@0.4.1. @nknol great, thanks.\nAlso check that you're not using a private registry or npm proxy:\nsh\n\u279c  ~ npm config get registry\nhttps://registry.npmjs.org/\n\u279c  ~ npm config get proxy   \nnull\nIf you're on a corporate network, be aware that you might be behind a network-wide proxy that's causing these issues.. @nknol no problem! glad you got it sorted out \ud83d\ude04 . Thanks @srl295, going to look into this now.. Okay, I've been chasing this for a while and haven't nailed it down yet. This appears to be new in 3.8.5, I can require prior versions just fine.\nFirstly, I haven't been able to reproduce this in my local environment yet - it looks like Swagger-Client's development dependencies do pull in base64-js, so it's hard to run tests or build locally for this. \nSecond... only one production dependency mentions base64-js at all:\n\u279c  js git:(master) ag -l \"base64-js\" ./node_modules     \nnode_modules/fast-json-patch/package-lock.json\nThis is a package-lock.json, which shouldn't be in published packages at all - but beyond that, fast-json-patch hasn't released in 7 months, and we didn't change any usage of it last week, so it's very unlikely that this is the cause.\n\nIn fact, we changed very little in Swagger-Client last week (diff). \nMy intuition is that usage of the Buffer global triggered this, since the buffer module only has base64-js and ieee754 as dependencies, but I don't have a stack trace to back that up.\nNeeding to add that module as a dependency is at odds with what I'd expect: Webpack's NodeSourcePlugin should transparently polyfill the Buffer global since we're using the web target by default.. @vrsbrazil yeah, it looks like our development dependencies were incidentally adding the necessary modules to node_modules, which was keeping this from busting our CI.\n\nThis appears fixed from my end - I'm able to require swagger-client@3.8.6.\nPlease let me know if there are any lingering issues!. @vrsbrazil, did this end up not being the source of the issue?. This is probably caused by allof/$ref interaction in the resolver. Closing, looks like this is fixed: https://runkit.com/shockey/5b9adbf43a2b3b00126cb55d. Note to self: the fact that changing false to true here didn't break any tests is concerning - may need to add additional unit tests along with this PR. @artemyarulin, yes! I was planning to add some tests myself, but some cases that fail prior to this change would be great, if you're up to the task \ud83d\ude04 . Acknowledged - sorry for the issue here @kevinoid!\nAs a stopgap, I'm going to publish a patch (v3.8.8) that adds babel-runtime back to dependencies.. v3.8.8 is now available, which should mitigate the issue for now.\nNot sure where this is coming from just by looking at the stack trace, but I'll dig into it in the coming week.\nI'm also going to look into setting up some tests that simulate an npm consumer of the package - this is the second dependency-related regression we've had in as many months, so we clearly need a safeguard.. Closing; the current version now fails builds if a dependency is missing:\n2:1  error  'babel-runtime' should be listed in the project's dependencies. Run 'npm i -S babel-runtime' to add it  import/no-extraneous-dependencies. Hi @anupsaund!\nWe're unable to add support for this, since it's not part of the Swagger/OpenAPI Specification.\nIf you'd like support for colon notation in parameters, the first step is to start a discussion on the OpenAPI Specification repository: https://github.com/OAI/OpenAPI-Specification/issues/new.\nIf it's added to a future version of the specification, we can then add support for it here \ud83d\ude04 \nAlso note that you could (and for now, should) modify the output of your generator to translate colon path parameters to the templating format that OpenAPI calls for today.\n\nI'm going to close this out since it's not possible to accept such a change at this time. Thanks for your efforts!. Fixed, presumably by #1365.\nThis class of issue isn't completely fixed yet (see the label above), but we're thinning it out \ud83d\ude04 . Thanks for the report, @drschulz - there's a sibling issue over at Swagger UI for this: https://github.com/swagger-api/swagger-ui/issues/4720. > I might be wrong, but i think swagger-client, running in node environment, uses to fetch the specification each time.\n@SerCarciofini, this is correct. If you load your definition through a URL, it will be fetched every time your application runs.\n\n\nWhy should one prefer using this library (swagger-js) over using the swagger-code-gen\n\nThe projects are, indeed, built to solve similar but different problems. The main difference is that Swagger-Codegen creates an interface from your definition at build time, and Swagger Client creates an interface at run time.\nReasons to choose Swagger Client:\n- You're working with an OpenAPI-enabled service that changes frequently (Swagger Client will automatically keep up with changes, since it grabs the current OpenAPI document each time your application loads)\n- You're building an application that allows users to interface with their own services (this is why Swagger UI makes heavy usage of Swagger Client)\n- You prefer simplicity over performance\n- You need support for more OpenAPI 3.0 features (my understanding is that Swagger Client is further along with the more esoteric parts of 3.0 than Codegen)\nReasons to choose Swagger Codegen:\n- You're working with specific services that don't change often (since you'll need to generate a new client, probably manually, each time the service you're using changes)\n- Performance is a priority, even at the cost of having devs regenerate code manually from time to time. From @hkosova on June 19, 2018 23:45\nYour example produces the desired output in the latest version of the Swagger Editor at https://editor.swagger.io and does not trigger any errors. But this example does not make sense because schema D is equivalent to\nyaml\n    D:\n      type: object\n      allOf:\n        - properties:\n            field:\n              type: string\n        - properties:\n            field:\n              type: object\n              properties:\n                field:\n                  type: string\nor the simplified version\nyaml\n    D:\n      type: object\n      properties:\n        field:\n          allOf:\n            - type: string\n            - type: object\n              properties:\n                field:\n                  type: string\nand the top-level field property cannot be type: string and type: object at the same time.. From @Gingol on June 20, 2018 6:55\nHi @hkosova,\nthank you for your reply. I tried again to copy my example in the swagger editor you linked and I still get the errors. I attached an image:\n\nI know that it might not be the standard way to define schemas and that it might not be a common case, but I think that what should happen is just an override of the element like in both the example you posted.\nRegards. Hi @dalbrx-forcam!\nPlease add tests to your PR so I can get this merged \ud83d\ude04 . Merged - the test cases you wrote are just what I was looking for. Thanks @simonheys!. @srchulo, if you mean the generated client that you can download from Swagger Editor, Swagger Codegen is the right place: \nhttps://www.github.com/swagger-api/swagger-codegen\nRegardless, thanks for taking the time to file an issue!. Confirmed!. @kevinoid, v3.8.20 has been released with a fix (#1383) for this!\nPlease let me know if this doesn't resolve your issue.. Hey @boesing!\nThis isn't currently supported, but it's theoretically possible - JSON Pointer/Refs appears to allow it. I'm going to move this ticket to Swagger Client so we can track it as a feature for the resolver.. thanks @adjenks!. Hi @rwrife, Swagger Client (which handles resolution for Swagger UI) operates on a blacklist of things to not resolve, and doesn't currently ignore vendor extension fields.\nIt's not as easy as ignoring anything under a key that matches ^x-, though: for example, consider header names like x-rate-limit.\nI'm going to move this over to Swagger Client as a bug now \ud83d\ude04 . @fix-me, can you share the error you're seeing?. This would be fixed by publishing a Swagger Client bundle and declaring it in the browser field of our package.json.\nThat feature is covered in https://github.com/swagger-api/swagger-js/issues/1120 \ud83d\ude04 I'm going to close this out so we can track it there.\nThanks for filing this, @rezpe!. @rezpe, it seems to be working for me: https://beta.observablehq.com/@shockey/swagger-client. @rezpe, fear not, looks like this is a problem with our CI server. Looking into it!. @rezpe, turns out this is being caused by a Node.js issue (https://github.com/nodejs/node/issues/22857), I'm going to have our CI switched over to v8.11.4 - stand by \ud83d\ude04 . please build. please build. please build. OK - there we go \ud83d\ude04 . Oops - made a mess of the commits here, see #1399 \ud83d\ude13 . @npalethorpe, what do you see fi you do this:\n```js\nimport Swagger from 'swagger-client';\nconsole.log(Swagger)\n```. (If anyone else can do this, it would be helpful to see your output as well). @devth I can't give a specific date for a fix, but this is on our radar and will be worked on soon!. Thanks for filing this, @simoami. Any chance you could make a PR that solves the issue? \ud83d\ude04 . Hey @DavidTanner!\nUnfortunately, the OpenAPI Specification is very clear about this not being allowed:\n\nIf in is \"header\" and thename field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\nhttps://swagger.io/specification/#parameterObject\n\nThe best way to handle Authorization headers is to use security definitions and requirements. Here's a guide to that: https://swagger.io/docs/specification/authentication/. > the only alternative for this then would be to use another tool to make the callout. Can this be optional?\nI'm afraid not - as @webron mentioned, the spec disallows Authorization header parameters because supports it through a different construct. This has been the case for a long time (see https://github.com/OAI/OpenAPI-Specification/issues/152). \nSwagger Client - as an OpenAPI-compliant tool - is required to follow the specification as closely as possible, so that our tool provides a consistent experience across other OpenAPI tools.\nIt's not great that you had to do digging before you were able to find the reason that your parameter was being dropped, though - we can add a warning to make it more clear.. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. hey @lucidtech! are you referring to asCurl?. ~@lucidtech gotcha! for now, cURL construction lives in Swagger UI as of version 3.~\n~I'm not overwhelmingly inclined to move it, but if this issue gets traction we can do it.~. Going to close this for the time being - our position is that cURL command generation is more of a documentation feature than an HTTP client feature, and thus should live in Swagger UI.. @extramuros glad you figured it out! \ud83d\udc4d . @bestmike007, I don't know of any efforts to do this, but if it's something that's testable (assert: do the TS definitions match what we're exporting at any given time?) it sounds like a great enhancement \ud83d\ude04 . @bestmike007, we aren't in a position to accept a TypeScript rewrite at this time, but a definition file would be great.\nWe may explore a TS rewrite at a later time - feel free to email me and we can chat further about it.. Quoting myself from #1044:\n\nI'm going to close this one out, here's why:\nfile:// URLs are not really useful, since they're very difficult to use in browsers due to Same-Origin Policy and very few Node request libraries support them.\nAs for loading in a definition that you already have in memory: you can pass your definition as a JS object under the spec key.\nFeel free to reply if you disagree with any of this, and I'll consider reopening. Thanks everyone!\n\nAs mentioned, the best approach is to pull your local file in manually and pass it as an object to Swagger Client.\nClosing!. @vvanpo we stopped assuming Content-Type based on payload content in an effort to more closely follow what a user's OpenAPI 2.0 document calls for. If you specify a consumes value for the operation, we'll use it... if not, we'll omit the header entirely.\nConversely, setting Content-Type when a document doesn't call for it through a consumes value ends up with our tool exposing functionality that isn't described in the underlying document, which makes interoperability between OpenAPI-ecosystem tools less likely, and the resulting request more confusing to end users.. @devth thanks for leaving a solution! \ud83d\ude04 . > If the backend throws an error, it would be good to get the details of the response directly on the highest layer\n@nmaoez I have a pull request open for this (https://github.com/swagger-api/swagger-js/pull/1281), but as you can see there are some concerns around it being a breaking change. Can't say whether it will make it into master in the future.\n\nwhy did you close this issue?\n\n@kguelzau this ticket was a support request from @devth, who ended up solving their own problem. If you're having a problem, feel free to open your own issue \ud83d\ude42 . @extempl, I'll take a look at the PR this week \ud83d\ude04 . @extempl, new release (v3.20.6) is now live on npm \ud83d\udc4d. Closing as resolved!. @extempl indeed... sorry, v3.20.6 was the new Swagger UI version \ud83e\udd26\u200d\u2642\ufe0f . thanks @extempl!. @tillg interesting... the module definitely exists: \nhttps://www.npmjs.com/package/@kyleshockey/js-yaml/v/1.0.1. Looks like your npm is (incorrectly?) url-encoding the user-scope forward slash to %2F. \nI\u2019ve seen older versions of npm fail to handle user-scoped modules, but never new versions. Are you certain this is coming from npm@6.6.0?. Following up here - this isn't happening for me on macOS Mojave 10.14.2 (18C54) with Node.js 8.11.2 and npm 6.6.0.\n```\n\u279c  npm -v\n6.6.0\n\u279c  npm init -y\nWrote to /Users/kyle/Code/1421-test/package.json:\n{\n  \"name\": \"1421-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\u279c  npm i swagger-client\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN 1421-test@1.0.0 No description\nnpm WARN 1421-test@1.0.0 No repository field.\n\nswagger-client@3.8.23\nadded 39 packages from 54 contributors and audited 40 packages in 3.479s\nfound 0 vulnerabilities\n\n\u279c  npm i @kyleshockey/js-yaml\nnpm WARN 1421-test@1.0.0 No description\nnpm WARN 1421-test@1.0.0 No repository field.\n\n@kyleshockey/js-yaml@1.0.1\nupdated 1 package and audited 43 packages in 0.681s\nfound 0 vulnerabilities\n```\n\n@tillg, is your npm configured to go through a local or remote proxy?. Closing due to inactivity. \nThis is simply to keep our issue tracker clean - feel free to comment if there are any further thoughts or concerns, and we'll be happy to reopen this issue.. New behavior:\n\n. You can see a test for this logic here: https://github.com/shockey/swagger-js/blob/bug/1003-operation-ids/test/interfaces.js#L345\nTwo operations with the id getOne would yield a getOne1 and getOne2, but no getOne. The test confirms this \ud83d\ude04 . I removed this and all tests continued to pass.\nI think this was a transient issue related to the failing XMock test.. @buunguyen Ah, I understand you now. I just pushed a fix for this case, and expanded the test case to match: https://github.com/swagger-api/swagger-js/pull/1048/commits/8dfc734f3641b821dfc410f19678b7ad01657666. Note that the test also makes sure that the tags are in order and not being inadvertently overwritten, by use of the count variable in the test.. Looks like it's not currently in the codebase \ud83d\ude04 . Why was this changed?. Why are we throwing in execute, via the request.error switch, instead of throwing the error directly in buildRequest?. aha. Good catch, thanks!. I'd prefer for the token_type detection for bearer to be case-insensitive, i.e. our Bearer override value in the header will kick in for token_type bearer, BEARER, BeArEr.\nI know this is a minor point, and there may not be an OAuth server implementation that sends those values, but if we're not paying attention to token_type bearer vs Bearer, I'd like to go all the way with it, instead of adding a new magic token_type that triggers the correct header value.. We should probably be calling this freelyNamedPaths since these are complete paths, not parent keys (the original sin here is mine). Would like to see a property named $ref tested as well (new test or added to existing one, i'm not picky!). Confirmed working by deploying https://unpkg.com/@kyleshockey/swagger-client@3.8.22-alpha.1/. ",
    "kojoru": "I'm not sure how to go about testing the commit. There are no apis in petstore which offer 2+ optional query params. Should I add some new operations to sample API?\n. Can't do that since that's a 1.x-only bug.\n. I can't access SwaggerOperation from swagger-compat.js in tests, can I?\n. I did eventually write tests with adding new operation to the 1.2 spec. Please let me know if there's a better way.\n. Ok, let me know if there's anything I need to do for it to be merged.\n. ",
    "csuich2": "I read through https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md and didn't se anything that would specify whether a null value for an operation was valid or invalid. Did I miss something in the spec that defines this?\n. The reason the HTTP verbs are null is because of our APIs serialization. We explicitly serialize null values using GSON for all of our API responses which may not be a common practice, but I'm not sure I would label it as uncommon either.\n. Thanks for talking this through, everyone! I've opened an issue for some clarification on the spec project.\nThanks!\n. Got it - just a misunderstanding. I've got a couple tests that are working. Just dealing with the branch changes. I'll submit a new pull request soon since @mohsen1 requested it to be for develop_2.0.\n. Bumping this. @whitlockjc - did you want to accept this?\n. Yep - they are passing locally so I am trying to figure out what the difference is. =)\n. @whitlockjc I'm quite new to a lot of the tools here and seem to be stumped. Both of those tests are passing on my machine and the errors seem like the test is being executed without the first of the commits being in place (since the first commit fixed the issue and the second added tests).\nCould it be that I am setting up the pull request wrong or is Travis-CI only testing with one of my commits and not both?\n. Or could it be that I am not checking in swagger-client.js? Should I be committing that after I build?\n. Done. Looks like Travis-CI hasn't kicked off a new test yet.\n. There we go. I initially tried to figure out whether I should commit the lib/* changes, but it looked like some commits didn't include that and I wanted to err on the side of caution.\n. ",
    "kungfoo": "I am actually stuck using swagger, because of this bug. The invalid document is produced by swagger-jaxrs itself, so that might also need fixing. Is it going to be merged soon?\n. ",
    "xialu4820723": "I have encountered this problem on swaghub today, maybe we should reopen this issue?\nexample url in swaghub. ",
    "wangning0": "I also have encountered this problem on swaghub today, maybe we should reopen this issue?\n. ",
    "doublemarked": "Thank you! :)\n. ",
    "Billiam": "There are large changes to swagger-js project structure as part of the recent browserify support. I'm going to rebase and reissue this pull request later.\n. ",
    "eburi": "Sorry. And thanks for closing.\nGot it working for me here https://github.com/eburi/swagger-js/tree/develop_2.0 with develop_2.0 - but had no time for the PR, yet.\nHow can I do a PR/Commit to #336? It's really just the https://github.com/eburi/swagger-js/blob/develop_2.0/bower.json - I filled it with information from the repository, but don't know what \"authors\" I should put and had no time either to figure out how to change the versioning-process. \n. Adds a bower.json #336 \nTagging and versioning needs to be setup properly. Don't have time to digg into that.\nNeeds to be registered, mentioned here #286, in the mean time you could install swagger with:\nbower install --save  git@github.com:swagger-api/swagger-js.git#develop_2.0 \n. ",
    "HolgerVogelsang": "I'ts not rocket science:\n1. Open swagger-ui.js\n2. Search for function processModel(schema, name)\n3. Change the first lines of this function to something like this (or whatever you want to display):\n```\n  function processModel(schema, name) {\n    var type = schema.type || 'object';\n    var isArray = schema.type === 'array';\nvar html = schema.description !== undefined ? '<div style=\\'margin-left: 0px; font-size: 14px;\\'>' + strongOpen + '// ' + schema.description + strongClose + '</div>' : '';\nhtml += (strongOpen + name + ' ' + (isArray ? '[' : '{') + strongClose);\n\n```\n. ",
    "todd-richmond": "this seemed to close the original bug with all the details instead of the dup\n. On the \"Model\" tab, I'd like to see fields like this:\nmap_field (map, optional): description\nand include the Clazz object section as well\nThe \"Model Schema\" tab could show JavaScript like\n\"map_field\": { \"string\": clazz }\n. what is working? I'm using the latest core 1.5.3 and UI 2.1.8.M1 and just see this for a model that has a map field. No reference to what the object is either\nmap_field (object, optional): description\n{\n    type: \"object\",\n    description: \"system prerequisites\",\n    additionalProperties: {\n        $ref: \"#/definitions/Prereq\"\n    }\n},\n. Here is a simplified version. However, it also shows \"object\" for dataType = \"Map[string,string]\"\npublic class Host {\n    public static class Prereq implements Serializable {\n        @ApiModelProperty(\"current value\")\n        private String value;\n        @ApiModelProperty(\"correction help message\")\n        private String message;\n        @ApiModelProperty(\"minimum required value\")\n        private String required;\n    }\n    @ApiModelProperty(value = \"system prerequisites\", dataType =\n        \"Map[string,com.foo.model.Host$Prereq]\")\n    private Map<String, Prereq> prereqs;\n}\n. What should the ApiModelProperty syntax look like? I'm actually using a direct subclass of Map purely to allow storing the hibernate column data as JSON instead of serialized java (no extra methods other than an AttributeConverter)\nIf I don't supply the dataType, the field doesn't show up in the UI at all\n. I'm using 1.5.3.M1 and private Map foo; still displays as \"object\" in the UI (2.1.8-M1 npm package). I don't see a newer UI release\n. ",
    "ikitommi": "hi. this spec doesn't render any additional properties with v2.1.1-M2:\nhttps://gist.githubusercontent.com/ikitommi/006240a06500634caeaa/raw/44730d096578ce086a734c84887767a41f1b9ff4/swagger.json\n. Ok, and thanks for the info.\n. ",
    "maver1ck": "Is there any ETA of next release ?\nOr maybe a branch of code I can use ?\nWhat about editor.swagger.io ?\n. ",
    "netzwerch": "Works, thanks!\n. ",
    "liviosoares": "This also fixes issue  #293 for me.\n. Hi @whitlockjc. Sure, I added a test. This was my first time using Mocha (and expect), so please review.\nFor me, the unit test is broken on current develop_2.0, but fixed with my one liner (@7817330).\n. ",
    "saadmufti": "The original issue was actually about surrounding an enum with quotes when used as a POST body parameter and the content-type is application/json\n. ",
    "ehmicky": "Also #286 uses the Node.js library in the main field, as opposed to the browser library.\n. ",
    "TrentBrown": "I'm searching for answers to questions #2 and #3 above, too.\n. ",
    "zub2": "Same here, I would like to use the library, but to do that I had to dig quite deep into the guts to see what methods are generated and what arguments they accept.\nPerhaps it's obvious to you, but I found it difficult - how to go from a method in the swagger spec I want to call to a statement in JS that calls it, passing the parameters correctly etc.\nI'd like to see a clear description of how the api spec turns into the client instance. How to access the methods (client.apis.something? or client.something.else?). What arguments to pass to the generated function ({all api call args}, {opts}, ...)). I found out there is \"opts\" argument that can have some extra opts. What opts are supported? What do they do.\n. Thanks for feedback. Too bad it's not my API.\nWhen I use 2.0.49, I see a different issue. Should I report the bug, or is 2.0.x dead?\n. For added context: The server is Apache 2.2.22, and there is mod_wsgi handling the request. This is related to Transfer-Encoding: chunked. When I send a request by curl to the server using -H \"Transfer-Encoding: chunked\", I get 411.\nSome more digging reveals that when the Conent-Length header is not added, node's http (and https, I assume) module adds Transfer-Encoding: chunked automagically. According to https://nodejs.org/api/http.html#http_http_request_options_callback:\n\nSending a 'Content-length' header will disable the default chunked encoding.\n\nAnd in my understanding of http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6, this should be valid behavior and I don't see why would Apache reply with 411. Perhaps it's a bug of Apache or mod_wsgi.\n. M'kay... so I found it: https://stackoverflow.com/questions/17255556/http-headers-for-chunked-encoding-post-error-411?answertab=votes#answer-17256412 and as far as I can tell, it's mod_wsgi ignoring HTTP/1.1 spec and the behavior of node + swagger-js is correct.\nSorry for the noise.\n. ",
    "sl2": "+1\n. +1\n. ",
    "oblonski": "Interestingly, it works with swagger-ui-2.1.8-M1, i.e. numbers are rendered correctly.\n. ",
    "dmyers": "@hamx0r Is there a way to add title support for referenced schemas? I have a title property on all of my schemas, but ones that are referenced are not using the title though.\n\n\n. ",
    "venkataharishbillapati": "Is this issue fixed? I am still facing this problem.\n. ",
    "beryozad": "As noted elsewhere this behavior can also be observed in http://petstore.swagger.io/#!/user/createUsersWithArrayInput - parameter \"body\" is shown as \"Array[#/definitions/User]\"\nOnce it is fixed, will it only be shown as \"Array[User]\", or will there be a way to expand it to see the definition of User? \nThanks!\n. ",
    "sberryman": "done\n. Ha, damn the default merge button on github to the master branch :)\n. ",
    "ebrukaya": "I had the same issue and after a day of debugging, found a solution by adding the following statements to schemaToJSON method in swagger-ui.js\nelse if (type === 'number') {\n      output = 0.0;\n    }\n. ",
    "xelwarto": "Is there a PR for this fix or any plan to merge? or should we just test with the develop_2.0 branch?\n. ",
    "nurinamu": "detectedType.toLowerCase() fired the exception when detectedType has a object. It includes the actual value in one more lower level - absoluteType. Anyway I'll generate the issue to springfox and close this issue. Thanks.\n. ",
    "ethanjcohen": "Ignore this, can't seem to reproduce this issue\n. Just replace the code inside of the setTimeout(..., 10) with this code and it will work:\n``` JavaScript\n//This is the check you need to do\nif (self.spec.swagger && parseInt(self.spec.swagger) === 2)\n        {\n            new Resolver().resolve(self.spec, self.buildFromSpec, self);\n        }\n        else\n        {\n                //Convert the spec, just like in the section above this\n            self.swaggerVersion = self.spec.swaggerVersion;\n        var converter = new SwaggerSpecConverter();\n          converter.setDocumentationLocation(self.url);\n          converter.convert(self.spec, function(spec) {\n                new Resolver().resolve(spec, self.buildFromSpec, self);\n                self.isValid = true;\n          });\n    }\n\n```\n. Sure, here's my code to convert a swagger spec/schema into a client:\n``` JavaScript\nfunction getGeneratedAPIs(cb)\n{\n    var schema = require(schemaLocation);\nvar SwaggerClient = require(\"swagger-client\");\n\nvar swagger = new SwaggerClient({\n    url: 'http://localhost:4000/api-docs',\n    spec: schema,\n    success: function()\n    {\n        cb(swagger.apis);\n    }\n});\n\n}\n```\nschema is a swagger 1.2 spec object (built using swagger-node-express)\nIf you look in /lib/client.js, under this function:\nJavaScript\nSwaggerClient.prototype.build = function (mock) {\nYou'll see that it checks for a spec, but doesn't bother checking the version:\nJavaScript\n  if (this.spec) {\n    setTimeout(function () {\n      new Resolver().resolve(self.spec, self.buildFromSpec, self);\n   }, 10);\n  } else {\nThe code directly above that handles the old version, but that only gets called if an http request is done, I believe:\n``` JavaScript\nresponse: function (resp) {\n        var responseObj = resp.obj || JSON.parse(resp.data);\n        self.swaggerVersion = responseObj.swaggerVersion;\n    if (responseObj.swagger && parseInt(responseObj.swagger) === 2) {\n      self.swaggerVersion = responseObj.swagger;\n\n      new Resolver().resolve(responseObj, self.buildFromSpec, self);\n\n      self.isValid = true;\n    } else {\n\n//RIGHT HERE - This is the important missing part from the other section of code\n          var converter = new SwaggerSpecConverter();\n          converter.setDocumentationLocation(self.url);\n          converter.convert(responseObj, function(spec) {\n            new Resolver().resolve(spec, self.buildFromSpec, self);\n            self.isValid = true;\n          });\n        }\n      }\n```\n. It's a lot of code, so I may be missing something - but it looks like someone added the conversion in one place but not the other.\n. Doesn't look like the tests cover this case. From tests/client.js:\nJavaScript\n//Only version 2 is tested\nvar petstoreRaw = require('./spec/v2/petstore.json');\n. I saw that, but couldn't find where the client was being tested\n. I see that now. But they still don't test the \"spec\" property.\nJust building from URLs, for example:\n``` JavaScript\n it('allows override of headers when fetching the swagger specification', function () {\n    var opts = {\n      swaggerRequestHeaders: 'foo/bar'\n    };\n    var sample = new SwaggerClient('http://localhost:8000/api-docs.json', opts);\n    var req = sample.build(true);\nexpect(req.headers.accept).toBe('foo/bar');\n\n});\n```\n. Already looked at that file. I'll take a look at all of them more later so see if there's something like the code I'm using.\n. Ok I see what you're saying. I've been passing in a single file to that variable, which is how my modification has gotten it to work. I'm using the specification built from the fetch library, which concatenates everything into one file.\n. From my dependencies: \"fetch-swagger-schema\": \"0.1.2\"\nhttps://github.com/signalfx/fetch-swagger-schema\nIf you look at the swagger-client-generator page, it mentions this library, which is working pretty good for me.\nhttps://www.npmjs.com/package/swagger-client-generator\n. Awesome, thanks.\n. Was the code ever modified to accommodate this (i.e. loading the 1.2 spec from an object rather than a URL)?\n. I just tested this fix in my code and it works great:\n``` JavaScript\nif (missingParams.length > 0) {\n    var message = 'missing required params: ' + missingParams;\n//remove this, because error is helper.log by default\n    //helpers.fail(message); \n//this is the new code, call the error callback or log\n    return error(new Error(message), parent); \n  }\n```\n. What do you mean? PR? o_O\n. Ah. Right lol\nI'm building up a pretty good list of bugs I've fixed now, so I'll submit one at some point. But for now, I don't have enough time to fully examine the code and test my changes. I'm not knowledgeable enough to ensure that my changes won't break anything.\nSo, I'm supplying small fixes here, in the hope that someone more experienced will include them in a pull request.\n. Unless you're ok with half-tested changes in a pull request. Not sure how this project has been using pull requests.\n. I assumed not.\n. See, I just realized that returning an Error object to error(...) isn't 100% correct, because a response object is usually returned instead.\nSo, I'm not sure what the original designers intended to happen, in the case of invalid params. Ideally, error() should return an error object, with the response inside that, since the error can come from the library itself. Or, there needs to be another way to detect these validation errors from the library, since the error callback is supposed to get the response object.\n. ",
    "karussell": "This here could work https://github.com/swagger-api/swagger-js/issues/365#issuecomment-92635363\n. solved it via:\n``` javascript\nvar self = this;\n$.getJSON(\"somewhere.com/swagger.json\", function (json) {\n    // overwrite if localhost but do not include http://\n    if (self.host.indexOf(\"localhost\") > 0)\n        json.host = \"localhost\";\nself.api = new SwaggerClient({\n    spec: json,\n    success: function () {\n        console.log(\"api ready \" + self.api.host);\n    }});\n\n});\n```\n. ",
    "BjRo": "Updated to use jQuery for trimming.\n. @fehguy @mohsen1 Now looking at that, I don't think parseBody is coming from swagger-js itself. Looks more like it's coming from the superagent package https://github.com/visionmedia/superagent/blob/abc5a452778cd6c7a03bd8a8c0c6067835990f8e/lib/client.js#L360 and is only merged into the swagger-client.js file. Can you confirm?\n. So, I've tried to remove the patch from parseBody and apply it to SwaggerHttpClient.execute but unfortunately that doesn't work. \nWhen Rails sends a 201 with whitespace in the response body and application/json as the content type \nalready the creation of the Response object fails because in the Response constructor it already tries to parse the body.  \nThis is how the response ends up being represented in the UI\n\nI'm not sure whether the Response interceptor would solve this problem because in that particular case the Response can't even be created :-/\nHow do you think should we proceed with this? My fix clearly doesn't work (at least the way I proposed it) Should I open a bug and close this PR?\n. @fehguy I reverted the jQuery commit\n. ",
    "tlbdk": "OK, Github does not seem to allow me to retarget the pull request, so I will re do on develop_2.0 branch and do a new pull request\n. I have created a new pull request here : https://github.com/swagger-api/swagger-js/pull/379\n. ",
    "cancan101": "Does this change just mark all properties as required though?\n. NM. Looks like some issue with DRF-swagger.\n. A slightly modified django rest swagger though I don't think the modifications should have made it less compliant.\n. Would you be okay with the following which does allow for a more lenient interpretation of the 1.2 spec: \nhttps://github.com/cancan101/swagger-js/commit/0945c776f54415d7937fab390f279e89534d41e4 ?\n. Referenced commit also fixes: #424\n. Any updates on the ability to override the Host? . ",
    "fragag03": "Ok done. It's my first time doing this so I hope everything is ok.\n. ",
    "ladenedge": "@slidenerd: You're probably on a newer version.  Check out the Migration from 2.x instructions.. ",
    "ralphvanetten": "Also, when using https://github.com/apigee-127/swagger-tools to validate the swagger file, the validator also does not like having the \"schema\" wrapper present.\n. It is the example from https://github.com/swagger-api/swagger-ui/issues/1228 :\n{\n   \"paths\" : {\n      \"/person\" : {\n         \"post\" : {\n            \"parameters\" : [\n               {\n                  \"in\" : \"body\",\n                  \"name\" : \"body\",\n                  \"schema\" : {\n                     \"$ref\" : \"Person\"\n                  }\n               }\n            ],\n            \"tags\" : [\n               \"person\"\n            ],\n            \"summary\" : \"Create new person\",\n            \"responses\" : {\n               \"200\" : {\n                  \"schema\" : {\n                     \"$ref\" : \"Person\"\n                  },\n                  \"description\" : \"Success\"\n               }\n            }\n         }\n      }\n   },\n   \"swagger\" : \"2.0\",\n   \"basePath\" : \"/person\",\n   \"info\" : {\n      \"title\" : \"Person API\",\n      \"version\" : \"1\",\n      \"description\" : \"\"\n   },\n   \"tags\" : [\n      {\n         \"name\" : \"person\",\n         \"description\" : \"Persons\"\n      }\n   ],\n   \"definitions\" : {\n      \"map1\" : {\n         \"type\" : \"object\",\n         \"properties\" : {\n            \"anId1\" : {\n               \"title\" : \"Id\",\n               \"type\" : \"string\"\n            }\n         },\n         \"title\" : \"map1\"\n      },\n      \"map2\" : {\n         \"type\" : \"object\",\n         \"properties\" : {\n            \"anId2\" : {\n               \"title\" : \"Id\",\n               \"type\" : \"string\"\n            }\n         },\n         \"title\" : \"map2\"\n      },\n       \"Person\" : {\n         \"type\" : \"object\",\n         \"title\" : \"Information about a person\",\n         \"properties\" : {\n            \"externalId1\" : {\n               \"title\" : \"first\",\n               \"type\" : \"object\",\n               \"$ref\" : \"#/definitions/map1\"\n            },\n            \"externalId2\" : {\n               \"title\" : \"second\",\n                \"type\" : \"array\",\n                \"items\": {\n                    \"$ref\" : \"#/definitions/map2\"\n                }\n            }\n         }\n      }       \n   }\n}\nThe suggestion given in that issue is to wrap the $ref inside a schema but I can not find any reference in the swagger spec or the JSON schema spec this extra schema is needed.\n. No, perhaps its a poor choice for those names, but map1 and map2 are supposed to be normal JSON objects with a couple of fields.\n. So title and type are not allowed?\n. Ah, yes, I tried it and as soon as you add title it does not work anymore.\n. Ok, thanks for the reference.\nHowever, I tried putting a description there and this works :\n\"properties\" : {\n            \"externalId1\" : {\n                \"$ref\" : \"#/definitions/map1\",\n                \"description\": \"hello\"\n            },\n\nIf this is not allowed, how can you add a description which shows up in swagger-ui?\n. Ok, I thought the description is used to describe the field (externalId1 and externalId2 in this case). \nIf the description must be on the referenced object, then you can not have a different description if you have multple references to the same object?\nSo something like:\n\"properties\" : {\n            \"externalId1\" : {\n                \"$ref\" : \"#/definitions/map1\",\n                \"description\": \"This is the ID for the first thing.\"\n            },\n            \"externalId3\" : {\n                \"$ref\" : \"#/definitions/map1\",\n                \"description\": \"This is the ID for the third thing.\"\n            },\nis not correct and not otherwise possible?\n. Isn't this a bit of a flaw in the (swagger) spec?\nI have a fairly large object used by many other objects. Using $ref would be a nice solution to keep the swagger file small but if you do you can't have different descriptions in the object which uses the reference.\n. I looked at the JSON reference spec. again and according to the spec it is fine to have other properties besides $ref :\n\nIf a JSON value does not have these characteristics, then it SHOULD\n NOT be interpreted as a JSON Reference.\n...\nAny members other than \"$ref\" in a JSON Reference object SHALL be\nignored.\n\nhttps://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03#section-3 \nSo it seems the spec leaves room for adding a title and description property which are then shown by swagger-ui.\n. I'll see if I can find a minimal sample\n. It is caused by a non existing $ref:\n{\n   \"swagger\" : \"2.0\",\n   \"info\" : {\n       \"description\" : \"...\",\n      \"title\" : \"API\",\n      \"version\" : \"1\"\n   },\n   \"basePath\" : \"/x\",\n   \"paths\" : {\n      \"/test\" : {\n         \"post\" : {\n            \"responses\" : {\n               \"200\" : {\n                  \"description\" : \"Success\",\n                  \"schema\" : {\n                     \"$ref\" : \"#/definitions/Object\"\n                  }\n               }\n            }\n         }\n      }\n   },\n   \"definitions\" : {\n      \"Object\" : {\n         \"properties\" : {\n            \"link\" : {\n                \"title\" : \"Links\",\n                \"schema\": {\n                    \"$ref\" : \"TODO\"\n                },\n               \"type\" : \"object\"\n            }\n         },\n         \"type\" : \"object\"\n      }\n   }\n}\n. Is there something else wrong besides the non existing reference?\nAnyway, link is supposed to be a JSON object which is described somewhere else. Hence the $ref.\nBut in this case I made a mistake in the swagger file and got the $ref wrong and it then gives the \"can not read property\" error.\nI created this issue because swagger does not seem to handle this error in the swagger file cleanly and it was very difficult to find out what exactly was wrong with my swagger file.\n. The schema property was suggested as a solution in another issue. But yes, the schema is not valid. Only it would be nice if there was a more friendly error message.\n. ",
    "mutkur": "Going by the above discussion is it legal to have a $ref along with other fields 'type' and 'description' etc? I have \njson\n\"BatchOrdersPromotions_3\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"promotionId\": {\n                    \"description\": \"The unique id of the promotion.\",\n                    \"type\": \"string\"\n                },\n                \"promotionEffectivePeriod\": {\n                    \"type\": \"object\",\n                    \"$ref\": \"#/definitions/BatchOrdersPromotionEffectivePeriod_5\"\n                }\n            }\n        }\nIn the above snippet is it legal to have field \"type\":\"object\" with the property promotionEffectivePeriod since it is a $ref? If that is legal, is it required that the \"promotionEffectivePeriod\" have properties of itself since it is defined as \"object\" type. I could not find any references in the spec. . ",
    "olensmar": "i've fixed this by adding \"apis\" to the reservedClientTags list as well - due to line 344 in client.js:\noperationGroup = self[clientProperty] = self.apis[apiProperty] = {};\nsince the value of clientProperty is \"apis\", the assignment overwrites itself.\n@webron / @fehguy if there is no prettier way to fix this I can submit a PR\n. great - thank you!\n. isn't the relative reference always relative to the absolute path of the containing file/resource? So in your 4th example above @fehguy it would resolve relative to the path http://foo.com/bar/models/Category - which I think is in line with what @jasonh-n-austin added!?\n. ",
    "adborden": "That example just hangs. Looks like I still need to specify a \"success\" callback in order to kick off the build method. Is this the preferred method then?\njavascript\nclient.initialize({\n  spec: schema,\n  success: function() { \n    client.pets.getById({petId: 3}, function(response) {\n      // do something with your pet\n    });\n   }\n});\n. Just ran into this, thanks for fixing!\n. ",
    "Hes-Siemelink": "Thanks Tony! :-)\n. ",
    "dirwin517": "Had to strip stuff out, but hopefully thats enough and still valid\n``` javascript\n{\n    \"apiVersion\": \"v1\",\n    \"swaggerVersion\": \"1.2\",\n    \"apis\": [{\n        \"path\": \"/doc/supplier_contracts\",\n        \"description\": \"Supplier Contract Endpoints\"\n    },  {\n        \"path\": \"/doc/markets\",\n        \"description\": \"Market Endpoints\"\n    }],\n    \"authorizations\": null,\n    \"info\": {\n        \"title\": \"API Documentation\",\n        \"description\": \"\",\n        \"termsOfServiceUrl\": \"\",\n        \"contact\": \"\",\n        \"license\": \"\",\n        \"licenseUrl\": \"\"\n    }\n}\ninside doc/supplier_contracts\n{\n    \"apiVersion\": \"v1\",\n    \"swaggerVersion\": \"1.2\",\n    \"basePath\": \"/api/v1\",\n    \"resourcePath\": \"/supplier_contracts\",\n    \"produces\": [\n        \"application/json\"\n    ],\n    \"consumes\": [],\n    \"protocols\": [],\n    \"authorizations\": [],\n    \"apis\": [\n        {\n            \"path\": \"/supplier_contracts\",\n            \"description\": null,\n            \"operations\": [\n                {\n                    \"method\": \"GET\",\n                    \"summary\": \"Get Supplier Contracts\",\n                    \"notes\": \"Retrieve supplier contracts\",\n                    \"responseClass\": \"SupplierContract\",\n                    \"nickname\": \"getSupplierContracts\",\n                    \"position\": 0,\n                    \"produces\": [],\n                    \"consumes\": [],\n                    \"protocols\": [],\n                    \"authorizations\": [\n                        {\n                            \"type\": \"\",\n                            \"scopes\": [\n                                {\n                                    \"scope\": \"\",\n                                    \"description\": \"\"\n                                }\n                            ]\n                        }\n                    ],\n                    \"parameters\": [\n                        {\n                            \"name\": \"ids\",\n                            \"description\": \"Supplier Contract Ids\",\n                            \"defaultValue\": null,\n                            \"required\": false,\n                            \"allowMultiple\": false,\n                            \"dataType\": \"List[string]\",\n                            \"allowableValues\": null,\n                            \"paramType\": \"query\",\n                            \"paramAccess\": null\n                        }\n                    ],\n                    \"responseMessages\": [],\n                    \"deprecated\": null\n                }\n            ],\n            \"models\": {\n                \"SupplierContract\": {\n                    \"id\": \"SupplierContract\",\n                    \"name\": \"SupplierContract\",\n                    \"qualifiedType\": \"com.enernoc.cost.tariff.model.SupplierContract\",\n                    \"properties\": {\n                        \"id\": {\n                            \"type\": \"string\",\n                            \"qualifiedType\": \"java.lang.String\",\n                            \"position\": 0,\n                            \"required\": true,\n                            \"description\": \"Supplier Contract ID\",\n                            \"allowableValues\": {},\n                            \"items\": null\n                        },\n                        \"label\": {\n                            \"type\": \"string\",\n                            \"qualifiedType\": \"java.lang.String\",\n                            \"position\": 0,\n                            \"required\": true,\n                            \"description\": \"Human readable label\",\n                            \"allowableValues\": {},\n                            \"items\": null\n                        },\n                        \"currency\": {\n                            \"type\": \"string\",\n                            \"qualifiedType\": \"java.lang.String\",\n                            \"position\": 0,\n                            \"required\": true,\n                            \"description\": \"Currency\",\n                            \"allowableValues\": {},\n                            \"items\": null\n                        },\n                        \"name\": {\n                            \"type\": \"string\",\n                            \"qualifiedType\": \"java.lang.String\",\n                            \"position\": 0,\n                            \"required\": false,\n                            \"description\": null,\n                            \"allowableValues\": {},\n                            \"items\": null\n                        }\n                    },\n                    \"description\": null,\n                    \"baseModel\": null,\n                    \"discriminator\": null,\n                    \"subTypes\": []\n                }\n            },\n            \"baseModel\": null,\n            \"discriminator\": null,\n            \"subTypes\": []\n        }\n    ],\n    \"description\": \"Supplier Contract Endpoints\",\n    \"position\": 0\n}\n```\n. ",
    "javiervidal": "Any reason for closing it?\n. Sorry, it's the issue in swagger-ui the one that has been closed. I need more coffee. \n. ",
    "pip25": "I'm not in the position to share it, but my Swagger definition is working just fine with earlier versions of Swagger-UI. By the way, the infinite loop disappears if I comment out the whole \n``` javascript\n    if (!_.isUndefined(cProperty.$ref)) {\n              model = models[helpers.simpleRef(cProperty.$ref)];\n          if (_.isUndefined(model) || _.indexOf([undefined, 'array', 'object'], model.definition.type) === -1) {\n            // Use referenced schema\n            cProperty = helpers.resolveSchema(model.definition);\n          }\n  }\n\n```\npart. Then the UI renders fine.\n. Latest of the develop_2.0 branch of Swagger UI, which depends on Swagger Client 2.1.4-M2. I was trying to test the fix for another issue (https://github.com/swagger-api/swagger-ui/issues/1139) when I ran into this one.\n. Yes, I can confirm that the issue is no longer present in the current swagger-js develop_2.0 branch HEAD. Thank you. :)\n. ",
    "mikewatt": "Ok, I can appreciate the subtleties of 1.2 to 2.0 conversion now.\nInstead of assuming the default response is a 200, why not always write the default response as the swagger 2.0 'default' response object?\nFWIW, we are sticking with swagger-ui 2.0.24 for now. There's a non trivial amount of work for us to update from a 1.2 to 2.0 definition as the definition is dynamically aggregated from a bunch of micro-services. We were hoping to update the UI first, then work on the backend update. I'm happy for this issue to be closed unless there's any realistic chance of changing the conversion behaviour.\n. ",
    "prashanthmadi": "Thanks @ponelat, your sample code helped me in fixing the issue. \n. ",
    "joeheyming": "Naive pull request: https://github.com/swagger-api/swagger-js/pull/454\n. Thanks for the heads up.  Sorry for the mistake.  I just resubmitted it.\n. Sorry for failing using git so much\n. Ok, I added some tests and am working on the develop_2.0 branch, I'm gonna try again\n. @webron  in general, do I need to do a build before I push to my remote branch?  Does my commit only need the changes to operation.js?\n. sure, close this one.\n. hmmm, when i run \"npm run build\", I see changes that are unrelated to mine.  I'm wondering if my branch is not correct.\n. git branch -vv\n- develop_2.0 064a95a [origin/develop_2.0] Merge pull request #464 from ponelat/feature/default-to-application-json-if-we-can\n. ok, added the other changes\n. ",
    "glen-84": "\nOK currently, the allOf support is limited to top-level models defined in the #/definitions section of the schema.\n\nI didn't know this, and it might explain why I could never get composition/polymorphism working correctly (at least not in the UI).\nWe have our definitions in separate files, so it would be useful if we could use composition in other places.\n\n... or we may cause trouble in cases where someone names a property allOf, for example.\n\nBut that would be under the properties key, wouldn't it? allOf is at the same level as properties.\n. I have the same issue, using PATCH.\n. ",
    "zachlendon": "@fehguy When you mentioned running the example through the resolver, which resolver are you referring to.  A ModelResolver?  I'm experiencing a similar issue to this one and am curious...\n. ",
    "datoulei": "can you show me the example? i try many times but it can't work\n. ",
    "antoinebaudoux": ":+1:\n. ",
    "devigned": ":+1: \n. Thank you, @fehguy! \nHopefully, the linking of the issues wasn't spammy, just wanted to help out by linking them together so folks can see the issue has been logged and is in progress.\n. ",
    "abstratt": "@fehguy If this makes it into swagger-js 2.1.10, would swagger-ui require feature work or would it just be a matter of updating the version for the dependency on swagger-client? (I could not find any open issues tracking required work in swagger-ui itself.)\n. ",
    "dgofman": "https://github.com/swagger-api/swagger-js/issues/783\n. I don't see issue in syntax is wrong I copied pasted your code, no errors on UI and in Editor\nbut I have to make extra clicks before to replace \"undefined\" on Object\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"version\": \"0.0.1\",\n    \"title\": \"Test\"\n  },\n  \"paths\": {\n    \"/foo\": {\n      \"get\": {\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"schema\": {\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/definitions/PaginationHeader\"\n                },\n                {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"result\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"$ref\": \"#/definitions/User\"\n                      }\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        },\n        \"security\": []\n      }\n    }\n  },\n  \"definitions\": {\n    \"PaginationHeader\": {\n      \"properties\": {\n        \"offset\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"limit\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        }\n      }\n    },\n    \"User\": {\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n\n. ",
    "agskill": "Hello,\nI use swashbuckle (last version) and i have the same problem. Do these changes have been added please ?\nwhen I look at the source code file \"swagger-ui-js\". I do not see the change.\nThanks\n. Hello @webron \nThanks for your response. I use the version v2.1.0. Is it good ?\n. @webron can you tell me how to do this , please ? Is like that ?\nhtml\n<script src='https://github.com/swagger-api/swagger-ui/blob/master/dist/swagger-ui.js' type='text/javascript'></script>\n. @webron \nSorry but I have not managed to do this. In fact , I use \"sawshbuckle.core\"  in my web api (hosted with owin) with a custom \"index.html\". Is it necessary that I generates a new version of sawshbuckle.core contains the correction ?\nThanks\n. OK thanks for your help ... i will see\n. ",
    "lucian303": "+1\nIs there a version where this doesn't occur that we could switch to until it gets fixed? Right now, it makes swagger-ui completely useless.\n. ",
    "gconst02": "Problem solved. Thanks!\n. ",
    "ankon": "Sorry, missed that part - reopening them after rebasing. Sorry for the noise :(\n. ",
    "tkatkov": "Try adding to your test:\ntest.undefined(spec.definitions.Animal.properties.firstName);\n. ",
    "ramonsnir": "@tkatkov passes.\n. ",
    "wking": "On Thu, Jun 25, 2015 at 09:56:07AM -0700, Ron wrote:\n\nnull is not a valid value in Swagger. We don't support full JSON\nSchema. Please follow\nhttps://github.com/swagger-api/swagger-spec/issues/229.\n\nI'm clear on this for Swagger 2.0 now, and I just submitted #508 here\nto make it easier for other folks to find this information.  Between\nswagger-api/swagger-spec#229 and #508, I think this is closable.\n. ",
    "PASSTor": "@webron Just did \u2013 PR #515\n. ",
    "Gillingham": "+1 To this, needed when using Swagger-UI against an API with a dynamic API host.\n. ",
    "NoumanSaleem": "@ponelat thanks, exactly what I'm looking for.\n. ",
    "PavelPolyakov": "@fehguy \nHi,\nWe just met that issue.\nAnd I see that milestone for that bug is postponed over and over.\nIs that ok that inline schemas are not supported? Because it's seems to be logical, to have an option to describe the schema in line, not referencing the defined objects.\n. ",
    "morvans": "Nevermind...\n. ",
    "sublimeye": "Hey @fehguy,\nI've updated code with another dirty check for \"body\" together with DELETE method.\nAlso I updated petstore.json with a body param. We need it for delete requests with body, but also this will show body param for DELETE request in swagger-ui demo, and I'm not sure is it ok :)\n. ",
    "doanythingfordethklok": "Promises are fine too.\n. Is this PR rejected or just delayed?\n. ",
    "NicholasRBowers": "Hey, no, sorry @ponelat I was not referring to MIME types sent to or from any server. The request.parse object is used by the request object to decide which parser to use for the incoming content.\nAs you can see, if a server sends something to your server with an application/json header (many frameworks do, and YAML MIME types aren't solidified yet), it will use JSON.parse engine to parse the contents.\nMy suggestion is to change this to js-yaml to parse application/json, application/x-yaml, and text/yaml MIME types.\n. @ponelat \nHmm, it definitely didn't bypass it in my situation.  And my YAML was validated and built using the Swagger editor (downloaded the JSON and YAML afterwards as well).\nI think the issue is this line here:\nResponse.prototype.parseBody = function(str){\n  var parse = request.parse[this.type];\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\nrequest.parse returns JSON.parse.  So parse(str) uses JSON.parse - meaning that when we use the parseBody method in the Response constructor we are NOT using js-yaml.\nPerhaps I'm mistaken?\n. Perhaps this is still part of the superagent lib, but this code is definitely being executed, and therefore not bypassed. :/\n. Sorry, I didn't realize that the file I edited was a compiled file -_-\nWhich source file compiles to this bit of code?\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\nI can't seem to locate it.\n. Tried that. I wasn't getting ANY hits :/\nOn Sat, Jul 18, 2015, 14:31 Josh Ponelat notifications@github.com wrote:\n\nI'll see if I can't find it, but you can try grepping for it (text search)\non the files under src/js\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/swagger-api/swagger-js/pull/526#issuecomment-122576416\n.\n. \n",
    "jeevanrd": "I have the same issue. Any idea on push date?\n. Facing the same issue here.  Any update on the merge date ?\n. ",
    "jifka": "Bump - could someone explain how to use this feature to change the URL/basePath on the fly?\nI've tried creating a SwaggerClient and called setHost and setBasePath and the UI still uses the url/path defined in the swagger.json.\n. I'm actually more interested in setting the URL to execute calls against a different server, instead of the URL defined in the yaml/json definition of the API.  This is supposed to be thru the 'host' but doesn't seem to work.\n. Like the OP stated, I'm also looking for a way to dynamically set the host URL without reloading the API definition yaml/jason.\nI now see that there's a function on swaggerUi.api.setHost() that will change the endpoint on the fly so I'll need to update the UI to allow users to select their own host.\n. ",
    "pcontezini": "Hi.\nI'm trying to create a select box so my user can choose between production and test environment.\nMy code looks like this:\nfunction addBaseUrl() {\n              var url = $('#input_baseUrl').val();\n              if (url && url.trim() != \"\") {\n                      window.swaggerUi.api.setHost(url);\n                      log(\"host: \" + url);\n              }\n  }\n\n$('#input_baseUrl').change(addBaseUrl);\nBut it is simply not working, when I inspect the swaggerUi object, they are all with my new host, but when I try to do the call, it always calls the original host. I've trying calling swaggerUi.api.build() and the returned object also seems fine.\nI'm thinking this is a bug, so i'm reporting it here.\nI'm attaching the full index.html file, maybe it helps.\nindex.txt\n. @dnascimento Just imported, here it is: https://github.com/asaasdev/swagger-ui. ",
    "dnascimento": "@pcontezini  can you share the link to your branch of Swagger UI? . ",
    "AlwaysAbhl001": "``\nconst ui = SwaggerUIBundle({\n                    url:url1` ,\n                    dom_id: '#swagger-ui-1',\n                    presets: [\n                  SwaggerUIBundle.presets.apis,\n                  // yay ES6 modules \u2198\n                  Array.isArray(SwaggerUIStandalonePreset) ? SwaggerUIStandalonePreset : SwaggerUIStandalonePreset.default\n                    ],\n                    plugins: [\n                      SwaggerUIBundle.plugins.DownloadUrl\n                    ],\n                layout: \"StandaloneLayout\"\n\n            })\n\n```\nhow could i achieve this setBasePath/setHost functionality here.. . ",
    "Lattyware": "I am also seeing this bug, and it's a pretty big deal as it strips descriptions off half the properties in the models.\nSee this simple example, where Test.test doesn't show the description because it's type is Test2:\n\nBoth properties should have the description 'test'.\n. ",
    "satyamallya": "Do you have a petstore example where the description of each variable shows up in swagger UI. I am having the problem where swagger is not showing the description that I have entered in the json file for each request parameter.\nThanks\n. ",
    "vlad2": "I think this is still open, as I don't see any description for a nested object. (In Swagger UI 3.10.0)\nIt may be related to this: https://stackoverflow.com/questions/43003348/swagger-add-description-with-ref\nMy object looks like this:\n{\n  \"swagger\": \"2.0\",\n...\n    \"properties\": {\n        \"customerTimezone\": {\n          \"description\": \"Customer timezone; we use this for squirrels\",\n          \"allowEmptyValue\": false,\n          \"$ref\": \"#/definitions/ZoneId\"\n        },\n.... ",
    "Kadams64": "Definitely not fixed; note that no description is appearing in the 'Responses' portion of Swagger-UI; just the '$ref' entity appears.  I.e.: this Swagger API Json snippet:\n\"reasonForDeletion\":{\"description\":\"The reason for deletion. VocabularyDomain=SubjectMgmtAllergyDeletionReason.\",\"$ref\":\"#/definitions/CodedConceptReference\"}}\n.... produces this model description in Swagger UI: note the lack of the description for reasonForDeletion; only the details of the $ref entity (CodedConceptReference in this example) appears\n. ",
    "ericraymond": "+1. ",
    "nickg415": "Unless I'm missing something, this is still an issue with the latest release of swagger ui. I pulled down the latest updates from the master branch in the swagger ui project, and copied the dist directory over into my project to test it out. Were the fixes from yesterday included in that dist?\n. yep, confirmed I am looking at 2.1.1:\n/**\n * swagger-ui - Swagger UI is a dependency-free collection of HTML, JavaScript, and CSS assets that dynamically generate beautiful documentation from a Swagger-compliant API\n * @version v2.1.1\n * @link http://swagger.io\n * @license Apache-2.0\n */\n. ",
    "cbornet": ":+1:  need this\n. ",
    "dakisa91": "Im using swagger-ui and it seems to me that this bug is present there too.\n. ",
    "chrisdostert": "+1 for RFC6570 support\n. awesome, thanks @webron . ",
    "felansu": ":+1: \n. ",
    "akaravashkin": "I have the same issue. I have to remove this block too. @fehguy, do you have any plans to fix it in nearest future?\n. I have tried v2.1.5 and still have the issue. It fails on \njavascript\nif (t.nodeName) {\n   var xmlString = new XMLSerializer().serializeToString(t);\n   ...\nUncaught TypeError: Failed to execute 'serializeToString' on 'XMLSerializer': parameter 1 is not of type 'Node'.\nMy json piece is:\ndefinitions: {\n  Call: {\n    properties: {\n      nodeName: {\n        type: \"string\"\n      }\n    }\n  }\n}\nI guess your test 19bada3 does not correspond to issue. createJSONSample() passes good, but problem is XMLSerializer applying to json.\nP.S. Sorry, I don't know how to reopen this issue.\n. ",
    "nickpeirson": "If I revert lib/schema-markup.js to master then the test I've added demonstrates the problem, giving:\n```\n  1) response types should return a composite JSON sample for a definition including allOf:\n  AssertionError: {} deepEqual { id: 0, name: 'string', code: 0, message: 'string' }\n  + expected - actual\n\n  -{}\n  +{\n  +  \"code\": 0\n  +  \"id\": 0\n  +  \"message\": \"string\"\n  +  \"name\": \"string\"\n  +}\n\n```\nI'm not sure if you meant something else?\n. ",
    "dustinsmith1024": "I was wondering this too.  Are error descriptions ignored by the client and only used for the documentation right now?\n. :+1:  Just wondering, when does a new version get pushed to NPM?\n. Alright, maybe I am confused. I am not getting this code when I download the latest from NPM. Your saying it should be there?\n. Thanks!\n. ",
    "coreylight": "Not sure if this is related, but when I try to use your branch I get:\nCannot find module '../../node_modules/q/q' from 'myowndirectories.../node_modules/swagger-client/lib/types'\n. Thanks for following up, I went a different route for now. I figured when I did a global npm install it would have \"just worked\". Maybe it was just my environment.\n. I'm not the maintainer...just a friend.  :)\n. ",
    "bkonetzny": "I have the same issue as @coreylight described earlier, I get the following:\nCannot find module '../../node_modules/q/q' from '.../node_modules/swagger-client/lib/types'\nWhy is the q module referenced with an relative path an not just require('q')? When installing with npm 3x I get this error as modules are laid out differently and thus the path doesn't match. On npm 2x I get no issue and all works as expected.\nShould I open up a new issue for this?\n. @fehguy See you fixed it in lib/client.js but it's also in lib/types/operation.js.\n. ",
    "sunnyrjuneja": "Of course, if there's anything I can do to help triage this issue or make it more clear, please let me know.\n. I realize that it might be useful to have a JSON response to test this against... so here's the output of my repo to reproduce the problem (found at https://github.com/whatasunnyday/gsr-api-key).\n```\n{\n  \"apiVersion\": \"0.1\",\n    \"swaggerVersion\": \"1.2\",\n    \"produces\": [\n      \"application/json\"\n      ],\n    \"apis\": [\n    {\n      \"path\": \"/hello.{format}\",\n      \"description\": \"Operations about hellos\"\n    },\n    {\n      \"path\": \"/swagger_doc.{format}\",\n      \"description\": \"Operations about swagger_docs\"\n    }\n  ],\n    \"info\": {}\n}\n{\n  \"apiVersion\": \"0.1\",\n    \"swaggerVersion\": \"1.2\",\n    \"resourcePath\": \"/hello\",\n    \"produces\": [\n      \"application/json\"\n      ],\n    \"apis\": [\n    {\n      \"path\": \"/hello\",\n      \"operations\": [\n      {\n        \"notes\": \"\",\n        \"summary\": \"\",\n        \"nickname\": \"GET-hello\",\n        \"method\": \"GET\",\n        \"parameters\": [],\n        \"type\": \"void\",\n        \"authorizations\": {\n          \"oauth2\": []\n        }\n      }\n      ]\n    }\n  ],\n    \"basePath\": \"http://localhost:3000/api\"\n}\n```\nWhen \"authorizations\": { \"oauth2\": [] } is present, adding the api key and entering explore doesn't send the authorization in the headers :(.\n. Hey everyone, sorry to post again on this issue. I was wondering if there's anymore information I can provide to help get this issue resolved. I don't write a lot of js but I would love to put in a hand if someone can help me get started.\n. @IvanGoncharov That's very helpful. Thanks. I'll close this issue.\n. hey @IvanGoncharov i don't mean to bother but i noticed something in the test cases: https://github.com/swagger-api/swagger-js/blob/master/test/spec/v1/pet#L178-L185\njavascript\n          \"authorizations\": {\n            \"oauth2\": [\n              {\n                \"scope\": \"test:anything\",\n                \"description\": \"anything\"\n              }\n            ]\n          },\nIsn't this the same form of \"authorizations\": { \"oauth2\": [] }?\n. so @fehguy is \"authorizations\": { \"oauth2\": [] } valid syntax? if so, should this issue be reopened?\n. @IvanGoncharov Ah, thank you so much. That is very helpful.\n. ",
    "IvanGoncharov": "@whatasunnyday \"authorizations\": { \"oauth2\": [] } is incorrect.\nRead this. \nswagger-js doesn't validate specs but you can use swagger-tools for that. \nIt have CLI, so you can use:\nswagger-tools validate <resourceListingOrSwaggerDoc> [apiDeclarations...]\nIf you will have additional questions about Swagger format it better to post it here:\nhttps://groups.google.com/forum/#!forum/swagger-swaggersocket\n. @whatasunnyday I meant that you missing top level authorizations.\nYour authorizations inside method is perfectly fine, but you referencing not declared authorization:\n\nThe name given to the {Authorization Name} MUST be a friendly name that was given to an authorization scheme in the Resource Listing's authorizations.\n\nAs for this example:\nhttps://github.com/swagger-api/swagger-js/blob/master/test/spec/v1/pet#L178-L185\nAuthorization scheme defined here:\nhttps://github.com/swagger-api/swagger-js/blob/master/test/spec/v1/api-docs.json#L25\nI still highly recommend you to use validator, it will save you a lot of time.\nFor example it have explicit check for exactly same mistake.\n. @brianfife Is right, it's mistake. enum serve totally different purpose in JSON Schema:\n http://json-schema.org/latest/json-schema-validation.html#anchor76\nAnd in this case it should be required:\nhttp://json-schema.org/latest/json-schema-validation.html#anchor61\nJust replace enum with required at this line:\nhttps://github.com/swagger-api/swagger-js/blob/master/lib/spec-converter.js#L156\nSee how it's done in swagger-converter:\nhttps://github.com/apigee-127/swagger-converter/blob/master/index.js#L739-L767\n. @brianfife Yes you right. \nAnd obviously it's better to rename _enum into something more appropriate. \n. ",
    "antek-drzewiecki": "Sorry to meddle, but I got referenced to this issue.\n~~authorizations\": { \"oauth2\": [] } seems not an valid syntax. But authorizations\": { \"oauth2\": {} } does.~~\n~~oauth2 should be treated as an Hash / Dictionary / Set .~~\nauthorizations\": { \"oauth2\": [] } is a valid in the API Description section.\nauthorizations\": { \"oauth\": {} } should be used in the resource listing section.\n. Yeah @IvanGoncharov , thats what we also figured out. I was asuming @whatasunnyday was refering to the top level authorizations description in the issue he opened at my gem. :+1: \n. ",
    "galvanist": "Great, so with api_key in the security definition of the petstore swagger.json, the following work nicely (many thanks for your help):\n``` javascript\nvar client = require('swagger-client');\nvar swagger = new client({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  success: function() {\nswagger.clientAuthorizations.add(\"api_key\", new client.ApiKeyAuthorization(\"api_key\",\"special-key\",\"header\"));\n\nvar curl = swagger.pet.getPetById.asCurl({petId:7},{responseContentType: 'application/json'});\nconsole.log(curl);\n\nvar req = swagger.pet.getPetById({petId:7},{responseContentType: 'application/json', mock: true});\nconsole.log(req);\n\nswagger.clientAuthorizations.add(\"api_key\", new client.ApiKeyAuthorization(\"api_key\",\"special-key\",\"query\"));\n\nvar curl = swagger.pet.getPetById.asCurl({petId:7},{responseContentType: 'application/json'});\nconsole.log(curl);\n\nvar req = swagger.pet.getPetById({petId:7},{responseContentType: 'application/json', mock: true});\nconsole.log(req);\n\n}\n});\n```\n. ",
    "STRML": "Sorry, this is failing tests. Will investigate and rebase.\n. Ok, test is passing.\nI've added a test to check this and a field to the petstore single.json test.\nBefore the test, the 'object' type was converted to:\njs\n{ schema: { '$ref': '#/definitions/undefined' } }\nNow it is:\njs\n{type: 'object'}\n. Could someone please take a look at this? I'm trying to avoid a stampede of traffic every time users turn on their API clients.\n. Hey @shockey - rebased and all tests passing.. ",
    "Cwallice": "@fehguy \nIt supports both old and new arguments type. Every method that accepts operation parameters has now argument type conversion to OperationParams prior any other code. That's why tests work as expected without any changes and it's safe to use old signature. \n. ",
    "bjne": "Some details:\nif I do schema, $ref: \"http://some.external.json#/definitions/myobject\"  from main.yaml .... and myobject has say \"foo\":{\"$ref\":\"#/definitions/my_foo\"}\nthen foo will show as {} in ui.. even tho my_foo is completely resolvable in external schema\n. ",
    "thomas-riccardi": "I assume all this is for parameters only.\nFirst, isn't 1.2 defaultValue the same as 2.0 default ?\nAlso, I think default is entirely different from examples: \n- default: \"Declares the value of the item that the server will use if none is provided.\"\n- examples: \"An example of the response message.\"\n- example: \"A free-form property to include a an example of an instance for this schema.\"\nFor parameters, both default and x-example{,s} should be displayed: they are separate values.\nThis PR merges examples & default values: I think it's not correct.\nI'm not sure about examples vs example for parameters: examples require a mimetype, which is only useful for body parameter type. For others the type is already forced, isn't it?\n. Ok, I was not aware of this usage in 1.2.\nHowever this propagates to 2.0 the ambiguity between example and default. It creates real issues, for instance: parameters example still don't exist in 2.0, and if we want to add them, x-example would be a great candidate, but with this PR we cannot anymore (it would be too confusing to have both x-example and x-examples).\nWhat are the benefits of this PR? Why not implement a real example via x-example ? I understand this requires UI modification, so that may be the reason, in which case I think it would be better to not have this PR merged.\n. For me a 'real example' would be an optional additional field for a parameter, listing one (or more) example value for the parameter. It would only be used by swagger-ui complementary to the description of the parameter.\nIt would be similar to theexamples parameter in the response object, see http://swagger.io/specification/#exampleObject.\nCurrently we have to manually add examples into the description, this is encouraged by the description documentation: A brief description of the parameter. This could contain examples of use..\nHowever, it doesn't provide a standard way to store examples in the description as would a separate field. This means examples can't be properly displayed & identified as such in a common way across the whole documentation.\n. As explained in my previous comments, this merged PR doesn't correctly solve the issue because it displays the example value as the default value, which are not the same thing.\nWe should instead have 2 different displays: one for default, and one for example.\n. ",
    "vvanmol": "Hello, \nCould someone please tell me if I'm doing something wrong when trying to use jQuery or if this is an issue with swagger-js ?\nThanks !\n. Hello, \nThank you for your answer.\nHowever you say swagger-js does not include the jquery library, but it is part of the swagger-js package.json file and therefore it is part of the node_modules directory.  The package.json file refers to \"jquery\": \"^2.1.3\".\nNow I have jquery available in my app, I'm able to use it but it's only resolved with the following require statement : require('jQuery').  The actual require statement used by swagger-js is : require('jquery').  And if I modify the require statement from the swagger-js http.js file it fixes my issue.\nHow can you explain that I need a different require statement than swagger-js initially define ?  Is there something I'm doing wrong ?\n. ",
    "richardkerr": "This requires the \"api_key\" security attribute to be available for the documented operation.  I want to be able to apply an 'authorization' (which is not actually a security related operation) to the object regardless of the documentation.\n. Some more info, it seems like the behaviour of the 'authorizations' option has changed a bit between versions.\nIn 2.1.6-M2, it behaves like so:\njavascript\n  if (options.authorizations) {\n    this.clientAuthorizations = options.authorizations;\n  } else {\n    this.clientAuthorizations = new auth.SwaggerAuthorizations();\n  }\nThis allows me to override the default implementation of SwaggerAuthorizations to have the custom signing as is documented.\nIn 2.1.6 and later the SwaggerClient constructor & initialization does:\njavascript\nthis.clientAuthorizations = new auth.SwaggerAuthorizations();\n...\nthis.clientAuthorizations.add(options.authorizations);\nThis explains why the security attribute must be present, it's using SwaggerAuthorizations which does all this checking.  But it also means that we can't add an 'authorization' that is not documented.\nThis change was made in commit a769bc211d849337c5dba56534b97157c6534eb6, possibly an unintended side effect?\n. In 2.1.6+ it also, due to the behaviour of SwaggerAuthorizations, is applied when there are no 'security' definitions in the documented operations.\n. ",
    "FoxxMD": "@ponelat Thanks for the update, I hadn't seen that issue. Should I modify my PR to reflect that behavior or is this being worked on elsewhere (and I should close the PR)?\n. @dalbani I appreciate the insight! \nYeah my change isn't going to cover everything but it still seems better than choosing whatever schema is first in the list...doesn't the url check on this line imply that swagger-ui is operating in a window?\nYou're right though the choice should be left to the user, however the issue doesn't seem to be getting much love :(\n. Gotcha. Then it looks like a PR may be more relevant on the ui side to fix whatever it preventing the protocol dropdown from appearing when there is more than one scheme present.\n. ",
    "dalbani": "No, I haven't written any code yet.\nI think the difficulty of solving this bug lies on finding a nice browser-agnostic solution (as swagger-js should not be \"tied\" to such a runtime environment).\n@FoxxMD: you wrote in the title of this PR \"use window location\". But the location variable in client.js is not the browser's window.location.\nIt's the location of the JSON spec file.\nThere are in fact 3 protocol schemes in this topic:\n1. the scheme of the Swagger UI page\n2. the scheme of the JSON spec file URL (processed by swagger-js)\n3. the scheme(s) defined for the API endpoints\nIn a browser, due the \"mixed content\" security enforcement, we know that if scheme 1 is equal to https, then scheme 2 and 3 have to be https as well. Otherwise the browser will block the XHRs.\nIn a browser environment, your fix does work when all the 3 schemes are https.\nBut, at least in theory, one may want to server Swagger UI over http, pointing to a spec file hosted over https (using CORS)... but with endpoints only supporting http. A bit convoluted, I agree :-)\nBasically, @FoxxMD, I'm not sure that the modification you made is 100% correct in all cases.\nBy the way, why shouldn't the choice of protocol be left to the user in Swagger UI?\n. > Doesn't the url check on this line imply that swagger-ui is operating in a window though?\nNope, I think there's no direct relation. This url variable simply contains the URL where the spec file is located / has been downloaded from.\nIt is then used as a kind of \"base URL\" -- for instance in the case where no host parameter is specified in the spec.\n. Hi, maybe a silly question, but could someone explain me how to set this http.withCredentials flag in the context of SwaggerUIBundle (i.e. when deploying Swagger UI as shown on https://github.com/swagger-api/swagger-ui/blob/master/dist/index.html#L41)?. ",
    "skyhit": "@webron actually, looks to me that the name of the body parameter is not required, when using the new version of swagger client, it has to be \"body\", not the specific name.\n. ",
    "TheAxeMan301": "Thank you for the help! Unfortunately this did not fix my problem. dist/swagger-ui does show my updated version but that wasn't a problem before. I still get that Buffer error.\n. Looks like the real problem was that I was using node 0.10 instead of 0.12. Works fine with that. I was lead astray by the .travis.yml file showing 0.10 here and swagger-ui's .travis.yml that shows 0.10 and 0.12. \n. ",
    "bigblind": "Done: #607\n. ",
    "phillikus": "It would be great to have support for different kinds of en/de-coding of requests / responses like MessagePack. \nI propose to extend the swagger-api to allow injection of custom json (de)serializers in a separate js-file. \nThis is what we do currently in Startup.cs of the WebAPI:\n_httpConfiguration.Formatters.Insert(0, new MessagePackMediaTypeFormatter());\nNow the problem is that the swagger-ui can\u00b4t handle requests encoded in formats other than json. So for that it would be great to be able to inject custom serialization / deserialization functions in a separate .js-file, which would than transform the messagepack-response (or whatever encoding is used) back to json. For requests against the API with a request-body, this should be done vice-versa \nNote: I don\u00b4t know the source code of the swagger-api so I\u00b4m not sure if / how this is achievable. But I think it would be a great enhancement given that its not limited to MessagePack-format only (One could even inject custom json-formatters)\n. ",
    "quintonparker": "yes. library size is enormous. definitely not ready for the web\n. ",
    "justjico": "ok, thanks for the quick reply!\n. ",
    "kwizzn": "@ponelat, you may be right and I will gladly make that change if it helps getting this issue merged.\n. OK done, @ponelat. I am confident my changes are ok. I've done lots of manual testing and npm test passes locally but Travis now seems to fail for a different reason. Looking at the Travis build logs, I see that the same tests are failing in the master branch due to some weird markup order difference involving an opening <div>.\nIs that a known issue?\n. Thanks guys!\n.  I thought about that too and I guess not. In fact, double quotes do not necessarily have to be escaped in a  URL so we might be better off with single quote in this case, too. What do you guys think? \n. Happy to do it as soon as possible.\n. ",
    "prantlf": "Is the example in a comment at  \"API declarations with swaggerVersion 1.2 are not loaded\" enough?  Thanks!\n. ",
    "Atry": "@fehguy Could you review this PR?\n. ",
    "artema": "@fehguy Swagger UI supports relative spec URLs. Swagger itself requires that you specify a hostname and base path, so it doesn't affect it.\n. ",
    "jmls": "No, this is running in node, no browser was involved \n. Oh, OK. I'll check the returned data.. It's v1.2, anything that I should be looking for \n. ",
    "felixSchl": "Has there been any progress on this? I am having the same issue and it's hard to track down.\n. ",
    "cadesalaberry": "@wbinnssmith definitely agree with you. Btw, what did you use to generate the graphs ?\n. ",
    "richardcrichardc": "This also has the advantage that unlike Q, native Promises do not swallow exceptions.\n. ",
    "jvivs": "This would be a nice update for the next major release \ud83d\udc4d \n@wbinnssmith I think that would be disc: http://hughsk.io/disc/\n. Yes please! This would be great to have.\n. \ud83d\udc4f thank you for the quick turnaround!\n. @fehguy thank you!\n. \ud83d\udc4d looks good to me.. ",
    "mach-kernel": "@fehguy are you suggesting they look it up by index?\n. What if the order of the schema changes, e.g, the API team for some company adds new endpoints and decides to move things around. Can you guarantee that the index will be the same?\n. ",
    "AKASH124001": "Any idea how we can remove the circular refrences. Below is my swagger.json..\nWhen I try to load it using swaggerui it keeps on waiting on the browser\n{\"swagger\":\"2.0\",\"info\":{\"version\":\"v1\",\"title\":\"Geo Search API\",\"description\":\"A simple api to search using geo location in Elasticsearch\",\"termsOfService\":\"None\"},\"basePath\":\"/\",\"paths\":{\"/api/fixedfee/AddNewFeeVersion\":{\"post\":{\"tags\":[\"AddNewFeeVersion\"],\"operationId\":\"ApiFixedfeeAddNewFeeVersionPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"cost\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/FixedCost\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/fixedfee/AddNewFixedCost\":{\"post\":{\"tags\":[\"AddNewFixedCost\"],\"operationId\":\"ApiFixedfeeAddNewFixedCostPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"cost\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/FixedCost\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/AddNewPlan\":{\"post\":{\"tags\":[\"AddNewPlan\"],\"operationId\":\"ApiPlanAddNewPlanPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"plan\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/PlanInfoViewModel\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/AddNewVersion\":{\"post\":{\"tags\":[\"AddNewVersion\"],\"operationId\":\"ApiPlanAddNewVersionPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"plan\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/PlanInfoViewModel\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/BenefitType\":{\"get\":{\"tags\":[\"BenefitType\"],\"operationId\":\"ApiBenefitTypeGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"BenefitType\"],\"operationId\":\"ApiBenefitTypePost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/BenefitType/{id}\":{\"get\":{\"tags\":[\"BenefitType\"],\"operationId\":\"ApiBenefitTypeByIdGet\",\"consumes\":[],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"type\":\"string\"}}},\"deprecated\":false},\"put\":{\"tags\":[\"BenefitType\"],\"operationId\":\"ApiBenefitTypeByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"delete\":{\"tags\":[\"BenefitType\"],\"operationId\":\"ApiBenefitTypeByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Census/{clientId}\":{\"get\":{\"tags\":[\"Census\"],\"operationId\":\"ApiCensusByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Census/versions/{setId}\":{\"get\":{\"tags\":[\"Census\"],\"operationId\":\"ApiCensusVersionsBySetIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Census/version-file/{versionId}/{asOfDate}\":{\"get\":{\"tags\":[\"Census\"],\"operationId\":\"ApiCensusVersion-fileByVersionIdByAsOfDateGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"versionId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"asOfDate\",\"in\":\"path\",\"required\":true,\"type\":\"string\",\"format\":\"date-time\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Census/uploadtemplate/download/{guid}/{fileName}\":{\"get\":{\"tags\":[\"Census\"],\"operationId\":\"ApiCensusUploadtemplateDownloadByGuidByFileNameGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"guid\",\"in\":\"path\",\"required\":true,\"type\":\"string\"},{\"name\":\"fileName\",\"in\":\"path\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Census/uploadtemplate\":{\"post\":{\"tags\":[\"Census\"],\"operationId\":\"ApiCensusUploadtemplatePost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"template\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/CensusTemplateOptions\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Census/upload\":{\"post\":{\"tags\":[\"Census\"],\"operationId\":\"ApiCensusUploadPost\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Census/hideunhideversions\":{\"post\":{\"tags\":[\"Census\"],\"operationId\":\"ApiCensusHideunhideversionsPost\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"versionId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"hideStatus\",\"in\":\"query\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Census/hideunhidesets\":{\"post\":{\"tags\":[\"Census\"],\"operationId\":\"ApiCensusHideunhidesetsPost\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"hideStatus\",\"in\":\"query\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Claims/{clientId}\":{\"get\":{\"tags\":[\"Claims\"],\"operationId\":\"ApiClaimsByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Claims/versions/{setId}\":{\"get\":{\"tags\":[\"Claims\"],\"operationId\":\"ApiClaimsVersionsBySetIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Claims/version-file/{versionId}/{stopMonth}/{stopYear}\":{\"get\":{\"tags\":[\"Claims\"],\"operationId\":\"ApiClaimsVersion-fileByVersionIdByStopMonthByStopYearGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"versionId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"stopMonth\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"stopYear\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Claims/download/{guid}/{fileName}\":{\"get\":{\"tags\":[\"Claims\"],\"operationId\":\"ApiClaimsDownloadByGuidByFileNameGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"guid\",\"in\":\"path\",\"required\":true,\"type\":\"string\"},{\"name\":\"fileName\",\"in\":\"path\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Claims/template\":{\"post\":{\"tags\":[\"Claims\"],\"operationId\":\"ApiClaimsTemplatePost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"templateOptions\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/ClaimsTemplateOptions\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Claims/upload\":{\"post\":{\"tags\":[\"Claims\"],\"operationId\":\"ApiClaimsUploadPost\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Claims/hideunhideversions\":{\"post\":{\"tags\":[\"Claims\"],\"operationId\":\"ApiClaimsHideunhideversionsPost\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"versionId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"hideStatus\",\"in\":\"query\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Claims/hideunhidesets\":{\"post\":{\"tags\":[\"Claims\"],\"operationId\":\"ApiClaimsHideunhidesetsPost\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"hideStatus\",\"in\":\"query\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/underwriting/loadplans/ClaimsTabSelected\":{\"post\":{\"tags\":[\"ClaimsTabSelected\"],\"operationId\":\"ApiUnderwritingLoadplansClaimsTabSelectedPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"plans\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/SelectedPlans\"}}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Client\":{\"get\":{\"tags\":[\"Client\"],\"operationId\":\"ApiClientGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"Client\"],\"operationId\":\"ApiClientPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/Clients\"}}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"$ref\":\"#/definitions/HttpResponseMessage\"}}},\"deprecated\":false}},\"/api/Client/Test\":{\"get\":{\"tags\":[\"Client\"],\"operationId\":\"ApiClientTestGet\",\"consumes\":[],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"userRole\",\"in\":\"modelbinding\",\"required\":false,\"type\":\"string\"},{\"name\":\"id\",\"in\":\"modelbinding\",\"required\":false,\"type\":\"string\"}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClientAccessEntryViewModel\"}}}},\"deprecated\":false}},\"/api/Client/Test1\":{\"get\":{\"tags\":[\"Client\"],\"operationId\":\"ApiClientTest1Get\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Client/Test2\":{\"get\":{\"tags\":[\"Client\"],\"operationId\":\"ApiClientTest2Get\",\"consumes\":[],\"produces\":[\"application/json\"],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"deprecated\":false}},\"/api/Client/{id}\":{\"put\":{\"tags\":[\"Client\"],\"operationId\":\"ApiClientByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"delete\":{\"tags\":[\"Client\"],\"operationId\":\"ApiClientByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/ClientAccess/{id}\":{\"get\":{\"tags\":[\"ClientAccess\"],\"operationId\":\"ApiClientAccessByIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/ClientAccess/forUser\":{\"get\":{\"tags\":[\"ClientAccess\"],\"operationId\":\"ApiClientAccessForUserGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"email\",\"in\":\"modelbinding\",\"required\":false,\"type\":\"string\"},{\"name\":\"peerReviewersOnly\",\"in\":\"modelbinding\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/ClientAccess\":{\"post\":{\"tags\":[\"ClientAccess\"],\"operationId\":\"ApiClientAccessPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"usersWithAccess\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/ClientUsersWithAccess\"}}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"$ref\":\"#/definitions/HttpResponseMessage\"}}},\"deprecated\":false}},\"/api/plan/CopyVersion/{versionId}\":{\"get\":{\"tags\":[\"CopyVersion\"],\"operationId\":\"ApiPlanCopyVersionByVersionIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"versionId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/CoverageTier/all\":{\"get\":{\"tags\":[\"CoverageTier\"],\"operationId\":\"ApiCoverageTierAllGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/CoverageTier/Get/{id}\":{\"get\":{\"tags\":[\"CoverageTier\"],\"operationId\":\"ApiCoverageTierGetByIdGet\",\"consumes\":[],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"type\":\"string\"}}},\"deprecated\":false}},\"/api/CoverageTier/Post\":{\"post\":{\"tags\":[\"CoverageTier\"],\"operationId\":\"ApiCoverageTierPostPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/CoverageTier/Put/{id}\":{\"put\":{\"tags\":[\"CoverageTier\"],\"operationId\":\"ApiCoverageTierPutByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/CoverageTier/Delete/{id}\":{\"delete\":{\"tags\":[\"CoverageTier\"],\"operationId\":\"ApiCoverageTierDeleteByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/DataSetMapping/GetData/{ClientId}\":{\"get\":{\"tags\":[\"DataSetMapping\"],\"operationId\":\"ApiDataSetMappingGetDataByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"ClientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/DataSetMapping/SetData\":{\"post\":{\"tags\":[\"DataSetMapping\"],\"operationId\":\"ApiDataSetMappingSetDataPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"plan\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/PlanInfoModelIntersectLocal\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/DataSetMapping/GetClaimsMappingData\":{\"get\":{\"tags\":[\"DataSetMapping\"],\"operationId\":\"ApiDataSetMappingGetClaimsMappingDataGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"planInfoSetId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/DataSetMapping/SetClaimsMappingData\":{\"post\":{\"tags\":[\"DataSetMapping\"],\"operationId\":\"ApiDataSetMappingSetClaimsMappingDataPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"plan\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimInfoModelIntersectLocal\"}}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/EmploymentType\":{\"get\":{\"tags\":[\"EmploymentType\"],\"operationId\":\"ApiEmploymentTypeGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"EmploymentType\"],\"operationId\":\"ApiEmploymentTypePost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/EmploymentType/{id}\":{\"get\":{\"tags\":[\"EmploymentType\"],\"operationId\":\"ApiEmploymentTypeByIdGet\",\"consumes\":[],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"type\":\"string\"}}},\"deprecated\":false},\"put\":{\"tags\":[\"EmploymentType\"],\"operationId\":\"ApiEmploymentTypeByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"delete\":{\"tags\":[\"EmploymentType\"],\"operationId\":\"ApiEmploymentTypeByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Enrollment/{clientId}\":{\"get\":{\"tags\":[\"Enrollment\"],\"operationId\":\"ApiEnrollmentByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Enrollment/versions/{setId}\":{\"get\":{\"tags\":[\"Enrollment\"],\"operationId\":\"ApiEnrollmentVersionsBySetIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Enrollment/version-file/{versionId}/{stopMonth}/{stopYear}\":{\"get\":{\"tags\":[\"Enrollment\"],\"operationId\":\"ApiEnrollmentVersion-fileByVersionIdByStopMonthByStopYearGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"versionId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"stopMonth\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"stopYear\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Enrollment/coverage-tiers\":{\"get\":{\"tags\":[\"Enrollment\"],\"operationId\":\"ApiEnrollmentCoverage-tiersGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Enrollment/enrollment-types\":{\"get\":{\"tags\":[\"Enrollment\"],\"operationId\":\"ApiEnrollmentEnrollment-typesGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Enrollment/download\":{\"post\":{\"tags\":[\"Enrollment\"],\"operationId\":\"ApiEnrollmentDownloadPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"template\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/EnrollmentOptions\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Enrollment/download/{guid}/{fileName}\":{\"get\":{\"tags\":[\"Enrollment\"],\"operationId\":\"ApiEnrollmentDownloadByGuidByFileNameGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"guid\",\"in\":\"path\",\"required\":true,\"type\":\"string\"},{\"name\":\"fileName\",\"in\":\"path\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Enrollment/upload\":{\"post\":{\"tags\":[\"Enrollment\"],\"operationId\":\"ApiEnrollmentUploadPost\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Enrollment/hideunhideversions\":{\"post\":{\"tags\":[\"Enrollment\"],\"operationId\":\"ApiEnrollmentHideunhideversionsPost\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"versionId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"hideStatus\",\"in\":\"query\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Enrollment/hideunhidesets\":{\"post\":{\"tags\":[\"Enrollment\"],\"operationId\":\"ApiEnrollmentHideunhidesetsPost\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"hideStatus\",\"in\":\"query\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/underwriting/loadplans/EnrollmentTabSelected\":{\"post\":{\"tags\":[\"EnrollmentTabSelected\"],\"operationId\":\"ApiUnderwritingLoadplansEnrollmentTabSelectedPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"plans\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/SelectedPlans\"}}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/FundingType\":{\"get\":{\"tags\":[\"FundingType\"],\"operationId\":\"ApiFundingTypeGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"FundingType\"],\"operationId\":\"ApiFundingTypePost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/FundingType/{id}\":{\"get\":{\"tags\":[\"FundingType\"],\"operationId\":\"ApiFundingTypeByIdGet\",\"consumes\":[],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"type\":\"string\"}}},\"deprecated\":false},\"put\":{\"tags\":[\"FundingType\"],\"operationId\":\"ApiFundingTypeByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"delete\":{\"tags\":[\"FundingType\"],\"operationId\":\"ApiFundingTypeByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/underwriting/loadplans/GetAllParentsBySetId\":{\"post\":{\"tags\":[\"GetAllParentsBySetId\"],\"operationId\":\"ApiUnderwritingLoadplansGetAllParentsBySetIdPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"plans\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/SelectedPlans\"}}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/vendor/GetAllVendors\":{\"get\":{\"tags\":[\"GetAllVendors\"],\"operationId\":\"ApiVendorGetAllVendorsGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/underwriting/loadplans/GetClaimVersionsByClaimSetId/{setId}\":{\"get\":{\"tags\":[\"GetClaimVersionsByClaimSetId\"],\"operationId\":\"ApiUnderwritingLoadplansGetClaimVersionsByClaimSetIdBySetIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/underwriting/loadplans/GetEnrollmentVersionsByEnrollmentSetId/{setId}\":{\"get\":{\"tags\":[\"GetEnrollmentVersionsByEnrollmentSetId\"],\"operationId\":\"ApiUnderwritingLoadplansGetEnrollmentVersionsByEnrollmentSetIdBySetIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/fixedfee/GetFeesByVersionId/{versionId}\":{\"get\":{\"tags\":[\"GetFeesByVersionId\"],\"operationId\":\"ApiFixedfeeGetFeesByVersionIdByVersionIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"versionId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/fixedfee/GetFeeVersionsBySetId/{setId}\":{\"get\":{\"tags\":[\"GetFeeVersionsBySetId\"],\"operationId\":\"ApiFixedfeeGetFeeVersionsBySetIdBySetIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/underwriting/loadplans/GetFinalizedPlanBenefitsBySetId/{id}\":{\"get\":{\"tags\":[\"GetFinalizedPlanBenefitsBySetId\"],\"operationId\":\"ApiUnderwritingLoadplansGetFinalizedPlanBenefitsBySetIdByIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/GetFinalizedPlanBenefitsBySetId/{id}\":{\"get\":{\"tags\":[\"GetFinalizedPlanBenefitsBySetId\"],\"operationId\":\"ApiPlanGetFinalizedPlanBenefitsBySetIdByIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/fixedfee/GetFixedFeesByClient/{clientId}\":{\"get\":{\"tags\":[\"GetFixedFeesByClient\"],\"operationId\":\"ApiFixedfeeGetFixedFeesByClientByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/GetPlanBenefitsByPlanInfoId/{id}\":{\"get\":{\"tags\":[\"GetPlanBenefitsByPlanInfoId\"],\"operationId\":\"ApiPlanGetPlanBenefitsByPlanInfoIdByIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/GetPlanById/{id}\":{\"get\":{\"tags\":[\"GetPlanById\"],\"operationId\":\"ApiPlanGetPlanByIdByIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/GetPlanCoverageTierByPlanInfoId/{id}\":{\"get\":{\"tags\":[\"GetPlanCoverageTierByPlanInfoId\"],\"operationId\":\"ApiPlanGetPlanCoverageTierByPlanInfoIdByIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/GetPlanGroupsByClient/{clientId}\":{\"get\":{\"tags\":[\"GetPlanGroupsByClient\"],\"operationId\":\"ApiPlanGetPlanGroupsByClientByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/underwriting/loadplans/GetPlansByClient/{clientId}\":{\"get\":{\"tags\":[\"GetPlansByClient\"],\"operationId\":\"ApiUnderwritingLoadplansGetPlansByClientByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/GetPlansByClient/{clientId}\":{\"get\":{\"tags\":[\"GetPlansByClient\"],\"operationId\":\"ApiPlanGetPlansByClientByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/underwriting/loadplans/GetPlanSetsByPlanGroupId/{groupId}\":{\"get\":{\"tags\":[\"GetPlanSetsByPlanGroupId\"],\"operationId\":\"ApiUnderwritingLoadplansGetPlanSetsByPlanGroupIdByGroupIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"groupId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/GetPlanSubCategoriesByPlanInfoId/{id}\":{\"get\":{\"tags\":[\"GetPlanSubCategoriesByPlanInfoId\"],\"operationId\":\"ApiPlanGetPlanSubCategoriesByPlanInfoIdByIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/GetPlanSubCategoryHeaderValueByPlanInfoId/{id}\":{\"get\":{\"tags\":[\"GetPlanSubCategoryHeaderValueByPlanInfoId\"],\"operationId\":\"ApiPlanGetPlanSubCategoryHeaderValueByPlanInfoIdByIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/underwriting/loadplans/GetPlanVersionsBySetId/{setId}\":{\"get\":{\"tags\":[\"GetPlanVersionsBySetId\"],\"operationId\":\"ApiUnderwritingLoadplansGetPlanVersionsBySetIdBySetIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/GetPlanVersionsBySetId/{setId}\":{\"get\":{\"tags\":[\"GetPlanVersionsBySetId\"],\"operationId\":\"ApiPlanGetPlanVersionsBySetIdBySetIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/HideUnhideSet\":{\"post\":{\"tags\":[\"HideUnhideSet\"],\"operationId\":\"ApiPlanHideUnhideSetPost\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"hideStatus\",\"in\":\"query\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/fixedfee/HideUnhideSet\":{\"post\":{\"tags\":[\"HideUnhideSet\"],\"operationId\":\"ApiFixedfeeHideUnhideSetPost\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"hideStatus\",\"in\":\"query\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/HideUnhideVersion\":{\"post\":{\"tags\":[\"HideUnhideVersion\"],\"operationId\":\"ApiPlanHideUnhideVersionPost\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"versionId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"hideStatus\",\"in\":\"query\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/fixedfee/HideUnhideVersion\":{\"post\":{\"tags\":[\"HideUnhideVersion\"],\"operationId\":\"ApiFixedfeeHideUnhideVersionPost\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"versionId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"hideStatus\",\"in\":\"query\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/LargeClaims/{clientId}\":{\"get\":{\"tags\":[\"LargeClaims\"],\"operationId\":\"ApiLargeClaimsByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/LargeClaims/versions/{setId}\":{\"get\":{\"tags\":[\"LargeClaims\"],\"operationId\":\"ApiLargeClaimsVersionsBySetIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/LargeClaims/download\":{\"post\":{\"tags\":[\"LargeClaims\"],\"operationId\":\"ApiLargeClaimsDownloadPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"template\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/LargeClaimOptions\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/LargeClaims/download/{guid}\":{\"get\":{\"tags\":[\"LargeClaims\"],\"operationId\":\"ApiLargeClaimsDownloadByGuidGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"guid\",\"in\":\"path\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/LargeClaims/upload\":{\"post\":{\"tags\":[\"LargeClaims\"],\"operationId\":\"ApiLargeClaimsUploadPost\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/LargeClaims/hideunhideversions\":{\"post\":{\"tags\":[\"LargeClaims\"],\"operationId\":\"ApiLargeClaimsHideunhideversionsPost\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"versionId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"hideStatus\",\"in\":\"query\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/LargeClaims/hideunhidesets\":{\"post\":{\"tags\":[\"LargeClaims\"],\"operationId\":\"ApiLargeClaimsHideunhidesetsPost\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"setId\",\"in\":\"query\",\"required\":false,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"hideStatus\",\"in\":\"query\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/MasterData/GetEnrollmentTypes\":{\"get\":{\"tags\":[\"MasterData\"],\"operationId\":\"ApiMasterDataGetEnrollmentTypesGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/MasterData/GetLargeClaimTypes\":{\"get\":{\"tags\":[\"MasterData\"],\"operationId\":\"ApiMasterDataGetLargeClaimTypesGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfo\":{\"get\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfo/{id}\":{\"get\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoByIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"put\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"delete\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfo/{clientId}\":{\"get\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfo/versions/{planId}\":{\"get\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoVersionsByPlanIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"planId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfo/bulk-upload-template/{clientName}\":{\"get\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoBulk-upload-templateByClientNameGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientName\",\"in\":\"path\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfo/bulk-upload\":{\"post\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoBulk-uploadPost\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfo/groups/{clientId}\":{\"get\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoGroupsByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfo/groups\":{\"put\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoGroupsPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"planGroup\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/PlanGroups\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoGroupsPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"planGroup\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/PlanGroups\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfo/plans-id-name/{clientId}\":{\"get\":{\"tags\":[\"PlanInfo\"],\"operationId\":\"ApiPlanInfoPlans-id-nameByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfoSet\":{\"get\":{\"tags\":[\"PlanInfoSet\"],\"operationId\":\"ApiPlanInfoSetGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"PlanInfoSet\"],\"operationId\":\"ApiPlanInfoSetPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfoSet/{id}\":{\"get\":{\"tags\":[\"PlanInfoSet\"],\"operationId\":\"ApiPlanInfoSetByIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"put\":{\"tags\":[\"PlanInfoSet\"],\"operationId\":\"ApiPlanInfoSetByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"delete\":{\"tags\":[\"PlanInfoSet\"],\"operationId\":\"ApiPlanInfoSetByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfoSet/{clientId}\":{\"get\":{\"tags\":[\"PlanInfoSet\"],\"operationId\":\"ApiPlanInfoSetByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfoVersion\":{\"get\":{\"tags\":[\"PlanInfoVersion\"],\"operationId\":\"ApiPlanInfoVersionGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"PlanInfoVersion\"],\"operationId\":\"ApiPlanInfoVersionPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanInfoVersion/{id}\":{\"get\":{\"tags\":[\"PlanInfoVersion\"],\"operationId\":\"ApiPlanInfoVersionByIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"put\":{\"tags\":[\"PlanInfoVersion\"],\"operationId\":\"ApiPlanInfoVersionByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"delete\":{\"tags\":[\"PlanInfoVersion\"],\"operationId\":\"ApiPlanInfoVersionByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanType\":{\"get\":{\"tags\":[\"PlanType\"],\"operationId\":\"ApiPlanTypeGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"PlanType\"],\"operationId\":\"ApiPlanTypePost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PlanType/{id}\":{\"get\":{\"tags\":[\"PlanType\"],\"operationId\":\"ApiPlanTypeByIdGet\",\"consumes\":[],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"type\":\"string\"}}},\"deprecated\":false},\"put\":{\"tags\":[\"PlanType\"],\"operationId\":\"ApiPlanTypeByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"delete\":{\"tags\":[\"PlanType\"],\"operationId\":\"ApiPlanTypeByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PoolingBasis\":{\"get\":{\"tags\":[\"PoolingBasis\"],\"operationId\":\"ApiPoolingBasisGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"PoolingBasis\"],\"operationId\":\"ApiPoolingBasisPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PoolingBasis/{id}\":{\"get\":{\"tags\":[\"PoolingBasis\"],\"operationId\":\"ApiPoolingBasisByIdGet\",\"consumes\":[],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"type\":\"string\"}}},\"deprecated\":false},\"put\":{\"tags\":[\"PoolingBasis\"],\"operationId\":\"ApiPoolingBasisByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"delete\":{\"tags\":[\"PoolingBasis\"],\"operationId\":\"ApiPoolingBasisByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PopulationType\":{\"get\":{\"tags\":[\"PopulationType\"],\"operationId\":\"ApiPopulationTypeGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"PopulationType\"],\"operationId\":\"ApiPopulationTypePost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/PopulationType/{id}\":{\"get\":{\"tags\":[\"PopulationType\"],\"operationId\":\"ApiPopulationTypeByIdGet\",\"consumes\":[],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"type\":\"string\"}}},\"deprecated\":false},\"put\":{\"tags\":[\"PopulationType\"],\"operationId\":\"ApiPopulationTypeByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"delete\":{\"tags\":[\"PopulationType\"],\"operationId\":\"ApiPopulationTypeByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/underwriting/loadplans/PrepareDataForUnderwriting/{id}\":{\"get\":{\"tags\":[\"PrepareDataForUnderwriting\"],\"operationId\":\"ApiUnderwritingLoadplansPrepareDataForUnderwritingByIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/RollForwardPlan\":{\"post\":{\"tags\":[\"RollForwardPlan\"],\"operationId\":\"ApiPlanRollForwardPlanPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"plan\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/RollOverPlan\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/underwriting/loadplans/SaveFinalIncludedPlans\":{\"post\":{\"tags\":[\"SaveFinalIncludedPlans\"],\"operationId\":\"ApiUnderwritingLoadplansSaveFinalIncludedPlansPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"wizard\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/LoadPlansWizard\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Token\":{\"post\":{\"tags\":[\"Token\"],\"operationId\":\"ApiTokenPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"req\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/AuthRequest\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Underwriting\":{\"get\":{\"tags\":[\"Underwriting\"],\"operationId\":\"ApiUnderwritingGet\",\"consumes\":[],\"produces\":[\"text/plain\",\"application/json\",\"text/json\"],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},\"deprecated\":false},\"post\":{\"tags\":[\"Underwriting\"],\"operationId\":\"ApiUnderwritingPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"userOptionsAndData\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"object\"}}}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Underwriting/{id}\":{\"get\":{\"tags\":[\"Underwriting\"],\"operationId\":\"ApiUnderwritingByIdGet\",\"consumes\":[],\"produces\":[\"text/plain\",\"application/json\",\"text/json\"],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"type\":\"string\"}}},\"deprecated\":false},\"put\":{\"tags\":[\"Underwriting\"],\"operationId\":\"ApiUnderwritingByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"delete\":{\"tags\":[\"Underwriting\"],\"operationId\":\"ApiUnderwritingByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Underwriting/save\":{\"post\":{\"tags\":[\"Underwriting\"],\"operationId\":\"ApiUnderwritingSavePost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"underwritingSave\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/UnderwritingSave\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Underwriting/versions/{clientId}\":{\"get\":{\"tags\":[\"Underwriting\"],\"operationId\":\"ApiUnderwritingVersionsByClientIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"clientId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/Underwriting/version/{versionId}\":{\"get\":{\"tags\":[\"Underwriting\"],\"operationId\":\"ApiUnderwritingVersionByVersionIdGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"versionId\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/UnionType\":{\"get\":{\"tags\":[\"UnionType\"],\"operationId\":\"ApiUnionTypeGet\",\"consumes\":[],\"produces\":[],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"UnionType\"],\"operationId\":\"ApiUnionTypePost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/UnionType/{id}\":{\"get\":{\"tags\":[\"UnionType\"],\"operationId\":\"ApiUnionTypeByIdGet\",\"consumes\":[],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"type\":\"string\"}}},\"deprecated\":false},\"put\":{\"tags\":[\"UnionType\"],\"operationId\":\"ApiUnionTypeByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"delete\":{\"tags\":[\"UnionType\"],\"operationId\":\"ApiUnionTypeByIdDelete\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"integer\",\"format\":\"int32\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/plan/UpdateVersion\":{\"post\":{\"tags\":[\"UpdateVersion\"],\"operationId\":\"ApiPlanUpdateVersionPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"plan\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/PlanInfoViewModel\"}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/uploadtemplate/error-file/download/{guid}\":{\"get\":{\"tags\":[\"UploadTemplate\"],\"operationId\":\"ApiUploadtemplateError-fileDownloadByGuidGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"guid\",\"in\":\"path\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/uploadtemplate/error-file/enrollmentdownload/{guid}\":{\"get\":{\"tags\":[\"UploadTemplate\"],\"operationId\":\"ApiUploadtemplateError-fileEnrollmentdownloadByGuidGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"guid\",\"in\":\"path\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}},\"/api/User\":{\"get\":{\"tags\":[\"User\"],\"operationId\":\"ApiUserGet\",\"consumes\":[],\"produces\":[],\"parameters\":[{\"name\":\"peerReviewersOnly\",\"in\":\"modelbinding\",\"required\":false,\"type\":\"boolean\"}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false},\"post\":{\"tags\":[\"User\"],\"operationId\":\"ApiUserPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/UserRole\"}}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"$ref\":\"#/definitions/HttpResponseMessage\"}}},\"deprecated\":false}},\"/api/User/{id}\":{\"put\":{\"tags\":[\"User\"],\"operationId\":\"ApiUserByIdPut\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[\"application/json\"],\"parameters\":[{\"name\":\"id\",\"in\":\"path\",\"required\":true,\"type\":\"string\"},{\"name\":\"value\",\"in\":\"body\",\"required\":false,\"schema\":{\"$ref\":\"#/definitions/UserRole\"}}],\"responses\":{\"200\":{\"description\":\"OK\",\"schema\":{\"$ref\":\"#/definitions/HttpResponseMessage\"}}},\"deprecated\":false}},\"/api/underwriting/loadplans/VersionsTabSelected\":{\"post\":{\"tags\":[\"VersionsTabSelected\"],\"operationId\":\"ApiUnderwritingLoadplansVersionsTabSelectedPost\",\"consumes\":[\"application/json\",\"text/json\",\"application/json-patch+json\"],\"produces\":[],\"parameters\":[{\"name\":\"plans\",\"in\":\"body\",\"required\":false,\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/SelectedPlans\"}}}],\"responses\":{\"204\":{\"description\":\"No Content\"}},\"deprecated\":false}}},\"definitions\":{\"FixedCost\":{\"type\":\"object\",\"properties\":{\"setId\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"setName\":{\"type\":\"string\"},\"setDescription\":{\"type\":\"string\"},\"versionName\":{\"type\":\"string\"},\"feesTable\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FeesTable\"}},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"}}},\"FeesTable\":{\"type\":\"object\",\"properties\":{\"expenseCategory\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"value\":{\"format\":\"double\",\"type\":\"number\"},\"aggregate\":{\"type\":\"boolean\"},\"startMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"startYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"stopMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"stopYear\":{\"format\":\"int32\",\"type\":\"integer\"}}},\"PlanInfoViewModel\":{\"type\":\"object\",\"properties\":{\"selectedSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"selectedVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionPlanInfoId\":{\"format\":\"int32\",\"type\":\"integer\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"planName\":{\"type\":\"string\"},\"versionName\":{\"type\":\"string\"},\"benefitType\":{\"$ref\":\"#/definitions/BenefitType\"},\"benefitTypePlanPaid\":{\"$ref\":\"#/definitions/BenefitTypePlanPaid\"},\"planType\":{\"type\":\"string\"},\"vendorId\":{\"format\":\"int32\",\"type\":\"integer\"},\"startMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"startYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"endMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"endYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"fundingType\":{\"type\":\"string\"},\"populationType\":{\"type\":\"string\"},\"unionType\":{\"type\":\"string\"},\"employmentType\":{\"type\":\"string\"},\"smokerSurcharge\":{\"format\":\"double\",\"type\":\"number\"},\"spousalSurcharge\":{\"format\":\"double\",\"type\":\"number\"},\"wellnessCredit\":{\"format\":\"double\",\"type\":\"number\"},\"hraCredit\":{\"format\":\"double\",\"type\":\"number\"},\"islClaimBasis\":{\"type\":\"string\"},\"islStartMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"islStartYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"islEndMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"islEndYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"islCorridorDeductible\":{\"format\":\"double\",\"type\":\"number\"},\"islSpecificDeductible\":{\"format\":\"double\",\"type\":\"number\"},\"subCategories\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/SubCategory\"}},\"descriptions\":{\"type\":\"string\"},\"planAccount\":{\"type\":\"string\"},\"managedBy\":{\"type\":\"string\"},\"unitized\":{\"type\":\"boolean\"},\"finalVersion\":{\"type\":\"boolean\"}}},\"BenefitType\":{\"type\":\"object\",\"properties\":{\"medical\":{\"type\":\"boolean\"},\"rx\":{\"type\":\"boolean\"},\"dental\":{\"type\":\"boolean\"},\"vision\":{\"type\":\"boolean\"}}},\"BenefitTypePlanPaid\":{\"type\":\"object\",\"properties\":{\"medical\":{\"format\":\"double\",\"type\":\"number\"},\"rx\":{\"format\":\"double\",\"type\":\"number\"},\"dental\":{\"format\":\"double\",\"type\":\"number\"},\"vision\":{\"format\":\"double\",\"type\":\"number\"}}},\"SubCategory\":{\"type\":\"object\",\"properties\":{\"fundAmount\":{\"format\":\"double\",\"type\":\"number\"},\"erContrib\":{\"format\":\"double\",\"type\":\"number\"},\"eeContrib\":{\"format\":\"double\",\"type\":\"number\"},\"subCatHeaders\":{\"type\":\"string\"},\"subCatValues\":{\"type\":\"string\"},\"tier\":{\"type\":\"string\"},\"total\":{\"format\":\"double\",\"type\":\"number\",\"readOnly\":true}}},\"CensusTemplateOptions\":{\"type\":\"object\",\"properties\":{\"setName\":{\"type\":\"string\"},\"censusSetType\":{\"type\":\"string\"},\"clientName\":{\"type\":\"string\"},\"description\":{\"type\":\"string\"},\"asOfDate\":{\"format\":\"date-time\",\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"planInfoIds\":{\"type\":\"array\",\"items\":{\"format\":\"int32\",\"type\":\"integer\"}},\"planSubgroupNames\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"columns\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},\"ClaimsTemplateOptions\":{\"type\":\"object\",\"properties\":{\"clientName\":{\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefitType\":{\"type\":\"string\"},\"setName\":{\"type\":\"string\"},\"uploadType\":{\"type\":\"string\"},\"claimType\":{\"type\":\"string\"},\"columnDataType\":{\"type\":\"string\"},\"columnDateOrder\":{\"type\":\"string\"},\"isPriorColumn\":{\"type\":\"boolean\"},\"isDurationalColumn\":{\"type\":\"boolean\"},\"rowDataType\":{\"type\":\"string\"},\"rowDateOrder\":{\"type\":\"string\"},\"isPriorRow\":{\"type\":\"boolean\"},\"isDurationalRow\":{\"type\":\"boolean\"},\"startMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"startYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"stopMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"stopYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"startDate\":{\"format\":\"date-time\",\"type\":\"string\"},\"stopDate\":{\"format\":\"date-time\",\"type\":\"string\"}}},\"SelectedPlans\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"planName\":{\"type\":\"string\"},\"final\":{\"type\":\"boolean\"},\"finalEng\":{\"type\":\"string\"},\"versionCount\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefit\":{\"$ref\":\"#/definitions/Benefit\"},\"planStart\":{\"format\":\"date-time\",\"type\":\"string\"},\"planEnd\":{\"format\":\"date-time\",\"type\":\"string\"}}},\"Benefit\":{\"type\":\"object\",\"properties\":{\"medical\":{\"type\":\"boolean\"},\"rx\":{\"type\":\"boolean\"},\"dental\":{\"type\":\"boolean\"},\"vision\":{\"type\":\"boolean\"}}},\"Clients\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"clientGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"billingId\":{\"type\":\"string\"},\"sicCode\":{\"type\":\"string\"},\"actuaryFm\":{\"type\":\"string\"},\"created\":{\"format\":\"date-time\",\"type\":\"string\"},\"modified\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"isProspectClient\":{\"type\":\"boolean\"},\"censusSets\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusSets\"}},\"claimsSets\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsSets\"}},\"clientGroupIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClientGroupIntersect\"}},\"clientUserIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClientUserIntersect\"}},\"enrollmentSets\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EnrollmentSets\"}},\"fixedCostsSets\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostsSets\"}},\"largeClaimsSets\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimsSets\"}},\"planGroups\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanGroups\"}},\"planInfoSets\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoSets\"}},\"underwritingPlans\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UnderwritingPlans\"}},\"underwritingVersions\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UnderwritingVersions\"}}}},\"CensusSets\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"setGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"templateJsonSettings\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"descriptions\":{\"type\":\"string\"},\"asOfDate\":{\"format\":\"date-time\",\"type\":\"string\"},\"hide\":{\"type\":\"boolean\"},\"hiddenBy\":{\"type\":\"string\"},\"hiddenOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"censusBenefitTypes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusBenefitTypes\"}},\"censusVersions\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusVersions\"}},\"planInfoModelIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoModelIntersect\"}},\"client\":{\"$ref\":\"#/definitions/Clients\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"hiddenByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"ClaimsSets\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"setGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"descriptions\":{\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"templateJsonSettings\":{\"type\":\"string\"},\"hide\":{\"type\":\"boolean\"},\"hiddenBy\":{\"type\":\"string\"},\"hiddenOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"claimsBenefitNoMapping\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsBenefitNoMapping\"}},\"claimsBenefitTypes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsBenefitTypes\"}},\"claimsVersions\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsVersions\"}},\"planInfoModelIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoModelIntersect\"}},\"client\":{\"$ref\":\"#/definitions/Clients\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"hiddenByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"ClientGroupIntersect\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"clientGroupId\":{\"format\":\"int32\",\"type\":\"integer\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"clientGroup\":{\"$ref\":\"#/definitions/ClientGroups\"},\"client\":{\"$ref\":\"#/definitions/Clients\"}}},\"ClientUserIntersect\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"aspNetUsersId\":{\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"isAssignable\":{\"type\":\"boolean\"},\"aspNetUsers\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"client\":{\"$ref\":\"#/definitions/Clients\"}}},\"EnrollmentSets\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"setGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"descriptions\":{\"type\":\"string\"},\"templateJsonSettings\":{\"type\":\"string\"},\"hide\":{\"type\":\"boolean\"},\"hiddenBy\":{\"type\":\"string\"},\"hiddenOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"enrollmentBenefitTypes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EnrollmentBenefitTypes\"}},\"enrollmentVersions\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EnrollmentVersions\"}},\"planInfoModelIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoModelIntersect\"}},\"client\":{\"$ref\":\"#/definitions/Clients\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"hiddenByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"FixedCostsSets\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"setGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdBy\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"descriptions\":{\"type\":\"string\"},\"hide\":{\"type\":\"boolean\"},\"hiddenBy\":{\"type\":\"string\"},\"hiddenOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"fixedCostsVersions\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostsVersions\"}},\"planInfoModelIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoModelIntersect\"}},\"client\":{\"$ref\":\"#/definitions/Clients\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"hiddenByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"LargeClaimsSets\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"setGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"templateJsonSettings\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"descriptions\":{\"type\":\"string\"},\"hide\":{\"type\":\"boolean\"},\"hiddenBy\":{\"type\":\"string\"},\"hiddenOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"largeClaimsBenefitTypes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimsBenefitTypes\"}},\"largeClaimsVersions\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimsVersions\"}},\"planInfoModelIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoModelIntersect\"}},\"client\":{\"$ref\":\"#/definitions/Clients\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"hiddenByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"PlanGroups\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdBy\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"planGroupIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanGroupIntersect\"}},\"client\":{\"$ref\":\"#/definitions/Clients\"}}},\"PlanInfoSets\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"planName\":{\"type\":\"string\"},\"setGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdBy\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"planStartMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"planStartYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"planEndMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"planEndYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"finalized\":{\"type\":\"boolean\"},\"finalVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"parentSet\":{\"format\":\"int32\",\"type\":\"integer\"},\"hide\":{\"type\":\"boolean\"},\"hiddenBy\":{\"type\":\"string\"},\"hiddenOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"claimsBenefitTypes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsBenefitTypes\"}},\"planGroupIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanGroupIntersect\"}},\"planInfoModelIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoModelIntersect\"}},\"planInfoVersions\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoVersions\"}},\"client\":{\"$ref\":\"#/definitions/Clients\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"finalVersion\":{\"$ref\":\"#/definitions/PlanInfoVersions\"},\"hiddenByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"parentSetNavigation\":{\"$ref\":\"#/definitions/PlanInfoSets\"},\"inverseParentSetNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoSets\"}}}},\"UnderwritingPlans\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdBy\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"setGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"jsonPlans\":{\"type\":\"string\"},\"jsonVersions\":{\"type\":\"string\"},\"jsonClaims\":{\"type\":\"string\"},\"jsonEnrollment\":{\"type\":\"string\"},\"jsonFixedFees\":{\"type\":\"string\"},\"jsonLargeClaims\":{\"type\":\"string\"},\"jsonOptions\":{\"type\":\"string\"},\"jsonBenefitType\":{\"type\":\"string\"},\"jsonTierStructure\":{\"type\":\"string\"},\"client\":{\"$ref\":\"#/definitions/Clients\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"UnderwritingVersions\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"version\":{\"format\":\"int32\",\"type\":\"integer\"},\"descriptions\":{\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"calcJson\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"reviewedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"reviewedBy\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"metaData\":{\"type\":\"string\"},\"client\":{\"$ref\":\"#/definitions/Clients\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"reviewedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"CensusBenefitTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefitId\":{\"format\":\"int32\",\"type\":\"integer\"},\"censusSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefit\":{\"$ref\":\"#/definitions/BenefitTypes\"},\"censusSet\":{\"$ref\":\"#/definitions/CensusSets\"}}},\"CensusVersions\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"version\":{\"format\":\"int32\",\"type\":\"integer\"},\"hide\":{\"type\":\"boolean\"},\"descriptions\":{\"type\":\"string\"},\"censusSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"reviewedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"reviewedBy\":{\"type\":\"string\"},\"hiddenBy\":{\"type\":\"string\"},\"hiddenOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"uploadedExcel\":{\"format\":\"byte\",\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"asOfDate\":{\"format\":\"date-time\",\"type\":\"string\"},\"census\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Census\"}},\"planInfoModelIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoModelIntersect\"}},\"censusSet\":{\"$ref\":\"#/definitions/CensusSets\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"hiddenByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"reviewedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"PlanInfoModelIntersect\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrollmentSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrollmentVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimsSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimsVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"censusSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"censusVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"largeClaimsSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"largeClaimsVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"fixedCostsSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"fixedCostsVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"planInfoSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"planInfoVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"censusSet\":{\"$ref\":\"#/definitions/CensusSets\"},\"censusVersion\":{\"$ref\":\"#/definitions/CensusVersions\"},\"claimsSet\":{\"$ref\":\"#/definitions/ClaimsSets\"},\"claimsVersion\":{\"$ref\":\"#/definitions/ClaimsVersions\"},\"enrollmentSet\":{\"$ref\":\"#/definitions/EnrollmentSets\"},\"enrollmentVersion\":{\"$ref\":\"#/definitions/EnrollmentVersions\"},\"fixedCostsSet\":{\"$ref\":\"#/definitions/FixedCostsSets\"},\"fixedCostsVersion\":{\"$ref\":\"#/definitions/FixedCostsVersions\"},\"largeClaimsSet\":{\"$ref\":\"#/definitions/LargeClaimsSets\"},\"largeClaimsVersion\":{\"$ref\":\"#/definitions/LargeClaimsVersions\"},\"planInfoSet\":{\"$ref\":\"#/definitions/PlanInfoSets\"},\"planInfoVersion\":{\"$ref\":\"#/definitions/PlanInfoVersions\"}}},\"AspNetUsers\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"accessFailedCount\":{\"format\":\"int32\",\"type\":\"integer\"},\"concurrencyStamp\":{\"type\":\"string\"},\"email\":{\"type\":\"string\"},\"emailConfirmed\":{\"type\":\"boolean\"},\"lockoutEnabled\":{\"type\":\"boolean\"},\"lockoutEnd\":{\"format\":\"date-time\",\"type\":\"string\"},\"normalizedEmail\":{\"type\":\"string\"},\"normalizedUserName\":{\"type\":\"string\"},\"passwordHash\":{\"type\":\"string\"},\"phoneNumber\":{\"type\":\"string\"},\"phoneNumberConfirmed\":{\"type\":\"boolean\"},\"securityStamp\":{\"type\":\"string\"},\"twoFactorEnabled\":{\"type\":\"boolean\"},\"userName\":{\"type\":\"string\"},\"ageBandsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/AgeBands\"}},\"ageBandsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/AgeBands\"}},\"aspNetUserClaims\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/AspNetUserClaims\"}},\"aspNetUserLogins\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/AspNetUserLogins\"}},\"aspNetUserRoles\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/AspNetUserRoles\"}},\"benefitTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/BenefitTypes\"}},\"benefitTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/BenefitTypes\"}},\"carriersCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Carriers\"}},\"carriersModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Carriers\"}},\"censusRelationTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusRelationTypes\"}},\"censusRelationTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusRelationTypes\"}},\"censusSetsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusSets\"}},\"censusSetsHiddenByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusSets\"}},\"censusSetsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusSets\"}},\"censusVersionsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusVersions\"}},\"censusVersionsHiddenByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusVersions\"}},\"censusVersionsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusVersions\"}},\"censusVersionsReviewedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusVersions\"}},\"claimsBasisCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsBasis\"}},\"claimsBasisModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsBasis\"}},\"claimsSetsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsSets\"}},\"claimsSetsHiddenByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsSets\"}},\"claimsSetsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsSets\"}},\"claimsVersionsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsVersions\"}},\"claimsVersionsHiddenByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsVersions\"}},\"claimsVersionsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsVersions\"}},\"claimsVersionsReviewedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsVersions\"}},\"claimTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimTypes\"}},\"claimTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimTypes\"}},\"clientGroups\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClientGroups\"}},\"clientUserIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClientUserIntersect\"}},\"coverageTiersCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CoverageTiers\"}},\"coverageTiersModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CoverageTiers\"}},\"employmentTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EmploymentTypes\"}},\"employmentTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EmploymentTypes\"}},\"enrollmentSetsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EnrollmentSets\"}},\"enrollmentSetsHiddenByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EnrollmentSets\"}},\"enrollmentSetsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EnrollmentSets\"}},\"enrollmentVersionsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EnrollmentVersions\"}},\"enrollmentVersionsHiddenByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EnrollmentVersions\"}},\"enrollmentVersionsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EnrollmentVersions\"}},\"enrollmentVersionsReviewedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EnrollmentVersions\"}},\"fixedCostsSetsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostsSets\"}},\"fixedCostsSetsHiddenByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostsSets\"}},\"fixedCostsSetsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostsSets\"}},\"fixedCostsVersionsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostsVersions\"}},\"fixedCostsVersionsHiddenByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostsVersions\"}},\"fixedCostsVersionsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostsVersions\"}},\"fixedCostsVersionsReviewedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostsVersions\"}},\"fixedCostTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostTypes\"}},\"fixedCostTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostTypes\"}},\"fundingTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FundingTypes\"}},\"fundingTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FundingTypes\"}},\"genderTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/GenderTypes\"}},\"genderTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/GenderTypes\"}},\"guidanceTrendVersionCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/GuidanceTrendVersion\"}},\"guidanceTrendVersionModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/GuidanceTrendVersion\"}},\"hscodeTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/HscodeTypes\"}},\"hscodeTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/HscodeTypes\"}},\"largeClaimsSetsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimsSets\"}},\"largeClaimsSetsHiddenByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimsSets\"}},\"largeClaimsSetsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimsSets\"}},\"largeClaimsVersionsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimsVersions\"}},\"largeClaimsVersionsHiddenByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimsVersions\"}},\"largeClaimsVersionsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimsVersions\"}},\"largeClaimsVersionsReviewedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimsVersions\"}},\"largeClaimTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimTypes\"}},\"largeClaimTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimTypes\"}},\"peerReviewUserRoles\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PeerReviewUserRoles\"}},\"planAccountTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanAccountTypes\"}},\"planAccountTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanAccountTypes\"}},\"planCategoriesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanCategories\"}},\"planCategoriesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanCategories\"}},\"planInfoSetsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoSets\"}},\"planInfoSetsHiddenByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoSets\"}},\"planInfoSetsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoSets\"}},\"planInfoVersionsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoVersions\"}},\"planInfoVersionsHiddenByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoVersions\"}},\"planInfoVersionsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoVersions\"}},\"planInfoVersionsReviewedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoVersions\"}},\"planTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanTypes\"}},\"planTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanTypes\"}},\"poolingBasisCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PoolingBasis\"}},\"poolingBasisModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PoolingBasis\"}},\"populationTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PopulationTypes\"}},\"populationTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PopulationTypes\"}},\"underwritingPlans\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UnderwritingPlans\"}},\"underwritingVersionsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UnderwritingVersions\"}},\"underwritingVersionsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UnderwritingVersions\"}},\"underwritingVersionsReviewedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UnderwritingVersions\"}},\"unionTypesCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UnionTypes\"}},\"unionTypesModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UnionTypes\"}},\"vendorsCreatedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Vendors\"}},\"vendorsModifiedByNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Vendors\"}}}},\"ClaimsBenefitNoMapping\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefitId\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimsSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefit\":{\"$ref\":\"#/definitions/BenefitTypes\"},\"claimsSet\":{\"$ref\":\"#/definitions/ClaimsSets\"}}},\"ClaimsBenefitTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefitId\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimsSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"planInfoSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefit\":{\"$ref\":\"#/definitions/BenefitTypes\"},\"claimsSet\":{\"$ref\":\"#/definitions/ClaimsSets\"},\"planInfoSet\":{\"$ref\":\"#/definitions/PlanInfoSets\"}}},\"ClaimsVersions\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"version\":{\"format\":\"int32\",\"type\":\"integer\"},\"hide\":{\"type\":\"boolean\"},\"descriptions\":{\"type\":\"string\"},\"claimsSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"reviewedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"reviewedBy\":{\"type\":\"string\"},\"hiddenBy\":{\"type\":\"string\"},\"hiddenOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"uploadedExcel\":{\"format\":\"byte\",\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"startMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"startYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"stopMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"stopYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"claims\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Claims\"}},\"planInfoModelIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoModelIntersect\"}},\"claimsSet\":{\"$ref\":\"#/definitions/ClaimsSets\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"hiddenByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"reviewedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"ClientGroups\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"created\":{\"format\":\"date-time\",\"type\":\"string\"},\"modified\":{\"format\":\"date-time\",\"type\":\"string\"},\"aspNetUsersId\":{\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"clientGroupIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClientGroupIntersect\"}},\"aspNetUsers\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"EnrollmentBenefitTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefitId\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrollmentSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefit\":{\"$ref\":\"#/definitions/BenefitTypes\"},\"enrollmentSet\":{\"$ref\":\"#/definitions/EnrollmentSets\"}}},\"EnrollmentVersions\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"version\":{\"format\":\"int32\",\"type\":\"integer\"},\"hide\":{\"type\":\"boolean\"},\"createdBy\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"reviewedBy\":{\"type\":\"string\"},\"reviewedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"hiddenBy\":{\"type\":\"string\"},\"hiddenOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"descriptions\":{\"type\":\"string\"},\"enrollmentSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"uploadedExcel\":{\"format\":\"byte\",\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"startMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"startYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"stopMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"stopYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrollments\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Enrollments\"}},\"planInfoModelIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoModelIntersect\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"enrollmentSet\":{\"$ref\":\"#/definitions/EnrollmentSets\"},\"hiddenByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"reviewedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"FixedCostsVersions\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"version\":{\"format\":\"int32\",\"type\":\"integer\"},\"hide\":{\"type\":\"boolean\"},\"descriptions\":{\"type\":\"string\"},\"fixedCostSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"reviewedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"reviewedBy\":{\"type\":\"string\"},\"hiddenBy\":{\"type\":\"string\"},\"hiddenOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"editFrom\":{\"format\":\"int32\",\"type\":\"integer\"},\"fixedCosts\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCosts\"}},\"planInfoModelIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoModelIntersect\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"editFromNavigation\":{\"$ref\":\"#/definitions/FixedCostsVersions\"},\"inverseEditFromNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostsVersions\"}},\"fixedCostSet\":{\"$ref\":\"#/definitions/FixedCostsSets\"},\"hiddenByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"reviewedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"LargeClaimsBenefitTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefitId\":{\"format\":\"int32\",\"type\":\"integer\"},\"largeClaimsSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefit\":{\"$ref\":\"#/definitions/BenefitTypes\"},\"largeClaimsSet\":{\"$ref\":\"#/definitions/LargeClaimsSets\"}}},\"LargeClaimsVersions\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"version\":{\"format\":\"int32\",\"type\":\"integer\"},\"hide\":{\"type\":\"boolean\"},\"descriptions\":{\"type\":\"string\"},\"largeClaimsSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"reviewedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"reviewedBy\":{\"type\":\"string\"},\"hiddenBy\":{\"type\":\"string\"},\"hiddenOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"uploadedExcel\":{\"format\":\"byte\",\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"largeClaims\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaims\"}},\"planInfoModelIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoModelIntersect\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"hiddenByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"largeClaimsSet\":{\"$ref\":\"#/definitions/LargeClaimsSets\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"reviewedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"PlanGroupIntersect\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"planInfoSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"planGroupId\":{\"format\":\"int32\",\"type\":\"integer\"},\"planGroup\":{\"$ref\":\"#/definitions/PlanGroups\"},\"planInfoSet\":{\"$ref\":\"#/definitions/PlanInfoSets\"}}},\"PlanInfoVersions\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionGuid\":{\"format\":\"uuid\",\"type\":\"string\"},\"version\":{\"format\":\"int32\",\"type\":\"integer\"},\"hide\":{\"type\":\"boolean\"},\"descriptions\":{\"type\":\"string\"},\"planInfoSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"reviewedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"reviewedBy\":{\"type\":\"string\"},\"hiddenBy\":{\"type\":\"string\"},\"hiddenOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"parentVersion\":{\"format\":\"int32\",\"type\":\"integer\"},\"uploadedExcel\":{\"format\":\"byte\",\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"planInfoId\":{\"format\":\"int32\",\"type\":\"integer\"},\"editFrom\":{\"format\":\"int32\",\"type\":\"integer\"},\"planInfoModelIntersect\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoModelIntersect\"}},\"planInfoSets\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoSets\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"editFromNavigation\":{\"$ref\":\"#/definitions/PlanInfoVersions\"},\"inverseEditFromNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoVersions\"}},\"hiddenByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"parentVersionNavigation\":{\"$ref\":\"#/definitions/PlanInfoVersions\"},\"inverseParentVersionNavigation\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoVersions\"}},\"planInfo\":{\"$ref\":\"#/definitions/PlanInfo\"},\"planInfoSet\":{\"$ref\":\"#/definitions/PlanInfoSets\"},\"reviewedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"BenefitTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"censusBenefitTypes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusBenefitTypes\"}},\"claimsBenefitNoMapping\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsBenefitNoMapping\"}},\"claimsBenefitTypes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/ClaimsBenefitTypes\"}},\"enrollmentBenefitTypes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EnrollmentBenefitTypes\"}},\"largeClaimsBenefitTypes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimsBenefitTypes\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"Census\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"employeeId\":{\"type\":\"string\"},\"memberId\":{\"type\":\"string\"},\"relationId\":{\"format\":\"int32\",\"type\":\"integer\"},\"state\":{\"type\":\"string\"},\"city\":{\"type\":\"string\"},\"zip\":{\"type\":\"string\"},\"dob\":{\"format\":\"date-time\",\"type\":\"string\"},\"populationId\":{\"format\":\"int32\",\"type\":\"integer\"},\"unionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"genderId\":{\"format\":\"int32\",\"type\":\"integer\"},\"hsCodeId\":{\"format\":\"int32\",\"type\":\"integer\"},\"employmentId\":{\"format\":\"int32\",\"type\":\"integer\"},\"weeklyHours\":{\"format\":\"double\",\"type\":\"number\"},\"annualSalary\":{\"format\":\"double\",\"type\":\"number\"},\"hourlyRate\":{\"format\":\"double\",\"type\":\"number\"},\"hireDate\":{\"format\":\"date-time\",\"type\":\"string\"},\"terminationDate\":{\"format\":\"date-time\",\"type\":\"string\"},\"waived\":{\"type\":\"boolean\"},\"smokerSurcharge\":{\"type\":\"boolean\"},\"spousalSurcharge\":{\"type\":\"boolean\"},\"wellnessCredit\":{\"type\":\"boolean\"},\"hraCredit\":{\"type\":\"boolean\"},\"versionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"medicalPlanName\":{\"type\":\"string\"},\"rxPlanName\":{\"type\":\"string\"},\"visionPlanName\":{\"type\":\"string\"},\"dentalPlanName\":{\"type\":\"string\"},\"subCategoryHeaders\":{\"type\":\"string\"},\"subCategoryValues\":{\"type\":\"string\"},\"planTiers\":{\"type\":\"string\"},\"hrqcredit\":{\"type\":\"boolean\"},\"employeeContribution\":{\"format\":\"double\",\"type\":\"number\"},\"employerContribution\":{\"format\":\"double\",\"type\":\"number\"},\"totalBudget\":{\"format\":\"double\",\"type\":\"number\"},\"censusEmployeeContribution\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusEmployeeContribution\"}},\"employment\":{\"$ref\":\"#/definitions/EmploymentTypes\"},\"gender\":{\"$ref\":\"#/definitions/GenderTypes\"},\"hsCode\":{\"$ref\":\"#/definitions/HscodeTypes\"},\"population\":{\"$ref\":\"#/definitions/PopulationTypes\"},\"relation\":{\"$ref\":\"#/definitions/CensusRelationTypes\"},\"union\":{\"$ref\":\"#/definitions/UnionTypes\"},\"version\":{\"$ref\":\"#/definitions/CensusVersions\"}}},\"AgeBands\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"age\":{\"format\":\"int32\",\"type\":\"integer\"},\"gender\":{\"type\":\"string\"},\"factor\":{\"format\":\"double\",\"type\":\"number\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"AspNetUserClaims\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimType\":{\"type\":\"string\"},\"claimValue\":{\"type\":\"string\"},\"userId\":{\"type\":\"string\"},\"user\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"AspNetUserLogins\":{\"type\":\"object\",\"properties\":{\"loginProvider\":{\"type\":\"string\"},\"providerKey\":{\"type\":\"string\"},\"providerDisplayName\":{\"type\":\"string\"},\"userId\":{\"type\":\"string\"},\"user\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"AspNetUserRoles\":{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"},\"roleId\":{\"type\":\"string\"},\"role\":{\"$ref\":\"#/definitions/AspNetRoles\"},\"user\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"Carriers\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"CensusRelationTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"census\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Census\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"ClaimsBasis\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"ClaimTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"claims\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Claims\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"CoverageTiers\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"category\":{\"type\":\"string\"},\"tier\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"EmploymentTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"census\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Census\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"FixedCostTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"FundingTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"GenderTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"census\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Census\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"GuidanceTrendVersion\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"version\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdBy\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"guidanceTrend\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/GuidanceTrend\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"HscodeTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"census\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Census\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"LargeClaimTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"largeClaims\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaims\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"PeerReviewUserRoles\":{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"},\"peerReviewRoleId\":{\"type\":\"string\"},\"peerReviewRole\":{\"$ref\":\"#/definitions/PeerReviewRoles\"},\"user\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"PlanAccountTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"censusEmployeeContribution\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusEmployeeContribution\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"PlanCategories\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"PlanTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"PoolingBasis\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"PopulationTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"census\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Census\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"UnionTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"census\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Census\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"Vendors\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"createdOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedOn\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"planInfo\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfo\"}},\"createdByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"},\"modifiedByNavigation\":{\"$ref\":\"#/definitions/AspNetUsers\"}}},\"Claims\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimTypeId\":{\"format\":\"int32\",\"type\":\"integer\"},\"paidMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"paidYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimDollars\":{\"format\":\"double\",\"type\":\"number\"},\"netOrGross\":{\"type\":\"string\"},\"incurredMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"incurredYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimType\":{\"$ref\":\"#/definitions/ClaimTypes\"},\"version\":{\"$ref\":\"#/definitions/ClaimsVersions\"}}},\"Enrollments\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrollMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrollYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrollmentCount\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrollmentId\":{\"format\":\"int32\",\"type\":\"integer\"},\"coverageType\":{\"type\":\"string\"},\"versionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"coverageTier\":{\"type\":\"string\"},\"enrollment\":{\"$ref\":\"#/definitions/EnrollmentTypes\"},\"version\":{\"$ref\":\"#/definitions/EnrollmentVersions\"}}},\"FixedCosts\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"startMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"startYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"type\":{\"type\":\"string\"},\"dollar\":{\"format\":\"double\",\"type\":\"number\"},\"percent\":{\"format\":\"double\",\"type\":\"number\"},\"stopMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"stopYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"expenseCategory\":{\"type\":\"string\"},\"aggregateExpenses\":{\"type\":\"boolean\"},\"version\":{\"$ref\":\"#/definitions/FixedCostsVersions\"}}},\"LargeClaims\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"typeId\":{\"format\":\"int32\",\"type\":\"integer\"},\"employeeId\":{\"type\":\"string\"},\"memberId\":{\"type\":\"string\"},\"dob\":{\"format\":\"date-time\",\"type\":\"string\"},\"enrollmentId\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimAmount\":{\"format\":\"double\",\"type\":\"number\"},\"paidMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"paidYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"incurredMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"incurredYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrollment\":{\"$ref\":\"#/definitions/EnrollmentTypes\"},\"type\":{\"$ref\":\"#/definitions/LargeClaimTypes\"},\"version\":{\"$ref\":\"#/definitions/LargeClaimsVersions\"}}},\"PlanInfo\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"planType\":{\"type\":\"string\"},\"vendorId\":{\"format\":\"int32\",\"type\":\"integer\"},\"funding\":{\"type\":\"string\"},\"population\":{\"type\":\"string\"},\"union\":{\"type\":\"string\"},\"employment\":{\"type\":\"string\"},\"islSpecificDeductible\":{\"format\":\"double\",\"type\":\"number\"},\"islStartMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"islStopMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"islClaimBasis\":{\"type\":\"string\"},\"smokerSurcharge\":{\"format\":\"double\",\"type\":\"number\"},\"wellnessCredit\":{\"format\":\"double\",\"type\":\"number\"},\"hraCredit\":{\"format\":\"double\",\"type\":\"number\"},\"islCorridorDeductible\":{\"format\":\"double\",\"type\":\"number\"},\"spousalSurcharge\":{\"format\":\"double\",\"type\":\"number\"},\"managedBy\":{\"type\":\"string\"},\"planAccount\":{\"type\":\"string\"},\"islStartYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"islStopYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"unitized\":{\"type\":\"boolean\"},\"planBenefitTypes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanBenefitTypes\"}},\"planInfoVersions\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoVersions\"}},\"planSubGroups\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanSubGroups\"}},\"vendor\":{\"$ref\":\"#/definitions/Vendors\"}}},\"CensusEmployeeContribution\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"planAccountId\":{\"format\":\"int32\",\"type\":\"integer\"},\"employeeContribution\":{\"format\":\"double\",\"type\":\"number\"},\"censusId\":{\"format\":\"int32\",\"type\":\"integer\"},\"census\":{\"$ref\":\"#/definitions/Census\"},\"planAccount\":{\"$ref\":\"#/definitions/PlanAccountTypes\"}}},\"AspNetRoles\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"concurrencyStamp\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"normalizedName\":{\"type\":\"string\"},\"aspNetRoleClaims\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/AspNetRoleClaims\"}},\"aspNetUserRoles\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/AspNetUserRoles\"}}}},\"GuidanceTrend\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"startYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"endYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"medTrend\":{\"format\":\"double\",\"type\":\"number\"},\"rxTrend\":{\"format\":\"double\",\"type\":\"number\"},\"medRxTrend\":{\"format\":\"double\",\"type\":\"number\"},\"dentalTrend\":{\"format\":\"double\",\"type\":\"number\"},\"visionTrend\":{\"format\":\"double\",\"type\":\"number\"},\"versionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"version\":{\"$ref\":\"#/definitions/GuidanceTrendVersion\"}}},\"PeerReviewRoles\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"normalizedName\":{\"type\":\"string\"},\"tier\":{\"format\":\"int32\",\"type\":\"integer\"},\"peerReviewUserRoles\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PeerReviewUserRoles\"}}}},\"EnrollmentTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"code\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"created\":{\"format\":\"date-time\",\"type\":\"string\"},\"modified\":{\"format\":\"date-time\",\"type\":\"string\"},\"modifiedBy\":{\"type\":\"string\"},\"createdBy\":{\"type\":\"string\"},\"rank\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrollments\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Enrollments\"}},\"largeClaims\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaims\"}}}},\"PlanBenefitTypes\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefit\":{\"type\":\"string\"},\"planInfoId\":{\"format\":\"int32\",\"type\":\"integer\"},\"selected\":{\"type\":\"boolean\"},\"planPaid\":{\"format\":\"double\",\"type\":\"number\"},\"planInfo\":{\"$ref\":\"#/definitions/PlanInfo\"}}},\"PlanSubGroups\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"subCategoryHeaders\":{\"type\":\"string\"},\"subCategoryValues\":{\"type\":\"string\"},\"coverageTier\":{\"type\":\"string\"},\"totalBudget\":{\"format\":\"double\",\"type\":\"number\"},\"employeeContribution\":{\"format\":\"double\",\"type\":\"number\"},\"planInfoId\":{\"format\":\"int32\",\"type\":\"integer\"},\"employerContribution\":{\"format\":\"double\",\"type\":\"number\"},\"fundAmount\":{\"format\":\"double\",\"type\":\"number\"},\"planInfo\":{\"$ref\":\"#/definitions/PlanInfo\"}}},\"AspNetRoleClaims\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimType\":{\"type\":\"string\"},\"claimValue\":{\"type\":\"string\"},\"roleId\":{\"type\":\"string\"},\"role\":{\"$ref\":\"#/definitions/AspNetRoles\"}}},\"HttpResponseMessage\":{\"type\":\"object\",\"properties\":{\"version\":{\"$ref\":\"#/definitions/Version\"},\"content\":{\"$ref\":\"#/definitions/HttpContent\"},\"statusCode\":{\"enum\":[\"Continue\",\"SwitchingProtocols\",\"OK\",\"Created\",\"Accepted\",\"NonAuthoritativeInformation\",\"NoContent\",\"ResetContent\",\"PartialContent\",\"MultipleChoices\",\"Ambiguous\",\"MovedPermanently\",\"Moved\",\"Found\",\"Redirect\",\"SeeOther\",\"RedirectMethod\",\"NotModified\",\"UseProxy\",\"Unused\",\"TemporaryRedirect\",\"RedirectKeepVerb\",\"BadRequest\",\"Unauthorized\",\"PaymentRequired\",\"Forbidden\",\"NotFound\",\"MethodNotAllowed\",\"NotAcceptable\",\"ProxyAuthenticationRequired\",\"RequestTimeout\",\"Conflict\",\"Gone\",\"LengthRequired\",\"PreconditionFailed\",\"RequestEntityTooLarge\",\"RequestUriTooLong\",\"UnsupportedMediaType\",\"RequestedRangeNotSatisfiable\",\"ExpectationFailed\",\"UpgradeRequired\",\"InternalServerError\",\"NotImplemented\",\"BadGateway\",\"ServiceUnavailable\",\"GatewayTimeout\",\"HttpVersionNotSupported\"],\"type\":\"string\"},\"reasonPhrase\":{\"type\":\"string\"},\"headers\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/KeyValuePair[String,IEnumerable[String]]\"},\"readOnly\":true},\"requestMessage\":{\"$ref\":\"#/definitions/HttpRequestMessage\"},\"isSuccessStatusCode\":{\"type\":\"boolean\",\"readOnly\":true}}},\"Version\":{\"type\":\"object\",\"properties\":{\"major\":{\"format\":\"int32\",\"type\":\"integer\",\"readOnly\":true},\"minor\":{\"format\":\"int32\",\"type\":\"integer\",\"readOnly\":true},\"build\":{\"format\":\"int32\",\"type\":\"integer\",\"readOnly\":true},\"revision\":{\"format\":\"int32\",\"type\":\"integer\",\"readOnly\":true},\"majorRevision\":{\"format\":\"int32\",\"type\":\"integer\",\"readOnly\":true},\"minorRevision\":{\"format\":\"int32\",\"type\":\"integer\",\"readOnly\":true}}},\"HttpContent\":{\"type\":\"object\",\"properties\":{\"headers\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/KeyValuePair[String,IEnumerable[String]]\"},\"readOnly\":true}}},\"KeyValuePair[String,IEnumerable[String]]\":{\"type\":\"object\",\"properties\":{\"key\":{\"type\":\"string\",\"readOnly\":true},\"value\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"readOnly\":true}}},\"HttpRequestMessage\":{\"type\":\"object\",\"properties\":{\"version\":{\"$ref\":\"#/definitions/Version\"},\"content\":{\"$ref\":\"#/definitions/HttpContent\"},\"method\":{\"$ref\":\"#/definitions/HttpMethod\"},\"requestUri\":{\"type\":\"string\"},\"headers\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/KeyValuePair[String,IEnumerable[String]]\"},\"readOnly\":true},\"properties\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"object\"},\"readOnly\":true}}},\"HttpMethod\":{\"type\":\"object\",\"properties\":{\"method\":{\"type\":\"string\",\"readOnly\":true}}},\"ClientAccessEntryViewModel\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"billingId\":{\"type\":\"string\"},\"sicCode\":{\"type\":\"string\"},\"actuaryFm\":{\"type\":\"string\"},\"isProspectClient\":{\"type\":\"boolean\"},\"accessAssignable\":{\"type\":\"boolean\"},\"isProspectClientStr\":{\"type\":\"string\",\"readOnly\":true}}},\"ClientUsersWithAccess\":{\"type\":\"object\",\"properties\":{\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"usersWithAccess\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UserRole\"}}}},\"UserRole\":{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"},\"userEmail\":{\"type\":\"string\"},\"role\":{\"type\":\"string\"},\"peerReviewRoles\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"isAssignable\":{\"type\":\"boolean\"},\"peerReviewRolesStr\":{\"type\":\"string\",\"readOnly\":true}}},\"PlanInfoModelIntersectLocal\":{\"type\":\"object\",\"properties\":{\"planInfoModelIntersectId\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrollmentSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrollmentSetName\":{\"type\":\"string\"},\"enrollmentVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimsSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimSetName\":{\"type\":\"string\"},\"claimsVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"censusSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"censusSetName\":{\"type\":\"string\"},\"censusVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"largeClaimsSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"largeClaimSetName\":{\"type\":\"string\"},\"largeClaimsVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"fixedCostsSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"fixedCostSetName\":{\"type\":\"string\"},\"fixedCostsVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"planInfoSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"planInfoId\":{\"format\":\"int32\",\"type\":\"integer\"},\"planInfoVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"planName\":{\"type\":\"string\"},\"planStartMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"planStartYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"planEndMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"planEndYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"priorPlanInfoSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"censusSet\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/CensusSets\"}},\"enrollmentSet\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/EnrollmentSets\"}},\"fixedCostsSet\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/FixedCostsSets\"}},\"largeClaimsSet\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/LargeClaimsSets\"}},\"priorPlanInfoSet\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PlanInfoSets\"}}}},\"ClaimInfoModelIntersectLocal\":{\"type\":\"object\",\"properties\":{\"claimBenefitTypeId\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefitTypeName\":{\"type\":\"string\"},\"benefitTypeId\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimSetName\":{\"type\":\"string\"},\"planInfoSetId\":{\"format\":\"int32\",\"type\":\"integer\"}}},\"EnrollmentOptions\":{\"type\":\"object\",\"properties\":{\"startMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"startYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"stopMonth\":{\"format\":\"int32\",\"type\":\"integer\"},\"stopYear\":{\"format\":\"int32\",\"type\":\"integer\"},\"clientName\":{\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"setName\":{\"type\":\"string\"},\"uploadType\":{\"type\":\"string\"},\"enrollementName\":{\"type\":\"string\"},\"medical\":{\"type\":\"boolean\"},\"rx\":{\"type\":\"boolean\"},\"dental\":{\"type\":\"boolean\"},\"vision\":{\"type\":\"boolean\"},\"isTieredEnrollment\":{\"type\":\"boolean\"},\"isMemberCountsAvailable\":{\"type\":\"boolean\"},\"isMatchingMemberTiers\":{\"type\":\"boolean\"},\"selectedEnrollmentType\":{\"type\":\"string\"},\"unitizedLimit\":{\"format\":\"int32\",\"type\":\"integer\"},\"selectedActiveTiers\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"selectedActiveEnrollmentTier\":{\"type\":\"string\"},\"enrollmentTableName\":{\"type\":\"string\"}}},\"LargeClaimOptions\":{\"type\":\"object\",\"properties\":{\"clientName\":{\"type\":\"string\"},\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"largeClaimSetName\":{\"type\":\"string\"},\"largeClaimSetType\":{\"type\":\"string\"},\"enrollmentType\":{\"type\":\"string\"}}},\"RollOverPlan\":{\"type\":\"object\",\"properties\":{\"selectedSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"selectedVersionId\":{\"type\":\"array\",\"items\":{\"format\":\"int32\",\"type\":\"integer\"}}}},\"LoadPlansWizard\":{\"type\":\"object\",\"properties\":{\"clientId\":{\"type\":\"string\"},\"underwritingPlans\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UnderwritingPlan\"}},\"underwritingBenefits\":{\"$ref\":\"#/definitions/UnderwritingBenefits\"},\"underwritingTiers\":{\"type\":\"array\",\"items\":{\"type\":\"object\"}},\"underwritingPlanVersions\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UnderwritingPlanVersion\"}},\"underwritingClaims\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UnderwritingClaim\"}},\"underwritingEnrollment\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/UnderwritingEnrollment\"}},\"underwritingFixedFees\":{\"type\":\"array\",\"items\":{\"type\":\"object\"}},\"underwritingLargeClaims\":{\"type\":\"array\",\"items\":{\"type\":\"object\"}},\"underwritingOptions\":{\"$ref\":\"#/definitions/UnderwritingOptions\"}}},\"UnderwritingPlan\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"planName\":{\"type\":\"string\"},\"final\":{\"type\":\"boolean\"},\"finalEng\":{\"type\":\"string\"},\"versionCount\":{\"format\":\"int32\",\"type\":\"integer\"},\"benefit\":{\"$ref\":\"#/definitions/Benefit\"},\"planStart\":{\"format\":\"date-time\",\"type\":\"string\"},\"planEnd\":{\"format\":\"date-time\",\"type\":\"string\"}}},\"UnderwritingBenefits\":{\"type\":\"object\",\"properties\":{\"medical\":{\"type\":\"boolean\"},\"rx\":{\"type\":\"boolean\"},\"dental\":{\"type\":\"boolean\"},\"vision\":{\"type\":\"boolean\"}}},\"UnderwritingPlanVersion\":{\"type\":\"object\",\"properties\":{\"setId\":{\"format\":\"int32\",\"type\":\"integer\"},\"planName\":{\"type\":\"string\"},\"hide\":{\"type\":\"boolean\"},\"final\":{\"type\":\"boolean\"},\"finalEng\":{\"type\":\"string\"},\"versionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"version\":{\"format\":\"int32\",\"type\":\"integer\"},\"versionName\":{\"type\":\"string\"},\"planStart\":{\"format\":\"date-time\",\"type\":\"string\"},\"planEnd\":{\"format\":\"date-time\",\"type\":\"string\"}}},\"UnderwritingClaim\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"planName\":{\"type\":\"string\"},\"planStart\":{\"format\":\"date-time\",\"type\":\"string\"},\"planEnd\":{\"format\":\"date-time\",\"type\":\"string\"},\"claimSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimSetName\":{\"type\":\"string\"},\"benefit\":{\"type\":\"string\"},\"claimType\":{\"type\":\"string\"},\"claimVersion\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"claimVersionName\":{\"type\":\"string\"},\"claimVersionStart\":{\"format\":\"date-time\",\"type\":\"string\"},\"claimVersionEnd\":{\"format\":\"date-time\",\"type\":\"string\"},\"monthsToLag\":{\"format\":\"int32\",\"type\":\"integer\"}}},\"UnderwritingEnrollment\":{\"type\":\"object\",\"properties\":{\"id\":{\"format\":\"int32\",\"type\":\"integer\"},\"planName\":{\"type\":\"string\"},\"planStart\":{\"format\":\"date-time\",\"type\":\"string\"},\"planEnd\":{\"format\":\"date-time\",\"type\":\"string\"},\"benefit\":{\"type\":\"string\"},\"enrolSetId\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrolSetName\":{\"type\":\"string\"},\"enrolVersion\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrolVersionId\":{\"format\":\"int32\",\"type\":\"integer\"},\"enrolVersionName\":{\"type\":\"string\"},\"enrolVersionStart\":{\"format\":\"date-time\",\"type\":\"string\"},\"enrolVersionEnd\":{\"format\":\"date-time\",\"type\":\"string\"}}},\"UnderwritingOptions\":{\"type\":\"object\",\"properties\":{\"ratingPeriodType\":{\"type\":\"string\"},\"numOfPlanPeriod\":{\"type\":\"string\"},\"versionName\":{\"type\":\"string\"},\"versionNotes\":{\"type\":\"string\"},\"renewalStart\":{\"format\":\"date-time\",\"type\":\"string\"},\"renewalEnd\":{\"format\":\"date-time\",\"type\":\"string\"},\"claimType\":{\"type\":\"string\"}}},\"AuthRequest\":{\"type\":\"object\",\"properties\":{\"username\":{\"type\":\"string\"},\"password\":{\"type\":\"string\"}}},\"UnderwritingSave\":{\"type\":\"object\",\"properties\":{\"clientId\":{\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"description\":{\"type\":\"string\"},\"calcState\":{\"type\":\"object\"}}}},\"securityDefinitions\":{}}\n. I have checked this json. It is a valid json file.. ",
    "collimarco": "+1. ",
    "MichCest": "I am basically trying to nail down where the issue is originating, my xml file has the correct headers and the server does see it as an xml file, but swagger is trying to parse it as a JSON file. Are you trying to say this is not an issue with swagger? Just some background, I am very new to swagger and was asked to try and fix this bug.\n. Thank you for that tip, the response header for that file is content-type: application/json. I will update my swagger implementation too but does this confirm that it is a problem on our end and not with swagger?\n. I am using a browser, and actually get a different error in firefox vs chrome.\nChrome:\nUncaught SyntaxError: Unexpected token < (within the xml file)\nFirefox:\nSyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data (within swagger.js line:1395)\nI thought upgrading would just be a matter of upgrading the swagger.js file but it looks like a lot more than that. I will need someone to help me do that since I don't know how it was originally implemented.\nI will check in and let you know if I am able to fix the issue without touching swagger or if I upgrade and get a new error.\nThank you for you time and you very quick responses.\n. It looks like this, not formatted correctly like your.\n\n. \nYes looks like it could be an issue with our server declaring xml as json for some reason.\n. Also, just so you know, this is what we have within the java file for this GET request:\n@GET\n    @Produces({MediaType.APPLICATION_XML})\n    @Path(\"hidden\")\n    @ApiOperation(value = \"hidden\", response = String.class)\n    public String getParsed(\n            @ApiParam(value = hidden, required = true, allowMultiple = false) @PathParam(hidden) String hidden,\n            @ApiParam(value = hidden, required = true, allowMultiple = false) @PathParam(hidden) String hidden,\n            @ApiParam(value = hidden, required = true, allowMultiple = false) @PathParam(hidden) String hidden)\n                    throws ServiceException;\n(anything labelled hidden was done by me for this post FYI)\n. I actually believe we have found the issue, our backend is returning the \"xml\" file as a string rather than a valid xml file. They are working on fixing this and then our problem should be fixed. Your help guided us to this finding.\nThank you for all of your help and for being so attentive with my issue.\n. ",
    "fabian-marquardt": "I also encountered this issue, but later found out that swagger-js is behaving correctly. Citing the Swagger specification:\n\nbasePath: [...] The value MUST start with a leading slash (/)\n\nFor specification of the hostname/IP there is the host field.\n. ",
    "koh-osug": "I do not see these properties. I start swagger by passing a url:\n```\n  window.swaggerUi = new SwaggerUi({\n        url: serviceUrl+\"services/api/v1/swagger.json\",\nwindow.swaggerUi.load();\n```\nWhen starting swagger with this its internals do not construct a proper basePath. Based on the given URL Swagger must be able to handle this automatically.\n. ",
    "jonocodes": "Sure, the order can be switched. Is it safe to assume that when you add two schemes in the spec, that the order they are inserted is preserved? This way schemes[0] is deterministic. Just making sure.\n. Pull request updated\n. ",
    "kendzi": "fixed in #667 \n. ",
    "evdokim": "@fehguy  I checked it by changing this line in swagger-ui.js and it works fine there. \n. ",
    "dolmen": "Is is fixed by #690?\n. Swagger code generators (and swagger-ui) have special considerations for the names just under /definitions: they are important (contrary to JSON Schema from which Swagger is derived). You can't have a deep definitions tree under /definitions: the list of named schemas must be flat under /definitions.\nI recommend to instead transform your schema /definitions/client/value/valueProposition/strategicAlignment into a named shema at /definitions/StrategicAlignment and point all your usages of this schema with $ref.\n. ",
    "pwfff": "See PR #678\n. ",
    "delenius": "Yes, I can see my swagger.json in the browser at the same URL that I am trying to connect to from the client.\nMy client looks like:\njavascript\nvar Swagger = require('swagger-client');\nvar docurl = ...\nvar client = new Swagger({\n  url: docurl,\n  usePromise: true\n}).then(function(client){\n    console.log('Swagger client created from ' + docurl);\n}).catch(function(error){\n    console.log(error);\n    process.exit(1);\n});\n. I posted the curl output (just the headers) above. The body (swagger.json file content) is also printed by curl.\n. Don't think I can share the spec, but note that it was generated automatically by the swagger jersey servlet.\nAlso, what about those ECONNRESET errors?\nI tried initializing Swagger with a local copy of swagger.json, but it doesn't like 'file:swagger.json'...\n. Yeah, it works with the \"spec:  yourSpecObject\" method!\n. I don't know why you closed the issue since the problem is not solved.\nI tried the following: Copy swagger.json to the root of my web server, so that it's served as a plain file by jetty. Presto, that also works!\nSo it appears that the problem is with the Swagger Jersey servlet. However, the Swagger-UI web client does work with the swagger.json that is served by the Swagger Jersey servlet.\nI tried the method here for adding CORS support\nhttps://github.com/swagger-api/swagger-core/wiki/CORS-Support\nbut that made no difference.\n. Sounds like the same problem to me. It seems like the client works from the browser but not from node (because the browser handles the CORS stuff automatically?).\n. ",
    "gaah666": "I need access-control-origin settings to be able to use this client with swagger on a different server. \nI've configured the backend server to support cors, but the frontend (this client lib) isn't setting the required headers by looking at the request. \nOr am I missing something?\n. Alright thanks! See here:\nhttps://github.com/swagger-api/swagger-js/issues/722\n. Yes, I need this too!\nMy setup: \nBackend running on tomcat using spring for rest api with springfox to enable swagger.\nFrontend angular driven SPA running on apache 2 web server. Here I wish to use swagger-js to help me implement one layer of the rest api on frontend. \nBackend and frontend running on different virtual servers.\nEnabling CORS in backend is cake, but I see no way to do this with swagger-js? \nTBH I don't know if the server side setup I did works yet, but by just looking at the request headers in chrome the required CORS stuff isn't there.\n. ",
    "dleute": "We are getting a similar error but we are fairly sure it is due to our target system using a self signed SSL certificate. (it's working when we move the swagger.json elsewhere). Is there any way around that?\n. Also, we could store the swagger locally, but then it tries to talk to the api locally which doesn't make sense. Is there any way to split where the swagger json is stored and the target host?\n. I was able to set schemes, basepath and host in the spec. now the right url is created, but in my case, the target server still is not happy because of self signed ssl.\nI'm not sure what is actually making the rest calls based on this swagger spec. Still looking into that.\n. ",
    "A-J-Bauer": "In my case (asp.core app with custom swagger UI) I had to add this in Configure();\nvar provider = new FileExtensionContentTypeProvider();\nprovider.Mappings[\".json\"] = \"application/octet-stream\";\nbasically configuring the server to allow serving \".json\". ",
    "xiehan": "\na Response Object can't take a $ref at its root (spec restricition)\n\nI don't understand this. Then how are the top-level Response Definitions intended to be used?\n\nyou couldn't use it alongside a schema definition at the same level (that's a restriction of JSON Reference, not of the spec)\n\nSo is there any way to create any sort of inheritance model among Responses at all? If not, I find that incredibly frustrating. The amount of copy-pasting I've had to do for Swagger v2 compared to v1.2 has increased enormously, to the point where it's becoming unmanageable.\n. All right, ticket open. And just FYI, part of the problem for me was that swagger-php used to have a feature called 'Partials' in 1.x, which was designed to solve exactly this problem -- allowing annotations to be reused so you didn't have to copy-paste things over and over. Unfortunately, Partials were removed in 2.x because the maintainers said \"Swagger 2.0 now has definitions! We don't need partials anymore!\" But now it seems like there are some use cases for partials, like this one, that fell through the cracks.\n. ",
    "gnidan": "Thank you @fehguy!\n. Yep, updated as soon as I saw you merged the #681 fix :)\n. (That did fix the inline response issues, BTW; it's just these inline properties now aren't being resolved the way I would expect)\n. thank you! let me know if more information is needed\n. ",
    "hsingh23": "Was this fixed?\n. This bug was introduced here: https://github.com/swagger-api/swagger-js/commit/535d505cc40314be5b0d010796cc9431d9d8ee3a\n. ",
    "jmwohl": "@fehguy Any idea when 2.1.12 will be released? I'd like to get rid of these messages as well :+1: \n. Testing this PR locally, no issues... everything works as before (was on 2.1.9). Anything in particular I should try / look for?\n. ",
    "wfayeBerman": "I had the same problem running the sample code in the README.md.  I only did npm install swagger-client and ran the code provided in the demo as seen below.  Node version is v6.3.0\n```\nvar Swagger = require('swagger-client');\nvar client = new Swagger({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  success: function() {\n    client.pet.getPetById({petId:7},{responseContentType: 'application/json'},function(pet){\n      console.log('pet', pet);\n    });\n  }\n});\n```\nError message:\n{ url: 'http://petstore.swagger.io/v2/pet/7',\n  method: 'GET',\n  headers: \n   { date: 'Thu, 28 Jul 2016 18:06:09 GMT',\n     'access-control-allow-origin': '*',\n     'access-control-allow-methods': 'GET, POST, DELETE, PUT',\n     'access-control-allow-headers': 'Content-Type, api_key, Authorization',\n     'content-type': 'application/json',\n     connection: 'close',\n     server: 'Jetty(9.2.9.v20150224)' },\n  errObj: \n   { Error: Internal Server Error\n       at Request.callback (/var/www/abc/node_modules/superagent/lib/node/index.js:698:17)\n       at IncomingMessage.<anonymous> (/var/www/abc/node_modules/superagent/lib/node/index.js:922:12)\n       at emitNone (events.js:91:20)\n       at IncomingMessage.emit (events.js:185:7)\n       at endReadableNT (_stream_readable.js:973:12)\n       at _combinedTickCallback (internal/process/next_tick.js:74:11)\n       at process._tickCallback (internal/process/next_tick.js:98:9)\n     original: null,\n     response: \n      Response {\n        domain: null,\n        _events: {},\n        _eventsCount: 0,\n        _maxListeners: undefined,\n        res: [Object],\n        request: [Object],\n        req: [Object],\n        links: {},\n        text: '{\"code\":500,\"type\":\"unknown\",\"message\":\"something bad happened\"}',\n        body: [Object],\n        files: {},\n        buffered: true,\n        headers: [Object],\n        header: [Object],\n        statusCode: 500,\n        status: 500,\n        statusType: 5,\n        info: false,\n        ok: false,\n        redirect: false,\n        clientError: false,\n        serverError: true,\n        error: [Object],\n        accepted: false,\n        noContent: false,\n        badRequest: false,\n        unauthorized: false,\n        notAcceptable: false,\n        forbidden: false,\n        notFound: false,\n        type: 'application/json',\n        setEncoding: [Function: bound ],\n        redirects: [] },\n     status: 500 },\n  status: 500,\n  statusText: '{\"code\":500,\"type\":\"unknown\",\"message\":\"something bad happened\"}',\n  obj: { code: 500, type: 'unknown', message: 'something bad happened' },\n  data: '{\"code\":500,\"type\":\"unknown\",\"message\":\"something bad happened\"}' }\n. I think I found the problem, the README.md should be referencing pet items with a petId of 1 - 5.  the following worked for me\n```\nvar Swagger = require('swagger-client');\nvar client = new Swagger({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  success: function() {\n    client.pet.getPetById({petId:1},{responseContentType: 'application/json'},function(pet){\n      console.log('pet', pet);\n    });\n  }\n});\n```\n. sure thing, i just issued one here: https://github.com/swagger-api/swagger-js/pull/821\n. ok, it made sense that the id was 7 in the second example where there is actual error handling. in my case i was confused why it wasn't working, and i thought this would be helpful for beginners because it could be less likely that item 1 would be deleted.\n. got it, much appreciated!\n. ",
    "bodnia": "I'll check this issue and let you know.\n. @fehguy Checked, looks ok. Moved this to swagger-ui too.\n. @fehguy created issue and started to work on it. Could you please clarify second point?\n. @ponelat this was made due to breaking of GET requests in try out, nothing related to oauth.\nHere is the issue https://github.com/SmartBear/swagger-ux/issues/386. @ponelat that was reproducible for other apis too. @ponelat when we  do not have any content and (body/form) we should add a content-type for thing that we do not pass, is this correct?. fixed https://github.com/swagger-api/swagger-js/pull/1016. Issue https://github.com/swagger-api/swagger-ui/issues/2909. @ponelat merge?. @Bombenleger thanks for your note, it seems to me that it makes sense and I reverted these changes.. @ponelat yes, correct, it's a bug, but in https://github.com/swagger-api/swagger-ui\nHere everything works ok. Closing as this is not an issue in swagger-js.. There must be a drop-down to choose content-type for formData, but this is not implemented yet.\n@ponelat so you'd like to set first consumes value if it didn't come from swagger-ui as chosen one?. @ponelat this test is about not to set content type. Here https://github.com/swagger-api/swagger-js/pull/1016/files#diff-2932c1430f43e1d22b8cf8b98fa5d2a8R127 first we check if there is body or form and only after that - if there is content-type passed from UI. ",
    "LouisZou": "I have a restful api server in the LAN intranet. I think maybe the proxy is not supported in the definition file so that the request is not sent to the host.\nAnd I want to debug the trace for swagger.js.\n. And I receive a error from the response : \nOrigin is not allowed by Access-Control-Allow-Origin\nHow can I set the datatype to \"jsonp\", in the swagger-ui.js? \n. Thanks fehguy.\nNow I have a completed restful api host using the above path to provide the API.\nthat's meaning I have to consider the special character \"/\".\nis there any workaround for this?\n. Thanks fehguy.\nI found a simple method to resolve it temporarily like the following:\nOperation.prototype.encodePathParam = function (pathParam) {\n  //return encodeURIComponent(pathParam);\n  return pathParam.toString().split('/').map(encodeURIComponent).join('/');\n};\n. ",
    "rousku": "@fehguy I tested @PavelPolyakov 's example with latest swagger-ui (v2.1.0-alpha.6-1061-g0d1fda5) and the result is as in the screenshot. It's still not working. Is the problem in swagger-client or in swagger-ui? \n. I tested with https://github.com/swagger-api/swagger-ui/commit/a67722e87095847b4d4b91eb40a01ed7d63a500e and the result is same.\n. Request URL for NewCustomer.yaml is http://localhost:8080/definitions/NewCustomer.yaml and Web Developer shows that it is successfully loaded.\n. ",
    "brianfife": "The swagger-client used for swagger-ui doesn't seem to have trouble rendering the sampleJSON on the webpages, likely due to using buildFrom1_2Spec.\n/**\n * swagger-client - swagger.js is a javascript client for use with swaggering APIs.\n * @version v2.1.9-M1\n * @link http://swagger.io\n * @license apache 2.0\n */\n. Apologies, I didn't make it too obvious in that post - the v2.1.9-M1 is the swagger-client.js included in the automated api-docs (that is included in the project we are building).  I was just pointing out that it seems to work in that version on the web docs interface.\nI am experiencing this problem with swagger-client v2.1.11 from npm, and master:\ngit clone https://github.com/swagger-api/swagger-js.git\ncd swagger-js/\nnpm install\ncd ..\nnode test.js, which runs\n``` nodejs\nvar SwaggerClient = require('./swagger-js');\nnew SwaggerClient({\n  url: \"http://localhost/spec.json\",\n  usePromise: true,\n  progress: function(m) {console.log(m);}\n}).then(function(client) {\n  console.log(\"UserInfo =\",client.definitions.UserInfo);\n  console.log('---');\n  console.log(\"create sampleJSON is\", client['api/users'].apis.create.parameters[0].sampleJSON);\n  //console.log(client);\n});\n\n```\n```\n$ node test.js\nfetching resource list: http://localhost/spec.json; Please wait.\nUserInfo = { properties:\n   { password: { type: 'string', description: 'The password for the user' },\n     userName: { type: 'string', description: 'The user name' } },\n  enum: [ 'password', 'userName' ],\n  required: undefined,\n  id: 'userinfo',\n  name: 'UserInfo' }\n\ncreate sampleJSON is {\n  \"data\": \"password\"\n}\n```\n. Any comments/thoughts on what's going wrong (creating the enum, defaulting to enum[0])?\n. I can't just replace enum with required at line 156, since line 159 will immediately set it from existingModel.\nI guess line 159 would have to be similar to https://github.com/apigee-127/swagger-converter/blob/master/index.js#L757, right?\nschema.required = existingModel.required || _enum;\n. Sure.  I'll submit a pull request shortly.\n. ",
    "bendavis78": "I tried requestInterceptor, but SwaggerHttp doesn't wait for anything before sending the request.\nThe object being passed around has a deferred property, but that's a promise for the response. I need the client to wait on a promise for something that's needed before the request.\n. Not sure why travis build is failing, I ran locally and everything checked out.\n. ",
    "Haixing-Hu": "The ci build failed. That's quite strange :-(  \nThe test passed on my machine.\nAnd the details of the ci building process showed that the failure occurred in the plugin gulp-mocha. \nAnybody could help me? Thanks.\n. ",
    "markusz": "The proposed solution would not change behavior unless it is explicitly  disabled by setting options. disableAllOfResolve: true.\nA number of APIs I worked on didn't really require the use of allOf, so an option to disable this by means of a configuration attribute like the introduced disableAllOfResolve-flag might be beneficial for a number of users.\nI understand, if this does not fit your project policy, but also believe, that this is a short termed pragmatic solution without disadvantages that solves a problem which affects a number of users until a better and cleaner solution is found and implemented by someone with a deeper understanding of your codebase\n. Will do, but probably not before tomorrow\n. Not yet, but will try it out asap\n. Hey @fehguy, sorry for the delay.\nI finally managed to test #709 against my issue, but unfortunatelly it did not resolve the problem (see screenshot).\n\nThe problem keeps existing, since your change does not address the root of the performance issues (unnecessary recursive calls) in #708 but a different potential problem.\nIt seems that my proposed fixed does solve these problems according to andi-itagent \n. I will have to anonymize some stuff since it is an internal API for a customer, but I'll see to it as soon as I find time \n. @fehguy sent you the docs file via email\n. ",
    "andi-itagent": "+1\n. ",
    "mxgr7": "The test case I provided is not valid. I'll make sure it's valid first.\n. Is this something that will be supported in the future? Are there reasons why it hasn't been implemented other than no one taking the time to do it?\n. Okay. I was thinking about a different approach towards references. Why not add a pre-processing step where all references are resolved purely inside the JSON layer. Then hand the result to the swagger parser which doesn't need to handle or even know about references anymore.\nSeems logical to me especially since references are part of the JSON specification.\n. ",
    "cougil": "The spec? What do you mean with the spec? Do you mean the Json returned by the application?\n. ",
    "couds": "Im getting the same error. here my json file. I dont know how to generate the docs.. \n{\n    \"swagger\": \"2.0\",\n    \"info\": {\n        \"version\": \"0.0.1\",\n        \"title\": \"Workflow system\"\n    },\n    \"basePath\": \"/api\",\n    \"schemes\": [\n        \"http\",\n        \"https\"\n    ],\n    \"consumes\": [\n        \"application/json\"\n    ],\n    \"produces\": [\n        \"application/json\"\n    ],\n    \"paths\": {\n        \"/test\": {\n            \"get\": {\n                \"x-swagger-router-controller\": \"workflow\",\n                \"description\": \"Test Swagger\",\n                \"operationId\": \"test\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"default response\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Success\"\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"response other than\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Error\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/action/dispatch/\": {\n            \"post\": {\n                \"x-swagger-router-controller\": \"workflow\",\n                \"description\": \"Fire an action\",\n                \"operationId\": \"dispatch\",\n                \"parameters\": [\n                    {\n                        \"name\": \"action\",\n                        \"in\": \"body\",\n                        \"description\": \"action to be fired\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"object\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Success\"\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"Error\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Error\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/timeline/{timelineId}\": {\n            \"get\": {\n                \"x-swagger-router-controller\": \"timeline\",\n                \"description\": \"Get a timeline\",\n                \"operationId\": \"get\",\n                \"parameters\": [\n                    {\n                        \"name\": \"timelineId\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of timline to fetch\",\n                        \"required\": true,\n                        \"type\": \"string\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Timeline\"\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"Error\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Error\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/timeline/{timelineId}/activeStep\": {\n            \"get\": {\n                \"x-swagger-router-controller\": \"timeline\",\n                \"description\": \"Get a timeline active step\",\n                \"operationId\": \"getActiveStep\",\n                \"parameters\": [\n                    {\n                        \"name\": \"timelineId\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of timeline to fetch\",\n                        \"required\": true,\n                        \"type\": \"string\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success\",\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"$ref\": \"#/definitions/Step\"\n                            }\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"Error\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Error\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/workflow/\": {\n            \"post\": {\n                \"x-swagger-router-controller\": \"workflow\",\n                \"description\": \"Get a workflow\",\n                \"operationId\": \"create\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workflow\",\n                        \"in\": \"body\",\n                        \"description\": \"The workflow label and definitions to instanciate the template\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/WorkflowDefinition\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/WorkflowCreated\"\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"Error\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Error\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/workflow/create\": {\n            \"post\": {\n                \"x-swagger-router-controller\": \"workflow\",\n                \"description\": \"Create a new a workflow using the timelines templates on the request\",\n                \"operationId\": \"createCustom\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workflow\",\n                        \"in\": \"body\",\n                        \"description\": \"The workflow label and definitions to instanciate the template\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/CustomWorkflowDefinition\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/WorkflowCreated\"\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"Error\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Error\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/workflow/{workflowId}\": {\n            \"x-swagger-router-controller\": \"workflow\",\n            \"get\": {\n                \"description\": \"Get a workflow\",\n                \"operationId\": \"getWorkflow\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"workflowId\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of workflow to fetch\",\n                        \"required\": true,\n                        \"type\": \"string\",\n                        \"format\": \"ObjectID\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Workflow\"\n                        }\n                    },\n                    \"default\": {\n                        \"description\": \"Error\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Error\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/swagger\": {\n            \"x-swagger-pipe\": \"swagger_raw\"\n        }\n    },\n    \"definitions\": {\n        \"Step\": {\n            \"properties\": {\n                \"status\": {\n                    \"type\": \"string\"\n                },\n                \"name\": {\n                    \"type\": \"string\"\n                },\n                \"label\": {\n                    \"type\": \"string\"\n                },\n                \"requires\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        },\n        \"Timeline\": {\n            \"required\": [\n                \"id\",\n                \"name\",\n                \"steps\",\n                \"icon\"\n            ],\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"string\"\n                },\n                \"name\": {\n                    \"type\": \"string\"\n                },\n                \"icon\": {\n                    \"type\": \"string\"\n                },\n                \"steps\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/Step\"\n                    }\n                }\n            }\n        },\n        \"WorkflowCreated\": {\n            \"required\": [\n                \"id\"\n            ],\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"Workflow\": {\n            \"required\": [\n                \"id\"\n            ],\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"string\"\n                },\n                \"timelines\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/Timeline\"\n                    }\n                }\n            }\n        },\n        \"WorkflowDefinition\": {\n            \"required\": [\n                \"label\"\n            ],\n            \"properties\": {\n                \"label\": {\n                    \"type\": \"string\"\n                },\n                \"definitions\": {\n                    \"type\": \"object\"\n                },\n                \"timelines\": {\n                    \"type\": \"object\"\n                }\n            }\n        },\n        \"TimelineDefinition\": {\n            \"required\": [\n                \"id\",\n                \"label\"\n            ],\n            \"properties\": {\n                \"label\": {\n                    \"type\": \"string\"\n                },\n                \"id\": {\n                    \"type\": \"string\"\n                },\n                \"definitions\": {\n                    \"type\": \"object\"\n                },\n                \"active\": {\n                    \"type\": \"integer\"\n                },\n                \"name\": {\n                    \"type\": \"string\"\n                },\n                \"steps\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\"\n                    }\n                }\n            }\n        },\n        \"CustomWorkflowDefinition\": {\n            \"required\": [\n                \"label\",\n                \"timelines\"\n            ],\n            \"properties\": {\n                \"label\": {\n                    \"type\": \"string\"\n                },\n                \"definitions\": {\n                    \"type\": \"object\"\n                },\n                \"timelines\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/TimelineDefinition\"\n                    }\n                }\n            }\n        },\n        \"Error\": {\n            \"required\": [\n                \"code\",\n                \"message\"\n            ],\n            \"properties\": {\n                \"code\": {\n                    \"type\": \"integer\"\n                },\n                \"message\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"Success\": {\n            \"required\": [\n                \"message\"\n            ],\n            \"properties\": {\n                \"message\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    }\n}\non my app.js \n`\nvar SwaggerExpress = require('swagger-express-mw');\nvar SwaggerUi = require('swagger-tools/middleware/swagger-ui');\nvar app = require('express')();\nmodule.exports = app; // for testing\nvar config = {\n  appRoot: __dirname // required config\n};\nSwaggerExpress.create(config, function(err, swaggerExpress) {\n  if (err) { throw err; }\napp.use(SwaggerUi(swaggerExpress.runner.swagger));\n  // install middleware\n  swaggerExpress.register(app);\nvar port = process.env.PORT || 3000;\n  app.listen(port);\n});\n`\n. ",
    "hmonadjem": "having the same problem ... the swagger editor tells me that everything is fine ... . ",
    "meeximum": "have the problem too. ",
    "ricardona": "Same here. ",
    "briananderson1222": "@fehguy Updates have been made which have fixed the exception being thrown (wrong url path in an unrelated test case). I believe this test was previously giving a false positive as it wasn't actually building the API and testing what it claimed to be testing.\n. Any comments or thoughts on adding the ability to generate the SwaggerClient synchronously?\n. @fehguy - Is there any reason why we would not want this functionality?\n. @fehguy - There was no comments made here and that discussion was from 6 days ago. Sorry I didn't get a chance to read it.. I will take my complaints there then.\n. I attempted that fix as well @hswolff but doesn't it break the unit tests? I believe it made the client variable unavailable in the success callback. It did work as far as synchronous spec creation though from what I remember\n. Quite unfortunate.. The same behavior is maintained in this PR just provides additional behavior that was extremely helpful in my Angular application so we could easily have an API factory that could leverage this without forcing all of my service calls to do promise chaining or be wrapped in an async callback just to get this reference. Hopefully this is considered in the future.\n. I agree. This is a super useful feature that is not documented anywhere. I didn't want to have to define multiple interceptors throughout my angular application so I wrote a little angular wrapper like this:\n```\nclass AngularSwaggerHttpClient {\n  constructor($http) {\n    this.type = 'AngularHttpClient';\n    this.http = $http;\n  }\nexecute(obj) {\n    obj.deferred = {\n      promise: this.http({\n        url: obj.url,\n        method: obj.method,\n        data: obj.body,\n        params: obj.params,\n        headers: obj.headers\n      })\n    }\n  }\n}\n```\nAnd then I create an angular factory with the following:\nclass HttpClient {\n  static SwaggerClient($http) {\n    'ngInject';\n    return new SwaggerClient({\n      spec: swaggerJson,\n      client: new AngularSwaggerHttpClient($http)\n    });\n  }\n}\nOne little caveat is that the above code relies on https://github.com/swagger-api/swagger-js/pull/728 because as you can see it is creating the SwaggerClient synchronously based on the provided spec.\n. @nucleardreamer not publicly :) but I have implemented it on an Ionic application and an Angular web app with no issues. . The functionality I introduced in my pull request allows the library to continue working in the exact same way that it did previously via a success callback and promise if wanted. It simply provides an additional synchronous spec creation. \nIf there is a way to make this behavior synchronous wouldn't that be preferred? I understand the want for having consistent behavior, but I agree with @hswolff that this is completely unnecessary. Think about the scenario like in an angular application where I now have to purposefully introduce an asynchronous delay just to bootstrap my application just because of an artificial constraint by this library. \nAt the very least can this be a future consideration rather than just dismissing it as behavioral?\n. I definitely understand the necessity of wanting to be completely backwards compatible. I don't want to rush this either, just wanted to start the conversation and give a little insight into how I solved the issue for my project. At this current moment all the unit tests are passing in my PR but if you can think of some other scenarios that I should test I am willing to add more test cases. I definitely didn't spend as much time in that area\n. I assume maybe `typeof auth.apply === 'function'`` might be more appropriate. Should a default case here be true or false if the passed in security is not a 'SwaggerAuthorization' object?\n. Instead of removing this check, would it be more comfortable to check if options.url or options.spec are set? It doesn't effect the existing test cases either way\n. ",
    "hswolff": "Happy to help get this landed any way that we can!\n. Also FYI I did the most minimal of changes for my needs and AFAIK everything is working https://github.com/swagger-api/swagger-js/compare/master...TodayTix:dev\n. Yeah, I didn't check the unit tests at all so I believe you that it would break it.\n. Sorry about the seconds/milliseconds typo.\nI'm fine using promises and async interfaces however most libraries support a sync mode as well. I'd fully understand if there was a restriction due to architecture, but in this case it seems like an artificial constraint put into the library.\nThe API that you would interact with remains the same, except it would be called without the artificial 10 millisecond delay.\nWould you be open to removing the setTimeout of 10 and/or be open to adding a new method like Swagger.sync({options}) which doesn't allow for a url property? If so I'd be happy to collaborate to make that happen!\n. Not to beat this to death, but if you are instantiating an Swagger client from an url or from an object, then isn't that behavior already different? Why would different input produce the same output?\n. Alrighty.\nAnyway we can introduce some sync behavior? Otherwise I'll stick to my fork but would love to see this upstream.\n. ",
    "Ondoher": "In fact, this is such a useful feature, it should be made a first class citizen of the API. To get this to work I had to override SwaggerHttp.prototype.execute and modify opts.client. Not the most elegant way of handling this.\n. yaml\npaths:\n  '/v1/sessioninfo':\n    get:\n      summary: Get information about the current user's session.\n      produces:\n        - application/json\n      parameters:\n        - name: sessionToken\n          description: Session authentication token.\n          in: header\n          required: true\n          type: string\n      tags:\n        - Session\n      responses:\n        '200':\n          description: OK\n          schema:\n            $ref: '#/definitions/SessionInfo'\n        '400':\n          description: 'Client error, see response body for further details.'\n          schema:\n            $ref: '#/definitions/Error'\n        '401':\n          description: 'Unauthorized: Session tokens invalid.'\n          schema:\n            $ref: '#/definitions/Error'\n        '403':\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          schema:\n            $ref: '#/definitions/Error'\n        '500':\n          description: 'Server error, see response body for further details.'\n          schema:\n            $ref: '#/definitions/Error'\nThe parameter sessionToken is supposed to be passed as a header\n. ",
    "mbana": "Thanks, my vote is for this library: https://github.com/github/fetch.\n. Thanks. Would be nice to use this https://github.com/stefanpenner/es6-promise.\n. Please reopen this.\nWhy doesn't the client API return these models in the callback instead of a plain JSON object? res.obj is a plain JSON object.\n. I think it does. It makes it clear what the actual response is instead of a\nplain js file. This is more clear.\nOn 21 Sep 2016 16:40, \"Tony Tam\" notifications@github.com wrote:\n\nBecause, res.obj is the parsed version of your response payload, not\nthe payload definition. It doesn't make sense to be in that object.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/swagger-api/swagger-js/issues/838#issuecomment-248652064,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABYgkUX_TTSozr088ZxfoGyC9ijp_Jxks5qsVAIgaJpZM4Jotbu\n.\n. For example:\n- http://editor.swagger.io/#/\n- When you make the call to /persons It returns ArrayOfPersons.\n- If you make this call in the JS client, you're returned an \"plain\" Array.\n- It would be nice, if the actual res.obj contained meta information about what structure of the object.\n\nHope that's clear.\n. ",
    "nucleardreamer": "@briananderson1222 do you have any current examples of this on github?. ",
    "shamas": "How do parameters on the execute function work?\nIs execute with parameters the exact same as using the tag interface execute?\nWhat happens if we pass multiple objects to the tag interface execute function?\nHow are we meant to override headers using the execute interface?. This might be our fault. After some more research, it seems that if there is content length of 0, then Content-Type shouldn't be required.. ",
    "xunxky": "actually WHERE is the documentation? it lacks documentation completely!\n . ",
    "ios122": "@fehguy ?? click \"Files changed\".The change is : change \"require\" to \"rnc_require\".Current Version don't can be used in ReactNative.Because,the node Ver,lack of \"buff\" Module in RN;the web Ver,\"require\" is conflict to RN.RN diy the behavior of \"require\". Just try use sawgger-js in RN,then u will understand ME.ENJOY!\n. @fehguy I know.I am not good at gulp.I want use swaggerjs  in RN,but it not worked.My solution is change file in browser dir.My solution May be low,but it works.Maybe u can solute this in a better way.To Support RN will be great.The reason cannot used is RN is not a standard Node.\n. ",
    "DanielBodnar": "This has been to be a very frustrating limitation, especially in a node environment where one client != one session.\nPlease provide a way of specifying headers per request.\n. ",
    "SebiGo": "Thats it, thanks. I wasn't aware that \"easyapi_basic\" is a reference to the securityDefinitions.\n. ",
    "wandererr": "+1\n. ",
    "itabrezshaikh": "+1\n. ",
    "gunjpan": "aah, I went thru the code and it seems, it's fetching swagger.json/yaml file by HTTP GET call to a URL. So, this could be a feature request or is there anyway to achieve it? \n. @fehguy: Hi Tony, I would really appreciate if could you please share your views on the above (new to Swagger world). Thank you much!\n. @fehguy : thank you for your reply.  Yeah, I figured it out yesterday that I can pass the Swagger specification object to options.spec and got it working by parsing swagger spec file. \nRe:\n\nThe url field is still needed. \n\nSo, in a case, let's assume, I only have a  swagger spec file (i.e. spec obj) and url is not defined, how can this be dealt with? I mean, should the url be set to SwaggerObject.host?!\nFYI, I stored petStore.json spec file on local, passed it to the spec and was able to make calls successfully! \n. @waytoharish : here is where I'm using SwaggerClient : https://github.com/strongloop/loopback-connector-swagger/blob/a656eedd5490869152ed3e62a708bc4de13bf00d/lib/swagger-connector.js#L107-L119\nand here is the function where I'm parsing a local file: https://github.com/strongloop/loopback-connector-swagger/blob/a656eedd5490869152ed3e62a708bc4de13bf00d/lib/spec-resolver.js#L14\nHope that helps. ",
    "waytoharish": "Hi GunjPan,\nI am also trying to do the same.Can you please share how you had did the same.I have my product.yaml on my code and want to validate model against the yaml file.. I am using swagger-client. \nat phaseInvoke (c:\\Harish\\Strongloop\\PromiseTest\\SubscriptionWithPromise\\node_modules\\strong-remoting\\lib\\remote-objects.js:649:9)\nat runHandler (c:\\Harish\\Strongloop\\PromiseTest\\SubscriptionWithPromise\\node_modules\\strong-remoting\\node_modules\\loopback-phase\\lib\\phase.js:135:5)\nat iterate (c:\\Harish\\Strongloop\\PromiseTest\\SubscriptionWithPromise\\node_modules\\strong-remoting\\node_modules\\loopback-phase\\node_modules\\async\\lib\\async.js:146:13)\nat Object.async.eachSeries (c:\\Harish\\Strongloop\\PromiseTest\\SubscriptionWithPromise\\node_modules\\strong-remoting\\node_modules\\loopback-phase\\node_modules\\async\\lib\\async.js:162:9)\n\nshould be valid true\n. c:\\Harish\\Strongloop\\PromiseTest\\SubscriptionWithPromise\\common\\adapter\\test.yaml:3\n  version: 1.0.0\n              ^^\nSyntaxError: Unexpected number\n    at Object.exports.runInThisContext (vm.js:76:16)\n    at Module._compile (module.js:542:28)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.require (module.js:497:17)\n. swagger-client@3.0.6. Swagger is added with name of test.zip. Hi,\nAny update regarding this ???. ",
    "viliam-jobko": "@hswolff, @briananderson1222: If you are still looking for way to create swagger-client synchronously, I created this package for it: https://www.npmjs.com/package/swagger-client-sync. ",
    "artemjackson": "Or even better, can I pass custom http to Swagger constructor? E.g. angular's $http\n. Awesome! Thanks! I missed this option.\n. ",
    "jimwhimpey": "Yeah. Unfortunately there's no way around it for us.\n. \ud83d\ude04\n. ",
    "sebinsua": "The best way of doing this is with: any-promise. ",
    "yoihito": "@fehguy .on.reponse callback is overwritten here in swagger-js. It would be nice to add a similar thing for .on.error. \nI'm using requestInterceptor right now. These are properties for SwaggerClient:\nes6\n    const swaggerClientProps = {\n      url: this.props.swaggerApiUrl,\n      usePromise: true,\n      requestInterceptor: {\n        apply: (request) => {\n          const errorHandler = request.on.error;\n          request.on.error = (res) => {\n            const modifiedRes = this.onSwaggerApiError(res);\n            errorHandler(modifiedRes);\n          };\n          return request;\n        }\n      }\n    };\n. hi @webron,\nSmall introduction. I'm implementing a single-page application. Swagger is used to implement API.  API's authentication is implemented using OAuth 2. Access token for API is short lived. I need to update it every 5 minutes. \nSwagger-js is used as api client for SPA. I found out how to initialize swagger-js with access token.\n```\nimport Swagger from 'swagger-client';\n...\nconst swaggerPromise = Swagger(specUrl, {\n  authorizations: { jwtToken: { token: { access_token: 'SOME ACCESS TOKEN GENERATED BY API' } } },\n});\nI have to update access token every 5 minutes. What is the correct way to implement this?. @Robbilie thanks :) I implemented your approach and it works.\nswaggerPromise = Swagger(url, {\n    authorizations: { OauthSecurity: { token: { access_token: '' } } },\n});\n...\nswaggerPromise.then(client => {\n    client.authorizations.OauthSecurity.token.access_token = accessToken;\n    ...\n})\n```. @ponelat thank you! I knew that there are interceptors, but I didn't find out the way how to use them.. ",
    "dkottow": "sure, done here.\n. ",
    "battalian": "In which swagger version this issue got fixed?. ",
    "djMax": "Yeah, that's what's confusing the hell out of us - this was working a week ago, and 2.1.10 is much older. Working on isolating such that we could post some reasonable spec.\n. {\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"version\": \"0.0.1\"\n  },\n  \"paths\": {\n    \"/token\": {\n      \"post\": {\n        \"description\": \"Create a token for sensitive payment information\"\n      }\n    }\n  },\n  \"definitions\": {\n    \"Foobar\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"token\"\n      ],\n      \"properties\": {\n        \"token\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n. Here's the other trick - you have to load two swagger docs, of which this should be one.\n. @jasisk says it's this line https://github.com/swagger-api/swagger-js/blob/edf58820cca52149a76acf296783439c513a51b6/lib/types/operation.js#L150\n. Here's the (abridged) way it's loaded:\nfunction loadService(services, name) {\n      const client = new Client({\n        url,\n        spec: require(name),\n        usePromise: true,\n      });\n      services[name] = (await client).apis.default;\n}\n. It has something to do with usePromise\n. It happens there too. We're digging. It seems that the constructor returns a promise in usePromise case? A bit odd... My guess is that's messing with scopes somehow.\n. Now seems babel-related...\n. And in the end, it appears to be pg-promise. If I require that, this happens. If not, it doesn't. Yeesh.\n. It would need to be considered carefully by the user of the option, and I can see a clear argument it should be off by default. But the \"good hygiene\" case where cookies/etc are not stateful and keepalive is supported seems like it has to be a part of the lib. I guess it is now with \"reimplement all HTTP\" but ouch.\n. (is this even how superagent works? Would it re-send the cookies automatically? I didn't think it did that kind of thing)\n. Actually I wonder if we're falling victim to superagent's crap naming. request.agent is about cookies and all that. request().agent() sets the HTTP/S agent that the connection will use. That, I don't think, has anything to do with cookies or headers. I'm arguing that swagger-client should take an option for the latter.\n. This is fixed in master now - can we get a release?\n. I'm confused about this PR - it will replace ALL future swagger client requestAgents with the option that was passed to the options of one of them. That seems gross.. I can't follow it in the code, but turns out I'm wrong, it does take the security key of the root of the swagger spec and apply it to all operations. I just had the format wrong originally. So if you put:\n\"security\":[{\"basic\":[]}]\nAt root, it will apply basic to all calls.. This logic seems gone:\nhttps://github.com/swagger-api/swagger-js/blob/2.x/lib/client.js#L661. So I have a module between swagger-client and our applications: https://github.com/gas-buddy/configured-swagger-client\nI do a variety of unholy things in there now to try and make the transition from 2 to 3 less painful.\n\nI munge names like they used to be\nI add an obj property to the response that throws an error in dev but works silently in prod\nI modify the passed in swagger spec to include a \"consumes\" property if there isn't one\nI delete the url property when a spec is passed, because if I don't, swagger-client fetches that URL even if it has the content in the spec property\nI make more useful stack traces than \"process._tick\"\nI add the contents of \"apis\" back to the root client object\nI proxy all methods to enable header insertion that includes a cross-service correlation id.\n\nSo I don't like having to do all these things, but I don't need new workarounds in swagger-js.. I think perhaps what would've been easier is two majors for some of the changes. Throwing errors instead of objects - universally a good thing and a reasonable thing to break in a major. Changing \"obj\" to \"body\" - stylistic and would've been just as easy to do both for a version and then move away. And then I think the other point I've been trying to make is that the migration guide is not especially complete, so that'd be good to update I think.. That's exactly the behavior change. One of the services we use did not specify a \"consumes\" value, and the libray no longer defaults. I assume this is because of the switch from super agent. (Why are we using 0.0.8 of the fetch module when there's a 2.0?). Sorry I didn't reply to this - apply's second arg is an array which is \"spread\" to the function, so essentially the function gets one argument which is obj, not an array.. ",
    "jasisk": "I'm actively diagnosing but will try to provide more info and a test case as soon as I can.\n. ",
    "vitaly-t": "Sorry about the trouble, the issue has been fixed in pg-promise ;)\n. ",
    "travishaagen": "@fehguy : added two unit tests, thanks!\n. ",
    "wapolinar": "Ok, I tried that, but it is ignored (following the example):\nvar Swagger = require('swagger-client');\n        var client = new Swagger({\n            url: swaggerUrl,\n            success: function() {\n                client.setSchemes([window.location.protocol]); //This does not work\n                client.setHost(window.location.host);... //This works\nThe swaggerUrl contains a swagger.json with:\n\"host\" : \"localhost:8081\",\n  \"basePath\" : \"/myBasePath/api\",\n(...)\n  \"schemes\" : [ \"http\" ],\nThe host can be changed successfully, but the call still uses http instead of (in this case) https.\n. Yes, it works, sorry that I bothered you again.\nI tested it on the wrong method, realized that today and planned to do a new test today and extend/correct my reply.\nSo I did a new test just now, everything is working fine.\n. ",
    "kavanat": "Can you please tell what should be the parameter that should be passed to this method var client = new SwaggerClient(). I have made same changes but still it is taking reques url as http. ",
    "Maxooo": "Hi,\nIs there anything new on this behavior (a reference to a new ticket for example) ?\nThis problem seems to be still relevant.\nThank you.. ",
    "deckar01": "Thanks for looking at this.\nI thought swagger-js was a \"library to connect to swagger-enabled APIs\". Injecting extra data into the response does not seem to be within the scope of this project.\nThe implicit \"default\" tag could collide with a project's existing tags causing untagged operations to get mixed in with operations explicitly tagged \"default\".\nThe spec allows for empty tag lists, but swagger-js does not.\n\nNote! We will not merge pull requests for features not supported in the OAI Specification! Add an issue there instead!\n. Adding a configuration value (defaultTag?) for the default tag name would help avoid collisions. Maybe setting it to false could disable the behavior.\n\nI can see why making tags required would enforce good organizational habits. Maybe defaultTag should be requested as part of the spec.\n. ",
    "wfsaxton": "I also seem to having this problem in Chrome.  \nWhen I call the web service directly via CURL, I verify that it hits the database and responds.\nWhen I call the web service via swagger-ui \"Try it out!\", I get stale data.. ",
    "RehanSaeed": "@boly38 I think disabling cached responses should be the default option. Perhaps you should raise a PR with your small fix in it. Also, any idea where to add that code?. ",
    "boly38": "Hello @RehanSaeed \nhere is  the way I've added cache control to the header. I'm using authorization config.\nI'm maybe on an old version of swagger and I think my way is maybe not the good way to do that (little bit confusing to use Authorization config in order to set cache control header). That's why I would like to keep this improvment to swagger commiters: let them deciding the good way on how to do that integration.\n```\nvar apiKeyAuth = new SwaggerClient.ApiKeyAuthorization(\"Authorization\", \"Bearer \" + key, \"header\");\nvar apiKeyCacheA = new SwaggerClient.ApiKeyAuthorization(\"If-Modified-Since\", \"Mon, 26 Jul 1997 05:00:00 GMT\", \"header\");\nvar apiKeyCacheB = new SwaggerClient.ApiKeyAuthorization(\"Cache-Control\",     \"no-cache\", \"header\");\nvar apiKeyCacheC = new SwaggerClient.ApiKeyAuthorization(\"Pragma\",            \"no-cache\", \"header\");\nwindow.swaggerUi = new SwaggerUi({\n    authorizations: {\n        key:keyAuth,\n        cacheA:apiKeyCacheA,\n        cacheB:apiKeyCacheB,\n        cacheC:apiKeyCacheC\n    },\n    url: url,\n    (...)\n```. ",
    "ahashem": "In 2.x can we use the middleware.swaggerMetadata() to intercept and add the no-cache headers?. ",
    "javaworkinggirl": "Any updates on this?  Swagger is an excellent tool and to have testers use it, we need this fixed.  Thanks.. ",
    "achuth-amplify": "Can we please look into this ? We are having the same issue.. @webron does upgrading to 3.x fix this issue ?. ",
    "schof": "I'm actually still seeing this problem in swagger-ui v3.20.2. In my case changes to an schema definition that uses $ref.. ",
    "cwbuecheler": "Awesome, thanks for the info. I don't have jQuery enabled so that's probably the issue. Superagent would be preferable but I think I can work around it for now (this won't be a production app for a couple months anyway).\nThe headers I'm sending seem to indicate that, yes, it's multipart/form-data. This is what the dev tools are showing:\njavascript\nAccept:application/json\nAccept-Encoding:gzip, deflate\nAccept-Language:en-US,en;q=0.8,fr;q=0.6\nAuthorization: (bearer token)\nConnection:keep-alive\nContent-Length:0\nContent-Type:multipart/form-data\nI'll enable jQuery and see if I can get it working. Thanks again.\n. Fantastic, thank you!\n. No problem. Thanks for the speedy response.\n. ",
    "mdigirolami": "You are right!\nWhat do you think if we provide a specific wrapper type to address the wanted case? I mean: change the type for any single \"example\"\nnow: the type for any example entry is \"Any\";\nfuture: we provide a new type (named f.i. \"SingleExample\") that has two alternatively properties:\n- \"example-ref\": of type \"Reference Object\";\n- \"example-content\": of type Any (the old one).\n  ?\nExample:\n1) example without a reference:\nexamples: {\n    \"application/json\" {\n        \"example-content\": {\n            \"name\": \"Marco\",\n            \"surname\": \"Digi\"\n        }\n    }\n}\n2) example with a reference:\nexamples: {\n    \"application/json\" {\n        \"example-ref\": {\n            \"$ref\": \"./questionnaire_example.json\"\n        }\n    }\n}\nwith questionnaire_example.json defined separately as now:\n{\n    \"name\": \"Marco\",\n    \"surname\": \"Digi\"\n}\nWhat do you think? In my opinion allow to manage external examples is very very convenience in many cases...\n. ",
    "kennytnguyen": "Reference: https://github.com/swagger-api/swagger-ui/issues/2236\n. Fixed. In shred.bundle.js.\nurl: { get: function() { if (!this.scheme) { return null; } return sprintf(\"%s://%s%s%s\", this.scheme, this.host, getPortString(this.scheme, this.port), //removed Port (this.proxy ? \"/\" : this.path) + (this.query ? (\"?\" + this.query) : \"\")); },\nyou can take out the colon from %s://%s%s%s\n. ",
    "fny": "Can a section detailing the full initialization options be added to the README? I had actually dug through the source, and wasn't sure what was what.\nHere's what I have so far. \nInitialization Options\nYou can initialize a SwaggerClient via new SwaggerClient(options) with the following options:\njs\n{\n  // URL to the Swagger specification to use for the client (String)\n  url: null,\n  // Authorizations to supply (Object - See \"API Keys\")\n  authorizations: null,\n  // Callback executed on success of reading the spec at the `url` (Function)\n  success: function() {},\n  // Function - Callback executed on failure of reading the spec at the `url`\n  failure: function (err) { throw err; },\n  // ??? (Function)\n  progress: function() {},\n  // Directly supply a Swagger spec directy for consumption (Object)\n  spec: null,\n  // Enable the client to return Q promises (Boolean)\n  usePromise: null,\n  // Request headers (String)\n  swaggerRequestHeaders: 'application/json;charset=utf-8,*/*'\n  // ??? (Function)\n  defaultErrorCallback: null,\n  // ??? (Function)\n  defaultSuccessCallback: null,\n  // ???\n  parameterMacro: null,\n  // ???\n  modelPropertyMacro: null,\n  // Use jQuery AJAX instead of Superagent (Boolean)\n  useJQuery: null,\n  // When false, jQuery will append a timestamp to the URL (Boolean)\n  jqueryAjaxCache: null,\n  // Whether to enable cookies (Boolean)\n  enableCookies: null,\n  // ??? (Array<String>)\n  supportedSubmitMethods: [],\n  // ???\n  scheme: null,\n}\n. Can you help me fill in the gaps for documenting the other initialization options? I can make a new PR if that would be easier.\n. ",
    "amcdnl": "Ya, but doesn't that kind of defeat the whole purpose of this project? lol\n. Gotcha, just making sure we are on the same page. I might get some time to contrib the TSD's.\n. ",
    "Kushi171987": "Thank very much \ud83d\udc4d  You save my day :)\n. ",
    "dgreenbean": "This PR was mainly to highlight the issue and a potential fix.  I don't know Javascript well enough to tackle a real fix myself.\n. ",
    "chadxz": "When using v2.0.26, we had some code that was calling \n```\n    var swagger = require('swagger-client');\nswagger.authorizations.add(\n  'basic-auth',\n  new swagger.PasswordAuthorization(hostname, user, pass)\n);\n\n```\nin 2.1.17 swagger.authorizations is undefined\nAdditionally, when using v2.0.26, we had some code referencing client.apis.events.models, but in 2.1.17, client.apis.events is undefined. events in this case was something that swagger-client was populating based on the swagger.json of our server. Upon investigating this, it looks like a great deal of the structure of the processed api definition has changed.\n. ",
    "rathishkumar89": "Hi Tony,\nHere is the example web request \nWeb-Request\njson\n{\n  \"path\": \"/pets/getPet.do\",\n  \"operations\": [\n    {\n      \"method\": \"GET\",\n      \"summary\": \"This API endpoint retrieves entire pets.\",\n      \"notes\": \"Returns the paginated list.\",\n      \"type\": \"void\",\n      \"nickname\": \"getPet.do\",\n      \"parameters\": [\n        {\n          \"name\": \"petType\",\n          \"description\": \"Possible types\",\n          \"required\": false,\n          \"format\": \"string\",\n          \"in\": \"query\"\n        },\n        {\n          \"name\": \"test\",\n          \"description\": \"The value test.\",\n          \"required\": true,\n          \"format\": \"String\",\n          \"in\": \"query\"\n        }\n      ]\n    }\n  ]\n}\nOutput for above request:\n/pets/getPet.do?test=dog\nExpected output:\n/pets/getPet.do?petType=&test=dog\nSo we introduced, allowEmptyValue : true for parameter \"petType\" to get expected output. But it is not functional. Can you please let us know the alternative to achieve the expected output\n. ",
    "amitkhese": "We are not using swagger UI for .net anywhere in our project. I thought swashbuckle is using that internally.Thanks for confirm.\nDo you think swashbuckle  upgrade will resolve this issue?\n. ",
    "feedsbrain": "It's just suggestion and it's more convenient to pass-in the custom headers from the client. Currently it was also confusing, headers options only applied to \"Accept\" and nothing else.\n. ",
    "aguerotSOVINTY": "Failed test is intended. This PR is about adding a new test case for $ref constructs with an allOf array. See test/spec/v2/externalRefInAllOf.json file provided.\n. Yes indeed there is a commit missing\u2026\nDo I have to create a new PR for this or can I just commit and push to my repo?\nTx\n. Found something that looks like a bug when defining an entity that uses an allOf construct with multiple $ref entries.\nIt is linked to test 'should resolve external references within allOf' in /test/resolver.js\n. ",
    "neumond": "Regarding test failure, it's reproducible even on master:\ngit clone https://github.com/swagger-api/swagger-js.git\ncd swagger-js\nnpm install\n./node_modules/.bin/gulp browsertest\n\nFirefox 47.0.0 (Linux 0.0.0) yaml http superagent with promise should call the catch-function when executing an invalid api-call FAILED\n. Whoah, it was not easy. RetainRoot contained another buggy place which did fire during writing a test. Tested additionally against my spec, works fine.\n. Oh, so dramatic. Sorry, I didn't want to hurt you in any way, but I still consider this file quite dirty-written. There're many reasons why people may write things coarsely, it's pretty understandable, I don't blame you for that. But put yourself in my position for a moment, swagger ui breaks on every \"non-trivial\" (but valid!) $ref used in specification, and the more bugs I fix, the more I find new ones. I offer you my help in first place (possibly almost complete rewrite of resolver). But I need to understand better area of responsibility of Resolver object, better described API and this thing with models. If you don't need such help or you think this code is perfect, it's ok, I'll just close this issue and stop working on this.. Hmm.. I can PR you couple of tests then. Got it.. \n",
    "smadduri": "Hmm. I didn't realize I was on an older version. I am using the swagger jersey 2.x version 1.5.0. I will try with the latest version tonight. Thanks for a pointer. And yes if I find the issue again, I will report it in swagger-core.\n. ",
    "darius-iko": "Thank you\n. ",
    "deepakvenkat": "+1 \n. ",
    "cesine": "@fehguy anything you'd like on this one? I'd like to use it too\n. will do, its mostly just docs. \nthanks @fehguy we really appreciated it! \n. @fehguy I squashed and rebased and pushed to this branch if you want to re-use this PR you can re-open it\n. @fehguy yeah i found that line, updated the description and pushed the fix in this PR. lets see if travis passes. ",
    "c4milo": "This same issue may be causing this one too: https://github.com/swagger-api/swagger-ui/issues/1006\n. you probably need to initialize Swagger's authorizations object first: \njavascript\nSwagger({\n  spec: APISpec,\n  authorizations: {\n    apiAuthorization: ''\n  }\n}).then(client => {});. @tcosentino I'm curious, why the need for the thenable call when providing the JSON spec already loaded?. for new people landing here, this is how I did it with a Nuxt plugin: \n```javascript\nimport Vue from 'vue';\nimport Swagger from 'swagger-client';\nimport APISpec from '~assets/identity.swagger.json';\nconst APIClient = {\n    install (Vue, options) {\n        Swagger({ spec: APISpec }).then((client) => {\n            Vue.prototype.$client = client;\n            Vue.prototype.$api = client.apis;\n        }, (error) => {\n            console.error('failed to load api spec: %o', error);\n        });\n    }\n};\nVue.use(APIClient);\n.json\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"title\": \"The API\",\n    \"version\": \"v0.1.0\"\n  },\n  \"schemes\": [\n    \"https\"\n  ],\n  \"consumes\": [\n    \"application/json\"\n  ],\n  \"produces\": [\n    \"application/json\"\n  ],\n  \"paths\": {\n    \"/organizations\": {\n      \"get\": {\n        \"summary\": \"List returns all the organizations where you are a member.\",\n        \"operationId\": \"List\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiOrgListResponse\"\n            }\n          }\n        },\n        \"tags\": [\n          \"Orgs\"\n        ]\n      },\n      \"post\": {\n        \"summary\": \"Create creates a new organization\",\n        \"operationId\": \"Create\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiOrgCreateResponse\"\n            }\n          }\n        },\n        \"parameters\": [\n          {\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"required\": true,\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiOrgCreateRequest\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Orgs\"\n        ]\n      }\n    },\n    \"/organizations/{org_id}/is-admin\": {\n      \"get\": {\n        \"summary\": \"IsAdminUser checks whether the requesting user belongs to the admins or owners team within\\nthe given organization.\",\n        \"operationId\": \"IsAdminUser\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiOrgIsAdminUserResponse\"\n            }\n          }\n        },\n        \"parameters\": [\n          {\n            \"name\": \"org_id\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"type\": \"string\"\n          }\n        ],\n        \"tags\": [\n          \"Orgs\"\n        ]\n      }\n    },\n    \"/password\": {\n      \"put\": {\n        \"summary\": \"ChangePassword changes the user password.\",\n        \"operationId\": \"ChangePassword\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiChangePasswordResponse\"\n            }\n          }\n        },\n        \"parameters\": [\n          {\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"required\": true,\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiChangePasswordRequest\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Authz\"\n        ]\n      }\n    },\n    \"/password-reset\": {\n      \"post\": {\n        \"summary\": \"SendPasswordResetLink sends a reset link to user's email address.\",\n        \"operationId\": \"SendPasswordResetLink\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiPasswordResetResponse\"\n            }\n          }\n        },\n        \"parameters\": [\n          {\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"required\": true,\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiPasswordResetRequest\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Authz\"\n        ]\n      }\n    },\n    \"/register\": {\n      \"post\": {\n        \"summary\": \"Register dynamically creates an OpenID Connect application.\",\n        \"operationId\": \"Register\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiRegisterApp\"\n            }\n          }\n        },\n        \"parameters\": [\n          {\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"required\": true,\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiRegisterApp\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Apps\"\n        ]\n      }\n    },\n    \"/signup\": {\n      \"post\": {\n        \"summary\": \"SignUp creates an account.\",\n        \"operationId\": \"SignUp\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiSignUpResponse\"\n            }\n          }\n        },\n        \"parameters\": [\n          {\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"required\": true,\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiSignUpRequest\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Authz\"\n        ]\n      }\n    },\n    \"/teams\": {\n      \"get\": {\n        \"summary\": \"List returns all the teams where you are a member.\",\n        \"operationId\": \"List\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiTeamsListResponse\"\n            }\n          }\n        },\n        \"parameters\": [\n          {\n            \"name\": \"org_id\",\n            \"in\": \"query\",\n            \"required\": false,\n            \"type\": \"string\"\n          }\n        ],\n        \"tags\": [\n          \"Teams\"\n        ]\n      }\n    },\n    \"/userinfo\": {\n      \"get\": {\n        \"summary\": \"Info Returns user information.\",\n        \"operationId\": \"Info\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/apiInfoResponse\"\n            }\n          }\n        },\n        \"tags\": [\n          \"Accounts\"\n        ]\n      }\n    }\n  },\n  \"definitions\": {\n    \"apiChangePasswordRequest\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"password1\": {\n          \"type\": \"string\",\n          \"title\": \"New password\"\n        },\n        \"password2\": {\n          \"type\": \"string\",\n          \"title\": \"New password confirmation\"\n        }\n      }\n    },\n    \"apiChangePasswordResponse\": {\n      \"type\": \"object\"\n    },\n    \"apiInfoResponse\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"sub\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"email_verified\": {\n          \"type\": \"boolean\",\n          \"format\": \"boolean\"\n        },\n        \"picture\": {\n          \"type\": \"string\"\n        },\n        \"last_signin\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        }\n      },\n      \"title\": \"UserinfoResponse as defined in http://openid.net/specs/openid-connect-core-1_0.html#UserInfoResponse\"\n    },\n    \"apiIssueTokenResponse\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"access_token\": {\n          \"type\": \"string\",\n          \"title\": \"AccessToken is the signed access token in JWT format\"\n        },\n        \"token_type\": {\n          \"type\": \"string\",\n          \"description\": \"TokenType is the access token type, always Bearer.\"\n        },\n        \"refresh_token\": {\n          \"type\": \"string\",\n          \"description\": \"RefreshToken is the new refresh token.\"\n        },\n        \"expires_in\": {\n          \"type\": \"string\",\n          \"format\": \"int64\",\n          \"description\": \"ExpiresIn is the time in seconds after which the access token is no longer valid.\"\n        },\n        \"id_token\": {\n          \"type\": \"string\",\n          \"description\": \"IdToken is the signed ID token in JWT format.\"\n        },\n        \"state\": {\n          \"type\": \"string\",\n          \"description\": \"State is a value provided by the client, used to prevent CSRF attacks.\"\n        }\n      },\n      \"description\": \"IssueTokenResponse is the message sent back to the client application upon requesting tokens with any of the grant types supported.\"\n    },\n    \"apiOrgCreateRequest\": {\n      \"type\": \"object\"\n    },\n    \"apiOrgCreateResponse\": {\n      \"type\": \"object\"\n    },\n    \"apiOrgIsAdminUserResponse\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"teams\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"boolean\",\n            \"format\": \"boolean\"\n          }\n        }\n      },\n      \"description\": \"OrgIsAdminUserResponse contains the \\\"admin\\\" teams the user belongs to in the queried organization.\"\n    },\n    \"apiOrgListResponse\": {\n      \"type\": \"object\",\n      \"description\": \"OrgListResponse ...\"\n    },\n    \"apiPasswordResetRequest\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"email\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"apiPasswordResetResponse\": {\n      \"type\": \"object\"\n    },\n    \"apiRegisterApp\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"redirect_uris\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"RedirectUris is the list of Redirection URI values used by the Client. REQUIRED.\"\n        },\n        \"response_types\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"ResponseTypes is the list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using.\"\n        },\n        \"grant_types\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"GrantTypes is the list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using.\"\n        },\n        \"application_type\": {\n          \"type\": \"string\",\n          \"description\": \"ApplicationType is the kind of the application. The default, if omitted, is web. The defined values are native or web.\\nWeb Clients using the OAuth Implicit Grant Type MUST only register URLs using the https scheme as redirect_uris; they MUST NOT use\\nlocalhost as the hostname. Native Clients MUST only register redirect_uris using custom URI schemes or URLs using the http: scheme\\nwith localhost as the hostname.\"\n        },\n        \"contacts\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"Contacts is the list of e-mail addresses of people responsible for this Client.\"\n        },\n        \"client_name\": {\n          \"type\": \"string\",\n          \"description\": \"ClientName is the name of the Client to be presented to the End-User. REQUIRED.\"\n        },\n        \"logo_uri\": {\n          \"type\": \"string\",\n          \"description\": \"LogoUri is the URL that references a logo for the Client application.\"\n        },\n        \"client_uri\": {\n          \"type\": \"string\",\n          \"description\": \"ClientUri is the URL of the home page of the Client. The value of this field MUST point to a valid Web page.\"\n        },\n        \"policy_uri\": {\n          \"type\": \"string\",\n          \"description\": \"PolicyUri is the URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.\"\n        },\n        \"tos_uri\": {\n          \"type\": \"string\",\n          \"description\": \"TosUri is the URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service.\"\n        },\n        \"jwks_uri\": {\n          \"type\": \"string\",\n          \"description\": \"JwksUri is the URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the\\nsigning key(s) the Server uses to validate signatures from the Client.\"\n        },\n        \"jwks\": {\n          \"type\": \"string\",\n          \"description\": \"Jwks is the Client's JSON Web Key Set [JWK] document, passed by value. This parameter is intended only to be used by Clients that, for\\nsome reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set.\"\n        },\n        \"sector_identifier_uri\": {\n          \"type\": \"string\",\n          \"description\": \"SectorIdentifierUri is the URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.\"\n        },\n        \"subject_type\": {\n          \"type\": \"string\",\n          \"description\": \"SubjectType is the value requested for responses to this Client. Valid types for Hooklift identity server include only \\\"public\\\".\"\n        },\n        \"id_token_signed_response_alg\": {\n          \"type\": \"string\",\n          \"title\": \"IdTokenSignedResponseAlg is the JWS alg algorithm [JWA] REQUIRED for signing the ID Token issued to this Client. The value none MUST NOT be used as the\\nID Token alg value unless the Client uses only Response Types that return no ID Token from the Authorization Endpoint (such as when only using the Authorization Code Flow)\"\n        },\n        \"id_token_encrypted_response_alg\": {\n          \"type\": \"string\",\n          \"description\": \"IdTokenEncryptedResponseAlg is the JWE alg algorithm [JWA] REQUIRED for encrypting the ID Token issued to this Client. If this is requested, the response will be signed\\nthen encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted, is that no encryption is performed.\"\n        },\n        \"id_token_encrypted_response_enc\": {\n          \"type\": \"string\",\n          \"description\": \"IdTokenEncryptedResponseEnc is the JWE enc algorithm [JWA] REQUIRED for encrypting the ID Token issued to this Client. If id_token_encrypted_response_alg\\nis specified, the default for this value is A128CBC-HS256. When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg MUST also be provided.\"\n        },\n        \"userinfo_signed_response_alg\": {\n          \"type\": \"string\",\n          \"description\": \"UserinfoSignedResponseAlg is the JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed\\nusing JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.\"\n        },\n        \"userinfo_encrypted_response_alg\": {\n          \"type\": \"string\",\n          \"description\": \"UserinfoEncryptedResponseAlg is the JWE [JWE] alg algorithm [JWA] REQUIRED for encrypting UserInfo Responses. If both signing and encryption are requested, the response\\nwill be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted, is that no encryption is performed.\"\n        },\n        \"userinfo_encrypted_response_enc\": {\n          \"type\": \"string\",\n          \"description\": \"UserinfoEncryptedResponseEnc is the JWE enc algorithm [JWA] REQUIRED for encrypting UserInfo Responses. If userinfo_encrypted_response_alg is specified, the\\ndefault for this value is A128CBC-HS256. When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg MUST also be provided.\"\n        },\n        \"request_object_signing_alg\": {\n          \"type\": \"string\",\n          \"description\": \"RequestObjectSigningAlg is the JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client will be rejected,\\nif not signed with this algorithm. Request Objects are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. This algorithm MUST be used both when the Request Object\\nis passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter). The value none MAY be used. The default, if omitted,\\nis that any algorithm supported by the OP and the RP MAY be used.\"\n        },\n        \"request_object_encryption_alg\": {\n          \"type\": \"string\",\n          \"description\": \"RequestObjectEncryptionAlg is the JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request Objects sent to the OP. This parameter SHOULD be\\nincluded when symmetric encryption will be used, since this signals to the Hooklift Identity Provider that a client_secret value needs to be returned from which the symmetric\\nkey will be derived, that might not otherwise be returned. The RP MAY still use other supported encryption algorithms or send unencrypted Request Objects, even when this\\nparameter is present. If both signing and encryption are requested, the Request Object will be signed then encrypted, with the result being a Nested JWT, as defined in [JWT].\\nThe default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\"\n        },\n        \"request_object_encryption_enc\": {\n          \"type\": \"string\",\n          \"description\": \"RequestObjectEncryptionEnc is the JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request Objects sent to the OP. If request_object_encryption_alg\\nis specified, the default for this value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg MUST also be provided.\"\n        },\n        \"token_endpoint_auth_method\": {\n          \"type\": \"string\",\n          \"description\": \"TokenEndpointAuthMethod is the Requested Client Authentication method for the Token Endpoint. The only option supported by Hooklift Identity is client_secret_basic.\\nIf omitted, the default is client_secret_basic -- the HTTP Basic Authentication Scheme specified in Section 2.3.1 of OAuth 2.0 [RFC6749].\"\n        },\n        \"token_endpoint_auth_signing_alg\": {\n          \"type\": \"string\",\n          \"description\": \"TokenEndpointAuthSigningAlg is the JWS [JWS] alg algorithm [JWA] that MUST be used for signing the JWT [JWT] used to authenticate the Client at the Token Endpoint for the\\nprivate_key_jwt and client_secret_jwt authentication methods. All Token Requests using these authentication methods from this Client will be rejected, if the JWT is not\\nsigned with this algorithm. The value none MUST NOT be used. The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.\"\n        },\n        \"default_max_age\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\",\n          \"description\": \"DefaultMaxAge is the Default Maximum Authentication Age. Specifies that the End-User MUST be actively authenticated if the End-User was authenticated longer ago than the\\nspecified number of seconds. If omitted, no default Maximum Authentication Age is specified.\"\n        },\n        \"require_auth_time\": {\n          \"type\": \"boolean\",\n          \"format\": \"boolean\",\n          \"description\": \"RequireAuthTime is a boolean value specifying whether the auth_time Claim in the ID Token is REQUIRED. It is REQUIRED when the value is true. (If this is false, the\\nauth_time Claim can still be dynamically requested as an individual Claim for the ID Token using the claims request parameter described in Section 5.5.1 of\\nOpenID Connect Core 1.0 [OpenID.Core].) If omitted, the default value is false.\"\n        },\n        \"default_acr_values\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"DefaultAcrValues is the Default requested Authentication Context Class Reference values. Array of strings that specifies the default acr values that the OP is being\\nrequested to use for processing requests from this Client, with the values appearing in order of preference. The Authentication Context Class satisfied by the\\nauthentication performed is returned as the acr Claim Value in the issued ID Token. The acr Claim is requested as a Voluntary Claim by this parameter.\\nThe acr_values_supported discovery element contains a list of the supported acr values supported by this server. Values specified in the acr_values\\nrequest parameter or an individual acr Claim request override these default values.\"\n        },\n        \"initiate_login_uri\": {\n          \"type\": \"string\",\n          \"description\": \"InitiateLoginUri is the URI using the https scheme that a third party can use to initiate a login by the RP, as specified in Section 4 of OpenID Connect Core 1.0 [OpenID.Core].\\nThe URI MUST accept requests via both GET and POST. The Client MUST understand the login_hint and iss parameters and SHOULD support the target_link_uri parameter.\"\n        },\n        \"request_uris\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"RequestUris are the list of request_uri values that are pre-registered by the RP for use by Hooklift Identity.\"\n        },\n        \"client_id\": {\n          \"type\": \"string\",\n          \"description\": \"ClientId is the unique identifier generated for the registered application.\"\n        },\n        \"client_secret\": {\n          \"type\": \"string\",\n          \"description\": \"ClientSecret is the password assigned to the registered application.\"\n        },\n        \"registration_access_token\": {\n          \"type\": \"string\",\n          \"description\": \"RegistrationAccessToken is the Access Token that can be used at the Client Configuration Endpoint to perform subsequent operations upon the Client registration.\"\n        },\n        \"registration_client_uri\": {\n          \"type\": \"string\",\n          \"description\": \"RegistrationClientUri is the location of the Client Configuration Endpoint where the Registration Access Token can be used to perform subsequent operations upon the resulting Client registration.\"\n        },\n        \"client_id_issued_at\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\",\n          \"description\": \"ClientIdIssuedAt is the time at which the Client Identifier was issued.\"\n        },\n        \"client_secret_expires_at\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\",\n          \"description\": \"ClientSecretExpiresAt is the time at which the client secret will expire or 0 if it will not expire. Its value is the number of seconds since 1970-01-01T0:0:0Z in UTC.\"\n        },\n        \"error\": {\n          \"type\": \"string\",\n          \"description\": \"Error is the error code returned by Hooklift Identity if there was any error registering the client application.\"\n        },\n        \"error_description\": {\n          \"type\": \"string\",\n          \"description\": \"ErrorDescription is a detailed description explaining why the transaction failed.\"\n        }\n      },\n      \"description\": \"RegisterApp represents the request and response required in order to register OpenIDC client applications.\"\n    },\n    \"apiSignInResponse\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"access_token\": {\n          \"type\": \"string\",\n          \"description\": \"AccessToken contains a JWT token, that is, cryptographically signed Base64-encoded JSON object token.\"\n        },\n        \"refresh_token\": {\n          \"type\": \"string\",\n          \"description\": \"RefreshToken contains a token with no expiration, that allows the client application to get new access tokens with the same granted scope.\"\n        },\n        \"token_type\": {\n          \"type\": \"string\",\n          \"description\": \"TokenType is set to \\\"Bearer\\\" as per the OAuth2 spec.\"\n        },\n        \"expires_in\": {\n          \"type\": \"string\",\n          \"description\": \"ExpiresIn is the time in seconds during which the access token will be valid.\"\n        },\n        \"id_token\": {\n          \"type\": \"string\",\n          \"description\": \"IdToken is a JWT token, that is, cryptographically signed Base64-encoded JSON object token containing user information such as email and name.\"\n        },\n        \"state\": {\n          \"type\": \"string\",\n          \"description\": \"State should be the same random value provided in the original request. It should be verified in order to minimize the risk for CSRF attacks.\"\n        },\n        \"code\": {\n          \"type\": \"string\",\n          \"description\": \"Code is the authorization grant code that could be use to revoke all tokens generated using this grant code.\"\n        }\n      },\n      \"description\": \"SignInResponse contains the generated OAuth2 and OpenID Connect tokens, upon successful sign-in.\"\n    },\n    \"apiSignOutResponse\": {\n      \"type\": \"object\"\n    },\n    \"apiSignUpRequest\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"title\": \"Username\"\n        },\n        \"email\": {\n          \"type\": \"string\",\n          \"title\": \"Email address\"\n        }\n      }\n    },\n    \"apiSignUpResponse\": {\n      \"type\": \"object\"\n    },\n    \"apiTeamsListResponse\": {\n      \"type\": \"object\"\n    },\n    \"apiToken\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"string\",\n          \"description\": \"ID is the token unique identifier.\"\n        },\n        \"issuer\": {\n          \"type\": \"string\",\n          \"description\": \"Issuer is the Open ID Connect provider who issued the token.\"\n        },\n        \"subject\": {\n          \"type\": \"string\",\n          \"description\": \"Subject is the unique identifier for the user within the issuer.\"\n        },\n        \"audience\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"Audience is a list of client unique identifiers for which the token is intended for.\"\n        },\n        \"expiry\": {\n          \"type\": \"string\",\n          \"format\": \"int64\",\n          \"description\": \"Expiry is the expiration time after which the token must not be accepted for processing.\"\n        },\n        \"not_before\": {\n          \"type\": \"string\",\n          \"format\": \"int64\",\n          \"description\": \"NotBefore is the time after which the token can start to be used.\"\n        },\n        \"issued_at\": {\n          \"type\": \"string\",\n          \"format\": \"int64\",\n          \"description\": \"IssuedAt is the time when the token was created.\"\n        },\n        \"scopes\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"boolean\",\n            \"format\": \"boolean\"\n          },\n          \"description\": \"Scopes is a list of permissions allowed for the token by the resource owner.\"\n        }\n      },\n      \"description\": \"Token represents a decoded and verified JWT access token. It is returned by accounts.VerifyToken service\\nwhich is only used by Hooklift properties.\"\n    },\n    \"apiVerifyTokenResponse\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"token\": {\n          \"$ref\": \"#/definitions/apiToken\"\n        }\n      },\n      \"description\": \"VerifyTokenResponse returns a verified access token decoded.\"\n    }\n  },\n  \"securityDefinitions\": {\n    \"bearer\": {\n      \"description\": \"Bearer authorization token\",\n      \"type\": \"oauth2\",\n      \"name\": \"Authorization\",\n      \"in\": \"header\"\n    }\n  },\n  \"security\": [\n    {\n      \"bearer\": []\n    }\n  ]\n}\n``. FWIW, the only instance I found swagger-js setting the Accept header was here: https://github.com/swagger-api/swagger-js/blob/c68c9a44a751b2e327e2c42e3f1b704d234feca0/src/execute.js#L113. FWIW, I worked around this by wrappingSwagger.executeand settingresponseContentTypetoapplication/json`. @shockey, I'm not sure, I believe I'm using the normal constructor. This is what my Nuxt.js plugin looks like right now: \n```javascript\nimport Vue from 'vue';\nimport Swagger from 'swagger-client';\nimport APISpec from 'assets/identity.swagger.json';\nconst APIClient = {\n    install (Vue, options) {\n        let swaggerExecute = Swagger.execute;\n    // We wrap this function as a temporary workaround while SwaggerJS\n    // fixes an issue where the accept header wouldn't be set despite the spec\n    // declaring producing content with a specific mime type.\n    // More info: https://github.com/swagger-api/swagger-js/issues/1116\n    Swagger.execute = function execute ({\n        http: userHttp,\n        fetch, // This is legacy\n        spec,\n        operationId,\n        pathName,\n        method,\n        parameters,\n        securities,\n        ...extras\n    }) {\n        extras.responseContentType = 'application/json';\n        return swaggerExecute.call(this, {\n            http: userHttp,\n            fetch, // This is legacy\n            spec,\n            operationId,\n            pathName,\n            method,\n            parameters,\n            securities,\n            ...extras\n        });\n    };\n\n    Swagger({\n        spec: APISpec,\n        authorizations: {\n            bearer: {\n                token: {\n                    access_token: ''\n                }\n            }\n        }\n    }).then(client => {\n        Vue.prototype.$client = client;\n        Vue.prototype.$api = client.apis;\n    }, error => {\n        console.error('failed to load api spec: %o', error);\n    });\n}\n\n};\nVue.use(APIClient);\n``. @shockey any operation from your API. swagger-client will not set the accept header toapplication/json`.. @shockey, I'm thinking more about this. ~Setting the Accept header when only one mime type is declared in the spec may make sense. However, I'm not too sure about how it should behave when the spec supports multiple mime types. I suppose it should pick the first one it finds as well as allow library users to specify it in Swagger's constructor.~\nI think this could be solved easily by just allowing users to specify their accept header in the constructor, leaving the current default if none is provided: Accept: */*. You got it! Thanks for reviewing and merging! \ud83d\udc4d. ",
    "edrex": "Downstream bug: https://github.com/swagger-api/swagger-ui/issues/1670\n. ",
    "mex": "I'm already using a fork of this project, so I removed the specific check in my version. I was just wondering whether it was worth it to make a PR back to this repo, but I'll hold off. Let me know, if you want to change it at some point and I'll happily contribute.\n. ",
    "jeff9finger": "+1\n. I am having this issue as well, with swagger-ui 3.9.1 which uses swagger-js (swagger-client) 3.4.5.. UI 3.12.0 resolved the issue for me. \ud83d\udc4d . ",
    "dmulter": "Looks like it probably will, thanks for the help!\n. Sorry for the delay in getting around to my implementation, but I think the RequestInterceptor isn't the right way to go for my use case (though it's very cool). The key I need to provide is dynamic and only easy to get to in my Python app, not in my JavaScript. Some way to suppress the progress message URL portion is what I really need.\n. ",
    "oeiriksson": ":+1: \n. ",
    "holophrastic": "Booooo.\nMakes sense, though. Thanks for taking the time to look at it.\n. ",
    "xoss": "Frankly, I wasn't able to get the test scenario running without breaking the production scenario. In that case, I'd choose for the latter to be working.\n. Already part of #850 \n. Well, the problem, it would duplicate the key in the first place.\nSee the serialization of the bodyParam object.\njs\nexpected: lang=deu,eng\nactual:  lang=lang=deu&lang=eng\nand\njs\nexpected: country=DE&country=US\nactual: country=country=DE&country=US\nI know, rough solution, but it does do the trick. Other implementations for cropping the first key in the string returned by encodeQueryCollection are welcomed.\n. ",
    "yuxiaomin": "@fehguy the param is used. In Line 608\nbodyParam.append(key, this.encodeQueryCollection(param.collectionFormat, key, value));\nto get the collectionFormat of param. So it is necessary otherwise param is not correct.\n. ",
    "peol": "Your best bet is probably to use your own HTTP client: https://github.com/swagger-api/swagger-js#using-your-own-http-client\n. ",
    "lame-machine": "@peol, thx that what i was actually done, but library itself use supergent for requests, and it support agent configuration, so following source code can be extended with something like this:\n``` javascript\nif (_.isObject(obj.agent)) {\n    request = request.agent(obj.agent);\n}\nconst r = requestmethod;\n```\n. oh, it looks like agent support was added 8 days ago , issue can be closed\n. Hi @jasisk, i have some problem with your implementation of custom agent. It basically work only for first request to remote petstore. So i have implemented it in slightly different way (passing not agent instance but just options object for supergent), and it start working for me.\nMy question is how do you use your implementation? Because problem might be not in implementation itself, in a way that i am use it.\njs\nreturn new Swagger({\n            url: \"http://petstore.swagger.io/v2/swagger.json\",\n            usePromise: true,\n            connectionAgent: {\n                 rejectUnauthorized: false,\n                 key: \"/certs/example.key\",\n                 cert: \"/certs/example.pem\",\n                 ca: [\"/certs/example.ca.pem\"]\n            }})\n            .then(_client => {\n                //working with client\n            })\n            .catch(error => {\n                const errMsg = `Unable to configure swagger models for ${prefix}. ${error.message}`;\n                logger.error(errMsg);\n            });\nand the output is following:\nsuperagent GET https://localhost:8080/api-docs +0ms\n    superagent GET https://localhost:8080/api-docs -> 200 +3s\n    superagent GET https://localhost:8080/api-docs/one +12ms\n    superagent GET https://localhost:8080/api-docs/two +2ms\n    superagent GET https://localhost:8080/api-docs/three +1ms\n    superagent GET https://localhost:8080/api-docs/one -> 403 +614ms\n    superagent GET https://localhost:8080/api-docs/two -> 403 +11ms\n    superagent GET https://localhost:8080/api-docs/three -> 403 +2ms\n. ",
    "jimhol": "The code has moved on since this was fixed, e.g., no longer uses superagent. I resorted to the following to get it to work with HTTPS with client authentication cert/key. Feels odd to have to add it to each request individually using requestInterceptor. It seems like we should be able to pass the desired agent as an option to the Swagger constructor but I couldn't find a way to do that.\nconst Swagger = require('swagger-client');\nconst https = require('https');\n...\nconst clientAgent = new https.Agent({\n    keepAlive: true,\n    key: clientKey,\n    cert: clientCert\n});\n....\n    return Swagger({\n        spec: JSON.parse(swaggerSpecTxt),\n        requestInterceptor: (req) => {\n            req.agent = clientAgent;\n        }\n    } ).then( client => {\n        logger.debug(\"Got client!\")\n        return client.apis[\"the-tag-i-need\"]\n    });\n...\nDid I miss a better way? Does this issue need to be reopened so that a better way can be provided, or since I found some to be out of date on this, is this method worth adding to the documentation?\n. ",
    "alechirsch": "Sure, do you have an idea for how to do that? I am not familiar with rebasing.\nI found this online, is there an easier way?\n. @webron @fehguy Is this any better? There are no conflicts when I try to merge from swagger-js master.\n. @fehguy @webrown Checking in on the status of this PR. Have you had a chance to look at it?\n. @fehguy It looks like this issue was resolved in #899 . I also had this issue #874, waiting for response. ",
    "cosmopolit": "how?. ",
    "Pchelolo": "@fehguy The fix doesn't actually fix anything. FormData.keys() is supposed to return an iterator, while _.keys returns an array, so the error just moves a little bit further. \n. @fehguy Here's an example: https://en.wikipedia.org/api/rest_v1/#!/Transforms/post_transform_wikitext_to_html_title_revision\nAdd whatever text to the wiki text parameter and hit Try it out in Safari 10 - you'll see the error\n. ",
    "c0d3r85": "Sorry for my inadvertence. Looks like all correct.\n. ",
    "RobertPaasche": "Any progress?. ",
    "psbrandt": "Hi @fehguy, here are the steps to reproduce the issue:\n```\n$ npm install swagger-client\n$ node\n\nvar SwaggerClient = require('swagger-client')\nvar client = new SwaggerClient({ url: 'https://demo.openmrs.org/openmrs/module/webservices/rest/swagger.json', usePromise: true })\n```\n\nI'm using Node v6.3.1. The output I get is:\n```\n\nTypeError: Cannot create property 'vendorExtensions' on string 'basic'\n    at SwaggerClient.buildFromSpec (/Users/pascal/to/node_modules/swagger-client/lib/client.js:309:43)\n    at Resolver.finish (/Users/pascal/to/node_modules/swagger-client/lib/resolver.js:510:14)\n    at /Users/pascal/to/node_modules/swagger-client/lib/resolver.js:329:16\n    at Resolver.resolve (/Users/pascal/to/node_modules/swagger-client/lib/resolver.js:413:6)\n    at Resolver.finish (/Users/pascal/to/node_modules/swagger-client/lib/resolver.js:514:10)\n    at /Users/pascal/to/node_modules/swagger-client/lib/resolver.js:329:16\n    at Resolver.resolve (/Users/pascal/to/node_modules/swagger-client/lib/resolver.js:413:6)\n    at Resolver.finish (/Users/pascal/to/node_modules/swagger-client/lib/resolver.js:514:10)\n    at /Users/pascal/to/node_modules/swagger-client/lib/resolver.js:329:16\n    at Resolver.resolve (/Users/pascal/to/node_modules/swagger-client/lib/resolver.js:413:6)\n```\n\nThis is what our spec object looks like:\njs\n{\n  swagger: \"2.0\",\n  // stuff that probably isn't relevant\n  securityDefinitions: {\n    type: \"basic\",\n    description: \"HTTP basic access authentication using OpenMRS username and password\"\n  },\n  // stuff that probably isn't relevant\n}. Reading the Security Definitions Object spec, it appears our OpenAPI JSON document is not valid, and we actually need something like:\njs\n{\n  swagger: \"2.0\",\n  // stuff that probably isn't relevant\n  securityDefinitions: {\n    basic_auth: {\n      type: \"basic\",\n      description: \"HTTP basic access authentication using OpenMRS username and password\"\n    }\n  },\n  // stuff that probably isn't relevant\n}\nStrangely, this was working before. I'll get work on getting our JSON up to spec.. ",
    "alex-seville": "@fehguy ?\n. Closing as per PR comment.\n. Nevermind, I can pass the file as FormData which seems to work with this conditional.\n. ",
    "richpicking": "Sorry for bothering - found the solution.  I think this has to do with uniqueness in the operationId values in the spec.\n. ",
    "LucasHCruz": "Wrong module\n. ",
    "khieu": "@fehguy yes it fails in an async operation. It basically looks like this: \n```\nnew Swagger(\n  url:'http://example.com/pet',\n  usePromise: true\n)\n.then(function clientHandler(client) {\n   return client.pet.getPets()\n})\n.then(function resultHandler(result) {\n   // do Sth with result.\n})\n```\nIn this case the only way to handle undefined getPets operation is to have an error handling function after resultHandler. Otherwise this chunk of code would fail silently without anything shown on console or network in the developer tools. I wonder if there's anyway to set it up so that it would automatically return a 404 or throw an error (without having to define an errorHandler func) like when an undefined function is called in python or java ?\nThank you so much !\n. ",
    "frol": "This attempt seems to be wrong as the tests explicitly expect that vendorExtensions will be mounted. Thus, I think, the iteration over the list of scopes should be fixed in Swagger UI project.\nI keep this PR open until someone from the maintainers makes a final decision.\n. Just for the record, this PR was merged and 5 hours later, it was reverted in https://github.com/swagger-api/swagger-js/commit/d916f52db709c8a6bfd2557960fd4c7fdcac317a\nAlso, beware that now it not only adds vendorExtensions, but also removes all scopes which happen to start with x- (IMHO, for no good reason at all).. > The patch supplied here didn't make sense.\nI agree and I pointed this out in my second comment here. I didn't expect it would be merged (and I also stated that), so I was just surprised that it was merged to be reverted a few hours later. I wrote the last comment just so people don't get confused.\nThank you for the proper fix!. ",
    "janslow": "Overriding vendorExtensions on the scopes object could also cause issues if an API has a scope called vendorExtension. A safer property name for vendor extensions would be to prefix that name with x- (e.g., x-vendorExtensions) or use a symbol as the property name (which probably isn't ok due to compatibility with old JS engines).\nAnother option, which would solve this bug would be to use Object.defineProperty to make vendorExtensions non-enumerable.\nFinally, is there a reason to aggregate all of the vendor extension properties into a single object, as opposed to just adding each of them to the main object?\n. ",
    "richvdh": "Thanks for the feedback: looks like a dependency of gulp-sourcemaps (strip-bom) is using the arrow notation.\nFor now I've pinned gulp-sourcemaps to 1.x, which claims compatibility with node 0.10. Obviously an alternative would be to bump the version of node requested by travis.yml:  0.10 is pretty old these days [1].\n[1] https://github.com/nodejs/LTS#lts-schedule. ",
    "dr3s": "230 was supposed to fix this but there are so many related issues.  I'm not sure what's up..",
    "emreerguden": "I have found and fixed the problem locally, then sent a pull request. Chromw Swagger UI extension was broken so i hope it will be merged and packed in swagger-js -> swagger ui-> chrome-swagger-ui :). ",
    "DjLeChuck": "This modification introduces a problem. The passwords fields are not only hide on screen but also sent as ** in the AJAX query.\nA swagger file reproducing the issue\nswagger: \"2.0\"\ninfo:\n  title: \"Lorem ipsum.\"\n  version: 1.0.0\nhost: localhost:10010\nbasePath: /\nschemes:\n  - \"http\"\nproduces:\n  - \"application/json\"\npaths:\n  /authenticate:\n    post:\n      operationId: login\n      consumes:\n        - application/x-www-form-urlencoded\n      produces:\n        - text/plain\n      security: []\n      parameters:\n        - name: login\n          in: formData\n          description: Login of the user\n          type: string\n          required: true\n        - name: password\n          in: formData\n          description: Password of the user\n          type: string\n          format: password\n          required: true\n      responses:\n        '200':\n          description: Success\n          schema:\n            type: string. @fehguy yep, it's working now. Thank you for your reactivity!. ",
    "smoebody": "after further investigation i figured out that it was due to a customized http-client i choosed in my angular context. this question helped me fix it.\nif anyone asks, my api-client provider looks like this now:\njavascript\nreturn new SwaggerClient({\n  url: schemaUrl,\n  client: {\n    execute: function(obj) {\n      $http({\n        headers: obj.headers,\n        method: obj.method,\n        body: obj.body,\n        url: obj.url,\n        withCredentials: true,\n        responseType: (obj.headers.Accept && obj.headers.Accept.match(/^image\\//)) ? 'arraybuffer' : null\n      }).then(function(res) {\n        obj.on.response({obj: res.data});\n      }).catch(obj.on.error);\n    }\n  },\n..... I have to say i am not comfortable with that. It is hard to see the relation of an api-endpoint to its client-library shortcut. In swagger-js v2 at least i could name the tags according to its path e.g.:\nGET /api/v1/user -> client.user.get()\nPOST /api/v1/user -> client.user.post()\nGET /api/v1/group -> client.group.get()\nPOST /api/v1/group -> client.group.post()\n\nneedless to say that i have many get and post(and put) methods and it was always possible (and still is in v2) to use the api as desribed above. This makes it easy to find the library-method from the swagger-ui documentation, because there you do not see the operationId.\nNow i am aware of violating the swagger-specs and im willing to correct that, but how do you suggest to name the operationId or is there a best practice of path structuring so that a person who is not involved in one's api-development is able to infer the client-methods of each api-endpoint without debugging the swagger-client? Is there a better way to call an api-endpoint i.e. by specifying the path instead of using the client methods?. ",
    "bowman": "Another instance, that seems inconsistent:\nresponse.obj = (typeof possibleObj === 'object') ? possibleObj : null;\nWouldn't allow an array response?\n. fehguy@, sorry to be slow respond, it's been a hectic few months.\nI'd like you to consider re-opening this issue, I can see my initial rushed post was unclear.\nMy starting point was the swagger spec.  A Response Object contains a Schema Object:\n\nThe Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is based on the JSON Schema Specification Draft 4 and uses a predefined subset of it. On top of this subset, there are extensions provided by this specification to allow for more complete documentation.\nhttp://swagger.io/specification/#schemaObject\n\nThis includes type: string, of course.  The petstore.yaml has an example:\nhttps://github.com/swagger-api/swagger-editor/blob/master/spec-files/petstore_full.yaml#L390-L394\nThe behaviour of the generated node server is to return the JSON quoted string:\n```\n$ curl -sv -X GET --header 'Accept: application/json' \\\n   'http://localhost:8080/v2/users/login?username=u&password=p'   ; echo\n   Trying 127.0.0.1...\n Connected to localhost (127.0.0.1) port 8080 (#0)\n\nGET /v2/users/login?username=u&password=p HTTP/1.1\nHost: localhost:8080\nUser-Agent: curl/7.49.0\nAccept: application/json\n< HTTP/1.1 200 OK\n< Content-Type: application/json\n< Date: Fri, 03 Mar 2017 09:48:13 GMT\n< Connection: keep-alive\n< Content-Length: 7\n< \n* Connection #0 to host localhost left intact\n\"aeiou\"\n```\nSo the \"Hello World\" example contains this\n\nI expected that a Swagger aware client would handle the evaluation of all JSON results,\nincluding primitives.  Indeed swagger-js does, but currently discards primitive results.\nThis means library users have to redo the evaluation and must fill in the gaps client side,\nwhich is unfortunate for a client that could easily be universal and spec driven.\n(Indeed, the benefits of a JS client \"for free\" after using Swagger on the server was\npart of it's appeal).\nWe currently consume an API returning JSON strings (header and quotes) and would like to have\nthis supported upstream, rather than in a private fork if possible.\nIt seems that part of the original objection is that the field is called obj and thus\nreserved for an object, but primitive responses are also allowed and for universality\nought to be supported.  The comment from ponelat@ is \"can evaluate to a string,\nwhich we don't need running around the system\".  That would be reasonable\nfor application code, but for a general-purpose, specification driven client,\nis inappropriately restrictive.  Postel's Law and all...\nPerhaps obj is mis-named, or a second general result field could be included.\nI'm sure there are other options you could suggest.\nThank you,\nBrad\n. ",
    "freshtonic": "@fehguy a naked string (or any other primitive) is still a valid JSON document. Wrapping in an array or object is not mandatory. Please re-open this.. ",
    "dyang-7": "3.x ?. ",
    "zhujingxing": "request origin: \"http://localhost:8081\", origin not be window.location.host, or somewhere not be window.location.host . I had Solve the question. ",
    "jbr": "PR coming up.  I can't find an example in the code of mocking/stubbing global.window.  This potentially means may be other bugs like this.  Would you accept the addition of jsdom?. @fehguy Following up on this: What is the preferred approach to testing code that is conditional on the presence of window.location? Should this be part of the karma-only suite, or should we use something like jsdom in the main suite?. ",
    "Dewb": "I'd like to add that in the above scenario when the swagger definition is loaded via https, and you do  specify scheme in the client opts, the operations will still incorrectly use http rather than https. Cause seems to be that the condition in line 348 needs to have parentheses around the second and third expressions.. Confirmed that https://github.com/Dewb/swagger-js/commit/409c395cc6a5348adaa36a4fb90d2145add7bfea fixes the above issue. I have not tested the OP's scenario.. ",
    "janpapenbrock": "Hm, this appears to not have any effect on display in swagger-ui. I might be missing something.. I think I should have instead modified the viewing logic over in swagger-ui, as the rendering has been copied as part of https://github.com/swagger-api/swagger-ui/issues/1248\nHere https://github.com/swagger-api/swagger-ui/blob/master/src/main/javascript/view/partials/signature.js#L335-L347. Alright, that works, I'll move my code changes over.. Moved the changes over to https://github.com/swagger-api/swagger-ui/pull/2690. Sorry for the disruption here.. ",
    "kuoliangkwong": "seems like it's the speed to load swagger definition. I tried a shorter swagger definition and the performance is ok. I think I'm not able to share the definition as it's confidential. Is there any way we can generate a fake  repeating definition to test?. Yup sure. I tried and it takes about ~1000ms just to load definition.\ntest-swagger-doc.json.zip\n. ",
    "usebaz": "Hey! Something decide on this pull request?. Please include this in next release. \nWhen can I expect the next release? @fehguy . ",
    "strongui": "This needs to be a much higher priority, the size of this library is insanely large for what it provides. . Without this issue resolved, migrating to 3.0 is not an option.. @shockey is there a way to find out what polyfills I'd need? Unfortunately I still have to support IE 10 :(. @shockey haha alright cool :) thanks for the help I'll give it a go!. ",
    "a-ignatov-parc": "There is a way to get rid of js-yaml with webpack and it's alias feature.\nAll you need to do is to mock safeLoad method like this:\njs\n// mock/js-yaml.js\nexport function safeLoad(body) {\n  return JSON.parse(body);\n}\nAnd add alias to webpack's config:\njs\n{\n  alias: {\n    'js-yaml': path.resolve('./mock/js-yaml'),\n  },\n}\nAnd there you go! Bundle size now weighs ~200kb less.\nThe only prerequisite to this workaround is to use only json spec or otherwise you may end up with parsing errors.. ",
    "lyssdod": "Hi,\nWhat backend are you using?. ",
    "kchauhan-muhimbi": "The WCF service is hosted on Azure web app. It is developed using asp.net.. Hi,\nI extracted swagger-client.js file and found that it adds \u201cAccess-Control-Allow-Origin\u201d header to make sure request is accepted by the API server. If you comment that code then request goes through without issues.\nAny reason for adding this header value?. @webron  - I am using v2.1.32.. This is fixed. I did some changes in the API and I am now able to call the API. I have another issue \"#1017\" regarding error while making api request.. ",
    "kevinoid": "Great, thanks @webron!. Will do.  So far this is the only issue I've noticed.\nI actually started writing a test for this one but got bogged down when the test behaved differently than calling the API directly (looks like parameters is moved out of the path object somewhere outside of the buildRequest function used in the tests, but I could be wrong on that).  I'll try to send a test and/or fix with future issues.. Thanks @saharj and @buunguyen!  The fix is working well for me with v3.0.3.. Sure.  Proposed fix in PR #985.. The new serializeRes tests passed in https://travis-ci.org/swagger-api/swagger-js/jobs/216616487  I rebased against the master branch fixes and the tests are passing on my machine.  Should pass after the next Travis run.. https://travis-ci.org/swagger-api/swagger-js/builds/216618260 is complete.  The failure on Node 4.7 is due to use of const in strict mode in src/server.js which is not modified by this PR.. Ah, right you are.  I thought src/server.js was in this package.  Good catch.. Sure thing.  Done.  Let me know if you see anything else.  Thanks!. That took some digging, but I think I've fixed it.  Waiting on the test results to confirm.. My pleasure.  Thank you for reviewing and merging it!. @buunguyen Sounds good for the interceptor.  From the snippet you posted, if serializeRes encounters an Error, it will be returned instead of the server Error.  Is that what you intended?. PR updated to call responseInterceptor for all responses.  Let me know what you think.. Great.  Thanks @buunguyen!. > I've looked into this. You're right, I've completely overlooked the fact that the fetch itself can already fail. I've fixed the issue in my commit d8d0ade plus a test that executes your sample.\nThanks @rg1!\n\nI'm not sure if it should rather be mocked, though.\n\nI usually use nock for mocking HTTP.  It works well once setup, but I think it would take too much effort for this issue alone.  I'd suggest changing 'http://localhost:1/' to 'http://invalid.invalid/' which is guaranteed to be unresolvable by RFC 2606.  (I probably should have used that in the issue description.)\n\nI also don't know if this needs to be a pull request or how to make this issue into one.\n\nWhat I would do is amend commit d8d0ade to make the url change above and add Fixes: #1277 to your commit message then submit a pull request with Fixes: #1277 in the description.  That way other contributors can review it before merging, when the PR is merged it will automatically close this issue, and anyone later reviewing the commit logs (e.g. bug hunting) will find a reference to this issue.\nHowever, it's all about personal preferences and project conventions.  I'm not sure how the Swagger team would prefer to do it.  (I've only submitted an issue/PR or two, so I'm not heavily involved.)  The above is just my general advice.\nThanks again,\nKevin. Thanks @shockey!. v3.8.8 works for me.  Thanks @shockey!. I can confirm the issue is fixed for me.  Thanks @shockey!. ",
    "saharj": "I'm still working on this and trying to solve the issue.\nThe interesting thing I've found is that if you put path-parameters after get like below:\npaths: {\n  '/cars/{carId}': {\n    get: {\n      operationId: 'getCar',\n      parameters: [\n        {\n          name: 'clean',\n          in: 'query',\n          type: 'boolean'\n        }\n      ],\n      responses: {\n        200: {\n          description: 'A car',\n          schema: {\n            type: 'object'\n          }\n        }\n      }\n    },\n    parameters: [\n      {\n        name: 'carId',\n        in: 'path',\n        type: 'number',\n        required: true\n      }\n    ]\n  }\n}\nthe URL will have the {carId} in it, but the query parameter clean won't get included in the URL. . @ponelat . @buunguyen Can you please review the new changes?. Setting this to 'include' works when it's cross-origin and when CORS is allowed. \n. @buunguyen Oddly, when path-parameters come before the operation like below, the method becomes PARAMETERS (here it should be GET), and that causes problems.\npaths: {\n  '/pet/{id}': {\n    parameters: [\n      {...}\n    ],\n    get: {\n      operationId: 'getPetsById',\n      parameters: [\n        {...}\n      ],\n    }\n  }\n}. This line is added intentionally to make the code easier to follow.. ",
    "dave-irvine": "Nevermind, its the tags interface.. ",
    "buunguyen": "@larshp there's a bunch of failed tests, can you check?. I traced the grammar in that spec and encodeURIComponent is indeed too aggressive. However, I couldn't tell for sure if only %#?/ should be escaped. For example, it's not clear to me whether ^, <, > are allowed or not in the path segment. Unless we can come up with an unambiguous blacklist, I would think the aggressive approach is better, especially when it relies on the built-in implementation of the browsers.. I've just discussed with @webron, the spec is not exhaustive in the list of chars that must be escaped in path segments. It's probably better to escape based on a whitelist, which can be concluded from the spec, instead of a blacklist. Alternatively, we might consider encode the fully assembled URL, if there's a method or lib to do that efficiently.\n@carlos-azb any thought?  Would you be willing to go ahead making the change based on these ideas?. @kevinoid thanks for the detailed report. This makes a lot of sense.\nI think we should go with body.buffer() for now then make change when node-fetch 2.0 is released. Would you mind submitting a PR+test for this?. Thank you!. Can you clarify the use case you're looking for?. Is there a specific use case that you want to achieve with SwaggerClient that can only be done via the observable interface? Also, if you have to consume observable, can you simply convert it from a promise? \nThis is unrelated, but unless I misunderstood, the code you show looks a bit complicated. SwaggerClient() returns a promise that resolves to the client object. So you might just do this:\njs\nif (swagger && swagger.template) return Promise.resolve(swagger);\nelse return new SwaggerClient(...). I added baseDoc so that ui doesn't have to change. The TODO will be dealt with when I have a chance to review everything.. Hi, the new tests are failing. Can you check?\nBTW, some old tests fail, not because your code, I've merged the fixes to master already. Be sure to pull from upstream and run test locally.\nThanks!. Interesting, the error is in a lib, fetch-mock...  Wondering why. I'll check locally.\njs\n/home/travis/build/swagger-api/swagger-js/node_modules/fetch-mock/src/server.js:2\nconst fetch = require('node-fetch');. Ha! Local works. Turn out Travis use 0.10 even though the env is set to 4.7. Probably a Travis bug. But your code is good. If you don't mind, please make this minor change:\nReplace\njs\nexport function serializeRes(oriRes, url, {loadSpec = false}) {\nWith\njs\nexport function serializeRes(oriRes, url, {loadSpec = false} = {}) {\nAnd then modify the tests so that it doesn't supply the empty object.\nI'll deal with Travis and merge this PR later. Thanks!\n. Thanks! I've fixed Travis, so the mystic error with fetch-mock has gone away. But your tests are failing in Node 4 (works in Node 6). Can you check?. Good stuff, thank you!. @ponelat @fehguy the skipped tests (interceptors) don't use network, they use xmock. . Can I revert this then? I want to merge a user contributed PR that seems to be conflict with this change. Then @ponelat can issue a new PR that combines this and 988, we can discuss how to make the tests run before merging that new PR.. Close as discussed, this will be combined with other changes in a new PR. BTW, we need fetch-mock, which is used in https://github.com/swagger-api/swagger-js/pull/985.. Yes please.\nnode-fetch is being used by some tests. So if we move to something else, we need to fix those tests. Do you have any proposal for a replacement? IMO, it's not a high priority though. Currently we only run tests on Travis in Node env not browser env.  . @saharj please also resolve merge conflicts.. Close in favor of https://github.com/swagger-api/swagger-js/pull/999, which fixes all the coding issues & bugs.. Pretty outdated. Close for now, please reissue a new PR.. For now there's no easy way to change it. You might need to pass in requestInterceptor fn and modify req.credentials.. @maveron58 can you add tests that would fail without this fix?. Agreed. I'm not sure if it's changed in the spec somewhere but the last time I looked at it, allowEmptyValue doesn't say anything about a header must be set if the value doesn't not present. So I want to know if there's any valid test case that would fail without this fix.. @ponelat @webron fyi. . Is this the list of \"all cache mechanisms we need to support\"? Or are we supposed to pick a single cache strategy that works? \nHow about a 4th option: cache within the same swagger client instance. If users need new cache, they can just create a new instance.. @webron this is P1. I don't know what to do about this. Is there a bug that this would fix?. Fixed https://github.com/swagger-api/swagger-js/pull/1015/files. Please help clarify a bit. You say the generated IDs are ugly, but the example doesn't show any operation ID. So is the problem here is ID is ugly or it doesn't exist?. Oh, I see. Thanks.. Ok. This is new to me. \n\nHow can we check the operationID? Is it a field in the spec?\nCan we have the rules documented here? Instead of me having to dig into 2.x codebase?. Thanks Ron. It's clear.\n\nIn the example by Tony, I suppose it should return get_test? Basically, without the slash?. Related issue https://github.com/swagger-api/swagger-js/issues/1013. Fixed in https://github.com/swagger-api/swagger-js/pull/1015/files. Fixed in https://github.com/swagger-api/swagger-js/pull/1034. @ponelat agreed. @fgnass would you please remove it as well as the associated npm command that use it?. Thank you!. Seems obsolete compared to https://github.com/swagger-api/swagger-js/pull/1034.. Fixed in https://github.com/swagger-api/swagger-js/pull/1015/files. @webron this is technically breaking change of a corner case. Given we just release, should we ignore semver rule?. I'm not a YAML expert, but should the 1.0.0 be in quote?\nAlso, the right way to use the new client is Swagger().then(...), not passing in callback.. Right.\nThis is not valid: require('./test.yaml').  You can't \"require\" YAML in Node.\n. @estermer just want to check if you have a chance to follow up with this.. I think so. #1006 also asks for an enhancement, but as far as being a bug, this should fix that bug.. Only after @shockey release new version of JS and UI. Thanks for this. I think we should pass the response to the interceptor. Also suggest refactor a bit:\njs\nreturn self.serializeRes(res, url, request).then((_res) => {\n   // call interceptor\n   // if !res.ok return error\n   // return _res\n}). @kevinoid you're right, I didn't notice the error handler in !ok case. Keep your current structure then.. LGTM. Thank you!. Looks like reverting the PR by @stefangr means a correctly implemented OAuth server will fail, which isn't ideal. I think the top priority is ensuring correct implementations to work. Then it's nice to support other implementations that don't 100% comply to the specs. Would be great if it just works without any work from the library users, but if we have to introduce an option, that's definitely something to consider.. LGTM. @bodnia what do you think?. Hi, thanks for the PR. I want to make sure I understand the motivation of the lib change. Did you mean the old lib doesn't support React Native? Or what is the issue?. Test fail.. @ponelat can you resolve the conflicts?. I don't understand this bug. What is the current output vs expected output?. Can you add a failed test case?. In browser, can't you just override windows.fetch before this script is loaded?. Can you override window.fetch or global.fetch instead?. Again, going back to what your use cases are, which you still haven't clarified.. I'm okay with the change. But consider:\n Rename userFetch to something like httpAgent?\n Need to document this API\n@shockey what you think?. @webron Should this be done here for every request? Or should client code explicitly pass in this option when invoking http?. Please add indent to this and the next line. Please remove empty space inside {}. . What is this check for? Would be great to add a comment clarifying the intention.. @fehguy agreed, shouldn't be punished and this is okay to go here.. @larshp can you move this line before the requestInterceptor runs? Also, would be great if you add a quick test.. I see. The loop iterates the keys of each path, so \"parameters\" will appear. Doesn't matter if it appears before or after the \"get\".. It might be easier to write test if you add this to execute#buildRequest. Then you can test buildRequest.. It worked before.. @ponelat which code, Josh?. Please put else in a new line, to be consistent with current code.. We need a whitespace space after for.. Sorry I missed this. But we do need space after for, if etc.. @ponelat why do you remove this and the following test?. @ponelat That's okay. I can move this to http.. We need the default val in case user doesn't pass in an object for the 3rd arg, which would cause an destructuring error.. Why Promise.resolve() is necessary here? Doesn't http() always return a promise or is there any case it returns value directly?. Would be great if this is clearer, overriding what with spies? What spies? Why returning res.body || res instead of res.body would achieve that?. It seems like something like this could be done inside mapSpec. That ways we don't have to leak docCache to JS.. Yes, we should avoid global. The docCache here is created inside resolve() method, I suggest we move that inside mapSpec(). Basically just encapsulate the cache creation inside SpecMap, resolve() doesn't have to know about the cache at all. Therefore, there's no performance difference whatsoever.. Should use single quote for consistency.. var -> let. @ponelat it's already addressed here https://github.com/swagger-api/swagger-js/pull/990/files#diff-42a353e98c906af524c7d3d48feaf72aR359. Please rename to inheritName.\nAlso, we use single quotes.. Please change to a more descriptive name than item.. This looks wrong because exists is never reset. So after the first exists = true, all subsequent params will be be pushed to operation..  Too verbose. Consider:\nexists = operation[inheritName].some((param) => param.name === inherit[inheritName][item].name). inherits[inhName] is an array. Should use for... of. Following code would also be shorter as no need to deref into array index.. Confirmed: above code logic is incorrect. This test will fail:\n```\n        const spec = {spec: {\n          paths: {\n            '/two': {\n              parameters: [\n                {name: 'a', in: 'path'},\n                {name: 'b', in: 'path'}\n              ],\n              get: {\n                parameters: [\n                  {name: 'a', in: 'query'},\n                  {name: 'c', in: 'query'}\n                ]\n              }\n            }\n          }\n        }}\n    const resultSpec = normalizeSwagger(spec)\n\n    expect(resultSpec).toEqual({spec: {\n      paths: {\n        '/two': {\n          parameters: [\n            {name: 'a', in: 'path'},\n            {name: 'b', in: 'path'}\n          ],\n          get: {\n            parameters: [\n              {name: 'a', in: 'query'},\n              {name: 'b', in: 'path'}, // <---  'b' isn't pushed because `exists` isn't reset\n              {name: 'c', in: 'query'}\n            ]\n          }\n        }\n      }\n    }})\n\n``. If theifabove is dead code, should it be removed?  And if it's removed, what value doesvalue` have before this line?\nAlso, paramater can't be null, can it? If yes, no need to check for parameter.\nShould rewrite this thing to be consistent with the stuff below.\nif (condition) {\n  value = ...\n}. I don't understand what \"pass through\" here means. And what value does this test add compared to existing one such as \"should build a request for all given field\"?. @webron this is about how the spec works. I'm not sure if what is proposed is valid. Please check.. See https://github.com/swagger-api/swagger-js/issues/1006.\n\nAlso, if an api endpoint only has one parameter, what do you think about allowing you to call the operation with the interface operation(value) instead of operation({param_name: value})? If an operation only has one parameter, you could check if the argument passed to the operation is an object with a property matching the parameter name (existing behavior) and if not then just use the passed in argument as the value for the parameter (after validating the type). Are there problems with that approach or does that make it too complicated?\n\nMaybe @fehguy can chime in.. I think only check if (idWithoutWhitespace) is enough.. Should just return operationId && operationId === id here.. It took me a bit to decipher the logic. Maybe clearer if refactor:\njs\nconst originalCounterValue = (operationIdCounter[id] || 1)\ntagObj[`${id}${originalCounterValue}`] = tagObj[id]\ntagObj[`${id}${originalCounterValue + 1}`] = cbResult\ndelete tagObj[id]\noperationIdCounter[id] = originalCounterValue + 1\nQuestion. Say there are 3 'abc'. The 2nd 'abc', this logic will run, both will get renamed to 'abc1' and 'abc2'. The last 'abc', it will still be 'abc', as opposed to 'abc3'. Is this expected?. Single quote please. Also, what's the intention here? To check if filename is really a file? If so, we should probably use Node API to check.. I remember seeing pathMethodFromId being used in SwaggerUI. So this change might need to be coordinated with UI as well.. I meant when there are 3 \"getOne\". The 3rd one should be \"getOne3\" right? . Why is this needed?. The Node version of FormData doesn't expose standard methods like get, keys... Easiest way to test is monkey patching append... Not great, but quick and simple.. ",
    "larshp": "Created https://github.com/swagger-api/swagger-js/issues/981\nextra unit tests was added in https://github.com/swagger-api/swagger-js/commit/ba1ae5a4294dfd286aa1ad2532679f6337b4412c which was not part of this PR. moved\nhowever I am not sure how to trigger the correct example in a unit test, hmm. moved to execute.js, and unit tests adjusted. ",
    "jasongonzales23": "Hi, I got here from the FAQs, and it looks like you've changed how authorizations worked. If that is correct, perhaps we should document this. Happy to help, BTW, but perhaps someone with more experience with the project can do it better than I.. ",
    "komasoftware": "I have a Swagger 2.0 spec with following security definition \nsecurityDefinitions:\n    jwt:\n        type: apiKey\n        name: Authorization\n        in: header\nBut I have a hard time getting the swagger-js 3.0 client to pass the credentials. \nThis is what I am doing \n```\n            let authorizations = {\n                jwt: { token: { access_token: \"jwtvalue goes here\" } }\n            };\n            return new SwaggerClient({\n                url: 'specURL goes here',\n                authorizations: authorizations\n            })\n                .then(client => {\n               .....\n```\nCan I even use the swagger-js 3.0 client against a swagger 2.0 spec ?\nThe only documentation I could find was in the migration doc ... . ",
    "vukee": "Same issue here. I can add whatever I want into 'authorizations', nothing is passed with the request.\nIs there somewhere a full documentation for swagger-js? Or some examples how to use authorizations? Would be really helpful. . ",
    "devth": "It's still not clear to me how to add per-request operations. All the examples in the index-authorizations tests seem to be global to the client. . I spent hours trying to get authorizations to work until I found this issue! Thanks @eropple. . This is breaking me too. Kind of a nasty bug since it only shows up in production. . Possible to fix for the next release?. Answering my own question:\nUse requestInterceptor and responseInterceptor to log the request and response:\njavascript\n    requestInterceptor: function (req) {\n        console.log(req);\n        return req;\n    },\n    responseInterceptor: function (res){\n       // ...\n    }. ",
    "malinthaprasan": "@fehguy Thank you for the response. That would suit my requirement! . Quick question, we need to always configure the swagger client whenever we need a responseInterceptor right? There isn't a way we can configure a global response/requestInterceptor which would be hit by any SwaggerClient object we create without configuring each one? \nP.S. I am referring to this example: https://github.com/swagger-api/swagger-js/blob/v2.1.32/test/client.js#L456-L474. ",
    "vincent-cm": "@buunguyen The plugin instance now can be initiated by Promise\njs\n  return new Promise<any>(resolve => {\n      if (swagger != null && swagger.template != null) {\n        resolve(swagger);\n      } else {\n        swagger = new SwaggerClient({\n          url: URL,\n          enableCookies: true,\n          success: function (data: any) {\n            swagger = this;\n            resolve(this);\n          }\n        });\n      }//else\n    });\nCan this be supported by Observable formate?\nhttp://reactivex.io/rxjs/class/es6/Observable.js~Observable.html. @buunguyen Yes, some cases like only Observables can achieve, please see https://blog.thoughtram.io/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html. ",
    "FallenRiteMonk": "I havent exactly looked at your use cas but you can create a obsevable from a promise using rxjs fromPromis funktion:\nhttps://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/frompromise.md. ",
    "srihakum": "I am using 3.0.3 version. Spec is available here https://staging.cloud-elements.com/elements/api-v2/elements/44/docs. After deeper understanding it seems that there is no mention of schemes in the spec, so it looks to default to http. However the server was responding with 301 where the URL was retained as per location header and method was defaulted to GET. This redirection causes POST to be converted to GET.. @webron Thanks for acknowledging the issue. Any timelines on when we can expect this to be available. We are currently blocked to use this in our code because of this issue. Any help here is much appreciated. . @webron I just tried today with 3.0.0.7 but it this issue is not fixed.. @webron Yes I intend to upload a file as per the API. In my case I will have to support 2 scenarios:\n1. When input file is available on a cloud storage(like dropbox)\n2. Input file is locally available\nHow can we use swagger-js to solve these cases?. @webron Is this possible with swagger-js or does it need a new feature request. If it is possible can you share some details.. @shockey Thank you for the response, yes we are using swagger-js in node on the server side.. @shockey We are using 2.1.32 version. It would be helpful if you could share some detail on how to do this with node on server side.. @shockey Can you please share details on how to do it with Node.js on server side.. ",
    "piohei": "I've added two tests. Without this fix both test cases are failing (generated request has api_key parameter set to 'udefined').\nI 've also changed headerBuilder to yours request (removed empty string sending).. ",
    "dwilson6": "I've run into this as well. Is someone already working on this? If not, I can take a crack at it. I've already implemented part of it in my own requestInterceptor function.  \nAlso related, I've noticed that if I have a POST endpoint with a json parameter in the body and I call that operation with the tags interface like client.apis.default.operation({param_name: {}}) (I explicitly set the Content-Type header to application/json), I get an error unexpected token o in JSON at position 1... \nTo get it to work, I have to serialize the value of the param explicitly client.apis.default.operation({param_name: JSON.stringify({})}).  \nWould it be reasonable to automatically stringify if the content type is application/json and it has an \"in: body\" parameter and the value is an object? I can create a separate issue for this if you'd like.. I was going to look at this today but it looks like @bodnia has it almost done. Yes, I am. The content-type issue is documented in #995\nThe object serialization issue is captured by #1006. The if statement above was dead code because of this line. This change allows you to use the parameters object as the value of a body parameter (parameters = {mydata: ''}) instead of having to have parameters be: {body_param_name: {mydata: ''}}. The if statement above is not dead code anymore.  I can refactor it a bit to make it more readable.  Parameter could technically be null since it is just iterating through an array though there is code above this line that would throw an error if parameter is null.  Also, that code checking parameter was there before my change so I assumed there is a reason it is there.  I can remove it since it seems pointless. Yeah, that is a little confusing.  I mean that the whole parameters object will be used as the parameter value instead of parameters[parameter.name]. I'll clarify the wording.  To your second question, the difference in this test is the parameters object in the buildRequest call below.  \nIn the other tests it is:\nparameters: {\n          ...,\n          body: {\n        name: 'johny',\n        id: '123'\n      },\n        }\nin this test it is:\nparameters: {\n        name: 'johny',\n        id: '123'\n      }\nThis allows you to call operations like client.apis.default.operation({name: 'johny', id: '123'}) if there is a body parameter.. @fehguy @webron anything new on this? The code for this feature was already there but was broken. ",
    "Robbilie": "just installed swagger-client and realized its been updated to 3.0 aswell breaking my shit because i abused the clientAuthorizations of a previous version to add a user-agent which is not possible anymore so is there a way to set this header on the client somehow (no, setting it on each operation (which is supported by the swagger spec i use) is not an option for me)\nalso, if the server checks the origin it does not apply only to requests made from the browser @webron \n. so there is no way to set a header on client creation\u2026?. @webron its not an auth header i want to set nor is it an authorization, i want to set a UA header, (X-User-Agent) which is a field i can set per request (https://esi.tech.ccp.is/latest/#/) but i dont want to pass that field on each operation so i did this in the past:\nclient.clientAuthorizations.add(\"ua\", new SwaggerClient.ApiKeyAuthorization(\"X-User-Agent\", \"https://utils.space/\", \"header\"));. oh god this is becoming the worst nightmare of my life, this new version breaks about everything. thats about the most useless answer ever, swagger-client v3 is what you get if you install it via npm, swagger-ui is marked latest and then shit like this here happens and this isnt even the best, check this out:\nhttps://github.com/swagger-api/swagger-js/issues/998. so what do you want me to do?. i understand the concept of a major version update, i also would think that if something like the issue described in the other ticket exists the version would be in an alpha or beta state, rc if you want, but far from stable if something basic like post requests are not working, just my 2 cts.\natm i do not have the time to create a pr so i hope that adding to the issue someone else also has and creating a ticket for another, major issue is enough for the moment.. moving on:\nhttps://github.com/swagger-api/swagger-js/blob/master/README.md\nsearch the readme for \"addPet\", copy & paste code and try to run it with:\nhttp://petstore.swagger.io/v2/swagger.json\nresult:\nRequired parameter body is not provided\nputting the body like it would be correct into an object with key body and value the value, as an object it returns:\n415 (Unsupported Media Type)\ncause no content-type nor body is sent. looked at it for 2 seconds and remembered: i tried \"serializing\" useing JSON.stringify but the result was that it was posted with content-type text and not json so it broke\nEDIT: how does he explicitly set the content-type header\u2026?. maybe one could add to the doc that these have to be put in the client constructor\u2026. no data being posted vs data being posted?\nif i add a request interceptor for an swagger spec that has in:body name:body the req.body is a stringified version of the JSON thats supposed to be posted (which is correct)\nin a spec like the one up there, the req.body is a JS object which cant be posted and therefore the request is done with no body\u2026. new (require(\"swagger-client\"))('https://esi.tech.ccp.is/_latest/swagger.json').then(client => client.apis.Universe.post_universe_names({ ids: [1] }));. Any news on this front? :). https://github.com/swagger-api/swagger-js/pull/1098\nincludes the userFetch\nregarding the regex changes, a friend tried a bit and got these results so i wont PR my changes for now, maybe ill change to the const version:\n```\nfunction shouldDownloadAsTextOrig(contentType) {\n  return /json/.test(contentType) ||\n        /xml/.test(contentType) ||\n        /yaml/.test(contentType) ||\n        /text/.test(contentType)\n}\n/\nOrig|json x 11,477,916 ops/sec \u00b10.75% (91 runs sampled)\nOrig|xml x 7,497,474 ops/sec \u00b10.52% (97 runs sampled)\nOrig|yaml x 5,051,156 ops/sec \u00b10.68% (94 runs sampled)\nOrig|text x 4,224,534 ops/sec \u00b10.39% (96 runs sampled)\n/\nfunction shouldDownloadAsTextOne(contentType = \"\") {\n  return [\"json\", \"xml\", \"yaml\", \"text\"].some(str => contentType.includes(str))\n}\n/\nOne|json x 6,393,355 ops/sec \u00b10.62% (94 runs sampled)\nOne|xml x 4,242,619 ops/sec \u00b10.89% (94 runs sampled)\nOne|yaml x 2,880,927 ops/sec \u00b10.35% (95 runs sampled)\nOne|text x 2,286,908 ops/sec \u00b10.61% (93 runs sampled)\n/\nfunction shouldDownloadAsTextTwo(contentType = \"\") {\n    return /json|xml|yaml|text/.test(contentType)\n}\n/\nTwo|json x 19,513,133 ops/sec \u00b10.29% (92 runs sampled)\nTwo|xml x 24,767,680 ops/sec \u00b10.70% (93 runs sampled)\nTwo|yaml x 24,596,672 ops/sec \u00b10.31% (94 runs sampled)\nTwo|text x 24,863,942 ops/sec \u00b10.68% (88 runs sampled)\n/\nconst shouldDownloadAsTextThree = (contentType = \"\") => /json|xml|yaml|text/.test(contentType)\n/\nthree|json x 20,038,598 ops/sec \u00b10.31% (93 runs sampled)\nthree|xml x 24,801,552 ops/sec \u00b10.68% (92 runs sampled)\nthree|yaml x 25,187,765 ops/sec \u00b10.47% (94 runs sampled)\nthree|text x 25,252,579 ops/sec \u00b10.67% (96 runs sampled)\n/\n```. Have you tried creating an authorizations object, storing it and passing it to the initialization and modifying the field in the object when needed? Not the nicest way but at least try it as temp workaround :). @shockey would be awesome if you could review this one since a friend and i are waiting for this feature :P . fetch cant be passed in toplevel as far as ive seen and replacing http requires one to implement:\n- requestInterceptor\n- responseInterceptor\n- form formatting\n- and so on\u2026\nwhich is not what i want, i just want to replace the \"agent\". why would anyone do that? this would force every other code running on the same website / in the same node app to use that other fetch method aswell which is not desired.. damnit i missed the response, prolly left the tab open.\nbut the response to your question lies within\nhttps://github.com/swagger-api/swagger-js/pull/1098#issuecomment-313815863\ncurrently you can only replace the whole http handler which means if i want to just replace the fetch method i have to implement all the logic again like said in the comment.\nif i want to use another agent, not isomorphic-fetch, maybe a h2 client or some other lib that handles a huge load of requests better, uses a proxy or what not, this feature would be of great help.. i would advise against httpAgent because httpAgents do have their own predefined set of internal api methods, if you want to go this way, sure, would just overcomplicate things here imo and wouldnt be quite feasible\ndocumenting this api is something to be done for sure (writing down the existence of this additional param and describing the args and such). any news @shockey ?. no idea how the test should look like for something so simple like this ^^. if the response passed to the serializeRes method is a pure object (no Headers class used), currently the headers are completely ignored since the object already has the correct shape, just no forEach method\nat least thats my use case :D . i still think that returning wrong data is worse then possibly browser dependant data but your call\u2026. https://esi.tech.ccp.is/_latest/swagger.json\nswagger.apis.Wars.get_wars({ \"If-None-Match\": 'the etag including the quotation marks goes here' })\nlatest version. another issue is that the 304 response has no content-type\u2026. ",
    "mattgen88": "Well this certainly blew up unexpectedly.\nMy servers 403 non-whitelisted domains making requests (strict enforcement of CORS Access-Control-Allow-Origin). Thankfully, I'm in full control of what is enforcing this and I wrote into my middleware the ability to ignore private and loopback IPv4 blocks. Otherwise, I didn't have a good idea on how to fix this using the swagger library. Just something to think about, it may be a good idea to allow for some arbitrary headers to be added to requests to an API. \nKeep up the good work guys, regardless. . ",
    "camsjams": "Is 3.x stable? These issues create unexpected behavior and reduce the usefulness of this wrapper.. ",
    "fgnass": "Since the installation of node-inspector might fail in unsupported environments, removing it altogether is probably even a better option.. Done.. ",
    "airmanx86": "It's swagger-client 3.0.5.\nThe issue here is that the for in loop is not following the order of the keys on the object. So when we're lucky it will match and work, but if we're not lucky and when it won't match the above code will crash.. ",
    "tkrugg": "very likely that you are using 3.x doc with 2.x version.. ",
    "kwv": "I'm running into the same issue.  Given the spec consumes application/json I would expect an empty post to honor that. \nWhen calling using v3 of swagger-js \nclient.apis.user.remoteConnectUserDeviceBySerial( { 'serial': '1234'] })\nit maps the request to:\n/user/devices/{serial}/remoteConnect\nand fails:\n```\nresponse:\n   { ok: false,\n     url: 'http://localhost:7100/api/v1/user/devices/1234/remoteConnect',\n     status: 400,\n     statusText: 'Bad Request',\n     headers:\n      { 'x-powered-by': 'Express',\n        'content-type': 'application/json',\n        date: 'Wed, 10 May 2017 15:34:17 GMT',\n        connection: 'close',\n        'content-length': '184' },\n     text: '{\"message\":\"Validation errors\",\"errors\":[{\"code\":\"INVALID_CONTENT_TYPE\",\"message\":\"Invalid Content-Type (application/octet-stream).  These are supported: application/json\",\"path\":[]}]}',\n     data: '{\"message\":\"Validation errors\",\"errors\":[{\"code\":\"INVALID_CONTENT_TYPE\",\"message\":\"Invalid Content-Type (application/octet-stream).  These are supported: application/json\",\"path\":[]}]}',\n     body: { message: 'Validation errors', errors: [Object] },\n     obj: { message: 'Validation errors', errors: [Object] } } }\n``\nI presume that the change is near [this line](https://github.com/swagger-api/swagger-js/blob/master/src/execute.js#L132).  If there is no(req.body || req.form)shouldn't content type still align with whatspec.consumes` ?\nI haven't figured out how to override the content-type on a request.\n. \nDigging into this more, the server response is expected given the 3.0.9 implementation.  Per     S.O. on RFC-7231 when there is no content-type provided\napplication/octet-stream may be inferred.  \nThat swagger-js serializes the POST data as a URL parameter is an implementation detail.\nSwagger-js end users can't specify that data should be passed a body parameter.  Nor can they explicitly set content-type.  That is the convenience of a HTTP framework like Swagger, it merely accepts the request data and handles the details in accordance to the spec. \nThe consumes attribute of the spec explicitly sets a global default.  Per http://swagger.io/specification/ \n\nA list of MIME types the APIs can consume. This is global to all APIs but can be overridden on specific API calls.) \n\nI wouldn't disagree that the specific operation should have a more precise consumes statement.  However if a global content-type is specified, swagger-js should use that by default.   \nFrom the example code here, 2.x of swagger-js behaved differently.\n. ",
    "marjan-georgiev": "I'm not sure if I'm doing anything wrong, but since I upgraded to version 3 all of my POST requests default to content-type:text/plain;charset=UTF-8, instead of application/json. The ability to override content-type would be very useful in this case.. This feature is the only thing preventing us from using this library in our application. It would be great if it got merged in.. ",
    "priyankabishnoi": "Version 2.0\nOn Mon, Apr 24, 2017 at 1:08 PM, Ron notifications@github.com wrote:\n\nwhich version of swager-js do you use?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/swagger-api/swagger-js/issues/1028#issuecomment-296748786,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Aaqq_HD9rTuPcLCLFNRAkz1R4f3XMdFhks5rzNckgaJpZM4NGP21\n.\n\n\n-- \nThanks and Regards\nPriyanka Bishnoi\n. ",
    "chamilaadhi": "I' using it inside the browser. Thanks for the reply btw. ",
    "gaurav517": "I see same error in version 3.13.6.\n - OS: macOS\n - Browser: chrome\n - Version: 66.0.3359.181\n - Swagger-UI version: 3.13.6\n - Swagger/OpenAPI version: Swagger 2.0\nIn case of big nested request/response json spec, I get following in console after trying to expand the operation in swagger-ui and the section of operation shows endless spinner. After refreshing we see the operation details.\nsystem.js:461 RangeError: Maximum call stack size exceeded\n    at immutable.js:2405\n    at Le.pe.withMutations (immutable.js:1353)\n    at He (immutable.js:2405)\n    at Le.set (immutable.js:2096)\n    at nt (immutable.js:2780)\n    at Ze.set (immutable.js:2686)\n    at immutable.js:2651\n    at immutable.js:3016\n    at immutable.js:2699\n    at Le.__iterate (immutable.js:2206). created followup issue https://github.com/swagger-api/swagger-ui/issues/4637. ",
    "jpoutrin": "Hi @boyandimitrov,\nI ran into the same issue:\n\nThe authorizations relate to the security element in the swagger.json\nThe error management in the swagger-client is poor which means it's hard to troubleshoot\n\nensure for each of your web method to have a security element such as:\n\"/users/{user_id}\": {\n            \"get\": {\n                \"operationId\": \"get_user\",\n                \"parameters\": [\n                    {\n                        \"description\": \"An optional fields mask\",\n                        \"format\": \"mask\",\n                        \"in\": \"header\",\n                        \"name\": \"X-Fields\",\n                        \"type\": \"string\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/User\"\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Validation Error\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"Bearer\": [\n                            {\n                                \"in\": \"header\",\n                                \"name\": \"Authorization\",\n                                \"template\": \"Bearer {apiKey}\",\n                                \"type\": \"apiKey\"\n                            }\n                        ]\n                    }\n                ],\n                \"tags\": [\n                    \"users\"\n                ]\n            },\n. @buunguyen yes the current does not support react native \nthe solution was inspired by https://github.com/agraboso/redux-api-middleware/pull/120\nthe current implementation does not initialize some global variables properly.\n. @buunguyen please do not merge the change.\nThe issue  seems deeper than that.\nI messes up the final react-native bundle for some reason.\nit seems to be a webpack bundling issue. (one might not exclude the other).\nI am no expert in webpack so this should be put on hold or discarded...\nsymptoms in my app when debugging:\nFailed to print error:  regeneratorRuntime.async is not a function\nsymptoms without:\nclient.apis is empty\nif someone has an idea would appreciate.\nsorry for that.\n. I opened an issue for this:\nhttps://github.com/swagger-api/swagger-js/issues/1047. @ponelat it might be one of the issue indeed. but didn't make it work at the end.\nI moved back to v2 and also discover that the http connector had to be re-implemented as the XMLHttpRequest seem to behave in a different way.\neverything was working except POST messages...\nv2 is easier as plain javascript which makes it easier to debug ;)\nsee the gist. ",
    "boyandimitrov": "Ok let's deep in my swagger than\nsecurityDefinitions:\n authorization:\n  type: apiKey\n  name: authorization\n  in: header\n..............................\nNow I have private methods that does require security. For example:\n/login/user_info:\n    x-swagger-router-controller: authentication\n    post:\n      tags:\n        - private\n      security:\n        - authorization: []\n      operationId: get_user_info\n.............................\nSo these methods work. \nThe problem is that I have another type of methods that are public:\n/login:\n    x-swagger-router-controller: authentication\n    post:\n      tags:\n        - public\n      operationId: login\nNow these methods produce an error, when I construct Swagger client in the way I pasted above.. ",
    "mat250": "Thanks @c4milo , I'll check that :). ",
    "RomanGotsiy": "@buunguyen do you have any plans on when the new package is released?\nThanks. ",
    "Bombenleger": "I think we should revert this change because this could break other implementations and it's not the way any other OAuth clients work (e. g. see http://sgeb.io/posts/2015/05/fix-go-oauth2-case-sensitive-bearer-auth-headers/).\n@stefangr's token endpoint does not provide the correct token_type starting with a capital 'B'.\nE. g. IBM discovered the same as an issue on their side some time ago: http://www-01.ibm.com/support/docview.wss?uid=swg1PI11907. Great, thanks @bodnia!. @stefangr\nI agree there is some confusion about whether using the token_type as it is for the Authorization header or always force it to Bearer.\nBoth RFCs RFC6749 and RFC6750) are not fully clear about this.\nThere are a lot of implementations in the world, all handling this differently. So I suggest make this behavior configurable.. ",
    "stefangr": "@Bombenleger\nSo because another client implementation (the go-oauth2 package) is broken and needs a workaround to fix it, the swagger client must be broken again?\nThat seems very illogical to me.\nThe fact that IBM supplies a fix on the server side means there are more client implementations broken.\nMy point is, there are server implementations that return 'bearer' with no capital (which is allowed by the RFC) and expect 'Bearer' with a capital (as the other RFC highly recommends). My PR fixed that problem.\n@bodnia I recommend re-aplying my fix to have the client follow the RFCs. ",
    "kanjiroushi": "Just a comment for people stuck with this issue, you can write a middleware to transform the bearer to capital B so it can go through oauth-server authorisation\n//transform the bearer token to bearer\n//https://github.com/swagger-api/swagger-js/issues/1040\napp.use(function (req, res, next) {\n    var matches = req.headers[\"authorization\"].match(/bearer\\s(\\S+)/);\n    if(matches) {\n      console.log('modifying authorization header to capital B');\n      req.headers[\"authorization\"]='Bearer '+matches[1];\n    }\n    next();\n});. ",
    "beschoenen": "Any update on this? It's still broken for me.. ",
    "Mechazawa": "The token_type should be capitalized. Even if it is not received in such a way.\njs\ntokenType\n    .toLowerCase()\n    .replace(/(\\s|^)\\w/g, x => x.toUpperCase());. ",
    "matthewadams": "@webron, Is there a workaround for being able to use swagger-js with a service that requires separate, manual download of its spec?\nI was looking into it, and from a naive understanding of the code & dependencies, I'd have to fork & enhance node-fetch to support file:// urls, then fork & enhance isomorphic-fetch to use the forked node-fetch, then fork swagger-js to use the enhanced isomorphic-fetch.  I could try some proxyquire trickery, but it all seems like a lot of work for little gain if there's another way to work around this.. Yes\nOn Fri, Jun 9, 2017 at 6:49 PM shockey notifications@github.com wrote:\n\n@matthewadams https://github.com/matthewadams, by this:\nIs there a workaround for being able to use swagger-js with a service that\nrequires separate, manual download of its spec\ndo you mean that you already have your spec downloaded, and want to\nprovide it directly to the library?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/swagger-api/swagger-js/issues/1044#issuecomment-307525908,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAbdoEf1HAl6jLK5az2KMo7qaSUnqeJdks5sCdnxgaJpZM4NSNCK\n.\n. @boblauer I agree. Oooh I'll have to give that a try!\n\nOn Tue, Jun 27, 2017 at 3:51 PM Troy Cosentino notifications@github.com\nwrote:\n\n@boblauer https://github.com/boblauer @matthewadams\nhttps://github.com/matthewadams you can do this (found here\nhttps://github.com/swagger-api/swagger-ui/issues/1110\nimport SpecFile from '../spec.json';\nSwagger({ spec: SpecFile }).then((client) => {\n  console.log(client);\n});\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/swagger-api/swagger-js/issues/1044#issuecomment-311481686,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAbdoCpijlJ_rGnkg3JjmXHL-XmjLaocks5sIWtcgaJpZM4NSNCK\n.\n. @tcosentino: Just getting back to this.  Your comment (https://github.com/swagger-api/swagger-js/issues/1044#issuecomment-311481686) worked out nicely, and motivated me to add #1292.  Thanks!. Reproducible test case can be found at https://github.com/matthewadams/swagger-js/blob/1288/test/client.js#L216. \n",
    "boblauer": "A simpler alternative might be to allow a resolved spec to be passed into the client.  For example:\njs\nconst spec = require('./swagger-spec.json');\nSwagger(spec).then(client => ...);\nIt seems silly to try to make a request of any sort to read a local file.. ",
    "tcosentino": "@boblauer @matthewadams you can do this (found here)\nimport Swagger from 'swagger-client';\nimport SpecFile from '../spec.json';\nSwagger({ spec: SpecFile }).then((client) => {\n  console.log(client);\n});\n. @c4milo Just the way they've set up the constructor. I assume with the spec option it isn't doing anything async, but the pattern remains the same. There may be a way to do it without, i.e. the constructor may return the client? Just haven't tried that. ",
    "bcomnes": "Its unfortunate the io for fetching the spec has been so tightly coupled to the constructor of the resulting client.  Seems like that complicates the default path (how is this fetch going to work?), and gets in the way (purposeless async) if you have the spec already.  . I was under the impression that the async step came from the fetching of a remote spec resource.  The processing of the spec is also chunked across even loop turns? (e.g. using the Swagger({ spec: SpecText }).then() initialization is spread across multiple ticks?).\nThe use case I'm looking for here is creating a js client for an open API endpoint, similar to what the Java based code generator creates, but avoiding having to muck around with a java dependency.  Perhaps there is a more direct path to that?  Basically looking to create something simple that can be required/Imported without having to force async initialization by default.. ",
    "hareeqi": "this worked for me but it's not official nor elegant \nhttps://gist.github.com/hareeqi/c9496288cfccf52342930874ac9670d3. ",
    "zhimoda": "This is actually very important for many scenarios, simplest being one spec and executing against test systems. How to achieve the same without the ability to switch? I can only think of multiple specs, one for each target system. In case only the host differs this does not make much sense. Hence, this feature should be considered important.. ",
    "alkrauss48": "Wanted to comment here with a semi-workaround. For me, I wanted to showcase a production URL in the docs, but have the \"Try it out\" button fire requests to a staging URL instead. I'm sure I'm not alone in this desire.\nWhat I did was just set the host in my Swagger conf file to my staging URL so that the \"Try it out\" button would use that, but I just changed the .base-url DOM element to my production URL using the very-browser-supported document#querySelector method on page load. That element is the main place where the user sees the base URL:\ndocument.querySelector('.base-url').textContent = '[ Base url: api.prod.com/ ]';. ",
    "xeranas": "Please consider include ability to override basePath as well.. Here API swagger.json:\nJSON\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"title\": \"Notes Services\",\n    \"version\": \"1\",\n  },\n  \"basePath\": \"/api/notes/v1\",\n  \"tags\": [\n    {\n      \"name\": \"notes\"\n    }\n  ],\n  \"schemes\": [\n    \"http\",\n    \"https\"\n  ],\n  \"paths\": {\n    \"/mynotes\": {\n      \"get\": {\n        \"tags\": [\n          \"notes\"\n        ],\n        \"summary\": \"Gets my notes\",\n        \"description\": \"\",\n        \"operationId\": \"retrieveMyNotes\",\n        \"consumes\": [\n          \"application/json\"\n        ],\n        \"produces\": [\n          \"application/json\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"priority\",\n            \"in\": \"query\",\n            \"description\": \"Priority\",\n            \"required\": false,\n            \"type\": \"integer\",\n            \"x-example\": \"1\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/definitions/NoteDto\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"NoteDto\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"priority\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"text\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}. The problem is that context path 'my-app' is part of server container configuration which I cannot control  (not part of application code). Another thing we also generate static html documentation based on same swagger.json files and context path 'my-app' in front of base path would be incorrect from clients standpoint.\nThe closest pending feature I found which could help in current situation is #1045. However I'm not sure if http://localhost:8080/my-app swagger would interpret it as valid host for try-it functionality it I would override it at runtime.. > If you don't change it, it will break the UI, will break code generation, and pretty much make your API definition invalid.\nThe only thing which does not work is 'try-it' due execution URL. Generation works fine I don't need put context path into generated docs as it does not make sense, clients on other end will have other context path anyway.\nI just want clarify that context path is not part of REST specification its just application entry point.\nIn my situation url structure is: http://host:port/context/services/.\nhttp://host:port/context - is application entry point\nhttp://host:port/context/services/ - REST services entry point where basePath would be services\nSeems swagger assumes that application entry always is http://host:port which is not always the case.. Thanks for clarifying. ",
    "melanke": "+1. ",
    "joeherwig": "+1. ",
    "AdrieanKhisbe": "My team and I are very interested on this feature, and I consider to volonteer to implement it.\nWould it be possible to have some guidance? @shockey @webron :)\n(gitter session for instance). @cancan101,\nSorry we went an other way at my company, so I shifted subject and did not took care of it. :/\nSo no updates on my side. ",
    "dark-reiser": "I need this feature too. ",
    "zhoumeina": "I need this feature too. . ",
    "adamski": "I just hit this issue trying to upgrade a react-native module to v3, manifesting as a \"self is not defined\" error which seems to come from the fetch library. . ",
    "piranna": "Any update on this? What's the current solution, or what we should be doing?. I haven't used the library yet, but was heavily interested on. I was just asking to know if it would work or should I use fetch instead.. ",
    "WhoseSomebody": "Currently faced the same trouble.\nEventually client object has empty apis parameter. \nAfter debugging this error was found (in isomorphic-fetch lib):\n\n(as @adamski noticed)\nSo now I am stuck at this point. \nI would be happy to understand the workaround of @jpoutrin, but I don't exactly understand how it works.\nI use \"swagger-client\": \"^3.0.20\".\nSo, I now don't know what to do. Using fetch with swagger server interface doesn't look so sweet :'(\nP.S. I am wondered but I cannot find any information about using RN and Swagger client. So, either everything works great everywhere, either no one use it. No glue.\nUPD.\nOkay, I realized how it works. Thank you very much, @adamski.\nI switched to \"swagger-client\": \"^2.1.32\".\nThen using reactNativeHttpClient by @adamski (from here) my Swagger calls look like:\nreturn new SwaggerClient({\n    url: swaggerUrl,\n    usePromise: true,\n    client: reactNativeHttpClient,\n  }).then(client => {\n    return client.apis.account\n      .doesEmailExist({ email })\n      .then(res => {\n        return res.obj.success\n      })\n  })\nSo thank you, @adamski!\nAnyway, it doesn't work with 3.x :(. ",
    "jtn-d": "I have version 3.3.4 and facing this. \n```\nSwagger('http://petstore.swagger.io/v2/swagger.json')\n  .then(client => {\n    console.log(client.errors)\n  })\n[ { [TypeError: undefined is not a function (evaluating '$.default.apply(e, [t])')]\n```\nAm I missing something?. ",
    "Hugome": "This is possible but you cannot revert mock, because _isomorphicFetch2.default remember the global.fetch at loading time, and in tests you can need to do :\n- Mock fetch\n- Test\n- \"Unmock\" fetch\n- Test\n- Test\n- Test\n- Mock fetch\n- Test\n- \"Unmock\" fetch\n(And if you use es6 import, you cannot replace the function before import). This is recommended by the maintainer of isomorphic-fetch, this provide a polyfill for es6 promises.\nBut i dont think it is really really important, because many browser have implemented the ES6 Promises\n- https://kangax.github.io/compat-table/es6/#test-Promise\n- https://caniuse.com/#feat=promises\nSo i remove the import and dependency :). ",
    "SimCordy": "Hi,\nWhen I execute the command, NODE_ENV=production webpack -p --config ./webpack.config.js it return me the error :\n\"NODE_ENV\" is not recognized as an internal or external command, operable command or batch file.. Thank you, unfortunately it don't work, now the problem seems to be webpack, when I execute SET NODE_ENV=production & webpack -p --config ./webpack.config.js it return me:\n\"webpack\" is not recognized as an internal or external command, operable command or batch file\nI run the command npm install webpack but it still don't work.\n. Thank you vey much!!!!!\nIt works and the dist folder with the index.js file has appeared! Thank you!. ",
    "etki": "Having the same issue (with pseudo-circular reference as well). I have Region that may have itself in parents (renders as null, and that's okay with me), but when another entity is present (SubwayStation that also lists regions in parents), error strikes in; whenever i drop parents property from any of them, error goes. Sadly couldn't reproduce in a minimal example.. ",
    "san4io": "Same for me then upgraded to 3.6.0.\nDowngraded to : \n        \"swagger-api/swagger-ui\": \"3.5.0\"\nAnd everything works fine.. Sorry, was on vacation, today I'll provide you with json.. {\"swagger\":\"2.0\",\"info\":{\"title\":\"Accommobay API\",\"version\":\"1.0.0\"},\"basePath\":\"\\/v1\\/\",\"consumes\":[\"application\\/json\"],\"produces\":[\"application\\/json\"],\"paths\":{\"\\/auth\\/password\\/forgot\":{\"post\":{\"tags\":[\"1. Auth API\"],\"summary\":\"Forgotten User password\",\"description\":\"Send email to user with reset link\",\"operationId\":\"forgotten_password\",\"consumes\":[\"multipart\\/form-data\"],\"produces\":[\"application\\/json\"],\"parameters\":[{\"name\":\"email\",\"in\":\"formData\",\"description\":\"User email\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"200\":{\"description\":\"Successful Operation\"},\"422\":{\"description\":\"Wrong Email address\"}}}},\"\\/auth\\/authenticate\":{\"post\":{\"tags\":[\"1. Auth API\"],\"summary\":\"Authenticate User\",\"description\":\"Authenticate user\",\"operationId\":\"authenticate\",\"consumes\":[\"multipart\\/form-data\"],\"produces\":[\"application\\/json\"],\"parameters\":[{\"name\":\"email\",\"in\":\"formData\",\"description\":\"User email\",\"required\":true,\"type\":\"string\"},{\"name\":\"password\",\"in\":\"formData\",\"description\":\"User password\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"200\":{\"description\":\"Successful Operation\"}}}},\"\\/auth\\/me\":{\"get\":{\"tags\":[\"1. Auth API\"],\"summary\":\"Get current user info\",\"description\":\"Returns user info by authorization header\",\"operationId\":\"user_me\",\"produces\":[\"application\\/json\"],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#\\/definitions\\/User\"}}},\"security\":[{\"bearer_token\":[]}]}},\"\\/auth\\/token\\/refresh\":{\"post\":{\"tags\":[\"1. Auth API\"],\"summary\":\"Refresh User Token\",\"description\":\"Refresh user token\",\"operationId\":\"user_refresh\",\"consumes\":[\"multipart\\/form-data\"],\"produces\":[\"application\\/json\"],\"parameters\":[{\"name\":\"token\",\"in\":\"formData\",\"description\":\"User refresh token\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"200\":{\"description\":\"Successful Operation\"}}}},\"\\/auth\\/register\":{\"post\":{\"tags\":[\"1. Auth API\"],\"summary\":\"Register User\",\"description\":\"Register user\",\"operationId\":\"register\",\"consumes\":[\"multipart\\/form-data\"],\"produces\":[\"application\\/json\"],\"parameters\":[{\"name\":\"name\",\"in\":\"formData\",\"description\":\"User name\",\"required\":true,\"type\":\"string\"},{\"name\":\"surname\",\"in\":\"formData\",\"description\":\"User surname\",\"required\":true,\"type\":\"string\"},{\"name\":\"email\",\"in\":\"formData\",\"description\":\"User email\",\"required\":true,\"type\":\"string\"},{\"name\":\"password\",\"in\":\"formData\",\"description\":\"User password\",\"required\":true,\"type\":\"string\"},{\"name\":\"password_confirmation\",\"in\":\"formData\",\"description\":\"User password confirmation\",\"required\":true,\"type\":\"string\"},{\"name\":\"phone\",\"in\":\"formData\",\"description\":\"User phone\",\"required\":false,\"type\":\"string\"},{\"name\":\"country_id\",\"in\":\"formData\",\"description\":\"User country id\",\"required\":false,\"type\":\"string\"}],\"responses\":{\"200\":{\"description\":\"Successful Operation\"}}}},\"\\/auth\\/password\\/reset\":{\"post\":{\"tags\":[\"1. Auth API\"],\"summary\":\"Reset User password\",\"description\":\"Resets user password\",\"operationId\":\"reset_password\",\"consumes\":[\"multipart\\/form-data\"],\"produces\":[\"application\\/json\"],\"parameters\":[{\"name\":\"email\",\"in\":\"formData\",\"description\":\"User email\",\"required\":true,\"type\":\"string\"},{\"name\":\"password\",\"in\":\"formData\",\"description\":\"User password\",\"required\":true,\"type\":\"string\"},{\"name\":\"password_confirmation\",\"in\":\"formData\",\"description\":\"User password confirmation\",\"required\":true,\"type\":\"string\"},{\"name\":\"token\",\"in\":\"formData\",\"description\":\"Reset password token\",\"required\":true,\"type\":\"string\"}],\"responses\":{\"200\":{\"description\":\"Successful Operation\"},\"401\":{\"description\":\"Unauthorized\"}}}},\"\\/claims\":{\"get\":{\"tags\":[\"3. Claim API\"],\"summary\":\"Get Claim List\",\"description\":\"Retrieve own claims\",\"operationId\":\"claims\",\"produces\":[\"claim\\/json\"],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#\\/definitions\\/OwnPaginatedClaim\"}}},\"security\":[{\"bearer_token\":[]}]},\"post\":{\"tags\":[\"3. Claim API\"],\"summary\":\"Create new Claim object\",\"description\":\"Creates and returns Claim\",\"operationId\":\"claim_create\",\"produces\":[\"claim\\/json\"],\"parameters\":[{\"name\":\"body\",\"in\":\"body\",\"description\":\"Claim object\",\"required\":true,\"schema\":{\"$ref\":\"#\\/definitions\\/Claim\"}}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#\\/definitions\\/Claim\"}}},\"security\":[{\"bearer_token\":[]}]}},\"\\/claims\\/{claim-id}\":{\"get\":{\"tags\":[\"3. Claim API\"],\"summary\":\"Get Claim by it's ID\",\"description\":\"Returns Claim and related info\",\"operationId\":\"claim_get\",\"produces\":[\"claim\\/json\"],\"parameters\":[{\"name\":\"claim-id\",\"in\":\"path\",\"description\":\"ID of claim\",\"required\":true,\"type\":\"string\",\"format\":\"string\"}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#\\/definitions\\/OwnClaimList\"}}},\"security\":[{\"bearer_token\":[]}]},\"put\":{\"tags\":[\"3. Claim API\"],\"summary\":\"Update an existing Claim\",\"description\":\"Update Claim\",\"operationId\":\"claim_update\",\"parameters\":[{\"name\":\"claim-id\",\"in\":\"path\",\"description\":\"ID of Claim\",\"required\":true,\"type\":\"string\",\"format\":\"string\"},{\"name\":\"body\",\"in\":\"body\",\"description\":\"Place object that needs to be updated\",\"required\":true,\"schema\":{\"$ref\":\"#\\/definitions\\/Claim\"}}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#\\/definitions\\/Claim\"}}},\"security\":[{\"bearer_token\":[]}]},\"delete\":{\"tags\":[\"3. Claim API\"],\"summary\":\"Remove Claim\",\"description\":\"Removes Claim, only owner of Claim can remove it.\",\"operationId\":\"claim_destroy\",\"produces\":[\"claim\\/json\"],\"parameters\":[{\"name\":\"claim-id\",\"in\":\"path\",\"description\":\"Claim id to delete\",\"required\":true,\"type\":\"string\",\"format\":\"string\"}],\"responses\":{\"200\":{\"description\":\"Removed successfully\"}},\"security\":[{\"bearer_token\":[]}]}},\"\\/claims\\/confirm\\/{claim-id}\":{\"post\":{\"tags\":[\"3. Claim API\"],\"summary\":\"Confirm claim\",\"description\":\"Confirms Claim\",\"operationId\":\"claim_confirm\",\"produces\":[\"claim\\/json\"],\"parameters\":[{\"name\":\"claim-id\",\"in\":\"path\",\"description\":\"ID of Claim\",\"required\":true,\"type\":\"string\",\"format\":\"string\"}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#\\/definitions\\/Claim\"}}},\"security\":[{\"bearer_token\":[]}]}},\"\\/oauth\\/personal-access-tokens\":{\"get\":{\"tags\":[\"5. OAuth API\"],\"summary\":\"Get Personal Tokens\",\"description\":\"Retrieve personal tokens\",\"operationId\":\"tokens_get\",\"produces\":[\"application\\/json\"],\"responses\":{\"200\":{\"description\":\"List retrieved successfully\"}},\"security\":[{\"bearer_token\":[]}]},\"post\":{\"tags\":[\"5. OAuth API\"],\"summary\":\"Get Personal Tokens\",\"description\":\"Retrieve personal tokens\",\"operationId\":\"tokens_get\",\"produces\":[\"application\\/json\"],\"parameters\":[{\"name\":\"body\",\"in\":\"body\",\"description\":\"Claim object\",\"required\":true,\"schema\":{\"$ref\":\"#\\/definitions\\/Token\"}}],\"responses\":{\"200\":{\"description\":\"Token created successfully\"}},\"security\":[{\"bearer_token\":[]}]}},\"\\/oauth\\/personal-access-tokens\\/{token-id}\":{\"delete\":{\"tags\":[\"5. OAuth API\"],\"summary\":\"Remove Personal Token\",\"description\":\"Remove personal tokens\",\"operationId\":\"tokens_delete\",\"produces\":[\"application\\/json\"],\"parameters\":[{\"name\":\"token-id\",\"in\":\"path\",\"description\":\"Token id to delete\",\"required\":true,\"type\":\"string\",\"format\":\"string\"}],\"responses\":{\"200\":{\"description\":\"Removed successfully\"}},\"security\":[{\"bearer_token\":[]}]}},\"\\/places\":{\"get\":{\"tags\":[\"2. Place API\"],\"summary\":\"Get Own Place List\",\"description\":\"Retrieve own places\",\"operationId\":\"places_own\",\"produces\":[\"application\\/json\"],\"parameters\":[{\"name\":\"query\",\"in\":\"query\",\"description\":\"Searchable string\",\"required\":false,\"type\":\"string\"}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#\\/definitions\\/PaginatedPlace\"}}},\"security\":[{\"bearer_token\":[]}]},\"post\":{\"tags\":[\"2. Place API\"],\"summary\":\"Create new Place object\",\"description\":\"Creates and returns Place\",\"operationId\":\"place_create\",\"produces\":[\"application\\/json\"],\"parameters\":[{\"name\":\"body\",\"in\":\"body\",\"description\":\"Offer object\",\"required\":true,\"schema\":{\"$ref\":\"#\\/definitions\\/Place\"}}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#\\/definitions\\/Place\"}}},\"security\":[{\"bearer_token\":[]}]}},\"\\/places\\/{place-id}\":{\"get\":{\"tags\":[\"2. Place API\"],\"summary\":\"Get Place by it's ID\",\"description\":\"Returns Place and related info\",\"operationId\":\"place_get\",\"produces\":[\"application\\/json\"],\"parameters\":[{\"name\":\"place-id\",\"in\":\"path\",\"description\":\"ID of place\",\"required\":true,\"type\":\"string\",\"format\":\"string\"}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#\\/definitions\\/Place\"}}}},\"put\":{\"tags\":[\"2. Place API\"],\"summary\":\"Update an existing Place\",\"description\":\"Update Place\",\"operationId\":\"place_update\",\"parameters\":[{\"name\":\"place-id\",\"in\":\"path\",\"description\":\"ID of Place\",\"required\":true,\"type\":\"string\",\"format\":\"string\"},{\"name\":\"body\",\"in\":\"body\",\"description\":\"Place object that needs to be updated\",\"required\":true,\"schema\":{\"$ref\":\"#\\/definitions\\/Place\"}}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#\\/definitions\\/Place\"}}},\"security\":[{\"bearer_token\":[]}]},\"delete\":{\"tags\":[\"2. Place API\"],\"summary\":\"Remove Place\",\"description\":\"Removes Place, only owner of tender can remove it.\",\"operationId\":\"place_destroy\",\"produces\":[\"application\\/json\"],\"parameters\":[{\"name\":\"place-id\",\"in\":\"path\",\"description\":\"Place id to delete\",\"required\":true,\"type\":\"string\",\"format\":\"string\"}],\"responses\":{\"200\":{\"description\":\"Removed successfully\"}},\"security\":[{\"bearer_token\":[]}]}},\"\\/places\\/search\":{\"post\":{\"tags\":[\"2. Place API\"],\"summary\":\"Get Place List\",\"description\":\"Retrieve all places\",\"operationId\":\"places\",\"produces\":[\"application\\/json\"],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"$ref\":\"#\\/definitions\\/PaginatedPlace\"}}}}},\"\\/utils\\/address\":{\"get\":{\"tags\":[\"4. Utils API\"],\"summary\":\"Get Address suggestions\",\"description\":\"Get Address suggestions\",\"operationId\":\"address\",\"produces\":[\"application\\/json\"],\"parameters\":[{\"name\":\"q\",\"in\":\"query\",\"description\":\"Search query\",\"required\":true,\"type\":\"string\"},{\"name\":\"limit\",\"in\":\"query\",\"description\":\"Limit\",\"type\":\"integer\"},{\"name\":\"country_code\",\"in\":\"query\",\"description\":\"Country code\",\"type\":\"string\"}],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#\\/definitions\\/GeoBag\"}}}}}},\"\\/utils\\/countries\":{\"get\":{\"tags\":[\"4. Utils API\"],\"summary\":\"Get Countries List\",\"description\":\"Retrieve all countries\",\"operationId\":\"types\",\"produces\":[\"application\\/json\"],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#\\/definitions\\/Country\"}}}}}},\"\\/utils\\/types\":{\"get\":{\"tags\":[\"4. Utils API\"],\"summary\":\"Get Types List\",\"description\":\"Retrieve all types\",\"operationId\":\"types\",\"produces\":[\"application\\/json\"],\"responses\":{\"200\":{\"description\":\"successful operation\",\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#\\/definitions\\/Type\"}}}}}}},\"definitions\":{\"Answer\":{\"properties\":{\"answer\":{\"description\":\"Place name\",\"type\":\"string\",\"format\":\"string\",\"example\":\"Not smoking\"},\"question_id\":{\"description\":\"Question id\",\"type\":\"integer\",\"format\":\"number\",\"example\":4}}},\"Claim\":{\"properties\":{\"id\":{\"description\":\"Place id\",\"type\":\"integer\",\"format\":\"integer\",\"example\":1},\"place_id\":{\"description\":\"Place id\",\"type\":\"integer\",\"format\":\"integer\",\"example\":1},\"user_id\":{\"description\":\"Place id\",\"type\":\"integer\",\"format\":\"integer\",\"example\":1},\"created_at\":{\"description\":\"Place creation date\",\"type\":\"string\",\"format\":\"string\",\"example\":\"2017-09-16 21:51:59\"},\"updated_at\":{\"description\":\"Place was updated\",\"type\":\"string\",\"format\":\"string\",\"example\":\"2017-09-16 21:51:59\"},\"answers\":{\"type\":\"array\",\"items\":{\"$ref\":\"#\\/definitions\\/Answer\"}}}},\"OwnClaimList\":{\"properties\":{\"place\":{\"$ref\":\"#\\/definitions\\/Place\"}},\"type\":\"object\",\"allOf\":[{\"$ref\":\"#\\/definitions\\/Claim\"}]},\"ClaimList\":{\"properties\":{\"user\":{\"$ref\":\"#\\/definitions\\/User\"}},\"type\":\"object\",\"allOf\":[{\"$ref\":\"#\\/definitions\\/OwnClaimList\"}]},\"OwnPaginatedClaim\":{\"properties\":{\"data\":{\"type\":\"array\",\"items\":{\"$ref\":\"#\\/definitions\\/OwnClaimList\"}},\"path\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/application\"},\"first_page_url\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/application?page=1\"},\"last_page_url\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/application?page=10\"},\"next_page_url\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/application?page=3\"},\"prev_page_url\":{\"type\":\"number\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/application?page=1\"}},\"type\":\"object\",\"allOf\":[{\"$ref\":\"#\\/definitions\\/pagination\"}]},\"Country\":{\"properties\":{\"id\":{\"description\":\"Country id\",\"type\":\"integer\",\"format\":\"integer\",\"example\":1},\"code\":{\"description\":\"Country code\",\"type\":\"string\",\"format\":\"string\",\"example\":\"LV\"},\"name\":{\"description\":\"Country name\",\"type\":\"string\",\"format\":\"string\",\"example\":\"Latvia (Latvija)\"},\"common\":{\"description\":\"Country common name\",\"type\":\"string\",\"format\":\"string\",\"example\":\"Latvia\"},\"currency\":{\"description\":\"Country currency\",\"type\":\"string\",\"format\":\"string\",\"example\":\"EUR\"},\"call_code\":{\"description\":\"Country call code\",\"type\":\"string\",\"format\":\"string\",\"example\":\"+371\"}}},\"Place\":{\"properties\":{\"id\":{\"description\":\"Place id\",\"type\":\"integer\",\"format\":\"integer\",\"example\":1},\"title\":{\"description\":\"Place name\",\"type\":\"string\",\"format\":\"string\",\"example\":\"Best room in the world\"},\"address\":{\"description\":\"Place address\",\"type\":\"string\",\"format\":\"string\",\"example\":\"Fabijoni\\u0161ki\\u0173 g. 15, Vilnius\"},\"description\":{\"description\":\"Place email\",\"type\":\"string\",\"format\":\"string\",\"example\":\"Best room in the world description\"},\"price\":{\"description\":\"Place price\",\"type\":\"string\",\"format\":\"string\",\"example\":25.95},\"area\":{\"description\":\"Place area in m^2\",\"type\":\"string\",\"format\":\"string\",\"example\":25.24},\"rooms\":{\"description\":\"Place rooms\",\"type\":\"string\",\"format\":\"string\",\"example\":2},\"bathrooms\":{\"description\":\"Place rooms\",\"type\":\"string\",\"format\":\"string\",\"example\":1},\"floor\":{\"description\":\"Place floors\",\"type\":\"string\",\"format\":\"string\",\"example\":3},\"floor_count\":{\"description\":\"Building floors\",\"type\":\"string\",\"format\":\"string\",\"example\":8},\"year\":{\"description\":\"Place year of build\",\"type\":\"string\",\"format\":\"string\",\"example\":2016},\"action\":{\"description\":\"Place for rent or sell\",\"type\":\"string\",\"format\":\"string\",\"example\":1},\"type_id\":{\"description\":\"Place type\",\"type\":\"string\",\"format\":\"string\",\"example\":2},\"country_id\":{\"description\":\"Place country\",\"type\":\"string\",\"format\":\"string\",\"example\":101},\"location\":{\"$ref\":\"#\\/definitions\\/location\"},\"created_at\":{\"description\":\"Place creation date\",\"type\":\"string\",\"format\":\"string\",\"example\":\"2017-09-16 21:51:59\"},\"updated_at\":{\"description\":\"Place was updated\",\"type\":\"string\",\"format\":\"string\",\"example\":\"2017-09-16 21:51:59\"}}},\"PaginatedPlace\":{\"properties\":{\"data\":{\"type\":\"array\",\"items\":{\"$ref\":\"#\\/definitions\\/Place\"}},\"path\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/place\"},\"first_page_url\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/place?page=1\"},\"last_page_url\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/place?page=10\"},\"next_page_url\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/place?page=3\"},\"prev_page_url\":{\"type\":\"number\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/place?page=1\"}},\"type\":\"object\",\"allOf\":[{\"$ref\":\"#\\/definitions\\/pagination\"}]},\"Type\":{\"properties\":{\"id\":{\"description\":\"Type id\",\"type\":\"integer\",\"format\":\"integer\",\"example\":1},\"name\":{\"description\":\"Type name\",\"type\":\"string\",\"format\":\"string\",\"example\":\"room_rent\"}}},\"User\":{\"properties\":{\"id\":{\"description\":\"User id\",\"type\":\"integer\",\"format\":\"integer\",\"example\":1},\"name\":{\"description\":\"User name\",\"type\":\"string\",\"format\":\"string\",\"example\":\"Zbignev\"},\"surname\":{\"description\":\"User surname\",\"type\":\"string\",\"format\":\"string\",\"example\":\"Balcevi\\u010d\"},\"email\":{\"description\":\"User email\",\"type\":\"string\",\"format\":\"string\",\"example\":\"zbignev@mail.pl\"},\"country_id\":{\"description\":\"User email\",\"type\":\"string\",\"format\":\"string\",\"example\":96},\"phone\":{\"description\":\"User phone\",\"type\":\"string\",\"format\":\"string\",\"example\":\"+37060674779\"},\"created_at\":{\"description\":\"User creation date\",\"type\":\"string\",\"format\":\"string\",\"example\":\"2017-09-16 21:51:59\"},\"updated_at\":{\"description\":\"User updated at\",\"type\":\"string\",\"format\":\"string\",\"example\":\"2017-09-16 21:51:59\"}}},\"GeoBag\":{\"properties\":{\"formatted\":{\"description\":\"Fabijoni\\u0161ki\\u0173 g., Fabijoni\\u0161ki\\u0173 seni\\u016bnija, Vilnius, Vilnius city municipality, Vilnius County, 06328, Lithuania\",\"type\":\"string\",\"format\":\"string\",\"example\":\"\"},\"coordinates\":{\"description\":\"Location of the value. Latitude, Longitude\",\"type\":\"number\",\"format\":\"double\",\"maxItems\":2,\"minItems\":2,\"example\":[48.870465,2.351447]}}},\"pagination\":{\"properties\":{\"current_page\":{\"type\":\"number\",\"format\":\"integer\",\"example\":2},\"from\":{\"type\":\"number\",\"format\":\"integer\",\"example\":16},\"last_page\":{\"type\":\"number\",\"format\":\"integer\",\"example\":10},\"per_page\":{\"type\":\"number\",\"format\":\"integer\",\"example\":15},\"to\":{\"type\":\"number\",\"format\":\"integer\",\"example\":30},\"total\":{\"type\":\"number\",\"format\":\"integer\",\"example\":150},\"path\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/entity\"},\"first_page_url\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/entity?page=1\"},\"last_page_url\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/entity?page=10\"},\"next_page_url\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/entity?page=3\"},\"prev_page_url\":{\"type\":\"number\",\"format\":\"string\",\"example\":\"http:\\/\\/localhost\\/api\\/v1\\/entity?page=1\"}},\"type\":\"object\"},\"location\":{\"properties\":{\"type\":{\"description\":\"GeoJson point\",\"type\":\"string\",\"format\":\"string\",\"example\":\"Point\"},\"coordinates\":{\"description\":\"Location of the value. Latitude, Longitude\",\"type\":\"number\",\"format\":\"double\",\"maxItems\":2,\"minItems\":2,\"example\":[48.870465,2.351447]}}},\"Token\":{\"properties\":{\"name\":{\"type\":\"string\",\"format\":\"string\",\"example\":\"My Token\"},\"scopes\":{\"type\":\"array\",\"format\":\"array\",\"items\":{}}}}},\"externalDocs\":{\"description\":\"GeoJson Objects\",\"url\":\"http:\\/\\/geojson.org\\/\"},\"securityDefinitions\":{\"bearer_token\":{\"type\":\"apiKey\",\"description\":\"OAuth 2.0 Laravel Passport authorization\",\"name\":\"Authorization\",\"in\":\"header\"}}}. ",
    "rusinv": "Having similar issue (as I suppose): \"Cannot read property '/route' of undefined\":\n```\nopenapi: 3.0.0\ninfo: \n  version: '0.1'\n  title: 'test'\npaths:\n/route:\n    get:\n      responses:\n        '200':\n          description: Descr\n          content:\n            'application/json':\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/SuccessfulResponseContainer'\n                properties:\n                  payload:\n                    $ref: '#/components/schemas/PayloadContents'\ncomponents:\n  schemas:\n    ResponseContainer:\n      type: object\n      properties:\n        type:\n          type: integer\n        payload:\n          type: object\nSuccessfulResponseContainer:\n  allOf:\n    - $ref: '#/components/schemas/ResponseContainer'\n  properties:\n    type:\n      type: integer\n\nPayload:\n  type: object\n  properties:\n    prop1:\n      type: string\n\nPayloadContents:\n  type: object\n  allOf:\n    - $ref: '#/components/schemas/Payload'\n  properties:\n    prop2:\n      type: string\n\n```\nError disappears if I reduce depth of inheritance:\n...\n    PayloadContents:\n      type: object\n      #allOf:\n       # - $ref: '#/components/schemas/Payload'\n      properties:\n        prop2:\n          type: string\n.... ",
    "erajkovic": "I am still having the issue with the latest swagger ui - we are on 3.9.1 now (see https://apicatalog.oraclecloud.com/ui/views/swaggerui3/oracle-public/compute/default/SecIPLists) , and I tested internally with 3.10.0. @shockey will try and report back - was having similar issue with named properties, so will see if they are all gone with latest.\nThe other error message was: Cannot read property 'userEvent' of undefined, which seams to match the forward reference case.\n. Is it OK to have a new side effect - now the URL contains a query parameter : http://localhost:9080/ui/views/swaggerui3/oracle-public/compute/default/RebootInstanceRequests?urls.primaryName=RebootInstanceRequests \nI guess this would be a separate issue / maybe this is something we have to handle on our side with a wrappedAction.\nSo, in short +1 - UI 3.12.0 resolved the issue for me too.. ",
    "Le-Zhang": "How this issue resolved? It doesn't work when I try to change basePath. Take the example from above, simply modify basePath from /api/notes/v1 to my-app/api/notes/v1 is not working. Because after that modification, the correct API changes to http://host:port/my-app/my-app/api/notes/v1.... But it tries to make request to http://host:port/my-app/api/notes/v1... when click try it button. ",
    "dylancwood": "@shockey: What do you think of this? I'm sure you've got lots of other stuff going on, so I understand that you can't review everything right away. Just replying here to bring this back to the top of your inbox.\nThanks in advance.. @shockey: I agree: we should only do it when resolving references. To be honest, that is what I assumed this did: it is in resolver.js after-all. Let me know if that is not the case.. Thanks. Any genius ideas on testing this to avoid regressions in the future? This is a little tricky, since it is just an option passed to a third-part lib (isomorphic-fetch). That option then has a side-effect in the browser, which we cannot test directly in node (it's not worth it anyway). . ",
    "deostroll": "Should this be defined in the spec (swagger.json)? Can this not be done client side? (Browser). How to apply this for specific paths/methods?. You mean add access_token as a query parameter for those paths individually?. Whatever swagger-ui version in petstore app. I'll need some time to manufacture a minimal swagger json example pertinent to this issue.. Hi. Sorry for the long gap.\nSwagger.json: https://gist.github.com/deostroll/851e3f604ab9c66fbb64ce91d97642a7\nCode for remote method:\n```\n'use strict';\nmodule.exports = function(Person) {\n  Person.getWithLimit = function(limit, options, cb) {\n    Person.find({}, function(err, result) {\n      if (err) {\n        cb(err)\n      }\n      else {\n        cb(null, result.slice(-limit))\n      }\n    });\n  };\nPerson.remoteMethod('fetch', {\n    accepts: {\n      arg: 'limit',\n      type: 'number',\n    },\n    returns: {\n      arg: 'response',\n      type: 'object',\n      root: true\n    },\n    http: {\n      verb: 'post',\n      path: '/fetch'\n    }\n  })\n};\n```. any update on this?. ",
    "ereOn": "Any news on this ?. ",
    "RdeWilde": "Please make this behaviour optional. Not everyone is so strict on the Swagger specification. There's no way to communicate such a major change in a production env.. Also, if you add more duplicated methods, as naming convention on the existing api requires me, there will be no way of telling which id's change (all3 for products-tag may become all4 when adding all for invoices-tag). Is this just for the path/url generation, or also for getting rid of these id's in the operation id because of \"duplicate\" names (though not sharing any tags + methods)?. ",
    "Cheprer": "follow up on #1045 . ",
    "kleindev": "Good point, very well could be something I need to adjust on the definition.  I do have a consumes defined - multiple though.  Perhaps I could remove all but application/json.  Here is a snippet for the particular operation:\njson\n\"/v1/customers/{customerId}/alerts/search\": {\n      \"post\": {\n        \"tags\": [ \"Alerts\" ],\n        \"operationId\": \"V1CustomersByCustomerIdAlertsSearchPost\",\n        \"consumes\": [ \"application/json\", \"text/json\", \"application/json-patch+json\" ],\n        \"produces\": [ \"text/plain\", \"application/json\", \"text/json\" ],\n        \"parameters\": [\n          {\n            \"name\": \"customerId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"type\": \"string\"\n          },\n          {\n            \"name\": \"since\",\n            \"in\": \"query\",\n            \"required\": false,\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"required\": false,\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          {\n            \"name\": \"continuationToken\",\n            \"in\": \"body\",\n            \"required\": false,\n            \"schema\": { \"type\": \"string\" }\n          },\n          {\n            \"name\": \"X-AMOC-KEY\",\n            \"in\": \"header\",\n            \"description\": \"userid:apikey\",\n            \"required\": true,\n            \"type\": \"string\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": { \"$ref\": \"#/definitions/PagedResults[Alert]\" }\n            }\n          },\n          \"403\": { \"description\": \"Forbidden\" },\n          \"500\": { \"description\": \"Server Error\" }\n        }\n      }\n    }\n\"/v1/customers/{customerId}/alerts/search\": {\n\"post\": {\n        \"tags\": [ \"Alerts\" ],\n        \"operationId\": \"V1CustomersByCustomerIdAlertsSearchPost\",\n        \"consumes\": [ \"application/json\", \"text/json\", \"application/json-patch+json\" ],\n        \"produces\": [ \"text/plain\", \"application/json\", \"text/json\" ],\n        \"parameters\": [\n          {\n            \"name\": \"customerId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"type\": \"string\"\n          },\n          {\n            \"name\": \"since\",\n            \"in\": \"query\",\n            \"required\": false,\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"required\": false,\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          {\n            \"name\": \"continuationToken\",\n            \"in\": \"body\",\n            \"required\": false,\n            \"schema\": { \"type\": \"string\" }\n          },\n          {\n            \"name\": \"X-AMOC-KEY\",\n            \"in\": \"header\",\n            \"description\": \"userid:apikey\",\n            \"required\": true,\n            \"type\": \"string\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": { \"$ref\": \"#/definitions/PagedResults[Alert]\" }\n            }\n          },\n          \"403\": { \"description\": \"Forbidden\" },\n          \"500\": { \"description\": \"Server Error\" }\n        }\n      }\n    }. I believe I found a way to get it to work.  My body parameter is optional - if I pass a value there, the client will work as my API expects (application/json content type).. ",
    "seamoss": "The request compiles correctly when changing the type of offset to string, but it requires me to augment the hosted spec and that probably isn't scalable long-term.. Oops, sorry. \nswagger-client@3.0.17. No, thank you!. ",
    "TheLocust3": "I actually found a better way of doing this (without needing a pr) but just to answer your question this would allow the user to specify a relative path to their Swagger spec file (during initialization), while not having a host name specified in their spec file.. ",
    "berlinquin": "@shockey Thanks for the example.\nRunning this code on my node server fails to upload the file unless I replace this line of code:\nconst myPetImage = fs.readFileSync(path.normalize(__dirname + '/myPet.jpg'))\nwith this:\nconst myPetImage = fs.createReadStream(path.normalize(__dirname + '/myPet.jpg'))\nI think swagger-js expects a ReadStream to be passed instead of a Buffer. \"swagger-client\": \"^3.2.2\" from package.json. ",
    "zarya": "What is the state of this? the proposed adding of responseContentType works but it does not make the code look nicer.. ",
    "SpearThruster": "Yea this issue is causing me major headaches. The swagger-js client is the one used also in the swagger-ui correct? I am wondering why does it set the correct Accept header there, and not here.. ",
    "owenconti": "Thanks @ponelat. I understand the issue with the depth check. I will need to look into it more.. @shockey Yes I think so.. Updated. ",
    "poppinlp": "@webron  Thanks.\nA little more question. Why not a npm package to generate js code since there's such a js in this repo could parse spec and use it? Seems npm package is easier to put in front-end build flow to generate js code. No offense. :). Yes, i find you have a online generator which could call by curl.\nThanks.\nAnd a little more (sorry just a little)...Which spec do you recommend 2.0 or 3.0.0? I found the recommend spec on your website is 3.0.0 but swaggerhub and that online generator are using 2.0 (or maybe your update plan) :). Well..I get to the specification page and the default is 3.0.0 (just a little link to 2.0) which makes me feel 3.0.0 is the recommended spec version (like what other libs always do to show a recommended version as default and give a link to older. )\nSo...dose i feel wrong?. ",
    "n-h": "@shockey + 1 Would love to see this. Is there a workaround for now?. OMG, awesome! It worked. Thanks for such a fast reply! \ud83d\ude04 . ",
    "fsticza": "not so comfy though.... ",
    "Azuaron": "For the love of God, put that workaround in the README!. ",
    "PaulSearcy": "Expanding on @Azuaron  comment above.\nReadme also causes confusion in that browser example will not work after installing via npm.\n\nDownload via npm\nshell\n npm install swagger-client\nImport in code\n```js\nimport Swagger from 'swagger-client'\n// Or commonjs\nconst Swagger = require('swagger-client')\n````\nImport in browser\nhtml\n<script src='browser/swagger-client.js' type='text/javascript'></script>\n<script>\n    var swaggerClient = new SwaggerClient(specUrl);\n</script>\n\nI struggled with this for a second because later on: \n\nIn Browser\nPrepare swagger-client.js by npm run build-bundle\n\nwhich meant to me:\nshell\ncd node_modules/swagger-client && npm run build-bundle\nThat promptly failed because installing from npm strangely enough only downloaded the dist folder and not the src folder .\nSo had to back out of project folder and use workaround stated above.. @shockey yep, pointing out that the readme makes that assumption. \nJust from my experience, I've seen JS libraries: do a 1 to 1 with github and npm, provide CDN links, release a bundled browser version usually in UMD ( like one of your to do items listed above), and/or explicitly state to git clone.  \nA minimal material design css library I use called MUI has a great example. \nI usually first jump into node_modules for the library before I do a git clone so I don't have to switch my focus too much from my editor/terminal/window and usually I can extrapolate what I need from there. I also then don't need to do more clean up tasks down the line when I wonder why I have so many  directories in my workspace. :laughing:. ",
    "stevage": "FYI, I think the TODO here is\n\n[ ] Add umd/ to .gitignore\n[ ] Add a \"prepublishOnly\" script to package.json that does essentially the same as bundle-build but puts the result in umd/index.js\n[ ] Advertise the fact that you can access the distributable at unpkg.com/swagger-client \n\nAs far as I know, that's all that's required. Since there is no files element in package.json, the generated file will be automatically included, and therefore picked up by unpkg.. @rezpe yes, as far as I know. . ",
    "rezpe": "Hi @stevage , So i just need to fork and apply the changes you state in the todo and then pull request ?  . @stevage Done. However, the pull request do not work according to the Jenkins CI job. Strange, since I did not change anything else .... The feature was implemented, but the library still does not work on observablehq.com. We have the same error message.. Awesome !!!. I do not get why this merge is failing since it is not touching anything on the original codebase .... @shockey , Could you rerun the jenkins tests ?. @shockey , Can we merge this please ?. ",
    "cmidt-veasna": "It seem readme doc it's not up to date, the command to build for browser is changing from npm run build-bundle to npm run build:bundle according to package.json file.. ",
    "zelein": "The latest. 3.0.20.. In my case, I'm working behind a corporate firewall. IT doesn't release the self-signed certs, so I am not able to access them. I was looking for a way to disable TLS checking for just my single request, not for my entire Node process. I've seen superagent's stance on it, and also a part of the reason why I cannot utilize superagent in a node environment. Request makes it trivial by expose the strictSSL option and allowing users to turn it off, un-opinionated. \nI will look into the buildRequest/execute API. Thanks.. ",
    "johnmilimo": "I am also experiencing the same issue. I am using a self-signed cert, and I need to disable  the ssl verification. ",
    "RavinduHasithanjana": "This is the new version of swagger-js, 3.x .. swagger-client-3.0.19. ",
    "patrickml": "I guess my real problem here is I need to be able to modify the headers when you call Swagger to include an authorization token. I also need to modify the headers when a normal call is made. I had upgraded from 2 to 3, but it still didn't work. @srl295 can you post an example? I ended up writing my own swagger client creator for now, but im curious how you were able to do it?. @srl295 not with this library, I ended up writing another swagger client that's really light weight and serves our needs, at least for now. thanks for checking in tho! . ",
    "bowbahdoe": "It's not a perfect solution, but in my code I ended up doing the request for the spec with fetch and just passing it in to the client as a data url. Here is the full file, if it will help anyone else work around the issue.\n```javascript\n'use strict'\n/\nThis module contains all the code required for working with the swagger backend\n/\nconst Swagger = require('swagger-client')\nconst cookie = require('cookie')\nconst _ = require('lodash')\nconst CSRFTOKEN = cookie.parse(document.cookie).csrftoken\nconst SPEC_URL =\n ${window.location.protocol}//${window.location.host}/docs?format=openapi\n/*\nreturns if the given httpMethod should send a csrftoken with the request\n/\nfunction shouldSendCSRF(httpMethod) {\n  return !(['GET', 'HEAD', 'OPTIONS', 'TRACE'].includes(httpMethod))\n}\n/*\nMutates req to have an X-CSRFToken header with a value of csrftoken if the\nmethod of req is an unsafe http method\n/\nfunction attachCSRF(req, csrftoken) {\n  if(shouldSendCSRF(req.method)) {\n    req.headers['X-CSRFToken'] = csrftoken\n  }\n  return req\n}\n/*\nreturns a swagger client using the given swagger_spec that properly handles\npassing a csrftoken\n/\nasync function makeSwaggerClient(swagger_spec, csrftoken) {\n  return Swagger({\n    url: data:application/json,${swagger_spec},\n    requestInterceptor: req => attachCSRF(req, csrftoken)\n  })\n}\n/*\nreturns a Swagger client given the url for its spec and a csrftoken to attach\nto unsafe requests\n/\nasync function getClientFromSpec(spec_url, csrftoken) {\n  let res = await fetch(spec_url)\n  let json = await res.json()\n  let spec = JSON.stringify(json)\n  return makeSwaggerClient(spec, csrftoken)\n}\nexport\nconst getClient = _.memoize(async () => getClientFromSpec(SPEC_URL, CSRFTOKEN))\n```. ",
    "prees1": "I am seeing the same issue as the original.\nI have this set of options:\nconst ui = SwaggerUIBundle({\n    url: \"https://\" + window.location.hostname + \"/docs\",\n    dom_id: '#swagger-ui',\n    deepLinking: true,\n    requestInterceptor:\n    (request) => {\n      console.log('[Swagger] intercept try-it-out request');\n      request.headers.Authorization = \"Bearer testtoken\";\n      console.log(request.headers);\n      request.mode = 'no-cors';\n      return request;\n    },\n    presets: [\n      SwaggerUIBundle.presets.apis,\n      SwaggerUIStandalonePreset\n    ],\n    plugins: [\n      SwaggerUIBundle.plugins.DownloadUrl\n    ],\n    layout: \"StandaloneLayout\"\n  })\nWhen I view the request made to fetch the spec there is no Authorization header.\nViewing the console I can see the request.headers print out as expected and the header is there.\nI am using the latest swagger-ui, v3.10.0, from here - https://github.com/swagger-api/swagger-ui. Yes it was actually a CORS issue for me. Once I resolved the CORS issue (can't recall the exact header I had to correct) it worked as expected.. Had the same issue and can confirm that setting CORS for the requests, the header modification works.. ",
    "tnpradeep": "Is it possible to return promise object from requestInterceptor, will swagger client wait for the promise returned to resolve before invoking actual http call ?. ",
    "dballance": "Great fix - just saw this while following up on one of the linked issues!. @shockey Awesome - always amazed by how small the world is. \ud83d\ude03 \nI'll look into getting a PR today - need to go back and look at what I did. When I left it, I believe that I only applied the lookaside for $ref patches. It seemed to cause issues with the model when I applied it for all patches. \nI think the solution is something along the lines of the lookaside for $refs and the defaultModelExpandDepth mentioned in your comment. . @shockey - Played around with this most of the day today. Hope to have a small PR tomorrow that adds mitigates this issue (DFS revisit) and I will potentially submit another to resolve an issue with allOf separately.\nAs a note on the spec I'm trying to resolve - it's ~140k lines formatted JSON. Limiting DFS solves half the problem - the other half is the potential in allOf resolutions to contain a massive tree due to the graphical nature of OData expansion. A url similar to this is not uncommon http://services.odata.org/TripPinRESTierService/(S(hv5ozawv3rg0kxkskshwnr5h))/People('russellwhyte')/Friends('ronaldmundy')/Trips(5)/PlanItems - and with this particulary model, relationships at some levels can be in the 10s to 100s, which leaves a massive amount of data to merge. Still not sure what can be done here - so I'm open to any suggestions.. Oops - double submit - see #1150. \nI still need to make changes to allof to test my large spec, but the smaller one I tested in my PR showed an increase to ~580ms.  Still close to half the original resolution time, but with greater accuracy - works for me. \ud83d\udc4d \nWill grab some results on the massive spec sometime soon. Have allOf work scheduled in January to try and resolve our issues..... All good. Like I said, not even sure if it's a good change - unsure if there is a reason a deep clone is needed. IIRC, I don't think the patches hold references, so merging the patch value without the deep clone is pretty safe, but it's pretty ugly imo to cherry pick the merge strategy here. \nThis PR might not be the best change, but I think it's worthwhile optimizing these merges.\nBTW - I'm trying to talk to legal on my side to see if we can share our spec externally. It's going to customers at some point, but unsure of any contractual relationship related to the data model. Might be worthwhile to share to use for testing. I know there will be more optimizations for swagger-ui as well - and having the spec available may help identify targets for optimization. The spec currently holds upwards of 300 definitions and almost 800 paths. The result of trying to slap REST on a 20+ year old monolith. \ud83d\ude28 . @ponelat - Yeah, it's not immediately obvious. The issue stems from the behavior of deepExtend, which recursively traverses and copies, the entire object - effectively always doing a deep clone, and never a shallow copy. \nSo, for large specs, it's always spending time making a deep copy of the patch object, and traversing all paths within that object, regardless of whether they conflict or not. It also recursively calls deepExtend on itself with an empty object in order to clone objects as they are merged.\nFrom node-deep-extend, line 130:\njs\n// overwrite by new value if source isn't object or array\n} else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n    target[key] = deepExtend({}, val);\n    return;\n}\nIn my test data, some patches have a path that is 53 levels of object depth. This is where the performance bottleneck is. With Object.assign, we're just doing a shallow merge, and the entire object tree isn't being traversed.. @ponelat @shockey  - sorry for taking so long to circle back to this. Apologies ahead for the lengthy explanation, just want to make sure the change is understood.\nThe typical problem area here is not the top level of the patch value itself, but the properties key of the patch value. This is the Open API properties schema element seen in this sample.\nBecause Open API properties can be composed via $allOfs and $refs, in highly graphical apis (OData via $expand) you can have very deep trees here. Like I mentioned before, a single property tree in my sample data was 53 levels deep, even after the $ref plugin preventing cyclical references. Our API is just so large that it takes 53 references before a cycle occurs - hooray for legacy monolithic codebases! :man_facepalming: \nSo, we're actually digging into the patch value here to see if either patch has a properties key, and if any of the properties of this properties object are the same. If all the keys are unique, we don't need to deepExtend and can short circuit this expensive deep traversal. \nI've re-implemented the logic here, and it should be more readable and not dig into the actual patch value for some specific property. Basically, we perform some of the tasks of deepExtend on the properties of the patch value, but only deepExtend if an Object property has conflicting keys. This should catch all cases when the current value and patch value share an Object prop, instead of only inspecting Open API properties.\nHope this make sense. New logic seems just as performant, but more readable and robust. Tests are :100:.\n. @shockey - I haven't yet, will try to look this week and send some metrics along.. @shockey - Wanted to let you know that the new lazy resolution + these perf changes looks really promising. Our massive spec loads quite quick in the latest ui. Capturing some numbers now.. Did a few quick tests on http://petshop.swagger.io using my massive spec hosted on localhost. Measurements are from performance.mark timings between click events on the explore button to the proper title being displayed on the page. It's not 100% accurate, mostly because it was a quick & dirty check.\nButton + Title I'm watching for this metric:\n\nAverage load time of ~4625ms, after discarding outliers. Again, this is for an absolutely massive spec.\nIf I enable some config optimizations (docExpansion='list', defaultModelExpandDepth=0, defaultModelsExpandDepth=0), we get an average load time of ~832ms!\nPretty damn good @shockey! :tada: \nMeasurements:\nw/o config optimizations\n\nw/ config optimizations\n\n. Not sure I really follow the changes here, but I do think the logic could be simplified here a little. I'll make a few changes to simplify. \ud83d\ude04 . ",
    "CameronAckermanSEL": "Hey guys. I'm seeing something similar.\nGiven this spec:\n\"/projects/{projectKey}/containers/{containerKey}/stuffs\":{  \n   \"parameters\":[  \n      {  \n         \"in\":\"path\",\n         \"name\":\"projectKey\",\n         \"required\":true,\n         \"type\":\"string\"\n      },\n      {  \n         \"in\":\"path\",\n         \"name\":\"containerKey\",\n         \"required\":true,\n         \"type\":\"string\"\n      }\n   ],\n   \"post\":{  \n      \"description\":\"Inserts a new `Stuff` for the `Container`.\",\n      \"operationId\":\"insertStuff\",\n      \"parameters\":[  \n         {  \n            \"in\":\"body\",\n            \"name\":\"stuff\",\n            \"required\":true,\n            \"schema\":{  \n               \"$ref\":\"#/definitions/StuffParameters\"\n            }\n         }\n      ],\n      \"responses\":{  \n         \"201\":{  \n            \"description\":\"successfully added stuff.\",\n            \"schema\":{  \n               \"$ref\":\"#/definitions/Stuff\"\n            }\n         },\n         \"404\":{  \n            \"$ref\":\"#/responses/NotFound\"\n         },\n         \"500\":{  \n            \"$ref\":\"#/responses/Error\"\n         }\n      },\n      \"tags\":[  \n         \"stuff\"\n      ]\n   }\n}\nI have two cases where swagger-client will fail to validate the request parameters and issue the request with no body.\n\n\nIf I pass in an explicitly defined object for the stuff argument\nconst client = await getClient();\n    const response = await client.apis.stuff.insertStuff({\n      projectKey,\n      containerKey,\n      stuff: new Stuff(...stuffArgs),\n    });\nIt silently fails\n\n\nIf I pass in an anonymous object that has extra parameters\nconst client = await getClient();\n    const response = await client.apis.stuff.insertStuff({\n      projectKey,\n      containerKey,\n      stuff: {\n        ...stuffObj,\n        extraArg: 1,\n      },\n    });\nI understand that the validation is important. But my expectations are:\n\n\nIf there's a validation error, a descriptive exception is thrown and the request is NOT sent.\n\nOR The client ignores the extra stuff.\nRegardless, the client allows explicit objects to be passed into the object parameters. . @shockey haha yeah sorry I was working on it. Should be up now!. Oops sorry! We are on 3.3.1 (but this still happens with 3.3.2). I edited the description because the deluge of warnings is a separate problem than the request being sent without a body. I'll write something else up for that. Thanks @shockey for looking into it :)\n\nI'll get back to you on a better sample when I can.. @shockey, I still dont have a case to reproduce (because of confidentiality and time) but digging through the code I've discovered that this warning has arisen because of the way the swagger client resolves the spec object. \nOur server issues the JSON specification listed above, but when the swagger client resolves the specification, the resulting path object in buildRequest looks like\n``\n{  \n   \"get\":{  \n      \"description\":\"Retrieves all stuff in specified container\",\n      \"operationId\":\"getStuff\",\n      \"responses\":{  \n         \"200\":{  \n            \"description\":\"Thestufffor the containerwith the givencontainerKey`\",\n            \"schema\":{\n               \"items\":{ \n                    // ommitted\n                  },\n                  \"required\":[\n            // ommitted\n                  ],\n                  \"type\":\"object\",\n                  \"$$ref\":\"#/definitions/Stuff\"\n               },\n               \"type\":\"array\"\n            }\n         },\n         \"404\":{\n            \"description\":\"could not find the requested resource.\\n\",\n            \"x-mapper-error\":\"apierrors.IsElementNotFoundError\",\n            \"$$ref\":\"#/responses/NotFound\"\n         },\n         \"500\":{\n            \"description\":\"An internal error occurred\",\n            \"schema\":{\n               \"properties\":{\n                  \"stacktrace\":{\n                     \"type\":\"string\"\n                  }\n               },\n               \"type\":\"object\",\n               \"$$ref\":\"#/definitions/Error\"\n            },\n            \"x-mapper-error\":\"default\",\n            \"$$ref\":\"#/responses/Error\"\n         }\n      },\n      \"tags\":[\n         \"stuff\"\n      ],\n      \"__originalOperationId\":\"getStuff\",\n      \"consumes\":[\n         \"application/json\"\n      ],\n      \"produces\":[\n         \"application/json\"\n      ],\n      \"security\":[\n         {\n            \"bearer\":[  \n        ]\n     }\n  ],\n  \"parameters\":[  \n     {  \n        \"in\":\"path\",\n        \"name\":\"projectKey\",\n        \"required\":true,\n        \"type\":\"string\"\n     },\n     {  \n        \"in\":\"path\",\n        \"name\":\"containerKey\",\n        \"required\":true,\n        \"type\":\"string\"\n     }\n  ]\n\n},\n   \"parameters\":[\n      {\n         \"in\":\"path\",\n         \"name\":\"projectKey\",\n         \"required\":true,\n         \"type\":\"string\"\n      },\n      {\n         \"in\":\"path\",\n         \"name\":\"containerKey\",\n         \"required\":true,\n         \"type\":\"string\"\n      }\n   ],\n   \"post\":{\n      \"description\":\"Inserts a new Stuff for the Container.\",\n      \"operationId\":\"insertStuff\",\n      \"parameters\":[\n         {\n            \"in\":\"body\",\n            \"name\":\"stuff\",\n            \"required\":true,\n            \"schema\":{\n                 // ommitted\n               },\n               \"required\":[\n                  // ommitted\n               ],\n               \"type\":\"object\",\n               \"$$ref\":\"#/definitions/StuffParameters\"\n            }\n         },\n         {\n            \"in\":\"path\",\n            \"name\":\"projectKey\",\n            \"required\":true,\n            \"type\":\"string\"\n         },\n         {\n            \"in\":\"path\",\n            \"name\":\"containerKey\",\n            \"required\":true,\n            \"type\":\"string\"\n         }\n      ],\n      \"responses\":{\n         \"201\":{\n            \"description\":\"successfully added stuff.\",\n            \"schema\":{ \n                  // ommitted\n               },\n               \"required\":[ \n                  // ommitted\n               ],\n               \"type\":\"object\",\n               \"$$ref\":\"#/definitions/Stuff\"\n            }\n         },\n         \"404\":{\n            \"description\":\"could not find the requested resource.\\n\",\n            \"x-mapper-error\":\"apierrors.IsElementNotFoundError\",\n            \"$$ref\":\"#/responses/NotFound\"\n         },\n         \"500\":{\n            \"description\":\"An internal error occurred\",\n            \"schema\":{\n               \"properties\":{\n                  \"stacktrace\":{\n                     \"type\":\"string\"\n                  }\n               },\n               \"type\":\"object\",\n               \"$$ref\":\"#/definitions/Error\"\n            },\n            \"x-mapper-error\":\"default\",\n            \"$$ref\":\"#/responses/Error\"\n         }\n      },\n      \"tags\":[\n         \"stuff\"\n      ],\n      \"__originalOperationId\":\"insertStuff\",\n      \"consumes\":[\n         \"application/json\"\n      ],\n      \"produces\":[\n         \"application/json\"\n      ],\n      \"security\":[\n         {\n            \"bearer\":[  \n        ]\n     }\n  ]\n\n}\n}\n```\nNotice here that this path object has parameters on the path, and have also assigned the method  child object an identical parameters object. \nWhat's probably happening is that when the spec json is deserialized, the path parameters are \"inherited\" by the method object. Which makes sense, except the code here: https://github.com/swagger-api/swagger-js/blob/a46c4fac860f7107cd92750ec834f6fa639d2012/src/execute/index.js#L177 checks to see whether there are duplicate parameters in the path and the operation. Then the code detects that the operation and the path have duplicate parameters (which they do only because the parsing has set this situation up), and then issues a slightly misleading warning about the parameters being ambiguous because they did not define an 'in' value (again demonstrably they did).\nI guess the options for resolving this are\n\nOn deserialization of the spec, do not have the method/operation objects inherit the path parameters\nIn buildRequest, deduplicate parameters that are duplicate in name and in\nIf a situation is detected where duplicate parameters are encountered in the method/operation object and the path, and they have an identical name and in ignore and proceed. \n\n. Our spec is generated using go-swagger, and we have YAML path definitions that look sort of like this:\n```\n/projects/{projectKey}/containers/{containerKey}/stuffs:\n  parameters:\n    - name: projectKey\n      in: path\n      type: string\n      required: true\n- name: containerKey\n  in: path\n  type: string\n  required: true\n\nget:\n    operationId: \"getStuff\"\n    tags: [stuff]\n    description: Retrieves all stuff in specified container\n    responses:\n      200:\n        description: The stuff for the containerwith the given containerKey\n        schema:\n          type: array\n          items:\n            $ref:  \"#/definitions/Stuff\"\n      404:\n        $ref: \"#/responses/NotFound\"\n      500:\n        $ref: \"#/responses/Error\"\npost:\n    operationId: \"insertStuff\"\n    tags: [stuff]\n    description: Inserts a new Stuff for the Container.\n    parameters:\n      - name: stuff\n        in: body\n        schema:\n          $ref:  \"#/definitions/Stuff\"\n        required: true\n    responses:\n      201:\n        description: successfully added new stuff.\n        schema:\n          $ref: \"#/definitions/Stuff\"\n      404:\n        $ref: \"#/responses/NotFound\"\n      500:\n        $ref: \"#/responses/Error\"\n``\nBut it seems unlikely to have to do with how go-swagger generates the json swagger spec, because that swagger spec (pasted in the OP) appears to be correct. . Here's the code where the parameters are inherited by the method/operation https://github.com/swagger-api/swagger-js/blob/01c1207a72ea3a3cd52eb1f923e7610c38826e7b/src/helpers.js#L167. @shockey was doing some digging to make a PR to resolve this, because frankly it's driving me absolutely crazy. Based on the code here: https://github.com/swagger-api/swagger-js/blob/01c1207a72ea3a3cd52eb1f923e7610c38826e7b/src/execute/index.js#L175value = parameter && parameter.name && parameters[${parameter.in}.${parameter.name}]`\nIt looks like the buildRequest might expect us to pass in parameters like\nclient.apis.stuffs.getStuff({\n  'path.projectKey': 'foo',\n  'path.containerKey': 'bar',\n});\nIs that the case? If so that conflicts with the examples a bit. Tentatively, trials using the parameter deduplication strategy seem to have resolved the problem for us:\n```\n// removes parameters that have duplicate 'in' and 'name' properties\nconst deduplicateParameters = (parameters) => {\n  const paramsMap = {}\n  parameters.forEach((p) => {\n    if (!paramsMap[p.in]) {\n      paramsMap[p.in] = {}\n    }\n    paramsMap[p.in][p.name] = p\n  })\nconst dedupedParameters = []\n  Object.keys(paramsMap).forEach((i) => {\n    Object.keys(paramsMap[i]).forEach((p) => {\n      dedupedParameters.push(paramsMap[i][p])\n    })\n  })\n  return dedupedParameters\n}\n```. @shockey thanks for the response. We're calling the deduplication function on the concatenated parameter list here: https://github.com/swagger-api/swagger-js/blob/66cff030af0bbb77e72fc0c45c285eeb9a6970a7/src/execute/index.js#L154\nconst combinedParameters = deduplicateParameters([\n  ...arrayOrEmpty(operation.parameter),\n  ...arrayOrEmpty(path.parameters),\n]). @shockey I'm honestly a bit surprised that you're not able to reproduce this because the more I stare at this code, I don't see a control flow where the operation object doesn't inherit the parameters at the end of helpers.normalizeSwagger, and duplicates aren't created when the combinedParameters array is constructed in execute/index.buildRequest. Why do we need to use combined parameters anyway here if the operation object has already inherited all of the parameters? . @shockey yo! I'm not sure what's up with the Travis build. It says abuse detected and it's not running the build. Could it be because of the spy on console.warn? \nWant me to send them a support ticket or do you have a way of dealing with it? \nThanks! :D. @shockey sure thing! At the top of the list here: https://travis-ci.org/swagger-api/swagger-js/requests\nI initially thought the build was hanging because I hadn't merged with master so that's why you'll see the build request for this PR twice. . Thanks very much! Let me know if I can help in any way. @shockey  thanks for the help!! It looks like everything is in order. As mentioned in #1180, this code would grab the parameters from the operation and the parameters from the path, and merge them into a single array. Because this code is called after normalizeSwagger, the operation.parameters array would already have the parameters from the path. This would create duplicate parameters. The duplicate parameters aren't necessarily a problem, but the logic surrounding the ambiguous parameter warning doesn't handle this situation properly. . the existing unit tests were not catching this condition because none of the tests normalizeSwagger before calling buildRequest.. Now we have such a test, and we have a regression test verifying that the warning is not thrown in this situation where the parameters are inherited by the operation.. this test verifies that when there are in fact ambiguous parameters (that is two parameters with the same name that have different 'in's) the warning is thrown. . There's a small performance cost to this, but I felt it was much less risky than trying to make normalizeSwagger not pass the path parameters down to the operation, and it was better than not concatenating the arrays here.. ",
    "iamakimmer": "That did the trick thanks!. ",
    "nikarc": "Omg, @iamakimmer thanks so much! You've saved me hours of work. ",
    "biggianteye": "How does the suggested migration work?\nFrom the doc linked:\njavascript\nSwagger('http://petstore.swagger.io/v2/swagger.json', {\n  authorizations: {\n    // Type of auth, is inferred from the specification provided \n    my_basic_auth: { username: 'foo', password: 'bar' },\n    my_query_auth: 'foo', \n    my_header_auth: 'foo', \n    my_oauth2_token: { token: { access_token: 'abcabc' } },\n    cookie_auth: null, // !!Not implemented\n  }\n}).then( client => ... )\nIf you are going from this:\njavascript\nmy_header_auth: new ApiKeyAuthorization('My-Header', 'bar', 'header'),\nto this:\njavascript\nmy_header_auth: 'foo',\nyou are losing two piece of information: the name of the header and the fact that it's in the header rather than the query.\nAm I missing something?\nThese two examples have identical content. How can it possibly infer that one is a query auth and one is a header auth?\njavascript\n    my_query_auth: 'foo', \n    my_header_auth: 'foo',. ",
    "Stono": "I would really appreciate this being merged and released as quickly as possible as at the moment all users of a CLI on our project get a full terminal of console spam.... As a work around for others who have bumped into this, as swagger-js is loose on the patch version ~1.1.8, by doing npm install --save fast-json-patch@1.1.8, npm will just use that version, rather than the 1.1.10 which has this warning in.. ",
    "wheresrhys": "Thanks - I'll checkout and run locally too and let you know what I find. Yep it was me. I'll add a regression test to make sure this doesn't happen again https://github.com/wheresrhys/fetch-mock/pull/223/files#diff-2917a039dc612e08d6fae9869d0e5c42L181 . fixed in 5.13.1. ",
    "lquixada": "@shockey yes! we're using cross-fetch in major e-commerce sites in Brazil. It was created to fix\nthe same problem as the issue #1047. Also, VulcanJS and graphql-request are already using it.\nBut if any bug comes up, let me know and I'll fix it (or you can open a pr yourself :).. @shockey conflicts solved!. ",
    "vanta": "Any update here? . ",
    "arty-name": "\nThis is an oversight - a PR that loosens the version constraint to major \nversion 4 would be appreciated \ud83d\ude04\n\nI have created a pull request #1169 for that.\n\nI am surprised that this pulls 100kB into your bundle though - we \ncherry-pick functions from lodash (i.e. |import reduce from \n\"lodash/reduce\"|), so the entire module shouldn't be in your bundle, but \nI digress...\n\nIt doesn\u2019t pull the entirety of lodash, I guess, but quite some part of it.\n\n\nThere are similar issues with core-js and regenerator-runtime, so\nsimilar workaround removes additional 100 kB\n\n\nNot as sure what's going on here - is your project using a different \nmajor version of |babel-runtime| and friends?\n\nMaybe it\u2019s the same \"strict versions\" oversight as with lodash in your package.json?\njson\n\"babel-plugin-transform-object-rest-spread\": \"6.16.0\",\n\"babel-plugin-transform-runtime\": \"6.15.0\",\n\nWhile you may not need |js-yaml| for your JSON documents, other users \nneed it for loading YAML \ud83d\ude04\n\nI fully understand that. But why even in my case this call to yaml library happens? const obj = jsYaml.safeLoad(body). This call prevents me from forcibly excluding js-yaml from my bundle.\n. regenerator-runtime cannot really be fixed on your side, because it is a 0.x version, where ^ actually means ~. We use stable babel-polyfill version which still links to regenerator-runtime@^0.10.5 and the upgrade to ^0.11.0 is only coming in the next major version. . Thank you for merging my PR, @shockey! \nThe main remaining issue now is the call const obj = jsYaml.safeLoad(body) made on JSON responses as well. I have submitted #1175 to demonstrate the expected behavior. Looking forward to your feedback!. Sorry I couldn\u2019t reply earlier due to vacation. \nIndeed there\u2019s nothing more to be done in this ticket, so it should remain closed. \nThe lodash issue is fixed. The js-yaml issue is fixed. The regenerator-runtime issue will likely be fixed with the upcoming upgrade to babel@7. (It\u2019s nice of you to remind about lockfiles by the way!). Thank you for adding tests, @shockey! I have updated my change as you suggest - almost. For performance reasons I have replaced trimming with regexp. How does it look now?\nThe tip with aliasing safeLoad to JSON.parse will technically work, but it looks to me too much like a tight coupling. . Thank you @shockey! \nI just came back from the vacation and was bitten by exactly the thing you mention in your last comment. It didn\u2019t occur to me earlier that some of our APIs produce JSON arrays, so the check doesn\u2019t pass for them. Your argument about OpenAPI is valid though, I should give it a read and try to convince the colleagues to migrate to this standard. \nThough a check for contentType === 'application/json' would have handled that case.... @shockey, there\u2019s actually something wrong about the OpenAPI argument. \nYes, the OpenAPI Document is always an object. However the specification allows the responses to be arrays, it even includes examples. \nThe code in serializeRes is used for both Swagger specs and responses, so it\u2019s perfectly fine for it to receive a JSON-encoded array, string, number, null, or object. Naive content check seems not too reliable for that case.. I\u2019m happy to hear that you don\u2019t mind to check another pull request for this issue! I have created #1183 with this approach.. Sweet! Thank you @shockey!. ",
    "AedanChristie": "Hi Kyle,\nthat\u2018s great but the site I\u2018m using this on requires HMAC signing of requests plus an ever increasing nonce. How would I go about re-calculating this for every request?\nTo emphasise: Every single request needs to be signed using the post data from that specific request, which means the headers cannot be set once only.\nThanks,\n\u00c1ed\u00e1n\n\nOn 14 Nov 2017, at 01:48, kyle notifications@github.com wrote:\nHi @AedanChristie, you should be able to attach authorization values like so:\nSwagger({\n  url: 'https://www.bitmex.com/api/explorer/swagger.json'\n}).then((client) => {\n  client.apis.Chat'Chat_get'.then(res => console.log(res))\n})\nApologies for the lack of documentation around that feature - it's on our radar to add it!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "aequasi": "Is there a way to globally set the securities for the tags?. My spec is here: http://api.discordservers.com/docs.json, trying to call List servers.\nMy code: \njavascript\nSwaggerClient(\"http://dev.api.discordservers.com/docs.json\").then(c => {\n    c.apis.security.authenticate({username: process.env.USERNAME, password: process.env.PASSWORD})\n        .then(async result => {\n            c.authorizations = {Bearer: \"Bearer \" + result.obj.token};\n            console.log(await c.apis.server.list({size: 1}))\n        })\n        .catch(console.error);\n});\nIt uses JWT authentication, so first i get a token, then i set it on the api client.\nAll requests (like the c.apis.server.list() call) never send an authentication header.. Nevermind, i figured it out.. ",
    "satyamkondle": "For anyone coming here and using OAS3, here is an example that worked for me:\nfor providing token:\nclient.apis.getBooks(params, {\n    securities: {\n        authorized: {\n            tokenAuth: { value: <tokenvalue> }\n        }\n    }\n})\nfor providing basiauth:\nclient.apis.getBooks(params, {\n    securities: {\n        authorized: {\n            basicAuth: { value: {username: '', password: ''} }\n        }\n    }\n})\nmy schema looks like this:\n\"security\": [\n   {\n       \"basicAuth\": []\n   },\n   {\n       \"tokenAuth\": []\n   }\n  ],\n  \"components\":{\n      \"securitySchemes\": {\n          \"basicAuth\": {\n              \"scheme\": \"basic\",\n              \"type\": \"http\"\n           },\n           \"tokenAuth\": {\n               \"type\": \"apiKey\",\n               \"name\": \"<your-token-header-name>\",\n               \"in\": \"header\"\n           }\n    }. ",
    "renuka-fernando": "Hi @shockey \nCan you please review the PR.\nVideo on testing the fix: https://youtu.be/lXu1MR_Z730. Hi @shockey,\nAs per our understanding, writing unit tests for this improvement is troublesome. Can you please help writing integration tests on this?\nSo then this can be merged.. Thank you! @shockey for you help. Hi @shockey,\nWe are still facing the issue of handling CORS request. https://github.com/swagger-api/swagger-js/pull/1236 is fixed the issue and we have tested it with two origins.\nCan you please review it?. Thanks, @shockey . ",
    "RHackrid": "I have the same problem for a API with a implementation of the SCIM specification [http://www.simplecloud.info/].\n\nBy convention, a reference is commonly represented as a \"$ref\"\n   sub-attribute in complex or multi-valued attributes; however, this is\n   OPTIONAL. [https://tools.ietf.org/html/rfc7643#section-2.3.7].\n\nJSON-Example (User Representation):\n{\n  \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n  \"id\": \"2819c223-7f76-453a-919d-413861904646\",\n  \"userName\": \"bjensen@example.com\",\n  \"groups\": [\n    {\n      \"value\": \"e9e30dba-f08f-4109-8486-d5c6a331660a\",\n      \"$ref\":\n\"https://example.com/v2/Groups/e9e30dba-f08f-4109-8486-d5c6a331660a\",\n      \"display\": \"Tour Guides\"\n    }\n  ],\n  \"meta\": {\n    \"resourceType\": \"User\",\n    \"created\": \"2010-01-23T04:56:22Z\",\n    \"lastModified\": \"2011-05-13T04:42:34Z\",\n    \"version\": \"W\\/\\\"3694e05e9dff590\\\"\",\n    \"location\":\n     \"https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646\"\n  }\n}\nOur customers won\u00b4t understand why our 'official' API documentation shows error messages. It\u00b4s impossible to hide error messages by default, isn\u00b4t it?. We are showing errors via swagger-editor. I can confirm the fix. I didn't notice the fix on the 8. Feb. 2018. Thanks! :). ",
    "bungoume": "@shockey Would you please support these cases?. ",
    "benirose": "I'm also having this issue, res.body simply doesn't exist in Edge. Any update on a fix?. It looks like the res object doesn't even have a body property on it. I'm stepping through debugger in Edge and mousing over the variable passed into my then(function(res){...}). . Chrome seems to be returning an Object for res.body, and it's definitely there. I haven't tested other browsers. \nI'm not sure how to share a working example, as it requires a lot of moving parts.. I'm using this with a Vue component, so in one of my methods I have the following code:\njavascript\nthis.$api.Participants.getParticipants(params).then(\n  ({body}) => {\n    ...\n    this.participants = body.data\n    ...\n  }).catch((err) => {\n    if(window) { window.alert('There was an error'); }\n  });\nMy response is JSON and should have a data property at the top level.\nI'm using Babel and Webpack to build my code, so my transpiled isn't using the object deconstruction or arrow functions, but looks like this:\njavascript\nthis.$api.Participants.getParticipants(params).then(function(_res){\n  var body = _res.body;\n  ....\n})\n````. I'm going to try using fetch and promises polyfills to see if that helps.. Polyfills didn't seem to help.. The polyfill did work! It just wasn't loading because Edge has fetch support, just bad fetch support. Adding this code before loading the polyfill got it working:javascript\nif (/Edge/.test(navigator.userAgent)) {\n  window.fetch = undefined;\n}\n```\nIt's hacky but at least it gets it working. BTW the polyfill I'm using is https://github.com/github/fetch. ",
    "SSchindi": "@benirose Your workaround doesn't work for me. Are there no other ideas to fix this issue? \n@shockey You keep this open, that's good. But what are the next steps? . ",
    "mjkkirschner": "just wanted to report that I am using a request interceptor to decode the url path before sending it, incase anyone else ran into this.. ",
    "ilgrosso": "Thanks for your indications @shockey and clarifications about the matrix parameter support in OAS3 - the current work was produced under bad supposition, it seems.\nI'll come soon with an updated PR, complying with what you say above.. Please take a look @shockey - now npm run lint also runs fine.. Ok, now it should be working, please @shockey have a look.... @shockey as you can see from Travis CI, the checks on Node.js 6.9 went green but the ones on Node.js 4.7 failed because the distribution could not be downloaded. thx @shockey - now all is green it seems :-). @shockey test added, sorry for overlooking this.\nThanks for your review.. Hi @shockey, what's missing to accept this PR?. I see: then it seems there is a bigger problem as, being constrained to be just a \"style\" of path parameters, matrix parameters do not have yet an adequate definition in OpenAPI v3.\nAs far as I can tell, in fact, matrix parameters are used by JAX-RS as an optional part of the URL (similarly to query parameters), while path parameters are a mandatory part of the URL.\nWhen I saw https://github.com/OAI/OpenAPI-Specification/issues/69 closed, I though that finally the vexata quaestio was solved, and that people writing REST in Java could finally use freely matrix parameters; unfortunately, it seems we are not yet to that point.\nThanks for clarification, @shockey and sorry for the rant. I am closing this PR now.. ",
    "hkosova": "I guess this question is about Swagger UI and not swagger-js.\nAdding \"type\": \"string\" under \"items\" should fix the displayed example.\nitems\": {\n  \"type\": \"string\",\n  \"enum\": [\"structured\", \"unstructured\"],\n  \"default\": \"structured\"\n}. ",
    "harouny": "Apologies, my bad, my swagger wasn't valid. My parameters was an object while its supposed to be an array,. ",
    "robotoer": "Oh, also, while poking around trying to figure out why the authorization header wasn't showing up, I found that the userFetch method is receiving the correct authorization header while using an \"apiKey\" type securityDefinition. This header still never makes it into the actual request.. Ah, I figured it out. I had incorrectly implemented CORS requests in my server and wasn't accepting the OPTIONS request which was correctly being sent without any of my headers.\nOnce fixed, requests work as expected.. ",
    "denis-s-svsg": "Hi @shockey, yes we are using Content-Disposition: attachment. ",
    "dleistn1": "Definitely + 1, I start using the lib a few days ago and ended up reading the source code to decrypt the possible options and the interfaces of the different properties (especially auth is a fu****g pain). ",
    "rook2pawn": "Thanks shockey. I deleted my comments as I wanted to further understand the issue and have spent some time examining / documenting exactly how subtly different cross-fetch / fetch are from superagent. I will update you if I think i have something!. ",
    "heldersepu": "@shockey in the helper we might be able to consolidate 'parameters' and 'components/parameters' ...\nWhat do you think?. Done. Done ...\nAlso look at my question about consolidating some. ",
    "lopezvit": "I did the following code, I hope that it helps:\nconst swagger = await new Swagger({\n      spec: SPEC,\n      requestInterceptor: req => {\n        req.headers[\"accept\"] = \"application/json\";\n        req.headers[\"Content-Type\"] = \"multipart/form-data\";\n        req.formData = body.attachment;\n        req.userFetch = (url, options) => {\n          return new Promise((resolve, reject) => {\n              const xhr = new XMLHttpRequest();\n              xhr.open(\"POST\", url);\n              xhr.onload = () => {resolve({\n                  ok: true,\n                  url: xhr.responseURL,\n                  status: xhr.status,\n                  statusText: xhr.statusText,\n                  headers: getHeadersAsObject(xhr),\n                  text: (obj) => Promise.resolve(xhr.body)\n              }) };\n              xhr.onerror = () => reject(xhr.statusText);\n              xhr.upload.addEventListener(\"progress\", function (evt) {\n                if (evt.lengthComputable) {\n                    console.log(\"add upload event-listener\" + evt.loaded + \"/\" + evt.total);\n                }\n              }, false);\n              for (const k in options.headers) {\n                if (options.headers.hasOwnProperty(k)) {\n                  xhr.setRequestHeader(k, options.headers[k]);\n                }\n              }\n              var formData = new FormData();\n              formData.append(\"attachment\", options.formData);\n              xhr.send(formData);\n              })\n          };\n        return req;\n      }\n    });\n[...]\n```\nfunction getHeadersAsObject(xhr) {\n    let headers = new Map();\nxhr.getAllResponseHeaders()\n    .split('\\u000d\\u000a')\n    .forEach((line) => {\n        if (line.length > 0) {\n            let delimiter = '\\u003a\\u0020',\n                header = line.split(delimiter);\n\n            headers.set(header.shift().toLowerCase(), header.join(delimiter));\n        }\n    });\n\nreturn headers\n\n}\n```\nAdd progress bar\ngetHeadersAsObject partially copied from. ",
    "palanik": "Hi @webron, @shockey,\nThanks for the quick response.\nYour assumption is correct. I am seeing the escaped (with underscore) operationId in the UI when displayOperationId is enabled.\nWith the operationId set as operationId: \"app.info\", this is what is displayed on the UI.\n\nI have a different opinion on using dot-notation for function names.  \ud83d\ude04\nI prefer dot-notation because if feels natural and some client sdk's use that. Most popular one being Slack Web API\nIt groups the methods nicely under a resource.\nTaking your example, it is absolutely possible to build an interface like client.apis.user.list(), client.apis.user.update() etc. in JavaScript. \nThanks again for looking into this.\n. Followup, I was using swagger-ui-dist version 3.9.2, where I experienced this issue.\nLooks like it is fixed with the most recent version - 3.11.0.\nI should have checked. Sorry for the trouble. \nYou can close this issue.. ",
    "lduros": "Thank you for your answer. As I'm using django-rest-swagger to automate this, I'm not sure if there's a way to get control of this. I will ask the django-rest-swagger repo. Many thanks for the pointer!. Closing issue. Thanks.. Awesome, I had used requestInterceptor before, but then thought there was another way.\nGreat to know and thank you for your prompt answer and help!. One small correction, it does get passed when I do:\nclient.apis.myApi.someCall()\nbut it does not get passed when using:\nclient.execute(...)\n. Found out that this solves my problem:\nclient.execute({\n    operationId: operationId,\n    parameters: parameters,\n    securities: {\n         authorized: client.securities,\n         specSecurity: [client.spec.securityDefinitions]\n     }\n   }). ",
    "llund": "@lduros Were you able to find an answer to this? My google-foo fails to find anything in django-rest-swagger.. ",
    "andylockran": "Thanks for the write up. I was getting confused with this earlier and now it all makes sense. ",
    "levisegal": "Want to add to this issue, at least some documentation stating that the securities object on the buildRequest method need to be nested under an \"authorization\" key would have saved me a few hours of time.\n. ",
    "GreGosPhaTos": "Yes thanks @eropple that was helpful ! \n@shockey any progress on documenting this part ? \nThanks guys !\n. ",
    "rg1": "I've updated the code to use async/await as requested. Sorry that I didn't realize it was supported.\nI guess fixing  #1249 is now simply a matter of adding another await (and a test). I could add that as well if you like, or submit another pull request once this is merged.\n. @shockey I've pushed the change Monday. Is anything else needed?. I've looked into this. You're right, I've completely overlooked the fact that the fetch itself can already fail. I've fixed the issue in my commit d8d0adebbb plus a test that executes your sample. I'm not sure if it should rather be mocked, though. I also don't know if this needs to be a pull request or how to make this issue into one. Please advise.. @shockey thanks for taking this. I got sick before I could update my patch.. ",
    "guillaumesmo": "That didn't work for me neither, although this seems to work \nreplayClient.client.apis.user.login({}, {requestBody: {username: \"test\", password: \"test\"}}))\nnot sure if that's the expected behaviour. ",
    "karllson": "I think I solved my problem.\nIf you instantiate your client before and then hit a route like this: client.apis.pet.addPet it's also possible to pass a second parameter, which also \"accepts\" interceptors.\nSo I ended up doing this: client.apis.pet.addPet(myPayload, {requestInterceptor: () => ...});\nIs this the way to solve this problem/a correct approach? If yes, are you guys open for doc update PRs?\nThanks in advance\nUPDATE: The approach seems to work for POST, but not for GET. I'm calling a GET endpoint with the options object like client.apis.whatever.myGetStuff({requestInterceptor: r => ...}). The interceptor never gets called.\nHow is this supposed to work? How do I correctly add headers to a GET request?. Good morning @shockey,\nthank you so much for clarify things a bit. I think this issue can be closed. \nI maybe will write a blog post about the different approaches. \nIf I do so, I will definitely send you the link!\nHave a good day !. ",
    "kavisuresh": "Hi @shockey \nI have a catch block to handle the error, but what I observed is , I get the below message \n(node:2593) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 20): Error: Required parameter ab_test_id is not provided\nbut the control doesn't go to then or catch block - it just gets timed out\nCould you please help!\nThanks\nKavitha. Hi @shockey,  I am using the instance method. ",
    "replaysMike": "ok perhaps this is a swashbuckle (c#) issue. I'll keep investigating.. ...sooooo, I discovered the reason. It's not particularly obvious and is related to how .net core / swashbuckle binds models which is a little different than how previous versions of .net work and the way it generates the input parameters.\nMy mistake is changing the object being passed to (note the object 'model' contains the properties):\njavascript\nconst formProperties = {\n  model: {\n    name: 'Test Name',\n    email: 'test@example.com',\n    password: 'password',\n    confirmPassword: 'password',\n    phoneNumber: '555-555-1212'\n  }\n};\n. ",
    "ngraef": "Thanks for reviewing! Any thoughts, @webron?. > We should consider renaming the extension name based on some work the OAI is doing right now on formalizing extensions\nThis PR adds the x-tokenName extension support exclusively for swagger 2 docs. OAI work would only impact the 3.x spec, right?. ",
    "psy21d": "`YAML = require('yamljs');\n// Load yaml file using YAML.load \nnativeObject = YAML.load('swagger.yaml');\nconst swaggerGen = require('swagger-vue')\nconst jsonData = nativeObject\nconst fs = require('fs')\nconst path = require('path')\nlet opt = {\n  swagger: jsonData,\n  moduleName: 'api',\n  className: 'api'\n}\nconst codeResult = swaggerGen(opt)\nfs.writeFileSync(path.join(__dirname, './dist/api.js'), codeResult)`\nI use https://www.npmjs.com/package/swagger-vue\nI guess I'm a little confused. I see it is not original swagger. Sorry, if not at the address.\nIs it possible to use the original latest version of the swagger generator to get api js? \nWhere can find information about this?\n. ",
    "JonathanParrilla": "please build. please build. please build. please build. please build. please build. please build. please build. please build. please build. ",
    "swaggerhub-bot": "Here's Jenkins!. ",
    "john-goldsmith": "Interesting, thanks for the info.\n\nAlso be aware of the fact that your swagger.json will change rather infrequently\n\nAlthough this might be true for some projects that are considered \"stable\", this is assumption is definitely not a fact.\n\nuse the Client in such a way that your swagger.json isn't fetched until the user intends to do something that involves your API\n\nAbsolutely, but in the context of a SPA, chances are high that it will be needed almost immediately.. ",
    "vbyjsue": "I've just recently begun using this lib so I might be wrong, but this works for me in 3.7.2:\nclient.apis.user.get_user_session(\n{},\n{requestInterceptor: req => { console.log(req); return req;}}\n)\n. ",
    "gzurbach": "We're experiencing the same issue. This is breaking all our builds still relying on Node 4 (over a dozen APIs). This is a breaking change and should have been published under a new major version (i.e. swagger-js@4.0.0) by semver specs.\nOur apps include swagger-js@3.x very deep in the dependency tree (we use loopback) so we cannot easily lock the version numbers.\nThe ideal solution would be to publish a 3.8.2 that reverts the latest changes and re-publish the latest version (3.8.1) as 4.0.0 while indicating the requirement for Node 6+.. @shockey Thanks a lot for the quick reply. I've ben wanting to update Node in all those projects for months but my boss wants me to write new shiny toys instead. I'm sure you've heard this before \ud83d\ude04\nWhat happened today will give me leverage to convince him to add this work in future sprints!. Thanks for publishing v3.8.2 it will buy us some time until we have converted all our APIs.\nFYI - I spent the last 10 hours updating some of our apps to Node 6 and I think I got it all working now. 2016 here I am, woohoo!. ",
    "virkt25": "Thanks for the update @shockey ! While I totally agree that EOL versions shouldn't be supported for all the reasons stated above and in the linked comment - it's a little easier said than done when enterprise customers are a bit slow to migrate and expect support. \nThat said, we're working on a plan to drop Node 4 and your comment helps with that. :) . Thanks for the fix @shockey Appreciate it and definitely gives us some time to come up with a plan to drop support for Node 4. And haha yea it's been May for a week now so you were in the right to drop support. \n@gzurbach You might get extra life if you moved on to Node 8 / 10 instead as Node 6 will be End of Life this time next year.. ",
    "yesmeck": "After change module.exports to ES module export, we need to import it by ES module import. This change won't affect end users, because of we've told webpack export the default property.. @shockey I added babel-plugin-add-module-exports to address your concerns.. ",
    "nknol": "npm 3.10.10. Will try that in a bit, I do know that two other of my coworkers had the same problem, but it might be our environment. Will let you know.. We are definitely behind a proxy that is supposed to act as a pass-through for npm packages that we don't publish ourselves, which could definitely be the culprit. If you don't hear back from me soon it's probably safe to assume the fault is on our end.. Apparently it's a problem with our Sinopia server, switched to Verdaccio at the advice of another dev (which I guess we already had running for this exact reason) and everything installed fine.  Sorry for the bother.. ",
    "vrsbrazil": "Is there a swagger-client version where this is not happening?. @shockey the error is only triggered when the swagger-client is used as a module on a different project, as I mentioned before, the error goes away once I got straight to the swagger-client at my node_modules and run npm install in it, so I believe you have a dependency reference issue somewhere.... It wasn't, however I noticed that if I go to node_modules/swagger-client and run npm install in there, it works too. ",
    "artemyarulin": "Anything I can do to push it forward? Tests, docs, etc.?. ",
    "SerCarciofini": "I might be wrong, but i think swagger-client, running in node environment, uses to fetch the specification each time. It's a waste of resources.\nOn the other side with swagger-code-gen you generate your middleware, integrate it and that's it, much faster in a production environment.. ",
    "emreavsar": "That was what inwas thinking, but it is not clearly written anywhere and in\nthe codegen repo there is a \u201ewhat about javascript\u201c section which leads to\nthis repo.\nOn Tue, 17 Jul 2018 at 11:23, Lorenzo Santoro notifications@github.com\nwrote:\n\nI might be wrong, but i think swagger-client, running in node environment,\nuses to fetch the specification each time. It's a waste of resources.\nOn the other side with swagger-code-gen you generate your middleware,\nintegrate it and that's it, much faster in a production environment.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/swagger-api/swagger-js/issues/1345#issuecomment-405518392,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5mlhtKcwo-qhFPPASU8fNGOdiVwv1Yks5uHa0SgaJpZM4VOaRD\n.\n. This should be summarized in README.md in code-gen.. \n",
    "dalbrx-forcam": "Test has been added. ",
    "simonheys": "Thank you @shockey for the clear review. I have added initial test implementation to cover the points you made, looking forward to hearing what you think so far.. ",
    "srchulo": "Oh, maybe this should go here instead?\nhttps://github.com/wcandillon/swagger-js-codegen\nFeel free to close if this is the wrong place. Sorry.. Awesome, thanks for the help! :) . ",
    "adjenks": "Glad I could help!. ",
    "fix-me": "Sure, and thanks for your fast reply - I didn't expect it \ud83d\udc4d \nI will even share my codebase, so you may doublecheck it.\nhttps://github.com/fix-me/swagger-library-test\nOne thing is strange, because when I ran the start script for the first time I got a different error.\nAs far as I can remember it was something with one of those big arrays as gbChars etc.\nFirst I will attach the console output, then the debug log file:\nconsole\n```\nC:\\test\\swagger-library-test>npm start\n\nswagger-library-test@1.0.0 start C:\\test\\swagger-library-test\nrollup -c -w\nrollup v0.64.1\nbundles src/index.js \u2192 dist\\index.js, dist\\index.es.js...\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'buffer' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\buffer\\index.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'buffer' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\buffer\\index.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'buffer' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\buffer\\index.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'buffer' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\buffer\\index.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'buffer' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\buffer\\index.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'url' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\url\\url.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'util' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\util\\util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'util' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\util\\util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'util' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\util\\util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'util' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\util\\util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'util' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\util\\util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'util' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\util\\util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'util' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\util\\util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'util' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\util\\util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'util' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\util\\util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'util' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\util\\util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\npreferring built-in module 'util' over local alternative at 'C:\\test\\swagger-library-test\\node_modules\\util\\util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning\n[!] Error: Unexpected token\nnode_modules\\mime-db\\db.json (2:40)\n1: {\n2:   \"application/1d-interleaved-parityfec\": {\n                                           ^\n3:     \"source\": \"iana\"\n4:   },\n\n1\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! swagger-library-test@1.0.0 start: rollup -c -w\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the swagger-library-test@1.0.0 start script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n```\ndebug-log\n``\n0 info it worked if it ends with ok\n1 verbose cli [ 'C:\\\\Program Files\\\\nodejs\\\\node.exe',\n1 verbose cli   'C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js',\n1 verbose cli   'start' ]\n2 info using npm@6.4.1\n3 info using node@v8.12.0\n4 verbose run-script [ 'prestart', 'start', 'poststart' ]\n5 info lifecycle swagger-library-test@1.0.0~prestart: swagger-library-test@1.0.0\n6 info lifecycle swagger-library-test@1.0.0~start: swagger-library-test@1.0.0\n7 verbose lifecycle swagger-library-test@1.0.0~start: unsafe-perm in lifecycle true\n8 verbose lifecycle swagger-library-test@1.0.0~start: PATH: [...]\n9 verbose lifecycle swagger-library-test@1.0.0~start: CWD: C:\\test\\swagger-library-test\n10 silly lifecycle swagger-library-test@1.0.0~start: Args: [ '/d /s /c', 'rollup -c -w' ]\n11 silly lifecycle swagger-library-test@1.0.0~start: Returned: code: 1  signal: null\n12 info lifecycle swagger-library-test@1.0.0~start: Failed to exec start script\n13 verbose stack Error: swagger-library-test@1.0.0 start:rollup -c -w13 verbose stack Exit status 1\n13 verbose stack     at EventEmitter.<anonymous> (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\npm-lifecycle\\index.js:301:16)\n13 verbose stack     at emitTwo (events.js:126:13)\n13 verbose stack     at EventEmitter.emit (events.js:214:7)\n13 verbose stack     at ChildProcess.<anonymous> (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\npm-lifecycle\\lib\\spawn.js:55:14)\n13 verbose stack     at emitTwo (events.js:126:13)\n13 verbose stack     at ChildProcess.emit (events.js:214:7)\n13 verbose stack     at maybeClose (internal/child_process.js:915:16)\n13 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:209:5)\n14 verbose pkgid swagger-library-test@1.0.0\n15 verbose cwd C:\\test\\swagger-library-test\n16 verbose Windows_NT 10.0.16299\n17 verbose argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"start\"\n18 verbose node v8.12.0\n19 verbose npm  v6.4.1\n20 error code ELIFECYCLE\n21 error errno 1\n22 error swagger-library-test@1.0.0 start:rollup -c -w`\n22 error Exit status 1\n23 error Failed at the swagger-library-test@1.0.0 start script.\n23 error This is probably not a problem with npm. There is likely additional logging output above.\n24 verbose exit [ 1, true ]\n```\nThe preferring built-in messages disappear when I set { preferBuiltins: false } in the resolve plugin.. ",
    "npalethorpe": "I managed to resolve this issue by doing a download of the project and including it as a local npm package. The only thing I had to change was that Package.json in the npm project had...\n\"main\": \"dist/index.js\" \nwhich I had to change to... \n\"main\": \"src/index.js\".. ",
    "marcosmartinez7": "Exactly the same problem, also with the assembleDebug. \nReact Native. 57.3\nAny ideas of why this could be happening? \nThe @npalethorpe solution does the trick. . ",
    "joh-klein": "with v3.8.22 the output is (and it still doesn't work):\njs\nfunction s(t){var n=this,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(\"string\"==typeof t?o.url=t:o=t,!(this instanceof s))return new s(o);(0,c.default)(this,o);var u=this.resolve().then(function(){return n.disableInterfaces||(0,c.default)(n,s.makeApisTagOperation(n)),n});return u.client=this,u}\nAnd the working output (thx to @npalethorpe):\njs\nfunction I(t){var s=this,l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(\\'string\\'==typeof t?l.url=t:l=t,!(this instanceof I))return new I(l);(0,u.default)(this,l);var o=this.resolve().then(function(){return s.disableInterfaces||(0,u.default)(s,I.makeApisTagOperation(s)),s});return o.client=this,o}\nLooking at it closely the only difference seems to be \"string\" vs \\'string\\'. What I did to get my react-native project to work again: I took the un-minified output from npm run build:umd:dev and replaced everything in dist/index.js with it. This can be done with https://www.npmjs.com/package/patch-package in an orderly fashion and without to much hassle in a CI/CD workflow.\nI also tried to upgrade swagger-client to webpack 4. It looked promising, but I didn't have the time to continue investigating.. ",
    "shortcarver": "FWIW, I started working back through the versions, and this appears to have been introduced in v3.6.0. \nv3.5.2 works for me.. ",
    "simoami": "FYI, this issue is with node-fetch. The native fetch behaves fine as it doesn't join header arrays.. ",
    "DavidTanner": "Which is great for OpenAPI, but doesn't work for my company.  So the only alternative for this then would be to use another tool to make the callout.  Can this be optional?. ",
    "lucidtech": "@shockey sorry... yes - I am referring to asCurl. ",
    "extramuros": "So, I looking for this error and have found, that this is not the \"swagger-js\" deal, but \"fetch\".. ",
    "bestmike007": "@shockey how about adding typescript definition for this module? I wonder if there's someone already working on this.. I think there are two ways of doing this:\n\nAdd a TS definition file: need more work to ensure it's consistent with what's exported, and additional tests for that\nTranslate the code into typescript: generated definitions from code, one source of truth, but everything will be changed\n\nI prefer the latter option if it's okay with the team and planned in a new release.. Swagger client uses fetch (or cross-fetch/polyfill) as the default client to load doc from url; it does not support file url (data url neither).\nHowever, you can use a temporary server in your scenario:\nhttps://gist.github.com/bestmike007/a63ea5b21a24fdd34508164a85dc1e4b. ",
    "vvanpo": "@sandeep-paliwal It looks like you need to use the requestInterceptor property. Take a look at https://github.com/swagger-api/swagger-js/blob/master/docs/MIGRATION_2_X.md#default-content-type-values for an example of passing a header value.. @shockey can you comment on why the tags interface does not set a Content-Type header when the output is clearly going to be JSON?\nhttps://github.com/swagger-api/swagger-js/blob/master/src/execute/index.js#L82\nHere you can see that the client is explicitly outputting JSON, but does not touch any headers. So it is up to the consumer to set up a requestInterceptor. But you can't easily chain interceptors without some kind of abstraction, so complex applications that need to modify the request in multiple places get messy real quick.\nThe link from my last comment implies this behaviour used to be different, why was it changed?. ",
    "ohemelaar": "From my first analysis, using the bearerFormat field seems to be a simple implementation, in src/execute/oas3/build-request.js around line 157.\njs\ntokenFormat = schema.bearerFormat ? schema.bearerFormat : 'Bearer'\nresult.headers.Authorization = `${tokenFormat} ${value}`\nI can't test that right now though.. I found a workaround using a requestInterceptor:\njs\nSwagger(\"<url>\", {\n  requestInterceptor: req => {\n    if (!req.loadSpec) {\n      req.headers['Authorization'] = 'JWT ' + token\n    }\n  }\n}. ",
    "nmaoez": "The problem with the interceptors is, that those are only accessable at the time when I initialize the swagger client. But I want to load the specification and generate the client only once and reuse it though out the whole project. And if my server throws an error with a detailed error message, it would be wonderful if I could access the response body.\nSo is there a chance to access the error response or is there a way to access the interceptors after the promise was rejected?\nEDIT: For anybody who also encountered this problem, I got a solution. It is not the best but it works...\nIn our project we have got following structure (pseudo):\ncontrollers.js\n```javascript\nimport Swagger from 'swagger-client';\nconst swaggerClient = Swagger('https://www.foo.com/specificationURL');\nexport default {\n    import: () => swaggerClient.then(client => client.apis[\"import-controller\"]),\n    ...\n};\n```\nIn this module we just load the specification once and export an object with all available controllers.\nimport-controller.js\n```javascript\nimport Controllers from './controllers';\nexport default {\n    importFile: (file, interceptors) => Controllers.import().then(res => res.importFromZip({\n            file: file\n        }, interceptors))\n};\n``\nThis module defines one specified controller and imports the previous shown object. Based on the specification you could have more of those. Our frontend is build with Vue.js. Now if I invoke the functionimportFilein theimport-controller` in a Vue component, I have to provide an object with an interceptor. The idea is to get access to the interceptor on the level of the Vue component, since the component is the one who will show an error message to the user. So the component needs all information from the server.\nDummy.vue\n```html\n...\n\nimport importController from 'path/to/import-controller';</p>\n<p>export default {\n  data() {\n    return {\n      selectedFile: null\n    };\n  },\n  methods: {\n    importUserFile() {\n      let responseData = null;\n      importController.importFile(this.selectedFile, {\n            responseInterceptor: res =&gt; {\n                responseData = res;\n            }\n        })\n        .then(() =&gt; {\n          console.log('Success');\n        })\n        .catch(() =&gt; {\n          console.log(responseData.obj);\n        })\n    }\n  }\n}\n\n```\nIf the backend throws an error, it would be good to get the details of the response directly on the highest layer. Why don't you deserialize the response directly (like in resolved promises)?\nI hope this example helps!\nCheers\n. ",
    "kguelzau": "why did you close this issue?. ",
    "abierbaum": "All this class does is hold the metadata about the endpoint (path, description) and group the operations that come from this endpoint.\n. Not sure if the operations object/map is needed, but added it to be consistent with the other classes in the API.\n. I needed a way to get the operations that were added for a specific call to addOperations, so I added a return value.\n. We now call addEndpoint so we can create the endpoint object and add the operations to it.\n. ",
    "gwicke": "It does the same thing as the old code, but not the same thing as\njavascript\nencodeURIComponent(pathParam);\n. @mohsen1, according to the URI template spec:\n- slashes need to be encoded for {foo} (the only variant supported in Swagger 2.0), and\n- slashes don't need to be encoded for {+foo}.\nSo both can be supported easily and within the same URL once the spec gains support for level 2 URI templating.\n. ",
    "louisburton": "This test doesn't actually cover the fixed functionality. It does cover file upload when FormData is not present, but I need a browser or some kind of mock if wanting to check the FormData flow without this.. "
}