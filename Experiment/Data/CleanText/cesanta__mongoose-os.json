{
    "mkmik": "@cpq, I'm going to TBR this since the export script depends on the seed commit to be there in order to test it.\nWe can add README and other stuff as usual\n. Review status: :shipit: all files reviewed, all discussions resolved, all commit checks successful.\nReviewed files:\n- .clang-format @ r1\n\nComments from the review on Reviewable.io\n Sent from Reviewable.io \n. Hi, we're working on a port of the smart.js platform to posix environments. In the meantime if you want to run the bare JS interpreter that lies at the heart of smart.js, check out https://github.com/cesanta/v7 \nIt can be used either as a C library or as a standalone binary on unices and windows.\n. We do have a currently very basic support for setTimeout. It doesn't yet support timer cancellation and on the ESP8266 platform only one timer can be be used at a time (calling setTimeout again will reset the previously set timer).\nWe'll definitely allow concurrent timers soon, and very likely also implement cancellation support and setInterval as well.\nThe ADC interface is still TODO.\n. Simple ADC API implemented.\nIt currently works only on ESP8266, which has only one ADC. Usage:\njs\nADC.read(0)\nreturns a JS number in the [0.0, 1.0] range.\nI tried it only by connecting to ground and VCC. I got .0029296875 and 1.0 respectively\nEach device might have to be calibrated. We are just issuing a call the the ESP8266 SDK which offers a very basic interface to the ADC.\n. The image in the docker hub repo has a quite old SDK and it's not compatible with latest smartjs. \nThanks for reporting, I'll take a look\n. which version of docker do you use?\n. Issue caused by https://github.com/docker/docker/issues/15640 affecting https://github.com/cesanta/docker_auth/issues/22\nIn the meantime I synced the image to cesanta/esp8266-build-oss:1.3.0-cesanta\n. Could you please enable debug output with Mode.debug(1) and send the whole output here?\n. Our documentation is probably misleading.\nWifi.changed(cb) - invokes cb whenever the connection status changes:\n0: connected\n1: disconnected\n2: authmode changed\n3: got ip\n4: client connected to ap\n5: client disconnected from ap\n\"Client connect to ap\" is received when another host connects to the ESP when it's in Access Point mode (or the hybrid stationAP mode).\nYou are interested to the \"3: got ip\" event, which signals that the ESP itself not only connected to the API but also received a DHCP response with an IP address. This happens after \"0: connected\" which is received when the ESP connects to an access point.\nI guess we can improve the doc. In the master branch we refactored the event codes here in order to make the WiFi API cross platform.\n. @ybouhjira, did I address your issue ?\nDoes it work otherwise?\n. Hi @necrodome \n1. the \"http://96.126.98.124\" version doesn't work because we didn't implement a literal IP address parser. It will work once we manage to port mongoose to ESP (currently blocked on a few SDK issues). DNS names seemed enough for a quick proof of concept, but I guess I could just add it.\n2. I just checked and http://jsonip.com it works for me. Can you ping your esp? (You can see your local ip with Wifi.ip()). If you connect on the same wifi, what DNS server does your computer get?\n. FYI http://xip.io/\n. Not from JS currently.\nYou'd have to invoke espconn_dns_setserver (Espressif SDK) in the C code and rebuild the firmware.\nI think it might make sense to expose it via JS.\n. Hm, ESP doc states:\nOnly if ESP8266 DHCP client is disabled (wifi_station_dhcpc_stop), this API\ncan be used\nSo yes, it would be possible but it comes with a price.\nOur goal is to integrate mongoose (github.com/cesanta/mongoose) for async networking IO. It includes an async DNS resolver so we would have more freedom setting the DNS.\n. No ETA; ESP mongoose integration is blocked on technical issues.\nFor now we just try to do our best to make it useful with reduced functionality. Custom DNS servers are not top priority at the moment.\nOther supported platforms (e.g. TI  CC3200) already use mongoose for networking.\nYou might also want to try the \"posix\" port and run it on your laptop.\n. @maxogden by any chance, did you try to docker login docker.cesanta.com:5000 ?\nCould you try to run?\nsh\ngrep docker.cesanta.com ~/.docker/config.json ~/.dockercfg\n. OSS build works, RTOS still broken:\nmake: *** No rule to make target `mongoose.c', needed by `build/mongoose.o'.  Stop.\n. The file defining Cloud is not loaded by default. \nSee https://github.com/cesanta/smart.js/blob/master/src/js/user.js#L3\n. You need Qt 5. Install your distributions Qt 5 development libraries or see http://doc.qt.io/qt-5/linux.html\nThen:\n$ qmake\n$ make\nI'll update the README\n. CC @gelraen \n. @fedy2 I don't know what is the root cause in your situation, but let's start by disabling the merge FS feature and get your device working:\nInvoke flash'n'chips from cmdline and pass --overwrite-flash-fs --gui params\nNot sure if --gui is necessary on windows, I have a vague memory of windows apps having to be either console or gui (defined at link time). @gelraen knows more about it.\n. Does it work now without the overwrite fs and/or flash params options?\n. This is the output of esp SDK spat out at a baudrate that many TTL uart adapters do not support, hence we decided to default to 115200 baud.\nWe currently do not know how to inhibit the output so early at boot. There might be something output by the rom itself.\n. Thank you, we broke the dashboard visualisation. \nCould you check if you an see your raw data on https://dashboard.cesanta.com/#/db by executing this query:\n{src=~\".*\"}\n?\n. @fedy2, we currently have a bug with multiple tabs/windows. Could you see if you have the same problem when you have only one tab/window open on dashboard.cesanta.com ?\n. ok, we fixed that, unrelated, bug anyway\n. Please turn on debug logs with Debug.mode(1) and try again\n. we have version variable\n. fixed in 0a339a93e061a2ab60685b67e535b0f006254f3f\n. are you on windows?\n. Please run:\n$ docker images | grep eabihf-arm-build\n. yeah, our script it bad and we should feel bad\n. make should just work. The reason it doesn't is the same as #33.\nIf make would just work out of the box, would you feel it still needs more documentation?\n. please pull and retry\n. Thanks for reporting!\n. @cpq, reproduced on my account as well.\n. Fixed in 76d5ca33e3fbd6a552d816f2a45d1e7779c73e31\n. Merged as 76d5ca33e3fbd6a552d816f2a45d1e7779c73e31\n. Hi,\nCurrently Smart.js has a Websocket client. However it's not hard to implement a websocket server.\nIt's not clear to me what to do you want exactly. Your code snippet is a html + javascript snippet.\nI assume you want to host that HTML on a device running Smart.js, open it on a browser and have your JS code on the user's browser communicate with some code (C or JS?) running on the embedded device. Is that correct?\n. yes, what you want is a WebSocket client running on your ESP device with Smart.js.\nSmart.js does that. You can run JavaScript code on your ESP device. It's practically the same code you'd run on your browser, except the HTML part.\nThings like <script type=\"text/javascript\"> are HTML and do not make sense in this context.\nThey would make sense only if we were talking about files stored on the ESP device and make it act as a HTTP server; but in that case this is not the JavaScript code that would be running on the device.\nDoes it make sense?\n\n@pastukhov would you mind creating a new issue for tracking your feature request that seems to me unrelated to this ticket ?\n. you need to build the firmware with ./make.sh RTOS to enable the WebSocket API.\nThis SDK is currently less stable than the default (OSS).\n. We currently do support Websocket client API, in both C and JS\nWe support only Websocket server API in C.\nThe <script type=\"text/javascript\"> is part of the HTML page that is served by the server (www.myserver.com in the picture), so it has nothing to do with our FW.\nClosing\n. the demo should not crash even if Wifi is not connected\n. some context first: espressif ships 2 SDK: OSS and RTOS.\nWe recently switched our default build to use the RTOS SDK, but we now switched back because of regressions like this.\nPlease pull and rebuild your firmware (./make.sh clean required) and try it again.\n. yeah, we struggle keeping the doc up to date.\nThe http server has been moved to examples/http_eval/\nWe're in progress of rewriting that http server with Mongoose, now that we finally can use the ESP RTOS SDK (and hence BSD socket API)\n. doc fixed, stay tuned\n. @santiago: the mac address is available in the Sys.ro_vars.mac_address constant.\n. Wifi.disconnect() is implemented. Connect-at-boot setting is controlled by Sys.wifi.sta.enable conf var (see configuration UI server at http://192.168.4.1).\n@alashkin: my understanding is that when the wifi not actively used the actual wifi circuitry is off; i.e. after Wifi.disconnect() (or after booting when the wifi.sta.enable conf is false) the wifi is off and not drawing power. Is that correct ?\n. Yeah it would be nice. In the meantime please run the bin/smartjs command through rlwrap\n. hey badger, we already have a badge!\n. We aim at implementing a reasonable subset of the ecmascript standard.\nThus we have:\n- new Date().getTime()\n- and setTimeout()\nUnfortunately we didn't yet document which parts of it are implemented and which not, mostly because we are still in alpha and hopefully we could just defer to sources as MDN for reference documentation of the JS standard library. \nWe did however document our C<->JS API and any non standard JS API.\nAnyway, I guess it would make sense to extract the list of supported functions from our sources somehow.\n. Unfortunately that one is not in yet, but it should be.\n. HTTPS is not yet supported, but we are working on it. When it will be, the https:// prefix will be enough to specify SSL.\n. Yeah in the alpha version we didn't manage to squeeze the SSL library because of heap space and other SDK issues. It's a ESP8266 specific issue. The POSIX (raspberry pi, Galileo, etc) port has SSL support.\nWe obviously do indend to address the security of communication in the end product.\n. I couldn't agree more.\nI'd even say more, releasing a half baked encryption is worse than releasing none. \nFeel free to preview the other pieces of our platform and the other ports where SSL is available, keeping in mind try that this is literally an alpha release. Your feedback would be appreciated.\n. This regression was introduced with the StackTrace feature. Please disable it\n. ok thanks for the report, we'll take a look\n. closed because it works?\n. sure, but you have to manually increase the limit in the linker script in:\nsmartjs/platforms/esp8266/user/eagle.app.30000.v6.ld\nyou also have to tweak the FS location (FW_FS_ADDR param in smartjs/platforms/esp8266)\nFeel free to contribute a better tooling to make this easier.\n. Yeah, we should improve the makefile. The instrumentation is useful to catch stack overflows\n. this is one major cause of slowdown. not sure though if this addresses the original issue. @danyocom would you like to try it?\n. yeah alpha 2.1 has some toy http client. Current master has full featured nodejs' style Http.request that uses mongoose under the hood and supports the full uri syntax.\n. Sorry, we didn't yet provide a JS interface for the underlying mongoose MQTT protocol. Keeping this issue open until we do.\n. Yes, stay tuned\n. MQTT interface exposed to JS (944253002a8d67ec0485d497178d83c27c57382f and 070cc6524330886d25aaf9effc4bd73278549d02)\nThe documentation is available at: https://www.cesanta.com/developer/smartjs#_mqtt\nYou can also fetch a prebuilt fw bundle at: https://backend.cesanta.com/devel/smartjs-esp8266-last.zip\n. using mqtts:// will cause SJS to enable SSL on the underlying Mongoose connection.\n@snsekar, on which platform are you using smartjs ?\n@rojer, what else is necessary to properly setup SSL support on esp8266 ?\n. ok, that part should be easy to fix\n. @snsekar done, please take a look.\nkeep in mind that the device doesn't have enough space to store the full CA bundle and thus it's not easy to just automatically verify every possible server certificate. We have the ability to upload a CA file specific to the server(s) you want to contact (either via https or mqtts or other protocols) but currently we enable this only for the websocket connection to our servers and we didn't yet offer a way to specify a CA file for user defined connections. It's something we obviously want to complete; stay tuned.\n. yes sure, if building a custom FW is an option for you, you can do it easily as you described.\nWhat we want to do is to refactor this in order for people to easily use the stock SJS FW.\n. does the device crash or does it just stop working?\n. could you please paste the code you're using?\n. Hm, I'd like to figure out whether you're is a JS problem or a Mongoose MQTT proble.\nDo you watch the console output on the uart?\nCould you please enable verbose logging ?\njs\nSys.conf.debug.stdout_uart=1;\nSys.conf.save();\nand possibly also:\njs\nSys.conf.debug.level = 4;\nSys.conf.save();\n(note, this will produce a lot of logs, please capture the console output in a log file with MFT)\n\nBTW, an easier way to start some code when the wifi is ready is:\n``` js\nWifi.ready(ConnectMQTT);\nfunction ConnectMQTT()\n{\n......\n```\n. yeah, sorry it's:\nSys.conf.debug.stdout_uart=0;\nSys.conf.debug.stderr_uart=0;\nWhat tool do you use to flash the fw?\n. ok, MFT is just the new name of the tool. In Flash'n'chip you have settings menu where you can set the console log file.\n. Here is a highlight of what happens:\n```\nmg_mgr_poll          end poll @100942, 4 conns, 2 timers (min 101905), next in 964 ms\nmg_lwip_tcp_recv_cb  0x3fff3de4 0x3fff4074 26 0\nmg_recv_common       0x3fff3de4 26 26\nmg_call              0x3fff3de4 proto ev=3 ev_data=0x3ffffe90 flags=0 rmbl=52 smbl=0\nmg_if_recved         0x3fff3de4 0x3fff4074 26\nmg_call              0x3fff3de4 after proto flags=0 rmbl=26 smbl=0\n^^^ a receive happened on mongoose connection 0x3fff3de4\ngot 1475824041719\n^^^ your callback\nmg_lwip_tcp_recv_cb  0x3fff3de4 0x3fff4074 0 0\nmg_close_conn        0x3fff3de4 2048\nmg_call              0x3fff3de4 proto ev=5 ev_data=0x0 flags=2048 rmbl=26 smbl=0\nmg_call              0x3fff3de4 after proto flags=2048 rmbl=26 smbl=0\nmg_if_destroy_conn   0x3fff3de4 tcp_close 0x3fff4074\n^^^ the 0x3fff4074 got closed after receiving a packet (was it a FIN packet?)\n```\nI suggest you add the .on('error', ...) and .on('close', ...) callback handlers.\n. This is fixed in the latest SJS release, sorry for not updating this issue once fixed.\n. @nkolban reproduced, we're looking at it\n. Hi,\nDoes it also fail with default baud rates?\n. Workaround:\nYou need to install they Qt5.5 backport available at https://launchpad.net/~hedges/+archive/ubuntu/qt5.5\n$ apt-get install qt55declarative qt55serialport libgl1-mesa-dev libftdi-dev\n$ export PATH=/opt/qt55/bin:$PATH\n. Since 32fc09a07268283f0ca99cf982502038be725d69 FlashNChips can build with Qt 5.2.\n. @eallik if you still have any problems with your NodeMCU not being detected, would you mind opening another issue ?\n. The readme actually mentions it:\n\u2018\u2018\u2018\nFor those who want to build/customize the firmware, make sure you have docker installed and running\n\u2018\u2018\u2018\nA link to some install doc at the docker website wouldn't hurt though\n. sounds like spiffs corruption. Could you dump the content of the FS image with esptool.py read_flash and share it with us ?\nThe address of the FS depends on your build version, look in your firmware dir, it's the higher hex number\n. yeah, it makes sense. I'll add it to the default startup script.\nFYI: you can print the current version by just typing version at the prompt (it's a global variable)\nor to your custom user.js startup script.\n. It reminds me of a problem with our mmap implementation that failed when spiffs triggered a GC on the flash.\nWe fixed it in db58c92f5aba16a1f5f23a21986953cd5c6af274\nThe beta release was before that fix :-(\nPlease try HEAD or download the developer snapshots (links available at https://github.com/cesanta/smart.js)\n. Some context:\nSome system functionality is implemented in JS. In order to save ram we want to execute the code right off the flash. But we didn't want to tie our V7 interpreter on specifics of a single port. The V7 interpreter has support for memory mapping a precompiled file and executing from that memory area.\nWe implemented a simple shim for mmap for esp8266, but in order to make it perform reasonably we had to bypass the spiffs layer and read straight from flash. However spiffs can relocate the filesystem blocks potentially at every write, so we had to hook into spiffs and fixup the mapping between file content and flash location when it changes.\n. yes, this has been fixed in the development head. Could you please try out the development snapshots ? You can find a link on the https://github.com/cesanta/smart.js main page.\n. fixed\n. Hi Neil,\nThe user should just pull the most recent master\nOn Tue, Nov 24, 2015 at 2:46 AM Neil Kolban notifications@github.com\nwrote:\n\nFrom the perspective of a user who had this problem before it was fixed\n... what should he do to take advantage of the fix?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cesanta/smart.js/issues/78#issuecomment-159125179.\n. since we finally can keep strings on flash, now it's possible to avoid wasting ram for the hundreds of bytes needed for all the constants and use them again.\n. Added Debug.OFF, Debug.OUT, Debug.ERR\n\n@dimonomid, would you please make sure that we also add some constants to GPIO ?\n. Hi @nkolban. The WebSocket client is already exported. It uses the standard WebSocket API (see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket).\nNote to self: document it!\nWe currently have no WebSocket server support; we just didn't figure out yet what is the best API, but it shouldn't be hard to implement. For other APIs we could easily pick a standard or at least the de facto standard. For WebSocket servers there seems to be many competing APIs.\n. for the record, WebSocket Client API is now documented, changing the title to be more explicit about WebSocket server.\n. Yeah, devices will often be behind NAT anyway, and also they might be offline (e.g. sleeping). It generally makes more sense for the devices to be clients and connect to some server or some gateway.\nThat said, Mongoose IoT doesn't only support ESP8266. Other than the small embedded platforms, Mongoose IoT can work on any posix system. You can also run the same software stack on one of such gateways (e.g. a router, a RPI, etc). Thus, the feature request is reasonable, but it's currently low priority for us.\n. the script already handled that but it has been broken by a makefile refactoring.\n. @alashkin reproduced with HEAD\n. @alashkin sj_mongoose_websocket just passes the raw arg to mongoose low level tcp connect.\nIt should use http connect\n. Hi @snsekar,\nThe latest master branch has working websocket support. Could you please try it out?\n. The latest binary build is available at https://github.com/cesanta/smart.js under the Current development Smart.js firmware builds bullet.\nThis issue has been fixed. Feel free to reopen if you have any problems.\n. hi, which version of the fw are you running?\nBTW, it's better to use Wifi.ready instead of Wifi.changed. You can configure WiFi with the web configuration UI. \nWifi.ready will invoke the callback immediately if the WiFi is already connected. This avoids a race condition\n. Yes we temporarily dropped support for 512kb flash. You can change the FS size in the makefile and make it fit.\nWe default to a bigger FS because our main use case is to actually put stuff on the filesystem, such as our configuration web ui html, and some JS file implementing smartjs functionality. \nYou can fiddle a bit with the makefile and remove the features you don't need.\nWe also focus mostly on OTA, which requires bigger flashes anyway.\n. Hi,\nStock Smartjs beta2 requires devices with bigger flashes such as esp12.  If you want to flash it on esp01 you need to build a fw with a smaller flash filesystem. In order to do so you have to change the FS size parameter in the eap8266 platform makefile.\n. Hi,\nWe changed OS to Sys a while ago. It's unrelated to the recent internal adep.h change.\nAs for the crash, it would be great if you could attach the coredump and the exact firmware image you are using. The coredump can be obtained by changing the debug output to uart0 either via the web configuration ui or by invoking Debug.mode(1) at the prompt.\n. Hi,\nyeah, I'm sorry, this is a known memory leak which is still present in the Beta2 but solved after it.\nYou can grab the developer build from https://backend.cesanta.com/devel/smartjs-esp8266-last.zip\n\nFor the record, a workaround to make it work with the Beta2 release.\n you don't need this hack with later builds:\njs\nfunction blink(pin) {\n  var pin = pin || 0;\n  function tick() {\n    var level = GPIO.read(pin);\n    GPIO.setmode(pin, 0, 0);\n    GPIO.write(pin, !level);\n    console.log(GC.stat()); // added after crashing to test stats\n    setTimeout(tick, 500);\n  }\n  tick();\n}\n. Thank you!\n. Could it be flash parameters? We never tried it with a 1MB flash. Do you know which flash chip it is?\n. We test mostly on esp12-E (which includes the nodemcu v1 (aka v2) board).\nThe nodemcu board is very handy for prototyping; it includes the usb<->tty uart with the right wiring for easy flashing. \nFor production we focus on esp12-E.\nBoth have 4MB flash chips.\nWe focus on 4MB chips because it allows to perform OTA updates which are a very important feature.\nThat said, we'd like to make it work on the 1MB flash ESP-01 as well.\nWhich firmware version are you using ? How are you flashing it, with esptool.py or with FnC ?\nCan you try this firmware: https://backend.cesanta.com/devel/smartjs-esp8266-last.zip\nAnd try to flash it with https://github.com/cesanta/fnc/releases/latest ?\n. For the record, slightly off topic, but perhaps useful to put previous comment in context:\nOur build should work with 1MB flash size. There should be no reason for it to not work if it fits.\nWe need 4MB for OTA because \n1. we need > 512k for the FW+FS and we need room for at least two version of the FW at the same time 2. even if it fits in <1M, due to the way OTA works, we need to put the version in 1MB windows in the memory mapped address space, i.e. each FW version must use a 1MB section.\n. @alashkin, I have a vague memory that we had a similar problem before autodetecting the flash type from the flash ID. What would the right flash params be in this case?\n. @olterion, could you please try to pass 0220 as esp8266-flash-params flag to FnC ?\nYou can set flags from gui as well, under the Advanced settings menu.\nIIRC, the first byte is flash mode 0x2 -> DIO, while the second encodes the flash size.\n00 -> 4Mb == 512 KB\n20 -> 8Mb == 1MB\n30 -> 16Mb == 2MB\n40 -> 32Mb == 4MB\nIf it doesn't work, please try other combinations such as 0020.\nCould you also please run the esptool.py flash_id tool and paste the output? This way we could add this flash type to our autodetection database.\n. That's because smartjs boots with a webserver on port 80, please use another port.\nSorry, we'll update the doc and show how to disable the embedded web conf web server.\n. Hi,\nlookup docker.cesanta.com on 192.168.1.1:53: read udp 10.0.2.15:54842->192.168.1.1:53: i/o timeout\nthis looks like a DNS problem on your side. Are you using docker-machine on osx ? If, yes try to restart the VM.\n. thanks for reporting this; actually it's the other way around, port was the old name and has been renamed to listen_addr but we forgot to update the schema. Fixing\n. It looks like an out of memory. Relevant log:\nE:M 3070 (385 blocks)\nE:M 3069 (385 blocks)\nE:M 3070 (385 blocks)\nThis is an out of memory condition, followed by a heap corruption likely caused by a mismanaged handling of the out of memory condition. \nThere is hope though :-) \nDo you precompile the JS with v7 -c o smartjs -c (the smartjs posix port) ?\nDoing so will allow Smart.js to keep most of code and read-only data on the flash filesystem.\nIf not, keep in mind that the device has about 30KB of free heap and you're trying to parse and load in memory a file whose bytecode is about 15KB, including strings etc. Please give precompilation a try.\nIn order to pre-compile, build https://github.com/cesanta/v7 or just use the v7 binary in smartjs/platforms/esp8266/build/v7. \nFurthermore we currently have a lot of leeway for optimizations, for example we currently grow the string heap with realloc which is suboptimal to say the least (having a contiguous heap does simplify the compacting collector though).\n. the output of v7 -c  outputs a binary bytecode file, and File.eval() will detect the format and run it regardless of the extension; feel free to use the .js extension or .jsc if you prefer. \nSystem .js files shipped in the FW filesystem such as sys_init.js are actually precompiled binary files.\n. One-liner to reproduce it:\njs\nfunction tick() { print(\"tick\"); setTimeout(tick, 100); }; tick();\nIt's a bug and will be fixed. \nsetInterval works though\n\nConfirmed regression of 9b08114c776d3ea61104da5286dd46bc95993334.\nAdditional info:\njs\nfunction tick() { print(\"tick\"); setTimeout(tick, 100); }; tick();\nsetInterval(function() { print(\".\") }, 100); // this will cause `tick` to be also printed out every 100ms\n. Fixed\n. Do you know whether there are enough guarantees that those IDs are actually unique ?\nIn alternative, you could bake in a unique identifier while flashing the FW with your app.\n. I don't see any reason why not to expose this API. I was just wondering if anybody had had any direct experience or accounts of any clashes due to operational issues in the fabrication process.\n. The mac address can be changed by software, but that will likely happen after our Sys.ro_vars.mac_address gets initialized, so at this moment Sys.ro_vars.mac_address is for all intents and purposes immutable and offers the same uniqueness guarantees as the chip ID (given its contained in it).\nSo, I guess the problem boils down to: what if you choose the way you report the mac address?\nMy take on this is that Sys.ro_vars should expose something that can be changed at runtime; if we every expose an API to change the MAC address, we'll also expose an API to retrieve that soft MAC address and leave the factory mac address in Sys.ro_vars.\n@lukevenediger: would it be ok for you to use the Sys.ro.mac_address as unique identifier given the guarantee that it will always contain the factory mac address and not the interface (soft) mac address?\n. If the situation changes we can always add reopen this topic when a good use case arises.\nTo summarize: current rationale for keeping Sys.ro_vars.mac_address as source of unique identifier:\n1. Smartjs is multiplatform. Not all chips have unique identifiers. All networked platforms have a mac address (well, technically not all; you don't need a mac address for transports such as SLIP)\n2. we care about simplicity and we prefer smaller APIs wherever possible\n3. Sys.ro_vars.mac_address is meant to capture the hw mac address that identifies this device as opposed to provide access to the current mac address of a given interface. A device (e.g. a gateway device) could have multiple interfaces; this variable is useless to determine mac addresses in the context of networking; it's useful by definition only to provide a source of unique identity.\n. it looks like a bug; there is a second optional parameter and we likely check its presence while we shouldn't.\n. fixed in 78840c44c84dc1e0a7e9e15d20a7521b70624dee\n. the examples in the doc are out of sync (fixing), the method name is setMode\nThe GPIO API doc for the latest git HEAD is: \nhttps://docs.cesanta.com/smartjs/dev/#/javascript-api/gpio/\n. the diff you are showing is actually a bug fix (3baeeda95e75549be01c324a735ba4289fb8bc7b).\nthat implemented the documented behaviour, see /* swallow exception and return undefined */ above.\nThat commit actually fixes this very bug. The full root causes were:\n1. our stack traces contained unbalanced quotes. The conf.json contains an error_message key containing the last error for reporting reasons. (fixed in 24b7529550a76395174ff192291261b2f7dee0ec and 0f3154454b17d6400999614212acf74a43cc71bd)\n2. our File API is not throwing but it did throw\nI noticed this issue independently and thus unfortunately @dimonomid and I didn't update this issue; sorry.\n. we recently fixe an issue with saving config files that caused a crash loop also after saving wifi config.\nit might be related\n. I think low level protocol decoders should be written in C and offer an JS API, for example like we do for I2C and SPI\n. Try to build it with:\n1. STACK_GUARD=false\n2. GC_DEBUG=false\nThese checks are enabled by default but are quite expensive.\nAlso could you please compare print with console.log. (console.log has some overhead because it also allows you send logs to a server and queue logs on the flash when the connection is unavailable).\nAnother source of slowness is the current flash memory mapping.\nHow are you uploading that snippet of code ?\nAre you entering it from the prompt ?\n\nSampling with memorizing seems to be much worse:\nyeah, currently the array grows one slot at a time, and arrays are currently implemented in a very simple and unoptimized way. For every assign a new property will be allocated from the JS heap; furthermore array lookups are slow.\n\nWe have a few optimizations on our roadmap, but for now we're focusing on correctness\n. if the 1k you alloc is a 1k JS string then you might also have struck another issue which the fact that all of our strings live in a contiguous buffer that is reallocated when it needs to be grown. This requires a contiguous chunk for the old_string_arena+1k bytes. We'd like to improve this obviously. \nAs we're juggling with priorities, we'd really like to know more about your use case. Could you share some more details ?\nFor example, we're considering whether we need to introduce something like node.js Buffer object or ES6 TypedArray in order to manage binary data; in order to do so we'd like to know more about what kind of real world problems our users are facing and what kind of code they are writing.\n. @carterw please set console.send_to_cloud to false. even if the we don't connect to the cloud endpoint, console.log still buffers all messages (so that you'll be able to see them in the cloud interactive console). While the messages are buffered on the flash FS, this functionality does put some pressure on the RAM, so perhaps you'd better disable it.\nAs you said, if you cannot use this cloud functionality, there is not much point to it. Would you like to be an early tester of our new cloud platform ?\n. well, that's not a released firmware yet.\nI understand that it would be nice to have a nightly build. We're going to cut the next release very soon anyway.\nWhat OS do you run? Let's see if we can quickly make a build for you.\n. @carterw here it is: https://backend.cesanta.com/devel/FNC-win.zip\ncurrently there is an issue with the Qt library we link on windows so you it won't be able to download the firmwares via https. However, you're use case is to flash custom firmwares, so it should be enough.\n. could you please try to see if the latest FNC build works for you ?\nyou can run it with the --advanced flag to get the good old console UI if you don't like the new wizard.\n. Could you please try https://mongoose-iot.com/profile/api// ?\nHow did you get the https://mongoose-iot.com/profile/api/ link ? The nav bar points to the former.\n. yes the direct link is broken. \ncan you access the API page if you click directly on the API icon on the left navigation bar ?\n\n. ah, sorry; now it's clear; fixing\n. We converted that API to a configuration entry:\nSys.conf.wifi.ap.enable and Sys.conf.wifi.station.enable\nYou can configure it either manually (and save&reboot with: Sys.conf.save()) or via the configuration web server by pointing your browser to the device.\n. yeah, the documentation has plenty of room for improvement.\nFor now, this feature is mentioned in:\n1. mgiot config page is self-documenting. Each option is described in https://github.com/cesanta/mongoose-iot/blob/master/fw/src/fs/conf_sys_schema.json and the documentation rendered along the control\n2. We mention this config setting is mentioned in the bootstrap documentation at: https://docs.cesanta.com/mongoose-iot/master/#/firmware/boot.md/\n3. The Wifi API (at https://docs.cesanta.com/mongoose-iot/master/#/javascript-api/wifi.md/) doesn't mention that because there is no API to set it\n4. Config C API: https://docs.cesanta.com/mongoose-iot/master/#/c-api/config.md/\n5. Config JS API: missing ! :-( mentioned briefly in https://docs.cesanta.com/mongoose-iot/master/#/firmware/filesystem.md/\n. Hi, sorry we're somewhat busy on other fronts.\nw.r.t the memory saving:\n1. precompiling allows running code even if you build the VM with V7_NO_COMPILER, especially useful on small embedded platforms where the code has to be loaded on ram (e.g. cc3200)\n2. evaluating a precompiled JS file on esp8266 will mmap the file straight from flash. We have a simple mmap shim in software that emulates all memory reads in a given memory area and remaps them to mmapped flash memory reads in the SPIFFS filesystem (which divides the files in non contiguous blocks)\nWhen the code is evaluated some parts of it have to be loaded in memory (furthermore the mmapping layer requires a few bytes of overhead), so you might not notice a big difference in usage if your precompiled file is very small.\nAs for the JSBIN_EXTRA: our makefiles could be improved a lot....\nthe idea was that you put the js files inside your fw/src/fs dir, but I guess full pathnames should work as well.\nWe're working on a cmdline util that will help you build a firmware with less contortions.\n. Please let us know, if it doesn't show it's a regression and I'd really like to know about it :-)\n. v7 tests are in https://github.com/cesanta/v7/tree/master/tests\nwe have a bunch of v7 specific tests and we also run it against the official ECMA5 test suite.\nas for the mongoose-iot tests ... it's complicated: \nUnit tests would be hard given that the code depends on the device SDKs and the produced output has to run on those embedded devices. So what we have is an integration test suite, basically a set of end-to-end test that we run in our continuous integration system that is composed of a few embedded devices connected to a rpi3 host. We test networking (client and server), OTA, basic GPIO functionality. The test code on the device actually talks to other devices via the network and actually flips some GPIOs that the rpi host checks. We even have some SPI devices connected to the device under test. \nThe setup is highly customized and depends on a quite few things outside of this repostory and so we decided to not invest a lot of time to expose it and document it given that it would be hard for an external user to reproduce the same testing rig anyway.\nThere are a few things that we test only indirectly: for example if suddenly the mmapping code gets  butchered and precompilation doesn't work again, all of our device tests will fail given that the bulk of the testing code is written in JS and thus will OOM the device before the test could even start.\nThat said, we could get very unlucky and break precompilation in just the right way that it doesn't show up in our tests :-) That's why I'm curious about your comment :-)\n. could you please share the JS file you used as a test ?\n. yeah. the u in usleep stands for micro, from the greek letter \u03bc (Mu)\nThe API is modeled after a pretty standard UNIX function of the same name: http://linux.die.net/man/3/usleep\n. > Update - this experiment appears to have damaged my development board. \n\n@carterw do you have any updates on that; does you board still work ?\n. IIRC, deep sleep basically powers down the board while keeping the RTC on and configures the RTC to signal a pin when some amount of time passes. That pin should be connected to the device reset line. You should do the wiring yourself, otherwise dsleep basically just halts the device forever.\n\n@carterw does device just do nothing when you invoke dsleep()\n@alashkin can you please fill in the details? Can you please check whether dsleep (at least the C api) works as intended ?\n. http://russ.russmathis.com/esp8266-power-modes/\nRF_DEFAULT = 0,  //RF_CAL depends on init data from byte 108\n     RF_CAL = 1,  //RF_CAL enabled causes large current drain after wake 170mA\n     RF_NO_CAL = 2,  //RF_CAL disabled, small current drain after wake 75mA\n     RF_DISABLED = 4  //RF disabled, smallest current drain after wake 15mA\nYou might also want to consult the official doc from espressif at:\nhttp://www.espressif.com/sites/default/files/2a-esp8266-sdk_getting_started_guide_en_0.pdf\nlook for the system_deep_sleep_set_option API function documentation.\nBTW, we're starting to use ESP866 SDK 2.0 from today in master.\n. the watch dog timer kicked in.\nOn Sun, Aug 14, 2016, 21:53 Bill Carter notifications@github.com wrote:\n\nI cloned and flashed firmware today, presumably using ESP866 SDK 2.0, and\nall seems to be working as expected.\nI wired pin 16 to reset, and dsleep(10000000, 1) does cause the 8266 to\nwake up after 10 seconds. It appears to wake up as if it were reset, which\nis to be expected I guess.\nOn the other hand, usleep(10000000) causes a core dump on wakeup;\nsystem_restart_local WDT reset, info: exccause=4 epc1=0x40002ef1\nepc2=0x00000000 epc3=0x00000000 vaddr=0x4029d035 depc=0x00000000\nDumping core\n--- BEGIN CORE DUMP ---\n{\"arch\": \"ESP8266\", \"cause\": 100, \"REGS\": {\"addr\": 1073651444, \"data\":\n\"8S4AQLD6/\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/cesanta/mongoose-iot/issues/148#issuecomment-239693092,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AADNwfo2qXhPGRfaeQL-YFMi5cbpNMYdks5qf3IegaJpZM4JeU_S\n.\n. I tried to reproduce the issue with a simple and quick way to get a clean install of ubuntu 16.04:\n\n``` sh\n$ docker run -ti --rm ubuntu:16.04\napt-get update && apt-get install --yes build-essential git python python-git\ncd /tmp; git clone https://github.com/cesanta/mongoose-iot\ncd mongoose-iot\nmake -C fw/platforms/posix\nmake: Entering directory '/tmp/mongoose-iot/fw/platforms/posix'\n  MKDIR bin\n  MKDIR .build\n  GEN   .build/sys_config.c\n  GEN   .build/sys_ro_vars.c\n.....\n  CC    ../../src/sj_adc_js.c -> .build/sj_adc_js.o\n....\n  CC    .build/build_info.c -> .build/build_info.o\nLD bin/mongoose-iot\nMKFS fs\nmake: Leaving directory '/tmp/mongoose-iot/fw/platforms/posix'\n```\nSomehow the right headers defining the standard uint32_t aren't being loaded. \nIt doesn't look like a normal ubuntu 16.04 build. Are you using a cross-toolchain (do you have something in your CC env var) ? Is it possible that your headers might be corrupted ?\n. hmm, not sure how the pin can make a difference.\n``` c\nuint32_t sj_adc_read(int pin) {\n  (void) pin;\n  return 0xFFFF & system_adc_read();\n}\ndouble sj_adc_read_voltage(int pin) {\n  return sj_adc_read(pin) / 1024.0; / ESP8266 has a 10-bit ADC /\n}\n```\nthat's all what we do.\nPlease refer to the esp8266 and your actual board specs to see how this reading translates to the real world; IIRC some boards (nodemcu ?) provide a voltage divider resistor.\n. The easiest way to see the current flash layout is just to peek inside the manifest.json file inside a firmware zip file.\nThe relevant bits:\njson\n  \"parts\": {\n    \"boot\": {\n      \"addr\": 0,\n      \"cs_sha1\": \"d58f783adb68238ac682948811fa2a160638ae44\",\n      \"size\": 2512,\n      \"src\": \"0x00000.bin\"\n    },\n    \"boot_cfg\": {\n      \"addr\": 4096,\n      \"cs_sha1\": \"e0c66649d1434eca3435033a32634cb90cef0f31\",\n      \"size\": 4096,\n      \"src\": \"0x01000.bin\"\n    },\n    \"fs\": {\n      \"addr\": 901120,\n      \"cs_sha1\": \"a1c7b734f1e5ad7f2b91e20c611f1991ea951a82\",\n      \"fs_block_size\": 4096,\n      \"fs_erase_size\": 4096,\n      \"fs_page_size\": 256,\n      \"fs_size\": 131072,\n      \"size\": 131072,\n      \"src\": \"0xdc000.bin\",\n      \"type\": \"fs\"\n    },\n    \"fw\": {\n      \"addr\": 69632,\n      \"cs_sha1\": \"a6f5cffdb9de67b2de4d5cfcab01d9716684cdba\",\n      \"size\": 624928,\n      \"src\": \"0x11000.bin\"\n    }\nThe address of the filesystem is computed as:\nFS_ADDR  = $(shell printf \"0x%05x\" \"$$((0x100000 - $(_FS_SIZE) - $(SYS_PARAM_SIZE)))\")\nBasically the FS is put towards the end of the flash. This way when the code section grows, the FS doesn't need to be relocated and our flashing tool has less things to reflash (it can avoid reflashing if the content doesn't change, by checksumming).\nAs you can see we hardcoded 0x100000 instead of FLASH_SIZE.\nThe reason for that is that our builds support Over The Air Updates (OTA).\nYou can perform unattended over the air updates to devices that are deployed out of your reach, and used by customers that don't have flashing tools installed; if an updates goes wrong, the device is effectively bricked as far as the end user is concerned.\nIn order to address this problem, what you basically have to do is to split the flash multiple slots and update a slot other than the current one.\nThe ESP8266 CPU can memory map only 1Mb of flash. This 1Mb window can be moved in 1Mb increments and thus we can execute the firmware linked at a given absolute address if each firmware slot is spaced at 1Mb increments. That's why we limit the size of the FW+FS bundle to 1Mb.\nYou can try to tweak that hardcoded 0x100000 is FS_ADDR so that a larger filesystem can be positioned correctly. Note that OTA won't work in that case.\n. yeah, Alex is correct, mmapping wouldn't work outside the current 1Mb window.\nYou can use a second FS image and put it where you want.\nIf you add it in the manifest.json file, MFT flash tool will do the right thing.\nNote that currently our f* function shims (fopen, fread etc) assumes the first filesystem. With some amount of tweaking you can make them point to your second filesystem. It really depends what you want to do.\n. @wallaroo, do you have any firewall that blocking access to port 5000 ?\nFWIW, we actually serve the images also on port 443, but didn't yet change all the references in the repository (turns out there are some yaks to shave in our continuous integration infrastructure).\nSo technically you can pull docker.cesanta.com/esp8266-build-oss:2.0.0-r1 and use docker tag to locally rename it as docker.cesanta.com:5000/esp8266-build-oss:2.0.0-r1.\n. @cpq: I believe this is related to #151 \n. ",
    "cpq": "LGTM\n\nReview status: 0 of 49 files reviewed, all discussions resolved, all commit checks successful.\n\nComments from the review on Reviewable.io\n Sent from Reviewable.io \n. @Spritetm could you try again please? The \"fix\" was just increasing HTTP buffer size, I think it is going to work for you unless your JSON thing is huge. \nAgree with @gelraen , our HTTP client is primitive at the moment. It uses native ESP SDK, which is not convenient. We're looking into possibility of using something that provides BSD sockets API (e.g. FreeRTOS based SDK), port Fossa (https://github.com/cesanta/fossa) over and provide JS bindings to Fossa. That would give rich networking ability to the firmware.\n. Closing this for now.\nPlease reopen if still an issue.\n. Pushed https://github.com/cesanta/smart.js/commit/0f5ce3ce5fff04eecba7ed3e39f65309336db16f, thank you!\n. Thanks for following up, @jasdeepkhalsa \nSmart.js is already server-less. And, comms protocol is peer-to-peer, see https://cesanta.com/docs/cloud/\nAnd, Smart.js is NOT nodejs-based. We use our own JS engine, which is way smaller then V8.\nRegards,\n. We plan to re-use Fossa (https://github.com/cesanta/fossa) for networking, which will add a huge bunch of functionality, including coap. It's just ESP's SDK doesn't provide BSD sockets, so it was easier to put together a custom HTTP client/server based on their native API.\nWith existing HTTP API, you can already use other clouds. And yes, we plan to move hardcoded \"cesanta.com\" to the config, to let people to use their own servers.\nW.r.t. JS API: if you have a specific suggestions, we'd be more than happy to hear.\n. Closing this.\nPlease reopen if you have suggestions w.r.t. API.\n. Is it on ESP8266 ?\nSPIFFS is a flat file system, and doesn't support directories. That might be the reason.\nPlease reopen if that's not on SPIFFS.\n. @goliatone the issue is resolved: SPIFFS is flat.\nPlease reopen if you think it's not resolved.\n. Thank you. That has been intgrated.\n. https://github.com/cesanta/smart.js/commit/cc18d18a6907b03fbbf8f0552925ee666dc3162b fixed this.\nThanks @mmikulicic , @pastukhov , @maxogden \n. Closing as obsolete. @fedy2 I've restored the visualization part, could you try again please?\n. Closing as obsolete. Closing as obsolete. Closing as obsolete.. Closing as obsolete.. Closing this as rotten, please reopen if needed.. @nkolban, the link is corrected.\nThank you Neil.\n. Hi Neil,\ngreat that it works as expected!\nCould you clarify on whether you put File.eval('http_client_1.js') call in one of the initialization files, please?\n. Ok, thank you Neil. Please follow up as soon as you manage to reproduce.\n. https://mongoose-os.com/video-tutorials.html#video6\nAlthough it's not a low level websocket api, the RPC mechanism implements very practical way of controlling the device. No need to invent the wheel and care about frame format, commands queue, confirmations, etc.. Closing for now, as there are no short or mid term plans w.r.t. WS server API.. At the moment, WS2812 support is lower priority for us, since we have more pressing issues to be implemented / solved - our resources are limited and we have to prioritize wisely.\nIf there is a commercial project that involves WS2812 - that would bump the priority up. Otherwise, we're not going to look into it until the end of July.\nPull requests are welcome, as usual.\n. @bytemage Hi Simon! Could you elaborate on it please? Is there a concise description of the project - how it works, where it is used, and how JS can improve things, please?\n. Why don't some of you guys who's familiar with NeoPixel (none in our engineering team is) just send a PR for it?\n. And, by the way, take a look how easy is to build a firmware which has: a) filesystem b) configuration management c) networking, with a single make command, no toolchain installation required:\nhttps://github.com/cesanta/mongoose-iot/tree/master/fw/examples\n. https://mongoose-os.com/docs/#/js-api/api_neopixel.js/. Neil, are you talking about something like Net API in nodejs , https://nodejs.org/api/net.html ?\n. https://cesanta.com/docs/overview/intro.html. Quick question - did you register your device (ID & password) on https://dashboard.cesanta.com ?\n. Thank you @master-q !\n. When we export, we still assume private directory structure.\nMax, can you think about the way to handle this and make our sources built on public repos, please?\n. Thanks. Please elaborate on what environment you're using - what DAV client, etc.\n. We've done a bunch of research and testing - and decided to ditch DAV as a primary way for file management. It's too hard to make it work smoothly on several platforms.\nWe're going to use other means, e.g. implementing RESTful API and hooking Web based IDE.\n. Thanks Andrew.\nWe do not plan to use smartconfig. Smart.js uses it's own configuration infrastructure, where configuration is saved in the json files, and also persists through reboots.\nThe way to pass wifi configuration for Smart.js would be manual via AP mode web UI setup, or by copying appropriate json config file to the FS.\n. Sure, that should be relevant:\nhttps://www.cesanta.com/developer/smartjs#_firmware_startup_process\n. Yes, AWS interoperability looks interesting.\nDo you work on the specific IoT deployment using AWS IoT ?\n. AWS IoT is implemented. \nhttps://github.com/cesanta/mongoose-iot/tree/master/fw/examples/c_mqtt. Please do.\nNote that our solution, including cryptochip support for secure SSL key storage, has been reported by our Amazon partners on re:Invent in Vegas recently (see https://mongoose-iot.com/iot_security.html).\nThis is the ONLY working ESP8266 + AWS IoT solution we're aware of.. @amid0 , @rojer will be able to help with it in ~2 weeks time, so far there is no update.\n. @alashkin Please take a look.\n. Yes.\nLuke, do you have an idea in mind with regard to the API?\nCould you elaborate on your use case please?\n. Thank you @lukevenediger !\nSo in order to talk to the Firebase, the only thing required is plain UDP API?\n. Thank you @lukevenediger  - that makes sense. Let us do it.\n. @Bluebie is there a web page that describes your Art-Net and/or HomeKit projects? They sound fantastic!\n. https://github.com/cesanta/mongoose-os/tree/master/fw/examples/c_arduino_dht. I guess a onclose event makes sense here. Could you show your code, and anticipated onclose handling, please?\n. cc @alashkin \nAfter spending much time fixing WebDAV, we decided to discontinue WebDAV feature.\nUsing WebDAV would be great, but making it work takes a LOT of effort.\nWe will resort to HTTP POST(curl), and also we're working on the online editor that will make things easy.\n@alashkin , please remove WebDAV from the documentation, and from the source code, and close this bug.\n. See https://github.com/cesanta/mongoose-os/issues/221#issuecomment-323605005. The PR is in the review, expect a commit tomorrow.. https://github.com/mongoose-os-apps/c-arduino-onewire  - C/C++ example\nhttps://github.com/mongoose-os-apps/arduino-onewire - JavaScript example. Closing as obsolete. @IgorTrud could you try now please?. closing as rotten,\nplease reopen if needed.. Closing as the question is not relevant . I suspect the memory can be fragmented, and allocating contiguous chunks that is less then available memory can fail.\n@dimonomid  I think you've done memory analysis - can you confirm on this please ?\n. Please use mongoose-iot.com\n. Closing as obsolete. Thanks Omer!. Closing as obsolete - thanks Omer!. \u041f\u0440\u0438\u0432\u0435\u0442 \u0410\u043d\u0442\u043e\u043d,\nthis error is not fatal. Give some time. Do you see a hello message from a device in the log window?\n. Once you clicked \"Run\" button in the IDE, a new firmware should be saved on your device (only things that have changed are updated). That new firmware has a \"Hello from device control tutorial!\" log command, which should be sent to the cloud and displayed in your browser.\nCan you send all log messages that are shown in your browser please?\n. Apparently updater failed - @alashkin what do you think is the problem?\n. Closing as obsolete.. Closing this as obsolete.\nNote we're working on JS engine refactoring which is expected to be in working condition by the end of Jan.\nMain difference with V7: smaller footprint, way less complex, many standard JS features are NOT supported, ability to load C functions directly without writing glue code.\nSee https://github.com/cesanta/mjs\nInitial support is already there. The GPIO API has changed:\nhttps://github.com/cesanta/mongoose-os/blob/master/fw/examples/mjs_hello/fs/api_gpio.js\nNow, it is an FFI-ed C API.\nSee https://mongoose-iot.com/blog/mjs-a-new-approach-to-embedded-scripting/ for more info and rationale of FFI.\nPlease reopen if needed.. Closing this.. @alashkin could you comment on this please?\n. Closing this.. Hi Michele ,\ncould you elaborate on why you'd like to have two filesystems, please?\n. Thanks Michele.\nYeah, the OTA does not work in that case because it wants that part of flash that you're using for the FS.\n. Apologies we haven't looked at this closely.\nAnd mongoose os gone a long way ahead.\n@wallaroo is it still relevant to you?. Closing as rotten. hi @carterw ,\nFYI we have done with the JS engine refactoring.\nAre you still using mOS ?. intro: https://mongoose-os.com/blog/mjs-a-new-approach-to-embedded-scripting/\nTo try:\nmos flash --firmware https://mongoose-os.com/downloads/mos-esp8266.zip\nmos get init.js\nmos put init.js\nmos console\nmos could be installed from here https://mongoose-os.com/software.html. Hi @rohithreddy !\nPWM is only available on esp8266 currently. If you want to use it, do\n1. checkout mongoose-os repo\n2. cd to fw/examples/mjs_base\n3. add line \"mgos_pwm_set\" to the list of exported symbols\n4. type \"mos build --arch esp8266\"\n5. type \"mos flash\"\n6. Now you can use PWM from JS: let PWM = { set: ffi('int mgos_pwm_set(int, int, int)') };. ok, closing this.. please follow https://forum.mongoose-os.com/discussion/758/pwm-how-to-with-esp8266-need-some-tips-please#latest. @realzeus could you elaborate on that please?\nHow your development changed with MIOT - how it was before and how it is now?\nWhat sort of projects/functionality you're working on?\nThanks!\n. Hi Bill, we're making a change to the build system, by the end of today we expect this to work.\nThe way to add extra files (including JS files) is to add them to the fs/ directory.\n. @carterw , please don't use MFT.\nFollow https://mongoose-iot.com/docs/#/quickstart/overview.md/\nAt this particular moment, miot build does not build JS-enabled firmwares, but that is going to change, hopefully, today, because we're working on it at this precise moment.\n. 1. miot console does the job.\n2. miot build --local does the local build, needs cesanta/mongoose-iot repo checked out.\nWith (2), the source code is not sent to us, but one needs to clone the repo.\nPlease update your miot binary if it does not understand --local yet. Note that this functionality is quite fresh, so you might experience some hiccups.\n. JS support is in the build infrastructure - https://github.com/cesanta/mongoose-iot/tree/master/fw/examples/js_hello\nNote that we are working on the build system and JS support itself very actively, so changes are expected. I am closing this issue.\n. Thanks for reporting.\nI've put a redirect to https://mongoose-iot.com/docs/#/overview/\n. @alashkin could you check this and integrate if correct, please?\n. @rojer could you verify and integrate please ?\n. Thanks Andr\u00e9a!\nCould you be more specific please?\n. Thank you.\nSo, do you want to develop device logic in JavaScript, or you'd like to learn C/C++ for that?\n. Sure.\nPlease start with this:\nhttps://mongoose-iot.com/docs/#/quickstart/\nAs for the book on C, I'd recommend a classic - Kernighan & Ritchie, \"The C Programming Language\".\nThank you!\n. We are refactoring JS support, and expect it to be more or less functional by the end of Jan.\nAt the moment, initial support is demonstrated at https://github.com/cesanta/mongoose-iot/tree/master/fw/examples/mjs_hello\nThe JS engine is at https://github.com/cesanta/mjs. @alashkin please integrate those!. I think that is fixed - closing now.. @alashkin please verify and integrate. The very authoritative source is header files, https://github.com/cesanta/mongoose-iot/tree/master/fw/src\nOf course there is I2C, SPI, UART, and other interfaces.. @mark-hahn where did you look for the information?\nI'd like to stick links to the forum (forum.cesanta.com) to the appropriate place.\nMongoose is free, open source, under the dual license (GPLv2 and commercial).. Thanks for reporting, working on it now.\nCould you elaborate on how do you plan to use Mongoose OS , please?. Fixed, and verified manually on macos - please verify and confirm.\nDownload mgos tool from https://mongoose-iot.com/software.html.\nmgos build --arch .... Does c_mqtt connect to the default MQTT server (which is not AWS IoT) ?. AWS MQTT server disconnects if there are some problems with the policy.\nPlease test c_mqtt example as the first part of README suggests - using a public MQTT server, that will help to pinpoint the problem.. Well, technically it's not refused. It is perfectly successful, but AWS silently closes it soon if the policy is not right.. Thanks Paul!. @rojer please take a look. Are you trying to flash STM32 board?. Got it, thank you @MobiusHorizons !\nSTM32 is not yet functional, work in progress!. Fixed, please verify.. Fixed. Please verify & confirm.. 32k RAM is too low to do reasonable things..\n@q2dg do you work on some specific project on SAMD21 ?. @ceco is it still relevant for you?. The mJS engine that is used by default, is very restricted and cannot use any node module.\nThe socketio lib is too fat to run on most of the boards that mOS targets, anyway.\n. What exactly protocol socket.io is using?\nCould you give more details about the project you're working on, please?. Thanks @MobiusHorizons \nMongoose OS has a built-in networking library, https://github.com/cesanta/mongoose\nWhich has Websocket support.. I think the config setting wifi.ap.ssid is what you want.\nplease confirm - are you talking about the network name or the host name?. got it thanks @kzyapkov \n@alashkin please add. Setting through build_vars should work:\nhttps://mongoose-os.com/docs/#/quickstart/build.md/\nSee example at \nhttps://github.com/cesanta/mongoose-os/blob/master/fw/examples/c_mqtt/mos.yml#L10-L11\nPlease confirm it works as expected and close this.\nP.S. CoAP? really, CoAP is terrible.. @kzyapkov cause CoAP is complex. It's ok for smallish things, but when it comes to big messages - fragmentation comes into play (reimplementation of TCP), and when it comes to security - DTLS which is a pain.\nIn my opinion, only a quite narrow subset of vendors promote CoAP.. Are you using windows?\n. Could you confirm that with the latest mos build please?\nmos update latest. A multiple relevant updates to the mos tool has been made since - please try and report back.. @mike-rogers is that intermittent or happens all the time? what mos console say?. Google is trying to catch up with Amazon, eh ? :)\nCould you give a good PRACTICAL example for the actions integration please?\nDo you personally work on any related project?\n. I believe you're talking about similar:\nhttps://twitter.com/i/moments/849254058347122688\nFor now, Mongoose OS has enough on its plate to implement on a lower level.\nSo closing this, and leaving actions/alexa to the community.. RPC api has been added\nhttps://mongoose-os.com/video-tutorials.html#video6. Working on UART API now.. Done.\nhttps://mongoose-os.com/docs/#/js-api/api_uart.js/\n. Could you provide a practical example of it please?. Closing this - no input.. @alashkin please fix that windows. Your CPP functions that you want to export should be wrapped into\nextern \"C\" {\n...\n}. http://www.hivemq.com/blog/mqtt-essentials-part-9-last-will-and-testament. Fixed, thank you. That's done in the internal deployment script.. Fixed, please update mos utility.. yes, at the moment console only works with serial.\nw.r.t. uploaded file : that should work.\nmos get <file>\n...edit file...\nmos put <file>\ncurl IP/<file>\ncan you clarify the sequence of commands you're using?. Yes. Flashing can only work, and will only work, with serial. \nConsole now works with serial only, but potentially can run over the network too.. Flashing talks directly to the boot loader via serial, wipes out everything, writes new firmware.\nFlashing works when mOS is not yet installed.\ncurl command updates mOS over the air. That means mOS is already installed, and it can update itself.. @alashkin please implement. uh, thanks for reporting, @Uriziel01 . @alashkin please check console under win 10. pin 21 for esp32  is correct.\nThe thing is , esp32 devkit C board does not have any built-in LED!\nthat's why we return just a random pin which is close to the GND pin, in order to use an external LED:\n\n. Got it, thank you.\nprofiles, uhh... i think that'll be too much, to be honest..\nlet PIN = 2; would do the job :). @pedroherig what esp32 board you're using?. got it, thank you.\nDoes flashing work with the esptool ?. Not available yet. Planned, of course.\nThat said, native esp-idf SDK API is always available under MongooseOS, so if SDK has it, there is nothing stopping you to use it.. That's in development already.\nWe might have something next week.. Initial support is done, https://mongoose-os.com/blog/bluetooth-support-for-esp32/. Just to clarify, what OS and what device you're using?. @alashkin   Please resolve. @apassemard Antony, you're right, reopening.. That now works reliably.. Could you try the latest mos version please?. Thanks @muhlpachr , adding that to our long term roadmap.. @muhlpachr is that what https://aws.amazon.com/greengrass/ is trying to do?. I am not sure that this fallback functionality should be on the Mongoose OS side.\nIf there is a local MQTT broker already, it makes sense for Mongoose OS to be configured to use it. Local broker should either forward traffic to the remote one, or spool if there is no connection.. Fair question.\nHowever, implementing fallback is a non-trivial task. How a failure is detected, at which point the switch happens, how to go back to the main target, should the device spool data locally if both targets fail and during the switch, etc etc.. Then, a fair question will arise - if done for MQTT, why not for HTTP? WebSocket? How authentication is handled? Security-wise, this is a huge potential for attacks.\nSo, the answer is: no fallbacks at this point in time. Too messy. Use things like AWS GreenGrass if fallback is needed.. That is unlikely going to happen in the nearest future. Most IoT cloud servers do not support it.. the networking stack works on nRF, see  https://www.hackster.io/dfrank/mongoose-embedded-networking-library-on-nrf51-and-nrf52-547b15\nboth nRF51x and nRF52x\nThe MongooseOS is not yet ported. The port is an non-trivial piece of work.\nCould you elaborate on your project please?. Totally agree.\nAs soon as we get a commercial project on nRF platform, we'll port MongooseOS on it.. @alashkin please take that on.\n@Aterocana could you try to debug the download please: curl -v -i .... - maybe there are some redirects or something under archlinux?. maybe it fails to unzip to a local file?\nmos flash esp8266 --v 4 --logtostderr please . @Aterocana if that's still an issue for you, please try again.\nmos update then mos flash esp8266\nPlease reopen if still fails.. @dimonomid please take this. Done in https://github.com/cesanta/mongoose-os/commit/e093e1d243bdecb2b84d8b6783ce4aa5aee6514f. Please review & integrate. @alashkin please integrate. What board are you using?. does other hardware / software connect to that network ?. i don't see how we can help you to debug this, sorry.\nYou probably need to resort to other solution, not mongoose os.\nif you have any idea in mind, please let me know, we'll be happy to help.. Closing this for now .... We've fixed some issues on cc3200, please try again - re-flash.\nmos flash cc3200\nmos wifi WIFI_NAME WIFI_PASS\nPlease let us know how it goes!\nReopen if still an issue.. Fixed in https://github.com/cesanta/mongoose-os/commit/992a2b6a37afa431960895acc4e81ebec6501d42\n@kzyapkov please verify. yes, @rojer please take a look. https://mongoose-os.com/docs/quickstart/mos-tool-tips.html#get-mac-address-and-other-system-info-in-javascript. if you include rpc-common and rpc-loopback libraries, RPC.LOCAL should work.. @rojer please verify & integrate if needed. yes. check the return status of MQTT.pub() call.. Gents,\nIs this still an issue? Can we close it ?. Fantastic. We'll start on it shortly.. Work in progress, cannot give an estimate yet, soon we'll have it.. there could be multiple reasons. increase debug level, mos config-set debug.level=3\nI suggest using mos aws-iot-setup first, to get a working baseline.. @williamwd thanks for letting us know, appreciated!. Sure, we update.\n@JonnyBGod what's your particular interest in updating, is there some specific functionality/fix you're looking for?. Configuration commands mos config-set and mos config-get  are RPC commands.\nAnd my default, mos uses UART channel for RPC, see https://mongoose-os.com/docs/core_components/rpc.html\nTherefore, if you configure TCP-UART bridge, you take over the UART cause UART starts to be bridged, and RPC over serial naturally stop to work.\nThe solution is: after you configure TCPUART, use another RPC channel to talk to the device, e.g. websocket:\nmos --port ws://IP_ADDRESS/rpc config-get\nAnother cause for the problem could be this: recently Mongoose OS refactored most of the functionalities into separate libraries, including the \"configuration\" library. Meaning, a firmware needs to include a configuration RPC service to make mos config-{set,get} to work. See https://forum.mongoose-os.com/discussion/comment/3353/#Comment_3353. @ruslanvaliullin please integrate this change.\nMake sure that the default init.js is not broken after that.\n. Closing, thanks @qbzzt , as far as I can see, most of your changes got into\nhttps://github.com/cesanta/mongoose-os/blob/master/fw/mjs_api/api_gpio.js. MSP430 is too thin for Mongoose OS. only components like https://github.com/cesanta/mjs could be used.\nMSP432 on the other hand could be a good target, but there are no immediate plans to do it.\nVolunteers are welcome though.. nRF52 is certainly in the plans. We already have networking layer ported, https://www.hackster.io/dfrank/mongoose-embedded-networking-library-on-nrf51-and-nrf52-547b15\nThere are no instructions yet, but the code is open - https://github.com/cesanta/mongoose-os/tree/master/fw/platforms\nJust follow an existing examples.. Run with verbose debug, mos --port COM4 flash esp8266 --v4 --logtostderr\nand show the logs please.\nAlso, are DTR & RTS connected?\n. Ah, apologies, it should be --v 4 --logtostderr\nThe error log should be dumped on stderr. Thank you.\nIf --port is not specified, then mos enumerates all COM ports and makes a guess by choosing the very first port on the list. Do you have any other COM ports active?\nDoes the UI shows a correct port dropdown on the first wizard page?. Selects COM10  by default? Hmm, I believe that's because of string-based search, COM10 in this case comes before COM4.\nOn the first UI page, you might select a correct port from the dropdown and click Next, that should work.. Got it, thank you Peter, we'll try to figure out why port enumeration fails.. thanks @cristiancs , looking at it. Fixed, please mos update.. 1. clone mongoose-os repo\n2. add your fw/mjs_api/api_whatever.js which FFI-es SDK functions you want\n3. go to fw/examples/mjs_base and mos build --repo ../../.. --local --verbose && mos flash\n4. now you can play with init.js as usual, with your new api. Hi @WilliamFrasson , please follow this forum post on the very same topic:\nhttps://forum.mongoose-os.com/index.php?p=/discussion/928/change-wifi-config-on-webpage#latest\n. Believe this is solved, closing. Do you have dns_sd enabled?. Please follow https://forum.mongoose-os.com/index.php?p=/discussion/928/change-wifi-config-on-webpage#latest. Duplicate of #241 \nRuslan, please take care. See https://forum.mongoose-os.com/index.php?p=/discussion/comment/2177/#Comment_2177. no, there is no chance to fit mOS on esp01.\nmOS uses about 700+k of flash.. run as \nmos flash esp8266 --v 4 --logtostderr\npaste the log. Could you move this dicussion to forum.mongoose-os.com please?. We need to see your code.. Thank you.\nThat has been fixed.\nAlso, we've changed neopixel api to look more JS-y, see example at \nhttps://mongoose-os.com/project-videos.html#video4. Answered in https://forum.mongoose-os.com/index.php?p=/discussion/comment/2335/#Comment_2335. See https://forum.mongoose-os.com/index.php?p=/discussion/comment/2356/#Comment_2356. Certainly possible, no immediate plans to do it, feel free to start contributing. @Eskibrew would you be willing to create a dedicated library for RS485, as per https://mongoose-os.com/docs/core_components/apps.html#how-to-create-a-new-library ?\nIf done so, all Mongoose OS users can use it.. Correct, 485 functionality needs to be in the core. Thank you, we're working on it already!. @andreicek loading/importing examples is not yet well done in mOS - work in progress.\nFor now, flash default firmware, open init.js, copy/paste example code, save&reboot.\nExample code:\n```javascript\n// Load Mongoose OS API\nload('api_gpio.js');\nload('api_http.js');\n// On nodemcu, press flash button to send HTTPS request\nGPIO.set_button_handler(0, GPIO.PULL_UP, GPIO.INT_EDGE_NEG, 200, function() {\n  print('sending request...');\n  HTTP.query({\n    url: 'https://httpbin.org/get',\n    success: function(body, full_http_msg) { print(body); },\n    error: function(err) { print(err); }  // Optional\n  });\n}, null);\n```\nPlease let us know how it goes.\n. Ah, yes, you're talking about api_http.js.\nFirmware updated.. main.c should be main.c,\nbut  you can add other  .cpp files at your will.\n. Ruslan, please verify and integrate.. That's done, closing. We'll tag the repo roughly every ~4 weeks from now on.. Closing, as deep sleep added in api_esp8266.js. Maybe the dialog should be triggered only once at startup ?. mos update please.\nNow, a dialog only pops up once at startup, only if device is not connected.\nNote: together with this push, an initial support for apps/libs is also pushed.\nVery fresh, so bugs / hiccups are expected. Please be forgiving !\nIssue reports are appreciated as always.\nThank you.. @scotthernandez you might be interested in that too:\nhttps://mongoose-os.com/blog/mongoose-os-google-iot-esp8266/\nhttps://mongoose-os.com/blog/mongoose-os-google-iot-ecc508a/. Please remove ~/.aws/credentials, restart mos, and save credentials again. Please reopen if wiping / reinitialising the credentials did not help. Hmmmm yes.\nWhat behaviour would you expect from the UI if the port is specified?. Not yet! Today or tomorrow.\nWe are about to push a big change as well - spliiting Mongoose OS into modular libraries. That will change the coding workflow from current \"edit files on device directly\" to what it should be \"edit files in a local project then upload to device\".. The change is pushed. Please verify, reopen if required.\nRun mos update\nTwo ways to specify port:\nmos --port XXXX\nor, export env variable\nbash\nexport MOS_PORT=XXXX\nmos\nJust in case, clear your browser cache.. Do mos ls first, to see what files are on a device. It's obvious that FILENAME is not there.. Thanks Neil.\nThat's the second time I see this error. What shell have you got on /bin/sh? Is it bash or some other shell?. Thanks.\nWe've changed installation shell from /bin/sh to /bin/bash, that should fix the problem.\nPlease reopen if you still see an issue.. Fixed in https://github.com/mongoose-os-libs/rpc-common/commit/d32da60d6f76385cf8d1ed23cf13e1ee5b3a1239\nThanks for reporting!. If you're asking whether is can act as a router - the answer is no. @ruslanvaliullin is that addressed already ?. Do you mean https://en.wikipedia.org/wiki/Wi-Fi_Protected_Setup ?\nIf yes, could you elaborate on your project please?. Good point, Scott.\nClosing this.. What do you expect to see?. Ruslan, please take care about this!. Thanks @Galbi3000 . Yeah, fixed, thanks for reporting. For now, ADC API is not yet FFI-ed to JS, we expect it to be done next week.. Closing, as done.. Please use ESP-IDF API for that - just include the header and call relevant function.\nReopen this if required.. No, not possible yet, let us expand mgos_ads_* API to allow that.\nExpect next week.\nIf in hurry, just use ESP32 SDK API.\n. Yeah, we have finalised our ADC API:\nhttps://github.com/cesanta/mongoose-os/blob/master/fw/src/mgos_adc.h#L22-L25\nSetting ADC width, attenuation, is quite ESP32-specific and will not be part of cross-platform API.\nMongoose OS will set reasonable defaults:\nhttps://github.com/cesanta/mongoose-os/blob/master/fw/platforms/esp32/src/esp32_adc.c\nBut if you want to override those, just use ESP32 SDK directly. I think it even might make sense to expose that to JS.. ```javascript\nlet MYADC = {\n  cfg: ffi('int adc1_config_channel_atten(int, int)'),  // that function must be in the SDK\n};\nlet db6 = 1234;  // whatever the numeric value for 6 db is\nMYADC.cfg(pin, db6);\n```. If you're connected via http/websocket, the device is directly visible and therefore the UDP log is available. \nThe setting is debug.udp_log_addr=\"your_workstation_ip:1993\"\nWe just did not yet make it \"magical\".. The anticipated flow is: when mos tool connects to a device via websocket, it can ask \"hey, device, what is the IP address you're seeing as mine?\" then mos tool can call Config.Set debug.udp_log_addr=\"that_ip:1993\" and bingo. you'll see the logs.\nNote that UDP logs are way less expensive than MQTT. UDP logging (which is similar in idea to remote syslog) bypass everything, it just stuff things directly into the LWIP stack. Each message is stamped with sequence ID, so you can check in the log stream whether any message has been lost or not.\nBottom line: for now, WS-connected devices could be configured manually to log to debug.udp_log_addr=\"your_workstation_ip:1993\". We'll  make it magical-automatic . That is done.\nhttps://mongoose-os.com/docs/core_components/debug.html#debug-configuration-settings-quick-reference. I don't see much sense  mOS implementing cpu freq API\nClosing - feel free to reopen if there are strong points to do that . Yeah, agree with @scotthernandez \n. @MrSurly thanks for reporting, fixing this.. @rojer please integrate once @tectiv3 finishes. Done for esp32.. @tusharvb19 , your contribution of ethernet support for esp8266 would be welcome.. That's working as intended. Until the device gets the time via SNTP, its hardware timer counting time from the boot time.. Fixed links, and added doc, not the best doc i've seen so far, but anyways\nhttps://mongoose-os.com/docs/libraries/arduino/arduino-onewire.html. @rojer please handle this one. Actually this is a duplicate of https://github.com/cesanta/mongoose-os/pull/256. We have refactored mos architecture a bit, now it has apps and libraries.\n@Sparow199 do you mind contributing that example under the Apache 2.0 license, per https://mongoose-os.com/docs/overview/apps.html#contributing-an-app-or-library ?\nIf you're fine with that, I'll move your app and fix the build.. @Sparow199 do you mind me adding your app to the mongoose-os-apps collection under the Apache 2.0 license?. https://github.com/mongoose-os-libs/mq135 - you have admin rights.\nFeel free to import there.\nDon't forget to set the description, yourself as an author, and Apache2.0 license, please.\nThank you!. Please don't use that deprecated code.\nI suggest to use RPC to implement RESTful services. That's ancient stuff, cannot be integrated\nAlso it does not have an actual API. Error code 9984 is MBEDTLS_ERR_X509_CERT_VERIFY_FAILED\n. Looks like OOM.\nCould you log free RAM as well please?. We need to restore mmap and JS pre-compile.\n@dimonomid please handle!. Thanks for the background!. There is.\nhttps://github.com/cesanta/frozen. If that is driven by the system_phy_set_max_tpw SDK API, then you can use it directly from your C sources.\nIf you're using JS, FFI this function and rebuild the FW.\nFeel free to send a PR that adds FFI to the https://github.com/mongoose-os-libs/mjs/blob/master/esp8266/fs/api_esp8266.js. That should be it - just change uint8_t -> int\nDid you try it, how does that work for you?. please update, mos update\nThen, make sure there is no other mos process is running.\nReopen if still an issue.. https://mongoose-os.com/docs/libraries/cloud_integrations/azure.html. W.r.t. read api - we think that's the right way.\nReading from a pin in a output mode does not make sense. And not everybody is careful enough to make sure the mode is always correct.\nWe can consider the API for getting the current mode.. Just to clarify, is that for making mOS to trigger a login page?. Does it make sense to wrap it into a library ?. This is important for usability.\n@ruslanvaliullin take on this one.. @ruslanvaliullin that FR makes perfect sense to me.\nPlease implement.. Please show your whole init.js\nIs the issue still relevant?. not aware of any.\nyour contribution is welcome.. thank you!\nplease sign the CLA at https://docs.cesanta.com/contributors_la.shtml\nand i'll integrate that into our repo. thanks. your change is integrated.\n. That got integrated, thank you. Please provide a coredump backtrace.\nSee https://mongoose-os.com/docs/overview/debug.html#analysing-core-dumps\nTo get an .elf file for you firmware, download it https://mongoose-os.com/downloads/mos-ARCH-RELEASE.elf, e.g. https://mongoose-os.com/downloads/mos-esp8266-1.15.elf. Closing, as no input. maybe the file is corrupted?\nPlease re-setup mos. Could you confirm that there is no other mos.exe processes hanging around ?. what board you're flashing to?\nfrom the logs i see that the USB connection is quite flaky, and several attempts are required for success.. Done\nmos update latest\nmos -X get-mos-repo-dir. @ruslanvaliullin please export native SDK functions for ESP8266 and ESP32 to read battery voltage.\nsmth like system_get_vdd33.\nShould go to https://github.com/mongoose-os-libs/mjs/blob/master/esp8266/fs/api_esp8266.js , https://github.com/mongoose-os-libs/mjs/blob/master/esp32/fs/api_esp32.js. Could you be more specific please.\nWhat exactly is broken, what browser you're using, etc.. Got it.\nDon't use things from fw/examples, that's deprecated stuff.\nhttps://mongoose-os.com/apps.html please. There is a web ui setup app.. @applecrusher could you elaborate please? What exactly you're doing?. That's understood, thank you.\nI still don't understand why do you think mOS appends anything to the MQTT topics.\nIf you're talking about disabling RPC over mqtt, do rpc.mqtt.enable=false.\nOtherwise, mOS does not append anything to your MQTT topics.\n. mos update 1.14. I am confused now, so is that a 1.15 introduced an issue? Did 1.14 work?. It would help a lot if you describe those roadblocks - could you put together a description please?\nAnother question is that whether CC3200 is a perspective platform at all. We'd rather add this to CC3220.. Thanks.\nYour description does not shed any light on what actual roadblocks there are.\nWe'll consider adding this to the CC3220.\nInvesting into CC3200 without any commercial engagement is not feasible for us.. You have a wrong impression of what Mongoose OS is, and what it is supposed to do.\n. @wangwangwang1998 \n2Mb is the sensible limit for the amount of sources sent to the build machine. The build command zips your app directory - so make sure you don't have any log files or another junk in the app directory. . Mongoose OS provides its own OTA mechanism:\nhttps://mongoose-os.com/docs/book/ota.html. Ah. Could you elaborate more please?. Please mos update latest and retry.. Please follow https://forum.mongoose-os.com/discussion/1464/how-to-ask-questions#latest. Thanks @jbrownkramer , @hqawasmi \nPlease\ngit clone --depth 1 https://github.com/cesanta/mongoose-os\ncd mongoose-os/fw/examples/c_mqtt\nmos build --platform esp8266\nLet me know the result.. Thanks @Andresteve07 ! Fortunately, all sources are open and you can find out why you're getting  Invalid request. From our point of view, everything works as intended.. Did you try --esp-baud-rate=0 ?. Fixed by https://github.com/cesanta/mos-libs/commit/e9f84a15ae934097224c860f9ef46fdd2e5f31d3. That sounds good!\nYou can write a library that adds an RPC service JS.Exec.\nThat lib creates an mJS instance, executes a passed string, and kills the instance (optionally calling cleanup function if defined).\nIf you write such a library and contribute to the community, we'll integrate it into the UI (or you can do it yourself, since mos-tool is open source too).\nAre you up for it?. Yeah, that JS.exec is not a \"full\" REPL, cause it cannot create new pieces of code. It can only execute existing functions.\n. Or,\nconfig_schema:\n  - [\"bt.keep_enabled\", true]\n  - [\"bt.random_address\", false]. @rojer please fix. Did you OTA.Commit the new firmware after boot ?. Please read https://mongoose-os.com/docs/book/ota.html and https://github.com/mongoose-os-libs/rpc-service-ota#otaupdate. Closing this - feel free to reopen if required.. We mostly use Mac and Linux.\nSince you're a Windows user, feel free to fix this issue on Windows and contribute that to everybody else.. Can't actually reproduce.\n```\n$ curl -s -i https://mongoose-os.com/libs.html | head -10\nHTTP/1.1 200 OK\nServer: nginx/1.12.2\nDate: Thu, 31 May 2018 11:12:47 GMT\nTransfer-Encoding: chunked\nConnection: keep-alive\nX-Powered-By: Express\nhtml\n\n\n```. We're working on it, and going to add API docs rendering to https://github.com/cesanta/mongoose-os-docs soon. Finished refacroring API docs.\nSome individual bits of the reference require work, but the overall structure is complete.\nhttps://mongoose-os.com/docs/api/core/adc.md. PR please!. thanks for the background @mamuesp !\n\nI just thought that is the question is in increasing something (interrupt queue length), that can be done in a simple PR, that's it.. please move to the newer events api\nmgos_event_add_handler(MGOS_EVENT_OTA_STATUS, status_cb, NULL);. That API is deprecated in favor of generic events API.\nEvent fired: MGOS_EVENT_OTA_STATUS, see https://github.com/mongoose-os-libs/ota-common/blob/master/src/mgos_updater_common.c#L101\nEvent data: https://github.com/mongoose-os-libs/ota-common/blob/master/include/mgos_updater_common.h#L30-L35. We are fixing the build as we speak - and let you know when done.\n. Thanks James.\nDoes it happen on a latest version ?. I see this in the log:\n```\n5 0x400ec85c in mg_recv_udp (len=,\nbuf=0x3ffbceac \"\\240\\340\\373?\", nc=0x3ffb6ee0)\nat mongoose/src/mg_net.c:639\n6 mg_do_recv (nc=0x3ffb6ee0) at mon\n```\nmg_recv_udp is something unexpected. Could you show the result of mos config-get for the device that is crashing, please?. Looks interesting.\nWell, Mongoose OS is using the LWIP stack - so much of the protection is on the lower layer. However, I do not anticipate the DNS flood to kill the device, since it does not create any long-lived sessions or objects like that. Once the packet gets handled, it is discarded. Said that, we'll take a closer look - thank so much for the report.. Updated, thanks so much.. You can upload files to the ESP32 using FS.Put RPC.\nThe usual way to change the JS logic remotely is to upload JS files, including init.js, and then reboot the box. Upon startup, the device executes init.js automatically.\nThe alternative approach would be to implement a simple \"JS executor\" RPC: you upload a JS file, then trigger the executor RPC to execute it, without reboot.. Hi. I am the Intercom support guy, and also I lead Mongoose OS project.\nYes resort to another solution.\nHowever, if you pay attention to the https://mongoose-os.com/docs/quickstart/setup.md , you'll find out that you can use command prompt / terminal the same way you can use UI.. Please update.\nmos update latest should do.. ",
    "gelraen": "Good point, I'll fix that.\n. Fixed in https://github.com/cesanta/smart.js/commit/0f8516cdd2f885ebd4ad554d180cc17825e81a68\n. Thanks for the report! I believe this is partially \"fixed\" by https://github.com/cesanta/smart.js/commit/68c871e1635c5af9127dfd4a7a00440e61c2c40d\nHTTP client is rather simplistic now :(\n. Thanks, this should be fixed with 89c08814399db46951ca2b67b268b1741ee557c1\nPlease reopen if the build still fails for you.\n. Yes, Windows binary doesn't print anything in the console :(\n@fedy2 , can you also add --log fnc.log --V=4 and share fnc.log somehow? This may help to figure out why exactly merging fails.\n. WARNING: Current flash params bytes: 0240\nThis doesn't sound right for ESP-01. It should be 0000. You can try to override it with --esp8266-flash-params 0x0000\n. Can you try to disconnect GPIO0 from GND and reset the board?\n. @fedy2 what is the ID your device is using now?\n. From what I see in the logs your device never connected and all commands sent to it ended up in the queue.\n. And you ran demo() function, right?\n. Please try now, we had a broken binary running there.\n. @fedy2 please try to reboot the device manually between pressing \"Detect devices\" and \"Flash firmware\". Also, since you have only one serial port, you don't really need to use \"Detect devices\", it just tells you on which ports the devices are detected.\n. For some reason trySync function fails when trying to flash after \"Detect\" was pressed without rebooting the device afterwards. I don't get yet what's going on, pressing \"Detect\" without rebooting works and payload in both cases seems to be identical.\n. Aha, \"Detect devices\" opens the port at 9600 each time, while \"Flash firmware\" tries to share the same handler with console at different speed. It seems that ESP detects baud rate only once after boot, so \"Detect devices\" makes it believe that we will use 9600 all the time and any further attempts to issue sync command at 230400 fail.\nNot yet sure what to do about it, but F&C should handle this case better.\n. By \"manual reboot\" I mean just power cycle ESP (e.g. disconnect and connect back VCC pin) after you get that check mark and before pressing \"Flash firmware\"\n. Just to be clear, you did reboot your ESP after this line: INFO: MAC address:  \"18fe34fe469c\" and it still didn't work? I'll try to check if I can reproduce it tomorrow.\n. Apparently, leaving GPIO2 connected to VCC somehow makes ESP still remember the baud rate. Please try to either disconnect all pins connected to VCC or grounding RST pin for a moment. Each of those things makes it flash properly after detection for me.\n. You're welcome :) And thanks for testing and reporting problems!\nNew Flashnchips will simply reboot ESP after probing, which should workaround this issue.\n. Looks like c++14 is only supported by Qt 5.4 and higher. Can you try replacing CONFIG += c++14 with CONFIG += c++11 in flashnchips.pro?\nInitially it was written with Qt 5.4, so more incompatibilities may come up even with proper -std flag.\n. Meh, QTimer::singleShot overloads that accept function pointers were added in Qt 5.4. Looks like I need to actually go and backport Flashnchips to Qt 5.2 :)\n. It will take a day or two I think. After QTimer::singleShot I've found that QCommandLineParser::addOptions also appeared after Qt 5.2, and that would be easier to fix after another piece of refactoring I'm doing right now.\n. I have no idea, sorry. On Mac OS X I'm using the binary installer, which neatly puts multiple versions side by side in my home directory.\n. Quick search shows this: https://launchpad.net/~hedges/+archive/ubuntu/qt5.5\n. ",
    "bartmichu": "Sounds good, thanks.\n. ",
    "boneskull": "I'll let you know. Haven't played with it yet. \n. ",
    "goliatone": "@cpq Look at the quick start guide on the repo's README.\n\n\nType some JavaScript expression to the console and press enter. Smart.js evaluates the expression and prints evaluation result: \n\n\n\n. @cpq Also, why would you close this issue before getting a response?\n. ",
    "alashkin": "New instruction is now here:\nhttps://docs.cesanta.com/mongoose-iot/master/\nAnd new examples are here:\nhttps://github.com/cesanta/mongoose-iot/tree/master/fw/examples\nFeel free to reopen bug is that is not enough\n. This code received a lot of fixes last time, documentation updated as well.\nSee here: https://github.com/cesanta/mongoose-iot/blob/master/docs/javascript-api/wifi.md\nWifi.changed(cb): Invokes cb whenever the connection status changes:\n   Wifi.CONNECTED: connected\n   Wifi.DISCONNECTED: disconnected\n   Wifi.GOTIP: got ip\nShould be ok now. \n. FNC received a lot of fixes, not sure this issue is actual (I have not seen this problem for a long time).\nI'm closing issue, but feel free to reopen.\n. Current version of FNC shows dialog box with error in this situation.\n. Demo function was removed.\nNow we offer sendRandomData and I do believe it works.\n. cloud.cesanta.com was redesigned, seems this issue is outdated.\nI'm closing it, but feel free to reopen it.\n. @mmikulicic \nCan we close this issue? Does <script type=\"text/javascript\"> work in current FW?\n. I tried on my ESP - and cannot reproduce. \nCould you give me some details?\n1. What model of ESP do you use?\n2. How long it works before crashing?\n3. Could you turn debug output on (Debug.mode(1)), run again and paste output here?\n4. As I understand, you connect Wifi before running demo, yes?\n5. Could you paste breakdown output as well? It is printed in the end of the build, like this: \n```\nsmartjs footprint breakdown\n\n           .text          .irom0.text    .rodata        .data          .bss\n\nv7             0              59959          0              0              0            \nsmartjs        494            52780          0              0              0            \nsys            10649          123705         0              0              0            \ntotal          11143          236444         0              0              0              \nFirmware size is 396Kb (of 512Kb), 23% is available\n```\nThank you!\n. @fedy2,\nEverything looks OK\nI checked fw on ESP01 - it works for me\nAnd your breakdown is absolutely like mine.\nSo,\n1. Could you upload ./firmware/*.bin here?\n2.   btw,\nAre you sure, that fw hangs?\nWifi.status()\ngot ip\nsmartjs 29152/2256$ Debug.mode(1)\n1\nsmartjs 29152/2256$ demo()\nInitializing demo data source \nStarting temperature push demo in background, type Debug.mode(1) to see activity \nPushing metric\nWhat terminal do you use? Is it Flashnchips?\nCould you try to execute any command (2+2) - just to check if it is really hangs.\n. I've tried you fw. It works :(\nthinking\n```\nsmartjs 29104/2280$ demo()\nInitializing demo data source \nStarting temperature push demo in background, type Debug.mode(1) to see activity \nundefined\nsmartjs 24152/1140$ Debug.mode(1)\n1\nsmartjs 27288/1488$ Pushing metric \nCloud reply: [{\"v\":1,\"src\":\"//api.cesanta.com/cloud.metrics_db\",\"dst\":\"//api.cesanta.com/d/dev_84227\",\"resp\":[{\"id\":1430752015187,\"status\":0}]}]\nPushing metric \nCloud reply: [{\"v\":1,\"src\":\"//api.cesanta.com/cloud.metrics_db\",\"dst\":\"//api.cesanta.com/d/dev_84227\",\"resp\":[{\"id\":2060076535589,\"status\":0}]}]\nPushing metric \nCloud reply: [{\"v\":1,\"src\":\"//api.cesanta.com/cloud.metrics_db\",\"dst\":\"//api.cesanta.com/d/dev_84227\",\"resp\":[{\"id\":2035761751436,\"status\":0}]}]\nPushing metric \nCloud reply: [{\"v\":1,\"src\":\"//api.cesanta.com/cloud.metrics_db\",\"dst\":\"//api.cesanta.com/d/dev_84227\",\"resp\":[{\"id\":1298154954620,\"status\":0}]}]\nPushing metric \nCloud reply: [{\"v\":1,\"src\":\"//api.cesanta.com/cloud.metrics_db\",\"dst\":\"//api.cesanta.com/d/dev_84227\",\"resp\":[{\"id\":1684513295838,\"status\":0}]}]\n```\nBtw, besides demo() does fw work?\n. demo() function was removed.\nCurrent version offers sendRandomData(), which seems to work\n. Did you try ./make.sh clean && ./make.sh?\n. Sorry, we discontinued support of that sample.\n. Sorry, we discontinued support of that sample.\n. @mmikulicic \nWifi.disconect doesn't change configuration, i.e. it works until reboot.\nso,\nwifi.sta.enable=false\nwifi.ap.enable=false\nSys.conf.save();\nis required to permanently turn off Wifi\n. demo() was removed.\nNew function sendRandomData() was introduces.\nShould work on posix as well\n. realAll was replaced by File.read, it works ok with empty files\n. Fixed in https://github.com/cesanta/smart.js/commit/8aec11ff88bde0b0ab2b57759e7ed43fb577743f, see docs here: https://github.com/cesanta/smart.js/blob/master/docs/javascript-api/gpio.md\n. File was moved to https://github.com/cesanta/smart.js/blob/master/smartjs/src/js/gpio.js\nand yes, now it has debouncing logic \nSee https://docs.cesanta.com/smartjs/latest/#/javascript-api/gpio/ for details\n. SSL support was introduced.\nIt is described here: https://docs.cesanta.com/mongoose-iot/latest/#/javascript-api/http/\n. Should be fixed in current version\n. @mmikulicic \nAt the moment, there is possibility to build FW with STACK_GUARD=false , which seems disables instrumentation.\nIt is enough to close this issue?\n. FNC and FW receives significant changes since that time.\nI'm closing issue, but feel free to reopen, if it is still actual.\n. added destroy method.\nSee here for details: https://github.com/cesanta/mongoose-iot/blob/master/docs/javascript-api/http.md\n. I believe this issue is fixed in current version.\nFeel free to reopen, if I'm wrong.\n. Implemented in current version:\nhttps://docs.cesanta.com/smartjs/latest/#/javascript-api/uart/\n. Current version prints on boot:\nThis is Smart.JS 20160412064031 (esp8266)\n. Just tried. ab works more or less good, if number of concurrent connections is not too big\n. Fixed, see description here: https://github.com/cesanta/smart.js/blob/master/docs/javascript-api/gpio.md\n. Added 'Sys.fs.free()` in https://github.com/cesanta/mongoose-iot/commit/dfb29996ece8ebb34582c693747bc9f43f91ed00\nAlso updated doc: https://github.com/cesanta/mongoose-iot/blob/master/docs/javascript-api/sys.md\n. Is this issue still actual?\nThis is a feature request, so could you give me more background on why do you need that? What is the project, and how that functionality will be used?\n. We implemented Node-like TCP & UDP API\nSee here for details:\nhttps://docs.cesanta.com/mongoose-iot/latest/#/javascript-api/udp/\nhttps://docs.cesanta.com/mongoose-iot/latest/#/javascript-api/tcp/\nFeel free to try and report bugs ;)\n. Fixed\n. @heymind \n@snsekar \nHi! \nDo you build smart.js from sources or use pre-built binaries?\nIn case of building from source, you  can try to use HEAD of this repo.\nIt still doesn't have Wifi.mode, but Wifi mode can be specified via config (conf_sys_defaults.json)\nNOTE: it it better to create your own conf.json next to conf_sys_defaults.json and put overriden values there.\nBtw, current HEAD by default starts in AP mode, in order to use STA mode the following section in configuration must be filled. \n\"sta\": {\n      \"enable\": false,\n      \"ssid\": \"\",\n      \"pass\": \"\"\n    },\nIt you want pre-built binaries, more-or-less fresh can be download here:\nhttps://backend.cesanta.com/devel/win_fw_20160104_224731.zip\nhttps://backend.cesanta.com/devel/mac_fw_20160104_224731.zip\n. Wifi.changed crash fixed in  https://github.com/cesanta/smart.js/commit/580e2e5c06bd2283fb5dd42af68a06b0c6b78930\nAs for DHT11, its support was discontinued \n. Support of ESP modules with 512Kb flash was discontinued. \n. Hello, @lukevenediger \nWhat flash size is on your chip?\nAs I see, it is flashed like 512Kb \nFlash Size:   4 Mbit\nwhile smart.js requires at least 8Mbit (1MB)\nI didn't find info about flash size in your link, but assuming it is still ESP-12, I'd suggest to try to flash with --flash_mode dio --flash_size 32m\ni.e.\nesptool.py --baud 115200 --port /dev/cu.wchusbserial1410 write_flash  --flash_mode dio --flash_size 32m 0x00000 0x00000.bin 0x1000 0x01000.bin 0x11000 0x11000.bin 0xe0000 0xe0000.bin\nor use our flasher (https://github.com/cesanta/fnc)\nPlease, try and let me know if works/not.\n. Hi @lukevenediger \nWell, it everything is OK, and everybody is happy, I have no questions.\nWhat I can offer to try?\nWell, you can try --flash-baud-rate 921600 instead of 115200. I usually use that speed.\n. We implemented Node-like TCP & UDP API\nSee here for details:\nhttps://docs.cesanta.com/mongoose-iot/latest/#/javascript-api/udp/\nFeel free to try and report bugs ;)\n. Hi!\nTry to rebuild smartjs@master, should be fixed.\nGPIO.setmode(14,3,0);\nGPIO.setisr(14,3,function(){print(\"GOTISR\");});\nGPIO.setmode(14,3,0); should return true, is as an issue as well.\n. Cool!\nThank you for reporting issue.\n. Sorry, but  DHT11 support was discontinued.\n. Added on method and close event.\nSee here for details: https://github.com/cesanta/mongoose-iot/blob/master/docs/javascript-api/http.md\n. Removed in https://github.com/cesanta/smart.js/commit/5d2953a6f412bd9663fec8ce0fbcfd46b7715583\n. Fixed in https://github.com/cesanta/smart.js/commit/b536e79081f395c740eab113ef2792d7920e7b5d\n. @carterw \nHi! \nCould you share use case for such function? \n. Ok, in this case I'm closing this issue \n. This is a feature request, so could you give me more background on why do you need that? What is the project, and how that functionality will be used?\n. @carterw \nHi, I cannot reproduce this, so, I need any details.\nFirst of all, what esp model do you use? What size of its flash?\n. I.e. it has 4MB flash?\nStrange.\nOk, could you past here FNC output? Several reboots loop.\nThere is no crash dumps, right?\n. btw, you can try to reflash with --esp8266-flash-size =4M\n. It is FNC command line options\nRun FNC --help (if you don't use Windows)\nAlso, you can go to Settings -> Advanced settings -> Check \"esp8266-flash-size\" and put 4M in this field.\n. Good to hear that it helped.\nI put this tip into FAQ\nhttps://github.com/cesanta/smart.js/blob/master/docs/faq/intro.md#q-i-flashed-esp-module-with-smartjs-it-is-successfully-booted-and-joined-wifi-but-after-reset-the-device-reboots-over-and-over\n. Sorry, but the portion size is platform dependent and cannot be changed via File API.\nI put this information into the doc, to le_obj.read() -> string description:\nhttps://github.com/cesanta/mongoose-iot/blob/master/docs/javascript-api/file.md\n. File.loadJSON returnsundefined on error\n[32968/628] $ f = File.loadJSON(\"nofile.json\")\nundefined\n[32944/604] $ f\nundefined\nAnd seems everything is OK.\nCould you clarity the problem you faced and share steps to repro? \n. Hi,\nAfter Installation and after the commands \"Wifi.setup('wlanname', 'wlanpw')\" and \"registerDevice()\", the ESP reboots every 10 Seconds.\nLooks like, that ESP was flashed with wrong flash-size parameters\n(see here for details: https://github.com/cesanta/mongoose-iot/blob/master/docs/faq/intro.md#q-i-flashed-esp-module-with-mongoose-iot-it-is-successfully-booted-and-joined-wifi-but-after-reset-the-device-reboots-over-and-over)\nBut anyway, as I understand, FNC doesn't work for you.\nYou use Windows 10, right?\n. Hello,\nHow it is going with this issue?\n. @prinzipx \nOk, I'm closing this issue, feel free to reopen\n. Fixed in https://github.com/cesanta/mongoose-iot/commit/6a80905a09811c8acf0df9c939ab67d376862586\n. The problem was in line endings.\nRepo must be checked out with LF, while git for windows, by default, uses CRLF.\nI added .gitattributes to the repo in b26c1ba43d93b449319e9af05130997ccf7029d8, and now it should be ok.\nPS: i don't know how it works on Windows, so, may be the simplest way to apply this fix is to remove folder with cloned repo from disk and pull it again. \n. SSL handshake with RAS 2048 takes ~12 sec, while default WDT timeout was 10 sec.\nI increased default timeout to 15 sec in https://github.com/cesanta/mongoose-iot/commit/e4d3695dd0aa6cd47bc8edcd581f5a75e3a3aae2 and small description of WDT dealing here: \nhttps://github.com/cesanta/mongoose-iot/blob/master/docs/faq/intro.md#q-my-esp-device-is-rebooted-by-watch-dog \n. Hello,\nI just tried and everything works fine for me (i know, it means nothing)\nBut, at first, could you try the latest sources?\nI fixed problem with AP in https://github.com/cesanta/mongoose-iot/commit/3a06147aa27c8f8150093acc850f493d9e8e517b\nNot sure it is related, but still.\n. Since I'm not able to reproduce this issue,..  Let's try to think.\n1. What flash size your devices have? \n2. Do you run some specific JS code during your connections attempts?\n3. Could you share debug output here? Please, make ensure, what debug config looks like this:\n\"debug\": {\n    \"level\": 3,\n    \"stderr_uart\": 0\n  }\nso, level is 3 and errors redirected to UART0\n. Tbh, it is hard to say.\nHow it works: FW disables interrupts, calls callback provided in setISR and enables interruptions back only after callback is completed.\nThus, JS timing is more-more-more important comparing to ability of ESP8266.\nSo, the only way to get numbers, is to make an experiment with your specific code in callback.\n. Do you mean how to send AT command via UART?\nShould be pretty easy\nvar u = UART(0); // or UART(1)\nu.send(\"AT+...\");\n....\n. > Wonder what these console.log.* files are?\nconsole.log prints output to serial but also sends it to cloud, thus, logs can be retrieved by clubby command. If there are too many unsent logs to fit in memory, console.log puts it on flash to send later.\n\nIs there any reason why send_to_cloud is not configurable via configuration page?\n\nNo, it is bug, fixed in a90165486758752f76a766c60c92a1c3797bedb3\n. Hi,\nI tried several time and once I've seen a picture, what the device was unable to connect WiFi.\nCould you reset it a couple of time, for the beginning?\nAnd usual support question: what ESP model, what size of flash, did you try to flash it via esptool/mft/any other serial flasher?\n. ESP-201? \nWhat is actual flash size? Can it be successfully flashed with MFT?\n. @mmikulicic \nAlso I'm not sure MMAP will work\n. what will work is a usage of 2 FSs\n1 - ususal, system\n2 - mounted with SPIFFS_mount - any size, any place\n. @iliapenev \nHi!\nThanx for your fix.\nCould you agree that you accept this: https://docs.cesanta.com/contributors_la.shtml ?\n. Integrated in https://github.com/cesanta/mongoose-iot/commit/ea721afd38fbca2ac65f032a194576659fd25b05\nThanx.\n. what compiler/OS do you use?\n. @iliapenev\nCompilation issue fixed in https://github.com/cesanta/mongoose-iot/commit/a78370b50b7a5d935b3523246e29abb12e96f484\n. @iliapenev \nAs far as I can see mg_coap_free_options is missed after mg_coap_send_message(coap_connection, &msg);\nmg_coap_add_option allocates options by using alloc(); Mongoose doesn't automatically free options  to allow resend the same message if timeout expired (UDP :( )\n. > Resend should be handled by user, as I understand?\nYes :(\n. Anyway, I'll update doc\n. No worries! Thank you for feedback, I've updated doc\n. @cpq \ncannot be integrated \"as is\" because it breaks Windows build\nWill fix. Integrated in https://github.com/cesanta/mongoose-iot/commit/8a2d7910662fdff97dc053e72c10747a25814f8a. Integrated in https://github.com/cesanta/mongoose-iot/commit/9d9ec01b9a9d5f05d3e108794cdbb936e5eac534. Implemented in 57948f396e5098f2cc9249e0103e694056fa9ea4. Unfortunately, this behavior is normal for Windows: its command interpreter (aka command.com) uses double quote character for parameter concatenation. (ex: myprogram \"param with space\")\nTo get \"real\" quote you have to somehow escape double quotes.\nex:\nmos call FS.Remove {\"\"\"filename\"\"\":\"\"\"test\"\"\"}\nmos call FS.Remove {\\\"filename\\\": \\\"test\\\"}\nNote, if you put space between {, filename, :, test or } you need to use \" for grouping:\nmos call FS.Remove \"{\\\"filename\\\":  \\\"test\\\" }\"\nNot sure we can fix it in normal way, this is how windows work . For esp32 & esp8266 implemented in https://github.com/cesanta/mongoose-os/commit/e77fa53040e69050d18f28d6f9bb007231c01a57. cc3200 implemented in https://github.com/cesanta/mongoose-os/commit/7a5b36dc27dc1c10c1912f71318a4ad015572c82. Hi, @Uriziel01 \nWhat do you mean \"Console is empty\"?\nThere are a lot of consoles in mos - mos.exe console (terminal window), serial console in UI, chrome debug console...\nI just tried Chrome 56/Windows 10 - I have output in all those consoles.\nScreenshot maybe?. Closing due to inactivity\nFeel free to reopen. Fixed in d3f5e6ea64f4b926bc911a1f7f079b31db817be7\nNote: even with latest mos tool you probably need to force reload configuration page (Ctrl+F5 or similar) . Integrated in 15c618f7ce3ea968343d6e99aac3b0e75c6fc7ea. Integrated in 0d926b766f2eb138109800be511660776f597fbe\nThanks!. ",
    "eallik": "+1 any news on this? I actually had a transducer connected to my NodeMCU with the voltage range down to [0.0, 1.0] and all, and then realized I couldn't read it from JavaScript... :(\n. This is awesome; I think exactly what one would expect. Going to be using it in a few min. Thanks!\n. thanks! modified flashnchips.pro as you said:\n```\nCONFIG += c++14\nCONFIG += c++11\n```\nand got a new error now:\n(I also installed and enabled GCC 4.9)\nadmin@PW-cmp:~/code/smart.js/flashnchips$ make distclean\nrm -f qrc_blobs.cpp qrc_images.cpp\nrm -f moc_cli.cpp moc_dialog.cpp moc_flasher.cpp moc_prompter.cpp moc_sigsource.cpp\nrm -f dialog.moc esp8266.moc cc3200.moc sigsource_unix.moc\nrm -f ui_main.h ui_about.h\nrm -f cli.o dialog.o esp8266.o flasher.o fs.o main.o serial.o cc3200.o error_codes.o logging.o status.o spiffs_cache.o spiffs_gc.o spiffs_nucleus.o spiffs_check.o spiffs_hydrogen.o sigsource_unix.o qrc_blobs.o qrc_images.o moc_cli.o moc_dialog.o moc_flasher.o moc_prompter.o moc_sigsource.o\nrm -f *~ core *.core\nrm -f flashnchips \nrm -f Makefile\nadmin@PW-cmp:~/code/smart.js/flashnchips$ qmake\nadmin@PW-cmp:~/code/smart.js/flashnchips$ make\n/usr/lib/x86_64-linux-gnu/qt5/bin/uic main.ui -o ui_main.h\n/usr/lib/x86_64-linux-gnu/qt5/bin/uic about.ui -o ui_about.h\ng++ -c -m64 -pipe -O2 -std=c++0x -Wall -W -D_REENTRANT -fPIE -DVERSION=\\\"0.1\\\" -DAPP_NAME=\\\"flashnchips\\\" -DSPIFFS_TEST_VISUALISATION=1 -DSPIFFS_HAL_CALLBACK_EXTRA=1 -DQT_NO_DEBUG -DQT_WIDGETS_LIB -DQT_NETWORK_LIB -DQT_SERIALPORT_LIB -DQT_GUI_LIB -DQT_CORE_LIB -I/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64 -I. -I. -Icommon/.. -I../src/spiffs -I../tools -I/usr/include -I/usr/include/qt5 -I/usr/include/qt5/QtWidgets -I/usr/include/qt5/QtNetwork -I/usr/include/qt5/QtSerialPort -I/usr/include/qt5/QtGui -I/usr/include/qt5/QtCore -I. -I. -o cli.o cli.cc\ncli.cc: In constructor \u2018CLI::CLI(QCommandLineParser*, QObject*)\u2019:\ncli.cc:41:40: error: no matching function for call to \u2018QTimer::singleShot(int, CLI*, void (CLI::*)())\u2019\n   QTimer::singleShot(0, this, &CLI::run);\n                                        ^\ncli.cc:41:40: note: candidates are:\nIn file included from /usr/include/qt5/QtCore/QTimer:1:0,\n                 from cli.cc:9:\n/usr/include/qt5/QtCore/qtimer.h:81:17: note: static void QTimer::singleShot(int, const QObject*, const char*)\n     static void singleShot(int msec, const QObject *receiver, const char *member);\n                 ^\n/usr/include/qt5/QtCore/qtimer.h:81:17: note:   no known conversion for argument 3 from \u2018void (CLI::*)()\u2019 to \u2018const char*\u2019\n/usr/include/qt5/QtCore/qtimer.h:82:17: note: static void QTimer::singleShot(int, Qt::TimerType, const QObject*, const char*)\n     static void singleShot(int msec, Qt::TimerType timerType, const QObject *receiver, const char *member);\n                 ^\n/usr/include/qt5/QtCore/qtimer.h:82:17: note:   candidate expects 4 arguments, 3 provided\nmake: *** [cli.o] Error 1\n. Is that a longer process in this case? i.e. should I just hold on for 5-15 min or just forget about it until it's sorted?\nMeanwhile, I'll just try to get Qt 5.4 installed on the 14.04 LTS machine.\n. I see! Meanwhile, Marko and I are trying to figure out how to best get Qt 5.4 installed on 14.04 LTS \u2014 is the official binary installer download the only option? Or do any members of your team know an apt-get based path?\n. OK, I have it running now with 5.5; only need to find out why the NodeMCU device is not being detected. :)\n. Thank you very much! What a reaction time!\n. Apologies, missed it. \n. I'm not sure I understand this line in Makefile.build:\ninclude ../../../common/platforms/esp8266/common.mk\n\u2014 the ../../.. bit is already pointing above the smart.js repo clone.\nAlso in Makefile, there are some pointers to /cesanta\u00a0\u2014 is that by design?\n. ",
    "ddm": "Docker version 1.8.1, build d12ea79\nDimitri del Marmol\ndimitri.delmarmol@gmail.com\n+32 485 88 49 40\nOn Wed, Aug 19, 2015 at 11:25 PM, Marko Mikulicic notifications@github.com\nwrote:\n\nwhich version of docker do you use?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cesanta/smart.js/issues/16#issuecomment-132790754.\n. Perfect, I modified make.sh and it works\n\nSDK=cesanta/esp8266-build-oss:1.3.0-cesanta\n. Never mind: a make clean fixed it...\n. ",
    "rojer": "this should be fixed now with cesanta/docker_auth#23\n. i don't think flash params are at issue here. \nnevertheless, can you please post log of the flashing process from Help -> Log?\n. flash size is detected correctly:\n1 Flash chip ID: 0xe0 0x40 0x14\n1 Flash size: 1048576\n1 Setting flash params to 0x220\n. please try https://backend.cesanta.com/devel/smartjs-esp8266-last.zip  -\nthis is the latest firmware\nOn Wed, Mar 2, 2016 at 10:05 PM olterion notifications@github.com wrote:\n\nNow I'm really confused about this software.\nI bought exactly the recommended ESP12-E board with a 4MB flash.\nThis is what the flash_id from esptool says:\nManufacturer: e0\nDevice: 4016\nand this is in the log:\n1 Flash chip ID: 0xe0 0x40 0x16\n1 Flash size: 4194304\n1 Setting flash params to 0x220\nBut everything is the same as the other chip.\nWhen I flash the ESP12-E with FNC 0.8.1 and the lastest smartjs firmware I\nget after the first reboot the message\nInit error: {\"message\":\"cannot open [sys_init.js]\"}\nSo now I have the CH340 serial chip insted of the ftdi chip before.\nAlso I tried to flas it with a linux and the FNC for linux.\nBut there is the same behavior.\nI really don't know why I get everytime the same failure with different\nPCs and different operating systems.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cesanta/smart.js/issues/96#issuecomment-191454313.\n\nDeomid \"rojer\" Ryabkov,\nSoftware Engineer\nCesanta Software Ltd.\n. huge thanks to @amid0 for helping debug.\ntogether we found that on subsequent boots something goes wrong with the FS such that it can (no longer) be mounted - spiffs error 10025, failure to read config, core dump. that's on newer firmware versions, that actually check the return code from reading config... :)\non older firmware it manifests as inability to load .js\namid0 took esptool dumps of the FS - note that according to loader his flash is 1MByte / 8 Mbits, but dump is 4MB just in case. fs.dump is take at address 0xe0000, full dump is from 0.\nfrom my side, i'm attaching the exact firmware that was flashed.\nsmartjs-esp8266-last.zip\nit was flashed with F&C so we can be sure it was intact on first boot (and reportedly, first boot works fine).\nthe second boot with debug on produces this:\n\n: sta(5c:cfs_mount             Mount 131072@E0000\nfs_mount             SPIFFS_mount failed: -10025\nload_config_file     === Loading conf_sys_defaults.json\nset_errno            spiffs error: -10000\ninit_device          Failed to load config defaults\nsjs_init             init_device failed```\n. @alashkin Alex, it seems that this is specific to modules with 8Mb/1MB flash chips (ESP-07 in particular).\nsomething happens to FS. do you know what could it be?\nit occurs to me that OTA will not work on modules with < 16Mb/2MB flash because of windowing... but in theory that should not happen before update. can you think of anything else that would go wrong on 1MB flash?\n. ok, i think we have this figured out.\nplease try flashing the latest FW with the latest F&C (0.8.2)\nhttps://backend.cesanta.com/devel/smartjs-esp8266-last.zip\nhttps://github.com/cesanta/fnc/releases/tag/0.8.2\nreopen if this doesn't fix the problem.\n. in 624c0fa10c0a233cce8d952e7b3cb04091cf668b i added Sys.time(), will that do?\n. i'm going to say it is, please reopen if this does not address your problem.\n. it was disabled and APIs had changed. but it's a popular sensor, i think we should re-add it back.\n. we need to trigger a mongoose poll when scheduling a timer. \n. fixed by 13780e6e91edb8ca2b39269d2efc70d4b67d561d\n. there was a bug in AP initialization which was fixed in https://github.com/cesanta/smart.js/commit/9df31ea6dd0352343c8dffc9da9a47770baeb2b4\n. @lukevenediger chip ID is harder to spoof\nthat would be true, if chip id weren't last 3 octets of the mac address.\nthe only difference is that mac address can be changed through api and chip id cannot.\n. yes, master requires new FNC build. we'll release it soon.\n. committed and published, thanks!\nclosing this.\n. msg, the second parameter, can't be NULL.\nc\nchar *error_message;\nsave_cfg(cfg, &error_message);\n. the first thing save_cfg does is set *err_msg to NULL.\nsave_cfg works with NULL for error_message on CC3200.\nthat's because CC3200 is magic - NULL dereferences do not trigger exceptions. internal ROM is mapped at address 0, so reading it is obviously fine, but so is writing, which is unexpected.\nwrt log you posted - spiffs errors are benign, conf_vendor.json does not exist and it's ok.\nit says it saved the config, so it's fine.\n. i'm going to close this - looks like a NULL dereference in your code that was not caught on CC3200 because it's weird.\n. there is an MD5 implementation in ROM, we use it for SSL.\nhttps://github.com/cesanta/mongoose-iot/blob/master/common/platforms/esp8266/esp_crypto.c\n. thank you for the beautiful stack trace :)\nconnection state seems ok, but rx_chain is obviously corrupt. hm.\nsince the line number doesn't match up to current master, can you give me the exact revision of mongoose.c or just attach it here? thanks!. i cannot find 5ce6ae36 among the commits, and neither does github (since it's not linkified). also, is this easily reproducible in your setup? if yes, please raise debug.level to 3 and set debug.mbedtls_level to 3 as well and post the log. i'd like to see how far in the handshake it gets.. fwiw, i did some testing downloading a file from the device with SSL on, in both station and AP mode, client and server, connecting and disconnecting and have not encountered this.. there are currently no known bugs in mgos that manifest like that (which is not to say there aren't any, of course).\nheap integrity error is usually a use-after-free. integrity is checked on every malloc/free, meaning it must've happened fairly close to the place where it was detected. unfortunately, i don't have any suggestions for narrowing it down other than inserting printfs in a bunch of places.... Error: nvs: failed to get data: \"nvs\": no source specified\nplease update your mgos tool, this is a recent change. ok, so the immediate issue is fixed - in case of an OOM, the packet will just be dropped.\nhowever, i wonder why you are hitting this at all. are you running close to memory limit?\non the ping-pong issue - that has been fixed, you should stop seeing it now.. also, CC3200 SDK and NWP update is on the way and it allows setting dhcp hostname. once that lands, i'll update mOS to do it.. hm. so, latest NWP update has this item in the changelog:\nSL_WIFI_R1-1617 DHCP: Add support for hostname field in dhcp request\nso NWP can do it now, but i don't see any new API calls or options in the host driver in SDK 1.3.0.\nposted a question on E2E.. mos flash -v 4 --logtostderr please. @pedroherig weird - the device sends more sync responses than we expect.\ni made a change to connection logic, can you download new mos.exe from the site and try again?\nif it still doesn't work, please post the log here.. thanks, good to know!. @Aterocana i think i'm going to need to install arch to try. which version are you using?. @kzyapkov make sure you have this in your repo.. thank you!. so, even setting to the same value does not work? bummer.\ni'll do it, but may not get around to it for a while. in the mean time, PRs welcome.\ndevice's ATCA.SetConfig handler is here.. i think you are right here. i looked closer in the datasheet and ECC private key is the typical use for slots 0-7. when implementing this, i misinterpreted it. i'll relax the check.. that should be a simple matter of relaxing the constraint, setting keys from pem is already supported.. yes, still an issue.. LAN87x0 and TLK100 are now supported, please see https://github.com/mongoose-os-libs/ethernet\nESP32 includes EMAC and only needs a PHY. I don't see a compelling reason to use ENC28J60 (which includes a MAC), let alone Wiznet 5100 (which is everything + a kitchen sink kinda chip).\nMay save a couple pins (though SPI is at least 3 pins, 4 with CS), but requires more complexity on the software side, for what seems like little benefit. @tusharvb19 if you see reasons for us to support these more full-featured controllers, please file a separate issue.. as a first step, i am going to add a global password-based protection (using http digest auth) for all HTTP requests. static files, handlers - everything. this should take care of basic HTTP server protection, and should finer-grained control be required, we can consider it later.. https://github.com/cesanta/mongoose-os/commit/2b26fa0be901f3365e7ad276ab196c40c4475a1a\nwith this, you should be able to generate a password file with the standard htdigest utility like so: htdigest -c fs/htpasswd mydomain admin, put it on the device's filesystem, configure http.auth_domain=mydomain and http.auth_file=htpasswd. with that, all HTTP accesses will require user admin with a valid password. curl supports digest auth, enable it with --digest in addition to the -u admin:password argument.. ok, that was kind of embarrassing. it's fixed now, and with a test even. they are not published, but they exist, even though it may seem like they don't :)\ni also added mgos_register_http_endpoint_opt - with this, you can register an unprotected endpoint. does this solve the problem for you?. @iliapenev no, it works fine for me, i just tested. if you register your endpoint like this:\nc\n  struct mg_http_endpoint_opts opts;\n  memset(&opts, 0, sizeof(opts));\n  mgos_register_http_endpoint_opt(\"/\", hh, opts);\nit handles all requests not handled by other endpoints, without authorization.. @JonnyBGod we follow esp-idf pretty closely, the version we have in the build image at the moment is just a few days old - https://github.com/espressif/esp-idf/commit/3cad00fdcca7dd4b7939d7862407c000c29657c1\ni tried to pull even more recent fixes, but in fact, ESP-IDF is currently broken: https://github.com/espressif/esp-idf/issues/520\ni'm waiting for that bug to be fixed.. fixed by https://github.com/cesanta/mongoose-os/commit/721722e6f0f221a96e3026c89e76efcd811b2dbb. sorry, i tried your code and was unable to repro - the loop runs fine for me, with and without mgos_adc_read, for at least several minutes. no WDT resets and no boot hangs.\ncan you still reproduce it? do you have another module to try it on?. i finally got around to it, and https://github.com/cesanta/mongoose-os/commit/a71bfbade5964601b004bc3f1de8d75616e46137 implements essentially this.. thanks Kirill for a detailed report, i found and fixed the issue, fix will land soon. also, minor optimization along the way: https://github.com/cesanta/mongoose-os/commit/3946ee7b96280af7714055784e905172fd64000d. unfortunately not, we never ported coredumps to CC3200.. can you post debug.level=4 log?. having looked closer at this, i can now say that the behavior is valid and your fix is the right thing to do.\nin your initial version, you create a connection and then use it forever to send things.\nthis would, in fact, work if the address were an IP address. but because address is a DNS name, it tries to resolve it first, fails, and at that point connection is closed and destroyed, after which using the same pointer leads to a crash.\nwhen you properly handle MG_EV_CLOSE by re-creating the connection, the connection pointer is updated and old connection is no longer used, which is the right thing to do.\nremember to always handle EV_CLOSE. no matter what the reason is, after EV_CLOSE connection is gone and the pointer must not be used again.\nthat said, i acknowledge that this behavior with DNS vs IP addresses is inconsistent. i'll keep that in mind. maybe instead of giving up on the connection and auto-closing it, we should retry DNS lookups until user explicitly closes the connection. we'll thing about it.. so, i'm going to close it as WAI - for now, at least.. yes, mongoose currently does not perform the second phase of QoS 2 publishing. event 205 is the PUBREC message which requires a PUBREL response. i'll look into that.. hm. looks like SDK does not always transition from STA to disabled properly. will take a look.. so, i don't see anything wrong with what we're doing.\nand i actually was not able to reproduce the problem, even at a higher rate of switching (10 seconds between mode flips). what i see from your log is that sometimes device gets stuck in the AP mode and then when switching to STA we try to set AP+STA because get_opmode still reports AP.\ni made the change above, which should change the behavior a bit - we will now try to set AP-only mode.\nit may help. try it, let me know.. thank you!. @MartyMacGyver i agree with you, and this is what the code above aims to do. the library expects an 8-bit addr, and we allow it.if the address provided is < 127, i.e. 7.bit, we shift it by 1. so this should work naturally with default addresses. i don't see the problem here.. yes, there is no mos-level support for deep sleep persistence yet. but you are welcome to use RTC_DATA_ATTR for now.. here's a snippet from an internal project that i wrote (with actual code cut out). but the boilerplate and comment are relevant.\nput it into a file called rtc_wake_stub_main.c in the src dir (the rtc_wake_stub_ prefix is important).\n```c\ninclude \"esp_sleep.h\"\ninclude \"rom/ets_sys.h\"\ninclude \"rom/uart.h\"\ninclude \"soc/timer_group_reg.h\"\ninclude \"soc/timer_group_struct.h\"\n/\n * esp_wake_deep_sleep() is run by ROM very soon after wakeup from deep sleep.\n * Main RAM is available but contents have not been preserved so it's only good\n * for use as a scratch pad (be sure not to scrawl over the areas used by ROM).\n * Flash areas have no been mapped yet, but flash can be accessed via ROM funcs,\n * see flasher stub code for inspiration. Make sure you really use ROM though,\n * as IDF hides them pretty well and they are replaced with IRAM-based ones.\n * Those, of course, won't work. There are no exception handlers yet, so don't\n * expect any output on UART if the code crashes. TG0 WDT will restart the\n * device though in about 1 second though so it's not the end of the world.\n \n * Note that .bss does not seem to be zeroed.\n \n * Also note that at present data is placed into the RTC_SLOW segment,\n * which is, well, slow to access. Moving .rtc_data and .rtc_rodata to RTC_FAST\n * RAM will not only make it coexist better with ULP.\n * https://github.com/espressif/esp-idf/issues/1553 has been filed for that.\n \n * NB: ESP32 has no hardware divider, so be sure not to use integer division.\n \n * See http://esp-idf.readthedocs.io/en/latest/api-guides/deep-sleep-stub.html\n * for more details.\n /\nuint32_t g_rtc_ram_data_flag;\nvoid esp_wake_deep_sleep(void) {\n  esp_default_wake_deep_sleep();\n  / Do stuff here /\n  g_rtc_ram_data_flag = 1;\n  uart_tx_one_char('!');\n  uart_tx_one_char('\\n');\n}\n```\nit should print an exclamation mark at boot when coming out of deep sleep.. thanks! it's not quite a bug, but rather an unanticipated way to use this function. but i like it.\nhowever, i'm not going to merge this particular PR, because believe it or not use with timings of 0 is required for neopixels to work (fiddly little bastards they are).\ninstead, i have a PR out to change arguments to ints and make < 0 skip a phase entirely.\nyou'll need to modify your code to use -1 instead of 0, but otherwise the effect should be the same.. we moved things around and the default flash layout is now 4MB.\n1MB is still supported, but you need to specify\nbuild_vars:\n  FLASH_SIZE: 1048576. over to @cpq for UI part. fixed by https://github.com/cesanta/mongoose-os/commit/9faa8bd3a2cfd5419d5657dd5a4130486d98cf93 and https://github.com/cesanta/mongoose-os/commit/7bba6c6546d9132033c8de3d7e3629a36a53a854. i think we discussed this on gitter. ufortunately, there really is no way to squeeze mos with useful functionality into 1MB flash.. thanks for the detailed report. turns out, ESP32 has a hardware bug in UART receiver which prevents 2 bit stop mode from working properly. when testing, i only tested transmitting in 7O2 mode, not receiving... the fix has been sent and will land in the public repo soon.. i can confirm the issue, will investigate in the near future.. i'm going to close this - i think it was fixed upstream since then.. @kzyapkov thanks for tracking this down!. i think - 1 here is to ensure NUL-termination. i think we should adjust buffer size at the call site instead. where is the call site for this particular conversion?. sorry, this fell through a crack somehow. fix sent.. i sent an internal PR loosely based on this. once it's merged, this one will be closed and public repo shoudl be updated shortly.. i believe this is a regression in ESP SDK reported in https://github.com/espressif/ESP8266_NONOS_SDK/issues/119 and as a workaround we rolled back to earlier SDK version in https://github.com/cesanta/mongoose-os/commit/3212e004e4781122a71b4eb267c6f5feac31e686. ahem... well, OTA is not implemented for CC3220 yet. the whole thing is basically a stub. so... yeah. :). a number of improvement have been made to CC3220 support since then, including fixing related issues.\nautomated hardware tests are now running against the platform too, which include file operations (put, get, ls).\ni am going to optimistically close the issue, but please do reopen if it still exists.\nthanks!. oh wow, it's been in my repo all this time! i forgot to check it in.\nPR sent, change will land soon.\nhowever, the good news is that you won't need it for this purpose - check out mos debug-core-dump and also automated coredump analysis in mos console - https://github.com/cesanta/mos-tool/commit/9991c589bbaac33e293d671892987b747066e20d. looks good, i will apply the change.\nthanks!. indeed. fix sent!. integrated thank you!. fixed by https://github.com/mongoose-os-libs/wifi/commit/35277c2cbd3f7e638685018b154873203cdc0bd0. makes sense, integrating. will be picked up in the next image update.. @nkapser that's right. this is due to the change in how debouncing logic works (https://github.com/cesanta/mongoose-os/commit/cb8e3dfb9c1750bd7bd5282e652615032395968e#diff-f725f868172e28918edf54206c820338) - we need to know which is the active state of the button, 0 or 1, so we can check if the button is active after designated debounce time. we deduce it from the edge that is used to detect the activation.\nwith any edge we just don't know what to check for. so, if you need interrupts on any edge, use mgos_gpio_set_int_handler().. for various reasons it is not trivial to abort an update and start a new one at the same time.\nthe timeout you see is the 5 minute default timeout, controlled by the update.timeout.\ni don't see anything out of ordinary in the log except taht download proceeds very slowly and you just need to increase the update.timeout setting.\ni will add a field to OTA.Update RPC so it can be specified per-request, but for now you'll need to change the configuration setting.. well, there's nothing to suspect here, really, in the log you provided the reason for update failure is quite clear:\n[May  9 21:59:55.634] updater_context_crea starting, timeout 300\n[May  9 21:59:55.637] mgos_event_trigger   ev MOS3 triggered 0 handlers\n[May  9 21:59:55.643] mgos_ota_http_start  Update URL: http://192.168.0.18:8000/fw.zip, ct: 300, isv? 0\n...\n[May  9 22:00:26.129] mgos_upd_file_begin  Writing FS image @ 0x350000\n[May  9 22:00:27.757] updater_set_status   Update state 3 -> 4\n[May  9 22:00:27.760] updater_process_int  Processed 0, up to 0, 435 left in the buffer\n[May  9 22:00:27.766] updater_process_int  fs.img 0 of 262144\n...\n[May  9 22:04:55.409] updater_process_int  fs.img 210432 of 262144\n[May  9 22:04:55.412] mgos_event_trigger   ev MOS3 triggered 0 handlers\n[May  9 22:04:55.651] updater_abort        Update timed out\n[May  9 22:04:55.657] updater_set_status   Update state 4 -> 9\n[May  9 22:04:55.660] updater_finish       Finished: -5 Update failed\n```\nthat's 5 minutes and it didn't finish downloading even the fs image. i'm not sure why download is so slow, but that's the reason, for sure.. this was integrated in e94991ed21b943876bd97805103868080e8101b5, closing now. thanks!. i believe i have a fix for this, about to send a PR. fixed by https://github.com/cesanta/mongoose-os/commit/f3c448285a72a3dcaee4d1bf2a6768222193a402 and . this is because filesystem is handled slightly differently: first flashing is in plain text but it is then encrypted on first boot. it looks like you did not allow that process to take place.. ow. that's not good. thanks for fixing, integrating now!. yes, we do not provide binary libs for stm32 yet, it's a work in progress and will be addressed before STM32 support is GA. it took a bit longer than expected, but this problem has been fixed in 2.5.1 (just released). i'll need full build command line you're using\n\nit looks like there is no STM32 definition for mg_hash_sha1_v\n\ncould very well be, STM32 support is still work in progress. it took a bit longer than expected, but this problem has been fixed in 2.5.1 (just released). @andyjjones1 i tooka  quick look and can confirm you observation.\nit seems that internally some transition happens some time after initial STA connection.\nthe trabsition from STA to AP goes fine if triggered before pm open,type:2 0 message appears in the log (about 10 seconds after connection) and fails if it happens after.\njudging by event in the log, it seems that before this transition wifi disconnection has immediate effect and afterwards it requires a task switch to take effect, which is what your timer workaround accomplishes. esp8266 is kind of a special snowflake, with no real rtos, which is part of the problem - the code has tor elinquish control before wifi stack gets to run again.\ni thought about ways to fix this, and it's not trivial. given that we generally say that changing wifi configuration requires a reboot, i'm going to close this one without further action. i'm glad you found a workaround, and hopefully others will too, now that it's published here.. yes, for STM32 you need additional specifications - at least device family (F4, L7 or L4). also you need prebuilt binaries, which we currently prbuild only for F7 and L4. the upshot is, that full support is only available for 3 boards: B-L475E-IOT01A, DISCO-F746NG and NUCLEO-F746ZG. i believe this was finally fixed by https://github.com/cesanta/mongoose-os/commit/34aa64d86baefa4ce167c0ab8c0cf3f556b44011. what you said is true, but our rpc authentication mechanism is not meant to protect from replay or tampering.\nfor that, channel protection is a must - TLS or a paired BLE association.. ok, i will close it as \"not working as not intended\" then.. so, i actually had a look at this today. yes, it fails with checksum error, but no, hashing seems to be workign correctly - i even wrote an extensive test suite to verify that on all our platform. well, at least we have that.\nwill have another stab at it later.. @WooWapDaBug it's been fixed, but commits are not published immediately. they are now (see above).. ok, in my testing 25 KHz definitely works, even 40 KHz does.\ni'm removing the check and let you guys figure out what makes sense for yourself.. so, the problem is that correction gets applied twice to the timer created in the callback.\nhowever, the solution is not correct because it won't work on subsequent time syncs, when time is adjusted by smaller amounts.. so, upon further musing on this, i still don't quite like the solution. it takes care of the initial big jump in time, but the problem - double correction - is still there. it still affects timers created from time change callbacks.\nthe underlying problem is that what we really need for timers is a stable monotonic clock but wall time tends to jump around, sometimes by huge amounts (initial setting).\nso, today i worked on a change that adds high precision, monotonic clock to all platforms - mgos_uptime_micros() (will be submitted soon). we should make mongoose use that for timers. it will require no adjustment and therefore will also fix this bug.\nso, i'm not going to merge this PR and will leave it open instead, and will close it when the timer refactoring happens.. https://github.com/cesanta/mongoose-os/commit/0b8ac8aede3afedf68cf969b10ff2a15676b44dd is the integration commit, closing this one.. integrating this now, thanks a lot!. https://github.com/cesanta/mongoose-os/commit/324ab2516a41196ac55d6ee15e39ac07374e7e66. annoyingly, uint32_t is defined differently on different platforms - sometimes it's unsigned int but sometimes it's unsigned long so there's no one true format character for it.\nso, when integrating, i slightly modified it to cast to (unsigned long) and %ul to match. unsigned long is 64 bits on amd64, so it'll work for the purpose you're using it here as well.. well, it ends up being 32-bit of course. on armhf sizeof(int) and sizeof(long) are both 32 bits, some compiler/library authors define it to unsigned long, some to unsigned int. we definitely have both flavors among our platforms, but i forget which is which... that's the reaosn you see casting to (int) or (unsigned int) when printing (i find PRI* macros are even worse).. extern \"C\" in the headers. please don't include mgos.h in header files. it's a big bucket and brings in a lot of stuff that users may not want. IWYU.. copyright blob missing. you need -Wl,--end-group there too. dithc the variable, we don't need it, so:\n$(Q) $(CC_WRAPPER) $(LINKER) -Wl,--start-group $(OBJS) $(APP_BIN_LIBS) $(LDLIBS) -Wl,--end-group $(LDFLAGS) -o $(BIN_DIR)/$(APP). ",
    "ybouhjira": "```\nsl\ufffd\u0012\ufffdr\ufffdbl\fc\ufffd\ufffdno\ufffdlon\ufffd\ufffd\ufffd\fc\u001cp\ufffd\ufffdlslrlp\ufffdo\ufffd\u0010\f\f\ufffd\fl\f\f\f\f\f\fb\fn\ufffd|\ufffd\fll\ufffd\fc\ufffd\ufffdon\ufffd\ufffd\u0012\u0013on\fl`\u000eor\ufffd\ufffd\ufffdn\f\f\ufffd\u0012l`p\ufffdo\ufffd\u0010\f\fr\ufffd\ufffd\ufffd\ufffd\ufffd\f\f\f\fb\fn\ufffd|\ufffd\ufffd\ufffd\ufffd\fc\ufffd\ufffdon\ufffd\fr\ufffd\ufffd\ufffd\ufffd\ufffdl\ufffd\f\fb\fn\ufffd|ll\ufffd\u001c\ufffd\fb\ufffd\ufffdon\ufffd\ufffd\ufffdo\f\f\ufffd\ufffd\u000flrl\n\nMy Cesanta cloud ID: //api.cesanta.com/d/_2FBL7M \nMy PSK: 5sX8MdBjYQ \nUse these credentials to add this device on https://dashboard.cesanta.com/ \nScanning nets \nExecuting init.js\nHello world \nscandone\nwifi scan failed: 1\nCannot find known network, use Wifi.setup \nf 0, init.js called\nsmartjs 24664/2004$ scandone\nadd 0\naid 3\npm open phy_2,type:2 0 0\ncnt \nconnected with Dlink, channel 11\nWifi status changed to \ndhcp client start...\nWifi status changed to 3 \nip:192.168.0.50,mask:255.255.255.0,gw:192.168.0.1\n```\n. ",
    "necrodome": "Thanks for the pointer. I tried with a a different network, and it managed to make the request.\nIs there a way to tell smart.js to use a specific dns server?\n. Great. Do you have a timeframe or list of issues for mongoose integration?\n. Thanks for all the info.\n. ",
    "maxogden": "I get a similar, but different, error when running the same thing (on ubuntu 14.04 x64)\nmax@burrito:~/smart.js/platforms/esp8266$ sudo sh make.sh\nUnable to find image 'docker.cesanta.com:5000/esp8266-build-oss:1.3.0-cesanta' locally\nPulling repository docker.cesanta.com:5000/esp8266-build-oss\n2015/09/25 17:51:06 HTTP code: 404\n. ",
    "pastukhov": "Why? \nI'm still getting [Cloud] is not defined\n. @mmikulicic Yes, this would be great!\n. +2\n. ",
    "fedy2": "Tested with logs enabled: http://pastebin.com/Tc90bLwW\n. With the --overwrite-flash-fs param the flash operation completed successfully.\nHowever the device don't reply to console commands. I will open a new issue about it.\n. With the --esp8266-flash-params 0x0000 param the console works after a re-connection.\nHowever the first message after flashing is un-readable:\n--- flashed successfully\n--- connected\nload 0x40100000, len 31868, room 16 \n\ufffd\u0184E\ufffd\u6146\u0105b\u6104\u0106\ufffd\ufffd\ufffd\ufffdD\u00c7\ufffd\u0125\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u01c4\ufffdb\ufffd\ufffd\ufffdb\u0167\u0104\ufffdD\u00c7\ufffd\u0125\ufffd\ufffd\u0106\ufffd\ufffd\ufffd\u0124\u7184b\ufffd\u0184E\ufffd\u6146\u0125b\ufffd\u0104\ufffdE\ufffd\n--- disconnected\n. After the reset I've obtained the device id and psk. Thank you.\n. Nope. I have to specify both the parameters.\n. Here some output from the console:\nsmartjs 30048/2484$ Wifi.status()\ngot ip\nsmartjs 29464/2388$ Wifi.ip()\n192.168.1.108\nsmartjs 29464/2388$\n. I get this result:\n[[{\"__name__\":\"temperature\",\"sensor\":\"1\",\"src\":\"//api.cesanta.com/d/dev_84227\"},[[1443690822306,37.5488386757]]],[{\"__name__\":\"temperature\",\"src\":\"//api.cesanta.com/d/fakedevice03\"},[[1443628202572,27.03]]],[{\"__name__\":\"temperature\",\"src\":\"//api.cesanta.com/d/fakedevice01\"},[[1443628201987,13.94]]],[{\"__name__\":\"temperature\",\"src\":\"//api.cesanta.com/d/fakedevice02\"},[[1443628202260,19.3]]]]\nI don't remember if dev_84227 is an old device. Anyway I don't see data from the last device.\n. I see the chart scrolling on the left but no values on it. In the IDE area the device results offline.\n. @mmikulicic I'm using only one browser tab/windows with one \"instance\" of the dashboard. When I've used the tab term I've referred to the different areas of the dashboard.\n. ID: //api.cesanta.com/d/dev_65156\n. I see it in my network. There is a way to test if it can communicate with your servers? Any console command?\n. I've run this code:\nHttp.get(\"http://jsonip.com\", function(data, error) {\n  if (error) {\n    print(\"error \", error);\n  } else {\n    print(\"my ip is \", JSON.parse(data).ip);\n  }\n});\nAnd I got the IP printed:\nsmartjs 12704/1812$ my ip is  87.XX.XX.195\nSo I think the device can communicate with the world.\n. Nope :( forgot about, sorry. \nI've tried now to run it different times but the ESP seems hanging.\nThe last time I got this:\n```\nsmartjs 16912/1980$ demo()\nInitializing demo data source \nStarting temperature push demo in background, type Debug.mode(1) to see activity \nets Jan  8 2013,rst cause:4, boot mode:(1,0)\nwdt reset\n```\nCan be a power issue?\n. Here the output:\n```\ndemo()\nInitializing demo data source \nStarting temperature push demo in background, type Debug.mode(1) to see activity \nPushing metric \nets Jan  8 2013,rst cause:4, boot mode:(3,0)\nwdt reset\nload 0x40100000, len 26380, room 16 \ntail 12\nchksum 0xd1\nho 0 tail 12 room 4\nload 0x3ffe8000, len 2564, room 12 \ntail 8\nchksum 0x1c\nload 0x3ffe8a10, len 6320, room 0 \ntail 0\nchksum 0xbe\ncsum 0xbe\n\ufffd\ufffd\ufffd  yr\ufffd'\ufffd\u0012\ufffd\ufffd\u03b8\ufffd\ufffd\f\u0018\ufffd\ufffd\ufffd\u001c\ufffd\ufffd\ufffd\f\u001c\ufffd\f\u001cp\f\u0018\ufffdb\ufffd#\ufffdn\ufffd$\ufffd\ufffd\fb\ufffd\ufffd>\ufffd\u0012\ufffd\u0007rn\ufffd$\ufffd\ufffd\ufffd\u001cr\u0018\ufffd\ufffdn\u0012\ufffd\u001b\ufffd\ufffdrn\u0012\ufffd\ufffdN\ufffd\ufffd\ufffd\f\u0018\ufffd\ufffd\ufffd\u001c\ufffd\ufffd\ufffd\f\u001f\u0012\ufffd8\f\u0018\ufffdb\ufffd#\ufffdn\ufffd$\u000ep\f\u0018\ufffd\ufffd\ufffdr\ufffd'bl\u001c\ufffd\ufffd\ufffd;\u0018\u001b\ufffd n\ufffd{\ufffd\u000f\ufffdl\ufffd\ufffd\ufffd  \ufffd\u0007b\ufffd\u001b\u0012\ufffd\u0612\ufffd\u0018\ufffd\u001b\u0004\ufffd\u0007\ufffd#\ufffd\ufffd yr\ufffd'\ufffd\u0012\ufffd\ufffd\u03b8\ufffd\ufffd\f\u0018\ufffd\ufffd\ufffd\u001c\ufffd\ufffd\ufffd\ufffd8\u001c\fb\ufffd\u0004\ufffd\ufffd\u0012nn\ufffd$\u000e\ufffd\fb|\ufffd\u0012\ufffd\u0007rn\ufffd$\ufffd\u00cc\u001cr\u0018\ufffd\ufffd\ufffd\ufffd\ufffd\u0012\ufffd\u001b\ufffd\ufffdrn\ufffd\u010f\u001c\ufffd\ufffd\ufffdl\u001c\ufffd\f\u001fr\u0018\ufffd\u0012n\ufffd\ufffd\u0012\ufffd\u001b\ufffd\ufffdrn\u0012\ufffd\ufffd\u03b8\ufffd\ufffd\f\u0018\ufffd\ufffd\ufffd\u001c\ufffd\ufffd\ufffdl\ufffd\ufffd\f\u001cr\u0018\ufffd\ufffd?b\ufffd\ufffdr\ufffd\ufffd\u0012\ufffd\u0102\ufffd\ufffd\ufffdp\ufffd\ufffd\u0018\ufffd\ufffd8\ufffd\ufffd\u0112`\u001b\u011c\ufffdr\ufffd\ufffd\ufffd\u0012\ufffd\u001bn\ufffd\ufffd\ufffd\ufffd\ufffd\u0012\ufffd\u001bN\u01f2\ufffdmode : softAP(1a:fe:34:9c:a2:a1)\ndhcp server start:(ip:192.168.4.1,mask:255.255.255.0,gw:192.168.4.1)\nadd if1\nbcn 100\napnetif->dhcps_pcb = 1073709328\nbcn 0\ndel if1\nusl\nsul 0 0\nmode : sta(18:fe:34:9c:a2:a1)\nadd if0\nDevice id: //api.cesanta.com/d/dev_76813 \nDevice psk: psk_XXXXX\nCloud: //api.cesanta.com \nHELO! Type some JS. See https://github.com/cesanta/smart.js for more info. \nsmartjs 15128/1968$ \n. Duplicate of #23 \n. Nope, Linux Mint 17.1\n.\nfedy2@guendalinaXII ~/esp/smart.js/platforms/posix $  docker images | grep eabihf-arm-build\ndocker.cesanta.com:5000/eabihf-arm-build     latest              981fea4696c5        7 weeks ago         507.7 MB\n``\n. I've triedmake` but I get this:\nfedy2@guendalinaXII ~/esp/smart.js/platforms/posix $ make\nMakefile:31: ../../../v7/scripts/platform.mk: No such file or directory\nmake: *** No rule to make target `../../../v7/scripts/platform.mk'.  Stop.\n. Perfect. Is working now.\n. The demo function don't crash immediately. I get this output:\nsmartjs 29152/2280$ demo()\nInitializing demo data source \nStarting temperature push demo in background, type Debug.mode(1) to see activity \nundefined\nsmartjs 24304/1140$ \nTrap 28: pc=0x4025a380 va=0xf96688\nDumping core to debug output\nif you want to dump core, type 'y', or else connect with gdb\nI've registered the device in the dashboard and I see one value from the device:\n[{\"__name__\":\"temperature\",\"sensor\":\"1\",\"src\":\"//api.cesanta.com/d/dev_36552\"},[[1443813318096,25.8976682675]]]\n. 1. What model of ESP do you use?\nESP8266 - 01\n1. How long it works before crashing?\nWith last tests immediately.\n1. Could you turn debug output on (Debug.mode(1)), run again and paste output here?\nI got no output, the console hangs after the demo command outputs:\nWifi.status()\ngot ip\nsmartjs 29152/2256$ Debug.mode(1)\n1\nsmartjs 29152/2256$ demo()\nInitializing demo data source \nStarting temperature push demo in background, type Debug.mode(1) to see activity \nPushing metric\n1. As I understand, you connect Wifi before running demo, yes?\nYes.\n1. Could you paste breakdown output as well?\n```\nsmartjs footprint breakdown\n\n           .text          .irom0.text    .rodata        .data          .bss\n\nv7             0              59959          0              0              0            \nsmartjs        494            52780          0              0              0            \nsys            10649          123705         0              0              0            \ntotal          11143          236444         0              0              0              \nFirmware size is 396Kb (of 512Kb), 23% is available\n```\n. I've pulled the new code, compiled and flashed it.\nThen I've setup the Wifi and run the demo code, worked fine few times until I've set debug mode to 1 and the console hanged.\nI've restarted the device, tried again the demo function but it hangs.\n1. http://www.filedropper.com/firmware\n2. Yes. I write commands but get nothing back.\n3. Yes, I'm using Flashnchips.\n. Yes, I used it to send DHT11 values from the ESP to my site, worked fine with no issues.\nI've tried again.\nIf I run the demo after the flashing operation it works fine and I see the log after set debug mode to 1 (I don't see data in the dashboard chart).\nIf I reboot the device and run the demo it hangs the device.\n. Here the output:\nfedy2@guendalinaXII ~/esp/smart.js/platforms/esp8266 $ ./make.sh clean && ./make.sh\n  CC user/c_sscanf.c -> build/c_sscanf.o\n  CC user/dht11.c -> build/dht11.o\n  CC user/disp_task.c -> build/disp_task.o\n  CC user/disp_task_net_test.c -> build/disp_task_net_test.o\n  CC user/esp_coredump.c -> build/esp_coredump.o\n  CC user/esp_data_gen.c -> build/esp_data_gen.o\n  CC user/esp_exc.c -> build/esp_exc.o\n  CC user/esp_flash_bytes.c -> build/esp_flash_bytes.o\n  CC user/esp_gdb.c -> build/esp_gdb.o\n  CC user/esp_gpio.c -> build/esp_gpio.o\n  CC user/esp_http_client.c -> build/esp_http_client.o\n  CC user/esp_i2c.c -> build/esp_i2c.o\n  CC user/esp_sj_hal.c -> build/esp_sj_hal.o\n  CC user/esp_sj_wifi.c -> build/esp_sj_wifi.o\n  CC user/esp_spi.c -> build/esp_spi.o\n  CC user/esp_ssl_krypton.c -> build/esp_ssl_krypton.o\n  CC user/esp_timers.c -> build/esp_timers.o\n  CC user/esp_uart.c -> build/esp_uart.o\n  CC user/libc_replacements.c -> build/libc_replacements.o\n  CC user/user_main.c -> build/user_main.o\n  CC user/util.c -> build/util.o\n  CC user/v7_esp.c -> build/v7_esp.o\n  CC user/v7_esp_hw.c -> build/v7_esp_hw.o\n  CC user/v7_fs.c -> build/v7_fs.o\n  CC user/v7_http_eval.c -> build/v7_http_eval.o\nuser/v7_http_eval.c: In function 'server_eval':\nuser/v7_http_eval.c:28:3: error: format '%s' expects argument of type 'char *', but argument 5 has type 'void *' [-Werror=format=]\n   snprintf(buf, size + 1, \"%.*s\", (int) size, body);\n   ^\nuser/v7_http_eval.c:28:3: error: format '%s' expects argument of type 'char *', but argument 5 has type 'void *' [-Werror=format=]\nuser/v7_http_eval.c:29:3: error: passing argument 2 of 'v7_exec' from incompatible pointer type [-Werror]\n   err = v7_exec(v7, &v, buf);\n   ^\nIn file included from user/v7_http_eval.c:11:0:\n../../src/v7.h:106:13: note: expected 'const char *' but argument is of type 'v7_val_t *'\n enum v7_err v7_exec(struct v7 *, const char *js_code, v7_val_t *result);\n             ^\nuser/v7_http_eval.c:29:3: error: passing argument 3 of 'v7_exec' from incompatible pointer type [-Werror]\n   err = v7_exec(v7, &v, buf);\n   ^\nIn file included from user/v7_http_eval.c:11:0:\n../../src/v7.h:106:13: note: expected 'v7_val_t *' but argument is of type 'char *'\n enum v7_err v7_exec(struct v7 *, const char *js_code, v7_val_t *result);\n             ^\nuser/v7_http_eval.c:31:3: error: enumeration value 'V7_STACK_OVERFLOW' not handled in switch [-Werror=switch]\n   switch (err) {\n   ^\nuser/v7_http_eval.c:31:3: error: enumeration value 'V7_AST_TOO_LARGE' not handled in switch [-Werror=switch]\nuser/v7_http_eval.c:31:3: error: enumeration value 'V7_INVALID_ARG' not handled in switch [-Werror=switch]\nuser/v7_http_eval.c:41:3: error: enumeration value 'V7_STACK_OVERFLOW' not handled in switch [-Werror=switch]\n   switch (err) {\n   ^\nuser/v7_http_eval.c:41:3: error: enumeration value 'V7_AST_TOO_LARGE' not handled in switch [-Werror=switch]\nuser/v7_http_eval.c:41:3: error: enumeration value 'V7_INVALID_ARG' not handled in switch [-Werror=switch]\nuser/v7_http_eval.c:59:3: error: pointer targets in passing argument 2 of 'espconn_sent' differ in signedness [-Werror=pointer-sign]\n   espconn_sent(c, resp, strlen(resp));\n   ^\nIn file included from user/v7_http_eval.c:7:0:\n/opt/Espressif/ESP8266_SDK/include/espconn.h:290:7: note: expected 'uint8 *' but argument is of type 'char *'\n sint8 espconn_sent(struct espconn *espconn, uint8 *psent, uint16 length);\n       ^\nuser/v7_http_eval.c: In function 'server_serve':\nuser/v7_http_eval.c:72:3: error: unknown type name 'spiffs_stat'\n   spiffs_stat stat;\n   ^\nuser/v7_http_eval.c:73:3: error: unknown type name 'spiffs_file'\n   spiffs_file fd = 0;\n   ^\nuser/v7_http_eval.c:79:5: error: pointer targets in passing argument 2 of 'espconn_sent' differ in signedness [-Werror=pointer-sign]\n     espconn_sent(c, (char *) not_found, sizeof(not_found));\n     ^\nIn file included from user/v7_http_eval.c:7:0:\n/opt/Espressif/ESP8266_SDK/include/espconn.h:290:7: note: expected 'uint8 *' but argument is of type 'char *'\n sint8 espconn_sent(struct espconn *espconn, uint8 *psent, uint16 length);\n       ^\nuser/v7_http_eval.c:85:3: error: implicit declaration of function 'SPIFFS_stat' [-Werror=implicit-function-declaration]\n   if ((res = SPIFFS_stat(&fs, filename, &stat)) < 0) {\n   ^\nuser/v7_http_eval.c:85:27: error: 'fs' undeclared (first use in this function)\n   if ((res = SPIFFS_stat(&fs, filename, &stat)) < 0) {\n                           ^\nuser/v7_http_eval.c:85:27: note: each undeclared identifier is reported only once for each function it appears in\nuser/v7_http_eval.c:86:5: error: pointer targets in passing argument 2 of 'espconn_sent' differ in signedness [-Werror=pointer-sign]\n     espconn_sent(c, (char *) server_error, sizeof(server_error));\n     ^\nIn file included from user/v7_http_eval.c:7:0:\n/opt/Espressif/ESP8266_SDK/include/espconn.h:290:7: note: expected 'uint8 *' but argument is of type 'char *'\n sint8 espconn_sent(struct espconn *espconn, uint8 *psent, uint16 length);\n       ^\nuser/v7_http_eval.c:90:3: error: implicit declaration of function 'SPIFFS_open' [-Werror=implicit-function-declaration]\n   if ((fd = SPIFFS_open(&fs, filename, SPIFFS_RDONLY, 0)) < 0) {\n   ^\nuser/v7_http_eval.c:90:40: error: 'SPIFFS_RDONLY' undeclared (first use in this function)\n   if ((fd = SPIFFS_open(&fs, filename, SPIFFS_RDONLY, 0)) < 0) {\n                                        ^\nuser/v7_http_eval.c:91:5: error: pointer targets in passing argument 2 of 'espconn_sent' differ in signedness [-Werror=pointer-sign]\n     espconn_sent(c, (char *) server_error, sizeof(server_error));\n     ^\nIn file included from user/v7_http_eval.c:7:0:\n/opt/Espressif/ESP8266_SDK/include/espconn.h:290:7: note: expected 'uint8 *' but argument is of type 'char *'\n sint8 espconn_sent(struct espconn *espconn, uint8 *psent, uint16 length);\n       ^\nuser/v7_http_eval.c:95:38: error: request for member 'size' in something not a structure or union\n   int resp_size = strlen(resp) + stat.size;\n                                      ^\nuser/v7_http_eval.c:98:5: error: pointer targets in passing argument 2 of 'espconn_sent' differ in signedness [-Werror=pointer-sign]\n     espconn_sent(c, (char *) server_error, sizeof(server_error));\n     ^\nIn file included from user/v7_http_eval.c:7:0:\n/opt/Espressif/ESP8266_SDK/include/espconn.h:290:7: note: expected 'uint8 *' but argument is of type 'char *'\n sint8 espconn_sent(struct espconn *espconn, uint8 *psent, uint16 length);\n       ^\nuser/v7_http_eval.c:104:3: error: implicit declaration of function 'SPIFFS_read' [-Werror=implicit-function-declaration]\n   if ((res = SPIFFS_read(&fs, fd, buf + strlen(resp), stat.size)) < 0) {\n   ^\nuser/v7_http_eval.c:104:59: error: request for member 'size' in something not a structure or union\n   if ((res = SPIFFS_read(&fs, fd, buf + strlen(resp), stat.size)) < 0) {\n                                                           ^\nuser/v7_http_eval.c:105:5: error: pointer targets in passing argument 2 of 'espconn_sent' differ in signedness [-Werror=pointer-sign]\n     espconn_sent(c, (char *) server_error, sizeof(server_error));\n     ^\nIn file included from user/v7_http_eval.c:7:0:\n/opt/Espressif/ESP8266_SDK/include/espconn.h:290:7: note: expected 'uint8 *' but argument is of type 'char *'\n sint8 espconn_sent(struct espconn *espconn, uint8 *psent, uint16 length);\n       ^\nuser/v7_http_eval.c:110:3: error: pointer targets in passing argument 2 of 'espconn_sent' differ in signedness [-Werror=pointer-sign]\n   espconn_sent(c, (char *) buf, resp_size);\n   ^\nIn file included from user/v7_http_eval.c:7:0:\n/opt/Espressif/ESP8266_SDK/include/espconn.h:290:7: note: expected 'uint8 *' but argument is of type 'char *'\n sint8 espconn_sent(struct espconn *espconn, uint8 *psent, uint16 length);\n       ^\nuser/v7_http_eval.c:114:3: error: implicit declaration of function 'SPIFFS_close' [-Werror=implicit-function-declaration]\n   SPIFFS_close(&fs, fd);\n   ^\nuser/v7_http_eval.c:68:15: error: unused variable 'ok_gzip' [-Werror=unused-variable]\n   const char *ok_gzip = \"HTTP/1.1 200 OK\\r\\nContent-Encoding: gzip\\n\\r\\n\";\n               ^\nuser/v7_http_eval.c:64:7: error: variable 'res' set but not used [-Werror=unused-but-set-variable]\n   int res;\n       ^\ncc1: all warnings being treated as errors\nmake: *** [build/v7_http_eval.o] Error 1\n. Now is working. Thanks.\n. Yes. Here the log:\nfedy2@guendalinaXII ~/esp/smart.js/flashnchips $ ./flashnchips --gui -d \nDEBUG: Adding ports: QSet(\"ttyUSB0\")\nINFO: MainDialog state changed from 0 to 1\nINFO: MainDialog state changed from 1 to 0\nDEBUG: Writing bytes \"ttyUSB0\" : \"0008240000000000070712205555555555555555555555555555555555555555555555555555555555555555\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Writing bytes \"ttyUSB0\" : \"000a0400000000005000f03f\"\nDEBUG: Read bytes \"ttyUSB0\" : \"010a02000000569c0000\"\nDEBUG: Writing bytes \"ttyUSB0\" : \"000a0400000000005400f03f\"\nDEBUG: Read bytes \"ttyUSB0\" : \"010a020046fe00020000\"\nINFO: MAC address:  \"18fe34fe469c\"\nINFO: MainDialog state changed from 0 to 1\nINFO: Loading \"0x00000.bin\"\nINFO: Loading \"0x11000.bin\"\nINFO: Loading \"0x70000.bin\"\nINFO: MainDialog state changed from 1 to 2\nINFO: MainDialog state changed from 2 to 3\nDEBUG: Writing bytes \"ttyUSB0\" : \"0008240000000000070712205555555555555555555555555555555555555555555555555555555555555555\"\nDEBUG: No data:  \"Unknown error\"\nDEBUG: Incomplete response:  \"\"\nDEBUG: Writing bytes \"ttyUSB0\" : \"0008240000000000070712205555555555555555555555555555555555555555555555555555555555555555\"\nDEBUG: No data:  \"Unknown error\"\nDEBUG: Incomplete response:  \"\"\nDEBUG: Writing bytes \"ttyUSB0\" : \"0008240000000000070712205555555555555555555555555555555555555555555555555555555555555555\"\nDEBUG: No data:  \"Unknown error\"\nDEBUG: Incomplete response:  \"\"\nINFO: MainDialog state changed from 3 to 2\nINFO: MainDialog state changed from 2 to 1\n. Hi, I'm using the \"Detect devices\" function only to check if the application can communicate with the device (A check symbol appears after the check on the select box option, otherwise nothing happens). What you mean with \"manual reboot\"? I'm simply powering the device, not the adapter, off and on again.\n. With \"manual reboot\" I get the same error:\nfedy2@guendalinaXII ~/esp/smart.js/flashnchips $ ./flashnchips --gui -d \nDEBUG: Adding ports: QSet(\"ttyUSB0\")\nINFO: MainDialog state changed from 0 to 1\nINFO: MainDialog state changed from 1 to 0\nDEBUG: Writing bytes \"ttyUSB0\" : \"0008240000000000070712205555555555555555555555555555555555555555555555555555555555555555\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Read bytes \"ttyUSB0\" : \"01080200070712200000\"\nDEBUG: Writing bytes \"ttyUSB0\" : \"000a0400000000005000f03f\"\nDEBUG: Read bytes \"ttyUSB0\" : \"010a02000000569c0000\"\nDEBUG: Writing bytes \"ttyUSB0\" : \"000a0400000000005400f03f\"\nDEBUG: Read bytes \"ttyUSB0\" : \"010a020046fe00020000\"\nINFO: MAC address:  \"18fe34fe469c\"\nINFO: MainDialog state changed from 0 to 1\nINFO: Loading \"0x00000.bin\"\nINFO: Loading \"0x11000.bin\"\nINFO: Loading \"0x70000.bin\"\nINFO: MainDialog state changed from 1 to 2\nINFO: MainDialog state changed from 2 to 3\nDEBUG: Writing bytes \"ttyUSB0\" : \"0008240000000000070712205555555555555555555555555555555555555555555555555555555555555555\"\nDEBUG: No data:  \"Unknown error\"\nDEBUG: Incomplete response:  \"\"\nDEBUG: Writing bytes \"ttyUSB0\" : \"0008240000000000070712205555555555555555555555555555555555555555555555555555555555555555\"\nDEBUG: No data:  \"Unknown error\"\nDEBUG: Incomplete response:  \"\"\nDEBUG: Writing bytes \"ttyUSB0\" : \"0008240000000000070712205555555555555555555555555555555555555555555555555555555555555555\"\nDEBUG: No data:  \"Unknown error\"\nDEBUG: Incomplete response:  \"\"\nINFO: MainDialog state changed from 3 to 2\nINFO: MainDialog state changed from 2 to 1\n. Yes, I've rebooted the device after the INFO: MAC line.\n. I've not found the RST pin on the ESP 03 device, but disconnecting the CH_PD pin for a moment from the VCC worked fine. Please consider updating the documentation for the ESP device.\nThank you very much for the support! \n. ",
    "DongDongig": "I'm also trying to build smart.js for RPI2....\nbut i cannot figure out how to build...\nCould you guide me to build specifically?\nI did install \"docker\" and execute the \"armbuild.sh\" but I could see\nroot@ubuntu:/home/ubuntu/smart.js-beta2/smartjs/platforms/posix# ./makearm.sh   GEN build/build_info.c\nTraceback (most recent call last):\n  File \"../../../common/tools/fw_meta.py\", line 192, in \n    cmd_gen_build_info(args)\n  File \"../../../common/tools/fw_meta.py\", line 66, in cmd_gen_build_info\n    repo = get_git_repo(os.getcwd())\n  File \"../../../common/tools/fw_meta.py\", line 29, in get_git_repo\n    raise RuntimeError(\"%s doesn't look like a Git repo\" % path)\nRuntimeError: /cesanta/smartjs/platforms/posix doesn't look like a Git repo\nmake: *** [build/build_info.c] Error 1\nAnd When I put just \n$make\nroot@ubuntu:/home/ubuntu/smart.js-beta2/smartjs/platforms/posix# make\n  CC lnx_gpio.c -> build/lnx_gpio.o\n  CC lnx_i2c.c -> build/lnx_i2c.o\n  CC lnx_spi.c -> build/lnx_spi.o\n  CC main.c -> build/main.o\n  CC posix_hal.c -> build/posix_hal.o\nIn file included from posix_hal.c:33:0:\n../../../mongoose/mongoose.h:707:25: fatal error: openssl/ssl.h: No such file or directory\n #include \n                         ^\ncompilation terminated.\nmake: *** [build/posix_hal.o] Error 1\nI need to run smart.js on RPI2 or other arm board (32bit)\nplz let me know how to do that...\nthx in advance!!\n. ",
    "x1project": "For example;\nI have server and it has a capability of websocket communication. I want to use my esp8266 as a client and i should able to program with javascript language. This is my basic idea.\nI ask that; i can use my browser as a websocket client (i dont know this term is correct or not) to connect my server. When i connect my server (http:// myserver. com:8080/websocket/default.html) my browser interpret javascript code in source code of default.html . I am asking; a esp8266 flashed with smartjs, can i use it same javascript code for connection to my server as a client\nMy general idea's picture is blow.\nso maybe my approach is completely wrong way i dont know but i search, any guidance would be wellcome.\n\n. > Smart.js does that. You can run JavaScript code on your ESP device. It's practically the same code you'd run on your browser, except the HTML part.\nThis sentence is what i want to hear. thanks\n. ",
    "santiago": "what about the MAC address\n. ",
    "realzeus": "+1\n. It looks like the issue is solved and can be closed.\n. +1\n. +1\n. Yes, for me it's still actual.\nI use it for visual advertisement, controlled over Internet.\nI'm developing a solution to show messages to the drivers behind a car.\nMessages are shown using NeoPixels, controlled (now by Arduino), which in turn is controlled by ESP8266-1, which is connected to Smartphone using Wifi.\n. The same behavior on ESP-01.\n. Thanks for quick response. I will compile V7 later and try to precompile the JS.\nWhat is the output of v7 -c? Is it a .js file, which is not readable?\nWhat should I do with it and how can I execute it? File.eval()?\n. There are 2 problems:\n1: I have a file print.js with following code:\n(function() {\n  print(\"Hello World\");\n}).apply(this);\nI execute v7 -e 'File.eval(\"print.js\");' and it works correctly.\nWhen I execute v7 -c print.js >print.jsc and then v7 -e 'File.eval(\"print.jsc\");', I see this error: v7: ../../../v7/v7.c:14712: b_exec: Assertion 'fr == 0' failed.\n2: I have managed to convert Scala.js file into JavaScript, which was successfully executed by V7 on a Debian. Source JS file has 19457 bytes. v7 -c completes without errors and produces only 827 bytes. Compiled code does not contain referenced strings from original code.\nThe code is attached: step2.zip\n. I have implemented support for DHT22 in beta4.\nHope, it will be usable.\nThis implementation is based on the Arduino library and DHT22 specification.\ndht22_for_beta4.zip\n. If mongoose-iot developers will confirm that they will include this code in future releases, I will extend my code to support DHT11 too.\n. By the way, I have decided to implement DHT22 because newer sensors AM2320 supports this old protocol and it's the default protocol.\n. Sorry, still learning how to do Git Pull Requests... Shame on me! But I'm working on it.\nIn order to integrate this code please do following:\n1 get Mongoose IoT Firmware Source\n2 build Mongoose IoT Firmware Source (without my code)\n3 find in Mongoose IoT Firmware Source file named v7_esp.c and v7_esp_features.h\n4 copy dht22.h and dht22.c files into the same directory\n5 merge my v7_esp.c and v7_esp_features.h into corresponding files (this should be trivial)\n6 build the code\nI have connected DHT22 to PIN 2, so I use it as DHT22.read(2).\nHere is more code, how I use it:\nfunction sendData() {\n  print(GC.stat());\n  var data = readData();\n  if(data != null) {\n    var requestParams = {\n      hostname: '...',\n      port: 80,\n      path: '/data/' + Sys.ro_vars.mac_address,\n      method: 'POST',\n      headers: { 'Content-Type': 'text/json' }\n    };\n    Http.request(requestParams, function() {;}).setTimeout(2000, function() { this.abort(); }).end(data);\n  }\n}\nfunction readData(){\n  var sensorData = DHT22.read(2);\n  if(sensorData == null) return null;\n  var deviceId = Sys.ro_vars.mac_address;\n  return '{\"deviceId\": \"' + deviceId + '\", ' +\n      '\"data\": {\"temperature\": ' + sensorData.temperature + ', \"humidity\": ' + sensorData.humidity + '}}';\n}\nsetInterval(sendData, 60000);\n. @carterw As far as I know dsleep requires a special wiring (at least on some boards).\nPlease take a look here: http://tim.jagenberg.info/2015/01/18/low-power-esp8266/\n. Your JS implementation was just perfect. It was possible to develop with speed of lightning.\nI'm really sorry to hear you are sunsetting it.\nFor now I will continue to work with the clone of your repository.\n. I found your platform perfect because it's not monolithic, like Arduino and many others. On that platforms you have to compile everything first.\nContrary, your platform looks like SOA, where C code provides stable micro-services and JS code works like orchestrator.\nWith minimal development I was able to send JS code over WLAN and execute it even without saving to file system. This approach has drastically reduced the time of development cycle.\nArduino change cycle: (compile + upload + restart) is approximately 20 seconds.\nESP with MIOT: (upload, compilation and execution is automatic) takes less than 1 second.\nI use ESP with MIOT in 4 projects:\n- internet connected temperature sensors for energy consumption optimization (DHT22)\n- presentation stand controlled over internet: http://www.iot40systems.com/en/caberra.html#iotlive\n- bike tracking (ESP is used as controller only, WLAN of ESP is not used, connection over GPRS)\n- remote control for toy vehicle\nThank you very much for your work!\n. Thank you for these decisions!\nMost important is what it stays open.\nAnd I really hope to contribute sooner or later.\nI think, it would make sense to enable JS on Platforms, which have enough resources, and disable it on more restricted platforms.\nI'm personally not sure about subscription - I don't like constant obligations.\nI will be happy to make a 1-time payment on every successful project.\n. ",
    "cottsak": "Great news. \nsetInterval() too then I assume?\n. So all of your Cloud interaction is not encrypted? The stuff to/from your dashboard?\n. @mmikulicic Kool. That's good to hear. I'm keen to give this a go but no HTTPS is a deal breaker. I'll need that to get started.\n. @mmikulicic Consider that in IoT land, security/encryption can not be a feature! It has to be baked in and robust.\n. @mmikulicic Sounds like we're on the same page. I'll see how I go. Thanks mate.\n. nice\n. ",
    "danyocom": "I disabled StackTrace by removing the  -DV7_ENABLE__StackTrace=1  from the Makefile. However, my code still does not execute completely. Below is my output, any suggestions?\n```\n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 \n9 \n10 \n11 \n12 \n13 \n14 \n15 \n16 \n17 \n18 \n19 \n20 \n21 \n22 \n23 \n24 \n25 \n26 \n27 \n28 \n29 \n30 \n31 \n32 \n33 \n34 \n35 \n36 \n37 \n38 \n39 \n40 \n41 \n42 \n43 \n44 \n45 \n46 \n47 \n48 \n49 \n50 \n51 \n52 \n53 \n54 \n55 \n56 \n57 \n58 \n59 \n60 \n61 \n62 \n63 \n64 \n65 \n66 \n67 \n68 \n69 \n70 \n71 \n72 \n73 \n74 \n75 \n76 \n77 \n78 \n79 \n80 \n81 \n82 \n83 \n84 \n85 \n86 \n87 \n88 \n89 \n90 \n91 \n92 \n93 \n94 \n95 \n96 \n97 \n98 \n99 \n100 \n101 \n102 \n103 \n104 \n105 \n106 \n107 \n108 \n109 \n110 \n111 \n112 \n113 \n114 \n115 \n116 \n117 \n118 \n119 \n120 \n121 \n122 \n123 \n124 \n125 \n126 \n127 \n128 \n129 \n130 \n131 \n132 \n133 \n134 \n135 \n136 \n137 \n138 \n139 \n140 \n141 \n142 \n143 \n144 \n145 \n146 \n147 \n148 \nE:M 24\nE:M 24\nE:M 24\nE:M 24\nE:M 32\nE:M 32\nTrap 9: pc=0x40239a7a va=0x1\nDumping core to debug output\nif you want to dump core, type 'y', or else connect with gdb\n``\n. I was having trouble getting closures to work in some code I was writing, so I decided to find a basic closure example to use as test code (posted above).  It turns out that turning off stack tracing did fix the crashes I was seeing in my other code I was writing (just not in the 'closure example' i posted above). \n. Yes, It turns out I did not add theV7_ENABLE__RegExpdefine properly the first time I tried a build with Regex support. It was a case of PEBKAC (Problem Exists Between Keyboard and Chair)\n. I tracked the issue down to the-finstrument-functionsflag in theMEMORY_FLAGSsection ofplatforms/esp8266/Makefile`\n. ",
    "tyriis": "+1\n. Will this ever be build? For me rhis is the only reason not giving smart.js a try\n. Nice! Will check this out soon :)\n. ",
    "Bravo13": "+1\n. ",
    "snsekar": "+1\n. Great...i will check this. \nOur MQTT service is ssl enabled. Can i use ssl certificates with this javascript interface?\n. I checked MQTT with above mentioned build. Working fine. \nBut we need ssl support also. Mongoose already have ssl support. So i guess soon smart.js will expose js interface for that.\n. @mmikulicic We are using smart.js on esp8266\nIf i use mqtts:// it throws \"unsupported protocol\"\nI checked the code also. Currently only mqtt:// supported https://github.com/cesanta/smart.js/commit/944253002a8d67ec0485d497178d83c27c57382f\nif (mg_vcmp(&scheme, \"mqtt\") != 0) {\n     rcode = v7_throwf(v7, \"Error\", \"unsupported protocol\");\n     goto clean;\n   }\n. ok Thanks. Expecting an update on this soon.\n. @mmikulicic Thanks for quick response\nWe need peer verification to our server only. So we need to use our own CA, cert and private key in mqtt connection. Size is not more than 5kb.\nFrom your code commit  https://github.com/cesanta/smart.js/commit/eda9f86731c785c7e22be1f49e4bd34cdf3db0c4 at line 183 i am seeing\nmg_set_ssl(nc, NULL, NULL);\nInstead of NULL if i pass cert and CA file path will this work? Can i try this?\nAs per mongoose documentation it should work i guess https://www.cesanta.com/developer/mongoose#_core_tcp_udp_ssl\nI mean this \nconst char *mg_set_ssl(struct mg_connection *nc, const char *cert,\n                       const char *ca_cert);\nEnable SSL for a given connection. cert is a server certificate file name for a listening connection, or a client certificate file name for an outgoing connection. Certificate files must be in PEM format. Server certificate file must contain a certificate, concatenated with a private key, optionally concatenated with parameters. ca_cert is a CA certificate, or NULL if peer verification is not required. Return: NULL on success, or error message on error.\n. ok thanks. I will try that\n. I am also facing same issue. Please help me\n. @alashkin i used windows pre-build binaries from here https://github.com/cesanta/smart.js . Currently i am out of office now. I wont be able to check couple of days. I will update here when i check\n. Thanks for looking into this issue. If WebSocket client works fine, this will be killer feature for our project.\n. Wow great...i am out of office now. I wont be able to check couple of days. I will update here when i check\n. Thanks for fixing this issue. I will check\n. I checked the build mentioned by @mmikulicic . WebSocket Client working now.\n. Yes. Currently we are researching about backend platform which is suitable for our use case. Our use case is similar to home automation products. We need to support millions of devices with lower cost. Also platform needs to stable , matured and million scale with lower TCO. AWS IoT seems promising option for us. If we finalise AWS IoT platform then we will start work on this.\n. @cpq Wow...Thank you so much...I will ask my team to try out. ",
    "efuturetoday": "+1\n. ",
    "bwired-nl": "+1\n. ",
    "kopetnik": "+1\n. ",
    "piyush-arora": "@mmikulicic  , I am using mqtt client in esp8266 to subscribe a topic using javascript api and i am using mosquito broker installed on my server , I works perfectly fine for like 5 minutes and then it stops receiving messages where as the other subscriber like in my android device works for the entire time . It seems to have some memory issue . how can i clean the buffer every time through javascript api as I didnot see any . Please help me , I am stuck here \n. it does not crash ,it  just stops working . I am using console. log for every 1 sec to display the receiving data but after 5 min or so i could not see any data in console screen .  Based on the data I control the GPIO but after 5 min it stops working \n. ``` javascript\nWifi.changed(\n                  function (event)\n                  {\n                      Wifi.status();\n                      if(event ==1)\n                      {\n                        print(\"Connected to Wifi and trying to fetch ip \");\n                      }\n                      else if(event ==2)\n                      {\n                          print(\"got the ip \");\n                          print (Wifi.ip());\n                          print(\"connecting to MQTT\");\n                          ConnectMQTT();\n                  }\n\n               }\n          );\n\nfunction ConnectMQTT()\n{\nvar client = MQTT.connect('mqtt://139.59.4.141:1883');\nclient.on('connect', \n                        function() \n                        {\n                             print(\"connected to MQTT\");\n                             client.subscribe('topicName');\n                             client.publish('topicName', 'hi I am switch');\n                        }\n            );\nclient.on('message', \n                        function(topic, message) \n                        {\n                             console.log(\"got\", message);\n                             // based on that control GPIO pins                          \n                        }\n            );\n}\n```\n. Any Suggestions ?\n. Hi , When I use\nSys.conf.debug.stdout_uart=1;\nSys.conf.save();\nmy console output doesnot show anything \nAnd I dont know how to capture log file using MFT , can you explain what is MFT . Thanks\n. I use flash n chips tool given by you guys \n. I have copied the console output into a text file \nlog.txt\nyou will see in line number 552 where I start getting the data from mqtt server \nit looks something like this \ngot 1475823954606\nbut after line number 2503 \nI donot receive the data \nThis happen like after 2-3 mins \nI can assure you that server side is pushing the data \nCan you find what could be the issue ? Thanks for spending your valuable time on it\n. Sure , I will work on it . Thanks\n. ",
    "pabbott0": "If you do a File.list('*') in the Flash'n'Chips console on the latest esp8266 release for OSX, I'm betting that you'll see that a load of .js files are missing compared to what's in git. Haven't checked the builds for other platforms.\nI managed to get a cloud api update accepted by typing out an Http.post() longhand in the console. This was fun because I kept getting stack overflows when the console tried to parse the nested JSON I was feeding it. Breaking up the nesting into multiple vars worked without blowing up the interpreter.\n. ",
    "cjdg": "Confirmed\n. ",
    "dimonomid": "@cjdg, could you please elaborate?\nSmart.js configuration has changed dramatically since this issue was created; the reason it was crashing is already eliminated a long time ago, and even more, it does not have any demo() function anymore, unless user defines his own function, which can do whatever.\nWhat do you mean \"Confirmed\"?\n. > Are you using a portion of RAM for some other purpose, like a heap, and not subtracting it from the reported free amount?\nNo, reported sysfree is actually available free heap size. Of course, as @cpq mentioned, it's fragmenged, but I admit that having 8K free and being unable to allocate 1K of contiguous memory sounds like quite a strong fragmentation. Usually, the memory map looks like this:  (and you might want to read our article where we examine fragmentation and improve memory usage: https://blog.cesanta.com/embedded-heap-behaviour-analysis-and-improvement )\nOn ESP8266, when an out-of-memory occurs, the message E:M 123 is printed to the console, where 123 is the block size which was requested but we failed to allocate it. Does your console output contain E:M?\n. > I'm not seeing that E:M message being printed to the FNC console. What happens is that the program appears to hang for about 10 seconds and then it reboots\nAh sorry; this message gets printed to the stderr, but by default stderr goes to the uart1; so, you don't see it at the console (which uses uart0). To make stderr go to uart0, make sure you have the debug section in your fw/src/fs/conf.json, like this:\njson\n{\n  \"debug\": {\n    \"stderr_uart\": 0,\n    \"level\": 3\n  }\n}\nAfter you add this, rebuild the firmware, flash it, and reproduce the problem. While the program hangs for about 10 seconds, it is printing the coredump to the stderr, so you'll see lots of output this time. Again, look for the E:M message before the coredump, or just share the whole output here.\nAs to the memory defragmentation: unfortunately, while we stick to the standard heap API (malloc, free, etc) and don't have virtual memory, it's impossible to implement any kind of defragmentation. In the memory-constrained environment, it might make sense to use some kind of Slab allocator for the object types which get allocated and freed often.\n. > Is it really necessary to edit that file in the build environment and rebuild/reflash or can I simply add that json clause to the existing file on the device?\nIt is evaluated at the system start, before your js files are evaluated. As an alternative to reflashing, you can for example put the following in your js file (or probably execute from the console):\njavascript\nif (Sys.conf.debug.stderr_uart != 0) {\n  Sys.conf.debug.stderr_uart = 0;\n  Sys.conf.debug.level = 3;\n  Sys.conf.save();\n}\nThe last line Sys.conf.save() will actually reboot the device, and your new settings will be applied.\n\nI find it very strange that memory fragmentation can't be managed effectively in some way, surely there can be a consolidation routine that runs periodically at the very least?\n\nWhen we want to allocate some memory from heap in C, we call malloc(), which returns a pointer to the allocated data, and the calling code then uses the returned pointer. Even if we implement some routine which will relocate allocated blocks in order to defragment the heap, the \"calling code\" will still use the old pointer, which becomes invalid because the memory block might have been relocated. So, as I said, while we use standard heap API, it's impossible to introduce any kind of defragmentation.\nIt is probably possible to implement our own allocator (which, for example, will return a pointer-to-pointer-to-data instead of a pointer-to-data), and reimplement mongoose-iot platform on top of it. We were discussing this some time ago, but it's definitely not going to happen in the near future.\nA couple of words about the memory for JavaScript stuff: FYI, we don't make a separate heap allocation for every single JS object and string. We have pools of object and pools of object properties, so e.g. when some JS object is freed, the memory is not necessarily returned to the system immediately: if the pool which contains the object is not empty, the memory is held for future object allocations. This reduces the fragmentation somewhat. Plus, all JavaScript strings are compacted by the Garbage Collector, so, you can consider strings to be kind of defragmented. \"Kind of\" - because the buffer where JS engine stores all its strings is still allocated from the system heap. So, when we run out of the buffer size, the buffer itself should be reallocated, possibly introducing some fragmentation.\nThere are plans to support at least several buffers with strings, so that we won't require a huge chunk of contiguous memory for all the alive JS strings. It's quite doable and I hope we'll get some time to implement it, but not quite soon.\n. By the way, could you please elaborate on this:\n\nmy program ingests an additional ~1k of data\n\nIs it JS code or C code? And could you share the code please?\n. Thanks for the details. So yes, it tries to allocate 7786 bytes and fails to do that. As both I and Marko pointed out, currently all strings are stored in the single buffer, so I believe this is the issue in your case: it runs out of the current strings buffer and tries to allocate the new one, of the needed size + 500 bytes.\nWe need to make v7 store strings in multiple buffers. We were discussing that, but kept postponing it so far. I hope we'll be able to sort it out in July-August.\nBy the way, to be absolutely sure, you can share the whole coredump, plus two files:\n- fw/platforms/esp8266/.build/mongoose-iot.out\n- fw/platforms/esp8266/firmware/0x11000.bin\nSo that we'll be able to examine the core dump.\n. > It is sounding like some of the 'available' RAM being reported by sysfree is actually being used by infrastructure?\nWell, I wouldn't say so. It is actually free at the moment. And, of course, when you create some new data in your JavaScript code, some memory should be allocated to store it; this is exactly what happens. But, the implementation of strings is far from memory-efficient, and it will be improved.\n\nCan there be a function that reports the currently available amount of string buffer memory for example?\n\nGC.stat().strres returns the current string buffer size, and GC.stat().struse is the used size. So, you can get amount of free string buffer size by subtracting struse from strres.\n. > Apparently there is so little of this 'string memory' available that I can't do much of anything.\nAs a workaround, you can open v7/v7.c, find the line #define _V7_STRING_BUF_RESERVE 500, and replace 500 with the number which seems enough for your entire application lifetime. Say, if currently it consumes about 8K (judging by E:M 7786), try to set it to 9000 or 10000 and see if it works for you.\nWe don't currently expose the JS API to allocate string buffer of desired size; probably we should (until we implement storage of strings in multiple buffers), but this hack will do the trick for now.\n\nI am not using clubby or interacting with your cloud at present. Is there a way to deactivate it or perhaps even prevent it from loading or building?\n\nYou can configure it to prevent it from connecting: either add this code to your js file: \njavascript\nif (Sys.conf.clubby.connect_on_boot) {\n  Sys.conf.clubby.connect_on_boot = false;\n  Sys.conf.save();\n}\nOr, set it right into your fw/src/fs/conf.json:\njson\n  \"clubby\": {\n    \"connect_on_boot\": false\n  },\nOr, to prevent it even from loading, you can open fw/src/js/sys_init.js and comment/remove the code which creates and uses the clubby instance: from line 90 to 104.\n. No problem, looking forward to hear from you.\n. @carterw , before new FnC is released, did you try to build it? You'll need Qt Creator for that.\n. @carterw , just a quick note that you'll need to run it with --advanced key, in order to get old interface with firmware file picker, log window, etc.\n. Cool, thanks for getting back to us.\nYeah, the way v7 stores strings is indeed an issue; we'll work on improving it.\n. Yes we're aware of the issue with crashing on MMAP invalid address, hovewer, the cause is not the comment on the last line, but certain file sizes. So, the \"workaround\" is to add some more comment, to force file size to change.\nSorry about that. We'll fix it in several days.\nAnd, btw, the example you provided\n```\nfunction whatever() {\nvar a = 1;\n}\n// if last line is a comment the 8266 crashes\n```\nDoesn't really cause my ESP8266 to crash. Could you please confirm that exactly this file causes it to crash for you?\n\nSide note: you can save RAM if you put your custom JS files not in fw/src/fs, but in fw/src/js, and build firmware with the command like: make -C fw/platforms/esp8266 JSBIN_EXTRA=\"foo.js bar.js\": then, files foo.js and bar.js will be precompiled at your host, and the firmware will contain bytecode in flash memory instead of JS code. So, when you execute it, it's not needed to compile and allocate RAM to store bytecode.\n. > My experience here is that the program above does cause a crash. The file size doesn't matter, larger or smaller files also crash.\nHm, I'm confused. I can't reproduce the issue: I have a file foo.js with the contents above, build&flash the firmware, and after File.eval('foo.js'), I have the function whatever defined; no crash.\nAnyway, after the bug with file sizes is fixed, we'll ask you to check if this issues is resolved or not.\n. @carterw , we fixed the bug which caused fw to crash on certain file sizes. Could you please pull latest master, make clean build and check if this issue with last-line-comments is still present.\nIf yes, then I'd like to hear any changes you've made to our firmware: any configuration changes, any custom JS files added, etc; since I can't reproduce it on my build.\n. Thanks for reporting that.\nYes I checked and indeed freezing doesn't work properly at the moment; we should either add a test for it or drop it.\nI was able to build the firmware with V7_FREEZE set to 0 and MG_ENABLE_UPDATER_CLUBBY set to 1. We'll write here once we resolve it.\n. Trying to figure where the problem is; could you please run mos with GODEBUG env var set to netdns=cgo and see if it still fails? Like this:\n$ GODEBUG=netdns=cgo+1 mos flash esp8266\n(the cgo part is to force C resolver, and +1 part is needed to print debug information). I don't think that sudo is related here; it may only be required if the port at which the device is attached (like /dev/ttyUSB0) is not user-writable, which should be fixed by adding appropriate udev rules, not by sudoing this and that. We did have problems with the resolver in statically built mos in the past; back then it was just fixed by forcing pure Go resolver during the build, but maybe for some reason it fails on Arch.\nThe right solution would be to just build a proper arch package, but not sure about the ETA for that.. If the GODEBUG thing doesn't do the trick, then the best bet for you would be to build mos tool from source: https://github.com/cesanta/mos-tool (see instructions there, they are for Ubuntu, but I think you'll figure how to tailor them for arch :) )\nThe right thing for us is to build proper arch packages of course, but no ETA for that at the moment.. Fyi we've created PKGBUILD files for archlinux; they are not in AUR yet, so here are instructions: https://github.com/cesanta/mos-tool#installing-on-arch-linux. Support for local builds in both \"docker toolbox\" and \"docker for windows\" was added in 1.12.. It's fixed now, thanks for reporting!. Thanks for reporting; at least for now the code is going to stay intact, fixed docs.. Why not? After cloning we might want to e.g. get some updates from upstream, etc. If we want to push to some other location, we could add another git remote (or indeed replace existing one), but I don't see why keeping the actual origin should not be the default.. @snpwr , thanks for reporting and for figuring the DNS issue; mos 1.10 is built with forced pure-go dns resolver.. @MrSurly honestly, I couldn't reproduce the issue, for me mos init --arch esp32 followed by mos build worked just fine.\nAnyway, we've updated mos init to use the empty app as a source, that's a long overdue. Could you please update mos (run mos update), and check if it works for you now?. Just to let you know: so far we failed to reproduce it, probably we'll have to install Ubuntu 16.10 and test it there (so far, tested on Ubuntu 16.04 and Linux Mint 17.3, works fine).\nWill let you know once we have something.\nMaybe it's some sort of binary incompatibility, really hard to say. As a temporary measure, you can try to build mos tool and see if it helps; instructions are there https://github.com/cesanta/mongoose-os/blob/master/mos/README.md. @MrSurly thanks for tracking that down that far. Yes apparently our build instructions are obsolete, sorry about that. I'll update them soon.\nSo at the point you've reached, please run go generate before go build, and then build will work.. First of all, thanks for digging into the rabbit hole. Yes, we clearly might have done a better job documenting how to build mos. Sorry! :(\nI also have to say that you started from providing me with a runtime mos issue which I can't reproduce, and now you have a build issue which I can't reproduce! My the only guess is that you might have mixed some vendored packages while trying to make this thing work. I also added missing packages to vendor.json, so that go get github.com/cesanta/ubjson and others are not needed. So, could you please do a bit of update and cleanup (assuming you don't have any valuable Go sources under /home/epoulsen/workspaces/go/src other than cesanta.com; if you do, then you'll have to be more selective when removing stuff) :\n```\npull latest revision of mongoose-os\ncd /home/epoulsen/workspaces/go/src/cesanta.com\ngit pull\nremove all vendored packages\nrm -r $(find vendor -maxdepth 1 -mindepth 1 -type d)\nremove all Go sources other than cesanta.com (assuming you don't have anything valuable there)\nrm -r $(find /home/epoulsen/workspaces/go/src -maxdepth 1 -mindepth 1 -type d -not -name cesanta.com)\nfetch all required vendored package under /home/epoulsen/workspaces/go/src/cesanta.com/vendor\ngovendor sync\nonce more, try to build mos\ncd mos\ngo generate\ngo build\n```\nPlease let me know if it helps. Yeah sorry for the delay.\n\nmain.go:2: running \"go-bindata\": exec: \"go-bindata\": executable file not found in $PATH\n\ngo get installs binaries into $GOPATH/bin, so please do this: (you might want to add it to your .bashrc or equivalent file for your shell)\nbash\nexport PATH=\"$PATH:$GOPATH/bin\"\nW.r.t. the issues with pre-built binary, no, sorry, can't reproduce yet.. Yes, not even in a vagrant instance; I replayed the same scenario you posted\n```\n\u279c  ~/mydata/tmp/180/1 vagrant up                \nBringing machine 'default' up with 'virtualbox' provider...\n==> default: Box 'ubuntu/xenial64' could not be found. Attempting to find and install...\n    default: Box Provider: virtualbox\n    default: Box Version: >= 0\n==> default: Loading metadata for box 'ubuntu/xenial64'\n    default: URL: https://vagrantcloud.com/ubuntu/xenial64\n==> default: Adding box 'ubuntu/xenial64' (v20170713.0.0) for provider: virtualbox\n    default: Downloading: https://app.vagrantup.com/ubuntu/boxes/xenial64/versions/20170713.0.0/providers/virtualbox.box\n==> default: Successfully added box 'ubuntu/xenial64' (v20170713.0.0) for 'virtualbox'!\n==> default: Importing base box 'ubuntu/xenial64'...\n==> default: Matching MAC address for NAT networking...\n==> default: Checking if box 'ubuntu/xenial64' is up to date...\n==> default: Setting the name of the VM: 1_default_1500144052966_65475\n==> default: Clearing any previously set network interfaces...\n==> default: Preparing network interfaces based on configuration...\n    default: Adapter 1: nat\n==> default: Forwarding ports...\n    default: 22 (guest) => 2222 (host) (adapter 1)\n==> default: Running 'pre-boot' VM customizations...\n==> default: Booting VM...\n==> default: Waiting for machine to boot. This may take a few minutes...\n    default: SSH address: 127.0.0.1:2222\n    default: SSH username: ubuntu\n    default: SSH auth method: password\n    default: \n    default: Inserting generated public key within guest...\n    default: Removing insecure key from the guest if it's present...\n    default: Key inserted! Disconnecting and reconnecting using new SSH key...\n==> default: Machine booted and ready!\n==> default: Checking for guest additions in VM...\n==> default: Mounting shared folders...\n    default: /vagrant => /home/dimon/mydata/tmp/180/1\n\u279c  ~/mydata/tmp/180/1 vagrant ssh\nWelcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-83-generic x86_64)\n\nDocumentation:  https://help.ubuntu.com\nManagement:     https://landscape.canonical.com\nSupport:        https://ubuntu.com/advantage\n\nGet cloud support with Ubuntu Advantage Cloud Guest:\n    http://www.ubuntu.com/business/services/cloud\n0 packages can be updated.\n0 updates are security updates.\nubuntu@ubuntu-xenial:~$ curl -fsSL https://mongoose-os.com/downloads/mos/install.sh | /bin/bash\nDownloading https://mongoose-os.com/downloads/mos-release/linux/mos ...\n################################################################## 100.0%\nInstalling into /home/ubuntu/.mos/bin/mos ...\nAdding /home/ubuntu/.mos/bin to your PATH in /home/ubuntu/.bashrc\nSUCCESS: /home/ubuntu/.mos/bin/mos is installed.\nRun '/home/ubuntu/.mos/bin/mos --help' to see all available commands.\nRun '/home/ubuntu/.mos/bin/mos' without arguments to start a simplified Web UI installer.\nubuntu@ubuntu-xenial:~$ mkdir 1\nubuntu@ubuntu-xenial:~$ cd 1\nubuntu@ubuntu-xenial:~/1$ . ~/.bashrc\nubuntu@ubuntu-xenial:~/1$ mos init --arch esp32\nDownloading empty app...\nUnpacking...\nSetting arch \"esp32\"...\nubuntu@ubuntu-xenial:~/1$ mos build\nConnecting to https://mongoose.cloud, user test\nUploading sources (49412 bytes)\nFirmware saved to build/fw.zip\nubuntu@ubuntu-xenial:~/1$ \n``. @MrSurly, however, I think you might have some \"dirty\" libs in your~/.mos/libs`, so they are used as they are, and it might cause conflicts with the latest core code.\nTo confirm that, could you please run mos build --verbose, and post the log here?\nAlso, to try to fix it, you can remove/rename ~/.mos/libs and try build again. Btw, also please don't forget to install mos again.. Thanks for the summary.\n(2) is fixed: check out the readme https://github.com/cesanta/mongoose-os/tree/master/mos , tested in clean vagrant yakkety instance (note that go-bindata and go-bindata-assetfs are fetched as part of make -C mos install)\n(3) is fixed in latest mos (if you use release version, please do mos update latest; we'll cut the release soon). For some reason, the C implementation of DNS resolver causes the issue, for now we've forced the usage of pure-go DNS resolver\nTotally no idea about (4) yet.. Local build on windows is supported now (in both \"Docker Toolbox\" and \"Docker for Windows\").. Thanks for reporting!\nInstead of adding a checkbox, we fixed autoscroll logic: it autoscrolls if only the window is already on the bottom. To turn off autoscroll, just scroll up a bit.\nImplemented in latest, will be included in the upcoming release 1.15.. @zendes , we've restored mmap on esp platform, this frees 5+ K of RAM. Please try now with the latest firmware (if you use release, you'll need to update to latest with mos update latest). Yeah thanks for reporting, the real issue back then was that released mos (1.10 in your case) was trying to build latest apps, so newly added libs were breaking the release build. Now it's fixed.. Done, see the rpc-service-wifi lib, which is included in the default app.. Implemented in latest: https://github.com/mongoose-os-libs/mqtt/commit/9fefa78b321f2bb8a2e640a24aa6182e721bd25b , will be included in the upcoming release 1.15.. Thanks for reporting; that skeleton mos.yml is not used anymore, we use empty app instead, which I recently updated as you mentioned.. Thanks for reporting, fixed in latest, will be included in the upcoming release 1.15.. Resolved with https://github.com/mongoose-os-libs/wifi/commit/ad19f7ac63b484ccd3047b7c9823589dbef021b1. Confirmed, thanks for reporting.\nFor the record, backtrace from the coredump looks as follows:\n```\n0x40165059 in __udivmoddi4 (rp=, d=0, n=991893197192)\n    at /home/ivan/e/crosstool-NG/.build/src/gcc-5.2.0/libgcc/libgcc2.c:1088\n1088    /home/ivan/e/crosstool-NG/.build/src/gcc-5.2.0/libgcc/libgcc2.c: No such file or directory.\nadd symbol table from file \"/mongoose-os/common/platforms/esp32/rom/rom.elf\" at\n        .text_addr = 0x40000000\nReading symbols from /mongoose-os/common/platforms/esp32/rom/rom.elf...(no debugging symbols found)...done.\n(gdb) bt\n0  0x40165059 in __udivmoddi4 (rp=, d=0, n=991893197192)\nat /home/ivan/e/crosstool-NG/.build/src/gcc-5.2.0/libgcc/libgcc2.c:1088\n\n1  __umoddi3 (u=991893197192, v=0)\nat /home/ivan/e/crosstool-NG/.build/src/gcc-5.2.0/libgcc/libgcc2.c:1278\n\n2  0x400e8073 in pm_rx_beacon_process ()\n3  0x400e8450 in ?? ()\n. I think it's possible, but not a priority at the moment.. Can't reproduce, this code worked for me:javascript\n  HTTP.query({\n    url: 'http://172.217.17.206',\n    success: function(body, full_http_msg) { print(body); },\n  });\n``. I think it's irrelevant now, because all libs are now located underdeps` dir in the app's directory.. Let me elaborate a bit.\nIn mos.yml we can have some deps, e.g.:\nlibs:\n  - origin: https://github.com/mongoose-os-libs/dht\n  - origin: https://github.com/mongoose-os-libs/js-demo-bundle\nSo previously all those deps were stored under ~/.mos/libs-<mos.version>: given the snippet above, there would be ~/.mos/libs-1.19/dht-1.19, ~/.mos/libs-1.19/js-demo-bundle-1.19, and all the deps of deps.\nRight now, when one does a \"remote build\" (and Web UI can only do remote builds atm), nothing will be stored anywhere. Neither under ~/.mos/libs-..., nor under app's dir.\nWhen one does a \"local build\" (in the simplest case, it's mos build --local), all the deps will be cloned under deps dir in the app's directory. But, again, it's irrelevant when Web UI is used, since it can only do remote builds atm.. should be fixed now, feel free to reopen if it still fails for you. Build time check is a huge benefit, so we believe static functions should be the preferred way to access config values; whereas accessing config fields dynamically looks like sort of a corner case. I do agree that supporting that corner case as well would be good, but it's not a priority at the moment.\nThat said, reading config values by paths like \"mqtt.enable\" is possible already: you can get a config schema entry by its path with mgos_conf_find_schema_entry (so something like mgos_conf_find_schema_entry(\"mqtt.enable\", mgos_config_schema())), and then get its value using mgos_conf_value_....., see https://mongoose-os.com/docs/api/mgos_config_util.h.html#*mgos_conf_value_string .\nSetting config values is not yet implemented, but will be, stay tuned. By the way, it is also needed for setting config values from mJS.. By the way, be aware that we can use this:\nc\nmgos_config_apply(\"{\\\"wifi\\\": {\\\"ap\\\": {\\\"enable\\\": false}}}\", true);\nFor such a corner case this may actually be enough; and additionally that can be used to save multiple values at once. What do you think?. Yeah JSON in a C string is not only a bit error prone but also notably ugly, but for such a corner case, meh. :)\nOk cool, closing this one then.. Failed to reproduce, here's what I'm doing:\n$ mos flash esp8266\n$ mos config-set wifi.ap.enable=false wifi.sta.enable=true wifi.sta.ssid=MYSSID wifi.sta.pass=MYPASS mqtt.enable=true mqtt.server=iot.eclipse.org:1883\n$ mos --port mqtt://iot.eclipse.org:1883/esp8266_DA7E15 call Config.Get\nIf you do the same, does it work for you?. Closing this for now, feel free to reopen if it's still an issue for you. mos-esp8266-X.XX is an old name for the prebuilt demo-js app: https://github.com/mongoose-os-apps/demo-js. And iot-kit is another app: https://github.com/mongoose-os-apps/iot-kit.\nThey are similar, but iot-kit is a bit tailored for Google IoT Core IoT Kit; as opposed to demo-js it includes the dht lib and also doesn't contain demo led-blinking code and configuration values. . Sorry for not replying earlier, and now it's not quite relevant since iot-kit will be removed soon.. Now it should be fixed. Can't reproduce, mos.exe ui opens the browser just fine. Does it still reproduce for you?. Closing this for now; please feel free to reopen if it still doesn't work for you.. At the moment it's not possible, no.. This was some transient problem which is resolved now.. Could you please share your code and explain how do you reproduce it, so that I could easily do the same.. Right, confirmed.. Here you go: https://github.com/cesanta/homebrew-mos\nc\n$ brew tap cesanta/mos\n$ brew install mos. Please share the code you use.. Closing this for now, feel free to reopen if it's still an issue for you.. Yeah, in order to build project remotely all libs must be accessible (e.g. from github).. Ah sorry, actually no, the default location for libs has recently changed to deps under the app's dir. So, if you have an app located at /path/to/myapp, then mos build --local will look for libs in /path/to/myapp/deps (and clone them if they don't exist).. Fair point, that's a leftover. Will be removed soon.. > empty.elf size is hardly 3 to 4kb\nNot sure which empty.elf you mean, since its size is more than 3MB:\nls -lh build/objs | grep empty \n-rw-r--r-- 1 dimon dimon 590K Dec 12 19:53 empty.bin\n-rwxr-xr-x 2 dimon dimon 3.4M Dec 12 19:53 empty.elf\n-rw-r--r-- 1 dimon dimon 3.6M Dec 12 19:53 empty.elf.map\nAnd no, I don't think it's possible to cut much from the \"empty\" app.. Yeah it was the case indeed, now it's fixed. Sorry, can't reproduce. On the \"Device Files\" tab, I open init.js file, then click \"Save File\" button, and init.js gets saved correctly. Which mos version do you use?. Hmm, and still can't reproduce. So I opened fs\\index.html, clicked the \"Save currently opened file\" button, and C:\\Users\\myuser\\.mos\\apps-1.20.1\\empty-1.15\\fs\\index.html file is updated correctly.\n\n\nI was able to to edit the .exe file using a hexeditor to essentially replace \"\" with \"/\" which fixed my issue but its not an elegant fix.\n\nWow that sounds hardcore, however from your explanation replace \"\" with \"/\" it's unclear what exactly did you replace with what. Also I assume there are plenty of \\ occurrences btw.. Finally it's clear now. :) Ok, I think I'll commit the fix tomorrow, thanks for reporting.. Fixed in private repo, will be published soon.. Thanks for reporting! Fixed in our private repo, will be published here soon.. Yeah communication via serial port is slow, at least keep in mind that it goes via multiple JSON frames, so it's encoded as base64 and thus the size is bigger; also the regular random console output goes to the same UART, it also slows it down further.\nBut I agree there is a room for improvement. No ETA at the moment.\nTransfer via other means work much faster, try mos.exe --port ws://192.168.1.201 get big.txt (of course replace the IP with the actual IP of your device). ",
    "nkolban": "I am pretty sure that I merely entered it through the serial terminal.   However, I'll try again tonight ... what I'll do is 100% erase my flash and follow again the steps that got me to where I was.\n. Howdy ... I have managed to recreate.  Here is the exact story.\nThe version of Smart.js being used is:\nESP8266-p/20151112-135329/f829b921\nI have a file called hc1.js that contains:\n```\nfunction report() {\n  print('sending request...');\n  Http.request({\n    hostname: 'httpbin.org',\n    path: '/get?n=' + GC.stat().sysfree  // Free RAM\n  }, function(response) { print(response); }).end(/ no POST data /);\nsetTimeout(report, 3000);  // Report every 3 seconds\n};\nreport();\n```\nI use Flash'n'Chips version 0.1 to upload the file to Smart.js (running on ESP8266).\nI check that the file is present using:\nFile.list('.')\nI run the script using:\nFile.eval('hc1.js')\nAll runs and it looks good.\nI reboot my device ...\nHere is what I see on my console:\n``\n\ufffd\fd\ufffd\u001c8\u0004\ufffd\ufffdog\ufffd\ufffd$don't use rtc mem data\n;l\ufffdcannot save conf \nDevice id: //api.cesanta.com/d/dev_XXX\nDevice psk: psk_XXX\nCloud: //api.cesanta.com \nsending request... \nsmartjs 27424/504$ sending request... \nsending request... \nsending request... \nsending request... \nsending request\n```\nLet me know what other info might be needed.  At y'alls disposal.\n. I have built the latest Smart.js for the ESP8266 from source and flashed my ESP8266 ... I am now no longer able to reproduce the error.  As such, I am going to assume that between the build I had previously installed and the current build:\n\"ESP8266-master/20151124-014710/7e198c38\"\nSomething got cured.   Either way, I am happy now ... closing issue.\n. I have switched over to ESP8266-p/20151112-135329/f829b921 which appears to be the latest pre-built firmware.  That is now exhibiting a different symptom (see issue #65).   I feel that running the later version has indeed got me past the issue reported here but let me get to end of job on #65 before closing this one out.\nA thought though ... if running the build known as \"Smart.js Beta\" as found here:\nhttps://github.com/cesanta/smart.js/releases\nis known to contain some severity 1 defects, y'all might want to refresh that beta with a new build ... or keep an issues log of known severity 1 defects and workarounds so that virgin users like myself aren't left hanging.\n. After switching to the latest source build represented as:\n\"ESP8266-master/20151124-014710/7e198c38\"\nI am no longer able to reproduce the issue.  As such I am pleased and will close the issue.\n. I just tried on Ubunto and I got the same:\nkolban@kolban-VirtualBox:~/git/smart.js/platforms/esp8266$ sudo make\nUnable to find image 'docker.cesanta.com:5000/esp8266-build-oss:1.4.1-cesanta-r2' locally\n1.4.1-cesanta-r2: Pulling from esp8266-build-oss\n0a85502c06c9: Pull complete \n0998bf8fb9e9: Pull complete \na6785352b25c: Pull complete \ne9ae3c220b23: Pull complete \n65b44a851f4f: Pull complete \n8c3a50b946e3: Pull complete \n050f18e8065a: Pull complete \n811a79941ca0: Pull complete \nfafac5c336db: Pull complete \nc0962a716d2e: Pull complete \n20c245076d3e: Pull complete \n2b485eda8667: Pull complete \n39643645b81f: Pull complete \n0f7be26676d4: Pull complete \n01e69121302f: Pull complete \nac92877d1e8f: Pull complete \n34d7e1583b30: Pull complete \n45d265b0a128: Pull complete \nb4dcc5b88108: Pull complete \n1a38c390d915: Pull complete \nDigest: sha256:d64d907078130194f48aced399564af94a8ea0b9f947fa3fdbf47b2fd811db3f\nStatus: Downloaded newer image for docker.cesanta.com:5000/esp8266-build-oss:1.4.1-cesanta-r2\nMakefile.build:10: ../../../common/platforms/esp8266/common.mk: No such file or directory\nmake: *** No rule to make target `../../../common/platforms/esp8266/common.mk'.  Stop.\nMakefile:9: recipe for target 'all' failed\nmake: *** [all] Error 2\nkolban@kolban-VirtualBox:~/git/smart.js/platforms/esp8266$\n. Very nice.  Looking forward to reading about WebSocket client request from Smart.js ... however I wasn't specific in my original post.  The key function I think I am looking for is WebSocket server support.   Let me give you a trivial example.  And it is just that ... an example.\nI wish to create an ESP8266 robot chassis.  I want to send commands to the robot to turn or move forwards or backwards.  I wish to use a web page with UI widgets on it and interaction with the widgets (by the end user) will send messages to the ESP8266 to perform the commands.  While I fully realize that each message could be sent as a separate REST request to an HTTP server running under Smart.js ... my \"thinking\" is that I would like to use WebSocket client calls FROM my browser hosted application to Smart.js which is hosting a WebSocket server.   It appears that full Mongoose can do this ... see mg_set_protocol_websocket() which appears to expose a number of MG_EV_WEBSOCKET_* events.  The desire here would be that these would be exposed upwards to Smart.js.\n. Yes ... I believe so.  Unfortunately I am not yet skilled in Node.js but a quick glance at the APIs seems to show what I would expect from a sockets implementation.\n. Howdy there .... I installed on an Ubuntu desktop distribution. Looking at /bin/sh I find it to be a symbolkic link to  a shell called \"dash\":\n$ ls -l sh\nlrwxrwxrwx 1 root root 4 Feb 17  2016 sh -> dash\nTo the best of my knowledge, this is out of the box.  In fact, I just checked an Ubuntu that I built last week and it was the same.  I'll be delighted to run any tests you feel you would like to see or can give you a screen share as needed.\n. ",
    "alex00971": "I have exactly the same problem,\nI'm not able to delete the file with File.remove(\"\") any more.\n. I don't know why, But if you reset or reflash the device, It will work.\n. ",
    "coaxial": "I ran into the issue, here is a dump:\nsmartjs_dump.bin.zip\nI hope I did it right, I dumped 512,000 bytes from address 0x73000 which is the highest address in the firmware's directory.\n. ",
    "vnmone": "+1\n. ",
    "dvdobrovolskiy": "Not  on esp8266?. Wow, rude guy at support is CEO. I clad I haven`t paid for this project yet. Thanks.\nPS I surely did pay attention for the docs. I surprised you removed UI from mos\n. ",
    "carterw": "It doesn't make sense to me to have the 8266 act as a websocket server. You can implement the websocket server on some other machine and attach to that using the existing 8266 websocket client API. Then you could have multiple robots talking to your server.\n. If you have a lot of devices deployed for a variety of purposes you need a way to uniquely identify each of them so you can know what they are supposed to be doing and perhaps where they are.\n. \"unique chip ID burned into the ESP8266 at the factory\" sounds pretty unique to me and immutable. I don't intend to build and flash firmware if I can avoid it.\n. Personally, seeing as how the chip ID is in the MAC address, I am fine with using that. \n. According to the case markings it is a;\nESP-12\nESP8266MOD\n. There's no crash dump, it simply reboots over and over. I'll paste in the FNC output later today. \n. How to do that from the FNC app? Or is that a FW build option? \n. Flashing with the 4M option eliminated the problem, thanks. Device joined my wifi network after Wifi.setup() and not rebooting. Might want to include this tip in the documentation.\n. Looks like a coding error on my part\n. I'm not seeing that E:M message being printed to the FNC console. What happens is that the program appears to hang for about 10 seconds and then it reboots, the first line on reboot is;\nets Jan  8 2013,rst cause:2, boot mode:(3,6)\nIf there is something I can look at further to see a cause please let me know, but it sure looks like  this is related to memory fragmentation. This is a very serious problem. I read the blog post on fragmentation, but what I am not seeing is a mechanism that periodically (or on demand) defragments available memory. Many applications, including mine, will be exchanging data with a server which inherently results in a lot of memory allocations and frees. If you aren't consolidating the free memory into reasonably large usable blocks this will inevitably result in an eventual crash.\n. Thanks for the info. I am seeing a conf.json file in the device filesystem. Is it really necessary to edit that file in the build environment and rebuild/reflash or can I simply add that json clause to the existing file on the device? Is the conf file you mentioned only evaluated at build time?\nI find it very strange that memory fragmentation can't be managed effectively in some way, surely there can be a consolidation routine that runs periodically at the very least? From the standpoint of a JavaScript application, I don't see how there can be a realistic workaround. My program exchanges websocket messages with a server. An incoming message of more than a very small size will crash the device. There is apparently no way to know how much contiguous memory is available at runtime into which the message could be received.\n. It is Js code, I am using the websocket client API. All is well for a few message exchanges with a server, but then an incoming message will cause a reboot before the app even sees the data. I don't want to post the entire client/ server application but I may be able to come up with a condensed test case. \n. I'm not allocating the buffer explicitly in my code. On the 8266 side it is just a websocket client that receives json messages from a server (which obviously are strings). Presumably the underlying websocket client implementation allocates the buffer for the incoming message. How this happens exactly I do not know, and since the incoming data can be of arbitrary size it could make allocation tricky.\nAs for my use case, I am writing a general purpose peer-to-peer message handling utility for IoT. My idea is to allow endpoint devices with limited resources such as the 8266 to easily be slaved to peers over the internet that can run much larger driver programs, access databases, etc. The 8266-class of device would merely execute primitives such as setting or sensing GPIO pins in response to remote messages. I have the framework for this up and running, but as I incrementally add capabilities to the 8266 client I am encountering this crash.\nI'll try to gather up more clues today.\n. I was able to redirect stderr using the code you suggested above. Now when I run my program I see the following, not including the subsequent core dump. Does this help? What has happened here is that an incoming message arrived, which consisted of a small program file. The incoming file string is showing up in the console output as you can see, then there is the crash. If I send a smaller file no crash.\n```\nTAKEF received from c1\nconsole_get_current_clubby clubby handle: 0x3fff2234\nconsole_add_to_cache Cached 22 bytes, total cache size is 114 bytes\nfunction blink(pin, nBlinks) {\n    var nb;\n    if (nBlinks == null) {\n        nb = 5;\n    }\n    else if (nBlinks == 0)\n        return;\n    else\n        nb = nBlinks - 1;\n    pin = pin || 0;\n    var level = GPIO.read(pin);\n    GPIO.setMode(pin, GPIO.OUT, GPIO.PULLUP);\n    GPIO.write(pin, !level);\n    console.log(\"pin:\", pin, \", level:\", level);\n    setTimeout(function() { blink(pin, nb); }, 500);\n}\nconsole_get_current_clubby clubby handle: 0x3fff2234\nconsole_add_to_cache Flushing buf (114 bytes)\nconsole_flush_buffer file id=27\nconsole_flush_buffer Out of space\nset_errno            spiffs error: -10001\nE:M 7786 (974 blocks)\nE:M 7289 (912 blocks)\nheap integrity broken: block links don't match: 4911 -> 5812, but 5812 -> 13600\nTrap 9: pc=0x402937d2 va=0x1\nDumping core\n--- BEGIN CORE DUMP ---\n{\"arch\": \"ESP8266\", \"cause\": 9, \"REGS\": {\"addr\": 1073651960, \"data\": \"ztgkQDD6/z8BAAAACCAAAJDz/\n```\n. What is a convenient way to share those files with you?\nIs there no temporary workaround? Can there be a function that reports the currently available amount of string buffer memory for example? Then I might be able to ensure that incoming message sizes don't exceed available string space. I'm not concerned about performance at this point. \n. Apparently there is so little of this 'string memory' available that I can't do much of anything.\nI'm seeing quite a bit of clubby activity happening on the console though, and I am concerned that this is sucking up a lot of the scarce resources. I am not using clubby or interacting with your cloud at present. Is there a way to deactivate it or perhaps even prevent it from loading or building?\n. That is extremely helpful, thanks! I will experiment with your suggestions and report back on what happens.\n. It looks like your cloud platform has a lot of features, but right now I am just trying to get some pretty basic code to reliably send a few messages back and forth to the 8266 device running your firmware. If I can do this plus make lights blink, etc. and have it operate without crashing for a few hours it will give me a little confidence in your larger application stack.\nI disabled the clubby connect code as suggested above. That seems to have freed up a couple of kbytes of RAM but it didn't modify the JS string buffer available memory.\nI bumped up the STRING_BUF_RESERVE size as suggested and built a new firmware zip file. Unfortunately the FNC app refuses to flash it, it reports an error;\nINVALID_ARGUMENT: part boot has no address specified\nI am using FNC 0.8.6 which is the version you published in late April;\nhttps://github.com/cesanta/fnc/releases\n. I was hoping to not have to spend time figuring out how to build FNC. Frankly I am surprised that the released version of FNC is not routinely being kept up to date with the current FW. They should always be compatible.\n. That would be great, thanks. I'm using a Windows PC.\n. Much appreciated, I will give it a try later today.\n. Good news here. I downloaded that FNC executable and it was able to flash the recent FW I built with the larger JS string buffer. Now GC.stat() is reporting;\n\"struse\":5797,\"strres\":8010\nThis should give me enough headroom to move forward on my project, and I am seeing some things that resulted in a crash working now. Thanks for the assistance!\n. Wow that's a good tip about embedding programs, I will try it.\nMy experience here is that the program above does cause a crash. The file size doesn't matter, larger or smaller files also crash.\n. Thanks, I will try it later today and provide that feedback.\n. I made fresh FW and flashed it. No problem with last-line-comments now so apparently your fix solved that problem as well, thanks.\n. Not seeing this now for some reason, odd.\n. Now unable to recreate, but it is disturbing.\n. You might want to update your API doc. Would be great if you would document everything that gets adjusted in Sys.conf and what the default behavior is after a fresh reflash...\n. No help from dev team on this? It seems pretty fundamental.\nLooking at the makefile (had to dig it out, .../fw/platforms/esp8266/Makefile.build) it turns out that what you actually have to invoke is ;\nmake -C fw/platforms/esp8266 JSBIN_EXTRA=\"full-pathname-to-your-file\"\nAll this really does, as far as I can tell, is cause your .js file to be precompiled and put into the filesystem when the device is flashed. You still have to eval it in app.js or somewhere, and I am not noticing that it saves any memory.\n. Thanks for the info! The file I had tried was in fact small. I'll try something larger and compare.\n. Speaking of regressions, do you guys have a regression test that you can run against your firmware?  Something that exercises all of the API and also the JavaScript interpreter? If not I highly recommend it. It would be a valuable resource for developers like me as well.\n. Definitely saves memory for larger files. I am not sure exactly how much, maybe 50%. That helps a lot.\n. Another odd thing. If I set;\nGPIO.setISR(0, GPIO.LOW, function() {\nprint('pin ' + pin + ' transitioned');\n}); // succeeds\nand then later...\n      GPIO.write(0, false);\n... I will see \"pin 0 transitioned\" print repeatedly on the console. \n(edited) Experimenting further I find that taking pin 0 low with a pushbutton also results in that message repeating many times. I would have expected the low state to be reported only one time.\n. Update - this experiment appears to have damaged my development board. Invoking Wifi.setup() from the console now results in a number of connect attempts and disconnects (which I had never previously seen) and eventually a crash. This happens even with release 1.1 firmware.\nThis is Mongoose IoT Firmware 1.1 (esp8266)\n......\nf 0, scandone\nno ATT6y9a4r6 found, reconnect after 1s\nsj_wifi_on_change_cb Wifi: disconnected\nreconnect\nf -180, E:M 32 (5 blocks)\nTrap 29: pc=0x4029f41e va=0x0\nDumping core\n--- BEGIN CORE DUMP ---\n{\"arch\": \"ESP8266\", \"cause\": 29, \"REGS\": {\"addr\": 1073653352, \"data\": \"YushQCD+\nUpdate; powercycling the board brought things back to normal. But dsleep() is still a mystery.\n. usleep() doesn't appear to do anything. Typing in usleep(200000) on the MFT console and I still get prompts when I hit return. And my running software continues to run.\nAm I missing something? Has nobody else tried these things? Do I need to tie some pins to power or ground to make it work?\n. Powercycling the board brought things back to normal. I am guessing that the radio was turned off somehow.\nBut dsleep() is still a mystery. Does it work? If so please explain how to use it.\n. Thanks for the tip, I'll try it with that wiring. Does anyone know what the available \"dsleep_option\" values are and what they do?\n. I cloned and flashed firmware today, presumably using ESP866 SDK 2.0, and all seems to be working as expected.\nI wired pin 16 to reset, and dsleep(10000000, 1) does cause the 8266 to wake up after 10 seconds. It appears to wake up as if it were reset, which is to be expected I guess.\nOn the other hand, usleep(10000000) causes a core dump on wakeup;\nsystem_restart_local WDT reset, info: exccause=4 epc1=0x40002ef1 epc2=0x00000000 epc3=0x00000000 vaddr=0x4029d035 depc=0x00000000\nDumping core\n--- BEGIN CORE DUMP ---\n{\"arch\": \"ESP8266\", \"cause\": 100, \"REGS\": {\"addr\": 1073651444, \"data\": \"8S4AQLD6/\n. Ah, so its on by default. I called Sys.wdtSetTimeout(timeout) with a timeout longer than the sleep time and got no core dump on wakeup.\n. Thanks for that info!\n. Looking in the source code I am seeing the file esp_pwm.c, is this what generates the pulse train? I don't have easy access to an oscilloscope, did anyone ever verify the PWM behavior of that code?\n. It turns out to just be a matter of arithmetic. :)\nThis yields a 1ms pulse train with a frequency of 20ms;\nPWM.set(14, 20000, 1000)\nThis yields a 2ms pulse train;\nPWM.set(14, 20000, 2000)\nIt turns out that I can operate small servo motors (TowerPro SG92R) with these pulses at 3.3V (both power and signal), which is very darn handy.\n. Thanks for the info. When you dropped your previous JavaScript API I began working with Micropython, and have had fair success with it. Are there docs that describe your new implementation? If so please post a link and I will have a look.. Due to a commit yesterday;\nTurn off JS by default; enable Clubby on UART0 \nWow, where are you guys going with this?\n. Very sorry to hear this. Being able to code in JavaScript is the one thing that has made your platform interesting to me. And even then, I have been forced to incorporate most of my code into the FW due to the unfortunate need to reserve about half of available memory for JS strings. I'll stick with the FW I am currently able to build and begin investigating other platforms.\nEliminating JS and closing the FW sources is an abandonment of independent developers like myself (assuming there actually are any others). I realize this is a most likely a business decision, you get no revenue from people like me, but it is a little startling to find out about it so abruptly.\n. The JavaScript feature is the only thing I care much about so I can't justify paying a subscription, sorry. If necessary I can move to Lua, Espruino, or MicroPython which seem to be at a similar stage of development. \nIt would be a shame, because I have stayed with you for many months as bugs have slowly been fixed. Only recently am I able to make multiple devices perform commonplace IoT functions in response to server commands with fair reliability.\n. I tried cloning and building fresh firmware today. Previously I could enable JavaScript by editing Makefile.build and setting;\nMG_ENABLE_JS ?= 1\nBuilding and flashing with this flag now does not produce a prompt? But I do see;\n\"Below you should see a JS prompt, feel free to play with it.\"\nIs there an additional step? Also now seeing that there is no JSBIN_EXTRA section of the makefile, apparently no way to include custom JavaScript into the flash?\n. There are several /fs directories, which one? And will files placed there be included and precompiled in flash memory? My small program is too large to load into runtime RAM.\nAlso, what do I need to do in order to get a prompt on the MFT console?\n. So all custom source code intended to be resident on the device has to be passed along to your server in order to be included in a firmware build? I hope I am misunderstanding because that seems invasive to me, why should I have to give you my source code? Also I am not seeing any mention of a console or any debug mechanism. \n. Glad to hear there is a local build option, thanks. It sounds like I should wait until I hear from you that the JavaScript build option is fully in place. \n. ",
    "urish": "+1\n. ",
    "Bluebie": "I would make good use of this. WS2812 has become the defacto standard protocol used by nearly every small digital LED product, from many different vendors and in many different form factors. \n. This is awesome to see in the works. I'd like to use UDP to implement an Art-Net receiver for stage lighting, like Daft Punk styled LED helmets, which would integrate with regular DMX lighting consoles in venues to stream video on to the helmets wirelessly. It could also be used to implement things like Apple's HomeKit or the LIFX lightbulb LAN protocol.\nOne of the most interesting things enabled by these extremely cheap wifi devices is the idea of every little atomic thing being it's own isolated network device, like you could imagine building a robot where every motor has it's own wifi computer, and all motors can be discovered via UDP announcements in a host computer and controlled together as one unit, reconfigurable like lego. UDP's ability to do broadcasts, and importantly, transmit data without any reliability guarantees over WiFi, makes it essential for anyone building low latency distributed systems.\n. ",
    "bytemage": "I too would like to control NeoPixels via an ESP and the Mongoose Firmware.\nNo commercial background, just tinkering for now :)\n. There is a light weight library to drive the NeoPixels.\nhttps://github.com/cpldcpu/light_ws2812\nWould be awesome if you could include it in Mongoose.\n. Any word on this? I have many ideas for little things made out of ESPs and WS2812 LEDs all connected over the internet, and I'ld love to use the Mongoose IoT Firmware for them.\n. While I'm just tinkering, @realzeus seems to be interested in it for a commercial project. But I totally get that you have to prioritize. Thanks for the response.\n. Hey there, just wanted to check back an make sure you don't forget about this ;)\nI've been using the Arduion IDE and Blynk to make some remote controlled NeoPixel light effects for now. But a JS based onboard interface would be sweet, and would be a major step to it actually becoming an actual product and maybe even a commercial project.\n. Oh, sorry ... So, I've built my first prototypes of \"light in a jar\", being NeoPixels and and ESP8266 in an jar. Currently I'm using Blynk and the basic ArduinoIDE firmware for the ESP to control the light effects but I'ld like to us Mongoose as I'm working with JS on a daily basis and would like to use it to build a proper configuration panel that is served directly from the ESP, instead of controlling it via an App and a server. Mostly because for Blynk to work the ESP needs an internet connection, and while I'm now simply using my mobile hotspot on my phone, for a proper \"product\" it needs to work the \"mongoose way\". Starting with AP mode for the initial setup and then connecting to a user defined WLAN when provided. Currently I have to set specific WLAN credentials before compiling and flashing. That could be extended to be more flexible, but why do that when Mongoose already has such a great setup process. It's just missing the NeoPixel control code ;)\n. There is a light weight library to drive the NeoPixels and other RGB LEDs.\nhttps://github.com/cpldcpu/light_ws2812\nI don't think you need to know much about the NeoPixels to include that library, but you do need to know how to integrate it into the Mongoose framework. And at that you guys should be much better at than anyone else.\n. Nope, you can't. WS2812 support is not commercially interesting enough to warrant any effort, it seems.\n. ",
    "jamser": "ws2812 in mongoose iot ok? how can i use javascript make the RGB LEDs with NeoPixel !~\n. ",
    "intx82": "+1 \nit would by nice use some raw network functions\n. +1\n. +alashkin\nYes, it's work!   thank you for review this issue.\n. ",
    "lukevenediger": "Related to #98 (UDP Support)\n. Hi @alashkin,\nThis morning I tried using FNC to flash the device instead and managed to get it working (yay!). I had to tell it to flash at a baud rate of 115200. Also, flashing using FNC was at least 4x faster than using esptool.py.\nHere's what I used to flash the chip:\n/Applications/FNC.app/Contents/MacOS/FNC --flash-baud-rate 115200 --flash smartjs-esp8266-20160220203212.zip --platform esp8266 --port /dev/cu.wchusbserial1410\nI was able to flash my NodeMCU and the Witty board I mentioned in the issue. I'm guessing there's some magic happening in FNC that causes it to flash properly. The speed difference is significant too - it's over a minute using esptool.py and about 5 seconds using FNC.\nI'll leave you to close this unless you have any questions or want me to try something else.\nThanks,\nLuke\n. Hi,\nYes for sure. My use case is being able to send lightweight messages to a data broker that's connected to Firebase (see https://github.com/lukevenediger/firebase-udp-bridge/ ). I could add support for websockets but there might be other clients wanting to connect to the broker that don't have websocket support.\nIn terms of the API, I guess I'd like it to be similar to how you send and receive UDP messages in Node.js, using the Socket class (see https://nodejs.org/api/dgram ), but held in a root namespace called UDP.\nHere's an idea for a UDP API:\n``` javascript\n/\n * Send UDP packets to remote hosts. Listen for incoming packets and process them.\n * @singleton\n */\nvar UDP = {\n  /\n   * Send a UDP packet\n   * @param {Array[]} bytes the payload\n   * @param {String} remoteHost the recipient's IP or hostname\n   * @param {Number} remotePort the recipient's listen port\n   * @param {Function} onError callback that's fired if an error occurs\n   */\n  send: function(bytes, remoteHost, remotePort, onError) {},\n/*\n   * Bind to an address and port and listen for incoming packets\n   * @param {String} address the local address to bind to\n   * @param {Number} port the local port to listen on\n   * @param {Function} onReady callback that's fired when the listener is active\n   * @param {Function} onMessage callback that's fired when a new packet arrives\n   * @param {Function} onError callback that's fired if an error occurs\n   * @returns {Function} a function that, when called, will stop listening for traffic\n   /\n  bind: function(address, port, onReady, onMessage, onError) {\n    return function cancelBind() { ... };\n  }\n};\n```\nHere's a description of each of the callback functions passed to \"bind\"\n``` javascript\n/*\n * Called when the socket is ready to accept data\n * @param {String} listenAddress the IP or hostname that the socket is bound to\n * @param {Number} listenPort the local listen port\n /\nfunction onReady(listenAddress, listenPort) {\n};\n/*\n * Called when a new packet arrives on the socket\n * @param {Array[]} data an array of bytes\n * @param {String} remoteAddress the sender's IP or hostname\n * @param {Number} remotePort the sender's port\n /\nfunction onMessage(data, remoteAddress, remotePort) {\n};\n/*\n * Called when an error occurs while listening for data\n * @param {Error} error information about the error\n /\nfunction onError(error) {\n};\n```\n. Hi @cpq,\nFirebase uses websockets, but their protocol is closed unfortunately. I've found that low-powered devices don't need all that their client offers but just a subset (reading, writing and subscribing to changes). The plain UDP API will allow clients to talk to the firebase-udp-bridge, which will enable Firebase interactions.\nThanks,\nLuke\n. Woo hoo thanks @cpq!\n. I see the docs made it in today (https://github.com/cesanta/iot/commit/db4329eda7020ca2715dd18e3917406a7522c315) - not long now. Thanks for your effort!\n. Wooo hoo! thanks @alashkin! I'll give it a try this weekend - yeah!!\n. hey @rojer thanks! I'll check that out and re-open if necessary.\n. Ok thanks @mmikulicic I'll try this now.\n. That fixed it - thanks @mmikulicic!\n. Oops wrong project. Moved to https://github.com/cesanta/fnc/issues/2\n. Thanks @mmikulicic!\n. @alashkin I have a use case to include a unique ID when the chip authenticates. I could use the MAC address but a chip ID is harder to spoof.\n. @mmikulicic I like the idea of having both as an option. Having an easy way to set an ID on the chip means that I can set the ID before flashing, and I don't need to query the device before adding it to a device registry database. On the other hand, I like what @carterw says about not having to stamp an ID into the chip - that is pretty convenient and probably harder to spoof.\n. +1 - I have a need to integrate with a DS18B20 temperature sensor and this would make it a whole lot easier.\n. ",
    "dude-mansaa": "Above links of UDP and TCP apis are broke. Could you please provide the correct links?. I have followed the process of encryption. I do not understand what you are saying. Could you please explain?. https://forum.mongoose-os.com/discussion/comment/7025/#Comment_7025\nYou can even check this link for better logs.. ",
    "master-q": "Yes. I registered them.\nI'll try https://github.com/cesanta/smart.js/releases instead of my own building.\n. I got same Device id and Device psk with Smart.js Beta version. Should I re-assign my own id and psk into the firmware?\n```\nVersion: ESP8266-master/20151205-132822/7e198c38 \nDevice id: //api.cesanta.com/d/dev_54241 \nDevice psk: psk_97082 \nCloud: //api.cesanta.com \nHELO! Type some JS. See https://github.com/cesanta/smart.js for more info. \nsmartjs 28680/576$\n```\n. I got success with Smart.js Beta version. \n```\n$ unar flashnchips-win.zip\n$ cd flashnchips-win/firmware/ESP8266/Smart.js\n$ esptool.py --baud 115200 --port /dev/ttyUSB0 write_flash 0x00000 0x00000.bin 0x11000 0x11000.bin 0x6d000 0x6d000.bin\n$ picocom -b 115200 --omap crcrlf /dev/ttyUSB0\nDevice id: //api.cesanta.com/d/dev_84227 \nDevice psk: psk_36751 \nCloud: //api.cesanta.com \nHELO! Type some JS. See https://github.com/cesanta/smart.js for more info. \nsmartjs 29032/2268$ Wifi.setup('XXXXXXXX','YYYYYYYYYY')\ntrue\nsmartjs 29208/2376$ Wifi.ip()\n192.168.179.3\nsmartjs 29016/2280$ Wifi.status()\ngot ip\nsmartjs 29112/2280$ demo()\nInitializing demo data source \nStarting temperature push demo in background, type Debug.mode(1) to see activity \nundefined\n```\nI think the git repo version has some error to connect https://dashboard.cesanta.com/.\nAnd I think I should assign own ID into the firmware. How to use flashnchips's --generate-id option?\n\n\n\n. O.K. I would like to wait the end of refactoring. Thanks.\n. ",
    "aperepel": "This is OSX Yosemite. Using a standard built-in WebDAV client (Go to server menu). Connecting as Guest, no password.\nYou can perform a simple test by navigating to /Volumes/<address> and then touch and edit a file in the root of esp12e filesystem. The file gets created, but content is not written. Drag and drop has similar effects. \n. Thanks, could you please add a section/paragraph in a doc describing the workflow? E.g. post-flashing the firmware, which config file should be added (or modified for that matter)? I'd imagine this will be a very common request, given that the latest dev release 'forgets' the config on every reboot by default.\n. ",
    "adamclerk": "Can you please update your documentation saying such. I spend the better part of 2 hours wrestling with WebDAV and just started uploading the files via Flash&Chips instead.\n. ",
    "marsteini": "Hi, I'm experiencing the same problem. Is there a binary build of the current branch?\n. ",
    "drrest": "\"fw_id\":\"20160128-174140/ui@f20e0990\",\"fw_timestamp\":\"2016-01-28T17:41:40.209322\",\"fw_version\":\"20160128174140\",\"arch\":\"esp8266\"\nAlso i can 't read DHT11 values (i check on several boards.((( DHT11.read(xx) - have result - string \"null\"\n. ",
    "pyromaticx": "Here is the debug output. \nstacktrace.txt\nI am using the beta2 firmware. \nThe code being executed is:\nfunction blink(pin) {\n  var pin = pin || 0;\n  var level = GPIO.read(pin);\n  GPIO.setmode(pin, 0, 0);\n  GPIO.write(pin, !level);\n  console.log(GC.stat()); // added after crashing to test stats\n  setTimeout(function() { blink(pin); }, 500);\n}\nWhat I did notice from logging GC.stat() during each iteration that \"sysfree\" is < 1500 before crash. Is this little bit of code depleting all free memory before it can be freed / garbage collected?\nfirst log:\n{\"owned_max\":8,\"owned\":4,\"astsize\":19,\"funcncell\":16,\"funcnfree\":3,\"propncell\":24,\"propnfree\":2,\"objncell\":12,\"objfree\":6,\"struse\":1814,\"strres\":2284,\"jsfree\":168,\"jssize\":9556,\"sysfree\":29448}\nLast log:\n```\n{\"owned_max\":10,\"owned\":7,\"astsize\":0,\"funcncell\":16,\"funcnfree\":2,\"propncell\":24,\"propnfree\":2,\"objncell\":12,\"objfree\":0,\"struse\":1814,\"strres\":2284,\"jsfree\":80,\"jssize\":34676,\"sysfree\":1472} \nfun 0x4022b878 sp 0x3fffe090 limit 0x3fffdfa0 left 240\nTrap 9: pc=0x4027d4fa va=0x1\nDumping core to debug output\nrebooting\n``\n. Thanks, that solved it. I also noticed you updated the documentation forSys.wdtfeed()` Keep up the great work, really liking the framework.\n. ",
    "olterion": "Hello,\nbefore I had a ESP-01 with 512kByte flash. No I have ordered this one with 1 MByte flash special for smart.js\nThis Board with 1 MByte flash has the flash chip 25Q80A.\nWhich board is a good one to start with smart.js?\n. With the last Flash'n'Chips (20160216-132230/0.8.1@b97444d6) and the last firmware (smartjs-20160215095410) is the same behavior.\nAfter the first reboot everything is fine, after the second reboot the sys_init.js cannot be opened.\n. @mmikulicic \nI tried the esp8266-flash-params with 0220 and 0020. After the flash process the Flash'n'Chips program stopped.\nSo I tried to enter 0x0220 and 0x0020 in the esp8266-flash-params. But in both cases the behavior after the second reboot was the same than before (sys_init.js not found)\nI installed the esptool and here is the output of my flash_id:\nManufacturer: e0\nDevice: 4014\n@rojer \nAnd here is the log of the flashing process:\nhttp://pastebin.com/fjkZzN5m\n. ",
    "amid0": "Hi rojer.\nI attaching dumps after our today conversation in chat\ndumps.zip\n. Hi guys. Is the any updates on issue?\n. Ok. It seems working for me.\nWell done guys.\nThank you.\nNow I can continue to learning SmartJS.\n. ",
    "gopalakrishnan-subramani": "OK, following setting worked for me using picocom\npicocom --baud 115200   --omap crlf --imap lfcrlf  /dev/cu.SLAB_USBtoUART\nClosing..Thanks.\n. I  found that using this command \nmos build --arch esp32 && mos flash\nfails while uploading firmware. \nBut when I do them separately , flash is working fine. \n``` \nmos build --arch esp32\nmos flash\n```. ",
    "TRAHOMOTO": "Same problems\n. Yes! You are damn right! \n. ",
    "vinnitu": "Why? I need too\n. what about dht11?\n. ",
    "eduard-sukharev": "@realzeus thanks for sharing this. As far as i can see there's some code for v7 - does it mean that I can use it with JavaScript?\nCan you show JavaScript example usage?\n. @realzeus\nIn order to make a PR you have to:\n0. Fork this repo and clone your fork to your local development machine (git clone <repo url>)\n1. Create new git branch with git checkout -b add_dht\n2. Make your changes to the code\n3. Prepare your changes for commit (add changes to stage and add new files too)\n4. Commit your changes with git commit -m \"commit message here\"\n5. Push your local branch to your remote original repository (your fork on github) with git push --set-upstream origin add_dht\n6. Go to github and it will promptly ask you if you would like to make a pull request\n. ",
    "apriantama": "hi @realzeus \ncould you please update your steps, with the current repo https://github.com/cesanta/mongoose-os\nI couldn't find Mongoose IoT Firmware Source anymore.\nThanks. ",
    "r1kkman": "Hi there! Can you help me out adding Bosch BMP280 driver into mongoose os?\nThanks!. ",
    "kroshilin": "However, I can send files to device using curl -T filename.txt http://192.168.1.121/filename.txt\n. \u041f\u0440\u0438\u0432\u0435\u0442!\nNo, i don't. Because it is only the initial FW version is on my device. I suppose it does not have any files that can console.log(\"Hello\")?\n. I think that the problem is that new FW with changes was not deployed to my device. \n[ 09:01:23 ] == Error deploying firmware: context deadline exceeded\nBuild log\n```\n[ 18:15:29 ] make: Entering directory /code'\n[ 18:15:29 ] /sjs/repo/fw/platforms/esp8266/Makefile.build:441: warning: overriding commands for target /sjs/repo/fw/platforms/esp8266/.build/fw_temp/0x00000.bin'\n[ 18:15:29 ] /sjs/repo/fw/platforms/esp8266/Makefile.build:292: warning: ignoring old commands for target /sjs/repo/fw/platforms/esp8266/.build/fw_temp/0x00000.bin'\n[ 18:15:29 ] make[1]: Entering directory /sjs/repo/common/platforms/esp8266/lwip'\n[ 18:15:29 ] make[1]: Nothing to be done for all'. make[1]: Leaving directory /sjs/repo/common/platforms/esp8266/lwip'\n[ 18:15:29 ] # OSX virtualbox shared folder have issues with some symlinks. JS_SRCS contains their canonical location\n[ 18:15:29 ] V7C /sjs/repo/fw/src/js/sys_init.js -> /sjs/repo/fw/platforms/esp8266/.build/fs_temp/sys_init.js\n[ 18:15:29 ] V7C /sjs/repo/fw/src/js/demo.js -> /sjs/repo/fw/platforms/esp8266/.build/fs_temp/demo.js\n[ 18:15:29 ] V7C /sjs/repo/fw/src/js/I2C.js -> /sjs/repo/fw/platforms/esp8266/.build/fs_temp/I2C.js\n[ 18:15:29 ] V7C /sjs/repo/fw/src/fs/conflib.js -> /sjs/repo/fw/platforms/esp8266/.build/fs_temp/conflib.js\n[ 18:15:29 ] V7C /code/filesystem/app.js -> /sjs/repo/fw/platforms/esp8266/.build/fs_temp/app.js\n[ 18:15:29 ] RSYNC -> /sjs/repo/fw/platforms/esp8266/.build/fs_temp/\n[ 18:15:29 ] sending incremental file list\n[ 18:15:29 ] app.js\n[ 18:15:29 ] ca.pem\n[ 18:15:29 ] conf_app_defaults.json\n[ 18:15:29 ] conf_app_schema.json\n[ 18:15:29 ] conf_sys_defaults.json\n[ 18:15:29 ] conf_sys_schema.json\n[ 18:15:29 ] index.html\n[ 18:15:29 ]\n[ 18:15:29 ] sent 40,613 bytes received 149 bytes 81,524.00 bytes/sec total size is 40,174 speedup is 0.99\n[ 18:15:29 ] FS /sjs/repo/fw/platforms/esp8266/.build/fs_temp (131072 @ 0xdc000)-> /sjs/repo/fw/platforms/esp8266/.build/fw_temp/0xdc000.bin\n[ 18:15:29 ] adding files in directory /sjs/repo/fw/platforms/esp8266/.build/fs_temp\n[ 18:15:29 ] a conflib.js\n[ 18:15:29 ] a conf_sys_schema.json\n[ 18:15:29 ] a ca.pem\n[ 18:15:29 ] a conf_sys_defaults.json\n[ 18:15:29 ] a index.html\n[ 18:15:29 ] a I2C.js\n[ 18:15:29 ] a conf_app_schema.json\n[ 18:15:30 ] a demo.js a conf_app_defaults.json a app.js\n[ 18:15:30 ] a sys_init.js\n[ 18:15:30 ] Image stats: size=131072, space: total=113201, used=54969, free=58232\n[ 18:15:30 ] GEN /sjs/repo/fw/platforms/esp8266/.build/fw_temp/manifest.json\n[ 18:15:30 ] ZIP /out/mongoose-iot-esp8266-last.zip\n[ 18:15:30 ] Add /sjs/repo/fw/platforms/esp8266/.build/fw_temp/0x01000.bin\n[ 18:15:30 ] Add /sjs/repo/fw/platforms/esp8266/.build/fw_temp/0x00000.bin\n[ 18:15:30 ] Add /sjs/repo/fw/platforms/esp8266/.build/fw_temp/0xdc000.bin\n[ 18:15:30 ] Add /sjs/repo/fw/platforms/esp8266/.build/fw_temp/0x11000.bin\n[ 18:15:30 ] Built version 20160711075518\n[ 18:15:30 ] make: Leaving directory /code'\n[ 18:15:32 ] == Build success\n[ 18:15:32 ] == Deploying firmware\n[ 18:16:07 ] == Error deploying firmware: context deadline exceeded\n```\nDevice console\n```\n[ 18:15:32 ] Starting update\n[ 18:15:32 ] Updating FW\n```\n. I've reset it and left switched on. \nMy ESP is like this one. Unfortunately I dont know the size of flash. \nI flashed it with NodeMCU and previous versions of mongoose-iot several times and it was ok.\nAs I can see, \"initial\" fw was ok - i can open settings page in my local network.\n. Dont know flash size. How could I refine it? Yes, i flashed it with MFT successfully.\n. ",
    "4713": "WebDAV is also not functioning with davfs2 on Raspberry or tools like carotdav on Windows.\nBoth tools seem to mount the device but read/write is not possible.\n. ",
    "javatai": "I have same situation like  you have.\n. ",
    "suculent": "void get_mac_address (uint8_t * mac_uin8t, char * mac_str)\n{\n    device_get_mac_address(mac_uin8t);\n    *mac_uin8t=0x5C;                //Originally informs 5E (AP MAC ADDRESS)\n    *(mac_uin8t+1)=0xCF;                            //Not really necessary\n    *(mac_uin8t+2)=0x7F;                            //Not really necessary\n    sprintf(mac_str, \"%02x%02x%02x%02x%02x%02x\\n\", mac_uin8t[0]&0xFF,mac_uin8t[1]&0xFF,mac_uin8t[2]&0xFF,mac_uin8t[3]&0xFF,mac_uin8t[4]&0xFF,mac_uin8t[5]&0xFF);\n    puts(mac_string);\n}\nI am on ESP32 and this crashes, also Sys.ro_vars.mac_address in mJS is useless (ro_vars do not exist). Any help would be appreaciated. https://github.com/suculent/thinx-firmware-esp8266-mos.git\nIt's such a stupid showstopper not being able to get MAC address for so long already.... However closed this is, it does not work on ESP32 and i'm wondering about ESP8266 then. There's an example of FFI way but that either crashes or returns just a uint8 that needs to be translated to hex form somehow (i believe I've seen an example on that too...). Thanks a lot. However the RPC.LOCAL currently does not work in mJS as expected (yet). On MOS 1.14 I've tried let rpc_local = Cfg.get(\"device.id\"); and using this value instead of \"RPC.LOCAL\" returns error (probably because it does not contain any protocol)\nSo far I was able to use last 6 characters from device-id and prepend \u201c5ECF7F\u201d / \u201c5CCF7F\" depending on device type, but that\u2019s a hack.\n\nhttps://mongoose-os.com/docs/quickstart/mos-tool-tips.html#get-mac-address-and-other-system-info-in-javascript https://mongoose-os.com/docs/quickstart/mos-tool-tips.html#get-mac-address-and-other-system-info-in-javascript\n. Great, it would be worth noting which libraries are required for which mJS include.\nBTW, I'm still ending with mg_rpc_get_channel_i: Unsupported connection scheme in RPC.LOCAL error.\n\nMy libs:\n```\nList of libraries used by this app, in order of initialisation\nlibs:\n  - origin: https://github.com/mongoose-os-libs/rpc-common\n  - origin: https://github.com/mongoose-os-libs/rpc-loopback\n  - origin: https://github.com/mongoose-os-libs/rpc-uart\n  - origin: https://github.com/mongoose-os-libs/rpc-loopback\n  - origin: https://github.com/mongoose-os-libs/rpc-mqtt\n  - origin: https://github.com/mongoose-os-libs/rpc-service-config\n  - origin: https://github.com/mongoose-os-libs/rpc-service-fs\n  - origin: https://github.com/mongoose-os-libs/rpc-service-gpio\n  - origin: https://github.com/mongoose-os-libs/rpc-service-i2c\n  - origin: https://github.com/mongoose-os-libs/rpc-service-ota\n  - origin: https://github.com/mongoose-os-libs/rpc-uart\n  - origin: https://github.com/mongoose-os-libs/mjs\n  - origin: https://github.com/mongoose-os-libs/wifi\n```. ",
    "dvv": "+1 for the same reason. TIA\n. @alashkin Right. Am wondering what is the numbers in case on empty callback. (Have no ESP within the grasp, am thinking abstractly so far).\n@mmikulicic Probably right. But I'd like to try to apply the goods provided by coding in interpreting language.\n. A rough estimation of Sys.time granularity:\n``` js\nfor (var i = 0; i < 10; ++i ) console.log(Sys.time() - Sys.time())\n-0.000223\n-0.0002099999\n-0.000207\n-0.0002109999\n-0.0002069999\n-0.000211\n-0.0002059999\n-0.0002139999\n-0.000202\n-0.000207\n```\nNB: a slight speedup via caching seems to work:\n``` js\nvar fn = Sys.time\nfor (var i = 0; i < 10; ++i ) console.log(fn() - fn())\n-0.0001829999\n-0.000159\n-0.000155\n-0.0001589999\n-0.000156\n-0.000159\n-0.0001549999\n-0.0001629999\n-0.000152\n-0.000155\n```\nSo it seems we've no JS means to distinguish signals faster than 200us.\nBut it's pretty good for decoding say IR NEC ;)\n. Sampling with memorizing seems to be much worse:\n``` js\nvar fn = Sys.time\nvar ts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nfor (var i = 0; i < 10; ++i ) ts[i] = fn()\nfor (var i = 1; i < 10; ++i ) console.log(ts[i] - ts[i - 1])\n0.000774\n0.000938\n0.0005659999\n0.000683\n0.0005669999\n0.000606\n0.000602\n0.000609\n0.0005659999\n``\n. You see, here's no issue withconsole.logvs.printas I measure the time taken by just two calls toSys.timeand one subtraction. Futhermore, to cope with possibly slower dereferencing I cacheSys.time` function.\nWhat to arrays as you can see I preallocated the array to be sure no allocations should occur during the run.\nSo this issue transformed into kinda research for reference.\nWhat I would very like to have is a function implemented in C which asyncronously reads a number of pin state transitions and callback with the array of pulse durations, kinda:\njs\nGPIO.sample(pin, ntransitions, timeout, function (err, durations) { /* we have the whole JS to analyse durations here */ });\n. UPDATE\nThis should disable log caching:\nSys.conf.console.send_to_cloud = false\nSys.conf.save()\nIs there any reason why send_to_cloud is not configurable via configuration page?\n. Below is the script I used:\njs\nvar sub = dgram.createSocket(\"udp4\");\nsub.on(\"message\", function (message, peer) { console.log(\"receive\", GC.stat().sysfree, message.length); });\nsub.bind(5684, \"0.0.0.0\");\nLoaded with nodejs:\n``` js\nfunction sss(len) {\n  var s = \"[\";\n  for (; --len >= 0;) s += \".\";\n  s += \"]\";\n  return s;\n}\nvar fd = require(\"dgram\").createSocket(\"udp4\");\nfunction out() {\n  var buf = new Buffer(\"foo\" + \"=\" + sss(1000)); // load pedal\n  fd.send(buf, 0, buf.length, 5684, \"192.168.1.201\", function (err, bytes) {\n    if (err) throw err;\n    console.log(\"SENT\");\n    setTimeout(out, 20) // accelerator pedal\n  });\n}\nout();\n```\n. ",
    "codelinq": "+1 for the same reason. Since there are c libraries written for onewire and ds18b20, would it be possible to include the OneWire.h file and write js wrapper using mjs's ffi to call the c functions? Or is that just wishful thinking? Here is the arduino OneWire library. https://github.com/PaulStoffregen/OneWire/blob/master/OneWire.cpp\n. ",
    "meteofelix": "+1 also for being able to use the DS18B20. ",
    "El-Mango": "+1 also for being able to use the DS18B20. ",
    "cristiancs": "Any news on this?. Hi, just want to add that in Mac it doesn't pick the port you select on the drop down, always use the first one.. try switch to protopying>configuration> find dns_sd and change  \"host_name\": \"mOS_esp8266_????\" with something random like \"mOS_esp8266_7CiCH\". ",
    "snowyu": "\nBuild firmware from source(make sure no conf.json file in your source) and burn it.\nEnter Wifi.setup('WifiNetworkName', 'WifiPassword') on console to connect the internect.\nThe device has registered it to the clubby service successful.\n\nfw 31924/484$ File.loadJSON('sdsdd')\n{\"message\":\"cannot open [sdsdd]\"}\nfw 32620/832$\nSince 17 days passed. I will pull codes, and try again\n. It's ok now. The loadJSON returns undefined now. I compares the codes from 823ca9d.\npatch\n@@ -9797,7 +10172,9 @@ V7_PRIVATE enum v7_err File_loadJSON(struct v7 *v7, v7_val_t *res) {\n     rcode = v7_parse_json_file(v7, file_name, res);\n     if (rcode != V7_OK) {\n       /* swallow exception and return undefined */\n+      v7_clear_thrown_value(v7);\n       rcode = V7_OK;\n+      *res = v7_mk_undefined();\n     }\n   }\nBut, Why does the loadJSON change its return convention?\n. ",
    "prinzipx": "Hello again,\ni forgot that i was not able to flash the chip via the FnC so i flashed it via \"ESP FLASH DOWNLOAD TOOL\".\nI dont know if this information is relevant.\n\n. Hallo,\nnow (after breakfast ;-) ) the ESP have stopped rebooting. Here a new Screenshot.\n\nI'm really sorry to post so much here, please close the issue because i think its a problem of me and not of mongoose iot :-)\n. ",
    "apmascalabs": "Hi, have you seen something about?\n. ",
    "vence2013": "while i use 'rsa:1024' cert.pem, it seems work well. previous pem is 'rsa:2048', esp8266 reboot while https connection, so, is there any suggestion parmeter like 'rsa' when generate a cert?\n. ",
    "IgorTrud": "Foget to say: Client mode  work fine on the same HW.\n. No, just the same - unstable.\nGoing to try on ESP-12 module, waiting for my order.\n. ",
    "wallaroo": "hi!\nsame result with https://mongoose-iot.com/profile/api//:\nthe page remains on /v1/Account api detail.\nand for each click on other api the following error is thrown:\nvendor-c16bc78355.js:32 Error: Could not resolve 'main.project.api' from state 'main.profile.api'\n    at Object.C.transitionTo (vendor-c16bc78355.js:57)\n    at Object.C.go (vendor-c16bc78355.js:57)\n    at vendor-c16bc78355.js:57\n    at vendor-c16bc78355.js:33\n    at o (vendor-c16bc78355.js:31)\n    at vendor-c16bc78355.js:31\nPS.\nmaybe i did a bad copy-paste for the missing '/'\n. this is the test case:\n1) go to https://mongoose-iot.com/\n2) signin with github\n3)click on api button at the left navbar (that of your image)\n4) click on \"CreateUser\" (or whatever other api link)\nresult:\nthe page remain on initial /v1/Account api detail and the following javascript error is thrown:\nvendor-c16bc78355.js:32 Error: Could not resolve 'main.project.api' from state 'main.profile.api' at Object.C.transitionTo (vendor-c16bc78355.js:57) at Object.C.go (vendor-c16bc78355.js:57) at vendor-c16bc78355.js:57 at vendor-c16bc78355.js:33 at o (vendor-c16bc78355.js:31) at vendor-c16bc78355.js:31\n. now all works well\n. Usleep takes microseconds as parameter... So 1 second = 1000000\nIl mer 10 ago 2016, 01:47 Bill Carter notifications@github.com ha scritto:\n\nusleep() doesn't appear to do anything. Typing in usleep(200000) on the\nMFT console and I still get prompts when I hit return. And my running\nsoftware continues to run.\nAm I missing something? Has nobody else tried these things? Do I need to\ntie some pins to power or ground to make it work?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/cesanta/mongoose-iot/issues/148#issuecomment-238726781,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACwcUCD-1coUwZkrG7UqcmgAza-0n-L0ks5qeRF2gaJpZM4JeU_S\n.\n\n. i tested dsleep with the 1.0-rc1 and esp8266 and all worked well...\nyou have to wire GPIO16 with RST otherwise the board can't wake up.\nNB. also dsleep takes microseconds as parameter, so... for test through serial terminal use high values. i.e. dsleep(10 * 1000000); //10s\n. take a look to http://www.espressif.com/sites/default/files/9b-esp8266-low_power_solutions_en_0.pdf (page 6)\nthat option define if and how RF is powered on next wake up\n. i think i had some issue related to the mounted volume in my docker container (maybe something like EOL DOS) i've recloned in a different directory and all worked well...\nthank you for support!!\n. so... if i understood following the solution # 2 of @alashkin in my case (4M flash size) should be possible to layout flash with 2 slots of 1M for FW and a slot of 2M for the second FS right?\nin this way ota should still work?\n. cool! i'll try to do something of reusable... so maybe a pull request could arrive ;-)\nMany thanks for info and support!!!\n. hi! i was preparing the pull request for the FS_EXT feature but after a git pull i can't build... i get this error:\n\nroot@aa3df25dacf7:~/mongoose# make -C fw/platforms/esp8266/\nmake: Entering directory '/root/mongoose/fw/platforms/esp8266'\nUnable to find image 'docker.cesanta.com:5000/esp8266-build-oss:2.0.0-r1' locally\ndocker: Error response from daemon: Get https://docker.cesanta.com:5000/v1/_ping: dial tcp 104.155.75.84:5000: getsockopt: connection refused.\nSee 'docker run --help'.\nMakefile:24: recipe for target 'all' failed\nmake: *** [all] Error 125\nmake: Leaving directory '/root/mongoose/fw/platforms/esp8266'\nroot@aa3df25dacf7:~/mongoose#\nsome suggestion?\n. Hi Sergey,\n my reasons are:\n- for my project not all nodes will have a continuos internet connection but must have a pretty complex wui so i can't use a cdn to serve library like jquery that with his 85K already overflows the current available space in FS (~60K).\n- i have to log some data (~5KB per day) and \"harvest\" them with regularity with a client (smart phone).\ni know, i can attach an SD reader via SPI but this would increase cost significantly and don't need more than 1,5 MB\nwhy i choose mongoose-iot? primarily because is the easiest way to implement the simple dynamic rule engine that i need (rule=function(){...}); secondarily because i like it, i have other ideas to use it and i trust in his growth...\n. hi guys, i think js is what differentiates this platform from the others. however, I am one of those who doesn't use web ide... i think CLI is a great idea and maybe even a plugin for the most popular ide (Eclipse, Jetbrains WS/IJ). The ability to run JS on IoT devices enables a great community of developers and amateurs to create applications...\nlike explained in https://github.com/cesanta/mongoose-iot/pull/152#issuecomment-240028802 i think there is a problem with FS space to proficiently use js... but i guess it is solvable with some tuning with the using of flash during OTA... (atleast for ESP)\n...so if JS will be dropped out, i think i'll move to other platforms... (i know, i'm a drop in the ocean).\nMichele\n. i added the MG_ENABLE_JS parameter copy that seems to be missing\n$(MIOT_POSIX_BIN):\n    $(MAKE) -j4 -C $(MIOT_POSIX_PATH) \\\n      REPO_PATH=$(REPO_PATH) \\\n      MG_ENABLE_JS=$(MG_ENABLE_JS) \\\n      V7_FEATURES='$(V7_FEATURES) -DV7_MAIN -DV7_FREEZE' \\\n      BIN_DIR=$(MIOT_POSIX_BIN_DIR) \\\n      BUILD_DIR=$(MIOT_POSIX_BUILD_DIR)\nendif\nbut i only changed the error:\nmake: Entering directory '/root/mongoose-iot/fw/platforms/esp8266'\nmake: Entering directory '/src/fw/platforms/esp8266'\nmake -j4 -C /src//fw/platforms/posix \\\n  REPO_PATH=/src/ \\\n  MG_ENABLE_JS=1 \\\n  V7_FEATURES='-DV7_ENABLE__File__list=1 -DV7_ENABLE__File__require=1 -DV7_ENABLE__Function__bind=1 -DV7_ENABLE__Function__call=1 -DV7_ENABLE__Math=1 -DV7_ENABLE__Math__ceil=1 -DV7_ENABLE__Math__floor=1 -DV7_ENABLE__Math__max=1 -DV7_ENABLE__Math__min=1 -DV7_ENABLE__Math__random=1 -DV7_ENABLE__Math__round=1 -DV7_ENABLE__Memory__stats=1 -DV7_ENABLE__Proxy=1 -DV7_BUILD_PROFILE=1 -DV7_ENABLE_FILE -DV7_DISABLE_AST_TAG_NAMES -DV7_ENABLE__RegExp=1 -DV7_ENABLE__StackTrace=1 -DV7_ENABLE__Object__getPrototypeOf -DV7_ENABLE__Object__isPrototypeOf -DV7_ENABLE__Object__hasOwnProperty -DV7_ENABLE__Object__keys -DV7_ENABLE__Object__isExtensible -DV7_EXPOSE_PRIVATE -DV7_ENABLE_ENTITY_IDS -DV7_MAIN -DV7_FREEZE' \\\n  BIN_DIR=/src/fw/platforms/esp8266/.build/posix_sjs_bin \\\n  BUILD_DIR=/src/fw/platforms/esp8266/.build/posix_sjs_build\nmake[1]: Entering directory '/src/fw/platforms/esp8266'\nmake[1]: warning: -jN forced in submake: disabling jobserver mode.\nmake[1]: Circular /src/fw/platforms/esp8266/.build/posix_sjs_build/build_info.c <- /src/fw/platforms/esp8266/.build/posix_sjs_build/build_info.o dependency dropped.\nLD /src/fw/platforms/esp8266/.build/posix_sjs_bin/mongoose-iot\nMKFS fs\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `mbuf_resize':\n/src/fw/platforms/posix/../../../v7/v7.c:7332: multiple definition of `mbuf_resize'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:999: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `mbuf_init':\n/src/fw/platforms/posix/../../../v7/v7.c:7320: multiple definition of `mbuf_init'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:987: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `mbuf_free':\n/src/fw/platforms/posix/../../../v7/v7.c:7326: multiple definition of `mbuf_free'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:993: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `mbuf_trim':\n/src/fw/platforms/posix/../../../v7/v7.c:7347: multiple definition of `mbuf_trim'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1014: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `mbuf_insert':\n/src/fw/platforms/posix/../../../v7/v7.c:7353: multiple definition of `mbuf_insert'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1020: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `mbuf_append':\n/src/fw/platforms/posix/../../../v7/v7.c:7383: multiple definition of `mbuf_append'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1050: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `mbuf_remove':\n/src/fw/platforms/posix/../../../v7/v7.c:7387: multiple definition of `mbuf_remove'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1054: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `c_strnlen':\n/src/fw/platforms/posix/../../../v7/v7.c:7409: multiple definition of `c_strnlen'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1397: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `c_vsnprintf':\n/src/fw/platforms/posix/../../../v7/v7.c:7468: multiple definition of `c_vsnprintf'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1456: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `c_snprintf':\n/src/fw/platforms/posix/../../../v7/v7.c:7605: multiple definition of `c_snprintf'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1593: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `c_strnstr':\n/src/fw/platforms/posix/../../../v7/v7.c:7645: multiple definition of `c_strnstr'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1633: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_base64_init':\n/src/fw/platforms/posix/../../../v7/v7.c:9084: multiple definition of `cs_base64_init'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:319: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_base64_update':\n/src/fw/platforms/posix/../../../v7/v7.c:9092: multiple definition of `cs_base64_update'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:327: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_base64_finish':\n/src/fw/platforms/posix/../../../v7/v7.c:9101: multiple definition of `cs_base64_finish'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:336: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_base64_encode':\n/src/fw/platforms/posix/../../../v7/v7.c:9148: multiple definition of `cs_base64_encode'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:383: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_fprint_base64':\n/src/fw/platforms/posix/../../../v7/v7.c:9164: multiple definition of `cs_fprint_base64'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:399: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_base64_decode':\n/src/fw/platforms/posix/../../../v7/v7.c:9214: multiple definition of `cs_base64_decode'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:449: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `MD5_Init':\n/src/fw/platforms/posix/../../../v7/v7.c:9284: multiple definition of `MD5_Init'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:770: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `MD5_Update':\n/src/fw/platforms/posix/../../../v7/v7.c:9375: multiple definition of `MD5_Update'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:861: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `MD5_Final':\n/src/fw/platforms/posix/../../../v7/v7.c:9410: multiple definition of `MD5_Final'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:896: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_to_hex':\n/src/fw/platforms/posix/../../../v7/v7.c:9449: multiple definition of `cs_to_hex'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:935: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_md5':\n/src/fw/platforms/posix/../../../v7/v7.c:9456: multiple definition of `cs_md5'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:942: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_sha1_transform':\n/src/fw/platforms/posix/../../../v7/v7.c:9537: multiple definition of `cs_sha1_transform'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1187: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_sha1_init':\n/src/fw/platforms/posix/../../../v7/v7.c:9644: multiple definition of `cs_sha1_init'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1294: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_sha1_update':\n/src/fw/platforms/posix/../../../v7/v7.c:9653: multiple definition of `cs_sha1_update'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1303: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_sha1_final':\n/src/fw/platforms/posix/../../../v7/v7.c:9672: multiple definition of `cs_sha1_final'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1322: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/v7.o: In function `cs_hmac_sha1':\n/src/fw/platforms/posix/../../../v7/v7.c:9698: multiple definition of `cs_hmac_sha1'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mongoose.o:/src/fw/platforms/posix/../../../mongoose/mongoose.c:1348: first defined here\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_i2c_js.o: In function `i2cjs_ctor':\n/src/fw/platforms/posix/../../src/mg_i2c_js.c:116: undefined reference to `mg_i2c_create'\n/src/fw/platforms/posix/../../src/mg_i2c_js.c:121: undefined reference to `i2c_init'\n/src/fw/platforms/posix/../../src/mg_i2c_js.c:122: undefined reference to `mg_i2c_close'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_i2c_js.o: In function `i2cjs_close':\n/src/fw/platforms/posix/../../src/mg_i2c_js.c:318: undefined reference to `mg_i2c_close'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_i2c_js.o: In function `i2cjs_sendAck':\n/src/fw/platforms/posix/../../src/mg_i2c_js.c:301: undefined reference to `i2c_send_ack'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_i2c_js.o: In function `i2cjs_readString':\n/src/fw/platforms/posix/../../src/mg_i2c_js.c:278: undefined reference to `i2c_read_bytes'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_i2c_js.o: In function `i2cjs_readByte':\n/src/fw/platforms/posix/../../src/mg_i2c_js.c:237: undefined reference to `i2c_read_byte'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_i2c_js.o: In function `i2cjs_send':\n/src/fw/platforms/posix/../../src/mg_i2c_js.c:200: undefined reference to `i2c_send_byte'\n/src/fw/platforms/posix/../../src/mg_i2c_js.c:204: undefined reference to `i2c_send_bytes'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_i2c_js.o: In function `i2cjs_stop':\n/src/fw/platforms/posix/../../src/mg_i2c_js.c:178: undefined reference to `i2c_stop'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_i2c_js.o: In function `i2cjs_start':\n/src/fw/platforms/posix/../../src/mg_i2c_js.c:162: undefined reference to `i2c_start'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_spi_js.o: In function `spi_js_ctor':\n/src/fw/platforms/posix/../../src/mg_spi_js.c:39: undefined reference to `mg_spi_create'\n/src/fw/platforms/posix/../../src/mg_spi_js.c:44: undefined reference to `spi_init'\n/src/fw/platforms/posix/../../src/mg_spi_js.c:45: undefined reference to `mg_spi_close'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_spi_js.o: In function `spi_js_close':\n/src/fw/platforms/posix/../../src/mg_spi_js.c:181: undefined reference to `mg_spi_close'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_spi_js.o: In function `spi_js_txn':\n/src/fw/platforms/posix/../../src/mg_spi_js.c:90: undefined reference to `spi_txn'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_spi_js.o: In function `spi_js_tran':\n/src/fw/platforms/posix/../../src/mg_spi_js.c:161: undefined reference to `spi_txn'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_timers_js.o: In function `mg_set_interval_or_timeout':\n/src/fw/platforms/posix/../../src/mg_timers_js.c:27: undefined reference to `mg_set_js_timer'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_v7_ext.o: In function `mg_invoke_cb2_this':\n/src/fw/platforms/posix/../../src/mg_v7_ext.c:268: undefined reference to `mg_invoke_cb'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_v7_ext.o: In function `mg_invoke_cb1_this':\n/src/fw/platforms/posix/../../src/mg_v7_ext.c:283: undefined reference to `mg_invoke_cb'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_v7_ext.o: In function `mg_invoke_cb0_this':\n/src/fw/platforms/posix/../../src/mg_v7_ext.c:294: undefined reference to `mg_invoke_cb'\n/src/fw/platforms/esp8266/.build/posix_sjs_build/mg_mdns.o: In function `on_wifi_change':\n/src/fw/platforms/posix/../../src/mg_mdns.c:60: undefined reference to `mg_mdns_hal_join_group'\ncollect2: error: ld returned 1 exit status\nMakefile:237: recipe for target '/src/fw/platforms/esp8266/.build/posix_sjs_bin/mongoose-iot' failed\nmake[1]: *** [/src/fw/platforms/esp8266/.build/posix_sjs_bin/mongoose-iot] Error 1\nmake[1]: Leaving directory '/src/fw/platforms/posix'\nMakefile.build:498: recipe for target '/src/fw/platforms/esp8266/.build/posix_sjs_bin/mongoose-iot' failed\nmake: *** [/src/fw/platforms/esp8266/.build/posix_sjs_bin/mongoose-iot] Error 2\nmake: Leaving directory '/src/fw/platforms/esp8266'\n../../../fw/docker_common.mk:59: recipe for target 'all' failed\nmake: *** [all] Error 2\nmake: Leaving directory '/root/mongoose-iot/fw/platforms/esp8266'\n. in windows bash i cant install mos cli:\n~$ curl -fsSL https://mongoose-os.com/downloads/mos/install.sh | /bin/bash\nDownloading https://mongoose-os.com/downloads/mos/linux/mos ...\n################################################################## 100,0%\nInstalling into /home/wallaroo/.mos/bin/mos ...\nAdding /home/wallaroo/.mos/bin to your PATH in /home/wallaroo/.bashrc\nSUCCESS: /home/wallaroo/.mos/bin/mos is installed.\nRun '/home/wallaroo/.mos/bin/mos --help' to see all available commands.\nRun '/home/wallaroo/.mos/bin/mos' without arguments to start a simplified Web UI installer.\n~$ .mos/bin/mos\nbash: .mos/bin/mos: cannot execute binary file: invalid executable format. ",
    "rohithreddy": "hi @carterw have you got the SG90 working with mongoose? if so need you help regarding it . How do I initialize PWM module in init.js. Thanks @cpq , will let you know how it works out.. ",
    "ticklemynausea": "Hi @cpq \nCould you please clarify step 3, \"add line \"mgos_pwm_set\" to the list of exported symbols\" ?\nThank you.. ",
    "tsofist": "I have error:\nMJS error: bad ffi signature: \"int mgos_pwm_set(int, int, int)\": dlsym('mgos_pwm_set') failed\nCan anyone suggest what I'm doing wrong?\nI'm not strong in C =(. ",
    "iliapenev": "@alashkin  Agreement accepted.\n. @alashkin \nhttps://github.com/cesanta/mongoose-iot/blob/master/mongoose/mongoose.c#L9781\nThis generates error when compiling\n\"/src//mongoose-iot/mongoose/mongoose.c\", line 9781: error #69: integer conversion resulted in a change of sign\n. Ubuntu 16.04\nI'm compiling with docker image docker.cesanta.com/cc3200-build:1.2.0-r9\n. Sorry, I missed that. \nResend should be handled by user, as I understand?\n. Sorry for inconvenience. \nClosing issue.\n. Here you can find log from console. \nCould you please help @alashkin @rojer @cpq \nI'm running Nodemcu ESP8266\nhttps://gist.github.com/anonymous/7229317446bc1dd6fdce03561c76f3ad\n. save_cfg works with NULL for error_message on CC3200. \nWith parameter now is fine. \nBut there is\nset_errno               7919 spiffs error: -10002\n```\nmg_conf_parse_cb        5936 Set [sys.wdt_timeout] = [15]\nmg_conf_parse_cb        4927 Set [conf_acl] = [*]\nmg_conf_parse_cb        4417 Set [hello.who] = [world]\nmg_conf_parse_cb        4626 Set [hello.val] = [0]\nload_config_file        4412 === Loading conf_vendor.json\nset_errno               7919 spiffs error: -10002\nsave_cfg               22489 Saved to conf.json\n\nCounter value= 10!\nload_config_file      984945 === Loading conf_defaults.json\nmg_conf_parse_cb        5117 Set [wifi.sta.enable] = [false]\nmg_conf_parse_cb         467 Set [wifi.sta.ssid] = []\n```\nCould you please check other issues. \nWe are trying to migrate CC3200 project to ESP8266\n. Thanks!\nI've missed double ** in save_cfg() params.\n. @rojer \nproblem still stays. \nSee example. Directly cs_md5 is not used. \nhttps://gist.github.com/anonymous/a605d995ab9feee80a2142019a42addf\n. @alashkin \nThanks but fileno is spelled wrong. \n\"fineno(x)\" should be \"fileno\"\nPlease check!. @rojer  @cpq Could you please review and apply fixes. mgos_register_http_endpoint_opt does not work on \"/\". It is still protected. \nCould you please fix it. Thanks!. I've tried with example from Mongoose-os - works fine. \nWith our project does not. I will check again project and if there is still problems will let you know. \nThanks!. Thanks! I will try the fix and will provide feedback. . Seems that problem is gone. Over 3 hours I don't have combined wifi mode. \nThanks. ",
    "ser007": "Hi @cpq,\nI watched the video https://www.youtube.com/watch?v=kThcRN8VF0Q and I was interested in the capabilities you implemented in a esp8266.\nSo I'm thinking that if I start studying I get to understand how the firmware was developed.\nI have a knowledge in javascript and I use visual studio code on windows in my work. I have never developed in C / C ++, I have no knowledge of the language, nor the compiler, the best operating system to compile and not the best.\nSo my question. So what advice can you give me to start this way?\nThanks. Andr\u00e9a\n. I want to learn C / C ++, books you recommend, documentation, and how mongoose-iot works, which operating system to mount on my virtual machine, which compiler and IDE.\n. Hi @cpq!\nExcellent work from you!\nGreat documentation, I started to read.\nThanks for the book, I downloaded it.\nThank you!\n. ",
    "mark-hahn": "I looked on every page I could find in the website.\n\nMongoose is free, open source,\n\nI know.  I was looking for cloud information.  To repeat:\nThe mongoose IOT cloud  ...  Is it free? Is the cloud-building feature a separate service than the IOT data collection and control?. ",
    "kzyapkov": "mongoose-iot is at 5ce6ae36\nI just found the debug_coredump target which maps more stuff, so here's an even prettier one:\n```\nLoaded core dump from last snippet in  /console.log\nbssl_socket_recv (ctx=0x3fff7cfc, buf=0x3fff7e4c \"\", len=5)\n    at /mongoose-iot/mongoose/mongoose.c:14628\n14628     size_t seg_len = (seg->len - cs->rx_offset);\ntadd symbol table from file \"/mongoose-iot/common/platforms/esp8266/rom/rom.elf\" at\n    .text_addr = 0x40000000\nReading symbols from /mongoose-iot/common/platforms/esp8266/rom/rom.elf...(no debugging symbols found)...done.\n (gdb) bt full\n0  ssl_socket_recv (ctx=0x3fff7cfc, buf=0x3fff7e4c \"\", len=5)\nat /mongoose-iot/mongoose/mongoose.c:14628\n    nc = 0x3fff7cfc\n    cs = 0x3fff5e64\n    seg = 0x800\n    __func__ = \"ssl_socket_recv\"\n    seg_len = <optimized out>\n\n1  0x402449c3 in mbedtls_ssl_fetch_input (ssl=ssl@entry=0x3fff7c04,\nnb_want=nb_want@entry=5) at ssl_tls.c:2513\n    ret = <optimized out>\n    len = 5\n    want_buf_size = 13\n\n2  0x40245e70 in mbedtls_ssl_read_record_layer (ssl=ssl@entry=0x3fff7c04)\nat ssl_tls.c:3920\n    ret = <optimized out>\n\n3  0x402466e6 in mbedtls_ssl_read_record (ssl=ssl@entry=0x3fff7c04)\nat ssl_tls.c:3865\n    ret = <optimized out>\n\n4  0x402484d5 in ssl_parse_server_hello (ssl=0x3fff7c04) at ssl_cli.c:1456\n    buf = <optimized out>\n    t = <optimized out>\n    ret = <optimized out>\n    n = <optimized out>\n\n---Type  to continue, or q  to quit---\n        ext_len = \n        comp = \n        i = \n        ext = \n        handshake_failure = 0\n        suite_info = \n5  mbedtls_ssl_handshake_client_step (ssl=ssl@entry=0x3fff7c04)\nat ssl_cli.c:3416\n    ret = <optimized out>\n\n6  0x40244d5c in mbedtls_ssl_handshake_step (ssl=ssl@entry=0x3fff7c04)\nat ssl_tls.c:6470\n    ret = -28800\n\n7  0x40244dc4 in mbedtls_ssl_handshake (ssl=0x3fff7c04) at ssl_tls.c:6494\n    ret = 0\n\n8  0x4021e2be in mg_ssl_if_handshake (nc=nc@entry=0x3fff7cfc)\nat /mongoose-iot/mongoose/mongoose.c:4490\n    ctx = 0x3fff5e84\n    err = <optimized out>\n\n9  0x40225014 in mg_lwip_ssl_do_hs (nc=nc@entry=0x3fff7cfc)\nat /mongoose-iot/mongoose/mongoose.c:14478\n    cs = 0x3fff5e64\n    server_side = <optimized out>\n    res = <optimized out>\n\n---Type  to continue, or q  to quit---\n        func = \"mg_lwip_ssl_do_hs\"\n10 0x402252c8 in mg_ev_mgr_lwip_process_signals (\nmgr=mgr@entry=0x3fff4550 <s_mgr>)\nat /mongoose-iot/mongoose/mongoose.c:14287\n    nc = 0x3fff7cfc\n    cs = 0x3fff5e64\n    md = 0x3fff50dc\n\n11 0x402254f5 in mg_lwip_if_poll (iface=,\ntimeout_ms=<optimized out>) at /mongoose-iot/mongoose/mongoose.c:14353\n    mgr = 0x3fff4550 <s_mgr>\n    n = 0\n    nc = <optimized out>\n    tmp = <optimized out>\n    min_timer = 0\n    num_timers = 0\n\n12 0x4021dca2 in mg_mgr_poll (m=m@entry=0x3fff4550 ,\ntimeout_ms=timeout_ms@entry=0) at /mongoose-iot/mongoose/mongoose.c:2279\n    i = 0\n    now = <optimized out>\n    __func__ = \"mg_mgr_poll\"\n\n13 0x40219d8a in mongoose_poll (ms=ms@entry=0)\nat /mongoose-iot/fw/src/miot_mongoose.c:52\n    ret = <optimized out>\n\n---Type  to continue, or q  to quit---\n        func = \"mongoose_poll\"\n14 0x40226c8b in miot_lwip_task (e=)\nat /mongoose-iot/fw/platforms/esp8266/user/esp_task.c:82\n    timeout_ms = <optimized out>\n    mgr = 0x3fff4550 <s_mgr>\n\n15 0x40000f49 in ets_post ()\nNo symbol table info available.\nUnmapped addr 0x2024f54b\n16 0x2024f54b in ?? ()\nNo symbol table info available.\nUnmapped addr 0x2024f54b\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\n```. Sorry about that -- I forgot that we build from our fork, with a bunch of minor fixes integrated (we had pending issues for most if not all).\nHere it is:\nhttps://github.com/ALLTERCO/mongoose-iot/tree/allterco_fixes\nThere is no clear path for reproducing the issue, it happens sporadically on WiFi reconnect. I'll follow up when it occurs again with the verbose logs.. While trying to reproduce this we stumbled upon a significant number of very weird-looking processor exceptions. Many times heap integrity was broken, frequently a bunch of global variables got overwritten, etc.\nI'm closing this one and will try to report some more concise results.. For us, 99% of the time we find corrupt memory or bad heap integrity immediately after wifi reconnect. May be some of our code causing the trouble.. This wasn't easily reproducible and has not occurred since we deployed the ping-pong fix. Definitely memory exhaustion here, debug log shows malloc() failing.. Nope, what you mention is the SSID string for AP mode of the WiFi interface.\nI am talking about DHCP request option 12 in the DHCP request sent by the device when in STA mode. Many routers use this option to set the hostname of the device in the local resolver.. Sadly, it seems this option is not supported by CC3200, at least with the current NWP firmware:\nhttps://e2e.ti.com/support/wireless_connectivity/simplelink_wifi_cc31xx_cc32xx/f/968/p/420212/1498318#1498318\nhttp://e2e.ti.com/support/wireless_connectivity/simplelink_wifi_cc3000/f/851/p/350167/1229570#1229570\nI have no experience with the other supported platforms.. Bumping this, since it really looks trivial to impelment for ESP8266. All that's needed is for wifi setup code to call wifi_station_set_hostname() before wifi_station_connect(). Alas, it doesn't work if we call it outside of mgos_wifi_setup_sta(). Also, there's the ESP8266-specific device.id config key .... I don't think this ever happened on CC32xx, but works fine for me on espressif chips. Check your local resolver with dig or nslookup, make sure you are using the correct tld.. Setting it through build_vars works, thanks!\nOfftopic, we chose CoAP because it's a standard, and hoped to make it somewhat easier for others to integrate with our devices. It works OK for status broadcasts, device-to-device signalling and basic commands. Why didn't you like it?. We've bumped to the latest revision of mongoose-os -- CC3200 builds fail with:\nerror #10056: symbol \"mg_hash_md5_v\" redefined: first defined in\n   \"/app/devices/dinrelay/.build/mongoose-os.a<mongoose.o>\"; redefined in\n   \"/app/devices/dinrelay/.build/mongoose-os.a<cc3200_crypto.o>\"\nerror #10056: symbol \"mg_hash_sha1_v\" redefined: first defined in\n   \"/app/devices/dinrelay/.build/mongoose-os.a<mongoose.o>\"; redefined in\n   \"/app/devices/dinrelay/.build/mongoose-os.a<cc3200_crypto.o>\"\nerror #10010: errors encountered during linking;\n   \"/app/devices/dinrelay/.build/dinrelay4.elf\" not built\nLooks like this happened along with the HTTP Auth refactoring.... We do require finer grained control -- some resources should be publicly available. Maybe make this controllable when registering the endpoint? A global auth setting doesn't really work for us.. Also, curiously, all resources except for POST /update require a password. Although digest auth is globally enabled, one can still do a curl -F file=@... http://mongoose-device/update and perform a firmware upgrade. Yes, and it normally works fine. . @cpq @rojer are you able to reproduce this on your end?. Thanks!\nQuick question: is there a way to attach a debugger to this target, or look at core dumps like on the ESP8266?. This kind of works, but in some situations MG_EV_CLOSE is received immediately after connect, and we fall into a tight loop.. So, it seems the new flash layout doesn't allow for OTA update on 1MB flash chips:\n```\n\n1MB (8Mb) layout:\n\n0x000000 - rBoot        |\n0x007000 - boot cfg     |\n0x008000 - app (844K)   |\n0xdb0000 - fs (128K)    |\n0x0fb000 - rf cal       |\n0x0fc000 - sys params   |\n```\nIs there no way to use smaller slots for FS and application?. This is correct. The default http handler can be useful in other scenarios as well.. Yep, that'd be nice. +1\nWe tried this as well, but there were too many quirks and roadblocks.. We're using mgos_net_ip_to_str() from mgos_net.c which sets len=16.\nWorst case contains 4 octets times 3 digits each plus 3 dots = 15, so len=16 includes the null byte.. Hey guys, this is still reproducible. Hey @rojer, @cpq, did this just happen again?. I think this is about the MAC address of the client, and this is at least also valid on esp8266.\nDuplicate of https://github.com/mongoose-os-libs/wifi/issues/5. ",
    "MobiusHorizons": "Great, I'll test it.\nFor the time being I am testing out mongoose-os as a possible base for some of the projects i had been working on, since it works on the boards i was using, and has better mqtt (with ssl) support than other platforms out of the box. \nIt looks very promising.. verified and confirmed.. The board is set up using the mgos aws-iot-setup process, and is connectiong to xxxxxxxxxxxxxx.iot.us-east-1.amazonaws.com:8883 where xxxxxxx is the url created for me by aws.\n. That was the problem. Is there any chance that an error message could be shown such as connection refused. ok, that makes sense. Thanks for your help.. I am fine with closing this issue, should I go ahead and do that?. is the source for the mgos tool somewhere public? if so, I could take a look for the error myself.. Yes, I built the c_hello project for arch stm32, and I was trying to flash to the serial bootloader.. I had this problem on the esp8266 sometimes. In my case, I was able to\nresolve it by restarting the device shortly before running the first\nconfig-set, after which the other commands seemed to work.\nOn Thu, Jan 12, 2017, 3:29 AM blankcheck101010 notifications@github.com\nwrote:\n\nI am following the quickstart guide on the main page, and would eventually\nlike to get c_mqtt working with AWS IOT. When running the code below\nmgos config-set wifi.ap.enable=false wifi.sta.enable=true\nwifi.sta.ssid=WIFI_NETWORK_NAME wifi.sta.pass=WIFI_PASSWORD\nthe device gets hung at\nGetting configuration...\nSetting new configuration...\n^C\nI eventually have to ^c out of it, and when I do, I try running mgos\nconfig-get and see no changes.\nSame thing happens with mgos aws-iot-setup --aws-iot-policy myPolicy\nWrote private key to aws-iot-8c76c158f7.key.pem\nWrote certificate to aws-iot-8c76c158f7.crt.pem\nAttaching policy \"myPolicy\" to the certificate...\nUploading certificate...\nThen it freezes right there. Any idea why this is happening?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/cesanta/mongoose-os/issues/181, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACj2jLRp5V6CVFa_rZAymdvd162_TEIfks5rReRigaJpZM4Lhe3o\n.\n. I have had it working for both esp32 (Adafruit devkit) and esp8266(nodemcu)\nwith mgos\n\nOn Thu, Jan 12, 2017, 9:45 AM blankcheck101010 notifications@github.com\nwrote:\n\nThanks for the feedback. At least I know I'm not the only one. I've tried\non the esp8266 and esp32. I've tried your combination, and it gets a little\nfarther...\nGetting configuration...\nSetting new configuration...\nSaving and rebooting...\nbut still hangs... weird. Have you got this working with the new mgos?\nI've only seen this work with miot\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/cesanta/mongoose-os/issues/181#issuecomment-272180874,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACj2jBFxbjb-7EJdpeZ9ymPBVPY92SMdks5rRjx3gaJpZM4Lhe3o\n.\n. Glad you were able to get it working\n\nOn Thu, Jan 12, 2017, 12:54 PM blankcheck101010 notifications@github.com\nwrote:\n\nJust tested the c_mqtt example and the aws-iot-setup command also\ncompleted. Looks like they fixed this issue on the most recent version.\nSauls-MacBook-Pro:c_mqtt Saul$ mgos --version\nThe Mongoose OS command line tool\nVersion: 2017011212\nBuild ID: 20170112-121055/lsm@38aa3e1\nhttps://github.com/20170112-121055/lsm/commit/38aa3e1e+\nSauls-MacBook-Pro:c_mqtt Saul$\nThanks for chiming in MobiusHorizons and for the people in the background\nwho updated the software ;)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/cesanta/mongoose-os/issues/181#issuecomment-272233672,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACj2jKK449AU2Wv65mfjCWkElkjb_qaOks5rRmi_gaJpZM4Lhe3o\n.\n. @aifer2007 you may wish to not use websockets, since they are just an expensive version of normal sockets built on top of http to allow web browsers to do two way communication. They exist for security purposes because if browsers could do arbitrary normal socket connections from javascript, they could hack a private network when a user just opens a page. To get the other benefits of Socket.io, you may wish to look into the third bullet point of http://socket.io/blog/introducing-socket-io-1-0/#new-engine, which would allow for Socket.io over normal TCP sockets. \n\nThat said, there are websockets libraries that are small enough to run on embedded boards, but it is an unnecessary overhead.. escaped quotes might help\"{\\\"filename\\\":\\\"test\\\"}\". You can always tell what's actually getting to the program by testing with echo. However on OSX echo '{\"filename\":\"test\"}' returns {\"filename\":\"test\"} as expected, but it's worth a shot anyway.. (honest question) Is that better than federating from the local MQTT broker to the cloud broker?. fair enough.. ",
    "gicho": "Yep, all good. Thank you.. ",
    "blankcheck101010": "Thanks for the feedback. At least I know I'm not the only one. I've tried on the esp8266 and esp32. I've tried your combination, and it gets a little farther...\nGetting configuration...\nSetting new configuration...\nSaving and rebooting...\nbut still hangs... weird. Have you got this working with the new mgos? I've only seen this work with miot. noticed a new software version this morning... just updated and so far the config-set command completed. Just tested the c_mqtt example and the aws-iot-setup command also completed. Looks like they fixed this issue on the most recent version.\nSauls-MacBook-Pro:c_mqtt Saul$ mgos --version\nThe Mongoose OS command line tool\nVersion: 2017011212\nBuild ID: 20170112-121055/lsm@38aa3e1e+\nSauls-MacBook-Pro:c_mqtt Saul$\nThanks for chiming in MobiusHorizons and for the people in the background who updated the software ;). ",
    "aifer2007": "When I use \"--arch esp8266\", I get errors as:\n$ mgos init --arch esp8266\nConnecting to http://mongoose.cloud, user  ...\nDownloading project skeleton...\nUnpacking...\nSetting arch \"esp8266\"...\n$ mgos build\nConnecting to http://mongoose.cloud, user test\nUploading sources (1631 bytes)\nSuccess, built mgos32/esp8266 version 1.0 (20170116-123115/???).\nFirmware saved to build/fw.zip\n$ mgos flash\nLoaded mgos32/esp8266 version 1.0 (20170116-123115/???)\nOpening /dev/tty.SLAB_USBtoUART...\nConnecting to ESP8266 ROM, attempt 1 of 10...\n  Connected\nRunning flasher @ 460800...\nError: failed to run flasher: failed to run flasher stub: failed to write params: failed to start mem write: command 5 failure: error code 0\n$ mgos flash\nLoaded mgos32/esp8266 version 1.0 (20170116-123115/???)\nOpening /dev/tty.SLAB_USBtoUART...\nConnecting to ESP8266 ROM, attempt 1 of 10...\n  Connected\nRunning flasher @ 460800...\nError: failed to run flasher: failed to run flasher stub: failed to write params: failed to start mem write: command 5 failure: error code 0. Thank you. It works well.. Thks!\nBut how can I connect a mos device to a server running socket.io protocol?\n\n\u5728 2017\u5e742\u67087\u65e5\uff0c\u4e0b\u53483:02\uff0cSergey Lyubka notifications@github.com \u5199\u9053\uff1a\nClosed #185 https://github.com/cesanta/mongoose-os/issues/185.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/cesanta/mongoose-os/issues/185#event-951577670, or mute the thread https://github.com/notifications/unsubscribe-auth/AG9XGsi8Aq9WexUTDwhsrH6JATBsNJ1Dks5raBbtgaJpZM4L5G41.\n\n\n. I make my own uart js api  for ESP32.\napi_uart.js:\nlet Serial = {\n  //\n  setStdout: ffi('int mgos_set_stdout_uart(int)'),\n  setDebug: ffi('int mgos_init_debug_uart(int)'),\n  write: ffi('int mgos_uart_write(int, char *, int)'),\n  enableWrite: ffi('void mgos_uart_set_write_enabled(int, bool)'),\n  isInited: ffi('int mgos_uart_is_inited(int)'),\n};\nin mos.yml: \nffi_symbols:\n  - mgos_uart_write\n  - mgos_init_debug_uart\n  - mgos_uart_init\n  - mgos_uart_is_inited\nand then, in init.js:\n// Load Mongoose OS API\nload('api_timer.js');\nload('api_gpio.js');\nload('api_uart.js');\nlet uartNo = 1;\nSerial.setDebug(uartNo); // baut: 115200\nlet str = \"Hello from ESP32-Serial: \" + JSON.stringify(uartNo) + \"\\r\\n\";\nlet isInited = Serial.isInited(uartNo);\n// Blink built-in LED every second\nlet PIN = ffi('int get_led_gpio_pin()')();  // Helper C function that returns a\n                                            // built-in LED GPIO\nGPIO.set_mode(PIN, GPIO.MODE_OUTPUT);\nTimer.set(1000 / milliseconds /, 1 / repeat /, function(pin) {\n  let value = GPIO.toggle(pin);\n  print(value ? 'Tick' : 'Tock');\n  print(isInited);\n  print(Serial.write(uartNo, str, str.length));\n}, PIN);\nIt works well. \nI can receive the string on my notebook with a UART-USB converter(FT232)\u3002\n\n. on ESP32, the UART2 is not available yet. \nAnd the pins of a UART can't be assigned by programmer.. That's great!. Great\uff01\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2017\u5e744\u670810\u65e5\uff0c\u4e0a\u534812:27\uff0cSergey Lyubka notifications@github.com \u5199\u9053\uff1a\nDone.\nhttps://mongoose-os.com/docs/#/js-api/api_uart.js/\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I have wrote some codes to call cpp class method / cpp function from mos/mjs by ffi.\nWork well. \nhttps://github.com/aifer2007/mos-mjs-cpp. Thanks.\nYes, I have post a repo about calling cpp function by FFI.\n\u5728 2017\u5e742\u670825\u65e5\uff0c\u4e0b\u534810:10\uff0cSergey Lyubka notifications@github.com \u5199\u9053\uff1a\nYour CPP functions that you want to export should be wrapped into\nextern \"C\" {\n...\n}\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/cesanta/mongoose-os/issues/194#issuecomment-282486250, or mute the thread https://github.com/notifications/unsubscribe-auth/AG9XGsfJHi2fXXhOHAaBoQJrPrBU5bOUks5rgDZOgaJpZM4MFqz3.\n\n\n. ",
    "q2dg": "No. It was just a desire. But if you say 32k RAM isn't enough, needless to say more. \nFeel free to close this issue, therefore.\nThanks!!. ",
    "ceco": "We will test with the latest changes and confirm.. This one is not relevant now.\nThanks.. Here is a traceback that describes the crash:\n```\nReading symbols from /app.elf...done.\nRemote debugging using 127.0.0.1:1234\nFound core at 1857 - 179145\nMapping DRAM: 98304 @ 0x3ffe8000\nMapping IRAM: 32768 @ 0x40100000\nMapping IROM: 483328 @ 0x40208000\nMapping /mongoose-os/common/platforms/esp8266/rom/rom.bin at 0x40000000\nLoaded core dump from last snippet in  /console.log\nUnmapped addr 0x8000\n0x00008000 in ?? ()\nadd symbol table from file \"/mongoose-os/common/platforms/esp8266/rom/rom.elf\" at\n        .text_addr = 0x40000000\nReading symbols from /mongoose-os/common/platforms/esp8266/rom/rom.elf...(no debugging symbols found)...done.\nUnmapped addr 0x8000\n(gdb) bt\n0  0x00008000 in ?? ()\n1  0x40270ab4 in mg_send (nc=0x3ffef6cc, buf=buf@entry=0x3ffee489 , len=len@entry=48) at mongoose/src/net.c:511\n2  0x4027d762 in send_timer (arg=) at src/main.c:37\n3  0x40273cd4 in mgos_timer_ev (nc=, ev=, ev_data=, user_data=0x3ffefeac) at /mongoose-os/fw/src/mgos_timers_mongoose.c:75\n4  0x4026b2e0 in mg_call (nc=nc@entry=0x3ffefebc, ev_handler=0x40273c24 , ev_handler@entry=0x0, user_data=0x3ffefeac, ev=ev@entry=6, ev_data=ev_data@entry=0x3fffff10) at mongoose/src/net.c:91\n5  0x4026e305 in mg_if_timer (c=c@entry=0x3ffefebc, now=) at mongoose/src/net.c:115\n6  0x4026eb50 in mg_lwip_if_poll (iface=, timeout_ms=) at common/platforms/lwip/mg_lwip_ev_mgr.c:137\n7  0x4026f862 in mg_mgr_poll (m=m@entry=0x3ffef05c , timeout_ms=timeout_ms@entry=0) at mongoose/src/net.c:285\n8  0x40275cba in mongoose_poll (ms=ms@entry=0) at /mongoose-os/fw/src/mgos_mongoose.c:55\n9  0x40275d3c in mongoose_poll_cb (arg=) at /mongoose-os/fw/platforms/esp8266/src/esp_main.c:78\n10 0x4027349f in mgos_lwip_task (e=) at /mongoose-os/fw/platforms/esp8266/src/esp_main.c:228\n11 0x40000f49 in ets_post ()\n```. Actually we made this modification: https://gist.github.com/kzyapkov/48f5cbb77362658ade981bb7becbba16\nwhich fixes the crash.\nswitch (ev) {\n        case MG_EV_CLOSE: {\n            LOG(LL_INFO, (\"%p Connection closed\", nc));\n            if (nc == sntp_nc) {\n                sntp_nc = sntp_connect();\n            }\n            break;\n        }\n        case MG_EV_RECV: {\n            LOG(LL_INFO, (\"%d bytes\", nc->recv_mbuf.len));\n            mbuf_remove(&nc->recv_mbuf, nc->recv_mbuf.len);\n        }\n}\nCould you confirm that this is correct use case ?\n. ",
    "hrshtmims": "@kzyapkov Hostname is set, but I am unable to connect via hostname. Hostname is reflecting in Router's clientlist.. ",
    "sh4nnongoh": "Ok it is supported, got it working using the cmdline.\nNote that the UI Wifi setup does not work.\nThanks.. Hi reopening this.\nYes I am using windows.\nThe Mos UI flashing process fails when performing it in the Web UI.\nThe commandline works for Adafruit Feather Huzzah but fails for Sparkfun ESP32 Thing.\n\n. Hi, refer to the images below.\nI am using mos build 20170922-103145/master@e973ef66+ on Windows.\nSparkFun ESP32 Flash Fail through UI\n\nSparkFun ESP32 Flash Fail through CLI\n\nAdafruit Huzzah Flash Fail through UI\n\nAdafrauit Huzzah Flash Pass through CLI (After multiple attempts)\n\n. Same issue here. ",
    "dgdosen": "Any update to this? Can we load mongoose on an ESP32 Thing?. ",
    "mike-rogers": "@dgdosen - i have been able to load mongoose os firmware on an ESP32 thing without issue. i'm using the ESP32 to drive an AWS IoT-enabled gong, much to the delight of my coworkers.\n@cpq - i just now updated mos and while mos flash works with the ESP8266-based Feather Huzzah I am unable to use the mos wifi command successfully:\nUsing port /dev/cu.SLAB_USBtoUART\nGetting configuration...\nError: write /dev/cu.SLAB_USBtoUART: file already closed\nthe output of mos --version:\nThe Mongoose OS command line tool\nVersion: 1.26\nBuild ID: 20180208-184624/1.26@ab7f50e1+\nUpdate channel: release\nthis is all on mac. if you'd like any more information please let me know. :+1:. ~It was consistent, but in trying to get you mos console output I may have fried my only ESP8266. \u2639\ufe0f~ i was using a broken USB cable.\nthe output of mos console is:\n$ mos console\nUsing port /dev/cu.SLAB_USBtoUART\n ... and then nothing until i trigger some event on the board. mos wifi $SID $PASSWORD still errors out with:\n$ mos wifi $SID $PASSWORD\nUsing port /dev/cu.SLAB_USBtoUART\nGetting configuration...\nError: write /dev/cu.SLAB_USBtoUART: file already closed. According to the source a 201 indicates the AP can't be found. Does that help?. I ran into this too. To be clear, the solution is to modify your mos.yaml. Look for the section that begins:\nyaml\nlibs:\n  - origin: https://github.com/mongoose-os-libs/ca-bundle\n  - origin: https://github.com/mongoose-os-libs/http-server\n  - origin: https://github.com/mongoose-os-libs/ota-http-server\n  - origin: https://github.com/mongoose-os-libs/rpc-loopback\n  - origin: https://github.com/mongoose-os-libs/rpc-mqtt\n  # other libs...\nand add the following line:\nyaml\n  - origin: https://github.com/mongoose-os-libs/aws\nThen (per @Burt-Silverman) remember to mos build and mos flash.. ",
    "rohit2787": "@cpq I am getting a similar error. I am trying to use mos to flash esp32. And I have successfully used both command line and webUI with ESP32 successfully for the past several months. But now i experience an error where when I open the webUI, and select the connection, the flashed code does not load. The webUI gets frozen and I have to close it. I can see the output of my code on mos console. But not the webUI. Also, I noticed that when I load an older code - which used to work, the web UI starts working. But my current code does not. Is there an issue with using for loop in JS?. ",
    "Hedda": "Yes Google is trying to catch up with Amazon, with Google's \u201cConversation Actions\" (a.k.a. 'Assistant Actions') being the same as Amazon's \"Alexa Skills\", and \"API.ai\" being the same as \"Amazon AWS IoT\" services. So I really anything that applies to Amazon AWS IoT could be setup for https://api.ai to enable Google Actions.\nI guess practical example could be for Mongoose to have its own service on API.ai and build actions for common IoT tasks such as 'Turn ON Lights', 'Turn OFF Lights', 'Dim Lights', and 'Turn Up Lights', which would then allow users to use their Google Home speakers (and Google Assistant on smart phones/tablets) to control their home automation controlled by connected ESP8266/ESP32 to power relays.\nhttps://api.ai/blog/2016/12/08/build-conversation-actions-for-the-google-assistant/\nNo sorry I have no personally work on any related project.. Checkout https://docs.api.ai/docs/actions-on-google-integration and\nyou can test with Alexa as https://docs.api.ai/docs/alexa-integration. ",
    "Uriziel01": "I figured it out that JSON strings are corrupted only in Windows default command line.\nIf You use another terminal like cygwin it works just fine.\nIt should easly resolved in mos.exe by parameters sanitization.. ",
    "deanmaniatis": "Thank you, commit fix reference?. Hi,\nI follow these exact steps, only i was testing with the browser. Indeed, curl shows the right file but still browser shows the old one (Firefox). I guess it is caching it although if i edit the file in mos UI and click the button that saves and restarts the board the page in the second tab get the updated value.\nMy change was to simply append the number 1 e.g. Welcome to Mongoose OS1\". Any subsequent change to a different number wasn't visible in the browser but that's definitely browser related caching issue. . @cpq Ismos flash` also not available with remote protocol?\n```zebook \u798f ~/dev/mos/sample \n4170 \u25ef : mos call RPC.Hello                                                                                                                                                   \n{\n  \"time\": 68591\n}\n4167 \u25ef : mos flash                                                                                                                                                            \nLoaded sample/esp8266 version 1.0 (20170227-100111/???)\nOpening ws://192.168.2.31/rpc...\nError: failed to open control port: open ws://192.168.2.31/rpc: no such file or directory\n```. @cpq In which way does \"flashing\" differ with pushing new updated firmware using the curl command?. This is my board, designed by eboxmaker. The builtin LED is connected to PIN 2. \n\n. @cpq Is it worth implementing profiles for different boards ?. Same behaviour observed with latest MacOSX and two boards, Wemos D1 R2 and a generic ESP32 dev. board. For me it's noticeable when i perform wifi changes.. ",
    "fx": "@alashkin is this in 2.0+4ed5853~xenial0? Seems to ignore the dhcp nameserver still.. ",
    "pedroherig": "Sorry for not posting a more complete log for the first time, I didn't know about it.\nNow I have been able to flash it, but I am stuck at the Wifi configuration section. My ESP32 looks unstable, sometimes it can flash sometimes it cannot. And at the wifi configuration it outputs the following log:\nC:\\MOS>mos wifi XXXX XXXX -v 4 --logtostderr\nUsing port COM4\nI0308 11:23:11.259252    9600 util.go:17] Using port COM4\nI0308 11:23:11.285269    9600 mgrpc.go:172] Connecting to COM4 over tSerial\nI0308 11:23:11.289273    9600 serial.go:48] Opening COM4...\nI0308 11:23:11.305309    9600 serial.go:58] COM4 opened: &{0x13606e00 752 {0 0} {0 0} 0x136f71e0 0x136f7200}, err: \nGetting configuration...\nI0308 11:23:11.305812    9600 mgrpc.go:229] Started recv loop, codec: [streamConnectionCodec to COM4]\nI0308 11:23:11.306315    9600 util.go:17] Getting configuration...\nI0308 11:23:11.311816    9600 mgrpc.go:283] created a request with id 1241379568978\nI0308 11:23:11.312817    9600 serial.go:131]  ...sent frame delimiter.\nI0308 11:23:11.509308    9600 stream.go:201] 0 bytes read, err %!q(), eof? false buffer: []\nI0308 11:23:11.515808    9600 serial.go:131]  ...sent frame delimiter.\nI0308 11:23:11.709322    9600 stream.go:201] 0 bytes read, err %!q(), eof? false buffer: []\nI0308 11:23:11.716833    9600 serial.go:131]  ...sent frame delimiter.\n(This 2 lines repeat a few dozens between 11:23:11 and 11:23:18, but I removed it to shrink the log at this post)\nI0308 11:23:18.517822    9600 stream.go:201] 0 bytes read, err %!q(), eof? false buffer: []\nI0308 11:23:18.540413    9600 serial.go:131]  ...sent frame delimiter.\nI0308 11:23:18.717989    9600 stream.go:201] 0 bytes read, err %!q(), eof? false buffer: []\nI0308 11:23:18.740596    9600 serial.go:155] closing serial COM4\nI0308 11:23:18.918180    9600 stream.go:201] 0 bytes read, err %!q(), eof? false buffer: []\nI0308 11:23:19.023467    9600 main.go:192] Error: Device handshake timeout\n/Users/lsm/src/cesanta.com/common/go/mgrpc/codec/serial.go:136: Device handshake timeout\n/Users/lsm/src/cesanta.com/common/go/mgrpc/codec/stream.go:233:\n/Users/lsm/src/cesanta.com/common/go/mgrpc/mgrpc.go:287:\n/Users/lsm/src/cesanta.com/fw/defs/config/config_service.go:68:\n/Users/lsm/src/cesanta.com/mos/dev/dev_conn.go:68:\n/Users/lsm/src/cesanta.com/mos/config.go:77:\n/Users/lsm/src/cesanta.com/mos/main.go:111:\nError: Device handshake timeout. I turned the chip off and then turned it on again to try to reflash it and the previous error occurred again, the logs are below:\nC:\\MOS>mos flash -v 4 --logtostderr\nLoaded MOS/esp32 version 1.0 (20170307-164714/???)\nUsing port COM4\nI0308 11:34:52.666666    9672 util.go:17] Using port COM4\nOpening COM4...\nI0308 11:34:52.696687    9672 report.go:13] Opening COM4...\nConnecting to ESP32 ROM, attempt 1 of 10...\nI0308 11:34:52.708699    9672 report.go:13] Connecting to ESP32 ROM, attempt 1 of 10...\nI0308 11:34:53.159824    9672 rom_client.go:104] => {cmd:Sync(8) csum:0 arg(36):\"0707122055555555555555555555555555555555555555555555555555555555...\"}\nI0308 11:34:53.159824    9672 slip.go:87] => (44) 0008240000000000070712205555555555555555555555555555555555555555555555555555555555555555\nI0308 11:34:53.163833    9672 rom_client.go:104] => {cmd:Sync(8) csum:0 arg(36):\"0707122055555555555555555555555555555555555555555555555555555555...\"}\nI0308 11:34:53.164834    9672 slip.go:87] => (44) 0008240000000000070712205555555555555555555555555555555555555555555555555555555555555555\nI0308 11:34:53.200858    9672 slip.go:43] <= (12) 010804000707122000000000\nI0308 11:34:53.200858    9672 rom_client.go:148] <= {cmd:Sync(8) value:538052359 ok:true lastError:0 body(4):\"00000000\"}\nI0308 11:34:53.205860    9672 slip.go:43] <= (12) 010804000707122000000000\nI0308 11:34:53.206864    9672 rom_client.go:148] <= {cmd:Sync(8) value:538052359 ok:true lastError:0 body(4):\"00000000\"}\nI0308 11:34:53.210863    9672 slip.go:43] <= (12) 010804000707122000000000\nI0308 11:34:53.211865    9672 rom_client.go:148] <= {cmd:Sync(8) value:538052359 ok:true lastError:0 body(4):\"00000000\"}\nI0308 11:34:53.211865    9672 slip.go:43] <= (12) 010804000707122000000000\nI0308 11:34:53.212864    9672 rom_client.go:148] <= {cmd:Sync(8) value:538052359 ok:true lastError:0 body(4):\"00000000\"}\nI0308 11:34:53.213864    9672 slip.go:43] <= (12) 010804000707122000000000\nI0308 11:34:53.213864    9672 rom_client.go:148] <= {cmd:Sync(8) value:538052359 ok:true lastError:0 body(4):\"00000000\"}\nI0308 11:34:53.214865    9672 slip.go:43] <= (12) 010804000707122000000000\nI0308 11:34:53.218868    9672 rom_client.go:148] <= {cmd:Sync(8) value:538052359 ok:true lastError:0 body(4):\"00000000\"}\nI0308 11:34:53.220870    9672 slip.go:43] <= (12) 010804000707122000000000\nI0308 11:34:53.221869    9672 rom_client.go:148] <= {cmd:Sync(8) value:538052359 ok:true lastError:0 body(4):\"00000000\"}\nI0308 11:34:53.222870    9672 slip.go:43] <= (12) 010804000707122000000000\nI0308 11:34:53.224873    9672 rom_client.go:148] <= {cmd:Sync(8) value:538052359 ok:true lastError:0 body(4):\"00000000\"}\n  Connected\nI0308 11:34:53.225871    9672 report.go:13]   Connected\nRunning flasher @ 460800...\nI0308 11:34:53.229878    9672 report.go:13] Running flasher @ 460800...\nI0308 11:34:53.230876    9672 rom_client.go:303] RunStub: params: 1 @ 0x40090000; code: 1956 @ 0x40090004, entry @ 400905a8; data: 32 @ 0x3ffd800c\nI0308 11:34:53.232877    9672 rom_client.go:229] memWrite(0x40090000, 4, 0x00000000)\nI0308 11:34:53.233878    9672 rom_client.go:104] => {cmd:MemWriteStart(5) csum:0 arg(16):\"04000000010000000010000000000940\"}\nI0308 11:34:53.234879    9672 slip.go:87] => (24) 000510000000000004000000010000000010000000000940\nI0308 11:34:53.234879    9672 slip.go:43] <= (12) 010804000707122000000000\nI0308 11:34:53.235879    9672 rom_client.go:148] <= {cmd:Sync(8) value:538052359 ok:true lastError:0 body(4):\"00000000\"}\nI0308 11:34:53.349504    9672 main.go:192] Error: failed to run flasher: failed to run flasher stub: failed to write params: failed to start mem write: command mismatch: 8 vs 5\n/Users/lsm/src/cesanta.com/mos/flash/esp/rom_client.go:166: command mismatch: 8 vs 5\n/Users/lsm/src/cesanta.com/mos/flash/esp/rom_client.go:237: failed to start mem write\n/Users/lsm/src/cesanta.com/mos/flash/esp/rom_client.go:311: failed to write params\n/Users/lsm/src/cesanta.com/mos/flash/esp/flasher_client.go:86: failed to run flasher stub\n/Users/lsm/src/cesanta.com/mos/flash/esp/flasher_client.go:67:\n/Users/lsm/src/cesanta.com/mos/flash/esp/flasher.go:120: failed to run flasher\n/Users/lsm/src/cesanta.com/mos/flash.go:130:\n/Users/lsm/src/cesanta.com/mos/main.go:111:\nError: failed to run flasher: failed to run flasher stub: failed to write params: failed to start mem write: command mismatch: 8 vs 5. Just adding new info: I also tried it in a new computer, in a Linux VM and using the ESP32 dev board and I still have the same issue.. I am using an ESP_Module_Testboard and a PCB that my team developed.. Yes, it works with the esptool.. Thank you for making the change.\nWe have identified the error in the flash process. It was a hardware issue that has already been corrected.\nI am going to test connection and let you know about the results.. Sorry for not answering before. We identified an issue in our PCB project and we had to correct it before moving forward. \nThe change solved our issue. Thank you very much.. I am using this SiP:\nhttps://www.seeedstudio.com/ESP-32S-Wifi-Bluetooth-Combo-Module-p-2706.html?gclid=Cj0KEQjw5YfHBRDzjNnioYq3_swBEiQArj4pdIRtX5bEtmClsdWZPfb6SVsYvf_bNxtVVuGKuDe8iGgaAihw8P8HAQ\nIn this board:\nhttps://electronics.semaf.at/ESP32s-ESP-WROOM-32-Adapter-to-254mm. I also tried to test this board with mongoose in another network and it connects. But it cannot connect to this specific network. Yes, including an ESP8266 running Mongoose OS. ",
    "applecrusher": "I would like to put this idea out there.\nIt would be nice if after mongoose is installed the first time, we could use the bluetooth to (easily) change wifi information, so if the esp32 is encased or sealed, it's not a hassle to change this. This is what I would like to do with the bluetooth and I am sure I am not alone.   . Thank you!\nSo are you saying it is as easy adding the following below:\n``\nlet ESP8266 = {\n  ...\n  // ## **setOutputPower(uint8_t val)`**\n  // Power output is a number between 0 and 82\n  // Return value:  does not return.\n  setOutputPower: ffi('void system_phy_set_max_tpw(uint8_t)')\n};\n```\nOr am I missing something more, like having to import some c code?. Not yet. But I will have some time tonight and will let you know. . I put it in my project init.js directly, not in the ESP8266 js file. Please let me know if that makes a difference.\nI wrote the following:\nlet setOutputPower = ffi('void system_phy_set_max_tpw(int)');\nsetOutputPower(20);\nThe error I got:\nMJS error: bad ffi signature: \"void system_phy_set_max_tpw(int)\": dlsym('system_phy_set_max_tpw') failed. After some debugging, I realized it had to do with having an array of numbers in the message sending. Now it is behaving and giving me proper messages. . I am trying to implement MQTT on the AT&T IOT platform, which doesn't end with the device id. \nThey use: \nmqtt://YOUR-API-KEY@api-m2x.att.com\nor \nmqtts://YOUR-API-KEY@api-m2x.att.com\nhttps://m2x.att.com/developer/documentation/v2/mqtt\n. Ok. I got confused and thought the MQTT device address should have been the same as the MQTT server endpoint. \n. I am closing until I can give more details on the issue. . ",
    "fonix232": "Oh sorry.\nHost OS is Windows 10, device is a LoLin v3 NodeMCU.. ",
    "KooT": "I have the same problem with the same setup Win10 64, LoLin 3. \nI am adding my MQTT server during instalation, but then i see in logs:\nmqtt_global_connect  MQTT connecting to test.mosquitto.org:1883\nWhen I am changing MQTT server in configuration, old values is in logs (i clicked save configuration button, and reboot):\n\n. ",
    "asmundstavdahl": "Same issue here with NodeMCU v3 and Ubuntu 16.04 as host OS.\nI noticed that, when I clicked \"Save configuration\" in the web UI, the message \"Configuration saved\" appears twice.. ",
    "apassemard": "Hey this bug did happen to me yesterday so not sure if the fix has been incorporated in the latest MongooseOS yet. I'm on a Mac and was trying a NodeMCU board. My issue was that the MQTT settings were not save and reverted to hiveMQ broker every time. The workaround was to set the MQTT via command line instead of the Web UI and that worked.. ",
    "muhlpachr": "Yes if you would like to \"survive\" with cloud broker updates/feeds in case of local broker failure and you do not care that same traffic gets transferred twice on local network.. How local MQTT broker can do anything in case it dies (e.g. hw failure) ?. Why one would like to detect failure at client side if amount of traffic is not problem ?\nWhy client can not afford to establish more simultaneous connections to MQTT brokers ?\nWhy not HTTP or WebSocket ? Because there is not Pub/Sub abstraction. MQTT PUBLISH is not dependent on MQTT broker (address of MQTT broker is not used) and same for SUBSCRIBE.\nMQTT has shadow service client and whole shadow abstraction does not have any issues with multiple parallel MQTT broker connections. \nAuthentication data is just per MQTT broker configuration as it is now.. AWS GreenGrass is for moving Lambda functions to on-premise compute resources (or to manage on-premise computer resources same way as Lambda functions).  Do you expect to implement availability cluster MQTT broker in Lambda functions ?. ",
    "nvl1109": "Thank you for the info. I just think the nRF devices are very interest and useful in IoT projects (actually I'm studying & make some hobby development with nRF on Zephyr RTOS), so it is very nice if mongoose-os supports nRF devices.. I tried to run docker with mongoose-os mount, it seems ok.\n$ docker run -v /D/Works/esp32/code/mongoose-os:/mongoose-os -ti docker.cesanta.com/esp32-build:1.0-r13\ntime=\"2017-04-12T16:49:50+07:00\" level=info msg=\"Unable to use system certificate pool: crypto/x509: system root pool is not available on Windows\"\nroot@991b2a4da0e6:/# ls /mongoose-os/\nLICENSE  README.md  common  docs  frozen  fw  mongoose  mos  third_party  tools  vendor. I guest the mos was translated the repo path from \"/D/Works/esp32/code/mongoose-os\" to \"D:\\Works\\esp32\\code\\mongoose-os\" in windows style, then mount docker volume with argument \"-v D:\\Works\\esp32\\code\\mongoose-os:/mongoose-os\". This could cause invalid volume spec \":/mongoose-os\" failure as above.\nAny idea? Thanks.. ",
    "Aterocana": "Forgot to say I'm on Arch Linux.\n\nuname -a\nLinux 4.10.2-1-ARCH #1 SMP PREEMPT Mon Mar 13 17:13:41 CET 2017 x86_64 GNU/Linux\n. It seems the problem is when mos is trying to download anything automatically: https://mongoose-os.com/downloads/mos-esp8266.zip fails as well.\nI'm able to flash the firmware if I download it manually with wget and then flash the file.\nStill I'd like to solve the \"download\" problem.. UPDATE: basically, as I thought, the issue is related with fetching remote resources. I tried it in a Kali Linux (Debian based) virtual machine and it worked. The issue must be with Archlinux distributions. Any idea on how make it work there?. sure:\ncurl -v -i https://mongoose-os.com/downloads/mos-esp8266.zip > log.txt 2> errors.txt\n\n(attached both logs)\nlog.txt\nerrors.txt\n. mos flash esp8266 --v 4 --logtostderr 2> logerr.txt\nlogerr.txt\n. Vanilla archlinux https://www.archlinux.org/\n```\n\nuname -a\nLinux 4.10.8-1-ARCH #1 SMP PREEMPT Fri Mar 31 16:50:19 CEST 2017 x86_64 GNU/Linux\n```\nDo you need anything else? Thanks for the help.. \n",
    "francescou": "same issue on arch linux version 4.11.3-1-ARCH\nhere is the output of strace mos update:\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib32/libdl.so.2\", O_RDONLY|O_CLOEXEC) = 3\nread(3, \"\\177ELF\\1\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\3\\0\\1\\0\\0\\0p\\n\\0\\0004\\0\\0\\0\"..., 512) = 512\nfstat64(3, {st_mode=S_IFREG|0755, st_size=13696, ...}) = 0\nmmap2(NULL, 16448, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xc4f00000\nmmap2(0xc4f03000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0xc4f03000\nclose(3)                                = 0\nmprotect(0xc4f03000, 4096, PROT_READ)   = 0\nmprotect(0xc45c2000, 8192, PROT_READ)   = 0\nmunmap(0xc538d000, 201670)              = 0\nrt_sigprocmask(SIG_BLOCK, [HUP USR1 USR2 PIPE ALRM CHLD TSTP URG VTALRM PROF WINCH IO], [], 8) = 0\ngetpid()                                = 5625\ngetpid()                                = 5625\ngetpid()                                = 5625\nopen(\"/sys/fs/kdbus/0-system/bus\", O_RDWR|O_NOCTTY|O_LARGEFILE|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nsocket(AF_UNIX, SOCK_STREAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0) = 3\ngetsockopt(3, SOL_SOCKET, SO_RCVBUF, [212992], [4]) = 0\nsetsockopt(3, SOL_SOCKET, SO_RCVBUFFORCE, [8388608], 4) = -1 EPERM (Operation not permitted)\nsetsockopt(3, SOL_SOCKET, SO_RCVBUF, [8388608], 4) = 0\ngetsockopt(3, SOL_SOCKET, SO_SNDBUF, [212992], [4]) = 0\nsetsockopt(3, SOL_SOCKET, SO_SNDBUFFORCE, [8388608], 4) = -1 EPERM (Operation not permitted)\nsetsockopt(3, SOL_SOCKET, SO_SNDBUF, [8388608], 4) = 0\nconnect(3, {sa_family=AF_UNIX, sun_path=\"/var/run/dbus/system_bus_socket\"}, 33) = 0\ngetsockopt(3, SOL_SOCKET, SO_PEERCRED, {pid=1, uid=0, gid=0}, [12]) = 0\nclock_gettime(CLOCK_MONOTONIC, {tv_sec=19159, tv_nsec=730092267}) = 0\nfstat64(3, {st_mode=S_IFSOCK|0777, st_size=0, ...}) = 0\ngetsockopt(3, SOL_SOCKET, SO_ACCEPTCONN, [0], [4]) = 0\ngetsockname(3, {sa_family=AF_UNIX}, [128->2]) = 0\ngeteuid32()                             = 1000\nsendmsg(3, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base=\"\\0AUTH EXTERNAL \", iov_len=15}, {iov_base=\"31303030\", iov_len=8}, {iov_bas\ne=\"\\r\\nNEGOTIATE_UNIX_FD\\r\\nBEGIN\\r\\n\", iov_len=28}], msg_iovlen=3, msg_controllen=0, msg_flags=0}, MSG_DONTWAIT|MSG_NOSIGNAL) = 51\ngetpid()                                = 5625\n--- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0x14} ---\nrt_sigreturn({mask=[HUP USR1 USR2 PIPE ALRM CHLD TSTP URG VTALRM PROF WINCH IO]}) = 0\nwrite(2, \"fatal error: \", 13fatal error: )           = 13\nwrite(2, \"unexpected signal during runtime\"..., 42unexpected signal during runtime execution) = 42. ",
    "theherk": "I'm having a very similar issue on Arch.\n```\nfw/examples/mjs_base\u276f sudo drill mongoose.cloud                                                                         cesanta.com/git/release !\n;; ->>HEADER<<- opcode: QUERY, rcode: NOERROR, id: 5224\n;; flags: qr rd ra ; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n;; QUESTION SECTION:\n;; mongoose.cloud.      IN      A\n;; ANSWER SECTION:\nmongoose.cloud. 300     IN      A       52.208.120.157\n;; AUTHORITY SECTION:\n;; ADDITIONAL SECTION:\n;; Query time: 30 msec\n;; SERVER: 10.128.128.128\n;; WHEN: Wed Jul 19 12:32:42 2017\n;; MSG SIZE  rcvd: 48\nfw/examples/mjs_base\u276f sudo mos build --arch esp32                                                                       cesanta.com/git/release !\nConnecting to https://mongoose.cloud, user test\nUploading sources (162080 bytes)\nError: Post https://mongoose.cloud/api/fwbuild/1.9/build: dial tcp: lookup mongoose.cloud: no such host\n```\nAs you can see, I can resolve the DNS just fine, but mos cannot. I have not yet found a workaround. If I get time to dig, and find anything interesting, I'll follow up.\nI should also add that this is the case for any function that requires DNS resolution. So mos update doesn't work either.. ",
    "rkakrik": "Same problem on arch-linux(. ",
    "VishnuEaswaran": "The issue still persist. Any solutions as of yet ?? \nWhy is this issue marked closed ??. ",
    "Anshu6943": "if you are using Linux then try the commands with sudo\nlike sudo mos build --arch esp8266\nIt worked for me and perhaps will work for you too. I have just updated mos tool to 1.26 but now I am unable to build programs\n. What configuration of esp32 are you using for your own pcb?. ",
    "carldunham": "Trying to follow the instructions for a local build and getting this:\n% go get -d -v\ncan't load package: package .: no buildable Go source files in /Users/cdunham/Projects/Mongoose/mongoose-os\nI'm not a golanger, so may just be missing an obvious step.. like cd mos \ud83d\ude44 . Yeah, I guess the code could check to see if it's the same and non-zero, and skip over it. I may do that, will save me 0.75USD. :-). Cool. I'm also working on a PR that allows setting public ECC keys in slots 8-15 from a PEM. It may be rough (first time with go), but hope to have something this evening.. So the issue is that frozen.c is expecting a pointer to an int for booleans, not bool. the comments in frozen.h are clear about that. Some places in the code are passing *bool and getting away with it, by luck of the way the compiler is organizing them on the stack/heap. Others are passing *int properly.\nI have a PR in progress that will fix (or eliminate) some in fw/src/mgos_atca_service.c, but there are some in fw/src/mgos_updater_rpc.c (and possibly elsewhere) that I would rather not touch right now.\n. That should work, but what about existing code that uses *int?\nAlso, wouldn't it just be simpler to require bool and let the compiler deal with the sizes?. So the calls I have that use int are now broken, but changing them to use bool* works.. Or better yet, cryptographically signed. ",
    "unixbigot": "Good spot, @carldunham, I've updated the README.md to include that step.. Withdrawing this as mongoose-os now builds cleanly on ARM, and has --http-addr flag. ",
    "ruslanvaliullin": "Added support for char-sized bools to frozen. Please check.. Thank you for the question! Yes, but we don't want to change the API yet. We will do it in one of the future releases. Please make sure that your example works. https://github.com/cesanta/frozen/commit/e76c7312e4c2adc15a9c7728682eeb7baf5dc646\nRegards.. done.. API was changed to api_arduino_onewire.js. Please take a look https://github.com/cesanta/mongoose-os/tree/master/fw/examples/mjs_arduino_onewire. Fixed https://github.com/cesanta/mongoose-os/commit/f1f7309020e3efabb7cd9d513c2d01f927f2f6e2. Please check. Regards.. You can already use it. \nhttps://github.com/cesanta/mongoose-os/blob/master/fw/examples/mjs_base/examples/https_client.js. ok. We need to go into high-Z state with pull-up. We should change to input mode, not to output mode and digitalWrite(_pin, HIGH). DHT on esp32 - it's a known issue and will be solved soon.. @vgrebenschikov, the new DHT lib was implemented:\nhttps://github.com/mongoose-os-libs/dht\nusage examples:\nhttps://github.com/mongoose-os-apps/example-dht-js\nhttps://github.com/mongoose-os-apps/example-dht-c\nPlease check. Regards. fixed. please check. fixed. https://github.com/cesanta/mongoose-os/commit/63bf2882e993a4a261d9e03e484ca4fe24570e39. Yes, that's it. @aavestan, implemented https://github.com/mongoose-os-libs/adc/commit/f5412e8705415854790f33ce402c4de75bde802f. ",
    "tusharvb19": "It will be great if it works with LAN8720 and also with Wiznet5100 or ENC28J60.\nAs in IOT ehternet can be the main source for industrial gateways.\nWaiting for the development and if there is any way we can use this hardware as we use in arduino using arduino API.\nTIA.. Thanks for the work\ud83d\udc4d. Can you give example code to fetch data from modbus server i.e to act as a master?\nTIA.. Help needed...how can I poll modbus registers and coil i.e. act as master and use the rs485 ttl hardware with esp32 and 8266???\nOr any arduino code ported?\nTIA.\n. Waiting for the Ethernet support...LAN8720 and Wiznet W5100\ud83d\ude0a. what about esp8266? If I want to connect it with W5100 or other Ethernet chip? . It uses SPI and has ready arduino ethernet library.\nBut how to use in mongoose os?. Is there anyone who can help me!. ",
    "williamwd": "I'll post here because I spent a week trying to find out the reason that aws would disconnect me without clearly saying the reason. \nAWS logs wouldn't tell me; Mongoose logs just showed a disconnect.\nThe problem happened because I had multiple ESP8266 connected to AWS IoT, so the mqtt.client_id was the same for both devices.\nDocumentation says: \n\nThe message broker uses the client ID to identify each client. The client ID is passed in from the client to the message broker as part of the MQTT payload. Two clients with the same client ID are not allowed to be connected concurrently to the message broker. When a client connects to the message broker using a client ID that another client is using, a CONNACK message will be sent to both clients and the currently connected client will be disconnected.\n\nSo just set different client_id for each device: mos config-set mqtt.client_id=device123\nThanks!. ",
    "JonnyBGod": "Need some of the fixes in Wifi and BT, in particular the promiscuous mode fix.. Are there instructions on how to compile with a new version of esp-idf?. ",
    "anjeludo": "Same problem here.. ",
    "caiobarbosa": "I have the same issue.\nAnyone find out any solution? . ",
    "heggenu": "Also same problem since two days back.. ",
    "wamburu": "Thanks @cpq .\nWhat about nrf52. They seem powerful enough.\n. Would me amazing if you provide a doc on the process of porting the OS to other MCUs and supported MCU spec. Will provide a clear guidance to users who wanna port it, don't you think?. Hi, am using the WEB ui and its returning Error 4.\nTried on both esp82 and sparkfun thing.. I0502 13:02:12.888599   27950 main.go:211] Error: flash size is not specified and could not be detected: invalid chip id: 0x001f8401\n/Users/lsm/src/cesanta.com/mos/flash/esp/flasher/common.go:101: invalid chip id: 0x001f8401\n/Users/lsm/src/cesanta.com/mos/flash/esp/flasher/common.go:67: flash size is not specified and could not be detected\n/Users/lsm/src/cesanta.com/mos/flash/esp/flasher/flash.go:43:\n/Users/lsm/src/cesanta.com/mos/flash.go:125:\n/Users/lsm/src/cesanta.com/mos/main.go:124:. Getting another error.\nAm i supposed to specify the size?. ",
    "scargill": "Hi there\nDTR and RTS are not used \u2013 many of us use boards with either separate reset and program or a combined (long push) button to reset the ESPs and maybe put them into programming mode \u2013 then it is merely necessary to hook up power, ground, RX and TX to do programming.\nIn order to use your software it is necessary to do something with RTS or DTR?  I believe they are accessible on the FTDI boards..\nI tried\nmos --port COM4 flash esp8266 --v4 \u2013logtostderr\nIt would not run with \u2013-v4 in it \u2013 so ran without the \u2013-v4  don\u2019t know where the log is ??\nAlso tried original with RTS hooked to ground \u2013 then to +V \u2013 made no difference.\nPete.\nFrom: Sergey Lyubka [mailto:notifications@github.com] \nSent: 21 April 2017 23:42\nTo: cesanta/mongoose-os mongoose-os@noreply.github.com\nCc: Peter Scargill pete@scargill.org; Author author@noreply.github.com\nSubject: Re: [cesanta/mongoose-os] Failed to load firmware (#238)\nRun with verbose debug, mos --port COM4 flash esp8266 --v4 --logtostderr\nand show the logs please.\nAlso, are DTR & RTS are connected?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/cesanta/mongoose-os/issues/238#issuecomment-296312110 , or mute the thread https://github.com/notifications/unsubscribe-auth/ABzUg7EpJ27OalcMBqxUOxmmovCBpiEqks5rySK0gaJpZM4NEbsh .\n. This is interesting - I used your line above with the fixed --v 4  - and it seems to have worked... there's a blue flashing light on the board  and the messages looked sensible.\nSee below - it looks like it has put the boot into the chip.\nBut when I go back to the graphical interface, select COM4 and hit Next (I have updated it as there was an update request in the Chrome Browser once I ran MOS) - same result - sits there busy... no flashing lights on the FTDI either...\nI0422 11:16:32.079615   20296 report.go:13]     4096 @ 0x1000\nI0422 11:16:32.079615   20296 flasher_client.go:108] FlashDigest(3) [4096 4096 0]\nI0422 11:16:32.079615   20296 slip.go:91] => (1) 03\nI0422 11:16:32.079615   20296 slip.go:91] => (12) 001000000010000000000000\nI0422 11:16:32.093671   20296 slip.go:47] <= (16) 6ae59e64850377ee5470c854761551ea\nI0422 11:16:32.093671   20296 flasher_client.go:135] <= \"6ae59e64850377ee5470c854761551ea\"\nI0422 11:16:32.093671   20296 slip.go:47] <= (1) 00\nI0422 11:16:32.093671   20296 flasher_client.go:135] <= \"00\"\n  628224 @ 0x8000\nI0422 11:16:32.093671   20296 report.go:13]   628224 @ 0x8000\nI0422 11:16:32.093671   20296 flasher_client.go:108] FlashDigest(3) [32768 628224 0]\nI0422 11:16:32.094674   20296 slip.go:91] => (1) 03\nI0422 11:16:32.094674   20296 slip.go:91] => (12) 008000000096090000000000\nI0422 11:16:32.381398   20296 slip.go:47] <= (16) d7dc51ec8f4bdd6614fc0fc2daa1d9bd\nI0422 11:16:32.381398   20296 flasher_client.go:135] <= \"d7dc51ec8f4bdd6614fc0fc2daa1d9bd\"\nI0422 11:16:32.383396   20296 slip.go:47] <= (1) 00\nI0422 11:16:32.383396   20296 flasher_client.go:135] <= \"00\"\n  131072 @ 0xdb000\nI0422 11:16:32.385402   20296 report.go:13]   131072 @ 0xdb000\nI0422 11:16:32.386399   20296 flasher_client.go:108] FlashDigest(3) [897024 131072 0]\nI0422 11:16:32.386399   20296 slip.go:91] => (1) 03\nI0422 11:16:32.386399   20296 slip.go:91] => (12) 00b00d000000020000000000\nI0422 11:16:32.445546   20296 slip.go:47] <= (16) 80995d3985092865d9938ba6b4681d83\nI0422 11:16:32.445546   20296 flasher_client.go:135] <= \"80995d3985092865d9938ba6b4681d83\"\nI0422 11:16:32.447527   20296 slip.go:47] <= (1) 00\nI0422 11:16:32.447527   20296 flasher_client.go:135] <= \"00\"\n    4096 @ 0xfb000\nI0422 11:16:32.447527   20296 report.go:13]     4096 @ 0xfb000\nI0422 11:16:32.448528   20296 flasher_client.go:108] FlashDigest(3) [1028096 4096 0]\nI0422 11:16:32.448528   20296 slip.go:91] => (1) 03\nI0422 11:16:32.448528   20296 slip.go:91] => (12) 00b00f000010000000000000\nI0422 11:16:32.461644   20296 slip.go:47] <= (16) 6ae59e64850377ee5470c854761551ea\nI0422 11:16:32.461644   20296 flasher_client.go:135] <= \"6ae59e64850377ee5470c854761551ea\"\nI0422 11:16:32.461644   20296 slip.go:47] <= (1) 00\nI0422 11:16:32.461644   20296 flasher_client.go:135] <= \"00\"\n     128 @ 0x3fc000\nI0422 11:16:32.461644   20296 report.go:13]      128 @ 0x3fc000\nI0422 11:16:32.461644   20296 flasher_client.go:108] FlashDigest(3) [4177920 128 0]\nI0422 11:16:32.461644   20296 slip.go:91] => (1) 03\nI0422 11:16:32.462650   20296 slip.go:91] => (12) 00c03f008000000000000000\nI0422 11:16:32.476805   20296 slip.go:47] <= (16) b5e9562bfdf62840f5ca0eacc58809cd\nI0422 11:16:32.477804   20296 flasher_client.go:135] <= \"b5e9562bfdf62840f5ca0eacc58809cd\"\nI0422 11:16:32.478806   20296 slip.go:47] <= (1) 00\nI0422 11:16:32.478806   20296 flasher_client.go:135] <= \"00\"\nBooting firmware...\nI0422 11:16:32.478806   20296 report.go:13] Booting firmware...\nI0422 11:16:32.478806   20296 flasher_client.go:108] FlashBootFW(6) []\nI0422 11:16:32.478806   20296 slip.go:91] => (1) 06\nI0422 11:16:32.520619   20296 slip.go:47] <= (1) 00\nI0422 11:16:32.520619   20296 flasher_client.go:135] <= \"00\"\nAll done!. Incidentally I've tried MOS (which is sitting on my Windows 10 desktop - with a mos directory under there) both straight off the desktop and as administrator - makes no difference.. Ok, by adding COM4 on the command line before running the UI - it works - I have a simple example working - but I can say for sure - on Windows 10 Pro - without that - the GUI seems unable to successfully select COM4. I do have other COM ports \u2013 several.  The UI shows a dropdown \u2013 always selecting COM10 (my camera) \u2013 so I drop down to COM4 and then continue \u2013 never works\u2026 but by running\nmos \u2013port COM4 ui\nI seem to have this working\u2026\nI\u2019ve just tested the simple example of a button triggering MQTT \u2013 using my own MQTT broker \u2013 that all seems to work\u2026 (had to put the port number in the address  - not sure if that is documented anywhere)..\nFrom: Sergey Lyubka [mailto:notifications@github.com] \nSent: 22 April 2017 12:40\nTo: cesanta/mongoose-os mongoose-os@noreply.github.com\nCc: Peter Scargill pete@scargill.org; Author author@noreply.github.com\nSubject: Re: [cesanta/mongoose-os] Failed to load firmware (#238)\nThank you.\nIf --port is not specified, then the UI enumerates all COM ports and makes a guess by choosing the very first port on the list. Do you have any other COM ports active?\nDoes the UI shows a correct port dropdown on the first wizard page?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/cesanta/mongoose-os/issues/238#issuecomment-296364652 , or mute the thread https://github.com/notifications/unsubscribe-auth/ABzUg8YlesfMCFWgmveGeDZdZPbpBJtpks5rydkRgaJpZM4NEbsh .\n. Nope \u2013 it did not \u2013 I have everything working but only by selecting COM4 manually..\ni.e. \nmos \u2013port COM4 ui\nFrom: Sergey Lyubka [mailto:notifications@github.com] \nSent: 22 April 2017 13:12\nTo: cesanta/mongoose-os mongoose-os@noreply.github.com\nCc: Peter Scargill pete@scargill.org; Author author@noreply.github.com\nSubject: Re: [cesanta/mongoose-os] Failed to load firmware (#238)\nSelects COM10 by default? Hmm, I believe that's because of string-based search, COM10 in this case comes before COM4.\nOn the first UI page, you might select a correct port from the dropdown and click Next, that should work.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/cesanta/mongoose-os/issues/238#issuecomment-296366183 , or mute the thread https://github.com/notifications/unsubscribe-auth/ABzUg7GqWfyCaq0N0jtu8Nd8CWWHxBLkks5ryeCAgaJpZM4NEbsh .\n. ",
    "neoautomata": "Forgot to note that if I set MGOS_ENABLE_DNS_SD to 1 , then the build works.. I think just adding an explicit cast to the macro will fix it. I tried manually expanding it and it compiles as either a .c or .cpp.\nCurrent version:\n```cpp\ndefine JSON_OUT_MBUF(mbuf_addr)   \\\n{                                \\\n    mg_json_printer_mbuf, {        \\\n      { (void *) mbuf_addr, 0, 0 } \\\n    }                              \\\n  }\n```\nExplicit cast:\n```cpp\ndefine JSON_OUT_MBUF(mbuf_addr)             \\\n{                                          \\\n    mg_json_printer_mbuf, {                  \\\n      { (char )((void ) mbuf_addr), 0, 0 } \\\n    }                                        \\\n  }\n. Instead of the double cast, it should just be a cast to `char *`. I've been working around it with the following after my includes:cpp\nundef JSON_OUT_MBUF\ndefine JSON_OUT_MBUF(mbuf_addr)             \\\n{                                          \\\n    mg_json_printer_mbuf, {                  \\\n      { (char *)mbuf_addr, 0, 0 } \\\n    }                                        \\\n  }\n```. I just noticed issue 241 which appears to be the same issue and was filed a few days before.\nFeel free to dedupe if needed.. I've sent Pull Request 263 to fix this.. Confirmed a new build attempt on Linux fails. My existing projects all still build though. The build log also contains:\nGEN   /app/build/gen/sys_ro_vars_schema.json\nmake[1]: Entering directory '/app'\nmake[1]: warning: -jN forced in submake: disabling jobserver mode.\nI'm not sure how to toggle this behavior in a new project though.. I spoke too soon, there are multiple occurrences. From my existing project:\nmake: Entering directory '/app'\n  MKDIR /app/build/fw\n  MKDIR /app/build/objs\n  MKDIR /app/build/gen\n  MKDIR /app/build/objs/fw_temp\n  GEN   /app/build/gen/sys_config.c\nCC esptool2.c\ngcc -O2 -Wall -c esptool2.c -o /app/build/objs/esptool2.o\nCC esptool2_elf.c\n  GEN   /app/build/gen/sys_ro_vars.c\ngcc -O2 -Wall -c esptool2_elf.c -o /app/build/objs/esptool2_elf.o\n  GEN   /app/build/gen/sys_config_schema.json\n  GEN   /app/build/gen/sys_ro_vars_schema.json\nmake[1]: Entering directory '/app'\nmake[1]: warning: -jN forced in submake: disabling jobserver mode.\n  GEN   /mongoose-os/fw/platforms/esp8266/ld/non_os.ld (0xd2ff0 @ 0x40208010) -> /app/build/gen/0x8000.ld\n  CC    ./src/netif/etharp.c -> /app/build/objs/lwip/etharp.o\n  CC    ./src/core/stats.c -> /app/build/objs/lwip/stats.o\n  CC    ./src/core/mem.c -> /app/build/objs/lwip/mem.o\nmake[1]: Entering directory '/app'\nmake[1]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.\n  CC    atca_command.c\n.... If I copy mos.yml and the src directory from the existing project, it still fails.\nIt seems that the mos init is no longer including an expected SSL cert under fs/. I created a new project in an empty directory with mos init --arch esp8266 and attempt a build, which failed. I then copied fs/DST_Root_CA_X3.pem from my existing project into the empty fs/ in the new project. The build then succeeds.. It doesn't have to be the DST_Root_CA_x3.pem, any file in fs/ will have the build succeed.\n```shell\n$ mkdir test/\n$ cd test/\n$ mos init --arch esp8266\nConnecting to http://mongoose.cloud, user  ...\nDownloading project skeleton...\nUnpacking...\nSetting arch \"esp8266\"...\n$ mos build\n...build error...\n$ touch fs/uhbadf\n$ mos build\nWARNING: Setting build variable \"APP_CONF_SCHEMA\" in \"mos.yml\" is deprecated, use \"config_schema\" property instead.\nConnecting to http://mongoose.cloud, user test\nUploading sources (1632 bytes)\nSuccess, built test/esp8266 version 1.0 (20170530-235452/???).\nFirmware saved to build/fw.zip\n```. Is anyone looking at this? I signed the CLA before sending the pull request.. ",
    "jkachmar": "I've extracted out a small repro here, based on the c_aws_shadow example:\nhttps://gist.github.com/jkachmar/ca0266073b9a21bfb22af4921743b552\nThe polling of GPIO 0 (vs. triggering an interrupt) is intentional to mirror other behavior. \nCuriously, with just the GPIO polling, I was unable to reproduce the crash; it was only after I added in a call to mgos_adc_read() that it ended up crashing again.. Thanks for looking into it, I've since bumped my Mongoose OS build environment and the problem seems to have resolved itself.\nFor reference, I was running into this on 4439978, and I'm currently on 5a3a3af.\nFeel free to close this issue if I'm the only one reporting this sort of problem; if I run into it again I can just reopen, hopefully with additional details :smile:. ",
    "brandond": "Can we reopen this until dual-core is supported? Half of the available processing power of this chipset is going to waste. More, if you count the unsupported ULP core.. ",
    "tripflex": "@brandond @aifer2007 https://github.com/cesanta/mongoose-os/issues/480\n. I've built out a captive portal wifi setup that i'll work on porting over to a lib when i have a minute, but most of this was easily handled with a 302 redirect:\nC\n  mgos_register_http_endpoint(\"/generate_204\", cap_port_redirect_ev_handler, NULL); // Android\n  mgos_register_http_endpoint(\"/ncsi.txt\", cap_port_redirect_ev_handler, NULL); // Windows\n  mgos_register_http_endpoint(\"/hotspot-detect.html\", cap_port_redirect_ev_handler, NULL); // iOS 8/9\n  mgos_register_http_endpoint(\"/library/test/success.html\", cap_port_redirect_ev_handler, NULL); // iOS 8/9\n```C\n// Captive Portal 302 Redirect Handler\nstatic void cap_port_redirect_ev_handler(struct mg_connection nc, int ev, void ev_data, void user_data) {\n  struct http_message hm = (struct http_message *) ev_data;\nif (ev != MG_EV_HTTP_REQUEST) return;\nprintf(\"Portal Redirect Event: %d, uri: %s\\n\", ev, hm->uri.p);\nstruct mg_str *hdr = mg_get_http_header(hm, \"User-Agent\");\nprintf(\"Portal Redirect Event USER AGENT: %s \\n\", hdr->p);\n// User-Agent: CaptiveNetworkSupport-355.50.1 wispr\nLOG(LL_INFO, (\"Redirecting for Captive Portal\"));\n  mg_http_send_redirect(nc, 302, mg_mk_str(s_portal_redirect_url), mg_mk_str(NULL));\n  (void) user_data;\n}\n```\nYou will notice I started adding support for handling it based on user agent as well (just never got around to finishing it, since with my esp32 it works perfect on all devices i've tested so far .. android/windows/iphone/osx) .. would just need to string match CaptiveNetworkSupport and send 302 redirect as well (if using user agent). @cpq yes it should be IMO instead of an example app ... i've already got pretty much all of the code working, and even incorporated a completely vanilla js index page that calls RPC to get list of wifi networks, shows a dropdown, and allows selecting and setting the pw ... I just need to find time to finish moving all my code over to a lib, but don't have any problem providing what i've already done if you guys want . @kzyapkov @cpq I created a captive portal lib for wifi setup you can find here:\nhttps://github.com/tripflex/wifi-captive-portal\nI'm going to separate this into multiple libs soon, one for specifically captive portal, one for wifi setup UI, and one for the RPC endpoints, but for now it works without issues for me on esp32 (working on fixing esp8266 integration). Yeah this could be a huge deal breakers in moving forward with ESP32 and device provisioning . @cpq you mentioned this in the gitter chat, but can't seem to get it to work with params .. can you provide an example for this please?\njs\nRPC.addHandler('JS.exec', function(args) {\n  let i = 0, j, name = args.func || '', obj = global;\n  while (true) {\n    j = name.indexOf('.', i);\n    if (j < 0) break;\n    print(JSON.stringify({a: name.slice(i, j)}));\n    obj = obj[name.slice(i, j)];\n    i = j + 1;\n  }\n  obj = obj[name.slice(i)];\n  obj.apply(args.params);\n});. +1. I'm not sure what you mean by this? ESP8266 GPIO pins are not modified by MOS, that is all based on the chip and whatever dev board you may be using ....\nhttps://www.esp8266.com/wiki/doku.php?id=esp8266_gpio_pin_allocations\nhttps://www.espressif.com/sites/default/files/documentation/esp8266-technical_reference_en.pdf. Had to revert all the way down to 2.8.1 just to fix this problem, PLEASE MERGE THE FIX FROM IDF!\n. Fixed in 9dba3f497d730230352f79e795f448d64e9eaa24 thank you @rojer . ",
    "vgrebenschikov": "I would vote for python also. Also, is there right way to make all DEBUG_PRINT and DEBUG_PRINTLN works?. After applying the following patch it started to work\n```\ndiff --git a/Adafruit_DHT/DHT.cpp b/Adafruit_DHT/DHT.cpp\nindex 78f48d8..4e97fcb 100644\n--- a/Adafruit_DHT/DHT.cpp\n+++ b/Adafruit_DHT/DHT.cpp\n@@ -139,11 +139,11 @@ boolean DHT::read(bool force) {\n// Go into high impedence state to let pull-up raise data line level and\n   // start the reading process.\n+  pinMode(_pin, OUTPUT);\n   digitalWrite(_pin, HIGH);\n   delay(250);\n// First set data line low for 20 milliseconds.\n-  pinMode(_pin, OUTPUT);\n   digitalWrite(_pin, LOW);\n   delay(20);\n@@ -154,6 +154,7 @@ boolean DHT::read(bool force) {\n     InterruptLock lock;\n // End the start signal by setting data line high for 40 microseconds.\n\n\npinMode(_pin, OUTPUT);\n     digitalWrite(_pin, HIGH);\n     delayMicroseconds(40);\n```. Time to time it works, what is strange for me.\n\nDo you think that it will work on other GPOI pin?\nWhat pins are ready for pull-up? \n(is it right direction to dig into: https://www.esp32.com/viewtopic.php?t=439 ?). Thanks, now it works!. ",
    "Eskibrew": "I'd say yes however it's not obvious how it could be abstracted in that way since it needs modification of the platform specific files.  Am I missing something?. This modification is not because I need MODBUS, I just need RS485, they are not synonymous.  I have in the past used this library to achieve MODBUS master and slave operations on both PIC and MSP430 successfully.  It would be realtively simple to port to mongoose but licencing would need thought.. well spotted - yes data.\nI've actually made a further improvement so it's probably worth me issuing another PR before you accept this.. ",
    "yanzixiang": "maybe u can use this.\nHalf-Duplex RS-485/RS-422-Compatible Transceiver with AutoDirection Control\nhttps://www.maximintegrated.com/en/products/interface/transceivers/MAX13487E.html. ",
    "andreicek": "Thanks! Can you please tell me when this will be available in the release?. When I update thru the wizard I don't get the updated files. This makes me think that the firmware package didn't get updated: https://mongoose-os.com/downloads/mos-esp32.zip.\n\nThanks for the help.. Still nothing. I'm confused as to how the api_http.js file should be updated. I tried running ~/.mos/bin/mos update but I keep getting Up to date message.\nCurrently, on my device, the api_http.js is different from the one in the mentioned commit.. Working! Thanks for all the help and fast reaction! \ud83c\udf89 . On May 18 it worked. This was the last time I checked, sorry.. ",
    "mounikamadurireddy": "hi,\niam new to mongoose os .\nCan i get any code for esp in http get and post data. ",
    "aleksmarcelo": "Still not working when you use the IP address. ",
    "gnanaswaroop": "\nhttps://github.com/cesanta/mongoose-os/blob/master/fw/examples/mjs_base/examples/https_client.js\n\nThis link is broken now. Couldn't find it in archives either. Would someone be kind enough to post the correct URL?\nI downloaded the latest MOS and am testing on the latest version.\n. @bravokeyl I am trying to establish a HTTPS connection and am looking for an example to do that. I see your mention of the Default App but cant seem to find the source/example inside that. . @bravokeyl I am actually looking for an HTTPS based example using MOS via Javascript to which the answers appear that something was fixed in MOS that resolved the HTTPs as a client connection to server.\nThe provided example is merged into some default app but can't seem to find the example there either. . @andreicek Did u have any luck with the HTTPS client calls from the IoT device?. > @andreicek Can you please post which hardware you were trying on? I am trying to run this on an NodeMCU ESP8266\nUpdate1 - Pls ignore, i see that you're using an ESP32. Found the source although the link was broken. The example is the same that @cpq mentioned inline above. \nhttps://github.com/cesanta/mongoose-os/blob/f1f7309020e3efabb7cd9d513c2d01f927f2f6e2/fw/examples/mjs_base/examples/https_client.js. ",
    "bravokeyl": "@gnanaswaroop , What exactly are you trying to do, I think you are posting on a wrong issue/thread. Anyway, the above link/code is migrated to the apps section which should be Default App AFAIK. If you are looking for HTTP based example, here is one, though I'm unsure about HTTPS.. @DrSchottky  Where are you publishing to? What does your debug logs say?. @vpetrache Yes, disable wifi.ap in the config. @techparva Try with mos 1.20.1 . ",
    "wuyuanyi135": "I have the same issue.\nPS C:\\Users\\wuyua\\test_mos> mos version\nThe Mongoose OS command line tool, v. 20170524-140954/master@41976534.. ",
    "michaeldmoore": "Me too, with the next (current, as of writing) version of mos, and just to be clear - this also happens under linux (as expected, since the compilation is being done in 'the cloud')\nC:\\Users\\mdmoo\\foo>mos version\nThe Mongoose OS command line tool, v. 20170525-152605/master@f5603d7d.\nOne clue might be the warning message : [make[1]: warning: -jobserver unavailable: using -j1.  Add '+' to parent make rule.\n\nAnother small thing, after seeing the warning message: \n\"WARNING: Setting build variable \"APP_CONF_SCHEMA\" in \"mos.yml\" is deprecated, use \"config_schema\" property instead.\"\nmanually updated the mos.yml to:\n\n. I confirm this - I grabbed a copy of DST_Root_CA_x3.pem from github, placed it in the fs directory, and now the build runs to completion without errors.. ",
    "DrSchottky": "I used a personal broker and mosquitto/eclipse public brokers. The code is the button_mqtt.js example.\nWith QoS 1 log is\nmgos_mqtt_pub        Publishing to mOS/topic1 @ 1 (36): [{\"free_ram\":39096,\"total_ram\":51912}]\nPublished: yes topic: mOS/topic1 message: {\"free_ram\":39096,\"total_ram\":51912} \nmgos_mqtt_ev         MQTT event: 204\nWith QoS 2\nmgos_mqtt_pub        Publishing to mOS/topic1 @ 2 (36): [{\"free_ram\":39104,\"total_ram\":51912}]\nPublished: yes topic: mOS/topic1 message: {\"free_ram\":39104,\"total_ram\":51912} \nmgos_mqtt_ev         MQTT event: 205\nP.S.: The WiFi connection is provided by a 3G AP. ",
    "Tommystus": "Previous version works as as expected without having to specify the port again in ui dialog. ",
    "scotthernandez": "Sounds like this has been changed and pushed already. Can anyone confirm?\nIf not, i should be able to in the next day or two.. As stated in the wikipedia page this feature is no longer suggested for security reasons. It is not secure and should not be used -- is is broken by design and allows an attack vector for brute-force attacks to be successful in milliseconds, or a few hours at the most. Just having it enabled in the access point (router) open up this attack vector, even if never actually used.. I would expect a port scan to not reset the esp8266/device. Is that what you want @meinpilsbier?\n@meinpilsbier, can you provide the arguments you are using for the port scan so I could try to reproduce it?\nAlso, if reproducible, I would consider this a security issue if the device can be remotely reset by sending it a \"random\" packet, since that would be a denial-of-service (DOS) scenario.. From what I've read, at least for the esp8266, there is no reason not to run at the top frequency since it doesn't effect power-usage in a noticeable way.\nI'm curious, what is the motivation for this? What are the use-cases?. I'm not sure this is a good idea. \nThe yml files are combined whereas what you are suggesting would be more confusing since it would be an an \"or\", with non-obvious results not a combination or super-set. If you wanted to do what you suggest you should simply write that code into init.js to decide what js file to run based on the arch, or anything you want.\nI am keen to make sure there is a good way to switch and reuse code based on the architecture and available libs, but that is another issue (which is probably not done yet).. ",
    "ktorn": "Actually, it is actually mentioned in this page.\nI was going only by the basic instructions on the Downloads/Installation on Linux or MacOS page.\n. ",
    "bestpika": "Yes, I mean Wi-Fi Protected Setup.\nI wish my device have less setting and easy to use, so user no need to enter any information, they just press WPS button and my device can auto connect to Internet.. If use push button method not pin method, then I think it still secure.. ",
    "kunal-cloud-kickers": "Is it possible to push button on both end, from wifi router and esp?. ",
    "meinpilsbier": "Hi cpq, as Scott commented,  it shoud not  reset.\nI only use \"nmap ip-address\", to scan open ports. (OSX Sierra)\nThis is the serial dump\nmgos_http_ev         0x3fff246c HTTP connection from 192.168.112.49:60671\nException 28 @ 0x4027a8f2, vaddr 0x00000004\n A0: 0x4027aa7d  A1: 0x3ffffed0  A2: 0x3fff246c  A3: 0x00000000\n A4: 0x00000001  A5: 0x3fff19d4  A6: 0x3ffef8d4  A7: 0x0000041d\n A8: 0x000003fe  A9: 0x352220bc A10: 0x0000041d A11: 0x9a91105e\nA12: 0x3fff19d4 A13: 0x3ffeee44 A14: 0x00000000 A15: 0x3fff246c\n(exc SP: 0x3ffffd30)\n--- BEGIN CORE DUMP ---\n{\"arch\": \"ESP8266\",\n\"REGS\": {\"addr\": 1073741152, \"data\": \"\nfaonQND+/z9sJP8/AAAAAAEAAADUGf8/1Pj+Px0EAAD+AwAAvCAiNR0EAABeEJGa1Bn/P0Tu/j8AAAAAbCT/P/KoJ0AfAAAAAAAAAAAAAAAAAAAAMAAAAA==\", \"crc32\": 3871232949},\n\"DRAM\": {\"addr\": 1073643520, \"data\": \"\nGYAhQAAAAAAQgP4/AAAAAAIAAAD8gv4/ZIP+P8yD\nI test it with ESP8266 and ESP32.\nI only flash the ESP and set the WLAN data.\n/j\u00f6rg\n. ",
    "Galbi3000": "Looking at the code for the ESP32 it looks like it does have an AP mode, it's just called WIFI_MODE_AP instead of SOFTAP_MODE. On both they set mode_str = \"AP\"; so they must be the same mode ;)\nLooks like a change to the definitions for the modes on the ESP32:\nNULL_MODE = WIFI_MODE_NULL\nSOFTAP_MODE = WIFI_MODE_AP\nSTATION_MODE = WIFI_MODE_STA\nSTATIONAP_MODE = WIFI_MODE_APSTA\nhttps://github.com/cesanta/mongoose-os/blob/81bc17ed2c9f798860c51cbd548e2bff6957faff/fw/platforms/esp32/src/esp32_wifi.c#L112. ",
    "fantawttw": "I'm also receiving the error.\nLog Extract\nesp32_mgos_init      mjs_base 1.0 (20170609-193726/???)\nesp32_mgos_init      Mongoose OS Firmware 2017060919 (20170609-193726/???)\nesp32_mgos_init      ESP-IDF v1.0-1373-g7e17ba7\nesp32_mgos_init      Boot partition: app_0, Task ID: 0x3ffbc738, RAM: 224116 free\nesp32_fs_mount       Mounting SPIFFS from fs_0 (131072 @ 0x190000)\nesp32_fs_mount       Total: 113201, used: 76053, free: 37148\nmgos_sys_config_init MAC: XXXXXXXXXXX\nmgos_sys_config_init WDT: 30 seconds\nmgos_wifi_set_mode   WiFi mode: STA\nE (2942) wifi: esp_wifi_set_mode 774 wifi is not init\nI (2942) wifi: wifi firmware version: 75d56a6\nI (2952) wifi: config NVS flash: enabled\nI (2952) wifi: config nano formating: disabled\n\u001b[0;32mI (2962) system_api: Base MAC address is not set, read default base MAC address from BLK0 of EFUSE\u001b[0m\n\u001b[0;32mI (2962) system_api: Base MAC address is not set, read default base MAC address from BLK0 of EFUSE\u001b[0m\nI (2972) wifi: Init dynamic tx buffer num: 32\nI (2982) wifi: Init dynamic rx buffer num: 64\nI (2982) wifi: wifi driver task: 3ffbd5e4, prio:23, stack:4096\nI (2992) wifi: Init static rx buffer num: 10\nI (3002) wifi: Init dynamic rx buffer num: 0\nI (3002) wifi: Init rx ampdu len mblock:7\nI (3012) wifi: Init lldesc rx ampdu entry mblock:4\nI (3012) wifi: wifi power manager task: 0x3ffd0064 prio: 21 stack: 2560\nE (3022) wifi: esp_wifi_connect 816 wifi not start\nI (3032) wifi: wifi timer task: 3ffd10d0, prio:22, stack:3584\n\u001b[0;32mI (3052) phy: phy_version: 354.0, b2dba61, May 16 2017, 21:41:06, 0, 0\u001b[0m\nI (3062) wifi: mode : sta (XX:XX:XX:XX:XX:XX)\nevent_handler        event: 2\nmgos_wifi_setup_sta  WiFi STA: Connecting to XXXXXXXX\nmgos_i2c_create      I2C GPIO init ok (SDA: 32, SCL: 33)\nmgos_sys_config_init HTTP server started on [80]\nmg_rpc_channel_uart  0x3ffd1a08 UART0\n  at init.js:3\nMJS error: failed to exec file \"api_mqtt.js\": failed to read file \"api_mqtt.js\"\nmg_rpc_channel_mqtt  0x3ffd238c esp32_10A13C/rpc/#\nmgos_init            Init done, RAM: 257584 total, 183036 free, 178836 min free. ",
    "DENightOne": "Seems they fixed this in yesterdays build (12 June)\nForum post here: https://forum.mongoose-os.com/discussion/1191/failed-to-read-file-api-mqtt-js. ",
    "sctv": "Thanks\napi_adc.js works nicely.\n Here is an example which reads an analog rain sensor when a button is pressed and publishes to the rain feed on a mqtt server. Sorry I can't get the insert code button to work with it.  \nload('api_config.js');\nload('api_gpio.js');\nload('api_mqtt.js');\nload('api_sys.js');\nload('api_adc.js');\nGPIO.set_button_handler(0, GPIO.PULL_UP, GPIO.INT_EDGE_NEG, 200, function() {\n  let topic = Cfg.get('mqtt.user') + '/feeds/rain';\n  let message = JSON.stringify(ADC.read(32));//reads pin 32 which is ADC1_CHANNEL_4 https://esp-idf.readthedocs.io/en/v2.0/api/peripherals/adc.html\n  let ok = MQTT.pub(topic, message, 1);\n  print('Published:', ok ? 'yes' : 'no', 'topic:', topic, 'message:', message);\n}, null);. @ruslanvaliullin @cpq I am new to this... is the above what you mean by the ADC API being FFI-ed to JS?\nThanks. ",
    "crashGoBoom": "So its possible to override the mgos_adc_read in esp32_hal.c? Seems like it will still default to 11db if you try to configure it elsewhere. Do you have an example of how to do this? \n Thanks! \nint mgos_adc_read(int pin) {\n  static int pins[] = {36, 37, 38, 39, 32, 33, 34, 35};\n  static adc1_channel_t channels[] = {\n      ADC1_CHANNEL_0, ADC1_CHANNEL_1, ADC1_CHANNEL_2, ADC1_CHANNEL_3,\n      ADC1_CHANNEL_4, ADC1_CHANNEL_5, ADC1_CHANNEL_6, ADC1_CHANNEL_7};\n  int i;\n  for (i = 0; i < ARRAY_SIZE(pins); i++) {\n    if (pins[i] == pin) {\n      adc1_config_width(ADC_WIDTH_12Bit);\n      adc1_config_channel_atten(channels[i], ADC_ATTEN_11db);\n      return 0x0FFF & adc1_get_voltage(channels[i]);\n    }\n  }\n. @cpq no hurry! Next week sounds great! I'll be watching out for it. Thank you so much. . Hi @cpq, was this still planned for this week? . @cpq Ok should something like this work in my own fs file?\nlet ESP_ADC = {\n   let set6db: ffi('int adc1_config_channel_atten(int, ADC_ATTEN_6db)')\n}\nThanks for your help on this. . ",
    "jocodeinc": "To increase speed for ESP32 which at default is currently running at 160. Would be nice to know what speed CPU are running at. . Here's a guide: https://serverfault.com/questions/679393/captive-portal-popups-the-definitive-guide\nAlso, note that for iOS, device needs to have a domain for the WiFi network as it assumes a domainless network without access is a home network and just marks it as No Internet Connection instead of Captive Portal.. ### Suggestions\n- Under Advanced Javascript, add keep variable and function declaration under 5 characters or less\nmJS uses double type to hold values. valid double is a number, and NaN values\nhold other types. 2 bytes out of 8 are used for type, and 6 - for payload.\nShort strings are 5 chars + terminating 0, are stored directly in the NaN payload.\nLonger strings are stored in a special buffer, and NaN payload stores a pointer\nto that buffer. Therefore, strings of length 5 and less take no extra memory in mJS.\nE.g., let obj = 'boo'; uses two string entities. Couldn't this be done with ADC.read(pin) already?. ",
    "MartyMacGyver": "The problem is that assuming an address with the 8th bit cleared is really a 7-bit address leads to ambiguity (disjoint behavior). If the user provides an address >= 0x80 it goes through as-is, but <0x80 it gets shifted - yet there are perfectly valid \"8-bit\" addresses below 0x80 (e.g. 0x70). Thus, if the user wants to enter 0x70 they really need to enter 0x38, but if they want to enter 0x80 they must enter 0x80.\nI get that it's a convenience, but it's only a convenience if the user specifies an 8-bit address that's >= 0x7F. If they specify an 8-bit address < 0x7F, hopefully they know that what they specified will be treated as a 7-bit address. While addr > 0x80 == 8-bit is a reasonable assumption for even values only, it says nothing about the intent of values < 0x80, and only a look at the code will reveal that a conversion is happening.\nThis conversion table illustrates the ambiguity and side-effects of this algorithm - but if nothing else, it makes clear to the user what their input will be processed as, and what values will be allowed through despite being invalid 8-bit \"addresses\" (as odd 8-bit values toggle the R/W bit incorrectly).\nGiven   shifted if < 0x7F\n    ....\n0x38    0x70\n0x39    0x72\n0x3A    0x74\n0x3B    0x76\n0x3C    0x78\n0x3D    0x7A\n0x3E    0x7C\n0x3F    0x7E\n0x40    0x80\n0x41    0x82\n    ....\n0x5E    0xBC\n0x5F    0xBE\n0x60    0xC0\n0x61    0xC2\n0x62    0xC4\n    ....\n0x7E    0xFC\n0x7F    0x7F  ---> outlier as-coded\n0x80    0x80\n0x81    0x81  (invalid)\n0x82    0x82\n    ....\n0xBC    0xBC\n0xBD    0xBD  (invalid)\n0xBE    0xBE\n0xBF    0xBF  (invalid)\n0xC0    0xC0\n0xC1    0xC1  (invalid)\n0xC2    0xC2\n0xC3    0xC3  (invalid)\n0xC4    0xC4\n    ....\n\n. ",
    "mayson14": "Is this still not possible?  Trying to use RTC_DATA_ATTR. thank you for the repsonse.. do you have any mos examples of using RTC_DATA_ATTR?  i havent had much luck finding syntax samples... ah, ok.. the project im working on started from a template using the api_esp32.js javascript wrapper... i may have to convert my project to C.. ",
    "DrBomb": "I found on google https://gist.github.com/igrr/54f7fbe0513ac14e1aea3fd7fbecfeab. By \"incorrect\" do you mean a password that is too short? or that the Station does not accept?. Have you tried something like this?\nuint8_t mac[6];\nesp_wifi_get_mac(ESP_IF_WIFI_AP, mac);\nLOG(LL_ERROR, (\"Local MAC Address: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]));. Looks like you will need to dive into mOS' source code to figure out what is going on.\nWhile SDK calls are available and encouraged to use. Things like setting up the wifi are done in startup, you will be better off just changing the config and rebooting the device.. Ok, you should post which platform, and how is this bug reproduced (with some code would be great) so a dev can take a look at it. This is such a roundabout way of setting up wifi configs!\nHave you tried using this function in C? https://github.com/cesanta/mongoose-os/blob/master/fw/include/mgos_sys_config.h#L86\nOr the mJS equivalent? https://github.com/mongoose-os-libs/mjs/blob/master/fs/api_config.js#L60\nIf rebooting is not an issue to you, using these functions to set the wifi object to what you need, then rebooting should do the work.. You will need to call a system reboot after changing the wifi configurations. That is normal.. Yes, read the docs, check available apps and libs for references.\nhttps://mongoose-os.com/docs/mos/userguide/configuration.md#compile-time-generation-deep-dive. ",
    "snpwr": "+1\nOn up-to-date Manjaro (which is essentially Arch Linux) with Kernel 4.11 . Seems that it has to do with the DNS resolver.\nIt works when forcing it to use the pure-go dns resolver:\nGODEBUG=netdns=go /path/to/mos\nWhereas it shows the described behavior when using the cgo resolver:\nGODEBUG=netdns=cgo /path/to/mos. ",
    "MrSurly": "This is on Ubuntu 16.10.\nPerfomed mos update\n```\n$ mos --version\nThe Mongoose OS command line tool\nVersion: 2017062120\nBuild ID: 20170621-202027/???\n$ mos init \nDownloading empty app...\nfatal error: unexpected signal during runtime execution\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x63 pc=0xc507bb46]\nruntime stack:\nruntime.throw(0x8686817, 0x2a)\n    /usr/local/go/src/runtime/panic.go:596 +0x7c\nruntime.sigpanic()\n    /usr/local/go/src/runtime/signal_unix.go:274 +0x28c\ngoroutine 40 [syscall, locked to thread]:\nruntime.cgocall(0x84d2520, 0xd7b246e4, 0x8685c17)\n    /usr/local/go/src/runtime/cgocall.go:131 +0xe1 fp=0xd7b246c8 sp=0xd7b246ac\nnet._C2func_getaddrinfo(0xc5c00510, 0x0, 0xd7b0cfe0, 0xd7af1f18, 0x0, 0x0, 0x0)\n    net/_obj/_cgo_gotypes.go:85 +0x57 fp=0xd7b246e4 sp=0xd7b246c8\nnet.cgoLookupIPCNAME.func2(0xc5c00510, 0x0, 0xd7b0cfe0, 0xd7af1f18, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/cgo_unix.go:151 +0x133 fp=0xd7b24710 sp=0xd7b246e4\nnet.cgoLookupIPCNAME(0xd7b0cf00, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/cgo_unix.go:151 +0x173 fp=0xd7b24790 sp=0xd7b24710\nnet.cgoIPLookup(0xd7b02f80, 0xd7b0cf00, 0x13)\n    /usr/local/go/src/net/cgo_unix.go:203 +0x2d fp=0xd7b247e0 sp=0xd7b24790\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_386.s:1629 +0x1 fp=0xd7b247e4 sp=0xd7b247e0\ncreated by net.cgoLookupIP\n    /usr/local/go/src/net/cgo_unix.go:213 +0x98\ngoroutine 1 [select]:\nnet/http.(Transport).getConn(0x894cf40, 0xd7b12860, 0x0, 0xd7b02b00, 0x5, 0xd7b0cf00, 0x17, 0x0, 0x0, 0x17)\n    /usr/local/go/src/net/http/transport.go:913 +0x90c\nnet/http.(Transport).RoundTrip(0x894cf40, 0xd77d3d00, 0x894cf40, 0x0, 0x0)\n    /usr/local/go/src/net/http/transport.go:378 +0x459\nnet/http.send(0xd77d3d00, 0x8952780, 0x894cf40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8292091, 0xd7b10758, ...)\n    /usr/local/go/src/net/http/client.go:249 +0x137\nnet/http.(Client).send(0x8c0bde0, 0xd77d3d00, 0x0, 0x0, 0x0, 0x0, 0x7f, 0x0, 0x8952320, 0xd7774030)\n    /usr/local/go/src/net/http/client.go:173 +0xc9\nnet/http.(Client).Do(0x8c0bde0, 0xd785c400, 0xd78e2640, 0x3c, 0x0)\n    /usr/local/go/src/net/http/client.go:595 +0x1fa\nnet/http.(*Client).Get(0x8c0bde0, 0xd78e2640, 0x3c, 0x3c, 0xd78e2640, 0xd785c300)\n    /usr/local/go/src/net/http/client.go:393 +0x83\nnet/http.Get(0xd78e2640, 0x3c, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/http/client.go:367 +0x33\nmain.initFW(0x8956440, 0xd77720cc, 0x0, 0x0, 0x0)\n    /go/src/cesanta.com/mos/initfw.go:37 +0x126\nmain.run(0xd77f3260, 0x8956440, 0xd77720cc, 0x0, 0x0, 0x0)\n    /go/src/cesanta.com/mos/main.go:125 +0x6c\nmain.main()\n    /go/src/cesanta.com/mos/main.go:211 +0x418\ngoroutine 17 [syscall, locked to thread]:\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_386.s:1629 +0x1\ngoroutine 5 [select]:\ncesanta.com/vendor/github.com/golang/glog.(*loggingT).flushDaemon(0x8c0c1e0)\n    /go/src/cesanta.com/vendor/github.com/golang/glog/glog.go:927 +0x11a\ncreated by cesanta.com/vendor/github.com/golang/glog.init.1\n    /go/src/cesanta.com/vendor/github.com/golang/glog/glog.go:441 +0x250\ngoroutine 37 [select]:\nnet/http.(persistConn).writeLoop(0xd78cc1e0)\n    /usr/local/go/src/net/http/transport.go:1704 +0x37f\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0x8ac\ngoroutine 38 [select]:\nnet.(Resolver).LookupIPAddr(0x8c21df2, 0x8956480, 0xd7b02f00, 0xd7b0cf00, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/lookup.go:165 +0x770\nnet.(Resolver).internetAddrList(0x8c21df2, 0x8956480, 0xd7b02f00, 0x8667228, 0x3, 0xd7b0cf00, 0x17, 0x0, 0x0, 0x8692b84, ...)\n    /usr/local/go/src/net/ipsock.go:245 +0x363\nnet.(Resolver).resolveAddrList(0x8c21df2, 0x8956480, 0xd7b02f00, 0x866785e, 0x4, 0x8667228, 0x3, 0xd7b0cf00, 0x17, 0x0, ...)\n    /usr/local/go/src/net/dial.go:188 +0x5d8\nnet.(Dialer).DialContext(0xd777a400, 0x8956440, 0xd77720cc, 0x8667228, 0x3, 0xd7b0cf00, 0x17, 0x0, 0x0, 0x0, ...)\n    /usr/local/go/src/net/dial.go:349 +0x1f6\nnet.(Dialer).DialContext-fm(0x8956440, 0xd77720cc, 0x8667228, 0x3, 0xd7b0cf00, 0x17, 0x8c21f44, 0x822c6f3, 0xd77720cc, 0x85e36a0)\n    /usr/local/go/src/net/http/transport.go:45 +0x50\nnet/http.(Transport).dial(0x894cf40, 0x8956440, 0xd77720cc, 0x8667228, 0x3, 0xd7b0cf00, 0x17, 0xd78cc1e0, 0xd7b1c000, 0x1000, ...)\n    /usr/local/go/src/net/http/transport.go:849 +0x17c\nnet/http.(Transport).dialConn(0x894cf40, 0x8956440, 0xd77720cc, 0x0, 0xd7b02b00, 0x5, 0xd7b0cf00, 0x17, 0x8295e90, 0xd78fa000, ...)\n    /usr/local/go/src/net/http/transport.go:1008 +0x174a\nnet/http.(Transport).getConn.func4(0x894cf40, 0x8956440, 0xd77720cc, 0xd7b0cf20, 0xd7b02cc0)\n    /usr/local/go/src/net/http/transport.go:908 +0x3e\ncreated by net/http.(*Transport).getConn\n    /usr/local/go/src/net/http/transport.go:910 +0x2b0\ngoroutine 36 [IO wait]:\nnet.runtime_pollWait(0xc46101d8, 0x72, 0xd7859000)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x4b\nnet.(pollDesc).wait(0xd78e2a7c, 0x72, 0x8953940, 0x8950f40)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x2b\nnet.(pollDesc).waitRead(0xd78e2a7c, 0xd7859000, 0x1000)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x29\nnet.(netFD).Read(0xd78e2a40, 0xd7859000, 0x1000, 0x1000, 0x0, 0x8953940, 0x8950f40)\n    /usr/local/go/src/net/fd_unix.go:250 +0x154\nnet.(conn).Read(0xd784c368, 0xd7859000, 0x1000, 0x1000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x56\ncrypto/tls.(block).readFromUntil(0xd784bba0, 0xc503d068, 0xd784c368, 0x5, 0xd784c368, 0xc)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x79\ncrypto/tls.(Conn).readRecord(0xd78fa000, 0x8692b17, 0xd78fa0a0, 0x808fb60)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xa4\ncrypto/tls.(Conn).Read(0xd78fa000, 0xd7b1c000, 0x1000, 0x1000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0xed\nnet/http.(persistConn).Read(0xd78cc1e0, 0xd7b1c000, 0x1000, 0x1000, 0x5, 0x808e1c0, 0xd7b02ac0)\n    /usr/local/go/src/net/http/transport.go:1316 +0x15d\nbufio.(Reader).fill(0xd7b10690)\n    /usr/local/go/src/bufio/bufio.go:97 +0xd5\nbufio.(Reader).Peek(0xd7b10690, 0x1, 0xd779edad, 0x1, 0x0, 0xd7b02a00, 0x0)\n    /usr/local/go/src/bufio/bufio.go:129 +0x51\nnet/http.(persistConn).readLoop(0xd78cc1e0)\n    /usr/local/go/src/net/http/transport.go:1474 +0x185\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1117 +0x88b\ngoroutine 39 [select]:\nnet.cgoLookupIP(0x8956480, 0xd7b02f00, 0xd7b0cf00, 0x13, 0x0, 0xd7848620, 0xd78fc028, 0x8951148, 0xd78ee0b0, 0xd784bb00)\n    /usr/local/go/src/net/cgo_unix.go:214 +0x252\nnet.(Resolver).lookupIP(0x8c21df2, 0x8956480, 0xd7b02f00, 0xd7b0cf00, 0x13, 0x0, 0x0, 0x0, 0x8c21f44, 0x0)\n    /usr/local/go/src/net/lookup_unix.go:69 +0xc8\nnet.(Resolver).(net.lookupIP)-fm(0x8956480, 0xd7b02f00, 0xd7b0cf00, 0x13, 0xd78fc000, 0x894bd20, 0x8957480, 0xd78562a0, 0x8957480)\n    /usr/local/go/src/net/lookup.go:156 +0x40\nnet.glob..func11(0x8956480, 0xd7b02f00, 0xd7af1f08, 0xd7b0cf00, 0x13, 0x0, 0x0, 0x303, 0xd784c378, 0x0)\n    /usr/local/go/src/net/hook.go:19 +0x3c\nnet.(Resolver).LookupIPAddr.func1(0xd78fa0a0, 0x8295d3e, 0x894cf40, 0x8956440)\n    /usr/local/go/src/net/lookup.go:162 +0x45\ninternal/singleflight.(Group).doCall(0x8c0bb10, 0xd7b108a0, 0xd7b0cf00, 0x13, 0xd7b0cf80)\n    /usr/local/go/src/internal/singleflight/singleflight.go:93 +0x21\ncreated by internal/singleflight.(*Group).DoChan\n    /usr/local/go/src/internal/singleflight/singleflight.go:86 +0x26d\n``. I ran this 26 times:rm -Rf *; mos init --arch esp32.  Of those 26 times, it worked 6 times (23%).  Given that it's failing innet.cgoLookupIP`\nQuick web search seems to indicate there may be problems with the cgo implementation of LookupIp.\nThe build instructions don't work for me:\n\nInstalled go 1.8.3\ncloned mongoose-os into $GOPATH/src/cesanta.com\ninstalled govendor\nperformed govendor sync in $GOPATH/src/cesanta.com\nperformed go build in $GOPATH/src/cesanta.com:\ncan't load package: package cesanta.com: no buildable Go source files in ~/workspaces/go/src/cesanta.com\n\n\ntried go build in $GOPATH/src/cesanta.com/mos\ncannot find package \"github.com/cesanta/ubjson\"\ncannot find package \"github.com/fatih/color\"\ncannot find package \"golang.org/x/net/trace\"\ncannot find package \"golang.org/x/net/websocket\"\ncannot find package \"gopkg.in/yaml.v2\"\n\n\n\nFixed this by:\ngo get github.com/cesanta/ubjson\ngo get github.com/fatih/color\ngo get golang.org/x/net/trace\ngo get gopkg.in/yaml.v2\ntried go build in $GOPATH/src/cesanta.com/mos:\n# cesanta.com/mos\n./flagutils.go:94: undefined: BuildId\n./flagutils.go:102: undefined: BuildId\n./main.go:190: undefined: Version\n./main.go:190: undefined: BuildId\n./ui.go:326: undefined: BuildId\n./update.go:53: undefined: BuildId\n./update.go:56: undefined: BuildId\nSeeing as I know nothing of golang, this is where I gave up trying to build; google searches were not fruitful.\n. I think it's probably been a long time since you've set up your dev environment on a fresh machine ...\nAlso needed:\n pygit\n go-bindata\n    * vet (tries to install vet, which is now part of go, so it fails)\n    * errcheck\n    * golint\n* go-bindata-assetfs\nAnother trip down the rabbit hole:\n```\n$ pwd \n$GOPATH/src/cesanta.com/mos\n$ go generate\nTraceback (most recent call last):\n  File \"../common/tools/fw_meta.py\", line 48, in \n    import git\nImportError: No module named git\nmain.go:1: running \"../common/tools/fw_meta.py\": exit status 1\n\nInstall pygit\n\n$ sudo pip install pygit\nCollecting pygit\n  Downloading pygit-0.1.tar.gz\nInstalling collected packages: pygit\n  Running setup.py install for pygit ... done\nSuccessfully installed pygit-0.1\n$ go generate\nmain.go:2: running \"go-bindata\": exec: \"go-bindata\": executable file not found in $PATH\n\ninstall go-bindata\n\n$ go get github.com/jteeuwen/go-bindata\n$ cd ../../github.com/jteeuwen/go-bindata/go-bindata/\n$make\nmake -C testdata\nmake[1]: Entering directory '/home/epoulsen/workspaces/go/src/github.com/jteeuwen/go-bindata/testdata'\ngo get github.com/kisielk/errcheck\ngo get golang.org/x/tools/cmd/vet\npackage golang.org/x/tools/cmd/vet: cannot find package \"golang.org/x/tools/cmd/vet\" in any of:\n    /usr/local/go/src/golang.org/x/tools/cmd/vet (from $GOROOT)\n    /home/epoulsen/workspaces/go/src/golang.org/x/tools/cmd/vet (from $GOPATH)\nMakefile:34: recipe for target 'vet' failed\nmake[1]:  [vet] Error 1\nmake[1]: Leaving directory '/home/epoulsen/workspaces/go/src/github.com/jteeuwen/go-bindata/testdata'\nMakefile:2: recipe for target 'all' failed\nmake:  [all] Error 2\n$ vim testdata/Makefile # Modifed \"vet\" target to be NOOP\n$ make \nmake -C testdata\nmake[1]: Entering directory '/home/epoulsen/workspaces/go/src/github.com/jteeuwen/go-bindata/testdata'\ngo get github.com/kisielk/errcheck\ngo get golang.org/x/tools/cmd/vet\necho NOVET\nNOVET\ngo get github.com/golang/lint/golint\ngo install ../...\n/home/epoulsen/workspaces/go/bin/go-bindata -nomemcopy             -o out/compress-nomemcopy.go in/...\nerrcheck out/compress-nomemcopy.go\nmake[1]: errcheck: Command not found\nMakefile:7: recipe for target 'out/compress-nomemcopy.checked' failed\nmake[1]:  [out/compress-nomemcopy.checked] Error 127\nmake[1]: Leaving directory '/home/epoulsen/workspaces/go/src/github.com/jteeuwen/go-bindata/testdata'\nMakefile:2: recipe for target 'all' failed\nmake:  [all] Error 2\n\ninstall errcheck\n\n$ go get github.com/kisielk/errcheck\n$ cd ../../kisielk/errcheck\n$ go build\n$ cd -\n$ cp ../../kisielk/errcheck/errcheck .\n$ export PATH=$PATH:.:..\n$ make\nmake -C testdata\nmake[1]: Entering directory '/home/epoulsen/workspaces/go/src/github.com/jteeuwen/go-bindata/testdata'\ngo get github.com/kisielk/errcheck\ngo get golang.org/x/tools/cmd/vet\necho NOVET\nNOVET\ngo get github.com/golang/lint/golint\nerrcheck out/compress-nomemcopy.go\ngo tool vet --all out/compress-nomemcopy.go\ngo tool vet --shadow out/compress-nomemcopy.go\ngolint out/compress-nomemcopy.go\nmake[1]: golint: Command not found\nMakefile:7: recipe for target 'out/compress-nomemcopy.checked' failed\nmake[1]:  [out/compress-nomemcopy.checked] Error 127\nmake[1]: Leaving directory '/home/epoulsen/workspaces/go/src/github.com/jteeuwen/go-bindata/testdata'\nMakefile:2: recipe for target 'all' failed\nmake:  [all] Error 2\n\ninstall golint\n\n$ go get github.com/golang/lint\n$ cd ../../golang/lint/golint/\n$ go build\n$ cd -\n$ cp ../../golang/lint/golint/golint .\n$ make\n\nSuccess!\n$ cd go-bindata\n$ go build\n$ cd ../../../../cesanta.com/mos\n$ cp ../../github.com/jteeuwen/go-bindata/go-bindata/go-bindata .\n$ go generate\ngo generate\nmain.go:3: running \"go-bindata-assetfs\": exec: \"go-bindata-assetfs\": executable file not found in $PATH\n\ninstall go-bindata-assetfs\n\n$ go get github.com/elazarl/go-bindata-assetfs/...\n$ cd ../../github.com/elazarl/go-bindata-assetfs/go-bindata-assetfs\n$ go build\n$ cd -\n$ cp ../../github.com/elazarl/go-bindata-assetfs/go-bindata-assetfs/go-bindata-assetfs .\n\nFinally, it builds\n\n$ go generate\n$ go build\n\nLets try running\n\n$ ./mos\nmos flag redefined: log_dir\npanic: mos flag redefined: log_dir\ngoroutine 1 [running]:\nflag.(FlagSet).Var(0xc4200800c0, 0xffbf00, 0xc420084f80, 0xadfbdc, 0x7, 0xafd9c7, 0x2f)\n    /usr/local/go/src/flag/flag.go:793 +0x420\nflag.(FlagSet).StringVar(0xc4200800c0, 0xc420084f80, 0xadfbdc, 0x7, 0x0, 0x0, 0xafd9c7, 0x2f)\n    /usr/local/go/src/flag/flag.go:696 +0x8b\nflag.(*FlagSet).String(0xc4200800c0, 0xadfbdc, 0x7, 0x0, 0x0, 0xafd9c7, 0x2f, 0xc420084f70)\n    /usr/local/go/src/flag/flag.go:709 +0x90\nflag.String(0xadfbdc, 0x7, 0x0, 0x0, 0xafd9c7, 0x2f, 0xc42008a400)\n    /usr/local/go/src/flag/flag.go:716 +0x69\ncesanta.com/vendor/github.com/golang/glog.init()\n    /home/epoulsen/workspaces/go/src/cesanta.com/vendor/github.com/golang/glog/glog_file.go:41 +0x14a\ncesanta.com/common/go/mgrpc/codec.init()\n    /home/epoulsen/workspaces/go/src/cesanta.com/common/go/mgrpc/codec/websocket.go:127 +0x87\ncesanta.com/common/go/mgrpc.init()\n    /home/epoulsen/workspaces/go/src/cesanta.com/common/go/mgrpc/transport_string.go:17 +0x61\ncesanta.com/fw/defs/atca.init()\n    /home/epoulsen/workspaces/go/src/cesanta.com/fw/defs/atca/gen.go:5 +0x58\nmain.init()\n    /home/epoulsen/workspaces/go/src/cesanta.com/mos/wifi.go:26 +0xa3\n```. @dimonomid \nThank you for the updated instructions.  I might have time to try this tomorrow on a fresh machine.  Otherwise, I'm out-of-town for a week, and I can try it after I return.\n. @dimonomid \nBuilding MOS from scratch:\nA few issues, installing on a clean vagrant box running 16.10:\nvagrant@vagrant:~/workspaces/go/src/cesanta.com/mos$ go generate\nmain.go:2: running \"go-bindata\": exec: \"go-bindata\": executable file not found in $PATH\nI did follow the installation instructions (that state it will install the CLI executable) from the go-bindata repo -- didn't help.\nRunning mos init --arch esp32 on a clean 16.10 box:\nUsing vagrant + Virtualbox and a fresh boxcutter/ubuntu1610 image\n```\nvagrant@vagrant:~/workspaces/mongooseos-test$ mos init --arch esp32\nDownloading empty app...\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x8 pc=0x84aa42e]\ngoroutine 1 [running]:\nmain.initFW(0x893d7e0, 0xd771408c, 0x0, 0x0, 0x0)\n    /go/src/cesanta.com/mos/initfw.go:38 +0x12e\nmain.run(0xd7808480, 0x893d7e0, 0xd771408c, 0x0, 0x0, 0x0)\n    /go/src/cesanta.com/mos/main.go:125 +0x6c\nmain.main()\n    /go/src/cesanta.com/mos/main.go:215 +0x470\nvagrant@vagrant:~/workspaces/mongooseos-test$\n``\n. ### Runningmos init --arch esp32` on a clean 16.04 box:\ntl;dr: Looks like original problem, but does not produce any artifacts.\n``\nvagrant init ubuntu/xenial64\nAVagrantfilehas been placed in this directory. You are now\nready tovagrant upyour first virtual environment! Please read\nthe comments in the Vagrantfile as well as documentation onvagrantup.com` for more information on using Vagrant.\nepoulsen@carambola ~/workspaces/vagrant/ubuntu-16.04 $ vagrant up\n< much removed> \nepoulsen@carambola ~/workspaces/vagrant/ubuntu-16.04 $ vagrant ssh\nWelcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-83-generic x86_64)\n\nDocumentation:  https://help.ubuntu.com\nManagement:     https://landscape.canonical.com\nSupport:        https://ubuntu.com/advantage\n\nGet cloud support with Ubuntu Advantage Cloud Guest:\n    http://www.ubuntu.com/business/services/cloud\n0 packages can be updated.\n0 updates are security updates.\nubuntu@ubuntu-xenial:~$ curl -fsSL https://mongoose-os.com/downloads/mos/install.sh | /bin/bash\nDownloading https://mongoose-os.com/downloads/mos/linux/mos ...\n################################################################## 100.0%\nInstalling into /home/ubuntu/.mos/bin/mos ...\nAdding /home/ubuntu/.mos/bin to your PATH in /home/ubuntu/.bashrc\nSUCCESS: /home/ubuntu/.mos/bin/mos is installed.\nRun '/home/ubuntu/.mos/bin/mos --help' to see all available commands.\nRun '/home/ubuntu/.mos/bin/mos' without arguments to start a simplified Web UI installer.\nubuntu@ubuntu-xenial:~/workspaces/mos-test$ . ~/.bashrc \nubuntu@ubuntu-xenial:~/workspaces/mos-test$ mos init --arch esp32\nDownloading empty app...\nUnpacking...\nSetting arch \"esp32\"...\nubuntu@ubuntu-xenial:~/workspaces/mos-test$ mos build\n<  removed >\nCC mgos_service_config.o\n  MKDIR /app/build/objs/fw_temp\n/tmp/fwbuild-volumes/users/test/mos-test/build_requests/build_req_311133621/local_libs/rpc-service-config/src/mgos_service_config.c:7:22: fatal error: mgos_rpc.h: No such file or directory\ncompilation terminated.\n/mongoose-os/fw/platforms/esp32/src/component.mk:129: recipe for target 'mgos_service_config.o' failed\nmake[1]: *** [mgos_service_config.o] Error 1\nmake[1]: Leaving directory '/app/build/objs/src'\n/opt/Espressif/esp-idf/make/project.mk:409: recipe for target 'src-build' failed\n< removed> \nAR libbt.a\nmake[1]: Leaving directory '/app/build/objs/bt'\nmake: Leaving directory '/app'\nError: exit status 2\nError: build failed\nubuntu@ubuntu-xenial:~/workspaces/mos-test$ mos update\nUp to date.\nubuntu@ubuntu-xenial:~/workspaces/mos-test$ \n```. Bump\nCan you reproduce these issues?. > W.r.t. the issues with pre-built binary, no, sorry, can't reproduce yet.\nNot even in a vagrant instance?. > Yes, not even in a vagrant instance; I replayed the same scenario you posted\nThe issue you tested is indeed fixed now, but there are others.  Let me summarize the various issues from this thread: \n\n[x] (1) issue with remote builds -- fixed (this is the original issue)\n[ ] (2) building of MOS from scratch -- instructions still incomplete.\n[ ] (3) 16.10 (yakkety in vagrant) issue with MOS crashing locally, when issuing mos init --arch esp32 -- still an issue.\n[ ] (4) 16.10 (yakkety, my desktop) issue with MOS crashing locally when issuing mos build\n\nIssue 2: \nI have go-bindata installed, but now this when issuing go generate:\nmain.go:3: running \"go-bindata-assetfs\": exec: \"go-bindata-assetfs\": executable file not found in $PATH\nIssue 3:\n```\n$ vagrant init ubuntu/yakkety64\n...\n$ vagrant up\n...\n$ vagrant ssh\n...\nubuntu@ubuntu-yakkety:~$ curl -fsSL https://mongoose-os.com/downloads/mos/install.sh | /bin/bash\nDownloading https://mongoose-os.com/downloads/mos-release/linux/mos ...\n################################################################## 100.0%\nInstalling into /home/ubuntu/.mos/bin/mos ...\nAdding /home/ubuntu/.mos/bin to your PATH in /home/ubuntu/.bashrc\nSUCCESS: /home/ubuntu/.mos/bin/mos is installed.\nRun '/home/ubuntu/.mos/bin/mos --help' to see all available commands.\nRun '/home/ubuntu/.mos/bin/mos' without arguments to start a simplified Web UI installer.\nubuntu@ubuntu-yakkety:~$ mkdir x\nubuntu@ubuntu-yakkety:~$ cd x\nubuntu@ubuntu-yakkety:~/x$ . ~/.bashrc \nubuntu@ubuntu-yakkety:~/x$ mos init --arch esp32\nDownloading empty app...\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x8 pc=0x84ac34e]\ngoroutine 1 [running]:\nmain.initFW(0x89417e0, 0xd770a07c, 0x0, 0x0, 0x0)\n    /go/src/cesanta.com/mos/initfw.go:39 +0x12e\nmain.run(0xd7834480, 0x89417e0, 0xd770a07c, 0x0, 0x0, 0x0)\n    /go/src/cesanta.com/mos/main.go:124 +0x6c\nmain.main()\n    /go/src/cesanta.com/mos/main.go:211 +0x418\n```\nIssue 4:\n(I completely deleted ~/.mos)\n```\n$ mos build\nfatal error: unexpected signal during runtime execution\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x63 pc=0xc50d1b46]\nruntime stack:\nruntime.throw(0x866ffe2, 0x2a)\n    /usr/local/go/src/runtime/panic.go:596 +0x7c\nruntime.sigpanic()\n    /usr/local/go/src/runtime/signal_unix.go:274 +0x28c\ngoroutine 36 [syscall, locked to thread]:\nruntime.cgocall(0x84c15e0, 0xd797c6e4, 0x866f3ba)\n    /usr/local/go/src/runtime/cgocall.go:131 +0xe1 fp=0xd797c6c8 sp=0xd797c6ac\nnet._C2func_getaddrinfo(0xc4600470, 0x0, 0xd78bd1c0, 0xd78a6758, 0x0, 0x0, 0x0)\n    net/_obj/_cgo_gotypes.go:85 +0x57 fp=0xd797c6e4 sp=0xd797c6c8\nnet.cgoLookupIPCNAME.func2(0xc4600470, 0x0, 0xd78bd1c0, 0xd78a6758, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/cgo_unix.go:151 +0x133 fp=0xd797c710 sp=0xd797c6e4\nnet.cgoLookupIPCNAME(0xd78bce00, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/cgo_unix.go:151 +0x173 fp=0xd797c790 sp=0xd797c710\nnet.cgoIPLookup(0xd78ac900, 0xd78bce00, 0xf)\n    /usr/local/go/src/net/cgo_unix.go:203 +0x2d fp=0xd797c7e0 sp=0xd797c790\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_386.s:1629 +0x1 fp=0xd797c7e4 sp=0xd797c7e0\ncreated by net.cgoLookupIP\n    /usr/local/go/src/net/cgo_unix.go:213 +0x98\ngoroutine 1 [runnable]:\nsyscall.Syscall(0xdc, 0x5, 0xd7998000, 0x1000, 0x50, 0x1000, 0x0)\n    /usr/local/go/src/syscall/asm_linux_386.s:20 +0x5\nsyscall.Getdents(0x5, 0xd7998000, 0x1000, 0x1000, 0x8600e20, 0x1, 0xd7996000)\n    /usr/local/go/src/syscall/zsyscall_linux_386.go:508 +0x45\nsyscall.ReadDirent(0x5, 0xd7998000, 0x1000, 0x1000, 0x0, 0x64, 0x8059fd1)\n    /usr/local/go/src/syscall/syscall_linux.go:761 +0x39\nos.(File).readdirnames(0xd7992000, 0xffffffff, 0x4, 0x85da2c0, 0x8bf78e0, 0x85d6840, 0x85b0320)\n    /usr/local/go/src/os/dir_unix.go:66 +0x148\nos.(File).Readdirnames(0xd7992000, 0xffffffff, 0x808e870, 0xd78c5990, 0xd78c5998, 0x8, 0x85d6840)\n    /usr/local/go/src/os/dir.go:45 +0x2d\nos.(File).readdir(0xd7992000, 0xffffffff, 0x0, 0x0, 0xd7992000, 0x0, 0x0)\n    /usr/local/go/src/os/dir_unix.go:23 +0x50\nos.(File).Readdir(0xd7992000, 0xffffffff, 0xd7992000, 0x0, 0x0, 0x0, 0x0)\n    /usr/local/go/src/os/dir.go:26 +0x2d\nio/ioutil.ReadDir(0xd77db9e0, 0x25, 0x800001ed, 0x0, 0x0, 0xd79192a0, 0x0)\n    /usr/local/go/src/io/ioutil/ioutil.go:98 +0x55\ncesanta.com/common/go/ourio.CopyDir(0xd77db9e0, 0x25, 0xd77dba10, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0)\n    /go/src/cesanta.com/common/go/ourio/copy.go:112 +0x2a0\ncesanta.com/common/go/ourio.CopyDir(0xd77db500, 0x22, 0xd77db530, 0x2d, 0x0, 0x0, 0x0, 0x0, 0x8bf78e0)\n    /go/src/cesanta.com/common/go/ourio/copy.go:131 +0x5ae\nmain.buildRemote(0xd78cd990, 0x0, 0x0)\n    /go/src/cesanta.com/mos/build.go:1024 +0x14d\nmain.doBuild(0x89417e0, 0xd77d00cc, 0xd78cd990, 0x0, 0x867bd18)\n    /go/src/cesanta.com/mos/build.go:228 +0x9d7\nmain.buildHandler(0x89417e0, 0xd77d00cc, 0x0, 0x0, 0x0)\n    /go/src/cesanta.com/mos/build.go:181 +0x8b\nmain.run(0xd77db4a0, 0x89417e0, 0xd77d00cc, 0x0, 0x0, 0x0)\n    /go/src/cesanta.com/mos/main.go:124 +0x6c\nmain.main()\n    /go/src/cesanta.com/mos/main.go:211 +0x418\ngoroutine 17 [syscall, locked to thread]:\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_386.s:1629 +0x1\ngoroutine 5 [select]:\ncesanta.com/vendor/github.com/golang/glog.(*loggingT).flushDaemon(0x8bf73e0)\n    /go/src/cesanta.com/vendor/github.com/golang/glog/glog.go:927 +0x11a\ncreated by cesanta.com/vendor/github.com/golang/glog.init.1\n    /go/src/cesanta.com/vendor/github.com/golang/glog/glog.go:441 +0x250\ngoroutine 9 [select]:\nnet/http.(Transport).getConn(0x8937ee0, 0xd78aa900, 0x0, 0xd78ac5c0, 0x5, 0xd78bce00, 0x13, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/http/transport.go:913 +0x90c\nnet/http.(Transport).RoundTrip(0x8937ee0, 0xd7830380, 0x8937ee0, 0x0, 0x0)\n    /usr/local/go/src/net/http/transport.go:378 +0x459\nnet/http.send(0xd7830380, 0x893d6e0, 0x8937ee0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd78bcce0, 0x0, ...)\n    /usr/local/go/src/net/http/client.go:249 +0x137\nnet/http.(Client).send(0x8bf6f80, 0xd7830380, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x80831c9, 0x0)\n    /usr/local/go/src/net/http/client.go:173 +0xc9\nnet/http.(Client).Do(0x8bf6f80, 0xd7830380, 0xd78ac5c0, 0x3a, 0x0)\n    /usr/local/go/src/net/http/client.go:595 +0x1fa\nnet/http.(*Client).Get(0x8bf6f80, 0xd78ac5c0, 0x3a, 0x25, 0x86588a1, 0xc)\n    /usr/local/go/src/net/http/client.go:393 +0x83\nnet/http.Get(0xd78ac5c0, 0x3a, 0x8654397, 0x7, 0xd78ac5c0)\n    /usr/local/go/src/net/http/client.go:367 +0x33\nmain.getServerMosVersion(0x8654397, 0x7, 0x0, 0x0, 0x0)\n    /go/src/cesanta.com/mos/update.go:49 +0x73\nmain.doBuild.func1(0xd7908fc0)\n    /go/src/cesanta.com/mos/build.go:195 +0x2d\ncreated by main.doBuild\n    /go/src/cesanta.com/mos/build.go:197 +0xae0\ngoroutine 34 [select]:\nnet.(Resolver).LookupIPAddr(0x8c0cff3, 0x8941820, 0xd78ac880, 0xd78bce00, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/lookup.go:165 +0x770\nnet.(Resolver).internetAddrList(0x8c0cff3, 0x8941820, 0xd78ac880, 0x8650940, 0x3, 0xd78bce00, 0x13, 0x0, 0x0, 0x867c340, ...)\n    /usr/local/go/src/net/ipsock.go:245 +0x363\nnet.(Resolver).resolveAddrList(0x8c0cff3, 0x8941820, 0xd78ac880, 0x8650f7a, 0x4, 0x8650940, 0x3, 0xd78bce00, 0x13, 0x0, ...)\n    /usr/local/go/src/net/dial.go:188 +0x5d8\nnet.(Dialer).DialContext(0xd77d8400, 0x89417e0, 0xd77d00cc, 0x8650940, 0x3, 0xd78bce00, 0x13, 0x0, 0x0, 0x0, ...)\n    /usr/local/go/src/net/dial.go:349 +0x1f6\nnet.(Dialer).DialContext-fm(0x89417e0, 0xd77d00cc, 0x8650940, 0x3, 0xd78bce00, 0x13, 0x8c0d138, 0x822c763, 0xd77d00cc, 0x85d0440)\n    /usr/local/go/src/net/http/transport.go:45 +0x50\nnet/http.(Transport).dial(0x8937ee0, 0x89417e0, 0xd77d00cc, 0x8650940, 0x3, 0xd78bce00, 0x13, 0xd77f2780, 0xc7583258, 0x0, ...)\n    /usr/local/go/src/net/http/transport.go:849 +0x17c\nnet/http.(Transport).dialConn(0x8937ee0, 0x89417e0, 0xd77d00cc, 0x0, 0xd78ac5c0, 0x5, 0xd78bce00, 0x13, 0x84b30fe, 0x8665e6e, ...)\n    /usr/local/go/src/net/http/transport.go:1008 +0x174a\nnet/http.(Transport).getConn.func4(0x8937ee0, 0x89417e0, 0xd77d00cc, 0xd78bce20, 0xd78ac640)\n    /usr/local/go/src/net/http/transport.go:908 +0x3e\ncreated by net/http.(*Transport).getConn\n    /usr/local/go/src/net/http/transport.go:910 +0x2b0\ngoroutine 35 [select]:\nnet.cgoLookupIP(0x8941820, 0xd78ac880, 0xd78bce00, 0xf, 0x32, 0x3a, 0xd78ac5c0, 0xd78bcd00, 0x3a, 0x32)\n    /usr/local/go/src/net/cgo_unix.go:214 +0x252\nnet.(Resolver).lookupIP(0x8c0cff3, 0x8941820, 0xd78ac880, 0xd78bce00, 0xf, 0x0, 0x8083169, 0x0, 0xd77f173c, 0x2)\n    /usr/local/go/src/net/lookup_unix.go:69 +0xc8\nnet.(Resolver).(net.lookupIP)-fm(0x8941820, 0xd78ac880, 0xd78bce00, 0xf, 0xd78ac5c0, 0x3a, 0x0, 0x0, 0xd7830380)\n    /usr/local/go/src/net/lookup.go:156 +0x40\nnet.glob..func11(0x8941820, 0xd78ac880, 0xd78a6728, 0xd78bce00, 0xf, 0x25, 0x86588a1, 0xc, 0x84b1bd3, 0xd78ac5c0)\n    /usr/local/go/src/net/hook.go:19 +0x3c\nnet.(Resolver).LookupIPAddr.func1(0x3a, 0x8295dae, 0x8937ee0, 0x89417e0)\n    /usr/local/go/src/net/lookup.go:162 +0x45\ninternal/singleflight.(Group).doCall(0x8bf6cb0, 0xd78a8ba0, 0xd78bce00, 0xf, 0xd78bcec0)\n    /usr/local/go/src/internal/singleflight/singleflight.go:93 +0x21\ncreated by internal/singleflight.(*Group).DoChan\n    /usr/local/go/src/internal/singleflight/singleflight.go:86 +0x26d\n```\n. Looking good.  Closing this -- will look into MOS install on my box.. ",
    "cristiand391": "Did you include the mqtt library in mos.yml file?. ",
    "pherig": "Thank you @cristiand391.\nI have been developing my project for a while and I didn't notice the update that add the libs in the mos.yml file.\n. If someone face this issue in the future, use the following snippets:\nmos.yml:\nlibs:\n- origin: https://github.com/mongoose-os-libs/mqtt\nyour code:\n#include \"mqtt.h\". Problem solved. We found an incorrect capacitor in the flashing circuit.. ",
    "hazardandy": "Perfect, sounds like an even better solution.. ",
    "tectiv3": "I started working on it:\napp https://github.com/tectiv3/lwip-enc28j60-app\nand driver lib: https://github.com/tectiv3/lwip-enc28j60\nIt is a work in progress as currently I can't initiate connections from mongoose.. ",
    "chall3ng3r": "Thanks, will download the latest build to test it out.. @cpq sorry about late reply. Yes can do it, been busy with client projects recently. Will be free for a bit soon and will try it out and see how it goes. . ",
    "StasiukDanylo": "Does not it matter to anyone?\n. ",
    "valtersitz": "Hi guys,\nReopening this because this is flash size - will not fit related.\nI am working with ESP WROOM-02. Followed the previous fix with \n\nbuild_vars:\n  FLASH_SIZE: 2097152\n\nas this is a 2MB flash.\nBut while flashing I get \n\nRunning flasher @ 460800...\n  Flasher is running\nFlash size: 2097152, params: 0x0230 (dio,16m,40m)    // see here the 16m parameter\nDeduping...\n   619088 @ 0x8000 -> 368640\n   131072 @ 0xdb000 -> 0\n     4096 @ 0x1fb000 -> 0\nWriting...\n     4096 @ 0x0\n     4096 @ 0x7000\n   368640 @ 0x8000\n     4096 @ 0x1fc000\nWrote 380928 bytes in 8.38 seconds (355.19 KBit/sec)\nVerifying...\n     2656 @ 0x0\n     4096 @ 0x7000\n   619088 @ 0x8000\n   131072 @ 0xdb000\n     4096 @ 0x1fb000\n      128 @ 0x1fc000\nBooting firmware...\nAll done!\n\n\nand after booting: \n\n[Jul 19 20:26:42.808] rBoot v1.2.1 - richardaburton@gmail.com\n[Jul 19 20:26:42.809] Flash Size:   16 Mbit\n[Jul 19 20:26:42.809] Flash Mode:   DIO\n[Jul 19 20:26:42.809] Flash Speed:  40 MHz\n[Jul 19 20:26:42.809] rBoot Option: Big flash\n[Jul 19 20:26:42.810] \n[Jul 19 20:26:42.810] Writing default boot config @ 0x7000.\n[Jul 19 20:26:42.840] Rom 0 is bad.\n[Jul 19 20:26:42.924] Booting rom 1 (0x200000).\n[Jul 19 20:26:42.924] \n[Jul 19 20:26:42.924]rBoot v1.2.1 - richardaburton@gmail.com\n[Jul 19 20:26:42.924] Flash Size:   16 Mbit\n[Jul 19 20:26:42.924] Flash Mode:   DIO\n[Jul 19 20:26:42.925] Flash Speed:  40 MHz\n[Jul 19 20:26:42.925] rBoot Option: Big flash\n[Jul 19 20:26:42.925] \n[Jul 19 20:26:42.988] Booting rom 1 (0x200000).\n[Jul 19 20:26:42.988] \n[Jul 19 20:26:42.988] rBoot v1.2.1 - richardaburton@gmail.com\n[Jul 19 20:26:43.009] Flash Size:   16 Mbit\n[Jul 19 20:26:43.009] Flash Mode:   DIO\n[Jul 19 20:26:43.009] Flash Speed:  40 MHz\n[Jul 19 20:26:43.009] rBoot Option: Big flash\n[Jul 19 20:26:43.009] \n[Jul 19 20:26:43.073] Booting rom 1 (0x200000).\n[Jul 19 20:26:43.073] \n\nto the infinite and beyond... \nI went looking into the bootloader, rBoot, found the Big Flash part but I could not find any way to modify the \n\nRom 0 is bad\n\nWould you have any fix for this? Did I miss something?\n. ",
    "riless": "Just read the error message.\nmjs_exec_file does not take generate_jsc as a third parameter since this commit https://github.com/cesanta/mjs/commit/88b387b60595f57db0fb6b6b94b682dac666865d#diff-dfd500dfec3905a96aff2852116f6fe1L3720  (June 6)\nYou should replace this line by:\nmjs_err_t err = mjs_exec_file(mjs, \"init.js\", NULL);\nmjs_set_generate_jsc(mjs, 1);\nI would recommend you to set the release of Mongoose-os you're using to not get those issues anymore.\n. ",
    "Sparow199": "@riless thank you for the correction, i modified the issue in order to simply it and focus on the main problem, because it doesn't work  with whole projects not only mines.. @cpq thank you for reply, i'll try the build process next Monday  and i'll keep you informed about issue.\n I'll contribute with my library soon.. @riless @cpq , it works with last MOS update.\nTHANK YOU . @cpq , the library is on this repository, i need to get access to https://github.com/mongoose-os-libs to publish the library.\nThank you.. ",
    "helscream": "Thanks for clearly stating the message.\nI am a bit confused. I am using same certificates used in mqtt-spy. may be I am not uploading them to FS properly or some thing\nI used Windows command line to download the certificates using \n\nmos put ca.crt\nmos put esp32.crt\nmos put esp32.key\n. Yeah, some thing is wrong with my certificates \ud83d\ude04 . \n",
    "zendes": "I've gotten another interesting error message:\nheap integrity broken: block links don't match: 3473 -> 3604, but 3604 -> 3328\ni've attached two logs with free ram (timer at 100ms, just doing print Sys.free_ram())\nerr1.txt\nerr2.txt\n. looks like it's indeed free RAM. if i comment out all load statements besides sys, timer, onewire and dallas_temp it does succesfully connect.  \nlooks like the initial mqtt connect takes about 11k of ram. do you have any tips on how to load libraries after that? if i add load statements later in the code, they don't seem to work (i get an error about not being able to read the file)\n[Jul 12 17:10:33.307] Free RAM: 26676\n[Jul 12 17:10:33.380] mqtt_global_connect  MQTT connecting to a2ysalqhatzmmu.iot.us-west-2.amazonaws.com:8883\n[Jul 12 17:10:33.416] Free RAM: 20332\n[Jul 12 17:10:40.288] mongoose_poll        New heap free LWM: 1552\n[Jul 12 17:10:40.325] Free RAM: 10192\n[Jul 12 17:10:40.729] pm open,type:2 0\n[Jul 12 17:10:40.826] Free RAM: 9688\n[Jul 12 17:10:44.744] mgos_mqtt_ev         MQTT Connect (1)\n[Jul 12 17:10:44.808] mgos_mqtt_ev         MQTT CONNACK 0\n[Jul 12 17:10:44.826] Free RAM: 23560\nthis is init.js:\nload('api_sys.js');\nload('api_timer.js');\nload('api_arduino_onewire.js');\nload('api_arduino_dallas_temp.js');\nTimer.set(100, true, function() {\n  print('Free RAM:', Sys.free_ram());\n}, null);\nand mos.yml bits\nfilesystem:\n  - fs\nconfig_schema:\n  - [\"debug.level\", 2]\n  - [\"device.id\", \"esp8266_temp_??????\"]\n  - [\"mqtt.enable\", true]\n  - [\"mqtt.server\", \"a2ysalqhatzmmu.iot.us-west-2.amazonaws.com:8883\"]\n  - [\"mqtt.ssl_ca_cert\", \"ca-verisign-g5.crt.pem\"]\n  - [\"mqtt.ssl_cert\", \"aws-iot-85cd6d83d5.crt.pem\"]\n  - [\"mqtt.ssl_key\", \"aws-iot-85cd6d83d5.key.pem\"]\n  - [\"mqtt.ssl_cipher_suites\", \"TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256\"]\n  - [\"wifi.ap.enable\", false]\n  - [\"wifi.sta.enable\", true]\n  - [\"wifi.sta.pass\", \"xxxxxxxx\"]\n  - [\"wifi.sta.ssid\", \"Old New York\"]\nlibs:\n  - origin: https://github.com/mongoose-os-libs/mjs\n  - origin: https://github.com/mongoose-os-libs/mqtt\n  - origin: https://github.com/mongoose-os-libs/arduino-onewire\n  - origin: https://github.com/mongoose-os-libs/arduino-dallas-temperature\n. Will do. I'll get back to you in about a day with the results.. looks like that fixed it. i can now load all libs at the top, and publish a ds18b20 reading to aws iot without the device rebooting or crashing. thnx!. ",
    "nccchirag": "Same issue\nEnvironment\nOS - Win x64 \nDev board - Geekworm | Easy Kit ESP32-B1 | ESP-WROOM-32 (4M)\nUSB UART - WCH CH340C\nCommand\nmos flash esp32 --port COM7 --esp-baud-rate 115200 --esp-flash-params=dio,32m,40m -v 4 --logtostderr\nError\nError: failed to run flasher: failed to talk to flasher: flasher did not respond\nCan we use esptool to flash mongoose ?\nNote: flashing works fine with Arduino 1.8.3. I tried both on windows and linux (Ubuntu 16.04 x64), no luck still. The driver seems to be working fine as I can flash via Arduino and also through esptool (on windows) \nI wonder if there is a manual way of flashing mongoose OS via esptool ( @cpq kindly guide )\nNote: Driver works on linux too ( basic Tx/Rx works on minicom ). solved it - used another USB - UART\nProblem is with the USB-UART IC CH340C in the Dev board - Geekworm | Easy Kit ESP32-B1\n@ca0abinary - you may close the issue. ",
    "ca0abinary": "As an update, I think Windows (or the serial driver used by windows) might be the factor here. When I connected this to my mac it was up and running in less than a minute. The serial bridge on my device claims to be a Silicon Labs CP210x but the chip itself looks to have no laser engraving, so it might be a fake.. ",
    "manikawnth-abg": "Just an update for the windows users\nI installed the drivers as mentioned USB-to-UART drivers from below site and everything worked as expected\n\nInstall the drivers\nReboot the PC\nFlash with esp32 and set the wifi\n\nhttps://www.silabs.com/products/mcu/Pages/USBtoUARTBridgeVCPDrivers.aspx\n. ",
    "rgriffin12": "Would be great to get deep sleep/wake functionality on the CC3200 arch as well.  . ",
    "left4taco": "@jocodeinc Does C has such deepsleep API available?. ",
    "phush0": "it is fixed please close. ",
    "cchamikara": "I have the same issue \nFetching https://mongoose-os.com/downloads/mos-esp8266-1.10.zip...\nError: https://mongoose-os.com/downloads/mos-esp8266-1.10.zip: failed to fetch: 404 Not Found. then I tried the GUI with mac OS and it also returns an error in the log\nE0727 20:14:11.128120   11104 ui.go:467] Calling: FS.ListExt\nServer Error: {\"error\":\"Device is not connected\"}\nLoaded https://mongoose-os.com/downloads/api.json\nE0727 20:14:20.715404   11104 reconnect_wrapper.go:93] [reconnectWrapperCodec to /dev/cu.HBS-730-SerialPort; connect in 2.00s] connection error: open /dev/cu.HBS-730-SerialPort: resource busy\nopen /dev/cu.HBS-730-SerialPort: resource busy\n/Users/mos/go/src/cesanta.com/common/go/mgrpc/codec/serial.go:76: \n/Users/mos/go/src/cesanta.com/common/go/mgrpc/mgrpc.go:154: \n/Users/mos/go/src/cesanta.com/common/go/mgrpc/mgrpc.go:201: . ",
    "aderbas": "The file name is wrong, mos-esp8266-1.10.zip the correct is esp8266-1.10.zip\nsee: https://mongoose-os.com/downloads/esp8266-1.10.zip\nBut that does not solve our problem.. ",
    "daniele-salvagni": "I can confirm it is now fixed, thanks!. ",
    "rajibgupta": "How did you make it work ? @daniele-salvagni . ",
    "grand87": "It is very important API for future Arduino libraries wrapping - for example Ultrasonic sensor requires it\nSee below link:\nhttps://github.com/JRodrigoTech/Ultrasonic-HC-SR04. ",
    "redhoodie": "\ud83d\udc4d Very keen for this to get done; for now using Arduino. ",
    "jameselsey": "I'm also keen for this feature, without pulseIn I can't see a way to read echo data from a HC-SR04 ultrasonic sensor. ",
    "EMS-TH": "Was an issue with the board itself.. ",
    "ztittle": "Good find! This is now working for me on iOS devices. I had to include the following header:\n```\nextern \"C\" {\ninclude \"user_interface.h\"\n}\n```\nWithout calling wifi_softap_set_dhcps_offer_option(OFFER_ROUTER, &on), iOS immediately determines there is no internet access. Thus, any dns never occur and the AP http server had to be accessed by its IP address. This is not desirable when implementing the web based configuration of the esp8266. \nI see that Captive Portals for device onboarding is on the development roadmap, so I sure hope this is addressed.. ",
    "wormyrocks": "This and softAP redirect are also crucial to my project. As far as I can tell neither of the existing captive portal examples for the esp32 will even redirect websites that use https.. hi,\nI implemented this for my own use. anyone who wants to use/improve my code is welcome:\nC code:\nvoid save_config(const struct mgos_conf_entry *e, void *newval){\n  struct sys_config *cfg = get_cfg();\n  int pass = 0;\n  char *vp = (((char *) cfg) + e->offset);\n  if (e->type == CONF_TYPE_STRING){\n    char **sp = (char **) vp;\n    if (*sp != NULL) free(*sp);\n    *sp = (char *) malloc(strlen(newval)+1);\n    strcpy(*sp, newval);\n    pass = 1;\n  }else if (e->type == CONF_TYPE_INT || e->type == CONF_TYPE_BOOL){\n    int *ip = (int *) vp;\n    *ip = strtol(newval, NULL, 10);\n    pass = 1;\n  }\n  if (pass == 1){\n    char *err = NULL;\n    save_cfg(cfg, &err);\n    free(err);\n  }\n}\nJS code:\nlet Cfg_ = {\n  setcfg: ffi('void save_config(void *, void *)'),\n  set: function(path, setting){\n    let entry = Cfg._find(path, Cfg._desc());\n    if (entry === null) return undefined;\n    if (setting !== Cfg.get(path)){\n      this.setcfg(entry, setting);\n    }\n  },\n};. ",
    "luseengithub": "Looks like crash happens after saving the configuration:\n`\nint disable_wifi_ap (void) {\nstruct sys_config cfg = get_cfg();\n  cfg->wifi.ap.enable = false;\n  char err = NULL;\n  save_cfg(cfg, &err); / Writes conf9.json /\n  printf(\"Saving configuration: %s\\n\", err ? err : \"no error\");\n  free(err);\n  return 0;\n}\n`\nWhat is wrong in this code?. ",
    "elbertwang": "tested, work with AWS China region. Hi, @cpq \nI already signed the CLA before pull request \ud83d\ude04 . Finally, I find the issue. need update aws go sdk to latest to support China region.\ngovendor fetch github.com/aws/aws-sdk-go/aws\n govendor fetch github.com/aws/aws-sdk-go/aws/awserr\n govendor fetch github.com/aws/aws-sdk-go/aws/awsutil\n govendor fetch github.com/aws/aws-sdk-go/aws/client\n govendor fetch github.com/aws/aws-sdk-go/aws/client/metadata\n govendor fetch github.com/aws/aws-sdk-go/aws/corehandlers\n govendor fetch github.com/aws/aws-sdk-go/aws/credentials\n govendor fetch github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds\n govendor fetch github.com/aws/aws-sdk-go/aws/credentials/endpointcreds\n govendor fetch github.com/aws/aws-sdk-go/aws/credentials/stscreds\n govendor fetch github.com/aws/aws-sdk-go/aws/defaults\n govendor fetch github.com/aws/aws-sdk-go/aws/ec2metadata\n govendor fetch github.com/aws/aws-sdk-go/aws/endpoints\n govendor fetch github.com/aws/aws-sdk-go/aws/request\n govendor fetch github.com/aws/aws-sdk-go/aws/session\n govendor fetch github.com/aws/aws-sdk-go/aws/signer/v4\n govendor fetch github.com/aws/aws-sdk-go/private/protocol\n govendor fetch github.com/aws/aws-sdk-go/private/protocol/json/jsonutil\n govendor fetch github.com/aws/aws-sdk-go/private/protocol/jsonrpc\n govendor fetch github.com/aws/aws-sdk-go/private/protocol/query\n govendor fetch github.com/aws/aws-sdk-go/private/protocol/query/queryutil\n govendor fetch github.com/aws/aws-sdk-go/private/protocol/rest\n govendor fetch github.com/aws/aws-sdk-go/private/protocol/restjson\n govendor fetch github.com/aws/aws-sdk-go/private/protocol/xml/xmlutil\n govendor fetch github.com/aws/aws-sdk-go/service/iot\n govendor fetch github.com/aws/aws-sdk-go/service/govendor. file pull request https://github.com/cesanta/mongoose-os/pull/341. ",
    "calkoe": "For all out there with the same problem, i've found the following answer:\nESP8266 has so little available RAM, and WPA-ENT uses so much of it, that there's hardly any left for the app anyway.\ni'd say, for WPA-ENT support, go to ESP32, where it doesn't crash and which has enough RAM to actually do useful stuff while using WPA-ENT auth.\nThanks to rojer on forum.mongoose-os.com. Hi wangwangwang1998,\nThe size of the filesystem is limited to round about 200kb. That means that you have to make sure that the size of the /fs folder in your Mongoose-OS Project is smaller than 200kb (note that some config files + mjs files already use 132 of your Space).\n+1 \nI've got the same Problem.. i need more space for HTTP files in the fs. Is there any way to increase the fs size ? i've tried mos build --arch esp8266 --build-cmd-extra FLASH_SIZE = 4M --build-cmd-extra FS_SIZE = 1M already but that didn't work... ",
    "pratham2003": "Can you please check if this is relevant to the issue?\nhttps://github.com/shirou/gopsutil/issues/339. ",
    "benjamind": "I'm having the same issue, here's the output from the mos tool under windows 10 with verbose 4: https://gist.github.com/benjamind/5d7d574be8df9be870fcfdf12a532dec. doesn't appear to work, when I run that on ubuntu 16.04 I just end up with 1.15 again. I installed mos through the apt repository.\nIn further investigation it appears this is just a serial issue. The application is still running, but the console output is no longer being parsed correctly at 115200 baud. I've tried a bunch of other baud rates to no effect, perhaps some other setting is not being setup correctly in 1.15?. Baud rate 76923 actually works: https://www.esp32.com/viewtopic.php?t=2043\nThis is using a Sparkfun ESP32 Thing. Yes 1.15 introduced this issue. If i manually flash the precompiled 1.14 binary then the output is correct and everything is fine. If I flash 1.15 I get garbage on the console until running with --baud-rate 76923.\nIt feels to me like 1.15 is not setting the baud rate correctly after startup somehow.\nOne extra snippet of info, if I connect with the standard baud rate I see garbage on the serial console, but if I then hit reset I briefly see the expected output for a reset and then it returns to garbage again.. ",
    "OPatrick": "Thanks for your interest :-)\nNo other mos.exe listed by windows task manager.\nUpgrading the tool recently did not make things better (mos-esp32-1.15 nor iot-kit-esp32-1.15)\nAttached error log error.txt\nBut...\nI've seen this related subject:\nhttps://forum.mongoose-os.com/discussion/1579/unable-to-finish-flashing-device-setup-with-webui-esp32\nI did it \"mos flash mos-esp32-1.14\" and it kind of worked! (the flashing LED in the init.js example was not flashing, but I could see the device Logs in the IDE\nTried to re-flash with ide via \"Device Setup\" window but failed again with the above error message.\nTrying \"mos flash mos-esp32-1.15\" is just making the command line no more responding.. Hello,\nWell, I'm using this board: TOGO\nwhich is a clone of this one: HelTec\nBut also on this board with same results: Weemos\nWhat is strange is that I never encountered any connection problem under Arduino IDE nor Platform IO...\nFlashing is always a breeze...\nBecause I cannot use Mongoose-OS yet, I continue my work on Platform IO. And is goes well so far.\nBut I am desperate to use MOS ;-)\nI also tried different ports on the PC (laptop ASUS ROG with windows 10 + 16 go RAM)\nThanks for your help.. ",
    "jafetmorales": "I am having the same problem with an ESP32 kit. I think it might be that RPC is not configured in the chip.. It was not the RPC, in my case. I just needed to press the Boot and the EN buttons in my board and leave them pressed both until the flashing program that I am using attempted to connect to the ESP32 ROM for the 4th time. The flashing program said that everything was downloaded successfully, and the device happily replied \"hello\".. You might need to go to your .mos directory and delete the adc library folder from there, if you added it and tried to delete it before.. I remember having that same error as well, and I concluded (although not 100% sure at this point) that it was a temporary problem with their remote building service (you're uploading the source and building it in their servers). Their servers may have had a docker error and sent the error message back to you. I just tried myself building right now and it worked, so it might be working again. However, if the problem persists, I would try to build locally in your machine. For that you would need to download docker and then execute:\nmos build --arch esp32 --local --verbose\nGood luck.. @dimonomid so you mean that in the latest version of the Web UI you don't need to manually go and delete the file? If am not mistaken, you are saying that before the dependency (i.e., api_wifi.js) was being stored in .mos, but not in the app's directory, and now it is stored in the app's directory. Is that what you are saying?. ",
    "aavestan": "@ruslanvaliullin \nI check it in Wemos D1 mini and read ADC.read(0) :\nIt seems ADC(0) pin must be connect to VCC and it works fine.\nThanx. ",
    "bguban": "\nI've flashed the example to my esp8266 and went to it's web page. But there is only list of files instead of configuration page. I checked git log and found that index page was removed.. Thanks. ",
    "jobidon": "well, installing a different version of go-bindata resolved this issue. The package community/go-bindata uses go v1.6.2 while aur/go-bindata-git uses go v1.9.\nThe solution is simply to use the AUR version.\n$ go-bindata --version\ngo-bindata 3.1.0 (Go runtime go1.9).\nCopyright (c) 2010-2013, Jim Teeuwen.\nClosing: this was not an issue with Mongoose-os. ",
    "guywithaview": "I am also seeing this issue!. ",
    "j0ker77": "I had the same requirement to use a GPIO of my ESP8266 in opendrain mode with MJS.\nI extended main.c by my own my_mgos_gpio_set_mode and ffied it in my_gpio,js.\nI also wrote a version for ESP32 but did not test yet, let me know if you are interested in it.\n```\n// main.c\n// -------------------------------- \n// extend gpio mode by opendrain for esp8266                    \n// -------------------------------- \n//\n// mgos_gpio_set_mode copied from https://github.com/cesanta/mongoose-os/blob/master/fw/platforms/esp8266/src/esp_gpio.c\n// opendrain mode copied from nodemcu's https://github.com/nodemcu/nodemcu-firmware/blob/master/app/platform/platform.c\n//\ninclude \"fw/platforms/esp8266/src/esp_gpio.h\"\nifdef RTOS_SDK\ninclude \ninclude \nelse\ninclude \nendif\ninclude \"mgos_bitbang.h\"\ninclude \"mgos_gpio.h\"\ninclude \"mgos_gpio_hal.h\"\ninclude \"common/platforms/esp8266/esp_missing_includes.h\"\ninclude \"common/cs_dbg.h\"\ninclude \"esp_periph.h\"\nvoid gpio16_output_conf(void);\nvoid gpio16_input_conf(void);\nenum my_mgos_gpio_mode {\n  MY_MGOS_GPIO_MODE_INPUT = 0, / input mode /\n  MY_MGOS_GPIO_MODE_OUTPUT = 1, / output mode /\n  MY_MGOS_GPIO_MODE_OPENDRAIN = 2 / opendrain mode /\n};\nIRAM bool my_mgos_gpio_set_mode(int pin, enum my_mgos_gpio_mode mode) {\n  if (pin == 16) {\n    if (mode == MY_MGOS_GPIO_MODE_INPUT) {\n      gpio16_input_conf();\n    } else {\n      gpio16_output_conf();\n    }\n    return true;\n  }\nif (pin >= 6 && pin <= 11) {\n    LOG(LL_ERROR, (\"GPIO%d is used by SPI flash, don't use it\", pin));\n    /\n     * Alright, so you're here to investigate what's up with this error. So,\n     * GPIO6-11 are used for SPI flash and messing with them causes crashes.\n     * In theory, if flash is configured for double or single mode, GPIO9 and\n     * GPIO10 can be reclaimed. And /CS could be hard-wired to 0 if flash is\n     * the only device, reclaiming GPIO11. However, on all the modules currently\n     * in existence they are connected to the flash chip's pins, which, when not\n     * used for quad i/o, are usually /HOLD and /WP. Thus, using them will still\n     * crash most ESP8266 modules, but in a different way.\n     * So really, just stay away from GPIO6-11 if you can help it.\n     * If you are sure you know what you're doing, copy the code below.\n     /\n    return false;\n  }\nconst struct gpio_info *gi = get_gpio_info(pin);\n  if (gi == NULL) return false;\nswitch (mode) {\n    case MY_MGOS_GPIO_MODE_INPUT:\n      PIN_FUNC_SELECT(gi->periph, gi->func);\n      GPIO_REG_WRITE(GPIO_ENABLE_W1TC_ADDRESS, BIT(pin));\n      break;\n    case MY_MGOS_GPIO_MODE_OUTPUT:\n      PIN_FUNC_SELECT(gi->periph, gi->func);\n      GPIO_REG_WRITE(GPIO_ENABLE_W1TS_ADDRESS, BIT(pin));\n      gpio_pin_intr_state_set(GPIO_ID_PIN(pin), GPIO_PIN_INTR_DISABLE);\n      GPIO_REG_WRITE(GPIO_STATUS_W1TC_ADDRESS, BIT(pin));\n      / Pin driver -> direct drive, pad driver -> open drain. /\n      GPIO_REG_WRITE(GPIO_PIN_ADDR(GPIO_ID_PIN(pin)),\n                     GPIO_REG_READ(GPIO_PIN_ADDR(GPIO_ID_PIN(pin))) &\n                         (~GPIO_PIN_PAD_DRIVER_SET(GPIO_PAD_DRIVER_DISABLE)));\n      break;\n    case MY_MGOS_GPIO_MODE_OPENDRAIN:\n      PIN_FUNC_SELECT(gi->periph, gi->func);\n      GPIO_REG_WRITE(GPIO_ENABLE_W1TS_ADDRESS, BIT(pin));\n      gpio_pin_intr_state_set(GPIO_ID_PIN(pin), GPIO_PIN_INTR_DISABLE);\n      GPIO_REG_WRITE(GPIO_STATUS_W1TC_ADDRESS, BIT(pin));\n      / Pin driver -> direct drive, pad driver -> open drain. /\n      GPIO_REG_WRITE(GPIO_PIN_ADDR(GPIO_ID_PIN(pin)),\n                     GPIO_REG_READ(GPIO_PIN_ADDR(GPIO_ID_PIN(pin))) |\n                         GPIO_PIN_PAD_DRIVER_SET(GPIO_PAD_DRIVER_ENABLE));   // copied from nodemcu \"platform.c\"\n      break;\n    default:\n      return false;\n  }\nreturn true;\n}\n```\n```\n//----------------------------------------------------------------------\n// my_gpio.js\nload('api_gpio.js');\n// extend set_mode with OPENDRAIN\nlet myGPIO = {\n    set_mode: ffi('int my_mgos_gpio_set_mode(int,int)'),\n    MODE_INPUT: 0,\n    MODE_OUTPUT: 1,\n    MODE_OPENDRAIN: 2\n  };\n```\nUsage:\nload('my_gpio.js');\nlet pin = 14;\nmyGPIO.set_mode(pin, myGPIO.MODE_OPENDRAIN);\nGPIO.set_pull(pin, GPIO.PULL_NONE);\nGPIO.write(pin, 0);  // or 1\n. ",
    "nliviu": "I needed it for ESP8266 and did this:\n```\nmgos_gpio_set_mode(_pinOut, MGOS_GPIO_MODE_OUTPUT);\nif CS_PLATFORM == CS_P_ESP8266\n    GPIO_REG_WRITE(GPIO_PIN_ADDR(GPIO_ID_PIN(_pinOut)), GPIO_REG_READ(GPIO_PIN_ADDR(GPIO_ID_PIN(_pinOut))) | (GPIO_PIN_PAD_DRIVER_SET(GPIO_PAD_DRIVER_ENABLE)));\n\nendif\n```\n. @rojer Thank you!. After changing the line let led = Cfg.get('pins.led'); to let led = 5;//Cfg.get('pins.led'); and rebooting the board, the led blinks as expected.\nI don't have any problems using Mongoose OS with Lolin32, Lolin32-pro and MH-ET Esp32 Minikit.. It looks like a docker issue. Is D: shared with docker as /d?. Add --build-var BOARD:DISCO-F746NG to the build command, or add\nbuild_vars:\n  BOARD: DISCO-F746NG\nin mos.yml\nIt built ok for me.\nPS. I don't have a STM32 board. My command line was mos build --local --platform stm32 --build-var BOARD:DISCO-F746NG using mos latest.. Ahhh, missed that. I removed logging too early :(\nCorrection:\n/* 1547596800 is Wed Jan 16 00:00:00 UTC 2019 */\n    if(ev_data->delta > 1547596800){\n      if(ti->next_invocation < 1547596800){\n        ti->next_invocation += ev_data->delta;\n      }\n    }else{\n      ti->next_invocation += ev_data->delta;\n    }\nTest:\n[Jan 16 14:36:31.476] mgos_time_change_cb  delta=1547642187.376304\n[Jan 16 14:36:31.486] mgos_time_change_cb  ti=0x3ffbba08 - next_invocation=1547642204.321447 (was 1547642204.321447, diff 0.000000)\n[Jan 16 14:36:31.497] mgos_time_change_cb  ti=0x3ffc7e98 - next_invocation=1547642194.179967 (was 6.803663, diff 1547642187.376304)\n[Jan 16 14:36:31.508] mgos_time_change_cb  ti=0x3ffc84f4 - next_invocation=1547642198.799379 (was 11.423075, diff 1547642187.376304)\n[Jan 16 14:36:37.949] timer1_cb            timer1_cb - timer1 interval=11000, id=0x3ffc84f4\n[Jan 16 14:36:43.473] timer2_cb            timer2_cb - timer2 interval=12000, id=0x3ffbba08\n...\n[Jan 16 14:38:41.703] mgos_sntp_query      SNTP query to time.google.com\n[Jan 16 14:38:41.796] mgos_sntp_ev         SNTP reply from 216.239.35.0: time 1547642322.390497, local 1547642322.640506, delta -0.250009\n[Jan 16 14:38:41.801] sntp_time_change_cb  delta=-0.262503\n[Jan 16 14:38:41.805] mgos_time_change_cb  delta=-0.262503\n[Jan 16 14:38:41.815] mgos_time_change_cb  ti=0x3ffbd84c - next_invocation=1547642436.106490 (was 1547642436.368993, diff -0.262503)\n[Jan 16 14:38:41.826] mgos_time_change_cb  ti=0x3ffbba08 - next_invocation=1547642324.058944 (was 1547642324.321447, diff -0.262503)\n[Jan 16 14:38:41.836] mgos_time_change_cb  ti=0x3ffc84f4 - next_invocation=1547642330.536876 (was 1547642330.799379, diff -0.262503)\n[Jan 16 14:38:43.473] timer2_cb            timer2_cb - timer2 interval=12000, id=0x3ffbba08\n[Jan 16 14:38:49.951] timer1_cb            timer1_cb - timer1 interval=11000, id=0x3ffc84f4\n[Jan 16 14:38:55.473] timer2_cb            timer2_cb - timer2 interval=12000, id=0x3ffbba08\nwas is ti->next_invocation before the if . Great ideea to implement a monotonic clock.. ",
    "conniercarey": "In order to do a low power deep sleep on the CC3200, code from the ti middleware would need to be incorporated into the OS. I have tried to bring over the middleware just locally to my project but still run into problems which I believe could possibly be due to the initialization sequence of the device itself and/or the way it is configured.   In seeking support from ti in an attempt to get this functionality to work, they told me to use their example verbatim but that is not possible when using Mongoose OS.  Also, it doesn't make sense for me to carry the middleware in my image.  It would be beneficial to have this functionality incorporated into the Mongoose OS support of the CC3200.  Without it, low power deep sleep functionality that the chipset has is not available to users of the CC3200 and this functionality is extremely beneficial.  Please consider adding it to the CC3200 device.  Thank you!. Okay, I'm not sure how you can say you support a product such as CC3200 and not include all the functionality.  Your solution does not include the middleware needed to perform a Low Power Deep Sleep.   The Mongoose OS solution does not provide a solution to perform low power deep sleep which is a crucial function to all users.  So are you no longer supporting CC3200?  What you have now is all that you will support?  Even though there are pieces and functionality missing?  When you list that Mongoose OS supports the CC3200 chipset make sure you also list the functionality you don't provide so that user can make an educated decision on whether or not to use your OS.  . ",
    "tssh2005": "Any news in this issue? Does someone know a workaround?. ",
    "pherris": "Few updates from the gitter forum...\n1) if mgos_sntp_query fails to fetch the time - we would never be able to authenticate against AWS - from my console above it's not clear if the first attempt failed or not. It almost reads as if the NTP failure was reported after the AWS connection was attempted:\n[Sep 26 21:36:19.742] mgos_sntp_query      SNTP query to pool.ntp.org\n[Sep 26 21:36:19.742] mongoose_poll        New heap free LWM: 21016\n[Sep 26 21:36:23.196] mongoose_poll        New heap free LWM: 20840\n[Sep 26 21:36:28.297] mg_resolve_async_eh  Failed to resolve 'XXXXXXXXX.iot.us-east-1.amazonaws.com', server 192.168.188.5\n[Sep 26 21:36:28.309] mgos_mqtt_ev         MQTT Connect (0)\n[Sep 26 21:36:28.310] mgos_mqtt_ev         MQTT Disconnect\n[Sep 26 21:36:28.315] mqtt_global_reconnec MQTT connecting after 2047 ms\n[Sep 26 21:36:29.275] mg_resolve_async_eh  Failed to resolve 'pool.ntp.org', server 192.168.188.5\n[Sep 26 21:36:30.367] mgos_mqtt_global_con MQTT connecting to XXXXXXXXX.iot.us-east-1.amazonaws.com:8883\n[Sep 26 21:36:32.659] mgos_sntp_query      SNTP query to pool.ntp.org\n[Sep 26 21:36:38.112] station: d0:c5:f3:2b:b8:0e leave, AID = 1\n2) it was suggested to force use of Google's name servers with mos config-set wifi.sta.nameserver=8.8.8.8 but I'm not sure that the wifi network is the problem because the device does occasionally report data to AWS. For example, after leaving the device last night at 9:45 pm it eventually connected for approximately eight minutes around 5:30 am. NOTE: when it did connect, it sent the same data three times. It also looks like the device had crashed and rebooted about 1.5 hours before sending the data.. I added a range extender to solve my immediate issues but I think there is an underlying problem here with the poor network performance I described above. \nI don't think you should make the call to AWS if the call to pool.ntp.org hasn't returned or fails. I'm not sure why UART would die in this case -but something you guys can look into. I cannot reproduce any longer due to the improved network signal strength so please feel free to close when you deem appropriate.. ",
    "PKGeorgiev": "I know that. The idea is to skip initial need for cables to deploy Mongoose OS to sonoff devices.. Thanks. \nSonoff devices come pre-loaded with proprietary firmware by Itead. Their firmware support OTA but officially it cannot be used by the end users. \nSo the only \"official\" way to flash newer sonoff device is the classic one: disassemble it, use soldering iron, solder a wire go GPIO0 etc. Not very hard, but is time consuming.\nRecently one guy had discovered the internals of Itead's OTA mechanism: http://blog.nanl.de/2017/05/sonota-flashing-itead-sonoff-devices-via-original-ota-mechanism\nThen another programmer made a Python script that simulates Itead's OTA servers making it possible to re-flash sonoff devices locally without taking them apart (i.e. taking advantage of the original OTA mechanism): https://github.com/mirko/SonOTA\nThis library is used to load firmware based on Tasmota:\n https://github.com/mirko/SonOTA/tree/master/static. But my firmware knowledge is very limited.\nThere are a few steps described in SonOTA's readme.\nMy question is that - will it be possible to use SonOTA (or similar script, eventually written by you) to re-flash sonoff devices with Mongoose OS firmware.  This will allow quick and easy way of initial \"Mongoose-ing\" any sonoff device via existing OTA mechanism. And of course this will definitely increase Mongoose OS' popularity :)\n. ",
    "vpetrache": "Awesome, thanks so much!. ",
    "operationflash": "I'm having the same problem for getting the adc library for a ESP32. I removed the adc library from the .mos directory and this didn't help.\nAfter that I manually added the adc library folder to .mos and and tried to build it with command line:\nsudo mos build --arch esp32\nConnecting to https://mongoose.cloud, user test\nUploading sources (1911 bytes)\nError: error response: 400: container exited with 1 status code\n. Hey thanks for the responses. I had flashed the ESP32 with the GCP image, which had no ADC included. But the normal firmware version had the ADC build in, so I flashed this firmware and added the necessary GCP code. \n@jafetmorales building it locally would have been a good option.\n@farooqhasny forgot to tell that I was using Linux.. ",
    "farooqhasny": "manually deleting the app from C:\\Users\\user.mos\\apps-1.19\\ did fix this problem for me . i think you need to put ESP32 in flash mode by grounding GPIO0 and booting up .. ",
    "guglielmino": "I didn't know about this opportunity, it's fine even if writing JSON in a C string is a bit error prone.. Download timeout was my first suspect, then I tried to run a web server on my PC connected to the same network. I implemented a small Python web server to be able to monitor the download. Download finished, I'm quite sure also because I tried to stop the web server after I saw that all data was dispatched. Stopped the web server I saw the device running the \"processing\" stage for some time and then giving up for timeout. . ",
    "gojimmypi": "You have MQTT (mostly) working? (well, at least code complete compiling) cool. I was wondering where to find mgos_mqtt.h included here:\nhttps://github.com/cesanta/mongoose-os/blob/master/fw/examples/c_mqtt/src/main.c\nThe file does not seem to be anywhere in this repository and https://github.com/mongoose-os/ is private.\nThanks. ",
    "moosilauke18": "@gojimmypi here is the mgos_mqtt.h file: https://github.com/mongoose-os-libs/mqtt/blob/master/include/mgos_mqtt.h. ",
    "shantanuthatte": "Have the same question with esp32. iot-kit-espxxxx-1.18 seems to have an empty init.js. Where as mos-espxxxx-1.18 has a example init.js with blink and MQTT. What are the use-cases for this each?. I do think the same, the iot-kit is a lighter version. Running the same sample code in mos v/s iot-kit results in higher memory usage for the mos version. I also do notice the device getting slightly warmer on mos.  Will try to get more data on this.. ",
    "digitalcraft": "a bump on this?\nnot sure why it takes so long to get an answer on this one.. ",
    "gotfredsen": "another bump.... After a bit of comparing I noticed that the mos- is a more \"capable\" version than the iot-kit-. 2 things I noticed is that:\n1. the mos- version have I2C RPC calls, the iot-kit- doesn't have that, and\n1. the device config in the mos- version is having way more options.\nMy guess is that the iot-kit- version is a limited version of mos- to save memory and/or RTOS overhead.\nBare in mind - I am guessing here, I would still like an official answer.... ",
    "xlfe": "I'm having this same issue. ",
    "precobos": "Me too, after a reset connects without problems. ",
    "jptalledo10": "Thanks. It worked . ",
    "hqawasmi": "@cpq , above solution didn`t work for me , I am using Mac , and I am really struggled with the above error , appreciate if you can guide me to another troubleshooting . its been solved by using Version 1.19.6 , mos update 1.19.6 . @jbrownkramer, kindly run the command below and test to build again \nmos update 1.19.6 \nPlease let us know results . ",
    "jbrownkramer": "@cpq , I agree with @hqawasmi, I can't build on a mac, and mos update latest doesn't work.  I am trying to follow these instructions : https://aws.amazon.com/blogs/apn/aws-iot-on-mongoose-os-part-1/. @hqawasmi I did \"mos update latest\".  Would you expect that to update me to a version of mos that would build the example?. @cpq My apologies for not adhering to your standards.  Please understand that I really appreciate the effort that you and other have gone to in order to make this available to the public.  I am just trying to help and to get help in return.\n1) My goal is to flash an ESP8266 with the c_mqtt example from this repository using a Mac.\n2) I followed the instructions at https://aws.amazon.com/blogs/apn/aws-iot-on-mongoose-os-part-1/ exactly.  In particular, I cloned this repo, went to the directory fw/examples/c_mqtt and issued the command \"mos build --arch esp8266\".  This failed (I will paste some of the output below).  Following the suggestion on this thread, I tried \"mos update latest\".  This was yesterday (2/18/2018).  It failed in the same way.\n3) I expected the build to not fail.  In particular, I expected the creation of build/fw.zip, which did not happen.\n4) Here is the last few lines of the output (which I believe matches the logs):\n/fwbuild-volumes/latest/apps/c_mqtt/esp8266/build_contexts/build_ctx_080118145/src/main.c:85:54: error: left-hand operand of comma expression has no effect [-Werror=unused-value]\nLOG(LL_INFO, (\"got command: [%.*s]\", (int) s->len, s->p));\n^\n/fwbuild-volumes/latest/apps/c_mqtt/esp8266/build_contexts/build_ctx_080118145/src/main.c:88:5: error: implicit declaration of function 'json_scanf' [-Werror=implicit-function-declaration]\nif (json_scanf(s->p, s->len, \"{gpio: {pin: %d, state: %d}}\", &pin,\n^\n/fwbuild-volumes/latest/apps/c_mqtt/esp8266/build_contexts/build_ctx_080118145/src/main.c:81:23: error: unused variable 't' [-Werror=unused-variable]\nstruct json_token t = JSON_INVALID_TOKEN;\n^\ncc1: all warnings being treated as errors\n/mongoose-os/fw/platforms/esp8266/Makefile.build:472: recipe for target '/fwbuild-volumes/latest/apps/c_mqtt/esp8266/build_contexts/build_ctx_080118145/build/objs/main.c.o' failed\nmake: *** [/fwbuild-volumes/latest/apps/c_mqtt/esp8266/build_contexts/build_ctx_080118145/build/objs/main.c.o] Error 1\nmake: *** Waiting for unfinished jobs....\nmake: *** wait: No child processes. Stop.\nError: exit status 2\nError: build failed\n. I tried \"mos update 1.19.6\", and that worked!  Thanks for your help.. ",
    "keptdream": "Same problem:\nConnecting to https://mongoose.cloud, user test\n[Oct 31 23:55:32.530] Uploading sources (1314 bytes)\nBuild failed:error response: 400: no such image. ",
    "chaostheory88": "It's the same for me, try to subscribe a channel like test/foobar/+, '+' character is not handled, the mqtt topic parser is not finished as far as I know, check here https://github.com/cesanta/mongoose-os/blob/master/mongoose/mongoose.c#L10436. ",
    "sabareesan007": "Thank you @chaostheory88 for the elaboration.\n. ",
    "techparva": "mos-esp8266-1M-1.19.6 is for devices with less memory e.g. ESP-01 or Sonoff Basic.. ",
    "kalsolio": "After MQTT.pub run, 200-300b free ram lost.. ",
    "marvinroger": "Actually, I found out that the libraries are indeed cloned, but inside the CWD of the mos.exe (and not, as I would have thought, in .mos/libs/).  But trying to remote build logs this:\nError: reading manifest \"/fwbuild-volumes/1.19.6/apps/shutters/esp8266/build_contexts/build_ctx_653396624/libs/mylib/mos.yml\": open /fwbuild-volumes/1.19.6/apps/shutters/esp8266/build_contexts/build_ctx_653396624/libs/mylib/mos.yml: no such file or directory. @Mnark indeed, the lib now appears under the \"My Libs\" section. \nBut I still have the Error: reading manifest \"/fwbuild-volumes/1.19.6/apps/shutters/esp8266/build_contexts/build_ctx_653396624/libs/mylib/mos.yml\": open /fwbuild-volumes/1.19.6/apps/shutters/esp8266/build_contexts/build_ctx_653396624/libs/mylib/mos.yml: no such file or directory\nDo you build locally or with the remote server?. It does work locally.. @dimonomid still, we have to invoke mos.exe --libs-dir .mos\\modules-1.19.6, otherwise, even locally, it does not work. That's a bug, right?. Alright, makes sense. But then, what\u2019s the purpose of the \u201cMy libs\u201d tab if\nthere\u2019s no global lib directory?\nLe mer. 13 d\u00e9c. 2017 \u00e0 16:22, Dmitry Frank notifications@github.com a\n\u00e9crit :\n\nAh sorry, actually no, the default location for libs has recently changed\nto deps under the app's dir. So, if you have an app located at\n/path/to/myapp, then mos build --local will look for libs in\n/path/to/myapp/deps (and clone them if they don't exist).\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/cesanta/mongoose-os/issues/381#issuecomment-351422998,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA8eNZx_4harKC_0N6q6gi8hbuXXe4J5ks5s_-uqgaJpZM4QYewc\n.\n. \n",
    "Mnark": "I have the same issue, but a workaround is to specify the directory using the --libs-dir option when you start mos.exe.\ne.g.\nC:> mos.exe --libs-dir .mos\\modules-1.19.6\n. ",
    "joeynoodlesfang": "solution was to add the http server lib to the config schema. zoinks. ",
    "sahilkhanna": "I'm sorry, I think I forgot to add some info.\nSo the issue occurs when you save and copy files from \"Projects\" tab to the device and NOT on the \"Device files\" tab. The webui tool confuses with the window's directory naming structure and does not consider \"fs\\init.js\" as a file called \"init.js\" in \"fs\" folder but rather treats the whole path \"fs\\init.js\" as a file. This essentially has to do with the backward slash issue in webUI side of things.\nFYI I tested this on \nVersion: 1.20.1\nBuild ID: 20171117-113830/1.20.1@d0c3a61b+\nOS: Windows 10\nBrowser: Chrome\nbut I think the issue still persists in the latest release of mos.exe.\nI was able to to edit the .exe file using a hexeditor to essentially replace \"\\\" with \"/\" which fixed my issue but its not an elegant fix.\n. The issue is not with the save, it's with the \"save, copy to device and reboot\"  button. Try that and then check your \"Device Files\" tab.\n\nFYI: I found this line of code in the exe file -\nhttps://github.com/cesanta/mongoose-os/blob/7ac5a9c8ce0ca3844cc02b4176ee78e7e48deba1/mos/web_root/page_code.html#L313\nand changed it to be \nvar fileName = $('#file-dropdown').val().replace(/^.*\\/, '');\nwhich works in Windows(may not work in other OS). ",
    "Ar00001": "Did You solve your questions?. ",
    "torfbolt": "Same problem here on Debian Linux with mos 1.24:\nFlashing to the Lolin32 Lite board fails for all settings and baud rates, usually with the same error @BluSpanner reported.\nIt works for the identical board with esptool @ 115200 baud. Also all Lolin32 Lite boards I have behave the same.. ",
    "Spiritdude": "Ubuntu 16.04 LTS here also with LOLIN32 Lite, mos flashing is unreliable for me, it fails with the same error message as mentioned, or it stalls without giving information how far it flashed, on additional attempts it eventually succeeds for me.. ... and a 2nd thought, File.*() would also access the SPIFFS fs operations more direct, right now they fail when filename contains '/' as they seem to test existence of a directory.. ",
    "sisao": "This worked for me: https://github.com/cesanta/mongoose-os/issues/408#issuecomment-369693237. ",
    "TesslaRay": "Did you find a solution?. ",
    "tefan57": "I had this same issue while trying to build using c, turns out you need to add\n\norigin: https://github.com/mongoose-os-libs/aws\n\nin libs.\nAdding this line removed that exact error.\nHope it helps!. ",
    "charles-d-burton": "This didn't work for me.. ",
    "tjm1": "I am getting the same error.  I see \"Adding this line removed that exact error.\"  what line was added and where was it added? I am confused.. Burt\nThis did not work for me. I get the same error Like Charles earlier.. mike, Burt. yes you are correct. It works for me when I reflash DUH!. I am a newbie to ESP8266 tools and this was a rookie mistake. Thanks for the help and on to the next challenge.. ",
    "Burt-Silverman": "Tim,\nLook at the mos.yml file in the top level of the example (c_mqtt directory). You will see origin lines under libs. Add the one that tefan57 mentions above.. Do not forget to reflash after rebuilding. It is easy to make this mistake.. ",
    "jcleve": "This worked for my ESP32 as well. Thanks everyone!. ",
    "chrisdowey": "Worked for me too, thanks!. ",
    "dawnstrider": "Resolved with version 1.25. ",
    "pimvanpelt": "After short discussion with @rojer I'll be using the same approach as the mos flasher:\nhttps://github.com/cesanta/mongoose-os/blob/255db7519a704ab8d0ce1728ccb9b7e99547f527/mos/flash/esp8266/esp8266.go#L40\nwhich is checking a few bits; we can READ_PERI_REG() them at runtime.\nUnless I'm mistaken, 0x3ff00050 and 0x3ff00058 contain the MAC address vendorid? Anyway, I'll noodle on this PR a bit further, and remove the #define / mos.yml approach.. PTAL\nOn an ESP8266 clean build w/ rpc-service-gpio and rpc-mqtt:\n$ mos --port mqtt://mqtt:1883/esp8266_052EE8 call GPIO.Read '{\"pin\":9}'\nError: remote error 400: error setting pin mode\n$ mos --port mqtt://mqtt:1883/esp8266_052EE8 call GPIO.Read '{\"pin\":10}'\nError: remote error 400: error setting pin mode\n$ mos --port mqtt://mqtt:1883/esp8266_052EE8 call GPIO.Read '{\"pin\":11}'\nError: remote error 400: error setting pin mode\nOn an ESP8285 with the same build:\n$ mos --port mqtt://mqttl:1883/esp8266_807F61 call GPIO.Read '{\"pin\":10}'\n{\n  \"value\": 1\n}\n$ mos --port mqtt://mqtt:1883/esp8266_807F61 call GPIO.Read '{\"pin\":9}'\n{\n  \"value\": 1\n}\n$ mos --port mqtt://mqtt:1883/esp8266_807F61 call GPIO.Read '{\"pin\":11}'\nError: remote error 400: error setting pin mode. I am unaware of ILI9163, but I have written a driver for ILI9341. My target language is C, but a community contributor has added mJS bindings and they are in use.\nThe bindings:\nhttps://github.com/mongoose-os-libs/ili9341-spi/blob/master/mjs_fs/api_ili9341_spi.js\nAn example application:\nhttps://github.com/mongoose-os-apps/example-m5stack-js\nI do not personally support javascript, unfortunately.. agreed with @tripflex that this question is out of place for Mongoose OS. It uses the GPIO mapping as defined by ESP8266 and ESP32 and CC32x0 and STM32 chips. How these are routed to pins in a breakout board, like the ones he mentioned, are a matter of the breakout board vendor, not Mongoose OS.\nBy means of an example for a popular ESP32:\nhttps://github.com/playelek/pinout-doit-32devkitv1/blob/master/pinoutDOIT32devkitv1.png\nthese diagrams show the relationship between ESP32 pinout and breakout board pins. You'll have to consult your hardware vendor for the correct mapping, not Mongoose OS.\n. In button_cb() the pin argument is that of the button, not of the LED. In\nmgos_gpio_toggle() you should use your define PREC_LED_GPIO.\nPlease note that the github issue tracker is not usually used for help\nprogramming apps. Please use the forum for that in the future.\nOn Mon, Jul 30, 2018 at 02:15 sp7577 notifications@github.com wrote:\n\ninclude \"mgos.h\"\ninclude \"mgos_gpio.h\"\ninclude \"mgos_wifi.h\"\ninclude \"mgos_gpio.h\"\ndefine PREC_LED_GPIO 2\ndefine BUTTON_GPIO 0\ndefine BUTTON_PULL MGOS_GPIO_PULL_UP\ndefine BUTTON_EDGE MGOS_GPIO_INT_EDGE_POS\nstatic void button_cb(int pin, void *arg) {\n  LOG(LL_INFO, (\"Click!\"));\n  mgos_gpio_toggle(pin);\n  (void) pin;\n  (void) arg;\n}\nenum mgos_app_init_result mgos_app_init(void) {\nmgos_gpio_set_mode(2, MGOS_GPIO_MODE_OUTPUT);\nmgos_gpio_set_button_handler(0, MGOS_GPIO_PULL_UP, MGOS_GPIO_INT_EDGE_POS,  50 / debounce_ms /, button_cb, NULL);\nreturn MGOS_APP_INIT_SUCCESS;\n}\nThis does not work- shows no error as well- can someone tellme what is\nwrong ?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/cesanta/mongoose-os/issues/439, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AIcZPfwDX4ROhnGfam-sWzZXi2BaoaREks5uLs6cgaJpZM4VmDYR\n.\n-- \nPim van Pelt pim@ipng.nl\nPBVP1-RIPE - http://www.ipng.nl/\n. If you're controlling fans, I recommend you use a PWM Fan Controller. I have this particular unit in a deployment, and it works just fine. You can set PWM speeds (both RPM and duty cycle) via I2C.\nThat sounds a lot more reliable than using bitbanging PWM from the MCU (and as a bonus, the chip will give you 5 channels).. Perhaps hold off on review/merging this. There are still some issues with generating artifacts (like json0.conf and a complete config schema). Will ping once I made more progress.. Ready to merge. PTAL @rojer \n. 5eb7cae needs a release of mgos/ubuntu-build:r2 as we're now linking in libcap, and I've made it a static executable for portabliity so users do not need to install libcap-dev Ubuntu package on their host.. ack - i'm  blown away that uint32_t isn't actually an unsigned 32 bit integer, but c'est la vie.\nThanks for integrating! I'll continue work on other parts of the HAL now.. Done.. Done.. Added.. Ack - done.. \n",
    "freedaun": "Curiously, the failing board appears (first) in the Mongoose homepage video:\nhttps://youtu.be/UnUQxAQoavs?t=12\nI don't have a 2nd board to duplicate the problem. . ",
    "christianmue1980a": "I have exactly the same issue. . Ok, seems like the solution is to not use the ffi-symbols anymore. . ",
    "lanslans": "Same issue here. I've done tons of searching on this, and can't figure it out. Suggestions?. ",
    "mebohac": "yes!  funny you asked.  just finished writing a blog about it today.  hope it helps!\nhttps://myventureintogcp.blogspot.com/. ",
    "WS2133": "gcloud components install beta\nyou can check the logs in AppData\\Roaming\\gcloud\\logs if it doesn't fix it \n. ",
    "mathias4github": "same issue with me, \"cloud components install beta\" does not help.. ",
    "ogajvoronsky": "I can confirm this behavior... I'm played with power, wifi settings, channels - no luck. It reconnecting every 3-5min. ",
    "honneygoyal": "On esp-32 this works fine but error occurs in esp8266 in station mode.. ",
    "pontius-g": "Same behaviour  with esp8266!\nFound a pseudo-fix with persistent ping from another host, it keeps connection stable.\nIt makes me feel, there is some \"unconfigurable power management\" problems.\n. diagnosed with another AP - problem gone.\nSo, my issue comes with a chinese Wifi \"specific beacon timers\", guess.. ",
    "Andresteve07": "Thank you for the rapid response. We'll examine the code then.. ",
    "Morlack": "Also note I have tried every baud rate, pulling GPIO0 and esp-flash params with QIO instead of DIO. . Sorry for the late reply, but it worked! \nJust my curiosity, why does this work, and other baud rates do not?. ",
    "ISTechSolutions": "I need the MAC address of the client (mobile phone in my case) not the server (ESP32).. ",
    "erikbjork": "File seems to resurrect when FS.List is called over UART:\n```\n$ mos --port ws://192.168.4.1/rpc call FS.List\n[\n  \"ca.pem\",\n  \"conf0.json\",\n  \"index.html\",\n  \"xx1234\"\n]\n$ mos --port ws://192.168.4.1/rpc call FS.Remove '{\"filename\":\"/xx1234\"}'\nnull\n$ curl -is http://192.168.4.1/xx1234\nHTTP/1.1 404 Not Found\nServer: Mongoose/6.11\nContent-Type: text/plain\nConnection: close\nContent-Length: 9\nNot Found\n$ mos --port ws://192.168.4.1/rpc call FS.List\n[\n  \"ca.pem\",\n  \"conf0.json\",\n  \"index.html\"\n]\n$ mos call FS.List\nUsing port /dev/ttyUSB0\n[\n  \"ca.pem\",\n  \"conf0.json\",\n  \"index.html\",\n  \"xx1234\"\n]\n$ curl -is http://192.168.4.1/xx1234\nHTTP/1.1 200 OK\nServer: Mongoose/6.11\nDate: Thu, 01 Jan 1970 00:00:13 GMT\nLast-Modified: Thu, 01 Jan 1970 00:00:00 GMT\nAccept-Ranges: bytes\nContent-Type: text/plain\nConnection: close\nContent-Length: 0\nEtag: \"0.0\"\n$ mos --port ws://192.168.4.1/rpc call FS.List\n[\n  \"ca.pem\",\n  \"conf0.json\",\n  \"index.html\",\n  \"xx1234\"\n]\n```. ",
    "stefan-girlich": "It now works with the freshly imported and modified demo-js code sample - thanks for clarifying! I think that previously I may have accidentally removed  line of code which defines the pin as output.. ",
    "close2": "Please add a static assert.. ",
    "AlessiaPileri": "Should I send OTA.Commit command explicitly? In past versions of the libs, send OTA.Update was enough to update the firmware.. ",
    "malotian": "hmm, sure thanks will try to, with my limited knowledge.\nOn Thu, May 17, 2018 at 1:33 PM, Sergey Lyubka notifications@github.com\nwrote:\n\nWe mostly use Mac and Linux.\nSince you're a Windows user, feel free to fix this issue on Windows and\ncontribute that to everybody else.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/cesanta/mongoose-os/issues/428#issuecomment-389780484,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AH5Bdh9XT0Cl65ZlwIpM50v-bH1eYfIVks5tzS65gaJpZM4UAtnE\n.\n. Yes is shared..\n\nOn Thu, 17 May 2018, 14:49 Liviu, notifications@github.com wrote:\n\nIt looks like a docker issue. Is D: shared with docker as /d?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/cesanta/mongoose-os/issues/428#issuecomment-389802198,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AH5BdhfMEqqcSt_rJes8xRWW_hoi-SMbks5tzUC5gaJpZM4UAtnE\n.\n. Thanks for updates, switched to linux. \n",
    "ricochet1k": "Please read more carefully. I said clicking on an API link on that page. That page works fine, but the links are broken. See below for the redirect.\n```\n$ curl -s -i https://mongoose-os.com/api/api_adc.js.html | head -15\nHTTP/1.1 302 Found\nServer: nginx/1.12.2\nDate: Thu, 31 May 2018 14:47:06 GMT\nContent-Type: text/plain; charset=utf-8\nContent-Length: 23\nConnection: keep-alive\nX-Powered-By: Express\nLocation: /\nVary: Accept\nFound. Redirecting to /\n```. ",
    "iomik": "Same issue here. I need to check onewire api docs. ",
    "paulolc": "It seems the api documentation is being done  inline in the api source code comments. Maybe it's a missing apidoc generation step somewhere in https://github.com/cesanta/mongoose-os-docs? Should this issue be raised in mongoose-os-docs instead?. ",
    "mamuesp": "Yeah, it's good to bring that in mind, because interrupts and MJS are not really friends these days ... ;-) . @cpq - We discussed that (I believe @rojer was into the discussion as well, if I remember correctly), and from your side came the question to post an issue so that you or @rojer will look after this problem as soon as possible (this was the promise then ...) ;-) - because it's not an excpected behaviour that interruts are going down the drain in MJS. So this is no complaining about missing features but a really (nearly) faulty behaviour and a fix was proposed from your (or @rojer's) side. So how could I provide a PR at this place? There was also a concrete idea to pass a parameter when settings the interrupt handler so one may increase the queue for the interrupts.\nP.S.: Small addendum - I remember that we were asked to post this problem as an issue so that it would not be forgotten. Now that the issue was back in someone's mind, it made sense to move the entry to the front. Like I said, \"PR please!\" is in my opinion not the adequate answer, but if there is no time, we all have to live with the problem.. :+1:. ",
    "JamesKingdon": "Just hit the same problem with a newly ordered esp32. mos flash reports the chip is ESP32D0WDQ6 R1. Any work-arounds?\nBoard purchased was:\nhttps://www.ebay.ca/itm/ESP32-ESP32S-CP2102-Development-Board-2-4GHz-Dual-Mode-WiFi-Bluetooth-Antenna/132430583954\nHost environment is Linux.. Ok, some more experimenting and testing with arduino IDE suggests that the issue is with not being able to automatically put the board into the right mode for flashing. If I hold down the 'boot' button during the flashing process things work as expected. Guess I picked a poor choice of dev board.. ",
    "boonsanti": "OK, I find out the problem. It's my usb to ttl poor quality.. ",
    "astout": "Updated to mos 2.4.3 and received same compile error: undefined reference to 'mgos_upd_set_event_cb'\nI followed @cpq's recommendation. It compiles, but now OTAs do not fire events.\nmos 2.4.3\nprior to OTA trigger:\nc\nif (mgos_event_add_handler(MGOS_EVENT_OTA_STATUS, _fw_update_event, NULL)) { ... }\nevent definition:\nc\n/**\n * Firmware Update Event Handler\n */ \nstatic void _fw_update_event(int ev, void *ev_arg, void *cb_arg) {\n  switch (ev) {\n    case MGOS_UPD_EV_INIT: {\n      LOG(LL_INFO, (\"Starting ESP Firmware Update\"));\n      return true;\n    }\n    case MGOS_UPD_EV_BEGIN:\n    ...\n  }\n...\n}\nmos 2.2\nprior to OTA trigger\nc\nmgos_upd_set_event_cb(_fw_update_event, NULL);\nevent definition:\nc\n/**\n * Firmware Update Event Handler\n */ \nstatic bool _fw_update_event(enum mgos_upd_event ev, const void *ev_arg, void *cb_arg) {\n  switch (ev) {\n    case MGOS_UPD_EV_INIT: {\n      LOG(LL_INFO, (\"Starting ESP Firmware Update\"));\n      return true;\n    }\n    case MGOS_UPD_EV_BEGIN:\n     ...\n  }\n...\n}\nIn mos 2.2 the _fw_update_event fired fine. What am I missing? A working example for 2.4.3 would be nice.. ",
    "osterwood": "Good to know.  I think it would be useful to be more clear to folks that STM32 is WIP.  Your documentation gives the impression that it is supported (without any caveats).. Your documentation makes it sounds like STM32 is in place, not WIP.  The v2.4 blog post is literally titled \"Mongoose OS v.2.4 is released - supports STM32\" and you have recommended hardware like the other processors.\nI have created a sample repository which reproduces the issue from your Empty Sample Project.  Strangely, the errors I get in this new repo are slightly different than the other repo -- the only difference between them is when the dependency checkout occurred (now versus 10 days ago).\nBuild output is now this:\nGEN   /vagrant/mos-stm32-test/build/gen/fs_img.c\n  GEN   /vagrant/mos-stm32-test/build/gen/build_info.c\n  GEN   /vagrant/mos-stm32-test/build/gen/mg_build_info.c\n  AR    /vagrant/mos-stm32-test/build/objs/mongoose-os.a\n  CC    /vagrant/mos-stm32-test/build/gen/fs_img.c\n  CC    /vagrant/mos-stm32-test/build/gen/build_info.c\n  CC    /vagrant/mos-stm32-test/build/gen/mg_build_info.c\n  LD    /vagrant/mos-stm32-test/build/objs/mos-stm32-test.elf (BL= LDS=stm32_no_ota.ld)\n/vagrant/mos-stm32-test/build/objs/mgos_rpc.c.o: In function `mgos_rpc_common_init':\n/vagrant/mos-stm32-test/deps/rpc-common/src/mgos_rpc.c:474: undefined reference to `mgos_get_mgr'\n/vagrant/mos-stm32-test/build/objs/mg_rpc.c.o: In function `mg_rpc_get_channel_info_internal_by_dst':\n/vagrant/mos-stm32-test/deps/rpc-common/src/mg_rpc/mg_rpc.c:216: undefined reference to `mgos_get_mgr'\n/vagrant/mos-stm32-test/build/objs/mongoose-os.a(mgos_sys_config.c.o): In function `mgos_sys_config_init':\n/mongoose-os/fw/src/mgos_sys_config.c:281: undefined reference to `mgos_wdt_set_feed_on_poll'\n/mongoose-os/fw/src/mgos_sys_config.c:284: undefined reference to `mgos_get_mgr'\n/vagrant/mos-stm32-test/build/objs/mongoose-os.a(mgos_init.c.o): In function `mgos_init':\n/mongoose-os/fw/src/mgos_init.c:36: undefined reference to `mgos_set_enable_min_heap_free_reporting'\n/vagrant/mos-stm32-test/build/objs/mgos_deps_init.c.o:(.rodata.descrs+0xc): undefined reference to `mgos_mongoose_init'\n/vagrant/mos-stm32-test/build/objs/mongoose-os.a(mgos_hal_freertos.c.o): In function `mgos_mg_poll_cb':\n/mongoose-os/fw/src/mgos_hal_freertos.c:106: undefined reference to `mongoose_poll'\n/mongoose-os/fw/src/mgos_hal_freertos.c:107: undefined reference to `mgos_get_mgr'\n/vagrant/mos-stm32-test/build/objs/mongoose-os.a(mgos_uart.c.o): In function `mgos_uart_configure':\n/mongoose-os/fw/src/mgos_uart.c:185: undefined reference to `mgos_add_poll_cb'\ncollect2: error: ld returned 1 exit status. ",
    "andyjjones1": "Another bit of information; whether or not I call wifi_setup_sta_disable() before trying to get into AP+STA mode makes no difference.  The exact same symptoms occur as described above.. If I get WiFi AP: Failed to set config message,  mgos_system_restart() doesn't help me.  The new configuration data after reboot does not stick and STA mode is not enabled.\n. hardware platform: ESP-WROOM-02 (uses ESP8266).\nmos-tool version: v. 20180730-103227/master@c8ecb691.\nmongoose-os verison: c6063cb57 (Jul 18 2018)\ncore: 80fc97171 (Aug 4 2018)\nwifi lib: 35277c2cb (Aug 2 2018)\nCode to reproduce:\nhttps://gist.github.com/andyjjones1/11ffc788a5dbaa180523c23688b60492\n. I tried the mgos_config_apply() method according to the way dimonomid used it his post here. I have tried it 14 times so far (across timespans ranging from 30sec till 8min after boot) and it has not delivered the infamous \"failed to write config\" error message.\nHowever, the actual SOFTAP mysoftAP won't show up until I press the button a second time, just as in the original post.  So in other words, the issue is the same as in the original post, just without the error message.\nThanks heaps for your help though!. Found a solution.  I inserted a 500ms delay between wifi_setup_sta_disable() (disabling of STA) and wifi_setup_softap_setup() (enabling of SOFTAP).  I have tried it 14 times in the same manner as my previous post, with the WiFi AP appearing each time to other devices in the room.\nCode is here: https://gist.github.com/andyjjones1/a056439eba0486ba969e9cec0c0e9ae6\nI'm not quite sure how, or why this works.  But someone may be interested in the future if they want to set up STA mode without rebooting.. ",
    "JamesHepworth": "Hi Sergey,\nSame result with latest version of mongoose-os, mos-libs and mos tool.\nNote that rebuilding & flashing the firmware without the required certificates and config for AWS results in successful operation without crashing.. Hi Sergey, result attached.\nNote the device is currently operational.\nmos_config-get.txt\n. Hi Sergey,\nI was wondering if perhaps you have made any further progress with this? . Update:\nThe device also shows the behaviour when not provisioned with AWS. Trace and config attached.\n[Sep  5 10:59:23.104] mongoose_poll        New heap free LWM: 86484\n[Sep  5 10:59:23.143] assertion \"p->tot_len == p->len + q->tot_len\" failed: file \"/opt/Espressif/esp-idf/components/lwip              /core/pbuf.c\", line 864, function: pbuf_dechain\n[Sep  5 10:59:23.191] abort() was called at PC 0x400d21a3 on core 0\n[Sep  5 10:59:23.191]\n[Sep  5 10:59:23.191] Backtrace: 0x400928c7 0x400929c7 0x400d21a3 0x40197ada 0x400e7a54 0x400ec689 0x400ef52a 0x400e9092               0x400e743f 0x40082eb2 0x40082da2\n[Sep  5 10:59:23.191] --- BEGIN CORE DUMP ---\n[Sep  5 10:59:23.191] mos: catching core dump\n[Sep  5 10:59:26.035] ...................\n[Sep  5 11:00:17.711] ---- END CORE DUMP ----\n[Sep  5 11:00:17.722] mos: wrote to C:\\xx\\xx\\core--ESP32-20180905-110017.              450735467 (628323 bytes)\n[Sep  5 11:00:17.726] mos: analyzing core dump\nUsing ELF file at: C:\\xx\\xx\\build\\objs\\fw.elf\nUsing Docker image: docker.io/mgos/esp32-build:3.0-r11\nRunning docker run --rm -v C:\\xx\\xx\\build\\objs\\fw.elf:/fw.elf -v C:\\xx\\xx\\core--ESP32-20180905-110017.450735467:/core -v C:\\xx\\xx:/c/xx/xx docker.io/mgos/esp32-build:3.0-r11 bash -c /usr/local/bin/serve_core.py --rom=/opt/Espressif/rom/rom.bin --rom_addr=0x40000000 --xtensa_addr_fixup=true /fw.elf /core & $MGOS_TARGET_GDB /fw.elf -ex 'target remote 127.0.0.1:1234' -ex 'set confirm off' -ex bt -ex quit\nGNU gdb (crosstool-NG crosstool-ng-1.22.0-80-g6c4433a) 7.10\nCopyright (C) 2015 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"--host=x86_64-build_pc-linux-gnu --target=xtensa-esp32-elf\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/.\nFind the GDB manual and other documentation resources online at:\nhttp://www.gnu.org/software/gdb/documentation/.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from /fw.elf...done.\nFound core at 23 - 628350\nMapping IRAM: 131072 @ 0x40080000\nMapping DRAM: 335872 @ 0x3ffae000\nMapping /opt/Espressif/rom/rom.bin at 0x40000000\nMapping /fw.elf .iram0.vectors: 1024 @ 0x40080000\nMapping /fw.elf .iram0.text: 85376 @ 0x40080400\nMapping /fw.elf .dram0.data: 13884 @ 0x3ffc0000\nMapping /fw.elf .dram0.bss: 57608 @ 0x3ffc3640\nMapping /fw.elf .flash.rodata: 247076 @ 0x3f400020\nMapping /fw.elf .flash.text: 1010034 @ 0x400d0018\nLoaded core dump from last snippet in  /core\nRemote debugging using 127.0.0.1:1234\n0x400928c7 in invoke_abort ()\n    at /opt/Espressif/esp-idf/components/esp32/panic.c:140\n140             ((int ) 0) = 0;\n0  0x400928c7 in invoke_abort ()\nat /opt/Espressif/esp-idf/components/esp32/panic.c:140\n\n1  0x400929ca in abort ()\nat /opt/Espressif/esp-idf/components/esp32/panic.c:149\n\n2  0x400d21a6 in __assert_func (\nfile=0x3f433230 \"/opt/Espressif/esp-idf/components/lwip/core/pbuf.c\",\nline=864, func=<optimized out>,\nfailedexpr=0x3f4333f3 \"p->tot_len == p->len + q->tot_len\")\nat ../../../.././newlib/libc/stdlib/assert.c:63\n\n3  0x40197add in pbuf_dechain (p=)\nat /opt/Espressif/esp-idf/components/lwip/core/pbuf.c:881\n\n4  0x400e7a57 in mg_lwip_if_udp_recv (nc=, buf=0x3ffbf100,\nlen=1460, sa=0x3ffdad40, sa_len=0x3ffdad50)\nat common/platforms/lwip/mg_lwip_net_if.c:309\n\n5  0x400ec68c in mg_recv_udp (len=,\nbuf=0x3ffbf100 \"(\\373\\373?\", nc=0x3ffe35b8) at mongoose/src/mg_net.c:639\n\n6  mg_do_recv (nc=0x3ffe35b8) at mongoose/src/mg_net.c:582\n7  0x400ef52d in mg_if_can_recv_cb (nc=0x3ffe35b8)\nat mongoose/src/mg_net.c:590\n\n8  mg_lwip_if_poll (iface=, timeout_ms=)\nat common/platforms/lwip/mg_lwip_ev_mgr.c:152\n\n9  0x400e9095 in mg_mgr_poll (m=0x3ffc8a20 , timeout_ms=0)\nat mongoose/src/mg_net.c:290\n\n10 0x400e7442 in mongoose_poll (ms=0)\nat /c/xxxx/mos-libs/mongoose/src/mgos_mongoose.c:62\n\n11 0x40082eb5 in mgos_mg_poll_cb (arg=)\nat /mongoose-os/fw/src/mgos_hal_freertos.c:105\n\n12 0x40082da5 in mgos_task (arg=)\nat /mongoose-os/fw/src/mgos_hal_freertos.c:219\n\nDetaching from program: /fw.elf, Remote target\nRemote doesn't know how to detach\nGDB closed the connection\nconfig-get_unprovisioned.txt\n. It looks like the issue is being caused by the dns-sd library. If I remove the library from the project crashing behaviour seems to stop. In its previous form (with the dns-sd library included) the firmware can run for extended periods without a crash so I have not been able to verify this as the definitive cause yet. \nI am in the process of setting up a long term test to investigate this and am trying to setup a test case to reproduce the crashing behaviour in a simple example project. \nI will comment again with test code and test results once I have them.. We discovered that a device on our network was flooding the device running the Mongoose OS firmware with DNS packets. This seemed to cause the device to eventually run out of memory and to crash.\nExcerpt from log attached. \nDoes this seem to make sense? Does Mongoose OS provide any protection from devices that might be malfunctioning and flooding the network with packets?\ndns_flood.txt\n. ",
    "rtrue983": "Another interesting find.  it seems like the WiFi activity is starving the uart rx callback.  The image below shows shows the log highlighted where the mongoose is attempting to connect to an AP as well as a capture of the uart traffic.  notice that all processing of the incoming data is halted until the wifi connects.\n\nI can't say for sure that this caused the overflow but one was present the next time the app checked 15sec later\n[Sep 17 23:49:33.979] UartTxTask           received a partial msg [mIdx:28]\n[Sep 17 23:49:33.988] UartTxTask           uart rx overflows occured [rx_ovf:1]\n[Sep 17 23:49:34.002] UartTxTask           uart stats | app mIdx: 28 av:  0 bytes:5355 | rx i:23 b:5355 of:1 lc:409 | tx i:474 b:4118 th:0\n[Sep 17 23:50:04.006] UartTxTask           received a partial msg [mIdx:28]\n[Sep 17 23:50:04.030] UartTxTask           uart stats | app mIdx: 28 av:  0 bytes:12218 | rx i:56 b:12218 of:1 lc:821 | tx i:918 b:7694 th:0\n[Sep 17 23:50:34.033] UartTxTask           received a partial msg [mIdx:1]\n[Sep 17 23:50:34.049] UartTxTask           uart stats | app mIdx:  1 av:  0 bytes:18740 | rx i:78 b:18740 of:1 lc:1195 | tx i:1360 b:11246 th:0. A little update.  I have performed the following things, each increasing the reliablity:\n\n\nmain micro controlling the flow as the master.  I believe this helps prevent any receiving while transmitting on the ESP32... the rx_overflows/buffer offsets occur less frequent.  \n\n\nProcessed the incoming commands immidately instead of sending them to a queue.  Prevents mongoose from getting busy doing other things.  QUESTION: how long can i hold up the rx dispatcher callback... I assume it is called from the mgos task and not an interrupt? \n\n\nadded a mgos_uart_flush( ... ) after I call mgos_uart_write( ... ) for sending the commands back. \n I have to do some more testing on this but I think this cleans things up quite significantly.  I don't really like solution cause if we have a really busy uart we will be blocked quite a bit right?  Right now the only thing calling the send msg/flush is the uart rx dispatcher.\n\n\nUPDATED SOURCE CODE\ninitialization\n``` c\nbool UART_Init( void )\n{\n    struct mgos_uart_config ucfg;\nif (isInitialized == false) {\n\n    mgos_uart_config_set_defaults(APP_UART_NO, &ucfg);\n\n    ucfg.baud_rate = UART_BAUD_RATE;\n    ucfg.num_data_bits = 8;\n    ucfg.parity = MGOS_UART_PARITY_NONE;\n    ucfg.stop_bits = MGOS_UART_STOP_BITS_1;\n    ucfg.rx_fc_type = MGOS_UART_FC_NONE;\n    ucfg.rx_linger_micros = 15;\n    ucfg.rx_buf_size = 1500;\n    ucfg.tx_buf_size = 1500;\n\n    if (!mgos_uart_configure(APP_UART_NO, &ucfg)) {\n        LOG(LL_INFO, (\"ERROR: failed to init uart\"));\n        return false; // failed to configure uart\n    }\n\n    uartRxQueue =    xQueueCreate( 10, sizeof(uartMsg_t) );\n\n    xTaskCreate( UartRxTask,    \"uartRxTask\",    8192, NULL, APP_HIGH_TASK_PRIORITY, NULL);\n\n    // setup the receive callback and enable the receiver\n    mgos_uart_set_dispatcher( APP_UART_NO, UartRxCB, NULL );\n    mgos_uart_set_rx_enabled( APP_UART_NO, true );\n\n    UrtDrv_EnableDataPassThru( false, 0);\n    isInitialized = true;\n}\n\nreturn true; // successfully initialized the uart peripheral\n\n}\n```\nrx dispatcher\n```` c\n/// @brief    This private function is a mongoose callback gets called from \n///             their event task when bytes are available in their receive buffer\n///             or if there is room in their output buffer (so pretty much all\n///             the time)\n///\n/// @param    [in] uart_no\n/// @param    [in/out] arg\n/// @returns  None.\nstatic void UartRxCB( int uart_no, void arg )\n{\n    uint8_t rxData = 0;\n    size_t rx_av = 0;\n    uartMsg_t uartRxMsg;\nif (uart_no != APP_UART_NO) {\n    return;\n}\n\nrx_av = mgos_uart_read_avail(uart_no);\nif (!rx_av) {\n    return;\n}\n\n    uint32_t i = 0;\n\n    for (i=0; i<rx_av; i++) {\n\n        byteCount += mgos_uart_read( uart_no, &rxData, 1 );\n\n        switch (uartRxMode) \n        {\n            case LOOKING_FOR_START:\n                // look for start and reset the variables\n                break;\n\n            case GRAB_LEN: // note it will stay here for 2 bytes\n                // grab message length\n                break;\n\n            case GRAB_CMDS:\n                // grab msg command\n                break;\n\n            case GRAB_PAYLOAD:\n                // grab payload, could be 0\n                break;\n\n            case GRAB_CRC:\n                    // calc CRC\n\n                    if (calCrc == msgCrc) {\n\n                        if (COMMAND == CheckMessageType( ... )) {\n                            mgos_gpio_write(26, true);\n                            RBTCOMM_ProcessCommand( uartBuf, mIdx );\n                            mgos_gpio_write(26, false);\n                        }\n                        else {\n\n                            uartRxMsg.type = CheckMessageType( ... );\n                            uartRxMsg.len = mIdx;\n                            memcpy( &uartRxMsg.data, uartBuf, uartRxMsg.len );\n\n                            // send message to receive queue to be processed... don't wait or you will hold up things\n                            if (!xQueueSend( uartRxQueue, &uartRxMsg, 0)) {\n                                LOG( LL_ERROR, (PR \"uart rx queue full... throwing away message\" PW ));\n\n                            }\n                        }\n                    }\n                    else {\n\n                        // bad checksum\n                    }\n\n                    // RESET BUFFER\n\n                    // leave callback once 1 message has been processed\n                    return;\n                }\n                break;\n        }\n    }\n}\n\n}\n````\nsend command\n``` c\nuint8_t UrtDrv_SendCmd( uint8_t cmd, uint8_t subCmd, char *payload, uint16_t pLen )\n{\n    static uartTxMsg_t uartTxMsg;\n// ASSEMBLE MESSAGE\n// send the message to the queue to be sent on the next heartbeat from the main micro\nxQueueSend( uartTxQueue, &uartTxMsg, 10);\n\nreturn mLen;\n\n}\n```\nSend Response\n``` c\nuint8_t UrtDrv_SendRsp( uint8_t cmd, uint8_t subCmd, char *payload, uint16_t pLen )\n{\n    static uartMsg_t uartMsg;\n// ASSEMBLE MESSAGE\n\n// send the data out now since we should have just receive a command\ntxCount += mgos_uart_write( APP_UART_NO, uartMsg.data, uartMsg.len );\n\nreturn mLen;\n\n}\n```\ntransmit command/heartbeat response\n``` c \nvoid UrtDrv_SendNow( uint8_t count )\n{\n    static uartTxMsg_t uartTxMsg;\n// is there a message to send? if so, send it now\nif (pdTRUE == xQueueReceive( uartTxQueue, &uartTxMsg, 0 )) {\n\n    // send the data out\n    txCount += mgos_uart_write( APP_UART_NO, uartTxMsg.data, uartTxMsg.len );\n}\nelse {\n\n    // ASSEMBLE RESPONSE TO HEARTBEAT\n\n    txCount += mgos_uart_write( APP_UART_NO, txMsg, MSG_OVERHEAD+1 );\n}\n\nmgos_uart_flush(APP_UART_NO);\n\n}\n```. Here is a good scope grab of what i'm seeing once in error state (rx_av = 0 but data is stuck in the lower driver):\nZoomed Out\nmain micro transmits messages (yellow) every 50-60ms.\nesp32 responds once message is received (green)\n\nZoomed In\nnotice the command is processed and the response is sent after 1 byte was received (purple toggles on every mgos_uart_read( ..., 1 )).  This indicates the first 7 bytes of the message were received and handled previously and then 0 bytes were available until this message came in.\nnotice the purple toggling after the response... these are the first 7 bytes available of the message shown\n\n. I haven't read this fully but it seems like the esp-idf supports the two threads... they could at least get two cores running and pin all the mongoose functions to one core. This could possible let a user add additional independent task to the 2nd core to start with?\nhttps://docs.espressif.com/projects/esp-idf/en/latest/api-guides/freertos-smp.html. Then again, this may go back to making mongoose thread safe as the first step and let users create their own task with less worry about threading and interacting with mongoose in those threads. ",
    "ouraborous": "Hello,\nI don't know if you are still facing this problem. But for the application I am working on, I was having the same issue. Not sure yet if the trigger is high activity or concurrent usage of multiple serial ports. But I can confirm that there is a HW issue on the ESP32 that causes the Rx Fifo and the Rx Count register to get out of sync. As you mentioned, the rx?count is returning 0 when there are bytes available, and after more bytes are received the older bytes are sent with a portion of the new ones and the overall message is corrupted. I know Espressif have accepted that there is an issue with the RXFIFO_RD_BYTE register and recommends to access it via AHB and Mongoose implements this in the rx_byte function on exp32_uart.c\nBut i have found open issues with this same out of sync problem between the rx_cnt and FIFO. And ultimately the solution exposed in this thread makes sense. I implemented this solution in the esp32_uart.c driver and I have not seen the issue occur again. Basically what this does is to use the write/read addresses of the Rx FIFO to know if it\u00b4s not empty instead of reading the RX Count register. Is less efficient in terms of memory management but much more reliable. Let me know it you already tested something like this and if it works for you. Maybe we can get a fix in the mongoose OS code. I implemented this function:\nIRAM static bool esp32_uart_rx_fifo_not_empty(int uart_no) {\n  int rx_add = REG_GET_FIELD(UART_MEM_RX_STATUS_REG(uart_no), UART_MEM_RX_RD_ADDR);\n  int tx_add = REG_GET_FIELD(UART_MEM_RX_STATUS_REG(uart_no), UART_MEM_RX_WR_ADDR);\n  return (rx_add != tx_add);\n}\nand modified this one in esp32_uart.c\nvoid mgos_uart_hal_dispatch_rx_top(struct mgos_uart_state *us) {\n  int uart_no = us->uart_no;\n  struct mbuf *rxb = &us->rx_buf;\n  uint32_t rxn = 0;\n  /* RX */\n  if (mgos_uart_rxb_free(us) > 0 && esp32_uart_rx_fifo_not_empty(uart_no)) {\n    int linger_counter = 0;\n    /* 32 here is a constant measured (using system_get_time) to provide\n     * linger time of rx_linger_micros. It basically means that one iteration\n     * of the loop takes 3.2 us.\n     *\n     * Note: lingering may starve TX FIFO if the flow is bidirectional.\n     * TODO(rojer): keep transmitting from tx_buf while lingering.\n     */\n    int max_linger = us->cfg.rx_linger_micros / 10 * 32;\n    while (mgos_uart_rxb_free(us) > 0 && linger_counter <= max_linger) {\n      if (esp32_uart_rx_fifo_not_empty(uart_no)) {\n        mbuf_resize(rxb, rxb->len + 1);\n        uint8_t b = rx_byte(uart_no);\n        mbuf_append(rxb, &b, 1);\n        rxn++;\n        if (linger_counter > 0) {\n          us->stats.rx_linger_conts++;\n          linger_counter = 0;\n        }\n      } else {\n        linger_counter++;\n      }\n    }\n    us->stats.rx_bytes += rxn;\n  }\n  WRITE_PERI_REG(UART_INT_CLR_REG(uart_no), UART_RX_INTS);\n}\n. ",
    "duncandrennan": "To add to this, I think the underlying issue is that the nonce counter on the server (device) side is not handled correctly.\nIn rpc_common in mg_rpc.c line 864 the following is called\nint authenticated = mg_check_digest_auth(\n            mg_mk_str(\"dummy_method\"), mg_mk_str(\"dummy_uri\"), username, cnonce,\n            response, mg_mk_str(\"auth\"), mg_mk_str(\"1\"), nonce, realm,\n            htdigest_fp);\nwith\nint mg_check_digest_auth(struct mg_str method, struct mg_str uri,\n                         struct mg_str username, struct mg_str cnonce,\n                         struct mg_str response, struct mg_str qop,\n                         struct mg_str nc, struct mg_str nonce,\n                         struct mg_str auth_domain, FILE *fp)\nso nc is a fixed value of '1'. The server should increment nc (or prevent previous nc values being reused for a particular nonce/cnone) after each authentication so that cnonce and nonce can be reused to prevent having to exchange authentication info for each transaction.\nIf nc is a fixed value it allows a replay attack - see nonce-count in https://tools.ietf.org/html/rfc2617. Ok, that is a fair comment - agreed.. ",
    "a-pasquale": "Hmm, it started working again. Not sure what I did that fixed it. Closing the issue. Thanks for making great stuff!. ",
    "Rosmianto": "Have you tried with another ESP32 module? It seems that you experiencing USB connection issue.. ",
    "WooWapDaBug": "This code crashed because of this issue:\n```\ninclude \ninclude \nstd::map my_map;\nextern \"C\" enum mgos_app_init_result mgos_app_init(void) {\nmy_map[0] = 5;\n\nmgos_set_timer(1000, MGOS_TIMER_REPEAT, [](void*){\n    LOG(LL_INFO, (\"Test: %i\", my_map[0]));\n}, NULL);\n\nreturn MGOS_APP_INIT_SUCCESS;\n\n}\n```\nIf anybody runs into this issue, just avoid global complex objects. Just create pointers and initialize them with new in the main init function. . Why is this closed? is it now solved? . ",
    "pankleks": "Thanks - looks like neat chip, although it adds another component to the system and if 8266 is capable of doing something I find no reason to add separate component.\nI'm currently running 8266 controlling 2 fans independently on separate pins (running arduino code) for 24/7 - all is stable and chip is not even hot.\nChip you mentioned is cheap but it still cost nearly same as 8266 itself:). Thank you!. ",
    "ushijimamit": "how to solve this problem?\n[Nov 16 01:57:42.001] mg_ssl_if_mbed_err   0x3fff359c SSL error: -9984\n[Nov 16 01:57:42.007] mgos_mqtt_ev         MQTT TCP connect error (-3)\n[Nov 16 01:57:42.013] mgos_mqtt_ev         MQTT Disconnect\n[Nov 16 01:57:42.018] mqtt_global_reconnec MQTT connecting after 3949 ms. fixed. ",
    "fovea1959": "Cancelling here, filing issue in cesanta/mos-tool. ",
    "loui4u": "Issue seems to be specific to my mac. It is working fine on ubuntu. Any help/direction is appreciated.  I am closing this case.\nLoui. ",
    "tcpipchip": "I am having the same problem on WINDOWS 7. ",
    "virgil-av": "demo app  is too big for esp-01 memory, please close . ",
    "KZ-IDEA": "Second that.. ",
    "nebulous": "data is transmitted perhaps?. "
}