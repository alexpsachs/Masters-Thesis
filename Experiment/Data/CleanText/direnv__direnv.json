{
    "zimbatm": "Fixed in 7cac38c97ebf0926f049259c97ea4626416d3e44\n. Actually, it should check if direnv is still available on the path and if not, print a big warning and add ignore the change\n. PATH_add added to stdlib a while ago\n. Thanks, merged. One time I will have to rewrite this in another language though. Having shell-env be sensible to RUBYOPT is less than ideal.\n. Fixed in 0c55524c2c579 thanks to judofyr\n. Fixed in 1baffcca41c49cdc5d00 in the direnv branch\n. It's probably a bash-only feature\n. Agreed, this is likely not going to work across shells anyways.\n. Fixed, now autoreloads on change\n. Hey josh, thanks for the patch. I quickly checked it but there are some issues with it: \n- I try to keep the scripts portable so the local keywork and the [[ ]] tests must go because they are only available in bash\n- realpath is not installed by default on ubuntu\nso... I quickly tried to come-up with a portable solution, it's really ugly, check-out commit 3bb35d3 .. some similar work has also to be done on the stdlib for PATH_add if you are motivated :-)\n. Fixed in d7778d14384a7c459351cc212b56dacd8b7f0470\n. Awesome, thanks for the patch !\n. Ok, I'll try to do this in the week. It's time for direnv to grow ! :)\n. v0.1.62 released and a pull-request was sent to the homebrew repo: https://github.com/mxcl/homebrew/pull/5905\n. Just forked rubygems to add that feature : https://github.com/zimbatm/rubygems/tree/feature%2Fshared-cache\nWARN: Things are too fresh to stable ;-)\n. This need much more work. It's not a requirement for direnv but would make ruby and direnv work nicer together so I'm just leaving it here now.\n. You can also set the BUNDLE_BIN environment variable and bundler will start generating binstubs to that path. Right now the layout ruby function also sets the GEM_HOME but it could be stripped out: https://github.com/zimbatm/direnv/blob/direnv-exec/cmd_stdlib.go#L252\n. It's more related to the layout_ruby stdlib function but maybe issues should get closed when not worked on.\n. Hand bisect:\n- 1.6.17-1.6.11 bad\n- 1.6.1 good\n- 1.6.6 bad\n- 1.6.3 good\n- 1.6.4 good\n- 1.6.5 good <----- Last know working version\n. Same issue in Bash and Zsh\n. rvm head works if I comment set -e in direnv-export\n. Ok, this is fixed in a2a6eb054c2abca8073907c580c76973e4458e0e\n. Well said. I had a quick look at shell test suites a while ago but didn't find any that I really liked. Also shells are kind of loose on types and quoting which makes precise testing harder. I like ruby a lot but maybe python would be better adapted since it's available on many platforms by default.\nBut then I started re-writing most of direnv in go (see the go1 branch) and the unit tests are written in go. The integration test suite would still be useful though.\n. I know. The issue on master is that direnv-dump and direnv-diff need things\nthat aren't available in bash and ruby is also less than ideal. My hope is\nthat distributing static binaries will be helping with that.\nOn Mar 29, 2013 5:02 PM, \"Jonathan Camenisch\" notifications@github.com\nwrote:\n\nGo, eh? Sounds nice, although I'd just have to install it to use that\nbranch. :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/16#issuecomment-15650069\n.\n. The go version has a small test-suite. It's far from perfect but enough to close the ticket :)\n. some manpages exist now\n. http://www.direnv.net\n. Thanks!\n\nI am currently on Lion but using iTerm + zsh so I didn't see the issue.\n. Thanks !\n. Thanks, I fixed the logic instead of dumping more information. I suspect that bash's eval is not really fast :)\n. It's been bothering me for a while but never took time to pinpoint the problem :)\n. Hey Brendon, thanks for reporting.\nIn my idea, executing the .envrc is not inherently less secure than executing a project's Makefile or installing anything on your computer. The same rule applies, people don't generally sabotage their project because their online identity is associated to it. That said, it could make sense to add a whitelist to your project folder with something like export DIRENV_ALLOW=$HOME/code\nI am aware of the rvm feature but I always found it more annoying than useful. One big grief was that even authorized files would need to be re-authorized if the project got moved around. If I where to implement something similar it would just be hash-based. I would also need to add a cache directory for those authorizations and some latency for the checksum and make the code in general more complex. I'm not sure it's worth it but I'm open to counter-arguments (and pull requests :)).\nHappy new year!\n. @pwaller what do you think of the whitelist approach I described above, would it works with your current workflow ? By default it would only allow .envrc scripts from your $HOME and deeper.\n. Maybe I'm too naive but if someone at github would push an evil envrc (eg: rm -rf $HOME/* >/dev/null 2>&1 &), everyone would know and he would loose credibility. Isn't it a sufficient deterrent ? :)\n. Alright alright, you win the argument battle. Do you want to have a go at implementing this ?\n. @pwaller we can close this don't you think, or you want to keep it open until the 2.0.0 release ?\n. Cool, thanks for the info, I didn't know zsh supports that kind of construct and it was annoying me too.\nI'll try to commit that in the following days. If I'm too slow, don't hesitate to send a pull request :)\n. It's in :)\n. We have direnv and direnv version both output the current version. That should be enough.\n. direnv and direnv help output all the commands. This should be enough.\n. Thanks jeyferd,\nI'm still trying to gain traction and am curious of your uses of direnv. Feel free to write at direnv@librelist.com with feebacks and stuff. And welcome to direnv :)\n. Hey, thanks for the report ! Sorry for the delay on that one. What version of bash / OS are you using ?\n. Let me guess. Bash 4.2_p20 on Gentoo ? :)\n. It's all guess really. /var/tmp/portage/... in your output gave me a high probability for Gentoo. Gentoo users tend to keep their packages up to date so I was quite sure that the latest stable in portage would give the right version :)\n. Can you share your ebuild ? I couldn't find it in portage.\n. ok the problem is that your computer is too fast :) Commit coming soon\n. Ugly fix but it should do it..\n. Hey Patrick, thanks for the kind words !\nJust added a new source_up utility in master that does that. Let me know if it's useful. You can also use ~/.direnvrc to extend the stdlib to your own liking.\n. Looks good @pwaller !\nLet's use the branch for a while and see if the behaviour is the one we want to push to the other users. Once we both like how things work and that we have some tests&docs, I'll merge it into master.\nThere's a couple of commits that I already cherry-picked into master because they are no-brainers or not directly related to the feature. I think that if you rebase the branch, these commits will disappear from the pull-request.\nCherrs!\n. I'm not forgetting you and I still think it's a good idea. Here is a feedback on the branch so far:\nIf you have a ~/.direnvrc file, it's not possible to enable it. Maybe direnv enable should accept an optional path ? Or maybe ~/.direnvrc should always be considered as secure ?\nOnce an .envrc has been loaded I think it's safe to assume that the potential damage has already been done. direnv disable is just a way to stop getting the nagging messages right ?\nIt would be great if direnv-enable would show the content of the file and prompt \"This is what will be executed, are you alright with this ? [Y/n]\".\nI think it's enough to touch the path to the checksum to enable an .envrc\nNot directly related, maybe direnv-hook should set the common variables like DIRENV_LIBEXEC and DIRENV_CONFIG_DIR. That way we wouldn't have to set these check+export-default all the time.\nThanks !\n. Also, in other news, I'm currently rewriting some parts of direnv in C to avoid the ruby dependency.\n. > > If you have a ~/.direnvrc file, it's not possible to enable it. Maybe direnv enable should accept an optional path ? Or maybe ~/.direnvrc should always be considered as secure ?\n\nI think we'd want to check the write permission is not global, but otherwise I think it's reasonable, considering that the user could just write to .bashrc or any number of other files..\n\nMakes sense. Now that I'm thinking the error might also be an issue if a user sources another .envrc with source_env.\n\n\nI think it's enough to touch the path to the checksum to enable an .envrc\n\nI was thinking that it would be nice to be able to list enabled paths, for example to keep the possibiliy to audit, and remove old checksums.\n\nYeah, I also saw that you wanted to show diffs when a new .envrc appears. The problem is that you need a reverse lookup and then you can't really move your projects around without worrying. With git it's easy to switch branch but with things like svn I used to make copy of the project per branch. Unless you find a foolproof way to doing it I think it's best to keep it simple (doesn't mean I don't like the idea).\n\n\nAlso, in other news, I'm currently rewriting some parts of direnv in C to avoid the ruby dependency.\n\n+1, though what happened to the go port?\n\nI don't know really. The whole motivation is to remove the ruby runtime dependency because on most Linux it's not available by default (and to make it faster). Would you see yourself installing direnv if it had a go build dependency ? It would make my life much easier for sure. Go is easy to cross-compile so I could also provide static builds.\n. Okay sorry for letting your branch idle for so long. I'm going to finish the Go port this weekend and integrate the security branch at the same time. It's probably going to be easier for me to rewrite instead of merging.\n. It might also be direnv behaving weirdly because it source rvm on first use. It's been a long time since I used rvm so I didn't keep track of it's changes. Oops ?Try outputting env | grep DIRENV-- Sent from my HP PreOn 2 Oct 2012 12:15, Peter Waller notifications@github.com wrote: @splaspood: It's a bit hard to understand why this might be happening.\nThe only times this should happen that I know of are if you're starting a new shell, the .envrc has its mtime changed, or maybe if one of direnv's scripts are being re-sourced.\nCan you look at the output of:\nstat --dereference -c '%Y' \"$PWD/.envrc\"\nbefore and after running ls? Is it being changed by something? Then we can start ruling out some possibilities. I'm not the original author.\n\u2014\n          Reply to this email directly or view it on GitHub.\n. Thanks for the long debug session. I'm currently writing direnv 2.0 and it will handle failure much better. I'll see then if I can investigate the rvm situation again.\n. Hey @bmc, direnv 2.0 has just been released: http://direnv.net/2013/06/16/direnv-2-released.html . It should be fixed by that release but if not, feel free to re-open the ticket.\n. Are you setting RBENV_DIR to $PWD in your .envrc ?  If it's the case, the the issue is related to #11.\n. Can you give me the output of env before and after ?\n. Thanks, what is the content of the .envrc and .zshrc ? Send them directly to me if you don't want them to be public.As you can see, RBENV_DIR is set once the env is loaded. By seeing these two additional file I should be able to determine how it's inserted into the env.-- Sent from my HP PreOn 15 Oct 2012 13:14, millisami notifications@github.com wrote: Here it is:\nBefore: https://gist.github.com/3892142\nAfter: https://gist.github.com/3892145\nAlong with it, I've also filed another ticket on picking up the envrc at zimbatm/direnv#36\nDoes this too related to the same problem?\n\u2014\n          Reply to this email directly or view it on GitHub.\n. It might be due to an oh-my-zsh plugin or rbenv. I'll have a better idea once I have your .envrc and .zshrc-- Sent from my HP PreOn 15 Oct 2012 12:58, millisami notifications@github.com wrote: I'm using iTerm2.\nWhen I open up the new tab with Cmd+T or cd-ing via alias e.g. alias theapp=\"cd ~/code/projects/theapp, it doesn't pickup the .envrc\nI've to cd .. back and do the cd theapp again to pick up the path added in .envrc file that has the content:\nPATH_add bin\n\u2014\n          Reply to this email directly or view it on GitHub.\n. Weird I'm using mostly the same setup. The alias doesn't affect anything since I'm not overriding the cd command (unlike rvm).\nWhat is the output of echo $precmd_functions ?\nMaybe iTerm doesn't load your .zshrc when creating a new tab. In iTerm preferences -> Profiles -> Your profile -> General. My \"Command\" is set to \"Login shell\". Or to test that it load the .zshrc, add an echo statement in it and see if it's outputted in the new tab.\n. It's all the same as my setup. What version of direnv are you using ? I'm starting to run out of ideas of what could go wrong.\n. Sorry I'm at loss of what could go wrong. Maybe try with HEAD but this version should be fine too. Let's go fishing, maybe we'll find a treasure: Is it the system zsh or the one from homebrew ? What OSX version are you on ?\nLet's say you run your theapp alias. What is the content of your env before and after ? Or maybe try to run direnv export; it should print exports if the .envrc wasnt't loaded.\n. Yes you have the homebrew version. The system zsh is installed at /bin/zsh.\nIf you look at the $PATH before and after, it seems like the $PWD/bin directory is added correctly. What could happen is the following: the shell has a cache of available programs and usually recreates that cache when $PATH changes. Maybe your zsh is misconfigured and doesn't recreates it (did you apply the Homebrew instructions regarding the /etc/ dir ?). Try to run hash -r to force that mechanism once you're into the environment and see if it solves your problem (temporarily).\n. Ok.\nRegarding the hash -r test, let me explain it differently:\nIt seems like the env has been loaded correctly (according to the two envs that you pasted). One possibility is that the binary you have in your project's bin dir are not available to auto-complete. hash -r should force the refresh of that cache.\nLet's say you have a hello script in your bin/ directory. Type hell and it should complete. If it doesn't try to run hash -r and see if the autocomplete works after that. Also make sure your script has the executable bit set with chmod +x bin/hello.\n. I know, it's really weird. I'm sure it's something stupid that we didn't\nthink about but for now I can't really see what's causing the issue. This\nissue is certainly something that doesn't happend on my system or of the\nothers contributors here and I'm eager to make direnv as stable for\neveryone that uses it.\nI think we really tried everything out that was on my head and the only\nnext option I see would be for me to get first-hand access on your system.\nWould you like to arrange a Skype screen sharing session so that I can have\na look ? Just let me know at what time you're available tomorrow on this\nticket or directly by email: jonas@pfenniger.name\nOn 26 October 2012 13:14, millisami notifications@github.com wrote:\n\nThanks for explanation on hash -r.\nYeah, the auto-complete works, and its already executable.\nNot only opening new tab or cd-ing with alias, even some time the manual\ncd-ing even doesn't work.\nFor e.g.\nThe dir ~/Code/deploy has the .envrc file with just the content ADD_path\nbin.\nIf I go to that directory, cd ~/Code and cd deploy, and when I echo $PATH,\nthe path doesn't pick up the projects bin dir. So, what I've to do to\npickup that bin path, I've to go back cd .. and cd deploy again.\nAnd this time the bin dir is picked up.\nWhy such inconsistencies??\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/36#issuecomment-9810952.\n. Yeah that might be it ! It's fixed in master. brew uninstall direnv; brew install direnv --HEAD\n. Try replacing the zsh init line with:\n\neval `direnv hook zsh`\n. Hey @millisami , did you end up finding a solution for that issue ? Reopen if you want to investigate some more.\n. @christhekeele can you open a new issue that contains your direnv version and shell setup ?\n. Ok no worries. It's easier if you make a new issue next time because then I can track it separately and it doesn't have to notify the OP. Glad you found the issue.\n. Thanks Brian, that's going in.-- Sent from my HP PreOn 15 Oct 2012 22:53, Brian M. Clapper notifications@github.com wrote: Commit says it all\nYou can merge this Pull Request by running:\n  git pull https://github.com/bmc/direnv master\nOr view, comment on, or merge it at:\n\u00a0\u00a0https://github.com/zimbatm/direnv/pull/37\nCommit Summary\nAdded uname test for Cygwin\nFile Changes\nM libexec/direnv-export (3)\nPatch Links\nhttps://github.com/zimbatm/direnv/pull/37.patch\n  https://github.com/zimbatm/direnv/pull/37.diff\n\u2014\n          Reply to this email directly or view it on GitHub.\n. Can you make a separate pull-request with the second commit ?\n. Implemented in 6975b404658ca37c8755837d5826565e118d6472\n. Yeah sure. It looks like a more complete version of the use() and path_add() functions that you can find in the stdlib.\nI think it's definitely something that we could add in the stdlib in some form or another. What I usually do is put the extensions in my \"~/.direnvrc\" and when I find that they're stable enough and generic enough for others to reuse, I move them in the stdlib.\nIt also makes me think of another future project that I'm think about for a while. I think that projects would benefit from having a complete dependency file. Something like ruby's Gemfile but that also includes system packages. And that next to it we could have a kind of cross-platform package manager that works a little bit like Homebrew.\nBecause each package is installed in a prefix, each project could have different versions of the tools loaded by direnv.\n. @pwaller still interested integrating this ? I think it's a great idea\n. Ok do you mind if I give it a try ?\n. Let's retire shell detection. Everyone should use eval \"$(direnv hook $0)\" in their .bashrc/.zshrc anyways.\n. Can you try toexport DIRENV_RUBY=/usr/bin/ruby(or path to system ruby) before entering the folder and see if there is any change like that ?\n. Yeah as I suspected. The rbenv shims change the path before executing the real ruby and I'm using ruby to backup/restore the previous env. It's going to be fixed once I finish the go version.\n. Well until then you can add theexport DIRENV_RUBY=/usr/bin/ruby` directive to your .profile or .bash_profile\n. Thanks @jcamenisch . It's fine for the tests but it would be better if we could just fix the eval so that it doesn't try to globsubst in the first place. I tried quoting the eval but then $0 seems to get the value \"title\".\n. Ok try changing the init line in your .zshrc to:\neval \"`direnv hook $0`\"\n. Thanks for the feedback @jcamenisch \n. Fixed in 6a94d210733cc2fbb5b635e811f37401156d457e\n. ARGV[0] can be tampered with. Probably only from withing the process though. This is not really necessary for the release though.\n. Just want to make the tool solid but I'll close it until a real issue comes\nup.\nOn 2 April 2013 18:01, Peter Waller notifications@github.com wrote:\n\nWhy is this a concern?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/46#issuecomment-15788374\n.\n. Should be pretty good now\n. Agreed, error and general direnv output still has room for improvement.\n. I should probably make another release soon with some focus on these error message.\n. Sweet. I think it would be even better if the go routing would just be collecting and returning the output and then ParseEnv it in the main thread if the process' exit status == 0.\n. Agreed but you're still \"returning\" the error trough the use of shared memory. The closest to returning multiple values trough a channel seems to be by using a struct. But we can skip the argument altogether since the exec package seems to have this handy utility:  http://golang.org/pkg/os/exec/#Cmd.Output ?\n. Hey @pwaller , ^ this should fix it. Let me know if you're still having the issue after that commit.\n. Good idea. I'm not sure it's useful but it needs to be used in practice to find out if it's useful. It doesn't seem to hurt to include it and see how it's going. \n. @pwaller ok. the important part is to talk about and agree on stuff I guess,\n. I would rebase the branch and remove the rbenv altogher. Feel free to merge.\n. True :) Ref: #60 \n. Fixed in 1e6ac0ca3569d217967df179d0c67551655ac7a6\n. This should have been put against the go1 branch.\n. Looks good to me. Bash is just used as an execution engine here so Carl's approach makes sense.\n. Closing, not against master\n. Thanks @pwaller , fixes coming soon\n. Travis CI doesn't know how to handle the gh-pages and derivatives branches but master is fine. Do you want to provide a .travis.yml for these ?\n. PS: Ping me on IRC if you want to discuss :)\n. Thanks for the report @cloud8421 and @gregf , this should be fixed in the master and go1 branches now.\n. It looks like $0 resolves to the file. Usually it should contain something like \"-zsh\" or the path to zsh but it's possible that some of the shell option replaces $0 with the current file. Zsh has way too many options that change the shell behaviour.\n\nTo fix the issue either find the zsh option that's doing this or replace the line with: eval \"$(direnv hook zsh)\"\n. Yeah $SHELL might work. Do you know who is setting it ? If I login with zsh and then run bash, the variable is still containing the path to zsh (even with bash -l)\n. I'm thinking of changing the install instructions to directly write the shell type. There's no real need of the $0 variable except that it was cool to have the same like for both bash and zsh. Now that fish support has been added this trick doesn't work anymore.\n. Cool, I like it.\nReliance on bash is a not really an issue, it's what we use to load the .envrc. If you want config.BashPath already has the full resolved path ( $DIRENV_BASH can be used to fix a specific version btw ).\nAlternatively, the cmd_export.go file has a loadRC function that could be used here. Then you can just pass the new env to the command. It might be a more work so it's up to you.\n. It would be nice if it could be used in a shebang so that it loads the project's envs.\nFor example you would have a \"$PROJECT_ROOT/bin/my-program\" and \"$PROJECT_ROOT/.envrc\" and my-program would contain:\n```\n/usr/bin/env direnv invoke bash\necho \"Hey !\n```\nIn that case it would start searching the .envrc from the $PROJECT_ROOT/bin path. That way it could be called from any path (for example from an init script).\nI think there's a limitation in the shebang of 2 arguments though so that wouldn't work with the given example but maybe you have an idea to work around that ?\n. Feel free to ignore my feature scope expansion though :)\n. Hey @pwaller , I agree let's limit the scope of this PR. I would like to think this a bit trough before accepting it.\ndirenv invoke /home/dir pwd will output /home/dir. Is this what you want or do you just want to load the target dir environment ?\ndirenv will also output text to the stderr. How confortable are you with that, isn't it going to create unexpected behavior in some of your scripts ?\nOtherwise that that I'm happy to accept the pull-request.\n. Sorry for holding that up. I feel like it would be better to find and load\nthe environment and the execute the command in the same process instead of\ngoing trough the bash indirection. What do you think, should I let go of\nthat feeling and just merge it or should I rewrite or let you. I'm torn.\nAfter that I'll make a release.\nOn Oct 14, 2013 10:13 AM, \"Peter Waller\" notifications@github.com wrote:\n\n@zimbatm https://github.com/zimbatm good idea. Fixed.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/pull/65#issuecomment-26243994\n.\n. @pwaller just implemented the \"better\" version at https://github.com/zimbatm/direnv/tree/direnv-exec . Let me know what you think. I think that this command is going to be useful for tooling.\n. Ok guys, I'll have a look this weekend to finish this. In the mean time you could use some kind of wrapper script like this:\n\n```\n!/usr/bin/env bash\ndirenv_dir=dirname $0\npushd $direnv_dir\neval \"direnv export bash\"\npopd\n./path/to/your/command \"$@\"\n``\n. The newdirenv exec DIR COMMAND` is available in PR #65 . Anyone wants to provide feedback on usage ?\n. Closing as replaced by #97\n. Hi,\nTry restarting your shell. If it doesn't work, make sure the line in the\n.bashrc or .zshrc looks like in the readme\nOn Jun 28, 2013 7:02 PM, \"millisami\" notifications@github.com wrote:\n\nHi,\nI've old version of direnv and today I removed it to install the new one.\nbrew remove direnv\nBut at the prompt, it shows direnv_hook: no such file or directory:\n/usr/local/Cellar/direnv/0.1.154/libexec/direnv-export\nInstalling the new version via brew:\n$ brew remove direnv\n$ brew install direnv\ndirenv_hook: no such file or directory: /usr/local/Cellar/direnv/0.1.154/libexec/direnv-export\nWhy is this?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/66\n.\n. Pretty cool, I wanted to have fish support and here you made it.\n\nAny comments on the stability, do you think it's production ready ?\nOn Jul 15, 2013 8:42 PM, \"Alan Brenner\" notifications@github.com wrote:\n\ncd.fish goes in ~/.config/fish/functions\nYou can merge this Pull Request by running\ngit pull https://github.com/alanbbr/direnv master\nOr view, comment on, or merge it at:\nhttps://github.com/zimbatm/direnv/pull/67\nCommit Summary\n- initial support for fish\nFile Changes\n- A fish/cd.fishhttps://github.com/zimbatm/direnv/pull/67/files#diff-0(52)\n- M shell.go https://github.com/zimbatm/direnv/pull/67/files#diff-1(2)\n- A shell_fish.gohttps://github.com/zimbatm/direnv/pull/67/files#diff-2(98)\nPatch Links:\n- https://github.com/zimbatm/direnv/pull/67.patch\n- https://github.com/zimbatm/direnv/pull/67.diff\n. Ok thank, I'll try and have a closer look in the end of the week.\n\nIn the other shells I try and avoid overriding cd to avoid issues like\npushed/popd not working the same. Do you know if there is a precmd hook in\nfish ?\nOn Jul 15, 2013 8:56 PM, \"Alan Brenner\" notifications@github.com wrote:\n\nIt works for me. The direnv changes themselves were easy, and I'm\nconfident they wont break anything else, and may also be close to what the\ncsh family needs. Figuring out how to make the fish side work was a pain,\nand there may be a better way to do it, but I'm new to fish.\nOn Jul 15, 2013, at 3:52 PM, Jonas Pfenniger notifications@github.com\nwrote:\n\nPretty cool, I wanted to have fish support and here you made it.\nAny comments on the stability, do you think it's production ready ?\nOn Jul 15, 2013 8:42 PM, \"Alan Brenner\" notifications@github.com\nwrote:\n\ncd.fish goes in ~/.config/fish/functions\nYou can merge this Pull Request by running\ngit pull https://github.com/alanbbr/direnv master\nOr view, comment on, or merge it at:\nhttps://github.com/zimbatm/direnv/pull/67\nCommit Summary\n- initial support for fish\nFile Changes\n- A fish/cd.fish<\n  https://github.com/zimbatm/direnv/pull/67/files#diff-0>(52)\n- M shell.go https://github.com/zimbatm/direnv/pull/67/files#diff-1(2)\n- A shell_fish.go<\n  https://github.com/zimbatm/direnv/pull/67/files#diff-2>(98)\nPatch Links:\n- https://github.com/zimbatm/direnv/pull/67.patch\n- https://github.com/zimbatm/direnv/pull/67.diff\n\u2014\nReply to this email directly or view it on GitHub.\n\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/pull/67#issuecomment-20999020\n.\n. Hey @alanbbr , what about something like 1e06904f4acfcd6ba8827bbb96633327ea4d69da ? It's not working yet but do you think it would be a viable solution ?\n. Ok I think I fixed the hook command. You can add eval (direnv hook fish) in your ~/.config/fish/config.fish file and it should work (if you use the fish-support branch).\n\nNext issue is that I'm seeing that kind of things in the shell, I think $PATH might be a special variable that behaves differently than the others:\nset: Warning: path component /Users/zimbatm/.local/bin:/Users/zimbatm/.shared/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin may not be valid in PATH.\nset: No such file or directory\nset: Did you mean 'set PATH $PATH /Users/zimbatm/.shared/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin'?\n. Yeah it seems that if each path is separated by a space is doesn't\ncomplain. Eg:\nset PATH /bin /usr/bin $HOME/bin\nOn 19 July 2013 18:06, Peter Waller notifications@github.com wrote:\n\n@zimbatm https://github.com/zimbatm it looks like in fish $PATH is a\n\"special variablehttp://ridiculousfish.com/shell/user_doc/html/index.htmlwhich is an array, and hence array manipulation should be used to modify\nit, afaict.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/pull/67#issuecomment-21262915\n.\n. 820453d seems to fix the issue. There might be an issue if paths contain\n':' in them but I don't know if it's handled at all by the rest of the\ntool-chain in the first place.\n\nOn 19 July 2013 18:20, Jonas Pfenniger (zimbatm) jonas@pfenniger.namewrote:\n\nYeah it seems that if each path is separated by a space is doesn't\ncomplain. Eg:\nset PATH /bin /usr/bin $HOME/bin\nOn 19 July 2013 18:06, Peter Waller notifications@github.com wrote:\n\n@zimbatm https://github.com/zimbatm it looks like in fish $PATH is a\n\"special variablehttp://ridiculousfish.com/shell/user_doc/html/index.htmlwhich is an array, and hence array manipulation should be used to modify\nit, afaict.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/pull/67#issuecomment-21262915\n.\n. Ok cool. If you don't mind I'm going to remove the cd.fish implementation\nsince it's not necessary and merge the branch over the weekend.\n\n\nOn 26 July 2013 14:48, Alan Brenner notifications@github.com wrote:\n\nWorks for me, and more elegant solution.\nThanks\nOn Jul 18, 2013, at 6:24 PM, Jonas Pfenniger notifications@github.com\nwrote:\n\nOk I think I fixed the hook command. You can add eval (direnv hook fish)\nin your ~/.config/fish/config.fish file and it should work (if you use the\nfish-support branch).\nI'm seeing that kind of things in the shell, I think $PATH might be a\nspecial variable that behaves differently than the others:\nset: Warning: path component\n/Users/zimbatm/.local/bin:/Users/zimbatm/.shared/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin\nmay not be valid in PATH.\nset: No such file or directory\nset: Did you mean 'set PATH $PATH\n/Users/zimbatm/.shared/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin'?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/pull/67#issuecomment-21621590\n.\n. @xpe: It's possible to redirect the stderr output by installing a custom hook into your shell but you might be missing important debugging output as well.\n\ndirenv is a bit a sore on the eye especially when you have a nice custom shell. I would rather improve the output than adding another option. Any ideas on how to do that ?\n. The latest release does a compromise and only shows the changed environment variables when entering a project. I think it's still useful to be reminded what changed.\n. I'm not sure what's the best. I'm going to add the ability to disable to\nlog output by setting an empty DIRENV_LOG_FORMAT for now but maybe it\nshould be the default.\nIf you want to detect if an environment is loaded in the prompt, try\nchecking for the existence of the DIRENV_DIFF environment variable.\nOn 7 May 2014 23:49, \"tonatiuh\" notifications@github.com wrote:\n\nAny news on this?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/68#issuecomment-42493214\n.\n. It's because I just pushed the change. Try getting the latest code from\nmaster.\nOn 8 May 2014 09:55, \"James Chen\" notifications@github.com wrote:\n@zimbatm https://github.com/zimbatm I tried setting an empty\nDIRENV_LOG_FORMAT but still saw the logout.\nAnd DIRENV_LOG_FORMAT still shows as 'direnv: %s':\n$ echo $DIRENV_LOG_FORMAT\ndirenv: %s\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/68#issuecomment-42526776\n.\n. Yes I believe so\nOn 8 May 2014 10:30, \"James Chen\" notifications@github.com wrote:\nReinstalled with homebrew --HEAD. Is that sufficient to get the master?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/68#issuecomment-42529652\n.\n. A variation on the _direnv_hook function using anonymous pipes. This trick should work in bash as well.\n\nbash\n_direnv_hook() {\n  eval \"$(direnv export zsh 2> >( egrep -v -e '^direnv: (loading|export|unloading)' ))\"\n};\n. The closest we have is the layout directive. It's just a dispatch but semantically it's supposed to indicate what project layout you are using and act accordingly.\nFor example in your ~/.direnvrc you could have something like:\nsh\nlayout_python() {\n  if [ -f \"bin/activate\" ]; then\n    . bin/activate\n  fi\n}\nAnd then in your project's .envrc:\nsh\nlayout python\nThe drawback of this approach is that the mtime of bin/activate is not tracked so you have to run direnv reload whenever that file changes.\nI guess you already know that but for the others reading: the stdlib already provides layouts for python, ruby, go and node. Run direnv stdlib to see if they fit your need.\nWe could also add a layout auto-detection but I'm a bit afraid to come up with broken heuristics.\n. It wouldn't be too hard to expand the direnv config to pass additional places to look for. The stdlib would also have to be extended a bit to remove the .envrc assumptions about the file to look for.. I don't have any plans on implementing this right now. If you're up to it, I am happy to accept a PR.. By heart I think adding source_env .. in the child .envrc should do the\ntrick. Let me know if it's good for you or you find it confusing\nOn Aug 8, 2013 8:24 PM, \"Stan Wiechers\" notifications@github.com wrote:\n\nI have an .envrc file in /a and one in /a/b/. When I switch to /a it loads\nthe .envrc file in the folder, when I go to /a/b/ it unloads /a and then\nloads /a/b/. The behavior I am looking is that /a stays intact and /a/b is\nloaded on top of it. Is that configurable?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/71\n.\n. Should be fine yeah :) Thanks @take\n. Hey Peter,\n\nIt sure would be handy. If you want to contribute that feature I will\ngladly accept a patch.\nBash can export functions but I don't know how it works exactly. Also\ntarget shells like fish wouldn't support that feature but it's alright.\nSeparately from that I don't know how to better educate the user to make\nhim understand that the .envrc is loaded in a separate bash process who\nalso has the direnv stdlib and ~/.direnvrc loaded.\nOn Aug 20, 2013 2:57 PM, \"Peter Waller\" notifications@github.com wrote:\n\nJust come across a case where someone was expecting functions and aliases\nto be picked up from the source script.\nI realise what a pain this is. Any way we can reasonably make that work?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/73\n.\n. Hey @winmillwill , I think the idea was that in the context of a project you might want to add some shortcuts as functions or aliases that are really specific. Let's say you have a ruby project, you could set r to be an alias of bundle exec rake or have a special filter function that sanitizes the rails logs ; I'm not sure that as global functions they would be very useful.\n\nThat being said I think that in most cases aliases and functions can be replaced by proper bash scripts that's references using the PATH_add directive. Like you said function export is probably a hack, if the project can be kept simple it's probably better :)\n. Some of these tickets are also placeholders for some ideas, like here I'm not super convinced it's useful but I could be convinced otherwise. Ideas are best when simmered :)\n. Yeah there's so many ways to do the same things but only few are good :)\n\nI can't claim to understand the indirection you discussed about running all of this in a subshell, so I don't know if source and alias would work in bash with that strategy.\n\nWhen you run direnv export $target_shell (which is used by direnv hook $target_shell), direnv runs bash in a sub-process that loads the .envrc and then runs direnv dump. Direnv then reads and compares both environment to finally export the diff in the $target_shell format.\nIt's a bit complex but that way the .envrc is always executed in bash and you don't have to worry about shell compatibility. Any function or others defined in the sub-process don't leak into the current environment (which coincidentally also prevents this feature).\n. Unfortunately BASH_FUNC_* environment variables cause issues for other shell so we had to ignore them. See https://github.com/direnv/direnv/pull/157\nIf you want to maintain all your aliases in the .envrc you could add something like that in your main ~/.direnvrc file:\nbash\nexport_function() {\n  local name=$1\n  local alias_dir=$PWD/.direnv/aliases\n  mkdir -p \"$alias_dir\"\n  PATH_add \"$alias_dir\"\n  local target=\"$alias_dir/$name\"\n  if declare -f \"$name\" >/dev/null; then\n    echo \"#!/usr/bin/env bash\" > \"$target\"\n    declare -f \"$name\" >> \"$target\" 2>/dev/null\n    echo \"$name\" >> \"$target\"\n    chmod +x \"$target\"\n  fi\n}\nthen in your .envrc you can write something like:\nbash\nwoot() {\n  echo woot\n}\nexport_function woot\nAn executable file is then automatically generate on each .envrc load inside of the project's .direnv/aliases folder and made available on the PATH.\nI suppose a similar export_alias ee \"stty echo\" could also be crafted\n. @wbolster it seems easy on the surface but I don't know how if it will work for all shells. It also means to re-write the whole context serialisation to include the aliases.\n@Dr-Terrible it's a bit of a hack but you can add this to your ~/.direnvrc:\n``` bash\nExample: export_alias zz \"ls -la\"\nexport_alias() {\n  local name=$1\n  shift\n  local alias_dir=$PWD/.direnv/aliases\n  local target=\"$alias_dir/$name\"\n  mkdir -p \"$alias_dir\"\n  PATH_add \"$alias_dir\"\n  echo \"#!/usr/bin/env bash -e\" > \"$target\"\n  echo \"$@\" >> \"$target\"\n  chmod +x \"$target\"\n}\n``\n. You couldrm` the folder on each load since it's going to be recreated.\n```sh\nalias_dir=$PWD/.direnv/aliases\nrm -rf \"$alias_dir\"\nexport_alias() {\n  local name=$1\n  shift\n  local target=\"$alias_dir/$name\"\n  mkdir -p \"$alias_dir\"\n  PATH_add \"$alias_dir\"\n  echo \"#!/usr/bin/env bash\" > \"$target\"\n  echo \"$@ \\\"\\$@\\\"\" >> \"$target\"\n  chmod +x \"$target\"\n}\n.\nalias_dir=$PWD/.direnv/aliases\nrm -rf \"$alias_dir\"\n``\nshould be set in the.envrcso that$PWDresolves to the.envrc` folder. Hey @pdf,\n_powerline_prompt evals POWERLINE_OLD_PROMPT_COMMAND as part of it's runtime and somehow POWERLINE_OLD_PROMPT_COMMAND=$PROMPT_COMMAND.\nSee: https://github.com/Lokaltog/powerline/blob/develop/powerline/bindings/bash/powerline.sh#L29\nIn what order did you init the two libraries ? Try putting direnv at last. If nothing works, unset POWERLINE_OLD_PROMPT_COMMAND at the very end of your .bashrc.\n. I think I've figured what's the issue: your bachrc is loaded twice.\n1st run:\n- powerline: POWERLINE_OLD_PROMPT_COMMAND=\"\", PROMPT_COMMAND=_powerline_prompt\n- direnv: PROMPT_COMMAND=eval...;_powerline_prompt\n2nd run:\n- powerline: POWERLINE_OLD_PROMPT_COMMAND=eval...;_powerline_prompt, PROMPT_COMMAND=_powerline_prompt\n- direnv: PROMPT_COMMAND=eval...;_powerline_prompt\nIs it possible that you're using some kind of bash configuration framework like bash-it that does too much magic ?\n. Ok. Next release of direnv will include some protection to ensure it's not inserted twice in the PROMPT_COMMAND.\nBy the way did you know that you can use ruby-build+direnv to emulate the version selection of rvm ? Or just build any software with ./configure --prefix=~/some/prefix  and in your .envrc: load_prefix ~/some/prefix.\n. I don't know if all the direnv capabilities are exposed and discoverable\nproperly.\nFor example did you know that part of the stdlib that's available in the\n.envrc execution context you have layout ruby who sets your GEM_HOME to a\n.direnv/ruby folder inside your project's home ? It acts a bit like a\ngemset in that you have one gem environment per project.\nOn Oct 17, 2013 10:04 PM, \"Peter Fern\" notifications@github.com wrote:\n\nCool.\nBy the way did you know that you can use ruby-build+direnv to emulate the\nversion selection of rvm ? Or just build any software with ./configure\n--prefix=~/some/prefix and in your .envrc: load_prefix ~/some/prefix.\nAutomatic ruby-version and ruby-gemset selection is too useful when\nswitching between numerous projects frequently, and though I've been\ntesting rbenv as a lighter-weight alternative, RVM's gemset management is\nholding me there for now.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/74#issuecomment-26552868\n.\n. Technically I think we could override the source builtin.\n\nbash\nexport DIRENV_FILES=\nsource() {\n  DIRENV_FILES+=:$1\n  builtin source \"$@\"\n}\nAnd then capture that in direnv export to calculate the mtimes.\n. that's implemented actually, thanks @nyarly :). Thanks for the feedback @pwaller.\nRegarding docker I agree, I think it really helps the underlying issue which is, how to we minimize the differences between the development and production environments. I can also see how you could use a Dockerfile that mounts the current folder to avoid running docker build every time you want to test a change. In the end I think that both options are complementary, if you have a nix definition you can also install the same definition in the docker container and until docker is natively supported on OSX I think it's another way to go into that same direction.\n. Thanks @ardecvz for the great writeup. The fix is good enough and I'll pull it as is.\nAnother solution would be to remove the direnvVar() check entirely but it would make the \"direnv export:\" more verbose.\n. It's also great to get help. Even just feedback is always useful.\n. Nice report, thanks !\nOn the last seconds of the video you type \"diren\" then tab. And it crashes the shell. Can you try it again and see if the crash is consistent ? Just like that, no need to load any .envrc\nMy hunch is that the auto complete of the shell is outputting something that iTerm doesn't like. Try updating iTerm maybe.\n. What does the .envrc look like ?\nMaybe it's the changing COMP_WORDBREAKS who's changing the behavior of bash in some ways.\n. Sorry for the random inquiries but can you try to remove rvm from your\n.bashrc and try again ?\nOn Dec 6, 2013 3:42 PM, \"George Song\" notifications@github.com wrote:\n\n.envrc was just:\nexport PATH=$PWD/bin:$PATH\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/81#issuecomment-30003525\n.\n. Any luck ? It seems that the combination of direnv and rvm might expose a weakness in bash that makes it crash. Another solution might be to upgrade bash ; Apple is distributing an old version of bash (3.2.51) that probably has some bugs in it.\n\nI'll try and see if I can reproduce the bug later in the week by installing rvm if you don't find a solution.\n. Great. If you have the time we could try to find if there is a way to work around the issue. We could use http://tmate.io/ to access to your shell. I'm sure it would be faster than sending messages back and forth like that.\n. As a recap: disabling rvm didn't seem to solve the issue.\nThe next things I would try:\n1)\n```\n/bin/bash -l\nunset COMP_WORDBREAKS\ndo the segfaulting dance\n```\n2) Disable all the entries in the ~/.bashrc and do the segfaulting dance. If that works, enable the first half, bisect.\n3) Try with a super clean environment:\n```\ncd\nenv -i /bin/bash --login --noprofile --norc\nexport HOME=$PWD\nexport PATH=/usr/local/bin:$PATH\neval \"$(direnv hook bash)\"\nAnd then try to reproduce the error\n```\n. I found this Google Groups thread that says that unsetting COMP_WORDBREAK can segfault bash : https://groups.google.com/forum/#!topic/gnu.bash.bug/8rg3aYbmWxY\nI'm going to add COMP_WORDBREAK on the blacklist of items.\n. The commit has auto-closed the issue but re-open if you see the issue again. Thanks again for helping me out with that issue.\n. Hi @pdf, thanks for reporting.\nIt's two different issues that issue from the same direnv mechanism. direnv serializes the old environment in the DIRENV_BACKUP environment variable, runs a bash sub-shell to load the .envrc and exports the diff between the old and new environment in the shell. Unloading the environment just means restoring the content that's in the DIRENV_BACKUP.\nIn the first case it's an unidentified issue with bash that I also saw on #81. In some condition bash seems to be changing the COMP_WORDBREAKS variable in the subshell. It shouldn't because the subshell bash is executed with --noprofile and --norc. I don't know why it's doing it but I have added COMP_WORDBREAKS in the blacklist of ignored environment variables since it's causing segfaults on some versions of bash when unset (see 403c34ec184 ). Next release it's going to be fixed.\nI believe the second case only happens when you start tmux from withing a loaded .envrc environment. The backup has already happened before tmux is started. The tmux+bash subshell is now loaded with both the old DIRENV_BACKUP and the new TMUX_* variables introduced by tmux. When you cd .. outside of your project inside tmux it will restore the DIRENV_BACKUP environment and remove the TMUX_* variables who are not part of it.\nI don't know what's the best way to deal with that yet ; either a tmux wrapper that unload the environment before executing tmux, or add the TMUX_ variables to the blacklist.\n. One solution for tmux would be to use a wrapper.\nAdd this script somewhere in your PATH under direnv-tmux:\n``` bash\n!/usr/bin/env bash\npwd=$PWD\ncd /\neval \"$(direnv export bash)\"\ncd $pwd\nexec tmux \"$@\"\n```\nchmod +x direnv-tmux\nThen alias tmux=direnv-tmux\n. The reason why direnv works like that is because it was simple to implement\nand this issue was never raised before. I'm going to make a branch where\nonly the changing variables are backed-up and see if I like it better like\nthat.\n@pdf if DIRENV_BACKUP is unset it's not possible to revert the env changes.\nThat might lead to having inconsistent states.\nOn Dec 12, 2013 4:26 AM, \"Peter Fern\" notifications@github.com wrote:\n\n@pwaller https://github.com/pwaller I'm not entirely convinced that's\nthe best that can be done. An example implementation that would behave\ncorrectly might be to parse the .envrc and perform individual actions that\ncould be tracked inside direnv. There may be other ways of tracking stuff,\ntoo.\nWith that aside, why is DIRENV_BACKUP exported? Why do we ever want that\nin subshells? This particular issue (and I suspect others of similar\nprovenance) wouldn't occur if it wasn't exported.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/82#issuecomment-30388601\n.\n. I'm going to change direnv to only track and restore variables that have been changed in the .envrc. That should fix the issue with tmux (unless you set a TMUX_ variable in the .envrc).\n. ^ this commit should fix the TMUX issue. All tests are passing but since it changes how direnv works you need to restart your shell just to be sure. @pdf if you can test it it would be great. I'm going to merge it in a week or so.\n. Ok merged into master, direnv release following soon.\n. Hi Tim, thanks for the kind words!\n\nHow likely is it that the attacker knows what .envrc you allowed and that\nyou load some it's untrusted git repo or archive, not notice the direnv\nexport notice and run one of the commands in the attacker's bin/ directory\n? If yes do you think the attacker would have more chance by infecting the\n./configure or Makefile ?\nI don't think security is an absolute, we certainly increase the attack\nsurface in some ways and the more people adopt direnv the more lucrative a\ntarget it will be. Similarly the attacker could publish a popular git repo,\nwait for the people to allow the .envrc and add the program in the bin/\nlater.\nThat being said if a pull request was being submitted I would gladly accept\nit ;) Thanks for keeping a vigilant eye out there.\nOn Dec 17, 2013 5:37 AM, \"Tim Cuthbertson\" notifications@github.com wrote:\n\n(firstly, this project is great - I was thinking about implementing almost\nexactly this the other day, glad to see it already exists).\nI'm happy to see the allow/deny system, but I don't think it's sufficient.\nFor example, if respectable-project/.envrc contained code to add\n$PWD/tools to the start of $PATH, I can copy respectable-project/.envrcinto\nevil-project/.envrc, and it will be automatically executed by users who\nhave authorized respectable-project/.envrc, even though it refers to a\ncompletely different tools/ directory (perhaps containing a malicious\nversion of ls).\nSo perhaps the auth needs to contain the full path, as well as just the\ncontent.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/83\n.\n. Hey Tim,\n\nWould it make sense to have the 0env --export tmp.sh ...; source tmp.sh\nin your .envrc ? That would allow you to have the 0install dependencies of\nyour project loaded in your environment when cd-ing into your project. Or\nwhere you trying to do something else ? I'm not very sure of the problem\nyou want to solve (but like the idea of 0install+direnv).\nCheers!\nOn Dec 17, 2013 9:19 PM, \"Tim Cuthbertson\" notifications@github.com wrote:\n\nPerhaps this is already possible, but I couldn't see how.\nI'd like to be able to, instead of this:\nexport VAR=val\ndo this:\nenv VAR=val direnv --adopt-this-env\nObviously, the above example does not gain you much. My real use case is\nto be able to use https://github.com/gfxmonk/0env, which sets up\nenvironment variables and then executes a subshell (or a command of your\nchoosing). So it would be something like:\n0env http://gfxmonk.net/dist/0install/mocktest.xml -- direnv --adopt-this-env\n0env does have a mode which can export a shell script which I could then\nload as part of my .envrc, but that part of the codebase is more fragile,\nand shell-specific. Given that direnv already adopts the environment from\nin a sub-process, is it possible to tell it to use a _different_sub-process?\nIt looks like I want to call direnv dump, but I'd also need to prevent\nthe default dump from happening at the end of my .envrc execution. Perhaps direnv\ndump could have some smarts to only execute once in a given proces tree,\nor have some special sentinel at the end which tells the parent process to\nstop looking for further env vars?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/85\n.\n. Just to be clear, you goal is have direnv manage the environment variables and inherit them from 0env so that you don't have to start a sub-shell but can simply cd in an out of a target directory and have direnv do it's magic. Is that correct ?\n\nThe best would be if the 0env environment could be loaded inside the .envrc context in a way or another (the temporary script was an example but it's not very elegant). I don't know 0env so you have to tell me, would it work if we added an option to direnv dump to print bash export directives instead of the base64 ? If necessary another -ignore flag could be added to remove some of the unecessary 0env variables.\n``` bash\nThis would be added in the stdlib\n0env_load() {\n  local url=$1\n  eval \"0env \"$url\" -- direnv dump -bash -ignore 0ENV_VAR -ignore 0ENV_OTHER_VAR\"\n}\nThen in your .envrc\n0env_load http://gfxmonk.net/dist/0install/mocktest.xml\n```\n. Side note: I didn't notice before that you're the author of 0env. I agree a lot with the rationales on that page: http://gfxmonk.net/dist/0install/0env.xml . These days containers are all the rage but I still prefer just to have the dependencies loaded in my current shell whenever I change directory. Similarly to 0install I explored using the nix package manager with direnv. There is still some way to go to make it seamless but it's fantastic (still nothing committed in direnv yet though).\n. ^ this commit adds a central log() function to ensure that all log outputs are normalized.\n. Looking good ! I'm still not convinced that the change is necessary (as discussed in #83) but code wins over words and I'm going to merge this. The only change if possible would be to move the .gitignore pattern in the root ; I find that it's hard to track what files are ignored when there are more than one .gitignore in a project.\nThe error message is not new so you can leave it at that. There is a bug in the test suite that I need to fix (DIRENV_CONFIG is changed in the last test).\n. I'm not convinced yet that it's the way to go. The go code looks good and I like the idea of having direnv dump publish to a 3rd file descriptor.\nMy biggest concern with this approach is that it's not obvious that the other .envrc directives are going to be ignored. I understand very well that shell scripting is not clean and that eval is a security concern but I would prefer if it was possible to merge the 0install environment with the one in the .envrc.\nThe best way to remove the evals (there is also one in the main prompt-command loop) would be to define an environment exchange protocol that is emitted by direnv and then parsed by bash/zsh/fish.\nLet's say direnv dump emits lines with KEY=value (with some escaping) and -KEY if one is removed.\n. Yes something like that would be fine by me. direnv_apply_dump could just be a direnv load <SHELL> [DUMP] command that takes the dump from either stdin or as a second argument and outputs shell exports that can then be evaled by bash. Since the output is guaranteed to come from that command I think evaling could be fine (even if not super elegant). But it can be something else, as long as it's not too big and solid it's fine by me.\n. Since the pipe doesn't work, maybe it would be less error-prone if the commands where passed as arguments to the stdlib function ?\ndirenv_load \"some command that ends with direnv dump\"\n. Cool, yeah I prefer the symmetry of dump/load. Have you found out why the unit tests are failing ? I'll have a further look tomorrow and hopefully merge it.\n. PS: I renamed \"$DIRENV_PATH\" to simply \"$direnv\" in master, I'll rebase and fix it tomorrow if you don't get around to it.\n. Sweet, thanks @gfxmonk . Merging in.\n. LGTM\n. Done\nOn 13 January 2014 14:38, Peter Waller notifications@github.com wrote:\n\n(and you'd long since fixed this, it looks like).\nI got an old version because you haven't updated the go1 tag, though, so\nplease do that!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/pull/93#issuecomment-32174081\n.\n. You've got the commit rights so feel free to push the last tag's commit on go1 next time if I forget it.\n. I forgot to hide them when doing the refactor. It's correct but I was hiding them previously to avoid the noise. I'll push a fix this weekend.\n. Hi @take,\n\nI'm not sure to understand. You run direnv allow ../.envrc but the message keeps coming back ? If that's the case I think I've found an issue in the actual code. I'll make a new release over the weekend with the fix.\n. I've just released v2.3.0 which should work fine now. Feel free to re-open the ticket if you're seeing the issue again.\n. LGTM\n. Thanks. It seems that for you it would be more useful if you could just run direnv exec /my-rails-app rake routes. But that would remove other use cases.\nAnyone else feel free to chime in.\n. @laggyluke alright, now it's either direnv exec some_dir some_command or direnv exec some_command\n. Ok. Can you open a new issue, I'm on the train right now. I believe the\nproblem is that the path shouldn't be made relative unless some component\nare shared between both paths if you know what I mean.\nOn 6 Feb 2014 12:37, \"George Miroshnykov\" notifications@github.com wrote:\n\nHey @zimbatm https://github.com/zimbatm, thanks a lot for such a quick\nresponse!\nEverything works fine, though the message direnv gives in my use case is a\nbit weird/wrong:\n$ direnv exec /opt/liiist/apps/frontend/bin/liiist-frontend\ndirenv: loading ../../opt/liiist/apps/frontend/.envrc\n...\n(the file is actually at /opt/liiist/apps/frontend/.envrc)\nPersonally I don't mind, as long as it works, so thanks again :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/pull/97#issuecomment-34318956\n.\n. Yes it's a good idea. You can add a use_ruby function in your ~/.direnvrc that does something like that.\n\n```\nuse ruby [version]\nuse_ruby() {\n  local ver=$1\n  if [[ -z $ver ]] && [[ -f .ruby_version ]]; then\n    ver=$(cat .ruby_version)\n  fi\n  if [[ -z $ver ]]; then\n    echo Unknown ruby version\n    exit 1\n  fi\n  load_prefix ~/.rubies/$ver\n}\n```\nThen use ruby-install to install your rubies and you're good to go.\n. Agreed it would be great. I've been thinking about that for a while but\nit's not implemented. Not sure why you think it is :)\nOn 1 Feb 2014 19:03, \"Judson Lester\" notifications@github.com wrote:\n\nI've been messing around with this approach and noticing that direnv seems\nto track modifications not only of .envrc and .direnvrc, but also files\nsources from there (I decided to source chruby.sh so that it'd still be\npossible to change ruby versions on the fly...) which is awesome but\nsurprising (not in docs?)\nIs there a way to hook a file into that watch process? It'd be great to be\nable to say something like \"direnv watch .ruby-version\" and have it run\nwhen ./.ruby-version changed.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/98#issuecomment-33880336\n.\n. Yes, direnv currently only tracks the mtime of the loaded .envrc and it's corresponding \"allow\" file (which lives somewhere in ~/.config/direnv/allow). The biggest mtime is then stored in the DIRENV_MTIME environment variable. On each prompt, direnv export is executed and if one of those two files has a mtime that's bigger than DIRENV_MTIME the env is reloaded.\n. Overall +1 for simplifying the output and making direnv less noisy. If coloring is not working between shells or problematic let's start with just the first change.\n. Ok that's cool. I'll add the doc a bit later.\n. I've got a fix in the rel-path-fix branch. If two paths don't have a common root ancestor then they are not made relative one to the other.\n. Thanks. This should probably go in a guide at some point but it's great to have it.\n. @gfxmonk, want to take a look at this ?\n. nice trick @gretel \n\n@timbertson sorry i missed your message. i don't really have a good idea of the best option except change the direnvrc like gretel did, but then it doesn't work for log messages by direnv outside of the .envrc context.\n. Abandoning this approach. Sphinx is too heavy for me.\n. tmux is problematic. It inherits environment variables from the caller but also seem to be loading the user's profile (resetting the PATH in the process) which gives you a mixed environment in the end. Because direnv depends on DIRENV_DIFF, DIRENV_MTIME and DIRENV_DIR and those haven't changed it thinks everything's fine.\nI need to make more research into the issue to fix it definitely. We already had something similar come up in the past and this workaround still applies in the mean time: https://github.com/zimbatm/direnv/issues/82#issuecomment-30242572\nMaybe we should add a direnv clean -- <command> [...] command that unload the current environment before executing the command.\n. So I did some spelunking, from the man pages:\n```\ndefault-command shell-command\n  Set the command used for new windows (if not specified\n  when the window is created) to shell-command, which may\n  be any sh(1) command.  The default is an empty string,\n  which instructs tmux to create a login shell using the\n  value of the default-shell option.\ndefault-shell path\n  Specify the default shell.  This is used as the login\n  shell for new windows when the default-command option is\n  set to empty, and must be the full path of the\n  executable.  When started tmux tries to set a default\n  value from the first suitable of the SHELL environment\n  variable, the shell returned by getpwuid(3), or /bin/sh.\n  This option should be configured when tmux is used as a\n  login shell.\n``\n. Just to recap, it's easy to reproduce the issue without direnv:export PATH=/woot:$PATH; tmuxthenecho $PATH` inside the tmux window, \"/woot\" would have disappeared since the profile has been reloaded.\nTo avoid the login I added set-option -g default-command \"exec /bin/zsh\" (or /bin/bash) in the ~/.tmux.conf. It doesn't load the ~/.profile for me, only the .zshrc. The $PATH still contains /woot but \"/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin\" are prepended to it so it's not a good solution either.\n. I currently have /bin/zsh as my default shell and ~/.zshrc and ~/.bashrc configured with the direnv hook. If all environment variables are set by the system and user profiles then it's fine, I can run /bin/bash from by zsh session and everything works properly. Each shell loads it's own rc but doesn't touch environment variables.\n. Too tired, here's an interesting ref for myself in the future: http://sourceforge.net/p/tmux/tmux-code/ci/master/tree/session.c#l243\n. Cool. If this works well then I'll make a guide of how to use direnv with TMUX.\nThe biggest issue I think is if you change environment variables instead of replacing them. Try using a export PATH=foo:$PATH in your .envrc and see if you have \"foo\" twice inside of the tmux session.\n. ping :)\n. Okay, thanks for the status update. I'll see what I can do to make the\nsituation better in the future but I think it depends more on tmux behaving\nbadly than direnv.\nOn 8 May 2014 18:29, \"Judson Lester\" notifications@github.com wrote:\n\nLooks like I was right: the first session on a new tmux server needs a\ndirenv reload, but not any subsequent. I've gotten used to watching for the\ndirenv \"new directory\" ceremony when I open a tmux and reloading if it's\nnot there. So: better but not complete.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/106#issuecomment-42579625\n.\n. Yeah, and last time I checked I remember having to go through multiple\nlayers of indirection to find where the env was defined. It wasn't\nstraightforward.\n\nI also remember thinking that tmux's env handling could be fixed as a\nmoderately hard task. Maybe we should report the issue upstream, we can't\nbe the only ones having these kind of issues. I'm on the move right now so\nI can't do it myself easily for now.\nOn 8 May 2014 19:02, \"Judson Lester\" notifications@github.com wrote:\n\nYeah, tmux is a ton better than screen, but the more I dig into it, the\nmore I see that it has its own design and specification issues. The\noriginal server source environment is, at least, poorly documented.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/106#issuecomment-42583580\n.\n. Since a new install of bash/zsh is started maybe it can be put in the .bashrc/.zshrc ?\ndirenv reload is probably not ideal though because it forces all shells to reload on the next prompt. We probably need a new evaluable command that forces the reload.\n. I'd rather have tmux fix their behavior than add more complexity to direnv.\n\nThey should either inherit the environment and then pass it to the inner-shells as is. Or, wipe the whole environment and start all the inner-shells as login shells. The issue is that they do something in the middle and try to be smart by removing some of the environment. That is probably causing more issues to them as well.\n. eagle eyes badge earned :)\n. Yeah or at least use the same lookup mechanism\n. Thanks for the report @jmuheim, it will be fixed in the next version of direnv.\n. The .envrc is currently evaluated in a bash sub-shell and the environment variables are exported to direnv. That allows us to have zsh and fish compatibility (and make sure you don't get halfly evaluated environments in cases where there is an issue).\nAliases would be great but I don't really know if they're doable in a cross-shell way. The current workaround is to add a directory in your path and define your aliases as shell scripts.\n.envrc\nbash\nPATH_add bin\nbin/deploy\n``` sh\n!/bin/sh\nbundle exec rsepc && gps origin && BRANCH=master cap production deploy\n```\n. yeah it's best to open new issues.\ntry adding PATH_add . to the .envrc. Once the project root is in the path the script will be found by bash.. Sweet. How common is cpanm in the Perl5 world ? Just wondering if any reasonable perl developer would take this approach or not.\n. In case it's not accepted, you can easily have your own extensions in ~/.direnvrc. I have a couple of them I'm not sure are going to be generally useful there.\n. Thanks, you have now been promoted to the perl+direnv integrator :)\n. Good catch with the patch. @halkeye just added the perl support a few days ago so it's still a bit young.\nDirenv doesn't inherit environments unless you tell him to do so, so if you're transitioning from A to A/B it is first going to restore the original environment and the load the one from A/B. There's a command called source_up in the stdlib if I remember correctly that should help you.\n. Sure, thanks for the feedback. I also wanted to make more user-friendly documentation but I'm not very good at that.\n. 237e249 adds the layout_perl doc to the man pages. The .ronn files are just Markdown that's transformed into the roff format using the ronn ruby gem.\n4e9772a refactors the perl layout a bit. Please let me know if any issue has slipped in as I don't have a perl environment under hand.\nI agree about the doc quality and really wish someone intermediately-new would step up to help me out. It's quite difficult for me to put myself in the shoes of a new user as I have been using this tool for so long. My eyes glance over the docs and are just very bored :)\nThe nested idea is interesting and should be discussed in another ticket. I don't mind if we break things (gently) for the better.\n. I've made another attempt at cleaning the docs. It's really painful for me to do that. Oh, and we have a new website: http://direnv.net\n. Sweet. As the direnv author I have zero view into who's using the tool but likewise, I'm using it every day. Glad it can be useful to others too !\n. Thanks @JaviMerino !\n. Thanks @punitagrawal. The man pages are actually generated from the .ronn file so there is a risk that your fix will be reverted in another man update.\n. I'm thinking of moving the man generation from ronn to something else (md2man ?) since ronn doesn't seem maintained anymore.\n. direnv is getting an official debian package ? :dancers: \nIt's the reverse for me, I don't have any experience with groff. What's the rule, if a line starts with a dot it needs that prefix ? I don't think I can fix that quickly yet so I'll merge the patch as a temporary measure.\n. Great now Github just closed the issue.. You can keep replying on that issue or a new one as you prefer\n. On 24 April 2014 16:26, punitagrawal notifications@github.com wrote:\n\nOn Thu, Apr 24, 2014 at 10:24 AM, zimbatm notifications@github.com\nwrote:\n\ndirenv is getting an official debian package ? [image: :dancers:]\n\nYeah, I should've informed you before I started. It is my first debian\npackaging effort and I wasn't too confident so thought I'd wait until I've\ngot something almost done. I am nearly there and hope to have something\nuploaded in the next week if not earlier. I'll email you with the package\nurl once it's uploaded.\n\nWell I'm just happy if you manage to do it. I had a go a few times myself\nbut didn't manage to finish it. I always got stuck somewhere. Debian's\npackaging is one of the most arcane that I know of.\n. ok, I had to fix md2man a bit but we now have a \"md2man\" branch with escaped lines when they start with a dot. Do you want to have a look at the generated man pages and see if there's anything off ?\n. Good catch. The EnvDiff needs to be changed and also check for the existence of the key in the map.\n. Ok :)\n. Looks good. Can you also add an integration test ?\n. The integration tests are located here: https://github.com/zimbatm/direnv/blob/master/test/direnv-test.sh . I would make one folder for each scenario and test if the env exists after the run or not.\n. Perfect, thanks a lot :)\n. Hi,\nDirenv probably doesn't handle windows paths very well. The assumption that path separators are represented by \"/\" and PATH separators \":\" has been made in multiple places in the source code.\nI'm interested in having windows support but don't have a working environment. I'm happy to accept patches and provide guidance if you're interested.\n. Thanks. I should try and make a first pass on the obvious ones. What times\nare you available this week ? My email: zimbatm@zimbatm.com\nOn 19 May 2014 02:12, \"Roger Qiu\" notifications@github.com wrote:\n\nI'll need guidance on the go code. If we could just log all the steps when\nthey are running on Windows, it should be easy to solve. Perhaps a pair\nsession over skype/screenshare?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/116#issuecomment-43459442\n.\n. Thanks !\n. I think you will find a lot of different places where this has to be special-cased. Basically everywhere where path_add is used in the stdlib and probably more. I would prefer if we didn't have to sprinkle the code with cygwin conditionals and find a model that works properly for both windows and unix platforms.\n. I'm creating a Cygwin issue milestone where all the cygwin-related issue can be put. I'll be scanning the code for obvious unixism and add some easy tickets to tackle if you want to give it a go.\n. #123 is probably a bit more generic version of this ticket\n. It would be great if you could find out more details about the conflict. One issue I suppose is that without the cygpath command, the PATH is going to look like \"C://path/to/pwd:/cygwin/c...\" and the apps are going to split on the : character between C and //.\n. Yeah, we should probably fallback on %userprofile% or something in Windows.\nMy understanding is that most apps store their application data under %appdata% under Windows no ? Direnv supports having a custom config directory if you set the DIRENV_CONFIG environment variable to the path that you want to use.\n. I don't have a windows environment available but if you want to submit a PR I would be interested. Go has this nice feature where files are only compiled for the desired targets.\n. If you run a window command from withing that environment, the PATH is going to be all wrong. How does cygwin solve that issue ?\n. Maybe we should just produce a cygwin version of direnv that handles the paths like in other unix environments. It means replacing path.Join and a couple of other commands by our own.\n. It should be fine. #174 also introduced more escaping cleanups\n. Interesting, thanks for all the material. CMD support is probably too legacy and require too much effort/hacks to work properly.\n\nApart from msys I also found an independent port of bash: http://win-bash.sourceforge.net/ Not sure what it's worth though.\nFound this article on how to sign script: http://blogs.technet.com/b/heyscriptingguy/archive/2010/06/17/hey-scripting-guy-how-can-i-sign-windows-powershell-scripts-with-an-enterprise-windows-pki-part-2-of-2.aspx . According to http://technet.microsoft.com/en-us/magazine/2008.04.powershell.aspx?pr=blog I could also get a SSL cert for direnv.net and use it to sign the script.\n. Cool, thanks for looking that up. Are you planning on working on this further ? I would be keen on adding first-class windows support but don't have a development environment.\n. Alright that's cool too. The core logic is inside of cmd_export.go which is executed before every shell prompt. Basically it looks for the file and stores a diff inside of an environment variable. If you have a facility to keep a thread running inside of PowerShell you might not have to spawn a new process on each prompt and do that. Also bash is a requirement for direnv which might not fit very well with the windows environment.\n. That's what's used to parse and execute the .envrc files. I wanted to keep the bash syntax and not re-invent a language. I bet it's possible to ship bash as a standalong executable alongside direnv in windows but yeah, something else might be preferable for PowerShell.\n. Sounds good!\nIs the Linux version of PowerShell close enough to be a realistic target for testing?. yes if PowerShell for Linux can be installed under WSL then it's fine for development, most likely it will also be installable in Travis. I wrote a quick version here: https://gist.github.com/ee97a194d77f162550b0347890eff120\nIt didn't require to extend direnv itself as PowerShell can read JSON. As you can see I decided to hook into the Global:prompt() since direnv is working better when evaluated before the prompt is displayed (instead of overriding cd).\n. @f0ff886f I don't use PowerShell day-to-day so that was more of a quick experiment, with the hope that somebody would pick this up and submit a PR. @f0ff886f can you give me the output of direnv status?\nIt looks like direnv is not able to load the output from the stdlib, which is sourced by running eval \"$(path/to/direnv stdlib)\". If direnv is not able to find itself, the stdlib would not load.. This might be a windows path formatting issue again. The direnv exec path has forward slashes but not the others.. > Thanks for all your hard work on what's become a totally indispensable utility for me!\n\nThanks, this made my day.\n\nRVM integration has often been problematic in the past. Maybe they started using bash4-only features or changed how rvm is loaded. direnv loads rvm on first invocation: https://github.com/zimbatm/direnv/blob/4346b84e9a70286e5491420caddc890aac36cbb7/stdlib.sh#L341\nYou can try to add set -x at the top of the .envrc, this will output all commands that bash is executing. Hopefully this can reveal what the last command is and maybe why it's failing.\n. Heh :)\nHow do you activate rvm in your bash/zsh. source /Users/danielsh/.rvm/scripts/rvm ?\nCan you also run the following:\nfind -L '' /Users/danielsh/Code/CLMP/CLMP-Mongo/.rvm/hooks -iname 'after_cd*' -type f\necho $?\n. Does the /Users/danielsh/Code/CLMP/CLMP-Mongo/.rvm/hooks folder exist ? It seems weird that the find command's find parameter is empty. It should have been ~/.rvm/hooks I think.\nPotentially you could set +x in your shell and run the same rvm command and try to catch the difference. I'm sorry but RMV is a big pile of shell scripts and quite hard to debug.\nIt seems that you're maintaining one gemset per project. What I do is use the layout ruby command that's part of direnv's stdlib. It does basically the same but all your gems are located under .direnv/ruby-<ruby version> instead. It also setups bundler to create binstubs so you don't have to type bundle exec all the time.\n. Thanks @doloopwhile . Symlink resolving is problematic, I don't really know what's the best approach.\nJust by inspecting the path I would expect direnv to look inside of ~/foo and ~/ and not ~/gocode-foo.\nWhat if foo is itself inside a ~/projects folder and inheriting from a parent, should the parent be gocode-foo or the projects folder ?\nMaybe the simplest approach is to not resolve symlinks at all. Inside of foo you can add a source_env ~/gocode-foo directive to inherit the properties of that envrc. What do you think ?\n. I think this opens a cans of worms but the standard behavior on UNIX seem to be to resolve the symlink. I mean getwd() always returns the resolved current directory so unless I start reading the PWD environment variables (which may or may not be set by the shell) it's not really possible not to resolve the symlink anyways.\n. Hi,\nthe .envrc is evaluated in a bash sub-shell with no .bashrc loaded or anything. Is gvm relying on a shell extension hook like direnv ? One solution would be to add that hook into the .envrc. You can also extend the stdlib by creating a ~/.direnvrc file.\n. You can do something like this.\nCreate or add to your ~/.direnvrc:\nuse_go() {\n  # FIXME: gvm root might vary\n  source $HOME/.gvm/scripts/gvm\n  gvm use \"$@\"\n}\nAnd then in any .envrc file:\nuse go 1.4\nI haven't tested that out. Can you add it to the wiki if it works for you ?\n. In direnv use is a dispatch command. Both will work.\nIf you're not using direnv and just installed gvm using their install script, it writes the source ... line in your ~/.bashrc. Restarting your shell would probably fix the issue (or log out and back in).\n. How does your use_ruby look like ?\nI think that chruby sets environment variables to select the ruby version so direnv should properly revert those changes when going out of the directory. If you're using chruby's auto-switching feature there might be a conflict between direnv and chruby.\n. Hey nyarly,\nI think you also need to source that chruby.sh file at the start of the use_ruby function. direnv starts a bash sub-shell to evaluate the .envrc and the .bashrc is not supposed to be loaded in that context.\nAccording to https://github.com/postmodern/chruby/blob/master/share/chruby/chruby.sh#L32 chruby is also using environment variables so it should be fine.\nAlternatively you can also use load_prefix ~/.rubies/$version instead of chruby.\n. Hey @sknop, I think you can achieve what you want by changing the PS1 no ?\n. not tested but something like that:\nsh\nin_direnv() {\n  if [ -n \"$DIRENV_DIR\" ]; then\n    echo -n -e \"\\033];In DirEnv\\007\"\n  else\n    echo -n -e \"\\033];Out of DirEnv\\007\"\n  fi\n}\nPS1='$(in_direnv) > '\n. Just fixed the script, it's working now\n. Hi @mattford63, what would happen if you had two terminals that cd into the same customer folder?\nMy main issue with implementing the unload hook is that it supposes some sort of system-wide state. The second issue is, what would happen if the terminal is closed? I think this can be fixed but it would be fairly easy to leave the system in an inconsistent state.\n. Yeah that would be useful. I haven't figured out how to deal with multiple\nshells entering or leaving the folder so if you have an idea let me know.\nOn Thu, 5 Jan 2017, 02:19 Adrien Smith, notifications@github.com wrote:\n\nI've got a case where this would be useful as well. In order to work on a\nRails project that I'm part of, I need to run bundle exec rake\nsunspot:solr:start: when I enter the folder. However, once I leave that\nfolder I'd like to bundle exec rake sunspot:solr:stop, because I don't\nneed to leave the solr server running in the background taking up\nresources. Of course I could simply try to remember to stop it when I'm\ndone with it, but that would kind of defeat the whole point of using direnv\nfor this in the first place.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/129#issuecomment-270546438, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAMsLLLGsMnnS42dSTRl6A8-MFwSj9Pks5rPFMYgaJpZM4CGMyQ\n.\n. Interesting, thanks for sharing. In this case I would say that it's the presentation software's responsibility to prevent the screen going to sleep, just like when a video player is in full screen.. Most use-cases here would be solved with a process manager. direnv doesn't maintain a running process so it would have to be a new project (dirsvc?).\n\nI think the realization is that we have system-level services, per-user services and now we want per-project services. In systemd, per-user services are started when the first user sessions opens and stopped when the last session closes. Similarly we want the per-project services to start when the first shell opens the project, and stop when the last shell leaves it.\nSimilarly to direnv it would have a shell hook. It would report directory enter and leaves to the daemon, which would then in turn start and stop the services if a specific file is found (.svcrc?).\n$ dirsvc status\n/home/user/src/project1 (shells: 3, services: 4)\n/home/user/src/project2 (shells: 1, services: 1)\n$ dirsvc stop /home/user/src/project2 # forcefully close a session if the shell has disappeared\n$ cd /home/user/src/project1 # shell hook adds this shell to the session\n$ dirctl status # show the running processes for this folder\n* mysql: running\n* redis: running\n$ dirctl logs mysql\n...\n$ dirctl restart mysql\n...\nPotentially the hook could also be implemented in tmux which would give a better reporting facility.\nThe service definition format is unspecified here. It might make sense to adopt something existing like the systemd units.\nA last note: the progression between per-system, per-user and per-project is also a concern for build and runtime dependencies. This is already solved by Nix.. Yeah makes sense, it would be easier to watch the lifetime of each shell that way. I guess tmux fits that bill already.. Thanks cesarb\n. I know what you mean but this would introduce ruby as a build dependency. Currently it's possible to go get github.com/zimbatm/direnv which wouldn't be possible if stdlib.go was generated on the fly.\n. It was like that a while ago but I wanted vim's  syntax highlighting of the\nbash code. The rest of the code is statically checked, here at least vim is\ngoing to highlight blatant errors.\nIs it hurting your sense of purity to have committed code that could have\nbeen generated ?\nOn 30 Jun 2014 04:56, \"OMOTO Kenji\" notifications@github.com wrote:\n\nI see.\nI like to suggest writing script directly in stdlib.go with multi-lined\nstring literal.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/zimbatm/direnv/pull/131#issuecomment-47492957.\n. Hi, thanks for the kind words.\n\nWhere did you see this text ? I tried grepping in the repo but couldn't find it. Let me know if you see any other mistakes.\nCheers,\nzimbatm\n. Re-open if you have the text location. I had another look but couldn't find it.\n. Hi irontoby, thanks for the nice writeup.\nWhat you say is true but it was my understanding that the hashing would be reset when the PATH environment changes ; that's what is happening in zsh for example. Maybe older versions of bash don't have that feature ? (OSX for example distributed an outdated 3.x version).\nOtherwise it shouldn't be to hard to improve https://github.com/zimbatm/direnv/blob/master/shell_bash.go to output a hash -r when the PATH has changed.\n. On 30 July 2014 18:09, irontoby notifications@github.com wrote:\n\nSo it seems that maybe some user education is the proper thing here [image:\n:smile:] Thinking about this further, I think it would be better to add\n$PWD/bin to the path instead of ./bin, do you agree?\nThat seems to be the issue. Maybe I can detect relative paths in the PATH\nenvironment and only issue the hash -r if that's the case. Do you know\nabout direnv's stdlib http://direnv.net/#man/direnv-stdlib.1 ? It's a\nbunch of utility functions that are available in the .envrc context (the\n.envrc is loaded in a new bash shell). You could replace your line by\nPATH_add bin which makes sure to expand the bin path, prepends it and\nalso avoids the common issue of forgetting to add $PATH in export\nPATH=$PWD/bin:$PATH (which usually breaks everything) .\n. Sweet, thanks a lot\n. Thanks @ghickman \n. I was thinking about that the other day and wondering what was the best approach. Maybes changing the function's interface to layout python [exec] where exec is an optional parameter pointing to the python version you want would do the trick.\n\nAnother issue I'm having occasionally also is that virtualenv seems to break whenever I update the version of python.\n. Thanks. Do you mind having a look at #136 and let me know what you think as a python developer ?\n. Thanks. The last commit uses .direnv/python-$python_version as the virtualenv folder in case you want to have a look\n. > What was your reasoning for making the virtualenvs relocatable?\nI wanted to allow users to rename or move their project folder without having to re-build the virtualenv. Without that option binary paths are absolute and still pointing to the previous folder.\n. That's quite bad indeed. What if --pyhton=python3 is added to the command ?\nOtherwise I'll remove it altogether.\nOn 6 Aug 2014 10:25, \"George Hickman\" notifications@github.com wrote:\n\n@zimbatm https://github.com/zimbatm \u2013 I've added the relocatable call\nback to the Python 2 version but left it out of the Python 3 one.\nIn testing [on OS X] I've found creating a Python 3 venv with a virtualenv\nbin installed under Python 2 causes global site-packages bleed when\nsubsequently calling the --relocatable flag but this is not the case with\na virtualenv binary installed under Python 3.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/zimbatm/direnv/pull/137#issuecomment-51311997.\n. Alright then :)\n\n@ghickman hope you don't mind me committing a different change. this PR has some unnecessary changes.\n. no worries, it's great to have feedback on the tool\n. I had a quick look, add-zsh-hook seem to be causing issues for some oh-my-zsh users because it's too recent: https://github.com/robbyrussell/oh-my-zsh/issues/748#issuecomment-37862691\nIt's possible that adding the -g option to the typeset declaration might solve your issue. Would you mind changing the line to typeset -ag precmd_function and let me know if it solves your issue ?\n. Thanks, it's possible that the go package doesn't provide the /etc/profile.d/go.sh anymore. I'll make the necessary changes for the next release.\n. v2.5.0 on it's way. sorry for the wait\n. Hi @milgner,\nwhat is the actual path of direnv ? It's possible that path resolution is broken on windows as it didn't get that much testing.\n. Hey @bbense,\nShell support is basically one file, see the shell_bash.go for example and\nthe update the DetectShell function in shell.go\nThe most difficult part is to figure out if there is any hook that can be\ninvoked before displaying the prompt. If not then it's possible to inject\none in PS1 or alias the cd command.\nThen there is the serialization of the environment state into commands that\nare understood by the shell. I guess you can reuse the one declared for\nbash.\nLet me know if you're hitting any roadblocks\nOn 12 Nov 2014 16:43, \"bbense\" notifications@github.com wrote:\n\nI think this would solve a problem many of our users have, but most of our\nusers have tcsh as the default shell. Are there big showstoppers to making\nthis work in tcsh? Or is it just a matter of figuring out the correct\nhooks?\nI'll take a look as time allows, but any hints as to where to start would\nbe great.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/zimbatm/direnv/issues/144.\n. Nice. Should I adapt the ShellEscape function to accept an escape pattern ? It seems like you took it and removed the escaped = true bits or is there something else ?\n. Aha there it is :)\n\nThat's cool, let me know when you've played around enough that you feel\nconfident about the change.\nOn 13 November 2014 16:12, bbense notifications@github.com wrote:\n\nTo be honest, I saw that the default ShellEscape was putting a $ in front\nof the value and that the fish version wasn't so I just cut'n'pasted from\nshell_fish.go to see what would happen. It worked, but I haven't had time\nyet to do any detailed testing. I only spent about 30 mins on this during\nlunch, and I'm fairly surprised it worked at all. I wouldn't make any\nchanges based on my code just yet.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/zimbatm/direnv/issues/144#issuecomment-62917928.\n. Thanks for the clarifications.\n. tcsh support was added in direnv v2.6.0\n. It's all tmux's fault :p Can we get them to just use the current env\nwithout messing with it, or create a new login session instead ?\nOn 12 Nov 2014 17:53, \"Alexey Chernenkov\" notifications@github.com wrote:\nThis issue may have some relation #106\nhttps://github.com/zimbatm/direnv/issues/106\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/zimbatm/direnv/issues/145#issuecomment-62761213.\n. For tmux users I propose the following solution: https://github.com/zimbatm/direnv/commit/9419ef5e29a3fe26539c9aa4050f9853debd52f5\n. Sorry for the wait. Make another PR if you want to address the other comment. I'm going to make a release pretty soon.\n. Thanks !\n. Please create a new issue instead of hijacking another thread. I recommend also putting the output of ls -la ~/.config/direnv. Thanks @toao, I think it will be fine like that.\n. Thanks !\n. Hi @danielmbarlow, thanks for your contribution. I have left a few comments on the changeset, hope I don't come off as defensive. How is your direnv experience so far ? I'm interested in getting general feedback too.\n\nCheers,\nzimbatm\n. That's why direnv is best configured in the .bashrc, it is only needed for interactive bash sessions. The bash extension mechanism happen to depend on an environment variable (PROMPT_COMMAND) but it really is a bash configuration like shopt. EDIT: but I might be confused myself.\n. Closing as it no longer merges\n. Hi @avnik, thanks for the PR. Apart from minor issues I think it's looking quite good. I'll merge it once those are fixed.\n. @avnik are you thinking of resuming work on this-one ?\n. Scratch that, it's better merged and improved later if necessary\n. Hi @genehack , I don't mind adding new commands to the stdlib.\nMy own guideline is that I start by adding commands to my own ~/.direnvrc and when I find them to be generally useful and stable I would move them to the stdlib. I can also see how that command could be useful to others.\nIn terms of naming, source_up_all might be better.\n. Yeah it's fine to add new internal commands as well. I had to do that for expand_path for example because there is no good cross-platform shell or system command to do that.\nHere you can see how the stdlib command just forwards to direnv: https://github.com/zimbatm/direnv/blob/master/stdlib.sh#L52\nAnd here is the implementation: https://github.com/zimbatm/direnv/blob/master/cmd_expand_path.go . The Private: true flag hides it from the normal help output.\n. If a command is executed in the ~/.direnvrc it's executed whenever a\n.envrc is loaded, in effect making it a global config.\nHere is a direnvrc skeleton to get you started:\n```\nsource_up_all() {\n  # your code here\n  echo Hi\n}\nsource_up_all\n```\nOn 21 Jan 2015 02:03, \"John SJ Anderson\" notifications@github.com wrote:\n\nSo, thinking about this more, I think this is less a new command, and more\nlike a global configuration flag affecting the code in\nhttps://github.com/zimbatm/direnv/blob/master/cmd_export.go.\nAnother (probably better) way to implement what I want would be to have direnv\nhook $SHELL take an option flag, like --load-all, which would cause it to\noutput a different subcmd in the hook, something like direnv export_all\n$SHELL.\nEssentially, I want a global way to always force multiple .direnv files\nto \"layer\" upwards, without having to put source_up() in each one of\nthem.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/zimbatm/direnv/issues/154#issuecomment-70772225.\n. This is how bugs should be reported, wonderful in depth analysis of the\nproblem, and a proposed solution.\n\nWhat if direnv fails, wouldn't it make sense to override the exit status in\nthat case ?\nOn 24 Jan 2015 02:41, \"Matthew Sykes\" notifications@github.com wrote:\n\nThe exit status from eval is the exit status of the command that was\nevaluated and the current bash hook uses eval to process direnv export\nbash ahead of an existing $PROMPT_COMMAND. This approach as the side\neffect of eating the exit status of the last shell command that was\nexecuted.\nFor example, executing /usr/bin/false returns 1:\n$ /usr/bin/false; echo $?\n1\nand executing /usr/bin/true returns 0:\n$ /usr/bin/true; echo $?\n0\nNow it's fairly common for a bash prompt to provide some indication of\nwhether or not the previous command was successful or not. A really basic\nprompt would simply print out the exit status of the previous command by\nreferencing $?. For example:\n$ prompt_command() { export PS1=\"[rc=$?]\\$ \"; }\n$ export PROMPT_COMMAND=prompt_command\n[rc=0]$\nWith this prompt command in place, calling true or false results in the\nexpected prompt:\n[rc=0]$ true\n[rc=0]$ false\n[rc=1]$\nIf I then evaluate the direnv hook, the behavior changes:\n[rc=1]$ eval \"$(direnv hook bash)\"\n[rc=0]$ true\n[rc=0]$ false\n[rc=0]$ echo $?\n1\nYou'll notice that the prompt's view of the exit status does not reflect\nthe status of the previously executed command at the prompt. This is due to\nthe fact that $PROMPT_COMMAND now evaluates direnv export bash prior to\nprompt_command:\n[rc=0]$ echo $PROMPT_COMMAND\n_direnv_hook;prompt_command\n[rc=0]$\nIf I simply change the bash _direnv_hook function from:\n_direnv_hook() {\n  eval \"$(direnv export bash)\";\n};\nto\n_direnv_hook() {\n  local previous_exit_status=$?;\n  eval \"$(direnv export bash)\";\n  return $previous_exit_status;\n}\nthings begin to behave as expected:\n[rc=0]$ true\n[rc=0]$ echo $?\n0\n[rc=0]$ false\n[rc=1]$ echo $?\n1\n[rc=0]$\nBasically, _direnv_hook should preserve the exit status at entry and\nrestore it at exit. If it doesn't, breaks a number of customized bash\nprompts.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/zimbatm/direnv/issues/155.\n. I was able to reproduce the issue on both 3.2.53 and 4.3.11. If the ordering in PROMPT_COMMAND is changed the issue goes away. In the doc I'm insisting of installing direnv last in the ~/.bashrc because of issues like that: https://github.com/zimbatm/direnv#bash . Still worth fixing though.\n. Alright. It would be nice if it was possible to export functions and aliases but it seems like an acceptable solution for now.\n. Sweet, thanks @gfxmonk all this looks good to me\n. I like autoenv because it's very simple, it's one file: https://github.com/kennethreitz/autoenv/blob/master/activate.sh . That means it's a bit unfair to ask it to do a lot of things. Direnv has more features but is also generally more complex code-wise.\n\nThe main difference is that autoenv doesn't know how to unload an environment. It means that over time when you cd into various projects settings might accumulate, this can lead to situations where one shell in the same folder can execute a command and not the other. I don't have a first hand experience to know if it's a problem or not.\nBoth have a security mechanism to not load arbitrary code.\nautoenv loads .env files which are a standard established by the foreman project, direnv loads .envrc files which are bash files whose exports are going to be imported in the current shell.\ndirenv hooks into the shell more nicely. autoenv overrides the cd command but other commands such as pushd and popd can also change directories.\ndirenv supports bash, zsh, fish and tcsh and vim. it's relatively easy to add support for more shells. autoenv supports bash, maybe zsh too\n. direnv export is executed before every prompt (see direnv hook) but is fast enough that it's not noticeable. bash is invoked only when a new .envrc is detected. the result is then imported into the current shell with also some state in the DIRENV_* environment variables. this is then used in the next executions of direnv export. All this complexity means that it's easy to re-load environments when the .envrc file is changed, or switch/unload environment when going from one project to another.\n. When an environment variable gets changed the original version is stored inside of the DIRENV_DIFF environment variable. This is what's used to restore the original version.\nIf you want to get more details into the heuristic, this is where all the magic is happening: https://github.com/zimbatm/direnv/blob/master/cmd_export.go\n. For now I've made an entry in the wiki: https://github.com/zimbatm/direnv/wiki/Autoenv\nThanks for asking these questions,  it's always interesting to have that kind of conversation to me\n. I'm also mentioning it in the main README: https://github.com/direnv/direnv/#similar-projects\nIs that not enough? I'm happy to point to other projects, I really like it when other projects do that as well.. Hi @fernandomora,\nI wasn't able to reproduce the issue unless SHELLOPTS is explicitly exported. Is it possible you are doing such thing ? When exporting SHELLOPTS the parent bash process would complain that it's read-only when direnv would try changing it.\n. It's probably reasonable to merge though given that it's a read-only variable.\n. Well done !\n. Hi Tony, the .envrc file is actually loaded in bash and the environnent\nchanges are then exported to your shell.\nOn Mon, 20 Apr 2015 22:15 Tony F notifications@github.com wrote:\n\nHello,\nI'm running direnv v2.6.0 with Fish and simply trying to set some\nvariables.\n.envrc is:\nset -x PATH /opt/chefdk/bin /Users/tmf/.chefdk/gem/ruby/2.1.0/bin /opt/chefdk/embedded/bin /Users/tmf/bin /usr/local/bin /opt/local/bin /usr/local/bin /usr/bin /bin /usr/sbin /sbin /opt/X11/bin\nset -x GEM_ROOT /opt/chefdk/embedded/lib/ruby/gems/2.1.0\nset -x GEM_HOME /Users/tmf/.chefdk/gem/ruby/2.1.0\nset -x GEM_PATH /Users/tmf/.chefdk/gem/ruby/2.1.0 /opt/chefdk/embedded/lib/ruby/gems/2.1.0\nWhen I change into this directory, direnv spits out a bunch of information:\n\u27a4 cd nrdecor-chef\ndirenv: loading .envrc\n++ set -x GEM_ROOT /opt/chefdk/embedded/lib/ruby/gems/2.1.0\n++ set -x GEM_HOME /Users/tmf/.chefdk/gem/ruby/2.1.0\n++ set -x GEM_PATH /Users/tmf/.chefdk/gem/ruby/2.1.0 /opt/chefdk/embedded/lib/ruby/gems/2.1.0\n- popd\n- popd\n- /usr/local/Cellar/direnv/2.6.0/bin/direnv dump\nI wouldn't mind that, but then it doesn't actually make any of the changes\nto my env:\n\u27a4 env | grep PATH\nPATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin\nAm I missing something obvious here? Is there a specific format for\n.envrc? Do I need to escape the -x somehow?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/zimbatm/direnv/issues/164.\n. To be fair I think the doc could explain that better :)\n. Nice, I didn't know about environment modules. How does it transfer the environment variables to the shell ? Probably a hook of some sort but I didn't find anything in the doc.\n\nThe .envrc is evaluated by a bash sub-shell so it should be possible to use moduel load something otherthing in it. module unload would be automatic once you exit the directory (if I understand what it's doing well).\n. Sweet, do you mind adding an entry on the wiki on how you did it ? https://github.com/zimbatm/direnv/wiki#tools-integration\n. Note that only environment variables that are touched by the .envrc are restored so it might compete with other invocations of module load\n. Hmm, you didn't have to setup an alias or function before ? The base sub-shell is invoked with --noprofile --norc so it shouldn't pick up anything from the ~/.bashrc\n. Okay, thanks for the clarifications. I suspect we're missing a --nodontloadanythingoforreal flag to force bash to be pristine.\n. Nice. You can add it in the wiki if you want: https://github.com/zimbatm/direnv/wiki#tools-integration\n. Ok I think that this issue can be closed now. Already done at the bottom of the README\n. No worries. Is rake invoked from the shell or from another program ?\n- bash (with direnv) -> rake\n- IDE / Other programe (without direnv) -> rake\n. Hmm, what is the error you're getting ? The only difference I can think of is that the environment variable value would not be the same somehow. Try printing it and see if it's correct.\n. Did you export the environment variable in the .envrc ?\nIt should look like:\nexport MY_ENV=foobar\nOn Tue, 19 May 2015 at 15:15 Andrew Hunter notifications@github.com wrote:\n\nI'm not getting an error - it's just not using the file, so the\nenvironment variables aren't getting set.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/zimbatm/direnv/issues/168#issuecomment-103515419.\n. Glad you found it !\n. Hi,\n\nI don't have a strong opinion about that. It should at least notify that it\ncouldn't load the file.\nWhat about just [[ -f ../.envrc ]] && source_env .. in your case ?\nOn Tue, 2 Jun 2015 20:20 Peter Waller notifications@github.com wrote:\n\nI agree. I'm sure a contribution would be welcomed on this one.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/zimbatm/direnv/issues/169#issuecomment-108064499.\n. Sounds good.\n\nNote that the .envrc is loaded in a bash sub-shell so you don't need to\nworry about bashism. The env is then transferred to direnv which in turn\nexports the diff is the proper format to the target shell. It's a bit\ncomplicated but it allows the user to have a non-posix shell\nOn Wed, 3 Jun 2015 08:47 gerhard notifications@github.com wrote:\n\nI clearly didn't understand direnv well enough. I've explored the codebase\na bit and this is what I've settled on short-term:\n! [ -f ../.envrc ] || source_env ..\nI'm using [ ] which is a test alias and will work in every POSIX shell. [[\n]] only exists in bash.\nI'm using || instead of && so that it plays nicely with the errexit\noption (a.k.a. set -e).\nLong-term, I would like source_env to handle this. It would make .envrc\nfiles leaner and would be more user-friendly.\nGoing to convert this into a PR.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/zimbatm/direnv/issues/169#issuecomment-108234422.\n. Thanks @gerhard \n. Closing in favour of #209\n. Thanks. I would like to add the support for it instead to make direnv adheres to the xdg spec. It allows to unclutter the home directory.\n. Wow nice. Mine wasn't looking as good :)\n\nbash\nuse_nix() {\n  source \"$HOME/.nix-profile/etc/profile.d/nix.sh\"\n  export NIX_PATH=/nix/var/nix/profiles/per-user/$USER/channels\n  export NIX_PROFILE=$PWD/.direnv/nix\n  load_prefix \"$PWD/.direnv/nix\"\n}\n. It's a great idea.\nMost of the necessary mechanism is in place to integrate that into direnv directly I think. It would be nice if the user could just add a direnv cache directive into his .envrc to enable caching and then have direnv reload also invalidate the cache like you said.\nCache would be stored under ${XDG_CACHE_DIR:-$HOME/.cache}/direnv/$shasum.cache and only contain the relevant diff to avoid the issue with dynamic variables like the SSH_AUTH_SOCK.\nThere are two drawbacks to this approach which is why the cache wouldn't simply be enabled for everyone:\n1. If the diff is stored then depending on the original environment some changes might get lost. There is a scenario where PATH_add might be a noop in one case because the PATH already has that given directory but might be necessary for other shells.\n2. Change tracking is only done on the .envrc at the moment. Any other changed file needs the direnv reload to be taken into account. But that's already the case, it just exacerbates the problem.\n. Thanks for putting so much thoughts into this. I feel that ideas are still a bit fuzzy but we're still exploring the thought-space.\nThe issue of change tracking has already come up when using source_env or source_up stdlib functions. In those cases there are two defects: change tracking only happens on the parent .envrc and the security framework is bypassed. I don't know how practical it would be to authorize a chain of .envrc and that's a different topic but I think change tracking is worth investigating on it's own ; caching just exacerbates the problem.\nOne possible implementation would be to introduce a new environment variable ( $DIRENV_STAT ?) that contains the list of files to track against the envrc and allow file mtimes. Even without caching, it would be useful on it's own. The only downside is that direnv's execution time on every prompt is linear to the number of files. It's probably fine on SSDs but what if for example the whole nixpkgs is a dependency ?\nBack to the subject of caching, I think I get what you mean; not everything is cache-worthy. In fact a single .envrc might contain both things you want to cache (nix execution) and things you don't want to cache (a randomly-generate $TMPDIR). I also believe that the .envrc should be reloaded if the cache would be invalidated so both direnv and the cache should track the mtimes of the cache's dependencies.\nIt would be great if bash supported closures. We clearly have before and after clauses, \"before\" for early-exit when the cache is valid and \"after\" to store the cached results. The closest I can think of would be:\nbash\ncache <cache-name> <command> <command args>\nExample:\nbash\ncache \"nix\" use nix -p ruby\nMaybe the cache name could be derived from the command and it's args. Or maybe only a single invocation of the \"cache\" stdlib function would be allowed per .envrc file. It's easy to regroup commands under a function after all.\nAccompanied with this, use_nix and friends would have to be changed to append to the DIRENV_STAT environment variable. That would be useful without the use of cache anyways.\nNow for a bit of meta context again; recently it dawned on me that the DIRENV_DIFF environment variable is just a serialization of state between direnv executions. Because I didn't want to run one direnv process per shell direnv is executed on every prompt and serializes it's state for the next execution (in some cases). I am thinking of generalizing this to allow more advanced scenarios like this we're discussing.\n. Is it possible that direnv wasn't compiled in the root directory of the project ?\nhttps://github.com/direnv/direnv/blob/master/test/direnv-test.sh#L7 adds the project root onto the $PATH. This is where the binary should be found.\n. I should probably add a check for it's existence at the top of the tests.\n. The -l is likely the culprit. 9b60b43216d6c1c58ea1b9e74a483619acefbb65 should fix the issue.\n. Do you need me to make a new release for packaging ?\nOn Tue, 14 Jul 2015 10:34 punitagrawal notifications@github.com wrote:\n\nOn Mon, Jul 13, 2015 at 8:11 PM, zimbatm notifications@github.com wrote:\n\nThe -l is likely the culprit. 9b60b43\n<\nhttps://github.com/direnv/direnv/commit/9b60b43216d6c1c58ea1b9e74a483619acefbb65\nshould fix the issue.\n\nIndeed. Dropping the -l fixes it for me.\nThanks\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/direnv/direnv/issues/175#issuecomment-121025689.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/direnv/direnv/issues/175#issuecomment-121180154.\n. Sweet thanks a lot for reporting and for the debian package !\n. (it's fixed in master)\n. Hi @siddharthist,\n\nthe .envrc is actually loaded inside of a bash sub-shell by direnv so the behavior might differ from zsh. How is the file loaded once it's been renamed to .env ? direnv only looks for .envrc files at the moment. It's possible to load a subset of the .env syntax if you use the dotenv directive inside of an .envrc file.\n. It shouldn't break on unload though. Feel free to re-open if you're seeing similar errors.\nAlso you can check the stdlib for the dotenv command: http://direnv.net/#man/direnv-stdlib.1\n. Thank you for fixing my engrish :)\n. ROFL\n.  s/wrong/mistyped/\n. Hi @JeanMertz ,\nI'm not against adding a DIRENV_ALLOW setting, just never took the time to implement it. Do you want to give it a shot ? The auth logic is contained in the rc.go file.\nSince that ticket I've been convinced to also make the path as part of the hash so two identical files can have different hashes. The reason is that an innocuous-looking file can be devastating in a different context. I know it's a bit paranoid but it's also good for security.\nEDIT: do you share the .envrc between developers trough git/(scm of your choice) ?\n. Fixed in master!. no worries. I just released https://github.com/direnv/direnv/releases/tag/v2.15.0 that contains this feature. @ssbarnea the feature was actually implemented differently.\nTry creating a file under $HOME/.config/direnv/direnv.toml:\ntomp\n[whitelist]\nprefix = [\"/home/REPLACEME\"]. Hi @juliantaylor ,\nthe issue is that the FOO from the outside is not an exported variable so direnv doesn't detect it. If you run:\ncd /tmp\nexport FOO=outside\nthen the variable is going to get restored. The direnv line should look like (~ instead of +):\ndirenv: export ~FOO\n. This is great, thanks a lot for the advanced debugging and providing a patch as well. Happy to see that direnv is useful :)\n. Did you install go before-hand ? If you just want the binary you can grab it following these instructions:\nhttps://github.com/direnv/direnv/wiki/Custom-builds\n. No worries :)\n. Nice, would it work for you to add a /opt/boxen/repo/.envrc file ? In that file you can add a source_env $HOME directive to load the other envrc. There is also the ~/.direnvrc file that is loaded globally if you have a couple of bash functions that you want to use everywhere.\n. Really nice @wilmoore \n. Alright, I'm done with the review. Ping me when you're done making the updates that you want, I'll have another look tomorrow.\n. > Yeah, one thing I've noticed is that if I put something to stderr, it pretty much doesn't show up. Sometimes there is a bit of a flash so I know it is being output, but doesn't stick around for long. Is there a way to ensure those messages always show up...perhaps using stderr is the problem.\nWeird. It's possible that stdout or stderr is not being flushed properly before exit but don't know how to address that. It should be flushed if your line terminates with a \"\\n\".\n. Alright, if you can address these two little things it would be awesome.\n. @wilmoore thanks for putting all this effort into the PR !\n. try again, the stdlib wasn't compiled into the stdlib.go file and the manpages weren't converted either\n. I believe this should solve your issue but please re-open if it's not the case\n. Nice. Since you're here I was wondering, are you using the stdlib layout node as well in your .envrcs ? I was thinking that it might make sense to activate the layout at the same time\n. Ok, thanks for letting me know where things stand in the node world.\nI think that what you describe is just because it's not easy to add ./node_modules/.bin into the path without direnv so they have come up with their own wrapper. But like you said each command needs to be prefixed with the bundle exec equivalent. If you just add ./node_modules/.bin into the PATH then you can go ahead and just use coffee or whatever program is installed with the project.\n. Exactly. The trick is to put the non-controversial stuff in the stdlib and anything that's not 100% clear goes into the user's ~/.direnvrc. Thanks for taking the time to explain your POV !\n. Hi @ches, thanks ! I am sorry for the delay as I got caught-up in sickness.\nI am trying to include only non-controversial tools in the stdlib so I don't know about gb. It sure looks useful and I think is going in the right direction for go. Ideally I would prefer to have one canonical layout_go once golang has converged on the one true tool. I also don't mind adding $PWD/vendor/bin to the go layout. This is just my opinion right now but feel free to insist if you think that I am wrong.\nIn the mean-time, do you know about the ~/.direnvrc file ? The content is sourced before loading any .envrc file. I use it to develop my own stdlib before importing it upstream if it makes sense. I know it's not super convenient but you could share the layout_gb function that way.\ntk,\nz\n. Thanks, you're the best !\n. Hi @allomov,\ndid you have a look at the stdlib as well ? By adding source_up in your child's envrc it will load the parent's envrc.\n. Thanks @miketheman, I had forgotten about this\n. Thanks @JelF \n. Thanks. Happy to accept a PR if you've got the time.\n. Cool. I'm a bit in a blind spot regarding direnv because I've been using it for so long I don't see that kind of things anymore. Thanks for doing this.\n. Hi,\nthis is a wonderful bug report, thanks !\nDid you use Homebrew to install direnv ?\nThe issue seem to be related to this Go runtime error: https://github.com/golang/go/issues/8801\nThe last comment seem to have a fix which I will try a bit later.\n. I wasn't able to reproduce the issue. I notice that your direnv is compiled using go 1.4.2, maybe upgrading to 1.5.3 might help ?\n. Can you try the try-osx-fix branch ?\n```\n$ git checkout try-osx-fix\n$ make clean && make\nTest it\n$ ./direnv\n```\n. Alright, thanks for the help. This will be fixed permanently in the next release.\nA last thing: do you have any antivirus installed by any chance ? I think that's what's messing with the DYLD_INSERT_LIBRARIES variable in the first place.\n. Alright, you're right that go shouldn't crash in any ways. Thanks for the help !\n. No worries, it was good. If I was curt it's because I didn't have much to say, you already laid out everything cleanly and I pretty much agree with what you said.\nHope to see you soon in another issue :)\n. You would need to patch direnv to execute a script on unload. Maybe it\nwould look for a DIRENV_UNLOAD variable and execute it's content on unload.\nBut that doesn't solve the issue where you have two or more shells that\nchange directory independently. You might end-up mounting and un-mounting\nthe folder multiple times. Or if you just close the shell, the mount point\nwould still be there.\nOn Linux this could be worked around using unshare in each shell to get\nindependent filesystems.\nOn Wed, 3 Feb 2016 10:17 Steve George notifications@github.com wrote:\n\nI don't believe this is a direnv issue, but I'm asking in case anyone has\nan idea\nI have an ENCFS volume that I want to automate mounting with direnv The\nidea is that when I change into it encfs is run so I don't have to manually\nmount it So something like this:\ncd Secret/\nThe encfs mounting part is working: my script runs correctly and performs the mount However, because I call it with direnv by doing a 'cd Secret' bash shows the old directory information rather than showing the decrypted contents which are now mounted on the directory I can manually just do 'cd Secret/' again to get the unencrypted contents but that makes the whole thing pointless :-)\nAny ideas on how to get round this?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/direnv/direnv/issues/195.\n. Great !\n\nJust to be sure because not everyone seem to see it, there is a set of functions available in the context of the envrc called the \"stdlib\". It's all the functions over there: https://github.com/direnv/direnv/blob/master/stdlib.sh#L389-L411\nThe ones highlighted should give you an idea of how to integrate other environment switchers. Once you've designed your own put them in a ~/.direnvrc file to make it available everywhere on your computer. If you think one of your function is generic enough and could be used by others I'm happy to add them to the stdlib.\nBest,\nz\n. If you add this to your ~/.direnvrc:\nuse_jenv() {\n  source \"$HOME/.jenv/bin/jenv-init.sh\"\n}\nThen you can use jenv if your .envrc files. To be included in the stdlib it would have to be made more robust, like check if jenv-init is working and add support for cygwin.\n. Thanks. With the proposed change md2man needs to be installed even if the .md files haven't changed. This is going to be an issue for packagers like homebrew as it's adding another build dependency (usually only developers need to install md2man since the result is committed into the repo). Ideally I would like to get rid of the ruby dependency to make contributions easier.\n. Closing as I think it's important not to add md2man as a direct build dependency to packagers\n. Direnv always executes the .envrc with bash, takes the diff and exposes it to you current shell trough direnv export. That way it can work across shells.\nThe reason is that bash either doesn't have this feature or it just doesn't work quite the same. http://www.tldp.org/LDP/abs/html/string-manipulation.html\nAlso note that the direnv stdlib is also injected before executing the .envrc, I know a lot of people are missing this, it might be useful to you. http://direnv.net/#man/direnv-stdlib.1\n. Cool, glad you found a solution that works for you and you find direnv useful.\nI think I need to rework the docs to make the stdlib more obvious. If you have any pointers let me know, I'm kind of blind to the doc.\n. Cool\n. Sure thing, done\n. Right now you can achieve something similar by adding source_up (which is part of the direnv stdlib) in your subproject's .envrc. I agree that direnv's default behaviour is debatable but I like that it's explicit.\n. Cool. Thanks for the idea\n. What kind of output do you want ? I was thinking of writing a direnv export json command.\n. The JSON format is now available master\n. @oivoodoo I will but please create a new issue first. Each issue has a specific subject and your question is unrelated to this one.. If you export DIRENV_LOG_FORMAT= it should do the trick\n. Hi, are environment variables missing in the new shell ?\ndirenv will reload if the DIRENV_DIR and DIRENV_MTIME != current .envrc. If emacs tampers and removes the other environment variables except those then the issue is with them tampering with the environment. They should either leave it as-is or start a fresh login shell. We're having similar issues with tmux as well.\ndirenv could reload on hook but it wouldn't necessarily be able to unload the previous environment properly since it has been tampered with.\nWhat do you think ?\n. Closing as I can't reproduce\n. Yes, thanks for the PR. I don't know why it wasn't caught before but it was obviously wrong.\nThere is just a little fix and then I can merge.\n. Fixed in 3aebe0dde8b23e71a224e2934367685d822c0951\n. I'm not sure if I will go forward with the sphinx doc\n. Love this. I will take a look at the code now.\n. :tada: Got a few comments above ^ and Travis might have to be kicked around a bit. I suspect that we lost go 1.4 compatibility but that's not a bit deal. The docs also need updating a bit but I'm happy to do that independently.\nOverall I really like the idea and the implementation is great. The export function is the hairiest and I like what you did with it. I also like the storage of mtimes and the overall cleanup that you did.\nIf you wanted to take things even further, all the state could be stored in a single DIRENV_STATE object that would contain the dir, diff and mtimes. That would open the door to adding other features like multiple switchable context per folder (for example to test a library with different versions of ruby).\n. Looking good. Anything more ?\n. Sure thing :)\nI'm going to do some more testing, adding the docs and also make use of the new feature in source_env, dotenv, ... in the next couple of days. Once I'm happy that it's stable I'll make a release, probably next weekend.\n. Thanks. If you have any ideas on how to improve the stdlib.sh just let me know. I don't have a setup with nvm installed right now to test.\n. Is load_prefix useful other than setting the PATH ? Otherwise this could almost be reduced to:\nsh\nuse_node() {\n  PATH_add \"$(nvm which $(< .nvmrc))\"\n}\n. @wilmoore please do, it's always interesting to hear people's opinion.\nFor nvm you might want to put a shim like this in your ~/.direnvrc to activate it on first use:\nbash\nnvm() {\n  . ~/.nvm/nvm.sh\n  nvm \"$@\"\n}\n. Interesting. That's generally the same conclusion I had in regards to ruby version managers (and lead to this tool). For ruby I use ruby-install that puts different version of ruby inside of ~/.rubies and then direnv for the version switching.\nAdding your nodejs-install method to the wiki would be helpful to others I believe.\n. Cool. In my experience, something is better than a perfect nothing :) At some point I would love to create a guide book and having pointers from the wiki will be very helpful.\n. Alright. Closing since we discussed all the options and there is no clear actionable for now (except improve the wiki). But feel free to pile it on if you feel that there is more to say about it.\nI'm also often on IRC on the freenode #direnv channel if you want to discuss about anything. Or just open another issue with the topic you have in mind if you prefer async discussions.\n. Hi, I need a bit more info so I can debug.\nCan you tell me what version of direnv you are using and paste the content of the .envrc if possible ?\n. Also what terminal app are you using. The default Terminal.app ? \n. Can you also paste the content of /etc/bashrc_Apple_Terminal ? I don't have access to a Mac right now.\n. Did you upgrade rvm by any chance ? I suspect it's trying to be \"helpful\" and introduced that issue.\nCan you try adding shell_session_update() { :; } to the top of the .envrc and see if it fixes it ?\n. Yeah that must be it then. I don't know if I want to invest much time into fixing the rvm integration.\nTo make the fix permanent for your computer you can add that line to your ~/.direnvrc file (create if needed) and it will be loaded for all your projects.\n. Awesome, glad I could help you out. Yes someone should contact the RVM guys and let them know.\nTo any visitor having the same issue, please +1 this issue so I know if it's worth the effort.\n. did you try to run rvm get head? I don't have access to a mac right now, if anybody has an idea on how to fix this issue let me know!\n. Can you try adding trap - EXIT after the rvm invocation in the .envrc?\n. Maybe ask the RVM project? I'm not very well placed to answer that question @diclophis \n. Interesting that RVM is still having these issues\nOn Thu, 6 Apr 2017, 00:53 Cristian Y\u00e1\u00f1ez, notifications@github.com wrote:\n\n@zimbatm https://github.com/zimbatm I was having this issue with the\nPyCharm console, updating rvm helped. Thanks!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/210#issuecomment-292030077, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAMsJxpd-lzDAWc10SZ5zja5awjBSYxks5rtClzgaJpZM4H7g6J\n.\n. I think we lost them since I moved the repo to it's own org. I will have a look at restoring the builds but Travis is causing me some pain.\n. Fixed in release v2.8.1\n. Hi, this is an issue with tmux who breaks the assumptions direnv can make. I updated the wiki page for fish, let me know if this works for you: https://github.com/direnv/direnv/wiki/Tmux\n. Great. The rule of thumb is to make sure the direnv environment is unloaded before starting tmux and then it's fine.\n. It's supposed to but I don't have the environment to test it out properly. Also \"windows support\" can mean many things: cygwin, mingsys, ... For example it doesn't integrate with PowerShell at the moment.\n\nI don't think that it would be too much work and I'm looking for a contributor to help me out there. If you want to be the man it would be awesome.\nAlso of interest: the windows integration milestone\n. damn :)\n. Hi @gwerbin! Pick your favourite shell, like mingw with bash and try to see if direnv is working properly there.. @gwerbin CMD is not possible but PowerShell is a potential target if you're willing to implement it. I estimate half a day to do it if you're familiar with Go. Some notes where already collected here: https://github.com/direnv/direnv/issues/124. Hi @nalipaz. I don't know exactly how intellij works but I think I know what the issue is.\nWhat you want is to do something like this:\n``` bash\n!/bin/bash\nDIR=\"$( cd \"$(dirname $( dirname \"${BASH_SOURCE[0]}\" ))\" && pwd )\"\ncd \"$DIR\"\nThat what's executed on every prompt, but you don't have a prompt here.\nSee direnv hook bash\neval \"$(direnv export bash)\"\necho \"$DIR\"\necho $USER\necho $PROJECTDIR\nexit 1\n```\n. Great !\n. Thanks !\n. good idea\n. There are no plans on my side right now. If you manage to create a sane implementation in bash or as a direnv sub-command I wouldn't be against adding it to the next release though.. The PWD is always the directory where the .envrc is living, even when it's sourced by another .envrc. The idea is that the outcome is then predictable since the environment shouldn't be reloaded if the user navigates to sub-directories.\nWhat kind of use case requires to know the current directory or original .envrc ? In those cases I think it's best to declare a function in the parent .envrc and then call that function in the other child envrc.\n. The PWD is always the directory where the .envrc is living, even when it's sourced by another .envrc. The idea is that the outcome is then predictable since the environment shouldn't be reloaded if the user navigates to sub-directories.\nWhat kind of use case requires to know the current directory or original .envrc ? In those cases I think it's best to declare a function in the parent .envrc and then call that function in the child envrc.\n. Feel free to submit a PR for better docs, I've become quite blind of it over time.\nThanks for mentioning, just pushed the latest doc.\n. the diff is always relative to the base environment, the one that you would restore to when going back to your home. direnv used to show the diff between two environments but users didn't like it being too verbose and now it doesn't show when the environment is unloaded either.\n. i actually miss it too. i'm thinking of introducing a config file so these options can be set without having to re-load the shell, plus setting 10 options for direnv in the environment might start to become awkward\n. Fair enough, thanks\n. direnv depends on the \"before prompt\" hook to load the environment. Because echo $GOPATH is executed before the prompt, direnv hasn't had the chance to do it's thing yet. It's the same in a script, since there is no prompt direnv will never execute.\nBut don't despair, it's always possible to execute the code outside of the hook.\nIf you want to load the new environment by hand, execute eval \"$(direnv export bash)\" which will do the same as if a new prompt had been shown. \n. I'm not sure what declare -x really does. Is it any different than export?\nIn the stdlib we already have a use nix command that you might find useful.\n. Thanks,\nYeah I tried declare -x manually and it seems to work like export. I am tempted to close this unless you want to spend more time investigating?\n. re-opening as this is actually an issue. the issue is that declare -x is assigned to the scope of the source_env function whereas export is a global scope.. A workaround is to use export or declare -xg. or if you want to backup some bash environment variable to source later: declare -x | sed 's/^declare -x /declare -xg /g. you might want to keep the ability to declare arrays and other things:\nsh\ndeclare() {\n  if [[ \"${1:-}\" = \"-x\" ]]; then\n    shift\n    export \"$@\"\n  else\n    builtin declare \"$@\"\n  fi\n}. you can also use unset declare to reset it back to the builtin\n```sh\nUsage: source_declare \nLoads a file that contains declare -x declarations\nsource_declare() {\n  declare() {\n    builtin declare -g \"$@\"\n  }\n  . \"$1\"\n  unset declare\n}\n``. Thanks! Pushed as b8793424ee4a2845478cd3304808679cb3730621 to master (just changed the[ ]to[[ ]]for consistency) \n. Hi, I had a look over the weekend but the fix is a bit more complex than I thought. Basically it's quite hard to implement redirection on a 3rd file-descriptor only with bash. I have another idea on how to implement a fix by extendingdirenv loaddirectly which should work ok though.\n. What's interesting is that nix-build already redirects everything to stderr. If the nix-shell instructions could be translated to nix-build it would solve that problem as well.. This is great, thank you!\n. Thanks. If you hit any issue feel free to open an issue as I'm always looking for feedback!\n. I don't really want to poke holes in the security framework. For version 3.0 I intend to add a new configuration file that will give more flexibility to the allow system so you could declare \"safe\" subsets of the directory tree.\n. If all you have is a bunch ofexportmaybe the best option is to create a.env` file.\nThe .env file would look like this:\nsh\nexport FOO=bar\nThe .envrc file would look like this:\nsh\ndotenv\nAnd then create a run-env wrapper:\n```sh\n!/bin/sh -e\nsource \"$(dirname \"$0\")/.env\"\nexec \"$@\"\n```\nIn the CI, run ./run-env ./path/to/command. Yes, in a bash context you can use eval \"$(direnv export bash)\" (just after the allow line).\nThe issue is that the hook only works in an interactive shell because it's executed before every prompt. If you look at the output of direnv hook bash you'll see that it basically sets a callback to that previous command.\n. No worries, try keeping the use_ruby definition in the ~/.direnvrc file and adjust your Jenkins script to:\n``` bash\n!/bin/bash -ex\necho \"2.3.1\" > .ruby-version # maybe check that into the repo?\necho \"use_ruby\" > .envrc\ndirenv allow .\neval \"$(direnv export bash)\"\nHere $GEM_HOME should be set to $PWD/.direnv/ruby\necho \"debug: $GEM_HOME\"\nruby --version\nDo whatever you want\ngem install bundler -N\nbundle\n``\n. Okay, this is wasting my time. Please re-read what I said and adjust your script accordingly.direnv hookis not going to work, you need to usedirenv export`.\n. @nexbit can you try the master version? I just escaped a bit more things in the stdlib which should help.\n. Alright. You might find more of there if you use more of the stdlib. Just let me know if it happens.\n. Yes!\nI've been wanting a Fedora package for a long time but didn't have the expertise or help needed.\nLet me know if I can help you with anything.\n. Sure thing. I created a new packaging team in the org that you need to join. Let me know if you need a repo for the fedora package as well.\n. That's wonderful!\nHow do you generally keep track of releases for a project? I want to put something in place so you don't have to think about visiting direnv.net to check for new releases.\n. Thanks, I meant the reverse actually. If I make a new direnv release, how would the Fedora package maintainer be notified?\n. Hi @domcleal, are you behind direnv's packaging on Fedora? Just wanted to point you to this discussion in case you are (and thank you for doing the work!)\n. Regarding release tracking, I tag all the versions so you can consume the release atom feed: https://github.com/direnv/direnv/releases.atom\n. Awesome, thanks a lot!\n. Cheers!. Hi @rubymaniac, cool idea!\ndo you know if VSCode starts one process per opened project?\nI think what you want is to run direnv export json, capture the output, parse it with JSON, and finally replace the process.env with that data. But if two projects are loaded in the same process it might cause conflict. Alternatively you would have to store the wanted environment associated to each project and make sure every sub-shell for that project is running in the right environment.\ndirenv export json might fail for multiple reasons: either the script is not allowed to load in the direnv security framework, or the script itself is breaking in some ways. If the script is not allowed to load you might want to display a view that shows the content of the .envrc and run direnv allow if the user agreed with it's content. Unfortunately right now it's not possible to differentiate the failure by the direnv export json exit status so you will have to parse the stderr output (or submit a PR to direnv to change that).\nDoes it make sense?\n. Perfect, sounds like it will be relatively easy to integrate direnv then.\nRegarding testing you have two options:\n- either remove the hook from your shell or start a different kind of shell (like zsh if you're using bash as your main shell). Before you enter the target directory.\n- or run pushd path/to/folder; direnv export json; popd on a single line from outside of the folder so the hook doesn't trigger (the hook is executed on every prompt).\nLet me know how it goes! \n. Nice work!\nDo you have access to a variable that contains the path to the project root?\nSince the process seems to be running under / it might be best to pass the cwd as a startup option:\njs\nproject_root = \"/path/to/project\";\nchild_process.exec('pwd', {cwd: project_root}, (err, stdout, stderr) => {\n    console.log(stdout);\n});\nNote that the hook only executes before a shell prompt is displayed so typically in a script you have to invoke eval \"$(direnv export bash)\" yourself. (see direnv hook bash to see how the hook looks like for bash).\n. Nice!\nI added a wiki page for it: https://github.com/direnv/direnv/wiki/VSCode which is linked from the main wiki page. It's not super discoverable right now, if you have an idea on how to do this better please let me know.\nSmall nitpick: I'm using direnv all lower-cased, not sure if you can adopt that writing in the project's page. If not it's no biggie.\nLast thing, I wanted to review your code but couldn't find a link back to the project from the installation page.\n. Ok great.\nYeah I think the README is already a bit too crowded but it would be possible to move some of the other stuff into the doc/ folder. Feel free to close this issue if you feel like you're done with this, it's always possible to open more issues later on.\n. Thanks for reminding me, atom already has a plugin: https://atom.io/packages/000-project-shell-env\n. Funny story, I added the direnv export json feature for that plugin.\n. Thanks! For the logo check out this repo: https://github.com/direnv/direnv-logo\n. That's been implemented!\nSee https://direnv.net/#man/direnv.toml.1 for the format. Agreed, the doc first talks about the format and how it uses sections but those are defined in the top-level.  I should probably push those in a section since it doesn't seem to be possible to close an existing section as well. Here is a quick example in the mean time:\ntoml\nbash_path = \"/usr/bin/bash\"\ndisable_stdin = true\n[whitelist]\nprefix = [ \"/home/user/code/project-a\" ]\nLet me know if you have a good name for the sections in which bash_path and disalbe_stdin should be put\n. Hi @mcandre, how do I get access to the ~/.bashrc.d/direnv files?\nMy hypothesis is that docker is running in one of those files, which doesn't terminate on SIGINT and blocks the whole chain (direnv waits on the .envrc bash sub-shell which in turn waits on docker to terminate).\n. Sounds pretty handy. You could even add a shortcut in your ~/.direnvrc so that bashrc name load source ~/.bashrc.d/$name. \n. I've been wondering for a while now how to provide useful extension points to direnv that the community could share.\n. That's a cool idea, I added it to the wiki: https://github.com/direnv/direnv/wiki/Nix\nIt's not 100% fool proof because the channel revision might be different than the nixos-version.\n. Here is another approach that I think is quite promising: https://github.com/direnv/direnv/wiki/Nix#persistent-shell. Maybe it could tell the user when it's out of sync with the channel. It's not super practical to have all projects re-building after updating a channel, it might not be a good time to do it (eg: being offline). That's very weird. It's probably a go runtime issue since I'm not using any C extension.\nMaybe you could try compiling with go 1.7.1 to see if it solves the issue.\n. Closing, can't repro. sweet, thanks! merged the PR\n. Thanks, looking good! I'll make a release in a few.. Hi @xenic, thanks for letting me know.\nHow did you find about the readthedocs website? This was just an experiment which I should probably remove. The main website is http://direnv.net/\n. Thanks for the report, I deleted the site.. For bash, one way is echo $PROMPT_COMMAND | grep direnv_hook. Each shell has a different way of providing the hook, have a look at the output of direnv hook zsh for example. If you want to make that detection generic I think a new command is need so that eval \"$(direnv hook-detect bash)\" would return 0 if direnv is detected. These settings are set on the shell and not exported to the direnv status sub-process unfortunately.. Can you explain a little bit where the requirement is coming from?. This is because set -e is activated in the .envrc sub-shell. When that is set, the script terminates if any expression returns with an exit status bigger than zero. It's useful to make that a script will not silently fail as you noticed.\nIf you only need to switch on zero vs non-zero exit status command, the easies is to use:\nsh\nif my_command &>/dev/null; then\n  # exit_status is zero\nelse\n  # exit_statis is > 0\nfi\nIn fact the [ ] syntactic sugar does the same thing. If you run:\n```sh\n[ 1 -eq 2 ]\necho $?\n````\nyou should see the exit status being 1. Yeah I should probably add a reference to the bash manual. Hi,\nit seems that this global method has been added in version 1.5 of the stdlib. See https://github.com/golang/go/commit/86fdcbedbcb868f7f2e8274d2b50f0ea34043c47\nThis is only on the default logger, any instances already has the output function so a solution would be to create a new instance and reference that instead. Direnv isn't tested against older version than 1.5 so other issues might be lurking around after that.\nI would suggest to either upgrade go to version 1.5 or later or use one of the pre-compiled binaries that are available. See https://dl.equinox.io/zimbatm/direnv/stable. The issue is that before go 1.5, only instances of a Logger would have the output method. I suspect what you see in your system is the function definition of https://golang.org/pkg/log/#Logger.Output instead.. Thanks for the thorough report @mdawaffe. I think your proposal makes sense, it just needs a bit more comment in the code to explain the branch's existence.\nI tested man -w on Darwin and Ubuntu 16.04 and it seems to behave similarly. I think it's sufficiently safe to include as a solution and see if anything surfaces on other less common platforms.. Ok thanks, I think we can close this issue in the mean time. > man  uses  a  sophisticated  method of finding manual page files, based on the invocation options and environment variables, the /private/etc/man.conf configuration file, and some  built  in  conventions and heuristics.\n-- man(1) Mac OS X Manual Page\nThis is gold.. Thanks a lot for the PR @mdawaffe.\nI split the function in two to avoid accumulating too much heuristic in path_add. I don't think someone would ever want a MANPATH with only the designated paths but it's possible.. Yes that's the current design. I'm expecting the user to be responsible for checking the whole chain before allowing the .envrc. The goal of the security framework is mostly to avoid situations where the user git pull a repo and gets arbitrary code executed :). Then give me a specific scenario and then we can discuss. So far I am seeing a danger but it doesn't remove the value of the existing protection and doesn't seem more risky than loading other people's bash code or build scripts.\nIn the scenario I have in mind, the attacker would somehow convince you to direnv allow the .envrc that he checked into his project and that loads another file (which I don't recommend doing, direnv is a personal tool). And some time later, push an update to the other file that you would forget to check on the next git pull. This would probably result in burning his github identity. With the same reasoning I think the attacker could as well push a change to the project's build script.. Ok duly noted :)\nImplementation wise it's a bit difficult because the second envrc is only\ndiscovered at evaluation time. It makes it hard to present a list of files\nto allow in one go to the user. Do you think that direnv should fail on\neach step of the discovery ?\nI think that if this get addressed then other questions will come up. For\nexample a similar attack could be mounted where the envrc executes a script\nin the same folder. Because the script is not vetted by the security\nframework it could also change over time.\nOn Tue, 7 Feb 2017, 07:21 Simon Effenberg, notifications@github.com wrote:\n\nFor me it doesn't matter that much how the fake code can come into my\nsystem. It is more of a concept thinking. If I allow something, then I\nhave the whole chain in mind and not the single file. Otherwise the command\nallow is here misleading in my opinion, because it is more an enable as\nlong as any other .envrc is being sourced than the main one. It's like\nhaving a fingerprint reader on my front door but my back-door is not having\na lock at all.\nOr maybe tell me why you still test the content of the file of being\nchanged as long as you have any source_up/source_env inside of it?\nBecause it is like testing half of it. What do you try to prevent in that\ncase? Any mistake somebody did? Or is it for security reasons? If it is the\nlatter, than it is not secure because the attacker only have to change\none of the sourced files and this works. If it is for safety because\nsomebody might do a mistake it is the same problem. And if you say it is a pesonal\ntool than why re-checking after you enabled it once? Because you should\nknow what you git pull (like your argument: you have to check your whole\nchain).\nDon't get me wrong, I just want to make clear, that I really didn't expect\nthat behavior. At least a big note on the source_env/up command saying:\nthis will not being tested for changes and doesn't have to be allowed in\nanyway, so be careful while using this\nis something I would request.\nBut personally I would prefer a chain of trust.. (because I'm lazy and\ndon't wanna test the git repository I pull multiple times from ;) )\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/249#issuecomment-277920697, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAMsLzjyR-ItDp9C_jbQxzJDnzNV0asks5raBuKgaJpZM4L2Q27\n.\n. Yeah to make that a nice user experience I would basically have to move away from bash as the language for the .envrc. Or write a bash parser.\n\nI added some warning to the documentation for now and closing this issue as I don't intend to implement the \"full security\".\nThanks for taking the time to discuss and provoking my point of view :)\n. @mrmachine if you have a better suggestion on how to implement this I'm all ears. Here is a PR that improves the wording, let me know what you think: https://github.com/direnv/direnv/pull/463. Sounds good! I had a quick look at the associated issue and the example looks pretty good for stdlib inclusion. If you can make it work on Linux as well I will gladly accept a PR for that.. Interesting. I have another variable that would best be set instead of exported: PS1.\nDirenv doesn't really have a mechanism for that. If I get around to rewrite direnv I will take that into account.. Hi, thanks for the comprehensive report.\nIt's a long shot but can you try the latest release? It's now built with go 1.8 which has improved the windows path support.\nI produce the windows binaries because it's easy to do so with Go but I must admit of not having tested it.. Cool. I'm very interested in having good Windows support, it's just that I am not using it day-to-day. Maybe also have a look at the existing windows issues, it might give you some more clues: https://github.com/direnv/direnv/issues?q=is%3Aopen+is%3Aissue+label%3AWindows\n. Can you try to run direnv expand_path /c/Users/tobyj/bin? If it converts it to the C:\\ format it means that the golang stdlib does something funky.\nBasically I think we would have to replace or expand the path module in the standard library to understand more of the windows path intricacies. Maybe windows needs multiple path evaluation modes depending on whenever direnv is being run in cmd.exe, bash, PowerShell, .... That's another issue we'll hit with Windows. Because there is a white space in the $PWD, bash interprets it as multiple arguments. Make sure to put double quotes around $PWD, or any variables in general.. It's possible some of the stdlib.sh isn't escaped properly. Can you simplify the .envrc to just echo SUCCESS?. @markwest1 @xn can you try the current master? I think I fixed this particular issue.. @mcandre I agree, right now direnv is relying on the golang stdlib path package but I think that it's not sufficient for windows support as windows is not a single target.\nIf someone is willing to implement a path package that works in all these environments it would go a long way to have direnv supported on windows. Right now I suspect that direnv will only work properly inside of the WSL.. was the solution to remove whitespaces from the path?. no worries. if you still have whitespaces try direnv v2.12.2, it should also fix the issue. Thanks! Will make a new release in a few.. Sorry for the wait, I'm pushing a new release today with your fix. I made some adjustments and pushed your changes to master in 11db56325e6a35f9cbfaa5f3c336e9a7429d6a25. hi, sorry for the wait. This should be fixed by #256 and released as v2.11.2. Hi @sbarzowski \nIdeally I think that you would like a way to blacklist specific paths in the system, but that's not supported yet. I've been thinking of introducing a configuration file for direnv 3 to support that kind of scenario.\nOne solution that's similar to yours is to use a function in the ~/.direnvrc that would vary between the hosts. Eg:\nsh\nis_in_vm() {\n  return 1\n}\nso that in the .envrc it's possible to be more descriptive:\nsh\nif is_in_vm; then\n  : # do something\nfi\n. Hi @Unode,\nthis is actually a bug. direnv shouldn't try to reload the .envrc until the timestamp has changed or the user enters the directory.\nThis was the original designed but it got lost during a refactor. I will try to get around fixing it ASAP but I'm quite busy.\n. I wasn't able to fix it yet unfortunately. Anyone else wants to get their hands dirty?. thanks. Hi @rbutola,\nyes \"direnv hook\" is only intended for the interactive shell.\nFor non-interactive bash use eval \"$(direnv export bash)\" (and potentially direnv allow . before that if you trust the source).. Yes that's it, execute eval \"$(direnv export bash)\" every time you want to change environment.\nIf you need to do it multiple times then it's possible to wrap the functionality in a bash function like this:\n```sh\nfunction direnv_cd() {\n  cd \"$1\"\n  eval \"$(direnv export bash)\"\n}\nExample usage:\ndirenv_cd some/dir\ndirenv_cd some/other/dir\n```. Hi,\nare you able to reproduce the issue consistently? I suspect that what's happening is the following:\n\ndirenv is loaded in the shell, it backs up the current environment\nThe editor is started from within the shell\nThe in-editor shell is opened\ndirenv reload is executed inside of the in-editor shell\n\nAt some point between 1 and 4 the editor changes some environments variable. When direnv restores the original environment is restores the one from point (1) which creates the confusion.\nAm I correct?. Thanks for your contribution!\nDo you mind vendoring the github.com/mattn/go-isatty dependency? This is the first external dependency in this project so I haven't thought exactly how it should integrate.\n\ud83d\udc4d overall for the approach. Alright, that works too ^_^. Direnv executes before any prompt so that shouldn't be a problem. It's actually a reason why I wrote direnv because other tools like rvm tend to alias cd instead of doing the right thing.. I'm not sure exactly what's the expected behaviour. It looks like it's loading/unloading when changing directory?. Tmux is historically difficult because it messes with the environment so you might be seeing issues around that. See https://github.com/direnv/direnv/wiki/Tmux-and-Fish. Alright it starts to make sense to me. So you're able to traverse directories without displaying the prompt. What mechanism allows to do that? Also why do you want direnv to load/unload the environment while navigating, is it because you also exec commands without displaying the prompt first?. In your script, if you add eval (direnv export fish); after changing directory it will do what you want. But I suspect it will be quite noisy.\nIf you don't care about the direnv logs, try setting DIRENV_LOG_FORMAT=\"\" as a global variable. Then in the prompt line, check if DIRENV_DIFF exists to determine if direnv is loaded or not (like display a unicode char if direnv is loaded).. there are two issues here:\n direnv keeps retrying even if none of the source files have changed. This is related to https://github.com/direnv/direnv/issues/259\n direnv doesn't expose the failed state. DIRENV_DIFF contains a backup of the environment but not if the env failed to load. This is something that I have planned to tackle in direnv 3.\nso right now I don't see a practical way to do what you want.. Why not? I don't know a lot of programs that run if /bin/sh is missing.\nThat's the line by the way: https://github.com/direnv/direnv/blob/master/cmd_edit.go#L60. Basically /bin/sh is used to parse the shell words here. If direnv had a\nproper shell words parser it could also be removed. I'm not interested in\ndoing this myself so it will have to wait on someone sending a PR.\nOn Thu, 30 Mar 2017, 05:00 fruch, notifications@github.com wrote:\n\nCause it's a closed garden, and you don't have access to /bin/ ,\nSee:\ntermux/termux-app#104 https://github.com/termux/termux-app/issues/104\nA program should expose those type of things as environment vars\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/266#issuecomment-290295998, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAMsNU_Bg_ZHw24NNjvN-3NCUw19UBqks5rqyjIgaJpZM4MtSq4\n.\n. Hi @psamim,\n\nthe best way to override the stdlib is to re-define the function in your ~/.direnvrc file.\nHere is the current implementation: https://github.com/direnv/direnv/blob/master/stdlib.sh#L371\nIn your ~/.direnvrc:\nsh\nlayout_python() {\n  # do something else here\n}. nice! feel free to add your solution to the wiki if you want: https://github.com/direnv/direnv/wiki/Python. hey @olalonde, sorry for the wait.\nDid you read the ./venv/bin/activate script? If I remember correctly it has a lot of heuristics in it that might not work well with direnv. That's why we have the layout python as part of the stdlib.. If you remove all the heuristics I think the script can be boiled down to:\nunset PYTHONHOME\nexport VIRTUAL_ENV=$PWD/venv\nPATH_add $VIRTUAL_ENV/bin. I don't see anything obvious. Can you try to echo something after sourcing the file to see if the whole script is exiting early?. Or add echo into the script and bisect. The reason is that the .envrc is loaded in a bash sub-shell, only the env diff is exported back to zsh. Actually at the end of the first run it seems like the PATH and VIRTUAL_ENV changes are propagated back to your shell.\ndirenv ignores all PS1 changes due to issues with older bash 3.0 versions. Is it possible that this is where the confusion comes from?. hey @brikou, sorry for the wait.\nCan you expand a bit on your reasoning? I don't know enough about node to understand the implications of it.\nWould it be backward-compatible?\nHow surprising would it be to existing users if that was changed?\nIs it something you would have expected the node layout to do by default?. One thing I usually do it create my own layouts in the ~/.direnvrc file. It's quite useful to test things out and get a feel if it's generally useful or not.\nlayout_node() {\n  PATH_add node_modules/.bin\n  export NODE_PATH=$PWD\n}. It's a bug in the cmd_dotenv.go parser. . Thanks for the report, fixed in master. Opps yeah, feel free to open another ticket for that. My parser is quite hacky so I don't know how fast I can get this fixed though.. Do you mind testing master? fa1fa4fb62507ca7c879bf6fe9615d5bc24268e5 should fix it.. Do you have $GOPATH set? This is the first time I introduce a package that's not the stdlib so it will cause a bit of issues with how direnv is being built.\nAlternatively you can try to go get github.com/direnv/direnv. Something like #273 ? Is it ok if it's global? I don't have a clear solution to make it configurable per folder as the .envrc hasn't loaded yet at that point.. Alright, it's in master now. Let me know if you hit any issues.. Thanks for letting me know. Fixed in 448bd6cf7b3386510e1e5ffb2f07b2100983a362. nice, thanks @nbraud !. :) do you need a release?. Hi, the build instructions have changed slightly in the latest version of direnv.\nsh\nexport GOPATH=$HOME/go # or whatever you want\nmkdir -p $GOPATH/src/github.com/direnv\ngit clone git@github.com:direnv/direnv.git $GOPATH/src/github.com/direnv/direnv\ncd $GOPATH/src/github.com/direnv/direnv\nmake install. Fixed in 775d98c, thanks for the report!. Once these changes are in place the upgrade procedure should be as usual, git pull from the new location on your drive. And $GOPATH can be set using direnv.\nRegarding SSH vs HTTPS I think it's a matter of preference. Both are valid and have different trade-offs.\n. Good point, I fixed it in 5a9f8b5\n. @michaelld is it possible to checkout or symlink the source under $GOPATH/src/direnv/direnv? I'm asking because I'm planning to split direnv into more independent packages in the future.. @nbraud ~I suspect that~ 060260b23e099f321e428b1b12f31ca46773076b introduced that regression. Investigating.. . Just released v2.12.1 which solves that issue. @nbraud I'm not sure either, I tested it on macOS which is stuck at version 3.x and am assuming everybody else has switched to 4.x.\nAccording to TLDP, version 3 introduced the generalised array syntax (as opposed to only on arguments) and was released in 2004 http://tldp.org/LDP/abs/html/bashver3.html. Yes that's by design, direnv doesn't try to be smart with the filesystem.\nMy current reasoning is that symlinks are a tool for sysadmins to share parts of the filesystem. The goal is to present another view of the filesystem to the programs. If tools start to resolve those symlinks it defeats this purpose. Now the user can't just look at the current hierarchy but must also take other parts of the filesystem into consideration.. Hi,\nthe current approach to remove duplication is to define a bunch of layout_* functions in the ~/.config/direnv/direnvrc file. In the project root, create an .envrc with just a single line layout my_project_layout. Then when the project needs specific overrides it's easy to add them to the project's .envrc.\nI was thinking of introducing a direnv init [path] command to setup a project. Potentially it could enumerate all the layout_ functions and let the user select the one they want. Another idea was to introduce a detection mechanism so that if a Gemfile exists in the folder it would either select or suggest the layout_ruby function for example.\nDoes that correspond to what you had in mind?. Just to add to the explanation of the layout system:\nIn the stdlib.sh, a layout function is defined that dispatches to layout_$1 functions. That allows to write a more natural layout ruby instead of layout_ruby. The second thing is that ~/.config/direnv/direnvrc is loaded between the stdlib and any .envrc. That way it's possible to override existing stdlib functions or introduce new-ones.. What is the issue with having .envrc files?\nBy personal experience, projects often start the same but then need that extra env that no other project needs. The .envrc is the most flexible approach that I can think of in that regard.. Yes good point about not needing the allow framework.\nIt would change the project quite considerably. I'm in the process to slowly refactor direnv to make it more modular, which in turn would open new possibilities like this one.\nIf you want to help, it would be great if you could describe in more details how the system would work. For example, since the .envrc are interpreted by bash, how would these templates be defined? Where would the mapping between templates and folder be stored? How would the UX look like?. hi, what version were you using before the upgrade?\nI removed the direnv stdlib output from your report as it's not necessary and was taking a lot of space.. do you mind adding a set -x at the top of the .envrc and give me the output?. Thanks, fixed in 8bb300df95316ae23bdf6c5dc6b903463ff72293. Released v2.12.2 with the fix. ce9945a8888ead47652b9a6f4acbca3a39c48528 reverts back to the original ways of doing it. by moving the dotenv dependency under the vendor/ folder, go should automatically pick it up and not require to set the GOPATH anymore.. It's not searching in the vendor/ folder for some reason. Can you try again\nwith the latest from master?\nOn Wed, 6 Sep 2017, 15:59 George L. Yermulnik notifications@github.com\nwrote:\n\n@zimbatm https://github.com/zimbatm Is there something I'm missing?\n$> LANG=C git clone https://github.com/direnv/direnv\nCloning into 'direnv'...\nremote: Counting objects: 2614, done.\nremote: Compressing objects: 100% (11/11), done.\nremote: Total 2614 (delta 1), reused 10 (delta 1), pack-reused 2600\nReceiving objects: 100% (2614/2614), 1.24 MiB | 302.00 KiB/s, done.\nResolving deltas: 100% (1330/1330), done.\nChecking connectivity... done.\n$> cd ./direnv/\n$> LANG=C make\ngo fmt\ngo build  -o direnv\ncmd_dotenv.go:7:2: cannot find package \"github.com/direnv/go-dotenv\" in any of:\n        /usr/lib/go-1.6/src/github.com/direnv/go-dotenv (from $GOROOT)\n        ($GOPATH not set)\nmake: *** [direnv] Error 1\n$>\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/283#issuecomment-327511354, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAMsMeLWTLsPz8yQhkOFfD_MBG1EIB2ks5sfrNYgaJpZM4OW4Jp\n.\n. It looks like it's an issue with go 1.6. According to https://github.com/golang/go/issues/14566 , go 1.6 only uses the vendor/ folder when it's under the GOPATH. Under go 1.9 it's fine so it has been fixed along the way.. Yes that's correct @jameysharp. There are still two files per project but at least you don't have to duplicate the content between both.. The current execution model of direnv doesn't really allow for that kind of mode. Each of the folders will need that .envrc right now. It might change in direnv 3.0 where I plan to overhaul the configuration.\n\nThe easiest option right now is to add an alias to your shell: load_dotenv() { echo \"dotenv\" > .envrc; direnv allow }. Hi @josephbuchma,\nthis has come up already but there are two issues which are related and don't have a clear solution to me.\nIf the terminal is exited uncleanly, the godoc process would stay started as well. direnv is not a process manager in that regard.\nRelatedly, what happens if two terminals are opened at once? Which one gets to control the godoc process?\n. If the unload hook is unneeded then it's possible to write something like that in the .envrc:\nsh\nkillall godoc\nnohup godoc\nThe issue is that if there are two shells, opening two different project, the last-one will win. To switch to the older project run direnv reload in the older project.. What I recommend for experimentation is to create your own layout_python function in ~/.config/direnv/direnvrc. Copy and paste the original function and change what you want, that will override it everywhere.\nPotentially we could define a layout_python_path='$PWD/.direnv/python-$python_version' and then eval it in export VIRTUAL_ENV=$(eval \"$layout_python_path\"). That would minimize the changes to the ~/.config/direnv/direnvrc to just setting the layout_python_path variable.. One thing I'm thinking is that if you want to move the .direnv/virtualenv out of the project's folder then this will also apply to the other layouts. So potentially we could introduce a direnv_layout_dir=${direnv_layout_dir:-$PWD/.direnv}. Then in layout_python, export VIRTUAL_ENV=${direnv_layout_dir}/python-$python_version.\nThen as a user, you could set whatever logic in your direnvrc. For example direnv_layout_dir=$HOME/.direnv-layouts/$(echo -n $PWD | shasum | awk '{ print $1 }') . > That's not my preference, because (like many many people) I put the name of the virtualenv in $PS1, and I'm used to that name acting as confirmation that I've activated the right one. If they are all called the same thing, e.g. python-3.6.1, it doesn't help.\nThat's true, but direnv can give you a guarantee that the virtualenv loaded is the one for the project. In that case is it still necessary to display which venv has been loaded?. @williamsmj I went ahead and implemented it in #290. Do you mind giving it a try and give me feedback on the feature?. thanks @brikou !. Hey it's a cool idea. I would like to treat this as a bug :)\nCan you give me the output of direnv status before and after the switch and also stat .envrc--development .envrc--production?\n. is looks like it's the same issue when running rm .envrc && ln -s .envrc--staging .envrc on the same line.\ndirenv's main mechanism to detect file changes is by looking at the mtime, but that seems to be changing.. you can see in the direnv status that the found and loaded .envrc have the same timestamp. I don't know exactly why, probably due to the symlink, but that's what's preventing the reload. @brikou I have implemented a fix in master, let me know how it goes!. can you touch .envrc--production so they have different timestamps and try switching again?. I can't reproduce the issue on my machine with the latest release. But it's on macOS, maybe the filesystem is different.. this is fixed by #452 :tada: . Hi @decibel, see https://github.com/direnv/direnv/issues/73 for more details on why it's not working right now. Closing this as a dupe of that other issue.. Sorry I misread your report. direnv executes the .envrc in a new bash instance and only outputs the result to the current shell afterwards. So aliases and such are not available in the context of the .envrc. It's possible to use source to import any necessary function or aliases into the current context.. Ok that was an issue with how the direnvrc was being loaed. Do you want to give it another go?. thanks for testing out the change! time to merge. Sweet! Thanks!. nice catch, thanks!. thanks @glasser. I agree that we need a direnv internals document. . thanks, all good!. This is what happens when using the \"Squash & Merge\" button on github. Hi @ahmedelgabri,\nI think it's due to a small typo (or broken docs?). In NODE_VERSION_PREFIX the version is in singular form.. no worries, the prefix should probably be the same to avoid that confusion. thanks for the report, I have applied that patch again and it's now in master. Do you need a release or you're ok with compiling direnv on your own?. Ok I think it's time for a release anyways. Version 2.13.0 will contain the fix.. I'm trying not to break backward-compatibility so this is a bug. I know what the issue is but need a bit of time to think of a good solution.\nIn the mean time you work around the issue by setting this additional line at the top of the top-level .envrc:\nsh\ndirenv_layout_dir=$PWD/.direnv. @elventear do you mind trying https://github.com/direnv/direnv/pull/298 out?. Thanks! cutting a new release. hi, I don't have control over the PPA so it's probably best to contact them directly.\nAs a workaround you can download direnv binary from the latest release. chmod +x direnv it and place it in /usr/local/bin.. Nope. Debian packaging is too much work and I don't use the platform.\nI deleted that PPA since it's unsupported and didn't contain any releases.. did you try to change the loading order in your .bashrc or equivalent? otherwise a bit of cooperation is required between both tools. Look at the layout node in the direnv stdlib, it might be doing what you want (not sure).. Err I mean use node. See https://github.com/direnv/direnv/blob/master/stdlib.sh#L499-L514 for usage.. you have two choices:\n\neither figure out why the ordering is not working. If using bash, have a look at echo $PROMPT_COMMAND and follow from there\nit's possible to replace nvm with direnv, at least the version switching part. it means removing the nvm hook that is installed in the .bashrc or equivalent to avoid interference. The .envrc would then be changed to something like that:\n```sh\nexport NPM_USER=youruser\nexport NPM_TOKEN=yourtoken\n\nthis comes from the direnv stdlib.sh file and looks for the node version using the .nvmrc file\nuse node\n``. can you give me the output forwhich bash?. also can you try to addexport DIRENV_BASH=/bin/bashjust before theeval \"$(direnv hook zsh)\"line?. direnv loads the.envrcwithbash --noprofile` and then exports the diff back into the parent shell. If DIRENV_BASH is not provided, it looks for bash on the PATH.\nWhat's weird here is that it looks like it's trying to invoke zsh instead.\nCan you try to run /usr/local/bin/bash --noprofile to see if it's an issue with that bash?\nIf that works, can you set the export DIRENV_BASH=/usr/local/bin/bash?. I thought that putting things in vendor/ would remove that requirement but no :/\n@Andreilys:\nsh\nexport GOPATH=${GOPATH:-$HOME/go}\nmkdir -p $GOPATH/src/github.com/direnv\ngit clone https://github.com/direnv/direnv.git $GOPATH/src/github.com/direnv/direnv\ncd $GOPATH/src/github.com/direnv/direnv\nmake install. @kierun what version or go are you using? os.Executable is only available in go 1.4+ or something like that. Or just download the binary that comes with the release:\n$ curl -sfL https://github.com/direnv/direnv/releases/download/v2.17.0/direnv.linux-amd64 ~/bin/direnv && chmod +x ~/bin/direnv. 2251df501ce8fdf62483938748f1685eb07db49d should help with the issue. Ping me if that doesn't work for you.. Hi Peter,\nwhat version of direnv are you currently using? There was a fix released in 1.13.0 for a similar issue. Can you just try upgrading to the latest version and try again if it's not already the case?. ok, probably some of the bash builtins is resolving to the absolute path... Can you ping me again next week? I don't have the time to do a proper investigation right now.. sorry it's on my backlog but most likely won't have the energy to investigate this. okay, thanks for letting me know. Good thing that it's possible to override the stdenv :). Hi, thanks for the report. Can you try the latest commit from master and let me know if it's fixed? 5792629b1f0de48e4a12784f5a9e6e733381d07e. I switched the CDN from CloudFlare to Fly.io today so that seems to correlate with the issues that you are seeing.\nDo you mind re-trying tomorrow? https://direnv.net has a valid certificate at least on my end.. Yes that's by design. Imagine that you git cloned a repo that contains an envrc. It looks legit so you allow it. Now upstream could push a nasty change and running git pull could then have disastrous effects.. Is there anything left to do for this issue?. thanks! it's fixed in master now. @Alex-Mann can you share the content of the .env file? It looks like a parsing error.. well it's not supposed to be something you have to know :) I have just published release v2.13.2 which should contain a fix for this. Yes comments start with # some comment like in bash. hi @NJichev,\nyes direnv is trying to find where it is in the folder structure to look for .envrc files. I haven't really designed the error message and it's the default one returned by the Go stdlib.. Hi, thanks for your PR.\nDo you mind extending your explanation a bit? As I am not a python developer there are a few things that I don't know.\nDo you mean that there is a virtualenv-3 that should only be used with python3? In what cases would virtualenv-3 be installed, is it something distro-specific?\nI am also note sure what --system-site-packages does. Is it a way to import some packages from the system and avoid unnecessary rebuilds?\nThanks for your patience :). There is too much heuristics happening here and I really dislike heuristic-ridden code. Every code branch is another way for the code to rot and fail, it makes it harder to debug, more bug-fix releases and then I am usually the one trying to support users in the issue tracker. If python doesn't have a simple mapping between virtualenv and python version then maybe I should just remove layout_python from the stdlib.\nInstead of trying to handle all of the cases I suggest to: (a) pick a sane default if any exists, and (b) let the user pass the python and virtualenv versions as arguments if he has a weird setup.\nEg: PYTHON_BIN=my/bin/python VIRTUALENV_BIN=my/bin/virtualenv layout python. I had a go at rewriting the layout function in https://github.com/direnv/direnv/pull/376 . The main motivation was to allow passing python and virtualenv as arguments as environment variables are inherited by child processes. What do you think?. Hi,\nsounds good. Is it possible to have the conda env live under the direnv_layout_dir()?\nThe main issue with the current approach is that two projects can have the same name. It happens to me quite a lot since I'm checking out a lot of github projects. That's why all the other layouts try to store their state in the .direnv folder under the project's root.. alright. potentially we could use something like pwd -P | sha1sum to create a unique name. but if the user selects the name by hand it works for me too.. pushed a few tweaks, let me know if you agree with them. thanks!. ~hi, can you give me the output of direnv version?~ nevermind, I hadn't refreshed my page. ok I found the issue: direnv dotenv bash also outputs export ''=''; which is valid but probably not understood by the older version of bash that is shipped on macOS.. alright, this will be fixed in release v2.13.3 !. Ok great, looks like it's ready to be merged. Any last words? :). There are few more python-related PRs in the pipeline. I will do a \"python\" release once they have all been processed.. It must be related to the change I introduced in bdca41da1f9b71bc743662a4e0a828303bf942a. @yermulnik I bet that your /bin/sh is not bash and thus doesn't support the bash escaping that I added. Yup, ad0bcebc66228f7289cb735798350f5ba604bb2b should fix this. Cutting a new release right now. This is too much work for me as I am not a frontend developer. Is this something that you would be open to tackle?\ndirenv is using https://github.com/chutsu/ditto/ for the website. If you contribute there it will also benefit others.. I just updated ditto to v0.15 which fixes the layout a bit. It's still not responsive.. Alright I think that it's good enough. thanks, I forgot to bump the version.go in the repo before doing the releases. 85a9bd9289937ace497e9986b26fb10de8925197 makes the command public now.. should be fixed in 2.14.0. Thanks for the report!. /cc @f440 @mdawaffe and @wilmoore who worked on that specific function. Hi,\nthis feature request resembles a lot one feature that I am planning to implement in direnv 3.0. Note that development on direnv 3.0 has barely started so this is not something that will happen tomorrow.\nEssentially what you want is a way to specify multiple contexts in the same folder. This is useful when one wants to load different environment variables for different targets like staging / test / production.\nIn terms of UX I am thinking of something like direnv switch <context-name>. When entering the folder, the default context would be loaded and then after that it's possible to use direnv switch staging for example to load the .envrc.staging file instead. Commands like direnv edit would have to be augmented to support the contextes. direnv would also export DIRENV_CONTEXT, so that PS1 can be extended to display which context is currently loaded.\nFor this work to be done I need to rework some of the internals to make them more flexible, which leads to the rewrite I was talking about.. I don't know if the context should be tied to the git branch name. In that case you can also commit different .envrc between each branches and direnv will automatically reload when that file changes. In fact you could already do something like this today:\n```sh\nreload on branch changes\nwatch_file .git/HEAD\nbranch=$(git rev-parse --abbrev-ref HEAD)\nenv_vars=$HOME/path/to/my-encrpted-vars-$branch.ssh\nif [[ ! -f $env_vars ]]; then\n  echo Env vars for $branch not found, using default\n  env_vars=$HOME/path/to/my-encrpted-vars.ssh\nfi\nexport $(ssh-vault view \"$env_vars\")\nand also reload if the encrypted vars change\nwatch_file \"$env_vars\"\n```. watch_file adds the files mtimes to the context which is evaluated before each prompt. If any of those files mtime changes (the .envrc and allow file are in this list by default) then direnv reloads the environment. stat()-ing a few files is not a big deal. I expect to see a slow-down after a few hundreds of files.. I just had an idea on how to implement this without extending direnv.\n.envrc\n```sh\ncontext=\n[[ -f .envrc.context ]] && context=$(< .envrc.context)\nwatch_file \".envrc.context\"\nif [[ -n \"$context\" ]]; then\n  context_file=\".envrc.$context\"\n  if [[ -f \"$context_file\" ]]; then\n   echo \"Loading context $context\"\n   source_env \"$context_file\"\n  else\n    echo \"$context_file missing\"\n  fi\nfi\n```\nThen create .envrc.staging, .envrc.prod, ... files and use for example echo staging > .envrc.context to switch to the staging context. Direnv will see that the file has changed and automatically reload the environment for you.\nThis could be further improved by creating bash aliases to switch context and move the logic into the ~/.direnvrc file.\n. Hi, can you give me the output of direnv version?. the go-dotenv package has been rewritten recently and should support that case properly.\nI have added a test in https://github.com/direnv/go-dotenv/commit/41490d485b3af2c705451d048142b0b750220691 for this and couldn't reproduce the error.\nProbably upgrading direnv will fix the issue for you.. @r-bar do you know if there is a way to report the outdated version?. thanks, I didn't follow that the newest Ubuntu release was starting back at A in the alphabet and assumed it was a special package set.. Yep, just add export in front of the things that you want to export. I think that your colleagues would have been able to help you out on this.. by the way, you can also load .env files from direnv if you prefer. You still have to add a .envrc but it would just contain the dotenv instruction. From that point it will also load things from a standard .env file.. I don't understand what problem it's trying to solve exactly. Since it's re-exporting all the variables from nix-shell, isn't it essentially like it's in the nix shell?. sorry I don't get it, shouldn't nix-build filter the environments from the cli? is nix installed in single or multi-user mode?. Got it :)\nI just tweaked the commit a bit and pushed it as 99e43f697ca10be5ec28b0185f9cfd9c456dc527 in master.. sounds good, feel free to change the wiki!. what happens with just this in the .envrc?:\nsh\nsource /ebio/abt3_projects/databases/miniconda3/etc/profile.d/conda.sh\nconda activate. just to be sure, this gives you the error?\nsource /ebio/abt3_projects/databases/miniconda3/etc/profile.d/conda.sh\nconda activate MY_CONDA_ENV\nthey must have some sort of heuristic in their script. that's what I mean, if you change conda activate to conda activate MY_CONDA_ENV in the .envrc you get the right behaviour no?. I looks like a much deeper use-case than what I initially understood.\nIs /ebio/ a shared filesystem on which the various anaconda instances are being installed and on which researchers are sharing their projects? If that is the case then the issue that you are having is that the .envrc is shared between users, but not everybody wants the same config. Is that correct?. In that case I think that I would leave the users who wants manual control configure things like they want. If direnv is not installed then they can setup *conda like they want.\nAnother solution would be to add a layer of indirection. Instruct all users to configure their ~/.config/direnv/direnvrc with the following content:\n```sh\nsource /ebio/shared/direnvrc\nput your overrides here\n```\nThe /etc/shared/direnvrc:\n```sh\nload_conda() {\n  source \"$1/etc/profile.d/conda.sh\"\n}\nThe list of available conda installs\nload_database_conda() {\n  load_conda /ebio/abt3_projects/databases/miniconda3\n}\nThe list of environments\nactivate_my_project_env() {\n  load_database_conda\n  conda activate MY_PROJECT_ENV\n}\nand then in your project `.envrc`:sh\nactivate_my_project_env\n```\n\nWith that setup the user can override pretty much anything in his direnvrc, he just has to re-define any of these bash functions.\nEDIT: it doesn't solve the issue for users who only want to only use direnv to load the conda versions.. yeah I don't know if I can be of any more help. Thanks, that's a really good report. I will just keep it open so that people can look it up more easily.\nUltimately the issue is on bash-preexec since they override the PROMPT_COMMAND and there is nothing direnv can do about it. That's the reason why the documentation tells to install the direnv hook last but it's not always easy to do so, especially since the bash config loading order is really complicated and varies.. I guess this can be closed now. Implemented in #332. @wbolster happy to accept a PR. The vim link is in docs/sidebar.md. no worries, thanks!. direnv gets executed before every prompt line in your shell once it's hooked into your shell. when it's executed it looks for the .envrc file in the current and parent directories and acts accordingly.\nIf the .envrc is found, and it's authorized, it loads the stdlib, the direnvrc (if exists) and finally the envrc files in a bash sub-shell. Then it looks at the environment and applies the diff to your current shell (and saves the original values).\nIf the .envrc is not found or has changed, it will restore the original environment variable values.\nThis is basically the core of how direnv works and which allows to have dynamic environment variables depending on the current directory.\nTo answer your question more specifically: create a new .envrc per project to set the virtualenv path that you want to use. The stdlib already provides a bunch of helpers, in your case adding layout python to the .envrc might just be enough. If that doesn't suit you then override the default or create new functions in the direnvrc file.\nhas three levels of functionality: stdlib, direnvrc and envrc.\nThe .direnvrc is a global shell script that you can use to provide shared  the . Sure. \"activating\" a virtualenv is basically doing two things, so you can add those in your .envrc:\nsh\nexport VIRTUAL_ENV=path/to/your/virtualenv\nPATH_add \"$VIRTUAL_ENV/bin\"\nIf you are tired of copying those around, make a function in your ~/.config/direnv/direnvrc file:\nsh\nactivate_virtualenv() {\n  export VIRTUAL_ENV=$1\n  PATH_add \"$VIRTUAL_ENV/bin\"\n}\nand then in your .envrc:\nsh\nactivate_virtualenv path/to/virtualenv\n. Yeah I guess direnv is best suited to you if you know a little of bash.\nvirtualenv also sets the PS1 environment variable in the activate script. PS1 is on the direnv blacklist because of a bug in bash 3.x on macOS so you would have to implement it yourself. I don't have an example at hand but it's possible to change the prompt depending on if VIRTUAL_ENV is set or not. In general I don't find it very useful but that's personal.. It looks like it's failing the test if the config.toml is missing. It should just ignore that step if it's the case.. yes good thinking!. Sounds good. Can you add the integration to https://github.com/direnv/direnv/wiki/ruby ?. Same argument as #335. A good start would be to document the integration in https://github.com/direnv/direnv/wiki/golang. direnv would have to do too many releases to keep up with all the other project changes. The current approach is to implement the most commonly version switcher and then let users override it with the direnvrc file. See https://github.com/direnv/direnv/wiki/Node. Sure, see https://github.com/direnv/direnv/wiki/Python#-pyenv . thanks @punitagrawal . I extended your work a little bit in #339. By not using printf at all it will avoid awkward escaping situations.. Let me do a 2.15.1 release so you don't have to keep patches in debian. https://github.com/direnv/direnv/releases/tag/v2.15.1. @punitagrawal do you think it would make sense to move your repo to direnv/direnv-deb maybe?. I think it would help with discoverability. It's hard to predict in what ways users are ready to contribute so my strategy is to lay everything in front of them. It's nice to wake up to a fresh PR :)\nThe story around including the deb/ folder in upstream is not super clear. I don't mind adding it but my understanding is that you would still have to maintain your own branches and tags.. I had to create a new repo, github doesn't support hosting two forks in the same org apparently (even if I did the rename before). Great! Feel free to ping me if there is anything else. thanks!. the release process has been broken with the go 1.10 upgrade. 2.15.1 is the latest release but doesn't have binaries attached to it. Working on a fix in #342. v2.15.2 is now the latest release!. @johhansantana direnv command not found means that direnv isn't found in the $PATH. Try putting the executable in one of the folder listed when you run echo $PATH.. nice! I'm surprised that it's working at all. Thanks @markwest1!\nI think that I have seen that particular issue already. The issue is with go's builtins \"path\" package that has some heuristics hard-coded for Windows. When the compiler targets Windows it's assuming that you willl be using Windows-style paths everywhere which is obviously not true.\nBasically we need the same package but that can be switched between Unix or Window paths at runtime instead. And then a way to setup direnv to tell him if it should be running in CMD or mingw mode.. did you have a look at the wiki yet? https://github.com/direnv/direnv/wiki/Tmux\n. okay I didn't read your report well enough. I think that what you want is to replace the direnv reload bit with eval \"$(direnv export bash)\".. I mean literally replace direnv reload. I think this requires a mental model of how direnv is working (assuming that you use bash):\n$ direnv hook bash\n_direnv_hook() {\n  local previous_exit_status=$?;\n  eval \"$(direnv export bash)\";\n  return $previous_exit_status;\n};\nif ! [[ \"$PROMPT_COMMAND\" =~ _direnv_hook ]]; then\n  PROMPT_COMMAND=\"_direnv_hook;$PROMPT_COMMAND\";\nfi\n^^ this is what gets installed into bash, the PROMPT_COMMAND is a special hook that executes before each prompt. Essentially what it's doing is execute eval \"$(direnv export bash)\" before every prompt, this is how it's able to update the shell environment dynamically. Because your script is sending a single line to tmux, the shell doesn't have the opportunity to display the prompt.. I can't reproduce the issue. After running cd /tmp/test-direnv && eval \"$(direnv export bash)\"; nvim -u NONE I can type :echo $FOO and it outputs foo. is nvim messing with your PATH? try :echo $PATH. can you also change the script to be cd /tmp/test-direnv && eval \"$(direnv export bash)\" && nvim -u NONE to make sure that the eval worked successfully ( ; replaced by && ).\nor replace the .envrc with: PATH_add something. $PWD/something should be in the PATH after this one.. sorry for being so late leaving feedback.\nIs vendor/bin valid for all PHP project or only if they use composer?. alright :). thanks!. The current workaround is to add dotenv in the .envrc. It's part of the stdlib and loads the .env file.\nI am not against extending direnv to support that scenario.. Yeah, have a look. We have a config.toml file now where the option could be introduced. I haven't really thought out the best approach to handle this yet. Maybe template .envrc files matches to specific path patterns could be nice.. I think that we need a template system that can load pre-defined .envrc files when specific files are found. The lookup would then change from for each folder up until root, look for .envrc to for each folder up until root, look for .envrc and a list of other files that maps to templates. This would make each prompt a bit more costly as it increases the number of stat() syscalls but should still be reasonable.\nconfig.toml\n[templates]\n.env = env.envrc\nshell.nix = nix.envrc\nwhere env.envrc and nix.envrc would live under ~/.config/direnv/templates`.\nenv.envcr would contain dotenv and nix.envrc use nix.\nI'm a bit wary of complicating direnv but that seems like a useful extension.\n. one approach is to add this to the .envrc:\nsh\n[[ -f .envrc.private ]] && source_env .envrc.private\nthat gives a level of extensibility for local overrides. Is the problem the repetition or something else? \nYou could write a function in ~/.config/direnv/direnvrc:\nsh\nload_envkey() {\n  eval $(envkey-source --cache)\n}\nThen use load_envkey in your .envrc files.. not really, bash is dirty which makes direnv is a dirty tool :). Thanks for the well written report.\nIn the current implementation it's possible to add prompt commands to the .envrc. I don't think it's a common case but that would break backward-compatibility for some users.. let's do this :). The issue here is that the virtualenv environment hasn't been created yet. layout python already does all of this for you by the way, have you tried it yet?. thanks everyone for your feedback. I spent a bit of time and reworked the makefile so direnv doesn't need to be checked out in the GOPATH anymore in fa4fef76aada582ce2aadc2788239e695581bbc7. thanks! I am glad that you took the time fixing this issue.\nDo you know if it would work if the parent folder was a symlink too? I am sure that your patch fixes the common case but am suspecting that it wouldn't work with deeper symlink structures.. direnv has the internal expand_path command for cross-platform purposes.\nIn regards to the symlink, I don't think that we should ever resolve them. The goal of the symlinks is to teleport some of the filesystem onto another part of the tree. When resolving the symlinks it's not respecting that.. I would love to get this fixed as well but fear that it's opening a rabbit hole. There are many ways that folders can be symlinked together. This is fixing one scenario and I don't see a solution that solves all the potential combinations.. It's mainly of my own doing, direnv doesn't have enough code coverage that I am able to merge changes with confidence. Since I am the one answering to all issues and also fixing most of the bugs, I can already see how this change will have ripple effects. I am not looking forward to debug the user's convoluted symlink setups ^_^\n. thanks @hexmode. I really appreciate every contributions but have limited time. It would be nice to have a second core contributor joining the projects but power law distribution and all.. Does elvish have any hooks that direnv can use to execute before the prompt command?\nAdding new output formats is fairly straight-forward. Eg: https://github.com/direnv/direnv/blob/master/shell_tcsh.go. possibly the edit:before-readline hook would work. TBC. > Due to lack of eval, the setup for Elvish is a bit more complicated. What I recommend is something like: direnv hook > ~/.elvish/lib/direnv.elv; echo 'use direnv' >> ~/.elvish/rc.elv.\n@xiaq is there a system path or LD_LIBRARY_PATH equivalent for elvish modules? If yes I could also distribute the direnv.elv as part of the direnv package.. It looks good to me but I don't have any working knowledge of elvish. It would be nice to add a minimal test-case to make sure it keeps working in the future.. nice! is there an easy way to download the elvish binary to make it part of the Travis-CI test run?. thanks @kpthomas. I reworked the Makefile so direnv doesn't need to be in the GOPATH anymore in fa4fef76aada582ce2aadc2788239e695581bbc7. http://status.fly.io/ is all green.\ndirenv.net and fly.io are working from my location.\nmaybe it's location-dependent or just a transient issue. For an open source project I am not too worried about availability, but it's good to keep an eye on it. Please keep reporting, I will keep this issue open.. I think we're good right?. https://apps.fedoraproject.org/packages/direnv is not a good source? I am not super familiar with the RedHat ecosystem.. Sounds good. The package releases are all done by the community, you are welcome to also package direnv for EPEL. If you need to host a repo for the EPEL release let me know and I will add it to the direnv github org.. You can do the same with make install DESTDIR=~/.local. or go install . to install it in $GOPATH/bin. Is that .bash_profile the Fedora default?\nThe Bash loading order is very system dependent so it's hard to find a universal solution:\n\nsource: http://www.solipsys.co.uk/new/BashInitialisationFiles.html\n. Sounds good, can you test https://github.com/direnv/direnv/pull/366 ?. Hi,\nI think the best solution would to wrap your script with direnv exec <LOOKUP_PATH> <CMD> [...ARGS].\nLet's say that you crontab looks like this:\n5 * * * * cd /path/to/my/script && ./my_script\nIt would change to:\n5 * * * * cd /path/to/my/script && direnv exec . ./my_script. great, glad I could help!. Did you try use nix --pure? All extra arguments should be passed straight to nix-shell under the hood.\nSee the \"#@\" argument in https://github.com/direnv/direnv/blob/002b11e291bc1f6dd352413f52cc76c701caefea/stdlib.sh#L639. Okay so it works but it exposes some issues :)\nI think the main issue is that direnv hook bash doesn't expand the path of direnv so it will be looked up in the $PATH. @steveeJ can you try this version please? https://github.com/direnv/direnv/pull/369. Very weird, it shouldn't work! That's the direnv that is supposed to export the environment variables from withing nix-shell..\nI pushed another commit that re-generates the stdlib.go file and now uses an absolute path for that direnv executable as well. It exposes another bug where direnv reloads on each prompt.\n. That second bug can be reproduces by adding this in an .envrc:\n```\nunset DIRENV_DIFF\nunset DIRENV_DIR\nunset DIRENV_WATCHES\n```\nI guess I should be filtering those out of the result first.. alright, try the latest version?. alright, thanks for testing! master should be working now. Fighting for purity, one commit at a time. Thanks, I fixed the instructions in 2251df501ce8fdf62483938748f1685eb07db49d\nChanging the default DESTDIR seems like a good idea but it means that now I have to explain to users that ~/.local/bin needs to be in the PATH. I also want to avoid branching based on the uid.. Closing for now. is PIPENV_PIPFILE the standard name understood by tooling?. Agreed. Fixed in master. Good idea. As a Nix contributor I should know better than allow fetches in the Makefile :)\nDo you mind creating a wrapper script that prepares the test environment for Travis?. Thanks @punitagrawal , I reworked the Makefile entirely in fa4fef76aada582ce2aadc2788239e695581bbc7. no worries at all, your patch gave me the push to finally do things properly :). deferring to @sbinet as he contributed that feature. maybe try version 0.11, I think that's the version that was tested with the feature. master is now testing against elivsh 0.12-rc2 and the tests are passing at least. 0.11 wasn't working for me though.. closing as it works with 0.12, I added a (0.12+) in the README. Ok glad to see that we agree. I am trying hard to not break backward-compatibility with direnv which is why I am introducing this new function. Moving towards named argument also seems like a good general trend for the stdlib as a whole.\nI will integrate your ideas as well.\nDo you see scenarios where the updated functions would break in backward-compatibility?. Good catch. Since the extra options are not documented, how likely do you think it is that users would depend on this. Is it common to tweak the virtualenv options for python developers?. Where do you look for the documentation usually, in the source, the man pages or the website?. Thanks that's very helpful. I really need to fix the stdlib docs on direnv.net as they look super ugly. I would also be nice if they were automatically extracted from the stdlib.sh code instead of having to duplicate them by hand to man/direnv-stdlib.1.md. did you try direnv version?. Thanks, I like the idea.\nIt should do a few more things to make it useful, otherwise it's not going to be worth the extra complexity.\n\npull the pre-built binaries. You can get the latest version from https://direnv.net/version.txt and then pull the binaries from https://github.com/direnv/direnv/releases\nrun shellcheck and shfmt against the script\nwrap the whole script in a function that is executed at the end. This avoids issues with half-downloaded scripts being executed.\ninform or even ask the user for changing any files in his home. okay, further PRs should go target the curl-install branch. this is a duplicate of https://github.com/direnv/direnv/issues/73. There are a few solutions written there. What is the use-case of opening a new terminal?\n\nOne way would be:\nsh\n[[ -n $ALREADY_LOADED ]] && exit\nexport ALREADY_LOADED=1\nurxvt. hmm right, I should have foreseen that issue. direnv's main goal is to dynamically load environment variables depending on your $PWD but I am open to explore new possibilities. In general stateful things like what you want to do don't play very well with direnv because direnv itself is only invoked on PROMPT.\nI think for your use-case it might make sense to just open a second shell by hand. Urxvt allows you to do spawn a second shell in the same $PWD like this: https://unix.stackexchange.com/a/32510/56223. can you . \"$HOME/.bashrc.d/direnv/chruby-brew.sh\" outside of direnv and then give me the output of type chruby?\nI expect that chruby is a bash function which is therefor not supported by direnv. direnv only handles environment variables. the .envrc is loaded in another bash process and only the environment diff is re-exported to the shell. this is what allows direnv to support zsh, fish and other shells.. Try adding eval \"$(direnv export bash)\" after every time that the current directory is being changed.\nIn a normal shell this is executed on every prompt but since now prompt is being displayed by ansible this needs to be invoked by hand.\nIf there is just one command that needs to be run with the loaded context, it's also possible to use direnv exec <DIR> <COMMAND> ... which will load the .envrc for the target DIR before executing the command.. makes sense, thanks!. @netflash what happens if you quote the eval?\nsh\neval \"$(direnv hook bash)\". @netflash I think it's alright. If you setup direnv a long time ago the instruction used to be wrong but it's correct now.. Yes, a common solution is to set the global git config to ignore the .envrc as described in https://github.com/direnv/direnv/wiki/Git. Interesting corner case :)\nOne solution I can think of is to introduce a source_once() function that keeps records of all previously sourced files and aborts if it already did. It would add a bit of overhead but probably wouldn't be too bad.. I'm not sure if it would work on macOS because they are stuck on a old GPLv2 version of Bash. For this it would be best to use a bash hash variable to record all the paths. Right, I could probably add a special check if the exit status is 139 instead.\n$ echo \"source ./rec\" > rec\n$ bash\n$ source rec\nSegmentation fault\n$ echo $?\n139\nIt involves drilling into the os-specific sys.Interface in https://golang.org/pkg/os/#ProcessState since exit statuses are apparently not something Windows supports.\nI will wait to see if anyone else is hitting that issue before going further.. thanks!. Sounds good overall. I don't have experience with Julia so it would be nice to hear from other Julia devs like you suggested.\nThe difference between use_* and layout_* is the following: use is to replace the $LANG version switchers. For example use julia 0.8 would load that version of jula. Whereas layout is to setup the project with the typical project layout of that type. So in conclusion you picked the right one.. thanks!. Is there any case where you want other .envrc to be loaded or is it only in the home directory?\nIf the goal is to change the user configuration the best approach is to use the .bash_profile or other shell-level configuration directly.. If there are more users that want this feature I would be willing to add it. By default I would prefer to keep direnv simple.\nHow about moving your projects under $HOME/code and then add an empty .envrc in $HOME/code?. Hi, this is quite unusual.\nCan you give me the output of echo $DIRENV_DIFF once you entered the folder?\n. I wrote a new sub-command to print the content of the DIRENV_DIFF in a human-readable form. Here is the output that I get for yours:\n{\n  \"n\": {\n    \"AWS_PROFILE\": \"hello_rocket\",\n    \"DIRENV_DIR\": \"-/Users/matt.grecar/projects/sideproject\",\n    \"DIRENV_WATCHES\": \"eJx8zj1LwDAQgOH_cnPp5fJtd0fBxUkc8nGtkbaRJFZB_O8uTgqO7_LyPH7CfRjPsAA-dG4djzDGvDVOoeFrqy-cRsdeMv8EznxeLcEEdzWPcjAsZJQT0nppJ7j9KH10WEZ746_pv_mc6rmWDXNpfF4Y9r2-Y2bStMZ444VXhpNmaYhDdsmTyaQUkdVOWWFs8kFIoYkFmRxijFFK95flpPa_WE_fAQAA__8AWE27\"\n  },\n  \"p\": {\n    \"DYLD_LIBRARY_PATH\": \"/Users/matt.grecar/torch/install/lib:/Users/matt.grecar/torch/install/lib:\",\n    \"LD_LIBRARY_PATH\": \"/Users/matt.grecar/torch/install/lib:/Users/matt.grecar/torch/install/lib:\"\n  }\n}\nWhat is that torch project?. I suspect that torch is messing with the environment. Is it installing anything in the ~/.bashrc, ~/.profile or ~/.bash_profiles ?\nCan you give me the output of echo $PROMPT_COMMAND?. Yeah I still don't understand the root cause of the problem. I don't think it's common since you are the first one to report it. Oh well, let's see if any other users ~complain~ report it nicely :). One option would be to use direnv exec <DIR> <COMMAND> to load the .envrc of that sub-folder before executing the command. Eg: direnv exec ./project1 ./project1/bin/project1.\nOr with a ./run wrapper:\n```sh\n!/usr/bin/env bash\nset -euo pipefail\ncd in the folder of the target binary\npushd \"$(dirname \"$0\")\" >/dev/null\neval direnv in that context\neval \"$(direnv export bash)\"\nrestore the original $PWD\npopd >/dev/null\nexecute the passed command\n\"$@\"\n``\nAnd then invoke./run ./project1/bin/project1. Hi, do you know what shell is being used? If it's bash, can you give me the output ofecho $PROMPT_COMMAND. It's possible that the iTerm integration is changing the shell hooks and discarding those used by direnv.. Moving theeval \"$(direnv hook bash)\"line after the iterm one should fix the issue.Searching forPROMPT_COMMAND=` in https://iterm2.com/shell_integration/bash shows that they are overriding everything. . no problem. If you have the time it would be good to report the issue to iTerm since they are causing the problem. Sorry for the lack of quick feedback, I have been mulling over this for a bit.\nI would prefer is this was combined with #406 somehow. Introduce a new $XDG_CONFIG_HOME/direnv/auth path and then store the desired outcome in the file as a structure. It doesn't feel right to split the authorization in two places like that. Since the authorization is now a tri-state it would also be good to add a direnv forget command that erases the file.. Hi @Arkham ,\nhave you seen this page yet? https://github.com/direnv/direnv/wiki/Tmux\nI don't know if adding an exception is a good idea or not. I would like to avoid adding specialized exceptions like that in direnv but if it solves the problem then maybe. Tmux seems to be changing a bunch of environment variables on start which is tricky to deal with from direnv's perspective. I think the issue is really with Tmux but last time I tried digging in the code I got lost.\nHave a look at the wiki page to see if it can solve your problem. If you get a better understanding of Tmux than I do I am open to add that exception.. I would be open to have that configurable in the config.toml file. Something like [env] ignore_keys = [\"TMUX_PANE\", \"SSH_AUTH_SOCK\"]. It would require a bit of change in the code to pass the configuration object around.. thanks zerok!. What type of shell are you using? zsh and fish have global environments that can be shared between shells.. And also what type of terminal emulator? TMux is also known to persist environment variables in weird ways. I understand the problem now but don't have a good solution. direnv dump or an equivalent would have to know what environment variables have changed to only export the modified ones.. when using the nix-shell --pure option, direnv_load will detect that a bunch of environment variables are missing and propagate them as \"unset\" instructions. The issue is on the load side. Something like eval \"$(nix-shell --pure --run 'direnv dump-with-bash-format)\"` would work pretty well.. Thanks for testing!\nJust for the path, it might make sense to back it up and restore. But I get that this is not ideal.\n```sh\nuse_load_test() {\n    if [[ ! -e \"cache\" ]]; then\n        nix-shell --show-trace --pure \"$@\" --run \"\\\"$direnv\\\" dump bash\" > cache\n    fi\n    local path_backup=$PATH\n    eval \"$(cat cache)\"\n    export PATH=$PATH:$path_backup\n}\nuse_load_test\n```\n\nP.S: note that I had to hardcode the location of direnv to so it picks up the correct direnv\n\nIn the stdlib, $direnv is already resolved to the executable path. the binary path it expanded at hook time, when the shell is loaded. (see the output of direnv hook bash for an example). That way it can keep executing when the PATH is changing. This might be what you experienced.. I agree, this has been bugging me for a while too.\n$XDG_DATA_HOME is meant for read-only data (like manuals, assets, ...) but maybe there is another variable available?. It doesn't say it explicitly unfortunately. Given the default path I assume that it inherits the same properties as /usr/share. See https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard\n. I don't know why it would be called \"share\" and have $XDG_DATA_DIRS also read in it, it's confusing. But looking at the content of that folder in my filesystem I can see that a bunch of application indeed use it as a sort of state folder. . https://github.com/direnv/direnv/pull/410 implements the change but breaks backward-compatibility, which I very much try to avoid doing. Any ideas? . made a few more improvements. It's a natural question.\n\nPS1 is usually a local variable and not environment variable.\nThere was a bug in macOS' bash 3.x implementation that would crash the shell if PS1 was unset.\n\nThose two combined led me to blacklist PS1 as and environment variable that can be changes.\nAs a workaround, an option is to build a PS1 that understands environment variables.\nEg:\nPS1='${CUSTOM_PS1:-default PS1}: `\nAnd then in the .envrc: export CUSTOM_PS1=mycustomPS1. copied to https://github.com/direnv/direnv/wiki/PS1, thanks!. It should work the same under zsh AFAIK. Have you tried it?. thanks @hexmode!. hi,\nyes variable expansions are currently not supported: https://github.com/direnv/go-dotenv#missing\nI don't have anything against them, it's just that I didn't have the personal need for them. Happy to get a PR!. ok great :)\nyes that's the package that direnv is using. It's quite self-contained so I decided to extract it out.. and merged. Thanks @hakamadare for implementing that feature!. soon ;). thanks!. Hi!\nyou can set that environment variable with a really long timeout in your ~/.bashrc for example:\nexport DIRENV_WARN_TIMEOUT=100y. Environment variables are inherited from the parent process.\nFor example if you start X11, you could set the environment variable in ~/.xprofile. Below that the terminal emulator might set some environment variables. Then the terminal emulator will load the shell. If the terminal emulator is set to \"login\" then it will also load /etc/profiles before starting the shell.\nEach shell has their own environment loading mechanism. For example bash's look like this: \nfish shell probably has it's own, I will let you look this up :)\n. I think this should really be a direnv configuration option.. It's an old feature and it hasn't been converted to the ~/.config/direnv/config.toml file yet. First write a function if your ~/.config/direnv/direnvrc and then document it in\nhttps://github.com/direnv/direnv/wiki/Ruby. What is Jabba? I recommend first writing an entry in the Wiki https://github.com/direnv/direnv/wiki/Ruby section. Sounds good, happy to get a PR that changes that. Thanks for the well written bug report :)\nIt's true that the meaning of IN_NIX_SHELL is usurped here. It doesn't map 1:1 to the nix-shell experience.\nThe primary use-case for me is to detect whenever the binaries are in the path or if I have to run nix-shell first. I usually add something of the likes of if [[ -z $IN_NIX_SHELL ]]; nix-shell --run \"$0\"; fi in my scripts. The goal being to avoid to interpret the nix code all the time as it's slow. If IN_NIX_SHELL was removed then it would hurt my use-case as I would be faced with the reverse problem.\nI think the best thing to do for you is to override the use_nix function by writing your own definition in ~/.config/direnv/direnvrc. It could be just the original with an added unset IN_NIX_SHELL line at the end. Or pick another implementation from the Wiki: https://github.com/direnv/direnv/wiki/Nix\n. In my case the concern is a bit orthogonal. The script doesn't know anything about direnv and just checks it the nix-shell has already been applied (which is not super precise but that's another issue).\n\n./runner\nshell.nix\n\nSo ./runner only loads shell.nix if it hasn't been already loaded.\nIn that scenario the project doesn't need to know about direnv, it just happens that if direnv is being used with use_nix then that approach will work as well.. Hi @Globegitter,\nSounds like a useful thing to have. I don't think that direnv necessarily needs to be extended though as you could add your own checking function in the .envrc.\nEg:\n```bash\ncheck_vars() {\n  for key in \"$@\"; do\n    if [[ -z \"${!key}\" ]]; then echo \"Missing $key var\"; return 1; fi\n  done\n}\nif [[ -f .envrc.secret ]]; then\n  source_env .envrc.secret\n  check_vars EXPECTED_ENV_VAR1 EXPECTED_ENV_VAR2\nfi\n``\n. The best option is to source the lib. It would add a single line per.envrc`.. My default it to try and keep direnv simple. If I hear that many people need a feature then I would be inclined to revisit this.\nThanks for the thorough bug report, it's interesting to see how other people are using my tool :). Nice!\nDo snap package know how to expose manpages that are part of a snap to the user? You might want to use make install DESTDIR=${SNAPCRAFT_PART_INSTALL} instead to build and install direnv if that is the case.\nOther than that it looks good. Let me know when you think that this is stable enough and it can be added to the direnv README.md as a distribution method.\n. Also make sure to Watch the direnv repository for new releases. This is a new GitHub feature that might be handy for you to keep the snap package fresh.. thanks! I added Snap to the list of distributions in https://github.com/direnv/direnv/pull/426\n. hi, can you add exec 1>&2 as the first line of the shellHook? or >&2 at the end of the virtualenv line. the issue is that everything in the build is output on stderr, except things running in the shellHook. And use nix reads the direnv dump from stdout so the results get mixed in.. This bug is actually a duplicate of https://github.com/direnv/direnv/issues/225 .. Since they are not 100% equivalent it might be better to create a new layout for them. I guess venv is python bringing virtualenv to the stdlib and so has less support(?).\nIt would be nice if direnv could source stdlib functions from externally-maintained sources as I don't use python enough to make good judgement calls.\nFor now I recommend overriding the layout_python function in your ~/.config/direnv/direnvrc with the snippet from https://github.com/direnv/direnv/wiki/Python#venv-stdlib-module. I will add a mechanism to direnv to allow sharing of stdlib functions instead. It's nice to have some defaults built-in but it's too much work if direnv is responsible for maintaining all of them.. @Mic92 mind re-opening the PR? I might have been a bit too grumpy in #428 :D\nIf python is integrating virtualenv in new python releases it makes sense to switch to this. I think the PR is almost ready to go, just put # shellcheck disable=SC2239 at the right position in the code instead of disabling it for the whole file.. @vshih the Travis windows support is not generally available yet so I installed AppVeyor instead. I am not terribly interested in doing the Windows support myself but if you want to finish that PR then it would be ok to rebase your work on top of it: https://github.com/direnv/direnv/pull/435/files. direnv loads the .envrc in a bash sub-shell, and then re-exports the diff back to the target shell. This is the best way to support reliable unloads when switching between folders. It also makes editor integration possible. Obviously the downside is that aliases and functions are not supported.\nInstead of using aliases, create a bin/login_c1 script to run lxc exec c1 -- sudo --user ubuntu --login and then add PATH_add bin in the project's .envrc.\nClosing this as a duplicate of #73.. thanks!. This introduces a few issues with backward-compatibility:\n people rely on the existence of $DIRENV_DIR to check if an environment has been loaded for example\n the .env might get loaded even if this is not the user's intention\nI don't have a great solution to fix that unfortunately. Ideally the behaviour would be configurable in some way.. I updated to wiki to also check if $DIRENV_DIR is set as well. This assumes that you would either use virtualenv, or direnv with virtualenv, but not nest direnv and virtualenv.. Thanks I fixed the wiki.\nOk so you are activating the virtualenv manually from within a .envrc-loaded folder. Can you also add a check for && -z \"$_OLD_VIRTUAL_PS1\" to the condition list ?\nAlternatively you could create another .envrc in the sub-folder with:\n```sh\nload the parent .envrc\nsource_up\nlet direnv handle the virtualenv\nlayout python\n```. cc @ipolyzos who did the snap packaging. Does windows expose the $HOME environment variable?. But yeah, it doesn't take Windows into account at the moment. true. direnv should probably use %APPDATA% on windows. As long as the implementation includes proper tests. direnv is missing too many tests at the moment that I feel confident shipping new features. The DIRENV_DIFF format needs to be changed to accommodate for the diffing of more things than environment variables as well.. I believe that most people are good people. So far it hasn't been a problem and people have been respectful. Also, Github's only toggle on the Wiki is to restrict the access to committer people. It means that everyone else is locked out of the wiki.. added a footer to let people know that the wiki is open to everyone. direnv users must be able to trust the computer itself. If an evil user is able to change the victim's home folder, anything can happen. They can achieve similar results by: patching a binary in the user's PATH (eg: $HOME/bin), extend the .bashrc or any other configuration.. What if A and B want to collaborate on the same filesystem? I am not convinced that preventing direnv to work in that scenario would not prevent some legitimate, and already deployed, use-cases.\nSimilar arguments can also be applied to any program that has startup scripts in it's configuration. Or any code base's build script. Any build system config files that can be mutated can be changed to anything.\nAnother attack vector is to create a repository with the .envrc loading any other file. Since direnv only checks the .envrc, the user won't be asked for configurmation when that other file changes either locally or on git pull.. hey John. I'm using Nix and didn't witness this issue (yet). Do you mind sharing a bit more information on the failure that you are seeing?\nIf the issue is that direnv is not reloading properly, you can use watch_file <filename> from the direnv stdlib for direnv to reload automatically (on next prompt) on other file changes than the .envrc.\nIf the issue is that nix-build is breaking then I will need more information as I don't know what that could come from.. Is this something I can reproduce locally? I would need to take a look at the nix code to understand why src is missing. Can you also paste the list of environment variables that direnv is changing?. This is actually true for all calls to PATH_add and path_add. direnv doesn't try to de-duplicate entries and only prepends the new paths.\nPractically speaking the new GOPATH is valid but it would sure be nice to clean that up. Happy to take a PR to remove the last entry when one is duplicated.\nThe main reason that it wasn't implemented before is that doing such thing in Bash is generally not very nice.. That's a good idea. direnv cannot guarantee that all the files are hashed since the .envrc can invoke arbitrary programs but if we can improve the situation I am all for it.\nImplementing that feature might require to change the allow file format.\nThe main issue right now is that I don't have a good sense of the UX. Would calling direnv allow . automatically allow all of the linked files?. Thinking about this a bit more: because direnv is not declarative, it wouldn't be possible for direnv to collect the list up-front. It means that in terms of user-experience, the only thing that it could do is interrupt the evaluation (for example source_env might be augmented to do that) to ask for more permission. In terms of UX, it wouldn't be the best experience I think.. Maybe the best solution would be to go the other way: a user would be asked to confirm for a certain directory to load the .envrc the first time direnv encounters that directory. And make it extra clear but dumping a big warning message that the whole directory is not permitted to load arbitrary code. It might be better than to give a false sense of security.. nix-shell --pure removes all the inherited environment variables. you can see that it also unsets the HOME and other environment variables (the ones with the - prefix). No idea, I cannot vouch for the content of the wiki :). what is the behaviour that you would expect?. thanks!. thanks, this should be fixed by #457. Cutting a release right now.. thanks!. thanks!. thanks @jcpetruzza, I already integrated all your test improvements.\nSorry but the rest of the PR changes direnv too much and I am not comfortable merging this. I can see direnv potentially managing more things than just environment variables but it would have to be done declaratively where each shell hook would be expanded to handle the diffing.. sorry I haven't had much time to think and this is a bit of a deep subject.\nOne of the fundamental difference between environment variables and the rest is that env vars are inherited between processes. So I can cd into a project with my bash shell, start zsh and provided both have direnv installed, everything will keep working as before. I can cd .. in the zsh shell and unload the env, etc... If I exit the zsh shell, I will be back to the bash shell with it's state intact as well.\nNow if I think about aliases, what should happen is that the bash hook, somehow keeps track of it's own aliases. If a special DIRENV_ALIASES environment variable is created after an eval, it would have to backup the old aliases and apply the new ones itself. And somehow on every prompt command it would have to check if DIRENV_ALIASES has changed so that it could work when invoked as a sub-shell. Here I am assuming that the aliases are simple and compatible with all of the shells. It also puts the burden on each shell implementation to implement their own aliasing mechanism.\nThis is the reverse of your LOAD/UNLOAD actions as the responsibility is shifted from the .envrc to the specific shell for doing the backup and restore. But it means that aliases can actually be restored which I don't think your approach handles.\nAnother reason for my reluctance is that I would prefer to merge all the DIRENV_ environment variables into one DIRENV_STATE at some point, so introducing new variables is not ideal. For that I think your gzenv utility is quite helpful. I realize that it's not directly related to the PR and I would be happy to be working with you on that first if that's alright with you.\n. thanks!. I am ashamed of this one, and it has been around for a long time now. thanks for the fix!. the bug here is that DIRENV_WATCHES shouldn't be empty. emacs would load the empty environment and only attempt to reload if the .envrc gets changed. This would mean fixing #224. Happy to get a PR that classifies all the possible error types. Thanks!\nDo you mind submitting a PR? the doc is under man/direnv-stdlib.1.md. this would extend direnv into the realm of the build systems. It might be better to use another tool for that like redo and invoke it in the .envrc.\nThat being said it's not the first time I have seen custom caching logics being implemented. Eg: https://github.com/direnv/direnv/wiki/Nix\n. I see. The DIRENV_WATCHES environment variable is wiped before loading the .envrc so commands in it don't have access to the previous mtimes I'm afraid.\nFor pipenv specifically, it should be possible to compare the mtimes as an extra condition over here: https://github.com/direnv/direnv/blob/8fcfa7889b4ae795760e4675d0466633706ecca1/stdlib.sh#L517\n. thanks @edubxb, much appreciated. that's a problem with the underlying nix-shell:\n$ nix-shell -p gnutar --run \"which cc\"\n/nix/store/ghzg4kg0sjif58smj2lfm2bdvjwim85y-gcc-wrapper-7.4.0/bin/cc\nA better implementation would probably use nix run and should be added to the Nix wiki page.\n$ nix run nixpkgs.gnutar -c which cc\nwhich: no cc in (/nix/store/wmxqm38g1y1y7sd7s9vg7an3klffaiyz-gnutar-1.31/bin:/home/zimbatm/go/bin:/home/zimbatm/bin:/run/wrappers/bin:/home/zimbatm/.nix-profile/bin:/nix/var/nix/profiles/default/bin:/run/current-system/sw/bin:/etc/profiles/per-user/zimbatm/bin). yes that's exactly what direnv does. It looks up the $PWD until it finds the .envrc file. If the .envrc file is the same and hasn't changed, it keeps the loaded environment.. no problem. @coulonxyz the hook is shell-specific, so it should be eval \"$(direnv hook zsh)\" bash => zsh. it happens to the best of us :). Maybe replace the dash with a space since it's not accessible as a separate executable unlike the old libexec ?\n. This has been fixed in afcb2e1061015e181cc592227f89aec98703c617 . The intent is to transform the next rbenv call into a noop. Maybe superfluous.\n. Same comment about replacing the dash with a space like previously ^\n. Thanks I'll have a think to see if I can make things clearer.\n1> is supposed to mean output on stdout but it's a notation that I invented on my own. Do you have a better idea to indicate and maybe differentiate between stdout and stderr ? What about: # stdout: ~/my/project~ for example ? \n. Thanks, I'll follow your advice\n. If another features uses precmd direnv would be replacing it here. In other shells we try to keep existing precmd functions, I don't know what are the best practices for tcsh.\n. $(\" -> \"$(\n. Maybe rename to CleanState() or CleanContext()\n. the \"$rcpath\" should be quoted in case it contains some spaces\n. quoted \"$file\".\nShell escaping is tricky. I always use shellcheck on all of my scripts because of that.\n. I'm not sure why the quotes were removed here. On OSX the home directly can be \"/Users/Foo Bar\" I think\n. I agree but I prefer to do the release separately. I like to bump the version and update the CHANGELOG.md at the same time (and then tag that commit).\n. old_paths also needs to be fixed to import the existing $MANPATH. what happens if node releases a version with a component that contains two digits? Like 6.10.0. can you extract local node_version_prefix=${NODE_VERSION_PREFIX-\"node-v\"}. Ok it's fine. is there a pipenv init that could make sense here?. No that's good, I just wanted to check if there is anything helpful that we could do instead of returning an error. Since it's not the case the error is good.\nActually you should use log_error to respect the direnv log format.\nThe error after every command is a but that I meant to fix. It should only fail once and stay in the errored state.. Pushed the change for the error logging in 4748fbe. this shouldn't be necessary since every external dependency is in the vendor/ folder. what error did you get?. is it possible to eval the output directly?. is \" escaped twice on purpose?. Can you add a test for \" and \\ as well ?. Okay, maybe add a note about the eval.\nThere are two issues with that implementation:\n two shells entering at the same time would overwrite the same file\n if the -source is failing the .direnv.elv would be staying around\nTo work around that issue, use ioutil.TempFile(\"\", \"direnv.elv\") to allocate a new random filename. Because the tmpdir is usually tmpfs it will disappear on next reboot.. is the \\n required or just nice to have for the formatting?. I think that you first need to escape \\. Otherwise \\\" would get escaped to \\\\\" instead of \\\\\\\" ( In most escaping systems, \\\\ cancels the escape ). Brilliant. There is already a direnv dump json so all that needs to be done is on the elvish side. Most shells don't support JSON as an input so I didn't expect that :). It's also the same as direnv export json.\nMaybe it's better to report the alias and then have the hook use the right exporter instead of duplicating the code.. I don't mind it but just so you know, this is usually better handled in a global gitignore as it's unrelated to the project.. can you extract the Stat+Lstat function to getLatestModTime(file) function?. ",
    "josh": "+1 to a pure shell rewrite\n. Looks better, thanks.\n. +1\nHere's what I've been using https://gist.github.com/869682\nTo get it officially submitted, I think you need to tag some sort of \"official\" version. So mark HEAD as v0.1.0 (or whatever).\n. ",
    "pwaller": "Can this issue be closed? If not, can you elaborate?\n. @zimbatm: Status?\n. Is this still relevant now that it's all Go?\n. Some ideas:\nThere is a general problem here that direnv opens up a new attack surface. There are two obvious scenarios. There is the single-user environment where you download a package, and you don't realise that there exists a malicioius .envrc. Then there is the case on a multi-user environment where one user can drop a .envrc file into /tmp and any user who cds to a subdirectory of /tmp can then be owned.\nFor the multiuser case you could refuse to respect .envrc files which are under the control or writable by users other than the current user. The single user case is trickier. An idea I had would be to warn the user that there is a .envrc and prompt them to type \"yes\" to trust it. Then there is a list of trusted .envrcs (along with hashes of said .envrcs, disallowing an attacker to manipulate a trusted .envrc) stored somewhere in the user's .config directory.\n. That doesn't deal with the case that a project covertly includes a .envrc.\nI think the only secure way forward is to explicitly accept each one. Maybe\nwith a \"direnv enable\" command or some such. Then when a previously\nunencountered or a modified envrc is seen instead of sourcing it the shell\ninvited you to enable it. What do you think?\nOn 22 Aug 2012 16:47, \"Jonas Pfenniger\" notifications@github.com wrote:\n\n@pwaller https://github.com/pwaller what do you think of the whitelist\napproach I described above, would it works with your current workflow ? By\ndefault it would only allow .envrc scripts from your $HOME and deeper.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/23#issuecomment-7938722.\n. Just hypothetically, imagine direnv was put in the global bash profile on a\nmulti user system. This would not be a safe thing to do at the moment as it\nwould open up a new not-innately-obvious attack vector.\n\nIn your extreme example the consequences would be obvious and possibly\ntraceable. But imagine I untar or unzip some content that I was not\nexpecting to execute anything from. Oops, you were just owned. And it might\nnot be apparent.\nOn 22 Aug 2012 17:13, \"Jonas Pfenniger\" notifications@github.com wrote:\n\nMaybe I'm too naive but if someone at github would push an evil envrc (eg: rm\n-rf $HOME/* >/dev/null 2>&1 &), everyone would know and they would loose\ncredibility. Isn't it a sufficient deterrent ? :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/23#issuecomment-7939615.\n. To add, \"loss of credibility\" won't be a deterrent to someone who has gained control of an account illegitimately.\n. Also, echo -n $'\\033[1A\\033[K' is sufficient to eliminate the text saying that an environment has been sourced, so this is trivial to make entirely invisible. Plus the configuration is already in a dot-file. This would basically be invisible to novice and experienced users alike.\n. I agree it can be closed, I was thinking the same.\n. Indeed. How could you tell?\n. Of course. Put it together myself. The sed is in there to make it apparent what is going wrong when it fails. You may need to run the installation some times before getting it to install or fail.\n\n```\nEAPI=4\ninherit eutils multilib\ninherit git-2\ninherit autotools\nEGIT_REPO_URI=\"http://github.com/zimbatm/direnv\"\nDESCRIPTION=\"Unclutter your .profile\"\nHOMEPAGE=\"http://direnv.net\"\nLICENSE=\"MIT\"\nSLOT=\"0\"\nKEYWORDS=\"amd64\"\nsrc_prepare() {\n    cd \"${S}\"\n    sed -i 's|./test/direnv-test.sh|bash -x ./test/direnv-test.sh|g' Makefile\n}\nsrc_install() {\n    emake DESTDIR=\"${D}/usr\" install || die \"Emake failed\"\n}\n```\n. Fix appears to work, thanks!\n. That was quick, thanks!\n(It's Peter by the way :-)\n. Ah. Tests succeed locally, but that's because direnv-hook creates the relevant file. Thoughts?\n. Thanks @zimbatm. Agreed that we should test for a while.\nI've modified the messages to produce a little less spam, since we generate the message that an environment is being sourced in source_env. It means there is a little less information now, since it doesn't tell you that it's due to a reload or change of directory.\nI'm thinking of introducing a \"direnv enable --permatrust\" or something which enables a .envrc just by path. It would require the user to type \"yes\" and briefly warn them about possible attack vectors they should consider.\n. > If you have a ~/.direnvrc file, it's not possible to enable it. Maybe direnv enable should accept an optional path ? Or maybe ~/.direnvrc should always be considered as secure ?\nI think we'd want to check the write permission is not global, but otherwise I think it's reasonable, considering that the user could just write to .bashrc or any number of other files..\n\nI think it's enough to touch the path to the checksum to enable an .envrc\n\nI was thinking that it would be nice to be able to list enabled paths, for example to keep the possibiliy to audit, and remove old checksums.\n\nNot directly related, maybe direnv-hook should set the common variables like DIRENV_LIBEXEC and DIRENV_CONFIG_DIR. That way we wouldn't have to set these check+export-default all the time.\n\nAgreed.\n\nAlso, in other news, I'm currently rewriting some parts of direnv in C to avoid the ruby dependency.\n\n+1, though what happened to the go port?\n. I could certainly use it with a go dependency. I don't know about others, but then you could always provide a build.\nAny thoughts on what's blocking this PR? I've been using my branch for the last few months and I haven't encountered any issues with it. It seems to do exactly what I want and I think is reasonably secure as far as I can tell.\n. Okay, then I will close this PR in that case. Let me know when it's ready for a test.\n. @splaspood: It's a bit hard to understand why this might be happening.\nThe only times this should happen that I know of are if you're starting a new shell, the .envrc has its mtime changed, or maybe if one of direnv's scripts are being re-sourced.\nCan you look at the output of:\nstat --dereference -c '%Y' \"$PWD/.envrc\"\nbefore and after running ls? Is it being changed by something? Then we can start ruling out some possibilities. I'm not the original author.\n. @millisami, are you able to test this with the new go version?\n. I assume this can be closed. If you encounter this with version 2 please let us know.\n. @bmc: You could also have removed the commit with an interactive rebase and forced the branch.\n. Yes but I have no time at the moment. I'll come back to various outstanding\nthings on github in a timescale of ~months.\nOn 24 April 2013 21:07, Jonas Pfenniger notifications@github.com wrote:\n\n@pwaller https://github.com/pwaller still interested integrating this ?\nI think it's a great idea\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/40#issuecomment-16961416\n.\n. Of course, go ahead.\n\nMy main idea is to have a load of checks, for example, if there exists a\nman directory, add it to $MANPATH. You need to support arbitrary checks\nthough and it would be nice if it is easily extensible, because I'd like to\nbe able to add non-standard things like setting a $ROOTSYS if there\nexists a ${PREFIX}/bin/root (\"ROOT\", in this case, is scientific\nsoftware).\nOn 25 April 2013 00:05, Jonas Pfenniger notifications@github.com wrote:\n\nOk do you mind if I give it a try ?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/40#issuecomment-16978010\n.\n. Closing this one as done for now.\n. Can I ask your reasoning?\n. Why is this a concern?\n. I think this has been improved by #99 and others. Please make a new issue if this is still a problem for anyone.\n. One suggestion, can we make it so that all commands are run with a timeout? Sometimes with a network filesystem the console can appear to hang. Maybe direnv could wait 100ms and then say \".. direnv is taking a while possibly due to high load or a slow filesystem, hit CTRL-C to get a terminal\".\n. Stack trace.\n\nsyscall.Syscall()\n    /home/pwaller/Projects/External/go/src/pkg/syscall/asm_linux_amd64.s:23 +0x22\nsyscall.read(0x4, 0xc2000a1000, 0x1000, 0x1000, 0xc1ffff7ff0, ...)\n    /home/pwaller/Projects/External/go/src/pkg/syscall/zerrors_linux_amd64.go:2311 +0x73\nsyscall.Read(0x4, 0xc2000a1000, 0x1000, 0x1000, 0xc2000800e8, ...)\n    /home/pwaller/Projects/External/go/src/pkg/syscall/syscall_unix.go:132 +0x5d\nos.(*File).read(0xc2000800b8, 0xc2000a1000, 0x1000, 0x1000, 0x63e7d0, ...)\n    /home/pwaller/Projects/External/go/src/pkg/os/file_unix.go:174 +0x63\nos.(*File).Read(0xc2000800b8, 0xc2000a1000, 0x1000, 0x1000, 0x0, ...)\n    /home/pwaller/Projects/External/go/src/pkg/os/file.go:95 +0x99\nbufio.(*Reader).fill(0xc20008b1e0, 0x0)\n    /home/pwaller/Projects/External/go/src/pkg/bufio/bufio.go:77 +0xfa\nbufio.(*Reader).ReadSlice(0xc20008b1e0, 0xc20005930a, 0x0, 0x0, 0x0, ...)\n    /home/pwaller/Projects/External/go/src/pkg/bufio/bufio.go:257 +0x249\nbufio.(*Reader).ReadBytes(0xc20008b1e0, 0xa, 0x0, 0x0, 0x0, ...)\n    /home/pwaller/Projects/External/go/src/pkg/bufio/bufio.go:335 +0xb7\nbufio.(*Reader).ReadString(0xc20008b1e0, 0xa, 0x0, 0x0, 0x0, ...)\n    /home/pwaller/Projects/External/go/src/pkg/bufio/bufio.go:374 +0x53\nmain.loadRC(0xc200046a50, 0xc20008b180, 0xc200000b40, 0x0, 0x0, ...)\n    /home/pwaller/Projects/direnv/cmd_export.go:136 +0x5bf\nmain.func\u00b7007(0xc200000200, 0xc200000b20, 0x2, 0x2, 0x0, ...)\n    /home/pwaller/Projects/direnv/cmd_export.go:50 +0x285\nmain.CommandsDispatch(0xc200000200, 0xc200046000, 0x3, 0x3, 0x4d9d20, ...)\n    /home/pwaller/Projects/direnv/commands.go:62 +0x2a4\nmain.main()\n    /home/pwaller/Projects/direnv/direnv.go:11 +0x58\n. I'm assigning myself to this one if that's okay.\n. Line which is freezing.\nSo the problem is that the process is terminating due to some error, and go is trying to read on stdout where there is nothing available to be read. This is a classic thing for which goroutines are really useful because you can do the reading and the error checking independently, so that you don't end up blocked in this manner. I will try and come up with a fix.\n. There appears to be a syntax error in the stdlib which is causing the error, in addition:\n$ direnv stdlib > stdlib.sh\n$ bash stdlib.sh\nstdlib.sh: line 200: syntax error: unexpected end of file\n. the line which is causing the error.\n$ bash --version\nGNU bash, version 4.2.37(1)-release (x86_64-pc-linux-gnu)\n. By the way, is there a reason you're using os.StartProcess instead of exec.Command ?\n. Diff is unhelpful, better to look directly at the new implementation.\nThe new behaviour is now that if bash fails you get a message like this:\n$ direnv export bash\n/bin/bash: eval: line 200: unexpected EOF while looking for matching `\"'\ndirenv: bash failed in loadRC(): \"exit status 2\"\n$\n(and no freeze).\n(I introduced a \" at the end of the file to make it fail)\n. Slight annoyance with that: you can't represent the error condition if you pass []byte (since an empty slice could conceivably be valid output in some situations?). That's why I chose to send the map, because then nil is reserved for \"something went wrong\".\n. Can you articulate specific objections with the current implementation?\n. Good point. Man, that is a lot more elegant ;-).\n. Fixed and rebased.\nMakes for many fewer lines of code and one less goroutine :+1: \n. I think it will be, since I've seen lots of peoples shells freeze at our institute because of a slow network file system. If you have a ton of cruft in your environment it can be really hard to identify what's causing it. This will help users.\n. Rebased.\n. @zimbatm, In most projects I work on the convention is \"not to merge your own pull requests\". Would you be interested in adopting that? It allows for (at a minimum) a quick review of ones own changes. Unless I say otherwise, if I send a pull request I consider it ready for merging.\n. I agree. But there is no need for you to ask me to merge it at the end if you're happy with it, that adds an additional round-trip.\n. Comments addressed.\n. Rebased.\n. Can this be closed now? :)\n. Fix should be easy, just conditionally run the goroutine which emits the warning.\n. I helped Carl put this commit together because we were seeing unexpected environment variables appearing in the \"diff\" between environments.\nNow that I think about it, I'm not totally certain this is the right solution, since the user might want to invoke something in the $PATH which is appended by their .bashrc.\n@zimbatm, Is there anything we can do to support that case direnv-side?\n. No wait, that use case I just mentioned would still work, since $SOMETHING would be in your base environment.\nNot running the profile and rc scripts does seem like the correct solution to me.\n. Phew, that's a mighty big pull request ;-)\nMaybe you might want to merge master in or rebase against it so that GH is able to merge?\n. Looks good to me.\n. Odd, any clue why the build failed?\n. Looks good.\n. Can you share the output of \"env | grep -i zsh\" ?\nMaybe rather than direnv hook $0 it should be direnv hook $SHELL?\n. Bash manpage:\nSHELL  The  full  pathname  to the shell is kept in this environment variable.  If it is not set when\n          the shell starts, bash assigns to it the full pathname of the current user's login shell.\nI guess it is set ordinarily by the operating system according to what's in /etc/passwd.\n. (I've verified this by changing my shell to zsh) on linux. I don't know about other OSes.\n. Untested on any platform other than linux. But I did switch the build flags of _posix.go and _nonposix.go to make sure everything worked.\n. Oh. And currently it relies on bash. So.. yeah, it's not really true-portable. Suggestions on how to make it so appreciated.\n. For workaround, I think the only option is to have a separate binary named direnv-invoke. Or a symlink direnv-invoke -> direnv, and magic in the commands logic to do the right thing.\nI like the idea of deriving the WORKDIR automagically from the binary though.\nI'm strapped for time now but will investigate when I can.\n. I thought about this some more, and I'm happy with the PR as-is for now. The problem is apparent if you consider this argument prototype:\ndirenv invoke [WORKDIR] COMMAND [ARGS]\nThe work needed to determine if WORKDIR was specified is non-trivial. I think it would be good if this PR was merged and these enhancements can be made in a backwards compatible manner later.\n. @zimbatm good idea. Fixed.\n. If you see a better way, maybe you could send a PR to pwaller/direnv-invoke? I don't quite see it at this moment and don't have much time for thinking about this. Otherwise, I wonder if this is actually a case of YAGNI - I don't remember what I needed this for and don't have lots of uses for it. Otherwise I would have pushed it further/faster.\n. I think you mean #97.\n. @zimbatm it looks like in fish $PATH is a \"special variable which is an array, and hence array manipulation should be used to modify it, afaict.\n. Maybe if a DIRENV_SILENT environment variable was introduced? The problem is, you (or someone) might set it and then forget that direnv exists. And then have a nightmare debugging why things behave strangely. \"Why on earth does my software run differently in this directory!?\"\n. Not reviewed terribly closely but LGTM.\n. My suggestion is to have an environment variable which is a list of additional patterns to look for, rather than to introduce additional heuristics. (i.e, put the user in control). I don't want to introduce .envrcs to projects which already have other scripts. I just want to use the other scripts, for reasons you covered.\n. Closing because this isn't important. Reopen or +1 if you need such a feature.\n. Yes, that is the purpose of source_up which is available in scope when the .envrc is executed.\n. Hmm, re-opening because on second thoughts, is this documented?\n. I'm going to close this one since there hasn't been much interest and I haven't missed it much myself. But if there is demand, please open up another issue. Even better if you can suggest ways to implement it.\n. LGTM :+1: \n. Technically, how can we track sourcing?\n. Looks nice. :+1: \n. LGTM.\nRe: having versions of software available \"on demand\", I think docker is a pretty good way to achieve this. Of course that doesn't help you get to the point where you just have to cd into a directory to have a particular set of software but in other ways it is more powerful.\n. @pdf the problem is that since we use bash to run the .envrc files we have no way of knowing what has been explicitly modified. The best we can do is to invoke a \"fresh bash\" and then contaminate it with the .envrc, then to look at the difference between environments.\n. @pdf, I didn't mean to imply it was the best one could theoretically achieve, however, given the constraints on the project and the fact we currently use bash in the way it is used I would say it is (probably) unreasonable to implement, hook or otherwise hack a shell interpreter to tell us whenever an environment variable is set.\nThat's a good thought about DIRENV_BACKUP. However, if you started a subshell in $PWD with some environment already exported and then move to $PWD/.., what should happen?\n. I'm leaning towards \"agree\".\n. Thanks!\n. Sorry, think I made this against an ancient version accidentally.\n. (and you'd long since fixed this, it looks like).\nI got an old version because you haven't updated the go1 tag, though, so please do that!\n. Looks like it might be desirable to shell out to $EDITOR rather than exec'ing it directly.\n. Duplicate of #73\n. I'm looking at it, will send a pull request?\n. I'll add a test for those two cases to env_diff_test.go\n. I'm currently adding a simple unit test of the form: (modulo making it work).\n``` go\n// Issue #114\n// Check that empty environment variables correctly appear in the diff\nfunc TestEnvDiffEmptyValue(t *testing.T) {\n    before := Env{}\n    after := Env{\"FOO\": \"\"}\ndiff := BuildEnvDiff(before, after)\n\nif !reflect.DeepEqual(diff.Next, after) {\n    t.Fail(\"diff.Next != after\")\n}\n\n}\n```\nHow would an integration test look?\n. Pushed a couple to prove the tests fail without the implementation.\n. To chime in, I'm okay with the existing approach, even though it's tracking a generated thing in source control. I don't see the downside in this case.\n. I believe the problem is that you don't export FOO from your envrc, so it never makes it into the external environment. Try changing it to export FOO=bar. If this doesn't fix the problem, shout, and the issue will be reopened.\n. Hm. I'm not sure user input is a great idea or not.\nThe reason it doesn't work is that the script doesn't get run in the current bash process - instead, it gets run in a separate shell. Then, we export from that subprocess the effects of changing the environment with the .envrc. The reason your use case doesn't work is because the stdin of the bash process is not hooked up. I guess because it's a bit of a strange thing to want to do.\nIf you would like to try it out and see how it goes for you, you could add a line to the code there which reads cmd.Stdin = os.Stdin, which should make it work. You can then report back how well it works for you and whether it solves your problem.\n. How did it go, does it do what you need? I'd say it would be good for this to be tested a bit to make sure it doesn't break anything too badly.\n. (I edited your pull request body for you to mention the relevant issue)\n. @toao I don't know how the owner @zimbatm feels, but I was referring more to testing it by using it rather than automated testing.\n. Yeah, profile loading is a bit of a mess and I've seen little in the way of clear guidance for newbies on the matter.\nMy preference is to put things like direnv or path modifications in my .profile (which bash will read) and then enable run command as login shell in my terminals.\n\n.bashrc is run whenever bash starts interactively, including if you happen to invoke bash from bash (which you might do via tmux or screen), it will re-do the environment modifications even though they are already present. Whilst not necessarily harmful to re-do environment modifications, I've seen this lead to some confusion (and for example cause it to destroy .bash_history unders some configuraitons).\n. In fact, I have one thing in my .bashrc, and it's shopt -s histappend, which prevents the history from being destroyed. In my .profile I also have export HISTFILE=~/.my_bash_history which means if a bash instance starts up which doesn't have histappend set, it won't have HISTFILE set either and so it can't possibly destroy ~/.my_bash_history.\n. I don't understand, why doesn't this bug manifest for me?\n. I wonder if there is a behavioural difference in bash 3.2.53 and 4.3.11 with respect to prompt command and exit status.\n. I agree. I'm sure a contribution would be welcomed on this one.\n. Thanks!\n. @mcandre can you share what platform are you running on?\nCan you also try pkill -INT direnv and if that doesn't work pkill -INT -f direnv and if that doesn't work substitute -INT with -QUIT and repeat.\n. Are there any analogues to RVM? Any chance you could link to it or expand the acronym?\n. bringhs\n. Can you make this explicit? As in, have the error message here? That way people googling for it will find it.\n. Super-nit? $PATH?\n. Example could be clearer?\n. Specifically: I don't understand what is meant by 1> ~/my/project \n. I figured that's what you meant, but it looks like you're sending stdout to ~/my/project. Better just to say \"Output: blah\" instead I think. The distinction between stdout and stderr isn't important in this case.\n. ",
    "nyarly": "If you're using Bundler, this is a non-issue. See https://gist.github.com/nyarly/4774570 - which is one of the use cases I was looking to replace with direnv.\nThe upshot is that Bundler installs all gems to one directory, and isolates which ones are loaded.\n. A stdlib command like \"watch\" would be handy for un-sourced config files (e.g. .ruby-version)\n. I've been messing around with this approach and noticing that direnv seems to track modifications not only of .envrc and .direnvrc, but also files sources from there (I decided to source chruby.sh so that it'd still be possible to change ruby versions on the fly...) which is awesome but surprising (not in docs?)\nIs there a way to hook a file into that watch process? It'd be great to be able to say something like \"direnv watch .ruby-version\" and have it run when ./.ruby-version changed.\n. You're saying no part of that is implemented? Maybe I was mistaking why direnv was updating the environment then...\n. Oh! Re-reading cmd_export I just caught that LoadRC is merely defined before mtimes are compared. So 1 is already in play. Nevermind.\n. Maybe the solution is a tmux config? There's several commands that tmux uses around setting and copying environment variables - so maybe something like set-environment -g DIRENV_DIFF in a tmux.conf?\nThe other might be something like direnv unload to go in the top of a .profile?\n. To elaborate: my understanding is this:\n0 When tmux is run for the first time, it starts the server, which populates the global environment for that caller (which might be a direnv-setup shell). \n0 When it creates a new session, the session gets its environment as a copy of the global environment.\n0 When a new session is created, it's usually to create a new window with a shell in it, which then loads e.g. .bashrc &| .profile which manipulates the environment, usually with the assumption that the enviroment is \"clean\" (whatever that means.)\nSo there's several assumptions made that aren't met: tmux thinks it's cloning a \"basic\" environment, bash thinks it's setting up a basic environment, and direnv thinks it's DIRENV_* variables were set in the current interactive session.\nMore and more, direnv unload seem like a handy thing - could even go into the direnv hook call, maybe?\n. There's a little issue there in the case that tmux is used to run something other than a shell.\n. Generally speaking, shouldn't direnv be able to reset itself when a new interactive shell is entered? Like, just running bash at the command line? tmux isn't the only command that launches a shell like this.\n. I've added this to my tmux.conf:\nset-environment -r DIRENV_DIFF\nset-option -g update-environment \"... DIRENV_DIFF\"\nI think it's working - when tmux starts a server, it ensures that the global enviroment set doesn'nt have DIRENV_DIFF in it.  When it creates a new session it clobbers the DIRENV_DIFF from the global source.\nThen, when direnv runs on the first prompt in the new shell, the absent DIRENV_DIFF forces a run.\nLet me work with it for a couple of weeks, and be sure that it's gone before we close this though.\n. $ cat .envrc \nPATH_add foo\nexport PATH=bar:$PATH\n$ echo $PATH\nbar:/tmp/test-direnv/foo:~/bin:/usr/local/bin:/usr/bin:/bin:<snip>\n$ tmux\n$ echo $PATH\nbar:/tmp/test-direnv/foo:~/bin:/usr/local/bin:/usr/bin:/bin:<snip>\nSo, seems legit.\n. We'll see how it looks after a reboot, since there's some slightly mysterious state related to that\n. Looks like I was right: the first session on a new tmux server needs a direnv reload, but not any subsequent. I've gotten used to watching for the direnv \"new directory\" ceremony when I open a tmux and reloading if it's not there. So: better but not complete.\n. Yeah, tmux is a ton better than screen, but the more I dig into it, the more I see that it has its own design and specification issues. The original server source environment is, at least, poorly documented.\n. I guess I could .envrc a chruby in my homedir, huh?\n. ```\nuse_ruby(){\n  local version=$1\n  if [ -z $version ]; then\n    version=\".ruby-version\"\n  fi\n  if [ -f $version ]; then\n    version=$(cat $version)\n  fi\nchruby $version\n  layout ruby\n}\n```\nThe important part is the chruby - which looks for a matching installed ruby and sets up symlinks for it. I'm specifically not using the chruby/auto.sh script, so my running ruby version doesn't depend on an env var.\nQuite reasonably, the answer could be \"that's not what direnv is for\"...\n. load_prefix is an interesting idea.\nI think I figured out what happened: I used chruby at the commandline to test something in a different ruby and then left the directory. So direnv didn't change back to the original value of e.g. PATH because PATH had been changed while I was in the dir.\n. I just stumbled into another potential use case for this: I have a directory for presentation slides. In there I've got a script called \"presenting.sh\" that e.g. xset s noblank (and a bunch of other \"don't blank the screen during a presentation\" stuff.) \nIt'd be nice to have that happen automatically and go away when I was done. Related elsewhere is the problem that closing the terminal would mean that those settings wouldn't be reverted, though.. Just chipping in: if it's a service manager, part of its job would be to\nmanage processes. Watching the shell that triggered it would stand firmly\nin its baliwick.\nOn Sun, Feb 18, 2018, 09:57 zimbatm notifications@github.com wrote:\n\nMost use-cases here would be solved with a process manager. direnv doesn't\nmaintain a running process so it would have to be a new project (dirsvc?).\nI think the realization is that we have system-level services, per-user\nservices and now we want per-project services. In systemd, per-user\nservices are started when the first user sessions opens and stopped when\nthe last session closes. Similarly we want the per-project services to\nstart when the first shell opens the project, and stop when the last shell\nleaves it.\nSimilarly to direnv it would have a shell hook. It would report directory\nenter and leaves to the daemon, which would then in turn start and stop the\nservices if a specific file is found (.svcrc?).\n$ dirsvc status\n/home/user/src/project1 (shells: 3, services: 4)\n/home/user/src/project2 (shells: 1, services: 1)\n$ dirsvc stop /home/user/src/project2 # forcefully close a session if the shell has disappeared\n$ cd /home/user/src/project1 # shell hook adds this shell to the session\n$ dirctl status # show the running processes for this folder\n mysql: running\n redis: running\n$ dirctl logs mysql\n...\n$ dirctl restart mysql\n...\nPotentially the hook could also be implemented in tmux which would give a\nbetter reporting facility.\nThe service definition format is unspecified here. It might make sense to\nadopt something existing like the systemd units.\nA last note: the escalation between per-system, per-user and per-project\nis also a concern for build and runtime dependencies. This is already\nsolved by Nix.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/129#issuecomment-366534058, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAHyPJP-bN1zsSQy9DmVkcyuERowIt-oks5tWGR4gaJpZM4CGMyQ\n.\n. For other applications (in fish (and I believe zsh has similar functionality)) I set up a watch for an environment variable. When the variable changes value (because direnv sets it), a shell function gets run. You might have your .envrc check to see if encfs has been set up, and if not set something like NEEDS_ENCFS, and let the shell take care of the rest of the process.\n\n(personally, I use this trick to open Tmux sessions on a per project basis)\n. Updated - ran shellcheck and ensured that all the checks are cleared, including setting some source= directives; has the advantage of hinting at shellcheck for other devs.\n. I think that's it. I like the idea of a unified STATE but... One think at a\ntime, eh?\nOn Mon, Mar 21, 2016, 03:03 zimbatm notifications@github.com wrote:\n\nLooking good. Anything more ?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/direnv/direnv/pull/206#issuecomment-199207817\n. Oh, rad! I notice it doesn't watch default.nix or shell.nix though - PR in a few.\n\ndeclare -x should work just like export from what the bash manual says, but direct experience is different. Maybe it's a bug in my bash? Using direnv dump is the obvious thing - I don't know why it didn't occur to me.\n. I think closing it is probably fine. Maybe it bothers someone else and they\nfind this and follow up - maybe not. In the meantime, for direnv purposes,\ndirenv dump is definitely the way to go.\nOn Tue, Jun 14, 2016 at 1:07 AM zimbatm notifications@github.com wrote:\n\nThanks,\nYeah I tried declare -x manually and it seems to work like export. I am\ntempted to close this unless you want to spend more time investigating?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/222#issuecomment-225808909, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AAHyPKYBPvbK4Tl95p47D8KsRw_uvkjWks5qLmFegaJpZM4Iz_fW\n.\n. One option would be direnv deny, but you'd still need to pushd ..; popd I think that'd work, though.. Actually, it doesn't - deny appears to leave the environment untouched.. \n",
    "jcamenisch": "Do you have thoughts on what to use for building the test suite? At first glance, it seems like a shell script might be adequate for the job. A scripting language like Ruby might have some nice advantages (especially with accompanying testing tools), but could alienate some potential contributors.\nSeeing all the scenario directories, my first thought was just to write a script that cd's into each of those, and check for expected output. In fact, each directory could have an \"assert.sh\" script that the test script would call after cd. As long as 0 gets returned, the test passes.\nBut then we would need a way to test different environments too\u2014bash vs. zsh, different shell options that can break things, etc. Perhaps these could be set up in an 'environments' directory. The entire suite of scenarios could be run for every different environment.\nHmm. That might get a little tangly. I'm not sure. It's sounds simple in theory. :) Your environment script would have to run the suite with it's shell of choice, after having a chance to tweak the shell session. And then there's the problem of reporting errors that happen\u2014with a line number, and ideally some description of what failed.\n. Go, eh? Sounds nice, although I'd just have to install it to use that branch. :)\n. :+1: \n. Sorry I don't know how to submit an automated test for this issue. The manual test looks like this:\n``` sh\n\nsetopt globsubst\neval direnv hook $0\nzsh: no matches found: direnv_hook()\n```\n. Ah, much nicer solution!\n\nWould it be worth changing the instructions to that?\n. ",
    "aumuell": "Yes, that works fine. Thank you for the quick response!\n. ",
    "bemurphy": "@zimbatm Thanks for your reply on this.  I have to run but when I get time time afternoon I'll reply with additional thoughts.\nHappy new year to you as well!\n. ",
    "bmc": "On 01/19/2012 03:32 PM, Jonas Pfenniger wrote:\n\nIt's in :)\n\n+1. Thanks. Meant to send you a pull request, but I've been swamped with \nclient work. Glad you could get to it. ;-)\n-Brian\nBrian Clapper, http://www.clapper.org/bmc/\nYou don't want another Enron? Here's the law: If you have a company, and it\ncan't explain, in one sentence... what it does... it's illegal!\n         -- Lewis Black\n. Found another error. Will issue another pull req. in a minute.\n. I have been having this exact same problem, for about a week now.\n- I am using the master branch of direnv (a cloned repo, installed via make install).\n- I am using the most up-to-date version of rvm.\n- I have tested this scenario on two machines, both with zsh:\n  - zsh 4.3.17 (x86_64-unknown-linux-gnu) on Ubuntu 12.04\n  - zsh 4.3.12 (i386-apple-darwin11.2.0) on Mac OS X Mountain Lion\n  - zsh 5.0.2 (x86_64-apple-darwin12.2.0) on Mac OS X Mountain Lion\nHere's an example.\nI start out, outside a directory with a .envrc file, with the following:\n```\n$ rvm current\nruby-1.9.3-p194@ardentex\n$ echo $RAILS_ENV\nempty\n```\nI then cd into a directory with a .envrc file, the contents of which are as follows:\nrvm 1.9.3@portal\nexport RAILS_ENV=development\nHere's what happens:\n```\n$ cd portal\ndirenv: loading ~/.direnvrc\ndirenv: loading ~/src/portal/.envrc\n$ echo $RAILS_ENV   # still empty; not changed at all\ndirenv: reloading ~/src/portal\ndirenv: loading ~/.direnvrc\ndirenv: loading ~/src/portal/.envrc\n$ rvm current\nruby-1.9.3-p194@ardentex  # NOTE: No change, despite the .envrc\ndirenv: reloading ~/src/portal\ndirenv: loading ~/.direnvrc\ndirenv: loading ~/src/portal/.envrc\n```\nAs noted above, every single command causes a reload.\nHere's stat output:\n$ stat --dereference -c '%Y' .envrc; ls -l .envrc; stat --dereference -c '%Y' .envrc\n1357662957\n-rw-r--r-- 1 bmc bmc 52 Jan  8 11:35 .envrc\n1357662957\ndirenv: reloading ~/src/portal\ndirenv: loading ~/.direnvrc\ndirenv: loading ~/src/portal/.envrc\nMy ~/.direnvrc file currently contains nothing but a comment, so it is, effectively, empty.\nNote what happens when I cd back out of the directory containing the .envrc:\n$ cd ..\n/home/bmc/local/direnv/libexec/direnv-export: line 63: DIRENV_DIR: unbound variable\ndirenv: unloading\n. More info: I have no problems when changing my directory into the direnv source directory. I have problems in other directories, though. There are no permission differences between the .envrc file that works and the ones that don't.\nI've instrumented direnv-export a bit, and one thing stands out: Where it works, DIRENV_DIR is set. Where it fails, DIRENV_DIR is not (and does not get) set. Same with DIRENV_MTIME, which seems to be the source of the problem.\n. Problem is definitely rvm. If I comment rvm out of my .envrc, everything works fine. Something must have changed in rvm...\nWORKAROUND: Use a local .rvmrc file to control the RVM stuff, and use .envrc for the rest.\n. Actually, I didn't mean for that one to be in the pull request. I'm going to resubmit, with just the first commit.\n. True. But this was faster. ;-)\n. ",
    "travisbot": "This pull request passes (merged ce70bb98 into d73b489a).\n. This pull request fails (merged 7d246b10 into 59707015).\n. This pull request passes (merged 91ff49b8 into 59707015).\n. This pull request passes (merged 5c17d1f9 into cf99aac7).\n. This pull request passes (merged 8b72ebde into cf99aac7).\n. This pull request passes (merged 9f003ac6 into cf99aac7).\n. This pull request passes (merged 23ce1130 into cf99aac7).\n. ",
    "splaspood": "Ok, this seems to be rvm related.   Once I removed the rvm call from my envrc the 'problem' went away.   I noticed that although rvm was reporting it switched to my gemset each time, it wasn't actually doing so (almost like it switched, then switched right back).   Any thoughts on what the issue might be?  \n. Another point, this is with zsh as the shell.   Going to swap bash back in and confirm the issue remains.\n. I can confirm I still appear to have this issue when using bash vs zsh.\n. ",
    "millisami": "Nop, i didnt put that!\n. Here it is:\nBefore: https://gist.github.com/3892142\nAfter: https://gist.github.com/3892145\n\nAlong with it, I've also filed another ticket on picking up the envrc at https://github.com/zimbatm/direnv/issues/36\nDoes this too related to the same problem?\n. ```\n.envrc\nPATH_add bin\n```\nand this is the .zshrc\n```\nPath to your oh-my-zsh configuration.\nexport PATH=/usr/local/bin:$PATH\nexport ZSH=$HOME/.oh-my-zsh\nexport LANG=en_US.UTF-8\nunsetopt correct_all\nSet to the name theme to load.\nLook in ~/.oh-my-zsh/themes/\nexport ZSH_THEME=\"millisami\"\nexport NODE_PATH=\"/usr/local/lib/node\"\nSet to this to use case-sensitive completion\nexport CASE_SENSITIVE=\"true\"\nComment this out to disable weekly auto-update checks\nexport DISABLE_AUTO_UPDATE=\"true\"\nUncomment following line if you want to disable colors in ls\nexport DISABLE_LS_COLORS=\"true\"\nWhich plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)\nExample format: plugins=(rails git textmate ruby lighthouse)\nplugins=(git git-flow gem brew rails osx github)\nplugins=(bundle git ruby cap brew gem github osx mysql knife rake)\nsource $ZSH/oh-my-zsh.sh\nCustomize to your needs...\nOverriding the binding key to Up and Down arrow to search for history\nbindkey \"^[[A\" history-beginning-search-backward\nbindkey \"^[[B\" history-beginning-search-forward\ndirenv activation\neval direnv hook $0\n```\n. The iterm pref is the same which has the \"Login shell\" https://skitch.com/millisami/e3bnp/preferences\nAnd this is the output of the cmd:\necho $precmd_functions\nomz_termsupport_precmd direnv_hook\n. Here it is:\n``\n$ brew info direnv\ndirenv: stable 0.1.127, HEAD\nhttp://www.direnv.net\n/usr/local/Cellar/direnv/0.1.127 (16 files, 72K) *\nhttps://github.com/mxcl/homebrew/commits/master/Library/Formula/direnv.rb\n==> Caveats\nAt the END of your ~/.bashrc or ~/.zshrc, add the following line:\n  evaldirenv hook $0`\nSee the wiki for docs and examples:\n  https://github.com/zimbatm/direnv/wiki/\n```\n. Alright, here is the details:\nOSX: 10.6.8\nZSH Version\n\u00b1 zsh --version\nzsh 5.0.0 (x86_64-apple-darwin10.8.0)\nmillisami at millisami in ~/Code/deploy \u2739 \u272d\nI forgot whether I installed via zsh or the one that ships with Mac OSX.\nHow do I know whether zsh was installed via homebrew or the one that ships with Mac OSX ?\nBrew info\n```\n\u00b1 brew info zsh \nzsh: stable 5.0.0\nhttp://www.zsh.org/\nDepends on: gdbm, pcre\n/usr/local/Cellar/zsh/4.3.10 (869 files, 7.7M)\n/usr/local/Cellar/zsh/5.0.0 (955 files, 8.5M) *\nhttps://github.com/mxcl/homebrew/commits/master/Library/Formula/zsh.rb\n==> Options\n--disable-etcdir\n  Disable the reading of Zsh rc files in /etc\n==> Caveats\nTo use this build of Zsh as your login shell, add it to /etc/shells.\nIf you have administrator privileges, you must fix an Apple miss\nconfiguration in Mac OS X 10.7 Lion by renaming /etc/zshenv to\n/etc/zprofile, or Zsh will have the wrong PATH when executed\nnon-interactively by scripts.\nAlternatively, install Zsh with /etc disabled:\nbrew install --disable-etcdir zsh\nmillisami at millisami in ~/Code/deploy \u2739 \u272d\n```\nLocation of zsh cmd\n\u00b1 which zsh\n/usr/local/bin/zsh\nBefore cd-ing into aliased env\nhttps://gist.github.com/3951506\nAfter cd-ing into aliased env\nhttps://gist.github.com/3951508\n. Well, I uninstalled zsh and installed it with brew install --disable-etcdir zsh\nBut still the issue remains the same.\nDidn't get what that hash -r means. But when I tried that cmd, it runs without any output or error. Does it have to show extra info on the terminal?\n. Thanks for explanation on hash -r.\nYeah, the auto-complete works, and its already executable.\nNot only opening new tab or cd-ing with alias, even some time the manual cd-ing even doesn't work.\nFor e.g.\nThe dir ~/Code/deploy has the .envrc file with just the content ADD_path bin.\nIf I go to that directory, cd ~/Code and cd deploy, and when I echo $PATH, the path doesn't pick up the projects bin dir. So, what I've to do to pickup that bin path, I've to go back cd .. and cd deploy again.\nAnd this time the bin dir is picked up.\nWhy such inconsistencies??\n. Sure @zimbatm , I've emailed you.\n. @zimbatm Couldn't schedule up the skpe talk.\nBut I've found one leak that I think related to this.\nWhen I source the zsh file, it shows the following msg:\n\u00b1 source ~/.zshrc                                            \nUnknown target shell '/Users/millisami/.zshrc'\nWhen I googled, it points to this file: https://github.com/zimbatm/direnv/blob/master/libexec/direnv-hook#L43\nHas this something to do with this error?\n. Did that but just the msg is changed:\n``\n\u25cb brew uninstall direnv; brew install direnv --HEAD\nUninstalling /usr/local/Cellar/direnv/HEAD...\n==> Cloning https://github.com/zimbatm/direnv.git\nUpdating /Library/Caches/Homebrew/direnv--git\n==> make install DESTDIR=/usr/local/Cellar/direnv/HEAD\n==> Caveats\nAt the END of your ~/.bashrc or ~/.zshrc, add the following line:\n  evaldirenv hook $0`\nSee the wiki for docs and examples:\n  https://github.com/zimbatm/direnv/wiki/\n==> Summary\n/usr/local/Cellar/direnv/HEAD: 16 files, 72K, built in 3 seconds\nmillisami at millisami in ~\n\u25cb source ~/.zshrc\nUnknown target shell '.zshrc'\nmillisami at millisami in ~\n```\n. ",
    "christhekeele": "I'm using pretty much the same versions of everything here, and ran into these same issues in order.\n. Sorry not to resolve my comment\u2014I was able to get it working from the comments in issue #64.\n. Likewise! Thanks!\n. ",
    "cdlm": "Yup, that makes it behave as expected.\n. Thanks!\nOn 11 March 2013 21:37, Jonas Pfenniger notifications@github.com wrote:\n\nWell until then you can add the export DIRENV_RUBY=/usr/bin/rubydirective to your .profile or .bash_profile\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/42#issuecomment-14741085\n.\n\n\nDamien Pollet\ntype less, do more [ | ] http://people.untyped.org/damien.pollet\n. ",
    "gregf": "Having the same issue with zsh. Unknown target shell '-zsh'\n. Works great here, thanks.\n. ",
    "nandub": "If I add the eval \"$(direnv hook $0)\" to the bottom of the .zshrc it works as expected, but if I put it somewhere else, like in my case, it give me the error here.  On the other hand bash works fine no matter where I put the eval call.\nFor now I'm using eval \"$(direnv hook $SHELL)\" so I can use it on bash and zsh.\n. ",
    "Tb0": "Setting eval \"$(direnv hook $SHELL)\" at the end of the .zshrc file works fine for me and resolves the Unknown target shell error. Thanks @pwaller ! \n. ",
    "rogeriopradoj": "\nhttps://github.com/zimbatm/direnv/issues/64#issuecomment-23644347\neval \"$(direnv hook $SHELL)\"\n\nIt worked for me as well with oh-my-zsh in iTerm2.app\n. ",
    "andreychernih": "Just wanted to mention that I really look forward this feature to be merged in master. I am deploying Ruby on Rails application with capistrano and currently there's no easy way to get .envrc automatically loaded when executing shell commands. Default hook does not works in scripts:\n``` bash\n~/tmp  % cd test && echo $TEST                                                                                                                                                         (ruby-2.0.0-p247)\ndirenv: loading .envrc\ndirenv export: +TEST\ntmp/test  % echo $TEST                                                                                                                                                                 (ruby-2.0.0-p247)\ntest\n``\n. Many thanks, @zimbatm, it works like magic for me. For the records: my use case is to be able to executerake/rails` commands in one-liners with capistrano. I am doing this and it works (loads environment variables properly):\nbash\ncd /my-rails-app && direnv exec . rake routes\n. ",
    "bencolon": "I also really look forward to use this feature to run my tests directly in ST3 with RubyTests plugin in an environment using Direnv. Keep up the good work guys !\n. Works like a charm with Ruby Test plugin for Sublime Text.\nI put here the plugin settings if someone Googleize \"Ruby test plugin with direnv\" ;)\n``` json\n{\n  \"check_for_rvm\": true,\n  \"check_for_bundler\": true,\n\"run_ruby_unit_command\": \"direnv exec . ruby -Itest {relative_path}\",\n  \"run_single_ruby_unit_command\": \"direnv exec . ruby -Itest {relative_path} -n '{test_name}'\"\n}\n```\nThanks a lot !\n. ",
    "alanbbr": "It works for me. The direnv changes themselves were easy, and I'm confident they wont break anything else, and may also be close to what the csh family needs. Figuring out how to make the fish side work was a pain, and there may be a better way to do it, but I'm new to fish.\nOn Jul 15, 2013, at 3:52 PM, Jonas Pfenniger notifications@github.com wrote:\n\nPretty cool, I wanted to have fish support and here you made it.\nAny comments on the stability, do you think it's production ready ?\nOn Jul 15, 2013 8:42 PM, \"Alan Brenner\" notifications@github.com wrote:\n\ncd.fish goes in ~/.config/fish/functions\nYou can merge this Pull Request by running\ngit pull https://github.com/alanbbr/direnv master\nOr view, comment on, or merge it at:\nhttps://github.com/zimbatm/direnv/pull/67\nCommit Summary\n- initial support for fish\nFile Changes\n- A fish/cd.fishhttps://github.com/zimbatm/direnv/pull/67/files#diff-0(52)\n- M shell.go https://github.com/zimbatm/direnv/pull/67/files#diff-1(2)\n- A shell_fish.gohttps://github.com/zimbatm/direnv/pull/67/files#diff-2(98)\nPatch Links:\n- https://github.com/zimbatm/direnv/pull/67.patch\n- https://github.com/zimbatm/direnv/pull/67.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. Not that I could find. The cd.fish is the file that comes with fish, with the needed additions to make cd, pushd and popd work. By placing that in ~/.config/fish/functions, fish will use that instead of the share/fish/functions original that ships with fish.\n\n\nOn Jul 15, 2013, at 4:11 PM, Jonas Pfenniger notifications@github.com wrote:\n\nOk thank, I'll try and have a closer look in the end of the week. \nIn the other shells I try and avoid overriding cd to avoid issues like \npushed/popd not working the same. Do you know if there is a precmd hook in \nfish ? \nOn Jul 15, 2013 8:56 PM, \"Alan Brenner\" notifications@github.com wrote: \n\nIt works for me. The direnv changes themselves were easy, and I'm \nconfident they wont break anything else, and may also be close to what the \ncsh family needs. Figuring out how to make the fish side work was a pain, \nand there may be a better way to do it, but I'm new to fish. \nOn Jul 15, 2013, at 3:52 PM, Jonas Pfenniger notifications@github.com \nwrote: \n\nPretty cool, I wanted to have fish support and here you made it. \nAny comments on the stability, do you think it's production ready ? \nOn Jul 15, 2013 8:42 PM, \"Alan Brenner\" notifications@github.com \nwrote: \n\ncd.fish goes in ~/.config/fish/functions\nYou can merge this Pull Request by running \ngit pull https://github.com/alanbbr/direnv master \nOr view, comment on, or merge it at: \nhttps://github.com/zimbatm/direnv/pull/67 \nCommit Summary \n- initial support for fish \nFile Changes \n- A fish/cd.fish< \n  https://github.com/zimbatm/direnv/pull/67/files#diff-0>(52) \n- M shell.go https://github.com/zimbatm/direnv/pull/67/files#diff-1(2) \n- A shell_fish.go< \n  https://github.com/zimbatm/direnv/pull/67/files#diff-2>(98) \nPatch Links: \n- https://github.com/zimbatm/direnv/pull/67.patch \n- https://github.com/zimbatm/direnv/pull/67.diff \n\u2014 \nReply to this email directly or view it on GitHub. \n\n\n\u2014 \nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/pull/67#issuecomment-20999020 \n. \n\u2014\nReply to this email directly or view it on GitHub.\n. I will try to take a look at this today, but it may be tomorrow before I have time.\n\n\nThanks, Alan\nOn Jul 18, 2013, at 6:24 PM, Jonas Pfenniger notifications@github.com wrote:\n\nOk I think I fixed the hook command. You can add eval (direnv hook fish) in your ~/.config/fish/config.fish file and it should work (if you use the fish-support branch).\nI'm seeing that kind of things in the shell, I think $PATH might be a special variable that behaves differently than the others:\nset: Warning: path component /Users/zimbatm/.local/bin:/Users/zimbatm/.shared/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin may not be valid in PATH.\nset: No such file or directory\nset: Did you mean 'set PATH $PATH /Users/zimbatm/.shared/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin'?\n\u2014\nReply to this email directly or view it on GitHub.\n. Works for me, and more elegant solution.\n\nThanks\nOn Jul 18, 2013, at 6:24 PM, Jonas Pfenniger notifications@github.com wrote:\n\nOk I think I fixed the hook command. You can add eval (direnv hook fish) in your ~/.config/fish/config.fish file and it should work (if you use the fish-support branch).\nI'm seeing that kind of things in the shell, I think $PATH might be a special variable that behaves differently than the others:\nset: Warning: path component /Users/zimbatm/.local/bin:/Users/zimbatm/.shared/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin may not be valid in PATH.\nset: No such file or directory\nset: Did you mean 'set PATH $PATH /Users/zimbatm/.shared/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin'?\n\u2014\nReply to this email directly or view it on GitHub.\n. Great. Thanks again.\n\nOn Jul 15, 2013, at 3:52 PM, Jonas Pfenniger notifications@github.com wrote:\n\nPretty cool, I wanted to have fish support and here you made it.\nAny comments on the stability, do you think it's production ready ?\nOn Jul 15, 2013 8:42 PM, \"Alan Brenner\" notifications@github.com wrote:\n\ncd.fish goes in ~/.config/fish/functions\nYou can merge this Pull Request by running\ngit pull https://github.com/alanbbr/direnv master\nOr view, comment on, or merge it at:\nhttps://github.com/zimbatm/direnv/pull/67\nCommit Summary\n- initial support for fish\nFile Changes\n- A fish/cd.fishhttps://github.com/zimbatm/direnv/pull/67/files#diff-0(52)\n- M shell.go https://github.com/zimbatm/direnv/pull/67/files#diff-1(2)\n- A shell_fish.gohttps://github.com/zimbatm/direnv/pull/67/files#diff-2(98)\nPatch Links:\n- https://github.com/zimbatm/direnv/pull/67.patch\n- https://github.com/zimbatm/direnv/pull/67.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. \n\n",
    "janko": "My proposition is just to remove the difference in environment variables. So, currently it looks like this:\n``` sh\n$ cd project\ndirenv: loading .envrc\ndirenv export: ~PATH, +AWS_AMAZON_KEY_ID, +AWS_AMAZON_KEY_SECRET\n$ cd ..\ndirenv: unloading\ndirenv export: ~PATH, -AWS_AMAZON_KEY_ID, -AWS_AMAZON_KEY_SECRET\n```\nBut a user actually only needs to be reminded that .envrc was loaded/unloaded when he cds in/out:\n``` sh\n$ cd project\ndirenv: loading .envrc\n$ cd ..\ndirenv: unloading\n```\n. Looks good to me :thumbsup: \n. ",
    "ashchan": "@janko-m +1\n. @zimbatm I tried setting an empty DIRENV_LOG_FORMAT but still saw the logout.\nAnd DIRENV_LOG_FORMAT still shows as 'direnv: %s':\nshell\n$ echo $DIRENV_LOG_FORMAT\ndirenv: %s\n. Reinstalled with homebrew --HEAD. Is that sufficient to get the master?\n. ",
    "JustinAiken": "What about an option to turn the logging off completely, but set an environment variables, something like $DIRENV_ENABLED - then custom prompts could look for it, and modify themselves accordingly... \nzsh\njaiken@firefly \u279c ~ cd some_dir\njaiken@firefly! \u279c ~ cd ..\njaiken@firefly \u279c ~\nvs\nzsh\njaiken@firefly \u279c ~ cd some_dir\ndirenv: loading .envrc\njaiken@firefly \u279c ~ cd ..\ndirenv: unloading\njaiken@firefly \u279c\n. ",
    "tonatiuh": "Any news on this?\n. ",
    "avinassh": "Can anyone tell me how do I hide messages/logs? The env variable $DIRENV_LOG_FORMAT is already empty in my case.\n. Where I should put this direnv.sh file? \nalso, I use zshell, so I think I can copy the contents of hook function in ~/.zshrc. Let me try that. \nEDIT: Okay that did not work.\n. That looks great! I will try that. Hope it works now. \nFor my earlier query, I appended following to my ~/.zshrc. \n``` shell\nfor direnv (check direnv.net)\nif which direnv &> /dev/null; then\n  eval \"$(direnv hook zsh)\"\n_direnv_hook() {\n    eval \"$(\n      (\n        (\n          direnv export \"$SHELL\" 3>&1 1>&2 2>&3 3>&- |\n            egrep -v -e '^direnv: (loading|export|unloading)'\n        ) 3>&1 1>&2 2>&3 3>&-\n      )\n    )\"\n  };\nfi\n```\nBut now when I cd into the directory, it throws everything on the screen:\nshell\n$cd work\nexport DIRENV_MTIME=1434946587;export TESTME=$'avinassh@avinassh.com';export DIRENV_DIFF=$'eJyqVipQsqqu1VHKA1JKLp5Brn5h8UBKyUpJVz-0OLWoWD-xLFPfPLlYSQcm7Rvi6esKVGBoYmxiaWJmamEOlHP3DIl3DA3x8A-Kd_V19PQBygM15iUWZzgANZeUpmTm6yXn50JVOvv7-nqGhLgSUFxbCwgAAP__jmEwfQ==';export DIRENV_DIR=$'-/Users/avi/work';\n. @jasoncodes still didn't work :/\n@zimbatm worked as expected.... \nThank you very much guys :smile: \n. ",
    "jasoncodes": "I ended up wrapping the hook function to silence the output I didn\u2019t care about.\n. Aside: Take a look at http://github.com/freshshell/fresh if you would like to avoid having to copy shell config snippets around.\n. I investigated this and it seems like late versions of Zsh enable multiple redirections by default which broke this script. I have pushed an updated version which should fix the problem.\n. @zimbatm Nice. Thanks!\n. ",
    "kevinjalbert": "Doing export DIRENV_LOG_FORMAT= solved this for me.\nI had to dig around to find this issue and the correct env var. Might be worth putting this on the README?\n. ",
    "macgeneral": "Just to add a small visual change for zsh / oh-my-zsh instead of the text output:\nat the end of ~/.zshrc\nexport DIRENV_LOG_FORMAT=\neval \"$(direnv hook zsh)\"\nthen I created a copy of my favorite theme (agnoster.zsh-theme) in my oh-my-zsh custom/themes folder. It already adds the current virtual environment name at the beginning of the terminal prompt.\nI added the following code to the end of the function prompt_virtualenv (line #: ~200):\n\nif [[ -n \"$DIRENV_DIFF\" ]]; then\n\u00a0\u00a0prompt_segment red white \"!\"\nfi\n\nwhich now adds a white ! on red background after the virtual env name :). ",
    "imomaliev": "Is there a way to do this in current versions? Something like AUTOENV_ENV_FILENAME in autoenv? I have existing project structures where I store env variables and other bash functions in .dotfiles/.bashrc file in project folder.. @zimbatm You mean this is going to be implemented in direnv or I could do that with existing customisation?. ",
    "whoisstan": "Its a key feature for me, I have a set of rails apps that share base settings like the database auth and S3 keys. In the specific rails folders I add more entries for such as passwords, database names and so on. \nbasefolder/.envrc               [db auth + s3 keys + redis store]\nbasefolder/api/.envrc          [log sync destination]\nbasefolder/admin/.envrc     [log sync destination, base username/password]\nbasefolder/cms/.envrc        [log sync destination, base username/password]\nExtremely useful! I deploy on heroku where the same env variables are used. None of that ever appears in the source repository.\n'source_env ..' works great. It deserves some more explanation, useful when you layer config files like I do.\n. ",
    "take": "Thanks this issue really helped!\n. I guess this issue could be closed since we have it in our docs :D @zimbatm @pwaller \n. :ok_woman: \n. > You run direnv allow ../.envrc but the message keeps coming back ? If that's the case I think I've found an issue in the actual code. I'll make a new release over the weekend with the fix.\nYes thats the case, thanks! :smiley: \n. thanks! :D \n. ",
    "winmillwill": "A few things:\nI like this answer which explains how to get the bash export -f behavior in zsh and why it may be a bad idea: http://unix.stackexchange.com/a/59431\nI think it may be cool to allow function templating in an includes directory for fish and zsh, but this begs the question of whether those functions are then really part of a shell package and should be distributed some other way. The annoying thing is that (to the best of my knowledge) there is no such thing as a package manager for shell packages, let alone a shell-agnostic shell package manager.\nI feel like any alias or function we would put in a .envrc file should really just be a function available to the whole system that takes configuration from variables that direnv (or anything else) could set. Is there a use case we can think of that falls outside of this?\nIf I'm correct, then the only directive we need to add to dotenv is the 'source' directive, which should be to our shell packages as bundler is to ruby packages, but without the update and install functionality because, again, we don't actually have a package manager or package repository.\n. All of that makes sense. It's just a style point for me that something like\nalias r='bundle exec rake' ought to belong to a ruby aliases package, and\nthen we could conditionally load that plugin based on the presence and\nvalue of something like BUNDLE_EXEC_RAKE_IS_R. In other words, set globals,\nand then indicate to direnv that you want to load the plugin, and if it has\na version for your shell, it can do so. This particular example is bit\ndumb, but something more usable/useful could certainly be thought up.\nI can't claim to understand the indirection you discussed about running all\nof this in a subshell, so I don't know if source and alias would work\nin bash with that strategy.\nOn Mon, Dec 2, 2013 at 6:45 AM, zimbatm notifications@github.com wrote:\n\nSome of these tickets are also placeholders for some ideas, like here I'm\nnot super convinced it's useful but I could be convinced otherwise. Ideas\nare best when simmered :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/issues/73#issuecomment-29585608\n.\n. \n",
    "jneen": "I would use this feature.  At the very least support for export -f.  I have projects, both personal and for work, that require particular startup scripts tailored to my environment, and it'd be really useful to just throw a function in .envrc.\n. ",
    "aeonaut": "+1! I could definitely use this. I've been using my own little cd hook for a while to load some functions and aliases when I change into a directory; direnv is a much more robust solution but not if I have to still keep my old hook around. As mentioned above, I use aliases like alias s=\"rails server\", alias c=\"rails console\", and at the moment alias ee=\"stty echo\" as a workaround for a bug in pry that routinely kills my terminal echo -- I don't really want any of those in my global namespace. Another use case: I have a local function called migrate (for database migrations) in my Rails project that shadows a completely different (and rarely used) executable that has nothing to do with Rails. (As mentioned above, this is perhaps a less pressing use case than the aliases because I could just drop that in a ./bin directory and PATH_add ./bin; still, it's handy to throw that function in my .envrc).\n. ",
    "airtoxin": "+1 for export -f\n. ",
    "wbolster": "It seems that the complexity is mostly related to function exports.\nExporting aliases seems easier, at least on bash and ksh, where the alias command prints out the currently defined aliases in such a way that they can be directly passed to the eval built-in, i.e. all the quoting is correct (though slightly non-functionally different between bash and ksh). It looks to me that diffing the outputs of alias before and after evaluating .envrc should be relatively straightforward.\n. perhaps direnv could also check the shell's pid:\n$ echo $BASHPID; (echo $BASHPID); echo $BASHPID\n6553\n6850\n6553\nas you can see, even subshells get a different pid.\n. this is more portable (bash and zsh) though:\n$ echo $$; (echo $$); echo $$\n6553\n6553\n6553\ni'm not sure whether subshells are relevant at all for direnv; those don't show prompts anyway so don't run the hook.\n. related, i use this in my .bashrc to temporarily freeze and thaw direnv. your unload use case would be direnv-freeze ~ with the code below:\nbash\n        # Copied from \"direnv hook bash\" output:\n        _direnv_hook_enabled=1\n        _direnv_hook() {\n            if [ $_direnv_hook_enabled == \"1\" ]; then\n                eval \"$(direnv export bash)\"\n            fi\n        };\n        direnv-freeze() {\n            if [[ $# -eq 1 ]]; then\n                echo \"direnv: setting up shell environment for directory $1\"\n                pushd \"$1\" > /dev/null || return 1\n                eval \"$(direnv export bash)\"\n                popd > /dev/null\n            fi\n            echo \"direnv: disabling shell hook; use direnv-thaw to enable again\"\n            _direnv_hook_enabled=0\n        }\n        direnv-thaw() {\n            echo \"direnv: enabling shell hook\"\n            _direnv_hook_enabled=1\n        }\n        complete -F _cd direnv-freeze. perhaps direnv should use LStat instead of Stat? (or both)\ngolang\n// Lstat returns a FileInfo describing the named file.\n// If the file is a symbolic link, the returned FileInfo\n// describes the symbolic link. Lstat makes no attempt to follow the link.\n// If there is an error, it will be of type *PathError.\nfunc Lstat(name string) (FileInfo, error) {\n    // ...\n}\nhttps://golang.org/src/os/stat.go. @zimbatm sorry, i didn't realise that it actually was in the same repo. i opened #330, as you suggested.. awesome, thanks! stat + lstat it is!. ",
    "Dr-Terrible": "\nI suppose a similar export_alias ee \"stty echo\" could also be crafted\n\n:+1: I could definitely use this feature.\nGenerally speaking, exporting aliases is a per project setting in the majority of cases; they would be rarely useful as global settings. This feature will allow me to declutter a lot of junk-aliases and hacks from my global namespace, hence greatly speeding up the bootstrap of all my virtual consoles (which could took quite a toll on terminal multiplexers with a very large number of connections). \n. Deal. I'll prepare a PR with the missing documentation and several other formatting improvements for man pages.\n. ",
    "anpol": "I've prototyped another version of direnv hook that runs a user-defined function direnv_postload when the environment is just loaded. The function is executed in the context of current interactive shell, so it could easily define local functions and aliases associated with the current .envrc.\nIn addition, a function direnv_preunload could be defined to revert any environment-specific changes when the environment is unloaded (#129, #195), or when the shell exits.\nOnly zsh version is prototyped by now, I guess it could be ported to bash.\nhttps://gist.github.com/anpol/7a2706c2766eff454e047b7513fa511b\n\nI imagine that $(direnv hook zsh) would output a runtime code similar to mine; then the code returned by $(direnv export zsh) would call all the necessary functions without any tricks, like so:\nzsh\n$ direnv export zsh\n_direnv_notify_preunload '/path-to/prev-dir' '/path-to/next-dir'\n_direnv_log_status 'loading /path-to/next-dir'\n_direnv_log_diff '+VAR1' '~VAR2'\nexport VAR1=value; export VAR2=value;\n_direnv_notify_postreload '/path-to/prev-dir' '/path-to/next-dir'\nThat would even allow for better customization of log messages (#68, #104, #219).. We should decide whether direnv_postload/preunload are worth implementing for all shells.\nTo move forward, some additional feedback is desired.. More details on exporting CDPATH: https://bosker.wordpress.com/2012/02/12/bash-scripters-beware-of-the-cdpath/. ",
    "amosbird": "Hi, i did some modification with this.\nsh\nexport_alias() {\n  local name=$1\n  shift\n  local alias_dir=$PWD/.direnv/aliases/$(pwd)\n  local target=\"$alias_dir/$name\"\n  mkdir -p \"$alias_dir\"\n  PATH_add \"$alias_dir\"\n  echo \"#!/usr/bin/env bash\" > \"$target\"\n  echo \"$@ \\\"\\$@\\\"\" >> \"$target\"\n  chmod +x \"$target\"\n}\nHow can I make direnv remove the pwd's aliase directory when eval so that it won't conflict with the new one?. @zimbatm thanks!. Hmm, isn't .direnvrc evaled everytime when shell prompts? If that's not the case, it doesn't help much for simplicity since every .envrc needs those lines added.. Well, in fact the prompt never execute when I'm traversing so there is a problem. Here is the screencast. It only loads/unloads after I type in a Return, that is, the prompt gets executed. You can see the pane title indicating that I'm changing directories rapidly without type anything.. well, ideally I'd like to get notified when I'm nagivating. \n\nis it because you also exec commands without displaying the prompt first?\n\nYeah, that's a good point. This doesn't limit what I'm going to do after changing dir,  but currently the notification seems a bit unsatisfactory. In fact, it would be wonderful to have the information listed in the prompt line.. > What mechanism allows to do that? \nhere is the fish function i used to navigate dir:\nfunction fzf-jump-cd -d \"Change directory\"\n    set -q FZF_ALT_C_COMMAND; or set -l FZF_ALT_C_COMMAND \"\n    command jump top\"\n    set -q FZF_TMUX_HEIGHT; or set FZF_TMUX_HEIGHT 40%\n    begin\n      set -lx FZF_DEFAULT_OPTS \"--height $FZF_TMUX_HEIGHT --reverse $FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS\"\n      eval \"$FZF_ALT_C_COMMAND | \"(__fzfcmd)\" +m\" | read -l result\n      [ \"$result\" ]\n      and if not cd $result\n        jump clean\n      end\n    end\n    commandline -f repaint\n  end. Um, how can I make this error message go away but have an env var setted so that I could use a different color in the prompt to indicate a blocked envrc?\n``\n ENV  \u276f                                                                                       (4s 439ms)\ndirenv: error .envrc is blocked. Rundirenv allow` to approve its content.\nENV  \u276f\ndirenv: error .envrc is blocked. Run direnv allow to approve its content.\n\u276f direnv: error .envrc is blocked. Run direnv allow to approve its content.\n ENV \u276f\ndirenv: error .envrc is blocked. Run direnv allow to approve its content.\nENV \u276f\n``. Thanks for the extensive explanation. The main idea I have in my mind is to get rid of .envrc file completely. That is, to use a global path-related config file that controls all the env manipulations. . Um, first it won't needdirenv allow. And if we have a global configuration, we can easily add env completions when creating new directory entries. For example, I have two postgres extension directories which both depend on a customized build of postgres. SoPGDATAandPATHare needed. Also there is vanilla postgres extensions that rely on standard postgres build, which results in a different set ofPGDATAandPATH`. Currently I have to manually copy .envrc files from correct path. So I think if there is a TUI that can help adding env entries with an auto-completion system that provides all the existing env vars, the setup would be more fluent. . Ah, just found this. https://github.com/direnv/direnv/issues/73. ",
    "dereke": "for those of you using zsh you might like to try this technique:\nhttps://coderwall.com/p/a3xreg/per-directory-zsh-config. ",
    "letientai299": "I would like to suggest a minor enhancement for above export_function by @zimbatm \nsh\nexport_function() {\n  local name=$1\n  local alias_dir=$PWD/.direnv/aliases\n  mkdir -p \"$alias_dir\"\n  PATH_add \"$alias_dir\"\n  local target=\"$alias_dir/$name\"\n  if declare -f \"$name\" >/dev/null; then\n    echo \"#!$SHELL\" > \"$target\"\n    declare -f \"$name\" >> \"$target\" 2>/dev/null\n    # Notice that we add shell variables to the function trigger.\n    echo \"$name \\$*\" >> \"$target\"\n    chmod +x \"$target\"\n  fi\n}\nSo, the exported function could pickup shell variables, and use user default shell.. ",
    "pdf": "@zimbatm thanks for the assistance.  I should have assumed powerline was at fault.  I was adding direnv after powerline, but as you suggested, I've unset POWERLINE_OLD_PROMPT_COMMAND after initializing powerline to sort it out in the short term.  Probably https://github.com/Lokaltog/powerline/blob/develop/powerline/bindings/bash/powerline.sh#L41 should do a substring match - I'll test it and send them a PR if it fixes things.\nCan probably close this one here!\n. > Is it possible that you're using some kind of bash configuration framework like bash-it that does too much magic ?\nNah, I'm just using /etc/profile.d/* for system-wide support.  So, each login shell executes everything there again.  I first noticed this issue when using tmux after enabling direnv (I have another problem with tmux, rvm and direnv precedence, but I've hacked around that by forcing direnv to reload on new tmux windows).\n. Cool.\n\nBy the way did you know that you can use ruby-build+direnv to emulate the version selection of rvm ? Or just build any software with ./configure --prefix=~/some/prefix and in your .envrc: load_prefix ~/some/prefix.\n\nAutomatic ruby-version and ruby-gemset selection is too useful when switching between numerous projects frequently, and though I've been testing rbenv as a lighter-weight alternative, RVM's gemset management is holding me there for now.\n. Thanks @zimbatm.  I believe you're right about the problem only occurring when starting tmux from within an existing .envrc environment.  The workaround is essentially working, but tmux likes to call itself a lot, so direnv does a lot of reloading with the alias in place.\nI may be missing some understanding here, but why is direnv doing anything with variables that it's not being told to modify?  That just seems wrong to me.\n. @pwaller I'm not entirely convinced that's the best that can be done.  An example implementation that would behave correctly might be to parse the .envrc and perform individual actions that could be tracked inside direnv.  There may be other ways of tracking stuff, too.\nWith that aside, why is DIRENV_BACKUP exported?  Why do we ever want that in subshells?  This particular issue (and I suspect others of similar provenance) wouldn't occur if it wasn't exported.\n. > @pdf if DIRENV_BACKUP is unset it's not possible to revert the env changes.\n\nThat might lead to having inconsistent states.\n\nI wasn't suggesting unsetting it, just not exporting it... however, I see below why that is not possible.\n\nThat's a good thought about DIRENV_BACKUP. However, if you started a subshell in $PWD with some environment already exported and then move to $PWD/.., what should happen?\n\nThat is indeed problematic.  I've tried having a quick browse of the code, but I'm struggling to put all the pieces together on how this works.\nPerhaps this can be attacked from another angle - what is it about tmux that triggers an unload, even though DIRENV_DIR hasn't changed?\n. Sorry for the delay in testing - this time of year is hectic.  This fix looks great, thanks!\n. ",
    "ardecvz": "Glad I could help a bit such an useful project.\n. ",
    "gsong": "@zimbatm Thanks for the quick response.\n1.  I use the built in Terminal.app, not iTerm.\n2.  The crash seems to only happen after I've activated .envrc at least once. See the screencast.\nHere's the crash report.\n. After .envrc has been invoked, any bash completion attempts crashes the terminal, not just direnv.\n. .envrc was just:\nexport PATH=$PWD/bin:$PATH\n. I haven't had a chance to try it yet. I'll let you know what the results are when I do.\nOn Dec 8, 2013, at 12:45 PM, zimbatm notifications@github.com wrote:\n\nAny luck ? It seems that the combination of direnv and rvm might expose a weakness in bash that makes it crash. Another solution might be to upgrade bash ; Apple is distributing an old version of bash (3.2.51) that probably has some bugs in it.\nI'll try and see if I can reproduce the bug later in the week by installing rvm if you don't find a solution.\n\u2014\nReply to this email directly or view it on GitHub.\n. Upgrading to a new shell via Homebrew works.\n\nOn Dec 8, 2013, at 12:45 PM, zimbatm notifications@github.com wrote:\n\nAny luck ? It seems that the combination of direnv and rvm might expose a weakness in bash that makes it crash. Another solution might be to upgrade bash ; Apple is distributing an old version of bash (3.2.51) that probably has some bugs in it.\nI'll try and see if I can reproduce the bug later in the week by installing rvm if you don't find a solution.\n\u2014\nReply to this email directly or view it on GitHub.\n. @zimbatm I'll try it out and let you know.\n. \n",
    "timbertson": "It would work, but it seems a little messy. 0env already uses a process similar to direnv for the --export functionality (dump the resulting environment and generate a series of export commands), and it includes a bunch of unnecessary environment variables for bookkeeping (all the information required for undoing the modification, which is unnecessary since direnv does this already). Also, it requires a temporary file for the script, which is just a little unclean.\nIf direnv print could (optionally) be invoked by the user early, that would be much more efficient - 0env would invoke direnv dump directly rather than writing and sourcing a temporary script.\nI'd be willing to write a patch for this, but I'd like some feedback on what would be the best approach:\n- make direnv dump output a sentinel line once it's done, to cause the reader of the dump data to stop reading after the first dump invocation (any idea what a good sentinel should be? Anything which isn't valid base64 seems reasonable at the moment - even just a newline would do, as long as the base64 stuff doesn't start using newlines in the future).\n- make direnv dump write some state somewhere (not really sure where) to prevent direnv dump from doing anything after the first time it's invoked in a single run.\n. Yep, that's precisely my goal :)\nYou can think of 0env just like virtualenv / rvm etc, really - it's just another context manager that I'd like to be able to activate / deactivate using direnv.\nI understand that it would be better if 0env could modify the current process' environment, and I understand that there are a few workarounds which already make this possible. So while making direnv dump print bash-style syntax would work, I don't think it's a very nice solution (anything blindly eval()ing stdout feels like a hack to me), and it's unnecessary (0env --export would already work, and is roughly as hacky).\nBut this feature request, really is about adding the feature to direnv whereby the environment adopted doesn't have to be from the bash process running my .envrc, but rather can be triggered from any child-process - making the whole question about \"how to get the environment from a child process into the parent process\" moot, because it doesn't seem like this needs to be a limitation of direnv.\nDoes that make sense? I get that you're trying to solve my individual problem, but I already understand the workaround, and I'd rather talk about improving direnv so that it works out of the box with all instances of this kind of problem.\nPerhaps I should just try coding it up in a PR anyway, that might make things clearer ;). It's probably not that big a change to get something working the way I'm imagining...\n. The .gitignore trick was to allow an otherwise-empty directory to be checked in, in case the tests required /test/allow to exist. It looks like it creates that directory as needed though, so I've just added /test/allow to the root .gitignore :)\n. You're right, it's not very nice (or obvious) that further modifications to the environment would be ignored.\nPerhaps direnv could provide a mechanism for transferring environments automatically? e.g:\n0env mocktest.xml -- direnv dump | direnv_apply_dump\nThat way, direnv isn't locked into a certain format for dump, the implementation can be changed in direnv dump and the corresponding direnv_apply_dump function without the user caring.\nThis would mean that direnv dump would have to write to stdout again, as the user shouldn't have to manually redirect FD3 into direnv_apply_dump.\nWhat do you think, does something like the above scheme sound like something you'd merge if I wrote it?\n. OK, I've implemented it as a function which runs \"$@\" and loads the dump from that.\nThis will mean you can't use a pipeline in the command generating direnv dump, but you can still use functions etc, so that's probably not a big issue.\nI've also added a commit changing the name to direnv_load if you prefer (I'm not sure if your comment was suggesting renaming it, so if you're still happy with direnv_apply_dump you can just ignore a234c3dc9ed3b9d637f155142a256fa870a33db3).\nCheers,\nTim.\n. Ahh, yeah the tests are just failing because of \"DIRENV_PATH\". I just rebased, they should pass now.\n. I've added a new commit which uses $DIRENV_LOG_FORMAT rather than hard-coded colour. I couldn't find a good place to document the $DIRENV_LOG_FORMAT setting though.\nI've left the default as white, but feel free to change it to a colour when you merge (I couldn't decide what color to use).\nAs an example, I've got my fish-shell config setting:\nset -x DIRENV_LOG_FORMAT (set_color 777)\"direnv: %s\"(set_color reset)\n. Yup, I'll take a look.\n. Hmm, so this is a bit awkward. The reason it sometimes it works is because bash printf (used to print \"loading .envrc\") treats the literal '\\033' string as an escape code generating ^[, but the go code (used to print the variable summary) knows nothing of that escape sequence so it prints a literal '\\033'.\nSo one answer is you're doing it wrong - you need to literally have the ANSI sequence in your environment variable, a \\033 won't do. To get that, you could do:\nexport DIRENV_LOG_FORMAT=\"$(printf \"\\033[1;30m %%s\\033[0m\")\"\n(you should remember the reset code at the end of the format, otherwise you'll get grey text until something happens to change it).\nWhat's probably better is just to use a utility for outputting the correct codes for the current terminal, like tput:\nexport DIRENV_LOG_FORMAT=\"`tput setaf 1`%s`tput sgr0`\"\nAlternatively, we could make direnv interpret such \\0xx escapes, but I'm not sure if it's worth it when the workaround is fairly simple. WDYT, @zimbatm?\n. More importantly, I'm not sure how much a can of worms it would be to support \\0xx - are there other types of escapes we should support too? What's the spec for such escape sequences?\n. Actually, scratch this. I've hit more fish escaping bugs, gonna fix them all at once.\n. Cool, even better :)\n. Well the caching code is a little complex, but without caching it's pretty simple (PR in #172):\ndirenv_load nix-shell --show-trace --run 'direnv dump'\n. > It would be nice if the user could just add a direnv cache directive into his .envrc to enable caching\nThat would be nice, but yeah:\n\nChange tracking is only done on the .envrc at the moment. Any other changed file needs the direnv reload to be taken into account. But that's already the case, it just exacerbates the problem\n\nRight. In my case I very rarely update .envrc directly, but would need to tell direnv to invalidate the cache when one or more files changed. I don't know if it would be good enough, but something like direnv cache --depends-on <path1> <path2> <path3> could maybe just store the mtime of all these files, and re-run the .envrc next time any of those files has a different mtime (or the .envrc changes).\nAlternatively, we could make the invalidation up to the user, via direnv cache --invalidate or something. I like the flexibility of this because the user could (on their own terms) run direnv cache --invalidate based on their own logic about when the cache needs reloading, but the downside it that puts a certain control-flow burden on the user's code, e.g. a minimal usage might look like:\n```\nif direnv cache --unchanged .envrc [ more input files ]; then\n  exit 0\nfi\ndo normal envrc stuff\nuse ruby [ ... ]\nopt in to cache\ndirenv cache\n```\nOn the upside, it keeps the simple logic of \"your .envrc is always executed\", which is probably less confusing in the long run.\nSo that would imply the following commands:\n- direnv cache --unchanged [inputs]:\n  Loads (and exits successfully) if there is a cached env which is newer than the mtimes of [inputs].\n- direnv cache\n  stor the env (up until now? or at the end of this run?) in a cache\n- direnv cache --invalidate:\n  this could probably just delete the cache file, but however it's implemented it needs to\n  make any future direnv cache --unchanged exit unsuccessfully\nI don't know if this would work well with code that tried to use the cache and also unconditionally added stuff to $PATH though, so it might require more thought. I would like to make sure user-code can invalidate the cache as part of a fast-loading .envrc though, otherwise the feature isn't personally of much use to me (since I could rarely trust the cache to be fresh).\n. > The only downside is that direnv's execution time on every prompt is linear to the number of files. It's probably fine on SSDs but what if for example the whole nixpkgs is a dependency ?\nI think that sort of thing counts as a case of \"the world changed\", so it would be fine to require a manual \"direnv reload\" to pick up. I would generally only track project-local files for the cache, so basically ./default.nix (and anything it imported from the local project, e.g. nix/*).\nAlthough funnily enough, in this specific case you can get a good approximation of \"the whole of nixpkgs\" for most users by checking just the $(readlink $HOME/.nix-defexpr/channels) symlink, since I think that changes on every channel update.\n\ncache \"nix\" use nix -p ruby\n\nAnd that cache name is directory-scoped, right? I'd use nix in many different projects, but each would be wildly different based on the content of ./default.nix\nHmm, would that work if  is a function? I wouldn't want to use eval, as then you'd need to double-escape everything. But maybe it's OK, because if you have complex args you can just shove them into a function and cache \"nix\" do_the_cache_dance.\nI can imagine wanting to extend it in the future with flags (e.g. --invalidate to force-clear the cache, --depends-on to add extra DIRENV_STAT entries). Would a cache function allow that to be implemented in the direnv executable, or would it have to be bash all the way down?\n\nAccompanied with this, use_nix and friends would have to be changed to append to the DIRENV_STAT environment variable. That would be useful without the use of cache anyways.\n\nThat would be useful, but may not be practical. e.g use nix may depend on nothing, or default.nix, or shell.nix, or a named argument (based on whether there was a -p or --packages flag in the arguments). I definitely wouldn't want to have to code that logic into the use_nix function, so it might be something that requires user direction.\n. ",
    "rvandanp": "can any one help me here ?\nI am getting the same error\ndirenv: error LoadConfig() Getwd failed: \"stat .: no such file or directory\". can any one help me here ?\ndirenv: error LoadConfig() Getwd failed: \"stat .: no such file or directory\". can any one help me here ?\nI am getting the same error\ndirenv: error LoadConfig() Getwd failed: \"stat .: no such file or directory\". ",
    "laggyluke": "Would it be reasonable to ask for a shortcut like direnv exec /path/to/binary, so that direnv would do a recursive lookup of .envrc related to the given absolute (or relative to CWD) path to the binary?\n. Hey @zimbatm, thanks a lot for such a quick response!\nEverything works fine, though the message direnv gives in my use case is a bit weird/wrong:\n$ direnv exec /opt/liiist/apps/frontend/bin/liiist-frontend\ndirenv: loading ../../opt/liiist/apps/frontend/.envrc\n...\n(the file is actually at /opt/liiist/apps/frontend/.envrc)\nPersonally I don't mind, as long as it works, so thanks again :)\n. Okay, I've created #101. Thanks!\n. ",
    "gretel": "log_prefix() {\n  local cwd\n  cwd=$(user_rel_path \"$(expand_path \"$1\")\")\n  export DIRENV_LOG_FORMAT\n  DIRENV_LOG_FORMAT=\" $(tput setaf 7)$(tput dim)[$cwd]$(tput sgr0) $(tput setaf 7)$(tput bold)%s$(tput sgr0)\"\n}\nlog_prefix \"$1\"\n. @zimbatm like sourcing files from the location of the original .envrc, well, some sort of inheritance. maybe just mention that conceptual thing in the documentation.\nbtw, i noticed the actual code and the documentation seem to be off-sync, while there are lots of recently added features people might like lots \ud83d\udc35 \n. @zimbatm actually i am missing it lots. i'd love to have it back, maybe disabled per default, but to be enabled using DIRENV_DIFF_REVERSE environment variable or so. regards\n. ",
    "eholic": "I just found solution. You need to set two DIRENV_LOG_FORMAT though.\n\n\nin your direnvrc. It works in first line. e.g. direnv: loading .envrc\nbash\nexport DIRENV_LOG_FORMAT=\"$(printf \"\\033[35mdirenv: %%s\\033[0m\")\"\n\n\nwithout double quotation in your .bashrc. It works after second line. e.g. layout for miniconda\nbash\nexport DIRENV_LOG_FORMAT=\\033\\[32mdirenv:\\ %s\\033\\[0m\n\n\n. ",
    "jrhorn424": "Do either of you know of a hook to get direnv reload to happen when you create a new pane?\n. Thanks, I added it to my zshrc for now. Do let me know when there's a new command to use.\n. ",
    "jmuheim": "I temporarily changed $ export EDITOR=vim and then it worked.\nI don't know what you guys mean, but I never had problems with doing something like $ mate . before.\n. Sure thing! :+1: Thanks, guys.\n. ",
    "mcnichol": "@zimbatm - Strange question resurrecting the dead here...\nIn this directory, if I wanted to call up this alias of the deploy command at a terminal by typing $ dep[TAB] \nit wouldn't work because I can't tab out bash scripts without being in the directory and doing something like $ ./dep[TAB]\nAny thoughts on working around this?. ",
    "halkeye": "I might be biased, but any perl developer who would use this tool would probably use cpanminus.\nThat being said. CPAN is built into every perl install and installs packages into the .direnv location (Thats actually how i installed cpanm)\n. Oh cool. I just learned about path_add\nOnce I'm feeling less sick, I'll try to submit a patch to add layout_perl to the man page. I'm also not great at writing though.\n. ",
    "mlawren": "I'm also seeing the same behaviour with PATH, even though PATH_add is used.\n. Ah. I see now that it is in the documentation, but kind of hidden by virtue of being indented as part of the find_up command. Might I suggest that source_up and source_env get their own top-level headings?\nAlso, layout perl doesn't seem to have made it into the direnv-stdlib manpage...\n. I actually created a fork and wanted to make a patch for this issue myself, but I'm afraid the manpage format is undecipherable to me...\nSince we are on the topic here is another comment with regards documentation: The split between direnv and direnv-stdlib is I think unecessary, especially as the name direnv-stdlib doesn't match anything the user sees. The user should probably be able to use direnv completely after reading the direnv page, but it its current form it is really only a very short setup guide. I would suggest merging direnv-stdlib back into direnv.\nMy second point may be too late since direnv is well-used in the wild. The unix filesystem is hierarchical, and with command names like path_add I assumed direnv's behaviour would also be so. That it unloads everything by default means for every use case I have I'm going to be putting source_up in every .envrc file I make. To my mind keeping the \"current\" environment should instead be the default behaviour when entering sub-directories. Just an opinion :-)\n. The original issue I raise here is solved, so I think this issue can be closed now...\nI still use direnv every day!\n. ",
    "punitagrawal": "On Thu, Apr 24, 2014 at 10:08 AM, zimbatm notifications@github.com wrote:\n\nThanks @punitagrawal https://github.com/punitagrawal. The man pages are\nactually generated from the .ronn file so there is a risk that your fix\nwill be reverted in another man update.\nI noticed this after sending the pull request. So the fix most likely\nshould end up in ronn. I had a quick look at ronn but the latest version is\n4 years old and I don't have any ruby experience.\n\n\u2014\n\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/pull/113#issuecomment-41258700\n.\n. On Thu, Apr 24, 2014 at 10:09 AM, zimbatm notifications@github.com wrote:\nI'm thinking of moving the man generation from ronn to something else (\nmd2man ?) since ronn doesn't seem maintained anymore.\nI don't have any experience with man page generation. So can't really\ncomment on a suitable tool.\n\nI came across the manpage issue while packaging direnv for debian. I'll\ncarry a patch in debian until the issue is fixed in direnv repo.\nThanks for your quick response.\nPunit\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/pull/113#issuecomment-41258804\n.\n. On Thu, Apr 24, 2014 at 10:24 AM, zimbatm notifications@github.com wrote:\ndirenv is getting an official debian package ? [image: :dancers:]\n\nYeah, I should've informed you before I started. It is my first debian\npackaging effort and I wasn't too confident so thought I'd wait until I've\ngot something almost done. I am nearly there and hope to have something\nuploaded in the next week if not earlier. I'll email you with the package\nurl once it's uploaded.\n\nIt's the reverse for me, I don't have any experience with groff. What's\nthe rule, if a line starts with a dot it needs that prefix ? I don't think\nI can fix that quickly yet so I'll merge the patch as a temporary measure.\n\nFrom my understanding, if a line of text starts with a '.', then it needs\nto precede with '&' instead of '\\' (escape character) only. Man returns an\nerror when '.' is the first character as it thinks it's a macro use.\nHTH\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/pull/113#issuecomment-41260063\n.\n. On Fri, Apr 25, 2014 at 10:14 AM, zimbatm notifications@github.com wrote:\nok, I had to fix md2man a bit but we now have a \"md2man\" branch with\nescaped lines when they start with a dot. Do you want to have a look at the\ngenerated man pages and see if there's anything off ?\n\nI tried using the branch - the direnv manpage now shows no problems. But\nI've run into a new warning against direnv-stdlib manpage. I get the\nfollowing lintian warning -\npunagr01@e104195-lin:~/devel/t/direnv$ lintian\nW: direnv: manpage-has-bad-whatis-entry\nusr/share/man/man1/direnv-stdlib.1.gz\nwhich has the following explanation -\npunagr01@e104195-lin:~/devel/t/direnv$ lintian-info -t\nmanpage-has-bad-whatis-entry\nW: manpage-has-bad-whatis-entry\nN:\nN:   Each manual page should start with a \"NAME\" section, which lists the\nN:   name and a brief description of the page separated by \"-\". The \"NAME\"\nN:   section is parsed by lexgrog and used to generate a database that's\nN:   queried by commands like apropos and whatis. This tag indicates that\nN:   lexgrog was unable to parse the NAME section of this manual page.\nN:\nN:   For manual pages that document multiple programs, functions, files, or\nN:   other things, the part before \"-\" should list each separated by a\nN:   comma and a space. Each thing listed must not contain spaces; a man\nN:   page for a two-part command like \"fs listacl\" must use something like\nN:   \"fs_listacl\" in the \"NAME\" section so that it can be parsed by\nN:   lexgrog.\nN:\nN:   Refer to the lexgrog(1) manual page, the groff_man(7) manual page, and\nN:   the groff_mdoc(7) manual page for details.\nN:\nN:   Severity: normal, Certainty: certain\nN:\nN:   Check: manpages, Type: binary\nN:\nFrom looking at the direnv-stdlib manpage, the relevant part from the above\nmessage seems to be the presence of space between direnv and stdlib in the\nNAME section. Looking at another page which has a '-' in the command name\n(dpkg-source), it seems having a '-' seems to be ok too.\nHope that helps.\nCheers,\nPunit\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zimbatm/direnv/pull/113#issuecomment-41373416\n.\n. Hi,\n\nI am replying here as I don't know what's the best way to inform you.\nI wanted to let you know that the direnv package has been accepted into\ndebian (https://packages.debian.org/sid/direnv).\nI'll be maintaining the package so please do let me know if you / user run\ninto any issues with the packaged version. You can also file a bug against\nthe package via the above link.\nCheers,\nPunit\n. I should've mentioned this in the issue.\ndirenv was indeed compiled before the tests were run. And I noticed the\nupdate to the PATH in the test script.\nThe problem arises because the PATH variable isn't inherited when you\ncreate a new shell as is done in test/scenarios/dump/.envrc where direnv is\ninvoked using \"bash -l -c direnv dump\" [0].\n[0]\nhttps://github.com/direnv/direnv/blob/master/test/scenarios/dump/.envrc#L5\nOn Mon, Jul 13, 2015 at 11:55 AM, zimbatm notifications@github.com wrote:\n\nI should probably add a check for it's existence at the top of the tests.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/direnv/direnv/issues/175#issuecomment-120889826.\n. On Mon, Jul 13, 2015 at 8:11 PM, zimbatm notifications@github.com wrote:\nThe -l is likely the culprit. 9b60b43\nhttps://github.com/direnv/direnv/commit/9b60b43216d6c1c58ea1b9e74a483619acefbb65\nshould fix the issue.\n\nIndeed. Dropping the -l fixes it for me.\nThanks\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/direnv/direnv/issues/175#issuecomment-121025689.\n. No, I can fix it up locally and drop it when the upstream release with the\nfix appears.\n\nJust to be clear, this isn't a blocker. I came across this when trying to\nupdate to 2.6.1\nOn Tue, Jul 14, 2015 at 12:51 PM, zimbatm notifications@github.com wrote:\n\nDo you need me to make a new release for packaging ?\nOn Tue, 14 Jul 2015 10:34 punitagrawal notifications@github.com wrote:\n\nOn Mon, Jul 13, 2015 at 8:11 PM, zimbatm notifications@github.com\nwrote:\n\nThe -l is likely the culprit. 9b60b43\n<\n\nhttps://github.com/direnv/direnv/commit/9b60b43216d6c1c58ea1b9e74a483619acefbb65\n\nshould fix the issue.\n\nIndeed. Dropping the -l fixes it for me.\nThanks\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/direnv/direnv/issues/175#issuecomment-121025689.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/direnv/direnv/issues/175#issuecomment-121180154.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/direnv/direnv/issues/175#issuecomment-121214328.\n. I'm not sure if this is the same issue but recently when trying to upgrade the debian package to 2.12.2 I ran into the following error -\n\nmake[1]: Entering directory '/<>'\ngo fmt\ngo build  -o direnv\ncmd_dotenv.go:7:2: cannot find package \"github.com/direnv/direnv/dotenv\" in any of:\n        /usr/lib/go-1.8/src/github.com/direnv/direnv/dotenv (from $GOROOT)\n        /sbuild-nonexistent/go/src/github.com/direnv/direnv/dotenv (from $GOPATH)\nMakefile:36: recipe for target 'direnv' failed\nmake[1]:  [direnv] Error 1\nmake[1]: Leaving directory '/<>'\ndh_auto_build: make -j1 returned exit code 2\ndebian/rules:8: recipe for target 'build-arch' failed\nmake:  [build-arch] Error 2\ndpkg-buildpackage: error: debian/rules build-arch gave error exit status 2\nOn further digging, I found that this is due to the import of \"github.com/direnv/direnv/dotenv\" in cmd_dotenv.go. \nChanging the above import to \"./dotenv\" makes it build for me but I'm not sure that is the right way to solve this problem. I am not familiar with go best practices but a bunch of commentary on the web suggests using relative path is a bad idea (not sure why).\nI would really appreciate any input on the best way to make this build in a packaged environment without creating arbitrary directories.. Thanks for the pointer @yermulnik. That's the same problem.\nI think the requirement for modules to be available at $GOPATH/src/github.com/direnv/direnv makes it awkward for distro packaging. But then I can't be the first person to be hitting this in debian. I'll look around to see what other packages are doing.\nIn the short term, the linked issue seems to suggest being able to use symlinks. I'll see if I can play tricks with that and upgrade the package version.. Thanks @zimbatm for picking up the fix and improving on it. As you can\nprobably tell, golang doesn't come naturally to me. :)\nI'll pick it up for the 2.15 update of the package.\nOn Sat, Feb 24, 2018 at 11:42 AM, zimbatm notifications@github.com wrote:\n\nthanks @punitagrawal https://github.com/punitagrawal . I extended your\nwork a little bit in #339 https://github.com/direnv/direnv/pull/339. By\nnot using printf at all it will avoid awkward escaping situations.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/pull/338#issuecomment-368222698, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAwQyg5x9smNXPSgqX_ePc_9lyLHTK5Sks5tX_W0gaJpZM4SR0ZI\n.\n. On Sat, Feb 24, 2018 at 7:45 PM, zimbatm notifications@github.com wrote:\nhttps://github.com/direnv/direnv/releases/tag/v2.15.1\n\n\nAh thanks I didn't see your response until after I uploaded 2.15.0. There\nwere a couple of lintian warnings I addressed in the upload as well.\nI don't mind carrying a patch - especially if it's been merged upstream. I\nwill upload an update in the next couple of days.\n\u2014\n\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/pull/338#issuecomment-368254322, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAwQynj_coUR_D9mrD7ibV4sz-omI-b2ks5tYGbKgaJpZM4SR0ZI\n.\n. On Sat, Feb 24, 2018 at 7:46 PM, zimbatm notifications@github.com wrote:\n@punitagrawal https://github.com/punitagrawal do you think it would\nmake sense to move your repo to direnv/direnv-deb maybe?\n\n\nI'm open to the idea but what would be the benefit of such a move? Is there\na wider interest in maintaining the package?\nIn some instances upstream include the packaging (essentially the debian\nfolder) in their repos. Is that something you're considering?\n\u2014\n\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/pull/338#issuecomment-368254436, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAwQygcc-RXZ9aIS3oEkqOBgvFpYPQVXks5tYGcbgaJpZM4SR0ZI\n.\n. On Sun, Feb 25, 2018 at 12:23 PM, zimbatm notifications@github.com wrote:\nI think it would help with discoverability. It's hard to predict in what\nways users are ready to contribute so my strategy is to lay everything in\nfront of them. It's nice to wake up to a fresh PR :)\n\n\nAck! No arguments there.\n\nThe story around including the deb/ folder in upstream is not super clear.\nI don't mind adding it but my understanding is that you would still have to\nmaintain your own branches and tags.\n\n\nAfter having looked into this a bit more I think it makes sense when the\nupstream authors are also maintaining the package - otherwise it isn't much\ngain.\nOn moving the package repo - please go ahead and create the repo. It can\nstart out being a clone of the current package repo if it's easy or I can\nrepopulate if needed. The repo location can be changed with the next update\nof the package.\nThanks.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/pull/338#issuecomment-368305032, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAwQypyDKEq34F74gN4tCtvcQyLc7XOtks5tYVC9gaJpZM4SR0ZI\n.\n. On Mon, Feb 26, 2018 at 6:12 PM, zimbatm notifications@github.com wrote:\nI had to create a new repo, github doesn't support hosting two forks in\nthe same org apparently (even if I did the rename before)\n\n\nLooks to be all working from my end. I've pushed the package repo branches\nto start with.\n\u2014\n\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/pull/338#issuecomment-368595064, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAwQypn_lL35r_44aqy2n-PJPhoA7Y1Sks5tYvP0gaJpZM4SR0ZI\n.\n. Thanks for fixing the issue here - and from the looks of it some more as well.\n\n(Apologies for not responding earlier, I was away from computer). @sbinet Thanks for clarifying the version requirement. The debian elvish package is based on 0.11 which is what I tried. Packages are usually based on release versions and so the set-env built-in is missing in Debian. (I also mistakenly used 0.11 when I thought I was building HEAD).\nIn this situation, where a released version of direnv depends on an unreleased dependency, it probably would've been best to delay the direnv package update until the dependency landed.. ",
    "CMCDragonkai": "The first recommendation is to release the windows binaries with a .exe extension. They don't work otherwise.\nBut there's still a bug. When I use the status command, it can detect the envrc but it doesnt do anything.\n. I'll need guidance on the go code. If we could just log all the steps when they are running on Windows, it should be easy to solve. Perhaps a pair session over skype/screenshare?\n. Thanks for the session. It's all fixed now for Cygwin. https://github.com/zimbatm/direnv/pull/117\n. Interesting layout_go is conflicting with one my ZSH things...\n. Is there a way to separate the 2 commands in layout_go that adds the bin to the PATH? That command is currently conflicting with some ZSH things. In some cases, one may not want to add the bin to the PATH. Perhaps if there could be a parameter to the layout_go function?\n. Closed so we can think of a better solution.\n. There needs to be some caution with this. If people are using Linux \"emulators\" like Cygwin, there can be a $HOME, and it does lead to something like C:/Users/CMCDragonkai. However it's not always there. For me I manually setup a $HOME variable to point to my Window's home.\nI think this should be configurable even if there's an automated guess. I would like all my config files to be in my Home directory.\n. Also if people are using a linux \"emulators\", there will be in fact a / root. So there should be some conditionals to test for this.\n. I believe Cygwin transparently converts the PATH. I am able to windows native executables from Cygwin.\nThe complication with cygwin is that it can run windows executables and linux executables. windows executables can use forward slashes. but  and generate backslashes\n. But windows executables often generate backslash paths.\n. One important thing to note is that Windows respects both \\ and /. Because some people are using linux \"emulators\" that only respect /, I believe it's a good idea to always use / for all paths.\nAnother thing to note, based on this issue https://github.com/zimbatm/direnv/issues/118 is that binaries built for Cygwin can use a special cygwin path such as/cygdrive/c/users...etc. However binaries built for Windows natively only understand C:/Users...etc. When I use Cygwin, I am sometimes using Linux binaries and sometimes using Windows binaries. So there are times where I need to convert the special cygwin path into a windows native path, that utility in Cygwin is called \"cygpath\".\n. To support window's terminals, 3 types of scripts need to be executed:\n1. script.ps1\n2. script.bat\n3. script.cmd\nPowershell runs .ps scripts, CMD should be used to run bat or cmd scripts. There are some minor differences between .bat and .cmd: http://stackoverflow.com/questions/148968/windows-batch-files-bat-vs-cmd (cmd is recommended script format now)\nIn order to set environment variables in CMD you need to use SET:\ncmd\nSET blah=blah\necho %cmd%\nIn order set environment variables in powershell (it uses a different syntax) see:\n- http://technet.microsoft.com/en-us/library/ff730964.aspx\n- http://ss64.com/ps/syntax-env.html\n- http://www.darkoperator.com/blog/2012/4/18/introduction-to-microsoft-powershell-ndash-variables.html\nWhen using Cygwin, any environment variables set in Powershell or CMD are transferred to Cygwin child shell or vice versa.\nSo I can do this in Cygwin:\nzsh\nexport EDITOR=\"nano\"\nCMD /C \"echo %EDITOR%\"\nWhich echos out nano.\n. Which means you may need shell_powershell.go and shell_cmd.go. Most windows installations have powershell now, but older installations may only have CMD. I think XP and up?\n. The starting area for PowerShell scripts is here:\npowershell\n$profile\nAs explained here: http://technet.microsoft.com/en-au/library/ee692764.aspx\nHowever in order to run ps1 scripts, one has to activate their execution policy:\n- http://pricklytech.wordpress.com/2012/12/07/windows-8-powershell-script-cannot-be-loaded-because-running-scripts-is-disabled/\n- http://technet.microsoft.com/library/hh847748.aspx\nHere's my profile powershell:\nSet-Location $env:USERPROFILE\nCMD does not automatically look for any kind of profile script to run. People will need to hook in a script manually upon starting CMD: http://blog.cachemiss.com/articles/My%20cmd.exe%20Profile.pod\n. How are you using nix shell with direnv?\n. ",
    "vshih": "I submitted https://github.com/direnv/direnv/pull/431.. Any progress on this?  I'm trying to run in cygwin (looked through those related issues too) but no luck - I get\n-bash: C:\\cygwin64\\usr\\local\\bin\\direnv.windows-amd64.exe: command not found\non every bash prompt.. I submitted https://github.com/direnv/direnv/pull/431.. Looks like Travis CI has some Windows support - https://blog.travis-ci.com/2018-10-11-windows-early-release.  Any thoughts on what would needed to increase coverage?. ",
    "wilmoore": "For the same, the following package is commonly used in NodeJS programs:\nhttps://www.npmjs.com/package/user-home\n. > Really nice @wilmoore\nThanks. I've been using it myself and definitely wanted to share. Love how you've made direnv so extensible.\n\nThe rest of the script uses lower-cased local variable so that it's easier to distinguish them from environment variables\n\nGood point. I'll make an update so that style is preserved.\n. > What would you think of using the existing log_status function maybe add a log_error function to keep logging unified ?\nI think that would be excellent.\n. > I'm not sure why the sleep is for. Isn't just exiting the script enough ?\nYeah, one thing I've noticed is that if I put something to stderr, it pretty much doesn't show up. Sometimes there is a bit of a flash so I know it is being output, but doesn't stick around for long. Is there a way to ensure those messages always show up...perhaps using stderr is the problem.\n. > Alright, I'm done with the review. Ping me when you're done making the updates that you want, I'll have another look tomorrow.\nSounds good. I'll make some updates tonight. Thanks!\n. > It should be flushed if your line terminates with a \"\\n\"\nThat did the trick :+1: \n. > Alright, if you can address these two little things it would be awesome.\nAll set...thanks :+1: \n. > ... thanks for putting all this effort into the PR !\nNo problem at all :+1: \n. @zimbatm \nWasn't sure where to ask so I figured I'd start here. After you merged this, I figured I'd go ahead and uninstall my previous installation of direnv:\nsh\nbrew uninstall --force direnv\nand install from head:\nsh\nbrew install --HEAD direnv\nUnfortunately, after doing this, everything stopped working. To ensure I wasn't missing something, I checked the man page:\nsh\nman direnv-stdlib\nI noticed that there was no use node section in that man page. That tells me that there is something amiss. I wonder if this is a homebrew issue or if there is some build artifact missing?\n. :+1: \n. > are you using the stdlib layout node as well in your .envrcs\nI don't use layout node because adding node_modules/.bin to $PATH is not a necessary pattern with node and npm.\nThe general pattern is to either install a program globally (i.e. npm install -g npm) because you always need the latest version globally, or you install a program into a project (i.e. npm install --save-dev webdriverio) because you need to ensure project's dependencies are locked to expected versions via package.json.scripts. SEE: https://docs.npmjs.com/cli/run-script\nWhen you define a .scripts.test:e2e, for that project, you can now type:\nnpm run test:e2e\nEven better, within .scripts.test:e2e you can access any binary dependencies that have been installed.\nnpm install --save-dev webdriverio\nThen you can say in package.json:\n{\n  \"scripts\": {\n    \"test:e2e\": \"wdio ./test/config/wdio.conf.js\"\n  }\n}\nIn other words, you don't have to type ./node_modules/.bin/wdio because within .scripts the directory ./node_modules/.bin is added to the $PATH automatically.\nThis is somewhat like bundle exec; however, I hesitate to compare the two because bundle exec does  a lot of stuff that npm run does not need to do. For example, without bundle exec, a ruby script doesn't automatically have access to installed Gems; however, with node, that isn't an issue since you don't need to do anything special to access installed packages. You just require and node knows to look into node_modules.\nHope that helps.\n. > I think that what you describe is just because it's not easy to add ./node_modules/.bin into the path without direnv so they have come up with their own wrapper.\nYou may very well be correct; however, I don't ATM have any historical context around it to say one way or the other.\n\nIf you just add ./node_modules/.bin into the PATH then you can go ahead and just use coffee or whatever program is installed with the project.\n\nI can definitely see how someone might like that as a workflow. In that regard, probably is good to have both options.\nFor those that want access to those local binaries, they can always add layout node to their .envrc file.\nFor me, I would probably only ever use use node along with a .node-version file. I wouldn't ever want to have to figure out why when I'm in a specific directory, the host program doesn't work as expected for example (maybe this is a bad example, but it's the first I could think of). If one of the project's dependencies were say: https://www.npmjs.com/package/host, that could put me in a situation where things act unexpectedly.\nBut again, it's up to the individual so both options seems great!\n. > Exactly. The trick is to put the non-controversial stuff in the stdlib and anything that's not 100% clear goes into the user's ~/.direnvrc. \nAgreed!\n\nThanks for taking the time to explain your POV !\n\nCertainly :smile: \n. I've just updated the wiki page so it reflects all of this: https://github.com/direnv/direnv/wiki/Node\nIf you set both NODE_VERSIONS=$HOME/.nvm/versions/node and NODE_VERSIONS_PREFIX=\"v\" then add a .nvmrc file; you should be good to go.\n. Currently NODE_VERSIONS_PREFIX does default to node-v because that's how they get pulled down from: http://nodejs.org/dist/latest\nFor example: http://nodejs.org/dist/latest/node-v5.9.0-darwin-x64.tar.gz\nI typically pull them down like so:\ncd $NODE_VERSIONS_PREFIX\nmkdir node-v5.9.0\ncurl -L# 'http://nodejs.org/dist/latest/node-v5.9.0-darwin-x64.tar.gz' | tar xz --strip-components=1 -C \"node-v5.9.0\"\nI started doing node-v when io-js was a thing so there was a distinction; however, it probably isn't all that relevant anymore.\nIt might be best to make the default either \"v\" or \"\". I'm happy to hear some suggestions and then based on feedback make the appropriate change.\nWhatever feels like the most unsurprising default is what it should be.\nThe line in question is:\nhttps://github.com/direnv/direnv/blob/ff51d5fb3d4ee32a0a52a7e98c2697c62b3bb10f/stdlib.sh#L477\n. So, I should have realized why you are even doing this when you are already using nvm which itself supports loading .nvmrc files. I'm guessing you are annoyed by having to manually type nvm use manually?\nIf that is the case, maybe you can add the following to your .envrc file:\nif [[ -f .nvmrc ]]; then\n  nvm use\nfi\n. Also, if you are wondering why one wouldn't just use nvm (I do not), then ping me and I'll tell you why I don't use it.\n. > @wilmoore please do, it's always interesting to hear people's opinion.\nI kinda wanted to avoid openly disparaging someone's work, especially given it's a free too and the author works on it in his free time; however, you've asked so I will answer.\nThe short and sweet answer is that I feel it is unnecessarily opinionated and has subtle but unexpected (annoying) behavior. For example, it will actually refuse to work if you have certain legitimate npm configurations enabled. Also, in trying to use --reinstall-packages-from I've found it to be a bit obtuse.\nFor me, the cons outweigh the pros. I've spoken to other developers about it and some feel the pros are worth it. For me, the pros I have replicated by using direnv which is unopinionated and minimal and I use it for other language. For someone that isn't even invested in NodeJS, probably should just install the latest version with homebrew and not worry about it.\nI outlined earlier how to install node versions via curl. I more recently wrote and started using wilmoore/nodejs-install to install NodeJS versions which is just a slightly nicer wrapper around curl. It's super minimal and I sometimes feel like I don't even need it, but the one nice thing is that it lets you list the installable versions of node which is sometimes handy.\nI also have tried using n a few times and each time I decided it wasn't worth it. Both nvm and n have some really surprising behavior which always makes me question why I installed them in the first place.\nHere are some links which will point you to some of my gripes:\n- Using literally any of the npm path configuration options will conflict with nvm, which needs to retain control of those.\n  - https://github.com/creationix/nvm/issues/692#issuecomment-81402312\n  - SEE: https://docs.npmjs.com/misc/scripts#best-practices\n- that's the sort of thing that nvm will forcibly unset in the future\n  - https://github.com/creationix/nvm/issues/427#issuecomment-78004590\n  - SEE: https://docs.npmjs.com/misc/scripts#best-practices\n- .npmrc prefix override nvm\n  - https://github.com/creationix/nvm/issues/606\n- How do you get changing a directory to switch to the .nvmrc just like rvm does?\n  - You don't, not automatically.\n    - http://stackoverflow.com/questions/27425852/what-uses-respects-the-node-version-file/29545541#comment54722679_29545541\n- I've only had and seen problems with nvm.\n  - https://github.com/sindresorhus/module-requests/issues/6#issuecomment-115020377\n  - https://github.com/sindresorhus/module-requests/issues/6#issuecomment-192769444\n. > Interesting. That's generally the same conclusion I had in regards to ruby version managers (and lead to this tool).\nIndeed. I've bounced around a few different ruby version managers as well. I even wrote one and threw it out eventually :)\n\nFor ruby I use ruby-install that puts different version of ruby inside of ~/.rubies and then direnv for the version switching.\n\nYup, same here.\n\nAdding your nodejs-install method to the wiki would be helpful to others I believe.\n\nI was thinking about it. I was hoping to clean up the docs a bit to make installing easier and potentially setup an actual brew tap so you don't have to install via a URL.\nThat being said, I'll go ahead and add it and hopefully I'll do that cleanup soon.\n. :+1: \n. Good catch. I think we can correct this with sort -r alone. I'll try to get a PR out when I have time to look at this closer.. @mdawaffe - the following list is what I get when I run ls $NODE_VERSIONS locally:\nnode-v0.10.36\nnode-v0.12.17\nnode-v0.12.18\nnode-v0.12.2\nnode-v0.12.7\nnode-v0.9.0\nnode-v4.2.2\nnode-v4.3.0\nnode-v4.3.2\nnode-v4.7.0\nnode-v5.9.0\nnode-v6.9.5\nWhat's the ouptut from your patch given the above list (or similar)?\n@zimbatm - what's the best way to write a simple test to validate the above?. Somehow, I did not get the ping @zimbatm. I found this issue just searching around the issue tracker.\n@zaro - what's your $SHELL?. I dig the __prompt_install_nvm hooks. I wonder if the idea could be further extended to just handle the node binary installation directly without installing an installer?\nI don't have enough free time to explore this much further ATM, but ultimately, direnv has enough tooling to negate the need to support X number of installers (i.e. nvm, n, ...).\nIf kept to basic sh scripting, one would need only install direnv and create an .envrc. to have a working Node.js environment.. ",
    "mdekstrand": "@zimbatm Yes, it's my understanding as well that %APPDATA% is the appropriate location. Possibly the local version (instead of roaming), depending on whether the files direnv stores in this directory are intended to be portable across machines with roaming profiles.\n. For PowerShell, it looks like worst-case a custom Prompt function could look up the direnv stuff, and then repeat the default prompt behavior: https://technet.microsoft.com/en-us/library/hh847739.aspx\nA quick search isn't revealing any other kind of hooking capabilities, but since the prompt is generated by running a function, that's a natural place to do it.\n. @zimbatm I'm not sure at present. For one thing, I do not know any Go. I have also been considering implementing DirEnv's core functionality directly in PowerShell.\nI am very interested in having something like direnv in PowerShell, and am willing to do some work to get it. So far, have mostly just been trying to document what I know or learn while investigating whether it was already supported, to help whoever does eventually implement it.\n. If Bash is an internal requirement, it seems to me that it'd likely be better for direnv to focus on supporting Unix-like environments (Cygwin, MSYS, etc.) and for a separate project to enable similar functionality in native PowerShell.\n. ",
    "staxmanade": "Hey All,\nI'd be interested in this on windows as well... Not sure if it helps, but wrote a custom cd command in PowerShell which give it some fun features. Maybe this could be used as an example on how to hook into the directory changing...\nCode here: https://github.com/staxmanade/DevMachineSetup/blob/master/GlobalScripts/Change-Directory.ps1\nSome blog posts describing the features here, here, and here\nAlso, not sure if I have time to work on it as I spend more time in Mac than windows - but if I jump on windows and run into some time I'll see what can be done.\n. ",
    "mcandre": "+1\n. > Would a dependency on Windows Subsystem for Linux be acceptable\nFor now, sure! Note that some users configure Git Bash, Cygwin, MSYS, MinGW, and other environments, so testing against bash in these environments would also be helpful.. Ah, I think I understand how this works!\n. Eh, good enough for now, thanks for the tip!\n. Works on my machine tm\n. Agreed, Docker Machine is probably not responding to SIGINT.\n\nhow do I get access to the ~/.bashrc.d/direnv files?\n\nOn my systems, I soft link certain bash configs into a directory, like https://github.com/mcandre/dotfiles/blob/master/.bashrc.d/docker-machine.sh -> ~/.bashrc.d/direnv , in order to easily enable/disable my bash configs without requiring comments. (I like to version control my bash configs but leave the enabling/disabling of particular snippets to the individual machine in question.)\n. I get a similar error when using direnv 2.11.3. Tried both 64-bit and 32-bit direnv, with a Git Bash context.\nIf I use a blank .envrc, or a .envrc with 100% commented out code, my Git Bash shell works fine.\nIf I try to source rsvm from .envrc, then the resulting Git Bash shell environment can no longer execute commands. ls, which, and type all complain about missing paths, due to how direnv mangles paths when run in a cygwin environment.\nOne way to help alleviate this, is for direnv to determine whether it is running in a cygwin/unix/linux/mingw/msys/Git Bash/Windows Subsystem for Linux context vs. a native Windows/Command Prompt/PowerShell context.\nIf uname -a matches MINGW*, direnv is running in a cygwin context, and should take care to use cygwin (Unix-style) paths. If uname -a does not match MINGW*, direnv is likely running in another Unix-like context, and should still use Unix-style paths. Finally, if uname is not found, direnv is likely running in a Windows context, and should use Windows-style paths.\nThere are plenty of other ways to distinguish environments, but uname is especially helpful as an environment determinant, because it does not rely on any particular shell interpreter, so it can be used in Git Bash, Windows Subsystem for Linux bash, zsh, ksh, posh, Command Prompt, PowerShell, etc. So even the most ridiculously custom setups can still reliably distinguish between Unix and Windows pathing with the same command.\nA detection scheme like that would go a long way toward resolving compatibility issues for direnv across Unix, Windows, and cygwin environments.. ",
    "petemounce": "If this is still up for grabs, and no-one else is actively working on it... I know both powershell and enough golang to be dangerous, and would be prepared to test my own work on Windows 10 and Windows Server 2016. Would PRs on that basis be welcome? No promises on timeframe.\nI'm not sure how to set things up to prevent them from rotting with regressions on further changes, however - I see travis CI is set up to produce releases, but I didn't see any configuration in it to run tests, and I noticed both various _test.go and what looks like an integration tests directory. Is there a contributing guide that someone could point me at?. Not a clue, never used it. Will have to see :). Would a dependency on Windows Subsystem for Linux be acceptable, to provide bash? I would think to look into that, first, as the easiest way to satisfy the dependency, if it also works of course.. ",
    "klauern": "\nIf this is still up for grabs, and no-one else is actively working on it... I know both powershell and enough golang to be dangerous, and would be prepared to test my own work on Windows 10 and Windows Server 2016. Would PRs on that basis be welcome? No promises on timeframe.\n\nAny progress made on this front?  I know that with PowerShell Core, this might be an easier to approach problem on CI/CD environments, instead of having to spin up a separate Win10/Server 2016 instance.. ",
    "f0ff886f": "@zimbatm does direnv work natively in Powershell for you now? How did you solve the incorrect config directory issue, and how do you export variables in .envrc in the JSON case?. OK, understood. I was under the impression this worked for someone :) I'm trying to get it going but its proving difficult to just get the basic functionality of the config file working. If I get somewhere I'll report back, its an awesome tool and would help me a lot.. Just an update, I've followed the note here to configure DIRENV_CONFIG https://github.com/direnv/direnv/issues/442, and now at least the configuration errors are gone.\nHowever with your script it still doesn't seem to do much, and I'm not sure even how to start debugging it.\ndirenv dump json shows me output of all my environment vars, but if I do a direnv export json I get:\n/bin/bash: \"C:/Users/Matt/scoop/apps/direnv/current/direnv.exe\": No such file or directory\n/bin/bash: source_env: command not found\n{}\u001b[31mdirenv: error exit status 127\u001b[0m\nAm I missing something in the PATH for it to find source_env? Also, is the proper format for .envrc always export FOO=bar regardless of the actual user shell? Or do we need to adapt the commands in .envrc to be shell-native (it is a bit confusing the connection between direnv, bash, and my shell, apologies!). direnv exec path C:/Users/Matt/scoop/apps/direnv/current/direnv.exe\nDIRENV_CONFIG c:\\Users\\Matt\\AppData\\Local\\direnv\nDIRENV_BASH C:\\Windows\\system32\\bash.exe\nLoaded RC path C:\\swap\\gitlab\\tools\\.envrc\nLoaded RC allowed false\nLoaded RC allowPath\nFound RC path C:\\swap\\gitlab\\tools\\.envrc\nFound watch: \".envrc\" - 2019-02-25T12:34:12+01:00\nFound watch: \"..\\\\..\\\\..\\\\Users\\\\Matt\\\\AppData\\\\Local\\\\direnv\\\\allow\\\\187ad1d5f0f77018f4d1f15a99b0fef7593e2cf601c12de809aa0e3dd4b4fe1e\" - 2019-02-25T12:35:16+01:00\nFound RC allowed true\nFound RC allowPath c:\\Users\\Matt\\AppData\\Local\\direnv\\allow\\187ad1d5f0f77018f4d1f15a99b0fef7593e2cf601c12de809aa0e3dd4b4fe1e\nI wonder if this could be a scoopism (its a package manager for Windows)\nI'll try without scoop today. I tried this without scoop packages (just put direnv.exe into my $env:PATH) with no change in behaviour: still get the source_env command not found.\nWhat are the requirements for direnv, a bash executable on the PATH? Any special versions? I'm using ArchLinux WSL which seems to be providing the bash command.. ",
    "phyllisstein": "\nThanks, this made my day.\n\nHah, well if I'm gonna be a big nudzh I like to be a big grateful nudzh.\nI added set -x to the beginning of the .envrc file above, which I otherwise left intact, unlinked the Homebrewed bash and gave it a shot. The output was a little bananas, so I put it in a gist here rather than clutter up the issue: https://gist.github.com/phyllisstein/6985a7abf13fa626e3d9. But here are the last twenty lines or so---hope you find a clue!\nbash\n+ for __zsh_like_cd_hook in chpwd '\"${chpwd_functions[@]}\"'\n+ typeset -f __rvm_after_cd\n+ __rvm_after_cd\n+ typeset rvm_hook\n+ rvm_hook=after_cd\n+ [[ -n '' ]]\n+ [[ -n /Users/danielsh/.rvm ]]\n+ source /Users/danielsh/.rvm/scripts/hook\n++ typeset old_rvm_verbose_flag old_rvm_debug_flag\n++ old_rvm_verbose_flag=0\n++ old_rvm_debug_flag=0\n++ typeset rvm_verbose_flag rvm_debug_flag hooks\n++ true rvm_verbose_flag:0 rvm_debug_flag:0 rvm_hook:after_cd\n++ [[ -n after_cd ]]\n++ hooks=(\"$rvm_hooks_path\")\n++ [[ /Users/danielsh/Code/CLMP/CLMP-Mongo/.rvm/hooks == '' ]]\n++ hooks+=(\"$PWD/.rvm/hooks\")\n++ _hooks_list=($(\n    __rvm_find -L \"${hooks[@]}\" -iname \"$rvm_hook*\" -type f 2>/dev/null\n  ))\n+++ __rvm_find -L '' /Users/danielsh/Code/CLMP/CLMP-Mongo/.rvm/hooks -iname 'after_cd*' -type f\ndirenv: error exit status 1\n. Yup! Pretty much, anyway; the default RVM installer now adds a test for the file:\nbash\nPATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting\n[[ -s \"$HOME/.rvm/scripts/rvm\" ]] && source \"$HOME/.rvm/scripts/rvm\" # Load RVM into a shell session *as a function*\nThat's towards the top of my .zshrc file, whereas direnv is at the very bottom, should that mean anything.\nHere's the output from those commands:\n``` bash\n% find -L '' /Users/danielsh/Code/CLMP/CLMP-Mongo/.rvm/hooks -iname 'after_cd*' -type f\nfind: ftsopen: No such file or directory\n% echo $?\n1\n```\nIt seems at least passingly odd that that find command is looking in the project folder for RVM's hook scripts, since they'd properly be in $HOME/.rvm/hooks (where I have after_cd_bundler and the two defaults, after_install_auto_gem and after_use_maglev, chmodded to be executable, if that helps any).\n. ",
    "doloopwhile": "I do not agree with \"to not resolve symlinks at all\". It break my usecase.\nAdding source_env ~/gocode-foo will be a boiler template,\nI think we should follow behavior of git command. git resolve symlinks.\n. I see.\nI like to suggest writing script directly in stdlib.go with multi-lined string literal.\n. I see. I would like to discard this PR.\n. ",
    "igorbernstein": "The current behavior is broken for me as well.\nI have a slightly different use case: I'm using direnv for deployment, with a directory structure of:\napp/.envrc\napp/releases/23456789\napp/releases/87654322\napp/current -> app/releases/87654322\nand I boot up the server with:\ncd app/current && direnv exec ./bin/run\nwhich fails with\ndirenv: loading ../../.envrc\n/bin/bash: line 133: ./.envrc: No such file or directory\nAlthough both approaches would work for me. I think that @zimbatm's take has the element of least surprise.\n. ",
    "aussielunix": "@zimbatm makes sense.\nThanks and that worked perfect.\nI know have per directory go-lang versioning just like the ruby example in the wiki.\nI'll add something to the Wiki about this.\n. ",
    "michaelmior": "@aussielunix Could you explain what you did to fix your problem? I don't see the info in the wiki.\n. I'm not using direnv actually, but I was having a related problem. That looks like it would work correctly though. Although did you mean use_go instead of use go?\n. ",
    "sknop": "I have another use case for an unload hook.\nI update my shell title when I enter a directory under direnv control:\necho -n -e \"\\033];In DirEnv\\007\"\nIt would be great if I could unset this when I leaving the directory again.\n. Resetting the shell title is exactly the use I am looking for. \n. Ah, did not think of using the DIRENV_DIR variable, just discovered that. Not a bad idea, I'll try that.\nThanks\n. ",
    "mattford63": "I have many dirs each has a code base for a different customer. I can launch the appropriate VPN/sshuttle session on entering the dir.  But I can't unload it again :-(\n. ",
    "PanisSupraOmnia": "I've got a case where this would be useful as well. In order to work on a Rails project that I'm part of, I need to run bundle exec rake sunspot:solr:start: when I enter the folder. However, once I leave that folder I'd like to bundle exec rake sunspot:solr:stop, because I don't need to leave the solr server running in the background taking up resources. Of course I could simply try to remember to stop it when I'm done with it, but that would kind of defeat the whole point of using direnv for this in the first place.. ",
    "aventurella": "Ah, I didn't consider the multiple shells entering the folder problem, aka using something like tmux would present this problem. I often run my unit tests from another shell session/pane and keep my git commands in another. That would definitely be multiple shells, and I see how the issue arises now.\ndefinitely a tricky thing to think about unless state is maintained somewhere.. blah... If the terminal crashes, the state file would effectively be inconsistent.. MORE BLAH!\nTough problem.\nWhat does smartcd do I wonder. They have enter/exit hooks, curious how they handle the same problem or if they even bother and just leave it up to the user to sort out.. ",
    "irontoby": "Hi @zimbatm, I've done some more digging in to this and the problem is much more nuanced (FWIW I'm using Bash 4.3.11 on Ubuntu 14.04)\nSo, Bash does indeed clear the hash when PATH changes. The problem is that I'm adding ./bin to my path using .envrc in each of my Rails directories. Then I switched directories directly from one of these directories to another, and so my PATH never changed (it still started with ./bin: exactly as I told it) but it was hashed to the wrong place.\nFurthermore, in my first Rails app, I didn't have a copy of rails in bin, so it got hashed to my \"global\" rails. Then when I switched to the second one, it was still picking up the global instead of my local one as I wanted.\nSo this really isn't a problem with direnv at all, because using a period in the PATH is screwing up the hashing (I'm still a bit surprised that bash doesn't account for this; maybe zsh does though?) However direnv does seem to exacerbate the problem, or at least make it easier for us to get ourselves into trouble! (I'm sure you're aware that the Rails spring documentation specifically directs users to use direnv to add ./bin to our path).\nSo it seems that maybe some user education is the proper thing here :smile: Thinking about this further, I think it would be better to add $PWD/bin to the path instead of ./bin, do you agree? (Because then it will resolve to the correct dir right when it's set, with the added benefit it will still work in \"deeper\" directories, whereas ./bin doesn't).\nI suppose direnv could also warn users or clear out the hash if they switch into or out of a directory which sets $PATH to contain a period, or always clear the hash when PATH is set regardless, since I'm guessing people will still continue to run into this.\n. Ah no, I wasn't aware of PATH_add bin. I'll make a suggestion to the Rails wiki that they update their documentation to use that. I'll go ahead and close this issue since this really isn't a problem with direnv, thanks!\n. Nope, no luck. Knowing that it's not really tested/supported on Windows helps though; if I get a chance I'll try to dig in a bit more and figure out whether it's something that can be worked around. Thanks!. ",
    "ghickman": "@zimbatm \u2013 Thanks for the merge. Yes I did mean layout_python3.\nA configurable python layout like you mentioned would be great, I use a number of different Python versions and being able to set them in direnv would be great!\nUpdating your Python version typically breaks your virtualenvs if you're using a system Python because the paths to your Python change. IIRC using Homebrew on OS X can fix this.\n. @zimbatm \u2013 This looks like a great change to me! I've made another PR for you in #137 which I think will affect this one too.\n. @zimbatm \u2013 I've added the relocatable call back to the Python 2 version but left it out of the Python 3 one.\nIn testing [on OS X] I've found creating a Python 3 venv with a virtualenv bin installed under Python 2 causes global site-packages bleed when subsequently calling the --relocatable flag but this is not the case with a virtualenv binary installed under Python 3.\n. @zimbatm \u2013 Not at all, apologies for letting the merge get a little out of hand!\n. ",
    "nvie": "Removing the --relocatable option seems to be a good idea under all circumstances. There are numerous issues with relocatability of virtualenvs \u2014\u00a0in my experience they hardly work in practice. The virtualenv docs seem to mention this as well and hint at the option become deprecated: http://virtualenv.readthedocs.org/en/latest/virtualenv.html#making-environments-relocatable.\n. I also added f79c226edb81e05f69d776390173339fb3e7aa29, which should make the environment completely compatible with pipenv shell itself.. Nope! Let's have it, cheers \ud83c\udf7b !. @zimbatm Thanks for the quick merge. Would you be able to push out a new release that includes this?. That command does not exist. I'm not sure if invoking that would work here, since it would have to decide between Python 2 or Python 3 on the user's behalf.\nDo you think dropping that message and then returning with a 0 exit code is better? I noticed that direnv keeps throwing the error after every command you type if you're stuck in this state.. Oh, much nicer \u2014 TIL about log_error.. \ud83d\udc4d . ",
    "mashiro": "Oh, I did not know this issue.\nOK. I rewrite it to use the -g option.\n. ",
    "terut": "@zimbatm I got new version on Arch Linux, now. Thanks.\n. ",
    "rodrigotassinari": "great, thanks! :+1: \n. ",
    "reconbot": "you are 100% correct, thank you\n. ",
    "bbense": "I made a first pass that appears to be working. A lot more testing is required and I'm not sure about the quoting, but I did use the hook in tcsh and it set/unset some variables. It relies on the tcsh precmd alias, so it's only tcsh. I'm not ready to submit a pull request just yet, but if others want to try it. \nhttps://github.com/bbense/direnv/tree/tcsh-support\n. To be honest, I saw that the default ShellEscape was putting a $ in front of the value and that the fish version wasn't so I just cut'n'pasted from shell_fish.go to see what would happen. It worked, but I haven't had time yet to do any detailed testing. I only spent about 30 mins on this during lunch, and I'm fairly surprised it worked at all. I wouldn't make any changes based on my code just yet. \n. I've got a direnv_test.tcsh that passes all the scenarios but special_vars, in that case it dies with \nmessage  about needing to run direnv_allow no matter how many times I run direnv allow in the directory. Is this an important test? \nHere is the test code \ncd $TEST_DIR/scenarios/special-vars\n   direnv allow\n   echo \"Testing special-vars\"\n   setenv DIRENV_BASH which bash\n   setenv DIRENV_CONFIG foobar\n   direnv_eval || true\n   test -n \"$DIRENV_BASH\"\n   test \"$DIRENV_CONFIG\" = \"foobar\"\n   unsetenv DIRENV_BASH\n   unsetenv DIRENV_CONFIG\n  cd $TEST_DIR ; direnv_eval\n. In regards to the hook issue overwriting precmd. Since there aren't functions in tcsh, there's no generically clean way to implement a hook that doesn't potentially overwrite a useful config variable. As far as I know the use of precmd is not widespread, most hooks are implemented by tweaking the prompt variable. \nOverwriting precmd is not great, but I think all the other possible solutions are much worse. \n. ",
    "907th": "This issue may have some relation to #106 \n. Oh, hopefully the problem disappeared today when I restarted my Mac :o)\nBTW I were solving the issue by running direnv reload once right after tmux start\n. @zimbatm Thank you!\n. ",
    "toao": "Thanks for the fast answer, your proposed solution works as expected. I've created a PR in #149 \nA little background on when this may be useful: My current use-case is a multi tenant rails app that switches certain settings based on an env var. During development it should be possible to switch that by typing in an shortcut (and not by setting the env var manually). This is kind of legacy logic currently located in an .rvmrc file. The aim is to separate rvm specific settings from env settings.\n. I'm not too familiar with go and testing go, but I'll have a closer look and add some tests asap.\n. ok, makes sense. At least for me everything works as expected, with and without calls to read within different .envrc files.\n. ",
    "jc00ke": "Hmm, looks like FOO wouldn't get set regardless because there's a colon in it... that's a bummer. fish-shell/fish-shell#1374\n. Ah yeah, I had just added a symlink.. ",
    "zanchey": "The error message shows that fish is trying to run baz=2 as a separate command; the problem is that the & is insufficiently escaped. Not sure how to do that - I'm just here from the fish ticket.\n. ",
    "genehack": "Ah, I was thinking this was something that would need to be done at a 'tool' level, not at the 'stdlib' level. I'll play around with adding it to the ~/.direnvrc and see if I can get that to work. \nThanks!\n. So, thinking about this more, I think this is less a new command, and more like a global configuration flag affecting the code in https://github.com/zimbatm/direnv/blob/master/cmd_export.go. \nAnother (probably better) way to implement what I want would be to have direnv hook $SHELL take an option flag, like --load-all, which would cause it to output a different subcmd in the hook, something like direnv export_all $SHELL.\nEssentially, I want a global way to always force multiple .direnv files to \"layer\" upwards, without having to put source_up() in each one of them. \n. ",
    "sykesm": "@zimbatm I don't know the failure modes of direnv so it's hard for me to say. If direnv export failed, I would probably still preserve the previous exit status but indicate the failure with messages to stderr.\n@pwaller I'm not sure why it doesn't manifest for you or when it started manifesting for me. I only dug into it yesterday when I had a command fail and noticed I didn't have a visual indication of the problem in my prompt.\nAs a point of reference, I'm running Mac OS X 10.10.1 with GNU bash, version 3.2.53(1)-release (x86_64-apple-darwin14) but I see similar behavior under Linux with bash 4:\n```\n$ bash --version\nGNU bash, version 4.2.24(1)-release (x86_64-pc-linux-gnu)\nCopyright (C) 2011 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nvagrant@precise64:~$ prompt_command() { export PS1=\"[rc=$?]\\$ \"; }\nvagrant@precise64:~$ export PROMPT_COMMAND=prompt_command\n[rc=0]$ true\n[rc=0]$ false\n[rc=1]$ _direnv_hook() { eval \"\"; };\n[rc=0]$ export PROMPT_COMMAND=_direnv_hook;prompt_command\n[rc=0]$ true\n[rc=0]$ false\n[rc=0]$ \n```\nThe use of eval \"\" simulates the eval of direnv export bash when there are no environment changes.\n. ",
    "miketheman": "This has been bugging me for over a year now - and I only found the source of it this morning.\nI opened a PR with the suggested solution after building and testing it locally. It makes my bash prompt happy again.\n. Hit this today. The workaround didn't work for me - since it appeared also when not in a direnv-enabled directory.\nIt appears the RVM devs have merged a patch to HEAD that appears to solve this for me.\nI ran rvm get head and this problem goes away.\n. ",
    "ionelmc": "Ok, direnv use different hooks for sourcing the env vars, does that mean it rolls them back? \nAlso, doesn't it mean direnv is slower because it need to spawn 2 additional processes (one for go process, and one for the envrc)?\n. How does the env cleanup work?\nMind you, I'm not critiquing the tool, I just want to understand it :)\n. Thanks. It would also be useful to have all this info in the readme in an\n\"Internals\" section I think.\nThanks,\n-- Ionel Cristian M\u0103rie\u0219, blog.ionelmc.ro\nOn Fri, Feb 20, 2015 at 5:08 PM, zimbatm notifications@github.com wrote:\n\nWhen an environment variable gets changed the original version is stored\ninside of the DIRENV_DIFF environment variable. This is what's used to\nrestore the original version.\nIf you want to get more details into the heuristic, this is where all the\nmagic is happening:\nhttps://github.com/zimbatm/direnv/blob/master/cmd_export.go\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/zimbatm/direnv/issues/159#issuecomment-75252688.\n. \n",
    "ssbarnea": "Keeping a comparison with other tools would be really useful as it would allow people to take the better bet ;). @zimbatm Apparently this feature does not work on version 2.16.0 on Linux, even after setting this to .bash_profile:\n```\nexport DIRENV_ALLOW=$HOME\neval \"$(direnv hook bash)\"\n```\nI checked and the environment variable is set but when I cd to a a subfolder which contains the .envrc, I still get:\ndirenv: error .envrc is blocked. Run `direnv allow` to approve its content.\nRunning manually direnv allow would be useless as these .envrc files are generate during build and the who point was to auto load them when the user is switching to the build folder.\nStill, I used the same feature on MacOS without problems. \nAlso this feature is too important to be missed from mentioned when doing \"direnv help\".. @zimbatm I am really interested about the auto-loading option, as it looks like a way to solve https://stackoverflow.com/questions/44585042/how-to-autoload-environment-variables-specific-to-one-file-path\nMaybe you also have some ideas on how to address that issue. I should mention that all I need to save are environment variables. Maybe there is a way to have \"safe\" files that do not need approval.. I am really looking forward to see a way to whiletlist an entire path.. I conclude that I had a similar bad experience getting direnv on centos, where no rpm was available and after checking the code running make, I got a cryptic message:\n$ make                                                                                                                                                                                                         go fmt\ncan't load package: package .:\nstdlib.go:1:1: expected 'package', found 'EOF'\nmake: *** [direnv] Error 1\nThe make file presence is really appreciated but I think we need to make it a little bit more intelligent so it would figure out what needs to be done.. @zimbatm As you can observe at the bottom of the page there are no builds for EPEL, which means that people would be able to easily install direnv on EPEL enabled systems (Centos and RHEL).\nThere is no problem with Fedora (28), I can confirm that yum/dng install direnv works as expected. We only need to enable the same for RHEL and CentOS, which can be done by including direnv in EPEL repository.\nI will try to help on this as I do not fully know the best way to do this. I will let know know as soon I find out. . @domcleal Any ideas regarding steps to bring direnv to EPEL?. I  knew it was complex but this graph makes it clear, and this is only about bash.. @zimbatm I was hit by this bug today, can you please make a new release? This bug alone seems like a good enough reason for a new release.. Debian systems already have ~/.local/bin in their default user PATH, and for RPM based ones there is https://fedoraproject.org/wiki/Changes/UserPathPrioritization proposal for making it match Debian order. I only hope it will receive all votes to pass on https://pagure.io/fesco/issue/1913 -- Once it the door is open to implement same change it Red Hat and CentOS.. Well, not but I hope that direnv doesn't want to join the Java select league. As far as I know, java is the only cli executable not following the --version pattern, as they use java -version to return the version... no more comments here ;). @zimbatm There is a lot of work to be done on the installer, how about creating a branch for so we can merge to that breanch in small increments, also allowing multiple people to contribute to it. Once you are pleased with the installer you can merge it to master and closet he feature branch.\nPS. Installer will never really be complete as we will always find one platform or use case where it fails but this does not make it less useful.. If someone clones the repository and tried to build, they will fail. Same happens if they try to build directly using go build or if they try to use make to build.\nThis is because go language has some requirements regarding the location and layout of the source code.\nIdeally the Makefile should take care of this and allow user to build regardless of the location where the direnv source code was cloned. Sadly it does no do this at this moment.. ",
    "critmech": "helps to be in the right browser window, doesn't it?\n. ",
    "p0deje": "Thanks for a quick merge! Looking forward for a new release!\n. ",
    "tfaoro": "Well, aren't I a noobie's uncle.\nThanks!\n. ",
    "hartzell": "The details are shell dependent, but generally the \"module\" command that a user types is something like an alias or function that runs a command (\"modulecmd\") that translates the shell-agnostic module file into shell specific commands to manipulate the environment and that output is then eval'ed in to the running shell.  The original modules system (John Furlanit, et al.) is a bit long in the tooth, apparently Lmod is the thing to use in this space.\nThat should all sound very familiar to you.\nI think of load and unload as a pair of commands and it didn't occur to me that when direnv resets the environment when on moves out of a directory it resets everything.  That's not quite the same thing as running module unload, but a quick test suggests that the end result seems to be the same (or close enough).  Since the list of loaded modules is stored in the environment, even that seems to be restored.\nHmmm.  I guess that we can close this....\n. Well, so far I haven't done anything beyond adding the line \nmodule add NAME_OF_A_MODULEFILE\nto my .envrc.  As you pointed out, things seem to be cleaned up appropriately.  I still feel a little bit like I'm getting away with something, but it seems to work, so....\nHere's an example that loads our \"apps/perl-modules/5.18.4\" module, which sets up some stuff itself and then cascades to load its dependencies (e.g. Oracle setup):\n% cd trunk/\ndirenv: loading .envrc\ndirenv: export +ORACLE_SID +PERL5LIB +PINTO_HOME +TNS_ADMIN ~LD_LIBRARY_PATH ~LOADEDMODULES ~MANPATH ~ORACLE_HOME ~PATH ~_LMFILES_\n% cat .envrc\nmodule load apps/perl-modules/5.18.4\n% cd ..\ndirenv: unloading\n% printenv TNS_ADMIN\n. Ah.  Yes, there is a standard configuration that one uses to set up the environment modules system.\nThe details very depending on which generation of the modules system one is using, e.g. the original or Lmod and vary depending on how it is installed onto the system.  Each system should have instructions.\nWithout going into the details of how it is set up here at work, one ends up with something like this:\nmodule () {  eval `/yada/yada/hey/bin/modulecmd bash $*`\n}\nand running e.g. module load apps/something spits out the appropriate set of export statements which get eval'ed into the current shell environment.\nBut, I've done nothing special to get it to interact with direnv.  So far it's just working.\n. ",
    "peterfpeterson": "I just added a version of this to https://github.com/direnv/direnv/wiki/Python#-anaconda. On many linux systems, you can install multiple versions of python and associated tools side-by-side with lots of symlinks between them. For example, on fedora 26:\n python -> python2 -> python2.7 -> python2.7.4\n python3 -> python3.6 -> python3.6.3\nSimilarly, virtualenv has lots of versions with links. The --system-site-packages option adds a directory tree in your virtual environment to install extra things into (via pip), but will still fall back on the site-packages for the python that virtualenv was built with. What it boils down to, is that --system-site-packages should only be used to create a python environment for the python version that the particular virtualenv runs in.\nThe way that I wrote layout_python2 and layout_python3 will fall back to system defaults for virtualenv if the python version specific version isn't found. I think this change really only affects people running in the system/virtualenv hybrid mode which is only available using this one flag. To be more explicit: I install numpy with a system package, and with this flag I don't need to reinstall it in the virtual environment.\nI'd add this to the documentation, but it is a little unclear if it really is duplicated in a bunch of places, or it just seems like that.. @MemoryReload This is a change to layout python. I don't quite follow what you are asking.\n@zimbatm The usage of this (via layout python2 or layout python3 is to automatically detect the partner virtualenv command. I made the assumption that nobody would specify the virtualenv command without specifying the python command. You're pointing out that it is a bad assumption. The current code assumes that the python virtual environment command is virtualenv as well. I'll change it to supply the virtual environment command via a flagged option, or looking falling through a list of virtualenv then venv.. --system-site-packages only works if the version of python you want in your environment is the same version as the one at the system level. I normally create two environments, one with python2 and one with python3. Fedora currently has side-by-side installs of many packages so it works out by changing which virtualenv command you use.. I'm suspicious that there is a better way to do this with a for and break.. I agree totally with simplicity being best. I didn't even think of injecting values in .envrc. Since the python version is an optional argument already I only added injecting VIRTUALENV_BIN. There are also a few more checks to give the user better error messages when something goes wrong.. I'm closing this because #376 will solve the issue better.. Unfortunately, the environments are universal to the combination of installation and user of conda. They have docs here. virtualenv sandboxes much better.. I just tried this out and it works as it did before. Merge when you are ready.. Generally I prefer named options over having to remember the order. It would be a good upgrade to the other functions as well, but would break almost everyone's usage of direnv. I'm suspicious that would not make any fans. \nI suggest that the various layout_python* use this new function to reduce repetitive code. The versioned ones could be something like\n```shell\nlayout_python2() {\n  layout_virtualenv -p python2 \"$@\"\n}\nlayout_python3() {\n  layout_virtualenv -p python3 \"$@\"\n}\nand the vanilla one becomes (haven't tested)shell\nlayout_python() {\n  local python=${1:-python}\n  [[ $# -gt 0 ]] && shift\n  layout_virtualenv -p $python \"$@\"\n}\n```\nThis would also make it clearer that direnv's \"standard\" way to work with python is virtualenv.. I just tested this out with an existing .envrc whose contents are\nshell\nlayout python2 --system-site-packages\nI had forgotten that one has to escape the extra arguments to virtualenv so they get through getopts. Specifically, the layout needs to now be\nshell\nlayout python2 -- --system-site-packages\nwhich I think is just something that needs to be added to the documentation of direnv in general if the move is towards named arguments.. I might be the only person to give options to virtualenv other than the python version. The bigger concern is that I don't think people realize that they need to tell bash to stop parsing arguments. It is really just a documentation issue.. Because of the way I have it installed (built on a separate system and copy the binary), I don't have the man pages installed. direnv --help doesn't have the details for the individual plugins/modules. Therefore, I tend to use the online docs at http://direnv.net or https://github.com/direnv/direnv/wiki. If that fails, I look at the source code on github.. ",
    "kiddrew": "I've tried running rake directly from the command line and using guard, which I think is the same thing.  neither works.\n. I'm not getting an error - it's just not using the file, so the environment variables aren't getting set.\n. Found my issue - I missed a setup step.  False alarm.  User error.  =)\n. ",
    "gerhard": "I clearly didn't understand direnv well enough. I've explored the codebase a bit and this is what I've settled on short-term:\nsh\n! [ -f ../.envrc ] || source_env ..\nI'm using [ ] which is a test alias and will work in every POSIX shell. [[ ]] only exists in bash.\nI'm using || instead of && so that it plays nicely with the errexit option (a.k.a. set -e).\nLong-term, I would like source_env to handle this. It would make .envrc files leaner and would be more user-friendly.\nGoing to convert this into a PR.\n. All clear, PR attached.\n. :+1:\n. ",
    "siddharthist": "If direnv only loads .envrc files, then the problem must be on my end. Thanks for clarifying its behavior!\n. ",
    "camelpunch": "I should hope so.\n. ",
    "JeanMertz": "Also: symlinking to an existing (and allowed) direnv still wants you to allow the symlink, even though its contents are already alowed somewhere else. Is this a bug?\n. Wow, sorry for not commenting on this in the last couple of years \ud83d\ude48 nice to see this being implemented, awesome \ud83d\udc4d . ",
    "juliantaylor": "ah that makes sense.\nthank you\n. ",
    "hdavidzhu": "Sorry this is completely my fault. Even though Golang was listed as a dependency it completely went over my head.\n. ",
    "DanielWright": "Yup, that works great! I hadn't thought of that approach. Thanks for the quick response.\n. ",
    "ches": "If this isn't acceptable as a patch, I'll add a tip for the tool usage with gb to https://github.com/direnv/direnv/wiki/golang\n. No worries, can totally understand your position for this case and ~/.direnvrc would be just fine for me as a personal solution, thanks for your response. I figured it might not be acceptable at this point but would still be worth making the proposal so others might find the PR by search, and could readily use it in  their ~/.direnvrc as well.\nThe Go 1.5 \"vendor experiment\" is actually becoming more and more like gb's exact approach as it gets refined, so this might become relevant again when the official tools finally bless a supported workflow consensus.\n. Added the wiki FYI: https://github.com/direnv/direnv/wiki/golang#using-the-gb-build-tool\n. ",
    "allomov": "This is very nice, thank you!\n. ",
    "nabramovitz": "I used brew to install direnv and go.   I direnv is at version 2.7.0 and go is at 1.5.2.\n. ",
    "norman-abramovitz": "go get github.com/direnv/direnv\ntry running direnv from the go bin directory without the bash scripts being updated yet\ndirenv\nfatal error: runtime: bsdthread_register error\nruntime stack:\nruntime.throw(0x2110e0, 0x21)\n    /usr/local/Cellar/go/1.5.2/libexec/src/runtime/panic.go:527 +0x90 fp=0x7fff5fbffb00 sp=0x7fff5fbffae8\nruntime.goenvs()\n    /usr/local/Cellar/go/1.5.2/libexec/src/runtime/os1_darwin.go:73 +0x8d fp=0x7fff5fbffb28 sp=0x7fff5fbffb00\nruntime.schedinit()\n    /usr/local/Cellar/go/1.5.2/libexec/src/runtime/proc1.go:60 +0x83 fp=0x7fff5fbffb70 sp=0x7fff5fbffb28\nruntime.rt0_go(0x7fff5fbffba8, 0x1, 0x7fff5fbffba8, 0x0, 0x0, 0x1, 0x7fff5fbffcb0, 0x0, 0x7fff5fbffcf1, 0x7fff5fbffd08, ...)\n    /usr/local/Cellar/go/1.5.2/libexec/src/runtime/asm_amd64.s:109 +0x132 fp=0x7fff5fbffb78 sp=0x7fff5fbffb70\nupdated .bashrc and still the same erroneous  behavior as before\n$ cd ..\ndirenv: unloading\n$ ls\napp x\n$ cd app\nfatal error: runtime: bsdthread_register error\nruntime stack:\nruntime.throw(0x2110e0, 0x21)\n    /usr/local/Cellar/go/1.5.2/libexec/src/runtime/panic.go:527 +0x90 fp=0x7fff5fbffaf0 sp=0x7fff5fbffad8\nruntime.goenvs()\n    /usr/local/Cellar/go/1.5.2/libexec/src/runtime/os1_darwin.go:73 +0x8d fp=0x7fff5fbffb18 sp=0x7fff5fbffaf0\nruntime.schedinit()\n    /usr/local/Cellar/go/1.5.2/libexec/src/runtime/proc1.go:60 +0x83 fp=0x7fff5fbffb60 sp=0x7fff5fbffb18\nruntime.rt0_go(0x7fff5fbffb98, 0x2, 0x7fff5fbffb98, 0x0, 0x0, 0x2, 0x7fff5fbffca8, 0x7fff5fbffcbe, 0x0, 0x7fff5fbffcfd, ...)\n    /usr/local/Cellar/go/1.5.2/libexec/src/runtime/asm_amd64.s:109 +0x132 fp=0x7fff5fbffb68 sp=0x7fff5fbffb60\n/bin/bash: source_env: command not found\ndirenv: error exit status 127\n. Fantastic,  It worked without any fudging of the environment.\nkudos to you.\nsimple test case after build\n$ git status\nOn branch try-osx-fix\nYour branch is up-to-date with 'origin/try-osx-fix'.\nnothing to commit, working directory clean\n$ set | grep DY\n$ ./direnv\ndirenv v2.7.0\nUsage: direnv COMMAND [...ARGS]\nAvailable commands\nremoved remaining output lines\nCopied direnv to /usr/local/bin and then tried the failed cd command from before with making sure the kludge for setting DYLD_INSERT_LIBRARIES was removed.\n$ ls\napp x\n$ set | grep DY\n$ cd app\ndirenv: loading .envrc\ndirenv: export +GOPATH ~PATH\n$ cd ..\ndirenv: unloading\n. Yes, McAfee Endpoint Protection for Mac.\nI have seen those messages about anti virus software but the analysis shown for the anti virus relationship makes no sense for that to be true.  It is probably a side effect of the uninstall.\nThe variable DYLD_INSERT_LIBRARIES is a special purpose environment variable for the dynamic linker/loader.\nDYLD_INSERT_LIBRARIES\n          This is a colon separated list of dynamic libraries to  load  before  the  ones\n          specified  in  the program.  This lets you test new modules of existing dynamic\n          shared libraries that are used in flat-namespace images by loading a  temporary\n          dynamic shared library with just the new modules.  Note that this has no effect\n          on images built a two-level namespace images using  a  dynamic  shared  library\n          unless DYLD_FORCE_FLAT_NAMESPACE is also used.\nThis variable is optional based upon its definition.  \nRemember that even if I defined the variable it still failed when the shell hook function was called.  The login shell is loaded before that variable is set from the profile files, so the DYLD variable is not available.   The context for executing the hook is different from executing an user command.\nIf there was a reliable way to set the environment variable for all processes (use to be launchd.conf) then the problem would not have existed..\nIt makes more sense for the dynamic loader is using or testing for this DYLD variable incorrectly.    Remember this variable only makes sense when a program is launched.\nThe reason why external linking works is because it sets up those environment variables before using\nthe system linker/loader.\n. Again, Thank you for fixing the issue so quickly.   I really was not expecting that.    Sorry if my last analysis felt like a rant.  I did not mean it to feel that way. \n. ",
    "msabramo": "Ah yes. That makes sense.\n\u276f bash\nmarca@marca-mac2:~/dev/surveymonkey/smdevstack$ export DOCKER_HOST_IP=\"${${DOCKER_HOST#tcp://}%:[0-9]*}\"\nbash: ${${DOCKER_HOST#tcp://}%:[0-9]*}: bad substitution\nLooks like I need to find a more bash-friendly syntax. I'll check out the links you provided for bash and also for the direnv stdlib -- funny I've been using direnv for ages and never realized it had the stdlib. I reread the docs when I hit this issue and discovered it but like you said, I had overlooked it in the past.\nThanks for the quick response and for direnv in general. Awesome tool that I use every day!\n. Hmmm. It seems like bash supports the same basic primitives for string substitution as zsh, but with zsh it seems possible to do it in one comand. With bash, I had to do it in two steps for it to not complain.\nmarca@marca-mac2:~/dev/surveymonkey/smdevstack$ echo $DOCKER_HOST\ntcp://192.168.99.101:2376\nmarca@marca-mac2:~/dev/surveymonkey/smdevstack$ export DOCKER_HOST_IP=\"${DOCKER_HOST#tcp://}\"\nmarca@marca-mac2:~/dev/surveymonkey/smdevstack$ echo $DOCKER_HOST_IP\n192.168.99.101:2376\nmarca@marca-mac2:~/dev/surveymonkey/smdevstack$ export DOCKER_HOST_IP=\"${DOCKER_HOST_IP%:[0-9]*}\"\nmarca@marca-mac2:~/dev/surveymonkey/smdevstack$ echo $DOCKER_HOST_IP\n192.168.99.101\n. This Stack Overflow answer seems to explain why the one-line version worked in zsh but not in bash. \n. It seems like this works well:\nexport DOCKER_HOST_IP=$(echo $DOCKER_HOST | egrep -o '([0-9]{1,3}\\.){3}[0-9]{1,3}')\n. I went ahead and sent a PR to try to make it a bit clearer that the .envrc must be valid bash syntax:\nhttps://github.com/direnv/direnv/pull/200\n. Cool. I wonder if http://direnv.net/ could be updated to have this.\n. Awesome!\n. ",
    "oivoodoo": "Hi @zimbatm . \nCould you help to find out why direnv export json could not produce json exported variables?\n```\n\u279c  project1 git:(feature) \u2717 DIRENV_DEBUG=1 direnv export json\ndirenv: export:14:45:38 cmd_export.go:132: start\ndirenv: export:14:45:38 cmd_export.go:146: load config\ndirenv: export:14:45:38 cmd_export.go:151: loading RCs\ndirenv: export:14:45:38 cmd_export.go:156: updating RC\ndirenv: export:update:14:45:38 cmd_export.go:47: Determining action:\ndirenv: export:update:14:45:38 cmd_export.go:48: foundRC: &main.RC{path:\"/Users/oivoodoo/go/src/github.com/org/project1/.envrc\", allowPath:\"/Users/oivoodoo/.config/direnv/allow/b967f41afbd81a274d64c9a671abe1ab23651ce6ad2e219a8deb9b64d79a5dfd\", times:main.FileTimes{list:([]main.FileTime)(0xc42000b540)}}\ndirenv: export:update:14:45:38 cmd_export.go:49: loadedRC: &main.RC{path:\"/Users/oivoodoo/go/src/github.com/org/project1/.envrc\", allowPath:\"\", times:main.FileTimes{list:([]main.FileTime)(0xc42000b3c0)}}\ndirenv: export:update:14:45:38 file_times.go:127: Check: /Users/oivoodoo/go/src/github.com/org/project1/.envrc: up to date\ndirenv: export:update:14:45:38 file_times.go:127: Check: /Users/oivoodoo/.config/direnv/allow/b967f41afbd81a274d64c9a671abe1ab23651ce6ad2e219a8deb9b64d79a5dfd: up to date\ndirenv: export:update:14:45:38 cmd_export.go:65: no update needed\ndirenv: export:14:45:38 cmd_export.go:163: newEnv nil, exiting\n```\nThank you!\n. ",
    "glasser": "FYI I'm seeing something similar to this with emacs shells but haven't had a chance to work out why. One note is that for a workaround you can do unset DIRENV_DIFF DIRENV_DIR DIRENV_WATCHES instead of the direnv reload above. The advantage is that you'll still see any real direnv errors or output, without having to see the error that direnv reload prints when it's run outside of an envrc dir.. It would be helpful if the docs give an example of how to use the top-level options like bash_path.\n\nThe configuration is specified in sections which each have their own top-level tables, with key/value pairs specified in each section.\n\nmakes it seem like bash_path needs to be a full section rather than just a simple top-level option (if I'm correctly interpreting that as what it's supposed to be!). general? global?. (Not direnv maintainer, just a fan.)\nI'm surprised that the directions tell you to just clone anywhere. If you use go get github.com/direnv/direnv it will clone it into your GOPATH including dependencies and build it for you.. Do you mean that you allowed it before you edited it? You need to rerun allow whenever you edit it. . I'm not sure why the README doesn't explain this, but Go really wants you to put your checkout in a particular place. The easiest way to do this is, instead of doing a git clone yourself, just running go get github.com/direnv/direnv; it will put the source in ~/go/src/github.com/direnv/direnv (and download the dependency in question) and put the binary in ~/go/bin.\nNote that there are binary releases of direnv at https://github.com/direnv/direnv/releases; Go builds everything as a fully linked static binary so they are likely to just work for you (vs with shared library binaries where you download them and learn that you have the wrong libc on your system or whatever).. You can run go get anywhere. (I'm assuming you're on Go at least 1.8 which sets GOPATH to $HOME/go by default. If not you'll have to set that environment variable yourself first.). (You can get rid of the git clone you made; go get will do its own git clone.). If that succeeded, then you should have direnv in ~/go/bin. Add that directory to your PATH, or copy the file to somewhere else on your PATH.  (Or just download a binary release.). I can never remember the difference between .bashrc and .bash_profile. My bash_profile just sources my bashrc but that might be a bad idea. You can just put that line in a blank .bashrc and you should be fine.. @zimbatm posted an idea for this literally hours before your issue :)\nhttps://github.com/direnv/direnv/issues/320#issuecomment-388341274. fly.io and direnv.net fail for me too. And we use fly.io for something at my work and they had another similar issue earlier this week and didn't update their status page, so I wouldn't trust that too much.\nI don't think there's any action to take other than maybe contacting fly.io support.. Our issue was apparently specific to people in the SF area.. I contacted fly support (since we were in touch from Tuesday), they're on it.. FWIW this is definitely documented behavior, as per https://github.com/direnv/direnv/pull/200/files\n(Not a direnv developer, just a user.). It might be nice to add an explanation for why you might want to set this.. ",
    "ldeck": "Actually if I remove the 'v' prefix from my .nvmrc and export NODE_VERSION_PREFIX='v' it works okay.\nOf course it'd be nice if an .nvmrc file is located that the NVM_DIR is used or nvm which <version>.\n. One way to improve it would using nvm itself to resolve node. That would reduce the need for redundant  environment vars too. e.g., say I have the following versions of node installed:\n08:54 $ nvm ls\n        v0.12.2\n->       v5.6.0\n         v5.7.1\n         v5.9.0\ndefault -> 5.6 (-> v5.6.0)\nnode -> stable (-> v5.9.0) (default)\nstable -> 5.9 (-> v5.9.0) (default)\niojs -> N/A (default)\nnvm can resolve the exact location for you like this:\n$ nvm which 5.9\n/Users/ldeck/.nvm/versions/node/v5.9.0/bin/node\n$ nvm which 5.7\n/Users/ldeck/.nvm/versions/node/v5.7.1/bin/node\ni.e., if you find an .nvmrc file, and nvm is on the PATH, then use nvm to resolve node rather than find. e.g.,\n```\nuse_node() {\n  local version=$1\n  local via=\"\"\n  local node_wanted\n  local node_prefix\nif [[ -z $version ]] && [[ -f .nvmrc ]]; then\n    version=$(< .nvmrc)\n    node_prefix=$(dirname $(dirname $(nvm which 5.7)))\n  else\n    if [[ -z $NODE_VERSIONS ]] || [[ ! -d $NODE_VERSIONS ]]; then\n    log_error \"You must specify a \\$NODE_VERSIONS environment variable and the directory specified must exist!\"\n    return 1\n    fi\n    ...\n  fi\nif [[ ! -d $node_prefix ]]; then\n    log_error \"Unable to find NodeJS version ($version) in ($NODE_VERSIONS)!\"\n    return 1\n  fi\nif [[ ! -x $node_prefix/bin/node ]]; then\n    log_error \"Unable to load NodeJS binary (node) for version ($version) in ($NODE_VERSIONS)!\"\n    return 1\n  fi\nload_prefix \"$node_prefix\"\nif [[ -z $via ]]; then\n    log_status \"Successfully loaded NodeJS $(node --version), from prefix ($node_prefix)\"\n  else\n    log_status \"Successfully loaded NodeJS $(node --version) (via $via), from prefix ($node_prefix)\"\n  fi\n}\n```\n. ",
    "GertThiel": "Googling /bin/bash: shell_session_update: command not found only yields one remotely relevant result which does not help me.\n. direnv 2.7.0 installed using Homebrew\nThe .envrc reads\n``` sh\n!/bin/bash\nrvm use cat .ruby-version@cat .ruby-gemset --create\n\nTry bin/rake torquebox:check to check whether the application server\nis installed correctly.\nThe torquecheck gem helps with detailed information when something goes\nawfully wrong.\n\nTorquebox:                 http://torquebox.org/\ntorquebox-console:         https://github.com/torquebox/torquebox-console\ntorquecheck:               https://github.com/lance/torquecheck\n\nexport TORQUEBOX_HOME=\"/Users/gertthiel/Documents/Projekte/Stanza/torquebox-3.1.2\"\nexport     JBOSS_HOME=\"$TORQUEBOX_HOME/jboss\"\nexport     JRUBY_HOME=\"$(rvm info homes | grep \"ruby:\" | cut -d'\"' -f2)\"\nexport      JAVA_OPTS=\"  -Xmn1024m   -Xms4096m   -Xmx4096m\"\nexport     JRUBY_OPTS=\"-J-Xmn1024m -J-Xms4096m -J-Xmx4096m\"\nxport           PATH=\"$JRUBY_HOME/bin:$PATH\"\necho \"TORQUEBOX_HOME = $TORQUEBOX_HOME\"\necho \"    JBOSS_HOME = $JBOSS_HOME\"\necho \"    JRUBY_HOME = $JRUBY_HOME\"\necho \"     JAVA_OPTS = $JAVA_OPTS\"\necho \"    JRUBY_OPTS = $JRUBY_OPTS\"\ncho \"          PATH = $PATH\"\n\nVagrant shall use VMware Fusion instead of VirtualBox\n\nexport VAGRANT_DEFAULT_PROVIDER=\"vmware_fusion\"\n```\nThe complete terminal output is\ndirenv: loading .envrc                                                                                                                                          \nUsing /Users/gertthiel/.rvm/gems/jruby-1.7.19 with gemset Stanza2\nTORQUEBOX_HOME = /Users/gertthiel/Documents/Projekte/Stanza/torquebox-3.1.2\n    JBOSS_HOME = /Users/gertthiel/Documents/Projekte/Stanza/torquebox-3.1.2/jboss\n    JRUBY_HOME = /Users/gertthiel/.rvm/rubies/jruby-1.7.19\n     JAVA_OPTS =   -Xmn1024m   -Xms4096m   -Xmx4096m\n    JRUBY_OPTS = -J-Xmn1024m -J-Xms4096m -J-Xmx4096m\n/bin/bash: shell_session_update: command not found\ndirenv: error exit status 127\nI'm using Terminal.app.\nThis is /etc/bashrc_Apple_Terminal, zipped for Github's sake:\nbashrc_Apple_Terminal.zip\n. I should clarify that none of the env vars is set after loading .envrc:\n```\n\u279c  master git:(master) \u2717 direnv reload\ndirenv: loading .envrc                                                                                                                                        \nUsing /Users/gertthiel/.rvm/gems/jruby-1.7.19 with gemset Stanza2\nTORQUEBOX_HOME = /Users/gertthiel/Documents/Projekte/Stanza/torquebox-3.1.2\n    JBOSS_HOME = /Users/gertthiel/Documents/Projekte/Stanza/torquebox-3.1.2/jboss\n    JRUBY_HOME = /Users/gertthiel/.rvm/rubies/jruby-1.7.19\n     JAVA_OPTS =   -Xmn1024m   -Xms4096m   -Xmx4096m\n    JRUBY_OPTS = -J-Xmn1024m -J-Xms4096m -J-Xmx4096m\n/bin/bash: shell_session_update: command not found\ndirenv: error exit status 127\n\u279c  master git:(master) \u2717 echo $TORQUEBOX_HOME\n\u279c  master git:(master) \u2717 \n``\n. I can circumvent the bug by sourcing.envrc`:\n\u279c  master git:(master) \u2717 source .envrc\nUsing /Users/gertthiel/.rvm/gems/jruby-1.7.19 with gemset Stanza2\nTORQUEBOX_HOME = /Users/gertthiel/Documents/Projekte/Stanza/torquebox-3.1.2\n    JBOSS_HOME = /Users/gertthiel/Documents/Projekte/Stanza/torquebox-3.1.2/jboss\n    JRUBY_HOME = /Users/gertthiel/.rvm/rubies/jruby-1.7.19\n     JAVA_OPTS =   -Xmn1024m   -Xms4096m   -Xmx4096m\n    JRUBY_OPTS = -J-Xmn1024m -J-Xms4096m -J-Xmx4096m\n\u279c  master git:(master) \u2717 echo $TORQUEBOX_HOME\n/Users/gertthiel/Documents/Projekte/Stanza/torquebox-3.1.2\n\u279c  master git:(master) \u2717\n. I'm not sure, but I upgrade RVM regularly using rvm get stable including this morning.\nAdding shell_session_update() { :; } helps.\n. I created a ~/.direnvrc like so:\n``` sh\nCircumvent https://github.com/direnv/direnv/issues/210\n\nshell_session_update() { :; }\n```\nand that works (good enough).\n. Maybe you want to let the RVM guys know that they might have caused some hiccup?\n. THANK YOU for your prompt response. You saved my day.\n. ",
    "cyaneous": "Having this issue on OS X El Capitan as well. Latest stable.\nrvm 1.26.11 (latest) by Wayne E. Seguin wayneeseguin@gmail.com, Michal Papis mpapis@gmail.com [https://rvm.io/]\n. ",
    "domi91c": "I was having this issue and rvm get head fixed it. Thanks!\n. ",
    "diclophis": "Is there any schedule when this patch will be merged into stable ?\n. ",
    "BardiaAfshin": "I experienced this once I downloaded iterm2, Terminal.app was working fine. I had a stable installation of RVM, installing the master version fixed it\nFIX\nshell\nrvm implode\n\\curl -sSL https://get.rvm.io | bash -s master --ruby\n. ",
    "Yusone": "the same problem I had met , run rvm get head , it works.. ",
    "fenollp": "Hey look here! I can reliably fix this issue with\nyaml\nafter_script: set +e\nLooks like you need that at the top of your /Users/travis/build.sh.\ncc https://github.com/travis-ci/travis-ci/issues/6307 https://github.com/travis-ci/travis-ci/issues/6522 https://github.com/japaric/trust/pull/47. ",
    "sobolevn": "Faced this issue while creating a build system inside sublime text 3. Thanks, rvm get head solved it.. ",
    "ycanales": "@zimbatm I was having this issue with the PyCharm console, updating rvm helped. Thanks! (macOS Sierra). ",
    "AKST": "Looks like I'm no longer experiencing the same issue as before, if I have any issues I'll follow up, otherwise this issue can be closed. Cheers!\n. ",
    "gajus": "\nI don't think that it would be too much work and I'm looking for a contributor to help me out there. If you want to be the man it would be awesome.\n\nI am very much not a Windows person. : )\n. ",
    "gwerbin": "I now have a Windows computer for work. Can I help?. @zimbatm Can do!\nI've actually become really accustomed to Powershell. Safe to assume CMD and PS aren't supported?. ",
    "nalipaz": "For more info, I have now done the following without any resolution:\nadd this to my script:\nshopt -s expand_aliases\nEditing my ~/.bashrc to comment the following:\n```\nIf not running interactively, don't do anything\ncase $- in\n    i) ;;\n      *) return;;\nesac\n```\nI am on Debian Jessie.\n. So reading through the community support on intellij website I was able to see that the file watcher run a non-interactive shell.\nI guess a better question at this point might be, how do I load the aliases in an non-interactive shell? Can I run a command to load them before I run the rest of my commands? Thanks\n. This seems promising, I will give it a try later today, thanks!\n. That worked beautifully. Thanks so much.\n. @tmaslen I just ran this and added it as part of setup instructions for people who are using my project:\necho 'eval \"$(direnv hook bash)\"' >> ~/.bashrc\nBest!. ",
    "tmaslen": "Hi @nalipaz, are you able to share your full solution? I'm attempting to do the same thing, can get the script to run direnv, but am unable to get my application to pick up the env vars set when the script runs.\nThanks,\n/t. ",
    "krismalfettone": "Just checking to see if there was any plans to add this feature to the official lib or not?  In addition, this can be used to emulate the \"check for duplicates\" feature (https://github.com/direnv/direnv/issues/322) by first doing a remove followed by an add all the time, as long as it will remove all occurances.\nThanks again for the great utility.. ",
    "grahamc": "Using sed is a bit tricky, since it can appear in the contents of the variables. You can trick bash in to doing all the hard work for you:\n```bash\nfunction declare() {\n    if [ \"$1\" == \"-x\" ]; then shift; fi\n    export \"$@\"\n}\ndeclare -x strictDeps=\"\"\n^ actually calls: export strictDeps=\"\"\n```. Maybe this is a better bet, then:\n```\nfunction declare() {\n    if [ \"$1\" == \"-x\" ]; then shift; fi\n    export \"$@\"\n}\n. example\nfunction declare() {\n    builtin declare \"$@\"\n}\n```. You bet, I added a test, pushed it, verified it failed, and then reapplied my patch and it passed.. See https://github.com/direnv/direnv/pull/457 for  further fixup.. I tried to write a test for it, but wasn't able to make it work. Essentially, it looked like this:\nbash\ntest_start \"symlink-unchanged\"\n  # when using a symlink, do not reload on every prompt\n  export A=2\n  direnv_eval\n  test_eq \"${A}\" \"1\"\n  echo \"$A\"\n  direnv_eval\n  echo \"$A\"\n  test_eq \"${A}\" \"1\"\n  echo \"$A\"\ntest_stop\nthe test never reported the broken behavior.. I could!. ",
    "cransom": "I happened to run into this as well when an rc script also dumped status messages to stdout in nix-shell when in shellHooks. I redirected it to stderr (1>&2) which was a good enough work around for me.. ",
    "earthrid": "Thank you. I was very pleased to discover direnv!\n. ",
    "russellseymour": "@zimbatm Thanks for that.  I think there was a clash with RVM which was why the path to the ruby was not correct.\nHowever the reason I wanted to use direnv was so that the gems for each project and installed locally in the .direnv directory, but this is not happening.\nI have got the use_ruby function in the .direnvrc for the Jenkins user, but as the build is not an interactive login I assumed that this was not being sourced.  So I copied the use_ruby function into the .envrc for the project.  But the gems are not being installed in the local dir still.\nThis is the build step I am running\n``` bash\n!/bin/bash -ex\necho \"2.3.1\" > .ruby-version\ncp /home/jenkins/envrc .envrc\neval \"$(direnv hook bash)\"\ndirenv allow .\ngem install bundle\n```\nThe /home/jenkins/envrc file contains the following:\n``` bash\n  source /usr/local/share/chruby/chruby.sh\nlocal ver=$1\n  if [[ -z $ver ]] && [[ -f .ruby-version ]]; then\n    ver=$(cat .ruby-version)\n  fi\n  if [[ -z $ver ]]; then\n    echo Unknown ruby version\n    exit 1\n  fi\n# switch to the desired ruby\n  chruby $ver\n# Sets the GEM_HOME environment variable to $PWD/.direnv/ruby/RUBY_VERSION.\n  # This forces the installation of any gems into the project\u2019s sub-folder. If\n  # you\u2019re using bundler it will create wrapper programs that can be invoked\n  # directly instead of using the bundle exec prefix.\n  layout_ruby\n```\nThe gems are not being installed locally to the project still.  I think that the layout_ruby function is not available so the GEM_HOME environment var is not being set.  Where is this function declared?\n. I think I am trying to do too many things here and getting confused. :(\n. It is using the chruby version of ruby but it is not setting the GEM_HOME properly.  This is the output of the script (I have not run the gem install or bundle):\n+ echo 2.3.1\n+ echo use_ruby\n+ direnv allow .\n++ direnv hook bash\n+ eval '\n_direnv_hook() {\n  local previous_exit_status=$?;\n  eval \"$(direnv export bash)\";\n  return $previous_exit_status;\n};\nif ! [[ \"$PROMPT_COMMAND\" =~ _direnv_hook ]]; then\n  PROMPT_COMMAND=\"_direnv_hook;$PROMPT_COMMAND\";\nfi'\n++ [[ '' =~ _direnv_hook ]]\n++ PROMPT_COMMAND='_direnv_hook;'\n+ echo 'debug: /var/lib/jenkins/.gem/ruby/2.3.1'\ndebug: /var/lib/jenkins/.gem/ruby/2.3.1\n+ ruby --version\nruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-linux]\nAs you can see the GEM_HOME is still in the HOMEDIR of the Jenkins user.\nIt looks like the use_ruby function is not being called because if I change the ruby-version to 2.2.2 I get the same output as above stating that 2.3.1 is in use.\nIf I SSH into the server and cd into the workspace directory then I get the expected output of chruby: unknown Ruby: 2.2.2.\nAny ideas please?\n. I am sorry - I did not see the export.\nApologies.\n. Perfect that works. Thanks.\n. ",
    "zeorin": "So what does your .envrc look like in this situation? My guess is, you're trying to prepend some directory to your path, and that you haven't quoted that directory. If it's not quoted, bash will treat your variable as a list of space-separated arguments: Always use double quotes around variable substitutions and command substitutions: \"$foo\", \"$(foo)\".\n. ",
    "pfurini": "Hi\nmy .envrc does not contain any variables.. It's as simple as\nset -e\nuse node 4.4\nlayout node\nThe problem resides in my original PATH variable, that I set in my bash startup files. It contains some paths (like the one I mentioned in my original post) that have embedded spaces, and it works perfectly fine outside direnv (though it's not common in *nix world to have spaces in paths, it's more common in macOS and it's perfectly legal).\nIt seems that direnv is not able to correctly parse and tokenize the variable if it contains spaces.\nP.\n. Just cloned and compiled it, I can confirm that works correctly when PATH initially contains spaces.\nThank you very much for your prompt response!\n. ",
    "hexgnu": "Perfect I'll work on that this week hopefully have something soon.\n. Any way you could assign this issue to me? It helps me know what github issues I have yet to work on.\n. thank you joined!\n. Cool beans looks like I don't have to make one after all :smile:\nI think that when direnv is approved you can subscribe to an rss feed of the package updates @zimbatm \nSomething like https://bodhi.fedoraproject.org/rss/updates/?packages=gcc\n. good question probably have to send an e-mail to dominic@cleal.org\n. That's the person who submitted the package\n. Yea would love to @dustymabe \n. @dustymabe I added myself thanks!\n. @domcleal my FAS username is 'hexgnu' thanks!\n. ",
    "dustymabe": "Looks the package is already up for review: https://bugzilla.redhat.com/show_bug.cgi?id=1358215\n. hey @zimbatm @hexgnu - in fedora we use https://release-monitoring.org/ and an application called \"the new hotness\" to monitor upstream and alert us when a new version is out. As long as dominic set up the notifications he will get an alert anytime a new release is put out. \nhere is a link to the page that talks about all of this: https://fedoraproject.org/wiki/Upstream_release_monitoring\n. @hexgnu - once the package is through review it would be cool if you volunteered to be a co-maintainer of the package with @domcleal\n. @hexgnu if you sign up for a bugzilla account then I can add you to cc for the bug and we can have a discussion there. bugzilla.redhat.com\n. ",
    "domcleal": "Hey, thanks for the interest and package review comments. I'll update that today and hopefully we can get it in shortly.\nI'd be very happy to have co-maintainers, please let me know your Fedora (FAS) usernames so I can add you when requesting the new package.\nRegarding the releases, as @dustymabe noted above, we can easily enable upstream monitoring of the package once imported which will scan for tags in this repository, raises a Fedora bug against the package and tries a test build automatically.\n. The package is now built for Fedora Rawhide, and updates are being processed for F24 and F25 - please test and provide karma if they work so they're pushed to stable.\n- Fedora 25: https://bodhi.fedoraproject.org/updates/FEDORA-2016-6d6d427d8a\n- Fedora 24: https://bodhi.fedoraproject.org/updates/FEDORA-2016-6fca1153d8\n@hexgnu I see you're not a member of the packagers group, so I filed a ticket to request sponsorship for you.\n. ",
    "jrobeson": "this package definitely exists now.  thanks @domcleal . ",
    "rubymaniac": "I am new to this VSCode thing (btw VSCode is an electron application) so I inspected what is going on. \n1. process.pid returned different numbers on the different windows on VSCode.\n2. Here I can see that it reads the global environment variables and assign them to the current process. Moreover it calls child_process.fork which, according to the Node documentation it is independent from the parent process and has its own resources.\nFrom the above I guess that every window has it's own process therefore changing process.env on one window doesn't change the others'. \nI tried to run direnv export json on a directory that has an allowed .envrc but it outputs nothing simply because in order to run it I first direnv allow so it is already loaded and no diff is produced. Know anyway I can test this command?\nPS: No worries for the exit status I will figure it out by parsing the stdout for now (in the future I might make a PR on direnv to differentiate those errors).\nThanks for the help!\n. Ok now we have something that works! I have some more questions though:\nIf I run \njs\nchild_process.exec('pwd', (err, stdout, stderr) => {\n    console.log(stdout);\n});\nin VSCode it returns / even though I have loaded a project with a root path /path/to/project (which is in my opinion weird). \n1. If I exec cd /path/to/project direnv's hook doesn't run (expected?). \n2. If I exec cd /path/to/project; direnv *whatever* works fine\n3. If I exec pushd /path/to/project; direnv *whatever*; popd; everything works but it is annoying the output from pushd that is printed together with the JSON and I also think that it is not necessary to use pushd because of 1. i.e. because the hook never triggers when I exec cd /path/to/project.\nThoughts?\n. Yes exactly how I currently run child_process.exec I pass the cwd option with the vscode.workspace.rootPath which is the variable that holds the project root path.\nOh ok I guess my mind was stuck to how RVM (one of the ruby version managers) is implemented which as long as I remember overrides cd. Now I see that direnv hook bash actually calls direnv export bash which makes sense.\nThanks for the guidelines, I will have something pretty soon and will update this issue :)\n. Hi there,\nI just published the VS Code extension here. I welcome any feedback!\nThanks for all the help!\n. I see that you found the link to the repo right?\nYes, ofc it is possible to make direnv all lowercase (sorry hadn't notice that :P) I will re publish. It is not super discoverable at the Wiki page but that is fine. Most VS Code users are searching the Marketplace for extensions. If you want to make all the info at the wiki more discoverable I am thinking of a section in README with links to the wiki pages (or smth like that). I'll think about it.\n. Ok perfect. I thought of that because you can include something like \"Editor extensions\" because I see that you have done some work for Vim and we could do some similar work for the Atom editor. \nCheers\n. Yeah it is not actually a direnv plugin. As I see, it never uses direnv directly. If I find some extra time I may create an Atom extension, although I never used (or planning to) Atom for development purposes.\n. Aha I see.. I made the change from Direnv => direnv (all lowercase) and published it again. I would like to include some kind of logo (usually increases installs) but I see that you don't have any for direnv. Have you thought about adding a logo?\n. Oh thanks didn't think that you had a different repo for the logo! I will add it next :)\n. ",
    "Mic92": "Actually a combination of both would be perfect. Be in sync with the channel and not a victim of the garbage collector.. the updater of oh-my-zsh has a state file and periodically ask, if the user wish to update.. @bkchr no, instead after a update I let direnv loop through my important projects. If you use https://github.com/direnv/direnv/wiki/Nix#persistent-shell you could also touch shell.nix or default.nix after an update.. @bkchr the nixcache, that I create could be added to the nix store maybe?\nAnd a symlink to the project directory is necessary. Then direnv could load the file locally and skipping the expensive evaluation.. I have a new variant that should work with both channels and nixpkgs git repositories. It also uses direnv's new dump feature, which is even faster and avoid caching environment variables that do not come from nix.\n```\n~/.direnvrc\nuse_nix() {\n  local path=\"$(nix-instantiate --find-file nixpkgs)\"\nif [ -f \"${path}/.version-suffix\" ]; then\n    local version=\"$(< $path/.version-suffix)\"\n  elif [ -f \"${path}/.git\" ]; then\n    local version=\"$(< $(< ${path}/.git/HEAD))\"\n  fi\nlocal cache=\".direnv/cache-${version:-unknown}\"\nif [[ ! -e \"$cache\" ]] || \\\n    [[ \"$HOME/.direnvrc\" -nt \"$cache\" ]] || \\\n    [[ .envrc -nt \"$cache\" ]] || \\\n    [[ default.nix -nt \"$cache\" ]] || \\\n    [[ shell.nix -nt \"$cache\" ]];\n  then\n    [ -d .direnv ] || mkdir .direnv\n    local tmp=$(nix-shell --show-trace --pure \"$@\" \\\n      --run \"\\\"$direnv\\\" dump bash\")\n    echo \"$tmp\" > \"$cache\"\n  fi\nlocal path_backup=$PATH\n  eval \"$(< $cache)\"\n  export PATH=$PATH:$path_backup\nif [[ $# = 0 ]]; then\n    watch_file default.nix\n    watch_file shell.nix\n  fi\n}\n``. Instantiating derivations also seems faster so a different cache strategy could be to usenix-instantiateand invalidate the cache when the path changes.\nHowever my new function only takes0m0.128son my system, while nix-instantiate takes0.500s.. I am also aware of this problem. In my case it caches SSH_AUTH_SOCK and DISPLAY which can be annoying when revisiting a project. Is there something that speaks against usingnix-shell --pureto gather environment variables set bynix-shell?. Should beshellinstead ofcommand`.\nIt builds fine with this version:\n```diff\n--- direnv.org/GNUmakefile      2018-11-22 21:19:45.721038781 +0000\n+++ direnv/GNUmakefile  2018-11-22 21:19:22.841914132 +0000\n@@ -63,7 +63,7 @@\n endif\ndirenv: stdlib.go *.go | $(base)\n-       cd \"$(base)\" && $(GO) build $(GO_FLAGS) -o direnv\n+       cd \"$(base)\" && $(GO) build $(GO_FLAGS) -o direnv$(shell go env GOEXE)\nstdlib.go: stdlib.sh\n        cat $< | ./script/str2go main STDLIB $< > $@\n@@ -153,7 +153,7 @@\n .PHONY: install\n install: all\n        install -d $(BINDIR)\n-       install direnv $(BINDIR)\n+       install direnv$(shell go env GOEXE) $(BINDIR)\n        install -d $(MANDIR)/man1\n        cp -R man/*.1 $(MANDIR)/man1\n```. https://docs.python.org/3/library/venv.html. Should I silent this warning?\n^-- SC2239: Ensure the shebang uses an absolute path to the interpreter.. Seems like there is no use for this: https://github.com/direnv/direnv/issues/428. These are the options for virtualenv:\n```\nvirtualenv --help\nUsage: virtualenv [OPTIONS] DEST_DIR\nOptions:\n  --version             show program's version number and exit\n  -h, --help            show this help message and exit\n  -v, --verbose         Increase verbosity.\n  -q, --quiet           Decrease verbosity.\n  -p PYTHON_EXE, --python=PYTHON_EXE\n                        The Python interpreter to use, e.g.,\n                        --python=python3.5 will use the python3.5 interpreter\n                        to create the new environment.  The default is the\n                        interpreter that virtualenv was installed with\n                        (/nix/store/9vcy8i7mcwmcp486krc22v7851spcdqj-\n                        python3-3.7.1/bin/python3.7m)\n  --clear               Clear out the non-root install and start from scratch.\n  --no-site-packages    DEPRECATED. Retained only for backward compatibility.\n                        Not having access to global site-packages is now the\n                        default behavior.\n  --system-site-packages\n                        Give the virtual environment access to the global\n                        site-packages.\n  --always-copy         Always copy files rather than symlinking.\n  --relocatable         Make an EXISTING virtualenv environment relocatable.\n                        This fixes up scripts and makes all .pth files\n                        relative.\n  --no-setuptools       Do not install setuptools in the new virtualenv.\n  --no-pip              Do not install pip in the new virtualenv.\n  --no-wheel            Do not install wheel in the new virtualenv.\n  --extra-search-dir=DIR\n                        Directory to look for setuptools/pip distributions in.\n                        This option can be used multiple times.\n  --download            Download preinstalled packages from PyPI.\n  --no-download, --never-download\n                        Do not download preinstalled packages from PyPI.\n  --prompt=PROMPT       Provides an alternative prompt prefix for this\n                        environment.\n  --setuptools          DEPRECATED. Retained only for backward compatibility.\n                        This option has no effect.\n  --distribute          DEPRECATED. Retained only for backward compatibility.\n                        This option has no effect.\n  --unzip-setuptools    DEPRECATED.  Retained only for backward compatibility.\n                        This option has no effect.\n```\nand this is for venv:\n```\nusage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]\n            [--upgrade] [--without-pip]\n            ENV_DIR [ENV_DIR ...]\nCreates virtual Python environments in one or more target directories.\npositional arguments:\n  ENV_DIR               A directory to create the environment in.\noptional arguments:\n  -h, --help            show this help message and exit\n  --system-site-packages\n                        Give the virtual environment access to the system\n                        site-packages dir.\n  --symlinks            Try to use symlinks rather than copies, when symlinks\n                        are not the default for the platform.\n  --copies              Try to use copies rather than symlinks, even when\n                        symlinks are the default for the platform.\n  --clear               Delete the contents of the environment directory if it\n                        already exists, before environment creation.\n  --upgrade             Upgrade the environment directory to use this version\n                        of Python, assuming Python has been upgraded in-place.\n  --without-pip         Skips installing or upgrading pip in the virtual\n                        environment (pip is bootstrapped by default)\nOnce an environment has been created, you may wish to activate it, e.g. by\nsourcing an activate script in its bin directory.\n```\nIf you want to go for 100% bug-compatibility this might be a problem if people used virtualenv with some options. At the moment it seems that they mostly removed options that were deprecated in virtualenv. The alternative to my implementation would be a new function that you mentioned.. The same export function can be also reused for xonsh.. ",
    "bkchr": "@Mic92 did you tried to create a combined version of both versions?. @Mic92 okay. I already use persistent shell, but it is soo slow :D . Hmm, I will try that.. @rvolosatovs nice :) . @Mic92 your new solution is really fast :) I added one improvement:\n```\n  local path=\"default.nix\"\nif [ -f \"default.nix\" ]; then\n    local version=\"$(stat -c %Y default.nix)\"\n  elif [ -f \"shell.nix\" ]; then\n    local version=\"$(stat -c %Y shell.nix)\"\n  fi\n```\nThis makes the cache more \"static\". But I think that is based on personal preferences. I for myself don't want to rebuild it when I update my nixpkgs.. ",
    "rvolosatovs": "Added a solution, which is somewhat a combination of both: https://github.com/direnv/direnv/wiki/Nix#persistent-cached-shell. I have experienced exactly the same issue. It seems like all variables set in the environment end up cached during direnv dump and, hence, loaded in subsequent direnv_load calls.\nThat said, it never really bothered me too much - I usually just do rm -rf .direnv(delete the cache) if that happens.\nOn the sidenote, I wouldn't attribute \"writing\" the use_nix solution to myself fully - I mostly merged the 2 existing solutions and added some extras/customizations to my liking. FTR here are steps to reproduce the issue:\nIn ~/.config/direnv/direnvrc:\nsh\nuse_load_test() {\n    if [[ ! -e \"cache\" ]]; then\n        direnv dump > cache\n    fi\n    direnv_load cat cache\n}\nIn /tmp/test/.envrc:\nuse load_test\nNow execute:\n```sh\nexport FOO=bar\ncd /tmp/test\ndirenv allow\nassuming the hook is evaluated here\n```\nnow in clean environment:\n```sh\ncd /tmp/test\nassuming the hook is evaluated here\necho $FOO\n``\nwill printbar. A shot in the dark here, but could it be that at the momentuse_load_testis evaluated the environment has not been completely(or at all) modified bydirenvyet?\nSo thendirenv dumpcalled from insideuse_load_test` is still running in the \"old\" environment, and hence just caches the \"old\" environment?. ",
    "robdox": "I was just having a similar issue but this did not have a fix so I'll update with mine. In my situation i hadn't used my direnv or my docker in over a year plus and had updated macOS a few times in the meantime. \nYou just need to run brew upgrade direnv then as usual run direnv allow and you will be good to go!. ",
    "danielcavanagh": "oh, looks like it's dead easy to fork, edit and create a pull request, all from my browser. see issue #241\n. ",
    "xenic": "I can't remember the exact search quer(y|ies), but I googled install direnv and it shows up near the top.. ",
    "yermulnik": "direnv status?. +1. Thanks.\nAnd what would be the proper way to upgrade later?. And one would better git clone using https and not ssh, I guess.... Yup, $GOPATH is set using direnv =)\nAs for SSH:\n```\n19:24:30 [yz@local][w:1][j:0][~/.../src/direnv]> LANG=C git clone git@github.com:direnv/direnv.git $GOPATH/src/github.com/direnv/direnv\nCloning into '/data/yz/Go/src/github.com/direnv/direnv'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n`HTTP` variant would fit _anyone_..\n23:31:40 [yz@home][j:0][/tmp/direnv]> tree -a\n.\n|-- dir\n|   |-- .envrc\n|   -- real-- link -> /tmp/direnv/dir/real\n3 directories, 1 file\n23:31:42 [yz@home][j:0][/tmp/direnv]> direnv | head -1\ndirenv v2.12.0\n. I see. Thanks for the explanation.. @punitagrawal ain't this is the same as https://github.com/direnv/direnv/issues/277 that I encountered some time ago?. @zimbatm Is there something I'm missing?\n$> LANG=C git clone https://github.com/direnv/direnv\nCloning into 'direnv'...\nremote: Counting objects: 2614, done.\nremote: Compressing objects: 100% (11/11), done.\nremote: Total 2614 (delta 1), reused 10 (delta 1), pack-reused 2600\nReceiving objects: 100% (2614/2614), 1.24 MiB | 302.00 KiB/s, done.\nResolving deltas: 100% (1330/1330), done.\nChecking connectivity... done.\n$> cd ./direnv/\n$> LANG=C make\ngo fmt\ngo build  -o direnv\ncmd_dotenv.go:7:2: cannot find package \"github.com/direnv/go-dotenv\" in any of:\n        /usr/lib/go-1.6/src/github.com/direnv/go-dotenv (from $GOROOT)\n        ($GOPATH not set)\nmake: *** [direnv] Error 1\n$>\n. The same =(\n$> LANG=C git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean\n$> LANG=C make\ngo fmt\ngo build  -o direnv\ncmd_dotenv.go:7:2: cannot find package \"github.com/direnv/go-dotenv\" in any of:\n        /usr/lib/go-1.6/src/github.com/direnv/go-dotenv (from $GOROOT)\n        ($GOPATH not set)\nmake: *** [direnv] Error 1\n``. I see. Thanks for the pointer. I indeed have Go 1.6.\nWorked around this issue by symlinkingsrctovendorand using cmd to build:GOPATH=$(pwd) make` =). > You need to rerun allow whenever you edit it.\nOr edit it using direnv edit and it will implicitly allow it after editing.. What if it gets corrupted or compromised intentionally or by accident? The system catches that file has changed and reports it for you. I'd better know that the file has changed and review it if that wasn't me who did the change.. Yup, it's dash on my Linux Mint. But you should not rely on the idea that all of nix flavors have /bin/sh/ linked to bash. E.g. FreeBSD has POSIX shell for /bin/sh, Linux Mint has dash, and so on. Guess the clue might be using /usr/bin/env bash which is cross-distro-compatible for vast majority of nix'es.. > Yup, ad0bceb should fix this\nLooks like it did (verified with v2.14.0). Thanks!. I've got direnv v.2.13.3 built locally and it's fine:\n```\n\ndirenv version\n2.13.3\n```\n\nBy the way, just noticed that version argument is not documented in direnv help output.. > 85a9bd9 makes the command public now.\ncool. thanks!. Ain't source_env what you're looking for?\nhttps://github.com/direnv/direnv#user-content-loading-layered-envrc. ",
    "agibralter": "@zimbatm ahh interesting, thank you!\nBasically I wanted to build a helper for local development at my company that leverages direnv. I want one of my shell helpers to warn users if they have not \"installed\" direnv correctly.. Ahh, makes sense. Thank you! (Might it be helpful to have some documentation on that?). ",
    "mc0e": "I don't really know go at all, so excuse me if this is stating what might be obvious to someone else.\nhttps://golang.org/pkg/log/#Output confirms that the log package does have an Output method, but I'm not sure where to look for historical documentation. On my system I have a file at /usr/share/go/src/pkg/log/log.go which defines the Output method.. OK, using go 1.6 for the build seems to work.  Thanks.. ",
    "mdawaffe": "I expanded on the comment and created #248.. Much clearer; thanks.. Here's my setup:\n```\n$ env | grep NODE_VER\nNODE_VERSION_PREFIX=\nNODE_VERSIONS=/Users/mdawaffe/.nvm/versions/node\n$ /bin/ls -1 \"$NODE_VERSIONS\"\nv6.10.0\nv6.9.0\nv6.9.4\nv7.2.0\nv7.2.1\nv7.3.0\nv7.4.0\n```\nCurrent method:\n$ node_wanted=v7; \\\n  find \"$NODE_VERSIONS\" -maxdepth 1 -mindepth 1 -type d -name \"$node_wanted*\" | \\\n  sort -r -t . -k 1,1n -k 2,2n -k 3,3n\n/Users/mdawaffe/.nvm/versions/node/v7.2.1 # Should be 7.4.0\n/Users/mdawaffe/.nvm/versions/node/v7.2.0\n/Users/mdawaffe/.nvm/versions/node/v7.3.0\n/Users/mdawaffe/.nvm/versions/node/v7.4.0\nMethod proposed in this PR:\n$ node_wanted=v7; \\\n  find \"$NODE_VERSIONS\" -maxdepth 1 -mindepth 1 -type d -name \"$node_wanted*\" | \\\n  while IFS= read -r line; do echo \"${line#${NODE_VERSIONS%/}/${NODE_VERSION_PREFIX-\"node-v\"}}\"; done | \\\n  sort -t . -k 1,1rn -k 2,2rn -k 3,3rn\nv7.4.0 # Success! Is 7.4.0\nv7.3.0\nv7.2.1\nv7.2.0\nYour setup (as I understand it):\n```\n$ env | grep NODE_VER\nNODE_VERSIONS=/Users/mdawaffe/node-test\n$ /bin/ls -1 \"$NODE_VERSIONS\"\nnode-v0.10.36\nnode-v0.12.17\nnode-v0.12.18\nnode-v0.12.2\nnode-v0.12.7\nnode-v0.9.0\nnode-v4.2.2\nnode-v4.3.0\nnode-v4.3.2\nnode-v4.7.0\nnode-v5.9.0\n```\nCurrent method:\n$ node_wanted=node-v4; \\\n  find \"$NODE_VERSIONS\" -maxdepth 1 -mindepth 1 -type d -name \"$node_wanted*\" | \\\n  sort -r -t . -k 1,1n -k 2,2n -k 3,3n\n/Users/mdawaffe/node-test/node-v4.2.2 # Should be 4.7.0\n/Users/mdawaffe/node-test/node-v4.3.0\n/Users/mdawaffe/node-test/node-v4.3.2\n/Users/mdawaffe/node-test/node-v4.7.0\nMethod proposed in this PR:\n$ node_wanted=node-v4; \\\n  find \"$NODE_VERSIONS\" -maxdepth 1 -mindepth 1 -type d -name \"$node_wanted*\" | \\\n  while IFS= read -r line; do echo \"${line#${NODE_VERSIONS%/}/${NODE_VERSION_PREFIX-\"node-v\"}}\"; done | \\\n  sort -t . -k 1,1rn -k 2,2rn -k 3,3rn\n4.7.0 # Succes! Is 4.7.0\n4.3.2\n4.3.0\n4.2.2\nIgnore the fact that the current method returns paths and the method proposed in this PR returns version strings. That difference is normalized at https://github.com/direnv/direnv/pull/255/files#diff-5140bf46d14d26b672dfebb247c545aaR528 to return paths.. Thanks for catching that.. ",
    "seffenberg-naspers": "alternatively it might be also useful to somehow store not only the hash of the.envrc which was allowed by direnv allow but also storing all the related hashes of all .envrc files sources at direnv allow time and invalidate the .envrc also if any of the subfiles changed. This would make it unnecessary to direnv allow each and all subsequent files.. but then it is not really a security framework, isn't it? Because if you don't check the whole chain to not being changed it doesn't matter if you change the main file or not. So it would only mean to \"enable\" a directory and not \"allow\" it.. as soon as you include something via source_up/source_env you can stop carrying about any change in the main .envrc as well because it is insecure by design, isn't it?. For me it doesn't matter that much how the fake code can come into my system. It is more of a concept thinking. If I allow something, then I have the whole chain in mind and not the single file. Otherwise the command allow is here misleading in my opinion, because it is more an enable as long as any other .envrc is being sourced than the main one. It's like having a fingerprint reader on my front door but my back-door is not having a lock at all.\nOr maybe tell me why you still test the content of the file of being changed as long as you have any source_up/source_env inside of it? Because it is like testing half of it. What do you try to prevent in that case? Any mistake somebody did? Or is it for security reasons? If it is the latter, than it is not secure because the attacker only have to change one of the sourced files and this works. If it is for safety because somebody might do a mistake it is the same problem. And if you say it is a pesonal tool than why re-checking after you enabled it once? Because you should know what you git pull (like your argument: you have to check your whole chain).\nDon't get me wrong, I just want to make clear, that I really didn't expect that behavior. At least a big note on the source_env/up command saying:\n\nthis will not being tested for changes and doesn't have to be allowed in anyway, so be careful while using this, it is more like a . /your/file behavior\n\nis something I would request.\nBut personally I would prefer a chain of trust.. (because I'm lazy and don't wanna test the git repository I pull multiple times from ;) ). Hmm, you're right, it is indeed like that (PATH_add would be a famous attack I guess). \nSo I think direnv should (if possible, because I know it wouldn't be easy) only ensure the integrity of it's own \"framework\" and I count source_up/_env to this part.\nThe best way (to also keep it somehow similar to the actual behavior) would be (but this is only a \"I would love to have ;) ):\ndirenv allow will create a file for this .envrc which also includes all subsequent .envrc file hashes. But this means that it would need to analyze the content and find all source_up/env stuff and check these files as well.\nTo be honest, this is not an easy change at all so for me it would be (for now, maybe thinking about this in a bigger scope sometime later) fine if at least the documentation would state this next to the explanation of source_up/env so that nobody expect this to be checked or requires to be allowed as well.. thanks!. ",
    "dan-passaro": "What is the issue with simply having recursive failures if you have a recursive envrc structure? If I have a chain of three files and I have to issue three direnv allow commands, that is perhaps mildly annoying but, in my opinion, much better than not doing any checking at all. I will most likely have to allow them one-by-one anyway, assuming some kind of nested directory .envrc structure.\n\nI think that if this get addressed then other questions will come up. For\nexample a similar attack could be mounted where the envrc executes a script\nin the same folder. Because the script is not vetted by the security\nframework it could also change over time.\n\nBut this caveat already exists as-is in the current implementation, disregarding source_env.  Imo this shouldn't be a barrier to applying security to source_env/source_up. The issue is if I have checked my .envrc to make sure it's not doing anything troublesome like running an arbitrary script, but someone else has changed a different .envrc that I reference, I can still be compromised.\nI can come up with one potential scenario where this is bad, but it's a bit of a stretch... If I'm working on a project, I might perhaps have my own specialized .envrc in the tests/ subdirectory where I reference the .envrc in the parent dir. If someone malicious can change the contents of the parent .envrc, all I have to do to execute their shell code is git pull (and change dirs?) while I'm working on tests. Perhaps the source code is in a src/ directory where I also have some overrides, making it a bit easier to fall into. And if that src/ directory contains, say, the Django manage.py file, and you're on a large project using direnv, you might have a pretty good shot of pulling off RCE.\nNow of course, wouldn't someone notice e.g. a random commit? If someone can write to your repo, couldn't they do something much worse, like touch your production code?\nI'm not a blackhat and I'm not very good at imagining these scenarios. But I have seen plenty of extremely creative exploits to the point where the fact that this hole exists makes me uneasy, especially in a tool whose job is to automatically execute code. I've only ever had a chain of two .envrc files at the most, so direnv allow on both of them if they both change is not a big burden for me, and seems worth it to close this tiny and perhaps impossible/impractical attack vector.\nIf this is an acceptable change for the tool I'd be happy to furnish a PR.. ",
    "mrmachine": "I think this is a serious flaw and was very surprised to find that higher up .envrc files are not checked at all. I wasted some time testing that this was truly the case before coming here to report a bug.\nAt the very least, the warnings previously added are insufficient. The docs that describe the source_env and source_up features need to warn about this:\nhttps://github.com/direnv/direnv#loading-layered-envrc\n. ",
    "markwest1": "@irontoby, I am experiencing the same issue and would be glad to help as well. If I can do any testing or coding (I've no production experience writing golang, but love to tinker with it).. \n\nI'll take a look in the direnv code ... should I start in exec.go ? Or maybe upwards in the call stack?. I don't think the line in the shell output, /usr/bin/bash: line 195 : C:/Program: No such file or directory is caused by the line in the .envrc file, expand_path $PWD because the same output is generated when the line is changed to expand_path \"$PWD\":\n\n\nBut I agree with your assertion that double quotes will be necessary around bash variable evaluation statements like $PWD in .envrc files. \n. Nope, sorry.. @zimbatm the issue is resolved when using direnv in git-bash (MINGW64) on windows. Thank you; sorry it took so long to get back to you.\n\n. Since I use direnv exclusively in git-bash, I copy the executable to the /usr/local/bin folder (absolute folder is C:\\Program Files\\Git\\usr\\local\\bin) and add two lines to my .bashrc.\n```\n$ grep direnv ~/.bashrc\nalias direnv=\"/usr/local/bin/direnv.windows-amd64.exe\"\ndirenv\neval \"$(direnv hook bash)\"\n``\nIf you want to usedirenvin bothcmd.exeandgit-bash` shells, it may be more complicated than this.\n. However, while the GOPATH environment variable can be successfully set within .envrc, unfortunately, the PATH variable still gets mangled (see demonstration below). I think the mangling happens as a result of this code in main.expandPath() (in the file cmd_expand_path.go): \nreturn filepath.Clean(filepath.Join(relTo, path))\nSo far, I haven't come up with a good work-around, but I'm still noodling on it. I'll submit a PR if I can come up something that's not too hack-ish for bash in mingw.\nBTW, @zimbatm, than you for the time and effort you spent to create direnv, it does make my life easier, despite the PATH mangling in mingw. I use it at home on my linux machine, and it works perfectly. Unfortunately, I'm stuck with Windows at work.\nHere's a demonstration of how PATH get's mangled when it's modified within .envrc (in mingw):\n```\n$ cat /d/code/otr/direnv/.envrc\nexport GOPATH=$(pwd)\n$ cd /d/code/otr/direnv\ndirenv: loading D:\\code\\otr\\direnv.envrc\ndirenv: export +GOPATH\n$ ls\nbin/  pkg/  src/\n$ echo $GOPATH\nD:/code/otr/direnv\n$ echo \"layout go\" >> .envrc\ndirenv: error D:\\code\\otr\\direnv.envrc is blocked. Run direnv allow to approve its content.\n$ cat .envrc\nexport GOPATH=$(pwd)\nlayout go\ndirenv: error D:\\code\\otr\\direnv.envrc is blocked. Run direnv allow to approve its content.\n$ direnv allow\ndirenv: loading D:\\code\\otr\\direnv.envrc\ndirenv: export +GOPATH ~PATH\n$ ls\nbash: ls: command not found\ndirenv: error Can't find bash: \"exec: \\\"bash\\\": executable file not found in %PATH%\"\n$ echo $PATH\nD;D:\\code\\otr\\direnv\\bin;C:\\Users\\218024862\\bin;C:\\Program Files\\Git\\mingw64\\bin;C:\\Program Files\\Git\\usr\\local\\bin;C:\\Program Files\\Git\\usr\\bin;C:\\Program Files\\Git\\usr\\bin;C:\\Program Files\\Git\\mingw64\\bin;C:\\Program Files\\Git\\usr\\bin;C:\\Users\\218024862\\bin;C:\\Program Files\\Microsoft MPI\\Bin;C:\\Program Files (x86)\\M1 Licensing;C:\\Windows ... [truncated for brevity]\ndirenv: error Can't find bash: \"exec: \\\"bash\\\": executable file not found in %PATH%\"\n$\ndirenv: error Can't find bash: \"exec: \\\"bash\\\": executable file not found in %PATH%\"\n```. Thank you @ibraimgm! I will give this a try.. ",
    "xn": "I'm about to go down this path. Any movement on this?. BTW, I got it working.. in git-bash\n$ which direnv\n/c/Users/IEUser/bin/direnv\n$ cat ~/.bashrc\neval \"$(direnv hook bash)\". yes. ",
    "vagabundmw": "I'm still having issues with the current version of direnv in Windows Git Bash. For my use case I want to extend the PATH variable, which also contains spaces. As a crude workaround I patched the prompt hook. So instead of calling eval \"$(direnv hook bash)\" I'm using:\n_direnv_hook() {\n  local previous_exit_status=$?;\n  eval \"$(MSYS_NO_PATHCONV=1 \"direnv.exe\" export bash | sed 's|export PATH=|export _X_DIRENV_PATH=|g')\";\n  if [ -n \"$_X_DIRENV_PATH\" ]; then\n    _X_DIRENV_PATH=$(cygpath -p \"$_X_DIRENV_PATH\")\n    export \"PATH=$_X_DIRENV_PATH\"\n    unset _X_DIRENV_PATH\n  fi\n  return $previous_exit_status;\n};\n\n\nif ! [[ \"$PROMPT_COMMAND\" =~ _direnv_hook ]]; then\n  PROMPT_COMMAND=\"_direnv_hook;$PROMPT_COMMAND\"\nfi\n\nThis hook feeds PATH assignments through cygpath, which converts the Windows format in direnv's output to the format Bash expects.\nAlso, since direnv is a non-MSYS executable, MSYS will translate other environment variables (according to these rules) before calling it. This was undesirable for my scenario so I disable it by setting MSYS_NO_PATHCONV.\nEdit:\nAs a side note, the stdlib path_add functions do not work due to similar Windows vs. Bash format conversion issues, because direnv is called by path_add. So, alas, I had to avoid the stdlib.. ",
    "kalbasit": "has any progress being done on this?. ~~@zimbatm I pushed 4082e2ae378060ef1c3b9355cda750784a95456c to fix the build on Travis.~~ it's already fixed on master.. I'm using zsh. I don't think this problem is coming from zsh though because I can replicate the same problem on a Mac using bash outside of TMux.\nI saw your reply on IRC. Let me try to shrink the envrc down as much as I can while still replicating the problem.. @zimbatm I was able to reproduce the same problem with @Mic92's variation below:\nshell\nuse_nix() {\n  local cache=\".direnv.$(nixos-version --hash)\"\n  if [[ ! -e \"$cache\" ]] || \\\n     [[ \"$HOME/.direnvrc\" -nt \"$cache\" ]] || \\\n     [[ \".envrc\" -nt \"$cache\" ]] || \\\n     [[ \"default.nix\" -nt \"$cache\" ]] || \\\n     [[ \"shell.nix\" -nt \"$cache\" ]];\n  then\n    local tmp=\"$(mktemp \"${cache}.tmp-XXXXXXXX\")\"\n    trap \"rm -rf '$tmp'\" EXIT\n    nix-shell --show-trace \"$@\" --run 'direnv dump' > \"$tmp\" && \\\n      mv \"$tmp\" \"$cache\"\n  fi\n  direnv_load cat \"$cache\"\n  if [[ $# = 0 ]]; then\n    watch_file default.nix\n    watch_file shell.nix\n  fi\n}\nHas this ever worked with nix persistent caching? Could it be caused by Nix 2.0?\n/cc @rvolosatovs who wrote the envrc in the wiki page, the one in my first post is slightly modified for portability on Mac.. @rvolosatovs thank you for confirming the issue, at least it's not just me. I'm aware of the workaround (removing .direnv/) but it's quite annoying and is interfering with my entire team, and we should find a way to solve it. Oh, and the credit I gave you was based on the Wiki's history, I did not imply you created it from scratch :)\n@zimbatm isn't direnv dump supposed to dump only the environment variables that have changed? Looking at the use_nix in stdlib it seems to be using direnv dump as well, but I can't reproduce using the stdlib one.\nshell\nuse_nix() {\n  direnv_load nix-shell --show-trace \"$@\" --run \"$(join_args \"$direnv\" dump)\"\n  if [[ $# == 0 ]]; then\n    watch_file default.nix\n    watch_file shell.nix\n  fi\n}. @zimbatm I think we need a way to generate the diff of two dumps.\nshell\n$ direnv dump > before-nix-shell\n$ nix-shell shell.nix --run 'direnv dump' > after-nix-shell\n$ direnv diff-dump before-nix-shell after-nix-shell > cache\n$ direnv_load cat cache\nIn this case, the cache is the real difference between the two dumps, just as if you do direnv_load nix-shell --run 'direnv dump'. @zimbatm I gave #407 a try with the following envrc\n```shell\nuse_load_test() {\n    if [[ ! -e \"cache\" ]]; then\n        nix-shell --show-trace --pure \"$@\" --run \"/yl/.filesystem/bin/direnv dump bash\" > cache\n    fi\n    eval \"$(cat cache)\"\n}\nuse_load_test\n```\nIt does fix the issue in question here. But, it introduces another, the PATH no longer includes the previous value so $HOME/.nix-profile/bin is not in PATH and none of the tools I have installed globally are accessible anymore.\nP.S: note that I had to hardcode the location of direnv to so it picks up the correct direnv. @zimbatm nice, that works!. > > P.S: note that I had to hardcode the location of direnv to so it picks up the correct direnv\n\nIn the stdlib, $direnv is already resolved to the executable path\n\nI tried that, but somehow it referenced the direnv binary installed in the nix-store instead of the one I temporarily added to the start of my PATH. I'll do more testing and open a different ticket if I can replicate it again.. Oh, I see now. This makes sense since I did not replace the direnv, just added it to the top of PATH. Thx for the explanation @zimbatm!\nAre you ready to merge #407?. This issue is now resolved in 2.18.2 provided an envrc using eval $(cat dump). I will update the wiki with the new .envrc once I have it ironed out.. oh interesting, let me try my envrc with this patch and see if it helps.. @zimbatm Jabba is a Java version manager written in Go.. ",
    "murkey": "+1 for the ignore command or something similar. I noticed deny requires the file to be allowed, and I'd prefer a way to just never allow it and stop nagging. Let me know if you'd prefer splitting this out into a separate feature request. Thanks!. ",
    "mogorman": "my version of this in my bash profile a little different as i typically want to turn off everything and reset to home, and just turn it back on \n```bash\nCopied from \"direnv hook bash\" output:\n_direnv_hook_enabled=1\n_direnv_hook() {\n    if [ $_direnv_hook_enabled == \"1\" ]; then\n        eval \"$(direnv export bash)\"\n    fi\n};\ndirenv-stop() {\n    pushd $(pwd) > /dev/null\n    cd\n    _direnv_hook_enabled=0\n    eval \"$(direnv export bash)\"\n    popd > /dev/null\n}\ndirenv-start() {\n    echo \"direnv: enabling shell hook\"\n    _direnv_hook_enabled=1\n}\n```. ",
    "siers": "Yeah, pushd works. I'm using direnv-unload() { pushd /; _direnv_hook; popd; } to run some builders that work better without nix in their environment. (direnv-unload; carthage update) and it returns to my direnv environment afterwards.. ",
    "rbutola": "Thanks Zimbatm,\nI tested the recommended approach of:\ndirenv allow . && eval \"$(direnv export bash)\"\nSeems to be working fine (And i can understand why this works).\nThanks for taking time-out to reply\nThanks\nRahul\nMob: 8800740896\nOn Wed, Mar 15, 2017 at 4:33 PM, zimbatm notifications@github.com wrote:\n\nHi @rbutola https://github.com/rbutola,\nyes \"direnv hook\" is only intended for the interactive shell.\nFor non-interactive bash use eval \"$(direnv export bash)\" (and\npotentially direnv allow . before that if you trust the source).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/262#issuecomment-286870058, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AYgDh2L7RmquX78QWKIsrniUzmZ6IfUoks5rmEsogaJpZM4MdNxO\n.\n. Sorry to disturb, just 1 point that came up when we discussed your\nsuggestion.\nIn non-interactive mode - how will the unloading part work if we use this\napproach.\n\nAs I see the code, direnv export command is responsible for even unloading\npart as well.\nSo on each directory change (cd to another directory) - do we explicitly\nrun eval \"$(direnv export bash)\" for unloading to work.\nThanks\nRahul\nMob: 8800740896\nOn Wed, Mar 15, 2017 at 4:46 PM, rahul butola rahulbutola81@gmail.com\nwrote:\n\nThanks Zimbatm,\nI tested the recommended approach of:\ndirenv allow . && eval \"$(direnv export bash)\"\nSeems to be working fine (And i can understand why this works).\nThanks for taking time-out to reply\nThanks\nRahul\nMob: 8800740896\nOn Wed, Mar 15, 2017 at 4:33 PM, zimbatm notifications@github.com wrote:\n\nHi @rbutola https://github.com/rbutola,\nyes \"direnv hook\" is only intended for the interactive shell.\nFor non-interactive bash use eval \"$(direnv export bash)\" (and\npotentially direnv allow . before that if you trust the source).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/262#issuecomment-286870058, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AYgDh2L7RmquX78QWKIsrniUzmZ6IfUoks5rmEsogaJpZM4MdNxO\n.\n\n\n. \n",
    "nicknovitski": "Sorry for the issue necromancy, but is direnv exec equivalent to the eval-and-export approach you describe?\nCurrently I reuse .envrcs in our CI by specifying that the build steps are run with an interactive shell, but I'm considering switching to a function like:\nr() {\n  direnv allow\n  direnv exec . bash <<< \"$@\"\n}. ",
    "robnagler": "Unfortunately, I'm not a go developer. I tried adding it as a submodule in vendor/, but the make is still failing even when adding GO15VENDOREXPERIMENT=1. I read a bit about this, and it seems you'll need packaging tool like godep.. ",
    "fruch": "Cause it's a closed garden, and you don't have access to /bin/ , \nSee:\nhttps://github.com/termux/termux-app/issues/104\nA program should expose those type of things as environment vars. ",
    "tnarik": "@psamin, You could easily create a new layout (I was thinking on doing that) which would take something like (one of them):\nlayout venv python2 <virtualenv name>\nlayout venv python3 <virtualenv name>\nlayout venv <virtualenv name>\n, and go through the motions of creating the virtualenv with the correct version of python (or the default), or activating it. You can also take a look at https://justin.abrah.ms/python/virtualenv_wrapper_helper.html either as help to create the layout function, or as an alternative.\nBut then you would be missing one of the advantages of virtualenvwrapper which is being able to switch environments at will within the same project, so the only advantage is the reuse of the environments. I have the feeling it is philosophically the opposite of direnv. ",
    "cenkalti": "I put this to my .direnvrc file\n```\nlayout_virtualenv() {\n  local venv_path=\"$1\"\n  source ${venv_path}/bin/activate\n}\nlayout_virtualenvwrapper() {\n  local venv_path=\"${WORKON_HOME}/$1\"\n  layout_virtualenv $venv_path\n}\n```\nand I use it like this in .envrc of project folder:\nlayout virtualenv /path/to/my-awesome-project\nor\nlayout virtualenvwrapper my-awesome-project. Done!. ",
    "olalonde": "Ah interesting, thanks.\nThe content of activate is:\n```sh\nThis file must be used with \"source bin/activate\" from bash\nyou cannot run it directly\ndeactivate () {\n    # reset old environment variables\n    if [ -n \"$_OLD_VIRTUAL_PATH\" ] ; then\n        PATH=\"$_OLD_VIRTUAL_PATH\"\n        export PATH\n        unset _OLD_VIRTUAL_PATH\n    fi\n    if [ -n \"$_OLD_VIRTUAL_PYTHONHOME\" ] ; then\n        PYTHONHOME=\"$_OLD_VIRTUAL_PYTHONHOME\"\n        export PYTHONHOME\n        unset _OLD_VIRTUAL_PYTHONHOME\n    fi\n# This should detect bash and zsh, which have a hash command that must\n# be called to get it to forget past commands.  Without forgetting\n# past commands the $PATH changes we made may not be respected\nif [ -n \"$BASH\" -o -n \"$ZSH_VERSION\" ] ; then\n    hash -r\nfi\n\nif [ -n \"$_OLD_VIRTUAL_PS1\" ] ; then\n    PS1=\"$_OLD_VIRTUAL_PS1\"\n    export PS1\n    unset _OLD_VIRTUAL_PS1\nfi\n\nunset VIRTUAL_ENV\nif [ ! \"$1\" = \"nondestructive\" ] ; then\n# Self destruct!\n    unset -f deactivate\nfi\n\n}\nunset irrelevant variables\ndeactivate nondestructive\nVIRTUAL_ENV=\"/Users/olalonde/code/somedir/venv\"\nexport VIRTUAL_ENV\n_OLD_VIRTUAL_PATH=\"$PATH\"\nPATH=\"$VIRTUAL_ENV/bin:$PATH\"\nexport PATH\nunset PYTHONHOME if set\nthis will fail if PYTHONHOME is set to the empty string (which is bad anyway)\ncould use if (set -u; : $PYTHONHOME) ; in bash\nif [ -n \"$PYTHONHOME\" ] ; then\n    _OLD_VIRTUAL_PYTHONHOME=\"$PYTHONHOME\"\n    unset PYTHONHOME\nfi\nif [ -z \"$VIRTUAL_ENV_DISABLE_PROMPT\" ] ; then\n    _OLD_VIRTUAL_PS1=\"$PS1\"\n    if [ \"x(venv) \" != x ] ; then\n        PS1=\"(venv) $PS1\"\n    else\n    if [ \"basename \\\"$VIRTUAL_ENV\\\"\" = \"__\" ] ; then\n        # special case for Aspen magic directories\n        # see http://www.zetadev.com/software/aspen/\n        PS1=\"[basename \\dirname \\\"$VIRTUAL_ENV\\\"`] $PS1\"\n    else\n        PS1=\"(basename \\\"$VIRTUAL_ENV\\\"`)$PS1\"\n    fi\n    fi\n    export PS1\nfi\nThis should detect bash and zsh, which have a hash command that must\nbe called to get it to forget past commands.  Without forgetting\npast commands the $PATH changes we made may not be respected\nif [ -n \"$BASH\" -o -n \"$ZSH_VERSION\" ] ; then\n    hash -r\nfi\n```\nDo you know which part would branch differently because it's executed by direnv? Just out of curiosity.. Thanks, I actually added set -x at the top of the script. It does seem to execute differently when called from direnv.\n$ direnv allow\ndirenv: loading .envrc\n+++ deactivate nondestructive\n+++ '[' -n '' ']'\n+++ '[' -n '' ']'\n+++ '[' -n /usr/local/bin/bash -o -n '' ']'\n+++ hash -r\n+++ '[' -n '' ']'\n+++ unset VIRTUAL_ENV\n+++ '[' '!' nondestructive = nondestructive ']'\n+++ VIRTUAL_ENV=/Users/olalonde/code/myproject/venv\n+++ export VIRTUAL_ENV\n+++ _OLD_VIRTUAL_PATH=/Users/olalonde/.rbenv/shims:/Users/olalonde/.nvm/versions/node/v6.6.0/bin:/Users/olalonde/bin:/usr/local/sbin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Applications/Wireshark.app/Contents/MacOS:/Users/olalonde/.rbenv/shims:/Users/olalonde/bin:/usr/local/sbin:/Users/olalonde/code/go/bin:/usr/local/opt/fzf/bin:/Users/olalonde/code/go/bin\n+++ PATH=/Users/olalonde/code/myproject/venv/bin:/Users/olalonde/.rbenv/shims:/Users/olalonde/.nvm/versions/node/v6.6.0/bin:/Users/olalonde/bin:/usr/local/sbin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Applications/Wireshark.app/Contents/MacOS:/Users/olalonde/.rbenv/shims:/Users/olalonde/bin:/usr/local/sbin:/Users/olalonde/code/go/bin:/usr/local/opt/fzf/bin:/Users/olalonde/code/go/bin\n+++ export PATH\n+++ '[' -n '' ']'\n+++ '[' -z '' ']'\n+++ _OLD_VIRTUAL_PS1=\n+++ '[' 'x(venv) ' '!=' x ']'\n+++ PS1='(venv) '\n+++ export PS1\n+++ '[' -n /usr/local/bin/bash -o -n '' ']'\n+++ hash -r\n+ popd\n+ popd\n+ /usr/local/Cellar/direnv/2.11.3/bin/direnv dump\ndirenv: export +VIRTUAL_ENV ~PATH\n$ venv\n+./venv/bin/activate:39> deactivate nondestructive\n+deactivate:2> [ -n '' ']'\n+deactivate:7> [ -n '' ']'\n+deactivate:16> [ -n '' -o -n 5.2 ']'\n+deactivate:17> hash -r\n+deactivate:20> [ -n '' ']'\n+deactivate:26> unset VIRTUAL_ENV\n+deactivate:27> [ '!' nondestructive '=' nondestructive ']'\n+./venv/bin/activate:41> VIRTUAL_ENV=/Users/olalonde/code/myproject/venv\n+./venv/bin/activate:42> export VIRTUAL_ENV\n+./venv/bin/activate:44> _OLD_VIRTUAL_PATH=/Users/olalonde/code/myproject/venv/bin:/Users/olalonde/.rbenv/shims:/Users/olalonde/.nvm/versions/node/v6.6.0/bin:/Users/olalonde/bin:/usr/local/sbin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Applications/Wireshark.app/Contents/MacOS:/Users/olalonde/.rbenv/shims:/Users/olalonde/bin:/usr/local/sbin:/Users/olalonde/code/go/bin:/usr/local/opt/fzf/bin:/Users/olalonde/code/go/bin\n+./venv/bin/activate:45> PATH=/Users/olalonde/code/myproject/venv/bin:/Users/olalonde/code/myproject/venv/bin:/Users/olalonde/.rbenv/shims:/Users/olalonde/.nvm/versions/node/v6.6.0/bin:/Users/olalonde/bin:/usr/local/sbin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Applications/Wireshark.app/Contents/MacOS:/Users/olalonde/.rbenv/shims:/Users/olalonde/bin:/usr/local/sbin:/Users/olalonde/code/go/bin:/usr/local/opt/fzf/bin:/Users/olalonde/code/go/bin\n+./venv/bin/activate:46> export PATH\n+./venv/bin/activate:51> [ -n '' ']'\n+./venv/bin/activate:56> [ -z '' ']'\n+./venv/bin/activate:57> _OLD_VIRTUAL_PS1='%{$fg[cyan]%}%~% %{$fg_bold[blue]%}${ret_status}%{$fg_bold[green]%}%{$reset_color%}'\n+./venv/bin/activate:58> [ 'x(venv) ' '!=' x ']'\n+./venv/bin/activate:59> PS1='(venv) %{$fg[cyan]%}%~% %{$fg_bold[blue]%}${ret_status}%{$fg_bold[green]%}%{$reset_color%}'\n+./venv/bin/activate:69> export PS1\n+./venv/bin/activate:75> [ -n '' -o -n 5.2 ']'\n+./venv/bin/activate:76> hash -r\n+omz_termsupport_precmd:1> [[ '' == true ]]\n+omz_termsupport_precmd:5> title '%15<..<%~%<<' '%n@%m: %~'\n+title:1> [[ '' == *term* ]]\n+title:5> : '%n@%m: %~'\n+title:7> [[ xterm-256color == screen* ]]\n+title:9> [[ xterm-256color == xterm* ]]\n+title:10> print -Pn '\\e]2;%n@%m:\\ %~\\a'\n+title:11> print -Pn '\\e]1;%15\\<..\\<%~%\\<\\<\\a'\n+omz_termsupport_cwd:3> [[ iTerm.app == Apple_Terminal ]]\n+_direnv_hook:1> direnv export zsh\n+_direnv_hook:1> eval ''\n+-zsh:17> git_prompt_info\n+git_prompt_info:1> dirty=+git_prompt_info:1> parse_git_dirty\n+parse_git_dirty:1> local STATUS=''\n+parse_git_dirty:2> local FLAGS\n+parse_git_dirty:3> FLAGS=( --porcelain )\n+parse_git_dirty:4> [[+parse_git_dirty:4> git config --get oh-my-zsh.hide-dirty\n+parse_git_dirty:4> [[ '' != 1 ]]\n+parse_git_dirty:5> [[ 1 -gt 0 ]]\n+parse_git_dirty:6> FLAGS+='--ignore-submodules=dirty'\n+parse_git_dirty:8> [[ '' == true ]]\n+parse_git_dirty:11> STATUS=+parse_git_dirty:11> git status --porcelain '--ignore-submodules=dirty'\n+parse_git_dirty:11> STATUS=+parse_git_dirty:11> tail -n1\n+parse_git_dirty:11> STATUS=''\n+parse_git_dirty:13> [[ -n '' ]]\n+parse_git_dirty:16> echo '%{%}'\n+git_prompt_info:1> dirty='%{%}'\n+git_prompt_info:2> __git_ps1 '%s%%{%%}%%{%%}'\n+__git_ps1:2> local pcmode=no\n+__git_ps1:3> local detached=no\n+__git_ps1:4> local ps1pc_start='\\u@\\h:\\w '\n+__git_ps1:5> local ps1pc_end='\\$ '\n+__git_ps1:6> local printf_format=' (%s)'\n+__git_ps1:8> case 1 (2 | 3)\n+__git_ps1:8> case 1 (0 | 1)\n+__git_ps1:14> printf_format='%s%%{%%}%%{%%}'\n+__git_ps1:20> local repo_info rev_parse_exit_code\n+__git_ps1:21> repo_info=+__git_ps1:21> git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD\n+__git_ps1:21> repo_info='.git\nfalse\nfalse\ntrue\n68106c6'\n+__git_ps1:24> rev_parse_exit_code=0\n+__git_ps1:26> [ -z '.git\nfalse\nfalse\ntrue\n68106c6' ']'\n+__git_ps1:34> local short_sha\n+__git_ps1:35> [ 0 '=' 0 ']'\n+__git_ps1:36> short_sha=68106c6\n+__git_ps1:37> repo_info='.git\nfalse\nfalse\ntrue'\n+__git_ps1:39> local inside_worktree=true\n+__git_ps1:40> repo_info='.git\nfalse\nfalse'\n+__git_ps1:41> local bare_repo=false\n+__git_ps1:42> repo_info='.git\nfalse'\n+__git_ps1:43> local inside_gitdir=false\n+__git_ps1:44> local g=.git\n+__git_ps1:46> local r=''\n+__git_ps1:47> local b=''\n+__git_ps1:48> local step=''\n+__git_ps1:49> local total=''\n+__git_ps1:50> [ -d .git/rebase-merge ']'\n+__git_ps1:60> [ -d .git/rebase-apply ']'\n+__git_ps1:71> [ -f .git/MERGE_HEAD ']'\n+__git_ps1:73> [ -f .git/CHERRY_PICK_HEAD ']'\n+__git_ps1:75> [ -f .git/REVERT_HEAD ']'\n+__git_ps1:77> [ -f .git/BISECT_LOG ']'\n+__git_ps1:81> [ -n '' ']'\n+__git_ps1:83> [ -h .git/HEAD ']'\n+__git_ps1:87> local head=''\n+__git_ps1:88> eread .git/HEAD head\n+eread:2> f=.git/HEAD\n+eread:3> shift\n+eread:4> test -r .git/HEAD\n+eread:4> read head\n+__git_ps1:95> b=refs/heads/master\n+__git_ps1:96> [ 'ref: refs/heads/master' '=' refs/heads/master ']'\n+__git_ps1:116> [ -n '' ']'\n+__git_ps1:120> local w=''\n+__git_ps1:121> local i=''\n+__git_ps1:122> local s=''\n+__git_ps1:123> local u=''\n+__git_ps1:124> local c=''\n+__git_ps1:125> local p=''\n+__git_ps1:127> [ true '=' false ']'\n+__git_ps1:133> [ true '=' true ']'\n+__git_ps1:134> [ -n '' ']'\n+__git_ps1:144> [ -n '' ']'\n+__git_ps1:149> [ -n '' ']'\n+__git_ps1:156> [ -n '' ']'\n+__git_ps1:161> local z=' '\n+__git_ps1:164> [ no '=' yes ']'\n+__git_ps1:168> local f=''\n+__git_ps1:169> local gitstring=master\n+__git_ps1:171> [ no '=' yes ']'\n+__git_ps1:179> printf -- '%s%%{%%}%%{%%}' master\n+-zsh:17> vi_mode_prompt_info\n+vi_mode_prompt_info:3> return 1. Oh yes that's it. The virtual env seems to be loaded correctly but I wasn't seeing it in the prompt. Could you point to the PS1 changes that were causing issues in older bash 3.0 versions? And did these issues also affect zsh? I'm using zsh so it would be nice if PS1 changes wouldn't be ignored if they aren't causing issues.. ",
    "enagorny": "On PS1 change it is described how to restore https://github.com/direnv/direnv/wiki/Python#restoring-the-ps1\n. ",
    "williamsmj": "You also get the \"correct\" behaviour, i.e. matching source .env in the shell, if you put source .env as a directive in .envrc.. Thanks! Fixes the case I reported, but it doesn't truncate lines that have comments somewhere other than the first character:\n$ cat direnvtest/.env\nFOO=baz   # This is a comment\n$ cd direnvtest/\n$ echo $FOO\nbaz # This is a comment\n$ source .env\n$ echo $FOO\nbaz\nShould I open another issue @zimbatm?. fa1fa4f doesn't build for me:\ngo fmt\ngo build -ldflags ' -linkmode=external' -o direnv\ncmd_dotenv.go:7:2: cannot find package \"github.com/direnv/direnv/dotenv\" in any of:\n        /usr/local/Cellar/go/1.8.1/libexec/src/github.com/direnv/direnv/dotenv (from $GOROOT)\n        /Users/mike/go/src/github.com/direnv/direnv/dotenv (from $GOPATH)\nmake: *** [direnv] Error 1\nThe previous revision builds fine.. I have $GOPATH set, but no joy.\ngo get worked though, and I can confirm this fixes the test case above. Thanks!. Thanks! The best I could come up with was\nbash\nlayout_python() {\n  local python=${1:-python}\n  [[ $# -gt 0 ]] && shift\n  local old_env=$PWD/.direnv/virtualenv\n  unset PYTHONHOME\n  if [[ -d $old_env && $python = python ]]; then\n    export VIRTUAL_ENV=$old_env\n  else\n    if [ -z ${layout_python_path+x} ] ; then\n        local python_version\n        python_version=$(\"$python\" -c \"import platform as p;print(p.python_version())\")\n        if [[ -z $python_version ]]; then\n          log_error \"Could not find python's version\"\n          return 1\n        fi\n        export VIRTUAL_ENV=$PWD/.direnv/python-$python_version\n    else\n        export VIRTUAL_ENV=${layout_python_path}/${PWD##*/}\n    fi\n    if [[ ! -d $VIRTUAL_ENV ]]; then\n      \"$python\" -m virtualenv \"$@\" \"$VIRTUAL_ENV\"\n    fi\n  fi\n  PATH_add \"$VIRTUAL_ENV/bin\"\n}\nIt's not pretty, but it works, at least for me.\nIf the user sets layout_python_path=~/.ves in the .envrc for a project /path/to/my_project (or in the global direnvrc) then the virtualenv is created in ~/.ves/my_project. If they don't set layout_python_path then the virtualenv is created in the current location, i.e. $PWD/.direnv/python-$python_version.\nThe reason this is kind of ugly is I need to name the virtualenv differently depending on whether layout_python_path is set, in order for it to do what I want and preserve the default behaviour when layout_python_path is not set.\nAny suggestions for improvements?. With that method the virtualenv will be \"named\" (i.e. in a path whose last directory is) python-$python_version whatever the user does. \nThat's not my preference, because (like many many people) I put the name of the virtualenv in $PS1, and I'm used to that name acting as confirmation that I've activated the right one. If they are all called the same thing, e.g. python-3.6.1, it doesn't help.\nHence my hacky if-then-else solution above.\nBut it's not the end of the world, and I'm happy to go with your approach, rather than have a local fork of direnv!\nI'm at a bit of a loss for how to integrate it to the other layouts (my knowledge of those languages and their conventions is extremely limited), but I'll take a look.. Fair point!\nI can do a direnv_layout_dir PR for Python. Would that be useful or do you need one that works for other languages/systems too? If the latter, I'll have to bow out at this point as my knowledge of the equivalents of virtualenv in other languages is not enough.. Feature added in #290. Closing.. Awesome! I've only tested layout_python, but this works for me, i.e. if /project/.envrc says layout_python_dir=/foo/bar then the virtual environment that would normally go in /project/.direnv/ goes in /foo/bar, and is activated and deactivated correctly. Thank you!\nHowever, there's a problem with the example code you give in this PR that sets a global direnv_layout_dir using a hash: at least on my system, whatever directory the .envrc is in pwd_hash is that of my home directory. Perhaps this is an issue with the subshell in which pwd_hash is being evaluated; $PWD is $HOME?. Perfect! Works as expected. Thank you very much!\nymmv, but I modified pwd_hash slightly to make a listing of the layouts directory a bit more human-readable:\npwd_hash=$(basename $PWD)-$(echo -n $PWD | shasum | cut -d ' ' -f 1). Doesn't seem to fix it, sorry. VIRTUAL_ENV is still relative:\n$ echo $VIRTUAL_ENV\n./.direnv/python-3.6.1\nand (presumably consequently) ipython still gives the same warning.\n(This assumes I managed to upgrade correctly. I'm unfamiliar with the go packaging system. I ran go get -u github.com/direnv/direnv. The source in $GOPATH/src/githhub.com/direnv/direnv contains 5792629.). ",
    "dharmab": "Global is perfectly fine, that's actually convenient to set it in one place for many projects. Thanks for the quick response!. Closing this issue since people have had plenty of time to migrate.. ",
    "dangitall": "Apologies, I don't know what was going on before, but after a restart of all my terminals, OLDPWD is being properly set.. ",
    "nbraud": "You are welcome, and thanks for the quick merge  :). @zimbatm Thanks; the rewritten logic is indeed much nicer, I just wasn't sure whether I should/could use arrays (for portability reasons).  :). ",
    "michaelld": "I forgot to move the build from direnv-devel to direnv; done now in https://github.com/macports/macports-ports/commit/31483ba6ab3c8432c589784d9dfd7978d07e644e .. @zimbatm yes sure that's possible.. ",
    "joelmichael": "I'm getting this error with this .envrc\nPATH_add bin\nPATH_add node_modules/.bin\nPls fix. ",
    "warrenv": "I also have a .envrc in a parent dir with a PATH_add just like @joelmichael :\nbash\nPATH_add $HOME/.uvm/bin. thank you.. ",
    "hostmaster": "Most likely it was version 2.11.3. I'm using it right now and it works.. I downloaded a binary release of 2.12.1 from github and I got the same error. \n\u276f direnv\ndirenv v2.12.1\nUsage: direnv COMMAND [...ARGS]\n\u276f z cloud\ndirenv: loading .envrc\ndirenv: error exit status 1. 2.12.1\n~/Temp/test_python\ndirenv: loading .envrc\n++ layout python\n++ local name=python\n++ shift\n++ eval layout_python\n+++ layout_python\n+++ local python=python\n+++ shift\ndirenv: error exit status 1. for 2.11.3 its looks like below \n~/Temp/test_python\ndirenv: loading .envrc\n++ layout python\n++ local name=python\n++ shift\n++ eval layout_python\n+++ layout_python\n+++ local python=python\n+++ local old_env=/Users/igor/Temp/test_python/.direnv/virtualenv\n+++ unset PYTHONHOME\n+++ [[ -d /Users/igor/Temp/test_python/.direnv/virtualenv ]]\n+++ local python_version\n++++ python -c 'import platform as p;print(p.python_version())'\n+++ python_version=2.7.10\n+++ [[ -z 2.7.10 ]]\n+++ export VIRTUAL_ENV=/Users/igor/Temp/test_python/.direnv/python-2.7.10\n+++ VIRTUAL_ENV=/Users/igor/Temp/test_python/.direnv/python-2.7.10\n+++ [[ ! -d /Users/igor/Temp/test_python/.direnv/python-2.7.10 ]]\n+++ PATH_add /Users/igor/Temp/test_python/.direnv/python-2.7.10/bin\n++++ expand_path /Users/igor/Temp/test_python/.direnv/python-2.7.10/bin\n++++ /usr/local/bin/direnv.2.11.3 expand_path /Users/igor/Temp/test_python/.direnv/python-2.7.10/bin\n+++ PATH=/Users/igor/Temp/test_python/.direnv/python-2.7.10/bin:/Users/igor/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/igor/Library/Python/2.7/bin:/usr/local/sbin:/usr/sbin:/sbin:/Users/igor/.cargo/bin:/bin\n+++ export PATH\n++ TESTENV=test123\n+ popd\n+ popd\n+ /usr/local/bin/direnv.2.11.3 dump\ndirenv: export +VIRTUAL_ENV ~PATH. ",
    "cjsimon": "I have the same issue on OS X go version 1.9.2\n$ make install\ngo fmt\ngo build -ldflags ' -linkmode=external' -o direnv\ncmd_dotenv.go:7:2: cannot find package \"github.com/direnv/go-dotenv\" in any of:\n    /usr/local/go/src/github.com/direnv/go-dotenv (from $GOROOT)\n    /Users/administrator/go/src/github.com/direnv/go-dotenv (from $GOPATH)\nmake: *** [direnv] Error 1. ",
    "jameysharp": "I just discovered direnv today, and I don't use .env files myself, so please forgive me if this response is not useful, but:\nIs the dotenv function in the direnv stdlib not what you're looking for? It looks to me like you should be able to write a .envrc containing only this:\ndotenv\nand, if I'm reading the documentation correctly, direnv will load the .env file that's in the same directory.. ",
    "fgblomqvist": "Thanks @jameysharp for pointing that out! It's not ideal, but it'll have to do! :)\nOn a side note, @zimbatm, since .env files are pretty common, maybe the dotenv function should be easier to find (document it right in the Readme?) or maybe at least link to where the stdlib docs can be found online (if they can). Just a couple of suggestions.. ",
    "schickling": "Is there a way to have a .envrc file in a parent directory that contains dotenv so that it loads .env files in child directories.\nIdeally there would also be a way to tell direnv to globally load .env files (i.e. treat them the same as .envrc files).\nLooking forward to hearing your thoughts @zimbatm!. ",
    "timuckun": "It would be nice to be able to use the same .env. Right now I have to create a symlink between them (the ruby dotenv library is able to parse the direnv format).\nIdeally direnv could handle key=value format without needing to type EXPORT.. Out of curiosity.\nWhy do I need to allow it after an edit? Once I have allowed it shouldn't it reload automatically?. ",
    "timwis": "I'd love this too. In the communities I interact with most frequently, .env is more common than .envrc. it would be great if this worked with either.. ",
    "nitrocode": "I use .env for a lot of different projects. I would like support for automatic .env files if a .envrc file is missing.\nEdit: Below does not work. I was mistaken...\nWhy put dotenv in your .envrc file when a softlink is even easier.\n$ ln -s .env .envrc\ndirenv: error .envrc is blocked. Run `direnv allow` to approve its content.\n$ direnv allow\ndirenv: loading .envrc. ",
    "josephbuchma": "Hi @zimbatm \nYeah, \"unclean\" exits might be a problem. But the rest can be handled inside those hooks. Like killing existing godoc process if there is any on given port before starting new one. Hmm... Maybe unload hook is not really needed :)\nApplications here are endless, it's not only about starting some servers.. That might work for me, thanks @zimbatm . ",
    "brikou": "You can safely copy/paste the following snippet on your own, and so be able to reproduce the whole thing.\nI can wait to have this ~~feature available~~, bug solved. BTW direnv is amazing!\n```sh\ncd $(mktemp -d)\ncat << 'EOF' > .envrc--production\nexport ENV=production\nEOF\ncat << 'EOF' > .envrc--development\nexport ENV=development\nEOF\nln --symbolic --force .envrc--development .envrc\ndirenv: error .envrc is blocked. Run direnv allow to approve its content.\ndirenv allow\necho $ENV\ndevelopment\ndirenv status\ndirenv exec path /usr/local/bin/direnv\nDIRENV_CONFIG /home/brikou/.config/direnv\nDIRENV_BASH /bin/bash\nLoaded RC path /tmp/tmp.5tvGz3Yoyq/.envrc\nLoaded watch: \".envrc\" - 2017-08-12T15:28:21+02:00\nLoaded watch: \"../../home/brikou/.config/direnv/allow/be0ef2f322890e4e7fd2d29c957c996f9d66517f837b46059bfe4a0c9cd88ed2\" - 2017-08-12T15:28:21+02:00\nLoaded watch: \"../../home/brikou/.direnvrc\" - 2017-08-12T14:04:03+02:00\nLoaded RC allowed false\nLoaded RC allowPath\nFound RC path /tmp/tmp.5tvGz3Yoyq/.envrc\nFound watch: \".envrc\" - 2017-08-12T15:28:21+02:00\nFound watch: \"../../home/brikou/.config/direnv/allow/be0ef2f322890e4e7fd2d29c957c996f9d66517f837b46059bfe4a0c9cd88ed2\" - 2017-08-12T15:28:21+02:00\nFound RC allowed true\nFound RC allowPath /home/brikou/.config/direnv/allow/be0ef2f322890e4e7fd2d29c957c996f9d66517f837b46059bfe4a0c9cd88ed2\nstat .envrc--development\nFichier\u00a0: '.envrc--development'\nTaille\u00a0: 23          Blocs\u00a0: 8          Blocs d'E/S\u00a0: 4096   fichier\nP\u00e9riph\u00e9rique\u00a0: 801h/2049d In\u0153ud\u00a0: 16003621    Liens\u00a0: 1\nAcc\u00e8s\u00a0: (0664/-rw-rw-r--)  UID\u00a0: ( 1000/  brikou)   GID\u00a0: ( 1000/  brikou)\nAcc\u00e8s\u00a0: 2017-08-12 15:28:21.235689736 +0200\nModif.\u00a0: 2017-08-12 15:28:21.227689982 +0200\nChangt\u00a0: 2017-08-12 15:28:21.227689982 +0200\nCr\u00e9\u00e9\u00a0: -\nstat .envrc--production\nFichier\u00a0: '.envrc--production'\nTaille\u00a0: 22          Blocs\u00a0: 8          Blocs d'E/S\u00a0: 4096   fichier\nP\u00e9riph\u00e9rique\u00a0: 801h/2049d In\u0153ud\u00a0: 16003620    Liens\u00a0: 1\nAcc\u00e8s\u00a0: (0664/-rw-rw-r--)  UID\u00a0: ( 1000/  brikou)   GID\u00a0: ( 1000/  brikou)\nAcc\u00e8s\u00a0: 2017-08-12 15:28:21.223690106 +0200\nModif.\u00a0: 2017-08-12 15:28:21.223690106 +0200\nChangt\u00a0: 2017-08-12 15:28:21.223690106 +0200\nCr\u00e9\u00e9\u00a0: -\nln --symbolic --force .envrc--production .envrc\n(...no error thrown)\necho $ENV\ndevelopment (instead of production, ... nothing loaded)\ndirenv status\ndirenv exec path /usr/local/bin/direnv\nDIRENV_CONFIG /home/brikou/.config/direnv\nDIRENV_BASH /bin/bash\nLoaded RC path /tmp/tmp.5tvGz3Yoyq/.envrc\nLoaded watch: \".envrc\" - 2017-08-12T15:28:21+02:00\nLoaded watch: \"../../home/brikou/.config/direnv/allow/be0ef2f322890e4e7fd2d29c957c996f9d66517f837b46059bfe4a0c9cd88ed2\" - 2017-08-12T15:28:21+02:00\nLoaded watch: \"../../home/brikou/.direnvrc\" - 2017-08-12T14:04:03+02:00\nLoaded RC allowed false\nLoaded RC allowPath\nFound RC path /tmp/tmp.5tvGz3Yoyq/.envrc\nFound watch: \".envrc\" - 2017-08-12T15:28:21+02:00\nFound watch: \"../../home/brikou/.config/direnv/allow/a59a8f9f93952cba7cc0eed246dae625d6c075de1d5a3657f6f5d1a6f54d9af8\" - 1970-01-01T01:00:00+01:00\nFound RC allowed false\nFound RC allowPath /home/brikou/.config/direnv/allow/a59a8f9f93952cba7cc0eed246dae625d6c075de1d5a3657f6f5d1a6f54d9af8\nstat .envrc--production\nFichier\u00a0: '.envrc--production'\nTaille\u00a0: 22            Blocs\u00a0: 8          Blocs d'E/S\u00a0: 4096   fichier\nP\u00e9riph\u00e9rique\u00a0: 801h/2049d In\u0153ud\u00a0: 16003620    Liens\u00a0: 1\nAcc\u00e8s\u00a0: (0664/-rw-rw-r--)  UID\u00a0: ( 1000/  brikou)   GID\u00a0: ( 1000/  brikou)\nAcc\u00e8s\u00a0: 2017-08-12 15:31:17.665920690 +0200\nModif.\u00a0: 2017-08-12 15:28:21.223690106 +0200\nChangt\u00a0: 2017-08-12 15:28:21.223690106 +0200\nCr\u00e9\u00e9\u00a0: -\nstat .envrc--development \nFichier\u00a0: '.envrc--development'\nTaille\u00a0: 23            Blocs\u00a0: 8          Blocs d'E/S\u00a0: 4096   fichier\nP\u00e9riph\u00e9rique\u00a0: 801h/2049d In\u0153ud\u00a0: 16003621    Liens\u00a0: 1\nAcc\u00e8s\u00a0: (0664/-rw-rw-r--)  UID\u00a0: ( 1000/  brikou)   GID\u00a0: ( 1000/  brikou)\nAcc\u00e8s\u00a0: 2017-08-12 15:28:21.235689736 +0200\nModif.\u00a0: 2017-08-12 15:28:21.227689982 +0200\nChangt\u00a0: 2017-08-12 15:28:21.227689982 +0200\nCr\u00e9\u00e9\u00a0: -\n``. @zimbatm if .envrc (the symlink file) is remove before running ln -s, then it work as exepected. The problem comes with the--force` arg which make something special, it is like direnv doesn't have the time to understand that the file is deleted\n```sh\nthis work\n[ -e .envrc ] && rm .envrc\nln --symbolic .envrc--production .envrc\nbut not this\nln --symbolic --force .envrc--production .envrc\n``. Something prevent direnv to be aware that .envrc has been removed, like if the pointer to this file is still the same.. Can you reproduce this issue on your system?. @zimbatm you are right, I confirmrm .envrc && ln -s .envrc--staging .envrcandrm .envrc; ln -s .envrc--staging .envrcdoes not work, whereasrm .envrc\\nln -s .envrc--staging .envrc` do\n. Here is the script I ran to check direnv against master...\nFirst download direnv and build it\n```sh\ncd $(mktemp -d)\ndocker container run \\\n    --rm \\\n    --volume=$PWD:/go/bin \\\n    golang \\\n        go get github.com/direnv/direnv\nsudo mv direnv /usr/local/bin\n```\nThen run my use case...\n```\ncd $(mktemp -d)\ncat << 'EOF' > .envrc--production\nexport ENV=production\nEOF\ncat << 'EOF' > .envrc--development\nexport ENV=development\nEOF\nln --symbolic --force .envrc--development .envrc\ndirenv allow\necho $ENV\ndevelopment\nln --symbolic --force .envrc--production .envrc\nno red warning to allow this new conf\necho $ENV\nstill development :/\n```\nSadly it is still no working :/\nCan you double check this script (by reading and then running it) and tell me what you get?\nThank you for your time on this issue!\n. If I touch .env--production to make it ~~older~~ younger, it does not work neither. :/. @zimbatm can you reopen this issue?. Maybe you can try with virtual box (or vagrant) ?. ",
    "decibel": "Isn't #73 about creating a new alias in the .envrc? I'm just trying to use an existing alias.. ",
    "purpleidea": "Turns out this was probably related to me having a symlink in the path!\n(at ~/code/project/foo which pointed to /elsewhere/whatever/ )\nNot sure what the fix is.... ``\n15:36 < zimbatm> actually I suspect that it's caused by the -P argument topwd \n                 -P` in the stdlib\n15:37 < zimbatm> see https://github.com/direnv/direnv/blob/master/stdlib.sh#L177\n15:37 < zimbatm> if you can try removing the argument and let me know on the \n                 issue\n```\nI can confirm this is most likely the issue.. Please review: https://github.com/direnv/direnv/pull/295. wtf? Somehow the patch you merged, was not the patch I sent. In particular my name in the commit changed. What happened?. Check the sha1 ID of my patch in my branch and what was committed.\nOn Fri, Sep 15, 2017 at 5:36 PM, Marco Ponton notifications@github.com\nwrote:\n\nI'm checking this on my phone but I see the proper patch and your name in\nthe commit. Some kind of issue in your browser session?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/pull/295#issuecomment-329909856, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAIPs4BbujXdOiz2bCW7GSQnEhpy2_Ehks5siu3IgaJpZM4PZbo_\n.\n. It's obvious the patch was mangled. Look at the name field in the two ;)\n\nOn Fri, Sep 15, 2017 at 5:45 PM, Marco Ponton notifications@github.com\nwrote:\n\nThis is normal when the PR is merged no? Look at all the other PRs, they\nhave their commit id, the merge produce another one. Sorry if I\nmisunderstand your concern...\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/pull/295#issuecomment-329911462, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAIPszVByDk_xjF8NEdDOlJ1e5OB1XoNks5siu_mgaJpZM4PZbo_\n.\n. It changed my commit name.\nThat's a major GH bug as far as I'm concerned.\nI'd recommend merging properly with the CLI for now.\nThis breaks a lot of things, for example, if I do git branch -d\nthat-branch my local git doesn't think it's merged!\n\nOn Fri, Sep 15, 2017 at 7:01 PM, zimbatm notifications@github.com wrote:\n\nThis is what happens when using the \"Squash & Merge\" button on github\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/pull/295#issuecomment-329922887, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAIPs3bvkBXrfQbPuidsbQ0nffoeoEulks5siwHfgaJpZM4PZbo_\n.\n. \n",
    "mponton": "I'm checking this on my phone but I see the proper patch and your name in the commit. Some kind of issue in your browser session?. This is normal when the PR is merged no? Look at all the other PRs, they have their commit id, the merge produce another one. Sorry if I misunderstand your concern.... ",
    "ahmedelgabri": "Thanks @zimbatm, actually it seems that I made this typo myself the wiki is right. Sorry for the false alarm.. One more thing, NODE_VERSION_PREFIX doesn't seem to be working with an empty string. This was fixed here https://github.com/direnv/direnv/pull/220 but then was changed back here https://github.com/direnv/direnv/pull/255. Assuming accidentally, otherwise how can I remove the prefix if needed. \nI was trying n instead of nvm & they don't have prefixes for versions. . Thank you. It will be nice to have a release so everyone can benefit from it & it easy to automate. But I\u2019m comfortable with compiling from source too. . Yes & I do have this already in .tmux.conf https://github.com/direnv/direnv/wiki/Tmux#alternatively but the last time I checked it didn't help when I dynamically creating splits from a shellscript. I assume like this?\n```sh\n!/usr/bin/env sh\neval \"$(direnv export bash)\"\ntmux send-keys -t\"SESSION_NAME\":2.1 \"cd ./some/directory && $EDITOR\" C-m\n```\nBut this actually kind of works\n```sh\n!/usr/bin/env sh\ntmux send-keys -t\"SESSION_NAME\":2.1 \"cd ./some/directory && direnv reload; $EDITOR\" C-m\n```\nBut direnv reload just doesn't finish before the $EDITOR is opened, if I exit $EDITOR it finish direnv reload, so it feels that it's stuck in the middle while $EDITOR was called. Honestly I dunno if this a problem with direnv reload itself or my shell script.. I tried that \"replacing all direnv reload with eval \"$(direnv export bash)\" & it didn't change anything, $EDITOR still runs before eval \"$(direnv export bash)\" finishes. Here is how the script looks like\n```sh\n!/usr/bin/env sh\ntmux rename-window \"test\"\ntmux new-window -n \"$EDITOR\"\ntmux send-keys -t\"test\":1.1 'cd /path/to/project/with/.envrc/ && eval \"$(direnv hook zsh)\"; $EDITOR' C-m\ntmux select-window -t\"test\":1.1\n```. Ok here is how to reproduce \nSome setup\nsh\nmkdir /tmp/test-direnv && cd /tmp/test-direnv && echo \"export FOO=foo\" > .envrc && direnv allow && cd ~\nNow run the following\nsh \ncd /tmp/test-direnv && eval \"$(direnv export bash)\"; $EDITOR \n\n. Yeah that worked with normal export FOO=foo but it doesn't work with node \ud83e\udd14 \n.envrc\nsh\nset -e\nuse node\n.nvmrc\nsh\n8.9.1\nIf I do this & run :!node -v from inside vim it doesn't output 8.9.1 it outputs the global version not the project specific version.. tried :echo $PATH the path is missing the right node version bin, if I exit & open again :echo $PATH will be fixed.. This works fine, I think the problem is at my end. For now I split this into two & it works\ntmux\ntmux send-keys -t\"SESSION_NAME\":2.1 'cd ./some/directory && eval \"$(direnv export bash)\"' C-m\ntmux send-keys -t\"SESSION_NAME\":2.1 '$EDITOR' C-m\nI'll close it & dig deeper why it's not working. Thanks very much for the help. ",
    "elventear": "298 works for me \ud83d\udc4d . Works for me \ud83d\udc4d .",
    "haizaar": "This one seem yours, isn't it? https://launchpad.net/~zimbatm/+archive/ubuntu/direnv\nDo you have any plans to populate it with packages?\nDownloading binary is nice, but then I'm missing updates.\nThank you!. Thanks for the explanation.\nThe hint you suggest does the trick obviously. May be it worth posting under \"Common things people don't know\"?. Good day,\nDo you know how your workaround can be applied to zsh?. Yes I tried and it doesn't unfortunately. The problem is that zsh does not\nsupport functions in environment variables.\nDo you have other ideas?\nOn Wed., 28 Nov. 2018, 08:13 zimbatm <notifications@github.com wrote:\n\nIt should work the same under zsh AFAIK. Have you tried it?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/408#issuecomment-442219175, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADjWYOnObs1fKEjdN-zBupBeFu3JUv1ks5uzasQgaJpZM4YQLcn\n.\n. I see\nNo worries, replaced with source_env .env :)\n\nAs for PR - looks like a nice thing to start with when I decide to learn Go one day. To clarify - the link you sent me is a direnv's own implementation of dotenv, right?. Thank you! Looking forward to test in the next release.. ",
    "rolandjitsu": "@zimbatm I did try to change the order, but that did not help much. I see, so direnv also tries to load a node binary? Or did I misinterpret that?\nWhat do you suggest in this case?\n. I will close this as it's mostly about how the user sets up their env. Thanks for the help @zimbatm . ",
    "pm-nsimic": "Additional environment: \nbash 4.4.12(1)-release (x86_64-apple-darwin16.3.0) \nfound in /usr/local/bin/bash. doing export DIRENV_BASH=/bin/bash fixes the problem. /usr/local/bin/bash --noprofile works without problems.\nadding export DIRENV_BASH=/usr/local/bin/bash to the .zshrc fixes the problem just like export DIRENV_BASH=/bin/bash does.\ni do have SHELL=/usr/local/bin/zsh in my exports, perhaps that causes the problem?. ",
    "tristan957": "I am also experiencing this issue while attempting to package direnv for Solus. Let me know if I can help solve the issue. Found a solution where the current directory is the tar file:\ncd ..\nmkdir src\nmv direnv-$version src/direnv\nexport GOPATH=`pwd`\ncd src/direnv. ",
    "kierun": "Getting the same problem and tried this:\n```\n; mkdir ~/go                            \n; export GOPATH=~/go  \n; go get github.com/direnv/direnv\ngithub.com/direnv/direnv\ngo/src/github.com/direnv/direnv/cmd_hook.go:27: undefined: os.Executable\ngo/src/github.com/direnv/direnv/config.go:52: undefined: os.Executable\ngo/src/github.com/direnv/direnv/log.go:54: undefined: log.Output\n```. Of course I have an old version since it is on ubuntu 14.04 LTS\u2026\n; go version\ngo version go1.2.1 linux/amd64\n\u2639. One can update using the commands from the main Golang repository so should be more or less \"safe\":\nsudo apt-get purge golang\nsudo add-apt-repository ppa:gophers/archive\nsudo apt-get update\nsudo apt-get install golang-1.10-go\nThen doing \n; mkdir ~/go                              \n; export GOPATH=~/go    \n; go get github.com/direnv/direnv\n; cp go/bin/direnv ~/bin\nWorks just fine.\n. @zimbatm Super. Thank you.. ",
    "peterhoeg": "peter@dolores:~ $ direnv --help\ndirenv v2.13.1\nFollowing nixos-unstable.. Sure - this is hardly a high priority item considering cd foo; cd baz works. Thanks for your hard work. ping @zimbatm . ",
    "etcusrvar": "Reproducible with direnv 2.15.2:\nmkdir -p a/b\ntouch a/.envrc\ndirenv allow a\nln -s /tmp a/tmp\ncd a/tmp\nAs @peterhoeg says, cd a followed by cd tmp does work fine.\nNot a fully tested proper fix, but this fixes the issue for me (on Linux)-- tests if current dir is a symlink.\ndiff --git a/stdlib.sh b/stdlib.sh\nindex b64c65f..842d537 100644\n--- a/stdlib.sh\n+++ b/stdlib.sh\n@@ -178,7 +178,11 @@ source_env() {\n   local rcpath=${1/#\\~/$HOME}\n   local rcfile\n   if ! [[ -f $rcpath ]]; then\n-    rcpath=$rcpath/.envrc\n+    if [[ -L \"$(pwd)\" ]]; then\n+      rcpath=\"$(cd \"$(dirname \"$(pwd)/$rcpath\")\" && pwd)/.envrc\"\n+    else\n+      rcpath=$rcpath/.envrc\n+    fi\n   fi. I tried various code changes to the stdlib source_env function, and ended up with this as the simplest change that works with simple and complex symlink directory layouts:\nif ! [[ -f $rcpath ]]; then\n-    rcpath=$rcpath/.envrc\n+    rcpath=$(expand_path \"$rcpath\")\n   fi\nThis code does, however, break one current unit test (missing-file-source-env).\nOverriding the source_env function in my ~/.config/direnv/direnvrc with this one-line change meets all the requirements and expectations I have in my environments.\nBut this may not be the expected/desired behavior for inclusion in the product (since it breaks a unit test). So I include this code snippet here rather than in the PR, https://github.com/direnv/direnv/pull/354, just for reference.. You are correct-- I verified that this fix as is will only work if $(pwd) itself is a symlink. It won't work if there is a symlink somewhere down the path. For that to work, there would have to be something like a realpath or readlink -f check. Something like this:\n  if [[ \"$PWD\" != \"$(readlink -f \"$PWD\")\" ]]; then\n    rcpath=\"$(cd \"$(dirname \"$PWD/$rcpath\")\" && pwd)\"\n  fi\n\nI have this working locally on both Linux and macOS and can add to this PR if you think that using realpath or readlink is an acceptable solution. There are compatibility/portability issues with using either of these commands, and I don't know how important that is to the project.. ",
    "simonw": "Interestingly it worked fine for me in OS X Safari.. https://direnv.net/ is working fine for me today in Chrome OS X, Firefox OS X and Safari OS X.. ",
    "Alex-Mann": "As a temporary fix, I've done this in my .envrc file:\nexport $(cat .env | xargs). @zimbatm I see, ok well I figured out the problem. I had a variable declared like so:\nSOME_VAR=\nEssentially as a placeholder. I figured it would either not parse this or would just result in an empty string. This is good to know though.. Awesome! Thanks for the quick update. Do you handle comments (ie. // some comment) in any way? Perhaps by omitting them or some other means? . ",
    "MemoryReload": "@peterfpeterson Does layout python command support this option?. @peterfpeterson Since as the wiki said, layout python2 is a hand short method for layout python 2.x.x(x here may be you precise version number), I just want to know whether this --system-site-packages option is supported or not for layout python 2.x.x. Thanks!. @peterfpeterson   Thanks for your explanation. \ud83d\udc4d . @speed-of-light Yeah, you really save my ass buddy! The use_node() function in stdlib.sh need these environment variables and the default settings are not right. So we must fix this by ourselves\n. Thanks again!. @zimbatm  OK, I'll give a try. :). ",
    "devinus": "Just started getting this as well.. I can confirm this is only an issue on v2.13.2 and not v2.13.1.. ",
    "verginer": "On Ubuntu VERSION=\"16.04.3 LTS (Xenial Xerus)\" the command export ''=''; raises the same issue bash: export: `=': not a valid identifier.\nIn which bash version is this a valid command?. ",
    "YOwatari": "In version 2.13.2, it also says the same.. ",
    "hdlindner": "Ok - is there a specific place where I should run    go get\ngithub.com/direnv/direnv/  ?\nI have already run git clone https://github.com/direnv/direnv\nand I have a folder for direnv and a folder for go.\nBest,\nHarry\nOn Fri, Dec 15, 2017 at 1:17 PM, David Glasser notifications@github.com\nwrote:\n\nI'm not sure why the README doesn't explain this, but Go really wants you\nto put your checkout in a particular place. The easiest way to do this is,\ninstead of doing a git clone yourself, just running go get\ngithub.com/direnv/direnv; it will put the source in ~/go/src/\ngithub.com/direnv/direnv (and download the dependency in question) and\nput the binary in ~/go/bin.\nNote that there are binary releases of direnv at\nhttps://github.com/direnv/direnv/releases; Go builds everything as a\nfully linked static binary so they are likely to just work for you (vs with\nshared library binaries where you download them and learn that you have the\nwrong libc on your system or whatever).\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/318#issuecomment-352075493, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADTOBKBWs0EpdHNz9y-u34HFnUd2MafWks5tAre-gaJpZM4RD0dL\n.\n\n\n-- \nMaster of Science in Nuclear Engineering\nMaster of Public Policy\n513-600-5659\n. Ok - so I deleted the folder direnv and then ran go get ....\nWhere do I run make install now? or is direnv installed?\nOn Fri, Dec 15, 2017 at 1:28 PM, David Glasser notifications@github.com\nwrote:\n\n(You can get rid of the git clone you made; go get will do its own git\nclone.)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/318#issuecomment-352077823, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADTOBEZIRHCpRouzdCRzSz_8jb5iFpv0ks5tArpIgaJpZM4RD0dL\n.\n\n\n-- \nMaster of Science in Nuclear Engineering\nMaster of Public Policy\n513-600-5659\n. Nice - ok, I appreciate all your help.  You are right: direnvis  in ~/go/bin:\nf:~ bootadmin$ cd go\nf:go bootadmin$ ls\nbin pkg src\nf:go bootadmin$ cd bin\nf:bin bootadmin$ ls\ndirenv\nNow I am at this step:\nBASH\nAdd the following line at the end of the ~/.bashrc file:\neval \"$(direnv hook bash)\"\nMake sure it appears even after rvm, git-prompt and other shell extensions that manipulate the prompt.\nI don't think I have a .bashrc:  from running ls -la | more inside my user folder:\ndrwxr-xr-x   15 bootadmin  staff    510 Dec  6 17:02 .atom\n-rw-------    1 bootadmin  staff  11939 Dec 15 13:01 .bash_history\n-rw-r--r--    1 bootadmin  staff    406 Nov  3 13:46 .bash_profile\n-rw-r--r--    1 bootadmin  staff    238 Oct  7 18:43 .bash_profile.pysave\ndrwx------   43 bootadmin  staff   1462 Dec 15 13:02 .bash_sessions\ndrwxr-xr-x    5 bootadmin  staff    170 Oct  8 00:06 .config\nDo I create a bashrc profile now?  Does it have to have specific stuff in it?\nFor binaries, I see https://github.com/direnv/direnv/releases, but I don't know which to download (I have a mac) or what do once I download it.  I'd love to learn.\nThanks for your help again!. Ok - I created a .bashrc file in my root directory (for me is my user folder for bootadmin.)  And, it appears that sourcing your bashrc in your bash_profile is common practice (from googling.)\nI put the eval \"$(direnv hook bash)\" in the bashrc file.\nHow can I use and test direnv?   Like, I want to start up a virtual enviornment, see that it is working with some environment variables and echos, and I want to close (or get out of) it.\nThanks for your time on this. After I understand it all, I'll write up a newbie guide for people who don't have much experience in any of this!. ",
    "dansteren": "At this point you should be able to follow along with the example in the README.. ",
    "kpthomas": "I created a pull request to clarify the location that git clone needs to happen #358 \nMaybe it would be more flexible if the README instructed the user to run go get github.com/direnv/direnv instead?. ",
    "zaro": "What I found as a workaround for me is  to copy the current use_node definition from direnv stdlib , and add it to ~/.config/direnv/direnvrc with \n node_prefix=\"${NODE_VERSIONS}/${node_version_prefix}${node_prefix}\"\n\nline commented.. ",
    "steve-ross": "I am working on some additional helpers to use direnv with some of our internal projects. We do a lot of node and typically we use NVM to manage versions. Anyway... I finally put it in a repo yesterday. I'm sure linking to this will show how pitiful my bash skills are however, you can find it here if anyone is interested: https://github.com/steve-ross/direnv-helpers\nenables you to put stuff like:\nrequires_nvm in your projects .envrc \nWhich then reads your .nvmrc file, installs the required node version via NVM if it is missing, runs npm install (if there isn't a node_modules), does a use node etc\n. @wilmoore yeah, I totally get that. Our main reason for creating some of these helpers was that we didn't want to have to copy/paste modify configs for the multiple node projects we work on. It also helps us spin up new developers very quickly.. ",
    "speed-of-light": "this is what worked for me\nexport NODE_VERSIONS=~/.nvm/versions/node\nexport NODE_VERSION_PREFIX='v'\nuse node 10.4\ndirenv version\n2.16.0. ",
    "nbari": "Hi @zimbatm looks good.  Consider  $vcs_info_msg_0_   it may help to automate things based on the existing branch without the need to remember to call every time direnv switch <context-name>. Hi @zimbatm many thanks for the example will give a try.\nJust one question, the script code within .envrc if not using watch_file only is executed once or in each direnv allow call right?  So basically I could add any complex code/logic and not have to worry that every time is going to be executed and add extra load to the system, is this correct?\n. Hi @Globegitter from the ssh-vault side in the latest macOS there is this issue https://github.com/ssh-vault/ssh-vault/issues/31 the one is not allowing to decrypt without typing the password, don't know how from the direnv side this could be managed in order to enter the password requests so that once the \"vault\" is decrypted it could load the variables.. Hi @zimbatm,  good approach \ud83d\udc4d , also like the idea that direnv still light so no need to expand it\n. ",
    "Globegitter": "@zimbatm Is there any roadmap or specific issue that tracks the context idea? I think this is a really powerful feature that would allow for some nice workflows.. Ahh the second option is a very interesting one I have not thought about - thanks for sharing that. I think these two options are sufficient enough to fulfill this use-caw and I can close this - thanks for the response.. @zimbatm it is quite straight-forward indeed - is it also possible to extend the stdlib for all subdirectories rather than just via a ~/.direnvrc? The idea being here that I could put a .direnvrc at the root of our monorepo that defines this function and then all projects that make use of the .envrc have access to the method without having to redefine or source it.. Makes sense and this is not something you would accept in the default stdlib? (if not feel free to close as the problem has been resolved otherwise) . Thanks for the response.. ",
    "sardaukar": "@zimbatm thanks, this is great. not sure how moving into ~/.direnvrc would look like, but this is already a huge boon. Thanks, I'll try doing that!. ",
    "r-bar": "@zimbatm Looks like the machine i discovered the issue on was using direnv from the Ubuntu artful apt repository. The version reported by direnv is 2.11.3. I just downloaded and compiled the latest master (with version 2.14.0) and can confirm this behavior no longer exists. Thanks for your help!. @zimbatm I have not participated in the ubuntu packaging process. From the package's page it looks like it is maintained by the team that forks off the debian testing repo package. By updating debian testing it would filter into the next ubuntu release. From what I understand debian testing would be much easier to update. Ubuntu artful version will be frozen unless you make a backport. Sorry If I repeated what you already know. Both those links have mailing lists for their respective maintainers. Depending what you try to update I would start there.. ",
    "fschuindt": "You're right, @zimbatm. Thank you. Yeah, they looked but didn't spotted the missing export word. \ud83d\ude04 . ",
    "ttuegel": "The main use of IN_NIX_SHELL is for files that change their behavior depending on whether they are loaded by nix-build or nix-shell. If direnv sets IN_NIX_SHELL, then nix-build fails for such files.. > sorry I don't get it, shouldn't nix-build filter the environments from the cli?\nThe build is isolated from the environment, but the evaluation is NOT because Nix has a getEnv builtin. And the evaluation determines what goes into the build.\n. Thanks!. ",
    "nick-youngblut": "For what it's worth, I tried the following, but it didn't work:\nIn my ~/.direnv:\nexport_function() {\n  local name=$1\n  local alias_dir=$PWD/.direnv/aliases\n  mkdir -p \"$alias_dir\"\n  PATH_add \"$alias_dir\"\n  local target=\"$alias_dir/$name\"\n  if declare -f \"$name\" >/dev/null; then\n    echo \"#!/usr/bin/env bash\" > \"$target\"\n    declare -f \"$name\" >> \"$target\" 2>/dev/null\n    echo \"$name\" >> \"$target\"\n    chmod +x \"$target\"\n  fi\n}\nIn my .envrc:\n```\n_CONDA_EXE=\"/ebio/abt3_projects/databases/miniconda3/bin/conda\"\nexport _CONDA_EXE\n_CONDA_ROOT=\"/ebio/abt3_projects/databases/miniconda3\"\nexport _CONDA_ROOT\n_conda_set_vars() {\n    # set _CONDA_SHELL_FLAVOR\n    if [ -n \"${BASH_VERSION:+x}\" ]; then\n        _CONDA_SHELL_FLAVOR=bash\n    elif [ -n \"${ZSH_VERSION:+x}\" ]; then\n        _CONDA_SHELL_FLAVOR=zsh\n    elif [ -n \"${KSH_VERSION:+x}\" ]; then\n        _CONDA_SHELL_FLAVOR=ksh\n    elif [ -n \"${POSH_VERSION:+x}\" ]; then\n        _CONDA_SHELL_FLAVOR=posh\n    else\n        # default to dash; if we run into a problem here, please raise an issue\n        _CONDA_SHELL_FLAVOR=dash\n    fi\nif [ -z \"${_CONDA_EXE+x}\" ]; then\n    if [ -n \"${_CONDA_ROOT:+x}\" ]; then\n        # typically this should be for dev only; _CONDA_EXE should be written at top of file\n        # for normal installs\n        _CONDA_EXE=\"$_CONDA_ROOT/conda/shell/bin/conda\"\n    fi\n    if ! [ -f \"${_CONDA_EXE-x}\" ]; then\n        _CONDA_EXE=\"$PWD/conda/shell/bin/conda\"\n    fi\nfi\n\n# We're not allowing PS1 to be unbound. It must at least be set.\n# However, we're not exporting it, which can cause problems when starting a second shell\n# via a first shell (i.e. starting zsh from bash).\nif [ -z \"${PS1+x}\" ]; then\n    PS1=\nfi\n\n}\nexport_function _conda_set_vars\n_conda_hashr() {\n    case \"$_CONDA_SHELL_FLAVOR\" in\n        zsh) rehash;;\n        posh) ;;\n        *) hash -r;;\n    esac\n}\nexport_function _conda_hashr\n_conda_activate() {\n    if [ -n \"${CONDA_PS1_BACKUP:+x}\" ]; then\n        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation\n        # after conda updated to >= 4.4. See issue #6173.\n        PS1=\"$CONDA_PS1_BACKUP\"\n        unset CONDA_PS1_BACKUP\n    fi\nlocal ask_conda\nask_conda=\"$(PS1=\"$PS1\" $_CONDA_EXE shell.posix activate \"$@\")\" || return $?\neval \"$ask_conda\"\n\n_conda_hashr\n\n}\nexport_function _conda_activate\n_conda_deactivate() {\n    local ask_conda\n    ask_conda=\"$(PS1=\"$PS1\" $_CONDA_EXE shell.posix deactivate \"$@\")\" || return $?\n    eval \"$ask_conda\"\n_conda_hashr\n\n}\nexport_function _conda_deactivate\n_conda_reactivate() {\n    local ask_conda\n    ask_conda=\"$(PS1=\"$PS1\" $_CONDA_EXE shell.posix reactivate)\" || return $?\n    eval \"$ask_conda\"\n_conda_hashr\n\n}\nexport_function _conda_reactivate\nconda() {\n    if [ \"$#\" -ge 1 ]; then\n        local cmd=\"$1\"\n        shift\n    else\n        local cmd=\"\"\n    fi\n    case \"$cmd\" in\n        activate)\n            _conda_activate \"$@\"\n            ;;\n        deactivate)\n            _conda_deactivate \"$@\"\n            ;;\n        install|update|uninstall|remove)\n            $_CONDA_EXE \"$cmd\" \"$@\"\n            _conda_reactivate\n            ;;\n        *)\n            $_CONDA_EXE \"$cmd\" \"$@\"\n            ;;\n    esac\n}\nexport_function conda\n_conda_set_vars\nif [ -z \"${CONDA_SHLVL+x}\" ]; then\n    export CONDA_SHLVL=0\nfi\n```\nWith this setup, the _conda* functions are exported, but conda activate just lists the conda executable help:\n```\n$ conda activate\nusage: conda [-h] [-V] command ...\nconda is a tool for managing and deploying applications, environments and packages.\nOptions:\npositional arguments:\n  command\n    clean        Remove unused packages and caches.\n    config       Modify configuration values in .condarc. This is modeled\n                 after the git config command. Writes to the user .condarc\n                 file (/ebio/abt3/nyoungblut/.condarc) by default.\n    create       Create a new conda environment from a list of specified\n                 packages.\n    help         Displays a list of available conda commands and their help\n                 strings.\n    info         Display information about current conda install.\n    install      Installs a list of packages into a specified conda\n                 environment.\n    list         List linked packages in a conda environment.\n    package      Low-level conda package utility. (EXPERIMENTAL)\n    remove       Remove a list of packages from a specified conda environment.\n    uninstall    Alias for conda remove. See conda remove --help.\n    search       Search for packages and display associated information. The\n                 input is a MatchSpec, a query language for conda packages.\n                 See examples below.\n    update       Updates conda packages to the latest compatible version. This\n                 command accepts a list of package names and updates them to\n                 the latest versions that are compatible with all other\n                 packages in the environment. Conda attempts to install the\n                 newest versions of the requested packages. To accomplish\n                 this, it may update some packages that are already installed,\n                 or install additional packages. To prevent existing packages\n                 from updating, use the --no-update-deps option. This may\n                 force conda to install older versions of the requested\n                 packages, and it does not prevent additional dependency\n                 packages from being installed. If you wish to skip dependency\n                 checking altogether, use the '--force' option. This may\n                 result in an environment with incompatible packages, so this\n                 option must be used with great caution.\n    upgrade      Alias for conda update. See conda update --help.\noptional arguments:\n  -h, --help     Show this help message and exit.\n  -V, --version  Show the conda version number and exit.\nconda commands available from other packages:\n  env\n```\nThe ask_conda=\"$(PS1=\"$PS1\" $_CONDA_EXE shell.posix activate \"$@\")\" || return $? is probably the issue, but I'm not sure what to do.. If I do that, then the base conda environment is activated. However, if I try to change environments with conda activate MY_CONDA_ENV, then I get the error:\n```\nCommandNotFoundError: Your shell has not been properly configured to use 'conda activate'.\nIf your shell is Bash or a Bourne variant, enable conda for the current user with\n$ echo \". /ebio/abt3_projects/databases/miniconda3/etc/profile.d/conda.sh\" >> ~/.bashrc\n\nor, for all users, enable conda with\n$ sudo ln -s /ebio/abt3_projects/databases/miniconda3/etc/profile.d/conda.sh /etc/profile.d/conda.sh\n\nThe options above will permanently enable the 'conda' command, but they do NOT\nput conda's base (root) environment on PATH.  To do so, run\n$ conda activate\n\nin your terminal, or to put the base environment on PATH permanently, run\n$ echo \"conda activate\" >> ~/.bashrc\n\nPrevious to conda 4.4, the recommended way to activate conda was to modify PATH in\nyour ~/.bashrc file.  You should manually remove the line that looks like\nexport PATH=\"/ebio/abt3_projects/databases/miniconda3/bin:$PATH\"\n\n^^^ The above line should NO LONGER be in your ~/.bashrc file! ^^^\n```\nI can still use source activate MY_CONDA_ENV, but I believe source activate has been depreciated. I can also change the environment by editing the .envrc file (ie., changing conda activate to conda activate MY_CONDA_ENV.. No, adding that code to my .envrc doesn't give the error. That code works and will activate the conda environment. However, if I use the code:\nsource /ebio/abt3_projects/databases/miniconda3/etc/profile.d/conda.sh\nconda activate\nin my .envrc, the base conda environment will be activated, but I then can't use conda activate  MY_CONDA_ENV to activate a different conda environment. I either have to edit the .envrc and change conda activate to conda activate MY_CONDA_ENV or use source activate MY_CONDA_ENV on the command line.. Yeah, editing the .envrc to  change the active conda environment works, and that's what I used to do, but it's just nice to have the option of just using the .envrc to set up conda (previously, just adding conda to PATH) and manually activating the specific conda environment. For instance, my research lab uses shared project directories, where multiple people may be running Jupyter notebooks or doing other analyses, and each wants to use conda, but each wants to use a different conda environment. I guess we may have to change how we are using direnv + conda. . Yeah, /ebio/ is a shared file system where all anaconda/miniconda installs are located. We do have a bit complicated use-case, with multiple shared projects with many different conda environments. We have a central, shared miniconda install that we are trying to get all users to use. But we still have some other installs of conda used for development and other purposes. \nEssentially, with direnv + conda, we want to activate a specific conda environment when moving into specific project directories. Some users like the concept of activating a particular conda environment when moving into a particular project directory, but other users would rather activate conda environments manually with source activate MY_CONDA_ENV (or now conda activate MY_CONDA_ENV). This has worked pretty well with source activate MY_CONDA_ENV, but conda activate MY_CONDA_ENV is limiting us to editing the .envrc each time we want to switch conda environments. . Thanks for the suggestion! The main issue with the .direnvrc solution is that only one conda install can be used (in the example: /ebio/abt3_projects/databases/miniconda3). Maybe there's not a perfect solution for what we'd like... . @ctrueden I gave your method a try and it worked great! Thanks for the nice solution. I did make a modification so that multiple different minconda/anaconda installs can be used with direnv:\n.direnvrc\nuse_conda() {\n    . \"$1\"etc/profile.d/conda.sh\n    conda activate \"$2\"\n.envrc\nCONDA_BASE=/ebio/abt3_projects/software/dev/miniconda3_dev/\nexport PATH=$CONDA_BASE\"bin:\"$PATH\nuse_conda $CONDA_BASE py3_test_env\nI can then just change CONDA_BASE to use alternative miniconda installs on my system. Update: this doesn't seem to work with conda activate for conda v4.6.1, at least with a bash shell. I get the following when running conda activate:\n```\nCommandNotFoundError: Your shell has not been properly configured to use 'conda activate'.\nTo initialize your shell, run\n$ conda init <SHELL_NAME>\n\nCurrently supported shells are:\n  - bash\n  - fish\n  - tcsh\n  - xonsh\n  - zsh\n  - powershell\nSee 'conda init --help' for more information and options.\nIMPORTANT: You may need to close and restart your shell after running 'conda init'.\n```\nI've tried the simple test of just taking the code that conda init adds to the .bashrc and putting it in the .envrc file, but this does not work. The code is:\n```\n>>> conda initialize >>>\n!! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/ebio/abt3_projects/software/dev/miniconda3_dev/bin/conda' 'shell.bash' 'hook' 2> /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n    if [ -f \"/ebio/abt3_projects/software/dev/miniconda3_dev/etc/profile.d/conda.sh\" ]; then\n        . \"/ebio/abt3_projects/software/dev/miniconda3_dev/etc/profile.d/conda.sh\"\n    else\n        export PATH=\"/ebio/abt3_projects/software/dev/miniconda3_dev/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n<<< conda initialize <<<\n```\nI can still use source activate, but this is depreciated and will soon no longer be an option.. ",
    "ctrueden": "I ran into this issue as well when trying out direnv for the first time to activate a conda environment corresponding to a particular directory.\nI was able to make things work without hardcoding any paths in .envrc as follows:\n\nPut use conda scijava into the directory's .envrc\nPut the following function into ~/.direnvrc:\n    shell\n    use_conda() {\n      . /usr/local/miniconda3/etc/profile.d/conda.sh\n      conda activate \"$1\"\n    }\ndirenv allow, of course\n\nIn this way, the path to the conda installation is only hardcoded in ~/.direnvrc, not in the directory's .envrc. So every user could set their own conda installation location, no? The only thing that doesn't work for me is the PS1 prompt hacking that conda does to indicate the activate environment. But the environment still seems to be active, since the environment variables are all propagated.\n@nick-youngblut Am I missing something?\n@rkaramc @jkglasbrenner I see you are doing more complicated things; what other considerations are in play here? Are there any changes that could be done on the direnv side to make things simpler?. @nick-youngblut I upgraded to conda 4.6.2 on macOS 10.14.3, and it still works for me with zsh. I enable conda on my system via the following code sourced from .bashrc and .zshrc:\n```\nEnable conda if installed.\nif [ -d \"$HOME/miniconda3\" ]\nthen\n  . \"$HOME/miniconda3/etc/profile.d/conda.sh\"\nelif [ -d /usr/local/miniconda3 ]\nthen\n  . /usr/local/miniconda3/etc/profile.d/conda.sh\nfi\n``\nI did not useconda init`.\nI also tried with bash, but receive the following (probably unrelated) error upon shell startup:\nbash: typeset: -g: invalid option\ntypeset: usage: typeset [-afFirtx] [-p] name[=value] ...\nbash: (r)_direnv_hook: syntax error in expression (error token is \"_direnv_hook\")\nCouldn't find anything from some quick web searches.. ",
    "pydo": "Thanks for explaining the direnv workflow. But is this module https://github.com/direnv/direnv/wiki/Python#-virtualenv  the only way to activate virtualenvs ?\nThe docs say it will automatically create a virtualenv here .direnv/python-$python_version, but I don't want virtualenvs to be magically created for me, I just want to specify a path to a virtualenv to be activated.\nIs this possible with the stdlib?\nThanks. Thanks for the quick reply. I should probably read up on bash scripting.\nLast question, I noticed I don't have a virtualenv prompt when direnv activates a virtualenv.\nex : (venv) user@user ~/code/project> instead my prompt looks like user@user ~/code/project>\nIs there a way to have direnv display the prompt for me, or will I have to configure this in my own shell (fish)?. @mals14 I just use a fish theme that does it auto-magically for me https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md#lambda .\nEDIT\nI'm not sure why this PS1 var is needed, I just checked my theme's source code and all it does it check if VIRTUAL_ENV is set, if so it displays it in the left prompt https://github.com/hasanozgan/theme-lambda/blob/master/fish_prompt.fish#L61. ",
    "mathcass": "@pydo, I came across this thread and learned a bit. Thank you for asking about it and for @zimbatm's answer about PS1. \nIt looks like some info for changing the prompt is in the wiki (in case you were looking for some workarounds).. ",
    "mals14": "@pydo did you learn how to change PS1 in fish shell when using direnv to activate a virtual environment? Thanks.. @pydo \nThanks for the reply. For some reason lambda prompt works very well for me until I am in a normal directory. Once I enter into a virtual environment directory, then the prompt simply changes to \">\". Must be something with my settings somewhere.\nBobthefish theme seems to work. Although I like lambda for its two line and full display path. But lambda does not work. I have fish 3.0, and latest stable omf and lambda theme. :(. > Sure. \"activating\" a virtualenv is basically doing two things, so you can add those in your .envrc:\n\nshell\nexport VIRTUAL_ENV=path/to/your/virtualenv\nPATH_add \"$VIRTUAL_ENV/bin\"\nIf you are tired of copying those around, make a function in your ~/.config/direnv/direnvrc file:\nshell\nactivate_virtualenv() {\n  export VIRTUAL_ENV=$1\n  PATH_add \"$VIRTUAL_ENV/bin\"\n}\nand then in your .envrc:\nshell\nactivate_virtualenv path/to/virtualenv\n\n@zimbatm a question if you can help.\nI create virtual environment using python3 -m venv .. \nThen I create a .envrc that has layout python-venv.\nI have already created a function the function layout_python-venv() {... in ~/.config/direnv/direnvrc.\nIt feels like to me that direnv creates its own virtual env and the python3 -m venv command is superfluous at this point.\nAm I right?\nAnd if my understanding is right, then would this second approach that you advised earlier in the thread help avoid the creation of venv by direnv.\nFor the Fish shell:\nCreate a function like so in functions directory\nshell\nfunction activate_virtualenv\n    set -x VIRTUAL_ENV $argv\n    set PATH \"$VIRTUAL_ENV/bin\" $PATH\nend\nAnd then .envrc be\nshell\nactivate_virtualenv /Users/smalani/Documents/scripts-programming/python-code/analyze-keywords-in-logs.py\nSounds like to me that using the second approach avoids the need to have the function layout_python-venv() {... in ~/.config/direnv/direnvrc. And the second approach does not create the virtual environment again. \nWhich one do you advise? Thanks.. ",
    "anp": "I'll take a look at these failing tests soon.. Agreed! There's one edge case that I think it should handle, which is warning the user (over stderr?) if the config file exists but can't be parsed. Going to add that now, let me know if you'd like to handle that case differently.. Updated, my original intent was to not error in this circumstance, but my unfamiliarity with Go meant I was accidentally assigning a value to the err value for the whole functions! Fixed and tests are passing for me locally. Will wait for CI.. ",
    "Oppodelldog": "Same issue here, I couldn't figure out how to use direnv under windows.\nPlease support some documentation.. ",
    "DmitryH3": "I'm seeing the same issue, when trying to append to PATH.  Basically, it goes something like:\n$echo $PATH\n/usr/bin:/working path  # All working\nNow say I want to add this to my .envrc:\nexport PATH=\"/test path\":$PATH\nafter switching to the directory, PATH is converted to:\nC:\\msys2-64\\test path;C:\\msys2-64\\usr\\bin;C:\\msys2-64\\working path\nAnd at this point things totally don't work.. ",
    "ibraimgm": "I also have the path mangling problem on Windows on git-bash. I managed to work around the problem with a little hack:\n# my .envrc\nexport GOPATH=\"$PWD\"\nexport PATH=$GOPATH/bin:$PATH\n\nNow, I created a small script fo \"fix\" the path mangling:\n# ~/fix.sh : Hackish way to 'fix' path mangling\nexport USR_BIN=/c/Git/usr/bin\nexport SED=$USR_BIN/sed.exe\nexport ECHO=$USR_BIN/echo.exe\nexport PATH=$($ECHO $PATH | $SED -E 's/C:/\\/c/g' | $SED -E 's/\\\\/\\//g' | $SED -E 's/;/:/g')\n\nThen, with the help of Bash-preexec, I just call the \"fix\" script before a command is executed:\n# ~/.profile\neval $(direnv hook bash)\nsource ~/.bash-preexec.sh\nprecmd() { source ~/fix.sh ; }\n\nThis way, before any command is executed the (possible) mangling on path is undone. Not the best (or most beautiful) solution, but so far I had no problems with this hack.. ",
    "ivan-m": "Using Cygwin (installed to the non-stand location of C:\\workspace\\ext\\cygwin), even if my ~/.bash_profile contains just the following (having downloaded the latest AMD64 executable and saved it to the C:\\workspace\\ext\\cygwin\\bin\\):\n```bash\nexport PATH=\"/usr/bin\"\nalias direnv=\"/usr/bin/direnv.windows-amd64.exe\"\neval \"$(direnv hook bash)\"\n```\nthen I still get this on every prompt:\nbash: C:\\workspace\\ext\\cygwin\\bin\\direnv.windows-amd64.exe: command not found\nYet this succeeds:\n```bash\nmachine ~\n$ direnv version\n2.17.0\n-bash: C:\\workspace\\ext\\cygwin\\bin\\direnv.windows-amd64.exe: command not found\nmachine ~\n$ echo $?\n0\n-bash: C:\\workspace\\ext\\cygwin\\bin\\direnv.windows-amd64.exe: command not found\n```\nI tried using bash-preexec as suggested by @ibraimgm but that didn't work either.. ",
    "Shamus03": "I'm having the path-mangling issue as well, even with an empty .envrc.  I haven't found a use case for changing PATH using direnv, so I just added PATH to the IGNORED_KEYS list as a workaround.  Hoping to see a fix soon.. ",
    "mcauto": "\nInstall direnv\nmove program \n```bash\n$ mv direnv.windows-amd64.exe ${GOPATH}/bin/direnv\n$ direnv\ndirenv v2.19.2\nUsage: direnv COMMAND [...ARGS]\n\nAvailable commands\nallow [PATH_TO_RC]:\n  Grants direnv to load the given .envrc\ndeny [PATH_TO_RC]:\n  Revokes the authorization of a given .envrc\nedit [PATH_TO_RC]:\n  Opens PATH_TO_RC or the current .envrc into an $EDITOR and allow\n  the file to be loaded afterwards.\nexec [DIR] COMMAND [...ARGS]:\n  Executes a command after loading the first .envrc found in DIR\nhelp [SHOW_PRIVATE]:\n  shows this help\nhook SHELL:\n  Used to setup the shell hook\nprune:\n  removes old allowed files\nreload:\n  triggers an env reload\nstatus:\n  prints some debug status information\nstdlib:\n  Displays the stdlib available in the .envrc execution context\nversion:\n  prints the version\nwatch [SHELL] PATH:\n  Adds a path to the list that direnv watches for changes\n3. apply direnv in git-bashbash\n$ vim ~/.bashrc\nexport EDITOR=vim\neval \"$(direnv hook bash)\"\n$ source ~/.bashrc\n4. Use it.bash\n$ direnv edit .\nexport HELLO=world\n```\n. ",
    "bbatsche": "There are PHP projects in 2018 that don't use composer?? ;-)\nTo my knowledge, yes vendor/bin is somewhat specific to Composer. If a project doesn't use it, then I don't think there's really a guaranteed way to determine its bin path.. ",
    "Its-Alex": "Do you want me to look to integrate that ?. ",
    "DannyBen": "Would love to have this as well. Either that, or the option to globally configure direnv (in ~/.direnvrc I guess) to look for .env instead of .envrc. Will allow for other environment related tools (dotenv and EnvKey) that look for .env to all work in harmony.. ",
    "Nuru": "I am interested in having direnv load a different configuration file as well. I'm using .envrc to hold 12-factor app configuration parameters, and it works well in principle, but I do not like the fact that the resulting configuration parameters for the app are stored in a hidden file.  Although checking in these files violates the principle that these variables should never be checked into code, I balance that against the idea of infrastructure as code that should be checked in. \nIf I could instead specify which visible (as opposed to hidden) file to load environment values from, then I could store the non-secret configuration information in them in a way that is obvious and maintainable. Real secrets like API keys will still have to be handled differently, but at least I could avoid hiding important configuration information in hidden files.\n. ",
    "danielcompton": "The problem was calling eval on the returned string, I just wondered if there was a more idiomatic way to do this for direnv. . Thanks! \ud83d\ude48. ",
    "philpennock": "Perhaps a direnvrc setting disable stdin which can default false for now?. Thank you!. ",
    "petrewoo": "@zimbatm layout python using virtualenv. But it doesn't work as same as i suppose.\nIs there any solution for pyenv-virtualenvwapper\ud83d\ude02. And in  https://github.com/direnv/direnv/wiki/Python\nvirtualenvwrapper section doesn't work.. ",
    "gherlein": "If you clone the repo outside $GOPATH you get:\ngherlein@jupiter:~/src/direnv$ make\ngo fmt\ngo build  -o direnv\ncmd_dotenv.go:7:2: cannot find package \"github.com/direnv/go-dotenv\" in any of:\n    /usr/lib/go-1.10/src/github.com/direnv/go-dotenv (from $GOROOT)\n    /home/gherlein/go/src/github.com/direnv/go-dotenv (from $GOPATH)\nMakefile:38: recipe for target 'direnv' failed\nmake: *** [direnv] Error 1\nThe steps I provided ensure you build inside $GOPATH.  That was the error I was talking about\nI agree that go get ./... is not needed.\n. ",
    "hexmode": "What needs to happen to get this merged? I'm running into this problem.. \nI don't understand your hesitance.  What is wrong with fixing this\nproblem?  Any other issues are their own problems, but there is a fix\nfor this one.\n. >... direnv doesn't have enough code coverage that I am able to merge changes with confidence.\nWould it be fair to say, then, that improving code coverage is a prerequisite for this?  I just opened #409 for that.. ",
    "blalor": "Just ran into this, as well; would love to see it merged!. ",
    "sbinet": "There's that:\n- https://elvish.io/ref/edit.html\n- https://elvish.io/ref/edit.html#hooks\n- https://elvish.io/ref/edit.html#prompts\nNot sure if that would suffice.... Let me see if I can come up with a PR.... @xiaq do you think this is a good way to achieve direnv support for elvish ?\n(I am an elvish beginner...). PTAL. PTAL.\nI've added some instructions to the README, using directly what @xiaq recommended.\nbut I suppose one could put the direnv.elv file in an elvish module and install it via epm:\n- https://elvish.io/ref/epm.html. added some tests, modeled after test/direnv-test.sh.\nPTAL. Right :)\nI think I'll install with 'go get'. It's Go after all.. PTAL. FYI, I've developed+tested that feature against elvish@bac2d370.\nI still see the same functions in the latest elvish commits (and what might become 0.12 at some point.)\n- https://github.com/elves/elvish/blob/master/eval/builtin_fn_env.go#L10\nso... @punitagrawal what is the version you are using (and are you sure direnv uses the one you've installed) ?. AFAICT, no.\nit's related to:\n- https://github.com/elves/elvish/issues/230\n- https://github.com/elves/elvish/issues/453\n. nope... oops :). done.. I've found it was easier to debug things and/or inspect the output of direnv export. ",
    "xiaq": "Note some caveats:\n\n\nElvish does not have a primitive for iterating maps yet. Get the keys of the maps with keys and iterate with keys; m = (direnv command-to-dump-json | from-json); keys $m | each [k]{ ... }.\n\n\nDue to lack of eval, the setup for Elvish is a bit more complicated. What I recommend is something like: direnv hook > ~/.elvish/lib/direnv.elv; echo 'use direnv' >> ~/.elvish/rc.elv. This has the drawback that when direnv updates the hook script, the module the user has saved is not updated automatically; but due to the unstable nature of pre-1.0 Elvish this does have the advantage of allowing users to maintain the module themselves (so that they can update it in face of incompatible changes to Elvish).. The easier way to escape strings in Elvish is to use single quoted strings: Add single quotes at both ends and double the single quotes (replacing ' with ''). It is not possible to use strings.Replace to build a double-quoted strings because you would need to escape \" and \\ at the same time.. My understanding of direnv is that to support a new shell (Elvish here), it needs to know two things:\n\n\nA piece of hook code to execute at shell startup (direnv hook)\n\n\nA way to serialize environment changes that can be understood by the shell (direnv export).\n\n\nNow for most shells, the output of direnv export is a piece of shell code, but as I understand it, it doesn't have to be; the place where the output of direnv export used is in the hook code, and we control the producer as well as the consumer. For Elvish, it makes more sense to make this not shell code; evaluating arbitrary code is not well supported and generally frowned upon. Instead you can\n\n\nIn Export, simply output e as a JSON map.\n\n\nIn the hook function, use from-json to read the JSON map, iterate through it, and use {set,unset}-env to manipulate the environment (blame me for not documenting them; https://github.com/elves/elvish/issues/666).. Do not overwrite the entire hook list. Use:\n\n\nedit:before-readline = [$@edit:before-readline { -direnv-hook }]\nor equivalently\n@edit:before-readline = $@edit:before-readline { -direnv-hook }\nYou can also inline the hook function in here.. ",
    "NeonWizard": "You are entirely right. I can't believe I missed that.. ",
    "tammersaleh": "Looks like fly.io is down as well:\n~~~ console\n$ curl -i https://fly.io/\ncurl: (92) HTTP/2 stream 1 was not closed cleanly: PROTOCOL_ERROR (err 1)\n~~~. Yeah, must be - I just tried from within GCP, and it's fine.  Feel free to close if you want.. ",
    "dekhaus": "Worked Perfectly !!!!\nThanks\nDave\n. ",
    "steveeJ": "I did just now and I noticed two things:\n\nIt requires to add direnv as buildinputs in the shell\nIt reloads the direnv after every command.. I can confirm that the zsh hook now contains the absolute path to direnv, nice!\n\nThere seems to be one more relative call to direnv: \n$ direnvtest     \ndirenv: loading .envrc                                                                                                                       \ndirenv: using nix --pure\n/run/user/1000/nix-shell-9426-0/rc: line 1: direnv: command not found\ndirenv: error unmarshal() zlib opening: unexpected EOF\ndirenv: export +AR +AS +CC +CONFIG_SHELL +CXX +IN_NIX_SHELL +LD +NIX_BINTOOLS +NIX_BINTOOLS_WRAPPER_x86_64_unknown_linux_gnu_TARGET_HOST +NIX_BUILD_CORES +NIX_BUILD_TOP +NIX_CC +NIX_CC_WRAPPER_x86_64_unknown_linux_gnu_TARGET_HOST +NIX_CFLAGS_COMPILE +NIX_ENFORCE_NO_NATIVE +NIX_LDFLAGS +NIX_STORE +NM +OBJCOPY +OBJDUMP +RANLIB +READELF +SIZE +SOURCE_DATE_EPOCH +STRINGS +STRIP +TEMP +TEMPDIR +TMP +TMPDIR +WINDRES +_PATH +buildInputs +builder +configureFlags +depsBuildBuild +depsBuildBuildPropagated +depsBuildTarget +depsBuildTargetPropagated +depsHostBuild +depsHostBuildPropagated +depsTargetTarget +depsTargetTargetPropagated +name +nativeBuildInputs +out +propagatedBuildInputs +propagatedNativeBuildInputs +shell +stdenv +system ~PATH\nDespite the error message it still works though ;-). > alright, try the latest version?\nEntering a direnv directory, working in it, and leaving it all seems to work correctly on 5a0d99b10d7b63f09a2462f19f554df01ef7ec80 :+1: . Thanks for enabling this!. ",
    "nazarewk": "yes\nhttps://github.com/pypa/pipenv/blob/master/docs/advanced.rst#-configuration-with-environment-variables. ",
    "RidaAyed": "Thank you @zimbatm. Tried your solution, got this message in first terminal:\ndirenv: ([/usr/bin/direnv export bash]) is taking a while to execute. Use CTRL-C to give up.\nA new terminal is openened, displaying:\ndirenv: error EnvDiff() failed: \"DIRENV_DIFF is empty\"\n\nWhat is the use-case of opening a new terminal?\n\nI need to have another terminal opened for testing $ py.test\n\nOfftopic: Is direnv even the right tool for my needs?\n. ",
    "netflash": "This PR broke things for me.\nI upgraded to 2.18.2 just yesterday and it doesn't work for me any more.\nThis is what I have in my .bash_profile:\nsh\neval $(direnv hook bash)\nwhich is exactly as in the README.\nPreviously I used the 2.17.0 version.\nI get this error now\n-bash: eval: line 142: syntax error: unexpected end of file\nI compared the output of direnv hook bash between 2.17.0 and 2.18.2.\n2.17.0\n```\n_direnv_hook() {\n  local previous_exit_status=$?;\n  eval \"$(\"/usr/local/bin/direnv\" export bash)\";\n  return $previous_exit_status;\n};\nif ! [[ \"$PROMPT_COMMAND\" =~ _direnv_hook ]]; then\n  PROMPT_COMMAND=\"_direnv_hook;$PROMPT_COMMAND\";\nfi\n```\n2.18.2\n```\n_direnv_hook() {\n  local previous_exit_status=$?;\n  eval \"$(\"/usr/local/bin/direnv\" export bash)\";\n  return $previous_exit_status;\n};\nif ! [[ \"$PROMPT_COMMAND\" =~ _direnv_hook ]]; then\n  PROMPT_COMMAND=\"_direnv_hook;$PROMPT_COMMAND\"\nfi\n```\nDiff is\n```\n$ diff 2.17.0 2.18.2\n8c8\n<   PROMPT_COMMAND=\"_direnv_hook;$PROMPT_COMMAND\";\n\n\nPROMPT_COMMAND=\"_direnv_hook;$PROMPT_COMMAND\"\n```\n\nLooks like we may consider getting the ; symbol back.\nIn the meantime I stuck with 2.17.0. @zimbatm the quotes \" worked for me. \nThanks!\nShould I change the README file emphasising the importance of the quote \" signs?. ",
    "enzochiau": "Do you have any other PROMPT_COMMAND setup anywhere else in your environment? You should always add the \";\" by yourself when concatenate elements.. ",
    "dewrich": "Why not just use the default shell profile?  Or a custom .myenvrc. ",
    "kaukas": "Another option is to \"git ignore\" .envrcs globaly perhaps?. I don't think source_once is a good idea; a lot of complexity for a rare edge case. The only improvement I'd expect in this case is perhaps a more informative error message.\nIf I echo \"source $(pwd)/file.sh\" > file.sh && source file.sh I get Segmentation fault: 11. So it seems (and some internets agree) that segfault 11 could happen because of infinite recursion, among other things. If you would not mind improving anything I'd suggest mentioning \"perhaps you have infinite recursion?\" somewhere in the error message on segfault 11 (if that's at all possible). It's a bash problem, after all.\nThank you!. ",
    "kergoth": "Unable to repro, ignore.. ",
    "MHM5000": "Rebooting the windows fixed it for me.. ",
    "tshort": "This works great with Julia, @garrison! Following your lead, I've been trying the following in my .direnvrc:\n```\nlayout_julia() {\n  export JULIA_PROJECT=$PWD\n}\nuse_julia() {                                                                  \n  load_prefix $HOME/.julia_versions/julia-$1\n} \n```\nI have the generic Linux versions of Julia installed under ~/.julia_versions. It's nice to be able to have direnv switch Julia versions for the project directory I'm in. If the use_julia feature is included with direnv, it probably needs to be made more generic with an environment variable for the directory location.\nA typical .envrc for Julia looks like:\nlayout julia\nuse julia 0.7.0\n. ",
    "justquick": "I have the same issue when loading my Dropbox stored projects from a different linked folder on my local machine. It asks me to allow both the Dropbox and local locations when cding so it duplicates the direnv allowed list even if the .envrc file is the same. ",
    "taylorzr": "Yes I use envrc's in some of my projects, but not all. I want to set special behavior for my home, but I don't want it to apply to projects under the home tree that don't have an envrc.. > How about moving your projects under $HOME/code and then add an empty .envrc in $HOME/code?\nAhh I knew there was a simple solution I was missing, that would totally work.. ",
    "mgrecar": "Yep, here's what I get:\nMatts-MacBook-Pro-3:sideproject matt.grecar$ echo $DIRENV_DIFF\neJy0z09v2jAABfDv4jMsFKUl5GZqmyRNSTABN1ys4DhA_rq2x4CK7z5NmrTLDrvs-KT3ftL7Agr4XwDlMeJxuKCQ5jyFWQB84GyN1MbpCmu_HbUUhXbsoMXJOffGFm3rtOeD_08lMAL_lX-MQP_rBWQbntKEhDEGPjjJth24HkQjLRgBFFK82nEUUuCD8V9gpYdaCmsccy7l7_Bnx2D2GuAN8IGMrt69fop_ILg-JgEXfaqeq8iWk2px3TbC65e2ORQ0IvsFT7zv2fEzmfH4lgaz14rWqYFwXC7dsr6j5QXtkkES_XkbC2pK-X7x8L2_ylhgXN5ZKmpo9tE6m_RKRbN6_hY8TRjez9wXri68Ey-6Y-hjpSri5nM9HefTw8a-713X3X2c1Kor8hMqTZfdivW2KXcJY8R4DQmHvCEdvZ5rQt7mz1Wr0oIzzCu4hpBzDzI8nYHH42cAAAD__-cSt9I=. echo $PROMPT_COMMAND yields _direnv_hook;\nInteresting... so, Torch is a machine learning thing for LuaJIT, I set it up a year ago for a course and forgot about it.  It was running . /Users/matt.grecar/torch/install/bin/torch-activate in my ~/.bashrc file to set itself up (before the eval \"$(direnv hook bash)\" call).  That script is only exporting a series of environment variables, and in particular:\nexport LD_LIBRARY_PATH=/Users/matt.grecar/torch/install/lib:$LD_LIBRARY_PATH\n  export DYLD_LIBRARY_PATH=/Users/matt.grecar/torch/install/lib:$DYLD_LIBRARY_PATH\nThat line was also in my ~/.profile a second time (probably me setting it up wrong), which would explain why /Users/matt.grecar/torch/install/lib: is in there twice in your output above.  If I remove those 2 calls and launch a fresh terminal,  The additional output goes away...  \nWhat is really confusing is that there are several other environment variables exported in that script, such as:\nexport LUA_CPATH='/Users/matt.grecar/torch/install/lib/?.dylib;'$LUA_CPATH\nBut, that doesn't seem to cause any problems with direnv?  I guess my specific problem is solved, because I am good with just removing Torch all together.  But, it is still puzzling to me as to why only those 2 specific export statements caused an issue.. Real weird.  Anyway, it's working great for me, so thanks so very much for your time in helping me out here \ud83c\udf7b . ",
    "Arkham": "On a closer look, the bug is more subtle. If I keep getting inside and outside the direnv folder I only get the message when exiting:\n$ export DIRENV_LOG_FORMAT=\"\"\n$ cd directory\n$ cd ..\ndirenv: unloading\n$ cd directory\n$ cd ..\ndirenv: unloading\n$\nBut if inside the directory I set the environment variable again, then the output disappears\n$ export DIRENV_LOG_FORMAT=\"\"\n$ cd directory\n$ export DIRENV_LOG_FORMAT=\"\"\n$ cd .. # no message!\n$. Turns out I had cached my previous direnv configuration and the env variables were being cached. Closing!. Hey @zimbatm, thanks for getting back to me. Yup, I've seen that page and it was very useful to get tmux to work: the specific issue that I ran into was that tmux uses a special environment variable to track which is the current active pane ($TMUX_PANE) and direnv was interfering with that environment variable because I had ran direnv reload inside a tmux pane.\nBut in more general terms, I think that there are use cases when the user might want to ignore specific environment variables. By looking at the source of env_diff we already have escape hatches for fish and bash; recently a colleague of mine asked me if there is a way to tell direnv to completely ignore SSH_AUTH_SOCK so it made me think that there are more cases out there of people needing escape hatches for direnv.. ",
    "btruhand": "@zimbatm sorry for late reply and yup moving the PROMPT_COMMAND worked for me. Thanks for that, had no idea how to debug it so that was a great help. ",
    "twe4ked": "Thanks for the PR Wael.\nAny updates on getting this merged @zimbatm? Thanks :). > This breaks backward-compatibiliy by moving where the allow files are being stored\nI don't see this as a big problem. People will simply need to re-auth the files so the fix is easy and apparent. You could also look at detecting if files exist in the old location and inform users they can delete the old files.. ",
    "zerok": "Thank you! \ud83d\ude04 . ",
    "rpdelaney": "I don't see where the spec indicates that $XDG_DATA_HOME is meant for read-only data. Can you help me find that?. I don't think that assumption is well founded. Storing data the user is not able to change in the home directory would be the contradiction of the implicit conventions.. I'm not sure exactly how all this works, but could you do something like read the old location for state data (and accept it) but just stop writing it there?. ",
    "franckrasolo": "To preserve backward-compatibility, you could add a level of indirection by introducing an environment variable, say DIRENV_DATA_DIR that defaults to $XDG_CONFIG_HOME/direnv or ~/.config/direnv if XDG_CONFIG_HOME is not set.\nUsers who want to adhere to the XDG spec would simply export DIRENV_DATA_HOME as $XDG_DATA_HOME/direnv as suggested by @rpdelaney above.\nAlas, this is the compromise adopted by (far too) many projects, leading to an ever growing list of custom environment variables that users have to define.\nI must say I'd rather have #410 as it stands together with your commit message added to both release notes and documentation.. ",
    "hakamadare": "@haizaar this is fixed by #433. hey @zimbatm - any thoughts about when you might put out the next minor release?. @pjgoodall a good way to start fixing the issue might be to write a test suite for zsh.  shell test suites are here.  it would probably be a good idea to add scenarios that exercise zsh-specific features.. same here:\nsh\n$ lsb_release -d\nDescription:    Ubuntu 18.04.1 LTS\n$ go version\ngo version go1.11.2 linux/amd64\nif i'm following the code correctly, it looks like your point of entry to making direnv execute.envrc with zsh is rc.go line 133.  it looks like you'll want to work backwards from there (the config will need to store a path to the zsh executable, which means you'll need to discover it).\nit occurs to me that ideally it would be nice to be able to differentiate between a .envrc that can't be loaded because it is utterly invalid, vs. a .envrc that cannot be loaded in bash, but could be loaded in a different shell.  maybe consider requiring bash-incompatible instructions to go in a .envrc.zsh or something?. ",
    "shadowrylander": "Holy...! That's a lotta years! Thanks!. Whoops, forgot something: I'm using it to open another shell, with my primary being fish; do I have to export the variable in the other shell as well? Because it comes up either way. Or does it just go in ~/.bashrc, without touching ~/.config/fish/config.fish?. Thanks for the help, then!. ",
    "acowley": "FWIW, my band-aid solution to play with powershell-go was to undo this commit in my ~/.direnvrc, but I don't know what adverse effects that might have.. I was already using a caching use_nix in direnvrc, so adding the unset isn't much bother. But this seems a less than ideal out of the box experience, so I'm trying to think if there's a way we can make this distinction nicely. \nSomething I changed in powerline-go's segment-dotenv module is to check the environment for DIRENV_DIR, as this seems to correlate with direnv being loaded. This lets powerline recognize direnv in directories below that which contains an .envrc file, as opposed to the upstream version that only looks for that file in the cwd. Would checking for DIRENV_DIR work for your use case?\n. ",
    "ipolyzos": "@zimbat, unfortunately, seems not to support man pages yet. Please refer to https://forum.snapcraft.io/t/support-for-man-pages/2299/14\nI will proceed with the use of make install and keep you up to date on the progress.\nI will keep watching for releases. In case I will not be able at any point to keep maintaining I will let the community know.. I have proceeded with the changes and uploaded the releases from 2.12.0 - 2.18.2 in snapstore. You can find the latest source code at github.com/null-box/direnv-snap while the snapstore entries can be accessed at snapcraft.io/direnv.\nYou should be able to install the snap with just snap install direnv.. @RobRoseKnows  if you please add the following line at the end of the ~/.zshrc file:\n\neval \"$(direnv hook zsh)\"\n\nas per the instructions on https://direnv.net/. I have just updated the https://github.com/ipolyzos/direnv-snap repository with the instructions also.. @RobRoseKnows could you please help me to replicate your issue, please?\nI can not replicate in my machine or a vm that I have tried.... Hi @RobRoseKnows, \nApologies for my later reply. Indeed seems to be an issue with the snap, even though it works in my machine seems to get issues when i try to install in a new VM i.e.\n\n$ vagrant init ubuntu/bionic64\n$ vagrant up\n$ vagrant ssh \n$ snap search direnv\nName    Version  Publisher   Notes  Summary\ndirenv  v2.18.2  nullboxorg  -      direnv -- Unclutter your .profile\n$ sudo snap install direnv\n$ eval \"$(direnv hook bash)\"\n$ echo \"TEST=1\" > test/.envrc \n$ cd test\ndirenv: error .envrc is blocked. Run direnv allow to approve its content.\n$ direnv allow .\ndirenv: error .envrc file not found\ndirenv: error .envrc is blocked. Run direnv allow to approve its content.\n\nI will try to dig into this further and will come back soon.. Thanks for the advice and sorry for the delay. I have not been able to take a loot on this yet. I will do so at the weekend.. Hi @RobRoseKnows , the snap has been fixed using classic confinment. I am working with the snapcraft team to allow it in the officially store but takes some time. Till it get available, you can build and use it using the source at https://github.com/ipolyzos/direnv-snap\n. @RobRoseKnows the snap has been refactored and not officially provided by snapcraft repositories.\nfeel free to try. ",
    "livnev": "@zimbatm Sure, that shows me this:\nhttps://gist.github.com/livnev/eff39eb6d4852241506879a3e40b05b4. Adding >&2 at the end of the virtualenv line does fix the problem. :smile_cat: Not sure if you're considering this to be a direnv bug.. ",
    "pmav99": "Oh, I didn't know about that wiki page :)\nThe layout for venv works just fine. \nNot sure if I should close the issue or not though. You might want to keep it open in order to add the layout to direnv, but even if you don't, adding a configuration file is no biggie.. I am pretty sure that everybody agrees that:\n\nIf somebody gains access to the root account, then he can do pretty much anything.\nIf somebody gains access to the account using direnv, then he can do a lot of things the least of which is editing .envrc and issuing direnv allow.\n\nBut let's say that there is a system with two non-root accounts, A and B. If both A and B can edit .envrc then, someone gaining access to account B can wait until A edits envrc and then, when A issues direnv allow, account B can pretty much impersonate as account A.\nI am not saying this is a huge attack vector, it is actually rather small, but it is there.. In the same line of thought, there is one more potential problem. direnv let's you use liberal permissions on ~/.config/direnv/allow. This means that if someone is using a more liberal umask than 022 (e.g. 002) then account B, i.e the attacker, can edit ~/.config/direnv/allow himself and as a result no direnv allow from A is needed.\nArguably, there are many other things that an attacker could do, but this is not about what else you can do. It is about what direnv can do to be more secure.. ",
    "pjgoodall": "Well it\u2019s still useless, even if it is documented. If I document a fault, does it become a feature?\nPardon my chagrin. @hakamadare OK, I\u2019ll have a look. Though I\u2019ll need to convince it to load .envrc through zsh first surely? \n\nWhat is a successful development environment for working in direnv? I\u2019m on Ubuntu 18.04.1 LTS\n. Thanks @hakamadare.\nPerhaps a shebang line at the top of .envrc would help distinguish? \n. Thank-you. \n",
    "aude": "Thanks for checking!\n\nI can change the code to have both DIRENV_FILE and DIRENV_DIR, that sounds better now knowing that DIRENV_DIR is used.\nThe .env will only be loaded if the user has accepted it via direnv allow, just like for .envrc. If you haven't allowed the .env file, you'll get this error message:\n    direnv: error .env is blocked. Run `direnv allow` to approve its content.\n\nDoes this answer your questions?. I have been using this fork for the last week now without issues, for what it's worth.. Added back DIRENV_DIR, so that's not an issue anymore.. ",
    "alvis": "Thank you @aude. This PR is highly anticipated!\n@zimbatm: shell we merge this?. ",
    "okomarov": "@zimbatm Thanks for looking into this!\nThe current solution was compaining show_virtual_env:[:1: ']' expected so I added another set of [] but this does not yield the desired result:\n\n. It's VSCode, for whatever reason executes the source when opening a new terminal window.\n@zimbatm Thanks the && -z \"$_OLD_VIRTUAL_PS1\" actually solves the issue. \n. ",
    "RobRoseKnows": "@ipolyzos I forgot to mention that I tried that. I did figure out what the issue was though: I had added the eval to the bottom of my dotfiles configuration that wasn't loading correctly. I'm now getting this error however:\ndirenv: error .envrc is blocked. Run `direnv allow` to approve its content.\nAnd when I run direnv allow .envrc I get this:\ndirenv: error .envrc file not found\ndirenv: error .envrc is blocked. Run `direnv allow` to approve its content.\nAny idea what the deal with that is?\n. @ipolyzos I tried reinstalling direnv and I'm still getting the same error. I'll try in a VM to see if that changes it. This is a fairly new machine though so I don't know what the deal could be. Here's the output of direnv status in the meantime:\ndirenv exec path /snap/direnv/12/bin/direnv\nDIRENV_CONFIG /home/rob/snap/direnv/12/.config/direnv\nDIRENV_BASH /bin/bash\nLoaded RC path /home/rob/Dev/projects/fintech/waserverless/.envrc\nLoaded RC allowed false\nLoaded RC allowPath \nNo .envrc found\ndirenv: error .envrc is blocked. Run `direnv allow` to approve its content.\nDoes the direnv file need certain ownership or permissions?\nI tried a new directory and I'm still getting the same error.\n-rw-r--r-- 1 rob rob 26 Jan 14 16:34 .envrc\nI should also mention I'm getting direnv: unloading when I leave that directory.. Alright I was able to replicate this issue on a fresh DigitalOcean droplet running Ubuntu 18.04. Just follow the default onboarding for a new droplet using Ubuntu 18.04 x64 at the smallest size, wait for the email with the password, login as root and install direnv using snap. Here's everything I did:\nroot@ubuntu-s-1vcpu-1gb-nyc1-01:~# snap install direnv\n2019-01-14T21:59:17Z INFO Waiting for restart...\ndirenv v2.18.2 from 'nullboxorg' installed\nroot@ubuntu-s-1vcpu-1gb-nyc1-01:~# mkdir test-direnv\nroot@ubuntu-s-1vcpu-1gb-nyc1-01:~# cd test-direnv/\nroot@ubuntu-s-1vcpu-1gb-nyc1-01:~/test-direnv# echo export FOO=foo > .envrc\nroot@ubuntu-s-1vcpu-1gb-nyc1-01:~/test-direnv# cd ..\nroot@ubuntu-s-1vcpu-1gb-nyc1-01:~# eval \"$(direnv hook bash)\"\nroot@ubuntu-s-1vcpu-1gb-nyc1-01:~# cd test-direnv/\ndirenv: error .envrc is blocked. Run `direnv allow` to approve its content.\nroot@ubuntu-s-1vcpu-1gb-nyc1-01:~/test-direnv# direnv allow .\ndirenv: error .envrc file not found\ndirenv: error .envrc is blocked. Run `direnv allow` to approve its content.\nroot@ubuntu-s-1vcpu-1gb-nyc1-01:~/test-direnv# direnv status\ndirenv exec path /snap/direnv/12/bin/direnv\nDIRENV_CONFIG /root/snap/direnv/12/.config/direnv\nDIRENV_BASH /bin/bash\nLoaded RC path /root/test-direnv/.envrc\nLoaded RC allowed false\nLoaded RC allowPath \nNo .envrc found\ndirenv: error .envrc is blocked. Run `direnv allow` to approve its content.\nroot@ubuntu-s-1vcpu-1gb-nyc1-01:~/test-direnv#\n. Ah, glad you were able to reproduce. I don't know much about snap, but could this have to do with \"classic\" confinement? I don't really know if it's relevant here but I've ran into other dev tools that require it.. ",
    "offero": "Manually set a DIRENV_CONFIG env variable for my user to C:\\Users\\\\AppData\\Local\\direnv and the error has stopped. Maybe there should be a default place in Windows?. I'm not sure it exposes HOME by default. Maybe add some documentation about setting it?. ",
    "1oglop1": "I was exactly looking for this feature. For example I use awscli which requires complete -C aws_completer aws but I do not want to have enabled for the system because my awscli is installed in specific virtualenv\n. ",
    "jcpetruzza": "It seems to me that the most general way to get this working (as well as other features requiring shell-specific commands)  would by implementing something like what was suggested in  https://github.com/direnv/direnv/issues/73#issuecomment-279072020. \nEssentially, this would allow people to write bash functions to be ran in .envrc that can add the required shell-specific code to the direnv_postload/direnv_preunload variables based on the setting of SHELL. That way, direnv remains simple and the heavy lifting is moved to \"libraries\".\n@zimbatm Would you take a patch implementing something along that lines? . If we can get something like shell_specific in #464 merged in, then one can implement this as follows.\n\n\nadd_completions bash dir emits bash-specific code that:\n\nRuns complete and captures the output. This gives us all existing completions before loading the env \nRuns source on all files in dir\nRuns complete again and diffs the output with that of step 1 (there will only be additions and modifications).\nRegisters an ON_UNLOAD action that for each modified entry xxx, runs complete -r xxx if it was a new entry (deleting the entry), or the definition from step 1 if was a redefinition.\n\n\n\nadd_completions zsh emits zsh-specific code that:\n\nGets all currents completions with something like\n    zsh\n    for k in ${(k)_comps:#-*(-|-,*)}; do\n      printf \"%q;%q\" $k ${_comps[$k]}\n    done \nAdds dir to the rpath array\nRuns compinit so that all new completion defs get indexed\nGets the current completions again and diffs the output with that of step 1\nRegisters an ON_UNLOAD action that:\nRuns compdef -d xxx on every command xxx that appeared in the diff of step 4.\nRuns compinit -D to force a reindex of completions (otherwise, definitions that were added when loading the env may persist).\n\n\n\n\n\nWe actually want add_completions to accept more than one directory, for performance reasons, but the idea is the same.. And one can then make use_nix look at the diff of the PATH before and after instantiating the nix derivation to find the path to the bin directory of the loaded packages, and use that to find the directories holding the bash/zsh completions for the packages and, if found, pass them to the add_completions command.\n. @zimbatm Thanks for your response! I think it is fine not to merge the rest of this PR as it is. I was initially going to submit only the minimal number of changes that would allow people to implement things like aliases or shell-completion on their own (and share the implementations on the wiki), but I felt without a fully-developed example it wouldn't be clear that the idea works, etc, so I ended up adding a use_alias example to the stdlib. I see the code in this PR as a working proof-of-concept that I would like to use to discuss the design of a direnv extension to handle additional effects that is good to be merged in.\nThe main take-aways, for me, from implementing this prototype are:\n  1. From the rc script one needs to be able to signal to the running direnv export xxsh command, (via direnv dump) that there is some xxsh-specific action to perform, so that this can be ultimately sent to the hook. I don't think one can use anything better than a reserved environment variable for this. A design choice here is whether direnv dump interprets it and then outputs something more complex than an Env, or if it just passes it through as an environment variable. In this implementation, I used a DIRENV_QUOTES_xxsh variable, let it pass through direnv dump and the \"signal\" was just the raw xxsh-command to run. If I understand correctly, you'd prefer, as \"signal\", some sort of message (e.g., \"define this alias...\", etc) that then the func (sh xxsh) Export(..) can turn into xxsh-specific code. I think that in any case, the possibility to send raw xxsh-code should be there as well, so people can experiment with ideas without having to modify the direnv implementation; this could be achieved with a message that'd say \"run this xxsh-code\".\n  1. Whatever effect is ultimately executed in the hook, we will normally want to reverse it when unloading the env. The problem is that in general we won't know how to reverse the effect until the code in the hook runs (e.g. one needs to know what aliases are overwritten to be able to restore them). The only way I can see to implement this is by having the hook set an environment variable that will be used by direnv during the unloading of the env. Here I've used DIRENV_ON_UNLOAD_xxsh for this. One would want to use some gzenv-encoding for this (as is done for DIRENV_WATCHES), so an additional direnv command will probably need to be implemented as well.\nDo you think this could be implemented in any other way?\nI'd propose then the following design for the extension:\n\nWe add two reserved environment variables: DIRENV_LOAD_ACTIONS and DIRENV_UNLOAD_ACTIONS. They will contain a gzenv-encoded list of \"actions\".\nDIRENV_LOAD_ACTIONS is to be set by the rc-script and honored by direnv during an environment load.\nDIRENV_UNLOAD_ACTIONS will be set by the eval-call installed by the shell-hook, and honored by direnv during an environment unload.\nAn \"action\" is a pair (\"action_type\", \"action_payload\"). Initially, the action type will be one of: quote_bash, quote_zsh, quote_tcsh, quote_fish; and the payload a command for that shell. More higher-level actions can be added in the future as needed.\nWe add a direnv add_action command, analogous to direnv watch. It uses DIRENV_IN_ENVRC to decide whether to target DIRENV_LOAD_ACTIONS or DIRENV_UNLOAD_ACTIONS.\nA function add_action is added to the stdlib, analogous to watch_file.\nA function on_direnv_unload is installed by the hook of each shell (similar to add_action), to be used by the code that needs to install an unload-action.\n\nBecause this is a cleaned-up version of what is already in this PR, we have a validation that it should work. This also doesn't require many changes to direnv internals, imo. One can then play around, implement something cool like \"use direnv to activate a local nix profile and have the shell-completion scripts updated\", and share it on the wiki :slightly_smiling_face: \nThoughts?. The point about subshells is a very good one, and I hadn't thought about that, really. You don't even need to go the bash -> zsh route, already bash -> bash and zsh -> zsh is not working in this prototype, since an alias defined by the envrc will \"disappear\" from the subshell. \n\nNow if I think about aliases, what should happen is that the bash hook, somehow keeps track of it's own aliases. [...] And somehow on every prompt command it would have to check if DIRENV_ALIASES has changed so that it could work when invoked as a sub-shell.\n\nI think I would do this differently, though. The code emitted by direnv hook could set some random UUID in a DIRENV_HOOK_ID envrironment variable, and the contents of the proposed DIRENV_STATE could contain the hook id of the shell that produced it by calling direnv export xxsh. That way, when you launch a subshell, it will get a different DIRENV_HOOK_ID and the call todirenv bash xxsh associated to the prompt-command can then notice that given there is a DIRENV_STATE for the right envrc file and the hook id is different, the envrc needs to be rerun (or the output re-emitted since we can presumably reproduce it from the state).\n\nHere I am assuming that the aliases are simple and compatible with all of the shells. It also puts the burden on each shell implementation to implement their own aliasing mechanism.\nThis is the reverse of your LOAD/UNLOAD actions as the responsibility is shifted from the .envrc to the specific shell for doing the backup and restore. But it means that aliases can actually be restored which I don't think your approach handles.\n\nWait, this prototype is already restoring the aliases! :slightly_smiling_face: Look at the test for the scenario called \"alias\": it checks that on entering a directory two aliases foo and bar are set according  to the definition of the envrc and, on exiting the directory, are restored to their previous value (in the case of foo, by removing it). And works on bash, zsh, fish and tcsh, which required, in each case, shell-specific code handle it.\nIf I understand correctly, what you are proposing is to make the hook more smart, but also more complex (first is has to know about aliases, and tomorrow about shell-completions, etc), while in my approach the hook remains just as simple as it is right now and users can add new shell-specific extensions without having to touch direnv internals, since they just need to use the envrc to emit the shell-specific code that will eventually run on the hook (not the most beautiful thing to write, but well...)\n\nAnother reason for my reluctance is that I would prefer to merge all the DIRENV_ environment variables into one DIRENV_STATE at some point, so introducing new variables is not ideal. For that I think your gzenv utility is quite helpful. I realize that it's not directly related to the PR and I would be happy to be working with you on that first if that's alright with you.\n\nMoving towards a single DIRENV_STATE variable makes sense to me and I'd be happy to help with that. It would be a biggish change, though, so it's probably better to do it incrementally. Do you want to open an issue to lay out the plan and track the progress?. ",
    "daniels": "Isn't this risk the same with any script you download, inspect and run?. > @daniels no, this is a situation where another user has write permission to your files (~usually not the case -- though there are some situations where it happens)\nYes, but that situation is user imposed, not something direnv has setup for you. In the example above the user explicitly demands that the directory should be editable by untrusted users. Direnv allows it, but so does the OS for any executable in that directory.\nYou could argue that direnv should check the permissions in this specific case just because it could, but if so you should also require that same check from any other utility that executes commands from a different file, like sh or ruby etc.\n\n\nAnother attack vector is to create a repository with the .envrc loading any other file. Since direnv only checks the .envrc, the user won't be asked for configurmation when that other file changes either locally or on git pull.\n\nI don't think that vector is valid, direnv hashes the contents of the file and asks for a new \"allow\" whenever they change I believe\n\nI guess zimbatm would know if that was the case ... But it's clearly stated in the documentation that only .envrc is checked. (I think it would be great to be able to specify additional files to be checked, but I guess that would be a different issue.). > Thinking about this a bit more: because direnv is not declarative, it wouldn't be possible for direnv to collect the list up-front. It means that in terms of user-experience, the only thing that it could do is interrupt the evaluation (for example source_env might be augmented to do that) to ask for more permission. In terms of UX, it wouldn't be the best experience I think.\nHm, could it use the watched files from the previous run as the list to check?\nIf .envrc is changed to source and watch a new file, that file will be unknown and unverified on first run, but the change to .envrc will be detected and the user could be expected to review any new includes as well. But if a watched file is removed from the .envrc and changed (or deleted) it would of course interrupt the user with a false alarm. But then again .envrc would also be changed so you would be interrupted anyway. If there was a command to allow all the changed files at once, I don't think it would be very concerning.\nBut maybe I'm missing some more complex use case. For me the external file is most often a single shell.nix file that is sourced via \"use nix\", but with nested includes or inherited .envrc structures maybe the above would fail?. ",
    "asottile": "@daniels no, this is a situation where another user has write permission to your files (~usually not the case -- though there are some situations where it happens). The computer provides mechanisms to protect from this (the writable bit). In the demo above, sudo is only used to downgrade permissions (to nobody which conventionally has very little to no permissions). The security check that's being asked for here is pretty simple and unlikely to affect normal execution while patching potentially malicious users and unsafe behavior.\nThe minimum to implement this is to traverse up from the current directory and make sure none of the parts are global or group writable (otherwise one who is not you could modify them without root)\nOf course all bets are off if an attacker has gained root permissions, but that's not what this issue is about at all. . > Another attack vector is to create a repository with the .envrc loading any other file. Since direnv only checks the .envrc, the user won't be asked for configurmation when that other file changes either locally or on git pull.\nI don't think that vector is valid, direnv hashes the contents of the file and asks for a new \"allow\" whenever they change I believe. ",
    "jwiegley": "For example, if I cd into my category-theory project, I get:\nVulcan ~/src/category-theory $ nix-build\nthese derivations will be built:\n  /nix/store/9nvgfyirg3lhfnzrlljkp27rd5lb9b6p-category-theory.drv\nbuilding '/nix/store/9nvgfyirg3lhfnzrlljkp27rd5lb9b6p-category-theory.drv'...\nunpacking sources\nvariable $src or $srcs should point to the source\nbuilder for '/nix/store/9nvgfyirg3lhfnzrlljkp27rd5lb9b6p-category-theory.drv' failed with exit code 1\nerror: build of '/nix/store/9nvgfyirg3lhfnzrlljkp27rd5lb9b6p-category-theory.drv' failed\nBut if I nix-build without letting direnv setup the environment, it works fine. I'm not sure which environment variable is causing this problem, though.. ",
    "freuk": "Hadn't noticed --pure, thank you. Was there a reason for this script to use it ? Just curious.. :) thank you!. ",
    "rlue": "Whoops, good point.\nAs a general principle, I would expect to see an error message only when a program has failed to perform one of its expected functions. Since I don't expect direnv to do anything in a non-existent directory, I would expect to see no error message at all.. ",
    "Profpatsch": "\nemacs would load the empty environment and only attempt to reload if the .envrc gets changed.\n\nSo that might be an issue, but right now emacs-direnv disables itself because of the non-parsable json. I\u2019ll change the error message to be put to stderr for now.. The error message is in fact output on stderr, I was mislead by the way it appended to the json output. So direnv does the right thing here.. ",
    "thernstig": "Let's say I use watch_file FILE and when that happens I just want to do an echo \"Something\" to notify my user (and only if that specific FILE changed), would it still be consider a build system? I was thinking that since you have the functionality to watch a file and reload the environment if it happens, I thought .envrc was re-read before reloading the environment and as such it would have been possible to add something in .envrc that knew it was a specific watched file that changed.\nApologize if this is already covered by your answer as I am not well versed in the details of direnvs implementation.. ",
    "iocampomx": "That is great! I don\u2019t remember to have seen that statement very clear in\nthe README but thank you for the clarification!\nOn Mon, Mar 11, 2019 at 2:36 AM zimbatm notifications@github.com wrote:\n\nyes that's exactly what direnv does. It looks up the $PWD until it finds\nthe .envrc file. If the .envrc file is the same and hasn't changed, it\nkeeps the loaded environment.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/direnv/direnv/issues/475#issuecomment-471467476, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AFrwcwu4fOGTCm9CnYS-mQDNHw7i9lgJks5vViODgaJpZM4bn-j9\n.\n-- \nIgnacio Ocampo\n. \n",
    "coulonxyz": "Well, it works with bash but not zsh... even if I have do the eval \"manually\", nothing happens when i get in the directory or type direnv allow.. oh my. What an idiot. Thanks a lot.. ",
    "sheeeng": "@coulonxyz, it is also explained in this section.. "
}