{
    "lanterndev": "Just saw you merged this, so I figured Exceptional4j was pushed to sonatype at the updated spot, after mvn clean, mvn -U test is giving:\nDownloading: https://oss.sonatype.org/content/repositories/snapshots/org/lantern/exceptional4j/0.1-SNAPSHOT/exceptional4j-0.1-SNAPSHOT.pom\n[WARNING] The POM for org.lantern:exceptional4j:jar:0.1-SNAPSHOT is missing, no dependency information available\n...\n[ERROR] Failed to execute goal on project lantern: Could not resolve dependencies for project org.lantern:lantern:jar:0.3-SNAPSHOT: Could not find artifact org.lantern:exceptional4j:jar:0.1-SNAPSHOT in sonatype-nexus-snapshots (https://oss.sonatype.org/content/repositories/snapshots) -> [Help 1]\nAm I missing something? Some day I'll own this dependency junk more (a boy can dream)\n. can lantern get its own group ID instead?\n. request submitted :)\nnamespaces ftw\n. @myleshorton this can be merged, yeah? don't want to let it sit open too long\n. I'd be happy to, though would it make more sense for @myleshorton to give the final okay, since unfortunately I have zero familiarity with this code?\n. On Wed, Mar 13, 2013 at 10:57 AM, myleshorton notifications@github.comwrote:\n\nI'm actually surprised that's even possible - so that does\nsuccessfully change the chrome icon? Very cool.\n\nSeriously!\n\nMakes me wonder is we can actually introduce some hack for it on osx and\nwindows too.\n\nI was thinking the exact same. Want to take a crack at that on your Mac\n@aranhoide?\n. @leahxschmidt can this be closed?\n. Before I forget, if this branch lands today, maybe we could coordinate the no-longer-needed-large-files history purge at the end of our call tomorrow!\n. Just to throw this out there, would it be worth it to see if we could push back our tester hangout another day or two, to give us more time to test with this landed?\n. Is it likely that the only reason we haven't heard from Eric about the issues this branch fixes is because he's running Lantern on a desktop which he never puts to sleep? If so, cutting the new release before these fixes go in is fine as long as he's our only tester, but I think this is blocking having anyone else test Lantern, as it's likely they'll run on a computer that is put to sleep while Lantern is running and Lantern will just break when it's woken up.\n. If it would help, I (and anyone else who can) could do some serious QA running off the branch over the next several hours until the hangout, and if it seems stable in all the environments it's tested in, we could merge, but otherwise wait till the next release?\n. Word. In the meantime, we can just tell testers to restart Lantern when their network connection changes.\n. Nice!\nOn Thursday, April 18, 2013, Leah X Schmidt wrote:\n\nThis latest set of changes implements most of your suggestions. Tests\npass, and everything seems to work.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16627446\n.\n. Cleaned some stuff up in the course of working on #465. Will attach more commits to this pull request as I go.\n. oh awesome! thanks for reviewing @myleshorton!\n. Just tested this out. The swt.browser window is a vast improvement on OS X. Lantern is getting its own icon in the dock and app switcher, no longer locks you out of your default Chrome (obviously), and you no longer get the Chrome menu bar when the UI window has the focus. The only menu when the UI window has the focus is the \"Lantern\" application menu, which is great. A minor issue though is it's getting an \"About Lantern\" menu item and a \"Preferences\" menu item which do nothing. Can we make these open the \"About\" and \"Settings\" modals, respectively? Or just remove them?\n\nMore seriously, all three times I've tried closing the window (via the x button in the upper left), I've gotten the segfault you mentioned on our call today:\nInvalid memory access of location 0x0 rip=0x7fff916fbf5e\n./quickrun.bash: line 42:  2444 Segmentation fault: 11  java $extras $javaArgs\nJava process exited abnormally\nOpening a new issue for this now.\n. Oh, is that because in installed versions we're hiding Lantern from the dock and app switcher altogether? I actually think we should stop doing that while the UI window is open. This is a common UI pattern on OS X with apps that have a tray icon as well as a separate full UI (Evernote comes to mind).\n. So unless we run a separate process, if we undo hiding the installed version from the dock while it's running, it'll show up there even when the UI window isn't open? I wonder if that's still preferable though, without taking much work, and maybe just making it so when you click the dock icon it has the same effect as picking \"Show Lantern\" from the tray menu.\n. Before making this blocked on the Growl-style notifications, we might be able to get away with just adding a new tray icon state for unread notifications. Some prior art:\n\nThis way the user can notice they can go into Lantern to take some prompted action while in other apps.\nI can hopefully handle all the UI changes within lantern-ui that would be necessary pretty quickly.\n. Nice!\nOn Mon, Jun 17, 2013 at 1:54 PM, Leah X Schmidt notifications@github.comwrote:\n\nI actually already started on the growl-style notifications on Friday, so\nI'm going to see if they turn out to be a reasonable thing to do.\nOn Mon, Jun 17, 2013 at 12:09 AM, skivvies notifications@github.com\nwrote:\n\nBefore making this blocked on the Growl-style notifications, we might be\nable to get away with just adding a new tray icon state for unread\nnotifications. Some prior art:\n[image: screen shot 2013-06-17 at 12 05 44 am]<\nhttps://f.cloud.github.com/assets/475147/660509/3c91d764-d703-11e2-8460-38d7c2026fe0.png>\nThis way the user can notice they can go into Lantern to take some\nprompted action while in other apps.\nI can hopefully handle all the UI changes within lantern-ui that would\nbe\nnecessary pretty quickly.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/817#issuecomment-19525609>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/817#issuecomment-19562295\n.\n. I can be ready to merge the simpler-friends-modal UI changes to lantern-ui\nmaster very soon, pending some necessary coordination with @leahxschmidt\naround the /interaction/changeFriends API changes (as in\ngetlantern/lantern-ui@6d277dee). I'm psyched to get this merged asap since\nthe current UI on master was designed for a much different system than the\none we decided we want to launch with (namely, invites should not be\nexposed to the user and should no longer get immediately sent\nautomatically).\n\nOn Mon, Jun 17, 2013 at 4:27 PM, myleshorton notifications@github.comwrote:\n\nI just want to always have something we can cut a release from on master,\nbut integrating this as it stands essentially disables kscope. I'm just\nsuggesting to not tie this to kscope for the time being until we have UI\nwrapped around enabling better trust network maintenance, but that's just a\ntwo line change so shouldn't block anything either way.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/817#issuecomment-19572328\n.\n. Those are covered by part of #158, though we could certainly break the\naddition of an unread notifications state out into another ticket.\n\nOn Mon, Jun 17, 2013 at 4:29 PM, myleshorton notifications@github.comwrote:\n\nOh, and I totally think tray icon changes would be great too!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/817#issuecomment-19572423\n.\n. Code Triage suggests we do something with this PR before it gets more stale. @myleshorton Appropriate to take any action on it now?\n. Hey @myleshorton, Code Triage just reminded us to process this PR before it gets more stale. Anything we can do here?\n. Submitted as a PR because I wanted to make sure this wouldn't inhibit any development workflows before merging.\n. Sample new output:\n\n10116  2013-08-17 10:49:16,703 DEBUG [ControlXmppP2PClient-Thread-Pool-1] lantern.DefaultXmppHandler.processInfoData (DefaultXmppHandler.java:1136) - Got certificate:\n0...0..........R..o0.....H........0.1.0...U....dummyuser96.gmail.com_.lan.3296E0520...130813141055Z..140813141055Z0.1.0...U....dummyuser96.gmail.com_.lan.3296E0520...0.....H.............0.........9...OKE....c...U.XxU...DUC..i..C..vCczC7hi.z...j.Q..O...8....4..4.E.....u............5..7..O..ar....7T..D..R..........z.W3F.g1....8kg..k.........MT........T....P2..P...B...P........X..o....4ng...c.....0.................O.8o..u.......H........0.....H.................N.k..Q...0A.....X.4.ei..j...k....._.H....I....V.....T.........Y......c..i...3.L3.......t......T.XB..ESx47D...j...bdu.......k....M.......7s............dz.C.5..O.........i...W..F.L..h.....l.e....as......T.2..N.....w...A......u.......p.\n. I just tried it with\njava\n            LOG.debug(\"Got certificate:\\n\"+\n                new String(Base64.decodeBase64(base64Cert),\n                    LanternConstants.UTF8).replaceAll(\"\\0007\", \".\"));\ninstead and still got the bells. As I suspected, it's not necessarily literal bell characters causing the bells, but any characters the terminal thinks should be bell-worthy. It reliably rings three bells in a row every time Lantern logs something like this:\nGot certificate:\n0\ufffd\ufffd0\ufffd\ufffd\ufffdR\n0.1,0*U *\ufffdH\ufffd\ufffd\n140813141055Z0.1,0*Ugmail.com_-lan-3296E0520\n\ufffd0\ufffd     *\ufffdH\ufffd\ufffd       #dummyuser96@gmail.com_-lan-3296E0520\ufffd\"0\n\ufffd\ufffd9\ufffd\ufffd\u04c7OKE>\ufffd\ufffd\ufffdc\ufffd\ufffdU\ufffdXxU$\ufffd\u07edDUC\ufffd\ufffdi\ufffd\ufffdC@\ufffdvCczC7hi*z\ufffd\ufffd\ufffdj\ufffdQ\ufffd\ufffdO\u05ed  8\ufffd\"\ufffd\ufffd4\ufffd4\ufffdE=\ufffd\ufffd\ufffdu\ufffd\ufffd\ufffd;\u05f4\n                                                                            \ufffd\\\ufffd\ufffd\ufffd5\ufffd\ufffd7(\ufffdO\ufffdar\ufffd\ufffd\ufffd\ufffd7T\ufffd\ufffdD\ufffd.R\ufffd,\u00c0\ufffd\"\ufffd\n                                                                                                             \ufffdz\ufffdW3F\ufffdg1\ufffd\ufffd\ufffd8kg\ufffd\u35c4k\ufffd\ufffd{\ufffd\ufffd\ufffd\ufffd&MT\ufffd\u0421\ufffd\u0379\ufffd\ufffd\ufffdT\u06d2\n\\(\ufffd\ufffd\ufffd.<=\ufffd\ufffdO\ufffd8o.\ufffdu\ufffd\ufffd%)\ufffd~H                                                                                                                           \ufffd\ufffdP2\ufffd\u0630P\ufffd\ufffd\ufffdB\ufffd\ufffdP\ufffd\ufffd\ufffd-\ufffd=\ufffd\ufffdX\ufffdo\ufffd\ufffd:4ng\ufffd\ufffdc%\ufffd\ufffd\ufffd0\n`Y\ufffd'\ufffd\ufffd,c\ufffd\ufffdi\u74de\ufffd3*L3\ufffd\ufffd%! \u01dbt\ufffd~\ufffd@\ufffd=T\ufffdXB,\"ESx47D.\ufffd\ufffdT\ufffd\ufffd*\ufffd\ufffd<\nj\ufffd\ufffdbdu\ufffd\ufffd*\u04b1\ufffd\ufffd\ufffdk\ufffd\ufffd\ufffd+M\ufffd.\ufffd\ufffd\ufffd7s\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffddz\ufffdC\ufffd5(\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdi@\ufffd\ufffdW\ufffd\ufffdFL[\ufffdh\ufffd(\ufffd\ufffdl\ufffde[}\ufffdas[\ufffd\ufffd\ufffd\ufffdT\ufffd2\ufffd;N\ufffd\ufffd\ufffd\ufffd\ufffdw\ufffd\ufffd\ufffdA\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdu\ufffd{\ufffd*%\ufffd\ufffdp\nNote this patch does not remove the literal bell character in https://github.com/getlantern/lantern/blob/master/src/main/java/org/lantern/kscope/DefaultKscopeAdHandler.java#L68 because I haven't found that to actually ring irrelevantly / often enough to cause distraction, but I'm definitely open to ditching that too. ;-)\n. Absolutely correct! Thanks @leahxschmidt, fixed in ce5a743.\n. Code Triage flagged this PR. We didn't end up doing anything with this yet in the UI (i.e. showing a list of the people who've added you that you haven't added back). That's partially covered already by friend suggestions, but that isn't a complete list you can view at any time and it's (purposefully) not stated that this is the reason they're being suggested. Do we want to merge this so we have the option in the future? The corresponding PR in the controller is getlantern/lantern-controller#40.\n. That's what I meant by the \"that's partially covered already\" bit. I'll close this and getlantern/lantern-controller#40 given there are no TrustRelationships in the controller anymore.\n. Thanks for the PR @nmackk! Unfortunately the PO files are no longer in use, and we'll be switching this repo over to use the translations in the lantern-ui repo (in \"app/locale\") in one of the next releases. We should have nuked the PO files long ago to avoid confusion, sorry about that. Please check out our Translating wiki page, which has more up-to-date info (links to our Transifex project, lantern-i18n mailing list, etc) if you'd like to stay involved. Thank you for your interest in contributing!\n. This will also close #981 when merged.\n. @myleshorton, I gotta +1 everything @oxtoacart just said about #981. If you get a chance, check out the first-time signin experience with the Spotify desktop app, choosing the option to log in with Facebook. That will open the Facebook oauth page in the default browser, where if you're not already logged in to Facebook, you'll see the green https signs of trust and can even inspect the cert before you enter your password, and if you are already logged in, you won't even have to enter it.\nThinking back to the brief period of time after we switched from directly giving your Google password to Lantern, and before we switched from doing the oauth flow in the default browser, if I remember correctly (and please correct me if I'm wrong), at that point installed versions of Lantern did not yet show up in the dock/taskbar and app switcher. To my mind, that's the clear culprit for usability problems getting back to Lantern when you want to. Now that Lantern shows up in the dock and the app switcher, when the user completes the oauth flow and wants to get back to Lantern, if the UI window is not automatically focused or visible already, she'll see Lantern in the dock, taskbar, or app switcher, and I think will be able to get back to it without any trouble.\nI think it could also be the case that it's become more common for desktop apps to shell out to the default browser for Oauth flows since we last did user testing on this, and apps that did it already have just had more time to reach more users, so it won't seem as foreign to our users if we do it.\n. For the record, this patch takes a different approach from the one I intended with #981, which advocates for using open (Mac) / cmd /c start (Win) / xdg-open (Ubuntu) to open the url in the default browser.\nInstead, this patch always opens the url in a new instance (and by extension, window) of Chrome in Ubuntu and Windows, and of Safari in OS X. (And in OS X, that second instance of Safari will remain running (but with no windows open) after the user completes the Oauth flow.)\n. Heh, interesting idea @aranhoide! It's unfortunately an oft-cited UX smell though when you're not sure which of two decisions to make on a UI so you push the decision off to the user (came up a few times at Aral's UX workshops in Berlin actually). In this specific case I'd also advocate for just taking the more trodden path, unsurprisingly.\n. Remember to git submodule update to pull the necessary changes to lantern-common and -ui to test this.\n. Just pushed the refactor moving SemanticVersion to lantern-common.\n. Yeah, this PR requires merging the updates to lantern, lantern-controller,\nincluding pointing them both at the latest lantern-common. Is that\nundesirable?\nWe made sure old clients will still work after deploying the new controller\nbtw, they just won't display update notifications. Though they had some\nlogic for this before, unfortunately it was half baked and wouldn't\nactually show the update modal after clicking the notification in the\nfooter.\nOn Monday, November 18, 2013, myleshorton wrote:\n\nAre there any issues introduced here if the lantern client doesn't include\nthe latest lantern common immediately? Will updates still work?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1147#issuecomment-28708898\n.\n. Yeah, that was the problem.\n\nOn Monday, November 18, 2013, myleshorton wrote:\n\nOK. The only part I can see that was half-backed though was the proper\nhandling of Modal.updateAvailable in InteractionServlet as a \"switch\nmodel\". Everything else looks like it should have worked fine. Why wouldn't\nthe modal display when you clicked on it? Because the backend didn't\ninclude the Modal.updateAvailable in InteractionServlet?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1147#issuecomment-28711139\n.\n. That is, not just the switchmodal logic, but the symbols being missing from\nthe enums altogether.\n\nOn Monday, November 18, 2013, myleshorton wrote:\n\nOK. The only part I can see that was half-backed though was the proper\nhandling of Modal.updateAvailable in InteractionServlet as a \"switch\nmodel\". Everything else looks like it should have worked fine. Why wouldn't\nthe modal display when you clicked on it? Because the backend didn't\ninclude the Modal.updateAvailable in InteractionServlet?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1147#issuecomment-28711139\n.\n. Made the changes you suggested, @myleshorton, and it's working for me. Should be ready to merge to master / the 1.1 line pending your review and testing!\n. Thanks for catching and patching this, @starrify!\n. LGTM, thanks @starrify! Broke out your dialog idea into #1181\n. 3 weeks and no objections, so I'm merging before this gets staler.\n. Nice!\n\nOn Thursday, January 16, 2014, myleshorton notifications@github.com wrote:\n\nMerged #1325 https://github.com/getlantern/lantern/pull/1325.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1325\n.\n. Don't want this to get stale, merging.\n\nThanks for the PR, @piezo-lectrick!\n. ditched storing checkFallbacksMode on the model in f4674f4\n. Thanks for the thorough notes Ox!\n. Moved to lantern-common\n. the modelSchema and api fields in the spec were intended to give the frontend some sanity guarantees but in practice it's just resulted in not-very-meaningful bookkeeping, so I took them out.\n. all these are now provided via inheriting from the LanternVersion class defined in lantern-common\n. That's what I was thinking too.\n@myleshorton, if an old client upgrades to this version, will having these now-removed fields in its saved model cause it to not be able to load the saved model, or will it happily ignore them? i.e. do i need to open a #466-style ticket to handle this?\n. Awesome, sounds great to me! Thanks @myleshorton \n. Thanks for reviewing @myleshorton!\nWe tried the ProxyTracker interface first but IIRC we hit some snag and figured we'd punt and come back to it later. Now that it's working with DefaultProxyTracker I'll look at this again.\nAs for storing checkFallbacksMode, the model was just a convenient place to store it for the places we wanted to check it within the same run (e.g. here), definitely doesn't need to be saved across runs. Probably isn't even really necessary in the ModelIO constructor, was just trying to minimize S3 config checking. Will take it out.\n\nI'll also fix the things I broke with the config fetcher stuff -- I can just merge from master...\n\nAll good, I just tried merging from master into this branch and got conflicts in Launcher.java, which I resolved easily, and S3ConfigFetcher which I might have to look more at with Snyder tomorrow. Keep you posted!\n. all set! eb5fb5e\n. > I'll also fix the things I broke with the config fetcher stuff -- I can just merge from master...\nThanks @myleshorton. I merged everything I could from latest master and just left the conflicts in S3ConfigFetcher for you to look at (e.g. https://github.com/getlantern/lantern/blob/check-all-fallbacks/src/main/java/org/lantern/S3ConfigFetcher.java#L183), so you shouldn't have to do any merging. Happy to look at that together too!\n. as @oxtoacart astutely pointed out, we should probably decrease the timeouts here from the defaults set in https://github.com/getlantern/lantern/blob/master/src/main/java/org/lantern/util/StaticHttpClientFactory.java#L58\n. clever or just desperation? @oxtoacart and @skivvies: 1, @install4j: 0!\n. q.v.\n\n(description overflows main heading in Ubuntu Software Center and the final word \"proxies\" wraps down into the otherwise blank body text)\n. > On Linux, we don't need that\n(since certutil installs our cert into the user's cert store rather than a system store, so root isn't required)\n. @myleshorton says this is no longer used\n. nice work there @oxtoacart!\n. I think we have a new tag-line.\n. ",
    "myleshorton": "Ahh -- didn't notice you changed the group ID. There is no lantern group ID at sonatype, so that won't work. Changing back.\n. Would take a lot of setup at sonatype -- takes a few days. Here's the info on it if you want to give it a whirl though:\nhttps://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide\nWe don't have too many reusable things anyone else would include at this point, but we might of course add more.\n. Nice!! Well done!\n. Thanks Fei Fong Wong, and apologies for the delay! Nice change.\n. Hey tompeer- We unfortunately already integrated that functionality with the d7c5c74 commit -- sorry for the miscommunication. Good to see we implemented it the same way though!\n. I'll definitely look at it too, but I partly want the code review process to give everyone a better familiarity with how everything works, in part to look at things with fresh eyes. This is a pretty confined sliver, so actually a great place to get a glimpse of some of the inner workings of the backend. I've already glanced at just a little bit -- like those makefiles @leahxschmidt!\n. Passing this review over to you @ghostdance!\n. Closing this since it's all merged in.\n. The tests also still aren't quite there. There are basically a couple of tests that succeed individually but not when all tests are run together, so some tests have effects beyond themselves. I haven't been able to fully track this down, but I'll keep looking at it.\n. Also could make sense for @ghostdance to look at this instead? I would say best route is to look at the overall diff versus individual commits.\n. @aranhoide That sounds good. One nice thing about this change is that you actually have to understand much less about SSL than with the previous setup since we just use a bunch of the built-in stuff much more, following the general rule to \"never write your own crypto.\" So the things you have to understand are just keystores, with those basically being used for two different things:\n1) A \"normal\" keystore that keeps your own keys to authenticate with remote hosts.\n2) A truststore -- also a keystore, but one that just stores the certificates and/or signing certificates of peers you trust\nBasically one stores your certs, the other their certs. \nThe use of System.setProperty(\"javax.net.ssl.trustStore\", TRUSTSTORE_FILE.getAbsolutePath()); hides most of the complexity behind the scenes.\n. @ghostdance Yeah I actually think it would be super helpful and more efficient if you took over the review for this, as I think things will be tight for @aranhoide getting all those EC2 servers fully integrated. How does that sound? Bundling parameters is fine.\n. Great thanks! I'll merge as soon as I'm able to fix LanternProxyingTest.\nMuch appreciated.\nOn Thu, Feb 14, 2013 at 11:12 AM, ghostdance notifications@github.comwrote:\n\n@myleshorton https://github.com/myleshorton This looks good. The\n\"connection refused\" errors are happening on master, so, not related to\nthis work (tracking in #560https://github.com/getlantern/lantern/issues/560\n).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/554#issuecomment-13572765.\n. I'm actually surprised that's even possible - so that does successfully\nchange the chrome icon? Very cool. Makes me wonder is we can actually\nintroduce some hack for it on osx and windows too.\n\nOn Wednesday, March 13, 2013, aranhoide wrote:\n\nThis fixes #439 https://github.com/getlantern/lantern/issues/439, but\nI'm touching unfamiliar stuff. In particular, the part that redirects\n\"/org.lantern.index.html\" to \"/\" probably needs some cleanup.\nIn order to set a Lantern launcher (dock) icon for a chrome window, we\nneed to register the lantern .desktop files for the appropriate\nStartupWMClass. Now, Google Chrome sets that based on the address and path\nof the page we pass in the --app command line option (it ignores the port).\nSo strictly speaking we would fix #439https://github.com/getlantern/lantern/issues/439just setting StartupWMClass to 127.0.0.1 in the .desktop files. Now, that\nwould probably conflict with any other app that wanted to run Chrome on\nlocalhost. So we call Chrome with --app=127.0.0.1:\nPORT/org.lantern.index.html to get a StartupWMClass that is less likely\nto clash with other apps, then redirect that to \"/\".\nYou can merge this Pull Request by running\ngit pull https://github.com/getlantern/lantern iconfix\nOr view, comment on, or merge it at:\nhttps://github.com/getlantern/lantern/pull/595\nCommit Summary\n- Fix #439.\n- Redirect /org.lantern.index.html to / .\nFile Changes\n- M install/linux/configureAndLaunchUbuntu.txthttps://github.com/getlantern/lantern/pull/595/files#diff-0(10)\n- M install/linux/lantern-autostart.desktophttps://github.com/getlantern/lantern/pull/595/files#diff-1(10)\n- M src/main/java/org/lantern/ChromeRunner.javahttps://github.com/getlantern/lantern/pull/595/files#diff-2(12)\n- M src/main/java/org/lantern/http/JettyLauncher.javahttps://github.com/getlantern/lantern/pull/595/files#diff-3(12)\nPatch Links:\n- https://github.com/getlantern/lantern/pull/595.patch\n- https://github.com/getlantern/lantern/pull/595.diff\n\n\nSent from Gmail Mobile\n. Hey I added all that stuff we talked about @aranhoide -- should be working but hard to test cuz other stuff breaks when running the ubuntu installer.\n. Just to comment on my glances at the code thus far, there are a couple of issues. First, I generally like breaking ProxyQueue out into a separate class. The major issue I see with that code as-is though is that it adds proxies back into the active pool regardless of whether it knows they're accessible or not from restoreRecentlyDeceasedProxies. It should probably check the proxy for connectivity again. I.e., one reason a proxy can be inaccessible is that we're offline. Another reason it can be inaccessible is that they're offline.\n. The other thing that would be super handy would be a quick test that fires up a set of proxies and brings them on and offline to make sure the queue and such respond correctly. Ideally the would entail the retry timeouts being externally configurable so the test can still be pretty quick.\n. Just thinking about this a little more, I actually think addProxyWithChecks from DefaultProxyTracker should be moved here ideally. I think that would do the trick for now. In the future we could even just keep an open keep-alive connection to the proxy so we'd know as soon as it went offline, but that's probably overkill.\n. Oh yeah sorry -- I was thinking of ProxyQueue. Basically all the external stuff uses ProxyTracker hasProxy to determine if it should send traffic to a proxy, but now those proxies are just less likely to be up since we recycle them without checking for a connection first.\n. By the way I think this all generally looks good as long as we check the connectivity of those proxies before adding them back to the list.\n. Oh right, especially the threading of that proxy check I'm guessing. Hmnn...yeah not loving the circular dependency with ProxyQueue and DefaultProxyTracker.\nMaybe a new ProxyChecker class or something like that -- just breaking out the proxy checking from the tracking and queueing? I feel like the code will get a little hard to follow without a further refactoring here. Just as a quick thought, you could do something like the following:\n1) Create a new ProxyChecker class that just has a modified version of the addProxyWithChecks method (maybe just call it \"checkProxy\") \n2) Corresponding change to ProxyStatusListener adding an onConnect method -- make it listen for connections and well as lack of connections\n3) Use that onConnect method maybe just in ProxyQueue or in DefaultProxyTracker (would need a further refactoring if ProxyQueue to maybe make it implement ProxyStatusListener?)\nSomething like that I feel like would separate out the concerns a little more cleanly. \nAlso coding to interfaces will definitely help with the testability, so to ProxyTracker instead of DefaultProxyTracker for example.\nOn the testing with proxies front, the proxies themselves would just be ServerSockets that are taken up and down. Not strictly necessary now, but would be a really good test for this.\nWhat do you think?\n. Hmn yeah I think the way to avoid the circular dependency with DefaultProxyTracker and ProxyChecker would be to just have it take a ProxyStatusListener and to add the JID from there. Without doing something along those lines I'm honestly not sure it makes sense to have a separate ProxyQueue at all, to store all that state in ProxyHolder, etc.\nWhy not just add the restoreRecentlyDeceasedProxies and restoreTimedInProxies to DefaultProxyTracker and call them in the same way and be done with it? That's way less likely to introduce new bugs (much smaller change) and gets the job done.\n. Hey I haven't had a chance to review all these more recent changes -- give me a sec to give them a look. no tests for anything right?\n. Maybe makes more sense to just queue things locally if we don't have a connection and then to resend them when we get the reconnected event in SessionSocketListener (DefaultXmppHandler)?\n. I guess as well as on startup?\n. I'm not sure I follow. If we don't have a connection, we can't send the message to the server (master of the obvious that I am =). This is exactly what we're seing in the field. So to solve that one approach would be to queue it until we have a connection, which could either be when the XMPP layer reconnects or when we startup Lantern again. That seems like the best way to do it, but what am I missing?\n. Sure, it's possible to be disconnected between the call to isConnected and sendPacket, but even in that rare event sendPacket will throw an IllegalStateException. There's no issue with the TCP connection timing out -- either the TCP connection is established or its not. If it's not, sendPacket will throw an IllegalStateException. We can queue the message in either case. \nAs it stands now, we're asking the server to notify us of a pending invite it has never heard of, and we just keep trying to send it.\n. There seems to be some confusion here. There is no issue with the internal state of TCP. Either we have a connected Socket we can call write on or we don't. If there is no Socket, we were never connected in the first place and DefaultXmppHandler isLoggedIn will return false. If there is a Socket, it's an established TCP socket not waiting for any exponential backoffs related to dropped packets or anything like that. It could have been disconnected, in which case we'll get an exception when we try to write to it.\nThe system with the server sending invites it has sent is generally fine, but it just doesn't address the case we're actually seeing where we're not even connecting to the server. Sure we'll just keep trying to send and waiting for the server to tell us it's done its thing, but we're never getting the message there in the first place.\n. I can't get that test to run because the new Version stuff chokes trying to load the version, so all the injection fails. I believe the way the internal threading in Smack works, however, you won't see any exception right away in that case because it marks it as disconnected on a separate thread, in which case only the subsequent send will throw an exception. My note above is discussing the raw behavior of Sockets -- if you attempt to call write on a disconnected Socket you'll get an IOException. I think in your test case that just happens on a Smack thread that then marks the connection as disconnected, but you'll only see that from our side on a subsequent send. There might be a listener you can register.\nFirst things first, though, if I could run that test I could tell you more!\n. Note I'm running this with a completely empty .lantern.\n. > The tests don't even pass on master without a .lantern directory, because\n\nthey depend on a test.properties file existing in .lantern.\n\nThey can still run with the test.properties file copied to src/test/resources (I wrote this whole system), but regardless it doesn't even get that far because it can't create a Version -- running from Eclipse:\n523    2013-04-16 19:43:08,583 INFO  [main] lantern.TestUtils$TestModelIo.read (ModelIo.java:73) - Failed to read model for some other reason\njava.lang.NumberFormatException: For input string: \"${project\"\n    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n    at java.lang.Integer.parseInt(Integer.java:481)\n    at java.lang.Integer.parseInt(Integer.java:527)\n    at org.lantern.state.Version$Installed.<init>(Version.java:103)\n    at org.lantern.state.Version.<init>(Version.java:27)\n    at org.lantern.state.Model.<init>(Model.java:43)\n    at org.lantern.state.ModelIo.blank(ModelIo.java:82)\n    at org.lantern.state.ModelIo.blank(ModelIo.java:1)\n    at org.lantern.state.Storage.read(Storage.java:85)\n    at org.lantern.state.ModelIo.read(ModelIo.java:53)\n    at org.lantern.state.ModelIo.<init>(ModelIo.java:40)\n    at org.lantern.TestUtils$TestModelIo.<init>(TestUtils.java:204)\n    at org.lantern.TestUtils$TestModelIo$$FastClassByGuice$$3cbe5326.newInstance(<generated>)\n    at com.google.inject.internal.cglib.reflect.$FastConstructor.newInstance(FastConstructor.java:40)\n    at com.google.inject.internal.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:60)\n    at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)\n    at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)\n    at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)\n    at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:53)\n    at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)\n    at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)\n    at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)\n    at com.google.inject.Scopes$1$1.get(Scopes.java:65)\n    at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)\n    at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)\n    at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)\n    at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)\n    at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)\n    at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)\n    at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)\n    at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)\n    at com.google.inject.Scopes$1$1.get(Scopes.java:65)\n    at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)\n    at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)\n    at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)\n    at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)\n    at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)\n    at org.lantern.TestUtils.instance(TestUtils.java:264)\n    at org.lantern.TestUtils.load(TestUtils.java:150)\n    at org.lantern.XmppTimeoutTest.test(XmppTimeoutTest.java:20)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n. > And in terms of the behavior of sockets, the socket has to know it's\n\ndisconnected before it throws that exception. That doesn't happen the\nminute that your internet connection dies.\n\nAs I keep saying in various ways, the Socket throws an IOException when you write to it and it's disconnected. It throws an exception the second you write to it.\n. > If you only see the connection being disconnected later and/or on a\n\ndifferent thread, then I think your proposal doesn't work anyway.  The only\nway it works is if you very quickly learn that you have been disconnected\n(and thus that the server will not see the message).  But because of the\nway TCP works, that's not possible; you have to keep retrying for a while.\n\nThat's why I was suggesting the listener. This is not related to the way TCP works, but let's just say it is for the hell of it -- doesn't really matter.\n. > As I keep saying in various ways, the Socket throws an IOException when you write to it and it's disconnected. It throws an exception the second you write to it.\nIf this were using non-blocking IO, we would actually know as soon as the socket disconnected, but sadly not the case here!\n. > They can still run with the test.properties file copied to src/test/resources\nAlso FYI, the test.properties thing doesn't work on this branch because dev mode in general doesn't work -- LanternUtils.isDevMode is broken yet again!\nIn better news, the test is sorta kinda running for me now, but it can't find test.properties because it's never written anymore.\n. Huh --- interesting -- that's cool!! Didn't realize it just wrote data like that without choking if your internet connection just dies. \nThat's not what happens if the other end disconnects though or if you're not connected in the first place. I feel like we're conflating two issues. We're on the \"no-connect\" branch, but this branch also came to subsume this issue of how to handle invite failures -- the invite failures were caused by an issue with the actual connection, not with your internet. That's actually fixed with my commit from earlier today, but I think we need to re-clarify exactly what we're up to here. \nTo put this more concretely, what functionality on this branch is something we want in our version for testing tomorrow? What user facing issues are we solving that makes this urgent, if any?\n. Or maybe I'm misunderstanding and everything here is just intended for the case when your internet connection goes out? I'm just feeling some urgency to get this branch merged and am wondering if we're getting ourselves wound up unnecessarily.\n. OK cool. To be fair I deserve my fair share of public shaming because those damn fallback connections weren't using SSL and had no test.\nAlso, just to be clear, I'm not questioning the value of the whole branch -- I think it's important. It's just a massive change that I'm reluctant to merge if it doesn't solve an immediate issue our testers are having. Maybe we just wait on it and merge after a little more review and after our test tomorrow? Is there any downside to that?\n. Well I'm worried about a bunch of stuff really -- the reconnecting logic conflicting with the underlying XMPP connection jumps to mind most prominently, but more than anything these are just huge changes to really critical parts of the overall architecture, so the likelihood of bugs is high. \nI want to stay as user-focused as possible in these weekly milestones, so my high-level feeling is if this isn't solving concrete problems users have had and could actually cause a lot of problems for them, then we should hold off.\n. OK cool. I'm inclined to just merge after our meeting tomorrow. I basically don't want to break things fixing something our testers aren't experiencing, and I don't want to push back the meeting for something they aren't waiting for. We can discuss on the call tomorrow though. Until then, thanks for all the hard work guys 'n gals, and lets reconvene in the morning.\n. The changes on this branch are honestly way too radical for me to feel\ncomfortable merging them at this point - I think they need more QA, more\ncode review, and actual code changes. Let's connect on our call.\nOn Wednesday, April 17, 2013, skivvies wrote:\n\nIf it would help, I (and anyone else who can) could do some serious QA\nrunning off the branch over the next several hours until the hangout, and\nif it seems stable in all the environments it's tested in, we could merge,\nbut otherwise wait till the next release?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16507638\n.\n. Looking at this more, I really just think the architecture is off. The following is fairly detailed, but it's because this touches some of the most critical components in the entire architecture, so we really have to nail it. Here's the way I would do this:\n1. Create a new class called ConnectivityChecker or something like that (don't cram more into Launcher -- more testable, less code clutter)\n2. Have that new class publish asynchronous events on connectivity changes -- definitely on re-connection, possibly on disconnection\n3. Have other classes just register as event listeners for those events\n\nThat would have a couple of consequences. First, the code would be much more testable with much clearer separation of concerns. That would create ripple effects including:\n1. DefaultProxyTracker could just check the expired proxy list when connectivity changes, not whenever callers happen to request proxies\n2. Instead of DefaultXmppHandler dealing with XMPP connectivity in addition to everything it already does, we could just have a new class that listens for these events and notifies ControlEndpointXmppP2PClient it needs to initiate its reconnection logic.\n3. I think the invite queueing is generally handy, but I again think it should be in its own class to avoid further cluttering of DefaultXmppHandler and to make it more testable.\n4. The geo stuff that's currently in Launcher threadPeriodicConnectivityUpdate(). You could just have a geo class that would register as a listener just like everything else and would set the lat long accordingly, but that wouldn't be lumped in with the code that does the connectivity check. \n5. Any future classes that are interested in connectivity could just listen instead of shoehorning a check to Connectivity isInternet() into some other action\nBeyond all of that, I think the method of connectivity checking itself could be improved. First, it should not use the global Timer. The reason is that the TimerTask takes too long. A single Timer has a single thread for running all tasks, so each task needs to be quick or it will hold everything else up. Using a Timer generally is fine, but this needs its own timer in order to play nicely with the rest of the program.\nIn addition to the Timer, though, I don't think re-using PublicIpAddress is ideal. What about just checking for connections to weibo.com or something along those lines? Or possibly a number of sites we know won't be blocked (we used to do this through checking a whole bunch of sites in the LW days). This code could be as simple as something like:\n```\n    public class ConnectionCheck extends TimerTask {\n    private final String[] sites = \n        {\"baidu.com\", \"sina.com.cn\", \"sohu.com\"};\n\n    private boolean connected = false;\n\n    @Override\n    public void run() {\n        int successes = 0;\n        for (final String site : sites) {\n            if (checkSite(site)) {\n                successes++;\n            }\n        }\n        if (successes > 0) {\n            if (!connected) {\n                Events.asyncEventBus().post(new ConnectedEvent(true));\n                connected = true;\n            }\n        } else {\n            if (connected) {\n                Events.asyncEventBus().post(new ConnectedEvent(false));\n                connected = false;\n            }\n        }\n    }\n\n    private boolean checkSite(final String site) {\n        try {\n            final InetAddress ia = InetAddress.getByName(site);\n            return ia.isReachable(6000);\n        } catch (final IOException e) {\n            log.debug(\"Not connected\", e);\n            return false;\n        }\n    }\n}\n\n```\n. I actually think it might make the most sense to cherry-pick things like the maven-based versioning and to start a new branch for the other stuff. Whatever's easiest though -- some of the above would be a re-shuffling but some would just be totally new. We'll chat about it later today though.\n. Looks great to me so far. Now boarding a plane to Phoenix after all (don't\nask =)) but will hopefully finish on the plane!\nOne thing I noticed is a return in that check for null -- I think line 39\nof ConnectivityChecker.java should just return!\n. Overall looks great but I still think the connection handling in DefaultXmppHandler could be simpler.\nHere's one approach:\n1) When we move from connected to disconnected, make sure to call disconnect() on the XmppP2PClient's XMPPConnection. That'll trigger the XmppP2PClient's internal reconnection logic (the XmppConnectionRetryStrategy). In many cases, like when the connection is just killed somehow, the XmppP2PClient will also have received a closed event and will already be retrying, but triggering that logic again doesn't hurt anything (it checks internally if it's already connected and ignores subsequent calls).\n2) Have the retry strategy set to retry pretty frequently (every couple seconds?), as it doesn't really not expensive while we're disconnected\n3) Do the same thing as in #1 when our IP address changes.\nThat would make the whole complexity of the ping and pong unnecessary and would also just be much less code.\nActually, can you describe the thinking behind the ping and pong scheme? It seems like either you've been disconnected, in which case you clearly won't be able to ping and pong, or you've just gotten a connection. I guess in some cases the existing connection will still work even if the internet connection has been lost -- is the the scenario where the ping/pong comes into play?\n. Nice! Awesome yeah I really like the change to just call disconnect and to re-use that internal connection logic.\nThe only other thing I noticed I don't think your LanternXmppRetryStrategy is actually set anywhere anymore, but maybe I'm missing something. It looks like that maybe have been removed along the way?\nWith that verified and/or fixed, big thumbs up from my end, and I say merge this baby!\n. Sweet!! Good stuff.\n. Oh looks like we just need to deploy lantern-common again huh? Getting compile errors.\n. Deploying now...\n. Good stuff @skivvies!! Merging as I don't think this will cause problems with any outstanding branch.\n. Hey @leahxschmidt or @skivvies can you take a quick glance at this one, and we'll try to merge before our test today?\n. Yup fixed thanks! Anything else you noticed or should I go ahead and merge? The JsonModelModifier.java code removal was because that code was never hit (path is /settings not settings) but also was duplicating the above call to your LanternUtils.setFromPath(modelService, path, val);\n. OK you probably saw I made a fair number of code comments. The biggest issue though is that this throws OutOfMemoryError pretty quickly on Lantern startup every time. Also DefaultCensoredTest throws OOME every time!\nMuch more minor issue: Can BitInputStream and BitOutputStream be in the util package instead of geoip? Might want to use 'em somewhere else someday.\n. Put the hprof here https://lantern.s3.amazonaws.com/geoip-oome.hprof \n. Nice -- DefaultCensoredTest works for me now! I do still get \njava.lang.RuntimeException: Unexpectedly large number of singleton locations (probably a corrupt geoip.db)\njust running Lantern though. Yeah we could definitely bump up the Xmx a little bit. I try to avoid doing that just because most things I feel like should actually run in 128MB and it's a nice frame of sorts to have, but it's not a big deal if we need to.\n. What's the status on this guy?\n. Interesting. I believe Eclipse by default just runs with more memory too.\nCould that be it?\n. Working for me!! Just made one comment on closing the stream in a finally but otherwise looking good! I'd say ready to merge.\n. Awesome!!\n. Remember that installed versions will not have the About Lantern and Preferences menus -- you'll only see this from the mainline.\n. Correct yeah. In Evernote's case they run a completely separate process\nthat is the one that shows up in the menu bar. We could do the same thing,\nbut it would take a bit of work.\nOn Wed, May 15, 2013 at 4:43 PM, skivvies notifications@github.com wrote:\n\nOh, is that because in installed versions we're hiding Lantern from the\ndock and app switcher altogether? I actually think we should stop doing\nthat while the UI window is open. This is a common UI pattern on OS X with\napps that have a tray icon as well as a separate full UI (Evernote comes to\nmind).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/770#issuecomment-17973095\n.\n. That's correct -- it would be just like running from master if we took that out. I think it's better the way it is, since you wouldn't have all those weird menus to nowhere, but more importantly I think we've got much higher priority things on the list!\n. Hey guys I'm just going to merge this in, as the changes are actually pretty innocuous. One tweak of note @leahxschmidt was swapping collections Bag for Guava MultiSet, primarily because after some of the backend changes that was the only thing that used collections anywhere but also because multiset's a little better in supporting generics, better compatibility with Collections.java, and more active development. Pretty safe change though because the APIs are essentially the same.\n. I think that's generally alright. The advantage of inline class declarations is of course again reducing state, but in this case none of them are really needed as member variables, so there's not much difference.\n\nThe one thing I would say is do you really want those classes to be package access?\n. I'm just pulling this in, as it's all test and script changes.\n. Hey I think this all looks good. The only part I'm hesitant about now is the change to make kscope dependent on friend status -- it seems like without UI changes and especially #816 that'll just completely disable kscope. I think we should do that once we have all the UI elements in place to make it so people are actually Lantern friends. Does that make sense?\n. Like the refactoring to use separate handler methods in DefaultXmppHandler -- nice change.\n. I just want to always have something we can cut a release from on master, but integrating this as it stands essentially disables kscope. I'm just suggesting to not tie this to kscope for the time being until we have UI wrapped around enabling better trust network maintenance, but that's just a two line change so shouldn't block anything either way.\n. Oh, and I totally think tray icon changes would be great too!\n. Yeah let's make these tickets as fine grained as possible. Can we just\nmerge this one in without the kscope stuff to take this ball out of the air?\nOn Mon, Jun 17, 2013 at 3:03 PM, skivvies notifications@github.com wrote:\n\nThose are covered by part of #158, though we could certainly break the\naddition of an unread notifications state out into another ticket.\nOn Mon, Jun 17, 2013 at 4:29 PM, myleshorton notifications@github.comwrote:\n\nOh, and I totally think tray icon changes would be great too!\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/817#issuecomment-19572423>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/817#issuecomment-19578152\n.\n. Nice!\n. Very cool! Just one head's up -- the use of profiles to trigger this will break the build process because profiles are also used to trigger platform-specific builds. So setting the profile to \"release\" means the profile won't be set to \"mac\", for example, which will just break the build. See osxInstall.bash, debInstall.bash,and winInstall.bash.\n\nOh to test you can also just build off any specific version -- so\n./debInstall64Bit.bash 0.21.3-16 false\nfor example. That won't work correctly with your code as-is though because the profile will get clobbered -- I had to revert this same with one of your other changes that did the same thing -- can't remember which now.\nBut otherwise this will be awesome! Will be curious to see how much it reduces the size of the OSX and win installers.\n. I'm just saying that to test it you can choose any tag you wish. Doing a release creates a tag. It's only broken in the case of trying to release from HEAD but for the purposes of testing this should not be an issue.\n. You can also just create an arbitrary tag and build off that.\n. Well we're about to release a new version off master very soon, so I guess we'll find out.\n. Does proguard also strip unused methods within classes? Looks like it messed up reading old settings files in some cases.\n. It doesn't seem like we should have these changes on master -- I don't think we have time to test them before getting this version out, and the first run with them failed for me.\nThey do save about 2.5MB in installer size on OSX and win, but just seems really risky.\n. Actually I can't find anything wrong with the build scripts off head -- seems to work fine. This is again all documented at:\nhttps://github.com/getlantern/lantern/wiki/Release-process\nWhat problems did you have with it?\n. Just reverted this merge. To undo make sure to revert the revert!\n. I guess I'm unclear what the hassle is -- if you're building on your branch, there are no upstream changes that will be pulled. The built version being called lantern-HEAD-.dmg is a problem why?\n. Looked like the \"required\" methods were stripped from WhitelistEntry, which meant we couldn't read old settings that had it.\nOne option here is just to create a new name for the saved model and not worry about it. I reverted because that's just the one issue I came across, and most of the potential issues with proguard would happen at runtime so lots of testing is required to actually release them.\n. Hey sorry got caught up in all the Iran stuff today. I basically think we\nneed to merge this when we aren't pushing a ton of releases because any\nissues could be subtle. Next week sometime?\nOn Fri, Jun 14, 2013 at 1:26 PM, Leah X Schmidt notifications@github.comwrote:\n\nAnyway, I added the necessary code to handle WhitelistEntry. How would you\nlike to handle testing and merging this?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/821#issuecomment-19479750\n.\n. I think things are settle down enough for us to just go ahead and integrate this...\n. Oh great - was reproducing sweet\n\nOn Friday, July 5, 2013, Leah X Schmidt wrote:\n\nIt was pretty straightforward once I could reproduce it!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/831#issuecomment-20503803\n.\n. Is there a test for this? Have you tried it on all operating systems? There's definitely an issue on Windows at least, as the paths are both wrong for Window 7 and above (Document and Settings doesn't exist) but will also break on other locales that don't use english for standard paths (Program Files is \"Archivos de programa\" in Spanish for example).\n\nA better way to get those paths is to use getenv(\"ProgramFiles\") and getenv(\"APPDATA\"), for example. We also never install to Program Files, however, so that shouldn't be the path. The problem is that if those paths don't exist, or if there's another bug, this will probably crash all of lantern as it stands.\n. You can also just use #ifdef APPLE and #ifdef __linux -- a little cleaner than calling out to the shell.\n. > As for automated tests, well, it only runs if it is setuid. And, of course, it is designed to only run from an installed location. And it makes permanent changes to the host system (which are potentially idempotent and thus hard to detect).\nIt doesn't have to run as setuid, and the key is to actually write it so it's testable. The unit tests pretty much always run as admin - you can just write a unit test for LanternUtils that calls it, passing it the paths. This could include the path to the policy files as well, which will always be relative to the current directory (System.getProperty(\"user.dir\")). That way the C code itself doesn't have to worry about where those files are and won't break if the install path changes for some reason (which we would never detect before it was too late, especially without tests!). You can copy the old file prior to the test and test that the new files are copied correctly, cleaning up afterwards. You could also just pass it some arbitrary path and ensure the files are successfully copied there -- heck copy 'em to temp.\n\nAnd uname(3) does not call out to the shell -- it is a system call. uname(1) calls uname(3) rather than the other way around. I'll change it if you care.\n\nOh my bad -- misread it. It's still a pretty roundabout way of determining the OS, but not a big deal. \n\nI should also mention that this won't crash Lantern at all, because at\nworst, the setuid program crashes, and then we get a log message.  We're no\nworse off than if we didn't have it.\n\nAh true -- was thinking of JNI.\n. > We cannot distribute what is effectively a setuid version of cp, because that would be a massive security hole. That's the reason this code has all of these hard-coded paths. It's not because I'm trying to be gratuitously weird and write terrible code -- it's because setuid is really stupidly dangerous, and I'm trying to avoid security holes.\nI'm not suggesting arbitrary paths but rather the path to the policy files. You're only copying those two files, and you can safely copy them anywhere on the system. There is no security issue with that at all (copying them anywhere but lib/security has zero effect), and it solves all the problems we've discussed. That would also be a massive simplification to this code -- could do it in probably 10 lines of code.\n. If someone has access to the hard drive such that they can call copyPolicy,\nthey have many ways of filling up the disk.\nOn Mon, Jul 8, 2013 at 11:24 AM, Leah X Schmidt notifications@github.comwrote:\n\nI think there's a quota problem -- because copyPolicy is setuid, it can\nignore quotas. A user can create many directories named a/lib/security,\nb/lib/security, etc (assuming their quota allows the creation of many\ndirectories, which it might), and use copyPolicy to fill up the disk.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/832#issuecomment-20625687\n.\n. Works for me.\n\nOn Mon, Jul 8, 2013 at 12:35 PM, Leah X Schmidt notifications@github.comwrote:\n\nI'm not aware of any way that standard unix quotas are flawed.\nBut I think I might have just thought of a simpler solution, but I'm not\nsure if it necessarily works in all cases. What if we only overwrite\nexisting US_export_policy.jar and local_policy.jar which (a) exist and (b)\nare owned by root.\nAre there cases where this would not work?\nOn Mon, Jul 8, 2013 at 2:34 PM, myleshorton notifications@github.comwrote:\n\nIf someone has access to the hard drive such that they can call\ncopyPolicy,\nthey have many ways of filling up the disk.\nOn Mon, Jul 8, 2013 at 11:24 AM, Leah X Schmidt \nnotifications@github.comwrote:\n\nI think there's a quota problem -- because copyPolicy is setuid, it\ncan\nignore quotas. A user can create many directories named\na/lib/security,\nb/lib/security, etc (assuming their quota allows the creation of many\ndirectories, which it might), and use copyPolicy to fill up the disk.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/832#issuecomment-20625687>\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/832#issuecomment-20626298>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/832#issuecomment-20630241\n.\n. Great point on the windows front -- yeah seems likely it will work for admins but just fail for non-admins, but agreed that might be the best we can do.\n\nThis looks great to me, and the only think I think would be worth an additional test is just making sure it handles spaces OK on all OSes -- Windows should be quick with \"Program Files\", but I basically just want to make sure those paths from the java side work correctly when the exe actually goes to execute them (proper quoting and such).\n. Sweet! So is this pretty much ready to go all the way through, in terms of\nintegration with the installer and getting called at launch time? Anything\nI need to do on the installer side?\nOn Tue, Jul 9, 2013 at 2:12 PM, Leah X Schmidt notifications@github.comwrote:\n\nNone of this goes through the shell at all, so quoting should not be an\nissue. Using the shell is almost always a giant unnecessary security\nnightmare, so I always try to avoid it.\nThe tests pass just fine for me on Windows XP when java_home is a path\nwith spaces.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/832#issuecomment-20705825\n.\n. OK sweet - I'm running out the door but you want to just go ahead and merge\nit in? Looks like it can't be automatic anymore for whatever reason.\n\nOn Tue, Jul 9, 2013 at 6:56 PM, Leah X Schmidt notifications@github.comwrote:\n\nI think the installer should work as-is, and nothing is needed before the\nmerge.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/832#issuecomment-20717375\n.\n. Why do you think the current key sizes are too small?\n. DefaultLocalCipherProvider isn't actually used, but I don't see how this change could be harmful. I don't think the size of the password on the keystore is particularly important, but again it can't hurt.\n. Did you run all the tests on the proguard generated jar by chance?\n. You'd have to do some custom classpath wrangling most likely -- like build\nthe proguard jar, and then put it on the classpath removing everything\nelse. Something along those lines.\n\nOn Sun, Jul 7, 2013 at 9:22 PM, Leah X Schmidt notifications@github.comwrote:\n\nAll of the automated tests? How do I do that? I did a brief manually test\non OS X and Linux (I'm not sure if I tested on Windows).\nOn Sun, Jul 7, 2013 at 9:25 PM, myleshorton notifications@github.comwrote:\n\nDid you run all the tests on the proguard generated jar by chance?\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/837#issuecomment-20581606>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/837#issuecomment-20585047\n.\n. You could just add all the test-only code to be fully included in the proguard config. Since it's not shipped in production, that config should have no effect on the jars built for production while allowing you to test this more thoroughly.\n. > Some of the code used only by tests is actually part of jars which are part of the production build. \n\nThat statement appears inherently untrue, but can you explain?\n. My suggestion in that case (where jars are used in both tests and production) is simply to include the class files used in tests also in production. In the example you gave, we'd be potentially including AmazonEc2Utils in the production jar when we don't need to, but the savings would be extremely small. In that particular case, AmazonEc2Utils is almost certainly used in production as well (not directly from lantern code), so it's really a non-issue.\nThere are likely extremely few cases like that, and they're easy to deal with. The problem is that otherwise we're committed to only testing by hand at runtime. If we actually can run the tests with proguard-built jars, we at least have a prayer of catching bugs before they happen in the field when we add new jars and forget to add them to proguard or misconfigure them in proguard.\n. Can we add a ticket to eliminate code triage and wait for that to appear in\ncode triage? Just kidding -- I sort of reluctantly like it. We never came\nup with a decent way to test this, which will be a nightmare going forward\nbecause things will be broken without us knowing. It also only saves 2MB so\nclosing.\nOn Mon, Sep 30, 2013 at 3:08 PM, skivvies notifications@github.com wrote:\n\nCode Triage suggests we do something with this PR before it gets more\nstale. @myleshorton https://github.com/myleshorton Appropriate to take\nany action on it now?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/837#issuecomment-25410768\n.\n. I think we can commit things like this to master -- things that just clearly don't affect anything else. I've been doing that with Diagnostics.java -- basically an initial sketch of a program to run some diagnostics on remote machines.\n. I can certainly do that. The main reason I haven't merged this is that we\njust have higher priority outstanding bugs, but I will certainly build the\nexe for the correct platforms when we do merge this.\n\nOn Mon, Aug 19, 2013 at 9:37 PM, Leah X Schmidt notifications@github.comwrote:\n\n@myleshorton https://github.com/myleshorton can you recompile the os x\nexecutable so that we can merge this? I just realized that it had not\nactually been merged.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/857#issuecomment-22922106\n.\n. Gotcha. So that should be under a new ticket.\n\nOn Mon, Aug 19, 2013 at 11:30 PM, Leah X Schmidt\nnotifications@github.comwrote:\n\nIt turns out that for some reason it's not working on win7 anyway. I'm\nlooking into why.\nOn Tue, Aug 20, 2013 at 1:29 AM, myleshorton notifications@github.comwrote:\n\nI can certainly do that. The main reason I haven't merged this is that\nwe\njust have higher priority outstanding bugs, but I will certainly build\nthe\nexe for the correct platforms when we do merge this.\nOn Mon, Aug 19, 2013 at 9:37 PM, Leah X Schmidt \nnotifications@github.comwrote:\n\n@myleshorton https://github.com/myleshorton can you recompile the\nos\nx\nexecutable so that we can merge this? I just realized that it had not\nactually been merged.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/857#issuecomment-22922106>\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/857#issuecomment-22923457>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/857#issuecomment-22925128\n.\n. I don't do anything with copyPolicy.exe at all on any platform -- I copied all the policy files before copyPolicy.exe existed.\n. Just closed.\n\nOn Tue, Sep 24, 2013 at 11:40 AM, skivvies notifications@github.com wrote:\n\nHey @myleshorton https://github.com/myleshorton, Code Triage just\nreminded us to process this PR before it gets more stale. Anything we can\ndo here?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/857#issuecomment-25031255\n.\n. Cool thanks -- will test!\n. Cool thanks. So we really want to do this more along the lines of what I described in #588, probably just merging the branch I pointed to. We definitely don't want this to use ConnectivityChangedEvent as opposed to ProxyConnectionEvent as ConnectivityChangedEvent doesn't indicate whether or not Lantern is active.\n\nMore importantly, though, these other tickets are more important than this -- especially #884, #880, and #868.\n. No - there are no TrustRelationships in the controller anymore, but more\nimportantly you will see the list of people who have added you but you\nhaven't added back already because they send you XMPP subscription requests.\nOn Monday, October 7, 2013, skivvies wrote:\n\nCode Triage flagged this PR. We didn't end up doing anything with this yet\nin the UI (i.e. showing a list of the people who've added you that you\nhaven't added back). That's partially covered already by friend\nsuggestions, but not completely. Do we want to merge this so we have the\noption in the future? The corresponding PR in the controller is\ngetlantern/lantern-controller#40https://github.com/getlantern/lantern-controller/pull/40\n.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/900#issuecomment-25821235\n.\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Oh gotcha. The only case that's not covered is when a person already on\nyour roster has added you but you've never been online when they're online\n(as soon as you are it will trigger a friend request). I don't think that\ncase makes sense though, because it's not useful to be friends unless\nyou're both online at the same time at some point. As soon as that ever\nhappens, you get prompted.\nOn Monday, October 7, 2013, skivvies wrote:\n\nThat's what I meant by the \"that's partially covered already\" bit. I'll\nclose this and getlantern/lantern-controller#40https://github.com/getlantern/lantern-controller/pull/40given there are no TrustRelationships in the controller anymore.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/900#issuecomment-25821855\n.\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Yeah I think the biggest problem with this change is it fixes a problem\nusers should never experience in the field and haven't experienced to our\nknowledge. If they do experience it, the actual bug is something totally\ndifferent like a fallback proxy failure or fallback proxy blocking that's\nreally much more serious and would require a different solution that this\none doesn't fix. Given that, it's a change that's more likely to cause bugs\nthan it is to fix something for the user.\nI'm also skeptical of #981 because that's how we used to do it before\nswitching to the current system. We made that switch because of all the UX\nadvantages, particularly not kicking the user out to a separate window\nthat would frequently hide the Lantern window and was just a jolting user\nexperience. There are certainly UX advantages to the separate window, but\nthis is again an issue we don't see users clamoring for but that at the\nsame time is likely to cause more bugs and more work, taking away from\nissues users are actually advocating for, like the installer size.\nOn Tue, Oct 29, 2013 at 9:15 AM, skivvies notifications@github.com wrote:\n\nThis will also close #981https://github.com/getlantern/lantern/issues/981when merged.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1091#issuecomment-27317384\n.\n. Are there any issues introduced here if the lantern client doesn't include the latest lantern common immediately? Will updates still work?\n. OK. The only part I can see that was half-backed though was the proper handling of Modal.updateAvailable in InteractionServlet as a \"switch model\". Everything else looks like it should have worked fine. Why wouldn't the modal display when you clicked on it? Because the backend didn't include the Modal.updateAvailable in InteractionServlet?\n. OK cool. It seems like this should have then been a two line change in\nInteractionServlet though no?\n\nOn Mon, Nov 18, 2013 at 8:21 AM, skivvies notifications@github.com wrote:\n\nThat is, not just the switchmodal logic, but the symbols being missing\nfrom\nthe enums altogether.\nOn Monday, November 18, 2013, myleshorton wrote:\n\nOK. The only part I can see that was half-backed though was the proper\nhandling of Modal.updateAvailable in InteractionServlet as a \"switch\nmodel\". Everything else looks like it should have worked fine. Why\nwouldn't\nthe modal display when you clicked on it? Because the backend didn't\ninclude the Modal.updateAvailable in InteractionServlet?\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/1147#issuecomment-28711139>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1147#issuecomment-28712223\n.\n. Yup nice catch @yegle! Thanks.\n. I don't know how widely CHROME_PATH is used, but it could certainly help to check it!\n. Nice!\n. This will be handled as a part of #1265 \n. Hmnn...OK -- I thought work for this was happening on the 1282 branch (9bbf173) and that we decided to use different fields. I implemented that and just hadn't pushed it yet, so sounds like we need to coordinate more. Which branch is the active branch for #1282?\n\nThe freeToFriend approach works fine. I just used \"suggestedBecauseOnRoster\" and \"suggestedBecauseInvited\" but this should work too.\n. Hey I'm just going to go ahead and merge this @aranhoide!\n. Oh hey sorry -- I was just doing the same thing =). Thought you were probably already offline. I don't think we want your branches changes to wrapper.install4j do we? \n. Also not sure FallbackProxy can be generated from json without those setters?\n. OK cool -- it definitely is capable of that but didn't think it was the default, but if it's working we're all good. You want to do the honors if you think this is all set to merge?\n. Sweet thanks! Weird it auto-merged them -- definitely didn't for me when I was merging from master to the branch at the same time as you, but doesn't really matter. Looks like we're good -- thanks @aranhoide \n. @oxtoacart totally agreed on the signaling layer abstraction -- definitely not reason really any of the code should know about XMPP specifically. This change was more to move the ball forward, as you said, on the general decoupling front and just happened to touch the XMPP stuff, but I completely agree signaling should be more abstracted. LanternTrustGraphNode shouldn't know anything about XMPP for example. This change is really about it not knowing about any signaling mechanism, but I definitely agree that as a separate issue signaling itself should be more abstracted.\nI totally agree this approach makes using a debugger more cumbersome, and I wonder if there's some design around that.\nOn the asynchrony front, keep in mind that it just so happens this example made that call asynchronous because there's just no need for synchrony here. It could have also just as easily done the same thing synchronously, however, as in:\njava\nEvents.eventBus().post(packet);\nor for ordering:\njava\nEvents.inOrderAsyncEventBus().post(packet);\n. @oxtoacart nice! I haven't written any QT code since college myself, but I agree their signals and slots stuff is nice on the decoupling side.\n\nFor example, I think we need a signaling channel abstraction that's completely independent of XMPP as an implementation, and that the rest of the system (including our NAT traversal logic) should be coded to this abstraction.\n\nI forgot to mention that the NAT traversal code does fully support plugging in different signaling layers. There are high level convenience API calls for SIP and XMPP, but underneath it doesn't know anything about the signaling server implementation.\n. @oxtoacart you down with merging this?\n. Generally looks great to me Ox! On the python side this is all handled through patches to FTE right?\nThe only major thing I noticed was that it would be really nice if the regex itself were configured through S3Config.\nOne minor nit: I'm not a big fan of the Properties class in general, mostly because it allows setting and getting of non-strings API-wise, which would wreak havoc if it ever happened. Any interest in just using Map? Jackson can also load that from disk just as easily.\n. > @myleshorton Thanks for reviewing! There are actually no patches to fteproxy itself, just its build process for Windows. To get fteproxy to use custom regexes, we create a new definition file inside of the fte/defs folder at runtime and then tell fteproxy to use that.\nNo problem! Yeah I guess ideally to me we'd be able to specify that in the S3 config file and/or kscope ads (which we should probably consider merging!), which would then populate the new file in fte/defs. To me it seems really likely that we'll want to tweak those regexes, and it would be cool if that were globally available.\nActually, come to think of it, I think we should consider having the S3 Configs/kscope ads point to canonical URLs for those regexes in the same way we discussed for whitelists. That's a different ticket, but it would be nice if we didn't have to repeat the same regex in every s3 config file and kscope ad.\n. > Regarding the use of java.util.Properties - that's what commons-cli returns to me for getting the key-value pairs from the command-line, so I figured I'd just stick with that data structure throughout. If you feel strongly about it I can populate a Hashtable from the java.util.Properties and pass that on instead.\nOK cool -- no biggie. Markdown dropped my Map<String, String> typing before, but it's really not super important. I guess in theory you could actually cast a Properties object to Map<String, String> as soon as you read it, but it's really a minor thing.\n. Oh I see cool! I missed that FallbackProxy.java now extends ProxyInfo -- good stuff!\n. Yes!\nOn Thursday, February 27, 2014, oxtoacart notifications@github.com wrote:\n\n@myleshorton https://github.com/myleshorton may I merge?\n\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1413#issuecomment-36321741\n.\n. Nice!!\n\nOn Tue, Apr 1, 2014 at 8:45 AM, oxtoacart notifications@github.com wrote:\n\nMerged #1466 https://github.com/getlantern/lantern/pull/1466.\n\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1466\n.\n. I love it @skivvies! Rockin' some java code! I only noticed a couple of nits -- two on just coding to interfaces (makes testing easier, avoids casting amongst other things). I'll add the nits inline. The other thing I was wondering was why you store this to the model. You want it saved on subsequent runs?\n\nOh, and where the heck does this thing run? I'll also fix the things I broke with the config fetcher stuff -- I can just merge from master...\n. Sounds great! I would say ditch storing it unless there's a reason.\nOn Monday, April 21, 2014, aranhoide notifications@github.com wrote:\n\nI don't know/remember why we added this to the model, but we definitely\ndidn't want to keep any state whatsoever between runs of this. Indeed we're\nwiping the .lantern folder altogether before calling this.\nThis is run in the cloudmaster. We thought this was a good place to put it\nbecause:\n- the cloudmaster already knew about all fallbacks (this turned out\n  not to matter, since we are getting the list from the controller via S3),\n  and\n- traffic between the cloudmaster and the fallbacks doesn't add any\n  new discoverability vector, since the cloudmaster is already contacting all\n  fallbacks.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1481#issuecomment-40978451\n.\n. > @myleshorton I use the local .s3config during development to allow me to point at various different proxies, including test proxies that I spool up just for development purposes. How will I be able to do this if we merge this change?\n\nGood question. When you do that, what's your process for getting the correct auth header, cert, etc, into the local config file? I would say that we should add a script so that whatever you're currently doing at that step just instead automatically uploads that config to the lantern-config s3 bucket and spits back the bucket path to you. Then you can just set that as the path in .lantern-configurl.txt. Should hopefully overall be easier.\n\nAlso, I'm totally on board with using cached configuration if that's already available, but what does that have to with whether or not we look for the availability of a local .s3config?\n\nI'm not sure what you're talking about here. I didn't really change anything with using a cached configuration or not -- both approaches would use the stored configuration.\n. > I would say that we should add a script so that whatever you're currently doing at that step just instead automatically uploads that config to the lantern-config s3 bucket and spits back the bucket path to you. \nI should clarify that script could just automatically run on the fallback itself with a flag or something.\n. > @myleshorton btw, what was the root cause of #1475?\nIt was that the new S3ConfigFetcher would show an error message to the user every time there was any error downloading the S3 config file regardless of whether you already had a valid proxy. We'd never see that in development because you'd never hit that code path.\n. > The piece that I don't understand is\n\nthat IIRC the .s3config file isn't included in the Lantern installer, so if\nwe're testing using the Lantern installer, the local .s3config shouldn't\ncome into play and can't mask anything.\n\nRight -- I'm saying it's masking it in development not in production.\n\nIs it possible that we missed this\nbug because reproducing it requires some level of network unreliability,\nwhich is not something that we test for when doing our manual tests?\n\nNo, because in development you'd never fetch the remote config at all. The flakier the network the more likely the bug for sure, but we've received reports of it in production in LA, and the old code would just mask any issue there.\n\nI also noticed that in your recent changes, you are once again copying the\n.lantern-configurl file from one place to another.  How does that play into\nfixing the bug?\n\nI just reverted to the old version of the fetcher that didn't have this bug and didn't mask the issue (and is arguably much more straightforward code), and that's what it did.\n. > The question remains as to why we didn't catch this in QA and what the root\n\ncause actually is.  I think the root cause is actually that we display this\nalert any time that fetching the S3 configuration fails, irrespective of\nwhether or not we already know about a fallback.  \n\nThat's definitely the root cause.\n\nThe reason we didn't catch it in QA is because we didn't test with a flaky enough network to\nstimulate that condition.\n\nThat's part of it, and it's also that inherently in QA we tend not to run it for long enough or over multiple sessions. If you run the installed version of Lantern enough, you'll almost definitely get that warning message with the previous code. That's why having the development code match the production code is so important.\n\nThis doesn't fix the real issue, it actually just relaxes the condition\nthat shows the alert dialog in such a way as to defeat its purpose.\n\nI agree we should also show the alert if we actually have no fallbacks. Note that we have not yet heard of or seen that case in production - both Eric and Chris reported #1475 when running after the initial install, and the logs we're getting for it are of course coming through a working fallback. It certainly could be happening, but we haven't seen it. \nThe code before this change will show the alert if your WiFi happens to go out or with any other network error, though, making Lantern feel broken (try just turning your WiFi off with Lantern running). If we're saying the real issue is with downloading the config file (#1474), my changes address that in a few ways:\n1. Adds another retry to the HttpClient (we used to retry twice, now we retry three times). Maybe we should retry more?\n2. To thwart potential censors causing this issue as a result of identifying HTTP request message sizes, it adds a random length header to the HTTP request.\n3. It requests the config file through the fallback if it can't reach it directly. Just the fact that we're getting logs for this again indicates that the fallback is accessible in many of these cases, so we should be able to access the config file through the fallback some percentage of the time.\n\nwe should store fallbacks that we\nlearned about from previous runs, otherwise we'll still see this error if\nthe S3 config fetch happens to fail right after starting up Lantern.\n\nAs you mentioned, the code already does that.\n\nSo, to be clear, the changes to support a local .s3config didn't break\nthis, and the most recent changes to remove that logic didn't fix it, they\njust masked it by changing the condition that displays the dialog.\n\nWell, those changes created all the instances of the bug (#1475) we've actually seen. This PR fixes those cases but also doesn't show the error dialog in the case where we can't download the config file and have never been able to, but that's a pretty simple change. The PR also takes steps towards fixing #1474, but there will also always be cases where we can't download that file due to network issues.\n. > I agree, we gotta test longer and over multiple sessions. FWIW, running in\n\ndevelopment wouldn't achieve this for me, because in development mode I'm\nconstantly restarting Lantern, blowing away the .lantern folder and causing\nother trouble as I monkey about with the code.  I think the real solution\nis to have a longer QA phase in which we all actively use a QA build of\nLantern for a week or so.\n\nThat would certainly help, but also having the production code match development increases our chances of catching things significantly. Basically, if any of us ever had network issues while running Lantern, we'd have seen this.\n\nI'm quite sure that we did run into this in production, and that this was\nin fact the reason that you made this\nchangehttps://github.com/getlantern/lantern/commit/fa480cc07dc53dcda5e3f22d02bedf5b054c8fd0.\nI recall us seeing weird errors in logs that were caused by someone trying\nto run without actually having a fallback, so we decided to just interrupt\nthings when we weren't unable to get an S3 configuration on first run.\n\nI don't doubt that this can happen in production and likely has -- clearly if the user has connectivity problems when first setting up Lantern, it'll happen. Snyder's initial code does have that handy very short wait time in that scenario though, so it'll keep retrying. That commit added the error message when we can't find the URL file itself.\n\nOh, the other thing that occurred to me about the local .s3config is that\nit is what allows the automated unit tests to run in our continuous build\nenvironment.  If we get rid of it, we need to replace it with something\nelse that allows the tests to find a fallback against which to run.\n\nRight -- that's why the PR has the local .lantern-configurl.txt file pointing to the\n--..dev-config\nfolder. The old code always looked for the URL file in the local directory, and now there's just a file there. It'll load the S3 config from that folder, and for testing I think we should just keep putting the S3 config at those folders. That way development matches production, and in theory it should be just as easy to put those config files on S3 as locally.\n. > Given that Eric and Chris have gotten this message in production, is it\n\nfair to say that we do in fact encounter scenarios in which the S3\nconfiguration can't be downloaded \n\nJust continuing with the various pieces I didn't get a chance to respond to, but yes we're definitely seeing errors downloading the s3 config file in production -- that's why #1474 exists! What's unclear is whether it's happened for users on that first run.\n\nand that it's good to have this messaging\nin there (with the added check of only displaying it when you don't already\nhave fallbacks)?\n\nRight -- that's what the PR does! \n. All good to merge this?\n. OK cool merging thanks! On the POST issue, I believe it just retries the connection itself not the actual data, but I could be wrong.\n. > It's very edge case, but what happens if connectivity is lost between the time that we fire the event and the time that we attempt to establish the XMPP connection?\nGood question. In theory the connectivity event should fire again whenever we connect to the proxy again, leading it to kick off the XMPP connection. The friends stuff has a few extra checks in there to see if we've already loaded them or not. I think it general testing more with disconnections is in order, so I'm leaning towards merging and testing those cases more in general (since it sounds like there are issues with our without those changes).\n\nI would so dearly love to see the whole startup sequence factored to look more like the below pseudo code so that anyone can quickly understand what needs to happen and the dependencies/order of it, but that's too big/risky of a change to do at the moment.\nconfigureProxies()\nauthenticateToGoogle()\nconnectToXMPP()\nloadFriends()\nkickOffAsynchronousBackgroundTasks()\n\nYeah agreed. It gets a little tricky at the \"authenticateToGoogle\" step since that can be from a pre-existing oauth token or through the UI setup sequence, but I agree that would be much easier to follow.\n. Yeah it's all a little more fragile than would be ideal, but it should work.\nOn Friday, April 25, 2014, oxtoacart notifications@github.com wrote:\n\nThis must have been fun to debug, nice work!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1502#issuecomment-41406406\n.\n. OK, I just tweaked the XmppConnector name but will merge now.\n. @aranhoide and @myleshorton paired on this and code reviewed extensively along with great help from @oxtoacart. Merging!\n. I'll take this one.\n. Hey @oxtoacart I feel like we can probably just commit straight logging changes like this. Do you feel like this should be a PR? \n. I feel like maybe logging only changes is a bit of overkill, but I don't\nfeel super strongly. There's definitely a simplicity to having everything\nbe a PR.\n\nOn Tue, May 13, 2014 at 1:55 PM, oxtoacart notifications@github.com wrote:\n\n@myleshorton https://github.com/myleshorton Thanks for pulling. I'm\ntrying to do all changes to lantern as prs. Is that overkill?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1532#issuecomment-43011449\n.\n. @oxtoacart can you give this a look when you have a chance? Unfortunately got rid of the PublicIpInfoHandler init call from Launcher because it conflicts with the PublicIpInfoHandler event processing when a proxy comes back online, which was one of the issues @aranhoide and I fixed. So we basically were hitting init twice immediately on startup.\n. Nice catch -- just tweaked it! Look ok now?\n. @oxtoacart Can you give this PR a look as well?\n. Closing this for now. We might reuse some of this for the more general extension not specific to certs.\n. Nice! I think overwriting is probably fine as it's come directly from us\njust prior.\n\nOn Thursday, May 15, 2014, oxtoacart notifications@github.com wrote:\n\n@aranhoide https://github.com/aranhoide @myleshortonhttps://github.com/myleshorton\nTested on Mac and Windows.\nRight now, it categorically overrides whatever .lantern-configurl.txt was\nin the user's home folder. We should think about whether we want to do\nthat, or leave it alone, or be even smarter about it (i.e. if the existing\none looks right, leave it alone, otherwise overwrite it).\nYou can merge this Pull Request by running\ngit pull https://github.com/getlantern/lantern s3filename\nOr view, comment on, or merge it at:\nhttps://github.com/getlantern/lantern/pull/1553\nCommit Summary\n- Installer grabs configurl from filename\nFile Changes\n- M install/lantern.install4jhttps://github.com/getlantern/lantern/pull/1553/files#diff-0(45)\n- M lantern-commonhttps://github.com/getlantern/lantern/pull/1553/files#diff-1(2)\nPatch Links:\n- https://github.com/getlantern/lantern/pull/1553.patch\n- https://github.com/getlantern/lantern/pull/1553.diff\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1553\n.\n\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. That is odd. Building the installers in GUI mode should yield more\ndebugging info in theory.\nOn Friday, May 16, 2014, aranhoide notifications@github.com wrote:\n\nDamn. I'm having the stupid day.\nI tested that this installed Lantern alright, but I failed to check its\nvery purpose. And indeed building an installer with ./debInstall64Bit.bash\nlocal false and installing the corresponding .deb failed to give me a\n~/.lantern-configurl.txt , just like in my own tests. I looked both in my\nhome directory and /root. So this seems not to be working on Linux at least.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1554#issuecomment-43344315\n.\n\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Oh right. I think you might be able to run a script as the sudo user but\nmaybe not.\nOn Friday, May 16, 2014, oxtoacart notifications@github.com wrote:\n\nSo, the problem on Linux is that our main installer requires that it be\nrun as root (i.e. using sudo). That results in Install4J picking up the\nroot user's home directory instead of the actual user's home directory.\nox@ubuntu:/tmp/hometest$ cat Home.java\npublic class Home {\n    public static void main(String[] args) {\n        System.out.println(System.getProperty(\"user.home\"));\n    }}\nox@ubuntu:/tmp/hometest$ javac Home.java\nox@ubuntu:/tmp/hometest$ java Home\n/home/ox\nox@ubuntu:/tmp/hometest$ sudo java Home\n/root\nThis is not a problem with the installer wrapper because it doesn't run as\nroot.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1554#issuecomment-43358591\n.\n. Closing this for now.\n. Great review @oxtoacart thanks!\n\nOn Wed, May 28, 2014 at 4:19 PM, atavism notifications@github.com wrote:\n\nGot it! Applying all of your changes now. Thanks for the review!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1565#issuecomment-44458984\n.\n. I would make a couple more recommendations. First, we use four spaces as delimiters in general -- only noticed that as an issue in GeoData. Talking more about GeoData, though, unless there's some strong reason to not map it directly to the JSON, where each JSON field corresponds to a getter and setter in GeoData, I would just do the normal mapping. I think it only makes a real difference when other programmers go to read the code. Unless there's some big win, I don't think it makes sense to force them to figure out the mapping it's using.\n\nI would also strongly recommend adding a test for GeoData that just parses a JSON file sitting in src/test/resources. That would first self-document the format of the JSON but would also make it easier to play with refactoring that class without going through the network each time.\nFinally, I don't love the use of the static queryGeoServe in GeoData. Ideally the data would just be the data, and that would live somewhere else, although I'm not sure where.\n. Cool thanks! Yeah I guess that's a little bit of what I'm getting at with the external json file. Without knowing what the json looks like, it's hard to tell much about the mapping to Java classes. The more \"normal\" way to do it within GeoData would be to just have getters and setters for Country and Location but nothing else.\n. Nice thanks! Damn makes me realize there's a heck of a lot of JSON data returned huh? We pretty much only use the latitude, longitude, and country right? @oxtoacart could we maybe add the ability to specify a flag specifying what data we want from the server?\n. Just added a pretty print version using:\ncat src/test/resources/geodata.json | python -mjson.tool &> geodata-pretty.jso\nFeel free to delete or use!\n. Ha! That's exactly the dependency graph @oxtoacart and I were just talking about. I would probably just do the same thing -- use StaticHttpClientFactory instead of injecting it. Makes things less testable, but whatever.\n. That works fine too on the DNS front.\nGetting back to the JSON size issue for a moment, I think the larger issue is that the geo server is becoming a super critical piece of infrastructure that really has to work right on startup. It also has to be super fast. Right now its caching is great, but you'll also start to build up memory pretty quickly with responses that big. To me, we should ideally just have a wrapper struct that only includes those two fields and should be calling json.Marshal on that, ideally even caching a gzipped version of that instead of the uncompressed copy, although with just those fields it would be pretty small.\n. Ah interesting -- makes sense. It's because the json itself is a little\nnot-standard in that it uses uppercase characters. I'm surprised Jackson\ndoesn't just treat those the same, but clearly it doesn't! Sorry for\nsteering you in the wrong direction on that one @atavism.\nOn Wed, Jun 4, 2014 at 7:56 AM, atavism notifications@github.com wrote:\n\n@oxtoacart https://github.com/oxtoacart Thanks. Except for deleting the\n.lantern folder to be extra thorough, that's how I had been testing. The\ndot shows up for me as expected too and all tests pass.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1565#issuecomment-45100977.\n. Looking great @oxtoacart thanks. The only thing I really noticed was the hard-coded masquerade host and such in PublicIpAddress -- will comment inline.\n. By the way, I really like the public IP address lookup happening on the geo-data server - nice.\n. Yeah, that's why I deleted it.\n. Hey @oxtoacart can you give this one a look when you have a chance? Would be great to merge to devel and then reverse merge to flashlight2!!\n. I think this generally looks OK, although I'm not entirely clear on the thinking behind splitting S3Config into two files. I pretty much hate subclassing (and love that Go doesn't allow it incidentally!), but I also can't imagine ever having a second subclass, in which case it seems like it should just be one class at least to me.\n. Oh I see -- you're using it on the controller. Got it.\n. Should we just go ahead and pull this in?\n. That confused me too. The docs for add at\nhttp://docs.oracle.com/javase/7/docs/api/java/util/Set.html#add(E) say \"Adds\nthe specified element to this set if it is not already present\", so unless\nI call remove first here, the previous matching ProxyHolder will stay in\nthe set, and the new one will not replace it and will be discarded.\n\nOn Wed, Jul 9, 2014 at 6:16 PM, oxtoacart notifications@github.com wrote:\n\nLGTM. Just one question about the seemingly redundant set.remove() call. I\nwant to understand this to make sure there isn't some other issue here.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1650#issuecomment-48555087.\n\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Lookin' good! I didn't have a chance to test the fallback behavior in particular, but I was running against beta8 on both peers with no issues.\n. If you want to take a peek @oxtoacart that would be awesome!\n. I didn't touch that message at all, but it was also tough for me to test\nbecause it would always get disconnected from the XMPP stuff at the end of\nthe install sequence.\nOn Tue, Jul 15, 2014 at 1:06 PM, oxtoacart notifications@github.com wrote:\n\nFor some reason I can't check out this branch. I was able to merge it into\nmy 1665 branch. When I did so, I still saw the \"Communicating with Google\nTalk\" message in the UI. Is that supposed to be gone now?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1667#issuecomment-49085146.\n\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Hold on -- removing that.\nOn Tue, Jul 15, 2014 at 1:13 PM, Adam Fisk afisk@getlantern.org wrote:\n\nI didn't touch that message at all, but it was also tough for me to test\nbecause it would always get disconnected from the XMPP stuff at the end of\nthe install sequence.\nOn Tue, Jul 15, 2014 at 1:06 PM, oxtoacart notifications@github.com\nwrote:\n\nFor some reason I can't check out this branch. I was able to merge it\ninto my 1665 branch. When I did so, I still saw the \"Communicating with\nGoogle Talk\" message in the UI. Is that supposed to be gone now?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1667#issuecomment-49085146.\n\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. OK cool. I think we should maybe merge it, although I'm now getting weird\nhanging on that screen even with your changes in...investigating\nOn Tue, Jul 15, 2014 at 1:37 PM, oxtoacart notifications@github.com wrote:\n\n@myleshorton https://github.com/myleshorton This looks good to me as is\nif you want to leave the \"Connecting to Google Talk\" thing alone.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1667#issuecomment-49088950.\n\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Looks good to me! Merging.\n. Hey @scouttle sorry the changes to map the port are the ones in FlashlightServerManager, so yeah that's part's all set. I'm going to go ahead and merge to get this build out.\n. I'm just going ahead and merging these for now @scouttle -- technically breaking our coding policies but working on too many things simultaneously right now, and I don't want to leave branches dangling. Can you take a peek at this diff though and raise any issues post mortem? I'll rebranch if necessary. Thanks!!\n. Yeah I've been a little loose with the PRs, but yeah I'll totally just @scouttle you when it seems like it makes sense. These commits have been so all over the place in terms of repos and whatnot that we're just breaking the rules a little bit for now.\n. @oxtoacart ended up doing this in another ticket.\n. Awesome!! Hoping to review late night tonight - nice change.\nOn Saturday, August 23, 2014, oxtoacart notifications@github.com wrote:\n\n\nAlert only shown on startup or after network status change\nSuccess message shown if port mapping succeeds after failure\nAlert is cleared when switching from Give to Get mode\n\n\nYou can merge this Pull Request by running\ngit pull https://github.com/getlantern/lantern 1724\nOr view, comment on, or merge it at:\nhttps://github.com/getlantern/lantern/pull/1742\nCommit Summary\n- Updated flashlight to provide better logging when requests fail\n- #1724 Made port mapping alert only show up on startup or after\n  network status changes\nFile Changes\n- M install/linux_x86_32/pt/flashlight/flashlight\n  https://github.com/getlantern/lantern/pull/1742/files#diff-0 (0)\n- M install/linux_x86_64/pt/flashlight/flashlight\n  https://github.com/getlantern/lantern/pull/1742/files#diff-1 (0)\n- M install/osx/pt/flashlight/flashlight\n  https://github.com/getlantern/lantern/pull/1742/files#diff-2 (0)\n- M install/win/pt/flashlight/flashlight.exe\n  https://github.com/getlantern/lantern/pull/1742/files#diff-3 (0)\n- M src/main/java/org/lantern/proxy/pt/FlashlightServerManager.java\n  https://github.com/getlantern/lantern/pull/1742/files#diff-4 (35)\nPatch Links:\n- https://github.com/getlantern/lantern/pull/1742.patch\n- https://github.com/getlantern/lantern/pull/1742.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1742.\n\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. It looks like the only thing that's different here from what we were chatting about earlier is that this still shows these messages whenever they arise and doesn't take into account whether or not you're in the middle of setup, is that right?\n. Oh gotcha -- handles that on the lantern-ui side I guess huh? Cool. Working well for me!\n. Oh good point - will do!\nOn Sunday, August 24, 2014, oxtoacart notifications@github.com wrote:\n\nNice! Can you go ahead and remove flashlightcheckerurl from BaseS3Config\nwhile you're in there?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1744#issuecomment-53188408.\n\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. OK just added that change to BaseS3Config and merging!\n. Looks good to me, and the flashlight changes are looking good too. Somehow ended up covering a ton of older commits in the merge, but whatever all good.\n. OK sweet. Merging! Thanks.\n. Looks fine to me. This needs new flashlight binaries too right? Do you want to add those to this branch as well, or should I look at the latest Flashlight PR as well, and we can pull that in while we're at it?\n. Cool yeah -- just added the check for windows.\n. Awesome! @oxtoacart you mind reviewing this whenever you're free?\nOn Sunday, September 21, 2014, atavism notifications@github.com wrote:\n\n\nYou can merge this Pull Request by running\ngit pull https://github.com/getlantern/lantern ui-updates\nOr view, comment on, or merge it at:\nhttps://github.com/getlantern/lantern/pull/1829\nCommit Summary\n- adding translations\n- zooming and panning UI pull\n- add translations back to website\n- add UI refresh\n- add UI refresh\nFile Changes\n- M lantern-ui\n  https://github.com/getlantern/lantern/pull/1829/files#diff-0 (2)\nPatch Links:\n- https://github.com/getlantern/lantern/pull/1829.patch\n- https://github.com/getlantern/lantern/pull/1829.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1829.\n\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. We could get this in soon @oxtoacart, as I suspect it may solve Eric's issue. It's not clear why the Google Talk login would fail, so this might fall over into other errors with fetching friends and fetching the S3 config, but it should tell us more.\n. > Refresh tokens expire, right? So even if the user doesn't take any action, at some point the token will stop working.\nAccess tokens expire, but refresh tokens generally do not. They're technically just specified to be \"long lived\", but I've never seen them expire. If they did, it would also be problematic because they do not specify an expiry time (i.e. it would make their use difficult).\n\nIt's confusing that we're depending on error handling in the XMPP processing to detect an authentication issue that affects friends management. It seems like at some point, friends management should do its own checking, and if there's an authentication problem it should handle it.\n\nYeah for sure. The XmppConnector just happens to be the first thing that sees a token being invalid. Taking that a step further, ideally OauthUtils would be the one doing it's own checking. Hopefully we won't even be using Oauth by the time that reaches the top of our priority list though.\n. If you want to take a peek @oxtoacart this is really just a cleanup but also mitigates the damage for #1850, i.e. if we succeed once we get through instead of having to succeed twice in a row.\n. Just wanted to check in on this one @oxtoacart. Can you give this a quick review whenever you're free?\n. Awesome! I just removed all that invited/uninvited stuff since we're not using it for anything anymore.\nGood to merge?\n. Can you take a look at this when you have a chance @oxtoacart?\n. Hey @aranhoide can you give this a look?\n. OK merging! Thanks for the great review @aranhoide.\n. Can you give this a look when you have a chance @oxtoacart?\n. Thanks @oxtoacart just made those tweaks and added a comment. Look OK now?\n. Sweet thanks!\n. I think this should do the trick @oxtoacart, but we'll also get better error logs in case it doesn't.\n. Thanks!\n. I've seen this when flashlight doesn't extract successfully. Any errors in\nthe logs?\nOn Wed, Nov 12, 2014 at 8:40 AM, oxtoacart notifications@github.com wrote:\n\nI think the problem must be my build environment, as even when building\nfrom branch 1606 (which is a fair bit behind devel), I still get the same\nconnectivity issue.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1964#issuecomment-62748807.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Weird. I'm not sure.\nOn Wed, Nov 12, 2014 at 9:43 AM, oxtoacart notifications@github.com wrote:\n\nLog is short, no errors, but it seems to have stopped kinda early:\n0      2014-11-12 11:40:22,991 INFO  [Lantern-Main-Thread] lantern.Launcher.launch (Launcher.java:192) - Starting Lantern...\n234    2014-11-12 11:40:23,225 INFO  [Lantern-Main-Thread] lantern.LanternModule.copyFireFoxExtension (LanternModule.java:265) - Copying FireFox extension\n281    2014-11-12 11:40:23,272 INFO  [Lantern-Main-Thread] lantern.LanternModule.copyFireFoxExtension (LanternModule.java:289) - Copied FireFox extension from firefox\\lantern@getlantern.org to C:\\Documents and Settings\\Administrator\\Application Data\\Mozilla\\Extensions{ec8030f7-c20a-464f-9b0e-13a3a9e97384}\n625    2014-11-12 11:40:23,616 INFO  [Lantern-Main-Thread] privacy.WindowsLocalCipherProvider.newLocalCipher (AbstractLocalCipherProvider.java:144) - Retrieving local cipher key...\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/original.txt\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.0.1.txt\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.2.0.txt\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.3.1.txt\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.4.txt\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.5.txt\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.7.txt\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\adf.ly\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\clixsense.com\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\elance.com\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\extratorrent.cc\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\filmesonlinegratis.net\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\freebitco.in\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\gamepedia.com\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\isohunt.to\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\kwejk.pl\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\madmimi.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\megafilmeshd.net\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\minecraftforum.net\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\nastygal.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\popcash.net\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\privatehomeclips.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\puu.sh\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\reddit.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\songspk.name\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\statcounter.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\subscene.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\theladbible.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\udemy.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\webdesignerdepot.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config. (S3Config.java:34) - Loading cert...cloudflare-certs\\youm7.com\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/original.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.0.1.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.2.0.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.3.1.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.4.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.5.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.7.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] state.Settings.setSystemProxy (Settings.java:192) - Setting system proxy...\n2000   2014-11-12 11:40:24,991 INFO  [Lantern-Main-Thread] state.ModelIo.processCommandLine (ModelIo.java:158) - Running give mode proxy on port: 54319\n2000   2014-11-12 11:40:24,991 INFO  [Lantern-Main-Thread] state.ModelIo.processCommandLine (ModelIo.java:169) - Running give mode proxy with protocol: TCP\n2000   2014-11-12 11:40:24,991 INFO  [Lantern-Main-Thread] state.ModelIo.processCommandLine (ModelIo.java:272) - Running API on port: 24232\n2000   2014-11-12 11:40:24,991 INFO  [Lantern-Main-Thread] state.ModelIo. (ModelIo.java:78) - Loaded module\n2047   2014-11-12 11:40:25,038 WARN  [Lantern-Main-Thread] lantern.LanternTrustStore.configureCipherSuites (LanternTrustStore.java:90) - No policy files on non-Vista machine!!\n2047   2014-11-12 11:40:25,038 WARN  [Lantern-Main-Thread] lantern.LanternTrustStore.configureCipherSuites (LanternTrustStore.java:92) - Reverting to weaker ciphers\n2047   2014-11-12 11:40:25,038 WARN  [Lantern-Main-Thread] lantern.LanternTrustStore.configureCipherSuites (LanternTrustStore.java:93) - Look in c:\\documents and settings\\administrator\\application data\\lantern\\jre\\lib\\security\n2062   2014-11-12 11:40:25,053 INFO  [Lantern-Main-Thread] proxy.GiveModeProxy. (GiveModeProxy.java:113) - Creating give mode proxy on port 54319, running as fallback: false\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/original.txt\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.0.1.txt\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.2.0.txt\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.3.1.txt\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.4.txt\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.5.txt\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.7.txt\n2234   2014-11-12 11:40:25,225 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.http.JettyLauncher@192195d\n2250   2014-11-12 11:40:25,241 INFO  [Lantern-Main-Thread] http.JettyLauncher.start (JettyLauncher.java:123) - Binding to localhost\n2265   2014-11-12 11:40:25,256 INFO  [HTTP-Server-Thread] server.Server.doStart (Server.java:268) - jetty-8.y.z-SNAPSHOT\n2578   2014-11-12 11:40:25,569 INFO  [HTTP-Server-Thread] server.AbstractConnector.doStart (AbstractConnector.java:338) - Started SelectChannelConnector@127.0.0.1:24232\n2609   2014-11-12 11:40:25,600 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.ChromeBrowserService@3dfc56\n2625   2014-11-12 11:40:25,616 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.LanternKeyStoreManager@1c98168\n2625   2014-11-12 11:40:25,616 INFO  [Browser-Launching-Thread] lantern.ChromeBrowserService.openBrowserWhenPortReady (ChromeBrowserService.java:88) - Waiting on port: 24232\n2625   2014-11-12 11:40:25,616 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.UpnpCli@127fcde\n2625   2014-11-12 11:40:25,616 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.Proxifier@1059bd7\n2625   2014-11-12 11:40:25,616 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.SystemTrayImpl@1d9e937\n2625   2014-11-12 11:40:25,616 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.proxy.DefaultProxyTracker@151c408\n2640   2014-11-12 11:40:25,631 INFO  [AWT-EventQueue-0] lantern.SystemTrayImpl.doCreateTray (SystemTrayImpl.java:112) - Creating system tray...\n2640   2014-11-12 11:40:25,631 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.DefaultXmppHandler@1616da4\n2640   2014-11-12 11:40:25,631 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.state.SyncService@1ef347f\n2640   2014-11-12 11:40:25,631 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.monitoring.StatsManager@8f0bea\n2640   2014-11-12 11:40:25,631 INFO  [Lantern-Main-Thread] pt.FlashlightServerManager. (FlashlightServerManager.java:66) - Starting up...\n2640   2014-11-12 11:40:25,631 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.proxy.pt.FlashlightServerManager@11e3206\n2640   2014-11-12 11:40:25,631 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.proxy.GetModeProxy@a8adcb\n2687   2014-11-12 11:40:25,678 INFO  [Lantern-Main-Thread] lantern.Launcher.launch (Launcher.java:323) - Creating give mode proxy...\n2687   2014-11-12 11:40:25,678 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.proxy.GiveModeProxy@d1cf9c\n2687   2014-11-12 11:40:25,678 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.state.DefaultFriendsHandler@8ee032\n2687   2014-11-12 11:40:25,678 INFO  [Chrome-Browser-Launch-Thread] lantern.ChromeBrowserService.launchChrome (ChromeBrowserService.java:68) - Launching chrome...\n2687   2014-11-12 11:40:25,678 INFO  [Chrome-Browser-Launch-Thread] lantern.ChromeRunner.open (ChromeRunner.java:163) - Opening browser to: http://127.0.0.1:24232/FumixbZXwvUIp2RgD0G72g\n13281  2014-11-12 11:40:36,272 INFO  [CometD-Sync-OnConnect-Thread] state.SyncService.run (SyncService.java:101) - Syncing with frontend...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1964#issuecomment-62759507.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Note the strong encryption policy thing should really be taken out, although come to think of it it's very odd that doesn't appear in our loggly logs as the most frequent bug. We don't need or use the strong encryption policy files anymore because we just use 128 bit AES, which is arguably more secure than 256 bit AES.\n. LGTM.\n. LGTM\n. LGTM\n. This just orders the search paths so we don't get errors on XP, for example, for env vars that don't exist there.\n. Good idea. Will do.\n. OK added those checks.\n. Nice thanks @aranhoide! Merging.\n. This is in the queue @ed2k \n. OK seems fine. Merging!\n. LGTM. I'm assuming travis is failing because of the submodule, but we'll see. Merging.\n. Can you peek at this @oxtoacart ?\n. Looks great thanks!\n. Looks great and works in testing!\n. @aranhoide can you take a peek at this? should be an easy one.\n. Yeah I think it gets too hairy when dealing with shutting down -- just a quirky one. Thanks @aranhoide!\n. @aranhoide this is the lantern side of the associated lantern-common pull request.\n. I just changed to point to a new lantern-common that uses a default weight of 0.\n. Looks like it depends on what version of Java you're running, with 6 using merge sort and 7 and 8 using TimSort. Mergesort I believe will only compare the same pair twice if there are an odd number of elements.\nEither way, though, it's not clear to me what problem we're trying to solve. Consistency with equals and total ordering are only relevant for ordered maps and sets as far as I can tell. The proposed change is more complicated and slower while not being clearly any better.\nWhat problem are we trying to solve?\n. > If both a < b and a > b are true during the same sort, which one wins?\nI believe the answer is always whichever one won last, but more importantly it doesn't matter. One of them wins eventually, and it wins in weighted fashion, which is all we're trying to achieve.\n\nWhen this happens, do we get the probability distribution we're looking for based on our weights, \n\nYes.\n\nor does it get messed up because one of these relationships dominates?\n\nNo. Each comparison is weighted the same. Eventually one comparison wins.\n\nAs far as complexity, complexity could be significantly reduced by taking out the existing sort conditions.\n\nSure, but this was designed to be a minimum impact change that would solve the problem at hand while preserving existing behavior.\n\nIn practice, I think the code as written will probably be fine. It'll still randomize proxy selection, though perhaps not exactly as specified by the weights, and it will probably always terminate, I just can't be sure.\n\nYes you can! It'll do all of those things. Any comparison in any sort algorithm is there to determine the final ordering. As long as each comparison does that in the same weighted fashion, it will both ultimately be ordered according to that weight. As far as terminating, there's just no reason for it not to terminate. These algorithms don't store and remember all comparison across all iterations and somehow then panic. If they did remember them, they would never need the second comparison in the first place!\n. OK I just added a test for the percentage of proxies returned.\n. Thanks @aranhoide!\n. Can you take a look at this one @atavism?\n. Sweet thanks!\n. Right - it already throws an exception on non-zero return values, but we\nweren't handling that exception.\nOn Friday, December 12, 2014, oxtoacart notifications@github.com wrote:\n\n@myleshorton https://github.com/myleshorton FYI commons exec already\ndoes this -\nhttp://commons.apache.org/proper/commons-exec/apidocs/org/apache/commons/exec/Executor.html#execute(org.apache.commons.exec.CommandLine)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2066#issuecomment-66777993.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. @atavism can you take a peek at this one too?\n. This should close #2067 \n. Nice thanks!\nOn Thu, Dec 11, 2014 at 2:00 PM, atavism notifications@github.com wrote:\n\nReopened #2068 https://github.com/getlantern/lantern/pull/2068.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2068#event-206458741.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Thanks!\n. Can you take a look at this one too @atavism?\n. There are a couple of little cleanups and comments in there too.\n. @oxtoacart You mind taking a gander at this one?\n. I should also mention I ended up not falling back to the default browser on OSX primarily because that'll often be Safari, and you can't just run Safari from the command line and pass it a URL, you have to run it from AppleScript. That would be relatively fine except it means that getting the process ID of the underlying browser is a little hairy (also possible in AppleScript, but all just a bit of a hassle). That's necessary for closing the window when you close Lantern.\nSo this code uses Chrome first, then Firefox, then falls back to our current WebView. \n. Cool thanks @oxtoacart! I ended up making a few changes on the Windows side after doing more testing with Firefox, and I also addressed the various issues you brought up with the code with the exception of not creating a buildChromeCommand call, although I guess with just passing a boolean to that it wouldn't be so bad.\nThe larger questions definitely need addressing though -- will do that in a separate comment!\n. > We only lost Firefox support on Mac, right?\nYeah. I actually improved Firefox support significantly on Windows.\n. > If I do have Chrome installed, after running Lantern, if I choose \"Show Lantern\" from our system tray menu while the Chrome UI is already open, it closes the existing UI and then reopens it. I would expect it to just keep the existing UI open.\nThis is actually the way it's always worked. Now that I think about it, though, we probably could detect if the existing window is still open. The thing we likely won't be able to do without some fanciness is to give that window focus though. I'll glance around.\n\nI'm not sure that having the Lantern UI running in a separate instance of Chrome is better than just having it open tabs in the existing Chrome. Because the 2nd instance is still called Chrome, it's kind of confusing to me. Furthermore, because it's a full instance of Chrome, I'm tempted to start using it as such, opening new tabs, browsing to other sites, etc. At some point I might discover that it's missing my plugins and bookmarks, which will probably annoy me. Even worse, If I subsequently shut down Lantern, I get a rude surprise in the form of my Chrome browser having been shut down. We will get bug reports about this.\n\nYeah I agree it's a little funny. I'm still not totally sold on the tab experience though either, particularly just getting it lost in the shuffle and also the fact that it just stays open when Lantern shuts down.\n\nIf I understand correctly, the whole reason we're doing this is because our recent Angular upgrade broke the native Lantern app, right? Other than adding zoom/pan, what is it that we're achieving with this upgrade? Is that worth taking a step backwards in user experience on Mac?\n\nTotally legitimate question. The only reason really is panning and zooming, although there have also been some performance improvements. Let's chat about this more.\n\nAlso, if the UI doesn't work properly in the native Lantern app, why do we even support that as a fallback option in the case where Chrome and Firefox are unavailable?\n\nWell, it works better than forcing the user to download Chrome. The experience there is similar to what you experience now, except there are also +/- buttons that don't work (depending on your version of WebView -- they work on Yosemite I believe).\n. > If I do have Chrome installed, after running Lantern, if I choose \"Show Lantern\" from our system tray menu while the Chrome UI is already open, it closes the existing UI and then reopens it. I would expect it to just keep the existing UI open.\nI opened #2087 if we ever want to fiddle with that.\n. If we wanted to keep the existing behavior, I could easily just swap the WebView and Chrome logic in OSXBrowser. I actually think the Windows fixes to Firefox handling are pretty nice, and the code structure to me is a big improvement over the previous.\n. > Wait, so are we saying that the webview related issues are already a problem with the current UI and weren't introduced as part of the Angular upgrade? If that is the case, that changes my perspective on this fix.\nWell, no. There are existing WebView issues such as #1294, but I'm simply saying that showing WebView here is better than forcing the user to download Chrome and that the experience on WebView is similar to the current one (basically pan and zoom don't really work pre-Yosemite, so it's quite similar). \n. > It's more than that. WebView differs significantly between OS X versions 10.9 and 10.10. Any improvements we want to make to the UI will have to be cross-checked now because of the differences. It's not that we're introducing zooming, panning, and the Angular upgrade only to diminish the existing user experience; it's the underlying inconsistencies between WebView versions that will be hard to maintain moving forward.\nYeah the maintenance and developer time issue was a primary motivation behind this particular ticket -- just always use Chrome if it's there and don't worry as much about polishing WebView.\n. > From an implementation perspective, it's nice too because our code simply becomes Desktop.getDesktop().browse()\nWell, except that then we're again stuck trying to support all browsers.\n. > I don't suppose there's any way to keep the UI open at a specific tab position? \nI think with AppleScript there might be, but on Windows (~90% of our users) I don't think so.\n\nThat's true it could get lost in the shuffle, but (I haven't tried out your changes yet) wouldn't clicking \"Show Lantern\" automatically locate that tab? Or I guess there's no way to. \n\nNo - it would open a new tab.\n\nWhen Lantern shuts down, is there a way to force the corresponding UI tab to close as well? I guess all of this requires the use of a browser extension.\n\nYou might be able to do something on the JavaScript side that's a little cleaner than the current, but you won't be able to close the tab I don't think. Again, maybe with some AppleScript but not Windows to my knowledge.\n. > Ah, the problem is that if your default browser is Safari but you also have Chrome, we want to use Chrome. Got it!\nYeah, or even worse if your default browser is IE, we want to run Chrome or Firefox instead if they're there or have you download Chrome if they're not.\n. > @atavism I'm glad that you mentioned a browser extension. To me, that's the thing that holds the potential for really tying all this together nicely by giving us more options to manage windows, provide context-sensitive options (e.g. proxy this site) and stuff like that. I think it could provide a dramatic improvement to the user experience if properly designed.\nYeah I totally agree!\n. > Just curious--what's stopping us from doing this now?\nI think it's primarily a matter of priorities with the other issues on our plate. As with almost all of this stuff, the simple version is easy -- creating an extension that does all the things you say, for example. The issue is always in the polish -- making the UI actually look good enough to be production-ready, making the install experience seamless, working out any bugs in the interaction with the backend, etc (actually the lantern-ui changes are maybe the best example of that we've seen!). So I guess the things that are stopping us are:\n1. It's just not as important as other priorities I don't think, such as the Go port, Lantern Pi, and possibly even Lantern mobile\n2. The simple implementation of this and so many other things is really super easy and straightforward, but the time consuming part is the polish and the corner cases where things get messy.\n3. It's also presumably Chrome-only initially. What about Firefox and other browsers if the user doesn't have Chrome?\nThat said, as long as we're on track on all other fronts, I'm certainly not against someone taking it for a spin.\n. OK, this version just runs in a tab on OSX and removes the chrome flag.\n. How's this one doing @oxtoacart?\n. Works for me! Thanks @atavism.\n. Thanks for testing @oxtoacart!\n\nIf I open the UI when Firefox isn't running, it starts a new Firefox sized to a specific size. However, this window looks like a real, complete Firefox Window, in which I can add tabs, mark favorites and so on. Also, if I again choose to Show the UI, the Firefox window disappears for a couple of seconds, and then reappears with a 2nd tab.\nIf I already have Firefox open from other browsing, Lantern still opens in a new tab, but at least the Firefox window doesn't disappear for a few seconds.\nAll in all, I would say that the Firefox experience is such that it suffers because of our attempts at handling it specially. So on Windows, if you don't have Chrome, I think we should use the same default browser mechanism as we use on OS X.\n\nThe only real special handling we do for Firefox is:\n1. We look for it after Chrome and run it if it's not there.\n2. We give the window a custom size.\n3. We close it if we can get the process ID.\nI just took out #2 and #3, but otherwise all the behaviors you saw would be the same if you had Firefox set as your default browser and we just ran your default browser. The problem with just launching your default browser if you don't have Chrome is that we're out of luck if it's IE. If you happen to have Firefox installed, running it will allow the user to still use Lantern. Otherwise in practice we have to show you the message to download Chrome or Lantern will just look totally broken in IE.\n. Thanks @oxtoacart!\n. This is super low priority, but I happened to stumble across it, and it's an easy fix.\n. Thanks!\n. Minus the nits above, lookin' ready to merge!\n. The one thing larger issue that should probably change is the use of the cipher -- would be nice to limit dependency on native stuff as much as possible.\n. OK looks great! Merging.\n. Wait it's fine this was from 1606 and not 1606_fixed right?\n. Oh forgot about the flashlight build - I tested with it but am now away\nfrom my machine if you don't mind doing it.\nOn Friday, December 19, 2014, oxtoacart notifications@github.com wrote:\n\nHaha, yeah. It looks like the two fixes in 1606_fixed were things you\ncaught in the review, namely the path to flashlight in Lantern.bat and\nwaitForWaddell being public.\nDo you want to build flashlight or should I?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2093#issuecomment-67718298.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Thanks!\nOn Friday, December 19, 2014, oxtoacart notifications@github.com wrote:\n\nBuilt and pushed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2093#issuecomment-67719450.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. I believe this still needs the new flashlight binaries on devel @oxtoacart correct?\n. Figured we should knock this out while in the neighborhood @oxtoacart \n. So here are the issues I've noticed:\n1. FF doesn't get focus if another app already has focus (both OSX and Windows)\n2. Safari doesn't get focus if another app already has focus\n3. The script for showing the browser seems to hang and eventually gives an alert at least on FF if you just leave the alert up (bug on the lantern-ui side really)\nThat's it for now. In terms of traffic to our web site, Firefox and Safari are together about 28%, so those are significant issues. I don't believe there's any solution beyond resorting to native code, however, so not sure what to do.\n. I guess we could theoretically keep track of what browser we've launched and could do something different for Firefox and Safari. Would resorting to the old behavior make more sense for Firefox and Safari? Not sure.\n. Wo, weird, I totally didn't mean to merge this at all, as there are definitely lantern-ui changes. Backing out.\n. > For Chrome, we would use the fancy behavior (i.e. alert to focus window, auto-close when opening a new window and stopping Lantern).\n\nFor other browsers, we would just always open a new tab, which IIRC will always grab focus no matter what you're doing.\n\nYeah that's how we're planning on doing it.\n. The odd thing is this merge doesn't appear in the commit history at https://github.com/getlantern/lantern/commits/devel\n. I just realized what happened -- I think I hadn't re-fetched devel before committing the change to add India to the censored list. One sec.\n. Cool. If you can open another PR @atavism that would be great. \n. Can you also update the lantern-ui submodule to point to 0.0.12 head with this pull?\n. OK. LGTM. I'll preemptively merge, although I'm sure the 0.0.12 review will create some changes that will move the submodule commit. Let's just handle that as necessary.\n. I just made those changes, @atavism and cleaned things up a little bit while in there. Thanks for reviewing!\n. Sweet thanks!\n. Looks great at first glance @fffw! I was going to suggest calling the cocoa APIs for prefs directly but very cool you just went ahead and did it! I'll test on my machine tomorrow.\n. Hey @oxtoacart and I just chatted about this more @fffw, and it would be better to merge it to the release-1.5.14 branch, as that will be in master soon.\n. I ended up manually merging this to release-1.5.14 so will also just merge here to devel.\n. Me too! Working so far, and it's just in beta so hopefully we'll find out if there are any issues.\n. I would consider using FileLock in LanternUtils instead, as it would solve the problem more generally and would isolate the locking to the file itself.\n. No java.nio.channels.FileLock directly -- something like\njava\nFileOutputStream out = new FileOutputStream(file);\ntry {\n    java.nio.channels.FileLock lock = out.getChannel().lock();\n    try {\n        // move file in here.\n    } finally {\n        lock.release();\n    }\n} finally {\n    in.close();\n}\n. It's definitely a bit more verbose, but more robust I think too.\n. > Gotcha. And this is to prevent problems when running two instances of Lantern, right?\nYeah, I'm basically thinking we just lock the flashlight file, although now that I think about it that'll just lock to the process not the thread -- maybe ignore me.\n. OK, let's just go with your solution. I'm always wary of synchronizing on a class, but I can't think of anything better here.\n. LGTM!\n. LGTM!\n. OK LGTM. Merging.\n. Nice! LGTM. Thanks @fffw!\n. LGTM!\n. Nice thanks @aranhoide!\n. You mind taking a peek at this @xiam?\n. Thanks @xiam!\n. @aranhoide you mind glancing at this one too?\n. I'm just going to merge this since it's a pretty trivial change.\n. @aranhoide if you feel like taking a stab at this one too, should be quick!\n. This too!\n. OK, @fffw I'm going to merge this for now since it seems to fix the problem. Thanks!\n. LGTM @fffw thanks!\n. LGTM for this pass. We will ultimately also have to actually commit these binaries to the lantern-binaries repo since that's where they're primarily referenced (from the web site, for example), since GitHub is universally unblocked while S3 is periodically blocked in different places. We might as well just take care of that now too. \nSo you can do with just having a copy of the https://github.com/getlantern/lantern-binaries repo checked out somehow, copy the files there (lantern-installer.exe, lantern-installer.dmg, etc), and just commit and upload them.\nI used to wipe the whole repo clean each time to avoid it getting too big, but it actually could come in handy to have that history as a backup, and we can wipe it out if it gets way to big down the road.\nThat sound good?\n. Looks great @xiam thanks!\n. OK this should be significantly cleaner, @aranhoide. The pub sub system now uses types, and we only start polling for config changes once we've determined the user's location.\n. Thanks Snyder! Agreed on the location change issue. I was thinking it was only really relevant when your country changes, which is rare, but it's actually any time your IP changes I believe, which is much more common.\n\nI'm a bit uneasy about blocking config polls until geolocation succeeds, because there may be a catch-22 situation if geolocation fails for reasons that a new config could fix.\n\nI thought about that too, but I think the saving grace is that the most likely reason for a geolookup to fail is domain fronting itself (especially since the geolookup service has been rock solid), but that would also cause the config lookup to fail. Will look at other comments too. Thanks again.\n. OK just added those changes @aranhoide or some slight variation of them. Let me know what you think!\n. Oh sorry didn't realize you had merged! I think the test was broken at least, so I'll merge that in as well.\n. I meant to comment on this one guys. In general I think we should never have sockets on either the client or server side that have no connection timeouts or read timeouts, as pretty much everything should eventually timeout, and not doing it is just begging for file limit issues.\nCan you say more about OS-level timeouts @fffw? I'm unaware of any OS doing that.\nOn the specific case of the geolookup, I think if anything we should significantly increase the timeout. 20 seconds is way more than enough if everything is operating normally, but in cases of high packet loss due to anything really -- flaky local connection, flaky national connection, connecting from a plane, etc, connections can take longer than that. FireFox I believe uses 300 seconds, for example, but Lantern historically has used timeouts of around 60 seconds for things like this. I think increasing that timeout is a useful and even a necessary change.\n. OK I'm merging this in guys. Looks good.\n. Nice!\n. Interesting @atavism thanks. To me the thinking here seems slightly incorrect though TBH. We create a new util.HTTPClient on each poll, which in turn creates a new transport. While I agree we want to close those connections each time, the result of the current code would appear to me to be too many open file descriptors and not errors on the connection itself or issues with reusing the connection since we're recreating the transport each time.\nI actually think we should change util.HTTPClient significantly. To me it should use something closer to DefaultTransport in https://golang.org/src/net/http/transport.go that actually has reasonable timeouts for the handshake, connecting, reading, etc. I also think it should just set DisableKeepAlives to true and should have a second method util.PersistentHTTPClient that uses keep alives since we do really want the connections to stay open for things like Loggly. \nIt's also useful to note that these util.HTTPClient connections are or should be just going to our server on localhost, which itself has no timeouts. So this could easily be a major cause of the file descriptor issues, but I don't see it as a cause of the issues with the connections described here unless I'm missing something.\nEither way it's clearly a crucial area, so great catch. I just logged the more general issue here:\nhttps://github.com/getlantern/lantern/issues/2491\n. It's also helpful to note that req.Close is just setting the Connection: close header on the request. This wasn't obvious to me without digging into the code, so figured I'd make a note of it.\n. Oh right -- I forgot about the need to do that. I might fix that issue (of having to manually add new packages) while I'm at it. Thanks!\n. This also adds the pubsub package.\n. Want to take a look at this @fffw or @atavism?\n. ok thanks @atavism!\n. You guys mind taking a peek at this @ffw, @aranhoide, or @atavism? Seems like a pretty clear possible source of connection leaks otherwise.\n. @fffw can you look at this one?\n. OK guys I'm going to merge this because otherwise we'll start to experience conflicts with new changes coming down the pipeline.\n. I'll have a look at this thanks @fffw\n. Hey @fffw I just ended up making a few tweaks directly to this. The biggest was making the uninstall silent, as otherwise the use would have to manually press \"OK\" for the uninstall to complete before the install could start, which was confusing.\n. Looking good @fffw thanks!\n. Thanks @fffw! I'll look at this today.\n. This is looking pretty good to me on IE 10, but the Facebook share button seems to take forever to load. It also doesn't seem to load at all for me on FF, and I get this message in both:\n\"Invalid App Id: Must be a number or numeric string representing the application id\"\n. Sweet @fffw!\n. Sounds great @fffw. The Facebook share button is still loading super slow for me, but we can open another ticket for that. Seems odd that would happen.\n. Looking good on all platforms. Merging.\n. LGTM.\n. I'm looking at this now @aranhoide \n. This is actually super confusing @aranhoide. We are using a fronted.DirectHttpClient() for the geolookup, but we're also using it for analytics and the statserver. See:\nhttps://github.com/getlantern/lantern/blob/valencia/src/github.com/getlantern/flashlight/flashlight.go#L225\ngeolookup has a custom cname pointing to heroku on CloudFlare, but the others do not. As such, it's totally unclear how or even if they're actually working.\n. I should say that DirectHttpClient does direct fronting. For the lookup of one's own IP, it doesn't pass the query parameter. It passes the query parameter when looking up geo info for other users'/servers' IPs.\n. I don't think that can possibly be true for analytics. Statsserver is actually just using it to lookup the geo info for peers/servers to show on the map. @atavism any idea on that? Did you mean to try to use direct domain fronting for that?\n. by \"that\" I mean analytics...\n. I'm actually confused on the s3 buckets @aranhoide. Don't we want these to actually go to some server that can dynamically return the config?\n. Or is that just a temporary fix to make the client side work @aranhoide?\n. Gotcha @aranhoide. OK cool. I'm looking at the change to do direct fronting for it now -- should have a PR on the same branch shortly.\n. Either way man. We're probably doing the same thing. I'm probably 10 mins away from being done. Maybe we both just keep going and see if we're doing the same thing =)?\n. Hmmn...ok let me submit what I've got and just see what you think.\n. This is trickier than I thought...let's chat about it on our call.\n. Nice! I like the approach. I'm tied up for another 45 min but will look\nthen and likely just merge it.\nOn May 15, 2015 7:08 AM, \"aranhoide\" notifications@github.com wrote:\n\n@myleshorton https://github.com/myleshorton I made some changes as per this\ncomment\nhttps://github.com/getlantern/lantern/pull/2522#discussion_r30406424. I\nalso fixed some yamlconf tests that were calling StartPolling. I agree\nthese changes are an improvement overall. Feel free to merge after you've\nreviewed my commit\nhttps://github.com/getlantern/lantern/commit/1c138aa517f6474d037e31af85e287568b1138d5\nto fix the server side.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2522#issuecomment-102409295.\n. > Even if we fix the leakage, each of these Dialers starts a goroutine to verify its masquerades, and keeps a pool of (currently configured as 30) connections. Having more than one of these running at a given moment feels wasteful to me. I think we better have a scheme where we only have a single one of these Dialers per Client and reuse it until we reconfigure the client, at which point we Close it and open a new one.\n\nSounds right -- yeah I hadn't noticed that call to NewDialer goes all the way down into the masquerade verification code....\n. @aranhoide dude sorry coding in go still takes more for friggin' ever. This fixes at least part of it.\n. Yeah I totally agree @aranhoide that's an issue on the closing dialers front. It seems like in theory somewhere we should just be able to sort the existing dialers by QoS and grab the highest QoS one. I agree the cleanest way to do it isn't obvious, however, and the current code for me actually chews through all available file descriptors pretty quickly and starts spitting too many open file errors, so I completely agree this isn't ready to merge.\n. It seems like going back to the concept of pulling the config fetching out of config.go and getting the highest QoS dialer from the balancer might be the way to go. The problem is there's a bit of a chicken and egg issue in terms of setting up the poll function in config.go before we've created the fetcher, but I think we can handle that.\n. Oh right I forgot you did that -- cool. I think I still actually get those too many open file errors though -- I'll test again.\n. Makes sense @aranhoide. I am surprised they build up that quickly I must say. Why do the dialers themselves keep those connections open at all actually? Just to keep them warm?\n. Nice. I still need to review the PR, but a couple of things came to mind:\n1. For DDF we don't really need a huge connection pool typically. Why not just create a new dialer with no pool just for this purpose or that takes the pool size as an argument?\n2. Why can't we just close dialers when we get new configs, such as in flashlight.go and config.go? I imagine there's something that causes that not to work, but if not it seems pretty straightforward.\n. > Oh wait! When I change proxyall option from true to false when Lantern is running, it triggers \"send on closed channel\" panic described in #2500 . Good news is --- it's reproducible.\nNice!\n. OK I'm on this one @fffw. I think this will be the primary new feature in beta 6 actually.\n. I believe I'm experiencing #2480 with this change as well -- I basically select to proxy all, and that setting never gets saved to disk, and Lantern doesn't proxy all. I suspect it's something intermittent and possibly a race condition on startup. I reproduced this on OSX.\n. Yeah I agree that's useful for debugging.\nOn May 21, 2015 4:45 PM, \"Carlos Nieto\" notifications@github.com wrote:\n\nHello guys.\nAny chance we could also enable the proxy-all feature from a command line\noption? It would really help us spotting and fixing some important issues.\nThanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2524#issuecomment-104451925.\n. OK this generally looks good to me @fffw, although there is a bug with no longer unsetting the pac file on exit. We could just make this more explicit with the following patch to flashlight.go:\n\n```\ndiff --git src/github.com/getlantern/flashlight/flashlight.go src/github.com/getlantern/flashlight/flashlight.go\nindex 0d8b1a0..8a2dd8e 100644\n--- src/github.com/getlantern/flashlight/flashlight.go\n+++ src/github.com/getlantern/flashlight/flashlight.go\n@@ -8,6 +8,7 @@ import (\n    \"os\"\n    \"runtime\"\n    \"strings\"\n+   \"sync\"\n    \"time\"\n\"github.com/getlantern/fronted\"\n\n@@ -43,7 +44,8 @@ var (\n    configUpdates = make(chan *config.Config)\n    exitCh        = make(chan error, 1)\n\nshowui = true\nshowui    = true\nexitFuncs = make([]func(), 0)\n )\n\nfunc init() {\n@@ -233,11 +235,18 @@ func runClientProxy(cfg *config.Config) {\n    watchDirectAddrs()\ngo func() {\n\n\ndefer pacOff()\naddExitFunc(func() {\npacOff()\n})\n        exit(client.ListenAndServe(pacOn))\n    }()\n }\n\n+// addExitFunc adds a function to be called before the application exits.\n+func addExitFunc(exitFunc func()) {\n+   exitFuncs = append(exitFuncs, exitFunc)\n+}\n+\n func applyClientConfig(client client.Client, cfg config.Config) {\n    autoupdate.Configure(cfg)\n    logging.Configure(cfg, version, buildDate)\n@@ -336,6 +345,10 @@ func useAllCores() {\n // exit tells the application to exit, optionally supplying an error that caused\n // the exit.\n func exit(err error) {\n+   for _, ex := range exitFuncs {\n+       log.Debugf(\"Calling exit func\")\n+       ex()\n+   }\n    exitCh <- err\n }\n```\n. Hey @fffw I realized this should actually use a channel instead of a slice - both simpler and thread safe!\n. LGTM thanks @fffw!\n. Hey @aranhoide I haven't yet had a chance to review all of this, but I just wanted to quickly say I really like the general direction. It's certainly an ambitious change, but I feel like we've already made the decision to dive deep and do this right, so to me ambitious is fine, and overall the strength of your approach is that it's significantly less error prone. Good stuff, and hopefully I'll have time to review it in full tomorrow.\n. I pretty much agree with all of that @aranhoide. The one high level thing that comes to mind is that one refactoring we did was simply to use DDF to fetch new configs and to skip all the geo lookup stuff and geo lookup event listening, and I think we still have to do that one way or another. To me a lot of these refactorings were essentially to do that in a cleaner way without introducing what feel like sketchy dependencies, like config potentially knowing about client, for example.\nAnyway, it does all feel a little over the top, though, so I agree a smaller change is in order!\n. Oh, and I keep trying to mention that statserver needs to do DDF from geo lookups of peer IPs -- that's all it uses it for. So it needs it for the same reason the geo stuff needs it.\n. @aranhoide No that's right @aranhoide -- it's not strictly needed, but if we can do it using DDF we might as well.\n. Awesome @aranhoide! I'll look at this first thing tomorrow but overall agree with the approach and thinking.\n. Yeah you're right @aranhoide. I'll just merge this and create a different issue. Dude, great work on this all around - caught a couple of really key bugs. The Init and Configure combo in config.go is a little ugly, but certainly simpler than the alternatives this close to pushing this into production and could be worse.\n. Just got confirmation from @atavism it looks like a bug on the analytics using DDF.\n. You mind taking a peek @aranhoide?\n. Whoops -- never mind @aranhoide. Please hold!\n. OK this should be all set now. @todd or @aranhoide you want to take a look?\n. OK guys merging this bad boy in...\n. Nice @atavism. The only other change I think we need is to strip out cfg.CloudConfigCA in flashlight.go, i.e.\nDoes the reporting still actually seem to work fine?\n-       httpClient, er := util.HTTPClient(cfg.CloudConfigCA, cfg.Addr)\n-       httpClient, er := util.HTTPClient(\"\", cfg.Addr)\nI'll review in more detail first thing tomorrow.\n. This all looks fine to me @atavism. Were there any other changes you wanted to make? I made the cloudconfigca change on the 2540 branch itself.\n. Hmnn... have you committed anything trying to use that @atavism. I'm not seeing cd[xxx] in the code anywhere... we can probably also knock this out in a later version if you're definitely seeing sessions appear in the GA dashboard. If it's still not showing up, I say we skip it and merge both these branches is and just build a new FT and Lantern unless there are any other blockers.\n. OK @atavism I'm going to merge this! We can tweak the version later if necessary. We'll need a new FT build though either way.\n. LGTM and working well in testing. Thanks @xiam!\n. I'm just merging this one in guys since there's basically no review necessary...\n. Hey @fffw you want to take a look at this one?\n. Trivial change. Merging.\n. LGTM!\n. Whoops -- just fixed a few issues @fffw.\n. @atavism that was fixed in 474e0a6\n. Nice thanks!\n. Might even be worth pushing a new FT @atavism. What do you think?\n. @xiam you want to take a peek at this? Just a one line change.\n. Hey I just fixed a compile issue on valencia -- not totally sure how it got in there actually -- and reverse-merged here.\n. Yeah @xiam should be fixed now..\n. Nice! That fixes it for me, although I have to admit I don't understand the change. Can you explain @fffw?\n. LGTM.\n. LGTM.\n. I think we need to change reverse proxy not to use detour too:\nhttps://github.com/getlantern/lantern/blob/valencia/src/github.com/getlantern/flashlight/client/reverseproxy.go#L47\n. Lgtm\n. Thanks @fffw!\n. What's the status of this one @atavism? You're trying to reverse merge from valencia?\n. Wait sorry @atavism this PR itself is to merge from valencia to analytics-updates -- i.e. is there anything I should actually be reviewing here, and is your intent of this PR to merge to analytics-updates?\n. Oh sorry I misread that @atavism you're right.\n. This at least makes things more robust if something odd happens. I suspect there's something else going on as well, but this should at least improve things.\n. This is a quick one @atavism if you want to have a peek. Hopefully it doesn't conflict with your other PR.\n. Cool thanks @atavism!\n. Nice OK LGTM @atavism!\n. Can you take a peek at this one @xiam?\n. I'll fix the tests =).\n. More fixes coming =).\n. Looks like this finally passes tests @xiam \n. Yeah wow good catch @xiam. Most of those are actually tools vim-go uses. I'll create a new PR.\n. And you're totally right it's because of that bug -- it's a pretty annoying one!\n. @aranhoide can you take a peek at my changes? I wonder if this code was the reason the etag stuff was breaking in the first place?\n. Hey actually @aranhoide I don't think the extra memory fiddling in your patch is necessary since the *struct1 = *struct2 syntax does actually do a shallow copy (doesn't hit data structures). See:\nhttps://play.golang.org/p/6rvtpgU9tX\n. Ah yes sorry -- didn't realize the URL field in Request was actually a pointer:\n77  type Request struct {\n    78      // Method specifies the HTTP method (GET, POST, PUT, etc.).\n    79      // For client requests an empty string means GET.\n    80      Method string\n    81  \n    82      // URL specifies either the URI being requested (for server\n    83      // requests) or the URL to access (for client requests).\n    84      //\n    85      // For server requests the URL is parsed from the URI\n    86      // supplied on the Request-Line as stored in RequestURI.  For\n    87      // most requests, fields other than Path and RawQuery will be\n    88      // empty. (See RFC 2616, Section 5.1.2)\n    89      //\n    90      // For client requests, the URL's Host specifies the server to\n    91      // connect to, while the Request's Host field optionally\n    92      // specifies the Host header value to send in the HTTP\n    93      // request.\n    94      URL *url.URL\n. LGTM @fffw thanks!\n. You mind taking a peek at this one too @xiam?\n. Thanks @xiam!\n. Thanks @xiam!\n. LGTM! Nice catch @fffw \n. LGTM @aranhoide thanks.\n. I marked this as beta 7 by the way, so it's really not urgent.\n. So this is to replace the old fallback server checking script, is that correct @uaalto?\n. Sounds great @uaalto. In the natty beta releases we just put locally-discovered Lantern Pis in the advanced settings in the UI. Do you happen to have a screenshot of that kicking around @atavism? Those installers are here @uaalto:\nhttps://s3.amazonaws.com/lantern/lantern-natty-0.0.3.dmg\nhttps://s3.amazonaws.com/lantern/lantern-natty-0.0.3.exe\nhttps://s3.amazonaws.com/lantern/lantern-natty-0.0.3-32-bit.deb\nhttps://s3.amazonaws.com/lantern/lantern-natty-0.0.3-64-bit.deb\n. Yeah -- it just includes a link to open the Lantern dashboard on the Pi. That also requires a change to not bind the HTTP server to localhost.\n. Honestly @fffw this seems like a bit of overkill to me. As far as I can tell, we need fewer features not more. As you originally pointed out, we currently have only a few user-configurable settings. Why not just create a separate yaml file for those and just use whatever the server tells us to use otherwise (i.e. not muck around with client-side changes to the server config)? Doesn't that give us what we want?\n. Hey @uaalto can you try just removing framed from your branch as well in an effort to get travis tests passing and considering we're not actually using it?\n. Yeah exactly @uaalto, althoughI would just do it on your branch so we can get the tests passing, and hopefully that will help get them passing on some of these other PRs as well.\nHey I just sent you an email too -- have to cancel our call unfortunately.\n. > hopefully that will help get them passing on some of these other PRs as well.\nOnce we merge to Valencia and then reverse merge or just refresh the travis checks on the other branches of course...\n. Hey @uaalto this generally looks great to me. The one thing it looks like this needs is also just the multicast project added into this repo for now while we're still using gost right? Otherwise it won't compile without everyone doing their own gost get (which is a legitimate approach, just not what we've been doing). That'll allow me to review the multicast project here too.\n. Hey sorry for the lengthy review here @uaalto, but below are some other quick checks that jump out. I believe we can get away with not exporting most of these:\nmulticast (lantern-arm *)]$ golint\nmessage.go:16:2: exported const TypeHello should have comment (or a comment on this block) or be unexported\nmulticast.go:29:6: exported type Multicast should have comment or be unexported\nmulticast.go:43:6: exported type PeerInfo should have comment or be unexported\nmulticast.go:49:1: comment on exported function JoinMulticast should be of the form \"JoinMulticast ...\"\nmulticast.go:72:1: comment on exported method Multicast.StartMulticast should be of the form \"StartMulticast ...\"\nmulticast.go:78:1: comment on exported method Multicast.ListenPeers should be of the form \"ListenPeers ...\"\nmulticast.go:84:1: comment on exported method Multicast.LeaveMulticast should be of the form \"LeaveMulticast ...\"\n. Here are some more, using the errcheck tool (go get github.com/kisielk/errcheck)\nmulticast (lantern-arm *)]$ errcheck\ngithub.com/getlantern/lantern/src/github.com/getlantern/multicast/multicast.go:81:19    go mc.listenPeers()\ngithub.com/getlantern/lantern/src/github.com/getlantern/multicast/multicast.go:96:10    mc.write(msg)\ngithub.com/getlantern/lantern/src/github.com/getlantern/multicast/multicast.go:130:11   mc.write(msg)\ngithub.com/getlantern/lantern/src/github.com/getlantern/multicast/multicast.go:156:27   mc.Conn.SetReadDeadline(time.Now().Add(time.Duration(mc.Period) * time.Second))\n. Hey these all looks great @uaalto! I am getting a test failure now though:\ngo test\n--- FAIL: TestMulticastMessages (0.02s)\n    multicast_test.go:121: Multicast Hello message is incorrectly formatted\n. Hey @uaalto sorry for the delay! Here's what I get:\n2015/07/08 17:47:42 {\"Type\":2,\"Payload\":\"\"}\n2015/07/08 17:47:42 {2 }\n. So @uaalto my last commit reverse merging from valencia completely clobbers the UI side of this -- sorry. I think it makes more sense to just do them again on top of the new code in a new PR. Hope that's OK!\n. Oh it clobbered all of your stuff in settings I thought but maybe it's ok @uaalto?\n. OK sweet! I'm going to merge this in. I think the one thing we have to be careful to test is the multicast server socket opening triggering warnings on different OSes, but hopefully we'll be OK.\n. Cool and no worries at all @xiam!\n. thanks @xiam!\n. Awesome thanks @fffw!\n. OK with #2663 all set now is this one all set @atavism and @fffw?\n. Nice -- LGTM @atavism thanks.\n. Nice! Thanks @fffw.\n. Do you think this is actually the right approach @fffw? I'm a little reluctant to do it if it's just to get the test working.\n. OK LGTM. Merging!\n. Guys I'm going to merge this in since it just removes these unused packages and tweaks one other test that used framed (go-igdman_test.go) in a trivial manner. This will hopefully get the tests for some of these other PRs passing.\n. LGTM!\n. Guys this is really a small tweak to get the tests passing, so I'm just going to pull it in!\n. np @fffw. working on the ARM stuff first but will circle back around to it. Thanks!\n. Hey @fffw I like the general direction here, although honestly I would be even a little more aggressive and make things even a little simpler. I.e. do we really even need a yamlconf Manager at all anymore? As a first pass, why not just always use whatever the cloud returns and not even worry about anything on disk -- i.e. just always overwrite what's there? \nWe still need to separate out user-configurable, mutable values I think, such as whether or not to report stats, proxy all, etc, but to me those should be in a completely different \"settings\" system or something like that that doesn't touch the config at all. To me the above points to having a single config.go or cloud.go, something like that, that just fetches the new config and applies it repeatedly.\nAt a later date to me we could add a local file like cloud.yaml.overrides, or something like that, that always overrides cloud settings to allow for easier debugging, but to me we should only add that as necessary.\nWhat do you think?\n. Hey sorry for the delay @fffw. Yeah I guess I'm proposing to separate out the Config object entirely -- i.e. skip any \"merge\" stage and just propagate the config as it's returned from the server to all relevant components. I agree it would be nice to make everything only aware of sub-components, but that strikes me as a much more involved change with a relatively limited payoff.\nTo me we could then treat user-configurable settings differently, with maybe a \"User\" or a \"Settings\" object that initially only has a few fields for user-configurable things. We would then save that to disk and as a first step not even worry about if it's changed on disk but just persist it so that we preserve user settings between runs.\nDoes that make sense?\n. Hey sorry for the delay @fffw! It seems like we could initially just separate out:\n1. Things the user can change (not much -- only used in a couple of places)\n2. Things we can set in the cloud.yaml\nI think we can actually eliminate MinQOS, as it's basically unused. I actually don't even see reportingPeriod in there. Where is that exactly? \nCan you describe the \"driver\" versus \"sub-component\" level a little bit more? Are you thinking of things like keeping ClientConfig? That's totally fine with me. The main thing I care about is the the config from the server always just completely overwrites whatever was there before so we eliminate some of the bugs we've been experiencing along with the associated complexity.\n. Hey @fffw I'm wondering if the change in beta 8 to just include the version number in the config file to avoid conflicts with config files from older versions might just be enough for accomplishing what we want for now. What do you think?\n. LGTM!\n. Nice! Yeah looks good @fffw thanks for tackling that!\n. LGTM! Merging.\n. Awesome! No worries on the manoto branch. I'll just merge that in separately. I'll try to merge this one in today.\n. LGTM, and I'll go ahead and merge for now. The screenshot are huge and will add a lot to the download, but we can merge new ones in if/when we get smaller ones sent over.\n. Yeah we'll want that still in there for give mode though @atavism. We could to two separate builds, but that would complicate things.\nWe ultimately can just put it all on our server though and should be good then.\n. yeah I think that's a good idea @fffw\n. This is maybe a little hackish but what do you think @fffw? Certainly open to better solutions, but this is at least straightforward.\n. LGTM. I need to dig into these new test failures as well.\n. LGTM!\n. Sweet @atavism! Should we add the translated string directly to fa_IR.json as well, or are you going the proper route and adding it all through transifex then syncing?\n. Nice. Merging!\n. Oh good fix!!\nOn Jul 10, 2015 11:51 AM, \"atavism\" notifications@github.com wrote:\n\n@myleshorton https://github.com/myleshorton This will make sure the\nManoto page only opens a single time and not when we click \"Show Lantern\"\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/getlantern/lantern/pull/2714\nCommit Summary\n- only open Manoto page once\nFile Changes\n- M src/github.com/getlantern/flashlight/ui/ui.go\n  https://github.com/getlantern/lantern/pull/2714/files#diff-0 (8)\nPatch Links:\n- https://github.com/getlantern/lantern/pull/2714.patch\n- https://github.com/getlantern/lantern/pull/2714.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2714.\n. Hey @atavism, @xiam, @fffw, @uaalto @aranhoide this just swaps in firetweet for BBC.\n. I'm just going to go ahead and merge this guys since it's pretty trivial! I'm on slack too if anyone wants to chat about it.\n. Hey @fffw would you mind taking a look at this one? Or @atavism if you're free too.\n. Hey one sec @atavism -- I actually just realized there might be another race in there..\n. Hey @atavism false alarm. I was worried about those Serve calls being on go routines, but if you think about it that's not really a problem since we're already listening at that point, accepting incoming connections, and the only thing that reads from those connections is the code inside the Serve calls. So the worst case is there are some connections buffering data that doesn't get read until those Serve goroutines run, but that's fine.\n\nI actually removed that WaitForServer line taking this into account, as we know for sure that the server is already listening at that point so don't need to double check it.\n. Awesome thanks @atavism!\n. Hey @aranhoide what do you think of this one?\n. Or anyone else for that matter =).\n. Thanks guys!\n. Note this is also particularly an issue before downloading the cloud config file, but is important in case there's any issue getting that file.\n. That error was actually the reason this ticket/PR was created @xiam. We chatted about this over email, but the purpose of this change is to not create so many CloudFront distributions so we don't hit that limit.\n. Nice LGTM!\n. LGTM!\n. Awesome thanks @xiam! I'll give this a look now.\n. LGTM @xiam thanks!\n. LGTM. Merging!\n. LGTM.\n. Nice! Working great now thanks!\n. Nice! Working for me. Thanks.\n. I like this change @uaalto. One comment coming about maybe skipping the deferred close calls in the intercept method entirely...one sec.\n. As far as I can tell the current code still relies on the signal <- true executing for the connections to get closed - https://github.com/getlantern/lantern/blob/issue-2429/src/github.com/getlantern/flashlight/client/handler.go#L119\nWithout that, intercept will block until it gets something on that channel, so none of the deferred will get called. Previously intercept itself also handled those closings in deferred calls, but it didn't block at the end so was OK. For reference:\nhttps://github.com/getlantern/lantern/blob/valencia/src/github.com/getlantern/flashlight/client/handler.go\n. So the old code did close both both connections in both cases -- it just did it differently through falling back to the deferred methods in intercept when the pipeData method ended. pipeData would only end when io.Copy(clientConn, connOut) completed, which would return the flow of control to intercept, which would then close both of the connections.\nSo, yes, we want to keep the behavior where either Copy call ending triggers closing of all the connections. Make sense?\n. > Do you want me to keep the old behavior of closing both connections only if the client->proxy ends\nSo just to be super clear, the above statement is incorrect as far as I can tell -- i.e. that was not the old behavior.\n. Gotcha thanks @uaalto and @fffw. I agree just removing that comment probably makes sense.\n. Oh no problem @uaalto -- let's just use the other one.\n. Hey this is a slight change from before @atavism, @xiam, and @fffw in particular. I think we ideally should do both genassets and genconfig outside of make packages because we really should commit those changes for all platforms to pick them up and also so they're actually in the repo.\n. Yeah that's an interesting idea, @xiam. I was planning on just doing it manually each time and committing the changes. The problem with the way it is now is that as far as I can tell it only affects the OS you're building on, i.e. OSX. It won't do anything for the config on other platforms because the changes aren't actually committed.\n. Working for me @fffw thanks!\n. LGTM thanks @uaalto!\n. I actually think something like @atavism's panicwrap suggestion is a good solution. It's super simple and doesn't impact the code almost at all. To me the big problem now is that panics could be happening, and I would guess are even likely to be happening, but we have no way of knowing other than hoping users contact us.\nI would vote for using panicwrap and then attempting to report directly to loggly.\n. What happens if you just try to use Loggly from the parent process -- i.e. set it up from scratch in the parent process so it has it's own copy?\n. I would just go direct with no proxy in this case @uaalto. It seems like you must be able to reference at least some of the same packages in the outer process no? Otherwise we could just do it completely manually, copying some of the code perhaps?\n. Hey looks like the tests are looking for tests in panicrwrap but not finding them @uaalto..\n. Yeah that's interesting @fffw. Just make a public GoRecover function or similar that everything uses. Given the complications surrounding logging, I feel like that might be a better solution. What do you think @uaalto?\n. So the only way the the goSilent approach would work is if it's used every single time we create a go routine. We use some external libraries that we can't control, but not many. Is that why you're saying it wouldn't work @uaalto? Because of external libraries?\n. panicwrap works for me guys!\n. What's the status of this one guys. @fffw can you review it? We're seeing some panics in 2.0.0+stable, so it would be really good to get this in!\n. Aside from that potential success <- false change this all looks good to me @uaalto!\n. LGTM!\n. LGTM @uaalto! Great debugging on the UI errors.\n. Yes I like it thanks @xiam! I'm also going to clean up all those ugly manoto targets in there -- I'll ticket that actually. I'll merge as soon as the tests pass CI.\n. Just wanted to say this is exciting stuff @uaalto!\n. Hey @uaalto or @xiam you mind taking a look at this? It's a one-line change =).\n. Oh right darn I forgot about the uninstall. Thanks @xiam will add! Good catch.\n. OK I just added the uninstall @xiam.\n. Yeah I tend to agree @xiam. I thought about what you're saying @uaalto, but it's also super easy for users to just delete a desktop icon if they don't want it -- it's comparably quick to checking a checkbox really.\n. This bizarrely still has the issue of no cid for me:\nJul 24 04:32:49.756 - 0m0s DEBUG analytics: analytics.go:150 Full analytics request: POST /collect HTTP/1.1\nJul 24 04:32:49.756 - 0m0s Host: ssl.google-analytics.com\nJul 24 04:32:49.756 - 0m0s User-Agent: Go 1.1 package http\nJul 24 04:32:49.756 - 0m0s Content-Length: 60\nJul 24 04:32:49.756 - 0m0s Content-Type: application/x-www-form-urlencoded\nJul 24 04:32:49.756 - 0m0s Accept-Encoding: gzip\nJul 24 04:32:49.756 - 0m0s\nJul 24 04:32:49.756 - 0m0s _v=j12&sr=1440x900&t=pageview&tid=UA-21815217-2&ul=en-us&v=1\nI'm just adding this in the SendRequest method (oh, and by the way I noticed we shouldn't be calling r.Header.Add before checking for the error on creating the request!):\ngo\nreq, _ := httputil.DumpRequestOut(r, true)                                                               \nlog.Debugf(\"Full analytics request: %v\", string(req))\nI think somehow the request from the UI is hitting the backend first and corrupting things.\n. Yup working great @atavism thanks!\n. LGTM merging.\n. Hey @fffw, @xiam, or @uaalto can one of you take a peek at this when you have a chance? Should fix those issues with restarting on Windows especially.\n. Awesome thanks brotha!\nOn Jul 25, 2015 9:45 AM, \"fffw\" notifications@github.com wrote:\n\nMerged #2812 https://github.com/getlantern/lantern/pull/2812.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2812#event-365242776.\n. Can you take a quick look at this @uaalto? It's pretty trivial so I might just merge, but basically the issue is that OSX and Windows require special handling when opening listening ports that are available beyond localhost, particularly opening a windows firewall rule on Windows and just not requiring a user prompt on OSX. Code signing might actually already solve the OSX issue (I need to verify whether the user gets prompted to allow incoming connections to Lantern with an actually installed version), but the Windows issue remains.\n. Hey I'm just going to merge this @uaalto in order to get 2.0.0 into QA, but please give it a look if you can as well as at #2813. Have you ever tried the localdiscovery stuff on windows by the way? I would think the firewall would block. I should have also tested that in my review but of course did not.\n. If you have your firewall activated you should see an exception in there\nfor Lantern and or flashlight. Without that you should get a prompt to\nallow incoming connections or not with the default config, and for some\nreason for me it only appears at shutdown.\nOn Jul 25, 2015 3:29 PM, \"Ulysses Aalto\" notifications@github.com wrote:\nThe code looks good, it is safely merged. The tests are still run, but I\nguess that's ok.\nI'm surprised about OSX requirements, since I'm developing on this system.\nHow can I reproduce it?\nI'm not surprised about Windows, I didn't test under that platform, to be\nhonest. I'll test it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2814#issuecomment-124907144.\n. > Should this happen as soon as you join the multicast group?\n\nOn windows yeah, on OSX for some reason it only seems to happen on shutdown.\n. I'm going to merge this in guys since it's super trivial and just a logging change.\n. Hey can one of you guys take a look at this one too when you have a chance @fffw @atavism, @uaalto, @aranhoide or @xiam? \nJust stumbled across it in the user's logs that Mo sent in, and it's a fairly significant bug.\n. Yeah that would be great @uaalto thanks!!\n. @fffw @atavism, @uaalto, @aranhoide or @xiam can you guys take a peek at these logging PRs when you have a chance as well? Thanks all!\n. Thanks @uaalto!\n. LGTM!\n. I'm just going to merge this in the interest of getting this release out, but please have a look @uaalto and @xiam \n. No worries!\nOn Jul 27, 2015 2:32 PM, \"Ulysses Aalto\" notifications@github.com wrote:\n\nI apologize, I introduced this. I have had just the opposite experience\nwith quotes in Makefile, so I added them to avoid issues.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2828#issuecomment-125348734.\n. LGTM!\n. Hey looks great @uaalto! A few that seem like they should be logged as errors but otherwise all good.\n. I just reverse-merged valencia into this @uaalto, which should hopefully get the tests passing too.\n. Weird -- it didn't merge testpackages.txt. I wonder what's up with that. Investigating.\n. OK merging!\n. Hey @uaalto, @xiam, or @fffw can one of you guys take a look at this one?\n. Thanks @xiam!\nOn Jul 28, 2015 4:44 PM, \"Jos\u00e9 Carlos\" notifications@github.com wrote:\nThanks @myleshorton https://github.com/myleshorton, it works great when\nanother Lantern instance is already running. It opens Lantern's interface\nin a browser window and then exits.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2839#issuecomment-125783414.\n. LGTM!\n. LGTM @uaalto! Technically we should probably merge #2835 first, but we also don't need to start using this right away, so merging.\n. Hey I'm assigning this one over to you @xiam whenever you have a sec!\n. Hey @uaalto you mind taking a look at this one?\n. Thanks @xiam!\n. LGTM @fffw! Good stuff.\n. It fails because we've hit our cloudfront distribution limit. I've\nrequested an increase but its still pending approval. In general I think\nit's important to test CloudFlare, but I believe Alan has a pending PR for\ndisabling the unused CloudFront part.\nOn Aug 5, 2015 8:02 AM, \"Jos\u00e9 Carlos\" notifications@github.com wrote:\n@uaalto https://github.com/uaalto I have seen this test failing often,\ndo we know the reason of the failure? Would it be safe to skip it?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2864#issuecomment-128027846.\n. Oh right sorry @uaalto I didn't realize CloudFront had it's own package. Looks great!\n. Awesome @xiam. I'm getting close on the client side handling -- should have something within an hour.\n. Wait we decided on the call to skip beta 9 and to just go straight to 2.0.0 right? So we'll currently only be releasing a 2.0.0 regular and a 2.0.0+manoto correct @xiam?\n. Also does your first log indicate this isn't working on OSX (the update from beta8 to beta9 in your example)?\n. OK makes sense @xiam. I think the basic problem is we don't want beta manoto to upgrade directly to 2.0.0 non-manoto. I'm not totally sure how to accomplish that, but I think it will still require special logic in the update server to see 2.0.0+manoto as the same version as 2.0.0+stable or whatever we call it. \n\nIn terms of ordering, I think we can maintain the order you mentioned by doing something like:\n2.0.0-beta8 < 2.0.0-beta8+manoto < 2.0.0+manoto < 2.0.0+stable\nOf could keeping in mind that 2.0.0-beta8+manoto in the field is really just 2.0.0-beta8 too.\n. OK. I'm working through a couple of Makefile bugs on my end, so no worries.\n. Hmn..for some reason my local config keeps getting overwritten...will keep playing with this.\n. Yes! I'm finally off calls and will test now.\nOn Wed, Aug 5, 2015 at 10:46 AM, Jos\u00e9 Carlos notifications@github.com\nwrote:\n\nLet's make sure we run a final test on this issue after taking a decision\non #2869 https://github.com/getlantern/lantern/issues/2869\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2870#issuecomment-128088216.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. This is working great for me on OSX @xiam. Testing Windows now.\n. This is definitely working for me on all platforms @xiam! Merging.\n. OK this should finally be all set @xiam. I had to fix an issue on Windows where we were trying to open the empty string or nil, and that would cause Lantern to open a windows explorer window. Should be all set now though.\n. Do you want to merge this one as soon as it passes CI @xiam?\n. Great thanks @fffw! Hey @atavism can you review this baby?\n. This is great guys thanks! Do we still need to code sign the OSX and windows binaries @fffw and @atavism?\n. OK I'll sign it!\n. Just signed it @fffw. Do I also need to rebuild the go files that embed this? What's that process again? Or does the Makefile handle that?\n. Ok, so what's the sequence? When should that be run?\nOn Aug 5, 2015 8:09 AM, \"fffw\" notifications@github.com wrote:\n\nThe last 2 line of pac/pac2go.sh is to sign and embed Mac binary to go\nfile.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2874#issuecomment-128031545.\n. Other than the manoto url in the installer-resources/windows/.packaged-lantern.yaml file, this looks great to me @xiam!\n. I just tested this on all platforms, and it's working great.\n. OK merging!\n. Yes great catch @aranhoide. It looks like if baseUrl is empty the idea behind this code is that if the config changes at runtime, it will pick up those changes and keep chugging along. Is that correct? I'd be again tempted to simplify it and to scrap the fancy runtime config changes altogether, as it complicates the code and seems unlikely to ever be used in practice. \n. But maybe this is actually fine for now, since it fixes the issue. Maybe no reason to \"fix\" things beyond the actual issue at hand?\n. I think this is fine for now - going to go ahead and merge!\n. LGTM!\n. Awesome @aranhoide! Is this deployed too?\n. Hey @xiam can you take a peek at this one?\n. Awesome. @aranhoide can you add those notes to the peerscanner readme?\nOn Aug 7, 2015 5:35 AM, \"aranhoide\" notifications@github.com wrote:\n@fffw https://github.com/fffw thanks! To test it, you'd use the\n-cfldomain command line flag, which specifies where to\nregister/unregister servers. We have the test domain flashlightproxy.com\nfor this purpose, so you'd say ./peerscanner -cfldomain\nflashlightproxy.com. Also, for any flashlight server to register to your\ntest peerscanner you'd have to call it with ./flashlight -registerat\nhttps://yourserverurl.org.\nI have this test peerscanner\nhttps://cloud.digitalocean.com/droplets/4467475 to test stuff.\nps-test.getiantem.org points to it. It's normally turned off. Whenever\nyou want to test anything peerscanner related, feel free to log into it,\ncopy over a new peerscanner binary, and start it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2893#issuecomment-128689339.\n. Nice thanks!\nOn Aug 7, 2015 7:15 AM, \"aranhoide\" notifications@github.com wrote:\nDone.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2893#issuecomment-128711577.\n. OK let's try it! Thanks @uaalto.\n. I'm just going to merge this one guys, as it's super trivial (just a logging change).\n. Actually meant to merge to 2.0.0+stable\n. Actually let's just go to valencia after all...\n. Can you take a peek at this @fffw?\n. Thanks @fffw!\nOn Aug 9, 2015 1:24 AM, \"fffw\" notifications@github.com wrote:\nMerged #2900 https://github.com/getlantern/lantern/pull/2900.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2900#event-377299789.\n. You want to take a look at this one @fffw?\n. OK cool thanks @fffw -- just made those changes!\n. Nice @fffw. You could try just implementing the #2927 change on your branch\nto see if it fixes it too.\n\nOn Tue, Aug 11, 2015 at 11:29 PM, fffw notifications@github.com wrote:\n\nThose increasing CLOSE_WAIT connections which caused \"too many open files\"\nerror might be caused by chained dialer didn't return idletiming.Conn.\nCreate #2927 https://github.com/getlantern/lantern/issues/2927 to\nhandle it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2909#issuecomment-130185524.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Do you think this is ready for production @fffw?\n. Looks good @uaalto -- certainly simpler than the LinePrepender too!\n. I'm just going to merge this in guys, since it's a super trivial change.\n. Hey @uaalto you mind taking a look at this one?\n. Will fix!\n. I was testing using the realtime analytics with a different account number.\n. OK just fixed that test thanks @uaalto. I also added that package to the automated tests.\n. Yeah I would say feel free to just merge it.\n. LGTM!\n. Great catch @xiam!\n. OK merging since the X- is an old convention that's no longer recommended.\n. Can you deploy this when you have a chance @aranhoide?\n. LGTM!\n. Nice @fffw! LGTM.\n. LGTM thanks @atavism!\n. Hey just wanted to ping you on this @atavism. Our analytics is still totally broken, so I'd really like to get this in production ASAP!\n. Awesome thanks @atavism! You'll see I just skip the entire library and interaction with the frontend just to make it as simple as possible in hopes of getting this darn thing working!\n. Awesome thanks @atavism!\n. OK LGTM! Thanks @uaalto \n. LGTM!\n. A couple nits but otherwise LGTM!\n. LGTM! \n. Can you take a look at this one @xiam?\n. Actually no rush on this @xiam -- I think I'm going to push 2.0.1 out without it!\n. OK I'm just going to merge this too =). Trying to get all this into a new 2.0.1 build.\n. I'm just going to merge this one guys since it's super trivial.\n. OK I think this is all set for now @uaalto. I think ideally we'd pass the geo data for all servers from the config side as well, which would eliminate all lookups of IPs other than our own. I opened that ticket at #2973\nThe last change (https://github.com/getlantern/lantern/commit/e49a4dadf42d604eabdf75ecaeb00c5d9efb65d2) to server.go is pretty important so the server side doesn't constantly do unnecessary lookups too -- should speed things up a bit on flashlight actually but also requires redeploying all the flashlight servers @aranhoide.\n. Any luck with this one @uaalto?\n. Good question! Let me play with it.\n. How's this @uaalto?\n. ooh -- this has issues from CI -- investigating!\n. OK this should fix it @uaalto thanks!\n. Agreed, although it's interesting other code is trying to get that data\nbefore its there -- seems like we might want to have everything listen for\nthe event.\nOn Aug 18, 2015 3:41 PM, \"Ulysses Aalto\" notifications@github.com wrote:\n\nI think also better to initialize it there.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2965#issuecomment-132377377.\n. Sounds good!\nOn Aug 18, 2015 3:47 PM, \"Ulysses Aalto\" notifications@github.com wrote:\nOk, I've done a full pass and looks good to me. But I'd like to give it a\nsecond pass tomorrow first thing in the morning with a fresh mind if that's\nok.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2965#issuecomment-132380566.\n. OK @uaalto I just added a test and comments.\n. I'm going to go ahead and merge with that test now in there @uaalto, as it would be great to get this into 2.0.1!!\n. For some reason I thought the issue with the test was with the cert itself. Does it just appear that way but is actually an issue with the timeout @uaalto?\n. Gotcha -- OK let's give it a shot!\n. I'm just gonna merge this guys since it's pretty trivial.\n. > Alternatively, we can also check for a failed OK and reply with badGateway if that's the case.\n\nI think the only time the OK would fail in practice is if the client is no longer there though, which would of course mean the bad gateway would fail too. Does that make sense?\n. Yeah I agree it's theoretically possible, but I don't think it's quite worth going to the trouble. We could create another sync.Once method that responds and maybe preferences one response code over the other with a flag, but in practice I think the OK would only fail if the connection were actually lost and that in any case it would almost always beat the bad gateway call. So think the fact that we close the connection even after the OK should be enough for the browser.\n. Thanks @uaalto!\n. Thanks @uaalto! Yes it's always the same fronted dialer, which in theory could be an issue if the different services were actually changing the state of that dialer but I don't believe that's the case. Those dialers are also quite expensive to create, which is why I didn't get into making multiple copies. \nEither way thanks for the review!\n. I think this is good enough to get into 2.0.1 one now, so I'm just going to merge. Maybe you can make those changes on another branch @xiam?\n. Thanks @uaalto!\n. LGTM!\n. Not seeing anyone kicking around on slack so merging.\n. Awesome@fffw! Just one thing. I think it might make sense to make this even simpler and to specifically report errors from line 99 in balancer.go -- https://github.com/getlantern/lantern/blob/valencia/src/github.com/getlantern/balancer/balancer.go#L99 \nThose are specifically errors even connecting.\n. > @myleshorton It's great to have measured to be plugged in a single point, but two concerns prevents me from doing it.\n\nWe only have (much longer) labels instead of server addresses at balancer.go. InfluxDB is not good at string manipulation at this moment.\nbalancer is an independant library that is not logically related to measured. flashlight/chained and flashlight/fronted is dedicated to our application, which is good to use any library.\n\nOK that makes sense @fffw. I'm mostly worried about noise, and I wonder if initially it might make sense to either only included data for chained or to completely separate out chained from fronted data. Both can get things like EOF or timeouts, but we're already quite aware of a lot of the fronted errors but have less visibility I think into the chained errors. Would it be possible to separate them?\n. Hey I mostly want to just run Lantern more with this one @fffw, but hopefully this will go out along with the detour changes in 2.0.3.\n. Yeah signing the installer definitely changes the binary on OSX and\nwindows, which is what this is designed to fix. Sounds like there's a bug\nthough!\nOn Aug 27, 2015 3:07 PM, \"Jos\u00e9 Carlos\" notifications@github.com wrote:\n\nThe same happens with Windows:\ngsha1sum update_windows_386\n2eb8b2896a50455061c4e90554ec67d051503b6c  update_windows_386\ngsha1sum lantern.exe\nf3d6dbb4d8caa2a17ddd2b4048750f6aed9a7673  /Users/rev/Shared/lantern.exe\nBut it does not happen on Linux.\nDoes signing the installer change the binary?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3043#issuecomment-135568456.\n. Oh interesting - I was unaware of #3 but that could explain what you're\nseeing.\nOn Aug 27, 2015 3:25 PM, \"Jos\u00e9 Carlos\" notifications@github.com wrote:\nWindows has 3 different hashes, in this case:\nlantern_windows_386.exe is unsigned.\nupdate_windows_386 is signed.\nlantern.exe was affected by the installer signature.\nIs that right?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3043#issuecomment-135573134.\n. So just to be clear on all the binary differences @xiam, the new changes don't change lantern_windows_386.exe, update_windows_386, or lantern_darwin_amd64 but just the bzip2 files (i.e. the bzip2 files should contain the signed versions).\n. So you should be comparing the binaries in the compressed files only.\n. Thanks @xiam. I just realize I get this in docker-package-windows\n\n/bin/bash: line 5: bzip2: command not found\nI think I have to add that to the Dockerfile huh?\n. Cool just added it.\n. I actually get the same value for each @xiam:\nOn OSX:\nshasum update_windows_386\n0a6f68d238e38ae3baf03985a14397322ff588ac  update_windows_386\nOn Win:\nAdam Fisk@WIN-2M0SC8OPGJ6 ~\n$ shasum /cygdrive/c/Users/Adam\\ Fisk/AppData/Roaming/Lantern/lantern.exe\n0a6f68d238e38ae3baf03985a14397322ff588ac */cygdrive/c/Users/Adam Fisk/AppData/Roaming/Lantern/lantern.exe\n. Do you have this directory?\ninstaller-resources/darwin/Lantern.app_template/Contents/Resources/en.lproj/\n. It has to be in Lantern.app_template\n. The pfx doesn't affect OSX at all. I think it's the en.lproj not being there in the template.\n. I think that last change should do it @xiam \n. Awesome! And windows is working for you too?\nOn Aug 30, 2015 6:09 AM, \"Jos\u00e9 Carlos\" notifications@github.com wrote:\n\nGreat! the latest commit worked and the checksum issue is not there\nanymore:\nopen lantern-installer.dmg\ngsha1sum /Applications/Lantern.app/Contents/MacOS/lantern\nf21e4e682b43ebff74e20df6c6c7ac1a3e76f22d  /Applications/Lantern.app/Contents/MacOS/lantern\nbzip2 -d update_darwin_amd64.bz2\ngsha1sum update_darwin_amd64\nf21e4e682b43ebff74e20df6c6c7ac1a3e76f22d  update_darwin_amd64\ngsha1sum lantern.exe\nac04b0856a6330edb0d7e9e20671ec8080a2ef7b  lantern.exe\nbzip2 -d update_windows_386.bz2\ngsha1sum update_windows_386\nac04b0856a6330edb0d7e9e20671ec8080a2ef7b  update_windows_386\nLooks good to me, I only added a yum clean all at the end of the bzip2\ninstallation. See #3067 https://github.com/getlantern/lantern/pull/3067\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3043#issuecomment-136135184.\n. Merging this one too...\n. I'm just going to merge this one in guys since it's really trivial.\n. Awesome thanks @atavism!\n. Thanks @fffw!\n. Thanks @peterkshultz! LGTM.\n. You want to take a look at this @atavism?\n. Thanks @atavism!\n. LGTM thanks @xiam!\n. Thanks @fffw I somehow missed you had submitted this PR until today, but I think our PRs are almost entirely complementary. I would vote for merging yours in followed by mine, likely with a conflict or two.\n. I think we can actually close this one after all right @fffw? Feel free to re-open if you think this is still useful.\n. Here are the enproxy changes @aranhoide \n. This seems like it's now working for me @fffw. How about you?\n. here's a pared-down version @aranhoide \n. Hey I'm just going to merge this one in @aranhoide  and @fffw to get this version out in the field!!\n. Merging this to valencia guys!\n. OK, here's that change I mentioned @fffw. What do you think?\n. OK added a few more fixes @fffw, including switching to a loop!\n. OK awesome thanks for the great review @fffw!!\n. I think we can combine this with your changes @atavism (at least I don't think our different implementations will hurt each other even if they're slightly redundant). You mind taking a look at this one?\n. OK now just the cloudfront distribution test failure remains -- merging.\n. Yeah I think we should probably get this in, but keep in mind XP is only around 5% of our users (at least of the visitors to our web site) so not as urgent as it might otherwise be. I think the general connectivity issue is much more pressing right now.\n. Hey I think we might as well put this in 2.0.2. Would you mind doing a PR to the release-2.0.1 branch @uaalto?\n. Yeah either way @uaalto. The release branch will be merged back into valencia will a bunch of things again.\n. Cool. Are you able to reproduce the timeout issue on the VPS? It was working fine for me on the Windows one, but I haven't checked the others -- that's a very good idea though I should.\n. Interesting @fffw. Thanks. That's definitely what users are seeing too.\n. You're using one of the ubuntu boxes right @fffw?\n. Yeah weird. I just sent it to a user and heard the same back. At least we're able to reproduce it now though. That's huge.\n. OK @aranhoide would you mind taking a quick look at this? I'm just stripping out the embedded fallbacks entirely for this one.\n. I'm actually not sure this is working at all -- still verifying.\n. Weird. So these IPs work in genconfig but not when actually running Lantern. Very odd. Still investigating.\n. Yeah that's what I was thinking @aranhoide. They appear to be blocked in Iran and overloaded when they're not blocked. So the thought is to use DDF to get your config and use DF prior to that.\n. Sorry I was thinking of releasing without default chained servers at all.\n. I think I might have to change genconfig to do exactly what we're actually doing in the client. Odd there would be a difference, but it almost looks like there might be some DPI going on that's catching something unique. \n. Yeah exactly. Maybe it's using SNI?\nOn Sep 3, 2015 5:52 PM, \"aranhoide\" notifications@github.com wrote:\nYes, well, apparently genconfig doesn't try and domain front at all, just\nconnect and grab certs?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3093#issuecomment-137613026.\n. Hey @aranhoide, @uaalto, @fffw can one of you take a look at this PR so we can merge and get 2.0.3 out the door? Thanks!\n. I just made the lower case change @uaalto \n. Oh, I would actually just ignore that file. We're not using it for anything right now, but it should be useful in the future for sketching out a more decoupled way of doing direct domain fronting.\n\nThe purpose of it was to actually verify proxying through the IPs we're able to connect to, but it turns out that's currently not necessary.\n. We could actually delete it, but we want a version around somewhere for future refactoring. I could just keep it locally...\n. Yup I'll just delete it @uaalto!\n. I didn't run errcheck or the tests @uaalto but have been testing live a bunch. I'll run those\n. Thanks for the review @uaalto!\n. Is this one already effectively merged guys? Can we close it @uaalto and @aranhoide?\n. I'm just gonna merge this for now -- we can keep updating!\n. Hey @xiam! It's actually just the file generated from that fetchcfg.py script. I'll add a dummy one in.\n. Merging!\n. Nice -- I like it @fffw!\n. That one is the one that's signed with a sha-1\n. LGTM!\n. LGTM!\n. Hey @aranhoide and @fffw I just switched the config on this branch to cloudfront directly and am just sketching out a WIP in config_test.go that I'll move to wherever it should go once it's working.\n. Hey @aranhoide I think we do need https://d2wi0vwulmtn99.cloudfront.net/cloud.yaml.gz to be available over http as well after all since otherwise it won't get X-Forwarded-For through normal chained proxies!\n. I actually changed it to HTTP and HTTPS in the distribution, but it looks like it needs revalidation, and that's taking forever.\nEither that or the config server origin is actually returning 403 for some reason...let me check that.\n. OK @aranhoide it's actually working fine with HTTP now, but I think there was an existing issue with the bootstrap server setup and auth tokens again -- I'll fix that next. Now the direct domain fronting config fetching should be working on this branch but not the chained config fetching!\n. @fffw, @xiam, or @aranhoide if you could look at the existing changes that would be awesome though. Should be much simpler to use DDF now. The one thing I want to do is randomize the order of the masquerade checks and to eventually also store which ones aren't working, but I don't think we need to do the latter now.\n. OK the auth token issue with loading the bootstrap config should be solved, but now there's a weird issue where general proxying starts to fail after visiting a page or two.\nOtherwise there's the 127.0.0.1 issue, which hopefully we can solve on the servers side.\n. Oh I just realized I think the issues I'm seeing here are the result of #3136 not yet being merged, so a result of this branch not yet having those changes...so I wouldn't worry too much about that at this point.\n. Hey @fffw I know you're out of commission for the weekend, but if you're around @xiam, @aranhoide, @atavism, or @uaalto could you take a quick look at this? It was a bizarrely hard change to make, and the solution isn't ideal because it bypasses some of balancer, but it does the trick.\n. Great catch on the IP issue @fffw. We could also just ignore any non-public address, as I don't think anyone would ever run Lantern on a public address.\n. Oh, and I've got a WIP of the DDF stuff with CloudFront working -- should be ready soon.\n. OK @xiam those last changes get around the issue @fffw mentioned about reverseproxy adding X-Forwarded-For\n. Awesome thanks!\nOn Sep 14, 2015 4:22 PM, \"Jos\u00e9 Carlos\" notifications@github.com wrote:\n\nLooks good to me after testing it for a while.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3136#issuecomment-140231637.\n. Yeah overall I really like it @fffw! The main thing I think it's ultimately missing is the change in #3128 to also use fronted servers as necessary. See https://github.com/getlantern/lantern/pull/3128/files#diff-51c0f46cacd391b79c1c92419364f220R204\n\nAt the same time we don't want to use fronted servers ever for general traffic the way we used to, so we don't want to integrate them into balancer. Any clean way to do that I wonder?\n. I think I really like this change basically as long as two things also happen:\n1. lantern.yaml includes CFR fronted dialers (for the initial config download)\n2. we automatically retry a few times if we can't get the custom config at first\n3. we don't include CFR fronted dialers in the downloaded config so that we don't use them for anything but fetching the initial config.\nMaking that work would also require re-enabling fronted dialers in flashlight/balancer.go as well as disabling the masquerade checks in their current form or fixing them to do direct domain fronting in their checks. Oh that reminds me, though, that would also somehow require doing direct domain fronting when we pass the config download through our normal code path -- right now that wouldn't happen. So we need to think more about that.\nWhat do you think @aranhoide? I'm wondering if we should maybe skip this for now given those complications actually.\n. Reopening this for #3177 \n. Awesome LGTM thanks @fffw!\n. Ha! Darn I had fixed that in an earlier pass too -- good catch @fffw!\n. Some of this is pulling in your earlier simplifications @fffw for using lantern.yaml instead of chained.yaml\n. Just added one fix in handler.go and a couple of test \"fixes\" -- basically deleting old tests.\n. OK I just added a few more cleanups @fffw. What do you think?\n. Cool - I'll look at that right away. I also want to add in fronting support\nfor auto-updates so will also add that in - give me 30 mins!\nOn Sep 24, 2015 7:55 AM, \"fffw\" notifications@github.com wrote:\n\nAll good except what in #3196\nhttps://github.com/getlantern/lantern/pull/3196 !\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3191#issuecomment-142953538.\n. > Seems new config fetched is saved to disk but didn't have a chance to reconfigure all components, so it will not take effect until Lantern restarts.\n\nYour deadlock fix also fixed this issue right @fffw?\n. OK guys I'm merging this in! Thanks for everyone's help on it.\n. LGTM. I have a couple more improvements I've noticed as well -- I'll add them to the branch directly.\n. LGTM!\n. LGTM!\n. LGTM!\n. Sweet thanks @atavism!\n. > I saw 100+ CLOSE_WAIT connections to masquerades after running for 10 hours, which caused too many open files error finally.\nI think I have an idea on why those are happening -- basically the chainedAndFronted Do won't properly close the second response if both succeed, and I'm sure other leaky cases as well. I'll work on that more in the morning.\n. OK @fffw I made a few changes. I tweaked the masquerade checking in direct.go quite a bit. Basically, I now don't automatically requeue masquerades as we use them because I'm seeing a lot of masquerades where the IP we have no longer matches the domain, so re-verifying them is probably a good idea. I also now re-add masquerades to the candidate channel if they connected or had a reasonable error, and because we don't auto-requeu them we'll make it well past the initial 40.\nI'm not totally against doing this directly in getMasquerade however, but I think this is more or less what we want as well.\n. We should add the actual IPs here before merging.\n. Unfortunately gost get github.com/mailgun/oxy/forward master seems to pull those other dependencies in as well @fffw.\n. Just in a test @uaalto \n. Makes sense. Yeah I think for now we want the chained server to be separate regardless.\n. Awesome thanks for all those @fffw. What do you think now? I started trying to fix lantern-mobile/client_test.go but wasn't quite able to. Might just leave it for now!\n. Awesome thanks @fffw!\n. Hey @fffw I know you're supposed to be on vacation, but if you have a second would you mind taking a look at this one?\n. OK thanks @fffw I'm on it!\n. OK got that in @fffw!\n. The addition of the resources.go file is really the big change @uaalto -- basically that includes lantern.yaml so that the lantern binary will have a lantern.yaml file when it auto-updates.\n. One good test @uaalto is actually just to run it with no existing yaml in Application Support/Lantern and with no yaml in ../Resource/en.lproj (if you had created that manually by chance).\n. You should basically just see Lantern create a valid yaml file in Application Support/Lantern in that case, and it should run fine.\n. That geolookup_test.go failure is a little weird, but I don't think it's related.\n. > Works fine.\nAwesome!\n\nHaven't seen that ../Resource/en.lproj before. Where do you mean exactly?\n\nBasically on OSX that's where Lantern looks for any \"embedded\" files that are packaged with the installer. Since in production we run from /Applications/Lantern.app/Contents/MacOS/lantern, the ../Resources/en.lproj folder is where we need to look for those files (that's one of the only directories that won't break code signatures). When running from the command line, Lantern will look for that directory also. Actually prior to this change I think you even needed that directory to exist (or to have a previous yaml file in Application Support/Lantern), but so testing without that directory at all should successfully verify that the embedded resource approach is working.\n. Actually that extracted yaml config doesn't look quite right -- I'm investigating now!\n. Oh actually I think it's just the one that's fetched remotely...probably fine..\n. well actually it's a little odd that it includes that frontedservers field at all because I updated the cloud config just this morning (or late last night can't remember now!). I'm thinking maybe that part's not actually just taken from cloud.yaml. I.e. if you look at the cloud.yaml itself it doesn't have any frontedservers:\nhttps://github.com/getlantern/lantern/blob/release-2.0.1/src/github.com/getlantern/flashlight/genconfig/cloud.yaml\n. Oh does the geolookup test hang for you too @uaalto? It's working for me, so I was trying to figure that out.\n. Right yeah I know about the travis hang. Does it work for you locally?\n. > Yes, it does. I passes and returns immediately. Both getlantern/geolookup and getlantern/flashlight/geolookup.\nOK cool. Yeah I think it's fine, although it's it looks like it's just not getting any masquerade candidates in Travis's case, which is very strange. I might just quickly test on Linux to make sure there's not some deadlock we're missing. Actually I'll run with race detection too!\n. Yup there's a race condition in there -- fiddling with it now!\n. OK just fixed it @uaalto -- man I've got to remember to run more often with -race! What an awesome tool.\n. > Puzzles me that the bug wasn't triggered on OSX though..\nJust a thread scheduling thing I suspect -- definitely won't happen every time.\n. I'm sure something else will fail in Travis (lantern-mobile test in particular is still broken on this branch).\n. Hey @uaalto just fixed a couple of race conditions from running with -race! I think this should be good to go now -- could fix the lantern-mobile test, but it's a little annoying and was breaking with 2.0.7 anyway\n. Awesome! Yeah merge away @uaalto!\n. Going to create a new one for release-2.0.1\n. Embedded servers are causing the lantern-mobile tests to periodically fail.\n. These are the same changes @fffw already reviewed - merging.\n. merging -- test errors are with CloudFront distributions again.\n. You want to take a look @fffw or @aranhoide?\n. Looks like that remaining error is just with creating new CF distributions, which I think is OK.\n. Awesome thanks @fffw!\n. LGTM @fffw!\n. Merging -- test failures are again with CloudFront distributions. @aranhoide do we even need that peerscanner test at all at this point?\n. Hey @fffw you mind taking a look at this one?\n. Awesome thanks @fffw!!\n. Looks good @fffw. I just tweaked the two test cases weren't really much different.\n. Thanks @fffw. There is still this lantern-mobile test that's failing - working on that now.\n. Ha very interesting on the ad blocker front @fffw -- I'll have a look at this thanks.\n. Oh looks like one of the detour tests is failing @fffw \n. Wait so is this one now obsolete @fffw?\n. Hey sorry for the delay @uaalto - I'll give this a look.\n. You mind looking at this @fffw? Small change really.\n. Hey @fffw I added the fix (hopefully!) for closing all connections (#3312) here as well since it touches the same file.\n. Nice!\n. You're seeing this issue with libappindicator3-dev on CI @fffw right?\n. Merging since the libgtk issue is fixed on valencia.\n. LGTM. A lantern-mobile test is failing, but it's clearly unrelated.\n. Hey this generally looks good to me, but it seems like we might as well do this along with @oxtoacart's https://github.com/getlantern/lantern/pull/3378 at the same time. That also upgrades the go version I believe.\n. There are still test issues with the direct domain fronting stuff, but they're clearly unrelated to this PR.\n. Thanks for the @kuun -- we'll discuss this in more detail.\n. Closing this in favor of #3628 @kuun. Thanks!!\n. I think the frontend analytics are fine and not including these on the backend is better to avoid double counting. Closing!\n. Great work @fffw!\nOn Jan 24, 2016 12:11 AM, \"fffw\" notifications@github.com wrote:\n\nHey @xiam https://github.com/xiam this change should work.\n\notool -l ./lantern_darwin_amd64  | grep -A 3 LC_VERSION_MIN_MACOSX\n      cmd LC_VERSION_MIN_MACOSX\n  cmdsize 16\n  version 10.7\n      sdk 10.11\n\nman clang gives me the clue. golang doesn't recognize -mmacosx-version-min\nas CGO hint. Fortunately environment variable works.\nMACOSX_DEPLOYMENT_TARGET\n           If -mmacosx-version-min is unspecified, the default deployment target is read from this environment variable.  This option only affects darwin\n           targets.\n\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/getlantern/lantern/pull/3429\nCommit Summary\n- support minimum OSX 10.7\nFile Changes\n- M Makefile\n  https://github.com/getlantern/lantern/pull/3429/files#diff-0 (2)\nPatch Links:\n- https://github.com/getlantern/lantern/pull/3429.patch\n- https://github.com/getlantern/lantern/pull/3429.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3429.\n. OK seems there are periodic issues with some of the mobile tests still, but merging.\n. LGTM. It strikes me it already isn't used in the Makefile, but should be commented out here too.\n. Looks like we have a couple more places to swap the manoto url:\n\ngrep -R manoto src/github.com/getlantern/ | grep facebook\nsrc/github.com/getlantern//flashlight/ui/ui.go: } else if strings.HasPrefix(u, \"https://www.facebook.com/manototv\") {\nsrc/github.com/getlantern//flashlight/ui/ui.go:     url = \"https://www.facebook.com/manototv/app_128953167177144\"\nsrc/github.com/getlantern//Resources/en.lproj/.packaged-lantern.yaml:startupurl: https://www.facebook.com/manototv/app_128953167177144\n. The one issue I'm seeing is that it looks like some timing issue on startup has changed and that it's possible for the UI to open before the backend is ready -- just got an open UI with a completely blank screen\n. Oh, actually scratch that -- Lantern was already previously running. That used to work, however, so it's possible something broke with the logic for opening up an existing lantern @oxtoacart \n. Could be an 8787 thing but not sure @oxtoacart. Basically start with Lantern already running and try running it again...\"works\" on valencia but not here\n. Yeah to be clear @oxtoacart I think it's actually an issue with the second lantern instance not properly telling the first lantern instance to pop up the UI. We mostly do that so that if a user double clicks on a desktop shortcut on Windows, for example, it will open up the UI.\n. Hmnn...yeah not happening for me now either....I wonder if I started the first on valencia and the other on valencia-embeddable.. let me see\n. Ha! Yeah that's it I think -- if the first was started on valencia and the second on valencia-embeddable, this can happen @oxtoacart, so probably not something to worry about.\n. Cool thanks @oxtoacart! I unfortunately didn't quite finish and still just\nwant to go through things a bit more - should be able to do it this weekend!\nOn Fri, Jan 29, 2016, 6:07 PM oxtoacart notifications@github.com wrote:\n\n@myleshorton https://github.com/myleshorton Thanks for the thorough\nreview! I believe I've addressed all your comments.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3448#issuecomment-177012774.\n. Nice catch on the closing sequence @oxtoacart! This is all looking good to me.\n. OK LGTM @oxtoacart! Merging!\n. There's a CI error with fetching lib-appindicator for whatever reason, but merging anyway...\n. these branches need a little more sorting!\n. Merging latest release changes to valencia\n. Awesome. I would create a new branch for this issue off of the 2.0.11 tag and merge to the release-2.0.1 branch (the current stable release branch).\n. Same here @xiam just FYI...\n. Cool - yeah same thing -- we should be merging to the release-2.0.1 branch. \n. I'm going to close these since we don't want to go straight into valencia (and since we need them for the release).\n. LGTM @xiam thanks!\n. Merging for next development branch release...\n. Nice! So does this mean we can push out a new mobile build @oxtoacart and @atavism?\n. Looking good to me! Can you also update the Dockerfile to use 1.6 or is that not strictly necessary?\n. This otherwise looks great to me @oxtoacart! Great stuff.\n. Cool not sure what's up with Travis, but tests are passing for me locally with the exception of that detour test that's fails inconsistently but is unrelated. Merging!\n. Thank you @oxtoacart! Great change.\n. Is the multiple token checking code already deployed on the server?\nOn Feb 4, 2016 4:05 AM, \"oxtoacart\" notifications@github.com wrote:\n@fffw https://github.com/fffw Can you send me your lantern config?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3480#issuecomment-179791367.\n. Do you want the LanternMobileTestbed as a more permanent part of the code base @oxtoacart? If so maybe just a quick README describing what it is and how to build it would be worthwhile?\n. Nice @atavism! This has one last QA cycle to go before being pushed out, is that right @sunshine19090?\n. Awesome thanks @xubin990510! We'll look at travis.\n. LGTM! Thanks @xiam.\n. LGTM!\n. Yes definitely @xiam!\n. Working great! The text should probably say to just click the attachment, but the functionality looks great @xiam!\n. LGTM @oxtoacart!\n. This is already reviewed for release-2.0.1\n. Why not just use {{ model.settings.version }} from the backend @xiam?\n. Well it's tempting to not worry too much about it, especially with valencia using React. Let's just stick with what you've got!\n\nThanks @xiam.\n. This was taken care of in @xiam's other PR.\n. Working great for me in Chrome and Safari @xiam! Good stuff.\n. You want to take a look at this @oxtoacart? Found another issue while working on this but will open it in a separate ticket...\n. Nice!\nOn Tue, Feb 9, 2016 at 7:44 PM oxtoacart notifications@github.com wrote:\n\nClosed #3534 https://github.com/getlantern/lantern/pull/3534.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3534#event-545269054.\n. LGTM.\n. =) Meant to merge it so sounds good\n\nOn Thu, Feb 11, 2016 at 5:21 AM oxtoacart notifications@github.com wrote:\n\nMerged #3539 https://github.com/getlantern/lantern/pull/3539.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3539#event-547134634.\n. Ok this looks great @oxtoacart!\n. Lgtm!\n. Hmmn I think if anything something will fail because it tries to dial but can't @oxtoacart - anything that would be calling this before Configure is likely to be some super critical startup service that we need to work, such as looking up your config\n. Well, I just think it's existing behavior that we almost certainly don't want @oxtoacart. We could theoretically merge this, log a bug, and then go back and change this. I'm certainly not opposed to that, but it's also pretty hard to catch, and we could just go with the assumption that whenever something calls Dial here it actually wants to be able to make a connection, so needs real masquerades. If you want to do it as separate tickets though that's fine, but basically the race condition revealed existing behavior that was unintended and only occurs when the race happens, which seems to be fairly rare. I also don't think this happens in our released versions, as I run with -race all the time and have never seen it.\n. It's also only existing behavior because of the race condition!\nOn Feb 10, 2016 10:05 AM, \"oxtoacart\" notifications@github.com wrote:\n@myleshorton https://github.com/myleshorton That's existing behavior.\nShould I log a new bug for it?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3543#issuecomment-182506465.\n. Looks awesome. I just added that one comment on the setter, but it doesn't matter much. Otherwise ready to merge!\n. Lgtm!!\n. LGTM! Thanks @xiam!\n. LGTM!\n. OK this should be all set @oxtoacart \n. I feel like we might be leaking connections somewhere here too @oxtoacart...\n. I'm still getting too many open files sometimes locally on this branch @oxtoacart. It also looks like vetting all masquerades upfront often leads to issues with the startup sequence -- I so far haven't been able to get Lantern to successfully proxy.\n. This is working great on the field @oxtoacart! Merging and building!\n. OK merging thanks @xiam!\n. What's the difference between this and https://github.com/getlantern/lantern/pull/3561 @oxtoacart?\n. =) Nice! Actually how did you generate your PR? For whatever reason when I just went to merge release-2.0.1 to valencia it was much more massive. What did you do differently on your merge branch?\n. We'll also need to do whatever your process is one last time, as there were at least two additional merges to release-2.0.1. I'll merge this one now though! Thanks @oxtoacart \n. Gotcha -- ok cool makes sense. Thanks @oxtoacart!\n. Merging this in...\n. Merging!\n. Nice thanks @oxtoacart! LGTM.\n. Awesome @xiam LGTM!\n. I'm still knocking this around a little bit @oxtoacart \n. All good on this PR from my end @atavism and @oxtoacart.\n. Awesome Ox and thanks for testing Merlin! I'll get this into a new build\nASAP.\nOn Feb 16, 2016 11:24 PM, \"fffw\" notifications@github.com wrote:\nPlus: The unnecessary dependency of Travis is removed in valencia.\nManually running Lantern for 1+ hours on Mac, memory keeps at 30MB.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3588#issuecomment-185071246.\n. Hey @oxtoacart you want to take a look at this one? Pretty quick.\n. Thanks @oxtoacart!\n. This is basically for bookkeeping -- merging the automated new config generation, essentially newly verified masquerades.\n. Oh cool -- I was about to run precisely that test =). LGTM!\n. As discussed offline with @oxtoacart, I just tested this but after the merge of release-2.0.1 to master. That branch uses HTTPS for accessing CloudFlare, though, so it completely bypasses reverse proxy altogether! Closing this without merging since it's a quirky workaround really exclusively for that case.\n. Hey @fffw you want to take a look at this one?\n. Thanks @fffw! I just for now added deleting those few extra files, as it seems like ideally using UninstPage would mean using Page/UninstPage for everything, which is maybe more of a destabilizing change than would be ideal at this stage on Valencia.\n. OK I'm going to merge this in with those fixes you noted @fffw.\n. Thanks @oxtoacart. This could be useful for comparing making the pending detour PR clearer in terms of what it changes versus the current released code.\n\nSo #3545 was only on Valencia @oxtoacart?\n. Hey @oxtoacart you mind taking a look at this one?\n. Or @atavism you want to give this one a look?\n. Awesome thanks @oxtoacart! The other thing we need is to add logic to not\nset the UI to ui.lantern.io if the user does not have Lantern set as the\nsystem proxy.\nOn Feb 26, 2016 5:40 AM, \"oxtoacart\" notifications@github.com wrote:\n\nLGTM! I just made one small tweak to not launch goroutines for the pac\nsettings change.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3628#issuecomment-189280977.\n. Hey @todd or @oxtoacart you want to grab this? tiny change\n. Awesome @xiam! @fffw you want to have a look? I'm a bit tied up right now.\n. I'm confused why CI for valencia is failing and why your branch has an old testpackages.txt @xiam. Did you maybe branch before getting the latest from valencia?\n. > I think the only thing about this change to use ui.lantern.io that's not optimal is that it requires traffic to go through our proxy. If someone is using a proxy switcher that bypasses our proxy, ui.lantern.io won't work.\n\nThat's interesting @oxtoacart. Especially with the change to allow users to set whether Lantern should set the system proxy with the changes in https://github.com/getlantern/lantern/pull/3628, we might want to just check to make sure Lantern is set as the system proxy, and if it's not just open the UI at 127. That would of course break things on Edge, but that at least limits the damage to users who are: \n1) running with Edge as their default browser \n2) have customized Lantern to not use the system proxy\nThat's probably a pretty small minority, especially since most users doing #2 are probably using a proxy switching extension, and I don't know of any of those for edge.\n. Sounds great @oxtoacart \n. OK cool. These changes LGTM! Will merge when travis finishes.\n. You want to give this a think @oxtoacart?\n. Yes we definitely need to @oxtoacart. I generally do that just before building any new release (unless we're releasing a bunch of versions very quickly like in the 2.0.13-2.0.16 batch).\n. Building right before the release allows the masquerades to be as up to date as possible though.\n. OK LGTM @oxtoacart!\n. LGTM @oxtoacart. Let's just wait for travis.\n. This has been pulled into all relevant branches -- closing!\n. OK to close this @xiam?\n. @xiam you want to take a look at this one?\n. I'm merging this in @xiam and @oxtoacart because it makes that target unusable on valencia.\n. I'll look at this next @atavism \n. Hey @atavism are those side menu translations there for Farsi too?\n. OK working for me in English. I'll just assume the Farsi translation is in. LGTM @atavism!\n. Have you had a chance to look at these changes @fffw? I know I have not!!\n. LGTM and working great. Thanks @oxtoacart!\n. You mind looking at this @oxtoacart?\n. Sweet thanks @oxtoacart!\n. Nice!\nOn Feb 26, 2016 7:53 PM, \"oxtoacart\" notifications@github.com wrote:\n\n@myleshorton https://github.com/myleshorton FYI\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/getlantern/lantern/pull/3675\nCommit Summary\n- Fixed lantern target\nFile Changes\n- M Makefile\n  https://github.com/getlantern/lantern/pull/3675/files#diff-0 (2)\nPatch Links:\n- https://github.com/getlantern/lantern/pull/3675.patch\n- https://github.com/getlantern/lantern/pull/3675.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3675.\n. LGTM @oxtoacart thanks.\n. I just went ahead and removed that dns entry @oxtoacart \n. No problem thank you!\n. OK LGTM @oxtoacart!\n. This generally looks good @oxtoacart, although testing it revealed another issue, which is that bypassDomains in the pac file is never populated, either other this branch or on valencia! So something else broke there @fffw. I'll open a separate bug.\n. Hey @oxtoacart sorry I'm actually seeing that now too -- for some reason it was taking them awhile to populate in my initial testing, but now I'm seeing it working on all branches.\n. This is working well -- I'll merge as soon as Travis is happy.\n. I'll look at this soon @xiam!\n. Nice! Working great for me @xiam!\n. Thanks @oxtoacart!\nOn Mar 2, 2016 6:47 PM, \"oxtoacart\" notifications@github.com wrote:\nMerged #3705 https://github.com/getlantern/lantern/pull/3705.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3705#event-575604065.\n. Hey how's this look now @oxtoacart?\n. Sounds good @fffw great catch! I'll review and add.\nOn Mar 5, 2016 12:51 AM, \"fffw\" notifications@github.com wrote:\nResolves #3609 https://github.com/getlantern/lantern/issues/3609.\nWe were too rigid on detecting the symptom of being blocked. In this\nspecific case, due to recent changes of Go library code, Read returns read:\nconnection reset by peer error instead of previous one ECONNRESET (connection\nreset by peer), which makes detour failed to detect. This bug should\naffect lots of sites, so it probably worth adding to this release.\n@myleshorton https://github.com/myleshorton How do you think?\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/getlantern/lantern/pull/3726\nCommit Summary\n- treat all net.OpError as being blocked\nFile Changes\n- M src/github.com/getlantern/detour/detect.go\n  https://github.com/getlantern/lantern/pull/3726/files#diff-0 (20)\nPatch Links:\n- https://github.com/getlantern/lantern/pull/3726.patch\n- https://github.com/getlantern/lantern/pull/3726.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3726.\n. LGTM @fffw. I'll add it to 2.1.0\n. LGTM thanks @oxtoacart! I'll also merge to devel.\n. LGTM!\n. OK, merging this in to devel...\n. Nice @oxtoacart!\n. Nice @oxtoacart! And the internal update logic follows semantic versioning, is that right?\n. Exciting @fffw! The one thing that strikes me is just naming -- i.e we're no longer really doing any \"balancing\" so maybe there's a better name for this whole subsystem?\n. How you feeling on this one @oxtoacart?\n. @oxtoacart I was wondering if this PR fetches the pro config using the extra headers for pro.\n. Cool thanks @fffw! Yeah I was wondering if you had added any of that header handling in config.go. I can easily do that.\n. This looks ok @oxtoacart?\n. Oh good point @oxtoacart -- I'll add that.\n. How's it look now @oxtoacart?\n. Thanks @oxtoacart!\n. Thanks @fffw!\n\nOn Thu, Mar 10, 2016 at 4:39 PM, fffw notifications@github.com wrote:\n\nMerged #3768 https://github.com/getlantern/lantern/pull/3768.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3768#event-585732888.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Very cool @fffw. Can you give a more detailed overview of what this change does?\n. Can you document this such that @sunshine19090 can also run it?\n. LGTM @xiam! Thanks.\n. LGTM.\n. Hey @oxtoacart if you're free can you give this one a look?\n. Note I still haven't fixed the mobile compatibility problem @oxtoacart -- still need to figure out how to send in those new headers from mobile\n. OK @oxtoacart I made this at least not break mobile. We still need to wire up the user ID and token @todd, but there's at least some placeholder code at https://github.com/getlantern/lantern/pull/3806/files#diff-b8eeac50cbcb28f059813ada80be6c8fR82\n. Thanks @oxtoacart! Yeah I was just looking at that detour test.\n. Looks like we only use github.com/mitchellh for github.com/mitchellh/panicwrap, but we include all of github.com/mitchellh. Maybe clean that up while you're at it @oxtoacart?\nThis PR is exciting to me for some strange reason.\n. although maybe panicwrap internally relies on that..hmnn... maybe not to worry @oxtoacart \n. actually it doesn't look like it does need it: \nhttps://github.com/mitchellh/panicwrap/blob/master/panicwrap.go\n. Oh cool @oxtoacart. I must have misread the diff - nice.\n. OK, this looks awesome to me, especially all the golang.org org updates that might actually fix a good deal. Any objections to me just merging this @oxtoacart?\n. Sounds good @oxtoacart! Yeah I agree it's a bit scary, although honestly I'm also a little frightened that we're using any of that older gomobile code in particular.\n. ok i'll wait for CI and then merge! detour test will probably fail again (was looking into it, and it's totally random), but that's ok. thanks @oxtoacart!\n. OK merging...\n. Nice @oxtoacart!\n. It seems like it might be cleaner to use the existing permanent flag in wlEntry @oxtoacart and to modify RemoveFromWl to respect it, as in:\ngo\nfunc RemoveFromWl(addr string) {\n  muWhitelist.Lock()\n  defer muWhitelist.Unlock()\n  entry, ok := whitelist[addr]\n  if ok && !entry. permanent {\n    delete(whitelist, addr)\n  }\n}\n. Makes sense on RemoveFromWl @oxtoacart \n. tlsdialer_test.go is still failing, but that one's also random...merging!\n. LGTM @oxtoacart  thanks! Weird all those golang files didn't get pulled in before -- I thought they did. Did just certain packages not make it over with the dependency update PR?\n. Sounds great on the other race conditions @oxtoacart!\n. Oh sweet @oxtoacart -- yeah I just think it's handy to streamline this stuff whenever possible. Looking good this one.\n. Nice @oxtoacart! And this was definitely only an issue on devel right?\n. You want to look at this @fffw? Added a few linter fixes as well.\n. You mind looking at this one @oxtoacart?\n. Awesome @oxtoacart! I just merged the dependencies, and for some reason I don't understand the diff for this still looks huge. No big deal, but just a curiosity.\n. Oh whoops sorry @oxtoacart I completely butchered that! I'll have a look at this soon.\n. LGTM!\n. This needs to also be deleted in lantern_aws unfortunately @fffw -- otherwise the global sites will overwrite this while running lantern.\n. LGTM!\n. These generally look great to me @fffw -- merging in.\n. Thanks @oxtoacart!\n. LGTM!\n. thanks @atavism!\n. I'm just gonna merge this one in.\n. Hey so @oxtoacart is the test failure expected because of how you changed the merge to make it more readable?\n. it's looking for that tor obfs4 package..\n. Hey @fffw you want to take a quick look at these?\n. Thanks @fffw!\n. Hey @oxtoacart you mind taking a look at this one?\n. For some reason it's not loading a lot of the images for me now @fffw. Also the thumbnails are all now bleeding off each entry:\n\n. Awesome @fffw it's looking great to me now! Good stuff on the aspect ratio too.\n. I'll just look at your changes in the code a little more carefully, and then I'll just merge and build.\n. Looking great @fffw!\n. LGTM @oxtoacart!\n. This one's super trivial so just merging in.\n. It's a little hard to tell from the diff @oxtoacart but does this delete the measured package? If so I just want to make sure any changes in it are pushed upstream because I believe @uaalto is using that in http-proxy-lantern as well.\n. oh cool thanks @oxtoacart \n. Hmn...looks like the test is failing on FinestWebView-Android submodule -- weird. Otherwise this looks great @oxtoacart and ready to merge. \n. No -- the tests for this PR are failing @oxtoacart.\n. Thank you @oxtoacart!\n. For some reason this diff unfortunately doesn't include the main.go changes @oxtoacart. Any way to pull those in?\n. LGTM @fffw!\n. I'm actually not going to merge this for now @fffw, as I think the current behavior is actually the expected behavior, at least on OSX but I believe on Windows too. See http://www.w3schools.com/cssref/tryit.asp?filename=trycss_overflow\nIf there's a good reason for this change that I'm missing, though, we can easily add it in the next release.\n. Closing for now @fffw.\n. OK LGTM @atavism!\n. LGTM @fffw!\n. LGTM @fffw!\n. I'm actually a little bit confused on this @fffw and @atavism. I'm only seeing the LANTERN_MOBILE_ANDROID and LANTERN_MOBILE_SHARE keys for the en_US.json file. I swear I saw them earlier in the dist directory for other languages though. Either way, do we need to add those to the other locales?\n. Any insights into why those other locales don't have those fields @fffw?\n. yeah i was working on release-2.2.0 @fffw\n. Weird -- I see the same thing you're seeing now @fffw. Not sure what happened there. I'll make those other changes as well.\n. Never mind -- closing this!\n. @atavism can you put your bitly credentials in TMS?\n. LGTM @fffw!\n. LGTM!\n. Nice @atavism! LGTM!\n. Very interesting @oxtoacart -- did you see that data race in CI?\n5f900d8f-3756-473a-a234-e5b1846c6e6a\n==================\nWARNING: DATA RACE\nWrite by goroutine 97:\n  github.com/getlantern/balancer.(*dialerHeap).Swap()\n      github.com/getlantern/balancer/_obj/strategy.go:105 +0x140\n  container/heap.Pop()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/container/heap/heap.go:63 +0x73\n  github.com/getlantern/balancer.(*Balancer).Dial()\n      github.com/getlantern/balancer/_obj/balancer.go:99 +0x4f1\n  github.com/getlantern/balancer.(*Balancer).Dial-fm()\n      github.com/getlantern/flashlight/client/_obj/reverseproxy.go:25 +0x7b\n  github.com/getlantern/flashlight/client.(*Client).proxiedDialer.func1()\n      github.com/getlantern/flashlight/client/_obj/client.go:251 +0x44f\n  net/http.(*Transport).dial()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/net/http/transport.go:655 +0xd2\n  net/http.(*Transport).dialConn()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/net/http/transport.go:758 +0x276c\n  net/http.(*Transport).getConn.func4()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/net/http/transport.go:702 +0x73\nPrevious read by goroutine 142:\n  github.com/getlantern/balancer.(*dialerHeap).onRequest()\n      github.com/getlantern/balancer/_obj/strategy.go:129 +0xb5\n  github.com/getlantern/balancer.(*Balancer).OnRequest()\n      github.com/getlantern/balancer/_obj/balancer.go:60 +0x60\n  github.com/getlantern/balancer.(*Balancer).OnRequest-fm()\n      github.com/getlantern/flashlight/client/_obj/reverseproxy.go:27 +0x37\n  github.com/getlantern/flashlight/client.(*Client).newReverseProxy.func1()\n      github.com/getlantern/flashlight/client/_obj/reverseproxy.go:34 +0xc0\n  net/http/httputil.(*ReverseProxy).ServeHTTP()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/net/http/httputil/reverseproxy.go:177 +0x62e\n  github.com/getlantern/flashlight/client.(*Client).ServeHTTP()\n      github.com/getlantern/flashlight/client/_obj/handler.go:40 +0x518\n  net/http.serverHandler.ServeHTTP()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/net/http/server.go:2081 +0x206\n  net/http.(*conn).serve()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/net/http/server.go:1472 +0x1565\nGoroutine 97 (running) created at:\n  net/http.(*Transport).getConn()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/net/http/transport.go:704 +0x363\n  net/http.(*Transport).RoundTrip()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/net/http/transport.go:307 +0xaa5\n  github.com/getlantern/flashlight/client.(*noForwardedForRoundTripper).RoundTrip()\n      github.com/getlantern/flashlight/client/_obj/reverseproxy.go:134 +0xc6\n  github.com/getlantern/flashlight/client.(*errorRewritingRoundTripper).RoundTrip()\n      github.com/getlantern/flashlight/client/_obj/reverseproxy.go:83 +0xb3\n  net/http/httputil.(*ReverseProxy).ServeHTTP()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/net/http/httputil/reverseproxy.go:210 +0xb3d\n  github.com/getlantern/flashlight/client.(*Client).ServeHTTP()\n      github.com/getlantern/flashlight/client/_obj/handler.go:40 +0x518\n  net/http.serverHandler.ServeHTTP()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/net/http/server.go:2081 +0x206\n  net/http.(*conn).serve()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/net/http/server.go:1472 +0x1565\nGoroutine 142 (running) created at:\n  net/http.(*Server).Serve()\n      /home/travis/.gimme/versions/go1.6.linux.amd64/src/net/http/server.go:2137 +0x4d1\n  github.com/getlantern/flashlight/client.(*Client).ListenAndServeHTTP()\n      github.com/getlantern/flashlight/client/_obj/client.go:126 +0x77b\n  github.com/getlantern/flashlight.Run()\n      github.com/getlantern/flashlight/_obj/flashlight.go:147 +0x703\n  github.com/getlantern/flashlight/app.(*App).Run.func1()\n      github.com/getlantern/flashlight/app/_test/_obj_test/app.go:119 +0x84d\n. Hey @oxtoacart it seems like we might as well add the lantern version number in a header while we're in here... What do you think?\n. Yeah I suppose that's right @oxtoacart -- let's do that separately.\n. What do you think about the locking on s.dialers @oxtoacart?\n. This generally LGTM @oxtoacart. I don't love the two different OnRequest methods at https://github.com/getlantern/lantern/blob/balancecheck/src/github.com/getlantern/flashlight/client/chained.go#L80 and https://github.com/getlantern/lantern/blob/balancecheck/src/github.com/getlantern/flashlight/client/chained.go#L106 but I don't see any obvious way around it that would be useful. Merging!\n. Yeah aside from the links in the translations @fffw this seems good to go to me. The only thing I haven't been able to verify is that the on-error handler actually gets called when there's an error. When I just changed it to some bogus URL, it actually did not get called, but maybe there's a better way. Have you seen the on-error handler actually get called?\n. OK @fffw I just added the links and also threw in OS-detection so we can tell the user exactly where their logs are. Also removed d3 while in there.\n. Hey @fffw I know you're on break, but you want to give this a look when you're back? Thanks!\n. This all looks good to me @fffw! Merging.\n. Please ignore this one for now all reviewers out there!\n. Manually merged!\n. @fffw you mind taking a look at this one?\n. OK @fffw I think I've addressed all your concerns, but please let me know if not!\n. OK guys I refactored things a bit to support error reporting and to improve test coverage. Want to have a look @fffw?\n. Yeah I agree @oxtoacart it's a little weird to have lantern-ui in the GOPATH.\n. Nice @xiam!!\n. LGTM @fffw thanks!\n. Wow -- that's actually pretty crazy. Those were extremely old links right @atavism? Either way -- good change!\n. This one's super trivial, so merging.\n. I'm gonna pull this in so we get a new build out today.\n. Ok @fffw if you find a different cause feel free to change it!\n. Detour error again -- I'm gonna just merge this one too -- bad I know \n. LFTM @atavism! Merging.\n. This looks fine to me @fffw thanks!\n. OK this looks good to me @fffw and is working well.\n. LGTM @oxtoacart!\n. Thanks @atavism!\nOn Sun, May 1, 2016 at 10:04 AM, atavism notifications@github.com wrote:\n\nLGTM now! Merging\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/4167#issuecomment-216055677\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. @fffw want to take a look?\n. Thanks @fffw!\n. Oh cool @atavism yeah I wanted to do that but wanted to make sure to not mess up the interface to your stuff on the java side. I should be able to look at this today! In the latest version on my branch I also made a new \"feed\" package in flashlight, but maybe that's exactly what you did. I'll have a look. Good stuff!\n. Looks great @atavism thanks!\n. Hey @atavism I feel like this one actually isn't critical to 2.2.0, but please correct me if I'm wrong. I'm going ahead and building a new 2.2.0 now, but maybe we can just shift this to 2.2.1 or something.\n. OK LGTM @atavism!\n. Closing in favor of new branch\n. OK LGTM @atavism!\n. Hey @oxtoacart want to do a quick code review for this one? It's a pretty trivial change!\n. Nice thanks @oxtoacart!\n. Hey @fffw want to take a look at this one?\n. Thanks @fffw!\n. Note adding the version was already in there but we didn't actually have that custom dimension set on the server -- i added that.\n. You mind giving this one a look too @fffw?\n. Hmnn...that android issue is actually significant. Right now we're doing analytics from the java side there, so it might make sense to make it a different issue.\n. OK -- I just guard against android for now @fffw. What do you think?\n. These look good to me @xiam. Merging.\n. Hey @atavism  this is a pretty big change and will take me a little while to review unfortunately. I'll do it first thing tomorrow.\n. Hey @atavism just noticed it looks like android annotations 4.0 is available. maybe worth upgrading now?\n. Hey @atavism for some reason I'm getting two feed loads on startup -- seems like it's downloading the feed twice with 90 entries each time.\n. Awesome @atavism! I'll give it another look in a few hours!\nOn May 5, 2016 3:17 PM, \"Coveralls\" notifications@github.com wrote:\n\n[image: Coverage Status] https://coveralls.io/builds/6068565\nCoverage increased (+0.006%) to 51.947% when pulling aa6ee04\nhttps://github.com/getlantern/lantern/commit/aa6ee0410a153a1a26a5a98ee30676506a73c40a\non release-2.2.0-updates into 4e25f57\nhttps://github.com/getlantern/lantern/commit/4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c\non release-2.2.0.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/4201#issuecomment-217295874\n. OK looking good @atavism. The one thing I'm still concerned about is that Gravity.START. Any thoughts on that? It definitely works though, so I'll probably just build it.\n. Thanks @uaalto yeah GA actually uses the user agent to determine a lot of stuff, particularly the browser and the operating system. So without it we don't get browser and OS data from the backend analytics.\n. OK @uaalto I finally made those changes and added an analytics test! Will comment more in the code.\n. Here's another quick one for you if you're up for it @uaalto!\n. Thanks @fffw!\n. LGTM @atavism!\n. LGTM!\n. Nice @fffw! Looking now.\n. Looking good @fffw and great catch. I just added a shadowing fix I've been meaning to make for awhile as well. I don't think it ends up being consequential, but this is certainly more correct. Mind taking a look?\n. Closing this one @xiam -- will be fixed in the merge from 2.2.0\n. I do think we should probably do this every time we set the pac to on @xiam (add a new cache busting argument). I have a feeling it would fix other stuff too.\n. For now I'll merge and build though.\n. Yeah that'll definitely do it -- I'll build a new one.\n. Nice!!\n. Thanks!\n. Yup working for me @atavism!\n. For anyone reviewing this, it's definitely a little messy with all the various states. This code is all going to be ported to react soon, though, so probably not worth getting it pristine.\n. Thanks @uaalto!\n. Very interesting @xiam thanks! \n\nAny chance you can make this against devel actually? I'd like to do a 2.2.1 (or maybe even 2.3.0?) soon from devel just to get that code and fixes released, and all the refactorings on devel are starting to make merging old stuff challenging.\n. LGTM @xiam! I'll just merge this into devel myself.\n. Hey @atavism some of the mobile changes in this merge are a little tricky to me -- want to just take a second look when you have a chance?\n. Trying to just merge 2.2.0 into devel on this new branch that allowed me to first reverse merge from devel.\n. Thanks @atavism!\n. LGTM @atavism! I just added a couple of tweaks for Android Studio and merging now.\n. OK @oxtoacart I think this should be all set. I went ahead and refactored things a little bit to make testing easier.\n. Hey one sec @oxtoacart just realized the test needs a little work..\n. Yeah works for me!\n. Hey I just went ahead and fixed the test @oxtoacart and otherwise continuing with the review\n. I gotta say this seems like overkill here @oxtoacart. The ring buffer is cool, but all we really care about is persisting the set of masquerades that have fully passed the HEAD check and maybe the masquerades that have passed/failed the connection check right? Couldn't we just throw that in a slice and encode/decode from JSON or yaml? I'm just worried this is more code that can fail and more code that whoever works on this part of the app has to understand, whereas the above is super straightforward unless there's something I'm missing here.\n. Yup LGTM @oxtoacart thanks!\n. Nice @oxtoacart -- I really think this will be more maintainable going forward. It struck me that properly reviewing the ring buffer alone would have taken me longer than just writing a JSON version of this, but the conceptual overhead for any future person looking at it seems like the bigger issue TBH. I think this is significantly \"better\" in practice even if it's not as slick in principle!\n. I still have to work on this more @oxtoacart -- will definitely get to it today.\n. It seems to me the cache might be better as a separate struct @oxtoacart. The cache []*Masquerade slice, for example, is only used in the cache code itself, but that's not immediately obvious at first glance but also feels a little promiscuous to have it exposed to the rest of the code at all -- seems like it could be nicely hidden with the two just communicating through the masquerades channel.\n. I don't think I've ever described code as \"promiscuous\" before...maybe time to back away from the keyboard!\n. Definitely getting close @oxtoacart. Now just seeing two data races in the test which I think is related to the failure in CI:\n```\nWARNING: DATA RACE\nRead by goroutine 6:\n  runtime.convT2E()\n      /usr/local/go/src/runtime/iface.go:128 +0x0\n  github.com/getlantern/fronted.TestCaching()\n      /Users/afisk/gopath/src/github.com/getlantern/lantern/src/github.com/getlantern/fronted/cache_test.go:47 +0x990\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:473 +0xdc\nPrevious write by goroutine 7:\n  github.com/getlantern/fronted.(*direct).fillCache()\n      /Users/afisk/gopath/src/github.com/getlantern/lantern/src/github.com/getlantern/fronted/cache.go:73 +0x7e4\nGoroutine 6 (running) created at:\n  testing.RunTests()\n      /usr/local/go/src/testing/testing.go:582 +0xae2\n  testing.(*M).Run()\n      /usr/local/go/src/testing/testing.go:515 +0x11d\n  main.main()\n      github.com/getlantern/fronted/_test/_testmain.go:56 +0x210\nGoroutine 7 (running) created at:\n  github.com/getlantern/fronted.TestCaching.func1()\n      /Users/afisk/gopath/src/github.com/getlantern/lantern/src/github.com/getlantern/fronted/cache_test.go:32 +0x2bc\n  github.com/getlantern/fronted.TestCaching()\n      /Users/afisk/gopath/src/github.com/getlantern/lantern/src/github.com/getlantern/fronted/cache_test.go:41 +0x665\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:473 +0xdc\n==================\n==================\nWARNING: DATA RACE\nRead by goroutine 6:\n  reflect.Value.pointer()\n      /usr/local/go/src/reflect/value.go:91 +0x97\n  reflect.Value.Pointer()\n      /usr/local/go/src/reflect/value.go:1236 +0x5d\n  reflect.deepValueEqual()\n      /usr/local/go/src/reflect/deepequal.go:91 +0xf25\n  reflect.deepValueEqual()\n      /usr/local/go/src/reflect/deepequal.go:80 +0x1339\n  reflect.DeepEqual()\n      /usr/local/go/src/reflect/deepequal.go:185 +0x263\n  github.com/stretchr/testify/assert.ObjectsAreEqual()\n      /Users/afisk/gopath/src/github.com/getlantern/lantern/src/github.com/stretchr/testify/assert/assertions.go:42 +0x5c\n  github.com/stretchr/testify/assert.Equal()\n      /Users/afisk/gopath/src/github.com/getlantern/lantern/src/github.com/stretchr/testify/assert/assertions.go:263 +0x67\n  github.com/getlantern/fronted.TestCaching()\n      /Users/afisk/gopath/src/github.com/getlantern/lantern/src/github.com/getlantern/fronted/cache_test.go:47 +0xa20\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:473 +0xdc\nPrevious write by goroutine 7:\n  runtime.slicecopy()\n      /usr/local/go/src/runtime/slice.go:113 +0x0\n  github.com/getlantern/fronted.(*direct).fillCache()\n      /Users/afisk/gopath/src/github.com/getlantern/lantern/src/github.com/getlantern/fronted/cache.go:72 +0x7ce\nGoroutine 6 (running) created at:\n  testing.RunTests()\n      /usr/local/go/src/testing/testing.go:582 +0xae2\n  testing.(*M).Run()\n      /usr/local/go/src/testing/testing.go:515 +0x11d\n  main.main()\n      github.com/getlantern/fronted/_test/_testmain.go:56 +0x210\nGoroutine 7 (running) created at:\n  github.com/getlantern/fronted.TestCaching.func1()\n      /Users/afisk/gopath/src/github.com/getlantern/lantern/src/github.com/getlantern/fronted/cache_test.go:32 +0x2bc\n  github.com/getlantern/fronted.TestCaching()\n      /Users/afisk/gopath/src/github.com/getlantern/lantern/src/github.com/getlantern/fronted/cache_test.go:41 +0x665\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:473 +0xdc\n==================\n```\n. > The only way to truly hide it would be to put it in a separate package, but this implementation is intentionally closely coupled to the fronting code for simplicity. I'm inclined to leave as is.\nHmnn yeah good point. OK let's leave it.\n. Actually the state issue with direct.cache could be handled through scoping things at the method level @oxtoacart. I.e. have prepopulateMasquerades return a slice and then pass that slice to fillCache. Might solve the race condition too but would change the test of course.\n. Great stuff @oxtoacart!\n. Nice thanks @oxtoacart!\n. LGTM @atavism.\n. Nice -- I like the use of RoundTripper.\n. This just strips out most of the changes in 2.2.x to return analytics back to their previous state. This reflects several things, including that non-interaction hits are handled very differently (apparently) and that the Lantern version actually proved to be very useful in identifying fake versions.\n. Hey @oxtoacart you mind taking a look at this -- I just realized our analytics are still pretty messed up!\n. It looks like the coverage changes are just based on randomly touched code in the tests @oxtoacart so tempted to ignore.\n. Yup all set @oxtoacart!\n. Thanks @oxtoacart! I'll add this on devel as well.\n. Hey @xiam you mind giving this a look? \n. Awesome @xiam thanks!\n. Nice one @atavism -- I had missed this. Looks like that could have resulted in file desc leaks guys huh?\n. OK I just added a more explicit test for checkInt @xiam\n. OK @xiam good catch on this. I just changed everything to use float64 and changed the test to run with raw JSON, not a pre-generated map. We need to just make user ID a float64 and not use int because otherwise things would break on 32 bit machines AFAICT.\n. I must say though this all makes the string solution seem mighty appealing!\n. Why is float64 more confusing than int64 @xiam?\n. > UserID is a float64 which is not really a float64 because it gets truncated into an int before sending\nI don't understand what you're saying here. Where does it get truncated to an int?\n. Remember the biggest problem with the previous code was that it would break on 32 bit systems.\n. > Go uses float64 gut we can convert it to int or int64 and that's all\nint won't work on 32 bit systems, so it would have to be int64, but the conversion from float64 to int64 is also not a simple matter of casting. See, for example:\nhttps://play.golang.org/p/p-BZc09w8t\n\nwhen a float64 type is clearly not suitable to hold unique values\n\nHuh? How so?\n. To me the solutions are either:\n1) Use float64 like we are\n2) Use a string\n3) Convert float64 to int64\nTBH I think #2 is the best, followed by #1 and then #3.\n. I'll add a forth option:\n4) Just create our struct from the JSON and make userID int64 and hope Go does the right thing underneath!\n. Oh wow -- looks like we can just use UseNumber - https://golang.org/pkg/encoding/json/#Decoder.UseNumber\n. Ha yeah I agree @xiam it seems like strings are the sanest approach overall. That said, I just went ahead and used the UseNumber approach that basically uses a json.Number (really just a string!) underneath when decoding the JSON, but then lets you convert it however you want. This now just calls Int64() on that.\nThe other option would be to just use strings of course, but I feel like this is pretty clean too. What do you think?\n. Oh sweet thanks @xiam! Thanks for the thorough review!\n. OK these finally look ok @xiam\n. I somehow missed this @fffw -- I'll do a new 2.3.0 build thanks.\n. hey @oxtoacart you mind taking a look at this one?\n. I changed StartPolling back to not be a method of Config @oxtoacart, and I already fixed the extra else.\n. Just a poke on this one @oxtoacart -- looks quick.\n. Mind taking a look @xiam?\n. Thanks @xiam!\n. Hey @xiam you mind taking a look at this one when you have a chance?\n. Hey darn sorry @xiam I ended up implementing this whole native desktop notification lib -- I should have closed this. Some of the code is very similar though, and I'm going to integrate that into Lantern today.\nActually, since you're already familiar with this code now, would you mind having a look at this:\nhttps://github.com/getlantern/notifier\nIt's still not complete -- no Linux and only uses the basics on OSX and Windows, but it at least shows notifications and is a reasonable size!\n. wow really @oxtoacart? I wonder how that happened. Interesting. Does that test live proxying, as in hit real servers?\n. oh interesting -- I wonder if those proxies are failing...\n. This is overall looking great @oxtoacart, just a few comments.\n. OK looks good @oxtoacart!\n. LGTM!\n. Lgtm \n. LGTM @oxtoacart. I guess we lost that in direct.go with the proxied refactoring is that right?\n. This generally looks great @oxtoacart. Does it rely on the order of the merges? I.e. can I merge this independently from the others?\nI'm also curious what led down this path. Did you see leaking connections on the client side? Thanks!\n. very interesting @oxtoacart. so just so I understand, what exactly was causing those \"use of closed network connection\" errors -- that's been nagging me too on an almost daily basis!\n. Thanks @oxtoacart and sorry the order of the merges doesn't matter right?\n. OK gotcha.\nOn Wed, Jun 8, 2016 at 10:48 AM, oxtoacart notifications@github.com wrote:\n\n@myleshorton https://github.com/myleshorton Correct, the merge order\ndoesn't matter because this branch of the lantern repo already includes the\nunmerged changes to idletiming and http-proxy.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getlantern/lantern/pull/4593#issuecomment-224672599,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ABF0nsJZ6E1f4aBaE_WWJbWLsjsrE3z8ks5qJwBzgaJpZM4Iw7i7\n.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. OK LGTM @oxtoacart!\n. just waiting for CI @oxtoacart \n. This look's good @fffw. The staging config server appears to be down for some reason, so I'm just trying to get that back up so this passes CI.\n. This thanks @fffw sorry I kind of forgot about this one!\n. Yup I've been noticing this too @xiam -- I'll dig deeper into it.\n. Although it looks like one of the netx tests is failing @oxtoacart...\n. Hey @oxtoacart and @fffw I can't tell if all of the concerns are now addressed -- mine are.\n. Sorry is this one pretty much ready to go too @fffw? If so you mind grabbing this one @oxtoacart?\n. This has already been added in different form.\n. Nice! I actually also think we should allow betas to be updated from but\nnot to.\nOn Jun 29, 2016 3:38 PM, \"Jos\u00e9 Carlos\" notifications@github.com wrote:\n\nThis is the client part required to stage autoupdates.\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/getlantern/lantern/pull/4848\nCommit Summary\n- Add support for simulating autoupdates locally.\nFile Changes\n- M Makefile\n  https://github.com/getlantern/lantern/pull/4848/files#diff-0 (4)\n- M src/github.com/getlantern/flashlight/app/autoupdate.go\n  https://github.com/getlantern/lantern/pull/4848/files#diff-1 (2)\n- A src/github.com/getlantern/flashlight/app/mock_autoupdate.go\n  https://github.com/getlantern/lantern/pull/4848/files#diff-2 (15)\nPatch Links:\n- https://github.com/getlantern/lantern/pull/4848.patch\n- https://github.com/getlantern/lantern/pull/4848.diff\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/getlantern/lantern/pull/4848, or mute the thread\nhttps://github.com/notifications/unsubscribe/ABF0nqNVL8BIi8pLCiNyHV6sE15xbTTlks5qQvPNgaJpZM4JBowO\n.\n. LGTM @xiam. Out of curiosity, how would actually hitting the mock update server versus the live server work? Not related to this merge though.\n. I'm reassigning this one to you @oxtoacart since it's more in your wheelhouse if that's cool.\n. This seems to be working well. This issue confused me a lot for awhile, but it looks like it's separate:\n\nhttps://github.com/getlantern/lantern/issues/4946\n. Thanks @fffw I'll work on the tests and on integrating the global config today.\n. Hey @fffw I didn't have a chance to fix that failing test yet, but I did do a bunch of refactorings to use the same code to fetch the global config if you don't mind taking a look!\nDefinitely an area that could cause bugs. I don't, for example, do any of the old applyDefaults stuff from the old config.go.\n. hey @fffw I fixed the tests locally, but for some reason they're still failing on CI. still working on it.\n. OK @fffw I think this is pretty much good to go. I'm still working on the salt changes to actually expire the cache, but I'll do that in a separate PR!\n. Sounds good @fffw. Yeah it's definitely a pretty huge change, so please take your time. I'll make that autoupdate change.\n. Just added some cleanups @fffw to consolidate more code in the config package and to make it more testable (along with an added test!)\n. This should be ready for the next round @fffw\n. OK @fffw I think this one is all set now -- pending CI of course!\n. I'm on it @fffw. It seems like it's an effective change, but I'm just wondering a little bit if it's the right place for it because it theory the 3 tries to me are there to make absolutely sure that X proxy is inaccessible. We could do something like switch to another proxy as soon as we see a single failure, but that seems like a slightly different problem. I'll look at it harder though.\n. LGTM, although I think a larger change might be worth considering as mentioned in the comments @fffw and @oxtoacart.\n. Merging\n. cool thanks @fffw -- I'll have a look!\n. @fffw I'm holding off on merging this and my own PR because I think a round of QA would be useful for this one, so I don't want to just push it out.\n. Oh, also, one thing I want to make sure we double check in this whole change @fffw is that we preserve the command line switches that were also in config.go in the old version. To me those should maybe move to flags.go or something, but now I can't remember how I handled those! (borda interval - stuff like that).\n. LGTM @fffw!\n. Does this change what's in locationInfo @oxtoacart? Current locationInfo seems too high level:\n\n. I'm seeing this in the logs, which is odd (looks like each error is getting submitted twice):\nJul 29 21:09:46.119 - 0m41s ERROR detour: detour.go:252 Error while resend buffer to tags.bluekai.com:80: write tcp 192.168.0.3:52945->104.236.192.114:443: i/o timeout\nJul 29 21:09:46.120 - 0m41s DEBUG flashlight.logging: logging.go:257 Reporting error at detour: detour.go:252  to Loggly: Error while resend buffer to tags.bluekai.com:80: write tcp 192.168.0.3:52945->104.236.192.114:443: i/o timeout\nJul 29 21:09:46.121 - 0m41s DEBUG flashlight.logging: logging.go:254 Not reporting duplicate at detour: detour.go:252  to Loggly: Error while resend buffer to tags.bluekai.com:80: write tcp 192.168.0.3:52945->104.236.192.114:443: i/o timeout\n. Cool. I guess the only thing that change precludes is actually setting those intervals from the config, but honestly I think that's probably OK.\n. OK merging this in @oxtoacart\n. No need to synchronize here since ProxyQueue is thread safe!\n. I think you want something slightly different above - basically you want the while to be inside the synchronized block, and you want to wait for whatever the maximum time you're actually willing to wait for the data to be loaded is. Otherwise you're just going to do a superflous wait, and there's no reason to continually wait inside the loop. This is covered well in Effective Java -- see end of this comment. \nShould be something like:\njava\nsynchronized (this) {\n    if (!dataLoaded) {\n        try {\n            wait(2000);\n        } catch (InterruptedException e) {\n        }\n    }\n}\nThen when you set dataLoaded to true -- every time you set it to be true -- and note notifyAll instead of notify -- see again Effective Java item copied at the end:\njava\nsynchronized (this) {\n    this.notifyAll();\n}\nOtherwise you wait when you don't need to, and without the notify you might as well just use Thread.sleep (but wait and notify is much better!).\nHere's more from Effective Java:\nItem 50: Never invoke wait outside a loop\nThe Object.wait method is used to make a thread wait for some condition. It must be invoked inside a synchronized region that locks the object on which it is invoked. This is the standard idiom for using the wait method:\n``` java\nsynchronized (obj) {\n    while ()\n        obj.wait();\n... // Perform action appropriate to condition\n\n}\n```\nAlways use the wait loop idiom to invoke the wait method. Never invoke it outside of a loop. The loop serves to test the condition before and after waiting.\nTesting the condition before waiting and skipping the wait if the condition already holds are necessary to ensureliveness. If the condition already holds and notify (or notifyAll) method has already been invoked before a thread waits, there is no guarantee that the thread will ever waken from the wait.\nTesting the condition after waiting and waiting again if the condition does not hold are necessary to ensure safety. If the thread proceeds with the action when the condition does not hold, it can destroy the invariants protected by the lock. There are several reasons a thread might wake up when the condition does not hold:\n    \u2022 Another thread could have obtained the lock and changed the protected state between the time a thread invokednotify and the time the waiting thread woke up.\n    \u2022 Another thread could have invoked notify accidentally or maliciously when the condition did not hold. Classes expose themselves to this sort of mischief by waiting on publicly accessible objects. Any wait contained in a synchronized method of a publicly accessible object is susceptible to this problem.\n    \u2022 The notifying thread could be overly \u201cgenerous\u201d in waking waiting threads. For example, the notifying thread must invoke notifyAll even if only some of the waiting threads have their condition satisfied.\n    \u2022 The waiting thread could wake up in the absence of a notify. This is known as a spurious wakeup. Although The Java Language Specification[JLS] does not mention this possibility, many JVM implementations use threading facilities in which spurious wakeups are known to occur, albeit rarely [Posix, 11.4.3.6.1].\nA related issue is whether you should use notify or notifyAll to wake waiting threads. (Recall that notify wakes a single waiting thread, assuming such a thread exists, and notifyAll wakes all waiting threads.) It is often said that you should always use notifyAll. This is reasonable, conservative advice, assuming that all wait invocations are insidewhile loops. It will always yield correct results because it guarantees that you'll wake the threads that need to be awakened. You may wake some other threads too, but this won't affect the correctness of your program. These threads will check the condition for which they're waiting and, finding it false, will continue waiting.\nAs an optimization, you may choose to invoke notify instead of notifyAll if all threads that could be in the wait-set are waiting for the same condition and only one thread at a time can benefit from the condition becoming true. Both of these conditions are trivially satisfied if only a single thread waits on a particular object (as in the WorkQueue example,Item 49).\nEven if these conditions appear true, there may be cause to use notifyAll in place of notify. Just as placing the waitinvocation in a loop protects against accidental or malicious notifications on a publicly accessible object, using notifyAllin place of notify protects against accidental or malicious waits by an unrelated thread. Such waits could otherwise \u201cswallow\u201d a critical notification, leaving its intended recipient waiting indefinitely. The reason that notifyAll was notused in the WorkQueue example is that the worker thread waits on a private object (queue) so there is no danger of accidental or malicious waits.\nThere is one caveat concerning the advice to use notifyAll in preference to notify. While the use of notifyAllcannot harm correctness, it can harm performance. In fact, it systematically degrades the performance of certain data structures from linear in the number of waiting threads to quadratic. The class of data structures so affected are those for which only a certain number of threads are granted some special status at any given time and other threads must wait. Examples include semaphores, bounded buffers, and read-write locks.\nIf you are implementing this sort of data structure and you wake up each thread as it becomes eligible for \u201cspecial status,\u201d you wake each thread once for a total of n wakeups. If you wake all n threads when only one can obtain special status and the remaining n-1 threads go back to waiting, you will end up with n + (n \u2013 1) + (n \u2013 2) \u2026 + 1 wakeups by the time all waiting threads have been granted special status. The sum of this series is O(n2). If you know that the number of threads will always be small, this may not be a problem in practice, but if you have no such assurances, it is important to use a more selective wakeup strategy.\nIf all of the threads vying for special status are logically equivalent, then all you have to do is carefully use notifyinstead of notifyAll. If, however, only some of the waiting threads are eligible for special status at any given time, then you must use a pattern known as Specific Notification [Cargill96, Lea99]. This pattern is beyond the scope of this book.\nIn summary, always invoke wait from within a while loop, using the standard idiom. There is simply no reason to do otherwise. Usually, you should use notifyAll in preference to notify. There are, however, situations where doing so will impose a substantial performance penalty. If notify is used, great care must be taken to ensure liveness.\n. Is it really that useful not to loadImmediately during tests? Why? Complicates the logic later in the class. Without two ways of starting, you wouldn't have to synchronize on loadData, and getGeoData could just call wait as in the later comment. The current scheme also doesn't prevent loadData from being called twice -- will comment on this below.\n. There's no thread synchronization here, so table could be null on this line but the thread scheduler decides to switch the current thread to the threadLoadData method's thread, loading all the data, followed by the subsequent line (line 57) loading the data again. I think the easiest way to prevent that is to simplify the class to just always load the data (to just have the one constructor that makes the call to load the data on a thread).\nI believe the intent is to avoid slowing down the tests, but I think for the most part the tests should be avoiding TestUtils anyway. It also won't slow it down much since the actual loading is threaded, and anything that call getGeoData has to wait in any case if the data's not loaded.\n. Without two constructors you wouldn't need either the synchronized here or the check to see if table != null -- you'd just know that loadData is only ever called once (from a thread kicked off in the constructor), and you'd just check if it had completed using the dataLoaded check.\nNote again the check above doesn't actually accomplish what's it's trying to do of ensuring loadData is only called once because the other check to see if table is null is not within a synchronized block.\n. If you synchronized here too and did notifyAll, then you wouldn't need to extra waiting within the wait loop and you'd only ever wait for the minimal period of time.\n. notifyAll to be safe -- see Effective Java item above.\n. Definitely want to log an error here -- if this fails we need to know about it!\n. No need to fiddle around with state here. allCountries() is always called in the constructor so the allCountries variable will never be null after the class is loaded -- it can't be. Ideally allCountries would just be a final variable that's instantiated immediately either in the constructor or when declared. \nBetter yet, make the bulk of the current allCountries() method just be something like generateCountries that assigns a value to the allCountries variable. Then allCountries() just returns it. As in:\njava\npublic Map<String, Country> allCountries() {\n    return allCountries;\n}\nand further up in the class:\njava\nprivate Map<String, Country> allCountries = generateCountries();\nThen you don't deal with any state when you have no reason too, which reduces the complexity of different threads accessing the code and theoretically allows the compiler to make more optimizations because the whole class is read only.\n. Sorry to nitpick a little bit, but code to interfaces! No reason to force it to be a HashMap -- what if you want to change the implementation later?\n. I've actually started trying to avoid TestUtils and to slowly chip away at it's use -- basically tends to have too many side effects across tests, often causing them to fail together when they succeed individually. I would just do:\njava\n    private boolean isCensored(String ip) {\n        GeoIpLookupService lookupService = new GeoIpLookupService();\n        GeoData location = lookupService.getGeoData(ip);\n        Censored censored = new DefaultCensored();\n        CountryService countryService = new CountryService(censored);\n        Country country = countryService.getCountryByCode(location.getCountrycode());\n        return country.isCensors();\n    }\n. Well it should as long as Thread.setDefaultUncaughtExceptionHandler actually works in all cases. It doesn't seem to catch everything in practice, but I'm not sure why. I also haven't 100% verified that, but I've definitely casually observed it a bunch of times.\n. Hey shouldn't this be \nif (!LanternUtils.isFallbackProxy()) {\n...\n}\n?\n. Should be OK because we never actually populate the Version in the backend model -- it's just synced with the frontend separately. That's a little funny in the sense that we don't store the fact that there's an update across runs, but we can rely on the server just sending the update notification again.\n. Oh gotcha. Makes sense. A bit of a shame to sacrifice all the host name verification there, however, but probably alright.\n. So if HttpClient's verifier is enabled by default, it won't allow\nconnections to the fallbacks because it will reject the cert.\nOn Sunday, December 1, 2013, oxtoacart wrote:\n\nIn src/main/java/org/lantern/util/HttpClientFactory.java:\n\nlog.debug(\"Configuring defaults...\");\n-        // We wrap our own socket factory in HttpClient's socket factory here\n\nAh, I hadn't noticed that. I'm pretty sure that the default HttpClient\nalready does hostname verification, so as long as we're connecting to an\nhttps endpoint at the far end, its cert should get validated. From what I\ncan tell, the reason that the reason we provided our own\nLanternHostNameVerifier() was in order to trust the fallback server's cert,\nwhose hostname and ips don't match how we're actually connecting to it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1159/files#r8014024\n.\n. Ah gotcha -- cool -- missed the localhost line in the proxy config. Nice!\n. OK, overall looks like this'll definitely do the trick. As a lisp aficionado, I think you could remove a lot of the state and coupling here, though. Here's what I would do:\n1. Get rid of all the state checks and just initialize all the state right at the beginning (kill assureUrlInited and assureConfigInited -- more associated changes to enable that described later).\n2. Use event queues to tell any interested classes about proxies (Events.asyncEventBus().post(newConfig);).\n3. The above will allow you to decouple this class from all other classes -- you can just pass S3Config objects as events when they change\n4. Just store the S3Config in Model. To avoid blocking on the S3 config network lookup right at startup, I would just thread it and make the whole thing slightly lazy, i.e. when you get a new config, send it out in a new event and save the S3Config in Model for the next run. That would also mean removing the S3Config-dependent stuff from LanternClientConstants and just putting it in Model (let the S3Config object replace those constants).\n\nThat approach overall would enable a couple of things that I think would be nice:\n1. DefaultProxyTracker and ModelIo would no longer need to know about S3ConfigManager, just S3Config events\n2. You wouldn't have to worry about any state in S3ConfigManager (just initialize the URL as soon as the class is constructed and thread the network lookup, but with the network lookup not setting any state in this class, just producing events).\n3. Even LanternModule could remove DefaultProxyTracker\nI'd be happy to code up some of the above proposed patch as well. What do you think?\n. Note I think we should be doing something like the above even more in our code, in part influenced by Hickey's valuable plea to use more queues. We use a lot of queues already, but could push it further like the above.\n. Yeah there were a few other things changed on master too, particularly using newest.x instead of latest. I think we should probably just use wrapper.install4j on master unless there's something you really need here.\n. Yeah the master version also does the configurl.txt thing.\n. This is just a little cleanup\n. Another small cleanup.\n. Small cleanup =)\n. Here's where this type of thing starts to get nice. DefaultKscopeAdHandler only knew about XmppHandler because it needed to pass it to LanternTrustGraphNode. LanternTrustGraphNode needed it to send messages, in part as a result of the way the kscope library was coded. Now neither need to know anything about XmppHandler, they just know there's some class/actor out there that's in charge of sending XMPP messages.\nThis also makes testing much easier, as you no longer really need things like mocks, and wiring is less complicated.\n. Doesn't seem like you need this outer if block no?\n. This means that we start a new FTE client for each proxy that advertises that it's FTE right? In theory each transport could all run through the same local proxy though right? Or am I misreading this?\n. Can't you just check if both are specified?\n. Oh I see -- ignore me =).\n. Why would the retry handler be a problem with a post?\n. Coding to interfaces would just be a little nicer here -- LanternModule isn't guaranteed to return a DefaultProxyTracker, for example, just a ProxyTracker.\n. Interfaces...\n. Interfaces..\n. I would just add this to the interface\n. Yeah agreed. I basically just grabbed the old code from Launcher there, but I agree it's a little overly stateful.\n. Maybe grab these from the S3Config as well? Seems like that might point to making at least the masquerade host a top-level property, but just having that be configurable would be a big win I think.\n. Great point. I feel like the one that doesn't quite feel right in that dependency graph is HttpClientFactory -> Censored. I wonder how big an impact it would have to force callers to somehow make that decision? I like embedding it in HttpClientFactory from a correctness perspective (embedding that logic as close to the actual network call as possible to avoid errors), but conceptually it seems like an odd coupling.\n. I would actually make this a field in S3Config.java with your current value as the default value. That way we can change what it points to if we need to.\n. I don't think you need these any more right?\n. I think you can do lowercase here without field detection enabled/required\n. Cool. Yeah I realized with #1535 that it might just be simpler to store the model and grab whatever you need from the s3 config on the fly each time. The canonical S3 config in the model is always updated, so grabbing values from there will always be the latest. Doesn't matter too much, but maybe a little less complicated.\n. That's no different from the way you have it though. You can just skip the onNewS3Config method and not store masqueradeHost state outside of lookupSafe, and you'd accomplish the same thing in a bit simpler way that doesn't get into worrying about the event.\n. It won't be null because the default value is, well, the default value!\nOn Sunday, June 8, 2014, oxtoacart notifications@github.com wrote:\n\nIn src/main/java/org/lantern/util/PublicIpAddress.java:\n\n}\n }\n-    @Subscribe\n-    public void onNewS3Config(final S3Config config) {\n-        masqueradeHost = new HttpHost(config.getMasqueradeHost(), 443, \"https\");\n\nI don't think so, because I actually initialize masqueradeHost with a\ndefault value in PublicIpAddress. So, even if lookupSafe() is called before\nwe've gotten an S3 config (which I believe is possible), it will have a\nmasqueradeHost available. If I were grabbing it from the model, it would be\nnull at this point.\nUsing the event allows me to override the default value\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1568/files#r13524366.\n. Yeah exactly!\n\nOn Sunday, June 8, 2014, oxtoacart notifications@github.com wrote:\n\nIn src/main/java/org/lantern/util/PublicIpAddress.java:\n\n}\n }\n-    @Subscribe\n-    public void onNewS3Config(final S3Config config) {\n-        masqueradeHost = new HttpHost(config.getMasqueradeHost(), 443, \"https\");\n\nOh, model always has an S3Config! For some reason I thought that it would\nbe null until we've fetched it the first time.\n\u2026 <#1467d39d5fec6666_>\nOn Jun 8, 2014 3:24 PM, \"myleshorton\" notifications@github.com\n<javascript:_e(%7B%7D,'cvml','notifications@github.com');> wrote: In\nsrc/main/java/org/lantern/util/PublicIpAddress.java: > } > } > > +\n@Subscribe https://github.com/Subscribe > + public void\nonNewS3Config(final S3Config config) { > + masqueradeHost = new\nHttpHost(config.getMasqueradeHost(), 443, \"https\"); It won't be null\nbecause the default value is, well, the default value! \u2026\n<#1467d2794d15a198_> On Sunday, June 8, 2014, oxtoacart \nnotifications@github.com\n<javascript:_e(%7B%7D,'cvml','notifications@github.com');> wrote: In\nsrc/main/java/org/lantern/util/PublicIpAddress.java: > } > } > > +\n@Subscribe https://github.com/Subscribe https://github.com/Subscribe\n\n\npublic void onNewS3Config(final S3Config config) { > + masqueradeHost =\n  new HttpHost(config.getMasqueradeHost(), 443, \"https\"); I don't think so,\n  because I actually initialize masqueradeHost with a default value in\n  PublicIpAddress. So, even if lookupSafe() is called before we've gotten an\n  S3 config (which I believe is possible), it will have a masqueradeHost\n  available. If I were grabbing it from the model, it would be null at this\n  point. Using the event allows me to override the default value \u2014 Reply to\n  this email directly or view it on GitHub <\n  https://github.com/getlantern/lantern/pull/1568/files#r13524366>. \u2014 Reply\n  to this email directly or view it on GitHub <\n  https://github.com/getlantern/lantern/pull/1568/files#r13525992>.\n\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1568/files#r13526096.\n. Oh good point -- totally forgot about that. I say keep using the event, and my apologies for the noise!\n. Hmm...good question. I guess if the port mapping actually returned a completely invalid port, the user has UPnP or NAT-PMP enabled, but it's just not working. The only recourse in theory would be for them to set up a static IP and to manually map the port, so theoretically would could have a different error message for that case.\n. It could timeout from the server side (the timeouts are relatively aggressive on those checks), or there could just be a bug where our server isn't properly handling the traffic for some other reason unrelated to the port mapping itself.\n. That certainly could happen. It's just hard to tell the difference between the various potential failure cases, and I'm reluctant to potentially misinform the user.\n. Yup -- good idea. I'll do that.\n. No - just means we check for it now and use it before telling the user they\nneed to download and install chrome.\n\nOn Saturday, September 20, 2014, oxtoacart notifications@github.com wrote:\n\nIn src/main/java/org/lantern/LanternUtils.java:\n\n@@ -1209,4 +1210,28 @@ public static File osSpecificExecutable(final String fileName) {\n         }\n         return new File(\"./install/linux_x86_32\", fileName);\n     }\n+\n-    /\n-     * Checks if FireFox is the user's default browser on Windows. As of this\n-     * writing, this is only tested on Windows 8.1 but should theoretically\n-     * work on other Windows versions as well.\n-     \n-     * @return true if Firefox is the user's default browser,\n-     * otherwise false.\n-     /\n-    public static boolean firefoxIsDefaultBrowser() {\n-        if (!SystemUtils.IS_OS_WINDOWS) {\n-            return false;\n\nSo this means that we only support Firefox on Windows?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1828/files#r17821439.\n\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Right -- I'll move that down.\n. Well, the funny things about the --chrome flag check are:\n1. It's really more of a --default flag, as it just says to use the default browser\n2. It's only really relevant on OSX, as on Windows and Linux Lantern will open for almost any developer in Chrome or Firefox anyway.\nIt's not really consequential either way, though, and is also going away along with all other java code. \n. In other words, on windows the flag doesn't make much sense, but more than anything I don't think it makes any difference either way so probably isn't worth spending time on.\n. > Actually, today the effect of the -chrome flag on Windows is to open Lantern in the user's default browser, which could be anything (including I.E., Safari, Opera or whatever), irrespective of whether or not the user has Chrome installed. If you leave your change as-is, there will be two regressions in behavior:\nGiven that we have no known windows developers and any we may have are extremely likely to have Chrome, it again just doesn't really matter. It's also really unlikely they would have their default set to neither FireFox or Chrome, but sure theoretically it's possible. For that to ever be used we'd at least have to set the flag name to --default though, which is another topic/bug.\n\nIf Chrome is installed, UI will always open in Chrome even if it's not the default browser\n\nThat's the way it worked before. The only time it wouldn't work that way was if you specified the --chrome flag, which would mean to not use chrome and is just a flag any windows dev is extremely unlikely to use.\n\nIf neither Chrome nor Firefox is installed, the user will just receive an error message\n\nThis is the entire bug we're fixing. So it's not a regression but rather a bug fix. The current behavior in that case is to pop up IE Lantern is completely broken in all versions of IE, and it just looks horrible, not to mention being unusable (it doesn't load at all).\n\nI don't know if these actually affect any real users/developers, but it seems like such an easy thing to fix by just altering the if statement that I would just go ahead and do it. This'll be my last comment on the thread, as everything else looks fine to me.\n\nOK just made the change regardless. Merging!\n. No. Removed!\n. It's called both from OauthUtils and from GoogleOauth2CallbackServlet. GoogleOauth2CallbackServlet only runs on the first run, however, and it generates a RefreshTokenEvent. OauthUtils waits for that event before ever proceeding, so while it's from a different thread there's zero chance of concurrent access. OauthUtils will in turn only call this method when the access token has expired, which will only happen well after GoogleOauth2CallbackServlet has fetched the original oauth token on the first run.\n. It's just there to make sure we re-fetch the access token 10 seconds before it's actually expired -- just to make sure we don't cut it too close. I'll add a comment.\n. Actually bumping that to 30 seconds...\n. In theory I agree with that, but in practice I don't think it makes any difference because there's no way for GoogleOauth2CallbackServlet and OauthUtils to collide. The problem with adding something like OAuthInfo is that it would break compatibility with old clients and would force everyone to log in again (unless we did some gymnastics to handle that case, but that seems overly complicated).\n. The above block is the code that makes it so we're not requesting oauth tokens multiple times. Before OauthUtils would cache it's previous response and would check for that. Now it bases everything off what's in Settings, so it'll grab the tokens that GoogleOauth2CallbackServlet put there.\n. OK cool -- just added in 94a164a\n. This is one of the key changes - just explicitly advance the modal here where we know we're in the setup sequence instead of relying on more ambiguous code in XmppConnector\n. Removing XmppHandler here was just a cleanup since it's no longer used. Doing so, however, seems to have screwed up Guice's ability to auto-wire everything and led to the creation of the new RosterHandler interface and associated changes where everything references that instead of Roster directly. This keep cropping up, though, so it'll be a useful change going forward.\n. This is the other important change -- remove all this handling from XmppConnector and just handle things explicitly the GoogleOauth callback code.\n. Also don't sleep. User creation should be in a transaction on the server side, so should not collide.\n. Yeah we create uninvited, open download users in XmppAvailableServlet. So the internal state \"not invited\" thing is really just a relic that's not used for anything, so we can remove it any time. I just moved that chunk of code from XmppConnector, but that line isn't really necessary.\n. Stripped out all this invited/uninvited stuff.\n. No!! Should be resources plural. Good catch!\nOn Wednesday, October 15, 2014, aranhoide notifications@github.com wrote:\n\nIn debInstall32Bit.bash:\n\n@@ -12,5 +12,7 @@ fi\ntest -d install/linux/lib || mkdir -p install/linux/lib || die \"Could not create install/linux/lib\"\n cp lib/linux/x86/libunix-java.so install/linux/lib/  || die \"Could not copy libunix?\"\n+rm -rf src/main/resource/pt\n+cp -R install/linux_x86_32/pt src/main/resources/ || die \"Could not copy pluggable transports!\"\n\nIs it intentional that you say resource (singular) in the line above and\nresources (plural) in the one below?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1896/files#r18912195.\n. Yeah I included both checks just because what's happening is so mysterious -- just trying to gather any information we can get our hands on in the logs.\n. This one's interesting. I didn't actually change that explicitly, but the new signing in install4j doesn't appear to support signing launchers for some reason (it's no longer even in the UI). I'm going to try manually adding it back to the config file though to see if we might be able to get it to sign them again.\n. So unfortunately it will still sign the app bundle with that line added back in, but the signing fails for some reason:\n\nspctl --asses --raw /Applications/Lantern.app\n/Applications/Lantern.app: invalid Info.plist (plist or signature have been modified)\n. That'll work correct @oxtoacart? And just return null?\n. snakeyaml looks like it's in maven central:\nhttp://search.maven.org/#browse%7C1653650533\n. We need to check to make sure notifyAll() all hasn't already been called here, otherwise we'll wait forever!\n. Looks like this will go straight to 250^2 ms, which is a lot of milliseconds. So this will basically just go straight to maxDelay. That might be fine, but not intended I don't think.\n. I would probably actually make these daemon threads so they don't prevent Lantern from closing in case anything goes awry.\n. I find it a little cleaner to do:\njava\nnew File(dir, newFile.getName())\n. So the reason for this is twofold:\n1. A legacy from when Flashlight didn't know anything about masquerades and when Lantern would pass it the masquerade to use\n2. The java side still handles the geo IP lookup because it has to decide what mode to run in and to start flashlight accordingly. To do that in a blocking-resistant way it need to use domain fronting.\nThis will all happen at the Go layer eventually of course, but for now it's one of the first things that gets called, and the Go code hasn't even started yet.\n. No -- it's just removing dead code.\n. If not masquerade can be reached, the code will just time out (the invokeAny call will time out) because no response will be returned (everything will throw an exception). If everything were blocked, it would definitely break.\n. I think the best solution is to just move the geo IP lookup to the Go side.\nThat just takes a little fiddling with the startup sequence.\nOn Tuesday, November 25, 2014, aranhoide notifications@github.com wrote:\n\nIn src/main/java/org/lantern/S3Config.java:\n\n@@ -42,16 +39,7 @@\n     }\npublic static final FlashlightMasquerade MASQUERADE =\n-            new FlashlightMasquerade(DEFAULT_HOSTS_TO_CERTS, new MasqueradeListener() {\n\n@Override\npublic void onTestedAndVerifiedHost(String host) {\nsynchronized (TESTED_AND_VERIFIED_HOSTS) {\nLOG.info(\"Adding tested and verified host: {}\", host);\nTESTED_AND_VERIFIED_HOSTS.add(host);\n}\n}\n});\nnew FlashlightMasquerade(DEFAULT_HOSTS_TO_CERTS);\n\n\nSo the Java side is using domain fronting directly, and IIUC we're\nmanaging the set of masquerades that the Lantern side uses separately from\nthe ones in the Go side? If we wanted to get rid of the duplicate\nmanagement of masquerades, an option would be to just start a \"get mode\"\nflashlight provisionally, and shut it down later if we find we don't need\nit.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2013/files#r20919273.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. It doesn't appear to be the case to me that the directory doesn't exist. More importantly, if it doesn't, this will fail in the same way the initial directory creation failed. See https://github.com/getlantern/lantern/blob/2020/src/main/java/org/lantern/LanternClientConstants.java#L114\n. Why are you removing this?\n. Yeah I agree LanternUtils should create it too, so I like that part of the\nchange. But yeah still unclear why it's failing. I'm guessing it's in use\nby another process but not sure.\nOn Sat, Nov 29, 2014 at 4:00 PM, oxtoacart notifications@github.com wrote:\n\nIn src/main/java/org/lantern/LanternUtils.java:\n\n}\n+\n\nAh, I didn't realize that that folder was already getting created in a\nstatic initializer. That said, it doesn't hurt to have the LanternUtils api\ncreate the directory, since its caller can theoretically pass it anything.\nThat still leaves the question of what was actually failing though.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2021/files#r21057231.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Ah gotcha -- nice!\n. Nice. Exactly what I was thinking -- remove mutability wherever we can and see where we are then.\n. Thanks so much for this submission @ed2k! We're actually currently compatible back to Java 6 (although we should seriously consider changing that), so as of now we can't use Files.copy unfortunately. Can you use org.apache.commons.io.FileUtils.moveFile perhaps?\n. Yeah it would be executed and would do nothing.\n. We don't use it anywhere else no. That tends to be my criteria for whether or not to create constants. Extracting them is kind of nice for self-documenting, but there's also something to be said for just seeing all the code in one line. To me that's about a tie, and the tie goes to less typing unless it's used in multiple places.\n. newSingleThreadExecutor can't throw an exception no. The submit call can throw a RuntimeException, but not really in practice in our case. The prior code would just catch that exception and wrap it in a new RuntimeException, whereas the new code will just throw the original. So it's functionally equivalent, less code, and I think a little clearer because the prior catch makes it seems as if it's catching exceptions from the actual internal Callable, which it's not and which we have to do from the get(...) on the Future.\n. Great note @aranhoide. I think it's really only an issue for sorted data structures as you hinted, but I added the suggested note and also made the return collection immutable.\n. Right. The thing is, in order to support 256 bits, we need to have unlimited strength policy files in place. Those aren't normally shipped by default because there are still export restrictions for their use. Beyond that, Schneier also argues that 256 bit AES is actually less secure that 128 bit AES at various rounds. He says:\n\nAnd for new applications I suggest that people don't use AES-256. AES-128 provides more than enough security \nmargin for the forseeable future.\n\nSo this makes us both at least equally secure and removes the hassle of dealing with unlimited strength policy files. We also don't ship with unlimited strength policy files regardless, so the 246 bit code path was never executed.\n. > Since you're already using a new instance of the comparator for each sort, you could store the randomized weight for each proxy for a given sort and return those consistently.\nI'm not sure I follow. My goal is to have each user sometimes use flashlight proxies according to some probability. Currently the weights aren't randomized but rather the value in the realm of the all weights, which results in the selection. Are you suggesting I store that? If so, that would result in the comparator always choosing either flashlight or standard fallbacks over the other, so you would not get a mix of traffic going to each. Or are you suggesting something else?\n. Oh I see -- for each sort not for each proxy -- I got confused. Makes total sense - thanks.\n. Oh wait sorry, so it would have to be a random weight within a given range for each proxy. I actually don't think we're solving anything with that approach, or actually that there's anything to solve here. Each pair of elements will only be compared once, and each time that happens one or the other is chosen in a weighted fashion. That's really all we want or need. With the suggested change, the Comparator would still be inconsistent with equals, and would therefore still not be a total ordering. So I just don't think we're solving anything.\n. Oh right -- nothing. Forgot I added that fix. I'll make that a separate PR.\n. This stuff is mysterious to me, but for whatever reason if I make this call from a LanternUtils static method for a resource at the root, the getSystemResourceAsStream call would return null while the LanternUtils.class.getResourceAsStream call would not. That was actually for when I was experimenting with using an AppleScript snippet to determine the default browser, which came to seem like not the best option, but the change does make the call more robust.\n. > Oh, I see, we run it as an app on Linux. To make this distinction clearer, I might make app a boolean flag on addDefaultChromeArgs, at which point your comment here makes more sense.\nYeah I think if we did that we'd need to call it something other than addDefaultChromeArgs, but the idea is for that method to add common stuff while the OS-specific code customizes any commands as necessary.\n\nAlso, rather than having it be addDefaultChromeArgs, I might make it buildChromeCommand and have it take care of finding the chrome executable from amongst all possible paths.\n\nThe tricky part there is that then that call would have to do custom stuff for each OS -- basically it would have to integrate much of the logic in WindowsBrowser, OSXBrowser, etc. To me it's nice to have those as separate files to avoid the mental clutter of worrying about the other OSes when you're typically only focused on one.\n. Oh gotcha. Yeah for whatever reason LanternUtils.class.getResourceAsStream wasn't working when I first implemented that method for extracting flashlight, but again I find those two calls and their relationship to classloaders endlessly confusing.\n. Oh gotcha. I got confused by the \"have it take care of finding the chrome executable from amongst all possible paths\" part, which to me we wouldn't want in that method. Changing the method name and adding a boolean flag would be fine, although I also kind of like having each OS-specific class be super explicit about whether or not they want it to be an app or not. With only three classes total, it doesn't seem like we'd be saving much with doing that part in BrowserUtils.\n. This should be LanternXmppUtils.jidToEmail\n. Should be private?\n. It might make more sense just to use the File class here and to make the directory if necessary, likely in the constructor. Along the lines of:\n``` java\nfinal File serverConfig = new File(new File(LanternClientConstants.CONFIG_DIR, \"pt\"), \"flashlight-server\");\nif (!serverConfig.isDirectory() && !serverConfig.mkdirs()) {\n    // log an error\n}\nthis.serverConfig = serverConfig.getAbsolutePath();\n....\nprivate static String getServerConfigDir() {\n    return this.serverConfig;\n}\n```\nNot a big deal, but I'm guessing you must make the directory elsewhere?\n. Just realized this needs to be %APPDATA%/Lantern\n. Not sure where byteexec gets extracted to, but if it's the current directory, then the above also applies\n. OK cool.\n. I don't think we really need or want the platform-specific cipher provider here. Those integrate with the keychain and whatnot. We're encrypting the JID for privacy right? Do we ever need to decrypt it?\n. Maybe add typing here? Map\n. Whoops, markdown didn't like that. Let's try again.\njava\nMap<String, Object>\n. Doesn't look like these are used publicly anywhere...\n. Why do we need it all (the encrypted version)?\n. The native dependency is on the Java side -- those cipher providers are all platform specific. I agree that it sounds like what we really want is a hash here.\n. > Yeah. So we have this dependency on the Java side no matter what, since we're using the exact same mechanism to encrypt the model.\nRight -- I'm just saying we want to limit our use of it to make swapping it out easier.\n\nI'm going to switch it to a hash now. Stay tuned.\n\nNice!\n. We effectively shortcut that with using LanternUtils.isDev\n. Because it prevents accessing the Lantern UI from other machines on the network.\n. That would probably work, although we'd have to include both 127.0.0.1 and the local network address in order to keep all the current stuff working. With any caller already having to somehow guess the random path and port to even get here, however, to me the whole inclusion of CSP is pretty dubious. We've also seen it cause bugs even on localhost, and it's at least the first thing that fails on IE.\n. Fixed!\n. Fixed!\n. Actually I guess it's really just the CSP header that causes local network issues -- fixed!\n. Oh interesting. So we should also check for our own IP and ignore it probably huh? I'll make that change, in which case I think everyone can just listen right?\n. Yup nice one.\n. Will change.\n. Isn't the effect the same since reset was only called in response to a connectivity changed event? Granted the reset call should be synchronized, but that seems like the only issue with the previous code.\n. So we actually have the Events.inOrderAsyncEventBus for making sure events are in order, which we should use if we need that. Beyond that, though, I wonder if there's an associated race condition in PublicIpInfoHandler. In particular, in seems like the only way in practice the public IP should get delivered before the reset is if it's cached. Any connectivitychangedevent should clear the cache, which it does, but it's not thread safe. \n. > So, PublicIpInfoHandler does the public ip check in response to a ProxyConnectionEvent, which happens as soon as the local proxy has started.\nOK, so this is a related problem. With the new code on devel, there will only ever be a ProxyConnectionEvent once at startup. That means from that point on, we'll use that same public IP even if we change networks. It also means we'll never again generate a PublicIpEvent, which leads to other problems. So there's a bug with not learning about new IPs if we change networks for sure.\nWith the code on master, this doesn't happen, and reset() also always gets called before DefaultProxyTracker.init(), which means that reset always gets called before a PublicIpEvent is generated (since DefaultProxyTracker generates that event via generating a ProxyConnectionEvent). \nSo it looks like both of these slipped through the cracks of the #2103 PR. In theory we could probably just make PublicIpInfoHandler actually do the new check on a ConnectivityChangedEvent for becoming connected instead of on ProxyConnectionEvent.\nIn terms of PublicIpAndTokenTracker the problem is now that it will never get a public IP after that first run. So when we get a ConnectivityChangedEvent for disconnecting, it will set hasPublicIp to false correctly, but PublicIpAndTokenTracker will never again get a PublicIpEvent because those are only generated in response to connections to the proxy. So the PublicIpAndTokenEvent will never get generated, and the friends screen or anything else waiting on that will hang.\nI think just looking up the public IP in response to ConnectivityChanged might do it, but we have to somehow be sure the GetModeProxy has in fact started and is able to do the lookup.\n. I would just use AtomicBoolean and skip all this synchronization and local variables.\n. Same as above. \n. Or you could just make both those methods synchronized. Then you don't need volatile or the local variables but make sure the two stay in sync with no race condition.\n. > I didn't make the whole methods synchronized because I don't want the delivery of the event blocking on starting flashlight.\nThat won't matter because the event is delivered asynchronously on its own thread.\n\nOther than the unnecessary volatile declarations, is there anything wrong with the code as written?\n\nIt looks technically correct but just unnecessarily verbose.\n. Thanks on the synchronized change! You also technically don't need these to be volatile, but not a huge deal either way.\n. OK cool\n. I can't remember offhand why we opened 5228, but it was basically because people were using it.\nI don't think we're making any assumptions about the actual data being run over any of these ports are we? In fact we don't add any extra encryption to any traffic other than always encrypting connections between the Lantern client and any proxy it hits (with that resulting in TLS over tunneled TLS in the case of connections that are already encrypted).\nI guess I'm a little confused. The theoretical attack here is a mixed content attack. Most browsers actually protect against that for JavaScript (see https://qualys.jive-mobile.com/#jive-document?content=%2Fapi%2Fcore%2Fv2%2Fposts%2F2400). The attack is specifically when browsers load HTTPS pages that include HTTP content. Let's say that's a script (let's imagine the browser isn't protecting against script injections). In that case, though, the javascript would be loaded over HTTP and port 80 typically, so if we proxied port 80 we'd still be vulnerable to that.\nI.e. only proxying port 80 on our servers wouldn't mitigate the attack since the attack is typically over port 80.\nWhat am I missing?\n. Actually why not just avoid this extra state and create the trusted dialers as soon as you create the Balancer? Like in New just do something like:\ngo\n    trusted := make([]*dialer, 0, 0)\n    untrusted := make([]*dialer, 0, 0)\n    for _, d := range dialers {\n        dl := &dialer{Dialer: d}\n        dl.start()\n        if d.Trusted {\n            trusted = append(trusted, dl)\n        } else {\n            untrusted = append(untrusted, dl)\n        }\n    }\n. Makes sense. Sounds like a plan!\n. Hey I think we're actually saying the same thing but just getting mixed up in the wording --- I thought you were suggesting that limiting our servers to only proxy content to 80 and 8080 instead of to all the ports they currently proxy would limit this attack. In reality what will limit the attack is not sending port 80 content/unencrypted content to peers. I basically interpreted the following:\n\nonly proxying ports such as 80 and 8080 on our servers since that would fix the potential Javascript script injection we're trying to close\n\nas suggesting to only have our servers proxy those ports, but I believe you're suggesting to send those ports only to our servers, which is cool.\n. Yeah I would agree with not proxying at all there. If we don't have any trustedDialers, we've got bigger problems on our infrastructure side.\n. Yes nice one!\n. I would agree with that sentiment @aranhoide!\n. This seems like it only makes sense if the io.Copy(connOut, clientConn) call returns an error no? If it's just returning because of EOF on clientConn, that means clientConn is already closed, so no need to close it again. \nIt seems like we might as well also call connOut.Close here as well, as there's no clientConn for connOut to write to at that point and it seems like there are cases where we'd otherwise rely on the server connection timing out (i.e. if the clientConn hasn't written any data and has just closed, the server connection could be waiting around for data up until some server-side timeout).\nDoes that make sense?\n. This seems like it was a bug. Not sure why we ever set the global location here, but in practice it also frequently would overwrite the location discovered in our geolookup -- i.e. the likely cause of the many \"xx\" locations we see in analytics.\nThis change also makes it so that the only thing that ever modifies the location is the geolookup itself, which I think makes sense.\n. This will get called (albeit somewhat tangentially) once we learn the location and the location event is propagated.\n. Move these to the more specific class, ditch global setting of the location.\n. This is a wrapper around https://github.com/asaskevich/EventBus to make it easier to use at the expense of these being global.\n. Allows things to trigger a lookup outside of the polling schedule. Added a lock to make sure it never conflicts with the polling itself.\n. Not related to this PR, but I would say:\nMissing \"s3cmd\" command. Run brew install s3cmd or see https://github.com/s3tools/s3cmd/blob/master/INSTALL\n. Nice.\n. > save location across runs so the user dot doesn't start in null island until first geolocation request.\nThat one actually makes sense to me. Let me see:\n1. If that's actually supported now\n2. If I can just add it\n. Actually I just stripped it -- the lat/long you could make more of an argument for caching, but less so the country I think.\n. That's where the runtime.Gosched comes into play -- it yields to the other go routines, and there's only one other routine in this case.\n. Cool -- nice idea. I just added that in yamlconf itself actually, which seems a bit more bulletproof. Good catch.\n. OK, I just added some changes here, but actually to use strings instead of ints. I want to encourage compile time checking here, which is the whole purpose of doing it by type, but I think the int approach is a happy medium of sorts (i.e. it would feel very odd to throw in arbitrary ints as topics, encouraging callers to take a peek at how it works and to add topics to pubsub.go).\n. Fixed!\n. Done!\n. Me neither -- cool!\n. Yeah I realized it would be just as easy and more idiomatic to just use channels, so that's changed.\n. Where is version defined?\n. Wow, that's cool. Never knew that!\n. statserver does -- it's used for geolookup for local stats on peers. I think analytics actually probably breaks with using DDF though.\n. Neat! Didn't realize you could create a chan type.\n. Maybe a name other than make just to avoid confusion with the make builtin function?\n. Maybe the same with close to avoid confusion with the close builtin too? \n. Here too I would think. Close is a nice name, but the fact that it's private (i.e. lowercase) means again it could be confusing with the close builtin.\n. Love this.\n. Should we also call close on hqfdClient here?\n. Actually I think I misread the last function of https://golang.org/src/net/http/client.go -- doesn't look it actually can be closed.\n. I think you're saying that because wg.Add and will get called and then immediate wg.Done will get called in MakeWithClient possibly before close is ever called, is that correct?\nI'm actually unclear on what the purpose of the WaitGroup is here. The important thing is that close is called at all not necessarily that it completes as far as I can tell. What am I missing there?\n. Honestly I like the added safety of the package regardless, but I'll also have a look at how things are closed.\n. It looks to me like the connections are just closed without waiting for any existing data to do its thing:\nhttps://github.com/getlantern/lantern/blob/valencia/src/github.com/getlantern/connpool/connpool.go#L185\n. Makes sense on the purpose of the WaitGroup @aranhoide \n. Oh so it's not quite as bad as I thought -- I thought it was not proxying to the config at all, but it's just not doing DDF.\n. I think we actually want this to be a util.HttpClient. This using DDF appears to just be a bug in both lantern-android and lantern.\n. Nice! That timeout of 5 seconds was pretty darn aggressive too. Good catch.\n. I just created https://github.com/getlantern/lantern/issues/2540. I'm happy to just knock that out unless you're itching to get to it.\n. Cool -- on it.\n. Great catch @fffw! For some reason I don't seem to get these messages from you -- probably something off with my email filters, so I'm just seeing this now. Fixing.\n. Nice. Didn't know you could do that! Cool.\n. Yeah this is interesting. I think CloudConfigCA  will actually be blank at this point typically, which I think means it'll use the Go defaults. We definitely have a related issue on the FT side as well.\nI guess we should actually pull out the Google Analytics CA here though huh?\n. Good point. Will do.\n. This one shouldn't actually be necessary @atavism because we're doing it in onListening, so we know the server's up at this point.\n. Awesome!\n. Yeah I like the general thinking here @xiam . Two issues I see though:\n1. This method is at least designed to not require a proxy, so I would move this after line 78 if proxyAddr != \"\" {\n2. If the proxy is not a localhost address, this might not be what we want (it would probably make more sense to just let it fail). We could use the IP IsLoopback method to check that before making this call -- http://golang.org/pkg/net/#IP.IsLoopback\n. Good catch. No not intended. I think we should actually be using getlantern/golog here and Errorf. We should do a new build @atavism.\nAny reason we're not using getlantern/golog in lantern-android?\n. Just created https://github.com/getlantern/firetweet/issues/86 and https://github.com/getlantern/lantern/pull/2554\nCan you review https://github.com/getlantern/lantern/pull/2554 @fffw?\n. Ah I think I see -- conflict between AssetFile and AssetDirectory correct?\n. This and the following are the only actual changes.\n. This too.\n. That defer only worked when the method blocked, which the new one doesn't do. I think either way is fine though.\n. I would just declare the httpClient and not create one here. I realize that's not really a change you made, but without that the later check for httpClient == nil doesn't make any sense since it will never be nil, and initially we'll try to make direct analytics call until util.HttpClient returns.\n. This isn't related to your change @atavism, but it looks like init() in this file is actually never called. I'm unclear on how this is working at all, since that would mean that clientConfig is never created and should be nil.\n. It seems like clientConfig should just be initialized to defaultConfig() as soon as it's declared.\n. Cool -- yeah I actually didn't realize go had that but it seems like it's mainly useful when you can't actually initialize something when it's declared -- somewhat akin to a static initializer block in java.\n. This also isn't related to your change, but it seems like we should probably log this error if it does occur @atavism \n. Wait so you don't want to grab the network config right away anymore @atavism? What's the thinking there?\n. It looks like this will now record a session event every time regardless of whether or not the user has chosen to auto-report stats @atavism.\n. Cool -- looks good @atavism \n. Yeah exactly @xiam. Ours was actually worse at displaying more standard test output, though, which is what we need for this particular test, so I reverted. I agree we should probably just remove getlantern/testify, as I'm also guessing similar functionality is now upstream.\n. I just realized there's a better way to do this whole request copying business -- I'll submit another PR.\n. Actually while just doing a fresh Lantern build I feel like regenerating the config every time automatically is probably a good idea, as the certs, IPs, etc, could theoretically change over time, and it's worthwhile to periodically update it.\n. Yeah we could integrate that into the Makefile. You mind ticketing that on the Lantern side?\n. Nice. I might make this a little more DRY with something like:\n```\nif allowRemote {\n...\n    addrToUse = \":\" + strconv.Itoa(tcpAddr.Port));\nelse {\n    addrToUse = addr\n}\nif l, err = net.Listen(\"tcp\", addrToUse); err != nil {\n    return fmt.Errorf(\"Unable to listen at %v: %v\", addr, l)\n}\n```\n. Nice!\n. This is where I was suggesting making it slightly more DRY with something like:\ngo\nvar addr string\nif allowRemote {\n    addr = \":\" + strconv.Itoa(tcpAddr.Port)\n} else {\n    addr = tcpAddr.String()\n}\nif l, err = net.Listen(\"tcp\", addr); err != nil {\n    return fmt.Errorf(\"Unable to listen at %v: %v\", addr, l)\n}\n. Also, it seems like the ListenTCP method is maybe a super minor improvement. I'm not a fan of this passing strings as arguments in general TBH, but that would make it something like:\ngo\nif allowRemote {\n    tcpAddr.IP = nil\n}\nif l, err = net.ListenTCP(\"tcp4\", tcpAddr); err != nil {\n    return fmt.Errorf(\"Unable to listen at %v: %v\", tcpAddr, l)\n}\n. Or to avoid mutating the arguments and just create a new TCPAddr\n. This nil check is to guard against Start being called multiple times, correct @uaalto? If so maybe sync.Once is a better choice, as in:\ngo\nonce.Do(start(portToAdvertise))\nwith start as a new private method?\n. Then you could skip the check for nil\n. Why hold the lastPeers variable locally at all? Why not just do:\ngo\nservice.Out <- buildPeersList(peersInfo)\npeersInfo  here is already a copy, so there's no data we're really protecting. You can also eliminate all the locks then too.\n. If we're already calling service.Out <- buildPeersList() every time peers change, do we need to also do it periodically?\n. Personally I would also have the JoinMulticast function just take two function arguments for listening for joins and leaves. That way you could avoid exporting the AddPeerCallback and RemovePeerCallback methods, further limiting the exposed state and mutability of Multicast.\n. You could override it as well with one that takes no args and just passes empty functions...\n. Yeah that's why I was also suggesting adding a separate method that\ninternally would just call the same thing with empty functions. Again not a\nbig deal but to me I just think these various possible states kicking\naround causes issues in the end, and in this case requires the internal\ncode to always check for nil on those functions.\nOn Fri, Jun 26, 2015 at 1:51 PM, Ulysses Aalto notifications@github.com\nwrote:\n\nIn src/github.com/getlantern/flashlight/localdiscovery/localdiscovery.go\nhttps://github.com/getlantern/lantern/pull/2646#discussion_r33394686:\n\n\npanic(\"The \" + messageType + \" service is already registered\")\nreturn\n}\n  +\nvar err error\nservice, err = ui.Register(messageType, nil, func(write func(interface{}) error) error {\nreturn write(buildPeersList())\n})\nif err != nil {\nlog.Errorf(\"Unable to register Local Discovery service: %q\", err)\nreturn\n}\n  +\nmc = multicast.JoinMulticast()\n  +\nmc.AddPeerCallback = func(peer string, peersInfo []multicast.PeerInfo) {\n\n\nThe reason for this design is so the API is simpler if you don't need to\nset any of the callbacks, given that Go has no variable or named arguments.\nIf you require arguments you need to provide them always, and also you have\nto check for documentation to recall the position, while if they are\nassigned to exported members of the struct you see clearly what they mean\nand if you don't add callbacks then there is no clutter.\nOn the other hand, your design forces the user to really think about those\ncallbacks since is forced to provide them.\nI'll change the design then.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2646/files#r33394686.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n. Done!\n. Yeah, I basically just don't see any advantage to making it too short. If there's some unexpected delay with the the proxy starting, this will at least allow Lantern to still run.\n. fixed!\n. Done!\n. Yeah I initially just made the change but then reverted it. In production they'll be the same values, but I think in development the tricky thing is that the commit will continually change, so if you're actually testing using that yaml file like we are for #2608 you might get screwed up if you're development pattern involves committing locally a lot, for example.\nDoes that make sense?\n. Yeah I agree @xiam. Also in production they're always the same regardless.\n. In general I actually think it's better to only make things constants only if they're used multiple times. In theory making something a constant makes it more descriptive, but to me there's nothing more self-documenting than where something like this is actually used in the code itself. As an illustration of that, if this were a constant, I can't imagine ever changing it in the future without also looking at this section of code that actually uses it, in which case it just creates more indirection, would take more time, and IMHO is actually less clear and understandable.\nThat's my view on it, although honestly I actually don't think it's very consequential either way and actually don't care much despite the long description above!\n. Sounds good @xiam thanks for the review!\n. Let's link to https://www.getlantern.org (the https version)!\n. I'm getting an error clicking this one @atavism -- on FB: \"App Not Setup: This app is still in development mode, and you don't have access to it. Switch to a registered test user or ask an app admin for permissions.\"\n. OK, what about skipping both of these deferred close calls and instead defining your closeConns call here and both passing it to pipeData and deferring it here? That would eliminate a tad bit of duplicate code on the closes and I think would accomplish the same thing.\n. Just doing this at the beginning is far better -- don't know why I didn't think of that thanks.\n. This isn't related to your change @uaalto, but don't we need to close clientConn here?\n. OK cool. I think though that we don't want to always wait for both sides to be done because one side being done is one of the main ways the other side knows to finish, i.e. we have to essentially propagate the close to the other side through actually closing that other side. Otherwise I think we could end up with the too many open files issue -- this pipeData code has been rewritten a couple of times to prevent that if you look at the history.\n. OK awesome! I think #2721 is probably more important and hopefully could lead to or even be a fix for #2741, as I think you already mentioned.\n. Exciting stuff!\n. I think that's right yeah but I would just add the closing method to intercept, so something like:\n44     var err error\n 45\n 46     // Hijack underlying connection.\n 47     var clientConn net.Conn\n 48\n 49     var connOut net.Conn\n 50\n 51     // Make sure of closing connections only once\n 52     var closeOnce sync.Once\n 53\n 54     // Force closing if EOF at the request half or error encountered.\n 55     // A bit arbitrary, but it's rather rare now to use half closing\n 56     // as a way to notify server. Most application closes both connections\n 57     // after completed send / receive so that won't cause problem.\n 58     closeConns := func() {\n 59         if clientConn != nil && err := clientConn.Close(); err != nil {\n 60             log.Debugf(\"Error closing the out connection: %s\", err)\n 61         }\n 62         if connOut != nil && err := connOut.Close(); err != nil {\n 63             log.Debugf(\"Error closing the client connection: %s\", err)\n 64         }\n 65     }\n 66\n 67     defer closeOnce.Do(closeConns)\n 68\n 69     if clientConn, _, err = resp.(http.Hijacker).Hijack(); err != nil {\n 70         respondBadGateway(resp, fmt.Sprintf(\"Unable to hijack connection: %s\", err))\n 71         return\n 72     }\n 73\n 74     addr := hostIncludingPort(req, 443)\n 75     // Establish outbound connection.\n 76     d := func(network, addr string) (net.Conn, error) {\n 77         return client.getBalancer().DialQOS(\"tcp\", addr, client.targetQOS(req))\n 78     }\n 79\n 80     if runtime.GOOS == \"android\" || client.ProxyAll {\n 81         connOut, err = d(\"tcp\", addr)\n 82     } else {\n 83         connOut, err = detour.Dialer(d)(\"tcp\", addr)\n 84     }\n 85\n 86     if err != nil {\n 87         respondBadGateway(clientConn, fmt.Sprintf(\"Unable to handle CONNECT request: %s\", err))\n 88         return\n 89     }\n 90\n 91     // Pipe data between the client and the proxy.\n 92     pipeData(clientConn, connOut, req, closeConns)\n. Note the check for nils on the conns..\n. and passing closeConns to pipeData..\n. Because you still need to call it in this block:\n121     // Start piping from client to proxy                                                                         | 15     Label string\n122     go func() {                                                                                                  | 16\n123         if _, err := io.Copy(connOut, clientConn); err != nil {                                                  | 17     // Weight: determines how often this Dialer is used relative to the other\n124             log.Debugf(\"Error piping data from client to proxy: %s\", err)                                        | 18     // Dialers on the balancer.\n125         }                                                                                                        | 19     Weight int\n126         closeOnce.Do(closeConns)                                                                                 | 20\n127     }()\nIt actually should pass the full closeOnce.Do(closeConns) as a func though, so something like:\npipeData(clientConn, connOut, req, func() {closeOnce.Do(closeConns)})\nDoes that make sense or am I missing something? I think you still need to call that from the go routine.\n. Replacing closeOnce.Do(closeConns) with the func call of course, so something like closeFunc() instead.\n. Right -- I'm not suggesting passing the sync.once variable but rather a function that calls it (again pipeData(clientConn, connOut, req, func() {closeOnce.Do(closeConns)})), so that would preserve the sync.once intention. \nYour changes look OK, except that we need to call the closing function if either copy method returns. I believe your change will only reach the deferred func in intercept when the client->proxy copy ends and signal <- true is called. \n. I think you mean !isPlainHostName(host) right @fffw?\n. Oh I see -- they're primarily referring to dots as in \"internet.com\" not as in \"1.1.1.1\" -- looks good.\n. Why wouldn't we want to go directly to any ip address @fffw? Why limit it at all?\n. This isn't related to the PR, but the parentPID wasn't used anymore, so I removed it.\n. Not used.\n. This also actually fixes the bug where users putting Lantern in a directory other than /Applications/Lantern.app would have issues with auto-start.\n. This would try to delete the entire Run key, but that includes values from other apps, so this could easily fail.\n. I guess I'm just thinking it's pretty unlikely users would ever enter those IPs, but I guess you're right that we might as well allow it in the off chance they do try them.\nOK, merging!\n. Yup good idea @uaalto thanks! Just added that in.\n. Right yeah that's the idea @fffw. I added logging on the client side separately. I think those response bodies will actually show a CloudFlare message body, but this will allow us to be sure it's not the 403 we're returning ourselves.\n. I would log this as an error actually\n. I think think should be an Error too --- unlikely to ever happen, but if it does it's concerning I think.\n. Same to me here.\n. I think this should probably be logged as an error too, although I would imagine settings logs it internally most likely.\n. I'm torn about these ones. Maybe error too? I actually think they fail all the time though because enproxy doesn't support these deadline funcs, but it's actually still unclear to me why that's not a real problem (or maybe it actually is a real bug, not sure).\n. Maybe error?\n. Here too?\n. Seems like an error too, although not clear we'd be able to log it.\n. Error here too?\n. This refactoring into a subroutine is not strictly necessary...\n. Getting rid of these convenience functions forces the caller to think a bit more about the response code and error, which I think is good.\n. These are the only two that really should be considered 403 forbidden, but now the message body in the response will tell us much more.\n. The OK status isn't really used in practice, but we need to return something.\n. Teapot!\n. Oh good catch @fffw! I like the idea to do more careful checking in pacOff, but that's a bigger change too.\n. OK @xiam remember the manoto version of 2.0.0-beta8 is just \"2.0.0-beta8\" with no +manoto -- we're only able to add the +manoto to new versions now. I'm not sure how to handle that, though. I honestly don't see a way immediately.\n. Here's a crazy idea: when we get update requests from 2.0.0-beta8 just randomly choose between the two updates to send. If it's the wrong one, theoretically it should fail on the client side, and will just try again later. I'm not actually sure that's true, but it could work if so.\n. We could also weight the random update to choose based roughly on how many of them we're seeing in the field.\n. > We only have one published manoto version for each OS/Arch, right?\nCurrently at https://github.com/getlantern/lantern/releases there's only the single beta 8 release which I believe corresponds with the 2.0.0-beta8 without Manoto. I believe we still need to manually publish the manoto ones correct?\nSo we should instead be checking against p.Checksum here right?\n. Or wait did you already publish the beta8 manoto binaries to a different test releases repo? I forgot about that. That's documented somewhere right?\n. I don't think we want this set by default\n. That's fine too.\n. Hey I agree this should be cleaned up -- I can do that on some other pass @xiam.\n. Perfect! I somehow missed this comment until now, but that's great. I think with the Linux issue it still needs to be 2.0.0+stable and 2.0.0+manoto right?\n. Nice!\n. We want two things here. First, I think it makes sense to make auto-launch the default, especially because users have had trouble finding Lantern once it's installed. Second, we want to reflect whatever the starting state is on startup, as otherwise we won't set the registry setting or plist until the user actually interacts with the UI. Come to think of it, though, that call should be outside of the check for nil -- fixing now.\n. Actually I think the above is what we want after all, as the only other way AutoLaunch should ever get populated is from the user, in which case CreateLaunchFile is called.\n. Oh right -- we can just use its zero value. Makes sense.\n. Yeah I think we should just send the messages directly to Loggly. Panics should be rare enough that we won't be generating much traffic at all, so it won't be conspicuous and will be unlikely to get Loggly blocked. We should also be able to fix panics quickly, which should make them all the more rare. Let's just go direct.\n. I think this should just be an Errorf. If we can't use panicwrap, we definitely want to know that in Loggly, but we also are no worse off than we were before so probably should not exit the program (which itself could well happen before we're able to log the error to Loggly).\n. I'm similarly not sure we should just exit here @uaalto. If we're the parent process, maybe we just log the fact and keep going? What do you think?\n. I don't understand this change. You're making the last few lines of this non-blocking by default unless the caller chooses to block with the returned channel. The previous code blocked, and your new code also chooses to use the returned channel to block. So the effect of this change is that the previous call to this does not block, so Loggly will not be configured when it returns. I'm not sure what the effect of that will be, but presumably some future logging calls may not yet have Loggly configured. \nWhat does this buy us? Configuring Loggly costs basically nothing, so I don't understand why we'd want it to be configured asynchronously.\n. I would just ditch this whole client and pass \"\" for the proxyAdd.\n. So I think this can all just be the following right?\ngo\ncfg, err := config.Init(packageVersion)\nif err != nil {\n    panic(\"Error initializing config\")\n}\nlogging.Configure(\"\", cfg.CloudConfigCA, cfg.InstanceId, version, revisionDate)\nlog.Error(msg)\nlogging.Flush()\n_ = logging.Close()\n. This is really from valencia...\n. This is from valencia too...\n. I'm a little bit concerned about this snippet only because the UI could try to call the analytics service before it's up. That might have also been possible before not sure, and the consequences are probably very minimal, but just wanted to flag it. \n. Nice -- didn't know you could do that <- in one line trick!\n. Actually what will that msg here typically end up being? I'm wondering if we should prepend it with something we can easily search like \"PANIC\" or something. We should definitely add panic searches to support.\n. Right -- I'm not familiar with how it works on the lantern-ui side. Does\nthat only make the call to analytics once the backend sets it up? If so\nthen we're golden.\n. Perfect.\n. It seems like we should include success <- false in all of these cases too right @uaalto?\n. Just using separate IDs for the UI and backend now.\n. We're now using this as the client ID (cid) @atavism. From the discussion here it sounds like the whole cid=555 thing might be the reason we've seen data for a day or so with a lot of these but then somehow have seen that data totally stop.\nI changed this to a version 4 UUID because that's what analytics expects, and there's no reason not to use version 4 for our normal InstanceId.\n. Is this typedef really useful? Looks like it's just used in one place.\n. nit: I think this method can be package-private.\n. I just went back to this approach because it's the only thing we've seen consistently work!\n. Yeah exactly -- that sounds exactly like what I've seen too, both with that last pass with this new ID and with our damn emails.\n. Android supports GetSemanticVersion() too right? Not a big deal since it looks like this is basically demo code, but any reason to leave it out here?\n. Oh maybe it doesn't support GetSemanticVersion() huh?\n. This also doesn't compile right?\n. Oh right whoops -- didn't mean to commit that! Good catch. Yeah I'm also not sure test -race could have caught most of this stuff -- I caught all of these while running.\n. I added them in #2941 but yeah I agree a test would be good. I'll add it.\n. > this could be done independently of the country/ip lookup above, right?\nIt's actually always done independently -- i.e. this code is only currently run on flashlight servers. As far as I know there's only one standard for two letter country codes, so I think we're fine there. The prior lookup, however, also returns codes that are ultimately from the \"Cf-Ipcountry\" header (i.e. they're returned from Flashlight servers that are using that header), so there's no way for them to conflict. \n. I would maybe just make this a little more generic. Since we don't know what the error was at this point, can we just say \"Lantern could not access the server at {{.ServerName}}.\"?\n. Same here in terms of making it generic -- instead of \"Address not found\" maybe \"Error Accessing Page\"?\n. Again here -- \"Error accessing page\" perhaps? We don't know it was because the address wasn't found at this point.\n. Also including this until #2991 is fixed @uaalto \n. GetCountry is unlikely to be populated at the time this is called. You could use the pubsub package along the lines of https://github.com/getlantern/lantern/blob/valencia/src/github.com/getlantern/flashlight/analytics/analytics.go#L28 however.\n. Good point will do!\n. Done!\n. It's actually not checked in anywhere -- it's a newly signed file that I'm keeping out of even private repos for now.\n. This was testing old functionality that's now stripped. This should have been removed in that ticket but somehow slipped through.\n. We don't need a fronted dialer on the server side though do we @fffw?\n. Check out my changes in https://github.com/getlantern/lantern/pull/3073 @fffw\nIt turns out it's not the URL that triggers the 403 but the enproxy headers!\n. I would just delete the comment above probably.\n. Hey yeah I was just fixing that too -- good catch! I did a little refactoring too.\n. Agreed -- will make that change.\n. OK done!\n. So you're saying this will preserve things like user settings that aren't in the cloud config right @fffw?\n. Great catch thanks! I changed that at the last minute -- fixing now.\n. Fixed!\n. Fixing!\n. Oh yeah now with the loop that's a little easier. I did do that intentionally yeah just because we might be able to grab the next for some unknown reason.\n. Will change the log!\n. Done!\n. Done!\n. Yeah it'll actually generally be upper case from jibber_jabber.DetectTerritory()\nWe lower case it in defaultRoundRobin in return defaultRoundRobinForTerritory(strings.ToLower(localeTerritory)) but you're right we really should lowercase it in the method itself -- I'll make that change thanks!\n. yes exactly\n. Feel free to delete mine or just do whatever you like -- I just threw it in\n. We effectively weren't using this anymore before, so this is just cleanup.\n. Don't use fronted servers at all for now.\n. We don't actually use the checked in copy - the copy we built with has that\nline.\nOn Sep 9, 2015 8:25 PM, \"fffw\" notifications@github.com wrote:\n\nIn installer-resources/chained.yaml\nhttps://github.com/getlantern/lantern/pull/3121#discussion_r39121457:\n\n@@ -1,3 +1,4 @@\n+chainedservers:\n\nWithout this line, len(servers.ChainedServers) will always be zero when\nreading from chained.yaml\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3121/files#r39121457.\n. Much clearer - that's been annoying me for awhile!\n. +1\n. The addition of ServerName here definitely does not trigger the use of SNI correct? Just want to make double sure!\n. Just that SNI is theoretically easier to block, although it probably doesn't matter too much in this case.\n. Now we create a new reverse proxy every time, which is unfortunate for connection caching, but we can tackle that later.\n. This is the key change here. Just choose a random dialer from the balancer and use that instead of using the balancers's dial method. This allows us to know what dialer we're using ahead of time in order to set the auth token correctly.\n. Thanks @xiam! I just tweaked things to reuse balancer.Dial a bit more. There's a chicken and egg issue where we need to know which connection we're using before knowing which auth token to put in the request while the reverseproxy requires them in the opposite order. This gets around that by storing the connection and then just returning that existing connection in the dial method.\n\nWhat do you think?\n. Oh good catch! Yeah I'll add handling for that @fffw thanks.\n. Yeah it's an http link in order to make sure we get a trusted dialer @xiam.\n. I bet this could have been from @uaalto's work on making sure to run errcheck. Maybe just do a _, _ := w.Write(p) or something to make errcheck happy @fffw? \n. balancer never touches anything with HTTP -- it just deals with net.Dial and net.Conn @fffw and @uaalto. That was actually part of the difficulty with adding the auth header more generally outside of using CONNECT for everything in chained/dialer.go the way we used to.\n. Yeah good catch\n. All the changes to handler.go basically just revert the previous change to using direct fronting here.\n. For now we go back to just using configs for this version, as the old configs will typically have bad CloudFlare masquerades we can't use and that will cause problems.\n. Use our new chainedAndFronted thing here.\n. Just pulling these out -- an unrelated change but they really shouldn't be updated with every config update...\n. We really don't want to hardcode cloudfront here -- use whatever we have.\n. This is essentially replaced with the StartPolling call. We also don't want to call this on every config change.\n. Just ditching this for now...\n. Don't use fronting if chained is working...\n. This could probably be done better -- just still not that experience with all this =)\n. Yeah that's an interesting idea @fffw. I was also considering using states to clean it up a little bit. I might fiddle a little bit.\n. It's just hard for me to imagine a scenario where we'd actually ever change that using the cloud config, and supporting that option complicates the code quite a bit because then anything using an HTTP client to the localhost has to reconfigure with new configs.\n. removed\n. statserver uses the http client to lookup the IP address of other clients, though, not us. So pubsub won't work I don't think.\n. Hey @fffw yeah I really think we should just have separate settings honestly. Maybe I'll just go ahead and do that.\n. Will do thanks @fffw! I also changed direct.go to just use the first\nconnection that succeeds to keep things simple (there was a bug in the\nprevious where it wouldn't keep filling the connection queue).\nOn Sep 29, 2015 6:50 PM, \"fffw\" notifications@github.com wrote:\n\nIn src/github.com/getlantern/flashlight/util/http.go\nhttps://github.com/getlantern/lantern/pull/3202#discussion_r40751795:\n\n+\n-   cf.fetcher = dual\n-   cf.dual = dual\n-   cf.chained = &chainedFetcher{}\n-   return cf\n  +}\n  +\n  +// ChainedAndFronted fetches HTTP data in parallel using both chained and fronted\n  +// servers.\n  +type chainedAndFronted struct {\n-   fetcher HTTPFetcher\n-   chained HTTPFetcher\n-   dual    HTTPFetcher\n  +}\n  +\n  +// Do will attempt to execute the specified HTTP request using only a chained fetcher\n\nRevise the comment slightly?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3202/files#r40751795.\n. Yup good catch!!\nOn Sep 29, 2015 7:18 PM, \"fffw\" notifications@github.com wrote:\nIn src/github.com/getlantern/flashlight/util/http.go\nhttps://github.com/getlantern/lantern/pull/3202#discussion_r40752987:\n\nvar (\n    log = golog.LoggerFor(\"flashlight.util\")\n+\n-   // This is for doing direct domain fronting if necessary. We store this as\n-   // an instance variable because it caches TLS session configs.\n-   direct  = fronted.NewDirect()\n-   timeout = time.After(60 * time.Second)\n\ntimeout should be a variable instantiated at L98, or it will fire once\nand never again. Or, remove it at all and rely on underlie clients?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3202/files#r40752987.\n. Yeah good point @fffw. We should probably shoot resp to a channel here instead and keep looping, something like that, but for now I'll just leave a comment.\n. Stupidly made timeout external for testing...whoops! :+1: \n. I think they are still used right @fffw?\n. Wait I think those are still also used right? The masqueradesFile and help?\n. Basically the ChainedServerInfo Addr field includes the port, which wasn't the case with the previous IP setting @fffw.\n. This change just makes the generated yaml file actually work on the client side -- without this the client side won't load.\n. Oh good point @fffw. It seems to work for some reason, but let me clarify.\n. Or sorry let me make sure rather =).\n. Yeah it works for whatever reason @fffw -- maybe it looks for colon followed by some whitespace?\n. Awesome @fffw thanks!\n. Certainly possible but looks like it's not in this case (https://github.com/getlantern/lantern/blob/release-2.0.1/src/github.com/getlantern/flashlight/config/config.go#L186)\n. Yeah in theory the caller should really use filepath.Join, though, which seems like it's kind of asking a bit much\n. Yeah exactly..\n. Yeah exactly -- in this case we've already checked that the initial file doesn't exist. Good question though.\n. Yeah that's right @uaalto, although it will actually read the extracted one this time we run Lantern as well as next and subsequent times. Then, when we autoupdate, the new updated binary will have its own embedded lantern.yaml, and we'll use that one.\n. Yeah we totally could get rid of the continues. The _ = is really just there so it passes errcheck @atavism \n. We probably could create a single one outside of the loop, but it would just introduce shared state between the requests with maybe saving a few bytes of memory as far as I can tell. What's the advantage of it being outside of the loop?\n. Yeah that sounds good man -- I'll make that change and will then put it\ninto QA. I am tempted to add a test for that new Do method - might do that\nin the morning. Thanks for reviewing!\nOn Oct 6, 2015 9:09 PM, \"atavism\" notifications@github.com wrote:\nIn src/github.com/getlantern/fronted/direct.go\nhttps://github.com/getlantern/lantern/pull/3239#discussion_r41349787:\n\n@@ -117,6 +117,24 @@ func (d direct) NewDirectHttpClient() http.Client {\n    }\n }\n+// Do continually retries a given request until it succeeds because some fronting providers\n+// will return a 403 for some domains.\n+func (d _direct) Do(req *http.Request) (_http.Response, error) {\n-   for i := 0; i < 6; i++ {\n-       client := d.NewDirectHttpClient()\n-       if resp, err := client.Do(req); err != nil {\n-           log.Errorf(\"Could not complete request %v\", err)\n-           continue\n-       } else if resp.StatusCode > 199 && resp.StatusCode < 400 {\n-           return resp, err\n-       } else {\n-           _ = resp.Body.Close()\n-           continue\n-       }\n\nCool, do we want to just remove those continue statements then? Everything\nelse looks good to me so we can go ahead and merge.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3239/files#r41349787.\n. Does 1.4.3 change how LDFLAGS are interpretted @uaalto?\n. Oh never mind -- saw your comment.\n. Good question. I guess they're only used in the UI correct? I don't see much harm in writing them to the file, but I could also probably add an easy comment/tag that would remove them. Is that what you're suggesting?\n. I figured it wasn't a big deal for a panic, but I just added it anyway since I changed the settings.Load call to be in init (so it now has it when it gets here). Thanks @fffw good catch.\n. Interesting. Which article @fffw? I was going to make a little change to make this code more straightforward actually -- another PR coming soon.\n. It actually seems like this shouldn't be stored in settings at all @uaalto since it should never change and since we don't even really want to store it to disk independently from the OS. It seems to me that we should remove InstanceID from the setting struct entirely and just have GetInstanceId be return base64.StdEncoding.EncodeToString(uuid.NodeID())\n. This line is actually a critical fix @fffw\n. It looks like it's possible to never get here based on https://github.com/getlantern/lantern/pull/3433/files#diff-e149e4a7348208a557074a227404c192R157 -- i.e. with the candidatesCh repopulated with candidates that will always be re-added\n. well just mean we'd have a dangling go routine. not a huge problem i suppose.\n. True! Ok I just realized only cloudfront was disabled from the peerscanner tests. I'm just going to disable all of it directly on this branch to get this PR pipeline moving..\n. Yeah so the big problem with this change @oxtoacart is people using things like SwitchySharp and SwitchyOmega who know to set it to use Lantern on 8787. That's a really common use case. This also disables people setting local network devices to run through 8787 on Lantern running on another machine.\n. We could try 8787 and then use a random port if we can't bind... We should probably at least support running on 0.0.0.0 if the user specifies it from the command line though (even though I believe that's broken on the current valencia).\n. Looks like this isn't used publicly at all @oxtoacart -- just kill it?\n. So I believe this will re-queue a request as long as there's not a current one in-flight correct? In practice we only call Refresh once on startup AFAICT, and I'm not sure the existing behavior is necessarily wrong but maybe just not super intuitive (i.e. what are we really trying to do here? call this once? call it if an existing call isn't in flight?)\n. So chainedAndFronted contains logic that will make it only use chained servers if they've succeeded on a previous call. If we create new one each time, though, that won't work.\n. Any reason not to just make the wait time here 0 @oxtoacart? Seems like waiting at all just introduces an unnecessary delay.\n. It seem like it would be more straightforward to keep all the balancer state local to balancer.go @oxtoacart?\n. What about just moving these lines to balancer but keeping client.bal where it is @oxtoacart? The state is the same in both cases, right, just a matter of what file it's in? I think the two separate places where some sort of balancer init happens feels odd to me more than where the variable itself lives, but not a huge deal.\n. Nice yeah just seems a little clearer to me. I also wouldn't be at all opposed to just moving all the code from client/balancer.go into client/client.go, which to me might the least confusing of all, but whatever you think.\n. Oh here too re-creating chained and fronted each time will lose its internal state that will only use direct chained proxies if they're working @oxtoacart.\n. nit: typo determin -> determine\n. Nice way to do it!\n. Is there another release build in addition to building with the debug SDK? Or do we always want debug for some reason @oxtoacart?\n. @oxtoacart what calls Start in desktop Lantern? Or is that part in another PR?\n. Ahh you're saying because the candidateChCh <- candidateCh call will block if Configure sneaks in there and adds it's own channel, is that right? I guess we could also just throw it on a go routine and/or make candidateChCh a little bigger so it would never really happen in practice.\n\nTBC, what value are you suggesting we make an atomic.Value @oxtoacart?\n. > BTW, the problem with putting candidateCh back on the candidateChCh is that you'll end up with two versions of candidateCh on candidateChCh after Configure() is called a second time (because candidateChCh is sized to 1). After a 3rd call to Configure(), either Configure() or Dial() will get deadlocked because the channel is full at that point.\nYeah that's what I was saying about that candidateChCh <- candidateCh line blocking.\nThe big problem with the atomic.Value, though, goes back to the original race issue, i.e. if Dial reads it before Configure is called, then candidateCh will be empty and never populated (it will be replaced with a new one when Configure is called, but Dial will be none the wiser).\nI just committed your select change. I like that a little better than the straight blocking channel because AFAICT in the case of multiple Configure calls we'd be building up a bunch of chans in the queue that we will never need (since we only care about the latest from Configure) as well as building up a bunch of go routines with a goroutine call that executes candidateChCh <- candidateCh\nAnyway, what do you think of the code now?\n. Why do you need to create a new result here @oxtoacart?\n. For this I'd be tempted to skip all the custom SDK stuff and just use whatever go you've got on your path. You just trying to make it consistent with real builds @oxtoacart?\n. What is the issue on 1.6 again @oxtoacart? Would ditching the custom SDK path hell?\n. Nice catch!! You caught that while profiling @oxtoacart?\n. Oh you caught it here...I see @oxtoacart!\n. A bit of a nit, but do we really need a separate method here @oxtoacart? I'm just thinking we probably only ever want to set it in Configure, but creating the separate method implicitly sort of encourages other code to call it. \n. Why not just let the update service URL specify the full path always @xiam?\n. It still seems like it would be better to control all of that on the server side, though, since then we could make it whatever we want always. It's a really minor point, though -- merging!\n. That works. One sec.\n. OK changed to UUID!\n. Do we not want to log to Loggly in the service case @oxtoacart? I can definitely see not doing it, but want to make sure that's intentional.\n. Yeah I'm guess I'm asking the opposite: do we also want to log to Loggly for the service version?\n. Oh I see - I missed that! Cool thanks @oxtoacart.\n. I think that would probably be wise @xiam, as we also want to push out valencia ASAP so we can get back to pro, so we probably want to keep all pieces as stable as possible (i.e. this isn't on the critical path for release).\nI would argue we ideally would have our dev environments be as close as possible to production to essentially get free QA, but I don't feel strongly about docker versus local dev environment at first glance.\n. Yeah I think we might as well just keep it around. We could always publish it with releases to see if anyone plays with it.\n. I'm guessing you just created your branch before that change was merged into valencia yesterday @oxtoacart, but not to worry.\n. AFAICT this is the only actual change here to the PAC other than whitespace right @oxtoacart? ui.lantern.io is still over HTTP, so why is this change necessary?\n. Wait, but the new version doesn't have this right @oxtoacart:\n// Lantern desktop version proxies only http and https\n            if (url.substring(0, 4) != 'http') {\n                return \"DIRECT\";\n            }\n. so this is basically back to the manual assets generation @oxtoacart right? i.e. whenever someone changes the ui, they need to run this? i don't dislike that necessarily, but just making sure.\n. Right but you changed that on the current valencia to just run every time if I'm not mistaken @oxtoacart no? I don't honestly have a huge preference either way.\n. Ha nice! OK I'm cool with all this. Any objections @xiam?\n. Nice catch and great you added main to testpackages!\n. This all looks good @oxtoacart. I'm wondering here about UDP, and this is also a question for @xiam and @atavism. Basically, udpgw will handle all UDP traffic not just DNS, correct? So in this case, for example, a users' phone sends UDP traffic destined for Google on port 19302. Will the local client successfully tunnel all that traffic over TCP and then HTTP CONNECT to hit the local udpgw server on 127.0.0.1 on the proxies? And then udpgw will successfully ferry traffic in both directions for the duration of the call? Does that sound right? Does anyone know if that's actually what happens in practice in addition to in theory? Any idea if udpgw can scale to handle significant numbers of calls if a lot of users started doing this?\nJust wanted to walk through that together, as it's one of the more complex and less obvious parts of our architecture!\n. My one thought here @oxtoacart is testability. This class is one of our worst offenders in terms of test coverage (https://coveralls.io/builds/5259682), partly because handler_test.go I don't think actually tests anything in handler.go! A simple step would be to make this a separate sendToProxy(req *http.Request) (bool, error) method, something like that, which would be very easy to also write a test for. If you wanted to take that further, making handler_test.go really hit ServeHTTP would be pretty sweet, but we could also leave that for now.\n. Yeah that's fine @oxtoacart!\n. I partly asked because I think ports 19302, 19303, and 19304 are UDP-only. I think we want to include them here for the above reason, but I just want to synchronize our mental maps of how all this works!\n. Looking good just a spelling issue with sercePACFile\n. It strikes me we should be adding content-length her, but maybe the go HTTP internals do that automatically?\n. Nice catch!\n. Ah true. A little unfortunate that's required even when just running locally, but that's a different issue! I'll remove that version.\n. Oh sorry -- committed docker-test by mistake. Will fix!\n. I was actually just trying to make everything compatible with the prior README, which included the make docker step that no longer worked. With just make lantern we can eliminate that step, however.\n. It's definitely stripped before our Director function is called right @oxtoacart?\n. What's the thought behind removing this @xiam? \n. Why do you want to switch all these names to using underscores @xiam?\n. Yeah just wondering again the reason for all these name changes @xiam..\n. Yeah ideally we'd put it somewhere else, but we do ideally only want to report them when there's an actual pageview and not on every click. That said, it's just recording a page view so won't impact unique users, which is the more important stat, so I wouldn't worry too much about it.\nIt looks like your version is the same as the previous except the name change though right @xiam?\n. Yeah I kind of want to ditch getlantern in general honestly and to move everything to just lantern -- it confuses people constantly!\n. Yeah given that it's a separate library outside of our Android app that sounds good to me @oxtoacart and @atavism \n. Just one less thing to change if we make the jump, which I was actually just thinking about earlier today...\n. Right, but we still use proxied sites as a general thing in Lantern @xiam! This change makes it so those aren't configured from the cloud config. \n. yeah it seems like camel case is overall the most widely used standard for js (see, for example, http://www.w3schools.com/js/js_conventions.asp and https://google.github.io/styleguide/javascriptguide.xml), which I'm a little surprised Go doesn't just automatically convert to, but it also looks like on the frontend in a lot of cases you're converting from camel case to using underscores (https://github.com/getlantern/lantern/pull/3788/files#diff-8a1026309248e12a3231dfa77eb4755eR81), and there are only a few places where we actually have caps at the beginning. Not a huge deal, but just seems like a lot of code to change when in most cases we're actually moving to a less standard naming scheme!\n. Well, I'm guessing the original idea was that if a user had previously not had tracking on but just turned it on, then we should track a pageview\n. This was unused.\n. moved to new fetcher..\n. Just cleaning up some things the linter flagged...\n. This one is interesting. It seems like whenever we want to apply the defaults we also want client defaults. Unless we add Client to config, though, we won't get those. I didn't have any immediate reason for this other than it repeatedly tripping up tests, but it just seems like what we want here.\n. Moved this. Previously, if cfg.Client was nil, this would create a panic. Moved to within applyClientDefaults along with everything else that changes the client defaults.\n. linter...\n. It's passing the funcs not the values. We then only pass the headers if the values are populated. See https://github.com/getlantern/lantern/pull/3806/files#diff-09edfa285ec7a6c867e5d7471691800aR105\n. Yeah good idea -- done!\n. Yup I think you're exactly right @oxtoacart! Good point.\n. We'll only have those values if the user is pro AFAIK, so it will have to work without them for free (and does since we don't currently pass them in free).\n. The user ID is interesting though -- that's assigned by the pro server, is that correct @xiam? Does it also assign it to free users? Regardless it will get sent up whenever it's populated @oxtoacart, but we could trigger it too.\n. Adding @uaalto and @atavism too to make sure we're on the same page\n. hmnn...ok I'll look at that @oxtoacart great catch.\n. Adding this @oxtoacart to make sure our tests catch issues with breaking liblantern\n. Including your suggested change on the proxied sites config here @oxtoacart, as this will at least ensure we use the client-configured proxied sites initially.\n. Maybe Fatalf is extreme here @oxtoacart?\n. What's this change do @oxtoacart?\n. minor nit, but this seems like a good place to use an anonymous member of the struct, i.e. sync.RWMutex versus mutex sync.RWMutex and buf.Lock() versus buf.mutex.Lock()\n. What does our version of testify buy us here?\n. Here too?\n. Why do we use it in a bunch of other places? What does it add there?\n. I just realized this is just a test too -- all good!\n. Cool looks good @oxtoacart \n. The linter flagged this...\n. Linter...\n. Linter...\n. Linter again\n. Primary change along with the switch to just return the function in chained/dialer.go\n. Wait @oxtoacart you intended to change these all to \"github.com/getlantern/testify/assert\" right?\n. Yeah seems like there's something odd happening. I'm also somehow not able to even isolate pluggable_transports.go in this diff @oxtoacart, although I think that's my own fault with the too many files issue...\n. I feel like defaultDialFactory could just use a clarifying comment specifying, for example, that it's just a normal HTTP chained proxy or something along those lines @oxtoacart.\n. I know this is not new, but I think we should probably make sure to log an error when there's an issue decoding the cert here. That's popped up a few times in production, and it's taken awhile to notice I think partly because it's not appearing in logs @oxtoacart.\n. Maybe just a comment about why we pass the empty string here? Looks like that string's not even used on the obfs4 side @oxtoacart?\n. Nice @fffw.\n. nice!!!\n. Minor nit, and this is only related to this PR in the sense that with pluggable transports there's more for the code reader to think about, but I think a comment for deviceID would be helpful here @oxtoacart -- i.e. make it clear it's not related to pluggable transports at all but just identifies this device to the server.\n. Weird it wants to add this file back in @oxtoacart -- this was deleted on devel\n. Nice so this change just formats all packages in testpackages for -coverpkg to understand is that right @oxtoacart?\n. shouldn't this be onerror instead of on-error @fffw? Or are they equivalent?\n. on-error doesn't seem to work in the example at http://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_onerror\n. then again, there could be something about angular directives I'm not grasping\n. Is our context ever changing here? If it ever is, then we don't want to cache trackers and return the one for prior contexts. We could alternatively include a map of contexts->trackers, but how expensive are trackers really? Would it make more sense to just create a new one each time?\n. Also, it seems like ideally we'd adapt the code in https://github.com/getlantern/lantern/blob/devel/MobileSDK/sdk/src/main/java/org/lantern/mobilesdk/Lantern.java to be reusable for this @atavism. What do you think @oxtoacart?\n. Sounds good on the application context @atavism. With the mobile SDK code, we are creating two analytics objects for the same tracking ID now though right or no? Seems like that could create some confusing data if so.\n. Like maybe make StartResult also include the Tracker or something:\nhttps://github.com/getlantern/lantern/blob/devel/MobileSDK/sdk/src/main/java/org/lantern/mobilesdk/StartResult.java\n. OK it's not a huge issue @atavism, especially if trackers definitely don't do anything until you tell them to, but just seemed like we could make it a little cleaner.\nThe other refactoring I can imagine would be to pass an analytics object into the SDK with another method. If the SDK gets that, then it would just use it instead.\n. My only thought here was to just use a.ShowUI and avoid redoing this logic\n. Seems like we could just again use a.ShowUI here\n. Sorry lots of linter comments... I think this should be \"Package\" not \"package\"\n. Comment on public func?\n. Comment on public struct?\n. Comment on public func?\n. Comment on public func?\n. Should be \"Exit\"\n. Why do we need this blank pprof import @oxtoacart?\n. I think you have to actually call the returned func here @oxtoacart, as in _main(a)()\n. Another nit - seems like pulling app.Flags[\"uiaddr\"].(string) out into a local variable is a little cleaner since we use it 3 times. Once in code plus a comment seems ok to me, but twice in code seems like too much. Not a big deal though.\n. Is this still supposed to return the tokens here @oxtoacart?\n. Looks like we can just scrap the return value...surprised go let's that compile actually...\n. It also seems like theoretically we should have locking on s.dialers no? I guess Push and Pop aren't called much in practice, but if they were it seems like we'd have a bunch of race issues @oxtoacart (not specific to this PR other than the introduction of iterating in a pretty heavily used portion of the code)\n. Yeah that was the original design. I could go either way @fffw. The other thing I was playing with was actually including the links in the translated version but didn't quite get it working.\n. Just use a string instead of an int since the int makes use do so many convoluted things for little to no gain.\n. Much simpler with a string\n. Linter wanted a comment\n. Linter again\n. We were shadowing the err variable here.\n. Shadowing again.\n. Heart of the fix. Just send in the string if it's there without worrying about conversions.\n. shadowing\n. No @fffw, just that we need \"Facebook\", \"GitHub\", and \"Forums\" to actually link to those places, but we're linking from translated text.\n. Sounds like maybe we should keep it then? Very odd it could sometimes take so long. Is your proxy generally slow at times when you've seen it take a long time to load the feed?\n. Honestly I think there are also cleaner ways to do it with angular translate but maybe I'm wrong @fffw. I actually thought your $sce.trustAsHtml from services.js might do the trick no?\n. I don't think we want this @fffw, as this is a very common issue with the system proxy on or off -- i.e. some issue with extensions right?\n. Oh hey sorry I misread this @fffw -- looks good!\n. What about other connectivity types here @atavism? Like TYPE_ETHERNET or even TYPE_MOBILE?\n. Since this relies on external data, maybe just make sure entry.Title isn't null here @atavism like you were before?\n. Also would be useful to log an error here if we are trying to find a feed that's not in the map (would again indicate a pretty big issue with the feed).\n. Should probably log an error in the above case too!\n. OK I think that makes sense @atavism \n. Yeah basically the two regions where the feed we want differs from the locale are Iran and Malaysia. Everywhere else the locale should signify the feed we want to show. Right now I don't think we have a Malaysia feed though right @xiam?\n. In Iran's case, since some people do have Farsi set on their systems, we probably want to keep supporting that as well. So I think just normalizing on the full locale is probably ok.\n. OK @atavism I just added support for that within GetFeedURL and also added support for Malay when we detect the user's in Malaysia.\n. Doesn't this still need to be a synchronized list @atavism?\n. I believe you need to separately synchronize clear and addAll here @atavism.\n. Or potentially use a copyOnWriteArrayList\n. Ah cool I see that now - nice @atavism.\n. This is called automatically by the JSON parser or something @atavism is that right?\n. I'm worried about the feedName being potentially null or \"\" here @atavism. Is that possible?\nAlso, a unit test would be pretty amazing here.\n. Seems like a private class would make more sense here @atavism -- i.e. I don't think we're ever going to subclass this and nothing else in this package will use it, or maybe more precisely I don't think we want to allow either of those to happen.\n. Yeah I'm worried here about the feed name never getting set. Ideally to me this would be an invariant of the class -- i.e. make feedName final and check any arguments assigning it for validity.\n. And ditch setFeedName if possible -- make it immutable.\n. Ha yes good catch -- fixed!\n. Good point. That analytics code doesn't actually run on Android but we\nshould guard against it.\nOn May 3, 2016 8:18 PM, \"fffw\" notifications@github.com wrote:\n\nIn src/github.com/getlantern/flashlight/analytics/analytics.go\nhttps://github.com/getlantern/lantern/pull/4199#discussion_r61986708:\n\n// This forces the recording of the session duration. It must be either\n// \"start\" or \"end\". See:\n// https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters\nvals.Add(\"sc\", sc)\nreturn vals.Encode()\n}\n-func endSession(ip string, version string, proxyAddrFN eventual.Getter, clientId string) {\n-   args := sessionVals(ip, version, clientId, \"end\")\n  +// GetExecutableHash returns the hash of the currently running executable.\n  +// If there's an error getting the hash, this returns\n  +func getExecutableHash() string {\n-   if lanternPath, err := osext.Executable(); err != nil {\n\nOh actually Android is Linux, but I don't know what it will get because\nLantern is not an executable on Android.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/4199/files/18d2e39a813e04901f2eda3361fdf383c732675b#r61986708\n. Yeah that makes sense. I think arguably that should be covered in the tests for eventual itself, but no harm in adding it here. I'll do it!\n. We used to not report any analytics if we couldn't resolve the IP, which doesn't really make sense because there's lots of other useful info to report. So now we just keep going and don't report the IP if we don't know it.\n. This is just for testability\n. Here's the change to test that setting the user agent asynchronously works fine @uaalto \n. No need passing the whole config when we just need a string -- makes testing easier.\n. Just return matcher.matches() and skip the isValid variable?\n. Also you can just feed email in here without creating inputStr since strings are immutable in java.\n. Does anything call setTitle? If not, can we just make mTitle and mIcon final? I like the m prefix btw -- old school baby!\n. This will make it's way to loggly is that right @atavism?\n. So wait, this happens when the user approves VPN mode is that right (the else block)? What's calling disable on Lantern do in that case? Disables the non-VPN version?\n. Or maybe it's not old school in Android land? Interesting.\n. Do we need to make sure menuMap.get(title) doesn't return null here? And maybe log an error if it ever does as well as if mNavItems.get(position) ever returns null above that?\n. Looks like removeRule was only added in API level 17? Do we want to make that the minimum we support instead of 15?\n. I'm only seeing GravityCompat.START here for some reason @atavism \n. For some reason I had to change this to\n\nresourcePackageName \"\"\nto get it to run on my device from Android Studio @atavism \n. Nice that worked @atavism \n. Yeah I'm still not seeing Gravity.START as existing\n. Although the app is running...\n. Hey not related to this PR @atavism but seems like we should be calling super.onCreate() here technically.\n. Seems like you technically want this to be title here @atavism, or remove the title parameter.\n. Just noticed this @atavism and went ahead and committed it.\n. This is a whitespace change except for the above two lines. These just separate the ng-controller div from the inner div (seems to be a good practice to separate the ng-show logic, for example, from the logic of the controller) but more importantly just adds the !showBookmarks line here to make sure we don't show the bookmarks if we're showing the error.\n. Nice.\n. Oh nice catch @oxtoacart!\n. This looks fine @oxtoacart. I know it's not a part of this PR, but it does seem like just storing the whole URL without a separate noCache state would make more sense (just store pacURL with the query string in the atomic value) just to eliminate an extra variable, but not a huge deal.\n. All looking great @oxtoacart just wondering on this change. The interface makes it more testable, and hey the Go best practices post even explicitly recommends it!\n. Cool. I don't love the laziness aspect of this in the sense that there's nothing we're really saving (creating the HTTPClient is super cheap), but the fact the ChainedNonPersistent can return an error makes a solution unclear. To me it would be significantly nicer if we could just say _httpClient     = getHTTPClient() at the beginning and skip all of this, but that would require something like calling getProxyAddr once at startup in proxied.go and then just always using that, failing fast potentially just at startup if that ever fails. That should never fail, though, since it's just the proxy listening at 127.\n. Yeah I actually think the Fetcher (maybe there's a better name) adds a lot to testability. Is there anywhere we call anything but Do on that client? If not then to me the interface is the clear winner. If we do call something else on it, that might indicate the code there is too tightly coupled.\nMaybe \"HTTPDoer\" straight from that article like:\ntype HTTPDoer interface {\n    Do(*http.Request) (*http.Response, error)\n}\n. It does seem like a separate unit test for the cache could be useful @oxtoacart \n. Definitely +1 on the timer approach to saving here.\n. This is actually kind of amazing that just calling RoundTrip essentially in place of Do accomplishes the same thing. We don't technically need the HTTP client itself at all here - nice!\n. Technically redundant to set this to nil. Maybe just a comment to that effect?\n. Looks like CloseCache is both defined here and in direct.go -- actually surprised that compiles and not sure which one it uses!\n. The above change to the http error handling doesn't change anything correct? Maybe unnecessary?\n. Oh, also, it looks like CloseCache is only actually called on startup, which is maybe OK but only if it's trying to prevent multiple calls to Configure resulting in multiple cache filling go routines AFAICT. Also doesn't need to be public - can be closeCache\n. Or at least enhance this test to test that it's actually loading the masquerades from disk on a second run @oxtoacart?\n. Ah sorry I think I was looking at an old version of direct.go\n. Cool but also just the assigning it to nil is redundant - minor nit of course!\n. Oh wow nice catch!\n. I would actually be tempted to remove this cacheFile as a variable as well -- i.e. just pass it to initCaching and don't store it @oxtoacart -- just again limiting the state if we don't need it.\n. The settings variable used to have issues with shadowing.\n. We don't need the device ID when reporting a panic, and the previous code went out of its way to get a config just for that purpose.\n. Just keep this variable local now to avoid shadowing issues and generally confusing code.\n. Just store the proxyAll function in the struct instead of re-configuring the value every time the config changes. Eliminates threading issues as well as simplifies the code.\n. Don't need to store this atomically any more, as it never changes.\n. Linter\n. Linter\n. Linter\n. Just generate the device ID here on mobile...actually tempting to do something like that on desktop but the current should work fine...\n. Because it set the device ID in the ClientConfig, which doesn't exist anymore. That's the one thing we lose with this change -- the server can no longer set the device ID. My thought was to add that if we ever need it @xiam.\n. It's actually just the device ID and not the pro token @atavism \n. I switched this to cast it to an int @xiam, as using float64 made the tests fail. What was the thought behind float64 versus int?\n. If we really want it to be a float64, I think we need it to be float64 everywhere.\n. Definitely works in the tests while float64 doesn't (unless of course we actually put a float64 in the map) -- just depends what we put in. AFAIK the value will just be unmarshalled into whatever it actually is.\n. If the server is always using 64 bit ints, though, I believe we'll have a problem on 32 bit systems and should probably just use strings all the way through. What's the server using exactly @uaalto?\n. Right -- that would only happen if actually sent 12.14 somewhere as the user ID, which would cause all sorts of other problems @xiam. It would fail for invalid user IDs.\n. We should really be using the configured server here rather than the default -- made this a method of the struct accordingly.\n. This actually just knocks out https://github.com/getlantern/lantern/issues/4357 while we're in here.\n. Just a slightly clearer, if longer, name.\n. Start polling on the actual config instance.\n. Yeah just removed it @oxtoacart -- I think that client-reported error isn't possible with what's on devel actually!\n. Good catch should be all set!\n. That from when I started using the chained URL in the config, so it was necessary @oxtoacart. I'll change it back now that there's no chained URL in the config though.\n. Make sure we also allow our extension as an origin.\n. Definitely @oxtoacart thanks!\n. Nice!\n. Can you throw the format we're parsing in a comment here @oxtoacart?\n. A test would also be ideal but i realize it's late in the game\n. Since we throw this away when the channel is full, @oxtoacart, I wonder if it might be cleaner to just create a new Quota here and not worry about the locking and reusing an existing one.\n. I realize we use it in GetQuota, but I think we can also just skip the hello function, which is the only place that's used @oxtoacart\n. Seems like we should be able to skip both of the above to me. If we do really want the hello function, couldn't we just fetch the data from the channel there as well?\n. Great catch @oxtoacart makes total sense.\n. It seems like this might make sense to add whether or not the connection is specified as persistent @oxtoacart. I believe DisableKeepAlives essentially specifies whether or not to include the Connection: close header, but it's also always possible some server or client along the line doesn't work like it's supposed to.\n. It strikes me that we should probably be using TLS session caching here too @oxtoacart no? Not related to this PR of course, but just snooping.\n. I'm just saying that persistent flag to the chained method just specifies whether or not to set DisableKeepAlives in the http.Transport. The effectively governs whether or not the transport will add the Connection: close header. \nAll I'm saying is I'm not sure the inclusion or lack of Connection: close (the if persistent) makes sense as the criteria for deciding whether or not to set a max idle time. It seems like we might just want to always set it.\n. Oh right -- I keep swapping those in my head!\n. Oh cool OK makes sense @oxtoacart! That actually answers some of my other questions about other places that use DisableKeepAlives -- all good.\n. Just commenting here, but do we really want to hold on to closeMutex for the entire read? That looks like it will make simultaneous reads and writes impossible. Maybe a comment on closeMutex specifying what exactly it's protecting (presumably closed but if that's the case I would probably put the lock in checkClosed)\n. Right good point @oxtoacart -- I had mixed those up.\n. Oh sorry @oxtoacart RLock allows an arbitrary number of readers -- looks ok.\n. It is very tempting to move the locking into checkClosed for a lot of those methods though @oxtoacart...\n. Why do we need to lock here? We're not reading or writing from closed in this call right?\n. I would probably add a safeguard here in case l.onIdle == nil @oxtoacart, as in:\nelse {\n   onIdle = func() {}\n}\nOtherwise if anything inside Conn fails to check for nil it'll panic!\n. idletiming_conn does check for nil in this case, but to me I generally prefer empty functions to relying on nil checks, as it'll still work if something changes.\n. That makes sense @oxtoacart. Can you add a comment to that effect to closeMutex for future readers of the code?\n. Really? I was fully ready to take the hit!\n. Yup that works @oxtoacart\n. Much better!\n. With the new UI we won't need node or npm at all from the Makefile @oxtoacart, but we can handle that in the merge.\n. Where in the previous code are connections leaking @oxtoacart?\n. Wait sorry but what's bad about not closing the connection until both reading and writing are done? Why would we want to close them before they're done or before the idle timeout @oxtoacart?\n. Gotcha @oxtoacart. OK the code looks fine to me. Merging!\n. I just moved this here since it caused some clumsy code and because it doesn't seem likely we'll change this via config versus auto-updates\n. linter\n. Shouldn't need locking with the new channel approach.\n. moved this here to make it more of a general utility method\n. Only try the global config once a day.\n. This now just fetches the global config.\n. separate tarfs file with proxies\n. Yeah those were just copied and pasted, but I agree and will simplify!\n. I think it still makes sense to protect update URL with a mutex -- fix coming @fffw\n. Yup I like it - I'll make that change.\n. Nice. I misread this the first time. LGTM @fffw.\n. The only thing is that the dialer picking is weighted right? So it's quite likely it will pick the same dialer over and over again, likely using up all dialAttempts quite quickly. Is that correct? \nIt's almost like as soon as we see a single failure we want to switch modes and dial several simultaneously or something like that.\n. Like whenever there's a failure, we kind of reset and dial all simultaneously. Whichever connects first is the new default dialer.\nI know that's a totally different approach, but TBH I'm not a huge fan of the weighted balancer stuff because it means we'll always sometimes try to connect to a potentially really slow proxy. If that's a key CSS file or something, it will completely slow down the page loading (could actually be a reason why users say pro is slow).\nI basically don't think the concept of a \"balancer\" is really what we want.\n. That said, I think this is clearly an improvement, and I'll go ahead and merge it. We can open other tickets if necessary, but what do you think about the above assessment? Also curious about your thoughts on this @oxtoacart. I'm basically worried about users in China, for example, getting unlucky when the balancer chooses to load some key css file from Amsterdam. That would definitely result in the page appearing slow, and much slower than in free!\n. @oxtoacart it strikes me that at least for sampling purposes we don't care about the correlation of this device ID with the device ID elsewhere in the app -- i.e. we could just use uuid.NodeID() directly here and skip decoding. The only reason I mention it is things might get weird if for some reason the encoding changed without realizing there's an assumption about the encoding here.\nAdditionally, though, I do wonder about storing the device ID from a data retention perspective. Are we really using it at all? If not, I'd be tempted to also remove that from the data we store.\n. Would be pretty easy just to write a quick unit test for this too @oxtoacart \n. Cool! I didn't know assert.Regexp existed.\n. Actually on the unit testing note @oxtoacart I think logging.go and errors.go are the #1 and #2 files in terms of lines not covered by tests. Looking at https://coveralls.io/builds/7207505/source?filename=src%2Fgithub.com%2Fgetlantern%2Fflashlight%2Flogging%2Flogging.go, it seems like things like EnableFileLogging and initContext would be pretty quick wins in terms of just adding potentially pretty trivial tests.\nI know the tls proxy stuff and also just getting this in today (actually I think getting a version out today is probably even more important than tlsproxy ATM) are super high priority, but just noticed that while you're in the area we might be able to take another bite out of the untested lines in coverage.\n. OK cool -- that's fine with me.\n. Nice catch @oxtoacart!\n. Yeah that's cool. I might consider removing all those intervals from the config in that case since they won't do anything but not a biggie\n. Oh right good point @oxtoacart -- cool.\n. OK sounds good. \n. Actually @aranhoide this one is interesting -- I wonder if that could be causing any issues on the server side generation? I don't think any go files are used there, but maybe worth a look.\n. ",
    "ghostdance": "@leahxschmidt Mine isn't the most critical eye at this point, but the miniupnp stuff looks good to me. After merging @myleshorton's recent fixes for Ubuntu into this branch, lantern behaves just as it did before behind a UPnP IGD.\n. One question, though, @leahxschmidt: Why does lantern seem to do an extra IGD scan on shutdown? I think this behavior is the same in master, with the old UPnP library, but I was curious what the reason might be.\n. That's what I suspected. It doesn't matter. I was only curious.\n. I would say, after digging through the Netty channel handlers and related stuff the last couple of days, that adding parameters to the constructors for classes implementing PeerProxyManager might be worth a rethink. \nIt's hard to get one's head around what these things do when there are 10+ arguments coming into the constructor. Perhaps there's a way to bundle these into some sort of context object?\nI know @aranhoide is looking over this, but I saw the discussion and thought this small item might be relevant.\nEDIT: I misspoke. Looks like the parameters here max out at 8 or 9. But I still think reducing that is worth considering.\n. @myleshorton: The certs are now imported properly for me (changed getName to getAbsolutePath), but the Yahoo! cert is still not being verified. The Google cert appears to work now.\n. @myleshorton This looks good. The \"connection refused\" errors are happening on master, so, not related to this work (tracking in #560).\n. ",
    "leahxschmidt": "I think it does it to find the IGDs to remove the mappings from.  I guess\nit could save the IGDs instead.  Does it matter?\nOn Mon, Jan 28, 2013 at 11:36 AM, ghostdance notifications@github.comwrote:\n\nOne question, though, @leahxschmidt https://github.com/leahxschmidt:\nWhy does lantern seem to do an extra IGD scan on shutdown? I think this\nbehavior is the same in master, with the old UPnP library, but I was\ncurious what the reason might be.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/514#issuecomment-12790505.\n. Sure.\n. Where is the \"here\" that addProxyWithChecks should be moved to?  Do you mean move it to ProxyQueue?\n. That turned out to have some complexity.  I just pushed a commit which does\nthat checking.  Let me know what you think.\n\nBTW, I didn't end up writing tests for this, because the code is actually\nrather difficult to test.  I couldn't see a straightforward way of creating\nand destroying proxies for testing purposes.  Maybe I'm missing something?\nOn Fri, Apr 12, 2013 at 3:40 PM, myleshorton notifications@github.comwrote:\n\nBy the way I think this all generally looks good as long as we check the\nconnectivity of those proxies before adding them back to the list.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16313376\n.\n. I started splitting things out into ProxyChecker, but it didn't seem to make the code any cleaner; in fact, I think it made things worse.  I agree that the circular dependency between ProxyQueue and DefaultProxyTracker is not optimal, but if we add a ProxyChecker, that only makes things worse, since it either needs to use the Event system, or it has a circular dependency with DefaultProxyTracker.   And even with events, there is still weirdness about the fallback proxies, and it's really a giant mess.  I have not yet been able to come up with a truly clean design.  I can mess with it more, but I don't think it's worth it.  \n\nI did make that change to use ProxyTracker instead of DefaultProxyTracker.\nI'll ticket the testing piece.\n. That's an excellent idea!  it's maybe a tiny bit more repetition, but that is worth it to eliminate the dependency.\n. OK, @myleshorton, I've put in a pull request on lantern-controller for the changes related to 5ba86b9.  And I think this branch is generally ready to merge, once those controller changes go live.  Any objections?\n. Indeed, most of what I did was not going to be easy to test, since turning\nconnectivity on/off is hard.  We could do a major refactor to make the\nnetworking mockable, but I'm not sure it's worth it.\nOn Tue, Apr 16, 2013 at 5:47 PM, myleshorton notifications@github.comwrote:\n\nHey I haven't had a chance to review all these more recent changes -- give\nme a sec to give them a look. no tests for anything right?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16473846\n.\n. We don't know if we don't have a connection until it is too late.\n\nOn Tue, Apr 16, 2013 at 7:08 PM, myleshorton notifications@github.comwrote:\n\nI guess as well as on startup?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16477599\n.\n. Calling isConnected() does not tell us if we are going to have a connection\nat the time we call sendPacket().  It only tells us if we have a connection\nnow.  It's possible that Smack tell us somehow if sendPacket() fails (I\nhave not looked).  But even if it does, that might take some time for the\nTCP connection to time out.  And during that time, we could lose the\nmessage due to crashes or shutdowns.   Or, the controller could be offline\nfor some reason.  The only way to avoid losing messages is by having\nexplicit acknowledgements from the server.  This is roughly how TCP works\ninternally.\n\nOn Tue, Apr 16, 2013 at 7:38 PM, myleshorton notifications@github.comwrote:\n\nI'm not sure I follow. If we don't have a connection, we can't send the\nmessage to the server (master of the obvious that I am =). This is exactly\nwhat we're seing in the field. So to solve that one approach would be to\nqueue it until we have a connection, which could either be when the XMPP\nlayer reconnects or when we startup Lantern again. That seems like the best\nway to do it, but what am I missing?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16478702\n.\n. It might throw an IllegalStackException eventually.  But it could take\nquite some time, because TCP keeps retrying with exponential backoff.  The\ntimeout could be many minutes long, and in that time, Lantern could get\nclosed.\n\nI don't understand what you mean by \"asking the server to notify us of a\npending invite it has never heard of\".  We're sending the invite, and when\nthe server gets the invite, it removes the invite from the pending list.\nOn Tue, Apr 16, 2013 at 7:57 PM, myleshorton notifications@github.comwrote:\n\nSure, it's possible to be disconnected between the call to isConnected and\nsendPacket, but even in that rare event sendPacket will throw an\nIllegalStateException. There's no issue with the TCP connection timing out\n-- either the TCP connection is established or its not. If it's not,\nsendPacket will throw an IllegalStateException. We can queue the message in\neither case.\nAs it stands now, we're asking the server to notify us of a pending invite\nit has never heard of, and we just keep trying to send it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16479340\n.\n. I think there is a TCP issue.  Please see the xmpp-timeout branch; there is\na new test, XmppTimeoutTest.  To run it, you'll need to disconnect from the\nInternet when it prints DISCONNECT NOW (you have 20 seconds).  If I\nunderstand you correctly, you're saying we'll eventually get an exception,\nbecause we can't send the presence packet.  But you can wait several\nminutes in that test, and not get such an exception.\n\nI don't know if this addresses any issues we have actually seen; it\ndefinitely addresses issues that we might see.\nOn Tue, Apr 16, 2013 at 8:24 PM, myleshorton notifications@github.comwrote:\n\nThere seems to be some confusion here. There is no issue with the internal\nstate of TCP. Either we have a connected Socket we can call write on or we\ndon't. If there is no Socket, we were never connected in the first place\nand DefaultXmppHandler isLoggedIn will return false. If there is a Socket,\nit's an established TCP socket not waiting for any exponential backoffs\nrelated to dropped packets or anything like that. It could have been\ndisconnected, in which case we'll get an exception when we try to write to\nit.\nThe system with the server sending invites it has sent is generally fine,\nbut it just doesn't address the case we're actually seeing where we're not\neven connecting to the server. Sure we'll just keep trying to send and\nwaiting for the server to tell us it's done its thing, but we're never\ngetting the message there in the first place.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16480110\n.\n. The tests don't even pass on master without a .lantern directory, because\nthey depend on a test.properties file existing in .lantern.\n\nBut what is the actual error message that you are getting?  Are you running\nfrom the command-line, or using mvn eclipse:eclipse, or using m2e?  (I'm\nusing m2e).\nAnd in terms of the behavior of sockets, the socket has to know it's\ndisconnected before it throws that exception. That doesn't happen the\nminute that your internet connection dies.\nIf you only see the connection being disconnected later and/or on a\ndifferent thread, then I think your proposal doesn't work anyway.  The only\nway it works is if you very quickly learn that you have been disconnected\n(and thus that the server will not see the message).  But because of the\nway TCP works, that's not possible; you have to keep retrying for a while.\nOn Tue, Apr 16, 2013 at 10:49 PM, myleshorton notifications@github.comwrote:\n\nI can't get that test to run because the new Version stuff chokes trying\nto load the version, so all the injection fails. I believe the way the\ninternal threading in Smack works, however, you won't see any exception\nright away in that case because it marks it as disconnected on a separate\nthread, in which case only the subsequent send will throw an exception. My\nnote above is discussing the raw behavior of Sockets -- if you attempt to\ncall write on a disconnected Socket you'll get an IOException. I _think_in your test case that just happens on a Smack thread that then marks the\nconnection as disconnected, but you'll only see that from our side on a\nsubsequent send. There might be a listener you can register.\nFirst things first, though, if I could run that test I could tell you more!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16484087\n.\n. I understand that this is true if the Socket is in the closed state.  But\nfor the socket to get to the closed state, either it needs to be\nexplicitly closed, or it needs to time out.  Simply disconnecting from wifi\n(say), does not close all connected sockets.\n\nTry it:\n```\npublic class SocketDemo {\n    void run() {\n        try {\n            Socket requestSocket = new Socket(\"50.22.177.14\", 80);\n            System.out.println(\"Connected.\");\n        OutputStream out = requestSocket.getOutputStream();\n\n        System.out.println(\"Disconnect, please\");\n        try {\n            Thread.sleep(10*1000);\n        } catch (InterruptedException e) {\n            //fall-through\n        }\n        out.write(\"GET metafilter.com/ HTTP/1.1\".getBytes());\n    } catch(UnknownHostException e) {\n        System.err.println(\"You are trying to connect to an unknown\n\nhost!\");\n        } catch(IOException e)  {\n            //this never gets run, because write does not throw any sort of\nexception\n            e.printStackTrace();\n        }\n    }\n    public static void main(String args[]) {\n        SocketDemo client = new SocketDemo();\n        client.run();\n}\n}\n```\nOn Tue, Apr 16, 2013 at 11:11 PM, myleshorton notifications@github.comwrote:\n\nAnd in terms of the behavior of sockets, the socket has to know it's\ndisconnected before it throws that exception. That doesn't happen the\nminute that your internet connection dies.\nAs I keep saying in various ways, the Socket throws an IOException when\nyou write to it and it's disconnected. It throws an exception the second\nyou write to it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16484643\n.\n. And I will fix the isDevMode issue.\n\nOn Tue, Apr 16, 2013 at 11:10 PM, myleshorton notifications@github.comwrote:\n\nThe tests don't even pass on master without a .lantern directory, because\nthey depend on a test.properties file existing in .lantern.\nThey can still run with the test.properties file copied to\nsrc/test/resources (I wrote this whole system), but regardless it doesn't\neven get that far because it can't create a Version -- running from Eclipse:\n523    2013-04-16 19:43:08,583 INFO  [main] lantern.TestUtils$TestModelIo.read (ModelIo.java:73) - Failed to read model for some other reason\njava.lang.NumberFormatException: For input string: \"${project\"\n    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n    at java.lang.Integer.parseInt(Integer.java:481)\n    at java.lang.Integer.parseInt(Integer.java:527)\n    at org.lantern.state.Version$Installed.(Version.java:103)\n    at org.lantern.state.Version.(Version.java:27)\n    at org.lantern.state.Model.(Model.java:43)\n    at org.lantern.state.ModelIo.blank(ModelIo.java:82)\n    at org.lantern.state.ModelIo.blank(ModelIo.java:1)\n    at org.lantern.state.Storage.read(Storage.java:85)\n    at org.lantern.state.ModelIo.read(ModelIo.java:53)\n    at org.lantern.state.ModelIo.(ModelIo.java:40)\n    at org.lantern.TestUtils$TestModelIo.(TestUtils.java:204)\n    at org.lantern.TestUtils$TestModelIo$$FastClassByGuice$$3cbe5326.newInstance()\n    at com.google.inject.internal.cglib.reflect.$FastConstructor.newInstance(FastConstructor.java:40)\n    at com.google.inject.internal.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:60)\n    at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)\n    at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)\n    at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)\n    at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:53)\n    at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)\n    at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)\n    at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)\n    at com.google.inject.Scopes$1$1.get(Scopes.java:65)\n    at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)\n    at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)\n    at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)\n    at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)\n    at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)\n    at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)\n    at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)\n    at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)\n    at com.google.inject.Scopes$1$1.get(Scopes.java:65)\n    at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)\n    at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)\n    at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)\n    at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)\n    at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)\n    at org.lantern.TestUtils.instance(TestUtils.java:264)\n    at org.lantern.TestUtils.load(TestUtils.java:150)\n    at org.lantern.XmppTimeoutTest.test(XmppTimeoutTest.java:20)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16484623\n.\n. Yes, the invite failures we saw in production were caused by an issue with\nthe actual connection.  That one is genuinely my bad.\n\nBut as we know, connections in China in general are a bit flaky (recall how\nour hangout suddenly died).  The general issue that this branch solves is\nthat of internet connections going down and up, as well as switching\nbetween connections.   The invite thing is part of that; if you lose your\nconnection, invites could get lost.\nSo I think we ought to include all of the branch.\nOn Wed, Apr 17, 2013 at 12:00 AM, myleshorton notifications@github.comwrote:\n\nHuh --- interesting -- that's cool!! Didn't realize it just wrote data\nlike that without choking if your internet connection just dies.\nThat's not what happens if the other end disconnects though or if\nyou're not connected in the first place. I feel like we're conflating two\nissues. We're on the \"no-connect\" branch, but this branch also came to\nsubsume this issue of how to handle invite failures -- the invite\nfailures were caused by an issue with the actual connection, not with your\ninternet. That's actually fixed with my commit from earlier today, but I\nthink we need to re-clarify exactly what we're up to here.\nTo put this more concretely, what functionality on this branch is\nsomething we want in our version for testing tomorrow? What user facing\nissues are we solving that makes this urgent, if any?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16485669\n.\n. The downside is that if our tester loses their connection (or switches\nconnections), then Lantern mostly stops working.  If the invite stuff is\nwhat is bothering you, we could cherry-pick around it.\n\nOn Wed, Apr 17, 2013 at 12:26 AM, myleshorton notifications@github.comwrote:\n\nOK cool. To be fair I deserve my fair share of public shaming because\nthose damn fallback connections weren't using SSL and had no test.\nAlso, just to be clear, I'm not questioning the value of the whole branch\n-- I think it's important. It's just a massive change that I'm reluctant to\nmerge if it doesn't solve an immediate issue our testers are having. Maybe\nwe just wait on it and merge after a little more review and after our test\ntomorrow? Is there any downside to that?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16486250\n.\n. This does solve concrete problems that I have had -- specifically, when I\nhave lost connectivity.\n\nWe definitely ought to test this code more (once lanternctrl unbreaks\nitself -- maybe let's try giving it more $?).  But we also definitely ought\nto merge it soon, because long-lived branches are not a good idea.\nOn Wed, Apr 17, 2013 at 12:52 AM, myleshorton notifications@github.comwrote:\n\nWell I'm worried about a bunch of stuff really -- the reconnecting logic\nconflicting with the underlying XMPP connection jumps to mind most\nprominently, but more than anything these are just huge changes to really\ncritical parts of the overall architecture, so the likelihood of bugs is\nhigh.\nI want to stay as user-focused as possible in these weekly milestones, so\nmy high-level feeling is if this isn't solving concrete problems users have\nhad and could actually cause a lot of problems for them, then we should\nhold off.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16486737\n.\n. In general, I agree with this refactoring idea.  But there are some issues with the specifics:\n\n(1) For connectivity checking, I'm not sure I want to check a list of sites, because that seems like a signature for Lantern use.  Checking the public ip address sites, at least, is something any app might do.  But maybe instead we should just check a random expected-to-be-up site?\n(2) We don't necessarily need to reconnect to XMPP just because we dropped offline.  TCP connections (and thus XMPP connections) can survive losses of connectivity.  So I guess we need to send a XMPP ping before trying to re-establish the connection.  Probably littleshoot-xmpp ought to handle this?\nI'll get started in on the rest.\n. The other reason that we need to check the public IP address is that it might have changed, necessitating UI and other updates.  And this might happen without any visible loss of connectivity -- consider the case where you switch between two wifi networks.  Unlike a normal connect/disconnect sequence, this requires an XMPP reconneciton.\n. This latest set of changes implements most of your suggestions.  Tests pass, and everything seems to work.\n. Fixed.\nOn Fri, Apr 19, 2013 at 12:30 AM, myleshorton notifications@github.comwrote:\n\nLooks great to me so far. Now boarding a plane to Phoenix after all (don't\nask =)) but will hopefully finish on the plane!\nOne thing I noticed is a return in that check for null -- I think line 39\nof ConnectivityChecker.java should just return!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16634801\n.\n. > I guess in some cases the existing connection will still work even if the internet connection has been lost -- is the the scenario where the ping/pong comes into play?\n\nYes.\nIn general, I don't want to make STUN failures cause Lantern to do anything, because we don't know how often STUN failures happen on connected connections.  I'll adjust the code to ping in the case of disconnection.\nI will also adjust the retry strategy to retry every two seconds.\n. LanternXmppUtil.java:34 sets the retrystrategyfactory.  And when I put\nbreakpoints on our retry, they get caught.\nOn Fri, Apr 19, 2013 at 8:11 PM, myleshorton notifications@github.comwrote:\n\nNice! Awesome yeah I really like the change to just call disconnect and to\nre-use that internal connection logic.\nThe only other thing I noticed I don't think your LanternXmppRetryStrategy\nis actually set anywhere anymore, but maybe I'm missing something. It looks\nlike that maybe have been removed along the way?\nWith that verified and/or fixed, big thumbs up from my end, and I say\nmerge this baby!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16695603\n.\n. Merged!\n\nOn Fri, Apr 19, 2013 at 8:56 PM, Leah Schmidt leahxschmidt@gmail.comwrote:\n\nLanternXmppUtil.java:34 sets the retrystrategyfactory.  And when I put\nbreakpoints on our retry, they get caught.\nOn Fri, Apr 19, 2013 at 8:11 PM, myleshorton notifications@github.comwrote:\n\nNice! Awesome yeah I really like the change to just call disconnect and\nto re-use that internal connection logic.\nThe only other thing I noticed I don't think your\nLanternXmppRetryStrategy is actually set anywhere anymore, but maybe I'm\nmissing something. It looks like that maybe have been removed along the way?\nWith that verified and/or fixed, big thumbs up from my end, and I say\nmerge this baby!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/673#issuecomment-16695603\n.\n. Naturally, I don't get the oome on startup; I'll have to look into yours\ntomorrow.\n\n\nOn Wed, May 8, 2013 at 2:52 AM, myleshorton notifications@github.comwrote:\n\nPut the hprof here https://lantern.s3.amazonaws.com/geoip-oome.hprof\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/750#issuecomment-17589618\n.\n. Oh, right.  Now I remember what caused that!  I should probably put in a\nwarning there in case it comes back.\n\nAnyway, there was a change to the pom that was supposed to fix it.  To\nconfirm that it's the same issue, can you confirm that you do not get the\nfollowing result?\nmd5sum target/classes/org/lantern/geoip/geoip.db\n217ec042f95d64456acd24cbb5beabcf  target/classes/org/lantern/geoip/geoip.db\nOn Wed, May 8, 2013 at 4:54 AM, Leah Schmidt leahxschmidt@gmail.com wrote:\n\nNaturally, I don't get the oome on startup; I'll have to look into yours\ntomorrow.\nOn Wed, May 8, 2013 at 2:52 AM, myleshorton notifications@github.comwrote:\n\nPut the hprof here https://lantern.s3.amazonaws.com/geoip-oome.hprof\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/750#issuecomment-17589618\n.\n. So, this change does improve matters -- Lantern now starts up on the Mac.  There are still some test failures for me, but those tests fail on master too.\n\n\nI made some changes.  Does the new code work for you?\nI'm also fairly surprised at the low default Java Xmx on the mac -- it looks like 128m.  I had assumed it was 512m everywhere, since that's what it is on Ubuntu. Granted, it's unreasonable for the geoip data to use nearly all of that, and I really should have thought of the binary search strategy sooner.  But we should consider increasing the Xmx, because it is entirely possible that we would hit the max during normal use.\n. Status: aargh.  After your message last night, I realized that something\ndifferent was happening when running from run.bash vs running from Eclipse.\n But I cannot figure out what the difference is!  Yes, when running from\nEclipse, the data is loaded from a FileInputStream rather than a\nJarURLInputStream -- but the first big chunk of the data appears to be the\nsame (up until the singleton issue).  What's really weird is that if I\nsimply use StreamUtils.copyStream to copy the InputStream to a file, I get\nan uncorrupted file -- same md5sum.  So it's almost certainly not the maven\nresource filtering issue that I had previously been seeing (and anyway, the\nfile inside the jar is correct).\nI am totally baffled.\nOn Thu, May 9, 2013 at 6:37 PM, myleshorton notifications@github.comwrote:\n\nWhat's the status on this guy?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/750#issuecomment-17694303\n.\n. Unfortunately, no (also, that would be pretty weird).\n\nOn Thu, May 9, 2013 at 7:11 PM, myleshorton notifications@github.comwrote:\n\nInteresting. I believe Eclipse by default just runs with more memory too.\nCould that be it?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/750#issuecomment-17695623\n.\n. OK, I can't really figure out why, but adding BufferedInputStream seems to\nmake the command-line work for me on Linux and Mac.  I'm totally baffled,\nhonestly.  But I guess if it works, let's go with it, since there's no\nreason it should have failed in the first place.\n\nOn Thu, May 9, 2013 at 11:48 PM, Leah Schmidt leahxschmidt@gmail.comwrote:\n\nUnfortunately, no (also, that would be pretty weird).\nOn Thu, May 9, 2013 at 7:11 PM, myleshorton notifications@github.comwrote:\n\nInteresting. I believe Eclipse by default just runs with more memory too.\nCould that be it?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/750#issuecomment-17695623\n.\n. Yeah, I fixed the access.\n. I actually already started on the growl-style notifications on Friday, so\nI'm going to see if they turn out to be a reasonable thing to do.\n\n\nOn Mon, Jun 17, 2013 at 12:09 AM, skivvies notifications@github.com wrote:\n\nBefore making this blocked on the Growl-style notifications, we might be\nable to get away with just adding a new tray icon state for unread\nnotifications. Some prior art:\n[image: screen shot 2013-06-17 at 12 05 44 am]https://f.cloud.github.com/assets/475147/660509/3c91d764-d703-11e2-8460-38d7c2026fe0.png\nThis way the user can notice they can go into Lantern to take some\nprompted action while in other apps.\nI can hopefully handle all the UI changes within lantern-ui that would be\nnecessary pretty quickly.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/817#issuecomment-19525609\n.\n. Yes, I can.\n. I ended up handling the profiles a different way.  But I'm not sure my way\nwould not have worked.  It's just that my most-recent successful test\nhappened to use the -D method.\n\nHowever, the build process seems totally broken, in ways unrelated to\nproguard.  Building off of a specific version seems to require that you\nfirst do a release for that version, and then create a tag after the\nrelease.  But creating a release with Maven, IIRC, involves pushing to\nmaster, which I don't want to do while I'm just testing.  So we should\nreally look at making releases from HEAD work again.\n. For testing, I had to (a) change the version in pom.xml to a non-snapshot\nversion, and (b) create a tag.  It may be that doing a release does both of\nthese, but I didn't want to do a release, because I think this\nautomatically pushes.  And the tag had to match the version in pom.xml.\n Otherwise, the scripts ended up not being able to find the artifacts.\n. Yes, proguard also strips unused methods.  What method are you getting\nerrors on?  I can easily mark it to be kept.\nOn Thu, Jun 13, 2013 at 4:40 PM, myleshorton notifications@github.comwrote:\n\nDoes proguard also strip unused methods within classes? Looks like it\nmessed up reading old settings files in some cases.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/821#issuecomment-19423470\n.\n. As for problems with the install script:\n(1)  The installer build does a pull before building.  This is not\nnecessarily what I want -- for instance, if upstream has some changes that\nI don't feel like merging.\n\n(2)  ./osxInstall.bash HEAD false builds an installer named\n/home/leah/lantern/lantern-HEAD-.dmg\n(3) If I supply a version number, it checks out the tag corresponding to\nthat version number.  That is also not what I want.  What I want is to\nrelease the current HEAD (of whatever branch I am on), without any hassle.\nOn Thu, Jun 13, 2013 at 5:08 PM, myleshorton notifications@github.comwrote:\n\nJust reverted this merge. To undo make sure to revert the revert!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/821#issuecomment-19425195\n.\n. > I guess I'm unclear what the hassle is -- if you're building on your branch, there are no upstream changes that will be pulled.\n\nThings can get screwed up if you have made local changes to old commits on your branch that you have not pushed.  It's not a huge deal, I guess, if you remember to force-push before building.\n\nThe built version being called lantern-HEAD-.dmg is a problem why?\n\nWell, for the os x version it's not a huge problem; for the deb, the equivalent simply doesn't work; deb versions must start wiht numbers.\nReally, the problem is (3).\n. Anyway, I added the necessary code to handle WhitelistEntry.  How would you like to handle testing and merging this?\n. I didn't get a chance to integrate this last week.  Let's plan to do it\nimmediately post-release.\nOn Mon, Jun 17, 2013 at 6:08 PM, myleshorton notifications@github.comwrote:\n\nI think things are settle down enough for us to just go ahead and\nintegrate this...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/821#issuecomment-19578368\n.\n. It was pretty straightforward once I could reproduce it!\n. I tested on WinXP, Ubuntu and OS X.  \n\nAs for automated tests, well, it only runs if it is setuid.  And, of course, it is designed to only run from an installed location.  And it makes permanent changes to the host system (which are potentially idempotent and thus hard to detect).  So, while it would certainly be possible to write a shell script that does the necessary testing, I'm not sure it would be a good idea.\nThe problem with using getenv is that it is not secure -- the user controls the environment.   I changed it to get appdata from the environment.  I'm going to change the check against \"program files\" as well in a minute,\nAnd uname(3) does not call out to the shell -- it is a system call.  uname(1) calls uname(3) rather than the other way around.  I'll change it if you care.\n. I should also mention that this won't crash Lantern at all, because at\nworst, the setuid program crashes, and then we get a log message.  We're no\nworse off than if we didn't have it.\nOn Sun, Jul 7, 2013 at 9:46 PM, myleshorton notifications@github.comwrote:\n\nYou can also just use #ifdef APPLE and #ifdef __linux -- a little\ncleaner than calling out to the shell.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/832#issuecomment-20582019\n.\n. > You could also just pass it some arbitrary path and ensure the files are successfully copied there -- heck copy 'em to temp.\n\nWe cannot distribute what is effectively a setuid version of cp, because that would be a massive security hole.  That's the reason this code has all of these hard-coded paths.  It's not because I'm trying to be gratuitously weird and write terrible code -- it's because setuid is really stupidly dangerous, and I'm trying to avoid security holes.\nSo that's why it's impossible to write a testable version of this -- because a testable version would be an exploitable version.\nIf you want, I could put in a test mode that drops privileges and then acts like cp, but that seems kind of pointless to me.\n. I think there's a quota problem -- because copyPolicy is setuid, it can ignore quotas.  A user can create many directories named a/lib/security, b/lib/security, etc (assuming their quota allows the creation of many directories, which it might), and use copyPolicy to fill up the disk.\n. I'm not aware of any way that standard unix quotas are flawed.\nBut I think I might have just thought of a simpler solution, but I'm not\nsure if it necessarily works in all cases.   What if we only overwrite\nexisting US_export_policy.jar and local_policy.jar which (a) exist and (b)\nare owned by root.\nAre there cases where this would not work?\n. I've been looking into the Windows side of this, since the Windows security model is significantly more complex than the Unix model.  It's kind of a rabbit hole. \nIt looks like, on WinXP, a user can either be logged in as an administrator (most users are), or not an administrator.  It appears that the only thing even remotely like setuid is the \"Run as\" command, for which there is no API (and a password is required each time).  So on XP, we'll just try it and maybe fail.  On Vista and later, there's something called UAC, which doesn't actually seem to be any different.   So, same thing.  I spent a bunch of time looking into this, and couldn't really see a good solution.\nAnyway, I went ahead and implemented the simple solution.  Let me know what you think.\n. None of this goes through the shell at all, so quoting should not be an issue.  Using the shell is almost always a giant unnecessary security nightmare, so I always try to avoid it.\nThe tests pass just fine for me on Windows XP when java_home is a path with spaces.\n. I think the installer should work as-is, and nothing is needed before the merge.\n. merged\n. A 64-bit key is no longer considered secure. Fifteen years ago, the EFF's\ncustom hardware could brute-force 56-bit DES in about two days.  That would\nbe under two years for a 64-bit key, assuming similar performance -- or\nabout half a day if custom processor speeds also double every 18 months\n(which they seem to).  It looks like custom ASICs would still be the way to\ngo -- they're what was used to break MSCHAPv2, and also what gets the best\nperformance on Bitcoin mining.\nIt maybe that in this particular case, we're not worried about a\nbrute-force attack, but it seems like best practices today are a 128-bit or\ngreater key.\nOn Sun, Jul 7, 2013 at 9:13 PM, myleshorton notifications@github.comwrote:\n\nWhy do you think the current key sizes are too small?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/834#issuecomment-20581412\n.\n. All of the automated tests?  How do I do that?  I did a brief manually test\non OS X and Linux (I'm not sure if I tested on Windows).\n\nOn Sun, Jul 7, 2013 at 9:25 PM, myleshorton notifications@github.comwrote:\n\nDid you run all the tests on the proguard generated jar by chance?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/837#issuecomment-20581606\n.\n. So, I just tried a version of this, and realized that there is no reason\nthat it should work.  The tests are allowed to rely on all sorts of things\nthat are not in the final jar (JUnit is one obvious example, but there are\nothers, like AmazonEc2Utils).\n\nOn Mon, Jul 8, 2013 at 5:21 PM, myleshorton notifications@github.comwrote:\n\nYou'd have to do some custom classpath wrangling most likely -- like build\nthe proguard jar, and then put it on the classpath removing everything\nelse. Something along those lines.\nOn Sun, Jul 7, 2013 at 9:22 PM, Leah X Schmidt notifications@github.comwrote:\n\nAll of the automated tests? How do I do that? I did a brief manually\ntest\non OS X and Linux (I'm not sure if I tested on Windows).\nOn Sun, Jul 7, 2013 at 9:25 PM, myleshorton notifications@github.comwrote:\n\nDid you run all the tests on the proguard generated jar by chance?\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/837#issuecomment-20581606>\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/837#issuecomment-20585047>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/837#issuecomment-20637033\n.\n. (refs #670)\n. Some of the code used only by tests is actually part of jars which are part\nof the production build. So that would change the production build.  Also,\nanything we add to the test jar to make the tests pass will be a change\nfrom the production build, so the tests will no longer be effective in\ntesting whether the proguard build is breaking anything.\n\nBasically, it would take me a fairly large amount of time to get these\ntests to work.  And it would require an ongoing effort to maintain them.\n So I don't think that it's a good use of time.\nOn Tue, Jul 23, 2013 at 5:03 PM, myleshorton notifications@github.comwrote:\n\nYou could just add all the test-only code to be fully included in the\nproguard config. Since it's not shipped in production, that config should\nhave no effect on the jars built for production while allowing you to test\nthis more thoroughly.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/837#issuecomment-21455306\n.\n. Consider this dependency:\n    \norg.littleshoot\namazon-ec2\n1.0.3\n\n\nI haven't checked if it is only used for tests, but I assume that it is not, because otherwise it would have test.  It contains AmazonEc2Utils, which is only used in a test.  So, if we tell the proguard config to keep AmazonEc2Utils, we'll be keeping it in the production JAR, even though it is only used in tests.\n(This might be a bad example, because maybe it is only used for tests -- if so, you can imagine that there might be other cases like this)\n. Consider this dependency:\n    \norg.littleshoot\namazon-ec2\n1.0.3\n\nI haven't checked if it is only used for tests, but I assume that it is not, because otherwise it would have test.  It contains AmazonEc2Utils, which is only used in a test.  So, if we tell the proguard config to keep AmazonEc2Utils, we'll be keeping it in the production JAR, even though it is only used in tests.\n(This might be a bad example, because maybe it is only used for tests -- if so, you can imagine that there might be other cases like this)\n. (I actually think this fixes #846)\n. (Actually, you might need to recompile copyPolicy on os x lion again, irritatingly).\n. @myleshorton can you recompile the os x executable so that we can merge this?  I just realized that it had not actually been merged.\n. It turns out that for some reason it's not working on win7 anyway.  I'm\nlooking into why.\nOn Tue, Aug 20, 2013 at 1:29 AM, myleshorton notifications@github.comwrote:\n\nI can certainly do that. The main reason I haven't merged this is that we\njust have higher priority outstanding bugs, but I will certainly build the\nexe for the correct platforms when we do merge this.\nOn Mon, Aug 19, 2013 at 9:37 PM, Leah X Schmidt notifications@github.comwrote:\n\n@myleshorton https://github.com/myleshorton can you recompile the os\nx\nexecutable so that we can merge this? I just realized that it had not\nactually been merged.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/857#issuecomment-22922106>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/857#issuecomment-22923457\n.\n. Actually, I think I see the problem: it's to do with paths under cygwin.\n Because I'm building without cygwin (so we don't have to distribute an\nextra dll), copyPolicy.exe doesn't support paths like /cygdrive/c/Program\nFiles/... .  When I execute run.bash from within cygwin, the Java path is\nof this form.  How are you running run.bash from within Windows?\n\nOn Tue, Aug 20, 2013 at 2:39 AM, myleshorton notifications@github.comwrote:\n\nGotcha. So that should be under a new ticket.\nOn Mon, Aug 19, 2013 at 11:30 PM, Leah X Schmidt\nnotifications@github.comwrote:\n\nIt turns out that for some reason it's not working on win7 anyway. I'm\nlooking into why.\nOn Tue, Aug 20, 2013 at 1:29 AM, myleshorton notifications@github.comwrote:\n\nI can certainly do that. The main reason I haven't merged this is that\nwe\njust have higher priority outstanding bugs, but I will certainly build\nthe\nexe for the correct platforms when we do merge this.\nOn Mon, Aug 19, 2013 at 9:37 PM, Leah X Schmidt \nnotifications@github.comwrote:\n\n@myleshorton https://github.com/myleshorton can you recompile the\nos\nx\nexecutable so that we can merge this? I just realized that it had\nnot\nactually been merged.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/857#issuecomment-22922106>\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/857#issuecomment-22923457>\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/857#issuecomment-22925128>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/857#issuecomment-22925455\n.\n. I think just replacing \\u0007 would work.  This is fine with me, but @myleshorton is the one who put this in, so I'll let him merge.\n. \\u0007 not \\0007, I think.\n\nOn Mon, Aug 19, 2013 at 12:58 PM, skivvies notifications@github.com wrote:\n\nI just tried it with\nLOG.debug(\"Got certificate:\\n\"+\n            new String(Base64.decodeBase64(base64Cert),\n                LanternConstants.UTF8).replaceAll(\"\\0007\", \".\"));\ninstead and still got the bells. As I suspected, it's not necessarily\nliteral bell characters causing the bells, but any characters the terminal\nthinks should be bell-worthy. It reliably rings three bells in a row every\ntime Lantern logs something like this:\nGot certificate:\n0\ufffd\ufffd0\ufffd\ufffd\ufffdR\n0.1,0_U *\ufffdH\ufffd\ufffd\n140813141055Z0.1,0_Ugmail.com_-lan-3296E0520\n\ufffd0\ufffd     \ufffdH\ufffd\ufffd       #dummyuser96@gmail.com-lan-3296E0520\ufffd\"0\n\ufffd\ufffd9\ufffd\ufffd\u04c7OKE>\ufffd\ufffd\ufffdc\ufffd\ufffdU\ufffdXxU$\ufffd\u07edDUC\ufffd\ufffdi\ufffd\ufffdC@\ufffdvCczC7hi_z\ufffd\ufffd\ufffdj\ufffdQ\ufffd\ufffdO\u05ed  8\ufffd\"\ufffd\ufffd4\ufffd4\ufffdE=\ufffd\ufffd\ufffdu\ufffd\ufffd\ufffd;\u05f4\n                                                                            \ufffd\\\ufffd\ufffd\ufffd5\ufffd\ufffd7(\ufffdO\ufffdar\ufffd\ufffd\ufffd\ufffd7T\ufffd\ufffdD\ufffd.R\ufffd,\u00c0\ufffd\"\ufffd\n                                                                                                             \ufffdz\ufffdW3F\ufffdg1\ufffd\ufffd\ufffd8kg\ufffd\u35c4k\ufffd\ufffd{\ufffd\ufffd\ufffd\ufffd&MT\ufffd\u0421\ufffd\u0379\ufffd\ufffd\ufffdT\u06d2\n(\ufffd\ufffd\ufffd.<=\ufffd\ufffdO\ufffd8o.\ufffdu\ufffd\ufffd%)\ufffd~H                                                                                                                           \ufffd\ufffdP2\ufffd\u0630P\ufffd\ufffd\ufffdB\ufffd\ufffdP\ufffd\ufffd\ufffd-\ufffd=\ufffd\ufffdX\ufffdo\ufffd\ufffd:4ng\ufffd\ufffdc%\ufffd\ufffd\ufffd0\n`Y\ufffd'\ufffd\ufffd,c\ufffd\ufffdi\u74de\ufffd3_L3\ufffd\ufffd%! \u01dbt\ufffd~\ufffd@\ufffd=T\ufffdXB,\"ESx47D.\ufffd\ufffdT\ufffd\ufffd\ufffd\ufffd<\nj\ufffd\ufffdbdu\ufffd\ufffd_\u04b1\ufffd\ufffd\ufffdk\ufffd\ufffd\ufffd+M\ufffd.\ufffd\ufffd\ufffd7s\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffddz\ufffdC\ufffd5(\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdi@\ufffd\ufffdW\ufffd\ufffdFL[\ufffdh\ufffd(\ufffd\ufffdl\ufffde[}\ufffdas[\ufffd\ufffd\ufffd\ufffdT\ufffd2\ufffd;N\ufffd\ufffd\ufffd\ufffd\ufffdw\ufffd\ufffd\ufffdA\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdu\ufffd{\ufffd%\ufffd\ufffdp\nNote this patch does not remove the literal bell character in\nhttps://github.com/getlantern/lantern/blob/master/src/main/java/org/lantern/kscope/DefaultKscopeAdHandler.java#L68because I haven't found that to actually ring irrelevantly enough to cause\ndistraction, but I'm definitely open to ditching that too. ;-)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/881#issuecomment-22886944\n.\n. Even if you want to handle this another way, I think the refactor I did is probably a good idea.\n. Oh, I forgot to remove that stuff.  Let me do that.\n. Ah, right.  I think I had forgotten that wait() gives up the lock.\n. I don't think there's actually a problem, but I could be wrong.  Here's why:\n\nIf table is null here, and then threadLoadData's thread calls loadData(), then table will get set.  Line 57 will call loadData(), but loadData() will return immediately (lines 90-91).  And we don't need to worry about two threads being in loadData(), because it's synchroinzed.\nIn general, the intent of the threaded loading is to avoid slowing down Lantern startup, rather than the tests.  My expectation is that table will never be null here, because by the time getGeoData is called, the background loading process will be complete.  But if it is null, we should wait for it.\n. Although actually, we could just remove the if entirely with no effect, since loadData() checks anyway.\n. Doesn't a RuntimeException do this? That is, shouldn't our Exceptional stuff actually catch & log exceptions?  Basically, this is a fatal error at this point; there is no fallback.  But it's also totally unexpected, since we are reading something out of the same jar file that contains everything else.\n. I wanted to avoid this for performance reasons, but you're probably right that test independence is more important than performance.\n. ",
    "aranhoide": "I'd be happy to pass this on to someone with more background in SSL.\nI'm reading up on the intricacies of the Google Apps Datastore so I can usefully review Leah's global counter changes.  My plan after that was to try and see how hard would it be to make EC2 servers run as different jabberids of a single user, a task which also demands a high reading/hacking ratio.\n. Just to clarify: this pull request no longer involves a rename (nor any other change) in the lantern-ui submodule.\n. Since we have implemented both, and since we already have a page that tells you that you're about to log in to Google, is it too crazy to have in-app login the default (as in, the link is shown more prominently and users that don't want to think about it feel safe just clicking it) but still allow users to log in through their default browser instead?\n. Hm, github says it can't auto-merge this.  I'm going to re-merge from master, although I'd swear I'd done so recently.\n. OK, should be good to merge.\n. I think we want the change that copies over the configurl.txt just as the fallback.json used to be copied.  If there's anything else there it is my mistake.  I think I considered changing the URLs for the main installer, but I shouldn't have checked that in?\n. I checked that and it worked.  I printed out the FallbackProxy instance and it seemed OK.  I think the ObjectMapper magic is setting the fields directly.\n. OK, I removed the only parts that would show up as a change to the wrapper.install4j in the issue1265 branch and merged.\n. I don't know/remember why we added this to the model, but we definitely didn't want to keep any state whatsoever between runs of this.  Indeed we're wiping the .lantern folder altogether before calling this.\nThis is run in the cloudmaster.  We thought this was a good place to put it because:\n- the cloudmaster already knew about all fallbacks (this turned out not to matter, since we are getting the list from the controller via S3), and\n- traffic between the cloudmaster and the fallbacks doesn't add any new discoverability vector, since the cloudmaster is already contacting all fallbacks.\n. A good transition plan would be to concurrently change the bucket and/or S3 path of the newly built installers in installMetaRefresh.bash.  Thus we avoid a race condition: the last users to get wrappers as per the old system will get an installer that doesn't fudge with .lantern-configurl.txt.\n. I'll add this change.  We can revert if necessary.\n. Oh crap I borked this badly. :(  I'll try and revert.\n. Damn.  I'm having the stupid day.\nI tested that this installed Lantern alright, but I failed to check its very purpose.  And indeed building an installer with ./debInstall64Bit.bash local false and installing the corresponding .deb failed to give me a ~/.lantern-configurl.txt , just like in my own tests.  I looked both in my home directory and /root.  So this seems not to be working on Linux at least.\n. We already talked this on the call, but for the written record:\nRunning as sudo is not the only problem, because we're not seeing anything output to /root either.  We used to see files output to /root in lieu of the user's home directory in scripts run from wrappers.\n. Yeah I think the additional stuff is just a bunch of updates to the lantern-ui sha, plus my change to the installer bucket.\n. Works like a charm in Ubuntu 64 bit!  Has anyone tested this in any Windows?  Unfortunately I don't have my old HD here.  Anyway, I'm all for merging this to devel and let's make sure we test windows normally before that becomes master.\n. Np, sorry I didn't catch the append.\n. Thanks!\n. Other than the resource/resources typo, LGTM.\n. I assume you have tested this and I can't see what could go wrong with it.\nThe only thing that came to mind is that it looks like this -statsperiod is something we might want to tweak from the cloud config in the future (e.g. to ease load on statshub), but (i) explosive growth would be a nice problem to have and (ii) we can implement support for that locally in flashlight.\nSo, LGTM.\n. LGTM, other than me not really understanding why Lantern needs to concern itself with masquerades at all (flashlight seems to be able to handle these autonomously at this point), and the caveat about we still returning some arbitrary masquerade when none can really be reached.\n. LGTM.  I tried to write a unit test for this, but it proved a can of worms and more trouble than it's worth.  It will be apparent whether this actually works.\n. LGTM, QAing...\n. I'll take a look at this.\n. > (getting unsafe access is better than having no access at all)\nI think this depends on the user's expectations and usage.  I think that approach does work for the typical usage of Lantern.  But if we start promising that we'll never proxy plain HTTP through untrusted peers, defaulting on no access at all (or modifying the request to try HTTPS instead) may actually be wiser.\nIn principle this issue should never come up because we should always have trusted servers [1], but what to default on in such an extreme case is an interesting question.\n[1] I'll upload new cloud configurations before merging this, because adding properties to servers there is backwards compatible.\n. Done with this pass of reviewing.  Summary:\n- The change itself looks sound, except for a race condition.\n- A few errors were spotted (thanks!).\n- The added docstrings are really nice, thanks.\n- Some of the other comments I find excessive, some of them just restating what the code says clearly enough.  As a general rule (which, like all rules, may be broken judiciously) comments other than docstrings should explain not so much what the code is doing but rather why it's doing that.\n- I don't think the added mutexes around channels are necessary.  If anything, we should either protect the initialization of the channels themselves, or (slightly more dangerous) just clearly document our assumption that everything that is called under Configure happens serially with respect to other Configure calls, and thus can never be called more than once concurrently.\n- I don't think we should refactor existing code purely for style unless we agree as a team on style conventions.\n. @xiam: done with the second pass.  Nothing came up that will foreseeably ever cause problems in practice, but maybe it can't hurt to be a bit paranoid.\nFeel free to merge this unless you prefer to do further tweaks.\n. @xiam: looks good.  I'll add the comments I talk about in https://github.com/getlantern/lantern/commit/16fa2f5986f6f01351fc2775c3c311e3dbdc2e67#commitcomment-10875558 and merge.\n. QA: unit tests pass both on OS X and Linux.  I couldn't build a binary using make in either OS X or Linux (I'll ask the dev list; I don't suppose this can be related to this PR), but I built a binary with go build in the flashlight directory.  In my lantern.yaml, I set my fronted host as trusted, and left all chained proxies untrusted.  Browsing to https://thepiratebay.se went though the chained servers (which are prioritized), but browsing to http://nytimes.com went through my fronted proxy.\nNice work!\n. This has been working fine in my test cloudmaster for a couple weeks already, so I'll merge it to prevent branch rot.\n. LGTM.  Works both in OS X (where I already had docker initialized) and in Ubuntu (where I hadn't run make docker yet).\n. LGTM.\n. Done with my first pass.\nI think building up polling threads every time our location changes should be fixed.\nI'm a bit uneasy about blocking config polls until geolocation succeeds, because there may be a catch-22 situation if geolocation fails for reasons that a new config could fix.  OTOH, this may be too far fetched to worry about, and a timeout doesn't fit very well in the pub/sub scheme, and in the worst case we still have auto-updates, so I won't lose sleep over this either way.\n. [on the catch-22 thing:] Hm yes, I was under the impression that we were trying to download the cloud config directly, at least if the domain fronted request fails.  And maybe we should do that, but that's a different issue.\n[on pubsub] This morning I realised that the same effect could be achieved without changing yamlconf or config.Init at all, by just adding a geolookup.WaitForLocation() function that could be used by anyone that wants to block until we have a location.  Then use that in fetchCloudConfigForAddr.  There is really no practical difference between waiting before we start polling for updates or just doing that wait on our first run of the poll, is it?\ngeolookup.WaitForLocation could use the ret := <- myChan; myChan <- ret; return ret pattern instead of pubsub.  That would save us a dependency, since the UI is not using pubsub anyway to get its location updates.  It would also return immediately if geolookup.location != nil when it's called.  I don't think it makes a difference in the case of config.go, but in general whoever subscribes for the Location pubsub channel will get their callback hit in the next geolookup even if we have successfully geolocated in this run, so they need to remember to check for location first.\n. While I think this purpose could be met without this dependency, I suppose you expect this will be used for other things.  Otherwise LGTM and tests pass, so merging.\n. LGTM\n. You may want to add this to test-and-cover, because the travis build was passing with the broken tests.\n. Note I didn't commit an updated masquerades.go etc., to remove git noise.  Feel free to do it once you're done with QA, or let me know when this looks good to you and I'll commit them before merging.\n. No more country-specific cloud.yamls!\n. Alas, I just realized that while this is necessary it is not enough.  We need to change the client so it will hit the config server through direct domain fronting, just like the geoip server is hit currently, and for the same reason: we need the IP of the cilent, which is not forwarded by flashlight servers.\nAnother option would be to whitelist some domains so flashlight servers will forward the user's IP to those.  That would work with old clients too.  But that would introduce an unnecessary hop.  So even if we do this for old clients I'd still do direct fronting in new clients.  I'll submit a new PR about this.\n. It seems I was misunderstanding geolookup... it's actually passing the IP as a query parameter.  I don't think direct fronting is being used here either?  We could do the same for the config server, although that makes it easier to forge client IPs (?).\n. Oh I see.  I had misread that.  I thought that was a regular fronted client going through flashlight.  So maybe the others are working because their domains are frontable through Cloudflare?\n. @myleshorton: yes, backing the new URL with a S3 bucket was meant as a transition measure.  I'll swap in the config server as soon as it's ready.\n. Oh I was looking at the same thing.  I can do the PR if you want, or I can keep reading on this as background for reviewing that..\n. You're probably closer.  I'm a bit befuddled by the fact that config/config.go is shared between client and server, while currently direct proxying is only being set up for clients.\n. Sounds good!\n. @myleshorton I agree these changes are an improvement overall. \nI made some fixes as per this comment.  I also fixed some yamlconf tests that were calling StartPolling.   Feel free to merge after you've reviewed my changes.\n. Hm, this seems to break lantern-android too.  I'll look into that.\n. In https://github.com/getlantern/lantern/commit/205a43c9ebfdfaa001eadf06fcab006973da4428 I meant \"lantern-android tests\" instead of \"lantern-config tests\"...\n. There are still problems with this.  We are not closing what used to be client.hqfd.  I'm not sure why we need to close that, and whether that applies to all the fronted.Dialers that are created and immediately discarded in HighestQOSFrontedDialer.\n. Unless I misunderstood something, we were leaking a helluva lot of fronted.Dialers; all the ones that were considered and discarded in HighestQOSFrontedDialer.  We are still leaking all the dialers that are created whenever we reconfigure the client.\nEven if we fix the leakage, each of these Dialers starts a goroutine to verify its masquerades, and keeps a pool of (currently configured as 30) connections.  Having more than one of these running at a given moment feels wasteful to me.  I think we better have a scheme where we only have a single one of these Dialers per Client and reuse it until we reconfigure the client, at which point we Close it and open a new one.\n. I'll make the changes I propose in a different branch and make a PR into this one.\n. @myleshorton: np.  I'll take a look at this and look at how best to avoid leaking dialers and generally having too many of them around.  So I'll probably reply with yet more commits. :)\n. @myleshorton your changes all LGTM.  I updated lantern-android and made https -> http replacement slightly safer.\nThe only reason not to merge this right now is that we're no longer closing the Dialer on Client.Stop().  This is never called in the flashlight project, but is called in lantern-android.  To be precise, there is a call to it in MobileClient.Stop(); I'm not sure whether that one is ever called.   \nSo I'm reading the code that uses direct fronting to try and find the cleanest way to have them all use the same dialer (and clean it up on client reconfiguration or Stop).\n. I already fixed the issue of creating unused dialers when choosing the one with the highest QoS.  Turns out that the QoS of the dialer is just that of the corresponding FrontedServerInfo, so I just found the FrontedServerInfo with the highest QoS and created the dialer for that one only.\nI'm now working out the problem of cleaning up the Dialers.\n. @myleshorton yes, as long as we are not closing the old dialer we are leaking open connections (and hence file descriptors) on every config update.\n. IIUC yes, that's the purpose.\n. @myleshorton ^.  That said, it's been a while since I last looked at the connection pool code.\n. @myleshorton : and I'm not claiming that this leakage fully explains the too-many-open-files errors.  Let's see how quickly these build up after we properly clean up the Dialers.\n. A challenge in cleaning the Dialers as the code stands is that there is a possible race condition where services keep references to the http.Clients (fronters) obtained from them.  Although ~~Dialer.Close() takes care to wait for all ongoing connections~~ (P.S.: not really, on second reading), it can't really know that e.g. geolookup has a client that might still get used after all the connections have been closed.  Even if we update the client in all services before we call Dialer.Close, and even considering that most services hold the http.Client in an atomic.Value, there is still a potential race condition in the gap between the time the value is Loaded and the time it is actually used.  (P.S.: although this is true, it seems unlikely to cause trouble: using a Dialer after it's been closed makes it work like a regular dialer without a pool, and using whatever masquerades have already been verified at the moment it was closed.  So the only problem would arise if no masquerades had been verified.)\nI think I know how to fix this without using any globals.  After you read it you may want to introduce one global or two to make it easier to follow.  :)  Or maybe we find some other way.  We'll see. \n. @myleshorton : while your DirectDomainTransport change passes flashlight tests, it seems to cause problems when trying to run it.  I get a lot of errors like this and I can't get geolocated.\nMay 16 05:19:24.708 - flashlight.geolookup: geolookup.go:117 Unable to get current location: Could not get response from server: \"net/http: Client Transport of type *fronted.DirectDomainTransport doesn't support CancelRequest; Timeout not supported\"\n. @myleshorton : nevermind, fixed that by just adding a trivial wrapper over Transport.CancelRequest.\n. This sub-PR fixes all the Dialer leakage that I talked about for the regular Lantern client.  Some issues may remain for lantern-android.  I'll look into that tomorrow.\n. 1. Hm yes, I agree for current uses of DDF we probably don't need a pool.  On creation, a Dialer still launches a bunch of goroutines/connections to verify masquerades.  This can probably be fixed or ameliorated too[1]; it's a matter of how much we want to specialize for this particular usage.  Consider that the same problems apply for non-direct-fronted Dialers, which brings me to..\n2. AFAICT Dialer.Close() immediately closes all ongoing connections in the connection pool.  For some reason, I was under the impression that it would wait for existing transfers to end, but I traced that path again and I no longer think that's the case.  OTOH, I also thought that users would be out of luck if using the pool after it's been closed, but I just traced that path and I think the Dialer will go on to work pretty much like an unpooled one (with the exception that it will be stuck with whichever masquerades had already been verified at the time of closing.)\n[1] I think this verification could be amortized across dialers, with some timeout.  But this is a bigger change than I think belongs in this push to fix direct fronting.\n. In summary: we probably don't need a full Dialer for DDF, so we could make a special case for these and that would be simpler than the withClient scheme.  But I think we'll need the withClient scheme (or something else that similarly allows us to Close Dialers more gracefully than what Dialer.Close is doing now) anyway for other (non direct) domain fronted Dialers anyway, so in the long run the special case won't buy us much.\nNote also that in principle we could use the same Dialer for all direct and non-direct requests.\n. https://github.com/getlantern/lantern/pull/2538 includes the most useful parts of this without some of the problematic ones.\n. Fixed in #2538.\n. I haven't updated lantern-android to use this yet.  If you like this approach I'll get to that next.\n. @myleshorton I updated lantern-android to use this scheme to clean up direct fronted dialers.  This branch also includes two unrelated fixes:\n- Include the trusted CAs in the built-in config, which is useless without this.  lantern-android was relying on an initial unfronted fetch of the online config to bootstrap its fronted configuration.\n- Fix a test that was capturing ranged-over variables in a closure.  \nSo even if we don't merge this, these fixes had better be cherry-picked into whatever we eventually rely on.\nI think this is it for the client side.  IIUC we are still leaking non-direct fronted Dialers, but that's been the case for a while and we can make a different PR for that (using withClient if we merge this).\n. The pattern that this uses has been used for a while in various languages.  Some of them offer syntax to make it less noisy (e.g. the with statement in Python).  Here it is explained in the context of Go, although the author seems to miss a couple caveats:\nhttp://carefulcode.blogspot.com/2013/05/introduction-to-rifl.html\nhttp://carefulcode.blogspot.com/2013/05/rifl-examples.html\nGo has finalizers, so this could be implemented more directly.  The problem with them is they're tied to the garbage collector, which is conservative, so there are few guarantees about when, if ever, they'll be run.  There seems to be some consensus that they should not be relied upon.  There was even talk about deprecating them, although apparently that won't happen:\nhttps://groups.google.com/forum/#!topic/golang-dev/DMiUkpS1uyQ\n. OK, so I think the Client was basically doing the right things, wrt cleanup of dialers in the valencia branch.  Returning the hqfd on client.Configure was ugly, but not a serious problem. \nSo I think a smaller change is needed after all for #2520.  It would mainly be adding a Configure method to the config package that takes a http.Client and can be called after Init.  The first time it is called it starts the config custom polling.  On subsequent calls it just updates the package-level sync.Atomic var holding the http.Client, just like the other modules have been doing.\nAnother change that we need to keep is removing the support for country-specific cloud.yamls.\nThere were have been a few improvements in PR #2522 and in this one that, while not strictly necessary, are worth keeping:\n- NewDirectDomainFronter is a better name than NewDirectHttpClient.\n- Calling d.dialServer() instead of having its body copied in the dialer of DDF clients.\n- Wrapping the transport of DDF clients to avoid the http vs https gotcha.\n- Several fixes to lantern-android.\nThere are some things that came up in my review that would be probably worth fixing now or later:\n- balancer keeps its dialers sorted by QOS, so we probably don't need to explicitly find and store the highest QOS dialer separately.  A Client.GetHighestQosDdfClient() could fetch it immediately. (P.S.: Nope, actually, it only keeps balancer.Dialer instances, which we can't use for this purpose).\n- Instead of closing the Client.hqfd on Client.Stop, we should close its current balancer (which releases all Dialers including that one).\n- Analytics should probably not use direct fronting.\n- I'm still not sure statserver needs DDF, but it can't hurt either.  Anyway, we need to make the var that holds the http.Client a sync.Atomic.\n. I'll make a new PR with the changes described above.\n. @myleshorton I made PR #2538 to address those.  It doesn't introduce any dependencies.  The config package just gains a Configure(*http.Client) function.\n. @myleshorton : you need DDF to get a geolookup of your own IP, because the client doesn't know its own IP to start with, and it's inconvenient to do a separate IP check.  But I can't see why we need DDF to do geolookup when you know the IP you want to look up.  If I ask geo.getiantem.org for the location of a IP of a peer of mine, does geo.getiantem.org care about my own IP?\n. That said, it's nice to save the extra hop anyway, so I have no objections to DDF for geolookup of peers.\n. Good catch!  Unfortunately, I think the problem runs deeper.  There's no telling how many goroutines may be calling DialQOS, so we may get more than one write to errCh after the close.  Since the errCh has a buffer of only 1 and closing ends the loop that reads from it, the second caller of DialQOS will be blocked forever.  No good.\n. No wait, dialer.onError handles that by just dropping further errors, so I think we're good with your fix.  I'll test and merge.\n. Merging since these are pretty obvious changes and having this broken was messing with go-oracle for me.\n. Done with my review.  Summary: we're using the cloud config CA for analytics.  I don't think that'll work, and even if it did, we better not rely on it.\n. @myleshorton\n- By overwriting the url scheme of norm you are overwriting that of req, since URL is a pointer field.  I just sent a proposed change (give norm a new URL, copy the old one over before modifying it).\n- This code could have caused this error by itself, because it was preventing the client from sending the server the If-None-Match header.  But even after fixing this, the error would persist, because something (either in our DDF code or in Cloudflare) was eating the ETag header before it could reach the client.\nI have confirmed that with this branch as it stands, and pointing the client to the config server, this bug is fixed.\n. I think in that gist you are taking the address of the pointers themselves (ie. req.URL is already a pointer), not of the structures they point to.  If you remove the ampersands, you see they point to the same address.  Also, you can test directly that messing with the URL.Scheme of the copy modifies the original:\nhttps://play.golang.org/p/34oqZWcD9H\n. Merging since I'm already using this to update the configuration served by the config server.  Please someone review it nevertheless, but keeping this out of Valencia now would be just an exercise in hypocrisy. :)\n. Is it important to deploy this fix to our servers, or is it meant for the client side only?\n. LGTM, merging.  Note that there's one additional step required to upload this so it'll apply to the config server, but I'll do that.\n. @myleshorton : Yes, this is intended to replace the old checker, which is based on lantern-java and was configured through a Google Apps app.  Also, that one took too long to run a pass of tests (basically because we were testing the proxies serially) and gave false positives too often, for whatever reason.\nThis fits more seamlessly with our current toolchain, since it takes the same format as genconfig does for the fallbacks list (fallbacks.json) and it uses the same code the Lantern client uses to proxy through fallbacks.  Also, we expect it to be faster, less memory-hungry, and more reliable.\n. @uaalto : No, fmt is not thread-safe.  log writes to stderr, while I'd rather have this script output to stdout (this being a nice way to tell library-output logs from program output too).  So maybe errors should be collected somehow to be printed in a single (the main?) goroutine.  I'll first review the rest of your code and then maybe suggest other ideas about this.\n. And btw, this is really based on code by @oxtoacart ; I merely extracted the fallback checking code from genconfig.go and changed it to check the response, in addition to checking that the request completed without error.\n. @uaalto : the log module is indeed thread-safe, but log output goes to stderr.  We could have the caller of this script read stderr, but I think it's more proper to just write the fallback errors (program output) to stdout, and then we don't have to worry about interference from logs in this program or any libraries it uses.\nPushing changes to this branch will update the PR.  I'm done with the first pass of code review.  When you're ready for another one, just push your changes and ping me.\n. Travis failures are due to thread issues in either framed or its unit tests.\n. This is not needed anymore, let's resubmit if we ever launch fronted servers in the US.\n. LGTM\n. LGTM\n. To alleviate this in the meanwhile, I deleted a bunch of distributions we weren't using.\n. @fffw @myleshorton:  Sorry, I was out.  I think both suggestions make sense.\nThe refactoring suggested by @fffw was a smaller one and worth sneaking in while we were at it, but I don't suppose it's worth a separate PR.  Sorry I missed it.\n@myleshorton I don't suppose I'd ever change this particular setting without restarting the server just in case, so yeah, I agree the value of this functionality is limited.  Now, we have runtime reconfigurability all across the board, and disabling that ability for this particular area would introduce an exception to that (the only one? I can't think of any other from the top of my head).  It sounds like that could creep into more of an ambitious rethinking.  So I think it's good that we left this alone at this moment.\n. Ha, you dog!  :D\n. @uaalto I suppose you did set that particular flashlight server in your lantern.yaml?\n@myleshorton: deploying it right now.\n. Were you using a local flashlight server, or just a vanilla lantern.yaml?  In the latter case, you may have proxied through a chained server, in which case the whitelist/blacklist doesn't apply.\n. @fffw thanks!  To test it, you'd use the -cfldomain command line flag, which specifies where to register/unregister servers.  We have the test domain flashlightproxy.com for this purpose, so you'd say ./peerscanner -cfldomain flashlightproxy.com.  Also, for any flashlight server to register to your test peerscanner you'd have to call it with ./flashlight -registerat https://yourserverurl.org.\nI have this test peerscanner to test stuff.  ps-test.getiantem.org points to it.  It's normally turned off.  Whenever you want to test anything peerscanner related, feel free to log into it, copy over a new peerscanner binary, and start it.\n. Done.\n. Thanks!  Sorry I have totally broken sleep schedules.  This was actually already deployed since, besides being straightforward as you say, at the moment this stuff is only triggered manually and it's kind of self-checking.\n. LGTM, tests pass in my machine.  The only nit is that IIRC we've been using the \"X-Lantern-\" prefix for headers instead of \"Lantern-\", but I won't lose any sleep over this.  Feel free to either change that or merge this PR as is.\n. @myleshorton done.\n. Thanks @staranjeet !\n. Why are you skipping fallbacks?  In order to test this, or do you want to release this without default chained servers?\n. Yes, well, apparently genconfig doesn't try and domain front at all, just connect and grab certs?\n. I'm not sure why that matters.  IIUC, the point is that genconfig should try and proxy (or DDF) through these domains, to make sure they're actually Cf-backed and frontable.\n. Taking a step back... if fronting is blocked by any means other than blacklisting the IPs we're using then the IP scanner won't help.\nOTOH, if fronting depends on \"secret\" knowledge (that is, the set of masquerades that work), then it offers no blocking advantages over chained proxying (other than them looking different DPI wise).\n. @uaalto : I'm done with my review.  I'd just add that the --global flag to cfg2redis.py is undocumented here.  You'd use that flag to update the global config (e.g., masquerades and proxied sites) in redis to match the one in your local cloud.yaml.\n. I don't think it's merged.  I think @uaalto says it has merged Valencia into this branch.\nI didn't notice that message, sorry.  I'll take a look at this, resolve conflicts, and merge.\n. @uaalto well, it's certainly less out-of-date than the text it replaces. :)\nTBH, the fact that the original one has stayed so out-of-date for this long too means that we're better off referring people to read the sources carefully.  I think a reader of either the original README or this one will be mislead more than helped by the obsolete docs.\nOr, if we have any reason to think we'll be more careful about keeping these up-to-date in the future, I'd approach this with a MVP mentality.  I'd add only the things that (i) are most likely to be needed in everyday usage, and (ii) are most likely to be missed, or are harder to grok, when reading the sources.\nSo, for the original question, if this merged without conflicts I'd just remove the obsolete paragraphs and merge.  As is, +1 on closing this.\n. I can filter out 127.0.0.1 and otherwise keep the current logic.  Or we can\nforget about x-forwarded-for entirely and pass the IP in a\nlantern-specific header (is that client-ip)?\nOn Sun, Sep 13, 2015 at 12:09 PM, fffw notifications@github.com wrote:\n\nAnother tricky thing remaining. httputil.ReverseProxy will add itself to\nx-forwarded-for, so request header config-server sees eventually will be x-forwarded-for\n127.0.0.1, real client ip, chained server. I tried to remove it in\nbalancer.Dialer.Director, but seems this header is added afterwards (yes,\nat http://golang.org/src/net/http/httputil/reverseproxy.go#L191).\nSo unless we stop using httputil.ReverseProxy, what we can do is to on\nthe config-server side, check the second IP in x-forwarded-for, or just\nlook up the client-ip header. How do you think @aranhoide\nhttps://github.com/aranhoide ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3136#issuecomment-139857751.\n. @uaalto this is only a problem if we run with the verbose flag, right?  If not, we would need to deploy this to the cloudmaster.\n. LGTM; IIUC this only removes stuff that became obsolete when we repurposed the Cloudflare IP range scanner for CloudFront.  The fact that this compiles at all means nothing necessary was removed.  There's one failing test, but it seems in an unrelated area.\n. WithWith?\n. Ah, the beauty of higher-order functions in Java! :P\n. This is not removed altogether but moved to lantern-common.  It's not used currently but we'll use that to generate the JSON we send to the client.\n. Oops, it seems I accidentally added a copy of the fallback.json and fallbacks.json copying jobs.  Just changing fallback.json to configurl.txt should do the trick, since we're not using fallback(s).json anymore.  I'll change this.\n. Hm git must have auto-merged these then.  So, if I just delete lines 528-605 we should be back at the version on master?\n. Nice indeed!\n. Yes, this is the reason why we coded to DefaultProxyTracker and not ProxyTracker.  IIRC we intended this just as a temporary measure to get something working.  There were other shortcuts we eventually revisited, but this one fell through the cracks.\n. Nice.\n\nSo this gets you a .lantern-configurl.txt actually written to disk, right?  If so, LGTM to merge.\n. Ah, good ol' configureUbuntu!  I had forgotten this runs in the installer, not the wrapper.\n. Clever!\n. Not really applicable here, but one good thing about sed in general is that it takes any char as separator, so you could use comma and avoid escaping the slash.  Of course with only one slash this wouldn't be much of a gain.\n. Some mad wizardry there, love it!\n. Yup, this is no different to how it used to work before.  In principle, this would only happen if installing directly from newest.(exe|dmg|...), which was not supported already.  Since that consideration is orthogonal to this change, I would leave this alone for now, and maybe add a ticket for better error signaling in next actual release.\n. Yes, I was concerned about the checks actually crashing when presented with a newest.??? filename, and I forgot about the path prefix.  I'll fix this.\n. Yes, sorry, I replied to that below.  Working on it, thanks.\n. That comment doesn't apply to the ubuntu version. $len is the length of the filename after the path has been stripped (at line 22).\n. Thanks, I'll look that up when I need more flexibility.  In this case, only starting-stopping a fixed interval timer is needed.\n. Feel free to gag this as soon as this service stops being a most likely target for debugging.\n. Sure, will do.\n. Good point, will do.\n. Oops, sorry, looked like a cut&paste error to me.\n. OK.  Maybe a getiantem.org or lantern.io subdomain?\n. I tried just naively CNAMEing peerdnsreg.lantern.io to peerdnsreg.herokuapp.com but that breaks HTTPS.  I guess we can fix that, but I don't think that should delay QA.  Maybe add a ticket to fix this before actual release?\n146436 2014-06-25 16:54:34,932 ERROR [Flashlight-Server-Manager-Heartbeat] pt.FlashlightServerManager.registerPeer (FlashlightServerManager.java:215) - Exception trying to register peer: javax.net.ssl.SSLException: hostname in certificate didn't match: <peerdnsreg.lantern.io> != <*.herokuapp.com> OR <*.herokuapp.com> OR <herokuapp.com>\n. Is it intentional that you say resource (singular) in the line above and resources (plural) in the one below?\n. Do we really need stop signing launchers now for some reason, or is this just cleaning up a flag that was ineffectual anyway?\n. Nit: Redundant?  (Can't hurt, though.)\n. Nit: Redundant?  (Can't hurt, though.)\n. Love this error message!  :D\n. Same resource/resources discrepancy as in the Linux versions.  Curiously enough, this doesn't happen in the OS X version.\n. (This is not introduced in this change, but) Flashlight itself comes with a set of baked in masquerades (including certs) for bootstrapping, and the cloud config will give it up-to-date ones.  What is the point of this DEFAULT_HOSTS_TO_CERTS mapping?  Won't it also become obsolete as soon as we start using the same set of root CAs for all masquerades?\n. Is this removal of the MasqueradeListener integral to this fix?  Is this just undoing a previous attempt at fixing this?  Or is this an unrelated change?  (Not opposing, just trying to understand.) \n. OK, IIUC this fixes the problem of a bad masquerade being reported as good as long as there are any reachable masquerades.  If no masquerade can be reached when this is called, we'll still return an arbitrary one.  This seems unlikely unless (i) we are disconnected or (ii) all our masquerade providers have stopped working.  In the case of (ii) we have bigger problems than this being misreported, I guess.  Not to hold this PR for too long, I'll assume that in the case of (i) this causes no problem in practice.\n. What do you mean by \"break\" in this last sentence?\n. So the Java side is using domain fronting directly, and IIUC we're managing the set of masquerades that the ~~Lantern~~ Java side uses separately from the ones in the Go side?  If we wanted to get rid of the duplicate management of masquerades, an option would be to just start a \"get mode\" flashlight provisionally, and shut it down later if we find we don't need it.\n. We could enter shutdown at this point.  This function should return the right value anyway, but the shutdown thread would be executed.  I assume this would be a no-op?\n. This nondeterminism violates the Comparator contract by making the \"ordering\" not a total order.\nhttps://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html\nStrictly speaking, the result of using this with sort is undefined.  Intuitively I think it should work well enough.  But I think a warning comment is warranted at least.  So, for example, we don't try to use this comparator to maintain a sorted tree or something like that.  That seems less likely to work.\n. Not that it matters, but since we are only using the count (i.e., the size of these lists) here, a bunch of ints would have done the job.\n. There is no synchronisation here, so if a second goroutine calls trustedDialers while the first call is at this point, they'll get an initially empty b.trusted, which will get filled afterwards while they're possibly using it (in the case of the code below, the list would have been found to have length 0 and ignored, using the untrusted list instead). \n. We actually support a few ports besides 80 and 443.  I don't know which of those are encrypted (8080 looks like it'll typically be unencrypted), or whether they pose any threat at all, but I thought I'd point it out:\nhttps://github.com/getlantern/lantern/blob/9363758350d904e61753bc0e99a9f1edc49ec2b2/src/github.com/getlantern/flashlight/flashlight.go#L269\n. See discussion in the PR.  Depending on how we communicate with our users about this, we might actually prefer to not proxy at all in this (unlikely) case.\n. If you consider 200 a magic number here you may want to say gohttp.StatusOK+99 instead of 299.\n. Why do we want to ensure that?\n[P.S.] I read below that the problem was that a second writer would block, but I don't think that could ever happen.  The only subtle problem that in principle could happen with the code below is that if the balancer gets initialized twice (because of unfortunately timed concurrent calls to initBalancer below) then the first occurrence of client.balCh below may refer to a different channel than the second one.  I don't think this could ever happen in practice anyway, because initBalancer is always called by Configure, which never gets called concurrently with itself IIUC.\nLong story short: I think client.balChMu and client.rpChMu are unnecessary and the only thing needed is a comment, in initBalancer and initReverseProxy, saying why we don't need to protect those.  If we want to lean on the safe side, we may protect those anyway, but protecting the channels themselves seems obfuscating to me.\n. Why are chained servers untrusted?  At the moment all of them are run by us.  When we introduce chained peers (and if we add them to the cloud.yaml as opposed to them being discovered only by kaleidoscope) we will need to make sure to mark those as untrusted.\n. Why move this up here and not highestQOS?\n. Good catch!\n. What does need protection is the checking and setting of client.balInitialized, unless we are otherwise making sure that two concurrent calls to getBalancer will never happen (and if we're assuming that, it'd be nice to have it documented).  \nBarring that, I don't think two concurrent writes to client.balCh could ever happen, since both initBalancer and getBalancer will receive from that channel before sending again.  The second one to try such a receive-and-send op would get blocked on the receive.\n. Good catch!  I wonder what ill effects this could be causing.\n. For clarity I'd make this \"untrusted \" if s.Trusted is false.\n. Why make it a named return value if it's never returned by name?  Doesn't make the code any shorter either, because it makes you declare l.\n. TBH all the comments in this body, especially this one, are just restating what the code says.  I find that more distracting than helpful.\n. Did you mean to write a docstring here?\n. As said above, maybe it would be clearer to explicitly state \"untrusted \" vs \"trusted \" instead of assuming the former by default.\n. This would perhaps be a better case for named return values (not that I think it matters enough to change it).\n. I've always seen the acronym spelled HTTPS, with a capital S.\n. Nit: I think the imperative \"hijack\" is more idiomatic for comments.  I wouldn't have bothered to make this remark on a new comment, but I think changing things should only be done if it's clearly for the better.\n. I think Go makes a special case for error variables so you don't have to declare the others?\n. I actually prefer it as a separate function.  Then it can more easily be documented (because it's more obvious to what scope the comment applies), it can be tested on its own, its internal variables don't pollute the namespace of the containing function and their scope is more contained.\nAgain, if you had written this inlined in first place I wouldn't have bothered to suggest that you extract it as a function.   But I think we should exercise more restraint in changing things only to match our preferred style, unless it is in preparation for other changes or to follow some guideline we have agreed upon as a team.  Otherwise someone else may (e.g.) extract this as separate function next month, and then all the reward for the work of both programmers and reviewers would have been noise in git history.\n. Again, I find the old comment had more meaning to ink ratio.\n. Never returned by name.\n. Good catch again!\n. I think this is also unnecessary unless we have two concurrent initializations (and in that case, that should be prevented explicitly).\n. I think anyone reading the Lantern source better be familiar with the fact that status codes correspond to integers.  I don't know them all by heart, though, so I like your constants.  If the awkwardness of mixing numbers and constants bothers you, you can hide it in a function, like\ngo\nfunc sameStatusCodeClass(statusCode1 int, statusCode2 int) bool {\n    // HTTP response status code \"classes\" come in ranges of 100.\n    classRange = 100\n    // These are all integers, so division truncates.\n    return statusCode1 / classRange == statusCode2 / classRange\n}\nThen you can make that check like\ngo\nif !sameStatusCodeClass(resp.StatusCode, http.StatusOK) {\n   ...\n}\n. The mutex doesn't guarantee that the balancer returned to the caller of getBalancer in goroutine 1 has not been closed when goroutine 1 tries to actually use it, since the mutex gets released when getBalancer returns and thus it can't protect the use of the returned value.  \nAlso, the balancer is the same one for all the callers of getBalancer between Configure calls.  If they're not prepared for the possibility that this balancer may be closed when they try and use it, we have a race condition.  It may be unlikely to cause problems if the callers of getBalancer only use the balancer shortly after obtaining it, but it's a race condition nonetheless and the mutex doesn't fix it. \n. Yeah, I understand the pattern.  What I meant is I think I read somewhere that Go would allow you to say clientConn, _, err := ..., that is, use := even though err has already been declared before.  So you could use this idiom without having to declare clientConn before.\nBut I tried this in a test program and I was wrong.  If you do this, clientConn would be scoped to the body of the if.  I must have confused this with some other special case involving errors.\n. It probably doesn't matter here, but in general it's considered bad form to mutate[1] arguments passed in unless that's the very purpose of the function.  The safest sequence would be to copy dialers into bal.dialers, then sort bal.dialers (which would leave dialers alone), then iterate over bal.dialers to collect the trusted ones into bal.trusted.\n[1] I wasn't sure whether ...this declaration syntax would result in the same slice being passed when called with this... syntax, or whether a copy would be made.  It turns out the same slice is passed, so the callee can modify it in place, with changes visible to the caller.  Try this: \n``` go\npackage main\nimport \"fmt\"\nfunc main() {\n    ss := []string{\"zero\", \"one\", \"two\"}\n    fmt.Println(ss)\n    change(ss...)\n    fmt.Println(ss)\n}\nfunc change(strs ...string) {\n    strs[2] = \"whoops\"\n}\n``\n. indeed!\n. Good catch, sorry for having failed to update the comment.\n. Good catch!\n. Here it would be a good place to declare theOnce` I mention in the next comment.\ngo\nvar once sync.Once\n. Why start a new polling goroutine whenever our location changes?  I see you added a mutex in yamlconf to protect against some of the damage, but this still builds up unnecessary polling requests.\nThis could be prevented by creating a sync.Once out of this callback (see above) and changing this line to\ngo\nonce.Do(func () { m.StartPolling() })\n. I'm not sure why this was being done, but I think this was done on purpose.   Actually, after removing this I don't think there is any point to having a country in the config anymore.\nPlausible reasons:\n- allow setting geolocation for testing stuff\n- save location across runs so the user dot doesn't start in null island until first geolocation request.\nSince none of these looks too compelling, I'm fine with removing these lines and cfg.Country.\n. I think this comment had a valid point.  If we wait indefinitely for geolookup (as this pub/sub scheme does), but the (domain fronted) geolookup server can't be reached for any reason related to the current config, then the client can never recover from that. \n. Telling topics by type, while it saves an argument in Pub calls, seems more odd and limiting to me than the convenience warrants.  Exposing a geolookup.Topic string constant and using that for Pub and Sub calls seems cleaner to me. \n. received is mutated in a different goroutine without synchronization.  Although apparently it works now, I don't think Go guarantees any kind of consistency here.  I'd signal success through a channel with a short timeout instead.\n. No reason to have poll return three values if its only caller only wants one.\n. I don't see why we should allow this to be called more than once.  It should either error or silently ignore further calls.\n. As said, I think concurrency should have been prevented by the caller, so these locks shouldn't be necessary.\n. I'm not sure that runtime.Gosched counts as synchronization over received though.  I agree if Go just ran these statements straightforwardly, received should have been mutated by the time it is checked.  And since this test passes, something close enough must be happening in the current version of Go.  All I'm saying is they reserve the right to mess with execution (e.g. for optimization) in ways that break otherwise reasonable assumptions about observability of changes to variables across goroutines.\nhttps://golang.org/ref/mem\n. That said, I'm not particularly worried in this case.  This is not production code and I expect in the worst case the test could give us some false alarm some day.\n. Sounds good.\n. ints work for me too.  The only problem is that I'd have preferred to have the constants in the module that defines what they're about (e.g. geolookup in this case).  But it's no big deal either way.\nIf you want to really enforce that constants are used you can make topics instances of a structure that is local to the pubsub package.\n. This is a shortcut for iterating over the arguments, so if you call ./uploadyaml.bash cn default, version takes the values cn and default in turn.\nhttp://stackoverflow.com/questions/255898/how-to-iterate-over-arguments-in-bash-script#comment1904260_255913\n. This is the same shortcut as described below.  If you run ./generate-fallbacks-json.bash nl jp, locale will take the values nl and jp in respective iterations of the loop. \n. Two things:\n- The config URL needs be changed to plain HTTP instead of HTTPS (see this comment).  I'll change that.\n- config/config.go is shared between the client and the server.  In the server side, dialer becomes nil and we get a runtime panic trying to access it.  We could try to somehow create a fronted dialer in the server side.  I haven't checked how hard that would be, but anyway that seems silly since servers need no fronting.  We could somehow pass a dialer to this function but it gets hard to reason about whether the dialer will be in sync with the current config.\nI think the easiest thing to do would be to have a cfg.GetDirectHttpClient() method like such (from the top of my head; I haven't checked it):\ngo\nfunc (cfg *Config) GetDirectHttpClient() (*http.Client, error) {\n    if Config.Role == \"server\" {\n        ret, err := util.HTTPClient(\"\", \"\")\n        if err != nil {\n            return nil, fmt.Errorf(\"Couldn't create direct server-side HTTP client: %v\", err)\n        }\n        return ret, nil\n    } else {\n        return cfg.Client.HighestQOSFrontedDialer().DirectHttpClient(), nil\n    }\n}\nP.S.: I guess the above snippet is not correct because I guess the plain util.HTTPClient will make the request through plain HTTP, while the DirectHttpClient will make it through HTTPS.  I'm confused about this stuff; will keep reading on it, but I think the basic idea is sound. \n. A lot of fronted.Dialers are created and discarded here.  Only the one that is returned has a chance of ever being Closed.  The code prior to this was storing the hqfd in the client so it could be closed.  Maybe these only need closing if they're ever used?\n. While withClient is always the same function for the lifetime of the Lantern client, c is always the latest fronter.\n. That is, inside a goroutine created within the body.  This is possibly dangerous and defeats the purpose of withClient:\ngo\nwithClient(func(c *http.Client) {\n  go fetchConfig(c)\n})\nbut this is fine\ngo\ngo func() {\n  withClient(func(c *http.Client) {\n    fetchConfig(c)\n  })\n}\n}\n. I don't think statserver nor analytics really needs a direct fronted dialer, but one change at a time...\n. Local in what sense?  Is the client's own IP used at all if the query includes an IP?  That is, if I do a geolookup query from my home to request the City of a peer in NY do I get a different response than if you do a query from your home?\nWhere is the server side code for geo.getiantem.org?\n. I don't think we really need this global, but one thing at a time...\n. If we don't really need to direct front to analytics, then we don't need the mch here and thus we don't need to store it in the MobileClient at all.\n. Good point; I'll change it.\n. Yes, I've renamed this to release which is more accurate anyway.\n. OK, will do.\n. Good catch; I didn't know that http.Clients needed closing.\n. I just realised there's a race condition here.  Concurrency is tricky!  :)  I'll submit a fix for that.\n. The WaitGroup is there to wait until all users of the Client are done with it before calling Dialer.Close().  My assumption is that Dialer.Close() abruptly closes all connections in the pool it manages.  I used to believe this was not the case, then I used to believe it was, now I'm not sure anymore; I'll trace the conpool code again. :/\nAnyway,\n- if that is the case, then we don't want to close the Dialer until all users of the Client are done with it,\n- if that is not the case, then we don't need the WaitGroup nor most of this package.\nSo I'll try and make sure which one it is.\n. > It looks to me like the connections are just closed without waiting for any existing data to do its thing:\n\nhttps://github.com/getlantern/lantern/blob/valencia/src/github.com/getlantern/connpool/connpool.go#L185\n\nYeah, that's what I thought too, but that line is closing a queued connection, that is, one that hasn't yet been fed to any user of the pool.\n. Not as bad, but close.  Note that\n- The default configuration didn't include the trusted CAs.  This was probably a bug and not by design.\n- The client was initially trying to fetch a new config without proxying.  Only if this succeeded would the trusted CAs be properly initialized.  If that failed for any reason, lantern-android would be a sitting duck for that run.\nBTW, I just realised that the trusted CAs were never updated after initial setup.  I just submitted a fix.\n. I agree.  I didn't change it (yet) because I hadn't made sure that was the case and that is orthogonal to using DDF for fetching the config.  Do you want me to change this for this PR, or shall we just open an issue to do a different one for that?\n. Go for it.  I'm actually itching to go back to the config server. :)\n. After that is fixed, we can probably remove fronter as a field in MobileClient, but that's not a pressing issue of course.\n. Is the CloudConfigCA guaranteed to be good for analytics?  I guess we shouldn't rely on Google using the same CA as S3.\nBTW, this reminds me we'll probably need to change the CloudConfigCA to Cloudflare's when we swap in the config server.  Or we could get a cert for the same CA?\n. We could maintain this locally in pollConfiguration, since it's only ever used by its callees.  But it's not a big deal to have it here either.\n. If an empty CA works, we better use that in the desktop client too.\n. It depends.  Do you think there's a realistic chance that Go defaults will miss the CA of a Google-run service? :)\n. Makes sense.  Good catch!\n. Good catch!\n. Nice, although if log debug goes to stderr maybe we don't need to care about limiting log output.\n. Not a big deal, but maybe it would be best for this to take a filename string and return ([]string, err), so it would be simpler to unit test.  Then let the caller handle flags and either exit on error or feed the unmarshalledFallbacks to the channel.  I'd push those basically-untestable-or-not-worth-testing tasks to the main function.\nThis is probably only worth changing when we actually get around to writing unit tests for this.  (That said, if you want to write them now it would be time well spent!)\n. A log.Debug would perhaps be more appropriate here.  (You probably inherited this printout, so sorry about that. :)\n. Nice.  In order to serialize error printouts you could have testFallbackServer return an error (which, incidentally, would turn all the fmt.Printlf(...); return into a single return statement) and here send any errors to an output channel.\n. And here you could close the output channel.  You could run testFallbacks in a goroutine and have the main goroutine consume the output channel, so when it gets closed the program can exit.\n. Again, I think you can just log this out and forget about the *verbose flag altogether.  I don't remember if the verbose flag was my idea; if so, sorry. :)  I didn't know that log output went to stderr.\n. That's an inicial capacity, not a limit, right?\n. Doesn't the change below obsolete the comment above?\n. [not important] I stay away from the lantern repo code for a while and I forget about the relationship between clients, dialers, transports etc.- transports have transports inside?  :S\n. I don't think s3cmd is used for anything anymore.  We used to upload the configuration to S3, but we're using redis instead now.\n. These links are broken.  They used to be relative to the parent directory, in which README this text used to be.  I imagine just prepending ../ to all of them would fix them, but of course ../genconfig can be omitted. \n. Yeah, the analogous step would be to use cfg2redis.py to upload the new configuration if desired.\n. \"You only to concern\" -> \"You only need concern\"... (it was already wrong in the original, sorry).\n. \"reenerate\" -> \"regenerate\" (also wrong in the original already).\n. Adding servers to the queue is currently done automatically as servers are pulled from it, so we don't do this manually anymore.\n. Unless you pass the --srv option, (which as I've just said, you shouldn't anymore), then the chained fallbacks are ignored.  I think this part of the docs should be removed or moved to a more marginal section.\n. Obsolete.  Nothing will be updated unless you specifically request it via one of the --global, --dc, or --srv flags, so making an empty fallbacks.json is unnecessary.  It may be a bit faster since the chained servers won't need to be checked, but I don't think this advantage compensates for the confusion potential, so I'd just remove this part.\n. TBH I'm not positive.  What's your concern here exactly?  We could always use InsecureSkipVerify and manually verify the cert afterwards.\n. There are no more domain-fronted servers (LFS, flashlight servers).\n. IIRC there's a genconfig.bash which embodies latest recommended usage.  I think this file should point to that, because that's the one we're actually using, and it's more likely to be kept up to date than this README.\n. This is pointless since it will be overwritten.  I think the current README already explains how this has been partially moved to  lantern_aws.\n. This section doesn't exist anymore.  We're never generating this manually.  The most similar thing we have is baked-in proxies, which @myleshorton can explain if it's not already documented somewhere.\n. Don't.  I can't think of a use for this and this hasn't been tested for ages, so it's probably not working.\n. @myleshorton : definitely no go files are used there.\n. ",
    "cholmes": "This seems like it's stale, and the original developer is no longer working on lantern, so closing. Re-open if someone is planning on merging it in.\n. Sounds like a great patch. I'm not a developer, so can't review it. But definitely is great to check for common paths.\nAnd a dialog to let a user pick a browser path would be great! We've talked about this, but never got to be a high enough priority. I'd say make a new branch / PR for that one. \nIf we add that we should be sure to make a documentation page to tell users how to find their chrome path.\n. @pekrr1e - did you have an updated pull request for this, in line with what @oxtoacart suggested? We'd love to get this merged in.\n. ",
    "oxtoacart": "\nThis change is on a branch, so we can choose to take it (or not take it) whenever we want\nI think that #981 actually addresses one of the most consistent and significant pieces of user feedback that we get, namely - 'what, I have to sign in to Google?!\".  Almost every single time I've seen us put Lantern in front of new users, they hesitate at this point, and many complain about it.  For some people like myself, their trepidation is compounded by the fact that we're asking them to enter their very private credentials into our application, rather than a more familiar and trusted environment like their web browser.  Actually doing the login in a web browser won't overcome everyone's reservations about signing into Lantern with Google, but I think it will overcome some people's.  Needless to say, this has potentially significant implications for adoption.\nDoing OAuth in a browser window seems to be a very standard scheme on both desktop and mobile apps, so I suspect that our fears about user confusion with such a process might be overblown.\n. I'll also add that as currently implemented, we automatically close the browser window, which most of the time will leave you looking right back at Lantern.  If you want to try it out, you can clone this branch and run it to see how it feels.\n\nTo be clear, I'm not advocating that we pull this into the 1.0 release, but I definitely want us to consider doing it for 1.1.\n. The path I took for #1073 ensures that the login flow always opens in a new browser window, such that when you close it you will be looking at Lantern again (unless you did some other stuff in between).  I'm not wedded to this, btw.\nAs @skivvies points out, OS X has the unfortunate behavior that closing the last browser window doesn't close the browser program, though on the other platforms the browser does get closed.\n@aranhoide I agree with @skivvies that this is not a choice which we need to present to the user.  We should figure out which flow works for most people and implement that as well as we can.  Because we have both available, we could certainly test both in our next UI testing session (whenever that is).\n. @pekrr1e Thank you for submitting this!  Can I ask for an enhancement before I merge this?  It would be really cool if you could structure this so that it uses the user's original Proxy PAC file as the basis for defaulting settings.\nIn other words, when Lantern installs its proxy PAC file, do this:\n1. Find out the path for the existing proxy PAC file\n2. Save the file\n3. Install Lantern's Proxy PAC and have it default to the original saved file (using the mechanism that you already created)\nThen, when Lantern uninstalls its proxy PAC file, have it restore the saved file.\nOn Windows, you can use org.lantern.win.WinProxy.  On OS X, we will have to update the program in Lantern Network Setup.  I'm happy to help with that.\nWhat do you think?\n. Manually merged\n. This first needs to be tested in a closed beta.  If the testing looks good, we'll incorporate it into master.\n. @myleshorton I put this on its own branch because I didn't want to step on what you were doing.\n. @myleshorton Please ignore my previous comment, which completely missed the point of your change :)\nI feel the pain that you're trying to address, especially with XMPP leaking into a lot of places and all the cyclic dependencies that we have between modules, and I think that this specific set of changes moves the ball forward.\nHowever, I'm concerned at the prospect of pervasive asynchrony and what that will do to the debuggability of the system, so I'd ask that we continue to be circumspect in our use of this technique.  I'd also like to talk at some point about layering and abstraction.  For example, I think we need a signaling channel abstraction that's completely independent of XMPP as an implementation, and that the rest of the system (including our NAT traversal logic) should be coded to this abstraction.\n. @myleshorton Sweet - that's good to know that we can make the call synchronous.  If we can figure out a nice way to step into the method if interest, skipping all the event bus plumbing, then we'd be golden.\n. @myleshorton From the little QT programming I did, I remember really liking their Signals and Slots abstraction.\n. @myleshorton Yes on merging this.  Also, good to know that the XMPP-specific APIs we're using are just convenience APIs.\n. @myleshorton Thanks for reviewing!  There are actually no patches to fteproxy itself, just its build process for Windows.  To get fteproxy to use custom regexes, we create a new definition file inside of the fte/defs folder at runtime and then tell fteproxy to use that.\nRegarding the use of java.util.Properties - that's what commons-cli returns to me for getting the key-value pairs from the command-line, so I figured I'd just stick with that data structure throughout.  If you feel strongly about it I can populate a Hashtable from the java.util.Properties and pass that on instead.\n. Sorry, I don't think I explained this very well.  The regexes are specified at the command-line for fallback servers, who publish an S3 configuration that includes those regexes.  The client gets those regexes through S3.\nBoth on the client and server, the FTE class takes the configured regexes and populates them into a file for fteproxy to use.\nSo, I think this is actually working exactly the way that you want.  The only case that it's not handling right now is P2P, which I figured we'd work out when we actually make P2P work.  Now that proxy configuration is unified under the ProxyInfo class, KScope ads already have the ability to include pluggable transport configuration, which the client will in theory honor, though I haven't tested this.  But basically, all the plumbing is there, we just need to figure out how we tell peer proxies which pluggable transport to use.\n. @myleshorton may I merge?\n. @AlirezaErshadi This change is a very old change from nearly a year ago and it doesn't merge cleanly anymore.  Can you please merge in your branch?\n. @AlirezaErshadi I'm closing this pull request.  Please feel free open another one if you get it to merge cleanly.\n. @myleshorton I use the local .s3config during development to allow me to point at various different proxies, including test proxies that I spool up just for development purposes.  How will I be able to do this if we merge this change?\nAlso, I'm totally on board with using cached configuration if that's already available, but what does that have to with whether or not we look for the availability of a local .s3config?\n. @myleshorton btw, what was the root cause of #1475?\n. @myleshorton https://github.com/myleshorton btw, what was the root cause\n\nof #1475 https://github.com/getlantern/lantern/issues/1475?\nIt was that the new S3ConfigFetcher would show an error message to the\nuser every time there was any error downloading the S3 config file\nregardless of whether you already had a valid proxy. We'd never see that in\ndevelopment because you'd never hit that code path.\n\nSo the hypothesis is that having a local config wasn't causing the bug, it\nwas just masking it in development.  And the actual fix for the root issue\nis to only display that error message if you don't have a valid proxy and\ncan't download the config, right?  The piece that I don't understand is\nthat IIRC the .s3config file isn't included in the Lantern installer, so if\nwe're testing using the Lantern installer, the local .s3config shouldn't\ncome into play and can't mask anything.  Is it possible that we missed this\nbug because reproducing it requires some level of network unreliability,\nwhich is not something that we test for when doing our manual tests?\nI also noticed that in your recent changes, you are once again copying the\n.lantern-configurl file from one place to another.  How does that play into\nfixing the bug?\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Sun, Apr 20, 2014 at 11:00 AM, myleshorton notifications@github.comwrote:\n\n@myleshorton https://github.com/myleshorton btw, what was the root\ncause of #1475 https://github.com/getlantern/lantern/issues/1475?\nIt was that the new S3ConfigFetcher would show an error message to the\nuser every time there was any error downloading the S3 config file\nregardless of whether you already had a valid proxy. We'd never see that in\ndevelopment because you'd never hit that code path.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1488#issuecomment-40897945\n.\n. On Sun, Apr 20, 2014 at 11:33 AM, myleshorton notifications@github.comwrote:\nThe piece that I don't understand is\nthat IIRC the .s3config file isn't included in the Lantern installer, so if\nwe're testing using the Lantern installer, the local .s3config shouldn't\ncome into play and can't mask anything.\nRight -- I'm saying it's masking it in development not in production.\nSorry, I think I was using the term development differently than you.\n What I'm referring to is the QA phase that we go through before\nreleasing, in which we install Lantern using the production installer and\nin which we did not catch this bug.\nIs it possible that we missed this\nbug because reproducing it requires some level of network unreliability,\nwhich is not something that we test for when doing our manual tests?\nNo, because in development you'd never fetch the remote config at all. The\nflakier the network the more likely the bug for sure, but we've received\nreports of it in production in LA, and the old code would just mask any\nissue there.\nThe question remains as to why we didn't catch this in QA and what the root\ncause actually is.  I think the root cause is actually that we display this\nalert any time that fetching the S3 configuration fails, irrespective of\nwhether or not we already know about a fallback.  The reason we didn't\ncatch it in QA is because we didn't test with a flaky enough network to\nstimulate that condition.\nI also noticed that in your recent changes, you are once again copying\nthe\n.lantern-configurl file from one place to another. How does that play into\nfixing the bug?\nI just reverted to the old version of the fetcher that didn't have this\nbug and didn't mask the issue (and is arguably much more straightforward\ncode), and that's what it did.\n\nThis doesn't fix the real issue, it actually just relaxes the condition\nthat shows the alert dialog in such a way as to defeat its purpose.  The\npoint of the dialog is not that the user doesn't have a .lantern-configurl\n(which is what the proposed fix checks), the point is that whether or not\nthe user has a .lantern-configurl file, Lantern was unable to actually\nfetch an S3 configuration to determine what fallback it should be using.\n We added that check because at that point, Lantern tries to blindly\ncontinue without any fallback, resulting in a whole bunch of other errors.\n Rather than plowing ahead without a fallback, we wanted Lantern to just\nlet the user know that it can't proceed.  There are two pieces that\nactually need to be fixed.  1) If we already know about a fallback, we\nshouldn't display that message and 2) we should store fallbacks that we\nlearned about from previous runs, otherwise we'll still see this error if\nthe S3 config fetch happens to fail right after starting up Lantern.\n Please see my comment near\nherehttps://github.com/getlantern/lantern/pull/1488/files#diff-39f2fe86e44c96e6c8aaca1cf4f88c1cR259\nfor\nfurther elaboration.\nSo, to be clear, the changes to support a local .s3config didn't break\nthis, and the most recent changes to remove that logic didn't fix it, they\njust masked it by changing the condition that displays the dialog.\nCheers,\nOx\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1488#issuecomment-40898766\n.\n. Here's my counter-proposal:\n\nhttps://github.com/getlantern/lantern/pull/1489\nI accidentally included some changes for #1487 in the checkin - the only\nchanges for the S3 issue are in the file S3ConfigFetcher.  Apologies for\nthe noise.\nAs it turns out, we already saved old S3Config info in the model\npersistently, so this change works within a single run and across runs.\nThe only thing that was weird is that I see the error message at the top of\nthe screen rather than a modal dialog.  I'm not sure when/how that behavior\nreverted, but it seems to be independent of this change.\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Sun, Apr 20, 2014 at 3:11 PM, Ox Cart ox@getlantern.org wrote:\n\nOn Sun, Apr 20, 2014 at 11:33 AM, myleshorton notifications@github.comwrote:\n\nThe piece that I don't understand is\nthat IIRC the .s3config file isn't included in the Lantern installer, so\nif\nwe're testing using the Lantern installer, the local .s3config shouldn't\ncome into play and can't mask anything.\nRight -- I'm saying it's masking it in development not in production.\nSorry, I think I was using the term development differently than you.\n What I'm referring to is the QA phase that we go through before\nreleasing, in which we install Lantern using the production installer and\nin which we did not catch this bug.\nIs it possible that we missed this\nbug because reproducing it requires some level of network unreliability,\nwhich is not something that we test for when doing our manual tests?\nNo, because in development you'd never fetch the remote config at all.\nThe flakier the network the more likely the bug for sure, but we've\nreceived reports of it in production in LA, and the old code would just\nmask any issue there.\nThe question remains as to why we didn't catch this in QA and what the\nroot cause actually is.  I think the root cause is actually that we display\nthis alert any time that fetching the S3 configuration fails, irrespective\nof whether or not we already know about a fallback.  The reason we didn't\ncatch it in QA is because we didn't test with a flaky enough network to\nstimulate that condition.\nI also noticed that in your recent changes, you are once again copying\nthe\n.lantern-configurl file from one place to another. How does that play into\nfixing the bug?\nI just reverted to the old version of the fetcher that didn't have this\nbug and didn't mask the issue (and is arguably much more straightforward\ncode), and that's what it did.\n\nThis doesn't fix the real issue, it actually just relaxes the condition\nthat shows the alert dialog in such a way as to defeat its purpose.  The\npoint of the dialog is not that the user doesn't have a .lantern-configurl\n(which is what the proposed fix checks), the point is that whether or not\nthe user has a .lantern-configurl file, Lantern was unable to actually\nfetch an S3 configuration to determine what fallback it should be using.\n We added that check because at that point, Lantern tries to blindly\ncontinue without any fallback, resulting in a whole bunch of other errors.\n Rather than plowing ahead without a fallback, we wanted Lantern to just\nlet the user know that it can't proceed.  There are two pieces that\nactually need to be fixed.  1) If we already know about a fallback, we\nshouldn't display that message and 2) we should store fallbacks that we\nlearned about from previous runs, otherwise we'll still see this error if\nthe S3 config fetch happens to fail right after starting up Lantern.\n Please see my comment near herehttps://github.com/getlantern/lantern/pull/1488/files#diff-39f2fe86e44c96e6c8aaca1cf4f88c1cR259 for\nfurther elaboration.\nSo, to be clear, the changes to support a local .s3config didn't break\nthis, and the most recent changes to remove that logic didn't fix it, they\njust masked it by changing the condition that displays the dialog.\nCheers,\nOx\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1488#issuecomment-40898766\n.\n. Apologies in advance to Chris for continuing this thread, but I want to\nmake sure that I fully understand this fix and that we get it right.\n\n\nOn Sun, Apr 20, 2014 at 10:21 PM, myleshorton notifications@github.comwrote:\n\nThe question remains as to why we didn't catch this in QA and what the root\ncause actually is. I think the root cause is actually that we display this\nalert any time that fetching the S3 configuration fails, irrespective of\nwhether or not we already know about a fallback.\nThat's definitely the root cause.\nCool.\nThe reason we didn't catch it in QA is because we didn't test with a\nflaky enough network to\nstimulate that condition.\nThat's part of it, and it's also that inherently in QA we tend not to run\nit for long enough or over multiple sessions. If you run the\ninstalled version of Lantern enough, you'll almost definitely get that\nwarning message with the previous code. That's why having the development\ncode match the production code is so important.\nI agree, we gotta test longer and over multiple sessions. FWIW, running in\ndevelopment wouldn't achieve this for me, because in development mode I'm\nconstantly restarting Lantern, blowing away the .lantern folder and causing\nother trouble as I monkey about with the code.  I think the real solution\nis to have a longer QA phase in which we all actively use a QA build of\nLantern for a week or so.\nThis doesn't fix the real issue, it actually just relaxes the condition\nthat shows the alert dialog in such a way as to defeat its purpose.\nI agree we should also show the alert if we actually have no fallbacks.\nNote that we have not yet heard of or seen that case in production - both\nEric and Chris reported #1475https://github.com/getlantern/lantern/issues/1475when running\nafter the initial install, and the logs we're getting for it are of\ncourse coming through a working fallback. It certainly could be happening,\nbut we haven't seen it.\nI'm quite sure that we did run into this in production, and that this was\nin fact the reason that you made this\nchangehttps://github.com/getlantern/lantern/commit/fa480cc07dc53dcda5e3f22d02bedf5b054c8fd0.\nI recall us seeing weird errors in logs that were caused by someone trying\nto run without actually having a fallback, so we decided to just interrupt\nthings when we weren't unable to get an S3 configuration on first run.\nThe code before this change will show the alert if your WiFi happens to\ngo out or with any other network error, though, making Lantern feel broken\n(try just turning your WiFi off with Lantern running). If we're saying the\nreal issue is with downloading the config file (#1474https://github.com/getlantern/lantern/issues/1474),\nmy changes address that in a few ways:\n1. Adds another retry to the HttpClient (we used to retry twice, now\n   we retry three times). Maybe we should retry more?\nRetrying like this buys us a little something.  The config checker runs\nperiodically anyway, so if one check fails, it will retry again later\nanyway.  But, if this happens on a first run of Lantern then retrying a few\ntimes may help, although that largely depends on the type of network\ndisturbance.\n1. To thwart potential censors causing this issue as a result of\n   identifying HTTP request message sizes, it adds a random length header to\n   the HTTP request.\nThat's a good thing to have, but I'd be surprised if we've run into this\nin the wild.\n1. It requests the config file through the fallback if it can't reach\n   it directly. Just the fact that we're getting logs for this again indicates\n   that the fallback is accessible in many of these cases, so we should be\n   able to access the config file through the fallback some percentage of the\n   time.\nUsing the fallback is intended to deal with the S3 download being somehow\nblocked in production, right?  I seriously doubt that the S3 url was\nblocked in production.  If it was, then we have bigger issues to deal with,\nin particular that you wouldn't have been able to discover a fallback in\nthe first place because your S3 url was blocked :)\nwe should store fallbacks that we\nlearned about from previous runs, otherwise we'll still see this error if\nthe S3 config fetch happens to fail right after starting up Lantern.\nAs you mentioned, the code already does that.\nSo, to be clear, the changes to support a local .s3config didn't break\nthis, and the most recent changes to remove that logic didn't fix it, they\njust masked it by changing the condition that displays the dialog.\nWell, those changes created all the instances of the bug (#1475https://github.com/getlantern/lantern/issues/1475)\nwe've actually seen.\nYeah, I still don't get that.  As far as I can tell, #1475 is 100% due to\nthe fact that we show the error anytime there's a problem fetching the S3\nconfig, irrespective of whether or not you already have an S3 config in\nyour model.  Are you saying that having the local file mechanism is somehow\ncausing errors on fetching a remote configuration?  I don't see how.\nThe changes fix those cases but also don't show it in the case where we\ncan't download the config file and have never been able to, but that's a\npretty simple change. The changes take steps towards fixing #1474https://github.com/getlantern/lantern/issues/1474,\nbut there will also always be cases where we can't download that file due\nto network issues.\nI see that you corrected the\nconditionhttps://github.com/getlantern/lantern/commit/06ae0f546518fb8ec2c563ed0849926f29d2857ffor\nthe dialog in your PR, thanks!  I like having the condition in a\nwell-named method like the one you created.  With that change in place, the\nPR fixes the bug, though I would personally still prefer that we maintained\nthe ability to have a local S3 config mechanism.  I also don't understand\nthe need for copying the .lantern-configurl file as this code does, which\nseems to add an unnecessary level of indirection.  Ultimately though, it\nlooks like the code in this PR ought to work, so if I need to just\nacquiesce on the local .s3config thing, I will - it'll just slow me down a\nbit while I'm developing new pluggable transports and such.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1488#issuecomment-40913589\n.\n. Oh, the other thing that occurred to me about the local .s3config is that\nit is what allows the automated unit tests to run in our continuous build\nenvironment.  If we get rid of it, we need to replace it with something\nelse that allows the tests to find a fallback against which to run.\n\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Mon, Apr 21, 2014 at 5:04 AM, Ox Cart ox@getlantern.org wrote:\n\nApologies in advance to Chris for continuing this thread, but I want to\nmake sure that I fully understand this fix and that we get it right.\nOn Sun, Apr 20, 2014 at 10:21 PM, myleshorton notifications@github.comwrote:\n\nThe question remains as to why we didn't catch this in QA and what the\nroot\ncause actually is. I think the root cause is actually that we display this\nalert any time that fetching the S3 configuration fails, irrespective of\nwhether or not we already know about a fallback.\nThat's definitely the root cause.\nCool.\nThe reason we didn't catch it in QA is because we didn't test with a\nflaky enough network to\nstimulate that condition.\nThat's part of it, and it's also that inherently in QA we tend not to run\nit for long enough or over multiple sessions. If you run the\ninstalled version of Lantern enough, you'll almost definitely get that\nwarning message with the previous code. That's why having the development\ncode match the production code is so important.\nI agree, we gotta test longer and over multiple sessions. FWIW, running in\ndevelopment wouldn't achieve this for me, because in development mode I'm\nconstantly restarting Lantern, blowing away the .lantern folder and causing\nother trouble as I monkey about with the code.  I think the real solution\nis to have a longer QA phase in which we all actively use a QA build of\nLantern for a week or so.\nThis doesn't fix the real issue, it actually just relaxes the condition\nthat shows the alert dialog in such a way as to defeat its purpose.\nI agree we should also show the alert if we actually have no fallbacks.\nNote that we have not yet heard of or seen that case in production - both\nEric and Chris reported #1475https://github.com/getlantern/lantern/issues/1475when running\nafter the initial install, and the logs we're getting for it are of\ncourse coming through a working fallback. It certainly could be happening,\nbut we haven't seen it.\nI'm quite sure that we did run into this in production, and that this was\nin fact the reason that you made this changehttps://github.com/getlantern/lantern/commit/fa480cc07dc53dcda5e3f22d02bedf5b054c8fd0.\nI recall us seeing weird errors in logs that were caused by someone trying\nto run without actually having a fallback, so we decided to just interrupt\nthings when we weren't unable to get an S3 configuration on first run.\nThe code before this change will show the alert if your WiFi happens to\ngo out or with any other network error, though, making Lantern feel broken\n(try just turning your WiFi off with Lantern running). If we're saying the\nreal issue is with downloading the config file (#1474https://github.com/getlantern/lantern/issues/1474),\nmy changes address that in a few ways:\n1. Adds another retry to the HttpClient (we used to retry twice, now\n   we retry three times). Maybe we should retry more?\nRetrying like this buys us a little something.  The config checker runs\nperiodically anyway, so if one check fails, it will retry again later\nanyway.  But, if this happens on a first run of Lantern then retrying a few\ntimes may help, although that largely depends on the type of network\ndisturbance.\n1. To thwart potential censors causing this issue as a result of\n   identifying HTTP request message sizes, it adds a random length header to\n   the HTTP request.\nThat's a good thing to have, but I'd be surprised if we've run into this\nin the wild.\n1. It requests the config file through the fallback if it can't reach\n   it directly. Just the fact that we're getting logs for this again indicates\n   that the fallback is accessible in many of these cases, so we should be\n   able to access the config file through the fallback some percentage of the\n   time.\nUsing the fallback is intended to deal with the S3 download being somehow\nblocked in production, right?  I seriously doubt that the S3 url was\nblocked in production.  If it was, then we have bigger issues to deal with,\nin particular that you wouldn't have been able to discover a fallback in\nthe first place because your S3 url was blocked :)\nwe should store fallbacks that we\nlearned about from previous runs, otherwise we'll still see this error if\nthe S3 config fetch happens to fail right after starting up Lantern.\nAs you mentioned, the code already does that.\nSo, to be clear, the changes to support a local .s3config didn't break\nthis, and the most recent changes to remove that logic didn't fix it, they\njust masked it by changing the condition that displays the dialog.\nWell, those changes created all the instances of the bug (#1475https://github.com/getlantern/lantern/issues/1475)\nwe've actually seen.\nYeah, I still don't get that.  As far as I can tell, #1475 is 100% due to\nthe fact that we show the error anytime there's a problem fetching the S3\nconfig, irrespective of whether or not you already have an S3 config in\nyour model.  Are you saying that having the local file mechanism is somehow\ncausing errors on fetching a remote configuration?  I don't see how.\nThe changes fix those cases but also don't show it in the case where we\ncan't download the config file and have never been able to, but that's a\npretty simple change. The changes take steps towards fixing #1474https://github.com/getlantern/lantern/issues/1474,\nbut there will also always be cases where we can't download that file due\nto network issues.\nI see that you corrected the conditionhttps://github.com/getlantern/lantern/commit/06ae0f546518fb8ec2c563ed0849926f29d2857ffor the dialog in your PR, thanks!  I like having the condition in a\nwell-named method like the one you created.  With that change in place, the\nPR fixes the bug, though I would personally still prefer that we maintained\nthe ability to have a local S3 config mechanism.  I also don't understand\nthe need for copying the .lantern-configurl file as this code does, which\nseems to add an unnecessary level of indirection.  Ultimately though, it\nlooks like the code in this PR ought to work, so if I need to just\nacquiesce on the local .s3config thing, I will - it'll just slow me down a\nbit while I'm developing new pluggable transports and such.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1488#issuecomment-40913589\n.\n. Hey, sorry, I think I just figured out why you associate the addition of a\nlocal .s3config file with the production issue.  Vis a vis this original\nchangehttps://github.com/getlantern/lantern/blob/master/src/test/java/org/lantern/util/UnsafePublicIpAddressTest.javato\ninclude a message, when I added the local .s3config stuff, I also\nchanged the condition for displaying the message to cover not only\nscenarios in which the file isn't present, but also scenarios in which we\ncan't download the s3config.  What I didn't account for is when this\nhappens despite already having an s3 configuration available from a\nprevious fetch, which is the root cause of the bug that Eric and Chris\nobserved.\n\n\nGiven that Eric and Chris have gotten this message in production, is it\nfair to say that we do in fact encounter scenarios in which the S3\nconfiguration can't be downloaded and that it's good to have this messaging\nin there (with the added check of only displaying it when you don't already\nhave fallbacks)?\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Mon, Apr 21, 2014 at 7:15 AM, Ox Cart ox@getlantern.org wrote:\n\nOh, the other thing that occurred to me about the local .s3config is that\nit is what allows the automated unit tests to run in our continuous build\nenvironment.  If we get rid of it, we need to replace it with something\nelse that allows the tests to find a fallback against which to run.\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Mon, Apr 21, 2014 at 5:04 AM, Ox Cart ox@getlantern.org wrote:\n\nApologies in advance to Chris for continuing this thread, but I want to\nmake sure that I fully understand this fix and that we get it right.\nOn Sun, Apr 20, 2014 at 10:21 PM, myleshorton notifications@github.comwrote:\n\nThe question remains as to why we didn't catch this in QA and what the\nroot\ncause actually is. I think the root cause is actually that we display\nthis\nalert any time that fetching the S3 configuration fails, irrespective of\nwhether or not we already know about a fallback.\nThat's definitely the root cause.\nCool.\nThe reason we didn't catch it in QA is because we didn't test with a\nflaky enough network to\nstimulate that condition.\nThat's part of it, and it's also that inherently in QA we tend not to\nrun it for long enough or over multiple sessions. If you run the\ninstalled version of Lantern enough, you'll almost definitely get that\nwarning message with the previous code. That's why having the development\ncode match the production code is so important.\nI agree, we gotta test longer and over multiple sessions. FWIW, running\nin development wouldn't achieve this for me, because in development mode\nI'm constantly restarting Lantern, blowing away the .lantern folder and\ncausing other trouble as I monkey about with the code.  I think the real\nsolution is to have a longer QA phase in which we all actively use a QA\nbuild of Lantern for a week or so.\nThis doesn't fix the real issue, it actually just relaxes the condition\nthat shows the alert dialog in such a way as to defeat its purpose.\nI agree we should also show the alert if we actually have no fallbacks.\nNote that we have not yet heard of or seen that case in production - both\nEric and Chris reported #1475https://github.com/getlantern/lantern/issues/1475when running\nafter the initial install, and the logs we're getting for it are of\ncourse coming through a working fallback. It certainly could be happening,\nbut we haven't seen it.\nI'm quite sure that we did run into this in production, and that this was\nin fact the reason that you made this changehttps://github.com/getlantern/lantern/commit/fa480cc07dc53dcda5e3f22d02bedf5b054c8fd0.\nI recall us seeing weird errors in logs that were caused by someone trying\nto run without actually having a fallback, so we decided to just interrupt\nthings when we weren't unable to get an S3 configuration on first run.\nThe code before this change will show the alert if your WiFi happens\nto go out or with any other network error, though, making Lantern feel\nbroken (try just turning your WiFi off with Lantern running). If we're\nsaying the real issue is with downloading the config file (#1474https://github.com/getlantern/lantern/issues/1474),\nmy changes address that in a few ways:\n1. Adds another retry to the HttpClient (we used to retry twice, now\n   we retry three times). Maybe we should retry more?\nRetrying like this buys us a little something.  The config checker runs\nperiodically anyway, so if one check fails, it will retry again later\nanyway.  But, if this happens on a first run of Lantern then retrying a few\ntimes may help, although that largely depends on the type of network\ndisturbance.\n1. To thwart potential censors causing this issue as a result of\n   identifying HTTP request message sizes, it adds a random length header to\n   the HTTP request.\nThat's a good thing to have, but I'd be surprised if we've run into this\nin the wild.\n1. It requests the config file through the fallback if it can't\n   reach it directly. Just the fact that we're getting logs for this again\n   indicates that the fallback is accessible in many of these cases, so we\n   should be able to access the config file through the fallback some\n   percentage of the time.\nUsing the fallback is intended to deal with the S3 download being\nsomehow blocked in production, right?  I seriously doubt that the S3 url\nwas blocked in production.  If it was, then we have bigger issues to deal\nwith, in particular that you wouldn't have been able to discover a fallback\nin the first place because your S3 url was blocked :)\nwe should store fallbacks that we\nlearned about from previous runs, otherwise we'll still see this error if\nthe S3 config fetch happens to fail right after starting up Lantern.\nAs you mentioned, the code already does that.\nSo, to be clear, the changes to support a local .s3config didn't break\nthis, and the most recent changes to remove that logic didn't fix it,\nthey\njust masked it by changing the condition that displays the dialog.\nWell, those changes created all the instances of the bug (#1475https://github.com/getlantern/lantern/issues/1475)\nwe've actually seen.\nYeah, I still don't get that.  As far as I can tell, #1475 is 100% due to\nthe fact that we show the error anytime there's a problem fetching the S3\nconfig, irrespective of whether or not you already have an S3 config in\nyour model.  Are you saying that having the local file mechanism is somehow\ncausing errors on fetching a remote configuration?  I don't see how.\nThe changes fix those cases but also don't show it in the case where we\ncan't download the config file and have never been able to, but that's a\npretty simple change. The changes take steps towards fixing #1474https://github.com/getlantern/lantern/issues/1474,\nbut there will also always be cases where we can't download that file due\nto network issues.\nI see that you corrected the conditionhttps://github.com/getlantern/lantern/commit/06ae0f546518fb8ec2c563ed0849926f29d2857ffor the dialog in your PR, thanks!  I like having the condition in a\nwell-named method like the one you created.  With that change in place, the\nPR fixes the bug, though I would personally still prefer that we maintained\nthe ability to have a local S3 config mechanism.  I also don't understand\nthe need for copying the .lantern-configurl file as this code does, which\nseems to add an unnecessary level of indirection.  Ultimately though, it\nlooks like the code in this PR ought to work, so if I need to just\nacquiesce on the local .s3config thing, I will - it'll just slow me down a\nbit while I'm developing new pluggable transports and such.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1488#issuecomment-40913589\n.\n. Yup, all good to merge.\n\n\n\nRegarding the retrying of POST requests - it's the age-old double-submit\nproblem.  Once the client has tried the first POST and then receives an IO\nexception, there's no reliable way of knowing whether or not the server\nprocessed the first POST.  If the client automatically retries, it could\nend up with a double POST.  Since POST is specifically defined as a\nnon-idempotent method, this could cause trouble (think online purchase,\nbank transaction, etc.).\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Mon, Apr 21, 2014 at 1:54 PM, myleshorton notifications@github.comwrote:\n\nAll good to merge this?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1488#issuecomment-40964148\n.\n. 1. Nice work!  This seems like a pragmatic way to fix the issue, and I don't see any issues with the code.\n2. It's very edge case, but what happens if connectivity is lost between the time that we fire the event and the time that we attempt to establish the XMPP connection?\n3. I would so dearly love to see the whole startup sequence factored to look more like the below pseudo code so that anyone can quickly understand what needs to happen and the dependencies/order of it, but that's too big/risky of a change to do at the moment.\n\nconfigureProxies()\nauthenticateToGoogle()\nconnectToXMPP()\nloadFriends()\nkickOffAsynchronousBackgroundTasks()\n. @myles if you feel that you've tested enough, I'll happily merge.\n. This must have been fun to debug, nice work!\n. @myleshorton Thanks for pulling.  I'm trying to do all changes to lantern as prs.  Is that overkill?\n. We should also review the following projects in full (as they contribute to the flashlight binary included with this pull)\nhttps://github.com/getlantern/flashlight\nhttps://github.com/getlantern/keyman\nhttps://github.com/getlantern/keyman/tree/master/certimporter\n. Superceded by most recent non-MITM'ing flashlight.\n. @myleshorton just one method naming nitpick, good otherwise.\n. Looks good!\n. Interesting about that warning message.  I don't remember the old extension doing that...\n. LGTM.  The only thing I can think of to add would be some explanation of what this means.\n. Love how succinct this whole thing is.\n. Should be a PR into devel, not master.\n. Plan sounds good.\nOn May 16, 2014 9:55 AM, \"aranhoide\" notifications@github.com wrote:\n\nOh crap I borked this badly. :( I'll try and revert.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1554#issuecomment-43340739\n.\n. Yup, doing so now.  Just need to install Ubuntu first :)\n\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Fri, May 16, 2014 at 11:36 AM, myleshorton notifications@github.comwrote:\n\nThat is odd. Building the installers in GUI mode should yield more\ndebugging info in theory.\nOn Friday, May 16, 2014, aranhoide notifications@github.com wrote:\n\nDamn. I'm having the stupid day.\nI tested that this installed Lantern alright, but I failed to check its\nvery purpose. And indeed building an installer with\n./debInstall64Bit.bash\nlocal false and installing the corresponding .deb failed to give me a\n~/.lantern-configurl.txt , just like in my own tests. I looked both in\nmy\nhome directory and /root. So this seems not to be working on Linux at\nleast.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/getlantern/lantern/pull/1554#issuecomment-43344315>\n.\n\n\n\nAdam\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1554#issuecomment-43352286\n.\n. So, the problem on Linux is that our main installer requires that it be run as root (i.e. using sudo).  That results in Install4J picking up the root user's home directory instead of the actual user's home directory.\n\nbash\nox@ubuntu:/tmp/hometest$ cat Home.java \npublic class Home {\n    public static void main(String[] args) {\n        System.out.println(System.getProperty(\"user.home\"));\n    }\n}\nox@ubuntu:/tmp/hometest$ javac Home.java \nox@ubuntu:/tmp/hometest$ java Home\n/home/ox\nox@ubuntu:/tmp/hometest$ sudo java Home\n/root\nThis is not a problem with the installer wrapper because it doesn't run as root.\n. I did test with Windows XP yesterday.\n. @aranhoide Thanks for reviewing!\n. Good work!  Please see my comments inline.  Also, please remove these two files, since they're no longer used:\nhttps://github.com/getlantern/lantern/blob/master/install/common/GeoIP.dat\nhttps://github.com/getlantern/lantern/blob/master/GeoIP.dat\nAnd also, please remove the MaxMind dependency from the pom.\n. Can you show an example of the JSON that's causing this error?\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Thu, May 29, 2014 at 4:22 AM, atavism notifications@github.com wrote:\n\nI've worked through all of the fixes, including injecting the\nHttpClientFactory and making sure all geo lookups are handled by proxy\nI'm seeing a single issue now:\n4061 2014-05-29 02:03:56,346 WARN [Lantern-Async-Event-Thread-0]\ngeoip.GeoData.queryGeoServe (GeoData.java:87) - Error parsing JSON from geo\nlookup Unexpected character ('B' (code 66)): expected a valid value\n(number, String, array, object, 'true', 'false' or 'null')\ngo-geoserve returns JSON results with nested country and location\nresources. I'm mapping these to nested classes in GeoData, which requires a\nchange to our lantern-common JsonUtils to \"detect all member fields\":\nmapper.setVisibility(JsonMethod.FIELD, JsonAutoDetect.Visibility.ANY) //\nauto-detect all member fields\nhttp://wiki.fasterxml.com/JacksonFeatureAutoDetect\nBut I'm guessing there's a reason this isn't already enabled (it looks to\ncause chaos/all sorts of problems when I do enable it!)? Is there an easier\nway to extract the nested JSON or an existing example I can refer to?\nThanks!!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1565#issuecomment-44514402.\n. I tried running what's currently in Git to take a closer look, but it's not\ncompiling.  If you can check in what you have right now, I'll run it and\ntake a look.\n\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Fri, May 30, 2014 at 5:16 PM, atavism notifications@github.com wrote:\n\n@oxtoacart https://github.com/oxtoacart Any idea what I'm doing wrong\nhere?\nfinal HttpResponse response = proxied.execute(get);\n  final int status = response.getStatusLine().getStatusCode();\n  System.err.println(\"Status: \"+status);\n  is = response.getEntity().getContent();\n  final String geoStr = IOUtils.toString(is);\n  System.out.println(\"geolookup response \" + geoStr);\n  return JsonUtils.OBJECT_MAPPER.readValue(geoStr, GeoData.class);\nEver since I started proxying the geo lookup requests, I keep getting a\nHTTP 502 error (\"Bad Gateway:\nhttp://go-geoserve.herokuapp.com/lookup/107.170.126.243\"), but I'm\ninjecting the HttpClientFactory now and implemented it similar to how it's\nbeing done in S3ConfigFetcher. Any chance you could take a look when you\nget a moment? Thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1565#issuecomment-44705619.\n. Cool, it compiles.  Running now.\n\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Fri, May 30, 2014 at 5:29 PM, atavism notifications@github.com wrote:\n\nJust added the missing files.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1565#issuecomment-44706551.\n. Ah, it's a startup ordering issue.  If you look at your logs, you'll see\nsomething like this:\n\nFallback Order (0 proxies)\nSince there are no remote proxies, the local GetModeProxy returns a 503 Bad\nGateway.\nThe stacktrace is interesting, as it indicates that we're trying to do\ngeolocation at the time that we're actually registering a proxy.  This will\nrequire some thought ...\nat org.codehaus.jackson.map.ObjectMapper.readValue(ObjectMapper.java:1863)\nat org.lantern.geoip.GeoData.queryGeoServe(GeoData.java:86)\nat\norg.lantern.geoip.GeoIpLookupService.getGeoData(GeoIpLookupService.java:42)\nat org.lantern.DefaultPeerFactory.updateGeoData(DefaultPeerFactory.java:124)\nat org.lantern.DefaultPeerFactory.updateGeoData(DefaultPeerFactory.java:115)\nat org.lantern.DefaultPeerFactory.updatePeer(DefaultPeerFactory.java:155)\nat org.lantern.DefaultPeerFactory.updatePeer(DefaultPeerFactory.java:137)\nat\norg.lantern.DefaultPeerFactory.onOutgoingConnection(DefaultPeerFactory.java:163)\nat\norg.lantern.proxy.DefaultProxyTracker.successfullyConnectedToProxy(DefaultProxyTracker.java:395)\nat\norg.lantern.proxy.DefaultProxyTracker.doAddProxy(DefaultProxyTracker.java:326)\nat\norg.lantern.proxy.DefaultProxyTracker.addProxy(DefaultProxyTracker.java:231)\nat\norg.lantern.proxy.DefaultProxyTracker.addSingleFallbackProxy(DefaultProxyTracker.java:485)\nat\norg.lantern.proxy.DefaultProxyTracker.addFallbackProxies(DefaultProxyTracker.java:467)\nat\norg.lantern.proxy.DefaultProxyTracker.onNewS3Config(DefaultProxyTracker.java:154)\nat org.lantern.proxy.DefaultProxyTracker.init(DefaultProxyTracker.java:100)\nat org.lantern.Launcher.startNetworkServices(Launcher.java:398)\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Fri, May 30, 2014 at 5:29 PM, Ox Cart ox@getlantern.org wrote:\n\nCool, it compiles.  Running now.\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Fri, May 30, 2014 at 5:29 PM, atavism notifications@github.com wrote:\n\nJust added the missing files.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1565#issuecomment-44706551.\n. Maybe we could start by moving the call from DefaultProxyTracker to\npeerFactory.onOutgoingConnection() towards the end of the\nsuccessfullyConnectedToProxy method?\n\n\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Fri, May 30, 2014 at 7:07 PM, atavism notifications@github.com wrote:\n\nAh, interesting. Thanks for pinpointing the problem. I need to make sure\nwe have some proxies available before attempting the geolocation then.\nMaybe trigger a geolocation callback after we've successfully registered a\nfallback?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1565#issuecomment-44712022.\n. +1 on using setters all-around and getting rid of the @JsonAutodetect stuff.  If you don't want to expose Country and Location, you can just omit their getters.  Getting really close!\n. @myleshorton It's about 1.2K of data.  To put that into perspective, the play button of the video on the Lantern homepage is 2.5K of data.  go-geoserve already caches the json, so subsequent requests of already cached ips don't have to do anything other than just write out this json.  If we start trying to create custom JSON based on query parameters, we might actually increase CPU usage on the server.  Unless and until this becomes a performance issue, I would suggest leaving it alone.\n. My recommendation is to not mess with the S3Config and just hardcode this url - geo.getiantem.org.  It's a DNS name that we control, so if we ever want to point it at a different server we can.\n. @myleshorton Regarding go-geoserve performance...  I agree that it needs to perform well, but before we go changing a bunch of stuff we should first see if it actually has any performance issues.  In casual testing from my Mac, the single free Heroku instance that we have running this thing is able to serve 728 request per second to 400 concurrent clients out of its cache.  Considering that clients cache geo lookups too, this feels like it's plenty fast.\n\nRegarding memory usage - even at the current response size, we can cache 1 million IPs in around 1 GB of RAM, which seems like quite a bit.\nAlso, depending on what we're doing in our UI redesign, I could imagine that we'll end up wanting more data than just country + lat/lon anyway (e.g. city).  If we have it anyway, it would be easy to add to the UI.\nI'm not saying that your suggestions aren't potentially worthwhile, but they feel like premature optimizations right now.\n. I have just three things, and then I think this is ready to merge.  These are all commented inline as well, but just to catalog them:\n1. Geo service needs to always return a GeoData, even if it couldn't geolocate\n2. GeoData needs to continue to expose read-only countrycode, latitude and longitude properties, otherwise the UI will break\n3. GeoData, Country and Location JavaBeans should follow the JavaBeans convention by using private fields starting with lowercase letters.\n. Sorry, one other thing - please make sure that you've tested that Lantern works by wiping your .lantern folder, running mvn clean and the running with ./run.bash.  In particular, make sure that your dot shows up where it should on the map.\n. BTW, I just tested and my dot shows up as expected.\n. Ditto.\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Wed, Jun 4, 2014 at 10:48 AM, myleshorton notifications@github.com\nwrote:\n\nAh interesting -- makes sense. It's because the json itself is a little\nnot-standard in that it uses uppercase characters. I'm surprised Jackson\ndoesn't just treat those the same, but clearly it doesn't! Sorry for\nsteering you in the wrong direction on that one @atavism.\nOn Wed, Jun 4, 2014 at 7:56 AM, atavism notifications@github.com wrote:\n\n@oxtoacart https://github.com/oxtoacart Thanks. Except for deleting\nthe\n.lantern folder to be extra thorough, that's how I had been testing. The\ndot shows up for me as expected too and all tests pass.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1565#issuecomment-45100977.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1565#issuecomment-45108546.\n. @myleshorton Thanks!  Yeah, doing the IP lookup along with the geolocation feels right somehow.  I haven't refactored the client code to take full advantage of this, in part because I don't want to interfere with what @atavism is doing in that area.  I think that PR may actually be ready now, so once it's merged to devel I'll reverse merge into flashlight2.\n. @myleshorton Did you mean to merge this into devel?\n. LGTM!  Merged.\n. LGTM\n. Manually merged\n. At its core, this looks solid to me.  I really love the use of a state machine here.  I'll have to remember that pattern for future use.\n\nI do think that a unit test is called for to make sure the state machine is doing what it's supposed to.  The way you've structured it should make that pretty straightforward.\nThere are also some minor comments.  Please fix which ever you feel are worth fixing and let me know when you'd like me to merge.\n. LGTM.  Just one question about the seemingly redundant set.remove() call.  I want to understand this to make sure there isn't some other issue here.\n. Oh yeah, I misread that comment.  That behavior is not at all what I would have expected either.  Good catch!\n. This pulls in LittleProxy fix 159.  This ensures that when we encounter a problem connecting to a proxy and fall back to an alternate proxy, it works.\n. For some reason I can't check out this branch.  I was able to merge it into my 1665 branch.  When I did so, I still saw the \"Communicating with Google Talk\" message in the UI.  Is that supposed to be gone now?\n. Oh, I get it - we still need to log in to XMPP.  We're just no longer waiting for the closed beta status.  Makes sense to me.\n. @myleshorton This looks good to me as is if you want to leave the \"Connecting to Google Talk\" thing alone.\n. Thanks!\n. These are scenarios in which you will see the warning (assuming port\nmapping doesn't work)\n1. run lantern for the first time, choose give mode, finish setup sequence\n2. Start a Lantern that already in give mode\n3. Switch from Get to give mode\n4. Lose and regain internet connectivity\nOnce you dismiss the message, it remains dismissed until you encounter one\nof the above scenarios again\nOn Aug 23, 2014 8:33 PM, \"myleshorton\" notifications@github.com wrote:\n\nIt looks like the only thing that's different here from what we were\nchatting about earlier is that this still shows these messages whenever\nthey arise and doesn't take into account whether or not you're in the\nmiddle of setup, is that right?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1742#issuecomment-53173649.\n. Nice!  Can you go ahead and remove flashlightcheckerurl from BaseS3Config while you're in there?\n. One question I have is why the check would ever fail if we are in fact port mapped?\n. No change to flashlight binary.\nOn Sep 9, 2014 12:29 PM, \"myleshorton\" notifications@github.com wrote:\nLooks fine to me. This needs new flashlight binaries too right? Do you\nwant to add those to this branch as well, or should I look at the latest\nFlashlight PR as well, and we can pull that in while we're at it?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1800#issuecomment-55005638.\n. @atavism It would have been helpful to do the UI changes in their own branch and PR them into lantern-ui master, just to make comparison and discussion easier.\n\nI'll base my review on this comparison\n. So, it turns out that too many files changed for the comparison to show them all, so I'm starting by just testing from the ui-updates branch.\nThe first thing I found is that the little buttons at the bottom right (Friends, Proxied Sites, Settings) don't work anymore.  The console shows the below error:\nPOST http://127.0.0.1:11016/c6_MJdeSqqWssMawCJIZqQ/api/0.0/interaction/settings 400 (invalid X-Requested-With) angular.js:8560\ninteraction( settings undefined ) failed angular.js:10071\n. Next issue - my dot is missing.\nOn devel, I see the below (note the yellow dot)\n\nOn ui-updates, I see the below (not the absence of the yellow dot)\n\n. I just noticed that while the dots do resize, the behavior is a little iffy.  It seems like:\n1. The zoom level needs to change sufficiently before a resize kicks off(?)\n2. There may just be a slight delay in them resizing\n. @atavism Sorry for the comment spam.  I accidentally commented on the wrong PR.  I've updated this PR to reflect the necessary comments.\n. @atavism Is this still current or should it be closed in lieu of getlantern/lantern-ui#78\n. Yes, this is a good change.  However, I don't think it will fix the issue - see my comment on the bug.\n. LGTM.  Couple of comments that should not prevent this from being pulled:\n1. Refresh tokens expire, right?  So even if the user doesn't take any action, at some point the token will stop working.\n2. It's confusing that we're depending on error handling in the XMPP processing to detect an authentication issue that affects friends management.  It seems like at some point, friends management should do its own checking, and if there's an authentication problem it should handle it.\n. Sorry, totally forgot about this - looking at it now.\n. Dumb question - how does this prevent the duplicate fetch of oauth tokens?\n. Merged!\n. Other than my one question about internalState.setNotInvited(false), this looks good to me.\n. I just tried out this branch.  Signing in is working smoothly for me, and it's noticeably faster after I finish with the Google Screens (which still feel slow, but that's because I'm proxying through servers in Singapore).\n. @atavism FYI\n. LGTM.\n. @myleshorton Ping\n. @aranhoide I think @myleshorton is busy satisfying reporting requirements.  Would you mind taking a look at this PR please?\n. Thanks for taking a look @aranhoide.  Statsperiod is in flashlight.yaml, so it's already controllable through cloud.yaml.\n. LGTM, merged\n. Good catch.\n. LGTM!\n. For some reason, the build that I produces never manages to determine that it has internet connectivity.  I tried building from devel and get the same problem, so it's either an issue with my build environment or with what's already on devel.  I did verify that the installer does successfully place upnpc.exe into AppData, whereas before it was being deleted.\n. I think the problem must be my build environment, as even when building from branch 1606 (which is a fair bit behind devel), I still get the same connectivity issue.\n. Log is short, no errors, but it seems to have stopped kinda early:\n0      2014-11-12 11:40:22,991 INFO  [Lantern-Main-Thread] lantern.Launcher.launch (Launcher.java:192) - Starting Lantern...\n234    2014-11-12 11:40:23,225 INFO  [Lantern-Main-Thread] lantern.LanternModule.copyFireFoxExtension (LanternModule.java:265) - Copying FireFox extension\n281    2014-11-12 11:40:23,272 INFO  [Lantern-Main-Thread] lantern.LanternModule.copyFireFoxExtension (LanternModule.java:289) - Copied FireFox extension from firefox\\lantern@getlantern.org to C:\\Documents and Settings\\Administrator\\Application Data\\Mozilla\\Extensions\\{ec8030f7-c20a-464f-9b0e-13a3a9e97384}\n625    2014-11-12 11:40:23,616 INFO  [Lantern-Main-Thread] privacy.WindowsLocalCipherProvider.newLocalCipher (AbstractLocalCipherProvider.java:144) - Retrieving local cipher key...\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/original.txt\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.0.1.txt\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.2.0.txt\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.3.1.txt\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.4.txt\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.5.txt\n1859   2014-11-12 11:40:24,850 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.7.txt\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\adf.ly\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\clixsense.com\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\elance.com\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\extratorrent.cc\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\filmesonlinegratis.net\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\freebitco.in\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\gamepedia.com\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\isohunt.to\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\kwejk.pl\n1875   2014-11-12 11:40:24,866 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\madmimi.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\megafilmeshd.net\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\minecraftforum.net\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\nastygal.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\popcash.net\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\privatehomeclips.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\puu.sh\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\reddit.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\songspk.name\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\statcounter.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\subscene.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\theladbible.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\udemy.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\webdesignerdepot.com\n1890   2014-11-12 11:40:24,881 INFO  [Lantern-Main-Thread] lantern.S3Config.<clinit> (S3Config.java:34) - Loading cert...cloudflare-certs\\youm7.com\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/original.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.0.1.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.2.0.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.3.1.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.4.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.5.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.7.txt\n1984   2014-11-12 11:40:24,975 INFO  [Lantern-Main-Thread] state.Settings.setSystemProxy (Settings.java:192) - Setting system proxy...\n2000   2014-11-12 11:40:24,991 INFO  [Lantern-Main-Thread] state.ModelIo.processCommandLine (ModelIo.java:158) - Running give mode proxy on port: 54319\n2000   2014-11-12 11:40:24,991 INFO  [Lantern-Main-Thread] state.ModelIo.processCommandLine (ModelIo.java:169) - Running give mode proxy with protocol: TCP\n2000   2014-11-12 11:40:24,991 INFO  [Lantern-Main-Thread] state.ModelIo.processCommandLine (ModelIo.java:272) - Running API on port: 24232\n2000   2014-11-12 11:40:24,991 INFO  [Lantern-Main-Thread] state.ModelIo.<init> (ModelIo.java:78) - Loaded module\n2047   2014-11-12 11:40:25,038 WARN  [Lantern-Main-Thread] lantern.LanternTrustStore.configureCipherSuites (LanternTrustStore.java:90) - No policy files on non-Vista machine!!\n2047   2014-11-12 11:40:25,038 WARN  [Lantern-Main-Thread] lantern.LanternTrustStore.configureCipherSuites (LanternTrustStore.java:92) - Reverting to weaker ciphers\n2047   2014-11-12 11:40:25,038 WARN  [Lantern-Main-Thread] lantern.LanternTrustStore.configureCipherSuites (LanternTrustStore.java:93) - Look in c:\\documents and settings\\administrator\\application data\\lantern\\jre\\lib\\security\n2062   2014-11-12 11:40:25,053 INFO  [Lantern-Main-Thread] proxy.GiveModeProxy.<init> (GiveModeProxy.java:113) - Creating give mode proxy on port 54319, running as fallback: false\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/original.txt\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.0.1.txt\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.2.0.txt\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.3.1.txt\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.4.txt\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.5.txt\n2109   2014-11-12 11:40:25,100 INFO  [Lantern-Main-Thread] lantern.Whitelist.applyWhitelist (Whitelist.java:109) - Applied whitelist whitelists/1.4.7.txt\n2234   2014-11-12 11:40:25,225 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.http.JettyLauncher@192195d\n2250   2014-11-12 11:40:25,241 INFO  [Lantern-Main-Thread] http.JettyLauncher.start (JettyLauncher.java:123) - Binding to localhost\n2265   2014-11-12 11:40:25,256 INFO  [HTTP-Server-Thread] server.Server.doStart (Server.java:268) - jetty-8.y.z-SNAPSHOT\n2578   2014-11-12 11:40:25,569 INFO  [HTTP-Server-Thread] server.AbstractConnector.doStart (AbstractConnector.java:338) - Started SelectChannelConnector@127.0.0.1:24232\n2609   2014-11-12 11:40:25,600 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.ChromeBrowserService@3dfc56\n2625   2014-11-12 11:40:25,616 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.LanternKeyStoreManager@1c98168\n2625   2014-11-12 11:40:25,616 INFO  [Browser-Launching-Thread] lantern.ChromeBrowserService.openBrowserWhenPortReady (ChromeBrowserService.java:88) - Waiting on port: 24232\n2625   2014-11-12 11:40:25,616 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.UpnpCli@127fcde\n2625   2014-11-12 11:40:25,616 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.Proxifier@1059bd7\n2625   2014-11-12 11:40:25,616 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.SystemTrayImpl@1d9e937\n2625   2014-11-12 11:40:25,616 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.proxy.DefaultProxyTracker@151c408\n2640   2014-11-12 11:40:25,631 INFO  [AWT-EventQueue-0] lantern.SystemTrayImpl.doCreateTray (SystemTrayImpl.java:112) - Creating system tray...\n2640   2014-11-12 11:40:25,631 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.DefaultXmppHandler@1616da4\n2640   2014-11-12 11:40:25,631 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.state.SyncService@1ef347f\n2640   2014-11-12 11:40:25,631 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.monitoring.StatsManager@8f0bea\n2640   2014-11-12 11:40:25,631 INFO  [Lantern-Main-Thread] pt.FlashlightServerManager.<init> (FlashlightServerManager.java:66) - Starting up...\n2640   2014-11-12 11:40:25,631 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.proxy.pt.FlashlightServerManager@11e3206\n2640   2014-11-12 11:40:25,631 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.proxy.GetModeProxy@a8adcb\n2687   2014-11-12 11:40:25,678 INFO  [Lantern-Main-Thread] lantern.Launcher.launch (Launcher.java:323) - Creating give mode proxy...\n2687   2014-11-12 11:40:25,678 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.proxy.GiveModeProxy@d1cf9c\n2687   2014-11-12 11:40:25,678 INFO  [Lantern-Main-Thread] lantern.Launcher.addShutdownHook (Launcher.java:491) - Adding shutdown hook for org.lantern.state.DefaultFriendsHandler@8ee032\n2687   2014-11-12 11:40:25,678 INFO  [Chrome-Browser-Launch-Thread] lantern.ChromeBrowserService.launchChrome (ChromeBrowserService.java:68) - Launching chrome...\n2687   2014-11-12 11:40:25,678 INFO  [Chrome-Browser-Launch-Thread] lantern.ChromeRunner.open (ChromeRunner.java:163) - Opening browser to: http://127.0.0.1:24232/FumixbZXwvUIp2RgD0G72g\n13281  2014-11-12 11:40:36,272 INFO  [CometD-Sync-OnConnect-Thread] state.SyncService.run (SyncService.java:101) - Syncing with frontend...\n. @myleshorton Notice how it says that it didn't find a compatible strong encryption policy?  This is with the bundle from our S3 site.  Is this expected on XP?\n. So, I had a build from devel that worked at one point, but I haven't been able to reproduce that result.\n. Interesting the build works fine on Windows 8.1 64bit.\n. @myleshorton Okay, this is ready for another review.\n. LGTM\n. Good catch, and thanks for adding the unit test.  Can you please also add a test to make sure that extracting a changed file results in that file showing up on disk?\n. LGTM!\n. LGTM, merging\n. Okay, this finally worked on Bamboo:\nhttps://getlantern.atlassian.net/builds/browse/LAN-TEST168-63\n. Note - some of the most interesting changes are in a changeset in lantern-common - https://github.com/getlantern/lantern-common/commit/154c76ab3c1964d3cedcdbdc72edd7bbeaffe005\n. LGTM.  Unit test runs fine, and running the client seems to work, except for this bug - https://github.com/getlantern/lantern/issues/2030\nI think that bug is a separate issue unrelated to this change, so I'm merging.\n. Unit test passes for me, logic looks good, merging!\n. Wrong branch.\n. I observed this on Java 7.\nThe problem I'm trying to solve is not about consistency with equals or total ordering, it's just being able to reason about the sort.  If both a < b and a > b are true during the same sort, which one wins?  When this happens, do we get the probability distribution we're looking for based on our weights, or does it get messed up because one of these relationships dominates?  Is the sort even guaranteed to terminate in all cases?  I could probably spend the time to study TimSort and come to understand what happens when both a < b and a > b are true, but it would take me a lot less time to just ensure that only one or the other is true during a given sort.\nAs far as speed, we're talking about a list of proxies here.  If someone has so many proxies in the list that performance during this sort becomes critical, that would be a phenomenal problem to have!\nAs far as complexity, complexity could be significantly reduced by taking out the existing sort conditions.  That also has the benefit of continuing to ensure that all types of proxies get some traffic, even if the user has some TCP peer proxies.  The weights can be used to express the desired mix (i.e. if you want traffic to primarily go to TCP peer proxies, give them high weights).\nIn practice, I think the code as written will probably be fine. It'll still randomize proxy selection, though perhaps not exactly as specified by the weights, and it will probably always terminate, I just can't be sure.\n. Okay, it sounds like you're confident that you understand TimSort and how it interacts with your comparator, and that it'll give you the results you expect.  I still can't explain why it works, but that shouldn't gate this PR.  The only other piece of advice I have would be to construct a unit test that runs a large number of experiments to show that you get the probability distribution you seek, preferably built so that it stimulates multiple comparisons for the same pair of values (i.e. use an odd number of proxies).\n. Sweet!  I'm glad we had this discussion, as it prompted me to add a similar test to the balancer project, which promptly uncovered a bug!\n. @myleshorton FYI commons exec already does this - http://commons.apache.org/proper/commons-exec/apidocs/org/apache/commons/exec/Executor.html#execute(org.apache.commons.exec.CommandLine)\n. Gotcha, cool!\nOn Dec 12, 2014 8:24 AM, \"myleshorton\" notifications@github.com wrote:\n\nRight - it already throws an exception on non-zero return values, but we\nweren't handling that exception.\nOn Friday, December 12, 2014, oxtoacart notifications@github.com wrote:\n\n@myleshorton https://github.com/myleshorton FYI commons exec already\ndoes this -\nhttp://commons.apache.org/proper/commons-exec/apidocs/org/apache/commons/exec/Executor.html#execute(org.apache.commons.exec.CommandLine)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2066#issuecomment-66777993.\n\n\n\nPresident\nBrave New Software Project, Inc.\nhttps://www.getlantern.org\npgp A998 2B6E EF1C 373E 723F A813 045D A255 901A FD89\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2066#issuecomment-66778239.\n. @myleshorton Good catch!\n. Okay, I've finished my first pass at this.  In addition to the code-specific comments, I have some testing and usability comments.  Testing was done on OS X.\n1. If I don't have Chrome but do have Firefox, I'm unable to launch the Lantern UI if Firefox was already running.\n\n\n1. If I do have Chrome installed, after running Lantern, if I choose \"Show Lantern\" from our system tray menu while the Chrome UI is already open, it closes the existing UI and then reopens it.  I would expect it to just keep the existing UI open.\n2. I'm not sure that having the Lantern UI running in a separate instance of Chrome is better than just having it open tabs in the existing Chrome.  Because the 2nd instance is still called Chrome, it's kind of confusing to me.  Furthermore, because it's a full instance of Chrome, I'm tempted to start using it as such, opening new tabs, browsing to other sites, etc.  At some point I might discover that it's missing my plugins and bookmarks, which will probably annoy me.  Even worse, If I subsequently shut down Lantern, I get a rude surprise in the form of my Chrome browser having been shut down.  We will get bug reports about this.\nIf I understand correctly, the whole reason we're doing this is because our recent Angular upgrade broke the native Lantern app, right?  Other than adding zoom/pan, what is it that we're achieving with this upgrade?  Is that worth taking a step backwards in user experience on Mac?\nAlso, if the UI doesn't work properly in the native Lantern app, why do we even support that as a fallback option in the case where Chrome and Firefox are unavailable?\n. Another thing that's weird about the 2nd Chrome experience is that this Chrome remains configurable.  I can change the view settings, add bookmarks and so on, and these are even remembered across runs.  But, if I open Chrome not from Lantern but from the Chrome shortcut, all that customization is lost.  More confusion ensues.\nSomething that's nice about running this as tab in the existing Chrome is that I get the benefit of my Google login context, which is useful when signing in to Lantern for the first time.\nReally the only downside to running as a tab is that multiple selections of \"Show Lantern\" will create multiple Lantern tabs.  I feel like people are savvy enough about managing browser tabs that this wouldn't bother them too darned much (at least, it doesn't bother me much).\n. We only lost Firefox support on Mac, right?\n. And by \"lost Firefox support\", I mean relative to the initial version of this PR, since we never had Firefox support on Mac to begin with (though we did have it on Windows and Linux, which is why I ask).\n. @myleshorton \n\nThis is actually the way it's always worked. Now that I think about it, though, we probably could detect if the existing window is still open. The thing we likely won't be able to do without some fanciness is to give that window focus though. I'll glance around.\n\nYou're right, I had never noticed!\n\nYeah I agree it's a little funny. I'm still not totally sold on the tab experience though either, particularly just getting it lost in the shuffle and also the fact that it just stays open when Lantern shuts down.\n\nAFAIK, the only way to get it to close when Lantern shuts down is to run it as a separate process. In the case of a separate Chrome process, this brings all the issues I already mentioned.\n\nTotally legitimate question. The only reason really is panning and zooming, although there have also been some performance improvements. Let's chat about this more.\n\nOkay. It would be interesting to put some numbers around the performance improvements in terms of CPU/memory utilization, as I think these were the main pain points expressed by users.\n\nWell, it works better than forcing the user to download Chrome. The experience there is similar to what you experience now, except there are also +/- buttons that don't work (depending on your version of WebView -- they work on Yosemite I believe).\n\nWait, so are we saying that the webview related issues are already a problem with the current UI and weren't introduced as part of the Angular upgrade? If that is the case, that changes my perspective on this fix.\n. @atavism \n\nIt's more than that. WebView differs significantly between OS X versions 10.9 and 10.10. Any improvements we want to make to the UI will have to be cross-checked now because of the differences. It's not that we're introducing zooming, panning, and the Angular upgrade only to diminish the existing user experience; it's the underlying inconsistencies between WebView versions that will be hard to maintain moving forward. \n\nDoes this mean that the current version of our UI already has trouble with OS X 10.10?\n\nI agree! I actually like running Lantern in just another tab and being able to easily access the UI from the same browser window I already have open. I'm curious if someone could expand--what are we actually gaining by putting it in its own window? What are the drawbacks of having it in another tab? I like getting rid of WebView and the use of another window entirely; I consider it an improvement. It's less windows I have to watch over. That said, if do want to keep a new window as default, could it be a configurable option in the settings modal (whether it opens in a new window or another tab)?\n\nYes! I like having it be a tab too. The fact that the tab hangs around after Lantern has stopped is actually kind of handy, because if I didn't know that Lantern has stopped, the message on the tab alerts me to the fact that it has. From an implementation perspective, it's nice too because our code simply becomes Desktop.getDesktop().browse().\n. @atavism \n\nWe were on a really outdated version of AngularJS, 1.0.8, that's several years old at this point, and are running the latest version now. There was a 4x performance improvement with DOM manipulation, which would affect how peers/connecting paths are rendered and re-drawn, plus other user interaction with the map. I've noticed the UI feels a lot snappier now.\n\nYes, the UI seems snappier to me too. I don't question that there are real improvements in this batch of UI changes, I just remain concerned about the risk, the fact that when including this current change to native app/browser behavior we seem to be taking a step backwards usability wise and the fact that we don't seem to be addressing a major pain point expressed by our users (unless we can demonstrate improved CPU and memory usage, which we have gotten complaints about).\n. @myleshorton \n\nWell, no. There are existing WebView issues such as #1294, but I'm simply saying that showing WebView here is better than forcing the user to download Chrome and that the experience on WebView is similar to the current one (basically pan and zoom don't really work pre-Yosemite, so it's quite similar). \n\nAh, so with the new code, the only thing that's broken in WebView is the zoom/pan behavior? Perhaps we should disable it unless in Firefox or Chrome then?\n\nYeah the maintenance and developer time issue was a primary motivation behind this particular ticket -- just always use Chrome if it's there and don't worry as much about polishing WebView.\n\nOkay, that makes sense, except that if we're going to support WebView at all, we should support it properly.  I've never had a good experience with half-supporting a browser.  I would just say let's cut out WebView entirely.\n. @myleshorton \n\n\nFrom an implementation perspective, it's nice too because our code simply becomes Desktop.getDesktop().browse()\n\nWell, except that then we're again stuck trying to support all browsers.\n\nAh, the problem is that if your default browser is Safari but you also have Chrome, we want to use Chrome.  Got it!\n. @atavism  I'm glad that you mentioned a browser extension.  To me, that's the thing that holds the potential for really tying all this together nicely by giving us more options to manage windows, provide context-sensitive options (e.g. proxy this site) and stuff like that.  I think it could provide a dramatic improvement to the user experience if properly designed.\n. LGTM on OS X!  This seems to work whether I'm running Chrome, Firefox or Safari as my default browser.\n. Looks good on Mac.  Interestingly enough, Safari is smart enough to always open the UI in the same tab!  So in some sense, Safari has the best user experience.\nWill test Windows next.\n. On Windows 8, Chrome works fine, but if I only have Firefox the behavior is a little strange.\nIf I open the UI when Firefox isn't running, it starts a new Firefox sized to a specific size.  However, this window looks like a real, complete Firefox Window, in which I can add tabs, mark favorites and so on.  Also, if I again choose to Show the UI, the Firefox window disappears for a couple of seconds, and then reappears with a 2nd tab.\nIf I already have Firefox open from other browsing, Lantern still opens in a new tab, but at least the Firefox window doesn't disappear for a few seconds.\nAll in all, I would say that the Firefox experience is such that it suffers because of our attempts at handling it specially.  So on Windows, if you don't have Chrome, I think we should use the same default browser mechanism as we use on OS X. \n. With changes 2 and 3, I think the behavior will be good.  Merging.\n. LGTM\n. @myleshorton Oh, btw, to build flashlight, I recommend using ./buildAndTag so that you can tag it while building.\n. @myleshorton I've switched to hashing, and the build is passing.\n. Haha, yeah.  It looks like the two fixes in 1606_fixed were things you caught in the review, namely the path to flashlight in Lantern.bat and waitForWaddell being public.\nDo you want to build flashlight or should I?\n. Built and pushed.\n. > I believe this still needs the new flashlight binaries on devel @oxtoacart correct?\nYes, and a new config url.  See https://github.com/getlantern/lantern/pull/2103. Would you like to try building flashlight to make sure I'm not the only one who can build it? I know you've got a lot of reporting stuff, so I'm happy to just do it too.\n. @atavism Great idea, thanks!  I've assigned it over to you.\nYou can build flashlight using tagandbuild.bash per the instructions here - https://github.com/getlantern/flashlight-build#building-flashlight\nMaybe we call this release 1.6.0?\nNote:\n\nAlso need to update BaseS3Config to point at at new url for the config file, since the flashlight.yaml format has changed. See https://github.com/getlantern/lantern-common/blob/master/src/main/java/org/lantern/BaseS3Config.java#L16.\n\nYou can generate and upload a new flashlight.yaml per the instructions here - https://github.com/getlantern/flashlight-build/tree/devel/src/github.com/getlantern/flashlight#masquerade-host-management\n. @atavism, btw go 1.4.1 is out, which you can install with gonative:\ngonative build -version=\"1.4.1\" -platforms=\"darwin_amd64 linux_386 linux_amd64 windows_386\"\n. @atavism Perfect!  You can copy the executables over into lantern using ./copyexecutabes.bash.  You'll need to set some environment variables for codesigning as described in the README.\n. @atavism \n\nthe proxying relies on three new libraries: balancer, fronted, and chained.\n\nCorrect.\n\nAnd the actual changes to flashlight itself have been merged to devel already, correct?\n\nYes.  The binaries that you built already include the necessary Go changes.\n. @atavism Okay, I've made updates to address your comments.  While in there, I noticed that DefaultProxyTracker was dead code as well, so I took that out.  And I noticed that we weren't picking up the initial S3Config on login correctly, so I fixed that too.\nSeems to be running well.\n. Oh, I also reverse merged from devel to make for a clean pull.\n. LGTM.\n. Thanks!\n. @atavism @myleshorton Sorry to chime in late, but I thought we had discussed this a while back and concluded that:\n1. For Chrome, we would use the fancy behavior (i.e. alert to focus window, auto-close when opening a new window and stopping Lantern).\n2. For other browsers, we would just always open a new tab, which IIRC will always grab focus no matter what you're doing.\nNot that I have strong feelings about this, just thought I'd save you some time if I can.\n. @myleshorton With this merged to devel, I'm experiencing all sorts of issues opening the lantern ui.  Is there a lantern-ui change that's supposed to go along with this?\n. Nice!  I tested this on OS X 10.9.5 and it works for me.  The code looks good, with the only potential problem being a race condition with other programs that are also trying to modify network preferences (see comment on line 90).\n. Ah, I totally missed that lock code.  Excellent!\n. @fffw This looks great!  And it works in my testing locally.\n@myleshorton and I decided that it would be good to take this is a high-priority hotfix, which means that we actually need it in the master branch instead of devel.  Can you please resubmit to master and then I'll merge.\nThanks!\n. Neat idea.  Do you mean org.littleshoot.util.FileLockUtils  ?\n. Gotcha.  And this is to prevent problems when running two instances of Lantern, right?\n. > although now that I think about it that'll just lock to the process not the thread\nCorrect. From the Javadoc for java.nio.channels.FileLock:\n\"File locks are held on behalf of the entire Java virtual machine. They are not suitable for controlling access to a file by multiple threads within the same virtual machine.\"\n. Thanks!\n. Already tested earlier, code LGTM.\n. @myleshorton Thanks!\n. @myleshorton Okay, I've made updates along the lines of what we discussed and it seems to be working well, including fixing #2198 too.\nThere's a lantern-ui change now too - https://github.com/getlantern/lantern-ui/pull/81\n. @myleshorton Found one more issue related to starting when there's no internet connectivity.  Will fix shortly.\n. @myleshorton Drats, there's a chicken and egg problem here.  Flashlight needs its country code at startup, but that's only available by doing a GeoIP lookup, which in turn requires flashlight to be started.\n. @myleshorton Okay, fixed the chicken and egg problem.  Should be good now.\n. Thanks for reviewing!\n. Good work!\n. @fffw Do you want me to review?\n. @fffw I'm planning to review this week.\n. In testing, this seems to sometimes hang when I try to proxy traffic through it.  I'm working on understanding the code better so I can hopefully provide more information.\n. @fffw Do you know of a good way to simulate the blockages that detour should handle so that I can do some manual testing with it?\n. @fffw Okay, I'll assume the detection is good.  So I think the only thing left is the hanging.  I'll see if I can reproduce reliably.\n. @xiam @fffw I think I addressed all of your comments.  How does it look?\n. Either way - if they don't touch each other might as well keep them\nseparate!\nOn Jan 8, 2016 11:24 AM, \"Jos\u00e9 Carlos\" notifications@github.com wrote:\n\nHey @myleshorton https://github.com/myleshorton, Not sure if we should\ndo that, #3378 https://github.com/getlantern/lantern/pull/3378 and this\none attack two different problems, this only affects the main Dockerfile\nand focuses on using a newer Go version, while #3378\nhttps://github.com/getlantern/lantern/pull/3378 bumps the Go version\nfrom go1.5.1 to go1.5.2 for gomobile only (it's a different Dockerfile).\nThe thing that I can do is create another PR that targeting valencia_ox\ninstead of valencia, sounds good?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3395#issuecomment-170098783.\n. @atavism I'm having trouble building.  I tried the following:\n1. Run make android-lib in root of project\n2. Then in src/github.com/getlantern/lantern-mobile I ran \"gradle assembleDebug\"\n\nIt complains of this:\n/Users/ox.to.a.cart/lantern2/src/github.com/getlantern/lantern-mobile/sdk/src/main/java/org/getlantern/lantern/sdk/Lantern.java:17: error: package go.client does not exist\nimport go.client.*;\n. @atavism That worked sort of.  But it's complaining about not being able to load tun2socks:\nAndroidRuntime  E  FATAL EXCEPTION: Thread-11432\n                         E  Process: org.getlantern.lantern, PID: 20548\n                         E  java.lang.UnsatisfiedLinkError: dalvik.system.PathClassLoader[DexPathList[[zip file \"/data/app/org.getlantern.lantern-1/base.apk\"],nativeLibraryDirectories=[/dat\n                            a/app/org.getlantern.lantern-1/lib/arm, /vendor/lib, /system/lib]]] couldn't find \"libtun2socks.so\"\n                         E      at java.lang.Runtime.loadLibrary(Runtime.java:366)\n                         E      at java.lang.System.loadLibrary(System.java:988)\n                         E      at org.getlantern.lantern.android.vpn.Tun2Socks.<clinit>(Tun2Socks.java:127)\n                         E      at org.getlantern.lantern.vpn.VpnBuilder$1.run(VpnBuilder.java:111)\nWhen I try to make build-tun2socks, I get the below:\n\u279c  lantern2 git:(lantern-mobile-settings) \u2717 make build-tun2socks  android\ncd src/github.com/getlantern/lantern-mobile\nndk-build\nAndroid NDK: Could not find application project directory !\nAndroid NDK: Please define the NDK_PROJECT_PATH variable to point to it.\nmake[1]: Entering directory `/Users/ox.to.a.cart/lantern2'\n/opt/android-ndk-r10e/build/core/build-local.mk:143: *** Android NDK: Aborting    .  Stop.\nmake[1]: Leaving directory `/Users/ox.to.a.cart/lantern2'\nmake: *** [build-tun2socks] Error 2\n. ndk-build works from inside lantern-mobile, but if I Then run make android-lib android, I still get the same crash as if it's not picking up the tun2socks library.\n. Now I get this:\nmake[1]: Leaving directory `/Users/ox.to.a.cart/lantern2/src/github.com/getlantern/lantern-mobile'\ncp src/github.com/getlantern/lantern-mobile/libs/armeabi-v7a/libtun2socks.so src/github.com/getlantern/lantern-mobile/app/libs/armeabi-v7a/libtun2socks.so\ncp: src/github.com/getlantern/lantern-mobile/app/libs/armeabi-v7a/libtun2socks.so: No such file or directory\n. Okay, it builds now and turns on with crashing.  Here are the results from testing on my Nexus 4 running 5.1.1.\n1. Was able to turn on and confirm that it was proxying traffic from Chrome\n2. After turning off, pidcat reported the lantern process crashing with a panic\nGo  E  fatal error: concurrent map writes\n                         E  goroutine 75 [running]:\n                         E  runtime.throw(0xa11aa358, 0x15)\n                         E      /usr/local/go/src/runtime/panic.go:530 +0x80 fp=0x9071be58 sp=0x9071be4c\n                         E  runtime.mapassign1(0xa10766d8, 0x90887a80, 0x90756e08, 0x9071bec8)\n                         E      /usr/local/go/src/runtime/hashmap.go:445 +0xa0 fp=0x9071beac sp=0x9071be58\n                         E  github.com/getlantern/lantern-mobile/lantern/interceptor.(*Interceptor).closeConn(0xa13fad00, 0x90756e00)\n                         E      /Users/ox.to.a.cart/lantern2/src/github.com/getlantern/lantern-mobile/lantern/interceptor/interceptor.go:290 +0x1b0 fp=0x9071bee8 sp=0x9071beac\n                         E  github.com/getlantern/lantern-mobile/lantern/interceptor.(*Interceptor).Do(0xa13fad00, 0x90b504b0, 0x0, 0x0)\n                         E      /Users/ox.to.a.cart/lantern2/src/github.com/getlantern/lantern-mobile/lantern/interceptor/interceptor.go:211 +0x718 fp=0x9071bf94 sp=0x9071bee8\n                         E  github.com/getlantern/lantern-mobile/lantern/interceptor.(*Interceptor).acceptSocks.func1(0xa13fad00, 0x90b504b0)\n                         E      /Users/ox.to.a.cart/lantern2/src/github.com/getlantern/lantern-mobile/lantern/interceptor/interceptor.go:139 +0x24 fp=0x9071bfcc sp=0x9071bf94\n                         E  runtime.goexit()\n                         E      /usr/local/go/src/runtime/asm_arm.s:986 +0x4 fp=0x9071bfcc sp=0x9071bfcc\n1. After turning back on, proxying from Chrome worked\n2. After turning off a 2nd time, the Lantern process hung on shutting down (debug output below).  At this point, Chrome was unable to connect to whatismyipaddress.com.  I had to manually disable the VPN to restore connectivity, at which point the Lantern process ended.\nLantern  D  About to stop Lantern..\n                  GoLog  I  DEBUG lantern: lantern.go:273 Calling exit func\n                         I  DEBUG lantern: lantern.go:273 Calling exit func\n                         I  DEBUG lantern: lantern.go:273 Calling exit func\n                         I  DEBUG lantern: lantern.go:273 Calling exit func\n                         I  DEBUG lantern: lantern.go:273 Calling exit func\n                         I  DEBUG lantern: lantern.go:273 Calling exit func\n                         I  DEBUG flashlight.config: config.go:271 Closing config system\n                         I  DEBUG lantern: lantern.go:276 No exit func remaining, exit now\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57616:52.34.67.97:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57638:74.125.224.24:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57646:64.233.189.95:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57604:74.125.23.157:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57601:104.101.209.19:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57605:74.125.23.157:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57645:64.233.189.113:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57652:104.101.209.19:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57655:173.194.72.156:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57580:127.0.0.1:7300\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57602:104.101.209.19:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57603:104.101.209.19:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57601:104.101.209.19:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57606:74.125.23.157:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57616:52.34.67.97:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57615:52.34.67.97:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57617:64.233.189.101:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57638:74.125.224.24:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57619:64.233.189.101:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57604:74.125.23.157:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57646:64.233.189.95:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57659:216.58.221.132:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57605:74.125.23.157:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57600:23.197.144.45:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57595:64.233.189.95:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57645:64.233.189.113:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57599:64.233.189.95:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57652:104.101.209.19:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57607:74.125.23.157:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57614:52.34.67.97:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57655:173.194.72.156:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57580:127.0.0.1:7300\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57602:104.101.209.19:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57600:23.197.144.45:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57619:64.233.189.101:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57618:64.233.189.101:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57659:216.58.221.132:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57641:74.125.23.156:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57595:64.233.189.95:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57660:64.233.189.132:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57599:64.233.189.95:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:162 Closing a connection with id: 127.0.0.1:57593:64.233.189.95:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57607:74.125.23.157:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57614:52.34.67.97:80\n                         I  DEBUG lantern: lantern.go:276 No exit func remaining, exit now\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57641:74.125.23.156:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57660:64.233.189.132:443\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57618:64.233.189.101:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57603:104.101.209.19:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57615:52.34.67.97:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57593:64.233.189.95:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57617:64.233.189.101:80\n                         I  DEBUG lantern-android.interceptor: interceptor.go:283 Closing a connection with id: 127.0.0.1:57606:74.125.23.157:80\n. For the concurrent map writes thing, you can probably just use a sync.Mutex to guard access.\n. cc: @atavism \n. @myleshorton Nice catch!  What steps can I use to reproduce?\n. Must be a timing thing - I haven't been able to reproduce yet.\n. Nice edge case @myleshorton !\n. @myleshorton Thanks for the thorough review!  I believe I've addressed all your comments.\n. Thanks @myleshorton.  This can definitely wait until next week - enjoy your weekend!\n. Thanks for the review @myleshorton!\n. @atavism I merged your PR and with that, I was able to test my changes and they seem to be working okay.  Once you're had a chance to review this PR, assuming it looks good, can you please merge and put out a release build?\n. This fixed the build, thanks!\n. In my testing, the VPN service does indeed stop when I disable the network.\n. If I disable wifi while I'm in the app, the slider doesn't change to show that Lantern is actually off.\n. With the exception of that one small usability niggle, this works for me.  Merging.\n. @myleshorton Yes!\n. @myleshorton Oh yeah, I forgot about the docker build.  Let me fix that.\n. @myleshorton I've upgraded the go version in the Dockerfile to 1.6rc1.  It's able to build Windows and Linux binaries.\n. Thanks @myleshorton !\n. @fffw Can you send me your lantern config?\n. @myleshorton No, the multiple token checking code is not yet deployed.\n. I wonder if it could be a timing in the initialization sequence ...\n. @fffw If you run into the problem again, I wonder if this branch improves things for you:\nhttps://github.com/getlantern/lantern/tree/initfix\n. @fffw Something that may help you reproduce the problem is to remove the config files and start lantern again - the problem may only happen during the period when your first configuration is getting fetched.\n. cc: @myleshorton \n. @atavism What version number do we want to display?  The version of the library or the version of Lantern Mobile?\n. @atavism Sorry about those build outputs, that's fixed.  I've addressed your other two comments as well.  I also noticed that I committed some .gradle directories, that's fixed in the final PR (valencia-mobile-full).\n. @atavism Thanks for reviewing!\n. I'll gladly take a look.  Do we have a specification or requirements for\nwhat this is supposed to accomplish?\n\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\n. Cool, thanks!\n\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\n. @fffw I ran some tests using pinger from my home network against Amsterdam, Frankfurt and Singapore.  As you suggested, TCP connect time was very closely related with transfer times for small, medium and large files, so I agree that's a good enough metric to start with.\n. @fffw Nice!\n. LGTM.\n. I get the below error on building android-debug.  I think there are some environment variables and/or gradle properties that I need to configure?  These are worth capturing in the README.\n``` bash\nFAILURE: Build failed with an exception.\n\n\nWhere:\nBuild file '/Users/ox.to.a.cart/lantern2/src/github.com/getlantern/lantern-mobile/app/build.gradle' line: 50\n\n\nWhat went wrong:\nA problem occurred evaluating project ':app'.\n\nCould not find property 'KEYSTORE_FILE' on SigningConfig_Decorated{name=release, storeFile=null, storePassword=null, keyAlias=null, keyPassword=null, storeType=null}.\n\n\n\nTry:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n```\n. With a couple of small tweaks that I've committed, this is working great for me.  Merging.\n. Note - this doesn't work when using go1.6rc1 because the race detection library was compiled with a newer OS X SDK than what we're using.\n. @myleshorton Thanks for the review!  I'm going to be a rebel and just merge this now.\n. @myleshorton That's existing behavior.  Should I log a new bug for it?\n. @myleshorton This uses eventual now.\n. @myleshorton I removed that setCandidateCh method.\n. @myleshorton This looks good to me, but the build fails.  I don't think that's because of this PR though.\n. @myleshorton I don't have a working cross-compilation environment for the release branch.  If you do, would you mind building a linux executable and trying that on the Iran VPS?\n. Haha, great minds think alike!  I just hadn't noticed #3561.  FWIW, #3561 has merge conflicts, whereas #3562 does not.\n. @myleshorton I also noticed some test failures - I think I've fixed them now, but need to wait for Travis to finish.\n. @myleshorton I branched off valencia and then merged the release branch into this new branch, manually resolving conflicts.\n. It's not clear to me why your PR had so many more changes.  Looking at a diff from release-2.0.1 to valencia now, it shows relatively few new changes.  Mysterious.\n. @atavism @myleshorton What do you think?  Merge worthy?\n. @atavism @myleshorton Thanks for the review!  I've opened #3633 for the WebView thing.\n. @fffw Thanks for reviewing!\n. LGTM!\n. @myleshorton Other than switching to a uuid, this looks good to me.\n. LGTM!\n. I tested manually by watching the logs on the config-server before/after the change.  Before the change, I saw 127.0.0.1, after the change I didn't.\n. Note - if we merge this, it resolves #3545.\n. @myleshorton Yeah, #3545 was found on valencia.\n. Sure, I'm kind of in this area for the Windows stuff anyway.\n. LGTM!  I just made one small tweak to not launch goroutines for the pac settings change.\n. Once travis check passes, I'll merge.\n. @myleshorton Sorry, I just remembered that I need to integrate this with the ui.lantern.io change.  Working on that now, will submit a PR to the PR.\n. @xiam Thanks for the review!  I agree about the Makefile changes, I'll move those into another PR.\n\n\nI think the only thing about this change to use ui.lantern.io that's not optimal is that it requires traffic to go through our proxy.  If someone is using a proxy switcher that bypasses our proxy, ui.lantern.io won't work.\n. @myleshorton Yeah, edge doesn't actually allow any extensions right now, so there's definitely no proxy switchers for it :)\nSo for #3628, I'll use the loopback address for showing the UI if the setting to set Lantern as system proxy is off.  I'll address that as part of that ticket.\n. @myleshorton Pac file is reverted to original, works in Edge.\n. @myleshorton So this change automatically includes getiantem.org in the proxied sites list?  Should we go ahead and run genconfig along with this to pick that up?\n. @myleshorton Makes sense.\n. @xiam @myleshorton This is ready for review now.\n. @xiam I think I've addressed all of your comments.\n. @xiam I'll take a look today.\n. @xiam flashlight/main isn't used on mobile anyway, so is this change really needed?\n. @xiam Prior to the changes that I made on valencia, it's entirely possible that the mobile clients still had autoupdate running.\n. LGTM\n. @fffw Good catch.\n. LGTM!\n. Cool.\n. I was able to build a release with this.\n. BTW, @xiam, can you please remove the dns entry for ui.lantern.io?\n. @myleshorton Thanks!\n. cc: @myleshorton \n. @fffw I'm not a big fan of notification/listeners when that level of complexity is not needed.  Here is what I think is a simpler solution - https://github.com/getlantern/lantern/pull/3695\n. Oh, interesting.  I think the bug is relevant to both, right?  Because the PAC file also wasn't getting updated when the setting changed.\nFor the reverse proxy problem, this seems like a much simpler solution - https://github.com/getlantern/lantern/commit/df930589f28f83a39337afc625472287a1b89076\n. Interesting @myleshorton.  I do see sites get added to bypassDomains as I access them (presumably by detour).  Are you saying that the list should be pre-populated with some more site?\n. LGTM.  The unlockAndSave function is nice.\n. LGTM.  I made one small addition about using clean-desktop - https://github.com/getlantern/lantern/commit/e6b20a5e84696ec7bc8b1ef028771811c863f444\n. @fffw Tests passed.\n. Oh yeah, that's important!\n. @myleshorton I'll close this and open a new PR to devel.\n. The internal update logic uses the integer versionCode and does plain integer comparisons.  As long as the versionCode is higher than the installed, then it upgrades.\n. @atavism I intended this to apply to all builds.  Why wouldn't we use it for release builds?\n. The android docs docs seem to leave the meaning of versionName pretty open\n\nThe value is a string so that you can describe the application version as a .. string, or as any other type of absolute or relative version identifier.\n. @myleshorton @fffw Apologies about the delay, I'll take a look this evening.\n. @myleshorton You asked me to check something in relation to this at our standup.  I thought I understood your request, but I didn't.  What did you want me to check?\n. @fffw Generally looks good, nice and clean.  The only largish concern I have is around the dialer checking logic.  A smaller question I have is around use of average connect time vs median or something like that.  I've also submitted a small PR with some documentation/logging enhancements - #3780.\n. @fffw Your changes look good.  Just one remaining question about the commented-out avg_bench_test, and then we can pull.\n. LGTM!\n. @myleshorton Looks good.  If the user is running the build on linux, they can actually just use make linux instead of make docker-linux.\n. @atavism Interesting.  Does the LanternMobileTestbed app crash running on the same device?  Does the crash happen with and/or without Lantern VPN enabled?\n. @atavism Also, is there a message directly related to the crash?  It's not immediately clear why that particular stack trace would cause the whole app to crash.\n. @atavism Okay to merge this?\n. @fffw Impressive!\n. @fffw I'm looking forward to reviewing this, let me know when you want me to take a look.\n. @fffw Is this ready to review?  There's a bug with detour (#3900) and rather than fixing it on the old detour, I'd prefer to fix it on the latest and greatest.\n. @fffw Anything I can help with?\n. I tried running with this for a while and it seems to degrade over time.  I see a lot of EOF errors and Unable to obtain connection within timeout, even though I'm not running with any blocking.  I'm going to spend some time today looking at the detour code and debugging.\n. I just noticed that this is assigned to me. 1.5 years for a PR is probably a new record for me. Apologies for the slow response @joesis!. Closing in favor of a more comprehensive updating of dependencies.\n. LGTM.  detour test is failing, but it's failing on devel too.\n. @myleshorton This PR already removes the non-panicwrap mitchelh stuff.  I basically removed everything from src/github.com other than getlantern and then refetched the needed dependencies using go get.\n. @myleshorton It's just kind of scary, but I guess devel is going to get some pretty heavy testing anyway and we can/should fail forward on this stuff anyway.  Let me try running on mobile real quick and make sure it looks happy, then we can merge.\n. @myleshorton Okay, mobile works, so thumbs up on pulling.\n. @myleshorton Oh yeah, I like that.  Let me do that.\n. @myleshorton Oh, the problem with your suggestion is that it breaks any previous logic that relies on RemoveFromWl even removing permanent ones.  So, I think it's safer to stick with what I had.\n. LGTM!\n. I think I may have missed that test dependency because a prior test failed and I never got this test failure.  But I'm not sure.\n. Opened a new PR agains pro repo.\n. @myleshorton FYI, running the tests with race detection in Travis exposed a bunch of additional race conditions.  I'm just going to go ahead and fix them as part of this.  Stay tuned.\n. @myleshorton Test is happy now.  Looks like switching from -covermode=count to -covermode=atomic took care of the remaining races, as these were actually in the code that the coverage tool was generating.\n. @myleshorton The latest stretchr/testify shows a useful diff when Equal test fails, so we can retire getlantern/testify.  I've opened a separate ticket for this at #3851.\n. @l2dy Please use the Makefile.\n\nmake lantern\n. Sorry, I meant:\nHEADLESS=1 make lantern\n. LGTM!\n. @myleshorton Yeah, I think it broke on this commit which is not in master.\n. @myleshorton Sorry, I didn't explain very well.  The idea was to review this diff before merging in the dependencies, as the dependencies were being pulled into this obfs4nodep branch.\nThankfully all our code changes are in one commit, which you can see here - https://github.com/getlantern/lantern/pull/3881/commits/016973668c917cab22770fd5e434d4fed91653f9\n. @myleshorton Anything I need to do on this one?\n. cc: @atavism \nWhile testing this, I noticed that the ui dependency added almost 2 MB to the mobile release build, so I think we should definitely fix this.\n. LGTM!\n. @myleshorton That's correct.  The full PR with dependencies is here - https://github.com/getlantern/lantern/pull/3971\n. @atavism I can't build this.  I get an error from ProGuard:\njava.io.IOException: Can't write [/Users/ox.to.a.cart/lantern/src/github.com/getlantern/lantern-mobile/app/build/intermediates/transforms/proguard/release/jars/3/1f/main.jar] (Can't read [/Users/ox.to.a.cart/.gradle/caches/modules-2/files-2.1/commons-io/commons-io/1.3.2/b6dde38349ba9bb5e6ea6320531eae969985dae5/commons-io-1.3.2.jar(;;;;;;**/*.class)] (Duplicate zip entry [org/a/a/a/a.class == commons-io-1.3.2.jar:org/apache/commons/io/IOUtils.class]))\nDoes that look familiar at all?\n. Titles in mobile feed show <![CDATA>\n\n. To test how this works in a blocked scenario, I set my wifi connection to use our fake DNS server () and then opened Lantern.  The feed view remained empty and eventually the app crashed with this error:\nFATAL EXCEPTION: main\n                         E  Process: org.getlantern.lantern, PID: 10995\n                         E  java.lang.NullPointerException: Attempt to invoke virtual method 'java.util.Iterator java.util.ArrayList.iterator()' on a null object reference\n                         E      at org.getlantern.lantern.activity.LanternMainActivity.setupFeed(LanternMainActivity.java:256)\n                         E      at org.getlantern.lantern.model.GetFeed.onPostExecute(GetFeed.java:53)\n                         E      at org.getlantern.lantern.model.GetFeed.onPostExecute(GetFeed.java:13)\n                         E      at android.os.AsyncTask.finish(AsyncTask.java:636)\n                         E      at android.os.AsyncTask.access$500(AsyncTask.java:177)\n                         E      at android.os.AsyncTask$InternalHandler.handleMessage(AsyncTask.java:653)\n                         E      at android.os.Handler.dispatchMessage(Handler.java:102)\n                         E      at android.os.Looper.loop(Looper.java:135)\n                         E      at android.app.ActivityThread.main(ActivityThread.java:5254)\n                         E      at java.lang.reflect.Method.invoke(Native Method)\n                         E      at java.lang.reflect.Method.invoke(Method.java:372)\n                         E      at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:903)\n                         E      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:698)\n. Okay, it looks like I actually had a bad IP address, which is what caused us to be unable to load the feed.  Still, if the feed can't load, we should not crash.\n. @atavism Build is failing now with this:\n/Users/ox.to.a.cart/lantern/src/github.com/getlantern/lantern-mobile/app/src/main/res/layout/activity_lantern_main.xml:92:21-39: AAPT: No resource found that matches the given name (at 'layout' with value '@layout/feed_error').\nMissing checkin?\n. This is generally working very well for me.  A couple of issues that I noticed:\n1. The tab titles don't always match the feed that's actually shown (I think @percyalpha already noticed this)\n2. NY Times articles won't load, giving either EOF or Bad Gateway (note that I am using our DNS blocking trick with DNS server 104.131.168.238)\n\n. @atavism I've confirmed that I can build release now.  The NYTimes issue is still happening though.\n. @atavism I don't see any errors in the log.  Just a \"Gateway Timeout\" or \"EOF\" displayed in the web view, after it hangs for a considerable amount of time.  This is on a Nexus 4, running with VPN mode off.\n. @atavism Interestingly, the link in question doesn't work from anywhere, so it's not an issue with our proxy.\nhttp://rss.nytimes.com/c/34625/f/667200/s/4ef5a746/sc/13/l/0L0Snytimes0N0C20A160C0A40C160Cworld0Ceurope0Cpanama0Epapers0Espain0Bhtml0Dpartner0Frss0Gemc0Frss/story01.htm\n. rss.nytimes.com doesn't appear to be accepting connections:\nnc -vz rss.nytimes.com 80\n. @atavism LGTM, merging!\n. @myleshorton This actually adds measured because it's needed by http-proxy-lantern, which I'm including for purposes of integration testing.\n. @myleshorton The tests are passing in Travis.  Are you running a test locally that's failing?\n. @myleshorton PR build is green.  Thanks for the review!\n. @myleshorton Sorry about that, main changes are in here now.\n. @uaalto This is ready for another review.\n. Okay, I've switched to rot13 and merged from devel.  If tests all pass, I think this is good?\n. @uaalto Thanks for the review!\n. I have a better solution.\n. @fffw This is ready for you now.  There was a problem with how I had implemented Cancel, but I've fixed that and all the tests are passing now.\n. @aranhoide @myleshorton Should this be going to release-2.2.0 instead of devel?\n. LGTM!\n. I don't think having time.AfterFunc call cond.Broadcast() because that'll make other waiters stop even if they have a longer timeout.\nI'll try the single channel thing though.\n. Actually, a single channel won't work because we need to know how many waiters we have so that we send a message to each.  We could do a single channel plus an atomic counter of waiters, and then send a message for each waiter, but I don't know that this buys us much.\n. @myleshorton Yeah, I see the race.  It's odd because it doesn't look new per se, unless I'm missing something.\n. @myleshorton I think I fixed the race, let's see what Travis says.\n. @myleshorton tests are good\n. @myleshorton If we add the lantern version number, we should first make a provision on the proxy to strip it, right?\n. @myleshorton We're effectively already locking on s.Dialers inside of OnRequest (in balancer.go)\n. LGTM.  The build failure is unrelated to your changes.\n. The progress indicator itself looks good, though it might look even better if centered within the feeds area rather than the screen.\nSomething unrelated to this change that I noticed is that if I go to another app and then come back to the Lantern app, it still has all of the feed data that was there before, but it loads the feeds again.  Without the loading indicator, I wouldn't have noticed this, but with the indicator it's quite noticeable.  Is this worth dealing with?  If so, should we log it separately or do you want to just tackle it as part of this PR?\n. Agreed on the behavior when reopening, new position of progress indicator looks great!\n. Thanks @atavism!\n. @xiam Merged\n. @xiam I mean, I reverse merged to resolve the conflict :)\n. @xiam By \"name changes\" do you mean all the moved files in lantern-ui?  With lantern-ui in the original location, the directory structure is too deep for Windows which has a maximum path length of 260.\n. @xiam I only moved lantern-ui.  It's actually kind of strange to have it in the GOPATH in the first place, and I used git mv to move it, so it shouldn't cause any merge issues.\n. @xiam thanks for the review and improving the Makefile!\n. LGTM!\n. LGTM.  Thanks for pulling this together @atavism!\n. @fffw For tests like this, I think it's best to make them independent of the internet and out server infrastructure, so I suggest this - https://github.com/getlantern/lantern/pull/4162\n. Sorry about that @atavism.\n. LGTM and works on my Nexus 4.\n. It works!\n. @fffw Nice debugging!\n. It occurs to me that collecting all of the context for a particular error in one place may be difficult, because different pieces of information like the request ID, the server IP, the detailed error, and so on are buried in different parts of the stack.  If the caller of the library has to collect all of this information in one place to make a call, that could require a lot of changes to our APIs to make this information available.\nSomething like this or this could help.  It's basically a similar technique to Java's ThreadLocal.\n. Closing in favor of https://github.com/getlantern/lantern/pull/4363\n. @myleshorton Ok, just let me know when you want me to take a look.\n. @myleshorton Yeah, I think we can simplify.  Give me a bit.\n. FWIW, the RingBuffer is well tested :)\n. In hindsight, it would have been faster to just write the whole JSON out every time.  However, now that we have this, it is well tested and is quite a bit more efficient since it only writes the updated JSON and the updated index information.\nWhat do you think?\n. Closing in lieu of #4272\n. In practice, I think calling Finish() is not so bad, and it will save lots of trouble by preventing people from using Error as an error.\n. @myleshorton I agree.  That's why I went with your suggestion :)  And for the quantities of data we're talking about, the performance benefit of the ring buffer is not even worth considering.\n. @myleshorton Anything else I need to do here, or can we pull?\n. Thanks @myleshorton \n. > It seems to me the cache might be better as a separate struct @oxtoacart. The cache []*Masquerade slice, for example, is only used in the cache code itself, but that's not immediately obvious at first glance but also feels a little promiscuous to have it exposed to the rest of the code at all -- seems like it could be nicely hidden with the two just communicating through the masquerades channel.\nThe only way to truly hide it would be to put it in a separate package, but this implementation is intentionally closely coupled to the fronting code for simplicity.  I'm inclined to leave as is.\n. Thanks for the review @myleshorton!\n. I'm just going to pull this.\n. @uaalto I liked your suggestion of cleaning up the API that I ran with it.  Comments in code.\nWhile testing all this, I found some other issues that I just kind of cleaned up.\n. @myleshorton These changes might be interesting to you as well.\n. Manually tested mobile, and feeds are loading okay.\n. Nice!  The other big thing we need to add is pre-aggregation.  We could do that very specifically for the Error type that @fffw defined and build a map of Measurements.\n. @fffw @uaalto Sorry about my recent silence, been heads down integrating errors and context.  My next step this morning will be to pull in this to have a complete solution.  I'm not aiming to have all errors instrumented, just a few of the most interesting ones.  We could even go live with that and see what we learn.\n. Closing in favor of https://github.com/getlantern/lantern/pull/4363\n. Closing in lieu of #4295.\n. @fffw The really big benefit to a gls-type approach is that it doesn't require modifying our method signatures.  We can pass the context behind the scenes, so we get a lot of bang with very little refactoring.  Also, if we're using a library that doesn't yet support passing Context, that's okay, it passes silently behind the scenes.\n. > For your point 1, context passes information top down, while Error attaches information bottom up, which is complementary to each other. Without the bottom up propagation, we have to log or report immediately when the error occurs, or the details will be lost.\nI agree, they are definitely complementary.\n\nAs for your point 4, typed error is an recommendation for complex packages. Many 3rd party logging library, like logrus and log15, all use structured logging. We probably can consider evolve in that direction.\n\nSorry, I don't quite understand.  The structured logging here just means that they actually log JSON rather than a string, right?  We're essentially talking about doing the same in terms of submitting our errors as measurements, right?  My point was about something else, namely that to ensure that the information attached to our error propagates in a typed form, we have to make sure it's handled properly along the entire path between whoever is logging it and whoever raised it.\n. > Goroutine - context: Not all Goroutines require the gls data, but we have to establish a convention to always call ctx.Go. With Context, we can pass the context to go func(), or create new context from the one in outer scope when necessary.\nI don't understand how passing the context along is any better.  Either way, the intermediary function that's spawning the goroutine has to know to pass this state.  Simply using context.Go() by convention actually seems easier, because I don't have to modify my method to accept a Context.\nFor example:\ngo\nfunc doStuffInGoroutine(myarg string, myotherarg int) {\n    context.Go(func() {\n        doStuff(myarg, myotherarg)\n    })\n}\nvs.\ngo\nfunc doStuffInGoroutine(myarg string, myotherarg int, ctx *Context) {\n    go func() {\n        doStuff(myarg, myotherarg, ctx)\n    }\n}\nEither way we're aware of the need to pass context, but the 2nd one has a more verbose syntax.\n\nContext - error: When EOF occurs when dialing proxy, logging or reporting the user agent adds nothing but noise. We should select those context really makes sense. If it becomes tedious to extract same set of information from context, a handy custom helper FromContext(e Error, ctx Context) Error would be enough.\n\nI don't think the user-agent is noise.  Perhaps some user agents behave in a way that causes the EOF (for example the user agent disconnects early).  That's something that we'd want to see in our Influx data.  I think it was actually you who convinced me that we should collect as much information as is reasonably possible into the raw Influx data to see what we can learn from it.\n. BTW, getting back to the point about attaching metadata to errors being complementary to passing it down via context, I think what would be really cool is if the errors package integrated with context so that a call to error.New() or error.Wrap automatically attaches the context.  That way, we can use the context setting convention to fill our context and our errors, killing two birds with one stone.\n. > Sorry for the confusion. I just recommend to use fields instead of formatted strings to create both error and log entry in the future. That would eliminate return fmt.Errorf(\"Fail to xxx: %v\", err) style completely, so code can either: 1. return error as is, or 2. attach fields use errors package. What if there're 3rd party package in between? I don't know but didn't see any occurrence. Anyway we need to propagate errors bottom up.\nI agree, the fmt.Errorf() style is something I regret doing.  It was convenient at first, but it loses too much information.\nI think this points out something important, namely that we have two types of data related to errors and logging.\n1. Data about the error, like what was the underlying error, where in the code did the error occur, what were the data parameters that led to the error, etc.\n2. Data about the context in which the error occurred, such as high-level operation (proxying), user-agent, whether or not we're detouring, the user's locale, etc.\nI'm thinking that the best approach is a combination where:\na. We populate context before errors even happen so that we have that available both for errors and for debug logging\nb. At the point that an error occurs, we switch to using structured errors that capture information about the error in a machine-readable format (e.g. callsite information, nested error preserved in its original form, etc.)  In a way, Java's exceptions are a good example here in the way that they contain typed fields and also nested causes.\n. > Ha comments become cluttered. By saying passing context, I mean passing context when necessary instead of calling context.Go in all occurrences.\nMy view is that intermediary layers don't know when context is or is not necessary, so they have to assume it always is.  For example, something like this:\ngo\nconn, err := idletiming.Wrap(dialFN)\nTaking our real context as an example, with user-agent, request id, origin host, etc., the idletiming.Wrap function may not care about any of this because it doesn't even log anything or return errors, however the dialFN may care because it does.  The only solution is to pass the context through all the time, so now we have:\ngo\nconn, err := idletiming.Wrap(ctx, dialFN)\nAnd dialFN has to take a context as well.  And so on.  That's a lot of functions that need to change, and it clutters the code.  With my context implementation, most of the time nothing is required.  If idletiming happens to open a goroutine (which we do relatively rarely on the critical path), then it just switches to context.Go, which is quite easy and an isolated change.\n. BTW, this branch has a bug that causes context to leak, which does pollute the log.  That's fixed in #4295.\n. @fffw Cool!  So, what do you think is the best way to integrate this and the errors package?\n. Actually, @fffw, can you make a branch with the final version of your errors package but without any of the changes in our existing code?  That'll give us something to play with to figure out how to integrate this.  For example, I think the stuff that you have for locale and such would be great in our default context.\nBTW, you might notice in the new context API that you inspired me to use a fluent API style.\n. Closing in lieu of #4295.\n. Here's what the log looks like now.\nMay 15 07:38:00.104 - 8m15s ERROR balancer: balancer.go:81 Unable to dial via (trusted) chained proxy at xx.xxx.xxx.xxx:443 [] to connect://logs-01.loggly.com:443: Unable to dial server (trusted) chained proxy at xx.xxx.xxx.xxx:443 []: EOF on pass 2...continuing [detour=false op=proxy origin=logs-01.loggly.com:443 request_id=8203977569896484726 user_agent=Go-http-client/1.1]\nMay 15 07:38:00.105 - 8m15s DEBUG flashlight.client: handler.go:132 Could not dial Still unable to dial connect://logs-01.loggly.com:443 after 3 attempts [op=proxy origin=logs-01.loggly.com:443 request_id=8203977569896484726 user_agent=Go-http-client/1.1]\n. 'global' is just a concept of global contextual state.\n. > Say if we want to retrieve current user settings before report error. Why not call a Settings service in a central place and merge the result with error details? It's more explicit than PutGlobalDynamic somewhere else and retrieve the value through a string key.\nTheoretically, something may want to add a non-exported value to the global context.  This way, it can do that without having a coupling between the error logging service and whatever knows about that context.\nThe way I think about it, the global scope is the base of any context, and then additional contextual information is added on top of that.  Originally, I was actually going to have a single global context in the app and just Enter/Exit from there, but passing that around the application would be difficult.\n. It's useful to have global context in the same module as the other context stuff because it follows the same scoping rules.  That is to say, for a given key, the value indicated is looked up via the following chain:\nContextual interface -> Current Context -> Parent Context (etc) -> Global\n. Closing in favor of https://github.com/getlantern/lantern/pull/4363\n. Fields from which to choose indexed dimensions:\napp\napp_version\nclient_ip\ndetour\ndomain\nerror\nerror_count\nerror_type\ngeo_country\ngo_version\nhostname\ninstance_id\nlocale_country\nlocale_language\nop\norigin_host\norigin_port\nos_arch\nos_name\nos_version\nproxy_host\nproxy_port\nproxy_type\ntimezone\nuser_agent\n. Closing in favor of https://github.com/getlantern/lantern/pull/4363\n. Code LGTM, just waiting for tests to pass.\n. These changes look good, and the idea of checking using the last site is a clever way to distribute the load.\nThe reason that we disabled checking originally is that in some cases, the checker was creating TCP connections but not actually doing meaningful work, which caused the client to eventually get blacklisted for looking like it's DOS'ing us.  Did you figure out how/why that's happening and if so, how does this PR fix that?\n. Yeah, that decreased coverage warning is a little annoying.  I've updated our configuration to only complain if coverage decreases more than 1%.  You can ignore the current warning.\n\nI chose to skip it.\n\nWhat does this mean?\n. > Dialer check is only meaningful to comparing metrics among dialers, when there's some activity.\nI like that.\n. @fffw This looks good to me (and works in my testing).  I had a couple of little comments that you can address if you want, otherwise please feel free to merge at your convenience.\n. @fffw I like that you added a defensive condition to prevent checks from triggering a blacklisting condition.\n. Thanks @fffw, it is a big one.  I think @myleshorton would say that the priority right now is on pro stuff, so I wouldn't worry about this one too much unless you have extra time available :)\n. @fffw Thanks for taking a look!\nFunnily enough, most of these were deliberately decided opposite of what you suggest.  The purpose of \"op\" isn't just to provide context, but to actually model operations on whose success or failure we want to report.  A single Op can either succeed or fail, and we count it as one success or failure.\nLet me use a concrete example.  Proxying a request is an op which I call proxy.  Within this, we have a dial_for_balancer op which dials a chained proxy for the balancer.  Because we can have multiple proxies, and because balancer is willing to retry dialing a few times, a single proxy op corresponds to multiple dial_for_balancer ops.  The results of these could look like this:\nproxy -> success\n    dial_for_balancer (server a) -> fail\n    dial_for_balancer (server b) -> fail\n    dial_for_balancer (server a) -> success\nIn borda, I want these to be counted as 2 successes and 2 failures, under each of the respective ops.\nWith that context, let me address your specific points:\n\nAdd a new method context.Current(), to retrieve current context at any place, so we don't need to pass op around (here for example).\n\nI intentionally don't provide access to the current context because I want to be explicit about which op we're marking as failed.\n\nSubstitute ops and flashlight/ops with flashlight/context, to wrap context package with a few helper methods. context has a clearer meaning than ops IMO.\n\nYes, I've also considered collapsing the two.  I leaned towards keeping them separate because context is a very useful low-level package for tracking contextual information, while ops actually encapsulates logic about reporting on the success and failure of operations.\n\nHave a separate package, say, errpt, to report error at certain place. It should know nothing about context.\n\nI think you're thinking of this as a reporting thing, but I don't think of this as reporting, I think of it as counting metrics on successes and failures of operations in the system.  When we're in the context of an operation, I want to explicitly mark the operation as failed and then report that as a single failure when the op finishes.  Also, if the op was never marked as failed, I want to report that as a success when the op finishes.  Counting successes if important so that we can understand failure rates, not just see that failures occurred.  That's one of my big frustrations with Loggly - it tells me that we had X dial failures during some time period, but I have no idea whether that's important or not because I don't know how many dial successes we had.\n\nAdd a WithContext method to errors.Error. I don't hold a strong opinion on it though.\n\nI don't understand this one.  What would that achieve?\n. @fffw I like your suggestion for the naming.\nOn the subject of propagating context in errors - we can't control when someone logs an error.  Code at a higher level of the call stack may choose to log an error, in which case we want to see its context.  I suggest that we leave the context attached to the error so that it's available there.\nI'll make an update to the names and will also reverse merge some stuff from devel and let you know when it's ready.\n. @fffw I thought about it, and I actually want to stick with the naming of ops methods as is.  I tried using something like \"Begin\" and \"End\", but that sounded too much like we were actually starting and ending something that does actual work.  Keeping names like \"Enter\" and \"Exit\" make it clear that the op is really just a contextual thing, not an actual operation.  What do you think?\n. @fffw I've made the API name updates to ops.  Anything else I need to do?\n. @fffw Thanks for your contributions to getting this monitoring in place, and thanks for reviewing this monster PR!\n. @myleshorton This now works when I test.  Travis test failed for what seems to be an unrelated issue, I've restarted it.\nThe basic logic looks solid to me, there's just a couple of things:\n1. Polling on the Config instance doesn't make any sense\n2. There's a redundant else branch assigning false to an already false boolean\nOther than those and assuming the test passes this time, this LGTM.\n. Occasionally, I see an error when I run the test:\n```\nDEBUG balancer: balancer.go:106 Dialing tcp://does-not-exist.com:80 with \nDEBUG balancer: balancer.go:112 Successfully dialed via  to tcp://does-not-exist.com:80 on pass 0\nDEBUG balancer: balancer.go:106 Dialing tcp://does-not-exist.com:80 with \nDEBUG balancer: balancer.go:112 Successfully dialed via  to tcp://does-not-exist.com:80 on pass 0\nDEBUG balancer: balancer.go:106 Dialing tcp://does-not-exist.com:80 with \nDEBUG balancer: dialer.go:160 Will recheck  111.431616ms later because it failed for 1 times\nERROR balancer: balancer.go:96 Unable to dial via  to tcp://does-not-exist.com:80: fail intentionally on pass 0...continuing\nDEBUG balancer: balancer.go:106 Dialing tcp://does-not-exist.com:80 with \nDEBUG balancer: dialer.go:160 Will recheck  464.039804ms later because it failed for 2 times\nERROR balancer: balancer.go:96 Unable to dial via  to tcp://does-not-exist.com:80: fail intentionally on pass 1...continuing\nDEBUG balancer: balancer.go:106 Dialing tcp://does-not-exist.com:80 with \nDEBUG balancer: dialer.go:160 Will recheck  519.107018ms later because it failed for 3 times\nERROR balancer: balancer.go:96 Unable to dial via  to tcp://does-not-exist.com:80: fail intentionally on pass 2...continuing\nERROR balancer: dialer.go:168 No check function provided for dialer Dialer 1\nDEBUG balancer: dialer.go:160 Will recheck Dialer 1 1.297523921s later because it failed for 3 times\nERROR balancer: dialer.go:168 No check function provided for dialer \nDEBUG balancer: dialer.go:160 Will recheck  707.791382ms later because it failed for 3 times\n--- FAIL: TestCheck (0.30s)\n        Error Trace:    balancer_test.go:205\n    Error:      Should be true\n    Messages:   should recheck failed dialer\nERROR balancer: strategy.go:52 Using the Weighted balancer strategy.  This strategy is incomplete and may not work as expected.\nERROR balancer: strategy.go:52 Using the Weighted balancer strategy.  This strategy is incomplete and may not work as expected.\nERROR balancer: strategy.go:52 Using the Weighted balancer strategy.  This strategy is incomplete and may not work as expected.\nERROR balancer: strategy.go:52 Using the Weighted balancer strategy.  This strategy is incomplete and may not work as expected.\n```\n. @fffw Any luck dealing with that error?\n. LGTM!\n. Cool.  Thanks for fixing!\nOn Tuesday, May 31, 2016, fffw notifications@github.com wrote:\n\nMerged #4409 https://github.com/getlantern/lantern/pull/4409.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/getlantern/lantern/pull/4409#event-677065895, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AExNzjpGVWbj1Q0Gv9d7B8VLL60GpwQtks5qHELpgaJpZM4Ipy87\n.\n\n\nCheers,\nOx\nPGP Key - https://pgp.mit.edu/pks/lookup?op=get&search=ox@getlantern.org\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\n. Code LGTM.  How was this failing on Windows?\n. The test failure doesn't seem to be isolated to this branch.\n. Yeah, lantern_test is failing on devel and master too.\n. @myleshorton Yes, it's hitting real proxies and google.com.\n. It looks like it's trying to hit a proxy that doesn't exist.\n. @myleshorton Thanks for the review.  I've addressed your comments.  I'd like to leave the GetQuota capability in place as it seems useful for giving up-to-date information to new UI clients.\n. @fffw If you have time and feel comfortable, would you mind looking at this?\n. Thanks for the review @myleshorton !\n. Yes, i was testing and noticed that i was quickly getting into hundreds of\nfile descriptors\nThe whole \"use of closed network connection\" thing had been nagging at me\nfor a while too, so I took this as an opportunity to dig into it.\n\nCheers,\nOx\nPGP Key - https://pgp.mit.edu/pks/lookup?op=get&search=ox@getlantern.org\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\n. @myleshorton The below examples demonstrate what was happening with idletiming.  Basically, a net.Conn is supposed to return io.EOF to pending reads and writes if/when the remote end disconnects.  However, if we close the connection locally (as idletiming does), then pending ops get the \"use of closed network connection\" error.  The fix was to give pending ops an io.EOF.\nBad\n``` go\npackage main\nimport (\n    \"io\"\n    \"log\"\n    \"net\"\n    \"os\"\n    \"sync\"\n    \"time\"\n)\nfunc main() {\n    l, err := net.Listen(\"tcp\", \"localhost:\")\n    if err != nil {\n        log.Fatal(err)\n    }\ngo func() {\n    for {\n        conn, err := l.Accept()\n        if err != nil {\n            log.Fatal(err)\n        }\n        conn.Write([]byte(\"Hello there\"))\n        time.Sleep(2 * time.Second)\n        conn.Close()\n    }\n}()\n\nconn, err := net.Dial(\"tcp\", l.Addr().String())\nif err != nil {\n    log.Fatal(err)\n}\n\nvar wg sync.WaitGroup\nwg.Add(1)\ngo func() {\n    b := make([]byte, 10)\n    for {\n        n, err := conn.Read(b)\n        if err != nil {\n            if err != io.EOF {\n                log.Printf(\"Got unexpected error %v while reading\", err)\n            } else {\n                os.Stdout.Write(b[:n])\n            }\n            break\n        }\n        os.Stdout.Write(b[:n])\n    }\n    wg.Done()\n}()\n\ntime.Sleep(1 * time.Second)\n\n// We're closing the connection prematurely, just like idletiming used to\nconn.Close()\n\nwg.Wait()\n\n}\n```\nGood\n``` go\npackage main\nimport (\n    \"io\"\n    \"log\"\n    \"net\"\n    \"os\"\n    \"time\"\n)\nfunc main() {\n    l, err := net.Listen(\"tcp\", \"localhost:\")\n    if err != nil {\n        log.Fatal(err)\n    }\ngo func() {\n    for {\n        conn, err := l.Accept()\n        if err != nil {\n            log.Fatal(err)\n        }\n        conn.Write([]byte(\"Hello there\"))\n        time.Sleep(2 * time.Second)\n        conn.Close()\n    }\n}()\n\nconn, err := net.Dial(\"tcp\", l.Addr().String())\nif err != nil {\n    log.Fatal(err)\n}\nb := make([]byte, 10)\nfor {\n    n, err := conn.Read(b)\n    if err != nil {\n        if err != io.EOF {\n            log.Printf(\"Got unexpected error %v while reading\", err)\n        } else {\n            os.Stdout.Write(b[:n])\n        }\n        break\n    }\n    os.Stdout.Write(b[:n])\n}\nconn.Close()\n\n}\n```\n. @myleshorton Correct, the merge order doesn't matter because this branch of the lantern repo already includes the unmerged changes to idletiming and http-proxy.\n. @atavism The EOF thing is like related to a change that I recently made to idletiming.  We shouldn't be reporting this as an error as it's normal and even intended by the HTTP spec.  I went ahead and fixed this in the issue4554 branch.\nThe \"no route to host\" error looks weird because those line numbers don't match what's on the issue4554 branch.  Are you sure you've got the recent code?\n. @atavism Thanks for the review!\n. Yeah, I'm seeing a failure too, lantern_test.go right?\n. It's weird, according to travis, this commit was good - 9ab47f4105517d8c9b0bbfdfb06b448b0b0f37d6\nI tried checking that out locally and running, and the test still fails, so I suspect that this is something that changed on the proxy side.\n. @myleshorton I fixed the test for Linux.\n. > Oh my alternative has a flaw. It will close connections prematurely in below rarely happen case:\n\n\nclient sends request and close.\nserver continuously send large chunk of data back, then close.\n\nSame flaw exists for current code.\n\nGreat catch!\n. @fffw Thanks for the thorough review and great suggestions!\n. Okay, this fixed the test, I'm just going to merge it.\n. @fffw This LGTM except that you need to switch to a RWMutex.\n. LGTM.\n. Honestly I kind of like @myleshorton's simple solution for the panic itself, and I personally like having the line file and line number on every line because that means I can grep for it.  In my experience with Log4J in Java land, stacktraces usually didn't include the line prefix and it always annoyed me!\n. @fffw If you add the prefix back and change the indentation to the original 2 spaces, I'm okay with changing the implementation.  I agree that this new style is cleaner.\n. LGTM!\n. cc: @fffw \n. Yes, location info now pinpoints file and line number\n. @myleshorton Thanks for the review!\n. This regex matching would be worth testing in a JUnit test.\n. Not used anymore\n. If we're censored or in get mode, we immediately try using the proxy.\n. This whole thing became simpler because we're not having to do TLS to the proxy now that we're using the local plain text GetModeProxy.\nNote - the XMPP infrastructure still does TLS itself, but over the proxy connection.\n. Much simpler now.  Note - since we're using the local GetModeProxy, it handles falling back (including to a direct connection), so we don't have to.\n. In my testing, this retry handling didn't seem necessary (even when my firewall blocked all of Google), so I took it out.\n. No longer referenced publicly - everyone goes through the same logic of determining whether or not a fallback is needed.\n. Now that we use the local plain test GetModeProxy, we don't need to do this TLS stuff.\n. You'll see this new method used a lot.  It makes sure that for the duration of the supplied logic, we have a running GetModeProxy that's proxying to the default fallback.\n. +1 We can always add this sort of thing back in if/when we actually have a use for it.\n. Ah, I hadn't noticed that.  I'm pretty sure that the default HttpClient already does hostname verification, so as long as we're connecting to an https endpoint at the far end, its cert should get validated.  From what I can tell, the reason that the reason we provided our own LanternHostNameVerifier() was in order to trust the fallback server's cert, whose hostname and ips don't match how we're actually connecting to it.\n. No.  The whole point of this change is that we use the local Lantern proxy as our proxy, to which we're connecting with a plain text connection.  It handles the SSL connection to the fallback for us.\n. Removed unused stuff from Lantern.pro.\n. -XstartOnFirstThread is no longer necessary, and in fact was causing problems with AWT.\n. -XstartOnFirstThread is no longer necessary, and in fact was causing problems with AWT.\n. Noticed this code, which shouldn't have been checked in.  Removed.\n. Need to init gtk now that SWT isn't doing it.\n. Need to run gtk main loop now that SWT isn't.\n. No longer needed\n. I suspect that this is what was getting GTK initialized originally.\n. This class didn't seem to be used, so I removed it.\n. New Swing message service.\n. The int was SWT specific and was being used to set some options that aren't supported in Swing.\n. Swing doesn't have Retry and Cancel options.  So instead, this is now using the default Yes and No, which I think makes sense with the message here.\n. This class wasn't used, so I whacked it.\n. This class now uses Swing/AWT instead of SWT.\n. New implementation of MessageService.\n. Didn't seem to be used, so I whacked it.\n. Redundant now that we default to ignoring unknown properties\n. Redundant now that we default to ignoring unknown properties\n. I remembered that we need to disable bulk invites, so I disabled it.\n. I added some new ways of building installers which are documented on the wiki.\n. I use commons-exec for firing up the fteproxy child processes\n. This is a new command-line option that supports parameter maps, e.g.\n-pt type=FTE -pt upstream-regex=\"blah\"\n. Unused class, removed\n. Now supports waiting for server on an InetSocketAddress\n. Utility for finding any random free socket.\n. Support logging info to the root logger\n. Added support for reading s3config from a local file.\n. Ads now just hold a ProxyInfo, which is a unifying data structure for information about proxies.\n. Existing property accessors are maintained for backwards compatibility and simply delegate to the proxyInfo.\n. This keeps track of which proxies have been configured.\n. If a proxy has already been configured, don't bother adding it again.\n. FallbackProxy is now just a subclass of the more general ProxyInfo\n. Existing property accessors are maintained for backwards compatibility with naming schemei n S3 configuration.\n. Initialize pluggable transports stuff if necessary.\n. Instead of tracking a bunch of individual properties, we just hang on to the ProxyInfo\n. Interface backwards compatibility, delegate to ProxyInfo\n. We start our pluggable transports lazily\n. We stop our pluggable transports on the first failure\n. The address for the chained proxy is either the actual remote proxy (when not using a pluggable transport) or the address of our local pluggable transport's client.\n. When running over a pluggable transport that supplies its own encryption, we don't bother to encrypt stuff ourselves.\n. If the pluggable transport provides its own encryption, we won't bother to do our own.\n. New general abstraction that encapsulates information about a proxy.  It is the base of FallbackProxy, and it is used in KScope ads and by the ProxyHolder.\n. Implementation of PluggableTransport interface using fteproxy\n. Abstraction for pluggable transports, both on the client and on the server side.\n. Factory for PluggableTransports\n. Pluggable transport configuration is just passed through as a string->string Properties object.\n. Handy class for spooling up a chained proxy setup using fteproxy.  You can hit it at localhost:8080.\n. Actually each remote proxy requires its own corresponding local fteproxy client.  Each fteproxy client is currently only capable of talking to a single remote fteproxy.  Putting a socks layer on top of fteproxy could eventually help resolve this.\n. I think I do.  If either upstreamRegex or downstreamRegex is specified, we then check to make sure that both are specified.  If they are, then we use them.\n. No longer used\n. We no longer send stats to the controller\n. StatsManager supercedes StatsUpdate and StatsReporter\n. InstanceStats supersedes Transfers\n. Global has been replaced by a generic Stats object\n. @myleshorton I think this change to the condition for displaying the alert defeats the whole purpose of the alert.  The point is that if a user doesn't have a fallback already, and we can't read a fallback config, there's no point to that user running Lantern, so we want to show them the alert.  This new logic only shows an alert if the user doesn't have a URL config file.  That misses the case where the user has a url config file, but we can't actually fetch an updated S3 configuration for some reason (e.g. network flakiness).  As it stands, your change will appear to fix the reported problem of the alert dialog being shown, but it doesn't actually address the root cause, which is that we can sometimes have trouble fetchinging the S3 configuration.  What I think is actually needed to fix the bug is to tweak the existing logic to only display the alert if we couldn't fetch an S3 configuration AND we don't already know about fallbacks from fetching it a previous time.  If we don't already persist known fallbacks across runs of Lantern, we should do that too so that even if the first S3 config fetch after starting Lantern fails, as long as we learned about a fallback in a previous run, we can continue to operate.  I think we should also improve the text of the error message, since what we couldn't find isn't just a \"configuration\", we specifically were unable to determine a fallback for the user.  Making this text clearer would reduce confusion on both the user's and our parts if and when this happens again.\n. This is actually for #1487\n. Changes to this file are actually for #1487\n. @myleshorton I know that our use of DefaultHttpRequestRetryHandler isn't new, but it occurs to me now that it could be a little dangerous if someone happens to use this factory method for a client that is then used for doing a POST.\n. Seems like the retry count should maybe be an option so that the caller 1) has control over it and 2) is aware of the retry logic's existence.\n. Good catch.  Kinda wish this didn't have to be in here, but given how things are working right now, it's correct to do it.\n. Some clever @skivvies trickery to get install4j to actually make a folder.\n. @skivvies cleaned up the description and maintainer email in our debian package.  The old description was too long and ended up displaying poorly in tools.\n. This sets up a .lantern folder during installation, which we need in order to set up our MITM certs.\n. This runs flashlight with the -install flag, which gets it to create its certs and add them to the system keystore.  We do this during installation because sudo/administrator is required for this on OS X/Windows.  On Linux, we don't need that, so the installer doesn't run it.\n. This makes the normal user own the certs and PK in .lantern so that when she runs Lantern, flashlight can read the certs.\n. Added dependency to libnss3-tools so that we can install certs to keystore on Linux.\n. libnss3-tools dependency on 32 bit platform.\n. This new cumulativeSslContext allows us to trust all the certs that Java trusts by default, plus whatever Lantern trusts.  We need this so the clients trust the MITM cert, which is added to LanternTrustStore by the Flashlight pluggable transport.\n. Pass trustStore to Loggly so that it can use the cumulativeSSLContext.\n. Pass trustStore to Statshub so that it can use the cumulativeSSLContext.\n. DefaultProxyTracker gets a flashlight right at instantiation time.  No matter what happens with the other proxies, flashlight is always there.\n. Flashlight only supports ports 80 and 443 (i.e. no XMPP on 5222).  This allows us to exclude it from the fallback rotation when the requested port is other than 80 or 443.\n. This allows us to prioritize flashlight over other fallbacks to make sure we're sending the bulk of our traffic through there.\n. Hardcoded settings for flashlight.  In the future, we can look at controlling this through S3 config.\n. Now that we have flashlight, not every fallback is from s3.  When we get s3 config info, we now only make changes to S3 fallbacks.\n. Stuff that was common between FTE and Flashlight is in this new base class.\n. This is how LanternTrustStore gets its hands on whatever cert is being used to MITM.\n. When getting an IP from flashlight, this header signals what we need.\n. This is just a test that demonstrates that https://github.com/getlantern/flashlight/issues/6 isn't unique to the Go environment.\n. Useful for smoke testing flashlight.\n. Added this because I was seeing an NPE in one of the tests.\n. @myleshorton This isn't really an init method, as it gets called every time a proxy becomes available, right?  If so, please name it something else.\n. Yup, it gives you the file written to disk with the id from your installer\nfilename (i.e. if the installer is lantern-1234567890.exe, the\n.lantern-configurl.txt contains 1234567890).\nFYI - once I merge, we're kind of committed to this course, so maybe I'll\nwait until the controller changes are done as well.  Incidentally, I just\nrealized that I requested this merge to master instead of devel, so I'll\ncreate an updated pull request into devel instead.\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Fri, May 16, 2014 at 3:03 AM, aranhoide notifications@github.com wrote:\n\nIn install/lantern.install4j:\n\n\nUtil.showMessage(\"Unable to save configuration URL: \" + e.getMessage());\nreturn false;\n  +} finally {\nif(out != null) {\nout.close();\n}\n  +}\n  +return true;\n\n\n\n\n\n\n\n\n\n\nNice.\nSo this gets you a .lantern-configurl.txt actually written to disk, right?\nIf so, LGTM to merge.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1553/files#r12728807\n.\n. Should this say \"No extension file found at {}\" ?\n. @aranhoide Here's the post-install script that handles writing the file\n. I can't really take credit for it - see https://wiki.ubuntu.com/DashAsBinSh\n. Added attribution to give credit where it's due\n. mediaFilePath at this point includes the directory structure, so it's possible for old-style installers not to trigger this condition.  Better would be to go ahead try and parse the path and a) make sure there are no parse errors and b) the resulting ID is the right length.\n. Same comment as above.\n. Oh, and also, if the mediaFilePath doesn't check out, but there's not already a .lantern-configurl where we expect, the installer should show an appropriate error.  Of course, I don't know if it can do that in unattended mode - I think it may just fail silently.\n. True enough - logged as #1560 \n. Oh, please do make sure to address the first comment (mediaFile includes path) :)\n. Sweet, you're right!  Sorry about the false alarm.\n. This actually needs to always go through a proxy, otherwise it could be observed by the censors.\n\nYou'll want to use an HttpClientFactory, which you can inject into the constructor (see S3ConfigFetcher for an example of how to do that).  From there, use the newProxiedClient() method to get an http client that always goes through a proxy.\n. Need to check the status code to make sure it's ok.\n. ObjectMappers are actually safe to use from multiple threads, so rather than constructing one for each request, you could construct a single one and save some work.  Even better, just use org.lantern.JsonUtils.\n. Instead of printing to stderr, always log to a Logger to make sure it goes into our log files and gets sent to Logglye when necessary.  You can see an example of configuring a static logger in org.lantern.monitoring.StatsManager.\n. +1 on moving this into a dedicated package.  For future reference, you can use git mv instead of mv to make sure that the history follows the file.\n. @atavism Why did you move this into GeoIpLookupService?  It seems to me that this service shouldn't know anything about peers.\n. 1. You should do this only in on place (i.e. in the static initialize for JsonUtils)\n2. We should probably not change this setting globally, because other users of this object mapper may have been depending on whatever the default field visibility was.  Better is just to use the @JsonIgnoreProperties(ignoreUnknown = true) annotation on GeoData\n. You need to check the status and raise an appropriate exception if it's not 200.\n. I feel ya.  The tricky thing is that this establishes a circular dependency.  S3ConfigFetcher depends on HttpClientFactory, which depends on Censored, which depends on PublicIpAddress.  Any suggestions on how to resolve that?\n. Agreed.  We can break that dependency by using StaticHttpClientFactory.  In fact, I'm going to do that now.\n. @myleshorton Start with the default masqueradeHost.\n. @myleshorton When s3config changes, grab the latest masqueradeHost from that.\n. Why does this throw an exception, but the catch blocks below just swallow their errors?\n. Yes.  It looks like the way it works today, it always returns a GeoData no matter what.  If it couldn't look you up, that GeoData has a blank country and a lat/lon of 0,0.  We should probably just keep doing the same thing.\n. The problem with grabbing it from the model is we don't know whether or not it's been set yet.\n. Please make this private and starting with a lowercase to follow JavaBeans convention.  Please do similarly for all other properties on Country, Location and GeoData.\n. :)\n. Instead of returning null here and below, can you please return a GeoData with country = \"\", and lat/lon = 0/0?  This will be backwards compatible with what we used to return, which I suspect the UI relies on.\n. You need to keep the getCountrycode, getLatitude and getLongitude methods, otherwise the UI will break.  You can just have these delegate to the contained country and location objects.\n. Strike that - it looks like GeoData never makes it to the client, but is always just used to populate other objects that are exposed to the client.  So, I think we're okay here.\n. I don't think so, because I actually initialize masqueradeHost with a default value in PublicIpAddress.  So, even if lookupSafe() is called before we've gotten an S3 config (which I believe is possible), it will have a masqueradeHost available.  If I were grabbing it from the model, it would be null at this point.\nUsing the event allows me to override the default value \n. Oh, model always has an S3Config!  For some reason I thought that it would\nbe null until we've fetched it the first time.\nOn Jun 8, 2014 3:24 PM, \"myleshorton\" notifications@github.com wrote:\n\nIn src/main/java/org/lantern/util/PublicIpAddress.java:\n\n}\n }\n-    @Subscribe\n-    public void onNewS3Config(final S3Config config) {\n-        masqueradeHost = new HttpHost(config.getMasqueradeHost(), 443, \"https\");\n\nIt won't be null because the default value is, well, the default value!\n\u2026 <#1467d2794d15a198_>\nOn Sunday, June 8, 2014, oxtoacart notifications@github.com wrote: In\nsrc/main/java/org/lantern/util/PublicIpAddress.java: > } > } > > +\n@Subscribe https://github.com/Subscribe > + public void\nonNewS3Config(final S3Config config) { > + masqueradeHost = new\nHttpHost(config.getMasqueradeHost(), 443, \"https\"); I don't think so,\nbecause I actually initialize masqueradeHost with a default value in\nPublicIpAddress. So, even if lookupSafe() is called before we've gotten an\nS3 config (which I believe is possible), it will have a masqueradeHost\navailable. If I were grabbing it from the model, it would be null at this\npoint. Using the event allows me to override the default value \u2014 Reply to\nthis email directly or view it on GitHub <\nhttps://github.com/getlantern/lantern/pull/1568/files#r13524366>.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/1568/files#r13525992.\n. So here's the next problem - we construct PublicIpAddress all over the place, including in LanternUtils where we don't have access to a Model.  Should I just pass in the model to the constructor and then modify callers to either inject the model or, for static uses like LanternUtils, accept the model in their own method signature?\n\nNote - the promiscuous construction is an issue with the event-based way it works right now, because we're registering these guys as event handlers which will likely keep them from getting GC'ed.\n. Bummer, got a circular reference thing to work through.  This is going to take a while:\n1) Tried proxying org.lantern.state.Model to support a circular dependency, but it is not an interface.\n  at org.lantern.state.ModelIo.class(ModelIo.java:1)\n  while locating org.lantern.state.ModelIo\n  at org.lantern.LanternModule.configure(LanternModule.java:111)\n  while locating org.lantern.state.Model\n    for parameter 1 at org.lantern.DefaultCensored.<init>(DefaultCensored.java:113)\n  at org.lantern.DefaultCensored.class(DefaultCensored.java:26)\n  while locating org.lantern.DefaultCensored\n  while locating org.lantern.Censored\n    for parameter 0 at org.lantern.CountryService.<init>(CountryService.java:270)\n  at org.lantern.LanternModule.configure(LanternModule.java:134)\n  while locating org.lantern.CountryService\n    for parameter 1 at org.lantern.state.ModelIo.<init>(ModelIo.java:50)\n  at org.lantern.state.ModelIo.class(ModelIo.java:1)\n  while locating org.lantern.state.ModelIo\n  at org.lantern.LanternModule.configure(LanternModule.java:111)\n  while locating org.lantern.state.Model\n. I decided not to deal with the circular dependency and instead stick with using the event.  To avoid piling up a bunch of extra even listeners andd leaking memory, I made a single anonymous event listener that I register in a static block:\nhttps://github.com/getlantern/lantern/commit/64b39e08fd0a10541ecbcf864a363cf0f3f55fdd#diff-387fe2d577d84cdc8089387a3a036d5bR47\n. FYI, while Timer works perfectly fine, java.util.concurrent.ScheduledThreadPoolExecutor is recommended as a more flexible alternative that's available as of Java 5.\n. Nice!\n. Can you please add whitespace between methods?  I find it difficult to read without some whitespace.\n. Good idea\n. If you intend this to be a constant, you can mark it static final\n. Actually this was correct as is.  Port 8080 is the LittleProxy instance which itself talks to the flashlight instance at 8081.\n. Like the addition of the fluent API.\n. Might be nice to register our own domain name and use that here.  That way, if we decide to move this off Heroku, we can do so transparently.\n. Yeah.  The geo stuff is at geo.getiantem.org, but you probably want to use lantern.io for this since getiantem.org is served via CloudFlare, which we don't need for the Fastly registration stuff.  The reason we do the geo stuff over getiantem.org is because we actually host spoof it for blocking resistance.\nNote that you'll need to tell Heroku about the domain so that it can route appropriately, for example:\n\n. Sounds good.\n. Per the documentation for java.util.Set, this remove is redundant.  What did you observe that led you to add it?\n. Do you need to pass 443 here if the port was invalid?\n. Well, it's not 100% clear to me under which conditions one will get an invalid port.  I could imagine the API returning a 0 if the router supports UPnP but it's turned off.  One case I know of for sure is that the router supports UPnP, but doesn't allow mapping low ports (e.g. 443).  That is the case with my router, which is why I ended up in this branch of the code to begin with.\nI think we should probably just keep the message generic and always instruct people to manually map a port of we can't do it automatically for any reason.\nWhatever we do, I don't think we can pass 0 here, because flashlight will fail to start with such a port.\n. What about the case where something else has changed the port mapping?\n. Come to think of it, if the port is unmapped the firewall will flat out refuse the connection, which happens very quickly. I think peerscanner should check for that and tell the client if it happens, and that should be the condition we use to show/hide this message.\n. This makes sure that every line sent to papertrail has the prefix.\n. This puts flashlight server configuration in a different folder than client.\n. Pinning the WAN host globally prevents us from starting multiple flashlights with different ids.\n. This forces the port to 0 if we're not trying to port map, which gets flashlight to not port map.\n. Sweet!\n. So this means that we only support Firefox on Windows?\n. In the current Lantern, if someone running OS X or Linux only has Firefox but not Chrome, we already open the Lantern UI in Firefox.  With your change, we'll regress and instead show a message about needing to download Chrome.\n. This is the condition I'm talking about.  Today, when executable == null, we fall into the branch where we call openSystemDefaultBrowser().\n. Per your change, this exception will happen for anyone who doesn't have Chrome and isn't running on Windows.\n. Much closer!  The only remaining problem (which I only just recognized) is that this condition supersedes the devMode check.  I think if I'm in dev mode and specified the -chrome flag, that should take precedence over everything else.\nI think the following if/else should do it (and make things a little more readable):\njava\nif (LanternUtils.isDevMode() && model.getSettings().isChrome()) {\n    openSystemDefaultBrowser(uri);\n} else if (executable == null) {\n    if (!SystemUtils.IS_OS_WINDOWS) {\n        openSystemDefaultBrowser(uri);\n    } else {\n        // new logic here\n    }\n}\n. Actually, today the effect of the -chrome flag on Windows is to open Lantern in the user's default browser, which could be anything (including I.E., Safari, Opera or whatever), irrespective of whether or not the user has Chrome installed.  If you leave your change as-is, there will be two regressions in behavior:\n1. If Chrome is installed, UI will always open in Chrome even if it's not the default browser\n2. If neither Chrome nor Firefox is installed, the user will just receive an error message\nI don't know if these actually affect any real users/developers, but it seems like such an easy thing to fix by just altering the if statement that I would just go ahead and do it.  This'll be my last comment on the thread, as everything else looks fine to me.\n. Any reason you gave an extra character to the log level?\n. @myleshorton Is this method only ever called from one thread?\n. What's this magic number 10 about?\n. It seems like this and LanternUtils.setOauth should synchronize on the same lock to make sure that the accessToken, refreshToken and expiry are set and retrieved atomically.\n. Again, seems like you want to get the expiryTime and tokens atomically.  Perhaps they should be combined into a single dedicated data structure, like OAuthInfo or something like that?\n. OK.  I think it would be safer to have the API enforce the single-threaded nature of this op, but I can live with this if you just add a comment on the setOAuth method.\n. Which is why I'm okay with just putting a warning comment on LanternUtils.setOauth().\n. Cool, thanks!\n. Makes sense\n. Sweet, 3 second speed-up!\n. This is interesting.  Where did we land on the controller in terms of creating users for download-only clients?  I think I had been doing it in the XMPPAvailableServlet, but I think you changed it later.  Just want to make sure you thought about this and that it won't cause any problems.\n. @myleshorton This was an old bug of mine in the network tracker code.  Whenever we got a presence telling us the peer was offline, we would remove it from the NetworkTracker, but instead of using the userid, we were using the full JID, so NetworkTracker never removed it.  This would cause us to have disconnected peers hanging around.\n. This is the crux of the server-side change.  Once flashlight is connected to waddell, we get a ConnectedToWaddellEvent which gives us our waddell id and address.  We then include that in all of our kscope ads.\n. This is the crux of the client side.  If we get an ad with waddell information, we forward it to flashlight.\n. It's a little hoaky, but we get our waddell id by snooping on the logging output from flashlight.\n. You actually just need to cast to the HttpRequest interface, not the DefaultHttpRequest concrete type.  Other than that this class looks good.\n. Why is this needed?\n. Why pass this in instead of just instantiating inside of here?\n. Maybe move this up in case stopProxying throws an exception?\n. Oh, because we need the same one to be used elsewhere, duh!\n. Great catch, thanks!  Should be resolved now.\n. Thanks, I misread the instructions.\n. This snuck in from some investigating I was doing on the geo lookup issue.  Since we took this out in devel too, I figure we can just leave as is.\n. Haha, good catch.  Will fix that.\n. @myleshorton I just realized that I need to terminate this on reset.  Working on that now.\n. @myleshorton I took this out because it actually has the effect of kicking off another load, which we don't want.  There's also no need, since the friendsLoaded future is set to null.\n. Note - this won't interrupted any pending load.  That is no worse than previously, but it doesn't solve any existing problems.\n. @ed2k Thanks for submitting a PR.  FYI this code doesn't compile.\n. This file adds support for building on Travis.\n. Coverage reporting support\n. This script copies test.properties to ~/.lantern\n. These are the actual fixes for the bug :)\n. During testing I noticed this file is unused.\n. This always timed out when testing from Travis.\n. Test actually hasn't been compiling for a while, but Bamboo didn't properly alert us to this (or maybe we just missed it).\n. My encrypted OAuth credentials, decryptable by Travis.\n. Ah, I didn't realize that that folder was already getting created in a static initializer.  That said, it doesn't hurt to have the  LanternUtils api create the directory, since its caller can theoretically pass it anything.\nThat still leaves the question of what was actually failing though.\n. I'm not, I just moved it here\nThe reason I moved it is that we only need to delete the old file if it actually existed.  In the case where the old file didn't exist, we'll call delete unnecessarily and log a spurious warning because delete() returns false.\n. That's a good hypothesis.  We do run flashlight twice, maybe this is failing on the 2nd one for some reason?\n. Aha!  The problem is that the temp folder on the Bamboo build machine is on a different filesystem than the home folder to which we're moving the file.  So, I guess the whole renameTo approach won't work ...\n. This was already failing to compile, just cleaned it up so that I could run the tests.\n. Unused imports\n. I'm not sure if the sort algorithm will produce exactly the results you're after if the comparator returns non-deterministic results.\nTo get some insight, I constructed this test:\n```\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.Test;\npublic class SortTest {\n    @Test\n    public void testIt() {\n        List l = new ArrayList();\n        l.add(3);\n        l.add(2);\n        l.add(4);\n        l.add(1);\n        Collections.sort(l, new C());\n        System.out.println(l);\n    }\nprivate static class C implements Comparator<Integer> {\n    @Override\n    public int compare(Integer o1, Integer o2) {\n        System.out.println(\"Comparing \" + o1 + \" to \" + o2); \n        if (o1 == 4) {\n            return -1;\n        } else {\n            return o1 - o2;\n        }\n    }\n}\n\n}\n```\nWhen I run it, it prints [1, 4, 2, 3].\nSince you're already using a new instance of the comparator for each sort, you could store the randomized weight for each proxy for a given sort and return those consistently.\n. The sort is run every time that LittleProxy requests a fallback order, right?  The mix of traffic happens because each time that we generate a fallback order, it might be sorted differently based on the random value, correct?  I'm just suggesting that you store the random value for each proxy for the entire duration of each sort (i.e. the duration of building a single fallback order) so that the sort algorithm itself doesn't do something unpredictable.\n. > Each pair of elements will only be compared once\nI'm pretty sure this assumption is wrong. Below is an example that shows Collections.sort actually comparing the same pair of elements twice (4 to 1).  If each of these compare calls returns a different result, it's not entirely clear to me what the sort algorithm will do. The safe thing to do is to make sure that within a single Collections.sort call, compare for any pair of values always returns the same result. This would be quite easy to do by just storing the pairs and random result in a map of some sort on the Comparator instance.\n``` java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.Test;\npublic class SortTest {\n    @Test\n    public void testIt() {\n        List l = new ArrayList();\n        l.add(5);\n        l.add(1);\n        l.add(4);\n        l.add(2);\n        l.add(3);\n        Collections.sort(l, new C());\n        System.out.println(l);\n    }\nprivate static class C implements Comparator<Integer> {\n    @Override\n    public int compare(Integer o1, Integer o2) {\n        System.out.println(\"Comparing \" + o1 + \" to \" + o2);\n        return o1 - o2;\n    }\n}\n\n}\n```\nOutput:\nComparing 1 to 5\nComparing 4 to 1\nComparing 4 to 5\nComparing 4 to 1\nComparing 2 to 4\nComparing 2 to 1\nComparing 3 to 4\nComparing 3 to 2\n[1, 2, 3, 4, 5]\n. @ed2k This uses the default poll interval of 60 seconds.  I think it would be even handier if you set a small interval like 5 seconds.  This is still infrequent enough that it shouldn't make much of a difference to performance.\nWhat do you think?\n. These imports are unused.\n. I think this is redundant, as LanternUtils.class.getResourceAsStream is should be using a ClassLoader that's a child of the system ClassLoader.\n. I like that you moved this stuff into its own package.\n. I like to take out commented out code to avoid clutter.\n. What is this logic for?  Could use a comment.\n. This logic duplicates logic already in BrowserUtils.addDefaultChromeArgs\n. It seems like this comment would make more sense in BrowserUtils.addDefaultChromeArgs?\n. If this is false, commands won't actually have a command.  Need to handle this error somehow.\n. Oh, I see, we run it as an app on Linux.  To make this distinction clearer, I might make app a boolean flag on addDefaultChromeArgs, at which point your comment here makes more sense.\nAlso, rather than having it be addDefaultChromeArgs, I might make it buildChromeCommand and have it take care of finding the chrome executable from amongst all possible paths.\n. What does this have to do with the UI change?\n. That's not surprising.  What I was saying is that I would be surprised if LanternUtils.getSystemResourceAsStream would ever return a result when LanternUtils.class.getResourceAsStream() doesn't.  That's because I expect LanternUtils was either loaded by the system classloader or a child of it, in which case it'll delegate to its parent.\n. All I'm suggesting is moving the code that adds the -app flag into addDefaultChromeArgs and adding a boolean parameter to control whether or not that's added.  That would just more clearly express that this is something that's usually done, except on OS X and would provide something to which to anchor your comment.  You can still keep other os-specific stuff in the respective classes.\nReally not a big deal, just a minor suggestion and nothing that gates the PR.\n. Cool, thanks.\n. This is redundant.  You could say:\nboolean normalized = interent != null && internet.booleanValue()\n. But, it's perfectly clear as written, merging.\n. @myleshorton Since isChrome is no longer used, we should probably take it out of the model and remove the command-line flag.\n. Fixed.\n. Fixed.\n. Yeah, flashlight makes the directory.\n. Good catch, fixed.\n. This is correct as is.\n. Correct, we're just encrypting it for privacy and are never decrypting it.  I just picked the same mechanism that we're already using to encrypt the model on disk.\n. Fixed.\n. You're right, fixed.\n. We key the peer information in flashlight.yaml to it.  That way, when we get updated information for a specific peer, we update the existing information instead of adding a new entry.\nSaying this now, it occurs to me that I should be using the peer id, not the user id though.\n. Oh hey, I'm already using the full JID.  So, we're good.\nRegarding the native dependency - the Go code doesn't decrypt this thing, so it doesn't have a native dependency.  A one-way hash would be sufficient for what we're doing.\n. Yeah.  So we have this dependency on the Java side no matter what, since we're using the exact same mechanism to encrypt the model.\nI do see one downside to using encryption here - it gives an attacker some potentially useful information for breaking the cipher.  JIDs are fairly short, and if the attacker can discover plain text JIDs to compare with the encrypted versions, that gives them useful information.\nI'm going to switch it to a hash now.  Stay tuned.\n. Fixed - see https://github.com/getlantern/lantern/commit/920aca1bbf507f1592a239203ce1d9170866ff0a\n. Will this overwrite any changes that other processes made between line 76 and here?\n. If you make this a command-line flag and use the OS_ARCH check to set the default of that flag, then we can test the lantern-pi code path on our usual development machines.\n. Should this be using LanternUtils.isLanternPi()?\n. isDevMode() and isLanternPi() appear together a lot.  Can/should they be distilled into a single flag?\n. Why turn off XSRF protection for lantern-pi mode?\n. Why not use the CSP policy for lantern-pi?  I imagine we can still do it if we just use the machine's IP address rather than \"127.0.0.1\" in our CSP header.\n. Sorry, I don't get it.  Public sites use XSRF protection all the time.  What exactly is going wrong with XSRF on?\n. Okay, cool, thanks!\nCheers,\nOx\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\nOn Fri, Jan 9, 2015 at 11:29 AM, myleshorton notifications@github.com\nwrote:\n\nIn src/main/java/org/lantern/http/InteractionServlet.java\nhttps://github.com/getlantern/lantern/pull/2147#discussion-diff-22729425\n:\n\n@@ -171,11 +173,13 @@ protected void processRequest(final HttpServletRequest req,\n             return;\n         }\n-        if (!SecurityUtils.constantTimeEquals(model.getXsrfToken(),\n-                req.getHeader(\"X-XSRF-TOKEN\"))) {\n-            log.debug(\"X-XSRF-TOKEN wrong: got {} expected {}\", req.getHeader(\"X-XSRF-TOKEN\"), model.getXsrfToken());\n-            HttpUtils.sendClientError(resp, \"invalid X-XSRF-TOKEN\");\n-            return;\n-        if (!LanternUtils.isDevMode() && !LanternUtils.isLanternPi()) {\n-            if (!SecurityUtils.constantTimeEquals(model.getXsrfToken(),\n-                    req.getHeader(\"X-XSRF-TOKEN\"))) {\n-                log.debug(\"X-XSRF-TOKEN wrong: got {} expected {}\", req.getHeader(\"X-XSRF-TOKEN\"), model.getXsrfToken());\n-                HttpUtils.sendClientError(resp, \"invalid X-XSRF-TOKEN\");\n-                return;\n-            }\n       }\n\nActually I guess it's really just the CSP header that causes local network\nissues -- fixed!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/2147/files#r22729425.\n. This was a drive-by fix.  I noticed that if I provided an invalid command-line argument, Lantern would start anyway.  That seemed dangerous/annoying.\n. This captures https://github.com/getlantern/lantern-common/commit/81565de582437ce8d987ba1b2cc2d24ccf9d9d3c\n. The check-fallbacks mode is used to test the fallback servers, which we still use.\n. Yes, good catch!\n. Ahh, good point!  Need to think about this.\n. This is the crux of it.  Instead of having a reset method call, we look for ConnectivityChanged in order to clear out the IP.\n. No, the issue is that reset was a direct call, whereas the PublicIpEvent was sent asynchronously via the EventBus.  Depending on how quickly the event is delivered, it might arrive before or after the reset call.  By removing reset and instead relying on the ConnectivityChanged event, we're letting the EventBus handle everything, and I'm assuming that the EventBus delivers messages in order.\n. So, PublicIpInfoHandler does the public ip check in response to a ProxyConnectionEvent, which happens as soon as the local proxy has started.\n\nThe reset call happens in startNetworkServices, which is called in response to a ConnectivityChangedEvent.  So I guess really the race here is between the connectivity check and the local proxy coming up.\nIn any case, making PublicIpAndTokenTracker only lose the stored IP in response to lost connectivity should give us what we need.  Previously, we would have stopped network services on the connectivity lost, and then cleared out the IP on connectivity being reestablished.  That has its own race between the connectivity event being delivered and the public ip event showing up.\nI should note that if you look at the ticket, you'll see logging that clearly shows reset being called after the public IP has been captured, confirming that this is the root cause.  I should also note in my testing, with my change, I haven't been to reproduce the hang on the friends screen.\nI can't test the scenario of connectivity being lost and reestablished because of #2198.\n. @myleshorton Nice debugging!\n\nOK, so this is a related problem. With the new code on devel, there will only ever be a ProxyConnectionEvent once at startup. That means from that point on, we'll use that same public IP even if we change networks. It also means we'll never again generate a PublicIpEvent, which leads to other problems. So there's a bug with not learning about new IPs if we change networks for sure.\n\nAhh, that makes sense.\n\nWith the code on master, this doesn't happen, and reset() also always gets called before DefaultProxyTracker.init(), which means that reset always gets called before a PublicIpEvent is generated (since DefaultProxyTracker generates that event via generating a ProxyConnectionEvent).\n\nMy what a tangled web we wove!  I'm glad that we've been able to avoid a similar event spaghetti in flashlight and hope that we'll continue to do so.\n\nSo it looks like both of these slipped through the cracks of the #2103 PR.\n\nYup, though given the complexity of the involved events I wouldn't really expect otherwise.  This is where QA'ing new releases comes in handy, and just in general getting all of us to run Lantern more frequently, as the manifestation of this particular problem is pretty obvious.\n\nIn theory we could probably just make PublicIpInfoHandler actually do the new check on a ConnectivityChangedEvent for becoming connected instead of on ProxyConnectionEvent.\n\nWell, it can't check until it's gotten a ProxyConnectionEvent, because it uses the proxy to get the IP.  However, I do think that driving it primarily by ConnectivityChangedEvent makes sense, just with the added requirement that ProxyConnectionEvent has happened at least once.\n\nIn terms of PublicIpAndTokenTracker the problem is now that it will never get a public IP after that first run. So when we get a ConnectivityChangedEvent for disconnecting, it will set hasPublicIp to false correctly, but PublicIpAndTokenTracker will never again get a PublicIpEvent because those are only generated in response to connections to the proxy. So the PublicIpAndTokenEvent will never get generated, and the friends screen or anything else waiting on that will hang.\n\nMakes sense.\n\nI think just looking up the public IP in response to ConnectivityChanged might do it, but we have to somehow be sure the GetModeProxy has in fact started and is able to do the lookup.\n\nWe can do what we do in PublicIpAndTokenTracker and wait on both conditions.  I'll take a crack at this.  I guess in order to test this we'll have to also resolve #2198, which I may or may not be able to do before I leave on vacation.\n. We no longer have different proxy connectivity statuses.  Once the proxy is connected, it is connected.\n. Again, once the proxy is connected, it's connected.  We never learn about disconnects anymore.\n. This dependency from PublicIp to ProxyConnection was really outdated, since we've been using a host-spoofed Get to geoip for a while now.  This realization simplified PublicIpInfoHandler quite a bit, since we can now just check every time that connectivity is established/restored.\n. This was a little weird, but I saw that we would get Connectivity events but then fail to connect to geoip to do the public ip lookup.  Doing this retry with exponential backoff thing seems to do the trick.\n. Again, once the proxy is connected, that's it.  We don't learn about any other statuses for proxies anymore.\n. We can't actually start the GetModeProxy until we have a PublicIp, since we need to do a geo lookup and pass the country to flashlight on startup.\n. I didn't make the whole methods synchronized because I don't want the delivery of the event blocking on starting flashlight.  I just switched to using AtomicBooleans.\n. Actually, as you say, using atomic booleans could have a race condition.\nOther than the unnecessary volatile declarations, is there anything wrong with the code as written?\n. > > I didn't make the whole methods synchronized because I don't want the delivery of the event blocking on starting flashlight.\n\nThat won't matter because the event is delivered asynchronously on its own thread.\n\nOkay, I went ahead and made the whole methods synchronized.\n. Yeah, I figured I'd leave them volatile in case anyone ever adds code that reads them for any reason.\n. Nice.  I've adde that to the README.\n. Sorry, I don't understand.  I'm able to run ./pre-push without any problem.  Does it not work for you?\n. Ahh, got it - MODIFIED_DIRS wasn't making it to the subshell.  I guess I forgot to test after refactoring into two scripts.  Thanks!\n. Weird, I get compile errors like the below.  What version of OS X and XCode are you running?\nIn file included from src/golang.org/x/mobile/app/darwin_amd64.go:16:\nIn file included from /System/Library/Frameworks/Carbon.framework/Headers/Carbon.h:29:\nIn file included from /System/Library/Frameworks/Carbon.framework/Frameworks/HIToolbox.framework/Headers/HIToolbox.h:240:\nIn file included from /System/Library/Frameworks/Carbon.framework/Frameworks/HIToolbox.framework/Headers/IMKInputSession.h:23:\nIn file included from /System/Library/Frameworks/Foundation.framework/Headers/Foundation.h:10:\nIn file included from /System/Library/Frameworks/Foundation.framework/Headers/NSArray.h:7:\nIn file included from /System/Library/Frameworks/Foundation.framework/Headers/NSRange.h:5:\n/System/Library/Frameworks/Foundation.framework/Headers/NSValue.h:12:1: error: 'objc_returns_inner_pointer' attribute only applies to methods\n@property (readonly) const char *objCType NS_RETURNS_INNER_POINTER;\n. I went ahead and updated the README with instructions on how to install our fork of gomobile.\n. Ah yes, thanks!  Fixed.\n. Looks like I might have a clang from homebrew or something:\nclang version 3.3 (trunk 179269)\nTarget: x86_64-apple-darwin15.2.0\nThread model: posix\nLet me try uninstall that and see what happens.\n. Okay, removing the old clang solved my problem.  Updating README to no longer reference fork of gomobile.\n. Removed.\n. Correct.  Is that a problem?\n. We could add a timeout too if we want, but yeah, I wouldn't worry about it too much, as in this case we'll have bigger problems than the dangling goroutine (namely that we can't domain front anything!).\n. @atavism Why did you get rid of the Makefile?\n. Refresh just means \"get up-to-date geolocation information\".  In practice we only care about that at startup, but as far as the geolookup module is concerned, it could be called anytime.  Failing to enqueue when a refresh is already in progress is just a way of avoiding unnecessary work.\n. Killed.\n. Fixed - caller can now specify an address explicitly, or just let Lantern randomly assign one.  In desktop app, I explicitly request localhost:8787, in mobile we'll let it randomly assign.\n. Fixed.\n. 25 ms is a timeout, not a wait time.  If we set it to 0, we would likely fail to get anything back within that time.\n. Oh, I see what you mean though.  In this particular case, if we don't get anything immediately, there's nothing to get.  Yes, I'll change it :)\n. Fixed.\n. I actually like that balancer doesn't have global state of its own - I kinda wish all our modules were like that :)\n. The point is that as written, there can be an arbitrary number of balancers used by whomever, right?  To put this initialization logic into the balancer package, we'd have to enshrine the fact that there's only a single balancer at a time as part of the balancer package, yes?\n. Oh, I'm a dufus!  You're talking about the balancer.go file in the client package.  Yes, I'm cool with that move :)\n. Fixed.\n. As noted in the commit, I wasn't able to do this.  In fact, I had to move the initialization of the variable even earlier since it comes into use as soon as a user agent connects to the client proxy, which can happen before Configure gets called.\n. Note - this is intentional.  The idea is to bring up the listener ASAP so that an embedding application doesn't block on our whole initialization sequence.  Of course any network access will still have to wait for the initialization sequence to finish.\n. Another note - the desktop app doesn't actually turn on the PAC file until after Configure() has been called, so in practice the above comment really only applies to Manoto.\n. Fixed.\n. Yeah, the README in the final pull request from valencia-mobile-full addresses this sort of thing.  That Makefile is also cleaned up, so look there for that kind of polish stuff.\n. Great point.  Let me loop back with @atavism on Monday and make sure that we have a proper release build in the final Makefile.\n. Desktop lantern just calls `flashlight.Run' directly from main.go.\n. For IPv4 it does, but for IPv6 we actually need to use the portion after the last colon as the port.  I'll fix that.\n. They can do that by catching the exception.  I'll make it a checked exception to be clear.\n. Still need to add that back in.  I could use your help with that, as I don't understand it very well.\n. Thanks!  I'd been wondering why Intellij kept showing an empty libflashlight project.  I've removed this.\n. You're right, it does take a while.  I've updated the makefile so that it only installs and initializes gomobile when necessary.\n. Very cool!\n. Good catch.\n. What happens if the heap is empty?  Will Pop() panic?  Or will it return nil?  If it returns nil, I think the .(*dialer) type assertion will fail.\n. You could actually get rid of the avgConnTime, consecSuccesses and consecFailures variables and have just a single metrics instance, and that way you don't have to construct a new one every time metrics() is called.\n. I like how you used a heap+sort order to structure this.\n. Also, what if there are multiple dialers with effectively the same priority (or similar priorities)?\n. Based on the logic in dialer.go, either consecSuccesses or consecFailures will be 0.  So when doing this comparison, you're really just saying:\n1. If only one of the dialers succeeded on its last attempt, use that otherwise\n2. Use the dialer that's had the most consecutive successes.\nIs that what you intended?  If so, it might be clearer to express the logic that way, e.g.:\ngolang\nreturn mi.consecSuccesses > mj.consecSuccesses\n. I don't know that connect time is a great measure of the proxy's performance.  It's a decent measure of latency to first byte, which is important for really small requests, but less important for larger requests.  Is there a way that we can measure throughput as well?  I know that throughput is sensitive to the performance of the destination sites, so that's tricky, but if we can get it right it would be a useful measure.\n. This is scary for multiple reasons.\n1. What about HTTPS where the verb is encrypted?  This method will identify it as idempotent even though it may not be.\n2. What if an application author is misusing an idempotent method like GET to actually alter server-side state?\n. How is the connectivity checker used?\n. I've opened issue #3524 for this.  If it's okay with you, let's just leave it as is for the purpose of this PR.\n. Specifically, my concern here is that once we find a \"best\" proxy, as long as that doesn't fail, we'll never try any of the other proxies, so we don't have an opportunity to find out if any of them has gotten better than the one that we thought was \"best\".\n. It's unclear to me what happens if Configure() is called concurrently to this.  It might be safer and easier to read to use an atomic.Value.\n. Make candidateCh an atomic.Value.  Dial would get the value each time, and Configure would set it.\n. BTW, the problem with putting candidateCh back on the candidateChCh is that you'll end up with two versions of candidateCh on candidateChCh after Configure() is called a second time (because candidateChCh is sized to 1).  After a 3rd call to Configure(), either Configure() or Dial() will get deadlocked because the channel is full at that point.\nYou could do this in Dial to resolve that:\ngolang\nselect {\n    case candidateChCh <- candidateCh:\n        // okay\n    default:\n        // discard\n}\nIf you make candidateChCh a blocking (size 0) channel, that also addresses the multiple versions of candidateCh issue.  Still, I think using an atomic.Value is cleaner.\n. @myleshorton \nThe following sequence will break this:\n1. Configure() pushes candidateCh A\n2. Dial() pops candidateCh A\n3. Configure() pushes candidateCh B (this will succeed because there's room in the channel)\n4. Another Dial() pops candidateCh B\n5. The first Dial() pushes candidateCh A\n6. The second Dial() attempts to push candidateCh B, but the channel is full so it discards it\nNow, subsequent dials use candidateCh A even though we want them to use candidateCh B.\nYou mentioned that Dial() can happen before Configure(), which keeps atomic.Value from working.  You can use eventual.Value for this.\n. Because the other one is defined in liblantern.aar and a binding project in Xamarin can only reference one aar (i.e. sdk.aar).  I had to do this to get Xamarin to actually generate the C# wrapper for the Lantern class.\n. Oh hey, I can get around this by making the one Xamarin binding project for sdk.aar depend on the other for liblantern.aar.  Closing PR (sorry for the spam).\n. New targets need to be added as prerequisites of .PHONY.\n. The reason that I used $(LANTERN_MOBILE) is that naming targets after the output file that they create allows Make to be smart about not rebuilding them if the output file already exists.  Setting it up as you have it, we will always rebuild the app whenever we run a dependent target like install.  You can fix this by defining targets for $(LANTERN_MOBILE_ANDROID_DEBUG) and $(LANTERN_MOBILE_ANDROID_RELEASE) and then making android-debug and android-release depend on those.\n. The new targets are worth documenting in the README.\n. Good idea, implemented!\n. Sadly it didn't, build still fails with this:\n```\ngithub.com/getlantern/flashlight/main\n/usr/local/go/pkg/tool/darwin_amd64/link: running clang failed: exit status 1\nld: warning: option -s is obsolete and being ignored\nld: internal error: atom not found in symbolIndex(__ZN11__sanitizer12InternalSortINS_18InternalMmapVectorINS_20StackDepotReverseMap10IdDescPairEEEPFbRKS3_S6_EEEvPT_mT0_) for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n```\n. @myleshorton This optimization speeds up Get() by 2 orders of magnitude.  I guess spawning goroutines does cost something.  Time for op went from about 2 microseconds to 20 nanoseconds.\n. @atavism FYI, these properties seem to be required even to run a debug build.\n. I had a hunch it was a little expensive, so I created the benchmark.  Until now, we weren't really using it on anything critical path.  Even in Dial() it was cheap compared with all the other work, but now we can confidently use it liberally without worrying much about performance.\n. I took out a bunch of unused fronted stuff while I was in here, which also meant taking out the unused server functionality in flashlight.\n. Got it, thanks!\n. 1. Makes sense\n2. Let's not worry about it, as it looks like Chrome will actually retry idempotent requests too, so we're not doing anything fundamentally new :)\n. Gotcha, thanks.\n. This comment is important - it turns out that simply loading the native library into the Manoto app introduced instability.  I structured Lantern so that simply importing it does not cause the native library to get loaded.  That now happens only when the proxy is started, which when running as a service happens in a separate process.\n. To be able to run the LanternService, it needs to be declared in the app's manifest.  And, it needs to be given a process name to force it to be forked.\n. This goroutine now terminates once it has successfully verified one masquerade.  So, when we reconfigure, we don't end up piling up a bunch of goroutines.  Also, we don't do a bunch of work vetting masquerades that we may never use.\n. @fffw Aside from the network, we need to consider the behavior of the server itself.  If a server starts being overloaded, does that have a similar effect on latency and throughput or is one affected more than the other?\nWe had a recent email thread entitled \"Proxying super slow at peak times\".  I did some measurements from the affected server by downloading a small, medium and large file.  As server performance degraded, the effect was most noticeable on the large file, suggesting that bandwidth may be more affected than latency.\nI think the best way to understand this is to run some tests.  To simulate a server being overloaded CPU-wise, we could just run a program on the server that consumes a lot of CPU without doing any real work.\n. Comcast looks like a good idea!\n. FWIW, we now have the ping capability in http-proxy-lantern, so if you wanted to integrate some of that data into your selection strategy, we can collect data from the field.  If we can compare the selections based on latency with the selections based on throughput, we can see whether or not they're similar.  If they are, we can turn off the throughput-based measurement for efficiency.\n. See pinger.go for code that pings the proxy server.\n. I would use a UUID here to prevent collisions.  Due to the birthday paradox, a 32-bit value has a surprisingly high chance of collision.\n. It's kind of expensive to spawn a goroutine for every call to read, isn't it?\n. Because reads and writes are handled by the same goroutine, this ends up being half-duplex.  For TLS negotation and typical HTTP traffic, that's not a problem, but if someone is proxying stuff through lantern that benefits from full duplex, this might be an issue.\n. @fffw This is an example proxy for testing detour interactively.  If you test with boom, you'll find that it hangs on about 20% of requests.\nboom -disable-keepalive -n 100 -x http://localhost:8080 http://www.google.com/humans.txt\n. This wasn't necessary for the fix, but appeared to be dead code so I removed it.\n. This is the actual fix.\n. Good questions.\n1. Making the service global seems like a good idea\n2. If you're running the Lantern VPN app and an app the embeds Lantern simultaneously, I imagine that the embedded Lantern will proxy via the VPN, so we'll be doing double-duty on both the client and server-side.\n. I think it makes sense to log to Loggly so that we get feedback on any issues that might be encountered by users of the embedded version.\n. Oh, now I understand your question.  The service uses EmbeddedLantern, so they both already log to Loggly.\n. The enable() method returns the address of the proxy.  Can you just use that from within Firetweet to configure the webview?\n. There's no reason genassets has to run in Docker, so running locally now.\n. Using latest released Go in docker.\n. I got burned by a corrupted dist folder.  Now, we always update dist when generating assets.\n. There's no need to build windows in docker, so building it locally now.\n. In fact, the only thing that still needs docker is the Linux build.\n. package-windows can run locally as well.\n. I consolidated the dialing logic into on place that's used by both intercept() and ReverseProxy.\n. This is the magic.  The UI is actually accessed via the LanternSpecialDomain, which we detect here and then dial to the actual UI server.\n. There's no need for uiaddr to be in the config, and even stranger I noticed that we were pushing updates to it via the cloud.yaml.  uiaddr now just comes from flags at runtime.\n. Note how we default uiaddr\n. Moved to flags.go for consistency.\n. Moved resolution into ui.go.\n. There is no linux_arm binary.\n. When I had a bad dist folder, I was missing files.  However, the web server reported a 500 error, which was confusing.  Returning os.ErrNotExist here causes it to behave normally and return a 404.\n. Actually I provided instructions in the README.\n. I see your point about consistency.  Docker isn't perfect here either because we're installing using apt-get, which just gets the latest version of everything, but it's better than relying on the local environment.\nThe big advantage to not using docker for daily development is that people in resource constrained environments can build more easily/cheaply because they don't have to install and run a docker machine.\n. The only thing that put it on the critical path for me is that for some reason, I can't package Windows when running in Docker.  If it's okay with you guys, I think I have a solution that I can show in a couple of hours.\n. Is it possible that the linux_arm executable never got checked in?\n. Unfortunately I can't use a subdomain of getlantern.org because that domain was configured with HSTS, including for subdomains.  So, Chrome always switches over to an HTTPS connection, which our embedded UI server doesn't support.\n. Including the colon is just a little bit stricter, so we wouldn't match something like ui.lantern.io.justkidding:80, only match ui.lantern.io:80.\n. Yeah, I actually got a panic here during development, that's what prompted me to fix it.\n. I originally did that, but Microsoft Edge seems very sensitive to the PAC file and my change actually broke that browser.  It turns out that we don't need it, because ui.lantern.io will never get added to the exceptions list because it doesn't go through detour.\n. Will do.\n. @xiam @myleshorton I don't know why this is showing as a diff, this is what's on valencia (I just copied the Makefile).\n. @uaalto If you can find the binary, you can add it and uncomment this line of the script.  As it stands, we still have the pac_bytes_linux_arm.go from whenever that got generated, so people can still run Lantern on arm.  Until then, I have to leave this commented-out since the script won't run successfully otherwise.\n. I did, though I don't understand why GitHub would show this as a diff.  At some point I should probably read a book about git :)\n. @xiam @myleshorton This is the heart of the change.  This macro allows us to run any target either directly or in docker depending on the USEDOCKER environment variable.\n. Hmm, there shouldn't be a change here at all.  Hang on.\n. It's a confusing diff, but it's just whitespace changes.  I'm tempted to stick with this version since it worked in Edge and other browsers.\n. Oh crap, you're right.  Okay, let me fix that and retest in Edge.\n. This step failed after the first time because the symlink already existed.  Adding -f fixed that.\n. This step is unnecessary, as the LANTERN_MOBILE_ANDROID_SDK target already does this.\n. This is the fix.  I put it in the MobileSDK project and then reference it from the lantern-mobile project.\n. @xiam I'm now using an implicit target that allows us to prefix any target with docker- which then runs it in docker.\n. I made the assets a file-based rule so that the assets get built only when needed.  To force a refresh of the assets, we can use the new clean-assets rule.\n. I made this a file-based rule as well so that we can use it as a dependency that only fires if the file hasn't been copied.  Similarly to assets, this can be cleaned with clean-bns-cert.\n. These were with \"debian\" but when used as dependencies were named with \"linux\".  I renamed them using \"linux\" for consistency.\n. Few things here:\n1. We don't need to clean everything, just the desktop related stuff, so I have a new rule clean-desktop\n2. We don't need to independently build the binaries since the package-* targets take care of that\n3. Note how we explicitly use docker for everything except package-darwin.  This gives consistent behavior with how this used to work, namely that everything except darwin builds in docker.\n. Note that I added linux-arm to here.\n. Note that this now includes linux-arm as well.\n. Instead of versioning resources.go, we just generate it as part of the build.  make clean removes it, which allows us to treat it like a typical file-based rule.\n. Correct.  This was true with the original build file too - people had to run update-dist manually.  Now they run clean-assets.\n. @myleshorton For backward compatibility, I've added this update-dist.  From the user's perspective, it works just as before.\n. Hehe, I never actually included that change because you and @xiam convinced me that it was best to handle makefile changes separately.  The important thing is that the packages target runs clean-desktop, which cleans this and forces the assets to be regenerated, so for official builds we're good either way.\n. @myleshorton @fffw This is an optimization that causes the detour connection to load up to 1 MB of response before we've even failed over to detour.  That way, when we decide that the direct connection is no good, we've already done a lot of the detour reading and don't need to wait for that.\n. @myleshorton It's very unlikely to happen in practice, but if this function is called in rapid succession, there's no guarantee that these goroutines will run in the right order.  Better would be to set up a chan bool and a single goroutine that toggles based on what it gets from that channel.\n. The handler for updating this from the UI already uses a buffered channel, so the simplest thing to do to ensure consistent ordering is to just not spawn goroutines for pacOn and pacOff.\n. Okay, I'll take it out.\n. Yeah, @myleshorton mentioned this too.  I don't understand the benefit to building with go directly instead of using make, and there's a clear downside to how we used to do it.  The build script doesn't push an updated resources.go, so anyone who builds the way that you suggest will be running with an outdated UI.  For example, the resources.go that's on GitHub hasn't been updated since September of last year.  I think it's best for us to run with the most recent code while we develop so that we can catch any errors that we might be introducing, so using make this way seems helpful.\n. I'm just using the name of the existing package-linux-amd64 target, which is used as a dependency in various places.  What I did with all of the old docker and non-docker targets was to just collapse them and keep the name of the non-docker target.\n. No, because package-windows can't be run inside docker because the $(BNS_CERT) target doesn't work there (since the $SECRETS_DIR is not accessible from docker).\n. I agree, let me think about how to solve this.\n. Per your previous comment, I'm going to figure out a way to not even put the file in this directory at all.\n. This was a bonus.  I noticed that it was left over from my Makefile debugging.\n. I manually tested this using the cmd.exe program and changing the default browser from/to Edge.\n. I made these ports part of the configuration so that we can quickly change them if we decide to add some.\n. The heart of the change is below.\n. This was a bonus.  I noticed that this test was failing because it was using the wrong name for this method.\n. I agree that we need better coverage, and that's a good idea.  Do you mind if I handle this as part of #3685 so I can approach it holistically?\n. Interesting question.  I think your description of what should happen is correct.  I don't know the performance characteristics of udpgw.\n. Oh, good point.  For the UDP-only ports, we don't actually care about the port number because what we're proxying is actually the udpgw connection, which is on a different port.  In theory, it shouldn't be hard to add udp support directly to Lantern, we mostly just need to stop hardcoding the \"tcp\" protocol everywhere and add a custom header to our CONNECT request that indicates the protocol :)\n. Actually, take that back.  I bet it's not that easy, with UDP being connectionless.\n. @myleshorton @fffw FYI, this is a bug that we introduced when we added the ability to disable Lantern as system proxy.  In that case, isPacOn will be false, so we ignore the new direct host.  This is an edge case and unlikely to happen, but I went ahead and fixed it while I was in here.  Specifically, I now check isPacOn only to determine whether to force the browser to reload the PAC by turning it off and then on.  We always apply the direct host to the map of direct hosts.\n. We only need to do this once.\n. Yes, this means we're generating the PAC file dynamically every time.  No it's not a performance problem, because the browser infrequently requests the PAC file.  Also, a boom test reveals that we can serve the dynamic file at about 20,000 per second.\n. Fixed.\n. For HTTP/1.1, Go automatically uses chunked transfer encoding if no content-length header is specified.  That begs the question if any user agents request the PAC file using HTTP/1.0.  Incidentally, the previous version of this code also did not include the content-length header for the PAC file.\n. @myleshorton Why does this target need to duplicate the code on lines 173 to 180?\n. This target fails when I run it, with:\ncc  -s     -o .o\ncc: fatal error: no input files\ncompilation terminated.\n<builtin>: recipe for target '.o' failed\nmake: *** [.o] Error 4\nmake: *** [docker-.o] Error 2\nWhat's the purpose of this target?\n. I think you mean make lantern or make docker-lantern?\n. This won't work if you're missing the assets.  make lantern is safer.\n. I added this target to let us run arbitrary commands inside of docker.  Useful for running unit tests in Linux.\n. I had to add the CMD environment variable.  The way we were doing it before was sensitive to the content of strings.  Simply using -e <VARIABLE> is both more concise and safer, so I switched to using that for all variables.  I tested that make docker-package-windows still works.\n. I changed this to an actual FileMode type for better error logging in the unit test.\n. On windows, we were getting a carriage return too, so I made this platform specific in order for test to pass.\n. chmod on Windows doesn't seem to work well, so to get test to pass I just don't check this condition in Windows.\n. One risk with this is that if we're not setting dial timeouts, one unlucky dial can really skew the statistics (for example if the network happens to be down when we try one dialer).  After the one really long dial, it will take a while for the average to recover.\nTwo potential solutions to this are:\n1. Use a moving average over the last X period\n2. Use the median instead of the average \nMedian can actually be accomplished memory efficiently using a sketching algorithm.\nThis will not prevent me from approving this PR, it's just something I noticed that we could improve at some point if we want.\n. If checking takes longer than maxCheckTimeout, we will start piling up goroutines/connections.  Previously, checks happened on only one goroutine.  I think we should continue doing checks on just one goroutine.\n. Now that we have CheckedDial, is Dial even used by anyone?  If not, let's just have  Dial method that does it all.\n. Also, now that we don't actually take dialers out of rotation anymore, what's the purpose of doing these checks?\n. Ahh, cool, I missed that!  Looks good.\n. Yeah, a dedicated goroutine sounds good.\n. Oh, I see.  It might be less confusing to change CheckedDial -> Dial and Dial -> DoDial or UnderlyingDial or something like that.  Dial is the typical name used by things like net.Dialer, so someone looking at this is more likely to use Dial than CheckedDial since they probably don't know what CheckedDial means.\n. pubsub-java is a git subtree from https://github.com/getlantern/pubsub-java\n. Why is this file commented out?\n. Yes, it's stripped by the http.Server, which is using the ReverseProxy as a Handler, so by the time it gets to the ReverseProxy's logic, the header is already gone.\n. So I'm okay to stick with org.lantern?\n. Fixed, thanks!\n. Agreed.  Maybe we if have time in LA we can look at that together?\n. Seems okay.  I think this was a holdover from when flashlight had a server mode.\n. If we're not using FrontedServers anymore, perhaps we should remove them from the client config.\n. What if SetUserID() hasn't been called before the fetcher tries to GetUserID?  Same with Token.\n. Yeah, my question was more around whether it breaks anything to request a config without these headers?\n. @xiam Interesting.  So Pro needs the UI in order to be able to function?  In other words, Pro can't run headless?\n. This breaks liblantern.  In particular, github.com/getlantern/lantern doesn't pass a configFetcher.\n. Consequently, this breaks mobile.\n. Gotcha.  So basically you need a UI to log in.\n. Nice!\n. Well, this means that our code is fundamentally broken.  It's not like it'll happen spuriously, and this way we find out during development rather than possibly missing it.\n. @fffw Indicated that this test is not necessary, so I removed it.\n. Sometimes the margin we provided wasn't enough, so I bumped it up.\n. We need the net/proxy package for the lantern test.\n. It's just a cleaner way of passing environment variables to docker.  Since I needed to pass the new CMD environment variable, I figured I'd clean it up while in here.\n. Added race detection to test-and-cover so that we find out about new issues sooner rather than later.\n. New target for testing without coverage (so we get good line numbers on race detection)\n. Removed extra call to logging.Close() that was causing err in log.\n. The main fix.\n. The main fix.\n. We already use it in a bunch of other places, so this way we don't have two versions of the thing.\n. Clever idea.  It exposes the Mutex api to consumers of synchronizedBuffer, which is neither necessary nor necessarily desirable since it's really just an implementation detail.  So, on the balance I think it's better to stick with mutex being hidden.\n. It used to provide better printouts when Equal fails.  Not sure if that is\nstill true.\n\nCheers,\nOx\nPGP Key - https://pgp.mit.edu/pks/lookup?op=get&search=ox@getlantern.org\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\n. net.Dial is a function, so technically dialer is not an implementation of it.\n. That's been superseded by this - https://github.com/getlantern/lantern/issues/3851\n. Oh, interesting, this should be stretchr.  Maybe a merge issue.\n. Weird, GitHub was showing an outdated diff.  I took care of these a while back.  If you checkout obfs4nodep and grep for \"getlantern/testify\" in src/github.com/getlantern, you won't find anything.\n. Fixed.\n. It's already logged, for example:\nApr 09 01:03:36.113 - 0m0s ERROR flashlight.client: balancer.go:34 Unable to configure chained server. Received error: Unable to construct dialFN: Unable to parse certificate: Unable to decode PEM encoded certificate\n. Fixed.\n. mFeedItems is an ArrayList, which is not thread safe.  You can wrap it with Collections.synchronizedList() and then you should be fine.\n. nit, but in Java variables should begin with lowercase letters.\n. There's no need for this to be global.\n. This seems like it could be its own package.\n. If you put feed into its own package and remove the dependency on flashlight/util, that makes this a nicely isolated package.\n. That said, I guess that makes packaging for Android more complicated, so never mind.\n. This module could use a unit test.\n. If we're unable to load the feeds, shouldn't we let the client know instead of failing silently?\n. Fixed.\n. Fixed\n. So what was happening before is that we weren't specifying the coverpkg flag.  Without that flag, cover only counts coverage for code in the package that's being tested.  So if the test for that package happens to exercise a lot of other packages, we don't get credit for it.  By specifying coverpkg, we get credit for other packages, so what I'm doing is specifying all testpackages as -coverpkg whenever we test any of those testpackages.  This way, when we run the integration test in flashlight/app, we get credit for all the code in our other packages that this test also exercises.\n. val == nil doesn't necessarily mean that the channel was closed.  Safer is:\ngo\ncase val, open := <-valCh:\n      if !open {\n. @fffw You said that there's a problem with the below goroutine leaking, but this looks like you fixed it.  Are there still situations where the goroutine can leak?\n. Oh, I guess if the value is never set, this goroutine will leak.\n. To be safe, we should probably use atom.LoadInt32(&v.gotFirst).  In fact, we could just make a new utility function:\ngo\nfunc (v *value) signalFirst() {\n    if atomic.CompareAndSwapInt32(&v.gotFirst, intFalse, intTrue) {\n        v.wg.Done()\n    }\n}\nAnd then use that both inside the loop and after the loop.\n. This isn't technically true if Stop() was called.  We should really be returning false, since we never did get a value.\n. Oh, never mind, when stop is called we don't set gotFirst, so this is good!\n. I'm not sure what you mean by this?  If you want to wait forever for Set, shouldn't you just set a really high timeout?\n. This way of testing is sensitive to previous tests.  If a previous test spawned a goroutine that ends after this line but before you call runtime.NumGoroutine() again, the count will be wrong.\n. I only mention this because I see TestNoRace fail sporadically.\n. I think Close is a more idiomatic and correct name for this.\n. Just to be safe, I'm using LoadInt32 here.\n. You know, it turns out that it doesn't matter.  It's not possible to set a nil value in an atomic.Value, so using nil here is fine.\n. I guess as long as someone calls Close(), then it's okay right?\n. Sorry, I meant Stop().\n. The example code doesn't seem surprising to me.  The semantics of Get are that it waits up to the timeout and if it doesn't get a value by then, it returns false.  With a timeout of 0, it doesn't seem surprising that it fails to get a value.  For consistency with other methods in the standard library, we could add a feature that v.Get(-1) never times out.\n. Yes!  If you look at my PR, you'll see that I did this in with your detour tracker - https://github.com/getlantern/lantern/pull/3993/files#diff-dfac99737640cd22fdabf4fc7fb4312bR310\nI'll refactor that into its own package and then use it from the eventual test.\n. Done - https://github.com/getlantern/lantern/pull/3993/files#diff-8cea73b850590a3be8f02149d20e2d66R1\n. @fffw Due to the slightly different semantics of Cancel, I moved this to after I check detourAllowed.\n. I like it, done!\n. Good idea, done!\n. Fixed\n. Fixed\n. We don't.\n. Fixed.\n. Oh, good catch.  Removed.\n. The only place where we push and pop is already protected by a mutex.\n. The syso is now back in git so I don't need to run this on Windows, which is good because it doesn't run.\n. I know this isn't a new thing, but if userID fails to convert, I think we should at least log it if not return an error.\n. +1 on caching on the client\ncc @xiam \n. Better to do this in preExecute so that it runs on the UI thread.\n. FWIW, doing this in preExecute() makes sure it runs on the UI thread no matter how/when GetFeed is instantiated.\n. Why is this needed?\n. Cool.  Mind adding a comment to that effect?\n. Thanks!\n. Easy - golang has a built-in library for doing AES-128.  There's no built-in rot13 library.  Reading/writing AES-128 turns out to be 6 lines of code each.  I can live with that :)\n. Fixed.\n. Wow, this actually turns out to make a big difference.  Without encryption we're looking at about 300ms to read the config, with encryption about 1.6 seconds!  I'll do a custom ROT13 thing.\n. Good idea, will fix.\n. Good point.\n. Turns out those timings were a fluke.  I now see similar times for both (as low as 300ms and as high as 1.7 seconds).  So, I'm sticking with AES.\n. @uaalto Until today, I hadn't realized that we were breaking encapsulation and reading/writing the config from within flashlight without using yamlconf.  That scheme obviously broke once we introduced obfuscation.  So, rather than apply obfuscation in both places, I cleaned this up so that everything is handled in yamlconf.\n. New function that allows validating the config (needed by flashlight).\n. New function that allows application of a default config (in our case, the embedded bootstrap config).\n. This is using tarfs, which can include an embedded version.  This is existing code which I didn't change, so I'm assuming it does what it's supposed to.\n. Actually the only thing we've validating is that is has custom chained servers.  Still, at some point it may expand, so I've renamed it. \n. I added some timing to the loadFromDisk method and printed out the results.  I just wrote a benchmark for thoroughness.  The benchmark reads a realistic config file from disk and decodes the yaml.  Depending on the run, the encryption adds anywhere between 0 and 13% overhead.  Without the yaml decoding the differences are much more severe, but the yaml decoding dwarfs the other work.\n. Oh, here's the benchmark - https://gist.github.com/oxtoacart/7e9b43efd08f6625a188bf48f8a2e0f3\n. Left over from existing code, but I'll fix.\n. Looks like rot13 by itself (no zip) is less overhead, only about 1.5%, and much more consistent.  I'll switch to that.\n. Because I wanted to test all 256 possible values of a byte.  If I don't break at 255, i++ brings wraps back to 0, which meets the boundary condition, so this becomes an infinite loop.\n. @atavism Ah, I see my mistake now.  I didn't realize that we were using value types here.  If we switch to using pointers, we can avoid some unnecessary copying.  Should I give it a whirl?\n. I went ahead and just did it - https://github.com/getlantern/lantern/pull/4157\n. @atavism Why did allStr become a parameter?  Is it ever anything other than \"all\"\n. Interesting.  Are the other things in feed.Items keyed to translated strings as well, or are they keyed to the feed names?\n. Oh, I see - the feed names are effectively already \"translated\" because they are what they are.  Thanks.\n. If I'm on a mobile network but disconnect from wifi, this will display the error page, right?  I don't think we want that.\n. That too, but what I was actually saying is that if we disconnect from Wifi but are still connected to a cellular network, we should be allowed to continue browsing as well.\n. Oh, good catch!  That was just temporary to save off the test files, I'll remove.\n. You could improve the syntax by either providing a convenience method on ChainedServerInfo to create the ProxyingInfo, or you could actually make ProxyingInfo an interface and make sure that ChainedServerInfo implements that interface.  Both options make life for the user of this API easier.\n. Why not just use the struct directly, like this:\ngolang\nelog.Log(&elog.Error{\n    Err: err,\n    Op: \"foo\",\n    Extras: map[string]string {\n        \"foo\": \"bar\",\n    },\n})\nTo me, that seems more readable and also more conventional.\n. Very cool!\n. @fffw You could follow the same convention as the built-in log package, which accepts an interface{} and then treats the value appropriately.  Regarding optionality - the conventional thing in Go is to leave the fields that you're not interested out of your struct initializer and the receiving function then fills those in.  I'll do a little PR to show what I'm suggesting.\n. #4239 shows what I mean\n. Here is an example of logging a structured error.  In real usage, one could just do this in one line, and omit the fields that one doesn't care about, for example:\ngo\nl.Log(errlog.Error{\n    Source: originalError,\n    Op: \"proxying\",\n    Extra: map[string]string{\n        \"server\": \"127.0.0.1:443\",\n    },\n})\nThe cool thing about modeling it this way too is that these structured errors can be propagated, since they're real errors, i.e.:\ngo\nerr := doSomething()\nif err != nil {\n    return errlog.Error{\n        Source: err,\n        Op: \"proxying\",\n        Extra: map[string]string{\n            \"server\": \"127.0.0.1:443\",\n        },\n    }\n}\n. I still think it's important to have a unique error code corresponding to the logical condition, e.g. \"CPCR\" = \"Chained Proxy Certificate Rejected\".  As we build our queries and perform analysis over time, we can't rely on package and type names because as things get refactored, these may change.  In fact, I think the code is more important than the go package and type.\n. It would be good to include the version of our software here as well.\n. If it's more readable, we can use strings instead of codes, e.g. \"ChainedProxyCertificateRejected\".\n. Rather than using camel-case for extras and JSON field names, how about using underscores like dns_server?  This data will be queried in InfluxDB and other databases, and the underscore convention is more common there.\n. We don't need to predefine all possible codes.  The caller simply needs to say \"logically, what's happening here is that the chained proxy's certificate was rejected, so let's use the code \"ChainedProxyCertificateRejected\".  Having a consistent string corresponding to a logical error condition across Lantern versions makes life much easier for the person monitoring the system.  It also makes it possible to write queries like \"find the clients whose certificate rejection rate exceeds the 95th percentile level\" without having to change that query from one version of Lantern to the next.\nWhat do you think @myleshorton?\n. Good idea on including the Go version too!\n. DNS server is horrible for querying because it has to be quoted, like:\nsql\nselect * from health group by \"DNS server\"\nAlso, I have to remember that it's DNS server and not DNS Server or dns server or dns Server.  Sticking to lower-cased names with underscores will make life much easier for writing queries.  If it's more convenient, I can do this automatically on the server side by lower-casing everything and replacing spaces and hyphens with underscores.\n. Ah, good point!  I'll fix that.\n. Thanks!  I like errors too.  Do you think we also want errors.Log(), or should we have two packages, errors and errlog?\n. @fffw Do you mean the GoType field?  In the tests, it looks like we're populating this with the type of the error object.  What I want is a logical error code like \"ChainedProxyCertificateRejected\", which doesn't map directly to a go error type.  Should we put that in the GoType field?  Should we maybe rename it to ErrorCode?\n. Yeah, I had a similar thought actually.\n. @uaalto I don't understand your comment, can you please explain more, maybe with an example?\n. @uaalto Never mind, I understand now.  I had forgotten the context of the comment :)  Yes, I think the convenience method approach is good.\n. Another thing to consider is that we may want to keep the number of distinct ErrorCodes somewhat low, since we're planning to use these as tags in InfluxDB.\n. @fffw I like your idea of enhancing golog to handle special reporting of errors.  Since the reporting logic probably just goes into the Reporter implementation, we could actually make this opaque to golog by just using the built-in error type.  For example:\n``` go\npackage golog\n...\ntype Reporter interface {\n    Report(error)\n}\nfunc (l *logger) Error(arg interface{}) {\n    // Log just as before\n    l.print(GetOutputs().ErrorOut, 4, \"ERROR\", arg)\nif l.reporter != nil {\n    err, isError := arg.(error)\n    if isError {\n        l.reporter.Report(err)\n    }\n}\n\n}\n```\n. If I've manually created an Error and then call Report, we'll never have called applyDefaults() or attached the stack.\n. I'm okay with this fluent-style syntax, but given that Go has a nice struct initialization syntax and the Error type is exported, I would just manually create an &Error{...}.  I actually find that more readable too:\ngo\nreturn &Error{\n    Desc: \"some error\",\n    Op: \"connect\",\n    Extra: {\n        \"some_counter\": 1,\n    }\n}\nThe fluent syntax would be more readable without the With prefix, for example:\ngo\nreturn errors.New(\"some error\")\n                    .Op(\"connect\")\n                    .Extra(\"some_counter\", 1)\n. Looking at my previous comment, I think part of why the struct initializer looks more readable to me is because of the syntax highlighting and whitespace.\n. Good idea to attach stack!\n. Small nit, but there's no point in copying if the frontedURL check fails.\n. In that case, I think we should disallow manual creation of Error by making it private and instead exposing an Error interface backed by an error implementation.\n. @myleshorton @xiam While testing the masquerade caching, the race detector uncovered this race condition.  I went ahead and just fixed it in this branch.\n. @myleshorton I took your suggestion and just write out the whole file everytime.  For efficiency, I only write it if changed, and I still cap the total cache size just in case.\n. I agree, but that gets considerably more invasive.\n. All the http-related stuff from util is now in the proxied package.  Fundamentally, it works the same, but it exposes a common and consistently named set of functions that all return an *http.Client in lieu of our custom HTTPFetcher interface (which is no longer necessary).\n. This is the old \"ChainedAndFronted\".\n. This is the new ChainedThenFronted for submitting metrics.\n. Note - we no longer fall back to a direct connection.  As far as I can tell, we never used this, and the clients weren't expecting this to go direct.  Direct connections are also a fingerprinting/blocking threat, so I took it out, which simplified the code too.\n. This is just based on the old util_test, minus the hash stuff which is still in the util package.\n. Instead of passing the proxy address to the individual functions all the time, we just set it once.  More convenient, less verbose.  Yes there's some global state, but this is something that is set once at startup and never changes.\n. We had a bunch of tests that all duplicated masquerade configuration.  That was annoying and the tests were starting to fail because they had out of date masquerades.  I've moved the default masquerades into the fronted package and provide a convenience ConfigureForTest method that any tests relying on fronted functionality can just use.\n. This also makes the other test files nice and short again, so when we make future changes to them, GitHub will be able to display a proper diff.\n. The only thing that changed in this test is updating the hash since the contents of hash.go changed a little.\n. This is a good example of the syntactic change.  In keeping with @uaalto's suggestion, this API looks cleaner and also eliminates the dependency on the client package for the Addr.\n. Note that fronting defaults are now kept in the fronted package.\n. This was an opportunistic fix.  I noticed that feed was constructing a new http.Client every time it fetched feeds, meaning that it didn't take advantage of keep-alives.  By making the client a global and lazily initializing it, we can take advantage of persistent connections.\ncc: @atavism\n. I dig it, it's just that previously we had some methods that returned an HTTPFetcher and some that returned an http.Client.  http.Client is actually a superset of HTTPFetcher, and I value consistency, so I went with returning http.Client across the board.  What do you think @myleshorton ?\n. Also, http.Client has the advantage of being defined in the standard library, so more likely to just be something that we can pass around.  If we go to an interface, I would use http.RoundTripper which is actually identical to our HTTPFetcher.\n. @myleshorton this is a good example of where we need an actual http.Client.  It gets passed to autoupdate, which passes it to go-update which actually does some stuff with the transport.  We could rewrite all that code to accept a RoundTripper instead, but IIRC it's pretty common for Go libraries to accept *http.Clients.\n. The cost is not in creating an HTTP client, the cost is in that HTTP client opening connections to our proxy.  Previously, we did that for every request made by GetFeed because it created a non-persistent http client every time it was called.  Now, we have a single persistent HTTP client that can reuse connections within a single call to GetFeed and across calls to GetFeed.\n. As mentioned in another comment, our autoupdate relies on actually having an http.Client.  It doesn't have to, and I could go in and refactor that too if you want.  Regarding the interface, I don't see why we should redefine what's already defined in http.RoundTripper.\n. I have an idea for how to have our cake and eat it too - stay tuned.\n. @myleshorton I switched to returning RoundTripper.\n. @myleshorton Where underlying libraries require an http.Client, I wrap the RoundTripper from proxied in a client.\nWhile doing this, it occurred to me that we're really not taking advantage of the Timeout capability on http.Client.  Something to consider for another day.\n. Good catch @atavism, thanks!  I've fixed this.\n. Correct, it never changes after being set the first time.\n\nCheers,\nOx\nPGP Key - https://pgp.mit.edu/pks/lookup?op=get&search=ox@getlantern.org\n\n\"I love people who harness themselves, an ox to a heavy cart,\nwho pull like water buffalo, with massive patience,\nwho strain in the mud and the muck to move things forward,\nwho do what has to be done, again and again.\"\n- Marge Piercy\n. It just depends on what features we need.  http.Client adds redirect handling, cooky handling and probably some other stuff, but I don't think that's needed in this particular spot.\n. Done\n. CloseCache moved, I only see it in cache.go.\n. Good idea on the unit test - added.\n. I know the linter complains, but I like the clarity of emphasizing that we're using a nil value as our sentinel.\n. You could save memory and allocation time by using a pipe as described here.  That example misses proper error reporting, but you could add that with channels.\n. Would be nice to actually check that the request contained what's expected.\n. After this call, anything that we do in processing this request is tagged with these 4 pieces of context information.\n. This is the special magic that's required for context to jump goroutine boundaries.  Use ctx.Go instead of go.\n. One of the interesting things that came out of this exercise is that I didn't need global helper functions.  Since the context only needs to be set in the place where it's know, that logic can just be encapsulated there.  This keeps the ctx package itself very generic and uncoupled from the specifics of flashlight/lantern.\n. This is a fork of https://github.com/tylerb/gls.  If we go this route, I'll open a PR upstream.\n. While I was in here, I switched to using a pooled ByteBuffer to construct our log statements, which is both more efficient than string concatenation and also integrates nicely with ctx.PrintTo.\n. bpool is not new, we already use it in our server proxies.  It's just newly pulled into this workspace.\n. IMHO, this is the major downside to this approach.  We have to remember to clear context state, otherwise we will leak memory.\n. Given that we only establish/clear contexts at main entry points to a processing flow, I'm not too concerned about this.\n. Instead of using defer syntax, this uses callback functions.  This has the benefit of making the context boundaries clear and not leaking data.\nAlso, this version of gls creates nested contexts that contain parent context information but that don't leak their own information back into the parent.\n. Small convenience change to interface.  This allows us to log and return the error in one step.  The Errorf version of this replaces:\ngo\nerr := fmt.Errorf(\"Oh oh %v\", arg)\nlog.Error(err)\nreturn nil, err\nwith\ngo\nreturn nil, log.Errorf(\"Oh oh %v\", arg)\n. We can't merge them.  We use parent when unwinding the stack on the current goroutine.  Once we reach parent == nil, we stop unwinding the stack.  Each goroutine needs to have its own stack, because parent goroutines can terminate before the child ones.\n. You can't call defer ctx.Exit() in here because it will exit the context as soon as proxyContext returns.  It's moot anyway because the most recent implementation of this code on another branch doesn't use the proxyContext method anymore.\n. @myleshorton With this change, the AddUserAgentListener capability is no longer used.  Can you remove it and the corresponding test please?\n. While we're in here, it would be nice to randomize this like we do with the config fetcher.\n. Should probably look for getlantern.org and lantern.io as well.\n. This is a little unusual, but I guess the point is that you're just looking for any response from the origin.  Might be good to put a comment here about it.\n. One problem here is that we don't check the status code when setting the checkTarget, so if we originally got a bad gateway, we're just going to keep getting a bad gateway error.\n. YW\n. That's a great solution!\n. Shouldn't this have been taken care of by ApplyDefaults()?\n. This is redundant, as stage is already false.\n. Why did you change polling to refer to a specific Config instance?  Polling is a process that continues forever, even though the underlying config instance changes over time.  Also, there's nothing in here that specifically refers to the cfg instance, so there's no benefit to it being an instance method.  Plus it refers to the global yamlconf.Manager.\n. See comment above - I would revert this to polling on config package.\n. This results in the same dialer that's used by the current Dial immediately being checked.  Seems redundant, though not particularly bad.\n. Does this need to be exported?\n. It implies that it can be changed.  To change it, we'd want to protect it with a mutex, right?\n. Just because we were able to dial the proxy doesn't mean that this is a good check target.  I don't think it matters that much, but wanted to make sure that's clear.\n. I don't think this will work if the original request was an HTTPS request.\n. One solution would be to just issue a CONNECT request to the check target and consider it successful if the proxy returns 200.  At that point, we know the proxy could establish a connection to the origin, which is probably good enough.  And that works no matter what the user-agent was actually originally doing with the check target.\n. Haha, just saw this.  That addresses my previous comment about non-HTTP check targets :)\n. Centralized this logic in one function for use both in HTTP proxy and SOCKS proxy.\n. We have to use protected.Dial so that on mobile this bypasses the VPN.\n. This allows us to use protected.Dial even when we're not on mobile, by simply falling back to net.DialTimeout\n. Error doesn't necessarily fail, only if there's actually an error.  How about naming it FailIferror?\n. @fffw Why is this a hardcoded 5?\n. Oh, I see.  I wonder if there's a safer way to model this, because when I run the test with the -race flag on Linux 64 bit, I see a panic.\n```\nDEBUG balancer: balancer.go:106 Dialing tcp://does-not-exist.com:80 with \nDEBUG balancer: balancer.go:112 Successfully dialed via  to tcp://does-not-exist.com:80 on pass 0\nDEBUG balancer: balancer.go:79 Balancer idle for 783.053ms, start checking all dialers\npanic: sync: negative WaitGroup counter\ngoroutine 3135 [running]:\npanic(0x8398c0, 0xc82034a070)\n    /usr/local/go/src/runtime/panic.go:481 +0x3ff\nsync.(WaitGroup).Add(0xc8201b80c0, 0xffffffffffffffff)\n    /usr/local/go/src/sync/waitgroup.go:71 +0x164\nsync.(WaitGroup).Done(0xc8201b80c0)\n    /usr/local/go/src/sync/waitgroup.go:96 +0x38\ngithub.com/getlantern/balancer.TestCheck.func3(0xc820402120)\n    /home/ox/git/lantern/src/github.com/getlantern/balancer/balancer_test.go:171 +0x56\ngithub.com/getlantern/balancer.(dialer).check(0xc82013e030)\n    /home/ox/git/lantern/src/github.com/getlantern/balancer/dialer.go:92 +0x19d\ncreated by github.com/getlantern/balancer.(Balancer).checkDialers\n    /home/ox/git/lantern/src/github.com/getlantern/balancer/balancer.go:131 +0xc7\nFAIL    github.com/getlantern/balancer  3.658s\n``\n. Maybe use an eventual.Value?\n. @myleshorton Bandwidth data is plumbed through to web browser.  Can you take it from here and bind into the UI as appropriate?\n. Opportunistic cleanup.\n. I added a comment about the format.\n. I think the hello function is important because that's used every time someone opens the UI. Without that, we have to wait for an actual request to be made to display the usage.  The operation inside this lock is really fast, so I wouldn't worry about performance.\n. We can't fetch the data from the channel because it's not a buffered channel. Even if we made it a buffered channel, it would still be capped, so at some point the channel would be capturing stale data.\n. @fffw You convinced me.  I've applied the changes here in flashlight, and I'll apply them to the core ops library next.\n. @fffw Note that this is namedFailIf` since it only fails if there's an error.\n. Yeah, we've built something cool here!  Your error abstraction worked out very nicely.\n. Collector is really only meant for use within the server process.  I only made it its own thing for testability reasons.\n. Collector is really a server process, analogous to http.Serve().  However, I did notice that we call terminate at times when we shouldn't (i.e. unable to commit a batch).  I'll fix that.\n. Actually, now that I look at it, we're okay.  There are only two reasons this will terminate:\n1. Unable to create a batch.  This is not a transient error and we can't recover from it.  In practice, it should never happen.\n2. Exhausted allowed retries to commit a batch.  This is a serious condition meaning that we're giving up.  We can set the retries appropriately high.\nSo, I won't change anything here.\n. Unfortunately we have to do this because we can't run calculations on tags.  For example, we can't run a distinct() or max().  As you said a while back, the idea is that we throw a bunch of data into the first table, which is time-limited anyway, and then we can filter out stuff we don't need using our continuous queries.\n. Good catch, I'm adding a guard condition.\n. Oh, that was left over from debugging something.  I've uncommented it.  Thanks!\n. This is a silly convenience method.  I'm going to take it out.\n. Errorf was a silly convenience method that just caused confusion, I've removed it.  That should eliminate most of the confusion that you mention.\nThe confusion between log.Errorf and log.Error(errors.New()) is unrelated to ops.  The decision there is whether or not we want a full stacktrace for the error.  I think I'll update log.Errorf so that it automatically creates an errors.Error instead of just an error.\nI still think FailIf is worth keeping because it saves a lot of typing.\n. Unfortunately, measured and http-proxy still have some tests that rely on getlantern/testify.  I'll fix that and then remove this.\n. It's used by http-proxy-lantern, which is used in our integration test.\n. http-proxy-lantern is used in our integration test, so we need this.\n. Actually, that's only needed by the main package, which we're not using here, so I can remove it.  Thanks!\n. Now that we have an idletiming that returns io.EOF for pending reads and writes instead of \"Use of closed network connection\", we can make this much shorter.  We make it shorter than the server's idle timeout so that we don't risk sending data on a connection that will subsequently get idled by the server.\nI increased the server's idle timeout to 70 seconds in this commit.\n. idletiming handles closing for us now.\n. These errors were getting annoying, so I turned down the log level.\n. This was the main source of the leak.  In the case of successful copies, we never pushed anything onto writeErrCh, which would prevent the read down below, which prevented the call to close the connections.\n. This requires our custom fork of go.  It prevents us from trying to reuse connections that timed out due to idleness.\n. This also prevents us from trying to reuse connections that were timed out due to being idle.\n. The changes to idletiming are being reviewed here.\n. The changes to http-proxy are being reviewed here.\n. This falls into the category of \"you break it, you fix it\", as I'm the one who broke it :)\n. Sorry, I'm not sure I follow.  Whatever code is using this transport is free to set the Connection: Close header on new requests as it wishes, and that header will propagate through to the server.  If the server closes the connection, Transport is smart enough not to reuse it.  What's the piece that's missing?\n. Doesn't matter, because we never send HTTPS traffic through the reverse proxy.\n. Oh, I see what you're saying.  DisableKeepAlives doesn't just add a Connection: close header, it actually closes the connection itself even if the server didn't.  See line 513 and 524 of transport.go.\n. Consequently, if we're disabling Keep Alives, there's never any idle keep alive connections to remove.\n. Oh, the other piece to understand is that MaxIdleTime here is not an idle timeout for our idletiming connection.  It's telling the Transport how long to hang on to pooled keepalive connections.\n. Everything except the close method is obtaining a R(ead)Lock.  Those are not exclusive.\n. The purpose of the lock is to prevent us from closing the underlying connection while an io op is in progress.  That requires us to hold the lock for the duration of the method.\n. Might not need to if RemoteAddr() is unaffected by close calls, was just being conservative.\n. The key thing is that the resource we're protecting is not the closed status, it's the underlying connection.\n. No need, Conn already allows onIdle to be nil.  It's part of the contract for Conn.\n. @myleshorton I just noticed this, so snuck in a fix.  We don't want to risk markActive blocking if the run loop isn't reading from the activeCh because it's blocking on something else (like Close()).\n. We do these as macros so that they don't needless trigger reevaluation of the $(RESOURCES_DOT_GO) target.\n. By depending on $(SOURCES), we get this and similar targets to automatically rebuild if any of the go source files changed.\n. This runs all tests in a single process, which dramatically speeds things up.\n. For whatever reason, when running inside a process with other tests, I had to loosen these tolerances.\n. Unfortunately we can't speed up test-and-cover, and this comment explains why.\n. Fallout from upgrading to latest gomobile.\n. New package that consolidates overridable dialers and resolvers.\n. This logic seemed wrong.  SetDeadline sets an absolute deadline on all operations on this connection, whereas the timeout is just intended to govern the dial.  So, I changed this method to use withtimeout to enforce the dial timeout just on the dial phase.\n. Since our dial function can be used in a bunch of places, I added the ability to resolve hostnames if dial was called with something other than an IP.\n. This functionality has been superseded by netx.  Note how the old tlsdialer code didn't have a mutex on the global resolve and dialOverride fields.  This could theoretically have led to a race condition that showed the error @atavism  was seeing.  netx uses atomic.Value for these sorts of things, so that shouldn't be a problem.\n. Helps our logging/error reporting.\n. I upgraded to the latest gomobile.\n. @myleshorton Because protected is only referenced from lantern now, and because lantern is only referenced from the mobile library, we no longer need to do platform detection to exclude protected from non-Android builds.\n. protected itself is now stateless. It now returns an immutable Protector.\n. The errors propagate and I think they'll get logged at a higher level.  We could add some trace logging here if you think it'll be helpful.\n. Note - using a buffer pool is not necessary to fix this bug, but it's a useful optimization anyway.\n. Once this PR is complete, I'll use this same function on the proxy, which basically does the same thing as the client here.\n. There is no leak.  It's just that we don't close the connections until both the reading and the writing are done.  That meant that we were relying on the idle timeout to close the connections, which would stop the reader and writer.\n. Here's the scenario:\n1. Client connects\n2. Proxy connects to server\n3. Proxy starts piping both ways\n4. Client disconnects\n5. Reading from the client will stop at this point due to an EOF, but writing to the client doesn't stop, so we keep both connections open\nThe simplistic way to do this is to just close both connections as soon as either io.Copy is finished, which is what we used to do, but that sometimes results in us closing a connection while we're still doing an io op on it.  The new code in netx sets timeouts on the io ops and interrupts in between ops.\n. No.  Timeouts are expected because we're intentionally setting a short deadline to give us a chance to unblock and check the stop flag.\n. I just realized this is bad, as it masks the true error.  Removing.\n. Ah, yes, great catch!\n. @fffw I think this addresses your concern about short writes.  I modified the test to make sure we cover this.\nYour idea of just setting the deadline after the other pipe has finished is interesting, but I'm not sure if it will work on all platforms.  Specifically, I don't know if calls to SetWriteDeadline() always affect existing Write() calls.  They do on Mac, but that seems like the sort of thing that might be platform specific.\nUsing an atomic closed indicator here seems to work.  Are you okay with that?\n. @fffw I tested and you were right, setting the deadline only once we're ready to close the connection performs better, and it seems to work on windows, os x and linux.  So, I did it!\n. Since you're only reading here, I would use a RWMutex and use RLock() to improve concurrency.\n. Should we make the default smaller?  I wasn't sure what would be a good value?\n. > 1. keep persistent connection to each proxy (disconnect it randomly to be less noticable).\nIf we can avoid getting fingerprinted here, this is also a potentially nice performance boost because it eliminates unnecessary TCP connection setup.\n\nalways forward follow-up requests of that domain to same proxy, unless the metrics of that proxy becomes unacceptable.\n\nI think this would solve #4902 as well.\n. This is the heart of the change.  Previously, we tried to deduplicate on message content, which isn't very reliable.  Now, we deduplicate on the location, for example 'flashlight.config: config.go:71'.\nAlso, rather than limiting by number of duplicates, we do it based on time now.\n. Clean removes the hidden/embedded error.Error from any message.\n. Since we have working rate limiting, I think we can bump up the loggly sample percentage.\n. Since golog already calculates the line prefix, we pass it to the reporter so that it doesn't have to do so itself.\n. With this change, there's no longer a need to pass the whole formatted message, which is nice because the reporter doesn't have to do as much parsing anymore.\n. I snuck this in as a bonus.  This makes it easier to aggregate errors in Loggly and Borda.\n. I noticed that by passing err.Error() here, we were effectively overriding the nice logic that @fffw built in parseError, so I fixed this while I was in here.\n. Note that error now contains the description without format variables.  The fully rendered description is stored in error_text.  Of course this only works when using errors.New, not fmt.Errorf, so we should get in the habit of using errors.New wherever possible.\n. I'll add some unit test coverage in #5099 since I had to touch the tests there anyway.\nRegarding DeviceID - I use it (as encoded) because it's available on both the client and server and allows us to correlate.  For borda, this affects sampling because we want sampling on the client and server to be consistent so that for those device IDs included in the sample, we have end-to-end coverage.  I like keeping it consistent with Loggly to because this ensures that we have full coverage across Loggly and Borda for whichever device IDs are in the sample.\n. @myleshorton I added a unit test for includeInSample here.  Turns out it found a bug :)  I needed to use LittleEndian instead of BigEndian.\nI'll add additional unit tests in the other PR.\n. @myleshorton We now configure logging only once\n. @myleshorton I found that in practice, my \"fix\" actually resulted in my own PC always getting sample no matter how small of a sample percentage I set.  The old \"broken\" algorithm didn't give us quite the right sampling percentage, but we know it's working in production because we get data for only a subset of clients, so I'm going back to that.  I added a TODO to clean this up later, but it's not entirely clear to me right now how.\n. Well, the config is the path by which we get them from the command-line (nothing gets command-line stuff directly, it's all mediated by the config).\n. See my more recent comment.  This \"catch\" actually broke things in practice when using real MAC addresses.  I went back to the old algorithm because we know that it actually does only sample a subset of clients, even if it's not exactly the right percentage.\n. I prefer the shorter indentation as before.  Was the increase intentional?\n. ",
    "starrify": "Thank you for thanking me, @skivvies :)\nWell, it's always such a pleasure to participate in such projects which makes people live better.\n. ",
    "huxiaodong": "hxdlyc@gmail.com\n. good\n2013/12/3 pekrr1e notifications@github.com\n\nLet me check the installation source codes first, :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1185#issuecomment-29679602\n.\n. ok\n\n2013/12/22 oxtoacart notifications@github.com\n\nClosed #1270 https://github.com/getlantern/lantern/pull/1270.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/getlantern/lantern/pull/1270\n.\n. \n",
    "pekrr1e": "Let me check the installation source codes first, :)\n. ",
    "yegle": "Adding more and more hardcode executable paths in the source file is not a good solution. Maybe we can read a CHROME_PATH environment variable?\n. ",
    "atavism": "Got it! Applying all of your changes now. Thanks for the review!\n. I've worked through all of the fixes, including injecting the HttpClientFactory and making sure all geo lookups are handled by proxy\nI had been getting results just fine, but I'm seeing a recurring 502 issue now:\n4735   2014-05-29 02:34:22,195 DEBUG [GetModeProxy-ClientToProxyWorker-1] proxy.DispatchingChainedProxyManager.logFallbackOrder (DispatchingChainedProxyManager.java:64) - Proxy Fallback Order (0 proxies):\n4739   2014-05-29 02:34:22,199 INFO  [GetModeProxy-ClientToProxyWorker-1] impl.ClientToProxyConnection.readHTTP (ProxyConnection.java:180) - (DISCONNECT_REQUESTED) [id: 0x1d7b9d70, /127.0.0.1:62605 :> null]: Ignoring message since the connection is closed or about to close\nBad Gateway: http://go-geoserve.herokuapp.com/lookup/107.170.126.243\n4061   2014-05-29 02:03:56,346 WARN  [Lantern-Async-Event-Thread-0] geoip.GeoData.queryGeoServe (GeoData.java:87) - Error parsing JSON from geo lookup Unexpected character ('B' (code 66)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')\nIn addition, go-geoserve returns JSON results with nested country and location resources. I'm mapping these to nested classes in GeoData, which requires a change to our lantern-common JsonUtils to \"detect all member fields\":\nmapper.setVisibility(JsonMethod.FIELD, JsonAutoDetect.Visibility.ANY) // auto-detect all member fields\nhttp://wiki.fasterxml.com/JacksonFeatureAutoDetect -- I'm guessing there's a reason this isn't already enabled? \nWill look at this with fresh eyes tomorrow!\n. @oxtoacart Any idea what I'm doing wrong here?\njava\n   private static final String LOOKUP_URL =\n                        \"http://go-geoserve.herokuapp.com/lookup/\";\n  ...\n  final HttpClient proxied = httpClientFactory.newProxiedClient();\n  final HttpGet get = new HttpGet(LOOKUP_URL + ipAddress);\n  InputStream is = null;\n  try {\n    final HttpResponse response = proxied.execute(get);\n    final int status = response.getStatusLine().getStatusCode();\n    System.err.println(\"Status: \"+status);\n    is = response.getEntity().getContent();\n    final String geoStr = IOUtils.toString(is);\n    System.out.println(\"geolookup response \" + geoStr);\n    return JsonUtils.OBJECT_MAPPER.readValue(geoStr, GeoData.class);\n  }\n...\n3548   2014-05-30 15:09:46,862 INFO  [Connectivity-Check-Timer] lantern.ConnectivityChecker.notifyConnected (ConnectivityChecker.java:68) - Became connected...\n3579   2014-05-30 15:09:46,893 INFO  [Lantern-Async-Event-Thread-0] proxy.DefaultProxyTracker.doAddProxy (DefaultProxyTracker.java:319) - Adding proxy fallback@getlantern.org ProxyHolder [jid=fallback@getlantern.org, fiveTuple=FiveTuple [local=null, remote=/107.170.126.243:443, protocol=TCP], timeOfOldestConsecFailure=null, timeOfNewestConsecFailure=null, retryTime=null, type=cloud] connected? false\n3579   2014-05-30 15:09:46,893 INFO  [Lantern-Async-Event-Thread-0] proxy.DefaultProxyTracker.doAddProxy (DefaultProxyTracker.java:322) - Proxies is now [ProxyHolder [jid=fallback@getlantern.org, fiveTuple=FiveTuple [local=null, remote=/107.170.126.243:443, protocol=TCP], timeOfOldestConsecFailure=null, timeOfNewestConsecFailure=null, retryTime=null, type=cloud] connected? false]\nStatus: 502\ngeolookup response Bad Gateway: http://go-geoserve.herokuapp.com/lookup/107.170.126.243\nhttps://github.com/getlantern/lantern/commit/8bbe37834f372f1f282e19a411e2d5f61381e69e\nEver since I started proxying the geo lookup requests, I keep getting a HTTP 502 error (\"Bad Gateway: http://go-geoserve.herokuapp.com/lookup/107.170.126.243\"), but I'm injecting the HttpClientFactory now and implemented it similar to how it's being done in S3ConfigFetcher. Any chance you could take a look when you get a moment? Thanks!\n. Just added the missing files.\n. Ah, interesting. Thanks for pinpointing the problem. I need to make sure we have some proxies available before attempting the geolocation then. Maybe trigger a geolocation callback after we've successfully registered a fallback?\n. Sounds like a plan! I'll try this later this evening. Will explore other options if that doesn't work too. Thanks for your help @oxtoacart!\n. @oxtoacart moving it there worked like a charm! Just committed my changes if you want to take another look.\n. @oxtoacart I moved updateGeoData out of the geo lookup service and to PeerFactory, I'm checking for a 200 HTTP response/throwing an exception otherwise, and I'm no longer globally setting field visibility to any in JsonUtils.\n. @myleshorton I updated my vim settings to use four spaces and corrected the GeoData file.\nI made Country and Location their own classes since they're nested inside the geo lookup results we're getting back. There's still getter/setter methods inside them, but if that causes unnecessary confusion, I'll keep all the mapping inside GeoData.\n. @myleshorton I moved the Country and Location classes to their own files, got rid of the static queryGeoServe, and I'm using getter/setters for country and location now. It's a lot cleaner. Added a test JSON file to src/test/resources and I'm writing a test now for it.\n. @myleshorton Thanks! That's what I originally had actually, and it would compile successfully, but when I inject the Model instead I kept encountering this:\n```\ncom.google.inject.ProvisionException: Guice provision errors:\n1) Tried proxying org.lantern.state.Model to support a circular dependency, but it is not an interface.\n  at org.lantern.state.ModelIo.class(ModelIo.java:34)\n  while locating org.lantern.state.ModelIo\n  at org.lantern.LanternModule.configure(LanternModule.java:111)\n  while locating org.lantern.state.Model\n  at org.lantern.LanternModule.provideGeoIpLookupService(LanternModule.java:158)\n  at org.lantern.LanternModule.provideGeoIpLookupService(LanternModule.java:158)\n  while locating org.lantern.geoip.GeoIpLookupService\n    for parameter 0 at org.lantern.DefaultCensored.(DefaultCensored.java:111)\n  at org.lantern.DefaultCensored.class(DefaultCensored.java:25)\n  while locating org.lantern.DefaultCensored\n  while locating org.lantern.Censored\n    for parameter 0 at org.lantern.CountryService.(CountryService.java:270)\n  at org.lantern.LanternModule.configure(LanternModule.java:134)\n  while locating org.lantern.CountryService\n    for parameter 1 at org.lantern.state.ModelIo.(ModelIo.java:50)\n  at org.lantern.state.ModelIo.class(ModelIo.java:34)\n  while locating org.lantern.state.ModelIo\n  at org.lantern.LanternModule.configure(LanternModule.java:111)\n  while locating org.lantern.state.Model\n1 error\n    at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:987)\n    at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)\n    at org.lantern.Launcher.instance(Launcher.java:453)\n    at org.lantern.Launcher.launch(Launcher.java:220)\n    at org.lantern.Launcher.main(Launcher.java:178)\n    at org.lantern.Launcher.main(Launcher.java:159)\nJava process exited abnormally\n```\nSeen something like this before?\n. @myleshorton I added a quick test that parses the geodata.json file from src/test/resources and serializes it as a GeoData object (also making sure country and location are non-null). You can run it using \nmvn -Dtest=GeoIpLookupServiceTest test\nThis is obviously just a first pass. I'm gonna add an additional test that queries the geolocation server itself.\n@oxtoacart I'm no longer throwing an exception when we get an invalid HTTP response back from the geolocation server and instead logging the error/assuming empty country and (0.0, 0.0) coordinates. Also, I'm hard-coding geo.getiantem.org/lookup as the geolocation url now.\n. @oxtoacart Thanks. Except for deleting the .lantern folder to be extra thorough, that's how I had been testing. The dot shows up for me as expected too and all tests pass.\n. We can close this one. Thanks!\n. @myleshorton Sure.\n. Thanks! LGTM then. Closing.\n. LGTM.\n. > If I understand correctly, the whole reason we're doing this is because our recent Angular upgrade broke the native Lantern app, right? Other than adding zoom/pan, what is it that we're achieving with this upgrade? Is that worth taking a step backwards in user experience on Mac?\nIt's more than that. WebView differs significantly between OS X versions 10.9 and 10.10. Any improvements we want to make to the UI will have to be cross-checked now because of the differences. It's not that we're introducing zooming, panning, and the Angular upgrade only to diminish the existing user experience; it's the underlying inconsistencies between WebView versions that will be hard to maintain moving forward. \n\nI'm not sure that having the Lantern UI running in a separate instance of Chrome is better than just having it open tabs in the existing Chrome. Because the 2nd instance is still called Chrome, it's kind of confusing to me. Furthermore, because it's a full instance of Chrome, I'm tempted to start using it as such, opening new tabs, browsing to other sites, etc. At some point I might discover that it's missing my plugins and bookmarks, which will probably annoy me. Even worse, If I subsequently shut down Lantern, I get a rude surprise in the form of my Chrome browser having been shut down. We will get bug reports about this.\n\nI agree! I actually like running Lantern in just another tab and being able to easily access the UI from the same browser window I already have open. I'm curious if someone could expand--what are we actually gaining by putting it in its own window? What are the drawbacks of having it in another tab? I like getting rid of WebView and the use of another window entirely; I consider it an improvement. It's less windows I have to watch over. That said, if we do want to keep a new window as default, could it be a configurable option in the settings modal (whether it opens in a new window or another tab)?\n. > Yeah I agree it's a little funny. I'm still not totally sold on the tab experience though either, particularly just getting it lost in the shuffle and also the fact that it just stays open when Lantern shuts down.\nI don't suppose there's any way to keep the UI open at a specific tab position? That's true it could get lost in the shuffle, but (I haven't tried out your changes yet) wouldn't clicking \"Show Lantern\" automatically locate that tab? Or I guess there's no way to. When Lantern shuts down, is there a way to force the corresponding UI tab to close as well? I guess all of this requires the use of a browser extension.\n. > Totally legitimate question. The only reason really is panning and zooming, although there have also been some performance improvements. Let's chat about this more.\nWe were on a really outdated version of AngularJS, 1.0.8, that's several years old at this point, and are running the latest version now. There was a 4x performance improvement with DOM manipulation, just between 1.2 and 1.3, which would affect how peers/connecting paths are rendered and re-drawn, plus other user interaction with the map. I've noticed the UI feels a lot snappier now.\n. > > @atavism I'm glad that you mentioned a browser extension. To me, that's the thing that holds the potential for really tying all this together nicely by giving us more options to manage windows, provide context-sensitive options (e.g. proxy this site) and stuff like that. I think it could provide a dramatic improvement to the user experience if properly designed.\n\nYeah I totally agree!\n\nDefinitely agree. Just curious--what's stopping us from doing this now? It can't be too difficult adding a \"Show Lantern\" option to what we already have here: https://github.com/getlantern/chrome-extension --that locates the correct tab the UI is running in and opens a new instance otherwise. I guess the more time-consuming part is the code changes necessary actually installing the extension when Lantern is ran for the first time? We have proof this is possible here: https://github.com/getlantern/lantern/issues/1573\nRegardless, it seems like we could, if time permits, start improving on the browser extension now, as a separate project, that includes both the Chrome and Firefox extensions, initially making it interoperable with the current UI and back-end. We could design it in a way that specifies a standard API (- Show Lantern, - Quit Lantern, - Proxy/unproxy this site, etc.). The advantage here being, even after we port to Go, and end up redoing the UI further, we already have an independent browser extension component to work with.\n. @myleshorton, I looked over this too. It LGTM. I say we merge this and the UI changes together, pending your response to the final round of changes that need made.\n. > Would you like to try building flashlight to make sure I'm not the only one who can build it?\nI'm happy to try building it too.\n. @oxtoacart Thanks! Off of the devel branch, right? Looks like everything builds fine for me:\n```\n\u279c  flashlight-build git:(devel) \u2717 ./tagandbuild.bash 1.6.0\nUpdated tag '1.6.0' (was 7dea443)\nCounting objects: 1, done.\nWriting objects: 100% (1/1), 156 bytes | 0 bytes/s, done.\nTotal 1 (delta 0), reused 0 (delta 0)\nTo https://github.com/getlantern/flashlight-build\n + 7dea443...50d70d8 1.6.0 -> 1.6.0 (forced update)\nBuilding flashlight version 1.6.0 (20150120.220956)\nNumber of parallel builds: 8\n-->       linux/386: github.com/getlantern/flashlight\n-->     linux/amd64: github.com/getlantern/flashlight\n-->     windows/386: github.com/getlantern/flashlight\n-->    darwin/amd64: github.com/getlantern/flashlight\n```\n. Updated flashlight yaml: http://s3.amazonaws.com/lantern_config/cloud.1.6.0.yaml.gz\nI created a new branch with the binaries here: https://github.com/getlantern/lantern/tree/flashlight-1.6.0\n. @oxtoacart Just realized these changes still need code reviewed. I'll do that today. To take a holistic approach and familiarize myself with the entire implementation, citing an old e-mail of yours, the proxying relies on three new libraries: balancer, fronted, and chained. And the actual changes to flashlight itself have been merged to devel already, correct?\n. @oxtoacart Great. I suspected we'd be able to get rid of a lot of files! Ran some tests in get-mode and everything is working fine for me as well. Merging.\n. The related UI changes (very minimal) were pushed to the 0.0.12 branch\n. Some tests I ran for this: \n- clicking \"Show Lantern\" while the UI is already open triggers an alert\n- clicking \"Show Lantern\" with the UI closed opens the UI in a new tab\n- in Chrome, clicking \"Show Lantern\" with another window active forces the browser and UI tab to take focus\n- in Chrome, clicking \"Quit Lantern\" closes the UI tab after Lantern finishes shutting down\n. > That's it for now. In terms of traffic to our web site, Firefox and Safari are together about 28%, so those are significant issues. I don't believe there's any solution beyond resorting to native code, however, so not sure what to do.\nI noticed the Safari icon bounces when the alert is raised. That doesn't happen with Firefox. I like the idea of just keeping track of the browser: if the user is using FF or Safari, we give the browser window focus from the native code (assuming that's doable). Once focus switches to the browser window, there wouldn't be anything else to do since the alert would force the UI tab to the front.\n\nThe script for showing the browser seems to hang and eventually gives an alert at least on FF if you just leave the alert up (bug on the lantern-ui side really)\n\nI can check to see if a previous alert is open, close it, and raise another in this scenario. \n\nWould resorting to the old behavior make more sense for Firefox and Safari?\n\nThat would be my vote if the other method proves unviable or too time-consuming to implement.\n. @myleshorton The latest changes--to send an alert when the browser is Chrome and the UI is already open in another tab; or always open the UI in a new tab otherwise--are in the 2095 branch. I also pushed an issue-2095 branch in case the numeric branch name causes problems. On the client-side, the latest changes are in 0.0.12. Let me know if you need me to submit another PR. \n\nYeah that's how we're planning on doing it.\n. @myleshorton Done.\n. @myleshorton Here's where I'm sticking the local lantern address list. This section only appears when a hello multicast message from a Pi is received and that information is relayed to the front-end. The section is always hidden when the number of local lanterns is equal to zero. Clicking on the link opens the external UI in another tab.\n\n\n. @myleshorton Great, thanks. Tested this out, and it's working great. Will submit a corresponding client-side PR. I'm including an updated ARM version of flashlight with this PR. Merging.\n. Ah, nice catch! Looks good to me.\n. LGTM.\n. Ok, thanks! Should be fine to merge then. Closing.\n. Yep, this looks good. I just merged @fffw's other changes in too related to this. Closing.\n. This LGTM.\n. @myleshorton No, I think we're mostly good. I'm seeing events show up in the GA dashboard for Lantern and FireTweet. Only issue I'm having is with the custom dimension for the Lantern version number--I'm not sure if I'm passing that in correctly (followed instructions here: https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#customs). It's still not appearing anywhere.\n. Seeing this:\n../client/client.go:13: imported and not used: \"github.com/getlantern/golog\"\n../client/client.go:52: undefined: log\n../client/client.go:73: undefined: log\n...\nYou need to initialize the global log var with golog.LoggerFor(\"lantern-android\") the way we are elsewhere.\n. OK, LGTM. Merging.\n. @myleshorton Yep. Just did.\n. @myleshorton Thanks!\n. @myleshorton That was just because I accidentally merged some changes @xiam and I were testing yesterday that weren't finalized yet. I just reverse merged from valencia.. Should be good to go now. \n. @myleshorton No, the PR is to merge analytics-updates into valencia. I noticed the code has diverged though so I just opened a new PR here which should be cleaner: https://github.com/getlantern/lantern/pull/2582\n. Thanks. LGTM.\n. Thanks, @xiam! Awesome we have this working again. Now we just need to figure out why logs aren't showing up. Merging this for now though!\n. No, this shouldn't affect my changes. If we get an unknown message type (or can't decode a message), we keep the channel open anyway, assuming the service will register at a later point. Makes sense to me. Merging.\n. Working fine for me now. \n. This works great for me. Merging. \n. LGTM!\n. @uaalto Great, thanks! I will look over this as I have a Raspberry Pi 2 already (that's what powers the Lantern Pi as I said). Were there any changes to the Makefile related to https://github.com/getlantern/lantern/issues/2463? i.e. do we have a new ARM target and linux-arm package that are generated now for instance?\n. @myleshorton Yes, I just found it:\n\n. @fffw I know your changes here https://github.com/getlantern/lantern/pull/2635 will likely conflict with these changes. Once your changes are further along/ready, I'll refactor. I'm happy to review https://github.com/getlantern/lantern/pull/2635 whenever you think its ready!\n. @fffw This should be ready for review if you want to take a look?\n. Thanks, @fffw!\n. Related to https://github.com/getlantern/firetweet/pull/134\n. @myleshorton I made one more change to this PR:\n- In genconfig, prior to generating the config, we fetch https://raw.githubusercontent.com/firetweet/downloads/master/version.txt and store the response to the firetweetversion field in cloud.yaml -- consequently, we don't have to pass in any additional arguments to genconfig and are always using the latest version from a file we maintain on the FT side, which will get incremented whenever we run deploy.bash\n. Actually, you had a manoto branch I should merge to, right @myleshorton?\n. We can remove all the map stuff now too, but I wanted to create a separate PR for that. That should reduce the download size.\n. LGTM!\n. ok LGTM!\n. Yeah, I agree. Let's close this in favor of your approach. Thanks @fffw!\n. LGTM and simpler!\n. LGTM!\n. @fffw Could we use something like panicwrap to make sure we monitor for and forward panics to Loggly? Basically, we still panic wherever, and don't try to recover from it, but we include some custom behavior (like sending the details to Loggly) whenever it happens.\n. @myleshorton Are you seeing the client id with the latest changes? \n. LGTM. Really nice find! I'm surprised we didn't catch this sooner. It could explain several issues we were seeing previously.\n. @myleshorton Sure!\n. OK cool, everything looks fine to me, Merlin! Let's go ahead and merge this then. \n. Nice. LGTM!\n. I just tested this and it definitely resolves https://github.com/getlantern/firetweet/issues/147 -- I'm also not seeing that error, @xiam\n. @myleshorton Looking over your changes now.\n. LGTM! Simplifying by removing the analytics service makes the code clearer, and it's working fine for me.\n. Ok, LGTM!\n. LGTM!\n. LGTM.. So unless that readBytes field is the first member of the struct, it isn't aligned on a 64-bit boundary which can cause that atomic LoadUint64 operation to fail on ARM, right? Nice debugging.\n. LGTM! Thanks for cleaning up the tests and documentation.\n. Hey @xiam, I actually ran into the following issue running vagrant up:\n``\n\u279c  lantern-mobile git:(lantern-mobile-testing) \u2717 vagrant up\nBringing machine 'default' up with 'virtualbox' provider...\n==> default: Box 'chef/centos-7.0' could not be found. Attempting to find and install...\n    default: Box Provider: virtualbox\n    default: Box Version: >= 0\nThe box 'chef/centos-7.0' could not be found or\ncould not be accessed in the remote catalog. If this is a private\nbox on HashiCorp's Atlas, please verify you're logged in viavagrant login`. Also, please double-check the name. The expanded\nURL and error message are shown below:\nURL: [\"https://atlas.hashicorp.com/chef/centos-7.0\"]\nError: The requested URL returned error: 404 Not Found\n```\nI've never used vagrant before so probably just a setup issue. Did I miss a step?\n. @xiam Yep, it works now\n. Working great for me, @xiam! I'm going to go ahead and merge this. Simulating the entire setup and being able to run tests against it is extremely useful--thanks a lot for this!\n. Hey @fffw, great catch. I merged your changes/the latest from valencia and uploaded a new build here. I haven't encountered this issue myself so let me know if you're still seeing it.\n. Thanks! LGTM.\n. LGTM! \n. Hey @xiam, yep, I agree it's awkward maintaining the config from there which is why I spent the weekend refactoring the config setup, and now we're finally using the same code as Lantern desktop. We can start updating that value from settings.yaml which gets copied from the Android resources directory to the app internal storage directory on start; those settings will also be available on the Java side. I'll fix some of the resulting conflicts on your branch and then review this next week.\n. What about just doing \"make android-lib android\" from the root of the project? That's how I build the app.\n. Ok, fixing that now. Can you run ndk-build from the lantern-mobile directory? \n. Thanks, build-tun2socks is a dependency now, and I made sure we're copying libtun2socks.so over to the app's libs/armeabi-v7a directory. Want to try again?\n. @oxtoacart, added a mkdir before we copy the library\n. Thanks, @oxtoacart. I'm able to reproduce that \"concurrent map writes\" crash after a few tries. I've never encountered it before. I wonder if its related to upgrading to Go 1.6 and/or the latest gomobile. \nI also found a second bug where Lantern, occasionally, mistakenly exits immediately after the first start attempt. Looking into both of these and will have more for you to review tomorrow.\n. Right, on the concurrent map writes issue. It just never popped up as a fatal error before. \nI'm actually going to close this PR as I feel a lot of changes I wanted to (and started to) make on this branch will be superseded by the work being done in valencia-embeddable anyway. I'll just wait for that to get merged without duplicating work.\n. Looks like the sdk directory is missing. Can you take a look at https://github.com/getlantern/lantern/pull/3455? That should restore it. It includes a few other small changes\n. Previously, we were displaying the version number at the bottom of the side-menu, after Lantern is enabled, by passing it to afterStart and calling UI.setVersionNum(str). Maybe we could include a version field with the new StartResult type? \nAn even better solution would be to set the version number via gradle when we're building the app using a buildConfigField property. We could also update the Makefile with gradle clean assembleDebug -Pversion=$$VERSION. Then the version number would be accessible right away w/ BuildConfig.version I believe.\n. @oxtoacart I think we want to display both. Maybe we could combine them? For release builds, presumably the library version will be the same as Lantern, and we could use the build number to represent the app version? i.e., 2.0.11.x -- or just display them side-by-side too. We can finalize all this in a separate PR too.\n. We probably want to remove all the .class files from this PR and add a .gitignore *.class entry? Actually, we shouldn't include the app/build directory at all\n. @oxtoacart Still testing, but your changes really look fantastic! Totally love how you've restructured and simplified things while preserving key aspects. I also think the new mobile test bed app will be useful for automating testing (either through AWS Device Farm and/or Travis? see https://docs.travis-ci.com/user/languages/android) as a next step potentially. A huge improvement, and I'm excited to get it over to @sunshine19090! I've tested over the weekend, and the new version has been working great for me. \n. I'm just going to merge this! It's working great and has been for me; most of the issues we've discussed we can just address in separate, smaller PRs. Thanks, @oxtoacart!\n. @oxtoacart The gradle properties you need to add before doing a release build are specified in the README now.\n. Same here. Let's go head and merge this! Thanks, @oxtoacart!\n. Just merging this since it's super straightforward!\n. LGTM!\n. Same here! I just created a new release build and can confirm the issue is resolved now.\n. Do we want this to only apply when its a debug build? presumably we don't want release builds to use this type of versioning\n. The convention for version numbers in the Play store is the 1.x.x format (no more than three numbers typically). I've never seen a date or revision number included. So it just seems weird to me, but I guess it doesn't particularly matter though.\n. @oxtoacart I haven't investigated this further, but one issue I've encountered, integrating pubsub in a manner similar to the LanternMobileTestBed app, starting the service, and leaving it running for a bit:\nSystem.err  W  java.lang.RuntimeException: Unable to send message: Write error: ssl=0xa9611c60: I/O error during system call, Broken pipe\n                         W      at org.lantern.pubsub.Client$Sendable.run(Client.java:289)\n                         W      at org.lantern.pubsub.Client.doWithConnection(Client.java:185)\n                         W      at org.lantern.pubsub.Client.process(Client.java:135)\n                         W      at org.lantern.pubsub.Client.run(Client.java:127)\n                         W      at java.lang.Thread.run(Thread.java:841)\n                         W  Caused by: javax.net.ssl.SSLException: Write error: ssl=0xa9611c60: I/O error during system call, Broken pipe\n                         W      at com.android.org.conscrypt.NativeCrypto.SSL_write(Native Method)\n                         W      at com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream.write(OpenSSLSocketImpl.java:788)\n                         W      at java.io.BufferedOutputStream.flushInternal(BufferedOutputStream.java:185)\n                         W      at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:85)\n                         W      at org.msgpack.core.buffer.OutputStreamBufferOutput.flush(OutputStreamBufferOutput.java:99)\n                         W      at org.msgpack.core.MessagePacker.flush(MessagePacker.java:157)\n                         W      at org.lantern.pubsub.Client$Sendable.sendImmediate(Client.java:301)\n                         W      at org.lantern.pubsub.Client$Sendable.run(Client.java:286)\n                         W      ... 4 more\n. @oxtoacart It hasn't happened with the LanternMobileTestbed app but with the Lantern app itself. And with the VPN disabled. But, actually, it looks the cause of the crash wasn't related to this. I fixed that issue, and I'm not seeing this error at all now. I'm conducting tests with the VPN turned on and off. So most likely a false alarm! I'll let you know if I encounter it again.\n. BTW, it looks like some of our tests are failing now? but in balancer_test.go and unrelated to this PR. \n. Yep, working great for me!\n. LGTM!! Thanks, @fffw.\n. LGTM!\n.  Sorry I somehow didn't notice this earlier.. LGTM!\n. Hey @oxtoacart, sorry for the delay on this. I'm still getting that class not found exception. Could you try opening this PR on the lantern-mobile-pro branch on our private repo? \n. LGTM!\n. Hey @myleshorton, do you want to look at this one whenever you have a chance? This PR resolves two major issues on mobile but should be fairly straightforward. Would love to get these fixes merged with the pro branch!\n. Just going to merge this in since it's a tiny change\n. LGTM, thanks @oxtoacart!\n. @oxtoacart I'm seeing that proguard issue with release builds too. I'll look into that now. If you want to keep testing, doing a debug build should work in the meantime.\n. It's not an issue specific to mobile. There's a problem with the JSON now that's being published to the public feed. Do you know what's going on there, @fffw and @xiam? I'm only seeing one source and that CDATA stuff is appearing in article titles now.\n. @fffw og just means its an open graph meta tag. \n. > Okay, it looks like I actually had a bad IP address, which is what caused us to be unable to load the feed. Still, if the feed can't load, we should not crash.\nLooks like we weren't checking for a null sources array whenever we setup the feed. With a recent change of mine, that should be impossible, but I added an additional check to make sure a crash is always avoided.\n. OK, that new proguard issue affecting release builds should be resolved now.\n. @oxtoacart What are you seeing in the logs when you try to load NYT pages? They're working fine for me. Also, what about the issue with the tab header not matching the feed shown?\n. Yeah, I'm seeing the same issue now. None of the NYT RSS links are working for me anymore. Looks like rss.nytimes.com is unreachable\n. Now it looks like rss.nytimes.com is back online, but I'm seeing a \"Not Found\" response for every article I try to load =) Anyway, this seems unrelated to the current PR, and something we have to address w/ the feed server.\n. @myleshorton We have similar strings on Android but for every locale already. Perhaps that's what you remember seeing? BTW, I substituted your bit.ly link with the one I was already using (on the pro branch).\n. I do like the indicator appearing towards the top since that's where the feed headers show up. Is it aligned at the top of the container view for you or in an arbitrary spot on the screen? We could move it towards the center of that bottom view if it looks nicer.\nThat's actually semi-intentional since we don't have a refresh button. From a usability standpoint, if I leave the app running but navigate elsewhere, I like automatically seeing the latest content whenever I re-open it. I think it's OK too that the progress dialog appears on top of the previous content, since it lets the user know we're currently refreshing the feed. That said, I think we can leave it for now but ideally we'd add a refresh button to a future version which would eliminate the need for it. Does that sound good?\n. Maybe this is something you want to chime in on, @Derekf5? Here's what it looks like now.. \n\n. Oh, just saw his feedback. He also recommended moving it to the middle of that bottom section. I'll make that fix now!\n. Ok, I moved the progress dialog down towards the center of that section, @oxtoacart. Think it's in an ideal spot now.\n. LGTM!\n. Thanks, @uaalto! LGTM.\n. The test that is failing:\n--- FAIL: TestProxying (5.06s)\n    Error Trace:    lantern_test.go:28\n    Error:      Received unexpected error \"HTTP Proxy didn't start within given timeout\"\n    Messages:   Should have been able to start lantern\neven though go test lantern.go lantern_test.go feed.go feed_test.go -v works for me.\n. LGTM!\n. Just going to merge this in as its a small change and already on devel\n. Given that we ended up merging in 4162 for this already, I'm going to close this. Thanks though, @fffw! \n. With this merged in, the articles appearing in the \"all\" tab no longer have summaries.\n. Ok, I fixed this on https://github.com/getlantern/lantern/pull/4154\n. @myleshorton This substitutes the APK link with https://bit.ly/lanternapk \n. LGTM, thanks @oxtoacart!\n. LGTM now! Merging\n. @myleshorton Not super critical, but without this, we can't change the device locale to load different feeds without restarting the app. I addressed your comments and would say we should try to get it in if we can.\n. Thanks, @myleshorton!\n. @myleshorton Oh, interesting.. Looks like It's loading twice because we're fetching the feed when the app starts and also when we detect connectivity. Working on it!\n. @myleshorton That issue with the news feed loading twice on startup should be fixed now.\n. @myleshorton This should be a quick fix. Just pulls in code from before to disable the on/off switch temporarily while the VpnService updates the connection. Resolves https://github.com/getlantern/lantern/issues/4226\n. Yeah sure @myleshorton. I opened https://github.com/getlantern/lantern/pull/4241 if you want to look at it first. It fixes a few final issues I found over the weekend and adds missing translations. Then I'll close this!\n. As this has started to diverge from devel, and the focus this sprint is on Pro desktop, I will close this for now but include it for review w/ the overall Pro changes.\n. Thanks, @oxtoacart! Lots of great improvements here. One issue I'm seeing already though (even without turning full-device VPN mode on):\nE  ERROR flashlight.client: handler.go:130   at github.com/getlantern/flashlight/client.pipeData (handler.go:130)\nE  ERROR flashlight.client: handler.go:130   at github.com/getlantern/flashlight/client.(*Client).intercept (handler.go:110)\nE  ERROR flashlight.client: handler.go:130   at github.com/getlantern/flashlight/client.(*Client).ServeHTTP (handler.go:34)\nE  ERROR flashlight.client: handler.go:130   at net/http.serverHandler.ServeHTTP (server.go:2087)\nE  ERROR flashlight.client: handler.go:130   at net/http.(*conn).serve (server.go:1474)\nE  ERROR flashlight.client: handler.go:130   at runtime.goexit (asm_arm.s:990)\nE  ERROR flashlight.client: handler.go:130 Caused by: EOF\nThen when I actually turn full-device VPN mode on I get this over and over again:\nE  Message: ERROR lantern-android.protected: protected.go:170 Could not connect to socket: no route to host [error=Could not connect to socket: no route to host error_op= error_type=errors.Error]\nE  ERROR lantern-android.protected: protected.go:170   at github.com/getlantern/protected.Dial (protected.go:170)\nE  ERROR lantern-android.protected: protected.go:170   at github.com/getlantern/tlsdialer.DialForTimings (tlsdialer.go:157)\nE  ERROR lantern-android.protected: protected.go:170   at github.com/getlantern/fronted.(*direct).dialServerWith (direct.go:258)\n E  ERROR lantern-android.protected: protected.go:170   at github.com/getlantern/fronted.(*direct).dialWith (direct.go:208)\nE  ERROR lantern-android.protected: protected.go:170   at github.com/getlantern/fronted.(*direct).vetOne (direct.go:120)\nE  ERROR lantern-android.protected: protected.go:170   at runtime.goexit (asm_arm.s:990)\nE  ERROR lantern-android.protected: protected.go:170 Caused by: no route to host\nSo I'm still not sure what is going on. A lot of this started happening when we upgraded gomobile. I'm going to investigate downgrading to see if that helps. \n. @oxtoacart You're right. Looks like I entered some weird git state (most likely from switching between lantern and our private repo while working on the same branch). No longer seeing any of the no route to host errors with your changes!\n. The updateGeoData method was being duplicated in DefaultPeerFactory and DefaultProxyTracker. It seemed like a good place to consolidate it, but I agree the service shouldn't know about peers. I'll correct that.\n. Okay, will do. There's other parts of the code where the HTTP response status isn't being verified so we probably want to handle that properly everywhere for the sake of consistency.\n. Yep, you're right. Removed them.\n. Moved this to the S3Config and I'm injecting that now along with the HttpClientFactory.\n. Actually, if I try doing lowercase, the serialization always fails and the fields come back null. I think case-sensitivity is a requirement according to the defaults we are using in JsonUtils.\n. @oxtoacart Instead of throwing an exception, if the go geolocation server is unavailable, we should report the error to loggly (as is happening in all of the catch blocks) and assume some default country/coordinates, correct?\n. The missing ingredient here, and why I kept the fields public and uppercase, was due to the lack of @JsonProperty annotations (that I finally found out about)\nhttp://stackoverflow.com/questions/15303110/jackson-json-field-mapping-capitalization\nWithout it, those fields were never being recognized/serialized properly (and would always come back null). Fixed now!\n. That's almost identical to the circular dependency issue I was seeing with #1535 -- be interested to hear how you work through it\n. Can newSingleThreadExecutor throw an exception? If so, it might make sense to put this line inside the try block also.\n. Do we want to make this number a constant? Do we reuse this process timeout elsewhere?\n. If I followed the stack correctly, it looks like in the configureCipherSuites method, in the CertTrackingSslEngineSource class, we retrieve the cipher suites enabled here and call setEnabledCipherSuites() on the SSLEngine. With these changes, we are no longer supporting 256-bit key sizes. \nIt sounds like 128 bits is quite sufficient for security already, from what I've read here. Are there any further implications to limiting ourselves to a single cipher suite now?\nOtherwise, LGTM! \n. Okay, thanks for the explanation. This LGTM. Merging.\n. Could move the \nEvents.sync(SyncPath.LOCAL_LANTERNS, endpoints); \nstatement outside the conditional.\n. The name of the method is kinda weird since this also returns true if we're running in dev mode.\n. Do we even need to listen on the Pi side? Whenever the \"hello\" and \"bye\" messages get sent, we end up receiving these locally as well.\n. With these changes, we don't need to handle the check-fallbacks mode at all anymore, right? There's other places in this class we can remove references to it, and we also can remove support for --check-fallbacks as a command line option.\n. Okay, thanks. With your changes, it looks like --check-fallbacks simply prevents other services from starting now, similar to --disable-ui:\njava\n                // don't need to start the rest of these services when running in check-fallbacks mode\n                if (checkFallbacks) {\n                    return;\n                }\nI didn't see that command line option being used anywhere else.\n. And unless I'm searching incorrectly, with this block of code removed, FallbackChecker is no longer being used anywhere now, which is why I assumed we were removing fallback server testing entirely with this update.\n. I think this is supposed to be\njava\n   boolean changed = !nextConfig.equals(config);\n. Do we want to delete most of this file?\n. Same here. Do we want to delete the styling?\n. I think we're calling this too soon. I'm getting May 19 00:55:10.898 - analytics: analytics.go:134 https://www.google-analytics.com/collect: http: error connecting to proxy http://localhost:10080: dial tcp 127.0.0.1:10080: connection refused -- We need to use waitforserver prior to the analytics call to make sure the client proxy is ready. I'll go ahead and make that change.\n. I included this originally because I thought it might be convenient to store server-side analytics at some point. Taking it out though since it's questionable we will need it.\n. Use waitforserver here until the client proxy is available. \n. Same here.\n. Store the Lantern version number in a custom dimension in GA.\n. I initially removed creating the session payload here since a lot of this code is identical to the code found in flashlight/analytics.go, but that package unfortunately imports config and referencing it at all has caused various issues in the past. I'm inclined to duplicate the code for now until we have time to properly address the larger issue.\n. The init() function is always implicitly called in Go, right? It's for general package initialization.\n. I agree though we could just initialize it when it's declared. I went ahead and made that change.\n. @myleshorton We talked about moving the code to pull the configuration into its routine. I went ahead and did that and now I'm fetching it right away when we declare the client.\n. We shouldn't be doing any analytics setup if auto-report is disabled. I moved the Configure() inside the autoReport check in flashlight/analytics.go. This wouldn't matter to FT where we have no such setting.\n. Great job hunting that down!\n. OK we could do that. I feel like we'll probably start releasing a new version of FT only every few weeks though so wouldn't be such a big deal running genconfig every time\n. Putting the version file here: https://raw.githubusercontent.com/firetweet/downloads/master/version.txt\nWe can just update that file whenever we deploy the release APK as you said\n. Yeah, that was my thinking. I like regenerating the config more often. We could just run genconfig.bash whenever we run deploy.bash too (and still read the FT version number from file or pass it as an argument).\n. I created it here: https://github.com/getlantern/lantern/issues/2663\n. Maybe just make this err to be consistent?\n. Are we increasing this to 10 seconds now just to be on the safe side, in case there's some delay starting the UI server?\n. Yeah, it makes sense to wait to launch the browser window only after we've set Lantern as the system proxy. Nice change! Works well for me on Chrome, FF, and IE.\n. The ListenAndServe callback will only be invoked if we successfully start accepting connections, but if we get an error, we really aren't accounting for it or logging it anywhere. Would be a good change to make while we're in here?\n. This comment about the 3 second wait is no longer applicable. \n. Do we want to use version here instead of packageVersion -- packageVersion looks like it defaults to 9999.99.99, and that's to avoid auto-updating in development mode. version contains the current git revision so we'd get lantern-bae7606.yaml instead of lantern-9999.99.99.yaml which I think is more informative. \n. Fixed.\n. Thanks. That should be fixed now (had to make our FB app public).\n. Adding headers here only after we successfully construct the new request.\n. Oh, I already merged, but a quick note: it's a little weird that if the proxy never comes online, we log the error (with the promise of failing later on) followed by a debug message saying we are connected. But not really a big deal.\n. If we're just discarding the error, you could just do conn.Close() here, right?\n. I think this should be logged as an error too? Same with the three below.\n. This code to close logging and check the result appears twice (also at 102-105 above). Might be advantageous/cleaner to just move it to a separate function and use that instead?\n. Same as above. If we're ignoring the error, why do we need the underscore at all? Just to be explicit we're ignoring it?\n. Not a big deal, but we seem to use the fmt.Sprintf(\"http://%s/proxy_on.pac\", cfg.UIAddr) convention elsewhere, and it's cleaner to me.\n. If we require cfg.UIAddr, wouldn't we want the check for it (lines 227-229) to come before this block?\n. Looks like this was here before, but maybe we just remove this actually? IMO, it's rarely helpful keeping commented out code (even if its just temporarily disabled) around as it creates unnecessary clutter.\n. Does g_settings_get_string return an empty string if a key is undefined, i.e. could old_mode ever be NULL here? If so, do we need to account for that before passing it to strcmp? Just confirming.\n. Ah, cool. I already merged these changes so if you just want to put that into a separate PR I'll go ahead and merge it!\n. Yeah, the comment about '555' being used and initially seeing a few hits than none is definitely similar to what I've encountered. It sounds like if you don't vary the client id, future requests end up getting blocked. \n. There is the case where if the user enables auto-reporting, after having it disabled, we don't immediately track the session until Lantern restarts, but since auto-reporting is the default now that shouldn't be much of a problem anyway.\n. Might just want to update the comments to reflect your changes.\n. Do we have to re-create the http.Client during each iteration or could we put this outside of the loop?\n. We should be able to get rid of these continue statements and we can just change _ = resp.Body.Close() to res.Body.Close() since we don't care about the return value (or is that to just be explicit that we're ignoring it?)\n. Cool, do we want to just remove those continue statements then? Everything else looks good to me so we can go ahead and merge.\n. We don't use this Makefile anymore so I figured I'd delete it. \n. Does getHTTPAddr() always return a string that can be split on ':' now, assuming we get a valid result?\n. I wonder if throwing a RuntimeException here is too severe. It means Lantern could not be initialized, and there is nothing the client can do to recover. But applications that integrate the SDK may want the option to continue running regardless. \n. Are we going to add back all the publishing options/commands for uploading artifacts to Maven Central in a separate PR, or are we getting rid of all that for some reason? The whole point of a separate SDK project was to turn Lantern into an Android library our own apps (\"Lantern Android\", FireTweet) and third party apps could integrate easily http://lantern.readthedocs.org/en/latest/ Just clarifying.\n. This is called liblantern now, right?\n. Oh sure =P Let's just do that in a separate PR as this one is already massive!\n. Not sure if you've encountered the same issue, but gomobile init seems to take an inordinate amount of time to complete. At least running off the latest version, It appears to download and re-install the existing toolchain, regardless of the -u flag, every time. Anyway, it's bearable, just time-consuming.\n. This refreshIP test would be really useful to add to the connectivity checker, as a quick test to verify the status of the VPN connection. What do you think of factoring this out (and reusing it here of course) for that purpose? Maybe we could add it to Utils that comes with the SDK?\n. It's just a part of the main activity, but changes in network connectivity are monitored using a BroadcastReceiver w/ several intent filters. When WiFi is switched off, for instance, we receive a ConnectivityManager.CONNECTIVITY_ACTION broadcast, and know to switch Lantern off immediately.\nWe've seen plenty of instances where a device goes to sleep, with Lantern left running, only for the VPN connection to be unresponsive on return for whatever reason, necessitating a similar refresh. That's handled with ACTION_USER_PRESENT broadcast. Anyway, just thinking this refresh test might be a useful addition.\n. Here we just pass to gradle the library version number which is accessible via BuildConfig.LANTERN_VERSION\n. After this is called, the text at the bottom of the side-menu will display the app and library version numbers\n. The version code is automatically incremented for every new release build. This gets written to the version.properties file (which is created and defaults to zero if it doesn't exist already).\n. Ok, I've updated android-debug and android-release to depend on those new targets.\n. Ok, just fixed that (if the release properties are missing, gradle won't throw an error now)\n. Thanks! Yeah, this isn't being used anymore.\n. Nice! It looks like AppTheme is the default theme whenever our main activity extends AppCompatActivity but only with 5.x -- anyway, just verified the black status bar is gone now! Merging.\n. Suppose I'm running multiple apps that integrate Lantern--do we want to have this service run in a global process, and have every app share the same process? It sounds like that can be achieved by making the first letter of the process name lowercase. Whenever you go to start the service, I think if there's already a running process associated, it'll just use that automatically, but I'm not sure. This brings up a good question too: what's the behavior like if I'm running the Lantern VPN app and an app that integrates Lantern as a service simultaneously?\n. I went to build a new version of FireTweet that uses the new SDK. I was successful up to the point of trying to sign into Twitter. The sign-in page is loaded in a WebView, and we had a special method in the old SDK for configuring WebViews to use an app's proxy settings. See https://github.com/getlantern/lantern/blob/lantern-mobile/src/github.com/getlantern/lantern-mobile/app/src/main/java/org/getlantern/lantern/sdk/Lantern.java#L139 and https://github.com/getlantern/lantern/blob/lantern-mobile/src/github.com/getlantern/lantern-mobile/app/src/main/java/org/getlantern/lantern/sdk/ProxySettings.java and https://stackoverflow.com/questions/4488338/webview-android-proxy for an explanation of why this is necessary. Any possibility we could restore these? I just want to verify running Lantern as a service works in FireTweet.\n. Yeah, that works. I wanted to see how Lantern as a service works with FireTweet since there's been instability issues in the past too. I also think the functionality to configure a webview to use our proxy is really useful and should be part of the SDK but we can add that back in a separate PR. \nOne other thing I noticed is that FireTweet is using an old version of Google's analytics library, and integrating the SDK actually caused the app to crash until I upgraded for whatever reason. It's working fine now though and I've uploaded the new version here: https://raw.githubusercontent.com/firetweet/downloads/master/firetweet.apk\n. These tests look awesome, @fffw! Elements are defined in the XML files in the layout resources directory. It would be cool if we could add a test here to toggle the on/off switch (the ToggleButton is defined in the activity_lantern_main.xml file).\n. For the Android app, I'm actually following the Sun convention and using the inverse of our domain for the package name: org.getlantern.lantern But I like org.lantern, if only because it's shorter, and the getlantern is unnecessary. I think after this is merged we could rename it to be consistent. \n. Noticed there's a gitignore entry for local.properties but maybe this file was committed by accident?\n. If an app goes to integrate pubsub, it's simple enough compiling the JAR and copying it to the libs directory, but it would also be really convenient to start publishing this and the Android SDK to Sonatype's snapshots repository. We don't have to do it in this PR, of course, but I figured its worth mentioning.\n. Yeah, absolutely!\n. Great! This is actually almost identical to what I already have so we could just merge it and I'll fix it on my side\n. We no longer call stopLantern() when the main activity finishes, to leave Lantern running in the background, to also resolve https://github.com/getlantern/lantern/issues/3711\n. Fixed. The reason the variables were uppercase and public before is because I was previously using a library that necessitated it to parse JSON into FeedItem objects.\n. Thanks! Fixed.\n. Yeah, I agree. @Derekf5, what should we show in the UI whenever there's an issue fetching the latest feed?\n. @oxtoacart I updated the UI to display an error whenever we encounter an issue fetching the public feed. There's a refresh button that can be pressed to try retrieving it again. \n\n. @myleshorton, we're passing in the application context, which is the global context tied to all running activities. It lasts the lifecycle of the entire application so we don't have to worry about it changing.\n. @myleshorton There is some overlap, but that analytics code is part of the SDK. I don't think it makes sense to intermix tracking events for Everfeed with it (no third-party that integrates Lantern would need any of it). So that's why I keep them separate.\n. @myleshorton Yes, but both trackers are logging different events entirely. With the tracker in the app itself, the only event we're currently recording is when a user clicks on an article (nothing related to new sessions or anything). \n. Oh, that's a good idea actually. We could just have StartResult return the tracker already created. Then there's no need to have two. Ok, I'll make that change!\n. Oh, obtaining a StartResult though would (currently) necessitate starting Lantern (and we wouldn't want to make that a requirement). But I'll look into refactoring some of that code just to return a tracker \n. @myleshorton No, I think it's a really good point. It's cleaner having only a single tracker.  What do you think of my latest changes?\n. Ok, wasn't finished making the change yet.\n. That's where I moved it.\n. The mandrill library depends on it. Without it and trying to send an e-mail on the desktop screen:\nLanternUI  E  Failed to parse response from request 'https://mandrillapp.com/api/1.0/messages/send-template.json'\n                         E  java.io.IOException: Failed to parse response from request 'https://mandrillapp.com/api/1.0/messages/send-template.json'\n                         E      at com.microtripit.mandrillapp.lutung.model.MandrillRequestDispatcher.execute(MandrillRequestDispatcher.java:86)\n                         E      at com.microtripit.mandrillapp.lutung.controller.MandrillUtil.query(MandrillUtil.java:46)\n                         E      at com.microtripit.mandrillapp.lutung.controller.MandrillMessagesApi.sendTemplate(MandrillMessagesApi.java:206)\n                         E      at com.microtripit.mandrillapp.lutung.controller.MandrillMessagesApi.sendTemplate(MandrillMessagesApi.java:133)\n                         E      at org.getlantern.lantern.model.MailSender.sendMail(MailSender.java:32)\n                         E      at org.getlantern.lantern.model.UI$11.doInBackground(UI.java:329)\n                         E      at org.getlantern.lantern.model.UI$11.doInBackground(UI.java:322)\n                         E      at android.os.AsyncTask$2.call(AsyncTask.java:288)\n                         E      at java.util.concurrent.FutureTask.run(FutureTask.java:237)\n                         E      at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n                         E      at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n                         E      at java.lang.Thread.run(Thread.java:841)\n                         E  Caused by: com.microtripit.mandrillapp.lutung.model.HandleResponseException: Error handling Mandrill response\n                         E      at com.microtripit.mandrillapp.lutung.model.MandrillRequest.handleResponse(MandrillRequest.java:74)\n                         E      at com.microtripit.mandrillapp.lutung.model.MandrillRequestDispatcher.execute(MandrillRequestDispatcher.java:83)\n                         E      ... 11 more\n                         E  Caused by: java.lang.NoClassDefFoundError: org.apache.commons.io.IOUtils\n                         E      at com.microtripit.mandrillapp.lutung.model.MandrillRequest.handleResponse(MandrillRequest.java:66)\n                         E      ... 12 more\n                         D  Showing alert dialog...\n. Sure. Just added it\n. Well, we could refresh the feed whenever we get a new connection regardless of the type. I'm just wondering, given how flaky and slow mobile networks are, if we want to avoid fetching the feed every time. That's why I limited it to WiFi.\n. @myleshorton Logging both of those errors, and I'm checking for a missing title now\n. Thanks, @oxtoacart!\n. Yes... It's the translated text now.\n. We are using the feed names we get back instead of a translated string for everything except \"all\"\n. Oh, you're saying if we disconnect, it's preferable being able to browse the previously loaded feed instead of seeing the error page right away? Yeah, good point. Let me just remove that line\n. If we want to write the feed contents to a temporary file on Android, we should store it in the getCacheDir() directory instead of /tmp. If this is just for testing purposes, do we want to call this only if runtime.GOOS != 'android'?\n. Ok, we aren't showing an error page whenever we disconnect or switch networks anymore. Only time the feed is automatically refreshed is when we connect to WiFi\n. Do we also want to check for China and Malaysia? Actually, while using a combination of the locale and country makes sense for determining the default feed to display, maybe to avoid this weird country to locale mapping, we could start publishing region-based feeds (https://feeds.getiantem.org/<country>/feed.json) also? \n. It's possible defaultLang could be missing here, right? If so, determineLocale doesn't currently account for the empty string case. Maybe we just default to en_US when the value is missing?\n. This should be updated to the latest from release-2.2.0 now\n. No. We only add elements to the feed items list now in onPostExecute of the AsyncTask (which is always invoked on the UI thread). \n. It doesn't need to be synchronized any longer (that's why I moved the processing inside an AsyncTask, to make it cleaner). It happens on the UI thread now.\n. Whenever the feed fragment is created, we're always passing in a bundle with a name argument. There's also multiple checks prior to that to make sure we have a valid name. That said, I added an extra check for a null or empty string feed name. I also removed setFeedName (wasn't being used anyway).\n. Agreed. No reason for the class not to be made it private. Should be updated now!\n. Yeah, definitely agree we should add a unit test. I'm actually working on improving test coverage overall on a separate branch so I made a note of it.\n. This test started failing for me today (there's occasionally articles without descriptions, depending on the source). A better test here is to assert an entry has a title.\n. A requirement when using Android annotations: you have to rename your activities with an underscore appended at the end. See here for more info: https://github.com/excilys/androidannotations/wiki/HowItWorks\n. Thanks. I think isValid use to be in there for some other purpose but now it's redundant. I removed it!\n. We do use setTitle -- to switch the news feed menu item text from Try Lantern Feed to Turn off Feed\n. Yes, that's correct on both counts. The disable here is to make sure we clear the application proxy settings for the non-VPN instance. I can add a comment to clarify this.\n. I moved this code into its own function and added some extra error checking.\n. Apparently, you can call addRule(rule, 0) to achieve the same effect as removeRule(rule) in earlier versions. I added a check to pick the right one to call depending on the API level.\n. It looks like there might be an issue with the gradle settings for the apt plugin (necessary to make annotations work with Android Studio). What error is Android Studio giving you? Should be more info here: https://bitbucket.org/hvisser/android-apt\n. I updated that line to use android.defaultConfig.applicationId for the resourcePackageName \n. Thanks, definitely! Fixed.\n. Oh, nice catch! Thanks.\n. Fixed.\n. Just removing the notification stuff too since it's redundant. Resolves https://github.com/getlantern/lantern/issues/4235\n. Also noticed the side-menu back arrow isn't working. This fixes it. \n. Awesome, @oxtoacart! I like the change to make the client global to take advantage of persistent connections. There is one issue though: I'm using the proxyAddr to indicate whether or not to use a proxied vs ordinary HTTP client. If no proxyAddr is specified, that means full-device VPN mode is enabled. (if it is enabled, we don't want to proxy any of these requests through the second instance of Lantern, otherwise those connections end up being rerouted back through the VpnService). So maybe you could just construct two HTTP clients at the beginning and then just still use the proxyAddr to alternate between them still? \n. Change this from config.DefaultUpdateServerURL to the autoupdate staging server (https://update-stage.getlantern.org/update) during testing otherwise you will get an error about Android not being supported\n. Nice! That's actually a lot cleaner. Do we also need to update GetToken() (above) to return this?\n. Nice! Do we maybe want to log the various errors that could happen here?\n. Thanks for fixing this! I noticed this also.\n. ",
    "scouttle": "Made a couple small comments (including in lantern-common); otherwise LGTM. :)\n. Left one comment on concurrency... \nMore generally: I haven't been entirely sure when you want code reviews and when you don't. My assumption is that you would @-flag me when you did, but I'm happy to jump in whenever I see PRs go by, just let me know which way to go!\n. ",
    "coveralls": "\nChanges Unknown when pulling 6b3c3eab7632289ba1481d33d178ff5e3287d86e on 2020 into * on devel*.\n. \nChanges Unknown when pulling 7b658ba291393d1b9697e74bca7ab078ea8f9785 on 2020 into * on devel*.\n. \nChanges Unknown when pulling 898bc904738f30e3e4a7a9f5b3e2895b49a6417e on 2020 into * on devel*.\n. \nChanges Unknown when pulling 2c7d25f3c506edee3b0e1fb03d93fd64ea4bbd4e on 2020 into * on devel*.\n. \nChanges Unknown when pulling d2d4f0614794e4bf6292eb0d734f60c3e0d55cff on 2020 into * on devel*.\n. \nCoverage increased (+0.33%) when pulling cc3e198d43bb0d9bf63030e1737210fac3046f87 on 2009 into 46f5df2f99acbee3757ca424749a79dee0bb7cc3 on devel.\n. \nCoverage increased (+0.22%) when pulling 502fb8f1d9531a54d1370b20f0b9a977b359a3f3 on 2009 into 72909773462215d37ed9c4a0cca0103fee93888d on release-1.5.14.\n. \nCoverage decreased (-0.26%) when pulling 2ea113498435403f9b717f557e59a60549ded2f1 on 2009 into 72909773462215d37ed9c4a0cca0103fee93888d on release-1.5.14.\n. \nCoverage decreased (-0.03%) when pulling 8fa0e948f07302d17237aec6c18393731221ddfd on 2006 into 72909773462215d37ed9c4a0cca0103fee93888d on devel.\n. \nCoverage increased (+0.34%) when pulling 8fa0e948f07302d17237aec6c18393731221ddfd on 2006 into 72909773462215d37ed9c4a0cca0103fee93888d on release-1.5.14.\n. \nCoverage decreased (-0.27%) when pulling 530fc0646f843f026acf9c148d276cf9fdcfa90e on forceflashlight into 72909773462215d37ed9c4a0cca0103fee93888d on release-1.5.14.\n. \nCoverage increased (+0.01%) when pulling cc897b67fbd34e2b582261a34409710039cb09e7 on 2006-2 into 2dfba194cd14e16d5c91a4232d5bb90552ae5b71 on release-1.5.14.\n. \nCoverage decreased (-0.04%) when pulling 7fa04cb3d4fd7a655acf56ea6ae922499f949ae4 on 2012 into 2dfba194cd14e16d5c91a4232d5bb90552ae5b71 on release-1.5.14.\n. \nCoverage increased (+0.01%) when pulling 125b2e9aafda9a84110a97dc8da3afed6495aac2 on 2012 into 2dfba194cd14e16d5c91a4232d5bb90552ae5b71 on release-1.5.14.\n. \nCoverage decreased (-0.06%) when pulling 1bf5431af5bd95f4521bf13eaa8bb5f84056c9e4 on 2012 into 2dfba194cd14e16d5c91a4232d5bb90552ae5b71 on release-1.5.14.\n. \nCoverage decreased (-0.48%) when pulling a38274373fd7708f2c47c7032422c5e947f748d8 on 2012 into 2dfba194cd14e16d5c91a4232d5bb90552ae5b71 on release-1.5.14.\n. \nCoverage increased (+0.03%) when pulling 0133af5a4617e9dbbf92217fd1690f8fdf6406f0 on 2012 into 2dfba194cd14e16d5c91a4232d5bb90552ae5b71 on release-1.5.14.\n. \nCoverage increased (+0.06%) when pulling 0133af5a4617e9dbbf92217fd1690f8fdf6406f0 on 2012 into 2dfba194cd14e16d5c91a4232d5bb90552ae5b71 on release-1.5.14.\n. \nCoverage decreased (-0.67%) when pulling 4d0c63ed3db1311792c0cf2a9c44cf825e4ccf26 on 2064 into 2dfba194cd14e16d5c91a4232d5bb90552ae5b71 on release-1.5.14.\n. \nCoverage decreased (-0.11%) when pulling 640b635b2c9346f17a99849c9c833641cbe1303b on 2043 into e6889c31ffd88b72135ad88ea8b22f65ff1e7bbf on devel.\n. \nCoverage decreased (-0.15%) when pulling 2cf4eafc8bae6f0ac0b65e5ea24661f23590c0b1 on 2043 into e6889c31ffd88b72135ad88ea8b22f65ff1e7bbf on devel.\n. \nCoverage increased (+0.28%) when pulling 431a39b27dd95b972095c8b29540bd5fc6368519 on 2043 into e6889c31ffd88b72135ad88ea8b22f65ff1e7bbf on devel.\n. \nCoverage decreased (-0.16%) when pulling 01888a44b756b33f07bbf4c06485fa504d45aedd on 2043 into e6889c31ffd88b72135ad88ea8b22f65ff1e7bbf on devel.\n. \nCoverage decreased (-2.41%) when pulling 8e9ce03b3c13c8063ccbaeecbb09c622d6be4a1b on 2043 into e6889c31ffd88b72135ad88ea8b22f65ff1e7bbf on devel.\n. \nCoverage decreased (-0.22%) when pulling 8e9ce03b3c13c8063ccbaeecbb09c622d6be4a1b on 2043 into e6889c31ffd88b72135ad88ea8b22f65ff1e7bbf on devel.\n. \nCoverage increased (+0.27%) when pulling 8e9ce03b3c13c8063ccbaeecbb09c622d6be4a1b on 2043 into e6889c31ffd88b72135ad88ea8b22f65ff1e7bbf on devel.\n. \nCoverage decreased (-0.68%) when pulling f8f5dbe3d5ee070c24bd653b9ca910d7f1ab5d54 on 2043 into e6889c31ffd88b72135ad88ea8b22f65ff1e7bbf on devel.\n. \nCoverage decreased (-0.18%) when pulling 5c03cb3a3657a4c7648501bf19f4c59bc95bc6d7 on 2043 into e6889c31ffd88b72135ad88ea8b22f65ff1e7bbf on devel.\n. \nCoverage decreased (-1.06%) when pulling 5c03cb3a3657a4c7648501bf19f4c59bc95bc6d7 on 2043 into e6889c31ffd88b72135ad88ea8b22f65ff1e7bbf on devel.\n. \nCoverage increased (+0.23%) when pulling 28d582116e64500c47e7644d02616fa92f314814 on 2085 into e6889c31ffd88b72135ad88ea8b22f65ff1e7bbf on devel.\n. \nCoverage increased (+0.66%) when pulling 1c9a184c080867c56549e1deb7f07b545af7a0a1 on 1617 into fd85e7e45fe87ee471b6bfcc53cf618fa1c77d51 on devel.\n. \nCoverage decreased (-0.43%) when pulling 38fb5f0efbb4b4cfc87992ba9d6d638cd613341f on 1606 into afc490519fd3365aee9753ad8d66e790f8212ccb on devel.\n. \nCoverage decreased (-0.2%) when pulling f09cb87f00fc94f31435901529adc70e5a672396 on 1606 into afc490519fd3365aee9753ad8d66e790f8212ccb on devel.\n. \nCoverage increased (+0.3%) when pulling bde76a3e612429fcd049983094845a4a8882fda6 on 1606 into afc490519fd3365aee9753ad8d66e790f8212ccb on devel.\n. \nCoverage decreased (-0.16%) when pulling ff29862e2323b4a73c5fc89082d336670fbd6834 on 1606 into afc490519fd3365aee9753ad8d66e790f8212ccb on devel.\n. \nCoverage decreased (-1.16%) to 31.1% when pulling 1ba915c8ea7b061c5f9708dc208f480daf735cdb on 2007 into a6a216c1ba224bc1269ad3751fee0b62bf6e6cb6 on devel.\n. \nCoverage decreased (-0.65%) when pulling 4b0d89d7f30412f64bfae58c2b4973cc8e26775a on 2096 into 09ed98ac0d2f5a61937090b0a3b8d26bf1720f2a on devel.\n. \nCoverage decreased (-0.15%) when pulling 92dde3f9550d5cd9330b5e759ad34c8412a48a83 on 2109 into 8b9d838322512533ae2d0bc140d51ee08cd8dcf0 on devel.\n. \nCoverage decreased (-0.43%) when pulling 92dde3f9550d5cd9330b5e759ad34c8412a48a83 on 2109 into 8b9d838322512533ae2d0bc140d51ee08cd8dcf0 on devel.\n. \nCoverage decreased (-0.28%) when pulling 303fe24988902b93ce9f7c5aae3b8e7270589c39 on 2095 into e6bab3918b428a2267597853b286d4625766a955 on devel.\n. \nCoverage increased (+0.47%) when pulling 8afb9e4d018c963e7c9d8e8d221d128e754523ac on issue-2095 into 39833b217a527d16a2676f7b71292d860f307f70 on devel.\n. \nCoverage decreased (-0.47%) when pulling 3fa7dacdc490ada84be6f7ee065d82af44739d05 on issue-2095 into 39833b217a527d16a2676f7b71292d860f307f70 on devel.\n. \nCoverage increased (+0.37%) when pulling 027971996dd3f8e231e99b8559276be5e389758c on issue-2124 into 76291c74827d9854055ecfbb250a9ed45589cbfd on devel.\n. \nCoverage increased (+0.34%) when pulling 453074c33dec2419aac26dea4d2d3bc2dbd439b0 on issue-2124 into 76291c74827d9854055ecfbb250a9ed45589cbfd on devel.\n. \nCoverage increased (+0.23%) when pulling 7c2f1fb4c0d58ba728c8eaae2aaee7bcabe4929f on issue-2124 into 76291c74827d9854055ecfbb250a9ed45589cbfd on devel.\n. \nCoverage decreased (-3.76%) to 32.31% when pulling 32150c873e5b2492e0478d65c375118efb627532 on issue-2124 into 76291c74827d9854055ecfbb250a9ed45589cbfd on devel.\n. \nCoverage increased (+0.26%) when pulling 154e95db0e5f4d61792a46f687c6ea624371de75 on 2168 into f4079ac27538505f251d2ac8a280e83e4091ad65 on issue-2164.\n. \nCoverage decreased (-3.99%) when pulling 78a053a01942c7181296c5f1767036d82c533f56 on issue-2164 into 61ce9fed3c30e0f4b09de9a67f25c81a2d0a98c1 on master.\n. \nCoverage increased (+0.2%) when pulling 59819cceb19791f5e4209df4f68632e5ce0d5abc on fffw-patch-1 into 27671b84aac0a7d0b50acc6923a6f7e218ac45dc on devel.\n. \nCoverage increased (+0.05%) to 32.03% when pulling 539ad292188f6adacb75b90ef83e2e77b9121afa on peerscanner into ee0156567b851266d6a740b69832234e9ad5d25c on devel.\n. \nCoverage decreased (-0.02%) to 31.13% when pulling 6b24dd3e6d0810325401e8648f9f2ffd69f02806 on issue-2196 into c8c01732d11580a6362e985f78a0c24113f88e82 on devel.\n. \nCoverage decreased (-0.09%) to 31.06% when pulling 9997446f6640a20ccafb50d742c3140f34802872 on issue-2196 into c8c01732d11580a6362e985f78a0c24113f88e82 on devel.\n. \nCoverage decreased (-0.1%) to 31.05% when pulling 7210e6524ab211e219c10039517f3a791a12ef1d on issue-2196 into c8c01732d11580a6362e985f78a0c24113f88e82 on devel.\n. \nCoverage decreased (-0.06%) to 31.09% when pulling 9f5b36d3ad8fb97cc721ba3f5e2699c63f9bace0 on issue-2196 into c8c01732d11580a6362e985f78a0c24113f88e82 on devel.\n. \nCoverage increased (+0.04%) to 31.1% when pulling ad9020182d4913df62222128eead133cc94cf1ed on issue-2112 into 877d4e653fdcbf108e8f7b8d1dada4c1bd75bd74 on devel.\n. \nChanges Unknown when pulling c457d1468c6f6dec07d591cd8cb1f5ea7740cfbe on issue2457 into * on valencia*.\n. \nCoverage decreased (-0.39%) to 65.07% when pulling 2ffc8a8f015cfe13c59e6c8897390ad1479e1cb2 on fix/issue-2398 into 608291bbc32b83fe51593db1a74db12b61759487 on valencia.\n. \nCoverage increased (+0.05%) to 65.52% when pulling fae02b50d49289ba84610f67cfcfea4987dc37e4 on issue2457 into 608291bbc32b83fe51593db1a74db12b61759487 on valencia.\n. \nCoverage increased (+0.04%) to 65.5% when pulling f21a24e2673b6dd433034e6345899866a7f7f0a7 on issue2457 into 608291bbc32b83fe51593db1a74db12b61759487 on valencia.\n. \nCoverage remained the same at 65.11% when pulling ac83a4413c5f337978e786cd58e22e2a5b435429 on issue2454 into ed4b2fc8b8c501a9796a4054b597dc1f3a23b636 on valencia.\n. \nCoverage decreased (-0.09%) to 65.11% when pulling 9e94b9195e3040624a9b7bd566bd479ab19213c0 on issue2491 into b2ca2e4f85fa464e6f852670edaad6d4340e2e0f on valencia.\n. \nCoverage decreased (-0.18%) to 65.02% when pulling be5dbe5e4638a4429c576d17d99cc7be405931c7 on issue2491 into b2ca2e4f85fa464e6f852670edaad6d4340e2e0f on valencia.\n. \nCoverage increased (+0.05%) to 64.75% when pulling 2de255bafd5f7536ac9c8978eb2b606b2e08f6ef on issue2477 into 1ded81181fcaf17325c7df6b9b09b479927e5027 on valencia.\n. \nCoverage decreased (-0.02%) to 64.68% when pulling 4b84ca4d024cc00411f005483160beb1ba2675f7 on issue2477 into 1ded81181fcaf17325c7df6b9b09b479927e5027 on valencia.\n. \nCoverage remained the same at 64.69% when pulling 4b84ca4d024cc00411f005483160beb1ba2675f7 on issue2477 into 1ded81181fcaf17325c7df6b9b09b479927e5027 on valencia.\n. \nCoverage remained the same at 64.69% when pulling 5b8954688c755fb74ec17ae20f45a7df3b349a41 on issue2477 into 1ded81181fcaf17325c7df6b9b09b479927e5027 on valencia.\n. \nCoverage remained the same at 64.69% when pulling 3bef707a188d3010d87a27cc5669596d80f55f46 on issue2496 into 1ded81181fcaf17325c7df6b9b09b479927e5027 on valencia.\n. \nCoverage remained the same at 64.69% when pulling 6080b48cd894d77c85d681e9e59553ce81eab003 on issue2496 into 1ded81181fcaf17325c7df6b9b09b479927e5027 on valencia.\n. \nCoverage remained the same at 64.69% when pulling 3354ddc70d31d220b64997f4507646f040efa61a on issue2496 into 1ded81181fcaf17325c7df6b9b09b479927e5027 on valencia.\n. \nCoverage remained the same at 64.69% when pulling dcddbaec69c4590ddfaa22019f41492698de43b2 on issue2496 into 1ded81181fcaf17325c7df6b9b09b479927e5027 on valencia.\n. \nCoverage remained the same at 64.69% when pulling 7a34f53e6e504128333511a263559893e10148fd on issue2517 into f48e2f3ffb57988550eb44e8bd7dad5cda0e044d on valencia.\n. \nCoverage decreased (-0.04%) to 64.65% when pulling e0e925ac364675ac283e1fcf4ce96d11d4611783 on 2520 into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage increased (+0.31%) to 65.0% when pulling e6fe6445fdefde6fe7642e673c851fdce9811df5 on issue2520 into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage increased (+0.23%) to 64.93% when pulling 5478d2294ca58f36eb06433a03c63b45c2cda329 on issue2520 into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage increased (+0.25%) to 64.95% when pulling 0f637be8db9236b9972aa90649d579119bf9b989 on issue2520 into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage increased (+0.18%) to 64.88% when pulling d5e489edb920a7b41317fb7b3a359a4654d3e3a6 on issue2520 into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage remained the same at 64.69% when pulling d4e732db68726fa4b23dfe3df1ea8b93df566a15 on issue2513 into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage remained the same at 64.69% when pulling ba92c58556982ffb23845a362ae420874faf8674 on issue2497 into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage increased (+0.01%) to 64.71% when pulling a34fef87405a3c22f7413848ce7f0a04f78d52df on issue2497 into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage decreased (-0.15%) to 64.55% when pulling bd8b93bed73ece4919a185b1937efe926095cd61 on issue2497 into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage increased (+0.0%) to 64.7% when pulling 1e1e5ee58844a712fa14be25e67e4088a1852f11 on issue2497 into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage decreased (-0.01%) to 64.75% when pulling c6611765a11b7670b1a14f6540987b365cc39e64 on issue2497 into 8d8f77501446bba8227b1a2facf740e0f2e3e8a8 on valencia.\n. \nCoverage increased (+0.07%) to 65.11% when pulling 111bbb4bf909a76120eab48d0d353d2070451e11 on issue2497 into d5bedb4d7450f2c220f49b1840601100b8939621 on valencia.\n. \nCoverage increased (+0.06%) to 65.1% when pulling 27cfbfb36619b899fd01e6493dcc3f6bfb678346 on issue2497 into d5bedb4d7450f2c220f49b1840601100b8939621 on valencia.\n. \nCoverage increased (+0.06%) to 65.1% when pulling 82d9ef9575b7ef244aa1a4de1f2c85ac9270d63d on issue2497 into d5bedb4d7450f2c220f49b1840601100b8939621 on valencia.\n. \nCoverage decreased (-0.01%) to 65.03% when pulling d871f379d08d1662de857f5feea689782b710d1e on issue2497 into d5bedb4d7450f2c220f49b1840601100b8939621 on valencia.\n. \nCoverage decreased (-0.06%) to 64.99% when pulling a8c8d0021f11e1ffe5c83658f562ed75a7a3eecd on issue2497 into ede05567b74eb55880719c972043bc3d8132f562 on valencia.\n. \nCoverage decreased (-0.68%) to 64.2% when pulling e34ddc94168b7410886f8e2a16d257eafe993f1b on withClient into d5e489edb920a7b41317fb7b3a359a4654d3e3a6 on issue2520.\n. \nCoverage remained the same at 64.88% when pulling dd8f0c6005f4327ecf2afbf7cc2adc117a57049a on withClient into d5e489edb920a7b41317fb7b3a359a4654d3e3a6 on issue2520.\n. \nCoverage increased (+0.13%) to 65.01% when pulling 98a51456f2ca957d76e2730f6bcbef3bb1b3a72b on withClient into d5e489edb920a7b41317fb7b3a359a4654d3e3a6 on issue2520.\n. \nCoverage increased (+0.13%) to 65.01% when pulling 4ed8144f8adf5a2af2501af6efccb84a817183f8 on withClient into d5e489edb920a7b41317fb7b3a359a4654d3e3a6 on issue2520.\n. \nCoverage increased (+0.01%) to 64.71% when pulling 395950ddbab7b1ef976f07cf8851f1c458d47f48 on issue2500 into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage increased (+0.01%) to 64.71% when pulling 395950ddbab7b1ef976f07cf8851f1c458d47f48 on issue2500 into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage increased (+0.11%) to 64.8% when pulling f9683f6f76886265320b286bfe0b33258736c78a on android-bindings-tests into 4dd67b00fe8babe439387cade71c1637344e8f8a on valencia.\n. \nCoverage increased (+0.29%) to 65.05% when pulling 8a0c80947f389d0aefb995744c250c204e204654 on issue2520-take2 into 1d38bf3d1ea582e14fc3bf228575b122d0a2ef12 on valencia.\n. \nCoverage increased (+0.27%) to 65.02% when pulling 09166e5616a89e796e29d1eac5508967a56c6565 on issue2520-take2 into 1d38bf3d1ea582e14fc3bf228575b122d0a2ef12 on valencia.\n. \nCoverage decreased (-0.08%) to 64.94% when pulling cec975219938df5a42613cb86a4269ab0fb4bb5e on issue2540 into afdd0ba995692f1aa7ce71083abce4c272baa68a on valencia.\n. \nCoverage decreased (-0.08%) to 64.94% when pulling 494c8dfc9450fc3a71a67dd0ad7d0a8972ac8411 on issue2540 into afdd0ba995692f1aa7ce71083abce4c272baa68a on valencia.\n. \nCoverage decreased (-0.08%) to 64.94% when pulling d87bdbdd2e451344a08a1ecd0fab2c44ffaf1b14 on issue2540 into afdd0ba995692f1aa7ce71083abce4c272baa68a on valencia.\n. \nCoverage decreased (-0.36%) to 64.66% when pulling 7766ea641b249e43c1ad2ccef027c7725a6d43a5 on issue2540 into afdd0ba995692f1aa7ce71083abce4c272baa68a on valencia.\n. \nCoverage decreased (-0.09%) to 64.85% when pulling a67d22ff2b4195a912280b43870b91c409e39bab on issue2540-updates into cec975219938df5a42613cb86a4269ab0fb4bb5e on issue2540.\n. \nCoverage decreased (-0.04%) to 64.9% when pulling f47ae251fd53cca73c8d9f1bfc7a039ecc2f71f8 on issue2540-updates into cec975219938df5a42613cb86a4269ab0fb4bb5e on issue2540.\n. \nCoverage remained the same at 64.94% when pulling 3806db98d4334d7e9cd54c6434e1971d670aa826 on issue2540-xiam into cec975219938df5a42613cb86a4269ab0fb4bb5e on issue2540.\n. \nCoverage remained the same at 64.94% when pulling 941f799a08a0b8e87df76abbf95b661e39b4f089 on issue2540-xiam into cec975219938df5a42613cb86a4269ab0fb4bb5e on issue2540.\n. \nCoverage remained the same at 64.89% when pulling 4115535e963c46e4c5870789908ad87dbc04604f on issue2546 into 178210d0a9fd522bc9978eff2e9bcf65a478bd59 on valencia.\n. \nCoverage decreased (-0.01%) to 64.83% when pulling 142d716605fa462b72c7a4a3d56d375cdc2c9382 on issue2550 into 07bfe8b88f234700b41badaf683006de6c4224f6 on valencia.\n. \nCoverage remained the same at 65.08% when pulling e936376c8e06c05dd6927610720f5cde65d2dc3a on lantern-android-poll-config-updates into 18b46ffe6576cd5777a44a66b6f7870647b75a99 on valencia.\n. \nChanges Unknown when pulling 92597963487bdc4da23d63cda02c658c3e275fa2 on issue2555 into * on valencia*.\n. \nCoverage decreased (-0.02%) to 65.19% when pulling b474ebcd4a7ab073301621489493fbd6d1aca662 on issue2552 into 707b9fe0942e2a61e6d8d32683b546272bd7ecc8 on valencia.\n. \nCoverage remained the same at 65.19% when pulling 319d0af312b53820f700a57d2b8c3c6ce0874b30 on issue-2484 into 439ab65a17bc4ba1d3cbdeba5cce441427d65fc9 on valencia.\n. \nCoverage decreased (-0.22%) to 64.97% when pulling a0335ce63214e3fc2591e84e1a8570acc1ddcf80 on detour-android into 463aaf2293972af64b35ab1162b0870f8268c949 on valencia.\n. \nCoverage decreased (-0.22%) to 64.97% when pulling e1e73402c84915919c22bfb788c207007764ad64 on detour-android into 463aaf2293972af64b35ab1162b0870f8268c949 on valencia.\n. \nCoverage increased (+0.08%) to 65.04% when pulling e3362f397624def276232b2fc39feb6b30ccf919 on issue2567 into c78c68e4d0153a2a7fa98aa1f9dde823001fc6b2 on valencia.\n. \nCoverage decreased (-0.09%) to 64.88% when pulling e23b2ddb309daae0c144847252a5a5331ea90573 on analytics-updates into c78c68e4d0153a2a7fa98aa1f9dde823001fc6b2 on valencia.\n. \nCoverage increased (+0.0%) to 64.97% when pulling f11e500bbeabb0fc5a1da690446456af1eb55617 on analytics-updates into c78c68e4d0153a2a7fa98aa1f9dde823001fc6b2 on valencia.\n. \nCoverage increased (+0.01%) to 64.9% when pulling 1ce6e2ecb3103a66a96d011a035cdd17d516b7f7 on analytics-updates-fffw into e23b2ddb309daae0c144847252a5a5331ea90573 on analytics-updates.\n. \nCoverage remained the same at 65.04% when pulling b890e3d9f1c1fa9198d5b5834769b45dc29a2811 on issue-2552 into d5bedb4d7450f2c220f49b1840601100b8939621 on valencia.\n. \nCoverage remained the same at 65.04% when pulling 7e7772dbb777f86488e1c77e1044e1a3fb5fc569 on issue2330 into 79486c03ddd02241ed197f631b23a965ea4565f0 on valencia.\n. \nCoverage decreased (-0.11%) to 64.88% when pulling f3d19d9566243349b52d3323cb6e94605692e88d on analytics-updates-fixed into 1f7f6d92eaa7a10aa9ba25175a04e2f9dd03c0e6 on valencia.\n. \nCoverage decreased (-0.27%) to 64.72% when pulling f3d19d9566243349b52d3323cb6e94605692e88d on analytics-updates-fixed into 1f7f6d92eaa7a10aa9ba25175a04e2f9dd03c0e6 on valencia.\n. \nCoverage decreased (-0.11%) to 64.88% when pulling cefda5de9a83c4ee92258a872a79f8fc4f34e81b on analytics-updates-fixed into 1f7f6d92eaa7a10aa9ba25175a04e2f9dd03c0e6 on valencia.\n. \nCoverage decreased (-0.13%) to 64.86% when pulling 0a3aa2ab0057099eafada7f2cdd8a15bd85f2816 on analytics-updates-fixed into 1f7f6d92eaa7a10aa9ba25175a04e2f9dd03c0e6 on valencia.\n. \nCoverage decreased (-0.34%) to 64.65% when pulling 05f80f77d24158a69d6397c2cb450d43efb70185 on analytics-updates-fixed into 1f7f6d92eaa7a10aa9ba25175a04e2f9dd03c0e6 on valencia.\n. \nCoverage decreased (-0.13%) to 64.86% when pulling c7dfb4ea9d13a6939cb194eb48dc425b32b1e746 on analytics-updates-fixed into 1f7f6d92eaa7a10aa9ba25175a04e2f9dd03c0e6 on valencia.\n. \nCoverage remained the same at 64.86% when pulling 8a257816b7a4e2d9a7c383b8bf983651167a9e2a on issue2589 into b6c0332382a2f764c3117b222de7e0149a18a8e0 on valencia.\n. \nCoverage decreased (-0.3%) to 64.56% when pulling 1a4372ef647f6c6d86a7a8a940af3ca7d3882ca5 on issue2568 into b6c0332382a2f764c3117b222de7e0149a18a8e0 on valencia.\n. \nCoverage increased (+0.05%) to 64.91% when pulling 6e568cc5a7224ba7ffa9ac42aa2763f0ceeebbe5 on issue2568 into b6c0332382a2f764c3117b222de7e0149a18a8e0 on valencia.\n. \nCoverage increased (+0.08%) to 64.94% when pulling c4ac562e80f54127f3fdfda595da8e8bea28a043 on issue2568 into b6c0332382a2f764c3117b222de7e0149a18a8e0 on valencia.\n. \nCoverage decreased (-0.01%) to 64.85% when pulling 7b7ce619d0f83ed6a2414a4482994a78ccf8e73d on issue2314 into b6c0332382a2f764c3117b222de7e0149a18a8e0 on valencia.\n. \nCoverage remained the same at 64.86% when pulling e4582093e164cb64705c0b7accbad54441d462ca on issue2560 into b6c0332382a2f764c3117b222de7e0149a18a8e0 on valencia.\n. \nCoverage decreased (-0.21%) to 64.65% when pulling 7328681a7830d1573633751a9f9f36c70c2b2c5b on issue2589-take2 into b6c0332382a2f764c3117b222de7e0149a18a8e0 on valencia.\n. \nCoverage remained the same at 64.87% when pulling cefa709bbd0e4b63a569842876512588d9014f8c on feed-cfg-to-redis into 4d0d0f2d1522bcbb5d13c50708a2aec447a39d43 on valencia.\n. \nCoverage remained the same at 64.87% when pulling 876f9653329a5eb25fbcd3d69fcde37fac7cc384 on feed-cfg-to-redis into 4d0d0f2d1522bcbb5d13c50708a2aec447a39d43 on valencia.\n. \nCoverage decreased (-0.05%) to 64.94% when pulling 3db0bb57883ff98d284e3841aaca31a01e8bf989 on issue2330 into 2b574098d84528e38d8cc8c521e78b2e159143ea on valencia.\n. \nCoverage decreased (-0.06%) to 64.93% when pulling 665c07d8a7b011ce707189c692aa8f9db1a1f37b on issue2330 into 2b574098d84528e38d8cc8c521e78b2e159143ea on valencia.\n. \nCoverage decreased (-0.05%) to 64.94% when pulling 5f72725ab2699a34bf7466f1054f2b8f72cb7b53 on issue-2482-xiam into 2b574098d84528e38d8cc8c521e78b2e159143ea on valencia.\n. \nCoverage decreased (-0.05%) to 64.94% when pulling 4049136eced0242e22f18b551c32501218cb2d7d on issue2612 into 2b574098d84528e38d8cc8c521e78b2e159143ea on valencia.\n. \nCoverage decreased (-0.07%) to 64.86% when pulling 40705a1904182b248ed3c0220948a9a17dae6d0f on issue2614 into 95eff89f5f6cbf7c7b449851069e101efff3f610 on valencia.\n. \n\nCoverage increased (+0.2%) to 51.075% when pulling 976576b19953235cc032aa85ff995eae0753d3f4 on issue-3528 into 85a3c04bfe907ea48d1a3da28b3ec6629c80dffa on valencia.\n. \nCoverage increased (+6.4%) to 52.054% when pulling 0d3e5441836addcd33ce6a3a4d48cbaefcd08d20 on issue-3745 into 511938d71bb27b1eb45563245f5247640a0792b1 on devel.\n. \nCoverage increased (+1.2%) to 53.247% when pulling 2a15b66c6b731b805e18df39e93e318f30ffda29 on issue3296-buffered into 3fb9a72ed1978139257ded83d71c05698b887c45 on devel.\n. \nCoverage increased (+1.2%) to 53.758% when pulling 32f4afe6dae31909ca0d885333e83078a0e431f4 on issue3296-buffered into 8f5e4456e94063bb5519e766a632b3dca6ca9c3c on devel.\n. \nCoverage increased (+2.6%) to 47.82% when pulling 38d1e9f8d700dcacf82461975bd02aedcdbbcc3e on issue-3800 into 827fa3a7f1c5a6eeb7d4c198125b6bf1c8a9c808 on devel.\n. \nCoverage increased (+2.7%) to 47.903% when pulling 0eccd7a7017cabbf7d036d645bf177ebcebc0e27 on issue-3800 into 827fa3a7f1c5a6eeb7d4c198125b6bf1c8a9c808 on devel.\n. \nCoverage increased (+2.8%) to 48.018% when pulling 88f65351114ee88ff040c732bc45ac9c956b6f62 on issue-3800 into 827fa3a7f1c5a6eeb7d4c198125b6bf1c8a9c808 on devel.\n. \nCoverage increased (+2.8%) to 48.036% when pulling 7e27c00c384a538e5c619d47f55d4d826879a08b on issue-3800 into 827fa3a7f1c5a6eeb7d4c198125b6bf1c8a9c808 on devel.\n. \nCoverage remained the same at 45.233% when pulling 93a4b437b5ef658f7afc7373e21fd80f50f7be87 on issue3815 into 827fa3a7f1c5a6eeb7d4c198125b6bf1c8a9c808 on devel.\n. \nCoverage decreased (-0.06%) to 45.17% when pulling 5d82a9741a3353ab6381d45f6eaac8fd5999f78f on issue3814 into 827fa3a7f1c5a6eeb7d4c198125b6bf1c8a9c808 on devel.\n. \nCoverage decreased (-0.1%) to 45.101% when pulling 350bd855f0ee78a6f332097fc38be989ce379727 on issue3814 into 827fa3a7f1c5a6eeb7d4c198125b6bf1c8a9c808 on devel.\n. \nChanges Unknown when pulling e78d7056678dd9a4f751bd74bb3302420369c429 on issue3814 into * on devel*.\n. \nChanges Unknown when pulling aaf7401a0ff56d3eaee3b39fbfd49b45d18135d1 on armonly into * on devel*.\n. \nCoverage increased (+0.07%) to 52.054% when pulling d2fa22ce306a00cd58c9b94e41ba2bebec250838 on armonly into a9897d65673d909d58a6f8c61909ba010573d56c on devel.\n. \nChanges Unknown when pulling 4537c1c7fca51e04814210f128c5b590ee22094f on testfix into * on devel*.\n. \nCoverage increased (+6.4%) to 52.089% when pulling a9897d65673d909d58a6f8c61909ba010573d56c on devel into fd97e0e047d1fd491b5739e9501419b8ea78b7dd on master.\n. \nCoverage increased (+0.07%) to 52.054% when pulling 999ea81f70179e65e62419b7227a352f9e2fc14a on issue-2136 into a9897d65673d909d58a6f8c61909ba010573d56c on devel.\n. \nCoverage decreased (-0.02%) to 52.071% when pulling edc2c49c57595a03907d15033582753b02db82fd on issue-3837 into 54e8695c77bbdb2d04d62905a3123e1d8965caf0 on devel.\n. \nCoverage increased (+0.3%) to 52.472% when pulling 7491f579efdc8514e82e3a4969525dcd91cecdb3 on issue-3837 into 7491f579efdc8514e82e3a4969525dcd91cecdb3 on devel.\n. \nCoverage remained the same at 52.018% when pulling 78b8d4ae9d603eb42183b5318c6b3f55810f95fb on issue3840 into 3fb9a72ed1978139257ded83d71c05698b887c45 on devel.\n. \nCoverage increased (+0.07%) to 52.089% when pulling 60028c12aabb8f2802894562a8c14a05f24358a6 on issue3847 into 3fb9a72ed1978139257ded83d71c05698b887c45 on devel.\n. \nCoverage increased (+0.07%) to 52.424% when pulling f0b779d120dbafbcce665effc5cb4f22be8f4c61 on issue3851 into 4d588059d80f05a7f57fc5bd63239a8df35ce12a on devel.\n. \nCoverage decreased (-0.2%) to 52.124% when pulling f0b779d120dbafbcce665effc5cb4f22be8f4c61 on issue3851 into 4d588059d80f05a7f57fc5bd63239a8df35ce12a on devel.\n. \nCoverage decreased (-0.3%) to 52.054% when pulling f0b779d120dbafbcce665effc5cb4f22be8f4c61 on issue3851 into 4d588059d80f05a7f57fc5bd63239a8df35ce12a on devel.\n. \nCoverage decreased (-0.3%) to 52.054% when pulling f0b779d120dbafbcce665effc5cb4f22be8f4c61 on issue3851 into 4d588059d80f05a7f57fc5bd63239a8df35ce12a on devel.\n. \nCoverage increased (+0.3%) to 52.333% when pulling 72dba41ae245bbd7568062b6f644b06a5b3799e3 on issue3866 into 4dcd9a28dc7272270eca1361b77fe1604c73c622 on devel.\n. \nCoverage increased (+0.05%) to 52.384% when pulling 5bf32f38e6f18dc15c6cea31f695a48879c96825 on issue3864 into d5cd65ee1cf8c5fe71d3c19c1a7776444b8376ca on devel.\n. \nCoverage remained the same at 52.156% when pulling 608b18e0906b7b082393f800f2d26b255c023a03 on issue-3859 into 92279c76f651dd10d74f7ce319f1477b4d8c8cdf on devel.\n. \nCoverage decreased (-0.03%) to 52.121% when pulling e73afb5e552a9e34e05f14e604d4897cbf6e7903 on issue-3876 into 92279c76f651dd10d74f7ce319f1477b4d8c8cdf on devel.\n. \nCoverage remained the same at 52.156% when pulling cfc9bd3b16f29a1062ee341e4f19d9d69ed55b58 on notificationicon into 92279c76f651dd10d74f7ce319f1477b4d8c8cdf on devel.\n. \nCoverage increased (+0.05%) to 52.205% when pulling 2c381c26ad112d18ee29b47d42b9c190e382dba9 on obfs4nodep into 21aba58f5fad16f2bc93ca19e9c1fb65ae7d5a60 on devel.\n. \nCoverage decreased (-0.3%) to 51.873% when pulling b2c2a3be519bb233c3dc5f4f84aef33e8765d6ff on obfs4nodep into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.3%) to 51.943% when pulling 7242f7302cbd2015953b8c853b1c66c35e616b80 on obfs4nodep into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.3%) to 51.925% when pulling 7242f7302cbd2015953b8c853b1c66c35e616b80 on obfs4nodep into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.4%) to 52.085% when pulling 911947952d8c279caf570bee642ec53811944216 on nouiformobile into 72a2195653e1857001183bbb8a2f1de0d456e1f0 on devel.\n. \nCoverage remained the same at 52.173% when pulling 46dbc82ad3fe1169a0ec21b933a79d0a255177d6 on issue-3708 into 7491f579efdc8514e82e3a4969525dcd91cecdb3 on devel.\n. \nCoverage increased (+0.07%) to 52.244% when pulling 383b88ded0301e0df814e3976d3b085224c012eb on clear-preferences-on-first-run into 29c5f035dc98d25cb0592e43765af56ff525107d on devel.\n. \nCoverage increased (+0.2%) to 52.384% when pulling af55015c552b60c7b606f5634e969640df5d3387 on clear-preferences-on-first-run into 29c5f035dc98d25cb0592e43765af56ff525107d on devel.\n. \nCoverage increased (+0.1%) to 52.296% when pulling a6dd145d6dd5e84780c6a52a40d026a8d5a996b2 on clear-preferences-on-first-run into 29c5f035dc98d25cb0592e43765af56ff525107d on devel.\n. \nCoverage decreased (-0.02%) to 52.192% when pulling 9463c8bbc3b70149144e54a8e28b5983f6228ec7 on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.02%) to 52.192% when pulling 4886a6914ffb7adb4164d72364818c8c960a8d0c on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.02%) to 52.192% when pulling 8488afd4e3b4332f1adac598be53a4e35af09b88 on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.09%) to 52.121% when pulling 22953f9011f63acd267893208d48e93d703d3e9c on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.09%) to 52.121% when pulling 22953f9011f63acd267893208d48e93d703d3e9c on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.09%) to 52.121% when pulling 1fa677cd53c7a213b33d42b31438e1ce54f98497 on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.02%) to 52.192% when pulling 034f0a0dece5331dc63c431f567f973b3fdebbf1 on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.05%) to 52.156% when pulling c1d0c6d291a7a755c2559180d2c3ae724b977667 on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage increased (+0.4%) to 52.614% when pulling c1d0c6d291a7a755c2559180d2c3ae724b977667 on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.09%) to 52.121% when pulling 2d2d3dbf5da3fb31d4316877ab2bc4d7e3d5fe89 on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.02%) to 52.192% when pulling 70564203681616070ca7dd962bea0e1003013fe6 on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage increased (+0.05%) to 52.262% when pulling 7668af56c82809ad0d4c915f29fbd61725cdc996 on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.09%) to 52.121% when pulling 0c48fa833959349c613cfcf4bf3d41ae16f4d9e9 on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage increased (+0.2%) to 52.42% when pulling f8335e159980383d90f15d49913073bb2f99c03e on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage increased (+0.2%) to 52.42% when pulling 853350467f53fbd328e4caffbf5bca5b06467771 on panama-rss into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.09%) to 52.121% when pulling 98a75234e98bea49bb6136b51489796ba7f8d38e on proxyinmobile into 81c4670a8c5ba8a4dd35d917cb63330a4bb27350 on devel.\n. \nCoverage decreased (-0.1%) to 52.28% when pulling 237f57b7ae188346b1ccf0db4c83525ffa586967 on issue3902 into 1234ab74a085eebe7d199881d2ca7180d01d4a81 on devel.\n. \nCoverage decreased (-0.7%) to 51.469% when pulling 9b09f65d7f2b6de16822574cd9c25a8cf144c495 on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage decreased (-0.4%) to 51.764% when pulling d2d95a8fd15e78d16567e02af8b58f395e0e5134 on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage decreased (-0.4%) to 51.719% when pulling fc0a8f383779bed2cac6694c2cfbf6d82fd6cb26 on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.06%) to 52.177% when pulling 12d8a9691f3064429d728fc9a4c7fa7ff1185543 on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.3%) to 52.434% when pulling bba058da0e4a68075d247c96d4a1c561a7608e00 on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.02%) to 52.142% when pulling b16e0eed79f18897d1fb099678146b5ff9ac423a on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.3%) to 52.434% when pulling b16e0eed79f18897d1fb099678146b5ff9ac423a on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.09%) to 52.211% when pulling b16e0eed79f18897d1fb099678146b5ff9ac423a on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.02%) to 52.142% when pulling 3fd4c6bcc34c40323f8f4bb87daa0cad4ac0bff5 on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.1%) to 52.228% when pulling 3fd4c6bcc34c40323f8f4bb87daa0cad4ac0bff5 on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.3%) to 52.452% when pulling 6338789ea21e68be85cfbef179ec21ceb821095a on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.4%) to 52.521% when pulling 58cf6fcaa03f25604cc19cf67cae333598b3ec42 on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.04%) to 52.16% when pulling 60de896debd82a2aa8bbc7d9aab9cb26ea23fc9f on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.3%) to 52.452% when pulling 842a9d084b492f88ad8bf24b8734d0faa73e1c2a on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.04%) to 52.16% when pulling 313c8c07c58edb8a9ef2e4f57dc003ebc692a6ca on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.1%) to 52.229% when pulling 93c67d726a913570f24de96b912d520d0356d6e3 on panama-mobile into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.3%) to 52.42% when pulling 4cb43a194e83cb685aac2d94b44ce79c38ed3a8a on issue3959-2 into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.07%) to 52.192% when pulling 6f11401cddc0bc5229a989faab29b4e4a06bba7e on issue3959-2 into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage remained the same at 52.121% when pulling 6f11401cddc0bc5229a989faab29b4e4a06bba7e on issue3959-2 into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+0.3%) to 52.42% when pulling efb4c0ab9006786cb0f628dae32dac46973c95b8 on issue3959-2 into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage decreased (-0.2%) to 51.943% when pulling c6dda3479920b362c98ffd6e904f7105ac75890b on obfs4dep2 into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+17.4%) to 69.569% when pulling 8cfa65b3487279c43e6740b049288c0efe97bab1 on issue3685-test-coverage into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nCoverage increased (+17.5%) to 69.608% when pulling 8cfa65b3487279c43e6740b049288c0efe97bab1 on issue3685-test-coverage into e52ea6d466d7e7e6b965b4050acfadcb39019bdd on devel.\n. \nChanges Unknown when pulling f3d2f4359dd96c442c09daa5d0bf4789b86dab71 on issue3685-2 into * on devel*.\n. \nChanges Unknown when pulling f3d2f4359dd96c442c09daa5d0bf4789b86dab71 on issue3685-2 into * on devel*.\n. \nChanges Unknown when pulling 5960e3689cf891044109239ecc745f8f8de76ed6 on issue3685-2 into * on devel*.\n. \nChanges Unknown when pulling c9f4e6bd0f696fdc9a82b6337a5f4b891c5d6b1f on translations-to-2.2.0 into * on devel*.\n. \nCoverage decreased (-0.07%) to 52.121% when pulling f2a1129dd1433c28fa18c5771498281750021b13 on issue3981 into 4eb9258cc78ddf714e061e7fdd1d926cb8bee616 on release-2.2.0.\n. \nCoverage remained the same at 52.192% when pulling 2a7694b6d188d833af486a4959741e360fd8e02d on issue3981 into 4eb9258cc78ddf714e061e7fdd1d926cb8bee616 on release-2.2.0.\n. \nCoverage remained the same at 52.192% when pulling e5e0dafb054e3d056c50ebcc43892dd82f1fe38d on issue3981 into 4eb9258cc78ddf714e061e7fdd1d926cb8bee616 on release-2.2.0.\n. \nCoverage decreased (-0.2%) to 52.343% when pulling d7b9b6ea0022f7f2d95b14baf237e7a135e7f989 on issue3940 into 8f5e4456e94063bb5519e766a632b3dca6ca9c3c on devel.\n. \nChanges Unknown when pulling c91e4e7208e5d7fd0010b111041edcebc15616b1 on issue3940 into * on devel*.\n. \nChanges Unknown when pulling c91e4e7208e5d7fd0010b111041edcebc15616b1 on issue3940 into * on devel*.\n. \nChanges Unknown when pulling eda069c377c015b340ec0d95aa621f0983312f52 on issue3940 into * on devel*.\n. \nChanges Unknown when pulling 7b99c62fe79e3aabed65594e69490ada2b54d919 on issue3940 into * on devel*.\n. \nCoverage increased (+0.2%) to 71.32% when pulling 0dc088b8fe725b59398758efe4652842731efb99 on issue3940 into 7b3cf118006e392c14c4ff315b8be5863ef872ce on devel.\n. \nCoverage decreased (-0.03%) to 71.061% when pulling 0dc088b8fe725b59398758efe4652842731efb99 on issue3940 into 7b3cf118006e392c14c4ff315b8be5863ef872ce on devel.\n. \nCoverage decreased (-0.1%) to 52.121% when pulling 8e33bb283250f070fe32c8fa654c547fd2451bc5 on show-scroll-bar-on-hover into d37f59dc677c6a5e4c93d87fd5c120219c142881 on release-2.2.0.\n. \nCoverage decreased (-0.2%) to 53.926% when pulling 39af3bae5e93b6e8b04e37010dc1294da15010ef on issue3296-buffered-eventual-noclose into 32f4afe6dae31909ca0d885333e83078a0e431f4 on issue3296-buffered.\n. \nCoverage decreased (-0.008%) to 54.148% when pulling 39af3bae5e93b6e8b04e37010dc1294da15010ef on issue3296-buffered-eventual-noclose into 32f4afe6dae31909ca0d885333e83078a0e431f4 on issue3296-buffered.\n. \nCoverage decreased (-0.08%) to 54.076% when pulling 780f8a631d5030c91f01818f19079513e2eac9de on issue3296-buffered-eventual-noclose into 32f4afe6dae31909ca0d885333e83078a0e431f4 on issue3296-buffered.\n. \nCoverage decreased (-0.2%) to 53.947% when pulling 780f8a631d5030c91f01818f19079513e2eac9de on issue3296-buffered-eventual-noclose into 32f4afe6dae31909ca0d885333e83078a0e431f4 on issue3296-buffered.\n. \nCoverage decreased (-0.3%) to 52.229% when pulling 6de02989d280e6fd9ed41d325a0714b3eedf542a on track-feed-events-mobile into 8f5e4456e94063bb5519e766a632b3dca6ca9c3c on devel.\n. \nCoverage decreased (-0.3%) to 52.229% when pulling f99eb79d5069e1d012b6b3c9564e89b9e9653118 on track-feed-events-mobile into 8f5e4456e94063bb5519e766a632b3dca6ca9c3c on devel.\n. \nCoverage decreased (-0.4%) to 52.16% when pulling 1290ccfbae67d625df8bc23590043f9b932080ce on track-feed-events-mobile into 8f5e4456e94063bb5519e766a632b3dca6ca9c3c on devel.\n. \nCoverage decreased (-0.4%) to 52.16% when pulling c58e95bf3b5c5c44997739ba8e93d809c439e188 on issue4006 into 65615be886ed283b67e6681fbf049de548aff1af on release-2.2.0.\n. \nCoverage decreased (-0.4%) to 52.16% when pulling 31239b817d7e106d58b277bf4823ec655f56743c on issue4006 into 65615be886ed283b67e6681fbf049de548aff1af on release-2.2.0.\n. \nCoverage decreased (-0.4%) to 52.16% when pulling 22a788117df8694cc06f0a1f841cf9e273a10240 on issue-4015 into 8f5e4456e94063bb5519e766a632b3dca6ca9c3c on devel.\n. \nCoverage increased (+0.09%) to 52.315% when pulling 2aa505a29fc99dded30ba75bf293c9a139cb96da on issue4019 into 177e6fbfd4dca2e5da73602ce53456d05711b826 on release-2.2.0.\n. \nCoverage increased (+0.5%) to 52.778% when pulling cc4f21366df3f150fa86bf80ba9f67d3af24701e on eventual-noleak into 8c9ec370d96029da9092808ee453670f2a10134c on devel.\n. \nCoverage increased (+17.2%) to 69.403% when pulling e6df7217c5531eaebd32888af63fa60555c4a091 on eventual-noleak into 8c9ec370d96029da9092808ee453670f2a10134c on devel.\n. \nCoverage increased (+0.07%) to 52.229% when pulling bf89312b38031aef33d7ad1312782030d4d4ab20 on issue-4029 into 31840e0927152700798f35d4b9e02ab36a1650fd on release-2.2.0.\n. \nCoverage remained the same at 52.16% when pulling 79ddf23b5a0a707460e3ca60baf5edf4fc5563ff on issue-4029-fffw into 31840e0927152700798f35d4b9e02ab36a1650fd on release-2.2.0.\n. \nCoverage increased (+0.07%) to 52.229% when pulling 39663a8d9327b45e652ecb9993a07e4725116aa6 on issue-4029-fffw into 31840e0927152700798f35d4b9e02ab36a1650fd on release-2.2.0.\n. \nCoverage increased (+0.07%) to 52.229% when pulling 233dbef35546e8718af80dfc08f3e2e79cbd0d8f on issue4036 into 31840e0927152700798f35d4b9e02ab36a1650fd on release-2.2.0.\n. \nCoverage decreased (-0.2%) to 69.583% when pulling 9dcfcb8cb06743502a73bf5d5e4feb34490b4bef on mobile-center-on-off-button into e66465501fc8b93873bc82a0f0c787f17f519539 on devel.\n. \nChanges Unknown when pulling f346155663554dcef26b2ffb5bd2502778eee03e on balancecheck into * on devel*.\n. \nChanges Unknown when pulling 227f25a11f401847fd2d0aad9c8b69352fb111aa on balancecheck into * on devel*.\n. \nChanges Unknown when pulling 227f25a11f401847fd2d0aad9c8b69352fb111aa on balancecheck into * on devel*.\n. \nChanges Unknown when pulling af78ca685fc458c34a1bcff916ac0bfe4b95ef41 on balancecheck into * on devel*.\n. \nCoverage increased (+0.1%) to 69.767% when pulling 9acc4d174cc26f75088a8dd682fbff4b8d5e7275 on use-content-when-meta-description-unavailable into 8fdaae070432ef63837602000fc3d72976a4f5c7 on devel.\n. \nCoverage decreased (-0.4%) to 69.245% when pulling 9acc4d174cc26f75088a8dd682fbff4b8d5e7275 on use-content-when-meta-description-unavailable into 8fdaae070432ef63837602000fc3d72976a4f5c7 on devel.\n. \nCoverage increased (+0.04%) to 69.7% when pulling 1d0b92e6ad5d6b3d6bf267998696dae07fc2af56 on show-progress-bar-while-feed-loads into 8fdaae070432ef63837602000fc3d72976a4f5c7 on devel.\n. \nCoverage decreased (-0.4%) to 69.234% when pulling 1d0b92e6ad5d6b3d6bf267998696dae07fc2af56 on show-progress-bar-while-feed-loads into 8fdaae070432ef63837602000fc3d72976a4f5c7 on devel.\n. \nCoverage decreased (-0.04%) to 69.674% when pulling 28367eef9abea8045f17c70d0297b2279e068ec1 on show-progress-bar-while-feed-loads into bc2c6bc61d85aca9e483ebb471b74ac98b4e3f4b on devel.\n. \nCoverage decreased (-0.3%) to 69.45% when pulling 2405064a074e90b17c64609d276ac72c09411bcf on show-progress-bar-while-feed-loads into bc2c6bc61d85aca9e483ebb471b74ac98b4e3f4b on devel.\n. \nCoverage decreased (-0.4%) to 52.125% when pulling 7ca3264ab42bb52d4dcfbe984ce2029c4af4a90d on issue-4024 into a7f4fb895a2a70d7380a1576960fbb74a1224e2f on release-2.2.0.\n. \nCoverage decreased (-0.03%) to 52.487% when pulling 7234315c34096a16de1e4f0956f190a6fa944fbf on issue-4024 into a7f4fb895a2a70d7380a1576960fbb74a1224e2f on release-2.2.0.\n. \nCoverage decreased (-0.4%) to 52.16% when pulling bbff1f769efb1044587778b2d9488b8828bd762b on issue-4024 into a7f4fb895a2a70d7380a1576960fbb74a1224e2f on release-2.2.0.\n. \nCoverage decreased (-0.07%) to 52.452% when pulling bbff1f769efb1044587778b2d9488b8828bd762b on issue-4024 into a7f4fb895a2a70d7380a1576960fbb74a1224e2f on release-2.2.0.\n. \nCoverage decreased (-0.2%) to 52.314% when pulling 396dad81831ddd47bc47222aa643391b886b916c on issue-4024 into a7f4fb895a2a70d7380a1576960fbb74a1224e2f on release-2.2.0.\n. \nCoverage decreased (-0.09%) to 52.434% when pulling 3216f13d93b796bb4e71589d8274f1c567768c1b on issue-4024 into a7f4fb895a2a70d7380a1576960fbb74a1224e2f on release-2.2.0.\n. \nCoverage decreased (-0.02%) to 52.503% when pulling c3ec3c851ca621ec8bc230db14759ee092b7481f on issue-4024 into a7f4fb895a2a70d7380a1576960fbb74a1224e2f on release-2.2.0.\n. \nCoverage increased (+0.2%) to 69.834% when pulling 7f6e112ba65f655f235cf08b90199448a60d8624 on forcedomainfront into 8fdaae070432ef63837602000fc3d72976a4f5c7 on devel.\n. \nCoverage decreased (-0.09%) to 69.571% when pulling dde2893e5e78425345f84e1cfec3b95111e49070 on issue-4005 into 8fdaae070432ef63837602000fc3d72976a4f5c7 on devel.\n. \nCoverage increased (+0.1%) to 69.776% when pulling b4a75d2e8e1adaf6b7b9b835915a8befcac1e7ec on issue-4005 into 8fdaae070432ef63837602000fc3d72976a4f5c7 on devel.\n. \nCoverage increased (+1.1%) to 70.779% when pulling 105fa3845099896537a19f0a085051d0dcbca7ef on issue-4005 into 8fdaae070432ef63837602000fc3d72976a4f5c7 on devel.\n. \nCoverage decreased (-0.3%) to 69.383% when pulling 1be8a6e893e02b94921450f86b334bc0e8f008e9 on windowsbuild into 8fdaae070432ef63837602000fc3d72976a4f5c7 on devel.\n. \nCoverage increased (+0.04%) to 69.7% when pulling 237b1a8f97f471ccb5ffac753e042c0605145479 on windowsbuild into 8fdaae070432ef63837602000fc3d72976a4f5c7 on devel.\n. \nCoverage decreased (-0.3%) to 71.061% when pulling bb08d39da11d2843306afc55ff166b9639c443e4 on windowsbuild into bbbf811501aaa97af74e485c2c5d5e359813e802 on devel.\n. \nCoverage decreased (-0.2%) to 69.439% when pulling 87ac142141ff727972e9e9982002d04ce547b602 on update-buildtoolsrevision into 8fdaae070432ef63837602000fc3d72976a4f5c7 on devel.\n. \nCoverage increased (+0.4%) to 69.756% when pulling d21eef63e7d0cd5a1f0f90d2b56f3a1cbfcfd8a1 on fix-desktop-version-screen into 236cf75d01dee3d05d22f6de4b30a4414b803f16 on devel.\n. \nCoverage increased (+0.5%) to 69.897% when pulling 72a48f5e396d95a454c54d68c89c08169915b8e4 on fix-desktop-version-screen into 236cf75d01dee3d05d22f6de4b30a4414b803f16 on devel.\n. \nCoverage decreased (-0.2%) to 52.366% when pulling dbb9f1e2accb82e9220352a6ad3f32cbb3bcc878 on issue-4017 into a7f4fb895a2a70d7380a1576960fbb74a1224e2f on release-2.2.0.\n. \nCoverage increased (+0.2%) to 52.245% when pulling 005c4d15f4f766e3fcf885e622ab5494c0989c1c on release-2.2.0-mobile-changes into 98a292f539ac1a44998ccdade9d3d89e0bc9f427 on release-2.2.0.\n. \nCoverage increased (+0.3%) to 52.314% when pulling d04abcc865361517143e51bad2bd90dd79880e1d on release-2.2.0-center-button into c9efe7f670fa196787d3b7f063ede05a34507632 on release-2.2.0.\n. \nCoverage increased (+0.06%) to 71.152% when pulling 9cde72c65324c1af46aac2ad28db53d4cd95f443 on add-issue-template into 7b3cf118006e392c14c4ff315b8be5863ef872ce on devel.\n. \nChanges Unknown when pulling 4ea2016585fd7a0e89aca4663dc95d5cbacaf554 on issue4107 into * on release-2.2.0*.\n. \nChanges Unknown when pulling e8db16cb150e7bcec328043db88fcdc8ebb1a1fe on issue4114 into * on release-2.2.0*.\n. \nCoverage decreased (-0.09%) to 52.584% when pulling 9a053ae4560feaa89007fbc237a4db354a274182 on issue4114 into e919e492d20717a4e1e34151b133263aaea6c0e7 on release-2.2.0.\n. \nChanges Unknown when pulling 1ca48a6edf6bfb44a78b2e7663502b5ef68db8a0 on issue4093 into * on release-2.2.0*.\n. \nChanges Unknown when pulling 13e502c380376c359aedf81e6990357a56a943ad on issue4093 into * on release-2.2.0*.\n. \nChanges Unknown when pulling 133ddcb061b6ff5e42984e2dbb8eb246ae40d416 on release-2.2.0-update-share-links into * on release-2.2.0*.\n. \nCoverage remained the same at 52.176% when pulling 85c2f422cca366c86fa4d6c5187ba51d095dbf4f on issue-4105 into 6f23be00f3f1afb91742842265bacd732fd8dc13 on release-2.2.0.\n. \nCoverage increased (+0.07%) to 52.294% when pulling 312cccfc2830a37be5aaf4720911fe4c71b8103e on issue-4108 into a8146b35697bd560689f8ebd2e7b3be55125f223 on release-2.2.0.\n. \nCoverage increased (+0.3%) to 52.518% when pulling 312cccfc2830a37be5aaf4720911fe4c71b8103e on issue-4108 into a8146b35697bd560689f8ebd2e7b3be55125f223 on release-2.2.0.\n. \nCoverage decreased (-0.5%) to 52.088% when pulling e85cd2bf446210dae33090c7471f94afe06cd3b5 on release-2.2.0-issue-4139 into 815c5af496c27c20a3cc7ecac83d7f4c07a9dace on release-2.2.0.\n. \nCoverage increased (+0.07%) to 51.88% when pulling 5ae9b5aa08de05be9d27b83cb50af56e3fe7ad5d on release-2.2.0-issue-4139 into ad4af4adc0e843ddb25bf4c55b491cbf10f2026e on release-2.2.0.\n. \nCoverage remained the same at 51.81% when pulling 5ae9b5aa08de05be9d27b83cb50af56e3fe7ad5d on release-2.2.0-issue-4139 into ad4af4adc0e843ddb25bf4c55b491cbf10f2026e on release-2.2.0.\n. \nCoverage increased (+0.4%) to 52.177% when pulling 5ae9b5aa08de05be9d27b83cb50af56e3fe7ad5d on release-2.2.0-issue-4139 into ad4af4adc0e843ddb25bf4c55b491cbf10f2026e on release-2.2.0.\n. \nCoverage decreased (-0.4%) to 52.225% when pulling 289c9e1afd9e5c1e68aaaee4d1fbdb3076b08d8b on release-2.2.0-missing-translations into 815c5af496c27c20a3cc7ecac83d7f4c07a9dace on release-2.2.0.\n. \nCoverage decreased (-0.4%) to 52.234% when pulling 9e178c26363ffe69022d8a19a354f1c9d74399ff on release-2.2.0-sort-feeds into 815c5af496c27c20a3cc7ecac83d7f4c07a9dace on release-2.2.0.\n. \nCoverage decreased (-0.4%) to 52.225% when pulling 5d4752d6ab6afad83036ffb4849d2d4a65893fc5 on release-2.2.0-sort-feeds into 815c5af496c27c20a3cc7ecac83d7f4c07a9dace on release-2.2.0.\n. \nCoverage decreased (-0.1%) to 52.518% when pulling 6a3c53994650a3d8e654147d0ffa87f4e123ffe9 on release-2.2.0-sort-feeds into 815c5af496c27c20a3cc7ecac83d7f4c07a9dace on release-2.2.0.\n. \nCoverage decreased (-0.7%) to 51.966% when pulling b022f2837c61c5a824b501f0942c3c0718f0c196 on release-2.2.0-sort-feeds into 815c5af496c27c20a3cc7ecac83d7f4c07a9dace on release-2.2.0.\n. \nCoverage decreased (-0.3%) to 52.294% when pulling b059d7003f96a0c49123cbe6192b6a50dbb63f61 on issue4117 into 815c5af496c27c20a3cc7ecac83d7f4c07a9dace on release-2.2.0.\n. \nCoverage decreased (-0.3%) to 52.294% when pulling f641f0eae47276d184ca4fe1422d94bcb1a5e85a on issue4117 into 815c5af496c27c20a3cc7ecac83d7f4c07a9dace on release-2.2.0.\n. \nCoverage decreased (-0.4%) to 52.225% when pulling 6e6a84f4d67faa0e2ffc894a1665c9d52b246ad7 on issue4117 into 815c5af496c27c20a3cc7ecac83d7f4c07a9dace on release-2.2.0.\n. \nCoverage increased (+0.2%) to 52.552% when pulling 928288914b821e2a4764c4ba6d2b2c13094eed81 on release-2.2.0-sort-feeds-pointers into 5d4752d6ab6afad83036ffb4849d2d4a65893fc5 on release-2.2.0-sort-feeds.\n. \nCoverage decreased (-0.05%) to 52.586% when pulling 6e6a84f4d67faa0e2ffc894a1665c9d52b246ad7 on issue4108-2 into 815c5af496c27c20a3cc7ecac83d7f4c07a9dace on release-2.2.0.\n. \nCoverage decreased (-0.7%) to 52.016% when pulling 3159d994fc4469ab55980d8ac57c70d0fdbe303c on issue4114-ox into e919e492d20717a4e1e34151b133263aaea6c0e7 on release-2.2.0.\n. \nCoverage decreased (-0.5%) to 52.162% when pulling 5d0026e0b6439ccd66b77faf1be6323ab064b5be on issue4114-ox into e919e492d20717a4e1e34151b133263aaea6c0e7 on release-2.2.0.\n. \nCoverage decreased (-0.3%) to 51.88% when pulling 75d1b1d1a01161985d5fd0a03a47d9253c6192ae on issue4114-ox into 1bf240c6860cf2c1c02edce21eec18e2fe0d46e6 on release-2.2.0.\n. \nChanges Unknown when pulling 86e3de779d604584f69c83c95f92151b3ecb3198 on issue-4163 into * on release-2.2.0*.\n. \nChanges Unknown when pulling 57fce1926a08dfce07542653f60ed1a1cbb4fc24 on issue-4163 into * on release-2.2.0*.\n. \nChanges Unknown when pulling 1c772a18e50e136879729092d098f4046f93c923 on issue-4163 into * on release-2.2.0*.\n. \nChanges Unknown when pulling 93457cf10f08207170a5cc3933014967578b8f9c on issue-4163 into * on release-2.2.0*.\n. \nChanges Unknown when pulling 3d451a32ed6aba26d9b505c7e897436be74c2fd4 on issue-4163 into * on release-2.2.0*.\n. \nChanges Unknown when pulling 205892a86cfc8bfcd5a66e715be70a62df5f2fdd on issue-4166 into * on release-2.2.0*.\n. \nChanges Unknown when pulling f91674e3fcd192db1a8d77794fbe0a639dfe6530 on issue-4163-atavism into * on issue-4163*.\n. \nChanges Unknown when pulling 4255c987f13bcb80beb1addf4b07bc8efe71edd5 on issue-4163-atavism into * on issue-4163*.\n. \nCoverage decreased (-0.7%) to 51.88% when pulling 4255c987f13bcb80beb1addf4b07bc8efe71edd5 on issue-4163-atavism into 1c772a18e50e136879729092d098f4046f93c923 on issue-4163.\n. \nCoverage remained the same at 51.81% when pulling 2d112c965caf0f8e8293044adedcd62b6ac04953 on release-2.2.0-issue-4136 into ad4af4adc0e843ddb25bf4c55b491cbf10f2026e on release-2.2.0.\n. \nCoverage remained the same at 51.81% when pulling 2d112c965caf0f8e8293044adedcd62b6ac04953 on release-2.2.0-issue-4136 into ad4af4adc0e843ddb25bf4c55b491cbf10f2026e on release-2.2.0.\n. \nCoverage remained the same at 51.81% when pulling ca2d342b7409a1f3933096b79d520c5ac0afbd17 on release-2.2.0-issue-4136 into ad4af4adc0e843ddb25bf4c55b491cbf10f2026e on release-2.2.0.\n. \nCoverage decreased (-0.2%) to 51.652% when pulling d8dc2878945b4a658b2805bf15c96dd7d1bcfddd on release-2.2.0-issue-4136 into ad4af4adc0e843ddb25bf4c55b491cbf10f2026e on release-2.2.0.\n. \nCoverage decreased (-0.07%) to 51.74% when pulling ce7aa0642aff9ab884ebfde085f87fa2429bdfdd on release-2.2.0-issue-4136 into ad4af4adc0e843ddb25bf4c55b491cbf10f2026e on release-2.2.0.\n. \nCoverage increased (+0.07%) to 51.88% when pulling ce7aa0642aff9ab884ebfde085f87fa2429bdfdd on release-2.2.0-issue-4136 into ad4af4adc0e843ddb25bf4c55b491cbf10f2026e on release-2.2.0.\n. \nCoverage decreased (-0.3%) to 51.81% when pulling 40d59032e9c70b9daacb0ff0f468ab2a4d301bdb on release-2.2.0-issue-4136 into 1bf240c6860cf2c1c02edce21eec18e2fe0d46e6 on release-2.2.0.\n. \nCoverage decreased (-0.3%) to 51.845% when pulling 40d59032e9c70b9daacb0ff0f468ab2a4d301bdb on release-2.2.0-issue-4136 into 1bf240c6860cf2c1c02edce21eec18e2fe0d46e6 on release-2.2.0.\n. \nCoverage decreased (-0.3%) to 51.81% when pulling 09099c6c7be3c9475ed110e98e0bedd9a9c655e0 on release-2.2.0-issue-4136 into 1bf240c6860cf2c1c02edce21eec18e2fe0d46e6 on release-2.2.0.\n. \nCoverage decreased (-0.3%) to 51.81% when pulling 09099c6c7be3c9475ed110e98e0bedd9a9c655e0 on release-2.2.0-issue-4136 into 1bf240c6860cf2c1c02edce21eec18e2fe0d46e6 on release-2.2.0.\n. \nCoverage increased (+0.09%) to 52.229% when pulling 0145e7ad37c6ab4cec699e18878c6f55f7588b54 on release-2.2.0-issue-4136 into 1bf240c6860cf2c1c02edce21eec18e2fe0d46e6 on release-2.2.0.\n. \nCoverage decreased (-0.4%) to 51.74% when pulling 65e081c76317aa512e9b9a80f8640fe49c11b626 on release-2.2.0-fix-reddit into e864d0f5171026c52812e8bdf5505b52a00066d2 on release-2.2.0.\n. \nCoverage increased (+0.4%) to 52.177% when pulling 8669227de5a1a10e1bfd5b7073af9d2fef801b25 on issue-4143-2 into 50a06946b9c72fe45a9a4dbe15e2f4199e64bfd4 on release-2.2.0.\n. \nCoverage increased (+0.03%) to 51.845% when pulling 07b1cdc37fec2a4a6fef9d2ba067dbb8b285f36e on issue-4185 into ab11a13f17dca29294675de6dd393df730dcf9d9 on release-2.2.0.\n. \nCoverage remained the same at 51.81% when pulling 2433dab98014f46af7853c5f7e2b2943119eb1dc on issue-4185 into ab11a13f17dca29294675de6dd393df730dcf9d9 on release-2.2.0.\n. \nCoverage increased (+0.06%) to 51.866% when pulling 18d2e39a813e04901f2eda3361fdf383c732675b on issue-4164 into ab11a13f17dca29294675de6dd393df730dcf9d9 on release-2.2.0.\n. \nCoverage increased (+0.4%) to 52.232% when pulling eb2d8c11ba37a925fe1216066daf2e2e5717eaa2 on issue-4164 into ab11a13f17dca29294675de6dd393df730dcf9d9 on release-2.2.0.\n. \nCoverage increased (+0.3%) to 52.145% when pulling ce27eefe261c70cc5c3097624d7f0cb33996a270 on issue-4164 into ab11a13f17dca29294675de6dd393df730dcf9d9 on release-2.2.0.\n. \nCoverage increased (+0.07%) to 71.45% when pulling 74bfa04819f293f082aed09c0d0431837baa287c on windowsbuild-xiam into 7166a54ab32ae655bb1ccc51912b55db10e9b42f on windowsbuild.\n. \nCoverage increased (+0.1%) to 51.936% when pulling 4f73fdf88c71c506f7c78be799f53ecd709ae7f8 on release-2.2.0-updates into 146110c429b5c8bb612ee1959f337cd0ccca8b4e on release-2.2.0.\n. \nCoverage increased (+0.4%) to 52.163% when pulling a17aefcc0a05fc2116e48106fb7c3b3909aeeeab on release-2.2.0-updates into 146110c429b5c8bb612ee1959f337cd0ccca8b4e on release-2.2.0.\n. \nCoverage increased (+0.07%) to 51.866% when pulling 79fbc256a24539364dad123fb86a26dc1c9430fe on release-2.2.0-updates into 146110c429b5c8bb612ee1959f337cd0ccca8b4e on release-2.2.0.\n. \nCoverage decreased (-0.2%) to 51.639% when pulling 79fbc256a24539364dad123fb86a26dc1c9430fe on release-2.2.0-updates into 146110c429b5c8bb612ee1959f337cd0ccca8b4e on release-2.2.0.\n. \nCoverage increased (+0.1%) to 51.936% when pulling a6414548d0b03f28c54525878570db323dbec42d on release-2.2.0-updates into 146110c429b5c8bb612ee1959f337cd0ccca8b4e on release-2.2.0.\n. \nCoverage decreased (-0.2%) to 51.639% when pulling 7e0dc39f2346006680db30f2c18f4d42b196bdc9 on release-2.2.0-updates into 146110c429b5c8bb612ee1959f337cd0ccca8b4e on release-2.2.0.\n. \nCoverage increased (+0.6%) to 52.354% when pulling 0ca337fcda8127bd528745959e540d294c4d46c5 on release-2.2.0-updates into 146110c429b5c8bb612ee1959f337cd0ccca8b4e on release-2.2.0.\n. \nCoverage decreased (-0.09%) to 51.709% when pulling 50f9dc328d1784a0065b18405dae025d8b8fa0d6 on release-2.2.0-updates into 146110c429b5c8bb612ee1959f337cd0ccca8b4e on release-2.2.0.\n. \nCoverage increased (+0.07%) to 51.866% when pulling b7514dc217403d04aa90653ace3fdba1f7edca38 on release-2.2.0-updates into 146110c429b5c8bb612ee1959f337cd0ccca8b4e on release-2.2.0.\n. \nCoverage increased (+0.4%) to 52.169% when pulling fd3d71340778a9e47eef5aa153da53564f452079 on release-2.2.0-updates into 146110c429b5c8bb612ee1959f337cd0ccca8b4e on release-2.2.0.\n. \nCoverage increased (+0.08%) to 51.872% when pulling 0fe4a9cc3e0a3aaf8e1919ddd27746ace73f3441 on release-2.2.0-updates into 146110c429b5c8bb612ee1959f337cd0ccca8b4e on release-2.2.0.\n. \nCoverage increased (+0.08%) to 52.016% when pulling cf5f17eecb361a1a0347f83753d2c24437e17b70 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage decreased (-0.1%) to 51.826% when pulling aa62bf4f64a784b0f7715266c023cd2c0602c264 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage decreased (-0.1%) to 51.843% when pulling aa62bf4f64a784b0f7715266c023cd2c0602c264 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage increased (+0.3%) to 52.206% when pulling 34e073b000d3cc4905340e33ca2b8da75cdb8718 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage increased (+0.2%) to 52.172% when pulling 34e073b000d3cc4905340e33ca2b8da75cdb8718 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage increased (+0.006%) to 51.947% when pulling 181eacea409f2beeaafc490621b00142b27beaf8 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage decreased (-0.06%) to 51.877% when pulling bbabd07e3d14898b956381149344e35173eb057f on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage increased (+0.04%) to 51.981% when pulling a2a1816f8b1f9742043b95c361a6bfced3bd44e7 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage decreased (-0.06%) to 51.877% when pulling 4a311dbd5518c6d89134037f31ae92f9a52d8168 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage decreased (-0.06%) to 51.877% when pulling 72f521f1e18e0bc66432fd2e8666fc195400b9fc on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage increased (+0.3%) to 52.241% when pulling 0e5e4e57ae0d69eff6a517c8abaebff893a60399 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage increased (+0.006%) to 51.947% when pulling 0e5e4e57ae0d69eff6a517c8abaebff893a60399 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage increased (+0.006%) to 51.947% when pulling 0e5e4e57ae0d69eff6a517c8abaebff893a60399 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage decreased (-0.06%) to 51.877% when pulling c3a52bec8e66f0898f269dde302c9514b5750a8f on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage increased (+0.006%) to 51.947% when pulling c3a52bec8e66f0898f269dde302c9514b5750a8f on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage increased (+0.06%) to 51.999% when pulling 68843a6781158a5f4862b767f0b7e9a355d6eed6 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage increased (+0.2%) to 52.172% when pulling a4440a8cda02d2234d33105776eba680a432d8e1 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage increased (+0.006%) to 51.947% when pulling aa6ee0410a153a1a26a5a98ee30676506a73c40a on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage decreased (-0.06%) to 51.877% when pulling 94fbe397d957a45844a1b46e958f567421460784 on release-2.2.0-updates into 4e25f57b3991bd7c1cea0dc9ee06b0c4e2626e1c on release-2.2.0.\n. \nCoverage increased (+0.5%) to 52.265% when pulling 42b0462f1b690af3b3ab8f64332a4161d520f875 on issue-4046 into 146110c429b5c8bb612ee1959f337cd0ccca8b4e on release-2.2.0.\n. \nCoverage increased (+0.1%) to 52.255% when pulling f0ea59ccfa6aeee97582c66314351ccb0a3cfce9 on issue-4207 into 10d2406a12bb1d49e36f48977a711f398cec0bca on release-2.2.0.\n. \nCoverage increased (+0.07%) to 51.816% when pulling 60e2053e2646857d28ce69f7988e7d14c71fca15 on release-2.2.0-issue-4165 into 0fe4a9cc3e0a3aaf8e1919ddd27746ace73f3441 on release-2.2.0-updates.\n. \nCoverage increased (+0.3%) to 52.043% when pulling 60e2053e2646857d28ce69f7988e7d14c71fca15 on release-2.2.0-issue-4165 into 0fe4a9cc3e0a3aaf8e1919ddd27746ace73f3441 on release-2.2.0-updates.\n. \nCoverage increased (+0.07%) to 51.816% when pulling cdc730afa9228305d55bc2bac97b95a64bfa1410 on release-2.2.0-issue-4165 into 0fe4a9cc3e0a3aaf8e1919ddd27746ace73f3441 on release-2.2.0-updates.\n. \nCoverage remained the same at 51.746% when pulling cdc730afa9228305d55bc2bac97b95a64bfa1410 on release-2.2.0-issue-4165 into 0fe4a9cc3e0a3aaf8e1919ddd27746ace73f3441 on release-2.2.0-updates.\n. \nCoverage increased (+0.3%) to 52.456% when pulling 5faf686709a769ae159a904186d1050aa653dda7 on issue4185-bgcolor into 10d2406a12bb1d49e36f48977a711f398cec0bca on release-2.2.0.\n. \nCoverage decreased (-0.06%) to 52.499% when pulling 9a24ab8f621aa10a0f261246104985fb43737d3d on issue3987 into 73de16f51025d188fc000938c14b2db5a830c522 on release-2.2.0.\n. \nCoverage decreased (-0.3%) to 52.263% when pulling 2a66242d887fdf22cf84883ec3e5f8f75e8d83ab on issue3987 into 73de16f51025d188fc000938c14b2db5a830c522 on release-2.2.0.\n. \nCoverage decreased (-0.2%) to 52.304% when pulling 8eb743cea00f19c6318452ae9c0d037b57ddc09d on issue-4175-release-2.2.0 into 9dced7c47c49730964d23a516c0ffd42af170ac4 on release-2.2.0.\n. \nCoverage decreased (-0.07%) to 52.172% when pulling 25c20d981724ee9eed8f2108726a6cc3194fa6fe on release-2.2.0-updates into d27d334d920b4add5102b52f74ccfd8081ba8ed3 on release-2.2.0.\n. \nCoverage decreased (-0.1%) to 51.843% when pulling 957cfbda12f25addd80e086d9d139c1e6606aa19 on issue4221 into 83d96a7436a238c0c3792fc6b6fdaa1d68780e66 on release-2.2.0.\n. \nCoverage remained the same at 51.947% when pulling a7195724acaaa773ddbaa5e4731efd0bab3caa9e on issue4221 into 83d96a7436a238c0c3792fc6b6fdaa1d68780e66 on release-2.2.0.\n. \nCoverage increased (+0.3%) to 52.172% when pulling e14193af1c0fd045e7f8c77401ae829bf3247f68 on issue-4222 into 17e9ab10520ae2f04a244287c552d592ab506627 on release-2.2.0.\n. \nCoverage increased (+0.1%) to 51.947% when pulling 7b79bae0393d5c5c6c880ae858eca8c0a3704a4b on release-2.2.0-issue-4226 into 3ed8ee903848080e9c9ef3fa6b3ca3a75a215e90 on release-2.2.0.\n. \nCoverage increased (+0.07%) to 51.947% when pulling 064e504af1a87713f93bec709c3ccfb4c3531fe6 on issue4229 into 7a542560283c146d10004fc78d1f19007a0ed9bb on release-2.2.0.\n. \nCoverage increased (+0.02%) to 51.947% when pulling cf902c7f09316110b12de15c87005462ad21a04a on feature/pac-url-no-cache into d38f70f3d5e585338ab82666f453812b81ff1532 on release-2.2.0.\n. \nCoverage increased (+0.3%) to 52.206% when pulling 65849ad338faf3f34261f9370d048370b69cd08e on feature/pac-url-no-cache into d38f70f3d5e585338ab82666f453812b81ff1532 on release-2.2.0.\n. \nCoverage increased (+0.03%) to 71.405% when pulling fb39ee52c0c693066eb5a1e3eb07ffce2d2a88b6 on release-2.2.0-devel-merge into 4020b427218dc87b6efcebb754fd33c8ef18217f on devel.\n. \nCoverage increased (+0.3%) to 71.63% when pulling 29203b12b9c378a347cc0eb1c2029a0f31d5c334 on release-2.2.0-devel-merge into 4020b427218dc87b6efcebb754fd33c8ef18217f on devel.\n. \nCoverage decreased (-0.3%) to 71.031% when pulling 27ab6abeffd89c9288e300c1a46d0bf6be170101 on issue4172 into 4020b427218dc87b6efcebb754fd33c8ef18217f on devel.\n. \nCoverage decreased (-0.7%) to 70.718% when pulling 2005d825b279805a625edc33a86c4d6445983bd7 on issue4172 into 4020b427218dc87b6efcebb754fd33c8ef18217f on devel.\n. \nCoverage decreased (-0.4%) to 70.976% when pulling 2005d825b279805a625edc33a86c4d6445983bd7 on issue4172 into 4020b427218dc87b6efcebb754fd33c8ef18217f on devel.\n. \nCoverage decreased (-0.3%) to 71.031% when pulling e15c8e3e8b52236704fea5d3026114fd07567ed1 on issue4172 into 4020b427218dc87b6efcebb754fd33c8ef18217f on devel.\n. \nCoverage increased (+0.06%) to 71.278% when pulling 1524233fd7eef76b34aa7f886b30f04e14ad2459 on issue4172 into 46b531450f4f7f2d45d116e291d9cc88a2e11b87 on devel.\n. \nCoverage decreased (-0.05%) to 71.167% when pulling 2c9d46f5e7d210f7b60daa34604be1062365c886 on issue4172 into 46b531450f4f7f2d45d116e291d9cc88a2e11b87 on devel.\n. \nCoverage increased (+0.1%) to 71.317% when pulling 2c9d46f5e7d210f7b60daa34604be1062365c886 on issue4172 into 46b531450f4f7f2d45d116e291d9cc88a2e11b87 on devel.\n. \nCoverage increased (+0.3%) to 71.98% when pulling 41e6b20b32e856222fbf8da4e125afcd2243ef3a on issue4172 into e0a57ed1299edc893c6caff2e7ad22453907732f on devel.\n. \nCoverage decreased (-0.05%) to 51.877% when pulling c3ca7237204884fffe0fe65ce67757ac1be326e2 on release-2.2.0-switch-to-glide into d38f70f3d5e585338ab82666f453812b81ff1532 on release-2.2.0.\n. \nCoverage increased (+0.2%) to 52.137% when pulling c58de134053f1dd9122c9ee9ffd19a60d9a1e570 on release-2.2.0-switch-to-glide into d38f70f3d5e585338ab82666f453812b81ff1532 on release-2.2.0.\n. \nCoverage increased (+0.02%) to 51.947% when pulling f97b88f53b9af38434a9fc2fcccf80a97d1807e9 on release-2.2.0-switch-to-glide into d38f70f3d5e585338ab82666f453812b81ff1532 on release-2.2.0.\n. \nCoverage increased (+0.02%) to 51.947% when pulling bd75f3023914a2a6642a64f596b24409f5463323 on release-2.2.0-switch-to-glide into d38f70f3d5e585338ab82666f453812b81ff1532 on release-2.2.0.\n. \nCoverage increased (+0.02%) to 51.947% when pulling bd75f3023914a2a6642a64f596b24409f5463323 on release-2.2.0-switch-to-glide into d38f70f3d5e585338ab82666f453812b81ff1532 on release-2.2.0.\n. \nCoverage increased (+0.09%) to 52.016% when pulling 39f37b31b35002ec7dbd2af67dfd9040fdfb8150 on release-2.2.0-switch-to-glide into d38f70f3d5e585338ab82666f453812b81ff1532 on release-2.2.0.\n. \nCoverage increased (+0.3%) to 52.071% when pulling 1ff6bedc1b6d3cf55c9030bbd270eb26b7a97a00 on issue-4246 into 6c18b638388d32881dbfedb6d7e426dccdecfba3 on release-2.2.0.\n. \nCoverage decreased (-0.4%) to 52.071% when pulling a459a69a0bf7066e213ced54b37177a97f2507b3 on issue-4246-ox into 754a411203ca018d63c7ec18982b78e7c6107971 on issue-4246.\n. \nCoverage increased (+0.2%) to 71.761% when pulling f2b70dec438d544294c663b8b548c4e1518e405c on issue4227-ox2 into 2c2afafc4ccbc15bd05768ed31218ec65c37a3eb on devel.\n. \nCoverage increased (+0.8%) to 71.387% when pulling 74bef82170561540747787a33d43c2739fddafb2 on issue4227-ox3 into 87017148824a8c972400c520cb956a390444130c on devel.\n. \nCoverage increased (+9.4%) to 80.968% when pulling 59a381e71b7583df9db871071d1b256609a8ac2c on issue4227-ox3 into f2b48f44aec885571a26169bd75be74ed2d6efe7 on devel.\n. \nCoverage increased (+0.3%) to 71.854% when pulling 704b4cab60dbb9af5a41d5b63cd9e618f177af12 on issue4227-ox3 into f2b48f44aec885571a26169bd75be74ed2d6efe7 on devel.\n. \nCoverage increased (+0.3%) to 71.854% when pulling 704b4cab60dbb9af5a41d5b63cd9e618f177af12 on issue4227-ox3 into f2b48f44aec885571a26169bd75be74ed2d6efe7 on devel.\n. \nCoverage increased (+0.2%) to 71.769% when pulling d0fb5f8ee27e3a990518c6960ba6e2f6275401bc on issue4227-ox3 into f2b48f44aec885571a26169bd75be74ed2d6efe7 on devel.\n. \nCoverage increased (+0.07%) to 71.656% when pulling d0fb5f8ee27e3a990518c6960ba6e2f6275401bc on issue4227-ox3 into f2b48f44aec885571a26169bd75be74ed2d6efe7 on devel.\n. \nCoverage increased (+0.06%) to 71.275% when pulling 792bfe2bcf661f2dc94ed34ab802a05b6cb0d2cb on updatemasquerades into 46b531450f4f7f2d45d116e291d9cc88a2e11b87 on devel.\n. \nCoverage increased (+0.09%) to 71.312% when pulling ccd379229bf38b2fd90792a1af6ab4dd688c4090 on add-package-android-to-Makefile into 46b531450f4f7f2d45d116e291d9cc88a2e11b87 on devel.\n. \nCoverage increased (+0.07%) to 71.294% when pulling de1d8823b612a106284be41a8632cdff1833052f on dftransport into 46b531450f4f7f2d45d116e291d9cc88a2e11b87 on devel.\n. \nCoverage increased (+0.3%) to 71.521% when pulling 1ee97a3fe35b37bf291654bd6331f2fc8f7f21ef on dftransport into 2701d7e71b57827945e43b56774a70eb5a7041e7 on devel.\n. \nCoverage increased (+0.2%) to 71.392% when pulling 60ef71659647316a1d4dae63e2b87d2aea114183 on dftransport into 2701d7e71b57827945e43b56774a70eb5a7041e7 on devel.\n. \nCoverage increased (+0.4%) to 71.589% when pulling 2cebc7306a4a352679c586f07813475e0f1be28b on dftransport into 2701d7e71b57827945e43b56774a70eb5a7041e7 on devel.\n. \nCoverage increased (+0.3%) to 71.534% when pulling f2cdc79f057e7f5279793e98b8b8a0ad4d9ec1ee on dftransport into 2701d7e71b57827945e43b56774a70eb5a7041e7 on devel.\n. \nCoverage increased (+0.3%) to 71.478% when pulling f2cdc79f057e7f5279793e98b8b8a0ad4d9ec1ee on dftransport into 2701d7e71b57827945e43b56774a70eb5a7041e7 on devel.\n. \nCoverage increased (+0.4%) to 71.589% when pulling a3c43e0703bdb121d57a9c70ee36e1ff83c9b01c on dftransport into 2701d7e71b57827945e43b56774a70eb5a7041e7 on devel.\n. \nCoverage decreased (-0.08%) to 71.512% when pulling 7d9b7131d051d36febb87a06951ad17e3d6bb6ae on borda-report into f2b48f44aec885571a26169bd75be74ed2d6efe7 on devel.\n. \nCoverage decreased (-0.2%) to 71.395% when pulling 7d9b7131d051d36febb87a06951ad17e3d6bb6ae on borda-report into f2b48f44aec885571a26169bd75be74ed2d6efe7 on devel.\n. \nCoverage decreased (-0.2%) to 71.423% when pulling 06187d43f510d0d4e14b484b6c07db60a3c77c2c on borda-report into f2b48f44aec885571a26169bd75be74ed2d6efe7 on devel.\n. \nCoverage increased (+0.2%) to 72.015% when pulling bc10f0afdf5c8084f33e586fee0b77e7a2c296fe on contextlog into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.2%) to 71.622% when pulling b67268a0ecddc9755bd60d83676fd4440bd629cb on gls into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage increased (+0.09%) to 71.942% when pulling 46e33d2ae33628eb051d8fdc2c66880a5ee160ac on gls into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage increased (+0.2%) to 72.043% when pulling dd72f923c4dab0b31f09bf1070d6d08e36663fd5 on gls into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage increased (+0.3%) to 72.123% when pulling ce7f04cd7f911b8d1d2467f01e549c46ee923912 on context into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.3%) to 71.553% when pulling ce7f04cd7f911b8d1d2467f01e549c46ee923912 on context into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage increased (+0.04%) to 71.892% when pulling ce7f04cd7f911b8d1d2467f01e549c46ee923912 on context into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.3%) to 71.599% when pulling 25bec38dfbc3a92a4a52ff32ea554f59182ba4d0 on context into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage increased (+0.3%) to 72.115% when pulling 25bec38dfbc3a92a4a52ff32ea554f59182ba4d0 on context into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.3%) to 71.546% when pulling ca4d35fdaf0d5501ffc03bfd02f06485ceb5427e on context into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage increased (+0.5%) to 72.325% when pulling b32800e7f3e5cec23677d7a99a776715ebebf473 on context into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.7%) to 71.115% when pulling afc0f3bb8626ea865ad17875812d2fa5cddfa61f on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.8%) to 71.079% when pulling afc0f3bb8626ea865ad17875812d2fa5cddfa61f on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.4%) to 71.426% when pulling 47b3c2d46805dc52054fbdb058585fe853e88486 on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.5%) to 71.336% when pulling 5fb74e21924af886dda85930bd3177edba53dea4 on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.3%) to 71.552% when pulling 5fb74e21924af886dda85930bd3177edba53dea4 on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.3%) to 71.588% when pulling 5fb74e21924af886dda85930bd3177edba53dea4 on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.6%) to 71.21% when pulling b2f57fe02a88fb925ace3df58ff9c1dc776882e8 on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.6%) to 71.228% when pulling 0dbc6f5295409cd50a67cb8d6267b5e687285bda on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.8%) to 71.048% when pulling 0dbc6f5295409cd50a67cb8d6267b5e687285bda on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.4%) to 71.408% when pulling 0dbc6f5295409cd50a67cb8d6267b5e687285bda on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.5%) to 71.336% when pulling 0dbc6f5295409cd50a67cb8d6267b5e687285bda on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.4%) to 71.462% when pulling b582648e8e7f300407ea277265f10815b36ac31c on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.9%) to 70.976% when pulling b582648e8e7f300407ea277265f10815b36ac31c on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.4%) to 71.498% when pulling 6fefef69df4086481fbf5e78ae2dd0fee2fc27ae on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.5%) to 71.38% when pulling 67b4ede0768ed67c31cbe123660dcb8c935cf845 on android-auto-updates into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.5%) to 71.346% when pulling d4fb3eb9748c70c9114603406fb3276e73551ea0 on issue4168 into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage increased (+0.6%) to 72.708% when pulling 59fd32b1a6cabe4755c49892939435c746c4c483 on context-full-inuse into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.7%) to 72.774% when pulling 78a0a2d1aa22e035fbd13996853fdcc42745038d on context-full-inuse into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.1%) to 72.205% when pulling 9b5a1050069d7ba4daa6c267eb758f364d584d0b on context-full-inuse into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.3%) to 72.388% when pulling 59a4e3af3881d7b07f575c3152e1d8218d89ccbc on context-full-inuse into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.6%) to 72.721% when pulling 5d3042a68ec621b875117640f7ceb670797ac6f7 on context-full-inuse into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.6%) to 72.721% when pulling 4aeebcfcb971e01a878a2196a6a113bae9a486d8 on context-full-inuse into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.4%) to 72.438% when pulling 154620b5edc20497267cadd0d0756f30d5837bcd on context-full-inuse into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage decreased (-0.1%) to 52.0% when pulling 6972b66e9bd76b752434dc3e6e78809007f6f164 on issue-4315 into b1ac4f520f7d7b49f1c68f371f03c349d7f13d54 on release-2.2.0.\n. \nCoverage decreased (-0.1%) to 52.017% when pulling 6972b66e9bd76b752434dc3e6e78809007f6f164 on issue-4315 into b1ac4f520f7d7b49f1c68f371f03c349d7f13d54 on release-2.2.0.\n. \nCoverage decreased (-0.2%) to 51.966% when pulling 31476aec71205a7d6e1ec8edbe6ce9eda805ec96 on issue-4315 into b1ac4f520f7d7b49f1c68f371f03c349d7f13d54 on release-2.2.0.\n. \nCoverage decreased (-0.2%) to 51.891% when pulling 6ba8a001576373efcafda8b5dfd5b0df5b5a14b4 on issue-4315 into b1ac4f520f7d7b49f1c68f371f03c349d7f13d54 on release-2.2.0.\n. \nCoverage decreased (-0.03%) to 71.826% when pulling 126a825785bb8e916626d3de233187b166d3f9bb on release-2.2.0-analytics-merge into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage decreased (-0.5%) to 71.32% when pulling 126a825785bb8e916626d3de233187b166d3f9bb on release-2.2.0-analytics-merge into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on devel.\n. \nCoverage increased (+0.1%) to 71.778% when pulling 40341f69c4766d38bc9c6cd1a2bf26483b420b92 on issue4268 into 63086bccfd6b3ef60694f356f462f5c5b90aa69b on devel.\n. \nCoverage decreased (-0.7%) to 70.996% when pulling 032dfcc35d3683d2a9eed6287797cb843b8dcc75 on issue4268 into 63086bccfd6b3ef60694f356f462f5c5b90aa69b on devel.\n. \nCoverage decreased (-0.3%) to 71.745% when pulling 6086c1e3fbbf9c6de0f84df342bbe7f5fea1f7e1 on issue4268 into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.6%) to 72.679% when pulling b6fcb48776747a77820eaf12584fbcfe363ce624 on issue4268 into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.5%) to 72.574% when pulling 258aa0bbaa656fc13b1d1ccb2114d468968a1d85 on issue4268 into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.2%) to 71.89% when pulling a994246dddb38f01a25b0db2ed1bbbbfa462ebb4 on issue-4319 into 63086bccfd6b3ef60694f356f462f5c5b90aa69b on devel.\n. \nCoverage decreased (-0.4%) to 71.439% when pulling cf42c1ece66043e74f41d5d2831d0e032c0295a5 on issue-4327 into 5218d29127d086055cdfba05ab8e2e889ee4412f on devel.\n. \nCoverage decreased (-0.1%) to 71.711% when pulling cf42c1ece66043e74f41d5d2831d0e032c0295a5 on issue-4327 into 5218d29127d086055cdfba05ab8e2e889ee4412f on devel.\n. \nCoverage increased (+0.07%) to 71.92% when pulling 56f08c4c2ed5a2653c75b3e7de52e745595892b1 on user-id-back-to-int into 5218d29127d086055cdfba05ab8e2e889ee4412f on devel.\n. \nCoverage increased (+0.08%) to 71.938% when pulling 2f525b72b97f8efd9fae5c6250ff11ee69002a4f on user-id-back-to-int into 5218d29127d086055cdfba05ab8e2e889ee4412f on devel.\n. \nCoverage increased (+0.2%) to 72.073% when pulling 214e2822948dac3a36f56714a72fb01055d231bf on user-id-back-to-int into 5218d29127d086055cdfba05ab8e2e889ee4412f on devel.\n. \nCoverage increased (+0.2%) to 72.042% when pulling f50fce3200f87fb781a76b99f38fbc08318be61b on user-id-back-to-int into 5218d29127d086055cdfba05ab8e2e889ee4412f on devel.\n. \nCoverage increased (+0.1%) to 71.99% when pulling 4b401ed94af741a7b6fe9f98a3dfd5fe29e4cd1d on user-id-back-to-int into 5218d29127d086055cdfba05ab8e2e889ee4412f on devel.\n. \nCoverage increased (+0.04%) to 71.764% when pulling 4be85f04453bb605a8ad018f97362fe565efe9fb on issue4147 into 3e2f1c5fd709b28717807a72f83c9aa118654d42 on release-2.3.0.\n. \nCoverage increased (+0.3%) to 72.362% when pulling aabeab10ee1688f0302fdf492452200f93f7ef4d on ops into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.09%) to 72.171% when pulling 923d95ac393986d92aee8efc31c34aac8d246c33 on ops into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage decreased (-0.04%) to 72.044% when pulling 923d95ac393986d92aee8efc31c34aac8d246c33 on ops into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.4%) to 72.47% when pulling 6976adb6c94a2516d2264e9b04729f37041e52a9 on ops into 0197842362b4c8ff21e32637a13a31954a6d62ee on devel.\n. \nCoverage increased (+0.4%) to 72.433% when pulling 5a318939ad13ca311613e3a01afd7774ff64ac7f on ops into 0197842362b4c8ff21e32637a13a31954a6d62ee on devel.\n. \nCoverage increased (+0.2%) to 72.286% when pulling e1bb12c78866be48a0f23d8d9c1d768f0a311a85 on ops into 0197842362b4c8ff21e32637a13a31954a6d62ee on devel.\n. \nCoverage decreased (-0.5%) to 72.442% when pulling a1f5c144ad9b9cdf3b12fedd3d5ac5aa93ea02d9 on ops into 1eecf18071140f743dbfaf1ec040ebe61b8b2bf3 on devel.\n. \nCoverage decreased (-0.2%) to 72.608% when pulling ac9b0736a7c1cdfede6283b82b7d0e2830feefc7 on ops into b24d1204cf7e3232e2f0b0cde030a702ac0e2ab2 on devel.\n. \nCoverage increased (+0.2%) to 72.992% when pulling 3ca77ec112c14d48e60b34758b585656d195acae on ops into b24d1204cf7e3232e2f0b0cde030a702ac0e2ab2 on devel.\n. \nCoverage decreased (-0.6%) to 71.501% when pulling 4fe5efbb509241e8741afbb27022e0d0b24108e8 on issue-4362 into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.1%) to 72.229% when pulling 4fe5efbb509241e8741afbb27022e0d0b24108e8 on issue-4362 into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage decreased (-0.06%) to 72.025% when pulling 77e6498182b95b6cab695774bb78935286e9416e on issue-4362 into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.2%) to 72.305% when pulling 05208bff0444998a4e457abdf686eb2aaee42beb on issue-4362 into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage increased (+0.2%) to 72.295% when pulling 2bf3961a9c5f26d46085600a6e78cc9d2bbcbfb5 on issue-4362 into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage decreased (-0.3%) to 71.754% when pulling b2c022d399ea3021e9d663e8a3756f14c7368d10 on issue-4362 into ec9f7f4fb5d5fe16612f87674619ee8b35b17c3e on devel.\n. \nCoverage decreased (-0.2%) to 71.874% when pulling e33b07f20cec654995d64df5cc088585802855fe on issue4193 into 0197842362b4c8ff21e32637a13a31954a6d62ee on devel.\n. \nCoverage decreased (-0.4%) to 71.663% when pulling 581eef6d3889d07d50a704a9eea4f52cc583a5d6 on no-proxiedsites-to-ui into 0197842362b4c8ff21e32637a13a31954a6d62ee on devel.\n. \nCoverage decreased (-0.06%) to 72.511% when pulling 374cd38ec9da1abd7f06161e99cb17c5af1507e0 on issue4268-fix into 9ba90c9b51406c1b65affa51a5c4d37d95ef2696 on devel.\n. \nCoverage decreased (-0.1%) to 72.326% when pulling 2db534b305fde4218c5c361d8590f620a8d54429 on issue4268-fix into b5dc5adc4e66e0c5551bd4da50e7bf459dbe6860 on devel.\n. \nCoverage increased (+0.4%) to 72.912% when pulling a035d06fd32bbd046620e163f82774d1210d40f6 on issue4268-fix into 48779dec080a426fbddee582e542e1de55702446 on devel.\n. \nCoverage increased (+0.4%) to 72.877% when pulling ef5da721446000707f58a4b9b854803086b678ad on issue4268-fix into 48779dec080a426fbddee582e542e1de55702446 on devel.\n. \nCoverage increased (+0.2%) to 72.68% when pulling 6c95531636f23f480194d3ebfa11eeec0af57f15 on revert-4378-issue4193 into b5dc5adc4e66e0c5551bd4da50e7bf459dbe6860 on devel.\n. \nCoverage increased (+0.3%) to 72.781% when pulling e33b07f20cec654995d64df5cc088585802855fe on issue4193 into b5dc5adc4e66e0c5551bd4da50e7bf459dbe6860 on devel.\n. \nCoverage increased (+0.5%) to 72.921% when pulling dc8f6581ea6fd50785bd971528f21d3d42ed5976 on issue4193 into b5dc5adc4e66e0c5551bd4da50e7bf459dbe6860 on devel.\n. \nCoverage decreased (-0.003%) to 71.781% when pulling bd55306171058790ea6644baf2ab57d0642ef1c5 on issue4193-fffw into e33b07f20cec654995d64df5cc088585802855fe on issue4193.\n. \nCoverage decreased (-0.3%) to 72.495% when pulling 99be1cca2f5d13fd4d26d7214e04201e067292dc on issue-4428 into 74f0d448e9d70c7a08451d5eea5c39110768751d on devel.\n. \nCoverage decreased (-0.05%) to 72.681% when pulling e46a887241e32add6c91e1de1f64a17119e4a882 on issue-4435 into 567d40c575cf8fa2f810e687bc41aad896ad5416 on devel.\n. \nChanges Unknown when pulling 33a7932014a53c0cec60c060121df53f826dd08b on whitelistchained into * on devel*.\n. \nChanges Unknown when pulling fcf41ffa63aeee1b1db0befd4087272d1b6aa036 on issue-4519 into * on devel*.\n. \nCoverage decreased (-0.1%) to 72.858% when pulling f7ddb21870ea6753d2e861e7f5c24c2e5e2c1935 on issue-4500 into 1eecf18071140f743dbfaf1ec040ebe61b8b2bf3 on devel.\n. \nCoverage decreased (-0.05%) to 72.91% when pulling 5a09690475f8c9f8ae528af76df626a87f188cf7 on chained-test-default into 1eecf18071140f743dbfaf1ec040ebe61b8b2bf3 on devel.\n. \nCoverage remained the same at 72.963% when pulling 704332cc34c18788d00364c9e6bf6dd6c81e8b25 on chained-test-default into 1eecf18071140f743dbfaf1ec040ebe61b8b2bf3 on devel.\n. \nCoverage increased (+0.03%) to 72.991% when pulling 7071b32923e11c24ad6bbd765a6b335678b1a16c on tlscaching into 1eecf18071140f743dbfaf1ec040ebe61b8b2bf3 on devel.\n. \nCoverage increased (+0.3%) to 73.261% when pulling 43b2fb7f979cb37368d9524b3cad7d702b7045f6 on connleak into f32e1d0f46c2707b4cfdae15c86ef9d43b805ba5 on devel.\n. \nCoverage decreased (-0.2%) to 72.79% when pulling 43b2fb7f979cb37368d9524b3cad7d702b7045f6 on connleak into f32e1d0f46c2707b4cfdae15c86ef9d43b805ba5 on devel.\n. \nCoverage increased (+0.3%) to 73.279% when pulling 356c7b585fa6ee5bf8772149d4dc1a57043e47c6 on connleak into f32e1d0f46c2707b4cfdae15c86ef9d43b805ba5 on devel.\n. \nCoverage increased (+0.1%) to 73.182% when pulling 5c2f9f02fbdbe56d06f9aabcb7f479b7b9216340 on fasttest into 411e6228eb44c12df39af161922bc0fbd08070d5 on devel.\n. \nCoverage increased (+0.1%) to 73.202% when pulling 54b0269d0c143e3299a2d26bbf32ff5f90c5f9f8 on respectsticky into 411e6228eb44c12df39af161922bc0fbd08070d5 on devel.\n. \nCoverage increased (+0.6%) to 73.284% when pulling 62cedd3ea7de18ea49da7e4aec3ad6834752807d on issue4554 into 109042c0cc6438a55e1b9d5e935d567315487b5c on devel.\n. \nCoverage increased (+0.6%) to 73.368% when pulling 62cedd3ea7de18ea49da7e4aec3ad6834752807d on issue4554 into 109042c0cc6438a55e1b9d5e935d567315487b5c on devel.\n. \nCoverage increased (+0.5%) to 73.27% when pulling 3193d87c1436856795aee4f86bbcbdcccd025d95 on issue4554 into 109042c0cc6438a55e1b9d5e935d567315487b5c on devel.\n. \nCoverage increased (+0.6%) to 73.298% when pulling 3193d87c1436856795aee4f86bbcbdcccd025d95 on issue4554 into 109042c0cc6438a55e1b9d5e935d567315487b5c on devel.\n. \nCoverage increased (+0.03%) to 73.247% when pulling 399037e14d92683c501378c671582fe82137b4ce on issue4633 into bf3bb4bfa5397d4dd85ec6e8f067893831076531 on devel.\n. \nChanges Unknown when pulling 31b04e2d2876ba3941e0e9404391b42cc3c87e2d on feature/patch-for-go into * on devel*.\n. \nCoverage increased (+0.03%) to 73.219% when pulling 287667f5a5ff0074876ee88025870d14279ac37e on feature/patch-for-go into 8b1022e1d9764799fe26cf300368801f0d417021 on devel.\n. \nCoverage increased (+0.6%) to 73.77% when pulling 151ff4e529cfcc87995dcbaa42a480e63e5dd861 on issue4686 into bf3bb4bfa5397d4dd85ec6e8f067893831076531 on devel.\n. \nCoverage increased (+0.2%) to 73.392% when pulling 532a0168e2b3fc93c1a225163ae57e666b66170c on issue4686 into bf3bb4bfa5397d4dd85ec6e8f067893831076531 on devel.\n. \nCoverage increased (+0.2%) to 73.461% when pulling 5ca3b9ddc9dd23dbbf2f04799bf03ab3d092732c on issue4686 into bf3bb4bfa5397d4dd85ec6e8f067893831076531 on devel.\n. \nCoverage decreased (-0.03%) to 73.188% when pulling f9de69cd60102d349b85363c0ce7e279595fa753 on issue4686 into bf3bb4bfa5397d4dd85ec6e8f067893831076531 on devel.\n. \nCoverage decreased (-0.1%) to 73.112% when pulling 5964736239109b74e379132f13b006c4045863a3 on issue4686 into bf3bb4bfa5397d4dd85ec6e8f067893831076531 on devel.\n. \nChanges Unknown when pulling 7bdd91ea10edf597bee73fafba8ae4161344eca7 on fixbakedin into * on devel*.\n. \nCoverage increased (+0.04%) to 73.196% when pulling 02f2ac1a280630569c49d1effd67e9efa167c543 on issue4705 into 58a495a75442da57172c49410c981f19b75113d5 on devel.\n. \nCoverage increased (+0.05%) to 73.201% when pulling 467cffd169425b9b465623a2576cb9e77dd4e827 on issue4705 into 58a495a75442da57172c49410c981f19b75113d5 on devel.\n. \nCoverage decreased (-0.3%) to 72.823% when pulling 958020614efe7564f2cccb9a1e86f5f36eace7d3 on feature/mock-autoupdates into 58a495a75442da57172c49410c981f19b75113d5 on devel.\n. \nCoverage increased (+0.0005%) to 73.071% when pulling 685df37a89767bbbc671bea38dadfa100d9694cb on issue4803 into 7327113dbd2a56298c1f7dd526e43de6a3049bb1 on devel.\n. \nCoverage increased (+0.06%) to 73.133% when pulling 26037bc09c7bc4267463d054a53613d63e2e68ea on issue4803 into 7327113dbd2a56298c1f7dd526e43de6a3049bb1 on devel.\n. \nCoverage increased (+0.07%) to 73.526% when pulling ea6360ca6a0f750fb9bddbb6a0bff8431dc94b2c on issue4803 into fec55ba3f9baabe8d2cdef561b881a2b295c5c22 on devel.\n. \nCoverage increased (+0.04%) to 73.493% when pulling d78e584310db7a4a7820483e4039df69ddfe0dbe on issue4803 into fec55ba3f9baabe8d2cdef561b881a2b295c5c22 on devel.\n. \nCoverage decreased (-0.004%) to 73.45% when pulling d78e584310db7a4a7820483e4039df69ddfe0dbe on issue4803 into fec55ba3f9baabe8d2cdef561b881a2b295c5c22 on devel.\n. \nChanges Unknown when pulling 0ff950722f0fa009338ab9ce3effef2ae4135bc3 on enableborda into * on devel*.\n. \nCoverage increased (+0.2%) to 73.173% when pulling 40c173409c88cc623e0118070668fbc731165fcb on issue4928 into 79a537b83086fb57018046739a06b25a1c67981d on devel.\n. \nCoverage increased (+0.3%) to 73.201% when pulling 40c173409c88cc623e0118070668fbc731165fcb on issue4928 into 79a537b83086fb57018046739a06b25a1c67981d on devel.\n. \nCoverage increased (+0.3%) to 73.242% when pulling 40c173409c88cc623e0118070668fbc731165fcb on issue4928 into 79a537b83086fb57018046739a06b25a1c67981d on devel.\n. \nCoverage decreased (-0.02%) to 73.157% when pulling b19f95bc77baf759bbdbfddb1661ead3404aefbf on issue-3567 into d69f472c0077422995f6651330d3f48f8f1a0361 on devel.\n. \nCoverage increased (+0.08%) to 73.252% when pulling ca708227319c4893f101de35ed22900168b790ea on issue-3567 into d69f472c0077422995f6651330d3f48f8f1a0361 on devel.\n. \nCoverage increased (+0.1%) to 73.507% when pulling 76ef309c7d5e9b470a2ce841685b33d19454a600 on issue-3567 into 6905970cce0e04fe2064c206f85d5ab857bdb220 on devel.\n. \nCoverage increased (+0.1%) to 73.509% when pulling 76ef309c7d5e9b470a2ce841685b33d19454a600 on issue-3567 into 6905970cce0e04fe2064c206f85d5ab857bdb220 on devel.\n. \nCoverage increased (+0.07%) to 73.453% when pulling c2af99cb242b3a192b812442d0dd5c590b4c0444 on issue-3567 into 6905970cce0e04fe2064c206f85d5ab857bdb220 on devel.\n. \nCoverage increased (+0.01%) to 73.187% when pulling 3689a604c2a83c753964fa4f5eee6165e3be0703 on 64bit-alignment into d69f472c0077422995f6651330d3f48f8f1a0361 on devel.\n. \nCoverage increased (+0.2%) to 73.191% when pulling a054b933ce4a26aa4f8ccb97baa6f20bfaad16ce on issue-5075 into 1df15501e3cc0f8aa1d2fd058f3625c2d0ce00e6 on devel.\n. \nCoverage increased (+0.3%) to 73.236% when pulling cec2b12bff514f463bd80346fdf211e33ecbe956 on issue-5075 into 1df15501e3cc0f8aa1d2fd058f3625c2d0ce00e6 on devel.\n. \nCoverage decreased (-0.004%) to 72.977% when pulling 03726f8b67de229e5815da312f95f2c280a6ec67 on issue5089 into 1df15501e3cc0f8aa1d2fd058f3625c2d0ce00e6 on devel.\n. \nCoverage increased (+0.05%) to 73.029% when pulling 03726f8b67de229e5815da312f95f2c280a6ec67 on issue5089 into 1df15501e3cc0f8aa1d2fd058f3625c2d0ce00e6 on devel.\n. \nCoverage increased (+0.05%) to 73.029% when pulling 03726f8b67de229e5815da312f95f2c280a6ec67 on issue5089 into 1df15501e3cc0f8aa1d2fd058f3625c2d0ce00e6 on devel.\n. \nCoverage decreased (-0.2%) to 73.079% when pulling a2021e4a7d295f0a85047034d8c40d4404065fe9 on issue5089 into 041efe9f3c49e5b9726ffb9e986b709ba4642ceb on devel.\n. \nCoverage increased (+0.003%) to 73.239% when pulling 13b2d145d06d7b26b9ced7a50146d388bde238d2 on issue5089 into 041efe9f3c49e5b9726ffb9e986b709ba4642ceb on devel.\n. \nCoverage increased (+0.01%) to 73.249% when pulling 9154a52d3806290fb24450d126c676051c123cac on issue5089 into 041efe9f3c49e5b9726ffb9e986b709ba4642ceb on devel.\n. \nCoverage increased (+0.07%) to 73.304% when pulling 56a4d365992d8c811d2ba2e2cc738c86ba496456 on issue5089 into 041efe9f3c49e5b9726ffb9e986b709ba4642ceb on devel.\n. \nCoverage decreased (-0.01%) to 73.345% when pulling fb5bac898e6440511197cb6802d7e18ec228316a on issue-3567-generated into f326eeee6c8c64e604ef0054778adb08bdfd4486 on issue-3567.\n. \nCoverage increased (+0.002%) to 73.359% when pulling bd822d7bf1629a49dce1627a3b9f23924e7dc862 on issue-3567-generated into f326eeee6c8c64e604ef0054778adb08bdfd4486 on issue-3567.\n. \nCoverage increased (+0.2%) to 73.099% when pulling f6ed9999cae1f0fda94c5a93af43e6b909426ec9 on issue5096 into 03726f8b67de229e5815da312f95f2c280a6ec67 on issue5089.\n. \nCoverage increased (+0.09%) to 73.116% when pulling 2b94cad28838ca99cfee10fe9410ce2b6ff6bcd7 on issue5096 into a2021e4a7d295f0a85047034d8c40d4404065fe9 on issue5089.\n. \nCoverage increased (+0.1%) to 73.144% when pulling 2b94cad28838ca99cfee10fe9410ce2b6ff6bcd7 on issue5096 into a2021e4a7d295f0a85047034d8c40d4404065fe9 on issue5089.\n. \nChanges Unknown when pulling 4cf6126eaff1aa0f6b2f06809c49e62661aa6252 on issue5096 into * on issue5089*.\n. \nCoverage increased (+0.3%) to 73.386% when pulling 4cf6126eaff1aa0f6b2f06809c49e62661aa6252 on issue5096 into 9154a52d3806290fb24450d126c676051c123cac on issue5089.\n. \nCoverage decreased (-0.03%) to 73.464% when pulling 8890624d55b0bce17bc98e32179e9552285cda7b on hotfix/allow-to-overwrite-update-url into 331729195468dc9cc3fad2a667488624f36c7e91 on devel.\n. \nCoverage increased (+0.1%) to 73.624% when pulling 3794255c439f36d1e87400301d8ebf9593006d9f on cfscanner into 73e03762e328d6301a9fb39771acd764741ece67 on devel.\n. ",
    "fffw": "Only one process can gain the access through SCPreferencesLock(), so race condition will not be incurred. Pass TRUE as second parameter will wait for other process to unlock.\nYou revealed another issue that I should only commit and apply preferences once, rather that in the loop.\n. Wow. Hope it works without trouble.\n\nMerlin Ran\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\nOn Saturday, January 10, 2015 at 7:00 AM, myleshorton wrote:\n\nMerged #2149 (https://github.com/getlantern/lantern/pull/2149).\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/getlantern/lantern/pull/2149#event-216812470).\n. Oh I'm sorry for not mention you @silentmoose. Maybe I replied you in the original issue that it is targeting the new Go code?\n\nAlthough issues are tracked here, new PRs are under https://github.com/getlantern/flashlight-build except bug fixes for Lantern v1.x. It would be great if you have interest in it.\n. Well, idletiming is more bulletproof. Please hold on while I checking why it didn't work.\n. @xiam would you like to take a look? It's related to https://github.com/getlantern/lantern/pull/2424\n. @xiam Thanks for your clarification, I reset the PR to just add trusted field to server info.\n. @xiam My pleasure to have a chance to learn this bunch of code.\n. @xiam Changes are pretty good to me.\nI have 2 trivial suggestions which are unrelated to this PR's intention, it's fairly ok to merge without them, but would be good if we can adopt.\n-  Some methods can be made private, such as GetReleases and GeneratePatch\n-  bsdiff is not available on Mac, a reference to http://www.daemonology.net/bsdiff/ or an instruction brew install bsdiff in README would be good.\n. LGTM. Thanks @xiam \n. Text is only in English. A link to Google Chrome is ok here as Lantern is already running.\nBelow is what it looks like on IE 8\n\n. Would you like to take a look @atavism ?\n. I just modified sass/_general.sass and app/index.html, all other files are generated or copied automatically. app.css is generated from sass files, and dist/index.html is copied from app/index.html.\nI think these two files might not be properly updated previously.\n. @xiam It might not be the case as OS itself has timeouts to establish a connection. But I agree to hold on this PR and dig deeper to find the root cause of frequent timeouts (cloud config fetcher didn't have so many errors).\n. @xiam Thanks for mention it. Let's keep watching\n. In general, I think each OS should have a timeout during TCP SYN phase. I just googled a bit.\nOn *nix, timeout for non-established TCP connections can be obtain throughsysctl net.inet.tcp.keepinit, which defaults to 75000 ms.\nThe value differs among Windows versions. https://support.microsoft.com/en-us/kb/170359 has some explanation.\nA consistent timeout would be good, but I think it might be better to be applied on dialer and connection, rather than http.Client. At least, \"i/o timeout\" is more meaningful than \"net/http: request canceled while waiting for connection\"\n. I greped all occurrences of UnknownAuthorityError in go source code.\n./crypto/x509/root_windows.go:92:           return UnknownAuthorityError{c, nil, nil}\n./crypto/x509/root_windows.go:132:          return UnknownAuthorityError{c, nil, nil}\n./crypto/x509/root_windows.go:134:          return UnknownAuthorityError{c, nil, nil}\n./crypto/x509/verify.go:92:// UnknownAuthorityError results when the certificate issuer is unknown\n./crypto/x509/verify.go:93:type UnknownAuthorityError struct {\n./crypto/x509/verify.go:103:func (e UnknownAuthorityError) Error() string {\n./crypto/x509/verify.go:319:        err = UnknownAuthorityError{c, hintErr, hintCert}\nIt seems that the only place which triggers this error is at https://golang.org/src/crypto/x509/verify.go#L319. hintErr and hintCert should have been filled and UnknownAuthorityError should print more info if hintErr is not nil. But we didn't get any hint printed. TBH I don't know what it implies.\n. @xiam I would like using type assertion trick.\nCode is good to me in general, so I just added a new commit to your branch. Could you just review the change I made?\n. LGTM. Merging\n. both %q and %v will add a quotation mark around the error message, %s might be more appropriate.\n. Great catch @atavism ! I believe we can apply it somewhere else. Merging.\n. @myleshorton The flow is good in general. I changed a bit to remove superfluous DetailPrint in some cases. You can merge it if you think my changes are ok.\n. Ok, now it works fine on Chrome, Firefox and IE 11. @myleshorton Would you like to take a look?\n. Oh I forgot to mention. The Facebook share button did take a long time to load or not load at all sometimes. It took 1.8 min to load during my last test.\nThe warning doesn't prevent the button from being shown, but maybe an App Id can accelerate it? Let me have a try.\n. Facebook button opens super fast once we supply an App Id.\nLet me checking https://github.com/getlantern/lantern/issues/2509 and try to resolve it in same PR.\n. https://github.com/getlantern/lantern/issues/2509 seems fixed by this PR.\n. Oh wait!  When I change proxyall option from true to false when Lantern is running, it triggers \"send on closed channel\" panic described in https://github.com/getlantern/lantern/issues/2500 . Good news is --- it's reproducible.\nChanging this option from false to true works without causing panic.\n. Oh let me double check if it actually works!\n. @myleshorton Used channel for exit functions as per your suggestion. Please take a look once you have time, thanks.\n. Thanks! @aranhoide \n. LGTM, merging.\n. Sure @myleshorton. I'm not sure if @atavism has any special consideration to not use getlantern/golog, but it should be easy to revert it back if it's the case.\n. Oh thanks @atavism for reviewing it. Leaved for a while at noon. Trying the new version of FT...\n. LGTM\n. @atavism I created a small PR for a few suggestions.\n. Could you create an issue with the command outputs and description @yejingchen so we can track it independently?\n. This resolves https://github.com/getlantern/lantern/issues/2314\n. @aranhoide It's client side only\n. LGTM. Thanks for tracing hard.\n. Manual verification checklist\n- [ ] test effectiveness of each cli options\n- [ ] check if any reference to renamed cli options\n- [ ] cli precedes everything else but doesn\u2019t presist\n- [ ] setting page can save to yaml\n- [ ] yam should not override cloud ones\n- [ ] separated cloud.yaml to override cloud ones\n- [ ] thread safety\n- [ ] each components work well and can be reconfigured\n  - [ ] statsreporter\n  - [ ] autoupdate\n  - [ ] loggly\n  - [ ] geolookup\n  - [ ] proxiedsites\n  - [ ] analytics\n  - [ ] statserver\n  - [ ] config itself using hqfd\n  - [ ] client\n  - [ ] server!!!\n. Yes I also think so now @myleshorton . I was originally thinking that by stopping passing around config object we gain more flexibility on further changes, but at the same time we lose the benefits of static type checking, and the changes affects nearly each component of flashlight. I'll limit the changes inside config component and only separate cloud config from local one.\nAs we still need to maintain local config dynamically (manually editing or through lantern-ui), one implementation would be to keep using yamlconf for existing lantern.yaml, and totally separate cloud config from it.\nI'll submit a new PR and close this one once new code is ready.\n. Created new PR at https://github.com/getlantern/lantern/pull/2680, close this one.\n. @atavism your changes are relatively small and quick. Please just proceed and I can merge it afterwards.\n. Code LGTM. I also built android-lib successfully. Thanks @atavism \n. Good catch @uaalto ! Merging.\n. LGTM!\n. @myleshorton can you take a look? It is intended to merge to beta 6.\n. ECONNREFUSED is returned on Android if connection is reset, I guess it may also happen in other circumstances we don't know. Accessing to an non-exist port is rare and sending the request via proxy does little harm.\nECONNRESET is really hard to simulate, it would be good to have a way to substitute.\n. Tested both make packages and make android-lib, works pretty well. Ideally we can check for the timestamp of the three generated files to avoid unnecessary rerun of genconfig, but as it happens rarely, I think it's ok to rerun each time. Merging.\n. Still needs to apply cloud config defaults separately. Pending.\n. Newly generated lantern.yaml will still contain those empty fields (nil or []), and any modification on these fields will not take effect.\n. @myleshorton Mind taking a look at this one?\n. @myleshorton Maybe I didn't understand the difference of \"settings\" and \"configuration\" here. In this PR, cloud config items is indeed separated from local mutable ones, except that they co-existed in the same Config object. If what you mean is to further split the two and use separate logic for them, I'd prefer to make each item totally independent, so each sub-component can retrieve only what it cares and get notified when they changes.\nWhat yamlconf did and still does is to monitor the changes of mutable values in lantern.yaml, and to write any changes from Lantern UI to it. Once we removed yamlconf, we still need to do both manually.  In my previous attempt, I used fsnotify to keep track of file changes, and wrote YAML file manually. Is that the way you think?\n. @myleshorton I like the idea of simplification, but might better take small\nsteps?\nOne concern is that if there's a clear dividing line between \"settings\" and\n\"configuration\" to sub-components. For example, client.Configure\ncares about MinQOS and ProxyAll, as well as TrustedCAs. ProxyAll is\nsomething user cares about, but MinQOS? Similar for reportingPeriod and\nstatshubAddr of statshub. To me, the distinction should be at the driver\nlevel, not sub-component level.\n. I just found that versioned config file didn't persist user changes such as \"proxyall\" across versions. Considering auto-update, this may make user confusing.\nAnyway, this PR can be closed. We can have much simpler implementation.\n. Signed upnpc.exe is only complained by ESET-NOD32, and lantern binary also has only one complaint.\n@myleshorton Mind take a quick look?\n. If this is specific to Manoto, can we add another build flag so we can tweak Makefile to build 2 binaries, one for Manoto and one for others?\n. And, Manoto page will open each time when you click \"Show Lantern\", not the\nfirst time, which disturbs user a lot. @myleshorton, is this what Manoto\nasked for or unintentionally?\n. LGTM!\n. @atavism I just added the updated files generated by UPDATE_DIST=true make genassets to repo, to avoid the risk of not running it during followup build.\n. Oh, another issue, the bookmarks will cover the Lantern logo and title. Will create another PR on it.\n. Two concerns:\n1. Round() seems a bit over skill. A format like \"100m30s\" is enough, we can inspect the millisecond part from timestamp.\n2. The running time will also send to Loggly, which is undesired.\nInspired by your method, I created another PR https://github.com/getlantern/lantern/pull/2755 to change flashlight/logging instead. Log items looks like below, which is more clear and uniform. @atavism How do you think?\nJul 17 05:24:40.807 - 3m36s DEBUG balancer: balancer.go:96 Dialing tcp://clients6.google.com:443 with (trusted) chained proxy at 188.166.60.45:443\nJul 17 05:24:42.001 - 3m38s DEBUG fronted: dialer.go:231 Dialing geo.getiantem.org:80 with direct domain fronter\nJul 17 05:24:42.778 - 3m38s DEBUG balancer: balancer.go:96 Dialing tcp://pki.google.com:80 with (trusted) chained proxy at 188.166.21.122:443\nJul 17 05:24:44.403 - 3m40s DEBUG balancer: balancer.go:96 Dialing tcp://github.com:443 with (trusted) chained proxy at 188.166.28.27:443\n. @uaalto The comment you mentioned is introduced in https://github.com/getlantern/lantern/commit/4ce2d7a5f3cf03deb2e1af5db952e38760007892 as an attempt to fix the \"too many open files\" issue. In fact, it's already out of date. We can remove it to avoid confusion.\n. LGTM except what I noted before.\nIt would be better to run UPDATE_DIST=true make genassets and add dist folder to repo so others don't need to do the same.\n. LGTM!\nI found the layout messed up on IE 10, but it's not introduced by this PR and worth a separate issue.\n. This defer can't catch panics raised from other goroutines (I tested). If we want to do so, we have to use some trick described here which is a bit ugly.\nI think panic happens rather rarely. A good reason to implement it is if we can do both:\n1. Clean up or restart itself;\n2. Reliably report panic to Loggly or somewhere else for investigation.\n. Current way of error reporting will not succeed if proxy stops to work, which is very likely to happen when program panics. I would not pay much attention on it unless there's an evidence that Lantern does panic sometimes. We can revisit it when we are sure that errors can be sent reliably in the future. Anyway, it's just my point.\n. My understanding is that panic() will unwind the stack of current goroutine\nuntil it meets recover(). Other goroutines will not be affected (except if\nthere's no recover(), the whole process crashes) , but it's not easy to\ngracefully end a goroutine without affect the functionality of others.\nI think how to reliably report error is worth a separate topic. Currently,\nan error can be lost even if program doesn't panic.\n. Agreed\n. @uaalto There's no report from user that Lantern crashed and caused any problem. I think it's safe to ignore it for now?\n. An alternative to handle panics in one goroutine without affect others is like https://groups.google.com/forum/#!msg/golang-nuts/3QRnU0xJVXg/7NKMjeV5m-UJ. We change slightly the way to span goroutine and all set.\n. Totally agree with @uaalto . Out of band way is more robust.\n. Sorry for leaving your comments unreplied @uaalto \n. LGTM! Works fine on Windows and OSX. Merging.\n. Cool! Works on IE/FF/Chrome for both Windows and Darwin. Merging.\n. LGTM!\n. @uaalto Sorry for the late response. I didn't notice the clutter caused, but I used to copy and paste the full path to open a file in another vim window (better method exists though).\n. ParseBool's comment says\n\nParseBool returns the boolean value represented by the string. It accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False. Any other value returns an error.\n\nI think less options make things clear to reader. We accept true and any other value is unspecified.\n. Tested on Windows and Ubuntu Linux 32/64 bit. It will turn off PAC only if the proxy option is set to \"automatic proxy setting\" and the address is exactly the same as what Lantern set. It also works on Mac but didn't test via installer.\nThe only remaining work is to codesign on Mac and add to repo.\n. Oh @uaalto added binary for linux arm, but I didn't have arm platform to build and test new binary.\n. Need to sign OSX binary. Windows already signed.\n. The last 2 line of pac/pac2go.sh is to sign and embed Mac binary to go\nfile.\n. Just run it, check in the changed pac-cmd/binaries/darwin/pac and\npac_bytes_darwin.go, then all set. Sorry my Internet connection is flaky\nin the recent hours.\n. Good catch @aranhoide ! It's really hard to spot.\nTo prevent similar things from happen again, is it good to extract the registration process to separate method, and rename original one to, say, runRegisterLoop?\n. Thanks @atavism !\n. Cool! LGTM @aranhoide \n. All CloudFront and DNSimple related calls and functions in package main were commented out. Ideally we can extract an interface from the implementations, so we can change one line of code to remove CloudFront+DNSimple, or potentially add other CDNs in the future, but it's not trivial.\n@aranhoide It will not add any domain by just running a peerscanner without registering a new server right? I tried to run it for a while to verify but it will deregister and register a few servers due to timeouts testing them, so I skip it to avoid affecting production system.\nOverall, it LGTM. Thanks!\n. Oh sorry for the late @myleshorton. LGTM! It should have been spotted and fixed in the first place!\n. Thanks for this quick workaround @myleshorton that I should have done. It's good in general apart from those somewhat nitpicking comments above.\n. It works as expected. LGTM!\n. When used in Lantern, it leaks connections in long run and leads to \"too many open files\" error finally.\n. Those increasing CLOSE_WAIT connections which caused \"too many open files\" error might be caused by chained dialer didn't return idletiming.Conn. Create https://github.com/getlantern/lantern/issues/2927 to handle it.\n. Model it as a state machine may make the code more understandable and less error prone, though the change is not small.\n. Thanks for your insights @xiam !\n. Though not 100% sure, but it should work better than previous one. The \"use of closed connection\" error is not specific to this branch, so it should be caused somewhere else. I also spotted that detour connection was made quicker than direct ones in some cases, should be caused by pre-dialed connections of connpool, but let's see what will happen.\n. git hook is super useful to catch errors. Thanks @uaalto ! It would be good if you can take a look at this quick fix.\n. Oh I just noticed that it can only act as pre-commit hook after my change, as when git push, staging area is clean. But it will take too long to errcheck and test race for all code, pre-commit hook with only the changed directory might be more useful.\n. Updated @uaalto .\n. Ctrl+C on Linux results following log line\n\nAug 13 11:29:54.819 - 0m6s DEBUG flashlight: flashlight.go:430 Got signal \u201cinterrupt\u201d, exiting...\n. Great, thanks @xiam !\n. LGTM. Thanks @uaalto \n. Sample graphs at \"Lantern Client Errors\" under dashboard. We should not expose server ip addresses unless we make the page password protected, but it's ok for now.\n. @myleshorton It's great to have measured to be plugged in a single point, but two concerns prevents me from doing it.\n1. We only have (much longer) labels instead of server addresses at balancer.go. InfluxDB is not good at string manipulation at this moment.\n2. balancer is an independant library that is not logically related to measured. flashlight/chained and flashlight/fronted is dedicated to our application, which is good to use any library.\n. We can filter out fronted errors by the special server name \"*.fallbacks.getiantem.org\"\n. Modified as per your advice @myleshorton, would you mind take a look again?\n. LGTM! Good catch @uaalto.\n. @myleshorton This is my proposal to overcome the CF 403 issue.\n. Cool @myleshorton! It works steadily. A bit slower than chained server\nwhich is expected.\n. Already updated server side in production. Test is good, merging. Great finding and fix @myleshorton !\n. Fixes https://github.com/getlantern/lantern/issues/3076\n. LGTM! Great stuff @myleshorton \n. Consider the amount of users this bug affected, I'd suggest to merged this\nfix into 2.0.2 and update the installers. How do you think @uaalto\nand @myleshorton ?\n\nOn Thursday, September 3, 2015, Ulysses Aalto notifications@github.com\n<javascript:_e(%7B%7D,'cvml','notifications@github.com');> wrote:\n\nIssue #3077 https://github.com/getlantern/lantern/issues/3077 is\nconfirmed to be triggered by panicwrap trying to fork a GUI app. This seems\nto offend Windows XP, due to invalid standard file descriptors.\nUnfortunately we didn't see any log of this because panicwrap fails before\nlogging is configured. Additionally, this bug isn't detected\nbecause it doesn't happen if the application is run in console mode (which\nis generally used for development).\nA better solution could be researched further, although I'm not certain it\nis viable yet, but I wanted to get this ASAP in valencia, since it could\npotentially affect all Windows XP users.\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/getlantern/lantern/pull/3091\nCommit Summary\n- Run Lantern even if panicwrap fails to fork\nFile Changes\n- M src/github.com/getlantern/flashlight/flashlight.go\n  https://github.com/getlantern/lantern/pull/3091/files#diff-0 (12)\nPatch Links:\n- https://github.com/getlantern/lantern/pull/3091.patch\n- https://github.com/getlantern/lantern/pull/3091.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3091.\n. https://github.com/getlantern/lantern/issues/3086 is triggered by new\ndetour which is not in any release, so that won't be a problem.\n\nI do see several Chinese user complaints that Lantern 2.0.2 can run for the\nfirst time (started by installer) but can't run again anymore. All of the\nreported OS (if reported any) is XP. I verified it just now. It should be\ncaused by the panicwrap issue.\nOn Thu, Sep 3, 2015 at 11:44 PM, Ulysses Aalto notifications@github.com\nwrote:\n\nOh, I thought the number of XP users was higher! This OS version gives a\nlot headaches, the firewall thing was an example too.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3091#issuecomment-137489907.\n. Great catch @myleshorton  LGTM. I'm testing on Iran VPS to see if it actually resolve the always time out' issue.\n. From testing on Iran VPS, Lantern can getnlfronted server, but all masquerade tests, all fronted and chained servers are still timed out, though thenlserver can even be verified from the Chinese box. Checking what is happening.\n. Yes ubuntu box @myleshorton . Code from this PR still get same result, that's unexpected.\n. @uaalto This PR is still trying to merge tovalencia, rather thanrelease-2.0.1.\n. LGTM. This is very useful!\n. @xiam Still a few changes needs to be done but it's pretty close I think.\n. Thanks @myleshorton ! I'll fix the failed tests later.\n. LGTM! Tested on mac, windows 7 and ubuntu 14. Merging \n. Another tricky thing remaining.httputil.ReverseProxywill add itself to x-forwarded-for, so request header config-server sees eventually will bex-forwarded-for 127.0.0.1, real client ip, chained server. I tried to remove it inbalancer.Dialer.Director`, but seems this header is added afterwards (yes, at http://golang.org/src/net/http/httputil/reverseproxy.go#L191).\n\nSo unless we stop using httputil.ReverseProxy, what we can do is to on the config-server side, check the second IP in x-forwarded-for, or just look up the client-ip header. How do you think @aranhoide ?\n. 127.0.0.1 might not be a safe assumption as it can be changed by setting addr (can be useful if user want to proxy traffic from other devices through Lantern). client-ip is another header added by ATS to indicate its direct client IP.  It's also somewhat de-facto though other implementations might using x-client-ip instead.\n. fetchCloudConfig in client/config/config.go#516 doesn't provide auto token, so the initial config update via baked in chained servers will fail.\nI created a really ugly PR https://github.com/getlantern/lantern/pull/3138 but it would be better to have cleaner way.\nAnother possible way is to bake complete lantern.yaml instead of chained.yaml into installer, hence all requests go through balancer and no need to bootstrap manually. Through this way, Lantern can be more robust by fetching initial config through any dialer baked in, regardless it's chained or fronted. Trying.\n. Tested on mac and windows, it can fetch new config through the baked-in chained server in 1-2 seconds.\n. Thanks @uaalto !\n. LGTM!\n. Yeah, it's great to have this tool and improve it. I didn't even know the existence of it.\n. LGTM! Inspired by you @uaalto, I'll create another PR to dump more details!\n. Run merged code for several hours, it seems more fluent!\n. LGTM\n. @uaalto My PR comes out finally, mind take a look?\n. @uaalto Made a few updates as per your advice.\n. Fixed that nil checking, thanks @uaalto \n. Thanks @atavism \n. Oh it's a lot of work @myleshorton ! Reviewing.\n. I created https://github.com/getlantern/lantern/pull/3193 with just a few suggestions.\n1. Let fronted/dialer.go use the CertPool passed to fronted.Configure(), so we don't need to keep it at client/client.go.\n2. Adjust the order of statements in serveHTTP and serveHTTPWithFronting, in the hope of more clear logic to readers.\nDuring my test on the China box, Lantern could hardly update config or do geolookup through cloudfront, basically all masquerades timed out. Will test on other boxes.\n. New changes LGTM. I found that sometimes the chained server Lantern using is not the one in lantern.yaml. I'm checking to make sure it's not related to this PR.\n. Seems new config fetched is saved to disk but didn't have a chance to reconfigure all components, so it will not take effect until Lantern restarts.\n. All good except what in https://github.com/getlantern/lantern/pull/3196 !\n. @myleshorton Yes, this issue is caused by the dead lock.\n. Finally got the bug found and fixed. @myleshorton This is the only remaining thing I found regarding your PR.\n. Ok I've done the first pass of review @myleshorton . You've made lots of critical improvements!\n. I saw 100+ CLOSE_WAIT connections to masquerades after running for 10 hours, which caused too many open files error finally.\n. > I saw 100+ CLOSE_WAIT connections to masquerades after running for 10 hours, which caused too many open files error finally.\n@myleshorton The defer call in fronted/direct.go#L79 is also responsible. The connection should be closed immediately instead.\n. I guess the whole src/github.com/getlantern/Resources/ directory is added to repo unintentionally right?\n. We can gost add github.com/mailgun/oxy/forward to avoid adding the whole github.com/mailgun/oxy code and its dependency (gopkg.in/check.v1).\n. @myleshorton LGTM except those I commented above. Code becomes much cleaner!\n. LGTM!\n. in util/http.go#L69, chainedFetcher.Do should check the response status code\n. Ok @myleshorton once the above bug fixed, everything should be ok to me.\n. LGTM!\n. All tests passed. Merging.\n. Ha yes, thanks @myleshorton \n. Trivial changes to make test pass. Will merge directly.\n. This should also resolve https://github.com/getlantern/lantern/issues/3319.\nSeems the test is not reliable enough...\n. Yeah indeed though lots of code can be reused. Mark it as don't merge until new detour merged.\n. This PR doesn't bypass LAN addresses if user chooses \"Proxy all traffic\". It will also expose user's access attempts via DNS queries.\nOne alternative would be to have user supply a list of sites to bypass proxy. It adds complexity on UI but provides a way to user for special requirements: local development sites, slow sites but must accessed inland (https://github.com/getlantern/lantern/issues/3325). It will not resolve https://github.com/getlantern/lantern/issues/2875 though.\n. It resolves #3297\n. Thanks @atavism I almost forgot it!\n. Gonna merge this as Lantern-Device-Id is required by Pro.\n. LGTM except that extra for loop. I'll do that minor change and merge.\n. LGTM! It's indeed cleaner.\n. By passing a customized header for HTTP requests in util/http.go, errorRewritingRoundTripper can identify them. It is the way I implemented first which requires changes in two places and adds a bit of complexity.\nChecking user agent is way simpler and makes sense to me. An error page is useful only if user can see it, while rendering such page to non-browser applications adds confusion I think.\nAll browsers regardless of desktop or mobile follow that implicit rule and unlikely to change in the future, and it's not that harmful if it really changes.\nHow do you think @xiam ?\n. I'd like to treat the checking of User-Agent as part of the feature, rather than an exception. We want to render error page only if it makes sense to user.\nYou reminded me another more precise approach. We can choose to not render error page if the request has an Accept header other than text/html or application/xhtml+xml, then explicitly add appropriate Accept header in Lantern initiated requests. Error page is meaningless if the requested resource is an image or json. If there's no Accept header, we still render error page.\nThrough this way, each part of code conforms to HTTP standard rather than depends on each other.\n. I made that change. @xiam mind take a look again?\n. Thanks @xiam !\n. Close in favor of https://github.com/getlantern/lantern/pull/3360\n. Hanging at Step 8 : RUN dnf -y update && dnf clean all. Will try from another ISP 1 hour later.\n. make android-lib ate up the space of boot2docker VM so I have to remove lots of Docker images to restart. Just want to say that finally it works!\n. Thanks @ReadmeCritic the tool is very cool!\n. It works pretty stable except:\n- It will not add the sites of non-idempotent requests (POST/PUT/PATCH) to whitelist. Should add to or remove from whitelist in a single place.\n- A few false positives if the site is slow accessing directly but faster through proxy. It causes problem if the site only allow access from certain area.\n. I traced open connections from detour, the count is not identical to lsof -nPp <pid>. There's no hanging goroutines either. So there should be connection leaks somewhere else. We may decrease the idleTimeout value in client/chain.go to close idle connections sooner until we find out the actual cause.\n. Yeah @oxtoacart that would be great!\n. @oxtoacart I don't have better way except experimenting in real environment. detect.go didn't change at all since 2.0.0, the blockage detection should be time proven.\n. Hanging happens more frequently when concurrency level increases, and when latency increases. Hanged requests are usually less than 5. Requests with concurrency level of 1 never experience hanging.\nThere are two places goroutines were blocked on: ioloop.go#L42 and detour.go#L105. There should be two different issues, as it's impossible to block on both the send side and receive side of an channel (chReadRequest).\n. Close for now. Will create new PR to devel branch.\n. Tens of megabytes are not a huge save considering the total download size to make docker, but it will invalidate all existing docker images. We may keep it open and merge when we have other significant changes to Dockerfile.\n. The Dockerfile needs to be built only once. Subsequent make will be in seconds. That's why it's important to not invalidate existing docker images.\n. LGTM!\n. @Alihamzehzadeh This feature branch is far from ready to create PR. Closing\n. As we are making significant changes to Dockerfile, it's an opportunity to consolidate yum packages, so future changes of go version will not invalidate the docker image. It's also helpful to developers with slow Internet connection by adding deltarpm (https://github.com/getlantern/lantern/pull/3364).\n. @xiam All good except the warning I mentioned above.\n. LGTM! The failed test is peerscanner, which is unrelated.\n. @Alihamzehzadeh Please describe the purpose when submitting a PR.\n. I thought about that but it only applies to that particular target, plus there's no other relevant environment variables to be grouped together. Any strong reason to do so @xiam ?\n. Defining a variable far away from the place to use it seems unnatural to me. But to make it explicit, I added a separate variable at the top of the file. Does it look good to you @xiam ?\n. @oxtoacart I saw strange behaviour with latest valencia code. With only one chained server in my config, I frequently get mimicked page, especially if the site is inaccessible. Known sites such as Twitter and FB never show that page. From the Lantern server, I can see lots of No token provided from x.x.x.x:dddd message.\nIs it expected with current http-proxy-lantern? It looks like in some cases, Lantern client never set the auth token in header.\n. Can't reproduce it now. Will keep experimenting.\n. Thanks @oxtoacart I'll try\n. Sorry @oxtoacart I forgot it's weekend. This PR should have lower priority than other outstanding ones.\nThe basic idea is at https://github.com/getlantern/lantern/issues/3358, to choose the most reliable and fastest servers and possibly distribute traffic among them. It's not clear which way is the best at this moment, so this PR is to provide a simple way to implement different strategies, benchmark them and adjust parameters.\n. So I tested this QualityFirst strategy with real config on the China box. It will pick faster JP server at first and stick with that one. After throttled eth0 to 10kbps, 1000ms latency or 8% packet loss rate respectively, it will dial both JP and AMS servers. It will pick JP server again soon after stopped throttling.\ncomcast has a bug to emulate network for specific address on Mac, so we need to find a better way to emulate network dynamically. Tests also need to be updated. But in general, QualityFirst is good enough to pick up the fastest server.\n. Close in favor of https://github.com/getlantern/lantern/pull/3755\n. LGTM. Travis failed because of an unresolved dependency, all relevant test were passed locally.\n. Plus: The unnecessary dependency of Travis is removed in valencia. Manually running Lantern for 1+ hours on Mac, memory keeps at 30MB.\n. It's a neat tool to find performance issue @oxtoacart ! Will merge it\n. We may also need to remove below 3 files if they exist. They are not changed after installation.\nFile lantern.ico\n    File .packaged-lantern.yaml\n    File lantern.yaml\nIt's also a plus if we can confirm before uninstall, or double click on Control Panel will uninstall it directly. But that's beyond the purpose of this PR.\n. Ok adding below two lines before sections can do the trick. It doesn't affect silent uninstall.\nUninstPage uninstConfirm\nUninstPage instfiles\n. LGTM. \n. Not able to show UI correctly unless https://github.com/getlantern/lantern/issues/3653 is resolved.\n. LGTM!\n. @oxtoacart Do you think it's good to be merged?\n. I had a glance on it but didn't actually look into the details. Now it's the time!\n. @oxtoacart Seems your PR is solving a different problem.\nThe bug this PR trying to resolve is irrelevant to PAC but how Lantern choose dialer for plain HTTP requests: Though client.newReverseProxy calles proxiedDialer which respects settings.GetProxyAll, it is only called once in client.Configure, so we need to call client.Configure each time proxyAll flag is toggled, that's why I added listener.\nOther changes to settings.go seems more useful when we add more options in Pro UI.\n. Oh I didn't realize that it requires such a simple fix. Will close this PR until we need the flexibility again.\n. LGTM. Will merge once CI completed.\n. @oxtoacart I removed QOS and Weight from balancer as we no longer use them. Tests are also changed a lot to align with strategy based heap operation. By always picking fastest server, the QualityFirst strategy has some sort of load balancing if the avgDialTime of multiple dialers are at same level but change slightly.\n. Hmm naming is not what I'm good at. \"rotator\" or \"dispatcher\"? Seems pointless...\n. @myleshorton The X-Lantern-User-Id and X-Lantern-Pro-Token header should be absent for an not registered client. It's also not the responsibility of balancer to provide these headers, as they are same across servers assigned to specific user. IIRC the pro client code should have already persisted them to settings.yaml and use them.\n. Oh sorry @myleshorton I misunderstood your previous comment. Seems changes to config.go should still be in a pro branch as we don't even have those fields supplied in devel branch.\nIt raises another issue that proxy should not remove relevant headers. Logged at https://github.com/getlantern/http-proxy-lantern/issues/44\n. @oxtoacart updated per your comments. \n. It's used as a comparision of different EWA, nothing is used in production,\nso I comment it in case we need it in the future.\nOn Tuesday, March 15, 2016, oxtoacart notifications@github.com wrote:\n\n@fffw https://github.com/fffw Your changes look good. Just one\nremaining question about the commented-out avg_bench_test, and then we can\npull.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/getlantern/lantern/pull/3755#issuecomment-196797645\n. LGTM\n. Good idea @myleshorton ! For that purpose, it would be better in a separate repo and well documented so anyone can use it to test any APK. Will make that change.\n. Moved to https://github.com/getlantern/test-automation/tree/master/mobile-test\n. Thanks @oxtoacart ! The failed test is unrelated and logged at https://github.com/getlantern/lantern/issues/3781\n. @atavism It's the quick fix for #3802 \n. @oxtoacart unfortunately it is still not ready for review\n. @oxtoacart The main issue is accumulated go routines, and occasionally failed test. I should make the code clear enough to find bugs and prove the correctness.\n. It's feature complete now, but three issues remaining:\n1. eventual.Get accumulates goroutines (eventual.go#L104).\n2. CLOSE_WAIT connections.\n3. Too many Unable to obtain connection within timeout log entries.\n. Oh @oxtoacart @myleshorton it's indeed a bug that RemoveFromWl doesn't respect the permanent flag! \n. Logged https://github.com/getlantern/lantern/issues/3822 for the failed test of Lantern embeddable client.\n. @shilingluo Could you elaborate how this PR fixes issue 3039?\n. It's not ready to become master yet.\n. Good catch! Thanks @netroby !\n. Test failed on Lantern embedded client, close this one to find a better approach.\n. Thanks @fliar. I'm going to merge it and perhaps rephrase afterwards.\n. LGTM!\n. LGTM\n. LGTM!\n. LGTM. Though it will not take effect until we run genconfig again next time.\n. Did that in https://github.com/getlantern/lantern_aws/commit/e29416ab386628bab13157b344a498424a9b135e. Thanks @myleshorton !\n. As we plan to host common configuration separately on cloud, we can also always fetch latest configuration from cloud when building Lantern. By this way we don't need to have two copies of some list.\n. @Derekf5 It's the WIP of newsfeed, in case you want to have a look. You should be able to see it when you run normal Lantern binary with the code checked out.\n\nPending works:\n1. Switch 'All' to ic-list icon\n2. Properly fade out at the bottom of each item.\n3. Only show if locale is zh_CN\n   ...\n. LGTM!\n. Yeah desktop even stops showing title at all with CDATA. Is it related to switching RSS parser @xiam ?\nMaybe use meta.og.title and use title only as a fallback? Though I don't known what og actually means.\n. Oh I unintentionally changed the behaviour of thumbnail. It should look fine now @myleshorton \n. These are 100% translated languages, including recent added strings. Other languages will fallback to English if specific key can't be found.\n. These are 100% translated languages, including recent added strings. Other languages will fallback to English if specific key can't be found.\n. Good. I'll go ahead and merge this. I can merge changes in https://github.com/getlantern/lantern/pull/4028 afterwards.\n. I'm wondering if we can use sync.Cond in place of slice of channels. Get() calls cond.Wait(), while Set/time.AfterFunc/Cancel calls cond.Broadcast(). It's unnecessary to pass the value through channel, as it can always be retrieved from atomic.Value.\nOr, we can use single channel and always close it in Set and Cancel. All pending Get wait on it, and retrieve the actual value after select. Currently waiters are only notified once and get removed, single channel can do the same, but with less code and a little performance gain.\n. Oh, I didn't think about it. LGTM!\n. @myleshorton Those fields are in below files.\n./locale/en_US.json\n./locale/es.json\n./locale/fa_IR.json\n./locale/fr.json\n./locale/zh_CN.json\nActually I think we should remove LANTERN_MOBILE_ANDROID from locale file, and change LANTERN_MOBILE_SHARE to a format string, as the URL itself doesn't need to be translated.\nBTW: bit.ly was unblocked in 2010 in China, but the greatfire test result is not that good.\n. Hmm I guess you branched off from devel, as LANTERN_MOBILE_ANDROID only appears in locale/en_US.json in that branch. My previous grep is from release-2.2.0.\n. Ok I see. I fetched Transifex translations in c9f4e6bd0f696fdc9a82b6337a5f4b891c5d6b1f, which is not merged to devel yet.\n. @myleshorton Did you see my PR for the same  issue ?\nOn Thursday, April 21, 2016, myleshorton notifications@github.com wrote:\n\nWeird -- I see the same thing you're seeing now @fffw\nhttps://github.com/fffw. Not sure what happened there. I'll make those\nother changes as well.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/4032#issuecomment-212961094\n. Oh never mind I just saw you already merged it.\n\nOn Thursday, April 21, 2016, ff ww fffw@getlantern.org wrote:\n\n@myleshorton Did you see my PR for the same  issue ?\nOn Thursday, April 21, 2016, myleshorton notifications@github.com\n<javascript:_e(%7B%7D,'cvml','notifications@github.com');> wrote:\n\nWeird -- I see the same thing you're seeing now @fffw\nhttps://github.com/fffw. Not sure what happened there. I'll make those\nother changes as well.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/4032#issuecomment-212961094\n. @myleshorton Device OS detection is a cool idea! \n\n\nI usually trigger error page by turning off Wifi temporarily. When changing to bogus URL, both feedUrl() and fallback-url need to be changed.\nI added the logic to show cached feeds first if any, and fetch server in the background. It will re-render feeds after a successful fetching, or render the error page. I also adjusted the cache from 5 minutes to 24 hours, so users don't need to wait for the feeds to load in most cases.\n. Thanks @myleshorton !\n. LGTM!\n. Merge directly as no application logic involves.\n. @atavism You probably want to take a look?\n. @oxtoacart If they are actual integration tests, we can add +build integration flag to the .go files to avoid run it in Travis. That raises the question of how we automate the integration tests to tolerant small percentage of failures.\n. @myleshorton Actually I'm not sure if it's the cause of #4108. render() always replaces objects in $scope each time so old items won't mess with new one. I do think background fetching is important to provide better UX and reveal connectivity issue.\n. It also fixes #4148\n. @myleshorton a couple of simple fixes to 2.2.0.\n. ~~Reverted https://github.com/getlantern/lantern/pull/4138 and try to fix #4108 by eliminating index operation in view.~~\nI end up moving my attempt of #4108 to https://github.com/getlantern/lantern/pull/4160, as that one requires some time to verify.\n. LGTM!\n. 1. Should not show the box if the mobile ad is in place, or, even better, clicking feedLink should hide the mobile ad.\n2. Suggest to make \"Take me back to the old look\" less obvious. Commented at https://github.com/getlantern/lantern/issues/4185#issuecomment-216714742\n. @myleshorton That's all I found\n. LGTM! The #2 suggest is worth another PR.\n. LGTM! Waiting for CI\n. LGTM!\n. LGTM, waiting for CI\n. @rockyzhang Thanks for your contribution. We probably want to decouple the code to check hosts file from PAC file generating. If that portion of code can be extracted as a separate cross platform package with solid test, it would be a good PR candidate, and protentially benefit other open source creators.\n. Thanks @oxtoacart and @uaalto for all your insightful comments. I'll refactor based on them.\n. Remaining packages to modify  (find . -name *.go | grep -v \"_test\" | xargs grep log.Error | cut -f 1 | rev | cut -d \"/\" -f 2- | rev | sort -u)\n- [x] autoupdate\n- [x] balancer\n- [ ] buuid - skipped, not used anywhere\n- [x] chained - skipped sever\n- [ ] checkfallbacks - skipped\n- [ ] detour - skipped, will be replaced soon\n- [x] flashlight\n- [x] flashlight/app\n- [x] flashlight/autoupdate\n- [ ] flashlight/genconfig - skipped\n- [ ] flashlight/logging - skipped, no need to report\n- [x] flashlight/main\n- [x] flashlight/proxiedsites\n- [x] flashlight/ui\n- [x] fronted\n- [x] lantern\n- [x] launcher\n- [ ] profiling - skipped\n- [x] protected\n- [x] systray\n- [x] tarfs\n- [x] yamlconf\n. What next:\n1. New helpers to extract information from net.Conn or http.Request/Response.\n2. data race\n. I'll merge and keep going based on it.\n. Thanks, @oxtoacart . There are a few concerns make me thinking about the necessarity of this change:\n1. Coders usually follow previous practice or the document or check the tests to learn how to use a package, instead of creating an object just because it's public.\n2. The damage of manually creating an Error is low. It doesn't affect the program's feature. From the reported information, we can know which line of code is reporting the error without necessary fields, and fix it.\n3. The mandatory .Finish() call is tedious and couter-intuitive, especially considering errors package will be used frequently.\n4. The code turns a bit harder to understand to handle this accidental complexity.\n. Yeah it looks like the package should be under flashlight, but other packages like detour or balancer may also want to report error without return anything to caller. Error reporting is a general requirement. We can make the package extendable through reflection, but it feels like an over design ATM.\n. I'm thinking of a rate limiter that itself reports an error entry with the error it suppressed with a count.\n[\n  {\"desc\": \"EOF\", \"go-type: \"io.EOF\", \"proxy-addr\": \"x.x.x.x\", \"device-id\": xxx,...}...\n  {\"desc\": \"error supressed\", \"error\": \"EOF\", \"supress-count\": 35, \"device-id\": xxx}\n]\nAn overall statistics doesn't include the supressed count, which is ok because same error appears 5 times or 50 times doesn't affect the qualitative result. When we want to list errors for one device or user chronologically, the supressed count is there.\nWe probably don't need it or the aggregator ATM.\n. I checked gls package before in hope to provide a context to correlate application requests with open connections, but gave up for some reason I can't remember.\nContext package will be moved to standard library in Go1.7. Both net and net/http will support it, among many other packages. It supports batch cancellation, deadline and attaching any values, which would simplify our network handling code a lot. I expect it to be a standard way to pass context, replacing current workarounds. My main concern is that gls based context seems not superior than the standard Context package.\nMore comments come soon\n. Generally, Goroutine, context and error reporting are different topics. Context can pass through Goroutine boundary, and has a broad usage. Error can get some information from context if necessary but doesn't depend on it. Mix them together can save us keystokes at first sight, but the increased tight coupling may hurt us in long term.\nA few examples:\nGoroutine - context: Not all Goroutines require the gls data, but we have to establish a convention to always call ctx.Go. With Context, we can pass the context to go func(), or create new context from the one in outer scope when necessary.\nContext - error: When EOF occurs when dialing proxy,  logging or reporting the user agent adds nothing but noise. We should select those context really makes sense. If it becomes tedious to extract same set of information from context, a handy custom helper FromContext(e *Error, ctx Context) *Error would be enough.\nFor your point 1, context passes information top down, while Error attaches information bottom up, which is complementary to each other. Without the bottom up propagation, we have to log or report immediately when the error occurs, or the details will be lost.\nAs for your point 4, typed error is an recommendation for complex packages. Many 3rd party logging library, like logrus and log15, all use structured logging. We probably can consider evolve in that direction.\n. > > As for your point 4, typed error is an recommendation for complex packages. Many 3rd party logging library, like logrus and log15, all use structured logging. We probably can consider evolve in that direction.\n\nThe structured logging here just means that they actually log JSON rather than a string, right? We're essentially talking about doing the same in terms of submitting our errors as measurements, right? My point was about something else, namely that to ensure that the information attached to our error propagates in a typed form, we have to make sure it's handled properly along the entire path between whoever is logging it and whoever raised it.\n\nSorry for the confusion. I just recommend to use fields instead of formatted strings to create both error and log entry in the future. That would eliminate return fmt.Errorf(\"Fail to xxx: %v\", err) style completely, so code can either: 1. return error as is, or 2. attach fields use errors package. What if there're 3rd party package in between? I don't know but didn't see any occurrence. Anyway we need to propagate errors bottom up.\n. Ha comments become cluttered. By saying passing context, I mean passing context when necessary instead of calling context.Go in all occurrences.\n. @oxtoacart Your previous 3 comments really make sense. I'm convinced.\n. It's at https://github.com/getlantern/lantern/tree/issue4172-errors-only\n. What's the purpose of Global? If it's only used in golog, why not just set it as a variable of golog itself?\n. My understanding is that global is what unrelated to any context. It feels to me like global variables. Without global related methods the API can be much more concise.\nSay if we want to retrieve current user settings before report error. Why not call a Settings service in a central place and merge the result with error details? It's more explicit than PutGlobalDynamic somewhere else and retrieve the value through a string key.\n. cc @oxtoacart @uaalto \n. > Did you figure out how/why that's happening and if so, how does this PR fix that?\nNot yet but it's my priority in next days. I carefully scanned the code but didn't find a clue. I couldn't reproduce either.\n. It's not easy to test the check logic unless we launch a real chained server during the test, which falls into integration test. I chose to skip it. It looks like that coveralls failed due to a decreased coverage?\n. > > I chose to skip it.\n\nWhat does this mean?\n\nI simply mean to not add test for the check logic.\n. The next plan is to stop checking dialer regularly if the connection is idle. Instead, having balancer to initiate a check for all dialers when its Dial is called after a period without activity. Dialer check is only meaningful to comparing metrics among dialers, when there's some activity.\n. @oxtoacart I made the changes per the plan. Could you have a look when you have time?\n. Thanks @oxtoacart ! Merging.\n. I took a look at this PR as it was hanging for a while. LGTM\n. I didn't see increased CLOSE_WAIT connections on devel. @myleshorton What did you see?\n. Tremendous! Need some time to scan carefully and nitpick.\n. My main concern is that the interrelation among those packages adds confusion. So here's my suggestion:\n1. Add a new method context.Current(), to retrieve current context at any place, so we don't need to pass op around (here for example).\n2. Substitute ops and flashlight/ops with flashlight/context, to wrap context package with a few helper methods. context has a clearer meaning than ops IMO.\n3. Have a separate package, say, errpt, to report error at certain place. It should know nothing about context.\n4. Add a WithContext method to errors.Error. I don't hold a strong opinion on it though.\n. Cool! Having an op abstraction sounds great to me. We probably can have the method names to reflect the intention more apparently, say, op := ops.Start(\"dial_for_balancer\"), defer op.Complete(), op.Succeed() (by default but can also call it explicitly), op.Fail(err), etc.\nIf we always report error when an op is completed with failure, we can decouple errors package from context completely. Whenever we need to attach context to an error, the purpose is to call op.Fail() or log.Error immediately. We don't need to propagate errors with context, as op.Fail() can serve that purpose: it won't report until op.Complete() is called.\nPlease ignore my last point. It becomes irrelevant in this new context.\n. @oxtoacart Maybe due to language barrier, Enter and Exit an op makes no sense to me. FMPOV, we can optionally attach some context to an op but the op itself is not contextual thing. Begin, End and Failed are very clear semantically. They are pretty much like what in Basic or Pascal: They just mark a block of code which does actual work.\n. Sorry @oxtoacart I lagged behind the plan today. Will look at it tomorrow!\n. @oxtoacart I finished this round. I'm looking forward to have it merged soon once the API is finalized!\n. Looks pretty good to merge. Awesome work @oxtoacart ! We can tidy up the log messages a bit afterwards.\nPersonally I still don't quite like the clever trick to chain log and ops methods together, but let's see how we feel about it in long run.\n. LGTM\n. proxiedsites was the first frame UI received from the WebSocket, that's why I suspect it to be the cause.\n. @oxtoacart I know the reason why it failed/panicked but didn't fix it yet. Probably I'll switch to atomic value to avoid introducing synchronization and remove the rigid check condition. It won't affect the feature, so I'll focus on current UI thing first, but should be able to revisit it when I work a full day tomorrow.\n. @oxtoacart It's the fixed version. I could run tests 10+ times with or without -race flag.\n. Thanks @oxtoacart !\n. Revert because it fails to build on Windows. syscall.Handle is not int on Windows.\n. I end up reset https://github.com/getlantern/lantern/pull/4378 directly\n. Here's what GOOS=windows go build reports\n./protected.go:82: cannot use socketFd (type syscall.Handle) as type int in argument to protect\n./protected.go:162: cannot use socketFd (type syscall.Handle) as type int in assignment\n./protected.go:198: cannot use conn.socketFd (type int) as type syscall.Handle in argument to syscall.Connect\n./protected.go:231: cannot use conn.socketFd (type int) as type syscall.Handle in argument to syscall.Close\n./protected.go:247: cannot use conn.socketFd (type int) as type syscall.Handle in argument to syscall.Close\nWe can't switch socketFd from int to syscall.Handle because syscall.Handle is only available on Windows.\n. One option is to make protected non-op on Windows, but not depending on protected package by default is way better.\n. @oxtoacart As your previous PR https://github.com/getlantern/lantern/pull/4378 is good to me, I'll merge this one directly with the Windows fix.\n. @uaalto lantern-pro branch is too old and I should have removed it to avoid confusing. PR to devel would be good IMO.\n. The errors are here\n. Sorry, it's my bad.\n. Good catch @oxtoacart . LGTM\n. Passed CI after rebasing devel. Merging.\n. https://github.com/getlantern/lantern/issues/4705 becomes the blocker of all the CI. I had some progress on that one. \n. I was thinking of an probably simpler alternative: When piping on one direction returns, set the read and write dead line to a short period, so the pipe in opposite direction can be closed in a short time.\n. Oh my alternative has a flaw. It will close connections prematurely in below rarely happen case:\n1. client sends request and close.\n2. server continuously send large chunk of data back, then close.\nSame flaw exists for current code.\n. Code looks great and works great. Awesome work @oxtoacart \n. Yes sorry I also forgot it!\n. I just pushed a new commit. @oxtoacart could you take a look again?\n. The interleaving occurs between timestamp and error message, which is irrelevant to golog and errors package. It happens rarely, so I chose to not touch it atm.\nThe PR looks like a sledgehammer to crack a nut, but more straightforward code would be better to spot such bugs, and the log output looks less clutter now. @oxtoacart how do you think?\n. @oxtoacart does it sound ok if I add back the file and line number by passing a prefix string to PrintStack? The MultiLinePrinter implementation is still over-complicated to me.\n. Cool @oxtoacart will do\n. @oxtoacart I brought back the original indentation and line prefix on stack trace\n. LGTM @oxtoacart. Let's see it shining!\n. Not sure why but the failed test  of flashlight/app.TestProxying is due to 403 forbbiden fetching proxy config:\nJul 21 11:22:12.495 - 0m2s ERROR flashlight.config: proxies.go:91 Could not read fetched proxies Unable to fetch cloud config at http://127.0.0.1:51945: unsuccessful response status [error=Could not read fetched proxies Unable to fetch cloud config at http://127.0.0.1:51945: unsuccessful response status error_op= error_type=errors.Error fronted_url=http://127.0.0.1:51945 http_method=GET http_proto=HTTP/1.1 http_response_status_code=403 op=dualfetcher origin=127.0.0.1:51945 origin_host=127.0.0.1 origin_port=51945 proxy_type=fronted root_op=fetch_config]\nERROR flashlight.config: proxies.go:91   at github.com/getlantern/flashlight/config.(*proxyConfig).Poll (proxies.go:91)\n. @myleshorton This is LGTM in general, but I need to have a clearer head to test / rescan it tomorrow morning. Cool stuff!\n. @myleshorton looking on it.\n. LGTM. Great stuff @myleshorton.\nI pushed that trivial commit directly to change the signature of applyFlags. Will merge after CI pass\n. Gonna merge directly as it's already used in 3.x. fix #5061\n. It's a simple change, but should improve UI responsiveness a lot if the free proxy is inaccessible.\n@myleshorton would you mind to take a look?\n. Thanks @myleshorton ! It's definitely a critical part to improve.\n. @myleshorton I made this simple change to move all generated go files to a different directory. I successfully run genconfig.bash and make darwin, the generated binary runs correctly.\nWhat puzzled me is that 3 of the generated go file is used nowhere, and previous genconfig.go seems not working.\nFeel free to push more commits directly if you think this PR is kinda useful!\n. Sure @myleshorton. Definitely true for such type of changes\n. Extract two common methods to get consistent skipFrames\n. I reversed the test as http server may listen at arbitrary ports but https port is usually fixed.\n. Oh sorry I saw your initial comment of https://github.com/getlantern/lantern/pull/2424 but didn't notice later discussion. \nOk I'll revert the changes to balancer.go\n. Cool @xiam! New tlsInfo is pretty clean.\nTo avoid adding unrelated info to Loggly, instead of print tlsInfo for any errors, can we only print it if the error isx509.UnknownAuthorityError, or defined in https://golang.org/src/crypto/x509/verify.go ?\n. BTW, if you can change the message prefix to lower-case? It's the only occurrence of all-capitalized log.\n. Chrome Frame is no longer available, just remote the link\n. Ref http://www.sitepoint.com/web-foundations/internet-explorer-conditional-comments/ for explanations.\n. Added this option to keep IE condition comments in minified html.\n. The dirty ways to make the modal look good\n. From https://golang.org/src/net/http/transport.go#L361 , if persistent is true, http.Transport just closes the connection when it's idle. Should we use !persistent instead? \n. I don't know exactly the original purpose of this test, but it failed on my Mac even on branch valencia. I revised it to show that balancer can retry dialling on all qualified dialers. It would be good to point out my misunderstanding on it.\n. By embedding the interface, we can eliminate those unnecessary forward methods.\n. Use a separate channel to tell dialer to close itself. Avoid panic of sending to closed 'errCh'\n. @myleshorton Just to make sure, log.Fatalf will quit the program, is it intended? MobileClient.pollConfiguration() will call this method over and over again.\n. AssetFile embeds 3 members. Seems another member also has Size() method, which causes ambiguity, although I don't know exactly which one. Returning &f.FakeFile explicitly to eliminate the ambiguity, as FakeFile is existed to provided an os.FileInfo interface.\n. Embed AssetFile already have Stat() method. See https://golang.org/doc/effective_go.html#embedding\n. I don't think so, though actually I don't know what causes the ambiguity. Removing AssetDirectory altogether doesn't stop this error.\n. Furthermore, can we use instanceId as ClientId? For now, it's empty except our hosted servers.\n. Log is still useful even if there's no label\n. It's me introduced the bug of not turning off pac by moving this line to below to near the call to pacOn. We can move it back here, or wrap the defer in a func, but I think add exitFuncs solely for this purpose is not worthy. How do you think @myleshorton ?\n. NodeID doesn't change on one device, which is suitable for an instance id. It would be better we prefix it with text, but either the role or country will change.\n. It might be too tightly coupled, as we need to rerun genconfig for each new FT version. Alternative would be to put a version.txt besides firetweet.apk, and check the content directly. It's rather easy to update the txt file at the same time when updating apk.\n. We have only 1 fronted server in default config, so I move it here, in case there are more than 1 in cloud.yaml\n. It's not clear to me what this change for. User may not see the full content via a not maximized window, which is very common.\nWe can reduce the margin-bottom or padding-bottom of #sites to eliminate extra spaces.\n. No. See http://findproxyforurl.com/pac-functions/#tcompare\n\nThis function will return true if the hostname contains no dots, e.g. http://intranet\n. Those are private IP addresses reserved to LAN, which is definitely not reachable from Lantern server, so we can always access them directly. But user may access an public IP address which is blocked. We should allow this right?\n. Thanks @myleshorton . I just realized that some web pages can embed a few resources via IP address. The check seems meaningful.\n. Oh I just wanted to add this after found where the 403 forbidden came from! Adding log at client side is better, but I think it's easier to add after we actually have production servers return msg back.\n. Totally agree to expose Flush() interface.\n. It would be better if we can change logging package a bit to allow direct connection, than to set up the whole thing just for this single purpose. What do you think @uaalto ?\n. Oh @xiam it has a potential problem. If user want to stop using Lantern for a period and set proxy manually for their own purpose, Internet setting will be cleared each time computer started up, and user will never know the reason as Lantern already quit!\n. We may need be more conservative to clear PAC setting only if the PAC string is exactly what we set. \n. Yes let's add a separate ticket.\n. Not absolutely required, but we decided to tunnel all traffic generated by Lantern itself to keep away from potentially being detected.\n. Hmm... Seems we don't have a good place to backup the original settings.\n. Move clearProxySettings here, as we require cfg.UIAddr\n. hardcode here violates DRY, but I didn't find an easy way to eliminate it.\n. Passing pacURL as parameter seems more natural than using package level variable.\n. url is not used anywhere.\n. Checks the option as well as pac url to be more strict.\n. reorder the commands by OS to reduce the impact in case of error.\n. Oh I didn't notice the check below. It's already checked in Config.ApplyDefaults(), so the below check is extra I think.\n. The issue is open. With the comment as a clue, we may revisit it afterwards.\n. Good catch @atavism . No official document found but from this thread g_settings_get_string will never return NULL, also confirmed from source code. I'll remove following checking against NULL.\n. Remove extra check. Even if cfg.UIAddr is empty, next statement will also catch it.\n. g_settings_get_string never returns NULL. Skip empty string check because if it's empty, strcmp will always return none 0.\n. sync.Mutex doesn't require initialization\n. We can still use log.Tracef or log.Debugf here.\n. Is duplication considered an error?\n. Loggly itself does permit new lines in a message. golog permits them too. It's flashlight/logging that prepends timestamp to each line which is overskill and undesired I think (only affects logfiles and standard outputs). We can return a writer that just prepends timestamp for each Write operation there.\n. Not sure about what other guys thinking, IMPO it's no harm to send direct message to Loggly occasionally.\n. Makes sense to me!\n. Explicitly group statements, as in Bash,  || and && are the same precedence.\n. Only check modified directions.\n. Strange enough I didn't notice the brackets below! Will correct.\n. An potential issue here. On extremely slow network, connection made after this timeout will have no where to go but remain open.\n. Both direct and detour connection can be available at this point. If we don't want to read/write on both connections, we should keep one and close another at first read. It's definitely a bug.\n. A bit unclear to me. getParentDomain() is used by whitelisted() but not here. addr will  never be \"\" except passed in intentionally.\n. Just want to ignore the errors when closing conn. Add a debug message would be better. Thanks for pointing out.\n. Ha yes good catch!\n. Good point, thanks.\n. Agreed. Explicit return will express the intention more clearly.\n. I just followed what enproxy doing. Returning an error makes the code more deterministic indeed.\n. GET /posts/delete?id=123 is still idempotent as long as ID is an actual ID representing an unique resource instead of a sequence number. Something like GET /posts/create is the problem.\n\nSince we can't enumerate all applications behaviour, the least thing we can do is to follow standard. Just like browser not prompting user when refreshing a GET request, we can do the same I think.\n. Direct connection is dialed with timeout, so it will always return before the timer runs out. There's no timeout dialing detour connection because balancer doesn't have DialTimeout.\nFollow that path, fronted dialers return idletiming connections, I also added 1 hour idletiming to chained connections in this PR (https://github.com/getlantern/lantern/commit/fdad34209c99393ceb4bde98a200ef9e53409f52). In practice it won't cause too many dangling connections though we should fix here anyway.\n. The code this test targets was removed at https://github.com/getlantern/lantern/pull/2989\n. Ha I forgot to try run the test locally before submit code. Line 40 already verified that a new record is created, 100 millis is for DNSimple to sync internal state which should be very short I think.\n. Good catch @myleshorton !\n. No we don't need it. As I changed config.Configure to accept fronted.Dialer as parameter, the call to it here becomes invalid. We can pass the http.Client as another parameter, but it makes code less understandable.\nExtract those code to a common call like nextHTTPClient would be good to hide the difference.\n. It is what NewDirectDomainFronter() doing previously. DirectDomainTransport is a simple wrapper of http.Transport\n. Try \"^/(.*)/(.*)/(.*)\"? This regex matches the extra trailing slash.\n\nSep  1 04:10:14 fl-nl-ara-001 flashlight: Sep 01 04:10:14.939 - 0m58s DEBUG enproxy: proxy.go:134 Path is /1f084d96-fe6b-4920-a139-d950ae54d759/twitter.com:443/write/\nSep  1 04:10:14 fl-nl-ara-001 flashlight: Sep 01 04:10:14.940 - 0m58s DEBUG enproxy: proxy.go:185 Parsed enproxy data id: 1f084d96-fe6b-4920-a139-d950ae54d759/twitter.com:443, addr: write, op:\n. Oh wrong point sorry. It could be /([^/]+)/([^/]+)/([^/]+)\n. I would use regexp.MustCompile and save it as a var\n. Cloud config override anything locally. Those not in cloud config will remain unchanged. Removed lots of extra stuff.\n. Yes I tested. Anyway this change is no longer required.\n. Should be !=\n. Could loop through an array of file names to make code more clear, but nothing important.\n. This Printf is left unintentionally right?\n. Multiple call to configExists will result multiple line of DEBUG flashlight.config: config.go:225 Placing configuration in /Users/merlin/Library/Application Support/Lantern message. But it's pretty ok, as it only run once.\n. Just to make sure. We are intentionally continue to next file if we unable to rename right? We may change the error message to make it explicit.\n. I think we can completely remove this line or L422, as it always follows after the \"Config unchanged in cloud\" message.\n. Disable isActive check in balancer.go instead to make the intention more explicit.\n. Without this line, len(servers.ChainedServers) will always be zero when reading from chained.yaml\n. We forgot to copy the new file.\n. On linux, executable is started from ~/.lantern/bin, and the config file is placed at ~/.lantern\n. Skip directories to avoid noise.\n. Ok I see. So my PR only fixes the startup issue on linux.\n. Do we want to accept ETag and expect 304, like previous implementation?\n. Embed lantern.yaml in installer, and copy it to config directory if there's no existing good config.\n. Good catch\n. Interesting. During my test, checkfallbacks never succeeded without this line.\n. Oh I didn't notice that I'm printing the original request. In fact it's somewhat meaningless to print request here if http connection failed.\n. Good catch!\n. For those listed url to test, 200 is the only expected code. http.Client will fetch the redirected page automatically.\n. Yes that's really annoying. I guess the currently running checkfallbacks on cloudmaster is a previous version.\n. This file also seems superfluous\n. Guess we can eliminate RootCAs field here, and let fronted/dialer.go#L336 to use the one passed to fronted.Configure?\n. Deadlock between here and L302, that's why new config never get propagated.\n. GetTrustedCACerts() is called only during initialization or when new config available, no need to cache the certs. So move createCertPool() here and remove the channel which causes block.\n. This will block until the channel is consumed, so wrap it in goroutine.\n. Hide the details in constructor.\n. It's Intended to return HTTP 502, but it actually return 200 OK with the response as content. Fixed it.\n. Wanted to add test but failed. Leave it to implement later.\n. Oh it should have fixed in some other PR, may need to resolve conflict when merging.\n. Intentionally put this file in repo or not?\n. We may not want to hardcode proxy address here, though it's also the behaviour of 2.0.6.\n. We'd better to respect existing config file as it still contains user settings. We can add the check for cloudfront masquerades in isGoodConfig so 2.0.7 will  drop config of previous versions, but later versions can keep user settings.\n\nIf we do decide to drop previous config, function useGoodOldConfig can be removed.\n. This line of comment seems odd as auth token is no longer something config package should care.\n. This stale comment can be changed slightly.\n. A comment  on the purpose of this header would make reader happier.\n. statserver uses the HttpClient to geolocate, we can also remove Configure here and reply on pubsub to keep consistency.\n. This function can also be removed if statserver changed to using pubsub.\n. Maybe panic here? This error message is meaningless.\n. One slight improvement would be to store the two goroutine funcs in a slice as a member of chainedAndFronted, and once chained goroutine succeeded, remove fronted func (fixed index in slice) from the slice. Through this way, we don't need to maintain the flag and no longer need atomic operation, as access to the slice has no race condition.\nJust an extra option. Current implementation is good enough.\n. oxy/forward package is not in repo, though it will definitely be added later by the chained server implementation.\nflashlight/util is not added in testpackages.txt.\n. We only want to dial first 40 masquerades from shuffled sets in parallel and ignore the rest?\nI guess we can just spawn a few goroutines, say, 10, and loop in the goroutine when error encountered to dial one masquerade, so we always have and only have a few valid masquerades in stock. Testing against one masquerade will fail soon unless times out, so it will not slow down the caller of getMasquerade I think.\n. I came across this when running different versions of Lantern instance on same VPS to measure load time. I supplied different -addr= options to each instance, and lots of connection refused error reported during config update and geolookup. I redirected output to /dev/null to prevent those errors from blowing up the whole disk.\nI agree that regular Lantern client will hardly change the port, so it's probably ok.\n. What do you think about this one @myleshorton ?\n. I would create chainedFetcher and dualFetcher on the fly and assign to fetcher at that moment, as no extra cost involved. Three members with same type make me a bit confused at first glance.\n. Revise the comment slightly?\n. This will leave 2nd response not closed, if any. Maybe leave a comment here if we don't have a viable way to solve it for now.\n. Save as above. In extreme cases, all 2 response will be left unclosed.\n. timeout should be a variable instantiated at L98, or it will fire once and never again. Or, remove it at all and rely on underlie clients?\n. These two constants are no longer used.\n. Also these variables.\n. I think they are used by genconfig.go but not genfallbacks.go? Nothing important anyway, it's just a command line tool.\n. What's the intention of this change?\n. So fallback-{{.ip}}: will expand to fallback-x.x.x.x:443:? The extra colon seems invalid.\n. Maybe wrap above two line with quotes? That will make it more clear.\n. Ok http://www.yaml.org/spec/1.2/spec.html#id2759963 says that Mappings use a colon and space (\u201c: \u201d) to mark each key: value pair, so it's legal yaml.\n. No formatter supplied\n. localresources/empty.txt is not added to repo.\n. The function name is a bit misleading. Can we make the name more explicit, say, GetIgnoreLocalEmpty, or tweak get a bit to also apply ignoreempty flag to files in-memory?\n. obsolete comment here\n. Actual change comes here. Others are just to make golint happier.\n. duplicate with L127\n. defer will never execute as we are using exit()\n. No need to spawn goroutine here as the code block is already wrapped in a goroutine.\n. Version and below two structure members are not used anywhere else, what's the purpose of writing them to setting file?\n. Oh I see, they are shown in Lantern UI. But by persisting them to file, they will not change across upgrades. Maybe we can set it after loading from settings file, or change lantern-ui assets directly for each version.\n. We still need the instanceId for logging. logging package can also retrieve instance id by itself.\n. Oh I didn't notice it's in panic wrapper.\n. I created a small pr https://github.com/getlantern/lantern/pull/3273 to not persist versions in settings.yaml. Do you think it's ok @myleshorton ?\nOther parts are LGTM.\n. moved all goroutines to detour.go to make the intention more explicit.\n. extract the timer from the loop below (L187 previously)\n. This for loop is unnecessary.\n. Inspired by a golang.org blog article, an alternative way would be to spawn a goroutine to receive response from channel and close the body, so we can return directly here instead of sending to channel.\nCurrent method is good enough, don't bother change it.\n. We need separate buffers to avoid race condition. sync.Pool can be employed to avoid frequent memory allocation, but let's leave it for future optimization.\n. After Lantern running for hours, 100+ goroutines blocked here, which means the caller doesn't close detour.Conn at all! Let's see how many goroutines will accumulate after running for days.\n. I'd suggest to add following lines because the command in https://docs.docker.com/machine/migrate-to-machine/ creates a machine named docker-vm instead.\nTo migrate from boot2docker:\nbash\ndocker-machine create -d virtualbox --virtualbox-import-boot2docker-vm boot2docker-vm default\n. The purpose of lantern's fork of gomobile is to skip iOS related tools right? It would be good to have instructions to install it. I encountered following error.\nbash\n ~/workspace/getlantern/lantern (valencia_ox) $ go get github.com/getlantern/mobile/cmd/gomobile\npackage github.com/getlantern/mobile/cmd/gomobile: code in directory /Users/merlin/workspace/go/src/github.com/getlantern/mobile/cmd/gomobile expects import \"golang.org/x/mobile/cmd/gomobile\"\nI removed golang.org/x/mobile directory and built aar sucessfully using following command sequence (with XCode installed).\nbash\ngo get -v golang.org/x/mobile/cmd/gomobile\n. setenv.sh\ngomobile init -v\nmake android-lib-local\n. It seems that . $DIR/prehook.sh is required to pass environment variable MODIFIED_DIRS to sub shell.\nOr, we can move L13~L18 to prehook.sh, so one can execute it manually.\n. Maybe you encountered the same problem as https://github.com/getlantern/lantern/issues/3392? \nI'm on El Capitan (10.11.2) and Xcode 7.2(7C68).\nclang -v\nApple LLVM version 7.0.2 (clang-700.1.81)\n. Should it be go get? It works to me, while go install . gives me\nenv.go:14:2: cannot find package \"github.com/kardianos/osext\" in any of:\n    /usr/local/Cellar/go/1.5.2/libexec/src/github.com/kardianos/osext (from $GOROOT)\n    /Users/fffw/workspace/go/src/github.com/kardianos/osext (from $GOPATH)\n. Seems we can safely remove these ENV definitions to avoid invalidate intermediate docker images too often. They are not used until redefined.\n. @xiam Do you think we can move all yum install, gem install and npm install commands to the beginning of Dockerfile so they will not get invalidated when we bump go version again?\n. I found that deltarpm only works for yum update, so we need to change these two lines as below to have it take effect.\nRUN yum install -y deltarpm && yum update -y && yum clean packages\nIt reduced 50 M of updates to 16 M (67% saved), not a significant save considering lots of yum install hereafter, but we can also just keep it.\nI had no knowledge of makecache but seems we benefit litle from it as we didn't supply -C option to yum install (ref Red Hat doc).\n. I encountered following warning:\n\nwarning: /var/cache/yum/x86_64/21/lantw44-arm-linux-gnueabi-toolchain/packages/arm-linux-gnueabi-filesystem-2-1.fc21.noarch.rpm: Header V3 RSA/SHA1 Signature, key ID 1bf83516: NOKEY\nPublic key for arm-linux-gnueabi-filesystem-2-1.fc21.noarch.rpm is not installed\n\nIt is misleading when I check for failed build caused by other errors. I suggest we add below line before L30.\nrpm --import https://copr-be.cloud.fedoraproject.org/results/lantw44/arm-linux-gnueabi-toolchain/pubkey.gpg && \\\n. Not used anymore\n. Replace weight based randomDialer with strategy based dialer heap.\n. We can track the fail count of each dialer instead of regexping the error output. As it's benchmarking code, it's probably ok to keep it as is.\n. Removed all timestamp checking and rely on counters for dialer checking logic.\n. I changed it to chan of empty struct mostly because chan interface{} accepts any type while chan struct{} can only accept chan struct{}{}.\n. We have a check in L78 to avoid Popping an empty heap.\nIt's the responsibility of different \"strategies\" to handle multiple good proxies. Sticky will keep using current proxy given it doesn't fail, but other strategies may introduce randomness or consider other metrics.\n. Sounds a good idea.\n. One special case is when local network just recovers, both have positive consecFailures and zero consecSuccesses, the one with smaller consecFailures is more likely reachable before network was down.\n. For HTTPS, the first a few bytes written to a connection are TLS Client Hello, no HTTP verb at this moment. I'm not 100% sure but an duplicated HTTPS handshake packet should not do much harm.\nFor 2, it will cause problem in that case. Replay is very important to detour. I just didn't find a more unobstructed way to implement it.\n. Thinking twice about throughput, there are 3 main physical factors: bandwidth, latency and packet drop rate. In normal condition, TCP flow control will gradually reach the limit of lowest bandwidth link, which is usually user's local network.\nApart from latency, the main factor to differentiate throughput among proxies is network congestion at international trunk or the network proxies reside, which is roughly random to TCP endpoints, so TCP flow control can't handle it gracefully, hence results more dropped packets. Packet dropping has two consequences:\n1. Increase the time required to Read() or connect, because of TCP retransmission.\n2. Fail to connect or close prematurely, if the congestion is serious enough.\nConsider the randomness of network congestion, the packet drop rate should be the same at each stage of a TCP connection, so statistically, the delay and fail rate to establish connections can represent the overall delay and fail rate, unless there's routing policy somewhere to drop more larger packets than smaller ones.\nThat is, we don't need to measure throughput separately. Or, if we confirmed that drop rate for large packets is higher, just periodically check with large enough payload for single packet.\nIs it right @oxtoacart ?\nInspired by:\n1. https://blog.thousandeyes.com/a-very-simple-model-for-tcp-throughput/\n2. http://bradhedlund.com/2008/12/19/how-to-calculate-tcp-throughput-for-long-distance-links/\n. Good point @oxtoacart will do more tests, maybe go further to simulate different pattern using Comcast.\n. @xiam Do you think it's useful to also track this download link, as well as the one beneath \"Get the App\" button?\n. Just a quick note: We were advertising getlantern.org for a long time, would some domain like start.getlantern.org or launch.getlantern.org be more familiar to user and help to strengthen the brand?\n. List of registered schemes. Whitelist seems more feasible.\n. Something like this is definitely a bad idea, see https://golang.org/ref/mem#tmp_7. It's a shame that I didn't read doc carefully until now.\nI made a simple demo at http://play.golang.org/p/8VJqfmzZnO. By changing the sleep time, sometimes it shows correct result, sometimes it reports deadlock.\n. We now reconfigure each time, getter is no longer required.\n. The diff here is messed up. Most of the code doesn't change indeed.\n. It is ugly to add this function as return value, but limited by current code structure, it's a quick and dirty way to fix.\n. Wrap in goroutine so we can return immediately\n. Split LoadSettings to two steps so notifiers added before Start can be called.\n. Use predefined strings as key, but keep the type private so other packages can create keys on the fly. Not useful ATM.\n. It's not meant to be used outside, but new is a keyword, so...\n. Have to use exactly this type.\n. Now we save settings whenever any entry changes, no need to save it anymore.\n. ProxyAll is false by default. If it's true, we successfully loaded file.\n. With the map implemntation, the key names become camelCased in YAML. It will invalidate users' existing settings.yaml, but it's good to keep the names in same format from YAML file to UI.\n. IIRC Lantern mobile wraps all UDP traffic and forwards to udpgw waited at 127.0.0.1:7300 on server, so we should also add that port right? That will leave UDP traffic unlimited though, but we can add more restriction later.\n. We probably don't want to introduce timeout, but use whichever connection responds first. If detour connection responds in 1s, waiting for another 4s is unnecessary, but in extremely slow network (GPRS?), it's possible that a direct accessible site takes 10s to respond (and detour connection may take longer). That's the main reason we want to improve detour.\nThe idea of buffered connection is very inspirational. Having always available connections should eliminate most work to coordinate Dial, Read and Write.\n. Here is the place to add more tests.\n. It's still not quite clear to me the various ways to locate an element on an Android app. @atavism You probably has more knowledge on that. Current test should work on API 17 (4.2.2) and above.\n. It's indeed an exponential moving average in the form of (current T + previous AvgT) / 2 though the name doesn't reflect it. If it's not smooth enough in practice we can change it to something like (current T + (previous AvgT)*9) / 10. I compared different calculation in avg_bench_test.go. Will change the name.\n. The purpose is to calculate metrics even if the dialer is not picked recently by the strategy. Check in same goroutine will block the loop, maybe spawn a dedicated goroutine? Will try.\n. Dial is a field supplied by caller.\n. Renamed Dial to DialFN and CheckedDial to dial (we don't call it outside this package anymore)\n. I removed errCh and markFailure directly to avoid blocking caller, so goroutine is no longer required.\n. Renamed AvgDialTime to EMADialTime to avoid confusion.\n. Just to prevent Travis from complaining\n. Should be gulp. gulp and libc6-dev-i386 are also prerequisites right @fliar ? It would also be better to stat that libc6-dev-i386 is Linux only.\n. Added another layer to let infinite scroll work\n. Wrap image in a fixed width/height div, so image ratio can be kept.\n. This whole bunch of code is to add ... if text is truncated.\n. Center the spinner\n. Make a deep copy, so splice doesn't modify the original object.\n. Add items only if tab is active, the key to make infinite scroll work for multiple tabs.\n. Oops I didn't notice you are commenting @myleshorton . I should use more descriptive name but on-error corresponds to the onError directive, which knows about the $scope, so it can call $scope.hideImage. With onerror we can only manipulating element properties like style.\n. Good catch @oxtoacart \n. Yes exactly. I didn't find a way to fix it.\n. Fix #4007\n. Fix #4006 by showing single line\n. Fix #3997\n. The purpose is to prevent below from happening. It's not quite easy. Maybe we can simply document it.\nv.Set(1)\ni, valid := v.Get(0) // valid can be false\n. Would increasing sleep time work? Just want a way to capture leaked goroutines. Another way would be to pprof.Lookup(\"goroutine\") and compare entries one by one.\n. We can set initial state in NewValue to avoid nil check each time.\n. grtrack is neat! To be more apparent, we can have Start to return an interface with Check(t) and CheckAfter(t, waitTime). Current implementation is good enough though.\n. Controller is not the best place to put constants, but js/constants.js is nearly obsolete. I just don't want to touch that file\n. poorman's sprintf\n. Related to https://github.com/getlantern/lantern/issues/4022\n. It seems too detailed to show path names on this page. Can we just add the link to https://github.com/getlantern/lantern/wiki/Emailing-lantern-logs?\n. It's still not unclear to me if we should keep the 5 minutes caching or not. Occasionally it took me around 30 seconds to get a response, even when the response is \"304 Not modified\". Caching would help for frequent refreshes.\n. As we are making change to this piece of code, we can refactor L75 to follow Go's pattern: check err != nil first, then bytes == nil, then rest of the code. That also fixes shadowing.\n. The variable name errr looks a bit weird to me. Maybe assign to existing err? \n. @myleshorton I don't quite understand. Do you mean to set up different link for each translation? \n. It doesn't happen to me now, could be caused by network glitches. It may take a bit longer to load feeds when Lantern starts up and old config doesn't work any more.\nOne possible way is to load cached feeds first, fetch feeds in background and replace it when succeeded, or show error page if failed. Not sure if I have a chance to make that change today.\n. Ok I see. I can do it the same way we share mobile download link with different languages.\n. Good catch @oxtoacart. @myleshorton it would be worth to add the check.\n. Consider more accurate error string?\n. Seems osext doesn't support Android. It doesn't halt the program anyway, but would be good to make it explicit.\n. Oh actually Android is Linux, but I don't know what it will get because Lantern is not an executable on Android.\n. @oxtoacart @uaalto How do you think about above idiom to report errors? It follows the usage of golog. Besides reporting to globally supplied reporter, it calls golog.Error() internally, so we can completely replace log.Errorf with it. More detailed usage is in errlog_test.go. I also replaced log.Errorf of a few packages as examples.\n. WithProxy with struct looks ugly, I'm considering splitting it to WithProxyType, WithProxyAddr, etc.\n. An alternative is free style fields similar to https://github.com/go-kit/kit/tree/master/log. As the errlog package is used only by us at this point, I chose more rigid syntax.\n. Because in most cases simply elog.Log(err) would be enough. Different set of extra parameters can be supplied in different cases. For example, user agent is useful only when error interacting with client connections.\n. userLocale can change during Lantern lifecycle. When application code does log error with locale (which should happen rarely because most code doesn't care about locale), then the information should be accurate.\n. Cool @oxtoacart ! Then we can rename it to errors package (which was the package name I initially use) and replace the standard one. I prefer errors.New(string) and errors.Wrap(error) instead of creating object directly. By changing the method signature to return errors.Error, we encourage caller to attach anything valuable to it with type casting.\n. The problem is that we can't predefine all possible codes. It's also tedious for the caller to find the correct error codes. For monitoring purpose, most operations are not to exactly match a few error codes, but list the top N errors, show the distribution, or send alert if the count exceeds some criteria. For troubleshooting, we have user id, device id, request id, ip address, etc to acurately filter the dataset.\nChanged field value does little harm as they are same in a version.\n. Yeah good catch, and also the go version, if it's built by 3rd party.\n. In fact DNS server is better as it's what we expect to see on the dashboard!\n. It's for logging purpose, I should rename the method to make it explicit. The format to report depends on the actual reporter.\n. With the new suggestion by @oxtoacart we can define Error in errors package, and extend golog to simply recognize it.\n. Yeah @uaalto , but it seems that we'll move the functionality to golog.\n. So here's the new API. It seems more expressive and requires less keystoke. @oxtoacart @uaalto any thoughts?\nInstead of changing golog package, I make errors package to call golog.Error() if logging flag is set globally. With the stack package, we can attach the call stack when error is created, and attach another call stack when error is reported, if necessary.\n. A function call is inevitable to applyDefaults and attach the stack, and should at the very place the Error is created (to get the accurate stack). It seems like we should avoid creating Error manually.\n. I choose WithOp simply because Op is already a struct field, other method calls are without \"With\". Nothing significant, but I choose to lazily create ProxyingInfo/UserLocale/UserAgentInfo etc. Method call can hide the details of how the fields are structured. Only the reporter needs those details.\nIf we allow manually creating Error, then the struct should be flat, or we'll end up with:\nreturn &errors.Error{\n    Desc: \"some error\",\n    Op: \"connect\",\n    ProxyingInfo: &errors.ProxyingInfo{\n      ProxyType: errors.NoProxy,\n      ProxyAddr: \"...\",\n    }\n    Extra: map[string]string{\n        \"some_counter\": 1,\n    }\n}\ninstead of\nreturn errors.New(\"some error\").WithOp(\"connect\").\n    ProxyType(errors.NoProxy).ProxyAddr(\"...\").With(\"some_counter\", 1)\n. Unfortunately, Reporter has to know the structure to selectively report certain fields or have some transformation. I did think about exporting a flat map[string]interface{} to Reporter, but that still losses static check of name and type.\n. Maybe shorter names: Parallel and ChainedFirst\n. To output in time and accurate report, we probably also need a timer that for every 10 minutes or so, errors should be sent even the buffer is not full.\n. Aggregating errors is tricky as different error has different set of fields available. Error volume should be very low in normal time, but will burst when there's connectivity issue or server is blocked. Rate limiting may be more useful in that case.\n. branchedFrom is only used here, and only get set when spawning new Goroutine, in which case parent is always nil. Merge to single field?\n. In fact I need to carefully scan the code to find the meaning of branchedFrom and parent.\n. Thanks! Will add them.\n. Nice suggestion. I should add comments for both. To reduce the chance of an unreachable site, we can remember recent sites, check against them in round robin, and remove those failed ones.\n. I changed the translation key.\n. Have to put it here, or we'll get race condition during test.\n. So below is various conditions that a dialer is checked.\n. When you run tests, you'll see that nextCheck will rapidly increase with newCF, even without the dialer actually has a chance to be checked. I think it's fine. More consecutive failures mean that it's more likely to fail again, while single failure suggests a temporary network glitch.\nIf network temporarily goes down for a few seconds and comes up again, there can be a maximum of 5(ServerBlacklistingThreshold/2) * 5 * 10 (nextCheckFactor) = 250 seconds delay for a dialer to refresh its metrics if other dialers take precedence. It should rarely happen as other dialers also fail in that case.\n. Ha I'm just too lazy to exclude current dialer from the list. Dial may also use multiple dialers if first one fails.\n. Good catch. It's ok to keep it private and simple ATM.\n. Yeah. It's even irrelevant if the proxy is dialable or not.\n. You made me think that we probably want to check both HTTP and HTTPS. HTTPS is way more popular while HTTP forwarding is more sophisticated. Maybe not over implement this time.\n. It's a bit unusual to have common code depending on a package used only on mobile. I don't have better option, though.\n. We can skip tests at all by using make.bash instead, which should speed up the build process a lot.\nhttps://golang.org/doc/install/source#install\n. op.Enter() will change current context right? errors.New() also takes current context into consideration. IIUC op.Error() here is unnecessary.\nI do prefer to avoid any implicit correlation between errors and ops, but if we can't avoid it, we'd better disallow explicit link between them to avoid confusing.\n. Ok, I see. op.Error() is not to construct an error object, but to mark the op as failed. I suggest to rename it to op.Failed() and without chaining. Reducing the mental burden is way more important than saving lines of code.\n. Without scanning the code, I never know that op.Exit reports failure. We probably need to totally separate those concept entities.\n. It's just large enough to avoid panicking. I can add a comment\n. @oxtoacart I added comment here\n. Oh I thought 5 would be large enough. How about 50? ^^\nLet me think a bit about the way to avoid useless Add here\n. Here's the bug that causes the test to fail randomly. Changing to UnixNano yields more reliable timing.\n. Check() always returns true, to prevent it from checking multiple times.\n. It's very impressive seeing a single line of error to produce comprehensive context and stack traces.\n. It would be better to comment here why it embeds http.Handler\n. As there's no strong tie between Collector and http.Handler, would it be better to have a method AsHTTPHandler() http.Handler instead of embedding it directly?\n. In my understanding, a Collector should continuously run once started and until being told to stop. I saw Wait() only called in standalone application and tests. If something prevents collector from working, say, when network is totally down for a while, it's better to drop what can't be submitted and continue working, or the caller has to care about Wait and restart it again.\n. It would increase the size of the measurement a lot. Unlike tags which is de-duplicated compound by nature, fields are are stored per each timestamp. If the key is designated as dimension, it's probably safe to just store it as tag.\n. It will panic if hiddenID is less than 8 bytes. Just a hint. Should be safe to ignore the check in our case.\n. Why comment tests here?\n. Switch to errors.New?\n. FailIf and Errorf may create confusing what is the best way to write error handling code, as there are multiple ways for similar purpose (saw some of them in this PR):\n- log.Errorf(...)\n- log.Error(errors.New(...))\n- log.Error(op.FailIf(errors.New(...)))\n- log.Error(op.Errorf(...)))\nAnother example:\nif err != nil {\n  return nil, op.FailIf(err)\n}\nIt's awkward to call FailIf when err is not nil for sure.\nAs simple wrappers, FailIf and Errorf creates more problems than solved. I vote to remove op.Errorf and rename op.FailIf() to op.Fail() without returning anything. So someone needs to do multiple things should call each individually, see below: \nn, err := doSomething()\nif err != nil {\n  op.Fail(err)\n  log.Error(err)\n}\nreturn n, err\nBy provide only one way to do one thing, we make the code more understandable and encourage caller to think a bit on questions like \"why return the same error after marking the op as Fail and logging the error?\" or \"is it the right place to call op.Fail?\"\n. We replaced \"getlantern/testify\" with \"stretchr/testify\". It should be removed from repo.\n. go-flowrate is not used anywhere in client\n. iniflags is only used by http-proxy-lantern. I guess it sneaked in by go get \n. Shouldn't this be !isTimeout(ew)?\n. I mean you are checking err which is always nil here. Should be ew instead.\n. If we continue to loop here if no error, whether it's timeout or not, has occurred in previous iteration, the flaw I mentioned is fixed.\n. I've read some article says that Go net package wraps OS level non-blocking IO into blocked ones, that explains why setting deadline can affect ongoing operations.\n. Here's the main change. Select from current dialers instead of a copy of dialers.\n. Moved from strategy.go\n. Code simplified a bit with an always available balancer\n. 10s should be long enough to dial a proxy, from anywhere.\n. Always use chainedDialTimeout. tlsdialer's default is 1 minute!\n. This is the real change. errors has its own format to print stack, so it's not that beneficial to use a MultiLine interface.\n. I also added indention so the log looks a bit clearer\n. As a separate package, 1 min should be good enough. Windows has a 72s timeout initially.\n. Good catch @oxtoacart \n. @oxtoacart I didn't change to RLock though the lock is indeed RWMutex. There are heap operations at the end.\nI extracted the code to separate method to ensure the mutex is always unlocked. \n. It's meaningless to randomize if we run it every 24 hours.\n. It looks like we can use the same logic to fetch/serve/persist global config and proxies. What you did in proxies.go is much cleaner to me than the callbacks in yamlconf.\n. This whole section can be part of proxyConfig itself. \nproxyConfig, err := config.NewProxyConfig(proxiesPath, obfuscate(flagsAsMap))\n...\ngo func() {\n  for {\n    cl.Configure(<-proxyConfig.C, deviceID)\n  }\n}()\n. It works only if the client has a single dialer. It's sufficient for current free clients\n. Not the initial intention for this PR, but logging dial time tells us how the client behaves from user submitted logs.\n. The lines can be simplified as:\nvar cpuProf, memProf string\nif cpu, cok := app.Flags[\"cpuprofile\"]; cok {\n    cpuProf = cpu.(string)\n}\n. The goroutine is not required as enableAutoupdate doesn't block.\ncfgMutex is only used here, can be removed too.\n. PipeConfig looks too complicated to me. I'm trying a refactor to hide the channels in config package itself and uses interface to unmarshal/obfuscate/validate etc.\n. Hmm, it does nothing better than the current method. We can do a small change here, though: merge the parameters to a single Options struct, so from the caller side, we know what's the purpose of each parameter, and how they are strongly correlated.\n. PipeConfig accept ChainedFrontedURLs as a parameter, but the possible values are defined in the very same file. Consider move these constants up to flashlight package as a separate file like config_urls.go?\n. If one dialer fails or becomes slower than others, the weight will be changed so other dialers take precedence. Yeah, it requires 10s (dial timeout) to notice if a proxy stops response. With the added dial time logging, we can have a better understanding how it behaves from user logs.\nParallelly dialing multiple proxies does work better, but it wastes resourse on both proxy and client, and increases the total file descriptors. A better apprach would be:\n1. keep persistent connection to each proxy (disconnect it randomly to be less noticable).\n2. keep calculating the throughput and RTT.\n3. when new requests come in, forward the request via the fastest proxy, write to a LRU association table.\n4. always forward follow-up requests of that domain to same proxy, unless the metrics of that proxy becomes unacceptable.\nIt requires significant change on both client and proxy, but should be worth doing if the rationale is solid.\n. We can either remove this goroutine, or the one inside enableAutoupdate\n. It's quite interesting to me how genconfig.go could run correctly without using the correct template. However, the generated proxiedsites.go and fallbacks.go is used nowhere.\n. In case  lantern_aws is not in the default path\n. Again, the generated masquerades.go is used nowhere\n. Unused var\n. There's nothing to return now. We can change the signature\n. I'm a bit confused here @xiam . packagePublicKey is used nowhere , while src/github.com/getlantern/autoupdate/keys.go contains PackagePublicKey which is the same as what defined in  src/github.com/getlantern/flashlight/app/autoupdate.go.\n. Which branch were you grepping @xiam ? I couldn't find below line on pro-backend branch.\n./github.com/getlantern/flashlight/app/app.go:  autoupdate.PublicKey = []byte(packagePublicKey)\n. Oh, I see. The line is removed in pro-backend\n. ",
    "silentmoose": "@fffw mind telling me why we closed this? I don't mind it not being pulled, but a little communication on why is nice\n. @fffw My apologies, i believe you mentioned me in the orginal issue. Thanks for your reply\n. ",
    "xiam": "Thanks a lot @aranhoide, I agree with you on all your points, let me check my PR again.\n. @aranhoide Could you help me with another review?\nThanks!\n. @aranhoide, @myleshorton what do you think of the new proposal for balancer.New()?\n. @aranhoide Oh, I also added them at the bottom of the corresponding functions.\n. Thanks for your review and comments @aranhoide!\n. Thanks @atavism\n. Looks fine @myleshorton, thanks.\n. Hello @aranhoide, \nYou already closed the issue but I think this should be fixed, could you take a look?\nThanks,\n. Sure @fffw \n. Hey @fffw, \nDo you think you can help me reviewing this one?\nThanks,\nJos\u00e9 Carlos\n. Thanks @fffw, I think you have some valuable suggestions, let me give it another check.\n. Please take another look @fffw \n. Hey @myleshorton, this could help with our release process. Would you like to review it?\n. Sounds good!\n. > We will ultimately also have to actually commit these binaries to the lantern-binaries repo since that's where they're primarily referenced (from the web site, for example)\nI think this is done @myleshorton, would you mind reviewing and testing it again?\n. Hello @fffw,\nThis will indeed stop timeout errors from being reported but may contribute to have idle connections (and open file descriptors). Why not increasing the timeout instead?\n. Hey @fffw, would you still like to keep this one opened?\n. Thanks @fffw! I fixed the wrong argument and I initially thought we would not be able to remove the \"garbage\" bytes but I kept on investigating and I found another solution. Could you give it a look again?\n. I took your suggestions @fffw, care to look again?\n. @fffw awesome! thanks.\n. Hello @fffw, would you like to help me reviewing this one?\n. Hello @fffw, I think you're right, lets remove the quotes!\n. Hello guys.\nAny chance we could also enable the proxy-all feature from a command line option? It would really help us spotting and fixing some important issues.\nThanks!\n. Hey guys, this is the one we need to review before rebuilding the .so for Firetweet, right?\n. Looks good and our tests run fine too, but an odd message shows up:\nenproxy: conn_intf.go:239 Failing on Dest: www.google.com:80    ProxyHost:     Unable to issue write request: Bad response status for read: 302 Moved Temporarily\nenproxy: conn_intf.go:239 Failing on Bad response status for read: 302 Moved Temporarily\nI'll check conn_intf to make sure this is not something we should worry about.\n. Yes, double checked and there's nothing to worry about that message, the problem is with the proxy that is being tested, so maybe the only one that remains is the comment from @atavism.\n. @myleshorton on it!\n. Looks good, the travis build is failing but that's a completely different problem.\n. Cool, thanks. I'll just wait for the test to finish just to be sure. \n. This should be reviewed after merging https://github.com/getlantern/lantern/pull/2583\n. Sure!\n. Hey @myleshorton,\nSeems like you are also adding unrelated stuff to the repo:\ngit diff --name-only issue2589 valencia\nSee the freetype and Go stuff.\nThis is probably due to this gost bug: https://github.com/getlantern/gost/issues/2\n. Looks like github.com/rogpeppe/godef and 9fans.net/go were added too, what do we need them for?   github.com/rogpeppe/godef depends on 9fans.net/go, but no other package depends on github.com/roggpeppe/godef.\n. Of course, makes perfect sense! good stuff @myleshorton, thanks!\n. This one looks better, thanks @myleshorton!\n. Looks good to me!\n. Thanks a lot @myleshorton! Sorry I was not able to take a stab at that one, I'm taking a look at the PR. Hope to get a conclusion on #2184 soon. \n. Looks good to me, tests are failing for other reasons.\n. Travis is showing an error:\n```\n--- FAIL: TestCreateAndRefresh-2 (0.16s)\n    Location:   cfr_test.go:47\n    Error:      No error is expected but got Processing your request will cause you to exceed the maximum number of distributions allowed.\n    Messages:   Should be able to create distribution\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n    panic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x465da0]\n```\nIt seems like it's related to Cloudflare, do you think it has to do something with your PR?\n. Hello @myleshorton,\nCould you test this one?\nThanks.\n. @myleshorton I agree, we should do this periodically but I'm not sure what would be the best way to enforce this update without keeping it here. Maybe we can just simply take this as part of the support routine?\n. That's right @myleshorton. I guess it would be better just to do it by hand from time to time and make sure we actually commit the modified files.\n. Looks good @uaalto, I just have a comment on the Makefile and I think we also need to update the README.md accordingly (we are not going to generate a libgojni.so anymore, right?).\n. I tested the new android-lib target @uaalto, cool stuff!\nI'd just add a note in the docs for the new .aar file that replaces our old libgojni.so.\nfind . | grep .aar\n./src/github.com/getlantern/lantern-mobile/libflashlight.aar\nThanks!\n. Looks good @uaalto, but today the target is failing:\nmake android-lib\n2015/07/24 16:05:53 Failed: exit status 1\nINFO[0244] The command [/bin/sh -c cd $GOROOT/src && ./all.bash] returned a non-zero code: 1\nmake: *** [docker-mobile] Error 1\nThis was working yesterday, do you think this is due to go1.5 being unstable?\n. Yeah, right now I'm trying make clean and removing the docker image. Let's see if that works.\n. Nope, this is still not working,\nThis error is just above the other one I already posted:\n--- FAIL: TestCPUProfileMultithreaded (0.26s)\n    pprof_test.go:165: total 12 CPU profile samples collected\n    pprof_test.go:181: runtime/pprof_test.cpuHog1: 0\n    pprof_test.go:181: runtime/pprof_test.cpuHog2: 11\n    pprof_test.go:195: runtime/pprof_test.cpuHog1 has 0 samples out of 11, want at least 1, ideally 5\nFAIL\nFAIL    runtime/pprof   6.538s\n--- FAIL: TestTraceStress (1.42s)\n    trace_test.go:226: failed to parse trace: p 4 is running before start (offset 613, time 103442316)\n--- FAIL: TestTraceFutileWakeup (0.24s)\n    trace_test.go:433: failed to parse trace: g 161 is not runnable before start (offset 78284, time 42728926)\nFAIL\nFAIL    runtime/trace   2.5\nI'll try to track down this issue...\n. After a few tries it worked. We need to test again once go1.5 is marked as stable.\n. Exciting stuff. Thanks @uaalto.\n. Sure!\n. @myleshorton is there any way we can remove the shortcut icon automatically after uninstalling Lantern? There is also a Lantern icon that remains in the start menu.\n\n. Otherwise looks and install fine :-).\n. Great @myleshorton, this working fine now. Thanks!\n. @uaalto I actually think not bothering the users with technical details is better, when I install something in Windows I just click the \"Next\" button until the thing gets installed. I also think choosing a destination folder may be handy when the program to be installed is huge but this is not the case with Lantern.\n. > I actually was referring to the whole process, not the icon. When I run the installer, it just showed the progress bar directly from the double-click, no next button or anything.\nSorry, I was referring to a standard installation on Windows, clicking \"Next\" is what I'd typically do, but I would rather not bother clicking or reading anything to install a program, that's why I like the current Lantern installation on Windows.\n. Yeah, heh! I feel like a pirate. I just sen't a fix.\n. Sounds awesome, let's see.\n. Thanks @myleshorton, it works great when another Lantern instance is already running. It opens Lantern's interface in a browser window and then exits.\n. Looks good @myleshorton, merged!\n. @uaalto We have this waitForExit() function that blocks until something writes to exitCh in flashlight.go, I was thinking if there is any strong reason to spawn a goroutine only for the ListenAndServe() blocks on both client and server code instead of making runClientProxy() and runServerProxy() run inside goroutines. Something like this:\n``` go\n  log.Debug(\"Running proxy\")\n  if cfg.IsDownstream() {\n    // This will open a proxy on the address and port given by -addr\n    go runClientProxy(cfg)\n  } else {\n    go runServerProxy(cfg)\n  }\nreturn waitForExit()\n```\nI think that would make this part of the code more clear on the blocking nature of waitForExit(), and if runServerProxy() ever needs to block itself for some reason (like after calling a srv.ListenAndServe()) it still can do it without affecting code around it.\nWhat do you think?\n. Thanks @uaalto!\n. I'll take this one, if you don't mind @uaalto. It's related to the #2776 issue.\n. Merged! thanks @myleshorton \n. Hey @fffw, @myleshorton,\nCould you help me reviewing this one? It should help us closing #2776. \nThanks.\n. @uaalto I have seen this test failing often, do we know the reason of the failure? Would it be safe to skip it?\n. Hey @myleshorton! I think this is all what we need to ensure beta8 Manoto clients will update themselves to 2.0.0. We can merge it anytime, but we need to run a full simulation before releasing 2.0.0.\n. Create a fake 2.0.0-beta8+manoto release, install and run the package once in order to create a YAML file.\nSet the following values in the current config yaml file:\nyaml\ncloudconfig: \"disabled-for-testing\"\nclient:\n  frontedservers:\n  - host: issue-2870.getlantern.org\n    port: 443\n    poolsize: 30\n    maxmasquerades: 20\n    insecureskipverify: true\n    bufferrequests: false\n    dialtimeoutmillis: 0\n    redialattempts: 2\n    weight: 4000\n    qos: 10\n    trusted: true\n  chainedservers: {}\nThe intention of that is to redirect Lantern traffic to a test proxy server that was specifically modified to redirect requests to update.getlantern.org to a custom IP on which a test update server is running.\nWhat the output of the Lantern process, it must eventually log the update process:\ntail -f log.txt | grep update\nAug 04 14:42:36.195 - 0m0s DEBUG proxiedsites: proxiedsites.go:134 Applied updated configuration\nAug 04 14:42:36.260 - 0m0s DEBUG flashlight.autoupdate: autoupdate.go:78 Software version: 2.0.0-beta8+manoto\nAug 04 14:42:36.260 - 0m0s DEBUG autoupdate: autoupdate.go:59 Defaulted CheckInterval to 4h0m0s\nAug 04 14:42:36.372 - 0m0s DEBUG balancer: balancer.go:96 Dialing tcp://update.getlantern.org:443 with (trusted) fronted proxy at issue-2870.getlantern.org:443\nAug 04 14:42:37.140 - 0m1s DEBUG balancer: balancer.go:103 Successfully dialed to tcp://update.getlantern.org:443 on pass 0\nAug 04 14:42:37.798 - 0m1s DEBUG autoupdate: autoupdate.go:81 Attempting to update to 2.0.0-beta9+manoto.\nAug 04 14:42:43.264 - 0m7s DEBUG autoupdate: autoupdate.go:89 Patching succeeded!\nAug 04 14:42:43.264 - 0m7s DEBUG flashlight.autoupdate: autoupdate.go:103 Got update.\nIf everything goes according to plan, 2.0.0-beta8+manoto will upgrade to 2.0.0-beta9+manoto which in turn will upgrade itself (the next time Lantern is started) to 2.0.0\nAug 04 14:43:32.634 - 0m0s DEBUG proxiedsites: proxiedsites.go:134 Applied updated configuration\nAug 04 14:43:32.693 - 0m0s DEBUG flashlight.autoupdate: autoupdate.go:78 Software version: 2.0.0-beta9+manoto\nAug 04 14:43:32.693 - 0m0s DEBUG autoupdate: autoupdate.go:59 Defaulted CheckInterval to 4h0m0s\nAug 04 14:43:32.799 - 0m0s DEBUG balancer: balancer.go:96 Dialing tcp://update.getlantern.org:443 with (trusted) fronted proxy at issue-2870.getlantern.org:443\nAug 04 14:43:33.046 - 0m0s DEBUG balancer: balancer.go:103 Successfully dialed to tcp://update.getlantern.org:443 on pass 0\nAug 04 14:43:34.111 - 0m1s DEBUG autoupdate: autoupdate.go:81 Attempting to update to 2.0.0.\nAug 04 14:43:39.195 - 0m6s DEBUG autoupdate: autoupdate.go:89 Patching succeeded!\nAug 04 14:43:39.195 - 0m6s DEBUG flashlight.autoupdate: autoupdate.go:103 Got update.\n. Testing on Windows look good so far:\n\n\n\n. Testing on OSX:\nFrom beta8 to beta9\ntail -f log.txt | grep update\nAug 04 14:42:36.195 - 0m0s DEBUG proxiedsites: proxiedsites.go:134 Applied updated configuration\nAug 04 14:42:36.260 - 0m0s DEBUG flashlight.autoupdate: autoupdate.go:78 Software version: 2.0.0-beta8+manoto\nAug 04 14:42:36.260 - 0m0s DEBUG autoupdate: autoupdate.go:59 Defaulted CheckInterval to 4h0m0s\nAug 04 14:42:36.372 - 0m0s DEBUG balancer: balancer.go:96 Dialing tcp://update.getlantern.org:443 with (trusted) fronted proxy at issue-2870.getlantern.org:443\nAug 04 14:42:37.140 - 0m1s DEBUG balancer: balancer.go:103 Successfully dialed to tcp://update.getlantern.org:443 on pass 0\nAug 04 14:42:37.798 - 0m1s DEBUG autoupdate: autoupdate.go:81 Attempting to update to 2.0.0-beta9+manoto.\nAug 04 14:42:43.264 - 0m7s DEBUG autoupdate: autoupdate.go:89 Patching succeeded!\nAug 04 14:42:43.264 - 0m7s DEBUG flashlight.autoupdate: autoupdate.go:103 Got update.\nFrom beta9 to 2.0.0\nAug 04 14:43:32.634 - 0m0s DEBUG proxiedsites: proxiedsites.go:134 Applied updated configuration\nAug 04 14:43:32.693 - 0m0s DEBUG flashlight.autoupdate: autoupdate.go:78 Software version: 2.0.0-beta9+manoto\nAug 04 14:43:32.693 - 0m0s DEBUG autoupdate: autoupdate.go:59 Defaulted CheckInterval to 4h0m0s\nAug 04 14:43:32.799 - 0m0s DEBUG balancer: balancer.go:96 Dialing tcp://update.getlantern.org:443 with (trusted) fronted proxy at issue-2870.getlantern.org:443\nAug 04 14:43:33.046 - 0m0s DEBUG balancer: balancer.go:103 Successfully dialed to tcp://update.getlantern.org:443 on pass 0\nAug 04 14:43:34.111 - 0m1s DEBUG autoupdate: autoupdate.go:81 Attempting to update to 2.0.0.\nAug 04 14:43:39.195 - 0m6s DEBUG autoupdate: autoupdate.go:89 Patching succeeded!\nAug 04 14:43:39.195 - 0m6s DEBUG flashlight.autoupdate: autoupdate.go:103 Got update.\n. @myleshorton Sorry, maybe I misunderstood that one, we can't do that because for our semver library 2.0.0 < 2.0.0+manoto (after the + sign it relies on string comparison), we need something that holds this ordering:\n2.0.0-beta8 < 2.0.0-beta8+manoto < 2.0.0-beta9+manoto < 2.0.0\n. > Also does your first log indicate this isn't working on OSX (the update from beta8 to beta9 in your example)?\nRight! I used an incorrect one, that had to do with our 10s timeout waiting for the update server to respond, the first time it has to compute a patch it may take a while, the patch is cached after this first generation so the second request does not suffer from this delay. I fixed it now.\n. The 2.0.0-beta9+manoto is an interim version and does not actually need to be published anywhere but in the releases page, and we only need the update binaries.\n. @myleshorton I think that would do! I'll need to so a small change on the server though but nothing to worry about.\n. Confirmed that this is working on Linux 32 and 64 too:\nAug 04 16:22:41.316 - 0m0s DEBUG proxiedsites: proxiedsites.go:134 Applied updated configuration\nAug 04 16:22:41.368 - 0m0s DEBUG flashlight.autoupdate: autoupdate.go:78 Software version: 2.0.0-beta8+manoto\nAug 04 16:22:41.368 - 0m0s DEBUG autoupdate: autoupdate.go:59 Defaulted CheckInterval to 4h0m0s\nAug 04 16:22:42.034 - 0m0s DEBUG balancer: balancer.go:96 Dialing tcp://update.getlantern.org:443 with (trusted) fronted proxy at issue-2870.getlantern.org:443\nAug 04 16:22:42.320 - 0m1s DEBUG balancer: balancer.go:103 Successfully dialed to tcp://update.getlantern.org:443 on pass 0\nAug 04 16:22:43.129 - 0m1s DEBUG autoupdate: autoupdate.go:81 Attempting to update to 2.0.0-beta9+manoto.\nAug 04 16:22:53.422 - 0m12s DEBUG autoupdate: autoupdate.go:89 Patching succeeded!\nAug 04 16:22:53.431 - 0m12s DEBUG flashlight.autoupdate: autoupdate.go:103 Got update.\nAug 04 16:24:59.369 - 0m0s DEBUG proxiedsites: proxiedsites.go:134 Applied updated configuration\nAug 04 16:24:59.431 - 0m0s DEBUG flashlight.autoupdate: autoupdate.go:78 Software version: 2.0.0-beta9+manoto\nAug 04 16:24:59.431 - 0m0s DEBUG autoupdate: autoupdate.go:59 Defaulted CheckInterval to 4h0m0s\nAug 04 16:25:00.059 - 0m0s DEBUG balancer: balancer.go:96 Dialing tcp://update.getlantern.org:443 with (trusted) fronted proxy at issue-2870.getlantern.org:443\nAug 04 16:25:00.301 - 0m1s DEBUG balancer: balancer.go:103 Successfully dialed to tcp://update.getlantern.org:443 on pass 0\nAug 04 16:25:01.543 - 0m2s DEBUG autoupdate: autoupdate.go:81 Attempting to update to 2.0.0.\nAug 04 16:25:08.203 - 0m8s DEBUG autoupdate: autoupdate.go:89 Patching succeeded!\nAug 04 16:25:08.207 - 0m8s DEBUG flashlight.autoupdate: autoupdate.go:103 Got update.\nWe need to run tests again after #2871 with the 2.0.0+manoto and 2.0.0-stable releases.\n. @myleshorton I did another pass, I was wrong with the 2.0.0+manoto < 2.0.0+stable assumption. See https://github.com/getlantern/lantern/pull/2870/files#r36222181.\nI also added special code that looks for all known beta8 (manoto) checksums and changes the version accordingly.\n. Wait, I'm getting a weird result on my testing with this latest change.\n. @myleshorton All right, it was a server configuration issue. If you want to test this you can grab the manoto version, run it once, stop it and hack the YAML file then run it again.\nAug 04 18:35:31.342 - 0m0s DEBUG flashlight.autoupdate: autoupdate.go:78 Software version: 2.0.0-beta8\nAug 04 18:35:31.342 - 0m0s DEBUG autoupdate: autoupdate.go:59 Defaulted CheckInterval to 4h0m0s\nAug 04 18:35:31.465 - 0m0s DEBUG balancer: balancer.go:96 Dialing tcp://update.getlantern.org:443 with (trusted) fronted proxy at issue-2870.getlantern.org:443\nAug 04 18:35:32.885 - 0m1s DEBUG autoupdate: autoupdate.go:81 Attempting to update to 2.0.0+manoto.\nAug 04 18:35:32.886 - 0m1s DEBUG balancer: balancer.go:96 Dialing tcp://update.getlantern.org:443 with (trusted) fronted proxy at issue-2870.getlantern.org:443\nAug 04 18:35:34.309 - 0m3s DEBUG autoupdate: autoupdate.go:89 Patching succeeded!\nAug 04 18:35:34.309 - 0m3s DEBUG flashlight.autoupdate: autoupdate.go:103 Got update.\nIf you run into this message:\nAug 04 18:43:18.765 - 0m11s DEBUG enproxy: conn_impl.go:45 Proxy connection to update.getlantern.org:443 via 45.55.156.141:443 idle for 10s, closing\nAug 04 18:43:18.870 - 0m11s ERROR autoupdate: autoupdate.go:97 Problem checking for update: Problem fetching update: Post https://update.getlantern.org/update: EOF\nThen stop the process and run it again. This is the bsdiff utility taking a long time to generate the initial patch and it only happens the first time a new patch is generated, nothing to worry, the first client will eventually try to update again after some hours, the second client that does the same request will not experiment such delay.\nNote that the next time you start that binary the version will say 2.0.0-beta9 because I actually didn't update my tests binaries, I only renamed the release to 2.0.0+manoto.\n. > Hmn..for some reason my local config keeps getting overwritten...will keep playing with this.\nThats odd @myleshorton.\nMake sure you disabled cloudconfig:\ncloudconfig: \"disabled-for-testing\"\nAnd that you only have this frontedserver (you can leave other fields under client untouched):\nclient:\n  frontedservers:\n  - host: issue-2870.getlantern.org\n    port: 443\n    poolsize: 30\n    maxmasquerades: 20\n    insecureskipverify: true\n    bufferrequests: false\n    dialtimeoutmillis: 0\n    redialattempts: 2\n    weight: 4000\n    qos: 10\n    trusted: true\nAnd you could rename chainedservers to chainedserversx instead of deleting it, that's easier. Then add this one before chainedserverx\nchainedservers: {}\n. Let's make sure we run a final test on this issue after taking a decision on https://github.com/getlantern/lantern/issues/2869\n. OK @myleshorton , let's take a look.\n. @myleshorton each one of the Makefile targets does something, except this new manoto target, it only sets a variable, so if we call it directly we'll se something like:\nmake manoto\nmake: `manoto' is up to date.\nIt would be probably better to do something like\nMANOTO=1 make packages\nThe Makefile would look for the MANOTO env variable and set the current MANOTO (which we probably should rename to something more general like PACKAGE_SETTINGS) based on the presence of the MANOTO variable. We are already doing something similar with the HEADLESS variable.\nHEADLESS=1 make packages\nThis HEADLESS is checked in define build-tags and the BUILD_TAGS variable is modified based on the presence of that value.\nThat makes more sense to me, but what do you think? I could take a stab at that detail.\n. Almost there. Thanks @myleshorton!\n. @myleshorton could you check this one for #2871? Thanks!\n. Thanks @myleshorton. Everything should be set now.\n. Thanks @uaalto,\nHave you seen this error?\n```\ngomobile: go build -p=4 -pkgdir=/pkg/gomobile/pkg_android_arm -tags=\"\" -ldflags -w -buildmode=c-shared -o=/tmp/gomobile-work-268728515/android/src/main/jniLibs/armeabi-v7a/libgojni.so /tmp/gomobile-work-268728515/androidlib/main.go failed: exit status 1\n/tmp/gomobile-work-268728515/androidlib/main.go:5:2: cannot find package \"golang.org/x/mobile/bind/java\" in any of:\n    /go/src/golang.org/x/mobile/bind/java (from $GOROOT)\n    /src/golang.org/x/mobile/bind/java (from $GOPATH)\n/tmp/gomobile-work-268728515/go_client/go_clientmain.go:9:2: cannot find package \"golang.org/x/mobile/bind/seq\" in any of:\n    /go/src/golang.org/x/mobile/bind/seq (from $GOROOT)\n    /src/golang.org/x/mobile/bind/seq (from $GOPATH)\nmake: *** [android-lib] Error 1\n``\n. Thanks! I'm going to try rebuilding it.\n. Works now. Thanks!\n. I confirmed that this change removes the \"Lantern\" and the \"value\" string values from theRun` key.\n. This will help closing https://github.com/getlantern/lantern/issues/2791, thanks @myleshorton \n. Awesome @fffw, let's carefully review this one.\n. Hey @fffw, this PR looks great. I just added a few comments on it, what do you think? I'll take another close look afterwards.\n. This PR looks good to me but our tests are failing due to an apparently unrelated error. I'm going to take a closer look to that.\n. Yep, unrelated errors. Merging! thanks a lot @fffw.\n. Got it @uaalto, thanks!\n. Oops, closed by mistake.\n. Tests are failing on this PR:\n```\ngithub.com/getlantern/lantern-mobile\nsrc/github.com/getlantern/lantern-mobile/interface_test.go:74: not enough arguments in call to RunClientProxy\nsrc/github.com/getlantern/lantern-mobile/interface_test.go:94: not enough arguments in call to RunClientProxy\n```\n. Thanks @uaalto, this is both compiling and working fine for me.\n. Hello @uaalto,\nThis is what happens on Firefox/Win using your branch:\nAfter closing Lantern the \"Waiting for Lantern\" message appears.\n\nA while we see the \"Not running anymore\" message:\n\nAnd after restarting Lantern and waiting about a minute Lantern goes back to normal:\n\nBut the difference is not too clear to me (as an user) yet, because the very same thing happened before the change, as an user I have no need to open a new page or to do anything by hand (which I actually think is good).\n. > Are you saying that if you leave the old page alone, that was showing the message \"Lantern appears not to be running anymore\", and you run Lantern again, after a minute or so the page will reload automatically?\nThat's right, I'll send you a video.\n. @uaalto I confirm this was a problem with my testing. And the result does not actually look confusing at all as I was supposing :-).\n. Thanks @uaalto \n. Done. Thanks @myleshorton.\n. Hey @myleshorton, While reviewing your https://github.com/getlantern/lantern/pull/2930 PR I noticed we weren't chaining some s3cmd commands, this change should fix them. Could you take a look at it?\n. Hey @myleshorton, mind to take a look at this PR? You should see something like this:\n\nThanks,\n. Hey @myleshorton, I applied your suggestions from the  https://github.com/getlantern/lantern/issues/2733 PR :).\n. Hey @uaalto, I'm checking Windows right now, is this still relevant? What do we need this for?\n. I tested with a random pfx file, it looks like the lantern_darwin_amd64 is different from the lantern binary:\n```\n\ngsha1sum /Applications/Lantern.app/Contents/MacOS/lantern\n656d31e3638d8af9e3ed00c7ab9425bf8c2f7162  /Applications/Lantern.app/Contents/MacOS/lantern\ngsha1sum Lantern.app/Contents/MacOS/lantern\n656d31e3638d8af9e3ed00c7ab9425bf8c2f7162  Lantern.app/Contents/MacOS/lantern\ngsha1sum lantern_darwin_amd64\n8e7a1710dc8f9d1707f26f8684c580131c85efa7  lantern_darwin_amd64\n```\n. The same happens with Windows:\n\n```\ngsha1sum update_windows_386\n2eb8b2896a50455061c4e90554ec67d051503b6c  update_windows_386\ngsha1sum lantern.exe\nf3d6dbb4d8caa2a17ddd2b4048750f6aed9a7673  /Users/rev/Shared/lantern.exe\ngsha1sum lantern_windows_386.exe\na9eca0d2681b2d10bd0211bfe1a1182b6b4b44f9  lantern_windows_386.exe\n```\nBut it does not happen on Linux.\nDoes signing the installer change the binary?\n. Windows has 3 different hashes, in this case:\nlantern_windows_386.exe is unsigned.\nupdate_windows_386 is signed.\nlantern.exe was affected by the installer signature.\nIs that right?\n. Yeah, I uncompressed the update_windows_386.bz2 file:\n```\ngsha1sum update_windows_386\n2eb8b2896a50455061c4e90554ec67d051503b6c  update_windows_386\ngsha1sum lantern.exe\nf3d6dbb4d8caa2a17ddd2b4048750f6aed9a7673  /Users/rev/Shared/lantern.exe\n```\nlantern.exe is the binary that the installer creates, I think that is going to be problematic because those files have two different hashes, the autoupdate will take update_windows_386 and will replace the old binary with it, leaving a file with a 2eb8b2896a50455061c4e90554ec67d051503b6c checksum instead of the original f3d6dbb4d8caa2a17ddd2b4048750f6aed9a7673. I am wondering if we could extract the lantern.exe somehow after signing the installer, that's what I've been doing manually for our releases.\n. Yes @myleshorton \n. Hmm, that's weird. I'm going to make clean and check again.\n. Same thing unfortunately. Does this look right?\nMANOTO=true BNS_CERT_PASS=xxx SECRETS_DIR=~/path/to/secrets VERSION=2.0.0 make packages\n...\nGenerating distribution package for darwin/amd64 manoto...\nPackaged settings: startupurl: https://www.facebook.com/manototv/app_128953167177144\n/bin/bash: Lantern.app/Contents/Resources/en.lproj/.packaged-lantern.yaml: No such file or directory\nmake: *** [package-darwin-manoto] Error 1\n```\ngit branch | grep \"^\"\n issue3007\ngit log -n1\ncommit d3f2815399c2d3cdb13d788b6c7fd13b7b967603\nAuthor: Myles Horton myles@getlantern.org\nDate:   Fri Aug 28 16:14:43 2015 -0700\nadded bzip\n\nfind . | grep packaged-lan\n./32bit/usr/lib/lantern/.packaged-lantern.yaml\n./64bit/usr/lib/lantern/.packaged-lantern.yaml\n./installer-resources/windows/.packaged-lantern.yaml\n```\n. I initially did not have it:\nls Lantern.app/Contents/Resources\napp.icns\nSo I created it and ran the make again:\nmkdir Lantern.app/Contents/Resources/en.lproj\nmake ...\nFailed again at the same point:\n...\n/bin/bash: Lantern.app/Contents/Resources/en.lproj/.packaged-lantern.yaml: No such file or directory\nmake: *** [package-darwin-manoto] Error 1\nAnd the directory en.lproj was gone again.\nls Lantern.app/Contents/Resources/\napp.icns\nIs my make invocation correct? I also tried MANOTO=1, same results.\nI am using a self signed .pfx file, maybe that affects something? I'm going to give it a closer look.\n. Great! the latest commit worked and the checksum issue is not there anymore:\nopen lantern-installer.dmg\ngsha1sum /Applications/Lantern.app/Contents/MacOS/lantern\nf21e4e682b43ebff74e20df6c6c7ac1a3e76f22d  /Applications/Lantern.app/Contents/MacOS/lantern\nbzip2 -d update_darwin_amd64.bz2\ngsha1sum update_darwin_amd64\nf21e4e682b43ebff74e20df6c6c7ac1a3e76f22d  update_darwin_amd64\ngsha1sum lantern.exe\nac04b0856a6330edb0d7e9e20671ec8080a2ef7b  lantern.exe\nbzip2 -d update_windows_386.bz2\ngsha1sum update_windows_386\nac04b0856a6330edb0d7e9e20671ec8080a2ef7b  update_windows_386\nLooks good to me, I only added a yum clean all at the end of the bzip2 installation. See https://github.com/getlantern/lantern/pull/3067\n. Yep, Windows matches as well! The thing that is not working now is Linux, bot 64 and 32bit. Could you test this to see if it works for you? You can install \"dpkg\" with brew.\ndpkg -x lantern_2.0.1_amd64.deb 64bit\nbzip2 -d update_linux_amd64.bz2\ngsha1sum update_linux_amd64\ne6115fb974057b2c1ababd8f3204c862836b1e22  update_linux_amd64\ngsha1sum 64bit/usr/lib/lantern/lantern-binary\n507ea671f78bacd32e7efcd17b78f949e894c70d  64bit/usr/lib/lantern/lantern-binary\ndpkg -x lantern-manoto_2.0.1_amd64.deb 64bit-manoto\ngsha1sum 64bit-manoto/usr/lib/lantern/lantern-binary\n507ea671f78bacd32e7efcd17b78f949e894c70d  64bit-manoto/usr/lib/lantern/lantern-binary\ngsha1sum lantern_linux_amd64\n507ea671f78bacd32e7efcd17b78f949e894c70d  lantern_linux_amd64\nWhy does the uncompressed update_linux_amd64.bz2 compute a different signature?\n. Hello @JulianGindi,\nmake binaries should be enough to test if everything is working OK with the docker machines we use. \n. What's this chained.yaml file?\nGenerating distribution package for windows/386...\nBuild tags: prod\ncat: installer-resources/chained.yaml: No such file or directory\nMakefile:200: recipe for target 'docker-package-windows' failed\nmake: *** [docker-package-windows] Error 1\nmake: *** [package-windows] Error 2\n. Hey @myleshorton, @fffw, are you planning to submit more commits to this branch? It looks good to me except for lantern-mobile, I think that's going to continue failing for a while until we merge our modifications into it.\n. Thanks @myleshorton. Code looks OK to me now. I'd like to test it, do I need any special setup for that?\n. Looks good to me after testing it for a while.\n. I think chef/ paths are no longer valid, could you try again?\n. That's awesome @atavism! I'm going to check out your refactor and rebase accordingly.\n. Hey @fffw, would it be possible to identify Lantern initiated requests instead of trying to guess if the user is using a browser by checking the user-agent?\n. I think that in general is safer to test for the presence of the exception (like a req.Header.Get(\"X-Lantern-Special-Header\") header) rather than for a list of possibly accepted escenarios (like relying on the browser's user-agent, which could be stripped or modified by a privacy tool or something like that).\nWe could say that all browsers that follow the standard are going to send either a \"Mozilla\" or a \"Opera\" string, but we can be sure that no other thing besides Lantern is sending a X-Lantern-Special-Header header because only we use it.\nLantern core is the affected part, so probably we should find a solution within Lantern core, instead of relying on external data out of our control, like the user's choice of browser or privacy tool.\n. The Accept suggestion sounds fantastic!\n. @fffw looks good to me :)\n. I tried again with a clean boot2docker installation and works fine. Does it happen every time @uaalto? Do you also have the same result when trying to use make android-lib @fffw?\n. Do you think this could be due to some memory constraint on the host?\n. Awesome! thanks for testing. Please go on and merge it :)\n. Thanks @netroby, I added your suggestion as part of this other PR here: https://github.com/getlantern/lantern/pull/3395.\n. This is not valid anymore.\n. Looks like the go1.5 problem we had with the beta versions is gone. Would you like to check this out @fffw, @oxtoacart?\n. Sounds good @fffw, we could try that as well.\n. Hey @myleshorton, Not sure if we should do that, #3378 and this one attack two different problems, this only affects the main Dockerfile and focuses on using a newer Go version, while #3378 bumps the Go version from go1.5.1 to go1.5.2 for gomobile only (it's a different Dockerfile).\nThe thing that I can do is create another PR that targeting valencia_ox instead of valencia, sounds good?\n. @oxtoacart Cool, let's keep them separated then.\n. Hey @fffw, I added that deltarpm suggestion and also changed yum clean all to yum clean packages and noticed a difference, how does it look now?\n. Hey @fffw, I just pushed that last one.\n. @Alihamzehzadeh please stop opening unrequested PRs.\n. This is awesome @fffw! I think we should make it a global and put it at the beginning on the file:\nMACOSX_DEPLOYMENT_TARGET = 10.7\n. @fffw I just think that something important like this should be evident and in plain sight. It works fine if we leave it where it is now but I am just concerned about it not being too visible.\n. Thanks!\n. Hey @myleshorton, could you try out this one?\n. @myleshorton I understand correctly that value is not available when the UI starts up, that one is sent by the backend in one of the async ajax calls; it should be something superfast, though, should we try that?\n. Hey @myleshorton, could you check this one for release-2.0.1? Thanks!\n. Hey @myleshorton, I've added a few tracking links for social buttons and bookmarks. What do you think?\n. @myleshorton perhaps I need to update this branch, let me check.\n. @myleshorton Looks like it's working now :)\n. I messed up this one. \n. @oxtoacart This is awesome! so users will be able to access Lantern by typing ui.lantern.io and having it running, right? We then can have a default real page for ui.lantern.io with instructions for running Lantern and we can get rid of all the odd numbers appearing in the address bar.\nDo you think we could we move the Makefile changes into another branch/issue and discuss them there?\n. Hey @oxtoacart or @atavism, could you help me checking this one? Thanks!\n. @myleshorton We could close this PR but let's keep the issue open, it is still not clear why the update server receives messages from Android phones trying to update. Perhaps old betas.\n. Tested and works fine, thanks @oxtoacart.\n. Hey @myleshorton, can you take a look at this one? Should close https://github.com/getlantern/lantern/issues/3787 and https://github.com/getlantern/lantern/issues/3786 and it's part of what I've been working on...\n. Hey @myleshorton, I think it's better now, including the enabling/disabling anonymous stats and tracking a pageview only once. I added a few debugging messages too to make sure everything works as supposed. \n. Gonna take this one, looks like we have a conflict @oxtoacart, could you rebase and push again?\n. Hey @oxtoacart, looks good, just made a few changes. What are the name changes required for? I mean, moving ui to the root.\n. Yeah, that's it. Hmm, not sure if that justifies changing the path for the\nwhole project. Isn't it possible to use soft links or equivalent? I'll take\na look too trying to find another solution.\nOn Thu, May 5, 2016 at 20:03 oxtoacart notifications@github.com wrote:\n\n@xiam https://github.com/xiam By \"name changes\" do you mean all the\nmoved files in lantern-ui? With lantern-ui in the original location, the\ndirectory structure is too deep for Windows which has a maximum path length\nof 260.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/4075#issuecomment-217322091\n. Ok then @myleshorton & @oxtoacart, I think that having our source code on src makes more sense, but if you both agree let's leave it like that. Otherwise the build works for me.\n. Cool, thanks!\n. Looks good @myleshorton, thanks!\n. I think this is pretty confusing, tbh. The initial problem was that Go casts a JSON Number into a float64 (which is natural, because JavaScript does not have integers at all), and that situation was catched and taken care of by the type check (which seemed to me like a simple standard solution). Now we would have to remember that UserID is a float64 which is not really a float64 because it gets truncated into an int before sending (opening the possibility for two equal IDs with different decimal places). I mean it could work like that, but was this an actual problem? I think we could try int64 instead of int to ensure the size of the integer. But I don't understand the advantage of carrying float64 and making code confusing.\n. > I don't understand what you're saying here. Where does it get truncated to an int?\n\nNo, you're right. We aren't, I assumed we were because an int is what we're supposed to send in the userIDHeader, but we aren't even truncating that. That should have zero effect in the server side but not sure of why we would send fractional parts if they exists, tho.\nI think it's confusing because we're supposed to be using integers to represents IDs (because that's what the pro server uses), and we were at one type cast away from that, Go uses float64 to represent JSON numbers which we can convert it to int or int64 and that's all. Go has different types that ensure safety like int64, which is also safe in 32 bit systems, so to me this decision is pretty odd and does not feel necessary. But I'm fine either way as long as it works, I think we should just add a note explaining why are we using float64 as IDs, when a float64 type is clearly not suitable to hold unique values. Besides, we'll have time to revisit this at any point later if required.\n. > Huh? How so?\nAs far as I know, floating point numbers are approximates and can have different representations depending on the context, which is not a Go issue, see for instance: https://play.golang.org/p/ItmlnYAX3o or https://play.golang.org/p/qO26NnY2kj, but that was just a side note on why I think floating point values are not suitable for being IDs in the most general case, I don't believe that is really relevant to this discussion because in this particular case, that does not happen: the server never sends numbers with decimal parts and we aren't doing any arithmetic or comparisons.\n\nhttps://play.golang.org/p/p-BZc09w8t\n\nI see your point, we should take care with overflows when using floats or ints:\nfmt.Println(strconv.FormatFloat(math.MaxInt64, 'f', -1, 64))\nI agree using strings would be better and safer, what would be the cost of doing such change @uaalto? If you could change the userId field into a string, that would be a lot better, but I am not aware of the implications in your side.\n\nOh wow -- looks like we can just use UseNumber - \n\nGonna take a look, sounds pretty interesting\n. Using strings to represent IDs would also be future proof. We can start using letters as well as digits if we need them, no overflows, etc.\n. Btw, this does not mean we should jump and convert everything into strings and use letters in our IDs right now, the internal pro-server internals could continue using whatever it currently does. If the userID field from the JSON response you send could be a string instead of a number we could do a few fixes in our side and we would have less things (conversions, overflows, 32 bit systems, etc) to worry about.\n. This is an awesome and clean solution @myleshorton! Thanks for looking more into it. Good finding on UseNumber too. I'd just wait for the tests to finish and I'd merge it right away :)\n. Not sure if this helps, but we definitely don't need it anymore, thanks @fffw \n. Looks good :)\n. Looks good @myleshorton, it just needs a rebase.\n. Should we close this PR then?\n. Needs more work, travis is failing.\n. Travis is still failing but that's for a different reason than the code I added here, we have the same failure on devel.\nCould you take a look @oxtoacart or @myleshorton?\n. Thanks @oxtoacart, @myleshorton. PR is ready now.\n. We don't need this anymore.\n. Hey @Kabibi, calling make would have done the trick, but this is not required anymore.. > Nice! I actually also think we should allow betas to be updated from but not to\nI think this is something that can be solved by not releasing the update_* blob for betas, right?\n. The corresponding part on the update-server is here: https://github.com/getlantern/autoupdate-server/pull/2\n. Already merged here: https://github.com/getlantern/lantern-pro/blob/65eefb50f402735e45f81b63a0f8e4acccc63303/Makefile#L32\n. This is the only function that returns a net.Conn, so it looks like a good place to check if the request is unencrypted and take action.\n. The wg.Wait() was not actually doing nothing as the io.Copy was spawned into a goroutine. Now the wg.Wait() will actually wait that both calls to io.Copy() are completed before returning control to the parent function.\n. We were missing a line that updated highestQOS to the greatest known value of dialer.QOS in order to actually get the highest QOS. \n. There's a small change that both initBalancer and getBalancer would push something to balCh. Since balCh is a channel of just one element it would block. It would be a very rare condition to reproduce.\n. No need to export these constants.\n. Using this error declaration pattern and comparison is great for quickly identifying which error are we actually referring to.\n. We don't really need this as a separate function. The intention of this code is more evident if we move it to the context in which it's actually being used.\n. We were not actually recording if this was initialized.\n. Current name of the repository.\n. Using lantern instead of flashlight.\n. Good catch!\n. The 8080 looks like a really good candidate here, but I'm not sure about the other ports, 5222 and 5223 are commonly used for XMPP and 5222 is the plaintext one so maybe we should add it too. And what about 5228? Why does Lantern support it?\nOne thing to keep in mind is that we cannot guarantee that Lantern will identify and protect unencrypted traffic automatically: users may as well use plain HTTP over port 443 on specially crafted servers and Lantern will assume that if it's using port 433 it should be SSL, also using port 8443 does not guarantee that the connection will be over SSL, maybe we can start by only proxying ports such as 80 and 8080 on our servers since that would fix the potential Javascript script injection we're trying to close, then we could discuss about supporting plaintext traffic over other ports.\n. I agree with you, this would be a very rare thing to happen. I personally would prefer having no connection at all in such cases but users may have a different opinion. I agree we should discuss this further.\n. I actually think that would be confusing too, since reading the StatusOK constant plus a number looks like trying to add a number to something that means a status response, and we're comparing the ordering of status codes with integers, which is already awkward. \nEither way I don't have a strong feeling on changing 200 by http.StatusOK in this particular case, since the < comparison is already a trick based on the actual integer value of http.StatusOK. Maybe these kind of constants are better suited for (in)equalities. So, if you feel this is more awkward than it was we may as well use the previous comparison.\n. Because we're declaring balCh as client.balCh = make(chan *balancer.Balancer, 1), so if we attempt to write more that one messages to that channel it would block.\n. I though it would make more sense leaving highestQOS in which it is now, since it's only used on that portion of the code, while highestQOSFrontedDialer is used there and at the end.\n. > What does need protection is the checking and setting of client.balInitialized, unless we are otherwise making sure that two concurrent calls to getBalancer will never happen (and if we're assuming that, it'd be nice to have it documented).\nGood catch, I'll move balInitialize inside the safe zone provided by the mutex.\n\nI don't think two concurrent writes to client.balCh could ever happen, since both initBalancer and getBalancer will receive from that channel before sending again. The second one to try such a receive-and-send op would get blocked on the receive.\n\nAh! Yeah, I see what you mean, I though of the (hypothetical) condition immediately after old := <-client.balCh (within this function) and bal := <-client.balCh (within getBalancer()), but after carefully reviewing it again I'm also convinced that escenario would not happen. Do you think this other case could be a risk? (see 1 and 2 like two different goroutine contexts)\n1: bal := <-client.balCh // Within getBalancer().\n2: old := <-client.balCh // Would block until a message is received.\n1: client.balCh <- bal // This is getBalancer() putting back the message.\n2: old := <-client.balCh // This will now continue, note that old is equal to bal\n1: return bal // getBalancer() ending\n2: old.Close() // Will close the bal that getBalancer() already returned.\n. I was initially inclined to do that too, but I discovered e a couple of issues with that approach:\nWe need a set of all dialers (both trusted and untrusted) that we could use for encrypted traffic, and pick a subset of that set that only contains trusted dialers. Your snippet would create two mutually exclusive sets. That could be easily fixed, but we also need both sets to be sorted, we could do that with two different calls to sort.Sort(byQOSAscending(trusted)) and sort.Sort(byQOSAscending(all)) or we could create the trusted set after the set of all dialers is sorted, I decided over the later one just for clarity and moved the actual build of the list to another function to avoid having two for loops that looked too much alike in the same function (New), but now that I realize that a mutex needs to be created for that to work properly I think I'm going to avoid the mutex (and the complexity it carries) and just move this loop it inside New.\n. > I.e. only proxying port 80 on our servers wouldn't mitigate the attack since the attack is typically over port 80.\nYes it would, because censors would not have any chance to tamper with plain HTTP resources at all: any HTTP resource would be intercepted and proxied to a trusted proxy over TLS:\nClient -> Plaintext HTTP request (port 80) -> Proxy (over TLS) -> Trusted proxy -> facebook:80\nIf the censors are between Trusted proxy and facebook:80 then yes, they could inject scripts on facebook.com and feed them to our trusted proxy. But if censors are between client and trusted proxy, then they would not be able to see or tamper any HTTP traffic at all.\nIn particular with the trust flag, we'll take care of cases like this one:\nClient -> Plaintext HTTP request (port 80) -> Proxy (over TLS) -> Bad proxy\nIn this case, Bad proxy could write anything it wants back to the client, which does not have any way to notice if someone tampered with the content.\nBut, we are still allowing potentially Bad Proxies to exists, they could be handy too:\nClient -> HTTPs request (port 443) -> Proxy (over TLS) -> Bad proxy -> Internet -> Facebook:443\nThis is a completely different case, if Bad Proxy tampers with the content, the SSL connection would not be valid, since for tampering it would be required to decipher, inject evil stuff, and cipher the content again with a rogue certificate, the browser would not know the CA that signed facebook.com and will alert the user of such situation.\n. Not sure about it, this would be printed in the logs, I would not like reading that my content is routed over an \"untrusted\" peer. This legend will help us now that we are testing, but depending on the actual communication strategy we'll probably need to remove this advertising completely.\n. I think you're right, let me review my wording.\n. I think so, the useful thing I see here is the comparison that follows the declaration rather than the declaration itself:\nif foo, err = baz(); err != nil {\n  // Do something with err\n}\nInstead of:\n```\nfoo, err = baz()\nif err != nil {\n  // Do something with err\n}\n```\nThe first case does not (easily) allow anything to happen between the error assignation and the comparison it can be easily read like a single block, while in the latter there's always a chance of putting more instructions in between:\n```\nfoo, err = baz()\nbar, err = baroo()\nif err != nil {\n  // You didn't catch the first error!\n}\n```\n. I completely agree, I'll check them again.\n. > I believe you're suggesting to send those ports only to our servers, which is cool.\nYeah! exactly, I definitely could have used better wording.\n. Looks great!\n. I changed this to create the sorted list of trusted dialers after the list of all dialers.\n. Added port 8080.\n. This allows us to sort the dialers argument passed to New() instead of the former dhs.\n. Now that you mention it, yes, this practice could lead to unexpected behaviour in any piece of code that depends on the variable that was passed. I'd agree with the change.\n. Hah! this also provided us with a better solution on the capacity issue.\n. There's an issue with this change and it's that we support many other different ports:\n./flashlight.go:                AllowedPorts: []int{80, 443, 8080, 8443, 5222, 5223, 5228},\nFrom that list we only want to take ports 80 an 8080 as probably untrusted. It is true that plaintext traffic may travel along any port but I think we are not ready to make that movement and claim that Lantern routes all plaintext traffic to trusted servers, as of today it would be more accurate to say we proxy traffic that passes over ports 80 and 8080 to trusted servers and that users must take care of other ports.\n. Related discussion: https://github.com/getlantern/lantern/pull/2424#discussion_r28865922\n. We discussed this a bit here https://github.com/getlantern/lantern/pull/2424#discussion-diff-28866183, probably the best way to fix this is making sure to provide users with (at least one) trusted dialers instead of letting the client pass when no dialers are available.\n. Good catch!\n. This return was missing, so the execution continued and returned http.StatusExpectationFailed instead of http.StatusNoContent.\n. Pull as many pages with content as we can.\n. We are going to need those binaries later and it's possible to lose them if we continue working, so we better save them for later.\n. Instead of looking for files in the current directory (that are probably deleted by now), we list QA files that are already in S3.\n. This is like promoting QA to beta.\n. Download the auto-update files we uploaded in release-qa.\n. The ?= means use this value if it was not defined in the environment.\n. Copy binaries from S3 and upload them to https://github.com/getlantern/lantern-binaries.\n. Maximum wait time between tries was 2^9*100ms (51s). This value was probably too small. I'm pushing it to 2^9*500ms (4.27m).\n. The error message did not make clear the logged error was the last one of a series of attempts.\n. Instead of the error log at line 111, we log here the number of attempt, the cause of the failure and the time the goroutine is going to sleep.\n. Maybe @myleshorton's suggestion of pushing this to 300 is a bit risky, let's try with a much smaller increment for now and see how does it behave.\n. > To avoid adding unrelated info to Loggly, instead of print tlsInfo for any errors, can we only print it if the error isx509.UnknownAuthorityError\nGood idea!\n. Didn't know this could be done but makes total sense. Great trick!\n. True. Great suggestion! Care to take a look again?\n. The same patch I used to fix this one: https://github.com/getlantern/lantern/issues/2578\n. A revision from April, around the time I first commited the change that introduced the libgojni.so compilation from the Makefile. \n. The same patch I used to fix this one: #2578\n. Copying to FIRETWEET_DIR. If such env value was given:\nFIRETWEET_DIR=/path/to/firetweet make android-lib\n. Looks like we initially forked this one in order to add a small change https://github.com/stretchr/testify/compare/master...getlantern:master.\nThe change was just adding more debugging to the output of a test, so it's OK to use the upstream package. We should probable deprecate github.com/getlantern/testify too if we don't plan to make major changes.\n. The packages target is a required step for release-qa, and it's already slow so it makes sense to use genconfig here.\n. A bit of cleaning now that I'm here. Removing commented out value and using a conditional declaration.\n. Runnin genconfig before building Android's libgojni.\n. Hello @atavism!\npackageVersion was initially intended for autoupdates only. If no VERSION is passed to the Makefile it will use the git revision and when compiled in development mode it will use 9999.99.99. I think the git revision would be more informative but I also think it would be harder to  associate it with an actual release, as we'll always have to lookup the git revision.\n. Now that we are changing this, what do you think of making it a local constant instead of a hardcoded value? Maybe proxyHealthTimeout or defaultCheckTimeout instead of the hardcoded value that depends on the context to be understood. I think it will be easier to read and to modify.\n. This is the version string that is reported to loggly.\n. The fallback is the Linux equivalent of the date conversion command.\n. Thanks @myleshorton. Otherwise the PR looks good to me, let's keep going and discuss this cosmetic detail any other day.\n. This android-lib-dev target looks a lot like android-lib, the only difference I can tell is this line:\nif [ -d \"$(FLASHLIGHT_ANDROID_TESTER_DIR)\" ]; then \\\ncompared to\nif [ -d \"$(FIRETWEET_DIR)\" ]; then \\\nI think we can just leave one android-lib target and use environment variables, we'll have to do something like this:\nFIRETWEET_DIR=../flashlight-android-tester make android-lib\nfor the current android-lib-dev or:\nmake android-lib\nfor the default android-lib case.\n. While building the image I found some logs like this:\n./test.bash: line 8: which: command not found\nCan we add the which command here as well?\n. Yeah, sounds good. Maybe android-lib for development and android-lib-dist for distribution?\n. Even when ListenAndServe() failed the pacOff() function was called anyway. It's better to move it here after pacOn().\n. We were logging a message instead of exiting.\n. Setting this registry key is a task of the installer. By default Lantern will only clear the system's proxy settings and quit unless it is asked to run at Windows startup.\n. Good catch indeed @fffw. I guess we can modify the pac.exe to backup and restore original settings instead of destroying them.\n. For easy testing without changing the code.\n. This is going to simulate and test the case when a 2.0.0-beta8+manoto client asks the server for update instructions.\n. We weren't decoding the compressed bzip2 binary so the checksum verification always failed. This happened when the client checksum did not match with the binary that was published in the releases page.\n. Why the 2k byte limit?\n. Right!\nWe only have one published manoto version for each OS/Arch, right? \nThe update client already sends the checksum of the binary, and that's a fixed value we could capture. When the client sends a known checksum we could change it to the one we need.\n. Yes, we still need to publish them. I'm working on matching the checksum to change the version, an update is coming...\n. I am using this repo to test releases: https://github.com/xiam/lantern/releases\n. @myleshorton I was wrong with the 2.0.0+manoto < 2.0.0+stable assumption, actually 2.0.0+manoto == 2.0.0+stable. This change ignores all build with +manoto when looking for the most recent released version, so normal betas won't get updated to manoto versions.\n. Oh, and we'll be able to release 2.0.0 and 2.0.0+manoto with no problem.\n. Testing a future release number.\n. Strictly speaking this openedExternal variable will be set to true even if the page could not be opened and we'll also have this 4s period on which Show() will continue opening browser windows by calling openExternalUrl(). That's not a big deal but maybe we could try setting openedExternal to true immediately after calling openExternalUrl() and only set if to false if something failed.\n``` go\nfunc openExternalUrl() {\n  if openedExternal {\n    log.Debugf(\"Not opening external URL again\")\n    return\n  }\nopenedExternal = true\npath, s, err := packaged.ReadSettings()\n  if err != nil {\n    openedExternal = false\n    log.Errorf(\"Could not read yaml from %v: %v\", path, err)\n    return\n  }\ntime.Sleep(4 * time.Second)\n  err = open.Run(s.StartupUrl)\n  if err != nil {\n    openedExternal = false\n    log.Errorf(\"Error opening external page to %v: %v\", uiaddr, err)\n  }\n}\n```\n. Oh no, this was commited by error. I actually think we can safely remove those .packaged-lantern.yaml files and add them to the ignore list, as they're generated by the Makefile.\n. Yeah, we'll have to make it 2.0.0+stable. We won't have any problem as long as we only keep +stable and +manoto, +manoto is ignored by us and +tags are ignored by semver.\n. It seems like a new interval will be created each time the onClose event is triggered. I don't see this interval being saved to anywhere nor being interrupted later in the code.\n. Does this mean that if we are using firefox, the browser will not try to reconnect in case the connection is dropped?\n. If we are on firefox, then the timeout won't be executed, is that expected?\n. I've experimented that after a while (between 40 and 50s), Firefox attempts to connect again and succeeds, in each one of the tabs. Will this prevent Firefox to ever reconnect?\n. Yes. My observation was oriented towards the fact that this interval will be created each time this event is triggered and this interval is not saved anywhere so, as far as I understand, it cannot be stopped, if Lantern gets disconnected five times, then we will be running five different intervals checking for the same thing.\nIt seems like you didn't introduce this so maybe we can follow this problem on a different issue, I think it won't cause I'll effects unless we're running hundreds of timeouts but it may cause some hard to catch bugs.\n. Oh, gotcha!\n. I think this would be better if chained with && to the next command:\n```\n        $(S3CMD) cp s3://$(S3_BUCKET)/$$NAME s3://$(S3_BUCKET)/$$VERSIONED && \\\n``\n. What's the purpose of the blank identifier here?\n. Why usingdeferhere? The function has already ended at this point and there is nothing left to do.\n. Could we have a comment describing the purpose of this loop?\n. When a connection is received and it is not direct, we'll write to this channel and then the loop will exit, becauseiis now1. It would probably be safer to end this loop explicitly withreturn. My reasoning is that ifiwould be allowed to grow to3` or more, then this loop will continue one more time at least, the problem is we already have what we were looking for\n. Why logging it instead of returning a \"SetWriteDeadline not implemented\" error?\n. I am not sure if we can just assume this non-idempotence, as far as I can tell idempotence depends on the application. According to this function GET, DELETE and PUT are considered equally idempotent, but that may not be the case.\nFor instance, some applications may do things like:\nGET /posts/delete?id=123\nWhich is a GET and by this check would be considered idempotent, nothing prevents a developer for doing that. Is there any way we can stay in the safe side? It seems like this could cause side effects that may be difficult to track back to Lantern.\n. The function is already about to end at this point, I think the defer is not necessary.\n. A small safety check. I realised some getParentDomain() parameters could return \"\" in some specific cases.\n. > addr will never be \"\" except passed in intentionally.\nThat's what I am trying to prevent, with this check the function will take care for itself, instead of relying on the context.\n. > This also doesn't compile right?\nRight! fixed. Thanks.\n. Good catch, would it be possible to identify and close such connection? It sounds like a way to run out of file descriptors.\n. I think you're right. Then I'd only add PUT to the nonIdempotentMethods blacklist, since some PUT requests can include a body.\n. Renaming update-icons into update-resources to make it more generic and to be able to use it for building the status_pages directory.\n. The errorRewritingRoundTripper wraps and catches roundtrip errors.\n. Where did this bns.pfx file go?\n. Hey @myleshorton, \nI noticed that RandomDialer() can return a nil function from randomDialer and that would trigger a random panic. That didn't happen with getReverseProxy() because it waited for a valid dialer to arrive before returning.\n. There are other things that balancer.Dial did, like sending plaintext traffic only to trusted servers and retrying with another dialer in case the first random pick did not work, with RandomDialer() we end up with a dialer that may or may not work at all, I imagine this could case trouble when doing lots of requests, like querying small files to display a web page; as I understand each web page resource will require a new random connection.\n. Was this URL introduced to force using a trusted dialer? The addr will be printed in the logs a few times in case of errors, which could be confusing.\n. Is that the only output you got, @oxtoacart?\n. This was also defined above on line 8, can you remove the first one? Also, I am not sure if we need this env var at all. What do you think @uaalto?\n. I think we can safely remove this line.\n. @oxtoacart Could you elaborate a bit more on why do we need the gomobile fork?\n. @fffw Good idea, I'm gonna move things that do not change that often to the beginning of the file.\n. I though that deltarpm was like a compressed bindiff, but I guess you're right, it seems like in this particular case it will only work for yum update. I've just added that line, thanks!\nThe -C flag would case yum to look into the cached data only but that's not what we want. makecache should reduce the times yum tries to update its database, it should read packages and dependencies from disk automatically instead of trying yo update the yum database each time it's called.\n. Thanks @fffw, I added this other line as well.\n. Because this endpoint is not expected to change regardless of the server URL, I think that keeping this as a constant value is better and future safe (like if we ever want to add another endpoint for whatever reason, we could use updateServerURL + \"/newendpoint\" or even versioning over the same endpoint updateServerURL + \"/v2.0/update\").\n. I also catched this while reviewing, these events were not actually wired.\n. Not sure if this is an advantage, what's the main benefit of running this locally? On the other hand, the reason to run build tasks inside docker is that everyone has the same environment, the same version of node, npm and everything else, so it may look like we could skip docker but I think that having that guarantee is important, specially with node-npms's ecosystem which already caused it-works-for-me problems in the past.\n. I don't think we benefit a lot from this. It already happened some months ago that I was running a beta version of Go locally (in OSX, which we cannot build inside docker) that created binaries that crashed upon starting, nobody had the same problem as me because they haven't updated Go versions to the latest beta, I don't run Go betas anymore. Using the docker image prevents the same problems on Windows and Linux, we can be sure we have exactly the same build. We cannot do that for OSX and that's a shame, but we can be on the safe side with Linux and Windows (Windows being the most used) and I really think that saves debugging time.\n. Note that by running this locally it's also a requisite to have osslsigncode and makensis locally as well, and we are not providing instructions for that anywhere, the person who is building needs to figure out how to do that instead of just using the docker image which already has those binaries and never fails to produce a valid build.\n. This is awesome!\n. What's the reason for the constant with a colon? Is this something we could check with https://golang.org/pkg/strings/#HasPrefix and LanternSpecialDomain?\n. We checked err != nil above and that ensures that resp.Body is not nil.\n. Sorry, I take that back, this is an error, not the lack of one.\n. Should we hardcode ui.lantern.io here to make sure it always passes through Lantern or that's not required?\n. Good point, docker has a cost and it takes a lot of space. So, we could use docker only when building a distribution package, not for the daily development. That way we can be sure the final build is the same for Linux/Windows. How does it sound?\nPerhaps it would be better to keep track of the solution for this on a different issue, it looks like the UI address issue does not depend on this problem.\n. Oh yes, right, I didn't see them initially. \n. I think we can get rid of this, nothing external depends on this target.\n. Do yo know anything about this @uaalto?\n. I can take a look into that Windows build problem, it could be something wrong with the Dockerfile, could you open an issue with the error message and assign it to me?\n. Yes, let's add that one.\n. Should be working now @fffw \n. This sounds good to me as well.\n. This target rename is probably not required as it still generates a debian-only package.\n. This target requires BNS_CERT_PASS which does not have any effect without BNS_CERT, it looks a lot like package-windows, would it be possible to remove the do- and only have a package-windows?\n. We don't currently distribute the arm version anywhere, it's kind of experimental, not sure if we should include it here as part of the linux binaries.\n. My concern with having this file here would be the risk of adding it to the repo by accident (even though it's password protected), while this makes signing a bit easier it's probably not so bad to keep the actual bns.pfx outside this path if that lowers the risk of publishing it by mistake.\n. Awesome!\n. I think we should not do this automatically, this is not essential, or at least we could protect it with .gitignore.\n. The side effect of this is not being able to compile flashlight like this source setenv.bash && go build github.com/getlantern/flashlight/main without running genassets before. Perhaps we can find another way to check if assets have been generated instead of relying on the existence of this particular file? The src/github.com/getlantern/lantern-ui/dist directory or the $$APP/js/revision.js file should not exist if assets have not been generated, for instance.\n. Could we mount it with -v /full/path/to/local/file.txt:/path/to/file.txt?\n. We were not sending this change to all clients.\n. We don't need a field for sending this message.\n. I changed this for completion but we're not using this in the UI anymore.\n. This is an experiment, we don't need to compile this into released binaries.\n. Unused code.\n. Unused code.\n. Unused code.\n. I changed this as well, but is it correct to track pageviews only when auto_report is enabled? Also, each time this is changed we'll save a pageview, right? Perhaps we don't want this here.\n. What do we need this for?\n. More unused code.\n. Yeah, so there's no real reason to keep it here right? then we can move it to a better place. This part of code is only fired when the backend sends a message, and that should happen every time settings are changed, that's why it's pretty odd to have it here.\n. It's currently unused. We don't display not use this information in the UI.\n. Because it was becoming pretty confusing that this was the only part in the (new) UI that used variables Like AutoReport instead of auto_report or autoReport which are more common in Javascript. With this change I stopped worrying about this detail in the UI.\n. Same thing, this is to reflect the name changes on backend. \n. It looks like we don't currently use this, right @uaalto?\n. Oh right! that's true, I only meant to disable the ui service but this change is definitely wrong.\n. Yes, it was more to avoid having an uppercase first letter (AutoReport instead of auto_report or autoReport). I'm gonna change them back to camelcase but having first lowecase letter.\n. The UserID is generated by the pro server with POST /user-create, this is currently triggered by the Pro UI. Free users also need to have an UserID, that's how we can assign them a referral code.\n. Lantern does require the UI to sign-up for pro, with that you generate an appropriate yaml file and with that yaml file you can run headless from that point on, if you want.\n. Yes, we do have one at https://feeds.getiantem.org/ms_MY/feed.json\n. My Windows setup was on a path that contained spaces and that was interfering with the $(NPM) target $(RESOURCES_DOT_GO) depended on. I ended up removing the $(NPM) target in favour of a descriptive message but I also fixed the problems with spaces on command names by passing them through printf %q.\n. If NPM was not around or was not in the PATH this target failed without any useful output.\n. When using go1.6 for x64, the go build github.com/getlantern/tarfs/tarfs generated a binary named bin/windows_386/tarfs.exe (because the GOARCH was set to 386), instead of fiddling around it we can force the name to be bin/tarfs.\n. Providing descriptive error message for gulp.\n. Don't think we want to support the whole Makefile on Windows, but at least we can provide partial support for generating binaries.\n. The gulp docs say the name of the cli is gulp-cli.\n. We can use a different arch since go1.5, and go1.6 is already a requisite on the README.\n. Thanks @oxtoacart!\nOn Thu, May 12, 2016 at 09:31 oxtoacart notifications@github.com wrote:\n\nIn src/github.com/getlantern/fronted/cache.go\nhttps://github.com/getlantern/lantern/pull/4272#discussion_r63030358:\n\n+\n+func (d *direct) fillCache() {\n-   saveTimer := time.NewTimer(cacheSaveInterval)\n-   cacheChanged := false\n-   for {\n-       select {\n-       case m := <-d.toCache:\n-           if m == fillSentinel {\n-               log.Debug(\"Cache closed, stop filling\")\n-               return\n-           }\n-           log.Debugf(\"Caching vetted masquerade for %v (%v)\", m.Domain, m.IpAddress)\n-           d.cache = append(d.cache, m)\n-           cacheChanged = true\n-       case <-saveTimer.C:\n-           if !cacheChanged {\n\n@myleshorton https://github.com/myleshorton I took your suggestion and\njust write out the whole file everytime. For efficiency, I only write it if\nchanged, and I still cap the total cache size just in case.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/4272/files/07d4f1f637cc781d3969910763a391bde4ef0421#r63030358\n. Why was this removed?\n. Does that casting actually work if we send a number there? I can't check\nright now but, as far as I know, since data is a map of interface{} values\nthe value will be unmarshaled into a float64, and we need to convert that\nto int.\nOn Thu, May 19, 2016 at 20:56 myleshorton notifications@github.com wrote:\nIn src/github.com/getlantern/flashlight/app/settings.go\nhttps://github.com/getlantern/lantern/pull/4345#discussion_r63981775:\n\n@@ -145,6 +145,14 @@ func (s *Settings) checkBool(data map[string]interface{}, name string, f func(bo\n    }\n }\n+func (s *Settings) checkInt(data map[string]interface{}, name string, f func(int)) {\n-   if v, ok := data[name].(int); ok {\n\nI switched this to cast it to an int @xiam https://github.com/xiam, as\nusing float64 made the tests fail. What was the thought behind float64\nversus int?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/4345/files/17346b9c1bbc898f0a06aeeb0bd168ed5fe363c6#r63981775\n. Do these tests consider that this is a JSON message unmarshalled into a map[string]interface{}? https://github.com/getlantern/lantern/blob/214e2822948dac3a36f56714a72fb01055d231bf/src/github.com/getlantern/flashlight/app/settings.go#L122\n\nMy point is that when we unmarshal a JSON Number into an interface{}, the Number becomes a float64: https://play.golang.org/p/NiHuolVKvo\nHence the type check and the subsequent cast to int.\n. Here's another reference: https://blog.golang.org/json-and-go, please see \"Generic JSON with interface{}\"\n. This could send a formatted float like 12.34, which is not expected by the server, the only thing that forbids that from happening is the program's logic.\n. I think that's because they're different function types. Here you're casting the function's output into notify.UISender, error, and not trying to cast a whole function type into another.\n. Nice!\n. Are we sure this is never going to change?\n. An example would be\nBUILD_TAGS=mockupdate make linux-amd64\n. Hmm, we do use packagePublicKey in different places:\ngrep -R packagePublicKey .\n./github.com/getlantern/flashlight/app/mock_autoupdate.go:const packagePublicKey = `-----BEGIN PUBLIC KEY-----\n./github.com/getlantern/flashlight/app/app.go:  autoupdate.PublicKey = []byte(packagePublicKey)\n./github.com/getlantern/flashlight/app/autoupdate.go:const packagePublicKey = `-----BEGIN PUBLIC KEY-----\nAnd, keys are also different depending on the mockupdate build tag:\n```\nvagrant@lantern:~/go/src/github.com/getlantern/lantern-devel/src$ cat ./github.com/getlantern/flashlight/app/mock_autoupdate.go\n// +build mockupdate\npackage app\n// This is a public key derived from a private key that is freely available.\n// Don't use in production.\nconst packagePublicKey = -----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzSoibtACnqcp2uTGjCMJ\ntTOLDIMQ4oGPhGHT4Q/epum+H3hcbBNs9jRnMRWgX4z++xxuNJnhmoJw0eUXB7B4\nvj5DYpPajq6gPY8JuraF4ngfP5oxKj2BqpEUR9bx+3SjOSInrirM0JZO+aAW38BQ\nNJB+sS7JvbPjcwdjwKc5IKzc9kxxJNoZoFE9GMnYzaOrAlpCuAKWH8SCXYtCTxsX\nfKexdDxsI5Vzm5lQHJLMeqhLTQTUm9oQofwNAOGOkn6dD4ObMlmFTOsf1G03/Dl9\nsVgjaWaZ9bGjvJ9B85UxNeWwduy+uMrqFytxG6bbq0PbDEVu6ZQCPyiyCA7l945J\nOQIDAQAB\n-----END PUBLIC KEY-----\nvagrant@lantern:~/go/src/github.com/getlantern/lantern-devel/src$ cat ./github.com/getlantern/flashlight/app/autoupdate.go\n// +build !mockupdate\npackage app\n// This is the public key of the BNS cert. Incoming updates will be signed to\n// prevent MITM attacks.\nconst packagePublicKey = -----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxeReZ0VHDQ+/XYEHhFq0\nkrT+a/+/mlhCkgJ/605KmPXqBv8qo5f1iK6C+TQ87264J4Z9yw0tRwcdY1/ofpH7\nTywq3pBOgfrnnP9gFtquQ/tgzVkorQ0L51w9HLZ3cCjpaLpofIaztgbCIzsCT6kV\nNx6Sd/4KBSuThhMEnP5pu5Wxr4/lujIpTeVEXzljQMxqX+58ISeXYx6SxLXx5Vgj\n1IB6NJwjg7r4Nzg/zUH0ZkCWj3rDWo6itIoeo61o+hPQAjH23TCKOn8Ssaejocyg\nCrcOc7aqfGuVM3HuHxtXsjYPqJMVHiXKosi9HcHo5BACPT0FkrZIwz3k6Vy1h7nB\nHQIDAQAB\n-----END PUBLIC KEY-----\n``\n. That's probably the cause, this PR was merged intodevel. Not sure is this is already onpro-backend`.\n. I opened an issue to find out why https://github.com/getlantern/lantern-pro/issues/119, this should be working on devel, tho.\n. ",
    "yejingchen": "I am on commit 1c984c8 (which is after the commit skipping the failed test) but when the command fetching the patch failed, the building process continues as if it succeeded, which made the patch useless.\n. ",
    "uaalto": "One thing that might require attention: is fmt thread-safe? When testing this program I didn't encounter any instance of where the output was interwoven, but I'm finding it now in other code (rarely, but still). If this is the case, I should change fmt for log.\n. This is indeed a fallback server checking script, optimized to perform the checks concurrently. I'm not sure if the intention is to replace the old script entirely. It is intended for automated checks in a server, that's why it tries to minimize output unless a verbosity flag is set. Maybe @aranhoide  can elaborate on the specifics of its deployment, however.\n. Thank you @aranhoide! I think sending errors through a channel is a nice way of serializing them. It's the first idea I had when it first occured to me that fmt might be thread-unsafe. It isn't that obvious, because output of this script is clean and appears serialized. Log module is thread-safe, though. Does Lantern have a thread-safe logging facility?\nIn another order of things, if I push to this branch any changes, are the commits \"appended\" to this pull request or I need to open a new one and reference it somehow?\n. Thank you @aranhoide ! will do!\n. This module is currently not integrated within Lantern, and can be tested independently. You can test the discovery and the add/remove callbacks with the command found in /cmd. No changes were necessary to the Makefile. Since integration requires changing Lantern UI we will need to talk about how to approach it. I will next work on the ARM port though.\n. Ok! But, once this discovered Lantern Pi's are displayed, do we give the possibility to connect to them with the administration interface?\n. Also, I've just committed a subtle fix that was bugging me: I assumed that SSM multicast was being used due to the address used in the reference implementation (232.77.77.77), but actually the multicast implementation didn't (and doesn't) use source-specific multicast. Even though the issue is not noticeable in practice, we would be using a wrong multicast address.\n. Thank you!\n. Thank you @fffw !\n. Sure @myleshorton . Do you mean https://github.com/getlantern/lantern/tree/valencia/src/github.com/getlantern/framed?\n. @myleshorton I just removed it from testpackages to see what happens. The tests weren't failing locally on my computer.\nI'm hesitant to remove framed entirely because is being used by some other packages (probably not used either, since Lantern builds without framed). These packages are:\n- waddell\n- go-igdman\nIn any case, one of the tests builds failed at balancer, after a long chain of ERROR balancer: balancer.go:83 No trusted dialers!\nERROR balancer: balancer.go:83 No trusted dialers!\n--- FAIL: TestAll-2 (1.25s)\n    Location:   balancer_test.go:226\n    Error:      No error is expected but got No dialers left\n    Messages:   Dialing should have succeeded\n. Handling issue #2669 as well.\n. Sure, actually now I'm making progress on them in parallel. I'll merge them in a commit.\n. With this merge of the multicast branch, the related pull request https://github.com/getlantern/lantern/pull/2632 can be closed. \nThe status is as follows:\n- Lantern runs on the PI in headless mode. When in headless mode, now Lantern takes care of binding all interfaces so it can be accessed from network, not just the loopback device.\n- Lantern on desktop detects the Pi presence in the network (and the other way around), and the UI is informed of that (see screenshot).\n- Once the remote UI for the Lantern on the Pi is opened on the desktop environment, there seems to be an issue with the websockets service for updating the Local Lanterns list. Even though it is not necessary, it is actually a bug and should be showing a link to the desktop UI.\n\n. Ok! Ready for review.\nSummary: It works both ways. Lantern \"desktop\" finds the Pi and can open it. The Pi finds the \"desktop\" too, but since the desktop doesn't run in headless mode it doesn't bind the network interfaces and won't be accessible. Failure detection works well too and the UI is responsive to the Lanterns appearing/disappearing from the network.\nHere's a screenshot. The left is the desktop, the right is the Pi.\n\n. Besides this, I also run go vet, which shows no output. I'm not able to make vet produce any output in any case, so I'm not sure if it's actually working.\n. Also , Golint and Errcheck: I'll use them for them before any pull request.\n. Comments about this last commit:\n- I couldn't test the changes with the Pi physical device, I have to do that back at home.\n- There are some of the things that we discusses that once I got to the code I recalled why they were there, so I couldn't make all changes. I have written replied your comments where that's the case.\n. Oh, weird. It passes in my machine and shouldn't be machine-dependent or run-dependent.\nCould you please run it several times to make sure that is not run-dependent? I can't see any obvious reason why this could fail beyond an incorrect implementation. It can fail due to two reasons:\n1. Error unmarshalling the JSON message code, or\n2. Wrong message type (which should be caused only by wrong unmarshalling in the first place).\nCould you insert this lines at line 121 in multicast_test to see the output in case of error, please?\nstdLog.Println(string(b[:n]))\nstdLog.Println(msg)\n. The error doesn't make much sense, specially since I can't reproduce it. The message type you get is that of a Bye. So either you are receiving it from previous test functions' or the wrong type is being sent. I don't see the first one happening with the current test code. Could you please try it again with these tiny changes?\n. Sure, no problem! I was expecting it :)\n. @myleshorton what was wrong exactly with your reverse merge? I see the UI working well and integrated with changes.\n. The changes to the UI are very localized to partials/modals.html, so the merge was clean.\n. I've tested everything again with the Pi, and in a different network. It works and the UI is fine.\n. Ok great!!!\nI'll keep an eye on that potential issue.\n. Ok, I couldn't find any reference to Cloudfront code that could be affected by these changes.\nhttps://github.com/getlantern/lantern/blob/valencia/src/github.com/getlantern/peerscanner/main.go#L279 could be a problem, but this should never be true now: https://github.com/getlantern/lantern/blob/valencia/src/github.com/getlantern/peerscanner/host.go#L575\nLGTM!\n. This code is being improved for issue #2721. Should I remove this pull request altogether or keep them separate?\n. This last commit proposes a way of making sure both halves are closed just once, but still being able to preemptively close the proxy->client direction if the client->proxy fails/finishes. Also makes sure connections are closed in case of error/BadGateway.\n. Yes @myleshorton, this comment and commit was previous to our discussion on this code. I'll update it to reflect it.\n. Just to make sure: Do you want me to keep the old behavior of closing both connections only if the client->proxy ends, as in https://github.com/getlantern/lantern/blob/valencia/src/github.com/getlantern/flashlight/client/handler.go#L107?\nOr should I make both sides close be able to close both directions as you mention here https://github.com/getlantern/lantern/pull/2769/files#r35149539?\n. Yes, indeed. I was completely mistaken! What I don't understand is the comment:\nhttps://github.com/getlantern/lantern/blob/valencia/src/github.com/getlantern/flashlight/client/handler.go#L102\n// Force closing if EOF at the request half or error encountered.\n        // A bit arbitrary, but it's rather rare now to use half closing\n        // as a way to notify server. Most application closes both connections\n        // after completed send / receive so that won't cause problem.\nIt got stuck in my mind that the request half forced the other to exit as soon as finish/error happened. What does this comment refer to? (I want to understand it fully so there is no detail left behind).\n. Does the request half refer to both directions from the (browser) client to Lantern at the same time? If that's the case, then everything is clear to me.\nWhat I understood before is half as in duplex connection direction. Thus the confusion.\n. If this code looks right, we can just merge https://github.com/getlantern/lantern/pull/2794 and close this pull request. I'm sorry for these two pull requests stepping on each other, I just found one bug on my research for the other.\n. Or I can do a rebase and remove some commits.\n. Oh, I see.  That was a test I didn't do. Thanks @fffw.\nI was focusing on the second point you mention, since the first one implies a bigger change and I don't know if that's a desirable behavior.\nAt the moment, with the simple code I introduced it does report to loggly through golog package, but of course it requires handling panic in all goroutines. I can try and test the code you pointed at, that sound good?\n. Yes that's true. So, with a panic() the program stops the other threads, however, the recover() only grabs the panic() in the same thread? That means that we have to either send the log without proxying or just establish a new proxy in the recover() function, just for use in this situation. What do you think?\n. It seems to me at this point that introducing a new dependency or spending the time on this is not worth the trouble. I think we might be better off making sure we handle all errors and log them.\nThe panicwrap library looks interesting though, and probably a good way to go if we want to go with a full-blown version of this.\n. If all agree, we can close this PR without merging.\n. One more thing before we close this. Would we be interested in handling panic for uninstalling PAC, even if we cannot log?\nThat's one of the things discussed here https://github.com/getlantern/lantern/issues/2648\n. @fffw ok! We can close this PR then. We should close the issue as well then.\n. I've done a few tests to see how panicwrap works. The PAC uninstall is not a problem, it works with a panic from any goroutine. Writing logs to a file is not a problem, but I can't make the loggly debug work without larger changes. Anything that requires access to the child process won't work, so we would need to set up loggly and the proxy specifically for this purpose within the parent process.\nI don't have a complete sense of the magnitude of this change yet, so I wanted to ask. Or maybe there's another way... What do you think?\n. That's what I mean, yes. Should be proxied as well, is it correct?\n. The GoRecover function looks like a wrapper that you would need to use to \"decorate\" each function that you want to run under its recovery mechanism. We could of course run the main() function within GoRecover, but I would need to test that this work in all cases. After the initial findings by @fffw I would say it doesn't work in the general case. Actually, that's the whole reason why paincwrap exists using that esoteric method of reading the stderr of a forked process. Panicwrap is not beautiful, but at least is almost non-intrusive at all.\nAlso, how should I run the tests project-wide to see errors in this particular package? (I thought only tests under testpackages.txt were run)\n. I did test this and I think it won't fix our problem (unless I'm missing something). The discussion in the thread is not about our own issue.\nCheck this out:\n```\npackage main\nimport (\n    \"fmt\"\n    \"time\"\n)\nfunc goSilent(f func()) {\n    go func() {\n        defer func() {\n            if p := recover(); p != nil {\n                fmt.Println(\"Panic silenced:\", p)\n            }\n        }()\n        f()\n    }()\n}\nfunc main() {\n    goSilent(func() {\n        go func() {\n            panic(\"this is NOT recovered\")\n        }()\n        panic(\"this is recovered\")\n    })\n    time.Sleep(1000 * 1000 * 1000)\n}\n```\n. The question for me would be: should we go full-blown on panic logging? I would say yes, since we invested time in this already (and we actually don't know how many people are getting panics).\nThis will help also in this regard, but adding the complete panicwrap-based implementation will add an extra layer of diagnosis that will ensure liveness.\nThe only question remaining is how big this change would be, which I'm not sure at the moment. But I will work on it if you see it worth as well.\nSo in summary, I've changed my position and I believe we could go for this as an extra tool.\n. Yes, the goSilent approach would work only if used every single time we create a goroutine. I think that approach is verbose and error-prone, that's what I mean. I think using panicwrap is the best solution.\n. Ok, I have a working proof of concept of a panic catcher that cleans up and logs to Loggly through a proxy. I now have some questions in order to tweak the code for the final version. Please see the comments in the code!\n. @myleshorton this on is not yet ready for merging. It just needs a few details, but I'd like to discuss them (they are marked by the comments).\n. Thank you for your comments @fffw !\n. OK, I've added on-demand log flushing. I'd like to bring this to a meeting: should we log through proxy? If so, which local port?\n. Thank you!\nYes I have to update the README, good catch!\n. That is a very weird error. I guess \"reproducible builds\" is just an overstatement. I did run this several times today.\nWe can just avoid tests and run just make.bash. You can also try removing the Docker image and rebuilding it from scratch. Surprisingly, this works sometimes.\n. The failed to parse trace: g 161 is not runnable before start issues have appeared sometimes with many different versions of Go I've tried.\nIt is definitely an issue stemming from the instability of the Go version. But happened with many versions, just sometimes happens and some other doesn't, as far as I can tell from your results.\n. Yes indeed. I tried many versions, and I will keep trying for more stable ones. It should be approaching beta.\n. Thank you! Let's keep an eye on Go 1.5 ;)\n. @myleshorton @xiam I tried it as well, on Win 8.1. It works, install and uninstall, Desktop icon included.\nI noticed that when I run the installer, it didn't ask me for confirmation or a destination folder. Given that this is normal behavior for installers, do you think that it may be good to add it as well?\n. I actually was referring to the whole process, not the icon. When I run the installer, it just showed the progress bar directly from the double-click, no next button or anything.\n. This is what happens just after double-click on the lantern installer (no confirmation dialog)\n\n. I really don't have a strong position on this topic at all, but I just raise it as it could be potentially seen by users as too aggressive (i.e. from double-click straight to installed in your system without confirmation dialog).\n. Yes, it's more informing to the user.\nOne detail: it's an aar file, not arr ;)\nsee: You'll have to copy the .arr file manually:\n. Perfect!\n. The code looks good, it is safely merged. The tests are still run, but I guess that's ok.\nI'm surprised about OSX requirements, since I'm developing on this system. How can I reproduce it?\nI'm not surprised about Windows, I didn't test under that platform, to be honest. I'll test it.\n. I'm not able to reproduce it on OSX a the moment. Neither of the behaviors you mention with/without the firewall. Should this happen as soon as you join the multicast group?\n. LGTM!\n. @myleshorton should I delete the branch after merging?\n. Merging!\n. I apologize, I introduced this. I have had just the opposite experience with quotes in Makefile, so I added them to avoid issues.\n. Great! Thank you!\nWe now could use the git hooks, just removing temporarily everything but the errcheck tests.\n. I have two comments about the change:\n- I noticed that with PRINT_STACK=true, flashlight will output filenames with full path, which I think clutters the log a bit. Does this happen to you? Is it intentional?\n- This one is minor and not caused by your change, but I noticed that these environment variables are set to true also if TRACE=1 or PRINT_STACK=1, not just with =true. I think we should reflect this in the comments, even if it's fairly simple, but currently we assert that they are only written if the program is run with environment variable \"TRACE=true\"\n. Ok, I see that the full filepaths are only for the stacktrace. What do you think about shortening them to the filename only, or relative paths?\n. Ok to both! I would still reword the comment, because as it stands \"only if\" is not true!\nThank you for this change @fffw , it is indeed very useful!\n. One option that I propose is to keep only errcheck activated at the moment, and as I progress on the other checks we can activate them. At the moment golint and go test -race fail and seem to require a fair chunk of attention.\n. Yes, exactly. I will allocate time for the other tests to pass too. Thank you!\n. I like the idea! I've committed the required changes for that.\n. I reviewed the code and found no issues in the code or potential dependencies that could be affected by that removal, so I merged it. It is a minimal change. This PR fixes the tests that failed due to deactivation, because they expect this code to be active.\nThis should be part of that same PR, but I didn't test this particular package because it is a 'subpackage' of peerscanner and didn't realize it had its own separate tests until I saw it on Travis. That's why it's an independent PR. \n. thank you! I didn't realize either @myleshorton  :)\n. LGTM! Tested on Chrome, Safari and Firefox (OS X). IE (Windows). Merging.\n. It does work from Greece too. Thank you!!\n. I checked by 'curling' humans.txt through the proxy, though!  =)\n. @aranhoide not really! I'm surprised it worked then. I though it was deployed! But then again I just did that quick test. I'll need to test this more thoroughly to work on https://github.com/getlantern/lantern/issues/2891\n. That's it @aranhoide. What about Firetweet not getting the config? It is only acquired by fronting?\n. I think that error is caused by the lack of revision management in go get, @xiam. There is no way to tell go get to receive a specific version, but just get the last and checkout directly with git. The problem with that is if it fails before getting. But maybe the error you are getting can be resolved by a git checkout?\n. Hey @xiam, I vendored the Gomobile dependencies, so you shouldn't have a version problem now.\n. Great! Thank you!\n. I'm running this non-stop today and didn't fail once. Looks good for now.\n. Sorry @xiam, I had to rewrite history of this branch because I added the gomobile dependencies as submodules and couldn't remove it without doing so. You probably need to do a clean pull of the branch.\n. Yes, thank you. I realized when I pushed on Travis, which wasn't working half an hour ago. I'm fixing them ATM.\n. Thanks @xiam. The web shouldn't connect at all again once it has disconnected. There is no other code doing producing a reload AFAIK. You need to reload the page manually. That's the expected behavior with this workaround.\nThe first two states of the images you posted are to be expected now. The third isn't. Are you saying that if you leave the old page alone, that was showing the message \"Lantern appears not to be running anymore\", and you run Lantern again, after a minute or so the page will reload automatically? \n. Thank you @xiam. It may be about this line. I'll have to take a look then.\n. Thank you!\n. Awesome! LGTM.\n. geolookup test need to be updated for the new function prototype too:\ngeolookup/geolookup_test.go:13: assignment count mismatch: 2 = 3\ngeolookup/geolookup_test.go:29: assignment count mismatch: 2 = 3\n. In order to test the analytics code, are you using any kind of mock server, test account or a specific way of making sure it works before moving to production? \n. The only point I see bad things could happen is in the PubSub part, but is clear code. Golint produces many errors, but they come from previous code. It still have to do the full Golint project pass for that to be make sense.\nThe PR code LGTM! Merging.\n. It's straightforward and I see no potential issue. It simplifies and unifies the code. LGTM.\nShould I go on and merge this? (asking since this is server code).\n. Great! LGTM. Thanks @myleshorton and @aranhoide \n. An update to some of Gomobile's dependencies was required for Android support.\n. Sure, I will review it! Let me know here when it's ready for review.\n. Great! :)\nI'll continue reviewing this code.\n. Looks like a panic from a conversion precisely in the atomic values.\n. I think also better to initialize it there.\n. Ok, I've done a full pass and looks good to me. But I'd like to give it a second pass tomorrow first thing in the morning with a fresh mind if that's ok.\n. Ok, I've done a couple observations on the code, but I'm ready to merge when you take a look!\n. The previous error was caused by the connection succeeding and then trying to do the TLS handshake. Because we didn't provide any certificates in the test code (assuming it wasn't going to reach that stage), it was failing to use a proper certificate.\nOnce this was fixed, it turns out that sometimes the the 5000 microseconds timeout is too high, and the connection actually succeeds. The test relies on the connections timing out. Since I couldn't replicate the issue after 1000 runs in my machine, I assumed that it depends a lot on the machine, so I propose a way to adapt to faster machines.\nThe code will just reduce the max value of the timeout and repeat the test. It will do this until a connection succeeded in a suspiciously low time, which will be logged for further investigation.\n. This change is correct. I think this change fixes the situation, which currently has the case where a badGateway is responded after the OK. That is definitely a bug. We shouldn't respond BadGateway after the OK.\nAlternatively, we can also check for a failed OK and reply with badGateway if that's the case.\n. I agree that it is very unlikely that the OK would fail. Maybe with some setup like lossy local WiFi where another device uses Lantern as a proxy. This is the sort of situation we talked recently for mobile phones in local networks.\nBut in any case, what I think could happen is that we fail in connOut, err = detour.Dialer(d)(\"tcp\", addr), and it happens before the OK. At the moment we are not retrying, so we could answer badGateway in that situation and cancel the connection.\nOn the other hand, to simplify things, I think it would be ok to respond OK and close the connection. This would leave the browser/user-agent to deal with it.\n. So, if you agree with last point, I merge =)\n. I agree. LGTM, merging!\n. It is always saner to work concurrently with copies where possible and reasonable. I'm only worried that these three services (config/geolookup/stats) rely on some state that we are changing during the run, but I couldn't find traces of this.\nAlso, from what I could see, the fronted dialer is actually going to be the same for all three (is a copy of the highest QOS dialer available), and it creates each time a new copy of a client using it.\nLGTM!\n. WOW! I really should get the test -race project working. Last time I checked, tests had a race condition, so I don't run it on a normal basis and I have the intention to look into the issue. Even if you double-check the code, these race conditions are very sneaky. The error variable!\nJust one little comment before I commit.\n. LGTM!\n. We had a test failing from Enproxy (unrelated to the changes in this PR).\n. LGTM!\n. I think is a good decision to cut down features that are complex and not used. LGTM!\n. Thanks @fffw !\n. LGTM! Thanks @fffw, having clean tests finally!\n. This is interesting @manukall, thank you!\nWe've been receiving a lot of support-related issues on github, which is distracting. It seems to have stopped for now though. The problem of this is keeping track of yet another site with issue threads will bring more overhead to the team I think. \nI'll discuss it with the team. Thanks again!\n. Hi @JulianGindi \nI guess the reason why you are getting this issue is because we rely on private keys for some part of the process, and those need to be specifically set up per account on Travis.\nI don't see an immediate solution to this apart of letting the tests fail or deactivate the offending ones. You can probably remove https://github.com/getlantern/lantern/blob/valencia/.travis.yml#L10 and deactivate tests that rely on this.\nI'll think of ways this can be improved in the future, we have however many priorities now in Lantern that may require immediate attention.\nNow, about your PR, what is the error/issue you are actually solving in this commit?\nThank you very much for contributing!\n. Closing for now, as there is no response and/or apparent reason for this change, which seems to break builds. Please, provide more information about this code, I'll be glad to reopen and discuss it. Thank you!\n. Thank you @bitdop \nWe are currently using 1.4.2 for development (and looking forward moving to 1.5), why would we test with tip? The aim of testing is to get an environment as close as possible to users, and we release based on the 1.4.2 runtime.\n. Closing. This can bring some issues into the testing environment.\n. Yes. It happens in x86 32 bits too. Actually is not necessary that is the first member of the struct, but that is aligned. The easiest way is to put it first, so it dosn't break if someone adds new fields and doesn't realize of this.\n. Hi @lixiaodongsql. Your problem is probably unrelated to this PR. The possible issues are: https://github.com/getlantern/lantern/issues/3077 and https://github.com/getlantern/lantern/issues/3086. The fixes are almost done and will be ready in the next release. Thank you!\n. Yes, and this issue is also critical, it produces random segfaults. \n. Oh, I thought the number of XP users was higher! This OS version gives a lot headaches, the firewall thing was an example too.\n. Done. I'm very happy I could finally use cherry-pick for a perfect case like this :)\nI think we still have to merge this one, right? If it is a specific release branch, even if they are the same commit it needs to be merged back in valencia.\n. Great! I think is good to make sure.\nI finished reviewing the first part. About the genconfigWithVerify: is mostly based on genconfig, with the intention of NOT checking against custom Root CAs,  right? I can see that you commented out the code checking certificates and generates only masquerades.\n. OK! I'm not sure what's best actually. I guess is good not to clutter if we are not going to use it for now, but maybe can be kept with a comment saying that it's WIP or something. \nThe rest LGTM. I'm ready to merge it, unless you want to do something about the genconfigWithVerify program.\n. oh, by the way. Did we run errcheck, and the tests? Did we also test this code live somehow (I missed this part)?\n. I think this commit aranhoide just did is based on genconfigWithVerify, so maybe we can remove it now.\n. ok LGTM! Thanks @myleshorton \n. I've also removed a script for uploading to S3, to avoid confusion. It doesn't look like we are going back to S3 for config retrieval any time soon.\n. Hey @aranhoide, I just merged this with valencia to allow merging the PR. I updated according to your comments too, do you mind taking a look at it? Thank you!\n. I resolved the conflict\n. @ox, now that you are working with documentation, can you take a look at this PR and take something if it's still usable or otherwise close it? Thank you!\n. Hey @aranhoide, it looks like this is extremely outdated and not the right place for documenting this anyway, so what do you think about just closing it?\n. Yeah, let's just close it and rework it entirely when we find it fit.\n. LGTM. It is a typical issue with closures, so I'm merging right away. \n. That's awesome! Thank you! \n. No need to push this, it only affects code run by the verbose flag. \n. Ok, @fffw I finished with the review. Just that nil check I mentioned in the last comment and I'm ready to merge!\n. Thank you @fffw! This is going to be very useful for testing, indeed.\n. Are you using Oxy in Lantern client too? I mention it because I'm adding these dependencies in the chained-server repo so they are isolated.\n. Ok! Just making sure I'm not duplicating stuff unnecessarily.\n. The code seems OK. The resources.go file is a go file with a bunch of byte[] definitions, right?. I understand it tries to read from an embedded yaml file instead of from a regular file. \n. I'm going to do that test.\n. Works fine.\nHaven't seen that ../Resource/en.lproj before. Where do you mean exactly?\n. What did you see wrong? It looks fine in my case, and works\n. The tests are stuck at the IP geolookup, it's probably going to timeout. That doesn't seem related, though. I can merge, or do you want to see what happens with the geolookup before?\n. It hangs in Travis.\n. Travis: Test killed with quit: ran too long (10m0s).\n. Yes, it does. I passes and returns immediately. Both getlantern/geolookup and getlantern/flashlight/geolookup. (The test is failing in the former).\n. Great!! Yes, it's awesome. Countless hours saved. So, let's see Travis results!\nPuzzles me that the bug wasn't triggered on OSX though..\n. The last commit LGTM! Ready to merge?\n. The code looks good, but it fails with\n--- FAIL: TestCloneNEWUSERAndRemapRootDisableSetgroups (0.00s)\n        exec_linux_test.go:53: Cmd failed with err fork/exec /usr/bin/whoami: operation not permitted, output: \n--- FAIL: TestCloneNEWUSERAndRemapRootEnableSetgroups (0.00s)\n        exec_linux_test.go:53: Cmd failed with err fork/exec /usr/bin/whoami: operation not permitted, output:\n. Hey @xiam. It fails exactly the same way. I'm going to try with a clean remake, but it shouldn't make a difference.\n. Same thing, after remaking all images from scratch.\nLinux 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1 (2015-05-24) x86_64 GNU/Linux\n. It's possible! I rebuilt it in a beefier machine and works (OSX)\n. Ready for merge?\n. LGTM! Thanks\n. LGTM! Kudos for the benchmarking and all the tests in the code!!\n. Except for that comment for a potential improvement in the tests, everything LGTM @myleshorton \nI also wanted to ask, the issue stems from sending analytics with no known user agent? (I had no background of this issue, but that's what I understand from the code).\n. LGTM! Merging.\n. LGTM! Tested and solves the issue.\n. LGTM! Great bug fixing spree @myleshorton  :)\n. Implementation looks good to me. Let me know what you think about the API proposal, and it'd be ready to merge.\n. I see that @myleshorton's suggestions have been integrated.\nI just added a couple of comments, but overall I see the refactoring as a real improvement in the API. I'll wait for @myleshorton opinion on this before merging, as he's been reviewing as well.\n. Merging!\n. The aggregation is simple and different approaches could be taken. I've tried to follow the simplest solution that makes sense: build a new error type that can share common data between instances and report that with the count of instances.\nSome tests for it would be nice too.\n. We can see this on Monday @oxtoacart  and @fffw  . It isn't complete, but it is an integrated first approach that depends only on freezing/merging Borda + Structured Errors.\n. Ah ok! I will do that. Thx!\n. LGTM!\n. The reason for this was to push the server addresses lazily to the channel as demanded by the consumer threads. But since the file is anyways eagerly loaded before that, maybe the lazy feeding can be done at main. Testing of loadFallbacks would then be focused on proper deserialization of the given file.\n. I checked what log.Debug does, and it sends it to stdout. log.Error sends it to stderr.\nIn this scenario, I think it would be best to log messages that need to be processed on stdout, and the rest on stderr.\n. Yes, although IRCC I did that just to provide more specific error codes. I changed that in an upcoming commit, because even more code was being repeated unnecessarily.\n. The reason for this design is so the API is simpler if you don't need to set any of the callbacks, given that Go has no variable or named arguments. If you require arguments you need to provide them always, and also you have to check for documentation to recall the position, while if they are assigned to exported members of the struct you see clearly what they mean and if you don't add callbacks then there is no clutter.\nOn the other hand, your design forces the user to really think about those callbacks since is forced to provide them.\nI'll change the design then.\n. There was a (very short) delay in some situations. I thought about this and concluded that the bandwidth usage was worth the user experience. What do you think should prevail?\n. Yeah, it's not used. Will remove it.\n. I get the point of the nil checks, which I think is the strongest argument against my design, although I have a preference for the interface I proposed as it is slightly more self-documenting in my opinion. The nil check is a strong argument, so I propose a single method, but that will take a nil callback passed as argument and just consider it a default callback.\nThe rationale is that if I provide a specialized method with no callbacks as parameters, then I think I should provide two more for just add and remove callbacks exclusively, for consistency. A single method which takes care of handling nil arguments.\nAlso, this is typical interface design in C, I don't know about Go. What do you think?\nI will push this in a commit, I think code explains better.\n. I removed it. The hello function takes care of sending this information if the UI is closed when the event is received. I will test again with the Pi back at home.\n. Actually, coming back to this I realized that it is used. It is necessary particularly for the hello function, which will push the peer list to the UI as soon as it connects. While we can rely on the local peer list received as argument when there is an Add/Remove, we need this data to be held for this situation I describe.\n. One comment about this line too. After testing it with extra error handling I realized we were closing twice. This code would take care of that (pending in another branch):\n```\n// pipeData pipes data between the client and proxy connections.\nfunc pipeData(clientConn net.Conn, connOut net.Conn, req *http.Request) {\n    // Wait for both directions to be done\n    done := make(chan bool)\n// Start piping from client to proxy\ngo func() {\n    if _, err := io.Copy(connOut, clientConn); err != nil {\n        log.Debugf(\"Error piping data from client to proxy (%v): %s\", err, connOut)\n    }\n    done <- true\n}()\n\n// Then start copying from proxy to client\nif _, err := io.Copy(clientConn, connOut); err != nil {\n    log.Debugf(\"Error piping data from proxy to client (%v): %s\", err, connOut)\n}\n<-done\n\n}\n```\nOh, I took the OK out of this, but anyway I'm fiddling with this code so much at the moment that I feel is best to discuss it afterwards when I feel confident that is not the cause of the bug I'm working on now.\n. Sure! I'll come back to this code ASAP. I'm working on #2721, which is crazy.\n. That's perfectly possible. I'm touching many things in order to figure out the issue #2721, but I'll revisit this before making a case. I believe I have a real clue of what's going on with that issue.\n. I've checked what you mention in the parent comment, and I think it was originally written like this so intercept already handles closing connections even if pipeData is never reached, due to a BadGateway error (i.e. any return statement before reaching pipeData). Is this correct?\n. Yes I think so too. I'm prepared a commit to handle all the comments you've done in this thread.\n. I think your solution for keeping the code that closes both halves together is cleaner and easier to maintain. However, I don't see why you want to pass the closeConns function to pipeData, because you'll end up running that code twice (in pipeData and as a deferred function of intercept).\nI've committed a version that I think cleanly handles running the closing code just once. I think it could be improved with your code closing both halves in the same function.\n. Yes, that's a solution (passing the sync.once variable). The challenge here is to be able to call the function within the goroutine, while respecting a just once semantics. What I proposed in the latest commit is to use channel blocking to achieve the same goal without sync.once or directly calling, but relying on the defer. Please, let me know what you think of this other possibility :)\nhttps://github.com/getlantern/lantern/blob/6f9e63687a6bf16ff7099f93fe4fae30d4dddc4f/src/github.com/getlantern/flashlight/client/handler.go#L119\n. Oh, by the way, I took the OK response out of the piping function to keep this last one doing just that, but that's a different topic, and I can of course put it back :)\n. Yes, that is what I understood from the comment that was in the code: the client->proxy half should be able to close both sides if finished/error, but not the other way around.\nIf we want both sides to be able to close the other one preemptively, then I think is best done with once, indeed!\n. Yes you are right. They converged to the point where they are very similar. The most important difference however is their dependencies. I made android-lib-dev at first to avoid running genconfig.\n. So, I still would have two separate tasks, but DRY by one depending on the other. How does this sound?\n. I will add this as well, thank you! Tests pass anyway, but it is healthier for the environment.\n. Perfect!\n. It is not caused by a missing which utility, but rather by which not finding a file.\nI tried to improve this, but I think is not worth fiddling with it: the issue seems to be with their testing scripts. They test the existence of executable which is part of the test suite. Anyway these error recover, and are internal to the test suite.\nWe can also avoid running the test suite at all.\nThere were other errors before caused by missing programs, but I already fixed them before the pull request.\n. This is the main difference with the previous approach: your reply now contains the same text that is being logged in the server. Is that supposed to be logged in Client's side as well?\n. Even though it seems redundant or highly unlikely to fail, I think we should log also this error (currently we are only cheking if nil in order to use the dumped data or not). In any case, this will pass errcheck.\n. It's a significant change in behavior if this fails. I would make it an error, and see if it appears in Loggly.\n. It should be then, as in the desktop version.\n. I'll set it as an error too for correctness. But it probably won't log to loggly, just locally.\n. Ok, sorry for this leftover. I'm using my own \"local loggly server\" (just an nc server) so I had this overwritten for testing. Will revert in final commit.\n. I did this in order to provide optional blocking on the library client side. It doesn't change the API so it won't affect existing code.\n. I think we should use a different port than the user-defined one for Lantern regular use, because in case we had a panic the port might be still unusable. The way to define this probably needs some thought.\n. This is awful in my opinion. It turns out that the Loggly logger only flushes every 5 seconds. There is no exposed interface for manually flushing ATM. I think we should expose it and avoid this artificial wait, what do you think @myleshorton @fffw ?\n. The alternative to these 2 ready blocking signals (or similar mechanism) is to wait 1 second or so.\n. outdated comment (leftover of my work)\n. If the message is passed as-is, it will be logged in multiple lines (as multiple messages), because panic produces a ton of output. We could do strings.Replace(\"\\n\", \"\\\\n\", -1) to replace newlines with the escaped symbol. Anything better? Some sort of encoding? Replacing with whitespace?\n. It requires a few (minor) intermediate changes as well, but I don't think is a problem.\n. That's a somewhat tactical decision in my opinion. What is the reason we are tunneling also Loggly logs? Loggly is probably not blocked, that's what I mean.\nIn that case, the fewer moving parts we have in the panic handler, the better.\n. So that's the tradeoff. We can go hard and first try with the proxy. If it fails, do it in the clear. Of course, if the proxy itself is the producer of the panic, we are left out. In any case, this whole thing is a last resort and all errors should be caught before by checks. So if we failed to do so, we better make sure to at least log.\nHow important is to tunnel loggly messages through our servers?\n. ok!\n. Yes, I agree. There might be an advantage to placing error checking close to the offending function though. Namely, specialized error messages.\n. No if we want errcheck to pass. We should explicitly discard errors from now on.\n. We need to be explicit that we are ignoring the error for errcheck to pass, which I think is good as well. It reflects what the comment states.\n. I've realized that everywhere else we are logging with the prefixes prepended to every line, for all sorts of multiline output. I think we should change that, but in a different PR to avoid mixing concerns. Does that sound right?\n. Previously this code didn't block. I did this so I could bock this call without affecting other code.\n. Ok. I was thinking on using a different address for proxy instead of the default (this is TODO), since the port might be on use and produce an error when trying to open. However, if we are not going to use Loggly through a proxy, this should just be removed.\n. Ok. I'll need to change some logging code, because at the moment it doesn't set the loggly writer if there is no proxy.\n. This is how panicwrap works, the parent process exits once it has run the child process \"wrapped\"\n// If exitStatus >= 0, then we're the parent process and the panicwrap\n// re-executed ourselves and completed. Just exit with the proper status.\n. This is the line I mean: https://github.com/getlantern/lantern/blob/valencia/src/github.com/getlantern/flashlight/logging/logging.go#L96\n. We would need that logging.Configure blocks. We also would need to call logging.Init(), otherwise we get a panic at print using a null pointer.\n. wow, this was definitely meant to be! Thank you @fffw !\n. Thank you! A very tiny detail, though. Could you please place the ( as in the other cases? (or change the other cases if you prefer). Even though is a tiny style detail, Bash is already a quirky language, so uniformity pays off in my opinion.\n. Yes\n. The interval-triggered function is only executed in browsers that are not Firefox. That is, when we are on Firefox, we won't reconnect and it will show the localized \"Lantern Gone\" message.\n. Yes, the output is \"panic\". The message passed to the logPanic function is exactly the output produced by a normal panic. We could just look for panic in the output.\n. If the pubsub.IP topic takes long to be published, it could happen. But I see an interface in analytics that only allows for starting/stopping the service, so how could the UI actively call the service?\n. Yes, that 40-50 secs. delay is the bug. It grows if you add more tabs, and there is a \"memory\" of opened tabs, so even if you close them it happens.\nThe only way I found the \"Waiting for Lantern\" message can be avoided when you run Lantern (if the bug has been triggered) is by preventing Firefox to reconnect automatically. So yes, the intention of this workaround is that once lantern is shut down and then restarted, then you need to open a new page or reload manually.\n. Yes, I see what you mean, and is one of the things I thought could be the cause of this bug. Unfortunately other tests lead me to the conclusion that what triggers the bug is previously opened connections, not many of them trying to open at the very same time (I tried that by heavily randomizing this timeout among other ways).\nHowever, this interval is not going to be created each time, because it effectively overrides the onOpen callback, which will reload the web page and reinitialize the whole thing. A sure way of starting from scratch each time :)\n. Yes, it's intentional. This timeout is what shows the message \"Lantern is Gone\" after 11 seconds in the \"waiting for lantern\" status. This way we are just going to this status directly, because we are not trying to reconnect anyway.\n. Yes!! This mistake could have caused a lot of pain in the future, I'm sorry. Thank you for catching it on time!!\n. I tend to use typedefs for long-ish definitions to clarify what they actually mean. In this case I agree it doesn't help much.\n. Sure! The reason I did it public is because of its symmetry with the other method, but is not going to be used outside logging in principle.\n. Oh, yes it does. That's common code (you can find it in osversion.go, without _ qualifiers). I didn't add it because it is not platform-dependent.\nI will add it in the next commit!\n. Done.\n. Can we avoid this check each time if we set the ip atomic value as \"\" from the beginning? I mean, initializing it with \"\" should remove the possibility of it being nil, right?\n. (same here)\n. Just making sure -- this could be done independently of the country/ip lookup above, right?\nHere we are just trying to get the information via Cloudflare's filter, as a shortcut.\n. I made this channel with a size 1 so the sender doesn't block. While now it won't really make a difference, if we never read the success channel, the goroutine will block and leak, ending up with tons of them. It is just a safety measure in case there is a reason for the channel never to be read, like a failure.\nAs I mentioned, this is not happening in this code, but I thought it was a good insurance to put in place.\nWhy would it be better to make it unbuffered?\n. We are 100% positive that Enproxy will respond with these headers right? Even though a bit pedantic, wouldn't a test to make sure be a good idea? One rename or refactor could sneak empty strings here.\n. The main reason I ask this is because I was thinking on potential issues with the encoding used for countries in CF-IPCountry. Are we confident both Cloudflare and us are using the same format? Cloudflare is using ISO 3166-1 Alpha 2 format, I checked that.\n. I see that you've tried with 100 millis and 1 sec. In order to make it resilient, could we somehow detect success on the DNSSimple side to continue the test? Or maybe don't consider it failed if the fail was on DNSSimple side?\n. I saw in the tests you used uppercase and here you are only testing for lowercase. Is there any possibility that the input is uppercase?\n. So, the main purpose of passing this function as a parameter is testability, am I correct?\n. Oh, I was writing this from scratch. Don't worry, I'll merge them later on.\n. How is it done, where is the code that launches a new server?\n. You mean the Redis section altogether? \n. Yes that was the reason. I introduced this in a specific \"fix\", which I don't understand in retrospect. But certainly makes no sense at the moment.\nI did all changes in that PR trying to leave all behavior untouched, otherwise.\n. Isn't this header added already in balancer? Otherwise checkfallbacks wouldn't be working ATM.\n. So, with this we would also be able to print the request to the proxy, right? (Not just the request passed to it to relay, once it is connected). So, effectively we are bypassing the flashlight code currently being used to test fallbacks?\n. I think that if the previous line fails, this would segfault.\n. Is this the only code we might expect? Is it possible that a server returns 20x or 30x and still be acceptable?\n. I saw it here, but that's right, is application code. It's also here and here, so from the library design point of view, it is expected to be defined always in the user code.\n. Could this be logged twice? Both here and where the returned error is collected.\n. maybe we don't need to return the fullPath anymore? it can be derived from the parameter and the return value.\n. well, you are using it alternatively here, just the fullPath\n. This will overwrite any previous file, because we didn't check for existence. Is that what we are looking for?\n. This line explains it I guess: https://github.com/getlantern/lantern/blob/release-2.0.1/src/github.com/getlantern/flashlight/config/config.go#L180\n. I guess this is the gist: we first check if we have a good config. Otherwise we extract one from the tarfs system and save it as a regular file. Next time we run Lantern, it will read that one.\nWhat happens with autoupdates then? \n. OK. It's clear now. \n. Sure, I'll add that change!\n. Yes it is defined twice, it can by removed. I think this comes from when we were using a git revision. If we are now using releases we can remove all this.\n. I added this back when I did the port to Raspberry Pi. I don't remember the details, and it's been a while that I don't compile it, but it was certainly working.\n. Why this choice? Since it won't provide any kind of security, rot13+zip could've been sufficient. Not that important, but I wonder if a more lightweight solution could be possible.\n. We are using %v and %s inconsistently across this function for errors.\n. I mean lightweight computationally. We are adding up miliseconds to startup by each new feature that we add, and that's how heavy programs get born ;)\n. In this case, why are we more interested in the first error? Perhaps return both concatenated?\n. Why do you check m.Obfuscate here? If this function is called by reloadFromDisk and m.Obfuscate isn't true it won't read the obfuscated version in case it fails to read as non-obfuscated one.\n. I mean, it won't make line 53 very useful. Is that correct?\n. With this, we are now only testing the obfuscated version path. Perhaps adding both would improve coverage. What do you think?\n. Are we ever reading the local filesystem for this? Why? Shouldn't the embedded be the default?\n. We are assuming here that just casting to a Config will provide a chained server. The case where we have a valid cast without a valid chained server is not going to happen?\n. ok I see. This is where probably my previous question gets answered. I would say that the function naming is a bit confusing, since what we are really checking there is if the config is valid, not if it has chained servers.\n. I'm interested in how you did these measurements. Are they comparative differentials between versions of Lantern with and without this or a profiling of the function itself?\nNormally symmetric encryption has some overhead, that's why I'm interested in this aspect.\n. Thanks.\n. %v / %s\n. I agree it's a better abstraction.\n. Impressive that you created the full benchmark. Thanks!!\n. I'm curious, why did you decide to break at 255 instead of constraining the loop to i < 255?\n. Ah! I see, byte(0) actually creates a C char-like type. Of course, it makes sense.\n. In order to test eventual assignation (the purpose of eventual), perhaps we can run RegisterUserAgent in a different goroutine that waits for couple hundred miliseconds to register the agent, so received needs to block for that time.\nThese can be two separate tests though. One with immediately available value and one in which eventual blocks.\n. Saw that above. More clear.\n. Great! Thank you for updating\n. This will fail if we don't get a value in params on time, but being a test we have control over that time and it is perfectly fine.\n. Thanks for the comment, it certainly saved time :)\n. Ok, apart from what we talked in Slack, this seems to address particularly the case of the issue.\n. ~~This serialization doesn't use any separator between fields. How is it going to be efficiently deserialized?~~\nDidn't see the space.\n. What you are proposing here @oxtoacart is to have another field with the error type? I can see that in the code already, so I might have misunderstood what you propose.\n. Making this differentiation is so some errors are reported using this mechanism and others using the traditional GoLog? I would propose using a common interface for both, unless there is a strong reason to keep these separate.\n. In my opinion the convenience method approach is more flexible. In order to make an interface hierarchy of Info types we need to expose all its members as functions and may end up being more convoluted.\n. This is where I assume I'll have to plug my event processing mechanism, correct @fffw ?\n. My knowledge of Go idioms is not very extense, you might have a cleaner idea of what a interface-base solution might look like. My impression is that subtyping with dumb objects Go might prefer embedding.\n. Totally fine, just wanted to see if we are thinking the same way.\n. What you refer to as \"reporter\" here is, if I understand correctly, needs to be connected to what I've denominated the Event Emitter, in the events-pipeline library. This one will receive a Key and a list of values in the form map[string]interface{}. But the actual interface between your error reporter and the my emitter would convert the static types to a map[string]interface{}. Does that sound reasonable to you?\n. I'm not particularly fond of this API. I'd use a constant with a name that clearly states the strategy\nhttp.ChainedAndFrontedParallelStrategy\nhttp.ChainedAndFrontedSequentialStrategy\nThere might be other strategies in the future, but more importantly, I think we could gain in clarity, instead of using a large comment (which is only found in the definition of the function, not in every usage).\n. Those names I proposed could be shorter ;)\n. ```\nutil.ParallelStrategy\nutil.SequentialStrategy\n// ... and perhaps for testing or some usage in the future\nutil.OnlyFrontedStrategy\nutil.OnlyChainedStrategy\n// ...etc\n```\nWhat do you think?\n. This decision is polemical. Globals vs. argument passing percolating into different layers are at the opposite of the spectrum, which clear differences. But not so clear which one is best.\nObviously globals introduce convenience, but generally reduce testability and encapsulation.\nI guess my main question here would be: is this 100% the case where we want to set this only once and is never going to change throughout the life of the program? If so, it should be ok, including for testing.\n. I think this  is a good change. If we want direct connection at some point we should be able to do it at the library user side. Just providing the proper error signal from the Chained/Fronted API should be fine.\nBesides, it wasn't obvious that it was doing that (i.e. too \"smart\" behavior)\n. Great tip! I'll do it.\n. Indeed!\n. Regarding \"chunking\" we still have to decide whether Borda is going to support multiple measurements at the same time or not. If it doesn't, we can just remove chunking altogether. This part is definitely not done.\nThe timer part goes into error aggregation actually. So, if there is no endpoint for multiple errors, we can just remove this code.\n. You are more aware of the types of errors there are than me. Do you think aggregating some classes is worth it? Can we identify them and work with those?\n. Why there is no .Exit() in this one or deferred?\n. I see, you need to do it in the calls to proxyContext(). However, I find this unintuitive and potentially prone to developer errors, as it seems an inconsistency. What's the origin of this?\n. In the server:\n- The code deals with numbers as 64 bits integers.\n- Redis handles everything internally as strings, but the numbers are always parsed when crossing the Lua boundary so they are properly typed.\n. ",
    "sunshine19090": "This works fine in chrome and Firefox. Manoto fb page is not opening in IE 11 when Lantern is run for the first time.\n. Oops..I thought this is similar to the issue. I will open a separate issue.\n. @fffw Okay. My understanding based on this issue is, manoto fb page opens up when the user installs the Lantern and runs it for the very first time. After that, we should never be showing it. \nHow it works now is, manoto fb page is opening up whenever Lantern is run (not just when using \"Show Lantern\"). But in IE 11, it is not opening the manoto fb page during the first run alone. After that, it is fine.\n. @atavism So manoto fb page opens only for the first time when Lantern runs, right? After that no matter how it is launched, it will just open the Lantern browser alone. Let me know if my understanding is correct.\n. Todd sent me with the fix for blank space and I did some tests with that\ntoo. So if this is same, then I don't have to check again. It is good to go!\nOn Wed, Feb 3, 2016 at 2:43 PM, myleshorton notifications@github.com\nwrote:\n\nNice @atavism https://github.com/atavism! This has one last QA cycle to\ngo before being pushed out, is that right @sunshine19090\nhttps://github.com/sunshine19090?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3486#issuecomment-179508450.\n\n\nRegards,\nSunshine\n. ",
    "timrau": "This closed #3002\n. ",
    "robot1d59cc305": "I am a paying user of the Lantern, but recently I had a problem licensing the professional version of the Lantern for my Android phone.\nWhenever I want to enter the \"dynamic authorization code\" given to me by the Android Lantern into the \"authorize other devices to use professional\" dialog box on Windows, I can now run the Android Lantern at any time.\n\nThe \"authorization device for professional use\" interface of the Android Lantern client always pops up \"error of obtaining dynamic authorization code\"!Please try again later.\"Such content prevented me from turning the Android Lantern into a professional version.\nHow to solve this problem?On my Windows system, where the Lantern professional edition can be used normally, I purchased a two-year professional edition of the service, which now runs out next year.\n. ",
    "pengyuan": "\u8bf7\u84dd\u706f\u5ba2\u670d\u7559\u4e0b\u8054\u7cfb\u65b9\u5f0f\u3002\n\u6211\u53bb\u5e74\u4e70\u4e86\u4e09\u5e74\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff0c\u6709\u4e0d\u9650\u5236\u7684\u9ad8\u901f\u6d41\u91cf\uff0c\u4e5f\u6709\u63d0\u793a\u5230\u671f\u65e5\u671f\u4e3a2021\u5e74\u3002\n\u7ed3\u679c\u6700\u65b0\u7248\u672c\u8981\u6c42\u6211\u5347\u7ea7\u52305.2\uff0c\u800c\u4e14\u6ca1\u6709\u4e86\u5230\u671f\u65e5\u671f\uff0c\u6bcf\u6b21\u8fde\u63a5\u8bf4\u6211\u9ad8\u901f\u6d41\u91cf\u5df2\u7528\u5b8c\uff0c\u8981\u6c42\u5347\u7ea7\u9690\u5e01\u3002\n\u4ee5\u540e\u8fd8\u6709\u8c01\u6562\u4e70\u4e13\u4e1a\u7248\uff0c\u6211\u4e4b\u524d\u7684\u8d39\u7528\u5230\u54ea\u91cc\u53bb\u4e86\uff1f\uff1f\uff1f\n\u6c42\u89e3\u91ca\uff01\uff01\uff01\uff01\uff01\uff01. \u8bf7\u84dd\u706f\u5ba2\u670d\u7559\u4e0b\u8054\u7cfb\u65b9\u5f0f\u3002\n\u6211\u53bb\u5e74\u4e70\u4e86\u4e09\u5e74\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff0c\u6709\u4e0d\u9650\u5236\u7684\u9ad8\u901f\u6d41\u91cf\uff0c\u4e5f\u6709\u63d0\u793a\u5230\u671f\u65e5\u671f\u4e3a2021\u5e74\u3002\n\u7ed3\u679c\u6700\u65b0\u7248\u672c\u8981\u6c42\u6211\u5347\u7ea7\u52305.2\uff0c\u800c\u4e14\u6ca1\u6709\u4e86\u5230\u671f\u65e5\u671f\uff0c\u6bcf\u6b21\u8fde\u63a5\u8bf4\u6211\u9ad8\u901f\u6d41\u91cf\u5df2\u7528\u5b8c\uff0c\u8981\u6c42\u5347\u7ea7\u9690\u5e01\u3002\n\u4ee5\u540e\u8fd8\u6709\u8c01\u6562\u4e70\u4e13\u4e1a\u7248\uff0c\u6211\u4e4b\u524d\u7684\u8d39\u7528\u5230\u54ea\u91cc\u53bb\u4e86\uff1f\uff1f\uff1f\n\u6c42\u89e3\u91ca\uff01\uff01\uff01\uff01\uff01\uff01. \u8bf7\u84dd\u706f\u5ba2\u670d\u7559\u4e0b\u8054\u7cfb\u65b9\u5f0f\u3002\n\u6211\u53bb\u5e74\u4e70\u4e86\u4e09\u5e74\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff0c\u6709\u4e0d\u9650\u5236\u7684\u9ad8\u901f\u6d41\u91cf\uff0c\u4e5f\u6709\u63d0\u793a\u5230\u671f\u65e5\u671f\u4e3a2021\u5e74\u3002\n\u7ed3\u679c\u6700\u65b0\u7248\u672c\u8981\u6c42\u6211\u5347\u7ea7\u52305.2\uff0c\u800c\u4e14\u6ca1\u6709\u4e86\u5230\u671f\u65e5\u671f\uff0c\u6bcf\u6b21\u8fde\u63a5\u8bf4\u6211\u9ad8\u901f\u6d41\u91cf\u5df2\u7528\u5b8c\uff0c\u8981\u6c42\u5347\u7ea7\u9690\u5e01\u3002\n\u4ee5\u540e\u8fd8\u6709\u8c01\u6562\u4e70\u4e13\u4e1a\u7248\uff0c\u6211\u4e4b\u524d\u7684\u8d39\u7528\u5230\u54ea\u91cc\u53bb\u4e86\uff1f\uff1f\uff1f\n\u6c42\u89e3\u91ca\uff01\uff01\uff01\uff01\uff01\uff01. \u8bf7\u84dd\u706f\u5ba2\u670d\u7559\u4e0b\u8054\u7cfb\u65b9\u5f0f\u3002\n\u6211\u53bb\u5e74\u4e70\u4e86\u4e09\u5e74\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff0c\u6709\u4e0d\u9650\u5236\u7684\u9ad8\u901f\u6d41\u91cf\uff0c\u4e5f\u6709\u63d0\u793a\u5230\u671f\u65e5\u671f\u4e3a2021\u5e74\u3002\n\u7ed3\u679c\u6700\u65b0\u7248\u672c\u8981\u6c42\u6211\u5347\u7ea7\u52305.2\uff0c\u800c\u4e14\u6ca1\u6709\u4e86\u5230\u671f\u65e5\u671f\uff0c\u6bcf\u6b21\u8fde\u63a5\u8bf4\u6211\u9ad8\u901f\u6d41\u91cf\u5df2\u7528\u5b8c\uff0c\u8981\u6c42\u5347\u7ea7\u9690\u5e01\u3002\n\u4ee5\u540e\u8fd8\u6709\u8c01\u6562\u4e70\u4e13\u4e1a\u7248\uff0c\u6211\u4e4b\u524d\u7684\u8d39\u7528\u5230\u54ea\u91cc\u53bb\u4e86\uff1f\uff1f\uff1f\n\u6c42\u89e3\u91ca\uff01\uff01\uff01\uff01\uff01\uff01. ",
    "manukall": "@uaalto thanks. it's great to hear you like the idea.\nProjectTalk is very much just at  the beginning. Right now, Semantic-UI is the only larger project actively using it. We're still figuring out what works best, but I believe that in general it will be very helpful to remove some of the distraction you mentioned.\nOne idea behind moving the support-related issues to a message board is that it will also encourage other users to GIVE support. While issues on Github can feel more directed towards the projects maintainers, people understand message boards as community-driven. This way, we hope to decrease the overhead for maintainers.\nAnyway, as I said, we're right at the beginning. So I'm grateful for any feedback you have. If you can think of a way of improving ProjectTalk, please let me know.\n. ",
    "JulianGindi": "What is the best way to test this locally? Can I test within a docker container? Hard to debug this build issue without such a system. \n. Awesome, thanks for the tip. I was able to build all the binaries successfully...was wondering if anyone had more information about why this build might be failing on travis. \nThe command \"openssl aes-256-cbc -K $encrypted_f217260732a9_key -iv $encrypted_f217260732a9_iv -in envvars.bash.enc -out envvars.bash -d\" failed and exited with 1 during .\n. Seems like a few other PRs from personal branches (not the main repo), are running into the same travis build issue I am. Maybe something to look into. Is this the expected way for people to contribute, or should I be sending patches to the mailing list? Am more than happy to help out in any way. \n. ",
    "lixiaodongsql": "Hello, I am a Lantern user in China. Thank you very much for developing Lantern software to help Chinese netizens circumvent China's firewall. I really appreciate it. \nAfter I just installed Lantern 2.0.2 software in my system, Lantern 2.0.2 couldn't work in my network environment. But after a while Lantern 2.0.2 can work in my network environment. I upload the Lantern 2.0.2 log file to Google Group Lantern Developers. \nhttps://groups.google.com/forum/#!topic/lantern-devel/z2dNnebcvjM\nAbove is the URL of the topic which I posted in Google Group Lantern Developers.\nCould you please help me find out what caused Lantern 2.0.2 not to work at the very beginning? Thank you very much for your help. I really appreciate it. \nAt first I downloaded file update_windows_386.bz2 from the URL https://s3.amazonaws.com/github-cloud/releases/1380117/d6eaa40e-5167-11e5-8c90-a3f1f172d785.bz2?response-content-disposition=attachment%3B%20filename%3Dupdate_windows_386.bz2&response-content-type=application/octet-stream&AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&Expires=1441246557&Signature=bcS61htEnOF0ngCs4saWGwWKZu4%3D\nI put the suffix \".exe\" behind the original file name \"update_windows_386\" in order to make the file become an executable file. After I double-clicked the executable file, the only one \" Lantern.exe \" thread appeared in my Windows Task Manager. But the only one \" Lantern.exe \" thread immediately disappeared from my Windows Task Manager after the only one \" Lantern.exe \" thread appeared in my Windows Task Manager. I use Windows XP Service Pack 3. \nI know from another Google Group that some other Lantern users in China also find that the newest version Lantern software can't run in Windows XP Service Pack 3 System.\nhttps://groups.google.com/forum/#!topic/fqlt/Ca3xJm3_1JU\nCould you please help me solve this problem in next version of Lantern software? Thank you so much for your help again. I really appreciate it.\n. ",
    "Trickister": "thanks\nOn Thu, Oct 8, 2015 at 5:04 PM, myleshorton notifications@github.com\nwrote:\n\nLooks like that remaining error is just with creating new CF\ndistributions, which I think is OK.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3245#issuecomment-146711824.\n. how do it get started on this software stuff?\n\nOn Thu, Oct 8, 2015 at 5:09 PM, Kelcey Cuch 05kcuch18@gmail.com wrote:\n\nthanks\nOn Thu, Oct 8, 2015 at 5:04 PM, myleshorton notifications@github.com\nwrote:\n\nLooks like that remaining error is just with creating new CF\ndistributions, which I think is OK.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3245#issuecomment-146711824.\n. \n\n",
    "ReadmeCritic": ":wink: \n. ",
    "netroby": "It's about the time, download packages need more times to wait. decrease waiting time can save several minutes to finish the build progress.\n. ",
    "kuun": "Add option 'SystemProxy' in 'setttings' to support to disable auto setting system proxy.\n@xiam we need this feature, specially in china. issues about this feature: #3615, #3241 \n. @myleshorton ok, thanks\n. ",
    "KireinaHoro": "well.. no idea why travis ci failed..\n. ",
    "essichavoosh": "II need theget lanter break filtering for my self\n. ",
    "lx3001": "\u4e0d\u597d. ",
    "joesis": "Ha totally forgot it. It's obsolete anyway.. ",
    "ghost": "The Chinese one is still up http://cn.nytimes.com/rss.html\nPercy Alpha(PGP\nhttps://pgp.mit.edu/pks/lookup?op=vindex&search=0xF30D100F7FE124AE)\n(202) 780-5619\nwww.percya.com   @p3rcya https://twitter.com/p3rcya\nIndependent Internet freedom researcher\nFormer co-founder of GreatFire\nOn Fri, Apr 15, 2016 at 12:11 PM, atavism notifications@github.com wrote:\n\nNow I'm actually getting \"Not Found\" for every NYT article I try to load\n=) Anyway, this seems unrelated to the current PR, and something we have to\naddress w/ the feed server.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/getlantern/lantern/pull/3968#issuecomment-210602611\n. \n",
    "wilon": "233\n\u652f\u4ed8\u5b9d\u641c\u7d22\u201c535829350\u201d\u9886\u7ea2\u5305. ",
    "MonhoYu": "\u8f93\u5165\u6211\u7684\u9080\u8bf7\u7801 YHMU3HD \u6765\u83b7\u5f97\u4e09\u4e2a\u6708\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff01\u7acb\u5373\u4e0b\u8f7d https://github.com/getlantern/forum. ",
    "github-0paul": "\u8f6c\u8ba9lantern, 22\u4e2a\u6708/200\u5143\u3002\u6709\u610fQ: 664930017. ",
    "xichengh": "lantern\u5728mac\u4e0a\u65e0\u6cd5\u5347\u7ea7\u5230\u4e13\u4e1a\u7248\uff0c\u5347\u7ea7\u9875\u9762\u90fd\u6ca1\uff0c\u4e00\u4e2a\u591a\u6708\u4e86\u8fd8\u662f\u8fd9\u6837. > > \u7f51\u9875\u7248\u84dd\u706f\uff0c\u6253\u5f00\u65f6\u6ca1\u6709\u90a3\u4e2a\u767b\u9646\u9875\u9762\u4e86\uff0c\u60f3\u8981\u5728\u7535\u8111\u4e0a\u6362\u8bbe\u5907\u5df2\u7ecf\u4e0d\u53ef\u4ee5\u4e86\uff0c\u53ea\u6709\u624b\u673a\u3002\n\n\u5144\u561a\uff0c\u4f60\u73b0\u5728\u80fd\u5728\u7535\u8111\u4e0a\u6253\u5f00\u84dd\u706f\u4e3b\u9875\u5417\uff1f\n\n\u6211\u4e5f\u662f\u6ca1\u6709\u767b\u5f55\u9875\u9762\uff0c\u771f\u4ed6\u4e48\u5751. \u6c42ios\u7248. \u4ec0\u4e48\u73b0\u5728\u4e0d\u80fd\u767b\u5f55\u4e86\uff0c\u6ca1\u6709\u5347\u7ea7\u5230\u4e13\u4e1a\u7248\u7684\u9875\u9762. \n. \u6ca1\u6709\u5347\u7ea7\u5230\u4e13\u4e1a\u7248\u7684\u9875\u9762\uff01\uff01\uff01\uff01. \u6c42ios ios ios\u7248\u672c. \u73b0\u5728\u84dd\u706f\u662f\u5b8c\u5168\u4e0d\u80fd\u7528\uff0c\u4e4b\u524d\u662f\u4e0d\u80fd\u767b\uff0c\u73b0\u5728\u662f\u6253\u90fd\u6253\u4e0d\u5f00\uff0c\u600e\u4e48\u8054\u7cfb\u4f60\u4eec\uff0c\u8fd9\u592a\u5751\u4e86. \u771f\u662f\u4ed6\u5988\u7684\u64cd\u86cb\uff0c\u5c0f\u534a\u5e74\u8fd8\u662f\u8fd9\u4e2a\u9e1f\u6837\u767b\u53c8\u4e0d\u80fd\u767b\u7528\u4e5f\u7528\u4e0d\u4e86\uff0c\u771f\u5783\u573e300\u5757\u62ff\u53bb\u4e70\u836f\u5403. ### \u6839\u672c\u6ca1\u6709\u767b\u5f55\u9875\u9762\uff0c\u53bb\u54ea\u767b\u90fd\u4e0d\u77e5\u9053\uff0c\u771f\u5751. ",
    "kevin08gao": "\u4e3a\u5565\u6ca1\u6709\u8bba\u575b\u4e86\uff0c\u4ee5\u540e\u600e\u4e48\u8054\u7cfb\u5ba2\u670d. \u7f51\u9875\u7248\u84dd\u706f\uff0c\u6253\u5f00\u65f6\u6ca1\u6709\u90a3\u4e2a\u767b\u9646\u9875\u9762\u4e86\uff0c\u60f3\u8981\u5728\u7535\u8111\u4e0a\u6362\u8bbe\u5907\u5df2\u7ecf\u4e0d\u53ef\u4ee5\u4e86\uff0c\u53ea\u6709\u624b\u673a\u3002. ",
    "panxskn": "\u8f93\u5165\u9080\u8bf7\u7801 58GG2S \u6765\u83b7\u5f97\u4e09\u4e2a\u6708\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff01\u7acb\u5373\u4e0b\u8f7d https://github.com/getlantern/forum\nEnter the invitation code 58GG2S to get the three-month Blue Light Pro! Download now https://github.com/getlantern/forum. ",
    "Crown1991": "win10\uff0c\u84dd\u706f\u4e3b\u9875\u4e00\u76f4\u5728\u8f6c\u5708\u5708\uff0c\u600e\u4e48\u641e\uff0c\u53ef\u80fd\u5c0f\u4f19\u4f34\u544a\u8bc9\u6211\uff1f. > \u7f51\u9875\u7248\u84dd\u706f\uff0c\u6253\u5f00\u65f6\u6ca1\u6709\u90a3\u4e2a\u767b\u9646\u9875\u9762\u4e86\uff0c\u60f3\u8981\u5728\u7535\u8111\u4e0a\u6362\u8bbe\u5907\u5df2\u7ecf\u4e0d\u53ef\u4ee5\u4e86\uff0c\u53ea\u6709\u624b\u673a\u3002\n\u5144\u561a\uff0c\u4f60\u73b0\u5728\u80fd\u5728\u7535\u8111\u4e0a\u6253\u5f00\u84dd\u706f\u4e3b\u9875\u5417\uff1f. ",
    "tomatojacky": "\u8f93\u5165\u6211\u7684\u9080\u8bf7\u7801 YX2MYYN \u6765\u83b7\u5f97\u4e09\u4e2a\u6708\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff01\u7acb\u5373\u4e0b\u8f7d https://github.com/getlantern/forum\n\uff08\u597d\u53cb\u8d2d\u4e70\u4e24\u5e74\u5957\u9910\u540e\uff0c\u4f1a\u8d60\u9001\u53cc\u65b93\u4e2a\u6708\u4e13\u4e1a\u7248\uff1b\u597d\u53cb\u8d2d\u4e70\u4e00\u5e74\u5957\u9910\u540e\uff0c\u5219\u8d60\u9001\u53cc\u65b91\u4e2a\u6708\u3002\uff09. > \u8dd1\u8def\u4e86\u5417\n\u53ef\u4ee5\u4f7f\u7528\u554a\uff0c\u5f88\u597d\u554a. ",
    "MikeHanx": "\u6ca1\u6cd5\u7528\u4e86\uff0c\u73b0\u5728\u3002\u53ea\u81ea\u52a8\u94fe\u63a5SG\uff0c\u4ee5\u524d\u8fd8\u7ecf\u5e38\u8fdeUS\uff0cSG\u6839\u672c\u5c31\u6ca1\u901f\u5ea6\u3002\n\u5982\u679c\u662f\u6211HOSTS\u51fa\u95ee\u9898\uff0c\u90a3\u6211\u4e5f\u5220\u4e86HOSTS\uff0c\u4e5f\u6ca1\u7528\u3002. ",
    "Devying": "\u8dd1\u8def\u4e86\u5417. ",
    "80068": "\u8fde\u4e2a\u8bba\u575b\u90fd\u4e0d\u6562\u5f00\u7684\u84dd\u706f\u7ffb\u8f6f\uff0c\u4f60\u60f3\u60f3\u5b83\u80fd\u662f\u771f\u7684\u5417\uff1f\u5bf9\u5417\uff0c\u8fd9\u4e0d\u4e8b\u5b9e\u90fd\u5728\u8fd9\u6446\u7740\u4e86\u5417\uff1f. \u7528\u4ed8\u8d39\u8f6f\u4ef6\u7684\u5927\u5bb6\u90fd\u8bb0\u597d\uff0c\u51e1\u662f\u8981\u4ea4\u5e74\u8d39\u7684\u5343\u4e07\u522b\u4ea4\uff0c\u90fd\u662f\u5e26\u6709\u6b3a\u8bc8\u6027\u8d28\u7684\u3002\u5305\u62ec\u84dd\u706f\u3002. \u6700\u8fd1\u84dd\u706f\u53c8\u4e0d\u80fd\u7528\u4e86\uff0c\u600e\u4e48\u529e\uff1f. \u8fd8\u672a\u6536\u5230\u65b0\u589e\u4e00\u4e2a\u6708\u7684\u8865\u507f\uff0c\u5230\u76ee\u524d\u84dd\u706f\u901f\u5ea6\u6700\u597d\u65f6\u7ef4\u6301\u5728720\u7684\u6e05\u6670\u5ea6\uff08\u65e5\u672c\u3001\u53f0\u6e7e\u3001\u9999\u6e2f\u7ebf\u8def\u5747\u672a\u51fa\u73b0\uff09\u300240\u5206\u949f\u4e4b\u5185\u51fa\u73b0\u4e86\u4e24\u6b21\u4e2d\u65ad\uff0c\u5e0c\u671b\u5c3d\u5feb\u4fee\u590d\u3002\u6709\u65b0\u8bba\u575b\u5730\u5740\u5c3d\u5feb\u516c\u5e03\u3002. \n\n\u57fa\u672c\u6062\u590d\u4e86\uff0c\u597d\uff01 \u8865\u507f\u4e00\u4e2a\u6708\u4eca\u65e5\u5df2\u7ecf\u6536\u5230\uff0c\u84dd\u706f\u53ef\u4fe1\uff01. \u8865\u507f\u5df2\u7ecf\u6536\u5230\uff0c\u4f7f\u7528\u57fa\u672c\u6b63\u5e38\uff0c\uff08\u4eca\u5929\u7f51\u901f\u6709\u70b9\u95f4\u6b47\u6027\u5361\u987f\uff09\uff0c\u84dd\u706f\u53ef\u4fe1\u3002\u671b\u84dd\u706f\u7ee7\u7eed\u52aa\u529b\u3002. 9\u67083\u65e5\u665a23:10\u53d1\u73b0\u84dd\u706f\u53c8\u88ab\u6682\u65f6\u5173\u95ed\u4e86\uff0c\u8fd9\u6b21\u662f\u600e\u4e48\u56de\u4e8b\u5462\uff1f. \u53c8\u6709\u5403\u559d\u73a9\u4e50\u3001\u73a9\u5bb6\u805a\u4f1a\uff1f\u6240\u4ee5\u84dd\u706f\u53c8\u6682\u65f6\u4e0d\u80fd\u7528\u4e86\uff1f. \u4eca\u5929\u4e0a\u5348\u53ef\u80fd\u662f\u6682\u65f6\u6062\u590d\uff0c\u7f51\u901f\u72b6\u51b5\u6b63\u5e38\u3002\u5e0c\u671b\u84dd\u706f\u7ee7\u7eed\u52aa\u529b\u3002. \n\n\u4e24\u6b21\u8865\u507f\u8fd8\u672a\u6536\u5230\uff08\u6309\u8bf4\u662f\u8865\u507f\u4e24\u4e2a\u6708\uff09\u3002\u76ee\u524d\u8fd8\u662f18\u4e2a\u6708\u3002\u6700\u5927\u7684\u95ee\u9898\u662f\u76ee\u524d\u8fd8\u4e0d\u80fd\u6b63\u5e38\u4f7f\u7528\u3002\u8fde\u63a5\u5730\u5740\u4f9d\u7136\u662f\u7f8e\u56fd\u3002\u901f\u5ea6\u5f88\u7f13\u6162\u3002\u4e0d\u50cf\u539f\u51486\u6708\u4efd\u6b63\u5e38\u7684\u84dd\u706f\uff08\u9999\u6e2f\u3001\u53f0\u6e7e\u3001\u65b0\u52a0\u5761\u7ebf\u8def\uff09\u90a3\u79cd\u79d2\u5f00\u8c37\u6b4c\u3001youtube\u3001\u63a8\u7279\u7b49\u7f51\u7ad9\u3002\n\n\u521a\u6d4b\u8bd5\u4e86\u4e00\u4e0b\u901f\u5ea6\u6709\u70b9\u8ddf\u4e0a\u4e86\uff0c\u4e0d\u9519\u3002\u7ee7\u7eed\u52aa\u529b\u3002\n. \u4ece12\u53f7\u5f00\u59cb\uff0c\u84dd\u706f\u7f51\u901f\u660e\u663e\u4e0d\u7a33\u5b9a\u4e86\uff0c\u5361\u5361\u987f\u987f\u3002\u6073\u8bf7\u84dd\u706f\u8d76\u7d27\u5347\u7ea7\u7b56\u7565\u5427\uff0c\u8fd9\u6837\u4ee5\u540e\u6ca1\u6cd5\u7528\u4e86\u554a\u3002. ",
    "huang303513": "\u8f93\u5165\u6211\u7684\u9080\u8bf7\u7801 YMWP7NG \u6765\u83b7\u5f97\u4e09\u4e2a\u6708\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff01\u7acb\u5373\u4e0b\u8f7d https://github.com/getlantern/forum. ",
    "tocaata": "\u8bf7\u84dd\u706f\u516c\u53f8\u522b\u5728\u653e\u4f60\u7684\u9a97\u4eba\u8d2d\u4e70\u9690\u5e01\u7684\u5e7f\u544a\u4e86\uff0c\u6211\u81ea\u5df1\u8fd8\u521b\u9020\u4e86A\u5e01\u3001B\u5e01\u3001C\u5e01\uff0c\u4f60\u4e70\uff1f\u8ba4\u8ba4\u771f\u771f\u505a\u4f60\u7684\u5de5\u5177\u884c\u5417\uff1f\u884c\u9a97\u53ef\u4e0d\u597d\uff01. ",
    "xuanfeng-xiao": "\u6211\u4e70\u7684\u65e0\u6cd5\u6388\u6743\u7ed9\u53e6\u5916\u4e24\u4e2a\u8bbe\u5907 \u600e\u4e48\u56de\u4e8b\uff1f \u6709\u5927\u4f6c\u80fd\u591f\u63d0\u4f9b\u6307\u5bfc\u4e48. ",
    "cexll": "\u6700\u8fd1\u627e\u5230\u4e00\u4e2a\u4fbf\u5b9c\u597d\u7528\u7684SSR,\u5e73\u57474MB/S \u4e00\u4e2a\u670810\u5143 \u5c31\u7b97\u8001\u677f\u8dd1\u8def\u4e5f\u4e0d\u6015 \u771f\u662f\u53d7\u591f\u4e86\u84dd\u706f\u4e86  \u670b\u53cb\u63a8\u8350\u76f4\u63a5\u4e70\u7684\u4e24\u5e74\u771f\u662f\u591f\u4e86  \u73b0\u5728\u8fd8\u641e\u8d77\u5e7f\u544a\u6765\u4e86RNM \n\u60f3\u4f53\u9a8c\u4e00\u4e0b\u7684\u53ef\u4ee5\u8bd5\u8bd5\u8fd9\u4e2a\u4ee3\u7406,\u6bd4\u84dd\u706f\u5feb\u51e0\u500d,\u6ce8\u518c\u90014G\u6d41\u91cf,  https://ssrss.space/register?aff=982272. \u6ce8\u518c\u90013G\u6d41\u91cf,4k\u65e0\u538b\u529b \nhttp://t.cn/RkWcAf7. \u5b98\u7f51\u5730\u5740:https://ssrss.space/register?aff=982272\n\u2714 \u7a33\u5b9a\u5feb\u901f\u5305\u6708\u4fbf\u5b9c\u5230\u4e00\u676f\u5976\u8336\u94b1 10\u5143/\u6708\n\u2714 \u6db5\u76d6Android\u3001IOS\u3001Win\u3001MAC\u3001linux\u3001\u8def\u7531\u5668\u5e73\u53f0\n\u2714 \u9ad8\u54c1\u8d28\u8282\u70b9\uff0c\u6db5\u76d6\u7f8e\u56fd\u3001\u9999\u6e2f\u3001\u65e5\u672c\u3001\u53f0\u6e7e\u3001\u65b0\u52a0\u5761\u7b49\u539f\u751fIP\uff0c\u901f\u5ea6\u5b8c\u7f8e\u7a334k\uff0c\n\u2714 \u4f17\u591a\u539f\u751fIP\u652f\u6301Netflix\u3001TVB\u3001DMM\u7b49\u7b49\n\u2714 \u6240\u6709\u8282\u70b9\u5747\u4e3a\u81ea\u5efa\uff0c\u6280\u672f\u6210\u719f\uff0c\u957f\u671f\u7a33\u5b9a\u63d0\u4f9b\uff0c\u5df2\u7a33\u5b9a1\u5e74\n\u2714 \u6ce8\u518c\u90011G\u4e0d\u9650\u901f\u6d41\u91cf\uff0cVIP\u8282\u70b9\u968f\u4fbf\u7528\uff0c\n\u2714 \u6700\u65b0\u63a8\u51fa\u4e00\u5468\u5e74\u5957\u9910\uff0c\u6700\u4f4e\u8d39\u75280.01\u5757\uff01\n\u2714\u5e73\u5747\u901f\u5ea6 3.00MB/S,\u6700\u9ad8\u53ef\u8fbe5.00MB/S\n\u271420+\u8282\u70b9 \u901f\u5ea6\u591f\u5feb\u4ef7\u683c\u4fbf\u5b9c\u6d41\u91cf\u591f\u7528. \u8ab0\u8b93\u6211\u5011\u4e2d\u570b\u4eba\u50bb\u5462\uff0c\u8b93\u5f88\u591a\u5916\u570b\u4eba\u89ba\u5f97\uff0c\u4e2d\u570b\u4eba\u7684\u9322\u5c31\u662f\u597d\u8cfa\uff5e\uff5e. @zwtall \u6d88\u8d39\u8005\u4e70\u4ea7\u54c1\u662f\u6765\u4f53\u4f1a\u4f60\u7684\u4e0d\u5bb9\u6613\u7684?,\u6211\u82b1\u94b1\u4e70\u4f60\u7684\u4ea7\u54c1\u5c31\u662f\u8ba9\u4f60\u6765\u7814\u53d1\u7684?\u8ba9\u6d88\u8d39\u8005\u65e0\u6cd5\u4f7f\u7528\u7136\u540e\u767d\u767d\u6d6a\u8d39\u65f6\u95f4\u6d6a\u8d39\u91d1\u94b1?. @zwtall \u6211\u4e0d\u662f\u5356\u7684\u8c22\u8c22\uff0c\u53ea\u662f\u4ed6\u6bd4\u84dd\u706f\u597d\u7528\uff0c\u5305\u62ec\u7a33\u5b9a\u65f6\u5019\u7684\u84dd\u706f\uff0c\u73b0\u5728\u53ea\u60f3\u8bf4\u5783\u573elantern \uff0c\u79d1\u5b66\u4e0a\u7f51\u5f3a\u8feb\u4e00\u5e74\u4e00\u5e74\u4e70\u7684\u90fd\u662f\u6d41\u6c13. \u9000\u6b3e\u8fd9\u8f88\u5b50\u90fd\u522b\u60f3\u4e86....\u53ea\u80fd\u7948\u7977\u84dd\u706f\u522b\u8dd1\u8def,\u7b49\u7a33\u5b9a\u4e86\u5c31\u628a\u4ed6\u5356\u4e86. ",
    "gwrqto": "\u81ea\u5efass/ssr\u670d\u52a1\u5668\u6559\u7a0b\u3002\n2019.1.18\uff1avultr\u57282019\u5e741\u6708\u7684\u6700\u65b0\u6d3b\u52a8\uff0c\u9488\u5bf9\u65b0\u7528\u6237\uff0c\u76f4\u63a5\u900150\u7f8e\u5143\uff01\n2018.12.9\uff1a\u589e\u52a0\u7834\u89e3\u7248\u9510\u901f\u52a0\u901f\u6559\u7a0b\u3002\n2018.9.1\uff1avultr\u5b98\u65b9\u8fdb\u884c\u4e86\u8c03\u6574\uff0c2.5\u7f8e\u5143\u5957\u9910\u53ea\u63d0\u4f9bipv6\uff0c\u5982\u679c\u4f60\u7528\u4e0d\u4e86ipv6\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4e703.5\u7f8e\u5143\u7684\u5957\u9910\u3002\n\u3010\u5ba2\u6237\u7aef\u4e0b\u8f7d\u3011\n\u7b2c\u4e00\u6b21\u7535\u8111\u7cfb\u7edf\u4f7f\u7528SSR/SS\u5ba2\u6237\u7aef\u65f6\uff0c\u9700\u8981\u5b89\u88c5NET Framework 4.0\uff0c\u4e0d\u7136\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\uff0c\u5fae\u8f6f\u5b98\u7f51\u4e0b\u8f7d\u3002NET Framework 4.0\u662fSSR/SS\u7684\u8fd0\u884c\u5e93\uff0c\u6ca1\u6709\u8fd9\u4e2aSSR/SS\u5ba2\u6237\u7aef\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\u3002\u6709\u7684\u7535\u8111\u7cfb\u7edf\u53ef\u80fd\u4f1a\u81ea\u5e26NET Framework 4.0\u3002\nWindows SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740\nMAC SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740\nLinux\u5ba2\u6237\u7aef\u4e00\u952e\u5b89\u88c5\u914d\u7f6e \u4f7f\u7528\u811a\u672c (\u4f7f\u7528\u65b9\u6cd5\u89c1\u6ce8\u91ca) \u6216\u8005\u91c7\u7528\u56fe\u5f62\u754c\u9762\u7684linux ssr\u5ba2\u6237\u7aef\n\u5b89\u5353 SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740 \n\u82f9\u679c\u624b\u673aSSR\u5ba2\u6237\u7aef\uff1aPotatso Lite\u3001Potatso\u3001shadowrocket\u90fd\u53ef\u4ee5\u4f5c\u4e3aSSR\u5ba2\u6237\u7aef\uff0c\u4f46\u8fd9\u4e9b\u8f6f\u4ef6\u76ee\u524d\u5df2\u7ecf\u5728\u56fd\u5185\u7684app\u5546\u5e97\u4e0b\u67b6\uff0c\u53ef\u4ee5\u7528\u7f8e\u533a\u7684appid\u8d26\u53f7\u6765\u4e0b\u8f7d\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u914d\u7f6e\u7684SSR\u8d26\u53f7\u517c\u5bb9SS\u5ba2\u6237\u7aef\uff0c\u6216\u8005\u534f\u8bae\u9009\u62e9origin\u4e14\u6df7\u6dc6\u9009\u62e9plain\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u9009\u62e9\u82f9\u679cSS\u5ba2\u6237\u7aef\u8f6f\u4ef6\uff08\u5373\u534f\u8bae\u548c\u6df7\u6dc6\u53ef\u4ee5\u4e0d\u586b\uff09\u3002\u5728\u5927\u9646app\u5546\u5e97\u91cc\u9762\u53ef\u4ee5\u5c1d\u8bd5\u641c\u7d22\uff1aWingy\u3001shadowsocks\uff0c\u5982\u679c\u8f6f\u4ef6\u90fd\u88ab\u4e0b\u67b6\u4e86\uff0c\u5efa\u8bae\u81ea\u5df1\u6ce8\u518c\u7f8e\u533aappid\u6765\u4e0b\u8f7d\uff0c\u8f6f\u4ef6\u591a\u7684\u5f88\uff01\u82f9\u679c\u624b\u673a\u7533\u8bf7\u7f8e\u533aapple id\u65b9\u6cd5\u3002\n\u6709\u4e86\u5ba2\u6237\u7aef\u540e\u6211\u4eec\u9700\u8981\u81ea\u5df1\u642d\u5efa\u670d\u52a1\u5668\u521b\u5efass/ssr\u8d26\u53f7\u624d\u80fd\u7ffb\u5899\u3002 \n\u642d\u5efa\u6559\u7a0b\n\u4e0d\u6015\u88ab\u5c01ip\uff0c\u56e0\u4e3avultr\u662f\u6298\u7b97\u6210\u5c0f\u65f6\u8ba1\u8d39\uff0c\u4e14\u53ef\u4ee5\u968f\u65f6\u5220\u9664\u548c\u5f00\u901a\u670d\u52a1\u5668\uff0c\u65b0\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\u3002\u65b0\u5f00\u670d\u52a1\u5668\u53ea\u9700\u89810.01\u7f8e\u5143\uff0c\u5373\u4f7f\u4f60\u8fd0\u6c14\u975e\u5e38\u4e0d\u597d\uff0c\u5f00\u4e8610\u53f0\u670d\u52a1\u5668\u624d\u83b7\u5f97\u6ca1\u6709\u88ab\u5899\u7684ip\uff0c\u603b\u521b\u5efa\u670d\u52a1\u5668\u6210\u672c\u4e5f\u53ea\u67090.1\u7f8e\u5143\uff0c\u4e0d\u52301\u5757\u94b1\u3002\n\u6559\u7a0b\u5f88\u7b80\u5355\uff0c\u6574\u4e2a\u6559\u7a0b\u5206\u4e09\u6b65\uff1a\n\u7b2c\u4e00\u6b65\uff1a\u8d2d\u4e70VPS\u670d\u52a1\u5668\n\u7b2c\u4e8c\u6b65\uff1a\u4e00\u952e\u90e8\u7f72VPS\u670d\u52a1\u5668\n\u7b2c\u4e09\u6b65\uff1a\u4e00\u952e\u52a0\u901fVPS\u670d\u52a1\u5668 (centos6\u7cfb\u7edf\u9009\u62e9\u9510\u901f\u52a0\u901f\uff0ccenots7\u9009\u62e9bbr\u52a0\u901f)\n\n\u7b2c\u4e00\u6b65\uff1a\u8d2d\u4e70VPS\u670d\u52a1\u5668\nVPS\u670d\u52a1\u5668\u9700\u8981\u9009\u62e9\u56fd\u5916\u7684\uff0c\u9996\u9009\u56fd\u9645\u77e5\u540d\u7684vultr\uff0c\u901f\u5ea6\u4e0d\u9519\u3001\u7a33\u5b9a\u4e14\u6027\u4ef7\u6bd4\u9ad8\uff0c\u6309\u5c0f\u65f6\u8ba1\u8d39\uff0c\u80fd\u591f\u968f\u65f6\u5f00\u901a\u548c\u5220\u9664\u670d\u52a1\u5668\uff0c\u65b0\u670d\u52a1\u5668\u5373\u662f\u65b0ip\u3002\nvultr\u6ce8\u518c\u5730\u5740\uff1a https://www.vultr.com/?ref=7777564-4F  \uff08vultr\u57282019\u5e741\u6708\u7684\u6700\u65b0\u6d3b\u52a8\uff0c\u9488\u5bf9\u65b0\u7528\u6237\uff0c\u76f4\u63a5\u900150\u7f8e\u5143\uff01\u5168\u740315\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u53ef\u9009\uff0cKVM\u6846\u67b6) \n\n\u867d\u7136\u662f\u82f1\u6587\u754c\u9762\uff0c\u4f46\u662f\u73b0\u5728\u7684\u6d4f\u89c8\u5668\u90fd\u6709\u7f51\u9875\u7ffb\u8bd1\u529f\u80fd\uff0c\u9f20\u6807\u70b9\u51fb\u53f3\u952e\uff0c\u9009\u62e9\u7f51\u9875\u7ffb\u8bd1\u5373\u53ef\u7ffb\u8bd1\u6210\u4e2d\u6587\u3002\n\u6ce8\u518c\u5e76\u90ae\u4ef6\u6fc0\u6d3b\u8d26\u53f7\uff0c\u5145\u503c\u540e\u5373\u53ef\u8d2d\u4e70\u670d\u52a1\u5668\u3002\u5145\u503c\u65b9\u5f0f\u662f\u652f\u4ed8\u5b9d\u6216paypal\uff0c\u4f7f\u7528paypal\u6709\u94f6\u884c\u5361\uff08\u5305\u62ec\u4fe1\u7528\u5361\uff09\u5373\u53ef\u3002paypal\u6ce8\u518c\u5730\u5740\uff1ahttps://www.paypal.com \uff08paypal\u662f\u56fd\u9645\u77e5\u540d\u7684\u7b2c\u4e09\u65b9\u652f\u4ed8\u670d\u52a1\u5546\uff0c\u6ce8\u518c\u4e00\u4e0b\u8d26\u53f7\uff0c\u7ed1\u5b9a\u94f6\u884c\u5361\u5373\u53ef\u8d2d\u4e70\u56fd\u5916\u5546\u54c1\uff09\n2.5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a\u5355\u6838   512M\u5185\u5b58  20G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    500G\u6d41\u91cf/\u6708   (\u4ec5ipv6)\n3.5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a\u5355\u6838   512M\u5185\u5b58  20G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    500G\u6d41\u91cf/\u6708   (\u63a8\u8350)\n5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a  \u5355\u6838   1G\u5185\u5b58    25G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    1000G\u6d41\u91cf/\u6708  \n10\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a \u5355\u6838   2G\u5185\u5b58    40G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    2000G\u6d41\u91cf/\u6708  \n20\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a 2cpu   4G\u5185\u5b58   60G SSD\u786c\u76d8    \u5e26\u5bbd\u5cf0\u503c100M    3000G\u6d41\u91cf/\u6708  \n40\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a 4cpu   8G\u5185\u5b58   100G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    4000G\u6d41\u91cf/\u6708  \n\u6ce8\u610f\uff1avultr\u5b98\u65b9\u8fdb\u884c\u4e86\u8c03\u6574\uff0c2.5\u7f8e\u5143\u5957\u9910\u53ea\u63d0\u4f9bipv6\uff0c\u5982\u679c\u4f60\u7528\u4e0d\u4e86ipv6\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4e703.5\u7f8e\u5143\u7684\u5957\u9910\u3002\nvultr\u5b9e\u9645\u4e0a\u662f\u6298\u7b97\u6210\u5c0f\u65f6\u6765\u8ba1\u8d39\u7684\uff0c\u6bd4\u5982\u670d\u52a1\u5668\u662f5\u7f8e\u51431\u4e2a\u6708\uff0c\u90a3\u4e48\u6bcf\u5c0f\u65f6\u6536\u8d39\u4e3a5/30/24=0.0069\u7f8e\u5143 \u4f1a\u81ea\u52a8\u4ece\u8d26\u53f7\u4e2d\u6263\u8d39\uff0c\u53ea\u8981\u4fdd\u8bc1\u8d26\u53f7\u6709\u94b1\u5373\u53ef\u3002\u5982\u679c\u4f60\u90e8\u7f72\u7684\u670d\u52a1\u5668\u5b9e\u6d4b\u540e\u901f\u5ea6\u4e0d\u7406\u60f3\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u5220\u6389\uff08destroy\uff09\uff0c\u91cd\u65b0\u6362\u4e2a\u5730\u533a\u7684\u670d\u52a1\u5668\u6765\u90e8\u7f72\uff0c\u65b9\u4fbf\u4e14\u5b9e\u7528\u3002\u56e0\u4e3a\u65b0\u7684\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\uff0c\u6240\u4ee5\u5f53ip\u88ab\u5899\u65f6\u8fd9\u4e2a\u65b9\u6cd5\u5f88\u6709\u7528\u3002\u5f53ip\u88ab\u5899\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u65b0\u5f00\u7684\u670d\u52a1\u5668ip\u548c\u539f\u5148\u7684ip\u4e0d\u4e00\u6837\uff0c\u5148\u5f00\u65b0\u670d\u52a1\u5668\uff0c\u5f00\u597d\u540e\u518d\u5220\u9664\u65e7\u670d\u52a1\u5668\u5373\u53ef\u3002\n\u8ba1\u8d39\u4ece\u4f60\u5f00\u901a\u670d\u52a1\u5668\u5f00\u59cb\u7b97\u7684\uff0c\u4e0d\u7ba1\u4f60\u6709\u6ca1\u6709\u4f7f\u7528\uff0c\u5373\u4f7f\u670d\u52a1\u5668\u5904\u4e8e\u5173\u673a\u72b6\u6001\u4ecd\u7136\u4f1a\u8ba1\u8d39\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5f00\u901a\u670d\u52a1\u5668\u5c31\u4e0d\u7b97\u3002\u6bd4\u5982\u4f60\u4eca\u5929\u65e9\u4e0a\u5f00\u901a\u4e86\u670d\u52a1\u5668\uff0c\u4f46\u4f60\u6709\u4e8b\u60c5\uff0c\u665a\u4e0a\u624d\u90e8\u7f72\uff0c\u90a3\u4e48\u8fd9\u6bb5\u65f6\u95f4\u662f\u4f1a\u8ba1\u8d39\u7684\u3002\u540c\u7406\uff0c\u5982\u679c\u4f60\u65e9\u4e0a\u5220\u6389\u670d\u52a1\u5668\uff0c\u7b2c\u4e8c\u5929\u624d\u5f00\u901a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u8fd9\u6bb5\u65f6\u95f4\u662f\u4e0d\u4f1a\u8ba1\u8d39\u7684\u3002\u5728\u8d26\u53f7\u7684Billing\u9009\u9879\u91cc\u53ef\u4ee5\u770b\u5230\u8d26\u6237\u4f59\u989d\u3002\n\u6e29\u99a8\u63d0\u9192\uff1a\u540c\u6837\u7684\u670d\u52a1\u5668\u4f4d\u7f6e\uff0c\u4e0d\u540c\u7684\u5bbd\u5e26\u7c7b\u578b\u548c\u5730\u533a\u6240\u642d\u5efa\u7684\u8d26\u53f7\u7684\u7ffb\u5899\u901f\u5ea6\u4f1a\u4e0d\u540c\uff0c\u8fd9\u4e0e\u4e2d\u56fd\u7535\u4fe1\u3001\u4e2d\u56fd\u8054\u901a\u3001\u4e2d\u56fd\u79fb\u52a8\u56fd\u9645\u51fa\u53e3\u5e26\u5bbd\u548c\u7ebf\u8def\u4e0d\u540c\u6709\u5173\uff0c\u6240\u4ee5\u4ee5\u5b9e\u6d4b\u4e3a\u51c6\u3002\u53ef\u4ee5\u5148\u9009\u5b9a\u4e00\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u6765\u6309\u7167\u6559\u7a0b\u8fdb\u884c\u642d\u5efa\uff0c\u719f\u6089\u642d\u5efa\u65b9\u6cd5\uff0c\u5f53\u8d26\u53f7\u642d\u5efa\u5b8c\u6210\u5e76\u8fdb\u884c\u4e86bbr\u52a0\u901f\u540e\uff0c\u6d4b\u8bd5\u4e0b\u901f\u5ea6\u81ea\u5df1\u662f\u5426\u6ee1\u610f\uff0c\u5982\u679c\u6ee1\u610f\u90a3\u5c31\u7528\u8fd9\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u7684\u670d\u52a1\u5668\u3002\u5982\u679c\u901f\u5ea6\u4e0d\u592a\u6ee1\u610f\uff0c\u5c31\u4e00\u6b21\u6027\u5f00\u51e0\u53f0\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4f4d\u7f6e\u7684\u670d\u52a1\u5668\uff0c\u7136\u540e\u6309\u7167\u540c\u6837\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u642d\u5efa\u5e76\u6d4b\u8bd5\uff0c\u9009\u62e9\u6700\u4f18\u7684\uff0c\u4e4b\u540e\u628a\u5176\u5b83\u7684\u670d\u52a1\u5668\u5220\u6389\uff0c\u6309\u5c0f\u65f6\u8ba1\u8d39\u6d4b\u8bd5\u6210\u672c\u53ef\u4ee5\u5ffd\u7565\u3002\n\u8d26\u53f7\u5145\u503c\u5982\u56fe\uff1a\n\n\n\u5f00\u901a\u670d\u52a1\u5668\u6b65\u9aa4\u5982\u56fe\uff1a\n\n\n\n\u70b9\u51fb\u56fe\u4e2d\u7684CentOS\u51e0\u4e2a\u5b57\uff0c\u4f1a\u5f39\u51facentos6\uff0c\u7136\u540e\u9009\u4e2dcentos6\uff01\n\n\u63a5\u4e0b\u6765\u8fd9\u4e00\u6b65\u662f\u5f00\u542fvps\u7684ipv6 ip\uff0c\u9009\u586b\u9879\u3002\u5982\u679c\u4f60\u7684\u7535\u8111\u7cfb\u7edf\u53ef\u4ee5\u7528ipv6\uff0c\u90a3\u4e48\u53ef\u4ee5\u52fe\u9009\u6b64\u9879\u3002\u5927\u591a\u6570\u7528\u6237\u6ca1\u6709\u8fd9\u4e2a\u9700\u6c42\uff0c\u4f46\u6709\u4e00\u4e9b\u7528\u6237\u53ef\u80fd\u4f1a\u7528\u5230\uff0c\u6240\u4ee5\u8865\u5145\u4e86\u8fd9\u90e8\u5206\u5185\u5bb9\u3002\n\n\n\u5b8c\u6210\u8d2d\u4e70\u540e\uff0c\u627e\u5230\u7cfb\u7edf\u7684\u5bc6\u7801\u8bb0\u4e0b\u6765\uff0c\u90e8\u7f72\u670d\u52a1\u5668\u65f6\u9700\u8981\u7528\u5230\u3002vps\u7cfb\u7edf\uff08\u63a8\u8350centos6\uff09\u7684\u5bc6\u7801\u83b7\u53d6\u65b9\u6cd5\u5982\u4e0b\u56fe\uff1a\n\n\n\n\u5982\u679c\u4f60\u5f00\u542f\u4e86vps\u7684ipv6\uff0c\u90a3\u4e48\u5728\u540e\u53f0\u7684settings\u9009\u9879\u53ef\u4ee5\u627e\u5230\u670d\u52a1\u5668\u7684ipv6 ip\u3002\u5728\u90e8\u7f72SSR\u8d26\u53f7\u65f6\uff0c\u4f60\u7528ipv6 ip\u5c31\u884c\u3002\u6574\u4e2a\u90e8\u7f72\u53ca\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u8bb0\u5f97\u628a\u7535\u8111\u7cfb\u7edf\u5f00\u542fipv6\u5594\u3002\n\n\n\u5220\u6389\u670d\u52a1\u5668\u6b65\u9aa4\u5982\u4e0b\u56fe\uff1a\n\n\n\n\n\u7b2c\u4e8c\u6b65\uff1a\u90e8\u7f72VPS\u670d\u52a1\u5668\n\u8d2d\u4e70\u670d\u52a1\u5668\u540e\uff0c\u9700\u8981\u90e8\u7f72\u4e00\u4e0b\u3002\u56e0\u4e3a\u4f60\u4e70\u7684\u662f\u865a\u62df\u4e1c\u897f\uff0c\u800c\u4e14\u53c8\u8fdc\u5728\u56fd\u5916\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53ebXshell\u7684\u8f6f\u4ef6\u6765\u8fdc\u7a0b\u90e8\u7f72\u3002Xshell windows\u7248\u4e0b\u8f7d\u5730\u5740\uff1a\n\u56fd\u5916\u4e91\u76d81\u4e0b\u8f7d \n\u56fd\u5916\u4e91\u76d82\u4e0b\u8f7d \u63d0\u53d6\u5bc6\u7801\uff1a666\n\u56fd\u5916\u4e91\u76d83\u4e0b\u8f7d \u5bc6\u7801\uff1a123\n\u5982\u679c\u4f60\u662f\u82f9\u679c\u7535\u8111\u64cd\u4f5c\u7cfb\u7edf\uff0c\u66f4\u7b80\u5355\uff0c\u65e0\u9700\u4e0b\u8f7dxshell\uff0c\u7cfb\u7edf\u53ef\u4ee5\u76f4\u63a5\u8fde\u63a5VPS\u3002\u6253\u5f00\u7ec8\u7aef\uff08Terminal\uff09\uff0c\u8f93\u5165ssh root@ip  \u5176\u4e2d\u201cip\u201d\u66ff\u6362\u6210\u4f60VPS\u7684ip, \u6309\u56de\u8f66\u952e\uff0c\u7136\u540e\u590d\u5236\u7c98\u8d34\u5bc6\u7801\uff0c\u6309\u56de\u8f66\u952e\u5373\u53ef\u767b\u5f55\u3002\u7c98\u8d34\u5bc6\u7801\u65f6\u6709\u53ef\u80fd\u4e0d\u663e\u793a\u5bc6\u7801\uff0c\u4f46\u4e0d\u5f71\u54cd\uff0c \u53c2\u8003\u8bbe\u7f6e\u65b9\u6cd5  \u5982\u679c\u4e0d\u80fd\u7528MAC\u81ea\u5e26\u7684\u7ec8\u7aef\u8fde\u63a5\u7684\u8bdd\uff0c\u76f4\u63a5\u7f51\u4e0a\u641c\u201cMAC\u8fde\u63a5SSH\u7684\u8f6f\u4ef6\u201d\uff0c\u6709\u5f88\u591a\uff0c\u7136\u540e\u901a\u8fc7\u8f6f\u4ef6\u6765\u8fde\u63a5vps\u670d\u52a1\u5668\u5c31\u884c\uff0c\u5177\u4f53\u64cd\u4f5c\u65b9\u5f0f\u53c2\u8003windows xshell\u3002\n\n\u90e8\u7f72\u6559\u7a0b\uff1a\n\u4e0b\u8f7dxshell\u8f6f\u4ef6\u5e76\u5b89\u88c5\u540e\uff0c\u6253\u5f00\u8f6f\u4ef6\n\n\u9009\u62e9\u6587\u4ef6\uff0c\u65b0\u5efa\n\n\u968f\u4fbf\u53d6\u4e2a\u540d\u5b57\uff0c\u7136\u540e\u628a\u4f60\u7684\u670d\u52a1\u5668ip\u586b\u4e0a\n\n\u8fde\u63a5\u56fd\u5916ip\u5373\u670d\u52a1\u5668\u65f6\uff0c\u8f6f\u4ef6\u4f1a\u5148\u540e\u63d0\u9192\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u7528\u6237\u540d\u9ed8\u8ba4\u90fd\u662froot\uff0c\u5bc6\u7801\u662f\u4f60\u8d2d\u4e70\u7684\u670d\u52a1\u5668\u7cfb\u7edf\u7684\u5bc6\u7801\u3002\n\u5982\u679cxshell\u8fde\u4e0d\u4e0a\u670d\u52a1\u5668\uff0c\u6ca1\u6709\u5f39\u51fa\u8ba9\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u8f93\u5165\u6846\uff0c\u8868\u660e\u4f60\u5f00\u5230\u7684ip\u662f\u4e00\u4e2a\u88ab\u5899\u7684ip\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u91cd\u65b0\u5f00\u65b0\u7684\u670d\u52a1\u5668\uff0c\u76f4\u5230\u80fd\u7528xshell\u8fde\u4e0a\u4e3a\u6b62\uff0c\u8010\u5fc3\u70b9\u54e6\uff01\u5982\u679c\u540c\u4e00\u4e2a\u5730\u533a\u5f00\u4e86\u591a\u53f0\u670d\u52a1\u5668\u8fd8\u662f\u4e0d\u884c\u7684\u8bdd\uff0c\u53ef\u4ee5\u6362\u5176\u5b83\u5730\u533a\u3002\n\n\n\u8fde\u63a5\u6210\u529f\u540e\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u590d\u5236\u7c98\u8d34\u4ee3\u7801\u90e8\u7f72\u4e86\u3002\nCentOS6/Debian6/Ubuntu14 ShadowsocksR\u4e00\u952e\u90e8\u7f72\u7ba1\u7406\u811a\u672c\uff082018.11.21\u66f4\u65b0\uff09\uff1a\n\u811a\u672c\u4e00\uff082018.11.20\u66f4\u65b0\uff09\n\nyum -y install wget\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n\n\u5907\u7528\u811a\u672c\u4e8c\uff082018.11.21\u66f4\u65b0\uff09\n\u5982\u679c\u4e0a\u9762\u7684\u811a\u672c\u6682\u65f6\u7528\u4e0d\u4e86\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u5907\u7528\u811a\u672c\uff0c\u5907\u7528\u811a\u672c\u6ca1\u6709\u5355\u72ec\u505a\u56fe\u6587\u6559\u7a0b\uff0c\u81ea\u5df1\u6478\u7d22\u4e0b\u5c31\u4f1a\u4e86\u3002\u5907\u7528\u811a\u672c\u5378\u8f7d\u547d\u4ee4\uff1a./shadowsocksR.sh uninstall\n\nyum -y install wget\nwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh\nchmod +x shadowsocksR.sh\n./shadowsocksR.sh 2>&1 | tee shadowsocksR.log\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u4ee3\u7801\u5206\u5272\u7ebf\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\u590d\u5236\u4e0a\u9762\u7684\u811a\u672c\u4e00\u4ee3\u7801\u5230VPS\u670d\u52a1\u5668\u91cc\uff0c\u6309\u56de\u8f66\u952e\uff0c\u811a\u672c\u4f1a\u81ea\u52a8\u5b89\u88c5\uff0c\u4ee5\u540e\u53ea\u9700\u8981\u8fd0\u884c\u8fd9\u4e2a\u5feb\u6377\u547d\u4ee4\u5c31\u53ef\u4ee5\u51fa\u73b0\u4e0b\u56fe\u7684\u754c\u9762\u8fdb\u884c\u8bbe\u7f6e\uff0c\u5feb\u6377\u7ba1\u7406\u547d\u4ee4\u4e3a\uff1abash ssr.sh\n\n\u5982\u4e0a\u56fe\u51fa\u73b0\u7ba1\u7406\u754c\u9762\u540e\uff0c\u8f93\u5165\u6570\u5b571\u6765\u5b89\u88c5SSR\u670d\u52a1\u7aef\u3002\u5982\u679c\u8f93\u51651\u540e\u4e0d\u80fd\u8fdb\u5165\u4e0b\u4e00\u6b65\uff0c\u90a3\u4e48\u8bf7\u9000\u51faxshell\uff0c\u91cd\u65b0\u8fde\u63a5vps\u670d\u52a1\u5668\uff0c\u7136\u540e\u8f93\u5165\u5feb\u6377\u7ba1\u7406\u547d\u4ee4bash ssr.sh \u518d\u5c1d\u8bd5\u3002\n\n\u6839\u636e\u4e0a\u56fe\u63d0\u793a\uff0c\u4f9d\u6b21\u8f93\u5165\u81ea\u5df1\u60f3\u8bbe\u7f6e\u7684\u7aef\u53e3\u548c\u5bc6\u7801 (\u5bc6\u7801\u5efa\u8bae\u7528\u590d\u6742\u70b9\u7684\u5b57\u6bcd\u7ec4\u5408\uff0c\u7aef\u53e3\u53f7\u4e3a40-65535\u4e4b\u95f4\u7684\u6570\u5b57)\uff0c\u56de\u8f66\u952e\u7528\u4e8e\u786e\u8ba4\n\u6ce8\uff1a\u5173\u4e8e\u7aef\u53e3\u7684\u8bbe\u7f6e\uff0c\u603b\u7684\u7f51\u7edc\u603b\u7aef\u53e3\u67096\u4e07\u591a\u4e2a\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u4efb\u610f\u8bbe\u7f6e\u3002\u4f46\u662f\u6709\u7684\u5730\u533a\u9700\u8981\u8bbe\u7f6e\u7279\u6b8a\u7684\u7aef\u53e3\u624d\u6709\u6548\uff0c\u4e00\u4e9b\u7279\u6b8a\u7684\u7aef\u53e3\u6bd4\u598280\u3001143\u3001443\u30011433\u30013306\u30013389\u30018080\u3002\n\n\u5982\u4e0a\u56fe\uff0c\u9009\u62e9\u60f3\u8bbe\u7f6e\u7684\u52a0\u5bc6\u65b9\u5f0f\uff0c\u6bd4\u598210\uff0c\u6309\u56de\u8f66\u952e\u786e\u8ba4\n\u63a5\u4e0b\u6765\u662f\u9009\u62e9\u534f\u8bae\u63d2\u4ef6\uff0c\u5982\u4e0b\u56fe\uff1a\n\n\n\u9009\u62e9\u5e76\u786e\u8ba4\u540e\uff0c\u4f1a\u51fa\u73b0\u4e0a\u56fe\u7684\u754c\u9762\uff0c\u63d0\u793a\u4f60\u662f\u5426\u9009\u62e9\u517c\u5bb9\u539f\u7248\uff0c\u8fd9\u91cc\u7684\u539f\u7248\u6307\u7684\u662fSS\u5ba2\u6237\u7aef\uff08SS\u5ba2\u6237\u7aef\u6ca1\u6709\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u9009\u9879\uff09\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u8fdb\u884c\u9009\u62e9\uff0c\u6f14\u793a\u9009\u62e9y\n\u4e4b\u540e\u8fdb\u884c\u6df7\u6dc6\u63d2\u4ef6\u7684\u8bbe\u7f6e\u3002\n\u6ce8\u610f\uff1a\u5982\u679c\u534f\u8bae\u662forigin\uff0c\u90a3\u4e48\u6df7\u6dc6\u4e5f\u5fc5\u987b\u662fplain\uff1b\u5982\u679c\u534f\u8bae\u4e0d\u662forigin\uff0c\u90a3\u4e48\u6df7\u6dc6\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u3002\u6709\u7684\u5730\u533a\u9700\u8981\u628a\u6df7\u6dc6\u8bbe\u7f6e\u6210plain\u624d\u597d\u7528\u3002\u56e0\u4e3a\u6df7\u6dc6\u4e0d\u603b\u662f\u6709\u6548\u679c\uff0c\u8981\u770b\u5404\u5730\u533a\u7684\u7b56\u7565\uff0c\u6709\u65f6\u5019\u4e0d\u6df7\u6dc6\uff08plain\uff09\u6216\uff08origin\u548cplain\u4e00\u8d77\u4f7f\u7528\uff09\uff0c\u8ba9\u5176\u770b\u8d77\u6765\u50cf\u968f\u673a\u6570\u636e\u66f4\u597d\u3002\uff08\u7279\u522b\u6ce8\u610f\uff1atls 1.2_ticket_auth\u5bb9\u6613\u53d7\u5230\u5e72\u6270\uff01\u8bf7\u9009\u62e9\u9664tls\u5f00\u5934\u4ee5\u5916\u7684\u5176\u5b83\u6df7\u6dc6\uff01\uff01\uff01\uff09 \n\n\u8fdb\u884c\u6df7\u6dc6\u63d2\u4ef6\u7684\u8bbe\u7f6e\u540e\uff0c\u4f1a\u4f9d\u6b21\u63d0\u793a\u4f60\u5bf9\u8bbe\u5907\u6570\u3001\u5355\u7ebf\u7a0b\u9650\u901f\u548c\u7aef\u53e3\u603b\u9650\u901f\u8fdb\u884c\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u503c\u662f\u4e0d\u8fdb\u884c\u9650\u5236\uff0c\u4e2a\u4eba\u4f7f\u7528\u7684\u8bdd\uff0c\u9009\u62e9\u9ed8\u8ba4\u5373\u53ef\uff0c\u5373\u76f4\u63a5\u6572\u56de\u8f66\u952e\u3002\n\u6ce8\u610f\uff1a\u5173\u4e8e\u9650\u5236\u8bbe\u5907\u6570\uff0c\u8fd9\u4e2a\u534f\u8bae\u5fc5\u987b\u662f\u975e\u539f\u7248\u4e14\u4e0d\u517c\u5bb9\u539f\u7248\u624d\u6709\u6548\uff0c\u4e5f\u5c31\u662f\u5fc5\u987b\u4f7f\u7528SSR\u534f\u8bae\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u6709\u6548\uff01\n\n\u4e4b\u540e\u4ee3\u7801\u5c31\u6b63\u5f0f\u81ea\u52a8\u90e8\u7f72\u4e86\uff0c\u5230\u4e0b\u56fe\u6240\u793a\u7684\u4f4d\u7f6e\uff0c\u63d0\u793a\u4f60\u4e0b\u8f7d\u6587\u4ef6\uff0c\u8f93\u5165\uff1ay\n\n\u8010\u5fc3\u7b49\u5f85\u4e00\u4f1a\uff0c\u51fa\u73b0\u4e0b\u9762\u7684\u754c\u9762\u5373\u90e8\u7f72\u5b8c\u6210\uff1a\n\n\n\u6839\u636e\u4e0a\u56fe\u5c31\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u8bbe\u7f6e\u7684SSR\u8d26\u53f7\u4fe1\u606f\uff0c\u5305\u62ecIP\u3001\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u63d2\u4ef6\u3001\u6df7\u6dc6\u63d2\u4ef6\uff0c\u8fd9\u4e9b\u4fe1\u606f\u9700\u8981\u586b\u5165\u4f60\u7684SSR\u5ba2\u6237\u7aef\u3002\u5982\u679c\u4e4b\u540e\u60f3\u4fee\u6539\u8d26\u53f7\u4fe1\u606f\uff0c\u76f4\u63a5\u8f93\u5165\u5feb\u6377\u7ba1\u7406\u547d\u4ee4\uff1abash ssr.sh \u8fdb\u5165\u7ba1\u7406\u754c\u9762\uff0c\u9009\u62e9\u76f8\u5e94\u7684\u6570\u5b57\u6765\u8fdb\u884c\u4e00\u952e\u4fee\u6539\u3002\u4f8b\u5982\uff1a\n\n\n\u811a\u672c\u6f14\u793a\u7ed3\u675f\u3002\n\u6b64\u811a\u672c\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u90e8\u7f72\u4e00\u6b21\u5373\u53ef\u3002\u6700\u540e\u53ef\u4ee5\u91cd\u542f\u670d\u52a1\u5668\u786e\u4fdd\u90e8\u7f72\u751f\u6548\uff08\u4e00\u822c\u60c5\u51b5\u4e0d\u91cd\u542f\u4e5f\u53ef\u4ee5\uff09\u3002\u91cd\u542f\u9700\u8981\u5728\u547d\u4ee4\u680f\u91cc\u8f93\u5165reboot \uff0c\u8f93\u5165\u547d\u4ee4\u540e\u7a0d\u5fae\u7b49\u5f85\u4e00\u4f1a\u670d\u52a1\u5668\u5c31\u4f1a\u81ea\u52a8\u91cd\u542f\uff0c\u4e00\u822c\u91cd\u542f\u8fc7\u7a0b\u9700\u89812\uff5e5\u5206\u949f\uff0c\u91cd\u542f\u8fc7\u7a0b\u4e2dXshell\u4f1a\u81ea\u52a8\u65ad\u5f00\u8fde\u63a5\uff0c\u7b49VPS\u91cd\u542f\u597d\u540e\u624d\u53ef\u4ee5\u7528Xshell\u8f6f\u4ef6\u8fdb\u884c\u8fde\u63a5\u3002\u5982\u679c\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u5361\u5728\u67d0\u4e2a\u4f4d\u7f6e\u8d85\u8fc710\u5206\u949f\uff0c\u53ef\u4ee5\u7528xshell\u8f6f\u4ef6\u65ad\u5f00\uff0c\u7136\u540e\u91cd\u65b0\u8fde\u63a5\u4f60\u7684ip\uff0c\u518d\u590d\u5236\u4ee3\u7801\u8fdb\u884c\u90e8\u7f72\u3002\n\n\u7b2c\u4e09\u6b65\uff1a\u4e00\u952e\u52a0\u901fVPS\u670d\u52a1\u5668\n2018\u5e7412\u67089\u65e5\u589e\u52a0\u7834\u89e3\u7248\u9510\u901f\u52a0\u901f\u6559\u7a0b\u3002\n\u3010\u7834\u89e3\u7248\u9510\u901f\u52a0\u901f\u6559\u7a0b\u3011\n\u6b64\u52a0\u901f\u6559\u7a0b\u4e3a\u7834\u89e3\u7248\u9510\u901f\u52a0\u901f,Vultr\u7684\u670d\u52a1\u5668centos6\u7cfb\u7edf\u5b98\u65b9\u8fdb\u884c\u4e86\u66f4\u65b0\uff0c\u5bfc\u81f4\u76ee\u524d\u4e0d\u652f\u6301BBR\u7684\u90e8\u7f72\uff0c\u4f46\u9510\u901f\u5e94\u8be5\u662f\u53ef\u4ee5\u90e8\u7f72\u7684\uff0c\u6545\u589e\u52a0\u4e86\u6b64\u90e8\u7f72\u811a\u672c\uff0c\u52a0\u901f\u540e\u5bf9\u901f\u5ea6\u7684\u63d0\u5347\u5f88\u660e\u663e\uff0c\u6240\u4ee5\u63a8\u8350\u90e8\u7f72\u52a0\u901f\u811a\u672c\u3002\u8be5\u52a0\u901f\u65b9\u6cd5\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u90e8\u7f72\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\n\u7b2c\u4e00\u6b65\uff0c\u5148\u66f4\u6362\u670d\u52a1\u5668\u5185\u6838\uff1a\nyum -y install wget\nwget --no-check-certificate https://blog.asuhu.com/sh/ruisu.sh && bash ruisu.sh\n\n\u4e0d\u52a8\u7684\u65f6\u5019\u6572\u56de\u8f66\u952e\uff0c\u5728\u4e0a\u56fe\u65f6\u9700\u8981\u591a\u7b49\u4e00\u4f1a\u513f\u3002\n\n\u51fa\u73b0\u4e0a\u56fe\u65f6\u8868\u793a\u5df2\u6210\u529f\u66ff\u6362\u5185\u6838\u5e76\u670d\u52a1\u5668\u81ea\u52a8\u91cd\u542f\u3002\n\u5b8c\u6210\u540e\u4f1a\u91cd\u542f\uff0c2\u5206\u949f\u540e\u91cd\u65b0\u8fde\u63a5\u670d\u52a1\u5668\uff0c\u8fde\u4e0a\u540e\u5f00\u59cb\u7b2c\u4e8c\u6b65\u7684\u64cd\u4f5c\u3002\n\u7b2c\u4e8c\u6b65\uff0c\u4e00\u952e\u5b89\u88c5\u9510\u901f\uff1a\nwget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh && bash serverspeeder-all.sh\n\u5378\u8f7d\u52a0\u901f\u4ee3\u7801\u547d\u4ee4\u4e3a\uff1a\nchattr -i /serverspeeder/etc/apx* && /serverspeeder/bin/serverSpeeder.sh uninstall -f\n\u4f46\u6709\u4e9b\u5185\u6838\u662f\u4e0d\u9002\u5408\u7684\uff0c\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u9700\u8981\u624b\u52a8\u9009\u62e9\u63a8\u8350\u7684\uff0c\u5f53\u90e8\u7f72\u65f6\u51fa\u73b0\u4ee5\u4e0b\u5b57\u6837\uff1a\n\n\u63d0\u793a\u6ca1\u6709\u5b8c\u5168\u5339\u914d\u7684\u5185\u6838,\u968f\u4fbf\u9009\u4e00\u4e2a\u5185\u6838\u5c31\u884c,\u6309\u7167\u63d0\u793a\u6765\u8f93\u5165\u6570\u5b57,\u6309\u56de\u8f66\u952e\u5373\u53ef\n\u9510\u901f\u5b89\u88c5\u6210\u529f\u6807\u5fd7\u5982\u4e0b\uff1a\n\n\u51fa\u73b0running\u5b57\u6837\u5373\u53ef!\n\n\u3010\u8c37\u6b4cBBR\u52a0\u901f\u6559\u7a0b\u3011\nvultr\u670d\u52a1\u5668\u7684centos6\u4e0d\u652f\u6301bbr\u52a0\u901f\uff0c\u4f46centos7\u7cfb\u7edf\u652f\u6301bbr\u52a0\u901f\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u7528bbr\u52a0\u901f\u6559\u7a0b\uff0cvps\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u9009\u62e9centos7\u3002\nyum -y install wget\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\nchmod +x bbr.sh\n./bbr.sh\n\u628a\u4e0a\u9762\u6574\u4e2a\u4ee3\u7801\u590d\u5236\u540e\u7c98\u8d34\u8fdb\u53bb\uff0c\u4e0d\u52a8\u7684\u65f6\u5019\u6309\u56de\u8f66\uff0c\u7136\u540e\u8010\u5fc3\u7b49\u5f85\uff0c\u6700\u540e\u91cd\u542fvps\u670d\u52a1\u5668\u5373\u53ef\u3002\n\u6f14\u793a\u5f00\u59cb\uff0c\u5982\u56fe\uff1a\n\u590d\u5236\u5e76\u7c98\u8d34\u4ee3\u7801\u540e\uff0c\u6309\u56de\u8f66\u952e\u786e\u8ba4\n\n\u5982\u4e0b\u56fe\u63d0\u793a\uff0c\u6309\u4efb\u610f\u952e\u7ee7\u7eed\u90e8\u7f72\n\n\n\u90e8\u7f72\u5230\u4e0a\u56fe\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u7b49\u5f853\uff5e6\u5206\u949f\n\n\u6700\u540e\u8f93\u5165y\u91cd\u542f\u670d\u52a1\u5668\uff0c\u5982\u679c\u8f93\u5165y\u63d0\u793acommand not found \uff0c\u63a5\u7740\u8f93\u5165reboot\u6765\u91cd\u542f\u670d\u52a1\u5668\uff0c\u786e\u4fdd\u52a0\u901f\u751f\u6548\uff0cbbr\u52a0\u901f\u811a\u672c\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u88c5\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\n\u670d\u52a1\u5668\u91cd\u542f\u6210\u529f\u5e76\u91cd\u65b0\u8fde\u63a5\u670d\u52a1\u5668\u540e\uff0c\u8f93\u5165\u547d\u4ee4lsmod | grep bbr  \u5982\u679c\u51fa\u73b0tcp_bbr\u5b57\u6837\u8868\u793abbr\u5df2\u5b89\u88c5\u5e76\u542f\u52a8\u6210\u529f\u3002\u5982\u56fe\uff1a\n\n\u6ce8\u610f\uff1a\u6839\u636e\u53cd\u9988\uff0c\u5c11\u90e8\u5206\u4eba\u5b89\u88c5bbr\u811a\u672c\u5e76\u91cd\u542f\u540e\uff0c\u51e0\u5206\u949f\u8fc7\u53bb\u4e86\uff0c\u53d1\u73b0xshell\u65e0\u6cd5\u8fde\u63a5\u670d\u52a1\u5668\u4e14\u670d\u52a1\u5668ip\u65e0\u6cd5ping\u901a\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\uff1a\u5f00\u65b0\u670d\u52a1\u5668\u6216\u8005\u91cd\u88c5\u7cfb\u7edf\uff0c\u7136\u540e\u5148\u5b89\u88c5bbr\u811a\u672c\u518d\u5b89\u88c5ssr\u811a\u672c\uff0c\u6216\u8005\u6539\u7528\u9510\u901f\u52a0\u901f\u811a\u672c\u3002\n\n\u8d2d\u4e70vps\u670d\u52a1\u5668\u540e\uff0cip\u6709\u4e86\uff0c\u901a\u8fc7\u90e8\u7f72\uff0c\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u548c\u6df7\u6dc6\u4e5f\u6709\u4e86\uff0c\u6700\u540e\u5c06\u8fd9\u4e9b\u4fe1\u606f\u586b\u5165SSR\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u7ffb\u5899\u5566\u3002\n\u6709\u4e86\u8d26\u53f7\u540e\uff0c\u6253\u5f00SSR\u5ba2\u6237\u7aef\uff0c\u586b\u4e0a\u4fe1\u606f\uff0c\u8fd9\u91cc\u4ee5windows\u7248\u7684SSR\u5ba2\u6237\u7aef\u4e3a\u4f8b\u5b50\uff1a\n\n\u5728\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u586b\u4e0a\u670d\u52a1\u5668ip\u3001\u670d\u52a1\u5668\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u548c\u6df7\u6dc6\uff0c\u6700\u540e\u5c06\u6d4f\u89c8\u5668\u7684\u4ee3\u7406\u8bbe\u7f6e\u4e3a\uff08http\uff09127.0.0.1\u548c1080\u5373\u53ef\u3002\u8d26\u53f7\u7684\u7aef\u53e3\u53f7\u5c31\u662f\u4f60\u81ea\u5df1\u8bbe\u7f6e\u7684\uff0c\u800c\u8981\u4e0a\u7f51\u7684\u6d4f\u89c8\u5668\u7684\u7aef\u53e3\u53f7\u662f1080\uff0c\u56fa\u5b9a\u7684\uff0c\u8c37\u6b4c\u6d4f\u89c8\u5668\u53ef\u4ee5\u901a\u8fc7 SwitchyOmega \u63d2\u4ef6\u6765\u8bbe\u7f6e\u3002\n\u542f\u52a8SSR\u5ba2\u6237\u7aef\u540e\uff0c\u53f3\u952eSSR\u5ba2\u6237\u7aef\u56fe\u6807\uff0c\u9009\u62e9\u7b2c\u4e00\u4e2a\u201c\u7cfb\u7edf\u4ee3\u7406\u6a21\u5f0f\u201d\uff0c\u91cc\u9762\u67093\u4e2a\u5b50\u9009\u9879\uff0c\u9009\u62e9\"\u5168\u5c40\u6a21\u5f0f\u201c\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u7528\u6d4f\u89c8\u5668\u8bbe\u7f6e\u597d\u4e86\u7684\u4ee3\u7406\u6a21\u5f0f\uff08http\uff09127.0.0.1\u548c1080\u7ffb\u5899\uff0c\u6b64\u6a21\u5f0f\u4e0b\u6240\u6709\u7684\u7f51\u7ad9\u90fd\u4f1a\u8d70SSR\u4ee3\u7406\u3002\uff08\u9002\u5408\u65b0\u624b\uff09\n\n\n\u5e38\u89c1\u95ee\u9898\u53c2\u8003\u89e3\u51b3\u65b9\u6cd5\uff1a\n1\u3001\u7528\u4e86\u4e00\u6bb5\u65f6\u95f4\u53d1\u73b0ssr\u8d26\u53f7\u7528\u4e0d\u4e86\u4e86\n\u9996\u5148ping\u4e00\u4e0b\u81ea\u5df1\u7684ip\uff0c\u770b\u770b\u80fd\u4e0d\u80fdping\u7684\u901a\uff0cping\u4e0d\u901a\u90a3\u4e48\u5c31\u662fip\u88ab\u5899\u4e86\uff0cip\u88ab\u5899\u65f6\uff0cxshell\u4e5f\u4f1a\u8fde\u63a5\u4e0d\u4e0a\u670d\u52a1\u5668\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u91cd\u65b0\u90e8\u7f72\u4e00\u4e2a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u65b0\u7684\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\u3002\u5173\u4e8e\u600e\u4e48ping ip\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\uff0c\u6216\u8005\u7528xshell\u8f6f\u4ef6\u8fde\u63a5\u670d\u52a1\u5668\u6765\u5224\u65ad\uff0c\u8fde\u4e0d\u4e0a\u5373\u662f\u88ab\u5899\u4e86\u3002vultr\u5f00\u901a\u548c\u5220\u9664\u670d\u52a1\u5668\u975e\u5e38\u65b9\u4fbf\uff0c\u65b0\u670d\u52a1\u5668\u5373\u65b0ip\uff0c\u5927\u591a\u6570vps\u670d\u52a1\u5546\u90fd\u6ca1\u6709\u8fd9\u6837\u7684\u670d\u52a1\uff0c\u4e00\u822c\u7684vps\u670d\u52a1\u5546\u53ef\u80fd\u4f1a\u63d0\u4f9b\u514d\u8d39\u66f4\u63621\u6b21ip\u7684\u670d\u52a1\u3002\n2\u3001\u521a\u642d\u5efa\u597d\u7684ssr\u8d26\u53f7\uff0cip\u80fdping\u901a\uff0c\u4f46\u662f\u8fd8\u662f\u7528\u4e0d\u4e86\n\u9996\u9009\u6392\u9664\u6740\u6bd2\u8f6f\u4ef6\u7684\u5e72\u6270\uff0c\u5c24\u5176\u662f\u56fd\u4ea7\u6740\u6bd2\u8f6f\u4ef6\uff0c\u6bd4\u5982360\u5b89\u5168\u536b\u751f\u3001360\u6740\u6bd2\u8f6f\u4ef6\u3001\u817e\u8baf\u7ba1\u5bb6\u3001\u91d1\u5c71\u536b\u751f\u7b49\u3002\u8fd9\u4e9b\u4e1c\u897f\u5f88\u5bb9\u6613\u5e72\u6270\u7ffb\u5899\u4e0a\u7f51\uff0c\u5982\u679c\u4f60\u7684\u7535\u8111\u5b89\u88c5\u4e86\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u5efa\u8bae\u81f3\u5c11\u7ffb\u5899\u65f6\u522b\u7528\uff0c\u6700\u597d\u5378\u8f7d\u3002\u5176\u6b21\uff0c\u68c0\u67e5\u4e0bSSR\u4fe1\u606f\u662f\u5426\u586b\u5199\u6b63\u786e\u3002\u6d4f\u89c8\u5668\u7684\u4ee3\u7406\u65b9\u5f0f\u662f\u5426\u662fssr\u4ee3\u7406\uff0c\u5373\uff08HTTP\uff09127.0.0.1 \u548c1080\u3002\u5982\u679c\u4ee5\u4e0a\u6761\u4ef6\u90fd\u6392\u9664\uff0c\u8fd8\u662f\u7528\u4e0d\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u66f4\u6362\u7aef\u53e3\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u3001\u6df7\u6dc6\uff0c\u6216\u8005\u66f4\u6362\u670d\u52a1\u5668\u4f4d\u7f6e\u3002\u53e6\u5916\uff0c\u5982\u679c\u4f60\u7684vps\u670d\u52a1\u5668\u914d\u7f6e\u7684\u662fSSR\u8d26\u53f7\uff0c\u5373\u6709\u534f\u8bae\u548c\u6df7\u6dc6\u4e14\u6ca1\u6709\u517c\u5bb9\u539f\u7248(SS\u7248\uff09\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u4f7f\u7528SSSR\u5ba2\u6237\u7aef\u6765\u4f7f\u7528\u8d26\u53f7\uff0c\u56e0\u4e3aSS\u5ba2\u6237\u7aef\u6ca1\u6709\u586b\u5199\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u9009\u9879\u3002\n3\u3001\u6709\u7684\u5730\u533a\u9700\u8981\u628a\u6df7\u6dc6\u53c2\u6570\u8bbe\u7f6e\u6210plain\u624d\u597d\u7528\u3002\u56e0\u4e3a\u6df7\u6dc6\u4e0d\u603b\u662f\u6709\u6548\u679c\uff0c\u8981\u770b\u5404\u5730\u533a\u7684\u7b56\u7565\uff0c\u6709\u65f6\u5019\u4e0d\u6df7\u6dc6\uff08plain\uff09\u8ba9\u5176\u770b\u8d77\u6765\u50cf\u968f\u673a\u6570\u636e\u66f4\u597d\u3002\n4\u3001\u7535\u8111\u80fd\u7528\u4f46\u624b\u673a\u7528\u4e0d\u4e86\n\u5982\u679c\u4f60\u7684\u624b\u673a\u7528\u7684\u662fSS\u5ba2\u6237\u7aef\uff0cSS\u5ba2\u6237\u7aef\u6ca1\u6709\u586b\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u5730\u65b9\uff0c\u5982\u679c\u4f60\u90e8\u7f72\u7684\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u65f6\u5019\u6ca1\u6709\u9009\u62e9\u517c\u5bb9\u539f\u7248\uff08SS\u7248\uff09\uff0c\u56e0\u6b64\u624b\u673a\u662f\u7528\u4e0d\u4e86\u7684\u3002\u8fd9\u4e2a\u65f6\u5019\u4f60\u628a\u534f\u8bae\u5f04\u6210\u517c\u5bb9\u539f\u7248\u3001\u6df7\u6dc6\u4e5f\u8bbe\u7f6e\u6210\u517c\u5bb9\u539f\u7248\u5373\u53ef\u3002\u6216\u8005\u76f4\u63a5\u5c06\u534f\u8bae\u8bbe\u7f6e\u6210origin\u4e14\u6df7\u6dc6\u8bbe\u7f6e\u6210plain\u3002\n5\u3001vps\u7684\u670d\u52a1\u5668\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u8981\u7528\u7684\u592a\u9ad8\uff0c\u592a\u9ad8\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7cfb\u7edf\u7684\u9632\u706b\u5899\u95ee\u9898\u5bfc\u81f4\u642d\u5efa\u7684SSR\u8d26\u53f7\u8fde\u4e0d\u4e0a\u3002\u5982\u679c\u67d0\u4e2a\u7cfb\u7edf\u4e0d\u597d\u7528\uff0c\u53ef\u4ee5\u9009\u62e9\u5176\u5b83\u7684\u7cfb\u7edf\u6765\u5c1d\u8bd5\u3002\n6\u3001vultr\u670d\u52a1\u5546\u63d0\u4f9b\u7684vps\u670d\u52a1\u5668\u662f\u5355\u5411\u6d41\u91cf\u8ba1\u7b97\uff0c\u6709\u7684vps\u670d\u52a1\u5546\u662f\u53cc\u5411\u6d41\u91cf\u8ba1\u7b97\uff0c\u5355\u5411\u6d41\u91cf\u8ba1\u7b97\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u66f4\u5b9e\u60e0\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u5728vps\u670d\u52a1\u5668\u4e0a\u90e8\u7f72SSR\u670d\u52a1\u7aef\u540e\uff0c\u518d\u7528SSR\u5ba2\u6237\u7aef\u7ffb\u5899\uff0c\u6240\u4ee5SSR\u670d\u52a1\u7aef\u5c31\u76f8\u5f53\u4e8e\u4e2d\u8f6c\uff0c\u6bd4\u5982\u6211\u4eec\u770b\u4e00\u4e2a\u89c6\u9891\uff0c\u5fc5\u7136\u4f1a\u4ea7\u751f\u6d41\u91cf\uff0c\u5047\u5982\u6d88\u8017\u6d41\u91cf80M\uff0c\u90a3\u4e48VPS\u670d\u52a1\u5668\u4f1a\u4ea7\u751f\u4e0a\u4f2080M\u548c\u4e0b\u8f7d80M\u6d41\u91cf\uff0cvultr\u670d\u52a1\u5546\u53ea\u8ba1\u7b97\u5355\u5411\u768480M\u6d41\u91cf\u3002\u5982\u679c\u662f\u53cc\u5411\u8ba1\u7b97\u6d41\u91cf\uff0c\u90a3\u4e48\u4f1a\u8ba1\u7b97\u4e3a160M\u6d41\u91cf\u3002\n7\u3001\u5982\u679c\u4f60\u60f3\u628a\u642d\u5efa\u7684\u8d26\u53f7\u7ed9\u591a\u4eba\u4f7f\u7528\uff0c\u4e0d\u7528\u989d\u5916\u8bbe\u7f6e\u7aef\u53e3\uff0c\u56e0\u4e3a\u4e00\u4e2a\u8d26\u53f7\u5c31\u53ef\u4ee5\u591a\u4eba\u4f7f\u7528\u3002\u4e00\u822c5\u7f8e\u5143\u7684\u670d\u52a1\u5668\u53ef\u4ee5\u540c\u65f6\u652f\u630140\u4eba\u5728\u7ebf\u4f7f\u7528\u3002\n\u5982\u679c\u60f3\u5b9e\u73b0\u652f\u6301\u6bcf\u4e2a\u7528\u6237(\u7aef\u53e3)\u4e0d\u540c\u7684\u52a0\u5bc6\u65b9\u5f0f/\u534f\u8bae/\u6df7\u6dc6\u7b49\uff0c\u5e76\u4e14\u7ba1\u7406\u6d41\u91cf\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u8003\u591a\u7528\u6237\u914d\u7f6e\u811a\u672c\uff1awget -N --no-check-certificate https://softs.fun/Bash/ssrmu.sh && chmod +x ssrmu.sh && bash ssrmu.sh  \u5907\u7528\u811a\u672c\uff1awget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh && chmod +x ssrmu.sh && bash ssrmu.sh  \u5b89\u88c5\u540e\u7ba1\u7406\u547d\u4ee4\u4e3a\uff1abash ssrmu.sh\n\u6ce8\u610f\uff1a\u8fd9\u4e2a\u591a\u7528\u6237\u914d\u7f6e\u811a\u672c\u548c\u6559\u7a0b\u5185\u5bb9\u7684\u811a\u672c\u65e0\u6cd5\u5171\u5b58\uff01\u8981\u60f3\u7528\u8fd9\u4e2a\u811a\u672c\uff0c\u628a\u4e4b\u524d\u7684\u811a\u672c\u5378\u8f7d\uff0c\u8f93\u5165\u7ba1\u7406\u547d\u4ee4bash ssr.sh \uff0c\u9009\u62e93\uff0c\u5378\u8f7dShadowsocksR\u5373\u53ef\u5378\u8f7d\u539f\u811a\u672c\u3002\n8\u3001vultr\u670d\u52a1\u5668\u6bcf\u6708\u6709\u6d41\u91cf\u9650\u5236\uff0c\u8d85\u8fc7\u9650\u5236\u540e\u670d\u52a1\u5668\u4e0d\u4f1a\u88ab\u505c\u6b62\u8fd0\u884c\uff0c\u4f46\u662f\u8d85\u51fa\u7684\u6d41\u91cf\u4f1a\u88ab\u989d\u5916\u6536\u8d39\u3002\u5317\u7f8e\u548c\u897f\u6b27\u5730\u533a\u7684\u670d\u52a1\u5668\u8d85\u51fa\u6d41\u91cf\u540e\uff0c\u591a\u51fa\u7684\u90e8\u5206\u6536\u8d39\u4e3a0.01\u7f8e\u5143/G\u3002\u65b0\u52a0\u5761\u548c\u65e5\u672c\u4e1c\u4eac\uff08\u65e5\u672c\uff09\u4e3a0.025\u7f8e\u5143/G\uff0c\u6089\u5c3c\uff08\u6fb3\u5927\u5229\u4e9a\uff09\u4e3a0.05\u7f8e\u5143/G\u3002\u628avultr\u670d\u52a1\u5668\u5220\u6389\uff0c\u5f00\u901a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u6d41\u91cf\u4f1a\u4ece0\u5f00\u59cb\u91cd\u65b0\u8ba1\u7b97\u3002\n9\u3001vultr\u600e\u6837\u624d\u80fd\u7533\u8bf7\u9000\u6b3e\u5462\uff1f\nvultr\u548c\u5176\u4ed6\u7684\u56fd\u5916\u5546\u5bb6\u4e00\u6837\uff0c\u90fd\u662f\u4f7f\u7528\u5de5\u5355\u7684\u5f62\u5f0f\u4e0e\u5ba2\u670d\u8054\u7cfb\uff0c\u5982\u679c\u9700\u8981\u9000\u6b3e\uff0c\u76f4\u63a5\u5728\u540e\u53f0\u70b9\u51fbsupport\uff0c\u9009\u62e9open ticket\u65b0\u5f00\u4e00\u4e2a\u5de5\u5355\uff0c\u9009\u62e9billing question\u8d22\u52a1\u95ee\u9898\uff0c\u7b80\u5355\u7684\u5728\u6587\u672c\u6846\u8f93\u5165\u4f60\u7684\u9000\u6b3e\u7406\u7531\u3002\u6bd4\u5982\uff1aPlease refund all the balance in my account\u3002\u5de5\u5355\u63d0\u4ea4\u4ee5\u540e\u4e00\u822c\u5f88\u5feb\u5c31\u53ef\u4ee5\u7ed9\u4f60\u786e\u8ba4\u9000\u6b3e\uff0c\u82e5\u5e72\u4e2a\u5de5\u4f5c\u65e5\u540e\u5c31\u4f1a\u9000\u56de\u4f60\u7684\u652f\u4ed8\u65b9\u5f0f\u3002\uff08\u5168\u989d\u9000\u6b3e\u7ed3\u675f\u540e\uff0c\u8d26\u53f7\u53ef\u80fd\u4f1a\u88ab\u5220\u9664\uff09\n\u5982\u679c\u82f1\u8bed\u6c34\u5e73\u4e0d\u597d\uff0c\u4f46\u662f\u60f3\u548c\u5ba2\u670d\u8fdb\u884c\u4ea4\u6d41\uff0c\u53ef\u4ee5\u7528\u767e\u5ea6\u5728\u7ebf\u7ffb\u8bd1\uff0c\u81ea\u52a8\u4e2d\u6587\u8f6c\u82f1\u6587\u548c\u82f1\u6587\u8f6c\u4e2d\u6587\u3002\n10\u3001\u8def\u7531\u5668\u4e5f\u53ef\u4ee5\u914d\u7f6ess/ssr\u8d26\u53f7\uff0c\u8be6\u89c1openwrt-ssr\u9879\u76ee\u5730\u5740\uff1ahttps://github.com/ywb94/openwrt-ssr  \n11\u3001\u5982\u679c\u7535\u8111\u60f3\u7528\u642d\u5efa\u7684ss/ssr\u8d26\u53f7\u73a9\u6e38\u620f\uff0c\u5373\u5b9e\u73b0\u7c7b\u4f3cVPN\u5168\u5c40\u4ee3\u7406\uff0c\u53ef\u4ee5\u7528SSTAP\uff0c\u6559\u7a0b\uff1ahttps://www.jianshu.com/p/519e68b74646 \n. \u81ea\u5df1\u642d\u5efass/ssr\u670d\u52a1\u5668\u6559\u7a0b\uff08\u9002\u5408\u521d\u5b66\u8005\uff0c\u6700\u4f4e2.5\u7f8e\u5143/\u6708\uff09\n2018.9.1\u66f4\u65b0\uff1avultr\u5b98\u65b9\u8fdb\u884c\u4e86\u8c03\u6574\uff0c2.5\u7f8e\u5143\u5957\u9910\u53ea\u63d0\u4f9bipv6\uff0c\u5982\u679c\u4f60\u7528\u4e0d\u4e86ipv6\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4e703.5\u7f8e\u5143\u7684\u5957\u9910\u3002\n\u3010\u5ba2\u6237\u7aef\u4e0b\u8f7d\u3011\n\u7b2c\u4e00\u6b21\u7535\u8111\u7cfb\u7edf\u4f7f\u7528SSR/SS\u5ba2\u6237\u7aef\u65f6\uff0c\u9700\u8981\u5b89\u88c5NET Framework 4.0\uff0c\u4e0d\u7136\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\uff0c\u5fae\u8f6f\u5b98\u7f51\u4e0b\u8f7d\u3002NET Framework 4.0\u662fSSR/SS\u7684\u8fd0\u884c\u5e93\uff0c\u6ca1\u6709\u8fd9\u4e2aSSR/SS\u5ba2\u6237\u7aef\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\u3002\u6709\u7684\u7535\u8111\u7cfb\u7edf\u53ef\u80fd\u4f1a\u81ea\u5e26NET Framework 4.0\u3002\nWindows SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740\nMAC SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740\nLinux\u5ba2\u6237\u7aef\u4e00\u952e\u5b89\u88c5\u914d\u7f6e \u4f7f\u7528\u811a\u672c (\u4f7f\u7528\u65b9\u6cd5\u89c1\u6ce8\u91ca) \u6216\u8005\u91c7\u7528\u56fe\u5f62\u754c\u9762\u7684linux ssr\u5ba2\u6237\u7aef\n\u5b89\u5353 SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740 \n\u82f9\u679c\u624b\u673aSSR\u5ba2\u6237\u7aef\uff1aPotatso Lite\u3001Potatso\u3001shadowrocket\u90fd\u53ef\u4ee5\u4f5c\u4e3aSSR\u5ba2\u6237\u7aef\uff0c\u4f46\u8fd9\u4e9b\u8f6f\u4ef6\u76ee\u524d\u5df2\u7ecf\u5728\u56fd\u5185\u7684app\u5546\u5e97\u4e0b\u67b6\uff0c\u53ef\u4ee5\u7528\u7f8e\u533a\u7684appid\u8d26\u53f7\u6765\u4e0b\u8f7d\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u914d\u7f6e\u7684SSR\u8d26\u53f7\u517c\u5bb9SS\u5ba2\u6237\u7aef\uff0c\u6216\u8005\u534f\u8bae\u9009\u62e9origin\u4e14\u6df7\u6dc6\u9009\u62e9plain\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u9009\u62e9\u82f9\u679cSS\u5ba2\u6237\u7aef\u8f6f\u4ef6\uff08\u5373\u534f\u8bae\u548c\u6df7\u6dc6\u53ef\u4ee5\u4e0d\u586b\uff09\uff0cAPP\u5546\u5e97\u91cc\u9762\u6709\u5f88\u591a\uff0c\u6bd4\u5982\uff1asuperwingy\u3001firstwingy\u3001shadowingy\u3001wingy+\u3001banananet\u3001kite-ss proxy\u3001goodshadow\u3001icproyx\u3001shadowrocket\u7b49\u3002\n\u6709\u4e86\u5ba2\u6237\u7aef\u540e\u6211\u4eec\u9700\u8981\u81ea\u5df1\u642d\u5efa\u670d\u52a1\u5668\u521b\u5efass/ssr\u8d26\u53f7\u624d\u80fd\u7ffb\u5899\u3002 \n\u642d\u5efa\u6559\u7a0b\n\u4e0d\u6015\u88ab\u5c01ip\uff0c\u56e0\u4e3avultr\u662f\u6298\u7b97\u6210\u5c0f\u65f6\u8ba1\u8d39\uff0c\u4e14\u53ef\u4ee5\u968f\u65f6\u5220\u9664\u548c\u5f00\u901a\u670d\u52a1\u5668\uff0c\u65b0\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\u3002\u65b0\u5f00\u670d\u52a1\u5668\u53ea\u9700\u89810.01\u7f8e\u5143\uff0c\u5373\u4f7f\u4f60\u8fd0\u6c14\u975e\u5e38\u4e0d\u597d\uff0c\u5f00\u4e8610\u53f0\u670d\u52a1\u5668\u624d\u83b7\u5f97\u6ca1\u6709\u88ab\u5899\u7684ip\uff0c\u603b\u521b\u5efa\u670d\u52a1\u5668\u6210\u672c\u4e5f\u53ea\u67090.1\u7f8e\u5143\uff0c\u4e0d\u52301\u5757\u94b1\u3002\n\u6559\u7a0b\u5f88\u7b80\u5355\uff0c\u6574\u4e2a\u6559\u7a0b\u5206\u4e09\u6b65\uff1a\n\u7b2c\u4e00\u6b65\uff1a\u8d2d\u4e70VPS\u670d\u52a1\u5668\n\u7b2c\u4e8c\u6b65\uff1a\u4e00\u952e\u90e8\u7f72VPS\u670d\u52a1\u5668\n\u7b2c\u4e09\u6b65\uff1a\u4e00\u952e\u52a0\u901fVPS\u670d\u52a1\u5668 \uff08\u8c37\u6b4cBBR\u52a0\u901f\uff0c\u63a8\u8350\uff09\n\n\u7b2c\u4e00\u6b65\uff1a\u8d2d\u4e70VPS\u670d\u52a1\u5668\nVPS\u670d\u52a1\u5668\u9700\u8981\u9009\u62e9\u56fd\u5916\u7684\uff0c\u9996\u9009\u56fd\u9645\u77e5\u540d\u7684vultr\uff0c\u901f\u5ea6\u4e0d\u9519\u3001\u7a33\u5b9a\u4e14\u6027\u4ef7\u6bd4\u9ad8\uff0c\u6309\u5c0f\u65f6\u8ba1\u8d39\uff0c\u80fd\u591f\u968f\u65f6\u5f00\u901a\u548c\u5220\u9664\u670d\u52a1\u5668\uff0c\u65b0\u670d\u52a1\u5668\u5373\u662f\u65b0ip\u3002\nvultr\u6ce8\u518c\u5730\u5740\uff1a http://www.vultr.com/?ref=7048874 \uff08\u5168\u740315\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u53ef\u9009\uff0cKVM\u6846\u67b6\uff0c\u6700\u4f4e2.5\u7f8e\u5143/\u6708) \n\n\u867d\u7136\u662f\u82f1\u6587\u754c\u9762\uff0c\u4f46\u662f\u73b0\u5728\u7684\u6d4f\u89c8\u5668\u90fd\u6709\u7f51\u9875\u7ffb\u8bd1\u529f\u80fd\uff0c\u9f20\u6807\u70b9\u51fb\u53f3\u952e\uff0c\u9009\u62e9\u7f51\u9875\u7ffb\u8bd1\u5373\u53ef\u7ffb\u8bd1\u6210\u4e2d\u6587\u3002\n\u6ce8\u518c\u5e76\u90ae\u4ef6\u6fc0\u6d3b\u8d26\u53f7\uff0c\u5145\u503c\u540e\u5373\u53ef\u8d2d\u4e70\u670d\u52a1\u5668\u3002\u5145\u503c\u65b9\u5f0f\u662f\u652f\u4ed8\u5b9d\u6216paypal\uff0c\u4f7f\u7528paypal\u6709\u94f6\u884c\u5361\uff08\u5305\u62ec\u4fe1\u7528\u5361\uff09\u5373\u53ef\u3002paypal\u6ce8\u518c\u5730\u5740\uff1ahttps://www.paypal.com \uff08paypal\u662f\u56fd\u9645\u77e5\u540d\u7684\u7b2c\u4e09\u65b9\u652f\u4ed8\u670d\u52a1\u5546\uff0c\u6ce8\u518c\u4e00\u4e0b\u8d26\u53f7\uff0c\u7ed1\u5b9a\u94f6\u884c\u5361\u5373\u53ef\u8d2d\u4e70\u56fd\u5916\u5546\u54c1\uff09\n2.5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a\u5355\u6838   512M\u5185\u5b58  20G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    500G\u6d41\u91cf/\u6708   (\u4ec5ipv6)\n3.5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a\u5355\u6838   512M\u5185\u5b58  20G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    500G\u6d41\u91cf/\u6708   \n5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a  \u5355\u6838   1G\u5185\u5b58    25G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    1000G\u6d41\u91cf/\u6708  \n10\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a \u5355\u6838   2G\u5185\u5b58    40G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    2000G\u6d41\u91cf/\u6708  \n20\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a 2cpu   4G\u5185\u5b58   60G SSD\u786c\u76d8    \u5e26\u5bbd\u5cf0\u503c100M    3000G\u6d41\u91cf/\u6708  \n40\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a 4cpu   8G\u5185\u5b58   100G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    4000G\u6d41\u91cf/\u6708  \n\u6ce8\u610f\uff1avultr\u5b98\u65b9\u8fdb\u884c\u4e86\u8c03\u6574\uff0c2.5\u7f8e\u5143\u5957\u9910\u53ea\u63d0\u4f9bipv6\uff0c\u5982\u679c\u4f60\u7528\u4e0d\u4e86ipv6\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4e703.5\u7f8e\u5143\u7684\u5957\u9910\u3002\nvultr\u5b9e\u9645\u4e0a\u662f\u6298\u7b97\u6210\u5c0f\u65f6\u6765\u8ba1\u8d39\u7684\uff0c\u6bd4\u5982\u670d\u52a1\u5668\u662f5\u7f8e\u51431\u4e2a\u6708\uff0c\u90a3\u4e48\u6bcf\u5c0f\u65f6\u6536\u8d39\u4e3a5/30/24=0.0069\u7f8e\u5143 \u4f1a\u81ea\u52a8\u4ece\u8d26\u53f7\u4e2d\u6263\u8d39\uff0c\u53ea\u8981\u4fdd\u8bc1\u8d26\u53f7\u6709\u94b1\u5373\u53ef\u3002\u5982\u679c\u4f60\u90e8\u7f72\u7684\u670d\u52a1\u5668\u5b9e\u6d4b\u540e\u901f\u5ea6\u4e0d\u7406\u60f3\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u5220\u6389\uff08destroy\uff09\uff0c\u91cd\u65b0\u6362\u4e2a\u5730\u533a\u7684\u670d\u52a1\u5668\u6765\u90e8\u7f72\uff0c\u65b9\u4fbf\u4e14\u5b9e\u7528\u3002\u56e0\u4e3a\u65b0\u7684\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\uff0c\u6240\u4ee5\u5f53ip\u88ab\u5899\u65f6\u8fd9\u4e2a\u65b9\u6cd5\u5f88\u6709\u7528\u3002\u5f53ip\u88ab\u5899\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u65b0\u5f00\u7684\u670d\u52a1\u5668ip\u548c\u539f\u5148\u7684ip\u4e0d\u4e00\u6837\uff0c\u5148\u5f00\u65b0\u670d\u52a1\u5668\uff0c\u5f00\u597d\u540e\u518d\u5220\u9664\u65e7\u670d\u52a1\u5668\u5373\u53ef\u3002\n\u8ba1\u8d39\u4ece\u4f60\u5f00\u901a\u670d\u52a1\u5668\u5f00\u59cb\u7b97\u7684\uff0c\u4e0d\u7ba1\u4f60\u6709\u6ca1\u6709\u4f7f\u7528\uff0c\u5373\u4f7f\u670d\u52a1\u5668\u5904\u4e8e\u5173\u673a\u72b6\u6001\u4ecd\u7136\u4f1a\u8ba1\u8d39\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5f00\u901a\u670d\u52a1\u5668\u5c31\u4e0d\u7b97\u3002\u6bd4\u5982\u4f60\u4eca\u5929\u65e9\u4e0a\u5f00\u901a\u4e86\u670d\u52a1\u5668\uff0c\u4f46\u4f60\u6709\u4e8b\u60c5\uff0c\u665a\u4e0a\u624d\u90e8\u7f72\uff0c\u90a3\u4e48\u8fd9\u6bb5\u65f6\u95f4\u662f\u4f1a\u8ba1\u8d39\u7684\u3002\u540c\u7406\uff0c\u5982\u679c\u4f60\u65e9\u4e0a\u5220\u6389\u670d\u52a1\u5668\uff0c\u7b2c\u4e8c\u5929\u624d\u5f00\u901a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u8fd9\u6bb5\u65f6\u95f4\u662f\u4e0d\u4f1a\u8ba1\u8d39\u7684\u3002\u5728\u8d26\u53f7\u7684Billing\u9009\u9879\u91cc\u53ef\u4ee5\u770b\u5230\u8d26\u6237\u4f59\u989d\u3002\n\u6e29\u99a8\u63d0\u9192\uff1a\u540c\u6837\u7684\u670d\u52a1\u5668\u4f4d\u7f6e\uff0c\u4e0d\u540c\u7684\u5bbd\u5e26\u7c7b\u578b\u548c\u5730\u533a\u6240\u642d\u5efa\u7684\u8d26\u53f7\u7684\u7ffb\u5899\u901f\u5ea6\u4f1a\u4e0d\u540c\uff0c\u8fd9\u4e0e\u4e2d\u56fd\u7535\u4fe1\u3001\u4e2d\u56fd\u8054\u901a\u3001\u4e2d\u56fd\u79fb\u52a8\u56fd\u9645\u51fa\u53e3\u5e26\u5bbd\u548c\u7ebf\u8def\u4e0d\u540c\u6709\u5173\uff0c\u6240\u4ee5\u4ee5\u5b9e\u6d4b\u4e3a\u51c6\u3002\u53ef\u4ee5\u5148\u9009\u5b9a\u4e00\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u6765\u6309\u7167\u6559\u7a0b\u8fdb\u884c\u642d\u5efa\uff0c\u719f\u6089\u642d\u5efa\u65b9\u6cd5\uff0c\u5f53\u8d26\u53f7\u642d\u5efa\u5b8c\u6210\u5e76\u8fdb\u884c\u4e86bbr\u52a0\u901f\u540e\uff0c\u6d4b\u8bd5\u4e0b\u901f\u5ea6\u81ea\u5df1\u662f\u5426\u6ee1\u610f\uff0c\u5982\u679c\u6ee1\u610f\u90a3\u5c31\u7528\u8fd9\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u7684\u670d\u52a1\u5668\u3002\u5982\u679c\u901f\u5ea6\u4e0d\u592a\u6ee1\u610f\uff0c\u5c31\u4e00\u6b21\u6027\u5f00\u51e0\u53f0\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4f4d\u7f6e\u7684\u670d\u52a1\u5668\uff0c\u7136\u540e\u6309\u7167\u540c\u6837\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u642d\u5efa\u5e76\u6d4b\u8bd5\uff0c\u9009\u62e9\u6700\u4f18\u7684\uff0c\u4e4b\u540e\u628a\u5176\u5b83\u7684\u670d\u52a1\u5668\u5220\u6389\uff0c\u6309\u5c0f\u65f6\u8ba1\u8d39\u6d4b\u8bd5\u6210\u672c\u53ef\u4ee5\u5ffd\u7565\u3002\n\u8d26\u53f7\u5145\u503c\u5982\u56fe\uff1a\n\n\n\u5f00\u901a\u670d\u52a1\u5668\u6b65\u9aa4\u5982\u56fe\uff1a\n\n\n\n\u9009\u62e9vps\u64cd\u4f5c\u7cfb\u7edf\u65f6\uff0c\u4e0d\u8981\u9009centos7\u7cfb\u7edf\uff01\u70b9\u51fb\u56fe\u4e2d\u7684CentOS\u51e0\u4e2a\u5b57\uff0c\u4f1a\u5f39\u51facentos6\uff0c\u7136\u540e\u9009\u4e2dcentos6\uff01entos7\u9ed8\u8ba4\u7684\u9632\u706b\u5899\u53ef\u80fd\u4f1a\u5e72\u6270ssr\u7684\u6b63\u5e38\u8fde\u63a5\uff01\n\n\u63a5\u4e0b\u6765\u8fd9\u4e00\u6b65\u662f\u5f00\u542fvps\u7684ipv6 ip\uff0c\u9009\u586b\u9879\u3002\u5982\u679c\u4f60\u7684\u7535\u8111\u7cfb\u7edf\u53ef\u4ee5\u7528ipv6\uff0c\u90a3\u4e48\u53ef\u4ee5\u52fe\u9009\u6b64\u9879\u3002\u5927\u591a\u6570\u7528\u6237\u6ca1\u6709\u8fd9\u4e2a\u9700\u6c42\uff0c\u4f46\u6709\u4e00\u4e9b\u7528\u6237\u53ef\u80fd\u4f1a\u7528\u5230\uff0c\u6240\u4ee5\u8865\u5145\u4e86\u8fd9\u90e8\u5206\u5185\u5bb9\u3002\n\n\n\u5b8c\u6210\u8d2d\u4e70\u540e\uff0c\u627e\u5230\u7cfb\u7edf\u7684\u5bc6\u7801\u8bb0\u4e0b\u6765\uff0c\u90e8\u7f72\u670d\u52a1\u5668\u65f6\u9700\u8981\u7528\u5230\u3002vps\u7cfb\u7edf\uff08\u63a8\u8350centos6\uff09\u7684\u5bc6\u7801\u83b7\u53d6\u65b9\u6cd5\u5982\u4e0b\u56fe\uff1a\n\n\n\n\u5982\u679c\u4f60\u5f00\u542f\u4e86vps\u7684ipv6\uff0c\u90a3\u4e48\u5728\u540e\u53f0\u7684settings\u9009\u9879\u53ef\u4ee5\u627e\u5230\u670d\u52a1\u5668\u7684ipv6 ip\u3002\u5728\u90e8\u7f72SSR\u8d26\u53f7\u65f6\uff0c\u4f60\u7528ipv6 ip\u5c31\u884c\u3002\u6574\u4e2a\u90e8\u7f72\u53ca\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u8bb0\u5f97\u628a\u7535\u8111\u7cfb\u7edf\u5f00\u542fipv6\u5594\u3002\n\n\n\u5220\u6389\u670d\u52a1\u5668\u6b65\u9aa4\u5982\u4e0b\u56fe\uff1a\n\n\n\n\n\u7b2c\u4e8c\u6b65\uff1a\u90e8\u7f72VPS\u670d\u52a1\u5668\n\u8d2d\u4e70\u670d\u52a1\u5668\u540e\uff0c\u9700\u8981\u90e8\u7f72\u4e00\u4e0b\u3002\u56e0\u4e3a\u4f60\u4e70\u7684\u662f\u865a\u62df\u4e1c\u897f\uff0c\u800c\u4e14\u53c8\u8fdc\u5728\u56fd\u5916\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53ebXshell\u7684\u8f6f\u4ef6\u6765\u8fdc\u7a0b\u90e8\u7f72\u3002Xshell windows\u7248\u4e0b\u8f7d\u5730\u5740\uff1a\n\u56fd\u5916\u4e91\u76d81\u4e0b\u8f7d \n\u56fd\u5916\u4e91\u76d82\u4e0b\u8f7d \u63d0\u53d6\u5bc6\u7801\uff1a666\n\u56fd\u5916\u4e91\u76d83\u4e0b\u8f7d \u5bc6\u7801\uff1a123\n\u5982\u679c\u4f60\u662f\u82f9\u679c\u7535\u8111\u64cd\u4f5c\u7cfb\u7edf\uff0c\u66f4\u7b80\u5355\uff0c\u65e0\u9700\u4e0b\u8f7dxshell\uff0c\u7cfb\u7edf\u53ef\u4ee5\u76f4\u63a5\u8fde\u63a5VPS\u3002\u6253\u5f00\u7ec8\u7aef\uff08Terminal\uff09\uff0c\u8f93\u5165ssh root@ip  \u5176\u4e2d\u201cip\u201d\u66ff\u6362\u6210\u4f60VPS\u7684ip, \u6309\u56de\u8f66\u952e\uff0c\u7136\u540e\u590d\u5236\u7c98\u8d34\u5bc6\u7801\uff0c\u6309\u56de\u8f66\u952e\u5373\u53ef\u767b\u5f55\u3002\u7c98\u8d34\u5bc6\u7801\u65f6\u6709\u53ef\u80fd\u4e0d\u663e\u793a\u5bc6\u7801\uff0c\u4f46\u4e0d\u5f71\u54cd\uff0c \u53c2\u8003\u8bbe\u7f6e\u65b9\u6cd5  \u5982\u679c\u4e0d\u80fd\u7528MAC\u81ea\u5e26\u7684\u7ec8\u7aef\u8fde\u63a5\u7684\u8bdd\uff0c\u76f4\u63a5\u7f51\u4e0a\u641c\u201cMAC\u8fde\u63a5SSH\u7684\u8f6f\u4ef6\u201d\uff0c\u6709\u5f88\u591a\uff0c\u7136\u540e\u901a\u8fc7\u8f6f\u4ef6\u6765\u8fde\u63a5vps\u670d\u52a1\u5668\u5c31\u884c\uff0c\u5177\u4f53\u64cd\u4f5c\u65b9\u5f0f\u53c2\u8003windows xshell\u3002\n\n\u90e8\u7f72\u6559\u7a0b\uff1a\n\u4e0b\u8f7dxshell\u8f6f\u4ef6\u5e76\u5b89\u88c5\u540e\uff0c\u6253\u5f00\u8f6f\u4ef6\n\n\u9009\u62e9\u6587\u4ef6\uff0c\u65b0\u5efa\n\n\u968f\u4fbf\u53d6\u4e2a\u540d\u5b57\uff0c\u7136\u540e\u628a\u4f60\u7684\u670d\u52a1\u5668ip\u586b\u4e0a\n\n\u8fde\u63a5\u56fd\u5916ip\u5373\u670d\u52a1\u5668\u65f6\uff0c\u8f6f\u4ef6\u4f1a\u5148\u540e\u63d0\u9192\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u7528\u6237\u540d\u9ed8\u8ba4\u90fd\u662froot\uff0c\u5bc6\u7801\u662f\u4f60\u8d2d\u4e70\u7684\u670d\u52a1\u5668\u7cfb\u7edf\u7684\u5bc6\u7801\u3002\n\u5982\u679cxshell\u8fde\u4e0d\u4e0a\u670d\u52a1\u5668\uff0c\u6ca1\u6709\u5f39\u51fa\u8ba9\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u8f93\u5165\u6846\uff0c\u8868\u660e\u4f60\u5f00\u5230\u7684ip\u662f\u4e00\u4e2a\u88ab\u5899\u7684ip\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u91cd\u65b0\u5f00\u65b0\u7684\u670d\u52a1\u5668\uff0c\u76f4\u5230\u80fd\u7528xshell\u8fde\u4e0a\u4e3a\u6b62\uff0c\u8010\u5fc3\u70b9\u54e6\uff01\u5982\u679c\u540c\u4e00\u4e2a\u5730\u533a\u5f00\u4e86\u591a\u53f0\u670d\u52a1\u5668\u8fd8\u662f\u4e0d\u884c\u7684\u8bdd\uff0c\u53ef\u4ee5\u6362\u5176\u5b83\u5730\u533a\u3002\n\n\n\u8fde\u63a5\u6210\u529f\u540e\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u590d\u5236\u7c98\u8d34\u4ee3\u7801\u90e8\u7f72\u4e86\u3002\nCentOS6/Debian6/Ubuntu14 ShadowsocksR\u4e00\u952e\u90e8\u7f72\u7ba1\u7406\u811a\u672c\uff1a\n\nyum -y install wget\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n\u5907\u7528\u811a\u672c\uff1a\nyum -y install wget\nwget -N --no-check-certificate https://softs.fun/Bash/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u4ee3\u7801\u5206\u5272\u7ebf\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\u590d\u5236\u4e0a\u9762\u7684\u4ee3\u7801\u5230VPS\u670d\u52a1\u5668\u91cc\uff0c\u6309\u56de\u8f66\u952e\uff0c\u811a\u672c\u4f1a\u81ea\u52a8\u5b89\u88c5\uff0c\u4ee5\u540e\u53ea\u9700\u8981\u8fd0\u884c\u8fd9\u4e2a\u5feb\u6377\u547d\u4ee4\u5c31\u53ef\u4ee5\u51fa\u73b0\u4e0b\u56fe\u7684\u754c\u9762\u8fdb\u884c\u8bbe\u7f6e\uff0c\u5feb\u6377\u7ba1\u7406\u547d\u4ee4\u4e3a\uff1abash ssr.sh\n\n\u5982\u4e0a\u56fe\u51fa\u73b0\u7ba1\u7406\u754c\u9762\u540e\uff0c\u8f93\u5165\u6570\u5b571\u6765\u5b89\u88c5SSR\u670d\u52a1\u7aef\u3002\u5982\u679c\u8f93\u51651\u540e\u4e0d\u80fd\u8fdb\u5165\u4e0b\u4e00\u6b65\uff0c\u90a3\u4e48\u8bf7\u9000\u51faxshell\uff0c\u91cd\u65b0\u8fde\u63a5vps\u670d\u52a1\u5668\uff0c\u7136\u540e\u8f93\u5165\u5feb\u6377\u7ba1\u7406\u547d\u4ee4bash ssr.sh \u518d\u5c1d\u8bd5\u3002\n\n\u6839\u636e\u4e0a\u56fe\u63d0\u793a\uff0c\u4f9d\u6b21\u8f93\u5165\u81ea\u5df1\u60f3\u8bbe\u7f6e\u7684\u7aef\u53e3\u548c\u5bc6\u7801 (\u5bc6\u7801\u5efa\u8bae\u7528\u590d\u6742\u70b9\u7684\u5b57\u6bcd\u7ec4\u5408\uff0c\u7aef\u53e3\u53f7\u4e3a40-65535\u4e4b\u95f4\u7684\u6570\u5b57)\uff0c\u56de\u8f66\u952e\u7528\u4e8e\u786e\u8ba4\n\u6ce8\uff1a\u5173\u4e8e\u7aef\u53e3\u7684\u8bbe\u7f6e\uff0c\u603b\u7684\u7f51\u7edc\u603b\u7aef\u53e3\u67096\u4e07\u591a\u4e2a\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u4efb\u610f\u8bbe\u7f6e\u3002\u4f46\u662f\u6709\u7684\u5730\u533a\u9700\u8981\u8bbe\u7f6e\u7279\u6b8a\u7684\u7aef\u53e3\u624d\u6709\u6548\uff0c\u4e00\u4e9b\u7279\u6b8a\u7684\u7aef\u53e3\u6bd4\u598280\u3001143\u3001443\u30011433\u30013306\u30013389\u30018080\u3002\n\n\u5982\u4e0a\u56fe\uff0c\u9009\u62e9\u60f3\u8bbe\u7f6e\u7684\u52a0\u5bc6\u65b9\u5f0f\uff0c\u6bd4\u598210\uff0c\u6309\u56de\u8f66\u952e\u786e\u8ba4\n\u63a5\u4e0b\u6765\u662f\u9009\u62e9\u534f\u8bae\u63d2\u4ef6\uff0c\u5982\u4e0b\u56fe\uff1a\n\n\n\u9009\u62e9\u5e76\u786e\u8ba4\u540e\uff0c\u4f1a\u51fa\u73b0\u4e0a\u56fe\u7684\u754c\u9762\uff0c\u63d0\u793a\u4f60\u662f\u5426\u9009\u62e9\u517c\u5bb9\u539f\u7248\uff0c\u8fd9\u91cc\u7684\u539f\u7248\u6307\u7684\u662fSS\u5ba2\u6237\u7aef\uff08SS\u5ba2\u6237\u7aef\u6ca1\u6709\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u9009\u9879\uff09\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u8fdb\u884c\u9009\u62e9\uff0c\u6f14\u793a\u9009\u62e9y\n\u4e4b\u540e\u8fdb\u884c\u6df7\u6dc6\u63d2\u4ef6\u7684\u8bbe\u7f6e\u3002\n\u6ce8\u610f\uff1a\u5982\u679c\u534f\u8bae\u662forigin\uff0c\u90a3\u4e48\u6df7\u6dc6\u4e5f\u5fc5\u987b\u662fplain\uff1b\u5982\u679c\u534f\u8bae\u4e0d\u662forigin\uff0c\u90a3\u4e48\u6df7\u6dc6\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u3002\u6709\u7684\u5730\u533a\u9700\u8981\u628a\u6df7\u6dc6\u8bbe\u7f6e\u6210plain\u624d\u597d\u7528\u3002\u56e0\u4e3a\u6df7\u6dc6\u4e0d\u603b\u662f\u6709\u6548\u679c\uff0c\u8981\u770b\u5404\u5730\u533a\u7684\u7b56\u7565\uff0c\u6709\u65f6\u5019\u4e0d\u6df7\u6dc6\uff08plain\uff09\u8ba9\u5176\u770b\u8d77\u6765\u50cf\u968f\u673a\u6570\u636e\u66f4\u597d\u3002\uff08\u7279\u522b\u6ce8\u610f\uff1atls 1.2_ticket_auth\u5bb9\u6613\u53d7\u5230\u5e72\u6270\uff01\u8bf7\u9009\u62e9\u9664tls\u5f00\u5934\u4ee5\u5916\u7684\u5176\u5b83\u6df7\u6dc6\uff01\uff01\uff01\uff09 \n\n\u8fdb\u884c\u6df7\u6dc6\u63d2\u4ef6\u7684\u8bbe\u7f6e\u540e\uff0c\u4f1a\u4f9d\u6b21\u63d0\u793a\u4f60\u5bf9\u8bbe\u5907\u6570\u3001\u5355\u7ebf\u7a0b\u9650\u901f\u548c\u7aef\u53e3\u603b\u9650\u901f\u8fdb\u884c\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u503c\u662f\u4e0d\u8fdb\u884c\u9650\u5236\uff0c\u4e2a\u4eba\u4f7f\u7528\u7684\u8bdd\uff0c\u9009\u62e9\u9ed8\u8ba4\u5373\u53ef\uff0c\u5373\u76f4\u63a5\u6572\u56de\u8f66\u952e\u3002\n\u6ce8\u610f\uff1a\u5173\u4e8e\u9650\u5236\u8bbe\u5907\u6570\uff0c\u8fd9\u4e2a\u534f\u8bae\u5fc5\u987b\u662f\u975e\u539f\u7248\u4e14\u4e0d\u517c\u5bb9\u539f\u7248\u624d\u6709\u6548\uff0c\u4e5f\u5c31\u662f\u5fc5\u987b\u4f7f\u7528SSR\u534f\u8bae\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u6709\u6548\uff01\n\n\u4e4b\u540e\u4ee3\u7801\u5c31\u6b63\u5f0f\u81ea\u52a8\u90e8\u7f72\u4e86\uff0c\u5230\u4e0b\u56fe\u6240\u793a\u7684\u4f4d\u7f6e\uff0c\u63d0\u793a\u4f60\u4e0b\u8f7d\u6587\u4ef6\uff0c\u8f93\u5165\uff1ay\n\n\u8010\u5fc3\u7b49\u5f85\u4e00\u4f1a\uff0c\u51fa\u73b0\u4e0b\u9762\u7684\u754c\u9762\u5373\u90e8\u7f72\u5b8c\u6210\uff1a\n\n\n\u6839\u636e\u4e0a\u56fe\u5c31\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u8bbe\u7f6e\u7684SSR\u8d26\u53f7\u4fe1\u606f\uff0c\u5305\u62ecIP\u3001\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u63d2\u4ef6\u3001\u6df7\u6dc6\u63d2\u4ef6\uff0c\u8fd9\u4e9b\u4fe1\u606f\u9700\u8981\u586b\u5165\u4f60\u7684SSR\u5ba2\u6237\u7aef\u3002\u5982\u679c\u4e4b\u540e\u60f3\u4fee\u6539\u8d26\u53f7\u4fe1\u606f\uff0c\u76f4\u63a5\u8f93\u5165\u5feb\u6377\u7ba1\u7406\u547d\u4ee4\uff1abash ssr.sh \u8fdb\u5165\u7ba1\u7406\u754c\u9762\uff0c\u9009\u62e9\u76f8\u5e94\u7684\u6570\u5b57\u6765\u8fdb\u884c\u4e00\u952e\u4fee\u6539\u3002\u4f8b\u5982\uff1a\n\n\n\u811a\u672c\u6f14\u793a\u7ed3\u675f\u3002\n\u6b64\u811a\u672c\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u90e8\u7f72\u4e00\u6b21\u5373\u53ef\u3002\u6700\u540e\u53ef\u4ee5\u91cd\u542f\u670d\u52a1\u5668\u786e\u4fdd\u90e8\u7f72\u751f\u6548\uff08\u4e00\u822c\u60c5\u51b5\u4e0d\u91cd\u542f\u4e5f\u53ef\u4ee5\uff09\u3002\u91cd\u542f\u9700\u8981\u5728\u547d\u4ee4\u680f\u91cc\u8f93\u5165reboot \uff0c\u8f93\u5165\u547d\u4ee4\u540e\u7a0d\u5fae\u7b49\u5f85\u4e00\u4f1a\u670d\u52a1\u5668\u5c31\u4f1a\u81ea\u52a8\u91cd\u542f\uff0c\u4e00\u822c\u91cd\u542f\u8fc7\u7a0b\u9700\u89812\uff5e5\u5206\u949f\uff0c\u91cd\u542f\u8fc7\u7a0b\u4e2dXshell\u4f1a\u81ea\u52a8\u65ad\u5f00\u8fde\u63a5\uff0c\u7b49VPS\u91cd\u542f\u597d\u540e\u624d\u53ef\u4ee5\u7528Xshell\u8f6f\u4ef6\u8fdb\u884c\u8fde\u63a5\u3002\u5982\u679c\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u5361\u5728\u67d0\u4e2a\u4f4d\u7f6e\u8d85\u8fc710\u5206\u949f\uff0c\u53ef\u4ee5\u7528xshell\u8f6f\u4ef6\u65ad\u5f00\uff0c\u7136\u540e\u91cd\u65b0\u8fde\u63a5\u4f60\u7684ip\uff0c\u518d\u590d\u5236\u4ee3\u7801\u8fdb\u884c\u90e8\u7f72\u3002\n\n\u7b2c\u4e09\u6b65\uff1a\u4e00\u952e\u52a0\u901fVPS\u670d\u52a1\u5668\n\u6b64\u52a0\u901f\u6559\u7a0b\u4e3a\u8c37\u6b4cBBR\u52a0\u901f,Vultr\u7684\u670d\u52a1\u5668\u6846\u67b6\u53ef\u4ee5\u88c5BBR\u52a0\u901f\uff0c\u52a0\u901f\u540e\u5bf9\u901f\u5ea6\u7684\u63d0\u5347\u5f88\u660e\u663e\uff0c\u6240\u4ee5\u63a8\u8350\u90e8\u7f72\u52a0\u901f\u811a\u672c\u3002\u8be5\u52a0\u901f\u65b9\u6cd5\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u90e8\u7f72\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\n\u6309\u7167\u7b2c\u4e8c\u6b65\u7684\u6b65\u9aa4\uff0c\u8fde\u63a5\u670d\u52a1\u5668ip\uff0c\u767b\u5f55\u6210\u529f\u540e\uff0c\u5728\u547d\u4ee4\u680f\u91cc\u7c98\u8d34\u4ee5\u4e0b\u4ee3\u7801\uff1a\n\u3010\u8c37\u6b4cBBR\u52a0\u901f\u6559\u7a0b\u3011\nyum -y install wget\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\nchmod +x bbr.sh\n./bbr.sh\n\u628a\u4e0a\u9762\u6574\u4e2a\u4ee3\u7801\u590d\u5236\u540e\u7c98\u8d34\u8fdb\u53bb\uff0c\u4e0d\u52a8\u7684\u65f6\u5019\u6309\u56de\u8f66\uff0c\u7136\u540e\u8010\u5fc3\u7b49\u5f85\uff0c\u6700\u540e\u91cd\u542fvps\u670d\u52a1\u5668\u5373\u53ef\u3002\n\u6f14\u793a\u5f00\u59cb\uff0c\u5982\u56fe\uff1a\n\u590d\u5236\u5e76\u7c98\u8d34\u4ee3\u7801\u540e\uff0c\u6309\u56de\u8f66\u952e\u786e\u8ba4\n\n\u5982\u4e0b\u56fe\u63d0\u793a\uff0c\u6309\u4efb\u610f\u952e\u7ee7\u7eed\u90e8\u7f72\n\n\n\u90e8\u7f72\u5230\u4e0a\u56fe\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u7b49\u5f853\uff5e6\u5206\u949f\n\n\u6700\u540e\u8f93\u5165y\u91cd\u542f\u670d\u52a1\u5668\uff0c\u5982\u679c\u8f93\u5165y\u63d0\u793acommand not found \uff0c\u63a5\u7740\u8f93\u5165reboot\u6765\u91cd\u542f\u670d\u52a1\u5668\uff0c\u786e\u4fdd\u52a0\u901f\u751f\u6548\uff0cbbr\u52a0\u901f\u811a\u672c\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u88c5\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\n\u670d\u52a1\u5668\u91cd\u542f\u6210\u529f\u5e76\u91cd\u65b0\u8fde\u63a5\u670d\u52a1\u5668\u540e\uff0c\u8f93\u5165\u547d\u4ee4lsmod | grep bbr  \u5982\u679c\u51fa\u73b0tcp_bbr\u5b57\u6837\u8868\u793abbr\u5df2\u5b89\u88c5\u5e76\u542f\u52a8\u6210\u529f\u3002\u5982\u56fe\uff1a\n\n\n\u8d2d\u4e70vps\u670d\u52a1\u5668\u540e\uff0cip\u6709\u4e86\uff0c\u901a\u8fc7\u90e8\u7f72\uff0c\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u548c\u6df7\u6dc6\u4e5f\u6709\u4e86\uff0c\u6700\u540e\u5c06\u8fd9\u4e9b\u4fe1\u606f\u586b\u5165SSR\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u7ffb\u5899\u5566\u3002\n\u6709\u4e86\u8d26\u53f7\u540e\uff0c\u6253\u5f00SSR\u5ba2\u6237\u7aef\uff0c\u586b\u4e0a\u4fe1\u606f\uff0c\u8fd9\u91cc\u4ee5windows\u7248\u7684SSR\u5ba2\u6237\u7aef\u4e3a\u4f8b\u5b50\uff1a\n\n\u5728\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u586b\u4e0a\u670d\u52a1\u5668ip\u3001\u670d\u52a1\u5668\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u548c\u6df7\u6dc6\uff0c\u6700\u540e\u5c06\u6d4f\u89c8\u5668\u7684\u4ee3\u7406\u8bbe\u7f6e\u4e3a\uff08http\uff09127.0.0.1\u548c1080\u5373\u53ef\u3002\u8d26\u53f7\u7684\u7aef\u53e3\u53f7\u5c31\u662f\u4f60\u81ea\u5df1\u8bbe\u7f6e\u7684\uff0c\u800c\u8981\u4e0a\u7f51\u7684\u6d4f\u89c8\u5668\u7684\u7aef\u53e3\u53f7\u662f1080\uff0c\u56fa\u5b9a\u7684\uff0c\u8c37\u6b4c\u6d4f\u89c8\u5668\u53ef\u4ee5\u901a\u8fc7 SwitchyOmega \u63d2\u4ef6\u6765\u8bbe\u7f6e\u3002\n\u542f\u52a8SSR\u5ba2\u6237\u7aef\u540e\uff0c\u53f3\u952eSSR\u5ba2\u6237\u7aef\u56fe\u6807\uff0c\u9009\u62e9\u7b2c\u4e00\u4e2a\u201c\u7cfb\u7edf\u4ee3\u7406\u6a21\u5f0f\u201d\uff0c\u91cc\u9762\u67093\u4e2a\u5b50\u9009\u9879\uff0c\u9009\u62e9\"\u5168\u5c40\u6a21\u5f0f\u201c\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u7528\u6d4f\u89c8\u5668\u8bbe\u7f6e\u597d\u4e86\u7684\u4ee3\u7406\u6a21\u5f0f\uff08http\uff09127.0.0.1\u548c1080\u7ffb\u5899\uff0c\u6b64\u6a21\u5f0f\u4e0b\u6240\u6709\u7684\u7f51\u7ad9\u90fd\u4f1a\u8d70SSR\u4ee3\u7406\u3002\uff08\u9002\u5408\u65b0\u624b\uff09\n\n\n\u5e38\u89c1\u95ee\u9898\u53c2\u8003\u89e3\u51b3\u65b9\u6cd5\uff1a\n1\u3001\u7528\u4e86\u4e00\u6bb5\u65f6\u95f4\u53d1\u73b0ssr\u8d26\u53f7\u7528\u4e0d\u4e86\u4e86\n\u9996\u5148ping\u4e00\u4e0b\u81ea\u5df1\u7684ip\uff0c\u770b\u770b\u80fd\u4e0d\u80fdping\u7684\u901a\uff0cping\u4e0d\u901a\u90a3\u4e48\u5c31\u662fip\u88ab\u5899\u4e86\uff0cip\u88ab\u5899\u65f6\uff0cxshell\u4e5f\u4f1a\u8fde\u63a5\u4e0d\u4e0a\u670d\u52a1\u5668\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u91cd\u65b0\u90e8\u7f72\u4e00\u4e2a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u65b0\u7684\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\u3002\u5173\u4e8e\u600e\u4e48ping ip\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\uff0c\u6216\u8005\u7528xshell\u8f6f\u4ef6\u8fde\u63a5\u670d\u52a1\u5668\u6765\u5224\u65ad\uff0c\u8fde\u4e0d\u4e0a\u5373\u662f\u88ab\u5899\u4e86\u3002vultr\u5f00\u901a\u548c\u5220\u9664\u670d\u52a1\u5668\u975e\u5e38\u65b9\u4fbf\uff0c\u65b0\u670d\u52a1\u5668\u5373\u65b0ip\uff0c\u5927\u591a\u6570vps\u670d\u52a1\u5546\u90fd\u6ca1\u6709\u8fd9\u6837\u7684\u670d\u52a1\uff0c\u4e00\u822c\u7684vps\u670d\u52a1\u5546\u53ef\u80fd\u4f1a\u63d0\u4f9b\u514d\u8d39\u66f4\u63621\u6b21ip\u7684\u670d\u52a1\u3002\n2\u3001\u521a\u642d\u5efa\u597d\u7684ssr\u8d26\u53f7\uff0cip\u80fdping\u901a\uff0c\u4f46\u662f\u8fd8\u662f\u7528\u4e0d\u4e86\n\u9996\u9009\u6392\u9664\u6740\u6bd2\u8f6f\u4ef6\u7684\u5e72\u6270\uff0c\u5c24\u5176\u662f\u56fd\u4ea7\u6740\u6bd2\u8f6f\u4ef6\uff0c\u6bd4\u5982360\u5b89\u5168\u536b\u751f\u3001360\u6740\u6bd2\u8f6f\u4ef6\u3001\u817e\u8baf\u7ba1\u5bb6\u3001\u91d1\u5c71\u536b\u751f\u7b49\u3002\u8fd9\u4e9b\u4e1c\u897f\u5f88\u5bb9\u6613\u5e72\u6270\u7ffb\u5899\u4e0a\u7f51\uff0c\u5982\u679c\u4f60\u7684\u7535\u8111\u5b89\u88c5\u4e86\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u5efa\u8bae\u81f3\u5c11\u7ffb\u5899\u65f6\u522b\u7528\uff0c\u6700\u597d\u5378\u8f7d\u3002\u5176\u6b21\uff0c\u68c0\u67e5\u4e0bSSR\u4fe1\u606f\u662f\u5426\u586b\u5199\u6b63\u786e\u3002\u6d4f\u89c8\u5668\u7684\u4ee3\u7406\u65b9\u5f0f\u662f\u5426\u662fssr\u4ee3\u7406\uff0c\u5373\uff08HTTP\uff09127.0.0.1 \u548c1080\u3002\u5982\u679c\u4ee5\u4e0a\u6761\u4ef6\u90fd\u6392\u9664\uff0c\u8fd8\u662f\u7528\u4e0d\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u66f4\u6362\u7aef\u53e3\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u3001\u6df7\u6dc6\uff0c\u6216\u8005\u66f4\u6362\u670d\u52a1\u5668\u4f4d\u7f6e\u3002\u53e6\u5916\uff0c\u5982\u679c\u4f60\u7684vps\u670d\u52a1\u5668\u914d\u7f6e\u7684\u662fSSR\u8d26\u53f7\uff0c\u5373\u6709\u534f\u8bae\u548c\u6df7\u6dc6\u4e14\u6ca1\u6709\u517c\u5bb9\u539f\u7248(SS\u7248\uff09\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u4f7f\u7528SSSR\u5ba2\u6237\u7aef\u6765\u4f7f\u7528\u8d26\u53f7\uff0c\u56e0\u4e3aSS\u5ba2\u6237\u7aef\u6ca1\u6709\u586b\u5199\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u9009\u9879\u3002\n3\u3001\u6709\u7684\u5730\u533a\u9700\u8981\u628a\u6df7\u6dc6\u53c2\u6570\u8bbe\u7f6e\u6210plain\u624d\u597d\u7528\u3002\u56e0\u4e3a\u6df7\u6dc6\u4e0d\u603b\u662f\u6709\u6548\u679c\uff0c\u8981\u770b\u5404\u5730\u533a\u7684\u7b56\u7565\uff0c\u6709\u65f6\u5019\u4e0d\u6df7\u6dc6\uff08plain\uff09\u8ba9\u5176\u770b\u8d77\u6765\u50cf\u968f\u673a\u6570\u636e\u66f4\u597d\u3002\n4\u3001\u7535\u8111\u80fd\u7528\u4f46\u624b\u673a\u7528\u4e0d\u4e86\n\u5982\u679c\u4f60\u7684\u624b\u673a\u7528\u7684\u662fSS\u5ba2\u6237\u7aef\uff0cSS\u5ba2\u6237\u7aef\u6ca1\u6709\u586b\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u5730\u65b9\uff0c\u5982\u679c\u4f60\u90e8\u7f72\u7684\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u65f6\u5019\u6ca1\u6709\u9009\u62e9\u517c\u5bb9\u539f\u7248\uff08SS\u7248\uff09\uff0c\u56e0\u6b64\u624b\u673a\u662f\u7528\u4e0d\u4e86\u7684\u3002\u8fd9\u4e2a\u65f6\u5019\u4f60\u628a\u534f\u8bae\u5f04\u6210\u517c\u5bb9\u539f\u7248\u3001\u6df7\u6dc6\u4e5f\u8bbe\u7f6e\u6210\u517c\u5bb9\u539f\u7248\u5373\u53ef\u3002\u6216\u8005\u76f4\u63a5\u5c06\u534f\u8bae\u8bbe\u7f6e\u6210origin\u4e14\u6df7\u6dc6\u8bbe\u7f6e\u6210plain\u3002\n5\u3001vps\u7684\u670d\u52a1\u5668\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u8981\u7528\u7684\u592a\u9ad8\uff0c\u592a\u9ad8\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7cfb\u7edf\u7684\u9632\u706b\u5899\u95ee\u9898\u5bfc\u81f4\u642d\u5efa\u7684SSR\u8d26\u53f7\u8fde\u4e0d\u4e0a\uff0c\u5982\u679c\u4f60\u7528\u7684centos\u7cfb\u7edf\uff0c\u5efa\u8bae\u7528centos6\uff0c\u4e0d\u8981\u7528centos7\u3002\u5982\u679c\u4f60\u524d\u9762\u4e0d\u5c0f\u5fc3\u88c5\u4e86centos7\u7cfb\u7edf\uff0c\u90a3\u4e48\u53ea\u80fd\u91cd\u88c5\u7cfb\u7edf\u6216\u8005\u91cd\u65b0\u90e8\u7f72\u65b0\u7684vps\u670d\u52a1\u5668\u3002\n6\u3001vultr\u670d\u52a1\u5546\u63d0\u4f9b\u7684vps\u670d\u52a1\u5668\u662f\u5355\u5411\u6d41\u91cf\u8ba1\u7b97\uff0c\u6709\u7684vps\u670d\u52a1\u5546\u662f\u53cc\u5411\u6d41\u91cf\u8ba1\u7b97\uff0c\u5355\u5411\u6d41\u91cf\u8ba1\u7b97\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u66f4\u5b9e\u60e0\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u5728vps\u670d\u52a1\u5668\u4e0a\u90e8\u7f72SSR\u670d\u52a1\u7aef\u540e\uff0c\u518d\u7528SSR\u5ba2\u6237\u7aef\u7ffb\u5899\uff0c\u6240\u4ee5SSR\u670d\u52a1\u7aef\u5c31\u76f8\u5f53\u4e8e\u4e2d\u8f6c\uff0c\u6bd4\u5982\u6211\u4eec\u770b\u4e00\u4e2a\u89c6\u9891\uff0c\u5fc5\u7136\u4f1a\u4ea7\u751f\u6d41\u91cf\uff0c\u5047\u5982\u6d88\u8017\u6d41\u91cf80M\uff0c\u90a3\u4e48VPS\u670d\u52a1\u5668\u4f1a\u4ea7\u751f\u4e0a\u4f2080M\u548c\u4e0b\u8f7d80M\u6d41\u91cf\uff0cvultr\u670d\u52a1\u5546\u53ea\u8ba1\u7b97\u5355\u5411\u768480M\u6d41\u91cf\u3002\u5982\u679c\u662f\u53cc\u5411\u8ba1\u7b97\u6d41\u91cf\uff0c\u90a3\u4e48\u4f1a\u8ba1\u7b97\u4e3a160M\u6d41\u91cf\u3002\n7\u3001\u5982\u679c\u4f60\u60f3\u628a\u642d\u5efa\u7684\u8d26\u53f7\u7ed9\u591a\u4eba\u4f7f\u7528\uff0c\u4e0d\u7528\u989d\u5916\u8bbe\u7f6e\u7aef\u53e3\uff0c\u56e0\u4e3a\u4e00\u4e2a\u8d26\u53f7\u5c31\u53ef\u4ee5\u591a\u4eba\u4f7f\u7528\u3002\u4e00\u822c5\u7f8e\u5143\u7684\u670d\u52a1\u5668\u53ef\u4ee5\u540c\u65f6\u652f\u630140\u4eba\u5728\u7ebf\u4f7f\u7528\u3002\n\u5982\u679c\u60f3\u5b9e\u73b0\u652f\u6301\u6bcf\u4e2a\u7528\u6237(\u7aef\u53e3)\u4e0d\u540c\u7684\u52a0\u5bc6\u65b9\u5f0f/\u534f\u8bae/\u6df7\u6dc6\u7b49\uff0c\u5e76\u4e14\u7ba1\u7406\u6d41\u91cf\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u8003\u591a\u7528\u6237\u914d\u7f6e\u811a\u672c\uff1awget -N --no-check-certificate https://softs.fun/Bash/ssrmu.sh && chmod +x ssrmu.sh && bash ssrmu.sh  \u5907\u7528\u811a\u672c\uff1awget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh && chmod +x ssrmu.sh && bash ssrmu.sh  \u5b89\u88c5\u540e\u7ba1\u7406\u547d\u4ee4\u4e3a\uff1abash ssrmu.sh\n\u6ce8\u610f\uff1a\u8fd9\u4e2a\u591a\u7528\u6237\u914d\u7f6e\u811a\u672c\u548c\u6559\u7a0b\u5185\u5bb9\u7684\u811a\u672c\u65e0\u6cd5\u5171\u5b58\uff01\u8981\u60f3\u7528\u8fd9\u4e2a\u811a\u672c\uff0c\u628a\u4e4b\u524d\u7684\u811a\u672c\u5378\u8f7d\uff0c\u8f93\u5165\u7ba1\u7406\u547d\u4ee4bash ssr.sh \uff0c\u9009\u62e93\uff0c\u5378\u8f7dShadowsocksR\u5373\u53ef\u5378\u8f7d\u539f\u811a\u672c\u3002\n8\u3001vultr\u670d\u52a1\u5668\u6bcf\u6708\u6709\u6d41\u91cf\u9650\u5236\uff0c\u8d85\u8fc7\u9650\u5236\u540e\u670d\u52a1\u5668\u4e0d\u4f1a\u88ab\u505c\u6b62\u8fd0\u884c\uff0c\u4f46\u662f\u8d85\u51fa\u7684\u6d41\u91cf\u4f1a\u88ab\u989d\u5916\u6536\u8d39\u3002\u5317\u7f8e\u548c\u897f\u6b27\u5730\u533a\u7684\u670d\u52a1\u5668\u8d85\u51fa\u6d41\u91cf\u540e\uff0c\u591a\u51fa\u7684\u90e8\u5206\u6536\u8d39\u4e3a0.01\u7f8e\u5143/G\u3002\u65b0\u52a0\u5761\u548c\u65e5\u672c\u4e1c\u4eac\uff08\u65e5\u672c\uff09\u4e3a0.025\u7f8e\u5143/G\uff0c\u6089\u5c3c\uff08\u6fb3\u5927\u5229\u4e9a\uff09\u4e3a0.05\u7f8e\u5143/G\u3002\u628avultr\u670d\u52a1\u5668\u5220\u6389\uff0c\u5f00\u901a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u6d41\u91cf\u4f1a\u4ece0\u5f00\u59cb\u91cd\u65b0\u8ba1\u7b97\u3002\n9\u3001vultr\u600e\u6837\u624d\u80fd\u7533\u8bf7\u9000\u6b3e\u5462\uff1f\nvultr\u548c\u5176\u4ed6\u7684\u56fd\u5916\u5546\u5bb6\u4e00\u6837\uff0c\u90fd\u662f\u4f7f\u7528\u5de5\u5355\u7684\u5f62\u5f0f\u4e0e\u5ba2\u670d\u8054\u7cfb\uff0c\u5982\u679c\u9700\u8981\u9000\u6b3e\uff0c\u76f4\u63a5\u5728\u540e\u53f0\u70b9\u51fbsupport\uff0c\u9009\u62e9open ticket\u65b0\u5f00\u4e00\u4e2a\u5de5\u5355\uff0c\u9009\u62e9billing question\u8d22\u52a1\u95ee\u9898\uff0c\u7b80\u5355\u7684\u5728\u6587\u672c\u6846\u8f93\u5165\u4f60\u7684\u9000\u6b3e\u7406\u7531\u3002\u6bd4\u5982\uff1aPlease refund all the balance in my account\u3002\u5de5\u5355\u63d0\u4ea4\u4ee5\u540e\u4e00\u822c\u5f88\u5feb\u5c31\u53ef\u4ee5\u7ed9\u4f60\u786e\u8ba4\u9000\u6b3e\uff0c\u82e5\u5e72\u4e2a\u5de5\u4f5c\u65e5\u540e\u5c31\u4f1a\u9000\u56de\u4f60\u7684\u652f\u4ed8\u65b9\u5f0f\u3002\uff08\u5168\u989d\u9000\u6b3e\u7ed3\u675f\u540e\uff0c\u8d26\u53f7\u53ef\u80fd\u4f1a\u88ab\u5220\u9664\uff09\n\u5982\u679c\u82f1\u8bed\u6c34\u5e73\u4e0d\u597d\uff0c\u4f46\u662f\u60f3\u548c\u5ba2\u670d\u8fdb\u884c\u4ea4\u6d41\uff0c\u53ef\u4ee5\u7528\u767e\u5ea6\u5728\u7ebf\u7ffb\u8bd1\uff0c\u81ea\u52a8\u4e2d\u6587\u8f6c\u82f1\u6587\u548c\u82f1\u6587\u8f6c\u4e2d\u6587\u3002\n10\u3001\u8def\u7531\u5668\u4e5f\u53ef\u4ee5\u914d\u7f6ess/ssr\u8d26\u53f7\uff0c\u8be6\u89c1openwrt-ssr\u9879\u76ee\u5730\u5740\uff1ahttps://github.com/ywb94/openwrt-ssr  \n11\u3001\u5982\u679c\u7535\u8111\u60f3\u7528\u642d\u5efa\u7684ss/ssr\u8d26\u53f7\u73a9\u6e38\u620f\uff0c\u5373\u5b9e\u73b0\u7c7b\u4f3cVPN\u5168\u5c40\u4ee3\u7406\uff0c\u53ef\u4ee5\u7528SSTAP\uff0c\u6559\u7a0b\uff1ahttps://www.jianshu.com/p/519e68b74646. \u81ea\u5efass/ssr\u670d\u52a1\u5668\u6559\u7a0b\u3002\n2019.1.18\uff1avultr\u57282019\u5e741\u6708\u7684\u6700\u65b0\u6d3b\u52a8\uff0c\u9488\u5bf9\u65b0\u7528\u6237\uff0c\u76f4\u63a5\u900150\u7f8e\u5143\uff01\n2018.12.9\uff1a\u589e\u52a0\u7834\u89e3\u7248\u9510\u901f\u52a0\u901f\u6559\u7a0b\u3002\n2018.9.1\uff1avultr\u5b98\u65b9\u8fdb\u884c\u4e86\u8c03\u6574\uff0c2.5\u7f8e\u5143\u5957\u9910\u53ea\u63d0\u4f9bipv6\uff0c\u5982\u679c\u4f60\u7528\u4e0d\u4e86ipv6\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4e703.5\u7f8e\u5143\u7684\u5957\u9910\u3002\n\u3010\u5ba2\u6237\u7aef\u4e0b\u8f7d\u3011\n\u7b2c\u4e00\u6b21\u7535\u8111\u7cfb\u7edf\u4f7f\u7528SSR/SS\u5ba2\u6237\u7aef\u65f6\uff0c\u9700\u8981\u5b89\u88c5NET Framework 4.0\uff0c\u4e0d\u7136\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\uff0c\u5fae\u8f6f\u5b98\u7f51\u4e0b\u8f7d\u3002NET Framework 4.0\u662fSSR/SS\u7684\u8fd0\u884c\u5e93\uff0c\u6ca1\u6709\u8fd9\u4e2aSSR/SS\u5ba2\u6237\u7aef\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\u3002\u6709\u7684\u7535\u8111\u7cfb\u7edf\u53ef\u80fd\u4f1a\u81ea\u5e26NET Framework 4.0\u3002\nWindows SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740\nMAC SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740\nLinux\u5ba2\u6237\u7aef\u4e00\u952e\u5b89\u88c5\u914d\u7f6e \u4f7f\u7528\u811a\u672c (\u4f7f\u7528\u65b9\u6cd5\u89c1\u6ce8\u91ca) \u6216\u8005\u91c7\u7528\u56fe\u5f62\u754c\u9762\u7684linux ssr\u5ba2\u6237\u7aef\n\u5b89\u5353 SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740 \n\u82f9\u679c\u624b\u673aSSR\u5ba2\u6237\u7aef\uff1aPotatso Lite\u3001Potatso\u3001shadowrocket\u90fd\u53ef\u4ee5\u4f5c\u4e3aSSR\u5ba2\u6237\u7aef\uff0c\u4f46\u8fd9\u4e9b\u8f6f\u4ef6\u76ee\u524d\u5df2\u7ecf\u5728\u56fd\u5185\u7684app\u5546\u5e97\u4e0b\u67b6\uff0c\u53ef\u4ee5\u7528\u7f8e\u533a\u7684appid\u8d26\u53f7\u6765\u4e0b\u8f7d\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u914d\u7f6e\u7684SSR\u8d26\u53f7\u517c\u5bb9SS\u5ba2\u6237\u7aef\uff0c\u6216\u8005\u534f\u8bae\u9009\u62e9origin\u4e14\u6df7\u6dc6\u9009\u62e9plain\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u9009\u62e9\u82f9\u679cSS\u5ba2\u6237\u7aef\u8f6f\u4ef6\uff08\u5373\u534f\u8bae\u548c\u6df7\u6dc6\u53ef\u4ee5\u4e0d\u586b\uff09\u3002\u5728\u5927\u9646app\u5546\u5e97\u91cc\u9762\u53ef\u4ee5\u5c1d\u8bd5\u641c\u7d22\uff1aWingy\u3001shadowsocks\uff0c\u5982\u679c\u8f6f\u4ef6\u90fd\u88ab\u4e0b\u67b6\u4e86\uff0c\u5efa\u8bae\u81ea\u5df1\u6ce8\u518c\u7f8e\u533aappid\u6765\u4e0b\u8f7d\uff0c\u8f6f\u4ef6\u591a\u7684\u5f88\uff01\u82f9\u679c\u624b\u673a\u7533\u8bf7\u7f8e\u533aapple id\u65b9\u6cd5\u3002\n\u6709\u4e86\u5ba2\u6237\u7aef\u540e\u6211\u4eec\u9700\u8981\u81ea\u5df1\u642d\u5efa\u670d\u52a1\u5668\u521b\u5efass/ssr\u8d26\u53f7\u624d\u80fd\u7ffb\u5899\u3002 \n\u642d\u5efa\u6559\u7a0b\n\u4e0d\u6015\u88ab\u5c01ip\uff0c\u56e0\u4e3avultr\u662f\u6298\u7b97\u6210\u5c0f\u65f6\u8ba1\u8d39\uff0c\u4e14\u53ef\u4ee5\u968f\u65f6\u5220\u9664\u548c\u5f00\u901a\u670d\u52a1\u5668\uff0c\u65b0\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\u3002\u65b0\u5f00\u670d\u52a1\u5668\u53ea\u9700\u89810.01\u7f8e\u5143\uff0c\u5373\u4f7f\u4f60\u8fd0\u6c14\u975e\u5e38\u4e0d\u597d\uff0c\u5f00\u4e8610\u53f0\u670d\u52a1\u5668\u624d\u83b7\u5f97\u6ca1\u6709\u88ab\u5899\u7684ip\uff0c\u603b\u521b\u5efa\u670d\u52a1\u5668\u6210\u672c\u4e5f\u53ea\u67090.1\u7f8e\u5143\uff0c\u4e0d\u52301\u5757\u94b1\u3002\n\u6559\u7a0b\u5f88\u7b80\u5355\uff0c\u6574\u4e2a\u6559\u7a0b\u5206\u4e09\u6b65\uff1a\n\u7b2c\u4e00\u6b65\uff1a\u8d2d\u4e70VPS\u670d\u52a1\u5668\n\u7b2c\u4e8c\u6b65\uff1a\u4e00\u952e\u90e8\u7f72VPS\u670d\u52a1\u5668\n\u7b2c\u4e09\u6b65\uff1a\u4e00\u952e\u52a0\u901fVPS\u670d\u52a1\u5668 (centos6\u7cfb\u7edf\u9009\u62e9\u9510\u901f\u52a0\u901f\uff0ccenots7\u9009\u62e9bbr\u52a0\u901f)\n\n\u7b2c\u4e00\u6b65\uff1a\u8d2d\u4e70VPS\u670d\u52a1\u5668\nVPS\u670d\u52a1\u5668\u9700\u8981\u9009\u62e9\u56fd\u5916\u7684\uff0c\u9996\u9009\u56fd\u9645\u77e5\u540d\u7684vultr\uff0c\u901f\u5ea6\u4e0d\u9519\u3001\u7a33\u5b9a\u4e14\u6027\u4ef7\u6bd4\u9ad8\uff0c\u6309\u5c0f\u65f6\u8ba1\u8d39\uff0c\u80fd\u591f\u968f\u65f6\u5f00\u901a\u548c\u5220\u9664\u670d\u52a1\u5668\uff0c\u65b0\u670d\u52a1\u5668\u5373\u662f\u65b0ip\u3002\nvultr\u6ce8\u518c\u5730\u5740\uff1a https://www.vultr.com/?ref=7777564-4F  \uff08vultr\u57282019\u5e741\u6708\u7684\u6700\u65b0\u6d3b\u52a8\uff0c\u9488\u5bf9\u65b0\u7528\u6237\uff0c\u76f4\u63a5\u900150\u7f8e\u5143\uff01\u5168\u740315\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u53ef\u9009\uff0cKVM\u6846\u67b6) \n\n\u867d\u7136\u662f\u82f1\u6587\u754c\u9762\uff0c\u4f46\u662f\u73b0\u5728\u7684\u6d4f\u89c8\u5668\u90fd\u6709\u7f51\u9875\u7ffb\u8bd1\u529f\u80fd\uff0c\u9f20\u6807\u70b9\u51fb\u53f3\u952e\uff0c\u9009\u62e9\u7f51\u9875\u7ffb\u8bd1\u5373\u53ef\u7ffb\u8bd1\u6210\u4e2d\u6587\u3002\n\u6ce8\u518c\u5e76\u90ae\u4ef6\u6fc0\u6d3b\u8d26\u53f7\uff0c\u5145\u503c\u540e\u5373\u53ef\u8d2d\u4e70\u670d\u52a1\u5668\u3002\u5145\u503c\u65b9\u5f0f\u662f\u652f\u4ed8\u5b9d\u6216paypal\uff0c\u4f7f\u7528paypal\u6709\u94f6\u884c\u5361\uff08\u5305\u62ec\u4fe1\u7528\u5361\uff09\u5373\u53ef\u3002paypal\u6ce8\u518c\u5730\u5740\uff1ahttps://www.paypal.com \uff08paypal\u662f\u56fd\u9645\u77e5\u540d\u7684\u7b2c\u4e09\u65b9\u652f\u4ed8\u670d\u52a1\u5546\uff0c\u6ce8\u518c\u4e00\u4e0b\u8d26\u53f7\uff0c\u7ed1\u5b9a\u94f6\u884c\u5361\u5373\u53ef\u8d2d\u4e70\u56fd\u5916\u5546\u54c1\uff09\n2.5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a\u5355\u6838   512M\u5185\u5b58  20G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    500G\u6d41\u91cf/\u6708   (\u4ec5ipv6)\n3.5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a\u5355\u6838   512M\u5185\u5b58  20G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    500G\u6d41\u91cf/\u6708   (\u63a8\u8350)\n5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a  \u5355\u6838   1G\u5185\u5b58    25G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    1000G\u6d41\u91cf/\u6708  \n10\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a \u5355\u6838   2G\u5185\u5b58    40G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    2000G\u6d41\u91cf/\u6708  \n20\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a 2cpu   4G\u5185\u5b58   60G SSD\u786c\u76d8    \u5e26\u5bbd\u5cf0\u503c100M    3000G\u6d41\u91cf/\u6708  \n40\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a 4cpu   8G\u5185\u5b58   100G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    4000G\u6d41\u91cf/\u6708  \n\u6ce8\u610f\uff1avultr\u5b98\u65b9\u8fdb\u884c\u4e86\u8c03\u6574\uff0c2.5\u7f8e\u5143\u5957\u9910\u53ea\u63d0\u4f9bipv6\uff0c\u5982\u679c\u4f60\u7528\u4e0d\u4e86ipv6\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4e703.5\u7f8e\u5143\u7684\u5957\u9910\u3002\nvultr\u5b9e\u9645\u4e0a\u662f\u6298\u7b97\u6210\u5c0f\u65f6\u6765\u8ba1\u8d39\u7684\uff0c\u6bd4\u5982\u670d\u52a1\u5668\u662f5\u7f8e\u51431\u4e2a\u6708\uff0c\u90a3\u4e48\u6bcf\u5c0f\u65f6\u6536\u8d39\u4e3a5/30/24=0.0069\u7f8e\u5143 \u4f1a\u81ea\u52a8\u4ece\u8d26\u53f7\u4e2d\u6263\u8d39\uff0c\u53ea\u8981\u4fdd\u8bc1\u8d26\u53f7\u6709\u94b1\u5373\u53ef\u3002\u5982\u679c\u4f60\u90e8\u7f72\u7684\u670d\u52a1\u5668\u5b9e\u6d4b\u540e\u901f\u5ea6\u4e0d\u7406\u60f3\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u5220\u6389\uff08destroy\uff09\uff0c\u91cd\u65b0\u6362\u4e2a\u5730\u533a\u7684\u670d\u52a1\u5668\u6765\u90e8\u7f72\uff0c\u65b9\u4fbf\u4e14\u5b9e\u7528\u3002\u56e0\u4e3a\u65b0\u7684\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\uff0c\u6240\u4ee5\u5f53ip\u88ab\u5899\u65f6\u8fd9\u4e2a\u65b9\u6cd5\u5f88\u6709\u7528\u3002\u5f53ip\u88ab\u5899\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u65b0\u5f00\u7684\u670d\u52a1\u5668ip\u548c\u539f\u5148\u7684ip\u4e0d\u4e00\u6837\uff0c\u5148\u5f00\u65b0\u670d\u52a1\u5668\uff0c\u5f00\u597d\u540e\u518d\u5220\u9664\u65e7\u670d\u52a1\u5668\u5373\u53ef\u3002\n\u8ba1\u8d39\u4ece\u4f60\u5f00\u901a\u670d\u52a1\u5668\u5f00\u59cb\u7b97\u7684\uff0c\u4e0d\u7ba1\u4f60\u6709\u6ca1\u6709\u4f7f\u7528\uff0c\u5373\u4f7f\u670d\u52a1\u5668\u5904\u4e8e\u5173\u673a\u72b6\u6001\u4ecd\u7136\u4f1a\u8ba1\u8d39\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5f00\u901a\u670d\u52a1\u5668\u5c31\u4e0d\u7b97\u3002\u6bd4\u5982\u4f60\u4eca\u5929\u65e9\u4e0a\u5f00\u901a\u4e86\u670d\u52a1\u5668\uff0c\u4f46\u4f60\u6709\u4e8b\u60c5\uff0c\u665a\u4e0a\u624d\u90e8\u7f72\uff0c\u90a3\u4e48\u8fd9\u6bb5\u65f6\u95f4\u662f\u4f1a\u8ba1\u8d39\u7684\u3002\u540c\u7406\uff0c\u5982\u679c\u4f60\u65e9\u4e0a\u5220\u6389\u670d\u52a1\u5668\uff0c\u7b2c\u4e8c\u5929\u624d\u5f00\u901a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u8fd9\u6bb5\u65f6\u95f4\u662f\u4e0d\u4f1a\u8ba1\u8d39\u7684\u3002\u5728\u8d26\u53f7\u7684Billing\u9009\u9879\u91cc\u53ef\u4ee5\u770b\u5230\u8d26\u6237\u4f59\u989d\u3002\n\u6e29\u99a8\u63d0\u9192\uff1a\u540c\u6837\u7684\u670d\u52a1\u5668\u4f4d\u7f6e\uff0c\u4e0d\u540c\u7684\u5bbd\u5e26\u7c7b\u578b\u548c\u5730\u533a\u6240\u642d\u5efa\u7684\u8d26\u53f7\u7684\u7ffb\u5899\u901f\u5ea6\u4f1a\u4e0d\u540c\uff0c\u8fd9\u4e0e\u4e2d\u56fd\u7535\u4fe1\u3001\u4e2d\u56fd\u8054\u901a\u3001\u4e2d\u56fd\u79fb\u52a8\u56fd\u9645\u51fa\u53e3\u5e26\u5bbd\u548c\u7ebf\u8def\u4e0d\u540c\u6709\u5173\uff0c\u6240\u4ee5\u4ee5\u5b9e\u6d4b\u4e3a\u51c6\u3002\u53ef\u4ee5\u5148\u9009\u5b9a\u4e00\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u6765\u6309\u7167\u6559\u7a0b\u8fdb\u884c\u642d\u5efa\uff0c\u719f\u6089\u642d\u5efa\u65b9\u6cd5\uff0c\u5f53\u8d26\u53f7\u642d\u5efa\u5b8c\u6210\u5e76\u8fdb\u884c\u4e86bbr\u52a0\u901f\u540e\uff0c\u6d4b\u8bd5\u4e0b\u901f\u5ea6\u81ea\u5df1\u662f\u5426\u6ee1\u610f\uff0c\u5982\u679c\u6ee1\u610f\u90a3\u5c31\u7528\u8fd9\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u7684\u670d\u52a1\u5668\u3002\u5982\u679c\u901f\u5ea6\u4e0d\u592a\u6ee1\u610f\uff0c\u5c31\u4e00\u6b21\u6027\u5f00\u51e0\u53f0\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4f4d\u7f6e\u7684\u670d\u52a1\u5668\uff0c\u7136\u540e\u6309\u7167\u540c\u6837\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u642d\u5efa\u5e76\u6d4b\u8bd5\uff0c\u9009\u62e9\u6700\u4f18\u7684\uff0c\u4e4b\u540e\u628a\u5176\u5b83\u7684\u670d\u52a1\u5668\u5220\u6389\uff0c\u6309\u5c0f\u65f6\u8ba1\u8d39\u6d4b\u8bd5\u6210\u672c\u53ef\u4ee5\u5ffd\u7565\u3002\n\u8d26\u53f7\u5145\u503c\u5982\u56fe\uff1a\n\n\n\u5f00\u901a\u670d\u52a1\u5668\u6b65\u9aa4\u5982\u56fe\uff1a\n\n\n\n\u70b9\u51fb\u56fe\u4e2d\u7684CentOS\u51e0\u4e2a\u5b57\uff0c\u4f1a\u5f39\u51facentos6\uff0c\u7136\u540e\u9009\u4e2dcentos6\uff01\n\n\u63a5\u4e0b\u6765\u8fd9\u4e00\u6b65\u662f\u5f00\u542fvps\u7684ipv6 ip\uff0c\u9009\u586b\u9879\u3002\u5982\u679c\u4f60\u7684\u7535\u8111\u7cfb\u7edf\u53ef\u4ee5\u7528ipv6\uff0c\u90a3\u4e48\u53ef\u4ee5\u52fe\u9009\u6b64\u9879\u3002\u5927\u591a\u6570\u7528\u6237\u6ca1\u6709\u8fd9\u4e2a\u9700\u6c42\uff0c\u4f46\u6709\u4e00\u4e9b\u7528\u6237\u53ef\u80fd\u4f1a\u7528\u5230\uff0c\u6240\u4ee5\u8865\u5145\u4e86\u8fd9\u90e8\u5206\u5185\u5bb9\u3002\n\n\n\u5b8c\u6210\u8d2d\u4e70\u540e\uff0c\u627e\u5230\u7cfb\u7edf\u7684\u5bc6\u7801\u8bb0\u4e0b\u6765\uff0c\u90e8\u7f72\u670d\u52a1\u5668\u65f6\u9700\u8981\u7528\u5230\u3002vps\u7cfb\u7edf\uff08\u63a8\u8350centos6\uff09\u7684\u5bc6\u7801\u83b7\u53d6\u65b9\u6cd5\u5982\u4e0b\u56fe\uff1a\n\n\n\n\u5982\u679c\u4f60\u5f00\u542f\u4e86vps\u7684ipv6\uff0c\u90a3\u4e48\u5728\u540e\u53f0\u7684settings\u9009\u9879\u53ef\u4ee5\u627e\u5230\u670d\u52a1\u5668\u7684ipv6 ip\u3002\u5728\u90e8\u7f72SSR\u8d26\u53f7\u65f6\uff0c\u4f60\u7528ipv6 ip\u5c31\u884c\u3002\u6574\u4e2a\u90e8\u7f72\u53ca\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u8bb0\u5f97\u628a\u7535\u8111\u7cfb\u7edf\u5f00\u542fipv6\u5594\u3002\n\n\n\u5220\u6389\u670d\u52a1\u5668\u6b65\u9aa4\u5982\u4e0b\u56fe\uff1a\n\n\n\n\n\u7b2c\u4e8c\u6b65\uff1a\u90e8\u7f72VPS\u670d\u52a1\u5668\n\u8d2d\u4e70\u670d\u52a1\u5668\u540e\uff0c\u9700\u8981\u90e8\u7f72\u4e00\u4e0b\u3002\u56e0\u4e3a\u4f60\u4e70\u7684\u662f\u865a\u62df\u4e1c\u897f\uff0c\u800c\u4e14\u53c8\u8fdc\u5728\u56fd\u5916\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53ebXshell\u7684\u8f6f\u4ef6\u6765\u8fdc\u7a0b\u90e8\u7f72\u3002Xshell windows\u7248\u4e0b\u8f7d\u5730\u5740\uff1a\n\u56fd\u5916\u4e91\u76d81\u4e0b\u8f7d \n\u56fd\u5916\u4e91\u76d82\u4e0b\u8f7d \u63d0\u53d6\u5bc6\u7801\uff1a666\n\u56fd\u5916\u4e91\u76d83\u4e0b\u8f7d \u5bc6\u7801\uff1a123\n\u5982\u679c\u4f60\u662f\u82f9\u679c\u7535\u8111\u64cd\u4f5c\u7cfb\u7edf\uff0c\u66f4\u7b80\u5355\uff0c\u65e0\u9700\u4e0b\u8f7dxshell\uff0c\u7cfb\u7edf\u53ef\u4ee5\u76f4\u63a5\u8fde\u63a5VPS\u3002\u6253\u5f00\u7ec8\u7aef\uff08Terminal\uff09\uff0c\u8f93\u5165ssh root@ip  \u5176\u4e2d\u201cip\u201d\u66ff\u6362\u6210\u4f60VPS\u7684ip, \u6309\u56de\u8f66\u952e\uff0c\u7136\u540e\u590d\u5236\u7c98\u8d34\u5bc6\u7801\uff0c\u6309\u56de\u8f66\u952e\u5373\u53ef\u767b\u5f55\u3002\u7c98\u8d34\u5bc6\u7801\u65f6\u6709\u53ef\u80fd\u4e0d\u663e\u793a\u5bc6\u7801\uff0c\u4f46\u4e0d\u5f71\u54cd\uff0c \u53c2\u8003\u8bbe\u7f6e\u65b9\u6cd5  \u5982\u679c\u4e0d\u80fd\u7528MAC\u81ea\u5e26\u7684\u7ec8\u7aef\u8fde\u63a5\u7684\u8bdd\uff0c\u76f4\u63a5\u7f51\u4e0a\u641c\u201cMAC\u8fde\u63a5SSH\u7684\u8f6f\u4ef6\u201d\uff0c\u6709\u5f88\u591a\uff0c\u7136\u540e\u901a\u8fc7\u8f6f\u4ef6\u6765\u8fde\u63a5vps\u670d\u52a1\u5668\u5c31\u884c\uff0c\u5177\u4f53\u64cd\u4f5c\u65b9\u5f0f\u53c2\u8003windows xshell\u3002\n\n\u90e8\u7f72\u6559\u7a0b\uff1a\n\u4e0b\u8f7dxshell\u8f6f\u4ef6\u5e76\u5b89\u88c5\u540e\uff0c\u6253\u5f00\u8f6f\u4ef6\n\n\u9009\u62e9\u6587\u4ef6\uff0c\u65b0\u5efa\n\n\u968f\u4fbf\u53d6\u4e2a\u540d\u5b57\uff0c\u7136\u540e\u628a\u4f60\u7684\u670d\u52a1\u5668ip\u586b\u4e0a\n\n\u8fde\u63a5\u56fd\u5916ip\u5373\u670d\u52a1\u5668\u65f6\uff0c\u8f6f\u4ef6\u4f1a\u5148\u540e\u63d0\u9192\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u7528\u6237\u540d\u9ed8\u8ba4\u90fd\u662froot\uff0c\u5bc6\u7801\u662f\u4f60\u8d2d\u4e70\u7684\u670d\u52a1\u5668\u7cfb\u7edf\u7684\u5bc6\u7801\u3002\n\u5982\u679cxshell\u8fde\u4e0d\u4e0a\u670d\u52a1\u5668\uff0c\u6ca1\u6709\u5f39\u51fa\u8ba9\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u8f93\u5165\u6846\uff0c\u8868\u660e\u4f60\u5f00\u5230\u7684ip\u662f\u4e00\u4e2a\u88ab\u5899\u7684ip\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u91cd\u65b0\u5f00\u65b0\u7684\u670d\u52a1\u5668\uff0c\u76f4\u5230\u80fd\u7528xshell\u8fde\u4e0a\u4e3a\u6b62\uff0c\u8010\u5fc3\u70b9\u54e6\uff01\u5982\u679c\u540c\u4e00\u4e2a\u5730\u533a\u5f00\u4e86\u591a\u53f0\u670d\u52a1\u5668\u8fd8\u662f\u4e0d\u884c\u7684\u8bdd\uff0c\u53ef\u4ee5\u6362\u5176\u5b83\u5730\u533a\u3002\n\n\n\u8fde\u63a5\u6210\u529f\u540e\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u590d\u5236\u7c98\u8d34\u4ee3\u7801\u90e8\u7f72\u4e86\u3002\nCentOS6/Debian6/Ubuntu14 ShadowsocksR\u4e00\u952e\u90e8\u7f72\u7ba1\u7406\u811a\u672c\uff082018.11.21\u66f4\u65b0\uff09\uff1a\n\u811a\u672c\u4e00\uff082018.11.20\u66f4\u65b0\uff09\n\nyum -y install wget\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n\n\u5907\u7528\u811a\u672c\u4e8c\uff082018.11.21\u66f4\u65b0\uff09\n\u5982\u679c\u4e0a\u9762\u7684\u811a\u672c\u6682\u65f6\u7528\u4e0d\u4e86\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u5907\u7528\u811a\u672c\uff0c\u5907\u7528\u811a\u672c\u6ca1\u6709\u5355\u72ec\u505a\u56fe\u6587\u6559\u7a0b\uff0c\u81ea\u5df1\u6478\u7d22\u4e0b\u5c31\u4f1a\u4e86\u3002\u5907\u7528\u811a\u672c\u5378\u8f7d\u547d\u4ee4\uff1a./shadowsocksR.sh uninstall\n\nyum -y install wget\nwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh\nchmod +x shadowsocksR.sh\n./shadowsocksR.sh 2>&1 | tee shadowsocksR.log\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u4ee3\u7801\u5206\u5272\u7ebf\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\u590d\u5236\u4e0a\u9762\u7684\u811a\u672c\u4e00\u4ee3\u7801\u5230VPS\u670d\u52a1\u5668\u91cc\uff0c\u6309\u56de\u8f66\u952e\uff0c\u811a\u672c\u4f1a\u81ea\u52a8\u5b89\u88c5\uff0c\u4ee5\u540e\u53ea\u9700\u8981\u8fd0\u884c\u8fd9\u4e2a\u5feb\u6377\u547d\u4ee4\u5c31\u53ef\u4ee5\u51fa\u73b0\u4e0b\u56fe\u7684\u754c\u9762\u8fdb\u884c\u8bbe\u7f6e\uff0c\u5feb\u6377\u7ba1\u7406\u547d\u4ee4\u4e3a\uff1abash ssr.sh\n\n\u5982\u4e0a\u56fe\u51fa\u73b0\u7ba1\u7406\u754c\u9762\u540e\uff0c\u8f93\u5165\u6570\u5b571\u6765\u5b89\u88c5SSR\u670d\u52a1\u7aef\u3002\u5982\u679c\u8f93\u51651\u540e\u4e0d\u80fd\u8fdb\u5165\u4e0b\u4e00\u6b65\uff0c\u90a3\u4e48\u8bf7\u9000\u51faxshell\uff0c\u91cd\u65b0\u8fde\u63a5vps\u670d\u52a1\u5668\uff0c\u7136\u540e\u8f93\u5165\u5feb\u6377\u7ba1\u7406\u547d\u4ee4bash ssr.sh \u518d\u5c1d\u8bd5\u3002\n\n\u6839\u636e\u4e0a\u56fe\u63d0\u793a\uff0c\u4f9d\u6b21\u8f93\u5165\u81ea\u5df1\u60f3\u8bbe\u7f6e\u7684\u7aef\u53e3\u548c\u5bc6\u7801 (\u5bc6\u7801\u5efa\u8bae\u7528\u590d\u6742\u70b9\u7684\u5b57\u6bcd\u7ec4\u5408\uff0c\u7aef\u53e3\u53f7\u4e3a40-65535\u4e4b\u95f4\u7684\u6570\u5b57)\uff0c\u56de\u8f66\u952e\u7528\u4e8e\u786e\u8ba4\n\u6ce8\uff1a\u5173\u4e8e\u7aef\u53e3\u7684\u8bbe\u7f6e\uff0c\u603b\u7684\u7f51\u7edc\u603b\u7aef\u53e3\u67096\u4e07\u591a\u4e2a\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u4efb\u610f\u8bbe\u7f6e\u3002\u4f46\u662f\u6709\u7684\u5730\u533a\u9700\u8981\u8bbe\u7f6e\u7279\u6b8a\u7684\u7aef\u53e3\u624d\u6709\u6548\uff0c\u4e00\u4e9b\u7279\u6b8a\u7684\u7aef\u53e3\u6bd4\u598280\u3001143\u3001443\u30011433\u30013306\u30013389\u30018080\u3002\n\n\u5982\u4e0a\u56fe\uff0c\u9009\u62e9\u60f3\u8bbe\u7f6e\u7684\u52a0\u5bc6\u65b9\u5f0f\uff0c\u6bd4\u598210\uff0c\u6309\u56de\u8f66\u952e\u786e\u8ba4\n\u63a5\u4e0b\u6765\u662f\u9009\u62e9\u534f\u8bae\u63d2\u4ef6\uff0c\u5982\u4e0b\u56fe\uff1a\n\n\n\u9009\u62e9\u5e76\u786e\u8ba4\u540e\uff0c\u4f1a\u51fa\u73b0\u4e0a\u56fe\u7684\u754c\u9762\uff0c\u63d0\u793a\u4f60\u662f\u5426\u9009\u62e9\u517c\u5bb9\u539f\u7248\uff0c\u8fd9\u91cc\u7684\u539f\u7248\u6307\u7684\u662fSS\u5ba2\u6237\u7aef\uff08SS\u5ba2\u6237\u7aef\u6ca1\u6709\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u9009\u9879\uff09\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u8fdb\u884c\u9009\u62e9\uff0c\u6f14\u793a\u9009\u62e9y\n\u4e4b\u540e\u8fdb\u884c\u6df7\u6dc6\u63d2\u4ef6\u7684\u8bbe\u7f6e\u3002\n\u6ce8\u610f\uff1a\u5982\u679c\u534f\u8bae\u662forigin\uff0c\u90a3\u4e48\u6df7\u6dc6\u4e5f\u5fc5\u987b\u662fplain\uff1b\u5982\u679c\u534f\u8bae\u4e0d\u662forigin\uff0c\u90a3\u4e48\u6df7\u6dc6\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u3002\u6709\u7684\u5730\u533a\u9700\u8981\u628a\u6df7\u6dc6\u8bbe\u7f6e\u6210plain\u624d\u597d\u7528\u3002\u56e0\u4e3a\u6df7\u6dc6\u4e0d\u603b\u662f\u6709\u6548\u679c\uff0c\u8981\u770b\u5404\u5730\u533a\u7684\u7b56\u7565\uff0c\u6709\u65f6\u5019\u4e0d\u6df7\u6dc6\uff08plain\uff09\u6216\uff08origin\u548cplain\u4e00\u8d77\u4f7f\u7528\uff09\uff0c\u8ba9\u5176\u770b\u8d77\u6765\u50cf\u968f\u673a\u6570\u636e\u66f4\u597d\u3002\uff08\u7279\u522b\u6ce8\u610f\uff1atls 1.2_ticket_auth\u5bb9\u6613\u53d7\u5230\u5e72\u6270\uff01\u8bf7\u9009\u62e9\u9664tls\u5f00\u5934\u4ee5\u5916\u7684\u5176\u5b83\u6df7\u6dc6\uff01\uff01\uff01\uff09 \n\n\u8fdb\u884c\u6df7\u6dc6\u63d2\u4ef6\u7684\u8bbe\u7f6e\u540e\uff0c\u4f1a\u4f9d\u6b21\u63d0\u793a\u4f60\u5bf9\u8bbe\u5907\u6570\u3001\u5355\u7ebf\u7a0b\u9650\u901f\u548c\u7aef\u53e3\u603b\u9650\u901f\u8fdb\u884c\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u503c\u662f\u4e0d\u8fdb\u884c\u9650\u5236\uff0c\u4e2a\u4eba\u4f7f\u7528\u7684\u8bdd\uff0c\u9009\u62e9\u9ed8\u8ba4\u5373\u53ef\uff0c\u5373\u76f4\u63a5\u6572\u56de\u8f66\u952e\u3002\n\u6ce8\u610f\uff1a\u5173\u4e8e\u9650\u5236\u8bbe\u5907\u6570\uff0c\u8fd9\u4e2a\u534f\u8bae\u5fc5\u987b\u662f\u975e\u539f\u7248\u4e14\u4e0d\u517c\u5bb9\u539f\u7248\u624d\u6709\u6548\uff0c\u4e5f\u5c31\u662f\u5fc5\u987b\u4f7f\u7528SSR\u534f\u8bae\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u6709\u6548\uff01\n\n\u4e4b\u540e\u4ee3\u7801\u5c31\u6b63\u5f0f\u81ea\u52a8\u90e8\u7f72\u4e86\uff0c\u5230\u4e0b\u56fe\u6240\u793a\u7684\u4f4d\u7f6e\uff0c\u63d0\u793a\u4f60\u4e0b\u8f7d\u6587\u4ef6\uff0c\u8f93\u5165\uff1ay\n\n\u8010\u5fc3\u7b49\u5f85\u4e00\u4f1a\uff0c\u51fa\u73b0\u4e0b\u9762\u7684\u754c\u9762\u5373\u90e8\u7f72\u5b8c\u6210\uff1a\n\n\n\u6839\u636e\u4e0a\u56fe\u5c31\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u8bbe\u7f6e\u7684SSR\u8d26\u53f7\u4fe1\u606f\uff0c\u5305\u62ecIP\u3001\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u63d2\u4ef6\u3001\u6df7\u6dc6\u63d2\u4ef6\uff0c\u8fd9\u4e9b\u4fe1\u606f\u9700\u8981\u586b\u5165\u4f60\u7684SSR\u5ba2\u6237\u7aef\u3002\u5982\u679c\u4e4b\u540e\u60f3\u4fee\u6539\u8d26\u53f7\u4fe1\u606f\uff0c\u76f4\u63a5\u8f93\u5165\u5feb\u6377\u7ba1\u7406\u547d\u4ee4\uff1abash ssr.sh \u8fdb\u5165\u7ba1\u7406\u754c\u9762\uff0c\u9009\u62e9\u76f8\u5e94\u7684\u6570\u5b57\u6765\u8fdb\u884c\u4e00\u952e\u4fee\u6539\u3002\u4f8b\u5982\uff1a\n\n\n\u811a\u672c\u6f14\u793a\u7ed3\u675f\u3002\n\u6b64\u811a\u672c\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u90e8\u7f72\u4e00\u6b21\u5373\u53ef\u3002\u6700\u540e\u53ef\u4ee5\u91cd\u542f\u670d\u52a1\u5668\u786e\u4fdd\u90e8\u7f72\u751f\u6548\uff08\u4e00\u822c\u60c5\u51b5\u4e0d\u91cd\u542f\u4e5f\u53ef\u4ee5\uff09\u3002\u91cd\u542f\u9700\u8981\u5728\u547d\u4ee4\u680f\u91cc\u8f93\u5165reboot \uff0c\u8f93\u5165\u547d\u4ee4\u540e\u7a0d\u5fae\u7b49\u5f85\u4e00\u4f1a\u670d\u52a1\u5668\u5c31\u4f1a\u81ea\u52a8\u91cd\u542f\uff0c\u4e00\u822c\u91cd\u542f\u8fc7\u7a0b\u9700\u89812\uff5e5\u5206\u949f\uff0c\u91cd\u542f\u8fc7\u7a0b\u4e2dXshell\u4f1a\u81ea\u52a8\u65ad\u5f00\u8fde\u63a5\uff0c\u7b49VPS\u91cd\u542f\u597d\u540e\u624d\u53ef\u4ee5\u7528Xshell\u8f6f\u4ef6\u8fdb\u884c\u8fde\u63a5\u3002\u5982\u679c\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u5361\u5728\u67d0\u4e2a\u4f4d\u7f6e\u8d85\u8fc710\u5206\u949f\uff0c\u53ef\u4ee5\u7528xshell\u8f6f\u4ef6\u65ad\u5f00\uff0c\u7136\u540e\u91cd\u65b0\u8fde\u63a5\u4f60\u7684ip\uff0c\u518d\u590d\u5236\u4ee3\u7801\u8fdb\u884c\u90e8\u7f72\u3002\n\n\u7b2c\u4e09\u6b65\uff1a\u4e00\u952e\u52a0\u901fVPS\u670d\u52a1\u5668\n2018\u5e7412\u67089\u65e5\u589e\u52a0\u7834\u89e3\u7248\u9510\u901f\u52a0\u901f\u6559\u7a0b\u3002\n\u3010\u7834\u89e3\u7248\u9510\u901f\u52a0\u901f\u6559\u7a0b\u3011\n\u6b64\u52a0\u901f\u6559\u7a0b\u4e3a\u7834\u89e3\u7248\u9510\u901f\u52a0\u901f,Vultr\u7684\u670d\u52a1\u5668centos6\u7cfb\u7edf\u5b98\u65b9\u8fdb\u884c\u4e86\u66f4\u65b0\uff0c\u5bfc\u81f4\u76ee\u524d\u4e0d\u652f\u6301BBR\u7684\u90e8\u7f72\uff0c\u4f46\u9510\u901f\u5e94\u8be5\u662f\u53ef\u4ee5\u90e8\u7f72\u7684\uff0c\u6545\u589e\u52a0\u4e86\u6b64\u90e8\u7f72\u811a\u672c\uff0c\u52a0\u901f\u540e\u5bf9\u901f\u5ea6\u7684\u63d0\u5347\u5f88\u660e\u663e\uff0c\u6240\u4ee5\u63a8\u8350\u90e8\u7f72\u52a0\u901f\u811a\u672c\u3002\u8be5\u52a0\u901f\u65b9\u6cd5\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u90e8\u7f72\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\n\u7b2c\u4e00\u6b65\uff0c\u5148\u66f4\u6362\u670d\u52a1\u5668\u5185\u6838\uff1a\nyum -y install wget\nwget --no-check-certificate https://blog.asuhu.com/sh/ruisu.sh && bash ruisu.sh\n\n\u4e0d\u52a8\u7684\u65f6\u5019\u6572\u56de\u8f66\u952e\uff0c\u5728\u4e0a\u56fe\u65f6\u9700\u8981\u591a\u7b49\u4e00\u4f1a\u513f\u3002\n\n\u51fa\u73b0\u4e0a\u56fe\u65f6\u8868\u793a\u5df2\u6210\u529f\u66ff\u6362\u5185\u6838\u5e76\u670d\u52a1\u5668\u81ea\u52a8\u91cd\u542f\u3002\n\u5b8c\u6210\u540e\u4f1a\u91cd\u542f\uff0c2\u5206\u949f\u540e\u91cd\u65b0\u8fde\u63a5\u670d\u52a1\u5668\uff0c\u8fde\u4e0a\u540e\u5f00\u59cb\u7b2c\u4e8c\u6b65\u7684\u64cd\u4f5c\u3002\n\u7b2c\u4e8c\u6b65\uff0c\u4e00\u952e\u5b89\u88c5\u9510\u901f\uff1a\nwget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh && bash serverspeeder-all.sh\n\u5378\u8f7d\u52a0\u901f\u4ee3\u7801\u547d\u4ee4\u4e3a\uff1a\nchattr -i /serverspeeder/etc/apx* && /serverspeeder/bin/serverSpeeder.sh uninstall -f\n\u4f46\u6709\u4e9b\u5185\u6838\u662f\u4e0d\u9002\u5408\u7684\uff0c\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u9700\u8981\u624b\u52a8\u9009\u62e9\u63a8\u8350\u7684\uff0c\u5f53\u90e8\u7f72\u65f6\u51fa\u73b0\u4ee5\u4e0b\u5b57\u6837\uff1a\n\n\u63d0\u793a\u6ca1\u6709\u5b8c\u5168\u5339\u914d\u7684\u5185\u6838,\u968f\u4fbf\u9009\u4e00\u4e2a\u5185\u6838\u5c31\u884c,\u6309\u7167\u63d0\u793a\u6765\u8f93\u5165\u6570\u5b57,\u6309\u56de\u8f66\u952e\u5373\u53ef\n\u9510\u901f\u5b89\u88c5\u6210\u529f\u6807\u5fd7\u5982\u4e0b\uff1a\n\n\u51fa\u73b0running\u5b57\u6837\u5373\u53ef!\n\n\u3010\u8c37\u6b4cBBR\u52a0\u901f\u6559\u7a0b\u3011\nvultr\u670d\u52a1\u5668\u7684centos6\u4e0d\u652f\u6301bbr\u52a0\u901f\uff0c\u4f46centos7\u7cfb\u7edf\u652f\u6301bbr\u52a0\u901f\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u7528bbr\u52a0\u901f\u6559\u7a0b\uff0cvps\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u9009\u62e9centos7\u3002\nyum -y install wget\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\nchmod +x bbr.sh\n./bbr.sh\n\u628a\u4e0a\u9762\u6574\u4e2a\u4ee3\u7801\u590d\u5236\u540e\u7c98\u8d34\u8fdb\u53bb\uff0c\u4e0d\u52a8\u7684\u65f6\u5019\u6309\u56de\u8f66\uff0c\u7136\u540e\u8010\u5fc3\u7b49\u5f85\uff0c\u6700\u540e\u91cd\u542fvps\u670d\u52a1\u5668\u5373\u53ef\u3002\n\u6f14\u793a\u5f00\u59cb\uff0c\u5982\u56fe\uff1a\n\u590d\u5236\u5e76\u7c98\u8d34\u4ee3\u7801\u540e\uff0c\u6309\u56de\u8f66\u952e\u786e\u8ba4\n\n\u5982\u4e0b\u56fe\u63d0\u793a\uff0c\u6309\u4efb\u610f\u952e\u7ee7\u7eed\u90e8\u7f72\n\n\n\u90e8\u7f72\u5230\u4e0a\u56fe\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u7b49\u5f853\uff5e6\u5206\u949f\n\n\u6700\u540e\u8f93\u5165y\u91cd\u542f\u670d\u52a1\u5668\uff0c\u5982\u679c\u8f93\u5165y\u63d0\u793acommand not found \uff0c\u63a5\u7740\u8f93\u5165reboot\u6765\u91cd\u542f\u670d\u52a1\u5668\uff0c\u786e\u4fdd\u52a0\u901f\u751f\u6548\uff0cbbr\u52a0\u901f\u811a\u672c\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u88c5\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\n\u670d\u52a1\u5668\u91cd\u542f\u6210\u529f\u5e76\u91cd\u65b0\u8fde\u63a5\u670d\u52a1\u5668\u540e\uff0c\u8f93\u5165\u547d\u4ee4lsmod | grep bbr  \u5982\u679c\u51fa\u73b0tcp_bbr\u5b57\u6837\u8868\u793abbr\u5df2\u5b89\u88c5\u5e76\u542f\u52a8\u6210\u529f\u3002\u5982\u56fe\uff1a\n\n\u6ce8\u610f\uff1a\u6839\u636e\u53cd\u9988\uff0c\u5c11\u90e8\u5206\u4eba\u5b89\u88c5bbr\u811a\u672c\u5e76\u91cd\u542f\u540e\uff0c\u51e0\u5206\u949f\u8fc7\u53bb\u4e86\uff0c\u53d1\u73b0xshell\u65e0\u6cd5\u8fde\u63a5\u670d\u52a1\u5668\u4e14\u670d\u52a1\u5668ip\u65e0\u6cd5ping\u901a\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\uff1a\u5f00\u65b0\u670d\u52a1\u5668\u6216\u8005\u91cd\u88c5\u7cfb\u7edf\uff0c\u7136\u540e\u5148\u5b89\u88c5bbr\u811a\u672c\u518d\u5b89\u88c5ssr\u811a\u672c\uff0c\u6216\u8005\u6539\u7528\u9510\u901f\u52a0\u901f\u811a\u672c\u3002\n\n\u8d2d\u4e70vps\u670d\u52a1\u5668\u540e\uff0cip\u6709\u4e86\uff0c\u901a\u8fc7\u90e8\u7f72\uff0c\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u548c\u6df7\u6dc6\u4e5f\u6709\u4e86\uff0c\u6700\u540e\u5c06\u8fd9\u4e9b\u4fe1\u606f\u586b\u5165SSR\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u7ffb\u5899\u5566\u3002\n\u6709\u4e86\u8d26\u53f7\u540e\uff0c\u6253\u5f00SSR\u5ba2\u6237\u7aef\uff0c\u586b\u4e0a\u4fe1\u606f\uff0c\u8fd9\u91cc\u4ee5windows\u7248\u7684SSR\u5ba2\u6237\u7aef\u4e3a\u4f8b\u5b50\uff1a\n\n\u5728\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u586b\u4e0a\u670d\u52a1\u5668ip\u3001\u670d\u52a1\u5668\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u548c\u6df7\u6dc6\uff0c\u6700\u540e\u5c06\u6d4f\u89c8\u5668\u7684\u4ee3\u7406\u8bbe\u7f6e\u4e3a\uff08http\uff09127.0.0.1\u548c1080\u5373\u53ef\u3002\u8d26\u53f7\u7684\u7aef\u53e3\u53f7\u5c31\u662f\u4f60\u81ea\u5df1\u8bbe\u7f6e\u7684\uff0c\u800c\u8981\u4e0a\u7f51\u7684\u6d4f\u89c8\u5668\u7684\u7aef\u53e3\u53f7\u662f1080\uff0c\u56fa\u5b9a\u7684\uff0c\u8c37\u6b4c\u6d4f\u89c8\u5668\u53ef\u4ee5\u901a\u8fc7 SwitchyOmega \u63d2\u4ef6\u6765\u8bbe\u7f6e\u3002\n\u542f\u52a8SSR\u5ba2\u6237\u7aef\u540e\uff0c\u53f3\u952eSSR\u5ba2\u6237\u7aef\u56fe\u6807\uff0c\u9009\u62e9\u7b2c\u4e00\u4e2a\u201c\u7cfb\u7edf\u4ee3\u7406\u6a21\u5f0f\u201d\uff0c\u91cc\u9762\u67093\u4e2a\u5b50\u9009\u9879\uff0c\u9009\u62e9\"\u5168\u5c40\u6a21\u5f0f\u201c\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u7528\u6d4f\u89c8\u5668\u8bbe\u7f6e\u597d\u4e86\u7684\u4ee3\u7406\u6a21\u5f0f\uff08http\uff09127.0.0.1\u548c1080\u7ffb\u5899\uff0c\u6b64\u6a21\u5f0f\u4e0b\u6240\u6709\u7684\u7f51\u7ad9\u90fd\u4f1a\u8d70SSR\u4ee3\u7406\u3002\uff08\u9002\u5408\u65b0\u624b\uff09\n\n\n\u5e38\u89c1\u95ee\u9898\u53c2\u8003\u89e3\u51b3\u65b9\u6cd5\uff1a\n1\u3001\u7528\u4e86\u4e00\u6bb5\u65f6\u95f4\u53d1\u73b0ssr\u8d26\u53f7\u7528\u4e0d\u4e86\u4e86\n\u9996\u5148ping\u4e00\u4e0b\u81ea\u5df1\u7684ip\uff0c\u770b\u770b\u80fd\u4e0d\u80fdping\u7684\u901a\uff0cping\u4e0d\u901a\u90a3\u4e48\u5c31\u662fip\u88ab\u5899\u4e86\uff0cip\u88ab\u5899\u65f6\uff0cxshell\u4e5f\u4f1a\u8fde\u63a5\u4e0d\u4e0a\u670d\u52a1\u5668\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u91cd\u65b0\u90e8\u7f72\u4e00\u4e2a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u65b0\u7684\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\u3002\u5173\u4e8e\u600e\u4e48ping ip\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\uff0c\u6216\u8005\u7528xshell\u8f6f\u4ef6\u8fde\u63a5\u670d\u52a1\u5668\u6765\u5224\u65ad\uff0c\u8fde\u4e0d\u4e0a\u5373\u662f\u88ab\u5899\u4e86\u3002vultr\u5f00\u901a\u548c\u5220\u9664\u670d\u52a1\u5668\u975e\u5e38\u65b9\u4fbf\uff0c\u65b0\u670d\u52a1\u5668\u5373\u65b0ip\uff0c\u5927\u591a\u6570vps\u670d\u52a1\u5546\u90fd\u6ca1\u6709\u8fd9\u6837\u7684\u670d\u52a1\uff0c\u4e00\u822c\u7684vps\u670d\u52a1\u5546\u53ef\u80fd\u4f1a\u63d0\u4f9b\u514d\u8d39\u66f4\u63621\u6b21ip\u7684\u670d\u52a1\u3002\n2\u3001\u521a\u642d\u5efa\u597d\u7684ssr\u8d26\u53f7\uff0cip\u80fdping\u901a\uff0c\u4f46\u662f\u8fd8\u662f\u7528\u4e0d\u4e86\n\u9996\u9009\u6392\u9664\u6740\u6bd2\u8f6f\u4ef6\u7684\u5e72\u6270\uff0c\u5c24\u5176\u662f\u56fd\u4ea7\u6740\u6bd2\u8f6f\u4ef6\uff0c\u6bd4\u5982360\u5b89\u5168\u536b\u751f\u3001360\u6740\u6bd2\u8f6f\u4ef6\u3001\u817e\u8baf\u7ba1\u5bb6\u3001\u91d1\u5c71\u536b\u751f\u7b49\u3002\u8fd9\u4e9b\u4e1c\u897f\u5f88\u5bb9\u6613\u5e72\u6270\u7ffb\u5899\u4e0a\u7f51\uff0c\u5982\u679c\u4f60\u7684\u7535\u8111\u5b89\u88c5\u4e86\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u5efa\u8bae\u81f3\u5c11\u7ffb\u5899\u65f6\u522b\u7528\uff0c\u6700\u597d\u5378\u8f7d\u3002\u5176\u6b21\uff0c\u68c0\u67e5\u4e0bSSR\u4fe1\u606f\u662f\u5426\u586b\u5199\u6b63\u786e\u3002\u6d4f\u89c8\u5668\u7684\u4ee3\u7406\u65b9\u5f0f\u662f\u5426\u662fssr\u4ee3\u7406\uff0c\u5373\uff08HTTP\uff09127.0.0.1 \u548c1080\u3002\u5982\u679c\u4ee5\u4e0a\u6761\u4ef6\u90fd\u6392\u9664\uff0c\u8fd8\u662f\u7528\u4e0d\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u66f4\u6362\u7aef\u53e3\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u3001\u6df7\u6dc6\uff0c\u6216\u8005\u66f4\u6362\u670d\u52a1\u5668\u4f4d\u7f6e\u3002\u53e6\u5916\uff0c\u5982\u679c\u4f60\u7684vps\u670d\u52a1\u5668\u914d\u7f6e\u7684\u662fSSR\u8d26\u53f7\uff0c\u5373\u6709\u534f\u8bae\u548c\u6df7\u6dc6\u4e14\u6ca1\u6709\u517c\u5bb9\u539f\u7248(SS\u7248\uff09\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u4f7f\u7528SSSR\u5ba2\u6237\u7aef\u6765\u4f7f\u7528\u8d26\u53f7\uff0c\u56e0\u4e3aSS\u5ba2\u6237\u7aef\u6ca1\u6709\u586b\u5199\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u9009\u9879\u3002\n3\u3001\u6709\u7684\u5730\u533a\u9700\u8981\u628a\u6df7\u6dc6\u53c2\u6570\u8bbe\u7f6e\u6210plain\u624d\u597d\u7528\u3002\u56e0\u4e3a\u6df7\u6dc6\u4e0d\u603b\u662f\u6709\u6548\u679c\uff0c\u8981\u770b\u5404\u5730\u533a\u7684\u7b56\u7565\uff0c\u6709\u65f6\u5019\u4e0d\u6df7\u6dc6\uff08plain\uff09\u8ba9\u5176\u770b\u8d77\u6765\u50cf\u968f\u673a\u6570\u636e\u66f4\u597d\u3002\n4\u3001\u7535\u8111\u80fd\u7528\u4f46\u624b\u673a\u7528\u4e0d\u4e86\n\u5982\u679c\u4f60\u7684\u624b\u673a\u7528\u7684\u662fSS\u5ba2\u6237\u7aef\uff0cSS\u5ba2\u6237\u7aef\u6ca1\u6709\u586b\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u5730\u65b9\uff0c\u5982\u679c\u4f60\u90e8\u7f72\u7684\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u65f6\u5019\u6ca1\u6709\u9009\u62e9\u517c\u5bb9\u539f\u7248\uff08SS\u7248\uff09\uff0c\u56e0\u6b64\u624b\u673a\u662f\u7528\u4e0d\u4e86\u7684\u3002\u8fd9\u4e2a\u65f6\u5019\u4f60\u628a\u534f\u8bae\u5f04\u6210\u517c\u5bb9\u539f\u7248\u3001\u6df7\u6dc6\u4e5f\u8bbe\u7f6e\u6210\u517c\u5bb9\u539f\u7248\u5373\u53ef\u3002\u6216\u8005\u76f4\u63a5\u5c06\u534f\u8bae\u8bbe\u7f6e\u6210origin\u4e14\u6df7\u6dc6\u8bbe\u7f6e\u6210plain\u3002\n5\u3001vps\u7684\u670d\u52a1\u5668\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u8981\u7528\u7684\u592a\u9ad8\uff0c\u592a\u9ad8\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7cfb\u7edf\u7684\u9632\u706b\u5899\u95ee\u9898\u5bfc\u81f4\u642d\u5efa\u7684SSR\u8d26\u53f7\u8fde\u4e0d\u4e0a\u3002\u5982\u679c\u67d0\u4e2a\u7cfb\u7edf\u4e0d\u597d\u7528\uff0c\u53ef\u4ee5\u9009\u62e9\u5176\u5b83\u7684\u7cfb\u7edf\u6765\u5c1d\u8bd5\u3002\n6\u3001vultr\u670d\u52a1\u5546\u63d0\u4f9b\u7684vps\u670d\u52a1\u5668\u662f\u5355\u5411\u6d41\u91cf\u8ba1\u7b97\uff0c\u6709\u7684vps\u670d\u52a1\u5546\u662f\u53cc\u5411\u6d41\u91cf\u8ba1\u7b97\uff0c\u5355\u5411\u6d41\u91cf\u8ba1\u7b97\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u66f4\u5b9e\u60e0\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u5728vps\u670d\u52a1\u5668\u4e0a\u90e8\u7f72SSR\u670d\u52a1\u7aef\u540e\uff0c\u518d\u7528SSR\u5ba2\u6237\u7aef\u7ffb\u5899\uff0c\u6240\u4ee5SSR\u670d\u52a1\u7aef\u5c31\u76f8\u5f53\u4e8e\u4e2d\u8f6c\uff0c\u6bd4\u5982\u6211\u4eec\u770b\u4e00\u4e2a\u89c6\u9891\uff0c\u5fc5\u7136\u4f1a\u4ea7\u751f\u6d41\u91cf\uff0c\u5047\u5982\u6d88\u8017\u6d41\u91cf80M\uff0c\u90a3\u4e48VPS\u670d\u52a1\u5668\u4f1a\u4ea7\u751f\u4e0a\u4f2080M\u548c\u4e0b\u8f7d80M\u6d41\u91cf\uff0cvultr\u670d\u52a1\u5546\u53ea\u8ba1\u7b97\u5355\u5411\u768480M\u6d41\u91cf\u3002\u5982\u679c\u662f\u53cc\u5411\u8ba1\u7b97\u6d41\u91cf\uff0c\u90a3\u4e48\u4f1a\u8ba1\u7b97\u4e3a160M\u6d41\u91cf\u3002\n7\u3001\u5982\u679c\u4f60\u60f3\u628a\u642d\u5efa\u7684\u8d26\u53f7\u7ed9\u591a\u4eba\u4f7f\u7528\uff0c\u4e0d\u7528\u989d\u5916\u8bbe\u7f6e\u7aef\u53e3\uff0c\u56e0\u4e3a\u4e00\u4e2a\u8d26\u53f7\u5c31\u53ef\u4ee5\u591a\u4eba\u4f7f\u7528\u3002\u4e00\u822c5\u7f8e\u5143\u7684\u670d\u52a1\u5668\u53ef\u4ee5\u540c\u65f6\u652f\u630140\u4eba\u5728\u7ebf\u4f7f\u7528\u3002\n\u5982\u679c\u60f3\u5b9e\u73b0\u652f\u6301\u6bcf\u4e2a\u7528\u6237(\u7aef\u53e3)\u4e0d\u540c\u7684\u52a0\u5bc6\u65b9\u5f0f/\u534f\u8bae/\u6df7\u6dc6\u7b49\uff0c\u5e76\u4e14\u7ba1\u7406\u6d41\u91cf\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u8003\u591a\u7528\u6237\u914d\u7f6e\u811a\u672c\uff1awget -N --no-check-certificate https://softs.fun/Bash/ssrmu.sh && chmod +x ssrmu.sh && bash ssrmu.sh  \u5907\u7528\u811a\u672c\uff1awget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh && chmod +x ssrmu.sh && bash ssrmu.sh  \u5b89\u88c5\u540e\u7ba1\u7406\u547d\u4ee4\u4e3a\uff1abash ssrmu.sh\n\u6ce8\u610f\uff1a\u8fd9\u4e2a\u591a\u7528\u6237\u914d\u7f6e\u811a\u672c\u548c\u6559\u7a0b\u5185\u5bb9\u7684\u811a\u672c\u65e0\u6cd5\u5171\u5b58\uff01\u8981\u60f3\u7528\u8fd9\u4e2a\u811a\u672c\uff0c\u628a\u4e4b\u524d\u7684\u811a\u672c\u5378\u8f7d\uff0c\u8f93\u5165\u7ba1\u7406\u547d\u4ee4bash ssr.sh \uff0c\u9009\u62e93\uff0c\u5378\u8f7dShadowsocksR\u5373\u53ef\u5378\u8f7d\u539f\u811a\u672c\u3002\n8\u3001vultr\u670d\u52a1\u5668\u6bcf\u6708\u6709\u6d41\u91cf\u9650\u5236\uff0c\u8d85\u8fc7\u9650\u5236\u540e\u670d\u52a1\u5668\u4e0d\u4f1a\u88ab\u505c\u6b62\u8fd0\u884c\uff0c\u4f46\u662f\u8d85\u51fa\u7684\u6d41\u91cf\u4f1a\u88ab\u989d\u5916\u6536\u8d39\u3002\u5317\u7f8e\u548c\u897f\u6b27\u5730\u533a\u7684\u670d\u52a1\u5668\u8d85\u51fa\u6d41\u91cf\u540e\uff0c\u591a\u51fa\u7684\u90e8\u5206\u6536\u8d39\u4e3a0.01\u7f8e\u5143/G\u3002\u65b0\u52a0\u5761\u548c\u65e5\u672c\u4e1c\u4eac\uff08\u65e5\u672c\uff09\u4e3a0.025\u7f8e\u5143/G\uff0c\u6089\u5c3c\uff08\u6fb3\u5927\u5229\u4e9a\uff09\u4e3a0.05\u7f8e\u5143/G\u3002\u628avultr\u670d\u52a1\u5668\u5220\u6389\uff0c\u5f00\u901a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u6d41\u91cf\u4f1a\u4ece0\u5f00\u59cb\u91cd\u65b0\u8ba1\u7b97\u3002\n9\u3001vultr\u600e\u6837\u624d\u80fd\u7533\u8bf7\u9000\u6b3e\u5462\uff1f\nvultr\u548c\u5176\u4ed6\u7684\u56fd\u5916\u5546\u5bb6\u4e00\u6837\uff0c\u90fd\u662f\u4f7f\u7528\u5de5\u5355\u7684\u5f62\u5f0f\u4e0e\u5ba2\u670d\u8054\u7cfb\uff0c\u5982\u679c\u9700\u8981\u9000\u6b3e\uff0c\u76f4\u63a5\u5728\u540e\u53f0\u70b9\u51fbsupport\uff0c\u9009\u62e9open ticket\u65b0\u5f00\u4e00\u4e2a\u5de5\u5355\uff0c\u9009\u62e9billing question\u8d22\u52a1\u95ee\u9898\uff0c\u7b80\u5355\u7684\u5728\u6587\u672c\u6846\u8f93\u5165\u4f60\u7684\u9000\u6b3e\u7406\u7531\u3002\u6bd4\u5982\uff1aPlease refund all the balance in my account\u3002\u5de5\u5355\u63d0\u4ea4\u4ee5\u540e\u4e00\u822c\u5f88\u5feb\u5c31\u53ef\u4ee5\u7ed9\u4f60\u786e\u8ba4\u9000\u6b3e\uff0c\u82e5\u5e72\u4e2a\u5de5\u4f5c\u65e5\u540e\u5c31\u4f1a\u9000\u56de\u4f60\u7684\u652f\u4ed8\u65b9\u5f0f\u3002\uff08\u5168\u989d\u9000\u6b3e\u7ed3\u675f\u540e\uff0c\u8d26\u53f7\u53ef\u80fd\u4f1a\u88ab\u5220\u9664\uff09\n\u5982\u679c\u82f1\u8bed\u6c34\u5e73\u4e0d\u597d\uff0c\u4f46\u662f\u60f3\u548c\u5ba2\u670d\u8fdb\u884c\u4ea4\u6d41\uff0c\u53ef\u4ee5\u7528\u767e\u5ea6\u5728\u7ebf\u7ffb\u8bd1\uff0c\u81ea\u52a8\u4e2d\u6587\u8f6c\u82f1\u6587\u548c\u82f1\u6587\u8f6c\u4e2d\u6587\u3002\n10\u3001\u8def\u7531\u5668\u4e5f\u53ef\u4ee5\u914d\u7f6ess/ssr\u8d26\u53f7\uff0c\u8be6\u89c1openwrt-ssr\u9879\u76ee\u5730\u5740\uff1ahttps://github.com/ywb94/openwrt-ssr  \n11\u3001\u5982\u679c\u7535\u8111\u60f3\u7528\u642d\u5efa\u7684ss/ssr\u8d26\u53f7\u73a9\u6e38\u620f\uff0c\u5373\u5b9e\u73b0\u7c7b\u4f3cVPN\u5168\u5c40\u4ee3\u7406\uff0c\u53ef\u4ee5\u7528SSTAP\uff0c\u6559\u7a0b\uff1ahttps://www.jianshu.com/p/519e68b74646 \n. ",
    "Kabibi": "@xiam What should I do next after downloading the patch? Or how to use?. I have tried \"make lantern\" and still have \"tr.MaxIdleTime undefined\" and \"tr.EnforceMaxIdleTime undefined\" errors. Now I have no idea how to make lantern successfully on my Opensuse. What do you mean by \"this is not required anymore?\" Can you give me more tips? Thank U so much! @xiam . ",
    "wangyuek": "april 22nd. ",
    "itjiazu": "\u55ef~~\u6709\u4e86\u65b0\u516c\u544a\uff0c\u4e0e\u9884\u671f\u7684\u4e00\u6837\uff0c\u4f9d\u7136\u662f\u5ef6\u957f\u4e13\u4e1a\u7248\u65f6\u957f\u4e00\u4e2a\u6708\uff0c\u6bcf\u56de\u90fd\u662f\u8fd9\u4e00\u62db\uff0c\u6211\u5df2\u7ecf\u5ef6\u957f\u4e86\u7b2c\u4e09\u6b21\u4e86\uff0c\u6211\u611f\u89c9\u8fd9\u4e0d\u662f\u4f17\u6240\u5468\u77e5\u7684\u539f\u56e0\uff0c\u800c\u662f\u88ab\u76ef\u4e0a\u4e86\uff0c\u4e00\u6709\u98ce\u5439\u8349\u52a8\u5c31\u4e0d\u884c\uff0c\u53cd\u800c\u522b\u5bb6\u5374\u4f9d\u7136\u5b8c\u597d\u65e0\u635f\uff0c\u5982\u679c\u6709\u6280\u672f\uff0c\u6709\u6ca1\u6709\u53ef\u80fd\u81ea\u5df1\u5f00\u53d1\u4e00\u5957\u52a0\u5bc6\u96a7\u9053\u534f\u8bae\uff0c\u8ba9\u5373\u4fbf\u6709\u4eba\u76ef\u7740\u4e5f\u65e0\u53ef\u5948\u4f55\uff1f\u4f1a\u4e0d\u4f1a\u6709\u8fd9\u79cd\u73a9\u610f\u513f\uff1f. ### \u5475\u5475\uff0c\u84dd\u706f\u65e9\u5df2\u5931\u4fe1\u4e8e\u5929\u4e0b\uff0c\u4e00\u6b21\u6b21\u7684\u5ffd\u60a0\uff0c\u4e00\u6b21\u6b21\u7684\u6389\u7ebf\uff0c\u76f8\u4fe1\u4e86\u4f60\u534a\u5e74\uff0c\u4eca\u5929\u7ec8\u4e8e\u4e0d\u518d\u4fe1\u4f60\uff0c\u5b98\u7f51\u5439\u5618\u5404\u79cd\u5389\u5bb3\uff0c\u4ec0\u4e48\u4e0d\u662fVPN\uff0c\u6839\u672c\u5c01\u9501\u4e0d\u5230\uff0c\u4e07\u4e07\u6ca1\u60f3\u5230\uff0c\u8fd9\u6839\u672c\u6ca1\u6709\u552e\u540e\uff0c\u539f\u6765\u8fd8\u6709\u4e2a\u8bba\u575b\uff0c\u4e5f\u90fd\u5173\u95ed\u4e86\uff0c\u73b0\u5728\u53c8\u5f39\u51fa\u4ec0\u4e48\u7f51\u7edc\u8d27\u5e01\uff0c\u5475\u5475\uff0c\u4f46\u613f\u4f60\u4eec\u80fd\u7761\u5f97\u5b89\u7a33\u5427. \u8fd9\u8865\u507f\u534a\u5e74\u4e5f\u6ca1\u4ec0\u4e48\u7528\uff0c\u6839\u672c\u8fd8\u662f\u4e00\u6837\u5565\u90fd\u6253\u4e0d\u5f00\uff0c\u6211\u8fd9\u76ee\u524d\u5e7f\u5dde \u4e00\u4e0bHK \u4e00\u4e0bSG\uff0c\u4f46\u662f\u90a3\u4e2a\u90fd\u6253\u4e0d\u5f00\uff0c\u5076\u5c14\u6709\u4e00\u4e0b\u8c37\u6b4c\u9996\u9875\u80fd\u6253\u5f00\uff0c\u4f46\u662f\u4ec5\u9650\u4e8e\u6253\u5f00\uff0c\u641c\u7d22\u5c31\u4e0d\u884c\u4e86\uff0cyoutube\u66f4\u4e0d\u7528\u8bf4\u4e86\uff0c\u90a3\u4e2a\u9875\u9762\u6211\u5df2\u7ecf\u5f88\u4e45\u6ca1\u770b\u5230\u51fa\u6765\u8fc7\u4e86. ",
    "lemonskkyt": "\u4e3a\u6bdb\u8fd9\u4e2a\u8bba\u575b\u5e16\u5b50\u4e5f\u90fd\u5173\u4e86\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\u611f\u89c9\u8fd9\u4f5c\u98ce\uff0c\u5f88\u4e2d\u5171\u554a. \u6628\u5929\u8fd8\u5dee\u4e0d\u591a\u4e00\u534a\u65f6\u95f4\u80fd\u7528\u6765\u7740\uff0c\u4eca\u5929\u4e00\u4e0a\u5348\u5c31\u770b\u4e8610\u5206\u949f\u7684\u89c6\u9891. \u55ef\uff0c\u62ff\u51fa\u51e0\u4e2a\u6708\u6ca1\u7528\u7684\u8d5b\u98ce\uff0c\u679c\u7136\uff0clantern\u4f9d\u7136\u8fd8\u662f\u6700\u4e0d\u9760\u8c31\u7684\u90a3\u4e2a. \u516c\u544a\u4e00\u51fa\uff0c\u57fa\u672c\u5c31\u6b7b\u900f\u4e86\uff0c\u4e4b\u524d\u8fd8\u6709\u4e00\u534a\u7684\u65f6\u95f4\u80fd\u4e0a. \u6062\u590d\u6b63\u5e38\u4e86\uff1f\uff1f\uff1f. \u4eca\u5929\u53c8\u4e0d\u884c\u4e86\u554a\uff0c\u800c\u4e14\u90fd\u6ca1\u4ec0\u4e48\u4eba\u53cd\u9988\u4e86\uff0clantern\u662f\u4e0d\u662f\u8981\u6b7b\u900f\u4e86\uff1f. @applefishsky009 \u6628\u665a\u4e0d\u80fd\u7528\uff0c\u73b0\u5728\u6709\u65f6\u5019\u80fd\u4e0a\uff0c\u4e0d\u7a33\u5b9a. ",
    "alei9195": "\u76ee\u524d\u8fd8\u6ca1\u6709\u6536\u52301\u4e2a\u6708\u8865\u507f.  \u8bf4\u597d\u7684\u4e00\u4e2a\u6708\u8865\u507f\u5462\uff0c\u96be\u9053\u662f\u753b\u7684\u4e00\u4e2a\u5927\u997c\uff1f\u591a\u5c11\u5929\u8fc7\u53bb\u4e86\uff0c\u4e00\u76f4\u4e5f\u6ca1\u6709\u554a\uff01. ",
    "guhuawuli": "\u4e0d\u4ec5\u5f88\u4e2d\u5171\uff0c\u800c\u4e14\u770b\u4e0d\u5230\u5176\u4ed6\u7684\u4eba\u7684\u8bc4\u8bba\uff0c\u4e0d\u592a\u6562\u4e0b\u8f7d\u84dd\u706f. \u6bcf\u6b21\u90fd\u80fd\u5f88\u81ea\u4fe1\u7684\u77e5\u9053\u5728\u4ec0\u4e48\u65f6\u95f4\u4e00\u5b9a\u80fd\u6062\u590d\u6b63\u5e38\uff0c\u7136\u540e\u5220\u6389\u6240\u6709\u5e16\u5b50\uff0c\u4e00\u5e744\u6b21\uff0c\u6bcf\u6b21\u4e00\u4e2a\u6708\uff0c\u6bd4\u5929\u6c14\u8fd8\u89c4\u5f8b. ",
    "SugarmanZhu": "\u8865\u507f\u4e86\u4e5f\u4e0d\u597d\u7528 \u76f4\u63a5\u9000\u6b3e\u5427. Mac\u7248\u6839\u672c\u8fde\u4e0d\u4e0a \n\u4f60\u4eec\u8fd8\u5439\u8bf4\u81ea\u5df1\u4e0d\u662fVPN \u6bd4\u522b\u7684VPN\u597d\n\u4f60\u4eec\u544a\u8bc9\u6211\u4f60\u4eec\u54ea\u70b9\u597d\n\u901f\u5ea6\u4e0d\u5982\u4eba\u5bb6 \u7a33\u5b9a\u6027\u4e5f\u4e0d\u5982\u4eba\u5bb6 \u4eba\u5bb6mac, windows, android, ios\u90fd\u53ef\u4ee5\u7528 \u8fd8\u670924\u5c0f\u65f6\u5ba2\u670d \n\u4f60\u4eec\u4e0d\u662fVPN \u4f60\u4eec\u662f\u5899\u554a\n\u76f4\u63a5\u9000\u6b3e\u5427 \u6211\u526920\u4e2a\u6708 \u4f60\u4eec\u9000\u6211\u4e00\u5e74\u7684\u94b1\u5c31\u597d \n. ",
    "Torrie-Leung": "mac\u5ba2\u6237\u7aef\u4f9d\u65e7\u4e0d\u884c \u800cwin\u4e0a\u6ca1\u592a\u5927\u95ee\u9898 \u4ec0\u4e48\u539f\u56e0\u5462\uff1f\u5e0c\u671b\u5c3d\u5feb\u4fee\u590d. ",
    "funggtopp": "\u7528\u7684\u9694\u58c1\u7684\u4e0a\u6765\u7684\u3002\u8865\u507f\u6709\u5565\u7528\uff1f\u5173\u952e\u662f\u8981\u597d\u7528\uff01\uff01. \u73b0\u5728\u53ea\u60f3\u77e5\u9053\u600e\u4e48\u9000\u94b1\uff01\u4e0d\u60f3\u518d\u6d6a\u8d39\u65f6\u95f4\u4e86. \u8865\u507f\u6709\u5565\u7528\uff0c\u4e0d\u9700\u8981\u8865\u507f\uff0c\u53ea\u8981\u80fd\u987a\u5229\u4f7f\u7528. > \u84dd\u706f\u662fgg\u4e86\u5417\uff1f\uff1f\n\u57fa\u672c\u4e0a\u5427\u3002\u800c\u4e14\u84dd\u706f\u4e0d\u592a\u5730\u9053\u3002\n\u6211\u7528\u514d\u8d39\u7248\uff0c\u9650\u6d41\u91cf500\u7684\uff0c\u901f\u5ea6\u975e\u5e38\u5feb\u3002\u6d41\u91cf\u7528\u5b8c\uff0c\u7528\u4e13\u4e1a\u7248\u6388\u6743\u4ee5\u540e\uff0c\u901f\u5ea6\u9a6c\u4e0a\u5c31\u6ca1\u6709\u4e86\u3002\n\u53ef\u4ee5\u8bf4\uff0c\u84dd\u706f\u771f\u5f97\u5df2\u7ecf\u53d8\u6210\u4e86\u70c2\u706f\u3002. ",
    "Yikes12": "\u76ee\u524d\u8865\u507f\u6ca1\u6709\u5230\u8d26\uff0c\u65e5\u672c\u7ebf\u8def\u901f\u5ea6\u5feb\u4e86\u5f88\u591a\uff0c\u5e0c\u671b\u5f00\u653e\u81ea\u4e3b\u9009\u62e9\u8282\u70b9\uff0c\u5e0c\u671b\u5c3d\u5feb\u51faios\u7248. \u6628\u665a\u8fd8\u80fd\u8dd1\u6ee1\u901f\u5ea6\uff0c\u4eca\u5929\u53c8\u8fde\u4e0d\u4e0a\u4e86\u3002\n\u5728 2018\u5e748\u67085\u65e5\uff0c10:34\uff0clemonskkyt notifications@github.com<mailto:notifications@github.com> \u5199\u9053\uff1a\n\u6628\u5929\u8fd8\u5dee\u4e0d\u591a\u4e00\u534a\u65f6\u95f4\u80fd\u7528\u6765\u7740\uff0c\u4eca\u5929\u4e00\u4e0a\u5348\u5c31\u770b\u4e8610\u5206\u949f\u7684\u89c6\u9891\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/getlantern/lantern/pull/8330#issuecomment-410491079, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AoF0zQDlEq3Hwv_aOouGb72Yf2o2IPUrks5uNlmugaJpZM4VufYD.\n. \u84dd\u706f\u5c31\u662f\u9a97\u5b50\n\u5728 2018\u5e748\u67086\u65e5\uff0c21:45\uff0cala-dream notifications@github.com<mailto:notifications@github.com> \u5199\u9053\uff1a\n@ghostwithhttps://github.com/ghostwith \u8bf4\u597d\u7684\u4e00\u4e2a\u6708\u8865\u507f\u5462\uff0c\u96be\u9053\u662f\u753b\u7684\u4e00\u4e2a\u5927\u997c\uff1f\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/getlantern/lantern/pull/8330#issuecomment-410712273, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AoF0zbFFYwxaZ-OtNcoDiRj7S732NeO9ks5uOEh1gaJpZM4VufYD.\n. \u5200\u5c16\u8214\u8840\u554a\u5144dei\n\u5728 2018\u5e748\u67087\u65e5\uff0c20:53\uff0cyaoniesusu notifications@github.com<mailto:notifications@github.com> \u5199\u9053\uff1a\n\u5e1d\u90fd window10 YouTube1080\u89c6\u9891\u65e0\u538b\u529b\uff0c\u4f46\u662f\u8865\u507f\u8fd8\u6ca1\u770b\u89c1\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/getlantern/lantern/pull/8330#issuecomment-411044782, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AoF0zbH71MuxROOOuV3ZMseFvwVpwDX7ks5uOY3hgaJpZM4VufYD.\n. ",
    "loveship00": "\u521a\u4e70\u4e00\u5e74\u8fd8\u6ca1\u7528\u52303\u5929\uff0c\u8349\u4e86. ",
    "luhongGW": "\u6211\u66f9\uff0c\u5e16\u5b50\u5168\u90e8\u88ab\u5220\u4e86\uff1f\u6709\u6ca1\u6709\u5176\u4ed6\u7684\u4fe1\u606f\u4ea4\u6d41\u5e73\u53f0\uff1f\uff1f\uff1f\u4e00\u4e0b\u5b50\u8054\u7cfb\u4e0d\u4e0a\u706f\u53cb\uff0c\u6709\u70b9\u614cB\u554a. \u4eca\u5929\u5317\u4eac\u597d\u50cf\u53ef\u4ee5\u7528\u4e86\uff0c\u53ef\u4ee5\u4e0a\u6cb9\u7ba1\u4e86\uff0c\u5c31\u662f\u901f\u5ea6\u5f88\u6162. ",
    "HanibalGK": "what happen?   . ",
    "boom1213": "\u4f60\u4eec\u7ba11\u5206\u949f\u6389\u7ebf\u4e00\u6b21 \u901f\u5ea61kb\u90fd\u4e0d\u5230\u7684\u73a9\u610f\u513f\u53eb\u7ffb\u5899\u8f6f\u4ef6 fxxk. ",
    "kahrpba2100": "\u4e0a\u6b21\u7684\u8865\u507f\u5230\u73b0\u5728\u90fd\u6ca1\u6709\u5462\uff1f\u9a97\u4eba\u7684\u5427\u3002. ",
    "yanneyan876": "\u6211\u8fd9\u91cc\u6ca1\u6709\u597d\uff0c\u6211\u662f\u7528\u522b\u7684\u4e0a\u6765\u7684\u3002\u592a\u5751\u7239\u4e86\uff0c\u8865\u507f\u4e00\u4e2a\u6708\u53ef\u662f\u73b0\u5728\u4e0d\u80fd\u7528\u554a\uff01\u5047\u4e00\u7f5a\u4e09\u5305\u90ae\u76f4\u63a5\u9001\u56db\u4e2a\u8fc7\u6765\u7684\u5957\u8def\u4e48?. ",
    "ala-dream": "@ghostwith \u8bf4\u597d\u7684\u4e00\u4e2a\u6708\u8865\u507f\u5462\uff0c\u96be\u9053\u662f\u753b\u7684\u4e00\u4e2a\u5927\u997c\uff1f. @ghostwith \u8bf4\u597d\u7684\u4e00\u4e2a\u6708\u8865\u507f\u5462\uff0c\u96be\u9053\u662f\u753b\u7684\u4e00\u4e2a\u5927\u997c\uff1f. @ghostwith \u8bf4\u597d\u7684\u4e00\u4e2a\u6708\u8865\u507f\u5462\uff0c\u96be\u9053\u662f\u753b\u7684\u4e00\u4e2a\u5927\u997c\uff1f\u591a\u5c11\u5929\u8fc7\u53bb\u4e86\uff0c\u4e00\u76f4\u4e5f\u6ca1\u6709\u554a\uff01. \u670d\u52a1\u5668\u8df3\u6765\u8df3\u53bb\uff0c\u4e0d\u505c\u7684\u65ad\u5f00\u8fde\u63a5\uff0c\u6839\u672c\u6ca1\u6cd5\u7528\u3002\u8001\u624e\u5fc3\u4e86\uff01. ",
    "gzsomg": "\u6240\u4ee5\u62a2\u4fee\u4e86\u4e24\u5929\u7684\u7ed3\u679c\u662f\u8fde\u8c37\u6b4c\u90fd\u8fdb\u4e0d\u4e86\u5417. ",
    "myhalibobo": "\u4e3a\u4ec0\u4e48\u6211\u4e00\u767b\u5f55\u4e13\u4e1a\u7248\u5c31\u8fde\u63a5\u4e0a\u4e0d\u4e0a\u4e86\u3002\u4e0d\u4f7f\u7528\u4e13\u4e1a\u7248\u5c31\u6ca1\u6709\u95ee\u9898. \u4ffa\u84dd\u706f\u6587\u6863\u6392\u67e5\u4e00\u4e0b\u8bd5\u8bd5\u3002\u4ece\u4e0a\u6b21\u4fee\u590d\u5230\u73b0\u5728\uff0c\u6211\u7684\u4e00\u76f4\u7a33\u5b9a\u3002. \u6211\u7684\u53ef\u4ee5\u7528\u6765\u3002\u5378\u8f7d\u6700\u65b0\u7684\uff0c\u5220\u9664C:\\Users\\Administrator\\AppData\\Roaming\\Lantern\uff0c\u5728\u91cd\u4fee\u5b89\u88c5\u6700\u65b0\u7684\u3002\u6211\u4eca\u5929\u4e00\u5929\u90fd\u6ca1\u6709\u6389\u7ebf. ",
    "jshq": "\u6ca1\u6cd5\u7528\u975e\u5e38\u975e\u5e38\u5361 \u5237\u65b0\u5341\u6765\u6b21\u6709\u4e00\u6b21\u80fd\u6210\u7b97\u4e0d\u9519\u7684\u4e86 \u4e0d\u6562\u7eed\u671f \u6709\u8c01\u6709\u7a33\u5b9a\u70b9\u7684\u63a8\u8350\u5417. ",
    "Victor2009": "\u5341\u51e0\u5206\u949f\u6389\u7ebf\u4e00\u6b21\uff0c\u5982\u4f55\u7a33\u5b9a\uff1f\uff1f\uff1f. ",
    "zizikuang": "I hope there will be quikely a new version to get this bad situation OK. We chinese users are very hard with this situation.. worse and worse ! totally can not work. please make it ok. \u8d8a\u6765\u8d8a\u5dee\uff01\uff01\uff01\u5b8c\u5168\u4e0d\u80fd\u7528\u73b0\u5728\u3002\u8fd8\u5168\u529b\u62a2\u4fee\uff0c\u600e\u4e48\u4fee\u7684\u4e00\u70b9\u6210\u6548\u90fd\u6ca1\u6709\uff01\uff01\u5feb\u70b9\u4fee\u554a\uff01\uff01. \u8865\u507f\u867d\u7136\u6536\u5230\u4e86\uff0c\u4f46\u6709\u4ec0\u4e48\u7528\uff1f\uff1f\uff1f\u65f6\u65ad\u65f6\u7eed\uff0c\u4e0d\u80fd\u7528\u7684\u65f6\u5019\u5c45\u591a\uff01\uff01\u867d\u7136\u5de5\u4f5c\u53ef\u4ee5\u505a\u4e0b\u53bb\uff0c\u4f46\u56e0\u4e3a\u84dd\u706f\u6548\u679c\u5f88\u4e0d\u597d\u8fd8\u662f\u6d6a\u8d39\u4e86\u4e0d\u5c11\u65f6\u95f4\u548c\u7cbe\u529b\uff01\uff01\uff01\u5f53\u7136\u81f3\u5c11\u80fd\u7528\u4e86\u6709\u65f6\u5019\uff0c\u53ef\u662f\u96be\u9053\u6211\u8981\u4e3a\u6b64\u6b22\u547c\uff1f\uff1f\uff1f\u6bd5\u7adf\u4ea4\u4e8624\u5c0f\u65f6\u90fd\u80fd\u987a\u5229\u4f7f\u7528\u7684\u94b1\uff01\uff01\u5feb\u70b9\u7ec4\u7ec7\u6280\u672f\u9aa8\u5e72\u653b\u5173\uff0c\u9b54\u9ad8\u4e00\u5c3a\u4f60\u9053\u9ad8\u4e00\u4e08\u554a\uff01\uff01. ",
    "randyboer": "\u4e00\u76f4\u6389\uff0c\u4e00\u76f4\u6389...\u6389. ",
    "chinavane": "\u8fd8\u662f\u8fde\u4e0d\u4e0a. ",
    "hapsat": "\u8865\u507f\u5462\u6211\u600e\u4e48\u4ec0\u4e48\u90fd\u6ca1. ",
    "397327": "youtube\u5c31\u662f\u6253\u4e0d\u5f00\uff0c\u600e\u4e48\u56de\u4e8b\u5462\uff1f\u6253\u5f00\u7ba1\u7406\u7cfb\u7edf\u4ee3\u7406\u540e  \u4e00\u6253\u5f00\u56fd\u5916\u7f51\u5c31\u65ad\u7ebf\uff0c\u5173\u95ed\u540e\u53c8\u6253\u4e0d\u5f00\u56fd\u5916\u7f51\uff0c\u80fd\u89e3\u51b3\u4e48\uff1f\u522b\u7684\u7ffb\u5899\u8f6f\u4ef6\u53ef\u4ee5\u6253\u5f00\u6240\u6709\u7684\u56fd\u5916\u7f51\u7ad9. IOS\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u51fa\u6765\u5462\uff1f. ",
    "JustLikeU": "\u5367\u69fd\uff0c\u521a\u4e70\u4e0d\u80fd\u4f7f\u7528\uff1f\uff1f\uff1f. ",
    "Z-BANGI": "\u56fe\u6807\u4e00\u76f4\u662f\u6697\u7684\uff0c\u8981\u6c42\u9000\u6b3e\uff01\uff01 . ",
    "Lugia2001": "\u73b0\u5728\u90fd\u76f4\u63a5\u95ea\u9000\u4e86\uff0c\u8865\u507f\u6709\u6bdb\u7528. ",
    "libotao314": "\u4ec0\u4e48\u65f6\u5019\u80fd\u591f\u4fee\u597d\uff1f. ",
    "xiaobingxiansheng": "\u5e0c\u671b\u80fd\u5c3d\u5feb\u4fee\u597d\uff0c\u6700\u597d\u662f\u4ee5\u540e\u5982\u679c\u53d1\u751f\u7c7b\u4f3c\u60c5\u51b5\u80fd\u591f\u7ed9\u7528\u6237\u4e00\u4e9b\u53e6\u5916\u7684\u7ffb\u5899\u6e20\u9053\uff0c\u73b0\u5728\u6211\u7528\u624b\u673a\u53ea\u80fd\u7528\u6d41\u91cf\u624d\u80fd\u8bbf\u95eeyoutube\uff0c\u7535\u8111\u8fde\u4e0awifi\u662f\u5b8c\u5168\u4e0d\u80fd\u7528\u7684\uff0c\u8bf7\u5c3d\u5feb\u4fee\u590d\u5427\uff01. \u597d\u50cf\u5df2\u7ecf\u597d\u4e86 \uff0c\u73b0\u5728\u8bbf\u95ee\u6d4f\u89c8\u5668\u4e0d\u4f1a\u4e00\u76f4\u8f6c\u5708\u4e86 \uff0c \u5e7f\u4e1c\u8fd9\u8fb9\u7684 . ",
    "qq20539350": "\u4ee5\u540e\u76f4\u63a5\u4e70\uff0c\u56fd\u5916\u7684\u670d\u52a1\uff0c\u867d\u7136\u8d35\u70b9\uff0c\u6bd4\u8fd9\u597d\u591a\u4e86\uff0cTMD\uff0cmac \u6839\u672c\u6ca1\u6cd5\u7528\uff0c\u7ecf\u5e38\u65ad\uff0c\u901f\u5ea6\u5dee\uff0c\u8bf4\u597d\u7684\u4fee\u590d\uff0c\u8fd9\u4e48\u4e45\u8fd8\u6ca1\u597d\uff0c\u4e0d\u884c\u5c31\u628a\u94b1\u9000\u4e86\u5427\uff0c\u4e0d\u884c\u5c31\u4e3e\u62a5\u4e86\uff0c\u7b97\u6c42\u4e86\uff01. ",
    "jexooooo": "\u84dd\u706f\u4e0d\u7a33\u5b9a\u53ef\u4ee5\u627e\u5176\u4ed6\u7684\u4ee3\u66ff\uff01\n\u5b66\u751f\u515a\u81ea\u5efa\uff0c\u7cbe\u5fc3\u7ecf\u8425\u3002\u7f51\u7ad9\uff1a www.dtssr.xyz \n\u5b8c\u7f8e\u652f\u6301Windows\u3001Mac\u3001iOS\u3001Android\u7b49\u7cfb\u7edf\uff01\n\u8282\u70b9\u9ad8\u901f\u7a33\u5b9a\uff0c\u652f\u6301Netflix\u3001YouTube1080\uff01\n\u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d\uff0c\u6709\u6d41\u91cf\u5305\u5957\u9910\uff01\u6709\u6d41\u91cf\u5305\u5957\u9910\uff01\u6709\u6d41\u91cf\u5305\u5957\u9910\uff01\n\u6ce8\u518c\u8bd5\u75281GB\uff0c\u6709\u4e0d\u61c2\u5f97\u53ef\u4ee5\u52a0\u7ad9\u957fQQ\uff1a 1620883554 \uff0c\u968f\u65f6\u89e3\u51b3\u95ee\u9898\u3002\nIOS\u7248\u672c\u8bf7\u76f4\u63a5\u627e\u8001\u677f\u62ff\u8bbe\u7f6e\u6559\u7a0b\uff01\uff08\u2299o\u2299\uff09\u9003.. \u84dd\u706f\u8fd8\u662f\u4e0d\u592a\u7a33\u5b9a\u3002\u3002\n\u63a8\u8350\u4f7f\u7528ss\uff0c\u6709\u4e2a\u597d\u7684ss\u7ad9\uff1a www.dtssr.xyz\n\u652f\u6301ios\u7cfb\u7edf\uff0c\u6d41\u7545\u770bu2b1080\u3002\u8282\u70b9\u591a\u800c\u4e14\u5f88\u7a33\u5b9a\uff0c\u5305\u6708\u53ea\u898115\u5757\uff0c\u6709\u5174\u8da3\u7684\u670b\u53cb\u53ef\u4ee5\u70b9\u5f00\u7f51\u7ad9\u770b\u770b\uff0c\u6dfb\u52a0\u8282\u70b9\u6559\u7a0b\u4e5f\u5f88\u7b80\u5355@_@. \u5b98\u7f51\uff1a http://u6.gg/emT8M\n\u2714 \u6db5\u76d6Android\u3001IOS\u3001Win\u3001MAC\u3001linux\u3001\u8def\u7531\u5668\u5e73\u53f0\n\u2714 \u9ad8\u54c1\u8d28\u8282\u70b9\uff0c\u6db5\u76d6\u7f8e\u56fd\u3001\u9999\u6e2f\u3001\u65e5\u672c\u3001\u53f0\u6e7e\u3001\u65b0\u52a0\u5761\u7b49\u539f\u751fIP\uff0c\u901f\u5ea6\u5b8c\u7f8e\u7a334k\uff0c\n\u2714 \u4f17\u591a\u539f\u751fIP\u652f\u6301Netflix\u3001TVB\u3001DMM\u7b49\u7b49\n\u2714 \u6240\u6709\u8282\u70b9\u5747\u4e3a\u81ea\u5efa\uff0c\u6280\u672f\u6210\u719f\uff0c\u957f\u671f\u7a33\u5b9a\u63d0\u4f9b\uff0c\n\u2714 \u6ce8\u518c\u90011G\u4e0d\u9650\u901f\u6d41\u91cf\uff0cVIP\u8282\u70b9\u968f\u4fbf\u7528\uff0c\n\u2714 \u7a00\u5c11\u4e0d\u9650\u65f6\u6d41\u91cf\u5957\u9910\u5305\uff0c\u6b22\u8fce\u524d\u6765\u62a2\u8d2d\uff0c\n\u2714 \u6700\u65b0\u63a8\u51fa\u4e03\u5915\u5305\u6708\u5957\u9910\uff0c\u6700\u4f4e\u8d39\u75287.7\u5757\uff01. \u81ea\u5efa\u6210\u672c\u9ad8\uff0c\u5bb9\u6613\u88ab\u5899\uff0c\u6362IP\u592a\u6298\u817e\uff0c\u4e0d\u5982\u76f4\u63a5\u4e70ssr\u670d\u52a1\u3002\n\u63a8\u8350ssr\u670d\u52a1\u7ad9\uff0c\u53e3\u7891\u4e0d\u7528\u8bf4\uff0c\u697c\u4e0a\u4e5f\u6709\u670b\u53cb\u63d0\u5230\u4e86\u8fd9\u4e2a\u7ad9\u3002\n\u5b98\u7f51\uff1a https://dtssr.xyz/\n\u2714 \u6db5\u76d6Android\u3001IOS\u3001Win\u3001MAC\u3001linux\u3001\u8def\u7531\u5668\u5e73\u53f0\n\u2714 \u9ad8\u54c1\u8d28\u8282\u70b9\uff0c\u6db5\u76d6\u7f8e\u56fd\u3001\u9999\u6e2f\u3001\u65e5\u672c\u3001\u53f0\u6e7e\u3001\u65b0\u52a0\u5761\u7b49\u539f\u751fIP\uff0c\u901f\u5ea6\u5b8c\u7f8e\u7a334k\uff0c\n\u2714 \u4f17\u591a\u539f\u751fIP\u652f\u6301Netflix\u3001TVB\u3001DMM\u7b49\u7b49\n\u2714 \u6240\u6709\u8282\u70b9\u5747\u4e3a\u81ea\u5efa\uff0c\u6280\u672f\u6210\u719f\uff0c\u957f\u671f\u7a33\u5b9a\u63d0\u4f9b\uff0c\n\u2714 \u6ce8\u518c\u90011G\u4e0d\u9650\u901f\u6d41\u91cf\uff0cVIP\u8282\u70b9\u968f\u4fbf\u7528\uff0c\n\u2714 \u7a00\u5c11\u4e0d\u9650\u65f6\u6d41\u91cf\u5957\u9910\u5305\uff0c\u6b22\u8fce\u524d\u6765\u62a2\u8d2d\uff0c\n\u2714 \u6700\u65b0\u63a8\u51fa\u7279\u60e0\u5305\u6708\u5957\u9910\uff0c\u6700\u4f4e\u8d39\u75289.9\u5757\n. \u84dd\u706f\u4e0d\u7a33\u5b9a\u53ef\u4ee5\u627e\u5176\u4ed6\u7684\u4ee3\u66ff\uff01\n\u5b66\u751f\u515a\u81ea\u5efa\uff0c\u7cbe\u5fc3\u7ecf\u8425\u3002\u7f51\u7ad9\uff1a www.dtssr.xyz\n\u5b8c\u7f8e\u652f\u6301Windows\u3001Mac\u3001iOS\u3001Android\u7b49\u7cfb\u7edf\uff01\n\u8282\u70b9\u9ad8\u901f\u7a33\u5b9a\uff0c\u652f\u6301Netflix\u3001YouTube1080\uff01\n\u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d\uff0c\u6709\u6d41\u91cf\u5305\u5957\u9910\uff01\u6709\u6d41\u91cf\u5305\u5957\u9910\uff01\u6709\u6d41\u91cf\u5305\u5957\u9910\uff01\n\u6ce8\u518c\u8bd5\u75281GB\uff0c\u6709\u4e0d\u61c2\u5f97\u53ef\u4ee5\u52a0\u7ad9\u957fQQ\uff1a 1620883554 \uff0c\u968f\u65f6\u89e3\u51b3\u95ee\u9898\u3002\nIOS\u7248\u672c\u8bf7\u76f4\u63a5\u627e\u8001\u677f\u62ff\u8bbe\u7f6e\u6559\u7a0b\uff01\uff08\u2299o\u2299\uff09\u9003.. ",
    "yaoniesusu": "\u5e1d\u90fd  window10   YouTube1080\u89c6\u9891\u65e0\u538b\u529b\uff0c\u4f46\u662f\u8865\u507f\u8fd8\u6ca1\u770b\u89c1. ",
    "YOYOsheep": "8\u67088\u65e5\uff0c\u5e7f\u5dde\u7535\u4fe1\u7528\u6237\u53ef\u4ee5\u6062\u590d\u4f7f\u7528\u84dd\u706f\u4e0a\u7f51\u4e86\u3002\u89c2\u5bdf\u4e00\u4e0b\u670d\u52a1\u5668\u7528\u4e86HK\u7684\uff08\u4e4b\u524d\u7528JP\u7684\u4e0d\u884c\uff09\u3002\n\u731c\u6d4b\u4e00\u4e0b\u662f\u5426JP\u670d\u52a1\u5668\u4fbf\u5b9c\uff0cHK\u7684\u8d35\u5462\uff1f. ",
    "zwtall": "\u6211\u90fd\u5f00\u59cb\u81ea\u5efaVPN\u4e86\uff0c\u672c\u6765YouTube 4000K-8000K\nbps\u7684\u901f\u5ea6\uff0c\u9a6c\u4e39\uff0cGFW\u53d1\u73b0\u6211\u4e86\uff0c\u80fdping\u901a\u4f46\u662f\u6ca1\u6cd5SSH\u767b\u5f55\u3002. \u6628\u665aYouTube \u901f\u5ea6\u6760\u6760\u7684\uff0c\u84dd\u706f\u89c6\u4e4e\u53c8\u6d3b\u4e86\u3002. \u697c\u4e0a\u67d0\u4e9b\u4eba\uff0c\u522b\u6ca1\u4e8b\u4e00\u526f\u6028\u5987\u7684\u6837\u5b50\uff0c\u53ea\u4f1a\u62b1\u6028\u3002\u84dd\u706f\u4e5f\u4e0d\u5bb9\u6613\uff0c\u7528\u84dd\u706f\u4e5f\u5e94\u8be5\u67091\u5e74\u7684\u65f6\u95f4\u4e86\uff0c\u603b\u4f53\u6765\u8bf4\u8fd8\u7b97\u662f\u4e0d\u9519\u7684\u3002\u5899\u4f1a\u4e0d\u5b9a\u671f\u5347\u7ea7\uff0c\u84dd\u706f\u80af\u5b9a\u4f1a\u88ab\u91cd\u70b9\u5173\u6ce8\uff0c\u88ab\u5c01\u662f\u5f88\u6b63\u5e38\u7684\u4e8b\uff0c\u53ea\u8981\u4e0d\u662f\u62ff\u94b1\u8dd1\u8def\u4e86\uff0c\u6211\u4eec\u5e94\u8be5\u7ed9\u4e88\u84dd\u706f\u7a0b\u5e8f\u5458\u8db3\u591f\u7684\u65f6\u95f4\u53bb\u7814\u53d1\u7a7f\u5899\u6280\u672f\uff0c\u53bb\u627e\u5899\u7684\u6f0f\u6d1e\uff0c\u800c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4ef6\u7b80\u5355\u7684\u4e8b\u60c5\u3002\u50cf\u73b0\u5728\uff0c\u7ffb\u5899\u7684\u6d41\u7545\u5ea6\u8fd8\u662f\u5341\u5206\u559c\u4eba\u7684\uff0cYouTube\u7684\u7f51\u7edc\u53ef\u4ee5\u8fbe\u523010Mbps\u4ee5\u4e0a\uff08\u6211\u81ea\u5efa\u7684VPN\u52a0\u901f\u540e\uff0c\u4e5f\u5c318M\u5de6\u53f3\uff09. \u770b\u5230\u4f60\u524d\u9762\u7684\u8bb0\u5f55\uff0c\u770b\u6837\u5b50\u662f\u8981\u5356SSR\u7684\uff0c\u90a3\u4f60\u80fd\u4fdd\u8bc1\u4f60\u7684SSR\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u5c01\uff1f\n\u6055\u6211\u76f4\u8a00\uff0c\u524d\u9762\u6211\u63d0\u5230\u7684\u81ea\u5efaVPN\uff0c\u4e70\u4e86\u4e00\u5e74\u7684VPS\uff0cIP\u7b2c\u4e8c\u5929\u5c31\u88ab\u5c01\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u82b1\u4e86\u4e00\u5e74\u7684\u94b1\uff0c\u603b\u5171\u7528\u4e86\u4e00\u5929\uff0c\u8c22\u8c22\u3002@cexll. ",
    "DOGFranky": "\u8d35\u662f\u6700\u8d35\u7684\uff0c\uff0c\uff0c\uff0c\uff0c\u70c2\u662f\u6700\u70c2\u7684\uff0c\uff0c\u53ea\u80fd\u602a\u81ea\u5df1\u4e86\uff0c\uff0c\u4e0b\u56de\u8fd8\u662f\u81ea\u5df1\u642d\u4e00\u4e2a\u5427. ",
    "zhqqqy": "\u6628\u5929\u4e0a\u5348\u597d\u7684\uff0c\u4e0b\u5348\u4e0d\u884c\u4e86\uff0c\u4eca\u5929google\u90fd\u6253\u4e0d\u5f00\u4e86\uff0c\u4e0d\u60f3\u7528\u4e86\uff0c\u8bf7\u95ee\u600e\u4e48\u9000\u94b1\uff1f. ",
    "strongcode9527": "\u94b1\u90fd\u4ea4\u4e86\uff0c\u8fd8\u6709\u4ec0\u4e48\u53ef\u8bf4\u7684\uff0c\u4f60\u4eec\u53ea\u8981\u8ba9\u6211\u4eec\u77e5\u9053\u4f60\u4eec\u8fd8\u6d3b\u7740\uff0c\u8fd8\u5728\u7ef4\u62a4\u5c31\u884c\u4e86. ",
    "youling87": "\u8bf4\u597d\u7684\u8865\u507f\u5462   \u8865\u507f\u5462   \u8865\u507f\u5462. \u548b\u56de\u4e8b\u554a     \u6709\u65f6\u5019\u8fd8\u662f\u4e0d\u80fd\u6b63\u5e38\u4f7f\u7528    \u5e76\u4e14\u4e5f\u6ca1\u6709\u6536\u5230\u8865\u507f\u554a. ",
    "nlpddz": "\u81ea\u5df1\u642d\u5efass/ssr\u670d\u52a1\u5668\u6559\u7a0b\uff08\u9002\u5408\u521d\u5b66\u8005\uff0c\u6700\u4f4e2.5\u7f8e\u5143/\u6708\uff09\n2018.6.28\u66f4\u65b0\uff1avultr\u5b98\u65b9\u8fdb\u884c\u4e86\u8c03\u6574\uff0c2.5\u7f8e\u5143\u5957\u9910\u53ea\u63d0\u4f9bipv6\uff0c\u5982\u679c\u4f60\u6ca1\u6709ipv6\u9700\u6c42\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4e705\u7f8e\u5143\u7684\u5957\u9910\u3002\n\u3010\u5ba2\u6237\u7aef\u4e0b\u8f7d\u3011\n\u7b2c\u4e00\u6b21\u7535\u8111\u7cfb\u7edf\u4f7f\u7528SSR/SS\u5ba2\u6237\u7aef\u65f6\uff0c\u9700\u8981\u5b89\u88c5NET Framework 4.0\uff0c\u4e0d\u7136\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\uff0c\u5fae\u8f6f\u5b98\u7f51\u4e0b\u8f7d\u3002NET Framework 4.0\u662fSSR/SS\u7684\u8fd0\u884c\u5e93\uff0c\u6ca1\u6709\u8fd9\u4e2aSSR/SS\u5ba2\u6237\u7aef\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\u3002\u6709\u7684\u7535\u8111\u7cfb\u7edf\u53ef\u80fd\u4f1a\u81ea\u5e26NET Framework 4.0\u3002\nWindows SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740\nMAC SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740\nLinux\u5ba2\u6237\u7aef\u4e00\u952e\u5b89\u88c5\u914d\u7f6e \u4f7f\u7528\u811a\u672c (\u4f7f\u7528\u65b9\u6cd5\u89c1\u6ce8\u91ca) \u6216\u8005\u91c7\u7528\u56fe\u5f62\u754c\u9762\u7684linux ssr\u5ba2\u6237\u7aef\n\u5b89\u5353 SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740 \n\u82f9\u679c\u624b\u673aSSR\u5ba2\u6237\u7aef\uff1aPotatso Lite\u3001Potatso\u3001shadowrocket\u90fd\u53ef\u4ee5\u4f5c\u4e3aSSR\u5ba2\u6237\u7aef\uff0c\u4f46\u8fd9\u4e9b\u8f6f\u4ef6\u76ee\u524d\u5df2\u7ecf\u5728\u56fd\u5185\u7684app\u5546\u5e97\u4e0b\u67b6\uff0c\u53ef\u4ee5\u7528\u7f8e\u533a\u7684appid\u8d26\u53f7\u6765\u4e0b\u8f7d\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u914d\u7f6e\u7684SSR\u8d26\u53f7\u517c\u5bb9SS\u5ba2\u6237\u7aef\uff0c\u6216\u8005\u534f\u8bae\u9009\u62e9origin\u4e14\u6df7\u6dc6\u9009\u62e9plain\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u9009\u62e9\u82f9\u679cSS\u5ba2\u6237\u7aef\u8f6f\u4ef6\uff08\u5373\u534f\u8bae\u548c\u6df7\u6dc6\u53ef\u4ee5\u4e0d\u586b\uff09\uff0cAPP\u5546\u5e97\u91cc\u9762\u6709\u5f88\u591a\uff0c\u6bd4\u5982\uff1asuperwingy\u3001firstwingy\u3001shadowingy\u3001wingy+\u3001banananet\u3001kite-ss proxy\u3001goodshadow\u3001icproyx\u3001shadowrocket\u7b49\u3002\n\u6709\u4e86\u5ba2\u6237\u7aef\u540e\u6211\u4eec\u9700\u8981\u81ea\u5df1\u642d\u5efa\u670d\u52a1\u5668\u521b\u5efass/ssr\u8d26\u53f7\u624d\u80fd\u7ffb\u5899\u3002 \n\u642d\u5efa\u6559\u7a0b\n\u4e0d\u6015\u88ab\u5c01ip\uff0c\u56e0\u4e3avultr\u662f\u6298\u7b97\u6210\u5c0f\u65f6\u8ba1\u8d39\uff0c\u4e14\u53ef\u4ee5\u968f\u65f6\u5220\u9664\u548c\u5f00\u901a\u670d\u52a1\u5668\uff0c\u65b0\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\u3002\u65b0\u5f00\u670d\u52a1\u5668\u53ea\u9700\u89810.01\u7f8e\u5143\uff0c\u5373\u4f7f\u4f60\u8fd0\u6c14\u975e\u5e38\u4e0d\u597d\uff0c\u5f00\u4e8610\u53f0\u670d\u52a1\u5668\u624d\u83b7\u5f97\u6ca1\u6709\u88ab\u5899\u7684ip\uff0c\u603b\u521b\u5efa\u670d\u52a1\u5668\u6210\u672c\u4e5f\u53ea\u67090.1\u7f8e\u5143\uff0c\u4e0d\u52301\u5757\u94b1\u3002\n\u6559\u7a0b\u5f88\u7b80\u5355\uff0c\u6574\u4e2a\u6559\u7a0b\u5206\u4e09\u6b65\uff1a\n\u7b2c\u4e00\u6b65\uff1a\u8d2d\u4e70VPS\u670d\u52a1\u5668\n\u7b2c\u4e8c\u6b65\uff1a\u4e00\u952e\u90e8\u7f72VPS\u670d\u52a1\u5668\n\u7b2c\u4e09\u6b65\uff1a\u4e00\u952e\u52a0\u901fVPS\u670d\u52a1\u5668 \uff08\u8c37\u6b4cBBR\u52a0\u901f\uff0c\u63a8\u8350\uff09\n\n\u7b2c\u4e00\u6b65\uff1a\u8d2d\u4e70VPS\u670d\u52a1\u5668\nVPS\u670d\u52a1\u5668\u9700\u8981\u9009\u62e9\u56fd\u5916\u7684\uff0c\u9996\u9009\u56fd\u9645\u77e5\u540d\u7684vultr\uff0c\u901f\u5ea6\u4e0d\u9519\u3001\u7a33\u5b9a\u4e14\u6027\u4ef7\u6bd4\u9ad8\uff0c\u6309\u5c0f\u65f6\u8ba1\u8d39\uff0c\u80fd\u591f\u968f\u65f6\u5f00\u901a\u548c\u5220\u9664\u670d\u52a1\u5668\uff0c\u65b0\u670d\u52a1\u5668\u5373\u662f\u65b0ip\u3002\nvultr\u6ce8\u518c\u5730\u5740\uff1a http://www.vultr.com/?ref=7048874 \uff08\u5168\u740315\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u53ef\u9009\uff0cKVM\u6846\u67b6\uff0c\u6700\u4f4e2.5\u7f8e\u5143/\u6708) \n\n\u867d\u7136\u662f\u82f1\u6587\u754c\u9762\uff0c\u4f46\u662f\u73b0\u5728\u7684\u6d4f\u89c8\u5668\u90fd\u6709\u7f51\u9875\u7ffb\u8bd1\u529f\u80fd\uff0c\u9f20\u6807\u70b9\u51fb\u53f3\u952e\uff0c\u9009\u62e9\u7f51\u9875\u7ffb\u8bd1\u5373\u53ef\u7ffb\u8bd1\u6210\u4e2d\u6587\u3002\n\u6ce8\u518c\u5e76\u90ae\u4ef6\u6fc0\u6d3b\u8d26\u53f7\uff0c\u5145\u503c\u540e\u5373\u53ef\u8d2d\u4e70\u670d\u52a1\u5668\u3002\u5145\u503c\u65b9\u5f0f\u662f\u652f\u4ed8\u5b9d\u6216paypal\uff0c\u4f7f\u7528paypal\u6709\u94f6\u884c\u5361\uff08\u5305\u62ec\u4fe1\u7528\u5361\uff09\u5373\u53ef\u3002paypal\u6ce8\u518c\u5730\u5740\uff1ahttps://www.paypal.com \uff08paypal\u662f\u56fd\u9645\u77e5\u540d\u7684\u7b2c\u4e09\u65b9\u652f\u4ed8\u670d\u52a1\u5546\uff0c\u6ce8\u518c\u4e00\u4e0b\u8d26\u53f7\uff0c\u7ed1\u5b9a\u94f6\u884c\u5361\u5373\u53ef\u8d2d\u4e70\u56fd\u5916\u5546\u54c1\uff09\n2.5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a\u5355\u6838   512M\u5185\u5b58  20G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    500G\u6d41\u91cf/\u6708   \n5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a  \u5355\u6838   1G\u5185\u5b58    25G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    1000G\u6d41\u91cf/\u6708  \n10\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a \u5355\u6838   2G\u5185\u5b58    40G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    2000G\u6d41\u91cf/\u6708  \n20\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a 2cpu   4G\u5185\u5b58   60G SSD\u786c\u76d8    \u5e26\u5bbd\u5cf0\u503c100M    3000G\u6d41\u91cf/\u6708  \n40\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a 4cpu   8G\u5185\u5b58   100G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    4000G\u6d41\u91cf/\u6708  \n\u6ce8\u610f\uff1avultr\u5b98\u65b9\u8fdb\u884c\u4e86\u8c03\u6574\uff0c2.5\u7f8e\u5143\u5957\u9910\u53ea\u63d0\u4f9bipv6\uff0c\u5982\u679c\u4f60\u6ca1\u6709ipv6\u9700\u6c42\uff0c\u90a3\u4e48\u4f60\u81f3\u5c11\u8981\u4e705\u7f8e\u5143\u7684\u5957\u9910\u3002\nvultr\u5b9e\u9645\u4e0a\u662f\u6298\u7b97\u6210\u5c0f\u65f6\u6765\u8ba1\u8d39\u7684\uff0c\u6bd4\u5982\u670d\u52a1\u5668\u662f5\u7f8e\u51431\u4e2a\u6708\uff0c\u90a3\u4e48\u6bcf\u5c0f\u65f6\u6536\u8d39\u4e3a5/30/24=0.0069\u7f8e\u5143 \u4f1a\u81ea\u52a8\u4ece\u8d26\u53f7\u4e2d\u6263\u8d39\uff0c\u53ea\u8981\u4fdd\u8bc1\u8d26\u53f7\u6709\u94b1\u5373\u53ef\u3002\u5982\u679c\u4f60\u90e8\u7f72\u7684\u670d\u52a1\u5668\u5b9e\u6d4b\u540e\u901f\u5ea6\u4e0d\u7406\u60f3\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u5220\u6389\uff08destroy\uff09\uff0c\u91cd\u65b0\u6362\u4e2a\u5730\u533a\u7684\u670d\u52a1\u5668\u6765\u90e8\u7f72\uff0c\u65b9\u4fbf\u4e14\u5b9e\u7528\u3002\u56e0\u4e3a\u65b0\u7684\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\uff0c\u6240\u4ee5\u5f53ip\u88ab\u5899\u65f6\u8fd9\u4e2a\u65b9\u6cd5\u5f88\u6709\u7528\u3002\u5f53ip\u88ab\u5899\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u65b0\u5f00\u7684\u670d\u52a1\u5668ip\u548c\u539f\u5148\u7684ip\u4e0d\u4e00\u6837\uff0c\u5148\u5f00\u65b0\u670d\u52a1\u5668\uff0c\u5f00\u597d\u540e\u518d\u5220\u9664\u65e7\u670d\u52a1\u5668\u5373\u53ef\u3002\n\u8ba1\u8d39\u4ece\u4f60\u5f00\u901a\u670d\u52a1\u5668\u5f00\u59cb\u7b97\u7684\uff0c\u4e0d\u7ba1\u4f60\u6709\u6ca1\u6709\u4f7f\u7528\uff0c\u5373\u4f7f\u670d\u52a1\u5668\u5904\u4e8e\u5173\u673a\u72b6\u6001\u4ecd\u7136\u4f1a\u8ba1\u8d39\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5f00\u901a\u670d\u52a1\u5668\u5c31\u4e0d\u7b97\u3002\u6bd4\u5982\u4f60\u4eca\u5929\u65e9\u4e0a\u5f00\u901a\u4e86\u670d\u52a1\u5668\uff0c\u4f46\u4f60\u6709\u4e8b\u60c5\uff0c\u665a\u4e0a\u624d\u90e8\u7f72\uff0c\u90a3\u4e48\u8fd9\u6bb5\u65f6\u95f4\u662f\u4f1a\u8ba1\u8d39\u7684\u3002\u540c\u7406\uff0c\u5982\u679c\u4f60\u65e9\u4e0a\u5220\u6389\u670d\u52a1\u5668\uff0c\u7b2c\u4e8c\u5929\u624d\u5f00\u901a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u8fd9\u6bb5\u65f6\u95f4\u662f\u4e0d\u4f1a\u8ba1\u8d39\u7684\u3002\u5728\u8d26\u53f7\u7684Billing\u9009\u9879\u91cc\u53ef\u4ee5\u770b\u5230\u8d26\u6237\u4f59\u989d\u3002\n\u6e29\u99a8\u63d0\u9192\uff1a\u540c\u6837\u7684\u670d\u52a1\u5668\u4f4d\u7f6e\uff0c\u4e0d\u540c\u7684\u5bbd\u5e26\u7c7b\u578b\u548c\u5730\u533a\u6240\u642d\u5efa\u7684\u8d26\u53f7\u7684\u7ffb\u5899\u901f\u5ea6\u4f1a\u4e0d\u540c\uff0c\u8fd9\u4e0e\u4e2d\u56fd\u7535\u4fe1\u3001\u4e2d\u56fd\u8054\u901a\u3001\u4e2d\u56fd\u79fb\u52a8\u56fd\u9645\u51fa\u53e3\u5e26\u5bbd\u548c\u7ebf\u8def\u4e0d\u540c\u6709\u5173\uff0c\u6240\u4ee5\u4ee5\u5b9e\u6d4b\u4e3a\u51c6\u3002\u53ef\u4ee5\u5148\u9009\u5b9a\u4e00\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u6765\u6309\u7167\u6559\u7a0b\u8fdb\u884c\u642d\u5efa\uff0c\u719f\u6089\u642d\u5efa\u65b9\u6cd5\uff0c\u5f53\u8d26\u53f7\u642d\u5efa\u5b8c\u6210\u5e76\u8fdb\u884c\u4e86bbr\u52a0\u901f\u540e\uff0c\u6d4b\u8bd5\u4e0b\u901f\u5ea6\u81ea\u5df1\u662f\u5426\u6ee1\u610f\uff0c\u5982\u679c\u6ee1\u610f\u90a3\u5c31\u7528\u8fd9\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u7684\u670d\u52a1\u5668\u3002\u5982\u679c\u901f\u5ea6\u4e0d\u592a\u6ee1\u610f\uff0c\u5c31\u4e00\u6b21\u6027\u5f00\u51e0\u53f0\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4f4d\u7f6e\u7684\u670d\u52a1\u5668\uff0c\u7136\u540e\u6309\u7167\u540c\u6837\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u642d\u5efa\u5e76\u6d4b\u8bd5\uff0c\u9009\u62e9\u6700\u4f18\u7684\uff0c\u4e4b\u540e\u628a\u5176\u5b83\u7684\u670d\u52a1\u5668\u5220\u6389\uff0c\u6309\u5c0f\u65f6\u8ba1\u8d39\u6d4b\u8bd5\u6210\u672c\u53ef\u4ee5\u5ffd\u7565\u3002\n\u8d26\u53f7\u5145\u503c\u5982\u56fe\uff1a\n\n\n\u5f00\u901a\u670d\u52a1\u5668\u6b65\u9aa4\u5982\u56fe\uff1a\n\n\n\n\u9009\u62e9vps\u64cd\u4f5c\u7cfb\u7edf\u65f6\uff0c\u4e0d\u8981\u9009centos7\u7cfb\u7edf\uff01\u70b9\u51fb\u56fe\u4e2d\u7684CentOS\u51e0\u4e2a\u5b57\uff0c\u4f1a\u5f39\u51facentos6\uff0c\u7136\u540e\u9009\u4e2dcentos6\uff01entos7\u9ed8\u8ba4\u7684\u9632\u706b\u5899\u53ef\u80fd\u4f1a\u5e72\u6270ssr\u7684\u6b63\u5e38\u8fde\u63a5\uff01\n\n\u63a5\u4e0b\u6765\u8fd9\u4e00\u6b65\u662f\u5f00\u542fvps\u7684ipv6 ip\uff0c\u9009\u586b\u9879\u3002\u5982\u679c\u4f60\u7684\u7535\u8111\u7cfb\u7edf\u53ef\u4ee5\u7528ipv6\uff0c\u90a3\u4e48\u53ef\u4ee5\u52fe\u9009\u6b64\u9879\u3002\u5927\u591a\u6570\u7528\u6237\u6ca1\u6709\u8fd9\u4e2a\u9700\u6c42\uff0c\u4f46\u6709\u4e00\u4e9b\u7528\u6237\u53ef\u80fd\u4f1a\u7528\u5230\uff0c\u6240\u4ee5\u8865\u5145\u4e86\u8fd9\u90e8\u5206\u5185\u5bb9\u3002\n\n\n\u5b8c\u6210\u8d2d\u4e70\u540e\uff0c\u627e\u5230\u7cfb\u7edf\u7684\u5bc6\u7801\u8bb0\u4e0b\u6765\uff0c\u90e8\u7f72\u670d\u52a1\u5668\u65f6\u9700\u8981\u7528\u5230\u3002vps\u7cfb\u7edf\uff08\u63a8\u8350centos6\uff09\u7684\u5bc6\u7801\u83b7\u53d6\u65b9\u6cd5\u5982\u4e0b\u56fe\uff1a\n\n\n\n\u5982\u679c\u4f60\u5f00\u542f\u4e86vps\u7684ipv6\uff0c\u90a3\u4e48\u5728\u540e\u53f0\u7684settings\u9009\u9879\u53ef\u4ee5\u627e\u5230\u670d\u52a1\u5668\u7684ipv6 ip\u3002\u5728\u90e8\u7f72SSR\u8d26\u53f7\u65f6\uff0c\u4f60\u7528ipv6 ip\u5c31\u884c\u3002\u6574\u4e2a\u90e8\u7f72\u53ca\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u8bb0\u5f97\u628a\u7535\u8111\u7cfb\u7edf\u5f00\u542fipv6\u5594\u3002\n\n\n\u5220\u6389\u670d\u52a1\u5668\u6b65\u9aa4\u5982\u4e0b\u56fe\uff1a\n\n\n\n\n\u7b2c\u4e8c\u6b65\uff1a\u90e8\u7f72VPS\u670d\u52a1\u5668\n\u8d2d\u4e70\u670d\u52a1\u5668\u540e\uff0c\u9700\u8981\u90e8\u7f72\u4e00\u4e0b\u3002\u56e0\u4e3a\u4f60\u4e70\u7684\u662f\u865a\u62df\u4e1c\u897f\uff0c\u800c\u4e14\u53c8\u8fdc\u5728\u56fd\u5916\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53ebXshell\u7684\u8f6f\u4ef6\u6765\u8fdc\u7a0b\u90e8\u7f72\u3002Xshell windows\u7248\u4e0b\u8f7d\u5730\u5740\uff1a\n\u56fd\u5916\u4e91\u76d81\u4e0b\u8f7d \n\u56fd\u5916\u4e91\u76d82\u4e0b\u8f7d \u63d0\u53d6\u5bc6\u7801\uff1a666\n\u56fd\u5916\u4e91\u76d83\u4e0b\u8f7d \u5bc6\u7801\uff1a123\n\u5982\u679c\u4f60\u662f\u82f9\u679c\u7535\u8111\u64cd\u4f5c\u7cfb\u7edf\uff0c\u66f4\u7b80\u5355\uff0c\u65e0\u9700\u4e0b\u8f7dxshell\uff0c\u7cfb\u7edf\u53ef\u4ee5\u76f4\u63a5\u8fde\u63a5VPS\u3002\u6253\u5f00\u7ec8\u7aef\uff08Terminal\uff09\uff0c\u8f93\u5165ssh root@ip  \u5176\u4e2d\u201cip\u201d\u66ff\u6362\u6210\u4f60VPS\u7684ip, \u6309\u56de\u8f66\u952e\uff0c\u7136\u540e\u590d\u5236\u7c98\u8d34\u5bc6\u7801\uff0c\u6309\u56de\u8f66\u952e\u5373\u53ef\u767b\u5f55\u3002\u7c98\u8d34\u5bc6\u7801\u65f6\u6709\u53ef\u80fd\u4e0d\u663e\u793a\u5bc6\u7801\uff0c\u4f46\u4e0d\u5f71\u54cd\uff0c \u53c2\u8003\u8bbe\u7f6e\u65b9\u6cd5  \u5982\u679c\u4e0d\u80fd\u7528MAC\u81ea\u5e26\u7684\u7ec8\u7aef\u8fde\u63a5\u7684\u8bdd\uff0c\u76f4\u63a5\u7f51\u4e0a\u641c\u201cMAC\u8fde\u63a5SSH\u7684\u8f6f\u4ef6\u201d\uff0c\u6709\u5f88\u591a\uff0c\u7136\u540e\u901a\u8fc7\u8f6f\u4ef6\u6765\u8fde\u63a5vps\u670d\u52a1\u5668\u5c31\u884c\uff0c\u5177\u4f53\u64cd\u4f5c\u65b9\u5f0f\u53c2\u8003windows xshell\u3002\n\n\u90e8\u7f72\u6559\u7a0b\uff1a\n\u4e0b\u8f7dxshell\u8f6f\u4ef6\u5e76\u5b89\u88c5\u540e\uff0c\u6253\u5f00\u8f6f\u4ef6\n\n\u9009\u62e9\u6587\u4ef6\uff0c\u65b0\u5efa\n\n\u968f\u4fbf\u53d6\u4e2a\u540d\u5b57\uff0c\u7136\u540e\u628a\u4f60\u7684\u670d\u52a1\u5668ip\u586b\u4e0a\n\n\u8fde\u63a5\u56fd\u5916ip\u5373\u670d\u52a1\u5668\u65f6\uff0c\u8f6f\u4ef6\u4f1a\u5148\u540e\u63d0\u9192\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u7528\u6237\u540d\u9ed8\u8ba4\u90fd\u662froot\uff0c\u5bc6\u7801\u662f\u4f60\u8d2d\u4e70\u7684\u670d\u52a1\u5668\u7cfb\u7edf\u7684\u5bc6\u7801\u3002\n\u5982\u679cxshell\u8fde\u4e0d\u4e0a\u670d\u52a1\u5668\uff0c\u6ca1\u6709\u5f39\u51fa\u8ba9\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u8f93\u5165\u6846\uff0c\u8868\u660e\u4f60\u5f00\u5230\u7684ip\u662f\u4e00\u4e2a\u88ab\u5899\u7684ip\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u91cd\u65b0\u5f00\u65b0\u7684\u670d\u52a1\u5668\uff0c\u76f4\u5230\u80fd\u7528xshell\u8fde\u4e0a\u4e3a\u6b62\uff0c\u8010\u5fc3\u70b9\u54e6\uff01\u5982\u679c\u540c\u4e00\u4e2a\u5730\u533a\u5f00\u4e86\u591a\u53f0\u670d\u52a1\u5668\u8fd8\u662f\u4e0d\u884c\u7684\u8bdd\uff0c\u53ef\u4ee5\u6362\u5176\u5b83\u5730\u533a\u3002\n\n\n\u8fde\u63a5\u6210\u529f\u540e\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u590d\u5236\u7c98\u8d34\u4ee3\u7801\u90e8\u7f72\u4e86\u3002\nCentOS6/Debian6/Ubuntu14 ShadowsocksR\u4e00\u952e\u90e8\u7f72\u7ba1\u7406\u811a\u672c\uff1a\n\nyum -y install wget\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n\u5907\u7528\u811a\u672c\uff1a\nyum -y install wget\nwget -N --no-check-certificate https://softs.fun/Bash/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u4ee3\u7801\u5206\u5272\u7ebf\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\u590d\u5236\u4e0a\u9762\u7684\u4ee3\u7801\u5230VPS\u670d\u52a1\u5668\u91cc\uff0c\u6309\u56de\u8f66\u952e\uff0c\u811a\u672c\u4f1a\u81ea\u52a8\u5b89\u88c5\uff0c\u4ee5\u540e\u53ea\u9700\u8981\u8fd0\u884c\u8fd9\u4e2a\u5feb\u6377\u547d\u4ee4\u5c31\u53ef\u4ee5\u51fa\u73b0\u4e0b\u56fe\u7684\u754c\u9762\u8fdb\u884c\u8bbe\u7f6e\uff0c\u5feb\u6377\u7ba1\u7406\u547d\u4ee4\u4e3a\uff1abash ssr.sh\n\n\u5982\u4e0a\u56fe\u51fa\u73b0\u7ba1\u7406\u754c\u9762\u540e\uff0c\u8f93\u5165\u6570\u5b571\u6765\u5b89\u88c5SSR\u670d\u52a1\u7aef\u3002\u5982\u679c\u8f93\u51651\u540e\u4e0d\u80fd\u8fdb\u5165\u4e0b\u4e00\u6b65\uff0c\u90a3\u4e48\u8bf7\u9000\u51faxshell\uff0c\u91cd\u65b0\u8fde\u63a5vps\u670d\u52a1\u5668\uff0c\u7136\u540e\u8f93\u5165\u5feb\u6377\u7ba1\u7406\u547d\u4ee4bash ssr.sh \u518d\u5c1d\u8bd5\u3002\n\n\u6839\u636e\u4e0a\u56fe\u63d0\u793a\uff0c\u4f9d\u6b21\u8f93\u5165\u81ea\u5df1\u60f3\u8bbe\u7f6e\u7684\u7aef\u53e3\u548c\u5bc6\u7801 (\u5bc6\u7801\u5efa\u8bae\u7528\u590d\u6742\u70b9\u7684\u5b57\u6bcd\u7ec4\u5408\uff0c\u7aef\u53e3\u53f7\u4e3a40-65535\u4e4b\u95f4\u7684\u6570\u5b57)\uff0c\u56de\u8f66\u952e\u7528\u4e8e\u786e\u8ba4\n\u6ce8\uff1a\u5173\u4e8e\u7aef\u53e3\u7684\u8bbe\u7f6e\uff0c\u603b\u7684\u7f51\u7edc\u603b\u7aef\u53e3\u67096\u4e07\u591a\u4e2a\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u4efb\u610f\u8bbe\u7f6e\u3002\u4f46\u662f\u6709\u7684\u5730\u533a\u9700\u8981\u8bbe\u7f6e\u7279\u6b8a\u7684\u7aef\u53e3\u624d\u6709\u6548\uff0c\u4e00\u4e9b\u7279\u6b8a\u7684\u7aef\u53e3\u6bd4\u598280\u3001143\u3001443\u30011433\u30013306\u30013389\u30018080\u3002\n\n\u5982\u4e0a\u56fe\uff0c\u9009\u62e9\u60f3\u8bbe\u7f6e\u7684\u52a0\u5bc6\u65b9\u5f0f\uff0c\u6bd4\u598210\uff0c\u6309\u56de\u8f66\u952e\u786e\u8ba4\n\u63a5\u4e0b\u6765\u662f\u9009\u62e9\u534f\u8bae\u63d2\u4ef6\uff0c\u5982\u4e0b\u56fe\uff1a\n\n\n\u9009\u62e9\u5e76\u786e\u8ba4\u540e\uff0c\u4f1a\u51fa\u73b0\u4e0a\u56fe\u7684\u754c\u9762\uff0c\u63d0\u793a\u4f60\u662f\u5426\u9009\u62e9\u517c\u5bb9\u539f\u7248\uff0c\u8fd9\u91cc\u7684\u539f\u7248\u6307\u7684\u662fSS\u5ba2\u6237\u7aef\uff08SS\u5ba2\u6237\u7aef\u6ca1\u6709\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u9009\u9879\uff09\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u8fdb\u884c\u9009\u62e9\uff0c\u6f14\u793a\u9009\u62e9y\n\u4e4b\u540e\u8fdb\u884c\u6df7\u6dc6\u63d2\u4ef6\u7684\u8bbe\u7f6e\u3002\n\u6ce8\u610f\uff1a\u5982\u679c\u534f\u8bae\u662forigin\uff0c\u90a3\u4e48\u6df7\u6dc6\u4e5f\u5fc5\u987b\u662fplain\uff1b\u5982\u679c\u534f\u8bae\u4e0d\u662forigin\uff0c\u90a3\u4e48\u6df7\u6dc6\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u3002\u6709\u7684\u5730\u533a\u9700\u8981\u628a\u6df7\u6dc6\u8bbe\u7f6e\u6210plain\u624d\u597d\u7528\u3002\u56e0\u4e3a\u6df7\u6dc6\u4e0d\u603b\u662f\u6709\u6548\u679c\uff0c\u8981\u770b\u5404\u5730\u533a\u7684\u7b56\u7565\uff0c\u6709\u65f6\u5019\u4e0d\u6df7\u6dc6\uff08plain\uff09\u8ba9\u5176\u770b\u8d77\u6765\u50cf\u968f\u673a\u6570\u636e\u66f4\u597d\u3002\uff08\u7279\u522b\u6ce8\u610f\uff1atls 1.2_ticket_auth\u5bb9\u6613\u53d7\u5230\u5e72\u6270\uff01\u8bf7\u9009\u62e9\u9664tls\u5f00\u5934\u4ee5\u5916\u7684\u5176\u5b83\u6df7\u6dc6\uff01\uff01\uff01\uff09 \n\n\u8fdb\u884c\u6df7\u6dc6\u63d2\u4ef6\u7684\u8bbe\u7f6e\u540e\uff0c\u4f1a\u4f9d\u6b21\u63d0\u793a\u4f60\u5bf9\u8bbe\u5907\u6570\u3001\u5355\u7ebf\u7a0b\u9650\u901f\u548c\u7aef\u53e3\u603b\u9650\u901f\u8fdb\u884c\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u503c\u662f\u4e0d\u8fdb\u884c\u9650\u5236\uff0c\u4e2a\u4eba\u4f7f\u7528\u7684\u8bdd\uff0c\u9009\u62e9\u9ed8\u8ba4\u5373\u53ef\uff0c\u5373\u76f4\u63a5\u6572\u56de\u8f66\u952e\u3002\n\u6ce8\u610f\uff1a\u5173\u4e8e\u9650\u5236\u8bbe\u5907\u6570\uff0c\u8fd9\u4e2a\u534f\u8bae\u5fc5\u987b\u662f\u975e\u539f\u7248\u4e14\u4e0d\u517c\u5bb9\u539f\u7248\u624d\u6709\u6548\uff0c\u4e5f\u5c31\u662f\u5fc5\u987b\u4f7f\u7528SSR\u534f\u8bae\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u6709\u6548\uff01\n\n\u4e4b\u540e\u4ee3\u7801\u5c31\u6b63\u5f0f\u81ea\u52a8\u90e8\u7f72\u4e86\uff0c\u5230\u4e0b\u56fe\u6240\u793a\u7684\u4f4d\u7f6e\uff0c\u63d0\u793a\u4f60\u4e0b\u8f7d\u6587\u4ef6\uff0c\u8f93\u5165\uff1ay\n\n\u8010\u5fc3\u7b49\u5f85\u4e00\u4f1a\uff0c\u51fa\u73b0\u4e0b\u9762\u7684\u754c\u9762\u5373\u90e8\u7f72\u5b8c\u6210\uff1a\n\n\n\u6839\u636e\u4e0a\u56fe\u5c31\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u8bbe\u7f6e\u7684SSR\u8d26\u53f7\u4fe1\u606f\uff0c\u5305\u62ecIP\u3001\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u63d2\u4ef6\u3001\u6df7\u6dc6\u63d2\u4ef6\uff0c\u8fd9\u4e9b\u4fe1\u606f\u9700\u8981\u586b\u5165\u4f60\u7684SSR\u5ba2\u6237\u7aef\u3002\u5982\u679c\u4e4b\u540e\u60f3\u4fee\u6539\u8d26\u53f7\u4fe1\u606f\uff0c\u76f4\u63a5\u8f93\u5165\u5feb\u6377\u7ba1\u7406\u547d\u4ee4\uff1abash ssr.sh \u8fdb\u5165\u7ba1\u7406\u754c\u9762\uff0c\u9009\u62e9\u76f8\u5e94\u7684\u6570\u5b57\u6765\u8fdb\u884c\u4e00\u952e\u4fee\u6539\u3002\u4f8b\u5982\uff1a\n\n\n\u811a\u672c\u6f14\u793a\u7ed3\u675f\u3002\n\u6b64\u811a\u672c\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u90e8\u7f72\u4e00\u6b21\u5373\u53ef\u3002\u6700\u540e\u53ef\u4ee5\u91cd\u542f\u670d\u52a1\u5668\u786e\u4fdd\u90e8\u7f72\u751f\u6548\uff08\u4e00\u822c\u60c5\u51b5\u4e0d\u91cd\u542f\u4e5f\u53ef\u4ee5\uff09\u3002\u91cd\u542f\u9700\u8981\u5728\u547d\u4ee4\u680f\u91cc\u8f93\u5165reboot \uff0c\u8f93\u5165\u547d\u4ee4\u540e\u7a0d\u5fae\u7b49\u5f85\u4e00\u4f1a\u670d\u52a1\u5668\u5c31\u4f1a\u81ea\u52a8\u91cd\u542f\uff0c\u4e00\u822c\u91cd\u542f\u8fc7\u7a0b\u9700\u89812\uff5e5\u5206\u949f\uff0c\u91cd\u542f\u8fc7\u7a0b\u4e2dXshell\u4f1a\u81ea\u52a8\u65ad\u5f00\u8fde\u63a5\uff0c\u7b49VPS\u91cd\u542f\u597d\u540e\u624d\u53ef\u4ee5\u7528Xshell\u8f6f\u4ef6\u8fdb\u884c\u8fde\u63a5\u3002\u5982\u679c\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u5361\u5728\u67d0\u4e2a\u4f4d\u7f6e\u8d85\u8fc710\u5206\u949f\uff0c\u53ef\u4ee5\u7528xshell\u8f6f\u4ef6\u65ad\u5f00\uff0c\u7136\u540e\u91cd\u65b0\u8fde\u63a5\u4f60\u7684ip\uff0c\u518d\u590d\u5236\u4ee3\u7801\u8fdb\u884c\u90e8\u7f72\u3002\n\n\u7b2c\u4e09\u6b65\uff1a\u4e00\u952e\u52a0\u901fVPS\u670d\u52a1\u5668\n\u6b64\u52a0\u901f\u6559\u7a0b\u4e3a\u8c37\u6b4cBBR\u52a0\u901f,Vultr\u7684\u670d\u52a1\u5668\u6846\u67b6\u53ef\u4ee5\u88c5BBR\u52a0\u901f\uff0c\u52a0\u901f\u540e\u5bf9\u901f\u5ea6\u7684\u63d0\u5347\u5f88\u660e\u663e\uff0c\u6240\u4ee5\u63a8\u8350\u90e8\u7f72\u52a0\u901f\u811a\u672c\u3002\u8be5\u52a0\u901f\u65b9\u6cd5\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u90e8\u7f72\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\n\u6309\u7167\u7b2c\u4e8c\u6b65\u7684\u6b65\u9aa4\uff0c\u8fde\u63a5\u670d\u52a1\u5668ip\uff0c\u767b\u5f55\u6210\u529f\u540e\uff0c\u5728\u547d\u4ee4\u680f\u91cc\u7c98\u8d34\u4ee5\u4e0b\u4ee3\u7801\uff1a\n\u3010\u8c37\u6b4cBBR\u52a0\u901f\u6559\u7a0b\u3011\nyum -y install wget\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\nchmod +x bbr.sh\n./bbr.sh\n\u628a\u4e0a\u9762\u6574\u4e2a\u4ee3\u7801\u590d\u5236\u540e\u7c98\u8d34\u8fdb\u53bb\uff0c\u4e0d\u52a8\u7684\u65f6\u5019\u6309\u56de\u8f66\uff0c\u7136\u540e\u8010\u5fc3\u7b49\u5f85\uff0c\u6700\u540e\u91cd\u542fvps\u670d\u52a1\u5668\u5373\u53ef\u3002\n\u6f14\u793a\u5f00\u59cb\uff0c\u5982\u56fe\uff1a\n\u590d\u5236\u5e76\u7c98\u8d34\u4ee3\u7801\u540e\uff0c\u6309\u56de\u8f66\u952e\u786e\u8ba4\n\n\u5982\u4e0b\u56fe\u63d0\u793a\uff0c\u6309\u4efb\u610f\u952e\u7ee7\u7eed\u90e8\u7f72\n\n\n\u90e8\u7f72\u5230\u4e0a\u56fe\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u7b49\u5f853\uff5e6\u5206\u949f\n\n\u6700\u540e\u8f93\u5165y\u91cd\u542f\u670d\u52a1\u5668\uff0c\u5982\u679c\u8f93\u5165y\u63d0\u793acommand not found \uff0c\u63a5\u7740\u8f93\u5165reboot\u6765\u91cd\u542f\u670d\u52a1\u5668\uff0c\u786e\u4fdd\u52a0\u901f\u751f\u6548\uff0cbbr\u52a0\u901f\u811a\u672c\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u88c5\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\n\u670d\u52a1\u5668\u91cd\u542f\u6210\u529f\u5e76\u91cd\u65b0\u8fde\u63a5\u670d\u52a1\u5668\u540e\uff0c\u8f93\u5165\u547d\u4ee4lsmod | grep bbr  \u5982\u679c\u51fa\u73b0tcp_bbr\u5b57\u6837\u8868\u793abbr\u5df2\u5b89\u88c5\u5e76\u542f\u52a8\u6210\u529f\u3002\u5982\u56fe\uff1a\n\n\n\u8d2d\u4e70vps\u670d\u52a1\u5668\u540e\uff0cip\u6709\u4e86\uff0c\u901a\u8fc7\u90e8\u7f72\uff0c\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u548c\u6df7\u6dc6\u4e5f\u6709\u4e86\uff0c\u6700\u540e\u5c06\u8fd9\u4e9b\u4fe1\u606f\u586b\u5165SSR\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u7ffb\u5899\u5566\u3002\n\u6709\u4e86\u8d26\u53f7\u540e\uff0c\u6253\u5f00SSR\u5ba2\u6237\u7aef\uff0c\u586b\u4e0a\u4fe1\u606f\uff0c\u8fd9\u91cc\u4ee5windows\u7248\u7684SSR\u5ba2\u6237\u7aef\u4e3a\u4f8b\u5b50\uff1a\n\n\u5728\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u586b\u4e0a\u670d\u52a1\u5668ip\u3001\u670d\u52a1\u5668\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u548c\u6df7\u6dc6\uff0c\u6700\u540e\u5c06\u6d4f\u89c8\u5668\u7684\u4ee3\u7406\u8bbe\u7f6e\u4e3a\uff08http\uff09127.0.0.1\u548c1080\u5373\u53ef\u3002\u8d26\u53f7\u7684\u7aef\u53e3\u53f7\u5c31\u662f\u4f60\u81ea\u5df1\u8bbe\u7f6e\u7684\uff0c\u800c\u8981\u4e0a\u7f51\u7684\u6d4f\u89c8\u5668\u7684\u7aef\u53e3\u53f7\u662f1080\uff0c\u56fa\u5b9a\u7684\uff0c\u8c37\u6b4c\u6d4f\u89c8\u5668\u53ef\u4ee5\u901a\u8fc7 SwitchyOmega \u63d2\u4ef6\u6765\u8bbe\u7f6e\u3002\n\u542f\u52a8SSR\u5ba2\u6237\u7aef\u540e\uff0c\u53f3\u952eSSR\u5ba2\u6237\u7aef\u56fe\u6807\uff0c\u9009\u62e9\u7b2c\u4e00\u4e2a\u201c\u7cfb\u7edf\u4ee3\u7406\u6a21\u5f0f\u201d\uff0c\u91cc\u9762\u67093\u4e2a\u5b50\u9009\u9879\uff0c\u9009\u62e9\"\u5168\u5c40\u6a21\u5f0f\u201c\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u7528\u6d4f\u89c8\u5668\u8bbe\u7f6e\u597d\u4e86\u7684\u4ee3\u7406\u6a21\u5f0f\uff08http\uff09127.0.0.1\u548c1080\u7ffb\u5899\uff0c\u6b64\u6a21\u5f0f\u4e0b\u6240\u6709\u7684\u7f51\u7ad9\u90fd\u4f1a\u8d70SSR\u4ee3\u7406\u3002\uff08\u9002\u5408\u65b0\u624b\uff09\n\n\n\u5e38\u89c1\u95ee\u9898\u53c2\u8003\u89e3\u51b3\u65b9\u6cd5\uff1a\n1\u3001\u7528\u4e86\u4e00\u6bb5\u65f6\u95f4\u53d1\u73b0ssr\u8d26\u53f7\u7528\u4e0d\u4e86\u4e86\n\u9996\u5148ping\u4e00\u4e0b\u81ea\u5df1\u7684ip\uff0c\u770b\u770b\u80fd\u4e0d\u80fdping\u7684\u901a\uff0cping\u4e0d\u901a\u90a3\u4e48\u5c31\u662fip\u88ab\u5899\u4e86\uff0cip\u88ab\u5899\u65f6\uff0cxshell\u4e5f\u4f1a\u8fde\u63a5\u4e0d\u4e0a\u670d\u52a1\u5668\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u91cd\u65b0\u90e8\u7f72\u4e00\u4e2a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u65b0\u7684\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\u3002\u5173\u4e8e\u600e\u4e48ping ip\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\uff0c\u6216\u8005\u7528xshell\u8f6f\u4ef6\u8fde\u63a5\u670d\u52a1\u5668\u6765\u5224\u65ad\uff0c\u8fde\u4e0d\u4e0a\u5373\u662f\u88ab\u5899\u4e86\u3002vultr\u5f00\u901a\u548c\u5220\u9664\u670d\u52a1\u5668\u975e\u5e38\u65b9\u4fbf\uff0c\u65b0\u670d\u52a1\u5668\u5373\u65b0ip\uff0c\u5927\u591a\u6570vps\u670d\u52a1\u5546\u90fd\u6ca1\u6709\u8fd9\u6837\u7684\u670d\u52a1\uff0c\u4e00\u822c\u7684vps\u670d\u52a1\u5546\u53ef\u80fd\u4f1a\u63d0\u4f9b\u514d\u8d39\u66f4\u63621\u6b21ip\u7684\u670d\u52a1\u3002\n2\u3001\u521a\u642d\u5efa\u597d\u7684ssr\u8d26\u53f7\uff0cip\u80fdping\u901a\uff0c\u4f46\u662f\u8fd8\u662f\u7528\u4e0d\u4e86\n\u9996\u9009\u6392\u9664\u6740\u6bd2\u8f6f\u4ef6\u7684\u5e72\u6270\uff0c\u5c24\u5176\u662f\u56fd\u4ea7\u6740\u6bd2\u8f6f\u4ef6\uff0c\u6bd4\u5982360\u5b89\u5168\u536b\u751f\u3001360\u6740\u6bd2\u8f6f\u4ef6\u3001\u817e\u8baf\u7ba1\u5bb6\u3001\u91d1\u5c71\u536b\u751f\u7b49\u3002\u8fd9\u4e9b\u4e1c\u897f\u5f88\u5bb9\u6613\u5e72\u6270\u7ffb\u5899\u4e0a\u7f51\uff0c\u5982\u679c\u4f60\u7684\u7535\u8111\u5b89\u88c5\u4e86\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u5efa\u8bae\u81f3\u5c11\u7ffb\u5899\u65f6\u522b\u7528\uff0c\u6700\u597d\u5378\u8f7d\u3002\u5176\u6b21\uff0c\u68c0\u67e5\u4e0bSSR\u4fe1\u606f\u662f\u5426\u586b\u5199\u6b63\u786e\u3002\u6d4f\u89c8\u5668\u7684\u4ee3\u7406\u65b9\u5f0f\u662f\u5426\u662fssr\u4ee3\u7406\uff0c\u5373\uff08HTTP\uff09127.0.0.1 \u548c1080\u3002\u5982\u679c\u4ee5\u4e0a\u6761\u4ef6\u90fd\u6392\u9664\uff0c\u8fd8\u662f\u7528\u4e0d\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u66f4\u6362\u7aef\u53e3\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u3001\u6df7\u6dc6\uff0c\u6216\u8005\u66f4\u6362\u670d\u52a1\u5668\u4f4d\u7f6e\u3002\u53e6\u5916\uff0c\u5982\u679c\u4f60\u7684vps\u670d\u52a1\u5668\u914d\u7f6e\u7684\u662fSSR\u8d26\u53f7\uff0c\u5373\u6709\u534f\u8bae\u548c\u6df7\u6dc6\u4e14\u6ca1\u6709\u517c\u5bb9\u539f\u7248(SS\u7248\uff09\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u4f7f\u7528SSSR\u5ba2\u6237\u7aef\u6765\u4f7f\u7528\u8d26\u53f7\uff0c\u56e0\u4e3aSS\u5ba2\u6237\u7aef\u6ca1\u6709\u586b\u5199\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u9009\u9879\u3002\n3\u3001\u6709\u7684\u5730\u533a\u9700\u8981\u628a\u6df7\u6dc6\u53c2\u6570\u8bbe\u7f6e\u6210plain\u624d\u597d\u7528\u3002\u56e0\u4e3a\u6df7\u6dc6\u4e0d\u603b\u662f\u6709\u6548\u679c\uff0c\u8981\u770b\u5404\u5730\u533a\u7684\u7b56\u7565\uff0c\u6709\u65f6\u5019\u4e0d\u6df7\u6dc6\uff08plain\uff09\u8ba9\u5176\u770b\u8d77\u6765\u50cf\u968f\u673a\u6570\u636e\u66f4\u597d\u3002\n4\u3001\u7535\u8111\u80fd\u7528\u4f46\u624b\u673a\u7528\u4e0d\u4e86\n\u5982\u679c\u4f60\u7684\u624b\u673a\u7528\u7684\u662fSS\u5ba2\u6237\u7aef\uff0cSS\u5ba2\u6237\u7aef\u6ca1\u6709\u586b\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u5730\u65b9\uff0c\u5982\u679c\u4f60\u90e8\u7f72\u7684\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u65f6\u5019\u6ca1\u6709\u9009\u62e9\u517c\u5bb9\u539f\u7248\uff08SS\u7248\uff09\uff0c\u56e0\u6b64\u624b\u673a\u662f\u7528\u4e0d\u4e86\u7684\u3002\u8fd9\u4e2a\u65f6\u5019\u4f60\u628a\u534f\u8bae\u5f04\u6210\u517c\u5bb9\u539f\u7248\u3001\u6df7\u6dc6\u4e5f\u8bbe\u7f6e\u6210\u517c\u5bb9\u539f\u7248\u5373\u53ef\u3002\u6216\u8005\u76f4\u63a5\u5c06\u534f\u8bae\u8bbe\u7f6e\u6210origin\u4e14\u6df7\u6dc6\u8bbe\u7f6e\u6210plain\u3002\n5\u3001vps\u7684\u670d\u52a1\u5668\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u8981\u7528\u7684\u592a\u9ad8\uff0c\u592a\u9ad8\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7cfb\u7edf\u7684\u9632\u706b\u5899\u95ee\u9898\u5bfc\u81f4\u642d\u5efa\u7684SSR\u8d26\u53f7\u8fde\u4e0d\u4e0a\uff0c\u5982\u679c\u4f60\u7528\u7684centos\u7cfb\u7edf\uff0c\u5efa\u8bae\u7528centos6\uff0c\u4e0d\u8981\u7528centos7\u3002\u5982\u679c\u4f60\u524d\u9762\u4e0d\u5c0f\u5fc3\u88c5\u4e86centos7\u7cfb\u7edf\uff0c\u90a3\u4e48\u53ea\u80fd\u91cd\u88c5\u7cfb\u7edf\u6216\u8005\u91cd\u65b0\u90e8\u7f72\u65b0\u7684vps\u670d\u52a1\u5668\u3002\n6\u3001vultr\u670d\u52a1\u5546\u63d0\u4f9b\u7684vps\u670d\u52a1\u5668\u662f\u5355\u5411\u6d41\u91cf\u8ba1\u7b97\uff0c\u6709\u7684vps\u670d\u52a1\u5546\u662f\u53cc\u5411\u6d41\u91cf\u8ba1\u7b97\uff0c\u5355\u5411\u6d41\u91cf\u8ba1\u7b97\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u66f4\u5b9e\u60e0\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u5728vps\u670d\u52a1\u5668\u4e0a\u90e8\u7f72SSR\u670d\u52a1\u7aef\u540e\uff0c\u518d\u7528SSR\u5ba2\u6237\u7aef\u7ffb\u5899\uff0c\u6240\u4ee5SSR\u670d\u52a1\u7aef\u5c31\u76f8\u5f53\u4e8e\u4e2d\u8f6c\uff0c\u6bd4\u5982\u6211\u4eec\u770b\u4e00\u4e2a\u89c6\u9891\uff0c\u5fc5\u7136\u4f1a\u4ea7\u751f\u6d41\u91cf\uff0c\u5047\u5982\u6d88\u8017\u6d41\u91cf80M\uff0c\u90a3\u4e48VPS\u670d\u52a1\u5668\u4f1a\u4ea7\u751f\u4e0a\u4f2080M\u548c\u4e0b\u8f7d80M\u6d41\u91cf\uff0cvultr\u670d\u52a1\u5546\u53ea\u8ba1\u7b97\u5355\u5411\u768480M\u6d41\u91cf\u3002\u5982\u679c\u662f\u53cc\u5411\u8ba1\u7b97\u6d41\u91cf\uff0c\u90a3\u4e48\u4f1a\u8ba1\u7b97\u4e3a160M\u6d41\u91cf\u3002\n7\u3001\u5982\u679c\u4f60\u60f3\u628a\u642d\u5efa\u7684\u8d26\u53f7\u7ed9\u591a\u4eba\u4f7f\u7528\uff0c\u4e0d\u7528\u989d\u5916\u8bbe\u7f6e\u7aef\u53e3\uff0c\u56e0\u4e3a\u4e00\u4e2a\u8d26\u53f7\u5c31\u53ef\u4ee5\u591a\u4eba\u4f7f\u7528\u3002\u4e00\u822c5\u7f8e\u5143\u7684\u670d\u52a1\u5668\u53ef\u4ee5\u540c\u65f6\u652f\u630140\u4eba\u5728\u7ebf\u4f7f\u7528\u3002\n\u5982\u679c\u60f3\u5b9e\u73b0\u652f\u6301\u6bcf\u4e2a\u7528\u6237(\u7aef\u53e3)\u4e0d\u540c\u7684\u52a0\u5bc6\u65b9\u5f0f/\u534f\u8bae/\u6df7\u6dc6\u7b49\uff0c\u5e76\u4e14\u7ba1\u7406\u6d41\u91cf\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u8003\u591a\u7528\u6237\u914d\u7f6e\u811a\u672c\uff1awget -N --no-check-certificate https://softs.fun/Bash/ssrmu.sh && chmod +x ssrmu.sh && bash ssrmu.sh  \u5907\u7528\u811a\u672c\uff1awget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh && chmod +x ssrmu.sh && bash ssrmu.sh  \u5b89\u88c5\u540e\u7ba1\u7406\u547d\u4ee4\u4e3a\uff1abash ssrmu.sh\n\u6ce8\u610f\uff1a\u8fd9\u4e2a\u591a\u7528\u6237\u914d\u7f6e\u811a\u672c\u548c\u6559\u7a0b\u5185\u5bb9\u7684\u811a\u672c\u65e0\u6cd5\u5171\u5b58\uff01\u8981\u60f3\u7528\u8fd9\u4e2a\u811a\u672c\uff0c\u628a\u4e4b\u524d\u7684\u811a\u672c\u5378\u8f7d\uff0c\u8f93\u5165\u7ba1\u7406\u547d\u4ee4bash ssr.sh \uff0c\u9009\u62e93\uff0c\u5378\u8f7dShadowsocksR\u5373\u53ef\u5378\u8f7d\u539f\u811a\u672c\u3002\n8\u3001vultr\u670d\u52a1\u5668\u6bcf\u6708\u6709\u6d41\u91cf\u9650\u5236\uff0c\u8d85\u8fc7\u9650\u5236\u540e\u670d\u52a1\u5668\u4e0d\u4f1a\u88ab\u505c\u6b62\u8fd0\u884c\uff0c\u4f46\u662f\u8d85\u51fa\u7684\u6d41\u91cf\u4f1a\u88ab\u989d\u5916\u6536\u8d39\u3002\u5317\u7f8e\u548c\u897f\u6b27\u5730\u533a\u7684\u670d\u52a1\u5668\u8d85\u51fa\u6d41\u91cf\u540e\uff0c\u591a\u51fa\u7684\u90e8\u5206\u6536\u8d39\u4e3a0.01\u7f8e\u5143/G\u3002\u65b0\u52a0\u5761\u548c\u65e5\u672c\u4e1c\u4eac\uff08\u65e5\u672c\uff09\u4e3a0.025\u7f8e\u5143/G\uff0c\u6089\u5c3c\uff08\u6fb3\u5927\u5229\u4e9a\uff09\u4e3a0.05\u7f8e\u5143/G\u3002\u628avultr\u670d\u52a1\u5668\u5220\u6389\uff0c\u5f00\u901a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u6d41\u91cf\u4f1a\u4ece0\u5f00\u59cb\u91cd\u65b0\u8ba1\u7b97\u3002\n9\u3001vultr\u600e\u6837\u624d\u80fd\u7533\u8bf7\u9000\u6b3e\u5462\uff1f\nvultr\u548c\u5176\u4ed6\u7684\u56fd\u5916\u5546\u5bb6\u4e00\u6837\uff0c\u90fd\u662f\u4f7f\u7528\u5de5\u5355\u7684\u5f62\u5f0f\u4e0e\u5ba2\u670d\u8054\u7cfb\uff0c\u5982\u679c\u9700\u8981\u9000\u6b3e\uff0c\u76f4\u63a5\u5728\u540e\u53f0\u70b9\u51fbsupport\uff0c\u9009\u62e9open ticket\u65b0\u5f00\u4e00\u4e2a\u5de5\u5355\uff0c\u9009\u62e9billing question\u8d22\u52a1\u95ee\u9898\uff0c\u7b80\u5355\u7684\u5728\u6587\u672c\u6846\u8f93\u5165\u4f60\u7684\u9000\u6b3e\u7406\u7531\u3002\u6bd4\u5982\uff1aPlease refund all the balance in my account\u3002\u5de5\u5355\u63d0\u4ea4\u4ee5\u540e\u4e00\u822c\u5f88\u5feb\u5c31\u53ef\u4ee5\u7ed9\u4f60\u786e\u8ba4\u9000\u6b3e\uff0c\u82e5\u5e72\u4e2a\u5de5\u4f5c\u65e5\u540e\u5c31\u4f1a\u9000\u56de\u4f60\u7684\u652f\u4ed8\u65b9\u5f0f\u3002\uff08\u5168\u989d\u9000\u6b3e\u7ed3\u675f\u540e\uff0c\u8d26\u53f7\u53ef\u80fd\u4f1a\u88ab\u5220\u9664\uff09\n\u5982\u679c\u82f1\u8bed\u6c34\u5e73\u4e0d\u597d\uff0c\u4f46\u662f\u60f3\u548c\u5ba2\u670d\u8fdb\u884c\u4ea4\u6d41\uff0c\u53ef\u4ee5\u7528\u767e\u5ea6\u5728\u7ebf\u7ffb\u8bd1\uff0c\u81ea\u52a8\u4e2d\u6587\u8f6c\u82f1\u6587\u548c\u82f1\u6587\u8f6c\u4e2d\u6587\u3002\n10\u3001\u8def\u7531\u5668\u4e5f\u53ef\u4ee5\u914d\u7f6ess/ssr\u8d26\u53f7\uff0c\u8be6\u89c1openwrt-ssr\u9879\u76ee\u5730\u5740\uff1ahttps://github.com/ywb94/openwrt-ssr  \n11\u3001\u5982\u679c\u7535\u8111\u60f3\u7528\u642d\u5efa\u7684ss/ssr\u8d26\u53f7\u73a9\u6e38\u620f\uff0c\u5373\u5b9e\u73b0\u7c7b\u4f3cVPN\u5168\u5c40\u4ee3\u7406\uff0c\u53ef\u4ee5\u7528SSTAP\uff0c\u6559\u7a0b\uff1ahttps://www.jianshu.com/p/519e68b74646. ",
    "HHHHHHHHHHHHHHHHHHHHHCS": "Can I apply for a refund? I haven't succeeded in using it for a long time.. ",
    "GaryXu524": "\u676d\u5dde \u57fa\u672c\u4e0d\u80fd\u7528 \u90fd\u4e00\u4e2a\u6708\u4e86\uff0c \u8865\u507f\u6536\u5230\u4e86 \u4f46\u662f\u90fd\u4e0d\u80fd\u7528\u591a\u7ed9\u6211\u4e00\u4e2a\u6708\u6709\u4ec0\u4e48\u7528. ",
    "jiachongliu": "\u4e0d\u80fd\u7528\uff0c\u662f\u9632\u706b\u5899\u5347\u7ea7\u4e86\u5417\uff1f\uff1f\uff1f. ",
    "yurivikyi": "\u88dc\u511f\u5df2\u7d93\u6536\u5230\u4e86\uff0c\u4e0d\u904e\u65b0\u7248\u672c\u9084\u6c92\u63a8\u51fa\uff0c\u8acb\u958b\u767c\u5718\u968a\u591a\u591a\u52a0\u6cb9\uff01. ",
    "xiaopendvd": "\u65b0\u7248\u672c\u6301\u7eed\u6027\u8fd8\u662f\u5f88\u5dee\uff0c\u65ad\u65ad\u7eed\u7eed\u7684\uff0c\u7b49\u5f85\u65b0\u7248. \u4ece\u6628\u5929\u665a\u4e0a\u53c8\u4e0d\u80fd\u7528\u4e86\uff0c\u80fd\u8fde\u63a5\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6253\u4e0d\u5f00\u7f51\u9875. \u8fd9\u4e48\u957f\u65f6\u95f4\u4ee5\u6765\uff0c\u4ecd\u7136\u4e0d\u80fd\u624b\u52a8\u9009\u62e9\u670d\u52a1\u5668\uff0c\u771f\u662f\u5947\u602a. ",
    "JuntingLiu": "\u6700\u8fd1\u76f8\u5bf9\u7a33\u5b9a\u4e86\u70b9\uff0c\u4f46\u65ad\u8fde\u8fd8\u662f\u4f1a\u4e0d\u65f6\u7684\u51fa\u73b0\uff0c\u671b\u5c3d\u5feb\u4fee\u590d\uff0c\u4e5f\u5e0c\u671b ios \u7248\u672c\u80fd\u4eca\u5e74\u63a8\u51fa\uff0c\u52a0\u6cb9...\n. ",
    "Shenloveyun": "\u5509\u5509\u5509\u3002\u7ffb\u5899\u4e0d\u6613. @hhmaizi \u521a\u521a\u5e16\u5b50\u91cc\u7684\u67d0\u8bc4\u8bba\uff0c@jexooooo  \u7684http://u6.gg/emT8M\n\u6211\u6628\u5929\u62b1\u7740\u8bd5\u8bd5\u7684\u5fc3\u60c5\uff0c\u5982\u679c\u662f\u9a97\u5b50\u5c31\u7b97\u4e86\uff0c\u53ef\u4ee5\u7ed5\u9053\u4e86\n\u611f\u89c9O\u7684K\uff0c\u800c\u4e14\u6709ios\u7248\uff0c\u8fd9\u4e2a\u5f88\u597d\u3002\n\u60ca\u8bb6\u7684\u662f\u514d\u8d39\u8bd5\u7528\u67091G\u3002\u3002\u3002\u3002\u3002\u3002\u84dd\u706f\u5c31500M\u3002\u3002\u3002\u5475\u3002\u4e3b\u8981\u662f\u6709\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u6708\u652f\u4ed8\u3002\n\u84dd\u706f\u554a\uff0c\u4ed8\u4e86\u4e00\u5e74\uff0c\u8fd8\u6ca1\u5230\u671f\u5c31\u51fa\u4e86\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\uff1f\uff1f\uff08\u4e5f\u4e0d\u901a\u77e5\u8868\u6001\u4e0b\uff0c\u8fd9\u975e\u5e38\u5f88\u7740\u6025\u4e86\uff09. @zero-chao  \u53f3\u4e0a\u89d2\u70b9\u3010settings\u3011\uff0c\u53d6\u6d88email\uff1f. \u6211\u60f3\u77e5\u9053\uff0c\u8981\u5982\u4f55\u4e89\u53d6\u6d88\u8d39\u8005\u7684\u6743\u76ca\uff1f\uff1f\u672c\u6765\u53ea\u6709\u4e00\u5e74\u6216\u4e24\u5e74\u7684\u9009\u62e9\u4e5f\u4e0d\u60c5\u613f\uff0c\u770b\u5728\u670b\u53cb\u63a8\u8350\u624d\u4e70\u3002\u6ca1\u60f3\u5230\u6362\u6765\u662f\u8fd9\u6837\u7ed3\u679c\u3002\u6211\u53ea\u60f3\u62ff\u56de\u90e8\u5206\u7684\u94b1\uff0c\u90fd\u4e24\u4e2a\u6708\u4e86\u6ca1\u6cd5\u6b63\u5e38\u4f7f\u7528\u3002\u8981\u4e0d\u4e3e\u62a5\u4e86\u5427.... @evan-opener\n\u4e3b\u8981\u662f\u670d\u52a1\u5668\u5207\u5230\u65e5\u672c\uff0c\u65e5\u672c\u5c31\u8fde\u4e0d\u4e0a\u4e86\u3002. \uff1f\uff1f\uff1f\u6211\u8bf4\u600e\u4e48\u6628\u5929\u7a81\u7136\u4e0d\u80fd\u4e0a\u7f51\u4e86\uff0c\u94fe\u63a5\u4e0d\u4e0a\uff0c\u6253\u5f00\u5c31\u79d2\u9000\u554a\uff1f\u84dd\u706f\u6b20\u6211\u56db\u4e2a\u6708\u6d41\u91cf\u8d39\u6211\u627e\u8c01\u8bf4\u7406\u3002\u3002\u3002. ",
    "hhmaizi": "15\u5929\u4e86\uff0c\u5230\u73b0\u5728\u8fd8\u662f\u4e0d\u80fd\u7528\uff0c\u8865\u507f\u4e00\u4e2a\u6708\u6709\u4ec0\u4e48\u610f\u4e49\u5417\uff1f\u803d\u6401\u4e86\u591a\u5c11\u5de5\u4f5c\u554a\u3002\n. \u5927\u5bb6\u8c01\u80fd\u7ed9\u63a8\u8350\u4e2a\u9760\u8c31\u7684vpn, \u51b3\u5b9a\u653e\u5f03lantern\u4e86\u3002\u6ca1\u6709paypall. ",
    "han814992037": "\u8865\u507f\uff0c\u7ba1\u7528\u5417\uff1f\uff1f\uff1f\uff1f\u803d\u8bef\u6211\u591a\u5c11\u4e8b\uff0c\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\u8865\u507f\u4e00\u4e2a\u6708\u5c31\u884c\u4e86\uff1f\uff1f\uff1f\u6211\u5dee\u8fd9\u51e0\u5341\u5757\u94b1\uff1f\uff1f\uff1f\uff1f\u8279\uff0c\u771fTm\u4e0d\u9760\u8c31\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01. ",
    "DrakeXiang": "\u6700\u8fd1\u57fa\u672c\u6ca1\u6cd5\u7528\uff0c\u5509\u3002\u3002. ",
    "zero-chao": "\u8c01\u77e5\u9053\u600e\u4e48\u9000\u8ba2\u8fd9\u4efd\u90ae\u4ef6\n| |\n\u5415\u666f\u8d85\n|\n|\n\u90aeJingchao-lv@163.com\n|\n\u7b7e\u540d\u7531 \u7f51\u6613\u90ae\u7bb1\u5927\u5e08 \u5b9a\u5236\n\u57282018\u5e7408\u670815\u65e5 13:01\uff0cfunggtopp \u5199\u9053\uff1a\n\u8865\u507f\u6709\u5565\u7528\uff0c\u4e0d\u9700\u8981\u8865\u507f\uff0c\u53ea\u8981\u80fd\u987a\u5229\u4f7f\u7528\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.. ",
    "sk5790689": "\u4eca\u5929\u53c8\u641e\u4ec0\u4e48\u554a\uff1f\u4e00\u66f4\u65b0\u5b8c\u65e0\u6cd5\u5728\u4f60\u7684\u7535\u8111\u8fde\u63a5\u84dd\u706f\u3002\u5feb\u70b9\u4fee\u590d\u554a\u3002. 8\u670819\u65e517\uff1a02\u5206\u84dd\u706f\u65e0\u9650\u65ad\u7ebf\u3002\u8fd8\u662f\u65e0\u6cd5\u5c06\u84dd\u706f\u8bbe\u7f6e\u4e3a\u7cfb\u7edf\u4ee3\u7406\u53ea\u4ece\u66f4\u65b0\u5b8c4.8.0\u5c31\u662f\u8fd9\u6837\u3002\n. 9\u67083\u65e523\uff1a00  \u65ad\u7ebf\u65e0\u9650\u8fde\u7ebf\u4e2d\u3002. ",
    "Mahoniin": "\u6b66\u6c49\u7535\u4fe1\uff0c\u4eca\u5929\u53c8\u51fa\u73b0\u670d\u52a1\u5668\u5728JP\uff0cHK\uff0cSG\u4e4b\u95f4\u6765\u56de\u53cd\u590d\u5207\u6362\u7684\u60c5\u51b5\uff0c\u76ee\u524d\u7684\u60c5\u51b5\u662f\u8fde\u63a5HK\u65f6\u6b63\u5e38\uff0c\u8fde\u63a5JP\u65f6\u7f51\u7edc\u54cd\u5e94\u901f\u5ea6\u5f88\u6162\uff0c\u4e00\u4e9b\u4e8c\u7ea7\u9875\u9762\u65e0\u6cd5\u6253\u5f00\uff0c\u8fde\u63a5SG\u65f6\u5b8c\u5168\u65e0\u6cd5\u4f7f\u7528\uff0c\u8bf7\u5c3d\u5feb\u89e3\u51b3\u95ee\u9898. ",
    "zjxy1986": "\u6211\u7528\u4e86\u4e00\u6bb5express vpn \u8fd8\u662f\u4e0d\u9519\u7684 \u6cb9\u7ba1\u81ea\u52a8720p\u6beb\u65e0\u538b\u529b \u4e0d\u8fc7\u5c31\u662f\u6709\u70b9\u8d35\u3002\u3002\u3002\u300280\u5de6\u53f3\u4e00\u4e2a\u6708 \u4e0d\u8fc7\u7528\u6211\u8fd9\u4e2a\u94fe\u63a5 https://www.expressrefer.com/refer-friend?referrer_id=14546108&utm_campaign=referrals&utm_medium=copy_link&utm_source=referral_dashboard \u4f60\u53ef\u4ee5\u989d\u5916\u591a\u83b7\u5f97\u4e00\u4e2a\u6708\uff08\u76f8\u5f53\u4e8e40\u4e00\u4e2a\u6708\uff09 \u5f53\u7136 \u6211\u4e5f\u591a\u5f97\u4e00\u4e2a\u6708  \u4e09\u6761\u7ebf\u8def\u6bd4\u8f83\u7a33 \u9999\u6e2f4 \u4e1c\u4eac1 \u8fd8\u6709\u7f8e\u56fd \u54ea\u4e2a\u5feb\u7528\u54ea\u4e2a\u5c31\u884c . \u786e\u5b9e \u611f\u89c9\u84dd\u706f\u57fa\u672cgg\u4e86  \u8fd8\u662fexpress vpn\u5427\uff0c\u786e\u5b9e\u53ef\u4ee5 \u6cb9\u7ba1\u81ea\u52a8720p\u6beb\u65e0\u538b\u529b \u4e0d\u8fc7\u5c31\u662f\u6709\u70b9\u8d35\u3002\u3002\u3002\u300280\u5de6\u53f3\u4e00\u4e2a\u6708 \u4e0d\u8fc7\u7528\u6211\u8fd9\u4e2a\u94fe\u63a5 https://www.expressrefer.com/refer-friend?referrer_id=14546108&utm_campaign=referrals&utm_medium=copy_link&utm_source=referral_dashboard \u4f60\u53ef\u4ee5\u989d\u5916\u591a\u83b7\u5f97\u4e00\u4e2a\u6708\uff08\u76f8\u5f53\u4e8e40\u4e00\u4e2a\u6708\uff09 \u5f53\u7136 \u6211\u4e5f\u591a\u5f97\u4e00\u4e2a\u6708  \u4e09\u6761\u7ebf\u8def\u6bd4\u8f83\u7a33 \u9999\u6e2f4 \u4e1c\u4eac1 \u8fd8\u6709\u7f8e\u56fd\u7ebf. ",
    "acuityce": "ExpressVPN\u7a33\u5b9a\u597d\u7528\uff0c\u5173\u952e\u662f\u7a33\u5b9a\uff01\uff01\uff01\u901a\u8fc7\u63a8\u8350\u94fe\u63a5\u8d2d\u4e70\u53ef\u900130\u5929\uff1a\nhttps://www.expressrefer.com/refer-friend?referrer_id=18102368&utm_campaign=referrals&utm_medium=copy_link&utm_source=referral_dashboard. ",
    "Eden-Harris": "\u84dd\u706f\u9762\u677f\u7684\u62a5\u544a\u95ee\u9898\u529f\u80fd === alert(\"\u7f13\u5b58\u6e05\u7406\u5b8c\u6210\")\uff0c\u5bf9\u84dd\u706f\u6765\u8bf4\u7528\u6237\u771f\u7684\u662fSB\uff0c\u7528\u6237\u50bb\u50bb\u7684\u63d0\u4ea4\u8868\u5355\u5374\u4e0d\u77e5\u9053\u6839\u672c\u5c31\u6ca1\u6709\u53d1\u9001\u53ea\u662f\u6709\u4e00\u4e2a\u5047\u6548\u679c\uff0c\u66f4\u65e0\u8c08\u53cd\u9988\u3002\n\u6211\u7279\u4e48\u8fd8\u50bb\u50bb\u7684\u8be2\u95ee\uff0c\u53d1\u90a3\u4e48\u591a\u54a8\u8be2\u3002\u3002\u3002\u3002\u3002. # \u9000\u94b1\u662f\u6ca1\u6307\u671b\u4e86\uff0c\u4e00\u6b21\u4e5f\u6ca1\u56de\u590d\u6211\uff1b\u4e3a\u4e86\u4e0d\u5f71\u54cd\u5de5\u4f5c\u8fd8\u662f\u81ea\u5df1\u642d\u5efaSSR\u5427. # \u73b0\u5728\u53c8\u9000\u51fa\u4e00\u4e2a\u9690\u5e01\u6765\u6536\u667a\u5546\u7a0e\uff0c\u5c31\u662f\u8ba9\u4f60\u51b2\u4f1a\u5458\uff0c\u7ee7\u7eed\u4f7f\u7528\u84dd\u706f\u7ed9\u4f60\u9001\u9690\u5e01\uff08\u5176\u5b9e\u5c31\u662f\u62d4\u7528\u6237\u7f8a\u6bdb\uff09\u3002\u3002\u3002\u3002\u3002\u3002\u771f\u5c3c\u739b\u62ff\u7528\u6237\u5f53SB\uff01\n\n. # \u84dd\u706f\u9762\u677f\u7684\u62a5\u544a\u95ee\u9898\u529f\u80fd === alert(\"\u7f13\u5b58\u6e05\u7406\u5b8c\u6210\")\uff0c\u5bf9\u84dd\u706f\u6765\u8bf4\u7528\u6237\u771f\u7684\u662fSB\uff0c\u7528\u6237\u50bb\u50bb\u7684\u63d0\u4ea4\u8868\u5355\u5374\u4e0d\u77e5\u9053\u6839\u672c\u5c31\u6ca1\u6709\u53d1\u9001\u66f4\u65e0\u8c08\u53cd\u9988. ",
    "wangxinshuo426": "\u51fa\u552e\u4e13\u4e1a\u7248\u84dd\u706f\uff0c\u8fd8\u526920\u4e2a\u6708\uff0c\u53ef\u4ee5\u6309\u4e00\u5e74\u7684\u4ef7\u94b1\u5356\u51fa\uff01Email\uff1awszgrwxs@gmail.com\u6216\u8005\u5fae\u4fe1\u53f7\uff1awxs1303353654. ",
    "sangeren1002": "\u4e3a\u4ec0\u4e48\u540c\u4e00\u4e2a\u8d26\u6237\u5728\u4e0d\u540c\u7684\u7ec8\u7aef\u767b\u5f55\u663e\u793a\u4e13\u4e1a\u7248\u5269\u4f59\u65f6\u95f4\u4e0d\u540c. ",
    "DaGeger": "\u8f93\u5165\u6211\u7684\u9080\u8bf7\u7801 9DSGFD \u6765\u83b7\u5f97\u4e09\u4e2a\u6708\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff01\u7acb\u5373\u4e0b\u8f7d https://github.com/getlantern/forum. ",
    "MarkHe1222": "\u8f93\u5165\u6211\u7684\u9080\u8bf7\u7801 YY83YFV \u6765\u83b7\u5f97\u4e09\u4e2a\u6708\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff01\u7acb\u5373\u4e0b\u8f7d https://github.com/getlantern/forum. ",
    "chn475111": "\u6211\u5c31\u60f3\u95ee\u4e00\u4e0b, \u53ef\u4ee5\u9000\u6b3e\u5417?\n\u628a\u53cd\u9988\u8bba\u575b\u90fd\u7ed9\u5173\u95ed\u4e86, \u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u7528\u610f.### ### . ",
    "kasuganosoras": "\u81ea\u5efa\u6210\u672c\u9ad8\uff1f \u6bcf\u4e2a\u6708\u4e8c\u4e09\u5341\u5757\u94b1\uff0c\u6bcf\u987f\u996d\u5c11\u5403\u70b9\u90fd\u80fd\u7701\u51fa\u6765\n\u5bb9\u6613\u88ab\u5899\uff1f \u627e\u4e2a\u6ca1\u4ec0\u4e48\u540d\u6c14\u7684\u670d\u52a1\u5546\u79df\uff0c\u522b\u62ff\u6765\u5f00\u673a\u573a\uff0c\u6211\u81ea\u5df1\u670d\u52a1\u5668\u7528\u4e86\u534a\u5e74\u4e5f\u6ca1\u88ab\u5899\n\u6362IP\u6298\u817e\uff1f \u5220\u9664\u673a\u5668\u518d\u5f00\uff0c\u5341\u5206\u949f\u90fd\u4e0d\u7528\uff0c\u800c\u4e14\u88ab\u5899\u51e0\u7387\u5c0f\u7684\u5f88\uff0c\u6839\u672c\u4e0d\u7528\u62c5\u5fc3\n\u81ea\u5df1\u7684\u7f8e\u56fd CN2 \u670d\u52a1\u5668\uff0c\u5171\u4eab G \u53e3\u5bf9\u7b49\uff0c\u6211\u5bb6\u91cc 500M \u4e0b\u884c\u80fd\u8dd1\u6ee1\uff0c\u770b Youtube 8K \u65e0\u538b\u529b\n\u8fd8\u6709\u4e4b\u524d\u641e\u8fc7\u4e00\u4e2a\u963f\u91cc\u4e91\u9999\u6e2f 5Gps \u5bbd\u5e26\u7684\u670d\u52a1\u5668\uff0c\u5f53\u7136\u662f\u7279\u6b8a\u6e20\u9053\u7684\u673a\u5668\uff0c\u5feb\u7684\u4e00\u6279\n\u8fd8\u6709\u4e0a\u9762\u5b89\u88c5\u6559\u7a0b\u8bf4\u4e00\u4e0b\uff0c\u9632\u706b\u5899\u662f\u53ef\u4ee5\u5173\u7684\uff0c\u8ddf\u7cfb\u7edf\u6709\u4ec0\u4e48\u5173\u7cfb\nsystemctl stop firewalld\nsystemctl stop iptables\nsystemctl disable firewalld\nsystemctl disable iptables. ",
    "weitch": "GFW\u5347\u7ea7\uff0c\u84dd\u706f game over~. ",
    "piggggg": "\u84dd\u706f\u8d26\u6237\u81ea\u52a8\u767b\u51fa\uff0c\u4f7f\u7528\u90ae\u7bb1\u767b\u9646\uff0c\u63d0\u793a\u65e0\u6cd5\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u627e\u56de\u8d26\u53f7\n. ",
    "wafems": "\u767b\u5f55\u65f6\u63d0\u793a\u201c\u65e0\u6cd5\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u627e\u56de\u8d26\u53f7\u201d\u6c42\u89e3\u51b3\u5427 \u5509 \u624e\u5fc3. \u73b0\u5728\u53c8\u53d8\u6210503\u9519\u8bef\u4e86\n. ",
    "lysidney": "\u600e\u4e48\u53c8\u6302\u4e86\u554a\uff0c\u8fd9\u56de\u6839\u672c\u8fde\u63a5\u4e0d\u4e0a\u4e86\u2026\u2026. ",
    "luwenliang": "\u6211\u5c31\u60f3\u8bf4\u6211\u521a\u4e70\u4e0d\u4e45\u76841\u5e74lantern\u4f60\u544a\u8bc9\u6211 \u6211\u7684\u8d26\u53f7\u4e0b\u7684\u9ad8\u901f\u6d41\u91cf\u7528\u5b8c\u4e86\uff1f. ",
    "applefishsky009": "\u5927\u5bb6\u90fd\u53ef\u4ee5\u8fde\u63a5\u4e86\u6ca1\u554a\uff0c\u6628\u665a\u5d29\u6389\uff0c\u5d29\u6e83\u4e2d\uff0c\u6211\u521a\u4e70\u7684\u554a\u5367\u69fd. \u51e0\u5e74\u524d\u84dd\u706f\u8fd8\u4e0d\u6536\u8d39\u65f6\u5c31\u5f00\u59cb\u7528\u4e86\uff0c\u540e\u6765\u6536\u8d39\u4e86\u5c31\u6ca1\u7528\uff0c \u521a\u4ea4\u4e86\u8d39\u624d\u53d1\u73b0\u8fd9\u4e48\u5751\uff0c\u8fde\u4ee5\u524d\u514d\u8d39\u7684\u90fd\u6bd4\u4e0d\u4e0a\u554a. ",
    "fulinli": "\u9ebb\u70e6\u7ba1\u7406\u4eba\u5458\u770b\u4e00\u4e0b\uff0c\u6628\u5929\u4e70\u76842\u5e74\u4e13\u4e1a\u7248\uff0c\u4e70\u5b8c\u4e86\u5f53\u65f6\u80fd\u7528\u3002\u6211\u4eca\u5929\u89e3\u7ed1\u4e4b\u540e\u518d\u767b\u9646\u5c31\u663e\u793a   \u65e0\u6cd5\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u627e\u56de\u8d26\u53f7   \u652f\u4ed8\u5b9d\u548c\u90ae\u7bb1\u90fd\u8bd5\u8fc7\u4e0d\u884c\u3002\u91cd\u65b0\u88c5\u4e5f\u4e0d\u884c\uff0c\u624b\u673a\u548c\u7535\u8111\u90fd\u662f\u5982\u6b64\u3002\u9ebb\u70e6\u7ba1\u7406\u7ed9\u770b\u4e00\u4e0b\u5c3d\u5feb\u5904\u7406\u3002\u90ae\u7bb1812264301@qq.com . ",
    "RichardWongLOL": "\u4eca\u5929\u6211\u7684\u6062\u590d\u6b63\u5e38\u4e86\uff0c\u84dd\u706f\u52a0\u6cb9\uff01\u5728\u8fd9\u65e0\u4f11\u6b62\u7684\u5bf9\u6297\u4e2d\u652f\u6301\u84dd\u706f\uff01. ",
    "chaowang1994": "\u84dd\u706f\u662fgg\u4e86\u5417\uff1f\uff1f. ",
    "evan-opener": "\n\u84dd\u706f\u662fgg\u4e86\u5417\uff1f\uff1f\n\n\u770b\u5230\u5f88\u591a\u4eba\u62b1\u6028\uff0c\u81ea\u5df1\u4e00\u76f4\u6ca1\u611f\u89c9\u5230\u3002\u53ea\u6709\u6bcf\u6b21\u5f00\u5927\u4f1a\u7684\u65f6\u5019\u786e\u5b9e\u6302\u4e86\uff0c\u4f46\u5176\u4ed6\u65f6\u5019\u90fd\u5f88\u6b63\u5e38\u2026\u2026\n\u800c\u4e14\u4e0d\u6b63\u5e38\u4e4b\u540e\u4e5f\u90fd\u6709\u8865\u507f\u7684\u3002\n\u95ee\u4e0b\u51fa\u95ee\u9898\u7684\u5404\u4f4d\u90fd\u5728\u54ea\u91cc\uff0c\u7528\u7684\u4ec0\u4e48\u7f51\u7edc\uff1f. ",
    "zhifouapp": "\u5c31\u8fd9\u4e48\u968f\u610f\u5730\u6539\u4e86\u4e2a\u65f6\u95f4\uff0c\u90a3\u660e\u5e74\u662f\u4e0d\u662f\u4e5f\u80fd\u6539\u52302020\u5e74\u53bb\u5440\uff1f\n\n. ",
    "rujianwang": "\u4e3a\u4ec0\u4e48 \u9080\u8bf7\u7801 \u65e0\u6548\uff1f\u4f7f\u7528\u6211\u7684\u4ee3\u7801 Y2U23QF \u5728\u8d2d\u4e70\u540e\u5c06\u514d\u8d39\u83b7\u5f97\u989d\u59163\u4e2a\u6708\u7684\u6743\u9650\u3002\u4e0b\u8f7d Lantern https://bit.ly/lanternapk. ",
    "cocowobo": "\u624b\u673a\u7248\u7684\u84dd\u706fapp\u3002\u517c\u804c\u7ffb\u5899\u6ca1\u901f\u5ea6\uff0c\u800c\u4e14\u624b\u673a\u84dd\u706f\u53ea\u53ef\u4ee5\u6d4f\u89c8jgoogle\u5e94\u7528\u5546\u5e97\uff0c\u4f46\u662f\u65e0\u6cd5\u4e0b\u8f7d. ",
    "zzz6519003": "\u4eca\u5929\u548b\u4e86. ",
    "hujijjj123": "\u5173\u5065\u662f\u8981\u80fd\u7528\uff0c\u73b0\u5728\u8fd8\u662f\u4e0d\u80fd\u7528\u518d\u8d60\u9001\u51e0\u4e2a\u6708\u6709\u4e2a\u4ec0\u4e48\u7528\uff01\uff01\uff01\uff01. ",
    "sitcode": "\u6ca1\u6709\u6536\u5230\u7684\u4e3e\u4e2a\u624b. ",
    "zfyilyoh": "\u4eca\u5929\u56de\u5bb6\u4e00\u770b\uff0c\u4e13\u4e1a\u7248\u670d\u52a1\u5668\u4e3a\u9999\u6e2f\uff0c\u6682\u65f6\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\uff0c\u53e6\u5916\u8fd8\u6ca1\u6536\u5230\u8865\u507f. \u521a\u624d\u7528\u4e864\u4e2a\u5c0f\u65f6\u90fd\u6b63\u5e38\uff0c\u7a81\u7136\u65ad\u4e86\uff0c\u4e00\u770b\u53c8\u53d8\u6210JP\u670d\u52a1\u5668\uff0c\u5f3a\u70c8\u8981\u6c42\u53ef\u4ee5\u624b\u52a8\u9009\u62e9\u670d\u52a1\u5668. ",
    "Chasers9527": "\u6000\u5ff5 green. ",
    "polarisZhao": "updated\uff1a \u8865\u507f\u7684\u4e00\u4e2a\u6708\u6536\u5230\u4e86\ud83e\udd23\n\u8865\u507f\u6ca1\u6536\u5230\uff0c\u4f46\u662f\u53ef\u4ee5\u7528\u4e86\uff0c\u663e\u793a\u7684\u662fHK\u7ebf\u8def\u3002\u7ec8\u4e8e\u53c8\u53ef\u4ee5\u561a\u745f\u4e86\u3002\u3002. ",
    "SongJayJay": "\u4eca\u5929\u53c8\u4e0d\u6b63\u5e38\u5de5\u4f5c\u4e86\uff01\uff01\uff01\uff01\n. ",
    "thapple2014": "\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u6211\u7684\u53ea\u6709\u663e\u793a\u65e5\u672c\u624d\u53ef\u4ee5\u7528\uff0c\u4e24\u5929\u6253\u5f00\u5c31\u663e\u793a\u9999\u6e2f\u7535\u8111\u7684\u624b\u673a\u90fd\u7528\u4e0d\u4e86\u3002\u7136\u540e\u6211\u5c31\u628a\u5730\u5740\u6539\u4e3a\u5927\u9646\u4ee5\u5916\u7684\u5730\u70b9\u5c31\u53ef\u4ee5\u4e0a\u4e86\u3002\u8bf7\u95ee\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff1f\u6539\u6765\u6539\u53bb\u771f\u7684\u597d\u9ebb\u70e6\u3002. ",
    "Sun-Glory": "it can install on OpenWrt ?. ",
    "clee-cc": "2\u5e74\u7684\u4e13\u4e1a\u7248\u90fd\u4e0d\u77e5\u9053\u5728\u54ea\u91cc\u767b\u5f55\u4e86. ",
    "RadditPig": "\u4ee5\u524d\u7684\u8bba\u575b\u600e\u4e48\u6ca1\u4e86\uff1f\n\n\u8f93\u5165\u6211\u7684\u9080\u8bf7\u7801 WM2GRY \u6765\u83b7\u5f97\u4e09\u4e2a\u6708\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff01\u7acb\u5373\u4e0b\u8f7d https://github.com/getlantern/forum. ",
    "CooalManER": "\u81ea\u5efass/ssr\u670d\u52a1\u5668\u6559\u7a0b\n2019.1.18\uff1avultr\u57282019\u5e741\u6708\u7684\u6700\u65b0\u6d3b\u52a8\uff0c\u9488\u5bf9\u65b0\u7528\u6237\uff0c\u76f4\u63a5\u900150\u7f8e\u5143\uff01\n2018.12.9\uff1a\u589e\u52a0\u7834\u89e3\u7248\u9510\u901f\u52a0\u901f\u6559\u7a0b\u3002\n2018.9.1\uff1avultr\u5b98\u65b9\u8fdb\u884c\u4e86\u8c03\u6574\uff0c2.5\u7f8e\u5143\u5957\u9910\u53ea\u63d0\u4f9bipv6\uff0c\u5982\u679c\u4f60\u7528\u4e0d\u4e86ipv6\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4e703.5\u7f8e\u5143\u7684\u5957\u9910\u3002\n\u3010\u5ba2\u6237\u7aef\u4e0b\u8f7d\u3011\n\u7b2c\u4e00\u6b21\u7535\u8111\u7cfb\u7edf\u4f7f\u7528SSR/SS\u5ba2\u6237\u7aef\u65f6\uff0c\u9700\u8981\u5b89\u88c5NET Framework 4.0\uff0c\u4e0d\u7136\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\uff0c\u5fae\u8f6f\u5b98\u7f51\u4e0b\u8f7d\u3002NET Framework 4.0\u662fSSR/SS\u7684\u8fd0\u884c\u5e93\uff0c\u6ca1\u6709\u8fd9\u4e2aSSR/SS\u5ba2\u6237\u7aef\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\u3002\u6709\u7684\u7535\u8111\u7cfb\u7edf\u53ef\u80fd\u4f1a\u81ea\u5e26NET Framework 4.0\u3002\nWindows SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740\nMAC SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740\nLinux\u5ba2\u6237\u7aef\u4e00\u952e\u5b89\u88c5\u914d\u7f6e \u4f7f\u7528\u811a\u672c (\u4f7f\u7528\u65b9\u6cd5\u89c1\u6ce8\u91ca) \u6216\u8005\u91c7\u7528\u56fe\u5f62\u754c\u9762\u7684linux ssr\u5ba2\u6237\u7aef\n\u5b89\u5353 SSR\u5ba2\u6237\u7aef \u4e0b\u8f7d\u5730\u5740 \u5907\u7528\u4e0b\u8f7d\u5730\u5740 \n\u82f9\u679c\u624b\u673aSSR\u5ba2\u6237\u7aef\uff1aPotatso Lite\u3001Potatso\u3001shadowrocket\u90fd\u53ef\u4ee5\u4f5c\u4e3aSSR\u5ba2\u6237\u7aef\uff0c\u4f46\u8fd9\u4e9b\u8f6f\u4ef6\u76ee\u524d\u5df2\u7ecf\u5728\u56fd\u5185\u7684app\u5546\u5e97\u4e0b\u67b6\uff0c\u53ef\u4ee5\u7528\u7f8e\u533a\u7684appid\u8d26\u53f7\u6765\u4e0b\u8f7d\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u914d\u7f6e\u7684SSR\u8d26\u53f7\u517c\u5bb9SS\u5ba2\u6237\u7aef\uff0c\u6216\u8005\u534f\u8bae\u9009\u62e9origin\u4e14\u6df7\u6dc6\u9009\u62e9plain\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u9009\u62e9\u82f9\u679cSS\u5ba2\u6237\u7aef\u8f6f\u4ef6\uff08\u5373\u534f\u8bae\u548c\u6df7\u6dc6\u53ef\u4ee5\u4e0d\u586b\uff09\uff0cAPP\u5546\u5e97\u91cc\u9762\u6709\u5f88\u591a\uff0c\u6bd4\u5982\uff1aSuperRocket\u3001ScanWingy\u7b49\u3002\n\u6709\u4e86\u5ba2\u6237\u7aef\u540e\u6211\u4eec\u9700\u8981\u81ea\u5df1\u642d\u5efa\u670d\u52a1\u5668\u521b\u5efass/ssr\u8d26\u53f7\u624d\u80fd\u7ffb\u5899\u3002 \n\u642d\u5efa\u6559\u7a0b\n\u4e0d\u6015\u88ab\u5c01ip\uff0c\u56e0\u4e3avultr\u662f\u6298\u7b97\u6210\u5c0f\u65f6\u8ba1\u8d39\uff0c\u4e14\u53ef\u4ee5\u968f\u65f6\u5220\u9664\u548c\u5f00\u901a\u670d\u52a1\u5668\uff0c\u65b0\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\u3002\u65b0\u5f00\u670d\u52a1\u5668\u53ea\u9700\u89810.01\u7f8e\u5143\uff0c\u5373\u4f7f\u4f60\u8fd0\u6c14\u975e\u5e38\u4e0d\u597d\uff0c\u5f00\u4e8610\u53f0\u670d\u52a1\u5668\u624d\u83b7\u5f97\u6ca1\u6709\u88ab\u5899\u7684ip\uff0c\u603b\u521b\u5efa\u670d\u52a1\u5668\u6210\u672c\u4e5f\u53ea\u67090.1\u7f8e\u5143\uff0c\u4e0d\u52301\u5757\u94b1\u3002\n\u6559\u7a0b\u5f88\u7b80\u5355\uff0c\u6574\u4e2a\u6559\u7a0b\u5206\u4e09\u6b65\uff1a\n\u7b2c\u4e00\u6b65\uff1a\u8d2d\u4e70VPS\u670d\u52a1\u5668\n\u7b2c\u4e8c\u6b65\uff1a\u4e00\u952e\u90e8\u7f72VPS\u670d\u52a1\u5668\n\u7b2c\u4e09\u6b65\uff1a\u4e00\u952e\u52a0\u901fVPS\u670d\u52a1\u5668 (centos6\u7cfb\u7edf\u9009\u62e9\u9510\u901f\u52a0\u901f\uff0ccenots7\u9009\u62e9bbr\u52a0\u901f)\n\n\u7b2c\u4e00\u6b65\uff1a\u8d2d\u4e70VPS\u670d\u52a1\u5668\nVPS\u670d\u52a1\u5668\u9700\u8981\u9009\u62e9\u56fd\u5916\u7684\uff0c\u9996\u9009\u56fd\u9645\u77e5\u540d\u7684vultr\uff0c\u901f\u5ea6\u4e0d\u9519\u3001\u7a33\u5b9a\u4e14\u6027\u4ef7\u6bd4\u9ad8\uff0c\u6309\u5c0f\u65f6\u8ba1\u8d39\uff0c\u80fd\u591f\u968f\u65f6\u5f00\u901a\u548c\u5220\u9664\u670d\u52a1\u5668\uff0c\u65b0\u670d\u52a1\u5668\u5373\u662f\u65b0ip\u3002\nvultr\u6ce8\u518c\u5730\u5740\uff1a https://www.vultr.com/?ref=7777564-4F  \uff08vultr\u57282019\u5e741\u6708\u7684\u6700\u65b0\u6d3b\u52a8\uff0c\u9488\u5bf9\u65b0\u7528\u6237\uff0c\u76f4\u63a5\u900150\u7f8e\u5143\uff01**\u5168\u740315\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u53ef\u9009\uff0cKVM\u6846\u67b6) \n\n\u867d\u7136\u662f\u82f1\u6587\u754c\u9762\uff0c\u4f46\u662f\u73b0\u5728\u7684\u6d4f\u89c8\u5668\u90fd\u6709\u7f51\u9875\u7ffb\u8bd1\u529f\u80fd\uff0c\u9f20\u6807\u70b9\u51fb\u53f3\u952e\uff0c\u9009\u62e9\u7f51\u9875\u7ffb\u8bd1\u5373\u53ef\u7ffb\u8bd1\u6210\u4e2d\u6587\u3002\n\u6ce8\u518c\u5e76\u90ae\u4ef6\u6fc0\u6d3b\u8d26\u53f7\uff0c\u5145\u503c\u540e\u5373\u53ef\u8d2d\u4e70\u670d\u52a1\u5668\u3002\u5145\u503c\u65b9\u5f0f\u662f\u652f\u4ed8\u5b9d\u6216paypal\uff0c\u4f7f\u7528paypal\u6709\u94f6\u884c\u5361\uff08\u5305\u62ec\u4fe1\u7528\u5361\uff09\u5373\u53ef\u3002paypal\u6ce8\u518c\u5730\u5740\uff1ahttps://www.paypal.com \uff08paypal\u662f\u56fd\u9645\u77e5\u540d\u7684\u7b2c\u4e09\u65b9\u652f\u4ed8\u670d\u52a1\u5546\uff0c\u6ce8\u518c\u4e00\u4e0b\u8d26\u53f7\uff0c\u7ed1\u5b9a\u94f6\u884c\u5361\u5373\u53ef\u8d2d\u4e70\u56fd\u5916\u5546\u54c1\uff09\n2.5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a\u5355\u6838   512M\u5185\u5b58  20G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    500G\u6d41\u91cf/\u6708   (\u4ec5ipv6)\n3.5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a\u5355\u6838   512M\u5185\u5b58  20G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    500G\u6d41\u91cf/\u6708   (\u63a8\u8350)\n5\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a  \u5355\u6838   1G\u5185\u5b58    25G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    1000G\u6d41\u91cf/\u6708  \n10\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a \u5355\u6838   2G\u5185\u5b58    40G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    2000G\u6d41\u91cf/\u6708  \n20\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a 2cpu   4G\u5185\u5b58   60G SSD\u786c\u76d8    \u5e26\u5bbd\u5cf0\u503c100M    3000G\u6d41\u91cf/\u6708  \n40\u7f8e\u5143/\u6708\u7684\u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a 4cpu   8G\u5185\u5b58   100G SSD\u786c\u76d8   \u5e26\u5bbd\u5cf0\u503c100M    4000G\u6d41\u91cf/\u6708  \n\u6ce8\u610f\uff1avultr\u5b98\u65b9\u8fdb\u884c\u4e86\u8c03\u6574\uff0c2.5\u7f8e\u5143\u5957\u9910\u53ea\u63d0\u4f9bipv6\uff0c\u5982\u679c\u4f60\u7528\u4e0d\u4e86ipv6\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4e703.5\u7f8e\u5143\u7684\u5957\u9910\u3002\nvultr\u5b9e\u9645\u4e0a\u662f\u6298\u7b97\u6210\u5c0f\u65f6\u6765\u8ba1\u8d39\u7684\uff0c\u6bd4\u5982\u670d\u52a1\u5668\u662f5\u7f8e\u51431\u4e2a\u6708\uff0c\u90a3\u4e48\u6bcf\u5c0f\u65f6\u6536\u8d39\u4e3a5/30/24=0.0069\u7f8e\u5143 \u4f1a\u81ea\u52a8\u4ece\u8d26\u53f7\u4e2d\u6263\u8d39\uff0c\u53ea\u8981\u4fdd\u8bc1\u8d26\u53f7\u6709\u94b1\u5373\u53ef\u3002\u5982\u679c\u4f60\u90e8\u7f72\u7684\u670d\u52a1\u5668\u5b9e\u6d4b\u540e\u901f\u5ea6\u4e0d\u7406\u60f3\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u5220\u6389\uff08destroy\uff09\uff0c\u91cd\u65b0\u6362\u4e2a\u5730\u533a\u7684\u670d\u52a1\u5668\u6765\u90e8\u7f72\uff0c\u65b9\u4fbf\u4e14\u5b9e\u7528\u3002\u56e0\u4e3a\u65b0\u7684\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\uff0c\u6240\u4ee5\u5f53ip\u88ab\u5899\u65f6\u8fd9\u4e2a\u65b9\u6cd5\u5f88\u6709\u7528\u3002\u5f53ip\u88ab\u5899\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u65b0\u5f00\u7684\u670d\u52a1\u5668ip\u548c\u539f\u5148\u7684ip\u4e0d\u4e00\u6837\uff0c\u5148\u5f00\u65b0\u670d\u52a1\u5668\uff0c\u5f00\u597d\u540e\u518d\u5220\u9664\u65e7\u670d\u52a1\u5668\u5373\u53ef\u3002\n\u8ba1\u8d39\u4ece\u4f60\u5f00\u901a\u670d\u52a1\u5668\u5f00\u59cb\u7b97\u7684\uff0c\u4e0d\u7ba1\u4f60\u6709\u6ca1\u6709\u4f7f\u7528\uff0c\u5373\u4f7f\u670d\u52a1\u5668\u5904\u4e8e\u5173\u673a\u72b6\u6001\u4ecd\u7136\u4f1a\u8ba1\u8d39\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5f00\u901a\u670d\u52a1\u5668\u5c31\u4e0d\u7b97\u3002\u6bd4\u5982\u4f60\u4eca\u5929\u65e9\u4e0a\u5f00\u901a\u4e86\u670d\u52a1\u5668\uff0c\u4f46\u4f60\u6709\u4e8b\u60c5\uff0c\u665a\u4e0a\u624d\u90e8\u7f72\uff0c\u90a3\u4e48\u8fd9\u6bb5\u65f6\u95f4\u662f\u4f1a\u8ba1\u8d39\u7684\u3002\u540c\u7406\uff0c\u5982\u679c\u4f60\u65e9\u4e0a\u5220\u6389\u670d\u52a1\u5668\uff0c\u7b2c\u4e8c\u5929\u624d\u5f00\u901a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u8fd9\u6bb5\u65f6\u95f4\u662f\u4e0d\u4f1a\u8ba1\u8d39\u7684\u3002\u5728\u8d26\u53f7\u7684Billing\u9009\u9879\u91cc\u53ef\u4ee5\u770b\u5230\u8d26\u6237\u4f59\u989d\u3002\n\u6e29\u99a8\u63d0\u9192\uff1a\u540c\u6837\u7684\u670d\u52a1\u5668\u4f4d\u7f6e\uff0c\u4e0d\u540c\u7684\u5bbd\u5e26\u7c7b\u578b\u548c\u5730\u533a\u6240\u642d\u5efa\u7684\u8d26\u53f7\u7684\u7ffb\u5899\u901f\u5ea6\u4f1a\u4e0d\u540c\uff0c\u8fd9\u4e0e\u4e2d\u56fd\u7535\u4fe1\u3001\u4e2d\u56fd\u8054\u901a\u3001\u4e2d\u56fd\u79fb\u52a8\u56fd\u9645\u51fa\u53e3\u5e26\u5bbd\u548c\u7ebf\u8def\u4e0d\u540c\u6709\u5173\uff0c\u6240\u4ee5\u4ee5\u5b9e\u6d4b\u4e3a\u51c6\u3002\u53ef\u4ee5\u5148\u9009\u5b9a\u4e00\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u6765\u6309\u7167\u6559\u7a0b\u8fdb\u884c\u642d\u5efa\uff0c\u719f\u6089\u642d\u5efa\u65b9\u6cd5\uff0c\u5f53\u8d26\u53f7\u642d\u5efa\u5b8c\u6210\u5e76\u8fdb\u884c\u4e86bbr\u52a0\u901f\u540e\uff0c\u6d4b\u8bd5\u4e0b\u901f\u5ea6\u81ea\u5df1\u662f\u5426\u6ee1\u610f\uff0c\u5982\u679c\u6ee1\u610f\u90a3\u5c31\u7528\u8fd9\u4e2a\u670d\u52a1\u5668\u4f4d\u7f6e\u7684\u670d\u52a1\u5668\u3002\u5982\u679c\u901f\u5ea6\u4e0d\u592a\u6ee1\u610f\uff0c\u5c31\u4e00\u6b21\u6027\u5f00\u51e0\u53f0\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4f4d\u7f6e\u7684\u670d\u52a1\u5668\uff0c\u7136\u540e\u6309\u7167\u540c\u6837\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u642d\u5efa\u5e76\u6d4b\u8bd5\uff0c\u9009\u62e9\u6700\u4f18\u7684\uff0c\u4e4b\u540e\u628a\u5176\u5b83\u7684\u670d\u52a1\u5668\u5220\u6389\uff0c\u6309\u5c0f\u65f6\u8ba1\u8d39\u6d4b\u8bd5\u6210\u672c\u53ef\u4ee5\u5ffd\u7565\u3002\n\u8d26\u53f7\u5145\u503c\u5982\u56fe\uff1a\n\n\n\u5f00\u901a\u670d\u52a1\u5668\u6b65\u9aa4\u5982\u56fe\uff1a\n\n\n\n\u70b9\u51fb\u56fe\u4e2d\u7684CentOS\u51e0\u4e2a\u5b57\uff0c\u4f1a\u5f39\u51facentos6\uff0c\u7136\u540e\u9009\u4e2dcentos6\uff01\n\n\u63a5\u4e0b\u6765\u8fd9\u4e00\u6b65\u662f\u5f00\u542fvps\u7684ipv6 ip\uff0c\u9009\u586b\u9879\u3002\u5982\u679c\u4f60\u7684\u7535\u8111\u7cfb\u7edf\u53ef\u4ee5\u7528ipv6\uff0c\u90a3\u4e48\u53ef\u4ee5\u52fe\u9009\u6b64\u9879\u3002\u5927\u591a\u6570\u7528\u6237\u6ca1\u6709\u8fd9\u4e2a\u9700\u6c42\uff0c\u4f46\u6709\u4e00\u4e9b\u7528\u6237\u53ef\u80fd\u4f1a\u7528\u5230\uff0c\u6240\u4ee5\u8865\u5145\u4e86\u8fd9\u90e8\u5206\u5185\u5bb9\u3002\n\n\n\u5b8c\u6210\u8d2d\u4e70\u540e\uff0c\u627e\u5230\u7cfb\u7edf\u7684\u5bc6\u7801\u8bb0\u4e0b\u6765\uff0c\u90e8\u7f72\u670d\u52a1\u5668\u65f6\u9700\u8981\u7528\u5230\u3002vps\u7cfb\u7edf\uff08\u63a8\u8350centos6\uff09\u7684\u5bc6\u7801\u83b7\u53d6\u65b9\u6cd5\u5982\u4e0b\u56fe\uff1a\n\n\n\n\u5982\u679c\u4f60\u5f00\u542f\u4e86vps\u7684ipv6\uff0c\u90a3\u4e48\u5728\u540e\u53f0\u7684settings\u9009\u9879\u53ef\u4ee5\u627e\u5230\u670d\u52a1\u5668\u7684ipv6 ip\u3002\u5728\u90e8\u7f72SSR\u8d26\u53f7\u65f6\uff0c\u4f60\u7528ipv6 ip\u5c31\u884c\u3002\u6574\u4e2a\u90e8\u7f72\u53ca\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u8bb0\u5f97\u628a\u7535\u8111\u7cfb\u7edf\u5f00\u542fipv6\u5594\u3002\n\n\n\u5220\u6389\u670d\u52a1\u5668\u6b65\u9aa4\u5982\u4e0b\u56fe\uff1a\n\n\n\n\n\u7b2c\u4e8c\u6b65\uff1a\u90e8\u7f72VPS\u670d\u52a1\u5668\n\u8d2d\u4e70\u670d\u52a1\u5668\u540e\uff0c\u9700\u8981\u90e8\u7f72\u4e00\u4e0b\u3002\u56e0\u4e3a\u4f60\u4e70\u7684\u662f\u865a\u62df\u4e1c\u897f\uff0c\u800c\u4e14\u53c8\u8fdc\u5728\u56fd\u5916\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53ebXshell\u7684\u8f6f\u4ef6\u6765\u8fdc\u7a0b\u90e8\u7f72\u3002Xshell windows\u7248\u4e0b\u8f7d\u5730\u5740\uff1a\n\u56fd\u5916\u4e91\u76d81\u4e0b\u8f7d \n\u56fd\u5916\u4e91\u76d82\u4e0b\u8f7d \u63d0\u53d6\u5bc6\u7801\uff1a666\n\u56fd\u5916\u4e91\u76d83\u4e0b\u8f7d \u5bc6\u7801\uff1a123\n\u5982\u679c\u4f60\u662f\u82f9\u679c\u7535\u8111\u64cd\u4f5c\u7cfb\u7edf\uff0c\u66f4\u7b80\u5355\uff0c\u65e0\u9700\u4e0b\u8f7dxshell\uff0c\u7cfb\u7edf\u53ef\u4ee5\u76f4\u63a5\u8fde\u63a5VPS\u3002\u6253\u5f00\u7ec8\u7aef\uff08Terminal\uff09\uff0c\u8f93\u5165ssh root@ip  \u5176\u4e2d\u201cip\u201d\u66ff\u6362\u6210\u4f60VPS\u7684ip, \u6309\u56de\u8f66\u952e\uff0c\u7136\u540e\u590d\u5236\u7c98\u8d34\u5bc6\u7801\uff0c\u6309\u56de\u8f66\u952e\u5373\u53ef\u767b\u5f55\u3002\u7c98\u8d34\u5bc6\u7801\u65f6\u6709\u53ef\u80fd\u4e0d\u663e\u793a\u5bc6\u7801\uff0c\u4f46\u4e0d\u5f71\u54cd\uff0c \u53c2\u8003\u8bbe\u7f6e\u65b9\u6cd5  \u5982\u679c\u4e0d\u80fd\u7528MAC\u81ea\u5e26\u7684\u7ec8\u7aef\u8fde\u63a5\u7684\u8bdd\uff0c\u76f4\u63a5\u7f51\u4e0a\u641c\u201cMAC\u8fde\u63a5SSH\u7684\u8f6f\u4ef6\u201d\uff0c\u6709\u5f88\u591a\uff0c\u7136\u540e\u901a\u8fc7\u8f6f\u4ef6\u6765\u8fde\u63a5vps\u670d\u52a1\u5668\u5c31\u884c\uff0c\u5177\u4f53\u64cd\u4f5c\u65b9\u5f0f\u53c2\u8003windows xshell\u3002\n\n\u90e8\u7f72\u6559\u7a0b\uff1a\n\u4e0b\u8f7dxshell\u8f6f\u4ef6\u5e76\u5b89\u88c5\u540e\uff0c\u6253\u5f00\u8f6f\u4ef6\n\n\u9009\u62e9\u6587\u4ef6\uff0c\u65b0\u5efa\n\n\u968f\u4fbf\u53d6\u4e2a\u540d\u5b57\uff0c\u7136\u540e\u628a\u4f60\u7684\u670d\u52a1\u5668ip\u586b\u4e0a\n\n\u8fde\u63a5\u56fd\u5916ip\u5373\u670d\u52a1\u5668\u65f6\uff0c\u8f6f\u4ef6\u4f1a\u5148\u540e\u63d0\u9192\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u7528\u6237\u540d\u9ed8\u8ba4\u90fd\u662froot\uff0c\u5bc6\u7801\u662f\u4f60\u8d2d\u4e70\u7684\u670d\u52a1\u5668\u7cfb\u7edf\u7684\u5bc6\u7801\u3002\n\u5982\u679cxshell\u8fde\u4e0d\u4e0a\u670d\u52a1\u5668\uff0c\u6ca1\u6709\u5f39\u51fa\u8ba9\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u8f93\u5165\u6846\uff0c\u8868\u660e\u4f60\u5f00\u5230\u7684ip\u662f\u4e00\u4e2a\u88ab\u5899\u7684ip\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u91cd\u65b0\u5f00\u65b0\u7684\u670d\u52a1\u5668\uff0c\u76f4\u5230\u80fd\u7528xshell\u8fde\u4e0a\u4e3a\u6b62\uff0c\u8010\u5fc3\u70b9\u54e6\uff01\u5982\u679c\u540c\u4e00\u4e2a\u5730\u533a\u5f00\u4e86\u591a\u53f0\u670d\u52a1\u5668\u8fd8\u662f\u4e0d\u884c\u7684\u8bdd\uff0c\u53ef\u4ee5\u6362\u5176\u5b83\u5730\u533a\u3002\n\n\n\u8fde\u63a5\u6210\u529f\u540e\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u590d\u5236\u7c98\u8d34\u4ee3\u7801\u90e8\u7f72\u4e86\u3002\nCentOS6/Debian6/Ubuntu14 ShadowsocksR\u4e00\u952e\u90e8\u7f72\u7ba1\u7406\u811a\u672c\uff082018.11.21\u66f4\u65b0\uff09\uff1a\n\u811a\u672c\u4e00\uff082018.11.20\u66f4\u65b0\uff09\n\nyum -y install wget\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n\n\u5907\u7528\u811a\u672c\u4e8c\uff082018.11.21\u66f4\u65b0\uff09\n\u5982\u679c\u4e0a\u9762\u7684\u811a\u672c\u6682\u65f6\u7528\u4e0d\u4e86\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u5907\u7528\u811a\u672c\uff0c\u5907\u7528\u811a\u672c\u6ca1\u6709\u5355\u72ec\u505a\u56fe\u6587\u6559\u7a0b\uff0c\u81ea\u5df1\u6478\u7d22\u4e0b\u5c31\u4f1a\u4e86\u3002\u5907\u7528\u811a\u672c\u5378\u8f7d\u547d\u4ee4\uff1a./shadowsocksR.sh uninstall\n\nyum -y install wget\nwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh\nchmod +x shadowsocksR.sh\n./shadowsocksR.sh 2>&1 | tee shadowsocksR.log\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u4ee3\u7801\u5206\u5272\u7ebf\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\u590d\u5236\u4e0a\u9762\u7684\u811a\u672c\u4e00\u4ee3\u7801\u5230VPS\u670d\u52a1\u5668\u91cc\uff0c\u6309\u56de\u8f66\u952e\uff0c\u811a\u672c\u4f1a\u81ea\u52a8\u5b89\u88c5\uff0c\u4ee5\u540e\u53ea\u9700\u8981\u8fd0\u884c\u8fd9\u4e2a\u5feb\u6377\u547d\u4ee4\u5c31\u53ef\u4ee5\u51fa\u73b0\u4e0b\u56fe\u7684\u754c\u9762\u8fdb\u884c\u8bbe\u7f6e\uff0c\u5feb\u6377\u7ba1\u7406\u547d\u4ee4\u4e3a\uff1abash ssr.sh\n\n\u5982\u4e0a\u56fe\u51fa\u73b0\u7ba1\u7406\u754c\u9762\u540e\uff0c\u8f93\u5165\u6570\u5b571\u6765\u5b89\u88c5SSR\u670d\u52a1\u7aef\u3002\u5982\u679c\u8f93\u51651\u540e\u4e0d\u80fd\u8fdb\u5165\u4e0b\u4e00\u6b65\uff0c\u90a3\u4e48\u8bf7\u9000\u51faxshell\uff0c\u91cd\u65b0\u8fde\u63a5vps\u670d\u52a1\u5668\uff0c\u7136\u540e\u8f93\u5165\u5feb\u6377\u7ba1\u7406\u547d\u4ee4bash ssr.sh \u518d\u5c1d\u8bd5\u3002\n\n\u6839\u636e\u4e0a\u56fe\u63d0\u793a\uff0c\u4f9d\u6b21\u8f93\u5165\u81ea\u5df1\u60f3\u8bbe\u7f6e\u7684\u7aef\u53e3\u548c\u5bc6\u7801 (\u5bc6\u7801\u5efa\u8bae\u7528\u590d\u6742\u70b9\u7684\u5b57\u6bcd\u7ec4\u5408\uff0c\u7aef\u53e3\u53f7\u4e3a40-65535\u4e4b\u95f4\u7684\u6570\u5b57)\uff0c\u56de\u8f66\u952e\u7528\u4e8e\u786e\u8ba4\n\u6ce8\uff1a\u5173\u4e8e\u7aef\u53e3\u7684\u8bbe\u7f6e\uff0c\u603b\u7684\u7f51\u7edc\u603b\u7aef\u53e3\u67096\u4e07\u591a\u4e2a\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u4efb\u610f\u8bbe\u7f6e\u3002\u4f46\u662f\u6709\u7684\u5730\u533a\u9700\u8981\u8bbe\u7f6e\u7279\u6b8a\u7684\u7aef\u53e3\u624d\u6709\u6548\uff0c\u4e00\u4e9b\u7279\u6b8a\u7684\u7aef\u53e3\u6bd4\u598280\u3001143\u3001443\u30011433\u30013306\u30013389\u30018080\u3002\n\n\u5982\u4e0a\u56fe\uff0c\u9009\u62e9\u60f3\u8bbe\u7f6e\u7684\u52a0\u5bc6\u65b9\u5f0f\uff0c\u6bd4\u598210\uff0c\u6309\u56de\u8f66\u952e\u786e\u8ba4\n\u63a5\u4e0b\u6765\u662f\u9009\u62e9\u534f\u8bae\u63d2\u4ef6\uff0c\u5982\u4e0b\u56fe\uff1a\n\n\n\u9009\u62e9\u5e76\u786e\u8ba4\u540e\uff0c\u4f1a\u51fa\u73b0\u4e0a\u56fe\u7684\u754c\u9762\uff0c\u63d0\u793a\u4f60\u662f\u5426\u9009\u62e9\u517c\u5bb9\u539f\u7248\uff0c\u8fd9\u91cc\u7684\u539f\u7248\u6307\u7684\u662fSS\u5ba2\u6237\u7aef\uff08SS\u5ba2\u6237\u7aef\u6ca1\u6709\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u9009\u9879\uff09\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u8fdb\u884c\u9009\u62e9\uff0c\u6f14\u793a\u9009\u62e9y\n\u4e4b\u540e\u8fdb\u884c\u6df7\u6dc6\u63d2\u4ef6\u7684\u8bbe\u7f6e\u3002\n\u6ce8\u610f\uff1a\u5982\u679c\u534f\u8bae\u662forigin\uff0c\u90a3\u4e48\u6df7\u6dc6\u4e5f\u5fc5\u987b\u662fplain\uff1b\u5982\u679c\u534f\u8bae\u4e0d\u662forigin\uff0c\u90a3\u4e48\u6df7\u6dc6\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u3002\u6709\u7684\u5730\u533a\u9700\u8981\u628a\u6df7\u6dc6\u8bbe\u7f6e\u6210plain\u624d\u597d\u7528\u3002\u56e0\u4e3a\u6df7\u6dc6\u4e0d\u603b\u662f\u6709\u6548\u679c\uff0c\u8981\u770b\u5404\u5730\u533a\u7684\u7b56\u7565\uff0c\u6709\u65f6\u5019\u4e0d\u6df7\u6dc6\uff08plain\uff09\u6216\uff08origin\u548cplain\u4e00\u8d77\u4f7f\u7528\uff09\uff0c\u8ba9\u5176\u770b\u8d77\u6765\u50cf\u968f\u673a\u6570\u636e\u66f4\u597d\u3002\uff08\u7279\u522b\u6ce8\u610f\uff1atls 1.2_ticket_auth\u5bb9\u6613\u53d7\u5230\u5e72\u6270\uff01\u8bf7\u9009\u62e9\u9664tls\u5f00\u5934\u4ee5\u5916\u7684\u5176\u5b83\u6df7\u6dc6\uff01\uff01\uff01\uff09 \n\n\u8fdb\u884c\u6df7\u6dc6\u63d2\u4ef6\u7684\u8bbe\u7f6e\u540e\uff0c\u4f1a\u4f9d\u6b21\u63d0\u793a\u4f60\u5bf9\u8bbe\u5907\u6570\u3001\u5355\u7ebf\u7a0b\u9650\u901f\u548c\u7aef\u53e3\u603b\u9650\u901f\u8fdb\u884c\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u503c\u662f\u4e0d\u8fdb\u884c\u9650\u5236\uff0c\u4e2a\u4eba\u4f7f\u7528\u7684\u8bdd\uff0c\u9009\u62e9\u9ed8\u8ba4\u5373\u53ef\uff0c\u5373\u76f4\u63a5\u6572\u56de\u8f66\u952e\u3002\n\u6ce8\u610f\uff1a\u5173\u4e8e\u9650\u5236\u8bbe\u5907\u6570\uff0c\u8fd9\u4e2a\u534f\u8bae\u5fc5\u987b\u662f\u975e\u539f\u7248\u4e14\u4e0d\u517c\u5bb9\u539f\u7248\u624d\u6709\u6548\uff0c\u4e5f\u5c31\u662f\u5fc5\u987b\u4f7f\u7528SSR\u534f\u8bae\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u6709\u6548\uff01\n\n\u4e4b\u540e\u4ee3\u7801\u5c31\u6b63\u5f0f\u81ea\u52a8\u90e8\u7f72\u4e86\uff0c\u5230\u4e0b\u56fe\u6240\u793a\u7684\u4f4d\u7f6e\uff0c\u63d0\u793a\u4f60\u4e0b\u8f7d\u6587\u4ef6\uff0c\u8f93\u5165\uff1ay\n\n\u8010\u5fc3\u7b49\u5f85\u4e00\u4f1a\uff0c\u51fa\u73b0\u4e0b\u9762\u7684\u754c\u9762\u5373\u90e8\u7f72\u5b8c\u6210\uff1a\n\n\n\u6839\u636e\u4e0a\u56fe\u5c31\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u8bbe\u7f6e\u7684SSR\u8d26\u53f7\u4fe1\u606f\uff0c\u5305\u62ecIP\u3001\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u63d2\u4ef6\u3001\u6df7\u6dc6\u63d2\u4ef6\uff0c\u8fd9\u4e9b\u4fe1\u606f\u9700\u8981\u586b\u5165\u4f60\u7684SSR\u5ba2\u6237\u7aef\u3002\u5982\u679c\u4e4b\u540e\u60f3\u4fee\u6539\u8d26\u53f7\u4fe1\u606f\uff0c\u76f4\u63a5\u8f93\u5165\u5feb\u6377\u7ba1\u7406\u547d\u4ee4\uff1abash ssr.sh \u8fdb\u5165\u7ba1\u7406\u754c\u9762\uff0c\u9009\u62e9\u76f8\u5e94\u7684\u6570\u5b57\u6765\u8fdb\u884c\u4e00\u952e\u4fee\u6539\u3002\u4f8b\u5982\uff1a\n\n\n\u811a\u672c\u6f14\u793a\u7ed3\u675f\u3002\n\u6b64\u811a\u672c\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u90e8\u7f72\u4e00\u6b21\u5373\u53ef\u3002\u6700\u540e\u53ef\u4ee5\u91cd\u542f\u670d\u52a1\u5668\u786e\u4fdd\u90e8\u7f72\u751f\u6548\uff08\u4e00\u822c\u60c5\u51b5\u4e0d\u91cd\u542f\u4e5f\u53ef\u4ee5\uff09\u3002\u91cd\u542f\u9700\u8981\u5728\u547d\u4ee4\u680f\u91cc\u8f93\u5165reboot \uff0c\u8f93\u5165\u547d\u4ee4\u540e\u7a0d\u5fae\u7b49\u5f85\u4e00\u4f1a\u670d\u52a1\u5668\u5c31\u4f1a\u81ea\u52a8\u91cd\u542f\uff0c\u4e00\u822c\u91cd\u542f\u8fc7\u7a0b\u9700\u89812\uff5e5\u5206\u949f\uff0c\u91cd\u542f\u8fc7\u7a0b\u4e2dXshell\u4f1a\u81ea\u52a8\u65ad\u5f00\u8fde\u63a5\uff0c\u7b49VPS\u91cd\u542f\u597d\u540e\u624d\u53ef\u4ee5\u7528Xshell\u8f6f\u4ef6\u8fdb\u884c\u8fde\u63a5\u3002\u5982\u679c\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u5361\u5728\u67d0\u4e2a\u4f4d\u7f6e\u8d85\u8fc710\u5206\u949f\uff0c\u53ef\u4ee5\u7528xshell\u8f6f\u4ef6\u65ad\u5f00\uff0c\u7136\u540e\u91cd\u65b0\u8fde\u63a5\u4f60\u7684ip\uff0c\u518d\u590d\u5236\u4ee3\u7801\u8fdb\u884c\u90e8\u7f72\u3002\n\n\u7b2c\u4e09\u6b65\uff1a\u4e00\u952e\u52a0\u901fVPS\u670d\u52a1\u5668\n2018\u5e7412\u67089\u65e5\u589e\u52a0\u7834\u89e3\u7248\u9510\u901f\u52a0\u901f\u6559\u7a0b\u3002\n\u3010\u7834\u89e3\u7248\u9510\u901f\u52a0\u901f\u6559\u7a0b\u3011\n\u6b64\u52a0\u901f\u6559\u7a0b\u4e3a\u7834\u89e3\u7248\u9510\u901f\u52a0\u901f,Vultr\u7684\u670d\u52a1\u5668centos6\u7cfb\u7edf\u5b98\u65b9\u8fdb\u884c\u4e86\u66f4\u65b0\uff0c\u5bfc\u81f4\u76ee\u524d\u4e0d\u652f\u6301BBR\u7684\u90e8\u7f72\uff0c\u4f46\u9510\u901f\u5e94\u8be5\u662f\u53ef\u4ee5\u90e8\u7f72\u7684\uff0c\u6545\u589e\u52a0\u4e86\u6b64\u90e8\u7f72\u811a\u672c\uff0c\u52a0\u901f\u540e\u5bf9\u901f\u5ea6\u7684\u63d0\u5347\u5f88\u660e\u663e\uff0c\u6240\u4ee5\u63a8\u8350\u90e8\u7f72\u52a0\u901f\u811a\u672c\u3002\u8be5\u52a0\u901f\u65b9\u6cd5\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u90e8\u7f72\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\n\u7b2c\u4e00\u6b65\uff0c\u5148\u66f4\u6362\u670d\u52a1\u5668\u5185\u6838\uff1a\nyum -y install wget\nwget --no-check-certificate https://blog.asuhu.com/sh/ruisu.sh && bash ruisu.sh\n\n\u4e0d\u52a8\u7684\u65f6\u5019\u6572\u56de\u8f66\u952e\uff0c\u5728\u4e0a\u56fe\u65f6\u9700\u8981\u591a\u7b49\u4e00\u4f1a\u513f\u3002\n\n\u51fa\u73b0\u4e0a\u56fe\u65f6\u8868\u793a\u5df2\u6210\u529f\u66ff\u6362\u5185\u6838\u5e76\u670d\u52a1\u5668\u81ea\u52a8\u91cd\u542f\u3002\n\u5b8c\u6210\u540e\u4f1a\u91cd\u542f\uff0c2\u5206\u949f\u540e\u91cd\u65b0\u8fde\u63a5\u670d\u52a1\u5668\uff0c\u8fde\u4e0a\u540e\u5f00\u59cb\u7b2c\u4e8c\u6b65\u7684\u64cd\u4f5c\u3002\n\u7b2c\u4e8c\u6b65\uff0c\u4e00\u952e\u5b89\u88c5\u9510\u901f\uff1a\nwget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh && bash serverspeeder-all.sh\n\u5378\u8f7d\u52a0\u901f\u4ee3\u7801\u547d\u4ee4\u4e3a\uff1a\nchattr -i /serverspeeder/etc/apx* && /serverspeeder/bin/serverSpeeder.sh uninstall -f\n\u4f46\u6709\u4e9b\u5185\u6838\u662f\u4e0d\u9002\u5408\u7684\uff0c\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u9700\u8981\u624b\u52a8\u9009\u62e9\u63a8\u8350\u7684\uff0c\u5f53\u90e8\u7f72\u65f6\u51fa\u73b0\u4ee5\u4e0b\u5b57\u6837\uff1a\n\n\u63d0\u793a\u6ca1\u6709\u5b8c\u5168\u5339\u914d\u7684\u5185\u6838,\u968f\u4fbf\u9009\u4e00\u4e2a\u5185\u6838\u5c31\u884c,\u6309\u7167\u63d0\u793a\u6765\u8f93\u5165\u6570\u5b57,\u6309\u56de\u8f66\u952e\u5373\u53ef\n\u9510\u901f\u5b89\u88c5\u6210\u529f\u6807\u5fd7\u5982\u4e0b\uff1a\n\n\u51fa\u73b0running\u5b57\u6837\u5373\u53ef!\n\u6ce8\u610f\uff1a\u6839\u636e\u53cd\u9988\uff0c\u5c11\u90e8\u5206\u4eba\u5b89\u88c5bbr\u811a\u672c\u5e76\u91cd\u542f\u540e\uff0c\u51e0\u5206\u949f\u8fc7\u53bb\u4e86\uff0c\u53d1\u73b0xshell\u65e0\u6cd5\u8fde\u63a5\u670d\u52a1\u5668\u4e14\u670d\u52a1\u5668ip\u65e0\u6cd5ping\u901a\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\uff1a\u5f00\u65b0\u670d\u52a1\u5668\u6216\u8005\u91cd\u88c5\u7cfb\u7edf\uff0c\u7136\u540e\u5148\u5b89\u88c5bbr\u811a\u672c\u518d\u5b89\u88c5ssr\u811a\u672c\uff0c\u6216\u8005\u6539\u7528\u9510\u901f\u52a0\u901f\u811a\u672c\u3002\n\n\u3010\u8c37\u6b4cBBR\u52a0\u901f\u6559\u7a0b\u3011\nvultr\u670d\u52a1\u5668\u7684centos6\u4e0d\u652f\u6301bbr\u52a0\u901f\uff0c\u4f46centos7\u7cfb\u7edf\u652f\u6301bbr\u52a0\u901f\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u7528bbr\u52a0\u901f\u6559\u7a0b\uff0cvps\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u9009\u62e9centos7\u3002\nyum -y install wget\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\nchmod +x bbr.sh\n./bbr.sh\n\u628a\u4e0a\u9762\u6574\u4e2a\u4ee3\u7801\u590d\u5236\u540e\u7c98\u8d34\u8fdb\u53bb\uff0c\u4e0d\u52a8\u7684\u65f6\u5019\u6309\u56de\u8f66\uff0c\u7136\u540e\u8010\u5fc3\u7b49\u5f85\uff0c\u6700\u540e\u91cd\u542fvps\u670d\u52a1\u5668\u5373\u53ef\u3002\n\u6f14\u793a\u5f00\u59cb\uff0c\u5982\u56fe\uff1a\n\u590d\u5236\u5e76\u7c98\u8d34\u4ee3\u7801\u540e\uff0c\u6309\u56de\u8f66\u952e\u786e\u8ba4\n\n\u5982\u4e0b\u56fe\u63d0\u793a\uff0c\u6309\u4efb\u610f\u952e\u7ee7\u7eed\u90e8\u7f72\n\n\n\u90e8\u7f72\u5230\u4e0a\u56fe\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u7b49\u5f853\uff5e6\u5206\u949f\n\n\u6700\u540e\u8f93\u5165y\u91cd\u542f\u670d\u52a1\u5668\uff0c\u5982\u679c\u8f93\u5165y\u63d0\u793acommand not found \uff0c\u63a5\u7740\u8f93\u5165reboot\u6765\u91cd\u542f\u670d\u52a1\u5668\uff0c\u786e\u4fdd\u52a0\u901f\u751f\u6548\uff0cbbr\u52a0\u901f\u811a\u672c\u662f\u5f00\u673a\u81ea\u52a8\u542f\u52a8\uff0c\u88c5\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\n\u670d\u52a1\u5668\u91cd\u542f\u6210\u529f\u5e76\u91cd\u65b0\u8fde\u63a5\u670d\u52a1\u5668\u540e\uff0c\u8f93\u5165\u547d\u4ee4lsmod | grep bbr  \u5982\u679c\u51fa\u73b0tcp_bbr\u5b57\u6837\u8868\u793abbr\u5df2\u5b89\u88c5\u5e76\u542f\u52a8\u6210\u529f\u3002\u5982\u56fe\uff1a\n\n\n\u8d2d\u4e70vps\u670d\u52a1\u5668\u540e\uff0cip\u6709\u4e86\uff0c\u901a\u8fc7\u90e8\u7f72\uff0c\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u548c\u6df7\u6dc6\u4e5f\u6709\u4e86\uff0c\u6700\u540e\u5c06\u8fd9\u4e9b\u4fe1\u606f\u586b\u5165SSR\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u7ffb\u5899\u5566\u3002\n\u6709\u4e86\u8d26\u53f7\u540e\uff0c\u6253\u5f00SSR\u5ba2\u6237\u7aef\uff0c\u586b\u4e0a\u4fe1\u606f\uff0c\u8fd9\u91cc\u4ee5windows\u7248\u7684SSR\u5ba2\u6237\u7aef\u4e3a\u4f8b\u5b50\uff1a\n\n\u5728\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u586b\u4e0a\u670d\u52a1\u5668ip\u3001\u670d\u52a1\u5668\u7aef\u53e3\u3001\u5bc6\u7801\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u548c\u6df7\u6dc6\uff0c\u6700\u540e\u5c06\u6d4f\u89c8\u5668\u7684\u4ee3\u7406\u8bbe\u7f6e\u4e3a\uff08http\uff09127.0.0.1\u548c1080\u5373\u53ef\u3002\u8d26\u53f7\u7684\u7aef\u53e3\u53f7\u5c31\u662f\u4f60\u81ea\u5df1\u8bbe\u7f6e\u7684\uff0c\u800c\u8981\u4e0a\u7f51\u7684\u6d4f\u89c8\u5668\u7684\u7aef\u53e3\u53f7\u662f1080\uff0c\u56fa\u5b9a\u7684\uff0c\u8c37\u6b4c\u6d4f\u89c8\u5668\u53ef\u4ee5\u901a\u8fc7 SwitchyOmega \u63d2\u4ef6\u6765\u8bbe\u7f6e\u3002\n\u542f\u52a8SSR\u5ba2\u6237\u7aef\u540e\uff0c\u53f3\u952eSSR\u5ba2\u6237\u7aef\u56fe\u6807\uff0c\u9009\u62e9\u7b2c\u4e00\u4e2a\u201c\u7cfb\u7edf\u4ee3\u7406\u6a21\u5f0f\u201d\uff0c\u91cc\u9762\u67093\u4e2a\u5b50\u9009\u9879\uff0c\u9009\u62e9\"\u5168\u5c40\u6a21\u5f0f\u201c\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u7528\u6d4f\u89c8\u5668\u8bbe\u7f6e\u597d\u4e86\u7684\u4ee3\u7406\u6a21\u5f0f\uff08http\uff09127.0.0.1\u548c1080\u7ffb\u5899\uff0c\u6b64\u6a21\u5f0f\u4e0b\u6240\u6709\u7684\u7f51\u7ad9\u90fd\u4f1a\u8d70SSR\u4ee3\u7406\u3002\uff08\u9002\u5408\u65b0\u624b\uff09\n\n\n\u5e38\u89c1\u95ee\u9898\u53c2\u8003\u89e3\u51b3\u65b9\u6cd5\uff1a\n1\u3001\u7528\u4e86\u4e00\u6bb5\u65f6\u95f4\u53d1\u73b0ssr\u8d26\u53f7\u7528\u4e0d\u4e86\u4e86\n\u9996\u5148ping\u4e00\u4e0b\u81ea\u5df1\u7684ip\uff0c\u770b\u770b\u80fd\u4e0d\u80fdping\u7684\u901a\uff0cping\u4e0d\u901a\u90a3\u4e48\u5c31\u662fip\u88ab\u5899\u4e86\uff0cip\u88ab\u5899\u65f6\uff0cxshell\u4e5f\u4f1a\u8fde\u63a5\u4e0d\u4e0a\u670d\u52a1\u5668\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u91cd\u65b0\u90e8\u7f72\u4e00\u4e2a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u65b0\u7684\u670d\u52a1\u5668\u5c31\u662f\u65b0\u7684ip\u3002\u5173\u4e8e\u600e\u4e48ping ip\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\uff0c\u6216\u8005\u7528xshell\u8f6f\u4ef6\u8fde\u63a5\u670d\u52a1\u5668\u6765\u5224\u65ad\uff0c\u8fde\u4e0d\u4e0a\u5373\u662f\u88ab\u5899\u4e86\u3002vultr\u5f00\u901a\u548c\u5220\u9664\u670d\u52a1\u5668\u975e\u5e38\u65b9\u4fbf\uff0c\u65b0\u670d\u52a1\u5668\u5373\u65b0ip\uff0c\u5927\u591a\u6570vps\u670d\u52a1\u5546\u90fd\u6ca1\u6709\u8fd9\u6837\u7684\u670d\u52a1\uff0c\u4e00\u822c\u7684vps\u670d\u52a1\u5546\u53ef\u80fd\u4f1a\u63d0\u4f9b\u514d\u8d39\u66f4\u63621\u6b21ip\u7684\u670d\u52a1\u3002\n2\u3001\u521a\u642d\u5efa\u597d\u7684ssr\u8d26\u53f7\uff0cip\u80fdping\u901a\uff0c\u4f46\u662f\u8fd8\u662f\u7528\u4e0d\u4e86\n\u9996\u9009\u6392\u9664\u6740\u6bd2\u8f6f\u4ef6\u7684\u5e72\u6270\uff0c\u5c24\u5176\u662f\u56fd\u4ea7\u6740\u6bd2\u8f6f\u4ef6\uff0c\u6bd4\u5982360\u5b89\u5168\u536b\u751f\u3001360\u6740\u6bd2\u8f6f\u4ef6\u3001\u817e\u8baf\u7ba1\u5bb6\u3001\u91d1\u5c71\u536b\u751f\u7b49\u3002\u8fd9\u4e9b\u4e1c\u897f\u5f88\u5bb9\u6613\u5e72\u6270\u7ffb\u5899\u4e0a\u7f51\uff0c\u5982\u679c\u4f60\u7684\u7535\u8111\u5b89\u88c5\u4e86\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u5efa\u8bae\u81f3\u5c11\u7ffb\u5899\u65f6\u522b\u7528\uff0c\u6700\u597d\u5378\u8f7d\u3002\u5176\u6b21\uff0c\u68c0\u67e5\u4e0bSSR\u4fe1\u606f\u662f\u5426\u586b\u5199\u6b63\u786e\u3002\u6d4f\u89c8\u5668\u7684\u4ee3\u7406\u65b9\u5f0f\u662f\u5426\u662fssr\u4ee3\u7406\uff0c\u5373\uff08HTTP\uff09127.0.0.1 \u548c1080\u3002\u5982\u679c\u4ee5\u4e0a\u6761\u4ef6\u90fd\u6392\u9664\uff0c\u8fd8\u662f\u7528\u4e0d\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u66f4\u6362\u7aef\u53e3\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u534f\u8bae\u3001\u6df7\u6dc6\uff0c\u6216\u8005\u66f4\u6362\u670d\u52a1\u5668\u4f4d\u7f6e\u3002\u53e6\u5916\uff0c\u5982\u679c\u4f60\u7684vps\u670d\u52a1\u5668\u914d\u7f6e\u7684\u662fSSR\u8d26\u53f7\uff0c\u5373\u6709\u534f\u8bae\u548c\u6df7\u6dc6\u4e14\u6ca1\u6709\u517c\u5bb9\u539f\u7248(SS\u7248\uff09\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u4f7f\u7528SSSR\u5ba2\u6237\u7aef\u6765\u4f7f\u7528\u8d26\u53f7\uff0c\u56e0\u4e3aSS\u5ba2\u6237\u7aef\u6ca1\u6709\u586b\u5199\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u9009\u9879\u3002\n3\u3001\u6709\u7684\u5730\u533a\u9700\u8981\u628a\u6df7\u6dc6\u53c2\u6570\u8bbe\u7f6e\u6210plain\u624d\u597d\u7528\u3002\u56e0\u4e3a\u6df7\u6dc6\u4e0d\u603b\u662f\u6709\u6548\u679c\uff0c\u8981\u770b\u5404\u5730\u533a\u7684\u7b56\u7565\uff0c\u6709\u65f6\u5019\u4e0d\u6df7\u6dc6\uff08plain\uff09\u8ba9\u5176\u770b\u8d77\u6765\u50cf\u968f\u673a\u6570\u636e\u66f4\u597d\u3002\n4\u3001\u7535\u8111\u80fd\u7528\u4f46\u624b\u673a\u7528\u4e0d\u4e86\n\u5982\u679c\u4f60\u7684\u624b\u673a\u7528\u7684\u662fSS\u5ba2\u6237\u7aef\uff0cSS\u5ba2\u6237\u7aef\u6ca1\u6709\u586b\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u5730\u65b9\uff0c\u5982\u679c\u4f60\u90e8\u7f72\u7684\u534f\u8bae\u548c\u6df7\u6dc6\u7684\u65f6\u5019\u6ca1\u6709\u9009\u62e9\u517c\u5bb9\u539f\u7248\uff08SS\u7248\uff09\uff0c\u56e0\u6b64\u624b\u673a\u662f\u7528\u4e0d\u4e86\u7684\u3002\u8fd9\u4e2a\u65f6\u5019\u4f60\u628a\u534f\u8bae\u5f04\u6210\u517c\u5bb9\u539f\u7248\u3001\u6df7\u6dc6\u4e5f\u8bbe\u7f6e\u6210\u517c\u5bb9\u539f\u7248\u5373\u53ef\u3002\u6216\u8005\u76f4\u63a5\u5c06\u534f\u8bae\u8bbe\u7f6e\u6210origin\u4e14\u6df7\u6dc6\u8bbe\u7f6e\u6210plain\u3002\n5\u3001vps\u7684\u670d\u52a1\u5668\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u8981\u7528\u7684\u592a\u9ad8\uff0c\u592a\u9ad8\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7cfb\u7edf\u7684\u9632\u706b\u5899\u95ee\u9898\u5bfc\u81f4\u642d\u5efa\u7684SSR\u8d26\u53f7\u8fde\u4e0d\u4e0a\u3002\u5982\u679c\u67d0\u4e2a\u7cfb\u7edf\u4e0d\u597d\u7528\uff0c\u53ef\u4ee5\u9009\u62e9\u5176\u5b83\u7684\u7cfb\u7edf\u6765\u5c1d\u8bd5\u3002\n6\u3001vultr\u670d\u52a1\u5546\u63d0\u4f9b\u7684vps\u670d\u52a1\u5668\u662f\u5355\u5411\u6d41\u91cf\u8ba1\u7b97\uff0c\u6709\u7684vps\u670d\u52a1\u5546\u662f\u53cc\u5411\u6d41\u91cf\u8ba1\u7b97\uff0c\u5355\u5411\u6d41\u91cf\u8ba1\u7b97\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u66f4\u5b9e\u60e0\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u5728vps\u670d\u52a1\u5668\u4e0a\u90e8\u7f72SSR\u670d\u52a1\u7aef\u540e\uff0c\u518d\u7528SSR\u5ba2\u6237\u7aef\u7ffb\u5899\uff0c\u6240\u4ee5SSR\u670d\u52a1\u7aef\u5c31\u76f8\u5f53\u4e8e\u4e2d\u8f6c\uff0c\u6bd4\u5982\u6211\u4eec\u770b\u4e00\u4e2a\u89c6\u9891\uff0c\u5fc5\u7136\u4f1a\u4ea7\u751f\u6d41\u91cf\uff0c\u5047\u5982\u6d88\u8017\u6d41\u91cf80M\uff0c\u90a3\u4e48VPS\u670d\u52a1\u5668\u4f1a\u4ea7\u751f\u4e0a\u4f2080M\u548c\u4e0b\u8f7d80M\u6d41\u91cf\uff0cvultr\u670d\u52a1\u5546\u53ea\u8ba1\u7b97\u5355\u5411\u768480M\u6d41\u91cf\u3002\u5982\u679c\u662f\u53cc\u5411\u8ba1\u7b97\u6d41\u91cf\uff0c\u90a3\u4e48\u4f1a\u8ba1\u7b97\u4e3a160M\u6d41\u91cf\u3002\n7\u3001\u5982\u679c\u4f60\u60f3\u628a\u642d\u5efa\u7684\u8d26\u53f7\u7ed9\u591a\u4eba\u4f7f\u7528\uff0c\u4e0d\u7528\u989d\u5916\u8bbe\u7f6e\u7aef\u53e3\uff0c\u56e0\u4e3a\u4e00\u4e2a\u8d26\u53f7\u5c31\u53ef\u4ee5\u591a\u4eba\u4f7f\u7528\u3002\u4e00\u822c5\u7f8e\u5143\u7684\u670d\u52a1\u5668\u53ef\u4ee5\u540c\u65f6\u652f\u630140\u4eba\u5728\u7ebf\u4f7f\u7528\u3002\n\u5982\u679c\u60f3\u5b9e\u73b0\u652f\u6301\u6bcf\u4e2a\u7528\u6237(\u7aef\u53e3)\u4e0d\u540c\u7684\u52a0\u5bc6\u65b9\u5f0f/\u534f\u8bae/\u6df7\u6dc6\u7b49\uff0c\u5e76\u4e14\u7ba1\u7406\u6d41\u91cf\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u8003\u591a\u7528\u6237\u914d\u7f6e\u811a\u672c\uff1awget -N --no-check-certificate https://softs.fun/Bash/ssrmu.sh && chmod +x ssrmu.sh && bash ssrmu.sh  \u5907\u7528\u811a\u672c\uff1awget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh && chmod +x ssrmu.sh && bash ssrmu.sh  \u5b89\u88c5\u540e\u7ba1\u7406\u547d\u4ee4\u4e3a\uff1abash ssrmu.sh\n\u6ce8\u610f\uff1a\u8fd9\u4e2a\u591a\u7528\u6237\u914d\u7f6e\u811a\u672c\u548c\u6559\u7a0b\u5185\u5bb9\u7684\u811a\u672c\u65e0\u6cd5\u5171\u5b58\uff01\u8981\u60f3\u7528\u8fd9\u4e2a\u811a\u672c\uff0c\u628a\u4e4b\u524d\u7684\u811a\u672c\u5378\u8f7d\uff0c\u8f93\u5165\u7ba1\u7406\u547d\u4ee4bash ssr.sh \uff0c\u9009\u62e93\uff0c\u5378\u8f7dShadowsocksR\u5373\u53ef\u5378\u8f7d\u539f\u811a\u672c\u3002\n8\u3001vultr\u670d\u52a1\u5668\u6bcf\u6708\u6709\u6d41\u91cf\u9650\u5236\uff0c\u8d85\u8fc7\u9650\u5236\u540e\u670d\u52a1\u5668\u4e0d\u4f1a\u88ab\u505c\u6b62\u8fd0\u884c\uff0c\u4f46\u662f\u8d85\u51fa\u7684\u6d41\u91cf\u4f1a\u88ab\u989d\u5916\u6536\u8d39\u3002\u5317\u7f8e\u548c\u897f\u6b27\u5730\u533a\u7684\u670d\u52a1\u5668\u8d85\u51fa\u6d41\u91cf\u540e\uff0c\u591a\u51fa\u7684\u90e8\u5206\u6536\u8d39\u4e3a0.01\u7f8e\u5143/G\u3002\u65b0\u52a0\u5761\u548c\u65e5\u672c\u4e1c\u4eac\uff08\u65e5\u672c\uff09\u4e3a0.025\u7f8e\u5143/G\uff0c\u6089\u5c3c\uff08\u6fb3\u5927\u5229\u4e9a\uff09\u4e3a0.05\u7f8e\u5143/G\u3002\u628avultr\u670d\u52a1\u5668\u5220\u6389\uff0c\u5f00\u901a\u65b0\u7684\u670d\u52a1\u5668\uff0c\u6d41\u91cf\u4f1a\u4ece0\u5f00\u59cb\u91cd\u65b0\u8ba1\u7b97\u3002\n9\u3001vultr\u600e\u6837\u624d\u80fd\u7533\u8bf7\u9000\u6b3e\u5462\uff1f\nvultr\u548c\u5176\u4ed6\u7684\u56fd\u5916\u5546\u5bb6\u4e00\u6837\uff0c\u90fd\u662f\u4f7f\u7528\u5de5\u5355\u7684\u5f62\u5f0f\u4e0e\u5ba2\u670d\u8054\u7cfb\uff0c\u5982\u679c\u9700\u8981\u9000\u6b3e\uff0c\u76f4\u63a5\u5728\u540e\u53f0\u70b9\u51fbsupport\uff0c\u9009\u62e9open ticket\u65b0\u5f00\u4e00\u4e2a\u5de5\u5355\uff0c\u9009\u62e9billing question\u8d22\u52a1\u95ee\u9898\uff0c\u7b80\u5355\u7684\u5728\u6587\u672c\u6846\u8f93\u5165\u4f60\u7684\u9000\u6b3e\u7406\u7531\u3002\u6bd4\u5982\uff1aPlease refund all the balance in my account\u3002\u5de5\u5355\u63d0\u4ea4\u4ee5\u540e\u4e00\u822c\u5f88\u5feb\u5c31\u53ef\u4ee5\u7ed9\u4f60\u786e\u8ba4\u9000\u6b3e\uff0c\u82e5\u5e72\u4e2a\u5de5\u4f5c\u65e5\u540e\u5c31\u4f1a\u9000\u56de\u4f60\u7684\u652f\u4ed8\u65b9\u5f0f\u3002\uff08\u5168\u989d\u9000\u6b3e\u7ed3\u675f\u540e\uff0c\u8d26\u53f7\u53ef\u80fd\u4f1a\u88ab\u5220\u9664\uff09\n\u5982\u679c\u82f1\u8bed\u6c34\u5e73\u4e0d\u597d\uff0c\u4f46\u662f\u60f3\u548c\u5ba2\u670d\u8fdb\u884c\u4ea4\u6d41\uff0c\u53ef\u4ee5\u7528\u767e\u5ea6\u5728\u7ebf\u7ffb\u8bd1\uff0c\u81ea\u52a8\u4e2d\u6587\u8f6c\u82f1\u6587\u548c\u82f1\u6587\u8f6c\u4e2d\u6587\u3002\n10\u3001\u8def\u7531\u5668\u4e5f\u53ef\u4ee5\u914d\u7f6ess/ssr\u8d26\u53f7\uff0c\u8be6\u89c1openwrt-ssr\u9879\u76ee\u5730\u5740\uff1ahttps://github.com/ywb94/openwrt-ssr  \n11\u3001\u5982\u679c\u7535\u8111\u60f3\u7528\u642d\u5efa\u7684ss/ssr\u8d26\u53f7\u73a9\u6e38\u620f\uff0c\u5373\u5b9e\u73b0\u7c7b\u4f3cVPN\u5168\u5c40\u4ee3\u7406\uff0c\u53ef\u4ee5\u7528SSTAP\uff0c\u6559\u7a0b\uff1ahttps://www.jianshu.com/p/519e68b74646 \n. ",
    "l1712115388": "\u636e\u8bf4\u5927\u9646\u8b66\u65b9\u638c\u63e1\u4e86\u4f60\u4eec\u5bb6\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5e76\u4e14\u6293\u6355\u4e86\u4e00\u4e2a\u4eba\u8fd8\u7f5a\u6b3e1000RMB\uff0c\u4f60\u4eec\u5bb6\u5230\u5e95\u5b89\u4e0d\u5b89\u5168. ",
    "zidoshare": "\u8fa3\u9e21\u4e1c\u897f\u4e0d\u8981\u9762\u76ae\u4e86. ",
    "singerswang": "\u5367\u4e86\u4e2a\u69fd\uff01\u771f\u5047\uff01\uff01\uff1f\uff1f. ",
    "Peakchen": "\u771f\u7684\u5047\u7684\uff0c\u6c42\u8bc1\uff1f. > \u4ece12\u53f7\u5f00\u59cb\uff0c\u84dd\u706f\u7f51\u901f\u660e\u663e\u4e0d\u7a33\u5b9a\u4e86\uff0c\u5361\u5361\u987f\u987f\u3002\u6073\u8bf7\u84dd\u706f\u8d76\u7d27\u5347\u7ea7\u7b56\u7565\u5427\uff0c\u8fd9\u6837\u4ee5\u540e\u6ca1\u6cd5\u7528\u4e86\u554a\u3002\n\n\n",
    "sunwenT": "\n\u524d\u5929\u665a\u4e0a\u5f00\u59cb\u7528\u4e0d\u4e86\u4e86 \u6709\u4eba\u548c\u6211\u4e00\u6837\u60c5\u51b5\u5417\uff1f\n\n\u6211\u7684\u4e5f\u7528\u4e0d\u4e86\u4e86\uff0c\u4ec0\u4e48\u9b3c. 5.2.8\u7248\u672c\u6253\u5f00\u4ee5\u540e\u4e5f\u7ffb\u4e0d\u4e86\u5899\uff0c\u521a\u4e70\u51e0\u4e2a\u6708\uff0c\u4e24\u5e74\u7684\u4e13\u4e1a\u7248\uff0c\u540e\u6094\u4e86. ",
    "SerBad": "\u5367\u69fd\uff0c\u771f\u7684\u5047\u7684\uff1f\u6c42\u8bc1\uff1f\u54ea\u4e2a\u7248\u672c\u7684\uff1f. ",
    "chengzhaoan": "\u6211win\u7248\u7684\u6700\u8fd1\u4e00\u76f4\u767b\u4e0d\u4e0a. ",
    "yuanye0814": "\u767b\u4e0d\u4e0a\u53bb\u4e86. \u8fd9\u4e24\u5929\u624b\u673a\u5f00\u4e86\u5c31\u6ca1\u6cd5\u4e0a\u5348\u3002. ",
    "W1850461829": "\u4ec0\u4e48\u65f6\u5019\u4fee\u590d\u597d\uff1f\uff1f\u901f\u5ea6\u554a. ",
    "kavinluo": "\u6700\u8fd1\u65e0\u6cd5\u4f7f\u7528\uff0c\u6211\u7684\u4e13\u4e1a\u7248\u5012\u8ba1\u65f6\u4e5f\u4e0d\u66f4\u65b0\u4e86\uff1b\u6253\u7b97\u5728\u7eed\u8d39\uff0c\u8fd9\u6837\u4e5f\u597d\u6211\u5c31\u4e0d\u7eed\u8d39\u4e86. ",
    "chengchena": "\u8d76\u5feb\u4fee\u597d\u5427. ",
    "ZiJinZiMing": "\u5e0c\u671b\u84dd\u706f\u5c3d\u5feb\u4fee\u590d\uff0c\u4e0d\u8fc7\u4e0d\u6e05\u695a\u662f\u4e0d\u662f\u5929\u671d\u53c8\u52a0\u56fa\u4e07\u91cc\u957f\u57ce\u4e86\uff0c\u5929\u671d\u4eba\u6c11\uff0c\u6c34\u6df1\u706b\u70ed. ",
    "liyifango": "\u662f\u554a\uff0c\u8fd9\u4e24\u5929\u65e0\u6cd5\u7528\u6839\u672c\uff0c\u5e0c\u671b\u80fd\u5c3d\u5feb\u6062\u590d\u5427. ",
    "JackChan1999": "\u88ab\u5c01\u6740\u4e86\uff0c\u8dd1\u8def\u4e86. \u6700\u8fd1\u5e7f\u4e1c\u6709\u4e2a\u53eb\u6731\u4e91\u67ab\u7684\u7537\u5b50\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86\u84dd\u706f\u7ffb\u5899\u88ab\u5224\u7f5a\u6b3e1000\uff0c\u6bd4\u5438\u6bd2\u5224\u5f97\u8fd8\u4e2d\uff1b\u4f5c\u4e3a\u7528\u6237\uff0c\u6211\u4eec\u5e94\u8be5\u600e\u6837\u4f7f\u7528\u624d\u80fd\u907f\u514d\u8fd9\u79cd\u4e8b\u60c5\u5462\uff1f\u6700\u8fd1\u624d\u51b2\u4e86\u4e00\u5e74\u7684\u4e13\u4e1a\u7248\uff0c\u73b0\u5728\u7528\u90fd\u4e0d\u6562\u7528\u4e86. \u88ab\u5c01\u6740\u4e86\uff0c\u8dd1\u8def\u4e86. \u6700\u8fd1\u5e7f\u4e1c\u6709\u4e2a\u53eb\u6731\u4e91\u67ab\u7684\u7537\u5b50\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86\u84dd\u706f\u7ffb\u5899\u88ab\u5224\u7f5a\u6b3e1000\uff0c\u6bd4\u5438\u6bd2\u5224\u5f97\u8fd8\u4e2d\uff1b\u4f5c\u4e3a\u7528\u6237\uff0c\u6211\u4eec\u5e94\u8be5\u600e\u6837\u4f7f\u7528\u624d\u80fd\u907f\u514d\u8fd9\u79cd\u4e8b\u60c5\u5462\uff1f\u6700\u8fd1\u624d\u51b2\u4e86\u4e00\u5e74\u7684\u4e13\u4e1a\u7248\uff0c\u73b0\u5728\u7528\u90fd\u4e0d\u6562\u7528\u4e86. \u88ab\u5c01\u6740\u4e86\uff0c\u8dd1\u8def\u4e86\uff0c\u5b98\u7f51\u90fd\u4e0a\u4e0d\u53bb\u4e86. \u6700\u8fd1\u5e7f\u4e1c\u6709\u4e2a\u53eb\u6731\u4e91\u67ab\u7684\u7537\u5b50\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86\u84dd\u706f\u7ffb\u5899\u88ab\u5224\u7f5a\u6b3e1000\uff0c\u6bd4\u5438\u6bd2\u5224\u5f97\u8fd8\u4e2d\uff1b\u4f5c\u4e3a\u7528\u6237\uff0c\u6211\u4eec\u5e94\u8be5\u600e\u6837\u4f7f\u7528\u624d\u80fd\u907f\u514d\u8fd9\u79cd\u4e8b\u60c5\u5462\uff1f\u6700\u8fd1\u624d\u51b2\u4e86\u4e00\u5e74\u7684\u4e13\u4e1a\u7248\uff0c\u73b0\u5728\u7528\u90fd\u4e0d\u6562\u7528\u4e86. \u90fd\u51e0\u4e2a\u6708\u4e0d\u80fd\u7528\u4e86\uff0c\u5e94\u8be5\u662f\u88ab\u5c01\u4e86. ",
    "tzq668766": "\u6700\u8fd1\u8001\u662f\u6389\u7ebf\uff0c\u5f88\u607c\u706b\uff0c\u5e0c\u671b\u5c3d\u5feb\u89e3\u51b3. > \u6700\u8fd1\u8001\u662f\u6389\u7ebf\uff0c\u5f88\u607c\u706b\uff0c\u5e0c\u671b\u5c3d\u5feb\u89e3\u51b3\n\u5347\u7ea7\u52305.2.8\u8fd8\u7b97\u662f\u6bd4\u8f83\u7a33\u5b9a\uff0c\u6b63\u5728\u4f7f\u7528\u4e2d.... ",
    "xiaomingTang": "\u4efb\u4f55\u4e1c\u897f\u90fd\u770b\u4e0d\u4e86\uff0c\u641e\u6bdb\u7ebf\uff01\uff01\uff01\u6253\u5f00\u84dd\u706f\u540e\uff0c\u767b\u4e2a\u767e\u5ea6\u90fd\u767b\u4e0d\u4e0a\u4e86\uff1f\uff1f\uff1f\uff1f\uff1f\uff01\uff01\uff01\uff01\uff01\uff01. \u4e70\u4e86\u4e24\u5e74\u7684\uff0c\u7528\u4e86\u4e00\u4e2a\u6708\u5de6\u53f3\u5c31\u8fd9\u6837\uff1f\uff1f\uff1f\uff01\uff01\uff01\uff01\uff01\uff01. \u6563\u4e86\u5427\uff0c\u624d\u53d1\u73b03\u67085\u53f7\u662f\u4e24\u4f1a\uff0c\u8fc7\u4e86\u5c31\u597d\u4e86\uff08maybe?\uff09. ",
    "mylyed": "2.14 \u665a\u4e0a\u6301\u7eed\u6389\u7ebf\u4e2d. ",
    "xuyougen": "\u90c1\u95f7\uff0c\u624b\u673a\u7535\u8111\u90fd\u4e0d\u80fd\u7528. ",
    "walshzhang": "\u6211\u7684\u4e5f\u8fde\u4e0d\u4e0a\u554a\uff0c\u5e0c\u671b\u5c3d\u5feb\u89e3\u51b3. \u5e0c\u671b\u5f00\u53d1\u4eba\u5458\u56de\u590d\u4e00\u4e0b\u4fee\u590d\u8fdb\u5ea6\u3002\u8c22\u8c22. ",
    "huazai128": "\u4efb\u4f55\u4e1c\u897f\u90fd\u770b\u4e0d\u4e86\uff0c\u641e\u6bdb\u7ebf\uff01\uff01\uff01\u6253\u5f00\u84dd\u706f\u540e\uff0c\u767b\u4e2a\u767e\u5ea6\u90fd\u767b\u4e0d\u4e0a\u4e86\uff1f\uff1f\uff1f\uff1f\uff1f\uff01\uff01\uff01\uff01\uff01\uff01. ",
    "Gooloo-Lahm": "\u597d\u51e0\u5929\u4e86\uff0c\u653e\u5b8c\u5047\u56de\u6765\u5c31\u53d1\u73b0\uff0c\u663e\u793a\u662f\u8fde\u63a5\u7684\uff0c\u4e00\u6253\u5f00\u7f51\u9875\u5c31\u65ad\u3002\u3002\u65ad\u5f00\u91cd\u8fdeN\u6b21\uff0c\u53cd\u53cd\u590d\u590d\u3002. ",
    "wulinwulin": "\u4f60\u4eec\u522b\u5435\u4e86,\u4ee5\u540e\u4f60\u4eec\u522b\u7528\u84dd\u706f\u4e86,\u6211\u65e9\u5c31\u4e0d\u7528\u84dd\u706f\u4e86,\u5929\u5929\u770b\u4f60\u4eec\u5435,\u6211\u7ed9\u4f60\u4eec\u4e00\u4e2a\u597d\u7684VPN,\u8981\u82b1\u94b1\u7684,\u67098\u5757\u94b1\u4e00\u4e2a\u6708,\u670915.8\u4e00\u4e2a\u6708\u901f\u5ea6\u5f88\u5feb\u57fa\u672c\u4e0a\u90fd\u662f\u79d2\u5f00\u7684,\u94fe\u63a5https://www.kxcloud.xyz/auth/register?code=e760vtK0NeJluBewHDa2tGLCCx8gh5hP. ",
    "YIDADJY": "\u84dd\u706f\u7528\u4e0d\u4e86 \u7528\u8fd9\u4e2a \u5899\u6d1e Dlercloud. \u4e00\u4e2a\u670832 \u7a33\u5982\u72d7 \u770b4 8K\u79d2\u5f00  \u8001\u673a\u573a \u4eba\u6c14\u6700\u9ad8\nhttps://dlercloud.net/auth/register?affid=15573\n\u6211\u7684\u9080\u8bf7\u7801 o41Jl9yPvb9S\n\u8c01\u8fd8\u8981\u79c1\u6211\u884c\u4e86 \u7edd\u5bf9\u7a33\n\u653e\u5f03\u84dd\u706f \u624d\u662f\u6b63\u786e\u9009\u62e9 QQ 1042103165. \u84dd\u706f\u7528\u4e0d\u4e86\u7528\u8fd9\u4e2a\u5899\u6d1eDlercloud\u3002\u4e00\u4e2a\u670832\u7a33\u5982\u72d7\u770b4 8K\u79d2\u5f00\u8001\u673a\u573a\u4eba\u6c14\u6700\u9ad8\nhttps://dlercloud.net/auth/register?affid=15573\n\u6211\u7684\u9080\u8bf7\u7801o41Jl9yPvb9S \n\u8c01\u8fd8\u8981\u79c1\u6211\u884c\u4e86\u7edd\u5bf9\u7a33\n\u653e\u5f03\u84dd\u706f\u624d\u662f\u6b63\u786e\u9009\u62e9QQ 1042103165. \u84dd\u706f\u7528\u4e0d\u4e86\u7528\u8fd9\u4e2a\u5899\u6d1eDlercloud\u3002\u4e00\u4e2a\u670832\u7a33\u5982\u72d7\u770b4 8K\u79d2\u5f00\u8001\u673a\u573a\u4eba\u6c14\u6700\u9ad8\nhttps://dlercloud.net/auth/register?affid=15573\n\u6211\u7684\u9080\u8bf7\u7801o41Jl9yPvb9S \n\u8c01\u8fd8\u8981\u79c1\u6211\u884c\u4e86\u7edd\u5bf9\u7a33\n\u653e\u5f03\u84dd\u706f\u624d\u662f\u6b63\u786e\u9009\u62e9QQ 1042103165. \u84dd\u706f\u7528\u4e0d\u4e86\u7528\u8fd9\u4e2a\u5899\u6d1eDlercloud\u3002\u4e00\u4e2a\u670832\u7a33\u5982\u72d7\u770b4 8K\u79d2\u5f00\u8001\u673a\u573a\u4eba\u6c14\u6700\u9ad8\nhttps://dlercloud.net/auth/register?affid=15573\n\u6211\u7684\u9080\u8bf7\u7801o41Jl9yPvb9S \n\u8c01\u8fd8\u8981\u79c1\u6211\u884c\u4e86\u7edd\u5bf9\u7a33\n\u653e\u5f03\u84dd\u706f\u624d\u662f\u6b63\u786e\u9009\u62e9QQ 1042103165. \u84dd\u706f\u7528\u4e0d\u4e86\u7528\u8fd9\u4e2a\u5899\u6d1eDlercloud\u3002\u4e00\u4e2a\u670832\u7a33\u5982\u72d7\u770b4 8K\u79d2\u5f00\u8001\u673a\u573a\u4eba\u6c14\u6700\u9ad8\nhttps://dlercloud.net/auth/register?affid=15573\n\u6211\u7684\u9080\u8bf7\u7801o41Jl9yPvb9S \n\u8c01\u8fd8\u8981\u79c1\u6211\u884c\u4e86\u7edd\u5bf9\u7a33\n\u653e\u5f03\u84dd\u706f\u624d\u662f\u6b63\u786e\u9009\u62e9QQ 1042103165. \u84dd\u706f\u7528\u4e0d\u4e86\u7528\u8fd9\u4e2a\u5899\u6d1eDlercloud\u3002\u4e00\u4e2a\u670832\u7a33\u5982\u72d7\u770b4 8K\u79d2\u5f00\u8001\u673a\u573a\u4eba\u6c14\u6700\u9ad8\nhttps://dlercloud.net/auth/register?affid=15573\n\u6211\u7684\u9080\u8bf7\u7801o41Jl9yPvb9S \n\u8c01\u8fd8\u8981\u79c1\u6211\u884c\u4e86\u7edd\u5bf9\u7a33\n\u653e\u5f03\u84dd\u706f\u624d\u662f\u6b63\u786e\u9009\u62e9QQ 1042103165\n\u522b\u53bb\u90a3\u79cd\u4ef7\u683c\u7279\u522b\u4f4e\u7684\u673a\u573a \u90a3\u90fd\u662f\u552c\u4eba\u7684 \u5ef6\u8fdf\u867d\u7136\u4f4e \u7528\u7684\u4eba\u8d3c\u591a \u5361\u6b7b\u4f60. \u84dd\u706f\u7528\u4e0d\u4e86\u7528\u8fd9\u4e2a\u5899\u6d1eDlercloud\u3002\u4e00\u4e2a\u670832\u7a33\u5982\u72d7\u770b4 8K\u79d2\u5f00\u8001\u673a\u573a\u4eba\u6c14\u6700\u9ad8\nhttps://dlercloud.net/auth/register?affid=15573\n\u6211\u7684\u9080\u8bf7\u7801o41Jl9yPvb9S \n\u8c01\u8fd8\u8981\u79c1\u6211\u884c\u4e86\u7edd\u5bf9\u7a33\n\u653e\u5f03\u84dd\u706f\u624d\u662f\u6b63\u786e\u9009\u62e9QQ 1042103165\n\u9080\u8bf7\u7801 7j1xk5XAiSyZ  o41Jl9yPvb9S qad22bFUa9IS  pILhmJoFNULL  lvcKqah3GbnE  oEp5wGJ3101G\neDiTXjN7REKF  6hMyNX2HtpbC  tRkPeYzQPo8a  v7W462dDClYs SHdAtYlIO74U  tiqFDaNG3rRP\n04UbuO85TUhR  6FVxpioxkrTo  6qB1FIaJhiDn. \u84dd\u706f\u7528\u4e0d\u4e86\u7528\u8fd9\u4e2a\u5899\u6d1eDlercloud\u3002\u4e00\u4e2a\u670832\u7a33\u5982\u72d7\u770b4 8K\u79d2\u5f00\u8001\u673a\u573a\u4eba\u6c14\u6700\u9ad8\nhttps://dlercloud.net/auth/register?affid=15573\n\u8c01\u8fd8\u8981\u79c1\u6211\u884c\u4e86\u7edd\u5bf9\u7a33\n\u653e\u5f03\u84dd\u706f\u624d\u662f\u6b63\u786e\u9009\u62e9QQ 1042103165\n\u9080\u8bf7\u7801 7j1xk5XAiSyZ    o41Jl9yPvb9S   qad22bFUa9IS  pILhmJoFNULL  lvcKqah3GbnE  oEp5wGJ3101G\neDiTXjN7REKF    6hMyNX2HtpbC    tRkPeYzQPo8a    v7W462dDClYs   SHdAtYlIO74U    tiqFDaNG3rRP\n04UbuO85TUhR    6FVxpioxkrTo    6qB1FIaJhiDn. ",
    "guokar": "\u5b8c\u5168\u767b\u4e0d\u4e0a\u5566. ",
    "EvanMaFYH": "\u4e70\u4e86\u4e24\u5e74\u4e13\u4e1a\u7248\u65e9\u5c31\u7528\u4e0d\u4e86\u4e86\uff0c\u6211\u7684mac\u4e00\u76f4\u4f7f\u7528\u4e0d\u4e86\u4e13\u4e1a\u7248\uff0c\u50cf\u662f\u88ab\u5c01\u4e86\u4e00\u6837\uff0c\u73b0\u5728\u8fde\u514d\u8d39\u7684\u6d41\u91cf\u90fd\u7528\u4e0d\u4e86\u4e86. ",
    "lylandroid": "\u84dd\u706fvpn\u73b0\u5728\u5b8c\u5168\u7528\u4e0d\u4e86\uff0c\u7ed9\u5b98\u65b9\u53d1\u90ae\u4ef6\u53cd\u9988\u4e5f\u5f97\u4e0d\u5230\u56de\u590d\uff0c\u8fd9\u662f\u8dd1\u8def\u4e86\u5417. ",
    "lbx6z": "\n\u4efb\u4f55\u4e1c\u897f\u90fd\u770b\u4e0d\u4e86\uff0c\u641e\u6bdb\u7ebf\uff01\uff01\uff01\u6253\u5f00\u84dd\u706f\u540e\uff0c\u767b\u4e2a\u767e\u5ea6\u90fd\u767b\u4e0d\u4e0a\u4e86\uff1f\uff1f\uff1f\uff1f\uff1f\uff01\uff01\uff01\uff01\uff01\uff01\n\n\u4e2a\u4eba\u914d\u7f6e\uff1achrome+SwitchOmega+lantern\n\u4e4b\u524d\u5728SwitchOmega\u91cc\u914d\u7f6e\u4f7f\u7528\u201c\u7cfb\u7edf\u4ee3\u7406\u201d\u540e\uff0c\u4e5f\u4f1a\u51fa\u73b0\u6709\u4e9b\u56fd\u5185\u7f51\u7ad9\u8bbf\u95ee\u4e0d\u4e86\u7684\u60c5\u51b5\uff0c\u6539\u6210\u201c\u76f4\u63a5\u8fde\u63a5\u201d\u5c31\u53ef\u4ee5\u8bbf\u95ee\u4e86\u3002. \u6b63\u5e38\u4f7f\u7528\u7684\u8def\u8fc7\u2026\u2026\u2026\u2026\u2026\u2026\nLantern 5.2.8 (20190201.054458)\nmacOS Mojave \u7248\u672c10.14.2. ",
    "ABHSY": "ios\u600e\u4e48\u7ffb\u5899\u6709\u4eba\u77e5\u9053\u5417. ",
    "ncubrian": "\u5347\u7ea7\u52305.3.1\u540e\u5c31\u53ef\u4ee5\u7528\u5566\uff0c\u8c22\u8c22\u8c22\u8c22\uff0c\u671f\u5f85iOS\u54e6\uff5e. ",
    "xyuh111": "\u6211\u7684\u6d4b\u8bd5\u7ed3\u679c\u4e00\u6837\uff0c\uff0c\uff0c\u4e13\u4e1a\u7248\u8d39\u5e9f\u4e86\u3002\u6d4b\u8bd5\u7248\u53ef\u4ee5\u4e0a\u7f51. ",
    "gisakuya": "\u4e0a\u5468\u5f00\u59cb\u5c31\u4e0d\u7a33\u5b9a\u4e86\uff0c\u4e00\u76f4\u65ad\u65ad\u7eed\u7eed\uff0c\u7ecf\u5e38\u8fde\u4e0d\u4e0a\u3002\u6211\u4e5f\u662f\u4e13\u4e1a\u7248. ",
    "sylerbhchen": "\u6d4b\u8bd5\u7248\u5728\u54ea\u91cc\u4e0b\uff1f. ",
    "gaoqiang19514": "\u4eca\u5929\u65e9\u4e0a\u53ef\u4ee5\u7528\u4e86\uff0cnice. > \u53ef\u80fd\u8981\u5f00\u4f1a\u4e86\uff0c\u5c01\u9501\u4e00\u4e0b\u56fd\u5916\u7684\u8a00\u8bba\u3002\u5e38\u89c4\u64cd\u4f5c\uff0c\u89c1\u602a\u4e0d\u602a\u4e86\u3002\n\u53ef\u662f\u8fd9\u8fd8\u65e9\u554a. > \u6b63\u5e38\u4f7f\u7528\u7684\u8def\u8fc7\u2026\u2026\u2026\u2026\u2026\u2026\n\nLantern 5.2.8 (20190201.054458)\nmacOS Mojave \u7248\u672c10.14.2\n\n\u4e0d\u53ef\u4ee5\u554a\uff0c\u54e5\u54e5. ",
    "zzd0916": "\u4e13\u4e1a\u7248\u8fd8\u662f\u4e0d\u80fd\u7528\u554a\uff0c\u6c42\u5feb\u70b9\u89e3\u51b3\u5440. ",
    "Alierchen": "\u6211\u7684\u4e13\u4e1a\u7248\u521a\u7eed\u8d39\u7684\uff0c \u6211\u6709\u4e00\u4e2a\u65b0\u624b\u673a\u767b\u4e0d\u4e86\u4e13\u4e1a\u7248\uff0c \u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff1f \u5df2\u7ecf\u6388\u6743\u4e86\u8fd8\u662f\u6ca1\u7528\uff0c \u7528\u90ae\u7bb1\u7684\u8bdd\u8fd8\u662f\u6536\u4e0d\u5230\u9a8c\u8bc1\u7801. \u600e\u6837\u624d\u80fd\u5f00\u4e2acase\u51fa\u6765\uff1f \u4e0b\u5348\u6211\u4e00\u76f4\u5728\u53e6\u5916\u4e00\u8fb9\u7684\u2018\u84dd\u706f\u2019\u4e00\u76f4\u95ee. ",
    "qindy": "\u84dd\u706f\u73b0\u5728\u4e0d\u884c\u4e86\uff0c\u6211\u7528lostcloud\u3002   https://lostcloud.org/auth/register?code=H48JjeS59229XP47. \u84dd\u706f\u4e0d\u884c\u4e86\uff0c\u6211\u73b0\u5728\u7528lostcloud    https://lostcloud.org/auth/register?code=H48JjeS59229XP47. ",
    "pheromone": "@qindy  lostcloud\u8fd9\u4e2a\u4e5f\u6302\u4e86..... ",
    "skyweep": "\u76ee\u524d\u6b63\u5f0f\u7248\u4e00\u5207\u6b63\u5e38\uff0c\u6ca1\u6709\u95ee\u9898\u3002\u8f93\u5165\u6211\u7684\u9080\u8bf7\u7801 YHST839 \u6765\u83b7\u5f97\u4e09\u4e2a\u6708\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff01\u7acb\u5373\u4e0b\u8f7d https://github.com/getlantern/forum. ",
    "unclewindows": "\n\u76ee\u524d\u6b63\u5f0f\u7248\u4e00\u5207\u6b63\u5e38\uff0c\u6ca1\u6709\u95ee\u9898\u3002\u8f93\u5165\u6211\u7684\u9080\u8bf7\u7801 YHST839 \u6765\u83b7\u5f97\u4e09\u4e2a\u6708\u7684\u84dd\u706f\u4e13\u4e1a\u7248\uff01\u7acb\u5373\u4e0b\u8f7d https://github.com/getlantern/forum\n\n\u4f60\u73b0\u5728\u80fd\u7528\u5417\uff1f\u56fd\u5185\uff1f190319. ",
    "fly12358": "\u5e0c\u671b\u5c3d\u5feb\u4fee\u590d\uff0c\u8c22\u8c22. ",
    "wq1019": "\u5f00\u4e86\u597d\u51e0\u5e74\u7684\u4e13\u4e1a\u7248, \u8bf4\u4e0d\u80fd\u7528\u5c31\u4e0d\u80fd\u7528\u4e86, \u6700\u8d77\u7801\u5f97\u7ed9\u6211\u4eec\u8fd9\u4e9b\u7528\u6237\u4e00\u4e2a\u8bf4\u6cd5\u5427 :-1:  #8337 . > > \u6b63\u5e38\u4f7f\u7528\u7684\u8def\u8fc7\u2026\u2026\u2026\u2026\u2026\u2026\n\n\nLantern 5.2.8 (20190201.054458)\nmacOS Mojave \u7248\u672c10.14.2\n\n\u4e0d\u53ef\u4ee5\u554a\uff0c\u54e5\u54e5\n\u53ef\u4ee5\u7528\u4e86, \u66f4\u65b0\u4e00\u4e0b\u5c31\u597d\u4e86 https://github.com/getlantern/lantern/releases/download/5.3.0/update_linux_amd64.bz2. \n",
    "LittleNewton": "\u53ef\u80fd\u8981\u5f00\u4f1a\u4e86\uff0c\u5c01\u9501\u4e00\u4e0b\u56fd\u5916\u7684\u8a00\u8bba\u3002\u5e38\u89c4\u64cd\u4f5c\uff0c\u89c1\u602a\u4e0d\u602a\u4e86\u3002. ",
    "Diegohehehe": "\u4f60\u597d\uff0c\u6211\u4e0e2018\u5e742\u670826\u65e5\u8d2d\u4e70\u7684\u4e13\u4e1a\u7248\u4e24\u5e74\u670d\u52a1\u3002\u539f\u5148\u8fd8\u6709\u4e00\u5e74\u670d\u52a1\uff0c\u5408\u8ba1\u5e94\u7ee7\u7eed\u6301\u6709\u4e09\u5e74\u670d\u52a1\u3002\u4f46\u662f\u90ae\u7bb1\u6ca1\u6709\u6536\u523025\u4f4d\u6fc0\u6d3b\u7801\uff0c\u70e6\u8bf7\u5e2e\u5fd9\u4fee\u590d\u3002. ",
    "lmy4dev": "\u73b0\u5728\u662f\u4e0d\u662f\u4e0d\u80fd\u901a\u8fc7\u5c40\u57df\u7f51\u5171\u4eab\u7ed9iPhone\u4f7f\u7528\u4e86\uff0c\u6211\u7684\u7248\u672c5.3.1 \u6309\u539f\u6765\u7684\u8bbe\u7f6e\u5b8c\u4e86\u624b\u673a\u4e0d\u80fd\u7528. ",
    "handsomebubu": "\u6211\u662f\u81ea\u52a8\u7ed9\u6211\u5207\u6362\u5230\u6700\u6162\u7684\u70b9 \uff0c\u770b\u4e2a\u6cb9\u7ba1 \u53ea\u80fd\u770b240\u753b\u8d28\u7684\u90fd\u5361. ",
    "paulyung541": "\u514d\u8d39\u83b7\u5f97\u84dd\u706f\u4e13\u4e1a\u7248\u989d\u5916\u4f7f\u7528\u65f6\u95f4\uff0c\u8bf7\u4f7f\u7528\u9080\u8bf7\u7801 FM26MB \u3002\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u4e0b\u8f7d\uff1ahttps://bit.ly/1M8x04u. \u514d\u8d39\u83b7\u5f97\u84dd\u706f\u4e13\u4e1a\u7248\u989d\u5916\u4f7f\u7528\u65f6\u95f4\uff0c\u8bf7\u4f7f\u7528\u9080\u8bf7\u7801 FM26MB \u3002\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u4e0b\u8f7d\uff1ahttps://bit.ly/1M8x04u. ",
    "lanfengluanwu": "windows 10\u7cfb\u7edf \u63d0\u793a\u65e0\u6cd5\u5c06\u84dd\u706f\u8bbe\u7f6e\u4e3a\u7cfb\u7edf\u4ee3\u7406\u3002\u5b98\u7f51\u4e0a\u7684\u95ee\u9898\u89e3\u51b3\u65b9\u6cd5\u90fd\u8bd5\u8fc7\uff0c\u4e0d\u7ba1\u7528\uff0c\u96be\u9053\u56e0\u4e3a\u53c8\u5230\u4e86\u4e24\u4f1a\uff1f. ",
    "ed2k": "just realized this one is loading from a properites not from a file. so have to save the properties to a file first.\n. ",
    "fliar": "@fffw yes, i'll make another pull request\n. ",
    "maartje1": "Dhidw0Bb3AuxVoGumctTDFnMPolyfyEq4qo05l3VQosVO759UtUlwlFKeGV13cIH\n. "
}